{"home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.None.setup.get_extensions": [[17, 57], ["os.path.dirname", "os.path.join", "glob.glob", "glob.glob", "glob.glob", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "extension", "torch.cuda.is_available", "os.getenv"], "function", ["None"], ["def", "get_extensions", "(", ")", ":", "\n", "    ", "this_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "extensions_dir", "=", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"maskrcnn_benchmark\"", ",", "\"csrc\"", ")", "\n", "\n", "main_file", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"*.cpp\"", ")", ")", "\n", "source_cpu", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"cpu\"", ",", "\"*.cpp\"", ")", ")", "\n", "source_cuda", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"cuda\"", ",", "\"*.cu\"", ")", ")", "\n", "\n", "sources", "=", "main_file", "+", "source_cpu", "\n", "extension", "=", "CppExtension", "\n", "\n", "extra_compile_args", "=", "{", "\"cxx\"", ":", "[", "]", "}", "\n", "define_macros", "=", "[", "]", "\n", "\n", "if", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "CUDA_HOME", "is", "not", "None", ")", "or", "os", ".", "getenv", "(", "\"FORCE_CUDA\"", ",", "\"0\"", ")", "==", "\"1\"", ":", "\n", "        ", "extension", "=", "CUDAExtension", "\n", "sources", "+=", "source_cuda", "\n", "define_macros", "+=", "[", "(", "\"WITH_CUDA\"", ",", "None", ")", "]", "\n", "extra_compile_args", "[", "\"nvcc\"", "]", "=", "[", "\n", "\"-DCUDA_HAS_FP16=1\"", ",", "\n", "\"-D__CUDA_NO_HALF_OPERATORS__\"", ",", "\n", "\"-D__CUDA_NO_HALF_CONVERSIONS__\"", ",", "\n", "\"-D__CUDA_NO_HALF2_OPERATORS__\"", ",", "\n", "]", "\n", "\n", "", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "s", ")", "for", "s", "in", "sources", "]", "\n", "\n", "include_dirs", "=", "[", "extensions_dir", "]", "\n", "\n", "ext_modules", "=", "[", "\n", "extension", "(", "\n", "\"maskrcnn_benchmark._C\"", ",", "\n", "sources", ",", "\n", "include_dirs", "=", "include_dirs", ",", "\n", "define_macros", "=", "define_macros", ",", "\n", "extra_compile_args", "=", "extra_compile_args", ",", "\n", ")", "\n", "]", "\n", "\n", "return", "ext_modules", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.tools.test_net.main": [[27, 151], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "maskrcnn_benchmark.config.cfg.merge_from_file", "maskrcnn_benchmark.config.cfg.merge_from_list", "maskrcnn_benchmark.config.cfg.freeze", "maskrcnn_benchmark.utils.logger.setup_logger", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.modeling.detector.build_detection_model", "maskrcnn_benchmark.modeling.detector.build_detection_model.to", "amp.init", "maskrcnn_benchmark.data.make_data_loader", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer", "int", "torch.cuda.set_device", "torch.distributed.init_process_group", "maskrcnn_benchmark.utils.comm.synchronize", "maskrcnn_benchmark.utils.comm.get_rank", "len", "enumerate", "open", "sorted", "open.close", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer.load", "zip", "maskrcnn_benchmark.utils.collect_env.collect_env_info", "os.path.join", "maskrcnn_benchmark.utils.miscellaneous.mkdir", "os.path.join", "os.listdir", "os.path.join", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer.load", "zip", "maskrcnn_benchmark.engine.inference.inference", "maskrcnn_benchmark.utils.comm.synchronize", "print", "maskrcnn_benchmark.engine.inference.inference", "maskrcnn_benchmark.utils.comm.synchronize", "print", "open.write"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.logger.setup_logger", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.detectors.build_detection_model", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.data.build.make_data_loader", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.synchronize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_rank", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.collect_env.collect_env_info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.miscellaneous.mkdir", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.inference_two_net.inference", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.synchronize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.inference_two_net.inference", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.synchronize"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch Object Detection Inference\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config-file\"", ",", "\n", "default", "=", "\"/private/home/fmassa/github/detectron.pytorch_v2/configs/e2e_faster_rcnn_R_50_C4_1x_caffe2.yaml\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--ckpt\"", ",", "\n", "help", "=", "\"The path to the checkpoint for test, default is the latest checkpoint.\"", ",", "\n", "default", "=", "None", ",", "\n", ")", "# --config-file \"configs/align/line_bezier0732.yaml\" ", "\n", "# --skip-test \\", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "distributed", "=", "num_gpus", ">", "1", "\n", "\n", "if", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", "\n", ")", "\n", "synchronize", "(", ")", "\n", "\n", "", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "save_dir", "=", "\"\"", "\n", "logger", "=", "setup_logger", "(", "\"maskrcnn_benchmark\"", ",", "save_dir", ",", "get_rank", "(", ")", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "cfg", ")", "\n", "\n", "logger", ".", "info", "(", "\"Collecting env info (might take some time)\"", ")", "\n", "logger", ".", "info", "(", "\"\\n\"", "+", "collect_env_info", "(", ")", ")", "\n", "\n", "model", "=", "build_detection_model", "(", "cfg", ")", "\n", "model", ".", "to", "(", "cfg", ".", "MODEL", ".", "DEVICE", ")", "\n", "\n", "# Initialize mixed-precision if necessary", "\n", "use_mixed_precision", "=", "cfg", ".", "DTYPE", "==", "'float16'", "\n", "amp_handle", "=", "amp", ".", "init", "(", "enabled", "=", "use_mixed_precision", ",", "verbose", "=", "cfg", ".", "AMP_VERBOSE", ")", "\n", "iou_types", "=", "(", "\"bbox\"", ",", ")", "\n", "if", "cfg", ".", "MODEL", ".", "MASK_ON", "and", "not", "cfg", ".", "MODEL", ".", "KE_ON", ":", "\n", "        ", "iou_types", "=", "iou_types", "+", "(", "\"segm\"", ",", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "KEYPOINT_ON", ":", "\n", "        ", "iou_types", "=", "iou_types", "+", "(", "\"keypoints\"", ",", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "KE_ON", ":", "\n", "        ", "iou_types", "=", "iou_types", "+", "(", "\"kes\"", ",", ")", "\n", "", "output_folders", "=", "[", "None", "]", "*", "len", "(", "cfg", ".", "DATASETS", ".", "TEST", ")", "\n", "dataset_names", "=", "cfg", ".", "DATASETS", ".", "TEST", "\n", "if", "cfg", ".", "OUTPUT_DIR", ":", "\n", "        ", "for", "idx", ",", "dataset_name", "in", "enumerate", "(", "dataset_names", ")", ":", "\n", "            ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"inference\"", ",", "dataset_name", ")", "\n", "mkdir", "(", "output_folder", ")", "\n", "output_folders", "[", "idx", "]", "=", "output_folder", "\n", "", "", "data_loaders_val", "=", "make_data_loader", "(", "cfg", ",", "is_train", "=", "False", ",", "is_distributed", "=", "distributed", ")", "\n", "rec_type", "=", "cfg", ".", "MODEL", ".", "ALIGN", ".", "PREDICTOR", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "checkpointer", "=", "DetectronCheckpointer", "(", "cfg", ",", "model", ",", "save_dir", "=", "output_dir", ")", "\n", "best_mAP", "=", "0", "\n", "all_lines", "=", "[", "]", "\n", "if", "args", ".", "ckpt", "is", "None", ":", "\n", "        ", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"inference\"", ",", "\"mAPs.txt\"", ")", ",", "\"w\"", ")", "\n", "for", "ckpt_name", "in", "sorted", "(", "os", ".", "listdir", "(", "output_dir", ")", ",", "reverse", "=", "True", ")", ":", "\n", "            ", "if", "\".pth\"", "not", "in", "ckpt_name", "or", "\"final\"", "in", "ckpt_name", ":", "\n", "                ", "continue", "\n", "# ckpt = cfg.MODEL.WEIGHT if args.ckpt is None else args.ckpt", "\n", "", "ckpt", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "ckpt_name", ")", "\n", "_", "=", "checkpointer", ".", "load", "(", "ckpt", ",", "use_latest", "=", "False", ")", "\n", "for", "output_folder", ",", "dataset_name", ",", "data_loader_val", "in", "zip", "(", "output_folders", ",", "dataset_names", ",", "data_loaders_val", ")", ":", "\n", "                ", "cur_result", "=", "inference", "(", "\n", "model", ",", "\n", "data_loader_val", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "iou_types", "=", "iou_types", ",", "\n", "rec_type", "=", "rec_type", ",", "\n", "box_only", "=", "False", "if", "cfg", ".", "MODEL", ".", "FCOS_ON", "or", "cfg", ".", "MODEL", ".", "RETINANET_ON", "else", "cfg", ".", "MODEL", ".", "RPN_ONLY", ",", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", ",", "\n", "expected_results", "=", "cfg", ".", "TEST", ".", "EXPECTED_RESULTS", ",", "\n", "expected_results_sigma_tol", "=", "cfg", ".", "TEST", ".", "EXPECTED_RESULTS_SIGMA_TOL", ",", "\n", "output_folder", "=", "output_folder", ",", "\n", ")", "\n", "best_mAP", "=", "cur_result", "if", "cur_result", ">", "best_mAP", "else", "best_mAP", "\n", "synchronize", "(", ")", "\n", "line", "=", "\"Model:{},mAP:{},best mAP:{}\\n\"", ".", "format", "(", "ckpt", ",", "cur_result", ",", "best_mAP", ")", "\n", "print", "(", "line", ")", "\n", "f", ".", "write", "(", "line", ")", "\n", "# all_lines.append(line)", "\n", "\n", "# for line in all_lines:", "\n", "# f.write(line)", "\n", "", "", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "# ckpt = os.path.join(output_dir, ckpt_name)", "\n", "        ", "ckpt", "=", "args", ".", "ckpt", "\n", "_", "=", "checkpointer", ".", "load", "(", "ckpt", ",", "use_latest", "=", "args", ".", "ckpt", "is", "None", ")", "\n", "for", "output_folder", ",", "dataset_name", ",", "data_loader_val", "in", "zip", "(", "output_folders", ",", "dataset_names", ",", "data_loaders_val", ")", ":", "\n", "            ", "cur_result", "=", "inference", "(", "\n", "model", ",", "\n", "data_loader_val", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "iou_types", "=", "iou_types", ",", "\n", "rec_type", "=", "rec_type", ",", "\n", "box_only", "=", "False", "if", "cfg", ".", "MODEL", ".", "FCOS_ON", "or", "cfg", ".", "MODEL", ".", "RETINANET_ON", "else", "cfg", ".", "MODEL", ".", "RPN_ONLY", ",", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", ",", "\n", "expected_results", "=", "cfg", ".", "TEST", ".", "EXPECTED_RESULTS", ",", "\n", "expected_results_sigma_tol", "=", "cfg", ".", "TEST", ".", "EXPECTED_RESULTS_SIGMA_TOL", ",", "\n", "output_folder", "=", "output_folder", ",", "\n", ")", "\n", "best_mAP", "=", "cur_result", "if", "cur_result", ">", "best_mAP", "else", "best_mAP", "\n", "synchronize", "(", ")", "\n", "line", "=", "\"Model:{},mAP:{},best mAP:{}\\n\"", ".", "format", "(", "ckpt", ",", "cur_result", ",", "best_mAP", ")", "\n", "print", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.tools.test_two_net.construct_network": [[27, 50], ["maskrcnn_benchmark.config.cfg.setdefault", "maskrcnn_benchmark.config.cfg.merge_from_file", "maskrcnn_benchmark.config.cfg.freeze", "maskrcnn_benchmark.modeling.detector.build_detection_model", "maskrcnn_benchmark.modeling.detector.build_detection_model.to", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer.load", "maskrcnn_benchmark.config.cfg"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.detectors.build_detection_model", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.load"], ["", "def", "construct_network", "(", "cfg", ",", "cfg_file", ")", ":", "\n", "\n", "# print(dir(cfg))", "\n", "# exit()", "\n", "# cfg.clear()", "\n", "# args.config_file = cfg_file #'configs/detect.yaml'", "\n", "# print(cfg.MODEL.RETRIEVAL_ONLY)", "\n", "    ", "cfg", ".", "setdefault", "(", "cfg_file", ")", "\n", "# print(cfg.MODEL.RETRIEVAL_ONLY)", "\n", "cfg", ".", "merge_from_file", "(", "cfg_file", ")", "\n", "# print(cfg.MODEL.RETRIEVAL_ONLY)", "\n", "# cfg.merge_from_list(args.opts)", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "save_dir", "=", "\"\"", "\n", "model", "=", "build_detection_model", "(", "cfg", ")", "\n", "model", ".", "to", "(", "cfg", ".", "MODEL", ".", "DEVICE", ")", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "checkpointer", "=", "DetectronCheckpointer", "(", "cfg", ",", "model", ",", "save_dir", "=", "output_dir", ")", "\n", "ckpt", "=", "None", "\n", "# print(ckpt)", "\n", "_", "=", "checkpointer", ".", "load", "(", "ckpt", ",", "use_latest", "=", "True", ")", "\n", "return", "model", ",", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.tools.test_two_net.main": [[51, 129], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "maskrcnn_benchmark.utils.logger.setup_logger", "maskrcnn_benchmark.config.cfg.clone", "test_two_net.construct_network", "test_two_net.construct_network", "amp.init", "maskrcnn_benchmark.data.make_data_loader", "zip", "int", "torch.cuda.set_device", "torch.distributed.init_process_group", "maskrcnn_benchmark.utils.comm.synchronize", "maskrcnn_benchmark.utils.comm.get_rank", "len", "enumerate", "maskrcnn_benchmark.engine.inference_two_net.inference", "maskrcnn_benchmark.utils.comm.synchronize", "print", "os.path.join", "maskrcnn_benchmark.utils.miscellaneous.mkdir"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.logger.setup_logger", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.tools.test_two_net.construct_network", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.tools.test_two_net.construct_network", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.data.build.make_data_loader", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.synchronize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_rank", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.inference_two_net.inference", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.synchronize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.miscellaneous.mkdir"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch Object Detection Inference\"", ")", "\n", "# parser.add_argument(", "\n", "#     \"--config-file\",", "\n", "#     default=\"/private/home/fmassa/github/detectron.pytorch_v2/configs/e2e_faster_rcnn_R_50_C4_1x_caffe2.yaml\",", "\n", "#     metavar=\"FILE\",", "\n", "#     help=\"path to config file\",", "\n", "# )", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--ckpt\"", ",", "\n", "help", "=", "\"The path to the checkpoint for test, default is the latest checkpoint.\"", ",", "\n", "default", "=", "None", ",", "\n", ")", "# --config-file \"configs/align/line_bezier0732.yaml\" ", "\n", "# --skip-test \\", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "distributed", "=", "num_gpus", ">", "1", "\n", "\n", "if", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", "\n", ")", "\n", "synchronize", "(", ")", "\n", "", "save_dir", "=", "\"\"", "\n", "logger", "=", "setup_logger", "(", "\"maskrcnn_benchmark\"", ",", "save_dir", ",", "get_rank", "(", ")", ")", "\n", "# print(dir(cfg_det))", "\n", "cfg_ret", "=", "cfg_det", ".", "clone", "(", ")", "\n", "retrieval_model", ",", "cfg", "=", "construct_network", "(", "cfg_ret", ",", "'configs/retrieval_only.yaml'", ")", "\n", "detect_model", ",", "cfg", "=", "construct_network", "(", "cfg_det", ",", "'configs/detect.yaml'", ")", "\n", "# logger.info(cfg_det)", "\n", "\n", "# Initialize mixed-precision if necessary", "\n", "use_mixed_precision", "=", "cfg", ".", "DTYPE", "==", "'float16'", "\n", "amp_handle", "=", "amp", ".", "init", "(", "enabled", "=", "use_mixed_precision", ",", "verbose", "=", "cfg", ".", "AMP_VERBOSE", ")", "\n", "\n", "\n", "iou_types", "=", "(", "\"bbox\"", ",", ")", "\n", "if", "cfg", ".", "MODEL", ".", "MASK_ON", "and", "not", "cfg", ".", "MODEL", ".", "KE_ON", ":", "\n", "        ", "iou_types", "=", "iou_types", "+", "(", "\"segm\"", ",", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "KEYPOINT_ON", ":", "\n", "        ", "iou_types", "=", "iou_types", "+", "(", "\"keypoints\"", ",", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "KE_ON", ":", "\n", "        ", "iou_types", "=", "iou_types", "+", "(", "\"kes\"", ",", ")", "\n", "", "output_folders", "=", "[", "None", "]", "*", "len", "(", "cfg", ".", "DATASETS", ".", "TEST", ")", "\n", "dataset_names", "=", "cfg", ".", "DATASETS", ".", "TEST", "\n", "if", "cfg", ".", "OUTPUT_DIR", ":", "\n", "        ", "for", "idx", ",", "dataset_name", "in", "enumerate", "(", "dataset_names", ")", ":", "\n", "            ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"inference\"", ",", "dataset_name", ")", "\n", "mkdir", "(", "output_folder", ")", "\n", "output_folders", "[", "idx", "]", "=", "output_folder", "\n", "", "", "data_loaders_val", "=", "make_data_loader", "(", "cfg", ",", "is_train", "=", "False", ",", "is_distributed", "=", "distributed", ")", "\n", "rec_type", "=", "cfg", ".", "MODEL", ".", "ALIGN", ".", "PREDICTOR", "\n", "for", "output_folder", ",", "dataset_name", ",", "data_loader_val", "in", "zip", "(", "output_folders", ",", "dataset_names", ",", "data_loaders_val", ")", ":", "\n", "        ", "cur_result", "=", "inference", "(", "\n", "detect_model", ",", "\n", "retrieval_model", ",", "\n", "data_loader_val", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "iou_types", "=", "iou_types", ",", "\n", "rec_type", "=", "rec_type", ",", "\n", "box_only", "=", "False", "if", "cfg", ".", "MODEL", ".", "FCOS_ON", "or", "cfg", ".", "MODEL", ".", "RETINANET_ON", "else", "cfg", ".", "MODEL", ".", "RPN_ONLY", ",", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", ",", "\n", "expected_results", "=", "cfg", ".", "TEST", ".", "EXPECTED_RESULTS", ",", "\n", "expected_results_sigma_tol", "=", "cfg", ".", "TEST", ".", "EXPECTED_RESULTS_SIGMA_TOL", ",", "\n", "output_folder", "=", "output_folder", ",", "\n", ")", "\n", "synchronize", "(", ")", "\n", "print", "(", "\"current mAP:{}\\n\"", ".", "format", "(", "cur_result", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.tools.train_net.train": [[40, 105], ["maskrcnn_benchmark.modeling.detector.build_detection_model", "torch.device", "torch.nn.parallel.DistributedDataParallel.to", "maskrcnn_benchmark.solver.make_optimizer", "maskrcnn_benchmark.solver.make_lr_scheduler", "amp.initialize", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer.load", "arguments.update", "maskrcnn_benchmark.data.make_data_loader", "maskrcnn_benchmark.engine.trainer.do_train", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.parallel.DistributedDataParallel", "maskrcnn_benchmark.utils.comm.get_rank", "maskrcnn_benchmark.config.cfg"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.detectors.build_detection_model", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.make_optimizer", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.make_lr_scheduler", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.data.build.make_data_loader", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.trainer.do_train", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_rank"], ["", "def", "train", "(", "cfg", ",", "local_rank", ",", "distributed", ")", ":", "\n", "# use following line to avoid shared file limit", "\n", "# torch.multiprocessing.set_sharing_strategy('file_system')", "\n", "# f1 = open('cfg.txt', 'a')", "\n", "# print(cfg, file = f1)", "\n", "    ", "model", "=", "build_detection_model", "(", "cfg", ")", "\n", "# f2 = open('model.txt', 'a')", "\n", "# print(model, file=f2)", "\n", "# print(type(cfg), cfg)", "\n", "# import pdb; pdb.set_trace()", "\n", "device", "=", "torch", ".", "device", "(", "cfg", ".", "MODEL", ".", "DEVICE", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "make_optimizer", "(", "cfg", ",", "model", ")", "\n", "scheduler", "=", "make_lr_scheduler", "(", "cfg", ",", "optimizer", ")", "\n", "\n", "# Convert Model for SyncBN", "\n", "if", "cfg", ".", "SYNCBN", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "\n", "# Initialize mixed-precision training", "\n", "", "use_mixed_precision", "=", "cfg", ".", "DTYPE", "==", "\"float16\"", "\n", "amp_opt_level", "=", "'O1'", "if", "use_mixed_precision", "else", "'O0'", "\n", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "amp_opt_level", ")", "\n", "\n", "if", "distributed", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ",", "device_ids", "=", "[", "local_rank", "]", ",", "output_device", "=", "local_rank", ",", "find_unused_parameters", "=", "True", "\n", "# this should be removed if we update BatchNorm stats", "\n", "# broadcast_buffers=False,", "\n", ")", "\n", "\n", "", "arguments", "=", "{", "}", "\n", "arguments", "[", "\"iteration\"", "]", "=", "0", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "\n", "save_to_disk", "=", "get_rank", "(", ")", "==", "0", "\n", "checkpointer", "=", "DetectronCheckpointer", "(", "\n", "cfg", ",", "model", ",", "optimizer", ",", "scheduler", ",", "output_dir", ",", "save_to_disk", "\n", ")", "\n", "extra_checkpoint_data", "=", "checkpointer", ".", "load", "(", "cfg", ".", "MODEL", ".", "WEIGHT", ")", "\n", "arguments", ".", "update", "(", "extra_checkpoint_data", ")", "\n", "\n", "data_loader", "=", "make_data_loader", "(", "\n", "cfg", ",", "\n", "is_train", "=", "True", ",", "\n", "is_distributed", "=", "distributed", ",", "\n", "start_iter", "=", "arguments", "[", "\"iteration\"", "]", ",", "\n", ")", "\n", "\n", "checkpoint_period", "=", "cfg", ".", "SOLVER", ".", "CHECKPOINT_PERIOD", "\n", "\n", "do_train", "(", "\n", "model", ",", "\n", "data_loader", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "\n", "checkpointer", ",", "\n", "device", ",", "\n", "checkpoint_period", ",", "\n", "arguments", ",", "\n", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.tools.train_net.run_test": [[107, 137], ["torch.cuda.empty_cache", "maskrcnn_benchmark.data.make_data_loader", "zip", "len", "enumerate", "maskrcnn_benchmark.engine.inference.inference", "maskrcnn_benchmark.utils.comm.synchronize", "os.path.join", "maskrcnn_benchmark.utils.miscellaneous.mkdir", "maskrcnn_benchmark.config.cfg"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.data.build.make_data_loader", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.inference_two_net.inference", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.synchronize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.miscellaneous.mkdir"], ["", "def", "run_test", "(", "cfg", ",", "model", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "# TODO check if it helps", "\n", "iou_types", "=", "(", "\"bbox\"", ",", ")", "\n", "if", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "        ", "iou_types", "=", "iou_types", "+", "(", "\"segm\"", ",", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "KEYPOINT_ON", ":", "\n", "        ", "iou_types", "=", "iou_types", "+", "(", "\"keypoints\"", ",", ")", "\n", "", "output_folders", "=", "[", "None", "]", "*", "len", "(", "cfg", ".", "DATASETS", ".", "TEST", ")", "\n", "dataset_names", "=", "cfg", ".", "DATASETS", ".", "TEST", "\n", "if", "cfg", ".", "OUTPUT_DIR", ":", "\n", "        ", "for", "idx", ",", "dataset_name", "in", "enumerate", "(", "dataset_names", ")", ":", "\n", "            ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"inference\"", ",", "dataset_name", ")", "\n", "mkdir", "(", "output_folder", ")", "\n", "output_folders", "[", "idx", "]", "=", "output_folder", "\n", "", "", "data_loaders_val", "=", "make_data_loader", "(", "cfg", ",", "is_train", "=", "False", ",", "is_distributed", "=", "distributed", ")", "\n", "for", "output_folder", ",", "dataset_name", ",", "data_loader_val", "in", "zip", "(", "output_folders", ",", "dataset_names", ",", "data_loaders_val", ")", ":", "\n", "        ", "inference", "(", "\n", "model", ",", "\n", "data_loader_val", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "iou_types", "=", "iou_types", ",", "\n", "box_only", "=", "False", "if", "cfg", ".", "MODEL", ".", "FCOS_ON", "or", "cfg", ".", "MODEL", ".", "RETINANET_ON", "else", "cfg", ".", "MODEL", ".", "RPN_ONLY", ",", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", ",", "\n", "expected_results", "=", "cfg", ".", "TEST", ".", "EXPECTED_RESULTS", ",", "\n", "expected_results_sigma_tol", "=", "cfg", ".", "TEST", ".", "EXPECTED_RESULTS_SIGMA_TOL", ",", "\n", "output_folder", "=", "output_folder", ",", "\n", ")", "\n", "synchronize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.tools.train_net.main": [[139, 204], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "maskrcnn_benchmark.config.cfg.merge_from_file", "maskrcnn_benchmark.config.cfg.merge_from_list", "maskrcnn_benchmark.config.cfg.freeze", "maskrcnn_benchmark.utils.logger.setup_logger", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "os.path.join", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.miscellaneous.save_config", "train_net.train", "int", "torch.cuda.set_device", "torch.distributed.init_process_group", "maskrcnn_benchmark.utils.comm.synchronize", "maskrcnn_benchmark.utils.miscellaneous.mkdir", "maskrcnn_benchmark.utils.comm.get_rank", "open", "maskrcnn_benchmark.utils.logger.setup_logger.info", "train_net.run_test", "maskrcnn_benchmark.utils.collect_env.collect_env_info", "cf.read"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.logger.setup_logger", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.miscellaneous.save_config", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.tools.train_net.train", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.synchronize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.miscellaneous.mkdir", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_rank", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.tools.train_net.run_test", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.collect_env.collect_env_info"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch Object Detection Training\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config-file\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--skip-test\"", ",", "\n", "dest", "=", "\"skip_test\"", ",", "\n", "help", "=", "\"Do not test the final model\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "args", ".", "distributed", "=", "num_gpus", ">", "1", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", "\n", ")", "\n", "synchronize", "(", ")", "\n", "\n", "", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "if", "output_dir", ":", "\n", "        ", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "\"maskrcnn_benchmark\"", ",", "output_dir", ",", "get_rank", "(", ")", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "logger", ".", "info", "(", "\"Collecting env info (might take some time)\"", ")", "\n", "logger", ".", "info", "(", "\"\\n\"", "+", "collect_env_info", "(", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "with", "open", "(", "args", ".", "config_file", ",", "\"r\"", ")", "as", "cf", ":", "\n", "        ", "config_str", "=", "\"\\n\"", "+", "cf", ".", "read", "(", ")", "\n", "logger", ".", "info", "(", "config_str", ")", "\n", "", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "output_config_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "'config.yml'", ")", "\n", "logger", ".", "info", "(", "\"Saving config into: {}\"", ".", "format", "(", "output_config_path", ")", ")", "\n", "# save overloaded model config in the output directory", "\n", "save_config", "(", "cfg", ",", "output_config_path", ")", "\n", "\n", "model", "=", "train", "(", "cfg", ",", "args", ".", "local_rank", ",", "args", ".", "distributed", ")", "\n", "\n", "if", "not", "args", ".", "skip_test", ":", "\n", "        ", "run_test", "(", "cfg", ",", "model", ",", "args", ".", "distributed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.__init__": [[50, 74], ["os.path.isfile", "print", "datetime.datetime.utcnow", "json.load", "print", "coco_text.COCO_Text.createIndex", "open", "datetime.datetime.utcnow"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.createIndex"], ["    ", "def", "__init__", "(", "self", ",", "annotation_file", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Constructor of COCO-Text helper class for reading and visualizing annotations.\n        :param annotation_file (str): location of annotation file\n        :return:\n        \"\"\"", "\n", "# load dataset", "\n", "self", ".", "dataset", "=", "{", "}", "\n", "self", ".", "anns", "=", "{", "}", "\n", "self", ".", "imgToAnns", "=", "{", "}", "\n", "self", ".", "catToImgs", "=", "{", "}", "\n", "self", ".", "imgs", "=", "{", "}", "\n", "self", ".", "cats", "=", "{", "}", "\n", "self", ".", "val", "=", "[", "]", "\n", "self", ".", "test", "=", "[", "]", "\n", "self", ".", "train", "=", "[", "]", "\n", "if", "not", "annotation_file", "==", "None", ":", "\n", "            ", "assert", "os", ".", "path", ".", "isfile", "(", "annotation_file", ")", ",", "\"file does not exist\"", "\n", "print", "(", "'loading annotations into memory...'", ")", "\n", "time_t", "=", "datetime", ".", "datetime", ".", "utcnow", "(", ")", "\n", "dataset", "=", "json", ".", "load", "(", "open", "(", "annotation_file", ",", "'r'", ")", ")", "\n", "print", "(", "datetime", ".", "datetime", ".", "utcnow", "(", ")", "-", "time_t", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "createIndex", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.createIndex": [[75, 89], ["print", "print", "print", "print", "print", "int", "int", "int", "int", "int", "int", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "def", "createIndex", "(", "self", ")", ":", "\n", "# create index", "\n", "        ", "print", "(", "'creating index...'", ")", "\n", "self", ".", "imgToAnns", "=", "{", "int", "(", "cocoid", ")", ":", "self", ".", "dataset", "[", "'imgToAnns'", "]", "[", "cocoid", "]", "for", "cocoid", "in", "self", ".", "dataset", "[", "'imgToAnns'", "]", "}", "\n", "self", ".", "imgs", "=", "{", "int", "(", "cocoid", ")", ":", "self", ".", "dataset", "[", "'imgs'", "]", "[", "cocoid", "]", "for", "cocoid", "in", "self", ".", "dataset", "[", "'imgs'", "]", "}", "\n", "self", ".", "anns", "=", "{", "int", "(", "annid", ")", ":", "self", ".", "dataset", "[", "'anns'", "]", "[", "annid", "]", "for", "annid", "in", "self", ".", "dataset", "[", "'anns'", "]", "}", "\n", "self", ".", "cats", "=", "self", ".", "dataset", "[", "'cats'", "]", "\n", "self", ".", "val", "=", "[", "int", "(", "cocoid", ")", "for", "cocoid", "in", "self", ".", "dataset", "[", "'imgs'", "]", "if", "self", ".", "dataset", "[", "'imgs'", "]", "[", "cocoid", "]", "[", "'set'", "]", "==", "'val'", "]", "\n", "self", ".", "test", "=", "[", "int", "(", "cocoid", ")", "for", "cocoid", "in", "self", ".", "dataset", "[", "'imgs'", "]", "if", "self", ".", "dataset", "[", "'imgs'", "]", "[", "cocoid", "]", "[", "'set'", "]", "==", "'test'", "]", "\n", "self", ".", "train", "=", "[", "int", "(", "cocoid", ")", "for", "cocoid", "in", "self", ".", "dataset", "[", "'imgs'", "]", "if", "self", ".", "dataset", "[", "'imgs'", "]", "[", "cocoid", "]", "[", "'set'", "]", "==", "'train'", "]", "\n", "print", "(", "'index created!'", ")", "\n", "print", "(", "\"train:{}\"", ".", "format", "(", "len", "(", "self", ".", "train", ")", ")", ")", "\n", "print", "(", "\"val:{}\"", ".", "format", "(", "len", "(", "self", ".", "val", ")", ")", ")", "\n", "print", "(", "\"test:{}\"", ".", "format", "(", "len", "(", "self", ".", "test", ")", ")", ")", "\n", "# import ipdb;ipdb.set_trace()", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info": [[91, 98], ["coco_text.COCO_Text.dataset[].items", "print"], "methods", ["None"], ["", "def", "info", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Print information about the annotation file.\n        :return:\n        \"\"\"", "\n", "for", "key", ",", "value", "in", "self", ".", "dataset", "[", "'info'", "]", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'%s: %s'", "%", "(", "key", ",", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.filtering": [[99, 101], ["all", "criterion"], "methods", ["None"], ["", "", "def", "filtering", "(", "self", ",", "filterDict", ",", "criteria", ")", ":", "\n", "        ", "return", "[", "key", "for", "key", "in", "filterDict", "if", "all", "(", "criterion", "(", "filterDict", "[", "key", "]", ")", "for", "criterion", "in", "criteria", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnByCat": [[102, 110], ["coco_text.COCO_Text.filtering"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.filtering"], ["", "def", "getAnnByCat", "(", "self", ",", "properties", ")", ":", "\n", "        ", "\"\"\"\n        Get ann ids that satisfy given properties\n        :param properties (list of tuples of the form [(category type, category)] e.g., [('readability','readable')] \n            : get anns for given categories - anns have to satisfy all given property tuples\n        :return: ids (int array)       : integer array of ann ids\n        \"\"\"", "\n", "return", "self", ".", "filtering", "(", "self", ".", "anns", ",", "[", "lambda", "d", ",", "x", "=", "a", ",", "y", "=", "b", ":", "d", "[", "x", "]", "==", "y", "for", "(", "a", ",", "b", ")", "in", "properties", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnIds": [[111, 133], ["len", "len", "len", "list", "type", "type", "coco_text.COCO_Text.anns.keys", "sum", "list", "list", "len", "coco_text.COCO_Text.anns.keys", "len", "set().intersection", "len", "set", "set", "coco_text.COCO_Text.getAnnByCat"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnByCat"], ["", "def", "getAnnIds", "(", "self", ",", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "]", ",", "areaRng", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Get ann ids that satisfy given filter conditions. default skips that filter\n        :param imgIds  (int array)     : get anns for given imgs\n               catIds  (list of tuples of the form [(category type, category)] e.g., [('readability','readable')] \n                : get anns for given cats\n               areaRng (float array)   : get anns for given area range (e.g. [0 inf])\n        :return: ids (int array)       : integer array of ann ids\n        \"\"\"", "\n", "imgIds", "=", "imgIds", "if", "type", "(", "imgIds", ")", "==", "list", "else", "[", "imgIds", "]", "\n", "catIds", "=", "catIds", "if", "type", "(", "catIds", ")", "==", "list", "else", "[", "catIds", "]", "\n", "\n", "if", "len", "(", "imgIds", ")", "==", "len", "(", "catIds", ")", "==", "len", "(", "areaRng", ")", "==", "0", ":", "\n", "            ", "anns", "=", "list", "(", "self", ".", "anns", ".", "keys", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "len", "(", "imgIds", ")", "==", "0", ":", "\n", "                ", "anns", "=", "sum", "(", "[", "self", ".", "imgToAnns", "[", "imgId", "]", "for", "imgId", "in", "imgIds", "if", "imgId", "in", "self", ".", "imgToAnns", "]", ",", "[", "]", ")", "\n", "", "else", ":", "\n", "                ", "anns", "=", "list", "(", "self", ".", "anns", ".", "keys", "(", ")", ")", "\n", "", "anns", "=", "anns", "if", "len", "(", "catIds", ")", "==", "0", "else", "list", "(", "set", "(", "anns", ")", ".", "intersection", "(", "set", "(", "self", ".", "getAnnByCat", "(", "catIds", ")", ")", ")", ")", "\n", "anns", "=", "anns", "if", "len", "(", "areaRng", ")", "==", "0", "else", "[", "ann", "for", "ann", "in", "anns", "if", "self", ".", "anns", "[", "ann", "]", "[", "'area'", "]", ">", "areaRng", "[", "0", "]", "and", "self", ".", "anns", "[", "ann", "]", "[", "'area'", "]", "<", "areaRng", "[", "1", "]", "]", "\n", "", "return", "anns", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getImgIds": [[134, 151], ["list", "len", "len", "list", "set", "type", "type", "coco_text.COCO_Text.imgs.keys", "ids.intersection.intersection.intersection", "len", "set", "coco_text.COCO_Text.getAnnByCat"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnByCat"], ["", "def", "getImgIds", "(", "self", ",", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        Get img ids that satisfy given filter conditions.\n        :param imgIds (int array) : get imgs for given ids\n        :param catIds (int array) : get imgs with all given cats\n        :return: ids (int array)  : integer array of img ids\n        '''", "\n", "imgIds", "=", "imgIds", "if", "type", "(", "imgIds", ")", "==", "list", "else", "[", "imgIds", "]", "\n", "catIds", "=", "catIds", "if", "type", "(", "catIds", ")", "==", "list", "else", "[", "catIds", "]", "\n", "\n", "if", "len", "(", "imgIds", ")", "==", "len", "(", "catIds", ")", "==", "0", ":", "\n", "            ", "ids", "=", "list", "(", "self", ".", "imgs", ".", "keys", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "ids", "=", "set", "(", "imgIds", ")", "\n", "if", "not", "len", "(", "catIds", ")", "==", "0", ":", "\n", "                ", "ids", "=", "ids", ".", "intersection", "(", "set", "(", "[", "self", ".", "anns", "[", "annid", "]", "[", "'image_id'", "]", "for", "annid", "in", "self", ".", "getAnnByCat", "(", "catIds", ")", "]", ")", ")", "\n", "", "", "return", "list", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.loadAnns": [[152, 162], ["type", "type"], "methods", ["None"], ["", "def", "loadAnns", "(", "self", ",", "ids", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Load anns with the specified ids.\n        :param ids (int array)       : integer ids specifying anns\n        :return: anns (object array) : loaded ann objects\n        \"\"\"", "\n", "if", "type", "(", "ids", ")", "==", "list", ":", "\n", "            ", "return", "[", "self", ".", "anns", "[", "id", "]", "for", "id", "in", "ids", "]", "\n", "", "elif", "type", "(", "ids", ")", "==", "int", ":", "\n", "            ", "return", "[", "self", ".", "anns", "[", "ids", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.loadImgs": [[163, 173], ["type", "type"], "methods", ["None"], ["", "", "def", "loadImgs", "(", "self", ",", "ids", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Load anns with the specified ids.\n        :param ids (int array)       : integer ids specifying img\n        :return: imgs (object array) : loaded img objects\n        \"\"\"", "\n", "if", "type", "(", "ids", ")", "==", "list", ":", "\n", "            ", "return", "[", "self", ".", "imgs", "[", "id", "]", "for", "id", "in", "ids", "]", "\n", "", "elif", "type", "(", "ids", ")", "==", "int", ":", "\n", "            ", "return", "[", "self", ".", "imgs", "[", "ids", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.showAnns": [[174, 203], ["matplotlib.gca", "matplotlib.collections.PatchCollection", "matplotlib.gca.add_collection", "len", "color.append", "numpy.random.random().tolist", "matplotlib.path.Path", "matplotlib.patches.PathPatch", "boxes.append", "boxes.append", "list", "matplotlib.gca.annotate", "list", "matplotlib.patches.Rectangle", "ann.keys", "numpy.random.random", "zip", "len", "iter"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "def", "showAnns", "(", "self", ",", "anns", ",", "show_mask", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Display the specified annotations.\n        :param anns (array of object): annotations to display\n        :return: None\n        \"\"\"", "\n", "if", "len", "(", "anns", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "boxes", "=", "[", "]", "\n", "color", "=", "[", "]", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "c", "=", "np", ".", "random", ".", "random", "(", "(", "1", ",", "3", ")", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "if", "show_mask", ":", "\n", "                ", "verts", "=", "list", "(", "zip", "(", "*", "[", "iter", "(", "ann", "[", "'mask'", "]", ")", "]", "*", "2", ")", ")", "+", "[", "(", "0", ",", "0", ")", "]", "\n", "codes", "=", "[", "Path", ".", "MOVETO", "]", "+", "[", "Path", ".", "LINETO", "]", "*", "(", "len", "(", "verts", ")", "-", "2", ")", "+", "[", "Path", ".", "CLOSEPOLY", "]", "\n", "path", "=", "Path", "(", "verts", ",", "codes", ")", "\n", "patch", "=", "PathPatch", "(", "path", ",", "facecolor", "=", "'none'", ")", "\n", "boxes", ".", "append", "(", "patch", ")", "\n", "text_x", ",", "text_y", "=", "verts", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "left", ",", "top", ",", "width", ",", "height", "=", "ann", "[", "'bbox'", "]", "\n", "boxes", ".", "append", "(", "Rectangle", "(", "[", "left", ",", "top", "]", ",", "width", ",", "height", ",", "alpha", "=", "0.4", ")", ")", "\n", "text_x", ",", "text_y", "=", "left", ",", "top", "\n", "", "color", ".", "append", "(", "c", ")", "\n", "if", "'utf8_string'", "in", "list", "(", "ann", ".", "keys", "(", ")", ")", ":", "\n", "                ", "ax", ".", "annotate", "(", "ann", "[", "'utf8_string'", "]", ",", "(", "text_x", ",", "text_y", "-", "4", ")", ",", "color", "=", "c", ")", "\n", "", "", "p", "=", "PatchCollection", "(", "boxes", ",", "facecolors", "=", "color", ",", "edgecolors", "=", "(", "0", ",", "0", ",", "0", ",", "1", ")", ",", "linewidths", "=", "3", ",", "alpha", "=", "0.4", ")", "\n", "ax", ".", "add_collection", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.loadRes": [[204, 242], ["coco_text.COCO_Text", "print", "datetime.datetime.utcnow", "list", "enumerate", "print", "type", "json.load", "type", "int", "set", "print", "print", "COCO_Text.imgToAnns[].append", "open", "set", "set", "str", "set", "set", "coco_text.COCO_Text.getImgIds", "coco_text.COCO_Text.getImgIds", "len", "len", "set", "datetime.datetime.utcnow", "set", "set", "coco_text.COCO_Text.getImgIds"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getImgIds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getImgIds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getImgIds"], ["", "def", "loadRes", "(", "self", ",", "resFile", ")", ":", "\n", "        ", "\"\"\"\n        Load result file and return a result api object.\n        :param   resFile (str)     : file name of result file\n        :return: res (obj)         : result api object\n        \"\"\"", "\n", "res", "=", "COCO_Text", "(", ")", "\n", "res", ".", "dataset", "[", "'imgs'", "]", "=", "[", "img", "for", "img", "in", "self", ".", "dataset", "[", "'imgs'", "]", "]", "\n", "\n", "print", "(", "'Loading and preparing results...     '", ")", "\n", "time_t", "=", "datetime", ".", "datetime", ".", "utcnow", "(", ")", "\n", "if", "type", "(", "resFile", ")", "==", "str", ":", "\n", "            ", "anns", "=", "json", ".", "load", "(", "open", "(", "resFile", ")", ")", "\n", "", "else", ":", "\n", "            ", "anns", "=", "resFile", "\n", "", "assert", "type", "(", "anns", ")", "==", "list", ",", "'results in not an array of objects'", "\n", "annsImgIds", "=", "[", "int", "(", "ann", "[", "'image_id'", "]", ")", "for", "ann", "in", "anns", "]", "\n", "\n", "if", "set", "(", "annsImgIds", ")", "!=", "(", "set", "(", "annsImgIds", ")", "&", "set", "(", "self", ".", "getImgIds", "(", ")", ")", ")", ":", "\n", "            ", "print", "(", "'Results do not correspond to current coco set'", ")", "\n", "print", "(", "'skipping '", ",", "str", "(", "len", "(", "set", "(", "annsImgIds", ")", ")", "-", "len", "(", "set", "(", "annsImgIds", ")", "&", "set", "(", "self", ".", "getImgIds", "(", ")", ")", ")", ")", ",", "' images'", ")", "\n", "", "annsImgIds", "=", "list", "(", "set", "(", "annsImgIds", ")", "&", "set", "(", "self", ".", "getImgIds", "(", ")", ")", ")", "\n", "\n", "res", ".", "imgToAnns", "=", "{", "cocoid", ":", "[", "]", "for", "cocoid", "in", "annsImgIds", "}", "\n", "res", ".", "imgs", "=", "{", "cocoid", ":", "self", ".", "imgs", "[", "cocoid", "]", "for", "cocoid", "in", "annsImgIds", "}", "\n", "assert", "anns", "[", "0", "]", "[", "'bbox'", "]", "!=", "[", "]", ",", "'results have incorrect format'", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "            ", "if", "ann", "[", "'image_id'", "]", "not", "in", "annsImgIds", ":", "\n", "                ", "continue", "\n", "# print(id)", "\n", "", "bb", "=", "ann", "[", "'bbox'", "]", "\n", "ann", "[", "'area'", "]", "=", "bb", "[", "2", "]", "*", "bb", "[", "3", "]", "\n", "ann", "[", "'id'", "]", "=", "id", "\n", "res", ".", "anns", "[", "id", "]", "=", "ann", "\n", "res", ".", "imgToAnns", "[", "ann", "[", "'image_id'", "]", "]", ".", "append", "(", "id", ")", "\n", "", "print", "(", "'DONE (t=%0.2fs)'", "%", "(", "(", "datetime", ".", "datetime", ".", "utcnow", "(", ")", "-", "time_t", ")", ".", "total_seconds", "(", ")", ")", ")", "\n", "\n", "return", "res", "", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation.getDetections": [[37, 84], ["coco_evaluation.inter", "len", "list", "list", "copy.copy", "len", "detectRes[].extend", "groundtruth.imgToAnns.keys", "evaluation.imgToAnns.keys", "coco_evaluation.iou_score", "detectRes[].append", "eval_bboxes.remove", "detectRes[].append"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.iou_score"], ["def", "getDetections", "(", "groundtruth", ",", "evaluation", ",", "imgIds", "=", "None", ",", "annIds", "=", "[", "]", ",", "detection_threshold", "=", "0.5", ")", ":", "\n", "\t", "\"\"\"\n\tA box is a match iff the intersection of union score is >= 0.5.\n\tParams\n\t------\n\tInput dicts have the format of annotation dictionaries\n\t\"\"\"", "\n", "#parameters", "\n", "\n", "detectRes", "=", "{", "}", "\n", "# results are lists of dicts {gt_id: xxx, eval_id: yyy}", "\n", "detectRes", "[", "'true_positives'", "]", "=", "[", "]", "\n", "detectRes", "[", "'false_negatives'", "]", "=", "[", "]", "\n", "detectRes", "[", "'false_positives'", "]", "=", "[", "]", "\n", "\n", "# the default is set to evaluate on the validation set", "\n", "if", "imgIds", "==", "None", ":", "\n", "\t\t", "imgIds", "=", "groundtruth", ".", "val", "\n", "# import ipdb; ipdb.set_trace()", "\n", "", "imgIds", "=", "imgIds", "if", "len", "(", "imgIds", ")", ">", "0", "else", "inter", "(", "list", "(", "groundtruth", ".", "imgToAnns", ".", "keys", "(", ")", ")", ",", "list", "(", "evaluation", ".", "imgToAnns", ".", "keys", "(", ")", ")", ")", "\n", "\n", "for", "cocoid", "in", "imgIds", ":", "\n", "\t\t", "gt_bboxes", "=", "groundtruth", ".", "imgToAnns", "[", "cocoid", "]", "if", "cocoid", "in", "groundtruth", ".", "imgToAnns", "else", "[", "]", "\n", "eval_bboxes", "=", "copy", ".", "copy", "(", "evaluation", ".", "imgToAnns", "[", "cocoid", "]", ")", "if", "cocoid", "in", "evaluation", ".", "imgToAnns", "else", "[", "]", "\n", "# print(cocoid in groundtruth.imgToAnns)", "\n", "# print(len(gt_bboxes))", "\n", "for", "gt_box_id", "in", "gt_bboxes", ":", "\n", "\t\t\t", "gt_box", "=", "groundtruth", ".", "anns", "[", "gt_box_id", "]", "[", "'bbox'", "]", "\n", "max_iou", "=", "0.0", "\n", "match", "=", "None", "\n", "for", "eval_box_id", "in", "eval_bboxes", ":", "\n", "\t\t\t\t", "eval_box", "=", "evaluation", ".", "anns", "[", "eval_box_id", "]", "[", "'bbox'", "]", "\n", "iou", "=", "iou_score", "(", "gt_box", ",", "eval_box", ")", "\n", "if", "iou", ">=", "detection_threshold", "and", "iou", ">", "max_iou", ":", "\n", "\t\t\t\t\t", "max_iou", "=", "iou", "\n", "match", "=", "eval_box_id", "\n", "# import ipdb; ipdb.set_trace()", "\n", "# print(match)", "\n", "", "", "if", "match", "is", "not", "None", ":", "\n", "\t\t\t\t", "detectRes", "[", "'true_positives'", "]", ".", "append", "(", "{", "'gt_id'", ":", "gt_box_id", ",", "'eval_id'", ":", "match", "}", ")", "\n", "eval_bboxes", ".", "remove", "(", "match", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "detectRes", "[", "'false_negatives'", "]", ".", "append", "(", "{", "'gt_id'", ":", "gt_box_id", "}", ")", "\n", "", "", "if", "len", "(", "eval_bboxes", ")", ">", "0", ":", "\n", "\t\t\t", "detectRes", "[", "'false_positives'", "]", ".", "extend", "(", "[", "{", "'eval_id'", ":", "eval_box_id", "}", "for", "eval_box_id", "in", "eval_bboxes", "]", ")", "\n", "\n", "", "", "return", "detectRes", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation.evaluateAttribute": [[86, 111], ["len", "len", "correct.append", "len", "incorrect.append", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "evaluateAttribute", "(", "groundtruth", ",", "evaluation", ",", "resultDict", ",", "attributes", ")", ":", "\n", "\t", "'''\n\tInput:\n\tgroundtruth_Dict: dict, AnnFile format\n\tevalDict: dict, AnnFile format\n\tresultDict: dict, output from getDetections\n\tattributes : list of strings, attribute categories\n\t-----\n\tOutput:\n\t'''", "\n", "assert", "'utf8_string'", "not", "in", "attributes", ",", "'there is a separate function for utf8_string'", "\n", "res", "=", "{", "}", "\n", "for", "attribute", "in", "attributes", ":", "\n", "\t\t", "correct", "=", "[", "]", "\n", "incorrect", "=", "[", "]", "\n", "for", "detection", "in", "resultDict", "[", "'true_positives'", "]", ":", "\n", "\t\t\t", "gt_val", "=", "groundtruth", ".", "anns", "[", "detection", "[", "'gt_id'", "]", "]", "[", "attribute", "]", "\n", "eval_val", "=", "evaluation", ".", "anns", "[", "detection", "[", "'eval_id'", "]", "]", "[", "attribute", "]", "\n", "if", "gt_val", "==", "eval_val", ":", "\n", "\t\t\t\t", "correct", ".", "append", "(", "detection", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "if", "gt_val", "!=", "'na'", ":", "\n", "\t\t\t\t\t", "incorrect", ".", "append", "(", "detection", ")", "\n", "", "", "", "res", "[", "attribute", "]", "=", "{", "'attribute'", ":", "attribute", ",", "'correct'", ":", "len", "(", "correct", ")", ",", "'incorrect'", ":", "len", "(", "incorrect", ")", ",", "'accuracy'", ":", "len", "(", "correct", ")", "*", "1.0", "/", "len", "(", "correct", "+", "incorrect", ")", "}", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation.evaluateEndToEnd": [[112, 199], ["zip", "coco_evaluation.inter", "len", "list", "list", "copy.copy", "coco_evaluation.decode", "len", "detectRes[].extend", "coco_evaluation.decode", "coco_evaluation.decode", "groundtruth.imgToAnns.keys", "evaluation.imgToAnns.keys", "coco_evaluation.iou_score", "detectRes[].append", "eval_bboxes.remove", "detectRes[].append", "ignore.append", "len", "ignore.append", "incorrect.append", "editdistance.eval", "correct.append", "incorrect.append", "len", "len", "coco_evaluation.decode", "editdistance.eval"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.decode", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.decode", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.decode", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.iou_score", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.decode"], ["", "def", "evaluateEndToEnd", "(", "groundtruth", ",", "evaluation", ",", "imgIds", "=", "None", ",", "annIds", "=", "[", "]", ",", "detection_threshold", "=", "0.5", ")", ":", "\n", "\t", "\"\"\"\n\tA box is a match iff the intersection of union score is >= 0.5.\n\tParams\n\t------\n\tInput dicts have the format of annotation dictionaries\n\t\"\"\"", "\n", "#parameters", "\n", "\n", "detectRes", "=", "{", "}", "\n", "# results are lists of dicts {gt_id: xxx, eval_id: yyy}", "\n", "detectRes", "[", "'true_positives'", "]", "=", "[", "]", "\n", "detectRes", "[", "'false_negatives'", "]", "=", "[", "]", "\n", "detectRes", "[", "'false_positives'", "]", "=", "[", "]", "\n", "\n", "# the default is set to evaluate on the validation set", "\n", "if", "imgIds", "==", "None", ":", "\n", "\t\t", "imgIds", "=", "groundtruth", ".", "val", "\n", "\n", "", "imgIds", "=", "imgIds", "if", "len", "(", "imgIds", ")", ">", "0", "else", "inter", "(", "list", "(", "groundtruth", ".", "imgToAnns", ".", "keys", "(", ")", ")", ",", "list", "(", "evaluation", ".", "imgToAnns", ".", "keys", "(", ")", ")", ")", "\n", "\n", "for", "cocoid", "in", "imgIds", ":", "\n", "\t\t", "gt_bboxes", "=", "groundtruth", ".", "imgToAnns", "[", "cocoid", "]", "if", "cocoid", "in", "groundtruth", ".", "imgToAnns", "else", "[", "]", "\n", "eval_bboxes", "=", "copy", ".", "copy", "(", "evaluation", ".", "imgToAnns", "[", "cocoid", "]", ")", "if", "cocoid", "in", "evaluation", ".", "imgToAnns", "else", "[", "]", "\n", "\n", "for", "gt_box_id", "in", "gt_bboxes", ":", "\n", "\n", "\t\t\t", "gt_box", "=", "groundtruth", ".", "anns", "[", "gt_box_id", "]", "[", "'bbox'", "]", "\n", "if", "'utf8_string'", "not", "in", "groundtruth", ".", "anns", "[", "gt_box_id", "]", ":", "\n", "\t\t\t\t", "continue", "\n", "", "gt_val", "=", "decode", "(", "groundtruth", ".", "anns", "[", "gt_box_id", "]", "[", "'utf8_string'", "]", ")", "\n", "\n", "max_iou", "=", "0.0", "\n", "\n", "match", "=", "None", "\n", "for", "eval_box_id", "in", "eval_bboxes", ":", "\n", "\t\t\t\t", "eval_box", "=", "evaluation", ".", "anns", "[", "eval_box_id", "]", "[", "'bbox'", "]", "\n", "iou", "=", "iou_score", "(", "gt_box", ",", "eval_box", ")", "\n", "\n", "if", "iou", ">=", "detection_threshold", "and", "iou", ">", "max_iou", ":", "\n", "\t\t\t\t\t", "max_iou", "=", "iou", "\n", "match", "=", "eval_box_id", "\n", "if", "'utf8_string'", "in", "evaluation", ".", "anns", "[", "eval_box_id", "]", ":", "\n", "\t\t\t\t\t\t", "eval_val", "=", "decode", "(", "evaluation", ".", "anns", "[", "eval_box_id", "]", "[", "'utf8_string'", "]", ")", "\n", "if", "editdistance", ".", "eval", "(", "gt_val", ",", "eval_val", ")", "==", "0", ":", "\n", "\t\t\t\t\t\t\t", "break", "\n", "", "", "", "", "if", "match", "is", "not", "None", ":", "\n", "\t\t\t\t", "detectRes", "[", "'true_positives'", "]", ".", "append", "(", "{", "'gt_id'", ":", "gt_box_id", ",", "'eval_id'", ":", "match", "}", ")", "\n", "eval_bboxes", ".", "remove", "(", "match", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "detectRes", "[", "'false_negatives'", "]", ".", "append", "(", "{", "'gt_id'", ":", "gt_box_id", "}", ")", "\n", "", "", "if", "len", "(", "eval_bboxes", ")", ">", "0", ":", "\n", "\t\t\t", "detectRes", "[", "'false_positives'", "]", ".", "extend", "(", "[", "{", "'eval_id'", ":", "eval_box_id", "}", "for", "eval_box_id", "in", "eval_bboxes", "]", ")", "\n", "\n", "", "", "resultDict", "=", "detectRes", "\n", "\n", "res", "=", "{", "}", "\n", "for", "setting", ",", "threshold", "in", "zip", "(", "[", "'exact'", ",", "'distance1'", "]", ",", "[", "0", ",", "1", "]", ")", ":", "\n", "\t\t", "correct", "=", "[", "]", "\n", "incorrect", "=", "[", "]", "\n", "ignore", "=", "[", "]", "\n", "# import ipdb; ipdb.set_trace()", "\n", "for", "detection", "in", "resultDict", "[", "'true_positives'", "]", ":", "\n", "\t\t\t", "if", "'utf8_string'", "not", "in", "groundtruth", ".", "anns", "[", "detection", "[", "'gt_id'", "]", "]", ":", "\n", "\t\t\t\t", "ignore", ".", "append", "(", "detection", ")", "\n", "continue", "\n", "\n", "", "gt_val", "=", "decode", "(", "groundtruth", ".", "anns", "[", "detection", "[", "'gt_id'", "]", "]", "[", "'utf8_string'", "]", ")", "\n", "if", "len", "(", "gt_val", ")", "<", "3", ":", "\n", "\t\t\t\t", "ignore", ".", "append", "(", "detection", ")", "\n", "continue", "\n", "\n", "", "if", "'utf8_string'", "not", "in", "evaluation", ".", "anns", "[", "detection", "[", "'eval_id'", "]", "]", ":", "\n", "\t\t\t\t", "incorrect", ".", "append", "(", "detection", ")", "\n", "continue", "\n", "\n", "", "eval_val", "=", "decode", "(", "evaluation", ".", "anns", "[", "detection", "[", "'eval_id'", "]", "]", "[", "'utf8_string'", "]", ")", "\n", "\n", "detection", "[", "'gt_string'", "]", "=", "gt_val", "\n", "detection", "[", "'eval_string'", "]", "=", "eval_val", "\n", "if", "editdistance", ".", "eval", "(", "gt_val", ",", "eval_val", ")", "<=", "threshold", ":", "\n", "\t\t\t\t", "correct", ".", "append", "(", "detection", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "incorrect", ".", "append", "(", "detection", ")", "\n", "\n", "", "", "res", "[", "setting", "]", "=", "{", "'setting'", ":", "setting", ",", "'correct'", ":", "correct", ",", "'incorrect'", ":", "incorrect", ",", "'ignore'", ":", "ignore", ",", "'accuracy'", ":", "len", "(", "correct", ")", "*", "1.0", "/", "len", "(", "correct", "+", "incorrect", ")", "}", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation.area": [[200, 202], ["None"], "function", ["None"], ["", "def", "area", "(", "bbox", ")", ":", "\n", "\t", "return", "bbox", "[", "2", "]", "*", "1.0", "*", "bbox", "[", "3", "]", "# width * height", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation.intersect": [[203, 214], ["max", "max", "min", "min"], "function", ["None"], ["", "def", "intersect", "(", "bboxA", ",", "bboxB", ")", ":", "\n", "\t", "\"\"\"Return a new bounding box that contains the intersection of\n\t'self' and 'other', or None if there is no intersection\n\t\"\"\"", "\n", "new_top", "=", "max", "(", "bboxA", "[", "1", "]", ",", "bboxB", "[", "1", "]", ")", "\n", "new_left", "=", "max", "(", "bboxA", "[", "0", "]", ",", "bboxB", "[", "0", "]", ")", "\n", "new_right", "=", "min", "(", "bboxA", "[", "0", "]", "+", "bboxA", "[", "2", "]", ",", "bboxB", "[", "0", "]", "+", "bboxB", "[", "2", "]", ")", "\n", "new_bottom", "=", "min", "(", "bboxA", "[", "1", "]", "+", "bboxA", "[", "3", "]", ",", "bboxB", "[", "1", "]", "+", "bboxB", "[", "3", "]", ")", "\n", "if", "new_top", "<", "new_bottom", "and", "new_left", "<", "new_right", ":", "\n", "\t\t", "return", "[", "new_left", ",", "new_top", ",", "new_right", "-", "new_left", ",", "new_bottom", "-", "new_top", "]", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation.iou_score": [[215, 229], ["coco_evaluation.intersect", "coco_evaluation.area", "coco_evaluation.intersect", "coco_evaluation.area", "coco_evaluation.area", "float", "float"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.intersect", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.intersect", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area"], ["", "def", "iou_score", "(", "bboxA", ",", "bboxB", ")", ":", "\n", "\t", "\"\"\"Returns the Intersection-over-Union score, defined as the area of\n\tthe intersection divided by the intersection over the union of\n\tthe two bounding boxes. This measure is symmetric.\n\t\"\"\"", "\n", "if", "intersect", "(", "bboxA", ",", "bboxB", ")", ":", "\n", "\t\t", "intersection_area", "=", "area", "(", "intersect", "(", "bboxA", ",", "bboxB", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "intersection_area", "=", "0", "\n", "", "union_area", "=", "area", "(", "bboxA", ")", "+", "area", "(", "bboxB", ")", "-", "intersection_area", "\n", "if", "union_area", ">", "0", ":", "\n", "\t\t", "return", "float", "(", "intersection_area", ")", "/", "float", "(", "union_area", ")", "\n", "", "else", ":", "\n", "\t\t", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation.decode": [[230, 237], ["trans.encode.replace", "re.sub", "re.sub.lower", "trans.encode.encode"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.encode"], ["", "", "def", "decode", "(", "trans", ")", ":", "\n", "\t", "if", "sys", ".", "version", "[", "0", "]", "==", "'2'", ":", "\n", "\t\t", "trans", "=", "trans", ".", "encode", "(", "\"ascii\"", ",", "'ignore'", ")", "\n", "\n", "", "trans", "=", "trans", ".", "replace", "(", "'\\n'", ",", "' '", ")", "\n", "trans2", "=", "re", ".", "sub", "(", "'[^a-zA-Z0-9!?@\\_\\-\\+\\*\\:\\&\\/ \\.]'", ",", "''", ",", "trans", ")", "\n", "return", "trans2", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation.inter": [[238, 240], ["list", "set().intersection", "set", "set"], "function", ["None"], ["", "def", "inter", "(", "list1", ",", "list2", ")", ":", "\n", "\t", "return", "list", "(", "set", "(", "list1", ")", ".", "intersection", "(", "set", "(", "list2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation.printDetailedResults": [[241, 349], ["print", "c_text.getAnnIds", "c_text.getAnnIds", "c_text.getAnnIds", "c_text.getAnnIds", "c_text.getAnnIds", "c_text.getAnnIds", "c_text.getAnnIds", "c_text.getAnnIds", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "len", "coco_evaluation.inter", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "len", "len", "len", "len", "len", "len", "len", "len", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter", "coco_evaluation.inter"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnIds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnIds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnIds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnIds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnIds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnIds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnIds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnIds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter"], ["", "def", "printDetailedResults", "(", "c_text", ",", "detection_results", ",", "transcription_results", ",", "name", ")", ":", "\n", "\t", "print", "(", "name", ")", "\n", "#detected coco-text annids", "\n", "found", "=", "[", "x", "[", "'gt_id'", "]", "for", "x", "in", "detection_results", "[", "'true_positives'", "]", "]", "\n", "n_found", "=", "[", "x", "[", "'gt_id'", "]", "for", "x", "in", "detection_results", "[", "'false_negatives'", "]", "]", "\n", "fp", "=", "[", "x", "[", "'eval_id'", "]", "for", "x", "in", "detection_results", "[", "'false_positives'", "]", "]", "\n", "\n", "leg_eng_mp", "=", "c_text", ".", "getAnnIds", "(", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "(", "'legibility'", ",", "'legible'", ")", ",", "(", "'language'", ",", "'english'", ")", ",", "(", "'class'", ",", "'machine printed'", ")", "]", ",", "areaRng", "=", "[", "]", ")", "\n", "leg_eng_hw", "=", "c_text", ".", "getAnnIds", "(", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "(", "'legibility'", ",", "'legible'", ")", ",", "(", "'language'", ",", "'english'", ")", ",", "(", "'class'", ",", "'handwritten'", ")", "]", ",", "areaRng", "=", "[", "]", ")", "\n", "leg_mp", "=", "c_text", ".", "getAnnIds", "(", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "(", "'legibility'", ",", "'legible'", ")", ",", "(", "'class'", ",", "'machine printed'", ")", "]", ",", "areaRng", "=", "[", "]", ")", "\n", "ileg_mp", "=", "c_text", ".", "getAnnIds", "(", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "(", "'legibility'", ",", "'illegible'", ")", ",", "(", "'class'", ",", "'machine printed'", ")", "]", ",", "areaRng", "=", "[", "]", ")", "\n", "leg_hw", "=", "c_text", ".", "getAnnIds", "(", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "(", "'legibility'", ",", "'legible'", ")", ",", "(", "'class'", ",", "'handwritten'", ")", "]", ",", "areaRng", "=", "[", "]", ")", "\n", "ileg_hw", "=", "c_text", ".", "getAnnIds", "(", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "(", "'legibility'", ",", "'illegible'", ")", ",", "(", "'class'", ",", "'handwritten'", ")", "]", ",", "areaRng", "=", "[", "]", ")", "\n", "leg_ot", "=", "c_text", ".", "getAnnIds", "(", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "(", "'legibility'", ",", "'legible'", ")", ",", "(", "'class'", ",", "'others'", ")", "]", ",", "areaRng", "=", "[", "]", ")", "\n", "ileg_ot", "=", "c_text", ".", "getAnnIds", "(", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "(", "'legibility'", ",", "'illegible'", ")", ",", "(", "'class'", ",", "'others'", ")", "]", ",", "areaRng", "=", "[", "]", ")", "\n", "\n", "#Detection ", "\n", "print", "(", ")", "\n", "print", "(", "\"Detection\"", ")", "\n", "print", "(", "\"Recall\"", ")", "\n", "\n", "if", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "leg_mp", ")", ")", ")", ">", "0", ":", "\n", "\t\t", "lm", "=", "\"%.2f\"", "%", "(", "100", "*", "len", "(", "inter", "(", "found", ",", "leg_mp", ")", ")", "*", "1.0", "/", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "leg_mp", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "lm", "=", "0", "\n", "", "print", "(", "'legible & machine printed: '", ",", "lm", ")", "\n", "\n", "if", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "leg_hw", ")", ")", ")", ">", "0", ":", "\n", "\t\t", "lh", "=", "\"%.2f\"", "%", "(", "100", "*", "len", "(", "inter", "(", "found", ",", "leg_hw", ")", ")", "*", "1.0", "/", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "leg_hw", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "lh", "=", "0", "\n", "", "print", "(", "'legible & handwritten: '", ",", "lh", ")", "\n", "\n", "if", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "leg_ot", ")", ")", ")", ">", "0", ":", "\n", "\t\t", "lo", "=", "\"%.2f\"", "%", "(", "100", "*", "len", "(", "inter", "(", "found", ",", "leg_ot", ")", ")", "*", "1.0", "/", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "leg_ot", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "lo", "=", "0", "\n", "# print 'legible & others: ', lo", "\n", "\n", "", "if", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "leg_mp", "+", "leg_hw", ")", ")", ")", ">", "0", ":", "\n", "\t\t", "lto", "=", "\"%.2f\"", "%", "(", "100", "*", "len", "(", "inter", "(", "found", ",", "leg_mp", "+", "leg_hw", ")", ")", "*", "1.0", "/", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "leg_mp", "+", "leg_hw", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "lto", "=", "0", "\n", "", "print", "(", "'legible overall: '", ",", "lto", ")", "\n", "\n", "if", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "ileg_mp", ")", ")", ")", ">", "0", ":", "\n", "\t\t", "ilm", "=", "\"%.2f\"", "%", "(", "100", "*", "len", "(", "inter", "(", "found", ",", "ileg_mp", ")", ")", "*", "1.0", "/", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "ileg_mp", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "ilm", "=", "0", "\n", "", "print", "(", "'illegible & machine printed: '", ",", "ilm", ")", "\n", "\n", "if", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "ileg_hw", ")", ")", ")", ">", "0", ":", "\n", "\t\t", "ilh", "=", "\"%.2f\"", "%", "(", "100", "*", "len", "(", "inter", "(", "found", ",", "ileg_hw", ")", ")", "*", "1.0", "/", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "ileg_hw", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "ilh", "=", "0", "\n", "", "print", "(", "'illegible & handwritten: '", ",", "ilh", ")", "\n", "\n", "if", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "ileg_ot", ")", ")", ")", ">", "0", ":", "\n", "\t\t", "ilo", "=", "\"%.2f\"", "%", "(", "100", "*", "len", "(", "inter", "(", "found", ",", "ileg_ot", ")", ")", "*", "1.0", "/", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "ileg_ot", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "ilo", "=", "0", "\n", "# print 'illegible & others: ', ilo ", "\n", "\n", "", "if", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "ileg_mp", "+", "ileg_hw", ")", ")", ")", ">", "0", ":", "\n", "\t\t", "ilto", "=", "\"%.2f\"", "%", "(", "100", "*", "len", "(", "inter", "(", "found", ",", "ileg_mp", "+", "ileg_hw", ")", ")", "*", "1.0", "/", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "ileg_mp", "+", "ileg_hw", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "ilto", "=", "0", "\n", "", "print", "(", "'illegible overall: '", ",", "ilto", ")", "\n", "\n", "#total = \"%.1f\"%(100*len(found)*1.0/(len(found)+len(n_found)))", "\n", "t_recall", "=", "100", "*", "len", "(", "found", ")", "*", "1.0", "/", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "leg_mp", "+", "leg_hw", "+", "ileg_mp", "+", "ileg_hw", ")", ")", ")", "\n", "total", "=", "\"%.1f\"", "%", "(", "t_recall", ")", "\n", "print", "(", "'total recall: '", ",", "total", ")", "\n", "\n", "print", "(", "\"Precision\"", ")", "\n", "\n", "t_precision", "=", "100", "*", "len", "(", "found", ")", "*", "1.0", "/", "(", "len", "(", "found", "+", "fp", ")", ")", "\n", "precision", "=", "\"%.2f\"", "%", "(", "t_precision", ")", "\n", "print", "(", "'total precision: '", ",", "precision", ")", "\n", "\n", "print", "(", "\"f-score\"", ")", "\n", "\n", "f_score", "=", "\"%.2f\"", "%", "(", "2", "*", "t_recall", "*", "t_precision", "/", "(", "t_recall", "+", "t_precision", ")", ")", "if", "(", "t_recall", "+", "t_precision", ")", ">", "0", "else", "0", "\n", "print", "(", "'f-score localization: '", ",", "f_score", ")", "\n", "\n", "print", "(", ")", "\n", "print", "(", "\"Transcription\"", ")", "\n", "transAcc", "=", "\"%.2f\"", "%", "(", "100", "*", "transcription_results", "[", "'exact'", "]", "[", "'accuracy'", "]", ")", "\n", "transAcc1", "=", "\"%.2f\"", "%", "(", "100", "*", "transcription_results", "[", "'distance1'", "]", "[", "'accuracy'", "]", ")", "\n", "print", "(", "'accuracy for exact matches: '", ",", "transAcc", ")", "\n", "print", "(", "'accuracy for matches with edit distance<=1: '", ",", "transAcc1", ")", "\n", "\n", "print", "(", ")", "\n", "print", "(", "'End-to-end'", ")", "\n", "TP_new", "=", "len", "(", "inter", "(", "found", ",", "leg_eng_mp", "+", "leg_eng_hw", ")", ")", "*", "transcription_results", "[", "'exact'", "]", "[", "'accuracy'", "]", "\n", "FP_new", "=", "len", "(", "fp", ")", "+", "len", "(", "inter", "(", "found", ",", "leg_eng_mp", "+", "leg_eng_hw", ")", ")", "*", "(", "1", "-", "transcription_results", "[", "'exact'", "]", "[", "'accuracy'", "]", ")", "\n", "FN_new", "=", "len", "(", "inter", "(", "n_found", ",", "leg_eng_mp", "+", "leg_eng_hw", ")", ")", "+", "len", "(", "inter", "(", "found", ",", "leg_eng_mp", "+", "leg_eng_hw", ")", ")", "*", "(", "1", "-", "transcription_results", "[", "'exact'", "]", "[", "'accuracy'", "]", ")", "\n", "t_recall_new", "=", "100", "*", "TP_new", "/", "(", "TP_new", "+", "FN_new", ")", "\n", "t_precision_new", "=", "100", "*", "TP_new", "/", "(", "TP_new", "+", "FP_new", ")", "if", "(", "TP_new", "+", "FP_new", ")", ">", "0", "else", "0", "\n", "fscore", "=", "\"%.2f\"", "%", "(", "2", "*", "t_recall_new", "*", "t_precision_new", "/", "(", "t_recall_new", "+", "t_precision_new", ")", ")", "if", "(", "t_recall_new", "+", "t_precision_new", ")", ">", "0", "else", "0", "\n", "\n", "recall_new", "=", "\"%.2f\"", "%", "(", "t_recall_new", ")", "\n", "precision_new", "=", "\"%.2f\"", "%", "(", "t_precision_new", ")", "\n", "print", "(", "'recall: '", ",", "recall_new", ",", "end", "=", "' '", ")", "\n", "print", "(", "'precision: '", ",", "precision_new", ")", "\n", "print", "(", "'End-to-end f-score: '", ",", "fscore", ")", "\n", "print", "(", ")", "\n", "print", "(", "\"{} & {} & {} & {} & {} & {} & {} & {} & {} & {} & {}\"", ".", "format", "(", "lm", ",", "lh", ",", "ilm", ",", "ilh", ",", "total", ",", "precision", ",", "f_score", ",", "transAcc", ",", "recall_new", ",", "precision_new", ",", "fscore", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.getDetections": [[37, 81], ["coco_evaluation_v2.inter", "len", "list", "list", "copy.copy", "len", "detectRes[].extend", "groundtruth.imgToAnns.keys", "evaluation.imgToAnns.keys", "coco_evaluation_v2.iou_score", "detectRes[].append", "eval_bboxes.remove", "detectRes[].append"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.iou_score"], ["def", "getDetections", "(", "groundtruth", ",", "evaluation", ",", "imgIds", "=", "None", ",", "annIds", "=", "[", "]", ",", "detection_threshold", "=", "0.5", ")", ":", "\n", "\t", "\"\"\"\n\tA box is a match iff the intersection of union score is >= 0.5.\n\tParams\n\t------\n\tInput dicts have the format of annotation dictionaries\n\t\"\"\"", "\n", "#parameters", "\n", "\n", "detectRes", "=", "{", "}", "\n", "# results are lists of dicts {gt_id: xxx, eval_id: yyy}", "\n", "detectRes", "[", "'true_positives'", "]", "=", "[", "]", "\n", "detectRes", "[", "'false_negatives'", "]", "=", "[", "]", "\n", "detectRes", "[", "'false_positives'", "]", "=", "[", "]", "\n", "\n", "# the default is set to evaluate on the validation set", "\n", "if", "imgIds", "==", "None", ":", "\n", "\t\t", "imgIds", "=", "groundtruth", ".", "val", "\n", "\n", "", "imgIds", "=", "imgIds", "if", "len", "(", "imgIds", ")", ">", "0", "else", "inter", "(", "list", "(", "groundtruth", ".", "imgToAnns", ".", "keys", "(", ")", ")", ",", "list", "(", "evaluation", ".", "imgToAnns", ".", "keys", "(", ")", ")", ")", "\n", "\n", "for", "cocoid", "in", "imgIds", ":", "\n", "\t\t", "gt_bboxes", "=", "groundtruth", ".", "imgToAnns", "[", "cocoid", "]", "if", "cocoid", "in", "groundtruth", ".", "imgToAnns", "else", "[", "]", "\n", "eval_bboxes", "=", "copy", ".", "copy", "(", "evaluation", ".", "imgToAnns", "[", "cocoid", "]", ")", "if", "cocoid", "in", "evaluation", ".", "imgToAnns", "else", "[", "]", "\n", "\n", "for", "gt_box_id", "in", "gt_bboxes", ":", "\n", "\t\t\t", "gt_box", "=", "groundtruth", ".", "anns", "[", "gt_box_id", "]", "[", "'bbox'", "]", "\n", "max_iou", "=", "0.0", "\n", "match", "=", "None", "\n", "for", "eval_box_id", "in", "eval_bboxes", ":", "\n", "\t\t\t\t", "eval_box", "=", "evaluation", ".", "anns", "[", "eval_box_id", "]", "[", "'bbox'", "]", "\n", "iou", "=", "iou_score", "(", "gt_box", ",", "eval_box", ")", "\n", "if", "iou", ">=", "detection_threshold", "and", "iou", ">", "max_iou", ":", "\n", "\t\t\t\t\t", "max_iou", "=", "iou", "\n", "match", "=", "eval_box_id", "\n", "", "", "if", "match", "is", "not", "None", ":", "\n", "\t\t\t\t", "detectRes", "[", "'true_positives'", "]", ".", "append", "(", "{", "'gt_id'", ":", "gt_box_id", ",", "'eval_id'", ":", "match", "}", ")", "\n", "eval_bboxes", ".", "remove", "(", "match", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "detectRes", "[", "'false_negatives'", "]", ".", "append", "(", "{", "'gt_id'", ":", "gt_box_id", "}", ")", "\n", "", "", "if", "len", "(", "eval_bboxes", ")", ">", "0", ":", "\n", "\t\t\t", "detectRes", "[", "'false_positives'", "]", ".", "extend", "(", "[", "{", "'eval_id'", ":", "eval_box_id", "}", "for", "eval_box_id", "in", "eval_bboxes", "]", ")", "\n", "\n", "", "", "return", "detectRes", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.evaluateAttribute": [[83, 108], ["len", "len", "correct.append", "len", "incorrect.append", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "evaluateAttribute", "(", "groundtruth", ",", "evaluation", ",", "resultDict", ",", "attributes", ")", ":", "\n", "\t", "'''\n\tInput:\n\tgroundtruth_Dict: dict, AnnFile format\n\tevalDict: dict, AnnFile format\n\tresultDict: dict, output from getDetections\n\tattributes : list of strings, attribute categories\n\t-----\n\tOutput:\n\t'''", "\n", "assert", "'utf8_string'", "not", "in", "attributes", ",", "'there is a separate function for utf8_string'", "\n", "res", "=", "{", "}", "\n", "for", "attribute", "in", "attributes", ":", "\n", "\t\t", "correct", "=", "[", "]", "\n", "incorrect", "=", "[", "]", "\n", "for", "detection", "in", "resultDict", "[", "'true_positives'", "]", ":", "\n", "\t\t\t", "gt_val", "=", "groundtruth", ".", "anns", "[", "detection", "[", "'gt_id'", "]", "]", "[", "attribute", "]", "\n", "eval_val", "=", "evaluation", ".", "anns", "[", "detection", "[", "'eval_id'", "]", "]", "[", "attribute", "]", "\n", "if", "gt_val", "==", "eval_val", ":", "\n", "\t\t\t\t", "correct", ".", "append", "(", "detection", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "if", "gt_val", "!=", "'na'", ":", "\n", "\t\t\t\t\t", "incorrect", ".", "append", "(", "detection", ")", "\n", "", "", "", "res", "[", "attribute", "]", "=", "{", "'attribute'", ":", "attribute", ",", "'correct'", ":", "len", "(", "correct", ")", ",", "'incorrect'", ":", "len", "(", "incorrect", ")", ",", "'accuracy'", ":", "len", "(", "correct", ")", "*", "1.0", "/", "len", "(", "correct", "+", "incorrect", ")", "}", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.evaluateEndToEnd": [[109, 195], ["zip", "coco_evaluation_v2.inter", "len", "list", "list", "copy.copy", "coco_evaluation_v2.decode", "len", "detectRes[].extend", "coco_evaluation_v2.decode", "coco_evaluation_v2.decode", "groundtruth.imgToAnns.keys", "evaluation.imgToAnns.keys", "coco_evaluation_v2.iou_score", "detectRes[].append", "eval_bboxes.remove", "detectRes[].append", "ignore.append", "len", "ignore.append", "incorrect.append", "editdistance.eval", "correct.append", "incorrect.append", "len", "len", "coco_evaluation_v2.decode", "editdistance.eval"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.decode", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.decode", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.decode", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.iou_score", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.decode"], ["", "def", "evaluateEndToEnd", "(", "groundtruth", ",", "evaluation", ",", "imgIds", "=", "None", ",", "annIds", "=", "[", "]", ",", "detection_threshold", "=", "0.5", ")", ":", "\n", "\t", "\"\"\"\n\tA box is a match iff the intersection of union score is >= 0.5.\n\tParams\n\t------\n\tInput dicts have the format of annotation dictionaries\n\t\"\"\"", "\n", "#parameters", "\n", "\n", "detectRes", "=", "{", "}", "\n", "# results are lists of dicts {gt_id: xxx, eval_id: yyy}", "\n", "detectRes", "[", "'true_positives'", "]", "=", "[", "]", "\n", "detectRes", "[", "'false_negatives'", "]", "=", "[", "]", "\n", "detectRes", "[", "'false_positives'", "]", "=", "[", "]", "\n", "\n", "# the default is set to evaluate on the validation set", "\n", "if", "imgIds", "==", "None", ":", "\n", "\t\t", "imgIds", "=", "groundtruth", ".", "val", "\n", "\n", "", "imgIds", "=", "imgIds", "if", "len", "(", "imgIds", ")", ">", "0", "else", "inter", "(", "list", "(", "groundtruth", ".", "imgToAnns", ".", "keys", "(", ")", ")", ",", "list", "(", "evaluation", ".", "imgToAnns", ".", "keys", "(", ")", ")", ")", "\n", "\n", "for", "cocoid", "in", "imgIds", ":", "\n", "\t\t", "gt_bboxes", "=", "groundtruth", ".", "imgToAnns", "[", "cocoid", "]", "if", "cocoid", "in", "groundtruth", ".", "imgToAnns", "else", "[", "]", "\n", "eval_bboxes", "=", "copy", ".", "copy", "(", "evaluation", ".", "imgToAnns", "[", "cocoid", "]", ")", "if", "cocoid", "in", "evaluation", ".", "imgToAnns", "else", "[", "]", "\n", "\n", "for", "gt_box_id", "in", "gt_bboxes", ":", "\n", "\n", "\t\t\t", "gt_box", "=", "groundtruth", ".", "anns", "[", "gt_box_id", "]", "[", "'bbox'", "]", "\n", "if", "'utf8_string'", "not", "in", "groundtruth", ".", "anns", "[", "gt_box_id", "]", ":", "\n", "\t\t\t\t", "continue", "\n", "", "gt_val", "=", "decode", "(", "groundtruth", ".", "anns", "[", "gt_box_id", "]", "[", "'utf8_string'", "]", ")", "\n", "\n", "max_iou", "=", "0.0", "\n", "\n", "match", "=", "None", "\n", "for", "eval_box_id", "in", "eval_bboxes", ":", "\n", "\t\t\t\t", "eval_box", "=", "evaluation", ".", "anns", "[", "eval_box_id", "]", "[", "'bbox'", "]", "\n", "iou", "=", "iou_score", "(", "gt_box", ",", "eval_box", ")", "\n", "\n", "if", "iou", ">=", "detection_threshold", "and", "iou", ">", "max_iou", ":", "\n", "\t\t\t\t\t", "max_iou", "=", "iou", "\n", "match", "=", "eval_box_id", "\n", "if", "'utf8_string'", "in", "evaluation", ".", "anns", "[", "eval_box_id", "]", ":", "\n", "\t\t\t\t\t\t", "eval_val", "=", "decode", "(", "evaluation", ".", "anns", "[", "eval_box_id", "]", "[", "'utf8_string'", "]", ")", "\n", "if", "editdistance", ".", "eval", "(", "gt_val", ",", "eval_val", ")", "==", "0", ":", "\n", "\t\t\t\t\t\t\t", "break", "\n", "", "", "", "", "if", "match", "is", "not", "None", ":", "\n", "\t\t\t\t", "detectRes", "[", "'true_positives'", "]", ".", "append", "(", "{", "'gt_id'", ":", "gt_box_id", ",", "'eval_id'", ":", "match", "}", ")", "\n", "eval_bboxes", ".", "remove", "(", "match", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "detectRes", "[", "'false_negatives'", "]", ".", "append", "(", "{", "'gt_id'", ":", "gt_box_id", "}", ")", "\n", "", "", "if", "len", "(", "eval_bboxes", ")", ">", "0", ":", "\n", "\t\t\t", "detectRes", "[", "'false_positives'", "]", ".", "extend", "(", "[", "{", "'eval_id'", ":", "eval_box_id", "}", "for", "eval_box_id", "in", "eval_bboxes", "]", ")", "\n", "\n", "", "", "resultDict", "=", "detectRes", "\n", "\n", "res", "=", "{", "}", "\n", "for", "setting", ",", "threshold", "in", "zip", "(", "[", "'exact'", ",", "'distance1'", "]", ",", "[", "0", ",", "1", "]", ")", ":", "\n", "\t\t", "correct", "=", "[", "]", "\n", "incorrect", "=", "[", "]", "\n", "ignore", "=", "[", "]", "\n", "for", "detection", "in", "resultDict", "[", "'true_positives'", "]", ":", "\n", "\t\t\t", "if", "'utf8_string'", "not", "in", "groundtruth", ".", "anns", "[", "detection", "[", "'gt_id'", "]", "]", ":", "\n", "\t\t\t\t", "ignore", ".", "append", "(", "detection", ")", "\n", "continue", "\n", "\n", "", "gt_val", "=", "decode", "(", "groundtruth", ".", "anns", "[", "detection", "[", "'gt_id'", "]", "]", "[", "'utf8_string'", "]", ")", "\n", "if", "len", "(", "gt_val", ")", "<", "3", ":", "\n", "\t\t\t\t", "ignore", ".", "append", "(", "detection", ")", "\n", "continue", "\n", "\n", "", "if", "'utf8_string'", "not", "in", "evaluation", ".", "anns", "[", "detection", "[", "'eval_id'", "]", "]", ":", "\n", "\t\t\t\t", "incorrect", ".", "append", "(", "detection", ")", "\n", "continue", "\n", "\n", "", "eval_val", "=", "decode", "(", "evaluation", ".", "anns", "[", "detection", "[", "'eval_id'", "]", "]", "[", "'utf8_string'", "]", ")", "\n", "\n", "detection", "[", "'gt_string'", "]", "=", "gt_val", "\n", "detection", "[", "'eval_string'", "]", "=", "eval_val", "\n", "if", "editdistance", ".", "eval", "(", "gt_val", ",", "eval_val", ")", "<=", "threshold", ":", "\n", "\t\t\t\t", "correct", ".", "append", "(", "detection", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "incorrect", ".", "append", "(", "detection", ")", "\n", "\n", "", "", "res", "[", "setting", "]", "=", "{", "'setting'", ":", "setting", ",", "'correct'", ":", "correct", ",", "'incorrect'", ":", "incorrect", ",", "'ignore'", ":", "ignore", ",", "'accuracy'", ":", "len", "(", "correct", ")", "*", "1.0", "/", "len", "(", "correct", "+", "incorrect", ")", "}", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.area": [[196, 198], ["None"], "function", ["None"], ["", "def", "area", "(", "bbox", ")", ":", "\n", "\t", "return", "bbox", "[", "2", "]", "*", "1.0", "*", "bbox", "[", "3", "]", "# width * height", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.intersect": [[199, 210], ["max", "max", "min", "min"], "function", ["None"], ["", "def", "intersect", "(", "bboxA", ",", "bboxB", ")", ":", "\n", "\t", "\"\"\"Return a new bounding box that contains the intersection of\n\t'self' and 'other', or None if there is no intersection\n\t\"\"\"", "\n", "new_top", "=", "max", "(", "bboxA", "[", "1", "]", ",", "bboxB", "[", "1", "]", ")", "\n", "new_left", "=", "max", "(", "bboxA", "[", "0", "]", ",", "bboxB", "[", "0", "]", ")", "\n", "new_right", "=", "min", "(", "bboxA", "[", "0", "]", "+", "bboxA", "[", "2", "]", ",", "bboxB", "[", "0", "]", "+", "bboxB", "[", "2", "]", ")", "\n", "new_bottom", "=", "min", "(", "bboxA", "[", "1", "]", "+", "bboxA", "[", "3", "]", ",", "bboxB", "[", "1", "]", "+", "bboxB", "[", "3", "]", ")", "\n", "if", "new_top", "<", "new_bottom", "and", "new_left", "<", "new_right", ":", "\n", "\t\t", "return", "[", "new_left", ",", "new_top", ",", "new_right", "-", "new_left", ",", "new_bottom", "-", "new_top", "]", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.iou_score": [[211, 225], ["coco_evaluation_v2.intersect", "coco_evaluation_v2.area", "coco_evaluation_v2.intersect", "coco_evaluation_v2.area", "coco_evaluation_v2.area", "float", "float"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.intersect", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.intersect", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area"], ["", "def", "iou_score", "(", "bboxA", ",", "bboxB", ")", ":", "\n", "\t", "\"\"\"Returns the Intersection-over-Union score, defined as the area of\n\tthe intersection divided by the intersection over the union of\n\tthe two bounding boxes. This measure is symmetric.\n\t\"\"\"", "\n", "if", "intersect", "(", "bboxA", ",", "bboxB", ")", ":", "\n", "\t\t", "intersection_area", "=", "area", "(", "intersect", "(", "bboxA", ",", "bboxB", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "intersection_area", "=", "0", "\n", "", "union_area", "=", "area", "(", "bboxA", ")", "+", "area", "(", "bboxB", ")", "-", "intersection_area", "\n", "if", "union_area", ">", "0", ":", "\n", "\t\t", "return", "float", "(", "intersection_area", ")", "/", "float", "(", "union_area", ")", "\n", "", "else", ":", "\n", "\t\t", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.decode": [[226, 233], ["trans.encode.replace", "re.sub", "re.sub.lower", "trans.encode.encode"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.encode"], ["", "", "def", "decode", "(", "trans", ")", ":", "\n", "\t", "if", "sys", ".", "version", "[", "0", "]", "==", "'2'", ":", "\n", "\t\t", "trans", "=", "trans", ".", "encode", "(", "\"ascii\"", ",", "'ignore'", ")", "\n", "\n", "", "trans", "=", "trans", ".", "replace", "(", "'\\n'", ",", "' '", ")", "\n", "trans2", "=", "re", ".", "sub", "(", "'[^a-zA-Z0-9!?@\\_\\-\\+\\*\\:\\&\\/ \\.]'", ",", "''", ",", "trans", ")", "\n", "return", "trans2", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter": [[234, 236], ["list", "set().intersection", "set", "set"], "function", ["None"], ["", "def", "inter", "(", "list1", ",", "list2", ")", ":", "\n", "\t", "return", "list", "(", "set", "(", "list1", ")", ".", "intersection", "(", "set", "(", "list2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.printDetailedResults": [[237, 345], ["print", "c_text.getAnnIds", "c_text.getAnnIds", "c_text.getAnnIds", "c_text.getAnnIds", "c_text.getAnnIds", "c_text.getAnnIds", "c_text.getAnnIds", "c_text.getAnnIds", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "len", "coco_evaluation_v2.inter", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "len", "len", "len", "len", "len", "len", "len", "len", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter", "coco_evaluation_v2.inter"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnIds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnIds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnIds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnIds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnIds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnIds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnIds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnIds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_evaluation_v2.inter"], ["", "def", "printDetailedResults", "(", "c_text", ",", "detection_results", ",", "transcription_results", ",", "name", ")", ":", "\n", "\t", "print", "(", "name", ")", "\n", "#detected coco-text annids", "\n", "found", "=", "[", "x", "[", "'gt_id'", "]", "for", "x", "in", "detection_results", "[", "'true_positives'", "]", "]", "\n", "n_found", "=", "[", "x", "[", "'gt_id'", "]", "for", "x", "in", "detection_results", "[", "'false_negatives'", "]", "]", "\n", "fp", "=", "[", "x", "[", "'eval_id'", "]", "for", "x", "in", "detection_results", "[", "'false_positives'", "]", "]", "\n", "\n", "leg_eng_mp", "=", "c_text", ".", "getAnnIds", "(", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "(", "'legibility'", ",", "'legible'", ")", ",", "(", "'language'", ",", "'english'", ")", ",", "(", "'class'", ",", "'machine printed'", ")", "]", ",", "areaRng", "=", "[", "]", ")", "\n", "leg_eng_hw", "=", "c_text", ".", "getAnnIds", "(", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "(", "'legibility'", ",", "'legible'", ")", ",", "(", "'language'", ",", "'english'", ")", ",", "(", "'class'", ",", "'handwritten'", ")", "]", ",", "areaRng", "=", "[", "]", ")", "\n", "leg_mp", "=", "c_text", ".", "getAnnIds", "(", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "(", "'legibility'", ",", "'legible'", ")", ",", "(", "'class'", ",", "'machine printed'", ")", "]", ",", "areaRng", "=", "[", "]", ")", "\n", "ileg_mp", "=", "c_text", ".", "getAnnIds", "(", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "(", "'legibility'", ",", "'illegible'", ")", ",", "(", "'class'", ",", "'machine printed'", ")", "]", ",", "areaRng", "=", "[", "]", ")", "\n", "leg_hw", "=", "c_text", ".", "getAnnIds", "(", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "(", "'legibility'", ",", "'legible'", ")", ",", "(", "'class'", ",", "'handwritten'", ")", "]", ",", "areaRng", "=", "[", "]", ")", "\n", "ileg_hw", "=", "c_text", ".", "getAnnIds", "(", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "(", "'legibility'", ",", "'illegible'", ")", ",", "(", "'class'", ",", "'handwritten'", ")", "]", ",", "areaRng", "=", "[", "]", ")", "\n", "leg_ot", "=", "c_text", ".", "getAnnIds", "(", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "(", "'legibility'", ",", "'legible'", ")", ",", "(", "'class'", ",", "'others'", ")", "]", ",", "areaRng", "=", "[", "]", ")", "\n", "ileg_ot", "=", "c_text", ".", "getAnnIds", "(", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "(", "'legibility'", ",", "'illegible'", ")", ",", "(", "'class'", ",", "'others'", ")", "]", ",", "areaRng", "=", "[", "]", ")", "\n", "\n", "#Detection ", "\n", "print", "(", ")", "\n", "print", "(", "\"Detection\"", ")", "\n", "print", "(", "\"Recall\"", ")", "\n", "\n", "if", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "leg_mp", ")", ")", ")", ">", "0", ":", "\n", "\t\t", "lm", "=", "\"%.2f\"", "%", "(", "100", "*", "len", "(", "inter", "(", "found", ",", "leg_mp", ")", ")", "*", "1.0", "/", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "leg_mp", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "lm", "=", "0", "\n", "", "print", "(", "'legible & machine printed: '", ",", "lm", ")", "\n", "\n", "if", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "leg_hw", ")", ")", ")", ">", "0", ":", "\n", "\t\t", "lh", "=", "\"%.2f\"", "%", "(", "100", "*", "len", "(", "inter", "(", "found", ",", "leg_hw", ")", ")", "*", "1.0", "/", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "leg_hw", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "lh", "=", "0", "\n", "", "print", "(", "'legible & handwritten: '", ",", "lh", ")", "\n", "\n", "if", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "leg_ot", ")", ")", ")", ">", "0", ":", "\n", "\t\t", "lo", "=", "\"%.2f\"", "%", "(", "100", "*", "len", "(", "inter", "(", "found", ",", "leg_ot", ")", ")", "*", "1.0", "/", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "leg_ot", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "lo", "=", "0", "\n", "# print 'legible & others: ', lo", "\n", "\n", "", "if", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "leg_mp", "+", "leg_hw", ")", ")", ")", ">", "0", ":", "\n", "\t\t", "lto", "=", "\"%.2f\"", "%", "(", "100", "*", "len", "(", "inter", "(", "found", ",", "leg_mp", "+", "leg_hw", ")", ")", "*", "1.0", "/", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "leg_mp", "+", "leg_hw", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "lto", "=", "0", "\n", "", "print", "(", "'legible overall: '", ",", "lto", ")", "\n", "\n", "if", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "ileg_mp", ")", ")", ")", ">", "0", ":", "\n", "\t\t", "ilm", "=", "\"%.2f\"", "%", "(", "100", "*", "len", "(", "inter", "(", "found", ",", "ileg_mp", ")", ")", "*", "1.0", "/", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "ileg_mp", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "ilm", "=", "0", "\n", "", "print", "(", "'illegible & machine printed: '", ",", "ilm", ")", "\n", "\n", "if", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "ileg_hw", ")", ")", ")", ">", "0", ":", "\n", "\t\t", "ilh", "=", "\"%.2f\"", "%", "(", "100", "*", "len", "(", "inter", "(", "found", ",", "ileg_hw", ")", ")", "*", "1.0", "/", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "ileg_hw", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "ilh", "=", "0", "\n", "", "print", "(", "'illegible & handwritten: '", ",", "ilh", ")", "\n", "\n", "if", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "ileg_ot", ")", ")", ")", ">", "0", ":", "\n", "\t\t", "ilo", "=", "\"%.2f\"", "%", "(", "100", "*", "len", "(", "inter", "(", "found", ",", "ileg_ot", ")", ")", "*", "1.0", "/", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "ileg_ot", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "ilo", "=", "0", "\n", "# print 'illegible & others: ', ilo ", "\n", "\n", "", "if", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "ileg_mp", "+", "ileg_hw", ")", ")", ")", ">", "0", ":", "\n", "\t\t", "ilto", "=", "\"%.2f\"", "%", "(", "100", "*", "len", "(", "inter", "(", "found", ",", "ileg_mp", "+", "ileg_hw", ")", ")", "*", "1.0", "/", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "ileg_mp", "+", "ileg_hw", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "ilto", "=", "0", "\n", "", "print", "(", "'illegible overall: '", ",", "ilto", ")", "\n", "\n", "#total = \"%.1f\"%(100*len(found)*1.0/(len(found)+len(n_found)))", "\n", "t_recall", "=", "100", "*", "len", "(", "found", ")", "*", "1.0", "/", "(", "len", "(", "inter", "(", "found", "+", "n_found", ",", "leg_mp", "+", "leg_hw", "+", "ileg_mp", "+", "ileg_hw", ")", ")", ")", "\n", "total", "=", "\"%.1f\"", "%", "(", "t_recall", ")", "\n", "print", "(", "'total recall: '", ",", "total", ")", "\n", "\n", "print", "(", "\"Precision\"", ")", "\n", "\n", "t_precision", "=", "100", "*", "len", "(", "found", ")", "*", "1.0", "/", "(", "len", "(", "found", "+", "fp", ")", ")", "\n", "precision", "=", "\"%.2f\"", "%", "(", "t_precision", ")", "\n", "print", "(", "'total precision: '", ",", "precision", ")", "\n", "\n", "print", "(", "\"f-score\"", ")", "\n", "\n", "f_score", "=", "\"%.2f\"", "%", "(", "2", "*", "t_recall", "*", "t_precision", "/", "(", "t_recall", "+", "t_precision", ")", ")", "if", "(", "t_recall", "+", "t_precision", ")", ">", "0", "else", "0", "\n", "print", "(", "'f-score localization: '", ",", "f_score", ")", "\n", "\n", "print", "(", ")", "\n", "print", "(", "\"Transcription\"", ")", "\n", "transAcc", "=", "\"%.2f\"", "%", "(", "100", "*", "transcription_results", "[", "'exact'", "]", "[", "'accuracy'", "]", ")", "\n", "transAcc1", "=", "\"%.2f\"", "%", "(", "100", "*", "transcription_results", "[", "'distance1'", "]", "[", "'accuracy'", "]", ")", "\n", "print", "(", "'accuracy for exact matches: '", ",", "transAcc", ")", "\n", "print", "(", "'accuracy for matches with edit distance<=1: '", ",", "transAcc1", ")", "\n", "\n", "print", "(", ")", "\n", "print", "(", "'End-to-end'", ")", "\n", "TP_new", "=", "len", "(", "inter", "(", "found", ",", "leg_eng_mp", "+", "leg_eng_hw", ")", ")", "*", "transcription_results", "[", "'exact'", "]", "[", "'accuracy'", "]", "\n", "FP_new", "=", "len", "(", "fp", ")", "+", "len", "(", "inter", "(", "found", ",", "leg_eng_mp", "+", "leg_eng_hw", ")", ")", "*", "(", "1", "-", "transcription_results", "[", "'exact'", "]", "[", "'accuracy'", "]", ")", "\n", "FN_new", "=", "len", "(", "inter", "(", "n_found", ",", "leg_eng_mp", "+", "leg_eng_hw", ")", ")", "+", "len", "(", "inter", "(", "found", ",", "leg_eng_mp", "+", "leg_eng_hw", ")", ")", "*", "(", "1", "-", "transcription_results", "[", "'exact'", "]", "[", "'accuracy'", "]", ")", "\n", "t_recall_new", "=", "100", "*", "TP_new", "/", "(", "TP_new", "+", "FN_new", ")", "\n", "t_precision_new", "=", "100", "*", "TP_new", "/", "(", "TP_new", "+", "FP_new", ")", "if", "(", "TP_new", "+", "FP_new", ")", ">", "0", "else", "0", "\n", "fscore", "=", "\"%.2f\"", "%", "(", "2", "*", "t_recall_new", "*", "t_precision_new", "/", "(", "t_recall_new", "+", "t_precision_new", ")", ")", "if", "(", "t_recall_new", "+", "t_precision_new", ")", ">", "0", "else", "0", "\n", "\n", "recall_new", "=", "\"%.2f\"", "%", "(", "t_recall_new", ")", "\n", "precision_new", "=", "\"%.2f\"", "%", "(", "t_precision_new", ")", "\n", "print", "(", "'recall: '", ",", "recall_new", ",", "end", "=", "' '", ")", "\n", "print", "(", "'precision: '", ",", "precision_new", ")", "\n", "print", "(", "'End-to-end f-score: '", ",", "fscore", ")", "\n", "print", "(", ")", "\n", "print", "(", "\"{} & {} & {} & {} & {} & {} & {} & {} & {} & {} & {}\"", ".", "format", "(", "lm", ",", "lh", ",", "ilm", ",", "ilh", ",", "total", ",", "precision", ",", "f_score", ",", "transAcc", ",", "recall_new", ",", "precision_new", ",", "fscore", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.tests.single_demo_bezier.Model.__init__": [[13, 17], ["torch.nn.Module.__init__", "maskrcnn_benchmark.layers.BezierAlign", "torch.nn.Parameter", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ",", "scale", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bezier_align", "=", "BezierAlign", "(", "output_size", ",", "scale", ",", "1", ")", "\n", "self", ".", "masks", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "input_size", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.tests.single_demo_bezier.Model.forward": [[18, 23], ["single_demo_bezier.Model.convert_to_roi_format", "single_demo_bezier.Model.bezier_align"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.poolers.Pooler.convert_to_roi_format"], ["", "def", "forward", "(", "self", ",", "input", ",", "rois", ")", ":", "\n", "# apply mask", "\n", "        ", "x", "=", "input", "*", "self", ".", "masks", "\n", "rois", "=", "self", ".", "convert_to_roi_format", "(", "rois", ")", "\n", "return", "self", ".", "bezier_align", "(", "x", ",", "rois", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.tests.single_demo_bezier.Model.convert_to_roi_format": [[24, 36], ["maskrcnn_benchmark.modeling.utils.cat", "maskrcnn_benchmark.modeling.utils.cat", "torch.cat", "torch.full", "enumerate", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "convert_to_roi_format", "(", "self", ",", "beziers", ")", ":", "\n", "        ", "concat_boxes", "=", "cat", "(", "[", "b", "for", "b", "in", "beziers", "]", ",", "dim", "=", "0", ")", "\n", "device", ",", "dtype", "=", "concat_boxes", ".", "device", ",", "concat_boxes", ".", "dtype", "\n", "ids", "=", "cat", "(", "\n", "[", "\n", "torch", ".", "full", "(", "(", "len", "(", "b", ")", ",", "1", ")", ",", "i", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "beziers", ")", "\n", "]", ",", "\n", "dim", "=", "0", ",", "\n", ")", "\n", "rois", "=", "torch", ".", "cat", "(", "[", "ids", ",", "concat_boxes", "]", ",", "dim", "=", "1", ")", "\n", "return", "rois", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.tests.single_demo_bezier.get_size": [[38, 46], ["max"], "function", ["None"], ["", "", "def", "get_size", "(", "image_size", ",", "w", ",", "h", ")", ":", "\n", "    ", "w_ratio", "=", "w", "/", "image_size", "[", "1", "]", "\n", "h_ratio", "=", "h", "/", "image_size", "[", "0", "]", "\n", "down_scale", "=", "max", "(", "w_ratio", ",", "h_ratio", ")", "\n", "if", "down_scale", ">", "1", ":", "\n", "        ", "return", "down_scale", "\n", "", "else", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.tests.single_demo_bezier.test": [[48, 94], ["Model().cuda", "PIL.Image.open", "single_demo_bezier.get_size", "down_scales.append", "PIL.ImageOps.expand", "Image.fromarray.resize", "np.stack.append", "beziers[].append", "numpy.stack", "torch.from_numpy().permute().cuda().float", "Model().cuda.", "enumerate", "m.mean", "x.mean.backward", "print", "Image.fromarray.resize", "numpy.array", "numpy.array", "torch.from_numpy().cuda().float", "roi.cpu().detach().numpy().transpose().astype.cpu().detach().numpy().transpose().astype", "PIL.Image.fromarray", "Image.fromarray.save", "single_demo_bezier.Model", "zip", "torch.from_numpy().permute().cuda", "int", "int", "torch.from_numpy().cuda", "roi.cpu().detach().numpy().transpose().astype.cpu().detach().numpy().transpose", "torch.from_numpy().permute", "torch.from_numpy", "roi.cpu().detach().numpy().transpose().astype.cpu().detach().numpy", "numpy.stack", "torch.from_numpy", "roi.cpu().detach().numpy().transpose().astype.cpu().detach", "roi.cpu().detach().numpy().transpose().astype.cpu"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.Resize.get_size", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_pool_func.DeformRoIPoolingFunction.backward", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.save", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.transpose"], ["", "", "def", "test", "(", "scale", "=", "2", ")", ":", "\n", "    ", "image_size", "=", "(", "2560", ",", "2560", ")", "# H x W", "\n", "output_size", "=", "(", "256", ",", "1024", ")", "\n", "\n", "input_size", "=", "(", "image_size", "[", "0", "]", "//", "scale", ",", "\n", "image_size", "[", "1", "]", "//", "scale", ")", "\n", "m", "=", "Model", "(", "input_size", ",", "output_size", ",", "1", "/", "scale", ")", ".", "cuda", "(", ")", "\n", "\n", "beziers", "=", "[", "[", "]", "]", "\n", "im_arrs", "=", "[", "]", "\n", "down_scales", "=", "[", "]", "\n", "\n", "imgfile", "=", "'1019.jpg'", "\n", "im", "=", "Image", ".", "open", "(", "'tools/tests/imgs/'", "+", "imgfile", ")", "\n", "# im.show()", "\n", "# pad", "\n", "w", ",", "h", "=", "im", ".", "size", "\n", "down_scale", "=", "get_size", "(", "image_size", ",", "w", ",", "h", ")", "\n", "down_scales", ".", "append", "(", "down_scale", ")", "\n", "if", "down_scale", ">", "1", ":", "\n", "        ", "im", "=", "im", ".", "resize", "(", "(", "int", "(", "w", "/", "down_scale", ")", ",", "int", "(", "h", "/", "down_scale", ")", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "w", ",", "h", "=", "im", ".", "size", "\n", "", "padding", "=", "(", "0", ",", "0", ",", "image_size", "[", "1", "]", "-", "w", ",", "image_size", "[", "0", "]", "-", "h", ")", "\n", "im", "=", "ImageOps", ".", "expand", "(", "im", ",", "padding", ")", "\n", "im", "=", "im", ".", "resize", "(", "(", "input_size", "[", "1", "]", ",", "input_size", "[", "0", "]", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "im_arrs", ".", "append", "(", "np", ".", "array", "(", "im", ")", ")", "\n", "\n", "cps", "=", "[", "152.0", ",", "209.0", ",", "134.1", ",", "34.18", ",", "365.69", ",", "66.2", ",", "377.0", ",", "206.0", ",", "345.0", ",", "214.0", ",", "334.31", ",", "109.71", ",", "190.03", ",", "80.12", ",", "203.0", ",", "214.0", "]", "# 1019", "\n", "\n", "cps", "=", "np", ".", "array", "(", "cps", ")", "[", "[", "1", ",", "0", ",", "3", ",", "2", ",", "5", ",", "4", ",", "7", ",", "6", ",", "15", ",", "14", ",", "13", ",", "12", ",", "11", ",", "10", ",", "9", ",", "8", "]", "]", "\n", "beziers", "[", "0", "]", ".", "append", "(", "cps", ")", "\n", "\n", "beziers", "=", "[", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "b", ")", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "for", "b", "in", "beziers", "]", "\n", "beziers", "=", "[", "b", "/", "d", "for", "b", ",", "d", "in", "zip", "(", "beziers", ",", "down_scales", ")", "]", "\n", "\n", "im_arrs", "=", "np", ".", "stack", "(", "im_arrs", ")", "\n", "x", "=", "torch", ".", "from_numpy", "(", "im_arrs", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "\n", "x", "=", "m", "(", "x", ",", "beziers", ")", "\n", "for", "i", ",", "roi", "in", "enumerate", "(", "x", ")", ":", "\n", "        ", "roi", "=", "roi", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "roi", ",", "\"RGB\"", ")", "\n", "im", ".", "save", "(", "'roi_1103.png'", ")", "\n", "", "loss", "=", "x", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "print", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.model_serialization.align_and_update_state_dicts": [[10, 51], ["sorted", "sorted", "torch.as_tensor().view", "torch.as_tensor().view.max", "logging.getLogger", "enumerate", "list", "list", "len", "len", "max", "max", "idxs.tolist", "model_state_dict.keys", "loaded_state_dict.keys", "i.endswith", "len", "torch.as_tensor", "len", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["def", "align_and_update_state_dicts", "(", "model_state_dict", ",", "loaded_state_dict", ")", ":", "\n", "    ", "\"\"\"\n    Strategy: suppose that the models that we will create will have prefixes appended\n    to each of its keys, for example due to an extra level of nesting that the original\n    pre-trained weights from ImageNet won't contain. For example, model.state_dict()\n    might return backbone[0].body.res2.conv1.weight, while the pre-trained model contains\n    res2.conv1.weight. We thus want to match both parameters together.\n    For that, we look for each model weight, look among all loaded keys if there is one\n    that is a suffix of the current weight name, and use it if that's the case.\n    If multiple matches exist, take the one with longest size\n    of the corresponding name. For example, for the same model as before, the pretrained\n    weight file can contain both res2.conv1.weight, as well as conv1.weight. In this case,\n    we want to match backbone[0].body.conv1.weight to conv1.weight, and\n    backbone[0].body.res2.conv1.weight to res2.conv1.weight.\n    \"\"\"", "\n", "current_keys", "=", "sorted", "(", "list", "(", "model_state_dict", ".", "keys", "(", ")", ")", ")", "\n", "loaded_keys", "=", "sorted", "(", "list", "(", "loaded_state_dict", ".", "keys", "(", ")", ")", ")", "\n", "\n", "# get a matrix of string matches, where each (i, j) entry correspond to the size of the", "\n", "# loaded_key string, if it matches", "\n", "match_matrix", "=", "[", "\n", "len", "(", "j", ")", "if", "i", ".", "endswith", "(", "j", ")", "else", "0", "for", "i", "in", "current_keys", "for", "j", "in", "loaded_keys", "\n", "]", "\n", "match_matrix", "=", "torch", ".", "as_tensor", "(", "match_matrix", ")", ".", "view", "(", "\n", "len", "(", "current_keys", ")", ",", "len", "(", "loaded_keys", ")", "\n", ")", "\n", "max_match_size", ",", "idxs", "=", "match_matrix", ".", "max", "(", "1", ")", "\n", "# remove indices that correspond to no-match", "\n", "idxs", "[", "max_match_size", "==", "0", "]", "=", "-", "1", "\n", "\n", "# used for logging", "\n", "max_size", "=", "max", "(", "[", "len", "(", "key", ")", "for", "key", "in", "current_keys", "]", ")", "if", "current_keys", "else", "1", "\n", "max_size_loaded", "=", "max", "(", "[", "len", "(", "key", ")", "for", "key", "in", "loaded_keys", "]", ")", "if", "loaded_keys", "else", "1", "\n", "log_str_template", "=", "\"{: <{}} loaded from {: <{}} of shape {}\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "for", "idx_new", ",", "idx_old", "in", "enumerate", "(", "idxs", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "if", "idx_old", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "", "key", "=", "current_keys", "[", "idx_new", "]", "\n", "key_old", "=", "loaded_keys", "[", "idx_old", "]", "\n", "model_state_dict", "[", "key", "]", "=", "loaded_state_dict", "[", "key_old", "]", "\n", "# logger.info(", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.model_serialization.strip_prefix_if_present": [[62, 70], ["sorted", "collections.OrderedDict", "state_dict.items", "state_dict.keys", "all", "key.startswith", "key.replace"], "function", ["None"], ["", "", "def", "strip_prefix_if_present", "(", "state_dict", ",", "prefix", ")", ":", "\n", "    ", "keys", "=", "sorted", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "if", "not", "all", "(", "key", ".", "startswith", "(", "prefix", ")", "for", "key", "in", "keys", ")", ":", "\n", "        ", "return", "state_dict", "\n", "", "stripped_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "stripped_state_dict", "[", "key", ".", "replace", "(", "prefix", ",", "\"\"", ")", "]", "=", "value", "\n", "", "return", "stripped_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.model_serialization.load_state_dict": [[72, 82], ["model.state_dict", "model_serialization.strip_prefix_if_present", "model_serialization.align_and_update_state_dicts", "model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.OptimizerDict.state_dict", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.model_serialization.strip_prefix_if_present", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.model_serialization.align_and_update_state_dicts", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.OptimizerDict.load_state_dict"], ["", "def", "load_state_dict", "(", "model", ",", "loaded_state_dict", ")", ":", "\n", "    ", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# if the state_dict comes from a model that was wrapped in a", "\n", "# DataParallel or DistributedDataParallel during serialization,", "\n", "# remove the \"module\" prefix before performing the matching", "\n", "loaded_state_dict", "=", "strip_prefix_if_present", "(", "loaded_state_dict", ",", "prefix", "=", "\"module.\"", ")", "\n", "align_and_update_state_dicts", "(", "model_state_dict", ",", "loaded_state_dict", ")", "\n", "\n", "# use strict loading", "\n", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.miscellaneous.mkdir": [[9, 15], ["os.makedirs"], "function", ["None"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.miscellaneous.save_labels": [[17, 34], ["comm.is_main_process", "logging.getLogger", "hasattr", "os.path.join", "logging.getLogger.info", "ids_to_labels.update", "logging.getLogger.warning", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.is_main_process", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update"], ["", "", "", "def", "save_labels", "(", "dataset_list", ",", "output_dir", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "ids_to_labels", "=", "{", "}", "\n", "for", "dataset", "in", "dataset_list", ":", "\n", "            ", "if", "hasattr", "(", "dataset", ",", "'categories'", ")", ":", "\n", "                ", "ids_to_labels", ".", "update", "(", "dataset", ".", "categories", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Dataset [{}] has no categories attribute, labels.json file won't be created\"", ".", "format", "(", "\n", "dataset", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "", "", "if", "ids_to_labels", ":", "\n", "            ", "labels_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'labels.json'", ")", "\n", "logger", ".", "info", "(", "\"Saving labels mapping into {}\"", ".", "format", "(", "labels_file", ")", ")", "\n", "with", "open", "(", "labels_file", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "ids_to_labels", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.miscellaneous.save_config": [[36, 40], ["comm.is_main_process", "open", "f.write", "cfg.dump"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.is_main_process"], ["", "", "", "", "def", "save_config", "(", "cfg", ",", "path", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "cfg", ".", "dump", "(", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_world_size": [[12, 18], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_world_size"], ["def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_rank": [[20, 26], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.is_main_process": [[28, 30], ["comm.get_rank"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.synchronize": [[32, 45], ["torch.get_world_size", "torch.barrier", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to synchronize (barrier) among all processes when\n    using distributed training\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.all_gather": [[47, 88], ["comm.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.LongTensor().to", "torch.LongTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.LongTensor", "torch.LongTensor", "range", "size.item", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.LongTensor", "torch.LongTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_world_size", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.all_gather", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.all_gather", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to"], ["", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "LongTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "to", "(", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.reduce_dict": [[90, 117], ["comm.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "input_dict.keys", "names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_world_size", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_rank"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "average", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.reduce_sum": [[119, 126], ["comm.get_world_size", "tensor.clone.clone", "torch.all_reduce"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_world_size"], ["", "def", "reduce_sum", "(", "tensor", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "tensor", "\n", "", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "tensor", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "return", "tensor", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.get_num_gen": [[14, 16], ["sum"], "function", ["None"], ["def", "get_num_gen", "(", "gen", ")", ":", "\n", "    ", "return", "sum", "(", "1", "for", "x", "in", "gen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.is_pruned": [[18, 24], ["None"], "function", ["None"], ["", "def", "is_pruned", "(", "layer", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "layer", ".", "mask", "\n", "return", "True", "\n", "", "except", "AttributeError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.is_leaf": [[26, 28], ["measure.get_num_gen", "model.children"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.get_num_gen"], ["", "", "def", "is_leaf", "(", "model", ")", ":", "\n", "    ", "return", "get_num_gen", "(", "model", ".", "children", "(", ")", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.get_layer_info": [[30, 34], ["str", "layer_str[].strip", "str.find"], "function", ["None"], ["", "def", "get_layer_info", "(", "layer", ")", ":", "\n", "    ", "layer_str", "=", "str", "(", "layer", ")", "\n", "type_name", "=", "layer_str", "[", ":", "layer_str", ".", "find", "(", "'('", ")", "]", ".", "strip", "(", ")", "\n", "return", "type_name", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.get_layer_param": [[36, 38], ["sum", "functools.reduce", "i.size", "model.parameters"], "function", ["None"], ["", "def", "get_layer_param", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "[", "reduce", "(", "operator", ".", "mul", ",", "i", ".", "size", "(", ")", ",", "1", ")", "for", "i", "in", "model", ".", "parameters", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.measure_layer": [[41, 156], ["measure.get_layer_info", "int", "int", "measure.get_layer_param", "x.size", "int", "int", "measure.get_layer_param", "measure.measure_layer", "measure.measure_layer", "int", "int", "measure.get_layer_param", "x.numel", "measure.get_layer_param", "int", "int", "measure.get_layer_param", "x.size", "x.size", "x.size", "measure.get_layer_param", "x.size", "x.size", "x.size", "layer.bias.numel", "measure.get_layer_param", "x.size", "x.size", "x.size", "layer.weight.numel", "measure.get_layer_param", "x.size", "x.size", "x.size", "x.numel", "measure.measure_layer", "measure.measure_layer", "measure.get_layer_param", "x.numel", "measure.get_layer_param", "x.numel", "functools.reduce", "int", "int", "measure.get_layer_param", "TypeError", "list", "offset_conv.size", "layer.parameters", "x.size", "x.size", "x.size", "x.size"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.get_layer_info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.get_layer_param", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.get_layer_param", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.measure_layer", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.measure_layer", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.get_layer_param", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.get_layer_param", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.get_layer_param", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.get_layer_param", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.get_layer_param", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.get_layer_param", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.measure_layer", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.measure_layer", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.get_layer_param", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.get_layer_param", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.get_layer_param"], ["", "def", "measure_layer", "(", "layer", ",", "*", "args", ")", ":", "\n", "    ", "global", "count_ops", ",", "count_params", "\n", "\n", "for", "x", "in", "args", ":", "\n", "        ", "delta_ops", "=", "0", "\n", "delta_params", "=", "0", "\n", "multi_add", "=", "1", "\n", "type_name", "=", "get_layer_info", "(", "layer", ")", "\n", "\n", "### ops_conv", "\n", "if", "type_name", "in", "[", "'Conv2d'", "]", ":", "\n", "            ", "out_h", "=", "int", "(", "(", "x", ".", "size", "(", ")", "[", "2", "]", "+", "2", "*", "layer", ".", "padding", "[", "0", "]", "/", "layer", ".", "dilation", "[", "0", "]", "-", "layer", ".", "kernel_size", "[", "0", "]", ")", "/", "\n", "layer", ".", "stride", "[", "0", "]", "+", "1", ")", "\n", "out_w", "=", "int", "(", "(", "x", ".", "size", "(", ")", "[", "3", "]", "+", "2", "*", "layer", ".", "padding", "[", "1", "]", "/", "layer", ".", "dilation", "[", "1", "]", "-", "layer", ".", "kernel_size", "[", "1", "]", ")", "/", "\n", "layer", ".", "stride", "[", "1", "]", "+", "1", ")", "\n", "delta_ops", "=", "layer", ".", "in_channels", "*", "layer", ".", "out_channels", "*", "layer", ".", "kernel_size", "[", "0", "]", "*", "layer", ".", "kernel_size", "[", "1", "]", "*", "out_h", "*", "out_w", "/", "layer", ".", "groups", "*", "multi_add", "\n", "delta_params", "=", "get_layer_param", "(", "layer", ")", "\n", "\n", "", "elif", "type_name", "in", "[", "'ConvTranspose2d'", "]", ":", "\n", "            ", "_", ",", "_", ",", "in_h", ",", "in_w", "=", "x", ".", "size", "(", ")", "\n", "out_h", "=", "int", "(", "(", "in_h", "-", "1", ")", "*", "layer", ".", "stride", "[", "0", "]", "-", "2", "*", "layer", ".", "padding", "[", "0", "]", "+", "layer", ".", "kernel_size", "[", "0", "]", "+", "layer", ".", "output_padding", "[", "0", "]", ")", "\n", "out_w", "=", "int", "(", "(", "in_w", "-", "1", ")", "*", "layer", ".", "stride", "[", "1", "]", "-", "2", "*", "layer", ".", "padding", "[", "1", "]", "+", "layer", ".", "kernel_size", "[", "1", "]", "+", "layer", ".", "output_padding", "[", "1", "]", ")", "\n", "delta_ops", "=", "layer", ".", "in_channels", "*", "layer", ".", "out_channels", "*", "layer", ".", "kernel_size", "[", "0", "]", "*", "layer", ".", "kernel_size", "[", "1", "]", "*", "out_h", "*", "out_w", "/", "layer", ".", "groups", "*", "multi_add", "\n", "delta_params", "=", "get_layer_param", "(", "layer", ")", "\n", "\n", "### ops_learned_conv", "\n", "", "elif", "type_name", "in", "[", "'LearnedGroupConv'", "]", ":", "\n", "            ", "measure_layer", "(", "layer", ".", "relu", ",", "x", ")", "\n", "measure_layer", "(", "layer", ".", "norm", ",", "x", ")", "\n", "conv", "=", "layer", ".", "conv", "\n", "out_h", "=", "int", "(", "(", "x", ".", "size", "(", ")", "[", "2", "]", "+", "2", "*", "conv", ".", "padding", "[", "0", "]", "-", "conv", ".", "kernel_size", "[", "0", "]", ")", "/", "\n", "conv", ".", "stride", "[", "0", "]", "+", "1", ")", "\n", "out_w", "=", "int", "(", "(", "x", ".", "size", "(", ")", "[", "3", "]", "+", "2", "*", "conv", ".", "padding", "[", "1", "]", "-", "conv", ".", "kernel_size", "[", "1", "]", ")", "/", "\n", "conv", ".", "stride", "[", "1", "]", "+", "1", ")", "\n", "delta_ops", "=", "conv", ".", "in_channels", "*", "conv", ".", "out_channels", "*", "conv", ".", "kernel_size", "[", "0", "]", "*", "conv", ".", "kernel_size", "[", "1", "]", "*", "out_h", "*", "out_w", "/", "layer", ".", "condense_factor", "*", "multi_add", "\n", "delta_params", "=", "get_layer_param", "(", "conv", ")", "/", "layer", ".", "condense_factor", "\n", "\n", "### ops_nonlinearity", "\n", "", "elif", "type_name", "in", "[", "'ReLU'", ",", "'ReLU6'", "]", ":", "\n", "            ", "delta_ops", "=", "x", ".", "numel", "(", ")", "\n", "delta_params", "=", "get_layer_param", "(", "layer", ")", "\n", "\n", "### ops_pooling", "\n", "", "elif", "type_name", "in", "[", "'AvgPool2d'", ",", "'MaxPool2d'", "]", ":", "\n", "            ", "in_w", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "kernel_ops", "=", "layer", ".", "kernel_size", "*", "layer", ".", "kernel_size", "\n", "out_w", "=", "int", "(", "(", "in_w", "+", "2", "*", "layer", ".", "padding", "-", "layer", ".", "kernel_size", ")", "/", "layer", ".", "stride", "+", "1", ")", "\n", "out_h", "=", "int", "(", "(", "in_w", "+", "2", "*", "layer", ".", "padding", "-", "layer", ".", "kernel_size", ")", "/", "layer", ".", "stride", "+", "1", ")", "\n", "delta_ops", "=", "x", ".", "size", "(", ")", "[", "0", "]", "*", "x", ".", "size", "(", ")", "[", "1", "]", "*", "out_w", "*", "out_h", "*", "kernel_ops", "\n", "delta_params", "=", "get_layer_param", "(", "layer", ")", "\n", "\n", "", "elif", "type_name", "in", "[", "'LastLevelMaxPool'", "]", ":", "\n", "            ", "pass", "\n", "\n", "", "elif", "type_name", "in", "[", "'AdaptiveAvgPool2d'", "]", ":", "\n", "            ", "delta_ops", "=", "x", ".", "size", "(", ")", "[", "0", "]", "*", "x", ".", "size", "(", ")", "[", "1", "]", "*", "x", ".", "size", "(", ")", "[", "2", "]", "*", "x", ".", "size", "(", ")", "[", "3", "]", "\n", "delta_params", "=", "get_layer_param", "(", "layer", ")", "\n", "\n", "", "elif", "type_name", "in", "[", "'ZeroPad2d'", ",", "'RetinaNetPostProcessor'", "]", ":", "\n", "            ", "pass", "\n", "#delta_ops = x.size()[0] * x.size()[1] * x.size()[2] * x.size()[3]", "\n", "#delta_params = get_layer_param(layer)", "\n", "\n", "### ops_linear", "\n", "", "elif", "type_name", "in", "[", "'Linear'", "]", ":", "\n", "            ", "weight_ops", "=", "layer", ".", "weight", ".", "numel", "(", ")", "*", "multi_add", "\n", "bias_ops", "=", "layer", ".", "bias", ".", "numel", "(", ")", "\n", "delta_ops", "=", "x", ".", "size", "(", ")", "[", "0", "]", "*", "(", "weight_ops", "+", "bias_ops", ")", "\n", "delta_params", "=", "get_layer_param", "(", "layer", ")", "\n", "\n", "### ops_nothing", "\n", "", "elif", "type_name", "in", "[", "'BatchNorm2d'", ",", "'Dropout2d'", ",", "'DropChannel'", ",", "'Dropout'", ",", "'FrozenBatchNorm2d'", ",", "'GroupNorm'", "]", ":", "\n", "            ", "delta_params", "=", "get_layer_param", "(", "layer", ")", "\n", "\n", "", "elif", "type_name", "in", "[", "'SumTwo'", "]", ":", "\n", "            ", "delta_ops", "=", "x", ".", "numel", "(", ")", "\n", "\n", "", "elif", "type_name", "in", "[", "'AggregateCell'", "]", ":", "\n", "            ", "if", "not", "layer", ".", "pre_transform", ":", "\n", "                ", "delta_ops", "=", "2", "*", "x", ".", "numel", "(", ")", "# twice for each input", "\n", "", "else", ":", "\n", "                ", "measure_layer", "(", "layer", ".", "branch_1", ",", "x", ")", "\n", "measure_layer", "(", "layer", ".", "branch_2", ",", "x", ")", "\n", "delta_params", "=", "get_layer_param", "(", "layer", ")", "\n", "\n", "", "", "elif", "type_name", "in", "[", "'Identity'", ",", "'Zero'", "]", ":", "\n", "            ", "pass", "\n", "\n", "", "elif", "type_name", "in", "[", "'Scale'", "]", ":", "\n", "            ", "delta_params", "=", "get_layer_param", "(", "layer", ")", "\n", "delta_ops", "=", "x", ".", "numel", "(", ")", "\n", "\n", "", "elif", "type_name", "in", "[", "'FCOSPostProcessor'", ",", "'RPNPostProcessor'", ",", "'KeypointPostProcessor'", ",", "\n", "'ROIAlign'", ",", "'PostProcessor'", ",", "'KeypointRCNNPredictor'", "]", ":", "\n", "            ", "pass", "\n", "\n", "", "elif", "type_name", "in", "[", "'DeformConv'", "]", ":", "\n", "# don't count bilinear", "\n", "            ", "offset_conv", "=", "list", "(", "layer", ".", "parameters", "(", ")", ")", "[", "0", "]", "\n", "delta_ops", "=", "reduce", "(", "operator", ".", "mul", ",", "offset_conv", ".", "size", "(", ")", ",", "x", ".", "size", "(", ")", "[", "2", "]", "*", "x", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "out_h", "=", "int", "(", "(", "x", ".", "size", "(", ")", "[", "2", "]", "+", "2", "*", "layer", ".", "padding", "[", "0", "]", "/", "layer", ".", "dilation", "[", "0", "]", "\n", "-", "layer", ".", "kernel_size", "[", "0", "]", ")", "/", "layer", ".", "stride", "[", "0", "]", "+", "1", ")", "\n", "out_w", "=", "int", "(", "(", "x", ".", "size", "(", ")", "[", "3", "]", "+", "2", "*", "layer", ".", "padding", "[", "1", "]", "/", "layer", ".", "dilation", "[", "1", "]", "\n", "-", "layer", ".", "kernel_size", "[", "1", "]", ")", "/", "layer", ".", "stride", "[", "1", "]", "+", "1", ")", "\n", "delta_ops", "+=", "layer", ".", "in_channels", "*", "layer", ".", "out_channels", "*", "layer", ".", "kernel_size", "[", "0", "]", "*", "layer", ".", "kernel_size", "[", "1", "]", "*", "out_h", "*", "out_w", "/", "layer", ".", "groups", "*", "multi_add", "\n", "delta_params", "=", "get_layer_param", "(", "layer", ")", "\n", "\n", "### unknown layer type", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'unknown layer type: %s'", "%", "type_name", ")", "\n", "\n", "", "count_ops", "+=", "delta_ops", "\n", "count_params", "+=", "delta_params", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.measure.measure_model": [[158, 194], ["print", "measure.measure_model.modify_forward"], "function", ["None"], ["", "def", "measure_model", "(", "model", ",", "x", ")", ":", "\n", "    ", "global", "count_ops", ",", "count_params", "\n", "print", "(", "'input size: '", ",", "x", ".", "image_sizes", ")", "\n", "count_ops", "=", "0", "\n", "count_params", "=", "0", "\n", "\n", "def", "should_measure", "(", "x", ")", ":", "\n", "        ", "return", "is_leaf", "(", "x", ")", "or", "is_pruned", "(", "x", ")", "\n", "\n", "", "def", "modify_forward", "(", "model", ")", ":", "\n", "        ", "for", "child", "in", "model", ".", "children", "(", ")", ":", "\n", "            ", "if", "should_measure", "(", "child", ")", ":", "\n", "                ", "def", "new_forward", "(", "m", ")", ":", "\n", "                    ", "def", "lambda_forward", "(", "*", "args", ")", ":", "\n", "                        ", "measure_layer", "(", "m", ",", "*", "args", ")", "\n", "return", "m", ".", "old_forward", "(", "*", "args", ")", "\n", "", "return", "lambda_forward", "\n", "", "child", ".", "old_forward", "=", "child", ".", "forward", "\n", "child", ".", "forward", "=", "new_forward", "(", "child", ")", "\n", "", "else", ":", "\n", "                ", "modify_forward", "(", "child", ")", "\n", "\n", "", "", "", "def", "restore_forward", "(", "model", ")", ":", "\n", "        ", "for", "child", "in", "model", ".", "children", "(", ")", ":", "\n", "# leaf node", "\n", "            ", "if", "is_leaf", "(", "child", ")", "and", "hasattr", "(", "child", ",", "'old_forward'", ")", ":", "\n", "                ", "child", ".", "forward", "=", "child", ".", "old_forward", "\n", "child", ".", "old_forward", "=", "None", "\n", "", "else", ":", "\n", "                ", "restore_forward", "(", "child", ")", "\n", "\n", "", "", "", "modify_forward", "(", "model", ")", "\n", "out", "=", "model", ".", "forward", "(", "x", ")", "\n", "restore_forward", "(", "model", ")", "\n", "\n", "return", "out", ",", "count_ops", ",", "count_params", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.Timer.__init__": [[9, 11], ["timer.Timer.reset"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.Timer.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.Timer.average_time": [[12, 15], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "average_time", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_time", "/", "self", ".", "calls", "if", "self", ".", "calls", ">", "0", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.Timer.tic": [[16, 20], ["time.time"], "methods", ["None"], ["", "def", "tic", "(", "self", ")", ":", "\n", "# using time.time instead of time.clock because time time.clock", "\n", "# does not normalize for multithreading", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.Timer.toc": [[21, 27], ["timer.Timer.add", "time.time"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.Timer.add"], ["", "def", "toc", "(", "self", ",", "average", "=", "True", ")", ":", "\n", "        ", "self", ".", "add", "(", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", ")", "\n", "if", "average", ":", "\n", "            ", "return", "self", ".", "average_time", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.Timer.add": [[28, 32], ["None"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "time_diff", ")", ":", "\n", "        ", "self", ".", "diff", "=", "time_diff", "\n", "self", ".", "total_time", "+=", "self", ".", "diff", "\n", "self", ".", "calls", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.Timer.reset": [[33, 38], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_time", "=", "0.0", "\n", "self", ".", "calls", "=", "0", "\n", "self", ".", "start_time", "=", "0.0", "\n", "self", ".", "diff", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.Timer.avg_time_str": [[39, 42], ["str", "datetime.timedelta"], "methods", ["None"], ["", "def", "avg_time_str", "(", "self", ")", ":", "\n", "        ", "time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "self", ".", "average_time", ")", ")", "\n", "return", "time_str", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.get_time_str": [[44, 47], ["str", "datetime.timedelta"], "function", ["None"], ["", "", "def", "get_time_str", "(", "time_diff", ")", ":", "\n", "    ", "time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "time_diff", ")", ")", "\n", "return", "time_str", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.logger.setup_logger": [[7, 26], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join"], "function", ["None"], ["def", "setup_logger", "(", "name", ",", "save_dir", ",", "distributed_rank", ",", "filename", "=", "\"log.txt\"", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# don't log results for the non-master process", "\n", "if", "distributed_rank", ">", "0", ":", "\n", "        ", "return", "logger", "\n", "", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(name)s %(levelname)s: %(message)s\"", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "save_dir", ":", "\n", "        ", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "filename", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.__init__": [[31, 33], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Registry", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register": [[34, 46], ["registry._register_generic", "registry._register_generic"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry._register_generic", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry._register_generic"], ["", "def", "register", "(", "self", ",", "module_name", ",", "module", "=", "None", ")", ":", "\n", "# used as function call", "\n", "        ", "if", "module", "is", "not", "None", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "module", ")", "\n", "return", "\n", "\n", "# used as decorator", "\n", "", "def", "register_fn", "(", "fn", ")", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "fn", ")", "\n", "return", "fn", "\n", "\n", "", "return", "register_fn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry._register_generic": [[4, 7], ["None"], "function", ["None"], ["def", "_register_generic", "(", "module_dict", ",", "module_name", ",", "module", ")", ":", "\n", "    ", "assert", "module_name", "not", "in", "module_dict", "\n", "module_dict", "[", "module_name", "]", "=", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.cv2_util.findContours": [[8, 25], ["cv2.__version__.startswith", "cv2.findContours", "cv2.__version__.startswith", "cv2.findContours", "AssertionError"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.cv2_util.findContours", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.cv2_util.findContours"], ["def", "findContours", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Wraps cv2.findContours to maintain compatiblity between versions\n    3 and 4\n\n    Returns:\n        contours, hierarchy\n    \"\"\"", "\n", "if", "cv2", ".", "__version__", ".", "startswith", "(", "'4'", ")", ":", "\n", "        ", "contours", ",", "hierarchy", "=", "cv2", ".", "findContours", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "cv2", ".", "__version__", ".", "startswith", "(", "'3'", ")", ":", "\n", "        ", "_", ",", "contours", ",", "hierarchy", "=", "cv2", ".", "findContours", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "AssertionError", "(", "\n", "'cv2 must be either version 3 or 4 to call this method'", ")", "\n", "\n", "", "return", "contours", ",", "hierarchy", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.model_zoo.cache_url": [[20, 62], ["urlparse", "os.path.basename", "os.path.join", "maskrcnn_benchmark.utils.comm.synchronize", "os.path.expanduser", "os.getenv", "os.path.exists", "os.makedirs", "urlparse.path.replace", "maskrcnn_benchmark.utils.comm.is_main_process", "sys.stderr.write", "HASH_REGEX.search", "_download_url_to_file", "os.getenv", "os.path.join", "os.path.exists", "hash_prefix.group.group", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.synchronize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.is_main_process", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["def", "cache_url", "(", "url", ",", "model_dir", "=", "None", ",", "progress", "=", "True", ")", ":", "\n", "    ", "r\"\"\"Loads the Torch serialized object at the given URL.\n    If the object is already present in `model_dir`, it's deserialized and\n    returned. The filename part of the URL should follow the naming convention\n    ``filename-<sha256>.ext`` where ``<sha256>`` is the first eight or more\n    digits of the SHA256 hash of the contents of the file. The hash is used to\n    ensure unique names and to verify the contents of the file.\n    The default value of `model_dir` is ``$TORCH_HOME/models`` where\n    ``$TORCH_HOME`` defaults to ``~/.torch``. The default directory can be\n    overridden with the ``$TORCH_MODEL_ZOO`` environment variable.\n    Args:\n        url (string): URL of the object to download\n        model_dir (string, optional): directory in which to save the object\n        progress (bool, optional): whether or not to display a progress bar to stderr\n    Example:\n        >>> cached_file = maskrcnn_benchmark.utils.model_zoo.cache_url('https://s3.amazonaws.com/pytorch/models/resnet18-5c106cde.pth')\n    \"\"\"", "\n", "if", "model_dir", "is", "None", ":", "\n", "        ", "torch_home", "=", "os", ".", "path", ".", "expanduser", "(", "os", ".", "getenv", "(", "\"TORCH_HOME\"", ",", "\"~/.torch\"", ")", ")", "\n", "model_dir", "=", "os", ".", "getenv", "(", "\"TORCH_MODEL_ZOO\"", ",", "os", ".", "path", ".", "join", "(", "torch_home", ",", "\"models\"", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "model_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "model_dir", ")", "\n", "", "parts", "=", "urlparse", "(", "url", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "parts", ".", "path", ")", "\n", "if", "filename", "==", "\"model_final.pkl\"", ":", "\n", "# workaround as pre-trained Caffe2 models from Detectron have all the same filename", "\n", "# so make the full path the filename by replacing / with _", "\n", "        ", "filename", "=", "parts", ".", "path", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "\n", "", "cached_file", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cached_file", ")", "and", "is_main_process", "(", ")", ":", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "'Downloading: \"{}\" to {}\\n'", ".", "format", "(", "url", ",", "cached_file", ")", ")", "\n", "hash_prefix", "=", "HASH_REGEX", ".", "search", "(", "filename", ")", "\n", "if", "hash_prefix", "is", "not", "None", ":", "\n", "            ", "hash_prefix", "=", "hash_prefix", ".", "group", "(", "1", ")", "\n", "# workaround: Caffe2 models don't have a hash, but follow the R-50 convention,", "\n", "# which matches the hash PyTorch uses. So we skip the hash matching", "\n", "# if the hash_prefix is less than 6 characters", "\n", "if", "len", "(", "hash_prefix", ")", "<", "6", ":", "\n", "                ", "hash_prefix", "=", "None", "\n", "", "", "_download_url_to_file", "(", "url", ",", "cached_file", ",", "hash_prefix", ",", "progress", "=", "progress", ")", "\n", "", "synchronize", "(", ")", "\n", "return", "cached_file", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.metric_logger.SmoothedValue.__init__": [[13, 18], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ")", ":", "\n", "        ", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "series", "=", "[", "]", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.metric_logger.SmoothedValue.update": [[19, 24], ["metric_logger.SmoothedValue.deque.append", "metric_logger.SmoothedValue.series.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "series", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "total", "+=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.metric_logger.SmoothedValue.median": [[25, 29], ["torch.tensor", "torch.tensor.median().item", "list", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.metric_logger.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.metric_logger.SmoothedValue.avg": [[30, 34], ["torch.tensor", "torch.tensor.mean().item", "list", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.metric_logger.SmoothedValue.global_avg": [[35, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.metric_logger.MetricLogger.__init__": [[41, 44], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.metric_logger.MetricLogger.update": [[45, 51], ["kwargs.items", "isinstance", "isinstance", "metric_logger.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.metric_logger.MetricLogger.__getattr__": [[52, 59], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.metric_logger.MetricLogger.__str__": [[60, 67], ["metric_logger.MetricLogger.meters.items", "metric_logger.MetricLogger.delimiter.join", "loss_str.append"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {:.4f} ({:.4f})\"", ".", "format", "(", "name", ",", "meter", ".", "median", ",", "meter", ".", "global_avg", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.c2_model_loading._rename_basic_resnet_weights": [[12, 63], ["k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace"], "function", ["None"], ["def", "_rename_basic_resnet_weights", "(", "layer_keys", ")", ":", "\n", "    ", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"_\"", ",", "\".\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".w\"", ",", "\".weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".bn\"", ",", "\"_bn\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".b\"", ",", "\".bias\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"_bn.s\"", ",", "\"_bn.scale\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".biasranch\"", ",", "\".branch\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"bbox.pred\"", ",", "\"bbox_pred\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"cls.score\"", ",", "\"cls_score\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res.conv1_\"", ",", "\"conv1_\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# RPN / Faster RCNN", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".biasbox\"", ",", "\".bbox\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv.rpn\"", ",", "\"rpn.conv\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.bbox.pred\"", ",", "\"rpn.bbox_pred\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.cls.logits\"", ",", "\"rpn.cls_logits\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# Affine-Channel -> BatchNorm enaming", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"_bn.scale\"", ",", "\"_bn.weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# Make torchvision-compatible", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv1_bn.\"", ",", "\"bn1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res2.\"", ",", "\"layer1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res3.\"", ",", "\"layer2.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res4.\"", ",", "\"layer3.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res5.\"", ",", "\"layer4.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2a.\"", ",", "\".conv1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2a_bn.\"", ",", "\".bn1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2b.\"", ",", "\".conv2.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2b_bn.\"", ",", "\".bn2.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2c.\"", ",", "\".conv3.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2c_bn.\"", ",", "\".bn3.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch1.\"", ",", "\".downsample.0.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch1_bn.\"", ",", "\".downsample.1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# GroupNorm", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv1.gn.s\"", ",", "\"bn1.weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv1.gn.bias\"", ",", "\"bn1.bias\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv2.gn.s\"", ",", "\"bn2.weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv2.gn.bias\"", ",", "\"bn2.bias\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv3.gn.s\"", ",", "\"bn3.weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv3.gn.bias\"", ",", "\"bn3.bias\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"downsample.0.gn.s\"", ",", "\"downsample.1.weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"downsample.0.gn.bias\"", ",", "\"downsample.1.bias\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "return", "layer_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.c2_model_loading._rename_fpn_weights": [[64, 82], ["enumerate", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace"], "function", ["None"], ["", "def", "_rename_fpn_weights", "(", "layer_keys", ",", "stage_names", ")", ":", "\n", "    ", "for", "mapped_idx", ",", "stage_name", "in", "enumerate", "(", "stage_names", ",", "1", ")", ":", "\n", "        ", "suffix", "=", "\"\"", "\n", "if", "mapped_idx", "<", "4", ":", "\n", "            ", "suffix", "=", "\".lateral\"", "\n", "", "layer_keys", "=", "[", "\n", "k", ".", "replace", "(", "\"fpn.inner.layer{}.sum{}\"", ".", "format", "(", "stage_name", ",", "suffix", ")", ",", "\"fpn_inner{}\"", ".", "format", "(", "mapped_idx", ")", ")", "for", "k", "in", "layer_keys", "\n", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"fpn.layer{}.sum\"", ".", "format", "(", "stage_name", ")", ",", "\"fpn_layer{}\"", ".", "format", "(", "mapped_idx", ")", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "\n", "", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.conv.fpn2\"", ",", "\"rpn.conv\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.bbox_pred.fpn2\"", ",", "\"rpn.bbox_pred\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "\n", "k", ".", "replace", "(", "\"rpn.cls_logits.fpn2\"", ",", "\"rpn.cls_logits\"", ")", "for", "k", "in", "layer_keys", "\n", "]", "\n", "\n", "return", "layer_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.c2_model_loading._rename_weights_for_resnet": [[84, 131], ["sorted", "sorted", "c2_model_loading._rename_basic_resnet_weights", "c2_model_loading._rename_fpn_weights", "logging.getLogger", "logging.getLogger.info", "max", "collections.OrderedDict", "weights.keys", "weights.keys", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "torch.from_numpy", "logging.getLogger.info", "zip", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.c2_model_loading._rename_basic_resnet_weights", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.c2_model_loading._rename_fpn_weights", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "_rename_weights_for_resnet", "(", "weights", ",", "stage_names", ")", ":", "\n", "    ", "original_keys", "=", "sorted", "(", "weights", ".", "keys", "(", ")", ")", "\n", "layer_keys", "=", "sorted", "(", "weights", ".", "keys", "(", ")", ")", "\n", "\n", "# for X-101, rename output to fc1000 to avoid conflicts afterwards", "\n", "layer_keys", "=", "[", "k", "if", "k", "!=", "\"pred_b\"", "else", "\"fc1000_b\"", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", "if", "k", "!=", "\"pred_w\"", "else", "\"fc1000_w\"", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# performs basic renaming: _ -> . , etc", "\n", "layer_keys", "=", "_rename_basic_resnet_weights", "(", "layer_keys", ")", "\n", "\n", "# FPN", "\n", "layer_keys", "=", "_rename_fpn_weights", "(", "layer_keys", ",", "stage_names", ")", "\n", "\n", "# Mask R-CNN", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"mask.fcn.logits\"", ",", "\"mask_fcn_logits\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".[mask].fcn\"", ",", "\"mask_fcn\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv5.mask\"", ",", "\"conv5_mask\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# Keypoint R-CNN", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"kps.score.lowres\"", ",", "\"kps_score_lowres\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"kps.score\"", ",", "\"kps_score\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv.fcn\"", ",", "\"conv_fcn\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# Rename for our RPN structure", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.\"", ",", "\"rpn.head.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "key_map", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "original_keys", ",", "layer_keys", ")", "}", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "info", "(", "\"Remapping C2 weights\"", ")", "\n", "max_c2_key_size", "=", "max", "(", "[", "len", "(", "k", ")", "for", "k", "in", "original_keys", "if", "\"_momentum\"", "not", "in", "k", "]", ")", "\n", "\n", "new_weights", "=", "OrderedDict", "(", ")", "\n", "for", "k", "in", "original_keys", ":", "\n", "        ", "v", "=", "weights", "[", "k", "]", "\n", "if", "\"_momentum\"", "in", "k", ":", "\n", "            ", "continue", "\n", "# if 'fc1000' in k:", "\n", "#     continue", "\n", "", "w", "=", "torch", ".", "from_numpy", "(", "v", ")", "\n", "# if \"bn\" in k:", "\n", "#     w = w.view(1, -1, 1, 1)", "\n", "logger", ".", "info", "(", "\"C2 name: {: <{}} mapped name: {}\"", ".", "format", "(", "k", ",", "max_c2_key_size", ",", "key_map", "[", "k", "]", ")", ")", "\n", "new_weights", "[", "key_map", "[", "k", "]", "]", "=", "w", "\n", "\n", "", "return", "new_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.c2_model_loading._load_c2_pickled_weights": [[133, 144], ["open", "pickle.load", "pickle.load"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.load"], ["", "def", "_load_c2_pickled_weights", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "if", "torch", ".", "_six", ".", "PY3", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "\"latin1\"", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "if", "\"blobs\"", "in", "data", ":", "\n", "        ", "weights", "=", "data", "[", "\"blobs\"", "]", "\n", "", "else", ":", "\n", "        ", "weights", "=", "data", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.c2_model_loading._rename_conv_weights_for_deformable_conv_layers": [[146, 171], ["logging.getLogger", "logging.getLogger.info", "sorted", "enumerate", "state_dict.keys", "re.match", "old_key.replace", "logging.getLogger.info", "old_key.find"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info"], ["", "def", "_rename_conv_weights_for_deformable_conv_layers", "(", "state_dict", ",", "cfg", ")", ":", "\n", "    ", "import", "re", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "info", "(", "\"Remapping conv weights for deformable conv weights\"", ")", "\n", "layer_keys", "=", "sorted", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "for", "ix", ",", "stage_with_dcn", "in", "enumerate", "(", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STAGE_WITH_DCN", ",", "1", ")", ":", "\n", "        ", "if", "not", "stage_with_dcn", ":", "\n", "            ", "continue", "\n", "", "for", "old_key", "in", "layer_keys", ":", "\n", "            ", "pattern", "=", "\".*layer{}.*conv2.*\"", ".", "format", "(", "ix", ")", "\n", "r", "=", "re", ".", "match", "(", "pattern", ",", "old_key", ")", "\n", "if", "r", "is", "None", ":", "\n", "                ", "continue", "\n", "", "for", "param", "in", "[", "\"weight\"", ",", "\"bias\"", "]", ":", "\n", "                ", "if", "old_key", ".", "find", "(", "param", ")", "is", "-", "1", ":", "\n", "                    ", "continue", "\n", "", "new_key", "=", "old_key", ".", "replace", "(", "\n", "\"conv2.{}\"", ".", "format", "(", "param", ")", ",", "\"conv2.conv.{}\"", ".", "format", "(", "param", ")", "\n", ")", "\n", "logger", ".", "info", "(", "\"pattern: {}, old_key: {}, new_key: {}\"", ".", "format", "(", "\n", "pattern", ",", "old_key", ",", "new_key", "\n", ")", ")", "\n", "state_dict", "[", "new_key", "]", "=", "state_dict", "[", "old_key", "]", "\n", "del", "state_dict", "[", "old_key", "]", "\n", "", "", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.c2_model_loading.load_resnet_c2_format": [[182, 206], ["C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "c2_model_loading._load_c2_pickled_weights", "conv_body.replace().replace().replace", "arch.replace().replace.replace().replace", "c2_model_loading._rename_weights_for_resnet", "c2_model_loading._rename_conv_weights_for_deformable_conv_layers", "dict", "conv_body.replace().replace", "arch.replace().replace.replace", "conv_body.replace"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.c2_model_loading._load_c2_pickled_weights", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.c2_model_loading._rename_weights_for_resnet", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.c2_model_loading._rename_conv_weights_for_deformable_conv_layers"], ["@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-50\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-50-C4\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-50-C5\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-101-C4\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-101-C5\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-50-FPN\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-50-FPN-RETINANET\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-101-FPN\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-101-PAN\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-101-FPN-RETINANET\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-152-FPN\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-152-PAN\"", ")", "\n", "def", "load_resnet_c2_format", "(", "cfg", ",", "f", ")", ":", "\n", "    ", "state_dict", "=", "_load_c2_pickled_weights", "(", "f", ")", "\n", "conv_body", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "\n", "arch", "=", "conv_body", ".", "replace", "(", "\"-C4\"", ",", "\"\"", ")", ".", "replace", "(", "\"-C5\"", ",", "\"\"", ")", ".", "replace", "(", "\"-FPN\"", ",", "\"\"", ")", "\n", "arch", "=", "arch", ".", "replace", "(", "\"-RETINANET\"", ",", "\"\"", ")", ".", "replace", "(", "\"-PAN\"", ",", "\"\"", ")", "\n", "stages", "=", "_C2_STAGE_NAMES", "[", "arch", "]", "\n", "state_dict", "=", "_rename_weights_for_resnet", "(", "state_dict", ",", "stages", ")", "\n", "# ***********************************", "\n", "# for deformable convolutional layer", "\n", "state_dict", "=", "_rename_conv_weights_for_deformable_conv_layers", "(", "state_dict", ",", "cfg", ")", "\n", "# ***********************************", "\n", "return", "dict", "(", "model", "=", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.c2_model_loading.load_c2_format": [[208, 210], ["None"], "function", ["None"], ["", "def", "load_c2_format", "(", "cfg", ",", "f", ")", ":", "\n", "    ", "return", "C2_FORMAT_LOADER", "[", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "]", "(", "cfg", ",", "f", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.collect_env.get_pil_version": [[7, 9], ["None"], "function", ["None"], ["def", "get_pil_version", "(", ")", ":", "\n", "    ", "return", "\"\\n        Pillow ({})\"", ".", "format", "(", "PIL", ".", "__version__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.collect_env.collect_env_info": [[11, 15], ["torch.utils.collect_env.get_pretty_env_info", "collect_env.get_pil_version"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.collect_env.get_pil_version"], ["", "def", "collect_env_info", "(", ")", ":", "\n", "    ", "env_str", "=", "get_pretty_env_info", "(", ")", "\n", "env_str", "+=", "get_pil_version", "(", ")", "\n", "return", "env_str", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.__init__": [[14, 31], ["logging.getLogger"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "optimizer", "=", "None", ",", "\n", "scheduler", "=", "None", ",", "\n", "save_dir", "=", "\"\"", ",", "\n", "save_to_disk", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "save_dir", "=", "save_dir", "\n", "self", ".", "save_to_disk", "=", "save_to_disk", "\n", "if", "logger", "is", "None", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.save": [[32, 51], ["checkpoint.Checkpointer.model.state_dict", "data.update", "os.path.join", "checkpoint.Checkpointer.logger.info", "torch.save", "checkpoint.Checkpointer.tag_last_checkpoint", "checkpoint.Checkpointer.optimizer.state_dict", "checkpoint.Checkpointer.scheduler.state_dict"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.OptimizerDict.state_dict", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.save", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.tag_last_checkpoint", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.OptimizerDict.state_dict", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.OptimizerDict.state_dict"], ["", "def", "save", "(", "self", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "save_dir", ":", "\n", "            ", "return", "\n", "\n", "", "if", "not", "self", ".", "save_to_disk", ":", "\n", "            ", "return", "\n", "\n", "", "data", "=", "{", "}", "\n", "data", "[", "\"model\"", "]", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "if", "self", ".", "optimizer", "is", "not", "None", ":", "\n", "            ", "data", "[", "\"optimizer\"", "]", "=", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "", "if", "self", ".", "scheduler", "is", "not", "None", ":", "\n", "            ", "data", "[", "\"scheduler\"", "]", "=", "self", ".", "scheduler", ".", "state_dict", "(", ")", "\n", "", "data", ".", "update", "(", "kwargs", ")", "\n", "\n", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"{}.pth\"", ".", "format", "(", "name", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving checkpoint to {}\"", ".", "format", "(", "save_file", ")", ")", "\n", "torch", ".", "save", "(", "data", ",", "save_file", ")", "\n", "self", ".", "tag_last_checkpoint", "(", "save_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.load": [[52, 73], ["checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer._load_file", "checkpoint.Checkpointer.Checkpointer._load_model", "checkpoint.Checkpointer.Checkpointer.has_checkpoint", "checkpoint.Checkpointer.Checkpointer.get_checkpoint_file", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.optimizer.load_state_dict", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.scheduler.load_state_dict", "checkpoint.Checkpointer.Checkpointer.pop", "checkpoint.Checkpointer.Checkpointer.pop"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.DetectronCheckpointer._load_file", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer._load_model", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.has_checkpoint", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.get_checkpoint_file", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.OptimizerDict.load_state_dict", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.OptimizerDict.load_state_dict"], ["", "def", "load", "(", "self", ",", "f", "=", "None", ",", "use_latest", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "has_checkpoint", "(", ")", "and", "use_latest", ":", "\n", "# override argument with existing checkpoint", "\n", "            ", "f", "=", "self", ".", "get_checkpoint_file", "(", ")", "\n", "", "if", "not", "f", ":", "\n", "# no checkpoint could be found", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"No checkpoint found. Initializing model from scratch\"", ")", "\n", "return", "{", "}", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Loading checkpoint from {}\"", ".", "format", "(", "f", ")", ")", "\n", "# print(f)", "\n", "checkpoint", "=", "self", ".", "_load_file", "(", "f", ")", "\n", "self", ".", "_load_model", "(", "checkpoint", ")", "\n", "if", "\"optimizer\"", "in", "checkpoint", "and", "self", ".", "optimizer", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Loading optimizer from {}\"", ".", "format", "(", "f", ")", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "\"optimizer\"", ")", ")", "\n", "", "if", "\"scheduler\"", "in", "checkpoint", "and", "self", ".", "scheduler", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Loading scheduler from {}\"", ".", "format", "(", "f", ")", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "\"scheduler\"", ")", ")", "\n", "\n", "# return any further checkpoint data", "\n", "", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.has_checkpoint": [[74, 77], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "has_checkpoint", "(", "self", ")", ":", "\n", "        ", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"last_checkpoint\"", ")", "\n", "return", "os", ".", "path", ".", "exists", "(", "save_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.get_checkpoint_file": [[78, 89], ["os.path.join", "open", "f.read", "last_saved.strip.strip.strip"], "methods", ["None"], ["", "def", "get_checkpoint_file", "(", "self", ")", ":", "\n", "        ", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"last_checkpoint\"", ")", "\n", "try", ":", "\n", "            ", "with", "open", "(", "save_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "last_saved", "=", "f", ".", "read", "(", ")", "\n", "last_saved", "=", "last_saved", ".", "strip", "(", ")", "\n", "", "", "except", "IOError", ":", "\n", "# if file doesn't exist, maybe because it has just been", "\n", "# deleted by a separate process", "\n", "            ", "last_saved", "=", "\"\"", "\n", "", "return", "last_saved", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.tag_last_checkpoint": [[90, 94], ["os.path.join", "open", "f.write"], "methods", ["None"], ["", "def", "tag_last_checkpoint", "(", "self", ",", "last_filename", ")", ":", "\n", "        ", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"last_checkpoint\"", ")", "\n", "with", "open", "(", "save_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "last_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer._load_file": [[95, 97], ["torch.load", "torch.device"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.load"], ["", "", "def", "_load_file", "(", "self", ",", "f", ")", ":", "\n", "        ", "return", "torch", ".", "load", "(", "f", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer._load_model": [[98, 100], ["maskrcnn_benchmark.utils.model_serialization.load_state_dict", "checkpoint.pop"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.OptimizerDict.load_state_dict"], ["", "def", "_load_model", "(", "self", ",", "checkpoint", ")", ":", "\n", "        ", "load_state_dict", "(", "self", ".", "model", ",", "checkpoint", ".", "pop", "(", "\"model\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.DetectronCheckpointer.__init__": [[103, 117], ["checkpoint.Checkpointer.__init__", "cfg.clone"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "cfg", ",", "\n", "model", ",", "\n", "optimizer", "=", "None", ",", "\n", "scheduler", "=", "None", ",", "\n", "save_dir", "=", "\"\"", ",", "\n", "save_to_disk", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "DetectronCheckpointer", ",", "self", ")", ".", "__init__", "(", "\n", "model", ",", "optimizer", ",", "scheduler", ",", "save_dir", ",", "save_to_disk", ",", "logger", "\n", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.DetectronCheckpointer._load_file": [[118, 141], ["f.startswith", "f.startswith", "f.endswith", "checkpoint.Checkpointer._load_file", "maskrcnn_benchmark.utils.imports.import_file", "maskrcnn_benchmark.utils.imports.import_file.ModelCatalog.get", "checkpoint.DetectronCheckpointer.logger.info", "maskrcnn_benchmark.utils.model_zoo.cache_url", "checkpoint.DetectronCheckpointer.logger.info", "maskrcnn_benchmark.utils.c2_model_loading.load_c2_format", "dict", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.DetectronCheckpointer._load_file", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.model_zoo.cache_url", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.c2_model_loading.load_c2_format", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "_load_file", "(", "self", ",", "f", ")", ":", "\n", "# catalog lookup", "\n", "        ", "if", "f", ".", "startswith", "(", "\"catalog://\"", ")", ":", "\n", "            ", "paths_catalog", "=", "import_file", "(", "\n", "\"maskrcnn_benchmark.config.paths_catalog\"", ",", "self", ".", "cfg", ".", "PATHS_CATALOG", ",", "True", "\n", ")", "\n", "catalog_f", "=", "paths_catalog", ".", "ModelCatalog", ".", "get", "(", "f", "[", "len", "(", "\"catalog://\"", ")", ":", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"{} points to {}\"", ".", "format", "(", "f", ",", "catalog_f", ")", ")", "\n", "f", "=", "catalog_f", "\n", "# download url files", "\n", "", "if", "f", ".", "startswith", "(", "\"http\"", ")", ":", "\n", "# if the file is a url path, download it and cache it", "\n", "            ", "cached_f", "=", "cache_url", "(", "f", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"url {} cached in {}\"", ".", "format", "(", "f", ",", "cached_f", ")", ")", "\n", "f", "=", "cached_f", "\n", "# convert Caffe2 checkpoint from pkl", "\n", "", "if", "f", ".", "endswith", "(", "\".pkl\"", ")", ":", "\n", "            ", "return", "load_c2_format", "(", "self", ".", "cfg", ",", "f", ")", "\n", "# load native detectron.pytorch checkpoint", "\n", "", "loaded", "=", "super", "(", "DetectronCheckpointer", ",", "self", ")", ".", "_load_file", "(", "f", ")", "\n", "if", "\"model\"", "not", "in", "loaded", ":", "\n", "            ", "loaded", "=", "dict", "(", "model", "=", "loaded", ")", "\n", "", "return", "loaded", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.env.setup_environment": [[7, 18], ["os.environ.get", "env.setup_custom_environment"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.env.setup_custom_environment"], ["def", "setup_environment", "(", ")", ":", "\n", "    ", "\"\"\"Perform environment setup work. The default setup is a no-op, but this\n    function allows the user to specify a Python source file that performs\n    custom setup work that may be necessary to their computing environment.\n    \"\"\"", "\n", "custom_module_path", "=", "os", ".", "environ", ".", "get", "(", "\"TORCH_DETECTRON_ENV_MODULE\"", ")", "\n", "if", "custom_module_path", ":", "\n", "        ", "setup_custom_environment", "(", "custom_module_path", ")", "\n", "", "else", ":", "\n", "# The default setup is a no-op", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.env.setup_custom_environment": [[20, 34], ["maskrcnn_benchmark.utils.imports.import_file", "maskrcnn_benchmark.utils.imports.import_file.setup_environment", "hasattr", "callable"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.env.setup_environment"], ["", "", "def", "setup_custom_environment", "(", "custom_module_path", ")", ":", "\n", "    ", "\"\"\"Load custom environment setup from a Python source file and run the setup\n    function.\n    \"\"\"", "\n", "module", "=", "import_file", "(", "\"maskrcnn_benchmark.utils.env.custom_module\"", ",", "custom_module_path", ")", "\n", "assert", "hasattr", "(", "module", ",", "\"setup_environment\"", ")", "and", "callable", "(", "\n", "module", ".", "setup_environment", "\n", ")", ",", "(", "\n", "\"Custom environment module defined in {} does not have the \"", "\n", "\"required callable attribute 'setup_environment'.\"", "\n", ")", ".", "format", "(", "\n", "custom_module_path", "\n", ")", "\n", "module", ".", "setup_environment", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.__init__": [[9, 18], ["zip", "enumerate", "text_util.TextGenerator.func.extend", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["    ", "def", "__init__", "(", "self", ",", "ratios", "=", "[", "1", ",", "1", ",", "1", ",", "5", "]", ",", "chars", "=", "'abcdefghijklmnopqrstuvwxyz0123456789'", ")", ":", "\n", "        ", "self", ".", "func", "=", "[", "]", "\n", "for", "ratio", ",", "func", "in", "zip", "(", "ratios", ",", "[", "self", ".", "_insert", ",", "self", ".", "_delete", ",", "self", ".", "_change", ",", "self", ".", "_keep", "]", ")", ":", "\n", "            ", "self", ".", "func", ".", "extend", "(", "[", "func", "]", "*", "ratio", ")", "\n", "", "self", ".", "chars", "=", "chars", "\n", "self", ".", "char_to_label_map", "=", "{", "}", "\n", "self", ".", "is_chinese", "=", "len", "(", "self", ".", "chars", ")", ">", "1000", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "chars", ")", ":", "\n", "            ", "self", ".", "char_to_label_map", "[", "c", "]", "=", "i", "\n", "", "", "def", "__call__", "(", "self", ",", "word", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.__call__": [[18, 25], ["len", "random.choice"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "def", "__call__", "(", "self", ",", "word", ")", ":", "\n", "        ", "idx", "=", "0", "\n", "new_word", "=", "word", "\n", "while", "idx", "<", "len", "(", "new_word", ")", ":", "\n", "            ", "new_word", "=", "random", ".", "choice", "(", "self", ".", "func", ")", "(", "new_word", ",", "idx", ")", "\n", "idx", "+=", "1", "\n", "", "return", "new_word", "\n", "", "def", "label_map", "(", "self", ",", "word", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.label_map": [[25, 32], ["char.lower"], "methods", ["None"], ["", "def", "label_map", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "self", ".", "is_chinese", ":", "\n", "            ", "result", "=", "[", "self", ".", "char_to_label_map", "[", "char", "]", "for", "char", "in", "word", "if", "char", "in", "self", ".", "chars", "]", "\n", "# print(word,result)", "\n", "return", "result", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "char_to_label_map", "[", "char", "]", "for", "char", "in", "word", "if", "char", ".", "lower", "(", ")", "in", "self", ".", "chars", "]", "\n", "", "", "def", "label_map_with_padding", "(", "self", ",", "word", ",", "max_len", "=", "15", ",", "padding", "=", "0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.label_map_with_padding": [[32, 47], ["enumerate", "enumerate", "char.lower.lower.lower"], "methods", ["None"], ["", "", "def", "label_map_with_padding", "(", "self", ",", "word", ",", "max_len", "=", "15", ",", "padding", "=", "0", ")", ":", "\n", "        ", "labels", "=", "[", "padding", "]", "*", "max_len", "\n", "if", "self", ".", "is_chinese", ":", "\n", "            ", "for", "i", ",", "char", "in", "enumerate", "(", "word", ")", ":", "\n", "                ", "if", "char", "in", "self", ".", "chars", ":", "\n", "                    ", "labels", "[", "i", "]", "=", "self", ".", "char_to_label_map", "[", "char", "]", "\n", "# result = [self.char_to_label_map[char] for char in word if char in self.chars]", "\n", "# print(word,result)", "\n", "", "", "return", "labels", "\n", "", "else", ":", "\n", "            ", "for", "i", ",", "char", "in", "enumerate", "(", "word", ")", ":", "\n", "                ", "char", "=", "char", ".", "lower", "(", ")", "\n", "if", "char", "in", "self", ".", "chars", ":", "\n", "                    ", "labels", "[", "i", "]", "=", "self", ".", "char_to_label_map", "[", "char", "]", "\n", "", "", "return", "labels", "\n", "", "", "def", "_insert", "(", "self", ",", "word", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator._insert": [[47, 50], ["len", "random.choice"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "def", "_insert", "(", "self", ",", "word", ",", "idx", ")", ":", "\n", "        ", "assert", "idx", "<", "len", "(", "word", ")", "\n", "return", "word", "[", ":", "idx", "]", "+", "random", ".", "choice", "(", "self", ".", "chars", ")", "+", "word", "[", "idx", ":", "]", "\n", "", "def", "_delete", "(", "self", ",", "word", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator._delete": [[50, 53], ["len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "_delete", "(", "self", ",", "word", ",", "idx", ")", ":", "\n", "        ", "assert", "idx", "<", "len", "(", "word", ")", "\n", "return", "word", "[", ":", "idx", "]", "+", "word", "[", "idx", "+", "1", ":", "]", "\n", "", "def", "_change", "(", "self", ",", "word", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator._change": [[53, 56], ["len", "random.choice"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "_change", "(", "self", ",", "word", ",", "idx", ")", ":", "\n", "        ", "assert", "idx", "<", "len", "(", "word", ")", "\n", "return", "word", "[", ":", "idx", "]", "+", "random", ".", "choice", "(", "self", ".", "chars", ")", "+", "word", "[", "idx", "+", "1", ":", "]", "\n", "", "def", "_keep", "(", "self", ",", "word", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator._keep": [[56, 58], ["None"], "methods", ["None"], ["", "def", "_keep", "(", "self", ",", "word", ",", "idx", ")", ":", "\n", "        ", "return", "word", "\n", "", "def", "similarity_on_pair", "(", "self", ",", "a", ",", "b", ",", "dis", "=", "0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.similarity_on_pair": [[58, 78], ["len", "len", "range", "range", "range", "range", "range", "range", "min", "max"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "similarity_on_pair", "(", "self", ",", "a", ",", "b", ",", "dis", "=", "0", ")", ":", "\n", "        ", "a_len", "=", "len", "(", "a", ")", "\n", "b_len", "=", "len", "(", "b", ")", "\n", "op", "=", "[", "[", "0", "]", "*", "(", "b_len", "+", "1", ")", "for", "i", "in", "range", "(", "a_len", "+", "1", ")", "]", "\n", "si", "=", "[", "[", "0", "]", "*", "(", "b_len", "+", "1", ")", "for", "i", "in", "range", "(", "a_len", "+", "1", ")", "]", "\n", "for", "i", "in", "range", "(", "b_len", "+", "1", ")", ":", "\n", "            ", "op", "[", "0", "]", "[", "i", "]", "=", "i", "\n", "si", "[", "0", "]", "[", "i", "]", "=", "0", "\n", "", "for", "i", "in", "range", "(", "a_len", "+", "1", ")", ":", "\n", "            ", "op", "[", "i", "]", "[", "0", "]", "=", "i", "\n", "si", "[", "i", "]", "[", "0", "]", "=", "0", "\n", "", "for", "i", "in", "range", "(", "1", ",", "a_len", "+", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "b_len", "+", "1", ")", ":", "\n", "                ", "if", "a", "[", "i", "-", "1", "]", "==", "b", "[", "j", "-", "1", "]", ":", "\n", "                    ", "op", "[", "i", "]", "[", "j", "]", "=", "op", "[", "i", "-", "1", "]", "[", "j", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "op", "[", "i", "]", "[", "j", "]", "=", "min", "(", "[", "op", "[", "i", "-", "1", "]", "[", "j", "]", ",", "op", "[", "i", "]", "[", "j", "-", "1", "]", ",", "op", "[", "i", "-", "1", "]", "[", "j", "-", "1", "]", "]", ")", "+", "1", "\n", "", "si", "[", "i", "]", "[", "j", "]", "=", "1", "-", "op", "[", "i", "]", "[", "j", "]", "/", "max", "(", "[", "i", ",", "j", "]", ")", "\n", "# print(si)", "\n", "", "", "return", "si", "\n", "", "def", "editdistance", "(", "self", ",", "word1", ",", "word2", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.editdistance": [[78, 80], ["editdistance.eval", "max", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "editdistance", "(", "self", ",", "word1", ",", "word2", ")", ":", "\n", "        ", "return", "1", "-", "editdistance", ".", "eval", "(", "word1", ",", "word2", ")", "/", "max", "(", "len", "(", "word1", ")", ",", "len", "(", "word2", ")", ")", "\n", "", "def", "calculate_similarity_matric", "(", "self", ",", "words1", ",", "words2", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.calculate_similarity_matric": [[80, 86], ["numpy.zeros", "enumerate", "enumerate", "len", "len", "text_util.TextGenerator.editdistance"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.editdistance"], ["", "def", "calculate_similarity_matric", "(", "self", ",", "words1", ",", "words2", ")", ":", "\n", "        ", "similarity", "=", "np", ".", "zeros", "(", "[", "len", "(", "words1", ")", ",", "len", "(", "words2", ")", "]", ")", "\n", "for", "i", ",", "word1", "in", "enumerate", "(", "words1", ")", ":", "\n", "            ", "for", "j", ",", "word2", "in", "enumerate", "(", "words2", ")", ":", "\n", "                ", "similarity", "[", "i", ",", "j", "]", "=", "self", ".", "editdistance", "(", "word1", ",", "word2", ")", "\n", "", "", "return", "similarity", "\n", "", "def", "phoc_level_1", "(", "self", ",", "words", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.phoc_level_1": [[86, 89], ["numpy.array().reshape", "numpy.array", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "phoc_level_1", "(", "self", ",", "words", ")", ":", "\n", "        ", "phoc1", "=", "np", ".", "array", "(", "[", "[", "1", "if", "c", "in", "word", "else", "0", "for", "c", "in", "self", ".", "chars", "]", "for", "word", "in", "words", "]", ")", ".", "reshape", "(", "[", "len", "(", "words", ")", ",", "len", "(", "self", ".", "chars", ")", "]", ")", "\n", "return", "phoc1", "\n", "", "def", "filter_words", "(", "self", ",", "texts", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.filter_words": [[89, 99], ["enumerate", "text.lower.lower.lower", "idxs.append", "new_texts.append", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "filter_words", "(", "self", ",", "texts", ")", ":", "\n", "        ", "idxs", ",", "new_texts", "=", "[", "]", ",", "[", "]", "\n", "for", "idx", ",", "text", "in", "enumerate", "(", "texts", ")", ":", "\n", "            ", "text", "=", "text", ".", "lower", "(", ")", "\n", "char_list", "=", "[", "c", "for", "c", "in", "text", "if", "c", "in", "self", ".", "chars", "]", "\n", "if", "len", "(", "char_list", ")", "<", "3", ":", "\n", "                ", "continue", "\n", "", "idxs", ".", "append", "(", "idx", ")", "\n", "new_texts", ".", "append", "(", "\"\"", ".", "join", "(", "char_list", ")", ")", "\n", "", "return", "idxs", ",", "new_texts", "", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.__init__": [[13, 21], ["math.log"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "weights", ",", "bbox_xform_clip", "=", "math", ".", "log", "(", "1000.", "/", "16", ")", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            weights (4-element tuple)\n            bbox_xform_clip (float)\n        \"\"\"", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "bbox_xform_clip", "=", "bbox_xform_clip", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.encode": [[22, 51], ["torch.stack", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "reference_boxes", ",", "proposals", ")", ":", "\n", "        ", "\"\"\"\n        Encode a set of proposals with respect to some\n        reference boxes\n\n        Arguments:\n            reference_boxes (Tensor): reference boxes\n            proposals (Tensor): boxes to be encoded\n        \"\"\"", "\n", "\n", "TO_REMOVE", "=", "1", "# TODO remove", "\n", "ex_widths", "=", "proposals", "[", ":", ",", "2", "]", "-", "proposals", "[", ":", ",", "0", "]", "+", "TO_REMOVE", "\n", "ex_heights", "=", "proposals", "[", ":", ",", "3", "]", "-", "proposals", "[", ":", ",", "1", "]", "+", "TO_REMOVE", "\n", "ex_ctr_x", "=", "proposals", "[", ":", ",", "0", "]", "+", "0.5", "*", "ex_widths", "\n", "ex_ctr_y", "=", "proposals", "[", ":", ",", "1", "]", "+", "0.5", "*", "ex_heights", "\n", "\n", "gt_widths", "=", "reference_boxes", "[", ":", ",", "2", "]", "-", "reference_boxes", "[", ":", ",", "0", "]", "+", "TO_REMOVE", "\n", "gt_heights", "=", "reference_boxes", "[", ":", ",", "3", "]", "-", "reference_boxes", "[", ":", ",", "1", "]", "+", "TO_REMOVE", "\n", "gt_ctr_x", "=", "reference_boxes", "[", ":", ",", "0", "]", "+", "0.5", "*", "gt_widths", "\n", "gt_ctr_y", "=", "reference_boxes", "[", ":", ",", "1", "]", "+", "0.5", "*", "gt_heights", "\n", "\n", "wx", ",", "wy", ",", "ww", ",", "wh", "=", "self", ".", "weights", "\n", "targets_dx", "=", "wx", "*", "(", "gt_ctr_x", "-", "ex_ctr_x", ")", "/", "ex_widths", "\n", "targets_dy", "=", "wy", "*", "(", "gt_ctr_y", "-", "ex_ctr_y", ")", "/", "ex_heights", "\n", "targets_dw", "=", "ww", "*", "torch", ".", "log", "(", "gt_widths", "/", "ex_widths", ")", "\n", "targets_dh", "=", "wh", "*", "torch", ".", "log", "(", "gt_heights", "/", "ex_heights", ")", "\n", "\n", "targets", "=", "torch", ".", "stack", "(", "(", "targets_dx", ",", "targets_dy", ",", "targets_dw", ",", "targets_dh", ")", ",", "dim", "=", "1", ")", "\n", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.decode": [[52, 96], ["boxes.to.to.to", "torch.clamp", "torch.clamp", "torch.zeros_like", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to"], ["", "def", "decode", "(", "self", ",", "rel_codes", ",", "boxes", ")", ":", "\n", "        ", "\"\"\"\n        From a set of original boxes and encoded relative box offsets,\n        get the decoded boxes.\n\n        Arguments:\n            rel_codes (Tensor): encoded boxes\n            boxes (Tensor): reference boxes.\n        \"\"\"", "\n", "\n", "boxes", "=", "boxes", ".", "to", "(", "rel_codes", ".", "dtype", ")", "\n", "\n", "TO_REMOVE", "=", "1", "# TODO remove", "\n", "widths", "=", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "TO_REMOVE", "\n", "heights", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "TO_REMOVE", "\n", "ctr_x", "=", "boxes", "[", ":", ",", "0", "]", "+", "0.5", "*", "widths", "\n", "ctr_y", "=", "boxes", "[", ":", ",", "1", "]", "+", "0.5", "*", "heights", "\n", "\n", "wx", ",", "wy", ",", "ww", ",", "wh", "=", "self", ".", "weights", "\n", "dx", "=", "rel_codes", "[", ":", ",", "0", ":", ":", "4", "]", "/", "wx", "\n", "dy", "=", "rel_codes", "[", ":", ",", "1", ":", ":", "4", "]", "/", "wy", "\n", "dw", "=", "rel_codes", "[", ":", ",", "2", ":", ":", "4", "]", "/", "ww", "\n", "dh", "=", "rel_codes", "[", ":", ",", "3", ":", ":", "4", "]", "/", "wh", "\n", "\n", "# Prevent sending too large values into torch.exp()", "\n", "dw", "=", "torch", ".", "clamp", "(", "dw", ",", "max", "=", "self", ".", "bbox_xform_clip", ")", "\n", "dh", "=", "torch", ".", "clamp", "(", "dh", ",", "max", "=", "self", ".", "bbox_xform_clip", ")", "\n", "\n", "pred_ctr_x", "=", "dx", "*", "widths", "[", ":", ",", "None", "]", "+", "ctr_x", "[", ":", ",", "None", "]", "\n", "pred_ctr_y", "=", "dy", "*", "heights", "[", ":", ",", "None", "]", "+", "ctr_y", "[", ":", ",", "None", "]", "\n", "pred_w", "=", "torch", ".", "exp", "(", "dw", ")", "*", "widths", "[", ":", ",", "None", "]", "\n", "pred_h", "=", "torch", ".", "exp", "(", "dh", ")", "*", "heights", "[", ":", ",", "None", "]", "\n", "\n", "pred_boxes", "=", "torch", ".", "zeros_like", "(", "rel_codes", ")", "\n", "# x1", "\n", "pred_boxes", "[", ":", ",", "0", ":", ":", "4", "]", "=", "pred_ctr_x", "-", "0.5", "*", "pred_w", "\n", "# y1", "\n", "pred_boxes", "[", ":", ",", "1", ":", ":", "4", "]", "=", "pred_ctr_y", "-", "0.5", "*", "pred_h", "\n", "# x2 (note: \"- 1\" is correct; don't be fooled by the asymmetry)", "\n", "pred_boxes", "[", ":", ",", "2", ":", ":", "4", "]", "=", "pred_ctr_x", "+", "0.5", "*", "pred_w", "-", "1", "\n", "# y2 (note: \"- 1\" is correct; don't be fooled by the asymmetry)", "\n", "pred_boxes", "[", ":", ",", "3", ":", ":", "4", "]", "=", "pred_ctr_y", "+", "0.5", "*", "pred_h", "-", "1", "\n", "\n", "return", "pred_boxes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.balanced_positive_negative_sampler.BalancedPositiveNegativeSampler.__init__": [[10, 18], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "batch_size_per_image", ",", "positive_fraction", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            batch_size_per_image (int): number of elements to be selected per image\n            positive_fraction (float): percentage of positive elements per batch\n        \"\"\"", "\n", "self", ".", "batch_size_per_image", "=", "batch_size_per_image", "\n", "self", ".", "positive_fraction", "=", "positive_fraction", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.balanced_positive_negative_sampler.BalancedPositiveNegativeSampler.__call__": [[19, 69], ["torch.nonzero().squeeze", "torch.nonzero().squeeze", "int", "min", "min", "torch.zeros_like", "torch.zeros_like", "pos_idx.append", "neg_idx.append", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.numel", "torch.randperm", "torch.randperm", "torch.nonzero", "torch.nonzero", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.numel"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "matched_idxs", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            matched idxs: list of tensors containing -1, 0 or positive values.\n                Each tensor corresponds to a specific image.\n                -1 values are ignored, 0 are considered as negatives and > 0 as\n                positives.\n\n        Returns:\n            pos_idx (list[tensor])\n            neg_idx (list[tensor])\n\n        Returns two lists of binary masks for each image.\n        The first list contains the positive elements that were selected,\n        and the second list the negative example.\n        \"\"\"", "\n", "pos_idx", "=", "[", "]", "\n", "neg_idx", "=", "[", "]", "\n", "for", "matched_idxs_per_image", "in", "matched_idxs", ":", "\n", "            ", "positive", "=", "torch", ".", "nonzero", "(", "matched_idxs_per_image", ">=", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "negative", "=", "torch", ".", "nonzero", "(", "matched_idxs_per_image", "==", "0", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "num_pos", "=", "int", "(", "self", ".", "batch_size_per_image", "*", "self", ".", "positive_fraction", ")", "\n", "# protect against not enough positive examples", "\n", "num_pos", "=", "min", "(", "positive", ".", "numel", "(", ")", ",", "num_pos", ")", "\n", "num_neg", "=", "self", ".", "batch_size_per_image", "-", "num_pos", "\n", "# protect against not enough negative examples", "\n", "num_neg", "=", "min", "(", "negative", ".", "numel", "(", ")", ",", "num_neg", ")", "\n", "\n", "# randomly select positive and negative examples", "\n", "perm1", "=", "torch", ".", "randperm", "(", "positive", ".", "numel", "(", ")", ",", "device", "=", "positive", ".", "device", ")", "[", ":", "num_pos", "]", "\n", "perm2", "=", "torch", ".", "randperm", "(", "negative", ".", "numel", "(", ")", ",", "device", "=", "negative", ".", "device", ")", "[", ":", "num_neg", "]", "\n", "\n", "pos_idx_per_image", "=", "positive", "[", "perm1", "]", "\n", "neg_idx_per_image", "=", "negative", "[", "perm2", "]", "\n", "\n", "# create binary mask from indices", "\n", "pos_idx_per_image_mask", "=", "torch", ".", "zeros_like", "(", "\n", "matched_idxs_per_image", ",", "dtype", "=", "torch", ".", "uint8", "\n", ")", "\n", "neg_idx_per_image_mask", "=", "torch", ".", "zeros_like", "(", "\n", "matched_idxs_per_image", ",", "dtype", "=", "torch", ".", "uint8", "\n", ")", "\n", "pos_idx_per_image_mask", "[", "pos_idx_per_image", "]", "=", "1", "\n", "neg_idx_per_image_mask", "[", "neg_idx_per_image", "]", "=", "1", "\n", "\n", "pos_idx", ".", "append", "(", "pos_idx_per_image_mask", ")", "\n", "neg_idx", ".", "append", "(", "neg_idx_per_image_mask", ")", "\n", "\n", "", "return", "pos_idx", ",", "neg_idx", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.matcher.Matcher.__init__": [[23, 41], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "high_threshold", ",", "low_threshold", ",", "allow_low_quality_matches", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            high_threshold (float): quality values greater than or equal to\n                this value are candidate matches.\n            low_threshold (float): a lower quality threshold used to stratify\n                matches into three levels:\n                1) matches >= high_threshold\n                2) BETWEEN_THRESHOLDS matches in [low_threshold, high_threshold)\n                3) BELOW_LOW_THRESHOLD matches in [0, low_threshold)\n            allow_low_quality_matches (bool): if True, produce additional matches\n                for predictions that have only low-quality match candidates. See\n                set_low_quality_matches_ for more details.\n        \"\"\"", "\n", "assert", "low_threshold", "<=", "high_threshold", "\n", "self", ".", "high_threshold", "=", "high_threshold", "\n", "self", ".", "low_threshold", "=", "low_threshold", "\n", "self", ".", "allow_low_quality_matches", "=", "allow_low_quality_matches", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.matcher.Matcher.__call__": [[42, 83], ["match_quality_matrix.max", "match_quality_matrix.numel", "matches.clone", "matcher.Matcher.set_low_quality_matches_", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.matcher.Matcher.set_low_quality_matches_"], ["", "def", "__call__", "(", "self", ",", "match_quality_matrix", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            match_quality_matrix (Tensor[float]): an MxN tensor, containing the\n            pairwise quality between M ground-truth elements and N predicted elements.\n\n        Returns:\n            matches (Tensor[int64]): an N tensor where N[i] is a matched gt in\n            [0, M - 1] or a negative value indicating that prediction i could not\n            be matched.\n        \"\"\"", "\n", "if", "match_quality_matrix", ".", "numel", "(", ")", "==", "0", ":", "\n", "# empty targets or proposals not supported during training", "\n", "            ", "if", "match_quality_matrix", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"No ground-truth boxes available for one of the images \"", "\n", "\"during training\"", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"No proposal boxes available for one of the images \"", "\n", "\"during training\"", ")", "\n", "\n", "# match_quality_matrix is M (gt) x N (predicted)", "\n", "# Max over gt elements (dim 0) to find best gt candidate for each prediction", "\n", "", "", "matched_vals", ",", "matches", "=", "match_quality_matrix", ".", "max", "(", "dim", "=", "0", ")", "\n", "# print(matches)", "\n", "if", "self", ".", "allow_low_quality_matches", ":", "\n", "            ", "all_matches", "=", "matches", ".", "clone", "(", ")", "\n", "\n", "# Assign candidate matches with low quality to negative (unassigned) values", "\n", "", "below_low_threshold", "=", "matched_vals", "<", "self", ".", "low_threshold", "\n", "between_thresholds", "=", "(", "matched_vals", ">=", "self", ".", "low_threshold", ")", "&", "(", "\n", "matched_vals", "<", "self", ".", "high_threshold", "\n", ")", "\n", "matches", "[", "below_low_threshold", "]", "=", "Matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "matches", "[", "between_thresholds", "]", "=", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "\n", "if", "self", ".", "allow_low_quality_matches", ":", "\n", "            ", "self", ".", "set_low_quality_matches_", "(", "matches", ",", "all_matches", ",", "match_quality_matrix", ")", "\n", "\n", "", "return", "matches", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.matcher.Matcher.set_low_quality_matches_": [[84, 114], ["match_quality_matrix.max", "torch.nonzero"], "methods", ["None"], ["", "def", "set_low_quality_matches_", "(", "self", ",", "matches", ",", "all_matches", ",", "match_quality_matrix", ")", ":", "\n", "        ", "\"\"\"\n        Produce additional matches for predictions that have only low-quality matches.\n        Specifically, for each ground-truth find the set of predictions that have\n        maximum overlap with it (including ties); for each prediction in that set, if\n        it is unmatched, then match it to the ground-truth with which it has the highest\n        quality value.\n        \"\"\"", "\n", "# For each gt, find the prediction with which it has highest quality", "\n", "highest_quality_foreach_gt", ",", "_", "=", "match_quality_matrix", ".", "max", "(", "dim", "=", "1", ")", "\n", "# Find highest quality match available, even if it is low, including ties", "\n", "gt_pred_pairs_of_highest_quality", "=", "torch", ".", "nonzero", "(", "\n", "match_quality_matrix", "==", "highest_quality_foreach_gt", "[", ":", ",", "None", "]", "\n", ")", "\n", "# Example gt_pred_pairs_of_highest_quality:", "\n", "#   tensor([[    0, 39796],", "\n", "#           [    1, 32055],", "\n", "#           [    1, 32070],", "\n", "#           [    2, 39190],", "\n", "#           [    2, 40255],", "\n", "#           [    3, 40390],", "\n", "#           [    3, 41455],", "\n", "#           [    4, 45470],", "\n", "#           [    5, 45325],", "\n", "#           [    5, 46390]])", "\n", "# Each row is a (gt index, prediction index)", "\n", "# Note how gt items 1, 2, 3, and 5 each have two ties", "\n", "\n", "pred_inds_to_update", "=", "gt_pred_pairs_of_highest_quality", "[", ":", ",", "1", "]", "\n", "matches", "[", "pred_inds_to_update", "]", "=", "all_matches", "[", "pred_inds_to_update", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.poolers.LevelMapper.__init__": [[16, 30], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "k_min", ",", "k_max", ",", "canonical_scale", "=", "224", ",", "canonical_level", "=", "4", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            k_min (int)\n            k_max (int)\n            canonical_scale (int)\n            canonical_level (int)\n            eps (float)\n        \"\"\"", "\n", "self", ".", "k_min", "=", "k_min", "\n", "self", ".", "k_max", "=", "k_max", "\n", "self", ".", "s0", "=", "canonical_scale", "\n", "self", ".", "lvl0", "=", "canonical_level", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.poolers.LevelMapper.__call__": [[31, 43], ["torch.sqrt", "torch.floor", "torch.clamp", "utils.cat", "torch.clamp.to", "torch.log2", "boxlist.area"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area"], ["", "def", "__call__", "(", "self", ",", "boxlists", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            boxlists (list[BoxList])\n        \"\"\"", "\n", "# Compute level ids", "\n", "s", "=", "torch", ".", "sqrt", "(", "cat", "(", "[", "boxlist", ".", "area", "(", ")", "for", "boxlist", "in", "boxlists", "]", ")", ")", "\n", "\n", "# Eqn.(1) in FPN paper", "\n", "target_lvls", "=", "torch", ".", "floor", "(", "self", ".", "lvl0", "+", "torch", ".", "log2", "(", "s", "/", "self", ".", "s0", "+", "self", ".", "eps", ")", ")", "\n", "target_lvls", "=", "torch", ".", "clamp", "(", "target_lvls", ",", "min", "=", "self", ".", "k_min", ",", "max", "=", "self", ".", "k_max", ")", "\n", "return", "target_lvls", ".", "to", "(", "torch", ".", "int64", ")", "-", "self", ".", "k_min", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.poolers.LevelMapper.get_random": [[44, 48], ["None"], "methods", ["None"], ["", "def", "get_random", "(", "self", ",", "level", ")", ":", "\n", "        ", "\"\"\" Generate a random roi for target level\n        \"\"\"", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "torch", ".", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.poolers.Pooler.__init__": [[60, 94], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "poolers.LevelMapper", "poolers.append", "torch.log2().item", "torch.log2().item", "maskrcnn_benchmark.layers.ROIAlign", "NotImplementedError", "torch.log2", "torch.log2", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "output_size", ",", "scales", ",", "sampling_ratio", ",", "\n", "output_channel", "=", "256", ",", "canonical_scale", "=", "160", ",", "\n", "mode", "=", "'align'", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            output_size (list[tuple[int]] or list[int]): output size for the pooled region\n            scales (list[float]): scales for each Pooler\n            sampling_ratio (int): sampling ratio for ROIAlign\n        \"\"\"", "\n", "super", "(", "Pooler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "poolers", "=", "[", "]", "\n", "for", "scale", "in", "scales", ":", "\n", "            ", "if", "mode", "==", "'align'", ":", "\n", "                ", "pooler", "=", "ROIAlign", "(", "\n", "output_size", ",", "spatial_scale", "=", "scale", ",", "sampling_ratio", "=", "sampling_ratio", ")", "\n", "# elif mode == 'deformable':", "\n", "#     pooler = ModulatedDeformRoIPoolingPack(", "\n", "#         spatial_scale=scale, out_size=output_size[0],", "\n", "#         out_channels=output_channel, no_trans=False,", "\n", "#         group_size=1, trans_std=0.1)", "\n", "# elif mode == 'bezier':", "\n", "#     pooler = BezierAlign(", "\n", "#         output_size, spatial_scale=scale, sampling_ratio=1)", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "", "poolers", ".", "append", "(", "pooler", ")", "\n", "", "self", ".", "poolers", "=", "nn", ".", "ModuleList", "(", "poolers", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "# get the levels in the feature map by leveraging the fact that the network always", "\n", "# downsamples by a factor of 2 at each level.", "\n", "lvl_min", "=", "-", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "scales", "[", "0", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ")", ".", "item", "(", ")", "\n", "lvl_max", "=", "-", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "scales", "[", "-", "1", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ")", ".", "item", "(", ")", "\n", "# self.map_levels = LevelMapper(lvl_min, lvl_max, canonical_scale=canonical_scale)", "\n", "self", ".", "map_levels", "=", "LevelMapper", "(", "lvl_min", ",", "lvl_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.poolers.Pooler.convert_to_roi_format": [[95, 111], ["isinstance", "utils.cat", "torch.cat", "utils.cat", "utils.cat", "torch.full", "enumerate", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "convert_to_roi_format", "(", "self", ",", "boxes", ")", ":", "\n", "        ", "if", "isinstance", "(", "boxes", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "concat_boxes", "=", "cat", "(", "[", "b", "for", "b", "in", "boxes", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "concat_boxes", "=", "cat", "(", "[", "b", ".", "bbox", "for", "b", "in", "boxes", "]", ",", "dim", "=", "0", ")", "\n", "", "device", ",", "dtype", "=", "concat_boxes", ".", "device", ",", "concat_boxes", ".", "dtype", "\n", "ids", "=", "cat", "(", "\n", "[", "\n", "torch", ".", "full", "(", "(", "len", "(", "b", ")", ",", "1", ")", ",", "i", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "boxes", ")", "\n", "]", ",", "\n", "dim", "=", "0", ",", "\n", ")", "\n", "rois", "=", "torch", ".", "cat", "(", "[", "ids", ",", "concat_boxes", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "rois", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.poolers.Pooler.forward": [[112, 147], ["len", "poolers.Pooler.convert_to_roi_format().to", "poolers.Pooler.map_levels", "len", "torch.zeros", "enumerate", "zip", "torch.nonzero().squeeze", "pooler().to", "poolers.Pooler.convert_to_roi_format", "torch.nonzero", "pooler"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.poolers.Pooler.convert_to_roi_format"], ["", "def", "forward", "(", "self", ",", "x", ",", "boxes", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            x (list[Tensor]): feature maps for each level\n            boxes (list[BoxList]): boxes to be used to perform the pooling operation.\n        Returns:\n            result (Tensor)\n        \"\"\"", "\n", "num_levels", "=", "len", "(", "self", ".", "poolers", ")", "\n", "rois", "=", "self", ".", "convert_to_roi_format", "(", "boxes", ")", ".", "to", "(", "x", "[", "0", "]", ".", "device", ")", "\n", "# print(rois)", "\n", "if", "num_levels", "==", "1", ":", "\n", "            ", "return", "self", ".", "poolers", "[", "0", "]", "(", "x", "[", "0", "]", ",", "rois", ")", "\n", "\n", "", "levels", "=", "self", ".", "map_levels", "(", "boxes", ")", "\n", "\n", "num_rois", "=", "len", "(", "rois", ")", "\n", "num_channels", "=", "x", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "\n", "dtype", ",", "device", "=", "x", "[", "0", "]", ".", "dtype", ",", "x", "[", "0", "]", ".", "device", "\n", "result", "=", "torch", ".", "zeros", "(", "\n", "(", "num_rois", ",", "num_channels", ",", "*", "self", ".", "output_size", ")", ",", "\n", "dtype", "=", "dtype", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "# for f in x:", "\n", "#     print(f.shape)", "\n", "for", "level", ",", "(", "per_level_feature", ",", "pooler", ")", "in", "enumerate", "(", "zip", "(", "x", ",", "self", ".", "poolers", ")", ")", ":", "\n", "            ", "idx_in_level", "=", "torch", ".", "nonzero", "(", "levels", "==", "level", ")", ".", "squeeze", "(", "1", ")", "\n", "rois_per_level", "=", "rois", "[", "idx_in_level", "]", "\n", "# print(rois_per_level)", "\n", "# print(level, per_level_feature.shape)", "\n", "result", "[", "idx_in_level", "]", "=", "pooler", "(", "per_level_feature", ",", "rois_per_level", ")", ".", "to", "(", "dtype", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.poolers.make_pooler": [[149, 159], ["poolers.Pooler"], "function", ["None"], ["", "", "def", "make_pooler", "(", "cfg", ",", "head_name", ")", ":", "\n", "    ", "resolution", "=", "cfg", ".", "MODEL", "[", "head_name", "]", ".", "POOLER_RESOLUTION", "\n", "scales", "=", "cfg", ".", "MODEL", "[", "head_name", "]", ".", "POOLER_SCALES", "\n", "sampling_ratio", "=", "cfg", ".", "MODEL", "[", "head_name", "]", ".", "POOLER_SAMPLING_RATIO", "\n", "pooler", "=", "Pooler", "(", "\n", "output_size", "=", "(", "resolution", ",", "resolution", ")", ",", "\n", "scales", "=", "scales", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", ")", "\n", "return", "pooler", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat": [[9, 17], ["isinstance", "torch.cat", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["def", "cat", "(", "tensors", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Efficient version of torch.cat that avoids a copy if there is only a single element in a list\n    \"\"\"", "\n", "assert", "isinstance", "(", "tensors", ",", "(", "list", ",", "tuple", ")", ")", "\n", "if", "len", "(", "tensors", ")", "==", "1", ":", "\n", "        ", "return", "tensors", "[", "0", "]", "\n", "", "return", "torch", ".", "cat", "(", "tensors", ",", "dim", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.get_group_gn": [[14, 29], ["None"], "function", ["None"], ["def", "get_group_gn", "(", "dim", ",", "dim_per_gp", ",", "num_groups", ")", ":", "\n", "    ", "\"\"\"get number of groups used by GroupNorm, based on number of channels.\"\"\"", "\n", "assert", "dim_per_gp", "==", "-", "1", "or", "num_groups", "==", "-", "1", ",", "\"GroupNorm: can only specify G or C/G.\"", "\n", "\n", "if", "dim_per_gp", ">", "0", ":", "\n", "        ", "assert", "dim", "%", "dim_per_gp", "==", "0", ",", "\"dim: {}, dim_per_gp: {}\"", ".", "format", "(", "dim", ",", "dim_per_gp", ")", "\n", "group_gn", "=", "dim", "//", "dim_per_gp", "\n", "", "else", ":", "\n", "        ", "assert", "dim", "%", "num_groups", "==", "0", ",", "\"dim: {}, num_groups: {}\"", ".", "format", "(", "dim", ",", "num_groups", ")", "\n", "group_gn", "=", "num_groups", "\n", "\n", "", "return", "group_gn", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.group_norm": [[31, 41], ["torch.nn.GroupNorm", "make_layers.get_group_gn"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.get_group_gn"], ["", "def", "group_norm", "(", "out_channels", ",", "affine", "=", "True", ",", "divisor", "=", "1", ")", ":", "\n", "    ", "out_channels", "=", "out_channels", "//", "divisor", "\n", "dim_per_gp", "=", "cfg", ".", "MODEL", ".", "GROUP_NORM", ".", "DIM_PER_GP", "//", "divisor", "\n", "num_groups", "=", "cfg", ".", "MODEL", ".", "GROUP_NORM", ".", "NUM_GROUPS", "//", "divisor", "\n", "eps", "=", "cfg", ".", "MODEL", ".", "GROUP_NORM", ".", "EPSILON", "# default: 1e-5", "\n", "return", "torch", ".", "nn", ".", "GroupNorm", "(", "\n", "get_group_gn", "(", "out_channels", ",", "dim_per_gp", ",", "num_groups", ")", ",", "\n", "out_channels", ",", "\n", "eps", ",", "\n", "affine", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.make_conv3x3": [[44, 78], ["maskrcnn_benchmark.layers.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "module.append", "module.append", "len", "torch.nn.Sequential", "make_layers.group_norm", "torch.nn.ReLU"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.group_norm"], ["", "def", "make_conv3x3", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "dilation", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "use_gn", "=", "False", ",", "\n", "use_relu", "=", "False", ",", "\n", "kaiming_init", "=", "True", "\n", ")", ":", "\n", "    ", "conv", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", "if", "use_gn", "else", "True", "\n", ")", "\n", "if", "kaiming_init", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "conv", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", "\n", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "conv", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "", "if", "not", "use_gn", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "conv", ".", "bias", ",", "0", ")", "\n", "", "module", "=", "[", "conv", ",", "]", "\n", "if", "use_gn", ":", "\n", "        ", "module", ".", "append", "(", "group_norm", "(", "out_channels", ")", ")", "\n", "", "if", "use_relu", ":", "\n", "        ", "module", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "if", "len", "(", "module", ")", ">", "1", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "*", "module", ")", "\n", "", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.make_fc": [[80, 93], ["torch.nn.Linear", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_", "torch.nn.Linear", "torch.nn.init.kaiming_uniform_", "torch.nn.Sequential", "make_layers.group_norm"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.group_norm"], ["", "def", "make_fc", "(", "dim_in", ",", "hidden_dim", ",", "use_gn", "=", "False", ")", ":", "\n", "    ", "'''\n        Caffe2 implementation uses XavierFill, which in fact\n        corresponds to kaiming_uniform_ in PyTorch\n    '''", "\n", "if", "use_gn", ":", "\n", "        ", "fc", "=", "nn", ".", "Linear", "(", "dim_in", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "fc", ".", "weight", ",", "a", "=", "1", ")", "\n", "return", "nn", ".", "Sequential", "(", "fc", ",", "group_norm", "(", "hidden_dim", ")", ")", "\n", "", "fc", "=", "nn", ".", "Linear", "(", "dim_in", ",", "hidden_dim", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "fc", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "fc", ".", "bias", ",", "0", ")", "\n", "return", "fc", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.conv_with_kaiming_uniform": [[95, 132], ["conv_func", "torch.nn.init.kaiming_uniform_", "module.append", "module.append", "len", "torch.nn.Sequential", "torch.nn.init.constant_", "make_layers.group_norm", "module.append", "torch.nn.ReLU", "torch.nn.BatchNorm2d"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.group_norm"], ["", "def", "conv_with_kaiming_uniform", "(", "\n", "use_gn", "=", "False", ",", "use_relu", "=", "False", ",", "use_deformable", "=", "False", ",", "\n", "use_bn", "=", "False", ")", ":", "\n", "    ", "def", "make_conv", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", "\n", ")", ":", "\n", "        ", "if", "use_deformable", ":", "\n", "            ", "conv_func", "=", "DFConv2d", "\n", "", "else", ":", "\n", "            ", "conv_func", "=", "Conv2d", "\n", "", "conv", "=", "conv_func", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", "*", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "not", "(", "use_gn", "or", "use_bn", ")", "\n", ")", "\n", "if", "not", "use_deformable", ":", "\n", "# Caffe2 implementation uses XavierFill, which in fact", "\n", "# corresponds to kaiming_uniform_ in PyTorch", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "conv", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "(", "use_gn", "or", "use_bn", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "conv", ".", "bias", ",", "0", ")", "\n", "", "", "module", "=", "[", "conv", ",", "]", "\n", "if", "use_gn", ":", "\n", "            ", "module", ".", "append", "(", "group_norm", "(", "out_channels", ")", ")", "\n", "", "elif", "use_bn", ":", "\n", "            ", "module", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", "\n", "", "if", "use_relu", ":", "\n", "            ", "module", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "if", "len", "(", "module", ")", ">", "1", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "*", "module", ")", "\n", "", "return", "conv", "\n", "\n", "", "return", "make_conv", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.one_stage_head.one_stage_head.build_one_stage_head": [[4, 10], ["None"], "function", ["None"], ["def", "build_one_stage_head", "(", "cfg", ",", "in_channels", ")", ":", "\n", "# print(registry.ONE_STAGE_HEADS)", "\n", "    ", "assert", "cfg", ".", "MODEL", ".", "ONE_STAGE_HEAD", "in", "registry", ".", "ONE_STAGE_HEADS", ",", "\"cfg.MODEL.ONE_STAGE_HEAD: {} are not registered in registry\"", ".", "format", "(", "\n", "cfg", ".", "MODEL", ".", "ONE_STAGE_HEAD", ")", "\n", "return", "registry", ".", "ONE_STAGE_HEADS", "[", "cfg", ".", "MODEL", ".", "ONE_STAGE_HEAD", "]", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.align.align.CTCPredictor.__init__": [[23, 27], ["torch.nn.Module.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "class_num", ")", ":", "\n", "        ", "super", "(", "CTCPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "class_num", "=", "class_num", "\n", "self", ".", "clf", "=", "nn", ".", "Linear", "(", "in_channels", ",", "self", ".", "class_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.align.align.CTCPredictor.forward": [[28, 41], ["align.CTCPredictor.clf", "torch.nn.functional.log_softmax().permute", "torch.full", "align.CTCPredictor.prepare_targets", "torch.nn.functional.ctc_loss", "torch.nn.functional.log_softmax().permute.size", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax().permute.size"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.CTCPredictor.prepare_targets"], ["", "def", "forward", "(", "self", ",", "x", ",", "targets", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "clf", "(", "x", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "x", "=", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "# print(targets.shape)", "\n", "input_lengths", "=", "torch", ".", "full", "(", "(", "x", ".", "size", "(", "1", ")", ",", ")", ",", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "target_lengths", ",", "targets_sum", "=", "self", ".", "prepare_targets", "(", "targets", ")", "\n", "# print(x.shape,targets.shape,target_lengths.shape)", "\n", "# loss = F.ctc_loss(x, targets_sum, input_lengths, target_lengths, blank=self.class_num-1, zero_infinity=True) / 10", "\n", "loss", "=", "F", ".", "ctc_loss", "(", "x", ",", "targets_sum", ",", "input_lengths", ",", "target_lengths", ",", "blank", "=", "self", ".", "class_num", "-", "1", ",", "zero_infinity", "=", "True", ")", "\n", "# loss = F.ctc_loss(x, targets_sum, input_lengths, target_lengths, blank=self.class_num-1, zero_infinity=True)/2", "\n", "return", "loss", "\n", "", "return", "x", "\n", "", "def", "prepare_targets", "(", "self", ",", "targets", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.align.align.CTCPredictor.prepare_targets": [[41, 46], ["torch.cat", "zip"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat"], ["", "def", "prepare_targets", "(", "self", ",", "targets", ")", ":", "\n", "        ", "target_lengths", "=", "(", "targets", "!=", "self", ".", "class_num", "-", "1", ")", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "sum_targets", "=", "[", "t", "[", ":", "l", "]", "for", "t", ",", "l", "in", "zip", "(", "targets", ",", "target_lengths", ")", "]", "\n", "sum_targets", "=", "torch", ".", "cat", "(", "sum_targets", ")", "\n", "return", "target_lengths", ",", "sum_targets", "\n", "", "", "class", "RNNDecoder", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.align.align.RNNDecoder.__init__": [[47, 56], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform", "range", "torch.nn.Sequential", "convs.append", "align.BidirectionalLSTM", "torch.nn.Linear", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform."], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.conv_with_kaiming_uniform"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bidirectional", "=", "True", ",", "use_look_up", "=", "False", ",", "use_res_link", "=", "False", ",", "use_rnn", "=", "True", ",", "use_pyramid", "=", "False", ",", "pyramid_layers", "=", "None", ")", ":", "\n", "        ", "super", "(", "RNNDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "conv_func", "=", "conv_with_kaiming_uniform", "(", "True", ",", "True", ",", "False", ",", "False", ")", "\n", "convs", "=", "[", "]", "\n", "self", ".", "use_rnn", "=", "use_rnn", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "convs", ".", "append", "(", "conv_func", "(", "in_channels", ",", "in_channels", ",", "3", ",", "stride", "=", "(", "2", ",", "1", ")", ")", ")", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "self", ".", "rnn", "=", "BidirectionalLSTM", "(", "in_channels", ",", "256", ",", "out_channels", ")", "if", "self", ".", "use_rnn", "else", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "dictionary", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.align.align.RNNDecoder.forward": [[56, 65], ["align.RNNDecoder.convs", "x.permute().contiguous.permute().contiguous.mean", "x.permute().contiguous.permute().contiguous.permute", "align.RNNDecoder.rnn", "x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "dictionary", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "convs", "(", "x", ")", "\n", "x", "=", "x", ".", "mean", "(", "dim", "=", "2", ")", "# NxCxW", "\n", "# assert x.size(-2) == 1, \"the height of conv must be 1\"", "\n", "# x = x.squeeze(2)", "\n", "x", "=", "x", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "# WxNxC", "\n", "x", "=", "self", ".", "rnn", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "# [b,w,c]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.align.align.BidirectionalLSTM.__init__": [[68, 73], ["torch.nn.Module.__init__", "torch.nn.LSTM", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nHidden", ",", "nOut", ")", ":", "\n", "        ", "super", "(", "BidirectionalLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "nIn", ",", "nHidden", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Linear", "(", "nHidden", "*", "2", ",", "nOut", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.align.align.BidirectionalLSTM.forward": [[74, 83], ["align.BidirectionalLSTM.rnn", "recurrent.size", "recurrent.view", "align.BidirectionalLSTM.embedding", "output.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "recurrent", ",", "_", "=", "self", ".", "rnn", "(", "input", ")", "\n", "T", ",", "b", ",", "h", "=", "recurrent", ".", "size", "(", ")", "\n", "t_rec", "=", "recurrent", ".", "view", "(", "T", "*", "b", ",", "h", ")", "\n", "\n", "output", "=", "self", ".", "embedding", "(", "t_rec", ")", "# [T * b, nOut]", "\n", "output", "=", "output", ".", "view", "(", "T", ",", "b", ",", "-", "1", ")", "\n", "\n", "return", "output", "\n", "", "", "class", "WordEmbedding", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.align.align.WordEmbedding.__init__": [[84, 105], ["torch.nn.Module.__init__", "int", "torch.nn.Embedding", "torch.nn.Sequential", "len", "torch.nn.Linear", "torch.nn.ReLU", "align.BidirectionalLSTM", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["    ", "def", "__init__", "(", "self", ",", "\n", "out_channels", "=", "512", ",", "\n", "embedding_dim", "=", "300", ",", "\n", "char_vector_dim", "=", "256", ",", "\n", "max_length", "=", "10", ",", "\n", "lexicon", "=", "string", ".", "ascii_lowercase", "+", "string", ".", "digits", ",", "\n", "bidirectional", "=", "True", ",", "\n", "use_res_link", "=", "False", ",", "\n", "use_rnn", "=", "True", ",", "use_pyramid", "=", "False", ",", "pyramid_layers", "=", "None", ")", ":", "\n", "        ", "super", "(", "WordEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_rnn", "=", "use_rnn", "\n", "self", ".", "max_length", "=", "int", "(", "max_length", ")", "\n", "self", ".", "lexicon", "=", "lexicon", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "char_embedding", "=", "nn", ".", "Embedding", "(", "len", "(", "self", ".", "lexicon", ")", ",", "embedding_dim", ")", "\n", "self", ".", "char_encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "embedding_dim", ",", "char_vector_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "# self.rnn = nn.LSTM(char_vector_dim, out_channels,num_layers=1,bidirectional=bidirectional)", "\n", "self", ".", "rnn", "=", "BidirectionalLSTM", "(", "char_vector_dim", ",", "256", ",", "out_channels", ")", "if", "self", ".", "use_rnn", "else", "nn", ".", "Linear", "(", "char_vector_dim", ",", "out_channels", ")", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.align.align.WordEmbedding.forward": [[105, 129], ["align.WordEmbedding.char_encoder", "char_vector.permute().contiguous.permute().contiguous.permute().contiguous", "align.WordEmbedding.rnn", "x.permute().contiguous.permute().contiguous.permute().contiguous", "align.WordEmbedding.char_embedding", "embeddings_batch.append", "torch.cat", "len", "torch.nn.functional.interpolate", "char_vector.permute().contiguous.permute().contiguous.permute", "x.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "'''\n        word: b, 256\n        embedding: b, 256, 300\n        h_t: b, out_channels\n        '''", "\n", "# print(inputs)", "\n", "embeddings_batch", "=", "[", "]", "\n", "for", "word", "in", "inputs", ":", "\n", "            ", "assert", "len", "(", "word", ")", ">", "0", ",", "word", "\n", "embeddings", "=", "self", ".", "char_embedding", "(", "word", ")", "\n", "embeddings_batch", ".", "append", "(", "\n", "nn", ".", "functional", ".", "interpolate", "(", "\n", "embeddings", "[", "None", ",", "None", ",", "...", "]", ",", "\n", "size", "=", "(", "self", ".", "max_length", ",", "self", ".", "embedding_dim", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", ")", "\n", "", "embeddings_batch", "=", "torch", ".", "cat", "(", "embeddings_batch", ",", "dim", "=", "1", ")", "[", "0", "]", "# [b, self.max_length, embedding_dim]", "\n", "char_vector", "=", "self", ".", "char_encoder", "(", "embeddings_batch", ")", "\n", "char_vector", "=", "char_vector", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "# [w, b, c]", "\n", "x", "=", "self", ".", "rnn", "(", "char_vector", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "# [b,w,c]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.align.align.AlignHead.__init__": [[131, 175], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.poolers.Pooler", "align.RNNDecoder", "align.WordEmbedding", "torch.nn.SmoothL1Loss", "torch.nn.CrossEntropyLoss", "np.load().tolist", "print", "maskrcnn_benchmark.utils.text_util.TextGenerator", "maskrcnn_benchmark.utils.text_util.TextGenerator", "align.CTCPredictor", "len", "np.load", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            in_channels (int): number of channels of the input feature\n        \"\"\"", "\n", "super", "(", "AlignHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# TODO: Implement the sigmoid version first.", "\n", "resolution", "=", "cfg", ".", "MODEL", ".", "ALIGN", ".", "POOLER_RESOLUTION", "\n", "canonical_scale", "=", "cfg", ".", "MODEL", ".", "ALIGN", ".", "POOLER_CANONICAL_SCALE", "\n", "# print(resolution)", "\n", "self", ".", "use_ctc_loss", "=", "cfg", ".", "MODEL", ".", "ALIGN", ".", "USE_CTC_LOSS", "\n", "self", ".", "is_chinese", "=", "cfg", ".", "MODEL", ".", "ALIGN", ".", "IS_CHINESE", "\n", "self", ".", "scales", "=", "cfg", ".", "MODEL", ".", "ALIGN", ".", "POOLER_SCALES", "\n", "self", ".", "pooler", "=", "Pooler", "(", "\n", "output_size", "=", "resolution", ",", "\n", "scales", "=", "self", ".", "scales", ",", "\n", "sampling_ratio", "=", "1", ",", "\n", "canonical_scale", "=", "canonical_scale", ",", "\n", "mode", "=", "'align'", ")", "\n", "\n", "out_channels", "=", "128", "\n", "in_channels", "=", "256", "\n", "if", "self", ".", "is_chinese", ":", "\n", "# lexicon = np.load(\"./datasets/rctw/chars.npy\").tolist()", "\n", "            ", "lexicon", "=", "np", ".", "load", "(", "\"/workspace/wanghao/projects/Pytorch-yolo-phoc/selected_chars.npy\"", ")", ".", "tolist", "(", ")", "\n", "print", "(", "len", "(", "lexicon", ")", ")", "\n", "self", ".", "text_generator", "=", "TextGenerator", "(", "ratios", "=", "[", "1", ",", "0", ",", "1", ",", "5", "]", ",", "chars", "=", "lexicon", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "text_generator", "=", "TextGenerator", "(", ")", "\n", "", "self", ".", "image_embedding", "=", "RNNDecoder", "(", "in_channels", ",", "out_channels", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "word_embedding", "=", "WordEmbedding", "(", "out_channels", "=", "out_channels", ",", "\n", "embedding_dim", "=", "256", ",", "\n", "char_vector_dim", "=", "256", ",", "\n", "max_length", "=", "resolution", "[", "1", "]", ",", "\n", "lexicon", "=", "self", ".", "text_generator", ".", "chars", ",", "\n", "bidirectional", "=", "True", ")", "\n", "frames", "=", "resolution", "[", "1", "]", "\n", "if", "self", ".", "use_ctc_loss", ":", "\n", "            ", "self", ".", "ctc_head", "=", "CTCPredictor", "(", "out_channels", ",", "len", "(", "self", ".", "text_generator", ".", "chars", ")", "+", "1", ")", "\n", "\n", "", "self", ".", "feat_dim", "=", "128", "*", "frames", "\n", "\n", "self", ".", "sim_loss_func", "=", "nn", ".", "SmoothL1Loss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.align.align.AlignHead.get_word_embedding": [[175, 180], ["torch.no_grad", "align.AlignHead.word_embedding().detach", "torch.tensor().long().to", "align.AlignHead.word_embedding", "torch.tensor().long", "torch.tensor", "align.AlignHead.text_generator.label_map", "text.lower"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.label_map"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_word_embedding", "(", "self", ",", "texts", ",", "device", ")", ":", "\n", "        ", "words", "=", "[", "torch", ".", "tensor", "(", "self", ".", "text_generator", ".", "label_map", "(", "text", ".", "lower", "(", ")", ")", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "for", "text", "in", "texts", "]", "\n", "words_embedding", "=", "self", ".", "word_embedding", "(", "words", ")", ".", "detach", "(", ")", "\n", "return", "words_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.align.align.AlignHead.compute_similarity": [[181, 186], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize.mm", "torch.nn.functional.normalize.t", "embedding1.size", "embedding2.size"], "methods", ["None"], ["", "def", "compute_similarity", "(", "self", ",", "embedding1", ",", "embedding2", ",", "k", "=", "1", ")", ":", "\n", "        ", "embedding1_nor", "=", "nn", ".", "functional", ".", "normalize", "(", "(", "embedding1", "*", "k", ")", ".", "tanh", "(", ")", ".", "view", "(", "embedding1", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "embedding2_nor", "=", "nn", ".", "functional", ".", "normalize", "(", "(", "embedding2", "*", "k", ")", ".", "tanh", "(", ")", ".", "view", "(", "embedding2", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "inter", "=", "embedding1_nor", ".", "mm", "(", "embedding2_nor", ".", "t", "(", ")", ")", "\n", "return", "inter", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.align.align.AlignHead.forward": [[189, 235], ["proposals_per_im.add_field", "align.AlignHead.text_generator.filter_words", "proposals_per_im.get_field().tolist", "proposals_per_im.bbox.size", "torch.zeros().type_as", "align.AlignHead.pooler", "select_boxes.append", "align.AlignHead.image_embedding", "torch.nn.functional.normalize", "proposals_per_im.add_field", "proposals_per_im.get_field().tolist", "len", "torch.zeros().type_as", "align.AlignHead.word_embedding", "torch.nn.functional.normalize", "proposals_per_im.get_field", "torch.zeros", "align.AlignHead.size", "proposals_per_im.get_field", "torch.zeros", "torch.tensor().long().to", "torch.tensor().long().to", "align.AlignHead.size", "torch.tensor().long", "torch.tensor().long", "torch.tensor", "torch.tensor", "align.AlignHead.text_generator.label_map", "align.AlignHead.text_generator.label_map", "text.lower"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.filter_words", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.label_map", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.label_map"], ["", "def", "forward", "(", "self", ",", "x", ",", "samples", ",", "images", "=", "None", ",", "is_words", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        offset related operations are messy\n        images: used for test pooler\n        \"\"\"", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "None", ",", "None", "\n", "", "else", ":", "\n", "            ", "select_boxes", "=", "[", "]", "\n", "proposals", "=", "samples", "[", "\"retrieval_samples\"", "]", "\n", "for", "proposals_per_im", "in", "proposals", ":", "\n", "                ", "if", "not", "self", ".", "is_chinese", ":", "\n", "                    ", "idxs", ",", "texts", "=", "self", ".", "text_generator", ".", "filter_words", "(", "proposals_per_im", ".", "get_field", "(", "\"texts\"", ")", ".", "tolist", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "texts", "=", "proposals_per_im", ".", "get_field", "(", "\"texts\"", ")", ".", "tolist", "(", ")", "\n", "", "if", "is_words", ":", "\n", "                    ", "if", "len", "(", "texts", ")", "==", "0", ":", "\n", "                        ", "words_embedding_nor", "=", "torch", ".", "zeros", "(", "[", "0", ",", "self", ".", "feat_dim", "]", ")", ".", "type_as", "(", "x", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                        ", "if", "not", "self", ".", "is_chinese", ":", "\n", "                            ", "words", "=", "[", "torch", ".", "tensor", "(", "self", ".", "text_generator", ".", "label_map", "(", "text", ".", "lower", "(", ")", ")", ")", ".", "long", "(", ")", ".", "to", "(", "x", "[", "0", "]", ".", "device", ")", "for", "text", "in", "texts", "]", "\n", "", "else", ":", "\n", "                            ", "words", "=", "[", "torch", ".", "tensor", "(", "self", ".", "text_generator", ".", "label_map", "(", "text", ")", ")", ".", "long", "(", ")", ".", "to", "(", "x", "[", "0", "]", ".", "device", ")", "for", "text", "in", "texts", "]", "\n", "# print(len(words))", "\n", "", "words_embedding", "=", "self", ".", "word_embedding", "(", "words", ")", "\n", "\n", "k", "=", "1", "\n", "words_embedding_nor", "=", "nn", ".", "functional", ".", "normalize", "(", "(", "words_embedding", "*", "k", ")", ".", "tanh", "(", ")", ".", "view", "(", "words_embedding", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "# words_embedding_nor = nn.functional.normalize(words_embedding.view(words_embedding.size(0),-1))", "\n", "", "", "if", "proposals_per_im", ".", "bbox", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "                    ", "imgs_embedding_nor", "=", "torch", ".", "zeros", "(", "[", "0", ",", "self", ".", "feat_dim", "]", ")", ".", "type_as", "(", "x", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "\n", "                    ", "rois", "=", "self", ".", "pooler", "(", "x", ",", "[", "proposals_per_im", "]", ")", "\n", "select_boxes", ".", "append", "(", "proposals_per_im", ".", "bbox", ")", "\n", "imgs_embedding", "=", "self", ".", "image_embedding", "(", "rois", ")", "\n", "\n", "k", "=", "1", "\n", "\n", "imgs_embedding_nor", "=", "nn", ".", "functional", ".", "normalize", "(", "(", "imgs_embedding", "*", "k", ")", ".", "tanh", "(", ")", ".", "view", "(", "imgs_embedding", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "# imgs_embedding_nor = nn.functional.normalize(imgs_embedding.view(imgs_embedding.size(0),-1))", "\n", "", "proposals_per_im", ".", "add_field", "(", "\"imgs_embedding_nor\"", ",", "imgs_embedding_nor", ")", "\n", "if", "is_words", ":", "\n", "                    ", "proposals_per_im", ".", "add_field", "(", "\"words_embedding_nor\"", ",", "words_embedding_nor", ")", "\n", "\n", "", "", "return", "proposals", ",", "{", "\"select_boxes\"", ":", "select_boxes", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.align.align.AlignModule.__init__": [[242, 254], ["super().__init__", "cfg.clone", "maskrcnn_benchmark.modeling.rpn.fcos.fcos.build_fcos", "align.AlignHead"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.build_fcos"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ",", "proposal_matcher", ")", ":", "\n", "        ", "super", "(", "AlignModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "\n", "self", ".", "detector", "=", "build_fcos", "(", "cfg", ",", "in_channels", ")", "\n", "self", ".", "proposal_matcher", "=", "proposal_matcher", "\n", "self", ".", "scales", "=", "cfg", ".", "MODEL", ".", "ALIGN", ".", "POOLER_SCALES", "\n", "self", ".", "use_box_aug", "=", "cfg", ".", "MODEL", ".", "ALIGN", ".", "USE_BOX_AUG", "\n", "self", ".", "use_retrieval", "=", "cfg", ".", "MODEL", ".", "ALIGN", ".", "USE_RETRIEVAL", "\n", "if", "self", ".", "use_retrieval", ":", "\n", "            ", "self", ".", "head", "=", "AlignHead", "(", "cfg", ",", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.align.align.AlignModule.forward": [[256, 300], ["target.to", "align.AlignModule.detector", "zip", "align.AlignModule.head", "box.get_field", "torch.nonzero().view", "box.add_field", "box.add_field", "box.add_field", "new_boxes.append", "os.path.basename", "len", "target.get_field", "target.get_field", "target.get_field", "str", "torch.nonzero", "image.get_field", "target.get_field"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["", "", "def", "forward", "(", "self", ",", "images", ",", "features", ",", "targets", "=", "None", ",", "vis", "=", "False", ",", "is_words", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            images (ImageList): images for which we want to compute the predictions\n            features (list[Tensor]): features computed from the images that are\n                used for computing the predictions. Each tensor in the list\n                correspond to different feature levels\n            targets (list[BoxList): ground-truth boxes present in the image (optional)\n            vis (bool): visualise offsets\n\n        Returns:\n            boxes (list[BoxList]): the predicted boxes from the RPN, one BoxList per\n                image.\n            losses (dict[Tensor]): the losses for the model during training. During\n                testing, it is an empty dict.\n        \"\"\"", "\n", "\n", "# print(targets)", "\n", "targets", "=", "[", "target", ".", "to", "(", "features", "[", "0", "]", ".", "device", ")", "for", "target", "in", "targets", "]", "\n", "if", "self", ".", "training", ":", "\n", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "else", ":", "\n", "            ", "boxes", ",", "losses", "=", "self", ".", "detector", "(", "images", ",", "features", "[", "1", ":", "]", ",", "targets", ")", "\n", "rec_features", "=", "features", "[", ":", "len", "(", "self", ".", "scales", ")", "]", "\n", "\n", "new_boxes", "=", "[", "]", "\n", "for", "box", ",", "target", "in", "zip", "(", "boxes", ",", "targets", ")", ":", "\n", "                ", "scores", "=", "box", ".", "get_field", "(", "\"scores\"", ")", "\n", "# pos_idxs = torch.nonzero(scores>0.08).view(-1)", "\n", "# pos_idxs = torch.nonzero(scores>0.05).view(-1)", "\n", "# pos_idxs = torch.nonzero(scores>0.05).view(-1)", "\n", "pos_idxs", "=", "torch", ".", "nonzero", "(", "scores", ">", "target", ".", "get_field", "(", "\"det_thred\"", ")", ")", ".", "view", "(", "-", "1", ")", "#75.43", "\n", "# pos_idxs = torch.nonzero(scores>0.23).view(-1)#75.43", "\n", "box", "=", "box", "[", "pos_idxs", "]", "\n", "box", ".", "add_field", "(", "\"texts\"", ",", "target", ".", "get_field", "(", "\"texts\"", ")", ")", "\n", "box", ".", "add_field", "(", "\"scale\"", ",", "target", ".", "get_field", "(", "\"scale\"", ")", ")", "\n", "box", ".", "add_field", "(", "\"path\"", ",", "target", ".", "get_field", "(", "\"path\"", ")", ")", "\n", "# box.add_field(\"y_trues\", target.get_field(\"y_trues\"))", "\n", "new_boxes", ".", "append", "(", "box", ")", "\n", "", "image_names", "=", "[", "os", ".", "path", ".", "basename", "(", "str", "(", "image", ".", "get_field", "(", "\"path\"", ")", ")", ")", "for", "image", "in", "new_boxes", "]", "\n", "results", ",", "other", "=", "self", ".", "head", "(", "rec_features", ",", "{", "\"retrieval_samples\"", ":", "new_boxes", "}", ",", "images", ",", "is_words", "=", "is_words", ")", "\n", "return", "results", ",", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.align.align.build_align_head": [[305, 312], ["maskrcnn_benchmark.modeling.registry.ONE_STAGE_HEADS.register", "align.AlignModule", "maskrcnn_benchmark.modeling.matcher.Matcher"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register"], ["", "", "", "@", "registry", ".", "ONE_STAGE_HEADS", ".", "register", "(", "\"align\"", ")", "\n", "def", "build_align_head", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "return", "AlignModule", "(", "cfg", ",", "in_channels", ",", "\n", "Matcher", "(", "\n", "0.7", ",", "\n", "0.5", ",", "\n", "allow_low_quality_matches", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.rpn.RPNHeadConvRegressor.__init__": [[20, 36], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ",", "num_anchors", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            cfg              : config\n            in_channels (int): number of channels of the input feature\n            num_anchors (int): number of anchors to be predicted\n        \"\"\"", "\n", "super", "(", "RPNHeadConvRegressor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cls_logits", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "num_anchors", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "num_anchors", "*", "4", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", "\n", ")", "\n", "\n", "for", "l", "in", "[", "self", ".", "cls_logits", ",", "self", ".", "bbox_pred", "]", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.rpn.RPNHeadConvRegressor.forward": [[37, 43], ["isinstance", "rpn.RPNHeadConvRegressor.cls_logits", "rpn.RPNHeadConvRegressor.bbox_pred"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", "\n", "logits", "=", "[", "self", ".", "cls_logits", "(", "y", ")", "for", "y", "in", "x", "]", "\n", "bbox_reg", "=", "[", "self", ".", "bbox_pred", "(", "y", ")", "for", "y", "in", "x", "]", "\n", "\n", "return", "logits", ",", "bbox_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.rpn.RPNHeadFeatureSingleConv.__init__": [[50, 66], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            cfg              : config\n            in_channels (int): number of channels of the input feature\n        \"\"\"", "\n", "super", "(", "RPNHeadFeatureSingleConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", "\n", ")", "\n", "\n", "for", "l", "in", "[", "self", ".", "conv", "]", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n", "", "self", ".", "out_channels", "=", "in_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.rpn.RPNHeadFeatureSingleConv.forward": [[67, 72], ["isinstance", "torch.relu", "torch.relu", "rpn.RPNHeadFeatureSingleConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", "\n", "x", "=", "[", "F", ".", "relu", "(", "self", ".", "conv", "(", "z", ")", ")", "for", "z", "in", "x", "]", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.rpn.RPNHead.__init__": [[80, 99], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ",", "num_anchors", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            cfg              : config\n            in_channels (int): number of channels of the input feature\n            num_anchors (int): number of anchors to be predicted\n        \"\"\"", "\n", "super", "(", "RPNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", "\n", ")", "\n", "self", ".", "cls_logits", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "num_anchors", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "num_anchors", "*", "4", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", "\n", ")", "\n", "\n", "for", "l", "in", "[", "self", ".", "conv", ",", "self", ".", "cls_logits", ",", "self", ".", "bbox_pred", "]", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.rpn.RPNHead.forward": [[100, 108], ["torch.relu", "torch.relu", "logits.append", "bbox_reg.append", "rpn.RPNHead.conv", "rpn.RPNHead.cls_logits", "rpn.RPNHead.bbox_pred"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "logits", "=", "[", "]", "\n", "bbox_reg", "=", "[", "]", "\n", "for", "feature", "in", "x", ":", "\n", "            ", "t", "=", "F", ".", "relu", "(", "self", ".", "conv", "(", "feature", ")", ")", "\n", "logits", ".", "append", "(", "self", ".", "cls_logits", "(", "t", ")", ")", "\n", "bbox_reg", ".", "append", "(", "self", ".", "bbox_pred", "(", "t", ")", ")", "\n", "", "return", "logits", ",", "bbox_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.rpn.RPNModule.__init__": [[116, 140], ["super().__init__", "cfg.clone", "anchor_generator.make_anchor_generator.make_anchor_generator", "rpn_head", "maskrcnn_benchmark.modeling.box_coder.BoxCoder", "inference.make_rpn_postprocessor", "inference.make_rpn_postprocessor", "loss.make_rpn_loss_evaluator", "anchor_generator.make_anchor_generator.make_anchor_generator.num_anchors_per_location"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.make_anchor_generator", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.inference.make_rpn_postprocessor", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.inference.make_rpn_postprocessor", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.loss.make_rpn_loss_evaluator", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.AnchorGenerator.num_anchors_per_location"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "RPNModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "\n", "anchor_generator", "=", "make_anchor_generator", "(", "cfg", ")", "\n", "\n", "rpn_head", "=", "registry", ".", "RPN_HEADS", "[", "cfg", ".", "MODEL", ".", "RPN", ".", "RPN_HEAD", "]", "\n", "head", "=", "rpn_head", "(", "\n", "cfg", ",", "in_channels", ",", "anchor_generator", ".", "num_anchors_per_location", "(", ")", "[", "0", "]", "\n", ")", "\n", "\n", "rpn_box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "\n", "box_selector_train", "=", "make_rpn_postprocessor", "(", "cfg", ",", "rpn_box_coder", ",", "is_train", "=", "True", ")", "\n", "box_selector_test", "=", "make_rpn_postprocessor", "(", "cfg", ",", "rpn_box_coder", ",", "is_train", "=", "False", ")", "\n", "\n", "loss_evaluator", "=", "make_rpn_loss_evaluator", "(", "cfg", ",", "rpn_box_coder", ")", "\n", "\n", "self", ".", "anchor_generator", "=", "anchor_generator", "\n", "self", ".", "head", "=", "head", "\n", "self", ".", "box_selector_train", "=", "box_selector_train", "\n", "self", ".", "box_selector_test", "=", "box_selector_test", "\n", "self", ".", "loss_evaluator", "=", "loss_evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.rpn.RPNModule.forward": [[141, 164], ["rpn.RPNModule.head", "rpn.RPNModule.anchor_generator", "rpn.RPNModule._forward_train", "rpn.RPNModule._forward_test"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule._forward_train", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule._forward_test"], ["", "def", "forward", "(", "self", ",", "images", ",", "features", ",", "targets", "=", "None", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            images (ImageList): images for which we want to compute the predictions\n            features (list[Tensor]): features computed from the images that are\n                used for computing the predictions. Each tensor in the list\n                correspond to different feature levels\n            targets (list[BoxList): ground-truth boxes present in the image (optional)\n\n        Returns:\n            boxes (list[BoxList]): the predicted boxes from the RPN, one BoxList per\n                image.\n            losses (dict[Tensor]): the losses for the model during training. During\n                testing, it is an empty dict.\n        \"\"\"", "\n", "objectness", ",", "rpn_box_regression", "=", "self", ".", "head", "(", "features", ")", "\n", "anchors", "=", "self", ".", "anchor_generator", "(", "images", ",", "features", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_forward_train", "(", "anchors", ",", "objectness", ",", "\n", "rpn_box_regression", ",", "targets", ",", "prefix", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_forward_test", "(", "anchors", ",", "objectness", ",", "rpn_box_regression", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.rpn.RPNModule._forward_train": [[165, 188], ["rpn.RPNModule.loss_evaluator", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "rpn.RPNModule.box_selector_train"], "methods", ["None"], ["", "", "def", "_forward_train", "(", "self", ",", "anchors", ",", "objectness", ",", "rpn_box_regression", ",", "\n", "targets", ",", "prefix", ")", ":", "\n", "        ", "if", "self", ".", "cfg", ".", "MODEL", ".", "RPN_ONLY", ":", "\n", "# When training an RPN-only model, the loss is determined by the", "\n", "# predicted objectness and rpn_box_regression values and there is", "\n", "# no need to transform the anchors into predicted boxes; this is an", "\n", "# optimization that avoids the unnecessary transformation.", "\n", "            ", "boxes", "=", "anchors", "\n", "", "else", ":", "\n", "# For end-to-end models, anchors must be transformed into boxes and", "\n", "# sampled into a training batch.", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "boxes", "=", "self", ".", "box_selector_train", "(", "\n", "anchors", ",", "objectness", ",", "rpn_box_regression", ",", "targets", "\n", ")", "\n", "", "", "loss_objectness", ",", "loss_rpn_box_reg", "=", "self", ".", "loss_evaluator", "(", "\n", "anchors", ",", "objectness", ",", "rpn_box_regression", ",", "targets", "\n", ")", "\n", "losses", "=", "{", "\n", "prefix", "+", "\"loss_objectness\"", ":", "loss_objectness", ",", "\n", "prefix", "+", "\"loss_rpn_box_reg\"", ":", "loss_rpn_box_reg", ",", "\n", "}", "\n", "return", "boxes", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.rpn.RPNModule._forward_test": [[189, 201], ["rpn.RPNModule.box_selector_test", "box.get_field().sort", "zip", "box.get_field"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["", "def", "_forward_test", "(", "self", ",", "anchors", ",", "objectness", ",", "rpn_box_regression", ")", ":", "\n", "        ", "boxes", "=", "self", ".", "box_selector_test", "(", "anchors", ",", "objectness", ",", "rpn_box_regression", ")", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "RPN_ONLY", ":", "\n", "# For end-to-end models, the RPN proposals are an intermediate state", "\n", "# and don't bother to sort them in decreasing score order. For RPN-only", "\n", "# models, the proposals are the final output and we return them in", "\n", "# high-to-low confidence order.", "\n", "            ", "inds", "=", "[", "\n", "box", ".", "get_field", "(", "\"objectness\"", ")", ".", "sort", "(", "descending", "=", "True", ")", "[", "1", "]", "for", "box", "in", "boxes", "\n", "]", "\n", "boxes", "=", "[", "box", "[", "ind", "]", "for", "box", ",", "ind", "in", "zip", "(", "boxes", ",", "inds", ")", "]", "\n", "", "return", "boxes", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.rpn.build_rpn": [[203, 213], ["rpn.RPNModule", "maskrcnn_benchmark.modeling.rpn.fcos.fcos.build_fcos", "maskrcnn_benchmark.modeling.rpn.retinanet.retinanet.build_retinanet"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.build_fcos", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.retinanet.build_retinanet"], ["", "", "def", "build_rpn", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "\"\"\"\n    This gives the gist of it. Not super important because it doesn't change as much\n    \"\"\"", "\n", "if", "cfg", ".", "MODEL", ".", "FCOS_ON", ":", "\n", "        ", "return", "build_fcos", "(", "cfg", ",", "in_channels", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "RETINANET_ON", ":", "\n", "        ", "return", "build_retinanet", "(", "cfg", ",", "in_channels", ")", "\n", "\n", "", "return", "RPNModule", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.__init__": [[16, 20], ["torch.nn.Module.__init__", "anchor_generator.BufferList.extend"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend"], ["def", "__init__", "(", "self", ",", "buffers", "=", "None", ")", ":", "\n", "        ", "super", "(", "BufferList", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "buffers", "is", "not", "None", ":", "\n", "            ", "self", ".", "extend", "(", "buffers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend": [[21, 26], ["len", "enumerate", "anchor_generator.BufferList.register_buffer", "str"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "def", "extend", "(", "self", ",", "buffers", ")", ":", "\n", "        ", "offset", "=", "len", "(", "self", ")", "\n", "for", "i", ",", "buffer", "in", "enumerate", "(", "buffers", ")", ":", "\n", "            ", "self", ".", "register_buffer", "(", "str", "(", "offset", "+", "i", ")", ",", "buffer", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.__len__": [[27, 29], ["len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_buffers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.__iter__": [[30, 32], ["iter", "anchor_generator.BufferList._buffers.values"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "_buffers", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.AnchorGenerator.__init__": [[40, 69], ["torch.nn.Module.__init__", "anchor_generator.BufferList", "len", "generate_anchors().float", "len", "len", "RuntimeError", "generate_anchors().float", "zip", "anchor_generator.generate_anchors", "anchor_generator.generate_anchors", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.generate_anchors", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.generate_anchors"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sizes", "=", "(", "128", ",", "256", ",", "512", ")", ",", "\n", "aspect_ratios", "=", "(", "0.5", ",", "1.0", ",", "2.0", ")", ",", "\n", "anchor_strides", "=", "(", "8", ",", "16", ",", "32", ")", ",", "\n", "straddle_thresh", "=", "0", ",", "\n", ")", ":", "\n", "        ", "super", "(", "AnchorGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "len", "(", "anchor_strides", ")", "==", "1", ":", "\n", "            ", "anchor_stride", "=", "anchor_strides", "[", "0", "]", "\n", "cell_anchors", "=", "[", "\n", "generate_anchors", "(", "anchor_stride", ",", "sizes", ",", "aspect_ratios", ")", ".", "float", "(", ")", "\n", "]", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "anchor_strides", ")", "!=", "len", "(", "sizes", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"FPN should have #anchor_strides == #sizes\"", ")", "\n", "\n", "", "cell_anchors", "=", "[", "\n", "generate_anchors", "(", "\n", "anchor_stride", ",", "\n", "size", "if", "isinstance", "(", "size", ",", "(", "tuple", ",", "list", ")", ")", "else", "(", "size", ",", ")", ",", "\n", "aspect_ratios", "\n", ")", ".", "float", "(", ")", "\n", "for", "anchor_stride", ",", "size", "in", "zip", "(", "anchor_strides", ",", "sizes", ")", "\n", "]", "\n", "", "self", ".", "strides", "=", "anchor_strides", "\n", "self", ".", "cell_anchors", "=", "BufferList", "(", "cell_anchors", ")", "\n", "self", ".", "straddle_thresh", "=", "straddle_thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.AnchorGenerator.num_anchors_per_location": [[70, 72], ["len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "num_anchors_per_location", "(", "self", ")", ":", "\n", "        ", "return", "[", "len", "(", "cell_anchors", ")", "for", "cell_anchors", "in", "self", ".", "cell_anchors", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.AnchorGenerator.grid_anchors": [[73, 96], ["zip", "torch.arange", "torch.arange", "torch.meshgrid", "shift_x.reshape.reshape.reshape", "shift_y.reshape.reshape.reshape", "torch.stack", "anchors.append", "torch.stack.view", "base_anchors.view"], "methods", ["None"], ["", "def", "grid_anchors", "(", "self", ",", "grid_sizes", ")", ":", "\n", "        ", "anchors", "=", "[", "]", "\n", "for", "size", ",", "stride", ",", "base_anchors", "in", "zip", "(", "\n", "grid_sizes", ",", "self", ".", "strides", ",", "self", ".", "cell_anchors", "\n", ")", ":", "\n", "            ", "grid_height", ",", "grid_width", "=", "size", "\n", "device", "=", "base_anchors", ".", "device", "\n", "shifts_x", "=", "torch", ".", "arange", "(", "\n", "0", ",", "grid_width", "*", "stride", ",", "step", "=", "stride", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n", "shifts_y", "=", "torch", ".", "arange", "(", "\n", "0", ",", "grid_height", "*", "stride", ",", "step", "=", "stride", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n", "shift_y", ",", "shift_x", "=", "torch", ".", "meshgrid", "(", "shifts_y", ",", "shifts_x", ")", "\n", "shift_x", "=", "shift_x", ".", "reshape", "(", "-", "1", ")", "\n", "shift_y", "=", "shift_y", ".", "reshape", "(", "-", "1", ")", "\n", "shifts", "=", "torch", ".", "stack", "(", "(", "shift_x", ",", "shift_y", ",", "shift_x", ",", "shift_y", ")", ",", "dim", "=", "1", ")", "\n", "\n", "anchors", ".", "append", "(", "\n", "(", "shifts", ".", "view", "(", "-", "1", ",", "1", ",", "4", ")", "+", "base_anchors", ".", "view", "(", "1", ",", "-", "1", ",", "4", ")", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.AnchorGenerator.add_visibility_to": [[97, 111], ["boxlist.add_field", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field"], ["", "def", "add_visibility_to", "(", "self", ",", "boxlist", ")", ":", "\n", "        ", "image_width", ",", "image_height", "=", "boxlist", ".", "size", "\n", "anchors", "=", "boxlist", ".", "bbox", "\n", "if", "self", ".", "straddle_thresh", ">=", "0", ":", "\n", "            ", "inds_inside", "=", "(", "\n", "(", "anchors", "[", "...", ",", "0", "]", ">=", "-", "self", ".", "straddle_thresh", ")", "\n", "&", "(", "anchors", "[", "...", ",", "1", "]", ">=", "-", "self", ".", "straddle_thresh", ")", "\n", "&", "(", "anchors", "[", "...", ",", "2", "]", "<", "image_width", "+", "self", ".", "straddle_thresh", ")", "\n", "&", "(", "anchors", "[", "...", ",", "3", "]", "<", "image_height", "+", "self", ".", "straddle_thresh", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "anchors", ".", "device", "\n", "inds_inside", "=", "torch", ".", "ones", "(", "anchors", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "device", ")", "\n", "", "boxlist", ".", "add_field", "(", "\"visibility\"", ",", "inds_inside", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.AnchorGenerator.forward": [[112, 126], ["anchor_generator.AnchorGenerator.grid_anchors", "enumerate", "anchors.append", "maskrcnn_benchmark.structures.bounding_box.BoxList", "anchor_generator.AnchorGenerator.add_visibility_to", "anchors_in_image.append"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.AnchorGenerator.grid_anchors", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.AnchorGenerator.add_visibility_to"], ["", "def", "forward", "(", "self", ",", "image_list", ",", "feature_maps", ")", ":", "\n", "        ", "grid_sizes", "=", "[", "feature_map", ".", "shape", "[", "-", "2", ":", "]", "for", "feature_map", "in", "feature_maps", "]", "\n", "anchors_over_all_feature_maps", "=", "self", ".", "grid_anchors", "(", "grid_sizes", ")", "\n", "anchors", "=", "[", "]", "\n", "for", "i", ",", "(", "image_height", ",", "image_width", ")", "in", "enumerate", "(", "image_list", ".", "image_sizes", ")", ":", "\n", "            ", "anchors_in_image", "=", "[", "]", "\n", "for", "anchors_per_feature_map", "in", "anchors_over_all_feature_maps", ":", "\n", "                ", "boxlist", "=", "BoxList", "(", "\n", "anchors_per_feature_map", ",", "(", "image_width", ",", "image_height", ")", ",", "mode", "=", "\"xyxy\"", "\n", ")", "\n", "self", ".", "add_visibility_to", "(", "boxlist", ")", "\n", "anchors_in_image", ".", "append", "(", "boxlist", ")", "\n", "", "anchors", ".", "append", "(", "anchors_in_image", ")", "\n", "", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.make_anchor_generator": [[128, 144], ["anchor_generator.AnchorGenerator", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "def", "make_anchor_generator", "(", "config", ")", ":", "\n", "    ", "anchor_sizes", "=", "config", ".", "MODEL", ".", "RPN", ".", "ANCHOR_SIZES", "\n", "aspect_ratios", "=", "config", ".", "MODEL", ".", "RPN", ".", "ASPECT_RATIOS", "\n", "anchor_stride", "=", "config", ".", "MODEL", ".", "RPN", ".", "ANCHOR_STRIDE", "\n", "straddle_thresh", "=", "config", ".", "MODEL", ".", "RPN", ".", "STRADDLE_THRESH", "\n", "\n", "if", "config", ".", "MODEL", ".", "RPN", ".", "USE_FPN", ":", "\n", "        ", "assert", "len", "(", "anchor_stride", ")", "==", "len", "(", "\n", "anchor_sizes", "\n", ")", ",", "\"FPN should have len(ANCHOR_STRIDE) == len(ANCHOR_SIZES)\"", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "anchor_stride", ")", "==", "1", ",", "\"Non-FPN should have a single ANCHOR_STRIDE\"", "\n", "", "anchor_generator", "=", "AnchorGenerator", "(", "\n", "anchor_sizes", ",", "aspect_ratios", ",", "anchor_stride", ",", "straddle_thresh", "\n", ")", "\n", "return", "anchor_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.make_anchor_generator_retinanet": [[146, 167], ["anchor_generator.AnchorGenerator", "len", "len", "range", "new_anchor_sizes.append", "tuple", "per_layer_anchor_sizes.append", "tuple", "float"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "make_anchor_generator_retinanet", "(", "config", ")", ":", "\n", "    ", "anchor_sizes", "=", "config", ".", "MODEL", ".", "RETINANET", ".", "ANCHOR_SIZES", "\n", "aspect_ratios", "=", "config", ".", "MODEL", ".", "RETINANET", ".", "ASPECT_RATIOS", "\n", "anchor_strides", "=", "config", ".", "MODEL", ".", "RETINANET", ".", "ANCHOR_STRIDES", "\n", "straddle_thresh", "=", "config", ".", "MODEL", ".", "RETINANET", ".", "STRADDLE_THRESH", "\n", "octave", "=", "config", ".", "MODEL", ".", "RETINANET", ".", "OCTAVE", "\n", "scales_per_octave", "=", "config", ".", "MODEL", ".", "RETINANET", ".", "SCALES_PER_OCTAVE", "\n", "\n", "assert", "len", "(", "anchor_strides", ")", "==", "len", "(", "anchor_sizes", ")", ",", "\"Only support FPN now\"", "\n", "new_anchor_sizes", "=", "[", "]", "\n", "for", "size", "in", "anchor_sizes", ":", "\n", "        ", "per_layer_anchor_sizes", "=", "[", "]", "\n", "for", "scale_per_octave", "in", "range", "(", "scales_per_octave", ")", ":", "\n", "            ", "octave_scale", "=", "octave", "**", "(", "scale_per_octave", "/", "float", "(", "scales_per_octave", ")", ")", "\n", "per_layer_anchor_sizes", ".", "append", "(", "octave_scale", "*", "size", ")", "\n", "", "new_anchor_sizes", ".", "append", "(", "tuple", "(", "per_layer_anchor_sizes", ")", ")", "\n", "\n", "", "anchor_generator", "=", "AnchorGenerator", "(", "\n", "tuple", "(", "new_anchor_sizes", ")", ",", "aspect_ratios", ",", "anchor_strides", ",", "straddle_thresh", "\n", ")", "\n", "return", "anchor_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.generate_anchors": [[220, 231], ["anchor_generator._generate_anchors", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator._generate_anchors"], ["", "def", "generate_anchors", "(", "\n", "stride", "=", "16", ",", "sizes", "=", "(", "32", ",", "64", ",", "128", ",", "256", ",", "512", ")", ",", "aspect_ratios", "=", "(", "0.5", ",", "1", ",", "2", ")", "\n", ")", ":", "\n", "    ", "\"\"\"Generates a matrix of anchor boxes in (x1, y1, x2, y2) format. Anchors\n    are centered on stride / 2, have (approximate) sqrt areas of the specified\n    sizes, and aspect ratios as given.\n    \"\"\"", "\n", "return", "_generate_anchors", "(", "\n", "stride", ",", "\n", "np", ".", "array", "(", "sizes", ",", "dtype", "=", "np", ".", "float", ")", "/", "stride", ",", "\n", "np", ".", "array", "(", "aspect_ratios", ",", "dtype", "=", "np", ".", "float", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator._generate_anchors": [[234, 244], ["anchor_generator._ratio_enum", "numpy.vstack", "torch.from_numpy", "numpy.array", "anchor_generator._scale_enum", "range"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator._ratio_enum", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator._scale_enum"], ["", "def", "_generate_anchors", "(", "base_size", ",", "scales", ",", "aspect_ratios", ")", ":", "\n", "    ", "\"\"\"Generate anchor (reference) windows by enumerating aspect ratios X\n    scales wrt a reference (0, 0, base_size - 1, base_size - 1) window.\n    \"\"\"", "\n", "anchor", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "base_size", ",", "base_size", "]", ",", "dtype", "=", "np", ".", "float", ")", "-", "1", "\n", "anchors", "=", "_ratio_enum", "(", "anchor", ",", "aspect_ratios", ")", "\n", "anchors", "=", "np", ".", "vstack", "(", "\n", "[", "_scale_enum", "(", "anchors", "[", "i", ",", ":", "]", ",", "scales", ")", "for", "i", "in", "range", "(", "anchors", ".", "shape", "[", "0", "]", ")", "]", "\n", ")", "\n", "return", "torch", ".", "from_numpy", "(", "anchors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator._whctrs": [[246, 253], ["None"], "function", ["None"], ["", "def", "_whctrs", "(", "anchor", ")", ":", "\n", "    ", "\"\"\"Return width, height, x center, and y center for an anchor (window).\"\"\"", "\n", "w", "=", "anchor", "[", "2", "]", "-", "anchor", "[", "0", "]", "+", "1", "\n", "h", "=", "anchor", "[", "3", "]", "-", "anchor", "[", "1", "]", "+", "1", "\n", "x_ctr", "=", "anchor", "[", "0", "]", "+", "0.5", "*", "(", "w", "-", "1", ")", "\n", "y_ctr", "=", "anchor", "[", "1", "]", "+", "0.5", "*", "(", "h", "-", "1", ")", "\n", "return", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator._mkanchors": [[255, 270], ["numpy.hstack"], "function", ["None"], ["", "def", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", ":", "\n", "    ", "\"\"\"Given a vector of widths (ws) and heights (hs) around a center\n    (x_ctr, y_ctr), output a set of anchors (windows).\n    \"\"\"", "\n", "ws", "=", "ws", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "hs", "=", "hs", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "anchors", "=", "np", ".", "hstack", "(", "\n", "(", "\n", "x_ctr", "-", "0.5", "*", "(", "ws", "-", "1", ")", ",", "\n", "y_ctr", "-", "0.5", "*", "(", "hs", "-", "1", ")", ",", "\n", "x_ctr", "+", "0.5", "*", "(", "ws", "-", "1", ")", ",", "\n", "y_ctr", "+", "0.5", "*", "(", "hs", "-", "1", ")", ",", "\n", ")", "\n", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator._ratio_enum": [[272, 281], ["anchor_generator._whctrs", "numpy.round", "numpy.round", "anchor_generator._mkanchors", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator._whctrs", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator._mkanchors"], ["", "def", "_ratio_enum", "(", "anchor", ",", "ratios", ")", ":", "\n", "    ", "\"\"\"Enumerate a set of anchors for each aspect ratio wrt an anchor.\"\"\"", "\n", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "=", "_whctrs", "(", "anchor", ")", "\n", "size", "=", "w", "*", "h", "\n", "size_ratios", "=", "size", "/", "ratios", "\n", "ws", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "size_ratios", ")", ")", "\n", "hs", "=", "np", ".", "round", "(", "ws", "*", "ratios", ")", "\n", "anchors", "=", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator._scale_enum": [[283, 290], ["anchor_generator._whctrs", "anchor_generator._mkanchors"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator._whctrs", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator._mkanchors"], ["", "def", "_scale_enum", "(", "anchor", ",", "scales", ")", ":", "\n", "    ", "\"\"\"Enumerate a set of anchors for each scale wrt an anchor.\"\"\"", "\n", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "=", "_whctrs", "(", "anchor", ")", "\n", "ws", "=", "w", "*", "scales", "\n", "hs", "=", "h", "*", "scales", "\n", "anchors", "=", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", "\n", "return", "anchors", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.inference.RPNPostProcessor.__init__": [[19, 52], ["super().__init__", "maskrcnn_benchmark.modeling.box_coder.BoxCoder"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "pre_nms_top_n", ",", "\n", "post_nms_top_n", ",", "\n", "nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n", "fpn_post_nms_per_batch", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            pre_nms_top_n (int)\n            post_nms_top_n (int)\n            nms_thresh (float)\n            min_size (int)\n            box_coder (BoxCoder)\n            fpn_post_nms_top_n (int)\n        \"\"\"", "\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n", "if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "self", ".", "fpn_post_nms_per_batch", "=", "fpn_post_nms_per_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.inference.RPNPostProcessor.add_gt_proposals": [[53, 75], ["target.copy_with_fields", "gt_box.add_field", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "torch.ones", "zip", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.copy_with_fields", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "# later cat of bbox requires all fields to be present for all bbox", "\n", "# so we need to add a dummy for objectness that's missing", "\n", "for", "gt_box", "in", "gt_boxes", ":", "\n", "            ", "gt_box", ".", "add_field", "(", "\"objectness\"", ",", "torch", ".", "ones", "(", "len", "(", "gt_box", ")", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "proposals", "=", "[", "\n", "cat_boxlist", "(", "(", "proposal", ",", "gt_box", ")", ")", "\n", "for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n", "]", "\n", "\n", "return", "proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.inference.RPNPostProcessor.forward_for_single_feature_map": [[76, 124], ["utils.permute_and_flatten().view", "objectness.sigmoid.sigmoid.sigmoid", "utils.permute_and_flatten", "min", "objectness.sigmoid.sigmoid.topk", "torch.cat", "inference.RPNPostProcessor.box_coder.decode", "proposals.view.view.view", "zip", "torch.arange", "torch.cat.reshape", "utils.permute_and_flatten.view", "torch.cat.view", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.clip_to_image", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms", "result.append", "utils.permute_and_flatten"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.utils.permute_and_flatten", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.decode", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.clip_to_image", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.remove_small_boxes", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.boxlist_nms", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.utils.permute_and_flatten"], ["", "def", "forward_for_single_feature_map", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n", "objectness", "=", "permute_and_flatten", "(", "objectness", ",", "N", ",", "A", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "objectness", "=", "objectness", ".", "sigmoid", "(", ")", "\n", "\n", "box_regression", "=", "permute_and_flatten", "(", "box_regression", ",", "N", ",", "A", ",", "4", ",", "H", ",", "W", ")", "\n", "\n", "num_anchors", "=", "A", "*", "H", "*", "W", "\n", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n", "box_regression", "=", "box_regression", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "anchors", "]", "\n", "concat_anchors", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "concat_anchors", "=", "concat_anchors", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "-", "1", ",", "4", ")", ",", "concat_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "proposals", "=", "proposals", ".", "view", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "proposal", ",", "score", ",", "im_shape", "in", "zip", "(", "proposals", ",", "objectness", ",", "image_shapes", ")", ":", "\n", "            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "boxlist", "=", "remove_small_boxes", "(", "boxlist", ",", "self", ".", "min_size", ")", "\n", "boxlist", "=", "boxlist_nms", "(", "\n", "boxlist", ",", "\n", "self", ".", "nms_thresh", ",", "\n", "max_proposals", "=", "self", ".", "post_nms_top_n", ",", "\n", "score_field", "=", "\"objectness\"", ",", "\n", ")", "\n", "result", ".", "append", "(", "boxlist", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.inference.RPNPostProcessor.forward": [[125, 153], ["len", "list", "zip", "list", "zip", "sampled_boxes.append", "zip", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "inference.RPNPostProcessor.select_over_all_levels", "inference.RPNPostProcessor.add_gt_proposals", "inference.RPNPostProcessor.forward_for_single_feature_map"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.inference.FCOSPostProcessor.select_over_all_levels", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.inference.RetinaNetPostProcessor.add_gt_proposals", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.inference.FCOSPostProcessor.forward_for_single_feature_map"], ["", "def", "forward", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[list[BoxList]]\n            objectness: list[tensor]\n            box_regression: list[tensor]\n\n        Returns:\n            boxlists (list[BoxList]): the post-processed anchors, after\n                applying box decoding and NMS\n        \"\"\"", "\n", "sampled_boxes", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "objectness", ")", "\n", "anchors", "=", "list", "(", "zip", "(", "*", "anchors", ")", ")", "\n", "for", "a", ",", "o", ",", "b", "in", "zip", "(", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "            ", "sampled_boxes", ".", "append", "(", "self", ".", "forward_for_single_feature_map", "(", "a", ",", "o", ",", "b", ")", ")", "\n", "\n", "", "boxlists", "=", "list", "(", "zip", "(", "*", "sampled_boxes", ")", ")", "\n", "boxlists", "=", "[", "cat_boxlist", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "\n", "if", "num_levels", ">", "1", ":", "\n", "            ", "boxlists", "=", "self", ".", "select_over_all_levels", "(", "boxlists", ")", "\n", "\n", "# append ground-truth bboxes to proposals", "\n", "", "if", "self", ".", "training", "and", "targets", "is", "not", "None", ":", "\n", "            ", "boxlists", "=", "self", ".", "add_gt_proposals", "(", "boxlists", ",", "targets", ")", "\n", "\n", "", "return", "boxlists", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.inference.RPNPostProcessor.select_over_all_levels": [[154, 182], ["len", "torch.cat", "min", "torch.topk", "torch.zeros_like", "inds_mask.split.split.split", "range", "range", "len", "len", "boxlists[].get_field", "min", "torch.topk", "boxlist.get_field", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "select_over_all_levels", "(", "self", ",", "boxlists", ")", ":", "\n", "        ", "num_images", "=", "len", "(", "boxlists", ")", "\n", "# different behavior during training and during testing:", "\n", "# during training, post_nms_top_n is over *all* the proposals combined, while", "\n", "# during testing, it is over the proposals for each image", "\n", "# NOTE: it should be per image, and not per batch. However, to be consistent ", "\n", "# with Detectron, the default is per batch (see Issue #672)", "\n", "if", "self", ".", "training", "and", "self", ".", "fpn_post_nms_per_batch", ":", "\n", "            ", "objectness", "=", "torch", ".", "cat", "(", "\n", "[", "boxlist", ".", "get_field", "(", "\"objectness\"", ")", "for", "boxlist", "in", "boxlists", "]", ",", "dim", "=", "0", "\n", ")", "\n", "box_sizes", "=", "[", "len", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", ")", "\n", "inds_mask", "=", "torch", ".", "zeros_like", "(", "objectness", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "inds_mask", "[", "inds_sorted", "]", "=", "1", "\n", "inds_mask", "=", "inds_mask", ".", "split", "(", "box_sizes", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_mask", "[", "i", "]", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "objectness", "=", "boxlists", "[", "i", "]", ".", "get_field", "(", "\"objectness\"", ")", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "\n", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", "\n", ")", "\n", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_sorted", "]", "\n", "", "", "return", "boxlists", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.inference.make_rpn_postprocessor": [[184, 207], ["inference.RPNPostProcessor"], "function", ["None"], ["", "", "def", "make_rpn_postprocessor", "(", "config", ",", "rpn_box_coder", ",", "is_train", ")", ":", "\n", "    ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TEST", "\n", "\n", "", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TRAIN", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TEST", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TEST", "\n", "", "fpn_post_nms_per_batch", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_PER_BATCH", "\n", "nms_thresh", "=", "config", ".", "MODEL", ".", "RPN", ".", "NMS_THRESH", "\n", "min_size", "=", "config", ".", "MODEL", ".", "RPN", ".", "MIN_SIZE", "\n", "box_selector", "=", "RPNPostProcessor", "(", "\n", "pre_nms_top_n", "=", "pre_nms_top_n", ",", "\n", "post_nms_top_n", "=", "post_nms_top_n", ",", "\n", "nms_thresh", "=", "nms_thresh", ",", "\n", "min_size", "=", "min_size", ",", "\n", "box_coder", "=", "rpn_box_coder", ",", "\n", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", ",", "\n", "fpn_post_nms_per_batch", "=", "fpn_post_nms_per_batch", ",", "\n", ")", "\n", "return", "box_selector", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.loss.RPNLossComputation.__init__": [[26, 41], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "proposal_matcher", ",", "fg_bg_sampler", ",", "box_coder", ",", "\n", "generate_labels_func", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposal_matcher (Matcher)\n            fg_bg_sampler (BalancedPositiveNegativeSampler)\n            box_coder (BoxCoder)\n        \"\"\"", "\n", "# self.target_preparator = target_preparator", "\n", "self", ".", "proposal_matcher", "=", "proposal_matcher", "\n", "self", ".", "fg_bg_sampler", "=", "fg_bg_sampler", "\n", "self", ".", "box_coder", "=", "box_coder", "\n", "self", ".", "copied_fields", "=", "[", "]", "\n", "self", ".", "generate_labels_func", "=", "generate_labels_func", "\n", "self", ".", "discard_cases", "=", "[", "'not_visibility'", ",", "'between_thresholds'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.loss.RPNLossComputation.match_targets_to_anchors": [[42, 55], ["maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "loss.RPNLossComputation.proposal_matcher", "target.copy_with_fields.copy_with_fields.copy_with_fields", "matched_targets.add_field", "loss.RPNLossComputation.clamp"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.copy_with_fields", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field"], ["", "def", "match_targets_to_anchors", "(", "self", ",", "anchor", ",", "target", ",", "copied_fields", "=", "[", "]", ")", ":", "\n", "        ", "match_quality_matrix", "=", "boxlist_iou", "(", "target", ",", "anchor", ")", "\n", "matched_idxs", "=", "self", ".", "proposal_matcher", "(", "match_quality_matrix", ")", "\n", "# RPN doesn't need any fields from target", "\n", "# for creating the labels, so clear them all", "\n", "target", "=", "target", ".", "copy_with_fields", "(", "copied_fields", ")", "\n", "# get the targets corresponding GT for each anchor", "\n", "# NB: need to clamp the indices because we can have a single", "\n", "# GT in the image, and matched_idxs can be -2, which goes", "\n", "# out of bounds", "\n", "matched_targets", "=", "target", "[", "matched_idxs", ".", "clamp", "(", "min", "=", "0", ")", "]", "\n", "matched_targets", ".", "add_field", "(", "\"matched_idxs\"", ",", "matched_idxs", ")", "\n", "return", "matched_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.loss.RPNLossComputation.prepare_targets": [[56, 90], ["zip", "loss.RPNLossComputation.match_targets_to_anchors", "loss.RPNLossComputation.get_field", "loss.RPNLossComputation.generate_labels_func", "labels_per_image.to.to.to", "loss.RPNLossComputation.box_coder.encode", "labels.append", "regression_targets.append", "anchors_per_image.get_field"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.loss.RPNLossComputation.match_targets_to_anchors", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.encode", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["", "def", "prepare_targets", "(", "self", ",", "anchors", ",", "targets", ")", ":", "\n", "        ", "labels", "=", "[", "]", "\n", "regression_targets", "=", "[", "]", "\n", "for", "anchors_per_image", ",", "targets_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n", "            ", "matched_targets", "=", "self", ".", "match_targets_to_anchors", "(", "\n", "anchors_per_image", ",", "targets_per_image", ",", "self", ".", "copied_fields", "\n", ")", "\n", "\n", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "self", ".", "generate_labels_func", "(", "matched_targets", ")", "\n", "labels_per_image", "=", "labels_per_image", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# Background (negative examples)", "\n", "bg_indices", "=", "matched_idxs", "==", "Matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "labels_per_image", "[", "bg_indices", "]", "=", "0", "\n", "\n", "# discard anchors that go out of the boundaries of the image", "\n", "if", "\"not_visibility\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "labels_per_image", "[", "~", "anchors_per_image", ".", "get_field", "(", "\"visibility\"", ")", "]", "=", "-", "1", "\n", "\n", "# discard indices that are between thresholds", "\n", "", "if", "\"between_thresholds\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "inds_to_discard", "=", "matched_idxs", "==", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_per_image", "[", "inds_to_discard", "]", "=", "-", "1", "\n", "\n", "# compute regression targets", "\n", "", "regression_targets_per_image", "=", "self", ".", "box_coder", ".", "encode", "(", "\n", "matched_targets", ".", "bbox", ",", "anchors_per_image", ".", "bbox", "\n", ")", "\n", "\n", "labels", ".", "append", "(", "labels_per_image", ")", "\n", "regression_targets", ".", "append", "(", "regression_targets_per_image", ")", "\n", "\n", "", "return", "labels", ",", "regression_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.loss.RPNLossComputation.__call__": [[92, 132], ["loss.RPNLossComputation.prepare_targets", "loss.RPNLossComputation.fg_bg_sampler", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.cat", "utils.concat_box_prediction_layers", "objectness.squeeze.squeeze.squeeze", "torch.cat", "torch.cat", "torch.nn.functional.binary_cross_entropy_with_logits", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "maskrcnn_benchmark.layers.smooth_l1_loss", "torch.cat.numel", "torch.nonzero", "torch.nonzero", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.CTCPredictor.prepare_targets", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.utils.concat_box_prediction_layers", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.smooth_l1_loss.smooth_l1_loss", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat"], ["", "def", "__call__", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors (list[BoxList])\n            objectness (list[Tensor])\n            box_regression (list[Tensor])\n            targets (list[BoxList])\n\n        Returns:\n            objectness_loss (Tensor)\n            box_loss (Tensor\n        \"\"\"", "\n", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "anchors_per_image", "in", "anchors", "]", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_pos_inds", ",", "sampled_neg_inds", "]", ",", "dim", "=", "0", ")", "\n", "\n", "objectness", ",", "box_regression", "=", "concat_box_prediction_layers", "(", "objectness", ",", "box_regression", ")", "\n", "\n", "objectness", "=", "objectness", ".", "squeeze", "(", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "regression_targets", "=", "torch", ".", "cat", "(", "regression_targets", ",", "dim", "=", "0", ")", "\n", "\n", "box_loss", "=", "smooth_l1_loss", "(", "\n", "box_regression", "[", "sampled_pos_inds", "]", ",", "\n", "regression_targets", "[", "sampled_pos_inds", "]", ",", "\n", "beta", "=", "1.0", "/", "9", ",", "\n", "size_average", "=", "False", ",", "\n", ")", "/", "(", "sampled_inds", ".", "numel", "(", ")", ")", "\n", "\n", "objectness_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "objectness", "[", "sampled_inds", "]", ",", "labels", "[", "sampled_inds", "]", "\n", ")", "\n", "\n", "return", "objectness_loss", ",", "box_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.loss.generate_rpn_labels": [[134, 138], ["matched_targets.get_field"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["", "", "def", "generate_rpn_labels", "(", "matched_targets", ")", ":", "\n", "    ", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "matched_idxs", ">=", "0", "\n", "return", "labels_per_image", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.loss.make_rpn_loss_evaluator": [[140, 158], ["maskrcnn_benchmark.modeling.matcher.Matcher", "balanced_positive_negative_sampler.BalancedPositiveNegativeSampler", "loss.RPNLossComputation"], "function", ["None"], ["", "def", "make_rpn_loss_evaluator", "(", "cfg", ",", "box_coder", ")", ":", "\n", "    ", "matcher", "=", "Matcher", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "FG_IOU_THRESHOLD", ",", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BG_IOU_THRESHOLD", ",", "\n", "allow_low_quality_matches", "=", "True", ",", "\n", ")", "\n", "\n", "fg_bg_sampler", "=", "BalancedPositiveNegativeSampler", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BATCH_SIZE_PER_IMAGE", ",", "cfg", ".", "MODEL", ".", "RPN", ".", "POSITIVE_FRACTION", "\n", ")", "\n", "\n", "loss_evaluator", "=", "RPNLossComputation", "(", "\n", "matcher", ",", "\n", "fg_bg_sampler", ",", "\n", "box_coder", ",", "\n", "generate_rpn_labels", "\n", ")", "\n", "return", "loss_evaluator", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.utils.permute_and_flatten": [[10, 15], ["layer.reshape.view", "layer.reshape.permute", "layer.reshape.reshape"], "function", ["None"], ["    ", "\"\"\"\n    Efficient version of torch.cat that avoids a copy if there is only a single element in a list\n    \"\"\"", "\n", "assert", "isinstance", "(", "tensors", ",", "(", "list", ",", "tuple", ")", ")", "\n", "if", "len", "(", "tensors", ")", "==", "1", ":", "\n", "        ", "return", "tensors", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.utils.concat_box_prediction_layers": [[17, 46], ["zip", "utils.cat().reshape", "utils.cat().reshape", "utils.permute_and_flatten", "box_cls_flattened.append", "utils.permute_and_flatten", "box_regression_flattened.append", "utils.cat", "utils.cat"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.utils.permute_and_flatten", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.utils.permute_and_flatten", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat"], ["", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.retinanet.RetinaNetHead.__init__": [[18, 78], ["super().__init__", "range", "retinanet.RetinaNetHead.add_module", "retinanet.RetinaNetHead.add_module", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "len", "cls_tower.append", "cls_tower.append", "bbox_tower.append", "bbox_tower.append", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "modules.modules", "math.log", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "isinstance", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            in_channels (int): number of channels of the input feature\n            num_anchors (int): number of anchors to be predicted\n        \"\"\"", "\n", "super", "(", "RetinaNetHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# TODO: Implement the sigmoid version first.", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "RETINANET", ".", "NUM_CLASSES", "-", "1", "\n", "num_anchors", "=", "len", "(", "cfg", ".", "MODEL", ".", "RETINANET", ".", "ASPECT_RATIOS", ")", "*", "cfg", ".", "MODEL", ".", "RETINANET", ".", "SCALES_PER_OCTAVE", "\n", "\n", "cls_tower", "=", "[", "]", "\n", "bbox_tower", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "MODEL", ".", "RETINANET", ".", "NUM_CONVS", ")", ":", "\n", "            ", "cls_tower", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", ")", "\n", "cls_tower", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "bbox_tower", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", ")", "\n", "bbox_tower", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "self", ".", "add_module", "(", "'cls_tower'", ",", "nn", ".", "Sequential", "(", "*", "cls_tower", ")", ")", "\n", "self", ".", "add_module", "(", "'bbox_tower'", ",", "nn", ".", "Sequential", "(", "*", "bbox_tower", ")", ")", "\n", "self", ".", "cls_logits", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "num_anchors", "*", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "num_anchors", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", "\n", "# Initialization", "\n", "for", "modules", "in", "[", "self", ".", "cls_tower", ",", "self", ".", "bbox_tower", ",", "self", ".", "cls_logits", ",", "\n", "self", ".", "bbox_pred", "]", ":", "\n", "            ", "for", "l", "in", "modules", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "l", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n", "\n", "# retinanet_bias_init", "\n", "", "", "", "prior_prob", "=", "cfg", ".", "MODEL", ".", "RETINANET", ".", "PRIOR_PROB", "\n", "bias_value", "=", "-", "math", ".", "log", "(", "(", "1", "-", "prior_prob", ")", "/", "prior_prob", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "cls_logits", ".", "bias", ",", "bias_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.retinanet.RetinaNetHead.forward": [[79, 86], ["logits.append", "bbox_reg.append", "retinanet.RetinaNetHead.cls_logits", "retinanet.RetinaNetHead.bbox_pred", "retinanet.RetinaNetHead.cls_tower", "retinanet.RetinaNetHead.bbox_tower"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "logits", "=", "[", "]", "\n", "bbox_reg", "=", "[", "]", "\n", "for", "feature", "in", "x", ":", "\n", "            ", "logits", ".", "append", "(", "self", ".", "cls_logits", "(", "self", ".", "cls_tower", "(", "feature", ")", ")", ")", "\n", "bbox_reg", ".", "append", "(", "self", ".", "bbox_pred", "(", "self", ".", "bbox_tower", "(", "feature", ")", ")", ")", "\n", "", "return", "logits", ",", "bbox_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.retinanet.RetinaNetModule.__init__": [[94, 111], ["super().__init__", "cfg.clone", "anchor_generator.make_anchor_generator_retinanet.make_anchor_generator_retinanet", "retinanet.RetinaNetHead", "maskrcnn_benchmark.modeling.box_coder.BoxCoder", "inference.make_retinanet_postprocessor", "loss.make_retinanet_loss_evaluator"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.make_anchor_generator_retinanet", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.inference.make_retinanet_postprocessor", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.loss.make_retinanet_loss_evaluator"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "RetinaNetModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "\n", "anchor_generator", "=", "make_anchor_generator_retinanet", "(", "cfg", ")", "\n", "head", "=", "RetinaNetHead", "(", "cfg", ",", "in_channels", ")", "\n", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "10.", ",", "10.", ",", "5.", ",", "5.", ")", ")", "\n", "\n", "box_selector_test", "=", "make_retinanet_postprocessor", "(", "cfg", ",", "box_coder", ",", "is_train", "=", "False", ")", "\n", "\n", "loss_evaluator", "=", "make_retinanet_loss_evaluator", "(", "cfg", ",", "box_coder", ")", "\n", "\n", "self", ".", "anchor_generator", "=", "anchor_generator", "\n", "self", ".", "head", "=", "head", "\n", "self", ".", "box_selector_test", "=", "box_selector_test", "\n", "self", ".", "loss_evaluator", "=", "loss_evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.retinanet.RetinaNetModule.forward": [[112, 134], ["retinanet.RetinaNetModule.head", "retinanet.RetinaNetModule.anchor_generator", "retinanet.RetinaNetModule._forward_train", "retinanet.RetinaNetModule._forward_test"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule._forward_train", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule._forward_test"], ["", "def", "forward", "(", "self", ",", "images", ",", "features", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            images (ImageList): images for which we want to compute the predictions\n            features (list[Tensor]): features computed from the images that are\n                used for computing the predictions. Each tensor in the list\n                correspond to different feature levels\n            targets (list[BoxList): ground-truth boxes present in the image (optional)\n\n        Returns:\n            boxes (list[BoxList]): the predicted boxes from the RPN, one BoxList per\n                image.\n            losses (dict[Tensor]): the losses for the model during training. During\n                testing, it is an empty dict.\n        \"\"\"", "\n", "box_cls", ",", "box_regression", "=", "self", ".", "head", "(", "features", ")", "\n", "anchors", "=", "self", ".", "anchor_generator", "(", "images", ",", "features", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_forward_train", "(", "anchors", ",", "box_cls", ",", "box_regression", ",", "targets", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_forward_test", "(", "anchors", ",", "box_cls", ",", "box_regression", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.retinanet.RetinaNetModule._forward_train": [[135, 145], ["retinanet.RetinaNetModule.loss_evaluator"], "methods", ["None"], ["", "", "def", "_forward_train", "(", "self", ",", "anchors", ",", "box_cls", ",", "box_regression", ",", "targets", ")", ":", "\n", "\n", "        ", "loss_box_cls", ",", "loss_box_reg", "=", "self", ".", "loss_evaluator", "(", "\n", "anchors", ",", "box_cls", ",", "box_regression", ",", "targets", "\n", ")", "\n", "losses", "=", "{", "\n", "\"loss_retina_cls\"", ":", "loss_box_cls", ",", "\n", "\"loss_retina_reg\"", ":", "loss_box_reg", ",", "\n", "}", "\n", "return", "anchors", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.retinanet.RetinaNetModule._forward_test": [[146, 149], ["retinanet.RetinaNetModule.box_selector_test"], "methods", ["None"], ["", "def", "_forward_test", "(", "self", ",", "anchors", ",", "box_cls", ",", "box_regression", ")", ":", "\n", "        ", "boxes", "=", "self", ".", "box_selector_test", "(", "anchors", ",", "box_cls", ",", "box_regression", ")", "\n", "return", "boxes", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.retinanet.build_retinanet": [[151, 153], ["retinanet.RetinaNetModule"], "function", ["None"], ["", "", "def", "build_retinanet", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "return", "RetinaNetModule", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.inference.RetinaNetPostProcessor.__init__": [[19, 52], ["inference.RPNPostProcessor.__init__", "maskrcnn_benchmark.modeling.box_coder.BoxCoder"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "pre_nms_top_n", ",", "\n", "post_nms_top_n", ",", "\n", "nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n", "fpn_post_nms_per_batch", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            pre_nms_top_n (int)\n            post_nms_top_n (int)\n            nms_thresh (float)\n            min_size (int)\n            box_coder (BoxCoder)\n            fpn_post_nms_top_n (int)\n        \"\"\"", "\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n", "if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "self", ".", "fpn_post_nms_per_batch", "=", "fpn_post_nms_per_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.inference.RetinaNetPostProcessor.add_gt_proposals": [[53, 58], ["None"], "methods", ["None"], ["", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.inference.RetinaNetPostProcessor.forward_for_single_feature_map": [[59, 126], ["utils.permute_and_flatten", "box_cls.sigmoid.sigmoid.sigmoid", "utils.permute_and_flatten", "box_regression.reshape.reshape.reshape", "candidate_inds.view().sum", "pre_nms_top_n.clamp.clamp.clamp", "zip", "box_regression.reshape.reshape.size", "box_cls.sigmoid.sigmoid.size", "per_box_cls.topk", "inference.RetinaNetPostProcessor.box_coder.decode", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.clip_to_image", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes", "results.append", "candidate_inds.view", "per_candidate_inds.nonzero", "per_box_regression[].view", "per_anchors.bbox[].view"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.utils.permute_and_flatten", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.utils.permute_and_flatten", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.decode", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.clip_to_image", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.remove_small_boxes"], ["# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "# later cat of bbox requires all fields to be present for all bbox", "\n", "# so we need to add a dummy for objectness that's missing", "\n", "for", "gt_box", "in", "gt_boxes", ":", "\n", "            ", "gt_box", ".", "add_field", "(", "\"objectness\"", ",", "torch", ".", "ones", "(", "len", "(", "gt_box", ")", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "proposals", "=", "[", "\n", "cat_boxlist", "(", "(", "proposal", ",", "gt_box", ")", ")", "\n", "for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n", "]", "\n", "\n", "return", "proposals", "\n", "\n", "", "def", "forward_for_single_feature_map", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n", "objectness", "=", "permute_and_flatten", "(", "objectness", ",", "N", ",", "A", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "objectness", "=", "objectness", ".", "sigmoid", "(", ")", "\n", "\n", "box_regression", "=", "permute_and_flatten", "(", "box_regression", ",", "N", ",", "A", ",", "4", ",", "H", ",", "W", ")", "\n", "\n", "num_anchors", "=", "A", "*", "H", "*", "W", "\n", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n", "box_regression", "=", "box_regression", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "anchors", "]", "\n", "concat_anchors", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "concat_anchors", "=", "concat_anchors", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "-", "1", ",", "4", ")", ",", "concat_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "proposals", "=", "proposals", ".", "view", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "proposal", ",", "score", ",", "im_shape", "in", "zip", "(", "proposals", ",", "objectness", ",", "image_shapes", ")", ":", "\n", "            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "boxlist", "=", "remove_small_boxes", "(", "boxlist", ",", "self", ".", "min_size", ")", "\n", "boxlist", "=", "boxlist_nms", "(", "\n", "boxlist", ",", "\n", "self", ".", "nms_thresh", ",", "\n", "max_proposals", "=", "self", ".", "post_nms_top_n", ",", "\n", "score_field", "=", "\"objectness\"", ",", "\n", ")", "\n", "result", ".", "append", "(", "boxlist", ")", "\n", "", "return", "result", "\n", "\n", "", "def", "forward", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.inference.RetinaNetPostProcessor.select_over_all_levels": [[131, 175], ["len", "range", "boxlists[].get_field", "boxlists[].get_field", "range", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "len", "results.append", "boxes[].view", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms", "len", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.append", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field", "torch.kthvalue", "torch.nonzero().squeeze", "torch.full", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field.cpu", "image_thresh.item", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.boxlist_nms", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["\n", "sampled_boxes", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "objectness", ")", "\n", "anchors", "=", "list", "(", "zip", "(", "*", "anchors", ")", ")", "\n", "for", "a", ",", "o", ",", "b", "in", "zip", "(", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "            ", "sampled_boxes", ".", "append", "(", "self", ".", "forward_for_single_feature_map", "(", "a", ",", "o", ",", "b", ")", ")", "\n", "\n", "", "boxlists", "=", "list", "(", "zip", "(", "*", "sampled_boxes", ")", ")", "\n", "boxlists", "=", "[", "cat_boxlist", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "\n", "if", "num_levels", ">", "1", ":", "\n", "            ", "boxlists", "=", "self", ".", "select_over_all_levels", "(", "boxlists", ")", "\n", "\n", "# append ground-truth bboxes to proposals", "\n", "", "if", "self", ".", "training", "and", "targets", "is", "not", "None", ":", "\n", "            ", "boxlists", "=", "self", ".", "add_gt_proposals", "(", "boxlists", ",", "targets", ")", "\n", "\n", "", "return", "boxlists", "\n", "\n", "", "def", "select_over_all_levels", "(", "self", ",", "boxlists", ")", ":", "\n", "        ", "num_images", "=", "len", "(", "boxlists", ")", "\n", "# different behavior during training and during testing:", "\n", "# during training, post_nms_top_n is over *all* the proposals combined, while", "\n", "# during testing, it is over the proposals for each image", "\n", "# NOTE: it should be per image, and not per batch. However, to be consistent ", "\n", "# with Detectron, the default is per batch (see Issue #672)", "\n", "if", "self", ".", "training", "and", "self", ".", "fpn_post_nms_per_batch", ":", "\n", "            ", "objectness", "=", "torch", ".", "cat", "(", "\n", "[", "boxlist", ".", "get_field", "(", "\"objectness\"", ")", "for", "boxlist", "in", "boxlists", "]", ",", "dim", "=", "0", "\n", ")", "\n", "box_sizes", "=", "[", "len", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", ")", "\n", "inds_mask", "=", "torch", ".", "zeros_like", "(", "objectness", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "inds_mask", "[", "inds_sorted", "]", "=", "1", "\n", "inds_mask", "=", "inds_mask", ".", "split", "(", "box_sizes", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_mask", "[", "i", "]", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "objectness", "=", "boxlists", "[", "i", "]", ".", "get_field", "(", "\"objectness\"", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.inference.make_retinanet_postprocessor": [[177, 195], ["inference.RetinaNetPostProcessor"], "function", ["None"], ["_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "\n", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", "\n", ")", "\n", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_sorted", "]", "\n", "", "", "return", "boxlists", "\n", "\n", "\n", "", "", "def", "make_rpn_postprocessor", "(", "config", ",", "rpn_box_coder", ",", "is_train", ")", ":", "\n", "    ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TEST", "\n", "\n", "", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TRAIN", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TEST", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TEST", "\n", "", "fpn_post_nms_per_batch", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_PER_BATCH", "\n", "nms_thresh", "=", "config", ".", "MODEL", ".", "RPN", ".", "NMS_THRESH", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.loss.RetinaNetLossComputation.__init__": [[24, 42], ["None"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "proposal_matcher", ",", "fg_bg_sampler", ",", "box_coder", ",", "\n", "generate_labels_func", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposal_matcher (Matcher)\n            fg_bg_sampler (BalancedPositiveNegativeSampler)\n            box_coder (BoxCoder)\n        \"\"\"", "\n", "# self.target_preparator = target_preparator", "\n", "self", ".", "proposal_matcher", "=", "proposal_matcher", "\n", "self", ".", "fg_bg_sampler", "=", "fg_bg_sampler", "\n", "self", ".", "box_coder", "=", "box_coder", "\n", "self", ".", "copied_fields", "=", "[", "]", "\n", "self", ".", "generate_labels_func", "=", "generate_labels_func", "\n", "self", ".", "discard_cases", "=", "[", "'not_visibility'", ",", "'between_thresholds'", "]", "\n", "\n", "", "def", "match_targets_to_anchors", "(", "self", ",", "anchor", ",", "target", ",", "copied_fields", "=", "[", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.loss.RetinaNetLossComputation.__call__": [[43, 81], ["loss.RetinaNetLossComputation.prepare_targets", "len", "utils.concat_box_prediction_layers", "torch.cat", "torch.cat", "torch.nonzero().squeeze", "labels.int.int.int", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "maskrcnn_benchmark.layers.smooth_l1_loss", "max", "loss.RetinaNetLossComputation.box_cls_loss_func", "torch.nonzero", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.numel"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.CTCPredictor.prepare_targets", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.utils.concat_box_prediction_layers", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.smooth_l1_loss.smooth_l1_loss"], ["        ", "match_quality_matrix", "=", "boxlist_iou", "(", "target", ",", "anchor", ")", "\n", "matched_idxs", "=", "self", ".", "proposal_matcher", "(", "match_quality_matrix", ")", "\n", "# RPN doesn't need any fields from target", "\n", "# for creating the labels, so clear them all", "\n", "target", "=", "target", ".", "copy_with_fields", "(", "copied_fields", ")", "\n", "# get the targets corresponding GT for each anchor", "\n", "# NB: need to clamp the indices because we can have a single", "\n", "# GT in the image, and matched_idxs can be -2, which goes", "\n", "# out of bounds", "\n", "matched_targets", "=", "target", "[", "matched_idxs", ".", "clamp", "(", "min", "=", "0", ")", "]", "\n", "matched_targets", ".", "add_field", "(", "\"matched_idxs\"", ",", "matched_idxs", ")", "\n", "return", "matched_targets", "\n", "\n", "", "def", "prepare_targets", "(", "self", ",", "anchors", ",", "targets", ")", ":", "\n", "        ", "labels", "=", "[", "]", "\n", "regression_targets", "=", "[", "]", "\n", "for", "anchors_per_image", ",", "targets_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n", "            ", "matched_targets", "=", "self", ".", "match_targets_to_anchors", "(", "\n", "anchors_per_image", ",", "targets_per_image", ",", "self", ".", "copied_fields", "\n", ")", "\n", "\n", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "self", ".", "generate_labels_func", "(", "matched_targets", ")", "\n", "labels_per_image", "=", "labels_per_image", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# Background (negative examples)", "\n", "bg_indices", "=", "matched_idxs", "==", "Matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "labels_per_image", "[", "bg_indices", "]", "=", "0", "\n", "\n", "# discard anchors that go out of the boundaries of the image", "\n", "if", "\"not_visibility\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "labels_per_image", "[", "~", "anchors_per_image", ".", "get_field", "(", "\"visibility\"", ")", "]", "=", "-", "1", "\n", "\n", "# discard indices that are between thresholds", "\n", "", "if", "\"between_thresholds\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "inds_to_discard", "=", "matched_idxs", "==", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_per_image", "[", "inds_to_discard", "]", "=", "-", "1", "\n", "\n", "# compute regression targets", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.loss.generate_retinanet_labels": [[83, 86], ["matched_targets.get_field"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["matched_targets", ".", "bbox", ",", "anchors_per_image", ".", "bbox", "\n", ")", "\n", "\n", "labels", ".", "append", "(", "labels_per_image", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retinanet.loss.make_retinanet_loss_evaluator": [[88, 108], ["maskrcnn_benchmark.modeling.matcher.Matcher", "maskrcnn_benchmark.layers.SigmoidFocalLoss", "loss.RetinaNetLossComputation"], "function", ["None"], ["\n", "", "return", "labels", ",", "regression_targets", "\n", "\n", "\n", "", "def", "__call__", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors (list[BoxList])\n            objectness (list[Tensor])\n            box_regression (list[Tensor])\n            targets (list[BoxList])\n\n        Returns:\n            objectness_loss (Tensor)\n            box_loss (Tensor\n        \"\"\"", "\n", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "anchors_per_image", "in", "anchors", "]", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.__init__": [[23, 25], ["print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "print", "(", "\"nothing\"", ")", "\n", "", "def", "_denormalize", "(", "self", ",", "image", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater._denormalize": [[25, 32], ["torch.tensor().to", "torch.tensor().to", "image.mul_().add_", "torch.tensor", "torch.tensor", "image.mul_"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to"], ["", "def", "_denormalize", "(", "self", ",", "image", ")", ":", "\n", "        ", "std_", "=", "torch", ".", "tensor", "(", "[", "[", "57.375", ",", "57.12", ",", "58.395", "]", "]", ")", ".", "to", "(", "image", ".", "device", ")", "\n", "mean_", "=", "torch", ".", "tensor", "(", "[", "[", "103.53", ",", "116.28", ",", "123.675", "]", "]", ")", ".", "to", "(", "image", ".", "device", ")", "\n", "# std_ = torch.tensor([[1., 1., 1.]]).to(image.device)", "\n", "# mean_ = torch.tensor([[102.9801, 115.9465, 122.7717]]).to(image.device)", "\n", "image", ".", "mul_", "(", "std_", ")", ".", "add_", "(", "mean_", ")", "\n", "return", "image", "\n", "", "def", "_vis_multi_image", "(", "self", ",", "image_list", ",", "shape", "=", "[", "1", ",", "-", "1", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater._vis_multi_image": [[32, 47], ["len", "int", "int", "int", "PIL.Image.new", "enumerate", "numpy.array", "int", "int", "PIL.Image.new.paste"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "_vis_multi_image", "(", "self", ",", "image_list", ",", "shape", "=", "[", "1", ",", "-", "1", "]", ")", ":", "\n", "# print(image_list)", "\n", "        ", "image_num", "=", "len", "(", "image_list", ")", "\n", "h", ",", "w", ",", "_", "=", "np", ".", "array", "(", "image_list", "[", "0", "]", ")", ".", "shape", "\n", "h", "=", "int", "(", "h", ")", "\n", "w", "=", "int", "(", "w", ")", "\n", "#print h,w", "\n", "num_w", "=", "int", "(", "image_num", "//", "shape", "[", "0", "]", ")", "\n", "num_h", "=", "shape", "[", "0", "]", "\n", "new_im", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "num_w", "*", "w", ",", "num_h", "*", "h", ")", ")", "\n", "for", "idx", ",", "image", "in", "enumerate", "(", "image_list", ")", ":", "\n", "            ", "idx_w", "=", "int", "(", "idx", "%", "num_w", ")", "\n", "idx_h", "=", "int", "(", "idx", "/", "num_w", ")", "\n", "new_im", ".", "paste", "(", "image", ",", "(", "idx_w", "*", "w", ",", "idx_h", "*", "h", ")", ")", "\n", "", "return", "new_im", "\n", "", "def", "conver_images_to_pil", "(", "self", ",", "images", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.conver_images_to_pil": [[47, 55], ["images.permute().float", "visualization_map.Visualizater._denormalize().data.cpu().numpy().astype", "images_to_show.append", "images.permute", "visualization_map.Visualizater._denormalize().data.cpu().numpy", "PIL.Image.fromarray().convert", "visualization_map.Visualizater._denormalize().data.cpu", "PIL.Image.fromarray", "visualization_map.Visualizater._denormalize"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater._denormalize"], ["", "def", "conver_images_to_pil", "(", "self", ",", "images", ")", ":", "\n", "        ", "images_to_show", "=", "[", "]", "\n", "image_tensor", "=", "images", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "float", "(", ")", "\n", "image_de", "=", "self", ".", "_denormalize", "(", "image_tensor", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "for", "image", "in", "image_de", ":", "\n", "# print(image.max())", "\n", "            ", "images_to_show", ".", "append", "(", "Image", ".", "fromarray", "(", "image", "[", ":", ",", ":", ",", "(", "2", ",", "1", ",", "0", ")", "]", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "", "return", "images_to_show", "\n", "", "def", "convert_masks_to_pil", "(", "self", ",", "masks", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.convert_masks_to_pil": [[55, 65], ["PIL.Image.fromarray().convert.data.cpu().numpy", "PIL.Image.fromarray().convert", "masks_to_show.append", "PIL.Image.fromarray().convert.data.cpu", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert"], ["", "def", "convert_masks_to_pil", "(", "self", ",", "masks", ")", ":", "\n", "# print(masks.shape)", "\n", "# print(masks)", "\n", "        ", "masks_to_show", "=", "[", "]", "\n", "for", "mask", "in", "masks", ":", "\n", "# print(mask.shape)", "\n", "            ", "mask", "=", "mask", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "(", "mask", "[", "0", ",", ":", ",", ":", "]", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "masks_to_show", ".", "append", "(", "mask", ")", "\n", "", "return", "masks_to_show", "\n", "", "def", "render_masks_to_images", "(", "self", ",", "images", ",", "masks", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.render_masks_to_images": [[65, 72], ["zip", "mask.resize.resize.resize", "shows.append", "PIL.Image.blend"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize"], ["", "def", "render_masks_to_images", "(", "self", ",", "images", ",", "masks", ")", ":", "\n", "        ", "shows", "=", "[", "]", "\n", "for", "image", ",", "mask", "in", "zip", "(", "images", ",", "masks", ")", ":", "\n", "            ", "w", ",", "h", "=", "image", ".", "size", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "w", ",", "h", ")", ")", "\n", "shows", ".", "append", "(", "Image", ".", "blend", "(", "image", ",", "mask", ",", "0.5", ")", ")", "\n", "", "return", "shows", "\n", "", "def", "cat_images", "(", "self", ",", "image_lists", ",", "shape", "=", "[", "1", ",", "-", "1", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.cat_images": [[72, 78], ["visualization_map.Visualizater._vis_multi_image", "images.append", "list"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater._vis_multi_image"], ["", "def", "cat_images", "(", "self", ",", "image_lists", ",", "shape", "=", "[", "1", ",", "-", "1", "]", ")", ":", "\n", "        ", "images", "=", "[", "]", "\n", "for", "tuple_", "in", "image_lists", ":", "\n", "            ", "image", "=", "self", ".", "_vis_multi_image", "(", "list", "(", "tuple_", ")", ",", "shape", "=", "shape", ")", "\n", "images", ".", "append", "(", "image", ")", "\n", "", "return", "images", "\n", "", "def", "save", "(", "self", ",", "images", ",", "folder", ",", "names", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.save": [[78, 87], ["zip", "os.path.join", "image.save", "os.path.join", "image.save", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.save", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.save"], ["", "def", "save", "(", "self", ",", "images", ",", "folder", ",", "names", "=", "None", ")", ":", "\n", "        ", "if", "names", "==", "None", ":", "\n", "            ", "for", "image", "in", "images", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "\"image_{}.jpg\"", ".", "format", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "500", ")", ")", ")", "\n", "image", ".", "save", "(", "path", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "image", ",", "name", "in", "zip", "(", "images", ",", "names", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "name", ")", "\n", "image", ".", "save", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.inference.EASTPostProcessor.__init__": [[21, 49], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["pre_nms_top_n", ",", "\n", "post_nms_top_n", ",", "\n", "nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n", "fpn_post_nms_per_batch", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            pre_nms_top_n (int)\n            post_nms_top_n (int)\n            nms_thresh (float)\n            min_size (int)\n            box_coder (BoxCoder)\n            fpn_post_nms_top_n (int)\n        \"\"\"", "\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n", "if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.inference.EASTPostProcessor.restore_box": [[49, 61], ["torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange"], "methods", ["None"], ["            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "self", ".", "fpn_post_nms_per_batch", "=", "fpn_post_nms_per_batch", "\n", "\n", "", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.inference.EASTPostProcessor.forward_for_single_feature_map": [[61, 125], ["inference.EASTPostProcessor.restore_box", "quad_cls.reshape.reshape.view().permute", "quad_cls.reshape.reshape.reshape", "boxes.reshape.reshape.view().permute", "boxes.reshape.reshape.reshape", "candidate_inds.view().sum", "pre_nms_top_n.clamp.clamp.clamp", "range", "per_candidate_inds.nonzero", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes", "results.append", "quad_cls.reshape.reshape.view", "boxes.reshape.reshape.view", "candidate_inds.view", "per_candidate_inds.sum().item", "per_pre_nms_top_n.item", "per_quad_cls.topk", "int", "int", "per_candidate_inds.sum"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.inference.EASTPostProcessor.restore_box", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.remove_small_boxes"], ["\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "# later cat of bbox requires all fields to be present for all bbox", "\n", "# so we need to add a dummy for objectness that's missing", "\n", "for", "gt_box", "in", "gt_boxes", ":", "\n", "            ", "gt_box", ".", "add_field", "(", "\"objectness\"", ",", "torch", ".", "ones", "(", "len", "(", "gt_box", ")", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "proposals", "=", "[", "\n", "cat_boxlist", "(", "(", "proposal", ",", "gt_box", ")", ")", "\n", "for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n", "]", "\n", "\n", "return", "proposals", "\n", "\n", "", "def", "forward_for_single_feature_map", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n", "objectness", "=", "permute_and_flatten", "(", "objectness", ",", "N", ",", "A", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "objectness", "=", "objectness", ".", "sigmoid", "(", ")", "\n", "\n", "box_regression", "=", "permute_and_flatten", "(", "box_regression", ",", "N", ",", "A", ",", "4", ",", "H", ",", "W", ")", "\n", "\n", "num_anchors", "=", "A", "*", "H", "*", "W", "\n", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n", "box_regression", "=", "box_regression", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "anchors", "]", "\n", "concat_anchors", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "concat_anchors", "=", "concat_anchors", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "-", "1", ",", "4", ")", ",", "concat_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "proposals", "=", "proposals", ".", "view", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "proposal", ",", "score", ",", "im_shape", "in", "zip", "(", "proposals", ",", "objectness", ",", "image_shapes", ")", ":", "\n", "            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "boxlist", "=", "remove_small_boxes", "(", "boxlist", ",", "self", ".", "min_size", ")", "\n", "boxlist", "=", "boxlist_nms", "(", "\n", "boxlist", ",", "\n", "self", ".", "nms_thresh", ",", "\n", "max_proposals", "=", "self", ".", "post_nms_top_n", ",", "\n", "score_field", "=", "\"objectness\"", ",", "\n", ")", "\n", "result", ".", "append", "(", "boxlist", ")", "\n", "", "return", "result", "\n", "\n", "", "def", "forward", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.inference.EASTPostProcessor.forward": [[126, 153], ["enumerate", "list", "zip", "sampled_boxes.append", "zip", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms", "inference.EASTPostProcessor.forward_for_single_feature_map"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.boxlist_nms", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.inference.FCOSPostProcessor.forward_for_single_feature_map"], ["        ", "\"\"\"\n        Arguments:\n            anchors: list[list[BoxList]]\n            objectness: list[tensor]\n            box_regression: list[tensor]\n\n        Returns:\n            boxlists (list[BoxList]): the post-processed anchors, after\n                applying box decoding and NMS\n        \"\"\"", "\n", "sampled_boxes", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "objectness", ")", "\n", "anchors", "=", "list", "(", "zip", "(", "*", "anchors", ")", ")", "\n", "for", "a", ",", "o", ",", "b", "in", "zip", "(", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "            ", "sampled_boxes", ".", "append", "(", "self", ".", "forward_for_single_feature_map", "(", "a", ",", "o", ",", "b", ")", ")", "\n", "\n", "", "boxlists", "=", "list", "(", "zip", "(", "*", "sampled_boxes", ")", ")", "\n", "boxlists", "=", "[", "cat_boxlist", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "\n", "if", "num_levels", ">", "1", ":", "\n", "            ", "boxlists", "=", "self", ".", "select_over_all_levels", "(", "boxlists", ")", "\n", "\n", "# append ground-truth bboxes to proposals", "\n", "", "if", "self", ".", "training", "and", "targets", "is", "not", "None", ":", "\n", "            ", "boxlists", "=", "self", ".", "add_gt_proposals", "(", "boxlists", ",", "targets", ")", "\n", "\n", "", "return", "boxlists", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.inference.make_east_postprocessor": [[180, 198], ["inference.EASTPostProcessor"], "function", ["None"], ["boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_sorted", "]", "\n", "", "", "return", "boxlists", "\n", "\n", "\n", "", "", "def", "make_rpn_postprocessor", "(", "config", ",", "rpn_box_coder", ",", "is_train", ")", ":", "\n", "    ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TEST", "\n", "\n", "", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TRAIN", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TEST", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TEST", "\n", "", "fpn_post_nms_per_batch", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_PER_BATCH", "\n", "nms_thresh", "=", "config", ".", "MODEL", ".", "RPN", ".", "NMS_THRESH", "\n", "min_size", "=", "config", ".", "MODEL", ".", "RPN", ".", "MIN_SIZE", "\n", "box_selector", "=", "RPNPostProcessor", "(", "\n", "pre_nms_top_n", "=", "pre_nms_top_n", ",", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.EASTLossComputation.__init__": [[87, 101], ["torch.nn.BCEWithLogitsLoss"], "methods", ["None"], ["regression_targets", ".", "append", "(", "regression_targets_per_image", ")", "\n", "\n", "", "return", "labels", ",", "regression_targets", "\n", "\n", "\n", "", "def", "__call__", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.EASTLossComputation.__call__": [[102, 143], ["box_cls[].size", "box_cls[].size", "torch.stack", "torch.stack", "torch.stack", "loss.detect_box_loss", "target.generate_quad_gt", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.detect_box_loss", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.generate_quad_gt"], ["\n", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "anchors_per_image", "in", "anchors", "]", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_pos_inds", ",", "sampled_neg_inds", "]", ",", "dim", "=", "0", ")", "\n", "\n", "objectness", ",", "box_regression", "=", "concat_box_prediction_layers", "(", "objectness", ",", "box_regression", ")", "\n", "\n", "objectness", "=", "objectness", ".", "squeeze", "(", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "regression_targets", "=", "torch", ".", "cat", "(", "regression_targets", ",", "dim", "=", "0", ")", "\n", "\n", "box_loss", "=", "smooth_l1_loss", "(", "\n", "box_regression", "[", "sampled_pos_inds", "]", ",", "\n", "regression_targets", "[", "sampled_pos_inds", "]", ",", "\n", "beta", "=", "1.0", "/", "9", ",", "\n", "size_average", "=", "False", ",", "\n", ")", "/", "(", "sampled_inds", ".", "numel", "(", ")", ")", "\n", "\n", "objectness_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "objectness", "[", "sampled_inds", "]", ",", "labels", "[", "sampled_inds", "]", "\n", ")", "\n", "\n", "return", "objectness_loss", ",", "box_loss", "\n", "\n", "# This function should be overwritten in RetinaNet", "\n", "", "", "def", "generate_rpn_labels", "(", "matched_targets", ")", ":", "\n", "    ", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "matched_idxs", ">=", "0", "\n", "return", "labels_per_image", "\n", "\n", "\n", "", "def", "make_rpn_loss_evaluator", "(", "cfg", ",", "box_coder", ")", ":", "\n", "    ", "matcher", "=", "Matcher", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "FG_IOU_THRESHOLD", ",", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BG_IOU_THRESHOLD", ",", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.get_num_gpus": [[22, 24], ["int"], "function", ["None"], ["    ", "\"\"\"\n    This class computes the RPN loss.\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.reduce_sum": [[26, 33], ["tensor.clone.clone", "dist.all_reduce", "loss.get_num_gpus"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.get_num_gpus"], ["def", "__init__", "(", "self", ",", "proposal_matcher", ",", "fg_bg_sampler", ",", "box_coder", ",", "\n", "generate_labels_func", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposal_matcher (Matcher)\n            fg_bg_sampler (BalancedPositiveNegativeSampler)\n            box_coder (BoxCoder)\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.dice_loss": [[33, 42], ["training_mask.type_as.type_as", "pred_pss.view_as.view_as", "torch.sum", "torch.mean", "torch.sum", "torch.sum"], "function", ["None"], ["\n", "# self.target_preparator = target_preparator", "\n", "self", ".", "proposal_matcher", "=", "proposal_matcher", "\n", "self", ".", "fg_bg_sampler", "=", "fg_bg_sampler", "\n", "self", ".", "box_coder", "=", "box_coder", "\n", "self", ".", "copied_fields", "=", "[", "]", "\n", "self", ".", "generate_labels_func", "=", "generate_labels_func", "\n", "self", ".", "discard_cases", "=", "[", "'not_visibility'", ",", "'between_thresholds'", "]", "\n", "\n", "", "def", "match_targets_to_anchors", "(", "self", ",", "anchor", ",", "target", ",", "copied_fields", "=", "[", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.detect_quad_loss": [[42, 49], ["loss.quad_loss", "loss.dice_loss", "true_pss.type_as"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.quad_loss", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.dice_loss"], ["", "def", "match_targets_to_anchors", "(", "self", ",", "anchor", ",", "target", ",", "copied_fields", "=", "[", "]", ")", ":", "\n", "        ", "match_quality_matrix", "=", "boxlist_iou", "(", "target", ",", "anchor", ")", "\n", "matched_idxs", "=", "self", ".", "proposal_matcher", "(", "match_quality_matrix", ")", "\n", "# RPN doesn't need any fields from target", "\n", "# for creating the labels, so clear them all", "\n", "target", "=", "target", ".", "copy_with_fields", "(", "copied_fields", ")", "\n", "# get the targets corresponding GT for each anchor", "\n", "# NB: need to clamp the indices because we can have a single", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.quad_loss": [[49, 59], ["loss.view.mean().view", "pss_map.view.view", "loss.view.view", "torch.mean", "torch.nn.functional.smooth_l1_loss", "torch.sum", "loss.view.mean", "torch.sum"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.smooth_l1_loss.smooth_l1_loss"], ["# NB: need to clamp the indices because we can have a single", "\n", "# GT in the image, and matched_idxs can be -2, which goes", "\n", "# out of bounds", "\n", "matched_targets", "=", "target", "[", "matched_idxs", ".", "clamp", "(", "min", "=", "0", ")", "]", "\n", "matched_targets", ".", "add_field", "(", "\"matched_idxs\"", ",", "matched_idxs", ")", "\n", "return", "matched_targets", "\n", "\n", "", "def", "prepare_targets", "(", "self", ",", "anchors", ",", "targets", ")", ":", "\n", "        ", "labels", "=", "[", "]", "\n", "regression_targets", "=", "[", "]", "\n", "for", "anchors_per_image", ",", "targets_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.iou_loss": [[59, 75], ["torch.split", "torch.split", "torch.min", "torch.min", "torch.min", "torch.min", "torch.log"], "function", ["None"], ["for", "anchors_per_image", ",", "targets_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n", "            ", "matched_targets", "=", "self", ".", "match_targets_to_anchors", "(", "\n", "anchors_per_image", ",", "targets_per_image", ",", "self", ".", "copied_fields", "\n", ")", "\n", "\n", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "self", ".", "generate_labels_func", "(", "matched_targets", ")", "\n", "labels_per_image", "=", "labels_per_image", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# Background (negative examples)", "\n", "bg_indices", "=", "matched_idxs", "==", "Matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "labels_per_image", "[", "bg_indices", "]", "=", "0", "\n", "\n", "# discard anchors that go out of the boundaries of the image", "\n", "if", "\"not_visibility\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "labels_per_image", "[", "~", "anchors_per_image", ".", "get_field", "(", "\"visibility\"", ")", "]", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.detect_box_loss": [[75, 82], ["loss.iou_loss", "torch.mean", "loss.dice_loss", "true_pss.type_as", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.iou_loss", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.dice_loss"], ["\n", "# discard indices that are between thresholds", "\n", "", "if", "\"between_thresholds\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "inds_to_discard", "=", "matched_idxs", "==", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_per_image", "[", "inds_to_discard", "]", "=", "-", "1", "\n", "\n", "# compute regression targets", "\n", "", "regression_targets_per_image", "=", "self", ".", "box_coder", ".", "encode", "(", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.make_east_loss_evaluator": [[145, 148], ["loss.EASTLossComputation"], "function", ["None"], [")", "\n", "\n", "fg_bg_sampler", "=", "BalancedPositiveNegativeSampler", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BATCH_SIZE_PER_IMAGE", ",", "cfg", ".", "MODEL", ".", "RPN", ".", "POSITIVE_FRACTION", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.east.EASTHead.__init__": [[14, 87], ["super().__init__", "range", "east.EASTHead.add_module", "east.EASTHead.add_module", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "cls_tower.append", "cls_tower.append", "cls_tower.append", "quad_tower.append", "quad_tower.append", "quad_tower.append", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "modules.modules", "math.log", "conv_func", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.ReLU", "torch.nn.ReLU", "conv_func", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.ReLU", "torch.nn.ReLU", "isinstance", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            in_channels (int): number of channels of the input feature\n        \"\"\"", "\n", "super", "(", "EASTHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# TODO: Implement the sigmoid version first.", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "EAST", ".", "NUM_CLASSES", "-", "1", "\n", "# self.fpn_strides = cfg.MODEL.EAST.FPN_STRIDES", "\n", "# self.norm_reg_targets = cfg.MODEL.EAST.NORM_REG_TARGETS", "\n", "self", ".", "use_dcn_in_tower", "=", "False", "\n", "\n", "cls_tower", "=", "[", "]", "\n", "quad_tower", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "MODEL", ".", "EAST", ".", "NUM_CONVS", ")", ":", "\n", "            ", "if", "self", ".", "use_dcn_in_tower", "and", "i", "==", "cfg", ".", "MODEL", ".", "EAST", ".", "NUM_CONVS", "-", "1", ":", "\n", "                ", "conv_func", "=", "DFConv2d", "\n", "", "else", ":", "\n", "                ", "conv_func", "=", "nn", ".", "Conv2d", "\n", "\n", "", "cls_tower", ".", "append", "(", "\n", "conv_func", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "True", "\n", ")", "\n", ")", "\n", "cls_tower", ".", "append", "(", "nn", ".", "GroupNorm", "(", "32", ",", "in_channels", ")", ")", "\n", "cls_tower", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "quad_tower", ".", "append", "(", "\n", "conv_func", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "True", "\n", ")", "\n", ")", "\n", "quad_tower", ".", "append", "(", "nn", ".", "GroupNorm", "(", "32", ",", "in_channels", ")", ")", "\n", "quad_tower", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "self", ".", "add_module", "(", "'cls_tower'", ",", "nn", ".", "Sequential", "(", "*", "cls_tower", ")", ")", "\n", "self", ".", "add_module", "(", "'quad_tower'", ",", "nn", ".", "Sequential", "(", "*", "quad_tower", ")", ")", "\n", "self", ".", "cls_logits", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", "self", ".", "quad_pred", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", "# self.centerness = nn.Conv2d(", "\n", "#     in_channels, 1, kernel_size=3, stride=1,", "\n", "#     padding=1", "\n", "# )", "\n", "\n", "# initialization", "\n", "for", "modules", "in", "[", "self", ".", "cls_tower", ",", "self", ".", "quad_tower", ",", "\n", "self", ".", "cls_logits", ",", "self", ".", "quad_pred", "]", ":", "\n", "            ", "for", "l", "in", "modules", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "l", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n", "# initialize the bias for focal loss", "\n", "", "", "", "prior_prob", "=", "cfg", ".", "MODEL", ".", "EAST", ".", "PRIOR_PROB", "\n", "bias_value", "=", "-", "math", ".", "log", "(", "(", "1", "-", "prior_prob", ")", "/", "prior_prob", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "cls_logits", ".", "bias", ",", "bias_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.east.EASTHead.forward": [[90, 112], ["enumerate", "east.EASTHead.cls_tower", "east.EASTHead.quad_tower", "logits.append", "quad_reg.append", "east.EASTHead.cls_logits().sigmoid", "east.EASTHead.quad_pred().sigmoid", "east.EASTHead.cls_logits", "east.EASTHead.quad_pred"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "logits", "=", "[", "]", "\n", "quad_reg", "=", "[", "]", "\n", "centerness", "=", "[", "]", "\n", "for", "l", ",", "feature", "in", "enumerate", "(", "[", "x", "[", "0", "]", "]", ")", ":", "\n", "# print(feature.shape)", "\n", "            ", "cls_tower", "=", "self", ".", "cls_tower", "(", "feature", ")", "\n", "box_tower", "=", "self", ".", "quad_tower", "(", "feature", ")", "\n", "\n", "logits", ".", "append", "(", "self", ".", "cls_logits", "(", "cls_tower", ")", ".", "sigmoid", "(", ")", ")", "\n", "quad_reg", ".", "append", "(", "self", ".", "quad_pred", "(", "box_tower", ")", ".", "sigmoid", "(", ")", "*", "512", ")", "\n", "\n", "# quad_pred = self.scales[l](self.quad_pred(box_tower))", "\n", "# if self.norm_reg_targets:", "\n", "#     quad_pred = F.relu(quad_pred)", "\n", "#     if self.training:", "\n", "#         quad_reg.append(quad_pred)", "\n", "#     else:", "\n", "#         quad_reg.append(quad_pred * self.fpn_strides[l])", "\n", "# else:", "\n", "#     quad_reg.append(torch.exp(quad_pred))", "\n", "", "return", "logits", ",", "quad_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.east.EASTModule.__init__": [[120, 133], ["super().__init__", "east.EASTHead", "inference.make_east_postprocessor", "loss.make_east_loss_evaluator", "visualization_map.Visualizater"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.inference.make_east_postprocessor", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.make_east_loss_evaluator"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "EASTModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "head", "=", "EASTHead", "(", "cfg", ",", "in_channels", ")", "\n", "\n", "poly_selector_test", "=", "make_east_postprocessor", "(", "cfg", ")", "\n", "\n", "loss_evaluator", "=", "make_east_loss_evaluator", "(", "cfg", ")", "\n", "self", ".", "head", "=", "head", "\n", "self", ".", "poly_selector_test", "=", "poly_selector_test", "\n", "self", ".", "loss_evaluator", "=", "loss_evaluator", "\n", "self", ".", "fpn_strides", "=", "cfg", ".", "MODEL", ".", "EAST", ".", "FPN_STRIDES", "\n", "self", ".", "visualizater", "=", "Visualizater", "(", ")", "\n", "", "def", "visulizate", "(", "self", ",", "images", ",", "masks", ",", "centerness", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.east.EASTModule.visulizate": [[133, 141], ["images.tensors.clone", "east.EASTModule.visualizater.conver_images_to_pil", "east.EASTModule.visualizater.convert_masks_to_pil", "east.EASTModule.visualizater.render_masks_to_images", "east.EASTModule.visualizater.cat_images", "east.EASTModule.visualizater.save", "masks.sigmoid", "east.EASTModule.copy", "zip"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.conver_images_to_pil", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.convert_masks_to_pil", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.render_masks_to_images", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.cat_images", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.save"], ["", "def", "visulizate", "(", "self", ",", "images", ",", "masks", ",", "centerness", "=", "None", ")", ":", "\n", "        ", "images_tensor", "=", "images", ".", "tensors", ".", "clone", "(", ")", "\n", "# print(images_tensor)", "\n", "images_pil", "=", "self", ".", "visualizater", ".", "conver_images_to_pil", "(", "images_tensor", ")", "\n", "masks_pil", "=", "self", ".", "visualizater", ".", "convert_masks_to_pil", "(", "masks", ".", "sigmoid", "(", ")", ")", "\n", "images_masks", "=", "self", ".", "visualizater", ".", "render_masks_to_images", "(", "images_pil", ".", "copy", "(", ")", ",", "masks_pil", ")", "\n", "shows", "=", "self", ".", "visualizater", ".", "cat_images", "(", "zip", "(", "images_pil", ",", "images_masks", ")", ",", "shape", "=", "[", "1", ",", "-", "1", "]", ")", "\n", "self", ".", "visualizater", ".", "save", "(", "shows", ",", "folder", "=", "'vis'", ",", "names", "=", "None", ")", "\n", "", "def", "forward", "(", "self", ",", "images", ",", "features", ",", "targets", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.east.EASTModule.forward": [[141, 170], ["east.EASTModule.head", "east.EASTModule._forward_train", "east.EASTModule.visulizate", "east.EASTModule._forward_test"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule._forward_train", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.east.EASTModule.visulizate", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule._forward_test"], ["", "def", "forward", "(", "self", ",", "images", ",", "features", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            images (ImageList): images for which we want to compute the predictions\n            features (list[Tensor]): features computed from the images that are\n                used for computing the predictions. Each tensor in the list\n                correspond to different feature levels\n            targets (list[BoxList): ground-truth boxes present in the image (optional)\n\n        Returns:\n            boxes (list[BoxList]): the predicted boxes from the RPN, one BoxList per\n                image.\n            losses (dict[Tensor]): the losses for the model during training. During\n                testing, it is an empty dict.\n        \"\"\"", "\n", "quad_cls", ",", "quad_regression", "=", "self", ".", "head", "(", "features", ")", "\n", "# print(quad_cls[0].shape, quad_regression[0].shape)", "\n", "# self.visulizate(images, quad_cls[0])", "\n", "# print(quad_cls[0].shape, quad_regression[0].shape, centerness[0].shape)", "\n", "# locations = self.compute_locations(features)", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_forward_train", "(", "\n", "quad_cls", ",", "quad_regression", ",", "targets", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "visulizate", "(", "images", ",", "quad_cls", "[", "0", "]", ")", "\n", "return", "self", ".", "_forward_test", "(", "\n", "quad_cls", ",", "quad_regression", ",", "images", ".", "image_sizes", ",", "targets", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.east.EASTModule._forward_train": [[172, 183], ["east.EASTModule.loss_evaluator"], "methods", ["None"], ["", "", "def", "_forward_train", "(", "self", ",", "quad_cls", ",", "quad_regression", ",", "targets", ")", ":", "\n", "# return None, None", "\n", "        ", "loss_cls", ",", "loss_quad_reg", "=", "self", ".", "loss_evaluator", "(", "\n", "quad_cls", ",", "quad_regression", ",", "targets", "\n", ")", "\n", "losses", "=", "{", "\n", "\"loss_cls\"", ":", "loss_cls", ",", "\n", "\"loss_reg\"", ":", "loss_quad_reg", ",", "\n", "# \"loss_centerness\": loss_centerness", "\n", "}", "\n", "return", "None", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.east.EASTModule._forward_test": [[184, 187], ["east.EASTModule.poly_selector_test"], "methods", ["None"], ["", "def", "_forward_test", "(", "self", ",", "box_cls", ",", "box_regression", ",", "image_sizes", ",", "targets", "=", "None", ")", ":", "\n", "        ", "boxes", "=", "self", ".", "poly_selector_test", "(", "box_cls", ",", "box_regression", ",", "image_sizes", ",", "targets", "=", "targets", ")", "\n", "return", "boxes", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.east.EASTModule.compute_locations": [[188, 198], ["enumerate", "east.EASTModule.compute_locations_per_level", "locations.append", "feature.size"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule.compute_locations_per_level"], ["", "def", "compute_locations", "(", "self", ",", "features", ")", ":", "\n", "        ", "locations", "=", "[", "]", "\n", "for", "level", ",", "feature", "in", "enumerate", "(", "features", ")", ":", "\n", "            ", "h", ",", "w", "=", "feature", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "locations_per_level", "=", "self", ".", "compute_locations_per_level", "(", "\n", "h", ",", "w", ",", "self", ".", "fpn_strides", "[", "level", "]", ",", "\n", "feature", ".", "device", "\n", ")", "\n", "locations", ".", "append", "(", "locations_per_level", ")", "\n", "", "return", "locations", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.east.EASTModule.compute_locations_per_level": [[199, 216], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "shift_x.reshape.reshape.reshape", "shift_y.reshape.reshape.reshape", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "compute_locations_per_level", "(", "self", ",", "h", ",", "w", ",", "stride", ",", "device", ")", ":", "\n", "# print(w*stride)", "\n", "        ", "stride", "=", "4", "\n", "shifts_x", "=", "torch", ".", "arange", "(", "\n", "0", ",", "w", "*", "stride", ",", "step", "=", "stride", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n", "shifts_y", "=", "torch", ".", "arange", "(", "\n", "0", ",", "h", "*", "stride", ",", "step", "=", "stride", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n", "shift_y", ",", "shift_x", "=", "torch", ".", "meshgrid", "(", "shifts_y", ",", "shifts_x", ")", "\n", "shift_x", "=", "shift_x", ".", "reshape", "(", "-", "1", ")", "\n", "shift_y", "=", "shift_y", ".", "reshape", "(", "-", "1", ")", "\n", "# locations = torch.stack((shift_x, shift_y), dim=1) + stride // 2", "\n", "locations", "=", "torch", ".", "stack", "(", "(", "shift_x", ",", "shift_y", ")", ",", "dim", "=", "1", ")", "\n", "return", "locations", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.east.build_east": [[217, 219], ["east.EASTModule"], "function", ["None"], ["", "", "def", "build_east", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "return", "EASTModule", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.inference.FCOSPostProcessor.__init__": [[15, 43], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "pre_nms_top_n", ",", "\n", "post_nms_top_n", ",", "\n", "nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n", "fpn_post_nms_per_batch", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            pre_nms_top_n (int)\n            post_nms_top_n (int)\n            nms_thresh (float)\n            min_size (int)\n            box_coder (BoxCoder)\n            fpn_post_nms_top_n (int)\n        \"\"\"", "\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.inference.FCOSPostProcessor.forward_for_single_feature_map": [[44, 145], ["box_cls.reshape().sigmoid.reshape().sigmoid.view().permute", "box_cls.reshape().sigmoid.reshape().sigmoid.reshape().sigmoid", "box_regression.reshape.reshape.view().permute", "box_regression.reshape.reshape.reshape", "poly_regression.reshape.reshape.view().permute", "poly_regression.reshape.reshape.reshape", "centerness.reshape().sigmoid.reshape().sigmoid.view().permute", "centerness.reshape().sigmoid.reshape().sigmoid.reshape().sigmoid", "candidate_inds.view().sum", "pre_nms_top_n.clamp.clamp.clamp", "range", "torch.cat", "offsets.permute().reshape.permute().reshape.permute().reshape", "per_candidate_inds.nonzero", "torch.stack", "torch.stack", "poly_detections.view.view.view", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.clip_to_image", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes", "results.append", "box_cls.reshape().sigmoid.reshape().sigmoid.view", "box_cls.reshape().sigmoid.reshape().sigmoid.reshape", "box_regression.reshape.reshape.view", "poly_regression.reshape.reshape.view", "centerness.reshape().sigmoid.reshape().sigmoid.view", "centerness.reshape().sigmoid.reshape().sigmoid.reshape", "candidate_inds.view", "per_candidate_inds.sum().item", "per_pre_nms_top_n.item", "per_box_cls.topk", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "offsets.permute().reshape.permute().reshape.permute", "int", "int", "per_offsets[].sigmoid", "per_candidate_inds.sum"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.clip_to_image", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.remove_small_boxes", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field"], ["if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "self", ".", "fpn_post_nms_per_batch", "=", "fpn_post_nms_per_batch", "\n", "\n", "", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "# later cat of bbox requires all fields to be present for all bbox", "\n", "# so we need to add a dummy for objectness that's missing", "\n", "for", "gt_box", "in", "gt_boxes", ":", "\n", "            ", "gt_box", ".", "add_field", "(", "\"objectness\"", ",", "torch", ".", "ones", "(", "len", "(", "gt_box", ")", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "proposals", "=", "[", "\n", "cat_boxlist", "(", "(", "proposal", ",", "gt_box", ")", ")", "\n", "for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n", "]", "\n", "\n", "return", "proposals", "\n", "\n", "", "def", "forward_for_single_feature_map", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n", "objectness", "=", "permute_and_flatten", "(", "objectness", ",", "N", ",", "A", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "objectness", "=", "objectness", ".", "sigmoid", "(", ")", "\n", "\n", "box_regression", "=", "permute_and_flatten", "(", "box_regression", ",", "N", ",", "A", ",", "4", ",", "H", ",", "W", ")", "\n", "\n", "num_anchors", "=", "A", "*", "H", "*", "W", "\n", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n", "box_regression", "=", "box_regression", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "anchors", "]", "\n", "concat_anchors", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "concat_anchors", "=", "concat_anchors", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "-", "1", ",", "4", ")", ",", "concat_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "proposals", "=", "proposals", ".", "view", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "proposal", ",", "score", ",", "im_shape", "in", "zip", "(", "proposals", ",", "objectness", ",", "image_shapes", ")", ":", "\n", "            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "boxlist", "=", "remove_small_boxes", "(", "boxlist", ",", "self", ".", "min_size", ")", "\n", "boxlist", "=", "boxlist_nms", "(", "\n", "boxlist", ",", "\n", "self", ".", "nms_thresh", ",", "\n", "max_proposals", "=", "self", ".", "post_nms_top_n", ",", "\n", "score_field", "=", "\"objectness\"", ",", "\n", ")", "\n", "result", ".", "append", "(", "boxlist", ")", "\n", "", "return", "result", "\n", "\n", "", "def", "forward", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[list[BoxList]]\n            objectness: list[tensor]\n            box_regression: list[tensor]\n\n        Returns:\n            boxlists (list[BoxList]): the post-processed anchors, after\n                applying box decoding and NMS\n        \"\"\"", "\n", "sampled_boxes", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "objectness", ")", "\n", "anchors", "=", "list", "(", "zip", "(", "*", "anchors", ")", ")", "\n", "for", "a", ",", "o", ",", "b", "in", "zip", "(", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "            ", "sampled_boxes", ".", "append", "(", "self", ".", "forward_for_single_feature_map", "(", "a", ",", "o", ",", "b", ")", ")", "\n", "\n", "", "boxlists", "=", "list", "(", "zip", "(", "*", "sampled_boxes", ")", ")", "\n", "boxlists", "=", "[", "cat_boxlist", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "\n", "if", "num_levels", ">", "1", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.inference.FCOSPostProcessor.forward": [[146, 180], ["enumerate", "list", "inference.FCOSPostProcessor.select_over_all_levels", "zip", "sampled_boxes.append", "zip", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "inference.FCOSPostProcessor.forward_for_single_feature_map"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.inference.FCOSPostProcessor.select_over_all_levels", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.inference.FCOSPostProcessor.forward_for_single_feature_map"], ["            ", "boxlists", "=", "self", ".", "select_over_all_levels", "(", "boxlists", ")", "\n", "\n", "# append ground-truth bboxes to proposals", "\n", "", "if", "self", ".", "training", "and", "targets", "is", "not", "None", ":", "\n", "            ", "boxlists", "=", "self", ".", "add_gt_proposals", "(", "boxlists", ",", "targets", ")", "\n", "\n", "", "return", "boxlists", "\n", "\n", "", "def", "select_over_all_levels", "(", "self", ",", "boxlists", ")", ":", "\n", "        ", "num_images", "=", "len", "(", "boxlists", ")", "\n", "# different behavior during training and during testing:", "\n", "# during training, post_nms_top_n is over *all* the proposals combined, while", "\n", "# during testing, it is over the proposals for each image", "\n", "# NOTE: it should be per image, and not per batch. However, to be consistent ", "\n", "# with Detectron, the default is per batch (see Issue #672)", "\n", "if", "self", ".", "training", "and", "self", ".", "fpn_post_nms_per_batch", ":", "\n", "            ", "objectness", "=", "torch", ".", "cat", "(", "\n", "[", "boxlist", ".", "get_field", "(", "\"objectness\"", ")", "for", "boxlist", "in", "boxlists", "]", ",", "dim", "=", "0", "\n", ")", "\n", "box_sizes", "=", "[", "len", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", ")", "\n", "inds_mask", "=", "torch", ".", "zeros_like", "(", "objectness", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "inds_mask", "[", "inds_sorted", "]", "=", "1", "\n", "inds_mask", "=", "inds_mask", ".", "split", "(", "box_sizes", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_mask", "[", "i", "]", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "objectness", "=", "boxlists", "[", "i", "]", ".", "get_field", "(", "\"objectness\"", ")", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "\n", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", "\n", ")", "\n", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_sorted", "]", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.inference.FCOSPostProcessor.select_over_all_levels": [[185, 247], ["len", "boxlists[].has_field", "range", "boxlists[].get_field", "boxlists[].get_field", "boxlists[].get_field", "range", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "len", "results.append", "boxlists[].get_field", "boxlists[].get_field", "boxlists[].get_field", "boxes[].view", "polys[].view", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms", "len", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.append", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field", "torch.kthvalue", "torch.nonzero().squeeze", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "torch.full", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field.cpu", "image_thresh.item", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.has_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.boxlist_nms", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field"], ["    ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TEST", "\n", "\n", "", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TRAIN", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TEST", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TEST", "\n", "", "fpn_post_nms_per_batch", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_PER_BATCH", "\n", "nms_thresh", "=", "config", ".", "MODEL", ".", "RPN", ".", "NMS_THRESH", "\n", "min_size", "=", "config", ".", "MODEL", ".", "RPN", ".", "MIN_SIZE", "\n", "box_selector", "=", "RPNPostProcessor", "(", "\n", "pre_nms_top_n", "=", "pre_nms_top_n", ",", "\n", "post_nms_top_n", "=", "post_nms_top_n", ",", "\n", "nms_thresh", "=", "nms_thresh", ",", "\n", "min_size", "=", "min_size", ",", "\n", "box_coder", "=", "rpn_box_coder", ",", "\n", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", ",", "\n", "fpn_post_nms_per_batch", "=", "fpn_post_nms_per_batch", ",", "\n", ")", "\n", "return", "box_selector", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.inference.make_fcos_postprocessor": [[248, 270], ["inference.FCOSPostProcessor"], "function", ["None"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.loss.FCOSLossComputation.__init__": [[24, 48], ["maskrcnn_benchmark.layers.SigmoidFocalLoss", "maskrcnn_benchmark.layers.IOULoss", "torch.nn.BCEWithLogitsLoss", "soi.append", "torch.nn.SmoothL1Loss", "soi.append"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "proposal_matcher", ",", "fg_bg_sampler", ",", "box_coder", ",", "\n", "generate_labels_func", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposal_matcher (Matcher)\n            fg_bg_sampler (BalancedPositiveNegativeSampler)\n            box_coder (BoxCoder)\n        \"\"\"", "\n", "# self.target_preparator = target_preparator", "\n", "self", ".", "proposal_matcher", "=", "proposal_matcher", "\n", "self", ".", "fg_bg_sampler", "=", "fg_bg_sampler", "\n", "self", ".", "box_coder", "=", "box_coder", "\n", "self", ".", "copied_fields", "=", "[", "]", "\n", "self", ".", "generate_labels_func", "=", "generate_labels_func", "\n", "self", ".", "discard_cases", "=", "[", "'not_visibility'", ",", "'between_thresholds'", "]", "\n", "\n", "", "def", "match_targets_to_anchors", "(", "self", ",", "anchor", ",", "target", ",", "copied_fields", "=", "[", "]", ")", ":", "\n", "        ", "match_quality_matrix", "=", "boxlist_iou", "(", "target", ",", "anchor", ")", "\n", "matched_idxs", "=", "self", ".", "proposal_matcher", "(", "match_quality_matrix", ")", "\n", "# RPN doesn't need any fields from target", "\n", "# for creating the labels, so clear them all", "\n", "target", "=", "target", ".", "copy_with_fields", "(", "copied_fields", ")", "\n", "# get the targets corresponding GT for each anchor", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.loss.FCOSLossComputation.get_sample_region": [[49, 82], ["len", "gt[].expand", "gt[].expand.new_zeros", "enumerate", "torch.stack", "center_x[].sum", "gt_xs.new_zeros", "torch.where", "torch.where", "torch.where", "torch.where", "torch.stack.min"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["# NB: need to clamp the indices because we can have a single", "\n", "# GT in the image, and matched_idxs can be -2, which goes", "\n", "# out of bounds", "\n", "matched_targets", "=", "target", "[", "matched_idxs", ".", "clamp", "(", "min", "=", "0", ")", "]", "\n", "matched_targets", ".", "add_field", "(", "\"matched_idxs\"", ",", "matched_idxs", ")", "\n", "return", "matched_targets", "\n", "\n", "", "def", "prepare_targets", "(", "self", ",", "anchors", ",", "targets", ")", ":", "\n", "        ", "labels", "=", "[", "]", "\n", "regression_targets", "=", "[", "]", "\n", "for", "anchors_per_image", ",", "targets_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n", "            ", "matched_targets", "=", "self", ".", "match_targets_to_anchors", "(", "\n", "anchors_per_image", ",", "targets_per_image", ",", "self", ".", "copied_fields", "\n", ")", "\n", "\n", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "self", ".", "generate_labels_func", "(", "matched_targets", ")", "\n", "labels_per_image", "=", "labels_per_image", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# Background (negative examples)", "\n", "bg_indices", "=", "matched_idxs", "==", "Matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "labels_per_image", "[", "bg_indices", "]", "=", "0", "\n", "\n", "# discard anchors that go out of the boundaries of the image", "\n", "if", "\"not_visibility\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "labels_per_image", "[", "~", "anchors_per_image", ".", "get_field", "(", "\"visibility\"", ")", "]", "=", "-", "1", "\n", "\n", "# discard indices that are between thresholds", "\n", "", "if", "\"between_thresholds\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "inds_to_discard", "=", "matched_idxs", "==", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_per_image", "[", "inds_to_discard", "]", "=", "-", "1", "\n", "\n", "# compute regression targets", "\n", "", "regression_targets_per_image", "=", "self", ".", "box_coder", ".", "encode", "(", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.loss.FCOSLossComputation.prepare_targets": [[83, 130], ["enumerate", "torch.cat", "torch.cat", "loss.FCOSLossComputation.compute_targets_for_locations", "range", "range", "points_per_level.new_tensor", "torch.cat.append", "len", "label.clone", "len", "torch.split", "torch.split", "len", "labels_level_first.append", "reg_targets_level_first.append", "object_sizes_of_interest_per_level[].expand", "torch.cat", "len", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.loss.FCOSLossComputation.compute_targets_for_locations", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat"], ["matched_targets", ".", "bbox", ",", "anchors_per_image", ".", "bbox", "\n", ")", "\n", "\n", "labels", ".", "append", "(", "labels_per_image", ")", "\n", "regression_targets", ".", "append", "(", "regression_targets_per_image", ")", "\n", "\n", "", "return", "labels", ",", "regression_targets", "\n", "\n", "\n", "", "def", "__call__", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors (list[BoxList])\n            objectness (list[Tensor])\n            box_regression (list[Tensor])\n            targets (list[BoxList])\n\n        Returns:\n            objectness_loss (Tensor)\n            box_loss (Tensor\n        \"\"\"", "\n", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "anchors_per_image", "in", "anchors", "]", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_pos_inds", ",", "sampled_neg_inds", "]", ",", "dim", "=", "0", ")", "\n", "\n", "objectness", ",", "box_regression", "=", "concat_box_prediction_layers", "(", "objectness", ",", "box_regression", ")", "\n", "\n", "objectness", "=", "objectness", ".", "squeeze", "(", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "regression_targets", "=", "torch", ".", "cat", "(", "regression_targets", ",", "dim", "=", "0", ")", "\n", "\n", "box_loss", "=", "smooth_l1_loss", "(", "\n", "box_regression", "[", "sampled_pos_inds", "]", ",", "\n", "regression_targets", "[", "sampled_pos_inds", "]", ",", "\n", "beta", "=", "1.0", "/", "9", ",", "\n", "size_average", "=", "False", ",", "\n", ")", "/", "(", "sampled_inds", ".", "numel", "(", ")", ")", "\n", "\n", "objectness_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "objectness", "[", "sampled_inds", "]", ",", "labels", "[", "sampled_inds", "]", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.loss.FCOSLossComputation.compute_targets_for_locations": [[131, 213], ["range", "len", "targets_per_im.get_field", "targets_per_im.get_field", "targets_per_im.area", "torch.stack", "area[].repeat", "area[].repeat.min", "labels.append", "reg_targets.append", "similarity.append", "loss.FCOSLossComputation.get_sample_region", "torch.stack.max", "len", "torch.stack.min", "range", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.loss.FCOSLossComputation.get_sample_region", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["return", "objectness_loss", ",", "box_loss", "\n", "\n", "# This function should be overwritten in RetinaNet", "\n", "", "", "def", "generate_rpn_labels", "(", "matched_targets", ")", ":", "\n", "    ", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "matched_idxs", ">=", "0", "\n", "return", "labels_per_image", "\n", "\n", "\n", "", "def", "make_rpn_loss_evaluator", "(", "cfg", ",", "box_coder", ")", ":", "\n", "    ", "matcher", "=", "Matcher", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "FG_IOU_THRESHOLD", ",", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BG_IOU_THRESHOLD", ",", "\n", "allow_low_quality_matches", "=", "True", ",", "\n", ")", "\n", "\n", "fg_bg_sampler", "=", "BalancedPositiveNegativeSampler", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BATCH_SIZE_PER_IMAGE", ",", "cfg", ".", "MODEL", ".", "RPN", ".", "POSITIVE_FRACTION", "\n", ")", "\n", "\n", "loss_evaluator", "=", "RPNLossComputation", "(", "\n", "matcher", ",", "\n", "fg_bg_sampler", ",", "\n", "box_coder", ",", "\n", "generate_rpn_labels", "\n", ")", "\n", "return", "loss_evaluator", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.loss.FCOSLossComputation.compute_centerness_targets": [[214, 220], ["torch.sqrt", "left_right.min", "left_right.max", "top_bottom.min", "top_bottom.max"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.loss.FCOSLossComputation.__call__": [[221, 330], ["box_cls[].size", "loss.FCOSLossComputation.FCOSLossComputation.prepare_targets", "zip", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze.numel", "maskrcnn_benchmark.utils.comm.get_world_size", "maskrcnn_benchmark.utils.comm.reduce_sum().item", "target.get_field().detach", "target.get_field", "torch.nonzero().squeeze", "torch.cat.append", "torch.cat.append", "len", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "loss.FCOSLossComputation.FCOSLossComputation.cls_loss_func", "max", "torch.nonzero().squeeze.numel", "loss.FCOSLossComputation.FCOSLossComputation.compute_centerness_targets", "loss.FCOSLossComputation.FCOSLossComputation.sum", "maskrcnn_benchmark.utils.comm.reduce_sum().item", "loss.FCOSLossComputation.FCOSLossComputation.sim_loss_func", "loss.FCOSLossComputation.FCOSLossComputation.mean", "maskrcnn_benchmark.utils.comm.reduce_sum", "torch.nonzero().squeeze.numel", "we.mm().view", "similarity_gt[].view", "box_cls[].permute().reshape", "box_regression[].permute().reshape", "labels[].reshape", "reg_targets[].reshape", "centerness[].reshape", "torch.nonzero", "torch.nonzero", "maskrcnn_benchmark.utils.comm.reduce_sum", "torch.cat.int", "loss.FCOSLossComputation.FCOSLossComputation.box_reg_loss_func", "loss.FCOSLossComputation.FCOSLossComputation.centerness_loss_func", "max", "torch.cat.float", "torch.cat.sum", "torch.cat.new_tensor", "torch.cat.sum", "torch.cat.sum", "target.get_field", "torch.nonzero", "torch.nonzero().squeeze.new_tensor", "maskrcnn_benchmark.utils.comm.reduce_sum", "we.mm", "box_cls[].permute", "box_regression[].permute"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.CTCPredictor.prepare_targets", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_world_size", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.loss.FCOSLossComputation.compute_centerness_targets", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.reduce_sum", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.reduce_sum", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.reduce_sum"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.loss.FCOSLossComputation.compute_offsets_targets": [[331, 343], ["mask_targets.sum().long", "mask_targets.size", "torch.zeros", "torch.zeros", "enumerate", "torch.stack().view", "zip", "mask_targets.sum", "torch.stack", "torch.tensor", "list", "range"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.loss.make_fcos_loss_evaluator": [[345, 348], ["loss.FCOSLossComputation"], "function", ["None"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.embedding.BidirectionalLSTM.__init__": [[49, 54], ["torch.nn.Module.__init__", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nHidden", ",", "nOut", ")", ":", "\n", "        ", "super", "(", "BidirectionalLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "nIn", ",", "nHidden", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Linear", "(", "nHidden", "*", "2", ",", "nOut", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.embedding.BidirectionalLSTM.forward": [[55, 64], ["embedding.BidirectionalLSTM.rnn", "recurrent.size", "recurrent.view", "embedding.BidirectionalLSTM.embedding", "output.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "recurrent", ",", "_", "=", "self", ".", "rnn", "(", "input", ")", "\n", "T", ",", "b", ",", "h", "=", "recurrent", ".", "size", "(", ")", "\n", "t_rec", "=", "recurrent", ".", "view", "(", "T", "*", "b", ",", "h", ")", "\n", "\n", "output", "=", "self", ".", "embedding", "(", "t_rec", ")", "# [T * b, nOut]", "\n", "output", "=", "output", ".", "view", "(", "T", ",", "b", ",", "-", "1", ")", "\n", "\n", "return", "output", "\n", "", "", "class", "WordEmbedding", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.embedding.WordEmbedding.__init__": [[65, 83], ["torch.nn.Module.__init__", "int", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Sequential", "torch.nn.Sequential", "embedding.BidirectionalLSTM", "len", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["    ", "def", "__init__", "(", "self", ",", "\n", "out_channels", "=", "512", ",", "\n", "embedding_dim", "=", "300", ",", "\n", "char_vector_dim", "=", "256", ",", "\n", "max_length", "=", "10", ",", "\n", "lexicon", "=", "string", ".", "ascii_lowercase", "+", "string", ".", "digits", ",", "\n", "bidirectional", "=", "True", ")", ":", "\n", "        ", "super", "(", "WordEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_length", "=", "int", "(", "max_length", ")", "\n", "self", ".", "lexicon", "=", "lexicon", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "char_embedding", "=", "nn", ".", "Embedding", "(", "len", "(", "self", ".", "lexicon", ")", ",", "embedding_dim", ")", "\n", "self", ".", "char_encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "embedding_dim", ",", "char_vector_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "# self.rnn = nn.LSTM(char_vector_dim, out_channels,num_layers=1,bidirectional=bidirectional)", "\n", "self", ".", "rnn", "=", "BidirectionalLSTM", "(", "char_vector_dim", ",", "256", ",", "out_channels", ")", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.embedding.WordEmbedding.forward": [[83, 105], ["embedding.WordEmbedding.char_encoder", "char_vector.permute().contiguous.permute().contiguous.permute().contiguous", "embedding.WordEmbedding.rnn", "x.permute().contiguous.permute().contiguous.permute().contiguous", "embedding.WordEmbedding.char_embedding", "embeddings_batch.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "char_vector.permute().contiguous.permute().contiguous.permute", "x.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "'''\n        word: b, 256\n        embedding: b, 256, 300\n        h_t: b, out_channels\n        '''", "\n", "embeddings_batch", "=", "[", "]", "\n", "for", "word", "in", "inputs", ":", "\n", "            ", "embeddings", "=", "self", ".", "char_embedding", "(", "word", ")", "\n", "embeddings_batch", ".", "append", "(", "\n", "nn", ".", "functional", ".", "interpolate", "(", "\n", "embeddings", "[", "None", ",", "None", ",", "...", "]", ",", "\n", "size", "=", "(", "self", ".", "max_length", ",", "self", ".", "embedding_dim", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", ")", "\n", "", "embeddings_batch", "=", "torch", ".", "cat", "(", "embeddings_batch", ",", "dim", "=", "1", ")", "[", "0", "]", "# [b, self.max_length, embedding_dim]", "\n", "char_vector", "=", "self", ".", "char_encoder", "(", "embeddings_batch", ")", "\n", "char_vector", "=", "char_vector", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "# [w, b, c]", "\n", "x", "=", "self", ".", "rnn", "(", "char_vector", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "# [b,w,c]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.embedding.WordHead.__init__": [[107, 123], ["torch.nn.Module.__init__", "maskrcnn_benchmark.utils.text_util.TextGenerator", "embedding.WordEmbedding"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            in_channels (int): number of channels of the input feature\n        \"\"\"", "\n", "super", "(", "SiamHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "out_channels", "=", "128", "\n", "in_channels", "=", "256", "\n", "self", ".", "text_generator", "=", "TextGenerator", "(", ")", "\n", "self", ".", "word_embedding", "=", "WordEmbedding", "(", "out_channels", "=", "out_channels", ",", "\n", "embedding_dim", "=", "256", ",", "\n", "char_vector_dim", "=", "256", ",", "\n", "max_length", "=", "15", ",", "\n", "lexicon", "=", "self", ".", "text_generator", ".", "chars", ",", "\n", "bidirectional", "=", "True", ")", "\n", "", "def", "forward", "(", "self", ",", "words", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.embedding.WordHead.forward": [[123, 139], ["print", "embedding.WordHead.word_embedding", "embedding.WordHead.text_generator.filter_words", "new_proposals.append", "torch.tensor().long().to", "torch.tensor().long().to", "torch.tensor().long().to", "torch.tensor().long().to", "proposals_per_im.get_field().tolist", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "proposals_per_im.get_field", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "embedding.WordHead.text_generator.label_map", "text.lower"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.filter_words", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.label_map"], ["", "def", "forward", "(", "self", ",", "words", ")", ":", "\n", "        ", "\"\"\"\n        offset related operations are messy\n        images: used for test pooler\n        \"\"\"", "\n", "for", "_", "in", "x", ":", "\n", "            ", "print", "(", "_", ".", "shape", ")", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "texts", "=", "[", "]", "\n", "new_proposals", "=", "[", "]", "\n", "for", "proposals_per_im", "in", "proposals", ":", "\n", "                ", "idxs", ",", "new_texts", "=", "self", ".", "text_generator", ".", "filter_words", "(", "proposals_per_im", ".", "get_field", "(", "\"texts\"", ")", ".", "tolist", "(", ")", ")", "\n", "# texts.extend(new_texts)", "\n", "new_proposals", ".", "append", "(", "proposals_per_im", "[", "idxs", "]", ")", "\n", "", "words", "=", "[", "torch", ".", "tensor", "(", "self", ".", "text_generator", ".", "label_map", "(", "text", ".", "lower", "(", ")", ")", ")", ".", "long", "(", ")", ".", "to", "(", "rois", ".", "device", ")", "for", "text", "in", "texts", "]", "\n", "words_embedding", "=", "self", ".", "word_embedding", "(", "words", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.predictors.PolarPredictor.__init__": [[11, 19], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "maskrcnn_benchmark.layers.DeformConv"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "num_chars", "=", "32", ",", "voc_size", "=", "38", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "PolarPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_chars", "=", "num_chars", "\n", "self", ".", "locator", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "3", "*", "num_chars", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "clf", "=", "DeformConv", "(", "\n", "in_channels", ",", "voc_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "offset_repeat", "=", "kernel_size", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.predictors.PolarPredictor.forward": [[20, 36], ["x.size", "predictors.PolarPredictor.locator", "range", "predictors.PolarPredictor.clf", "recs.append", "locations.append", "torch.stack", "torch.cat", "predictors.PolarPredictor.clf"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "vis", "=", "False", ")", ":", "\n", "        ", "\"\"\" Predict offsets with x and rec with y\n        Offsets is relative starting from the center\n        \"\"\"", "\n", "N", ",", "_", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "features", "=", "self", ".", "locator", "(", "x", ")", "\n", "offsets", ",", "masks", "=", "features", "[", ":", ",", ":", "self", ".", "num_chars", "*", "2", "]", ",", "features", "[", ":", ",", "self", ".", "num_chars", "*", "2", ":", "]", "\n", "location", "=", "offsets", "[", ":", ",", ":", "2", "]", "\n", "recs", "=", "[", "self", ".", "clf", "(", "y", ",", "location", ")", "]", "\n", "locations", "=", "[", "location", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_chars", ")", ":", "\n", "            ", "delta", "=", "offsets", "[", ":", ",", "i", "*", "2", ":", "(", "i", "+", "1", ")", "*", "2", "]", "\n", "location", "=", "location", "+", "delta", "\n", "recs", ".", "append", "(", "self", ".", "clf", "(", "y", ",", "location", ")", ")", "\n", "locations", ".", "append", "(", "location", ")", "\n", "", "return", "torch", ".", "stack", "(", "recs", ",", "dim", "=", "4", ")", ",", "masks", ",", "torch", ".", "cat", "(", "locations", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.predictors.SequentialPredictor.__init__": [[42, 51], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "maskrcnn_benchmark.layers.DeformConv"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "num_chars", "=", "32", ",", "voc_size", "=", "38", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "SequentialPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_chars", "=", "num_chars", "\n", "self", ".", "voc_size", "=", "voc_size", "\n", "self", ".", "locator", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "num_chars", "+", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "clf", "=", "DeformConv", "(", "\n", "in_channels", ",", "voc_size", "+", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "offset_repeat", "=", "kernel_size", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.predictors.SequentialPredictor.forward": [[52, 72], ["x.size", "predictors.SequentialPredictor.locator", "torch.zeros().cuda", "torch.zeros().cuda", "range", "predictors.SequentialPredictor.clf", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "max_len", ")", ":", "\n", "        ", "\"\"\" Predict offsets with x and rec with y\n        Offsets is relative starting from the center\n        \"\"\"", "\n", "N", ",", "_", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "init_features", "=", "self", ".", "locator", "(", "x", ")", "\n", "location", ",", "masks", "=", "init_features", "[", ":", ",", ":", "2", "]", ",", "init_features", "[", ":", ",", "2", ":", "]", "\n", "recs", "=", "torch", ".", "zeros", "(", "N", ",", "self", ".", "voc_size", ",", "H", ",", "W", ",", "max_len", ")", ".", "cuda", "(", ")", "\n", "locations", "=", "torch", ".", "zeros", "(", "N", ",", "max_len", "*", "2", ",", "H", ",", "W", ")", ".", "cuda", "(", ")", "\n", "delta", "=", "0", "\n", "for", "i", "in", "range", "(", "max_len", ")", ":", "\n", "# parallel?", "\n", "# during training, early stopping with gt", "\n", "# TODO: early stopping for testing", "\n", "            ", "location", "=", "location", "+", "delta", "\n", "locations", "[", ":", ",", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", "=", "location", "\n", "local_features", "=", "self", ".", "clf", "(", "y", ",", "location", ")", "\n", "rec", ",", "delta", "=", "local_features", "[", ":", ",", ":", "-", "2", "]", ",", "local_features", "[", ":", ",", "-", "2", ":", "]", "\n", "recs", "[", ":", ",", ":", ",", ":", ",", ":", ",", "i", "]", "=", "rec", "\n", "", "return", "recs", ",", "masks", ",", "locations", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.predictors.make_offset_predictor": [[74, 86], ["predictors.PolarPredictor", "predictors.SequentialPredictor", "NotImplementedError"], "function", ["None"], ["", "", "def", "make_offset_predictor", "(", "cfg", ",", "in_channels", ")", ":", "\n", "# not using kernel_size now", "\n", "    ", "predictor", "=", "cfg", ".", "MODEL", ".", "OFFSET", ".", "PREDICTOR", "\n", "kwargs", "=", "{", "\"num_chars\"", ":", "cfg", ".", "MODEL", ".", "OFFSET", ".", "NUM_CHARS", ",", "\n", "\"voc_size\"", ":", "cfg", ".", "MODEL", ".", "OFFSET", ".", "VOC_SIZE", ",", "\n", "\"kernel_size\"", ":", "cfg", ".", "MODEL", ".", "OFFSET", ".", "KERNEL_SIZE", "}", "\n", "if", "predictor", "==", "\"polar\"", ":", "\n", "        ", "return", "PolarPredictor", "(", "in_channels", ",", "**", "kwargs", ")", "\n", "", "elif", "predictor", "==", "\"sequential\"", ":", "\n", "        ", "return", "SequentialPredictor", "(", "in_channels", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"{} is not a valid predictor\"", ".", "format", "(", "predictor", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.fast_center.FastCenterHead.__init__": [[20, 77], ["super().__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform", "torch.nn.Sequential", "torch.nn.init.constant_", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform", "range", "fast_center.FastCenterHead.add_module", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform.", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform.", "modules.modules", "math.log", "tower.append", "torch.nn.Sequential", "isinstance", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform.", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.conv_with_kaiming_uniform", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.conv_with_kaiming_uniform"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            in_channels (int): number of channels of the input feature\n        \"\"\"", "\n", "super", "(", "FastCenterHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# TODO: Implement the sigmoid version first.", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "FCOS", ".", "NUM_CLASSES", "-", "1", "\n", "if", "cfg", ".", "MODEL", ".", "FCOS", ".", "USE_LIGHTWEIGHT", ":", "\n", "            ", "conv_block", "=", "snv2_block", "\n", "", "else", ":", "\n", "            ", "conv_block", "=", "conv_with_kaiming_uniform", "(", "\n", "cfg", ".", "MODEL", ".", "FCOS", ".", "USE_GN", ",", "cfg", ".", "MODEL", ".", "FCOS", ".", "USE_RELU", ",", "\n", "cfg", ".", "MODEL", ".", "FCOS", ".", "USE_DEFORMABLE", ",", "cfg", ".", "MODEL", ".", "FCOS", ".", "USE_BN", ")", "\n", "\n", "", "for", "head", "in", "[", "'bbox'", "]", ":", "\n", "            ", "tower", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "MODEL", ".", "FCOS", ".", "NUM_CONVS", ")", ":", "\n", "                ", "tower", ".", "append", "(", "\n", "conv_block", "(", "in_channels", ",", "in_channels", ",", "3", ",", "1", ")", ")", "\n", "", "self", ".", "add_module", "(", "'{}_tower'", ".", "format", "(", "head", ")", ",", "\n", "nn", ".", "Sequential", "(", "*", "tower", ")", ")", "\n", "\n", "", "self", ".", "cls_logits", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", "self", ".", "centerness", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", "retrieval_conv", "=", "conv_with_kaiming_uniform", "(", "cfg", ".", "MODEL", ".", "FCOS", ".", "USE_GN", ",", "cfg", ".", "MODEL", ".", "FCOS", ".", "USE_RELU", ",", "cfg", ".", "MODEL", ".", "FCOS", ".", "USE_DEFORMABLE", ",", "cfg", ".", "MODEL", ".", "FCOS", ".", "USE_BN", ")", "\n", "self", ".", "retrieval_head", "=", "nn", ".", "Sequential", "(", "\n", "retrieval_conv", "(", "in_channels", ",", "in_channels", ",", "3", ",", "1", ")", ",", "\n", "retrieval_conv", "(", "in_channels", ",", "1920", ",", "1", ",", "1", ")", "\n", ")", "\n", "\n", "# self.poly_pred = nn.Conv2d(", "\n", "#     in_channels, 8, kernel_size=3, stride=1,", "\n", "#     padding=1)", "\n", "\n", "# initialization", "\n", "for", "modules", "in", "[", "self", ".", "cls_logits", ",", "self", ".", "bbox_pred", ",", "self", ".", "centerness", "]", ":", "\n", "            ", "for", "l", "in", "modules", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "l", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n", "# initialize the bias for focal loss", "\n", "", "", "", "prior_prob", "=", "cfg", ".", "MODEL", ".", "FCOS", ".", "PRIOR_PROB", "\n", "bias_value", "=", "-", "math", ".", "log", "(", "(", "1", "-", "prior_prob", ")", "/", "prior_prob", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "cls_logits", ".", "bias", ",", "bias_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.fast_center.FastCenterHead.forward": [[78, 93], ["enumerate", "fast_center.FastCenterHead.bbox_tower", "logits.append", "centerness.append", "bbox_reg.append", "retrievals.append", "fast_center.FastCenterHead.cls_logits", "fast_center.FastCenterHead.centerness", "torch.nn.functional.relu", "fast_center.FastCenterHead.retrieval_head", "fast_center.FastCenterHead.bbox_pred"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "logits", "=", "[", "]", "\n", "bbox_reg", "=", "[", "]", "\n", "centerness", "=", "[", "]", "\n", "retrievals", "=", "[", "]", "\n", "for", "l", ",", "feature", "in", "enumerate", "(", "x", ")", ":", "\n", "            ", "bbox_tower", "=", "self", ".", "bbox_tower", "(", "feature", ")", "\n", "\n", "logits", ".", "append", "(", "self", ".", "cls_logits", "(", "bbox_tower", ")", ")", "\n", "centerness", ".", "append", "(", "self", ".", "centerness", "(", "bbox_tower", ")", ")", "\n", "bbox_reg", ".", "append", "(", "F", ".", "relu", "(", "self", ".", "bbox_pred", "(", "bbox_tower", ")", ")", ")", "\n", "retrievals", ".", "append", "(", "self", ".", "retrieval_head", "(", "bbox_tower", ")", ")", "\n", "\n", "# poly_reg.append(self.poly_pred(bbox_tower))", "\n", "", "return", "logits", ",", "bbox_reg", ",", "centerness", ",", "retrievals", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.fast_center.FastCenterModule.__init__": [[101, 127], ["super().__init__", "cfg.clone", "fast_center.FastCenterHead", "inference.make_fcos_postprocessor", "inference.make_fcos_postprocessor", "loss.make_fcos_loss_evaluator", "maskrcnn_benchmark.utils.text_util.TextGenerator", "embedding.WordEmbedding", "torch.nn.SmoothL1Loss"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.inference.make_fcos_postprocessor", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.inference.make_fcos_postprocessor", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.loss.make_fcos_loss_evaluator"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FastCenterModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "\n", "head", "=", "FastCenterHead", "(", "cfg", ",", "in_channels", ")", "\n", "\n", "box_selector_train", "=", "make_fcos_postprocessor", "(", "cfg", ",", "is_train", "=", "True", ")", "\n", "box_selector_test", "=", "make_fcos_postprocessor", "(", "cfg", ")", "\n", "\n", "loss_evaluator", "=", "make_fcos_loss_evaluator", "(", "cfg", ")", "\n", "self", ".", "head", "=", "head", "\n", "self", ".", "box_selector_train", "=", "box_selector_train", "\n", "self", ".", "box_selector_test", "=", "box_selector_test", "\n", "self", ".", "loss_evaluator", "=", "loss_evaluator", "\n", "self", ".", "fpn_strides", "=", "cfg", ".", "MODEL", ".", "FCOS", ".", "FPN_STRIDES", "\n", "self", ".", "num_iters", "=", "0", "\n", "self", ".", "text_generator", "=", "TextGenerator", "(", ")", "\n", "self", ".", "word_embedding", "=", "WordEmbedding", "(", "\n", "out_channels", "=", "128", ",", "\n", "embedding_dim", "=", "256", ",", "\n", "char_vector_dim", "=", "256", ",", "\n", "max_length", "=", "15", ",", "\n", "lexicon", "=", "self", ".", "text_generator", ".", "chars", ",", "\n", "bidirectional", "=", "True", ")", "\n", "self", ".", "sim_loss_func", "=", "nn", ".", "SmoothL1Loss", "(", "reduction", "=", "'none'", ")", "\n", "# def retrieval(self, image_embedding, word_embedding):", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.fast_center.FastCenterModule.compute_retrieval_similarity_gt": [[128, 136], ["target.get_field().tolist", "fast_center.FastCenterModule.text_generator.calculate_similarity_matric", "target.add_field", "target.add_field", "torch.tensor().to", "target.get_field", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.calculate_similarity_matric", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["", "def", "compute_retrieval_similarity_gt", "(", "self", ",", "target", ",", "retrieval_texts", ",", "device", ")", ":", "\n", "        ", "gt_texts", "=", "target", ".", "get_field", "(", "\"texts\"", ")", ".", "tolist", "(", ")", "\n", "\n", "# print(len(retrieval_texts), len(gt_texts))", "\n", "similarity", "=", "self", ".", "text_generator", ".", "calculate_similarity_matric", "(", "retrieval_texts", ",", "gt_texts", ")", "\n", "# print(similarity)", "\n", "target", ".", "add_field", "(", "\"similarity\"", ",", "torch", ".", "tensor", "(", "similarity", ")", ".", "to", "(", "device", ")", ")", "\n", "target", ".", "add_field", "(", "\"retrieval_texts\"", ",", "retrieval_texts", ")", "\n", "# print(\"similarity_gt.shape:\", similarity.shape)", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.fast_center.FastCenterModule.compute_retrieval_similarity_pred": [[140, 148], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize.mm", "target.add_field", "target.add_field", "target.add_field", "image_embedding.tanh", "word_embedding.tanh"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field"], ["def", "compute_retrieval_similarity_pred", "(", "self", ",", "target", ",", "image_embedding", ",", "word_embedding", ")", ":", "\n", "        ", "image_embedding_nor", "=", "nn", ".", "functional", ".", "normalize", "(", "image_embedding", ".", "tanh", "(", ")", ",", "dim", "=", "0", ")", "\n", "word_embedding_nor", "=", "nn", ".", "functional", ".", "normalize", "(", "word_embedding", ".", "tanh", "(", ")", ",", "dim", "=", "1", ")", "\n", "similarity", "=", "word_embedding_nor", ".", "mm", "(", "image_embedding_nor", ")", "\n", "# print(image_embedding_nor.shape,word_embedding_nor.shape,similarity.shape)", "\n", "target", ".", "add_field", "(", "\"similarity_pred\"", ",", "similarity", ")", "\n", "target", ".", "add_field", "(", "\"images_embedding_nor\"", ",", "image_embedding_nor", ")", "\n", "target", ".", "add_field", "(", "\"words_embedding_nor\"", ",", "word_embedding_nor", ")", "\n", "", "def", "compute_retrieval_similarity_pred_fast", "(", "self", ",", "target", ",", "image_embedding", ",", "word_embedding", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.fast_center.FastCenterModule.compute_retrieval_similarity_pred_fast": [[148, 153], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "target.add_field", "target.add_field", "image_embedding.tanh", "word_embedding.tanh"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field"], ["", "def", "compute_retrieval_similarity_pred_fast", "(", "self", ",", "target", ",", "image_embedding", ",", "word_embedding", ")", ":", "\n", "        ", "image_embedding_nor", "=", "nn", ".", "functional", ".", "normalize", "(", "image_embedding", ".", "tanh", "(", ")", ",", "dim", "=", "0", ")", "\n", "word_embedding_nor", "=", "nn", ".", "functional", ".", "normalize", "(", "word_embedding", ".", "tanh", "(", ")", ",", "dim", "=", "1", ")", "\n", "target", ".", "add_field", "(", "\"images_embedding_nor\"", ",", "image_embedding_nor", ")", "\n", "target", ".", "add_field", "(", "\"words_embedding_nor\"", ",", "word_embedding_nor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.fast_center.FastCenterModule.forward": [[154, 209], ["fast_center.FastCenterModule.head", "fast_center.FastCenterModule.compute_locations", "enumerate", "fast_center.FastCenterModule._forward_train", "enumerate", "fast_center.FastCenterModule._forward_test", "target.get_field().tolist", "fast_center.FastCenterModule.word_embedding().view", "torch.cat", "fast_center.FastCenterModule.compute_retrieval_similarity_gt", "fast_center.FastCenterModule.compute_retrieval_similarity_pred_fast", "target.get_field().tolist", "fast_center.FastCenterModule.word_embedding().view", "torch.cat", "fast_center.FastCenterModule.compute_retrieval_similarity_gt", "fast_center.FastCenterModule.compute_retrieval_similarity_pred", "torch.tensor().long().to", "len", "zip", "torch.tensor().long().to", "len", "target.get_field", "fast_center.FastCenterModule.word_embedding", "per_level[].view", "target.get_field", "fast_center.FastCenterModule.word_embedding", "per_level[].view", "fast_center.FastCenterModule.text_generator.filter_words", "torch.tensor().long", "torch.tensor().long", "target.get_field().tolist", "torch.tensor", "torch.tensor", "target.get_field", "fast_center.FastCenterModule.text_generator.label_map", "fast_center.FastCenterModule.text_generator.label_map", "text.lower", "text.lower"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule.compute_locations", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule._forward_train", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule._forward_test", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.fast_center.FastCenterModule.compute_retrieval_similarity_gt", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.fast_center.FastCenterModule.compute_retrieval_similarity_pred_fast", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.fast_center.FastCenterModule.compute_retrieval_similarity_gt", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.fast_center.FastCenterModule.compute_retrieval_similarity_pred", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.filter_words", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.label_map", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.label_map"], ["", "def", "forward", "(", "self", ",", "images", ",", "features", ",", "targets", "=", "None", ",", "vis", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            images (ImageList): images for which we want to compute the predictions\n            features (list[Tensor]): features computed from the images that are\n                used for computing the predictions. Each tensor in the list\n                correspond to different feature levels\n            targets (list[BoxList): ground-truth boxes present in the image (optional)\n\n        Returns:\n            boxes (list[BoxList]): the predicted boxes from the RPN, one BoxList per\n                image.\n            losses (dict[Tensor]): the losses for the model during training. During\n                testing, it is an empty dict.\n        \"\"\"", "\n", "box_cls", ",", "box_regression", ",", "centerness", ",", "image_embedding", "=", "self", ".", "head", "(", "features", ")", "\n", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# all_word_embedding = []", "\n", "# all_words = []", "\n", "            ", "new_targets", "=", "[", "target", "[", "self", ".", "text_generator", ".", "filter_words", "(", "target", ".", "get_field", "(", "\"texts\"", ")", ".", "tolist", "(", ")", ")", "[", "0", "]", "]", "for", "target", "in", "targets", "]", "\n", "for", "idx", ",", "target", "in", "enumerate", "(", "new_targets", ")", ":", "\n", "                ", "texts", "=", "target", ".", "get_field", "(", "\"texts\"", ")", ".", "tolist", "(", ")", "\n", "words", "=", "[", "torch", ".", "tensor", "(", "self", ".", "text_generator", ".", "label_map", "(", "text", ".", "lower", "(", ")", ")", ")", ".", "long", "(", ")", ".", "to", "(", "features", "[", "0", "]", ".", "device", ")", "for", "text", "in", "texts", "]", "\n", "words_embedding_per_img", "=", "self", ".", "word_embedding", "(", "words", ")", ".", "view", "(", "len", "(", "words", ")", ",", "-", "1", ")", "\n", "image_embedding_per_img", "=", "torch", ".", "cat", "(", "[", "per_level", "[", "idx", "]", ".", "view", "(", "1920", ",", "-", "1", ")", "for", "per_level", "in", "image_embedding", "]", ",", "dim", "=", "-", "1", ")", "\n", "self", ".", "compute_retrieval_similarity_gt", "(", "target", ",", "texts", ",", "device", "=", "features", "[", "0", "]", ".", "device", ")", "\n", "self", ".", "compute_retrieval_similarity_pred_fast", "(", "target", ",", "image_embedding_per_img", ",", "words_embedding_per_img", ")", "\n", "", "targets", "=", "new_targets", "\n", "\n", "", "locations", "=", "self", ".", "compute_locations", "(", "features", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_forward_train", "(", "\n", "locations", ",", "box_cls", ",", "\n", "box_regression", ",", "\n", "centerness", ",", "\n", "image_embedding", ",", "\n", "targets", ",", "images", ".", "image_sizes", "\n", ")", "\n", "", "else", ":", "\n", "# scale regression targets", "\n", "            ", "box_regression", "=", "[", "r", "*", "s", "for", "r", ",", "s", "in", "zip", "(", "box_regression", ",", "self", ".", "fpn_strides", ")", "]", "\n", "# new_targets = [target[self.text_generator.filter_words(target.get_field(\"texts\").tolist())[0]] for target in targets]", "\n", "for", "idx", ",", "target", "in", "enumerate", "(", "targets", ")", ":", "\n", "                ", "texts", "=", "target", ".", "get_field", "(", "\"texts\"", ")", ".", "tolist", "(", ")", "\n", "words", "=", "[", "torch", ".", "tensor", "(", "self", ".", "text_generator", ".", "label_map", "(", "text", ".", "lower", "(", ")", ")", ")", ".", "long", "(", ")", ".", "to", "(", "features", "[", "0", "]", ".", "device", ")", "for", "text", "in", "texts", "]", "\n", "words_embedding_per_img", "=", "self", ".", "word_embedding", "(", "words", ")", ".", "view", "(", "len", "(", "words", ")", ",", "-", "1", ")", "\n", "image_embedding_per_img", "=", "torch", ".", "cat", "(", "[", "per_level", "[", "idx", "]", ".", "view", "(", "1920", ",", "-", "1", ")", "for", "per_level", "in", "image_embedding", "]", ",", "dim", "=", "-", "1", ")", "\n", "self", ".", "compute_retrieval_similarity_gt", "(", "target", ",", "texts", ",", "device", "=", "features", "[", "0", "]", ".", "device", ")", "\n", "self", ".", "compute_retrieval_similarity_pred", "(", "target", ",", "image_embedding_per_img", ",", "words_embedding_per_img", ")", "\n", "", "boxes", ",", "_", "=", "self", ".", "_forward_test", "(", "locations", ",", "box_cls", ",", "box_regression", ",", "centerness", ",", "images", ".", "image_sizes", ")", "\n", "# print(len(box_cls), len(box_regression), len(centerness), len(image_embedding),len(features))", "\n", "return", "boxes", ",", "{", "\"box_cls\"", ":", "box_cls", ",", "\"centerness\"", ":", "centerness", ",", "\"targets\"", ":", "targets", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.fast_center.FastCenterModule._forward_train": [[210, 232], ["fast_center.FastCenterModule.loss_evaluator", "torch.cat", "fast_center.FastCenterModule.text_generator.calculate_similarity_matric", "torch.tensor().to().float", "torch.cat.mm", "fast_center.FastCenterModule.sim_loss_func", "[].mean", "all_texts.extend", "torch.cat.t", "target.get_field", "target.get_field", "torch.tensor().to", "fast_center.FastCenterModule.max", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.calculate_similarity_matric", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to"], ["", "", "def", "_forward_train", "(", "self", ",", "locations", ",", "box_cls", ",", "box_regression", ",", "centerness", ",", "retrievals", ",", "\n", "targets", ",", "image_sizes", ")", ":", "\n", "        ", "loss_box_cls", ",", "loss_box_reg", ",", "loss_centerness", ",", "loss_sim", ",", "is_in_bboxes", "=", "self", ".", "loss_evaluator", "(", "\n", "locations", ",", "box_cls", ",", "box_regression", ",", "centerness", ",", "retrievals", ",", "targets", "\n", ")", "\n", "all_word_embedding", "=", "torch", ".", "cat", "(", "[", "target", ".", "get_field", "(", "\"words_embedding_nor\"", ")", "for", "target", "in", "targets", "]", ")", "\n", "all_texts", "=", "[", "]", "\n", "for", "target", "in", "targets", ":", "\n", "            ", "all_texts", ".", "extend", "(", "target", ".", "get_field", "(", "\"retrieval_texts\"", ")", ")", "\n", "", "similarity", "=", "self", ".", "text_generator", ".", "calculate_similarity_matric", "(", "all_texts", ",", "all_texts", ")", "\n", "similarity", "=", "torch", ".", "tensor", "(", "similarity", ")", ".", "to", "(", "all_word_embedding", ".", "device", ")", ".", "float", "(", ")", "\n", "iou", "=", "all_word_embedding", ".", "mm", "(", "all_word_embedding", ".", "t", "(", ")", ")", "\n", "loss", "=", "self", ".", "sim_loss_func", "(", "iou", ",", "similarity", ")", "\n", "loss_sim_ww", "=", "loss", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "mean", "(", ")", "\n", "losses", "=", "{", "\n", "\"loss_cls\"", ":", "loss_box_cls", ",", "\n", "\"loss_reg\"", ":", "loss_box_reg", ",", "\n", "\"loss_centerness\"", ":", "loss_centerness", ",", "\n", "\"loss_sim_wi\"", ":", "loss_sim", "*", "10", ",", "\n", "\"loss_sim_ww\"", ":", "loss_sim_ww", "*", "10", ",", "\n", "}", "\n", "return", "None", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.fast_center.FastCenterModule._forward_test": [[233, 241], ["fast_center.FastCenterModule.box_selector_test"], "methods", ["None"], ["", "def", "_forward_test", "(", "\n", "self", ",", "locations", ",", "box_cls", ",", "box_regression", ",", "\n", "centerness", ",", "image_sizes", ")", ":", "\n", "        ", "boxes", "=", "self", ".", "box_selector_test", "(", "\n", "locations", ",", "box_cls", ",", "box_regression", ",", "\n", "centerness", ",", "image_sizes", "\n", ")", "\n", "return", "boxes", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.fast_center.FastCenterModule.compute_locations": [[242, 252], ["enumerate", "fast_center.FastCenterModule.compute_locations_per_level", "locations.append", "feature.size"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule.compute_locations_per_level"], ["", "def", "compute_locations", "(", "self", ",", "features", ")", ":", "\n", "        ", "locations", "=", "[", "]", "\n", "for", "level", ",", "feature", "in", "enumerate", "(", "features", ")", ":", "\n", "            ", "h", ",", "w", "=", "feature", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "locations_per_level", "=", "self", ".", "compute_locations_per_level", "(", "\n", "h", ",", "w", ",", "self", ".", "fpn_strides", "[", "level", "]", ",", "\n", "feature", ".", "device", "\n", ")", "\n", "locations", ".", "append", "(", "locations_per_level", ")", "\n", "", "return", "locations", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.fast_center.FastCenterModule.compute_locations_per_level": [[253, 267], ["torch.arange", "torch.arange", "torch.meshgrid", "shift_x.reshape.reshape.reshape", "shift_y.reshape.reshape.reshape", "torch.stack"], "methods", ["None"], ["", "def", "compute_locations_per_level", "(", "self", ",", "h", ",", "w", ",", "stride", ",", "device", ")", ":", "\n", "        ", "shifts_x", "=", "torch", ".", "arange", "(", "\n", "0", ",", "w", "*", "stride", ",", "step", "=", "stride", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n", "shifts_y", "=", "torch", ".", "arange", "(", "\n", "0", ",", "h", "*", "stride", ",", "step", "=", "stride", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n", "shift_y", ",", "shift_x", "=", "torch", ".", "meshgrid", "(", "shifts_y", ",", "shifts_x", ")", "\n", "shift_x", "=", "shift_x", ".", "reshape", "(", "-", "1", ")", "\n", "shift_y", "=", "shift_y", ".", "reshape", "(", "-", "1", ")", "\n", "locations", "=", "torch", ".", "stack", "(", "(", "shift_x", ",", "shift_y", ")", ",", "dim", "=", "1", ")", "+", "stride", "//", "2", "\n", "return", "locations", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.fast_center.snv2_block": [[15, 17], ["maskrcnn_benchmark.modeling.backbone.fbnet_builder.ShuffleV2Block"], "function", ["None"], ["def", "snv2_block", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ")", ":", "\n", "    ", "return", "ShuffleV2Block", "(", "in_channels", ",", "out_channels", ",", "expansion", "=", "2", ",", "stride", "=", "stride", ",", "kernel", "=", "kernel_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fast_center.fast_center.build_fast_center": [[269, 271], ["fast_center.FastCenterModule"], "function", ["None"], ["", "", "def", "build_fast_center", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "return", "FastCenterModule", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.inference.FCOSPostProcessor.__init__": [[15, 43], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "pre_nms_top_n", ",", "\n", "post_nms_top_n", ",", "\n", "nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n", "fpn_post_nms_per_batch", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            pre_nms_top_n (int)\n            post_nms_top_n (int)\n            nms_thresh (float)\n            min_size (int)\n            box_coder (BoxCoder)\n            fpn_post_nms_top_n (int)\n        \"\"\"", "\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.inference.FCOSPostProcessor.forward_for_single_feature_map": [[44, 145], ["box_cls.reshape().sigmoid.reshape().sigmoid.view().permute", "box_cls.reshape().sigmoid.reshape().sigmoid.reshape().sigmoid", "box_regression.reshape.reshape.view().permute", "box_regression.reshape.reshape.reshape", "poly_regression.reshape.reshape.view().permute", "poly_regression.reshape.reshape.reshape", "centerness.reshape().sigmoid.reshape().sigmoid.view().permute", "centerness.reshape().sigmoid.reshape().sigmoid.reshape().sigmoid", "candidate_inds.view().sum", "pre_nms_top_n.clamp.clamp.clamp", "range", "torch.cat", "offsets.permute().reshape.permute().reshape.permute().reshape", "per_candidate_inds.nonzero", "torch.stack", "torch.stack", "poly_detections.view.view.view", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.clip_to_image", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes", "results.append", "box_cls.reshape().sigmoid.reshape().sigmoid.view", "box_cls.reshape().sigmoid.reshape().sigmoid.reshape", "box_regression.reshape.reshape.view", "poly_regression.reshape.reshape.view", "centerness.reshape().sigmoid.reshape().sigmoid.view", "centerness.reshape().sigmoid.reshape().sigmoid.reshape", "candidate_inds.view", "per_candidate_inds.sum().item", "per_pre_nms_top_n.item", "per_box_cls.topk", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "offsets.permute().reshape.permute().reshape.permute", "int", "int", "per_offsets[].sigmoid", "per_candidate_inds.sum"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.clip_to_image", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.remove_small_boxes", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field"], ["if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "self", ".", "fpn_post_nms_per_batch", "=", "fpn_post_nms_per_batch", "\n", "\n", "", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "# later cat of bbox requires all fields to be present for all bbox", "\n", "# so we need to add a dummy for objectness that's missing", "\n", "for", "gt_box", "in", "gt_boxes", ":", "\n", "            ", "gt_box", ".", "add_field", "(", "\"objectness\"", ",", "torch", ".", "ones", "(", "len", "(", "gt_box", ")", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "proposals", "=", "[", "\n", "cat_boxlist", "(", "(", "proposal", ",", "gt_box", ")", ")", "\n", "for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n", "]", "\n", "\n", "return", "proposals", "\n", "\n", "", "def", "forward_for_single_feature_map", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n", "objectness", "=", "permute_and_flatten", "(", "objectness", ",", "N", ",", "A", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "objectness", "=", "objectness", ".", "sigmoid", "(", ")", "\n", "\n", "box_regression", "=", "permute_and_flatten", "(", "box_regression", ",", "N", ",", "A", ",", "4", ",", "H", ",", "W", ")", "\n", "\n", "num_anchors", "=", "A", "*", "H", "*", "W", "\n", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n", "box_regression", "=", "box_regression", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "anchors", "]", "\n", "concat_anchors", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "concat_anchors", "=", "concat_anchors", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "-", "1", ",", "4", ")", ",", "concat_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "proposals", "=", "proposals", ".", "view", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "proposal", ",", "score", ",", "im_shape", "in", "zip", "(", "proposals", ",", "objectness", ",", "image_shapes", ")", ":", "\n", "            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "boxlist", "=", "remove_small_boxes", "(", "boxlist", ",", "self", ".", "min_size", ")", "\n", "boxlist", "=", "boxlist_nms", "(", "\n", "boxlist", ",", "\n", "self", ".", "nms_thresh", ",", "\n", "max_proposals", "=", "self", ".", "post_nms_top_n", ",", "\n", "score_field", "=", "\"objectness\"", ",", "\n", ")", "\n", "result", ".", "append", "(", "boxlist", ")", "\n", "", "return", "result", "\n", "\n", "", "def", "forward", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[list[BoxList]]\n            objectness: list[tensor]\n            box_regression: list[tensor]\n\n        Returns:\n            boxlists (list[BoxList]): the post-processed anchors, after\n                applying box decoding and NMS\n        \"\"\"", "\n", "sampled_boxes", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "objectness", ")", "\n", "anchors", "=", "list", "(", "zip", "(", "*", "anchors", ")", ")", "\n", "for", "a", ",", "o", ",", "b", "in", "zip", "(", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "            ", "sampled_boxes", ".", "append", "(", "self", ".", "forward_for_single_feature_map", "(", "a", ",", "o", ",", "b", ")", ")", "\n", "\n", "", "boxlists", "=", "list", "(", "zip", "(", "*", "sampled_boxes", ")", ")", "\n", "boxlists", "=", "[", "cat_boxlist", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "\n", "if", "num_levels", ">", "1", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.inference.FCOSPostProcessor.forward": [[146, 180], ["enumerate", "list", "inference.FCOSPostProcessor.select_over_all_levels", "zip", "sampled_boxes.append", "zip", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "inference.FCOSPostProcessor.forward_for_single_feature_map"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.inference.FCOSPostProcessor.select_over_all_levels", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.inference.FCOSPostProcessor.forward_for_single_feature_map"], ["            ", "boxlists", "=", "self", ".", "select_over_all_levels", "(", "boxlists", ")", "\n", "\n", "# append ground-truth bboxes to proposals", "\n", "", "if", "self", ".", "training", "and", "targets", "is", "not", "None", ":", "\n", "            ", "boxlists", "=", "self", ".", "add_gt_proposals", "(", "boxlists", ",", "targets", ")", "\n", "\n", "", "return", "boxlists", "\n", "\n", "", "def", "select_over_all_levels", "(", "self", ",", "boxlists", ")", ":", "\n", "        ", "num_images", "=", "len", "(", "boxlists", ")", "\n", "# different behavior during training and during testing:", "\n", "# during training, post_nms_top_n is over *all* the proposals combined, while", "\n", "# during testing, it is over the proposals for each image", "\n", "# NOTE: it should be per image, and not per batch. However, to be consistent ", "\n", "# with Detectron, the default is per batch (see Issue #672)", "\n", "if", "self", ".", "training", "and", "self", ".", "fpn_post_nms_per_batch", ":", "\n", "            ", "objectness", "=", "torch", ".", "cat", "(", "\n", "[", "boxlist", ".", "get_field", "(", "\"objectness\"", ")", "for", "boxlist", "in", "boxlists", "]", ",", "dim", "=", "0", "\n", ")", "\n", "box_sizes", "=", "[", "len", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", ")", "\n", "inds_mask", "=", "torch", ".", "zeros_like", "(", "objectness", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "inds_mask", "[", "inds_sorted", "]", "=", "1", "\n", "inds_mask", "=", "inds_mask", ".", "split", "(", "box_sizes", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_mask", "[", "i", "]", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "objectness", "=", "boxlists", "[", "i", "]", ".", "get_field", "(", "\"objectness\"", ")", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "\n", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", "\n", ")", "\n", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_sorted", "]", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.inference.FCOSPostProcessor.select_over_all_levels": [[185, 247], ["len", "boxlists[].has_field", "range", "boxlists[].get_field", "boxlists[].get_field", "boxlists[].get_field", "range", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "len", "results.append", "boxlists[].get_field", "boxlists[].get_field", "boxlists[].get_field", "boxes[].view", "polys[].view", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms", "len", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.append", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field", "torch.kthvalue", "torch.nonzero().squeeze", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "torch.full", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field.cpu", "image_thresh.item", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.has_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.boxlist_nms", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field"], ["    ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TEST", "\n", "\n", "", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TRAIN", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TEST", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TEST", "\n", "", "fpn_post_nms_per_batch", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_PER_BATCH", "\n", "nms_thresh", "=", "config", ".", "MODEL", ".", "RPN", ".", "NMS_THRESH", "\n", "min_size", "=", "config", ".", "MODEL", ".", "RPN", ".", "MIN_SIZE", "\n", "box_selector", "=", "RPNPostProcessor", "(", "\n", "pre_nms_top_n", "=", "pre_nms_top_n", ",", "\n", "post_nms_top_n", "=", "post_nms_top_n", ",", "\n", "nms_thresh", "=", "nms_thresh", ",", "\n", "min_size", "=", "min_size", ",", "\n", "box_coder", "=", "rpn_box_coder", ",", "\n", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", ",", "\n", "fpn_post_nms_per_batch", "=", "fpn_post_nms_per_batch", ",", "\n", ")", "\n", "return", "box_selector", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.inference.make_fcos_postprocessor": [[248, 270], ["inference.FCOSPostProcessor"], "function", ["None"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSHead.__init__": [[20, 72], ["super().__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.constant_", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform", "range", "fcos.FCOSHead.add_module", "modules.modules", "math.log", "tower.append", "torch.nn.Sequential", "isinstance", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform.", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.conv_with_kaiming_uniform"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            in_channels (int): number of channels of the input feature\n        \"\"\"", "\n", "super", "(", "FCOSHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# TODO: Implement the sigmoid version first.", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "FCOS", ".", "NUM_CLASSES", "-", "1", "\n", "if", "cfg", ".", "MODEL", ".", "FCOS", ".", "USE_LIGHTWEIGHT", ":", "\n", "            ", "conv_block", "=", "snv2_block", "\n", "", "else", ":", "\n", "            ", "conv_block", "=", "conv_with_kaiming_uniform", "(", "\n", "cfg", ".", "MODEL", ".", "FCOS", ".", "USE_GN", ",", "cfg", ".", "MODEL", ".", "FCOS", ".", "USE_RELU", ",", "\n", "cfg", ".", "MODEL", ".", "FCOS", ".", "USE_DEFORMABLE", ",", "cfg", ".", "MODEL", ".", "FCOS", ".", "USE_BN", ")", "\n", "\n", "", "for", "head", "in", "[", "'bbox'", "]", ":", "\n", "            ", "tower", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "MODEL", ".", "FCOS", ".", "NUM_CONVS", ")", ":", "\n", "                ", "tower", ".", "append", "(", "\n", "conv_block", "(", "in_channels", ",", "in_channels", ",", "3", ",", "1", ")", ")", "\n", "", "self", ".", "add_module", "(", "'{}_tower'", ".", "format", "(", "head", ")", ",", "\n", "nn", ".", "Sequential", "(", "*", "tower", ")", ")", "\n", "\n", "", "self", ".", "cls_logits", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", "self", ".", "centerness", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", "\n", "# self.poly_pred = nn.Conv2d(", "\n", "#     in_channels, 8, kernel_size=3, stride=1,", "\n", "#     padding=1)", "\n", "\n", "# initialization", "\n", "for", "modules", "in", "[", "self", ".", "cls_logits", ",", "self", ".", "bbox_pred", ",", "self", ".", "centerness", "]", ":", "\n", "            ", "for", "l", "in", "modules", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "l", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n", "# initialize the bias for focal loss", "\n", "", "", "", "prior_prob", "=", "cfg", ".", "MODEL", ".", "FCOS", ".", "PRIOR_PROB", "\n", "bias_value", "=", "-", "math", ".", "log", "(", "(", "1", "-", "prior_prob", ")", "/", "prior_prob", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "cls_logits", ".", "bias", ",", "bias_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSHead.forward": [[73, 89], ["enumerate", "fcos.FCOSHead.bbox_tower", "logits.append", "centerness.append", "bbox_reg.append", "fcos.FCOSHead.cls_logits", "fcos.FCOSHead.centerness", "torch.nn.functional.relu", "fcos.FCOSHead.bbox_pred"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "logits", "=", "[", "]", "\n", "bbox_reg", "=", "[", "]", "\n", "poly_reg", "=", "[", "]", "\n", "centerness", "=", "[", "]", "\n", "\n", "tt", "=", "0.0", "\n", "for", "l", ",", "feature", "in", "enumerate", "(", "x", ")", ":", "\n", "            ", "bbox_tower", "=", "self", ".", "bbox_tower", "(", "feature", ")", "\n", "\n", "logits", ".", "append", "(", "self", ".", "cls_logits", "(", "bbox_tower", ")", ")", "\n", "centerness", ".", "append", "(", "self", ".", "centerness", "(", "bbox_tower", ")", ")", "\n", "bbox_reg", ".", "append", "(", "F", ".", "relu", "(", "self", ".", "bbox_pred", "(", "bbox_tower", ")", ")", ")", "\n", "\n", "# poly_reg.append(self.poly_pred(bbox_tower))", "\n", "", "return", "logits", ",", "bbox_reg", ",", "centerness", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule.__init__": [[97, 114], ["super().__init__", "cfg.clone", "fcos.FCOSHead", "inference.make_fcos_postprocessor", "inference.make_fcos_postprocessor", "loss.make_fcos_loss_evaluator"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.inference.make_fcos_postprocessor", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.inference.make_fcos_postprocessor", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.loss.make_fcos_loss_evaluator"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FCOSModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "\n", "head", "=", "FCOSHead", "(", "cfg", ",", "in_channels", ")", "\n", "\n", "box_selector_train", "=", "make_fcos_postprocessor", "(", "cfg", ",", "is_train", "=", "True", ")", "\n", "box_selector_test", "=", "make_fcos_postprocessor", "(", "cfg", ")", "\n", "\n", "loss_evaluator", "=", "make_fcos_loss_evaluator", "(", "cfg", ")", "\n", "self", ".", "head", "=", "head", "\n", "self", ".", "box_selector_train", "=", "box_selector_train", "\n", "self", ".", "box_selector_test", "=", "box_selector_test", "\n", "self", ".", "loss_evaluator", "=", "loss_evaluator", "\n", "self", ".", "fpn_strides", "=", "cfg", ".", "MODEL", ".", "FCOS", ".", "FPN_STRIDES", "\n", "self", ".", "num_iters", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule.forward": [[115, 149], ["fcos.FCOSModule.head", "fcos.FCOSModule.compute_locations", "fcos.FCOSModule._forward_train", "fcos.FCOSModule._forward_test", "zip"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule.compute_locations", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule._forward_train", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule._forward_test"], ["", "def", "forward", "(", "self", ",", "images", ",", "features", ",", "targets", "=", "None", ",", "vis", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            images (ImageList): images for which we want to compute the predictions\n            features (list[Tensor]): features computed from the images that are\n                used for computing the predictions. Each tensor in the list\n                correspond to different feature levels\n            targets (list[BoxList): ground-truth boxes present in the image (optional)\n\n        Returns:\n            boxes (list[BoxList]): the predicted boxes from the RPN, one BoxList per\n                image.\n            losses (dict[Tensor]): the losses for the model during training. During\n                testing, it is an empty dict.\n        \"\"\"", "\n", "box_cls", ",", "box_regression", ",", "centerness", "=", "self", ".", "head", "(", "features", ")", "\n", "# for b in [box_cls, box_regression, centerness, bezier_regression]:", "\n", "#     print(b[0].shape)", "\n", "locations", "=", "self", ".", "compute_locations", "(", "features", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_forward_train", "(", "\n", "locations", ",", "box_cls", ",", "\n", "box_regression", ",", "\n", "centerness", ",", "\n", "targets", ",", "images", ".", "image_sizes", "\n", ")", "\n", "", "else", ":", "\n", "# scale regression targets", "\n", "            ", "box_regression", "=", "[", "r", "*", "s", "for", "r", ",", "s", "in", "zip", "(", "box_regression", ",", "self", ".", "fpn_strides", ")", "]", "\n", "# poly_regression = [r * s for r, s in zip(poly_regression, self.fpn_strides)]", "\n", "return", "self", ".", "_forward_test", "(", "\n", "locations", ",", "box_cls", ",", "box_regression", ",", "\n", "centerness", ",", "images", ".", "image_sizes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule._forward_train": [[151, 184], ["fcos.FCOSModule.loss_evaluator"], "methods", ["None"], ["", "", "def", "_forward_train", "(", "self", ",", "locations", ",", "box_cls", ",", "box_regression", ",", "centerness", ",", "\n", "targets", ",", "image_sizes", ")", ":", "\n", "        ", "loss_box_cls", ",", "loss_box_reg", ",", "loss_centerness", ",", "is_in_bboxes", "=", "self", ".", "loss_evaluator", "(", "\n", "locations", ",", "box_cls", ",", "box_regression", ",", "centerness", ",", "targets", "\n", ")", "\n", "\"\"\"\n        if self.cfg.MODEL.RPN_ONLY:\n            boxes = None\n        else:\n            with torch.no_grad():\n                boxes = self.box_selector_train(\n                    locations, box_cls, box_regression,\n                    centerness, image_sizes)\n        \"\"\"", "\n", "boxes", "=", "None", "\n", "# boxes = is_in_bboxes", "\n", "# boxes = self.box_selector_test(", "\n", "#     locations, box_cls, box_regression,", "\n", "#     centerness, image_sizes", "\n", "# )", "\n", "maps", "=", "{", "\n", "\"locations\"", ":", "locations", ",", "\n", "\"box_cls\"", ":", "box_cls", ",", "\n", "\"box_regression\"", ":", "box_regression", ",", "\n", "\"centerness\"", ":", "centerness", ",", "\n", "\"image_sizes\"", ":", "image_sizes", "\n", "}", "\n", "losses", "=", "{", "\n", "\"loss_cls\"", ":", "loss_box_cls", ",", "\n", "\"loss_reg\"", ":", "loss_box_reg", ",", "\n", "\"loss_centerness\"", ":", "loss_centerness", "\n", "}", "\n", "return", "maps", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule._forward_test": [[185, 193], ["fcos.FCOSModule.box_selector_test"], "methods", ["None"], ["", "def", "_forward_test", "(", "\n", "self", ",", "locations", ",", "box_cls", ",", "box_regression", ",", "\n", "centerness", ",", "image_sizes", ")", ":", "\n", "        ", "boxes", "=", "self", ".", "box_selector_test", "(", "\n", "locations", ",", "box_cls", ",", "box_regression", ",", "\n", "centerness", ",", "image_sizes", "\n", ")", "\n", "return", "boxes", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule.compute_locations": [[194, 204], ["enumerate", "fcos.FCOSModule.compute_locations_per_level", "locations.append", "feature.size"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule.compute_locations_per_level"], ["", "def", "compute_locations", "(", "self", ",", "features", ")", ":", "\n", "        ", "locations", "=", "[", "]", "\n", "for", "level", ",", "feature", "in", "enumerate", "(", "features", ")", ":", "\n", "            ", "h", ",", "w", "=", "feature", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "locations_per_level", "=", "self", ".", "compute_locations_per_level", "(", "\n", "h", ",", "w", ",", "self", ".", "fpn_strides", "[", "level", "]", ",", "\n", "feature", ".", "device", "\n", ")", "\n", "locations", ".", "append", "(", "locations_per_level", ")", "\n", "", "return", "locations", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.FCOSModule.compute_locations_per_level": [[205, 219], ["torch.arange", "torch.arange", "torch.meshgrid", "shift_x.reshape.reshape.reshape", "shift_y.reshape.reshape.reshape", "torch.stack"], "methods", ["None"], ["", "def", "compute_locations_per_level", "(", "self", ",", "h", ",", "w", ",", "stride", ",", "device", ")", ":", "\n", "        ", "shifts_x", "=", "torch", ".", "arange", "(", "\n", "0", ",", "w", "*", "stride", ",", "step", "=", "stride", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n", "shifts_y", "=", "torch", ".", "arange", "(", "\n", "0", ",", "h", "*", "stride", ",", "step", "=", "stride", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n", "shift_y", ",", "shift_x", "=", "torch", ".", "meshgrid", "(", "shifts_y", ",", "shifts_x", ")", "\n", "shift_x", "=", "shift_x", ".", "reshape", "(", "-", "1", ")", "\n", "shift_y", "=", "shift_y", ".", "reshape", "(", "-", "1", ")", "\n", "locations", "=", "torch", ".", "stack", "(", "(", "shift_x", ",", "shift_y", ")", ",", "dim", "=", "1", ")", "+", "stride", "//", "2", "\n", "return", "locations", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.snv2_block": [[15, 17], ["maskrcnn_benchmark.modeling.backbone.fbnet_builder.ShuffleV2Block"], "function", ["None"], ["def", "snv2_block", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ")", ":", "\n", "    ", "return", "ShuffleV2Block", "(", "in_channels", ",", "out_channels", ",", "expansion", "=", "2", ",", "stride", "=", "stride", ",", "kernel", "=", "kernel_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.fcos.build_fcos": [[221, 223], ["fcos.FCOSModule"], "function", ["None"], ["", "", "def", "build_fcos", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "return", "FCOSModule", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.loss.FCOSLossComputation.__init__": [[24, 46], ["maskrcnn_benchmark.layers.SigmoidFocalLoss", "maskrcnn_benchmark.layers.IOULoss", "torch.nn.BCEWithLogitsLoss", "soi.append", "soi.append"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "proposal_matcher", ",", "fg_bg_sampler", ",", "box_coder", ",", "\n", "generate_labels_func", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposal_matcher (Matcher)\n            fg_bg_sampler (BalancedPositiveNegativeSampler)\n            box_coder (BoxCoder)\n        \"\"\"", "\n", "# self.target_preparator = target_preparator", "\n", "self", ".", "proposal_matcher", "=", "proposal_matcher", "\n", "self", ".", "fg_bg_sampler", "=", "fg_bg_sampler", "\n", "self", ".", "box_coder", "=", "box_coder", "\n", "self", ".", "copied_fields", "=", "[", "]", "\n", "self", ".", "generate_labels_func", "=", "generate_labels_func", "\n", "self", ".", "discard_cases", "=", "[", "'not_visibility'", ",", "'between_thresholds'", "]", "\n", "\n", "", "def", "match_targets_to_anchors", "(", "self", ",", "anchor", ",", "target", ",", "copied_fields", "=", "[", "]", ")", ":", "\n", "        ", "match_quality_matrix", "=", "boxlist_iou", "(", "target", ",", "anchor", ")", "\n", "matched_idxs", "=", "self", ".", "proposal_matcher", "(", "match_quality_matrix", ")", "\n", "# RPN doesn't need any fields from target", "\n", "# for creating the labels, so clear them all", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.loss.FCOSLossComputation.get_sample_region": [[47, 80], ["len", "gt[].expand", "gt[].expand.new_zeros", "enumerate", "torch.stack", "center_x[].sum", "gt_xs.new_zeros", "torch.where", "torch.where", "torch.where", "torch.where", "torch.stack.min"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["target", "=", "target", ".", "copy_with_fields", "(", "copied_fields", ")", "\n", "# get the targets corresponding GT for each anchor", "\n", "# NB: need to clamp the indices because we can have a single", "\n", "# GT in the image, and matched_idxs can be -2, which goes", "\n", "# out of bounds", "\n", "matched_targets", "=", "target", "[", "matched_idxs", ".", "clamp", "(", "min", "=", "0", ")", "]", "\n", "matched_targets", ".", "add_field", "(", "\"matched_idxs\"", ",", "matched_idxs", ")", "\n", "return", "matched_targets", "\n", "\n", "", "def", "prepare_targets", "(", "self", ",", "anchors", ",", "targets", ")", ":", "\n", "        ", "labels", "=", "[", "]", "\n", "regression_targets", "=", "[", "]", "\n", "for", "anchors_per_image", ",", "targets_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n", "            ", "matched_targets", "=", "self", ".", "match_targets_to_anchors", "(", "\n", "anchors_per_image", ",", "targets_per_image", ",", "self", ".", "copied_fields", "\n", ")", "\n", "\n", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "self", ".", "generate_labels_func", "(", "matched_targets", ")", "\n", "labels_per_image", "=", "labels_per_image", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# Background (negative examples)", "\n", "bg_indices", "=", "matched_idxs", "==", "Matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "labels_per_image", "[", "bg_indices", "]", "=", "0", "\n", "\n", "# discard anchors that go out of the boundaries of the image", "\n", "if", "\"not_visibility\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "labels_per_image", "[", "~", "anchors_per_image", ".", "get_field", "(", "\"visibility\"", ")", "]", "=", "-", "1", "\n", "\n", "# discard indices that are between thresholds", "\n", "", "if", "\"between_thresholds\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "inds_to_discard", "=", "matched_idxs", "==", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_per_image", "[", "inds_to_discard", "]", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.loss.FCOSLossComputation.prepare_targets": [[81, 120], ["enumerate", "torch.cat", "torch.cat", "loss.FCOSLossComputation.compute_targets_for_locations", "range", "range", "points_per_level.new_tensor", "torch.cat.append", "len", "len", "torch.split", "torch.split", "len", "labels_level_first.append", "reg_targets_level_first.append", "object_sizes_of_interest_per_level[].expand", "torch.cat", "len", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.loss.FCOSLossComputation.compute_targets_for_locations", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat"], ["# compute regression targets", "\n", "", "regression_targets_per_image", "=", "self", ".", "box_coder", ".", "encode", "(", "\n", "matched_targets", ".", "bbox", ",", "anchors_per_image", ".", "bbox", "\n", ")", "\n", "\n", "labels", ".", "append", "(", "labels_per_image", ")", "\n", "regression_targets", ".", "append", "(", "regression_targets_per_image", ")", "\n", "\n", "", "return", "labels", ",", "regression_targets", "\n", "\n", "\n", "", "def", "__call__", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors (list[BoxList])\n            objectness (list[Tensor])\n            box_regression (list[Tensor])\n            targets (list[BoxList])\n\n        Returns:\n            objectness_loss (Tensor)\n            box_loss (Tensor\n        \"\"\"", "\n", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "anchors_per_image", "in", "anchors", "]", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_pos_inds", ",", "sampled_neg_inds", "]", ",", "dim", "=", "0", ")", "\n", "\n", "objectness", ",", "box_regression", "=", "concat_box_prediction_layers", "(", "objectness", ",", "box_regression", ")", "\n", "\n", "objectness", "=", "objectness", ".", "squeeze", "(", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "regression_targets", "=", "torch", ".", "cat", "(", "regression_targets", ",", "dim", "=", "0", ")", "\n", "\n", "box_loss", "=", "smooth_l1_loss", "(", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.loss.FCOSLossComputation.compute_targets_for_locations": [[121, 183], ["range", "len", "targets_per_im.get_field", "targets_per_im.area", "torch.stack", "area[].repeat", "area[].repeat.min", "labels.append", "reg_targets.append", "loss.FCOSLossComputation.get_sample_region", "torch.stack.max", "len", "torch.stack.min", "range", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.loss.FCOSLossComputation.get_sample_region", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["box_regression", "[", "sampled_pos_inds", "]", ",", "\n", "regression_targets", "[", "sampled_pos_inds", "]", ",", "\n", "beta", "=", "1.0", "/", "9", ",", "\n", "size_average", "=", "False", ",", "\n", ")", "/", "(", "sampled_inds", ".", "numel", "(", ")", ")", "\n", "\n", "objectness_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "objectness", "[", "sampled_inds", "]", ",", "labels", "[", "sampled_inds", "]", "\n", ")", "\n", "\n", "return", "objectness_loss", ",", "box_loss", "\n", "\n", "# This function should be overwritten in RetinaNet", "\n", "", "", "def", "generate_rpn_labels", "(", "matched_targets", ")", ":", "\n", "    ", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "matched_idxs", ">=", "0", "\n", "return", "labels_per_image", "\n", "\n", "\n", "", "def", "make_rpn_loss_evaluator", "(", "cfg", ",", "box_coder", ")", ":", "\n", "    ", "matcher", "=", "Matcher", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "FG_IOU_THRESHOLD", ",", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BG_IOU_THRESHOLD", ",", "\n", "allow_low_quality_matches", "=", "True", ",", "\n", ")", "\n", "\n", "fg_bg_sampler", "=", "BalancedPositiveNegativeSampler", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BATCH_SIZE_PER_IMAGE", ",", "cfg", ".", "MODEL", ".", "RPN", ".", "POSITIVE_FRACTION", "\n", ")", "\n", "\n", "loss_evaluator", "=", "RPNLossComputation", "(", "\n", "matcher", ",", "\n", "fg_bg_sampler", ",", "\n", "box_coder", ",", "\n", "generate_rpn_labels", "\n", ")", "\n", "return", "loss_evaluator", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.loss.FCOSLossComputation.compute_centerness_targets": [[184, 190], ["torch.sqrt", "left_right.min", "left_right.max", "top_bottom.min", "top_bottom.max"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.loss.FCOSLossComputation.__call__": [[191, 275], ["box_cls[].size", "loss.FCOSLossComputation.prepare_targets", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze.numel", "maskrcnn_benchmark.utils.comm.get_world_size", "maskrcnn_benchmark.utils.comm.reduce_sum().item", "len", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "loss.FCOSLossComputation.cls_loss_func", "max", "torch.nonzero().squeeze.numel", "loss.FCOSLossComputation.compute_centerness_targets", "loss.FCOSLossComputation.sum", "maskrcnn_benchmark.utils.comm.reduce_sum().item", "torch.cat.sum", "maskrcnn_benchmark.utils.comm.reduce_sum", "torch.cat.sum", "box_cls[].permute().reshape", "box_regression[].permute().reshape", "labels[].reshape", "reg_targets[].reshape", "centerness[].reshape", "torch.nonzero", "torch.nonzero", "maskrcnn_benchmark.utils.comm.reduce_sum", "torch.cat.int", "loss.FCOSLossComputation.box_reg_loss_func", "loss.FCOSLossComputation.centerness_loss_func", "max", "torch.cat.new_tensor", "torch.nonzero().squeeze.new_tensor", "maskrcnn_benchmark.utils.comm.reduce_sum", "box_cls[].permute", "box_regression[].permute"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.CTCPredictor.prepare_targets", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_world_size", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.loss.FCOSLossComputation.compute_centerness_targets", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.reduce_sum", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.reduce_sum", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.loss.reduce_sum"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.loss.FCOSLossComputation.compute_offsets_targets": [[276, 288], ["mask_targets.sum().long", "mask_targets.size", "torch.zeros", "torch.zeros", "enumerate", "torch.stack().view", "zip", "mask_targets.sum", "torch.stack", "torch.tensor", "list", "range"], "methods", ["None"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.loss.make_fcos_loss_evaluator": [[290, 293], ["loss.FCOSLossComputation"], "function", ["None"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.predictors.PolarPredictor.__init__": [[11, 19], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "maskrcnn_benchmark.layers.DeformConv"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "num_chars", "=", "32", ",", "voc_size", "=", "38", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "PolarPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_chars", "=", "num_chars", "\n", "self", ".", "locator", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "3", "*", "num_chars", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "clf", "=", "DeformConv", "(", "\n", "in_channels", ",", "voc_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "offset_repeat", "=", "kernel_size", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.predictors.PolarPredictor.forward": [[20, 36], ["x.size", "predictors.PolarPredictor.locator", "range", "predictors.PolarPredictor.clf", "recs.append", "locations.append", "torch.stack", "torch.cat", "predictors.PolarPredictor.clf"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "vis", "=", "False", ")", ":", "\n", "        ", "\"\"\" Predict offsets with x and rec with y\n        Offsets is relative starting from the center\n        \"\"\"", "\n", "N", ",", "_", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "features", "=", "self", ".", "locator", "(", "x", ")", "\n", "offsets", ",", "masks", "=", "features", "[", ":", ",", ":", "self", ".", "num_chars", "*", "2", "]", ",", "features", "[", ":", ",", "self", ".", "num_chars", "*", "2", ":", "]", "\n", "location", "=", "offsets", "[", ":", ",", ":", "2", "]", "\n", "recs", "=", "[", "self", ".", "clf", "(", "y", ",", "location", ")", "]", "\n", "locations", "=", "[", "location", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_chars", ")", ":", "\n", "            ", "delta", "=", "offsets", "[", ":", ",", "i", "*", "2", ":", "(", "i", "+", "1", ")", "*", "2", "]", "\n", "location", "=", "location", "+", "delta", "\n", "recs", ".", "append", "(", "self", ".", "clf", "(", "y", ",", "location", ")", ")", "\n", "locations", ".", "append", "(", "location", ")", "\n", "", "return", "torch", ".", "stack", "(", "recs", ",", "dim", "=", "4", ")", ",", "masks", ",", "torch", ".", "cat", "(", "locations", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.predictors.SequentialPredictor.__init__": [[42, 51], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "maskrcnn_benchmark.layers.DeformConv"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "num_chars", "=", "32", ",", "voc_size", "=", "38", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "SequentialPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_chars", "=", "num_chars", "\n", "self", ".", "voc_size", "=", "voc_size", "\n", "self", ".", "locator", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "num_chars", "+", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "clf", "=", "DeformConv", "(", "\n", "in_channels", ",", "voc_size", "+", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "offset_repeat", "=", "kernel_size", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.predictors.SequentialPredictor.forward": [[52, 72], ["x.size", "predictors.SequentialPredictor.locator", "torch.zeros().cuda", "torch.zeros().cuda", "range", "predictors.SequentialPredictor.clf", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "max_len", ")", ":", "\n", "        ", "\"\"\" Predict offsets with x and rec with y\n        Offsets is relative starting from the center\n        \"\"\"", "\n", "N", ",", "_", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "init_features", "=", "self", ".", "locator", "(", "x", ")", "\n", "location", ",", "masks", "=", "init_features", "[", ":", ",", ":", "2", "]", ",", "init_features", "[", ":", ",", "2", ":", "]", "\n", "recs", "=", "torch", ".", "zeros", "(", "N", ",", "self", ".", "voc_size", ",", "H", ",", "W", ",", "max_len", ")", ".", "cuda", "(", ")", "\n", "locations", "=", "torch", ".", "zeros", "(", "N", ",", "max_len", "*", "2", ",", "H", ",", "W", ")", ".", "cuda", "(", ")", "\n", "delta", "=", "0", "\n", "for", "i", "in", "range", "(", "max_len", ")", ":", "\n", "# parallel?", "\n", "# during training, early stopping with gt", "\n", "# TODO: early stopping for testing", "\n", "            ", "location", "=", "location", "+", "delta", "\n", "locations", "[", ":", ",", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", "=", "location", "\n", "local_features", "=", "self", ".", "clf", "(", "y", ",", "location", ")", "\n", "rec", ",", "delta", "=", "local_features", "[", ":", ",", ":", "-", "2", "]", ",", "local_features", "[", ":", ",", "-", "2", ":", "]", "\n", "recs", "[", ":", ",", ":", ",", ":", ",", ":", ",", "i", "]", "=", "rec", "\n", "", "return", "recs", ",", "masks", ",", "locations", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.fcos.predictors.make_offset_predictor": [[74, 86], ["predictors.PolarPredictor", "predictors.SequentialPredictor", "NotImplementedError"], "function", ["None"], ["", "", "def", "make_offset_predictor", "(", "cfg", ",", "in_channels", ")", ":", "\n", "# not using kernel_size now", "\n", "    ", "predictor", "=", "cfg", ".", "MODEL", ".", "OFFSET", ".", "PREDICTOR", "\n", "kwargs", "=", "{", "\"num_chars\"", ":", "cfg", ".", "MODEL", ".", "OFFSET", ".", "NUM_CHARS", ",", "\n", "\"voc_size\"", ":", "cfg", ".", "MODEL", ".", "OFFSET", ".", "VOC_SIZE", ",", "\n", "\"kernel_size\"", ":", "cfg", ".", "MODEL", ".", "OFFSET", ".", "KERNEL_SIZE", "}", "\n", "if", "predictor", "==", "\"polar\"", ":", "\n", "        ", "return", "PolarPredictor", "(", "in_channels", ",", "**", "kwargs", ")", "\n", "", "elif", "predictor", "==", "\"sequential\"", ":", "\n", "        ", "return", "SequentialPredictor", "(", "in_channels", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"{} is not a valid predictor\"", ".", "format", "(", "predictor", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.roi_heads.roi_heads.CombinedROIHeads.__init__": [[14, 24], ["super().__init__", "cfg.clone"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ",", "heads", ")", ":", "\n", "        ", "super", "(", "CombinedROIHeads", ",", "self", ")", ".", "__init__", "(", "heads", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "if", "cfg", ".", "MODEL", ".", "MASK_ON", "and", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "SHARE_BOX_FEATURE_EXTRACTOR", ":", "\n", "            ", "self", ".", "mask", ".", "feature_extractor", "=", "self", ".", "box", ".", "feature_extractor", "\n", "self", ".", "inst", ".", "feature_extractor", "=", "self", ".", "box", ".", "feature_extractor", "\n", "", "if", "cfg", ".", "MODEL", ".", "KE_ON", "and", "cfg", ".", "MODEL", ".", "ROI_KE_HEAD", ".", "SHARE_BOX_FEATURE_EXTRACTOR", ":", "\n", "            ", "self", ".", "ke", ".", "feature_extractor", "=", "self", ".", "box", ".", "feature_extractor", "\n", "", "if", "cfg", ".", "MODEL", ".", "KEYPOINT_ON", "and", "cfg", ".", "MODEL", ".", "ROI_KEYPOINT_HEAD", ".", "SHARE_BOX_FEATURE_EXTRACTOR", ":", "\n", "            ", "self", ".", "keypoint", ".", "feature_extractor", "=", "self", ".", "box", ".", "feature_extractor", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.roi_heads.roi_heads.CombinedROIHeads.forward": [[25, 74], ["roi_heads.CombinedROIHeads.box", "losses.update", "roi_heads.CombinedROIHeads.mask", "losses.update", "roi_heads.CombinedROIHeads.keypoint", "losses.update", "roi_heads.CombinedROIHeads.inst", "losses.update"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update"], ["", "", "def", "forward", "(", "self", ",", "features", ",", "proposals", ",", "targets", "=", "None", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        prefix (str): Some model may use auxiliary heads which don't share rpn,\n        use this to separate the loss names\n        \"\"\"", "\n", "losses", "=", "{", "}", "\n", "# TODO rename x to roi_box_features, if it doesn't increase memory consumption", "\n", "x", ",", "detections", ",", "loss_box", "=", "self", ".", "box", "(", "features", ",", "proposals", ",", "targets", ")", "\n", "losses", ".", "update", "(", "loss_box", ")", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "            ", "mask_features", "=", "features", "\n", "# optimization: during training, if we share the feature extractor between", "\n", "# the box and the mask heads, then we can reuse the features already computed", "\n", "if", "(", "\n", "self", ".", "training", "\n", "and", "self", ".", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "SHARE_BOX_FEATURE_EXTRACTOR", "\n", ")", ":", "\n", "                ", "mask_features", "=", "x", "\n", "# During training, self.box() will return the unaltered proposals as \"detections\"", "\n", "# this makes the API consistent during training and testing", "\n", "", "x", ",", "detections", ",", "loss_mask", "=", "self", ".", "mask", "(", "mask_features", ",", "detections", ",", "targets", ")", "\n", "losses", ".", "update", "(", "loss_mask", ")", "\n", "\n", "", "if", "self", ".", "cfg", ".", "MODEL", ".", "KEYPOINT_ON", ":", "\n", "            ", "keypoint_features", "=", "features", "\n", "# optimization: during training, if we share the feature extractor between", "\n", "# the box and the mask heads, then we can reuse the features already computed", "\n", "if", "(", "\n", "self", ".", "training", "\n", "and", "self", ".", "cfg", ".", "MODEL", ".", "ROI_KEYPOINT_HEAD", ".", "SHARE_BOX_FEATURE_EXTRACTOR", "\n", ")", ":", "\n", "                ", "keypoint_features", "=", "x", "\n", "# During training, self.box() will return the unaltered proposals as \"detections\"", "\n", "# this makes the API consistent during training and testing", "\n", "", "x", ",", "detections", ",", "loss_keypoint", "=", "self", ".", "keypoint", "(", "keypoint_features", ",", "detections", ",", "targets", ")", "\n", "losses", ".", "update", "(", "loss_keypoint", ")", "\n", "\n", "", "if", "self", ".", "cfg", ".", "MODEL", ".", "INST_ON", ":", "\n", "            ", "inst_features", "=", "features", "\n", "if", "(", "\n", "self", ".", "training", "\n", "and", "self", ".", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "SHARE_BOX_FEATURE_EXTRACTOR", "\n", ")", ":", "\n", "                ", "inst_features", "=", "x", "\n", "", "x", ",", "detections", ",", "loss_inst", "=", "self", ".", "inst", "(", "inst_features", ",", "detections", ",", "targets", ")", "\n", "losses", ".", "update", "(", "loss_inst", ")", "\n", "\n", "", "losses", "=", "{", "prefix", "+", "k", ":", "losses", "[", "k", "]", "for", "k", "in", "losses", "}", "\n", "return", "x", ",", "detections", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.roi_heads.roi_heads.build_roi_heads": [[76, 97], ["CombinedROIHeads.append", "CombinedROIHeads.append", "CombinedROIHeads.append", "CombinedROIHeads.append", "roi_heads.CombinedROIHeads", "box_head.box_head.build_roi_box_head", "mask_head.mask_head.build_roi_mask_head", "build_roi_keypoint_head", "build_roi_inst_head"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.box_head.build_roi_box_head", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.mask_head.build_roi_mask_head"], ["", "", "def", "build_roi_heads", "(", "cfg", ",", "in_channels", ")", ":", "\n", "# individually create the heads, that will be combined together", "\n", "# afterwards", "\n", "    ", "roi_heads", "=", "[", "]", "\n", "if", "cfg", ".", "MODEL", ".", "RETINANET_ON", ":", "\n", "        ", "return", "[", "]", "\n", "\n", "", "if", "not", "cfg", ".", "MODEL", ".", "RPN_ONLY", ":", "\n", "        ", "roi_heads", ".", "append", "(", "(", "\"box\"", ",", "build_roi_box_head", "(", "cfg", ",", "in_channels", ")", ")", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "        ", "roi_heads", ".", "append", "(", "(", "\"mask\"", ",", "build_roi_mask_head", "(", "cfg", ",", "in_channels", ")", ")", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "KEYPOINT_ON", ":", "\n", "        ", "roi_heads", ".", "append", "(", "(", "\"keypoint\"", ",", "build_roi_keypoint_head", "(", "cfg", ",", "in_channels", ")", ")", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "INST_ON", ":", "\n", "        ", "roi_heads", ".", "append", "(", "(", "\"inst\"", ",", "build_roi_inst_head", "(", "cfg", ",", "in_channels", ")", ")", ")", "\n", "\n", "# combine individual heads in a single module", "\n", "", "if", "roi_heads", ":", "\n", "        ", "roi_heads", "=", "CombinedROIHeads", "(", "cfg", ",", "roi_heads", ")", "\n", "\n", "", "return", "roi_heads", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.mask_head.ROIMaskHead.__init__": [[37, 45], ["super().__init__", "cfg.clone", "roi_mask_feature_extractors.make_roi_mask_feature_extractor", "roi_mask_predictors.make_roi_mask_predictor", "inference.make_roi_mask_post_processor", "loss.make_roi_mask_loss_evaluator"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.roi_mask_feature_extractors.make_roi_mask_feature_extractor", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.roi_mask_predictors.make_roi_mask_predictor", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.inference.make_roi_mask_post_processor", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.loss.make_roi_mask_loss_evaluator"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "ROIMaskHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "self", ".", "feature_extractor", "=", "make_roi_mask_feature_extractor", "(", "cfg", ",", "in_channels", ")", "\n", "self", ".", "predictor", "=", "make_roi_mask_predictor", "(", "\n", "cfg", ",", "self", ".", "feature_extractor", ".", "out_channels", ")", "\n", "self", ".", "post_processor", "=", "make_roi_mask_post_processor", "(", "cfg", ")", "\n", "self", ".", "loss_evaluator", "=", "make_roi_mask_loss_evaluator", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.mask_head.ROIMaskHead.forward": [[46, 80], ["mask_head.ROIMaskHead.predictor", "mask_head.ROIMaskHead.loss_evaluator", "mask_head.keep_only_positive_boxes", "mask_head.ROIMaskHead.feature_extractor", "mask_head.ROIMaskHead.post_processor", "dict", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.mask_head.keep_only_positive_boxes", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat"], ["", "def", "forward", "(", "self", ",", "features", ",", "proposals", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            features (list[Tensor]): feature-maps from possibly several levels\n            proposals (list[BoxList]): proposal boxes\n            targets (list[BoxList], optional): the ground-truth targets.\n\n        Returns:\n            x (Tensor): the result of the feature extractor\n            proposals (list[BoxList]): during training, the original proposals\n                are returned. During testing, the predicted boxlists are returned\n                with the `mask` field set\n            losses (dict[Tensor]): During training, returns the losses for the\n                head. During testing, returns an empty dict.\n        \"\"\"", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# during training, only focus on positive boxes", "\n", "            ", "all_proposals", "=", "proposals", "\n", "proposals", ",", "positive_inds", "=", "keep_only_positive_boxes", "(", "proposals", ")", "\n", "", "if", "self", ".", "training", "and", "self", ".", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "SHARE_BOX_FEATURE_EXTRACTOR", ":", "\n", "            ", "x", "=", "features", "\n", "x", "=", "x", "[", "torch", ".", "cat", "(", "positive_inds", ",", "dim", "=", "0", ")", "]", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "feature_extractor", "(", "features", ",", "proposals", ")", "\n", "", "mask_logits", "=", "self", ".", "predictor", "(", "x", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "result", "=", "self", ".", "post_processor", "(", "mask_logits", ",", "proposals", ")", "\n", "return", "x", ",", "result", ",", "{", "}", "\n", "\n", "", "loss_mask", "=", "self", ".", "loss_evaluator", "(", "proposals", ",", "mask_logits", ",", "targets", ")", "\n", "\n", "return", "x", ",", "all_proposals", ",", "dict", "(", "loss_mask", "=", "loss_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.mask_head.keep_only_positive_boxes": [[13, 34], ["isinstance", "isinstance", "boxes[].has_field", "boxes_per_image.get_field", "inds_mask.nonzero().squeeze", "positive_boxes.append", "positive_inds.append", "inds_mask.nonzero"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.has_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["def", "keep_only_positive_boxes", "(", "boxes", ")", ":", "\n", "    ", "\"\"\"\n    Given a set of BoxList containing the `labels` field,\n    return a set of BoxList for which `labels > 0`.\n\n    Arguments:\n        boxes (list of BoxList)\n    \"\"\"", "\n", "assert", "isinstance", "(", "boxes", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "isinstance", "(", "boxes", "[", "0", "]", ",", "BoxList", ")", "\n", "assert", "boxes", "[", "0", "]", ".", "has_field", "(", "\"labels\"", ")", "\n", "positive_boxes", "=", "[", "]", "\n", "positive_inds", "=", "[", "]", "\n", "num_boxes", "=", "0", "\n", "for", "boxes_per_image", "in", "boxes", ":", "\n", "        ", "labels", "=", "boxes_per_image", ".", "get_field", "(", "\"labels\"", ")", "\n", "inds_mask", "=", "labels", ">", "0", "\n", "inds", "=", "inds_mask", ".", "nonzero", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "positive_boxes", ".", "append", "(", "boxes_per_image", "[", "inds", "]", ")", "\n", "positive_inds", ".", "append", "(", "inds_mask", ")", "\n", "", "return", "positive_boxes", ",", "positive_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.mask_head.build_roi_mask_head": [[82, 84], ["mask_head.ROIMaskHead"], "function", ["None"], ["", "", "def", "build_roi_mask_head", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "return", "ROIMaskHead", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.roi_mask_predictors.MaskRCNNC4Predictor.__init__": [[12, 28], ["torch.nn.Module.__init__", "maskrcnn_benchmark.layers.ConvTranspose2d", "maskrcnn_benchmark.layers.Conv2d", "roi_mask_predictors.MaskRCNNC4Predictor.named_parameters", "torch.nn.init.constant_", "torch.nn.init.kaiming_normal_"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "MaskRCNNC4Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_CLASSES", "\n", "dim_reduced", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "CONV_LAYERS", "[", "-", "1", "]", "\n", "num_inputs", "=", "in_channels", "\n", "\n", "self", ".", "conv5_mask", "=", "ConvTranspose2d", "(", "num_inputs", ",", "dim_reduced", ",", "2", ",", "2", ",", "0", ")", "\n", "self", ".", "mask_fcn_logits", "=", "Conv2d", "(", "dim_reduced", ",", "num_classes", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"bias\"", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0", ")", "\n", "", "elif", "\"weight\"", "in", "name", ":", "\n", "# Caffe2 implementation uses MSRAFill, which in fact", "\n", "# corresponds to kaiming_normal_ in PyTorch", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "param", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.roi_mask_predictors.MaskRCNNC4Predictor.forward": [[29, 32], ["torch.nn.functional.relu", "roi_mask_predictors.MaskRCNNC4Predictor.mask_fcn_logits", "roi_mask_predictors.MaskRCNNC4Predictor.conv5_mask"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv5_mask", "(", "x", ")", ")", "\n", "return", "self", ".", "mask_fcn_logits", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.roi_mask_predictors.MaskRCNNConv1x1Predictor.__init__": [[36, 50], ["torch.nn.Module.__init__", "maskrcnn_benchmark.layers.Conv2d", "roi_mask_predictors.MaskRCNNConv1x1Predictor.named_parameters", "torch.nn.init.constant_", "torch.nn.init.kaiming_normal_"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "MaskRCNNConv1x1Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_CLASSES", "\n", "num_inputs", "=", "in_channels", "\n", "\n", "self", ".", "mask_fcn_logits", "=", "Conv2d", "(", "num_inputs", ",", "num_classes", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"bias\"", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0", ")", "\n", "", "elif", "\"weight\"", "in", "name", ":", "\n", "# Caffe2 implementation uses MSRAFill, which in fact", "\n", "# corresponds to kaiming_normal_ in PyTorch", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "param", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.roi_mask_predictors.MaskRCNNConv1x1Predictor.forward": [[51, 53], ["roi_mask_predictors.MaskRCNNConv1x1Predictor.mask_fcn_logits"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "mask_fcn_logits", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.roi_mask_predictors.make_roi_mask_predictor": [[55, 58], ["func"], "function", ["None"], ["", "", "def", "make_roi_mask_predictor", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "func", "=", "registry", ".", "ROI_MASK_PREDICTOR", "[", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "PREDICTOR", "]", "\n", "return", "func", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.inference.MaskPostProcessor.__init__": [[23, 26], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.inference.MaskPostProcessor.forward": [[27, 62], ["x.sigmoid", "torch.cat", "torch.arange", "inference.MaskPostProcessor.split", "zip", "maskrcnn_benchmark.structures.bounding_box.BoxList.get_field", "len", "inference.MaskPostProcessor.masker", "maskrcnn_benchmark.structures.bounding_box.BoxList", "box.fields", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "results.append", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "box.get_field"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["fpn_post_nms_per_batch", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            pre_nms_top_n (int)\n            post_nms_top_n (int)\n            nms_thresh (float)\n            min_size (int)\n            box_coder (BoxCoder)\n            fpn_post_nms_top_n (int)\n        \"\"\"", "\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n", "if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "self", ".", "fpn_post_nms_per_batch", "=", "fpn_post_nms_per_batch", "\n", "\n", "", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.inference.MaskPostProcessorCOCOFormat.forward": [[71, 86], ["inference.MaskPostProcessor.forward", "result.get_field().cpu", "result.add_field", "rle[].decode", "result.get_field", "mask_util.encode", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.forward", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.decode", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.encode"], ["for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n", "]", "\n", "\n", "return", "proposals", "\n", "\n", "", "def", "forward_for_single_feature_map", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.inference.Masker.__init__": [[168, 171], ["None"], "methods", ["None"], ["inds_mask", "=", "torch", ".", "zeros_like", "(", "objectness", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "inds_mask", "[", "inds_sorted", "]", "=", "1", "\n", "inds_mask", "=", "inds_mask", ".", "split", "(", "box_sizes", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.inference.Masker.forward_single_image": [[172, 184], ["boxes.convert.convert.convert", "inference.paste_mask_in_image", "len", "masks.new_empty", "zip", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.inference.paste_mask_in_image", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["                ", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_mask", "[", "i", "]", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "objectness", "=", "boxlists", "[", "i", "]", ".", "get_field", "(", "\"objectness\"", ")", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "\n", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", "\n", ")", "\n", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_sorted", "]", "\n", "", "", "return", "boxlists", "\n", "\n", "\n", "", "", "def", "make_rpn_postprocessor", "(", "config", ",", "rpn_box_coder", ",", "is_train", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.inference.Masker.__call__": [[185, 200], ["isinstance", "zip", "len", "len", "inference.Masker.forward_single_image", "results.append", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.inference.Masker.forward_single_image", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["    ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TEST", "\n", "\n", "", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TRAIN", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TEST", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TEST", "\n", "", "fpn_post_nms_per_batch", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_PER_BATCH", "\n", "nms_thresh", "=", "config", ".", "MODEL", ".", "RPN", ".", "NMS_THRESH", "\n", "min_size", "=", "config", ".", "MODEL", ".", "RPN", ".", "MIN_SIZE", "\n", "box_selector", "=", "RPNPostProcessor", "(", "\n", "pre_nms_top_n", "=", "pre_nms_top_n", ",", "\n", "post_nms_top_n", "=", "post_nms_top_n", ",", "\n", "nms_thresh", "=", "nms_thresh", ",", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.inference.expand_boxes": [[91, 106], ["torch.zeros_like"], "function", ["None"], ["\n", "num_anchors", "=", "A", "*", "H", "*", "W", "\n", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n", "box_regression", "=", "box_regression", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "anchors", "]", "\n", "concat_anchors", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "concat_anchors", "=", "concat_anchors", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "-", "1", ",", "4", ")", ",", "concat_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.inference.expand_masks": [[108, 117], ["mask.new_zeros", "float"], "function", ["None"], ["proposals", "=", "proposals", ".", "view", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "proposal", ",", "score", ",", "im_shape", "in", "zip", "(", "proposals", ",", "objectness", ",", "image_shapes", ")", ":", "\n", "            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "boxlist", "=", "remove_small_boxes", "(", "boxlist", ",", "self", ".", "min_size", ")", "\n", "boxlist", "=", "boxlist_nms", "(", "\n", "boxlist", ",", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.inference.paste_mask_in_image": [[119, 160], ["maskrcnn_benchmark.layers.misc.interpolate.float", "box.to.float", "inference.expand_masks", "box.to.to", "int", "int", "max", "max", "maskrcnn_benchmark.layers.misc.interpolate.expand", "maskrcnn_benchmark.layers.misc.interpolate.to", "maskrcnn_benchmark.layers.misc.interpolate", "torch.zeros", "max", "min", "max", "min", "inference.expand_boxes"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.inference.expand_masks", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.inference.expand_boxes"], ["max_proposals", "=", "self", ".", "post_nms_top_n", ",", "\n", "score_field", "=", "\"objectness\"", ",", "\n", ")", "\n", "result", ".", "append", "(", "boxlist", ")", "\n", "", "return", "result", "\n", "\n", "", "def", "forward", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[list[BoxList]]\n            objectness: list[tensor]\n            box_regression: list[tensor]\n\n        Returns:\n            boxlists (list[BoxList]): the post-processed anchors, after\n                applying box decoding and NMS\n        \"\"\"", "\n", "sampled_boxes", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "objectness", ")", "\n", "anchors", "=", "list", "(", "zip", "(", "*", "anchors", ")", ")", "\n", "for", "a", ",", "o", ",", "b", "in", "zip", "(", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "            ", "sampled_boxes", ".", "append", "(", "self", ".", "forward_for_single_feature_map", "(", "a", ",", "o", ",", "b", ")", ")", "\n", "\n", "", "boxlists", "=", "list", "(", "zip", "(", "*", "sampled_boxes", ")", ")", "\n", "boxlists", "=", "[", "cat_boxlist", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "\n", "if", "num_levels", ">", "1", ":", "\n", "            ", "boxlists", "=", "self", ".", "select_over_all_levels", "(", "boxlists", ")", "\n", "\n", "# append ground-truth bboxes to proposals", "\n", "", "if", "self", ".", "training", "and", "targets", "is", "not", "None", ":", "\n", "            ", "boxlists", "=", "self", ".", "add_gt_proposals", "(", "boxlists", ",", "targets", ")", "\n", "\n", "", "return", "boxlists", "\n", "\n", "", "def", "select_over_all_levels", "(", "self", ",", "boxlists", ")", ":", "\n", "        ", "num_images", "=", "len", "(", "boxlists", ")", "\n", "# different behavior during training and during testing:", "\n", "# during training, post_nms_top_n is over *all* the proposals combined, while", "\n", "# during testing, it is over the proposals for each image", "\n", "# NOTE: it should be per image, and not per batch. However, to be consistent ", "\n", "# with Detectron, the default is per batch (see Issue #672)", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.inference.make_roi_mask_post_processor": [[202, 210], ["inference.MaskPostProcessor", "inference.Masker"], "function", ["None"], ["box_coder", "=", "rpn_box_coder", ",", "\n", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", ",", "\n", "fpn_post_nms_per_batch", "=", "fpn_post_nms_per_batch", ",", "\n", ")", "\n", "return", "box_selector", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.roi_mask_feature_extractors.MaskRCNNFPNFeatureExtractor.__init__": [[22, 60], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.poolers.Pooler", "enumerate", "maskrcnn_benchmark.modeling.make_layers.make_conv3x3", "roi_mask_feature_extractors.MaskRCNNFPNFeatureExtractor.add_module", "roi_mask_feature_extractors.MaskRCNNFPNFeatureExtractor.blocks.append"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.make_conv3x3"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            num_classes (int): number of output classes\n            input_size (int): number of channels of the input once it's flattened\n            representation_size (int): size of the intermediate representation\n        \"\"\"", "\n", "super", "(", "MaskRCNNFPNFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "resolution", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "POOLER_RESOLUTION", "\n", "scales", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "POOLER_SCALES", "\n", "sampling_ratio", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "POOLER_SAMPLING_RATIO", "\n", "use_dfpool", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "USE_DFPOOL", "\n", "pooler", "=", "Pooler", "(", "\n", "output_size", "=", "(", "resolution", ",", "resolution", ")", ",", "\n", "scales", "=", "scales", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", "deformable", "=", "use_dfpool", "\n", ")", "\n", "input_size", "=", "in_channels", "\n", "self", ".", "pooler", "=", "pooler", "\n", "\n", "use_gn", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "USE_GN", "\n", "layers", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "CONV_LAYERS", "\n", "dilation", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "DILATION", "\n", "\n", "next_feature", "=", "input_size", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "layer_idx", ",", "layer_features", "in", "enumerate", "(", "layers", ",", "1", ")", ":", "\n", "            ", "layer_name", "=", "\"mask_fcn{}\"", ".", "format", "(", "layer_idx", ")", "\n", "module", "=", "make_conv3x3", "(", "\n", "next_feature", ",", "layer_features", ",", "\n", "dilation", "=", "dilation", ",", "stride", "=", "1", ",", "use_gn", "=", "use_gn", "\n", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "module", ")", "\n", "next_feature", "=", "layer_features", "\n", "self", ".", "blocks", ".", "append", "(", "layer_name", ")", "\n", "", "self", ".", "out_channels", "=", "layer_features", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.roi_mask_feature_extractors.MaskRCNNFPNFeatureExtractor.forward": [[61, 68], ["roi_mask_feature_extractors.MaskRCNNFPNFeatureExtractor.pooler", "torch.nn.functional.relu", "getattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "proposals", ")", ":", "\n", "        ", "x", "=", "self", ".", "pooler", "(", "x", ",", "proposals", ")", "\n", "\n", "for", "layer_name", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "getattr", "(", "self", ",", "layer_name", ")", "(", "x", ")", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.roi_mask_feature_extractors.make_roi_mask_feature_extractor": [[70, 75], ["func"], "function", ["None"], ["", "", "def", "make_roi_mask_feature_extractor", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "func", "=", "registry", ".", "ROI_MASK_FEATURE_EXTRACTORS", "[", "\n", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "FEATURE_EXTRACTOR", "\n", "]", "\n", "return", "func", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.loss.MaskRCNNLossComputation.__init__": [[46, 54], ["None"], "methods", ["None"], ["# for creating the labels, so clear them all", "\n", "target", "=", "target", ".", "copy_with_fields", "(", "copied_fields", ")", "\n", "# get the targets corresponding GT for each anchor", "\n", "# NB: need to clamp the indices because we can have a single", "\n", "# GT in the image, and matched_idxs can be -2, which goes", "\n", "# out of bounds", "\n", "matched_targets", "=", "target", "[", "matched_idxs", ".", "clamp", "(", "min", "=", "0", ")", "]", "\n", "matched_targets", ".", "add_field", "(", "\"matched_idxs\"", ",", "matched_idxs", ")", "\n", "return", "matched_targets", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.loss.MaskRCNNLossComputation.match_targets_to_proposals": [[55, 67], ["maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "loss.MaskRCNNLossComputation.proposal_matcher", "target.copy_with_fields.copy_with_fields.copy_with_fields", "matched_targets.add_field", "loss.MaskRCNNLossComputation.clamp"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.copy_with_fields", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field"], ["\n", "", "def", "prepare_targets", "(", "self", ",", "anchors", ",", "targets", ")", ":", "\n", "        ", "labels", "=", "[", "]", "\n", "regression_targets", "=", "[", "]", "\n", "for", "anchors_per_image", ",", "targets_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n", "            ", "matched_targets", "=", "self", ".", "match_targets_to_anchors", "(", "\n", "anchors_per_image", ",", "targets_per_image", ",", "self", ".", "copied_fields", "\n", ")", "\n", "\n", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "self", ".", "generate_labels_func", "(", "matched_targets", ")", "\n", "labels_per_image", "=", "labels_per_image", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.loss.MaskRCNNLossComputation.prepare_targets": [[68, 101], ["zip", "loss.MaskRCNNLossComputation.match_targets_to_proposals", "loss.MaskRCNNLossComputation.get_field", "loss.MaskRCNNLossComputation.get_field", "labels_per_image.to.to.to", "torch.nonzero().squeeze", "loss.MaskRCNNLossComputation.get_field", "loss.project_masks_on_boxes", "labels.append", "masks.append", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.loss.FastRCNNLossComputation.match_targets_to_proposals", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.loss.project_masks_on_boxes"], ["# Background (negative examples)", "\n", "bg_indices", "=", "matched_idxs", "==", "Matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "labels_per_image", "[", "bg_indices", "]", "=", "0", "\n", "\n", "# discard anchors that go out of the boundaries of the image", "\n", "if", "\"not_visibility\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "labels_per_image", "[", "~", "anchors_per_image", ".", "get_field", "(", "\"visibility\"", ")", "]", "=", "-", "1", "\n", "\n", "# discard indices that are between thresholds", "\n", "", "if", "\"between_thresholds\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "inds_to_discard", "=", "matched_idxs", "==", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_per_image", "[", "inds_to_discard", "]", "=", "-", "1", "\n", "\n", "# compute regression targets", "\n", "", "regression_targets_per_image", "=", "self", ".", "box_coder", ".", "encode", "(", "\n", "matched_targets", ".", "bbox", ",", "anchors_per_image", ".", "bbox", "\n", ")", "\n", "\n", "labels", ".", "append", "(", "labels_per_image", ")", "\n", "regression_targets", ".", "append", "(", "regression_targets_per_image", ")", "\n", "\n", "", "return", "labels", ",", "regression_targets", "\n", "\n", "\n", "", "def", "__call__", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.loss.MaskRCNNLossComputation.__call__": [[102, 129], ["loss.MaskRCNNLossComputation.prepare_targets", "maskrcnn_benchmark.modeling.utils.cat", "maskrcnn_benchmark.modeling.utils.cat", "torch.nonzero().squeeze", "torch.nn.functional.binary_cross_entropy_with_logits", "maskrcnn_benchmark.modeling.utils.cat.numel", "torch.nonzero", "mask_logits.sum"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.CTCPredictor.prepare_targets", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat"], ["\n", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "anchors_per_image", "in", "anchors", "]", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_pos_inds", ",", "sampled_neg_inds", "]", ",", "dim", "=", "0", ")", "\n", "\n", "objectness", ",", "box_regression", "=", "concat_box_prediction_layers", "(", "objectness", ",", "box_regression", ")", "\n", "\n", "objectness", "=", "objectness", ".", "squeeze", "(", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "regression_targets", "=", "torch", ".", "cat", "(", "regression_targets", ",", "dim", "=", "0", ")", "\n", "\n", "box_loss", "=", "smooth_l1_loss", "(", "\n", "box_regression", "[", "sampled_pos_inds", "]", ",", "\n", "regression_targets", "[", "sampled_pos_inds", "]", ",", "\n", "beta", "=", "1.0", "/", "9", ",", "\n", "size_average", "=", "False", ",", "\n", ")", "/", "(", "sampled_inds", ".", "numel", "(", ")", ")", "\n", "\n", "objectness_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "objectness", "[", "sampled_inds", "]", ",", "labels", "[", "sampled_inds", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.loss.project_masks_on_boxes": [[11, 43], ["proposals.bbox.to.convert", "proposals.bbox.to.bbox.to", "zip", "torch.stack().to", "torch.device", "segmentation_mask.crop", "segmentation_mask.crop.resize", "cropped_mask.resize.get_mask_tensor", "masks.append", "len", "torch.empty", "torch.stack"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.crop", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.SegmentationMask.get_mask_tensor", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["\n", "from", ".", ".", "balanced_positive_negative_sampler", "import", "BalancedPositiveNegativeSampler", "\n", "from", ".", ".", "utils", "import", "cat", "\n", "\n", "from", "maskrcnn_benchmark", ".", "layers", "import", "smooth_l1_loss", "\n", "from", "maskrcnn_benchmark", ".", "modeling", ".", "matcher", "import", "Matcher", "\n", "from", "maskrcnn_benchmark", ".", "structures", ".", "boxlist_ops", "import", "boxlist_iou", "\n", "from", "maskrcnn_benchmark", ".", "structures", ".", "boxlist_ops", "import", "cat_boxlist", "\n", "\n", "\n", "class", "RPNLossComputation", "(", "object", ")", ":", "\n", "    ", "\"\"\"\n    This class computes the RPN loss.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "proposal_matcher", ",", "fg_bg_sampler", ",", "box_coder", ",", "\n", "generate_labels_func", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposal_matcher (Matcher)\n            fg_bg_sampler (BalancedPositiveNegativeSampler)\n            box_coder (BoxCoder)\n        \"\"\"", "\n", "# self.target_preparator = target_preparator", "\n", "self", ".", "proposal_matcher", "=", "proposal_matcher", "\n", "self", ".", "fg_bg_sampler", "=", "fg_bg_sampler", "\n", "self", ".", "box_coder", "=", "box_coder", "\n", "self", ".", "copied_fields", "=", "[", "]", "\n", "self", ".", "generate_labels_func", "=", "generate_labels_func", "\n", "self", ".", "discard_cases", "=", "[", "'not_visibility'", ",", "'between_thresholds'", "]", "\n", "\n", "", "def", "match_targets_to_anchors", "(", "self", ",", "anchor", ",", "target", ",", "copied_fields", "=", "[", "]", ")", ":", "\n", "        ", "match_quality_matrix", "=", "boxlist_iou", "(", "target", ",", "anchor", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.mask_head.loss.make_roi_mask_loss_evaluator": [[131, 143], ["maskrcnn_benchmark.modeling.matcher.Matcher", "loss.MaskRCNNLossComputation"], "function", ["None"], ["return", "objectness_loss", ",", "box_loss", "\n", "\n", "# This function should be overwritten in RetinaNet", "\n", "", "", "def", "generate_rpn_labels", "(", "matched_targets", ")", ":", "\n", "    ", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "matched_idxs", ">=", "0", "\n", "return", "labels_per_image", "\n", "\n", "\n", "", "def", "make_rpn_loss_evaluator", "(", "cfg", ",", "box_coder", ")", ":", "\n", "    ", "matcher", "=", "Matcher", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "FG_IOU_THRESHOLD", ",", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BG_IOU_THRESHOLD", ",", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.roi_box_predictors.FastRCNNPredictor.__init__": [[8, 25], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FastRCNNPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "in_channels", "is", "not", "None", "\n", "\n", "num_inputs", "=", "in_channels", "\n", "\n", "num_classes", "=", "config", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_CLASSES", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "cls_score", "=", "nn", ".", "Linear", "(", "num_inputs", ",", "num_classes", ")", "\n", "num_bbox_reg_classes", "=", "2", "if", "config", ".", "MODEL", ".", "CLS_AGNOSTIC_BBOX_REG", "else", "num_classes", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Linear", "(", "num_inputs", ",", "num_bbox_reg_classes", "*", "4", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "cls_score", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "cls_score", ".", "bias", ",", "0", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "bbox_pred", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bbox_pred", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.roi_box_predictors.FastRCNNPredictor.forward": [[26, 32], ["roi_box_predictors.FastRCNNPredictor.avgpool", "x.view.view.view", "roi_box_predictors.FastRCNNPredictor.cls_score", "roi_box_predictors.FastRCNNPredictor.bbox_pred", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "cls_logit", "=", "self", ".", "cls_score", "(", "x", ")", "\n", "bbox_pred", "=", "self", ".", "bbox_pred", "(", "x", ")", "\n", "return", "cls_logit", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.roi_box_predictors.FPNPredictor.__init__": [[36, 49], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FPNPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_CLASSES", "\n", "representation_size", "=", "in_channels", "\n", "\n", "self", ".", "cls_score", "=", "nn", ".", "Linear", "(", "representation_size", ",", "num_classes", ")", "\n", "num_bbox_reg_classes", "=", "2", "if", "cfg", ".", "MODEL", ".", "CLS_AGNOSTIC_BBOX_REG", "else", "num_classes", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Linear", "(", "representation_size", ",", "num_bbox_reg_classes", "*", "4", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "cls_score", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "bbox_pred", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "for", "l", "in", "[", "self", ".", "cls_score", ",", "self", ".", "bbox_pred", "]", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.roi_box_predictors.FPNPredictor.forward": [[50, 58], ["roi_box_predictors.FPNPredictor.cls_score", "roi_box_predictors.FPNPredictor.bbox_pred", "x.view.view.ndimension", "x.view.view.view", "list", "x.view.view.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "ndimension", "(", ")", "==", "4", ":", "\n", "            ", "assert", "list", "(", "x", ".", "shape", "[", "2", ":", "]", ")", "==", "[", "1", ",", "1", "]", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "scores", "=", "self", ".", "cls_score", "(", "x", ")", "\n", "bbox_deltas", "=", "self", ".", "bbox_pred", "(", "x", ")", "\n", "\n", "return", "scores", ",", "bbox_deltas", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.roi_box_predictors.make_roi_box_predictor": [[60, 63], ["func"], "function", ["None"], ["", "", "def", "make_roi_box_predictor", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "func", "=", "registry", ".", "ROI_BOX_PREDICTOR", "[", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "PREDICTOR", "]", "\n", "return", "func", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.inference.PostProcessor.__init__": [[19, 44], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.box_coder.BoxCoder"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "pre_nms_top_n", ",", "\n", "post_nms_top_n", ",", "\n", "nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n", "fpn_post_nms_per_batch", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            pre_nms_top_n (int)\n            post_nms_top_n (int)\n            nms_thresh (float)\n            min_size (int)\n            box_coder (BoxCoder)\n            fpn_post_nms_top_n (int)\n        \"\"\"", "\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n", "if", "box_coder", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.inference.PostProcessor.forward": [[45, 88], ["torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inference.PostProcessor.box_coder.decode", "proposals.repeat.repeat.split", "class_prob.split.split.split", "zip", "len", "box_regression.view", "proposals.repeat.repeat.repeat", "inference.PostProcessor.prepare_boxlist", "inference.PostProcessor.clip_to_image", "results.append", "sum", "inference.PostProcessor.filter_results"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.decode", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.inference.PostProcessor.prepare_boxlist", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.clip_to_image", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.inference.PostProcessor.filter_results"], ["            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "self", ".", "fpn_post_nms_per_batch", "=", "fpn_post_nms_per_batch", "\n", "\n", "", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "# later cat of bbox requires all fields to be present for all bbox", "\n", "# so we need to add a dummy for objectness that's missing", "\n", "for", "gt_box", "in", "gt_boxes", ":", "\n", "            ", "gt_box", ".", "add_field", "(", "\"objectness\"", ",", "torch", ".", "ones", "(", "len", "(", "gt_box", ")", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "proposals", "=", "[", "\n", "cat_boxlist", "(", "(", "proposal", ",", "gt_box", ")", ")", "\n", "for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n", "]", "\n", "\n", "return", "proposals", "\n", "\n", "", "def", "forward_for_single_feature_map", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n", "objectness", "=", "permute_and_flatten", "(", "objectness", ",", "N", ",", "A", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "objectness", "=", "objectness", ".", "sigmoid", "(", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.inference.PostProcessor.prepare_boxlist": [[89, 107], ["boxes.reshape.reshape.reshape", "scores.reshape.reshape.reshape", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field"], ["\n", "box_regression", "=", "permute_and_flatten", "(", "box_regression", ",", "N", ",", "A", ",", "4", ",", "H", ",", "W", ")", "\n", "\n", "num_anchors", "=", "A", "*", "H", "*", "W", "\n", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n", "box_regression", "=", "box_regression", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "anchors", "]", "\n", "concat_anchors", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "concat_anchors", "=", "concat_anchors", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "-", "1", ",", "4", ")", ",", "concat_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.inference.PostProcessor.filter_results": [[108, 150], ["boxlist.bbox.reshape", "boxlist.get_field().reshape", "range", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "len", "inds_all[].nonzero().squeeze", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms", "len", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.append", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "boxlist.get_field", "torch.full", "torch.full", "torch.full", "torch.full", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field.cpu", "image_thresh.item", "inds_all[].nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.boxlist_nms", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["proposals", "=", "proposals", ".", "view", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "proposal", ",", "score", ",", "im_shape", "in", "zip", "(", "proposals", ",", "objectness", ",", "image_shapes", ")", ":", "\n", "            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "boxlist", "=", "remove_small_boxes", "(", "boxlist", ",", "self", ".", "min_size", ")", "\n", "boxlist", "=", "boxlist_nms", "(", "\n", "boxlist", ",", "\n", "self", ".", "nms_thresh", ",", "\n", "max_proposals", "=", "self", ".", "post_nms_top_n", ",", "\n", "score_field", "=", "\"objectness\"", ",", "\n", ")", "\n", "result", ".", "append", "(", "boxlist", ")", "\n", "", "return", "result", "\n", "\n", "", "def", "forward", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[list[BoxList]]\n            objectness: list[tensor]\n            box_regression: list[tensor]\n\n        Returns:\n            boxlists (list[BoxList]): the post-processed anchors, after\n                applying box decoding and NMS\n        \"\"\"", "\n", "sampled_boxes", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "objectness", ")", "\n", "anchors", "=", "list", "(", "zip", "(", "*", "anchors", ")", ")", "\n", "for", "a", ",", "o", ",", "b", "in", "zip", "(", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "            ", "sampled_boxes", ".", "append", "(", "self", ".", "forward_for_single_feature_map", "(", "a", ",", "o", ",", "b", ")", ")", "\n", "\n", "", "boxlists", "=", "list", "(", "zip", "(", "*", "sampled_boxes", ")", ")", "\n", "boxlists", "=", "[", "cat_boxlist", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "\n", "if", "num_levels", ">", "1", ":", "\n", "            ", "boxlists", "=", "self", ".", "select_over_all_levels", "(", "boxlists", ")", "\n", "\n", "# append ground-truth bboxes to proposals", "\n", "", "if", "self", ".", "training", "and", "targets", "is", "not", "None", ":", "\n", "            ", "boxlists", "=", "self", ".", "add_gt_proposals", "(", "boxlists", ",", "targets", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.inference.make_roi_box_post_processor": [[152, 173], ["maskrcnn_benchmark.modeling.box_coder.BoxCoder", "inference.PostProcessor"], "function", ["None"], ["", "return", "boxlists", "\n", "\n", "", "def", "select_over_all_levels", "(", "self", ",", "boxlists", ")", ":", "\n", "        ", "num_images", "=", "len", "(", "boxlists", ")", "\n", "# different behavior during training and during testing:", "\n", "# during training, post_nms_top_n is over *all* the proposals combined, while", "\n", "# during testing, it is over the proposals for each image", "\n", "# NOTE: it should be per image, and not per batch. However, to be consistent ", "\n", "# with Detectron, the default is per batch (see Issue #672)", "\n", "if", "self", ".", "training", "and", "self", ".", "fpn_post_nms_per_batch", ":", "\n", "            ", "objectness", "=", "torch", ".", "cat", "(", "\n", "[", "boxlist", ".", "get_field", "(", "\"objectness\"", ")", "for", "boxlist", "in", "boxlists", "]", ",", "dim", "=", "0", "\n", ")", "\n", "box_sizes", "=", "[", "len", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", ")", "\n", "inds_mask", "=", "torch", ".", "zeros_like", "(", "objectness", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "inds_mask", "[", "inds_sorted", "]", "=", "1", "\n", "inds_mask", "=", "inds_mask", ".", "split", "(", "box_sizes", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_mask", "[", "i", "]", "]", "\n", "", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.roi_box_feature_extractors.ResNet50Conv5ROIFeatureExtractor.__init__": [[15, 44], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.poolers.Pooler", "maskrcnn_benchmark.modeling.backbone.resnet.StageSpec", "maskrcnn_benchmark.modeling.backbone.resnet.ResNetHead"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "ResNet50Conv5ROIFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "resolution", "=", "config", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_RESOLUTION", "\n", "scales", "=", "config", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_SCALES", "\n", "sampling_ratio", "=", "config", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_SAMPLING_RATIO", "\n", "use_dfpool", "=", "config", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "USE_DFPOOL", "\n", "pooler", "=", "Pooler", "(", "\n", "output_size", "=", "(", "resolution", ",", "resolution", ")", ",", "\n", "scales", "=", "scales", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", "deformable", "=", "use_dfpool", "\n", ")", "\n", "\n", "stage", "=", "resnet", ".", "StageSpec", "(", "index", "=", "4", ",", "block_count", "=", "3", ",", "return_features", "=", "False", ")", "\n", "head", "=", "resnet", ".", "ResNetHead", "(", "\n", "block_module", "=", "config", ".", "MODEL", ".", "RESNETS", ".", "TRANS_FUNC", ",", "\n", "stages", "=", "(", "stage", ",", ")", ",", "\n", "num_groups", "=", "config", ".", "MODEL", ".", "RESNETS", ".", "NUM_GROUPS", ",", "\n", "width_per_group", "=", "config", ".", "MODEL", ".", "RESNETS", ".", "WIDTH_PER_GROUP", ",", "\n", "stride_in_1x1", "=", "config", ".", "MODEL", ".", "RESNETS", ".", "STRIDE_IN_1X1", ",", "\n", "stride_init", "=", "None", ",", "\n", "res2_out_channels", "=", "config", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", ",", "\n", "dilation", "=", "config", ".", "MODEL", ".", "RESNETS", ".", "RES5_DILATION", "\n", ")", "\n", "\n", "self", ".", "pooler", "=", "pooler", "\n", "self", ".", "head", "=", "head", "\n", "self", ".", "out_channels", "=", "head", ".", "out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.roi_box_feature_extractors.ResNet50Conv5ROIFeatureExtractor.forward": [[45, 49], ["roi_box_feature_extractors.ResNet50Conv5ROIFeatureExtractor.pooler", "roi_box_feature_extractors.ResNet50Conv5ROIFeatureExtractor.head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "proposals", ")", ":", "\n", "        ", "x", "=", "self", ".", "pooler", "(", "x", ",", "proposals", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.roi_box_feature_extractors.FPN2MLPFeatureExtractor.__init__": [[57, 77], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.poolers.Pooler", "maskrcnn_benchmark.modeling.make_layers.make_fc", "maskrcnn_benchmark.modeling.make_layers.make_fc"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.make_fc", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.make_fc"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FPN2MLPFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "resolution", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_RESOLUTION", "\n", "scales", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_SCALES", "\n", "sampling_ratio", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_SAMPLING_RATIO", "\n", "use_dfpool", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "USE_DFPOOL", "\n", "pooler", "=", "Pooler", "(", "\n", "output_size", "=", "(", "resolution", ",", "resolution", ")", ",", "\n", "scales", "=", "scales", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", "deformable", "=", "use_dfpool", "\n", ")", "\n", "input_size", "=", "in_channels", "*", "resolution", "**", "2", "\n", "representation_size", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "MLP_HEAD_DIM", "\n", "use_gn", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "USE_GN", "\n", "self", ".", "pooler", "=", "pooler", "\n", "self", ".", "fc6", "=", "make_fc", "(", "input_size", ",", "representation_size", ",", "use_gn", ")", "\n", "self", ".", "fc7", "=", "make_fc", "(", "representation_size", ",", "representation_size", ",", "use_gn", ")", "\n", "self", ".", "out_channels", "=", "representation_size", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.roi_box_feature_extractors.FPN2MLPFeatureExtractor.forward": [[78, 86], ["roi_box_feature_extractors.FPN2MLPFeatureExtractor.pooler", "torch.nn.functional.relu.view", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu.size", "roi_box_feature_extractors.FPN2MLPFeatureExtractor.fc6", "roi_box_feature_extractors.FPN2MLPFeatureExtractor.fc7"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "proposals", ")", ":", "\n", "        ", "x", "=", "self", ".", "pooler", "(", "x", ",", "proposals", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc7", "(", "x", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.roi_box_feature_extractors.FPNXconv1fcFeatureExtractor.__init__": [[94, 142], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.poolers.Pooler", "range", "roi_box_feature_extractors.FPNXconv1fcFeatureExtractor.add_module", "maskrcnn_benchmark.modeling.make_layers.make_fc", "xconvs.append", "xconvs.append", "torch.nn.Sequential", "modules.modules", "torch.nn.Conv2d", "xconvs.append", "torch.nn.ReLU", "isinstance", "maskrcnn_benchmark.modeling.make_layers.group_norm", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.make_fc", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.group_norm"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FPNXconv1fcFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "resolution", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_RESOLUTION", "\n", "scales", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_SCALES", "\n", "sampling_ratio", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_SAMPLING_RATIO", "\n", "pooler", "=", "Pooler", "(", "\n", "output_size", "=", "(", "resolution", ",", "resolution", ")", ",", "\n", "scales", "=", "scales", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", ")", "\n", "self", ".", "pooler", "=", "pooler", "\n", "\n", "use_gn", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "USE_GN", "\n", "conv_head_dim", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "CONV_HEAD_DIM", "\n", "num_stacked_convs", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_STACKED_CONVS", "\n", "dilation", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "DILATION", "\n", "\n", "xconvs", "=", "[", "]", "\n", "for", "ix", "in", "range", "(", "num_stacked_convs", ")", ":", "\n", "            ", "xconvs", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "conv_head_dim", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", "if", "use_gn", "else", "True", "\n", ")", "\n", ")", "\n", "in_channels", "=", "conv_head_dim", "\n", "if", "use_gn", ":", "\n", "                ", "xconvs", ".", "append", "(", "group_norm", "(", "in_channels", ")", ")", "\n", "", "xconvs", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "", "self", ".", "add_module", "(", "\"xconvs\"", ",", "nn", ".", "Sequential", "(", "*", "xconvs", ")", ")", "\n", "for", "modules", "in", "[", "self", ".", "xconvs", ",", "]", ":", "\n", "            ", "for", "l", "in", "modules", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "l", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "not", "use_gn", ":", "\n", "                        ", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "", "input_size", "=", "conv_head_dim", "*", "resolution", "**", "2", "\n", "representation_size", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "MLP_HEAD_DIM", "\n", "self", ".", "fc6", "=", "make_fc", "(", "input_size", ",", "representation_size", ",", "use_gn", "=", "False", ")", "\n", "self", ".", "out_channels", "=", "representation_size", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.roi_box_feature_extractors.FPNXconv1fcFeatureExtractor.forward": [[143, 149], ["roi_box_feature_extractors.FPNXconv1fcFeatureExtractor.pooler", "roi_box_feature_extractors.FPNXconv1fcFeatureExtractor.xconvs", "torch.nn.functional.relu.view", "torch.nn.functional.relu", "torch.nn.functional.relu.size", "roi_box_feature_extractors.FPNXconv1fcFeatureExtractor.fc6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "proposals", ")", ":", "\n", "        ", "x", "=", "self", ".", "pooler", "(", "x", ",", "proposals", ")", "\n", "x", "=", "self", ".", "xconvs", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.roi_box_feature_extractors.make_roi_box_feature_extractor": [[151, 156], ["func"], "function", ["None"], ["", "", "def", "make_roi_box_feature_extractor", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "func", "=", "registry", ".", "ROI_BOX_FEATURE_EXTRACTORS", "[", "\n", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "FEATURE_EXTRACTOR", "\n", "]", "\n", "return", "func", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.loss.FastRCNNLossComputation.__init__": [[21, 38], ["None"], "methods", ["None"], ["class", "RPNLossComputation", "(", "object", ")", ":", "\n", "    ", "\"\"\"\n    This class computes the RPN loss.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "proposal_matcher", ",", "fg_bg_sampler", ",", "box_coder", ",", "\n", "generate_labels_func", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposal_matcher (Matcher)\n            fg_bg_sampler (BalancedPositiveNegativeSampler)\n            box_coder (BoxCoder)\n        \"\"\"", "\n", "# self.target_preparator = target_preparator", "\n", "self", ".", "proposal_matcher", "=", "proposal_matcher", "\n", "self", ".", "fg_bg_sampler", "=", "fg_bg_sampler", "\n", "self", ".", "box_coder", "=", "box_coder", "\n", "self", ".", "copied_fields", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.loss.FastRCNNLossComputation.match_targets_to_proposals": [[39, 51], ["maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "loss.FastRCNNLossComputation.proposal_matcher", "target.copy_with_fields.copy_with_fields.copy_with_fields", "matched_targets.add_field", "loss.FastRCNNLossComputation.clamp"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.copy_with_fields", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field"], ["self", ".", "generate_labels_func", "=", "generate_labels_func", "\n", "self", ".", "discard_cases", "=", "[", "'not_visibility'", ",", "'between_thresholds'", "]", "\n", "\n", "", "def", "match_targets_to_anchors", "(", "self", ",", "anchor", ",", "target", ",", "copied_fields", "=", "[", "]", ")", ":", "\n", "        ", "match_quality_matrix", "=", "boxlist_iou", "(", "target", ",", "anchor", ")", "\n", "matched_idxs", "=", "self", ".", "proposal_matcher", "(", "match_quality_matrix", ")", "\n", "# RPN doesn't need any fields from target", "\n", "# for creating the labels, so clear them all", "\n", "target", "=", "target", ".", "copy_with_fields", "(", "copied_fields", ")", "\n", "# get the targets corresponding GT for each anchor", "\n", "# NB: need to clamp the indices because we can have a single", "\n", "# GT in the image, and matched_idxs can be -2, which goes", "\n", "# out of bounds", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.loss.FastRCNNLossComputation.prepare_targets": [[52, 81], ["zip", "loss.FastRCNNLossComputation.match_targets_to_proposals", "loss.FastRCNNLossComputation.get_field", "loss.FastRCNNLossComputation.get_field", "labels_per_image.to.to.to", "loss.FastRCNNLossComputation.box_coder.encode", "labels.append", "regression_targets.append"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.loss.FastRCNNLossComputation.match_targets_to_proposals", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.encode"], ["matched_targets", "=", "target", "[", "matched_idxs", ".", "clamp", "(", "min", "=", "0", ")", "]", "\n", "matched_targets", ".", "add_field", "(", "\"matched_idxs\"", ",", "matched_idxs", ")", "\n", "return", "matched_targets", "\n", "\n", "", "def", "prepare_targets", "(", "self", ",", "anchors", ",", "targets", ")", ":", "\n", "        ", "labels", "=", "[", "]", "\n", "regression_targets", "=", "[", "]", "\n", "for", "anchors_per_image", ",", "targets_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n", "            ", "matched_targets", "=", "self", ".", "match_targets_to_anchors", "(", "\n", "anchors_per_image", ",", "targets_per_image", ",", "self", ".", "copied_fields", "\n", ")", "\n", "\n", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "self", ".", "generate_labels_func", "(", "matched_targets", ")", "\n", "labels_per_image", "=", "labels_per_image", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# Background (negative examples)", "\n", "bg_indices", "=", "matched_idxs", "==", "Matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "labels_per_image", "[", "bg_indices", "]", "=", "0", "\n", "\n", "# discard anchors that go out of the boundaries of the image", "\n", "if", "\"not_visibility\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "labels_per_image", "[", "~", "anchors_per_image", ".", "get_field", "(", "\"visibility\"", ")", "]", "=", "-", "1", "\n", "\n", "# discard indices that are between thresholds", "\n", "", "if", "\"between_thresholds\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "inds_to_discard", "=", "matched_idxs", "==", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_per_image", "[", "inds_to_discard", "]", "=", "-", "1", "\n", "\n", "# compute regression targets", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.loss.FastRCNNLossComputation.subsample": [[82, 117], ["loss.FastRCNNLossComputation.prepare_targets", "loss.FastRCNNLossComputation.fg_bg_sampler", "list", "zip", "enumerate", "proposals_per_image.add_field", "proposals_per_image.add_field", "zip", "torch.nonzero().squeeze", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.CTCPredictor.prepare_targets", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field"], ["", "regression_targets_per_image", "=", "self", ".", "box_coder", ".", "encode", "(", "\n", "matched_targets", ".", "bbox", ",", "anchors_per_image", ".", "bbox", "\n", ")", "\n", "\n", "labels", ".", "append", "(", "labels_per_image", ")", "\n", "regression_targets", ".", "append", "(", "regression_targets_per_image", ")", "\n", "\n", "", "return", "labels", ",", "regression_targets", "\n", "\n", "\n", "", "def", "__call__", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors (list[BoxList])\n            objectness (list[Tensor])\n            box_regression (list[Tensor])\n            targets (list[BoxList])\n\n        Returns:\n            objectness_loss (Tensor)\n            box_loss (Tensor\n        \"\"\"", "\n", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "anchors_per_image", "in", "anchors", "]", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_pos_inds", ",", "sampled_neg_inds", "]", ",", "dim", "=", "0", ")", "\n", "\n", "objectness", ",", "box_regression", "=", "concat_box_prediction_layers", "(", "objectness", ",", "box_regression", ")", "\n", "\n", "objectness", "=", "objectness", ".", "squeeze", "(", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.loss.FastRCNNLossComputation.__call__": [[118, 168], ["maskrcnn_benchmark.modeling.utils.cat", "maskrcnn_benchmark.modeling.utils.cat", "maskrcnn_benchmark.modeling.utils.cat", "maskrcnn_benchmark.modeling.utils.cat", "torch.nn.functional.cross_entropy", "torch.nonzero().squeeze", "maskrcnn_benchmark.layers.smooth_l1_loss", "hasattr", "RuntimeError", "torch.tensor", "maskrcnn_benchmark.modeling.utils.cat.numel", "proposal.get_field", "proposal.get_field", "torch.nonzero", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.smooth_l1_loss.smooth_l1_loss", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["regression_targets", "=", "torch", ".", "cat", "(", "regression_targets", ",", "dim", "=", "0", ")", "\n", "\n", "box_loss", "=", "smooth_l1_loss", "(", "\n", "box_regression", "[", "sampled_pos_inds", "]", ",", "\n", "regression_targets", "[", "sampled_pos_inds", "]", ",", "\n", "beta", "=", "1.0", "/", "9", ",", "\n", "size_average", "=", "False", ",", "\n", ")", "/", "(", "sampled_inds", ".", "numel", "(", ")", ")", "\n", "\n", "objectness_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "objectness", "[", "sampled_inds", "]", ",", "labels", "[", "sampled_inds", "]", "\n", ")", "\n", "\n", "return", "objectness_loss", ",", "box_loss", "\n", "\n", "# This function should be overwritten in RetinaNet", "\n", "", "", "def", "generate_rpn_labels", "(", "matched_targets", ")", ":", "\n", "    ", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "matched_idxs", ">=", "0", "\n", "return", "labels_per_image", "\n", "\n", "\n", "", "def", "make_rpn_loss_evaluator", "(", "cfg", ",", "box_coder", ")", ":", "\n", "    ", "matcher", "=", "Matcher", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "FG_IOU_THRESHOLD", ",", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BG_IOU_THRESHOLD", ",", "\n", "allow_low_quality_matches", "=", "True", ",", "\n", ")", "\n", "\n", "fg_bg_sampler", "=", "BalancedPositiveNegativeSampler", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BATCH_SIZE_PER_IMAGE", ",", "cfg", ".", "MODEL", ".", "RPN", ".", "POSITIVE_FRACTION", "\n", ")", "\n", "\n", "loss_evaluator", "=", "RPNLossComputation", "(", "\n", "matcher", ",", "\n", "fg_bg_sampler", ",", "\n", "box_coder", ",", "\n", "generate_rpn_labels", "\n", ")", "\n", "return", "loss_evaluator", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.loss.make_roi_box_loss_evaluator": [[170, 194], ["maskrcnn_benchmark.modeling.matcher.Matcher", "maskrcnn_benchmark.modeling.box_coder.BoxCoder", "maskrcnn_benchmark.modeling.balanced_positive_negative_sampler.BalancedPositiveNegativeSampler", "loss.FastRCNNLossComputation"], "function", ["None"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.box_head.ROIBoxHead.__init__": [[16, 23], ["super().__init__", "roi_box_feature_extractors.make_roi_box_feature_extractor", "roi_box_predictors.make_roi_box_predictor", "inference.make_roi_box_post_processor", "loss.make_roi_box_loss_evaluator"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.roi_box_feature_extractors.make_roi_box_feature_extractor", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.roi_box_predictors.make_roi_box_predictor", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.inference.make_roi_box_post_processor", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.loss.make_roi_box_loss_evaluator"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "ROIBoxHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_extractor", "=", "make_roi_box_feature_extractor", "(", "cfg", ",", "in_channels", ")", "\n", "self", ".", "predictor", "=", "make_roi_box_predictor", "(", "\n", "cfg", ",", "self", ".", "feature_extractor", ".", "out_channels", ")", "\n", "self", ".", "post_processor", "=", "make_roi_box_post_processor", "(", "cfg", ")", "\n", "self", ".", "loss_evaluator", "=", "make_roi_box_loss_evaluator", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.box_head.ROIBoxHead.forward": [[24, 62], ["box_head.ROIBoxHead.feature_extractor", "box_head.ROIBoxHead.predictor", "box_head.ROIBoxHead.loss_evaluator", "box_head.ROIBoxHead.post_processor", "dict", "torch.no_grad", "box_head.ROIBoxHead.loss_evaluator.subsample"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.loss.FastRCNNLossComputation.subsample"], ["", "def", "forward", "(", "self", ",", "features", ",", "proposals", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            features (list[Tensor]): feature-maps from possibly several levels\n            proposals (list[BoxList]): proposal boxes\n            targets (list[BoxList], optional): the ground-truth targets.\n\n        Returns:\n            x (Tensor): the result of the feature extractor\n            proposals (list[BoxList]): during training, the subsampled proposals\n                are returned. During testing, the predicted boxlists are returned\n            losses (dict[Tensor]): During training, returns the losses for the\n                head. During testing, returns an empty dict.\n        \"\"\"", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# Faster R-CNN subsamples during training the proposals with a fixed", "\n", "# positive / negative ratio", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "proposals", "=", "self", ".", "loss_evaluator", ".", "subsample", "(", "proposals", ",", "targets", ")", "\n", "\n", "# extract features that will be fed to the final classifier. The", "\n", "# feature_extractor generally corresponds to the pooler + heads", "\n", "", "", "x", "=", "self", ".", "feature_extractor", "(", "features", ",", "proposals", ")", "\n", "# final classifier that converts the features into predictions", "\n", "class_logits", ",", "box_regression", "=", "self", ".", "predictor", "(", "x", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "result", "=", "self", ".", "post_processor", "(", "(", "class_logits", ",", "box_regression", ")", ",", "proposals", ")", "\n", "return", "x", ",", "result", ",", "{", "}", "\n", "\n", "", "loss_classifier", ",", "loss_box_reg", "=", "self", ".", "loss_evaluator", "(", "\n", "[", "class_logits", "]", ",", "[", "box_regression", "]", "\n", ")", "\n", "return", "(", "\n", "x", ",", "\n", "proposals", ",", "\n", "dict", "(", "loss_classifier", "=", "loss_classifier", ",", "loss_box_reg", "=", "loss_box_reg", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.box_head.box_head.build_roi_box_head": [[65, 72], ["box_head.ROIBoxHead"], "function", ["None"], ["", "", "def", "build_roi_box_head", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a new box head.\n    By default, uses ROIBoxHead, but if it turns out not to be enough, just register a new class\n    and make it a parameter in the config\n    \"\"\"", "\n", "return", "ROIBoxHead", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.mobilenet.InvertedResidual.__init__": [[27, 58], ["torch.nn.Module.__init__", "int", "round", "torch.nn.Sequential", "torch.nn.Sequential", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU6", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.BatchNorm2d", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU6", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU6", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "expand_ratio", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "hidden_dim", "=", "int", "(", "round", "(", "inp", "*", "expand_ratio", ")", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "\n", "if", "expand_ratio", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# dw", "\n", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "Conv2d", "(", "inp", ",", "hidden_dim", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "oup", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.mobilenet.InvertedResidual.forward": [[60, 65], ["mobilenet.InvertedResidual.conv", "mobilenet.InvertedResidual.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.mobilenet.MobileNetV2.__init__": [[71, 106], ["torch.nn.Module.__init__", "int", "torch.nn.ModuleList", "mobilenet.MobileNetV2._initialize_weights", "mobilenet.MobileNetV2._freeze_backbone", "int", "range", "mobilenet.conv_bn", "mobilenet.MobileNetV2.features.append", "mobilenet.MobileNetV2.features.append", "mobilenet.MobileNetV2.return_features_num_channels.append", "block", "block", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.mobilenet.MobileNetV2._initialize_weights", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet.ResNet._freeze_backbone", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.mobilenet.conv_bn", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["def", "__init__", "(", "self", ",", "cfg", ",", "n_class", "=", "1000", ",", "input_size", "=", "224", ",", "width_mult", "=", "1.", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "InvertedResidual", "\n", "input_channel", "=", "32", "\n", "interverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "assert", "input_size", "%", "32", "==", "0", "\n", "input_channel", "=", "int", "(", "input_channel", "*", "width_mult", ")", "\n", "self", ".", "return_features_indices", "=", "[", "3", ",", "6", ",", "13", ",", "17", "]", "\n", "self", ".", "return_features_num_channels", "=", "[", "]", "\n", "self", ".", "features", "=", "nn", ".", "ModuleList", "(", "[", "conv_bn", "(", "3", ",", "input_channel", ",", "2", ")", "]", ")", "\n", "# building inverted residual blocks", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "interverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "int", "(", "c", "*", "width_mult", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "s", ",", "expand_ratio", "=", "t", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "1", ",", "expand_ratio", "=", "t", ")", ")", "\n", "", "input_channel", "=", "output_channel", "\n", "if", "len", "(", "self", ".", "features", ")", "-", "1", "in", "self", ".", "return_features_indices", ":", "\n", "                    ", "self", ".", "return_features_num_channels", ".", "append", "(", "output_channel", ")", "\n", "\n", "", "", "", "self", ".", "_initialize_weights", "(", ")", "\n", "self", ".", "_freeze_backbone", "(", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "FREEZE_CONV_BODY_AT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.mobilenet.MobileNetV2._freeze_backbone": [[107, 111], ["range", "mobilenet.MobileNetV2.features[].parameters"], "methods", ["None"], ["", "def", "_freeze_backbone", "(", "self", ",", "freeze_at", ")", ":", "\n", "        ", "for", "layer_index", "in", "range", "(", "freeze_at", ")", ":", "\n", "            ", "for", "p", "in", "self", ".", "features", "[", "layer_index", "]", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.mobilenet.MobileNetV2.forward": [[112, 119], ["enumerate", "m", "res.append"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "self", ".", "features", ")", ":", "\n", "            ", "x", "=", "m", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "return_features_indices", ":", "\n", "                ", "res", ".", "append", "(", "x", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.mobilenet.MobileNetV2._initialize_weights": [[120, 134], ["mobilenet.MobileNetV2.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.size", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "(", "2.", "/", "n", ")", "**", "0.5", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.mobilenet.conv_bn": [[10, 15], ["torch.nn.Sequential", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU6"], "function", ["None"], ["def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.mobilenet.conv_1x1_bn": [[18, 23], ["torch.nn.Sequential", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU6"], "function", ["None"], ["", "def", "conv_1x1_bn", "(", "inp", ",", "oup", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_modeldef.add_archs": [[4, 9], ["None"], "function", ["None"], ["def", "add_archs", "(", "archs", ")", ":", "\n", "    ", "global", "MODEL_ARCH", "\n", "for", "x", "in", "archs", ":", "\n", "        ", "assert", "x", "not", "in", "MODEL_ARCH", ",", "\"Duplicated model name {} existed\"", ".", "format", "(", "x", ")", "\n", "MODEL_ARCH", "[", "x", "]", "=", "archs", "[", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.msr.ConcatUpConv.__init__": [[7, 21], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.init.kaiming_uniform_", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.init.kaiming_uniform_", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "outplanes", ",", "upsample", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConcatUpConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_channels", "=", "outplanes", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "con_1x1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "outplanes", ",", "1", ",", "bias", "=", "False", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "con_1x1", ".", "weight", ",", "a", "=", "1", ")", "\n", "self", ".", "nor_1", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "leakyrelu_1", "=", "nn", ".", "ReLU", "(", ")", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "self", ".", "con_3x3", "=", "nn", ".", "Conv2d", "(", "outplanes", ",", "out_channels", "//", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "con_3x3", ".", "weight", ",", "a", "=", "1", ")", "\n", "self", ".", "nor_3", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", "//", "2", ")", "\n", "self", ".", "leakyrelu_3", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.msr.ConcatUpConv.forward": [[22, 30], ["torch.cat", "msr.ConcatUpConv.leakyrelu_1", "msr.ConcatUpConv.nor_1", "msr.ConcatUpConv.leakyrelu_3", "torch.nn.functional.interpolate", "msr.ConcatUpConv.con_1x1", "msr.ConcatUpConv.nor_3", "msr.ConcatUpConv.con_3x3"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "fusion", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "out_1", "=", "self", ".", "leakyrelu_1", "(", "self", ".", "nor_1", "(", "self", ".", "con_1x1", "(", "fusion", ")", ")", ")", "\n", "out", "=", "None", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "out", "=", "self", ".", "leakyrelu_3", "(", "self", ".", "nor_3", "(", "self", ".", "con_3x3", "(", "out_1", ")", ")", ")", "\n", "out", "=", "F", ".", "interpolate", "(", "out", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "", "return", "out", ",", "out_1", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.msr.MSR.__init__": [[33, 46], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList.append", "enumerate", "msr.ConcatUpConv", "torch.nn.ModuleList.append", "msr.ConcatUpConv"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "body", ",", "channels", ",", "fpn", "=", "None", ",", "pan", "=", "None", ")", ":", "\n", "        ", "super", "(", "MSR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "body", "=", "body", "\n", "cucs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "channel", "=", "channels", "[", "0", "]", "\n", "cucs", ".", "append", "(", "ConcatUpConv", "(", "channel", "*", "2", ",", "channel", ",", "upsample", "=", "False", ")", ")", "\n", "for", "i", ",", "channel", "in", "enumerate", "(", "channels", "[", "1", ":", "]", ")", ":", "\n", "            ", "cucs", ".", "append", "(", "ConcatUpConv", "(", "channel", "*", "2", ",", "channel", ")", ")", "\n", "", "self", ".", "cucs", "=", "cucs", "\n", "if", "fpn", "is", "not", "None", ":", "\n", "            ", "self", ".", "fpn", "=", "fpn", "\n", "", "if", "pan", "is", "not", "None", ":", "\n", "            ", "self", ".", "pan", "=", "pan", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.msr.MSR.forward": [[47, 66], ["msr.MSR.body", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "zip", "hasattr", "hasattr", "msr.MSR.body", "cuc", "new_outputs.append", "msr.MSR.pan", "msr.MSR.fpn"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "body", "(", "x", ")", "\n", "\n", "re_x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "0.5", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "output_re", "=", "self", ".", "body", "(", "re_x", ")", "[", "-", "1", "]", "\n", "low", "=", "F", ".", "interpolate", "(", "output_re", ",", "\n", "size", "=", "outputs", "[", "-", "1", "]", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "new_outputs", "=", "[", "]", "\n", "for", "cuc", ",", "high", "in", "zip", "(", "self", ".", "cucs", "[", ":", ":", "-", "1", "]", ",", "outputs", "[", ":", ":", "-", "1", "]", ")", ":", "\n", "            ", "low", ",", "out", "=", "cuc", "(", "high", ",", "low", ")", "\n", "new_outputs", ".", "append", "(", "out", ")", "\n", "", "outs", "=", "new_outputs", "[", ":", ":", "-", "1", "]", "\n", "if", "hasattr", "(", "self", ",", "'pan'", ")", ":", "\n", "            ", "outs", "=", "self", ".", "pan", "(", "outs", ")", "\n", "", "if", "hasattr", "(", "self", ",", "'fpn'", ")", ":", "\n", "            ", "outs", "=", "self", ".", "fpn", "(", "outs", ")", "\n", "", "return", "outs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.pan.FPA.__init__": [[6, 43], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", "=", "2048", ")", ":", "\n", "        ", "\"\"\"\n        Feature Pyramid Attention\n        :type channels: int\n        \"\"\"", "\n", "super", "(", "FPA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "channels_mid", "=", "int", "(", "channels", "/", "4", ")", "\n", "\n", "self", ".", "channels_cond", "=", "channels", "\n", "\n", "# Master branch", "\n", "self", ".", "conv_master", "=", "nn", ".", "Conv2d", "(", "self", ".", "channels_cond", ",", "channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_master", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "\n", "# Global pooling branch", "\n", "self", ".", "conv_gpb", "=", "nn", ".", "Conv2d", "(", "self", ".", "channels_cond", ",", "channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.bn_gpb = nn.BatchNorm2d(channels)", "\n", "\n", "# C333 because of the shape of last feature maps is (16, 16).", "\n", "self", ".", "conv7x7_1", "=", "nn", ".", "Conv2d", "(", "self", ".", "channels_cond", ",", "channels_mid", ",", "kernel_size", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1_1", "=", "nn", ".", "BatchNorm2d", "(", "channels_mid", ")", "\n", "self", ".", "conv5x5_1", "=", "nn", ".", "Conv2d", "(", "channels_mid", ",", "channels_mid", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2_1", "=", "nn", ".", "BatchNorm2d", "(", "channels_mid", ")", "\n", "self", ".", "conv3x3_1", "=", "nn", ".", "Conv2d", "(", "channels_mid", ",", "channels_mid", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3_1", "=", "nn", ".", "BatchNorm2d", "(", "channels_mid", ")", "\n", "\n", "self", ".", "conv7x7_2", "=", "nn", ".", "Conv2d", "(", "channels_mid", ",", "channels_mid", ",", "kernel_size", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1_2", "=", "nn", ".", "BatchNorm2d", "(", "channels_mid", ")", "\n", "self", ".", "conv5x5_2", "=", "nn", ".", "Conv2d", "(", "channels_mid", ",", "channels_mid", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2_2", "=", "nn", ".", "BatchNorm2d", "(", "channels_mid", ")", "\n", "self", ".", "conv3x3_2", "=", "nn", ".", "Conv2d", "(", "channels_mid", ",", "channels_mid", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3_2", "=", "nn", ".", "BatchNorm2d", "(", "channels_mid", ")", "\n", "\n", "self", ".", "bn_upsample_1", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "self", ".", "conv1x1_up1", "=", "nn", ".", "Conv2d", "(", "channels_mid", ",", "channels", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.pan.FPA.forward": [[44, 97], ["pan.FPA.conv_master", "pan.FPA.bn_master", "pan.FPA.conv_gpb", "pan.FPA.conv7x7_1", "pan.FPA.bn1_1", "pan.FPA.relu", "pan.FPA.conv7x7_2", "pan.FPA.bn1_2", "pan.FPA.conv5x5_1", "pan.FPA.bn2_1", "pan.FPA.relu", "pan.FPA.conv5x5_2", "pan.FPA.bn2_2", "pan.FPA.conv3x3_1", "pan.FPA.bn3_1", "pan.FPA.relu", "pan.FPA.conv3x3_2", "pan.FPA.bn3_2", "torch.interpolate", "torch.interpolate", "pan.FPA.relu", "torch.interpolate", "torch.interpolate", "pan.FPA.relu", "torch.interpolate", "torch.interpolate", "pan.FPA.relu", "pan.FPA.relu", "pan.FPA.bn_upsample_1", "pan.FPA.conv1x1_up1", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        :param x: Shape: [b, 2048, h, w]\n        :return: out: Feature maps. Shape: [b, 2048, h, w]\n        \"\"\"", "\n", "# Master branch", "\n", "x_master", "=", "self", ".", "conv_master", "(", "x", ")", "\n", "x_master", "=", "self", ".", "bn_master", "(", "x_master", ")", "\n", "\n", "# Global pooling branch", "\n", "x_gpb", "=", "nn", ".", "AvgPool2d", "(", "x", ".", "shape", "[", "2", ":", "]", ")", "(", "x", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "channels_cond", ",", "1", ",", "1", ")", "\n", "x_gpb", "=", "self", ".", "conv_gpb", "(", "x_gpb", ")", "\n", "#x_gpb = self.bn_gpb(x_gpb)", "\n", "\n", "# Branch 1", "\n", "x1_1", "=", "self", ".", "conv7x7_1", "(", "x", ")", "\n", "x1_1", "=", "self", ".", "bn1_1", "(", "x1_1", ")", "\n", "x1_1", "=", "self", ".", "relu", "(", "x1_1", ")", "\n", "x1_2", "=", "self", ".", "conv7x7_2", "(", "x1_1", ")", "\n", "x1_2", "=", "self", ".", "bn1_2", "(", "x1_2", ")", "\n", "\n", "# Branch 2", "\n", "x2_1", "=", "self", ".", "conv5x5_1", "(", "x1_1", ")", "\n", "x2_1", "=", "self", ".", "bn2_1", "(", "x2_1", ")", "\n", "x2_1", "=", "self", ".", "relu", "(", "x2_1", ")", "\n", "x2_2", "=", "self", ".", "conv5x5_2", "(", "x2_1", ")", "\n", "x2_2", "=", "self", ".", "bn2_2", "(", "x2_2", ")", "\n", "\n", "# Branch 3", "\n", "x3_1", "=", "self", ".", "conv3x3_1", "(", "x2_1", ")", "\n", "x3_1", "=", "self", ".", "bn3_1", "(", "x3_1", ")", "\n", "x3_1", "=", "self", ".", "relu", "(", "x3_1", ")", "\n", "x3_2", "=", "self", ".", "conv3x3_2", "(", "x3_1", ")", "\n", "x3_2", "=", "self", ".", "bn3_2", "(", "x3_2", ")", "\n", "\n", "# Merge branch 1 and 2", "\n", "x3_upsample", "=", "F", ".", "interpolate", "(", "x3_2", ",", "size", "=", "x2_2", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "x2_merge", "=", "self", ".", "relu", "(", "x2_2", "+", "x3_upsample", ")", "\n", "\n", "x2_upsample", "=", "F", ".", "interpolate", "(", "x2_merge", ",", "size", "=", "x1_2", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "x1_merge", "=", "self", ".", "relu", "(", "x1_2", "+", "x2_upsample", ")", "\n", "\n", "x1_merge_upsample", "=", "F", ".", "interpolate", "(", "x1_merge", ",", "size", "=", "x_master", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "x1_merge_upsample_ch", "=", "self", ".", "relu", "(", "self", ".", "bn_upsample_1", "(", "self", ".", "conv1x1_up1", "(", "x1_merge_upsample", ")", ")", ")", "\n", "x_master", "=", "x_master", "*", "x1_merge_upsample_ch", "\n", "#", "\n", "out", "=", "self", ".", "relu", "(", "x_master", "+", "x_gpb", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.pan.GAU.__init__": [[100, 117], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels_high", ",", "channels_low", ",", "upsample", "=", "True", ")", ":", "\n", "        ", "super", "(", "GAU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Global Attention Upsample", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "conv3x3", "=", "nn", ".", "Conv2d", "(", "channels_low", ",", "channels_low", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_low", "=", "nn", ".", "BatchNorm2d", "(", "channels_low", ")", "\n", "\n", "self", ".", "conv1x1", "=", "nn", ".", "Conv2d", "(", "channels_high", ",", "channels_low", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "#self.bn_high = nn.BatchNorm2d(channels_low)", "\n", "\n", "if", "upsample", ":", "\n", "            ", "self", ".", "conv_upsample", "=", "nn", ".", "ConvTranspose2d", "(", "channels_high", ",", "channels_low", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_upsample", "=", "nn", ".", "BatchNorm2d", "(", "channels_low", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_reduction", "=", "nn", ".", "Conv2d", "(", "channels_high", ",", "channels_low", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_reduction", "=", "nn", ".", "BatchNorm2d", "(", "channels_low", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.pan.GAU.forward": [[118, 147], ["pan.GAU.conv1x1", "pan.GAU.relu", "pan.GAU.conv3x3", "pan.GAU.bn_low", "len", "pan.GAU.relu", "pan.GAU.relu", "torch.AvgPool2d", "torch.AvgPool2d", "pan.GAU.bn_upsample", "pan.GAU.bn_reduction", "pan.GAU.conv_upsample", "pan.GAU.conv_reduction"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_layers.conv1x1", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_layers.conv3x3", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "forward", "(", "self", ",", "fms_high", ",", "fms_low", ",", "fm_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Use the high level features with abundant catagory information to weight the low level features with pixel\n        localization information. In the meantime, we further use mask feature maps with catagory-specific information\n        to localize the mask position.\n        :param fms_high: Features of high level. Tensor.\n        :param fms_low: Features of low level.  Tensor.\n        :param fm_mask:\n        :return: fms_att_upsample\n        \"\"\"", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "fms_high", ".", "shape", "\n", "\n", "fms_high_gp", "=", "nn", ".", "AvgPool2d", "(", "fms_high", ".", "shape", "[", "2", ":", "]", ")", "(", "fms_high", ")", ".", "view", "(", "len", "(", "fms_high", ")", ",", "c", ",", "1", ",", "1", ")", "\n", "fms_high_gp", "=", "self", ".", "conv1x1", "(", "fms_high_gp", ")", "\n", "# fms_high_gp = self.bn_high(fms_high_gp)# arlog, when the spatial size HxW = 1x1, the BN cannot be used.", "\n", "fms_high_gp", "=", "self", ".", "relu", "(", "fms_high_gp", ")", "\n", "\n", "# fms_low_mask = torch.cat([fms_low, fm_mask], dim=1)", "\n", "fms_low_mask", "=", "self", ".", "conv3x3", "(", "fms_low", ")", "\n", "fms_low_mask", "=", "self", ".", "bn_low", "(", "fms_low_mask", ")", "\n", "\n", "fms_att", "=", "fms_low_mask", "*", "fms_high_gp", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "\n", "self", ".", "bn_upsample", "(", "self", ".", "conv_upsample", "(", "fms_high", ")", ")", "+", "fms_att", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "\n", "self", ".", "bn_reduction", "(", "self", ".", "conv_reduction", "(", "fms_high", ")", ")", "+", "fms_att", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.pan.PAN.__init__": [[150, 163], ["torch.Module.__init__", "pan.FPA", "pan.GAU", "pan.GAU", "pan.GAU"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :param blocks: Blocks of the network with reverse sequential.\n        \"\"\"", "\n", "super", "(", "PAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "channels_blocks", "=", "[", "2048", ",", "1024", ",", "512", ",", "256", "]", "\n", "\n", "self", ".", "fpa", "=", "FPA", "(", "channels", "=", "channels_blocks", "[", "0", "]", ")", "\n", "\n", "self", ".", "gau_block1", "=", "GAU", "(", "channels_blocks", "[", "0", "]", ",", "channels_blocks", "[", "1", "]", ")", "\n", "self", ".", "gau_block2", "=", "GAU", "(", "channels_blocks", "[", "1", "]", ",", "channels_blocks", "[", "2", "]", ")", "\n", "self", ".", "gau_block3", "=", "GAU", "(", "channels_blocks", "[", "2", "]", ",", "channels_blocks", "[", "3", "]", ")", "\n", "self", ".", "gau", "=", "[", "self", ".", "gau_block1", ",", "self", ".", "gau_block2", ",", "self", ".", "gau_block3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.pan.PAN.forward": [[164, 178], ["enumerate", "feats.reverse", "tuple", "feats.append", "pan.PAN.fpa", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fms", ")", ":", "\n", "        ", "\"\"\"\n        :param fms: Feature maps of forward propagation in the network with reverse sequential. shape:[b, c, h, w]\n        :return: fm_high. [b, 256, h, w]\n        \"\"\"", "\n", "feats", "=", "[", "]", "\n", "for", "i", ",", "fm_low", "in", "enumerate", "(", "fms", "[", ":", ":", "-", "1", "]", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "fm_high", "=", "self", ".", "fpa", "(", "fm_low", ")", "\n", "", "else", ":", "\n", "                ", "fm_high", "=", "self", ".", "gau", "[", "int", "(", "i", "-", "1", ")", "]", "(", "fm_high", ",", "fm_low", ")", "\n", "", "feats", ".", "append", "(", "fm_high", ")", "\n", "", "feats", ".", "reverse", "(", ")", "\n", "return", "tuple", "(", "feats", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fpn.FPN.__init__": [[13, 41], ["torch.nn.Module.__init__", "enumerate", "conv_block", "conv_block", "fpn.FPN.add_module", "fpn.FPN.add_module", "fpn.FPN.inner_blocks.append", "fpn.FPN.layer_blocks.append"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "in_channels_list", ",", "out_channels", ",", "conv_block", ",", "top_blocks", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            in_channels_list (list[int]): number of channels for each feature map that\n                will be fed\n            out_channels (int): number of channels of the FPN representation\n            top_blocks (nn.Module or None): if provided, an extra operation will\n                be performed on the output of the last (smallest resolution)\n                FPN output, and the result will extend the result list\n        \"\"\"", "\n", "super", "(", "FPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inner_blocks", "=", "[", "]", "\n", "self", ".", "layer_blocks", "=", "[", "]", "\n", "for", "idx", ",", "in_channels", "in", "enumerate", "(", "in_channels_list", ",", "1", ")", ":", "\n", "            ", "inner_block", "=", "\"fpn_inner{}\"", ".", "format", "(", "idx", ")", "\n", "layer_block", "=", "\"fpn_layer{}\"", ".", "format", "(", "idx", ")", "\n", "\n", "if", "in_channels", "==", "0", ":", "\n", "                ", "continue", "\n", "", "inner_block_module", "=", "conv_block", "(", "in_channels", ",", "out_channels", ",", "1", ")", "\n", "layer_block_module", "=", "conv_block", "(", "out_channels", ",", "out_channels", ",", "3", ",", "1", ")", "\n", "self", ".", "add_module", "(", "inner_block", ",", "inner_block_module", ")", "\n", "self", ".", "add_module", "(", "layer_block", ",", "layer_block_module", ")", "\n", "self", ".", "inner_blocks", ".", "append", "(", "inner_block", ")", "\n", "self", ".", "layer_blocks", ".", "append", "(", "layer_block", ")", "\n", "", "self", ".", "top_blocks", "=", "top_blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fpn.FPN.forward": [[42, 73], ["results.append", "zip", "isinstance", "tuple", "getattr", "torch.upsample", "results.insert", "fpn.FPN.top_blocks", "results.extend", "fpn.FPN.top_blocks", "results.extend", "getattr", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            x (list[Tensor]): feature maps for each feature level.\n        Returns:\n            results (tuple[Tensor]): feature maps after FPN layers.\n                They are ordered from highest resolution first.\n        \"\"\"", "\n", "last_inner", "=", "getattr", "(", "self", ",", "self", ".", "inner_blocks", "[", "-", "1", "]", ")", "(", "x", "[", "-", "1", "]", ")", "\n", "results", "=", "[", "]", "\n", "results", ".", "append", "(", "getattr", "(", "self", ",", "self", ".", "layer_blocks", "[", "-", "1", "]", ")", "(", "last_inner", ")", ")", "\n", "for", "feature", ",", "inner_block", ",", "layer_block", "in", "zip", "(", "\n", "x", "[", ":", "-", "1", "]", "[", ":", ":", "-", "1", "]", ",", "self", ".", "inner_blocks", "[", ":", "-", "1", "]", "[", ":", ":", "-", "1", "]", ",", "self", ".", "layer_blocks", "[", ":", "-", "1", "]", "[", ":", ":", "-", "1", "]", "\n", ")", ":", "\n", "            ", "if", "not", "inner_block", ":", "\n", "                ", "continue", "\n", "# inner_top_down = F.interpolate(last_inner, scale_factor=2, mode=\"nearest\")", "\n", "", "inner_lateral", "=", "getattr", "(", "self", ",", "inner_block", ")", "(", "feature", ")", "\n", "inner_top_down", "=", "F", ".", "upsample", "(", "last_inner", ",", "size", "=", "inner_lateral", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "last_inner", "=", "inner_lateral", "+", "inner_top_down", "\n", "results", ".", "insert", "(", "0", ",", "getattr", "(", "self", ",", "layer_block", ")", "(", "last_inner", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "top_blocks", ",", "LastLevelP6P7", ")", ":", "\n", "            ", "last_results", "=", "self", ".", "top_blocks", "(", "x", "[", "-", "1", "]", ",", "results", "[", "-", "1", "]", ")", "\n", "results", ".", "extend", "(", "last_results", ")", "\n", "", "else", ":", "\n", "            ", "last_results", "=", "self", ".", "top_blocks", "(", "results", "[", "-", "1", "]", ")", "\n", "results", ".", "extend", "(", "last_results", ")", "\n", "\n", "", "return", "tuple", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fpn.Scaler.__init__": [[76, 85], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "fpn.Scaler.layers.append", "conv_block"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "in_channels_list", ",", "out_channels", ",", "conv_block", ",", "top_blocks", "=", "None", ")", ":", "\n", "        ", "super", "(", "Scaler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "in_c", "in", "in_channels_list", ":", "\n", "            ", "if", "in_c", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "layers", ".", "append", "(", "conv_block", "(", "in_c", ",", "out_channels", ",", "3", ",", "1", ")", ")", "\n", "", "self", ".", "top_blocks", "=", "top_blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fpn.Scaler.forward": [[86, 99], ["zip", "isinstance", "tuple", "len", "len", "results.append", "fpn.Scaler.top_blocks", "results.extend", "isinstance", "layer", "fpn.Scaler.top_blocks", "results.extend"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "start_ind", "=", "len", "(", "x", ")", "-", "len", "(", "self", ".", "layers", ")", "\n", "for", "layer", ",", "feature", "in", "zip", "(", "self", ".", "layers", ",", "x", "[", "start_ind", ":", "]", ")", ":", "\n", "            ", "results", ".", "append", "(", "layer", "(", "feature", ")", ")", "\n", "", "if", "isinstance", "(", "self", ".", "top_blocks", ",", "LastLevelP6P7", ")", ":", "\n", "            ", "last_results", "=", "self", ".", "top_blocks", "(", "x", "[", "-", "1", "]", ",", "results", "[", "-", "1", "]", ")", "\n", "results", ".", "extend", "(", "last_results", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "top_blocks", ",", "LastLevelMaxPool", ")", ":", "\n", "            ", "last_results", "=", "self", ".", "top_blocks", "(", "results", "[", "-", "1", "]", ")", "\n", "results", ".", "extend", "(", "last_results", ")", "\n", "\n", "", "return", "tuple", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fpn.LastLevelMaxPool.forward": [[102, 104], ["torch.max_pool2d"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "[", "F", ".", "max_pool2d", "(", "x", ",", "1", ",", "2", ",", "0", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fpn.LastLevelP6P7.__init__": [[110, 118], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "last_stride", "=", "2", ")", ":", "\n", "        ", "super", "(", "LastLevelP6P7", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p6", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "p7", "=", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "last_stride", ",", "1", ")", "\n", "for", "module", "in", "[", "self", ".", "p6", ",", "self", ".", "p7", "]", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "module", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "", "self", ".", "use_P5", "=", "in_channels", "==", "out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fpn.LastLevelP6P7.forward": [[119, 124], ["fpn.LastLevelP6P7.p6", "fpn.LastLevelP6P7.p7", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "c5", ",", "p5", ")", ":", "\n", "        ", "x", "=", "p5", "if", "self", ".", "use_P5", "else", "c5", "\n", "p6", "=", "self", ".", "p6", "(", "x", ")", "\n", "p7", "=", "self", ".", "p7", "(", "F", ".", "relu", "(", "p6", ")", ")", "\n", "return", "[", "p6", ",", "p7", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fpn.LastLevelP6.__init__": [[130, 136], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "LastLevelP6", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p6", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "2", ",", "1", ")", "\n", "for", "module", "in", "[", "self", ".", "p6", "]", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "module", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fpn.LastLevelP6.forward": [[137, 140], ["fpn.LastLevelP6.p6"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "p5", ")", ":", "\n", "        ", "p6", "=", "self", ".", "p6", "(", "p5", ")", "\n", "return", "[", "p6", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet.ResNet.__init__": [[88, 142], ["torch.nn.Module.__init__", "stem_module", "resnet.ResNet._freeze_backbone", "resnet._make_stage", "resnet.ResNet.add_module", "resnet.ResNet.stages.append", "str", "int"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet.ResNet._freeze_backbone", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# If we want to use the cfg in forward(), then we should make a copy", "\n", "# of it and store it for later use:", "\n", "# self.cfg = cfg.clone()", "\n", "\n", "# Translate string names to implementations", "\n", "stem_module", "=", "_STEM_MODULES", "[", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STEM_FUNC", "]", "\n", "stage_specs", "=", "_STAGE_SPECS", "[", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "]", "\n", "transformation_module", "=", "_TRANSFORMATION_MODULES", "[", "cfg", ".", "MODEL", ".", "RESNETS", ".", "TRANS_FUNC", "]", "\n", "\n", "# Construct the stem module", "\n", "self", ".", "stem", "=", "stem_module", "(", "cfg", ")", "\n", "\n", "# Constuct the specified ResNet stages", "\n", "num_groups", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "NUM_GROUPS", "\n", "width_per_group", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "WIDTH_PER_GROUP", "\n", "in_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STEM_OUT_CHANNELS", "\n", "stage2_bottleneck_channels", "=", "num_groups", "*", "width_per_group", "\n", "stage2_out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", "\n", "self", ".", "stages", "=", "[", "]", "\n", "self", ".", "return_features", "=", "{", "}", "\n", "for", "stage_spec", "in", "stage_specs", ":", "\n", "            ", "name", "=", "\"layer\"", "+", "str", "(", "stage_spec", ".", "index", ")", "\n", "stage2_relative_factor", "=", "2", "**", "(", "stage_spec", ".", "index", "-", "1", ")", "\n", "bottleneck_channels", "=", "stage2_bottleneck_channels", "*", "stage2_relative_factor", "\n", "out_channels", "=", "stage2_out_channels", "*", "stage2_relative_factor", "\n", "stage_with_dcn", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STAGE_WITH_DCN", "[", "stage_spec", ".", "index", "-", "1", "]", "\n", "stage_with_context", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STAGE_WITH_CONTEXT", "[", "stage_spec", ".", "index", "-", "1", "]", "\n", "module", "=", "_make_stage", "(", "\n", "transformation_module", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "stage_spec", ".", "block_count", ",", "\n", "num_groups", ",", "\n", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STRIDE_IN_1X1", ",", "\n", "first_stride", "=", "int", "(", "stage_spec", ".", "index", ">", "1", ")", "+", "1", ",", "\n", "dcn_config", "=", "{", "\n", "\"stage_with_dcn\"", ":", "stage_with_dcn", ",", "\n", "\"stage_with_context\"", ":", "stage_with_context", ",", "\n", "\"max_dcn_layer\"", ":", "cfg", ".", "MODEL", ".", "RESNETS", ".", "MAX_DCN_LAYER", ",", "\n", "\"with_modulated_dcn\"", ":", "cfg", ".", "MODEL", ".", "RESNETS", ".", "WITH_MODULATED_DCN", ",", "\n", "\"deformable_groups\"", ":", "cfg", ".", "MODEL", ".", "RESNETS", ".", "DEFORMABLE_GROUPS", ",", "\n", "}", "\n", ")", "\n", "in_channels", "=", "out_channels", "\n", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "self", ".", "stages", ".", "append", "(", "name", ")", "\n", "self", ".", "return_features", "[", "name", "]", "=", "stage_spec", ".", "return_features", "\n", "\n", "# Optionally freeze (requires_grad=False) parts of the backbone", "\n", "", "self", ".", "_freeze_backbone", "(", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "FREEZE_CONV_BODY_AT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet.ResNet._freeze_backbone": [[143, 153], ["range", "getattr.parameters", "getattr", "str"], "methods", ["None"], ["", "def", "_freeze_backbone", "(", "self", ",", "freeze_at", ")", ":", "\n", "        ", "if", "freeze_at", "<", "0", ":", "\n", "            ", "return", "\n", "", "for", "stage_index", "in", "range", "(", "freeze_at", ")", ":", "\n", "            ", "if", "stage_index", "==", "0", ":", "\n", "                ", "m", "=", "self", ".", "stem", "# stage 0 is the stem", "\n", "", "else", ":", "\n", "                ", "m", "=", "getattr", "(", "self", ",", "\"layer\"", "+", "str", "(", "stage_index", ")", ")", "\n", "", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet.ResNet.forward": [[154, 162], ["resnet.ResNet.stem", "getattr", "outputs.append"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "for", "stage_name", "in", "self", ".", "stages", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "stage_name", ")", "(", "x", ")", "\n", "if", "self", ".", "return_features", "[", "stage_name", "]", ":", "\n", "                ", "outputs", ".", "append", "(", "x", ")", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet.ResNetHead.__init__": [[165, 209], ["torch.nn.Module.__init__", "resnet._make_stage", "resnet.ResNetHead.add_module", "resnet.ResNetHead.stages.append", "str", "int"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet._make_stage"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block_module", ",", "\n", "stages", ",", "\n", "num_groups", "=", "1", ",", "\n", "width_per_group", "=", "64", ",", "\n", "stride_in_1x1", "=", "True", ",", "\n", "stride_init", "=", "None", ",", "\n", "res2_out_channels", "=", "256", ",", "\n", "dilation", "=", "1", ",", "\n", "dcn_config", "=", "{", "}", "\n", ")", ":", "\n", "        ", "super", "(", "ResNetHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "stage2_relative_factor", "=", "2", "**", "(", "stages", "[", "0", "]", ".", "index", "-", "1", ")", "\n", "stage2_bottleneck_channels", "=", "num_groups", "*", "width_per_group", "\n", "out_channels", "=", "res2_out_channels", "*", "stage2_relative_factor", "\n", "in_channels", "=", "out_channels", "//", "2", "\n", "bottleneck_channels", "=", "stage2_bottleneck_channels", "*", "stage2_relative_factor", "\n", "\n", "block_module", "=", "_TRANSFORMATION_MODULES", "[", "block_module", "]", "\n", "\n", "self", ".", "stages", "=", "[", "]", "\n", "stride", "=", "stride_init", "\n", "for", "stage", "in", "stages", ":", "\n", "            ", "name", "=", "\"layer\"", "+", "str", "(", "stage", ".", "index", ")", "\n", "if", "not", "stride", ":", "\n", "                ", "stride", "=", "int", "(", "stage", ".", "index", ">", "1", ")", "+", "1", "\n", "", "module", "=", "_make_stage", "(", "\n", "block_module", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "stage", ".", "block_count", ",", "\n", "num_groups", ",", "\n", "stride_in_1x1", ",", "\n", "first_stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "dcn_config", "=", "dcn_config", "\n", ")", "\n", "stride", "=", "None", "\n", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "self", ".", "stages", ".", "append", "(", "name", ")", "\n", "", "self", ".", "out_channels", "=", "out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet.ResNetHead.forward": [[210, 214], ["getattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "stage", "in", "self", ".", "stages", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "stage", ")", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet.Bottleneck.__init__": [[255, 344], ["torch.nn.Module.__init__", "maskrcnn_benchmark.layers.Conv2d", "norm_func", "dcn_config.get", "dcn_config.get", "norm_func", "maskrcnn_benchmark.layers.Conv2d", "norm_func", "torch.nn.Sequential", "dcn_config.get", "dcn_config.get", "maskrcnn_benchmark.layers.DFConv2d", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.init.kaiming_uniform_", "maskrcnn_benchmark.layers.ContextBlock", "torch.nn.init.kaiming_uniform_", "maskrcnn_benchmark.layers.Conv2d", "norm_func", "modules.modules", "isinstance", "torch.nn.init.kaiming_uniform_"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.config.paths_catalog.ModelCatalog.get"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "num_groups", ",", "\n", "stride_in_1x1", ",", "\n", "stride", ",", "\n", "dilation", ",", "\n", "norm_func", ",", "\n", "dcn_config", "\n", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "downsample", "=", "None", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "down_stride", "=", "stride", "if", "dilation", "==", "1", "else", "1", "\n", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "down_stride", ",", "bias", "=", "False", "\n", ")", ",", "\n", "norm_func", "(", "out_channels", ")", ",", "\n", ")", "\n", "for", "modules", "in", "[", "self", ".", "downsample", ",", "]", ":", "\n", "                ", "for", "l", "in", "modules", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "l", ",", "Conv2d", ")", ":", "\n", "                        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "l", ".", "weight", ",", "a", "=", "1", ")", "\n", "\n", "", "", "", "", "if", "dilation", ">", "1", ":", "\n", "            ", "stride", "=", "1", "# reset to be 1", "\n", "\n", "# The original MSRA ResNet models have stride in the first 1x1 conv", "\n", "# The subsequent fb.torch.resnet and Caffe2 ResNe[X]t implementations have", "\n", "# stride in the 3x3 conv", "\n", "", "stride_1x1", ",", "stride_3x3", "=", "(", "stride", ",", "1", ")", "if", "stride_in_1x1", "else", "(", "1", ",", "stride", ")", "\n", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride_1x1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "norm_func", "(", "bottleneck_channels", ")", "\n", "# TODO: specify init for the above", "\n", "with_dcn", "=", "dcn_config", ".", "get", "(", "\"stage_with_dcn\"", ",", "False", ")", "\n", "with_context", "=", "dcn_config", ".", "get", "(", "\"stage_with_context\"", ",", "False", ")", "\n", "if", "with_dcn", ":", "\n", "            ", "deformable_groups", "=", "dcn_config", ".", "get", "(", "\"deformable_groups\"", ",", "1", ")", "\n", "with_modulated_dcn", "=", "dcn_config", ".", "get", "(", "\"with_modulated_dcn\"", ",", "False", ")", "\n", "self", ".", "conv2", "=", "DFConv2d", "(", "\n", "bottleneck_channels", ",", "\n", "bottleneck_channels", ",", "\n", "with_modulated_dcn", "=", "with_modulated_dcn", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride_3x3", ",", "\n", "groups", "=", "num_groups", ",", "\n", "dilation", "=", "dilation", ",", "\n", "deformable_groups", "=", "deformable_groups", ",", "\n", "bias", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2", "=", "Conv2d", "(", "\n", "bottleneck_channels", ",", "\n", "bottleneck_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride_3x3", ",", "\n", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "num_groups", ",", "\n", "dilation", "=", "dilation", "\n", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "conv2", ".", "weight", ",", "a", "=", "1", ")", "\n", "\n", "", "self", ".", "bn2", "=", "norm_func", "(", "bottleneck_channels", ")", "\n", "\n", "self", ".", "conv3", "=", "Conv2d", "(", "\n", "bottleneck_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn3", "=", "norm_func", "(", "out_channels", ")", "\n", "\n", "if", "with_context", ":", "\n", "            ", "self", ".", "context", "=", "ContextBlock", "(", "out_channels", ",", "1.", "/", "16.", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "context", "=", "None", "\n", "\n", "", "for", "l", "in", "[", "self", ".", "conv1", ",", "self", ".", "conv3", ",", "]", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "l", ".", "weight", ",", "a", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet.Bottleneck.forward": [[345, 369], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "torch.relu_", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "torch.relu_", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "torch.relu_", "resnet.Bottleneck.downsample", "resnet.Bottleneck.context"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "context", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "context", "(", "out", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet.BaseStem.__init__": [[372, 384], ["torch.nn.Module.__init__", "maskrcnn_benchmark.layers.Conv2d", "norm_func", "torch.nn.init.kaiming_uniform_"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "norm_func", ")", ":", "\n", "        ", "super", "(", "BaseStem", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STEM_OUT_CHANNELS", "\n", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "\n", "3", ",", "out_channels", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "norm_func", "(", "out_channels", ")", "\n", "\n", "for", "l", "in", "[", "self", ".", "conv1", ",", "]", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "l", ".", "weight", ",", "a", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet.BaseStem.forward": [[385, 391], ["resnet.BaseStem.conv1", "resnet.BaseStem.bn1", "torch.relu_", "torch.max_pool2d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu_", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet.BottleneckWithFixedBatchNorm.__init__": [[394, 415], ["resnet.Bottleneck.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "num_groups", "=", "1", ",", "\n", "stride_in_1x1", "=", "True", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "dcn_config", "=", "{", "}", "\n", ")", ":", "\n", "        ", "super", "(", "BottleneckWithFixedBatchNorm", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "bottleneck_channels", "=", "bottleneck_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "num_groups", "=", "num_groups", ",", "\n", "stride_in_1x1", "=", "stride_in_1x1", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "norm_func", "=", "FrozenBatchNorm2d", ",", "\n", "dcn_config", "=", "dcn_config", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet.StemWithFixedBatchNorm.__init__": [[419, 422], ["resnet.BaseStem.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "StemWithFixedBatchNorm", ",", "self", ")", ".", "__init__", "(", "\n", "cfg", ",", "norm_func", "=", "FrozenBatchNorm2d", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet.BottleneckWithGN.__init__": [[426, 447], ["resnet.Bottleneck.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "num_groups", "=", "1", ",", "\n", "stride_in_1x1", "=", "True", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "dcn_config", "=", "{", "}", "\n", ")", ":", "\n", "        ", "super", "(", "BottleneckWithGN", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "bottleneck_channels", "=", "bottleneck_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "num_groups", "=", "num_groups", ",", "\n", "stride_in_1x1", "=", "stride_in_1x1", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "norm_func", "=", "group_norm", ",", "\n", "dcn_config", "=", "dcn_config", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet.StemWithGN.__init__": [[451, 453], ["resnet.BaseStem.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "StemWithGN", ",", "self", ")", ".", "__init__", "(", "cfg", ",", "norm_func", "=", "group_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet._make_stage": [[216, 252], ["dcn_config.get", "range", "torch.nn.Sequential", "blocks.append", "transformation_module"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.config.paths_catalog.ModelCatalog.get"], ["", "", "def", "_make_stage", "(", "\n", "transformation_module", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "block_count", ",", "\n", "num_groups", ",", "\n", "stride_in_1x1", ",", "\n", "first_stride", ",", "\n", "dilation", "=", "1", ",", "\n", "dcn_config", "=", "{", "}", "\n", ")", ":", "\n", "    ", "blocks", "=", "[", "]", "\n", "stride", "=", "first_stride", "\n", "max_dcn_layer", "=", "dcn_config", ".", "get", "(", "\"max_dcn_layer\"", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "block_count", ")", ":", "\n", "        ", "if", "i", "<", "block_count", "-", "max_dcn_layer", ":", "\n", "            ", "block_dcn_config", "=", "{", "}", "\n", "", "else", ":", "\n", "#print('dcn at {}: {}'.format(i, block_dcn_config))", "\n", "            ", "block_dcn_config", "=", "dcn_config", "\n", "", "blocks", ".", "append", "(", "\n", "transformation_module", "(", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "num_groups", ",", "\n", "stride_in_1x1", ",", "\n", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "dcn_config", "=", "block_dcn_config", "\n", ")", "\n", ")", "\n", "stride", "=", "1", "\n", "in_channels", "=", "out_channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.Identity.__init__": [[196, 211], ["torch.Module.__init__", "fbnet_builder.ConvBNRelu"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "(", "\n", "ConvBNRelu", "(", "\n", "C_in", ",", "\n", "C_out", ",", "\n", "kernel", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "0", ",", "\n", "no_bias", "=", "1", ",", "\n", "use_relu", "=", "\"relu\"", ",", "\n", "bn_type", "=", "\"bn\"", ",", "\n", ")", "\n", "if", "C_in", "!=", "C_out", "or", "stride", "!=", "1", "\n", "else", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.Identity.forward": [[213, 219], ["fbnet_builder.Identity.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "conv", ":", "\n", "            ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "x", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.CascadeConv3x3.__init__": [[222, 233], ["torch.Sequential.__init__", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.BatchNorm2d", "torch.ReLU", "torch.ReLU", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ")", ":", "\n", "        ", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "ops", "=", "[", "\n", "Conv2d", "(", "C_in", ",", "C_in", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "C_in", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "Conv2d", "(", "C_in", ",", "C_out", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "C_out", ")", ",", "\n", "]", "\n", "super", "(", "CascadeConv3x3", ",", "self", ")", ".", "__init__", "(", "*", "ops", ")", "\n", "self", ".", "res_connect", "=", "(", "stride", "==", "1", ")", "and", "(", "C_in", "==", "C_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.CascadeConv3x3.forward": [[234, 239], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "super", "(", "CascadeConv3x3", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "res_connect", ":", "\n", "            ", "y", "+=", "x", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.Shift.__init__": [[242, 268], ["torch.Module.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "fbnet_builder.Shift.register_parameter", "torch.Parameter", "torch.Parameter", "range"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "kernel_size", ",", "stride", ",", "padding", ")", ":", "\n", "        ", "super", "(", "Shift", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C", "=", "C", "\n", "kernel", "=", "torch", ".", "zeros", "(", "(", "C", ",", "1", ",", "kernel_size", ",", "kernel_size", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "ch_idx", "=", "0", "\n", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "dilation", "=", "1", "\n", "\n", "hks", "=", "kernel_size", "//", "2", "\n", "ksq", "=", "kernel_size", "**", "2", "\n", "\n", "for", "i", "in", "range", "(", "kernel_size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "kernel_size", ")", ":", "\n", "                ", "if", "i", "==", "hks", "and", "j", "==", "hks", ":", "\n", "                    ", "num_ch", "=", "C", "//", "ksq", "+", "C", "%", "ksq", "\n", "", "else", ":", "\n", "                    ", "num_ch", "=", "C", "//", "ksq", "\n", "", "kernel", "[", "ch_idx", ":", "ch_idx", "+", "num_ch", ",", "0", ",", "i", ",", "j", "]", "=", "1", "\n", "ch_idx", "+=", "num_ch", "\n", "\n", "", "", "self", ".", "register_parameter", "(", "\"bias\"", ",", "None", ")", "\n", "self", ".", "kernel", "=", "nn", ".", "Parameter", "(", "kernel", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.Shift.forward": [[269, 293], ["maskrcnn_benchmark.layers.misc._NewEmptyTensorOp.apply", "x.numel", "torch.functional.conv2d", "torch.functional.conv2d", "zip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "return", "nn", ".", "functional", ".", "conv2d", "(", "\n", "x", ",", "\n", "self", ".", "kernel", ",", "\n", "self", ".", "bias", ",", "\n", "(", "self", ".", "stride", ",", "self", ".", "stride", ")", ",", "\n", "(", "self", ".", "padding", ",", "self", ".", "padding", ")", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "C", ",", "# groups", "\n", ")", "\n", "\n", "", "output_shape", "=", "[", "\n", "(", "i", "+", "2", "*", "p", "-", "(", "di", "*", "(", "k", "-", "1", ")", "+", "1", ")", ")", "//", "d", "+", "1", "\n", "for", "i", ",", "p", ",", "di", ",", "k", ",", "d", "in", "zip", "(", "\n", "x", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "(", "self", ".", "padding", ",", "self", ".", "dilation", ")", ",", "\n", "(", "self", ".", "dilation", ",", "self", ".", "dilation", ")", ",", "\n", "(", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ")", ",", "\n", "(", "self", ".", "stride", ",", "self", ".", "stride", ")", ",", "\n", ")", "\n", "]", "\n", "output_shape", "=", "[", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "C", "]", "+", "output_shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "x", ",", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.ShiftBlock5x5.__init__": [[296, 314], ["fbnet_builder._get_divisible_by", "torch.Sequential.__init__", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.BatchNorm2d", "torch.ReLU", "torch.ReLU", "fbnet_builder.Shift", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder._get_divisible_by", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "expansion", ",", "stride", ")", ":", "\n", "        ", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "res_connect", "=", "(", "stride", "==", "1", ")", "and", "(", "C_in", "==", "C_out", ")", "\n", "\n", "C_mid", "=", "_get_divisible_by", "(", "C_in", "*", "expansion", ",", "8", ",", "8", ")", "\n", "\n", "ops", "=", "[", "\n", "# pw", "\n", "Conv2d", "(", "C_in", ",", "C_mid", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "C_mid", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# shift", "\n", "Shift", "(", "C_mid", ",", "5", ",", "stride", ",", "2", ")", ",", "\n", "# pw-linear", "\n", "Conv2d", "(", "C_mid", ",", "C_out", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "C_out", ")", ",", "\n", "]", "\n", "super", "(", "ShiftBlock5x5", ",", "self", ")", ".", "__init__", "(", "*", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.ShiftBlock5x5.forward": [[315, 320], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "super", "(", "ShiftBlock5x5", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "res_connect", ":", "\n", "            ", "y", "+=", "x", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.ChannelShuffle.__init__": [[323, 326], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", ")", ":", "\n", "        ", "super", "(", "ChannelShuffle", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.ChannelShuffle.forward": [[327, 339], ["x.size", "x.view().permute().contiguous().view", "x.view().permute().contiguous", "x.view().permute", "x.view", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]\"\"\"", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "assert", "C", "%", "g", "==", "0", ",", "\"Incompatible group size {} for input channel {}\"", ".", "format", "(", "\n", "g", ",", "C", "\n", ")", "\n", "return", "(", "\n", "x", ".", "view", "(", "N", ",", "g", ",", "int", "(", "C", "/", "g", ")", ",", "H", ",", "W", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.ConvBNRelu.__init__": [[343, 395], ["torch.Sequential.__init__", "isinstance", "maskrcnn_benchmark.layers.Conv2d", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "fbnet_builder.ConvBNRelu.add_module", "torch.init.constant_", "torch.init.constant_", "maskrcnn_benchmark.layers.BatchNorm2d", "fbnet_builder.ConvBNRelu.add_module", "fbnet_builder.ConvBNRelu.add_module", "len", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "maskrcnn_benchmark.layers.FrozenBatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_depth", ",", "\n", "output_depth", ",", "\n", "kernel", ",", "\n", "stride", ",", "\n", "pad", ",", "\n", "no_bias", ",", "\n", "use_relu", ",", "\n", "bn_type", ",", "\n", "group", "=", "1", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "ConvBNRelu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "use_relu", "in", "[", "\"relu\"", ",", "None", "]", "\n", "if", "isinstance", "(", "bn_type", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "assert", "len", "(", "bn_type", ")", "==", "2", "\n", "assert", "bn_type", "[", "0", "]", "==", "\"gn\"", "\n", "gn_group", "=", "bn_type", "[", "1", "]", "\n", "bn_type", "=", "bn_type", "[", "0", "]", "\n", "", "assert", "bn_type", "in", "[", "\"bn\"", ",", "\"af\"", ",", "\"gn\"", ",", "None", "]", "\n", "assert", "stride", "in", "[", "1", ",", "2", ",", "4", "]", "\n", "\n", "op", "=", "Conv2d", "(", "\n", "input_depth", ",", "\n", "output_depth", ",", "\n", "kernel_size", "=", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "pad", ",", "\n", "bias", "=", "not", "no_bias", ",", "\n", "groups", "=", "group", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "op", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "if", "op", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "op", ".", "bias", ",", "0.0", ")", "\n", "", "self", ".", "add_module", "(", "\"conv\"", ",", "op", ")", "\n", "\n", "if", "bn_type", "==", "\"bn\"", ":", "\n", "            ", "bn_op", "=", "BatchNorm2d", "(", "output_depth", ")", "\n", "", "elif", "bn_type", "==", "\"gn\"", ":", "\n", "            ", "bn_op", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "gn_group", ",", "num_channels", "=", "output_depth", ")", "\n", "", "elif", "bn_type", "==", "\"af\"", ":", "\n", "            ", "bn_op", "=", "FrozenBatchNorm2d", "(", "output_depth", ")", "\n", "", "if", "bn_type", "is", "not", "None", ":", "\n", "            ", "self", ".", "add_module", "(", "\"bn\"", ",", "bn_op", ")", "\n", "\n", "", "if", "use_relu", "==", "\"relu\"", ":", "\n", "            ", "self", ".", "add_module", "(", "\"relu\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.SEModule.__init__": [[400, 408], ["torch.Module.__init__", "max", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "C", ")", ":", "\n", "        ", "super", "(", "SEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid", "=", "max", "(", "C", "//", "self", ".", "reduction", ",", "8", ")", "\n", "conv1", "=", "Conv2d", "(", "C", ",", "mid", ",", "1", ",", "1", ",", "0", ")", "\n", "conv2", "=", "Conv2d", "(", "mid", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "conv1", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "conv2", ",", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.SEModule.forward": [[410, 412], ["fbnet_builder.SEModule.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.Upsample.__init__": [[415, 420], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", ",", "mode", ",", "align_corners", "=", "None", ")", ":", "\n", "        ", "super", "(", "Upsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "scale_factor", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.Upsample.forward": [[421, 425], ["maskrcnn_benchmark.layers.interpolate"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "interpolate", "(", "\n", "x", ",", "scale_factor", "=", "self", ".", "scale", ",", "mode", "=", "self", ".", "mode", ",", "\n", "align_corners", "=", "self", ".", "align_corners", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.ShuffleV2Block.__init__": [[446, 516], ["torch.Module.__init__", "fbnet_builder.ConvBNRelu", "fbnet_builder._get_upsample_op", "fbnet_builder.ConvBNRelu", "fbnet_builder.ChannelShuffle", "int", "torch.Sequential", "torch.Sequential", "fbnet_builder.ConvBNRelu"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder._get_upsample_op"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_depth", ",", "\n", "output_depth", ",", "\n", "expansion", ",", "\n", "stride", ",", "\n", "bn_type", "=", "\"bn\"", ",", "\n", "kernel", "=", "3", ",", "\n", "width_divisor", "=", "1", ",", "\n", "shuffle_type", "=", "None", ",", "\n", "pw_group", "=", "1", ",", "\n", "se", "=", "False", ",", "\n", "cdw", "=", "False", ",", "\n", "dw_skip_bn", "=", "False", ",", "\n", "dw_skip_relu", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ShuffleV2Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "kernel", "in", "[", "1", ",", "3", ",", "5", ",", "7", "]", ",", "kernel", "\n", "assert", "input_depth", "==", "output_depth", "\n", "\n", "self", ".", "input_depth", "=", "input_depth", "//", "2", "\n", "self", ".", "output_depth", "=", "self", ".", "input_depth", "\n", "mid_depth", "=", "int", "(", "output_depth", "*", "expansion", ")", "//", "2", "\n", "\n", "# pw", "\n", "self", ".", "pw", "=", "ConvBNRelu", "(", "\n", "self", ".", "input_depth", ",", "\n", "mid_depth", ",", "\n", "kernel", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "no_bias", "=", "1", ",", "\n", "use_relu", "=", "\"relu\"", ",", "\n", "bn_type", "=", "bn_type", ",", "\n", "group", "=", "pw_group", ",", "\n", ")", "\n", "\n", "# negative stride to do upsampling", "\n", "self", ".", "upscale", ",", "stride", "=", "_get_upsample_op", "(", "stride", ")", "\n", "\n", "# dw", "\n", "if", "kernel", "==", "1", ":", "\n", "            ", "self", ".", "dw", "=", "nn", ".", "Sequential", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dw", "=", "ConvBNRelu", "(", "\n", "mid_depth", ",", "\n", "mid_depth", ",", "\n", "kernel", "=", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "(", "kernel", "//", "2", ")", ",", "\n", "group", "=", "mid_depth", ",", "\n", "no_bias", "=", "1", ",", "\n", "use_relu", "=", "\"relu\"", "if", "not", "dw_skip_relu", "else", "None", ",", "\n", "bn_type", "=", "bn_type", "if", "not", "dw_skip_bn", "else", "None", ",", "\n", ")", "\n", "# pw-linear", "\n", "", "self", ".", "pwl", "=", "ConvBNRelu", "(", "\n", "mid_depth", ",", "\n", "self", ".", "output_depth", ",", "\n", "kernel", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "no_bias", "=", "1", ",", "\n", "use_relu", "=", "None", ",", "\n", "bn_type", "=", "bn_type", ",", "\n", "group", "=", "pw_group", ",", "\n", ")", "\n", "\n", "self", ".", "shuffle", "=", "ChannelShuffle", "(", "pw_group", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.ShuffleV2Block.forward": [[517, 526], ["fbnet_builder.ShuffleV2Block.pw", "fbnet_builder.ShuffleV2Block.dw", "fbnet_builder.ShuffleV2Block.pwl", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fbnet_builder.ShuffleV2Block.shuffle"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "x", "[", ":", ",", ":", "self", ".", "input_depth", ",", ":", ",", ":", "]", "\n", "x2", "=", "x", "[", ":", ",", "self", ".", "input_depth", ":", ",", ":", ",", ":", "]", "\n", "y", "=", "self", ".", "pw", "(", "x1", ")", "\n", "y", "=", "self", ".", "dw", "(", "y", ")", "\n", "y", "=", "self", ".", "pwl", "(", "y", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "y", ",", "x2", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "shuffle", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.IRFBlock.__init__": [[529, 637], ["torch.Module.__init__", "int", "fbnet_builder._get_divisible_by", "fbnet_builder._get_upsample_op", "fbnet_builder.ConvBNRelu", "torch.Sequential", "torch.Sequential", "fbnet_builder.ConvBNRelu", "torch.Sequential", "torch.Sequential", "fbnet_builder.ChannelShuffle", "fbnet_builder.SEModule", "torch.Sequential", "torch.Sequential", "fbnet_builder.ConvBNRelu", "fbnet_builder.ConvBNRelu", "torch.Sequential", "torch.Sequential", "fbnet_builder.ConvBNRelu", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder._get_divisible_by", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder._get_upsample_op"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_depth", ",", "\n", "output_depth", ",", "\n", "expansion", ",", "\n", "stride", ",", "\n", "bn_type", "=", "\"bn\"", ",", "\n", "kernel", "=", "3", ",", "\n", "width_divisor", "=", "1", ",", "\n", "shuffle_type", "=", "None", ",", "\n", "pw_group", "=", "1", ",", "\n", "se", "=", "False", ",", "\n", "cdw", "=", "False", ",", "\n", "dw_skip_bn", "=", "False", ",", "\n", "dw_skip_relu", "=", "False", ",", "\n", "use_res_connect", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", "IRFBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "kernel", "in", "[", "1", ",", "3", ",", "5", ",", "7", "]", ",", "kernel", "\n", "\n", "self", ".", "use_res_connect", "=", "(", "stride", "==", "1", "\n", "and", "input_depth", "==", "output_depth", "\n", "and", "use_res_connect", ")", "\n", "self", ".", "output_depth", "=", "output_depth", "\n", "\n", "mid_depth", "=", "int", "(", "input_depth", "*", "expansion", ")", "\n", "mid_depth", "=", "_get_divisible_by", "(", "mid_depth", ",", "width_divisor", ",", "width_divisor", ")", "\n", "\n", "# pw", "\n", "if", "input_depth", "==", "mid_depth", ":", "\n", "            ", "self", ".", "pw", "=", "nn", ".", "Sequential", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pw", "=", "ConvBNRelu", "(", "\n", "input_depth", ",", "\n", "mid_depth", ",", "\n", "kernel", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "no_bias", "=", "1", ",", "\n", "use_relu", "=", "\"relu\"", ",", "\n", "bn_type", "=", "bn_type", ",", "\n", "group", "=", "pw_group", ",", "\n", ")", "\n", "\n", "# negative stride to do upsampling", "\n", "", "self", ".", "upscale", ",", "stride", "=", "_get_upsample_op", "(", "stride", ")", "\n", "\n", "# dw", "\n", "if", "kernel", "==", "1", ":", "\n", "            ", "self", ".", "dw", "=", "nn", ".", "Sequential", "(", ")", "\n", "", "elif", "cdw", ":", "\n", "            ", "dw1", "=", "ConvBNRelu", "(", "\n", "mid_depth", ",", "\n", "mid_depth", ",", "\n", "kernel", "=", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "(", "kernel", "//", "2", ")", ",", "\n", "group", "=", "mid_depth", ",", "\n", "no_bias", "=", "1", ",", "\n", "use_relu", "=", "\"relu\"", ",", "\n", "bn_type", "=", "bn_type", ",", "\n", ")", "\n", "dw2", "=", "ConvBNRelu", "(", "\n", "mid_depth", ",", "\n", "mid_depth", ",", "\n", "kernel", "=", "kernel", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "(", "kernel", "//", "2", ")", ",", "\n", "group", "=", "mid_depth", ",", "\n", "no_bias", "=", "1", ",", "\n", "use_relu", "=", "\"relu\"", "if", "not", "dw_skip_relu", "else", "None", ",", "\n", "bn_type", "=", "bn_type", "if", "not", "dw_skip_bn", "else", "None", ",", "\n", ")", "\n", "self", ".", "dw", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "\"dw1\"", ",", "dw1", ")", ",", "(", "\"dw2\"", ",", "dw2", ")", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dw", "=", "ConvBNRelu", "(", "\n", "mid_depth", ",", "\n", "mid_depth", ",", "\n", "kernel", "=", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "(", "kernel", "//", "2", ")", ",", "\n", "group", "=", "mid_depth", ",", "\n", "no_bias", "=", "1", ",", "\n", "use_relu", "=", "\"relu\"", "if", "not", "dw_skip_relu", "else", "None", ",", "\n", "bn_type", "=", "bn_type", "if", "not", "dw_skip_bn", "else", "None", ",", "\n", ")", "\n", "\n", "# pw-linear", "\n", "", "self", ".", "pwl", "=", "ConvBNRelu", "(", "\n", "mid_depth", ",", "\n", "output_depth", ",", "\n", "kernel", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "no_bias", "=", "1", ",", "\n", "use_relu", "=", "None", ",", "\n", "bn_type", "=", "bn_type", ",", "\n", "group", "=", "pw_group", ",", "\n", ")", "\n", "\n", "self", ".", "shuffle_type", "=", "shuffle_type", "\n", "if", "shuffle_type", "is", "not", "None", ":", "\n", "            ", "self", ".", "shuffle", "=", "ChannelShuffle", "(", "pw_group", ")", "\n", "\n", "", "self", ".", "se4", "=", "SEModule", "(", "output_depth", ")", "if", "se", "else", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "output_depth", "=", "output_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.IRFBlock.forward": [[638, 650], ["fbnet_builder.IRFBlock.pw", "fbnet_builder.IRFBlock.dw", "fbnet_builder.IRFBlock.pwl", "fbnet_builder.IRFBlock.se4", "fbnet_builder.IRFBlock.shuffle", "fbnet_builder.IRFBlock.upscale"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "pw", "(", "x", ")", "\n", "if", "self", ".", "shuffle_type", "==", "\"mid\"", ":", "\n", "            ", "y", "=", "self", ".", "shuffle", "(", "y", ")", "\n", "", "if", "self", ".", "upscale", "is", "not", "None", ":", "\n", "            ", "y", "=", "self", ".", "upscale", "(", "y", ")", "\n", "", "y", "=", "self", ".", "dw", "(", "y", ")", "\n", "y", "=", "self", ".", "pwl", "(", "y", ")", "\n", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "y", "+=", "x", "\n", "", "y", "=", "self", ".", "se4", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.FBNetBuilder.__init__": [[783, 797], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "width_ratio", ",", "\n", "bn_type", "=", "\"bn\"", ",", "\n", "width_divisor", "=", "1", ",", "\n", "dw_skip_bn", "=", "False", ",", "\n", "dw_skip_relu", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "width_ratio", "=", "width_ratio", "\n", "self", ".", "last_depth", "=", "-", "1", "\n", "self", ".", "bn_type", "=", "bn_type", "\n", "self", ".", "width_divisor", "=", "width_divisor", "\n", "self", ".", "dw_skip_bn", "=", "dw_skip_bn", "\n", "self", ".", "dw_skip_relu", "=", "dw_skip_relu", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.FBNetBuilder.add_first": [[798, 820], ["fbnet_builder.FBNetBuilder._get_divisible_width", "fbnet_builder.ConvBNRelu", "len", "int", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.FBNetBuilder._get_divisible_width", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "add_first", "(", "self", ",", "stage_info", ",", "dim_in", "=", "3", ",", "pad", "=", "True", ")", ":", "\n", "# stage_info: [c, s, kernel]", "\n", "        ", "assert", "len", "(", "stage_info", ")", ">=", "2", "\n", "channel", "=", "stage_info", "[", "0", "]", "\n", "stride", "=", "stage_info", "[", "1", "]", "\n", "out_depth", "=", "self", ".", "_get_divisible_width", "(", "int", "(", "channel", "*", "self", ".", "width_ratio", ")", ")", "\n", "kernel", "=", "3", "\n", "if", "len", "(", "stage_info", ")", ">", "2", ":", "\n", "            ", "kernel", "=", "stage_info", "[", "2", "]", "\n", "\n", "", "out", "=", "ConvBNRelu", "(", "\n", "dim_in", ",", "\n", "out_depth", ",", "\n", "kernel", "=", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "kernel", "//", "2", "if", "pad", "else", "0", ",", "\n", "no_bias", "=", "1", ",", "\n", "use_relu", "=", "\"relu\"", ",", "\n", "bn_type", "=", "self", ".", "bn_type", ",", "\n", ")", "\n", "self", ".", "last_depth", "=", "out_depth", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.FBNetBuilder.add_blocks": [[821, 842], ["collections.OrderedDict", "torch.Sequential", "torch.Sequential", "isinstance", "all", "fbnet_builder.FBNetBuilder.add_ir_block", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.FBNetBuilder.add_ir_block"], ["", "def", "add_blocks", "(", "self", ",", "blocks", ")", ":", "\n", "        ", "\"\"\" blocks: [{}, {}, ...]\n        \"\"\"", "\n", "assert", "isinstance", "(", "blocks", ",", "list", ")", "and", "all", "(", "\n", "isinstance", "(", "x", ",", "dict", ")", "for", "x", "in", "blocks", "\n", ")", ",", "blocks", "\n", "\n", "modules", "=", "OrderedDict", "(", ")", "\n", "for", "block", "in", "blocks", ":", "\n", "            ", "stage_idx", "=", "block", "[", "\"stage_idx\"", "]", "\n", "block_idx", "=", "block", "[", "\"block_idx\"", "]", "\n", "block_op_type", "=", "block", "[", "\"block_op_type\"", "]", "\n", "tcns", "=", "block", "[", "\"block\"", "]", "\n", "n", "=", "tcns", "[", "2", "]", "\n", "assert", "n", "==", "1", "\n", "nnblock", "=", "self", ".", "add_ir_block", "(", "tcns", ",", "[", "block_op_type", "]", ")", "\n", "nn_name", "=", "\"xif{}_{}\"", ".", "format", "(", "stage_idx", ",", "block_idx", ")", "\n", "assert", "nn_name", "not", "in", "modules", "\n", "modules", "[", "nn_name", "]", "=", "nnblock", "\n", "", "ret", "=", "nn", ".", "Sequential", "(", "modules", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.FBNetBuilder.add_last": [[843, 879], ["fbnet_builder.FBNetBuilder._get_divisible_width", "fbnet_builder.ConvBNRelu", "len", "torch.Sequential", "torch.Sequential", "int", "int", "torch.Sequential", "torch.Sequential", "int"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.FBNetBuilder._get_divisible_width", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "add_last", "(", "self", ",", "stage_info", ")", ":", "\n", "        ", "\"\"\" skip last layer if channel_scale == 0\n            use the same output channel if channel_scale < 0\n        \"\"\"", "\n", "assert", "len", "(", "stage_info", ")", "==", "2", "\n", "channels", "=", "stage_info", "[", "0", "]", "\n", "channel_scale", "=", "stage_info", "[", "1", "]", "\n", "\n", "if", "channel_scale", "==", "0.0", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "if", "channel_scale", ">", "0", ":", "\n", "            ", "last_channel", "=", "(", "\n", "int", "(", "channels", "*", "self", ".", "width_ratio", ")", "if", "self", ".", "width_ratio", ">", "1.0", "else", "channels", "\n", ")", "\n", "last_channel", "=", "int", "(", "last_channel", "*", "channel_scale", ")", "\n", "", "else", ":", "\n", "            ", "last_channel", "=", "int", "(", "self", ".", "last_depth", "*", "(", "-", "channel_scale", ")", ")", "\n", "", "last_channel", "=", "self", ".", "_get_divisible_width", "(", "last_channel", ")", "\n", "\n", "if", "last_channel", "==", "0", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "dim_in", "=", "self", ".", "last_depth", "\n", "ret", "=", "ConvBNRelu", "(", "\n", "dim_in", ",", "\n", "last_channel", ",", "\n", "kernel", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "no_bias", "=", "1", ",", "\n", "use_relu", "=", "\"relu\"", ",", "\n", "bn_type", "=", "self", ".", "bn_type", ",", "\n", ")", "\n", "self", ".", "last_depth", "=", "last_channel", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.FBNetBuilder._add_ir_block": [[884, 899], ["None"], "methods", ["None"], ["", "def", "_add_ir_block", "(", "\n", "self", ",", "dim_in", ",", "dim_out", ",", "stride", ",", "expand_ratio", ",", "block_op_type", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "ret", "=", "PRIMITIVES", "[", "block_op_type", "]", "(", "\n", "dim_in", ",", "\n", "dim_out", ",", "\n", "expansion", "=", "expand_ratio", ",", "\n", "stride", "=", "stride", ",", "\n", "bn_type", "=", "self", ".", "bn_type", ",", "\n", "width_divisor", "=", "self", ".", "width_divisor", ",", "\n", "dw_skip_bn", "=", "self", ".", "dw_skip_bn", ",", "\n", "dw_skip_relu", "=", "self", ".", "dw_skip_relu", ",", "\n", "**", "kwargs", "\n", ")", "\n", "return", "ret", ",", "ret", ".", "output_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.FBNetBuilder.add_ir_block": [[900, 915], ["fbnet_builder.FBNetBuilder._get_divisible_width", "fbnet_builder.FBNetBuilder._add_ir_block", "int"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.FBNetBuilder._get_divisible_width", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.FBNetBuilder._add_ir_block"], ["", "def", "add_ir_block", "(", "self", ",", "tcns", ",", "block_op_types", ",", "**", "kwargs", ")", ":", "\n", "        ", "t", ",", "c", ",", "n", ",", "s", "=", "tcns", "\n", "assert", "n", "==", "1", "\n", "out_depth", "=", "self", ".", "_get_divisible_width", "(", "int", "(", "c", "*", "self", ".", "width_ratio", ")", ")", "\n", "dim_in", "=", "self", ".", "last_depth", "\n", "op", ",", "ret_depth", "=", "self", ".", "_add_ir_block", "(", "\n", "dim_in", ",", "\n", "out_depth", ",", "\n", "stride", "=", "s", ",", "\n", "expand_ratio", "=", "t", ",", "\n", "block_op_type", "=", "block_op_types", "[", "0", "]", ",", "\n", "**", "kwargs", "\n", ")", "\n", "self", ".", "last_depth", "=", "ret_depth", "\n", "return", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.FBNetBuilder._get_divisible_width": [[916, 919], ["fbnet_builder._get_divisible_by", "int"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder._get_divisible_by"], ["", "def", "_get_divisible_width", "(", "self", ",", "width", ")", ":", "\n", "        ", "ret", "=", "_get_divisible_by", "(", "int", "(", "width", ")", ",", "self", ".", "width_divisor", ",", "self", ".", "width_divisor", ")", "\n", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder._py2_round": [[26, 28], ["math.floor", "math.ceil"], "function", ["None"], ["def", "_py2_round", "(", "x", ")", ":", "\n", "    ", "return", "math", ".", "floor", "(", "x", "+", "0.5", ")", "if", "x", ">=", "0.0", "else", "math", ".", "ceil", "(", "x", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder._get_divisible_by": [[30, 35], ["int", "int", "fbnet_builder._py2_round"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder._py2_round"], ["", "def", "_get_divisible_by", "(", "num", ",", "divisible_by", ",", "min_val", ")", ":", "\n", "    ", "ret", "=", "int", "(", "num", ")", "\n", "if", "divisible_by", ">", "0", "and", "num", "%", "divisible_by", "!=", "0", ":", "\n", "        ", "ret", "=", "int", "(", "(", "_py2_round", "(", "num", "/", "divisible_by", ")", "or", "min_val", ")", "*", "divisible_by", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder._get_upsample_op": [[428, 443], ["isinstance", "fbnet_builder.Upsample", "isinstance", "all", "isinstance"], "function", ["None"], ["", "", "def", "_get_upsample_op", "(", "stride", ")", ":", "\n", "    ", "assert", "(", "\n", "stride", "in", "[", "1", ",", "2", ",", "4", "]", "\n", "or", "stride", "in", "[", "-", "1", ",", "-", "2", ",", "-", "4", "]", "\n", "or", "(", "isinstance", "(", "stride", ",", "tuple", ")", "and", "all", "(", "x", "in", "[", "-", "1", ",", "-", "2", ",", "-", "4", "]", "for", "x", "in", "stride", ")", ")", "\n", ")", "\n", "\n", "scales", "=", "stride", "\n", "ret", "=", "None", "\n", "if", "isinstance", "(", "stride", ",", "tuple", ")", "or", "stride", "<", "0", ":", "\n", "        ", "scales", "=", "[", "-", "x", "for", "x", "in", "stride", "]", "if", "isinstance", "(", "stride", ",", "tuple", ")", "else", "-", "stride", "\n", "stride", "=", "1", "\n", "ret", "=", "Upsample", "(", "scale_factor", "=", "scales", ",", "mode", "=", "\"nearest\"", ",", "align_corners", "=", "None", ")", "\n", "\n", "", "return", "ret", ",", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder._expand_block_cfg": [[652, 661], ["isinstance", "range", "copy.deepcopy", "ret.append"], "function", ["None"], ["", "", "def", "_expand_block_cfg", "(", "block_cfg", ")", ":", "\n", "    ", "assert", "isinstance", "(", "block_cfg", ",", "list", ")", "\n", "ret", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "block_cfg", "[", "2", "]", ")", ":", "\n", "        ", "cur", "=", "copy", ".", "deepcopy", "(", "block_cfg", ")", "\n", "cur", "[", "2", "]", "=", "1", "\n", "cur", "[", "3", "]", "=", "1", "if", "idx", ">=", "1", "else", "cur", "[", "3", "]", "\n", "ret", ".", "append", "(", "cur", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.expand_stage_cfg": [[663, 670], ["isinstance", "fbnet_builder._expand_block_cfg"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder._expand_block_cfg"], ["", "def", "expand_stage_cfg", "(", "stage_cfg", ")", ":", "\n", "    ", "\"\"\" For a single stage \"\"\"", "\n", "assert", "isinstance", "(", "stage_cfg", ",", "list", ")", "\n", "ret", "=", "[", "]", "\n", "for", "x", "in", "stage_cfg", ":", "\n", "        ", "ret", "+=", "_expand_block_cfg", "(", "x", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.expand_stages_cfg": [[672, 679], ["isinstance", "ret.append", "fbnet_builder.expand_stage_cfg"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.expand_stage_cfg"], ["", "def", "expand_stages_cfg", "(", "stage_cfgs", ")", ":", "\n", "    ", "\"\"\" For a list of stages \"\"\"", "\n", "assert", "isinstance", "(", "stage_cfgs", ",", "list", ")", "\n", "ret", "=", "[", "]", "\n", "for", "x", "in", "stage_cfgs", ":", "\n", "        ", "ret", ".", "append", "(", "expand_stage_cfg", "(", "x", ")", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder._block_cfgs_to_list": [[681, 690], ["isinstance", "enumerate", "fbnet_builder.expand_stage_cfg", "enumerate", "ret.append"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.expand_stage_cfg"], ["", "def", "_block_cfgs_to_list", "(", "block_cfgs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "block_cfgs", ",", "list", ")", "\n", "ret", "=", "[", "]", "\n", "for", "stage_idx", ",", "stage", "in", "enumerate", "(", "block_cfgs", ")", ":", "\n", "        ", "stage", "=", "expand_stage_cfg", "(", "stage", ")", "\n", "for", "block_idx", ",", "block", "in", "enumerate", "(", "stage", ")", ":", "\n", "            ", "cur", "=", "{", "\"stage_idx\"", ":", "stage_idx", ",", "\"block_idx\"", ":", "block_idx", ",", "\"block\"", ":", "block", "}", "\n", "ret", ".", "append", "(", "cur", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder._add_to_arch": [[692, 728], ["enumerate", "isinstance", "all", "isinstance", "all", "enumerate", "isinstance", "isinstance"], "function", ["None"], ["", "def", "_add_to_arch", "(", "arch", ",", "info", ",", "name", ")", ":", "\n", "    ", "\"\"\" arch = [{block_0}, {block_1}, ...]\n        info = [\n            # stage 0\n            [\n                block0_info,\n                block1_info,\n                ...\n            ], ...\n        ]\n        convert to:\n        arch = [\n            {\n                block_0,\n                name: block0_info,\n            },\n            {\n                block_1,\n                name: block1_info,\n            }, ...\n        ]\n    \"\"\"", "\n", "assert", "isinstance", "(", "arch", ",", "list", ")", "and", "all", "(", "isinstance", "(", "x", ",", "dict", ")", "for", "x", "in", "arch", ")", "\n", "assert", "isinstance", "(", "info", ",", "list", ")", "and", "all", "(", "isinstance", "(", "x", ",", "list", ")", "for", "x", "in", "info", ")", "\n", "idx", "=", "0", "\n", "for", "stage_idx", ",", "stage", "in", "enumerate", "(", "info", ")", ":", "\n", "        ", "for", "block_idx", ",", "block", "in", "enumerate", "(", "stage", ")", ":", "\n", "            ", "assert", "(", "\n", "arch", "[", "idx", "]", "[", "\"stage_idx\"", "]", "==", "stage_idx", "\n", "and", "arch", "[", "idx", "]", "[", "\"block_idx\"", "]", "==", "block_idx", "\n", ")", ",", "\"Index ({}, {}) does not match for block {}\"", ".", "format", "(", "\n", "stage_idx", ",", "block_idx", ",", "arch", "[", "idx", "]", "\n", ")", "\n", "assert", "name", "not", "in", "arch", "[", "idx", "]", "\n", "arch", "[", "idx", "]", "[", "name", "]", "=", "block", "\n", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.unify_arch_def": [[730, 758], ["copy.deepcopy", "copy.deepcopy.update", "fbnet_builder._block_cfgs_to_list", "fbnet_builder._add_to_arch"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder._block_cfgs_to_list", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder._add_to_arch"], ["", "", "", "def", "unify_arch_def", "(", "arch_def", ")", ":", "\n", "    ", "\"\"\" unify the arch_def to:\n        {\n            ...,\n            \"arch\": [\n                {\n                    \"stage_idx\": idx,\n                    \"block_idx\": idx,\n                    ...\n                },\n                {}, ...\n            ]\n        }\n    \"\"\"", "\n", "ret", "=", "copy", ".", "deepcopy", "(", "arch_def", ")", "\n", "\n", "assert", "\"block_cfg\"", "in", "arch_def", "and", "\"stages\"", "in", "arch_def", "[", "\"block_cfg\"", "]", "\n", "assert", "\"stages\"", "not", "in", "ret", "\n", "# copy 'first', 'last' etc. inside arch_def['block_cfg'] to ret", "\n", "ret", ".", "update", "(", "{", "x", ":", "arch_def", "[", "\"block_cfg\"", "]", "[", "x", "]", "for", "x", "in", "arch_def", "[", "\"block_cfg\"", "]", "}", ")", "\n", "ret", "[", "\"stages\"", "]", "=", "_block_cfgs_to_list", "(", "arch_def", "[", "\"block_cfg\"", "]", "[", "\"stages\"", "]", ")", "\n", "del", "ret", "[", "\"block_cfg\"", "]", "\n", "\n", "assert", "\"block_op_type\"", "in", "arch_def", "\n", "_add_to_arch", "(", "ret", "[", "\"stages\"", "]", ",", "arch_def", "[", "\"block_op_type\"", "]", ",", "\"block_op_type\"", ")", "\n", "del", "ret", "[", "\"block_op_type\"", "]", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.get_num_stages": [[760, 766], ["max"], "function", ["None"], ["", "def", "get_num_stages", "(", "arch_def", ")", ":", "\n", "    ", "ret", "=", "0", "\n", "for", "x", "in", "arch_def", "[", "\"stages\"", "]", ":", "\n", "        ", "ret", "=", "max", "(", "x", "[", "\"stage_idx\"", "]", ",", "ret", ")", "\n", "", "ret", "=", "ret", "+", "1", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.get_blocks": [[768, 780], ["copy.deepcopy", "ret[].append"], "function", ["None"], ["", "def", "get_blocks", "(", "arch_def", ",", "stage_indices", "=", "None", ",", "block_indices", "=", "None", ")", ":", "\n", "    ", "ret", "=", "copy", ".", "deepcopy", "(", "arch_def", ")", "\n", "ret", "[", "\"stages\"", "]", "=", "[", "]", "\n", "for", "block", "in", "arch_def", "[", "\"stages\"", "]", ":", "\n", "        ", "keep", "=", "True", "\n", "if", "stage_indices", "not", "in", "(", "None", ",", "[", "]", ")", "and", "block", "[", "\"stage_idx\"", "]", "not", "in", "stage_indices", ":", "\n", "            ", "keep", "=", "False", "\n", "", "if", "block_indices", "not", "in", "(", "None", ",", "[", "]", ")", "and", "block", "[", "\"block_idx\"", "]", "not", "in", "block_indices", ":", "\n", "            ", "keep", "=", "False", "\n", "", "if", "keep", ":", "\n", "            ", "ret", "[", "\"stages\"", "]", ".", "append", "(", "block", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.hnasnet.Scaler.__init__": [[17, 36], ["torch.nn.Module.__init__", "hnas_common.conv1x1_bn", "torch.nn.Sequential", "hnas_common.conv3x3_bn", "torch.nn.Upsample", "hnas_common.conv1x1_bn"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "scale", ",", "inp", ",", "C", ",", "relu", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            scale (int) [-2, 2]: scale < 0 for downsample\n            inp (int): input channel\n            C (int): output channel\n            relu (bool): set to False if the modules are pre-relu\n        \"\"\"", "\n", "super", "(", "Scaler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "scale", "==", "0", ":", "\n", "            ", "self", ".", "scaler", "=", "conv1x1_bn", "(", "inp", ",", "C", ",", "1", ",", "relu", "=", "relu", ")", "\n", "", "if", "scale", "==", "1", ":", "\n", "            ", "self", ".", "scaler", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", ",", "\n", "conv1x1_bn", "(", "inp", ",", "C", ",", "1", ",", "relu", "=", "relu", ")", ")", "\n", "# official implementation used bilinear for all scalers", "\n", "", "if", "scale", "==", "-", "1", ":", "\n", "            ", "self", ".", "scaler", "=", "conv3x3_bn", "(", "inp", ",", "C", ",", "2", ",", "relu", "=", "relu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.hnasnet.Scaler.forward": [[37, 39], ["hnasnet.Scaler.scaler"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "hidden_state", ")", ":", "\n", "        ", "return", "self", ".", "scaler", "(", "hidden_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.hnasnet.DeepLabScaler.__init__": [[45, 49], ["torch.nn.Module.__init__", "hnas_common.conv1x1_bn"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "scale", ",", "inp", ",", "C", ")", ":", "\n", "        ", "super", "(", "DeepLabScaler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "2", "**", "scale", "\n", "self", ".", "conv", "=", "conv1x1_bn", "(", "inp", ",", "C", ",", "1", ",", "relu", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.hnasnet.DeepLabScaler.forward": [[50, 57], ["hnasnet.DeepLabScaler.conv", "torch.nn.functional.interpolate", "torch.nn.functional.relu"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate"], ["", "def", "forward", "(", "self", ",", "hidden_state", ")", ":", "\n", "        ", "if", "self", ".", "scale", "!=", "1", ":", "\n", "            ", "hidden_state", "=", "F", ".", "interpolate", "(", "hidden_state", ",", "\n", "scale_factor", "=", "self", ".", "scale", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "", "return", "self", ".", "conv", "(", "F", ".", "relu", "(", "hidden_state", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.hnasnet.HNASNet.__init__": [[60, 107], ["torch.nn.Module.__init__", "print", "torch.load", "len", "torch.nn.Sequential", "hnas_common.conv3x3_bn", "torch.nn.ModuleList", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "enumerate", "hnas_common.conv3x3_bn", "hnas_common.conv3x3_bn", "hnasnet.HNASNet.bases.append", "zip", "hnasnet.HNASNet.cells.append", "hnasnet.Scaler", "hnasnet.Scaler", "hnasnet.HNASNet.scalers.append", "hnasnet.HNASNet.scalers.append", "hnas_common.conv3x3_bn", "maskrcnn_benchmark.nas.cell.FixCell"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "HNASNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# load genotype", "\n", "geno_file", "=", "cfg", ".", "MODEL", ".", "HNASNET", ".", "GENOTYPE", "\n", "print", "(", "\"Loading genotype from {}\"", ".", "format", "(", "geno_file", ")", ")", "\n", "geno_cell", ",", "geno_path", "=", "torch", ".", "load", "(", "geno_file", ")", "\n", "self", ".", "geno_path", "=", "geno_path", "\n", "\n", "# basic configs", "\n", "self", ".", "f", "=", "cfg", ".", "MODEL", ".", "HNASNET", ".", "FILTER_MULTIPLIER", "\n", "self", ".", "num_layers", "=", "cfg", ".", "MODEL", ".", "HNASNET", ".", "NUM_LAYERS", "\n", "self", ".", "num_blocks", "=", "cfg", ".", "MODEL", ".", "HNASNET", ".", "NUM_BLOCKS", "\n", "BxF", "=", "self", ".", "f", "*", "self", ".", "num_blocks", "\n", "stride_mults", "=", "cfg", ".", "MODEL", ".", "HNASNET", ".", "STRIDE_MULTIPLIER", "\n", "self", ".", "num_strides", "=", "len", "(", "stride_mults", ")", "\n", "\n", "self", ".", "stem1", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3_bn", "(", "3", ",", "64", ",", "2", ")", ",", "\n", "conv3x3_bn", "(", "64", ",", "64", ",", "1", ")", ")", "\n", "self", ".", "stem2", "=", "conv3x3_bn", "(", "64", ",", "BxF", ",", "2", ")", "\n", "\n", "# feature pyramids", "\n", "self", ".", "bases", "=", "nn", ".", "ModuleList", "(", ")", "\n", "in_channels", "=", "64", "\n", "for", "s", "in", "range", "(", "self", ".", "num_strides", ")", ":", "\n", "            ", "out_channels", "=", "BxF", "*", "stride_mults", "[", "s", "]", "\n", "self", ".", "bases", ".", "append", "(", "conv3x3_bn", "(", "in_channels", ",", "out_channels", ",", "2", ")", ")", "\n", "in_channels", "=", "out_channels", "\n", "\n", "# create cells", "\n", "", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "scalers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "cfg", ".", "MODEL", ".", "HNASNET", ".", "TIE_CELL", ":", "\n", "            ", "geno_cell", "=", "[", "geno_cell", "]", "*", "self", ".", "num_layers", "\n", "\n", "", "h_0", "=", "0", "# prev prev hidden index", "\n", "for", "layer", ",", "(", "geno", ",", "h", ")", "in", "enumerate", "(", "zip", "(", "geno_cell", ",", "geno_path", ")", ",", "1", ")", ":", "\n", "            ", "stride", "=", "stride_mults", "[", "h", "]", "\n", "self", ".", "cells", ".", "append", "(", "FixCell", "(", "geno", ",", "self", ".", "f", "*", "stride", ")", ")", "\n", "# scalers", "\n", "inp0", "=", "BxF", "*", "stride_mults", "[", "h_0", "]", "\n", "scaler0", "=", "Scaler", "(", "h_0", "-", "h", ",", "inp0", ",", "stride", "*", "self", ".", "f", ",", "relu", "=", "False", ")", "\n", "scaler1", "=", "Scaler", "(", "0", ",", "BxF", "*", "stride", ",", "stride", "*", "self", ".", "f", ",", "relu", "=", "False", ")", "\n", "h_0", "=", "h", "\n", "self", ".", "scalers", ".", "append", "(", "scaler0", ")", "\n", "self", ".", "scalers", ".", "append", "(", "scaler1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.hnasnet.HNASNet.forward": [[108, 131], ["hnasnet.HNASNet.stem1", "hnasnet.HNASNet.stem2", "enumerate", "base", "fps.append", "zip", "cell", "cell"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "drop_prob", "=", "-", "1", ")", ":", "\n", "        ", "h1", "=", "self", ".", "stem1", "(", "x", ")", "\n", "h0", "=", "self", ".", "stem2", "(", "h1", ")", "\n", "\n", "# get feature pyramids", "\n", "fps", "=", "[", "]", "\n", "for", "base", "in", "self", ".", "bases", ":", "\n", "            ", "h1", "=", "base", "(", "h1", ")", "\n", "fps", ".", "append", "(", "h1", ")", "\n", "\n", "", "s_1", "=", "0", "\n", "for", "i", ",", "(", "cell", ",", "s", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "cells", ",", "self", ".", "geno_path", ")", ")", ":", "\n", "            ", "input_0", "=", "self", ".", "scalers", "[", "i", "*", "2", "]", "(", "h0", ")", "\n", "input_1", "=", "self", ".", "scalers", "[", "i", "*", "2", "+", "1", "]", "(", "fps", "[", "s", "]", ")", "\n", "# update feature pyramid at s_{-1}", "\n", "fps", "[", "s_1", "]", "=", "h0", "\n", "if", "s", "==", "s_1", ":", "\n", "                ", "h0", "=", "cell", "(", "input_0", ",", "input_1", ",", "drop_prob", ")", "+", "h0", "\n", "", "else", ":", "\n", "                ", "h0", "=", "cell", "(", "input_0", ",", "input_1", ",", "drop_prob", ")", "+", "fps", "[", "s", "]", "\n", "", "s_1", "=", "s", "\n", "", "fps", "[", "s_1", "]", "=", "h0", "\n", "return", "fps", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_layers.BasicBlock.__init__": [[74, 83], ["torch.nn.Module.__init__", "resnet_layers.conv3x3", "resnet_layers.batchnorm", "torch.nn.ReLU", "resnet_layers.conv3x3", "resnet_layers.batchnorm"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_layers.conv3x3", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_layers.batchnorm", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_layers.conv3x3", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_layers.batchnorm"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "batchnorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "batchnorm", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_layers.BasicBlock.forward": [[84, 101], ["resnet_layers.BasicBlock.conv1", "resnet_layers.BasicBlock.bn1", "resnet_layers.BasicBlock.relu", "resnet_layers.BasicBlock.conv2", "resnet_layers.BasicBlock.bn2", "resnet_layers.BasicBlock.relu", "resnet_layers.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_layers.Bottleneck.__init__": [[116, 127], ["torch.nn.Module.__init__", "resnet_layers.conv1x1", "resnet_layers.batchnorm", "resnet_layers.conv3x3", "resnet_layers.batchnorm", "resnet_layers.conv1x1", "resnet_layers.batchnorm", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_layers.conv1x1", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_layers.batchnorm", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_layers.conv3x3", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_layers.batchnorm", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_layers.conv1x1", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_layers.batchnorm"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "batchnorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn2", "=", "batchnorm", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "4", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "batchnorm", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_layers.Bottleneck.forward": [[128, 149], ["resnet_layers.Bottleneck.conv1", "resnet_layers.Bottleneck.bn1", "resnet_layers.Bottleneck.relu", "resnet_layers.Bottleneck.conv2", "resnet_layers.Bottleneck.bn2", "resnet_layers.Bottleneck.relu", "resnet_layers.Bottleneck.conv3", "resnet_layers.Bottleneck.bn3", "resnet_layers.Bottleneck.relu", "resnet_layers.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_layers.batchnorm": [[4, 15], ["torch.nn.BatchNorm2d"], "function", ["None"], ["def", "batchnorm", "(", "in_planes", ",", "affine", "=", "True", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"2D Batch Normalisation.\n    Args:\n      in_planes (int): number of input channels.\n      affine (bool): whether to add learnable affine parameters.\n      eps (float): stability constant in the denominator.\n      momentum (float): running average decay coefficient.\n    Returns:\n      `nn.BatchNorm2d' instance.\n    \"\"\"", "\n", "return", "nn", ".", "BatchNorm2d", "(", "in_planes", ",", "affine", "=", "affine", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_layers.conv3x3": [[17, 38], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "    ", "\"\"\"2D 3x3 convolution.\n    Args:\n      in_planes (int): number of input channels.\n      out_planes (int): number of output channels.\n      stride (int): stride of the operation.\n      dilation (int): dilation rate of the operation.\n      groups (int): number of groups in the operation.\n      bias (bool): whether to add learnable bias parameter.\n    Returns:\n      `nn.Conv2d' instance.\n    \"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_layers.conv1x1": [[40, 59], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "    ", "\"\"\"2D 1x1 convolution.\n    Args:\n      in_planes (int): number of input channels.\n      out_planes (int): number of output channels.\n      stride (int): stride of the operation.\n      groups (int): number of groups in the operation.\n      bias (bool): whether to add learnable bias parameter.\n    Returns:\n      `nn.Conv2d' instance.\n    \"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_bn.ResNet.__init__": [[52, 68], ["torch.Module.__init__", "resnet_bn.make_list", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "resnet_bn.ResNet._make_layer", "resnet_bn.ResNet._make_layer", "resnet_bn.ResNet._make_layer", "resnet_bn.ResNet._make_layer", "enumerate"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_bn.make_list", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_bn.ResNet._make_layer", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_bn.ResNet._make_layer", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_bn.ResNet._make_layer", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_bn.ResNet._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "return_idx", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_out_c", "=", "[", "]", "\n", "self", ".", "return_idx", "=", "make_list", "(", "return_idx", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "momentum", "=", "0.95", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "_out_c", "=", "[", "\n", "out_c", "for", "idx", ",", "out_c", "in", "enumerate", "(", "self", ".", "_out_c", ")", "if", "idx", "in", "return_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_bn.ResNet._make_layer": [[69, 94], ["layers.append", "range", "resnet_bn.ResNet._out_c.append", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "\"\"\"Create residual layer.\n        Args:\n            block (nn.Module): type of building block (Basic or Bottleneck).\n            planes (int): number of input channels.\n            blocks (int): number of blocks.\n            stride (int): stride inside the first block.\n        Returns:\n            `nn.Sequential' instance of all created layers.\n        \"\"\"", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "", "self", ".", "_out_c", ".", "append", "(", "self", ".", "inplanes", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_bn.ResNet.forward": [[95, 106], ["resnet_bn.ResNet.conv1", "resnet_bn.ResNet.bn1", "resnet_bn.ResNet.relu", "resnet_bn.ResNet.maxpool", "outs.append", "outs.append", "outs.append", "outs.append", "resnet_bn.ResNet.layer1", "resnet_bn.ResNet.layer2", "resnet_bn.ResNet.layer3", "resnet_bn.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "# 1/2", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "# 1/4", "\n", "outs", "=", "[", "]", "\n", "outs", ".", "append", "(", "self", ".", "layer1", "(", "x", ")", ")", "# 1/4", "\n", "outs", ".", "append", "(", "self", ".", "layer2", "(", "outs", "[", "-", "1", "]", ")", ")", "# 1/8", "\n", "outs", ".", "append", "(", "self", ".", "layer3", "(", "outs", "[", "-", "1", "]", ")", ")", "# 1/16", "\n", "outs", ".", "append", "(", "self", ".", "layer4", "(", "outs", "[", "-", "1", "]", ")", ")", "# 1/32", "\n", "return", "[", "outs", "[", "idx", "]", "for", "idx", "in", "self", ".", "return_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_bn.make_list": [[31, 39], ["isinstance", "isinstance", "list"], "function", ["None"], ["def", "make_list", "(", "x", ")", ":", "\n", "    ", "\"\"\"Returns the given input as a list.\"\"\"", "\n", "if", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "        ", "return", "x", "\n", "", "elif", "isinstance", "(", "x", ",", "tuple", ")", ":", "\n", "        ", "return", "list", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "return", "[", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_bn.resnet18": [[107, 118], ["resnet_bn.ResNet", "ResNet.load_state_dict", "maskrcnn_benchmark.utils.model_zoo.cache_url"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.OptimizerDict.load_state_dict", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.model_zoo.cache_url"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs the ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet.\n    Returns:\n        `nn.Module' instance.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "cache_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_bn.resnet34": [[119, 130], ["resnet_bn.ResNet", "ResNet.load_state_dict", "maskrcnn_benchmark.utils.model_zoo.cache_url"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.OptimizerDict.load_state_dict", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.model_zoo.cache_url"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs the ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet.\n    Returns:\n        `nn.Module' instance.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "cache_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_bn.resnet50": [[131, 142], ["resnet_bn.ResNet", "ResNet.load_state_dict", "maskrcnn_benchmark.utils.model_zoo.cache_url"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.OptimizerDict.load_state_dict", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.model_zoo.cache_url"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs the ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet.\n    Returns:\n        `nn.Module' instance.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "cache_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_bn.resnet101": [[143, 154], ["resnet_bn.ResNet", "ResNet.load_state_dict", "maskrcnn_benchmark.utils.model_zoo.cache_url"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.OptimizerDict.load_state_dict", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.model_zoo.cache_url"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs the ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet.\n    Returns:\n        `nn.Module' instance.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "cache_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_bn.resnet152": [[155, 166], ["resnet_bn.ResNet", "ResNet.load_state_dict", "maskrcnn_benchmark.utils.model_zoo.cache_url"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.OptimizerDict.load_state_dict", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.model_zoo.cache_url"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs the ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet.\n    Returns:\n        `nn.Module' instance.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "cache_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.necks.BFP.__init__": [[105, 147], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform.", "maskrcnn_benchmark.layers.ContextBlock"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.conv_with_kaiming_uniform"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "num_levels", ",", "\n", "refine_level", "=", "1", ",", "\n", "refine_type", "=", "None", ",", "\n", "use_gn", "=", "False", ",", "\n", "use_deformable", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            in_channels (int): Number of input channels (feature maps of all levels\n                should have the same channels).\n            num_levels (int): Number of input feature levels.\n            refine_level (int): Index of integration and refine level of BSF in\n                multi-level features from bottom to top.\n            refine_type (str): Type of the refine op, currently support\n                [None, 'conv', 'non_local'].\n        \"\"\"", "\n", "super", "(", "BFP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "refine_type", "in", "[", "None", ",", "'conv'", ",", "'non_local'", ",", "'gc_block'", "]", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_levels", "=", "num_levels", "\n", "\n", "self", ".", "refine_level", "=", "refine_level", "\n", "self", ".", "refine_type", "=", "refine_type", "\n", "assert", "0", "<=", "self", ".", "refine_level", "<", "self", ".", "num_levels", "\n", "\n", "if", "self", ".", "refine_type", "==", "'conv'", ":", "\n", "            ", "conv_block", "=", "conv_with_kaiming_uniform", "(", "\n", "use_gn", "=", "use_gn", ",", "\n", "use_deformable", "=", "use_deformable", ")", "\n", "self", ".", "refine", "=", "conv_block", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "in_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "", "elif", "self", ".", "refine_type", "==", "'gc_block'", ":", "\n", "            ", "self", ".", "refine", "=", "ContextBlock", "(", "\n", "self", ".", "in_channels", ",", "\n", "ratio", "=", "1.", "/", "16.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.necks.BFP.forward": [[148, 180], ["range", "range", "tuple", "len", "inputs[].size", "feats.append", "sum", "len", "necks.BFP.refine", "outs.append", "torch.nn.functional.adaptive_max_pool2d", "torch.nn.functional.interpolate", "inputs[].size", "torch.nn.functional.interpolate", "torch.nn.functional.adaptive_max_pool2d"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "assert", "len", "(", "inputs", ")", "==", "self", ".", "num_levels", "\n", "\n", "# step 1: gather multi-level features by resize and average", "\n", "feats", "=", "[", "]", "\n", "gather_size", "=", "inputs", "[", "self", ".", "refine_level", "]", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "if", "i", "<", "self", ".", "refine_level", ":", "\n", "                ", "gathered", "=", "F", ".", "adaptive_max_pool2d", "(", "\n", "inputs", "[", "i", "]", ",", "output_size", "=", "gather_size", ")", "\n", "", "else", ":", "\n", "                ", "gathered", "=", "F", ".", "interpolate", "(", "\n", "inputs", "[", "i", "]", ",", "size", "=", "gather_size", ",", "mode", "=", "'nearest'", ")", "\n", "", "feats", ".", "append", "(", "gathered", ")", "\n", "\n", "", "bsf", "=", "sum", "(", "feats", ")", "/", "len", "(", "feats", ")", "\n", "\n", "# step 2: refine gathered features", "\n", "if", "self", ".", "refine_type", "is", "not", "None", ":", "\n", "            ", "bsf", "=", "self", ".", "refine", "(", "bsf", ")", "\n", "\n", "# step 3: scatter refined features to multi-levels by a residual path", "\n", "", "outs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "out_size", "=", "inputs", "[", "i", "]", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "if", "i", "<", "self", ".", "refine_level", ":", "\n", "                ", "residual", "=", "F", ".", "interpolate", "(", "bsf", ",", "size", "=", "out_size", ",", "mode", "=", "'nearest'", ")", "\n", "", "else", ":", "\n", "                ", "residual", "=", "F", ".", "adaptive_max_pool2d", "(", "bsf", ",", "output_size", "=", "out_size", ")", "\n", "", "outs", ".", "append", "(", "residual", "+", "inputs", "[", "i", "]", ")", "\n", "\n", "", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.necks.build_empty_neck": [[11, 14], ["maskrcnn_benchmark.modeling.registry.NECKS.register", "torch.nn.Sequential"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register"], ["@", "registry", ".", "NECKS", ".", "register", "(", "\"none\"", ")", "\n", "def", "build_empty_neck", "(", "cfg", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.necks.build_libra_neck": [[16, 30], ["maskrcnn_benchmark.modeling.registry.NECKS.register", "necks.BFP"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register"], ["", "@", "registry", ".", "NECKS", ".", "register", "(", "\"libra\"", ")", "\n", "def", "build_libra_neck", "(", "cfg", ")", ":", "\n", "    ", "in_channels", "=", "cfg", ".", "MODEL", ".", "NECK", ".", "IN_CHANNELS", "\n", "num_levels", "=", "cfg", ".", "MODEL", ".", "NECK", ".", "NUM_LEVELS", "\n", "refine_level", "=", "cfg", ".", "MODEL", ".", "NECK", ".", "REFINE_LEVEL", "\n", "refine_type", "=", "cfg", ".", "MODEL", ".", "NECK", ".", "REFINE_TYPE", "\n", "use_gn", "=", "cfg", ".", "MODEL", ".", "NECK", ".", "USE_GN", "\n", "use_deformable", "=", "cfg", ".", "MODEL", ".", "NECK", ".", "USE_DEFORMABLE", "\n", "return", "BFP", "(", "in_channels", ",", "\n", "num_levels", ",", "\n", "refine_level", "=", "refine_level", ",", "\n", "refine_type", "=", "refine_type", ",", "\n", "use_gn", "=", "use_gn", ",", "\n", "use_deformable", "=", "use_deformable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.necks.build_retina_neck": [[64, 93], ["maskrcnn_benchmark.modeling.registry.NECKS.register", "fpn.FPN", "fpn.LastLevelP6P7", "fpn.LastLevelP6", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.conv_with_kaiming_uniform"], ["", "@", "registry", ".", "NECKS", ".", "register", "(", "\"fpn-align\"", ")", "\n", "def", "build_retina_neck", "(", "cfg", ")", ":", "\n", "    ", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "BACKBONE_OUT_CHANNELS", "\n", "in_channels_stage2", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", "\n", "in_channels_p6p7", "=", "in_channels_stage2", "*", "8", "if", "cfg", ".", "MODEL", ".", "RETINANET", ".", "USE_C5", "else", "out_channels", "\n", "last_stride", "=", "cfg", ".", "MODEL", ".", "NECK", ".", "LAST_STRIDE", "\n", "num_levels", "=", "cfg", ".", "MODEL", ".", "NECK", ".", "NUM_LEVELS", "\n", "if", "num_levels", "==", "5", ":", "\n", "        ", "top_blocks", "=", "fpn_module", ".", "LastLevelP6P7", "(", "in_channels_p6p7", ",", "\n", "out_channels", ",", "\n", "last_stride", ")", "\n", "", "else", ":", "\n", "        ", "top_blocks", "=", "fpn_module", ".", "LastLevelP6", "(", "in_channels_p6p7", ",", "\n", "out_channels", ")", "\n", "\n", "", "return", "fpn_module", ".", "FPN", "(", "\n", "in_channels_list", "=", "[", "\n", "in_channels_stage2", ",", "\n", "in_channels_stage2", "*", "2", ",", "\n", "in_channels_stage2", "*", "4", ",", "\n", "in_channels_stage2", "*", "8", ",", "\n", "]", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "conv_block", "=", "conv_with_kaiming_uniform", "(", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_GN", ",", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_RELU", ",", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_DEFORMABLE", "\n", ")", ",", "\n", "top_blocks", "=", "top_blocks", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.necks.build_neck": [[182, 187], ["None"], "function", ["None"], ["", "", "def", "build_neck", "(", "cfg", ")", ":", "\n", "    ", "assert", "cfg", ".", "MODEL", ".", "NECK", ".", "CONV_BODY", "in", "registry", ".", "NECKS", ",", "\"cfg.MODEL.NECK.CONV_BODY: {} is not registered in registry\"", ".", "format", "(", "\n", "cfg", ".", "MODEL", ".", "NECK", ".", "CONV_BODY", ")", "\n", "return", "registry", ".", "NECKS", "[", "cfg", ".", "MODEL", ".", "NECK", ".", "CONV_BODY", "]", "(", "cfg", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet.FBNetTrunk.__init__": [[80, 87], ["torch.Module.__init__", "builder.add_first", "fbnet._get_trunk_cfg", "builder.add_blocks"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.FBNetBuilder.add_first", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet._get_trunk_cfg", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.FBNetBuilder.add_blocks"], ["    ", "def", "__init__", "(", "\n", "self", ",", "builder", ",", "arch_def", ",", "dim_in", ",", "\n", ")", ":", "\n", "        ", "super", "(", "FBNetTrunk", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "first", "=", "builder", ".", "add_first", "(", "arch_def", "[", "\"first\"", "]", ",", "dim_in", "=", "dim_in", ")", "\n", "trunk_cfg", "=", "_get_trunk_cfg", "(", "arch_def", ")", "\n", "self", ".", "stages", "=", "builder", ".", "add_blocks", "(", "trunk_cfg", "[", "\"stages\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet.FBNetTrunk.forward": [[89, 94], ["fbnet.FBNetTrunk.first", "fbnet.FBNetTrunk.stages"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "first", "(", "x", ")", "\n", "y", "=", "self", ".", "stages", "(", "y", ")", "\n", "ret", "=", "[", "y", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet.FBNetRPNHead.__init__": [[122, 137], ["torch.Module.__init__", "fbnet._get_rpn_stage", "builder.add_blocks", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet._get_rpn_stage", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.FBNetBuilder.add_blocks", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["    ", "def", "__init__", "(", "\n", "self", ",", "cfg", ",", "in_channels", ",", "builder", ",", "arch_def", ",", "\n", ")", ":", "\n", "        ", "super", "(", "FBNetRPNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "in_channels", "==", "builder", ".", "last_depth", "\n", "\n", "rpn_bn_type", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "RPN_BN_TYPE", "\n", "if", "len", "(", "rpn_bn_type", ")", ">", "0", ":", "\n", "            ", "builder", ".", "bn_type", "=", "rpn_bn_type", "\n", "\n", "", "use_blocks", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "RPN_HEAD_BLOCKS", "\n", "stages", "=", "_get_rpn_stage", "(", "arch_def", ",", "use_blocks", ")", "\n", "\n", "self", ".", "head", "=", "builder", ".", "add_blocks", "(", "stages", ")", "\n", "self", ".", "out_channels", "=", "builder", ".", "last_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet.FBNetRPNHead.forward": [[138, 141], ["fbnet.FBNetRPNHead.head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "[", "self", ".", "head", "(", "y", ")", "for", "y", "in", "x", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet.FBNetROIHead.__init__": [[175, 203], ["torch.Module.__init__", "isinstance", "maskrcnn_benchmark.modeling.poolers.make_pooler", "fbnet._get_head_stage", "builder.add_blocks", "copy.deepcopy", "builder.add_last", "torch.Sequential", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.poolers.make_pooler", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet._get_head_stage", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.FBNetBuilder.add_blocks", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.FBNetBuilder.add_last"], ["    ", "def", "__init__", "(", "\n", "self", ",", "cfg", ",", "in_channels", ",", "builder", ",", "arch_def", ",", "\n", "head_name", ",", "use_blocks", ",", "stride_init", ",", "last_layer_scale", ",", "\n", ")", ":", "\n", "        ", "super", "(", "FBNetROIHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "in_channels", "==", "builder", ".", "last_depth", "\n", "assert", "isinstance", "(", "use_blocks", ",", "list", ")", "\n", "\n", "head_cfg_name", "=", "ARCH_CFG_NAME_MAPPING", "[", "head_name", "]", "\n", "self", ".", "pooler", "=", "poolers", ".", "make_pooler", "(", "cfg", ",", "head_cfg_name", ")", "\n", "\n", "stage", "=", "_get_head_stage", "(", "arch_def", ",", "head_name", ",", "use_blocks", ")", "\n", "\n", "assert", "stride_init", "in", "[", "0", ",", "1", ",", "2", "]", "\n", "if", "stride_init", "!=", "0", ":", "\n", "            ", "stage", "[", "0", "]", "[", "\"block\"", "]", "[", "3", "]", "=", "stride_init", "\n", "", "blocks", "=", "builder", ".", "add_blocks", "(", "stage", ")", "\n", "\n", "last_info", "=", "copy", ".", "deepcopy", "(", "arch_def", "[", "\"last\"", "]", ")", "\n", "last_info", "[", "1", "]", "=", "last_layer_scale", "\n", "last", "=", "builder", ".", "add_last", "(", "last_info", ")", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"blocks\"", ",", "blocks", ")", ",", "\n", "(", "\"last\"", ",", "last", ")", "\n", "]", ")", ")", "\n", "\n", "self", ".", "out_channels", "=", "builder", ".", "last_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet.FBNetROIHead.forward": [[204, 208], ["fbnet.FBNetROIHead.pooler", "fbnet.FBNetROIHead.head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "proposals", ")", ":", "\n", "        ", "x", "=", "self", ".", "pooler", "(", "x", ",", "proposals", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet.create_builder": [[21, 69], ["fbnet_builder.unify_arch_def", "json.loads.get", "logger.info", "fbnet_builder.FBNetBuilder", "len", "json.loads", "len", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.unify_arch_def", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["def", "create_builder", "(", "cfg", ")", ":", "\n", "    ", "bn_type", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "BN_TYPE", "\n", "if", "bn_type", "==", "\"gn\"", ":", "\n", "        ", "bn_type", "=", "(", "bn_type", ",", "cfg", ".", "GROUP_NORM", ".", "NUM_GROUPS", ")", "\n", "", "factor", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "SCALE_FACTOR", "\n", "\n", "arch", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "ARCH", "\n", "arch_def", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "ARCH_DEF", "\n", "if", "len", "(", "arch_def", ")", ">", "0", ":", "\n", "        ", "arch_def", "=", "json", ".", "loads", "(", "arch_def", ")", "\n", "", "if", "arch", "in", "modeldef", ".", "MODEL_ARCH", ":", "\n", "        ", "if", "len", "(", "arch_def", ")", ">", "0", ":", "\n", "            ", "assert", "(", "\n", "arch_def", "==", "modeldef", ".", "MODEL_ARCH", "[", "arch", "]", "\n", ")", ",", "\"Two architectures with the same name {},\\n{},\\n{}\"", ".", "format", "(", "\n", "arch", ",", "arch_def", ",", "modeldef", ".", "MODEL_ARCH", "[", "arch", "]", "\n", ")", "\n", "", "arch_def", "=", "modeldef", ".", "MODEL_ARCH", "[", "arch", "]", "\n", "", "else", ":", "\n", "        ", "assert", "arch_def", "is", "not", "None", "and", "len", "(", "arch_def", ")", ">", "0", "\n", "", "arch_def", "=", "mbuilder", ".", "unify_arch_def", "(", "arch_def", ")", "\n", "\n", "rpn_stride", "=", "arch_def", ".", "get", "(", "\"rpn_stride\"", ",", "None", ")", "\n", "if", "rpn_stride", "is", "not", "None", ":", "\n", "        ", "assert", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "ANCHOR_STRIDE", "[", "0", "]", "==", "rpn_stride", "\n", ")", ",", "\"Needs to set cfg.MODEL.RPN.ANCHOR_STRIDE to {}, got {}\"", ".", "format", "(", "\n", "rpn_stride", ",", "cfg", ".", "MODEL", ".", "RPN", ".", "ANCHOR_STRIDE", "\n", ")", "\n", "", "width_divisor", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "WIDTH_DIVISOR", "\n", "dw_skip_bn", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "DW_CONV_SKIP_BN", "\n", "dw_skip_relu", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "DW_CONV_SKIP_RELU", "\n", "\n", "logger", ".", "info", "(", "\n", "\"Building fbnet model with arch {} (without scaling):\\n{}\"", ".", "format", "(", "\n", "arch", ",", "arch_def", "\n", ")", "\n", ")", "\n", "\n", "builder", "=", "mbuilder", ".", "FBNetBuilder", "(", "\n", "width_ratio", "=", "factor", ",", "\n", "bn_type", "=", "bn_type", ",", "\n", "width_divisor", "=", "width_divisor", ",", "\n", "dw_skip_bn", "=", "dw_skip_bn", ",", "\n", "dw_skip_relu", "=", "dw_skip_relu", ",", "\n", ")", "\n", "\n", "return", "builder", ",", "arch_def", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet._get_trunk_cfg": [[71, 77], ["fbnet_builder.get_num_stages", "arch_def.get", "fbnet_builder.get_blocks", "range"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.get_num_stages", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.get_blocks"], ["", "def", "_get_trunk_cfg", "(", "arch_def", ")", ":", "\n", "    ", "\"\"\" Get all stages except the last one \"\"\"", "\n", "num_stages", "=", "mbuilder", ".", "get_num_stages", "(", "arch_def", ")", "\n", "trunk_stages", "=", "arch_def", ".", "get", "(", "\"backbone\"", ",", "range", "(", "num_stages", "-", "1", ")", ")", "\n", "ret", "=", "mbuilder", ".", "get_blocks", "(", "arch_def", ",", "stage_indices", "=", "trunk_stages", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet.add_conv_body": [[96, 105], ["maskrcnn_benchmark.modeling.registry.BACKBONES.register", "fbnet.create_builder", "fbnet.FBNetTrunk", "torch.Sequential", "collections.OrderedDict"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet.create_builder"], ["", "", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"FBNet\"", ")", "\n", "def", "add_conv_body", "(", "cfg", ",", "dim_in", "=", "3", ")", ":", "\n", "    ", "builder", ",", "arch_def", "=", "create_builder", "(", "cfg", ")", "\n", "\n", "body", "=", "FBNetTrunk", "(", "builder", ",", "arch_def", ",", "dim_in", ")", "\n", "model", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "\"body\"", ",", "body", ")", "]", ")", ")", "\n", "model", ".", "out_channels", "=", "builder", ".", "last_depth", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet._get_rpn_stage": [[107, 119], ["arch_def.get", "fbnet_builder.get_blocks", "logger.warn", "len", "range", "fbnet_builder.get_blocks"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.get_blocks", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.get_blocks"], ["", "def", "_get_rpn_stage", "(", "arch_def", ",", "num_blocks", ")", ":", "\n", "    ", "rpn_stage", "=", "arch_def", ".", "get", "(", "\"rpn\"", ")", "\n", "ret", "=", "mbuilder", ".", "get_blocks", "(", "arch_def", ",", "stage_indices", "=", "rpn_stage", ")", "\n", "if", "num_blocks", ">", "0", ":", "\n", "        ", "logger", ".", "warn", "(", "'Use last {} blocks in {} as rpn'", ".", "format", "(", "num_blocks", ",", "ret", ")", ")", "\n", "block_count", "=", "len", "(", "ret", "[", "\"stages\"", "]", ")", "\n", "assert", "num_blocks", "<=", "block_count", ",", "\"use block {}, block count {}\"", ".", "format", "(", "\n", "num_blocks", ",", "block_count", "\n", ")", "\n", "blocks", "=", "range", "(", "block_count", "-", "num_blocks", ",", "block_count", ")", "\n", "ret", "=", "mbuilder", ".", "get_blocks", "(", "ret", ",", "block_indices", "=", "blocks", ")", "\n", "", "return", "ret", "[", "\"stages\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet.add_rpn_head": [[143, 155], ["maskrcnn_benchmark.modeling.registry.RPN_HEADS.register", "fbnet.create_builder", "fbnet.FBNetRPNHead", "maskrcnn_benchmark.modeling.rpn.rpn.RPNHeadConvRegressor", "torch.Sequential"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet.create_builder"], ["", "", "@", "registry", ".", "RPN_HEADS", ".", "register", "(", "\"FBNet.rpn_head\"", ")", "\n", "def", "add_rpn_head", "(", "cfg", ",", "in_channels", ",", "num_anchors", ")", ":", "\n", "    ", "builder", ",", "model_arch", "=", "create_builder", "(", "cfg", ")", "\n", "builder", ".", "last_depth", "=", "in_channels", "\n", "\n", "assert", "in_channels", "==", "builder", ".", "last_depth", "\n", "# builder.name_prefix = \"[rpn]\"", "\n", "\n", "rpn_feature", "=", "FBNetRPNHead", "(", "cfg", ",", "in_channels", ",", "builder", ",", "model_arch", ")", "\n", "rpn_regressor", "=", "rpn", ".", "RPNHeadConvRegressor", "(", "\n", "cfg", ",", "rpn_feature", ".", "out_channels", ",", "num_anchors", ")", "\n", "return", "nn", ".", "Sequential", "(", "rpn_feature", ",", "rpn_regressor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet._get_head_stage": [[157, 164], ["arch.get", "fbnet_builder.get_blocks"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet_builder.get_blocks"], ["", "def", "_get_head_stage", "(", "arch", ",", "head_name", ",", "blocks", ")", ":", "\n", "# use default name 'head' if the specific name 'head_name' does not existed", "\n", "    ", "if", "head_name", "not", "in", "arch", ":", "\n", "        ", "head_name", "=", "\"head\"", "\n", "", "head_stage", "=", "arch", ".", "get", "(", "head_name", ")", "\n", "ret", "=", "mbuilder", ".", "get_blocks", "(", "arch", ",", "stage_indices", "=", "head_stage", ",", "block_indices", "=", "blocks", ")", "\n", "return", "ret", "[", "\"stages\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet.add_roi_head": [[210, 222], ["maskrcnn_benchmark.modeling.registry.ROI_BOX_FEATURE_EXTRACTORS.register", "fbnet.create_builder", "fbnet.FBNetROIHead"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet.create_builder"], ["", "", "@", "registry", ".", "ROI_BOX_FEATURE_EXTRACTORS", ".", "register", "(", "\"FBNet.roi_head\"", ")", "\n", "def", "add_roi_head", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "builder", ",", "model_arch", "=", "create_builder", "(", "cfg", ")", "\n", "builder", ".", "last_depth", "=", "in_channels", "\n", "# builder.name_prefix = \"_[bbox]_\"", "\n", "\n", "return", "FBNetROIHead", "(", "\n", "cfg", ",", "in_channels", ",", "builder", ",", "model_arch", ",", "\n", "head_name", "=", "\"bbox\"", ",", "\n", "use_blocks", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "DET_HEAD_BLOCKS", ",", "\n", "stride_init", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "DET_HEAD_STRIDE", ",", "\n", "last_layer_scale", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "DET_HEAD_LAST_SCALE", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet.add_roi_head_keypoints": [[225, 237], ["maskrcnn_benchmark.modeling.registry.ROI_KEYPOINT_FEATURE_EXTRACTORS.register", "fbnet.create_builder", "fbnet.FBNetROIHead"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet.create_builder"], ["", "@", "registry", ".", "ROI_KEYPOINT_FEATURE_EXTRACTORS", ".", "register", "(", "\"FBNet.roi_head_keypoints\"", ")", "\n", "def", "add_roi_head_keypoints", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "builder", ",", "model_arch", "=", "create_builder", "(", "cfg", ")", "\n", "builder", ".", "last_depth", "=", "in_channels", "\n", "# builder.name_prefix = \"_[kpts]_\"", "\n", "\n", "return", "FBNetROIHead", "(", "\n", "cfg", ",", "in_channels", ",", "builder", ",", "model_arch", ",", "\n", "head_name", "=", "\"kpts\"", ",", "\n", "use_blocks", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "KPTS_HEAD_BLOCKS", ",", "\n", "stride_init", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "KPTS_HEAD_STRIDE", ",", "\n", "last_layer_scale", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "KPTS_HEAD_LAST_SCALE", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet.add_roi_head_mask": [[240, 252], ["maskrcnn_benchmark.modeling.registry.ROI_MASK_FEATURE_EXTRACTORS.register", "fbnet.create_builder", "fbnet.FBNetROIHead"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.fbnet.create_builder"], ["", "@", "registry", ".", "ROI_MASK_FEATURE_EXTRACTORS", ".", "register", "(", "\"FBNet.roi_head_mask\"", ")", "\n", "def", "add_roi_head_mask", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "builder", ",", "model_arch", "=", "create_builder", "(", "cfg", ")", "\n", "builder", ".", "last_depth", "=", "in_channels", "\n", "# builder.name_prefix = \"_[mask]_\"", "\n", "\n", "return", "FBNetROIHead", "(", "\n", "cfg", ",", "in_channels", ",", "builder", ",", "model_arch", ",", "\n", "head_name", "=", "\"mask\"", ",", "\n", "use_blocks", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "MASK_HEAD_BLOCKS", ",", "\n", "stride_init", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "MASK_HEAD_STRIDE", ",", "\n", "last_layer_scale", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "MASK_HEAD_LAST_SCALE", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.backbone.build_resnet_backbone": [[42, 49], ["maskrcnn_benchmark.modeling.registry.BACKBONES.register", "maskrcnn_benchmark.modeling.registry.BACKBONES.register", "maskrcnn_benchmark.modeling.registry.BACKBONES.register", "resnet.ResNet"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register"], ["", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-14\"", ")", "\n", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-50\"", ")", "\n", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-101\"", ")", "\n", "def", "build_resnet_backbone", "(", "cfg", ")", ":", "\n", "    ", "model", "=", "resnet", ".", "ResNet", "(", "cfg", ")", "\n", "model", ".", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "BACKBONE_OUT_CHANNELS", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.backbone.build_resnet_50_bn_backbone": [[28, 33], ["maskrcnn_benchmark.modeling.registry.BACKBONES.register", "resnet_bn.resnet50"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_bn.resnet50"], ["", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-50-BN\"", ")", "\n", "def", "build_resnet_50_bn_backbone", "(", "cfg", ")", ":", "\n", "    ", "model", "=", "resnet_bn", ".", "resnet50", "(", ")", "\n", "model", ".", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "BACKBONE_OUT_CHANNELS", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.backbone.build_resnet_50_antialiased_backbone": [[35, 41], ["maskrcnn_benchmark.modeling.registry.BACKBONES.register", "resnet_lpf.resnet50"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.resnet_bn.resnet50"], ["", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-50-LPF\"", ")", "\n", "def", "build_resnet_50_antialiased_backbone", "(", "cfg", ")", ":", "\n", "    ", "filter_size", "=", "3", "\n", "model", "=", "resnet_lpf", ".", "resnet50", "(", "cfg", ",", "filter_size", "=", "filter_size", ")", "\n", "model", ".", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "BACKBONE_OUT_CHANNELS", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.backbone.build_hnasnet_backbone": [[71, 94], ["maskrcnn_benchmark.modeling.registry.BACKBONES.register", "HNASNet", "fpn.FPN", "torch.nn.Sequential", "collections.OrderedDict", "range", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform", "fpn.LastLevelP6P7", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.conv_with_kaiming_uniform", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"HNASNet\"", ")", "\n", "def", "build_hnasnet_backbone", "(", "cfg", ")", ":", "\n", "    ", "in_channels_stage2", "=", "(", "cfg", ".", "MODEL", ".", "HNASNET", ".", "FILTER_MULTIPLIER", "\n", "*", "cfg", ".", "MODEL", ".", "HNASNET", ".", "NUM_BLOCKS", ")", "\n", "in_channels_list", "=", "[", "in_channels_stage2", "*", "2", "**", "i", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "cfg", ".", "MODEL", ".", "HNASNET", ".", "STRIDE_MULTIPLIER", ")", ")", "]", "\n", "in_channels_list", "=", "[", "0", "]", "+", "in_channels_list", "\n", "body", "=", "HNASNet", "(", "cfg", ")", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "HNASNET", ".", "BACKBONE_OUT_CHANNELS", "\n", "in_channels_p6p7", "=", "in_channels_stage2", "*", "8", "if", "cfg", ".", "MODEL", ".", "RETINANET", ".", "USE_C5", "else", "out_channels", "\n", "fpn", "=", "fpn_module", ".", "FPN", "(", "\n", "in_channels_list", "=", "in_channels_list", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "conv_block", "=", "conv_with_kaiming_uniform", "(", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_GN", ",", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_RELU", ",", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_DEFORMABLE", "\n", ")", ",", "\n", "top_blocks", "=", "fpn_module", ".", "LastLevelP6P7", "(", "in_channels_p6p7", ",", "out_channels", ")", ",", "\n", ")", "\n", "model", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "\"body\"", ",", "body", ")", ",", "(", "\"fpn\"", ",", "fpn", ")", "]", ")", ")", "\n", "model", ".", "out_channels", "=", "out_channels", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.backbone.build_detnasnet_fpn_backbone": [[96, 117], ["maskrcnn_benchmark.modeling.registry.BACKBONES.register", "DetNASNet", "fpn.Scaler", "torch.nn.Sequential", "collections.OrderedDict", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform", "fpn.LastLevelMaxPool"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.conv_with_kaiming_uniform"], ["", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"DetNASNet-RCNN\"", ")", "\n", "def", "build_detnasnet_fpn_backbone", "(", "cfg", ")", ":", "\n", "    ", "in_channels_stage2", "=", "cfg", ".", "MODEL", ".", "HNASNET", ".", "FILTER_MULTIPLIER", "\n", "in_channels_list", "=", "[", "in_channels_stage2", "*", "s", "\n", "for", "s", "in", "cfg", ".", "MODEL", ".", "HNASNET", ".", "STRIDE_MULTIPLIER", "[", "1", ":", "]", "]", "\n", "in_channels_list", "=", "[", "0", "]", "+", "in_channels_list", "\n", "body", "=", "DetNASNet", "(", "cfg", ")", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "HNASNET", ".", "BACKBONE_OUT_CHANNELS", "\n", "fpn", "=", "fpn_module", ".", "Scaler", "(", "\n", "in_channels_list", "=", "in_channels_list", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "conv_block", "=", "conv_with_kaiming_uniform", "(", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_GN", ",", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_RELU", ",", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_DEFORMABLE", ",", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_BN", "\n", ")", ",", "\n", "top_blocks", "=", "fpn_module", ".", "LastLevelMaxPool", "(", ")", ",", "\n", ")", "\n", "model", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "\"body\"", ",", "body", ")", ",", "(", "\"fpn\"", ",", "fpn", ")", "]", ")", ")", "\n", "model", ".", "out_channels", "=", "out_channels", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.backbone.build_detnasnet_backbone": [[119, 141], ["maskrcnn_benchmark.modeling.registry.BACKBONES.register", "DetNASNet", "fpn.Scaler", "torch.nn.Sequential", "collections.OrderedDict", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform", "fpn.LastLevelP6P7"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.conv_with_kaiming_uniform"], ["", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"DetNASNet\"", ")", "\n", "def", "build_detnasnet_backbone", "(", "cfg", ")", ":", "\n", "    ", "in_channels_stage2", "=", "cfg", ".", "MODEL", ".", "HNASNET", ".", "FILTER_MULTIPLIER", "\n", "in_channels_list", "=", "[", "in_channels_stage2", "*", "s", "\n", "for", "s", "in", "cfg", ".", "MODEL", ".", "HNASNET", ".", "STRIDE_MULTIPLIER", "[", "1", ":", "]", "]", "\n", "in_channels_list", "=", "[", "0", "]", "+", "in_channels_list", "\n", "body", "=", "DetNASNet", "(", "cfg", ")", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "HNASNET", ".", "BACKBONE_OUT_CHANNELS", "\n", "in_channels_p6p7", "=", "out_channels", "\n", "fpn", "=", "fpn_module", ".", "Scaler", "(", "\n", "in_channels_list", "=", "in_channels_list", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "conv_block", "=", "conv_with_kaiming_uniform", "(", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_GN", ",", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_RELU", ",", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_DEFORMABLE", ",", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_BN", "\n", ")", ",", "\n", "top_blocks", "=", "fpn_module", ".", "LastLevelP6P7", "(", "in_channels_p6p7", ",", "out_channels", ")", ",", "\n", ")", "\n", "model", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "\"body\"", ",", "body", ")", ",", "(", "\"fpn\"", ",", "fpn", ")", "]", ")", ")", "\n", "model", ".", "out_channels", "=", "out_channels", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.backbone.build_resnet_fpn_backbone": [[143, 171], ["maskrcnn_benchmark.modeling.registry.BACKBONES.register", "maskrcnn_benchmark.modeling.registry.BACKBONES.register", "maskrcnn_benchmark.modeling.registry.BACKBONES.register", "resnet.ResNet", "fpn.FPN", "msr.MSR", "torch.nn.Sequential", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform", "fpn.LastLevelMaxPool", "collections.OrderedDict"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.conv_with_kaiming_uniform"], ["", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-50-FPN\"", ")", "\n", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-101-FPN\"", ")", "\n", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-152-FPN\"", ")", "\n", "def", "build_resnet_fpn_backbone", "(", "cfg", ")", ":", "\n", "    ", "in_channels_stage2", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", "\n", "in_channels_list", "=", "[", "\n", "in_channels_stage2", ",", "\n", "in_channels_stage2", "*", "2", ",", "\n", "in_channels_stage2", "*", "4", ",", "\n", "in_channels_stage2", "*", "8", ",", "\n", "]", "\n", "body", "=", "resnet", ".", "ResNet", "(", "cfg", ")", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "BACKBONE_OUT_CHANNELS", "\n", "fpn", "=", "fpn_module", ".", "FPN", "(", "\n", "in_channels_list", "=", "in_channels_list", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "conv_block", "=", "conv_with_kaiming_uniform", "(", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_GN", ",", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_RELU", ",", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_DEFORMABLE", "\n", ")", ",", "\n", "top_blocks", "=", "fpn_module", ".", "LastLevelMaxPool", "(", ")", ",", "\n", ")", "\n", "if", "cfg", ".", "MODEL", ".", "MSR_ON", ":", "\n", "        ", "model", "=", "MSR", "(", "body", ",", "in_channels_list", ",", "fpn", "=", "fpn", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "\"body\"", ",", "body", ")", ",", "(", "\"fpn\"", ",", "fpn", ")", "]", ")", ")", "\n", "", "model", ".", "out_channels", "=", "out_channels", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.backbone.build_resnet_pan_backbone": [[173, 204], ["maskrcnn_benchmark.modeling.registry.BACKBONES.register", "maskrcnn_benchmark.modeling.registry.BACKBONES.register", "maskrcnn_benchmark.modeling.registry.BACKBONES.register", "resnet.ResNet", "fpn.FPN", "pan.PAN", "msr.MSR", "torch.nn.Sequential", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform", "fpn.LastLevelMaxPool", "collections.OrderedDict"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.conv_with_kaiming_uniform"], ["", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-50-PAN\"", ")", "\n", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-101-PAN\"", ")", "\n", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-152-PAN\"", ")", "\n", "def", "build_resnet_pan_backbone", "(", "cfg", ")", ":", "\n", "    ", "in_channels_stage2", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", "\n", "in_channels_list", "=", "[", "\n", "in_channels_stage2", ",", "\n", "in_channels_stage2", "*", "2", ",", "\n", "in_channels_stage2", "*", "4", ",", "\n", "in_channels_stage2", "*", "8", ",", "\n", "]", "\n", "body", "=", "resnet", ".", "ResNet", "(", "cfg", ")", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "BACKBONE_OUT_CHANNELS", "\n", "fpn", "=", "fpn_module", ".", "FPN", "(", "\n", "in_channels_list", "=", "in_channels_list", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "conv_block", "=", "conv_with_kaiming_uniform", "(", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_GN", ",", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_RELU", ",", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_DEFORMABLE", "\n", ")", ",", "\n", "top_blocks", "=", "fpn_module", ".", "LastLevelMaxPool", "(", ")", ",", "\n", ")", "\n", "pan", "=", "PAN", "(", ")", "\n", "if", "cfg", ".", "MODEL", ".", "MSR_ON", ":", "\n", "        ", "model", "=", "MSR", "(", "body", ",", "in_channels_list", ",", "fpn", "=", "fpn", ",", "pan", "=", "pan", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "\"body\"", ",", "body", ")", ",", "\n", "(", "\"pan\"", ",", "pan", ")", ",", "\n", "(", "\"fpn\"", ",", "fpn", ")", "]", ")", ")", "\n", "", "model", ".", "out_channels", "=", "out_channels", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.backbone.build_resnet_fpn_p3p7_backbone": [[206, 231], ["maskrcnn_benchmark.modeling.registry.BACKBONES.register", "maskrcnn_benchmark.modeling.registry.BACKBONES.register", "resnet.ResNet", "fpn.FPN", "torch.nn.Sequential", "collections.OrderedDict", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform", "fpn.LastLevelP6P7"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.conv_with_kaiming_uniform"], ["", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-50-FPN-RETINANET\"", ")", "\n", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-101-FPN-RETINANET\"", ")", "\n", "def", "build_resnet_fpn_p3p7_backbone", "(", "cfg", ")", ":", "\n", "    ", "body", "=", "resnet", ".", "ResNet", "(", "cfg", ")", "\n", "in_channels_stage2", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "BACKBONE_OUT_CHANNELS", "\n", "in_channels_p6p7", "=", "in_channels_stage2", "*", "8", "if", "cfg", ".", "MODEL", ".", "RETINANET", ".", "USE_C5", "else", "out_channels", "\n", "fpn", "=", "fpn_module", ".", "FPN", "(", "\n", "in_channels_list", "=", "[", "\n", "0", ",", "\n", "in_channels_stage2", "*", "2", ",", "\n", "in_channels_stage2", "*", "4", ",", "\n", "in_channels_stage2", "*", "8", ",", "\n", "]", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "conv_block", "=", "conv_with_kaiming_uniform", "(", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_GN", ",", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_RELU", ",", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_DEFORMABLE", "\n", ")", ",", "\n", "top_blocks", "=", "fpn_module", ".", "LastLevelP6P7", "(", "in_channels_p6p7", ",", "out_channels", ")", ",", "\n", ")", "\n", "model", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "\"body\"", ",", "body", ")", ",", "(", "\"fpn\"", ",", "fpn", ")", "]", ")", ")", "\n", "model", ".", "out_channels", "=", "out_channels", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.backbone.build_mnv2_fpn_backbone": [[233, 254], ["maskrcnn_benchmark.modeling.registry.BACKBONES.register", "mobilenet.MobileNetV2", "fpn.FPN", "torch.nn.Sequential", "collections.OrderedDict", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform", "fpn.LastLevelP6P7"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.registry.Registry.register", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.conv_with_kaiming_uniform"], ["", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"MNV2-FPN-RETINANET\"", ")", "\n", "def", "build_mnv2_fpn_backbone", "(", "cfg", ")", ":", "\n", "    ", "body", "=", "mobilenet", ".", "MobileNetV2", "(", "cfg", ")", "\n", "in_channels_stage2", "=", "body", ".", "return_features_num_channels", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "BACKBONE_OUT_CHANNELS", "\n", "fpn", "=", "fpn_module", ".", "FPN", "(", "\n", "in_channels_list", "=", "[", "\n", "0", ",", "\n", "in_channels_stage2", "[", "1", "]", ",", "\n", "in_channels_stage2", "[", "2", "]", ",", "\n", "in_channels_stage2", "[", "3", "]", ",", "\n", "]", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "conv_block", "=", "conv_with_kaiming_uniform", "(", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_GN", ",", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_RELU", "\n", ")", ",", "\n", "top_blocks", "=", "fpn_module", ".", "LastLevelP6P7", "(", "out_channels", ",", "out_channels", ")", ",", "\n", ")", "\n", "model", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "\"body\"", ",", "body", ")", ",", "(", "\"fpn\"", ",", "fpn", ")", "]", ")", ")", "\n", "model", ".", "out_channels", "=", "out_channels", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.backbone.build_backbone": [[256, 262], ["None"], "function", ["None"], ["", "def", "build_backbone", "(", "cfg", ")", ":", "\n", "    ", "assert", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "in", "registry", ".", "BACKBONES", ",", "\"cfg.MODEL.BACKBONE.CONV_BODY: {} are not registered in registry\"", ".", "format", "(", "\n", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "\n", ")", "\n", "return", "registry", ".", "BACKBONES", "[", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "]", "(", "cfg", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.detectors.build_detection_model": [[10, 13], ["meta_arch"], "function", ["None"], ["def", "build_detection_model", "(", "cfg", ")", ":", "\n", "    ", "meta_arch", "=", "_DETECTION_META_ARCHITECTURES", "[", "cfg", ".", "MODEL", ".", "META_ARCHITECTURE", "]", "\n", "return", "meta_arch", "(", "cfg", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.one_stage.OneStage.__init__": [[24, 33], ["torch.nn.Module.__init__", "backbone.build_backbone", "only_retrieval.build_retrieval_head", "backbone.necks.build_neck", "maskrcnn_benchmark.modeling.one_stage_head.build_one_stage_head"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.backbone.build_backbone", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.build_retrieval_head", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.necks.build_neck", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.one_stage_head.one_stage_head.build_one_stage_head"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "OneStage", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "retrieval_only", "=", "cfg", ".", "MODEL", ".", "RETRIEVAL_ONLY", "\n", "self", ".", "backbone", "=", "build_backbone", "(", "cfg", ")", "\n", "if", "self", ".", "retrieval_only", ":", "\n", "            ", "self", ".", "retrieval_head", "=", "build_retrieval_head", "(", "cfg", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "neck", "=", "build_neck", "(", "cfg", ")", "\n", "self", ".", "decoder", "=", "build_one_stage_head", "(", "cfg", ",", "self", ".", "backbone", ".", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.one_stage.OneStage.forward": [[34, 64], ["maskrcnn_benchmark.structures.image_list.to_image_list", "ValueError", "one_stage.OneStage.retrieval_head", "one_stage.OneStage.neck", "one_stage.OneStage.decoder", "losses.update", "one_stage.OneStage.backbone", "one_stage.OneStage.backbone"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.image_list.to_image_list", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update"], ["", "", "def", "forward", "(", "self", ",", "images", ",", "targets", "=", "None", ",", "vis", "=", "False", ",", "is_words", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            images (list[Tensor] or ImageList): images to be processed\n            targets (list[BoxList]): ground-truth boxes present in the image (optional)\n\n        Returns:\n            result (list[BoxList] or dict[Tensor]): the output from the model.\n                During training, it returns a dict[Tensor] which contains the losses.\n                During testing, it returns list[BoxList] contains additional fields\n                like `scores`, `labels` and `mask` (for Mask R-CNN models).\n\n        \"\"\"", "\n", "if", "self", ".", "training", "and", "targets", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"In training mode, targets should be passed\"", ")", "\n", "", "images", "=", "to_image_list", "(", "images", ")", "\n", "if", "self", ".", "retrieval_only", ":", "\n", "            ", "feats", "=", "self", ".", "backbone", "(", "images", ".", "tensors", ")", "[", "-", "1", "]", "\n", "# print(feats[-1].shape)", "\n", "result", ",", "decoder_losses", "=", "self", ".", "retrieval_head", "(", "feats", ",", "targets", ")", "\n", "", "else", ":", "\n", "            ", "features", "=", "self", ".", "neck", "(", "self", ".", "backbone", "(", "images", ".", "tensors", ")", ")", "\n", "result", ",", "decoder_losses", "=", "self", ".", "decoder", "(", "images", ",", "features", ",", "targets", ",", "vis", "=", "vis", ",", "is_words", "=", "is_words", ")", "\n", "# import pdb; pdb.set_trace()", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "losses", "=", "{", "}", "\n", "losses", ".", "update", "(", "decoder_losses", ")", "\n", "return", "losses", "\n", "\n", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.generalized_rcnn.GeneralizedRCNN.__init__": [[25, 33], ["torch.nn.Module.__init__", "backbone.build_backbone", "backbone.necks.build_neck", "rpn.rpn.build_rpn", "roi_heads.roi_heads.build_roi_heads"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.backbone.build_backbone", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.backbone.necks.build_neck", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.rpn.build_rpn", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.roi_heads.roi_heads.build_roi_heads"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "GeneralizedRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "backbone", "=", "build_backbone", "(", "cfg", ")", "\n", "self", ".", "neck", "=", "build_neck", "(", "cfg", ")", "\n", "self", ".", "rpn", "=", "build_rpn", "(", "cfg", ",", "self", ".", "backbone", ".", "out_channels", ")", "\n", "self", ".", "roi_heads", "=", "build_roi_heads", "(", "cfg", ",", "self", ".", "backbone", ".", "out_channels", ")", "\n", "self", ".", "has_aux_heads", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.generalized_rcnn.GeneralizedRCNN.forward": [[34, 71], ["maskrcnn_benchmark.structures.image_list.to_image_list", "generalized_rcnn.GeneralizedRCNN.neck", "generalized_rcnn.GeneralizedRCNN.rpn", "ValueError", "generalized_rcnn.GeneralizedRCNN.backbone", "generalized_rcnn.GeneralizedRCNN.roi_heads", "losses.update", "losses.update"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.image_list.to_image_list", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update"], ["", "def", "forward", "(", "self", ",", "images", ",", "targets", "=", "None", ",", "vis", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            images (list[Tensor] or ImageList): images to be processed\n            targets (list[BoxList]): ground-truth boxes present in the image (optional)\n            vis (bool): not used\n\n        Returns:\n            result (list[BoxList] or dict[Tensor]): the output from the model.\n                During training, it returns a dict[Tensor] which contains the losses.\n                During testing, it returns list[BoxList] contains additional fields\n                like `scores`, `labels` and `mask` (for Mask R-CNN models).\n\n        \"\"\"", "\n", "if", "self", ".", "training", "and", "targets", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"In training mode, targets should be passed\"", ")", "\n", "", "if", "self", ".", "training", "and", "self", ".", "has_aux_heads", ":", "\n", "            ", "targets", ",", "targets_aux", "=", "targets", "\n", "", "images", "=", "to_image_list", "(", "images", ")", "\n", "features", "=", "self", ".", "neck", "(", "self", ".", "backbone", "(", "images", ".", "tensors", ")", ")", "\n", "proposals", ",", "proposal_losses", "=", "self", ".", "rpn", "(", "images", ",", "features", ",", "targets", ",", "vis", "=", "vis", ")", "\n", "if", "self", ".", "roi_heads", ":", "\n", "            ", "x", ",", "result", ",", "detector_losses", "=", "self", ".", "roi_heads", "(", "features", ",", "proposals", ",", "targets", ")", "\n", "", "else", ":", "\n", "# self.warm_start -= 1", "\n", "# RPN-only models don't have roi_heads", "\n", "            ", "result", "=", "proposals", "\n", "detector_losses", "=", "{", "}", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "losses", "=", "{", "}", "\n", "losses", ".", "update", "(", "detector_losses", ")", "\n", "losses", ".", "update", "(", "proposal_losses", ")", "\n", "\n", "return", "losses", "\n", "\n", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.GlobalLocalSimilarity.__init__": [[21, 25], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "divided_nums", "=", "[", "1", ",", "3", ",", "5", "]", ")", ":", "\n", "        ", "super", "(", "GlobalLocalSimilarity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "divided_nums", "=", "divided_nums", "\n", "self", ".", "normalize", "=", "nn", ".", "functional", ".", "normalize", "\n", "", "def", "compute_similarity", "(", "self", ",", "x", ",", "y", ",", "divided_num", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.GlobalLocalSimilarity.compute_similarity": [[25, 30], ["x.view.view.view", "y.view.view.view", "torch.stack", "torch.stack.mean", "x.view.view.size", "y.view.view.size", "only_retrieval.GlobalLocalSimilarity.normalize().mm", "only_retrieval.GlobalLocalSimilarity.normalize().t", "range", "only_retrieval.GlobalLocalSimilarity.normalize", "only_retrieval.GlobalLocalSimilarity.normalize"], "methods", ["None"], ["", "def", "compute_similarity", "(", "self", ",", "x", ",", "y", ",", "divided_num", "=", "1", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "divided_num", ",", "-", "1", ")", "\n", "y", "=", "y", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "divided_num", ",", "-", "1", ")", "\n", "sims", "=", "torch", ".", "stack", "(", "[", "self", ".", "normalize", "(", "x", "[", ":", ",", "i", ",", ":", "]", ")", ".", "mm", "(", "self", ".", "normalize", "(", "y", "[", ":", ",", "i", ",", ":", "]", ")", ".", "t", "(", ")", ")", "for", "i", "in", "range", "(", "divided_num", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "sims", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.GlobalLocalSimilarity.forward": [[31, 36], ["x.tanh", "y.tanh", "torch.stack", "torch.stack.mean", "only_retrieval.GlobalLocalSimilarity.compute_similarity"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.GlobalLocalSimilarity.compute_similarity"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_tanh", "=", "x", ".", "tanh", "(", ")", "\n", "y_tanh", "=", "y", ".", "tanh", "(", ")", "\n", "sims", "=", "torch", ".", "stack", "(", "[", "self", ".", "compute_similarity", "(", "x_tanh", ",", "y_tanh", ",", "divided_num", ")", "for", "divided_num", "in", "self", ".", "divided_nums", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "sims", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "", "", "class", "DynamicMaxSimilarity", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.DynamicMaxSimilarity.__init__": [[38, 41], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "frame_num", ")", ":", "\n", "        ", "super", "(", "DynamicMaxSimilarity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "frame_num", "=", "frame_num", "\n", "# def sim(self,x,y):", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.DynamicMaxSimilarity.sim": [[46, 52], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize.mm", "similarity.reshape.reshape.reshape", "similarity.reshape.reshape.permute", "x.view().tanh", "y.view().tanh", "torch.nn.functional.normalize.t", "x.size", "x.size", "y.size", "y.size", "x.view", "y.view", "x.size", "y.size"], "methods", ["None"], ["", "def", "sim", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_nor", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "x", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "-", "1", ")", ")", ".", "tanh", "(", ")", ")", "# x_bw,c", "\n", "y_nor", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "y", ".", "view", "(", "-", "1", ",", "y", ".", "size", "(", "-", "1", ")", ")", ".", "tanh", "(", ")", ")", "# y_bw,c", "\n", "similarity", "=", "x_nor", ".", "mm", "(", "y_nor", ".", "t", "(", ")", ")", "# (x_bw,y_bw)", "\n", "similarity", "=", "similarity", ".", "reshape", "(", "[", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "y", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "1", ")", "]", ")", "\n", "return", "similarity", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "", "def", "push_similarity", "(", "self", ",", "global_sim", ",", "local_sim", ",", "steps", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.DynamicMaxSimilarity.push_similarity": [[52, 54], ["None"], "methods", ["None"], ["", "def", "push_similarity", "(", "self", ",", "global_sim", ",", "local_sim", ",", "steps", ")", ":", "\n", "        ", "return", "(", "global_sim", "*", "(", "steps", "-", "1", ")", "+", "local_sim", ")", "/", "steps", "\n", "", "def", "forward", "(", "self", ",", "a", ",", "b", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.DynamicMaxSimilarity.forward": [[54, 66], ["torch.zeros().type_as", "only_retrieval.DynamicMaxSimilarity.sim", "range", "range", "torch.zeros", "torch.stack", "torch.max", "a.size", "b.size", "only_retrieval.DynamicMaxSimilarity.push_similarity", "only_retrieval.DynamicMaxSimilarity.push_similarity", "only_retrieval.DynamicMaxSimilarity.push_similarity", "max", "max", "max"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.sim", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.push_similarity", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.push_similarity", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.push_similarity"], ["", "def", "forward", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "si", "=", "torch", ".", "zeros", "(", "[", "a", ".", "size", "(", "0", ")", ",", "b", ".", "size", "(", "0", ")", ",", "self", ".", "frame_num", "+", "1", ",", "self", ".", "frame_num", "+", "1", "]", ")", ".", "type_as", "(", "a", ")", "\n", "local_similarity", "=", "self", ".", "sim", "(", "a", ",", "b", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frame_num", "+", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "self", ".", "frame_num", "+", "1", ")", ":", "\n", "                ", "local_sim", "=", "local_similarity", "[", ":", ",", ":", ",", "i", "-", "1", ",", "j", "-", "1", "]", "\n", "all_sim", "=", "torch", ".", "stack", "(", "[", "self", ".", "push_similarity", "(", "si", "[", ":", ",", ":", ",", "i", "-", "1", ",", "j", "]", ",", "local_sim", ",", "max", "(", "i", ",", "j", ")", ")", ",", "\n", "self", ".", "push_similarity", "(", "si", "[", ":", ",", ":", ",", "i", ",", "j", "-", "1", "]", ",", "local_sim", ",", "max", "(", "i", ",", "j", ")", ")", ",", "\n", "self", ".", "push_similarity", "(", "si", "[", ":", ",", ":", ",", "i", "-", "1", ",", "j", "-", "1", "]", ",", "local_sim", ",", "max", "(", "i", ",", "j", ")", ")", "]", "\n", ",", "dim", "=", "-", "1", ")", "\n", "si", "[", ":", ",", ":", ",", "i", ",", "j", "]", "=", "torch", ".", "max", "(", "all_sim", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "", "", "return", "si", "[", ":", ",", ":", ",", "-", "1", ",", "-", "1", "]", "\n", "", "", "class", "PyramidFeatures", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.PyramidFeatures.__init__": [[68, 71], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layers", ")", ":", "\n", "        ", "super", "(", "PyramidFeatures", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.PyramidFeatures.forward": [[72, 78], ["features.view.view.size", "features.view.view.view", "torch.cat", "torch.cat().squeeze", "torch.nn.functional.adaptive_avg_pool2d", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "b", ",", "w", ",", "c", "=", "features", ".", "size", "(", ")", "\n", "features", "=", "features", ".", "view", "(", "b", ",", "1", ",", "w", ",", "c", ")", "\n", "pyramids", "=", "torch", ".", "cat", "(", "[", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "features", ",", "[", "l", ",", "c", "]", ")", "for", "l", "in", "self", ".", "layers", "]", ",", "dim", "=", "2", ")", "\n", "output", "=", "torch", ".", "cat", "(", "[", "features", ",", "pyramids", "]", ",", "dim", "=", "2", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "return", "output", "\n", "", "", "class", "GradReverse", "(", "torch", ".", "autograd", ".", "Function", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.GradReverse.forward": [[82, 86], ["x.view_as"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "constant", ")", ":", "\n", "        ", "ctx", ".", "constant", "=", "constant", "\n", "return", "x", ".", "view_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.GradReverse.backward": [[87, 91], ["grad_output.neg"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "grad_output", "=", "grad_output", ".", "neg", "(", ")", "*", "ctx", ".", "constant", "\n", "return", "grad_output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.GradReverse.grad_reverse": [[92, 94], ["GradReverse.apply"], "methods", ["None"], ["", "def", "grad_reverse", "(", "x", ",", "constant", ")", ":", "\n", "        ", "return", "GradReverse", ".", "apply", "(", "x", ",", "constant", ")", "\n", "", "", "class", "CTCPredictor", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.CTCPredictor.__init__": [[95, 99], ["torch.nn.Module.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "class_num", ")", ":", "\n", "        ", "super", "(", "CTCPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "class_num", "=", "class_num", "\n", "self", ".", "clf", "=", "nn", ".", "Linear", "(", "in_channels", ",", "self", ".", "class_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.CTCPredictor.forward": [[100, 112], ["only_retrieval.CTCPredictor.clf", "torch.nn.functional.log_softmax().permute", "torch.full", "only_retrieval.CTCPredictor.prepare_targets", "torch.nn.functional.ctc_loss", "torch.nn.functional.log_softmax().permute.size", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax().permute.size"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.CTCPredictor.prepare_targets"], ["", "def", "forward", "(", "self", ",", "x", ",", "targets", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "clf", "(", "x", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "x", "=", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "# print(targets.shape)", "\n", "input_lengths", "=", "torch", ".", "full", "(", "(", "x", ".", "size", "(", "1", ")", ",", ")", ",", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "target_lengths", ",", "targets_sum", "=", "self", ".", "prepare_targets", "(", "targets", ")", "\n", "# print(x.shape,targets.shape,target_lengths.shape)", "\n", "# loss = F.ctc_loss(x, targets_sum, input_lengths, target_lengths, blank=self.class_num-1, zero_infinity=True) / 10", "\n", "loss", "=", "F", ".", "ctc_loss", "(", "x", ",", "targets_sum", ",", "input_lengths", ",", "target_lengths", ",", "blank", "=", "self", ".", "class_num", "-", "1", ",", "zero_infinity", "=", "True", ")", "\n", "return", "loss", "\n", "", "return", "x", "\n", "", "def", "prepare_targets", "(", "self", ",", "targets", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.CTCPredictor.prepare_targets": [[112, 117], ["torch.cat", "zip"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat"], ["", "def", "prepare_targets", "(", "self", ",", "targets", ")", ":", "\n", "        ", "target_lengths", "=", "(", "targets", "!=", "self", ".", "class_num", "-", "1", ")", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "sum_targets", "=", "[", "t", "[", ":", "l", "]", "for", "t", ",", "l", "in", "zip", "(", "targets", ",", "target_lengths", ")", "]", "\n", "sum_targets", "=", "torch", ".", "cat", "(", "sum_targets", ")", "\n", "return", "target_lengths", ",", "sum_targets", "\n", "", "", "class", "RNNDecoder", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.RNNDecoder.__init__": [[118, 137], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform", "range", "torch.nn.Sequential", "convs.append", "only_retrieval.BidirectionalLSTM", "torch.nn.Linear", "only_retrieval.PyramidFeatures", "torch.nn.MultiheadAttention", "torch.nn.Linear", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform."], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.conv_with_kaiming_uniform"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "bidirectional", "=", "True", ",", "use_look_up", "=", "False", ",", "use_res_link", "=", "False", ",", "use_rnn", "=", "True", ",", "use_pyramid", "=", "False", ",", "pyramid_layers", "=", "None", ")", ":", "\n", "        ", "super", "(", "RNNDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "conv_func", "=", "conv_with_kaiming_uniform", "(", "True", ",", "True", ",", "False", ",", "False", ")", "\n", "convs", "=", "[", "]", "\n", "self", ".", "use_rnn", "=", "use_rnn", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "convs", ".", "append", "(", "conv_func", "(", "in_channels", ",", "in_channels", ",", "3", ",", "stride", "=", "(", "2", ",", "1", ")", ")", ")", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "self", ".", "rnn", "=", "BidirectionalLSTM", "(", "in_channels", ",", "256", ",", "out_channels", ")", "if", "self", ".", "use_rnn", "else", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "use_look_up", "=", "use_look_up", "\n", "self", ".", "use_res_link", "=", "use_res_link", "\n", "self", ".", "use_pyramid", "=", "use_pyramid", "\n", "if", "self", ".", "use_pyramid", ":", "\n", "            ", "self", ".", "pyramid", "=", "PyramidFeatures", "(", "pyramid_layers", ")", "\n", "", "if", "self", ".", "use_look_up", ":", "\n", "            ", "self", ".", "look_up_model", "=", "nn", ".", "MultiheadAttention", "(", "in_channels", ",", "1", ")", "\n", "# self.selection = nn.Linear(2*in_channels,1)", "\n", "", "if", "self", ".", "use_res_link", ":", "\n", "            ", "self", ".", "pro", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "", "", "def", "look_up", "(", "self", ",", "q", ",", "k", ",", "v", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.RNNDecoder.look_up": [[137, 141], ["only_retrieval.RNNDecoder.look_up_model"], "methods", ["None"], ["", "", "def", "look_up", "(", "self", ",", "q", ",", "k", ",", "v", ")", ":", "\n", "# print(q.shape,k.shape,v.shape)", "\n", "        ", "feat", ",", "_", "=", "self", ".", "look_up_model", "(", "q", ",", "k", ",", "v", ")", "\n", "return", "feat", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "dictionary", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.RNNDecoder.forward": [[141, 163], ["only_retrieval.RNNDecoder.convs", "only_retrieval.RNNDecoder.mean", "only_retrieval.RNNDecoder.permute", "only_retrieval.RNNDecoder.permute().contiguous", "print", "dictionary[].repeat", "only_retrieval.RNNDecoder.look_up", "only_retrieval.RNNDecoder.rnn", "only_retrieval.RNNDecoder.pyramid", "only_retrieval.RNNDecoder.rnn", "only_retrieval.RNNDecoder.pro", "only_retrieval.RNNDecoder.permute", "only_retrieval.RNNDecoder.size"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.RNNDecoder.look_up"], ["", "def", "forward", "(", "self", ",", "x", ",", "dictionary", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "convs", "(", "x", ")", "\n", "x", "=", "x", ".", "mean", "(", "dim", "=", "2", ")", "# NxCxW", "\n", "# assert x.size(-2) == 1, \"the height of conv must be 1\"", "\n", "# x = x.squeeze(2)", "\n", "x", "=", "x", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "# WxNxC", "\n", "if", "self", ".", "use_look_up", ":", "\n", "            ", "print", "(", "\"look_up\"", ")", "\n", "dictionary", "=", "dictionary", "[", ":", ",", "None", ",", ":", "]", ".", "repeat", "(", "[", "1", ",", "x", ".", "size", "(", "1", ")", ",", "1", "]", ")", "\n", "feat", "=", "self", ".", "look_up", "(", "x", ",", "dictionary", ",", "dictionary", ")", "\n", "x", "=", "feat", "\n", "# selection = self.selection(torch.cat([feat,x],dim=-1)).sigmoid()", "\n", "# print(selection.shape,x.shape)", "\n", "# x = selection*x + (1-selection)*feat", "\n", "", "if", "self", ".", "use_res_link", ":", "\n", "            ", "x", "=", "self", ".", "rnn", "(", "x", ")", "+", "self", ".", "pro", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "rnn", "(", "x", ")", "\n", "", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "# [b,w,c]", "\n", "if", "self", ".", "use_pyramid", ":", "\n", "            ", "x", "=", "self", ".", "pyramid", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.BidirectionalLSTM.__init__": [[166, 171], ["torch.nn.Module.__init__", "torch.nn.LSTM", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nHidden", ",", "nOut", ")", ":", "\n", "        ", "super", "(", "BidirectionalLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "nIn", ",", "nHidden", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Linear", "(", "nHidden", "*", "2", ",", "nOut", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.BidirectionalLSTM.forward": [[172, 181], ["only_retrieval.BidirectionalLSTM.rnn", "recurrent.size", "recurrent.view", "only_retrieval.BidirectionalLSTM.embedding", "output.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "recurrent", ",", "_", "=", "self", ".", "rnn", "(", "input", ")", "\n", "T", ",", "b", ",", "h", "=", "recurrent", ".", "size", "(", ")", "\n", "t_rec", "=", "recurrent", ".", "view", "(", "T", "*", "b", ",", "h", ")", "\n", "\n", "output", "=", "self", ".", "embedding", "(", "t_rec", ")", "# [T * b, nOut]", "\n", "output", "=", "output", ".", "view", "(", "T", ",", "b", ",", "-", "1", ")", "\n", "\n", "return", "output", "\n", "", "", "class", "WordEmbedding", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.WordEmbedding.__init__": [[182, 209], ["torch.nn.Module.__init__", "int", "torch.nn.Embedding", "torch.nn.Sequential", "len", "torch.nn.Linear", "torch.nn.ReLU", "only_retrieval.BidirectionalLSTM", "torch.nn.Linear", "only_retrieval.PyramidFeatures", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["    ", "def", "__init__", "(", "self", ",", "\n", "out_channels", "=", "512", ",", "\n", "embedding_dim", "=", "300", ",", "\n", "char_vector_dim", "=", "256", ",", "\n", "max_length", "=", "10", ",", "\n", "lexicon", "=", "string", ".", "ascii_lowercase", "+", "string", ".", "digits", ",", "\n", "bidirectional", "=", "True", ",", "\n", "use_res_link", "=", "False", ",", "\n", "use_rnn", "=", "True", ",", "use_pyramid", "=", "False", ",", "pyramid_layers", "=", "None", ")", ":", "\n", "        ", "super", "(", "WordEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_rnn", "=", "use_rnn", "\n", "self", ".", "max_length", "=", "int", "(", "max_length", ")", "\n", "self", ".", "lexicon", "=", "lexicon", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "char_embedding", "=", "nn", ".", "Embedding", "(", "len", "(", "self", ".", "lexicon", ")", ",", "embedding_dim", ")", "\n", "self", ".", "char_encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "embedding_dim", ",", "char_vector_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "# self.rnn = nn.LSTM(char_vector_dim, out_channels,num_layers=1,bidirectional=bidirectional)", "\n", "self", ".", "rnn", "=", "BidirectionalLSTM", "(", "char_vector_dim", ",", "256", ",", "out_channels", ")", "if", "self", ".", "use_rnn", "else", "nn", ".", "Linear", "(", "char_vector_dim", ",", "out_channels", ")", "\n", "self", ".", "use_res_link", "=", "use_res_link", "\n", "self", ".", "use_pyramid", "=", "use_pyramid", "\n", "if", "self", ".", "use_pyramid", ":", "\n", "            ", "self", ".", "pyramid", "=", "PyramidFeatures", "(", "pyramid_layers", ")", "\n", "", "if", "self", ".", "use_res_link", ":", "\n", "            ", "self", ".", "pro", "=", "nn", ".", "Linear", "(", "256", ",", "out_channels", ")", "\n", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.WordEmbedding.forward": [[209, 239], ["only_retrieval.WordEmbedding.char_encoder", "char_vector.permute().contiguous.permute().contiguous.permute().contiguous", "only_retrieval.WordEmbedding.permute().contiguous", "only_retrieval.WordEmbedding.char_embedding", "embeddings_batch.append", "torch.cat", "only_retrieval.WordEmbedding.rnn", "only_retrieval.WordEmbedding.pyramid", "len", "torch.nn.functional.interpolate", "char_vector.permute().contiguous.permute().contiguous.permute", "only_retrieval.WordEmbedding.rnn", "only_retrieval.WordEmbedding.pro", "only_retrieval.WordEmbedding.permute"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "'''\n        word: b, 256\n        embedding: b, 256, 300\n        h_t: b, out_channels\n        '''", "\n", "# print(inputs)", "\n", "embeddings_batch", "=", "[", "]", "\n", "for", "word", "in", "inputs", ":", "\n", "            ", "assert", "len", "(", "word", ")", ">", "0", ",", "word", "\n", "embeddings", "=", "self", ".", "char_embedding", "(", "word", ")", "\n", "embeddings_batch", ".", "append", "(", "\n", "nn", ".", "functional", ".", "interpolate", "(", "\n", "embeddings", "[", "None", ",", "None", ",", "...", "]", ",", "\n", "size", "=", "(", "self", ".", "max_length", ",", "self", ".", "embedding_dim", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", ")", "\n", "", "embeddings_batch", "=", "torch", ".", "cat", "(", "embeddings_batch", ",", "dim", "=", "1", ")", "[", "0", "]", "# [b, self.max_length, embedding_dim]", "\n", "char_vector", "=", "self", ".", "char_encoder", "(", "embeddings_batch", ")", "\n", "char_vector", "=", "char_vector", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "# [w, b, c]", "\n", "\n", "if", "self", ".", "use_res_link", ":", "\n", "            ", "x", "=", "self", ".", "rnn", "(", "char_vector", ")", "+", "self", ".", "pro", "(", "char_vector", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "rnn", "(", "char_vector", ")", "\n", "", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "# [b,w,c]", "\n", "if", "self", ".", "use_pyramid", ":", "\n", "            ", "x", "=", "self", ".", "pyramid", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.AlignHead.__init__": [[241, 268], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform.", "maskrcnn_benchmark.utils.text_util.TextGenerator", "only_retrieval.RNNDecoder", "only_retrieval.WordEmbedding", "torch.nn.SmoothL1Loss", "only_retrieval.CTCPredictor", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.conv_with_kaiming_uniform", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", "=", "256", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            in_channels (int): number of channels of the input feature\n        \"\"\"", "\n", "super", "(", "AlignHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_ctc_loss", "=", "False", "\n", "self", ".", "use_word_aug", "=", "False", "\n", "\n", "\n", "out_channels", "=", "128", "\n", "in_channels", "=", "256", "\n", "conv_func", "=", "conv_with_kaiming_uniform", "(", "True", ",", "True", ",", "False", ",", "False", ")", "\n", "self", ".", "conv", "=", "conv_func", "(", "2048", ",", "in_channels", ",", "1", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "text_generator", "=", "TextGenerator", "(", ")", "\n", "self", ".", "image_embedding", "=", "RNNDecoder", "(", "in_channels", ",", "out_channels", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "word_embedding", "=", "WordEmbedding", "(", "out_channels", "=", "out_channels", ",", "\n", "embedding_dim", "=", "256", ",", "\n", "char_vector_dim", "=", "256", ",", "\n", "max_length", "=", "15", ",", "\n", "lexicon", "=", "self", ".", "text_generator", ".", "chars", ",", "\n", "bidirectional", "=", "True", ")", "\n", "frames", "=", "15", "\n", "if", "self", ".", "use_ctc_loss", ":", "\n", "            ", "self", ".", "ctc_head", "=", "CTCPredictor", "(", "out_channels", ",", "len", "(", "self", ".", "text_generator", ".", "chars", ")", "+", "1", ")", "\n", "", "self", ".", "feat_dim", "=", "128", "*", "frames", "\n", "self", ".", "sim_loss_func", "=", "nn", ".", "SmoothL1Loss", "(", "reduction", "=", "'none'", ")", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.AlignHead.get_word_embedding": [[268, 273], ["torch.no_grad", "only_retrieval.AlignHead.word_embedding().detach", "torch.tensor().long().to", "only_retrieval.AlignHead.word_embedding", "torch.tensor().long", "torch.tensor", "only_retrieval.AlignHead.text_generator.label_map", "text.lower"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.label_map"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_word_embedding", "(", "self", ",", "texts", ",", "device", ")", ":", "\n", "        ", "words", "=", "[", "torch", ".", "tensor", "(", "self", ".", "text_generator", ".", "label_map", "(", "text", ".", "lower", "(", ")", ")", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "for", "text", "in", "texts", "]", "\n", "words_embedding", "=", "self", ".", "word_embedding", "(", "words", ")", ".", "detach", "(", ")", "\n", "return", "words_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.AlignHead.compute_loss": [[274, 284], ["only_retrieval.AlignHead.compute_similarity", "only_retrieval.AlignHead.text_generator.calculate_similarity_matric", "torch.tensor().type_as", "only_retrieval.AlignHead.sim_loss_func", "[].mean", "torch.tensor", "[].mean.max"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.GlobalLocalSimilarity.compute_similarity", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.calculate_similarity_matric"], ["", "def", "compute_loss", "(", "self", ",", "embedding1", ",", "embedding2", ",", "words1", ",", "words2", ")", ":", "\n", "        ", "k", "=", "1", "\n", "iou", "=", "self", ".", "compute_similarity", "(", "embedding1", ",", "embedding2", ",", "k", ")", "\n", "similarity", "=", "self", ".", "text_generator", ".", "calculate_similarity_matric", "(", "words1", ",", "words2", ")", "\n", "similarity", "=", "torch", ".", "tensor", "(", "similarity", ")", ".", "type_as", "(", "iou", ")", "\n", "# print(iou.max(),iou.min())", "\n", "loss", "=", "self", ".", "sim_loss_func", "(", "iou", ",", "similarity", ")", "\n", "loss", "=", "loss", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "mean", "(", ")", "\n", "# print(loss)", "\n", "return", "loss", "\n", "", "def", "compute_similarity", "(", "self", ",", "embedding1", ",", "embedding2", ",", "k", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.AlignHead.compute_similarity": [[284, 289], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize.mm", "torch.nn.functional.normalize.t", "embedding1.size", "embedding2.size"], "methods", ["None"], ["", "def", "compute_similarity", "(", "self", ",", "embedding1", ",", "embedding2", ",", "k", "=", "1", ")", ":", "\n", "        ", "embedding1_nor", "=", "nn", ".", "functional", ".", "normalize", "(", "(", "embedding1", "*", "k", ")", ".", "tanh", "(", ")", ".", "view", "(", "embedding1", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "embedding2_nor", "=", "nn", ".", "functional", ".", "normalize", "(", "(", "embedding2", "*", "k", ")", ".", "tanh", "(", ")", ".", "view", "(", "embedding2", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "inter", "=", "embedding1_nor", ".", "mm", "(", "embedding2_nor", ".", "t", "(", ")", ")", "\n", "return", "inter", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.AlignHead.forward": [[291, 367], ["only_retrieval.AlignHead.conv", "targets[].get_field().tolist.copy", "targets[].get_field().tolist.copy", "only_retrieval.AlignHead.image_embedding", "only_retrieval.AlignHead.word_embedding", "loss_fn", "loss_fn", "loss_fn", "only_retrieval.AlignHead.image_embedding", "torch.nn.functional.normalize", "targets[].get_field().tolist", "only_retrieval.AlignHead.word_embedding", "torch.nn.functional.normalize", "target.get_field", "targets[].get_field().tolist.copy.extend", "torch.tensor().long().to", "only_retrieval.AlignHead.detach", "only_retrieval.AlignHead.size", "torch.tensor().long().to", "only_retrieval.AlignHead.ctc_head", "torch.tensor().long().to", "len", "only_retrieval.AlignHead.size", "targets[].get_field", "only_retrieval.AlignHead.size", "only_retrieval.AlignHead.text_generator", "torch.tensor().long", "enumerate", "torch.tensor().long", "torch.tensor().long", "len", "torch.tensor", "torch.tensor", "torch.tensor", "only_retrieval.AlignHead.text_generator.label_map", "only_retrieval.AlignHead.text_generator.label_map", "text.lower", "only_retrieval.AlignHead.text_generator.label_map_with_padding", "text.lower"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.label_map", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.label_map", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.label_map_with_padding"], ["", "def", "forward", "(", "self", ",", "x", ",", "targets", "=", "None", ",", "is_words", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        offset related operations are messy\n        images: used for test pooler\n        \"\"\"", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "texts", "=", "[", "target", ".", "get_field", "(", "\"text\"", ")", "for", "target", "in", "targets", "]", "\n", "\n", "\n", "word_texts", "=", "texts", ".", "copy", "(", ")", "\n", "imgs_texts", "=", "texts", ".", "copy", "(", ")", "\n", "\n", "imgs_embedding", "=", "self", ".", "image_embedding", "(", "x", ")", "\n", "\n", "if", "self", ".", "use_word_aug", ":", "\n", "                ", "word_texts", ".", "extend", "(", "[", "self", ".", "text_generator", "(", "text", ")", "for", "text", "in", "texts", "]", ")", "\n", "", "words", "=", "[", "torch", ".", "tensor", "(", "self", ".", "text_generator", ".", "label_map", "(", "text", ".", "lower", "(", ")", ")", ")", ".", "long", "(", ")", ".", "to", "(", "x", ".", "device", ")", "for", "text", "in", "word_texts", "]", "\n", "words_embedding", "=", "self", ".", "word_embedding", "(", "words", ")", "\n", "# words_embedding_nor = nn.functional.normalize(words_embedding.tanh()).view(words_embedding.size(0),-1)", "\n", "loss_fn", "=", "self", ".", "compute_loss", "\n", "wi_loss", "=", "loss_fn", "(", "words_embedding", ".", "detach", "(", ")", ",", "imgs_embedding", ",", "word_texts", ",", "imgs_texts", ")", "\n", "ww_loss", "=", "loss_fn", "(", "words_embedding", ",", "words_embedding", ",", "word_texts", ",", "word_texts", ")", "\n", "ii_loss", "=", "loss_fn", "(", "imgs_embedding", ",", "imgs_embedding", ",", "imgs_texts", ",", "imgs_texts", ")", "\n", "\n", "loss", "=", "{", "\"loss_wi\"", ":", "wi_loss", "*", "10", ",", "\"loss_ww\"", ":", "ww_loss", "*", "10", ",", "\"loss_ii\"", ":", "ii_loss", "*", "10", "}", "\n", "if", "self", ".", "use_ctc_loss", ":", "\n", "\n", "                ", "max_len", "=", "imgs_embedding", ".", "size", "(", "1", ")", "\n", "selected_idx", "=", "[", "i", "for", "i", ",", "text", "in", "enumerate", "(", "texts", ")", "if", "len", "(", "text", ")", "<", "max_len", "]", "\n", "selected_texts", "=", "[", "texts", "[", "i", "]", "for", "i", "in", "selected_idx", "]", "\n", "class_num", "=", "len", "(", "self", ".", "text_generator", ".", "chars", ")", "+", "1", "\n", "words", "=", "torch", ".", "tensor", "(", "[", "self", ".", "text_generator", ".", "label_map_with_padding", "(", "text", ",", "max_len", "=", "max_len", ",", "padding", "=", "class_num", "-", "1", ")", "for", "text", "in", "selected_texts", "]", ")", ".", "long", "(", ")", ".", "to", "(", "rois", ".", "device", ")", "\n", "loss", "[", "\"loss_rc\"", "]", "=", "self", ".", "ctc_head", "(", "imgs_embedding", "[", "selected_idx", "]", ",", "words", ")", "\n", "", "return", "None", ",", "loss", "\n", "", "else", ":", "\n", "# select_boxes = []", "\n", "# proposals = samples[\"retrieval_samples\"]", "\n", "# for proposals_per_im in proposals:", "\n", "#     if not self.is_chinese:", "\n", "#         idxs, texts = self.text_generator.filter_words(proposals_per_im.get_field(\"texts\").tolist())", "\n", "#     else:", "\n", "#         texts = proposals_per_im.get_field(\"texts\").tolist()", "\n", "#     if is_words:", "\n", "\n", "#         if len(texts) == 0:", "\n", "#             words_embedding_nor = torch.zeros([0,self.feat_dim]).type_as(x[0])", "\n", "#         else:", "\n", "#             if not self.is_chinese:", "\n", "#                 words = [torch.tensor(self.text_generator.label_map(text.lower())).long().to(x[0].device) for text in texts]", "\n", "#             else:", "\n", "#                 words = [torch.tensor(self.text_generator.label_map(text)).long().to(x[0].device) for text in texts]", "\n", "#                 # print(len(words))", "\n", "#             words_embedding = self.word_embedding(words)", "\n", "#             if self.use_hanming:", "\n", "#                 words_embedding_nor = words_embedding.sigmoid().view(words_embedding.size(0),-1)", "\n", "#             else:", "\n", "#                 k = 50 if self.use_step else 1", "\n", "#                 if self.use_dynamic_similarity:", "\n", "#                     words_embedding_nor = words_embedding", "\n", "#                 else:", "\n", "#                     words_embedding_nor = nn.functional.normalize((words_embedding*k).tanh().view(words_embedding.size(0),-1))", "\n", "\n", "            ", "imgs_embedding", "=", "self", ".", "image_embedding", "(", "x", ")", "\n", "k", "=", "1", "\n", "imgs_embedding_nor", "=", "nn", ".", "functional", ".", "normalize", "(", "(", "imgs_embedding", "*", "k", ")", ".", "tanh", "(", ")", ".", "view", "(", "imgs_embedding", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "# imgs_embedding_nor = nn.functional.normalize(imgs_embedding.view(imgs_embedding.size(0),-1))", "\n", "# proposals_per_im.add_field(\"imgs_embedding_nor\", imgs_embedding_nor)", "\n", "# if is_words:", "\n", "# proposals_per_im.add_field(\"words_embedding_nor\", words_embedding_nor)", "\n", "texts", "=", "targets", "[", "0", "]", ".", "get_field", "(", "\"texts\"", ")", ".", "tolist", "(", ")", "\n", "# print(len(texts))", "\n", "words", "=", "[", "torch", ".", "tensor", "(", "self", ".", "text_generator", ".", "label_map", "(", "text", ".", "lower", "(", ")", ")", ")", ".", "long", "(", ")", ".", "to", "(", "x", ".", "device", ")", "for", "text", "in", "texts", "]", "\n", "words_embedding", "=", "self", ".", "word_embedding", "(", "words", ")", "\n", "words_embedding_nor", "=", "nn", ".", "functional", ".", "normalize", "(", "(", "words_embedding", "*", "k", ")", ".", "tanh", "(", ")", ".", "view", "(", "words_embedding", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "{", "\"imgs_embedding_nor\"", ":", "imgs_embedding_nor", ",", "\"words_embedding_nor\"", ":", "words_embedding_nor", "}", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detector.only_retrieval.build_retrieval_head": [[372, 374], ["only_retrieval.AlignHead"], "function", ["None"], ["", "", "", "def", "build_retrieval_head", "(", "cfg", ")", ":", "\n", "    ", "return", "AlignHead", "(", "cfg", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.BinaryMaskList.__init__": [[37, 109], ["isinstance", "isinstance", "tuple", "len", "[].type_as.clone", "isinstance", "len", "len", "isinstance", "len", "torch.empty", "isinstance", "[].type_as.masks.clone", "RuntimeError", "torch.stack().clone", "isinstance", "pycocotools.decode", "torch.tensor().permute", "RuntimeError", "type", "torch.stack", "tuple", "rle_sizes.count", "len", "[].type_as", "torch.tensor", "type", "maskrcnn_benchmark.layers.misc.interpolate", "masks[].float"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.decode", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate"], ["def", "__init__", "(", "self", ",", "masks", ",", "size", ")", ":", "\n", "        ", "\"\"\"\n            Arguments:\n                masks: Either torch.tensor of [num_instances, H, W]\n                    or list of torch.tensors of [H, W] with num_instances elems,\n                    or RLE (Run Length Encoding) - interpreted as list of dicts,\n                    or BinaryMaskList.\n                size: absolute image size, width first\n\n            After initialization, a hard copy will be made, to leave the\n            initializing source data intact.\n        \"\"\"", "\n", "\n", "assert", "isinstance", "(", "size", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "len", "(", "size", ")", "==", "2", "\n", "\n", "if", "isinstance", "(", "masks", ",", "torch", ".", "Tensor", ")", ":", "\n", "# The raw data representation is passed as argument", "\n", "            ", "masks", "=", "masks", ".", "clone", "(", ")", "\n", "", "elif", "isinstance", "(", "masks", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "if", "len", "(", "masks", ")", "==", "0", ":", "\n", "                ", "masks", "=", "torch", ".", "empty", "(", "[", "0", ",", "size", "[", "1", "]", ",", "size", "[", "0", "]", "]", ")", "# num_instances = 0!", "\n", "", "elif", "isinstance", "(", "masks", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "masks", "=", "torch", ".", "stack", "(", "masks", ",", "dim", "=", "2", ")", ".", "clone", "(", ")", "\n", "", "elif", "isinstance", "(", "masks", "[", "0", "]", ",", "dict", ")", "and", "\"counts\"", "in", "masks", "[", "0", "]", ":", "\n", "# RLE interpretation", "\n", "                ", "rle_sizes", "=", "[", "tuple", "(", "inst", "[", "\"size\"", "]", ")", "for", "inst", "in", "masks", "]", "\n", "\n", "masks", "=", "mask_utils", ".", "decode", "(", "masks", ")", "# [h, w, n]", "\n", "masks", "=", "torch", ".", "tensor", "(", "masks", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "# [n, h, w]", "\n", "\n", "assert", "rle_sizes", ".", "count", "(", "rle_sizes", "[", "0", "]", ")", "==", "len", "(", "rle_sizes", ")", ",", "(", "\n", "\"All the sizes must be the same size: %s\"", "%", "rle_sizes", "\n", ")", "\n", "\n", "# in RLE, height come first in \"size\"", "\n", "rle_height", ",", "rle_width", "=", "rle_sizes", "[", "0", "]", "\n", "assert", "masks", ".", "shape", "[", "1", "]", "==", "rle_height", "\n", "assert", "masks", ".", "shape", "[", "2", "]", "==", "rle_width", "\n", "\n", "width", ",", "height", "=", "size", "\n", "if", "width", "!=", "rle_width", "or", "height", "!=", "rle_height", ":", "\n", "                    ", "masks", "=", "interpolate", "(", "\n", "input", "=", "masks", "[", "None", "]", ".", "float", "(", ")", ",", "\n", "size", "=", "(", "height", ",", "width", ")", ",", "\n", "mode", "=", "\"bilinear\"", ",", "\n", "align_corners", "=", "False", ",", "\n", ")", "[", "0", "]", ".", "type_as", "(", "masks", ")", "\n", "", "", "else", ":", "\n", "                ", "RuntimeError", "(", "\n", "\"Type of `masks[0]` could not be interpreted: %s\"", "\n", "%", "type", "(", "masks", ")", "\n", ")", "\n", "", "", "elif", "isinstance", "(", "masks", ",", "BinaryMaskList", ")", ":", "\n", "# just hard copy the BinaryMaskList instance's underlying data", "\n", "            ", "masks", "=", "masks", ".", "masks", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "            ", "RuntimeError", "(", "\n", "\"Type of `masks` argument could not be interpreted:%s\"", "\n", "%", "type", "(", "masks", ")", "\n", ")", "\n", "\n", "", "if", "len", "(", "masks", ".", "shape", ")", "==", "2", ":", "\n", "# if only a single instance mask is passed", "\n", "            ", "masks", "=", "masks", "[", "None", "]", "\n", "\n", "", "assert", "len", "(", "masks", ".", "shape", ")", "==", "3", "\n", "assert", "masks", ".", "shape", "[", "1", "]", "==", "size", "[", "1", "]", ",", "\"%s != %s\"", "%", "(", "masks", ".", "shape", "[", "1", "]", ",", "size", "[", "1", "]", ")", "\n", "assert", "masks", ".", "shape", "[", "2", "]", "==", "size", "[", "0", "]", ",", "\"%s != %s\"", "%", "(", "masks", ".", "shape", "[", "2", "]", ",", "size", "[", "0", "]", ")", "\n", "\n", "self", ".", "masks", "=", "masks", "\n", "self", ".", "size", "=", "tuple", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.BinaryMaskList.transpose": [[110, 114], ["segmentation_mask.BinaryMaskList.masks.flip", "segmentation_mask.BinaryMaskList"], "methods", ["None"], ["", "def", "transpose", "(", "self", ",", "method", ")", ":", "\n", "        ", "dim", "=", "1", "if", "method", "==", "FLIP_TOP_BOTTOM", "else", "2", "\n", "flipped_masks", "=", "self", ".", "masks", ".", "flip", "(", "dim", ")", "\n", "return", "BinaryMaskList", "(", "flipped_masks", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.BinaryMaskList.crop": [[115, 135], ["isinstance", "str", "str", "min", "min", "min", "min", "max", "max", "segmentation_mask.BinaryMaskList", "type", "round", "max", "max", "max", "max", "float"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "box", ")", ":", "\n", "        ", "assert", "isinstance", "(", "box", ",", "(", "list", ",", "tuple", ",", "torch", ".", "Tensor", ")", ")", ",", "str", "(", "type", "(", "box", ")", ")", "\n", "# box is assumed to be xyxy", "\n", "current_width", ",", "current_height", "=", "self", ".", "size", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "[", "round", "(", "float", "(", "b", ")", ")", "for", "b", "in", "box", "]", "\n", "\n", "assert", "xmin", "<=", "xmax", "and", "ymin", "<=", "ymax", ",", "str", "(", "box", ")", "\n", "xmin", "=", "min", "(", "max", "(", "xmin", ",", "0", ")", ",", "current_width", "-", "1", ")", "\n", "ymin", "=", "min", "(", "max", "(", "ymin", ",", "0", ")", ",", "current_height", "-", "1", ")", "\n", "\n", "xmax", "=", "min", "(", "max", "(", "xmax", ",", "0", ")", ",", "current_width", ")", "\n", "ymax", "=", "min", "(", "max", "(", "ymax", ",", "0", ")", ",", "current_height", ")", "\n", "\n", "xmax", "=", "max", "(", "xmax", ",", "xmin", "+", "1", ")", "\n", "ymax", "=", "max", "(", "ymax", ",", "ymin", "+", "1", ")", "\n", "\n", "width", ",", "height", "=", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", "\n", "cropped_masks", "=", "self", ".", "masks", "[", ":", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "\n", "cropped_size", "=", "width", ",", "height", "\n", "return", "BinaryMaskList", "(", "cropped_masks", ",", "cropped_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.BinaryMaskList.resize": [[136, 156], ["map", "[].type_as", "segmentation_mask.BinaryMaskList", "iter", "isinstance", "maskrcnn_benchmark.layers.misc.interpolate", "segmentation_mask.BinaryMaskList.masks[].float"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate"], ["", "def", "resize", "(", "self", ",", "size", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "iter", "(", "size", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "assert", "isinstance", "(", "size", ",", "(", "int", ",", "float", ")", ")", "\n", "size", "=", "size", ",", "size", "\n", "", "width", ",", "height", "=", "map", "(", "int", ",", "size", ")", "\n", "\n", "assert", "width", ">", "0", "\n", "assert", "height", ">", "0", "\n", "\n", "# Height comes first here!", "\n", "resized_masks", "=", "interpolate", "(", "\n", "input", "=", "self", ".", "masks", "[", "None", "]", ".", "float", "(", ")", ",", "\n", "size", "=", "(", "height", ",", "width", ")", ",", "\n", "mode", "=", "\"bilinear\"", ",", "\n", "align_corners", "=", "False", ",", "\n", ")", "[", "0", "]", ".", "type_as", "(", "self", ".", "masks", ")", "\n", "resized_size", "=", "width", ",", "height", "\n", "return", "BinaryMaskList", "(", "resized_masks", ",", "resized_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.BinaryMaskList.convert_to_polygon": [[157, 163], ["segmentation_mask.BinaryMaskList._findContours", "segmentation_mask.PolygonList", "segmentation_mask.BinaryMaskList.masks.numel", "segmentation_mask.PolygonList"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.BinaryMaskList._findContours"], ["", "def", "convert_to_polygon", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "masks", ".", "numel", "(", ")", "==", "0", ":", "\n", "            ", "return", "PolygonList", "(", "[", "]", ",", "self", ".", "size", ")", "\n", "\n", "", "contours", "=", "self", ".", "_findContours", "(", ")", "\n", "return", "PolygonList", "(", "contours", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.BinaryMaskList.to": [[164, 166], ["None"], "methods", ["None"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.BinaryMaskList._findContours": [[167, 185], ["segmentation_mask.BinaryMaskList.masks.detach().numpy", "cv2.UMat", "maskrcnn_benchmark.utils.cv2_util.findContours", "contours.append", "segmentation_mask.BinaryMaskList.masks.detach", "reshaped_contour.append", "len", "entity.reshape().tolist", "entity.reshape"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.cv2_util.findContours", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "_findContours", "(", "self", ")", ":", "\n", "        ", "contours", "=", "[", "]", "\n", "masks", "=", "self", ".", "masks", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "for", "mask", "in", "masks", ":", "\n", "            ", "mask", "=", "cv2", ".", "UMat", "(", "mask", ")", "\n", "contour", ",", "hierarchy", "=", "cv2_util", ".", "findContours", "(", "\n", "mask", ",", "cv2", ".", "RETR_EXTERNAL", ",", "cv2", ".", "CHAIN_APPROX_TC89_L1", "\n", ")", "\n", "\n", "reshaped_contour", "=", "[", "]", "\n", "for", "entity", "in", "contour", ":", "\n", "                ", "assert", "len", "(", "entity", ".", "shape", ")", "==", "3", "\n", "assert", "(", "\n", "entity", ".", "shape", "[", "1", "]", "==", "1", "\n", ")", ",", "\"Hierarchical contours are not allowed\"", "\n", "reshaped_contour", ".", "append", "(", "entity", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", ")", "\n", "", "contours", ".", "append", "(", "reshaped_contour", ")", "\n", "", "return", "contours", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.BinaryMaskList.__len__": [[186, 188], ["len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.BinaryMaskList.__getitem__": [[189, 193], ["segmentation_mask.BinaryMaskList", "segmentation_mask.BinaryMaskList.masks.numel", "RuntimeError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "masks", ".", "numel", "(", ")", "==", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Indexing empty BinaryMaskList\"", ")", "\n", "", "return", "BinaryMaskList", "(", "self", ".", "masks", "[", "index", "]", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.BinaryMaskList.__iter__": [[194, 196], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.BinaryMaskList.__repr__": [[197, 203], ["len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "s", "+=", "\"num_instances={}, \"", ".", "format", "(", "len", "(", "self", ".", "masks", ")", ")", "\n", "s", "+=", "\"image_width={}, \"", ".", "format", "(", "self", ".", "size", "[", "0", "]", ")", "\n", "s", "+=", "\"image_height={})\"", ".", "format", "(", "self", ".", "size", "[", "1", "]", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonInstance.__init__": [[212, 245], ["isinstance", "tuple", "isinstance", "torch.as_tensor", "copy.copy", "RuntimeError", "len", "valid_polygons.append", "type"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["def", "__init__", "(", "self", ",", "polygons", ",", "size", ")", ":", "\n", "        ", "\"\"\"\n            Arguments:\n                a list of lists of numbers.\n                The first level refers to all the polygons that compose the\n                object, and the second level to the polygon coordinates.\n        \"\"\"", "\n", "if", "isinstance", "(", "polygons", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "valid_polygons", "=", "[", "]", "\n", "for", "p", "in", "polygons", ":", "\n", "                ", "p", "=", "torch", ".", "as_tensor", "(", "p", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "if", "len", "(", "p", ")", ">=", "6", ":", "# 3 * 2 coordinates", "\n", "                    ", "valid_polygons", ".", "append", "(", "p", ")", "\n", "", "", "polygons", "=", "valid_polygons", "\n", "\n", "", "elif", "isinstance", "(", "polygons", ",", "PolygonInstance", ")", ":", "\n", "            ", "polygons", "=", "copy", ".", "copy", "(", "polygons", ".", "polygons", ")", "\n", "", "else", ":", "\n", "            ", "RuntimeError", "(", "\n", "\"Type of argument `polygons` is not allowed:%s\"", "\n", "%", "(", "type", "(", "polygons", ")", ")", "\n", ")", "\n", "\n", "", "\"\"\" This crashes the training way too many times...\n        for p in polygons:\n            assert p[::2].min() >= 0\n            assert p[::2].max() < size[0]\n            assert p[1::2].min() >= 0\n            assert p[1::2].max() , size[1]\n        \"\"\"", "\n", "\n", "self", ".", "polygons", "=", "polygons", "\n", "self", ".", "size", "=", "tuple", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonInstance.transpose": [[246, 268], ["segmentation_mask.PolygonInstance", "NotImplementedError", "poly.clone", "flipped_polygons.append"], "methods", ["None"], ["", "def", "transpose", "(", "self", ",", "method", ")", ":", "\n", "        ", "if", "method", "not", "in", "(", "FLIP_LEFT_RIGHT", ",", "FLIP_TOP_BOTTOM", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Only FLIP_LEFT_RIGHT and FLIP_TOP_BOTTOM implemented\"", "\n", ")", "\n", "\n", "", "flipped_polygons", "=", "[", "]", "\n", "width", ",", "height", "=", "self", ".", "size", "\n", "if", "method", "==", "FLIP_LEFT_RIGHT", ":", "\n", "            ", "dim", "=", "width", "\n", "idx", "=", "0", "\n", "", "elif", "method", "==", "FLIP_TOP_BOTTOM", ":", "\n", "            ", "dim", "=", "height", "\n", "idx", "=", "1", "\n", "\n", "", "for", "poly", "in", "self", ".", "polygons", ":", "\n", "            ", "p", "=", "poly", ".", "clone", "(", ")", "\n", "TO_REMOVE", "=", "1", "\n", "p", "[", "idx", ":", ":", "2", "]", "=", "dim", "-", "poly", "[", "idx", ":", ":", "2", "]", "-", "TO_REMOVE", "\n", "flipped_polygons", ".", "append", "(", "p", ")", "\n", "\n", "", "return", "PolygonInstance", "(", "flipped_polygons", ",", "size", "=", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonInstance.crop": [[269, 296], ["isinstance", "str", "map", "str", "min", "min", "min", "min", "max", "max", "segmentation_mask.PolygonInstance", "type", "max", "max", "max", "max", "poly.clone", "cropped_polygons.append"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "box", ")", ":", "\n", "        ", "assert", "isinstance", "(", "box", ",", "(", "list", ",", "tuple", ",", "torch", ".", "Tensor", ")", ")", ",", "str", "(", "type", "(", "box", ")", ")", "\n", "\n", "# box is assumed to be xyxy", "\n", "current_width", ",", "current_height", "=", "self", ".", "size", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "map", "(", "float", ",", "box", ")", "\n", "\n", "assert", "xmin", "<=", "xmax", "and", "ymin", "<=", "ymax", ",", "str", "(", "box", ")", "\n", "xmin", "=", "min", "(", "max", "(", "xmin", ",", "0", ")", ",", "current_width", "-", "1", ")", "\n", "ymin", "=", "min", "(", "max", "(", "ymin", ",", "0", ")", ",", "current_height", "-", "1", ")", "\n", "\n", "xmax", "=", "min", "(", "max", "(", "xmax", ",", "0", ")", ",", "current_width", ")", "\n", "ymax", "=", "min", "(", "max", "(", "ymax", ",", "0", ")", ",", "current_height", ")", "\n", "\n", "xmax", "=", "max", "(", "xmax", ",", "xmin", "+", "1", ")", "\n", "ymax", "=", "max", "(", "ymax", ",", "ymin", "+", "1", ")", "\n", "\n", "w", ",", "h", "=", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", "\n", "\n", "cropped_polygons", "=", "[", "]", "\n", "for", "poly", "in", "self", ".", "polygons", ":", "\n", "            ", "p", "=", "poly", ".", "clone", "(", ")", "\n", "p", "[", "0", ":", ":", "2", "]", "=", "p", "[", "0", ":", ":", "2", "]", "-", "xmin", "# .clamp(min=0, max=w)", "\n", "p", "[", "1", ":", ":", "2", "]", "=", "p", "[", "1", ":", ":", "2", "]", "-", "ymin", "# .clamp(min=0, max=h)", "\n", "cropped_polygons", ".", "append", "(", "p", ")", "\n", "\n", "", "return", "PolygonInstance", "(", "cropped_polygons", ",", "size", "=", "(", "w", ",", "h", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonInstance.resize": [[297, 322], ["tuple", "segmentation_mask.PolygonInstance", "iter", "segmentation_mask.PolygonInstance", "poly.clone", "scaled_polygons.append", "isinstance", "float", "float", "zip"], "methods", ["None"], ["", "def", "resize", "(", "self", ",", "size", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "iter", "(", "size", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "assert", "isinstance", "(", "size", ",", "(", "int", ",", "float", ")", ")", "\n", "size", "=", "size", ",", "size", "\n", "\n", "", "ratios", "=", "tuple", "(", "\n", "float", "(", "s", ")", "/", "float", "(", "s_orig", ")", "for", "s", ",", "s_orig", "in", "zip", "(", "size", ",", "self", ".", "size", ")", "\n", ")", "\n", "\n", "if", "ratios", "[", "0", "]", "==", "ratios", "[", "1", "]", ":", "\n", "            ", "ratio", "=", "ratios", "[", "0", "]", "\n", "scaled_polys", "=", "[", "p", "*", "ratio", "for", "p", "in", "self", ".", "polygons", "]", "\n", "return", "PolygonInstance", "(", "scaled_polys", ",", "size", ")", "\n", "\n", "", "ratio_w", ",", "ratio_h", "=", "ratios", "\n", "scaled_polygons", "=", "[", "]", "\n", "for", "poly", "in", "self", ".", "polygons", ":", "\n", "            ", "p", "=", "poly", ".", "clone", "(", ")", "\n", "p", "[", "0", ":", ":", "2", "]", "*=", "ratio_w", "\n", "p", "[", "1", ":", ":", "2", "]", "*=", "ratio_h", "\n", "scaled_polygons", ".", "append", "(", "p", ")", "\n", "\n", "", "return", "PolygonInstance", "(", "scaled_polygons", ",", "size", "=", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonInstance.convert_to_binarymask": [[323, 332], ["pycocotools.frPyObjects", "pycocotools.merge", "pycocotools.decode", "torch.from_numpy", "p.numpy"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.decode"], ["", "def", "convert_to_binarymask", "(", "self", ")", ":", "\n", "        ", "width", ",", "height", "=", "self", ".", "size", "\n", "# formatting for COCO PythonAPI", "\n", "polygons", "=", "[", "p", ".", "numpy", "(", ")", "for", "p", "in", "self", ".", "polygons", "]", "\n", "rles", "=", "mask_utils", ".", "frPyObjects", "(", "polygons", ",", "height", ",", "width", ")", "\n", "rle", "=", "mask_utils", ".", "merge", "(", "rles", ")", "\n", "mask", "=", "mask_utils", ".", "decode", "(", "rle", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonInstance.__len__": [[333, 335], ["len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "polygons", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonInstance.__repr__": [[336, 342], ["len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "s", "+=", "\"num_groups={}, \"", ".", "format", "(", "len", "(", "self", ".", "polygons", ")", ")", "\n", "s", "+=", "\"image_width={}, \"", ".", "format", "(", "self", ".", "size", "[", "0", "]", ")", "\n", "s", "+=", "\"image_height={})\"", ".", "format", "(", "self", ".", "size", "[", "1", "]", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonList.__init__": [[349, 400], ["isinstance", "isinstance", "str", "tuple", "isinstance", "isinstance", "type", "segmentation_mask.PolygonInstance", "len", "isinstance", "str", "isinstance", "str", "RuntimeError", "len", "segmentation_mask.PolygonList.polygons.append", "type", "type", "type"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["def", "__init__", "(", "self", ",", "polygons", ",", "size", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            polygons:\n                a list of list of lists of numbers. The first\n                level of the list correspond to individual instances,\n                the second level to all the polygons that compose the\n                object, and the third level to the polygon coordinates.\n\n                OR\n\n                a list of PolygonInstances.\n\n                OR\n\n                a PolygonList\n\n            size: absolute image size\n\n        \"\"\"", "\n", "if", "isinstance", "(", "polygons", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "if", "len", "(", "polygons", ")", "==", "0", ":", "\n", "                ", "polygons", "=", "[", "[", "[", "]", "]", "]", "\n", "", "if", "isinstance", "(", "polygons", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "assert", "isinstance", "(", "polygons", "[", "0", "]", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ",", "str", "(", "\n", "type", "(", "polygons", "[", "0", "]", "[", "0", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "assert", "isinstance", "(", "polygons", "[", "0", "]", ",", "PolygonInstance", ")", ",", "str", "(", "\n", "type", "(", "polygons", "[", "0", "]", ")", "\n", ")", "\n", "\n", "", "", "elif", "isinstance", "(", "polygons", ",", "PolygonList", ")", ":", "\n", "            ", "size", "=", "polygons", ".", "size", "\n", "polygons", "=", "polygons", ".", "polygons", "\n", "\n", "", "else", ":", "\n", "            ", "RuntimeError", "(", "\n", "\"Type of argument `polygons` is not allowed:%s\"", "\n", "%", "(", "type", "(", "polygons", ")", ")", "\n", ")", "\n", "\n", "", "assert", "isinstance", "(", "size", ",", "(", "list", ",", "tuple", ")", ")", ",", "str", "(", "type", "(", "size", ")", ")", "\n", "\n", "self", ".", "polygons", "=", "[", "]", "\n", "for", "p", "in", "polygons", ":", "\n", "            ", "p", "=", "PolygonInstance", "(", "p", ",", "size", ")", "\n", "if", "len", "(", "p", ")", ">", "0", ":", "\n", "                ", "self", ".", "polygons", ".", "append", "(", "p", ")", "\n", "\n", "", "", "self", ".", "size", "=", "tuple", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonList.transpose": [[401, 412], ["segmentation_mask.PolygonList", "NotImplementedError", "flipped_polygons.append", "polygon.transpose"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.transpose"], ["", "def", "transpose", "(", "self", ",", "method", ")", ":", "\n", "        ", "if", "method", "not", "in", "(", "FLIP_LEFT_RIGHT", ",", "FLIP_TOP_BOTTOM", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Only FLIP_LEFT_RIGHT and FLIP_TOP_BOTTOM implemented\"", "\n", ")", "\n", "\n", "", "flipped_polygons", "=", "[", "]", "\n", "for", "polygon", "in", "self", ".", "polygons", ":", "\n", "            ", "flipped_polygons", ".", "append", "(", "polygon", ".", "transpose", "(", "method", ")", ")", "\n", "\n", "", "return", "PolygonList", "(", "flipped_polygons", ",", "size", "=", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonList.crop": [[413, 421], ["segmentation_mask.PolygonList", "cropped_polygons.append", "polygon.crop"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.crop"], ["", "def", "crop", "(", "self", ",", "box", ")", ":", "\n", "        ", "w", ",", "h", "=", "box", "[", "2", "]", "-", "box", "[", "0", "]", ",", "box", "[", "3", "]", "-", "box", "[", "1", "]", "\n", "cropped_polygons", "=", "[", "]", "\n", "for", "polygon", "in", "self", ".", "polygons", ":", "\n", "            ", "cropped_polygons", ".", "append", "(", "polygon", ".", "crop", "(", "box", ")", ")", "\n", "\n", "", "cropped_size", "=", "w", ",", "h", "\n", "return", "PolygonList", "(", "cropped_polygons", ",", "cropped_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonList.resize": [[422, 429], ["segmentation_mask.PolygonList", "resized_polygons.append", "polygon.resize"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize"], ["", "def", "resize", "(", "self", ",", "size", ")", ":", "\n", "        ", "resized_polygons", "=", "[", "]", "\n", "for", "polygon", "in", "self", ".", "polygons", ":", "\n", "            ", "resized_polygons", ".", "append", "(", "polygon", ".", "resize", "(", "size", ")", ")", "\n", "\n", "", "resized_size", "=", "size", "\n", "return", "PolygonList", "(", "resized_polygons", ",", "resized_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonList.to": [[430, 432], ["None"], "methods", ["None"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonList.convert_to_binarymask": [[433, 443], ["segmentation_mask.BinaryMaskList", "len", "torch.stack", "torch.empty", "p.convert_to_binarymask"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonList.convert_to_binarymask"], ["", "def", "convert_to_binarymask", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ")", ">", "0", ":", "\n", "            ", "masks", "=", "torch", ".", "stack", "(", "\n", "[", "p", ".", "convert_to_binarymask", "(", ")", "for", "p", "in", "self", ".", "polygons", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "size", "=", "self", ".", "size", "\n", "masks", "=", "torch", ".", "empty", "(", "[", "0", ",", "size", "[", "1", "]", ",", "size", "[", "0", "]", "]", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "\n", "", "return", "BinaryMaskList", "(", "masks", ",", "size", "=", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonList.__len__": [[444, 446], ["len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "polygons", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonList.__getitem__": [[447, 463], ["isinstance", "segmentation_mask.PolygonList", "isinstance", "item.tolist.tolist.nonzero", "item.tolist.tolist.tolist", "selected_polygons.append", "isinstance", "item.tolist.tolist.squeeze", "item.tolist.tolist.numel"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "int", ")", ":", "\n", "            ", "selected_polygons", "=", "[", "self", ".", "polygons", "[", "item", "]", "]", "\n", "", "elif", "isinstance", "(", "item", ",", "slice", ")", ":", "\n", "            ", "selected_polygons", "=", "self", ".", "polygons", "[", "item", "]", "\n", "", "else", ":", "\n", "# advanced indexing on a single dimension", "\n", "            ", "selected_polygons", "=", "[", "]", "\n", "if", "isinstance", "(", "item", ",", "torch", ".", "Tensor", ")", "and", "item", ".", "dtype", "==", "torch", ".", "uint8", "or", "item", ".", "dtype", "==", "torch", ".", "bool", ":", "\n", "                ", "item", "=", "item", ".", "nonzero", "(", ")", "\n", "item", "=", "item", ".", "squeeze", "(", "1", ")", "if", "item", ".", "numel", "(", ")", ">", "0", "else", "item", "\n", "item", "=", "item", ".", "tolist", "(", ")", "\n", "", "for", "i", "in", "item", ":", "\n", "                ", "selected_polygons", ".", "append", "(", "self", ".", "polygons", "[", "i", "]", ")", "\n", "", "", "return", "PolygonList", "(", "selected_polygons", ",", "size", "=", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonList.__iter__": [[464, 466], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "polygons", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonList.__repr__": [[467, 473], ["len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "s", "+=", "\"num_instances={}, \"", ".", "format", "(", "len", "(", "self", ".", "polygons", ")", ")", "\n", "s", "+=", "\"image_width={}, \"", ".", "format", "(", "self", ".", "size", "[", "0", "]", ")", "\n", "s", "+=", "\"image_height={})\"", ".", "format", "(", "self", ".", "size", "[", "1", "]", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.SegmentationMask.__init__": [[482, 510], ["isinstance", "isinstance", "isinstance", "isinstance", "tuple", "len", "isinstance", "segmentation_mask.PolygonList", "size[].item", "size[].item", "segmentation_mask.BinaryMaskList", "NotImplementedError", "str"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["def", "__init__", "(", "self", ",", "instances", ",", "size", ",", "mode", "=", "\"poly\"", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            instances: two types\n                (1) polygon\n                (2) binary mask\n            size: (width, height)\n            mode: 'poly', 'mask'. if mode is 'mask', convert mask of any format to binary mask\n        \"\"\"", "\n", "\n", "assert", "isinstance", "(", "size", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "len", "(", "size", ")", "==", "2", "\n", "if", "isinstance", "(", "size", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "assert", "isinstance", "(", "size", "[", "1", "]", ",", "torch", ".", "Tensor", ")", "\n", "size", "=", "size", "[", "0", "]", ".", "item", "(", ")", ",", "size", "[", "1", "]", ".", "item", "(", ")", "\n", "\n", "", "assert", "isinstance", "(", "size", "[", "0", "]", ",", "(", "int", ",", "float", ")", ")", "\n", "assert", "isinstance", "(", "size", "[", "1", "]", ",", "(", "int", ",", "float", ")", ")", "\n", "\n", "if", "mode", "==", "\"poly\"", ":", "\n", "            ", "self", ".", "instances", "=", "PolygonList", "(", "instances", ",", "size", ")", "\n", "", "elif", "mode", "==", "\"mask\"", ":", "\n", "            ", "self", ".", "instances", "=", "BinaryMaskList", "(", "instances", ",", "size", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unknown mode: %s\"", "%", "str", "(", "mode", ")", ")", "\n", "\n", "", "self", ".", "mode", "=", "mode", "\n", "self", ".", "size", "=", "tuple", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.SegmentationMask.transpose": [[511, 514], ["segmentation_mask.SegmentationMask.instances.transpose", "segmentation_mask.SegmentationMask"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.transpose"], ["", "def", "transpose", "(", "self", ",", "method", ")", ":", "\n", "        ", "flipped_instances", "=", "self", ".", "instances", ".", "transpose", "(", "method", ")", "\n", "return", "SegmentationMask", "(", "flipped_instances", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.SegmentationMask.crop": [[515, 519], ["segmentation_mask.SegmentationMask.instances.crop", "segmentation_mask.SegmentationMask"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.crop"], ["", "def", "crop", "(", "self", ",", "box", ")", ":", "\n", "        ", "cropped_instances", "=", "self", ".", "instances", ".", "crop", "(", "box", ")", "\n", "cropped_size", "=", "cropped_instances", ".", "size", "\n", "return", "SegmentationMask", "(", "cropped_instances", ",", "cropped_size", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.SegmentationMask.pad": [[520, 523], ["segmentation_mask.SegmentationMask"], "methods", ["None"], ["", "def", "pad", "(", "self", ",", "new_size", ")", ":", "\n", "        ", "self", ".", "instances", ".", "size", "=", "new_size", "\n", "return", "SegmentationMask", "(", "self", ".", "instances", ",", "new_size", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.SegmentationMask.resize": [[524, 528], ["segmentation_mask.SegmentationMask.instances.resize", "segmentation_mask.SegmentationMask"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize"], ["", "def", "resize", "(", "self", ",", "size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "resized_instances", "=", "self", ".", "instances", ".", "resize", "(", "size", ")", "\n", "resized_size", "=", "size", "\n", "return", "SegmentationMask", "(", "resized_instances", ",", "resized_size", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.SegmentationMask.to": [[529, 531], ["None"], "methods", ["None"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.SegmentationMask.convert": [[532, 544], ["segmentation_mask.SegmentationMask", "segmentation_mask.SegmentationMask.instances.convert_to_polygon", "segmentation_mask.SegmentationMask.instances.convert_to_binarymask", "NotImplementedError", "str"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.BinaryMaskList.convert_to_polygon", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonList.convert_to_binarymask"], ["", "def", "convert", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "self", ".", "mode", ":", "\n", "            ", "return", "self", "\n", "\n", "", "if", "mode", "==", "\"poly\"", ":", "\n", "            ", "converted_instances", "=", "self", ".", "instances", ".", "convert_to_polygon", "(", ")", "\n", "", "elif", "mode", "==", "\"mask\"", ":", "\n", "            ", "converted_instances", "=", "self", ".", "instances", ".", "convert_to_binarymask", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unknown mode: %s\"", "%", "str", "(", "mode", ")", ")", "\n", "\n", "", "return", "SegmentationMask", "(", "converted_instances", ",", "self", ".", "size", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.SegmentationMask.get_mask_tensor": [[545, 551], ["instances.convert_to_binarymask.convert_to_binarymask.masks.squeeze", "instances.convert_to_binarymask.convert_to_binarymask.convert_to_binarymask"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.PolygonList.convert_to_binarymask"], ["", "def", "get_mask_tensor", "(", "self", ")", ":", "\n", "        ", "instances", "=", "self", ".", "instances", "\n", "if", "self", ".", "mode", "==", "\"poly\"", ":", "\n", "            ", "instances", "=", "instances", ".", "convert_to_binarymask", "(", ")", "\n", "# If there is only 1 instance", "\n", "", "return", "instances", ".", "masks", ".", "squeeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.SegmentationMask.__len__": [[552, 554], ["len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "instances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.SegmentationMask.__getitem__": [[555, 558], ["segmentation_mask.SegmentationMask.instances.__getitem__", "segmentation_mask.SegmentationMask"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.list_dataset.ListDataset.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "selected_instances", "=", "self", ".", "instances", ".", "__getitem__", "(", "item", ")", "\n", "return", "SegmentationMask", "(", "selected_instances", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.SegmentationMask.__iter__": [[559, 562], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter_idx", "=", "0", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.SegmentationMask.__next__": [[563, 569], ["StopIteration", "segmentation_mask.SegmentationMask.__len__", "segmentation_mask.SegmentationMask.__getitem__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.samplers.iteration_based_batch_sampler.IterationBasedBatchSampler.__len__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.list_dataset.ListDataset.__getitem__"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "iter_idx", "<", "self", ".", "__len__", "(", ")", ":", "\n", "            ", "next_segmentation", "=", "self", ".", "__getitem__", "(", "self", ".", "iter_idx", ")", "\n", "self", ".", "iter_idx", "+=", "1", "\n", "return", "next_segmentation", "\n", "", "raise", "StopIteration", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.SegmentationMask.__repr__": [[572, 579], ["len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "s", "+=", "\"num_instances={}, \"", ".", "format", "(", "len", "(", "self", ".", "instances", ")", ")", "\n", "s", "+=", "\"image_width={}, \"", ".", "format", "(", "self", ".", "size", "[", "0", "]", ")", "\n", "s", "+=", "\"image_height={}, \"", ".", "format", "(", "self", ".", "size", "[", "1", "]", ")", "\n", "s", "+=", "\"mode={})\"", ".", "format", "(", "self", ".", "mode", ")", "\n", "return", "s", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.image_list.ImageList.__init__": [[15, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tensors", ",", "image_sizes", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            tensors (tensor)\n            image_sizes (list[tuple[int, int]])\n        \"\"\"", "\n", "self", ".", "tensors", "=", "tensors", "\n", "self", ".", "image_sizes", "=", "image_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.image_list.ImageList.to": [[24, 27], ["image_list.ImageList.tensors.to", "image_list.ImageList"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "cast_tensor", "=", "self", ".", "tensors", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "ImageList", "(", "cast_tensor", ",", "self", ".", "image_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.image_list.to_image_list": [[29, 73], ["isinstance", "isinstance", "isinstance", "image_list.ImageList", "isinstance", "tensors.dim", "tensors.dim", "tuple", "tensors[].new().zero_", "zip", "image_list.ImageList", "TypeError", "list", "int", "int", "tuple", "pad_img[].copy_", "max", "len", "tensors[].new", "type", "zip", "math.ceil", "math.ceil"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "def", "to_image_list", "(", "tensors", ",", "size_divisible", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    tensors can be an ImageList, a torch.Tensor or\n    an iterable of Tensors. It can't be a numpy array.\n    When tensors is an iterable of Tensors, it pads\n    the Tensors with zeros so that they have the same\n    shape\n    \"\"\"", "\n", "if", "isinstance", "(", "tensors", ",", "torch", ".", "Tensor", ")", "and", "size_divisible", ">", "0", ":", "\n", "        ", "tensors", "=", "[", "tensors", "]", "\n", "\n", "", "if", "isinstance", "(", "tensors", ",", "ImageList", ")", ":", "\n", "        ", "return", "tensors", "\n", "", "elif", "isinstance", "(", "tensors", ",", "torch", ".", "Tensor", ")", ":", "\n", "# single tensor shape can be inferred", "\n", "        ", "if", "tensors", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "tensors", "=", "tensors", "[", "None", "]", "\n", "", "assert", "tensors", ".", "dim", "(", ")", "==", "4", "\n", "image_sizes", "=", "[", "tensor", ".", "shape", "[", "-", "2", ":", "]", "for", "tensor", "in", "tensors", "]", "\n", "return", "ImageList", "(", "tensors", ",", "image_sizes", ")", "\n", "", "elif", "isinstance", "(", "tensors", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "max_size", "=", "tuple", "(", "max", "(", "s", ")", "for", "s", "in", "zip", "(", "*", "[", "img", ".", "shape", "for", "img", "in", "tensors", "]", ")", ")", "\n", "\n", "# TODO Ideally, just remove this and let me model handle arbitrary", "\n", "# input sizs", "\n", "if", "size_divisible", ">", "0", ":", "\n", "            ", "import", "math", "\n", "\n", "stride", "=", "size_divisible", "\n", "max_size", "=", "list", "(", "max_size", ")", "\n", "max_size", "[", "1", "]", "=", "int", "(", "math", ".", "ceil", "(", "max_size", "[", "1", "]", "/", "stride", ")", "*", "stride", ")", "\n", "max_size", "[", "2", "]", "=", "int", "(", "math", ".", "ceil", "(", "max_size", "[", "2", "]", "/", "stride", ")", "*", "stride", ")", "\n", "max_size", "=", "tuple", "(", "max_size", ")", "\n", "\n", "", "batch_shape", "=", "(", "len", "(", "tensors", ")", ",", ")", "+", "max_size", "\n", "batched_imgs", "=", "tensors", "[", "0", "]", ".", "new", "(", "*", "batch_shape", ")", ".", "zero_", "(", ")", "\n", "for", "img", ",", "pad_img", "in", "zip", "(", "tensors", ",", "batched_imgs", ")", ":", "\n", "            ", "pad_img", "[", ":", "img", ".", "shape", "[", "0", "]", ",", ":", "img", ".", "shape", "[", "1", "]", ",", ":", "img", ".", "shape", "[", "2", "]", "]", ".", "copy_", "(", "img", ")", "\n", "\n", "", "image_sizes", "=", "[", "im", ".", "shape", "[", "-", "2", ":", "]", "for", "im", "in", "tensors", "]", "\n", "\n", "return", "ImageList", "(", "batched_imgs", ",", "image_sizes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Unsupported type for to_image_list: {}\"", ".", "format", "(", "type", "(", "tensors", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.__init__": [[75, 95], ["torch.as_tensor", "maskrcnn_benchmark.utils.text_util.TextGenerator", "isinstance", "torch.device", "torch.as_tensor.ndimension", "ValueError", "torch.as_tensor.size", "ValueError", "ValueError", "torch.as_tensor.ndimension", "torch.as_tensor.size"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "bbox", ",", "image_size", ",", "mode", "=", "\"xyxy\"", ")", ":", "\n", "        ", "device", "=", "bbox", ".", "device", "if", "isinstance", "(", "bbox", ",", "torch", ".", "Tensor", ")", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "bbox", "=", "torch", ".", "as_tensor", "(", "bbox", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "if", "bbox", ".", "ndimension", "(", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"bbox should have 2 dimensions, got {}\"", ".", "format", "(", "bbox", ".", "ndimension", "(", ")", ")", "\n", ")", "\n", "", "if", "bbox", ".", "size", "(", "-", "1", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"last dimension of bbox should have a \"", "\n", "\"size of 4, got {}\"", ".", "format", "(", "bbox", ".", "size", "(", "-", "1", ")", ")", "\n", ")", "\n", "", "if", "mode", "not", "in", "(", "\"xyxy\"", ",", "\"xywh\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"mode should be 'xyxy' or 'xywh'\"", ")", "\n", "\n", "", "self", ".", "bbox", "=", "bbox", "\n", "self", ".", "size", "=", "image_size", "# (image_width, image_height)", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "extra_fields", "=", "{", "}", "\n", "self", ".", "text_generator", "=", "TextGenerator", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field": [[96, 98], ["None"], "methods", ["None"], ["", "def", "add_field", "(", "self", ",", "field", ",", "field_data", ")", ":", "\n", "        ", "self", ".", "extra_fields", "[", "field", "]", "=", "field_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field": [[99, 101], ["None"], "methods", ["None"], ["", "def", "get_field", "(", "self", ",", "field", ")", ":", "\n", "        ", "return", "self", ".", "extra_fields", "[", "field", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.has_field": [[102, 104], ["None"], "methods", ["None"], ["", "def", "has_field", "(", "self", ",", "field", ")", ":", "\n", "        ", "return", "field", "in", "self", ".", "extra_fields", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.pop_field": [[105, 107], ["bounding_box.BoxList.extra_fields.pop"], "methods", ["None"], ["", "def", "pop_field", "(", "self", ",", "field", ")", ":", "\n", "        ", "return", "self", ".", "extra_fields", ".", "pop", "(", "field", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.fields": [[108, 110], ["list", "bounding_box.BoxList.extra_fields.keys"], "methods", ["None"], ["", "def", "fields", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "extra_fields", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList._copy_extra_fields": [[111, 114], ["bbox.extra_fields.items"], "methods", ["None"], ["", "def", "_copy_extra_fields", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "bbox", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "extra_fields", "[", "k", "]", "=", "v", "\n", "", "", "def", "clone_except_fields", "(", "self", ",", "fields", "=", "[", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.clone_except_fields": [[114, 123], ["bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "bounding_box.BoxList.add_field"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field"], ["", "", "def", "clone_except_fields", "(", "self", ",", "fields", "=", "[", "]", ")", ":", "\n", "        ", "bbox", "=", "BoxList", "(", "self", ".", "bbox", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "# print(item)", "\n", "# item = item.data.cpu().numpy()", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "fields", ":", "\n", "                ", "continue", "\n", "", "bbox", ".", "add_field", "(", "k", ",", "v", ")", "\n", "", "return", "bbox", "\n", "", "def", "clone_without_fields", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.clone_without_fields": [[123, 126], ["bounding_box.BoxList"], "methods", ["None"], ["", "def", "clone_without_fields", "(", "self", ")", ":", "\n", "        ", "bbox", "=", "BoxList", "(", "self", ".", "bbox", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert": [[127, 146], ["bounding_box.BoxList._split_into_xyxy", "bounding_box.BoxList._copy_extra_fields", "ValueError", "torch.cat", "bounding_box.BoxList", "torch.cat", "bounding_box.BoxList"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList._split_into_xyxy", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList._copy_extra_fields", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat"], ["", "def", "convert", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "not", "in", "(", "\"xyxy\"", ",", "\"xywh\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"mode should be 'xyxy' or 'xywh'\"", ")", "\n", "", "if", "mode", "==", "self", ".", "mode", ":", "\n", "            ", "return", "self", "\n", "# we only have two modes, so don't need to check", "\n", "# self.mode", "\n", "", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "self", ".", "_split_into_xyxy", "(", ")", "\n", "if", "mode", "==", "\"xyxy\"", ":", "\n", "            ", "bbox", "=", "torch", ".", "cat", "(", "(", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ")", ",", "dim", "=", "-", "1", ")", "\n", "bbox", "=", "BoxList", "(", "bbox", ",", "self", ".", "size", ",", "mode", "=", "mode", ")", "\n", "", "else", ":", "\n", "            ", "TO_REMOVE", "=", "1", "\n", "bbox", "=", "torch", ".", "cat", "(", "\n", "(", "xmin", ",", "ymin", ",", "xmax", "-", "xmin", "+", "TO_REMOVE", ",", "ymax", "-", "ymin", "+", "TO_REMOVE", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "bbox", "=", "BoxList", "(", "bbox", ",", "self", ".", "size", ",", "mode", "=", "mode", ")", "\n", "", "bbox", ".", "_copy_extra_fields", "(", "self", ")", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList._split_into_xyxy": [[147, 162], ["bounding_box.BoxList.bbox.split", "bounding_box.BoxList.bbox.split", "RuntimeError"], "methods", ["None"], ["", "def", "_split_into_xyxy", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "\"xyxy\"", ":", "\n", "            ", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "self", ".", "bbox", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "return", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "\n", "", "elif", "self", ".", "mode", "==", "\"xywh\"", ":", "\n", "            ", "TO_REMOVE", "=", "1", "\n", "xmin", ",", "ymin", ",", "w", ",", "h", "=", "self", ".", "bbox", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "return", "(", "\n", "xmin", ",", "\n", "ymin", ",", "\n", "xmin", "+", "(", "w", "-", "TO_REMOVE", ")", ".", "clamp", "(", "min", "=", "0", ")", ",", "\n", "ymin", "+", "(", "h", "-", "TO_REMOVE", ")", ".", "clamp", "(", "min", "=", "0", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Should not be here\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize": [[163, 202], ["tuple", "bounding_box.BoxList._split_into_xyxy", "torch.cat", "bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "bounding_box.BoxList.convert", "bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "bounding_box.BoxList.add_field", "bounding_box.BoxList.add_field", "v.resize.resize.resize", "float", "float", "zip", "v.resize.resize.resize", "isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList._split_into_xyxy", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize"], ["", "", "def", "resize", "(", "self", ",", "size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Returns a resized copy of this bounding box\n\n        :param size: The requested size in pixels, as a 2-tuple:\n            (width, height).\n        \"\"\"", "\n", "\n", "ratios", "=", "tuple", "(", "float", "(", "s", ")", "/", "float", "(", "s_orig", ")", "for", "s", ",", "s_orig", "in", "zip", "(", "size", ",", "self", ".", "size", ")", ")", "\n", "if", "ratios", "[", "0", "]", "==", "ratios", "[", "1", "]", ":", "\n", "            ", "ratio", "=", "ratios", "[", "0", "]", "\n", "scaled_box", "=", "self", ".", "bbox", "*", "ratio", "\n", "bbox", "=", "BoxList", "(", "scaled_box", ",", "size", ",", "mode", "=", "self", ".", "mode", ")", "\n", "# bbox._copy_extra_fields(self)", "\n", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", "and", "k", "!=", "'rles'", "and", "not", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", ":", "\n", "                    ", "v", "=", "v", ".", "resize", "(", "size", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "bbox", ".", "add_field", "(", "k", ",", "v", ")", "\n", "", "return", "bbox", "\n", "\n", "", "ratio_width", ",", "ratio_height", "=", "ratios", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "self", ".", "_split_into_xyxy", "(", ")", "\n", "scaled_xmin", "=", "xmin", "*", "ratio_width", "\n", "scaled_xmax", "=", "xmax", "*", "ratio_width", "\n", "scaled_ymin", "=", "ymin", "*", "ratio_height", "\n", "scaled_ymax", "=", "ymax", "*", "ratio_height", "\n", "scaled_box", "=", "torch", ".", "cat", "(", "\n", "(", "scaled_xmin", ",", "scaled_ymin", ",", "scaled_xmax", ",", "scaled_ymax", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "bbox", "=", "BoxList", "(", "scaled_box", ",", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "# bbox.add_field(\"ratios\",ratios)", "\n", "# bbox._copy_extra_fields(self)", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", "and", "k", "!=", "'rles'", "and", "not", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "v", "=", "v", ".", "resize", "(", "size", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "bbox", ".", "add_field", "(", "k", ",", "v", ")", "\n", "\n", "", "return", "bbox", ".", "convert", "(", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.pad": [[203, 211], ["bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "bounding_box.BoxList.add_field", "v.pad.pad.pad", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.pad"], ["", "def", "pad", "(", "self", ",", "new_size", ")", ":", "\n", "        ", "bbox", "=", "BoxList", "(", "self", ".", "bbox", ",", "new_size", ",", "mode", "=", "self", ".", "mode", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", "and", "not", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "v", "=", "v", ".", "pad", "(", "new_size", ")", "\n", "", "bbox", ".", "add_field", "(", "k", ",", "v", ")", "\n", "\n", "", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.transpose": [[212, 256], ["bounding_box.BoxList._split_into_xyxy", "torch.cat", "bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "bounding_box.BoxList.convert", "NotImplementedError", "bounding_box.BoxList.add_field", "v.transpose.transpose.transpose", "isinstance", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList._split_into_xyxy", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.transpose"], ["", "def", "transpose", "(", "self", ",", "method", ")", ":", "\n", "        ", "\"\"\"\n        Transpose bounding box (flip or rotate in 90 degree steps)\n        :param method: One of :py:attr:`PIL.Image.FLIP_LEFT_RIGHT`,\n          :py:attr:`PIL.Image.FLIP_TOP_BOTTOM`, :py:attr:`PIL.Image.ROTATE_90`,\n          :py:attr:`PIL.Image.ROTATE_180`, :py:attr:`PIL.Image.ROTATE_270`,\n          :py:attr:`PIL.Image.TRANSPOSE` or :py:attr:`PIL.Image.TRANSVERSE`.\n        \"\"\"", "\n", "if", "method", "not", "in", "(", "FLIP_LEFT_RIGHT", ",", "FLIP_TOP_BOTTOM", ",", "ROTATE_90", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Only FLIP_LEFT_RIGHT and FLIP_TOP_BOTTOM implemented\"", "\n", ")", "\n", "\n", "", "image_width", ",", "image_height", "=", "self", ".", "size", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "self", ".", "_split_into_xyxy", "(", ")", "\n", "if", "method", "==", "FLIP_LEFT_RIGHT", ":", "\n", "            ", "TO_REMOVE", "=", "1", "\n", "transposed_xmin", "=", "image_width", "-", "xmax", "-", "TO_REMOVE", "\n", "transposed_xmax", "=", "image_width", "-", "xmin", "-", "TO_REMOVE", "\n", "transposed_ymin", "=", "ymin", "\n", "transposed_ymax", "=", "ymax", "\n", "", "elif", "method", "==", "FLIP_TOP_BOTTOM", ":", "\n", "            ", "transposed_xmin", "=", "xmin", "\n", "transposed_xmax", "=", "xmax", "\n", "transposed_ymin", "=", "image_height", "-", "ymax", "\n", "transposed_ymax", "=", "image_height", "-", "ymin", "\n", "", "elif", "method", "==", "ROTATE_90", ":", "\n", "            ", "transposed_xmin", "=", "ymin", "\n", "transposed_xmax", "=", "ymax", "\n", "transposed_ymin", "=", "image_width", "-", "xmax", "\n", "transposed_ymax", "=", "image_width", "-", "xmin", "\n", "\n", "self", ".", "size", "=", "(", "image_height", ",", "image_width", ")", "\n", "\n", "", "transposed_boxes", "=", "torch", ".", "cat", "(", "\n", "(", "transposed_xmin", ",", "transposed_ymin", ",", "transposed_xmax", ",", "transposed_ymax", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "bbox", "=", "BoxList", "(", "transposed_boxes", ",", "self", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "# bbox._copy_extra_fields(self)", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", "and", "not", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", "and", "not", "isinstance", "(", "v", ",", "tuple", ")", "and", "v", "!=", "None", ":", "\n", "                ", "v", "=", "v", ".", "transpose", "(", "method", ")", "\n", "", "bbox", ".", "add_field", "(", "k", ",", "v", ")", "\n", "", "return", "bbox", ".", "convert", "(", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.crop": [[289, 328], ["bounding_box.BoxList._split_into_xyxy", "torch.cat", "bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "bounding_box.BoxList.convert", "torch.nonzero().view", "bounding_box.BoxList.add_field", "v.crop.crop.crop", "torch.nonzero", "isinstance", "isinstance", "is_empty.view"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList._split_into_xyxy", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.crop"], ["", "def", "crop", "(", "self", ",", "box", ")", ":", "\n", "        ", "\"\"\"\n        Cropss a rectangular region from this bounding box. The box is a\n        4-tuple defining the left, upper, right, and lower pixel\n        coordinate.\n        \"\"\"", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "self", ".", "_split_into_xyxy", "(", ")", "\n", "w", ",", "h", "=", "box", "[", "2", "]", "-", "box", "[", "0", "]", ",", "box", "[", "3", "]", "-", "box", "[", "1", "]", "\n", "cropped_xmin", "=", "(", "xmin", "-", "box", "[", "0", "]", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "w", ")", "\n", "cropped_ymin", "=", "(", "ymin", "-", "box", "[", "1", "]", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "h", ")", "\n", "cropped_xmax", "=", "(", "xmax", "-", "box", "[", "0", "]", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "w", ")", "\n", "cropped_ymax", "=", "(", "ymax", "-", "box", "[", "1", "]", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "h", ")", "\n", "\n", "# TODO should I filter empty boxes here?", "\n", "if", "True", ":", "\n", "            ", "is_empty", "=", "(", "cropped_xmin", "==", "cropped_xmax", ")", "|", "(", "cropped_ymin", "==", "cropped_ymax", ")", "\n", "not_empty", "=", "torch", ".", "nonzero", "(", "is_empty", ".", "view", "(", "-", "1", ")", "==", "0", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "", "cropped_box", "=", "torch", ".", "cat", "(", "\n", "(", "cropped_xmin", ",", "cropped_ymin", ",", "cropped_xmax", ",", "cropped_ymax", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "bbox", "=", "BoxList", "(", "cropped_box", ",", "(", "w", ",", "h", ")", ",", "mode", "=", "\"xyxy\"", ")", "\n", "# bbox._copy_extra_fields(self)", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", "and", "not", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "v", "=", "v", ".", "crop", "(", "box", ")", "\n", "", "bbox", ".", "add_field", "(", "k", ",", "v", ")", "\n", "\n", "# # label empty as ignore", "\n", "# is_hard = (cropped_xmin==0)|(cropped_xmax==w)|(cropped_ymin==0)|(cropped_ymax==h)", "\n", "# is_hard_idx =torch.nonzero(is_hard.view(-1)==1).view(-1)", "\n", "# hard=bbox.get_field('difficult')", "\n", "# hard[is_hard_idx]=1", "\n", "# bbox.add_field('difficult',hard)", "\n", "# filter empty", "\n", "# print(not_empty,bbox,bbox.get_field(\"texts\"))", "\n", "", "bbox", "=", "bbox", "[", "not_empty", "]", "\n", "# print(not_empty,bbox,bbox.get_field(\"texts\"))", "\n", "return", "bbox", ".", "convert", "(", "self", ".", "mode", ")", "\n", "# Tensor-like methods", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to": [[330, 337], ["bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "bounding_box.BoxList.bbox.to", "hasattr", "bounding_box.BoxList.add_field", "v.to.to.to"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "bbox", "=", "BoxList", "(", "self", ".", "bbox", ".", "to", "(", "device", ")", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "v", ",", "\"to\"", ")", ":", "\n", "                ", "v", "=", "v", ".", "to", "(", "device", ")", "\n", "", "bbox", ".", "add_field", "(", "k", ",", "v", ")", "\n", "", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.__getitem__": [[338, 354], ["bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "isinstance", "bounding_box.BoxList.add_field", "bounding_box.BoxList.add_field", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "bbox", "=", "BoxList", "(", "self", ".", "bbox", "[", "item", "]", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "# print(item)", "\n", "# item = item.data.cpu().numpy()", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "# print(k,len(v),item)", "\n", "# value = [v[item]] if len(item)==1 else v[item]", "\n", "# bbox.add_field(k, [v[i] for i in item])", "\n", "            ", "if", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", ":", "\n", "# print(v)", "\n", "# if len(v)==0:", "\n", "#     print(v)", "\n", "                ", "bbox", ".", "add_field", "(", "k", ",", "np", ".", "array", "(", "[", "v", "[", "i", "]", "for", "i", "in", "item", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "bbox", ".", "add_field", "(", "k", ",", "v", "[", "item", "]", ")", "\n", "", "", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.__len__": [[355, 357], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "bbox", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.clip_to_image": [[358, 370], ["bounding_box.BoxList.bbox[].clamp_", "bounding_box.BoxList.bbox[].clamp_", "bounding_box.BoxList.bbox[].clamp_", "bounding_box.BoxList.bbox[].clamp_", "torch.nonzero().view", "torch.nonzero"], "methods", ["None"], ["", "def", "clip_to_image", "(", "self", ",", "remove_empty", "=", "True", ")", ":", "\n", "        ", "TO_REMOVE", "=", "1", "\n", "self", ".", "bbox", "[", ":", ",", "0", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "self", ".", "size", "[", "0", "]", "-", "TO_REMOVE", ")", "\n", "self", ".", "bbox", "[", ":", ",", "1", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "self", ".", "size", "[", "1", "]", "-", "TO_REMOVE", ")", "\n", "self", ".", "bbox", "[", ":", ",", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "self", ".", "size", "[", "0", "]", "-", "TO_REMOVE", ")", "\n", "self", ".", "bbox", "[", ":", ",", "3", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "self", ".", "size", "[", "1", "]", "-", "TO_REMOVE", ")", "\n", "if", "remove_empty", ":", "\n", "            ", "box", "=", "self", ".", "bbox", "\n", "keep", "=", "(", "box", "[", ":", ",", "3", "]", ">", "box", "[", ":", ",", "1", "]", ")", "&", "(", "box", "[", ":", ",", "2", "]", ">", "box", "[", ":", ",", "0", "]", ")", "\n", "keep", "=", "torch", ".", "nonzero", "(", "keep", ")", ".", "view", "(", "-", "1", ")", "\n", "return", "self", "[", "keep", "]", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.area": [[371, 382], ["RuntimeError"], "methods", ["None"], ["", "def", "area", "(", "self", ")", ":", "\n", "        ", "box", "=", "self", ".", "bbox", "\n", "if", "self", ".", "mode", "==", "\"xyxy\"", ":", "\n", "            ", "TO_REMOVE", "=", "1", "\n", "area", "=", "(", "box", "[", ":", ",", "2", "]", "-", "box", "[", ":", ",", "0", "]", "+", "TO_REMOVE", ")", "*", "(", "box", "[", ":", ",", "3", "]", "-", "box", "[", ":", ",", "1", "]", "+", "TO_REMOVE", ")", "\n", "", "elif", "self", ".", "mode", "==", "\"xywh\"", ":", "\n", "            ", "area", "=", "box", "[", ":", ",", "2", "]", "*", "box", "[", ":", ",", "3", "]", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Should not be here\"", ")", "\n", "\n", "", "return", "area", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.copy_with_fields": [[383, 393], ["bounding_box.BoxList", "isinstance", "bounding_box.BoxList.has_field", "bounding_box.BoxList.add_field", "bounding_box.BoxList.get_field", "KeyError"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.has_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["", "def", "copy_with_fields", "(", "self", ",", "fields", ",", "skip_missing", "=", "False", ")", ":", "\n", "        ", "bbox", "=", "BoxList", "(", "self", ".", "bbox", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "if", "not", "isinstance", "(", "fields", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "fields", "=", "[", "fields", "]", "\n", "", "for", "field", "in", "fields", ":", "\n", "            ", "if", "self", ".", "has_field", "(", "field", ")", ":", "\n", "                ", "bbox", ".", "add_field", "(", "field", ",", "self", ".", "get_field", "(", "field", ")", ")", "\n", "", "elif", "not", "skip_missing", ":", "\n", "                ", "raise", "KeyError", "(", "\"Field '{}' not found in {}\"", ".", "format", "(", "field", ",", "self", ")", ")", "\n", "", "", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.__repr__": [[394, 401], ["len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "s", "+=", "\"num_boxes={}, \"", ".", "format", "(", "len", "(", "self", ")", ")", "\n", "s", "+=", "\"image_width={}, \"", ".", "format", "(", "self", ".", "size", "[", "0", "]", ")", "\n", "s", "+=", "\"image_height={}, \"", ".", "format", "(", "self", ".", "size", "[", "1", "]", ")", "\n", "s", "+=", "\"mode={})\"", ".", "format", "(", "self", ".", "mode", ")", "\n", "return", "s", "\n", "", "def", "generate_quad_gt", "(", "self", ",", "min_text_size", "=", "40", ",", "difficult_label", "=", "'###'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.generate_quad_gt": [[401, 441], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.ones", "[].reshape", "bounding_box.BoxList.get_field().data.cpu().numpy", "bounding_box.BoxList.get_field", "len", "enumerate", "numpy.zeros.transpose", "zip", "bounding_box.BoxList.get_field().data.cpu", "poly_tag[].reshape", "poly_tag[].reshape", "cv2.fillPoly", "cv2.fillPoly", "bounding_box.shrink", "cv2.fillPoly", "cv2.fillPoly", "cv2.fillPoly", "numpy.argwhere", "bounding_box.get_ordered_polys", "gen_geo_map.gen_trbl_map", "bounding_box.BoxList.bbox.data.cpu().numpy", "cv2.arcLength", "poly.reshape().astype", "poly.reshape().astype", "poly.astype", "shrink.reshape().astype", "shrink.reshape().astype", "shrink.reshape().astype", "poly.astype", "bounding_box.BoxList.bbox.data.cpu", "bounding_box.BoxList.get_field", "poly.reshape", "poly.reshape", "shrink.reshape", "shrink.reshape", "shrink.reshape"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.transpose", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.shrink", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext800k.get_ordered_polys", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["", "def", "generate_quad_gt", "(", "self", ",", "min_text_size", "=", "40", ",", "difficult_label", "=", "'###'", ")", ":", "\n", "        ", "w", ",", "h", "=", "self", ".", "size", "\n", "text_boxes", ",", "text_polys", ",", "text_tags", "=", "self", ".", "bbox", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "(", "0", ",", "1", ",", "2", ",", "1", ",", "2", ",", "3", ",", "0", ",", "3", ")", "]", ".", "reshape", "(", "[", "-", "1", ",", "4", ",", "2", "]", ")", ",", "self", ".", "get_field", "(", "\"polys\"", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "get_field", "(", "\"texts\"", ")", "\n", "# text_polys, text_tags = self.bbox.data.cpu().numpy()[:,(0,1,2,1,2,3,0,3)].reshape([-1,4,2]), self.get_field(\"texts\") #check_and_validate_polys(boxes, tags, (h,w))", "\n", "idx_maps", "=", "np", ".", "zeros", "(", "(", "h", "//", "4", ",", "w", "//", "4", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "pss_maps", "=", "np", ".", "zeros", "(", "(", "1", ",", "h", "//", "4", ",", "w", "//", "4", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "geo_maps", "=", "np", ".", "zeros", "(", "(", "h", "//", "4", ",", "w", "//", "4", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# centerness = np.zeros((h, w, 1), dtype=np.float32)", "\n", "training_mask", "=", "np", ".", "ones", "(", "(", "1", ",", "h", "//", "4", ",", "w", "//", "4", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "areas", "=", "[", "]", "\n", "\n", "if", "len", "(", "text_polys", ")", ">", "0", ":", "\n", "            ", "for", "poly_idx", ",", "poly_tag", "in", "enumerate", "(", "zip", "(", "text_boxes", ",", "text_polys", ",", "text_tags", ")", ")", ":", "\n", "# print(poly_tag)", "\n", "                ", "box", "=", "poly_tag", "[", "0", "]", ".", "reshape", "(", "[", "-", "1", ",", "2", "]", ")", "/", "4", "\n", "poly", "=", "poly_tag", "[", "1", "]", ".", "reshape", "(", "[", "-", "1", ",", "2", "]", ")", "/", "4", "\n", "text", "=", "poly_tag", "[", "2", "]", "\n", "if", "cv2", ".", "arcLength", "(", "poly", ".", "astype", "(", "np", ".", "int32", ")", ",", "True", ")", "<", "min_text_size", "or", "text", "==", "difficult_label", ":", "\n", "                    ", "cv2", ".", "fillPoly", "(", "training_mask", "[", "0", "]", ",", "poly", ".", "reshape", "(", "[", "1", ",", "-", "1", ",", "2", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "                    ", "cv2", ".", "fillPoly", "(", "training_mask", "[", "0", "]", ",", "poly", ".", "reshape", "(", "[", "1", ",", "-", "1", ",", "2", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "0", ")", "\n", "shrinked_poly", "=", "shrink", "(", "poly", ".", "astype", "(", "np", ".", "int32", ")", ",", "0.3", ")", "\n", "cv2", ".", "fillPoly", "(", "idx_maps", ",", "shrinked_poly", ".", "reshape", "(", "[", "1", ",", "-", "1", ",", "2", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "poly_idx", "+", "1", ")", "\n", "cv2", ".", "fillPoly", "(", "training_mask", "[", "0", "]", ",", "shrinked_poly", ".", "reshape", "(", "[", "1", ",", "-", "1", ",", "2", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "1", ")", "\n", "cv2", ".", "fillPoly", "(", "pss_maps", "[", "0", "]", ",", "shrinked_poly", ".", "reshape", "(", "[", "1", ",", "-", "1", ",", "2", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "1", ")", "\n", "\n", "xy_in_poly", "=", "np", ".", "argwhere", "(", "idx_maps", "==", "(", "poly_idx", "+", "1", ")", ")", "\n", "\n", "#   print(order_poly)", "\n", "\n", "order_poly", "=", "get_ordered_polys", "(", "poly", ")", "\n", "gen_geo_map", ".", "gen_trbl_map", "(", "geo_maps", ",", "xy_in_poly", ",", "box", ")", "\n", "# gen_geo_map.centerness(centerness, xy_in_poly,order_poly.reshape([-1,2]).astype(np.float32))", "\n", "# out = np.split(geo_maps,[8,9],axis=2)", "\n", "# print(out[0].shape, out[1].shape)", "\n", "# quad = out[0].transpose((2,0,1))", "\n", "# norm = out[1].transpose((2,0,1))", "\n", "# centerness = centerness.transpose((2,0,1))", "\n", "", "", "", "ltrb", "=", "geo_maps", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "*", "4", "\n", "return", "pss_maps", ",", "ltrb", ",", "training_mask", "#, text_polys, text_tags", "\n", "", "def", "generate_det_retrieval_gt", "(", "self", ",", "min_text_size", "=", "40", ",", "difficult_label", "=", "'###'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.generate_det_retrieval_gt": [[441, 482], ["bounding_box.BoxList.text_generator.filter_words", "bounding_box.BoxList.add_field", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.ones", "enumerate", "bounding_box.BoxList.add_field", "[].reshape", "bounding_box.BoxList.get_field().data.cpu().numpy", "bounding_box.BoxList.get_field", "text_tags.tolist", "numpy.array", "len", "enumerate", "numpy.zeros.transpose", "numpy.zeros.transpose", "len", "zip", "bounding_box.BoxList.text_generator.editdistance", "bounding_box.BoxList.get_field().data.cpu", "poly_tag[].reshape", "poly_tag[].reshape", "cv2.fillPoly", "cv2.fillPoly", "bounding_box.shrink", "cv2.fillPoly", "cv2.fillPoly", "cv2.fillPoly", "numpy.argwhere", "bounding_box.get_ordered_polys", "gen_geo_map.gen_trbl_map", "bounding_box.BoxList.bbox.data.cpu().numpy", "cv2.arcLength", "poly.reshape().astype", "poly.reshape().astype", "poly.astype", "shrink.reshape().astype", "shrink.reshape().astype", "shrink.reshape().astype", "poly.astype", "bounding_box.BoxList.bbox.data.cpu", "bounding_box.BoxList.get_field", "poly.reshape", "poly.reshape", "shrink.reshape", "shrink.reshape", "shrink.reshape"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.filter_words", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.transpose", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.transpose", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.text_util.TextGenerator.editdistance", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.shrink", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext800k.get_ordered_polys", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["", "def", "generate_det_retrieval_gt", "(", "self", ",", "min_text_size", "=", "40", ",", "difficult_label", "=", "'###'", ")", ":", "\n", "        ", "w", ",", "h", "=", "self", ".", "size", "\n", "text_boxes", ",", "text_polys", ",", "text_tags", "=", "self", ".", "bbox", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "(", "0", ",", "1", ",", "2", ",", "1", ",", "2", ",", "3", ",", "0", ",", "3", ")", "]", ".", "reshape", "(", "[", "-", "1", ",", "4", ",", "2", "]", ")", ",", "self", ".", "get_field", "(", "\"polys\"", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "get_field", "(", "\"texts\"", ")", "\n", "idxs", ",", "valid_texts", "=", "self", ".", "text_generator", ".", "filter_words", "(", "text_tags", ".", "tolist", "(", ")", ")", "\n", "self", ".", "add_field", "(", "\"valid_texts\"", ",", "np", ".", "array", "(", "valid_texts", ")", ")", "\n", "# text_polys, text_tags = self.bbox.data.cpu().numpy()[:,(0,1,2,1,2,3,0,3)].reshape([-1,4,2]), self.get_field(\"texts\") #check_and_validate_polys(boxes, tags, (h,w))", "\n", "idx_maps", "=", "np", ".", "zeros", "(", "(", "h", "//", "4", ",", "w", "//", "4", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "pss_maps", "=", "np", ".", "zeros", "(", "(", "1", ",", "h", "//", "4", ",", "w", "//", "4", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "geo_maps", "=", "np", ".", "zeros", "(", "(", "h", "//", "4", ",", "w", "//", "4", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "similarity", "=", "np", ".", "zeros", "(", "(", "h", "//", "4", ",", "w", "//", "4", ",", "len", "(", "idxs", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "training_mask", "=", "np", ".", "ones", "(", "(", "1", ",", "h", "//", "4", ",", "w", "//", "4", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "areas", "=", "[", "]", "\n", "\n", "if", "len", "(", "text_polys", ")", ">", "0", ":", "\n", "            ", "for", "poly_idx", ",", "poly_tag", "in", "enumerate", "(", "zip", "(", "text_boxes", ",", "text_polys", ",", "text_tags", ")", ")", ":", "\n", "# print(poly_tag)", "\n", "                ", "box", "=", "poly_tag", "[", "0", "]", ".", "reshape", "(", "[", "-", "1", ",", "2", "]", ")", "/", "4", "\n", "poly", "=", "poly_tag", "[", "1", "]", ".", "reshape", "(", "[", "-", "1", ",", "2", "]", ")", "/", "4", "\n", "text", "=", "poly_tag", "[", "2", "]", "\n", "if", "cv2", ".", "arcLength", "(", "poly", ".", "astype", "(", "np", ".", "int32", ")", ",", "True", ")", "<", "min_text_size", "or", "text", "==", "difficult_label", "or", "poly_idx", "not", "in", "idxs", ":", "\n", "                    ", "cv2", ".", "fillPoly", "(", "training_mask", "[", "0", "]", ",", "poly", ".", "reshape", "(", "[", "1", ",", "-", "1", ",", "2", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "                    ", "cv2", ".", "fillPoly", "(", "training_mask", "[", "0", "]", ",", "poly", ".", "reshape", "(", "[", "1", ",", "-", "1", ",", "2", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "0", ")", "\n", "shrinked_poly", "=", "shrink", "(", "poly", ".", "astype", "(", "np", ".", "int32", ")", ",", "0.3", ")", "\n", "cv2", ".", "fillPoly", "(", "idx_maps", ",", "shrinked_poly", ".", "reshape", "(", "[", "1", ",", "-", "1", ",", "2", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "poly_idx", "+", "1", ")", "\n", "cv2", ".", "fillPoly", "(", "training_mask", "[", "0", "]", ",", "shrinked_poly", ".", "reshape", "(", "[", "1", ",", "-", "1", ",", "2", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "1", ")", "\n", "cv2", ".", "fillPoly", "(", "pss_maps", "[", "0", "]", ",", "shrinked_poly", ".", "reshape", "(", "[", "1", ",", "-", "1", ",", "2", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "1", ")", "\n", "\n", "xy_in_poly", "=", "np", ".", "argwhere", "(", "idx_maps", "==", "(", "poly_idx", "+", "1", ")", ")", "\n", "\n", "order_poly", "=", "get_ordered_polys", "(", "poly", ")", "\n", "gen_geo_map", ".", "gen_trbl_map", "(", "geo_maps", ",", "xy_in_poly", ",", "box", ")", "\n", "", "", "", "for", "i", ",", "idx1", "in", "enumerate", "(", "idxs", ")", ":", "\n", "            ", "for", "idx2", "in", "idxs", ":", "\n", "                ", "ew", "=", "self", ".", "text_generator", ".", "editdistance", "(", "text_tags", "[", "idx1", "]", ",", "text_tags", "[", "idx2", "]", ")", "\n", "fill_mask", "=", "(", "idx_maps", "==", "(", "idx2", "+", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "similarity", "[", ":", ",", ":", ",", "i", "]", "=", "similarity", "[", ":", ",", ":", ",", "i", "]", "*", "(", "1", "-", "fill_mask", ")", "+", "fill_mask", "*", "ew", "\n", "", "", "self", ".", "add_field", "(", "\"distances\"", ",", "similarity", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "ltrb", "=", "geo_maps", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "*", "4", "\n", "return", "pss_maps", ",", "ltrb", ",", "training_mask", "#, text_polys, text_tags", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.dist": [[14, 16], ["numpy.sqrt", "numpy.sum"], "function", ["None"], ["def", "dist", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "a", "-", "b", ")", "**", "2", ")", ")", "\n", "", "def", "perimeter", "(", "bbox", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.perimeter": [[16, 21], ["range", "bounding_box.dist"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.dist"], ["", "def", "perimeter", "(", "bbox", ")", ":", "\n", "    ", "peri", "=", "0.0", "\n", "for", "i", "in", "range", "(", "bbox", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "peri", "+=", "dist", "(", "bbox", "[", "i", "]", ",", "bbox", "[", "(", "i", "+", "1", ")", "%", "bbox", ".", "shape", "[", "0", "]", "]", ")", "\n", "", "return", "peri", "\n", "", "def", "shrink", "(", "bbox", ",", "rate", ",", "max_shr", "=", "20", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.shrink": [[21, 38], ["Polygon.Polygon().area", "bounding_box.perimeter", "pyclipper.PyclipperOffset", "pyclipper.PyclipperOffset.AddPath", "min", "pyclipper.PyclipperOffset.Execute", "numpy.array", "int", "len", "Polygon.Polygon"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.perimeter", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "shrink", "(", "bbox", ",", "rate", ",", "max_shr", "=", "20", ")", ":", "\n", "    ", "rate", "=", "rate", "*", "rate", "\n", "area", "=", "plg", ".", "Polygon", "(", "bbox", ")", ".", "area", "(", ")", "\n", "peri", "=", "perimeter", "(", "bbox", ")", "\n", "\n", "pco", "=", "pyclipper", ".", "PyclipperOffset", "(", ")", "\n", "pco", ".", "AddPath", "(", "bbox", ",", "pyclipper", ".", "JT_ROUND", ",", "pyclipper", ".", "ET_CLOSEDPOLYGON", ")", "\n", "offset", "=", "min", "(", "(", "int", ")", "(", "area", "*", "(", "1", "-", "rate", ")", "/", "(", "peri", "+", "0.001", ")", "+", "0.5", ")", ",", "max_shr", ")", "\n", "\n", "shrinked_bbox", "=", "pco", ".", "Execute", "(", "-", "offset", ")", "\n", "if", "len", "(", "shrinked_bbox", ")", "==", "0", ":", "\n", "        ", "return", "bbox", "\n", "\n", "", "shrinked_bbox", "=", "np", ".", "array", "(", "shrinked_bbox", "[", "0", "]", ")", "\n", "if", "shrinked_bbox", ".", "shape", "[", "0", "]", "<=", "2", ":", "\n", "        ", "shrinked_bbox", "=", "bbox", "\n", "", "return", "shrinked_bbox", "\n", "", "def", "get_ordered_polys", "(", "cnt", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.get_ordered_polys": [[38, 64], ["list", "sorted", "numpy.array"], "function", ["None"], ["", "def", "get_ordered_polys", "(", "cnt", ")", ":", "\n", "    ", "points", "=", "list", "(", "cnt", ")", "\n", "ps", "=", "sorted", "(", "points", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "\n", "if", "ps", "[", "1", "]", "[", "1", "]", ">", "ps", "[", "0", "]", "[", "1", "]", ":", "\n", "        ", "px1", "=", "ps", "[", "0", "]", "[", "0", "]", "\n", "py1", "=", "ps", "[", "0", "]", "[", "1", "]", "\n", "px4", "=", "ps", "[", "1", "]", "[", "0", "]", "\n", "py4", "=", "ps", "[", "1", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "px1", "=", "ps", "[", "1", "]", "[", "0", "]", "\n", "py1", "=", "ps", "[", "1", "]", "[", "1", "]", "\n", "px4", "=", "ps", "[", "0", "]", "[", "0", "]", "\n", "py4", "=", "ps", "[", "0", "]", "[", "1", "]", "\n", "", "if", "ps", "[", "3", "]", "[", "1", "]", ">", "ps", "[", "2", "]", "[", "1", "]", ":", "\n", "        ", "px2", "=", "ps", "[", "2", "]", "[", "0", "]", "\n", "py2", "=", "ps", "[", "2", "]", "[", "1", "]", "\n", "px3", "=", "ps", "[", "3", "]", "[", "0", "]", "\n", "py3", "=", "ps", "[", "3", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "px2", "=", "ps", "[", "3", "]", "[", "0", "]", "\n", "py2", "=", "ps", "[", "3", "]", "[", "1", "]", "\n", "px3", "=", "ps", "[", "2", "]", "[", "0", "]", "\n", "py3", "=", "ps", "[", "2", "]", "[", "1", "]", "\n", "\n", "", "return", "np", ".", "array", "(", "[", "[", "px1", ",", "py1", "]", ",", "[", "px2", ",", "py2", "]", ",", "[", "px3", ",", "py3", "]", ",", "[", "px4", ",", "py4", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.boxlist_nms": [[9, 32], ["boxlist.convert.convert", "boxlist.convert.get_field", "maskrcnn_benchmark.layers.nms", "boxlist.convert.convert"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert"], ["def", "boxlist_nms", "(", "boxlist", ",", "nms_thresh", ",", "max_proposals", "=", "-", "1", ",", "score_field", "=", "\"scores\"", ")", ":", "\n", "    ", "\"\"\"\n    Performs non-maximum suppression on a boxlist, with scores specified\n    in a boxlist field via score_field.\n\n    Arguments:\n        boxlist(BoxList)\n        nms_thresh (float)\n        max_proposals (int): if > 0, then only the top max_proposals are kept\n            after non-maximum suppression\n        score_field (str)\n    \"\"\"", "\n", "if", "nms_thresh", "<=", "0", ":", "\n", "        ", "return", "boxlist", "\n", "", "mode", "=", "boxlist", ".", "mode", "\n", "boxlist", "=", "boxlist", ".", "convert", "(", "\"xyxy\"", ")", "\n", "boxes", "=", "boxlist", ".", "bbox", "\n", "score", "=", "boxlist", ".", "get_field", "(", "score_field", ")", "\n", "keep", "=", "_box_nms", "(", "boxes", ",", "score", ",", "nms_thresh", ")", "\n", "if", "max_proposals", ">", "0", ":", "\n", "        ", "keep", "=", "keep", "[", ":", "max_proposals", "]", "\n", "", "boxlist", "=", "boxlist", "[", "keep", "]", "\n", "return", "boxlist", ".", "convert", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.remove_small_boxes": [[34, 49], ["xywh_boxes.unbind", "boxlist.convert"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert"], ["", "def", "remove_small_boxes", "(", "boxlist", ",", "min_size", ")", ":", "\n", "    ", "\"\"\"\n    Only keep boxes with both sides >= min_size\n\n    Arguments:\n        boxlist (Boxlist)\n        min_size (int)\n    \"\"\"", "\n", "# TODO maybe add an API for querying the ws / hs", "\n", "xywh_boxes", "=", "boxlist", ".", "convert", "(", "\"xywh\"", ")", ".", "bbox", "\n", "_", ",", "_", ",", "ws", ",", "hs", "=", "xywh_boxes", ".", "unbind", "(", "dim", "=", "1", ")", "\n", "keep", "=", "(", "\n", "(", "ws", ">=", "min_size", ")", "&", "(", "hs", ">=", "min_size", ")", "\n", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "return", "boxlist", "[", "keep", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.boxlist_iou": [[53, 90], ["boxlist1.convert.convert", "boxlist2.convert.convert", "len", "len", "boxlist1.convert.area", "boxlist2.convert.area", "torch.max", "torch.min", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area"], ["", "def", "boxlist_iou", "(", "boxlist1", ",", "boxlist2", ")", ":", "\n", "    ", "\"\"\"Compute the intersection over union of two set of boxes.\n    The box order must be (xmin, ymin, xmax, ymax).\n\n    Arguments:\n      box1: (BoxList) bounding boxes, sized [N,4].\n      box2: (BoxList) bounding boxes, sized [M,4].\n\n    Returns:\n      (tensor) iou, sized [N,M].\n\n    Reference:\n      https://github.com/chainer/chainercv/blob/master/chainercv/utils/bbox/bbox_iou.py\n    \"\"\"", "\n", "if", "boxlist1", ".", "size", "!=", "boxlist2", ".", "size", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"boxlists should have same image size, got {}, {}\"", ".", "format", "(", "boxlist1", ",", "boxlist2", ")", ")", "\n", "", "boxlist1", "=", "boxlist1", ".", "convert", "(", "\"xyxy\"", ")", "\n", "boxlist2", "=", "boxlist2", ".", "convert", "(", "\"xyxy\"", ")", "\n", "N", "=", "len", "(", "boxlist1", ")", "\n", "M", "=", "len", "(", "boxlist2", ")", "\n", "\n", "area1", "=", "boxlist1", ".", "area", "(", ")", "\n", "area2", "=", "boxlist2", ".", "area", "(", ")", "\n", "\n", "box1", ",", "box2", "=", "boxlist1", ".", "bbox", ",", "boxlist2", ".", "bbox", "\n", "\n", "lt", "=", "torch", ".", "max", "(", "box1", "[", ":", ",", "None", ",", ":", "2", "]", ",", "box2", "[", ":", ",", ":", "2", "]", ")", "# [N,M,2]", "\n", "rb", "=", "torch", ".", "min", "(", "box1", "[", ":", ",", "None", ",", "2", ":", "]", ",", "box2", "[", ":", ",", "2", ":", "]", ")", "# [N,M,2]", "\n", "\n", "TO_REMOVE", "=", "1", "\n", "\n", "wh", "=", "(", "rb", "-", "lt", "+", "TO_REMOVE", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [N,M,2]", "\n", "inter", "=", "wh", "[", ":", ",", ":", ",", "0", "]", "*", "wh", "[", ":", ",", ":", ",", "1", "]", "# [N,M]", "\n", "\n", "iou", "=", "inter", "/", "(", "area1", "[", ":", ",", "None", "]", "+", "area2", "-", "inter", ")", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops._cat": [[93, 101], ["isinstance", "torch.cat", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "_cat", "(", "tensors", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Efficient version of torch.cat that avoids a copy if there is only a single element in a list\n    \"\"\"", "\n", "assert", "isinstance", "(", "tensors", ",", "(", "list", ",", "tuple", ")", ")", "\n", "if", "len", "(", "tensors", ")", "==", "1", ":", "\n", "        ", "return", "tensors", "[", "0", "]", "\n", "", "return", "torch", ".", "cat", "(", "tensors", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.cat_boxlist": [[103, 130], ["isinstance", "all", "all", "all", "set", "all", "bounding_box.BoxList", "bboxes[].fields", "boxlist_ops._cat", "boxlist_ops._cat", "bounding_box.BoxList.add_field", "isinstance", "set", "bbox.get_field", "bbox.fields"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops._cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops._cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.fields"], ["", "def", "cat_boxlist", "(", "bboxes", ")", ":", "\n", "    ", "\"\"\"\n    Concatenates a list of BoxList (having the same image size) into a\n    single BoxList\n\n    Arguments:\n        bboxes (list[BoxList])\n    \"\"\"", "\n", "assert", "isinstance", "(", "bboxes", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "all", "(", "isinstance", "(", "bbox", ",", "BoxList", ")", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "size", "=", "bboxes", "[", "0", "]", ".", "size", "\n", "assert", "all", "(", "bbox", ".", "size", "==", "size", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "mode", "=", "bboxes", "[", "0", "]", ".", "mode", "\n", "assert", "all", "(", "bbox", ".", "mode", "==", "mode", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "fields", "=", "set", "(", "bboxes", "[", "0", "]", ".", "fields", "(", ")", ")", "\n", "assert", "all", "(", "set", "(", "bbox", ".", "fields", "(", ")", ")", "==", "fields", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "cat_boxes", "=", "BoxList", "(", "_cat", "(", "[", "bbox", ".", "bbox", "for", "bbox", "in", "bboxes", "]", ",", "dim", "=", "0", ")", ",", "size", ",", "mode", ")", "\n", "\n", "for", "field", "in", "fields", ":", "\n", "        ", "data", "=", "_cat", "(", "[", "bbox", ".", "get_field", "(", "field", ")", "for", "bbox", "in", "bboxes", "]", ",", "dim", "=", "0", ")", "\n", "cat_boxes", ".", "add_field", "(", "field", ",", "data", ")", "\n", "\n", "", "return", "cat_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.cat_boxlist_texts": [[131, 165], ["isinstance", "all", "all", "all", "set", "all", "bounding_box.BoxList", "bboxes[].fields", "boxlist_ops._cat", "isinstance", "bounding_box.BoxList.add_field", "boxlist_ops._cat", "bounding_box.BoxList.add_field", "set", "_cat.extend", "numpy.array", "bbox.fields", "bbox.get_field", "bbox.get_field"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops._cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops._cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["", "def", "cat_boxlist_texts", "(", "bboxes", ",", "fields_extend", "=", "[", "\"texts\"", "]", ")", ":", "\n", "    ", "\"\"\"\n    Concatenates a list of BoxList (having the same image size) into a\n    single BoxList\n\n    Arguments:\n        bboxes (list[BoxList])\n    \"\"\"", "\n", "assert", "isinstance", "(", "bboxes", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "all", "(", "isinstance", "(", "bbox", ",", "BoxList", ")", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "size", "=", "bboxes", "[", "0", "]", ".", "size", "\n", "assert", "all", "(", "bbox", ".", "size", "==", "size", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "mode", "=", "bboxes", "[", "0", "]", ".", "mode", "\n", "assert", "all", "(", "bbox", ".", "mode", "==", "mode", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "fields", "=", "set", "(", "bboxes", "[", "0", "]", ".", "fields", "(", ")", ")", "\n", "assert", "all", "(", "set", "(", "bbox", ".", "fields", "(", ")", ")", "==", "fields", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "cat_boxes", "=", "BoxList", "(", "_cat", "(", "[", "bbox", ".", "bbox", "for", "bbox", "in", "bboxes", "]", ",", "dim", "=", "0", ")", ",", "size", ",", "mode", ")", "\n", "\n", "for", "field", "in", "fields", ":", "\n", "        ", "if", "field", "in", "fields_extend", ":", "\n", "            ", "data", "=", "[", "]", "\n", "for", "bbox", "in", "bboxes", ":", "\n", "                ", "data", ".", "extend", "(", "bbox", ".", "get_field", "(", "field", ")", ")", "\n", "", "cat_boxes", ".", "add_field", "(", "field", ",", "np", ".", "array", "(", "data", ")", ")", "\n", "", "else", ":", "\n", "# print(field)", "\n", "            ", "data", "=", "_cat", "(", "[", "bbox", ".", "get_field", "(", "field", ")", "for", "bbox", "in", "bboxes", "]", ",", "dim", "=", "0", ")", "\n", "cat_boxes", ".", "add_field", "(", "field", ",", "data", ")", "\n", "\n", "", "", "return", "cat_boxes", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.config.paths_catalog.DatasetCatalog.get": [[84, 351], ["RuntimeError", "dict", "dict", "dict", "dict", "os.path.join", "dict", "dict", "dict", "dict", "os.path.join", "dict", "dict", "os.path.join", "dict", "dict", "os.path.join", "dict", "dict", "os.path.join", "dict", "dict", "dict", "dict", "os.path.join", "os.path.join", "dict", "dict", "os.path.join", "dict", "dict", "os.path.join", "dict", "dict", "os.path.join", "dict", "dict", "os.path.join", "dict", "dict", "os.path.join", "dict", "dict", "os.path.join", "dict", "dict", "os.path.join", "dict", "dict", "os.path.join", "dict", "dict", "os.path.join", "dict", "dict", "os.path.join", "dict", "dict", "os.path.join", "dict", "dict", "os.path.join", "os.path.join"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "get", "(", "name", ")", ":", "\n", "        ", "if", "\"icdar\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "if", "\"train\"", "in", "name", ":", "\n", "                ", "is_train", "=", "True", "\n", "", "elif", "\"test\"", "in", "name", ":", "\n", "                ", "is_train", "=", "False", "\n", "", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "is_train", "=", "is_train", ",", "\n", "augment", "=", "None", "\n", ")", "\n", "if", "\"15\"", "in", "name", ":", "\n", "                ", "return", "dict", "(", "\n", "factory", "=", "\"Icdar15Dateset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"17\"", "in", "name", ":", "\n", "                ", "return", "dict", "(", "\n", "factory", "=", "\"Icdar17Dateset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"13\"", "in", "name", ":", "\n", "                ", "return", "dict", "(", "\n", "factory", "=", "\"Icdar13Dateset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "\n", "\n", "", "", "elif", "\"rects\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "is_train", "=", "(", "\"train\"", "in", "name", ")", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"RectsDateset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"TD500\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "is_train", "=", "(", "\"train\"", "in", "name", ")", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"TD500Dateset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"ctw1500\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "is_train", "=", "(", "\"train\"", "in", "name", ")", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"Ctw1500Dateset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"totaltext\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "is_train", "=", "(", "\"train\"", "in", "name", ")", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"TotalTextDateset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"mlt\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "if", "\"train\"", "in", "name", ":", "\n", "                ", "is_train", "=", "True", "\n", "", "else", ":", "\n", "                ", "is_train", "=", "False", "\n", "", "args", "=", "dict", "(", "\n", "data_dir", "=", "{", "os", ".", "path", ".", "join", "(", "data_dir", ",", "dataset", ")", "for", "dataset", "in", "attrs", "[", "\"data_dir\"", "]", "}", ",", "\n", "is_train", "=", "is_train", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"MLTDateset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "# elif \"synthtext\" in name:", "\n", "#     data_dir = DatasetCatalog.DATA_DIR", "\n", "#     attrs = DatasetCatalog.DATASETS[name]", "\n", "#     args = dict(", "\n", "#         data_dir=os.path.join(data_dir, attrs[\"data_dir\"]),", "\n", "#         is_train=True", "\n", "#     )", "\n", "#     return dict(", "\n", "#         factory=\"SynthTextDateset\",", "\n", "#         args=args,", "\n", "#     )", "\n", "", "elif", "\"cocotext_anno\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "is_train", "=", "False", ",", "\n", "augment", "=", "None", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"COCOTextAnnoDateset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"synthtext90k_crop\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "is_train", "=", "True", ",", "\n", "augment", "=", "None", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"SynthText90kCropDateset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"synthtext90k\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "is_train", "=", "True", ",", "\n", "augment", "=", "None", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"SynthText90kDateset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"synthtext800k\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "is_train", "=", "True", ",", "\n", "augment", "=", "None", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"SynthTextDataset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"synthtext150k\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "is_train", "=", "True", ",", "\n", "augment", "=", "None", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"SynthText150kDataset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"verisimilar\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "is_train", "=", "True", ",", "\n", "augment", "=", "None", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"VeriSimilarDateset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"synthtext_chinese\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "is_train", "=", "True", ",", "\n", "augment", "=", "None", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"SynthtextChineseDataset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"chinese_collect\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "is_train", "=", "False", ",", "\n", "augment", "=", "None", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"ChineseCollectDataset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"svt\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "is_train", "=", "(", "\"train\"", "in", "name", ")", ",", "\n", "augment", "=", "None", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"SVTDataset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"iiit\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "is_train", "=", "(", "\"train\"", "in", "name", ")", ",", "\n", "augment", "=", "None", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"IIITDataset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"cocotext\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "is_train", "=", "(", "\"train\"", "in", "name", ")", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"COCOTextDataset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"rctw\"", "in", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "is_train", "=", "(", "\"train\"", "in", "name", ")", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"RCTWDataset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"ctw_train\"", "==", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "is_train", "=", "(", "\"train\"", "in", "name", ")", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"CTWTrainDataset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"ctw_test\"", "==", "name", ":", "\n", "            ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "is_train", "=", "(", "\"train\"", "in", "name", ")", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"CTWRetrievalDataset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "\n", "", "raise", "RuntimeError", "(", "\"Dataset not available: {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.config.paths_catalog.ModelCatalog.get": [[378, 385], ["name.startswith", "name.startswith", "RuntimeError", "paths_catalog.ModelCatalog.get_c2_detectron_12_2017_baselines", "paths_catalog.ModelCatalog.get_c2_imagenet_pretrained"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.config.paths_catalog.ModelCatalog.get_c2_detectron_12_2017_baselines", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.config.paths_catalog.ModelCatalog.get_c2_imagenet_pretrained"], ["@", "staticmethod", "\n", "def", "get", "(", "name", ")", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "\"Caffe2Detectron/COCO\"", ")", ":", "\n", "            ", "return", "ModelCatalog", ".", "get_c2_detectron_12_2017_baselines", "(", "name", ")", "\n", "", "if", "name", ".", "startswith", "(", "\"ImageNetPretrained\"", ")", ":", "\n", "            ", "return", "ModelCatalog", ".", "get_c2_imagenet_pretrained", "(", "name", ")", "\n", "", "raise", "RuntimeError", "(", "\"model not present in the catalog {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.config.paths_catalog.ModelCatalog.get_c2_imagenet_pretrained": [[386, 393], ["len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "@", "staticmethod", "\n", "def", "get_c2_imagenet_pretrained", "(", "name", ")", ":", "\n", "        ", "prefix", "=", "ModelCatalog", ".", "S3_C2_DETECTRON_URL", "\n", "name", "=", "name", "[", "len", "(", "\"ImageNetPretrained/\"", ")", ":", "]", "\n", "name", "=", "ModelCatalog", ".", "C2_IMAGENET_MODELS", "[", "name", "]", "\n", "url", "=", "\"/\"", ".", "join", "(", "[", "prefix", ",", "name", "]", ")", "\n", "return", "url", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.config.paths_catalog.ModelCatalog.get_c2_detectron_12_2017_baselines": [[394, 412], ["ModelCatalog.C2_DETECTRON_SUFFIX.format", "name.split", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "@", "staticmethod", "\n", "def", "get_c2_detectron_12_2017_baselines", "(", "name", ")", ":", "\n", "# Detectron C2 models are stored following the structure", "\n", "# prefix/<model_id>/2012_2017_baselines/<model_name>.yaml.<signature>/suffix", "\n", "# we use as identifiers in the catalog Caffe2Detectron/COCO/<model_id>/<model_name>", "\n", "        ", "prefix", "=", "ModelCatalog", ".", "S3_C2_DETECTRON_URL", "\n", "dataset_tag", "=", "\"keypoints_\"", "if", "\"keypoint\"", "in", "name", "else", "\"\"", "\n", "suffix", "=", "ModelCatalog", ".", "C2_DETECTRON_SUFFIX", ".", "format", "(", "dataset_tag", ",", "dataset_tag", ")", "\n", "# remove identification prefix", "\n", "name", "=", "name", "[", "len", "(", "\"Caffe2Detectron/COCO/\"", ")", ":", "]", "\n", "# split in <model_id> and <model_name>", "\n", "model_id", ",", "model_name", "=", "name", ".", "split", "(", "\"/\"", ")", "\n", "# parsing to make it match the url address from the Caffe2 models", "\n", "model_name", "=", "\"{}.yaml\"", ".", "format", "(", "model_name", ")", "\n", "signature", "=", "ModelCatalog", ".", "C2_DETECTRON_MODELS", "[", "name", "]", "\n", "unique_name", "=", "\".\"", ".", "join", "(", "[", "model_name", ",", "signature", "]", ")", "\n", "url", "=", "\"/\"", ".", "join", "(", "[", "prefix", ",", "model_id", ",", "\"12_2017_baselines\"", ",", "unique_name", ",", "suffix", "]", ")", "\n", "return", "url", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers._utils._load_C_extensions": [[14, 36], ["os.path.dirname", "os.path.dirname", "os.path.join", "glob.glob", "glob.glob", "glob.glob", "load_ext", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "torch.cuda.is_available", "source.extend", "os.path.join"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend"], ["", "def", "_load_C_extensions", "(", ")", ":", "\n", "    ", "this_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "this_dir", "=", "os", ".", "path", ".", "dirname", "(", "this_dir", ")", "\n", "this_dir", "=", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"csrc\"", ")", "\n", "\n", "main_file", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"*.cpp\"", ")", ")", "\n", "source_cpu", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"cpu\"", ",", "\"*.cpp\"", ")", ")", "\n", "source_cuda", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"cuda\"", ",", "\"*.cu\"", ")", ")", "\n", "\n", "source", "=", "main_file", "+", "source_cpu", "\n", "\n", "extra_cflags", "=", "[", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "CUDA_HOME", "is", "not", "None", ":", "\n", "        ", "source", ".", "extend", "(", "source_cuda", ")", "\n", "extra_cflags", "=", "[", "\"-DWITH_CUDA\"", "]", "\n", "", "source", "=", "[", "os", ".", "path", ".", "join", "(", "this_dir", ",", "s", ")", "for", "s", "in", "source", "]", "\n", "extra_include_paths", "=", "[", "this_dir", "]", "\n", "return", "load_ext", "(", "\n", "\"torchvision\"", ",", "\n", "source", ",", "\n", "extra_cflags", "=", "extra_cflags", ",", "\n", "extra_include_paths", "=", "extra_include_paths", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.sigmoid_focal_loss._SigmoidFocalLoss.forward": [[10, 22], ["ctx.save_for_backward", "maskrcnn_benchmark._C.sigmoid_focalloss_forward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "logits", ",", "targets", ",", "gamma", ",", "alpha", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "logits", ",", "targets", ")", "\n", "num_classes", "=", "logits", ".", "shape", "[", "1", "]", "\n", "ctx", ".", "num_classes", "=", "num_classes", "\n", "ctx", ".", "gamma", "=", "gamma", "\n", "ctx", ".", "alpha", "=", "alpha", "\n", "\n", "losses", "=", "_C", ".", "sigmoid_focalloss_forward", "(", "\n", "logits", ",", "targets", ",", "num_classes", ",", "gamma", ",", "alpha", "\n", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.sigmoid_focal_loss._SigmoidFocalLoss.backward": [[23, 35], ["d_loss.contiguous.contiguous.contiguous", "maskrcnn_benchmark._C.sigmoid_focalloss_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "d_loss", ")", ":", "\n", "        ", "logits", ",", "targets", "=", "ctx", ".", "saved_tensors", "\n", "num_classes", "=", "ctx", ".", "num_classes", "\n", "gamma", "=", "ctx", ".", "gamma", "\n", "alpha", "=", "ctx", ".", "alpha", "\n", "d_loss", "=", "d_loss", ".", "contiguous", "(", ")", "\n", "d_logits", "=", "_C", ".", "sigmoid_focalloss_backward", "(", "\n", "logits", ",", "targets", ",", "d_loss", ",", "num_classes", ",", "gamma", ",", "alpha", "\n", ")", "\n", "return", "d_logits", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.sigmoid_focal_loss.SigmoidFocalLoss.__init__": [[56, 60], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ",", "alpha", ")", ":", "\n", "        ", "super", "(", "SigmoidFocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.sigmoid_focal_loss.SigmoidFocalLoss.forward": [[61, 69], ["loss_func", "loss_func.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "targets", ")", ":", "\n", "        ", "if", "logits", ".", "is_cuda", ":", "\n", "            ", "loss_func", "=", "sigmoid_focal_loss_cuda", "\n", "", "else", ":", "\n", "            ", "loss_func", "=", "sigmoid_focal_loss_cpu", "\n", "\n", "", "loss", "=", "loss_func", "(", "logits", ",", "targets", ",", "self", ".", "gamma", ",", "self", ".", "alpha", ")", "\n", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.sigmoid_focal_loss.SigmoidFocalLoss.__repr__": [[70, 76], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "tmpstr", "+=", "\"gamma=\"", "+", "str", "(", "self", ".", "gamma", ")", "\n", "tmpstr", "+=", "\", alpha=\"", "+", "str", "(", "self", ".", "alpha", ")", "\n", "tmpstr", "+=", "\")\"", "\n", "return", "tmpstr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.sigmoid_focal_loss.sigmoid_focal_loss_cpu": [[40, 53], ["torch.arange().unsqueeze", "targets.unsqueeze", "torch.sigmoid", "torch.log", "torch.log", "torch.arange"], "function", ["None"], ["def", "sigmoid_focal_loss_cpu", "(", "logits", ",", "targets", ",", "gamma", ",", "alpha", ")", ":", "\n", "    ", "num_classes", "=", "logits", ".", "shape", "[", "1", "]", "\n", "gamma", "=", "gamma", "[", "0", "]", "\n", "alpha", "=", "alpha", "[", "0", "]", "\n", "dtype", "=", "targets", ".", "dtype", "\n", "device", "=", "targets", ".", "device", "\n", "class_range", "=", "torch", ".", "arange", "(", "1", ",", "num_classes", "+", "1", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "t", "=", "targets", ".", "unsqueeze", "(", "1", ")", "\n", "p", "=", "torch", ".", "sigmoid", "(", "logits", ")", "\n", "term1", "=", "(", "1", "-", "p", ")", "**", "gamma", "*", "torch", ".", "log", "(", "p", ")", "\n", "term2", "=", "p", "**", "gamma", "*", "torch", ".", "log", "(", "1", "-", "p", ")", "\n", "return", "-", "(", "t", "==", "class_range", ")", ".", "float", "(", ")", "*", "term1", "*", "alpha", "-", "(", "(", "t", "!=", "class_range", ")", "*", "(", "t", ">=", "0", ")", ")", ".", "float", "(", ")", "*", "term2", "*", "(", "1", "-", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.non_local.NonLocal2D.__init__": [[17, 54], ["torch.Module.__init__", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform.", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform.", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform.", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform."], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.conv_with_kaiming_uniform", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.make_layers.conv_with_kaiming_uniform"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "reduction", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "use_gn", "=", "False", ",", "\n", "use_deformable", "=", "False", ",", "\n", "mode", "=", "'embedded_gaussian'", ")", ":", "\n", "        ", "super", "(", "NonLocal2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "use_scale", "=", "use_scale", "\n", "self", ".", "inter_channels", "=", "in_channels", "//", "reduction", "\n", "self", ".", "mode", "=", "mode", "\n", "assert", "mode", "in", "[", "'embedded_gaussian'", ",", "'dot_product'", "]", "\n", "\n", "# g, theta, phi are actually `nn.Conv2d`. Here we use ConvModule for", "\n", "# potential usage.", "\n", "ConvModule", "=", "conv_with_kaiming_uniform", "(", ")", "\n", "last_conv", "=", "conv_with_kaiming_uniform", "(", "\n", "use_gn", "=", "use_gn", ",", "\n", "use_deformable", "=", "use_deformable", ")", "\n", "self", ".", "g", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ")", "\n", "self", ".", "theta", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ")", "\n", "self", ".", "phi", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv_out", "=", "last_conv", "(", "\n", "self", ".", "inter_channels", ",", "\n", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.non_local.NonLocal2D.embedded_gaussian": [[55, 63], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "pairwise_weight.softmax.softmax.softmax"], "methods", ["None"], ["", "def", "embedded_gaussian", "(", "self", ",", "theta_x", ",", "phi_x", ")", ":", "\n", "# pairwise_weight: [N, HxW, HxW]", "\n", "        ", "pairwise_weight", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "if", "self", ".", "use_scale", ":", "\n", "# theta_x.shape[-1] is `self.inter_channels`", "\n", "            ", "pairwise_weight", "/=", "theta_x", ".", "shape", "[", "-", "1", "]", "**", "-", "0.5", "\n", "", "pairwise_weight", "=", "pairwise_weight", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "return", "pairwise_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.non_local.NonLocal2D.dot_product": [[64, 69], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "dot_product", "(", "self", ",", "theta_x", ",", "phi_x", ")", ":", "\n", "# pairwise_weight: [N, HxW, HxW]", "\n", "        ", "pairwise_weight", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "pairwise_weight", "/=", "pairwise_weight", ".", "shape", "[", "-", "1", "]", "\n", "return", "pairwise_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.non_local.NonLocal2D.forward": [[70, 96], ["non_local.NonLocal2D.g().view", "g_x.permute.permute.permute", "non_local.NonLocal2D.theta().view", "theta_x.permute.permute.permute", "non_local.NonLocal2D.phi().view", "getattr", "getattr.", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "y.permute().reshape.permute().reshape.permute().reshape", "non_local.NonLocal2D.conv_out", "non_local.NonLocal2D.g", "non_local.NonLocal2D.theta", "non_local.NonLocal2D.phi", "y.permute().reshape.permute().reshape.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "n", ",", "_", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "\n", "# g_x: [N, HxW, C]", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "# theta_x: [N, HxW, C]", "\n", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "# phi_x: [N, C, HxW]", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "\n", "pairwise_func", "=", "getattr", "(", "self", ",", "self", ".", "mode", ")", "\n", "# pairwise_weight: [N, HxW, HxW]", "\n", "pairwise_weight", "=", "pairwise_func", "(", "theta_x", ",", "phi_x", ")", "\n", "\n", "# y: [N, HxW, C]", "\n", "y", "=", "torch", ".", "matmul", "(", "pairwise_weight", ",", "g_x", ")", "\n", "# y: [N, C, H, W]", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "n", ",", "self", ".", "inter_channels", ",", "h", ",", "w", ")", "\n", "\n", "output", "=", "x", "+", "self", ".", "conv_out", "(", "y", ")", "\n", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.balanced_l1_loss.BalancedL1Loss.__init__": [[54, 60], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "alpha", "=", "0.5", ",", "gamma", "=", "1.5", ",", "beta", "=", "1.0", ",", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "BalancedL1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.balanced_l1_loss.BalancedL1Loss.forward": [[61, 72], ["balanced_l1_loss.weighted_balanced_l1_loss"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.balanced_l1_loss.weighted_balanced_l1_loss"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "weight", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "loss_bbox", "=", "self", ".", "loss_weight", "*", "weighted_balanced_l1_loss", "(", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", ",", "\n", "alpha", "=", "self", ".", "alpha", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "beta", "=", "self", ".", "beta", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", "\n", "return", "loss_bbox", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.balanced_l1_loss.balanced_l1_loss": [[8, 34], ["torch.abs", "torch.where", "torch.nn.functional._Reduction.get_enum", "pred.size", "target.size", "target.numel", "torch.log", "torch.where.sum", "pred.numel", "torch.where.sum"], "function", ["None"], ["def", "balanced_l1_loss", "(", "pred", ",", "\n", "target", ",", "\n", "beta", "=", "1.0", ",", "\n", "alpha", "=", "0.5", ",", "\n", "gamma", "=", "1.5", ",", "\n", "reduction", "=", "'none'", ")", ":", "\n", "    ", "assert", "beta", ">", "0", "\n", "assert", "pred", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", "and", "target", ".", "numel", "(", ")", ">", "0", "\n", "\n", "diff", "=", "torch", ".", "abs", "(", "pred", "-", "target", ")", "\n", "b", "=", "np", ".", "e", "**", "(", "gamma", "/", "alpha", ")", "-", "1", "\n", "loss", "=", "torch", ".", "where", "(", "\n", "diff", "<", "beta", ",", "alpha", "/", "b", "*", "\n", "(", "b", "*", "diff", "+", "1", ")", "*", "torch", ".", "log", "(", "b", "*", "diff", "/", "beta", "+", "1", ")", "-", "alpha", "*", "diff", ",", "\n", "gamma", "*", "diff", "+", "gamma", "/", "b", "-", "alpha", "*", "beta", ")", "\n", "\n", "reduction_enum", "=", "F", ".", "_Reduction", ".", "get_enum", "(", "reduction", ")", "\n", "# none: 0, elementwise_mean:1, sum: 2", "\n", "if", "reduction_enum", "==", "0", ":", "\n", "        ", "return", "loss", "\n", "", "elif", "reduction_enum", "==", "1", ":", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "/", "pred", ".", "numel", "(", ")", "\n", "", "elif", "reduction_enum", "==", "2", ":", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.balanced_l1_loss.weighted_balanced_l1_loss": [[36, 47], ["balanced_l1_loss.balanced_l1_loss", "torch.sum().float().item", "torch.sum", "torch.sum().float", "balanced_l1_loss.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.balanced_l1_loss.balanced_l1_loss"], ["", "def", "weighted_balanced_l1_loss", "(", "pred", ",", "\n", "target", ",", "\n", "weight", ",", "\n", "beta", "=", "1.0", ",", "\n", "alpha", "=", "0.5", ",", "\n", "gamma", "=", "1.5", ",", "\n", "avg_factor", "=", "None", ")", ":", "\n", "    ", "if", "avg_factor", "is", "None", ":", "\n", "        ", "avg_factor", "=", "torch", ".", "sum", "(", "weight", ">", "0", ")", ".", "float", "(", ")", ".", "item", "(", ")", "+", "1e-6", "\n", "", "loss", "=", "balanced_l1_loss", "(", "pred", ",", "target", ",", "beta", ",", "alpha", ",", "gamma", ",", "reduction", "=", "'none'", ")", "\n", "return", "torch", ".", "sum", "(", "loss", ".", "sum", "(", "dim", "=", "1", ")", "*", "weight", ")", "[", "None", "]", "/", "avg_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.scale.Scale.__init__": [[6, 9], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "init_value", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "Scale", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "init_value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.scale.Scale.forward": [[10, 12], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "self", ".", "scale", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.roi_pool._ROIPool.forward": [[13, 23], ["torch.nn.modules.utils._pair", "input.size", "maskrcnn_benchmark._C.roi_pool_forward", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "roi", ",", "output_size", ",", "spatial_scale", ")", ":", "\n", "        ", "ctx", ".", "output_size", "=", "_pair", "(", "output_size", ")", "\n", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "output", ",", "argmax", "=", "_C", ".", "roi_pool_forward", "(", "\n", "input", ",", "roi", ",", "spatial_scale", ",", "output_size", "[", "0", "]", ",", "output_size", "[", "1", "]", "\n", ")", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "roi", ",", "argmax", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.roi_pool._ROIPool.backward": [[24, 45], ["maskrcnn_benchmark._C.roi_pool_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "rois", ",", "argmax", "=", "ctx", ".", "saved_tensors", "\n", "output_size", "=", "ctx", ".", "output_size", "\n", "spatial_scale", "=", "ctx", ".", "spatial_scale", "\n", "bs", ",", "ch", ",", "h", ",", "w", "=", "ctx", ".", "input_shape", "\n", "grad_input", "=", "_C", ".", "roi_pool_backward", "(", "\n", "grad_output", ",", "\n", "input", ",", "\n", "rois", ",", "\n", "argmax", ",", "\n", "spatial_scale", ",", "\n", "output_size", "[", "0", "]", ",", "\n", "output_size", "[", "1", "]", ",", "\n", "bs", ",", "\n", "ch", ",", "\n", "h", ",", "\n", "w", ",", "\n", ")", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.roi_pool.ROIPool.__init__": [[51, 55], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ",", "spatial_scale", ")", ":", "\n", "        ", "super", "(", "ROIPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.roi_pool.ROIPool.forward": [[56, 59], ["roi_pool"], "methods", ["None"], ["", "@", "amp", ".", "float_function", "\n", "def", "forward", "(", "self", ",", "input", ",", "rois", ")", ":", "\n", "        ", "return", "roi_pool", "(", "input", ",", "rois", ",", "self", ".", "output_size", ",", "self", ".", "spatial_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.roi_pool.ROIPool.__repr__": [[60, 66], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "tmpstr", "+=", "\"output_size=\"", "+", "str", "(", "self", ".", "output_size", ")", "\n", "tmpstr", "+=", "\", spatial_scale=\"", "+", "str", "(", "self", ".", "spatial_scale", ")", "\n", "tmpstr", "+=", "\")\"", "\n", "return", "tmpstr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.batch_norm.FrozenBatchNorm2d.__init__": [[12, 18], ["torch.nn.Module.__init__", "batch_norm.FrozenBatchNorm2d.register_buffer", "batch_norm.FrozenBatchNorm2d.register_buffer", "batch_norm.FrozenBatchNorm2d.register_buffer", "batch_norm.FrozenBatchNorm2d.register_buffer", "torch.ones", "torch.zeros", "torch.zeros", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "super", "(", "FrozenBatchNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "\"weight\"", ",", "torch", ".", "ones", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "zeros", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_mean\"", ",", "torch", ".", "zeros", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_var\"", ",", "torch", ".", "ones", "(", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.batch_norm.FrozenBatchNorm2d.forward": [[19, 32], ["scale.reshape.reshape.reshape", "bias.reshape.reshape.reshape", "batch_norm.FrozenBatchNorm2d.weight.half", "batch_norm.FrozenBatchNorm2d.bias.half", "batch_norm.FrozenBatchNorm2d.running_mean.half", "batch_norm.FrozenBatchNorm2d.running_var.half", "batch_norm.FrozenBatchNorm2d.running_var.rsqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Cast all fixed parameters to half() if necessary", "\n", "        ", "if", "x", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "            ", "self", ".", "weight", "=", "self", ".", "weight", ".", "half", "(", ")", "\n", "self", ".", "bias", "=", "self", ".", "bias", ".", "half", "(", ")", "\n", "self", ".", "running_mean", "=", "self", ".", "running_mean", ".", "half", "(", ")", "\n", "self", ".", "running_var", "=", "self", ".", "running_var", ".", "half", "(", ")", "\n", "\n", "", "scale", "=", "self", ".", "weight", "*", "self", ".", "running_var", ".", "rsqrt", "(", ")", "\n", "bias", "=", "self", ".", "bias", "-", "self", ".", "running_mean", "*", "scale", "\n", "scale", "=", "scale", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "bias", "=", "bias", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "scale", "+", "bias", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.roi_align._ROIAlign.forward": [[13, 24], ["ctx.save_for_backward", "torch.nn.modules.utils._pair", "input.size", "maskrcnn_benchmark._C.roi_align_forward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "roi", ",", "output_size", ",", "spatial_scale", ",", "sampling_ratio", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "roi", ")", "\n", "ctx", ".", "output_size", "=", "_pair", "(", "output_size", ")", "\n", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "sampling_ratio", "=", "sampling_ratio", "\n", "ctx", ".", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "output", "=", "_C", ".", "roi_align_forward", "(", "\n", "input", ",", "roi", ",", "spatial_scale", ",", "output_size", "[", "0", "]", ",", "output_size", "[", "1", "]", ",", "sampling_ratio", "\n", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.roi_align._ROIAlign.backward": [[25, 46], ["maskrcnn_benchmark._C.roi_align_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "rois", ",", "=", "ctx", ".", "saved_tensors", "\n", "output_size", "=", "ctx", ".", "output_size", "\n", "spatial_scale", "=", "ctx", ".", "spatial_scale", "\n", "sampling_ratio", "=", "ctx", ".", "sampling_ratio", "\n", "bs", ",", "ch", ",", "h", ",", "w", "=", "ctx", ".", "input_shape", "\n", "grad_input", "=", "_C", ".", "roi_align_backward", "(", "\n", "grad_output", ",", "\n", "rois", ",", "\n", "spatial_scale", ",", "\n", "output_size", "[", "0", "]", ",", "\n", "output_size", "[", "1", "]", ",", "\n", "bs", ",", "\n", "ch", ",", "\n", "h", ",", "\n", "w", ",", "\n", "sampling_ratio", ",", "\n", ")", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.roi_align.ROIAlign.__init__": [[52, 57], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ",", "spatial_scale", ",", "sampling_ratio", ")", ":", "\n", "        ", "super", "(", "ROIAlign", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "self", ".", "sampling_ratio", "=", "sampling_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.roi_align.ROIAlign.forward": [[58, 62], ["roi_align"], "methods", ["None"], ["", "@", "amp", ".", "float_function", "\n", "def", "forward", "(", "self", ",", "input", ",", "rois", ")", ":", "\n", "        ", "return", "roi_align", "(", "\n", "input", ",", "rois", ",", "self", ".", "output_size", ",", "self", ".", "spatial_scale", ",", "self", ".", "sampling_ratio", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.roi_align.ROIAlign.__repr__": [[64, 71], ["str", "str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "tmpstr", "+=", "\"output_size=\"", "+", "str", "(", "self", ".", "output_size", ")", "\n", "tmpstr", "+=", "\", spatial_scale=\"", "+", "str", "(", "self", ".", "spatial_scale", ")", "\n", "tmpstr", "+=", "\", sampling_ratio=\"", "+", "str", "(", "self", ".", "sampling_ratio", ")", "\n", "tmpstr", "+=", "\")\"", "\n", "return", "tmpstr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc._NewEmptyTensorOp.forward": [[19, 23], ["x.new_empty"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "new_shape", ")", ":", "\n", "        ", "ctx", ".", "shape", "=", "x", ".", "shape", "\n", "return", "x", ".", "new_empty", "(", "new_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc._NewEmptyTensorOp.backward": [[24, 28], ["_NewEmptyTensorOp.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad", ")", ":", "\n", "        ", "shape", "=", "ctx", ".", "shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "grad", ",", "shape", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.Conv2d.forward": [[31, 44], ["_NewEmptyTensorOp.apply", "x.numel", "super().forward", "zip"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.forward"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "return", "super", "(", "Conv2d", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "# get output shape", "\n", "\n", "", "output_shape", "=", "[", "\n", "(", "i", "+", "2", "*", "p", "-", "(", "di", "*", "(", "k", "-", "1", ")", "+", "1", ")", ")", "//", "d", "+", "1", "\n", "for", "i", ",", "p", ",", "di", ",", "k", ",", "d", "in", "zip", "(", "\n", "x", ".", "shape", "[", "-", "2", ":", "]", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", "\n", ")", "\n", "]", "\n", "output_shape", "=", "[", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "weight", ".", "shape", "[", "0", "]", "]", "+", "output_shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "x", ",", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.ConvTranspose2d.forward": [[47, 65], ["_NewEmptyTensorOp.apply", "x.numel", "super().forward", "zip"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.forward"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "return", "super", "(", "ConvTranspose2d", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "# get output shape", "\n", "\n", "", "output_shape", "=", "[", "\n", "(", "i", "-", "1", ")", "*", "d", "-", "2", "*", "p", "+", "(", "di", "*", "(", "k", "-", "1", ")", "+", "1", ")", "+", "op", "\n", "for", "i", ",", "p", ",", "di", ",", "k", ",", "d", ",", "op", "in", "zip", "(", "\n", "x", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "kernel_size", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "output_padding", ",", "\n", ")", "\n", "]", "\n", "output_shape", "=", "[", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "bias", ".", "shape", "[", "0", "]", "]", "+", "output_shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "x", ",", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.BatchNorm2d.forward": [[68, 74], ["_NewEmptyTensorOp.apply", "x.numel", "super().forward"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.forward"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "return", "super", "(", "BatchNorm2d", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "# get output shape", "\n", "", "output_shape", "=", "x", ".", "shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "x", ",", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.DFConv2d.__init__": [[116, 181], ["torch.nn.Module.__init__", "isinstance", "misc.Conv2d", "conv_block", "isinstance", "isinstance", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "with_modulated_dcn", "=", "True", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "deformable_groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "padding", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", "DFConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "kernel_size", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "assert", "isinstance", "(", "stride", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "isinstance", "(", "dilation", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "len", "(", "kernel_size", ")", "==", "2", "\n", "assert", "len", "(", "stride", ")", "==", "2", "\n", "assert", "len", "(", "dilation", ")", "==", "2", "\n", "padding", "=", "(", "\n", "dilation", "[", "0", "]", "*", "(", "kernel_size", "[", "0", "]", "-", "1", ")", "//", "2", ",", "\n", "dilation", "[", "1", "]", "*", "(", "kernel_size", "[", "1", "]", "-", "1", ")", "//", "2", "\n", ")", "\n", "offset_base_channels", "=", "kernel_size", "[", "0", "]", "*", "kernel_size", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "padding", "=", "dilation", "*", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "offset_base_channels", "=", "kernel_size", "*", "kernel_size", "\n", "", "if", "with_modulated_dcn", ":", "\n", "            ", "from", "maskrcnn_benchmark", ".", "layers", "import", "ModulatedDeformConv", "\n", "offset_channels", "=", "offset_base_channels", "*", "3", "# default: 27", "\n", "conv_block", "=", "ModulatedDeformConv", "\n", "", "else", ":", "\n", "            ", "from", "maskrcnn_benchmark", ".", "layers", "import", "DeformConv", "\n", "offset_channels", "=", "offset_base_channels", "*", "2", "# default: 18", "\n", "conv_block", "=", "DeformConv", "\n", "", "self", ".", "offset", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "deformable_groups", "*", "offset_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "groups", "=", "1", ",", "\n", "dilation", "=", "dilation", "\n", ")", "\n", "for", "l", "in", "[", "self", ".", "offset", ",", "]", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "l", ".", "weight", ",", "a", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0.", ")", "\n", "", "self", ".", "conv", "=", "conv_block", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "deformable_groups", "=", "deformable_groups", ",", "\n", "bias", "=", "bias", "\n", ")", "\n", "self", ".", "with_modulated_dcn", "=", "with_modulated_dcn", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "offset_split", "=", "offset_base_channels", "*", "deformable_groups", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.DFConv2d.forward": [[182, 208], ["_NewEmptyTensorOp.apply", "misc.DFConv2d.numel", "misc.DFConv2d.offset", "misc.DFConv2d.conv", "misc.DFConv2d.offset", "offset_mask[].sigmoid", "misc.DFConv2d.conv", "zip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_offset", "=", "False", ")", ":", "\n", "        ", "if", "x", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "if", "not", "self", ".", "with_modulated_dcn", ":", "\n", "                ", "offset_mask", "=", "self", ".", "offset", "(", "x", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ",", "offset_mask", ")", "\n", "", "else", ":", "\n", "                ", "offset_mask", "=", "self", ".", "offset", "(", "x", ")", "\n", "offset", "=", "offset_mask", "[", ":", ",", ":", "self", ".", "offset_split", ",", ":", ",", ":", "]", "\n", "mask", "=", "offset_mask", "[", ":", ",", "self", ".", "offset_split", ":", ",", ":", ",", ":", "]", ".", "sigmoid", "(", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ",", "offset", ",", "mask", ")", "\n", "", "if", "return_offset", ":", "\n", "                ", "return", "x", ",", "offset_mask", "\n", "", "return", "x", "\n", "# get output shape", "\n", "", "output_shape", "=", "[", "\n", "(", "i", "+", "2", "*", "p", "-", "(", "di", "*", "(", "k", "-", "1", ")", "+", "1", ")", ")", "//", "d", "+", "1", "\n", "for", "i", ",", "p", ",", "di", ",", "k", ",", "d", "in", "zip", "(", "\n", "x", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "kernel_size", ",", "\n", "self", ".", "stride", "\n", ")", "\n", "]", "\n", "output_shape", "=", "[", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "conv", ".", "weight", ".", "shape", "[", "0", "]", "]", "+", "output_shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "x", ",", "output_shape", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate": [[76, 112], ["tuple", "_NewEmptyTensorOp.apply", "input.numel", "torch.nn.functional.interpolate", "misc.interpolate._check_size_scale_factor"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate"], ["", "", "def", "interpolate", "(", "\n", "input", ",", "size", "=", "None", ",", "scale_factor", "=", "None", ",", "mode", "=", "\"nearest\"", ",", "align_corners", "=", "None", "\n", ")", ":", "\n", "    ", "if", "input", ".", "numel", "(", ")", ">", "0", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "input", ",", "size", ",", "scale_factor", ",", "mode", ",", "align_corners", "\n", ")", "\n", "\n", "", "def", "_check_size_scale_factor", "(", "dim", ")", ":", "\n", "        ", "if", "size", "is", "None", "and", "scale_factor", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"either size or scale_factor should be defined\"", ")", "\n", "", "if", "size", "is", "not", "None", "and", "scale_factor", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"only one of size or scale_factor should be defined\"", ")", "\n", "", "if", "(", "\n", "scale_factor", "is", "not", "None", "\n", "and", "isinstance", "(", "scale_factor", ",", "tuple", ")", "\n", "and", "len", "(", "scale_factor", ")", "!=", "dim", "\n", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"scale_factor shape must match input shape. \"", "\n", "\"Input is {}D, scale_factor size is {}\"", ".", "format", "(", "dim", ",", "len", "(", "scale_factor", ")", ")", "\n", ")", "\n", "\n", "", "", "def", "_output_size", "(", "dim", ")", ":", "\n", "        ", "_check_size_scale_factor", "(", "dim", ")", "\n", "if", "size", "is", "not", "None", ":", "\n", "            ", "return", "size", "\n", "", "scale_factors", "=", "_ntuple", "(", "dim", ")", "(", "scale_factor", ")", "\n", "# math.floor might return float in py2.7", "\n", "return", "[", "\n", "int", "(", "math", ".", "floor", "(", "input", ".", "size", "(", "i", "+", "2", ")", "*", "scale_factors", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "dim", ")", "\n", "]", "\n", "\n", "", "output_shape", "=", "tuple", "(", "_output_size", "(", "2", ")", ")", "\n", "output_shape", "=", "input", ".", "shape", "[", ":", "-", "2", "]", "+", "output_shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "input", ",", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.iou_loss.IOULoss.__init__": [[6, 9], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loc_loss_type", "=", "'iou'", ")", ":", "\n", "        ", "super", "(", "IOULoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loc_loss_type", "=", "loc_loss_type", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.iou_loss.IOULoss.forward": [[10, 56], ["torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "losses.sum", "torch.log", "weight.sum", "losses.numel"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "weight", "=", "None", ")", ":", "\n", "        ", "pred_left", "=", "pred", "[", ":", ",", "0", "]", "\n", "pred_top", "=", "pred", "[", ":", ",", "1", "]", "\n", "pred_right", "=", "pred", "[", ":", ",", "2", "]", "\n", "pred_bottom", "=", "pred", "[", ":", ",", "3", "]", "\n", "\n", "target_left", "=", "target", "[", ":", ",", "0", "]", "\n", "target_top", "=", "target", "[", ":", ",", "1", "]", "\n", "target_right", "=", "target", "[", ":", ",", "2", "]", "\n", "target_bottom", "=", "target", "[", ":", ",", "3", "]", "\n", "\n", "target_aera", "=", "(", "target_left", "+", "target_right", ")", "*", "(", "target_top", "+", "target_bottom", ")", "\n", "pred_aera", "=", "(", "pred_left", "+", "pred_right", ")", "*", "(", "pred_top", "+", "pred_bottom", ")", "\n", "\n", "w_intersect", "=", "torch", ".", "min", "(", "pred_left", ",", "target_left", ")", "+", "torch", ".", "min", "(", "pred_right", ",", "target_right", ")", "\n", "h_intersect", "=", "torch", ".", "min", "(", "pred_bottom", ",", "target_bottom", ")", "+", "torch", ".", "min", "(", "pred_top", ",", "target_top", ")", "\n", "\n", "g_w_intersect", "=", "torch", ".", "max", "(", "pred_left", ",", "target_left", ")", "+", "torch", ".", "max", "(", "pred_right", ",", "target_right", ")", "\n", "g_h_intersect", "=", "torch", ".", "max", "(", "pred_bottom", ",", "target_bottom", ")", "+", "torch", ".", "max", "(", "pred_top", ",", "target_top", ")", "\n", "ac_uion", "=", "g_w_intersect", "*", "g_h_intersect", "\n", "\n", "area_intersect", "=", "w_intersect", "*", "h_intersect", "\n", "area_union", "=", "target_aera", "+", "pred_aera", "-", "area_intersect", "\n", "\n", "ious", "=", "(", "area_intersect", "+", "1.0", ")", "/", "(", "area_union", "+", "1.0", ")", "\n", "gious", "=", "ious", "-", "(", "ac_uion", "-", "area_union", ")", "/", "ac_uion", "\n", "if", "self", ".", "loc_loss_type", "==", "'iou'", ":", "\n", "            ", "losses", "=", "-", "torch", ".", "log", "(", "ious", ")", "\n", "", "elif", "self", ".", "loc_loss_type", "==", "'linear_iou'", ":", "\n", "            ", "losses", "=", "1", "-", "ious", "\n", "", "elif", "self", ".", "loc_loss_type", "==", "'giou'", ":", "\n", "            ", "losses", "=", "1", "-", "gious", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "weight", "is", "not", "None", "and", "weight", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "return", "(", "losses", "*", "weight", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "losses", ".", "numel", "(", ")", "!=", "0", "\n", "return", "losses", ".", "sum", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.context_block.ContextBlock.__init__": [[44, 82], ["torch.nn.Module.__init__", "isinstance", "all", "int", "context_block.ContextBlock.reset_parameters", "len", "torch.nn.Conv2d", "torch.nn.Softmax", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.LayerNorm", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LayerNorm", "torch.nn.ReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_module.ModulatedDeformConv.reset_parameters", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["    ", "def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "ratio", ",", "\n", "pooling_type", "=", "'att'", ",", "\n", "fusion_types", "=", "(", "'channel_add'", ",", ")", ")", ":", "\n", "        ", "super", "(", "ContextBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "pooling_type", "in", "[", "'avg'", ",", "'att'", "]", "\n", "assert", "isinstance", "(", "fusion_types", ",", "(", "list", ",", "tuple", ")", ")", "\n", "valid_fusion_types", "=", "[", "'channel_add'", ",", "'channel_mul'", "]", "\n", "assert", "all", "(", "[", "f", "in", "valid_fusion_types", "for", "f", "in", "fusion_types", "]", ")", "\n", "assert", "len", "(", "fusion_types", ")", ">", "0", ",", "'at least one fusion should be used'", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "planes", "=", "int", "(", "inplanes", "*", "ratio", ")", "\n", "self", ".", "pooling_type", "=", "pooling_type", "\n", "self", ".", "fusion_types", "=", "fusion_types", "\n", "if", "pooling_type", "==", "'att'", ":", "\n", "            ", "self", ".", "conv_mask", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "", "if", "'channel_add'", "in", "fusion_types", ":", "\n", "            ", "self", ".", "channel_add_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "self", ".", "planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "self", ".", "planes", ",", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# yapf: disable", "\n", "nn", ".", "Conv2d", "(", "self", ".", "planes", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "channel_add_conv", "=", "None", "\n", "", "if", "'channel_mul'", "in", "fusion_types", ":", "\n", "            ", "self", ".", "channel_mul_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "self", ".", "planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "self", ".", "planes", ",", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# yapf: disable", "\n", "nn", ".", "Conv2d", "(", "self", ".", "planes", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "channel_mul_conv", "=", "None", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.context_block.ContextBlock.reset_parameters": [[83, 92], ["context_block.kaiming_init", "context_block.last_zero_init", "context_block.last_zero_init"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.context_block.kaiming_init", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.context_block.last_zero_init", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.context_block.last_zero_init"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "pooling_type", "==", "'att'", ":", "\n", "            ", "kaiming_init", "(", "self", ".", "conv_mask", ",", "mode", "=", "'fan_in'", ")", "\n", "self", ".", "conv_mask", ".", "inited", "=", "True", "\n", "\n", "", "if", "self", ".", "channel_add_conv", "is", "not", "None", ":", "\n", "            ", "last_zero_init", "(", "self", ".", "channel_add_conv", ")", "\n", "", "if", "self", ".", "channel_mul_conv", "is", "not", "None", ":", "\n", "            ", "last_zero_init", "(", "self", ".", "channel_mul_conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.context_block.ContextBlock.spatial_pool": [[93, 118], ["x.size", "input_x.unsqueeze.unsqueeze.view", "input_x.unsqueeze.unsqueeze.unsqueeze", "context_block.ContextBlock.conv_mask", "context_mask.unsqueeze.unsqueeze.view", "context_block.ContextBlock.softmax", "context_mask.unsqueeze.unsqueeze.unsqueeze", "torch.matmul", "context_block.ContextBlock.view", "context_block.ContextBlock.avg_pool"], "methods", ["None"], ["", "", "def", "spatial_pool", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", ",", "channel", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "if", "self", ".", "pooling_type", "==", "'att'", ":", "\n", "            ", "input_x", "=", "x", "\n", "# [N, C, H * W]", "\n", "input_x", "=", "input_x", ".", "view", "(", "batch", ",", "channel", ",", "height", "*", "width", ")", "\n", "# [N, 1, C, H * W]", "\n", "input_x", "=", "input_x", ".", "unsqueeze", "(", "1", ")", "\n", "# [N, 1, H, W]", "\n", "context_mask", "=", "self", ".", "conv_mask", "(", "x", ")", "\n", "# [N, 1, H * W]", "\n", "context_mask", "=", "context_mask", ".", "view", "(", "batch", ",", "1", ",", "height", "*", "width", ")", "\n", "# [N, 1, H * W]", "\n", "context_mask", "=", "self", ".", "softmax", "(", "context_mask", ")", "\n", "# [N, 1, H * W, 1]", "\n", "context_mask", "=", "context_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# [N, 1, C, 1]", "\n", "context", "=", "torch", ".", "matmul", "(", "input_x", ",", "context_mask", ")", "\n", "# [N, C, 1, 1]", "\n", "context", "=", "context", ".", "view", "(", "batch", ",", "channel", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "# [N, C, 1, 1]", "\n", "            ", "context", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "\n", "", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.context_block.ContextBlock.forward": [[119, 134], ["context_block.ContextBlock.spatial_pool", "torch.sigmoid", "context_block.ContextBlock.channel_add_conv", "context_block.ContextBlock.channel_mul_conv"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.context_block.ContextBlock.spatial_pool"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# [N, C, 1, 1]", "\n", "        ", "context", "=", "self", ".", "spatial_pool", "(", "x", ")", "\n", "\n", "out", "=", "x", "\n", "if", "self", ".", "channel_mul_conv", "is", "not", "None", ":", "\n", "# [N, C, 1, 1]", "\n", "            ", "channel_mul_term", "=", "torch", ".", "sigmoid", "(", "self", ".", "channel_mul_conv", "(", "context", ")", ")", "\n", "out", "=", "out", "*", "channel_mul_term", "\n", "", "if", "self", ".", "channel_add_conv", "is", "not", "None", ":", "\n", "# [N, C, 1, 1]", "\n", "            ", "channel_add_term", "=", "self", ".", "channel_add_conv", "(", "context", ")", "\n", "out", "=", "out", "+", "channel_add_term", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.context_block.constant_init": [[12, 16], ["torch.nn.init.constant_", "hasattr", "torch.nn.init.constant_"], "function", ["None"], ["def", "constant_init", "(", "module", ",", "val", ",", "bias", "=", "0", ")", ":", "\n", "    ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "weight", ",", "val", ")", "\n", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.context_block.kaiming_init": [[18, 33], ["torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_normal_", "hasattr", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "kaiming_init", "(", "module", ",", "\n", "a", "=", "0", ",", "\n", "mode", "=", "'fan_out'", ",", "\n", "nonlinearity", "=", "'relu'", ",", "\n", "bias", "=", "0", ",", "\n", "distribution", "=", "'normal'", ")", ":", "\n", "    ", "assert", "distribution", "in", "[", "'uniform'", ",", "'normal'", "]", "\n", "if", "distribution", "==", "'uniform'", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "\n", "module", ".", "weight", ",", "a", "=", "a", ",", "mode", "=", "mode", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "", "else", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "module", ".", "weight", ",", "a", "=", "a", ",", "mode", "=", "mode", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.context_block.last_zero_init": [[35, 40], ["isinstance", "context_block.constant_init", "context_block.constant_init"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.context_block.constant_init", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.context_block.constant_init"], ["", "", "def", "last_zero_init", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", ":", "\n", "        ", "constant_init", "(", "m", "[", "-", "1", "]", ",", "val", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "constant_init", "(", "m", ",", "val", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.bezier_align._BezierAlign.forward": [[13, 24], ["ctx.save_for_backward", "torch.nn.modules.utils._pair", "input.size", "maskrcnn_benchmark._C.bezier_align_forward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "bezier", ",", "output_size", ",", "spatial_scale", ",", "sampling_ratio", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "bezier", ")", "\n", "ctx", ".", "output_size", "=", "_pair", "(", "output_size", ")", "\n", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "sampling_ratio", "=", "sampling_ratio", "\n", "ctx", ".", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "output", "=", "_C", ".", "bezier_align_forward", "(", "\n", "input", ",", "bezier", ",", "spatial_scale", ",", "output_size", "[", "0", "]", ",", "output_size", "[", "1", "]", ",", "sampling_ratio", "\n", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.bezier_align._BezierAlign.backward": [[25, 46], ["maskrcnn_benchmark._C.bezier_align_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "beziers", ",", "=", "ctx", ".", "saved_tensors", "\n", "output_size", "=", "ctx", ".", "output_size", "\n", "spatial_scale", "=", "ctx", ".", "spatial_scale", "\n", "sampling_ratio", "=", "ctx", ".", "sampling_ratio", "\n", "bs", ",", "ch", ",", "h", ",", "w", "=", "ctx", ".", "input_shape", "\n", "grad_input", "=", "_C", ".", "bezier_align_backward", "(", "\n", "grad_output", ",", "\n", "beziers", ",", "\n", "spatial_scale", ",", "\n", "output_size", "[", "0", "]", ",", "\n", "output_size", "[", "1", "]", ",", "\n", "bs", ",", "\n", "ch", ",", "\n", "h", ",", "\n", "w", ",", "\n", "sampling_ratio", ",", "\n", ")", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.bezier_align.BezierAlign.__init__": [[52, 57], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ",", "spatial_scale", ",", "sampling_ratio", ")", ":", "\n", "        ", "super", "(", "BezierAlign", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "self", ".", "sampling_ratio", "=", "sampling_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.bezier_align.BezierAlign.forward": [[58, 62], ["bezier_align"], "methods", ["None"], ["", "@", "amp", ".", "float_function", "\n", "def", "forward", "(", "self", ",", "input", ",", "beziers", ")", ":", "\n", "        ", "return", "bezier_align", "(", "\n", "input", ",", "beziers", ",", "self", ".", "output_size", ",", "self", ".", "spatial_scale", ",", "self", ".", "sampling_ratio", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.bezier_align.BezierAlign.__repr__": [[64, 71], ["str", "str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "tmpstr", "+=", "\"output_size=\"", "+", "str", "(", "self", ".", "output_size", ")", "\n", "tmpstr", "+=", "\", spatial_scale=\"", "+", "str", "(", "self", ".", "spatial_scale", ")", "\n", "tmpstr", "+=", "\", sampling_ratio=\"", "+", "str", "(", "self", ".", "sampling_ratio", ")", "\n", "tmpstr", "+=", "\")\"", "\n", "return", "tmpstr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.seg_loss.SegLoss.__init__": [[7, 11], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "other", "=", "-", "1", ",", "scale_factor", "=", "1", ")", ":", "\n", "        ", "super", "(", "SegLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "other", "=", "other", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.seg_loss.SegLoss.prepare_target": [[12, 34], ["mask.new_full", "zip", "torch.nn.functional.interpolate().long().squeeze.get_field().get_mask_tensor().unsqueeze", "labels.append", "pad_label[].copy_", "torch.clamp", "torch.nn.functional.interpolate().long().squeeze", "mask.size", "mask.size", "mask.size", "mask.size", "torch.nn.functional.interpolate().long().squeeze.get_field().get_mask_tensor", "torch.nn.functional.interpolate().long", "torch.nn.functional.interpolate().long().squeeze.get_field", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate().long().squeeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.segmentation_mask.SegmentationMask.get_mask_tensor", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate"], ["", "def", "prepare_target", "(", "self", ",", "targets", ",", "mask", ")", ":", "\n", "        ", "labels", "=", "[", "]", "\n", "\n", "for", "t", "in", "targets", ":", "\n", "            ", "t", "=", "t", ".", "get_field", "(", "\"seg_masks\"", ")", ".", "get_mask_tensor", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "if", "self", ".", "other", ">", "0", ":", "\n", "                ", "t", "=", "torch", ".", "clamp", "(", "t", ",", "max", "=", "self", ".", "other", ")", "\n", "", "if", "self", ".", "scale_factor", "!=", "1", ":", "\n", "                ", "t", "=", "F", ".", "interpolate", "(", "\n", "t", ".", "unsqueeze", "(", "0", ")", ",", "\n", "scale_factor", "=", "self", ".", "scale_factor", ",", "\n", "mode", "=", "'nearest'", ")", ".", "long", "(", ")", ".", "squeeze", "(", ")", "\n", "", "labels", ".", "append", "(", "t", ")", "\n", "\n", "", "batched_labels", "=", "mask", ".", "new_full", "(", "\n", "(", "mask", ".", "size", "(", "0", ")", ",", "mask", ".", "size", "(", "2", ")", ",", "mask", ".", "size", "(", "3", ")", ")", ",", "\n", "mask", ".", "size", "(", "1", ")", "-", "1", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "for", "label", ",", "pad_label", "in", "zip", "(", "labels", ",", "batched_labels", ")", ":", "\n", "            ", "pad_label", "[", ":", "label", ".", "shape", "[", "0", "]", ",", ":", "label", ".", "shape", "[", "1", "]", "]", ".", "copy_", "(", "label", ")", "\n", "\n", "", "return", "batched_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.seg_loss.SegLoss.forward": [[35, 44], ["seg_loss.SegLoss.prepare_target", "torch.nn.functional.cross_entropy"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.seg_loss.SegLoss.prepare_target"], ["", "def", "forward", "(", "self", ",", "mask", ",", "target", ")", ":", "\n", "        ", "'''\n            mask : Tensor\n            target : list[Boxlist]\n        '''", "\n", "target", "=", "self", ".", "prepare_target", "(", "target", ",", "mask", ")", "\n", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "mask", ",", "target", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.smooth_l1_loss.smooth_l1_loss": [[6, 17], ["torch.abs", "torch.where", "torch.where.sum", "torch.where.mean"], "function", ["None"], ["def", "smooth_l1_loss", "(", "input", ",", "target", ",", "beta", "=", "1.", "/", "9", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    very similar to the smooth_l1_loss from pytorch, but with\n    the extra beta parameter\n    \"\"\"", "\n", "n", "=", "torch", ".", "abs", "(", "input", "-", "target", ")", "\n", "cond", "=", "n", "<", "beta", "\n", "loss", "=", "torch", ".", "where", "(", "cond", ",", "0.5", "*", "n", "**", "2", "/", "beta", ",", "n", "-", "0.5", "*", "beta", ")", "\n", "if", "size_average", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "", "return", "loss", ".", "sum", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_func.DeformConvFunction.forward": [[10, 68], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "ctx.save_for_backward", "input.new_empty", "ValueError", "deform_conv_func.DeformConvFunction._output_size", "input.new_empty", "input.new_empty", "min", "maskrcnn_benchmark._C.deform_conv_forward", "input.dim", "weight.size", "weight.size", "input.dim"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_func.DeformConvFunction._output_size"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "\n", "ctx", ",", "\n", "input", ",", "\n", "offset", ",", "\n", "weight", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "deformable_groups", "=", "1", ",", "\n", "im2col_step", "=", "64", "\n", ")", ":", "\n", "        ", "if", "input", "is", "not", "None", "and", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Expected 4D tensor as input, got {}D tensor instead.\"", ".", "format", "(", "\n", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "ctx", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "ctx", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "ctx", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "ctx", ".", "groups", "=", "groups", "\n", "ctx", ".", "deformable_groups", "=", "deformable_groups", "\n", "ctx", ".", "im2col_step", "=", "im2col_step", "\n", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "offset", ",", "weight", ")", "\n", "\n", "output", "=", "input", ".", "new_empty", "(", "\n", "DeformConvFunction", ".", "_output_size", "(", "input", ",", "weight", ",", "ctx", ".", "padding", ",", "\n", "ctx", ".", "dilation", ",", "ctx", ".", "stride", ")", ")", "\n", "\n", "ctx", ".", "bufs_", "=", "[", "input", ".", "new_empty", "(", "0", ")", ",", "input", ".", "new_empty", "(", "0", ")", "]", "# columns, ones", "\n", "\n", "if", "not", "input", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "cur_im2col_step", "=", "min", "(", "ctx", ".", "im2col_step", ",", "input", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "input", ".", "shape", "[", "0", "]", "%", "\n", "cur_im2col_step", ")", "==", "0", ",", "'im2col step must divide batchsize'", "\n", "_C", ".", "deform_conv_forward", "(", "\n", "input", ",", "\n", "weight", ",", "\n", "offset", ",", "\n", "output", ",", "\n", "ctx", ".", "bufs_", "[", "0", "]", ",", "\n", "ctx", ".", "bufs_", "[", "1", "]", ",", "\n", "weight", ".", "size", "(", "3", ")", ",", "\n", "weight", ".", "size", "(", "2", ")", ",", "\n", "ctx", ".", "stride", "[", "1", "]", ",", "\n", "ctx", ".", "stride", "[", "0", "]", ",", "\n", "ctx", ".", "padding", "[", "1", "]", ",", "\n", "ctx", ".", "padding", "[", "0", "]", ",", "\n", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "\n", "ctx", ".", "groups", ",", "\n", "ctx", ".", "deformable_groups", ",", "\n", "cur_im2col_step", "\n", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_func.DeformConvFunction.backward": [[69, 131], ["min", "torch.zeros_like", "torch.zeros_like", "maskrcnn_benchmark._C.deform_conv_backward_input", "torch.zeros_like", "maskrcnn_benchmark._C.deform_conv_backward_parameters", "weight.size", "weight.size", "weight.size", "weight.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "offset", ",", "weight", "=", "ctx", ".", "saved_tensors", "\n", "\n", "grad_input", "=", "grad_offset", "=", "grad_weight", "=", "None", "\n", "\n", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "cur_im2col_step", "=", "min", "(", "ctx", ".", "im2col_step", ",", "input", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "input", ".", "shape", "[", "0", "]", "%", "\n", "cur_im2col_step", ")", "==", "0", ",", "'im2col step must divide batchsize'", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "grad_input", "=", "torch", ".", "zeros_like", "(", "input", ")", "\n", "grad_offset", "=", "torch", ".", "zeros_like", "(", "offset", ")", "\n", "_C", ".", "deform_conv_backward_input", "(", "\n", "input", ",", "\n", "offset", ",", "\n", "grad_output", ",", "\n", "grad_input", ",", "\n", "grad_offset", ",", "\n", "weight", ",", "\n", "ctx", ".", "bufs_", "[", "0", "]", ",", "\n", "weight", ".", "size", "(", "3", ")", ",", "\n", "weight", ".", "size", "(", "2", ")", ",", "\n", "ctx", ".", "stride", "[", "1", "]", ",", "\n", "ctx", ".", "stride", "[", "0", "]", ",", "\n", "ctx", ".", "padding", "[", "1", "]", ",", "\n", "ctx", ".", "padding", "[", "0", "]", ",", "\n", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "\n", "ctx", ".", "groups", ",", "\n", "ctx", ".", "deformable_groups", ",", "\n", "cur_im2col_step", "\n", ")", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "                ", "grad_weight", "=", "torch", ".", "zeros_like", "(", "weight", ")", "\n", "_C", ".", "deform_conv_backward_parameters", "(", "\n", "input", ",", "\n", "offset", ",", "\n", "grad_output", ",", "\n", "grad_weight", ",", "\n", "ctx", ".", "bufs_", "[", "0", "]", ",", "\n", "ctx", ".", "bufs_", "[", "1", "]", ",", "\n", "weight", ".", "size", "(", "3", ")", ",", "\n", "weight", ".", "size", "(", "2", ")", ",", "\n", "ctx", ".", "stride", "[", "1", "]", ",", "\n", "ctx", ".", "stride", "[", "0", "]", ",", "\n", "ctx", ".", "padding", "[", "1", "]", ",", "\n", "ctx", ".", "padding", "[", "0", "]", ",", "\n", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "\n", "ctx", ".", "groups", ",", "\n", "ctx", ".", "deformable_groups", ",", "\n", "1", ",", "\n", "cur_im2col_step", "\n", ")", "\n", "\n", "", "", "return", "(", "grad_input", ",", "grad_offset", ",", "grad_weight", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_func.DeformConvFunction._output_size": [[132, 147], ["weight.size", "range", "input.size", "input.size", "all", "ValueError", "input.dim", "map", "weight.size", "map"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_output_size", "(", "input", ",", "weight", ",", "padding", ",", "dilation", ",", "stride", ")", ":", "\n", "        ", "channels", "=", "weight", ".", "size", "(", "0", ")", "\n", "output_size", "=", "(", "input", ".", "size", "(", "0", ")", ",", "channels", ")", "\n", "for", "d", "in", "range", "(", "input", ".", "dim", "(", ")", "-", "2", ")", ":", "\n", "            ", "in_size", "=", "input", ".", "size", "(", "d", "+", "2", ")", "\n", "pad", "=", "padding", "[", "d", "]", "\n", "kernel", "=", "dilation", "[", "d", "]", "*", "(", "weight", ".", "size", "(", "d", "+", "2", ")", "-", "1", ")", "+", "1", "\n", "stride_", "=", "stride", "[", "d", "]", "\n", "output_size", "+=", "(", "(", "in_size", "+", "(", "2", "*", "pad", ")", "-", "kernel", ")", "//", "stride_", "+", "1", ",", ")", "\n", "", "if", "not", "all", "(", "map", "(", "lambda", "s", ":", "s", ">", "0", ",", "output_size", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"convolution input is too small (output would be {})\"", ".", "format", "(", "\n", "'x'", ".", "join", "(", "map", "(", "str", ",", "output_size", ")", ")", ")", ")", "\n", "", "return", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_func.ModulatedDeformConvFunction.forward": [[151, 203], ["input.new_empty", "maskrcnn_benchmark._C.modulated_deform_conv_forward", "input.new_empty", "ctx.save_for_backward", "deform_conv_func.ModulatedDeformConvFunction._infer_shape", "input.new_empty", "input.new_empty"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_func.ModulatedDeformConvFunction._infer_shape"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "\n", "ctx", ",", "\n", "input", ",", "\n", "offset", ",", "\n", "mask", ",", "\n", "weight", ",", "\n", "bias", "=", "None", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "deformable_groups", "=", "1", "\n", ")", ":", "\n", "        ", "ctx", ".", "stride", "=", "stride", "\n", "ctx", ".", "padding", "=", "padding", "\n", "ctx", ".", "dilation", "=", "dilation", "\n", "ctx", ".", "groups", "=", "groups", "\n", "ctx", ".", "deformable_groups", "=", "deformable_groups", "\n", "ctx", ".", "with_bias", "=", "bias", "is", "not", "None", "\n", "if", "not", "ctx", ".", "with_bias", ":", "\n", "            ", "bias", "=", "input", ".", "new_empty", "(", "1", ")", "# fake tensor", "\n", "", "if", "not", "input", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "weight", ".", "requires_grad", "or", "mask", ".", "requires_grad", "or", "offset", ".", "requires_grad", "or", "input", ".", "requires_grad", ":", "\n", "            ", "ctx", ".", "save_for_backward", "(", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", ")", "\n", "", "output", "=", "input", ".", "new_empty", "(", "\n", "ModulatedDeformConvFunction", ".", "_infer_shape", "(", "ctx", ",", "input", ",", "weight", ")", ")", "\n", "ctx", ".", "_bufs", "=", "[", "input", ".", "new_empty", "(", "0", ")", ",", "input", ".", "new_empty", "(", "0", ")", "]", "\n", "_C", ".", "modulated_deform_conv_forward", "(", "\n", "input", ",", "\n", "weight", ",", "\n", "bias", ",", "\n", "ctx", ".", "_bufs", "[", "0", "]", ",", "\n", "offset", ",", "\n", "mask", ",", "\n", "output", ",", "\n", "ctx", ".", "_bufs", "[", "1", "]", ",", "\n", "weight", ".", "shape", "[", "2", "]", ",", "\n", "weight", ".", "shape", "[", "3", "]", ",", "\n", "ctx", ".", "stride", ",", "\n", "ctx", ".", "stride", ",", "\n", "ctx", ".", "padding", "[", "1", "]", ",", "\n", "ctx", ".", "padding", "[", "0", "]", ",", "\n", "ctx", ".", "dilation", ",", "\n", "ctx", ".", "dilation", ",", "\n", "ctx", ".", "groups", ",", "\n", "ctx", ".", "deformable_groups", ",", "\n", "ctx", ".", "with_bias", "\n", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_func.ModulatedDeformConvFunction.backward": [[204, 246], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "maskrcnn_benchmark._C.modulated_deform_conv_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", "=", "torch", ".", "zeros_like", "(", "input", ")", "\n", "grad_offset", "=", "torch", ".", "zeros_like", "(", "offset", ")", "\n", "grad_mask", "=", "torch", ".", "zeros_like", "(", "mask", ")", "\n", "grad_weight", "=", "torch", ".", "zeros_like", "(", "weight", ")", "\n", "grad_bias", "=", "torch", ".", "zeros_like", "(", "bias", ")", "\n", "_C", ".", "modulated_deform_conv_backward", "(", "\n", "input", ",", "\n", "weight", ",", "\n", "bias", ",", "\n", "ctx", ".", "_bufs", "[", "0", "]", ",", "\n", "offset", ",", "\n", "mask", ",", "\n", "ctx", ".", "_bufs", "[", "1", "]", ",", "\n", "grad_input", ",", "\n", "grad_weight", ",", "\n", "grad_bias", ",", "\n", "grad_offset", ",", "\n", "grad_mask", ",", "\n", "grad_output", ",", "\n", "weight", ".", "shape", "[", "2", "]", ",", "\n", "weight", ".", "shape", "[", "3", "]", ",", "\n", "ctx", ".", "stride", ",", "\n", "ctx", ".", "stride", ",", "\n", "ctx", ".", "padding", "[", "1", "]", ",", "\n", "ctx", ".", "padding", "[", "0", "]", ",", "\n", "ctx", ".", "dilation", ",", "\n", "ctx", ".", "dilation", ",", "\n", "ctx", ".", "groups", ",", "\n", "ctx", ".", "deformable_groups", ",", "\n", "ctx", ".", "with_bias", "\n", ")", "\n", "if", "not", "ctx", ".", "with_bias", ":", "\n", "            ", "grad_bias", "=", "None", "\n", "\n", "", "return", "(", "grad_input", ",", "grad_offset", ",", "grad_mask", ",", "grad_weight", ",", "grad_bias", ",", "\n", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_func.ModulatedDeformConvFunction._infer_shape": [[247, 258], ["input.size", "weight.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_infer_shape", "(", "ctx", ",", "input", ",", "weight", ")", ":", "\n", "        ", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "channels_out", "=", "weight", ".", "size", "(", "0", ")", "\n", "height", ",", "width", "=", "input", ".", "shape", "[", "2", ":", "4", "]", "\n", "kernel_h", ",", "kernel_w", "=", "weight", ".", "shape", "[", "2", ":", "4", "]", "\n", "height_out", "=", "(", "height", "+", "2", "*", "ctx", ".", "padding", "[", "0", "]", "-", "\n", "(", "ctx", ".", "dilation", "*", "(", "kernel_h", "-", "1", ")", "+", "1", ")", ")", "//", "ctx", ".", "stride", "+", "1", "\n", "width_out", "=", "(", "width", "+", "2", "*", "ctx", ".", "padding", "[", "1", "]", "-", "\n", "(", "ctx", ".", "dilation", "*", "(", "kernel_w", "-", "1", ")", "+", "1", ")", ")", "//", "ctx", ".", "stride", "+", "1", "\n", "return", "n", ",", "channels_out", ",", "height_out", ",", "width_out", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_module.DeformConv.__init__": [[11, 48], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.Parameter", "torch.Parameter", "deform_conv_module.DeformConv.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_module.ModulatedDeformConv.reset_parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "deformable_groups", "=", "1", ",", "\n", "bias", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "DeformConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_bias", "=", "bias", "\n", "\n", "assert", "in_channels", "%", "groups", "==", "0", ",", "'in_channels {} cannot be divisible by groups {}'", ".", "format", "(", "\n", "in_channels", ",", "groups", ")", "\n", "assert", "out_channels", "%", "groups", "==", "0", ",", "'out_channels {} cannot be divisible by groups {}'", ".", "format", "(", "\n", "out_channels", ",", "groups", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "self", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", "//", "self", ".", "groups", ",", "\n", "*", "self", ".", "kernel_size", ")", ")", "\n", "if", "self", ".", "with_bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_module.DeformConv.reset_parameters": [[49, 57], ["deform_conv_module.DeformConv.weight.data.uniform_", "math.sqrt", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "with_bias", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_module.DeformConv.forward": [[58, 66], ["deform_conv_func.deform_conv", "len", "deform_conv_module.DeformConv.bias.reshape", "deform_conv_func.deform_conv.size"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "offset", ")", ":", "\n", "        ", "y", "=", "deform_conv", "(", "input", ",", "offset", ",", "self", ".", "weight", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "\n", "self", ".", "deformable_groups", ")", "\n", "if", "self", ".", "with_bias", ":", "\n", "            ", "assert", "len", "(", "y", ".", "size", "(", ")", ")", "==", "4", "\n", "y", "=", "y", "+", "self", ".", "bias", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_module.DeformConv.__repr__": [[67, 79], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"\"", ".", "join", "(", "[", "\n", "\"{}(\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", ",", "\n", "\"in_channels={}, \"", ".", "format", "(", "self", ".", "in_channels", ")", ",", "\n", "\"out_channels={}, \"", ".", "format", "(", "self", ".", "out_channels", ")", ",", "\n", "\"kernel_size={}, \"", ".", "format", "(", "self", ".", "kernel_size", ")", ",", "\n", "\"stride={}, \"", ".", "format", "(", "self", ".", "stride", ")", ",", "\n", "\"dilation={}, \"", ".", "format", "(", "self", ".", "dilation", ")", ",", "\n", "\"padding={}, \"", ".", "format", "(", "self", ".", "padding", ")", ",", "\n", "\"groups={}, \"", ".", "format", "(", "self", ".", "groups", ")", ",", "\n", "\"deformable_groups={}, \"", ".", "format", "(", "self", ".", "deformable_groups", ")", ",", "\n", "\"bias={})\"", ".", "format", "(", "self", ".", "with_bias", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_module.ModulatedDeformConv.__init__": [[83, 116], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.Parameter", "torch.Parameter", "deform_conv_module.ModulatedDeformConv.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "deform_conv_module.ModulatedDeformConv.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_module.ModulatedDeformConv.reset_parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "deformable_groups", "=", "1", ",", "\n", "bias", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "self", ".", "with_bias", "=", "bias", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "out_channels", ",", "\n", "in_channels", "//", "groups", ",", "\n", "*", "self", ".", "kernel_size", "\n", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_module.ModulatedDeformConv.reset_parameters": [[117, 125], ["deform_conv_module.ModulatedDeformConv.weight.data.uniform_", "math.sqrt", "deform_conv_module.ModulatedDeformConv.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_module.ModulatedDeformConv.forward": [[126, 130], ["deform_conv_func.modulated_deform_conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "offset", ",", "mask", ")", ":", "\n", "        ", "return", "modulated_deform_conv", "(", "\n", "input", ",", "offset", ",", "mask", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "deformable_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_module.ModulatedDeformConv.__repr__": [[131, 143], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"\"", ".", "join", "(", "[", "\n", "\"{}(\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", ",", "\n", "\"in_channels={}, \"", ".", "format", "(", "self", ".", "in_channels", ")", ",", "\n", "\"out_channels={}, \"", ".", "format", "(", "self", ".", "out_channels", ")", ",", "\n", "\"kernel_size={}, \"", ".", "format", "(", "self", ".", "kernel_size", ")", ",", "\n", "\"stride={}, \"", ".", "format", "(", "self", ".", "stride", ")", ",", "\n", "\"dilation={}, \"", ".", "format", "(", "self", ".", "dilation", ")", ",", "\n", "\"padding={}, \"", ".", "format", "(", "self", ".", "padding", ")", ",", "\n", "\"groups={}, \"", ".", "format", "(", "self", ".", "groups", ")", ",", "\n", "\"deformable_groups={}, \"", ".", "format", "(", "self", ".", "deformable_groups", ")", ",", "\n", "\"bias={})\"", ".", "format", "(", "self", ".", "with_bias", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_module.ModulatedDeformConvPack.__init__": [[147, 170], ["deform_conv_module.ModulatedDeformConv.__init__", "torch.Conv2d", "torch.Conv2d", "deform_conv_module.ModulatedDeformConvPack.init_offset", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_module.ModulatedDeformConvPack.init_offset"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "deformable_groups", "=", "1", ",", "\n", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformConvPack", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "\n", "groups", ",", "deformable_groups", ",", "bias", ")", "\n", "\n", "self", ".", "conv_offset_mask", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", "//", "self", ".", "groups", ",", "\n", "self", ".", "deformable_groups", "*", "3", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "\n", "self", ".", "kernel_size", "[", "1", "]", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "stride", "=", "_pair", "(", "self", ".", "stride", ")", ",", "\n", "padding", "=", "_pair", "(", "self", ".", "padding", ")", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "init_offset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_module.ModulatedDeformConvPack.init_offset": [[171, 174], ["deform_conv_module.ModulatedDeformConvPack.conv_offset_mask.weight.data.zero_", "deform_conv_module.ModulatedDeformConvPack.conv_offset_mask.bias.data.zero_"], "methods", ["None"], ["", "def", "init_offset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_offset_mask", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "conv_offset_mask", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_conv_module.ModulatedDeformConvPack.forward": [[175, 183], ["deform_conv_module.ModulatedDeformConvPack.conv_offset_mask", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "deform_conv_func.modulated_deform_conv"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv_offset_mask", "(", "input", ")", "\n", "o1", ",", "o2", ",", "mask", "=", "torch", ".", "chunk", "(", "out", ",", "3", ",", "dim", "=", "1", ")", "\n", "offset", "=", "torch", ".", "cat", "(", "(", "o1", ",", "o2", ")", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "sigmoid", "(", "mask", ")", "\n", "return", "modulated_deform_conv", "(", "\n", "input", ",", "offset", ",", "mask", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "deformable_groups", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_pool_module.DeformRoIPooling.__init__": [[8, 26], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_scale", ",", "\n", "out_size", ",", "\n", "out_channels", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ")", ":", "\n", "        ", "super", "(", "DeformRoIPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "self", ".", "out_size", "=", "out_size", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "no_trans", "=", "no_trans", "\n", "self", ".", "group_size", "=", "group_size", "\n", "self", ".", "part_size", "=", "out_size", "if", "part_size", "is", "None", "else", "part_size", "\n", "self", ".", "sample_per_part", "=", "sample_per_part", "\n", "self", ".", "trans_std", "=", "trans_std", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_pool_module.DeformRoIPooling.forward": [[27, 34], ["deform_pool_func.deform_roi_pooling", "data.new_empty"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ",", "rois", ",", "offset", ")", ":", "\n", "        ", "if", "self", ".", "no_trans", ":", "\n", "            ", "offset", "=", "data", ".", "new_empty", "(", "0", ")", "\n", "", "return", "deform_roi_pooling", "(", "\n", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "self", ".", "out_size", ",", "\n", "self", ".", "out_channels", ",", "self", ".", "no_trans", ",", "self", ".", "group_size", ",", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "self", ".", "trans_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_pool_module.DeformRoIPoolingPack.__init__": [[38, 65], ["deform_pool_module.DeformRoIPooling.__init__", "torch.nn.Sequential", "deform_pool_module.DeformRoIPoolingPack.offset_fc[].weight.data.zero_", "deform_pool_module.DeformRoIPoolingPack.offset_fc[].bias.data.zero_", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_scale", ",", "\n", "out_size", ",", "\n", "out_channels", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ",", "\n", "deform_fc_channels", "=", "1024", ")", ":", "\n", "        ", "super", "(", "DeformRoIPoolingPack", ",", "\n", "self", ")", ".", "__init__", "(", "spatial_scale", ",", "out_size", ",", "out_channels", ",", "no_trans", ",", "\n", "group_size", ",", "part_size", ",", "sample_per_part", ",", "trans_std", ")", "\n", "\n", "self", ".", "deform_fc_channels", "=", "deform_fc_channels", "\n", "\n", "if", "not", "no_trans", ":", "\n", "            ", "self", ".", "offset_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "out_size", "*", "self", ".", "out_size", "*", "self", ".", "out_channels", ",", "\n", "self", ".", "deform_fc_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "deform_fc_channels", ",", "self", ".", "deform_fc_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "deform_fc_channels", ",", "\n", "self", ".", "out_size", "*", "self", ".", "out_size", "*", "2", ")", ")", "\n", "self", ".", "offset_fc", "[", "-", "1", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "offset_fc", "[", "-", "1", "]", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_pool_module.DeformRoIPoolingPack.forward": [[66, 87], ["data.size", "data.new_empty", "deform_pool_func.deform_roi_pooling", "data.new_empty", "deform_pool_func.deform_roi_pooling", "deform_pool_module.DeformRoIPoolingPack.offset_fc", "offset.view.view.view", "deform_pool_func.deform_roi_pooling", "deform_pool_func.deform_roi_pooling.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "data", ",", "rois", ")", ":", "\n", "        ", "assert", "data", ".", "size", "(", "1", ")", "==", "self", ".", "out_channels", "\n", "if", "self", ".", "no_trans", ":", "\n", "            ", "offset", "=", "data", ".", "new_empty", "(", "0", ")", "\n", "return", "deform_roi_pooling", "(", "\n", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "self", ".", "out_size", ",", "\n", "self", ".", "out_channels", ",", "self", ".", "no_trans", ",", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "self", ".", "sample_per_part", ",", "self", ".", "trans_std", ")", "\n", "", "else", ":", "\n", "            ", "n", "=", "rois", ".", "shape", "[", "0", "]", "\n", "offset", "=", "data", ".", "new_empty", "(", "0", ")", "\n", "x", "=", "deform_roi_pooling", "(", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "\n", "self", ".", "out_size", ",", "self", ".", "out_channels", ",", "True", ",", "\n", "self", ".", "group_size", ",", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "self", ".", "trans_std", ")", "\n", "offset", "=", "self", ".", "offset_fc", "(", "x", ".", "view", "(", "n", ",", "-", "1", ")", ")", "\n", "offset", "=", "offset", ".", "view", "(", "n", ",", "2", ",", "self", ".", "out_size", ",", "self", ".", "out_size", ")", "\n", "return", "deform_roi_pooling", "(", "\n", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "self", ".", "out_size", ",", "\n", "self", ".", "out_channels", ",", "self", ".", "no_trans", ",", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "self", ".", "sample_per_part", ",", "self", ".", "trans_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_pool_module.ModulatedDeformRoIPoolingPack.__init__": [[91, 127], ["deform_pool_module.DeformRoIPooling.__init__", "torch.nn.Sequential", "deform_pool_module.ModulatedDeformRoIPoolingPack.offset_fc[].weight.data.zero_", "deform_pool_module.ModulatedDeformRoIPoolingPack.offset_fc[].bias.data.zero_", "torch.nn.Sequential", "deform_pool_module.ModulatedDeformRoIPoolingPack.mask_fc[].weight.data.zero_", "deform_pool_module.ModulatedDeformRoIPoolingPack.mask_fc[].bias.data.zero_", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_scale", ",", "\n", "out_size", ",", "\n", "out_channels", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ",", "\n", "deform_fc_channels", "=", "1024", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformRoIPoolingPack", ",", "self", ")", ".", "__init__", "(", "\n", "spatial_scale", ",", "out_size", ",", "out_channels", ",", "no_trans", ",", "group_size", ",", "\n", "part_size", ",", "sample_per_part", ",", "trans_std", ")", "\n", "\n", "self", ".", "deform_fc_channels", "=", "deform_fc_channels", "\n", "\n", "if", "not", "no_trans", ":", "\n", "            ", "self", ".", "offset_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "out_size", "*", "self", ".", "out_size", "*", "self", ".", "out_channels", ",", "\n", "self", ".", "deform_fc_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "deform_fc_channels", ",", "self", ".", "deform_fc_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "deform_fc_channels", ",", "\n", "self", ".", "out_size", "*", "self", ".", "out_size", "*", "2", ")", ")", "\n", "self", ".", "offset_fc", "[", "-", "1", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "offset_fc", "[", "-", "1", "]", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "mask_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "out_size", "*", "self", ".", "out_size", "*", "self", ".", "out_channels", ",", "\n", "self", ".", "deform_fc_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "deform_fc_channels", ",", "\n", "self", ".", "out_size", "*", "self", ".", "out_size", "*", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "mask_fc", "[", "2", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "mask_fc", "[", "2", "]", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_pool_module.ModulatedDeformRoIPoolingPack.forward": [[128, 151], ["data.size", "data.new_empty", "deform_pool_func.deform_roi_pooling", "data.new_empty", "deform_pool_func.deform_roi_pooling", "deform_pool_module.ModulatedDeformRoIPoolingPack.offset_fc", "offset.view.view.view", "deform_pool_module.ModulatedDeformRoIPoolingPack.mask_fc", "mask.view.view.view", "deform_pool_func.deform_roi_pooling.view", "deform_pool_func.deform_roi_pooling.view", "deform_pool_func.deform_roi_pooling"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "data", ",", "rois", ")", ":", "\n", "        ", "assert", "data", ".", "size", "(", "1", ")", "==", "self", ".", "out_channels", "\n", "if", "self", ".", "no_trans", ":", "\n", "            ", "offset", "=", "data", ".", "new_empty", "(", "0", ")", "\n", "return", "deform_roi_pooling", "(", "\n", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "self", ".", "out_size", ",", "\n", "self", ".", "out_channels", ",", "self", ".", "no_trans", ",", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "self", ".", "sample_per_part", ",", "self", ".", "trans_std", ")", "\n", "", "else", ":", "\n", "            ", "n", "=", "rois", ".", "shape", "[", "0", "]", "\n", "offset", "=", "data", ".", "new_empty", "(", "0", ")", "\n", "x", "=", "deform_roi_pooling", "(", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "\n", "self", ".", "out_size", ",", "self", ".", "out_channels", ",", "True", ",", "\n", "self", ".", "group_size", ",", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "self", ".", "trans_std", ")", "\n", "offset", "=", "self", ".", "offset_fc", "(", "x", ".", "view", "(", "n", ",", "-", "1", ")", ")", "\n", "offset", "=", "offset", ".", "view", "(", "n", ",", "2", ",", "self", ".", "out_size", ",", "self", ".", "out_size", ")", "\n", "mask", "=", "self", ".", "mask_fc", "(", "x", ".", "view", "(", "n", ",", "-", "1", ")", ")", "\n", "mask", "=", "mask", ".", "view", "(", "n", ",", "1", ",", "self", ".", "out_size", ",", "self", ".", "out_size", ")", "\n", "return", "deform_roi_pooling", "(", "\n", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "self", ".", "out_size", ",", "\n", "self", ".", "out_channels", ",", "self", ".", "no_trans", ",", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "self", ".", "sample_per_part", ",", "self", ".", "trans_std", ")", "*", "mask", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_pool_func.DeformRoIPoolingFunction.forward": [[10, 62], ["data.new_empty", "data.new_empty", "maskrcnn_benchmark._C.deform_psroi_pooling_forward", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "\n", "ctx", ",", "\n", "data", ",", "\n", "rois", ",", "\n", "offset", ",", "\n", "spatial_scale", ",", "\n", "out_size", ",", "\n", "out_channels", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", "\n", ")", ":", "\n", "        ", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "out_size", "=", "out_size", "\n", "ctx", ".", "out_channels", "=", "out_channels", "\n", "ctx", ".", "no_trans", "=", "no_trans", "\n", "ctx", ".", "group_size", "=", "group_size", "\n", "ctx", ".", "part_size", "=", "out_size", "if", "part_size", "is", "None", "else", "part_size", "\n", "ctx", ".", "sample_per_part", "=", "sample_per_part", "\n", "ctx", ".", "trans_std", "=", "trans_std", "\n", "\n", "assert", "0.0", "<=", "ctx", ".", "trans_std", "<=", "1.0", "\n", "if", "not", "data", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "n", "=", "rois", ".", "shape", "[", "0", "]", "\n", "output", "=", "data", ".", "new_empty", "(", "n", ",", "out_channels", ",", "out_size", ",", "out_size", ")", "\n", "output_count", "=", "data", ".", "new_empty", "(", "n", ",", "out_channels", ",", "out_size", ",", "out_size", ")", "\n", "_C", ".", "deform_psroi_pooling_forward", "(", "\n", "data", ",", "\n", "rois", ",", "\n", "offset", ",", "\n", "output", ",", "\n", "output_count", ",", "\n", "ctx", ".", "no_trans", ",", "\n", "ctx", ".", "spatial_scale", ",", "\n", "ctx", ".", "out_channels", ",", "\n", "ctx", ".", "group_size", ",", "\n", "ctx", ".", "out_size", ",", "\n", "ctx", ".", "part_size", ",", "\n", "ctx", ".", "sample_per_part", ",", "\n", "ctx", ".", "trans_std", "\n", ")", "\n", "\n", "if", "data", ".", "requires_grad", "or", "rois", ".", "requires_grad", "or", "offset", ".", "requires_grad", ":", "\n", "            ", "ctx", ".", "save_for_backward", "(", "data", ",", "rois", ",", "offset", ")", "\n", "", "ctx", ".", "output_count", "=", "output_count", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_pool_func.DeformRoIPoolingFunction.backward": [[63, 93], ["torch.zeros_like", "torch.zeros_like", "maskrcnn_benchmark._C.deform_psroi_pooling_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "data", ",", "rois", ",", "offset", "=", "ctx", ".", "saved_tensors", "\n", "output_count", "=", "ctx", ".", "output_count", "\n", "grad_input", "=", "torch", ".", "zeros_like", "(", "data", ")", "\n", "grad_rois", "=", "None", "\n", "grad_offset", "=", "torch", ".", "zeros_like", "(", "offset", ")", "\n", "\n", "_C", ".", "deform_psroi_pooling_backward", "(", "\n", "grad_output", ",", "\n", "data", ",", "\n", "rois", ",", "\n", "offset", ",", "\n", "output_count", ",", "\n", "grad_input", ",", "\n", "grad_offset", ",", "\n", "ctx", ".", "no_trans", ",", "\n", "ctx", ".", "spatial_scale", ",", "\n", "ctx", ".", "out_channels", ",", "\n", "ctx", ".", "group_size", ",", "\n", "ctx", ".", "out_size", ",", "\n", "ctx", ".", "part_size", ",", "\n", "ctx", ".", "sample_per_part", ",", "\n", "ctx", ".", "trans_std", "\n", ")", "\n", "return", "(", "grad_input", ",", "grad_rois", ",", "grad_offset", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.bbox_aug.im_detect_bbox_aug": [[11, 69], ["range", "bbox_aug.im_detect_bbox", "bbox_aug.im_detect_bbox_aug.add_preds_t"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.bbox_aug.im_detect_bbox"], ["def", "im_detect_bbox_aug", "(", "model", ",", "images", ",", "device", ")", ":", "\n", "# Collect detections computed under different transformations", "\n", "    ", "boxlists_ts", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "len", "(", "images", ")", ")", ":", "\n", "        ", "boxlists_ts", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "def", "add_preds_t", "(", "boxlists_t", ")", ":", "\n", "        ", "for", "i", ",", "boxlist_t", "in", "enumerate", "(", "boxlists_t", ")", ":", "\n", "            ", "if", "len", "(", "boxlists_ts", "[", "i", "]", ")", "==", "0", ":", "\n", "# The first one is identity transform, no need to resize the boxlist", "\n", "                ", "boxlists_ts", "[", "i", "]", ".", "append", "(", "boxlist_t", ")", "\n", "", "else", ":", "\n", "# Resize the boxlist as the first one", "\n", "                ", "boxlists_ts", "[", "i", "]", ".", "append", "(", "boxlist_t", ".", "resize", "(", "boxlists_ts", "[", "i", "]", "[", "0", "]", ".", "size", ")", ")", "\n", "\n", "# Compute detections for the original image (identity transform)", "\n", "", "", "", "boxlists_i", "=", "im_detect_bbox", "(", "\n", "model", ",", "images", ",", "cfg", ".", "INPUT", ".", "MIN_SIZE_TEST", ",", "cfg", ".", "INPUT", ".", "MAX_SIZE_TEST", ",", "device", "\n", ")", "\n", "add_preds_t", "(", "boxlists_i", ")", "\n", "\n", "# Perform detection on the horizontally flipped image", "\n", "if", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "H_FLIP", ":", "\n", "        ", "boxlists_hf", "=", "im_detect_bbox_hflip", "(", "\n", "model", ",", "images", ",", "cfg", ".", "INPUT", ".", "MIN_SIZE_TEST", ",", "cfg", ".", "INPUT", ".", "MAX_SIZE_TEST", ",", "device", "\n", ")", "\n", "add_preds_t", "(", "boxlists_hf", ")", "\n", "\n", "# Compute detections at different scales", "\n", "", "for", "scale", "in", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "SCALES", ":", "\n", "        ", "max_size", "=", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "MAX_SIZE", "\n", "boxlists_scl", "=", "im_detect_bbox_scale", "(", "\n", "model", ",", "images", ",", "scale", ",", "max_size", ",", "device", "\n", ")", "\n", "add_preds_t", "(", "boxlists_scl", ")", "\n", "\n", "if", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "SCALE_H_FLIP", ":", "\n", "            ", "boxlists_scl_hf", "=", "im_detect_bbox_scale", "(", "\n", "model", ",", "images", ",", "scale", ",", "max_size", ",", "device", ",", "hflip", "=", "True", "\n", ")", "\n", "add_preds_t", "(", "boxlists_scl_hf", ")", "\n", "\n", "# Merge boxlists detected by different bbox aug params", "\n", "", "", "boxlists", "=", "[", "]", "\n", "for", "i", ",", "boxlist_ts", "in", "enumerate", "(", "boxlists_ts", ")", ":", "\n", "        ", "bbox", "=", "torch", ".", "cat", "(", "[", "boxlist_t", ".", "bbox", "for", "boxlist_t", "in", "boxlist_ts", "]", ")", "\n", "scores", "=", "torch", ".", "cat", "(", "[", "boxlist_t", ".", "get_field", "(", "'scores'", ")", "for", "boxlist_t", "in", "boxlist_ts", "]", ")", "\n", "boxlist", "=", "BoxList", "(", "bbox", ",", "boxlist_ts", "[", "0", "]", ".", "size", ",", "boxlist_ts", "[", "0", "]", ".", "mode", ")", "\n", "boxlist", ".", "add_field", "(", "'scores'", ",", "scores", ")", "\n", "boxlists", ".", "append", "(", "boxlist", ")", "\n", "\n", "# Apply NMS and limit the final detections", "\n", "", "results", "=", "[", "]", "\n", "post_processor", "=", "make_roi_box_post_processor", "(", "cfg", ")", "\n", "for", "boxlist", "in", "boxlists", ":", "\n", "        ", "results", ".", "append", "(", "post_processor", ".", "filter_results", "(", "boxlist", ",", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_CLASSES", ")", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.bbox_aug.im_detect_bbox": [[71, 85], ["torchvision.Compose", "maskrcnn_benchmark.structures.image_list.to_image_list", "model", "TT.Compose.", "maskrcnn_benchmark.structures.image_list.to_image_list.to", "maskrcnn_benchmark.data.transforms.Resize", "torchvision.ToTensor", "maskrcnn_benchmark.data.transforms.Normalize", "maskrcnn_benchmark.config.cfg.INPUT.MIN_SIZE_TEST", "maskrcnn_benchmark.config.cfg.INPUT.MAX_SIZE_TEST"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.image_list.to_image_list", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to"], ["", "def", "im_detect_bbox", "(", "model", ",", "images", ",", "target_scale", ",", "target_max_size", ",", "device", ")", ":", "\n", "    ", "\"\"\"\n    Performs bbox detection on the original image.\n    \"\"\"", "\n", "transform", "=", "TT", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "target_scale", ",", "target_max_size", ")", ",", "\n", "TT", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "\n", "mean", "=", "cfg", ".", "INPUT", ".", "PIXEL_MEAN", ",", "std", "=", "cfg", ".", "INPUT", ".", "PIXEL_STD", ",", "to_bgr255", "=", "cfg", ".", "INPUT", ".", "TO_BGR255", "\n", ")", "\n", "]", ")", "\n", "images", "=", "[", "transform", "(", "image", ")", "for", "image", "in", "images", "]", "\n", "images", "=", "to_image_list", "(", "images", ",", "cfg", ".", "DATALOADER", ".", "SIZE_DIVISIBILITY", ")", "\n", "return", "model", "(", "images", ".", "to", "(", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.bbox_aug.im_detect_bbox_hflip": [[87, 107], ["torchvision.Compose", "maskrcnn_benchmark.structures.image_list.to_image_list", "model", "TT.Compose.", "maskrcnn_benchmark.structures.image_list.to_image_list.to", "boxlist.transpose", "maskrcnn_benchmark.data.transforms.Resize", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "maskrcnn_benchmark.data.transforms.Normalize", "maskrcnn_benchmark.config.cfg.INPUT.MIN_SIZE_TEST", "maskrcnn_benchmark.config.cfg.INPUT.MAX_SIZE_TEST"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.image_list.to_image_list", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.transpose"], ["", "def", "im_detect_bbox_hflip", "(", "model", ",", "images", ",", "target_scale", ",", "target_max_size", ",", "device", ")", ":", "\n", "    ", "\"\"\"\n    Performs bbox detection on the horizontally flipped image.\n    Function signature is the same as for im_detect_bbox.\n    \"\"\"", "\n", "transform", "=", "TT", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "target_scale", ",", "target_max_size", ")", ",", "\n", "TT", ".", "RandomHorizontalFlip", "(", "1.0", ")", ",", "\n", "TT", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "\n", "mean", "=", "cfg", ".", "INPUT", ".", "PIXEL_MEAN", ",", "std", "=", "cfg", ".", "INPUT", ".", "PIXEL_STD", ",", "to_bgr255", "=", "cfg", ".", "INPUT", ".", "TO_BGR255", "\n", ")", "\n", "]", ")", "\n", "images", "=", "[", "transform", "(", "image", ")", "for", "image", "in", "images", "]", "\n", "images", "=", "to_image_list", "(", "images", ",", "cfg", ".", "DATALOADER", ".", "SIZE_DIVISIBILITY", ")", "\n", "boxlists", "=", "model", "(", "images", ".", "to", "(", "device", ")", ")", "\n", "\n", "# Invert the detections computed on the flipped image", "\n", "boxlists_inv", "=", "[", "boxlist", ".", "transpose", "(", "0", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "return", "boxlists_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.bbox_aug.im_detect_bbox_scale": [[109, 119], ["bbox_aug.im_detect_bbox_hflip", "bbox_aug.im_detect_bbox"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.bbox_aug.im_detect_bbox_hflip", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.bbox_aug.im_detect_bbox"], ["", "def", "im_detect_bbox_scale", "(", "model", ",", "images", ",", "target_scale", ",", "target_max_size", ",", "device", ",", "hflip", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Computes bbox detections at the given scale.\n    Returns predictions in the scaled image space.\n    \"\"\"", "\n", "if", "hflip", ":", "\n", "        ", "boxlists_scl", "=", "im_detect_bbox_hflip", "(", "model", ",", "images", ",", "target_scale", ",", "target_max_size", ",", "device", ")", "\n", "", "else", ":", "\n", "        ", "boxlists_scl", "=", "im_detect_bbox", "(", "model", ",", "images", ",", "target_scale", ",", "target_max_size", ",", "device", ")", "\n", "", "return", "boxlists_scl", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.searcher.reduce_loss_dict": [[13, 36], ["maskrcnn_benchmark.utils.comm.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "loss_dict.keys", "loss_names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_world_size", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_rank"], ["def", "reduce_loss_dict", "(", "loss_dict", ")", ":", "\n", "    ", "\"\"\"\n    Reduce the loss dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    loss_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "loss_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "loss_names", "=", "[", "]", "\n", "all_losses", "=", "[", "]", "\n", "for", "k", "in", "sorted", "(", "loss_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "loss_names", ".", "append", "(", "k", ")", "\n", "all_losses", ".", "append", "(", "loss_dict", "[", "k", "]", ")", "\n", "", "all_losses", "=", "torch", ".", "stack", "(", "all_losses", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "all_losses", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "all_losses", "/=", "world_size", "\n", "", "reduced_losses", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "loss_names", ",", "all_losses", ")", "}", "\n", "", "return", "reduced_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.searcher.do_train": [[38, 128], ["logging.getLogger", "logging.getLogger.info", "maskrcnn_benchmark.utils.metric_logger.MetricLogger", "len", "model.train", "time.time", "time.time", "enumerate", "str", "logging.getLogger.info", "scheduler.step", "images.to.to", "isinstance", "model", "sum", "searcher.reduce_loss_dict", "sum", "maskrcnn_benchmark.utils.metric_logger.MetricLogger.update", "optim_w.zero_grad", "sum.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optim_w.step", "time.time", "maskrcnn_benchmark.utils.metric_logger.MetricLogger.update", "str", "time.time", "datetime.timedelta", "time.time", "optim_a.zero_grad", "model.parameters", "optim_a.step", "time.time", "datetime.timedelta", "logging.getLogger.info", "checkpointer.save", "checkpointer.save", "target.to", "maskrcnn_benchmark.utils.metric_logger.MetricLogger.delimiter.join().format", "model.module.backbone.body.genotype", "target[].to", "target[].to", "model.values", "reduce_loss_dict.values", "int", "maskrcnn_benchmark.utils.metric_logger.MetricLogger.delimiter.join", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.tools.train_net.train", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.trainer.reduce_loss_dict", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_pool_func.DeformRoIPoolingFunction.backward", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.save", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.save", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to"], ["", "def", "do_train", "(", "\n", "model", ",", "\n", "data_loader", ",", "\n", "arch_start_iter", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "\n", "checkpointer", ",", "\n", "device", ",", "\n", "checkpoint_period", ",", "\n", "arguments", ",", "\n", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"maskrcnn_benchmark.searcher\"", ")", "\n", "logger", ".", "info", "(", "\"Start searching\"", ")", "\n", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "max_iter", "=", "len", "(", "data_loader", ")", "\n", "start_iter", "=", "arguments", "[", "\"iteration\"", "]", "\n", "model", ".", "train", "(", ")", "\n", "start_training_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "optim_w", "=", "optimizer", "[", "'optim_w'", "]", "\n", "optim_a", "=", "optimizer", "[", "'optim_a'", "]", "\n", "for", "iteration", ",", "(", "images", ",", "targets", ",", "_", ")", "in", "enumerate", "(", "data_loader", ",", "start_iter", ")", ":", "\n", "        ", "data_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "iteration", "=", "iteration", "+", "1", "\n", "arguments", "[", "\"iteration\"", "]", "=", "iteration", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "if", "isinstance", "(", "targets", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "targets", "=", "[", "[", "target", "[", "0", "]", ".", "to", "(", "device", ")", "for", "target", "in", "targets", "]", ",", "\n", "[", "target", "[", "1", "]", ".", "to", "(", "device", ")", "for", "target", "in", "targets", "]", "]", "\n", "", "else", ":", "\n", "            ", "targets", "=", "[", "target", ".", "to", "(", "device", ")", "for", "target", "in", "targets", "]", "\n", "\n", "", "loss_dict", "=", "model", "(", "images", ",", "targets", ")", "\n", "\n", "losses", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict", ".", "values", "(", ")", ")", "\n", "\n", "# reduce losses over all GPUs for logging purposes", "\n", "loss_dict_reduced", "=", "reduce_loss_dict", "(", "loss_dict", ")", "\n", "losses_reduced", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict_reduced", ".", "values", "(", ")", ")", "\n", "meters", ".", "update", "(", "loss", "=", "losses_reduced", ",", "**", "loss_dict_reduced", ")", "\n", "\n", "optim_w", ".", "zero_grad", "(", ")", "\n", "if", "iteration", ">", "arch_start_iter", ":", "\n", "            ", "optim_a", ".", "zero_grad", "(", ")", "\n", "", "losses", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "5.", ")", "\n", "optim_w", ".", "step", "(", ")", "\n", "if", "iteration", ">", "arch_start_iter", ":", "\n", "            ", "optim_a", ".", "step", "(", ")", "\n", "\n", "", "batch_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "meters", ".", "update", "(", "time", "=", "batch_time", ",", "data", "=", "data_time", ")", "\n", "\n", "eta_seconds", "=", "meters", ".", "time", ".", "global_avg", "*", "(", "max_iter", "-", "iteration", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "\n", "if", "iteration", "%", "20", "==", "0", "or", "iteration", "==", "max_iter", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "meters", ".", "delimiter", ".", "join", "(", "\n", "[", "\n", "\"eta: {eta}\"", ",", "\n", "\"iter: {iter}\"", ",", "\n", "\"{meters}\"", ",", "\n", "\"lr: {lr:.6f}\"", ",", "\n", "\"max mem: {memory:.0f}\"", ",", "\n", "]", "\n", ")", ".", "format", "(", "\n", "eta", "=", "eta_string", ",", "\n", "iter", "=", "iteration", ",", "\n", "meters", "=", "str", "(", "meters", ")", ",", "\n", "lr", "=", "optim_w", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "1024.0", "/", "1024.0", ",", "\n", ")", "\n", ")", "\n", "", "if", "iteration", "%", "checkpoint_period", "==", "0", ":", "\n", "            ", "if", "iteration", ">", "arch_start_iter", ":", "\n", "                ", "arguments", "[", "'genotype'", "]", "=", "model", ".", "module", ".", "backbone", ".", "body", ".", "genotype", "(", ")", "\n", "", "checkpointer", ".", "save", "(", "\"model_{:07d}\"", ".", "format", "(", "iteration", ")", ",", "**", "arguments", ")", "\n", "", "if", "iteration", "==", "max_iter", ":", "\n", "            ", "checkpointer", ".", "save", "(", "\"model_final\"", ",", "**", "arguments", ")", "\n", "\n", "", "", "total_training_time", "=", "time", ".", "time", "(", ")", "-", "start_training_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "total_training_time", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"Total training time: {} ({:.4f} s / it)\"", ".", "format", "(", "\n", "total_time_str", ",", "total_training_time", "/", "(", "max_iter", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.inference.resize_image": [[17, 21], ["torch.nn.functional.interpolate", "maskrcnn_benchmark.structures.image_list.to_image_list"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.image_list.to_image_list"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "pre_nms_top_n", ",", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.inference.multi_scale_compute_on_dataset": [[21, 64], ["model.eval", "torch.device", "enumerate", "tqdm.tqdm", "results_dict.update", "torch.no_grad", "max", "model", "timer.tic", "resize_image.to", "output[].add_field", "timer.toc", "o.to", "inference.resize_image", "model", "output[].add_field", "targets[].get_field", "torch.cuda.synchronize", "zip", "int", "int", "resize_image.to", "torch.cat", "output[].get_field", "output_scale[].get_field"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.inference.resize_image", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.synchronize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["pre_nms_top_n", ",", "\n", "post_nms_top_n", ",", "\n", "nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n", "fpn_post_nms_per_batch", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            pre_nms_top_n (int)\n            post_nms_top_n (int)\n            nms_thresh (float)\n            min_size (int)\n            box_coder (BoxCoder)\n            fpn_post_nms_top_n (int)\n        \"\"\"", "\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n", "if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "self", ".", "fpn_post_nms_per_batch", "=", "fpn_post_nms_per_batch", "\n", "\n", "", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "# later cat of bbox requires all fields to be present for all bbox", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.inference.compute_on_dataset": [[18, 40], ["model.eval", "torch.device", "enumerate", "tqdm.tqdm", "results_dict.update", "torch.no_grad", "timer.tic", "bbox_aug.im_detect_bbox_aug", "model", "timer.toc", "o.to", "images.to", "torch.cuda.synchronize", "zip"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.bbox_aug.im_detect_bbox_aug", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.synchronize"], ["\n", "def", "__init__", "(", "\n", "self", ",", "\n", "pre_nms_top_n", ",", "\n", "post_nms_top_n", ",", "\n", "nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n", "fpn_post_nms_per_batch", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            pre_nms_top_n (int)\n            post_nms_top_n (int)\n            nms_thresh (float)\n            min_size (int)\n            box_coder (BoxCoder)\n            fpn_post_nms_top_n (int)\n        \"\"\"", "\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.inference._accumulate_predictions_from_multiple_gpus": [[42, 62], ["utils.comm.all_gather", "list", "utils.comm.is_main_process", "predictions.update", "sorted", "len", "logging.getLogger", "logging.getLogger.warning", "predictions.keys"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.all_gather", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.is_main_process", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["self", ".", "min_size", "=", "min_size", "\n", "\n", "if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "self", ".", "fpn_post_nms_per_batch", "=", "fpn_post_nms_per_batch", "\n", "\n", "", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.inference.inference": [[64, 136], ["logging.getLogger", "logging.getLogger.info", "dict", "os.path.join", "torch.device", "utils.comm.get_world_size", "utils.timer.Timer", "utils.timer.Timer", "utils.timer.Timer.tic", "inference.compute_on_dataset", "utils.comm.synchronize", "utils.timer.Timer.toc", "utils.timer.get_time_str", "logging.getLogger.info", "utils.timer.get_time_str", "logging.getLogger.info", "inference._accumulate_predictions_from_multiple_gpus", "maskrcnn_benchmark.data.datasets.evaluation.evaluate", "utils.comm.is_main_process", "torch.save", "len", "os.path.join", "len", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_world_size", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.inference_two_net.compute_on_dataset", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.synchronize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.get_time_str", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.get_time_str", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.inference_two_net._accumulate_predictions_from_multiple_gpus", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.evaluation.__init__.evaluate", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.is_main_process", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.save", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["# later cat of bbox requires all fields to be present for all bbox", "\n", "# so we need to add a dummy for objectness that's missing", "\n", "for", "gt_box", "in", "gt_boxes", ":", "\n", "            ", "gt_box", ".", "add_field", "(", "\"objectness\"", ",", "torch", ".", "ones", "(", "len", "(", "gt_box", ")", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "proposals", "=", "[", "\n", "cat_boxlist", "(", "(", "proposal", ",", "gt_box", ")", ")", "\n", "for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n", "]", "\n", "\n", "return", "proposals", "\n", "\n", "", "def", "forward_for_single_feature_map", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n", "objectness", "=", "permute_and_flatten", "(", "objectness", ",", "N", ",", "A", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "objectness", "=", "objectness", ".", "sigmoid", "(", ")", "\n", "\n", "box_regression", "=", "permute_and_flatten", "(", "box_regression", ",", "N", ",", "A", ",", "4", ",", "H", ",", "W", ")", "\n", "\n", "num_anchors", "=", "A", "*", "H", "*", "W", "\n", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n", "box_regression", "=", "box_regression", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "anchors", "]", "\n", "concat_anchors", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "concat_anchors", "=", "concat_anchors", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "-", "1", ",", "4", ")", ",", "concat_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "proposals", "=", "proposals", ".", "view", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "proposal", ",", "score", ",", "im_shape", "in", "zip", "(", "proposals", ",", "objectness", ",", "image_shapes", ")", ":", "\n", "            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "boxlist", "=", "remove_small_boxes", "(", "boxlist", ",", "self", ".", "min_size", ")", "\n", "boxlist", "=", "boxlist_nms", "(", "\n", "boxlist", ",", "\n", "self", ".", "nms_thresh", ",", "\n", "max_proposals", "=", "self", ".", "post_nms_top_n", ",", "\n", "score_field", "=", "\"objectness\"", ",", "\n", ")", "\n", "result", ".", "append", "(", "boxlist", ")", "\n", "", "return", "result", "\n", "\n", "", "def", "forward", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[list[BoxList]]\n            objectness: list[tensor]\n            box_regression: list[tensor]\n\n        Returns:\n            boxlists (list[BoxList]): the post-processed anchors, after\n                applying box decoding and NMS\n        \"\"\"", "\n", "sampled_boxes", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.trainer.reduce_loss_dict": [[15, 38], ["maskrcnn_benchmark.utils.comm.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "loss_dict.keys", "loss_names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_world_size", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_rank"], ["def", "reduce_loss_dict", "(", "loss_dict", ")", ":", "\n", "    ", "\"\"\"\n    Reduce the loss dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    loss_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "loss_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "loss_names", "=", "[", "]", "\n", "all_losses", "=", "[", "]", "\n", "for", "k", "in", "sorted", "(", "loss_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "loss_names", ".", "append", "(", "k", ")", "\n", "all_losses", ".", "append", "(", "loss_dict", "[", "k", "]", ")", "\n", "", "all_losses", "=", "torch", ".", "stack", "(", "all_losses", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "all_losses", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "all_losses", "/=", "world_size", "\n", "", "reduced_losses", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "loss_names", ",", "all_losses", ")", "}", "\n", "", "return", "reduced_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.trainer.do_train": [[40, 131], ["logging.getLogger", "logging.getLogger.info", "maskrcnn_benchmark.utils.metric_logger.MetricLogger", "len", "model.train", "time.time", "time.time", "enumerate", "str", "logging.getLogger.info", "any", "scheduler.step", "images.to.to", "isinstance", "model", "sum", "trainer.reduce_loss_dict", "sum", "maskrcnn_benchmark.utils.metric_logger.MetricLogger.update", "optimizer.zero_grad", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "time.time", "maskrcnn_benchmark.utils.metric_logger.MetricLogger.update", "str", "time.time", "datetime.timedelta", "logging.getLogger.error", "time.time", "apex.amp.scale_loss", "scaled_losses.backward", "model.parameters", "time.time", "datetime.timedelta", "logging.getLogger.info", "checkpointer.save", "checkpointer.save", "target.to", "maskrcnn_benchmark.utils.metric_logger.MetricLogger.delimiter.join().format", "len", "target[].to", "target[].to", "model.values", "reduce_loss_dict.values", "int", "maskrcnn_benchmark.utils.metric_logger.MetricLogger.delimiter.join", "str", "len", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.tools.train_net.train", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.trainer.reduce_loss_dict", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.dcn.deform_pool_func.DeformRoIPoolingFunction.backward", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.save", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.save", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "do_train", "(", "\n", "model", ",", "\n", "data_loader", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "\n", "checkpointer", ",", "\n", "device", ",", "\n", "checkpoint_period", ",", "\n", "arguments", ",", "\n", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"maskrcnn_benchmark.trainer\"", ")", "\n", "logger", ".", "info", "(", "\"Start training\"", ")", "\n", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "max_iter", "=", "len", "(", "data_loader", ")", "\n", "start_iter", "=", "arguments", "[", "\"iteration\"", "]", "\n", "model", ".", "train", "(", ")", "\n", "start_training_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "iteration", ",", "(", "images", ",", "targets", ",", "_", ")", "in", "enumerate", "(", "data_loader", ",", "start_iter", ")", ":", "\n", "\n", "        ", "if", "any", "(", "len", "(", "target", ")", "<", "1", "for", "target", "in", "targets", ")", ":", "\n", "            ", "logger", ".", "error", "(", "f\"Iteration={iteration + 1} || Image Ids used for training {_} || targets Length={[len(target) for target in targets]}\"", ")", "\n", "continue", "\n", "", "data_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "iteration", "=", "iteration", "+", "1", "\n", "arguments", "[", "\"iteration\"", "]", "=", "iteration", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "\n", "if", "isinstance", "(", "targets", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "targets", "=", "[", "[", "target", "[", "0", "]", ".", "to", "(", "device", ")", "for", "target", "in", "targets", "]", ",", "\n", "[", "target", "[", "1", "]", ".", "to", "(", "device", ")", "for", "target", "in", "targets", "]", "]", "\n", "", "else", ":", "\n", "            ", "targets", "=", "[", "target", ".", "to", "(", "device", ")", "for", "target", "in", "targets", "]", "\n", "\n", "", "loss_dict", "=", "model", "(", "images", ",", "targets", ")", "\n", "\n", "losses", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict", ".", "values", "(", ")", ")", "\n", "\n", "# reduce losses over all GPUs for logging purposes", "\n", "loss_dict_reduced", "=", "reduce_loss_dict", "(", "loss_dict", ")", "\n", "losses_reduced", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict_reduced", ".", "values", "(", ")", ")", "\n", "meters", ".", "update", "(", "loss", "=", "losses_reduced", ",", "**", "loss_dict_reduced", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# Note: If mixed precision is not used, this ends up doing nothing", "\n", "# Otherwise apply loss scaling for mixed-precision recipe", "\n", "with", "amp", ".", "scale_loss", "(", "losses", ",", "optimizer", ")", "as", "scaled_losses", ":", "\n", "            ", "scaled_losses", ".", "backward", "(", ")", "\n", "\n", "# gradient clipping for yolact", "\n", "", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "10", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "batch_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "meters", ".", "update", "(", "time", "=", "batch_time", ",", "data", "=", "data_time", ")", "\n", "\n", "eta_seconds", "=", "meters", ".", "time", ".", "global_avg", "*", "(", "max_iter", "-", "iteration", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "\n", "if", "iteration", "%", "20", "==", "0", "or", "iteration", "==", "max_iter", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "meters", ".", "delimiter", ".", "join", "(", "\n", "[", "\n", "\"eta: {eta}\"", ",", "\n", "\"iter: {iter}\"", ",", "\n", "\"{meters}\"", ",", "\n", "\"lr: {lr:.6f}\"", ",", "\n", "\"max mem: {memory:.0f}\"", ",", "\n", "]", "\n", ")", ".", "format", "(", "\n", "eta", "=", "eta_string", ",", "\n", "iter", "=", "iteration", ",", "\n", "meters", "=", "str", "(", "meters", ")", ",", "\n", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "1024.0", "/", "1024.0", ",", "\n", ")", "\n", ")", "\n", "", "if", "iteration", "%", "checkpoint_period", "==", "0", ":", "\n", "            ", "checkpointer", ".", "save", "(", "\"model_{:07d}\"", ".", "format", "(", "iteration", ")", ",", "**", "arguments", ")", "\n", "", "if", "iteration", "==", "max_iter", ":", "\n", "            ", "checkpointer", ".", "save", "(", "\"model_final\"", ",", "**", "arguments", ")", "\n", "\n", "", "", "total_training_time", "=", "time", ".", "time", "(", ")", "-", "start_training_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "total_training_time", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"Total training time: {} ({:.4f} s / it)\"", ".", "format", "(", "\n", "total_time_str", ",", "total_training_time", "/", "(", "max_iter", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.inference_two_net.crop_image": [[20, 29], ["boxes.bbox.data.cpu().numpy().astype", "maskrcnn_benchmark.structures.image_list.to_image_list", "all_images.append", "torch.cat", "boxes.bbox.data.cpu().numpy", "torch.nn.functional.interpolate", "boxes.bbox.data.cpu"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.image_list.to_image_list", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.layers.misc.interpolate"], ["def", "crop_image", "(", "images", ",", "boxes", ")", ":", "\n", "    ", "image", "=", "images", ".", "tensors", "\n", "bboxes", "=", "boxes", ".", "bbox", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "all_images", "=", "[", "]", "\n", "for", "box", "in", "bboxes", ":", "\n", "        ", "minx", ",", "miny", ",", "maxx", ",", "maxy", "=", "box", "\n", "all_images", ".", "append", "(", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "image", "[", ":", ",", ":", ",", "miny", ":", "maxy", ",", "minx", ":", "maxx", "]", ",", "size", "=", "(", "4", "*", "32", ",", "15", "*", "32", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ")", "\n", "", "return", "to_image_list", "(", "torch", ".", "cat", "(", "all_images", ",", "dim", "=", "0", ")", ")", "\n", "", "def", "compute_on_dataset", "(", "model_detect", ",", "model_retrieval", ",", "data_loader", ",", "device", ",", "timer", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.inference_two_net.compute_on_dataset": [[29, 64], ["model_detect.eval", "model_retrieval.eval", "torch.device", "enumerate", "tqdm.tqdm", "results_dict.update", "torch.no_grad", "model_detect", "timer.tic", "images.to", "output[].bbox.size", "torch.zeros().type_as", "output[].add_field", "inference_two_net.crop_image", "model_retrieval", "output[].add_field", "output[].add_field", "output[].add_field", "timer.toc", "o.to", "crop_image.to", "targets[].get_field", "torch.cuda.synchronize", "zip", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.inference_two_net.crop_image", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.synchronize"], ["", "def", "compute_on_dataset", "(", "model_detect", ",", "model_retrieval", ",", "data_loader", ",", "device", ",", "timer", "=", "None", ")", ":", "\n", "    ", "model_detect", ".", "eval", "(", ")", "\n", "model_retrieval", ".", "eval", "(", ")", "\n", "results_dict", "=", "{", "}", "\n", "cpu_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "for", "_", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "data_loader", ")", ")", ":", "\n", "        ", "images", ",", "targets", ",", "image_ids", "=", "batch", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "timer", ":", "\n", "                ", "timer", ".", "tic", "(", ")", "\n", "# output = model(images.to(device),targets,is_words=(_==0))", "\n", "", "output", "=", "model_detect", "(", "images", ".", "to", "(", "device", ")", ",", "targets", ",", "is_words", "=", "True", ")", "\n", "if", "output", "[", "0", "]", ".", "bbox", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "                ", "zero_bedding", "=", "torch", ".", "zeros", "(", "[", "0", ",", "1920", "]", ")", ".", "type_as", "(", "output", "[", "0", "]", ".", "bbox", ")", "\n", "output", "[", "0", "]", ".", "add_field", "(", "\"imgs_embedding_nor\"", ",", "zero_bedding", ")", "\n", "# output[0].add_field(\"words_embedding_nor\",retrieval_result[\"words_embedding_nor\"])", "\n", "", "else", ":", "\n", "                ", "all_images", "=", "crop_image", "(", "images", ",", "output", "[", "0", "]", ")", "\n", "retrieval_result", "=", "model_retrieval", "(", "all_images", ".", "to", "(", "device", ")", ",", "targets", ",", "is_words", "=", "True", ")", "\n", "output", "[", "0", "]", ".", "add_field", "(", "\"imgs_embedding_nor\"", ",", "retrieval_result", "[", "\"imgs_embedding_nor\"", "]", ")", "\n", "output", "[", "0", "]", ".", "add_field", "(", "\"words_embedding_nor\"", ",", "retrieval_result", "[", "\"words_embedding_nor\"", "]", ")", "\n", "# print(output,images)", "\n", "", "if", "_", "==", "0", ":", "\n", "                ", "output", "[", "0", "]", ".", "add_field", "(", "\"y_trues\"", ",", "targets", "[", "0", "]", ".", "get_field", "(", "\"y_trues\"", ")", ")", "\n", "", "if", "timer", ":", "\n", "                ", "if", "not", "cfg", ".", "MODEL", ".", "DEVICE", "==", "'cpu'", ":", "\n", "                    ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "", "timer", ".", "toc", "(", ")", "\n", "", "output", "=", "[", "o", ".", "to", "(", "cpu_device", ")", "for", "o", "in", "output", "]", "\n", "", "results_dict", ".", "update", "(", "\n", "{", "img_id", ":", "result", "for", "img_id", ",", "result", "in", "zip", "(", "image_ids", ",", "output", ")", "}", "\n", ")", "\n", "\n", "", "return", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.inference_two_net._accumulate_predictions_from_multiple_gpus": [[66, 86], ["utils.comm.all_gather", "list", "utils.comm.is_main_process", "predictions.update", "sorted", "len", "logging.getLogger", "logging.getLogger.warning", "predictions.keys"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.all_gather", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.is_main_process", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "_accumulate_predictions_from_multiple_gpus", "(", "predictions_per_gpu", ")", ":", "\n", "    ", "all_predictions", "=", "all_gather", "(", "predictions_per_gpu", ")", "\n", "if", "not", "is_main_process", "(", ")", ":", "\n", "        ", "return", "\n", "# merge the list of dicts", "\n", "", "predictions", "=", "{", "}", "\n", "for", "p", "in", "all_predictions", ":", "\n", "        ", "predictions", ".", "update", "(", "p", ")", "\n", "# convert a dict where the key is the index in a list", "\n", "", "image_ids", "=", "list", "(", "sorted", "(", "predictions", ".", "keys", "(", ")", ")", ")", "\n", "if", "len", "(", "image_ids", ")", "!=", "image_ids", "[", "-", "1", "]", "+", "1", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "\"maskrcnn_benchmark.inference\"", ")", "\n", "logger", ".", "warning", "(", "\n", "\"Number of images that were gathered from multiple processes is not \"", "\n", "\"a contiguous set. Some images might be missing from the evaluation\"", "\n", ")", "\n", "\n", "# convert to a list", "\n", "", "predictions", "=", "[", "predictions", "[", "i", "]", "for", "i", "in", "image_ids", "]", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.inference_two_net.inference": [[88, 161], ["logging.getLogger", "logging.getLogger.info", "dict", "os.path.join", "torch.device", "utils.comm.get_world_size", "utils.timer.Timer", "utils.timer.Timer", "utils.timer.Timer.tic", "inference_two_net.compute_on_dataset", "utils.comm.synchronize", "utils.timer.Timer.toc", "utils.timer.get_time_str", "logging.getLogger.info", "utils.timer.get_time_str", "logging.getLogger.info", "inference_two_net._accumulate_predictions_from_multiple_gpus", "maskrcnn_benchmark.data.datasets.evaluation.evaluate", "utils.comm.is_main_process", "torch.save", "len", "os.path.join", "len", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_world_size", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.inference_two_net.compute_on_dataset", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.synchronize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.get_time_str", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.timer.get_time_str", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.engine.inference_two_net._accumulate_predictions_from_multiple_gpus", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.evaluation.__init__.evaluate", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.is_main_process", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.save", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "inference", "(", "\n", "model_detect", ",", "\n", "model_retrieval", ",", "\n", "data_loader", ",", "\n", "dataset_name", ",", "\n", "iou_types", "=", "(", "\"bbox\"", ",", ")", ",", "\n", "rec_type", "=", "\"ctc\"", ",", "\n", "box_only", "=", "False", ",", "\n", "device", "=", "\"cuda\"", ",", "\n", "expected_results", "=", "(", ")", ",", "\n", "expected_results_sigma_tol", "=", "4", ",", "\n", "output_folder", "=", "None", ",", "\n", ")", ":", "\n", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"maskrcnn_benchmark.inference\"", ")", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "logger", ".", "info", "(", "\"Start evaluation on {} dataset({} images).\"", ".", "format", "(", "dataset_name", ",", "len", "(", "dataset", ")", ")", ")", "\n", "\n", "extra_args", "=", "dict", "(", "\n", "box_only", "=", "box_only", ",", "\n", "iou_types", "=", "iou_types", ",", "\n", "rec_type", "=", "rec_type", ",", "\n", "expected_results", "=", "expected_results", ",", "\n", "expected_results_sigma_tol", "=", "expected_results_sigma_tol", ",", "\n", ")", "\n", "\n", "# load predictions if exists", "\n", "prediction_file", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "'predictions.pth'", ")", "\n", "# if os.path.isfile(prediction_file):", "\n", "#     predictions = torch.load(prediction_file)", "\n", "#     logger.info(\"Found prediction results at {}\".format(prediction_file))", "\n", "\n", "#     return evaluate(dataset=dataset,", "\n", "#                     predictions=predictions,", "\n", "#                     output_folder=output_folder,", "\n", "#                     **extra_args)", "\n", "\n", "# convert to a torch.device for efficiency", "\n", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "num_devices", "=", "get_world_size", "(", ")", "\n", "total_timer", "=", "Timer", "(", ")", "\n", "inference_timer", "=", "Timer", "(", ")", "\n", "total_timer", ".", "tic", "(", ")", "\n", "predictions", "=", "compute_on_dataset", "(", "model_detect", ",", "model_retrieval", ",", "data_loader", ",", "device", ",", "inference_timer", ")", "\n", "# wait for all processes to complete before measuring the time", "\n", "synchronize", "(", ")", "\n", "total_time", "=", "total_timer", ".", "toc", "(", ")", "\n", "total_time_str", "=", "get_time_str", "(", "total_time", ")", "\n", "logger", ".", "info", "(", "\n", "\"Total run time: {} ({} s / img per device, on {} devices)\"", ".", "format", "(", "\n", "total_time_str", ",", "total_time", "*", "num_devices", "/", "len", "(", "dataset", ")", ",", "num_devices", "\n", ")", "\n", ")", "\n", "total_infer_time", "=", "get_time_str", "(", "inference_timer", ".", "total_time", ")", "\n", "logger", ".", "info", "(", "\n", "\"Model inference time: {} ({} s / img per device, on {} devices)\"", ".", "format", "(", "\n", "total_infer_time", ",", "\n", "inference_timer", ".", "total_time", "*", "num_devices", "/", "len", "(", "dataset", ")", ",", "\n", "num_devices", ",", "\n", ")", "\n", ")", "\n", "\n", "predictions", "=", "_accumulate_predictions_from_multiple_gpus", "(", "predictions", ")", "\n", "if", "not", "is_main_process", "(", ")", ":", "\n", "        ", "return", "\n", "\n", "", "if", "output_folder", ":", "\n", "        ", "torch", ".", "save", "(", "predictions", ",", "os", ".", "path", ".", "join", "(", "output_folder", ",", "\"predictions.pth\"", ")", ")", "\n", "\n", "", "return", "evaluate", "(", "dataset", "=", "dataset", ",", "\n", "predictions", "=", "predictions", ",", "\n", "output_folder", "=", "output_folder", ",", "\n", "**", "extra_args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.data.build.build_dataset": [[18, 65], ["isinstance", "RuntimeError", "dataset_catalog.get", "getattr", "print", "getattr.", "datasets.append", "len", "datasets.ConcatDataset"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["def", "build_dataset", "(", "dataset_list", ",", "transforms", ",", "dataset_catalog", ",", "\n", "is_train", "=", "True", ",", "cfg", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Arguments:\n        dataset_list (list[str]): Contains the names of the datasets, i.e.,\n            coco_2014_train, coco_2014_val, etc\n        transforms (callable): transforms to apply to each (image, target) sample\n        dataset_catalog (DatasetCatalog): contains the information on how to\n            construct a dataset.\n        is_train (bool): whether to setup the dataset for training or testing\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "dataset_list", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"dataset_list should be a list of strings, got {}\"", ".", "format", "(", "dataset_list", ")", "\n", ")", "\n", "", "datasets", "=", "[", "]", "\n", "for", "dataset_name", "in", "dataset_list", ":", "\n", "        ", "data", "=", "dataset_catalog", ".", "get", "(", "dataset_name", ")", "\n", "factory", "=", "getattr", "(", "D", ",", "data", "[", "\"factory\"", "]", ")", "\n", "args", "=", "data", "[", "\"args\"", "]", "\n", "# for COCODataset, we want to remove images without annotations", "\n", "# during training", "\n", "if", "data", "[", "\"factory\"", "]", "in", "[", "\"COCODataset\"", ",", "\n", "\"WordDataset\"", ",", "\n", "\"CharDataset\"", ",", "]", ":", "\n", "            ", "args", "[", "\"remove_images_without_annotations\"", "]", "=", "is_train", "\n", "", "if", "data", "[", "\"factory\"", "]", "==", "\"PascalVOCDataset\"", ":", "\n", "            ", "args", "[", "\"use_difficult\"", "]", "=", "not", "is_train", "\n", "", "if", "data", "[", "\"factory\"", "]", "==", "\"COCODataset\"", ":", "\n", "            ", "args", "[", "\"cfg\"", "]", "=", "cfg", "\n", "", "args", "[", "\"transforms\"", "]", "=", "transforms", "\n", "args", "[", "\"augment\"", "]", "=", "cfg", ".", "INPUT", ".", "AUGMENT", "\n", "# make dataset from factory", "\n", "print", "(", "factory", ")", "\n", "dataset", "=", "factory", "(", "**", "args", ")", "\n", "datasets", ".", "append", "(", "dataset", ")", "\n", "\n", "# for testing, return a list of datasets", "\n", "", "if", "not", "is_train", ":", "\n", "        ", "return", "datasets", "\n", "\n", "# for training, concatenate all datasets into a single one", "\n", "", "dataset", "=", "datasets", "[", "0", "]", "\n", "if", "len", "(", "datasets", ")", ">", "1", ":", "\n", "        ", "dataset", "=", "D", ".", "ConcatDataset", "(", "datasets", ")", "\n", "\n", "", "return", "[", "dataset", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.data.build.make_data_sampler": [[67, 75], ["samplers.DistributedSampler", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.SequentialSampler"], "function", ["None"], ["", "def", "make_data_sampler", "(", "dataset", ",", "shuffle", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "return", "samplers", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "shuffle", ")", "\n", "", "if", "shuffle", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "RandomSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SequentialSampler", "(", "dataset", ")", "\n", "", "return", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.data.build._quantize": [[77, 82], ["copy.copy", "sorted", "list", "map", "bisect.bisect_right"], "function", ["None"], ["", "def", "_quantize", "(", "x", ",", "bins", ")", ":", "\n", "    ", "bins", "=", "copy", ".", "copy", "(", "bins", ")", "\n", "bins", "=", "sorted", "(", "bins", ")", "\n", "quantized", "=", "list", "(", "map", "(", "lambda", "y", ":", "bisect", ".", "bisect_right", "(", "bins", ",", "y", ")", ",", "x", ")", ")", "\n", "return", "quantized", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.data.build._compute_aspect_ratios": [[84, 91], ["range", "len", "dataset.get_img_info", "aspect_ratios.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.concat_dataset.ConcatDataset.get_img_info"], ["", "def", "_compute_aspect_ratios", "(", "dataset", ")", ":", "\n", "    ", "aspect_ratios", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "img_info", "=", "dataset", ".", "get_img_info", "(", "i", ")", "\n", "aspect_ratio", "=", "float", "(", "img_info", "[", "\"height\"", "]", ")", "/", "float", "(", "img_info", "[", "\"width\"", "]", ")", "\n", "aspect_ratios", ".", "append", "(", "aspect_ratio", ")", "\n", "", "return", "aspect_ratios", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.data.build.make_batch_data_sampler": [[93, 113], ["build._compute_aspect_ratios", "build._quantize", "samplers.GroupedBatchSampler", "torch.utils.data.sampler.BatchSampler", "samplers.IterationBasedBatchSampler", "isinstance"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.data.build._compute_aspect_ratios", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.data.build._quantize"], ["", "def", "make_batch_data_sampler", "(", "\n", "dataset", ",", "sampler", ",", "aspect_grouping", ",", "images_per_batch", ",", "num_iters", "=", "None", ",", "start_iter", "=", "0", "\n", ")", ":", "\n", "    ", "if", "aspect_grouping", ":", "\n", "        ", "if", "not", "isinstance", "(", "aspect_grouping", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "aspect_grouping", "=", "[", "aspect_grouping", "]", "\n", "", "aspect_ratios", "=", "_compute_aspect_ratios", "(", "dataset", ")", "\n", "group_ids", "=", "_quantize", "(", "aspect_ratios", ",", "aspect_grouping", ")", "\n", "batch_sampler", "=", "samplers", ".", "GroupedBatchSampler", "(", "\n", "sampler", ",", "group_ids", ",", "images_per_batch", ",", "drop_uneven", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "        ", "batch_sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "BatchSampler", "(", "\n", "sampler", ",", "images_per_batch", ",", "drop_last", "=", "False", "\n", ")", "\n", "", "if", "num_iters", "is", "not", "None", ":", "\n", "        ", "batch_sampler", "=", "samplers", ".", "IterationBasedBatchSampler", "(", "\n", "batch_sampler", ",", "num_iters", ",", "start_iter", "\n", ")", "\n", "", "return", "batch_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.data.build.make_data_loader": [[115, 192], ["maskrcnn_benchmark.utils.comm.get_world_size", "maskrcnn_benchmark.utils.imports.import_file", "transforms.build_transforms", "build.build_dataset", "logging.getLogger", "logging.getLogger.warning", "maskrcnn_benchmark.utils.miscellaneous.save_labels", "build.make_data_sampler", "build.make_batch_data_sampler", "torch.utils.data.DataLoader", "data_loaders.append", "collate_batch.BBoxAugCollator", "collate_batch.BatchCollator", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_world_size", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.build.build_transforms", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.data.build.build_dataset", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.miscellaneous.save_labels", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.data.build.make_data_sampler", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.data.build.make_batch_data_sampler", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "make_data_loader", "(", "cfg", ",", "is_train", "=", "True", ",", "is_distributed", "=", "False", ",", "start_iter", "=", "0", ")", ":", "\n", "    ", "num_gpus", "=", "get_world_size", "(", ")", "\n", "if", "is_train", ":", "\n", "        ", "images_per_batch", "=", "cfg", ".", "SOLVER", ".", "IMS_PER_BATCH", "\n", "assert", "(", "\n", "images_per_batch", "%", "num_gpus", "==", "0", "\n", ")", ",", "\"SOLVER.IMS_PER_BATCH ({}) must be divisible by the number of GPUs ({}) used.\"", ".", "format", "(", "\n", "images_per_batch", ",", "num_gpus", ")", "\n", "images_per_gpu", "=", "images_per_batch", "//", "num_gpus", "\n", "shuffle", "=", "True", "\n", "num_iters", "=", "cfg", ".", "SOLVER", ".", "MAX_ITER", "\n", "", "else", ":", "\n", "        ", "images_per_batch", "=", "cfg", ".", "TEST", ".", "IMS_PER_BATCH", "\n", "assert", "(", "\n", "images_per_batch", "%", "num_gpus", "==", "0", "\n", ")", ",", "\"TEST.IMS_PER_BATCH ({}) must be divisible by the number of GPUs ({}) used.\"", ".", "format", "(", "\n", "images_per_batch", ",", "num_gpus", ")", "\n", "images_per_gpu", "=", "images_per_batch", "//", "num_gpus", "\n", "shuffle", "=", "False", "if", "not", "is_distributed", "else", "True", "\n", "num_iters", "=", "None", "\n", "start_iter", "=", "0", "\n", "\n", "", "if", "images_per_gpu", ">", "1", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "warning", "(", "\n", "\"When using more than one image per GPU you may encounter \"", "\n", "\"an out-of-memory (OOM) error if your GPU does not have \"", "\n", "\"sufficient memory. If this happens, you can reduce \"", "\n", "\"SOLVER.IMS_PER_BATCH (for training) or \"", "\n", "\"TEST.IMS_PER_BATCH (for inference). For training, you must \"", "\n", "\"also adjust the learning rate and schedule length according \"", "\n", "\"to the linear scaling rule. See for example: \"", "\n", "\"https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14\"", "\n", ")", "\n", "\n", "# group images which have similar aspect ratio. In this case, we only", "\n", "# group in two cases: those with width / height > 1, and the other way around,", "\n", "# but the code supports more general grouping strategy", "\n", "", "aspect_grouping", "=", "[", "1", "]", "if", "cfg", ".", "DATALOADER", ".", "ASPECT_RATIO_GROUPING", "else", "[", "]", "\n", "\n", "paths_catalog", "=", "import_file", "(", "\n", "\"maskrcnn_benchmark.config.paths_catalog\"", ",", "cfg", ".", "PATHS_CATALOG", ",", "True", "\n", ")", "\n", "DatasetCatalog", "=", "paths_catalog", ".", "DatasetCatalog", "\n", "dataset_list", "=", "cfg", ".", "DATASETS", ".", "TRAIN", "if", "is_train", "else", "cfg", ".", "DATASETS", ".", "TEST", "\n", "\n", "# If bbox aug is enabled in testing, simply set transforms to None and we will apply transforms later", "\n", "# transforms = None if not is_train and cfg.TEST.BBOX_AUG.ENABLED else build_transforms(cfg, is_train)", "\n", "transforms", "=", "build_transforms", "(", "cfg", ",", "is_train", ")", "\n", "datasets", "=", "build_dataset", "(", "dataset_list", ",", "transforms", ",", "DatasetCatalog", ",", "is_train", ",", "\n", "cfg", ")", "\n", "\n", "if", "is_train", ":", "\n", "# save category_id to label name mapping", "\n", "        ", "save_labels", "(", "datasets", ",", "cfg", ".", "OUTPUT_DIR", ")", "\n", "\n", "", "data_loaders", "=", "[", "]", "\n", "for", "dataset", "in", "datasets", ":", "\n", "        ", "sampler", "=", "make_data_sampler", "(", "dataset", ",", "shuffle", ",", "is_distributed", ")", "\n", "batch_sampler", "=", "make_batch_data_sampler", "(", "\n", "dataset", ",", "sampler", ",", "aspect_grouping", ",", "images_per_gpu", ",", "num_iters", ",", "start_iter", "\n", ")", "\n", "collator", "=", "BBoxAugCollator", "(", ")", "if", "not", "is_train", "and", "cfg", ".", "TEST", ".", "BBOX_AUG", ".", "ENABLED", "else", "BatchCollator", "(", "cfg", ".", "DATALOADER", ".", "SIZE_DIVISIBILITY", ")", "\n", "num_workers", "=", "cfg", ".", "DATALOADER", ".", "NUM_WORKERS", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_sampler", "=", "batch_sampler", ",", "\n", "collate_fn", "=", "collator", ",", "\n", ")", "\n", "data_loaders", ".", "append", "(", "data_loader", ")", "\n", "", "if", "is_train", ":", "\n", "# during training, a single (possibly concatenated) data_loader is returned", "\n", "        ", "assert", "len", "(", "data_loaders", ")", "==", "1", "\n", "return", "data_loaders", "[", "0", "]", "\n", "", "return", "data_loaders", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.data.collate_batch.BatchCollator.__init__": [[12, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size_divisible", "=", "0", ")", ":", "\n", "        ", "self", ".", "size_divisible", "=", "size_divisible", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.data.collate_batch.BatchCollator.__call__": [[15, 21], ["list", "maskrcnn_benchmark.structures.image_list.to_image_list", "zip"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.image_list.to_image_list"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "transposed_batch", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "images", "=", "to_image_list", "(", "transposed_batch", "[", "0", "]", ",", "self", ".", "size_divisible", ")", "\n", "targets", "=", "transposed_batch", "[", "1", "]", "\n", "img_ids", "=", "transposed_batch", "[", "2", "]", "\n", "return", "images", ",", "targets", ",", "img_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.data.collate_batch.BBoxAugCollator.__call__": [[30, 32], ["list", "zip"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext90k.Synthtext90k.__init__": [[43, 48], ["synthtext90k.Synthtext90k.generate_information"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.svt.SVT.generate_information"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "is_training", "=", "True", ")", ":", "\n", "        ", "assert", "is_training", "==", "True", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "difficult_label", "=", "'###'", "\n", "self", ".", "generate_information", "(", "path", ")", "\n", "", "def", "generate_information", "(", "self", ",", "path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext90k.Synthtext90k.generate_information": [[48, 54], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir"], "methods", ["None"], ["", "def", "generate_information", "(", "self", ",", "path", ")", ":", "\n", "        ", "if", "self", ".", "is_training", ":", "\n", "            ", "self", ".", "image_floder", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'images'", ")", "\n", "self", ".", "gt_floder", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'annotations'", ")", "\n", "# self.image_list = os.listdir(self.image_floder)", "\n", "self", ".", "gt_list", "=", "os", ".", "listdir", "(", "self", ".", "gt_floder", ")", "\n", "", "", "def", "parse_xml_file", "(", "self", ",", "gt_path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext90k.Synthtext90k.parse_xml_file": [[54, 69], ["xml.etree.ElementTree.ElementTree", "xml.etree.ElementTree.ElementTree.parse", "xml.etree.ElementTree.ElementTree.findall", "int", "int", "int", "int", "texts.append", "polys.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "object_.find", "object_.find", "object_.find", "object_.find", "object_.find"], "methods", ["None"], ["", "", "def", "parse_xml_file", "(", "self", ",", "gt_path", ")", ":", "\n", "        ", "texts", "=", "[", "]", "\n", "polys", "=", "[", "]", "\n", "tree", "=", "ElementTree", "(", ")", "\n", "tree", ".", "parse", "(", "gt_path", ")", "\n", "for", "object_", "in", "tree", ".", "findall", "(", "\"object\"", ")", ":", "\n", "# print(objects)", "\n", "            ", "text", "=", "object_", ".", "find", "(", "\"name\"", ")", ".", "text", "\n", "xmin", "=", "int", "(", "object_", ".", "find", "(", "\"bndbox/xmin\"", ")", ".", "text", ")", "\n", "ymin", "=", "int", "(", "object_", ".", "find", "(", "\"bndbox/ymin\"", ")", ".", "text", ")", "\n", "xmax", "=", "int", "(", "object_", ".", "find", "(", "\"bndbox/xmax\"", ")", ".", "text", ")", "\n", "ymax", "=", "int", "(", "object_", ".", "find", "(", "\"bndbox/ymax\"", ")", ".", "text", ")", "\n", "texts", ".", "append", "(", "text", ")", "\n", "polys", ".", "append", "(", "[", "[", "xmin", ",", "ymin", "]", ",", "[", "xmax", ",", "ymin", "]", ",", "[", "xmax", ",", "ymax", "]", ",", "[", "xmin", ",", "ymax", "]", "]", ")", "\n", "", "return", "np", ".", "array", "(", "polys", ",", "dtype", "=", "np", ".", "float32", ")", ",", "np", ".", "array", "(", "texts", ",", "dtype", "=", "np", ".", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext90k.Synthtext90k.len": [[71, 73], ["synthtext90k.Synthtext90k.len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "len", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "gt_list", ")", "\n", "", "def", "getitem", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext90k.Synthtext90k.getitem": [[73, 83], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "synthtext90k.Synthtext90k.parse_xml_file", "gt_name.replace"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.svt.SVT.parse_xml_file"], ["", "def", "getitem", "(", "self", ",", "index", ")", ":", "\n", "# print(self.len())", "\n", "        ", "gt_name", "=", "self", ".", "gt_list", "[", "index", "]", "\n", "gt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "gt_floder", ",", "gt_name", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_floder", ",", "gt_name", ".", "replace", "(", "'.xml'", ",", "'.jpg'", ")", ")", "\n", "polys", ",", "texts", "=", "self", ".", "parse_xml_file", "(", "gt_path", ")", "\n", "# print(texts)", "\n", "# img = cv2.imread(img_path)", "\n", "# print(self.image_path_list[index])", "\n", "return", "img_path", ",", "polys", ",", "texts", "\n", "", "", "NUM_POINT", "=", "7", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext90k.SynthText90kDateset.__init__": [[85, 94], ["super().__init__", "synthtext90k.Synthtext90k", "augs.TestAugmentation", "eval"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "use_difficult", "=", "False", ",", "transforms", "=", "None", ",", "is_train", "=", "True", ",", "augment", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "is_train", ":", "\n", "            ", "self", ".", "augment", "=", "eval", "(", "augment", ")", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "augment", "=", "TestAugmentation", "(", "longer_side", "=", "1280", ")", "\n", "", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "dataset", "=", "Synthtext90k", "(", "data_dir", ",", "is_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext90k.SynthText90kDateset.__getitem__": [[95, 137], ["synthtext90k.SynthText90kDateset.dataset.getitem", "scipy.misc.imread", "print", "synthtext90k.SynthText90kDateset.augment", "numpy.array().reshape", "numpy.array().reshape", "PIL.Image.fromarray().convert", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "synthtext90k.SynthText90kDateset.dataset.getitem", "scipy.misc.imread", "synthtext90k.SynthText90kDateset.augment", "PIL.Image.fromarray().convert", "len", "len", "numpy.array().reshape.append", "torch.tensor", "synthtext90k.SynthText90kDateset.transforms", "synthtext90k.SynthText90kDateset.transforms", "numpy.array", "numpy.array", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.min", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.max", "aug_img.astype", "aug_img.astype"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "# print(\"get item\")", "\n", "            ", "path", ",", "polys", ",", "texts", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "img", "=", "imread", "(", "path", ")", "\n", "# print(polys.shape, polys)", "\n", "assert", "len", "(", "polys", ")", "==", "len", "(", "texts", ")", ",", "print", "(", "polys", ",", "texts", ")", "\n", "aug_img", ",", "polys", ",", "tags", "=", "self", ".", "augment", "(", "img", ",", "polys", ",", "texts", ")", "\n", "boxes", "=", "[", "]", "#[[np.min(poly[:,0]), np.min(poly[:,1]), np.max(poly[:,0]), np.max(poly[:,1])] for poly in polys]", "\n", "# # boxes = np.array(boxes).reshape([-1,4])", "\n", "# order_polys = []", "\n", "# boundarys = []", "\n", "for", "poly", "in", "polys", ":", "\n", "                ", "boxes", ".", "append", "(", "[", "np", ".", "min", "(", "poly", "[", ":", ",", "0", "]", ")", ",", "np", ".", "min", "(", "poly", "[", ":", ",", "1", "]", ")", ",", "np", ".", "max", "(", "poly", "[", ":", ",", "0", "]", ")", ",", "np", ".", "max", "(", "poly", "[", ":", ",", "1", "]", ")", "]", ")", "\n", "# boundarys.append(pts_expand)", "\n", "# order_polys.append(get_ordered_polys(poly))", "\n", "# cv2.drawContours(aug_img, pts_expand.reshape([1,-1,2]).astype(np.int32),-1,color=(255,0,0),thickness=1)", "\n", "# cv2.imwrite(os.path.join('vis',os.path.basename(path)), aug_img[:,:,(2,1,0)])", "\n", "", "boxes", "=", "np", ".", "array", "(", "boxes", ")", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "# order_polys = np.array(order_polys).reshape([-1,8])", "\n", "# boundarys = np.array(boundarys).reshape([-1,NUM_POINT*4])", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "boxlist", "=", "BoxList", "(", "boxes", ",", "image", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "# boxlist.add_field('polys',torch.tensor(order_polys))", "\n", "# boxlist.add_field('boundarys',torch.tensor(boundarys))", "\n", "boxlist", ".", "add_field", "(", "'labels'", ",", "torch", ".", "tensor", "(", "[", "-", "1", "if", "text", "==", "self", ".", "dataset", ".", "difficult_label", "else", "1", "for", "text", "in", "tags", "]", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'texts'", ",", "tags", ")", "\n", "if", "self", ".", "transforms", ":", "\n", "                ", "image", ",", "boxlist", "=", "self", ".", "transforms", "(", "image", ",", "boxlist", ")", "\n", "# return the image, the boxlist and the idx in your dataset", "\n", "", "return", "image", ",", "boxlist", ",", "idx", "\n", "", "else", ":", "\n", "            ", "path", ",", "_", ",", "_", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "img", "=", "imread", "(", "path", ")", "\n", "aug_img", ",", "_", ",", "_", "=", "self", ".", "augment", "(", "img", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "boxlist", "=", "None", "\n", "if", "self", ".", "transforms", ":", "\n", "                ", "image", ",", "_", "=", "self", ".", "transforms", "(", "image", ",", "boxlist", ")", "\n", "# return the image, the boxlist and the idx in your dataset", "\n", "", "return", "image", ",", "None", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext90k.SynthText90kDateset.__len__": [[138, 140], ["synthtext90k.SynthText90kDateset.dataset.len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "len", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext90k.SynthText90kDateset.expand_point": [[141, 151], ["numpy.array().reshape", "numpy.array().reshape", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.stack", "numpy.stack", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.stack", "numpy.stack", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.reshape().tolist", "numpy.array", "numpy.array", "numpy.concatenate.reshape"], "methods", ["None"], ["", "def", "expand_point", "(", "self", ",", "poly", ")", ":", "\n", "        ", "poly", "=", "np", ".", "array", "(", "poly", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "up_x", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "0", "]", ",", "poly", "[", "1", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "up_y", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "1", "]", ",", "poly", "[", "1", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "up", "=", "np", ".", "stack", "(", "(", "up_x", ",", "up_y", ")", ",", "axis", "=", "1", ")", "\n", "do_x", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "0", "]", ",", "poly", "[", "3", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "do_y", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "1", "]", ",", "poly", "[", "3", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "do", "=", "np", ".", "stack", "(", "(", "do_x", ",", "do_y", ")", ",", "axis", "=", "1", ")", "\n", "poly_expand", "=", "np", ".", "concatenate", "(", "(", "up", ",", "do", ")", ",", "axis", "=", "0", ")", "\n", "return", "poly_expand", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext90k.SynthText90kDateset.get_img_info": [[152, 160], ["synthtext90k.SynthText90kDateset.dataset.getitem", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem"], ["", "def", "get_img_info", "(", "self", ",", "idx", ")", ":", "\n", "# print(\"get info\")", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "            ", "return", "{", "\"path\"", ":", "\"none\"", ",", "\"height\"", ":", "768", ",", "\"width\"", ":", "1280", "}", "\n", "", "path", ",", "_", ",", "_", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "size", "=", "Image", ".", "open", "(", "path", ")", ".", "size", "\n", "# size = [1280,768]", "\n", "return", "{", "\"path\"", ":", "path", ",", "\"height\"", ":", "size", "[", "1", "]", ",", "\"width\"", ":", "size", "[", "0", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext90k.load_ann": [[15, 42], ["open().readlines", "numpy.array", "numpy.array", "numpy.array", "res.append", "line.strip().split", "list", "item[].append", "item[].append", "open", "i.strip().strip", "map", "item[].append", "item[].append", "line.strip", "i.strip"], "function", ["None"], ["def", "load_ann", "(", "gt_paths", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "gt", "in", "gt_paths", ":", "\n", "        ", "item", "=", "{", "}", "\n", "item", "[", "'polys'", "]", "=", "[", "]", "\n", "item", "[", "'tags'", "]", "=", "[", "]", "\n", "item", "[", "'texts'", "]", "=", "[", "]", "\n", "item", "[", "'paths'", "]", "=", "gt", "\n", "reader", "=", "open", "(", "gt", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "reader", ":", "\n", "            ", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "label", "=", "parts", "[", "-", "1", "]", "\n", "line", "=", "[", "i", ".", "strip", "(", "'\\ufeff'", ")", ".", "strip", "(", "'\\xef\\xbb\\xbf'", ")", "for", "i", "in", "parts", "]", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "x3", ",", "y3", ",", "x4", ",", "y4", "=", "list", "(", "map", "(", "float", ",", "line", "[", ":", "8", "]", ")", ")", "\n", "item", "[", "'polys'", "]", ".", "append", "(", "[", "[", "x1", ",", "y1", "]", ",", "[", "x2", ",", "y2", "]", ",", "[", "x3", ",", "y3", "]", ",", "[", "x4", ",", "y4", "]", "]", ")", "\n", "item", "[", "'texts'", "]", ".", "append", "(", "label", ")", "\n", "if", "label", "==", "'###'", ":", "\n", "                ", "item", "[", "'tags'", "]", ".", "append", "(", "True", ")", "\n", "", "else", ":", "\n", "                ", "item", "[", "'tags'", "]", ".", "append", "(", "False", ")", "\n", "", "", "item", "[", "'polys'", "]", "=", "np", ".", "array", "(", "item", "[", "'polys'", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "item", "[", "'tags'", "]", "=", "np", ".", "array", "(", "item", "[", "'tags'", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "item", "[", "'texts'", "]", "=", "np", ".", "array", "(", "item", "[", "'texts'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "res", ".", "append", "(", "item", ")", "\n", "#     print('read',item['polys'])", "\n", "# exit()", "\n", "", "return", "res", "\n", "", "class", "Synthtext90k", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext_chinese.SynthtextChinese.__init__": [[56, 63], ["numpy.load().tolist", "numpy.load().tolist", "synthtext_chinese.SynthtextChinese.generate_information", "numpy.load", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.svt.SVT.generate_information", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.checkpoint.Checkpointer.load"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "is_training", "=", "True", ")", ":", "\n", "        ", "assert", "is_training", "==", "True", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "difficult_label", "=", "'###'", "\n", "# self.chars = np.load(os.path.join(path, 'chars.npy')).tolist()", "\n", "self", ".", "chars", "=", "np", ".", "load", "(", "\"/workspace/wanghao/projects/Pytorch-yolo-phoc/selected_chars.npy\"", ")", ".", "tolist", "(", ")", "\n", "self", ".", "generate_information", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext_chinese.SynthtextChinese.generate_information": [[64, 73], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "synthtext_chinese.SynthtextChinese.gt_list.extend", "synthtext_chinese.load_ann", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "path.replace", "synthtext_chinese.SynthtextChinese.len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext800k.load_ann", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "generate_information", "(", "self", ",", "path", ")", ":", "\n", "        ", "if", "self", ".", "is_training", ":", "\n", "# self.image_floder = os.path.join(path, 'images')", "\n", "            ", "self", ".", "gt_floder", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'gts'", ")", "\n", "self", ".", "gt_list", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "gt_floder", ",", "name", ")", "for", "name", "in", "os", ".", "listdir", "(", "self", ".", "gt_floder", ")", "]", "\n", "self", ".", "gt_floder", "=", "os", ".", "path", ".", "join", "(", "path", ".", "replace", "(", "\"SynthText_Chinese\"", ",", "\"SynthText_Chinese_RCTW\"", ")", ",", "'gts'", ")", "\n", "self", ".", "gt_list", ".", "extend", "(", "[", "os", ".", "path", ".", "join", "(", "self", ".", "gt_floder", ",", "name", ")", "for", "name", "in", "os", ".", "listdir", "(", "self", ".", "gt_floder", ")", "]", ")", "\n", "self", ".", "samples", "=", "load_ann", "(", "self", ".", "gt_list", ",", "self", ".", "chars", ")", "\n", "print", "(", "len", "(", "self", ".", "samples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext_chinese.SynthtextChinese.len": [[75, 77], ["synthtext_chinese.SynthtextChinese.len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "def", "len", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "", "def", "getitem", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext_chinese.SynthtextChinese.getitem": [[77, 83], ["gt_path.replace().replace", "sample[].copy", "sample[].copy", "gt_path.replace"], "methods", ["None"], ["", "def", "getitem", "(", "self", ",", "index", ")", ":", "\n", "# print(self.len())", "\n", "        ", "sample", "=", "self", ".", "samples", "[", "index", "]", "\n", "gt_path", "=", "sample", "[", "\"gt_path\"", "]", "\n", "img_path", "=", "gt_path", ".", "replace", "(", "\"gts\"", ",", "\"images\"", ")", ".", "replace", "(", "\".txt\"", ",", "\".jpg\"", ")", "\n", "return", "img_path", ",", "sample", "[", "'polys'", "]", ".", "copy", "(", ")", ",", "sample", "[", "'texts'", "]", ".", "copy", "(", ")", "\n", "", "", "NUM_POINT", "=", "7", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext_chinese.SynthtextChineseDataset.__init__": [[85, 94], ["super().__init__", "synthtext_chinese.SynthtextChinese", "augs.TestAugmentation", "eval"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "use_difficult", "=", "False", ",", "transforms", "=", "None", ",", "is_train", "=", "True", ",", "augment", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "is_train", ":", "\n", "            ", "self", ".", "augment", "=", "eval", "(", "augment", ")", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "augment", "=", "TestAugmentation", "(", "longer_side", "=", "1280", ")", "\n", "", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "dataset", "=", "SynthtextChinese", "(", "data_dir", ",", "is_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext_chinese.SynthtextChineseDataset.__getitem__": [[95, 137], ["synthtext_chinese.SynthtextChineseDataset.dataset.getitem", "scipy.misc.imread", "print", "synthtext_chinese.SynthtextChineseDataset.augment", "numpy.array().reshape", "numpy.array().reshape", "PIL.Image.fromarray().convert", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "synthtext_chinese.SynthtextChineseDataset.dataset.getitem", "scipy.misc.imread", "synthtext_chinese.SynthtextChineseDataset.augment", "PIL.Image.fromarray().convert", "len", "len", "numpy.array().reshape.append", "torch.tensor", "synthtext_chinese.SynthtextChineseDataset.transforms", "synthtext_chinese.SynthtextChineseDataset.transforms", "numpy.array", "numpy.array", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.min", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.max", "aug_img.astype", "aug_img.astype"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "# print(\"get item\")", "\n", "            ", "path", ",", "polys", ",", "texts", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "img", "=", "imread", "(", "path", ")", "\n", "# print(polys.shape, polys)", "\n", "assert", "len", "(", "polys", ")", "==", "len", "(", "texts", ")", ",", "print", "(", "polys", ",", "texts", ")", "\n", "aug_img", ",", "polys", ",", "tags", "=", "self", ".", "augment", "(", "img", ",", "polys", ",", "texts", ")", "\n", "boxes", "=", "[", "]", "#[[np.min(poly[:,0]), np.min(poly[:,1]), np.max(poly[:,0]), np.max(poly[:,1])] for poly in polys]", "\n", "# # boxes = np.array(boxes).reshape([-1,4])", "\n", "# order_polys = []", "\n", "# boundarys = []", "\n", "for", "poly", "in", "polys", ":", "\n", "                ", "boxes", ".", "append", "(", "[", "np", ".", "min", "(", "poly", "[", ":", ",", "0", "]", ")", ",", "np", ".", "min", "(", "poly", "[", ":", ",", "1", "]", ")", ",", "np", ".", "max", "(", "poly", "[", ":", ",", "0", "]", ")", ",", "np", ".", "max", "(", "poly", "[", ":", ",", "1", "]", ")", "]", ")", "\n", "# boundarys.append(pts_expand)", "\n", "# order_polys.append(get_ordered_polys(poly))", "\n", "# cv2.drawContours(aug_img, pts_expand.reshape([1,-1,2]).astype(np.int32),-1,color=(255,0,0),thickness=1)", "\n", "# cv2.imwrite(os.path.join('vis',os.path.basename(path)), aug_img[:,:,(2,1,0)])", "\n", "", "boxes", "=", "np", ".", "array", "(", "boxes", ")", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "# order_polys = np.array(order_polys).reshape([-1,8])", "\n", "# boundarys = np.array(boundarys).reshape([-1,NUM_POINT*4])", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "boxlist", "=", "BoxList", "(", "boxes", ",", "image", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "# boxlist.add_field('polys',torch.tensor(order_polys))", "\n", "# boxlist.add_field('boundarys',torch.tensor(boundarys))", "\n", "boxlist", ".", "add_field", "(", "'labels'", ",", "torch", ".", "tensor", "(", "[", "-", "1", "if", "text", "==", "self", ".", "dataset", ".", "difficult_label", "else", "1", "for", "text", "in", "tags", "]", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'texts'", ",", "tags", ")", "\n", "if", "self", ".", "transforms", ":", "\n", "                ", "image", ",", "boxlist", "=", "self", ".", "transforms", "(", "image", ",", "boxlist", ")", "\n", "# return the image, the boxlist and the idx in your dataset", "\n", "", "return", "image", ",", "boxlist", ",", "idx", "\n", "", "else", ":", "\n", "            ", "path", ",", "_", ",", "_", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "img", "=", "imread", "(", "path", ")", "\n", "aug_img", ",", "_", ",", "_", "=", "self", ".", "augment", "(", "img", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "boxlist", "=", "None", "\n", "if", "self", ".", "transforms", ":", "\n", "                ", "image", ",", "_", "=", "self", ".", "transforms", "(", "image", ",", "boxlist", ")", "\n", "# return the image, the boxlist and the idx in your dataset", "\n", "", "return", "image", ",", "None", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext_chinese.SynthtextChineseDataset.__len__": [[138, 140], ["synthtext_chinese.SynthtextChineseDataset.dataset.len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "len", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext_chinese.SynthtextChineseDataset.expand_point": [[141, 151], ["numpy.array().reshape", "numpy.array().reshape", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.stack", "numpy.stack", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.stack", "numpy.stack", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.reshape().tolist", "numpy.array", "numpy.array", "numpy.concatenate.reshape"], "methods", ["None"], ["", "def", "expand_point", "(", "self", ",", "poly", ")", ":", "\n", "        ", "poly", "=", "np", ".", "array", "(", "poly", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "up_x", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "0", "]", ",", "poly", "[", "1", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "up_y", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "1", "]", ",", "poly", "[", "1", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "up", "=", "np", ".", "stack", "(", "(", "up_x", ",", "up_y", ")", ",", "axis", "=", "1", ")", "\n", "do_x", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "0", "]", ",", "poly", "[", "3", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "do_y", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "1", "]", ",", "poly", "[", "3", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "do", "=", "np", ".", "stack", "(", "(", "do_x", ",", "do_y", ")", ",", "axis", "=", "1", ")", "\n", "poly_expand", "=", "np", ".", "concatenate", "(", "(", "up", ",", "do", ")", ",", "axis", "=", "0", ")", "\n", "return", "poly_expand", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext_chinese.SynthtextChineseDataset.get_img_info": [[152, 160], ["synthtext_chinese.SynthtextChineseDataset.dataset.getitem", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem"], ["", "def", "get_img_info", "(", "self", ",", "idx", ")", ":", "\n", "# print(\"get info\")", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "            ", "return", "{", "\"path\"", ":", "\"none\"", ",", "\"height\"", ":", "768", ",", "\"width\"", ":", "1280", "}", "\n", "", "path", ",", "_", ",", "_", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "size", "=", "Image", ".", "open", "(", "path", ")", ".", "size", "\n", "# size = [1280,768]", "\n", "return", "{", "\"path\"", ":", "path", ",", "\"height\"", ":", "size", "[", "1", "]", ",", "\"width\"", ":", "size", "[", "0", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext_chinese.filter_word": [[14, 19], ["None"], "function", ["None"], ["def", "filter_word", "(", "text", ",", "chars", "=", "'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'", ")", ":", "\n", "# print(chars)", "\n", "# exit()", "\n", "    ", "char_list", "=", "[", "c", "for", "c", "in", "text", "if", "c", "in", "chars", "]", "\n", "return", "\"\"", ".", "join", "(", "char_list", ")", "\n", "", "def", "load_ann", "(", "gt_paths", ",", "chars", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext_chinese.load_ann": [[19, 55], ["codecs.open().readlines", "numpy.array", "numpy.array", "res.append", "line.strip().split", "synthtext_chinese.filter_word", "list", "item[].append", "item[].append", "len", "codecs.open", "len", "i.strip().strip", "map", "line.strip", "i.strip"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.cocotext.filter_word", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "load_ann", "(", "gt_paths", ",", "chars", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "idxs", "=", "[", "]", "\n", "for", "gt", "in", "gt_paths", ":", "\n", "# gt = unicode(gt, 'utf-8')#gt.decode('utf-8')", "\n", "        ", "item", "=", "{", "}", "\n", "item", "[", "'polys'", "]", "=", "[", "]", "\n", "item", "[", "'tags'", "]", "=", "[", "]", "\n", "item", "[", "'texts'", "]", "=", "[", "]", "\n", "item", "[", "'gt_path'", "]", "=", "gt", "\n", "# print(gt)", "\n", "reader", "=", "codecs", ".", "open", "(", "gt", ",", "encoding", "=", "'utf-8'", ")", ".", "readlines", "(", ")", "\n", "# reader = open(gt).readlines()", "\n", "for", "line", "in", "reader", ":", "\n", "            ", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "label", "=", "parts", "[", "-", "1", "]", "\n", "# print(label)", "\n", "# print(\"before:\",label)", "\n", "label", "=", "filter_word", "(", "label", ",", "chars", "=", "chars", ")", "\n", "# print(\"after:\",label)", "\n", "if", "len", "(", "label", ")", "<", "2", ":", "\n", "                ", "continue", "\n", "", "if", "label", "==", "'###'", ":", "\n", "                ", "continue", "\n", "", "line", "=", "[", "i", ".", "strip", "(", "'\\ufeff'", ")", ".", "strip", "(", "'\\xef\\xbb\\xbf'", ")", "for", "i", "in", "parts", "]", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "x3", ",", "y3", ",", "x4", ",", "y4", "=", "list", "(", "map", "(", "float", ",", "line", "[", ":", "8", "]", ")", ")", "\n", "item", "[", "'polys'", "]", ".", "append", "(", "[", "[", "x1", ",", "y1", "]", ",", "[", "x2", ",", "y2", "]", ",", "[", "x3", ",", "y3", "]", ",", "[", "x4", ",", "y4", "]", "]", ")", "\n", "item", "[", "'texts'", "]", ".", "append", "(", "label", ")", "\n", "", "if", "len", "(", "item", "[", "'polys'", "]", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "# print(len(res))", "\n", "", "item", "[", "'polys'", "]", "=", "np", ".", "array", "(", "item", "[", "'polys'", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "item", "[", "'texts'", "]", "=", "np", ".", "array", "(", "item", "[", "'texts'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "res", ".", "append", "(", "item", ")", "\n", "\n", "", "return", "res", "\n", "", "class", "SynthtextChinese", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.Compose.__init__": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.Compose.__call__": [[15, 22], ["print", "t", "len", "len", "type"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__call__", "(", "self", ",", "img", ",", "boxes", "=", "None", ",", "tags", "=", "None", ")", ":", "\n", "# print(type(boxes)=='list',type(boxes))", "\n", "        ", "poly_fixed_points", "=", "False", "if", "type", "(", "boxes", ")", ".", "__name__", "==", "'list'", "else", "True", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "assert", "len", "(", "boxes", ")", "==", "len", "(", "tags", ")", ",", "print", "(", "boxes", ",", "tags", ")", "\n", "img", ",", "boxes", ",", "tags", "=", "t", "(", "img", ",", "boxes", ",", "tags", ",", "poly_fixed_points", ")", "\n", "", "return", "img", ",", "boxes", ",", "tags", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.Resize.__init__": [[24, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", "=", "(", "640", ",", "640", ")", ")", ":", "\n", "        ", "self", ".", "width", "=", "size", "[", "1", "]", "\n", "self", ".", "heigth", "=", "size", "[", "0", "]", "\n", "", "def", "__call__", "(", "self", ",", "image", ",", "boxes", "=", "None", ",", "tags", "=", "None", ",", "poly_fixed_points", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.Resize.__call__": [[27, 37], ["scipy.misc.imresize", "image.copy", "numpy.clip", "numpy.clip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "boxes", "=", "None", ",", "tags", "=", "None", ",", "poly_fixed_points", "=", "True", ")", ":", "\n", "        ", "ori_h", ",", "ori_w", ",", "_", "=", "image", ".", "shape", "\n", "\n", "new_image", "=", "imresize", "(", "image", ".", "copy", "(", ")", ",", "(", "self", ".", "heigth", ",", "self", ".", "width", ")", ")", "\n", "if", "boxes", "is", "not", "None", ":", "\n", "            ", "boxes", "[", ":", ",", ":", ",", "0", "]", "*=", "self", ".", "width", "*", "1.0", "/", "ori_w", "\n", "boxes", "[", ":", ",", ":", ",", "1", "]", "*=", "self", ".", "heigth", "*", "1.0", "/", "ori_h", "\n", "boxes", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "clip", "(", "boxes", "[", ":", ",", ":", ",", "0", "]", ",", "0", ",", "self", ".", "width", ")", "\n", "boxes", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "clip", "(", "boxes", "[", ":", ",", ":", ",", "1", "]", ",", "0", ",", "self", ".", "heigth", ")", "\n", "", "return", "new_image", ",", "boxes", ",", "tags", "\n", "", "", "class", "RandomResize", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.RandomResize.__init__": [[38, 40], ["numpy.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "longer_sides", "=", "np", ".", "arange", "(", "640", ",", "2592", ",", "32", ")", ")", ":", "\n", "        ", "self", ".", "longer_sides", "=", "longer_sides", "\n", "", "def", "__call__", "(", "self", ",", "image", ",", "boxes", "=", "None", ",", "tags", "=", "None", ",", "poly_fixed_points", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.RandomResize.__call__": [[40, 42], ["image_process.random_resize"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.image_process.random_resize"], ["", "def", "__call__", "(", "self", ",", "image", ",", "boxes", "=", "None", ",", "tags", "=", "None", ",", "poly_fixed_points", "=", "True", ")", ":", "\n", "        ", "return", "random_resize", "(", "image", ",", "boxes", ",", "tags", ",", "poly_fixed_points", ",", "self", ".", "longer_sides", ")", "\n", "", "", "class", "RandomRotate", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.RandomRotate.__init__": [[43, 45], ["numpy.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rotate_angles", "=", "np", ".", "arange", "(", "-", "15", ",", "15", ",", "1", ")", ")", ":", "\n", "        ", "self", ".", "rotate_angles", "=", "rotate_angles", "\n", "", "def", "__call__", "(", "self", ",", "image", ",", "boxes", "=", "None", ",", "tags", "=", "None", ",", "poly_fixed_points", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.RandomRotate.__call__": [[45, 47], ["image_process.random_rotate"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.image_process.random_rotate"], ["", "def", "__call__", "(", "self", ",", "image", ",", "boxes", "=", "None", ",", "tags", "=", "None", ",", "poly_fixed_points", "=", "True", ")", ":", "\n", "        ", "return", "random_rotate", "(", "image", ",", "boxes", ",", "tags", ",", "poly_fixed_points", ",", "self", ".", "rotate_angles", ")", "\n", "", "", "class", "RandomRatioScale", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.RandomRatioScale.__init__": [[48, 50], ["numpy.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "random_ratios", "=", "np", ".", "arange", "(", "0.8", ",", "1.3", ",", "0.1", ")", ")", ":", "\n", "        ", "self", ".", "random_ratios", "=", "random_ratios", "\n", "", "def", "__call__", "(", "self", ",", "image", ",", "boxes", ",", "tags", ",", "poly_fixed_points", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.RandomRatioScale.__call__": [[50, 52], ["image_process.random_ratio_scale"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.image_process.random_ratio_scale"], ["", "def", "__call__", "(", "self", ",", "image", ",", "boxes", ",", "tags", ",", "poly_fixed_points", "=", "True", ")", ":", "\n", "        ", "return", "random_ratio_scale", "(", "image", ",", "boxes", ",", "tags", ",", "poly_fixed_points", ",", "self", ".", "random_ratios", ")", "\n", "", "", "class", "RandomCrop", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.RandomCrop.__init__": [[53, 56], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", "=", "(", "640", ",", "640", ")", ",", "max_tries", "=", "10", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "max_tries", "=", "max_tries", "\n", "", "def", "__call__", "(", "self", ",", "image", ",", "boxes", ",", "tags", ",", "poly_fixed_points", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.RandomCrop.__call__": [[56, 58], ["image_process.random_crop"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomCrop_resize.random_crop"], ["", "def", "__call__", "(", "self", ",", "image", ",", "boxes", ",", "tags", ",", "poly_fixed_points", "=", "True", ")", ":", "\n", "        ", "return", "random_crop", "(", "image", ",", "boxes", ",", "tags", ",", "poly_fixed_points", ",", "self", ".", "crop_size", ",", "self", ".", "max_tries", ")", "\n", "", "", "class", "RandomRotate90", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.RandomRotate90.__init__": [[59, 61], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ratio", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "ratio", "=", "ratio", "\n", "", "def", "__call__", "(", "self", ",", "image", ",", "boxes", ",", "tags", ",", "poly_fixed_points", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.RandomRotate90.__call__": [[61, 71], ["numpy.rot90", "numpy.zeros_like", "enumerate", "numpy.random.random", "abs"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "boxes", ",", "tags", ",", "poly_fixed_points", "=", "True", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "self", ".", "ratio", ":", "\n", "            ", "return", "image", ",", "boxes", ",", "tags", "\n", "", "h", ",", "w", ",", "_", "=", "image", ".", "shape", "\n", "image", "=", "np", ".", "rot90", "(", "image", ")", "\n", "new_boxes", "=", "np", ".", "zeros_like", "(", "boxes", ")", "\n", "for", "i", ",", "box", "in", "enumerate", "(", "boxes", ")", ":", "\n", "            ", "new_boxes", "[", "i", "]", "=", "abs", "(", "box", "-", "[", "w", ",", "0", "]", ")", "\n", "", "new_boxes", "=", "new_boxes", "[", ":", ",", "(", "1", ",", "2", ",", "3", ",", "0", ")", ",", ":", "]", "[", ":", ",", ":", ",", "(", "1", ",", "0", ")", "]", "\n", "return", "image", ",", "new_boxes", ",", "tags", "\n", "# longer_sides=np.arange(640,2592, 32)", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.PSSAugmentation.__init__": [[74, 84], ["numpy.arange", "augs.Compose", "augs.Compose", "augs.RandomResize", "augs.RandomRotate", "augs.RandomRatioScale", "augs.RandomCrop", "augs.RandomRotate", "augs.Resize", "numpy.arange", "numpy.arange", "numpy.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "longer_side_arange", "=", "np", ".", "arange", "(", "640", ",", "1920", ",", "32", ")", ")", ":", "\n", "        ", "self", ".", "augment", "=", "Compose", "(", "[", "\n", "RandomResize", "(", "longer_sides", "=", "np", ".", "arange", "(", "640", ",", "1920", ",", "32", ")", ")", ",", "\n", "RandomRotate", "(", "rotate_angles", "=", "np", ".", "arange", "(", "-", "15", ",", "15", ",", "1", ")", ")", ",", "\n", "RandomRatioScale", "(", ")", ",", "\n", "RandomCrop", "(", "crop_size", "=", "(", "640", ",", "640", ")", ",", "max_tries", "=", "10", ")", "\n", "]", ")", "\n", "self", ".", "no_crop", "=", "Compose", "(", "[", "\n", "RandomRotate", "(", "rotate_angles", "=", "np", ".", "arange", "(", "-", "15", ",", "15", ",", "1", ")", ")", ",", "\n", "Resize", "(", "(", "640", ",", "640", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.PSSAugmentation.__call__": [[86, 91], ["augs.PSSAugmentation.no_crop", "augs.PSSAugmentation.augment"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "boxes", ",", "tags", ",", "no_crop", "=", "False", ")", ":", "\n", "        ", "if", "no_crop", ":", "\n", "            ", "return", "self", ".", "no_crop", "(", "img", ",", "boxes", ",", "tags", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "augment", "(", "img", ",", "boxes", ",", "tags", ")", "\n", "", "", "", "class", "CTWAugmentation", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.CTWAugmentation.__init__": [[92, 102], ["numpy.arange", "augs.Compose", "augs.Compose", "augs.RandomRotate", "augs.RandomRatioScale", "augs.RandomCrop", "augs.RandomRotate", "augs.Resize", "numpy.arange", "numpy.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "longer_side_arange", "=", "np", ".", "arange", "(", "640", ",", "1920", ",", "32", ")", ")", ":", "\n", "        ", "self", ".", "augment", "=", "Compose", "(", "[", "\n", "# RandomResize(longer_sides=np.arange(640,1920, 32)),", "\n", "RandomRotate", "(", "rotate_angles", "=", "np", ".", "arange", "(", "-", "10", ",", "10", ",", "1", ")", ")", ",", "\n", "RandomRatioScale", "(", ")", ",", "\n", "RandomCrop", "(", "crop_size", "=", "(", "640", ",", "640", ")", ",", "max_tries", "=", "20", ")", "\n", "]", ")", "\n", "self", ".", "no_crop", "=", "Compose", "(", "[", "\n", "RandomRotate", "(", "rotate_angles", "=", "np", ".", "arange", "(", "-", "10", ",", "10", ",", "1", ")", ")", ",", "\n", "Resize", "(", "(", "640", ",", "640", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.CTWAugmentation.__call__": [[104, 109], ["augs.CTWAugmentation.no_crop", "augs.CTWAugmentation.augment"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "boxes", ",", "tags", ",", "no_crop", "=", "False", ")", ":", "\n", "        ", "if", "no_crop", ":", "\n", "            ", "return", "self", ".", "no_crop", "(", "img", ",", "boxes", ",", "tags", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "augment", "(", "img", ",", "boxes", ",", "tags", ")", "\n", "", "", "", "class", "SythAugmentation", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.SythAugmentation.__init__": [[110, 113], ["augs.Compose", "augs.Resize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "augment", "=", "Compose", "(", "[", "\n", "Resize", "(", "(", "640", ",", "640", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.SythAugmentation.__call__": [[115, 117], ["augs.SythAugmentation.augment"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "boxes", ",", "tags", ")", ":", "\n", "        ", "return", "self", ".", "augment", "(", "img", ",", "boxes", ",", "tags", ")", "\n", "", "", "class", "RetrievalAugmentation", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.RetrievalAugmentation.__init__": [[118, 122], ["augs.Compose", "augs.RandomRotate", "augs.Resize", "numpy.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "augment", "=", "Compose", "(", "[", "\n", "RandomRotate", "(", "rotate_angles", "=", "np", ".", "arange", "(", "-", "15", ",", "15", ",", "1", ")", ")", ",", "\n", "Resize", "(", "(", "512", ",", "512", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.RetrievalAugmentation.__call__": [[124, 126], ["augs.RetrievalAugmentation.augment"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "boxes", ",", "tags", ")", ":", "\n", "        ", "return", "self", ".", "augment", "(", "img", ",", "boxes", ",", "tags", ")", "\n", "", "", "class", "TestAugmentation", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.TestAugmentation.__init__": [[127, 129], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "longer_side", "=", "1280", ")", ":", "\n", "        ", "self", ".", "longer_side", "=", "longer_side", "\n", "", "def", "__call__", "(", "self", ",", "image", ",", "boxes", "=", "None", ",", "tags", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.augs.TestAugmentation.__call__": [[129, 147], ["scipy.misc.imresize", "int", "int", "image.copy", "numpy.clip", "numpy.clip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "boxes", "=", "None", ",", "tags", "=", "None", ")", ":", "\n", "        ", "ori_h", ",", "ori_w", ",", "_", "=", "image", ".", "shape", "\n", "if", "ori_h", ">", "ori_w", ":", "\n", "            ", "h", "=", "self", ".", "longer_side", "\n", "w", "=", "int", "(", "ori_w", "*", "1.0", "/", "ori_h", "*", "h", ")", "\n", "", "else", ":", "\n", "            ", "w", "=", "self", ".", "longer_side", "\n", "h", "=", "int", "(", "ori_h", "*", "1.0", "/", "ori_w", "*", "w", ")", "\n", "", "pad_h", "=", "h", "if", "h", "%", "32", "==", "0", "else", "(", "h", "//", "32", "+", "1", ")", "*", "32", "\n", "pad_w", "=", "w", "if", "w", "%", "32", "==", "0", "else", "(", "w", "//", "32", "+", "1", ")", "*", "32", "\n", "# new_image = np.zeros([pad_h, pad_w,3])", "\n", "new_image", "=", "imresize", "(", "image", ".", "copy", "(", ")", ",", "(", "pad_h", ",", "pad_w", ")", ")", "\n", "if", "boxes", "is", "not", "None", ":", "\n", "            ", "boxes", "[", ":", ",", ":", ",", "0", "]", "*=", "pad_w", "*", "1.0", "/", "ori_w", "\n", "boxes", "[", ":", ",", ":", ",", "1", "]", "*=", "pad_h", "*", "1.0", "/", "ori_h", "\n", "boxes", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "clip", "(", "boxes", "[", ":", ",", ":", ",", "0", "]", ",", "0", ",", "pad_w", ")", "\n", "boxes", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "clip", "(", "boxes", "[", ":", ",", ":", ",", "1", "]", ",", "0", ",", "pad_h", ")", "\n", "", "return", "new_image", ",", "boxes", ",", "tags", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext800k.SynthText.__init__": [[110, 113], ["synthtext800k.SynthText.generate_information"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.svt.SVT.generate_information"], ["    ", "def", "__init__", "(", "self", ",", "img_folder", ")", ":", "\n", "        ", "self", ".", "generate_information", "(", "img_folder", ")", "\n", "self", ".", "difficult_label", "=", "\"###\"", "\n", "", "def", "generate_information", "(", "self", ",", "img_folder", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext800k.SynthText.generate_information": [[113, 125], ["os.path.join", "scipy.loadmat", "sorted", "sorted", "synthtext800k.SynthText.len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "generate_information", "(", "self", ",", "img_folder", ")", ":", "\n", "        ", "gt_mat", "=", "os", ".", "path", ".", "join", "(", "img_folder", ",", "'gt.mat'", ")", "\n", "s_data", "=", "sio", ".", "loadmat", "(", "gt_mat", ")", "\n", "names", "=", "s_data", "[", "'imnames'", "]", "\n", "name", "=", "names", "[", "0", "]", "\n", "image_path_list", "=", "[", "os", ".", "path", ".", "join", "(", "img_folder", ",", "name_i", "[", "0", "]", ")", "for", "name_i", "in", "name", "]", "\n", "gt_folder", "=", "\"/home/wanghao/datasets/SynthText/Text_GT\"", "\n", "gt_path_list", "=", "[", "os", ".", "path", ".", "join", "(", "gt_folder", ",", "gt", ")", "for", "gt", "in", "os", ".", "listdir", "(", "gt_folder", ")", "]", "\n", "self", ".", "image_path_list", "=", "sorted", "(", "image_path_list", ")", "\n", "self", ".", "gt_path_list", "=", "sorted", "(", "gt_path_list", ")", "\n", "self", ".", "filter_tag", "=", "True", "\n", "self", ".", "sample_num", "=", "len", "(", "self", ".", "image_path_list", ")", "\n", "# import pdb", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext800k.SynthText.len": [[127, 129], ["None"], "methods", ["None"], ["", "def", "len", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sample_num", "\n", "", "def", "getitem", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext800k.SynthText.getitem": [[129, 135], ["synthtext800k.load_ann"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext800k.load_ann"], ["", "def", "getitem", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_path", ",", "polys", ",", "texts", "=", "load_ann", "(", "self", ".", "image_path_list", "[", "index", "]", ",", "self", ".", "filter_tag", ")", "\n", "# if img_path == None:", "\n", "#     index = 0", "\n", "# img_path, polys, texts = load_ann(self.image_path_list[index], self.filter_tag)", "\n", "return", "img_path", ",", "polys", ",", "texts", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext800k.SynthTextDataset.__init__": [[137, 145], ["super().__init__", "synthtext800k.SynthText", "eval"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "transforms", "=", "None", ",", "is_train", "=", "True", ",", "augment", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset", "=", "SynthText", "(", "data_dir", ")", "\n", "# print(self.dataset.len())", "\n", "# print(is_train)", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "augment", "=", "eval", "(", "augment", ")", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext800k.SynthTextDataset.__len__": [[146, 148], ["synthtext800k.SynthTextDataset.dataset.len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "len", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext800k.SynthTextDataset.__getitem__": [[149, 192], ["scipy.misc.imread", "print", "synthtext800k.SynthTextDataset.augment", "numpy.array().reshape", "PIL.Image.fromarray().convert", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "synthtext800k.SynthTextDataset.dataset.getitem", "scipy.misc.imread", "synthtext800k.SynthTextDataset.augment", "PIL.Image.fromarray().convert", "len", "synthtext800k.SynthTextDataset.dataset.getitem", "numpy.random.randint", "len", "len", "numpy.array().reshape.append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "synthtext800k.SynthTextDataset.transforms", "synthtext800k.SynthTextDataset.transforms", "len", "numpy.array", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "aug_img.astype", "aug_img.astype"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "            ", "polys", "=", "[", "]", "\n", "while", "len", "(", "polys", ")", "==", "0", ":", "\n", "                ", "img_path", ",", "polys", ",", "texts", "=", "self", ".", "dataset", ".", "getitem", "(", "index", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ")", ")", "\n", "", "img", "=", "imread", "(", "img_path", ",", "mode", "=", "\"RGB\"", ")", "\n", "assert", "len", "(", "polys", ")", "==", "len", "(", "texts", ")", ",", "print", "(", "polys", ",", "texts", ")", "\n", "aug_img", ",", "polys", ",", "tags", "=", "self", ".", "augment", "(", "img", ",", "polys", ",", "texts", ")", "\n", "boxes", "=", "[", "]", "#[[np.min(poly[:,0]), np.min(poly[:,1]), np.max(poly[:,0]), np.max(poly[:,1])] for poly in polys]", "\n", "# # boxes = np.array(boxes).reshape([-1,4])", "\n", "# order_polys = []", "\n", "# boundarys = []", "\n", "for", "poly", "in", "polys", ":", "\n", "                ", "boxes", ".", "append", "(", "[", "np", ".", "min", "(", "poly", "[", ":", ",", "0", "]", ")", ",", "np", ".", "min", "(", "poly", "[", ":", ",", "1", "]", ")", ",", "np", ".", "max", "(", "poly", "[", ":", ",", "0", "]", ")", ",", "np", ".", "max", "(", "poly", "[", ":", ",", "1", "]", ")", "]", ")", "\n", "# boundarys.append(pts_expand)", "\n", "# order_polys.append(get_ordered_polys(poly))", "\n", "# cv2.drawContours(aug_img, pts_expand.reshape([1,-1,2]).astype(np.int32),-1,color=(255,0,0),thickness=1)", "\n", "# cv2.imwrite(os.path.join('vis',os.path.basename(path)), aug_img[:,:,(2,1,0)])", "\n", "", "boxes", "=", "np", ".", "array", "(", "boxes", ")", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "# order_polys = np.array(order_polys).reshape([-1,8])", "\n", "# boundarys = np.array(boundarys).reshape([-1,NUM_POINT*4])", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "boxlist", "=", "BoxList", "(", "boxes", ",", "image", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "# boxlist.add_field('polys',torch.tensor(order_polys))", "\n", "# boxlist.add_field('boundarys',torch.tensor(boundarys))", "\n", "boxlist", ".", "add_field", "(", "'labels'", ",", "torch", ".", "tensor", "(", "[", "-", "1", "if", "text", "==", "self", ".", "dataset", ".", "difficult_label", "else", "1", "for", "text", "in", "tags", "]", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'texts'", ",", "tags", ")", "\n", "if", "self", ".", "transforms", ":", "\n", "                ", "image", ",", "boxlist", "=", "self", ".", "transforms", "(", "image", ",", "boxlist", ")", "\n", "# return the image, the boxlist and the idx in your dataset", "\n", "", "return", "image", ",", "boxlist", ",", "index", "\n", "", "else", ":", "\n", "            ", "img_path", ",", "polys", ",", "texts", "=", "self", ".", "dataset", ".", "getitem", "(", "index", ")", "\n", "img", "=", "imread", "(", "img_path", ",", "mode", "=", "\"RGB\"", ")", "\n", "aug_img", ",", "_", ",", "_", "=", "self", ".", "augment", "(", "img", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "boxlist", "=", "None", "\n", "if", "self", ".", "transforms", ":", "\n", "                ", "image", ",", "_", "=", "self", ".", "transforms", "(", "image", ",", "boxlist", ")", "\n", "# return the image, the boxlist and the idx in your dataset", "\n", "", "return", "image", ",", "None", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext800k.SynthTextDataset.get_img_info": [[193, 200], ["synthtext800k.SynthTextDataset.dataset.getitem", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem"], ["", "", "def", "get_img_info", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "            ", "return", "{", "\"path\"", ":", "\"none\"", ",", "\"height\"", ":", "768", ",", "\"width\"", ":", "1280", "}", "\n", "", "path", ",", "_", ",", "_", "=", "self", ".", "dataset", ".", "getitem", "(", "index", ")", "\n", "size", "=", "Image", ".", "open", "(", "path", ")", ".", "size", "\n", "# size = [1280,768]", "\n", "return", "{", "\"path\"", ":", "path", ",", "\"height\"", ":", "size", "[", "1", "]", ",", "\"width\"", ":", "size", "[", "0", "]", "}", "", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext800k.text_list_generate": [[21, 30], ["part.strip().replace().split", "range", "part.strip().replace", "len", "part.strip().replace().split.remove", "part.strip"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["def", "text_list_generate", "(", "text", ")", ":", "\n", "    ", "word_list", "=", "[", "]", "\n", "for", "part", "in", "text", ":", "\n", "        ", "part_word_list", "=", "part", ".", "strip", "(", ")", ".", "replace", "(", "' '", ",", "'\\n'", ")", ".", "split", "(", "'\\n'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "part_word_list", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "if", "part_word_list", "[", "i", "]", "==", "''", ":", "\n", "                ", "part_word_list", ".", "remove", "(", "''", ")", "\n", "", "", "word_list", "+=", "part_word_list", "\n", "", "return", "word_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext800k.filter_word": [[31, 34], ["None"], "function", ["None"], ["", "def", "filter_word", "(", "text", ",", "chars", "=", "'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'", ")", ":", "\n", "    ", "char_list", "=", "[", "c", "for", "c", "in", "text", "if", "c", "in", "chars", "]", "\n", "return", "\"\"", ".", "join", "(", "char_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext800k.load_ann": [[35, 81], ["os.path.join", "codecs.open().readlines", "numpy.array", "numpy.array", "numpy.array", "[].replace().replace().replace", "line.strip().split", "synthtext800k.filter_word", "list", "item[].append", "item[].append", "codecs.open", "len", "i.strip().strip", "map", "synthtext800k.get_ordered_polys", "filter_word.lower", "item[].append", "item[].append", "[].replace().replace", "line.strip", "numpy.array", "i.strip", "[].replace", "img_path.split"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.cocotext.filter_word", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext800k.get_ordered_polys"], ["", "def", "load_ann", "(", "img_path", ",", "filter_tag", "=", "False", ")", ":", "\n", "    ", "txt_folder", "=", "\"/home/wanghao/datasets/SynthText/Text_GT\"", "\n", "gt", "=", "os", ".", "path", ".", "join", "(", "txt_folder", ",", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "replace", "(", "'.jpg'", ",", "'.txt'", ")", ".", "replace", "(", "'.png'", ",", "'.txt'", ")", ".", "replace", "(", "'.gif'", ",", "'.txt'", ")", ")", "\n", "# print(gt,img_path)", "\n", "# gt = unicode(gt, 'utf-8')#gt.decode('utf-8')", "\n", "item", "=", "{", "}", "\n", "item", "[", "'polys'", "]", "=", "[", "]", "\n", "item", "[", "'tags'", "]", "=", "[", "]", "\n", "item", "[", "'texts'", "]", "=", "[", "]", "\n", "item", "[", "'gt_path'", "]", "=", "gt", "\n", "item", "[", "'img_path'", "]", "=", "img_path", "\n", "# print(gt)", "\n", "reader", "=", "codecs", ".", "open", "(", "gt", ",", "encoding", "=", "'utf-8'", ")", ".", "readlines", "(", ")", "\n", "# reader = open(gt).readlines()", "\n", "for", "line", "in", "reader", ":", "\n", "        ", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "if", "filter_tag", ":", "\n", "# label = 'fakelabel'", "\n", "            ", "label", "=", "parts", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "label", "=", "parts", "[", "-", "1", "]", "\n", "", "label", "=", "filter_word", "(", "label", ")", "\n", "if", "len", "(", "label", ")", "<", "3", ":", "\n", "            ", "continue", "\n", "", "if", "label", "==", "'###'", ":", "\n", "            ", "continue", "\n", "", "line", "=", "[", "i", ".", "strip", "(", "'\\ufeff'", ")", ".", "strip", "(", "'\\xef\\xbb\\xbf'", ")", "for", "i", "in", "parts", "]", "\n", "# if filter_tag:", "\n", "#     xmin, ymin, xmax, ymax = list(map(float, line[:4]))", "\n", "#     item['polys'].append([[xmin, ymin], [xmax, ymin], [xmax, ymax], [xmin, ymax]])", "\n", "# else:", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "x3", ",", "y3", ",", "x4", ",", "y4", "=", "list", "(", "map", "(", "float", ",", "line", "[", ":", "8", "]", ")", ")", "\n", "item", "[", "'polys'", "]", ".", "append", "(", "get_ordered_polys", "(", "np", ".", "array", "(", "[", "[", "x1", ",", "y1", "]", ",", "[", "x2", ",", "y2", "]", ",", "[", "x3", ",", "y3", "]", ",", "[", "x4", ",", "y4", "]", "]", ")", ")", ")", "\n", "item", "[", "'texts'", "]", ".", "append", "(", "label", ".", "lower", "(", ")", ")", "\n", "if", "label", "==", "'###'", ":", "\n", "            ", "item", "[", "'tags'", "]", ".", "append", "(", "True", ")", "\n", "", "else", ":", "\n", "            ", "item", "[", "'tags'", "]", ".", "append", "(", "False", ")", "\n", "# if filter_tag:", "\n", "#     if len(item['polys'])==0:", "\n", "#         return None, None, None", "\n", "", "", "item", "[", "'polys'", "]", "=", "np", ".", "array", "(", "item", "[", "'polys'", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "item", "[", "'tags'", "]", "=", "np", ".", "array", "(", "item", "[", "'tags'", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "item", "[", "'texts'", "]", "=", "np", ".", "array", "(", "item", "[", "'texts'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "\n", "return", "item", "[", "'img_path'", "]", ",", "item", "[", "'polys'", "]", ",", "item", "[", "'texts'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.synthtext800k.get_ordered_polys": [[82, 108], ["list", "sorted", "numpy.array"], "function", ["None"], ["", "def", "get_ordered_polys", "(", "cnt", ")", ":", "\n", "    ", "points", "=", "list", "(", "cnt", ")", "\n", "ps", "=", "sorted", "(", "points", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "\n", "if", "ps", "[", "1", "]", "[", "1", "]", ">", "ps", "[", "0", "]", "[", "1", "]", ":", "\n", "        ", "px1", "=", "ps", "[", "0", "]", "[", "0", "]", "\n", "py1", "=", "ps", "[", "0", "]", "[", "1", "]", "\n", "px4", "=", "ps", "[", "1", "]", "[", "0", "]", "\n", "py4", "=", "ps", "[", "1", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "px1", "=", "ps", "[", "1", "]", "[", "0", "]", "\n", "py1", "=", "ps", "[", "1", "]", "[", "1", "]", "\n", "px4", "=", "ps", "[", "0", "]", "[", "0", "]", "\n", "py4", "=", "ps", "[", "0", "]", "[", "1", "]", "\n", "", "if", "ps", "[", "3", "]", "[", "1", "]", ">", "ps", "[", "2", "]", "[", "1", "]", ":", "\n", "        ", "px2", "=", "ps", "[", "2", "]", "[", "0", "]", "\n", "py2", "=", "ps", "[", "2", "]", "[", "1", "]", "\n", "px3", "=", "ps", "[", "3", "]", "[", "0", "]", "\n", "py3", "=", "ps", "[", "3", "]", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "px2", "=", "ps", "[", "3", "]", "[", "0", "]", "\n", "py2", "=", "ps", "[", "3", "]", "[", "1", "]", "\n", "px3", "=", "ps", "[", "2", "]", "[", "0", "]", "\n", "py3", "=", "ps", "[", "2", "]", "[", "1", "]", "\n", "\n", "", "return", "np", ".", "array", "(", "[", "[", "px1", ",", "py1", "]", ",", "[", "px2", ",", "py2", "]", ",", "[", "px3", ",", "py3", "]", ",", "[", "px4", ",", "py4", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.cocotext.COCOText.__init__": [[18, 24], ["cocotext.COCOText.parse_data"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.parse_data"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "is_training", "=", "True", ")", ":", "\n", "# assert is_training==True", "\n", "        ", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "difficult_label", "=", "'###'", "\n", "self", ".", "all_texts", "=", "[", "]", "\n", "self", ".", "parse_data", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.cocotext.COCOText.parse_data": [[25, 44], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "numpy.zeros", "numpy.zeros", "enumerate", "word.strip", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "enumerate", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open().readlines", "cocotext.COCOText.len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "parse_data", "(", "self", ",", "path", ")", ":", "\n", "# dataFile = os.path.join(path,\"data.mat\")", "\n", "        ", "gtPath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "\"gts\"", ")", "\n", "gtFiles", "=", "os", ".", "listdir", "(", "gtPath", ")", "\n", "str_queries", "=", "[", "word", ".", "strip", "(", ")", "for", "word", "in", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'queries.txt'", ")", ",", "'r'", ")", ".", "readlines", "(", ")", "]", "\n", "y_trues", "=", "np", ".", "zeros", "(", "[", "len", "(", "str_queries", ")", ",", "len", "(", "gtFiles", ")", "]", ")", "\n", "for", "i", ",", "gtFile", "in", "enumerate", "(", "gtFiles", ")", ":", "\n", "            ", "gt", "=", "os", ".", "path", ".", "join", "(", "gtPath", ",", "gtFile", ")", "\n", "words", "=", "[", "filter_word", "(", "word", ".", "strip", "(", ")", ")", ".", "lower", "(", ")", "for", "word", "in", "open", "(", "gt", ",", "'r'", ")", ".", "readlines", "(", ")", "]", "\n", "for", "j", ",", "word", "in", "enumerate", "(", "words", ")", ":", "\n", "                ", "if", "word", "not", "in", "str_queries", ":", "\n", "                    ", "continue", "\n", "", "y_trues", "[", "str_queries", ".", "index", "(", "word", ")", ",", "i", "]", "=", "1", "\n", "\n", "\n", "", "", "self", ".", "img_lists", "=", "[", "os", ".", "path", ".", "join", "(", "path", ",", "\"images\"", ",", "imgName", ".", "replace", "(", "'.txt'", ",", "'.jpg'", ")", ")", "for", "imgName", "in", "gtFiles", "]", "\n", "# print(gtFiles[0],self.img_lists[0])", "\n", "self", ".", "str_queries", "=", "str_queries", "\n", "self", ".", "y_trues", "=", "y_trues", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.cocotext.COCOText.len": [[46, 48], ["cocotext.COCOText.len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "len", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_lists", ")", "\n", "", "def", "getitem", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.cocotext.COCOText.getitem": [[48, 50], ["None"], "methods", ["None"], ["", "def", "getitem", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "img_lists", "[", "index", "]", ",", "self", ".", "str_queries", ",", "self", ".", "y_trues", "\n", "", "", "NUM_POINT", "=", "7", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.cocotext.COCOTextDataset.__init__": [[52, 61], ["super().__init__", "cocotext.COCOText", "augs.TestAugmentation", "eval"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "use_difficult", "=", "False", ",", "transforms", "=", "None", ",", "is_train", "=", "True", ",", "augment", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "is_train", ":", "\n", "            ", "self", ".", "augment", "=", "eval", "(", "augment", ")", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "augment", "=", "TestAugmentation", "(", "longer_side", "=", "1280", ")", "\n", "", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "dataset", "=", "COCOText", "(", "data_dir", ",", "is_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.cocotext.COCOTextDataset.__getitem__": [[62, 100], ["cocotext.COCOTextDataset.dataset.getitem", "scipy.misc.imread", "print", "cocotext.COCOTextDataset.augment", "PIL.Image.fromarray().convert", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "cocotext.COCOTextDataset.dataset.getitem", "scipy.misc.imread", "cocotext.COCOTextDataset.augment", "PIL.Image.fromarray().convert", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "len", "len", "cocotext.COCOTextDataset.transforms", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "cocotext.COCOTextDataset.transforms", "PIL.Image.fromarray", "PIL.Image.fromarray", "aug_img.astype", "aug_img.astype"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "# print(\"get item\")", "\n", "            ", "path", ",", "queries", ",", "trues", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "img", "=", "imread", "(", "path", ")", "\n", "# print(polys.shape, polys)", "\n", "assert", "len", "(", "polys", ")", "==", "len", "(", "texts", ")", ",", "print", "(", "polys", ",", "texts", ")", "\n", "aug_img", ",", "polys", ",", "tags", "=", "self", ".", "augment", "(", "img", ",", "None", ",", "None", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "boxlist", "=", "BoxList", "(", "[", "]", ",", "image", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "'retrieval_trues'", ",", "trues", ")", "\n", "boxlist", ".", "add_field", "(", "'texts'", ",", "queries", ")", "\n", "# boxlist.add_field(\"y_trues\",trues)", "\n", "if", "self", ".", "transforms", ":", "\n", "                ", "image", ",", "boxlist", "=", "self", ".", "transforms", "(", "image", ",", "boxlist", ")", "\n", "# return the image, the boxlist and the idx in your dataset", "\n", "", "return", "image", ",", "boxlist", ",", "idx", "\n", "", "else", ":", "\n", "            ", "path", ",", "queries", ",", "trues", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "# print(polys)", "\n", "img", "=", "imread", "(", "path", ",", "mode", "=", "\"RGB\"", ")", "\n", "ori_h", ",", "ori_w", ",", "_", "=", "img", ".", "shape", "\n", "aug_img", ",", "polys", ",", "tags", "=", "self", ".", "augment", "(", "img", ",", "None", ",", "None", ")", "\n", "test_h", ",", "test_w", ",", "_", "=", "aug_img", ".", "shape", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "boxlist", "=", "BoxList", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "image", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "'retrieval_trues'", ",", "trues", ")", "\n", "boxlist", ".", "add_field", "(", "'texts'", ",", "np", ".", "array", "(", "queries", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'scale'", ",", "np", ".", "array", "(", "[", "ori_w", "/", "test_w", ",", "ori_h", "/", "test_h", "]", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'path'", ",", "np", ".", "array", "(", "path", ")", ")", "\n", "boxlist", ".", "add_field", "(", "\"y_trues\"", ",", "trues", ")", "\n", "boxlist", ".", "add_field", "(", "\"det_thred\"", ",", "0.2", ")", "\n", "# boxlist.add_field('test_texts',self.dataset.all_texts)", "\n", "if", "self", ".", "transforms", ":", "\n", "                ", "image", ",", "boxlist", "=", "self", ".", "transforms", "(", "image", ",", "boxlist", ")", "\n", "# return the image, the boxlist and the idx in your dataset", "\n", "", "return", "image", ",", "boxlist", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.cocotext.COCOTextDataset.__len__": [[101, 103], ["cocotext.COCOTextDataset.dataset.len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "len", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.cocotext.COCOTextDataset.expand_point": [[104, 114], ["numpy.array().reshape", "numpy.array().reshape", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.stack", "numpy.stack", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.stack", "numpy.stack", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.reshape().tolist", "numpy.array", "numpy.array", "numpy.concatenate.reshape"], "methods", ["None"], ["", "def", "expand_point", "(", "self", ",", "poly", ")", ":", "\n", "        ", "poly", "=", "np", ".", "array", "(", "poly", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "up_x", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "0", "]", ",", "poly", "[", "1", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "up_y", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "1", "]", ",", "poly", "[", "1", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "up", "=", "np", ".", "stack", "(", "(", "up_x", ",", "up_y", ")", ",", "axis", "=", "1", ")", "\n", "do_x", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "0", "]", ",", "poly", "[", "3", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "do_y", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "1", "]", ",", "poly", "[", "3", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "do", "=", "np", ".", "stack", "(", "(", "do_x", ",", "do_y", ")", ",", "axis", "=", "1", ")", "\n", "poly_expand", "=", "np", ".", "concatenate", "(", "(", "up", ",", "do", ")", ",", "axis", "=", "0", ")", "\n", "return", "poly_expand", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.cocotext.COCOTextDataset.get_img_info": [[115, 123], ["cocotext.COCOTextDataset.dataset.getitem", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem"], ["", "def", "get_img_info", "(", "self", ",", "idx", ")", ":", "\n", "# print(\"get info\")", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "            ", "return", "{", "\"path\"", ":", "\"none\"", ",", "\"height\"", ":", "768", ",", "\"width\"", ":", "1280", "}", "\n", "", "path", ",", "_", ",", "_", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "size", "=", "Image", ".", "open", "(", "path", ")", ".", "size", "\n", "# size = [1280,768]", "\n", "return", "{", "\"path\"", ":", "path", ",", "\"height\"", ":", "size", "[", "1", "]", ",", "\"width\"", ":", "size", "[", "0", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.cocotext.filter_word": [[14, 17], ["None"], "function", ["None"], ["def", "filter_word", "(", "text", ",", "chars", "=", "'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'", ")", ":", "\n", "    ", "char_list", "=", "[", "c", "for", "c", "in", "text", "if", "c", "in", "chars", "]", "\n", "return", "\"\"", ".", "join", "(", "char_list", ")", "\n", "", "class", "COCOText", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.svt.SVT.__init__": [[16, 22], ["svt.SVT.generate_information"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.svt.SVT.generate_information"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "is_training", "=", "True", ")", ":", "\n", "# assert is_training==True", "\n", "        ", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "difficult_label", "=", "'###'", "\n", "self", ".", "all_texts", "=", "[", "]", "\n", "self", ".", "generate_information", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.svt.SVT.generate_information": [[23, 29], ["svt.SVT.parse_xml_file", "svt.SVT.parse_xml_file", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.svt.SVT.parse_xml_file", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.svt.SVT.parse_xml_file"], ["", "def", "generate_information", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "if", "self", ".", "is_training", ":", "\n", "            ", "self", ".", "datas", "=", "self", ".", "parse_xml_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'train.xml'", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "datas", "=", "self", ".", "parse_xml_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'test.xml'", ")", ")", "\n", "# self.write_to_txts(self.datas, \"./svts\")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.svt.SVT.write_to_txts": [[31, 39], ["os.path.join().replace", "os.path.join().replace", "os.path.join().replace", "os.path.join().replace", "print", "open", "zip", "open.write", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename"], "methods", ["None"], ["", "", "def", "write_to_txts", "(", "self", ",", "datas", ",", "folder", ")", ":", "\n", "        ", "for", "data", "in", "datas", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "os", ".", "path", ".", "basename", "(", "data", "[", "'path'", "]", ")", ")", ".", "replace", "(", "\".jpg\"", ",", "'.txt'", ")", "\n", "print", "(", "filename", ")", "\n", "f", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "for", "box", ",", "text", "in", "zip", "(", "data", "[", "\"xyxys\"", "]", ",", "data", "[", "\"texts\"", "]", ")", ":", "\n", "                ", "line", "=", "\"{},{},{},{},{}\\r\\n\"", ".", "format", "(", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "2", "]", ",", "box", "[", "3", "]", ",", "text", ")", "\n", "f", ".", "write", "(", "line", ")", "\n", "", "", "", "def", "parse_xml_file", "(", "self", ",", "gt_path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.svt.SVT.parse_xml_file": [[39, 78], ["xml.etree.ElementTree.ElementTree", "xml.etree.ElementTree.ElementTree.parse", "xml.etree.ElementTree.ElementTree.findall", "numpy.zeros", "numpy.zeros", "enumerate", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "object_.findall", "numpy.array", "numpy.array", "[].reshape", "numpy.array", "numpy.array", "datas.append", "object_.find", "int", "int", "int", "int", "boxes.append", "texts.append", "svt.SVT.all_texts.append", "svt.SVT.str_queries.append", "svt.SVT.len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "", "def", "parse_xml_file", "(", "self", ",", "gt_path", ")", ":", "\n", "        ", "datas", "=", "[", "]", "\n", "tree", "=", "ElementTree", "(", ")", "\n", "tree", ".", "parse", "(", "gt_path", ")", "\n", "for", "object_", "in", "tree", ".", "findall", "(", "\"image\"", ")", ":", "\n", "            ", "image_name", "=", "object_", ".", "find", "(", "\"imageName\"", ")", ".", "text", "\n", "dict_", "=", "{", "}", "\n", "dict_", "[", "'path'", "]", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "image_name", ")", "\n", "boxes", "=", "[", "]", "\n", "texts", "=", "[", "]", "\n", "for", "text_object", "in", "object_", ".", "findall", "(", "\"taggedRectangles/taggedRectangle\"", ")", ":", "\n", "                ", "text", "=", "text_object", ".", "find", "(", "\"tag\"", ")", ".", "text", "\n", "# print(text)", "\n", "rec", "=", "text_object", ".", "attrib", "\n", "# {'height': '38', 'width': '55', 'x': '645', 'y': '294'}", "\n", "x", ",", "y", ",", "h", ",", "w", "=", "int", "(", "rec", "[", "'x'", "]", ")", ",", "int", "(", "rec", "[", "'y'", "]", ")", ",", "int", "(", "rec", "[", "'height'", "]", ")", ",", "int", "(", "rec", "[", "'width'", "]", ")", "\n", "xmin", "=", "int", "(", "x", ")", "\n", "ymin", "=", "int", "(", "y", ")", "\n", "xmax", "=", "int", "(", "x", "+", "w", ")", "\n", "ymax", "=", "int", "(", "y", "+", "h", ")", "\n", "boxes", ".", "append", "(", "[", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "]", ")", "\n", "texts", ".", "append", "(", "text", ".", "lower", "(", ")", ")", "\n", "self", ".", "all_texts", ".", "append", "(", "text", ".", "lower", "(", ")", ")", "\n", "", "dict_", "[", "'xyxys'", "]", "=", "np", ".", "array", "(", "boxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dict_", "[", "'boxes'", "]", "=", "np", ".", "array", "(", "boxes", ",", "dtype", "=", "np", ".", "float32", ")", "[", ":", ",", "(", "0", ",", "1", ",", "2", ",", "1", ",", "2", ",", "3", ",", "0", ",", "3", ")", "]", ".", "reshape", "(", "[", "-", "1", ",", "4", ",", "2", "]", ")", "\n", "dict_", "[", "'texts'", "]", "=", "np", ".", "array", "(", "texts", ",", "dtype", "=", "np", ".", "str", ")", "\n", "datas", ".", "append", "(", "dict_", ")", "\n", "", "self", ".", "str_queries", "=", "[", "]", "\n", "for", "text", "in", "self", ".", "all_texts", ":", "\n", "            ", "if", "text", "not", "in", "self", ".", "str_queries", ":", "\n", "                ", "self", ".", "str_queries", ".", "append", "(", "text", ")", "\n", "\n", "", "", "y_trues", "=", "np", ".", "zeros", "(", "[", "len", "(", "self", ".", "str_queries", ")", ",", "len", "(", "datas", ")", "]", ")", "\n", "# print(y_trues.shape)", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "datas", ")", ":", "\n", "            ", "for", "text", "in", "data", "[", "\"texts\"", "]", ":", "\n", "                ", "y_trues", "[", "self", ".", "str_queries", ".", "index", "(", "text", ")", ",", "idx", "]", "=", "1", "\n", "", "", "self", ".", "y_trues", "=", "y_trues", "\n", "return", "datas", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.svt.SVT.len": [[80, 82], ["svt.SVT.len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "len", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "datas", ")", "\n", "", "def", "getitem", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.svt.SVT.getitem": [[82, 87], ["data[].copy", "data[].copy"], "methods", ["None"], ["", "def", "getitem", "(", "self", ",", "index", ")", ":", "\n", "# print(self.len())", "\n", "        ", "data", "=", "self", ".", "datas", "[", "index", "]", "\n", "# print(data)", "\n", "return", "data", "[", "'path'", "]", ",", "data", "[", "'boxes'", "]", ".", "copy", "(", ")", ",", "data", "[", "'texts'", "]", ".", "copy", "(", ")", ",", "self", ".", "str_queries", "\n", "", "", "NUM_POINT", "=", "7", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.svt.SVTDataset.__init__": [[89, 99], ["super().__init__", "svt.SVT", "augs.TestAugmentation", "eval"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "use_difficult", "=", "False", ",", "transforms", "=", "None", ",", "is_train", "=", "True", ",", "augment", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "is_train", ":", "\n", "            ", "self", ".", "augment", "=", "eval", "(", "augment", ")", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "augment", "=", "TestAugmentation", "(", "longer_side", "=", "1280", ")", "\n", "# self.augment = TestAugmentation(longer_side=1024)", "\n", "", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "dataset", "=", "SVT", "(", "data_dir", ",", "is_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.svt.SVTDataset.__getitem__": [[100, 147], ["svt.SVTDataset.dataset.getitem", "scipy.misc.imread", "print", "svt.SVTDataset.augment", "numpy.array().reshape", "numpy.array().reshape", "PIL.Image.fromarray().convert", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "svt.SVTDataset.dataset.getitem", "scipy.misc.imread", "print", "svt.SVTDataset.augment", "numpy.array().reshape", "numpy.array().reshape", "PIL.Image.fromarray().convert", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "len", "len", "numpy.array().reshape.append", "torch.tensor", "svt.SVTDataset.transforms", "len", "len", "numpy.array().reshape.append", "torch.tensor", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "svt.SVTDataset.transforms", "numpy.array", "numpy.array", "PIL.Image.fromarray", "numpy.array", "numpy.array", "PIL.Image.fromarray", "numpy.min", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.max", "aug_img.astype", "numpy.min", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.max", "aug_img.astype"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "# print(\"get item\")", "\n", "            ", "path", ",", "polys", ",", "texts", ",", "queries", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "img", "=", "imread", "(", "path", ")", "\n", "# print(polys.shape, polys)", "\n", "assert", "len", "(", "polys", ")", "==", "len", "(", "texts", ")", ",", "print", "(", "polys", ",", "texts", ")", "\n", "aug_img", ",", "polys", ",", "tags", "=", "self", ".", "augment", "(", "img", ",", "polys", ",", "texts", ")", "\n", "boxes", "=", "[", "]", "\n", "for", "poly", "in", "polys", ":", "\n", "                ", "boxes", ".", "append", "(", "[", "np", ".", "min", "(", "poly", "[", ":", ",", "0", "]", ")", ",", "np", ".", "min", "(", "poly", "[", ":", ",", "1", "]", ")", ",", "np", ".", "max", "(", "poly", "[", ":", ",", "0", "]", ")", ",", "np", ".", "max", "(", "poly", "[", ":", ",", "1", "]", ")", "]", ")", "\n", "", "boxes", "=", "np", ".", "array", "(", "boxes", ")", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "boxlist", "=", "BoxList", "(", "boxes", ",", "image", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "'labels'", ",", "torch", ".", "tensor", "(", "[", "-", "1", "if", "text", "==", "self", ".", "dataset", ".", "difficult_label", "else", "1", "for", "text", "in", "tags", "]", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'texts'", ",", "tags", ")", "\n", "if", "self", ".", "transforms", ":", "\n", "                ", "image", ",", "boxlist", "=", "self", ".", "transforms", "(", "image", ",", "boxlist", ")", "\n", "# return the image, the boxlist and the idx in your dataset", "\n", "", "return", "image", ",", "boxlist", ",", "idx", "\n", "", "else", ":", "\n", "            ", "path", ",", "polys", ",", "texts", ",", "queries", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "# print(polys)", "\n", "img", "=", "imread", "(", "path", ")", "\n", "ori_h", ",", "ori_w", ",", "_", "=", "img", ".", "shape", "\n", "# print(polys.shape, polys)", "\n", "assert", "len", "(", "polys", ")", "==", "len", "(", "texts", ")", ",", "print", "(", "polys", ",", "texts", ")", "\n", "aug_img", ",", "polys", ",", "tags", "=", "self", ".", "augment", "(", "img", ",", "polys", ",", "texts", ")", "\n", "test_h", ",", "test_w", ",", "_", "=", "aug_img", ".", "shape", "\n", "boxes", "=", "[", "]", "\n", "for", "poly", "in", "polys", ":", "\n", "                ", "boxes", ".", "append", "(", "[", "np", ".", "min", "(", "poly", "[", ":", ",", "0", "]", ")", ",", "np", ".", "min", "(", "poly", "[", ":", ",", "1", "]", ")", ",", "np", ".", "max", "(", "poly", "[", ":", ",", "0", "]", ")", ",", "np", ".", "max", "(", "poly", "[", ":", ",", "1", "]", ")", "]", ")", "\n", "", "boxes", "=", "np", ".", "array", "(", "boxes", ")", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "boxlist", "=", "BoxList", "(", "boxes", ",", "image", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "'labels'", ",", "torch", ".", "tensor", "(", "[", "-", "1", "if", "text", "==", "self", ".", "dataset", ".", "difficult_label", "else", "1", "for", "text", "in", "tags", "]", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'texts'", ",", "np", ".", "array", "(", "queries", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'scale'", ",", "np", ".", "array", "(", "[", "ori_w", "/", "test_w", ",", "ori_h", "/", "test_h", "]", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'path'", ",", "np", ".", "array", "(", "path", ")", ")", "\n", "boxlist", ".", "add_field", "(", "\"y_trues\"", ",", "self", ".", "dataset", ".", "y_trues", ")", "\n", "boxlist", ".", "add_field", "(", "\"det_thred\"", ",", "0.05", ")", "\n", "if", "self", ".", "transforms", ":", "\n", "                ", "image", ",", "boxlist", "=", "self", ".", "transforms", "(", "image", ",", "boxlist", ")", "\n", "# return the image, the boxlist and the idx in your dataset", "\n", "", "return", "image", ",", "boxlist", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.svt.SVTDataset.__len__": [[148, 150], ["svt.SVTDataset.dataset.len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "len", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.svt.SVTDataset.expand_point": [[151, 161], ["numpy.array().reshape", "numpy.array().reshape", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.stack", "numpy.stack", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.stack", "numpy.stack", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.reshape().tolist", "numpy.array", "numpy.array", "numpy.concatenate.reshape"], "methods", ["None"], ["", "def", "expand_point", "(", "self", ",", "poly", ")", ":", "\n", "        ", "poly", "=", "np", ".", "array", "(", "poly", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "up_x", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "0", "]", ",", "poly", "[", "1", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "up_y", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "1", "]", ",", "poly", "[", "1", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "up", "=", "np", ".", "stack", "(", "(", "up_x", ",", "up_y", ")", ",", "axis", "=", "1", ")", "\n", "do_x", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "0", "]", ",", "poly", "[", "3", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "do_y", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "1", "]", ",", "poly", "[", "3", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "do", "=", "np", ".", "stack", "(", "(", "do_x", ",", "do_y", ")", ",", "axis", "=", "1", ")", "\n", "poly_expand", "=", "np", ".", "concatenate", "(", "(", "up", ",", "do", ")", ",", "axis", "=", "0", ")", "\n", "return", "poly_expand", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.svt.SVTDataset.get_img_info": [[162, 170], ["svt.SVTDataset.dataset.getitem", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem"], ["", "def", "get_img_info", "(", "self", ",", "idx", ")", ":", "\n", "# print(\"get info\")", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "            ", "return", "{", "\"path\"", ":", "\"none\"", ",", "\"height\"", ":", "768", ",", "\"width\"", ":", "1280", "}", "\n", "", "path", ",", "_", ",", "_", ",", "_", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "size", "=", "Image", ".", "open", "(", "path", ")", ".", "size", "\n", "# size = [1280,768]", "\n", "return", "{", "\"path\"", ":", "path", ",", "\"height\"", ":", "size", "[", "1", "]", ",", "\"width\"", ":", "size", "[", "0", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.chinese_collect.ChineseCollect.__init__": [[15, 21], ["chinese_collect.ChineseCollect.parse_data"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.parse_data"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "is_training", "=", "True", ")", ":", "\n", "# assert is_training==True", "\n", "        ", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "difficult_label", "=", "'###'", "\n", "self", ".", "all_texts", "=", "[", "]", "\n", "self", ".", "parse_data", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.chinese_collect.ChineseCollect.parse_data": [[38, 51], ["chinese_collect.ChineseCollect.len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "parse_data", "(", "self", ",", "gt_path", ")", ":", "\n", "        ", "self", ".", "str_queries", "=", "[", "]", "\n", "self", ".", "img_lists", "=", "[", "]", "\n", "query_num", "=", "len", "(", "os", ".", "listdir", "(", "gt_path", ")", ")", "\n", "img_num", "=", "sum", "(", "[", "len", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "gt_path", ",", "query", ")", ")", ")", "for", "query", "in", "os", ".", "listdir", "(", "gt_path", ")", "]", ")", "\n", "self", ".", "y_trues", "=", "np", ".", "zeros", "(", "[", "query_num", ",", "img_num", "]", ")", "\n", "cur_idx", "=", "0", "\n", "for", "idx", ",", "query", "in", "enumerate", "(", "os", ".", "listdir", "(", "gt_path", ")", ")", ":", "\n", "            ", "self", ".", "str_queries", ".", "append", "(", "query", ")", "\n", "self", ".", "img_lists", ".", "extend", "(", "[", "os", ".", "path", ".", "join", "(", "gt_path", ",", "query", ",", "img", ")", "for", "img", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "gt_path", ",", "query", ")", ")", "]", ")", "\n", "query_img_num", "=", "len", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "gt_path", ",", "query", ")", ")", ")", "\n", "self", ".", "y_trues", "[", "idx", ",", "cur_idx", ":", "cur_idx", "+", "query_img_num", "]", "=", "1", "\n", "cur_idx", "+=", "query_img_num", "\n", "", "", "def", "len", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.chinese_collect.ChineseCollect.len": [[51, 53], ["chinese_collect.ChineseCollect.len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "def", "len", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_lists", ")", "\n", "", "def", "getitem", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.chinese_collect.ChineseCollect.getitem": [[53, 55], ["None"], "methods", ["None"], ["", "def", "getitem", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "img_lists", "[", "index", "]", ",", "self", ".", "str_queries", ",", "self", ".", "y_trues", "\n", "", "", "NUM_POINT", "=", "7", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.chinese_collect.ChineseCollectDataset.__init__": [[57, 64], ["super().__init__", "augs.TestAugmentation", "chinese_collect.ChineseCollect"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "use_difficult", "=", "False", ",", "transforms", "=", "None", ",", "is_train", "=", "True", ",", "augment", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "is_train", "==", "False", "\n", "self", ".", "augment", "=", "TestAugmentation", "(", "longer_side", "=", "1280", ")", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "dataset", "=", "ChineseCollect", "(", "data_dir", ",", "is_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.chinese_collect.ChineseCollectDataset.__getitem__": [[65, 86], ["chinese_collect.ChineseCollectDataset.dataset.getitem", "scipy.misc.imread", "chinese_collect.ChineseCollectDataset.augment", "PIL.Image.fromarray().convert", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "chinese_collect.ChineseCollectDataset.transforms", "PIL.Image.fromarray", "aug_img.astype"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "path", ",", "queries", ",", "trues", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "# print(path)", "\n", "img", "=", "imread", "(", "path", ",", "mode", "=", "\"RGB\"", ")", "\n", "ori_h", ",", "ori_w", ",", "_", "=", "img", ".", "shape", "\n", "aug_img", ",", "polys", ",", "tags", "=", "self", ".", "augment", "(", "img", ",", "None", ",", "None", ")", "\n", "test_h", ",", "test_w", ",", "_", "=", "aug_img", ".", "shape", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "boxlist", "=", "BoxList", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "image", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "'retrieval_trues'", ",", "trues", ")", "\n", "boxlist", ".", "add_field", "(", "'texts'", ",", "np", ".", "array", "(", "queries", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'scale'", ",", "np", ".", "array", "(", "[", "ori_w", "/", "test_w", ",", "ori_h", "/", "test_h", "]", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'path'", ",", "np", ".", "array", "(", "path", ")", ")", "\n", "boxlist", ".", "add_field", "(", "\"y_trues\"", ",", "trues", ")", "\n", "# boxlist.add_field('test_texts',self.dataset.all_texts)", "\n", "if", "self", ".", "transforms", ":", "\n", "            ", "image", ",", "boxlist", "=", "self", ".", "transforms", "(", "image", ",", "boxlist", ")", "\n", "# return the image, the boxlist and the idx in your dataset", "\n", "", "return", "image", ",", "boxlist", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.chinese_collect.ChineseCollectDataset.__len__": [[87, 89], ["chinese_collect.ChineseCollectDataset.dataset.len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "len", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.chinese_collect.ChineseCollectDataset.expand_point": [[90, 100], ["numpy.array().reshape", "numpy.array().reshape", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.stack", "numpy.stack", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.stack", "numpy.stack", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.reshape().tolist", "numpy.array", "numpy.array", "numpy.concatenate.reshape"], "methods", ["None"], ["", "def", "expand_point", "(", "self", ",", "poly", ")", ":", "\n", "        ", "poly", "=", "np", ".", "array", "(", "poly", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "up_x", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "0", "]", ",", "poly", "[", "1", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "up_y", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "1", "]", ",", "poly", "[", "1", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "up", "=", "np", ".", "stack", "(", "(", "up_x", ",", "up_y", ")", ",", "axis", "=", "1", ")", "\n", "do_x", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "0", "]", ",", "poly", "[", "3", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "do_y", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "1", "]", ",", "poly", "[", "3", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "do", "=", "np", ".", "stack", "(", "(", "do_x", ",", "do_y", ")", ",", "axis", "=", "1", ")", "\n", "poly_expand", "=", "np", ".", "concatenate", "(", "(", "up", ",", "do", ")", ",", "axis", "=", "0", ")", "\n", "return", "poly_expand", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.chinese_collect.ChineseCollectDataset.get_img_info": [[101, 109], ["chinese_collect.ChineseCollectDataset.dataset.getitem", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem"], ["", "def", "get_img_info", "(", "self", ",", "idx", ")", ":", "\n", "# print(\"get info\")", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "            ", "return", "{", "\"path\"", ":", "\"none\"", ",", "\"height\"", ":", "768", ",", "\"width\"", ":", "1280", "}", "\n", "", "path", ",", "_", ",", "_", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "size", "=", "Image", ".", "open", "(", "path", ")", ".", "size", "\n", "# size = [1280,768]", "\n", "return", "{", "\"path\"", ":", "path", ",", "\"height\"", ":", "size", "[", "1", "]", ",", "\"width\"", ":", "size", "[", "0", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.image_process.random_crop": [[4, 88], ["numpy.clip", "numpy.clip", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.round().astype", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.where", "numpy.where", "cv2.resize", "numpy.random.randint", "numpy.random.randint", "cv2.resize", "len", "len", "len", "numpy.round", "enumerate", "len", "numpy.where", "numpy.sum", "selected_boxes.append", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["def", "random_crop", "(", "image", ",", "boxes", "=", "None", ",", "tags", "=", "None", ",", "poly_fixed_points", "=", "True", ",", "crop_size", "=", "(", "640", ",", "640", ")", ",", "max_tries", "=", "50", ")", ":", "\n", "    ", "crop_h", ",", "crop_w", "=", "crop_size", "\n", "ori_h", ",", "ori_w", ",", "c", "=", "image", ".", "shape", "\n", "start_x_max", "=", "np", ".", "clip", "(", "ori_w", "-", "crop_w", ",", "0", ",", "ori_w", ")", "\n", "start_y_max", "=", "np", ".", "clip", "(", "ori_h", "-", "crop_h", ",", "0", ",", "ori_h", ")", "\n", "new_w", "=", "crop_w", "if", "start_x_max", "==", "0", "else", "ori_w", "\n", "new_h", "=", "crop_h", "if", "start_y_max", "==", "0", "else", "ori_h", "\n", "new_image", "=", "np", ".", "zeros", "(", "(", "new_h", ",", "new_w", ",", "c", ")", ")", "\n", "new_image", "[", "0", ":", "ori_h", ",", "0", ":", "ori_w", ",", ":", "]", "=", "image", "\n", "if", "start_x_max", "==", "0", "and", "start_y_max", "==", "0", ":", "\n", "        ", "return", "new_image", ",", "boxes", ",", "tags", "\n", "#ensure the croped area is not in box", "\n", "", "h_array", "=", "np", ".", "zeros", "(", "(", "new_h", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "w_array", "=", "np", ".", "zeros", "(", "(", "new_w", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "box", "in", "boxes", ":", "\n", "        ", "box", "=", "np", ".", "round", "(", "box", ",", "decimals", "=", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "minx", "=", "np", ".", "min", "(", "box", "[", ":", ",", "0", "]", ")", "\n", "maxx", "=", "np", ".", "max", "(", "box", "[", ":", ",", "0", "]", ")", "\n", "w_array", "[", "minx", ":", "maxx", "]", "=", "1", "\n", "miny", "=", "np", ".", "min", "(", "box", "[", ":", ",", "1", "]", ")", "\n", "maxy", "=", "np", ".", "max", "(", "box", "[", ":", ",", "1", "]", ")", "\n", "h_array", "[", "miny", ":", "maxy", "]", "=", "1", "\n", "\n", "# ensure the cropped area not across a text", "\n", "", "h_axis", "=", "np", ".", "where", "(", "h_array", "==", "0", ")", "[", "0", "]", "\n", "w_axis", "=", "np", ".", "where", "(", "w_array", "==", "0", ")", "[", "0", "]", "\n", "if", "len", "(", "h_axis", ")", "==", "0", "or", "len", "(", "w_axis", ")", "==", "0", ":", "\n", "        ", "h", ",", "w", ",", "c", "=", "new_image", ".", "shape", "\n", "new_image", "=", "cv2", ".", "resize", "(", "new_image", ",", "(", "crop_w", ",", "crop_h", ")", ")", "\n", "if", "poly_fixed_points", "==", "False", ":", "\n", "            ", "boxes", "=", "[", "box", "*", "[", "crop_w", "*", "1.0", "/", "w", ",", "crop_h", "*", "1.0", "/", "h", "]", "for", "box", "in", "boxes", "]", "\n", "", "else", ":", "\n", "            ", "boxes", "[", ":", ",", ":", ",", "0", "]", "*=", "crop_w", "*", "1.0", "/", "w", "\n", "boxes", "[", ":", ",", ":", ",", "1", "]", "*=", "crop_h", "*", "1.0", "/", "h", "\n", "", "return", "new_image", ",", "boxes", ",", "tags", "\n", "", "for", "i", "in", "range", "(", "max_tries", ")", ":", "\n", "        ", "rand_start_x", "=", "random", ".", "randint", "(", "0", ",", "start_x_max", "+", "1", ")", "\n", "rand_end_x", "=", "rand_start_x", "+", "crop_w", "\n", "rand_start_y", "=", "random", ".", "randint", "(", "0", ",", "start_y_max", "+", "1", ")", "\n", "rand_end_y", "=", "rand_start_y", "+", "crop_h", "\n", "x_valid", "=", "rand_start_x", "in", "w_axis", "and", "rand_end_x", "in", "w_axis", "\n", "y_valid", "=", "rand_start_y", "in", "h_axis", "and", "rand_end_y", "in", "h_axis", "\n", "if", "not", "(", "x_valid", "and", "y_valid", ")", ":", "\n", "            ", "continue", "\n", "", "if", "len", "(", "boxes", ")", "!=", "0", ":", "\n", "            ", "if", "poly_fixed_points", "==", "False", ":", "\n", "                ", "selected_boxes", "=", "[", "]", "\n", "for", "idx", ",", "box", "in", "enumerate", "(", "boxes", ")", ":", "\n", "                    ", "box_axis_in_area", "=", "(", "box", "[", ":", ",", "0", "]", ">=", "rand_start_x", ")", "&", "(", "box", "[", ":", ",", "0", "]", "<=", "rand_end_x", ")", "&", "(", "box", "[", ":", ",", "1", "]", ">=", "rand_start_y", ")", "&", "(", "box", "[", ":", ",", "1", "]", "<=", "rand_end_y", ")", "\n", "if", "np", ".", "sum", "(", "box_axis_in_area", ")", "==", "box", ".", "shape", "[", "0", "]", ":", "\n", "                        ", "selected_boxes", ".", "append", "(", "idx", ")", "\n", "", "", "", "else", ":", "\n", "                ", "box_axis_in_area", "=", "(", "boxes", "[", ":", ",", ":", ",", "0", "]", ">=", "rand_start_x", ")", "&", "(", "boxes", "[", ":", ",", ":", ",", "0", "]", "<=", "rand_end_x", ")", "&", "(", "boxes", "[", ":", ",", ":", ",", "1", "]", ">=", "rand_start_y", ")", "&", "(", "boxes", "[", ":", ",", ":", ",", "1", "]", "<=", "rand_end_y", ")", "\n", "selected_boxes", "=", "np", ".", "where", "(", "np", ".", "sum", "(", "box_axis_in_area", ",", "axis", "=", "1", ")", "==", "boxes", ".", "shape", "[", "1", "]", ")", "[", "0", "]", "\n", "", "if", "len", "(", "selected_boxes", ")", ">", "0", ":", "\n", "                ", "break", "\n", "", "", "else", ":", "\n", "            ", "selected_boxes", "=", "[", "]", "\n", "continue", "\n", "", "", "if", "i", "==", "max_tries", "-", "1", ":", "\n", "        ", "h", ",", "w", ",", "c", "=", "new_image", ".", "shape", "\n", "new_image", "=", "cv2", ".", "resize", "(", "new_image", ",", "(", "crop_w", ",", "crop_h", ")", ")", "\n", "if", "poly_fixed_points", "==", "False", ":", "\n", "            ", "boxes", "=", "[", "box", "*", "[", "crop_w", "*", "1.0", "/", "w", ",", "crop_h", "*", "1.0", "/", "h", "]", "for", "box", "in", "boxes", "]", "\n", "", "else", ":", "\n", "            ", "boxes", "[", ":", ",", ":", ",", "0", "]", "*=", "crop_w", "*", "1.0", "/", "w", "\n", "boxes", "[", ":", ",", ":", ",", "1", "]", "*=", "crop_h", "*", "1.0", "/", "h", "\n", "", "return", "new_image", ",", "boxes", ",", "tags", "\n", "", "cropped_image", "=", "new_image", "[", "rand_start_y", ":", "rand_end_y", ",", "rand_start_x", ":", "rand_end_x", ",", ":", "]", "\n", "# boxes = boxes[selected_boxes]", "\n", "# tags = tags[selected_boxes]", "\n", "\n", "if", "poly_fixed_points", "==", "False", ":", "\n", "        ", "boxes", "=", "[", "boxes", "[", "idx", "]", "for", "idx", "in", "selected_boxes", "]", "\n", "tags", "=", "[", "tags", "[", "idx", "]", "for", "idx", "in", "selected_boxes", "]", "\n", "boxes", "=", "[", "box", "-", "[", "rand_start_x", ",", "rand_start_y", "]", "for", "box", "in", "boxes", "]", "\n", "", "else", ":", "\n", "        ", "boxes", "=", "boxes", "[", "selected_boxes", "]", "\n", "tags", "=", "tags", "[", "selected_boxes", "]", "\n", "boxes", "[", ":", ",", ":", ",", "0", "]", "-=", "rand_start_x", "\n", "boxes", "[", ":", ",", ":", ",", "1", "]", "-=", "rand_start_y", "\n", "", "return", "cropped_image", ",", "boxes", ",", "tags", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.image_process.random_ratio_scale": [[89, 101], ["numpy.arange", "numpy.random.randint", "int", "cv2.resize", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "random_ratio_scale", "(", "image", ",", "boxes", "=", "None", ",", "tags", "=", "None", ",", "poly_fixed_points", "=", "True", ",", "ratios", "=", "np", ".", "arange", "(", "0.8", ",", "1.3", ",", "0.1", ")", ")", ":", "\n", "    ", "rand_index", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "ratios", ")", "-", "1", ")", "\n", "ratio", "=", "ratios", "[", "rand_index", "]", "\n", "ori_h", ",", "ori_w", ",", "c", "=", "image", ".", "shape", "\n", "new_h", "=", "int", "(", "ori_w", "*", "ratio", ")", "\n", "ratio_h", "=", "new_h", "*", "1.0", "/", "ori_h", "\n", "new_image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "ori_w", ",", "new_h", ")", ")", "\n", "if", "poly_fixed_points", "==", "False", ":", "\n", "        ", "boxes", "=", "[", "box", "*", "[", "1", ",", "ratio_h", "]", "for", "box", "in", "boxes", "]", "\n", "", "else", ":", "\n", "        ", "boxes", "[", ":", ",", ":", ",", "1", "]", "*=", "ratio_h", "\n", "", "return", "new_image", ",", "boxes", ",", "tags", "\n", "", "def", "random_resize", "(", "image", ",", "boxes", "=", "None", ",", "tags", "=", "None", ",", "poly_fixed_points", "=", "True", ",", "longer_sides", "=", "np", ".", "arange", "(", "640", ",", "2592", ",", "32", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.image_process.random_resize": [[101, 123], ["numpy.arange", "numpy.random.randint", "cv2.resize", "cv2.resize", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "random_resize", "(", "image", ",", "boxes", "=", "None", ",", "tags", "=", "None", ",", "poly_fixed_points", "=", "True", ",", "longer_sides", "=", "np", ".", "arange", "(", "640", ",", "2592", ",", "32", ")", ")", ":", "\n", "    ", "rand_index", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "longer_sides", ")", "-", "1", ")", "\n", "longer_side", "=", "longer_sides", "[", "rand_index", "]", "\n", "ori_h", ",", "ori_w", ",", "c", "=", "image", ".", "shape", "\n", "if", "ori_h", ">", "ori_w", ":", "\n", "        ", "ratio_h", "=", "longer_side", "*", "1.0", "/", "ori_h", "\n", "# boxes[:,:,1]*= ratio_h", "\n", "if", "poly_fixed_points", "==", "False", ":", "\n", "            ", "boxes", "=", "[", "box", "*", "[", "1", ",", "ratio_h", "]", "for", "box", "in", "boxes", "]", "\n", "", "else", ":", "\n", "            ", "boxes", "[", ":", ",", ":", ",", "1", "]", "*=", "ratio_h", "\n", "", "new_image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "ori_w", ",", "longer_side", ")", ")", "\n", "", "else", ":", "\n", "        ", "ratio_w", "=", "longer_side", "*", "1.0", "/", "ori_w", "\n", "if", "poly_fixed_points", "==", "False", ":", "\n", "            ", "boxes", "=", "[", "box", "*", "[", "ratio_w", ",", "1", "]", "for", "box", "in", "boxes", "]", "\n", "", "else", ":", "\n", "# print(boxes)", "\n", "            ", "boxes", "[", ":", ",", ":", ",", "0", "]", "*=", "ratio_w", "\n", "# boxes[:,:,0]*= ratio_w", "\n", "", "new_image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "longer_side", ",", "ori_h", ")", ")", "\n", "", "return", "new_image", ",", "boxes", ",", "tags", "\n", "", "def", "random_rotate", "(", "image", ",", "boxes", "=", "None", ",", "tags", "=", "None", ",", "poly_fixed_points", "=", "True", ",", "rotate_angles", "=", "np", ".", "arange", "(", "-", "10", ",", "10", ",", "1", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.image_process.random_rotate": [[123, 151], ["numpy.arange", "numpy.random.randint", "cv2.getRotationMatrix2D", "int", "int", "cv2.warpAffine", "numpy.abs", "numpy.abs", "numpy.array", "numpy.zeros_like", "len", "numpy.zeros_like", "np.zeros_like.append"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "random_rotate", "(", "image", ",", "boxes", "=", "None", ",", "tags", "=", "None", ",", "poly_fixed_points", "=", "True", ",", "rotate_angles", "=", "np", ".", "arange", "(", "-", "10", ",", "10", ",", "1", ")", ")", ":", "\n", "    ", "rand_index", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "rotate_angles", ")", "-", "1", ")", "\n", "angle", "=", "rotate_angles", "[", "rand_index", "]", "\n", "ori_h", ",", "ori_w", ",", "_", "=", "image", ".", "shape", "\n", "cX", ",", "cY", "=", "ori_w", "//", "2", ",", "ori_h", "//", "2", "\n", "matrix", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "cX", ",", "cY", ")", ",", "angle", ",", "1.0", ")", "\n", "cos", ",", "sin", "=", "matrix", "[", "0", ",", "0", "]", ",", "-", "matrix", "[", "0", ",", "1", "]", "\n", "abs_cos", ",", "abs_sin", "=", "np", ".", "abs", "(", "cos", ")", ",", "np", ".", "abs", "(", "sin", ")", "\n", "nW", "=", "int", "(", "(", "ori_h", "*", "abs_sin", ")", "+", "(", "ori_w", "*", "abs_cos", ")", ")", "\n", "nH", "=", "int", "(", "(", "ori_h", "*", "abs_cos", ")", "+", "(", "ori_w", "*", "abs_sin", ")", ")", "\n", "matrix", "[", "0", ",", "2", "]", "+=", "(", "nW", "/", "2", ")", "-", "cX", "\n", "matrix", "[", "1", ",", "2", "]", "+=", "(", "nH", "/", "2", ")", "-", "cY", "\n", "new_image", "=", "cv2", ".", "warpAffine", "(", "image", ",", "matrix", ",", "(", "nW", ",", "nH", ")", ")", "\n", "\n", "if", "poly_fixed_points", "==", "False", ":", "\n", "        ", "boxes", "=", "[", "box", "-", "[", "cX", ",", "cY", "]", "for", "box", "in", "boxes", "]", "\n", "new_boxes", "=", "[", "]", "\n", "for", "box", "in", "boxes", ":", "\n", "            ", "temp_box", "=", "np", ".", "zeros_like", "(", "box", ")", "\n", "temp_box", "[", ":", ",", "0", "]", "=", "(", "box", "[", ":", ",", "0", "]", "*", "cos", "-", "box", "[", ":", ",", "1", "]", "*", "sin", ")", "+", "nW", "/", "2", "\n", "temp_box", "[", ":", ",", "1", "]", "=", "(", "box", "[", ":", ",", "1", "]", "*", "cos", "+", "box", "[", ":", ",", "0", "]", "*", "sin", ")", "+", "nH", "/", "2", "\n", "new_boxes", ".", "append", "(", "temp_box", ")", "\n", "", "", "else", ":", "\n", "        ", "boxes", "-=", "np", ".", "array", "(", "[", "cX", ",", "cY", "]", ")", "\n", "new_boxes", "=", "np", ".", "zeros_like", "(", "boxes", ")", "\n", "new_boxes", "[", ":", ",", ":", ",", "0", "]", "=", "(", "boxes", "[", ":", ",", ":", ",", "0", "]", "*", "cos", "-", "boxes", "[", ":", ",", ":", ",", "1", "]", "*", "sin", ")", "+", "nW", "/", "2", "\n", "new_boxes", "[", ":", ",", ":", ",", "1", "]", "=", "(", "boxes", "[", ":", ",", ":", ",", "1", "]", "*", "cos", "+", "boxes", "[", ":", ",", ":", ",", "0", "]", "*", "sin", ")", "+", "nH", "/", "2", "\n", "", "return", "new_image", ",", "new_boxes", ",", "tags", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.__init__": [[15, 21], ["iiit.IIIT.parse_data"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.parse_data"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "is_training", "=", "True", ")", ":", "\n", "# assert is_training==True", "\n", "        ", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "difficult_label", "=", "'###'", "\n", "self", ".", "all_texts", "=", "[", "]", "\n", "self", ".", "parse_data", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.parse_data": [[22, 38], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "scipy.loadmat", "range", "numpy.zeros", "numpy.zeros", "range", "str_queries.append", "iiit.IIIT.len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "parse_data", "(", "self", ",", "gt_path", ")", ":", "\n", "        ", "dataFile", "=", "os", ".", "path", ".", "join", "(", "gt_path", ",", "\"data.mat\"", ")", "\n", "imgPath", "=", "os", ".", "path", ".", "join", "(", "gt_path", ",", "\"imgDatabase\"", ")", "\n", "data", "=", "scio", ".", "loadmat", "(", "dataFile", ")", "\n", "images", "=", "[", "img", "for", "img", "in", "os", ".", "listdir", "(", "imgPath", ")", "]", "\n", "str_queries", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", "[", "'data'", "]", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "str_queries", ".", "append", "(", "str", "(", "data", "[", "'data'", "]", "[", "0", ",", "i", "]", "[", "0", "]", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", ".", "lower", "(", ")", ")", "\n", "", "y_trues", "=", "np", ".", "zeros", "(", "[", "len", "(", "str_queries", ")", ",", "len", "(", "images", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "str_queries", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "data", "[", "'data'", "]", "[", "0", ",", "i", "]", "[", "1", "]", ")", ")", ":", "\n", "                ", "imgName", "=", "data", "[", "'data'", "]", "[", "0", ",", "i", "]", "[", "1", "]", "[", "j", "]", "[", "0", "]", "[", "0", "]", "\n", "y_trues", "[", "i", ",", "images", ".", "index", "(", "imgName", ")", "]", "=", "1", "\n", "", "", "self", ".", "img_lists", "=", "[", "os", ".", "path", ".", "join", "(", "gt_path", ",", "\"imgDatabase\"", ",", "imgName", ")", "for", "imgName", "in", "images", "]", "\n", "self", ".", "str_queries", "=", "str_queries", "\n", "self", ".", "y_trues", "=", "y_trues", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len": [[40, 42], ["iiit.IIIT.len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "len", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_lists", ")", "\n", "", "def", "getitem", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem": [[42, 44], ["None"], "methods", ["None"], ["", "def", "getitem", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "img_lists", "[", "index", "]", ",", "self", ".", "str_queries", ",", "self", ".", "y_trues", "\n", "", "", "NUM_POINT", "=", "7", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIITDataset.__init__": [[46, 55], ["super().__init__", "iiit.IIIT", "augs.TestAugmentation", "eval"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "use_difficult", "=", "False", ",", "transforms", "=", "None", ",", "is_train", "=", "True", ",", "augment", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "is_train", ":", "\n", "            ", "self", ".", "augment", "=", "eval", "(", "augment", ")", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "augment", "=", "TestAugmentation", "(", "longer_side", "=", "1280", ")", "\n", "", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "dataset", "=", "IIIT", "(", "data_dir", ",", "is_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIITDataset.__getitem__": [[56, 94], ["iiit.IIITDataset.dataset.getitem", "scipy.misc.imread", "print", "iiit.IIITDataset.augment", "PIL.Image.fromarray().convert", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "iiit.IIITDataset.dataset.getitem", "scipy.misc.imread", "iiit.IIITDataset.augment", "PIL.Image.fromarray().convert", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "len", "len", "iiit.IIITDataset.transforms", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "iiit.IIITDataset.transforms", "PIL.Image.fromarray", "PIL.Image.fromarray", "aug_img.astype", "aug_img.astype"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "# print(\"get item\")", "\n", "            ", "path", ",", "queries", ",", "trues", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "img", "=", "imread", "(", "path", ")", "\n", "# print(polys.shape, polys)", "\n", "assert", "len", "(", "polys", ")", "==", "len", "(", "texts", ")", ",", "print", "(", "polys", ",", "texts", ")", "\n", "aug_img", ",", "polys", ",", "tags", "=", "self", ".", "augment", "(", "img", ",", "None", ",", "None", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "boxlist", "=", "BoxList", "(", "[", "]", ",", "image", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "'retrieval_trues'", ",", "trues", ")", "\n", "boxlist", ".", "add_field", "(", "'texts'", ",", "queries", ")", "\n", "# boxlist.add_field(\"y_trues\",trues)", "\n", "if", "self", ".", "transforms", ":", "\n", "                ", "image", ",", "boxlist", "=", "self", ".", "transforms", "(", "image", ",", "boxlist", ")", "\n", "# return the image, the boxlist and the idx in your dataset", "\n", "", "return", "image", ",", "boxlist", ",", "idx", "\n", "", "else", ":", "\n", "            ", "path", ",", "queries", ",", "trues", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "# print(polys)", "\n", "img", "=", "imread", "(", "path", ",", "mode", "=", "\"RGB\"", ")", "\n", "ori_h", ",", "ori_w", ",", "_", "=", "img", ".", "shape", "\n", "aug_img", ",", "polys", ",", "tags", "=", "self", ".", "augment", "(", "img", ",", "None", ",", "None", ")", "\n", "test_h", ",", "test_w", ",", "_", "=", "aug_img", ".", "shape", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "boxlist", "=", "BoxList", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "image", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "'retrieval_trues'", ",", "trues", ")", "\n", "boxlist", ".", "add_field", "(", "'texts'", ",", "np", ".", "array", "(", "queries", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'scale'", ",", "np", ".", "array", "(", "[", "ori_w", "/", "test_w", ",", "ori_h", "/", "test_h", "]", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'path'", ",", "np", ".", "array", "(", "path", ")", ")", "\n", "boxlist", ".", "add_field", "(", "\"y_trues\"", ",", "trues", ")", "\n", "boxlist", ".", "add_field", "(", "\"det_thred\"", ",", "0.2", ")", "\n", "# boxlist.add_field('test_texts',self.dataset.all_texts)", "\n", "if", "self", ".", "transforms", ":", "\n", "                ", "image", ",", "boxlist", "=", "self", ".", "transforms", "(", "image", ",", "boxlist", ")", "\n", "# return the image, the boxlist and the idx in your dataset", "\n", "", "return", "image", ",", "boxlist", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIITDataset.__len__": [[95, 97], ["iiit.IIITDataset.dataset.len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "len", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIITDataset.expand_point": [[98, 108], ["numpy.array().reshape", "numpy.array().reshape", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.stack", "numpy.stack", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.stack", "numpy.stack", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.reshape().tolist", "numpy.array", "numpy.array", "numpy.concatenate.reshape"], "methods", ["None"], ["", "def", "expand_point", "(", "self", ",", "poly", ")", ":", "\n", "        ", "poly", "=", "np", ".", "array", "(", "poly", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "up_x", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "0", "]", ",", "poly", "[", "1", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "up_y", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "1", "]", ",", "poly", "[", "1", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "up", "=", "np", ".", "stack", "(", "(", "up_x", ",", "up_y", ")", ",", "axis", "=", "1", ")", "\n", "do_x", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "0", "]", ",", "poly", "[", "3", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "do_y", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "1", "]", ",", "poly", "[", "3", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "do", "=", "np", ".", "stack", "(", "(", "do_x", ",", "do_y", ")", ",", "axis", "=", "1", ")", "\n", "poly_expand", "=", "np", ".", "concatenate", "(", "(", "up", ",", "do", ")", ",", "axis", "=", "0", ")", "\n", "return", "poly_expand", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIITDataset.get_img_info": [[109, 117], ["iiit.IIITDataset.dataset.getitem", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.getitem"], ["", "def", "get_img_info", "(", "self", ",", "idx", ")", ":", "\n", "# print(\"get info\")", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "            ", "return", "{", "\"path\"", ":", "\"none\"", ",", "\"height\"", ":", "768", ",", "\"width\"", ":", "1280", "}", "\n", "", "path", ",", "_", ",", "_", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "size", "=", "Image", ".", "open", "(", "path", ")", ".", "size", "\n", "# size = [1280,768]", "\n", "return", "{", "\"path\"", ":", "path", ",", "\"height\"", ":", "size", "[", "1", "]", ",", "\"width\"", ":", "size", "[", "0", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.list_dataset.ListDataset.__init__": [[12, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_lists", ",", "transforms", "=", "None", ")", ":", "\n", "        ", "self", ".", "image_lists", "=", "image_lists", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.list_dataset.ListDataset.__getitem__": [[16, 27], ["PIL.Image.open().convert", "maskrcnn_benchmark.structures.bounding_box.BoxList", "list_dataset.ListDataset.transforms", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "image_lists", "[", "item", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "# dummy target", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "target", "=", "BoxList", "(", "[", "[", "0", ",", "0", ",", "w", ",", "h", "]", "]", ",", "img", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "transforms", "(", "img", ",", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.list_dataset.ListDataset.__len__": [[28, 30], ["len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_lists", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.list_dataset.ListDataset.get_img_info": [[31, 37], ["None"], "methods", ["None"], ["", "def", "get_img_info", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"\n        Return the image dimensions for the image, without\n        loading and pre-processing it\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.concat_dataset.ConcatDataset.get_idxs": [[13, 20], ["bisect.bisect_right"], "methods", ["None"], ["def", "get_idxs", "(", "self", ",", "idx", ")", ":", "\n", "        ", "dataset_idx", "=", "bisect", ".", "bisect_right", "(", "self", ".", "cumulative_sizes", ",", "idx", ")", "\n", "if", "dataset_idx", "==", "0", ":", "\n", "            ", "sample_idx", "=", "idx", "\n", "", "else", ":", "\n", "            ", "sample_idx", "=", "idx", "-", "self", ".", "cumulative_sizes", "[", "dataset_idx", "-", "1", "]", "\n", "", "return", "dataset_idx", ",", "sample_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.concat_dataset.ConcatDataset.get_img_info": [[21, 24], ["concat_dataset.ConcatDataset.get_idxs", "concat_dataset.ConcatDataset.datasets[].get_img_info"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.concat_dataset.ConcatDataset.get_idxs", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.concat_dataset.ConcatDataset.get_img_info"], ["", "def", "get_img_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "dataset_idx", ",", "sample_idx", "=", "self", ".", "get_idxs", "(", "idx", ")", "\n", "return", "self", ".", "datasets", "[", "dataset_idx", "]", ".", "get_img_info", "(", "sample_idx", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.evaluation.__init__.evaluate": [[11, 39], ["dict", "isinstance", "retrieval.svt.svt_retrieval_evaluation", "isinstance", "retrieval.iiit.iiit_retrieval_evaluation", "isinstance", "retrieval.cocotext.cocotext_retrieval_evaluation", "isinstance", "retrieval.chinese_collect.chinese_collect_retrieval_evaluation", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.svt.svt_retrieval_evaluation", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.iiit.iiit_retrieval_evaluation", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.cocotext.cocotext_retrieval_evaluation", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.chinese_collect.chinese_collect_retrieval_evaluation"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detection.ic15.ic15_detection_evaluation": [[23, 36], ["logging.getLogger", "logging.getLogger.info", "ic15.evaluate_box_proposals"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.evaluate_box_proposals"], ["def", "ic15_detection_evaluation", "(", "\n", "dataset", ",", "\n", "predictions", ",", "\n", "box_only", ",", "\n", "output_folder", ",", "\n", "iou_types", ",", "\n", "rec_type", ",", "\n", "expected_results", ",", "\n", "expected_results_sigma_tol", ",", "\n", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"maskrcnn_benchmark.inference\"", ")", "\n", "logger", ".", "info", "(", "\"Evaluating bbox proposals\"", ")", "\n", "evaluate_box_proposals", "(", "predictions", ",", "dataset", ",", "output_folder", ")", "\n", "", "def", "filter_inner_box", "(", "polys", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detection.ic15.filter_inner_box": [[36, 66], ["polys.reshape.reshape", "polys.reshape.mean", "numpy.zeros", "enumerate", "numpy.where", "polys.reshape.reshape", "cv2.pointPolygonTest", "numpy.where", "poly.astype", "min", "min", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "filter_inner_box", "(", "polys", ")", ":", "\n", "    ", "'''\n    filter thoese containing box.\n    First find box with overlap, the decide which to leave\n    '''", "\n", "if", "polys", ".", "size", "==", "0", ":", "\n", "        ", "return", "polys", "\n", "", "polys", "=", "polys", ".", "reshape", "(", "-", "1", ",", "4", ",", "2", ")", "\n", "centers", "=", "polys", ".", "mean", "(", "1", ")", "\n", "\n", "remove_flag", "=", "np", ".", "zeros", "(", "(", "centers", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "idx", ",", "cp", "in", "enumerate", "(", "centers", ")", ":", "\n", "        ", "contain_status", "=", "[", "cv2", ".", "pointPolygonTest", "(", "poly", ".", "astype", "(", "np", ".", "int32", ")", ",", "(", "cp", "[", "0", "]", ",", "cp", "[", "1", "]", ")", ",", "False", ")", "for", "poly", "in", "polys", "]", "\n", "idx_conts", "=", "np", ".", "where", "(", "np", ".", "array", "(", "contain_status", ")", "==", "True", ")", "[", "0", "]", "\n", "for", "id_c", "in", "idx_conts", ":", "\n", "            ", "if", "id_c", "!=", "idx", ":", "\n", "                ", "poly_m", "=", "polys", "[", "id_c", "]", "\n", "poly_c", "=", "polys", "[", "idx", "]", "\n", "\n", "# if one side of current poly is close to big poly", "\n", "# then remve this poly", "\n", "\n", "m_short", "=", "min", "(", "np", ".", "linalg", ".", "norm", "(", "poly_m", "[", "0", "]", "-", "poly_m", "[", "1", "]", ")", ",", "np", ".", "linalg", ".", "norm", "(", "poly_m", "[", "1", "]", "-", "poly_m", "[", "2", "]", ")", ")", "\n", "c_short", "=", "min", "(", "np", ".", "linalg", ".", "norm", "(", "poly_c", "[", "0", "]", "-", "poly_c", "[", "1", "]", ")", ",", "np", ".", "linalg", ".", "norm", "(", "poly_c", "[", "1", "]", "-", "poly_c", "[", "2", "]", ")", ")", "\n", "\n", "if", "m_short", "/", "c_short", ">", "0.9", "and", "m_short", "/", "c_short", "<", "1", "/", "0.9", ":", "\n", "                    ", "remove_flag", "[", "idx", "]", "=", "1", "\n", "", "", "", "", "keep_idx", "=", "np", ".", "where", "(", "remove_flag", "==", "False", ")", "\n", "polys", "=", "polys", "[", "keep_idx", ",", ":", ",", ":", "]", "\n", "return", "polys", ".", "reshape", "(", "-", "1", ",", "4", ",", "2", ")", "\n", "", "def", "write_to_file", "(", "bboxes", ",", "path", ",", "output_dir", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detection.ic15.write_to_file": [[66, 88], ["os.path.join", "enumerate", "print", "lines.append", "open", "os.path.basename().replace", "int", "tuple", "f.write", "bbox.reshape", "os.path.basename"], "function", ["None"], ["", "def", "write_to_file", "(", "bboxes", ",", "path", ",", "output_dir", ")", ":", "\n", "    ", "''' the socres is the average score of boundingbox region\n    '''", "\n", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'res_%s.txt'", "%", "(", "os", ".", "path", ".", "basename", "(", "path", ")", ".", "replace", "(", "\".jpg\"", ",", "\"\"", ")", ")", ")", "\n", "lines", "=", "[", "]", "\n", "for", "b_idx", ",", "bbox", "in", "enumerate", "(", "bboxes", ")", ":", "\n", "        ", "values", "=", "[", "int", "(", "v", ")", "for", "v", "in", "bbox", ".", "reshape", "(", "[", "-", "1", "]", ")", "]", "\n", "# if words is not None:", "\n", "#     line = \"%d, %d, %d, %d, %d, %d, %d, %d\" % tuple(values)", "\n", "#     line = line+','+words[b_idx]+'\\r\\n'", "\n", "# elif scores is None:", "\n", "line", "=", "\"%d, %d, %d, %d, %d, %d, %d, %d\\r\\n\"", "%", "tuple", "(", "values", ")", "\n", "# else:", "\n", "#     values.append(scores[b_idx])", "\n", "#     line = \"%d, %d, %d, %d, %d, %d, %d, %d,%f\\r\\n\" % tuple(values)", "\n", "lines", ".", "append", "(", "line", ")", "\n", "\n", "", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "lines", ":", "\n", "            ", "f", ".", "write", "(", "line", ")", "\n", "", "", "print", "(", "filename", ")", "\n", "", "def", "show_detection", "(", "boxes", ",", "polys", ",", "path", ",", "output_folder", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detection.ic15.show_detection": [[88, 97], ["os.path.join", "cv2.imread", "cv2.drawContours", "cv2.imwrite", "os.path.basename", "boxes.astype"], "function", ["None"], ["", "def", "show_detection", "(", "boxes", ",", "polys", ",", "path", ",", "output_folder", ")", ":", "\n", "    ", "import", "cv2", "\n", "# boxes = bbox.data.cpu().numpy()[:,(0,1,2,1,2,3,0,3)].reshape([-1,4,2])", "\n", "# polys = polys.data.cpu().numpy()", "\n", "img_save_path", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "os", ".", "path", ".", "basename", "(", "path", ")", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "path", ")", "\n", "cv2", ".", "drawContours", "(", "image", ",", "boxes", ".", "astype", "(", "np", ".", "int32", ")", ",", "-", "1", ",", "color", "=", "(", "255", ",", "0", ",", "0", ")", ",", "thickness", "=", "2", ")", "\n", "# cv2.drawContours(image, polys.astype(np.int32), -1, color=(0,0,255), thickness=2)", "\n", "cv2", ".", "imwrite", "(", "img_save_path", ",", "image", ")", "\n", "# print(img_save_path)", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.detection.ic15.evaluate_box_proposals": [[99, 155], ["os.path.join", "os.path.join", "enumerate", "subprocess.check_output", "os.path.abspath", "dataset.get_img_info", "prediction.resize.resize", "prediction.resize.get_field", "prediction.resize.get_field", "prediction.resize.get_field().view", "torch.nonzero().view", "[].reshape", "polys[].data.cpu().numpy", "ic15.show_detection", "ic15.write_to_file", "os.path.join", "eval", "open", "json.dump", "os.path.exists", "os.makedirs", "print", "os.path.join", "prediction.resize.get_field", "torch.nonzero", "polys[].data.cpu", "prediction.resize.bbox[].data.cpu().numpy", "prediction.resize.bbox[].data.cpu"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.concat_dataset.ConcatDataset.get_img_info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.show_detection", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.write_to_file", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["", "def", "evaluate_box_proposals", "(", "\n", "predictions", ",", "dataset", ",", "output_folder", ",", "thresholds", "=", "0.23", ",", "area", "=", "\"all\"", ",", "limit", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"Evaluate detection proposal recall metrics. This function is a much\n    faster alternative to the official COCO API recall evaluation code. However,\n    it produces slightly different results.\n    \"\"\"", "\n", "gt_overlaps", "=", "[", "]", "\n", "num_pos", "=", "0", "\n", "img_floder", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "'images'", ")", "\n", "txt_floder", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "'texts'", ")", "\n", "for", "folder", "in", "[", "img_floder", ",", "txt_floder", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder", ")", "\n", "\n", "", "", "for", "image_id", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "        ", "info", "=", "dataset", ".", "get_img_info", "(", "image_id", ")", "\n", "\n", "# TODO replace with get_img_info?", "\n", "path", "=", "info", "[", "\"path\"", "]", "\n", "image_width", "=", "info", "[", "\"width\"", "]", "\n", "image_height", "=", "info", "[", "\"height\"", "]", "\n", "# print(path, image_width, image_height)", "\n", "# continue", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "ratio_width", ",", "ratio_height", "=", "prediction", ".", "get_field", "(", "\"ratios\"", ")", "\n", "# objectness = prediction.get_field(\"labels\")", "\n", "scores", "=", "prediction", ".", "get_field", "(", "\"scores\"", ")", "\n", "polys", "=", "prediction", ".", "get_field", "(", "\"polys\"", ")", ".", "view", "(", "-", "1", ",", "4", ",", "2", ")", "\n", "polys", "[", ":", ",", ":", ",", "0", "]", "*=", "ratio_width", "\n", "polys", "[", ":", ",", ":", ",", "1", "]", "*=", "ratio_height", "\n", "# print(polys.shape)", "\n", "# centerness = objectness*scores", "\n", "pos_idxs", "=", "torch", ".", "nonzero", "(", "scores", ">", "thresholds", ")", ".", "view", "(", "-", "1", ")", "\n", "bbox", "=", "prediction", ".", "bbox", "[", "pos_idxs", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "(", "0", ",", "1", ",", "2", ",", "1", ",", "2", ",", "3", ",", "0", ",", "3", ")", "]", ".", "reshape", "(", "[", "-", "1", ",", "4", ",", "2", "]", ")", "\n", "polys", "=", "polys", "[", "pos_idxs", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# polys = filter_inner_box(polys)", "\n", "# print(bbox.shape)", "\n", "show_detection", "(", "bbox", ",", "polys", ",", "path", ",", "img_floder", ")", "\n", "write_to_file", "(", "polys", ",", "path", ",", "txt_floder", ")", "\n", "", "cmd", "=", "'cd %s;zip -j detect.zip texts/*'", "%", "output_folder", "\n", "import", "subprocess", "\n", "subprocess", ".", "check_output", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n", "abs_path", "=", "os", ".", "path", ".", "abspath", "(", "output_folder", ")", "\n", "para", "=", "{", "'g'", ":", "'./maskrcnn_benchmark/data/datasets/evaluation/detection/ic15_scripts/gt.zip'", ",", "\n", "'s'", ":", "os", ".", "path", ".", "join", "(", "abs_path", ",", "'detect.zip'", ")", ",", "\n", "'o'", ":", "abs_path", "}", "\n", "func_name", "=", "'eval_s(para)'", "\n", "try", ":", "\n", "        ", "res", "=", "eval", "(", "func_name", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "'eval error!'", ")", "\n", "# os.chdir('../')", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "abs_path", ",", "'result.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "res", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.print_help": [[12, 15], ["sys.stdout.write", "sys.exit"], "function", ["None"], ["def", "print_help", "(", ")", ":", "\n", "    ", "sys", ".", "stdout", ".", "write", "(", "'Usage: python %s.py -g=<gtFile> -s=<submFile> [-o=<outputFolder> -p=<jsonParams>]'", "%", "sys", ".", "argv", "[", "0", "]", ")", "\n", "sys", ".", "exit", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.load_zip_file_keys": [[17, 44], ["zipfile.ZipFile.namelist", "zipfile.ZipFile", "Exception", "re.match", "pairs.append", "len", "re.match.group", "re.match.groups"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "load_zip_file_keys", "(", "file", ",", "fileNameRegExp", "=", "''", ")", ":", "\n", "    ", "\"\"\"\n    Returns an array with the entries of the ZIP file that match with the regular expression.\n    The key's are the names or the file or the capturing group definied in the fileNameRegExp\n    \"\"\"", "\n", "try", ":", "\n", "        ", "archive", "=", "zipfile", ".", "ZipFile", "(", "file", ",", "mode", "=", "'r'", ",", "allowZip64", "=", "True", ")", "\n", "", "except", ":", "\n", "        ", "raise", "Exception", "(", "'Error loading the ZIP archive.'", ")", "\n", "\n", "", "pairs", "=", "[", "]", "\n", "\n", "for", "name", "in", "archive", ".", "namelist", "(", ")", ":", "\n", "        ", "addFile", "=", "True", "\n", "keyName", "=", "name", "\n", "if", "fileNameRegExp", "!=", "\"\"", ":", "\n", "            ", "m", "=", "re", ".", "match", "(", "fileNameRegExp", ",", "name", ")", "\n", "if", "m", "==", "None", ":", "\n", "                ", "addFile", "=", "False", "\n", "", "else", ":", "\n", "                ", "if", "len", "(", "m", ".", "groups", "(", ")", ")", ">", "0", ":", "\n", "                    ", "keyName", "=", "m", ".", "group", "(", "1", ")", "\n", "\n", "", "", "", "if", "addFile", ":", "\n", "            ", "pairs", ".", "append", "(", "keyName", ")", "\n", "\n", "", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.load_zip_file": [[46, 76], ["zipfile.ZipFile.namelist", "dict", "zipfile.ZipFile", "Exception", "re.match", "pairs.append", "Exception", "len", "re.match.group", "zipfile.ZipFile.read", "re.match.groups"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "load_zip_file", "(", "file", ",", "fileNameRegExp", "=", "''", ",", "allEntries", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Returns an array with the contents (filtered by fileNameRegExp) of a ZIP file.\n    The key's are the names or the file or the capturing group definied in the fileNameRegExp\n    allEntries validates that all entries in the ZIP file pass the fileNameRegExp\n    \"\"\"", "\n", "try", ":", "\n", "        ", "archive", "=", "zipfile", ".", "ZipFile", "(", "file", ",", "mode", "=", "'r'", ",", "allowZip64", "=", "True", ")", "\n", "", "except", ":", "\n", "        ", "raise", "Exception", "(", "'Error loading the ZIP archive'", ")", "\n", "\n", "", "pairs", "=", "[", "]", "\n", "for", "name", "in", "archive", ".", "namelist", "(", ")", ":", "\n", "        ", "addFile", "=", "True", "\n", "keyName", "=", "name", "\n", "if", "fileNameRegExp", "!=", "\"\"", ":", "\n", "            ", "m", "=", "re", ".", "match", "(", "fileNameRegExp", ",", "name", ")", "\n", "if", "m", "==", "None", ":", "\n", "                ", "addFile", "=", "False", "\n", "", "else", ":", "\n", "                ", "if", "len", "(", "m", ".", "groups", "(", ")", ")", ">", "0", ":", "\n", "                    ", "keyName", "=", "m", ".", "group", "(", "1", ")", "\n", "\n", "", "", "", "if", "addFile", ":", "\n", "            ", "pairs", ".", "append", "(", "[", "keyName", ",", "archive", ".", "read", "(", "name", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "allEntries", ":", "\n", "                ", "raise", "Exception", "(", "'ZIP entry not valid: %s'", "%", "name", ")", "\n", "\n", "", "", "", "return", "dict", "(", "pairs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.decode_utf8": [[77, 90], ["codecs.decode", "raw.replace.encode", "raw.replace.startswith", "raw.replace.decode", "raw.replace.replace"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.decode", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.encode", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.box_coder.BoxCoder.decode"], ["", "def", "decode_utf8", "(", "raw", ")", ":", "\n", "    ", "\"\"\"\n    Returns a Unicode object on success, or None on failure\n    \"\"\"", "\n", "try", ":", "\n", "        ", "raw", "=", "codecs", ".", "decode", "(", "raw", ",", "'utf-8'", ",", "'replace'", ")", "\n", "#extracts BOM if exists", "\n", "raw", "=", "raw", ".", "encode", "(", "'utf8'", ")", "\n", "if", "raw", ".", "startswith", "(", "codecs", ".", "BOM_UTF8", ")", ":", "\n", "            ", "raw", "=", "raw", ".", "replace", "(", "codecs", ".", "BOM_UTF8", ",", "''", ",", "1", ")", "\n", "", "return", "raw", ".", "decode", "(", "'utf-8'", ")", "\n", "", "except", ":", "\n", "       ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.validate_lines_in_file": [[91, 107], ["rrc_evaluation_funcs.decode_utf8", "decode_utf8.split", "Exception", "line.replace().replace.replace().replace", "line.replace().replace.replace", "rrc_evaluation_funcs.validate_tl_line", "Exception", "str"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.decode_utf8", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.validate_tl_line"], ["", "", "def", "validate_lines_in_file", "(", "fileName", ",", "file_contents", ",", "CRLF", "=", "True", ",", "LTRB", "=", "True", ",", "withTranscription", "=", "False", ",", "withConfidence", "=", "False", ",", "imWidth", "=", "0", ",", "imHeight", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    This function validates that all lines of the file calling the Line validation function for each line\n    \"\"\"", "\n", "utf8File", "=", "decode_utf8", "(", "file_contents", ")", "\n", "if", "(", "utf8File", "is", "None", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"The file %s is not UTF-8\"", "%", "fileName", ")", "\n", "\n", "", "lines", "=", "utf8File", ".", "split", "(", "\"\\r\\n\"", "if", "CRLF", "else", "\"\\n\"", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "replace", "(", "\"\\r\"", ",", "\"\"", ")", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "if", "(", "line", "!=", "\"\"", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "validate_tl_line", "(", "line", ",", "LTRB", ",", "withTranscription", ",", "withConfidence", ",", "imWidth", ",", "imHeight", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "raise", "Exception", "(", "(", "\"Line in sample not valid. Sample: %s Line: %s Error: %s\"", "%", "(", "fileName", ",", "line", ",", "str", "(", "e", ")", ")", ")", ".", "encode", "(", "'utf-8'", ",", "'replace'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.validate_tl_line": [[110, 119], ["rrc_evaluation_funcs.get_tl_line_values"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.get_tl_line_values"], ["", "", "", "", "def", "validate_tl_line", "(", "line", ",", "LTRB", "=", "True", ",", "withTranscription", "=", "True", ",", "withConfidence", "=", "True", ",", "imWidth", "=", "0", ",", "imHeight", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Validate the format of the line. If the line is not valid an exception will be raised.\n    If maxWidth and maxHeight are specified, all points must be inside the imgage bounds.\n    Posible values are:\n    LTRB=True: xmin,ymin,xmax,ymax[,confidence][,transcription] \n    LTRB=False: x1,y1,x2,y2,x3,y3,x4,y4[,confidence][,transcription] \n    \"\"\"", "\n", "get_tl_line_values", "(", "line", ",", "LTRB", ",", "withTranscription", ",", "withConfidence", ",", "imWidth", ",", "imHeight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.get_tl_line_values": [[121, 219], ["int", "int", "int", "int", "rrc_evaluation_funcs.validate_clockwise_points", "re.match.group", "re.match", "re.match", "re.match.group", "re.match.group", "re.match.group", "re.match.group", "Exception", "Exception", "float", "rrc_evaluation_funcs.validate_point_inside_bounds", "rrc_evaluation_funcs.validate_point_inside_bounds", "re.match", "float", "rrc_evaluation_funcs.validate_point_inside_bounds", "rrc_evaluation_funcs.validate_point_inside_bounds", "rrc_evaluation_funcs.validate_point_inside_bounds", "rrc_evaluation_funcs.validate_point_inside_bounds", "float", "re.match.group().replace().replace", "re.match", "Exception", "re.match", "re.match.group", "range", "Exception", "re.match", "re.match.group", "range", "re.match.group", "Exception", "Exception", "re.match", "re.match", "Exception", "re.match", "re.match", "re.match.group().replace", "Exception", "Exception", "Exception", "Exception", "re.match.group"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.validate_clockwise_points", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.validate_point_inside_bounds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.validate_point_inside_bounds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.validate_point_inside_bounds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.validate_point_inside_bounds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.validate_point_inside_bounds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.validate_point_inside_bounds"], ["", "def", "get_tl_line_values", "(", "line", ",", "LTRB", "=", "True", ",", "withTranscription", "=", "False", ",", "withConfidence", "=", "False", ",", "imWidth", "=", "0", ",", "imHeight", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Validate the format of the line. If the line is not valid an exception will be raised.\n    If maxWidth and maxHeight are specified, all points must be inside the imgage bounds.\n    Posible values are:\n    LTRB=True: xmin,ymin,xmax,ymax[,confidence][,transcription] \n    LTRB=False: x1,y1,x2,y2,x3,y3,x4,y4[,confidence][,transcription] \n    Returns values from a textline. Points , [Confidences], [Transcriptions]\n    \"\"\"", "\n", "confidence", "=", "0.0", "\n", "transcription", "=", "\"\"", ";", "\n", "points", "=", "[", "]", "\n", "\n", "numPoints", "=", "4", ";", "\n", "\n", "if", "LTRB", ":", "\n", "\n", "        ", "numPoints", "=", "4", ";", "\n", "\n", "if", "withTranscription", "and", "withConfidence", ":", "\n", "            ", "m", "=", "re", ".", "match", "(", "r'^\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-1].?[0-9]*)\\s*,(.*)$'", ",", "line", ")", "\n", "if", "m", "==", "None", ":", "\n", "                ", "m", "=", "re", ".", "match", "(", "r'^\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-1].?[0-9]*)\\s*,(.*)$'", ",", "line", ")", "\n", "raise", "Exception", "(", "\"Format incorrect. Should be: xmin,ymin,xmax,ymax,confidence,transcription\"", ")", "\n", "", "", "elif", "withConfidence", ":", "\n", "            ", "m", "=", "re", ".", "match", "(", "r'^\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-1].?[0-9]*)\\s*$'", ",", "line", ")", "\n", "if", "m", "==", "None", ":", "\n", "                ", "raise", "Exception", "(", "\"Format incorrect. Should be: xmin,ymin,xmax,ymax,confidence\"", ")", "\n", "", "", "elif", "withTranscription", ":", "\n", "            ", "m", "=", "re", ".", "match", "(", "r'^\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*,(.*)$'", ",", "line", ")", "\n", "if", "m", "==", "None", ":", "\n", "                ", "raise", "Exception", "(", "\"Format incorrect. Should be: xmin,ymin,xmax,ymax,transcription\"", ")", "\n", "", "", "else", ":", "\n", "            ", "m", "=", "re", ".", "match", "(", "r'^\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*,?\\s*$'", ",", "line", ")", "\n", "if", "m", "==", "None", ":", "\n", "                ", "raise", "Exception", "(", "\"Format incorrect. Should be: xmin,ymin,xmax,ymax\"", ")", "\n", "\n", "", "", "xmin", "=", "int", "(", "m", ".", "group", "(", "1", ")", ")", "\n", "ymin", "=", "int", "(", "m", ".", "group", "(", "2", ")", ")", "\n", "xmax", "=", "int", "(", "m", ".", "group", "(", "3", ")", ")", "\n", "ymax", "=", "int", "(", "m", ".", "group", "(", "4", ")", ")", "\n", "if", "(", "xmax", "<", "xmin", ")", ":", "\n", "                ", "raise", "Exception", "(", "\"Xmax value (%s) not valid (Xmax < Xmin).\"", "%", "(", "xmax", ")", ")", "\n", "", "if", "(", "ymax", "<", "ymin", ")", ":", "\n", "                ", "raise", "Exception", "(", "\"Ymax value (%s)  not valid (Ymax < Ymin).\"", "%", "(", "ymax", ")", ")", "\n", "\n", "", "points", "=", "[", "float", "(", "m", ".", "group", "(", "i", ")", ")", "for", "i", "in", "range", "(", "1", ",", "(", "numPoints", "+", "1", ")", ")", "]", "\n", "\n", "if", "(", "imWidth", ">", "0", "and", "imHeight", ">", "0", ")", ":", "\n", "            ", "validate_point_inside_bounds", "(", "xmin", ",", "ymin", ",", "imWidth", ",", "imHeight", ")", ";", "\n", "validate_point_inside_bounds", "(", "xmax", ",", "ymax", ",", "imWidth", ",", "imHeight", ")", ";", "\n", "\n", "", "", "else", ":", "\n", "\n", "        ", "numPoints", "=", "8", ";", "\n", "\n", "if", "withTranscription", "and", "withConfidence", ":", "\n", "            ", "m", "=", "re", ".", "match", "(", "r'^\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*([0-1].?[0-9]*)\\s*,(.*)$'", ",", "line", ")", "\n", "if", "m", "==", "None", ":", "\n", "                ", "raise", "Exception", "(", "\"Format incorrect. Should be: x1,y1,x2,y2,x3,y3,x4,y4,confidence,transcription\"", ")", "\n", "", "", "elif", "withConfidence", ":", "\n", "            ", "m", "=", "re", ".", "match", "(", "r'^\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*([0-1].?[0-9]*)\\s*$'", ",", "line", ")", "\n", "if", "m", "==", "None", ":", "\n", "                ", "raise", "Exception", "(", "\"Format incorrect. Should be: x1,y1,x2,y2,x3,y3,x4,y4,confidence\"", ")", "\n", "", "", "elif", "withTranscription", ":", "\n", "            ", "m", "=", "re", ".", "match", "(", "r'^\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,(.*)$'", ",", "line", ")", "\n", "if", "m", "==", "None", ":", "\n", "                ", "raise", "Exception", "(", "\"Format incorrect. Should be: x1,y1,x2,y2,x3,y3,x4,y4,transcription\"", ")", "\n", "", "", "else", ":", "\n", "            ", "m", "=", "re", ".", "match", "(", "r'^\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*,\\s*(-?[0-9]+)\\s*$'", ",", "line", ")", "\n", "if", "m", "==", "None", ":", "\n", "                ", "raise", "Exception", "(", "\"Format incorrect. Should be: x1,y1,x2,y2,x3,y3,x4,y4\"", ")", "\n", "\n", "", "", "points", "=", "[", "float", "(", "m", ".", "group", "(", "i", ")", ")", "for", "i", "in", "range", "(", "1", ",", "(", "numPoints", "+", "1", ")", ")", "]", "\n", "\n", "validate_clockwise_points", "(", "points", ")", "\n", "\n", "if", "(", "imWidth", ">", "0", "and", "imHeight", ">", "0", ")", ":", "\n", "            ", "validate_point_inside_bounds", "(", "points", "[", "0", "]", ",", "points", "[", "1", "]", ",", "imWidth", ",", "imHeight", ")", ";", "\n", "validate_point_inside_bounds", "(", "points", "[", "2", "]", ",", "points", "[", "3", "]", ",", "imWidth", ",", "imHeight", ")", ";", "\n", "validate_point_inside_bounds", "(", "points", "[", "4", "]", ",", "points", "[", "5", "]", ",", "imWidth", ",", "imHeight", ")", ";", "\n", "validate_point_inside_bounds", "(", "points", "[", "6", "]", ",", "points", "[", "7", "]", ",", "imWidth", ",", "imHeight", ")", ";", "\n", "\n", "\n", "", "", "if", "withConfidence", ":", "\n", "        ", "try", ":", "\n", "            ", "confidence", "=", "float", "(", "m", ".", "group", "(", "numPoints", "+", "1", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "raise", "Exception", "(", "\"Confidence value must be a float\"", ")", "\n", "\n", "", "", "if", "withTranscription", ":", "\n", "        ", "posTranscription", "=", "numPoints", "+", "(", "2", "if", "withConfidence", "else", "1", ")", "\n", "transcription", "=", "m", ".", "group", "(", "posTranscription", ")", "\n", "m2", "=", "re", ".", "match", "(", "r'^\\s*\\\"(.*)\\\"\\s*$'", ",", "transcription", ")", "\n", "if", "m2", "!=", "None", ":", "#Transcription with double quotes, we extract the value and replace escaped characters", "\n", "            ", "transcription", "=", "m2", ".", "group", "(", "1", ")", ".", "replace", "(", "\"\\\\\\\\\"", ",", "\"\\\\\"", ")", ".", "replace", "(", "\"\\\\\\\"\"", ",", "\"\\\"\"", ")", "\n", "\n", "", "", "return", "points", ",", "confidence", ",", "transcription", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.validate_point_inside_bounds": [[221, 226], ["Exception", "Exception"], "function", ["None"], ["", "def", "validate_point_inside_bounds", "(", "x", ",", "y", ",", "imWidth", ",", "imHeight", ")", ":", "\n", "    ", "if", "(", "x", "<", "0", "or", "x", ">", "imWidth", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"X value (%s) not valid. Image dimensions: (%s,%s)\"", "%", "(", "xmin", ",", "imWidth", ",", "imHeight", ")", ")", "\n", "", "if", "(", "y", "<", "0", "or", "y", ">", "imHeight", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"Y value (%s)  not valid. Image dimensions: (%s,%s) Sample: %s Line:%s\"", "%", "(", "ymin", ",", "imWidth", ",", "imHeight", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.validate_clockwise_points": [[227, 251], ["len", "Exception", "Exception", "int", "int", "int", "int", "int", "int", "int", "int", "str", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "def", "validate_clockwise_points", "(", "points", ")", ":", "\n", "    ", "\"\"\"\n    Validates that the points that the 4 points that dlimite a polygon are in clockwise order.\n    \"\"\"", "\n", "\n", "if", "len", "(", "points", ")", "!=", "8", ":", "\n", "        ", "raise", "Exception", "(", "\"Points list not valid.\"", "+", "str", "(", "len", "(", "points", ")", ")", ")", "\n", "\n", "", "point", "=", "[", "\n", "[", "int", "(", "points", "[", "0", "]", ")", ",", "int", "(", "points", "[", "1", "]", ")", "]", ",", "\n", "[", "int", "(", "points", "[", "2", "]", ")", ",", "int", "(", "points", "[", "3", "]", ")", "]", ",", "\n", "[", "int", "(", "points", "[", "4", "]", ")", ",", "int", "(", "points", "[", "5", "]", ")", "]", ",", "\n", "[", "int", "(", "points", "[", "6", "]", ")", ",", "int", "(", "points", "[", "7", "]", ")", "]", "\n", "]", "\n", "edge", "=", "[", "\n", "(", "point", "[", "1", "]", "[", "0", "]", "-", "point", "[", "0", "]", "[", "0", "]", ")", "*", "(", "point", "[", "1", "]", "[", "1", "]", "+", "point", "[", "0", "]", "[", "1", "]", ")", ",", "\n", "(", "point", "[", "2", "]", "[", "0", "]", "-", "point", "[", "1", "]", "[", "0", "]", ")", "*", "(", "point", "[", "2", "]", "[", "1", "]", "+", "point", "[", "1", "]", "[", "1", "]", ")", ",", "\n", "(", "point", "[", "3", "]", "[", "0", "]", "-", "point", "[", "2", "]", "[", "0", "]", ")", "*", "(", "point", "[", "3", "]", "[", "1", "]", "+", "point", "[", "2", "]", "[", "1", "]", ")", ",", "\n", "(", "point", "[", "0", "]", "[", "0", "]", "-", "point", "[", "3", "]", "[", "0", "]", ")", "*", "(", "point", "[", "0", "]", "[", "1", "]", "+", "point", "[", "3", "]", "[", "1", "]", ")", "\n", "]", "\n", "\n", "summatory", "=", "edge", "[", "0", "]", "+", "edge", "[", "1", "]", "+", "edge", "[", "2", "]", "+", "edge", "[", "3", "]", ";", "\n", "if", "summatory", ">", "0", ":", "\n", "        ", "raise", "Exception", "(", "\"Points are not clockwise. The coordinates of bounding quadrilaterals have to be given in clockwise order. Regarding the correct interpretation of 'clockwise' remember that the image coordinate system used is the standard one, with the image origin at the upper left, the X axis extending to the right and Y axis extending downwards.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.get_tl_line_values_from_file_contents": [[252, 279], ["content.split", "line.replace().replace.replace().replace", "np.argsort", "rrc_evaluation_funcs.get_tl_line_values", "pointsList.append", "transcriptionsList.append", "confidencesList.append", "len", "line.replace().replace.replace", "np.array"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.get_tl_line_values", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "def", "get_tl_line_values_from_file_contents", "(", "content", ",", "CRLF", "=", "True", ",", "LTRB", "=", "True", ",", "withTranscription", "=", "False", ",", "withConfidence", "=", "False", ",", "imWidth", "=", "0", ",", "imHeight", "=", "0", ",", "sort_by_confidences", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Returns all points, confindences and transcriptions of a file in lists. Valid line formats:\n    xmin,ymin,xmax,ymax,[confidence],[transcription]\n    x1,y1,x2,y2,x3,y3,x4,y4,[confidence],[transcription]\n    \"\"\"", "\n", "pointsList", "=", "[", "]", "\n", "transcriptionsList", "=", "[", "]", "\n", "confidencesList", "=", "[", "]", "\n", "\n", "lines", "=", "content", ".", "split", "(", "\"\\r\\n\"", "if", "CRLF", "else", "\"\\n\"", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "replace", "(", "\"\\r\"", ",", "\"\"", ")", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "if", "(", "line", "!=", "\"\"", ")", ":", "\n", "            ", "points", ",", "confidence", ",", "transcription", "=", "get_tl_line_values", "(", "line", ",", "LTRB", ",", "withTranscription", ",", "withConfidence", ",", "imWidth", ",", "imHeight", ")", ";", "\n", "pointsList", ".", "append", "(", "points", ")", "\n", "transcriptionsList", ".", "append", "(", "transcription", ")", "\n", "confidencesList", ".", "append", "(", "confidence", ")", "\n", "\n", "", "", "if", "withConfidence", "and", "len", "(", "confidencesList", ")", ">", "0", "and", "sort_by_confidences", ":", "\n", "        ", "import", "numpy", "as", "np", "\n", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "np", ".", "array", "(", "confidencesList", ")", ")", "\n", "confidencesList", "=", "[", "confidencesList", "[", "i", "]", "for", "i", "in", "sorted_ind", "]", "\n", "pointsList", "=", "[", "pointsList", "[", "i", "]", "for", "i", "in", "sorted_ind", "]", "\n", "transcriptionsList", "=", "[", "transcriptionsList", "[", "i", "]", "for", "i", "in", "sorted_ind", "]", "\n", "\n", "", "return", "pointsList", ",", "confidencesList", ",", "transcriptionsList", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.main_evaluation": [[280, 345], ["default_evaluation_params_fn", "dict", "list", "default_evaluation_params_fn.update", "validate_data_fn", "evaluate_method_fn", "resDict.update", "zipfile.ZipFile", "zipfile.ZipFile.writestr", "zipfile.ZipFile.close", "sys.stdout.write", "sys.stdout.write", "len", "rrc_evaluation_funcs.print_help", "dict.keys", "str", "os.path.exists", "os.makedirs", "list", "json.dumps", "sys.stderr.write", "zipfile.ZipFile.close", "evalData[].items", "json.dumps", "s[].split", "isinstance", "json.loads", "resDict.keys", "zipfile.ZipFile.writestr", "list", "evalData[].items", "json.dumps", "evaluate_method_fn.keys", "zipfile.ZipFile.writestr"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.print_help"], ["", "def", "main_evaluation", "(", "p", ",", "default_evaluation_params_fn", ",", "validate_data_fn", ",", "evaluate_method_fn", ",", "show_result", "=", "True", ",", "per_sample", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    This process validates a method, evaluates it and if it succed generates a ZIP file with a JSON entry for each sample.\n    Params:\n    p: Dictionary of parmeters with the GT/submission locations. If None is passed, the parameters send by the system are used.\n    default_evaluation_params_fn: points to a function that returns a dictionary with the default parameters used for the evaluation\n    validate_data_fn: points to a method that validates the corrct format of the submission\n    evaluate_method_fn: points to a function that evaluated the submission and return a Dictionary with the results\n    \"\"\"", "\n", "\n", "if", "(", "p", "==", "None", ")", ":", "\n", "        ", "p", "=", "dict", "(", "[", "s", "[", "1", ":", "]", ".", "split", "(", "'='", ")", "for", "s", "in", "sys", ".", "argv", "[", "1", ":", "]", "]", ")", "\n", "if", "(", "len", "(", "sys", ".", "argv", ")", "<", "3", ")", ":", "\n", "            ", "print_help", "(", ")", "\n", "\n", "", "", "evalParams", "=", "default_evaluation_params_fn", "(", ")", "\n", "if", "'p'", "in", "list", "(", "p", ".", "keys", "(", ")", ")", ":", "\n", "        ", "evalParams", ".", "update", "(", "p", "[", "'p'", "]", "if", "isinstance", "(", "p", "[", "'p'", "]", ",", "dict", ")", "else", "json", ".", "loads", "(", "p", "[", "'p'", "]", "[", "1", ":", "-", "1", "]", ")", ")", "\n", "\n", "", "resDict", "=", "{", "'calculated'", ":", "True", ",", "'Message'", ":", "''", ",", "'method'", ":", "'{}'", ",", "'per_sample'", ":", "'{}'", "}", "\n", "try", ":", "\n", "        ", "validate_data_fn", "(", "p", "[", "'g'", "]", ",", "p", "[", "'s'", "]", ",", "evalParams", ")", "\n", "evalData", "=", "evaluate_method_fn", "(", "p", "[", "'g'", "]", ",", "p", "[", "'s'", "]", ",", "evalParams", ")", "\n", "resDict", ".", "update", "(", "evalData", ")", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "resDict", "[", "'Message'", "]", "=", "str", "(", "e", ")", "\n", "resDict", "[", "'calculated'", "]", "=", "False", "\n", "\n", "", "if", "'o'", "in", "p", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "p", "[", "'o'", "]", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "p", "[", "'o'", "]", ")", "\n", "\n", "", "resultsOutputname", "=", "p", "[", "'o'", "]", "+", "'/results.zip'", "\n", "outZip", "=", "zipfile", ".", "ZipFile", "(", "resultsOutputname", ",", "mode", "=", "'w'", ",", "allowZip64", "=", "True", ")", "\n", "\n", "del", "resDict", "[", "'per_sample'", "]", "\n", "if", "'output_items'", "in", "list", "(", "resDict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "del", "resDict", "[", "'output_items'", "]", "\n", "\n", "", "outZip", ".", "writestr", "(", "'method.json'", ",", "json", ".", "dumps", "(", "resDict", ")", ")", "\n", "\n", "", "if", "not", "resDict", "[", "'calculated'", "]", ":", "\n", "        ", "if", "show_result", ":", "\n", "            ", "sys", ".", "stderr", ".", "write", "(", "'Error!\\n'", "+", "resDict", "[", "'Message'", "]", "+", "'\\n\\n'", ")", "\n", "", "if", "'o'", "in", "p", ":", "\n", "            ", "outZip", ".", "close", "(", ")", "\n", "", "return", "resDict", "\n", "\n", "", "if", "'o'", "in", "p", ":", "\n", "        ", "if", "per_sample", "==", "True", ":", "\n", "            ", "for", "k", ",", "v", "in", "evalData", "[", "'per_sample'", "]", ".", "items", "(", ")", ":", "\n", "                ", "outZip", ".", "writestr", "(", "k", "+", "'.json'", ",", "json", ".", "dumps", "(", "v", ")", ")", "\n", "\n", "", "if", "'output_items'", "in", "list", "(", "evalData", ".", "keys", "(", ")", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "evalData", "[", "'output_items'", "]", ".", "items", "(", ")", ":", "\n", "                    ", "outZip", ".", "writestr", "(", "k", ",", "v", ")", "\n", "\n", "", "", "", "outZip", ".", "close", "(", ")", "\n", "\n", "", "if", "show_result", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "\"Calculated!\"", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "json", ".", "dumps", "(", "resDict", "[", "'method'", "]", ")", ")", "\n", "\n", "", "return", "resDict", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.main_validation": [[347, 366], ["dict", "default_evaluation_params_fn", "validate_data_fn", "print", "sys.exit", "list", "default_evaluation_params_fn.update", "print", "sys.exit", "s[].split", "dict.keys", "str", "isinstance", "json.loads"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update"], ["", "def", "main_validation", "(", "default_evaluation_params_fn", ",", "validate_data_fn", ")", ":", "\n", "    ", "\"\"\"\n    This process validates a method\n    Params:\n    default_evaluation_params_fn: points to a function that returns a dictionary with the default parameters used for the evaluation\n    validate_data_fn: points to a method that validates the corrct format of the submission\n    \"\"\"", "\n", "try", ":", "\n", "        ", "p", "=", "dict", "(", "[", "s", "[", "1", ":", "]", ".", "split", "(", "'='", ")", "for", "s", "in", "sys", ".", "argv", "[", "1", ":", "]", "]", ")", "\n", "evalParams", "=", "default_evaluation_params_fn", "(", ")", "\n", "if", "'p'", "in", "list", "(", "p", ".", "keys", "(", ")", ")", ":", "\n", "            ", "evalParams", ".", "update", "(", "p", "[", "'p'", "]", "if", "isinstance", "(", "p", "[", "'p'", "]", ",", "dict", ")", "else", "json", ".", "loads", "(", "p", "[", "'p'", "]", "[", "1", ":", "-", "1", "]", ")", ")", "\n", "\n", "", "validate_data_fn", "(", "p", "[", "'g'", "]", ",", "p", "[", "'s'", "]", ",", "evalParams", ")", "\n", "print", "(", "'SUCCESS'", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "str", "(", "e", ")", ")", "\n", "sys", ".", "exit", "(", "101", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.script.evaluation_imports": [[9, 16], ["None"], "function", ["None"], ["def", "evaluation_imports", "(", ")", ":", "\n", "    ", "\"\"\"\n    evaluation_imports: Dictionary ( key = module name , value = alias  )  with python modules used in the evaluation. \n    \"\"\"", "\n", "return", "{", "\n", "'Polygon'", ":", "'plg'", ",", "\n", "'numpy'", ":", "'np'", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.script.default_evaluation_params": [[18, 31], ["None"], "function", ["None"], ["", "def", "default_evaluation_params", "(", ")", ":", "\n", "    ", "\"\"\"\n    default_evaluation_params: Default parameters to use for the validation and evaluation.\n    \"\"\"", "\n", "return", "{", "\n", "'IOU_CONSTRAINT'", ":", "0.5", ",", "\n", "'AREA_PRECISION_CONSTRAINT'", ":", "0.5", ",", "\n", "'GT_SAMPLE_NAME_2_ID'", ":", "'gt_img_([0-9]+).txt'", ",", "\n", "'DET_SAMPLE_NAME_2_ID'", ":", "'res_img_([0-9]+).txt'", ",", "\n", "'LTRB'", ":", "False", ",", "#LTRB:2points(left,top,right,bottom) or 4 points(x1,y1,x2,y2,x3,y3,x4,y4)", "\n", "'CRLF'", ":", "False", ",", "# Lines are delimited by Windows CRLF format", "\n", "'CONFIDENCES'", ":", "False", ",", "#Detections must include confidence value. AP will be calculated", "\n", "'PER_SAMPLE_RESULTS'", ":", "True", "#Generate per sample results and produce data for visualization", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.script.validate_data": [[33, 53], ["rrc_evaluation_funcs.load_zip_file", "rrc_evaluation_funcs.load_zip_file", "rrc_evaluation_funcs.validate_lines_in_file", "rrc_evaluation_funcs.validate_lines_in_file", "Exception"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.load_zip_file", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.load_zip_file", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.validate_lines_in_file", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.validate_lines_in_file"], ["", "def", "validate_data", "(", "gtFilePath", ",", "submFilePath", ",", "evaluationParams", ")", ":", "\n", "    ", "\"\"\"\n    Method validate_data: validates that all files in the results folder are correct (have the correct name contents).\n                            Validates also that there are no missing files in the folder.\n                            If some error detected, the method raises the error\n    \"\"\"", "\n", "gt", "=", "rrc_evaluation_funcs", ".", "load_zip_file", "(", "gtFilePath", ",", "evaluationParams", "[", "'GT_SAMPLE_NAME_2_ID'", "]", ")", "\n", "\n", "subm", "=", "rrc_evaluation_funcs", ".", "load_zip_file", "(", "submFilePath", ",", "evaluationParams", "[", "'DET_SAMPLE_NAME_2_ID'", "]", ",", "True", ")", "\n", "\n", "#Validate format of GroundTruth", "\n", "for", "k", "in", "gt", ":", "\n", "        ", "rrc_evaluation_funcs", ".", "validate_lines_in_file", "(", "k", ",", "gt", "[", "k", "]", ",", "evaluationParams", "[", "'CRLF'", "]", ",", "evaluationParams", "[", "'LTRB'", "]", ",", "True", ")", "\n", "\n", "#Validate format of results", "\n", "", "for", "k", "in", "subm", ":", "\n", "        ", "if", "(", "k", "in", "gt", ")", "==", "False", ":", "\n", "            ", "raise", "Exception", "(", "\"The sample %s not present in GT\"", "%", "k", ")", "\n", "\n", "", "rrc_evaluation_funcs", ".", "validate_lines_in_file", "(", "k", ",", "subm", "[", "k", "]", ",", "evaluationParams", "[", "'CRLF'", "]", ",", "evaluationParams", "[", "'LTRB'", "]", ",", "False", ",", "evaluationParams", "[", "'CONFIDENCES'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.script.evaluate_method": [[55, 312], ["evaluation_imports().items", "collections.namedtuple", "rrc_evaluation_funcs.load_zip_file", "rrc_evaluation_funcs.load_zip_file", "importlib.import_module", "np.empty", "int", "int", "int", "int", "int", "int", "int", "int", "plg.Polygon", "np.empty", "int", "int", "int", "int", "int", "int", "int", "int", "plg.Polygon", "pD.area", "pG.area", "pInt.area", "rrc_evaluation_funcs.decode_utf8", "np.empty", "rrc_evaluation_funcs.get_tl_line_values_from_file_contents", "range", "script.evaluate_method.compute_ap"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.load_zip_file", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.load_zip_file", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.decode_utf8", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.get_tl_line_values_from_file_contents"], ["", "", "def", "evaluate_method", "(", "gtFilePath", ",", "submFilePath", ",", "evaluationParams", ")", ":", "\n", "    ", "\"\"\"\n    Method evaluate_method: evaluate method and returns the results\n        Results. Dictionary with the following values:\n        - method (required)  Global method metrics. Ex: { 'Precision':0.8,'Recall':0.9 }\n        - samples (optional) Per sample metrics. Ex: {'sample1' : { 'Precision':0.8,'Recall':0.9 } , 'sample2' : { 'Precision':0.8,'Recall':0.9 }\n    \"\"\"", "\n", "\n", "for", "module", ",", "alias", "in", "evaluation_imports", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "globals", "(", ")", "[", "alias", "]", "=", "importlib", ".", "import_module", "(", "module", ")", "\n", "\n", "", "def", "polygon_from_points", "(", "points", ")", ":", "\n", "        ", "\"\"\"\n        Returns a Polygon object to use with the Polygon2 class from a list of 8 points: x1,y1,x2,y2,x3,y3,x4,y4\n        \"\"\"", "\n", "resBoxes", "=", "np", ".", "empty", "(", "[", "1", ",", "8", "]", ",", "dtype", "=", "'int32'", ")", "\n", "resBoxes", "[", "0", ",", "0", "]", "=", "int", "(", "points", "[", "0", "]", ")", "\n", "resBoxes", "[", "0", ",", "4", "]", "=", "int", "(", "points", "[", "1", "]", ")", "\n", "resBoxes", "[", "0", ",", "1", "]", "=", "int", "(", "points", "[", "2", "]", ")", "\n", "resBoxes", "[", "0", ",", "5", "]", "=", "int", "(", "points", "[", "3", "]", ")", "\n", "resBoxes", "[", "0", ",", "2", "]", "=", "int", "(", "points", "[", "4", "]", ")", "\n", "resBoxes", "[", "0", ",", "6", "]", "=", "int", "(", "points", "[", "5", "]", ")", "\n", "resBoxes", "[", "0", ",", "3", "]", "=", "int", "(", "points", "[", "6", "]", ")", "\n", "resBoxes", "[", "0", ",", "7", "]", "=", "int", "(", "points", "[", "7", "]", ")", "\n", "pointMat", "=", "resBoxes", "[", "0", "]", ".", "reshape", "(", "[", "2", ",", "4", "]", ")", ".", "T", "\n", "return", "plg", ".", "Polygon", "(", "pointMat", ")", "\n", "\n", "", "def", "rectangle_to_polygon", "(", "rect", ")", ":", "\n", "        ", "resBoxes", "=", "np", ".", "empty", "(", "[", "1", ",", "8", "]", ",", "dtype", "=", "'int32'", ")", "\n", "resBoxes", "[", "0", ",", "0", "]", "=", "int", "(", "rect", ".", "xmin", ")", "\n", "resBoxes", "[", "0", ",", "4", "]", "=", "int", "(", "rect", ".", "ymax", ")", "\n", "resBoxes", "[", "0", ",", "1", "]", "=", "int", "(", "rect", ".", "xmin", ")", "\n", "resBoxes", "[", "0", ",", "5", "]", "=", "int", "(", "rect", ".", "ymin", ")", "\n", "resBoxes", "[", "0", ",", "2", "]", "=", "int", "(", "rect", ".", "xmax", ")", "\n", "resBoxes", "[", "0", ",", "6", "]", "=", "int", "(", "rect", ".", "ymin", ")", "\n", "resBoxes", "[", "0", ",", "3", "]", "=", "int", "(", "rect", ".", "xmax", ")", "\n", "resBoxes", "[", "0", ",", "7", "]", "=", "int", "(", "rect", ".", "ymax", ")", "\n", "\n", "pointMat", "=", "resBoxes", "[", "0", "]", ".", "reshape", "(", "[", "2", ",", "4", "]", ")", ".", "T", "\n", "\n", "return", "plg", ".", "Polygon", "(", "pointMat", ")", "\n", "\n", "", "def", "rectangle_to_points", "(", "rect", ")", ":", "\n", "        ", "points", "=", "[", "int", "(", "rect", ".", "xmin", ")", ",", "int", "(", "rect", ".", "ymax", ")", ",", "int", "(", "rect", ".", "xmax", ")", ",", "int", "(", "rect", ".", "ymax", ")", ",", "int", "(", "rect", ".", "xmax", ")", ",", "int", "(", "rect", ".", "ymin", ")", ",", "int", "(", "rect", ".", "xmin", ")", ",", "int", "(", "rect", ".", "ymin", ")", "]", "\n", "return", "points", "\n", "\n", "", "def", "get_union", "(", "pD", ",", "pG", ")", ":", "\n", "        ", "areaA", "=", "pD", ".", "area", "(", ")", ";", "\n", "areaB", "=", "pG", ".", "area", "(", ")", ";", "\n", "return", "areaA", "+", "areaB", "-", "get_intersection", "(", "pD", ",", "pG", ")", ";", "\n", "\n", "", "def", "get_intersection_over_union", "(", "pD", ",", "pG", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "get_intersection", "(", "pD", ",", "pG", ")", "/", "get_union", "(", "pD", ",", "pG", ")", ";", "\n", "", "except", ":", "\n", "            ", "return", "0", "\n", "\n", "", "", "def", "get_intersection", "(", "pD", ",", "pG", ")", ":", "\n", "        ", "pInt", "=", "pD", "&", "pG", "\n", "if", "len", "(", "pInt", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "return", "pInt", ".", "area", "(", ")", "\n", "\n", "", "def", "compute_ap", "(", "confList", ",", "matchList", ",", "numGtCare", ")", ":", "\n", "        ", "correct", "=", "0", "\n", "AP", "=", "0", "\n", "if", "len", "(", "confList", ")", ">", "0", ":", "\n", "            ", "confList", "=", "np", ".", "array", "(", "confList", ")", "\n", "matchList", "=", "np", ".", "array", "(", "matchList", ")", "\n", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "confList", ")", "\n", "confList", "=", "confList", "[", "sorted_ind", "]", "\n", "matchList", "=", "matchList", "[", "sorted_ind", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "confList", ")", ")", ":", "\n", "                ", "match", "=", "matchList", "[", "n", "]", "\n", "if", "match", ":", "\n", "                    ", "correct", "+=", "1", "\n", "AP", "+=", "float", "(", "correct", ")", "/", "(", "n", "+", "1", ")", "\n", "\n", "", "", "if", "numGtCare", ">", "0", ":", "\n", "                ", "AP", "/=", "numGtCare", "\n", "\n", "", "", "return", "AP", "\n", "\n", "", "perSampleMetrics", "=", "{", "}", "\n", "\n", "matchedSum", "=", "0", "\n", "\n", "Rectangle", "=", "namedtuple", "(", "'Rectangle'", ",", "'xmin ymin xmax ymax'", ")", "\n", "\n", "gt", "=", "rrc_evaluation_funcs", ".", "load_zip_file", "(", "gtFilePath", ",", "evaluationParams", "[", "'GT_SAMPLE_NAME_2_ID'", "]", ")", "\n", "subm", "=", "rrc_evaluation_funcs", ".", "load_zip_file", "(", "submFilePath", ",", "evaluationParams", "[", "'DET_SAMPLE_NAME_2_ID'", "]", ",", "True", ")", "\n", "\n", "numGlobalCareGt", "=", "0", ";", "\n", "numGlobalCareDet", "=", "0", ";", "\n", "\n", "arrGlobalConfidences", "=", "[", "]", ";", "\n", "arrGlobalMatches", "=", "[", "]", ";", "\n", "\n", "for", "resFile", "in", "gt", ":", "\n", "\n", "        ", "gtFile", "=", "rrc_evaluation_funcs", ".", "decode_utf8", "(", "gt", "[", "resFile", "]", ")", "\n", "recall", "=", "0", "\n", "precision", "=", "0", "\n", "hmean", "=", "0", "\n", "\n", "detMatched", "=", "0", "\n", "\n", "iouMat", "=", "np", ".", "empty", "(", "[", "1", ",", "1", "]", ")", "\n", "\n", "gtPols", "=", "[", "]", "\n", "detPols", "=", "[", "]", "\n", "\n", "gtPolPoints", "=", "[", "]", "\n", "detPolPoints", "=", "[", "]", "\n", "\n", "#Array of Ground Truth Polygons' keys marked as don't Care", "\n", "gtDontCarePolsNum", "=", "[", "]", "\n", "#Array of Detected Polygons' matched with a don't Care GT", "\n", "detDontCarePolsNum", "=", "[", "]", "\n", "\n", "pairs", "=", "[", "]", "\n", "detMatchedNums", "=", "[", "]", "\n", "\n", "arrSampleConfidences", "=", "[", "]", ";", "\n", "arrSampleMatch", "=", "[", "]", ";", "\n", "sampleAP", "=", "0", ";", "\n", "\n", "evaluationLog", "=", "\"\"", "\n", "\n", "pointsList", ",", "_", ",", "transcriptionsList", "=", "rrc_evaluation_funcs", ".", "get_tl_line_values_from_file_contents", "(", "gtFile", ",", "evaluationParams", "[", "'CRLF'", "]", ",", "evaluationParams", "[", "'LTRB'", "]", ",", "True", ",", "False", ")", "\n", "for", "n", "in", "range", "(", "len", "(", "pointsList", ")", ")", ":", "\n", "            ", "points", "=", "pointsList", "[", "n", "]", "\n", "transcription", "=", "transcriptionsList", "[", "n", "]", "\n", "dontCare", "=", "transcription", "==", "\"###\"", "\n", "if", "evaluationParams", "[", "'LTRB'", "]", ":", "\n", "                ", "gtRect", "=", "Rectangle", "(", "*", "points", ")", "\n", "gtPol", "=", "rectangle_to_polygon", "(", "gtRect", ")", "\n", "", "else", ":", "\n", "                ", "gtPol", "=", "polygon_from_points", "(", "points", ")", "\n", "", "gtPols", ".", "append", "(", "gtPol", ")", "\n", "gtPolPoints", ".", "append", "(", "points", ")", "\n", "if", "dontCare", ":", "\n", "                ", "gtDontCarePolsNum", ".", "append", "(", "len", "(", "gtPols", ")", "-", "1", ")", "\n", "\n", "", "", "evaluationLog", "+=", "\"GT polygons: \"", "+", "str", "(", "len", "(", "gtPols", ")", ")", "+", "(", "\" (\"", "+", "str", "(", "len", "(", "gtDontCarePolsNum", ")", ")", "+", "\" don't care)\\n\"", "if", "len", "(", "gtDontCarePolsNum", ")", ">", "0", "else", "\"\\n\"", ")", "\n", "\n", "if", "resFile", "in", "subm", ":", "\n", "\n", "            ", "detFile", "=", "rrc_evaluation_funcs", ".", "decode_utf8", "(", "subm", "[", "resFile", "]", ")", "\n", "\n", "pointsList", ",", "confidencesList", ",", "_", "=", "rrc_evaluation_funcs", ".", "get_tl_line_values_from_file_contents", "(", "detFile", ",", "evaluationParams", "[", "'CRLF'", "]", ",", "evaluationParams", "[", "'LTRB'", "]", ",", "False", ",", "evaluationParams", "[", "'CONFIDENCES'", "]", ")", "\n", "for", "n", "in", "range", "(", "len", "(", "pointsList", ")", ")", ":", "\n", "                ", "points", "=", "pointsList", "[", "n", "]", "\n", "\n", "if", "evaluationParams", "[", "'LTRB'", "]", ":", "\n", "                    ", "detRect", "=", "Rectangle", "(", "*", "points", ")", "\n", "detPol", "=", "rectangle_to_polygon", "(", "detRect", ")", "\n", "", "else", ":", "\n", "                    ", "detPol", "=", "polygon_from_points", "(", "points", ")", "\n", "", "detPols", ".", "append", "(", "detPol", ")", "\n", "detPolPoints", ".", "append", "(", "points", ")", "\n", "if", "len", "(", "gtDontCarePolsNum", ")", ">", "0", ":", "\n", "                    ", "for", "dontCarePol", "in", "gtDontCarePolsNum", ":", "\n", "                        ", "dontCarePol", "=", "gtPols", "[", "dontCarePol", "]", "\n", "intersected_area", "=", "get_intersection", "(", "dontCarePol", ",", "detPol", ")", "\n", "pdDimensions", "=", "detPol", ".", "area", "(", ")", "\n", "precision", "=", "0", "if", "pdDimensions", "==", "0", "else", "intersected_area", "/", "pdDimensions", "\n", "if", "(", "precision", ">", "evaluationParams", "[", "'AREA_PRECISION_CONSTRAINT'", "]", ")", ":", "\n", "                            ", "detDontCarePolsNum", ".", "append", "(", "len", "(", "detPols", ")", "-", "1", ")", "\n", "break", "\n", "\n", "", "", "", "", "evaluationLog", "+=", "\"DET polygons: \"", "+", "str", "(", "len", "(", "detPols", ")", ")", "+", "(", "\" (\"", "+", "str", "(", "len", "(", "detDontCarePolsNum", ")", ")", "+", "\" don't care)\\n\"", "if", "len", "(", "detDontCarePolsNum", ")", ">", "0", "else", "\"\\n\"", ")", "\n", "\n", "if", "len", "(", "gtPols", ")", ">", "0", "and", "len", "(", "detPols", ")", ">", "0", ":", "\n", "#Calculate IoU and precision matrixs", "\n", "                ", "outputShape", "=", "[", "len", "(", "gtPols", ")", ",", "len", "(", "detPols", ")", "]", "\n", "iouMat", "=", "np", ".", "empty", "(", "outputShape", ")", "\n", "gtRectMat", "=", "np", ".", "zeros", "(", "len", "(", "gtPols", ")", ",", "np", ".", "int8", ")", "\n", "detRectMat", "=", "np", ".", "zeros", "(", "len", "(", "detPols", ")", ",", "np", ".", "int8", ")", "\n", "for", "gtNum", "in", "range", "(", "len", "(", "gtPols", ")", ")", ":", "\n", "                    ", "for", "detNum", "in", "range", "(", "len", "(", "detPols", ")", ")", ":", "\n", "                        ", "pG", "=", "gtPols", "[", "gtNum", "]", "\n", "pD", "=", "detPols", "[", "detNum", "]", "\n", "iouMat", "[", "gtNum", ",", "detNum", "]", "=", "get_intersection_over_union", "(", "pD", ",", "pG", ")", "\n", "\n", "", "", "for", "gtNum", "in", "range", "(", "len", "(", "gtPols", ")", ")", ":", "\n", "                    ", "for", "detNum", "in", "range", "(", "len", "(", "detPols", ")", ")", ":", "\n", "                        ", "if", "gtRectMat", "[", "gtNum", "]", "==", "0", "and", "detRectMat", "[", "detNum", "]", "==", "0", "and", "gtNum", "not", "in", "gtDontCarePolsNum", "and", "detNum", "not", "in", "detDontCarePolsNum", ":", "\n", "                            ", "if", "iouMat", "[", "gtNum", ",", "detNum", "]", ">", "evaluationParams", "[", "'IOU_CONSTRAINT'", "]", ":", "\n", "                                ", "gtRectMat", "[", "gtNum", "]", "=", "1", "\n", "detRectMat", "[", "detNum", "]", "=", "1", "\n", "detMatched", "+=", "1", "\n", "pairs", ".", "append", "(", "{", "'gt'", ":", "gtNum", ",", "'det'", ":", "detNum", "}", ")", "\n", "detMatchedNums", ".", "append", "(", "detNum", ")", "\n", "evaluationLog", "+=", "\"Match GT #\"", "+", "str", "(", "gtNum", ")", "+", "\" with Det #\"", "+", "str", "(", "detNum", ")", "+", "\"\\n\"", "\n", "\n", "", "", "", "", "", "if", "evaluationParams", "[", "'CONFIDENCES'", "]", ":", "\n", "                ", "for", "detNum", "in", "range", "(", "len", "(", "detPols", ")", ")", ":", "\n", "                    ", "if", "detNum", "not", "in", "detDontCarePolsNum", ":", "\n", "#we exclude the don't care detections", "\n", "                        ", "match", "=", "detNum", "in", "detMatchedNums", "\n", "\n", "arrSampleConfidences", ".", "append", "(", "confidencesList", "[", "detNum", "]", ")", "\n", "arrSampleMatch", ".", "append", "(", "match", ")", "\n", "\n", "arrGlobalConfidences", ".", "append", "(", "confidencesList", "[", "detNum", "]", ")", ";", "\n", "arrGlobalMatches", ".", "append", "(", "match", ")", ";", "\n", "\n", "", "", "", "", "numGtCare", "=", "(", "len", "(", "gtPols", ")", "-", "len", "(", "gtDontCarePolsNum", ")", ")", "\n", "numDetCare", "=", "(", "len", "(", "detPols", ")", "-", "len", "(", "detDontCarePolsNum", ")", ")", "\n", "if", "numGtCare", "==", "0", ":", "\n", "            ", "recall", "=", "float", "(", "1", ")", "\n", "precision", "=", "float", "(", "0", ")", "if", "numDetCare", ">", "0", "else", "float", "(", "1", ")", "\n", "sampleAP", "=", "precision", "\n", "", "else", ":", "\n", "            ", "recall", "=", "float", "(", "detMatched", ")", "/", "numGtCare", "\n", "precision", "=", "0", "if", "numDetCare", "==", "0", "else", "float", "(", "detMatched", ")", "/", "numDetCare", "\n", "if", "evaluationParams", "[", "'CONFIDENCES'", "]", "and", "evaluationParams", "[", "'PER_SAMPLE_RESULTS'", "]", ":", "\n", "                ", "sampleAP", "=", "compute_ap", "(", "arrSampleConfidences", ",", "arrSampleMatch", ",", "numGtCare", ")", "\n", "\n", "", "", "hmean", "=", "0", "if", "(", "precision", "+", "recall", ")", "==", "0", "else", "2.0", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "\n", "matchedSum", "+=", "detMatched", "\n", "numGlobalCareGt", "+=", "numGtCare", "\n", "numGlobalCareDet", "+=", "numDetCare", "\n", "\n", "if", "evaluationParams", "[", "'PER_SAMPLE_RESULTS'", "]", ":", "\n", "            ", "perSampleMetrics", "[", "resFile", "]", "=", "{", "\n", "'precision'", ":", "precision", ",", "\n", "'recall'", ":", "recall", ",", "\n", "'hmean'", ":", "hmean", ",", "\n", "'pairs'", ":", "pairs", ",", "\n", "'AP'", ":", "sampleAP", ",", "\n", "'iouMat'", ":", "[", "]", "if", "len", "(", "detPols", ")", ">", "100", "else", "iouMat", ".", "tolist", "(", ")", ",", "\n", "'gtPolPoints'", ":", "gtPolPoints", ",", "\n", "'detPolPoints'", ":", "detPolPoints", ",", "\n", "'gtDontCare'", ":", "gtDontCarePolsNum", ",", "\n", "'detDontCare'", ":", "detDontCarePolsNum", ",", "\n", "'evaluationParams'", ":", "evaluationParams", ",", "\n", "'evaluationLog'", ":", "evaluationLog", "\n", "}", "\n", "\n", "# Compute MAP and MAR", "\n", "", "", "AP", "=", "0", "\n", "if", "evaluationParams", "[", "'CONFIDENCES'", "]", ":", "\n", "        ", "AP", "=", "compute_ap", "(", "arrGlobalConfidences", ",", "arrGlobalMatches", ",", "numGlobalCareGt", ")", "\n", "\n", "", "methodRecall", "=", "0", "if", "numGlobalCareGt", "==", "0", "else", "float", "(", "matchedSum", ")", "/", "numGlobalCareGt", "\n", "methodPrecision", "=", "0", "if", "numGlobalCareDet", "==", "0", "else", "float", "(", "matchedSum", ")", "/", "numGlobalCareDet", "\n", "methodHmean", "=", "0", "if", "methodRecall", "+", "methodPrecision", "==", "0", "else", "2", "*", "methodRecall", "*", "methodPrecision", "/", "(", "methodRecall", "+", "methodPrecision", ")", "\n", "\n", "methodMetrics", "=", "{", "'precision'", ":", "methodPrecision", ",", "'recall'", ":", "methodRecall", ",", "'hmean'", ":", "methodHmean", ",", "'AP'", ":", "AP", "}", "\n", "\n", "resDict", "=", "{", "'calculated'", ":", "True", ",", "'Message'", ":", "''", ",", "'method'", ":", "methodMetrics", ",", "'per_sample'", ":", "perSampleMetrics", "}", "\n", "\n", "\n", "return", "resDict", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.script.eval_s": [[314, 316], ["rrc_evaluation_funcs.main_evaluation"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.main_evaluation"], ["", "def", "eval_s", "(", "para", ")", ":", "\n", "    ", "return", "rrc_evaluation_funcs", ".", "main_evaluation", "(", "para", ",", "default_evaluation_params", ",", "validate_data", ",", "evaluate_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.script.rects_evaluation_params": [[317, 330], ["None"], "function", ["None"], ["", "def", "rects_evaluation_params", "(", ")", ":", "\n", "    ", "\"\"\"\n    default_evaluation_params: Default parameters to use for the validation and evaluation.\n    \"\"\"", "\n", "return", "{", "\n", "'IOU_CONSTRAINT'", ":", "0.5", ",", "\n", "'AREA_PRECISION_CONSTRAINT'", ":", "0.5", ",", "\n", "'GT_SAMPLE_NAME_2_ID'", ":", "'train_ReCTS_([0-9]+).txt'", ",", "\n", "'DET_SAMPLE_NAME_2_ID'", ":", "'res_train_ReCTS_([0-9]+).txt'", ",", "\n", "'LTRB'", ":", "False", ",", "#LTRB:2points(left,top,right,bottom) or 4 points(x1,y1,x2,y2,x3,y3,x4,y4)", "\n", "'CRLF'", ":", "False", ",", "# Lines are delimited by Windows CRLF format", "\n", "'CONFIDENCES'", ":", "False", ",", "#Detections must include confidence value. AP will be calculated", "\n", "'PER_SAMPLE_RESULTS'", ":", "True", "#Generate per sample results and produce data for visualization", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.script.eval_rects": [[332, 334], ["rrc_evaluation_funcs.main_evaluation"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.ic15_scripts.rrc_evaluation_funcs.main_evaluation"], ["", "def", "eval_rects", "(", "para", ")", ":", "\n", "    ", "return", "rrc_evaluation_funcs", ".", "main_evaluation", "(", "para", ",", "rects_evaluation_params", ",", "validate_data", ",", "evaluate_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.cocotext.cocotext_retrieval_evaluation": [[21, 35], ["logging.getLogger", "logging.getLogger.info", "cocotext.evaluate_box_proposals"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.evaluate_box_proposals"], ["self", ".", "difficult_label", "=", "'###'", "\n", "self", ".", "all_texts", "=", "[", "]", "\n", "self", ".", "parse_data", "(", "path", ")", "\n", "\n", "", "def", "parse_data", "(", "self", ",", "path", ")", ":", "\n", "# dataFile = os.path.join(path,\"data.mat\")", "\n", "        ", "gtPath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "\"gts\"", ")", "\n", "gtFiles", "=", "os", ".", "listdir", "(", "gtPath", ")", "\n", "str_queries", "=", "[", "word", ".", "strip", "(", ")", "for", "word", "in", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'queries.txt'", ")", ",", "'r'", ")", ".", "readlines", "(", ")", "]", "\n", "y_trues", "=", "np", ".", "zeros", "(", "[", "len", "(", "str_queries", ")", ",", "len", "(", "gtFiles", ")", "]", ")", "\n", "for", "i", ",", "gtFile", "in", "enumerate", "(", "gtFiles", ")", ":", "\n", "            ", "gt", "=", "os", ".", "path", ".", "join", "(", "gtPath", ",", "gtFile", ")", "\n", "words", "=", "[", "filter_word", "(", "word", ".", "strip", "(", ")", ")", ".", "lower", "(", ")", "for", "word", "in", "open", "(", "gt", ",", "'r'", ")", ".", "readlines", "(", ")", "]", "\n", "for", "j", ",", "word", "in", "enumerate", "(", "words", ")", ":", "\n", "                ", "if", "word", "not", "in", "str_queries", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.cocotext.filter_inner_box": [[35, 65], ["polys.reshape.reshape", "polys.reshape.mean", "numpy.zeros", "enumerate", "numpy.where", "polys.reshape.reshape", "cv2.pointPolygonTest", "numpy.where", "poly.astype", "min", "min", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["                ", "if", "word", "not", "in", "str_queries", ":", "\n", "                    ", "continue", "\n", "", "y_trues", "[", "str_queries", ".", "index", "(", "word", ")", ",", "i", "]", "=", "1", "\n", "\n", "\n", "", "", "self", ".", "img_lists", "=", "[", "os", ".", "path", ".", "join", "(", "path", ",", "\"images\"", ",", "imgName", ".", "replace", "(", "'.txt'", ",", "'.jpg'", ")", ")", "for", "imgName", "in", "gtFiles", "]", "\n", "# print(gtFiles[0],self.img_lists[0])", "\n", "self", ".", "str_queries", "=", "str_queries", "\n", "self", ".", "y_trues", "=", "y_trues", "\n", "\n", "\n", "", "def", "len", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_lists", ")", "\n", "", "def", "getitem", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "img_lists", "[", "index", "]", ",", "self", ".", "str_queries", ",", "self", ".", "y_trues", "\n", "", "", "NUM_POINT", "=", "7", "\n", "class", "COCOTextDataset", "(", "torch", ".", "utils", ".", "data", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "use_difficult", "=", "False", ",", "transforms", "=", "None", ",", "is_train", "=", "True", ",", "augment", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "is_train", ":", "\n", "            ", "self", ".", "augment", "=", "eval", "(", "augment", ")", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "augment", "=", "TestAugmentation", "(", "longer_side", "=", "1280", ")", "\n", "", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "dataset", "=", "COCOText", "(", "data_dir", ",", "is_train", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "# print(\"get item\")", "\n", "            ", "path", ",", "queries", ",", "trues", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.cocotext.write_to_file": [[65, 77], ["enumerate", "lines.append", "open", "f.write"], "function", ["None"], ["            ", "path", ",", "queries", ",", "trues", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "img", "=", "imread", "(", "path", ")", "\n", "# print(polys.shape, polys)", "\n", "assert", "len", "(", "polys", ")", "==", "len", "(", "texts", ")", ",", "print", "(", "polys", ",", "texts", ")", "\n", "aug_img", ",", "polys", ",", "tags", "=", "self", ".", "augment", "(", "img", ",", "None", ",", "None", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "boxlist", "=", "BoxList", "(", "[", "]", ",", "image", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "'retrieval_trues'", ",", "trues", ")", "\n", "boxlist", ".", "add_field", "(", "'texts'", ",", "queries", ")", "\n", "# boxlist.add_field(\"y_trues\",trues)", "\n", "if", "self", ".", "transforms", ":", "\n", "                ", "image", ",", "boxlist", "=", "self", ".", "transforms", "(", "image", ",", "boxlist", ")", "\n", "# return the image, the boxlist and the idx in your dataset", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.cocotext.show_detection": [[78, 87], ["os.path.join", "cv2.imread", "cv2.drawContours", "cv2.imwrite", "os.path.basename", "boxes.astype"], "function", ["None"], ["", "return", "image", ",", "boxlist", ",", "idx", "\n", "", "else", ":", "\n", "            ", "path", ",", "queries", ",", "trues", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "# print(polys)", "\n", "img", "=", "imread", "(", "path", ",", "mode", "=", "\"RGB\"", ")", "\n", "ori_h", ",", "ori_w", ",", "_", "=", "img", ".", "shape", "\n", "aug_img", ",", "polys", ",", "tags", "=", "self", ".", "augment", "(", "img", ",", "None", ",", "None", ")", "\n", "test_h", ",", "test_w", ",", "_", "=", "aug_img", ".", "shape", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.cocotext.meanAP": [[89, 95], ["zip", "sklearn.metrics.average_precision_score", "APs.append"], "function", ["None"], ["boxlist", ".", "add_field", "(", "'retrieval_trues'", ",", "trues", ")", "\n", "boxlist", ".", "add_field", "(", "'texts'", ",", "np", ".", "array", "(", "queries", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'scale'", ",", "np", ".", "array", "(", "[", "ori_w", "/", "test_w", ",", "ori_h", "/", "test_h", "]", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'path'", ",", "np", ".", "array", "(", "path", ")", ")", "\n", "boxlist", ".", "add_field", "(", "\"y_trues\"", ",", "trues", ")", "\n", "boxlist", ".", "add_field", "(", "\"det_thred\"", ",", "0.2", ")", "\n", "# boxlist.add_field('test_texts',self.dataset.all_texts)", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.cocotext.re_ranking": [[95, 123], ["numpy.zeros", "enumerate", "cocotext.meanAP", "cocotext.meanAP", "retrieval_texts_embedding.items", "enumerate", "len", "len", "prediction.get_field", "retrieval_texts_embedding.keys", "prediction.get_field.size", "embedding.mm", "embedding.mm.max", "[].data.cpu().numpy", "prediction.get_field.t", "score.data.cpu().numpy", "box_idx.data.cpu().numpy", "[].data.cpu", "score.data.cpu", "box_idx.data.cpu", "prediction.get_field"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["# boxlist.add_field('test_texts',self.dataset.all_texts)", "\n", "if", "self", ".", "transforms", ":", "\n", "                ", "image", ",", "boxlist", "=", "self", ".", "transforms", "(", "image", ",", "boxlist", ")", "\n", "# return the image, the boxlist and the idx in your dataset", "\n", "", "return", "image", ",", "boxlist", ",", "idx", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "len", "(", ")", "\n", "\n", "", "def", "expand_point", "(", "self", ",", "poly", ")", ":", "\n", "        ", "poly", "=", "np", ".", "array", "(", "poly", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "up_x", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "0", "]", ",", "poly", "[", "1", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "up_y", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "1", "]", ",", "poly", "[", "1", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "up", "=", "np", ".", "stack", "(", "(", "up_x", ",", "up_y", ")", ",", "axis", "=", "1", ")", "\n", "do_x", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "0", "]", ",", "poly", "[", "3", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "do_y", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "1", "]", ",", "poly", "[", "3", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "do", "=", "np", ".", "stack", "(", "(", "do_x", ",", "do_y", ")", ",", "axis", "=", "1", ")", "\n", "poly_expand", "=", "np", ".", "concatenate", "(", "(", "up", ",", "do", ")", ",", "axis", "=", "0", ")", "\n", "return", "poly_expand", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "", "def", "get_img_info", "(", "self", ",", "idx", ")", ":", "\n", "# print(\"get info\")", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "            ", "return", "{", "\"path\"", ":", "\"none\"", ",", "\"height\"", ":", "768", ",", "\"width\"", ":", "1280", "}", "\n", "", "path", ",", "_", ",", "_", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "size", "=", "Image", ".", "open", "(", "path", ")", ".", "size", "\n", "# size = [1280,768]", "\n", "return", "{", "\"path\"", ":", "path", ",", "\"height\"", ":", "size", "[", "1", "]", ",", "\"width\"", ":", "size", "[", "0", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.cocotext.evaluate_box_proposals": [[123, 173], ["enumerate", "torch.stack().data.cpu().numpy", "cocotext.meanAP", "prediction.bbox.data.cpu().numpy", "prediction.get_field", "prediction.get_field", "prediction.get_field.mm", "torch.stack().data.cpu().numpy.append", "sum", "len", "prediction.fields", "prediction.get_field", "prediction.get_field.size", "torch.stack().data.cpu().numpy.append", "prediction.get_field.t", "torch.stack().data.cpu", "prediction.bbox.data.cpu", "torch.zeros().to", "words_embedding_nor.mm.max", "torch.zeros", "torch.stack", "prediction.get_field.size"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to"], ["\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "data_dir", "=", "\"/root/datasets/ic15_end2end\"", "\n", "ic15_dataset", "=", "IC15", "(", "data_dir", ")", "\n", "image", ",", "boxlist", ",", "idx", "=", "ic15_dataset", "[", "0", "]", "\n", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.cocotext.evaluate_box_proposals1": [[174, 224], ["os.path.join", "os.path.join", "enumerate", "numpy.zeros", "numpy.zeros", "print", "enumerate", "cocotext.meanAP", "print", "prediction.get_field", "os.path.basename", "os.path.join().replace", "prediction.bbox.data.cpu().numpy", "prediction.get_field", "cocotext.write_to_file", "enumerate", "retrieval_texts_embedding.items", "enumerate", "os.path.exists", "os.makedirs", "str", "prediction.get_field.size", "prediction.get_field", "text.lower.lower", "words_embedding[].reshape", "len", "len", "len", "len", "prediction.get_field", "sum", "len", "prediction.get_field", "os.path.join", "prediction.bbox.data.cpu", "retrieval_texts_embedding.keys", "retrieval_texts_embedding.keys", "retrieval_texts_embedding.keys", "prediction.get_field.size", "[].data.cpu().numpy", "t.lower", "prediction.get_field", "[].data.cpu", "embedding.mm().max", "embedding.mm"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.write_to_file", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.svt.DynamicMaxSimilarity.__init__": [[23, 26], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["", "def", "generate_information", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "if", "self", ".", "is_training", ":", "\n", "            ", "self", ".", "datas", "=", "self", ".", "parse_xml_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'train.xml'", ")", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.svt.DynamicMaxSimilarity.sim": [[31, 37], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize.mm", "similarity.reshape.reshape.reshape", "similarity.reshape.reshape.permute", "x.view().tanh", "y.view().tanh", "torch.nn.functional.normalize.t", "x.size", "x.size", "y.size", "y.size", "x.view", "y.view", "x.size", "y.size"], "methods", ["None"], ["", "", "def", "write_to_txts", "(", "self", ",", "datas", ",", "folder", ")", ":", "\n", "        ", "for", "data", "in", "datas", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "os", ".", "path", ".", "basename", "(", "data", "[", "'path'", "]", ")", ")", ".", "replace", "(", "\".jpg\"", ",", "'.txt'", ")", "\n", "print", "(", "filename", ")", "\n", "f", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "for", "box", ",", "text", "in", "zip", "(", "data", "[", "\"xyxys\"", "]", ",", "data", "[", "\"texts\"", "]", ")", ":", "\n", "                ", "line", "=", "\"{},{},{},{},{}\\r\\n\"", ".", "format", "(", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "2", "]", ",", "box", "[", "3", "]", ",", "text", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.svt.DynamicMaxSimilarity.push_similarity": [[37, 39], ["None"], "methods", ["None"], ["                ", "line", "=", "\"{},{},{},{},{}\\r\\n\"", ".", "format", "(", "box", "[", "0", "]", ",", "box", "[", "1", "]", ",", "box", "[", "2", "]", ",", "box", "[", "3", "]", ",", "text", ")", "\n", "f", ".", "write", "(", "line", ")", "\n", "", "", "", "def", "parse_xml_file", "(", "self", ",", "gt_path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.svt.DynamicMaxSimilarity.forward": [[39, 51], ["torch.zeros().type_as", "svt.DynamicMaxSimilarity.sim", "range", "range", "torch.zeros", "torch.stack", "torch.max", "a.size", "b.size", "svt.DynamicMaxSimilarity.push_similarity", "svt.DynamicMaxSimilarity.push_similarity", "svt.DynamicMaxSimilarity.push_similarity", "max", "max", "max"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.sim", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.push_similarity", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.push_similarity", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.push_similarity"], ["", "", "", "def", "parse_xml_file", "(", "self", ",", "gt_path", ")", ":", "\n", "        ", "datas", "=", "[", "]", "\n", "tree", "=", "ElementTree", "(", ")", "\n", "tree", ".", "parse", "(", "gt_path", ")", "\n", "for", "object_", "in", "tree", ".", "findall", "(", "\"image\"", ")", ":", "\n", "            ", "image_name", "=", "object_", ".", "find", "(", "\"imageName\"", ")", ".", "text", "\n", "dict_", "=", "{", "}", "\n", "dict_", "[", "'path'", "]", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "image_name", ")", "\n", "boxes", "=", "[", "]", "\n", "texts", "=", "[", "]", "\n", "for", "text_object", "in", "object_", ".", "findall", "(", "\"taggedRectangles/taggedRectangle\"", ")", ":", "\n", "                ", "text", "=", "text_object", ".", "find", "(", "\"tag\"", ")", ".", "text", "\n", "# print(text)", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.svt.svt_retrieval_evaluation": [[51, 65], ["logging.getLogger", "logging.getLogger.info", "svt.evaluate_box_proposals"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.evaluate_box_proposals"], ["# print(text)", "\n", "rec", "=", "text_object", ".", "attrib", "\n", "# {'height': '38', 'width': '55', 'x': '645', 'y': '294'}", "\n", "x", ",", "y", ",", "h", ",", "w", "=", "int", "(", "rec", "[", "'x'", "]", ")", ",", "int", "(", "rec", "[", "'y'", "]", ")", ",", "int", "(", "rec", "[", "'height'", "]", ")", ",", "int", "(", "rec", "[", "'width'", "]", ")", "\n", "xmin", "=", "int", "(", "x", ")", "\n", "ymin", "=", "int", "(", "y", ")", "\n", "xmax", "=", "int", "(", "x", "+", "w", ")", "\n", "ymax", "=", "int", "(", "y", "+", "h", ")", "\n", "boxes", ".", "append", "(", "[", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "]", ")", "\n", "texts", ".", "append", "(", "text", ".", "lower", "(", ")", ")", "\n", "self", ".", "all_texts", ".", "append", "(", "text", ".", "lower", "(", ")", ")", "\n", "", "dict_", "[", "'xyxys'", "]", "=", "np", ".", "array", "(", "boxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dict_", "[", "'boxes'", "]", "=", "np", ".", "array", "(", "boxes", ",", "dtype", "=", "np", ".", "float32", ")", "[", ":", ",", "(", "0", ",", "1", ",", "2", ",", "1", ",", "2", ",", "3", ",", "0", ",", "3", ")", "]", ".", "reshape", "(", "[", "-", "1", ",", "4", ",", "2", "]", ")", "\n", "dict_", "[", "'texts'", "]", "=", "np", ".", "array", "(", "texts", ",", "dtype", "=", "np", ".", "str", ")", "\n", "datas", ".", "append", "(", "dict_", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.svt.filter_inner_box": [[65, 95], ["polys.reshape.reshape", "polys.reshape.mean", "numpy.zeros", "enumerate", "numpy.where", "polys.reshape.reshape", "cv2.pointPolygonTest", "numpy.where", "poly.astype", "min", "min", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["datas", ".", "append", "(", "dict_", ")", "\n", "", "self", ".", "str_queries", "=", "[", "]", "\n", "for", "text", "in", "self", ".", "all_texts", ":", "\n", "            ", "if", "text", "not", "in", "self", ".", "str_queries", ":", "\n", "                ", "self", ".", "str_queries", ".", "append", "(", "text", ")", "\n", "\n", "", "", "y_trues", "=", "np", ".", "zeros", "(", "[", "len", "(", "self", ".", "str_queries", ")", ",", "len", "(", "datas", ")", "]", ")", "\n", "# print(y_trues.shape)", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "datas", ")", ":", "\n", "            ", "for", "text", "in", "data", "[", "\"texts\"", "]", ":", "\n", "                ", "y_trues", "[", "self", ".", "str_queries", ".", "index", "(", "text", ")", ",", "idx", "]", "=", "1", "\n", "", "", "self", ".", "y_trues", "=", "y_trues", "\n", "return", "datas", "\n", "\n", "\n", "", "def", "len", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "datas", ")", "\n", "", "def", "getitem", "(", "self", ",", "index", ")", ":", "\n", "# print(self.len())", "\n", "        ", "data", "=", "self", ".", "datas", "[", "index", "]", "\n", "# print(data)", "\n", "return", "data", "[", "'path'", "]", ",", "data", "[", "'boxes'", "]", ".", "copy", "(", ")", ",", "data", "[", "'texts'", "]", ".", "copy", "(", ")", ",", "self", ".", "str_queries", "\n", "", "", "NUM_POINT", "=", "7", "\n", "class", "SVTDataset", "(", "torch", ".", "utils", ".", "data", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "use_difficult", "=", "False", ",", "transforms", "=", "None", ",", "is_train", "=", "True", ",", "augment", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "is_train", ":", "\n", "            ", "self", ".", "augment", "=", "eval", "(", "augment", ")", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "augment", "=", "TestAugmentation", "(", "longer_side", "=", "1280", ")", "\n", "# self.augment = TestAugmentation(longer_side=1024)", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.svt.write_to_file": [[95, 107], ["enumerate", "lines.append", "open", "f.write"], "function", ["None"], ["# self.augment = TestAugmentation(longer_side=1024)", "\n", "", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "dataset", "=", "SVT", "(", "data_dir", ",", "is_train", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "# print(\"get item\")", "\n", "            ", "path", ",", "polys", ",", "texts", ",", "queries", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "img", "=", "imread", "(", "path", ")", "\n", "# print(polys.shape, polys)", "\n", "assert", "len", "(", "polys", ")", "==", "len", "(", "texts", ")", ",", "print", "(", "polys", ",", "texts", ")", "\n", "aug_img", ",", "polys", ",", "tags", "=", "self", ".", "augment", "(", "img", ",", "polys", ",", "texts", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.svt.show_detection": [[108, 117], ["os.path.join", "cv2.imread", "cv2.drawContours", "cv2.imwrite", "os.path.basename", "boxes.astype"], "function", ["None"], ["boxes", "=", "[", "]", "\n", "for", "poly", "in", "polys", ":", "\n", "                ", "boxes", ".", "append", "(", "[", "np", ".", "min", "(", "poly", "[", ":", ",", "0", "]", ")", ",", "np", ".", "min", "(", "poly", "[", ":", ",", "1", "]", ")", ",", "np", ".", "max", "(", "poly", "[", ":", ",", "0", "]", ")", ",", "np", ".", "max", "(", "poly", "[", ":", ",", "1", "]", ")", "]", ")", "\n", "", "boxes", "=", "np", ".", "array", "(", "boxes", ")", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "boxlist", "=", "BoxList", "(", "boxes", ",", "image", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "'labels'", ",", "torch", ".", "tensor", "(", "[", "-", "1", "if", "text", "==", "self", ".", "dataset", ".", "difficult_label", "else", "1", "for", "text", "in", "tags", "]", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'texts'", ",", "tags", ")", "\n", "if", "self", ".", "transforms", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.svt.meanAP": [[119, 125], ["zip", "sklearn.metrics.average_precision_score", "APs.append"], "function", ["None"], ["# return the image, the boxlist and the idx in your dataset", "\n", "", "return", "image", ",", "boxlist", ",", "idx", "\n", "", "else", ":", "\n", "            ", "path", ",", "polys", ",", "texts", ",", "queries", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "# print(polys)", "\n", "img", "=", "imread", "(", "path", ")", "\n", "ori_h", ",", "ori_w", ",", "_", "=", "img", ".", "shape", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.svt.hanming_distance": [[126, 130], ["a.mm", "b.t", "[].repeat", "[].repeat", "b.size", "a.size", "a.sum", "b.sum"], "function", ["None"], ["# print(polys.shape, polys)", "\n", "assert", "len", "(", "polys", ")", "==", "len", "(", "texts", ")", ",", "print", "(", "polys", ",", "texts", ")", "\n", "aug_img", ",", "polys", ",", "tags", "=", "self", ".", "augment", "(", "img", ",", "polys", ",", "texts", ")", "\n", "test_h", ",", "test_w", ",", "_", "=", "aug_img", ".", "shape", "\n", "boxes", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.svt.compute_avg_similarity": [[130, 138], ["embedding1.size", "svt.compute_avg_similarity.similarity"], "function", ["None"], ["boxes", "=", "[", "]", "\n", "for", "poly", "in", "polys", ":", "\n", "                ", "boxes", ".", "append", "(", "[", "np", ".", "min", "(", "poly", "[", ":", ",", "0", "]", ")", ",", "np", ".", "min", "(", "poly", "[", ":", ",", "1", "]", ")", ",", "np", ".", "max", "(", "poly", "[", ":", ",", "0", "]", ")", ",", "np", ".", "max", "(", "poly", "[", ":", ",", "1", "]", ")", "]", ")", "\n", "", "boxes", "=", "np", ".", "array", "(", "boxes", ")", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "boxlist", "=", "BoxList", "(", "boxes", ",", "image", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "'labels'", ",", "torch", ".", "tensor", "(", "[", "-", "1", "if", "text", "==", "self", ".", "dataset", ".", "difficult_label", "else", "1", "for", "text", "in", "tags", "]", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'texts'", ",", "np", ".", "array", "(", "queries", ")", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.svt.evaluate_box_proposals": [[138, 194], ["svt.DynamicMaxSimilarity", "enumerate", "torch.stack().data.cpu().numpy", "svt.meanAP", "prediction.bbox.data.cpu().numpy", "prediction.get_field", "prediction.get_field", "torch.stack().data.cpu().numpy.append", "sum", "len", "prediction.fields", "prediction.get_field", "prediction.get_field.size", "torch.stack().data.cpu().numpy.append", "prediction.get_field.dim", "DynamicMaxSimilarity.", "prediction.get_field.mm", "prediction.fields", "prediction.get_field().softmax", "torch.stack().data.cpu", "prediction.bbox.data.cpu", "torch.zeros().to", "prediction.get_field.cuda", "prediction.get_field.cuda", "prediction.get_field.t", "len", "words_embedding_nor.mm.softmax", "score_per_texts.t", "scores.max", "prediction.get_field", "prediction.get_field", "torch.zeros", "torch.stack", "prediction.get_field.size"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["boxlist", ".", "add_field", "(", "'texts'", ",", "np", ".", "array", "(", "queries", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'scale'", ",", "np", ".", "array", "(", "[", "ori_w", "/", "test_w", ",", "ori_h", "/", "test_h", "]", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'path'", ",", "np", ".", "array", "(", "path", ")", ")", "\n", "boxlist", ".", "add_field", "(", "\"y_trues\"", ",", "self", ".", "dataset", ".", "y_trues", ")", "\n", "boxlist", ".", "add_field", "(", "\"det_thred\"", ",", "0.05", ")", "\n", "if", "self", ".", "transforms", ":", "\n", "                ", "image", ",", "boxlist", "=", "self", ".", "transforms", "(", "image", ",", "boxlist", ")", "\n", "# return the image, the boxlist and the idx in your dataset", "\n", "", "return", "image", ",", "boxlist", ",", "idx", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "len", "(", ")", "\n", "\n", "", "def", "expand_point", "(", "self", ",", "poly", ")", ":", "\n", "        ", "poly", "=", "np", ".", "array", "(", "poly", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "up_x", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "0", "]", ",", "poly", "[", "1", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "up_y", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "1", "]", ",", "poly", "[", "1", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "up", "=", "np", ".", "stack", "(", "(", "up_x", ",", "up_y", ")", ",", "axis", "=", "1", ")", "\n", "do_x", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "0", "]", ",", "poly", "[", "3", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "do_y", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "1", "]", ",", "poly", "[", "3", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "do", "=", "np", ".", "stack", "(", "(", "do_x", ",", "do_y", ")", ",", "axis", "=", "1", ")", "\n", "poly_expand", "=", "np", ".", "concatenate", "(", "(", "up", ",", "do", ")", ",", "axis", "=", "0", ")", "\n", "return", "poly_expand", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "", "def", "get_img_info", "(", "self", ",", "idx", ")", ":", "\n", "# print(\"get info\")", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "            ", "return", "{", "\"path\"", ":", "\"none\"", ",", "\"height\"", ":", "768", ",", "\"width\"", ":", "1280", "}", "\n", "", "path", ",", "_", ",", "_", ",", "_", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "size", "=", "Image", ".", "open", "(", "path", ")", ".", "size", "\n", "# size = [1280,768]", "\n", "return", "{", "\"path\"", ":", "path", ",", "\"height\"", ":", "size", "[", "1", "]", ",", "\"width\"", ":", "size", "[", "0", "]", "}", "\n", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "data_dir", "=", "\"/root/datasets/ic15_end2end\"", "\n", "ic15_dataset", "=", "IC15", "(", "data_dir", ")", "\n", "image", ",", "boxlist", ",", "idx", "=", "ic15_dataset", "[", "0", "]", "\n", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.svt.evaluate_box_proposals1": [[194, 240], ["enumerate", "torch.stack().data.cpu().numpy", "svt.meanAP", "prediction.bbox.data.cpu().numpy", "prediction.get_field", "prediction.get_field", "prediction.get_field.mm", "torch.stack().data.cpu().numpy.append", "sum", "len", "prediction.fields", "prediction.get_field", "prediction.get_field.size", "torch.stack().data.cpu().numpy.append", "prediction.get_field.t", "prediction.fields", "prediction.get_field().softmax", "torch.stack().data.cpu", "prediction.bbox.data.cpu", "torch.zeros().to", "len", "words_embedding_nor.mm.softmax", "score_per_texts.t", "scores.max", "prediction.get_field", "prediction.get_field", "torch.zeros", "torch.stack", "prediction.get_field.size"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.chinese_collect.chinese_collect_retrieval_evaluation": [[21, 35], ["logging.getLogger", "logging.getLogger.info", "chinese_collect.evaluate_box_proposals"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.evaluate_box_proposals"], ["\n", "# def parse_data(self,gt_path):", "\n", "#     dataFile = os.path.join(gt_path,\"data.mat\")", "\n", "#     imgPath = os.path.join(gt_path,\"imgDatabase\")", "\n", "#     data = scio.loadmat(dataFile)", "\n", "#     images = [img for img in os.listdir(imgPath)]", "\n", "#     str_queries = []", "\n", "#     for i in range(data['data'].shape[1]):", "\n", "#         str_queries.append(str(data['data'][0,i][0][0][0][0]).lower())", "\n", "#     y_trues = np.zeros([len(str_queries),len(images)])", "\n", "#     for i in range(len(str_queries)):", "\n", "#         for j in range(len(data['data'][0,i][1])):", "\n", "#             imgName = data['data'][0,i][1][j][0][0]", "\n", "#             y_trues[i,images.index(imgName)] = 1", "\n", "#     self.img_lists = [os.path.join(gt_path,\"imgDatabase\",imgName) for imgName in images]", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.chinese_collect.filter_inner_box": [[35, 65], ["polys.reshape.reshape", "polys.reshape.mean", "numpy.zeros", "enumerate", "numpy.where", "polys.reshape.reshape", "cv2.pointPolygonTest", "numpy.where", "poly.astype", "min", "min", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["#     self.img_lists = [os.path.join(gt_path,\"imgDatabase\",imgName) for imgName in images]", "\n", "#     self.str_queries = str_queries", "\n", "#     self.y_trues = y_trues", "\n", "", "def", "parse_data", "(", "self", ",", "gt_path", ")", ":", "\n", "        ", "self", ".", "str_queries", "=", "[", "]", "\n", "self", ".", "img_lists", "=", "[", "]", "\n", "query_num", "=", "len", "(", "os", ".", "listdir", "(", "gt_path", ")", ")", "\n", "img_num", "=", "sum", "(", "[", "len", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "gt_path", ",", "query", ")", ")", ")", "for", "query", "in", "os", ".", "listdir", "(", "gt_path", ")", "]", ")", "\n", "self", ".", "y_trues", "=", "np", ".", "zeros", "(", "[", "query_num", ",", "img_num", "]", ")", "\n", "cur_idx", "=", "0", "\n", "for", "idx", ",", "query", "in", "enumerate", "(", "os", ".", "listdir", "(", "gt_path", ")", ")", ":", "\n", "            ", "self", ".", "str_queries", ".", "append", "(", "query", ")", "\n", "self", ".", "img_lists", ".", "extend", "(", "[", "os", ".", "path", ".", "join", "(", "gt_path", ",", "query", ",", "img", ")", "for", "img", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "gt_path", ",", "query", ")", ")", "]", ")", "\n", "query_img_num", "=", "len", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "gt_path", ",", "query", ")", ")", ")", "\n", "self", ".", "y_trues", "[", "idx", ",", "cur_idx", ":", "cur_idx", "+", "query_img_num", "]", "=", "1", "\n", "cur_idx", "+=", "query_img_num", "\n", "", "", "def", "len", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_lists", ")", "\n", "", "def", "getitem", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "img_lists", "[", "index", "]", ",", "self", ".", "str_queries", ",", "self", ".", "y_trues", "\n", "", "", "NUM_POINT", "=", "7", "\n", "class", "ChineseCollectDataset", "(", "torch", ".", "utils", ".", "data", ".", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "use_difficult", "=", "False", ",", "transforms", "=", "None", ",", "is_train", "=", "True", ",", "augment", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "is_train", "==", "False", "\n", "self", ".", "augment", "=", "TestAugmentation", "(", "longer_side", "=", "1280", ")", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "dataset", "=", "ChineseCollect", "(", "data_dir", ",", "is_train", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.chinese_collect.write_to_file": [[65, 77], ["enumerate", "lines.append", "open", "f.write"], "function", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "path", ",", "queries", ",", "trues", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "# print(path)", "\n", "img", "=", "imread", "(", "path", ",", "mode", "=", "\"RGB\"", ")", "\n", "ori_h", ",", "ori_w", ",", "_", "=", "img", ".", "shape", "\n", "aug_img", ",", "polys", ",", "tags", "=", "self", ".", "augment", "(", "img", ",", "None", ",", "None", ")", "\n", "test_h", ",", "test_w", ",", "_", "=", "aug_img", ".", "shape", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "boxlist", "=", "BoxList", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "image", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "'retrieval_trues'", ",", "trues", ")", "\n", "boxlist", ".", "add_field", "(", "'texts'", ",", "np", ".", "array", "(", "queries", ")", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.chinese_collect.show_detection": [[78, 87], ["os.path.join", "cv2.imread", "cv2.drawContours", "cv2.imwrite", "os.path.basename", "boxes.astype"], "function", ["None"], ["boxlist", ".", "add_field", "(", "'scale'", ",", "np", ".", "array", "(", "[", "ori_w", "/", "test_w", ",", "ori_h", "/", "test_h", "]", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'path'", ",", "np", ".", "array", "(", "path", ")", ")", "\n", "boxlist", ".", "add_field", "(", "\"y_trues\"", ",", "trues", ")", "\n", "# boxlist.add_field('test_texts',self.dataset.all_texts)", "\n", "if", "self", ".", "transforms", ":", "\n", "            ", "image", ",", "boxlist", "=", "self", ".", "transforms", "(", "image", ",", "boxlist", ")", "\n", "# return the image, the boxlist and the idx in your dataset", "\n", "", "return", "image", ",", "boxlist", ",", "idx", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.chinese_collect.meanAP": [[89, 95], ["zip", "sklearn.metrics.average_precision_score", "APs.append"], "function", ["None"], ["\n", "", "def", "expand_point", "(", "self", ",", "poly", ")", ":", "\n", "        ", "poly", "=", "np", ".", "array", "(", "poly", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "up_x", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "0", "]", ",", "poly", "[", "1", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "up_y", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "1", "]", ",", "poly", "[", "1", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "up", "=", "np", ".", "stack", "(", "(", "up_x", ",", "up_y", ")", ",", "axis", "=", "1", ")", "\n", "do_x", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "0", "]", ",", "poly", "[", "3", ",", "0", "]", ",", "NUM_POINT", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.chinese_collect.re_ranking": [[95, 123], ["numpy.zeros", "enumerate", "chinese_collect.meanAP", "chinese_collect.meanAP", "retrieval_texts_embedding.items", "enumerate", "len", "len", "prediction.get_field", "retrieval_texts_embedding.keys", "prediction.get_field.size", "embedding.mm", "embedding.mm.max", "[].data.cpu().numpy", "prediction.get_field.t", "score.data.cpu().numpy", "box_idx.data.cpu().numpy", "[].data.cpu", "score.data.cpu", "box_idx.data.cpu", "prediction.get_field"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["do_x", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "0", "]", ",", "poly", "[", "3", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "do_y", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "1", "]", ",", "poly", "[", "3", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "do", "=", "np", ".", "stack", "(", "(", "do_x", ",", "do_y", ")", ",", "axis", "=", "1", ")", "\n", "poly_expand", "=", "np", ".", "concatenate", "(", "(", "up", ",", "do", ")", ",", "axis", "=", "0", ")", "\n", "return", "poly_expand", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "", "def", "get_img_info", "(", "self", ",", "idx", ")", ":", "\n", "# print(\"get info\")", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "            ", "return", "{", "\"path\"", ":", "\"none\"", ",", "\"height\"", ":", "768", ",", "\"width\"", ":", "1280", "}", "\n", "", "path", ",", "_", ",", "_", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "size", "=", "Image", ".", "open", "(", "path", ")", ".", "size", "\n", "# size = [1280,768]", "\n", "return", "{", "\"path\"", ":", "path", ",", "\"height\"", ":", "size", "[", "1", "]", ",", "\"width\"", ":", "size", "[", "0", "]", "}", "\n", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "data_dir", "=", "\"/root/datasets/ic15_end2end\"", "\n", "ic15_dataset", "=", "IC15", "(", "data_dir", ")", "\n", "image", ",", "boxlist", ",", "idx", "=", "ic15_dataset", "[", "0", "]", "\n", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.chinese_collect.evaluate_box_proposals": [[123, 173], ["enumerate", "torch.stack().data.cpu().numpy", "chinese_collect.meanAP", "prediction.bbox.data.cpu().numpy", "prediction.get_field", "prediction.get_field", "prediction.get_field.mm", "torch.stack().data.cpu().numpy.append", "sum", "len", "prediction.fields", "prediction.get_field", "prediction.get_field.size", "torch.stack().data.cpu().numpy.append", "prediction.get_field.t", "torch.stack().data.cpu", "prediction.bbox.data.cpu", "torch.zeros().to", "words_embedding_nor.mm.max", "torch.zeros", "torch.stack", "prediction.get_field.size"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.chinese_collect.evaluate_box_proposals1": [[174, 224], ["os.path.join", "os.path.join", "enumerate", "numpy.zeros", "numpy.zeros", "print", "enumerate", "chinese_collect.meanAP", "print", "prediction.get_field", "os.path.basename", "os.path.join().replace", "prediction.bbox.data.cpu().numpy", "prediction.get_field", "chinese_collect.write_to_file", "enumerate", "retrieval_texts_embedding.items", "enumerate", "os.path.exists", "os.makedirs", "str", "prediction.get_field.size", "prediction.get_field", "text.lower.lower", "words_embedding[].reshape", "len", "len", "len", "len", "prediction.get_field", "sum", "len", "prediction.get_field", "os.path.join", "prediction.bbox.data.cpu", "retrieval_texts_embedding.keys", "retrieval_texts_embedding.keys", "retrieval_texts_embedding.keys", "prediction.get_field.size", "[].data.cpu().numpy", "t.lower", "prediction.get_field", "[].data.cpu", "embedding.mm().max", "embedding.mm"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.write_to_file", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.iiit.GlobalLocalSimilarity.__init__": [[23, 27], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["        ", "dataFile", "=", "os", ".", "path", ".", "join", "(", "gt_path", ",", "\"data.mat\"", ")", "\n", "imgPath", "=", "os", ".", "path", ".", "join", "(", "gt_path", ",", "\"imgDatabase\"", ")", "\n", "data", "=", "scio", ".", "loadmat", "(", "dataFile", ")", "\n", "images", "=", "[", "img", "for", "img", "in", "os", ".", "listdir", "(", "imgPath", ")", "]", "\n", "str_queries", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.iiit.GlobalLocalSimilarity.compute_similarity": [[27, 32], ["x.view.view.view", "y.view.view.view", "torch.stack", "torch.stack.mean", "x.view.view.size", "y.view.view.size", "iiit.GlobalLocalSimilarity.normalize().mm", "iiit.GlobalLocalSimilarity.normalize().t", "range", "iiit.GlobalLocalSimilarity.normalize", "iiit.GlobalLocalSimilarity.normalize"], "methods", ["None"], ["str_queries", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", "[", "'data'", "]", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "str_queries", ".", "append", "(", "str", "(", "data", "[", "'data'", "]", "[", "0", ",", "i", "]", "[", "0", "]", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", ".", "lower", "(", ")", ")", "\n", "", "y_trues", "=", "np", ".", "zeros", "(", "[", "len", "(", "str_queries", ")", ",", "len", "(", "images", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "str_queries", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "data", "[", "'data'", "]", "[", "0", ",", "i", "]", "[", "1", "]", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.iiit.GlobalLocalSimilarity.forward": [[33, 38], ["x.tanh", "y.tanh", "torch.stack", "torch.stack.mean", "iiit.GlobalLocalSimilarity.compute_similarity"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.GlobalLocalSimilarity.compute_similarity"], ["                ", "imgName", "=", "data", "[", "'data'", "]", "[", "0", ",", "i", "]", "[", "1", "]", "[", "j", "]", "[", "0", "]", "[", "0", "]", "\n", "y_trues", "[", "i", ",", "images", ".", "index", "(", "imgName", ")", "]", "=", "1", "\n", "", "", "self", ".", "img_lists", "=", "[", "os", ".", "path", ".", "join", "(", "gt_path", ",", "\"imgDatabase\"", ",", "imgName", ")", "for", "imgName", "in", "images", "]", "\n", "self", ".", "str_queries", "=", "str_queries", "\n", "self", ".", "y_trues", "=", "y_trues", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.iiit.DynamicMaxSimilarity.__init__": [[40, 43], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["", "def", "len", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_lists", ")", "\n", "", "def", "getitem", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "img_lists", "[", "index", "]", ",", "self", ".", "str_queries", ",", "self", ".", "y_trues", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.iiit.DynamicMaxSimilarity.sim": [[48, 54], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize.mm", "similarity.reshape.reshape.reshape", "similarity.reshape.reshape.permute", "x.view().tanh", "y.view().tanh", "torch.nn.functional.normalize.t", "x.size", "x.size", "y.size", "y.size", "x.view", "y.view", "x.size", "y.size"], "methods", ["None"], ["if", "is_train", ":", "\n", "            ", "self", ".", "augment", "=", "eval", "(", "augment", ")", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "augment", "=", "TestAugmentation", "(", "longer_side", "=", "1280", ")", "\n", "", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "dataset", "=", "IIIT", "(", "data_dir", ",", "is_train", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.iiit.DynamicMaxSimilarity.push_similarity": [[54, 56], ["None"], "methods", ["None"], ["self", ".", "dataset", "=", "IIIT", "(", "data_dir", ",", "is_train", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.iiit.DynamicMaxSimilarity.forward": [[56, 68], ["torch.zeros().type_as", "iiit.DynamicMaxSimilarity.sim", "range", "range", "torch.zeros", "torch.stack", "torch.max", "a.size", "b.size", "iiit.DynamicMaxSimilarity.push_similarity", "iiit.DynamicMaxSimilarity.push_similarity", "iiit.DynamicMaxSimilarity.push_similarity", "max", "max", "max"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.sim", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.push_similarity", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.push_similarity", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.push_similarity"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "# print(\"get item\")", "\n", "            ", "path", ",", "queries", ",", "trues", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "img", "=", "imread", "(", "path", ")", "\n", "# print(polys.shape, polys)", "\n", "assert", "len", "(", "polys", ")", "==", "len", "(", "texts", ")", ",", "print", "(", "polys", ",", "texts", ")", "\n", "aug_img", ",", "polys", ",", "tags", "=", "self", ".", "augment", "(", "img", ",", "None", ",", "None", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "boxlist", "=", "BoxList", "(", "[", "]", ",", "image", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "'retrieval_trues'", ",", "trues", ")", "\n", "boxlist", ".", "add_field", "(", "'texts'", ",", "queries", ")", "\n", "# boxlist.add_field(\"y_trues\",trues)", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.iiit.iiit_retrieval_evaluation": [[68, 82], ["logging.getLogger", "logging.getLogger.info", "iiit.evaluate_box_proposals"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.evaluate_box_proposals"], ["# boxlist.add_field(\"y_trues\",trues)", "\n", "if", "self", ".", "transforms", ":", "\n", "                ", "image", ",", "boxlist", "=", "self", ".", "transforms", "(", "image", ",", "boxlist", ")", "\n", "# return the image, the boxlist and the idx in your dataset", "\n", "", "return", "image", ",", "boxlist", ",", "idx", "\n", "", "else", ":", "\n", "            ", "path", ",", "queries", ",", "trues", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "# print(polys)", "\n", "img", "=", "imread", "(", "path", ",", "mode", "=", "\"RGB\"", ")", "\n", "ori_h", ",", "ori_w", ",", "_", "=", "img", ".", "shape", "\n", "aug_img", ",", "polys", ",", "tags", "=", "self", ".", "augment", "(", "img", ",", "None", ",", "None", ")", "\n", "test_h", ",", "test_w", ",", "_", "=", "aug_img", ".", "shape", "\n", "image", "=", "Image", ".", "fromarray", "(", "aug_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "boxlist", "=", "BoxList", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "image", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.iiit.filter_inner_box": [[82, 112], ["polys.reshape.reshape", "polys.reshape.mean", "numpy.zeros", "enumerate", "numpy.where", "polys.reshape.reshape", "cv2.pointPolygonTest", "numpy.where", "poly.astype", "min", "min", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["boxlist", "=", "BoxList", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "image", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "'retrieval_trues'", ",", "trues", ")", "\n", "boxlist", ".", "add_field", "(", "'texts'", ",", "np", ".", "array", "(", "queries", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'scale'", ",", "np", ".", "array", "(", "[", "ori_w", "/", "test_w", ",", "ori_h", "/", "test_h", "]", ")", ")", "\n", "boxlist", ".", "add_field", "(", "'path'", ",", "np", ".", "array", "(", "path", ")", ")", "\n", "boxlist", ".", "add_field", "(", "\"y_trues\"", ",", "trues", ")", "\n", "boxlist", ".", "add_field", "(", "\"det_thred\"", ",", "0.2", ")", "\n", "# boxlist.add_field('test_texts',self.dataset.all_texts)", "\n", "if", "self", ".", "transforms", ":", "\n", "                ", "image", ",", "boxlist", "=", "self", ".", "transforms", "(", "image", ",", "boxlist", ")", "\n", "# return the image, the boxlist and the idx in your dataset", "\n", "", "return", "image", ",", "boxlist", ",", "idx", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "len", "(", ")", "\n", "\n", "", "def", "expand_point", "(", "self", ",", "poly", ")", ":", "\n", "        ", "poly", "=", "np", ".", "array", "(", "poly", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "up_x", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "0", "]", ",", "poly", "[", "1", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "up_y", "=", "np", ".", "linspace", "(", "poly", "[", "0", ",", "1", "]", ",", "poly", "[", "1", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "up", "=", "np", ".", "stack", "(", "(", "up_x", ",", "up_y", ")", ",", "axis", "=", "1", ")", "\n", "do_x", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "0", "]", ",", "poly", "[", "3", ",", "0", "]", ",", "NUM_POINT", ")", "\n", "do_y", "=", "np", ".", "linspace", "(", "poly", "[", "2", ",", "1", "]", ",", "poly", "[", "3", ",", "1", "]", ",", "NUM_POINT", ")", "\n", "do", "=", "np", ".", "stack", "(", "(", "do_x", ",", "do_y", ")", ",", "axis", "=", "1", ")", "\n", "poly_expand", "=", "np", ".", "concatenate", "(", "(", "up", ",", "do", ")", ",", "axis", "=", "0", ")", "\n", "return", "poly_expand", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "", "def", "get_img_info", "(", "self", ",", "idx", ")", ":", "\n", "# print(\"get info\")", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "            ", "return", "{", "\"path\"", ":", "\"none\"", ",", "\"height\"", ":", "768", ",", "\"width\"", ":", "1280", "}", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.iiit.write_to_file": [[112, 124], ["enumerate", "lines.append", "open", "f.write"], "function", ["None"], ["            ", "return", "{", "\"path\"", ":", "\"none\"", ",", "\"height\"", ":", "768", ",", "\"width\"", ":", "1280", "}", "\n", "", "path", ",", "_", ",", "_", "=", "self", ".", "dataset", ".", "getitem", "(", "idx", ")", "\n", "size", "=", "Image", ".", "open", "(", "path", ")", ".", "size", "\n", "# size = [1280,768]", "\n", "return", "{", "\"path\"", ":", "path", ",", "\"height\"", ":", "size", "[", "1", "]", ",", "\"width\"", ":", "size", "[", "0", "]", "}", "\n", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "data_dir", "=", "\"/root/datasets/ic15_end2end\"", "\n", "ic15_dataset", "=", "IC15", "(", "data_dir", ")", "\n", "image", ",", "boxlist", ",", "idx", "=", "ic15_dataset", "[", "0", "]", "\n", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.iiit.show_detection": [[125, 134], ["os.path.join", "cv2.imread", "cv2.drawContours", "cv2.imwrite", "os.path.basename", "boxes.astype"], "function", ["None"], ["", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.iiit.meanAP": [[136, 142], ["zip", "sklearn.metrics.average_precision_score", "APs.append"], "function", ["None"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.iiit.re_ranking": [[142, 170], ["numpy.zeros", "enumerate", "iiit.meanAP", "iiit.meanAP", "retrieval_texts_embedding.items", "enumerate", "len", "len", "prediction.get_field", "retrieval_texts_embedding.keys", "prediction.get_field.size", "embedding.mm", "embedding.mm.max", "[].data.cpu().numpy", "prediction.get_field.t", "score.data.cpu().numpy", "box_idx.data.cpu().numpy", "[].data.cpu", "score.data.cpu", "box_idx.data.cpu", "prediction.get_field"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.iiit.evaluate_box_proposals": [[170, 226], ["iiit.DynamicMaxSimilarity", "iiit.GlobalLocalSimilarity", "enumerate", "torch.stack().data.cpu().numpy", "iiit.meanAP", "prediction.bbox.data.cpu().numpy", "prediction.get_field", "prediction.get_field", "torch.stack().data.cpu().numpy.append", "sum", "len", "prediction.fields", "prediction.get_field", "prediction.get_field.size", "torch.stack().data.cpu().numpy.append", "prediction.get_field.dim", "DynamicMaxSimilarity.", "prediction.get_field.mm", "torch.stack().data.cpu", "prediction.bbox.data.cpu", "torch.zeros().to", "prediction.get_field.t", "words_embedding_nor.mm.max", "torch.zeros", "torch.stack", "prediction.get_field.size"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.iiit.evaluate_box_proposals1": [[227, 277], ["os.path.join", "os.path.join", "enumerate", "numpy.zeros", "numpy.zeros", "print", "enumerate", "iiit.meanAP", "print", "prediction.get_field", "os.path.basename", "os.path.join().replace", "prediction.bbox.data.cpu().numpy", "prediction.get_field", "iiit.write_to_file", "enumerate", "retrieval_texts_embedding.items", "enumerate", "os.path.exists", "os.makedirs", "str", "prediction.get_field.size", "prediction.get_field", "text.lower.lower", "words_embedding[].reshape", "len", "len", "len", "len", "prediction.get_field", "sum", "len", "prediction.get_field", "os.path.join", "prediction.bbox.data.cpu", "retrieval_texts_embedding.keys", "retrieval_texts_embedding.keys", "retrieval_texts_embedding.keys", "prediction.get_field.size", "[].data.cpu().numpy", "t.lower", "prediction.get_field", "[].data.cpu", "embedding.mm().max", "embedding.mm"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.write_to_file", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.ctw.ctw_retrieval_evaluation": [[21, 35], ["logging.getLogger", "logging.getLogger.info", "ctw.evaluate_box_proposals"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.evaluate_box_proposals"], ["def", "ctw_retrieval_evaluation", "(", "\n", "dataset", ",", "\n", "predictions", ",", "\n", "box_only", ",", "\n", "output_folder", ",", "\n", "iou_types", ",", "\n", "rec_type", ",", "\n", "expected_results", ",", "\n", "expected_results_sigma_tol", ",", "\n", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"maskrcnn_benchmark.inference\"", ")", "\n", "logger", ".", "info", "(", "\"Evaluating bbox proposals\"", ")", "\n", "mAP", "=", "evaluate_box_proposals", "(", "predictions", ",", "dataset", ",", "output_folder", ")", "\n", "return", "mAP", "\n", "", "def", "filter_inner_box", "(", "polys", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.ctw.filter_inner_box": [[35, 65], ["polys.reshape.reshape", "polys.reshape.mean", "numpy.zeros", "enumerate", "numpy.where", "polys.reshape.reshape", "cv2.pointPolygonTest", "numpy.where", "poly.astype", "min", "min", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "filter_inner_box", "(", "polys", ")", ":", "\n", "    ", "'''\n    filter thoese containing box.\n    First find box with overlap, the decide which to leave\n    '''", "\n", "if", "polys", ".", "size", "==", "0", ":", "\n", "        ", "return", "polys", "\n", "", "polys", "=", "polys", ".", "reshape", "(", "-", "1", ",", "4", ",", "2", ")", "\n", "centers", "=", "polys", ".", "mean", "(", "1", ")", "\n", "\n", "remove_flag", "=", "np", ".", "zeros", "(", "(", "centers", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "idx", ",", "cp", "in", "enumerate", "(", "centers", ")", ":", "\n", "        ", "contain_status", "=", "[", "cv2", ".", "pointPolygonTest", "(", "poly", ".", "astype", "(", "np", ".", "int32", ")", ",", "(", "cp", "[", "0", "]", ",", "cp", "[", "1", "]", ")", ",", "False", ")", "for", "poly", "in", "polys", "]", "\n", "idx_conts", "=", "np", ".", "where", "(", "np", ".", "array", "(", "contain_status", ")", "==", "True", ")", "[", "0", "]", "\n", "for", "id_c", "in", "idx_conts", ":", "\n", "            ", "if", "id_c", "!=", "idx", ":", "\n", "                ", "poly_m", "=", "polys", "[", "id_c", "]", "\n", "poly_c", "=", "polys", "[", "idx", "]", "\n", "\n", "# if one side of current poly is close to big poly", "\n", "# then remve this poly", "\n", "\n", "m_short", "=", "min", "(", "np", ".", "linalg", ".", "norm", "(", "poly_m", "[", "0", "]", "-", "poly_m", "[", "1", "]", ")", ",", "np", ".", "linalg", ".", "norm", "(", "poly_m", "[", "1", "]", "-", "poly_m", "[", "2", "]", ")", ")", "\n", "c_short", "=", "min", "(", "np", ".", "linalg", ".", "norm", "(", "poly_c", "[", "0", "]", "-", "poly_c", "[", "1", "]", ")", ",", "np", ".", "linalg", ".", "norm", "(", "poly_c", "[", "1", "]", "-", "poly_c", "[", "2", "]", ")", ")", "\n", "\n", "if", "m_short", "/", "c_short", ">", "0.9", "and", "m_short", "/", "c_short", "<", "1", "/", "0.9", ":", "\n", "                    ", "remove_flag", "[", "idx", "]", "=", "1", "\n", "", "", "", "", "keep_idx", "=", "np", ".", "where", "(", "remove_flag", "==", "False", ")", "\n", "polys", "=", "polys", "[", "keep_idx", ",", ":", ",", ":", "]", "\n", "return", "polys", ".", "reshape", "(", "-", "1", ",", "4", ",", "2", ")", "\n", "", "def", "write_to_file", "(", "bboxes", ",", "filename", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.ctw.write_to_file": [[65, 77], ["enumerate", "lines.append", "open", "f.write"], "function", ["None"], ["", "def", "write_to_file", "(", "bboxes", ",", "filename", ")", ":", "\n", "    ", "''' the socres is the average score of boundingbox region\n    '''", "\n", "lines", "=", "[", "]", "\n", "for", "b_idx", ",", "bbox", "in", "enumerate", "(", "bboxes", ")", ":", "\n", "        ", "line", "=", "\"{},{},{},{},{}\\r\\n\"", ".", "format", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ",", "bbox", "[", "2", "]", ",", "bbox", "[", "3", "]", ",", "\"None\"", ")", "\n", "\n", "lines", ".", "append", "(", "line", ")", "\n", "\n", "", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "lines", ":", "\n", "            ", "f", ".", "write", "(", "line", ")", "\n", "# print(filename)", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.ctw.show_detection": [[78, 87], ["os.path.join", "cv2.imread", "cv2.drawContours", "cv2.imwrite", "os.path.basename", "boxes.astype"], "function", ["None"], ["", "", "", "def", "show_detection", "(", "boxes", ",", "polys", ",", "path", ",", "output_folder", ")", ":", "\n", "    ", "import", "cv2", "\n", "# boxes = bbox.data.cpu().numpy()[:,(0,1,2,1,2,3,0,3)].reshape([-1,4,2])", "\n", "# polys = polys.data.cpu().numpy()", "\n", "img_save_path", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "os", ".", "path", ".", "basename", "(", "path", ")", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "path", ")", "\n", "cv2", ".", "drawContours", "(", "image", ",", "boxes", ".", "astype", "(", "np", ".", "int32", ")", ",", "-", "1", ",", "color", "=", "(", "255", ",", "0", ",", "0", ")", ",", "thickness", "=", "2", ")", "\n", "# cv2.drawContours(image, polys.astype(np.int32), -1, color=(0,0,255), thickness=2)", "\n", "cv2", ".", "imwrite", "(", "img_save_path", ",", "image", ")", "\n", "# print(img_save_path)", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.ctw.meanAP": [[89, 97], ["zip", "sklearn.metrics.average_precision_score", "APs.append"], "function", ["None"], ["", "def", "meanAP", "(", "preds", ",", "trues", ")", ":", "\n", "    ", "APs", "=", "[", "]", "\n", "# print(len(preds),len(trues))", "\n", "for", "y_scores", ",", "y_trues", "in", "zip", "(", "preds", ",", "trues", ")", ":", "\n", "# print(y_trues,len(y_scores))", "\n", "        ", "AP", "=", "average_precision_score", "(", "y_trues", ",", "y_scores", ")", "\n", "APs", ".", "append", "(", "AP", ")", "\n", "", "return", "APs", "\n", "", "def", "re_ranking", "(", "retrieval_texts_embedding", ",", "predictions", ",", "y_trues", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.ctw.re_ranking": [[97, 125], ["numpy.zeros", "enumerate", "ctw.meanAP", "ctw.meanAP", "retrieval_texts_embedding.items", "enumerate", "len", "len", "prediction.get_field", "retrieval_texts_embedding.keys", "prediction.get_field.size", "embedding.mm", "embedding.mm.max", "[].data.cpu().numpy", "prediction.get_field.t", "score.data.cpu().numpy", "box_idx.data.cpu().numpy", "[].data.cpu", "score.data.cpu", "box_idx.data.cpu", "prediction.get_field"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["", "def", "re_ranking", "(", "retrieval_texts_embedding", ",", "predictions", ",", "y_trues", ")", ":", "\n", "    ", "y_scores", "=", "np", ".", "zeros", "(", "[", "len", "(", "retrieval_texts_embedding", ".", "keys", "(", ")", ")", ",", "len", "(", "predictions", ")", "]", ")", "\n", "for", "idx", ",", "(", "text", ",", "embedding", ")", "in", "enumerate", "(", "retrieval_texts_embedding", ".", "items", "(", ")", ")", ":", "\n", "        ", "for", "image_id", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "            ", "img_embedding", "=", "prediction", ".", "get_field", "(", "\"imgs_embedding_nor\"", ")", "\n", "if", "img_embedding", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "                ", "score", "=", "0", "\n", "box", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "", "else", ":", "\n", "                ", "similarity", "=", "embedding", ".", "mm", "(", "img_embedding", ".", "t", "(", ")", ")", "\n", "score", ",", "box_idx", "=", "similarity", ".", "max", "(", "dim", "=", "1", ")", "\n", "# print(similarity.min(dim=1))", "\n", "score", "=", "score", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "# k = min(img_embedding.size(0),2)", "\n", "# print(similarity.shape)", "\n", "# score = torch.topk(similarity,k,dim=1)[0].mean().data.cpu().numpy()", "\n", "box_idx", "=", "box_idx", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "box", "=", "prediction", ".", "get_field", "(", "\"boxes\"", ")", "[", "box_idx", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "y_scores", "[", "idx", ",", "image_id", "]", "=", "score", "\n", "", "", "APs", "=", "meanAP", "(", "y_scores", ",", "y_trues", ")", "\n", "# show_aps(APs)", "\n", "# print(sum(APs)/len(APs))", "\n", "# y_scores2 = re_ranking(retrieval_image_embedding,predictions,y_trues)", "\n", "\n", "APs", "=", "meanAP", "(", "y_scores", "+", "y_scores2", ",", "y_trues", ")", "\n", "# print(sum(APs)/len(APs))", "\n", "return", "y_scores", "\n", "", "def", "evaluate_box_proposals", "(", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.ctw.evaluate_box_proposals": [[125, 177], ["enumerate", "torch.stack().data.cpu().numpy", "print", "ctw.meanAP", "print", "prediction.bbox.data.cpu().numpy", "prediction.get_field", "prediction.get_field", "prediction.get_field.mm", "torch.stack().data.cpu().numpy.append", "sum", "len", "prediction.fields", "prediction.get_field", "prediction.get_field.size", "torch.stack().data.cpu().numpy.append", "prediction.get_field.t", "torch.stack().data.cpu", "prediction.bbox.data.cpu", "torch.zeros().to", "words_embedding_nor.mm.max", "torch.zeros", "torch.stack", "prediction.get_field.size"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to"], ["", "def", "evaluate_box_proposals", "(", "\n", "predictions", ",", "dataset", ",", "output_folder", ",", "thresholds", "=", "0.23", ",", "area", "=", "\"all\"", ",", "limit", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"Evaluate detection proposal recall metrics. This function is a much\n    faster alternative to the official COCO API recall evaluation code. However,\n    it produces slightly different results.\n    \"\"\"", "\n", "# img_floder = os.path.join(output_folder,'images')", "\n", "# txt_floder = os.path.join(output_folder,'texts')", "\n", "# for folder in [img_floder, txt_floder]:", "\n", "#     if not os.path.exists(folder):", "\n", "#         os.makedirs(folder)", "\n", "y_trues", "=", "dataset", ".", "dataset", ".", "y_trues", "\n", "words_embedding_nor", "=", "None", "\n", "y_scores", "=", "[", "]", "\n", "retrieval_image_embedding", "=", "{", "}", "\n", "for", "image_id", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "# print(prediction.fields())", "\n", "        ", "if", "\"words_embedding_nor\"", "in", "prediction", ".", "fields", "(", ")", ":", "\n", "            ", "words_embedding_nor", "=", "prediction", ".", "get_field", "(", "\"words_embedding_nor\"", ")", "\n", "# print(words_embedding_nor.shape)", "\n", "", "boxes", "=", "prediction", ".", "bbox", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "scale", "=", "prediction", ".", "get_field", "(", "\"scale\"", ")", "\n", "boxes", "[", ":", ",", ":", ":", "2", "]", "*=", "scale", "[", "0", "]", "\n", "boxes", "[", ":", ",", "1", ":", ":", "2", "]", "*=", "scale", "[", "1", "]", "\n", "img_embedding", "=", "prediction", ".", "get_field", "(", "\"imgs_embedding_nor\"", ")", "\n", "if", "img_embedding", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "            ", "y_scores", ".", "append", "(", "torch", ".", "zeros", "(", "[", "words_embedding_nor", ".", "size", "(", "0", ")", "]", ")", ".", "to", "(", "img_embedding", ".", "device", ")", ")", "\n", "continue", "\n", "", "similarity", "=", "words_embedding_nor", ".", "mm", "(", "img_embedding", ".", "t", "(", ")", ")", "\n", "# score,box_idx =  similarity.max(dim=1)", "\n", "# # print(similarity.min(dim=1))", "\n", "# score = score.data.cpu().numpy()[0]", "\n", "# # k = min(img_embedding.size(0),2)", "\n", "# # print(similarity.shape)", "\n", "# # score = torch.topk(similarity,k,dim=1)[0].mean().data.cpu().numpy()", "\n", "# box_idx = box_idx.data.cpu().numpy()[0]", "\n", "# box = prediction.get_field(\"boxes\")[box_idx].data.cpu().numpy()", "\n", "# if score>max_score:", "\n", "#     max_score = score", "\n", "#     retrieval_image_embedding[text]=img_embedding[box_idx].view(1,-1)", "\n", "y_scores", ".", "append", "(", "similarity", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", ")", "\n", "# import ipdb;ipdb.set_trace()", "\n", "", "y_scores", "=", "torch", ".", "stack", "(", "y_scores", ",", "dim", "=", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "print", "(", "y_scores", ".", "shape", ",", "y_trues", ".", "shape", ")", "\n", "APs", "=", "meanAP", "(", "y_scores", ",", "y_trues", ")", "\n", "mAP", "=", "sum", "(", "APs", ")", "/", "len", "(", "APs", ")", "\n", "print", "(", "mAP", ")", "\n", "# y_scores2 = re_ranking(retrieval_image_embedding,predictions,y_trues)", "\n", "# print(mAP)", "\n", "# np.save(os.path.join(output_folder,\"retrieval_results.npy\"), retrieval_results)", "\n", "return", "mAP", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.GlobalLocalSimilarity.__init__": [[23, 27], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "divided_nums", "=", "[", "1", ",", "3", ",", "5", "]", ")", ":", "\n", "        ", "super", "(", "GlobalLocalSimilarity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "divided_nums", "=", "divided_nums", "\n", "self", ".", "normalize", "=", "nn", ".", "functional", ".", "normalize", "\n", "", "def", "compute_similarity", "(", "self", ",", "x", ",", "y", ",", "divided_num", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.GlobalLocalSimilarity.compute_similarity": [[27, 32], ["x.view.view.view", "y.view.view.view", "torch.stack", "torch.stack.mean", "x.view.view.size", "y.view.view.size", "totaltext.GlobalLocalSimilarity.normalize().mm", "totaltext.GlobalLocalSimilarity.normalize().t", "range", "totaltext.GlobalLocalSimilarity.normalize", "totaltext.GlobalLocalSimilarity.normalize"], "methods", ["None"], ["", "def", "compute_similarity", "(", "self", ",", "x", ",", "y", ",", "divided_num", "=", "1", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "divided_num", ",", "-", "1", ")", "\n", "y", "=", "y", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "divided_num", ",", "-", "1", ")", "\n", "sims", "=", "torch", ".", "stack", "(", "[", "self", ".", "normalize", "(", "x", "[", ":", ",", "i", ",", ":", "]", ")", ".", "mm", "(", "self", ".", "normalize", "(", "y", "[", ":", ",", "i", ",", ":", "]", ")", ".", "t", "(", ")", ")", "for", "i", "in", "range", "(", "divided_num", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "sims", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.GlobalLocalSimilarity.forward": [[33, 38], ["x.tanh", "y.tanh", "torch.stack", "torch.stack.mean", "totaltext.GlobalLocalSimilarity.compute_similarity"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.GlobalLocalSimilarity.compute_similarity"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_tanh", "=", "x", ".", "tanh", "(", ")", "\n", "y_tanh", "=", "y", ".", "tanh", "(", ")", "\n", "sims", "=", "torch", ".", "stack", "(", "[", "self", ".", "compute_similarity", "(", "x_tanh", ",", "y_tanh", ",", "divided_num", ")", "for", "divided_num", "in", "self", ".", "divided_nums", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "sims", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "", "", "class", "DynamicMaxSimilarity", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.__init__": [[40, 43], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "frame_num", ")", ":", "\n", "        ", "super", "(", "DynamicMaxSimilarity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "frame_num", "=", "frame_num", "\n", "# def sim(self,x,y):", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.sim": [[48, 54], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize.mm", "similarity.reshape.reshape.reshape", "similarity.reshape.reshape.permute", "x.view().tanh", "y.view().tanh", "torch.nn.functional.normalize.t", "x.size", "x.size", "y.size", "y.size", "x.view", "y.view", "x.size", "y.size"], "methods", ["None"], ["", "def", "sim", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_nor", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "x", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "-", "1", ")", ")", ".", "tanh", "(", ")", ")", "# x_bw,c", "\n", "y_nor", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "y", ".", "view", "(", "-", "1", ",", "y", ".", "size", "(", "-", "1", ")", ")", ".", "tanh", "(", ")", ")", "# y_bw,c", "\n", "similarity", "=", "x_nor", ".", "mm", "(", "y_nor", ".", "t", "(", ")", ")", "# (x_bw,y_bw)", "\n", "similarity", "=", "similarity", ".", "reshape", "(", "[", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "y", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "1", ")", "]", ")", "\n", "return", "similarity", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "", "def", "push_similarity", "(", "self", ",", "global_sim", ",", "local_sim", ",", "steps", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.push_similarity": [[54, 56], ["None"], "methods", ["None"], ["", "def", "push_similarity", "(", "self", ",", "global_sim", ",", "local_sim", ",", "steps", ")", ":", "\n", "        ", "return", "(", "global_sim", "*", "(", "steps", "-", "1", ")", "+", "local_sim", ")", "/", "steps", "\n", "", "def", "forward", "(", "self", ",", "a", ",", "b", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.forward": [[56, 68], ["torch.zeros().type_as", "totaltext.DynamicMaxSimilarity.sim", "range", "range", "torch.zeros", "torch.stack", "torch.max", "a.size", "b.size", "totaltext.DynamicMaxSimilarity.push_similarity", "totaltext.DynamicMaxSimilarity.push_similarity", "totaltext.DynamicMaxSimilarity.push_similarity", "max", "max", "max"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.sim", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.push_similarity", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.push_similarity", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.DynamicMaxSimilarity.push_similarity"], ["", "def", "forward", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "si", "=", "torch", ".", "zeros", "(", "[", "a", ".", "size", "(", "0", ")", ",", "b", ".", "size", "(", "0", ")", ",", "self", ".", "frame_num", "+", "1", ",", "self", ".", "frame_num", "+", "1", "]", ")", ".", "type_as", "(", "a", ")", "\n", "local_similarity", "=", "self", ".", "sim", "(", "a", ",", "b", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frame_num", "+", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "self", ".", "frame_num", "+", "1", ")", ":", "\n", "                ", "local_sim", "=", "local_similarity", "[", ":", ",", ":", ",", "i", "-", "1", ",", "j", "-", "1", "]", "\n", "all_sim", "=", "torch", ".", "stack", "(", "[", "self", ".", "push_similarity", "(", "si", "[", ":", ",", ":", ",", "i", "-", "1", ",", "j", "]", ",", "local_sim", ",", "max", "(", "i", ",", "j", ")", ")", ",", "\n", "self", ".", "push_similarity", "(", "si", "[", ":", ",", ":", ",", "i", ",", "j", "-", "1", "]", ",", "local_sim", ",", "max", "(", "i", ",", "j", ")", ")", ",", "\n", "self", ".", "push_similarity", "(", "si", "[", ":", ",", ":", ",", "i", "-", "1", ",", "j", "-", "1", "]", ",", "local_sim", ",", "max", "(", "i", ",", "j", ")", ")", "]", "\n", ",", "dim", "=", "-", "1", ")", "\n", "si", "[", ":", ",", ":", ",", "i", ",", "j", "]", "=", "torch", ".", "max", "(", "all_sim", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "", "", "return", "si", "[", ":", ",", ":", ",", "-", "1", ",", "-", "1", "]", "\n", "", "", "def", "totaltext_retrieval_evaluation", "(", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.totaltext_retrieval_evaluation": [[68, 82], ["logging.getLogger", "logging.getLogger.info", "totaltext.evaluate_box_proposals"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.evaluate_box_proposals"], ["", "", "def", "totaltext_retrieval_evaluation", "(", "\n", "dataset", ",", "\n", "predictions", ",", "\n", "box_only", ",", "\n", "output_folder", ",", "\n", "iou_types", ",", "\n", "rec_type", ",", "\n", "expected_results", ",", "\n", "expected_results_sigma_tol", ",", "\n", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"maskrcnn_benchmark.inference\"", ")", "\n", "logger", ".", "info", "(", "\"Evaluating bbox proposals\"", ")", "\n", "mAP", "=", "evaluate_box_proposals", "(", "predictions", ",", "dataset", ",", "output_folder", ")", "\n", "return", "mAP", "\n", "", "def", "filter_inner_box", "(", "polys", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.filter_inner_box": [[82, 112], ["polys.reshape.reshape", "polys.reshape.mean", "numpy.zeros", "enumerate", "numpy.where", "polys.reshape.reshape", "cv2.pointPolygonTest", "numpy.where", "poly.astype", "min", "min", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "filter_inner_box", "(", "polys", ")", ":", "\n", "    ", "'''\n    filter thoese containing box.\n    First find box with overlap, the decide which to leave\n    '''", "\n", "if", "polys", ".", "size", "==", "0", ":", "\n", "        ", "return", "polys", "\n", "", "polys", "=", "polys", ".", "reshape", "(", "-", "1", ",", "4", ",", "2", ")", "\n", "centers", "=", "polys", ".", "mean", "(", "1", ")", "\n", "\n", "remove_flag", "=", "np", ".", "zeros", "(", "(", "centers", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "idx", ",", "cp", "in", "enumerate", "(", "centers", ")", ":", "\n", "        ", "contain_status", "=", "[", "cv2", ".", "pointPolygonTest", "(", "poly", ".", "astype", "(", "np", ".", "int32", ")", ",", "(", "cp", "[", "0", "]", ",", "cp", "[", "1", "]", ")", ",", "False", ")", "for", "poly", "in", "polys", "]", "\n", "idx_conts", "=", "np", ".", "where", "(", "np", ".", "array", "(", "contain_status", ")", "==", "True", ")", "[", "0", "]", "\n", "for", "id_c", "in", "idx_conts", ":", "\n", "            ", "if", "id_c", "!=", "idx", ":", "\n", "                ", "poly_m", "=", "polys", "[", "id_c", "]", "\n", "poly_c", "=", "polys", "[", "idx", "]", "\n", "\n", "# if one side of current poly is close to big poly", "\n", "# then remve this poly", "\n", "\n", "m_short", "=", "min", "(", "np", ".", "linalg", ".", "norm", "(", "poly_m", "[", "0", "]", "-", "poly_m", "[", "1", "]", ")", ",", "np", ".", "linalg", ".", "norm", "(", "poly_m", "[", "1", "]", "-", "poly_m", "[", "2", "]", ")", ")", "\n", "c_short", "=", "min", "(", "np", ".", "linalg", ".", "norm", "(", "poly_c", "[", "0", "]", "-", "poly_c", "[", "1", "]", ")", ",", "np", ".", "linalg", ".", "norm", "(", "poly_c", "[", "1", "]", "-", "poly_c", "[", "2", "]", ")", ")", "\n", "\n", "if", "m_short", "/", "c_short", ">", "0.9", "and", "m_short", "/", "c_short", "<", "1", "/", "0.9", ":", "\n", "                    ", "remove_flag", "[", "idx", "]", "=", "1", "\n", "", "", "", "", "keep_idx", "=", "np", ".", "where", "(", "remove_flag", "==", "False", ")", "\n", "polys", "=", "polys", "[", "keep_idx", ",", ":", ",", ":", "]", "\n", "return", "polys", ".", "reshape", "(", "-", "1", ",", "4", ",", "2", ")", "\n", "", "def", "write_to_file", "(", "bboxes", ",", "filename", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.write_to_file": [[112, 124], ["enumerate", "lines.append", "open", "f.write"], "function", ["None"], ["", "def", "write_to_file", "(", "bboxes", ",", "filename", ")", ":", "\n", "    ", "''' the socres is the average score of boundingbox region\n    '''", "\n", "lines", "=", "[", "]", "\n", "for", "b_idx", ",", "bbox", "in", "enumerate", "(", "bboxes", ")", ":", "\n", "        ", "line", "=", "\"{},{},{},{},{}\\r\\n\"", ".", "format", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ",", "bbox", "[", "2", "]", ",", "bbox", "[", "3", "]", ",", "\"None\"", ")", "\n", "\n", "lines", ".", "append", "(", "line", ")", "\n", "\n", "", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "lines", ":", "\n", "            ", "f", ".", "write", "(", "line", ")", "\n", "# print(filename)", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.show_detection": [[125, 134], ["os.path.join", "cv2.imread", "cv2.drawContours", "cv2.imwrite", "os.path.basename", "boxes.astype"], "function", ["None"], ["", "", "", "def", "show_detection", "(", "boxes", ",", "polys", ",", "path", ",", "output_folder", ")", ":", "\n", "    ", "import", "cv2", "\n", "# boxes = bbox.data.cpu().numpy()[:,(0,1,2,1,2,3,0,3)].reshape([-1,4,2])", "\n", "# polys = polys.data.cpu().numpy()", "\n", "img_save_path", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "os", ".", "path", ".", "basename", "(", "path", ")", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "path", ")", "\n", "cv2", ".", "drawContours", "(", "image", ",", "boxes", ".", "astype", "(", "np", ".", "int32", ")", ",", "-", "1", ",", "color", "=", "(", "255", ",", "0", ",", "0", ")", ",", "thickness", "=", "2", ")", "\n", "# cv2.drawContours(image, polys.astype(np.int32), -1, color=(0,0,255), thickness=2)", "\n", "cv2", ".", "imwrite", "(", "img_save_path", ",", "image", ")", "\n", "# print(img_save_path)", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP": [[136, 142], ["zip", "sklearn.metrics.average_precision_score", "APs.append"], "function", ["None"], ["", "def", "meanAP", "(", "preds", ",", "trues", ")", ":", "\n", "    ", "APs", "=", "[", "]", "\n", "for", "y_scores", ",", "y_trues", "in", "zip", "(", "preds", ",", "trues", ")", ":", "\n", "        ", "AP", "=", "average_precision_score", "(", "y_trues", ",", "y_scores", ")", "\n", "APs", ".", "append", "(", "AP", ")", "\n", "", "return", "APs", "\n", "", "def", "re_ranking", "(", "retrieval_texts_embedding", ",", "predictions", ",", "y_trues", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.re_ranking": [[142, 170], ["numpy.zeros", "enumerate", "totaltext.meanAP", "totaltext.meanAP", "retrieval_texts_embedding.items", "enumerate", "len", "len", "prediction.get_field", "retrieval_texts_embedding.keys", "prediction.get_field.size", "embedding.mm", "embedding.mm.max", "[].data.cpu().numpy", "prediction.get_field.t", "score.data.cpu().numpy", "box_idx.data.cpu().numpy", "[].data.cpu", "score.data.cpu", "box_idx.data.cpu", "prediction.get_field"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["", "def", "re_ranking", "(", "retrieval_texts_embedding", ",", "predictions", ",", "y_trues", ")", ":", "\n", "    ", "y_scores", "=", "np", ".", "zeros", "(", "[", "len", "(", "retrieval_texts_embedding", ".", "keys", "(", ")", ")", ",", "len", "(", "predictions", ")", "]", ")", "\n", "for", "idx", ",", "(", "text", ",", "embedding", ")", "in", "enumerate", "(", "retrieval_texts_embedding", ".", "items", "(", ")", ")", ":", "\n", "        ", "for", "image_id", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "            ", "img_embedding", "=", "prediction", ".", "get_field", "(", "\"imgs_embedding_nor\"", ")", "\n", "if", "img_embedding", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "                ", "score", "=", "0", "\n", "box", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "", "else", ":", "\n", "                ", "similarity", "=", "embedding", ".", "mm", "(", "img_embedding", ".", "t", "(", ")", ")", "\n", "score", ",", "box_idx", "=", "similarity", ".", "max", "(", "dim", "=", "1", ")", "\n", "# print(similarity.min(dim=1))", "\n", "score", "=", "score", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "# k = min(img_embedding.size(0),2)", "\n", "# print(similarity.shape)", "\n", "# score = torch.topk(similarity,k,dim=1)[0].mean().data.cpu().numpy()", "\n", "box_idx", "=", "box_idx", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "box", "=", "prediction", ".", "get_field", "(", "\"boxes\"", ")", "[", "box_idx", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "y_scores", "[", "idx", ",", "image_id", "]", "=", "score", "\n", "", "", "APs", "=", "meanAP", "(", "y_scores", ",", "y_trues", ")", "\n", "# show_aps(APs)", "\n", "# print(sum(APs)/len(APs))", "\n", "# y_scores2 = re_ranking(retrieval_image_embedding,predictions,y_trues)", "\n", "\n", "APs", "=", "meanAP", "(", "y_scores", "+", "y_scores2", ",", "y_trues", ")", "\n", "# print(sum(APs)/len(APs))", "\n", "return", "y_scores", "\n", "", "def", "evaluate_box_proposals", "(", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.evaluate_box_proposals": [[170, 229], ["totaltext.DynamicMaxSimilarity", "totaltext.GlobalLocalSimilarity", "enumerate", "torch.stack().data.cpu().numpy", "totaltext.meanAP", "prediction.bbox.data.cpu().numpy", "prediction.get_field", "prediction.get_field", "torch.stack().data.cpu().numpy.append", "sum", "len", "prediction.fields", "prediction.get_field", "prediction.get_field.size", "torch.stack().data.cpu().numpy.append", "prediction.get_field.dim", "DynamicMaxSimilarity.", "prediction.get_field.mm", "torch.stack().data.cpu", "prediction.bbox.data.cpu", "torch.zeros().to", "prediction.get_field.t", "words_embedding_nor.mm.max", "torch.zeros", "torch.stack", "prediction.get_field.size"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.to"], ["", "def", "evaluate_box_proposals", "(", "\n", "predictions", ",", "dataset", ",", "output_folder", ",", "thresholds", "=", "0.23", ",", "area", "=", "\"all\"", ",", "limit", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"Evaluate detection proposal recall metrics. This function is a much\n    faster alternative to the official COCO API recall evaluation code. However,\n    it produces slightly different results.\n    \"\"\"", "\n", "# img_floder = os.path.join(output_folder,'images')", "\n", "# txt_floder = os.path.join(output_folder,'texts')", "\n", "# for folder in [img_floder, txt_floder]:", "\n", "#     if not os.path.exists(folder):", "\n", "#         os.makedirs(folder)", "\n", "y_trues", "=", "dataset", ".", "dataset", ".", "y_trues", "\n", "words_embedding_nor", "=", "None", "\n", "y_scores", "=", "[", "]", "\n", "retrieval_image_embedding", "=", "{", "}", "\n", "dms", "=", "DynamicMaxSimilarity", "(", "15", ")", "\n", "gls", "=", "GlobalLocalSimilarity", "(", ")", "\n", "for", "image_id", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "# print(prediction.fields())", "\n", "        ", "if", "\"words_embedding_nor\"", "in", "prediction", ".", "fields", "(", ")", ":", "\n", "            ", "words_embedding_nor", "=", "prediction", ".", "get_field", "(", "\"words_embedding_nor\"", ")", "\n", "", "boxes", "=", "prediction", ".", "bbox", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "scale", "=", "prediction", ".", "get_field", "(", "\"scale\"", ")", "\n", "boxes", "[", ":", ",", ":", ":", "2", "]", "*=", "scale", "[", "0", "]", "\n", "boxes", "[", ":", ",", "1", ":", ":", "2", "]", "*=", "scale", "[", "1", "]", "\n", "img_embedding", "=", "prediction", ".", "get_field", "(", "\"imgs_embedding_nor\"", ")", "\n", "if", "img_embedding", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "            ", "y_scores", ".", "append", "(", "torch", ".", "zeros", "(", "[", "words_embedding_nor", ".", "size", "(", "0", ")", "]", ")", ".", "to", "(", "img_embedding", ".", "device", ")", ")", "\n", "continue", "\n", "", "if", "img_embedding", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "similarity", "=", "dms", "(", "words_embedding_nor", ",", "img_embedding", ")", "\n", "", "else", ":", "\n", "            ", "similarity", "=", "words_embedding_nor", ".", "mm", "(", "img_embedding", ".", "t", "(", ")", ")", "\n", "# ver = prediction.get_field(\"ver\").softmax(dim=-1)", "\n", "# print(ver)", "\n", "# similarity = similarity * ver[:,:,1]", "\n", "# similarity =  gls(words_embedding_nor, img_embedding)", "\n", "# score,box_idx =  similarity.max(dim=1)", "\n", "# # print(similarity.min(dim=1))", "\n", "# score = score.data.cpu().numpy()[0]", "\n", "# # k = min(img_embedding.size(0),2)", "\n", "# # print(similarity.shape)", "\n", "# # score = torch.topk(similarity,k,dim=1)[0].mean().data.cpu().numpy()", "\n", "# box_idx = box_idx.data.cpu().numpy()[0]", "\n", "# box = prediction.get_field(\"boxes\")[box_idx].data.cpu().numpy()", "\n", "# if score>max_score:", "\n", "#     max_score = score", "\n", "#     retrieval_image_embedding[text]=img_embedding[box_idx].view(1,-1)", "\n", "", "y_scores", ".", "append", "(", "similarity", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", ")", "\n", "# import ipdb;ipdb.set_trace()", "\n", "", "y_scores", "=", "torch", ".", "stack", "(", "y_scores", ",", "dim", "=", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "APs", "=", "meanAP", "(", "y_scores", ",", "y_trues", ")", "\n", "mAP", "=", "sum", "(", "APs", ")", "/", "len", "(", "APs", ")", "\n", "\n", "# y_scores2 = re_ranking(retrieval_image_embedding,predictions,y_trues)", "\n", "# print(mAP)", "\n", "# np.save(os.path.join(output_folder,\"retrieval_results.npy\"), retrieval_results)", "\n", "return", "mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.evaluate_box_proposals1": [[230, 280], ["os.path.join", "os.path.join", "enumerate", "numpy.zeros", "numpy.zeros", "enumerate", "totaltext.meanAP", "print", "prediction.get_field", "os.path.basename", "os.path.join().replace", "prediction.bbox.data.cpu().numpy", "prediction.get_field", "totaltext.write_to_file", "enumerate", "retrieval_texts_embedding.items", "enumerate", "os.path.exists", "os.makedirs", "str", "prediction.get_field.size", "prediction.get_field", "text.lower.lower", "words_embedding[].reshape", "len", "len", "len", "len", "prediction.get_field", "sum", "len", "prediction.get_field", "os.path.join", "prediction.bbox.data.cpu", "retrieval_texts_embedding.keys", "retrieval_texts_embedding.keys", "retrieval_texts_embedding.keys", "prediction.get_field.size", "[].data.cpu().numpy", "t.lower", "prediction.get_field", "[].data.cpu", "embedding.mm().max", "embedding.mm"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.retrieval.totaltext.meanAP", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.write_to_file", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["", "def", "evaluate_box_proposals1", "(", "\n", "predictions", ",", "dataset", ",", "output_folder", ",", "thresholds", "=", "0.23", ",", "area", "=", "\"all\"", ",", "limit", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"Evaluate detection proposal recall metrics. This function is a much\n    faster alternative to the official COCO API recall evaluation code. However,\n    it produces slightly different results.\n    \"\"\"", "\n", "gt_overlaps", "=", "[", "]", "\n", "num_pos", "=", "0", "\n", "img_floder", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "'images'", ")", "\n", "txt_floder", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "'texts'", ")", "\n", "for", "folder", "in", "[", "img_floder", ",", "txt_floder", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder", ")", "\n", "\n", "", "", "retrieval_texts_embedding", "=", "{", "}", "\n", "for", "image_id", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "        ", "words_embedding", "=", "prediction", ".", "get_field", "(", "\"words_embedding_nor\"", ")", "\n", "image_name", "=", "os", ".", "path", ".", "basename", "(", "str", "(", "prediction", ".", "get_field", "(", "\"path\"", ")", ")", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "txt_floder", ",", "image_name", ")", ".", "replace", "(", "\".jpg\"", ",", "'.txt'", ")", "\n", "# print(prediction.data.cpu().numpy().shape)", "\n", "boxes", "=", "prediction", ".", "bbox", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "scale", "=", "prediction", ".", "get_field", "(", "\"scale\"", ")", "\n", "boxes", "[", ":", ",", ":", ":", "2", "]", "*=", "scale", "[", "0", "]", "\n", "boxes", "[", ":", ",", "1", ":", ":", "2", "]", "*=", "scale", "[", "1", "]", "\n", "write_to_file", "(", "boxes", ",", "filename", ")", "\n", "if", "words_embedding", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "for", "idx", ",", "text", "in", "enumerate", "(", "prediction", ".", "get_field", "(", "\"texts\"", ")", ")", ":", "\n", "            ", "text", "=", "text", ".", "lower", "(", ")", "\n", "# print(retrieval_texts_embedding.keys())", "\n", "if", "text", "in", "retrieval_texts_embedding", ".", "keys", "(", ")", ":", "\n", "                ", "continue", "\n", "", "retrieval_texts_embedding", "[", "text", "]", "=", "words_embedding", "[", "idx", ",", ":", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "", "", "y_scores", "=", "np", ".", "zeros", "(", "[", "len", "(", "retrieval_texts_embedding", ".", "keys", "(", ")", ")", ",", "len", "(", "predictions", ")", "]", ")", "\n", "y_trues", "=", "np", ".", "zeros", "(", "[", "len", "(", "retrieval_texts_embedding", ".", "keys", "(", ")", ")", ",", "len", "(", "predictions", ")", "]", ")", "\n", "# print(y_scores.shape)", "\n", "for", "idx", ",", "(", "text", ",", "embedding", ")", "in", "enumerate", "(", "retrieval_texts_embedding", ".", "items", "(", ")", ")", ":", "\n", "\n", "        ", "for", "image_id", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "            ", "y_trues", "[", "idx", ",", "image_id", "]", "=", "1", "if", "text", "in", "[", "t", ".", "lower", "(", ")", "for", "t", "in", "prediction", ".", "get_field", "(", "\"texts\"", ")", "]", "else", "0", "\n", "img_embedding", "=", "prediction", ".", "get_field", "(", "\"images_embedding_nor\"", ")", "\n", "if", "img_embedding", ".", "size", "(", "1", ")", "==", "0", ":", "\n", "                ", "score", "=", "0", "\n", "", "else", ":", "\n", "# score =  embedding.mm(img_embedding.t()).max(dim=1)[0].data.cpu().numpy()[0]", "\n", "                ", "score", "=", "embedding", ".", "mm", "(", "img_embedding", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "", "y_scores", "[", "idx", ",", "image_id", "]", "=", "score", "\n", "", "", "APs", "=", "meanAP", "(", "y_scores", ",", "y_trues", ")", "\n", "print", "(", "sum", "(", "APs", ")", "/", "len", "(", "APs", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.deteval.input_reading_mod": [[26, 32], ["open", "input_fid.readlines", "x.strip"], "function", ["None"], ["def", "input_reading_mod", "(", "input_dir", ",", "input", ")", ":", "\n", "    ", "\"\"\"This helper reads input from txt files\"\"\"", "\n", "with", "open", "(", "'%s/%s'", "%", "(", "input_dir", ",", "input", ")", ",", "'r'", ")", "as", "input_fid", ":", "\n", "        ", "pred", "=", "input_fid", ".", "readlines", "(", ")", "\n", "", "det", "=", "[", "x", ".", "strip", "(", "'\\n'", ")", "for", "x", "in", "pred", "]", "\n", "return", "det", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.deteval.gt_reading_mod": [[34, 40], ["scipy.io.loadmat", "gt_id.split"], "function", ["None"], ["", "def", "gt_reading_mod", "(", "gt_dir", ",", "gt_id", ")", ":", "\n", "    ", "\"\"\"This helper reads groundtruths from mat files\"\"\"", "\n", "gt_id", "=", "gt_id", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "gt", "=", "io", ".", "loadmat", "(", "'%s/poly_gt_%s.mat'", "%", "(", "gt_dir", ",", "gt_id", ")", ")", "\n", "gt", "=", "gt", "[", "'polygt'", "]", "\n", "return", "gt", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.deteval.detection_filtering": [[42, 61], ["enumerate", "list", "list", "enumerate", "map", "map", "list", "polygon_fast.iod", "numpy.squeeze", "numpy.squeeze", "detection.split.split", "map", "detection.split.split"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.iod"], ["", "def", "detection_filtering", "(", "detections", ",", "groundtruths", ",", "threshold", "=", "0.5", ",", "E2E", "=", "False", ")", ":", "\n", "    ", "for", "gt_id", ",", "gt", "in", "enumerate", "(", "groundtruths", ")", ":", "\n", "        ", "if", "(", "gt", "[", "5", "]", "==", "'#'", ")", "and", "(", "gt", "[", "1", "]", ".", "shape", "[", "1", "]", ">", "1", ")", ":", "\n", "            ", "gt_x", "=", "list", "(", "map", "(", "int", ",", "np", ".", "squeeze", "(", "gt", "[", "1", "]", ")", ")", ")", "\n", "gt_y", "=", "list", "(", "map", "(", "int", ",", "np", ".", "squeeze", "(", "gt", "[", "3", "]", ")", ")", ")", "\n", "for", "det_id", ",", "detection", "in", "enumerate", "(", "detections", ")", ":", "\n", "                ", "if", "E2E", ":", "\n", "                    ", "detection", "=", "detection", ".", "split", "(", "','", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "detection", "=", "detection", ".", "split", "(", "','", ")", "\n", "", "detection", "=", "list", "(", "map", "(", "int", ",", "detection", ")", ")", "\n", "det_y", "=", "detection", "[", "0", ":", ":", "2", "]", "\n", "det_x", "=", "detection", "[", "1", ":", ":", "2", "]", "\n", "det_gt_iou", "=", "iod", "(", "det_x", ",", "det_y", ",", "gt_x", ",", "gt_y", ")", "\n", "if", "det_gt_iou", ">", "threshold", ":", "\n", "                    ", "detections", "[", "det_id", "]", "=", "[", "]", "\n", "\n", "", "", "detections", "[", ":", "]", "=", "[", "item", "for", "item", "in", "detections", "if", "item", "!=", "[", "]", "]", "\n", "", "", "return", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.deteval.sigma_calculation": [[62, 68], ["numpy.round", "polygon_fast.area_of_intersection", "polygon_fast.area"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area_of_intersection", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area"], ["", "def", "sigma_calculation", "(", "det_x", ",", "det_y", ",", "gt_x", ",", "gt_y", ")", ":", "\n", "    ", "\"\"\"\n    sigma = inter_area / gt_area\n    \"\"\"", "\n", "# print(area_of_intersection(det_x, det_y, gt_x, gt_y))", "\n", "return", "np", ".", "round", "(", "(", "area_of_intersection", "(", "det_x", ",", "det_y", ",", "gt_x", ",", "gt_y", ")", "/", "area", "(", "gt_x", ",", "gt_y", ")", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.deteval.tau_calculation": [[69, 74], ["numpy.round", "polygon_fast.area_of_intersection", "polygon_fast.area"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area_of_intersection", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area"], ["", "def", "tau_calculation", "(", "det_x", ",", "det_y", ",", "gt_x", ",", "gt_y", ")", ":", "\n", "    ", "\"\"\"\n    tau = inter_area / det_area\n    \"\"\"", "\n", "return", "np", ".", "round", "(", "(", "area_of_intersection", "(", "det_x", ",", "det_y", ",", "gt_x", ",", "gt_y", ")", "/", "area", "(", "det_x", ",", "det_y", ")", ")", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.deteval.transcription_match": [[75, 99], ["str", "re.sub().lower", "re.sub().lower().strip", "specialCharacters.find", "specialCharacters.find", "specialCharacters.find", "specialCharacters.find", "re.sub", "re.sub().lower", "re.sub", "len", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "transcription_match", "(", "transGt", ",", "transDet", ",", "specialCharacters", "=", "str", "(", "'!?.:,*\"()\u00b7[]/\\''", ")", ",", "onlyRemoveFirstLastCharacterGT", "=", "False", ")", ":", "\n", "\n", "    ", "if", "onlyRemoveFirstLastCharacterGT", ":", "\n", "#special characters in GT are allowed only at initial or final position", "\n", "        ", "if", "(", "transGt", "==", "transDet", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "if", "specialCharacters", ".", "find", "(", "transGt", "[", "0", "]", ")", ">", "-", "1", ":", "\n", "            ", "if", "transGt", "[", "1", ":", "]", "==", "transDet", ":", "\n", "                ", "return", "True", "\n", "\n", "", "", "if", "specialCharacters", ".", "find", "(", "transGt", "[", "-", "1", "]", ")", ">", "-", "1", ":", "\n", "            ", "if", "transGt", "[", "0", ":", "len", "(", "transGt", ")", "-", "1", "]", "==", "transDet", ":", "\n", "                ", "return", "True", "\n", "\n", "", "", "if", "specialCharacters", ".", "find", "(", "transGt", "[", "0", "]", ")", ">", "-", "1", "and", "specialCharacters", ".", "find", "(", "transGt", "[", "-", "1", "]", ")", ">", "-", "1", ":", "\n", "            ", "if", "transGt", "[", "1", ":", "len", "(", "transGt", ")", "-", "1", "]", "==", "transDet", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "", "else", ":", "\n", "        ", "transGt", "=", "re", ".", "sub", "(", "'[!?.:,*\"()\u00b7[]/\\']'", ",", "''", ",", "transGt", ")", ".", "lower", "(", ")", "\n", "transDet", "=", "re", ".", "sub", "(", "'[!?.:,*\"()\u00b7[]/\\']'", ",", "''", ",", "transDet", ")", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "\n", "return", "transGt", "==", "transDet", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.deteval.eval_result": [[100, 377], ["os.listdir", "tqdm.tqdm", "range", "print", "range", "range", "range", "len", "numpy.zeros", "numpy.zeros", "deteval.eval_result.one_to_one"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "def", "eval_result", "(", "input_dir", ",", "gt_dir", ",", "E2E", "=", "False", ")", ":", "\n", "    ", "allInputs", "=", "listdir", "(", "input_dir", ")", "\n", "##############################Initialization###################################", "\n", "global_tp", "=", "0", "\n", "global_fp", "=", "0", "\n", "global_fn", "=", "0", "\n", "global_sigma", "=", "[", "]", "\n", "global_tau", "=", "[", "]", "\n", "global_text_gt", "=", "[", "]", "\n", "global_text_det", "=", "[", "]", "\n", "tr", "=", "0.7", "\n", "tp", "=", "0.6", "\n", "fsc_k", "=", "0.8", "\n", "k", "=", "2", "\n", "###############################################################################", "\n", "\n", "for", "input_id", "in", "tqdm", "(", "allInputs", ")", ":", "\n", "        ", "if", "(", "input_id", "!=", "'.DS_Store'", ")", "and", "(", "input_id", "!=", "'Pascal_result.txt'", ")", "and", "(", "\n", "input_id", "!=", "'Pascal_result_curved.txt'", ")", "and", "(", "input_id", "!=", "'Pascal_result_non_curved.txt'", ")", "and", "(", "input_id", "!=", "'Deteval_result.txt'", ")", "and", "(", "input_id", "!=", "'Deteval_result_curved.txt'", ")", "and", "(", "input_id", "!=", "'Deteval_result_non_curved.txt'", ")", ":", "\n", "# print(input_id)", "\n", "            ", "detections", "=", "input_reading_mod", "(", "input_dir", ",", "input_id", ")", "\n", "groundtruths", "=", "gt_reading_mod", "(", "gt_dir", ",", "input_id", ")", "\n", "detections", "=", "detection_filtering", "(", "detections", ",", "groundtruths", ",", "E2E", "=", "E2E", ")", "# filters detections overlapping with DC area", "\n", "dc_id", "=", "np", ".", "where", "(", "groundtruths", "[", ":", ",", "5", "]", "==", "'#'", ")", "\n", "groundtruths", "=", "np", ".", "delete", "(", "groundtruths", ",", "(", "dc_id", ")", ",", "(", "0", ")", ")", "\n", "\n", "local_sigma_table", "=", "np", ".", "zeros", "(", "(", "groundtruths", ".", "shape", "[", "0", "]", ",", "len", "(", "detections", ")", ")", ")", "\n", "local_tau_table", "=", "np", ".", "zeros", "(", "(", "groundtruths", ".", "shape", "[", "0", "]", ",", "len", "(", "detections", ")", ")", ")", "\n", "local_text_det", "=", "[", "]", "\n", "local_text_gt", "=", "[", "]", "\n", "\n", "for", "gt_id", ",", "gt", "in", "enumerate", "(", "groundtruths", ")", ":", "\n", "                ", "local_text_gt", ".", "append", "(", "gt", "[", "4", "]", ")", "\n", "if", "len", "(", "detections", ")", ">", "0", ":", "\n", "                    ", "for", "det_id", ",", "detection", "in", "enumerate", "(", "detections", ")", ":", "\n", "                        ", "if", "E2E", ":", "\n", "                            ", "detection", "=", "detection", ".", "split", "(", "','", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "                            ", "detection", "=", "detection", ".", "split", "(", "','", ")", "\n", "", "detection", "=", "list", "(", "map", "(", "int", ",", "detection", ")", ")", "\n", "det_y", "=", "detection", "[", "0", ":", ":", "2", "]", "\n", "det_x", "=", "detection", "[", "1", ":", ":", "2", "]", "\n", "gt_x", "=", "list", "(", "map", "(", "int", ",", "np", ".", "squeeze", "(", "gt", "[", "1", "]", ")", ")", ")", "\n", "gt_y", "=", "list", "(", "map", "(", "int", ",", "np", ".", "squeeze", "(", "gt", "[", "3", "]", ")", ")", ")", "\n", "\n", "local_sigma_table", "[", "gt_id", ",", "det_id", "]", "=", "sigma_calculation", "(", "det_x", ",", "det_y", ",", "gt_x", ",", "gt_y", ")", "\n", "local_tau_table", "[", "gt_id", ",", "det_id", "]", "=", "tau_calculation", "(", "det_x", ",", "det_y", ",", "gt_x", ",", "gt_y", ")", "\n", "", "", "", "if", "E2E", ":", "\n", "                ", "for", "det_id", ",", "detection", "in", "enumerate", "(", "detections", ")", ":", "\n", "                    ", "text", "=", "detection", ".", "split", "(", "','", ")", "[", "-", "1", "]", "\n", "local_text_det", ".", "append", "(", "text", ")", "\n", "\n", "", "global_text_gt", ".", "append", "(", "local_text_gt", ")", "\n", "global_text_det", ".", "append", "(", "local_text_det", ")", "\n", "\n", "", "global_sigma", ".", "append", "(", "local_sigma_table", ")", "\n", "global_tau", ".", "append", "(", "local_tau_table", ")", "\n", "\n", "", "", "global_accumulative_recall", "=", "0", "\n", "global_accumulative_precision", "=", "0", "\n", "total_num_gt", "=", "0", "\n", "total_num_det", "=", "0", "\n", "global_acumalative_text", "=", "0", "\n", "\n", "\n", "def", "one_to_one", "(", "local_sigma_table", ",", "local_tau_table", ",", "local_accumulative_recall", ",", "\n", "local_accumulative_precision", ",", "global_accumulative_recall", ",", "global_accumulative_precision", ",", "\n", "gt_flag", ",", "det_flag", ",", "local_text_gt", "=", "None", ",", "local_text_det", "=", "None", ",", "global_acumalative_text", "=", "None", ")", ":", "\n", "        ", "for", "gt_id", "in", "range", "(", "num_gt", ")", ":", "\n", "            ", "gt_matching_qualified_sigma_candidates", "=", "np", ".", "where", "(", "local_sigma_table", "[", "gt_id", ",", ":", "]", ">", "tr", ")", "\n", "gt_matching_num_qualified_sigma_candidates", "=", "gt_matching_qualified_sigma_candidates", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "gt_matching_qualified_tau_candidates", "=", "np", ".", "where", "(", "local_tau_table", "[", "gt_id", ",", ":", "]", ">", "tp", ")", "\n", "gt_matching_num_qualified_tau_candidates", "=", "gt_matching_qualified_tau_candidates", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "det_matching_qualified_sigma_candidates", "=", "np", ".", "where", "(", "local_sigma_table", "[", ":", ",", "gt_matching_qualified_sigma_candidates", "[", "0", "]", "]", ">", "tr", ")", "\n", "det_matching_num_qualified_sigma_candidates", "=", "det_matching_qualified_sigma_candidates", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "det_matching_qualified_tau_candidates", "=", "np", ".", "where", "(", "local_tau_table", "[", ":", ",", "gt_matching_qualified_tau_candidates", "[", "0", "]", "]", ">", "tp", ")", "\n", "det_matching_num_qualified_tau_candidates", "=", "det_matching_qualified_tau_candidates", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "if", "(", "gt_matching_num_qualified_sigma_candidates", "==", "1", ")", "and", "(", "gt_matching_num_qualified_tau_candidates", "==", "1", ")", "and", "(", "det_matching_num_qualified_sigma_candidates", "==", "1", ")", "and", "(", "det_matching_num_qualified_tau_candidates", "==", "1", ")", ":", "\n", "                ", "global_accumulative_recall", "=", "global_accumulative_recall", "+", "1.0", "\n", "global_accumulative_precision", "=", "global_accumulative_precision", "+", "1.0", "\n", "local_accumulative_recall", "=", "local_accumulative_recall", "+", "1.0", "\n", "local_accumulative_precision", "=", "local_accumulative_precision", "+", "1.0", "\n", "\n", "gt_flag", "[", "0", ",", "gt_id", "]", "=", "1", "\n", "matched_det_id", "=", "np", ".", "where", "(", "local_sigma_table", "[", "gt_id", ",", ":", "]", ">", "tr", ")", "\n", "det_flag", "[", "0", ",", "matched_det_id", "]", "=", "1", "\n", "\n", "if", "E2E", ":", "\n", "                    ", "det_index", "=", "matched_det_id", "[", "0", "]", "[", "0", "]", "\n", "det_rec", "=", "transcription_match", "(", "local_text_gt", "[", "gt_id", "]", "[", "0", "]", ",", "local_text_det", "[", "det_index", "]", ")", "\n", "global_acumalative_text", "=", "global_acumalative_text", "+", "det_rec", "\n", "\n", "", "", "", "if", "E2E", ":", "\n", "            ", "return", "local_accumulative_recall", ",", "local_accumulative_precision", ",", "global_accumulative_recall", ",", "global_accumulative_precision", ",", "gt_flag", ",", "det_flag", ",", "global_acumalative_text", "\n", "", "else", ":", "\n", "            ", "return", "local_accumulative_recall", ",", "local_accumulative_precision", ",", "global_accumulative_recall", ",", "global_accumulative_precision", ",", "gt_flag", ",", "det_flag", ",", "None", "\n", "\n", "", "", "def", "one_to_many", "(", "local_sigma_table", ",", "local_tau_table", ",", "local_accumulative_recall", ",", "\n", "local_accumulative_precision", ",", "global_accumulative_recall", ",", "global_accumulative_precision", ",", "\n", "gt_flag", ",", "det_flag", ",", "\n", "local_text_gt", "=", "None", ",", "local_text_det", "=", "None", ",", "global_acumalative_text", "=", "None", ")", ":", "\n", "        ", "for", "gt_id", "in", "range", "(", "num_gt", ")", ":", "\n", "#skip the following if the groundtruth was matched", "\n", "            ", "if", "gt_flag", "[", "0", ",", "gt_id", "]", ">", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "non_zero_in_sigma", "=", "np", ".", "where", "(", "local_sigma_table", "[", "gt_id", ",", ":", "]", ">", "0", ")", "\n", "num_non_zero_in_sigma", "=", "non_zero_in_sigma", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "if", "num_non_zero_in_sigma", ">=", "k", ":", "\n", "####search for all detections that overlaps with this groundtruth", "\n", "                ", "qualified_tau_candidates", "=", "np", ".", "where", "(", "(", "local_tau_table", "[", "gt_id", ",", ":", "]", ">=", "tp", ")", "&", "(", "det_flag", "[", "0", ",", ":", "]", "==", "0", ")", ")", "\n", "num_qualified_tau_candidates", "=", "qualified_tau_candidates", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "if", "num_qualified_tau_candidates", "==", "1", ":", "\n", "                    ", "if", "(", "(", "local_tau_table", "[", "gt_id", ",", "qualified_tau_candidates", "]", ">=", "tp", ")", "and", "(", "local_sigma_table", "[", "gt_id", ",", "qualified_tau_candidates", "]", ">=", "tr", ")", ")", ":", "\n", "#became an one-to-one case", "\n", "                        ", "global_accumulative_recall", "=", "global_accumulative_recall", "+", "1.0", "\n", "global_accumulative_precision", "=", "global_accumulative_precision", "+", "1.0", "\n", "local_accumulative_recall", "=", "local_accumulative_recall", "+", "1.0", "\n", "local_accumulative_precision", "=", "local_accumulative_precision", "+", "1.0", "\n", "\n", "gt_flag", "[", "0", ",", "gt_id", "]", "=", "1", "\n", "det_flag", "[", "0", ",", "qualified_tau_candidates", "]", "=", "1", "\n", "\n", "if", "E2E", ":", "\n", "                            ", "det_index", "=", "qualified_tau_candidates", "[", "0", "]", "[", "0", "]", "\n", "det_rec", "=", "transcription_match", "(", "local_text_gt", "[", "gt_id", "]", "[", "0", "]", ",", "local_text_det", "[", "det_index", "]", ")", "\n", "global_acumalative_text", "=", "global_acumalative_text", "+", "det_rec", "\n", "\n", "", "", "", "elif", "(", "np", ".", "sum", "(", "local_sigma_table", "[", "gt_id", ",", "qualified_tau_candidates", "]", ")", ">=", "tr", ")", ":", "\n", "                    ", "gt_flag", "[", "0", ",", "gt_id", "]", "=", "1", "\n", "det_flag", "[", "0", ",", "qualified_tau_candidates", "]", "=", "1", "\n", "\n", "global_accumulative_recall", "=", "global_accumulative_recall", "+", "fsc_k", "\n", "global_accumulative_precision", "=", "global_accumulative_precision", "+", "num_qualified_tau_candidates", "*", "fsc_k", "\n", "\n", "local_accumulative_recall", "=", "local_accumulative_recall", "+", "fsc_k", "\n", "local_accumulative_precision", "=", "local_accumulative_precision", "+", "num_qualified_tau_candidates", "*", "fsc_k", "\n", "\n", "if", "E2E", ":", "\n", "                        ", "idx", "=", "qualified_tau_candidates", "[", "0", "]", "[", ":", "2", "]", "\n", "text_det", "=", "local_text_det", "[", "idx", "[", "0", "]", "]", "+", "local_text_det", "[", "idx", "[", "1", "]", "]", "\n", "det_rec_0", "=", "transcription_match", "(", "local_text_gt", "[", "gt_id", "]", "[", "0", "]", ",", "text_det", ")", "\n", "text_det", "=", "local_text_det", "[", "idx", "[", "1", "]", "]", "+", "local_text_det", "[", "idx", "[", "0", "]", "]", "\n", "det_rec_1", "=", "transcription_match", "(", "local_text_gt", "[", "gt_id", "]", "[", "0", "]", ",", "text_det", ")", "\n", "global_acumalative_text", "=", "global_acumalative_text", "+", "(", "det_rec_0", "or", "det_rec_1", ")", "\n", "\n", "", "", "", "", "if", "E2E", ":", "\n", "            ", "return", "local_accumulative_recall", ",", "local_accumulative_precision", ",", "global_accumulative_recall", ",", "global_accumulative_precision", ",", "gt_flag", ",", "det_flag", ",", "global_acumalative_text", "\n", "", "else", ":", "\n", "            ", "return", "local_accumulative_recall", ",", "local_accumulative_precision", ",", "global_accumulative_recall", ",", "global_accumulative_precision", ",", "gt_flag", ",", "det_flag", "\n", "\n", "", "", "def", "many_to_one", "(", "local_sigma_table", ",", "local_tau_table", ",", "local_accumulative_recall", ",", "\n", "local_accumulative_precision", ",", "global_accumulative_recall", ",", "global_accumulative_precision", ",", "\n", "gt_flag", ",", "det_flag", ",", "\n", "local_text_gt", "=", "None", ",", "local_text_det", "=", "None", ",", "global_acumalative_text", "=", "None", ")", ":", "\n", "        ", "for", "det_id", "in", "range", "(", "num_det", ")", ":", "\n", "# skip the following if the detection was matched", "\n", "            ", "if", "det_flag", "[", "0", ",", "det_id", "]", ">", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "non_zero_in_tau", "=", "np", ".", "where", "(", "local_tau_table", "[", ":", ",", "det_id", "]", ">", "0", ")", "\n", "num_non_zero_in_tau", "=", "non_zero_in_tau", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "if", "num_non_zero_in_tau", ">=", "k", ":", "\n", "####search for all detections that overlaps with this groundtruth", "\n", "                ", "qualified_sigma_candidates", "=", "np", ".", "where", "(", "(", "local_sigma_table", "[", ":", ",", "det_id", "]", ">=", "tp", ")", "&", "(", "gt_flag", "[", "0", ",", ":", "]", "==", "0", ")", ")", "\n", "num_qualified_sigma_candidates", "=", "qualified_sigma_candidates", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "if", "num_qualified_sigma_candidates", "==", "1", ":", "\n", "                    ", "if", "(", "(", "local_tau_table", "[", "qualified_sigma_candidates", ",", "det_id", "]", ">=", "tp", ")", "and", "(", "local_sigma_table", "[", "qualified_sigma_candidates", ",", "det_id", "]", ">=", "tr", ")", ")", ":", "\n", "#became an one-to-one case", "\n", "                        ", "global_accumulative_recall", "=", "global_accumulative_recall", "+", "1.0", "\n", "global_accumulative_precision", "=", "global_accumulative_precision", "+", "1.0", "\n", "local_accumulative_recall", "=", "local_accumulative_recall", "+", "1.0", "\n", "local_accumulative_precision", "=", "local_accumulative_precision", "+", "1.0", "\n", "\n", "gt_flag", "[", "0", ",", "qualified_sigma_candidates", "]", "=", "1", "\n", "det_flag", "[", "0", ",", "det_id", "]", "=", "1", "\n", "\n", "if", "E2E", ":", "\n", "                            ", "gt_index", "=", "qualified_sigma_candidates", "[", "0", "]", "[", "0", "]", "\n", "det_rec", "=", "transcription_match", "(", "local_text_gt", "[", "gt_index", "]", "[", "0", "]", ",", "local_text_det", "[", "det_id", "]", ")", "\n", "global_acumalative_text", "=", "global_acumalative_text", "+", "det_rec", "\n", "\n", "\n", "", "", "", "elif", "(", "np", ".", "sum", "(", "local_tau_table", "[", "qualified_sigma_candidates", ",", "det_id", "]", ")", ">=", "tp", ")", ":", "\n", "                    ", "det_flag", "[", "0", ",", "det_id", "]", "=", "1", "\n", "gt_flag", "[", "0", ",", "qualified_sigma_candidates", "]", "=", "1", "\n", "\n", "global_accumulative_recall", "=", "global_accumulative_recall", "+", "num_qualified_sigma_candidates", "*", "fsc_k", "\n", "global_accumulative_precision", "=", "global_accumulative_precision", "+", "fsc_k", "\n", "\n", "local_accumulative_recall", "=", "local_accumulative_recall", "+", "num_qualified_sigma_candidates", "*", "fsc_k", "\n", "local_accumulative_precision", "=", "local_accumulative_precision", "+", "fsc_k", "\n", "", "", "", "if", "E2E", ":", "\n", "            ", "return", "local_accumulative_recall", ",", "local_accumulative_precision", ",", "global_accumulative_recall", ",", "global_accumulative_precision", ",", "gt_flag", ",", "det_flag", ",", "global_acumalative_text", "\n", "", "else", ":", "\n", "            ", "return", "local_accumulative_recall", ",", "local_accumulative_precision", ",", "global_accumulative_recall", ",", "global_accumulative_precision", ",", "gt_flag", ",", "det_flag", "\n", "\n", "", "", "for", "idx", "in", "range", "(", "len", "(", "global_sigma", ")", ")", ":", "\n", "\n", "        ", "local_sigma_table", "=", "global_sigma", "[", "idx", "]", "\n", "local_tau_table", "=", "global_tau", "[", "idx", "]", "\n", "if", "E2E", ":", "\n", "            ", "local_text_gt", "=", "global_text_gt", "[", "idx", "]", "\n", "local_text_det", "=", "global_text_det", "[", "idx", "]", "\n", "\n", "", "num_gt", "=", "local_sigma_table", ".", "shape", "[", "0", "]", "\n", "num_det", "=", "local_sigma_table", ".", "shape", "[", "1", "]", "\n", "\n", "total_num_gt", "=", "total_num_gt", "+", "num_gt", "\n", "total_num_det", "=", "total_num_det", "+", "num_det", "\n", "\n", "local_accumulative_recall", "=", "0", "\n", "local_accumulative_precision", "=", "0", "\n", "gt_flag", "=", "np", ".", "zeros", "(", "(", "1", ",", "num_gt", ")", ")", "\n", "det_flag", "=", "np", ".", "zeros", "(", "(", "1", ",", "num_det", ")", ")", "\n", "\n", "#######first check for one-to-one case##########", "\n", "local_accumulative_recall", ",", "local_accumulative_precision", ",", "global_accumulative_recall", ",", "global_accumulative_precision", ",", "gt_flag", ",", "det_flag", ",", "global_acumalative_text", "=", "one_to_one", "(", "local_sigma_table", ",", "local_tau_table", ",", "\n", "local_accumulative_recall", ",", "local_accumulative_precision", ",", "\n", "global_accumulative_recall", ",", "global_accumulative_precision", ",", "\n", "gt_flag", ",", "det_flag", ",", "\n", "local_text_gt", ",", "local_text_det", ",", "global_acumalative_text", ")", "\n", "\n", "#######then check for one-to-many case##########", "\n", "local_accumulative_recall", ",", "local_accumulative_precision", ",", "global_accumulative_recall", ",", "global_accumulative_precision", ",", "gt_flag", ",", "det_flag", ",", "global_acumalative_text", "=", "one_to_many", "(", "local_sigma_table", ",", "local_tau_table", ",", "\n", "local_accumulative_recall", ",", "local_accumulative_precision", ",", "\n", "global_accumulative_recall", ",", "global_accumulative_precision", ",", "\n", "gt_flag", ",", "det_flag", ",", "\n", "local_text_gt", ",", "local_text_det", ",", "global_acumalative_text", ")", "\n", "\n", "#######then check for many-to-one case##########", "\n", "local_accumulative_recall", ",", "local_accumulative_precision", ",", "global_accumulative_recall", ",", "global_accumulative_precision", ",", "gt_flag", ",", "det_flag", ",", "global_acumalative_text", "=", "many_to_one", "(", "local_sigma_table", ",", "local_tau_table", ",", "\n", "local_accumulative_recall", ",", "local_accumulative_precision", ",", "\n", "global_accumulative_recall", ",", "global_accumulative_precision", ",", "\n", "gt_flag", ",", "det_flag", ",", "\n", "local_text_gt", ",", "local_text_det", ",", "global_acumalative_text", ")", "\n", "\n", "\n", "\n", "", "try", ":", "\n", "        ", "recall", "=", "global_accumulative_recall", "/", "total_num_gt", "\n", "", "except", "ZeroDivisionError", ":", "\n", "        ", "recall", "=", "0", "\n", "\n", "", "try", ":", "\n", "        ", "precision", "=", "global_accumulative_precision", "/", "total_num_det", "\n", "", "except", "ZeroDivisionError", ":", "\n", "        ", "precision", "=", "0", "\n", "\n", "", "try", ":", "\n", "        ", "f_score", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "", "except", "ZeroDivisionError", ":", "\n", "        ", "f_score", "=", "0", "\n", "\n", "", "try", ":", "\n", "        ", "recog_r", "=", "global_acumalative_text", "/", "total_num_gt", "\n", "recog_p", "=", "global_acumalative_text", "/", "total_num_det", "\n", "recog_f", "=", "2", "*", "recog_r", "*", "recog_p", "/", "(", "recog_r", "+", "recog_p", ")", "\n", "", "except", ":", "\n", "        ", "recog_r", "=", "0", "\n", "recog_p", "=", "0", "\n", "recog_f", "=", "0", "\n", "\n", "", "print", "(", "precision", ",", "recall", ",", "f_score", ",", "recog_r", ",", "recog_f", ")", "\n", "return", "{", "'precison'", ":", "precision", ",", "'recall'", ":", "recall", ",", "'hmean'", ":", "f_score", ",", "'recog_r'", ":", "recog_r", ",", "'recog_f'", ":", "recog_f", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.Pascal_VOC.transcription_match": [[15, 39], ["str", "re.sub().lower", "re.sub().lower().strip", "specialCharacters.find", "specialCharacters.find", "specialCharacters.find", "specialCharacters.find", "re.sub", "re.sub().lower", "re.sub", "len", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["def", "transcription_match", "(", "transGt", ",", "transDet", ",", "specialCharacters", "=", "str", "(", "'!?.:,*\"()\u00b7[]/\\''", ")", ",", "onlyRemoveFirstLastCharacterGT", "=", "False", ")", ":", "\n", "\n", "    ", "if", "onlyRemoveFirstLastCharacterGT", ":", "\n", "#special characters in GT are allowed only at initial or final position", "\n", "        ", "if", "(", "transGt", "==", "transDet", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "if", "specialCharacters", ".", "find", "(", "transGt", "[", "0", "]", ")", ">", "-", "1", ":", "\n", "            ", "if", "transGt", "[", "1", ":", "]", "==", "transDet", ":", "\n", "                ", "return", "True", "\n", "\n", "", "", "if", "specialCharacters", ".", "find", "(", "transGt", "[", "-", "1", "]", ")", ">", "-", "1", ":", "\n", "            ", "if", "transGt", "[", "0", ":", "len", "(", "transGt", ")", "-", "1", "]", "==", "transDet", ":", "\n", "                ", "return", "True", "\n", "\n", "", "", "if", "specialCharacters", ".", "find", "(", "transGt", "[", "0", "]", ")", ">", "-", "1", "and", "specialCharacters", ".", "find", "(", "transGt", "[", "-", "1", "]", ")", ">", "-", "1", ":", "\n", "            ", "if", "transGt", "[", "1", ":", "len", "(", "transGt", ")", "-", "1", "]", "==", "transDet", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "", "else", ":", "\n", "        ", "transGt", "=", "re", ".", "sub", "(", "'[!?.:,*\"()\u00b7[]/\\']'", ",", "''", ",", "transGt", ")", ".", "lower", "(", ")", "\n", "transDet", "=", "re", ".", "sub", "(", "'[!?.:,*\"()\u00b7[]/\\']'", ",", "''", ",", "transDet", ")", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "\n", "return", "transGt", "==", "transDet", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.Pascal_VOC.eval_result": [[40, 192], ["tqdm.tqdm", "print", "enumerate", "os.path.exists", "open", "input_fid.readlines", "list", "list", "dts.append", "open", "input_fid.readlines", "line.strip().split", "list", "list", "gts.append", "open", "input_fid.readlines", "line.strip().split", "list", "gts.append", "list", "list", "enumerate", "Pascal_VOC.eval_result.input_reading_mod"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.deteval.input_reading_mod"], ["", "", "def", "eval_result", "(", "input_dir", ",", "allInputs", ",", "gt_floder", ",", "ignore_difficult", "=", "True", ")", ":", "\n", "# allInputs = listdir(input_dir)", "\n", "# f = open(gt_list)", "\n", "# lines = f.readlines()", "\n", "# allInputs = [line.strip().split(',')[1] for line in lines]", "\n", "\n", "    ", "def", "input_reading_mod", "(", "path", ")", ":", "\n", "        ", "\"\"\"This helper convert input\"\"\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", "==", "False", ":", "\n", "            ", "return", "[", "]", "\n", "", "with", "open", "(", "path", ",", "'r'", ")", "as", "input_fid", ":", "\n", "            ", "lines", "=", "input_fid", ".", "readlines", "(", ")", "\n", "", "dts", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "[", ":", "-", "1", "]", "\n", "pts", "=", "list", "(", "map", "(", "float", ",", "parts", ")", ")", "\n", "# print(np.array(pts).shape)", "\n", "pts", "=", "list", "(", "[", "pts", "[", "0", "]", ",", "pts", "[", "1", "]", ",", "pts", "[", "2", "]", ",", "pts", "[", "1", "]", ",", "pts", "[", "2", "]", ",", "pts", "[", "3", "]", ",", "pts", "[", "0", "]", ",", "pts", "[", "3", "]", "]", ")", "\n", "dts", ".", "append", "(", "pts", ")", "\n", "", "return", "dts", "\n", "# def input_reading_mod(path):", "\n", "#     \"\"\"This helper convert input\"\"\"", "\n", "#     if os.path.exists(path)==False:", "\n", "#         return []", "\n", "#     with open(path, 'r') as input_fid:", "\n", "#         lines = input_fid.readlines()", "\n", "#     dts = []", "\n", "#     for line in lines:", "\n", "#         parts = line.strip().split(' ')", "\n", "#         pts = list(map(float, parts[:-1]))", "\n", "#         dts.append(pts)", "\n", "#     return dts", "\n", "\n", "", "def", "gt_reading_mod", "(", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'r'", ")", "as", "input_fid", ":", "\n", "            ", "lines", "=", "input_fid", ".", "readlines", "(", ")", "\n", "", "gts", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "label", "=", "parts", "[", "-", "1", "]", "\n", "# print(parts)", "\n", "# pts = [i.strip('\\ufeff').strip('\\xef\\xbb\\xbf') for i in parts[:-1]]", "\n", "pts", "=", "list", "(", "map", "(", "float", ",", "parts", "[", ":", "-", "1", "]", ")", ")", "\n", "pts", "=", "list", "(", "[", "pts", "[", "0", "]", ",", "pts", "[", "1", "]", ",", "pts", "[", "2", "]", ",", "pts", "[", "1", "]", ",", "pts", "[", "2", "]", ",", "pts", "[", "3", "]", ",", "pts", "[", "0", "]", ",", "pts", "[", "3", "]", "]", ")", "\n", "# pts.append()", "\n", "gts", ".", "append", "(", "[", "pts", ",", "label", "]", ")", "\n", "", "return", "gts", "\n", "", "def", "gt_reading_mod_ic15", "(", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'r'", ")", "as", "input_fid", ":", "\n", "            ", "lines", "=", "input_fid", ".", "readlines", "(", ")", "\n", "", "gts", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "# parts = line.strip().split(' ')", "\n", "            ", "parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "if", "len", "(", "parts", ")", "<", "9", ":", "\n", "                ", "continue", "\n", "", "label", "=", "parts", "[", "-", "1", "]", "\n", "# print(parts)", "\n", "# pts = [i.strip('\\ufeff').strip('\\xef\\xbb\\xbf') for i in parts[:-1]]", "\n", "pts", "=", "list", "(", "map", "(", "float", ",", "parts", "[", ":", "8", "]", ")", ")", "\n", "# pts.append()", "\n", "gts", ".", "append", "(", "[", "pts", ",", "label", "]", ")", "\n", "", "return", "gts", "\n", "\n", "", "def", "detection_filtering", "(", "detections", ",", "groundtruths", ",", "threshold", "=", "0.5", ")", ":", "\n", "        ", "dcGTs", "=", "[", "gt", "for", "gt", "in", "groundtruths", "if", "gt", "[", "1", "]", "==", "'###'", "]", "\n", "for", "gt_id", ",", "gt", "in", "enumerate", "(", "dcGTs", ")", ":", "\n", "            ", "coords", "=", "gt", "[", "0", "]", "\n", "gt_x", "=", "list", "(", "map", "(", "int", ",", "coords", "[", ":", ":", "2", "]", ")", ")", "\n", "gt_y", "=", "list", "(", "map", "(", "int", ",", "coords", "[", "1", ":", ":", "2", "]", ")", ")", "\n", "delete_flag", "=", "[", "False", "]", "*", "len", "(", "detections", ")", "\n", "for", "det_id", ",", "detection", "in", "enumerate", "(", "detections", ")", ":", "\n", "                ", "detection", "=", "list", "(", "map", "(", "int", ",", "detection", ")", ")", "\n", "det_x", "=", "detection", "[", "0", ":", ":", "2", "]", "\n", "det_y", "=", "detection", "[", "1", ":", ":", "2", "]", "\n", "delete_flag", "[", "det_id", "]", "=", "iod", "(", "det_x", ",", "det_y", ",", "gt_x", ",", "gt_y", ")", ">", "threshold", "\n", "", "detections", "=", "[", "det", "for", "flag", ",", "det", "in", "zip", "(", "delete_flag", ",", "detections", ")", "if", "flag", "==", "False", "]", "\n", "", "return", "detections", "\n", "\n", "", "global_tp", "=", "0", "\n", "global_tp_rec", "=", "0", "\n", "global_fp", "=", "0", "\n", "global_fn", "=", "0", "\n", "global_num_of_gt", "=", "0", "\n", "global_num_of_det", "=", "0", "\n", "\n", "for", "input_id", "in", "tqdm", "(", "allInputs", ")", ":", "\n", "        ", "if", "(", "input_id", "!=", "'.DS_Store'", ")", ":", "\n", "            ", "detections", "=", "input_reading_mod", "(", "os", ".", "path", ".", "join", "(", "input_dir", ",", "input_id", ")", ")", "\n", "groundtruths", "=", "gt_reading_mod", "(", "os", ".", "path", ".", "join", "(", "gt_floder", ",", "input_id", ")", ")", "\n", "# groundtruths = gt_reading_mod(os.path.join(gt_floder, input_id.replace(\"res_\",\"gt_\")))", "\n", "if", "ignore_difficult", ":", "\n", "                ", "detections", "=", "detection_filtering", "(", "detections", ",", "groundtruths", ")", "#filtering detections overlaps with DC area", "\n", "groundtruths", "=", "[", "gt", "for", "gt", "in", "groundtruths", "if", "gt", "[", "1", "]", "!=", "\"###\"", "]", "\n", "", "global_num_of_gt", "=", "global_num_of_gt", "+", "len", "(", "groundtruths", ")", "\n", "global_num_of_det", "=", "global_num_of_det", "+", "len", "(", "detections", ")", "\n", "iou_table", "=", "np", ".", "zeros", "(", "(", "len", "(", "detections", ")", ",", "len", "(", "groundtruths", ")", ")", ")", "\n", "det_flag", "=", "np", ".", "zeros", "(", "(", "len", "(", "detections", ")", ",", "1", ")", ")", "\n", "gt_flag", "=", "np", ".", "zeros", "(", "(", "len", "(", "groundtruths", ")", ",", "1", ")", ")", "\n", "tp", "=", "0", "\n", "fp", "=", "0", "\n", "fn", "=", "0", "\n", "\n", "if", "len", "(", "detections", ")", ">", "0", ":", "\n", "                ", "for", "det_id", ",", "detection", "in", "enumerate", "(", "detections", ")", ":", "\n", "                    ", "det_x", "=", "detection", "[", "0", ":", ":", "2", "]", "\n", "det_y", "=", "detection", "[", "1", ":", ":", "2", "]", "\n", "# print(detection)", "\n", "# det_x = detection[(0,2,2,0)]", "\n", "# det_y = detection[(1,1,3,3)]", "\n", "if", "len", "(", "groundtruths", ")", ">", "0", ":", "\n", "                        ", "for", "gt_id", ",", "gt", "in", "enumerate", "(", "groundtruths", ")", ":", "\n", "                            ", "gt_x", "=", "gt", "[", "0", "]", "[", ":", ":", "2", "]", "\n", "gt_y", "=", "gt", "[", "0", "]", "[", "1", ":", ":", "2", "]", "\n", "# gt_x = gt[0][(0,2,2,0)]", "\n", "# gt_y = gt[0][(1,1,3,3)]", "\n", "iou_table", "[", "det_id", ",", "gt_id", "]", "=", "iou", "(", "det_x", ",", "det_y", ",", "gt_x", ",", "gt_y", ")", "\n", "", "best_matched_gt_id", "=", "np", ".", "argmax", "(", "iou_table", "[", "det_id", ",", ":", "]", ")", "#identified the best matched detection candidates with current groundtruth", "\n", "if", "(", "iou_table", "[", "det_id", ",", "best_matched_gt_id", "]", ">", "0.6", ")", ":", "\n", "                            ", "if", "gt_flag", "[", "best_matched_gt_id", "]", "==", "0", ":", "### if the gt is already matched previously, it should be a false positive", "\n", "                                ", "tp", "=", "tp", "+", "1.0", "\n", "global_tp", "=", "global_tp", "+", "1.0", "\n", "gt_flag", "[", "best_matched_gt_id", "]", "=", "1", "\n", "", "else", ":", "\n", "                                ", "fp", "=", "fp", "+", "1.0", "\n", "global_fp", "=", "global_fp", "+", "1.0", "\n", "", "", "else", ":", "\n", "                            ", "fp", "=", "fp", "+", "1.0", "\n", "global_fp", "=", "global_fp", "+", "1.0", "\n", "\n", "", "", "", "", "try", ":", "\n", "                ", "local_precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "", "except", "ZeroDivisionError", ":", "\n", "                ", "local_precision", "=", "0", "\n", "\n", "", "try", ":", "\n", "                ", "local_recall", "=", "tp", "/", "len", "(", "groundtruths", ")", "\n", "", "except", "ZeroDivisionError", ":", "\n", "                ", "local_recall", "=", "0", "\n", "\n", "# fid = open(fid_path, 'a')", "\n", "", "temp", "=", "(", "'%s______/Precision:_%s_______/Recall:_%s\\n'", "%", "(", "input_id", ",", "str", "(", "local_precision", ")", ",", "str", "(", "local_recall", ")", ")", ")", "\n", "\n", "", "", "global_precision", "=", "global_tp", "/", "global_num_of_det", "\n", "global_recall", "=", "global_tp", "/", "global_num_of_gt", "\n", "f_score", "=", "2", "*", "global_precision", "*", "global_recall", "/", "(", "global_precision", "+", "global_recall", ")", "\n", "\n", "print", "(", "(", "'P: %s /R:%s'", "%", "(", "str", "(", "global_precision", ")", ",", "str", "(", "global_recall", ")", ")", ")", ",", "'F: '", ",", "f_score", ")", "\n", "\n", "return", "{", "'precison'", ":", "global_precision", ",", "'recall'", ":", "global_recall", ",", "'hmean'", ":", "f_score", ",", "'global_tp'", ":", "global_tp", ",", "'global_num_of_det'", ":", "global_num_of_det", ",", "'global_num_of_gt'", ":", "global_num_of_gt", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area": [[16, 19], ["shapely.geometry.Polygon", "float", "numpy.stack"], "function", ["None"], ["def", "area", "(", "x", ",", "y", ")", ":", "\n", "    ", "polygon", "=", "Polygon", "(", "np", ".", "stack", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "1", ")", ")", "\n", "return", "float", "(", "polygon", ".", "area", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.approx_area_of_intersection": [[21, 46], ["numpy.max", "numpy.max", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.min", "numpy.min", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "approx_area_of_intersection", "(", "det_x", ",", "det_y", ",", "gt_x", ",", "gt_y", ")", ":", "\n", "    ", "\"\"\"\n    This helper determine if both polygons are intersecting with each others with an approximation method.\n    Area of intersection represented by the minimum bounding rectangular [xmin, ymin, xmax, ymax]\n    \"\"\"", "\n", "det_ymax", "=", "np", ".", "max", "(", "det_y", ")", "\n", "det_xmax", "=", "np", ".", "max", "(", "det_x", ")", "\n", "det_ymin", "=", "np", ".", "min", "(", "det_y", ")", "\n", "det_xmin", "=", "np", ".", "min", "(", "det_x", ")", "\n", "\n", "gt_ymax", "=", "np", ".", "max", "(", "gt_y", ")", "\n", "gt_xmax", "=", "np", ".", "max", "(", "gt_x", ")", "\n", "gt_ymin", "=", "np", ".", "min", "(", "gt_y", ")", "\n", "gt_xmin", "=", "np", ".", "min", "(", "gt_x", ")", "\n", "\n", "all_min_ymax", "=", "np", ".", "minimum", "(", "det_ymax", ",", "gt_ymax", ")", "\n", "all_max_ymin", "=", "np", ".", "maximum", "(", "det_ymin", ",", "gt_ymin", ")", "\n", "\n", "intersect_heights", "=", "np", ".", "maximum", "(", "0.0", ",", "(", "all_min_ymax", "-", "all_max_ymin", ")", ")", "\n", "\n", "all_min_xmax", "=", "np", ".", "minimum", "(", "det_xmax", ",", "gt_xmax", ")", "\n", "all_max_xmin", "=", "np", ".", "maximum", "(", "det_xmin", ",", "gt_xmin", ")", "\n", "intersect_widths", "=", "np", ".", "maximum", "(", "0.0", ",", "(", "all_min_xmax", "-", "all_max_xmin", ")", ")", "\n", "\n", "return", "intersect_heights", "*", "intersect_widths", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area_of_intersection": [[47, 51], ["shapely.geometry.Polygon().buffer", "shapely.geometry.Polygon().buffer", "float", "shapely.geometry.Polygon", "shapely.geometry.Polygon", "Polygon().buffer.intersection", "numpy.stack", "numpy.stack"], "function", ["None"], ["", "def", "area_of_intersection", "(", "det_x", ",", "det_y", ",", "gt_x", ",", "gt_y", ")", ":", "\n", "    ", "p1", "=", "Polygon", "(", "np", ".", "stack", "(", "[", "det_x", ",", "det_y", "]", ",", "axis", "=", "1", ")", ")", ".", "buffer", "(", "0", ")", "\n", "p2", "=", "Polygon", "(", "np", ".", "stack", "(", "[", "gt_x", ",", "gt_y", "]", ",", "axis", "=", "1", ")", ")", ".", "buffer", "(", "0", ")", "\n", "return", "float", "(", "p1", ".", "intersection", "(", "p2", ")", ".", "area", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area_of_union": [[52, 56], ["shapely.geometry.Polygon().buffer", "shapely.geometry.Polygon().buffer", "float", "shapely.geometry.Polygon", "shapely.geometry.Polygon", "Polygon().buffer.union", "numpy.stack", "numpy.stack"], "function", ["None"], ["", "def", "area_of_union", "(", "det_x", ",", "det_y", ",", "gt_x", ",", "gt_y", ")", ":", "\n", "    ", "p1", "=", "Polygon", "(", "np", ".", "stack", "(", "[", "det_x", ",", "det_y", "]", ",", "axis", "=", "1", ")", ")", ".", "buffer", "(", "0", ")", "\n", "p2", "=", "Polygon", "(", "np", ".", "stack", "(", "[", "gt_x", ",", "gt_y", "]", ",", "axis", "=", "1", ")", ")", ".", "buffer", "(", "0", ")", "\n", "return", "float", "(", "p1", ".", "union", "(", "p2", ")", ".", "area", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.iou": [[58, 60], ["polygon_fast.area_of_intersection", "polygon_fast.area_of_union"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area_of_intersection", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area_of_union"], ["", "def", "iou", "(", "det_x", ",", "det_y", ",", "gt_x", ",", "gt_y", ")", ":", "\n", "    ", "return", "area_of_intersection", "(", "det_x", ",", "det_y", ",", "gt_x", ",", "gt_y", ")", "/", "(", "area_of_union", "(", "det_x", ",", "det_y", ",", "gt_x", ",", "gt_y", ")", "+", "1.0e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.iod": [[62, 69], ["polygon_fast.area", "polygon_fast.area_of_intersection", "polygon_fast.area"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area_of_intersection", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.polygon_fast.area"], ["", "def", "iod", "(", "det_x", ",", "det_y", ",", "gt_x", ",", "gt_y", ")", ":", "\n", "    ", "\"\"\"\n    This helper determine the fraction of intersection area over detection area\n    \"\"\"", "\n", "if", "area", "(", "det_x", ",", "det_y", ")", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "return", "area_of_intersection", "(", "det_x", ",", "det_y", ",", "gt_x", ",", "gt_y", ")", "/", "area", "(", "det_x", ",", "det_y", ")", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.process_rec.make_match_to_dict.__init__": [[114, 129], ["open", "open.readlines", "line.strip.strip.strip", "lexicon.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lexicon_type", ",", "weighted_ed", ")", ":", "\n", "        ", "self", ".", "lexicon_type", "=", "lexicon_type", "\n", "self", ".", "weighted_ed", "=", "weighted_ed", "\n", "\n", "if", "lexicon_type", "==", "1", ":", "\n", "            ", "lexicon_path", "=", "'maskrcnn_benchmark/data/datasets/evaluation/totaltext/full_dict.txt'", "\n", "lexicon_fid", "=", "open", "(", "lexicon_path", ",", "'r'", ")", "\n", "lexicon", "=", "[", "]", "\n", "for", "line", "in", "lexicon_fid", ".", "readlines", "(", ")", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "lexicon", ".", "append", "(", "line", ")", "\n", "", "", "elif", "lexicon_type", "==", "3", ":", "\n", "            ", "pass", "\n", "\n", "", "self", ".", "lexicon", "=", "lexicon", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.process_rec.make_match_to_dict.__call__": [[130, 140], ["process_rec.find_match_word"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.process_rec.find_match_word"], ["", "def", "__call__", "(", "self", ",", "word", ",", "scores", "=", "None", ",", "use_lexicon", "=", "True", ",", "ids", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "lexicon_type", "==", "1", ":", "\n", "            ", "lexicon", "=", "self", ".", "lexicon", "\n", "", "elif", "self", ".", "lexicon_type", "==", "3", ":", "\n", "            ", "lexicon", "=", "self", ".", "lexicon", "[", "ids", "]", "\n", "", "match_word", ",", "match_dist", "=", "find_match_word", "(", "word", ",", "lexicon", ",", "scores", ",", "use_lexicon", ",", "self", ".", "weighted_ed", ")", "\n", "if", "match_dist", "<", "3", ":", "\n", "            ", "return", "match_word", "\n", "", "else", ":", "\n", "            ", "return", "''", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.process_rec.char2num": [[5, 14], ["print", "exit", "ord", "ord", "ord", "ord", "char.lower"], "function", ["None"], ["def", "char2num", "(", "char", ")", ":", "\n", "    ", "if", "char", "in", "'0123456789'", ":", "\n", "        ", "num", "=", "ord", "(", "char", ")", "-", "ord", "(", "'0'", ")", "+", "1", "\n", "", "elif", "char", "in", "'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'", ":", "\n", "        ", "num", "=", "ord", "(", "char", ".", "lower", "(", ")", ")", "-", "ord", "(", "'a'", ")", "+", "11", "\n", "", "else", ":", "\n", "        ", "print", "(", "'error symbol'", ",", "char", ")", "\n", "exit", "(", ")", "\n", "", "return", "num", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.process_rec.ed_delect_cost": [[15, 19], ["process_rec.char2num"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.process_rec.char2num"], ["", "def", "ed_delect_cost", "(", "j", ",", "i", ",", "word1", ",", "word2", ",", "scores", ")", ":", "\n", "## delect a[i]", "\n", "    ", "c", "=", "char2num", "(", "word1", "[", "j", "]", ")", "\n", "return", "scores", "[", "c", "]", "[", "j", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.process_rec.ed_insert_cost": [[21, 30], ["process_rec.char2num", "process_rec.char2num", "process_rec.char2num", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.process_rec.char2num", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.process_rec.char2num", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.process_rec.char2num", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "ed_insert_cost", "(", "i", ",", "j", ",", "word1", ",", "word2", ",", "scores", ")", ":", "\n", "## insert b[j]", "\n", "    ", "if", "i", "<", "len", "(", "word1", ")", "-", "1", ":", "\n", "        ", "c1", "=", "char2num", "(", "word1", "[", "i", "]", ")", "\n", "c2", "=", "char2num", "(", "word1", "[", "i", "+", "1", "]", ")", "\n", "return", "(", "scores", "[", "c1", "]", "[", "i", "]", "+", "scores", "[", "c2", "]", "[", "i", "+", "1", "]", ")", "/", "2", "\n", "", "else", ":", "\n", "        ", "c1", "=", "char2num", "(", "word1", "[", "i", "]", ")", "\n", "return", "scores", "[", "c1", "]", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.process_rec.ed_replace_cost": [[32, 39], ["process_rec.char2num", "process_rec.char2num", "max"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.process_rec.char2num", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.process_rec.char2num"], ["", "", "def", "ed_replace_cost", "(", "i", ",", "j", ",", "word1", ",", "word2", ",", "scores", ")", ":", "\n", "## replace a[i] with b[j]", "\n", "    ", "c1", "=", "char2num", "(", "word1", "[", "i", "]", ")", "\n", "c2", "=", "char2num", "(", "word2", "[", "j", "]", ")", "\n", "# if word1 == \"eeatpisaababarait\".upper():", "\n", "#     print(scores[c2][i]/scores[c1][i])", "\n", "return", "max", "(", "1", "-", "scores", "[", "c2", "]", "[", "i", "]", "/", "scores", "[", "c1", "]", "[", "i", "]", "*", "5", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.process_rec.weighted_edit_distance": [[40, 59], ["len", "len", "range", "range", "range", "range", "range", "process_rec.ed_delect_cost", "process_rec.ed_insert_cost", "min", "range", "process_rec.ed_replace_cost"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.process_rec.ed_delect_cost", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.process_rec.ed_insert_cost", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.process_rec.ed_replace_cost"], ["", "def", "weighted_edit_distance", "(", "word1", ",", "word2", ",", "scores", ")", ":", "\n", "    ", "m", "=", "len", "(", "word1", ")", "\n", "n", "=", "len", "(", "word2", ")", "\n", "dp", "=", "[", "[", "0", "for", "__", "in", "range", "(", "m", "+", "1", ")", "]", "for", "__", "in", "range", "(", "n", "+", "1", ")", "]", "\n", "for", "j", "in", "range", "(", "m", "+", "1", ")", ":", "\n", "        ", "dp", "[", "0", "]", "[", "j", "]", "=", "j", "\n", "", "for", "i", "in", "range", "(", "n", "+", "1", ")", ":", "\n", "        ", "dp", "[", "i", "]", "[", "0", "]", "=", "i", "\n", "", "for", "i", "in", "range", "(", "1", ",", "n", "+", "1", ")", ":", "## word2", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "m", "+", "1", ")", ":", "## word1", "\n", "            ", "delect_cost", "=", "ed_delect_cost", "(", "j", "-", "1", ",", "i", "-", "1", ",", "word1", ",", "word2", ",", "scores", ")", "## delect a[i]", "\n", "insert_cost", "=", "ed_insert_cost", "(", "j", "-", "1", ",", "i", "-", "1", ",", "word1", ",", "word2", ",", "scores", ")", "## insert b[j]", "\n", "if", "word1", "[", "j", "-", "1", "]", "!=", "word2", "[", "i", "-", "1", "]", ":", "\n", "                ", "replace_cost", "=", "ed_replace_cost", "(", "j", "-", "1", ",", "i", "-", "1", ",", "word1", ",", "word2", ",", "scores", ")", "## replace a[i] with b[j]", "\n", "", "else", ":", "\n", "                ", "replace_cost", "=", "0", "\n", "", "dp", "[", "i", "]", "[", "j", "]", "=", "min", "(", "dp", "[", "i", "-", "1", "]", "[", "j", "]", "+", "insert_cost", ",", "dp", "[", "i", "]", "[", "j", "-", "1", "]", "+", "delect_cost", ",", "dp", "[", "i", "-", "1", "]", "[", "j", "-", "1", "]", "+", "replace_cost", ")", "\n", "\n", "", "", "return", "dp", "[", "n", "]", "[", "m", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.process_rec.find_match_word": [[60, 112], ["rec_str.upper.upper", "dict", "word.upper.upper", "editdistance.eval", "abs", "word.upper.upper", "editdistance.eval", "word.upper.upper", "small_lexicon.append", "process_rec.weighted_edit_distance", "len", "len", "editdistance.eval"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.process_rec.weighted_edit_distance", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "find_match_word", "(", "rec_str", ",", "lexicon", ",", "scores_numpy", "=", "None", ",", "use_ed", "=", "True", ",", "weighted_ed", "=", "False", ")", ":", "\n", "    ", "if", "not", "use_ed", ":", "\n", "        ", "return", "rec_str", "\n", "", "rec_str", "=", "rec_str", ".", "upper", "(", ")", "\n", "dist_min", "=", "100", "\n", "dist_min_pre", "=", "100", "\n", "match_word", "=", "''", "\n", "match_dist", "=", "100", "\n", "if", "not", "weighted_ed", ":", "\n", "        ", "if", "rec_str", "in", "lexicon", ":", "\n", "            ", "return", "rec_str", ",", "0", "\n", "\n", "", "for", "word", "in", "lexicon", ":", "\n", "            ", "word", "=", "word", ".", "upper", "(", ")", "\n", "ed", "=", "editdistance", ".", "eval", "(", "rec_str", ",", "word", ")", "\n", "length_dist", "=", "abs", "(", "len", "(", "word", ")", "-", "len", "(", "rec_str", ")", ")", "\n", "# dist = ed + length_dist", "\n", "dist", "=", "ed", "\n", "if", "dist", "<", "dist_min", ":", "\n", "                ", "dist_min", "=", "dist", "\n", "match_word", "=", "word", "\n", "# match_word = pairs[word]", "\n", "match_dist", "=", "dist", "\n", "# print(rec_str,'-->>',match_word)", "\n", "", "", "return", "match_word", ",", "match_dist", "\n", "", "else", ":", "\n", "        ", "small_lexicon_dict", "=", "dict", "(", ")", "\n", "for", "word", "in", "lexicon", ":", "\n", "            ", "word", "=", "word", ".", "upper", "(", ")", "\n", "ed", "=", "editdistance", ".", "eval", "(", "rec_str", ",", "word", ")", "\n", "small_lexicon_dict", "[", "word", "]", "=", "ed", "\n", "dist", "=", "ed", "\n", "if", "dist", "<", "dist_min_pre", ":", "\n", "                ", "dist_min_pre", "=", "dist", "\n", "", "", "small_lexicon", "=", "[", "]", "\n", "for", "word", "in", "small_lexicon_dict", ":", "\n", "            ", "if", "small_lexicon_dict", "[", "word", "]", "<=", "dist_min_pre", "+", "2", ":", "\n", "                ", "small_lexicon", ".", "append", "(", "word", ")", "\n", "\n", "", "", "for", "word", "in", "small_lexicon", ":", "\n", "            ", "word", "=", "word", ".", "upper", "(", ")", "\n", "try", ":", "\n", "                ", "ed", "=", "weighted_edit_distance", "(", "rec_str", ",", "word_remove", ",", "scores_numpy", ")", "\n", "", "except", ":", "\n", "                ", "ed", "=", "editdistance", ".", "eval", "(", "rec_str", ",", "word", ")", "\n", "", "dist", "=", "ed", "\n", "if", "dist", "<", "dist_min", ":", "\n", "                ", "dist_min", "=", "dist", "\n", "match_word", "=", "word", "\n", "# match_word = pairs[word]", "\n", "match_dist", "=", "dist", "\n", "", "", "return", "match_word", ",", "match_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.select_top_predictions": [[11, 31], ["predictions.get_field", "torch.nonzero().squeeze", "predictions.get_field", "predictions.get_field.sort", "torch.nonzero"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.rect_to_xys": [[32, 62], ["cv2.boxPoints", "numpy.int0", "enumerate", "numpy.reshape", "__init__.rect_to_xys.get_valid_x"], "function", ["None"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.mask_to_box": [[63, 90], ["cv2.findContours", "cv2.minAreaRect", "list", "tuple", "__init__.rect_to_xys", "mask.copy", "cv2.findContours", "mask.copy"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.cv2_util.findContours", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.rect_to_xys", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.cv2_util.findContours"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.mask_to_contours": [[90, 106], ["cv2.findContours", "mask.copy", "cv2.findContours", "mask.copy"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.cv2_util.findContours", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.cv2_util.findContours"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.contours_to_box": [[106, 126], ["cv2.minAreaRect", "list", "tuple", "__init__.rect_to_xys"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.rect_to_xys"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.write_to_file": [[127, 156], ["os.path.join", "enumerate", "os.path.isdir", "os.makedirs", "str", "lines.append", "open", "int", "str", "f.write", "bbox.reshape"], "function", ["None"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.wirte_file": [[157, 180], ["predictions.get_field().numpy", "predictions.get_field", "numpy.empty", "zip", "os.path.join", "__init__.write_to_file", "os.path.basename().split", "os.path.isdir", "os.mkdir", "predictions.get_field", "__init__.mask_to_box", "numpy.concatenate", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.write_to_file", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.miscellaneous.mkdir", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.mask_to_box"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.get_contours": [[180, 195], ["predictions.get_field().numpy", "predictions.get_field", "zip", "predictions.get_field", "__init__.mask_to_contours", "contours.append", "len", "cv2.contourArea", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.mask_to_contours", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.scenetext_evaluation": [[197, 235], ["maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.Masker", "enumerate", "tqdm.tqdm", "__init__.select_top_predictions", "os.path.basename", "gt_path.replace().replace", "cv2.imread", "prediction.resize.resize", "prediction.resize.has_field", "__init__.write_to_file", "target.get_field().numpy", "prediction.resize.get_field", "prediction.resize.add_field", "__init__.get_contours", "gt_path.replace", "maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.Masker.", "contour.reshape", "os.path.join", "target.get_field"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.select_top_predictions", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.has_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.write_to_file", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.add_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.eval_det.__init__.get_contours", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.__init__.word_evaluation": [[4, 23], ["word_eval.do_coco_evaluation"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.do_coco_evaluation"], []], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.__init__": [[516, 525], ["all", "collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "iou_types", ")", ":", "\n", "        ", "allowed_types", "=", "(", "\"box_proposal\"", ",", "\"bbox\"", ",", "\"segm\"", ")", "\n", "assert", "all", "(", "iou_type", "in", "allowed_types", "for", "iou_type", "in", "iou_types", ")", "\n", "results", "=", "OrderedDict", "(", ")", "\n", "for", "iou_type", "in", "iou_types", ":", "\n", "            ", "results", "[", "iou_type", "]", "=", "OrderedDict", "(", "\n", "[", "(", "metric", ",", "-", "1", ")", "for", "metric", "in", "COCOResults", ".", "METRICS", "[", "iou_type", "]", "]", "\n", ")", "\n", "", "self", ".", "results", "=", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.update": [[526, 538], ["isinstance", "enumerate"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "coco_eval", ")", ":", "\n", "        ", "if", "coco_eval", "is", "None", ":", "\n", "            ", "return", "\n", "", "from", "pycocotools", ".", "cocoeval", "import", "COCOeval", "\n", "\n", "assert", "isinstance", "(", "coco_eval", ",", "COCOeval", ")", "\n", "s", "=", "coco_eval", ".", "stats", "\n", "iou_type", "=", "coco_eval", ".", "params", ".", "iouType", "\n", "res", "=", "self", ".", "results", "[", "iou_type", "]", "\n", "metrics", "=", "COCOResults", ".", "METRICS", "[", "iou_type", "]", "\n", "for", "idx", ",", "metric", "in", "enumerate", "(", "metrics", ")", ":", "\n", "            ", "res", "[", "metric", "]", "=", "s", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.COCOResults.__repr__": [[539, 542], ["repr"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "# TODO make it pretty", "\n", "        ", "return", "repr", "(", "self", ".", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.do_coco_evaluation": [[23, 81], ["logging.getLogger", "logging.getLogger.info", "word_eval.prepare_for_bezier", "logging.getLogger.info", "logging.getLogger.info", "word_eval.COCOResults", "logging.getLogger.info", "word_eval.check_expected_results", "logging.getLogger.info", "word_eval.prepare_for_coco_detection", "logging.getLogger.info", "word_eval.prepare_for_coco_segmentation", "logging.getLogger.info", "prepare_for_kes", "areas.items", "torch.save", "tempfile.NamedTemporaryFile", "word_eval.evaluate_predictions_on_coco", "word_eval.evaluate_box_proposals", "stats[].item", "os.path.join", "os.path.join", "os.path.isdir", "print", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.prepare_for_bezier", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.check_expected_results", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.prepare_for_coco_detection", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.prepare_for_coco_segmentation", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.east.visualization_map.Visualizater.save", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.evaluate_predictions_on_coco", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.evaluate_box_proposals", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.miscellaneous.mkdir"], ["def", "do_coco_evaluation", "(", "\n", "dataset", ",", "\n", "predictions", ",", "\n", "box_only", ",", "\n", "output_folder", ",", "\n", "iou_types", ",", "\n", "rec_type", ",", "\n", "expected_results", ",", "\n", "expected_results_sigma_tol", ",", "\n", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"maskrcnn_benchmark.inference\"", ")", "\n", "\n", "if", "box_only", ":", "\n", "        ", "logger", ".", "info", "(", "\"Evaluating bbox proposals\"", ")", "\n", "areas", "=", "{", "\"all\"", ":", "\"\"", ",", "\"small\"", ":", "\"s\"", ",", "\"medium\"", ":", "\"m\"", ",", "\"large\"", ":", "\"l\"", "}", "\n", "res", "=", "COCOResults", "(", "\"box_proposal\"", ")", "\n", "for", "limit", "in", "[", "100", ",", "1000", "]", ":", "\n", "            ", "for", "area", ",", "suffix", "in", "areas", ".", "items", "(", ")", ":", "\n", "                ", "stats", "=", "evaluate_box_proposals", "(", "\n", "predictions", ",", "dataset", ",", "area", "=", "area", ",", "limit", "=", "limit", "\n", ")", "\n", "key", "=", "\"AR{}@{:d}\"", ".", "format", "(", "suffix", ",", "limit", ")", "\n", "res", ".", "results", "[", "\"box_proposal\"", "]", "[", "key", "]", "=", "stats", "[", "\"ar\"", "]", ".", "item", "(", ")", "\n", "", "", "logger", ".", "info", "(", "res", ")", "\n", "check_expected_results", "(", "res", ",", "expected_results", ",", "expected_results_sigma_tol", ")", "\n", "if", "output_folder", ":", "\n", "            ", "torch", ".", "save", "(", "res", ",", "os", ".", "path", ".", "join", "(", "output_folder", ",", "\"box_proposals.pth\"", ")", ")", "\n", "", "return", "\n", "", "logger", ".", "info", "(", "\"Preparing results for COCO format\"", ")", "\n", "coco_results", "=", "{", "}", "\n", "if", "\"bbox\"", "in", "iou_types", ":", "\n", "        ", "logger", ".", "info", "(", "\"Preparing bbox results\"", ")", "\n", "coco_results", "[", "\"bbox\"", "]", "=", "prepare_for_coco_detection", "(", "predictions", ",", "dataset", ")", "\n", "", "if", "\"segm\"", "in", "iou_types", ":", "\n", "        ", "logger", ".", "info", "(", "\"Preparing segm results\"", ")", "\n", "coco_results", "[", "\"segm\"", "]", "=", "prepare_for_coco_segmentation", "(", "predictions", ",", "dataset", ")", "\n", "", "if", "\"kes\"", "in", "iou_types", ":", "\n", "        ", "logger", ".", "info", "(", "\"Preparing kes results\"", ")", "\n", "coco_results", "[", "\"kes\"", "]", "=", "prepare_for_kes", "(", "predictions", ",", "dataset", ")", "\n", "\n", "", "coco_results", "[", "\"polys\"", "]", "=", "prepare_for_bezier", "(", "predictions", ",", "dataset", ",", "rec_type", ")", "\n", "iou_types", "=", "iou_types", "+", "(", "\"polys\"", ",", ")", "\n", "\n", "logger", ".", "info", "(", "\"Do not apply evaluating predictions\"", ")", "\n", "\n", "\n", "for", "iou_type", "in", "iou_types", ":", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "f", ":", "\n", "            ", "file_path", "=", "f", ".", "name", "\n", "if", "output_folder", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_folder", ")", ":", "\n", "                    ", "print", "(", "'creating dir: '", "+", "output_folder", ")", "\n", "os", ".", "mkdir", "(", "output_folder", ")", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "iou_type", "+", "\".json\"", ")", "\n", "", "res", "=", "evaluate_predictions_on_coco", "(", "\n", "dataset", ".", "coco", ",", "coco_results", "[", "iou_type", "]", ",", "file_path", ",", "iou_type", "\n", ")", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.prepare_for_coco_detection": [[83, 115], ["enumerate", "prediction.convert.resize", "prediction.convert.convert", "prediction.convert.bbox.tolist", "prediction.convert.get_field().tolist", "prediction.convert.get_field().tolist", "coco_results.extend", "len", "prediction.convert.get_field", "prediction.convert.get_field", "enumerate"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["", "def", "prepare_for_coco_detection", "(", "predictions", ",", "dataset", ")", ":", "\n", "# assert isinstance(dataset, COCODataset)", "\n", "    ", "coco_results", "=", "[", "]", "\n", "for", "image_id", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "        ", "original_id", "=", "dataset", ".", "id_to_img_map", "[", "image_id", "]", "\n", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "# TODO replace with get_img_info?", "\n", "", "image_width", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"width\"", "]", "\n", "image_height", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"height\"", "]", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "prediction", "=", "prediction", ".", "convert", "(", "\"xywh\"", ")", "\n", "\n", "boxes", "=", "prediction", ".", "bbox", ".", "tolist", "(", ")", "\n", "scores", "=", "prediction", ".", "get_field", "(", "\"scores\"", ")", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", ".", "get_field", "(", "\"labels\"", ")", ".", "tolist", "(", ")", "\n", "\n", "mapped_labels", "=", "[", "dataset", ".", "contiguous_category_id_to_json_id", "[", "i", "]", "for", "i", "in", "labels", "]", "\n", "\n", "coco_results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "mapped_labels", "[", "k", "]", ",", "\n", "\"bbox\"", ":", "box", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", ",", "box", "in", "enumerate", "(", "boxes", ")", "\n", "]", "\n", ")", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.contour_to_xys": [[116, 144], ["cv2.minAreaRect", "cv2.boxPoints", "numpy.int0", "enumerate", "numpy.reshape", "word_eval.contour_to_xys.get_valid_x"], "function", ["None"], ["", "def", "contour_to_xys", "(", "cnt", ",", "image_shape", ")", ":", "\n", "    ", "\"\"\"Convert rect to xys, i.e., eight points\n    The `image_shape` is used to to make sure all points return are valid, i.e., within image area\n    \"\"\"", "\n", "rect", "=", "cv2", ".", "minAreaRect", "(", "cnt", ")", "\n", "h", ",", "w", "=", "image_shape", "[", "0", ":", "2", "]", "\n", "def", "get_valid_x", "(", "x", ")", ":", "\n", "        ", "if", "x", "<", "0", ":", "\n", "            ", "return", "0", "\n", "", "if", "x", ">=", "w", ":", "\n", "            ", "return", "w", "-", "1", "\n", "", "return", "x", "\n", "\n", "", "def", "get_valid_y", "(", "y", ")", ":", "\n", "        ", "if", "y", "<", "0", ":", "\n", "            ", "return", "0", "\n", "", "if", "y", ">=", "h", ":", "\n", "            ", "return", "h", "-", "1", "\n", "", "return", "y", "\n", "\n", "", "points", "=", "cv2", ".", "boxPoints", "(", "rect", ")", "\n", "points", "=", "np", ".", "int0", "(", "points", ")", "\n", "for", "i_xy", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "points", ")", ":", "\n", "        ", "x", "=", "get_valid_x", "(", "x", ")", "\n", "y", "=", "get_valid_y", "(", "y", ")", "\n", "points", "[", "i_xy", ",", ":", "]", "=", "[", "x", ",", "y", "]", "\n", "", "points", "=", "np", ".", "reshape", "(", "points", ",", "-", "1", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.mask_to_roRect": [[145, 157], ["cv2.findContours", "countours[].copy", "word_eval.contour_to_xys", "e.clone().numpy", "len", "numpy.zeros", "e.clone"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.cv2_util.findContours", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.contour_to_xys", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "mask_to_roRect", "(", "mask", ",", "img_shape", ")", ":", "\n", "## convert mask into rotated rect", "\n", "    ", "e", "=", "mask", "[", "0", ",", ":", ",", ":", "]", "\n", "_", ",", "countours", ",", "hier", "=", "cv2", ".", "findContours", "(", "e", ".", "clone", "(", ")", ".", "numpy", "(", ")", ",", "cv2", ".", "RETR_CCOMP", ",", "cv2", ".", "CHAIN_APPROX_NONE", ")", "\n", "#countours, hier = cv2.findContours(e.clone().numpy(), cv2.RETR_CCOMP, cv2.CHAIN_APPROX_NONE) # Aarlog", "\n", "\n", "if", "len", "(", "countours", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "1", ",", "8", ")", ")", "\n", "", "t_c", "=", "countours", "[", "0", "]", ".", "copy", "(", ")", "\n", "\n", "quad", "=", "contour_to_xys", "(", "t_c", ",", "img_shape", ")", "\n", "return", "quad", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.prepare_for_coco_segmentation": [[159, 206], ["maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.Masker", "tqdm.tqdm", "enumerate", "prediction.resize.resize", "prediction.resize.get_field", "prediction.resize.get_field().tolist", "prediction.resize.get_field().tolist", "enumerate", "coco_results.extend", "len", "list", "maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.Masker.", "word_eval.mask_to_roRect", "masker.expand", "prediction.resize.get_field", "prediction.resize.get_field", "rect.all", "esd.append", "rect.tolist"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.mask_to_roRect", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["", "def", "prepare_for_coco_segmentation", "(", "predictions", ",", "dataset", ")", ":", "\n", "    ", "import", "pycocotools", ".", "mask", "as", "mask_util", "\n", "import", "numpy", "as", "np", "\n", "\n", "masker", "=", "Masker", "(", "threshold", "=", "0.5", ",", "padding", "=", "1", ")", "\n", "# assert isinstance(dataset, COCODataset)", "\n", "coco_results", "=", "[", "]", "\n", "for", "image_id", ",", "prediction", "in", "tqdm", "(", "enumerate", "(", "predictions", ")", ")", ":", "\n", "        ", "original_id", "=", "dataset", ".", "id_to_img_map", "[", "image_id", "]", "\n", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "# TODO replace with get_img_info?", "\n", "", "image_width", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"width\"", "]", "\n", "image_height", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"height\"", "]", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "masks", "=", "prediction", ".", "get_field", "(", "\"mask\"", ")", "\n", "\n", "# Masker is necessary only if masks haven't been already resized.", "\n", "if", "list", "(", "masks", ".", "shape", "[", "-", "2", ":", "]", ")", "!=", "[", "image_height", ",", "image_width", "]", ":", "\n", "            ", "masks", "=", "masker", "(", "masks", ".", "expand", "(", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ",", "prediction", ")", "\n", "masks", "=", "masks", "[", "0", "]", "\n", "\n", "", "scores", "=", "prediction", ".", "get_field", "(", "\"scores\"", ")", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", ".", "get_field", "(", "\"labels\"", ")", ".", "tolist", "(", ")", "\n", "\n", "rects", "=", "[", "mask_to_roRect", "(", "mask", ",", "[", "image_height", ",", "image_width", "]", ")", "for", "mask", "in", "masks", "]", "\n", "\n", "mapped_labels", "=", "[", "dataset", ".", "contiguous_category_id_to_json_id", "[", "i", "]", "for", "i", "in", "labels", "]", "\n", "\n", "esd", "=", "[", "]", "\n", "for", "k", ",", "rect", "in", "enumerate", "(", "rects", ")", ":", "\n", "            ", "if", "rect", ".", "all", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "esd", ".", "append", "(", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "mapped_labels", "[", "k", "]", ",", "\n", "# \"segmentation\": rle,", "\n", "\"seg_rorect\"", ":", "rect", ".", "tolist", "(", ")", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", ")", "\n", "", "", "coco_results", ".", "extend", "(", "esd", ")", "\n", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.ke_to_quad": [[207, 213], ["mty[].argmax", "paraToQuad_v3"], "function", ["None"], ["", "def", "ke_to_quad", "(", "ke", ",", "mty", ",", "img_shape", ")", ":", "\n", "## convert ke into quadrangle", "\n", "    ", "mt", "=", "mty", "[", ":", "]", ".", "argmax", "(", ")", "\n", "# mt_prob = self.scores_to_probs(mty)", "\n", "quad", "=", "paraToQuad_v3", "(", "ke", ",", "mt", ")", "\n", "return", "quad", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.bezier_to_poly": [[214, 255], ["tuple", "tuple", "numpy.linspace", "numpy.array().dot", "numpy.array().dot", "np.array().dot.tolist", "np.array().dot.tolist", "Bezier_bottom.tolist.reverse", "Bezier_top.tolist.extend", "len", "int", "bez[].reshape", "bez[].reshape", "map", "map", "scipy.special.comb", "numpy.int32", "numpy.int32", "numpy.array", "numpy.array", "int", "Mtk", "len", "BezierCoeff", "BezierCoeff", "int", "range"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "bezier_to_poly", "(", "bez", ",", "rec", ",", "rec_type", ")", ":", "\n", "    ", "Mtk", "=", "lambda", "n", ",", "t", ",", "k", ":", "t", "**", "k", "*", "(", "1", "-", "t", ")", "**", "(", "n", "-", "k", ")", "*", "n_over_k", "(", "n", ",", "k", ")", "\n", "BezierCoeff", "=", "lambda", "ts", ":", "[", "[", "Mtk", "(", "3", ",", "t", ",", "k", ")", "for", "k", "in", "range", "(", "4", ")", "]", "for", "t", "in", "ts", "]", "\n", "\n", "poly", "=", "[", "]", "\n", "assert", "(", "len", "(", "bez", ")", "==", "16", ")", ",", "'The numbr of bezier control points must be 8, but got {}'", ".", "format", "(", "int", "(", "len", "(", "bez_pts", ")", "/", "2", ")", ")", "\n", "s1_bezier", "=", "bez", "[", ":", "8", "]", ".", "reshape", "(", "(", "4", ",", "2", ")", ")", "[", ":", ",", "[", "1", ",", "0", "]", "]", "\n", "s2_bezier", "=", "bez", "[", "8", ":", "]", ".", "reshape", "(", "(", "4", ",", "2", ")", ")", "[", ":", ",", "[", "1", ",", "0", "]", "]", "\n", "tpbtp", "=", "tuple", "(", "map", "(", "tuple", ",", "np", ".", "int32", "(", "s1_bezier", ")", ")", ")", "\n", "tpbbm", "=", "tuple", "(", "map", "(", "tuple", ",", "np", ".", "int32", "(", "s2_bezier", ")", ")", ")", "\n", "t_plot", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "20", ")", "\n", "Bezier_top", "=", "np", ".", "array", "(", "BezierCoeff", "(", "t_plot", ")", ")", ".", "dot", "(", "s1_bezier", ")", "\n", "Bezier_bottom", "=", "np", ".", "array", "(", "BezierCoeff", "(", "t_plot", ")", ")", ".", "dot", "(", "s2_bezier", ")", "\n", "poly", "=", "Bezier_top", ".", "tolist", "(", ")", "\n", "bottom", "=", "Bezier_bottom", ".", "tolist", "(", ")", "\n", "bottom", ".", "reverse", "(", ")", "\n", "poly", ".", "extend", "(", "bottom", ")", "\n", "\n", "if", "rec_type", "==", "\"ctc\"", ":", "\n", "        ", "last_char", "=", "False", "\n", "s", "=", "''", "\n", "for", "c", "in", "rec", ":", "\n", "            ", "c", "=", "int", "(", "c", ")", "\n", "if", "c", "<", "95", ":", "\n", "                ", "if", "last_char", "!=", "c", ":", "\n", "                    ", "s", "+=", "CTLABELS", "[", "c", "]", "\n", "last_char", "=", "c", "\n", "", "", "elif", "c", "==", "95", ":", "\n", "                ", "s", "+=", "u'\u53e3'", "\n", "", "else", ":", "\n", "                ", "last_char", "=", "False", "\n", "", "", "", "elif", "rec_type", "==", "\"attention\"", ":", "\n", "        ", "s", "=", "''", "\n", "for", "c", "in", "rec", ":", "\n", "            ", "c", "=", "int", "(", "c", ")", "\n", "if", "c", "<", "95", ":", "\n", "                ", "s", "+=", "CTLABELS", "[", "c", "]", "\n", "", "elif", "c", "==", "95", ":", "\n", "                ", "s", "+=", "u'\u53e3'", "\n", "\n", "", "", "", "return", "poly", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.py_cpu_pnms": [[257, 285], ["numpy.zeros", "numpy.zeros", "range", "pts.append", "scores.argsort", "scores.argsort", "len", "Polygon", "range", "keep.append", "len", "Polygon", "numpy.where", "Polygon.intersection", "range", "print", "len"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "py_cpu_pnms", "(", "dets", ",", "scores", ",", "thresh", ")", ":", "\n", "    ", "pts", "=", "[", "]", "\n", "for", "det", "in", "dets", ":", "\n", "        ", "pts", ".", "append", "(", "[", "[", "det", "[", "i", "]", "[", "0", "]", ",", "det", "[", "i", "]", "[", "1", "]", "]", "for", "i", "in", "range", "(", "len", "(", "det", ")", ")", "]", ")", "\n", "", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "areas", "=", "np", ".", "zeros", "(", "scores", ".", "shape", ")", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "inter_areas", "=", "np", ".", "zeros", "(", "(", "scores", ".", "shape", "[", "0", "]", ",", "scores", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "il", "in", "range", "(", "len", "(", "pts", ")", ")", ":", "\n", "        ", "poly", "=", "Polygon", "(", "pts", "[", "il", "]", ")", "\n", "areas", "[", "il", "]", "=", "poly", ".", "area", "# areas", "\n", "for", "jl", "in", "range", "(", "il", ",", "len", "(", "pts", ")", ")", ":", "\n", "            ", "polyj", "=", "Polygon", "(", "pts", "[", "jl", "]", ")", "\n", "try", ":", "\n", "                ", "inS", "=", "poly", ".", "intersection", "(", "polyj", ")", "# intersections of polyj and poly", "\n", "", "except", ":", "\n", "                ", "print", "(", "poly", ",", "polyj", ")", "\n", "", "inter_areas", "[", "il", "]", "[", "jl", "]", "=", "inS", ".", "area", "\n", "inter_areas", "[", "jl", "]", "[", "il", "]", "=", "inS", ".", "area", "\n", "\n", "", "", "keep", "=", "[", "]", "\n", "while", "order", ".", "size", ">", "0", ":", "\n", "        ", "i", "=", "order", "[", "0", "]", "\n", "keep", ".", "append", "(", "i", ")", "\n", "ovr", "=", "inter_areas", "[", "i", "]", "[", "order", "[", "1", ":", "]", "]", "/", "(", "areas", "[", "i", "]", "+", "areas", "[", "order", "[", "1", ":", "]", "]", "-", "inter_areas", "[", "i", "]", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "inds", "=", "np", ".", "where", "(", "ovr", "<=", "thresh", ")", "[", "0", "]", "\n", "order", "=", "order", "[", "inds", "+", "1", "]", "\n", "", "return", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.esd_pnms": [[286, 300], ["numpy.array", "numpy.array", "word_eval.py_cpu_pnms", "numpy.array", "np.array.append", "np.array.append"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.py_cpu_pnms"], ["", "def", "esd_pnms", "(", "esd", ",", "pnms_thresh", ")", ":", "\n", "    ", "scores", "=", "[", "]", "\n", "dets", "=", "[", "]", "\n", "for", "ele", "in", "esd", ":", "\n", "        ", "score", "=", "ele", "[", "'score'", "]", "\n", "quad", "=", "ele", "[", "'ke_quad'", "]", "\n", "det", "=", "np", ".", "array", "(", "[", "[", "quad", "[", "0", "]", "[", "0", "]", ",", "quad", "[", "0", "]", "[", "1", "]", "]", ",", "[", "quad", "[", "1", "]", "[", "0", "]", ",", "quad", "[", "1", "]", "[", "1", "]", "]", ",", "[", "quad", "[", "2", "]", "[", "0", "]", ",", "quad", "[", "2", "]", "[", "1", "]", "]", ",", "[", "quad", "[", "3", "]", "[", "0", "]", ",", "quad", "[", "3", "]", "[", "1", "]", "]", "]", ")", "\n", "scores", ".", "append", "(", "score", ")", "\n", "dets", ".", "append", "(", "det", ")", "\n", "#pdb.set_trace()", "\n", "", "scores", "=", "np", ".", "array", "(", "scores", ")", "\n", "dets", "=", "np", ".", "array", "(", "dets", ")", "\n", "keep", "=", "py_cpu_pnms", "(", "dets", ",", "scores", ",", "pnms_thresh", ")", "\n", "return", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.prepare_for_bezier": [[301, 360], ["tqdm.tqdm", "enumerate", "prediction.resize.resize", "prediction.resize.get_field", "maskrcnn_benchmark.data.datasets.bezier.BEZIER", "beziers.resize.resize", "prediction.resize.get_field().tolist", "prediction.resize.get_field().tolist", "prediction.resize.get_field().tolist", "zip", "enumerate", "len", "word_eval.bezier_to_poly", "polys.append", "rec_res.append", "zip", "word_eval.esd_pnms", "coco_results.extend", "coco_results.extend", "prediction.resize.get_field", "prediction.resize.get_field", "prediction.resize.get_field", "esd.append", "new_esd.append"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.bezier_to_poly", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.esd_pnms", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["", "def", "prepare_for_bezier", "(", "predictions", ",", "dataset", ",", "rec_type", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "\n", "coco_results", "=", "[", "]", "\n", "for", "image_id", ",", "prediction", "in", "tqdm", "(", "enumerate", "(", "predictions", ")", ")", ":", "\n", "        ", "original_id", "=", "dataset", ".", "id_to_img_map", "[", "image_id", "]", "\n", "if", "len", "(", "prediction", ")", "==", "0", ":", "continue", "\n", "\n", "image_width", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"width\"", "]", "\n", "image_height", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"height\"", "]", "\n", "test_size", "=", "prediction", ".", "size", "\n", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "\n", "beziers", "=", "prediction", ".", "get_field", "(", "\"beziers\"", ")", "\n", "beziers", "=", "BEZIER", "(", "beziers", ",", "test_size", ")", "\n", "beziers", "=", "beziers", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "\n", "bezier", "=", "beziers", ".", "bbox", "\n", "\n", "scores", "=", "prediction", ".", "get_field", "(", "\"scores\"", ")", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", ".", "get_field", "(", "\"labels\"", ")", ".", "tolist", "(", ")", "\n", "recs", "=", "prediction", ".", "get_field", "(", "\"recs\"", ")", ".", "tolist", "(", ")", "\n", "polys", "=", "[", "]", "\n", "rec_res", "=", "[", "]", "\n", "for", "bez", ",", "rec", "in", "zip", "(", "bezier", ",", "recs", ")", ":", "\n", "            ", "poly", ",", "rec", "=", "bezier_to_poly", "(", "bez", ",", "rec", ",", "rec_type", ")", "\n", "polys", ".", "append", "(", "poly", ")", "\n", "rec_res", ".", "append", "(", "rec", ")", "\n", "\n", "", "mapped_labels", "=", "[", "dataset", ".", "contiguous_category_id_to_json_id", "[", "i", "]", "for", "i", "in", "labels", "]", "\n", "\n", "esd", "=", "[", "]", "\n", "for", "k", ",", "(", "poly", ",", "rec", ")", "in", "enumerate", "(", "zip", "(", "polys", ",", "rec_res", ")", ")", ":", "\n", "            ", "if", "not", "poly", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "esd", ".", "append", "(", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "mapped_labels", "[", "k", "]", ",", "\n", "# \"segmentation\": rle,", "\n", "\"polys\"", ":", "poly", ",", "\n", "\"rec\"", ":", "rec", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", ")", "\n", "\n", "", "", "if", "cfg", ".", "PROCESS", ".", "PNMS", ":", "\n", "            ", "pnms_thresh", "=", "cfg", ".", "PROCESS", ".", "NMS_THRESH", "\n", "keep", "=", "esd_pnms", "(", "esd", ",", "pnms_thresh", ")", "\n", "new_esd", "=", "[", "]", "\n", "for", "i", "in", "keep", ":", "\n", "                ", "new_esd", ".", "append", "(", "esd", "[", "i", "]", ")", "\n", "", "coco_results", ".", "extend", "(", "new_esd", ")", "\n", "", "else", ":", "\n", "            ", "coco_results", ".", "extend", "(", "esd", ")", "\n", "\n", "", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.evaluate_box_proposals": [[362, 475], ["enumerate", "torch.cat", "torch.sort", "torch.zeros_like", "enumerate", "torch.zeros_like.mean", "prediction.resize.resize", "dataset.coco.getAnnIds", "dataset.coco.loadAnns", "torch.as_tensor().reshape", "maskrcnn_benchmark.structures.bounding_box.BoxList().convert", "torch.as_tensor", "len", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "torch.zeros", "range", "torch.cat.append", "torch.arange", "prediction.resize.get_field().sort", "len", "len", "len", "len", "min", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou.max", "max_overlaps.max", "float", "torch.as_tensor", "maskrcnn_benchmark.structures.bounding_box.BoxList", "len", "len", "len", "prediction.resize.get_field"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.modeling.utils.cat", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.getAnnIds", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.loadAnns", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field"], ["", "def", "evaluate_box_proposals", "(", "\n", "predictions", ",", "dataset", ",", "thresholds", "=", "None", ",", "area", "=", "\"all\"", ",", "limit", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"Evaluate detection proposal recall metrics. This function is a much\n    faster alternative to the official COCO API recall evaluation code. However,\n    it produces slightly different results.\n    \"\"\"", "\n", "# Record max overlap value for each gt box", "\n", "# Return vector of overlap values", "\n", "areas", "=", "{", "\n", "\"all\"", ":", "0", ",", "\n", "\"small\"", ":", "1", ",", "\n", "\"medium\"", ":", "2", ",", "\n", "\"large\"", ":", "3", ",", "\n", "\"96-128\"", ":", "4", ",", "\n", "\"128-256\"", ":", "5", ",", "\n", "\"256-512\"", ":", "6", ",", "\n", "\"512-inf\"", ":", "7", ",", "\n", "}", "\n", "area_ranges", "=", "[", "\n", "[", "0", "**", "2", ",", "1e5", "**", "2", "]", ",", "# all", "\n", "[", "0", "**", "2", ",", "32", "**", "2", "]", ",", "# small", "\n", "[", "32", "**", "2", ",", "96", "**", "2", "]", ",", "# medium", "\n", "[", "96", "**", "2", ",", "1e5", "**", "2", "]", ",", "# large", "\n", "[", "96", "**", "2", ",", "128", "**", "2", "]", ",", "# 96-128", "\n", "[", "128", "**", "2", ",", "256", "**", "2", "]", ",", "# 128-256", "\n", "[", "256", "**", "2", ",", "512", "**", "2", "]", ",", "# 256-512", "\n", "[", "512", "**", "2", ",", "1e5", "**", "2", "]", ",", "\n", "]", "# 512-inf", "\n", "assert", "area", "in", "areas", ",", "\"Unknown area range: {}\"", ".", "format", "(", "area", ")", "\n", "area_range", "=", "area_ranges", "[", "areas", "[", "area", "]", "]", "\n", "gt_overlaps", "=", "[", "]", "\n", "num_pos", "=", "0", "\n", "\n", "for", "image_id", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "        ", "original_id", "=", "dataset", ".", "id_to_img_map", "[", "image_id", "]", "\n", "\n", "# TODO replace with get_img_info?", "\n", "image_width", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"width\"", "]", "\n", "image_height", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"height\"", "]", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "\n", "# sort predictions in descending order", "\n", "# TODO maybe remove this and make it explicit in the documentation", "\n", "inds", "=", "prediction", ".", "get_field", "(", "\"objectness\"", ")", ".", "sort", "(", "descending", "=", "True", ")", "[", "1", "]", "\n", "prediction", "=", "prediction", "[", "inds", "]", "\n", "\n", "ann_ids", "=", "dataset", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "original_id", ")", "\n", "anno", "=", "dataset", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "gt_boxes", "=", "[", "obj", "[", "\"bbox\"", "]", "for", "obj", "in", "anno", "if", "obj", "[", "\"iscrowd\"", "]", "==", "0", "]", "\n", "gt_boxes", "=", "torch", ".", "as_tensor", "(", "gt_boxes", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "# guard against no boxes", "\n", "gt_boxes", "=", "BoxList", "(", "gt_boxes", ",", "(", "image_width", ",", "image_height", ")", ",", "mode", "=", "\"xywh\"", ")", ".", "convert", "(", "\n", "\"xyxy\"", "\n", ")", "\n", "gt_areas", "=", "torch", ".", "as_tensor", "(", "[", "obj", "[", "\"area\"", "]", "for", "obj", "in", "anno", "if", "obj", "[", "\"iscrowd\"", "]", "==", "0", "]", ")", "\n", "\n", "if", "len", "(", "gt_boxes", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "valid_gt_inds", "=", "(", "gt_areas", ">=", "area_range", "[", "0", "]", ")", "&", "(", "gt_areas", "<=", "area_range", "[", "1", "]", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", "valid_gt_inds", "]", "\n", "\n", "num_pos", "+=", "len", "(", "gt_boxes", ")", "\n", "\n", "if", "len", "(", "gt_boxes", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "limit", "is", "not", "None", "and", "len", "(", "prediction", ")", ">", "limit", ":", "\n", "            ", "prediction", "=", "prediction", "[", ":", "limit", "]", "\n", "\n", "", "overlaps", "=", "boxlist_iou", "(", "prediction", ",", "gt_boxes", ")", "\n", "\n", "_gt_overlaps", "=", "torch", ".", "zeros", "(", "len", "(", "gt_boxes", ")", ")", "\n", "for", "j", "in", "range", "(", "min", "(", "len", "(", "prediction", ")", ",", "len", "(", "gt_boxes", ")", ")", ")", ":", "\n", "# find which proposal box maximally covers each gt box", "\n", "# and get the iou amount of coverage for each gt box", "\n", "            ", "max_overlaps", ",", "argmax_overlaps", "=", "overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "\n", "# find which gt box is 'best' covered (i.e. 'best' = most iou)", "\n", "gt_ovr", ",", "gt_ind", "=", "max_overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "assert", "gt_ovr", ">=", "0", "\n", "# find the proposal box that covers the best covered gt box", "\n", "box_ind", "=", "argmax_overlaps", "[", "gt_ind", "]", "\n", "# record the iou coverage of this gt box", "\n", "_gt_overlaps", "[", "j", "]", "=", "overlaps", "[", "box_ind", ",", "gt_ind", "]", "\n", "assert", "_gt_overlaps", "[", "j", "]", "==", "gt_ovr", "\n", "# mark the proposal box and the gt box as used", "\n", "overlaps", "[", "box_ind", ",", ":", "]", "=", "-", "1", "\n", "overlaps", "[", ":", ",", "gt_ind", "]", "=", "-", "1", "\n", "\n", "# append recorded iou coverage level", "\n", "", "gt_overlaps", ".", "append", "(", "_gt_overlaps", ")", "\n", "", "gt_overlaps", "=", "torch", ".", "cat", "(", "gt_overlaps", ",", "dim", "=", "0", ")", "\n", "gt_overlaps", ",", "_", "=", "torch", ".", "sort", "(", "gt_overlaps", ")", "\n", "\n", "if", "thresholds", "is", "None", ":", "\n", "        ", "step", "=", "0.05", "\n", "thresholds", "=", "torch", ".", "arange", "(", "0.5", ",", "0.95", "+", "1e-5", ",", "step", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "recalls", "=", "torch", ".", "zeros_like", "(", "thresholds", ")", "\n", "# compute recall for each iou threshold", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "recalls", "[", "i", "]", "=", "(", "gt_overlaps", ">=", "t", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "/", "float", "(", "num_pos", ")", "\n", "# ar = 2 * np.trapz(recalls, thresholds)", "\n", "", "ar", "=", "recalls", ".", "mean", "(", ")", "\n", "return", "{", "\n", "\"ar\"", ":", "ar", ",", "\n", "\"recalls\"", ":", "recalls", ",", "\n", "\"thresholds\"", ":", "thresholds", ",", "\n", "\"gt_overlaps\"", ":", "gt_overlaps", ",", "\n", "\"num_pos\"", ":", "num_pos", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.evaluate_predictions_on_coco": [[478, 497], ["print", "open", "json.dump"], "function", ["None"], ["", "def", "evaluate_predictions_on_coco", "(", "\n", "coco_gt", ",", "coco_results", ",", "json_result_file", ",", "iou_type", "=", "\"bbox\"", "\n", ")", ":", "\n", "    ", "import", "json", "\n", "\n", "print", "(", "'writing results to '", "+", "json_result_file", ")", "\n", "with", "open", "(", "json_result_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "coco_results", ",", "f", ")", "\n", "\n", "# from pycocotools.cocoeval import COCOeval", "\n", "\n", "# coco_dt = coco_gt.loadRes(str(json_result_file))", "\n", "# # coco_dt = coco_gt.loadRes(coco_results)", "\n", "# coco_eval = COCOeval(coco_gt, coco_dt, iou_type)", "\n", "# coco_eval.evaluate()", "\n", "# coco_eval.accumulate()", "\n", "# coco_eval.summarize()", "\n", "# return coco_eval", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.word.word_eval.check_expected_results": [[544, 564], ["logging.getLogger", "logging.getLogger.error", "logging.getLogger.info"], "function", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.coco_text_api.coco_text.COCO_Text.info"], ["", "", "def", "check_expected_results", "(", "results", ",", "expected_results", ",", "sigma_tol", ")", ":", "\n", "    ", "if", "not", "expected_results", ":", "\n", "        ", "return", "\n", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", "\"maskrcnn_benchmark.inference\"", ")", "\n", "for", "task", ",", "metric", ",", "(", "mean", ",", "std", ")", "in", "expected_results", ":", "\n", "        ", "actual_val", "=", "results", ".", "results", "[", "task", "]", "[", "metric", "]", "\n", "lo", "=", "mean", "-", "sigma_tol", "*", "std", "\n", "hi", "=", "mean", "+", "sigma_tol", "*", "std", "\n", "ok", "=", "(", "lo", "<", "actual_val", ")", "and", "(", "actual_val", "<", "hi", ")", "\n", "msg", "=", "(", "\n", "\"{} > {} sanity check (actual vs. expected): \"", "\n", "\"{:.3f} vs. mean={:.4f}, std={:.4}, range=({:.4f}, {:.4f})\"", "\n", ")", ".", "format", "(", "task", ",", "metric", ",", "actual_val", ",", "mean", ",", "std", ",", "lo", ",", "hi", ")", "\n", "if", "not", "ok", ":", "\n", "            ", "msg", "=", "\"FAIL: \"", "+", "msg", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"PASS: \"", "+", "msg", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.samplers.distributed.DistributedSampler.__init__": [[25, 41], ["int", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "math.ceil", "torch.is_available", "torch.is_available", "RuntimeError", "torch.is_available", "torch.is_available", "RuntimeError", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_world_size", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_world_size", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_rank", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.utils.comm.get_rank", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.samplers.distributed.DistributedSampler.__iter__": [[42, 61], ["iter", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "# deterministically shuffle based on epoch", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.samplers.distributed.DistributedSampler.__len__": [[62, 64], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.samplers.distributed.DistributedSampler.set_epoch": [[65, 67], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.samplers.grouped_batch_sampler.GroupedBatchSampler.__init__": [[24, 39], ["torch.as_tensor", "isinstance", "ValueError", "grouped_batch_sampler.GroupedBatchSampler.group_ids.dim", "torch.unique().sort", "torch.unique"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", "=", "False", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "sampler", ",", "Sampler", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"sampler should be an instance of \"", "\n", "\"torch.utils.data.Sampler, but got sampler={}\"", ".", "format", "(", "sampler", ")", "\n", ")", "\n", "", "self", ".", "sampler", "=", "sampler", "\n", "self", ".", "group_ids", "=", "torch", ".", "as_tensor", "(", "group_ids", ")", "\n", "assert", "self", ".", "group_ids", ".", "dim", "(", ")", "==", "1", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "drop_uneven", "=", "drop_uneven", "\n", "\n", "self", ".", "groups", "=", "torch", ".", "unique", "(", "self", ".", "group_ids", ")", ".", "sort", "(", "0", ")", "[", "0", "]", "\n", "\n", "self", ".", "_can_reuse_batches", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.samplers.grouped_batch_sampler.GroupedBatchSampler._prepare_batches": [[40, 101], ["len", "torch.as_tensor", "torch.full", "torch.arange", "tuple", "torch.as_tensor", "[].tolist", "list", "len", "c.split", "itertools.chain.from_iterable", "t[].item", "merged[].tolist", "enumerate", "torch.as_tensor.tolist", "torch.as_tensor.sort", "len", "kept.append", "s.sort"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "_prepare_batches", "(", "self", ")", ":", "\n", "        ", "dataset_size", "=", "len", "(", "self", ".", "group_ids", ")", "\n", "# get the sampled indices from the sampler", "\n", "sampled_ids", "=", "torch", ".", "as_tensor", "(", "list", "(", "self", ".", "sampler", ")", ")", "\n", "# potentially not all elements of the dataset were sampled", "\n", "# by the sampler (e.g., DistributedSampler).", "\n", "# construct a tensor which contains -1 if the element was", "\n", "# not sampled, and a non-negative number indicating the", "\n", "# order where the element was sampled.", "\n", "# for example. if sampled_ids = [3, 1] and dataset_size = 5,", "\n", "# the order is [-1, 1, -1, 0, -1]", "\n", "order", "=", "torch", ".", "full", "(", "(", "dataset_size", ",", ")", ",", "-", "1", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "order", "[", "sampled_ids", "]", "=", "torch", ".", "arange", "(", "len", "(", "sampled_ids", ")", ")", "\n", "\n", "# get a mask with the elements that were sampled", "\n", "mask", "=", "order", ">=", "0", "\n", "\n", "# find the elements that belong to each individual cluster", "\n", "clusters", "=", "[", "(", "self", ".", "group_ids", "==", "i", ")", "&", "mask", "for", "i", "in", "self", ".", "groups", "]", "\n", "# get relative order of the elements inside each cluster", "\n", "# that follows the order from the sampler", "\n", "relative_order", "=", "[", "order", "[", "cluster", "]", "for", "cluster", "in", "clusters", "]", "\n", "# with the relative order, find the absolute order in the", "\n", "# sampled space", "\n", "permutation_ids", "=", "[", "s", "[", "s", ".", "sort", "(", ")", "[", "1", "]", "]", "for", "s", "in", "relative_order", "]", "\n", "# permute each cluster so that they follow the order from", "\n", "# the sampler", "\n", "permuted_clusters", "=", "[", "sampled_ids", "[", "idx", "]", "for", "idx", "in", "permutation_ids", "]", "\n", "\n", "# splits each cluster in batch_size, and merge as a list of tensors", "\n", "splits", "=", "[", "c", ".", "split", "(", "self", ".", "batch_size", ")", "for", "c", "in", "permuted_clusters", "]", "\n", "merged", "=", "tuple", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "splits", ")", ")", "\n", "\n", "# now each batch internally has the right order, but", "\n", "# they are grouped by clusters. Find the permutation between", "\n", "# different batches that brings them as close as possible to", "\n", "# the order that we have in the sampler. For that, we will consider the", "\n", "# ordering as coming from the first element of each batch, and sort", "\n", "# correspondingly", "\n", "first_element_of_batch", "=", "[", "t", "[", "0", "]", ".", "item", "(", ")", "for", "t", "in", "merged", "]", "\n", "# get and inverse mapping from sampled indices and the position where", "\n", "# they occur (as returned by the sampler)", "\n", "inv_sampled_ids_map", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "enumerate", "(", "sampled_ids", ".", "tolist", "(", ")", ")", "}", "\n", "# from the first element in each batch, get a relative ordering", "\n", "first_index_of_batch", "=", "torch", ".", "as_tensor", "(", "\n", "[", "inv_sampled_ids_map", "[", "s", "]", "for", "s", "in", "first_element_of_batch", "]", "\n", ")", "\n", "\n", "# permute the batches so that they approximately follow the order", "\n", "# from the sampler", "\n", "permutation_order", "=", "first_index_of_batch", ".", "sort", "(", "0", ")", "[", "1", "]", ".", "tolist", "(", ")", "\n", "# finally, permute the batches", "\n", "batches", "=", "[", "merged", "[", "i", "]", ".", "tolist", "(", ")", "for", "i", "in", "permutation_order", "]", "\n", "\n", "if", "self", ".", "drop_uneven", ":", "\n", "            ", "kept", "=", "[", "]", "\n", "for", "batch", "in", "batches", ":", "\n", "                ", "if", "len", "(", "batch", ")", "==", "self", ".", "batch_size", ":", "\n", "                    ", "kept", ".", "append", "(", "batch", ")", "\n", "", "", "batches", "=", "kept", "\n", "", "return", "batches", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.samplers.grouped_batch_sampler.GroupedBatchSampler.__iter__": [[102, 110], ["iter", "grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.samplers.grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_can_reuse_batches", ":", "\n", "            ", "batches", "=", "self", ".", "_batches", "\n", "self", ".", "_can_reuse_batches", "=", "False", "\n", "", "else", ":", "\n", "            ", "batches", "=", "self", ".", "_prepare_batches", "(", ")", "\n", "", "self", ".", "_batches", "=", "batches", "\n", "return", "iter", "(", "batches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.samplers.grouped_batch_sampler.GroupedBatchSampler.__len__": [[111, 116], ["len", "hasattr", "grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.samplers.grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"_batches\"", ")", ":", "\n", "            ", "self", ".", "_batches", "=", "self", ".", "_prepare_batches", "(", ")", "\n", "self", ".", "_can_reuse_batches", "=", "True", "\n", "", "return", "len", "(", "self", ".", "_batches", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.samplers.iteration_based_batch_sampler.IterationBasedBatchSampler.__init__": [[11, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "batch_sampler", ",", "num_iterations", ",", "start_iter", "=", "0", ")", ":", "\n", "        ", "self", ".", "batch_sampler", "=", "batch_sampler", "\n", "self", ".", "num_iterations", "=", "num_iterations", "\n", "self", ".", "start_iter", "=", "start_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.samplers.iteration_based_batch_sampler.IterationBasedBatchSampler.__iter__": [[16, 29], ["hasattr", "iteration_based_batch_sampler.IterationBasedBatchSampler.batch_sampler.sampler.set_epoch"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.samplers.distributed.DistributedSampler.set_epoch"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "iteration", "=", "self", ".", "start_iter", "\n", "while", "iteration", "<=", "self", ".", "num_iterations", ":", "\n", "# if the underlying sampler has a set_epoch method, like", "\n", "# DistributedSampler, used for making each process see", "\n", "# a different split of the dataset, then set it", "\n", "            ", "if", "hasattr", "(", "self", ".", "batch_sampler", ".", "sampler", ",", "\"set_epoch\"", ")", ":", "\n", "                ", "self", ".", "batch_sampler", ".", "sampler", ".", "set_epoch", "(", "iteration", ")", "\n", "", "for", "batch", "in", "self", ".", "batch_sampler", ":", "\n", "                ", "iteration", "+=", "1", "\n", "if", "iteration", ">", "self", ".", "num_iterations", ":", "\n", "                    ", "break", "\n", "", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.samplers.iteration_based_batch_sampler.IterationBasedBatchSampler.__len__": [[30, 32], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_iterations", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.Compose.__init__": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.Compose.__call__": [[14, 18], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "image", ",", "target", "=", "t", "(", "image", ",", "target", ")", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.Compose.__repr__": [[19, 26], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "\"\\n\"", "\n", "format_string", "+=", "\"    {0}\"", ".", "format", "(", "t", ")", "\n", "", "format_string", "+=", "\"\\n)\"", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.Resize.__init__": [[29, 34], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_size", ",", "max_size", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "min_size", ",", "(", "list", ",", "tuple", ",", "range", ")", ")", ":", "\n", "            ", "min_size", "=", "(", "min_size", ",", ")", "\n", "", "self", ".", "min_size", "=", "min_size", "\n", "self", ".", "max_size", "=", "max_size", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.Resize.get_size": [[36, 57], ["random.choice", "float", "float", "int", "int", "min", "max", "int", "round"], "methods", ["None"], ["", "def", "get_size", "(", "self", ",", "image_size", ")", ":", "\n", "        ", "w", ",", "h", "=", "image_size", "\n", "size", "=", "random", ".", "choice", "(", "self", ".", "min_size", ")", "\n", "max_size", "=", "self", ".", "max_size", "\n", "if", "max_size", "is", "not", "None", ":", "\n", "            ", "min_original_size", "=", "float", "(", "min", "(", "(", "w", ",", "h", ")", ")", ")", "\n", "max_original_size", "=", "float", "(", "max", "(", "(", "w", ",", "h", ")", ")", ")", "\n", "if", "max_original_size", "/", "min_original_size", "*", "size", ">", "max_size", ":", "\n", "                ", "size", "=", "int", "(", "round", "(", "max_size", "*", "min_original_size", "/", "max_original_size", ")", ")", "\n", "\n", "", "", "if", "(", "w", "<=", "h", "and", "w", "==", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "size", ")", ":", "\n", "            ", "return", "(", "h", ",", "w", ")", "\n", "\n", "", "if", "w", "<", "h", ":", "\n", "            ", "ow", "=", "size", "\n", "oh", "=", "int", "(", "size", "*", "h", "/", "w", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "size", "\n", "ow", "=", "int", "(", "size", "*", "w", "/", "h", ")", "\n", "\n", "", "return", "(", "oh", ",", "ow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.Resize.__call__": [[58, 68], ["transforms.Resize.get_size", "torchvision.transforms.functional.resize", "isinstance", "t.resize", "target.resize.resize.resize"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.Resize.get_size", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", "=", "None", ")", ":", "\n", "        ", "size", "=", "self", ".", "get_size", "(", "image", ".", "size", ")", "\n", "image", "=", "F", ".", "resize", "(", "image", ",", "size", ")", "\n", "if", "isinstance", "(", "target", ",", "list", ")", ":", "\n", "            ", "target", "=", "[", "t", ".", "resize", "(", "image", ".", "size", ")", "for", "t", "in", "target", "]", "\n", "", "elif", "target", "is", "None", ":", "\n", "            ", "return", "image", "\n", "", "else", ":", "\n", "            ", "target", "=", "target", ".", "resize", "(", "image", ".", "size", ")", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomHorizontalFlip.__init__": [[71, 73], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomHorizontalFlip.__call__": [[74, 82], ["random.random", "torchvision.transforms.functional.hflip", "isinstance", "target.transpose.transpose.transpose", "t.transpose"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.transpose", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.transpose"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "image", "=", "F", ".", "hflip", "(", "image", ")", "\n", "if", "isinstance", "(", "target", ",", "list", ")", ":", "\n", "                ", "target", "=", "[", "t", ".", "transpose", "(", "0", ")", "for", "t", "in", "target", "]", "\n", "", "else", ":", "\n", "                ", "target", "=", "target", ".", "transpose", "(", "0", ")", "\n", "", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomVerticalFlip.__init__": [[85, 87], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomVerticalFlip.__call__": [[88, 93], ["random.random", "torchvision.transforms.functional.vflip", "target.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.transpose"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "image", "=", "F", ".", "vflip", "(", "image", ")", "\n", "target", "=", "target", ".", "transpose", "(", "1", ")", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.ColorJitter.__init__": [[96, 107], ["torchvision.transforms.ColorJitter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "brightness", "=", "None", ",", "\n", "contrast", "=", "None", ",", "\n", "saturation", "=", "None", ",", "\n", "hue", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "color_jitter", "=", "torchvision", ".", "transforms", ".", "ColorJitter", "(", "\n", "brightness", "=", "brightness", ",", "\n", "contrast", "=", "contrast", ",", "\n", "saturation", "=", "saturation", ",", "\n", "hue", "=", "hue", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.ColorJitter.__call__": [[108, 111], ["transforms.ColorJitter.color_jitter"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "image", "=", "self", ".", "color_jitter", "(", "image", ")", "\n", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.ToTensor.__call__": [[114, 116], ["torchvision.transforms.functional.to_tensor"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "return", "F", ".", "to_tensor", "(", "image", ")", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.Normalize.__init__": [[119, 123], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "to_bgr255", "=", "True", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "to_bgr255", "=", "to_bgr255", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.Normalize.__call__": [[124, 131], ["torchvision.transforms.functional.normalize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "to_bgr255", ":", "\n", "            ", "image", "=", "image", "[", "[", "2", ",", "1", ",", "0", "]", "]", "*", "255", "\n", "", "image", "=", "F", ".", "normalize", "(", "image", ",", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "# if target is None:", "\n", "#     return image", "\n", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomCrop.__init__": [[137, 142], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "crop_size", ",", "discard_prob", "=", "0.6", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "discard_prob", "=", "discard_prob", "\n", "if", "self", ".", "crop_size", "%", "2", "!=", "0", ":", "\n", "            ", "self", ".", "crop_size", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomCrop.__call__": [[143, 167], ["min", "min", "torchvision.transforms.functional.crop", "numpy.random.randint", "numpy.random.randint", "target.crop", "len"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.crop", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.crop", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "crop_size", "<", "0", ":", "\n", "            ", "return", "image", ",", "target", "\n", "", "w", ",", "h", "=", "image", ".", "size", "\n", "new_h", "=", "min", "(", "h", ",", "self", ".", "crop_size", ")", "\n", "new_w", "=", "min", "(", "w", ",", "self", ".", "crop_size", ")", "\n", "while", "True", ":", "\n", "            ", "top", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "h", "-", "new_h", "+", "1", ")", "\n", "left", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "w", "-", "new_w", "+", "1", ")", "\n", "box", "=", "(", "left", ",", "top", ",", "left", "+", "new_w", ",", "top", "+", "new_h", ")", "\n", "# should make sure target crop method does not modify itself", "\n", "new_target", "=", "target", ".", "crop", "(", "box", ",", "remove_empty", "=", "True", ")", "\n", "if", "len", "(", "new_target", ")", ">", "0", ":", "\n", "                ", "target", "=", "new_target", "\n", "break", "\n", "", "", "image", "=", "F", ".", "crop", "(", "image", ",", "top", ",", "left", ",", "new_h", ",", "new_w", ")", "\n", "\"\"\" Don't pad in crop\n        if new_h < self.crop_size or new_w < self.crop_size:\n            padding = (0, 0, (self.crop_size - new_w),\n                       (self.crop_size - new_h))\n            image = F.pad(image, padding=padding)\n            target = target.pad((self.crop_size, self.crop_size))\n        \"\"\"", "\n", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomCropExpand.__init__": [[171, 181], ["ValueError", "isinstance", "isinstance", "len", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["def", "__init__", "(", "self", ",", "prob", ",", "init_crop_size", "=", "(", "0.5", ",", "1.0", ")", ")", ":", "\n", "\n", "        ", "if", "(", "not", "isinstance", "(", "init_crop_size", ",", "list", ")", ")", "and", "(", "not", "isinstance", "(", "init_crop_size", ",", "tuple", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Paremeter init_crop_size should be a list or tuple!'", ")", "\n", "", "elif", "len", "(", "init_crop_size", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "'Length of init_crop_size should be 2!'", ")", "\n", "", "elif", "not", "(", "init_crop_size", "[", "0", "]", "<=", "1", "and", "init_crop_size", "[", "0", "]", ">=", "0", "and", "init_crop_size", "[", "1", "]", "<=", "1", "and", "init_crop_size", "[", "1", "]", ">=", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Elements of init_crop_size should be within [0, 1]!'", ")", "\n", "", "self", ".", "prob", "=", "prob", "\n", "self", ".", "init_crop_size", "=", "init_crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomCropExpand.__call__": [[182, 213], ["isinstance", "random.random", "transforms.RandomCropExpand.initial_crop_region", "transforms.RandomCropExpand.adjust_crop_region", "isinstance", "image.crop.crop.crop", "isinstance", "target[].crop", "transforms.RandomCropExpand.numpy", "keep_target.crop", "keep_target.crop", "len", "t.crop"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomCropExpand.initial_crop_region", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomCropExpand.adjust_crop_region", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.crop", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.crop", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.crop", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.crop", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.crop"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">=", "self", ".", "prob", ":", "\n", "            ", "return", "image", ",", "target", "\n", "\n", "", "if", "isinstance", "(", "target", ",", "list", ")", ":", "\n", "            ", "target0", "=", "target", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "target0", "=", "target", "\n", "", "while", "True", ":", "\n", "# Initial Crop Region", "\n", "            ", "crop_region", "=", "self", ".", "initial_crop_region", "(", "image", ")", "\n", "\n", "# Adjust Crop Region", "\n", "crop_region", ",", "keep_target", "=", "self", ".", "adjust_crop_region", "(", "crop_region", ",", "target0", ")", "\n", "if", "crop_region", "is", "None", "and", "keep_target", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "isinstance", "(", "target", ",", "list", ")", ":", "\n", "# check empty char", "\n", "                ", "new_t1", "=", "target", "[", "1", "]", ".", "crop", "(", "crop_region", ")", "\n", "if", "len", "(", "new_t1", ")", "<", "1", ":", "return", "image", ",", "target", "\n", "\n", "", "image", "=", "image", ".", "crop", "(", "crop_region", ".", "numpy", "(", ")", ")", "\n", "if", "isinstance", "(", "target", ",", "list", ")", ":", "\n", "                ", "target0", "=", "keep_target", ".", "crop", "(", "crop_region", ")", "\n", "others", "=", "[", "t", ".", "crop", "(", "crop_region", ",", "remove_empty", "=", "True", ")", "for", "t", "in", "target", "[", "1", ":", "]", "]", "\n", "target", "=", "[", "target0", "]", "+", "others", "\n", "", "else", ":", "\n", "                ", "target", "=", "keep_target", ".", "crop", "(", "crop_region", ")", "\n", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomCropExpand.initial_crop_region": [[214, 224], ["torch.empty().uniform_", "torch.randint", "torch.randint", "torch.Tensor", "int", "int", "torch.empty"], "methods", ["None"], ["", "", "def", "initial_crop_region", "(", "self", ",", "image", ")", ":", "\n", "        ", "width", ",", "height", "=", "image", ".", "size", "\n", "ratio_w", ",", "ratio_h", "=", "torch", ".", "empty", "(", "2", ")", ".", "uniform_", "(", "self", ".", "init_crop_size", "[", "0", "]", ",", "self", ".", "init_crop_size", "[", "1", "]", ")", "\n", "crop_width", ",", "crop_height", "=", "int", "(", "width", "*", "ratio_w", ")", ",", "int", "(", "height", "*", "ratio_h", ")", "\n", "crop_xmin", "=", "torch", ".", "randint", "(", "width", "-", "crop_width", ",", "(", "1", ",", ")", ")", "\n", "crop_ymin", "=", "torch", ".", "randint", "(", "height", "-", "crop_height", ",", "(", "1", ",", ")", ")", "\n", "crop_xmax", "=", "crop_xmin", "+", "crop_width", "\n", "crop_ymax", "=", "crop_ymin", "+", "crop_height", "\n", "crop_region", "=", "torch", ".", "Tensor", "(", "[", "crop_xmin", ",", "crop_ymin", ",", "crop_xmax", ",", "crop_ymax", "]", ")", "\n", "return", "crop_region", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomCropExpand.intersect_area": [[225, 233], ["torch.max", "torch.max", "torch.min", "torch.min", "torch.max", "torch.max", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "intersect_area", "(", "self", ",", "bbox", ",", "bboxes", ")", ":", "\n", "        ", "inter_xmin", "=", "torch", ".", "max", "(", "bbox", "[", "0", "]", ",", "bboxes", "[", ":", ",", "0", "]", ")", "\n", "inter_ymin", "=", "torch", ".", "max", "(", "bbox", "[", "1", "]", ",", "bboxes", "[", ":", ",", "1", "]", ")", "\n", "inter_xmax", "=", "torch", ".", "min", "(", "bbox", "[", "2", "]", ",", "bboxes", "[", ":", ",", "2", "]", ")", "\n", "inter_ymax", "=", "torch", ".", "min", "(", "bbox", "[", "3", "]", ",", "bboxes", "[", ":", ",", "3", "]", ")", "\n", "inter_width", "=", "torch", ".", "max", "(", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ",", "inter_xmax", "-", "inter_xmin", ")", "\n", "inter_height", "=", "torch", ".", "max", "(", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ",", "inter_ymax", "-", "inter_ymin", ")", "\n", "return", "inter_width", "*", "inter_height", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomCropExpand.adjust_crop_region": [[234, 251], ["torch.zeros", "len", "transforms.RandomCropExpand.intersect_area", "keep_indies.equal", "torch.min", "torch.min", "torch.max", "torch.max", "torch.Tensor", "torch.sum", "torch.min", "torch.min", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomCropExpand.intersect_area"], ["", "def", "adjust_crop_region", "(", "self", ",", "crop_region", ",", "target", ")", ":", "\n", "        ", "keep_indies_", "=", "torch", ".", "zeros", "(", "(", "len", "(", "target", ")", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "while", "True", ":", "\n", "            ", "inter_area", "=", "self", ".", "intersect_area", "(", "crop_region", ",", "target", ".", "bbox", ")", "\n", "keep_indies", "=", "(", "inter_area", ">", "0", ")", "\n", "if", "torch", ".", "sum", "(", "keep_indies", ")", "==", "0", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "keep_target", "=", "target", "[", "keep_indies", "]", "\n", "if", "keep_indies", ".", "equal", "(", "keep_indies_", ")", ":", "\n", "                ", "return", "crop_region", ",", "keep_target", "\n", "", "keep_bbox", "=", "keep_target", ".", "bbox", "\n", "crop_xmin", "=", "torch", ".", "min", "(", "crop_region", "[", "0", "]", ",", "torch", ".", "min", "(", "keep_bbox", "[", ":", ",", "0", "]", ")", ")", "\n", "crop_ymin", "=", "torch", ".", "min", "(", "crop_region", "[", "1", "]", ",", "torch", ".", "min", "(", "keep_bbox", "[", ":", ",", "1", "]", ")", ")", "\n", "crop_xmax", "=", "torch", ".", "max", "(", "crop_region", "[", "2", "]", ",", "torch", ".", "max", "(", "keep_bbox", "[", ":", ",", "2", "]", ")", ")", "\n", "crop_ymax", "=", "torch", ".", "max", "(", "crop_region", "[", "3", "]", ",", "torch", ".", "max", "(", "keep_bbox", "[", ":", ",", "3", "]", ")", ")", "\n", "crop_region", "=", "torch", ".", "Tensor", "(", "[", "crop_xmin", ",", "crop_ymin", ",", "crop_xmax", ",", "crop_ymax", "]", ")", "\n", "keep_indies_", "=", "keep_indies", "\n", "", "", "", "class", "RandomCrop_resize", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomCrop_resize.__init__": [[252, 257], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "out_size", ",", "crop_min_size", "=", "500", ",", "crop_max_size", "=", "1000", ",", "max_trys", "=", "50", ")", ":", "\n", "        ", "self", ".", "min_size", "=", "crop_min_size", "\n", "self", ".", "max_size", "=", "crop_max_size", "\n", "self", ".", "max_trys", "=", "max_trys", "\n", "self", ".", "size", "=", "(", "out_size", ",", "out_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomCrop_resize.random_crop": [[259, 302], ["numpy.array", "numpy.zeros", "numpy.zeros", "target.crop.crop.bbox.numpy", "target.crop.crop.get_field", "range", "len", "numpy.round().astype", "numpy.where", "numpy.where", "numpy.random.choice", "min", "max", "numpy.random.choice", "min", "max", "target.crop.crop.crop", "len", "len", "len", "PIL.Image.fromarray", "numpy.round", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.get_field", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.crop", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.datasets.iiit.IIIT.len"], ["", "def", "random_crop", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "im", "=", "np", ".", "array", "(", "image", ")", "\n", "w", ",", "h", "=", "image", ".", "size", "\n", "h_array", "=", "np", ".", "zeros", "(", "(", "h", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "w_array", "=", "np", ".", "zeros", "(", "(", "w", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "boxes", "=", "target", ".", "bbox", ".", "numpy", "(", ")", "\n", "not_difficult", "=", "target", ".", "get_field", "(", "'labels'", ")", "\n", "text_inds", "=", "(", "not_difficult", "==", "1", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", "\n", "boxes", "=", "boxes", "[", "text_inds", "]", "\n", "if", "len", "(", "boxes", ")", "==", "0", ":", "\n", "            ", "return", "image", ",", "target", "\n", "", "for", "box", "in", "boxes", ":", "\n", "            ", "box", "=", "np", ".", "round", "(", "box", ",", "decimals", "=", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "minx", "=", "box", "[", "0", "]", "\n", "maxx", "=", "box", "[", "2", "]", "\n", "w_array", "[", "minx", ":", "maxx", "]", "=", "1", "\n", "miny", "=", "box", "[", "1", "]", "\n", "maxy", "=", "box", "[", "3", "]", "\n", "h_array", "[", "miny", ":", "maxy", "]", "=", "1", "\n", "", "h_axis", "=", "np", ".", "where", "(", "h_array", "==", "0", ")", "[", "0", "]", "\n", "w_axis", "=", "np", ".", "where", "(", "w_array", "==", "0", ")", "[", "0", "]", "\n", "if", "len", "(", "h_axis", ")", "==", "0", "or", "len", "(", "w_axis", ")", "==", "0", ":", "\n", "            ", "return", "image", ",", "target", "\n", "", "for", "i", "in", "range", "(", "self", ".", "max_trys", ")", ":", "\n", "            ", "xx", "=", "np", ".", "random", ".", "choice", "(", "w_axis", ",", "size", "=", "2", ")", "\n", "xmin", "=", "min", "(", "xx", ")", "\n", "xmax", "=", "max", "(", "xx", ")", "\n", "x_size", "=", "xmax", "-", "xmin", "\n", "if", "x_size", ">", "self", ".", "max_size", "or", "x_size", "<", "self", ".", "min_size", ":", "\n", "                ", "continue", "\n", "", "yy", "=", "np", ".", "random", ".", "choice", "(", "h_axis", ",", "size", "=", "2", ")", "\n", "ymin", "=", "min", "(", "yy", ")", "\n", "ymax", "=", "max", "(", "yy", ")", "\n", "y_size", "=", "ymax", "-", "ymin", "\n", "if", "y_size", ">", "self", ".", "max_size", "or", "y_size", "<", "self", ".", "min_size", ":", "\n", "                ", "continue", "\n", "", "box_in_area", "=", "(", "boxes", "[", ":", ",", "0", "]", ">=", "xmin", ")", "&", "(", "boxes", "[", ":", ",", "1", "]", ">=", "ymin", ")", "&", "(", "boxes", "[", ":", ",", "2", "]", "<=", "xmax", ")", "&", "(", "boxes", "[", ":", ",", "3", "]", "<=", "ymax", ")", "\n", "if", "len", "(", "np", ".", "where", "(", "box_in_area", ")", "[", "0", "]", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "im", "=", "im", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "\n", "target", "=", "target", ".", "crop", "(", "[", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "]", ")", "\n", "return", "Image", ".", "fromarray", "(", "im", ")", ",", "target", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomCrop_resize.__call__": [[303, 313], ["transforms.RandomCrop_resize.random_crop", "torchvision.transforms.functional.resize", "target.resize.resize.resize", "target.resize.resize.bbox.size"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomCrop_resize.random_crop", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize", "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.resize"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "image_crop", ",", "target_crop", "=", "self", ".", "random_crop", "(", "image", ",", "target", ")", "\n", "#keep it have a text", "\n", "if", "target", ".", "bbox", ".", "size", "(", "0", ")", "!=", "0", ":", "\n", "            ", "image", "=", "image_crop", "\n", "target", "=", "target_crop", "\n", "\n", "", "image", "=", "F", ".", "resize", "(", "image", ",", "self", ".", "size", ")", "\n", "target", "=", "target", ".", "resize", "(", "image", ".", "size", ")", "\n", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomRotate.__init__": [[315, 317], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.2", ")", ":", "\n", "        ", "self", ".", "prob", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.transforms.RandomRotate.__call__": [[318, 327], ["random.random", "range", "torchvision.transforms.functional.rotate", "target.transpose.transpose.transpose", "random.random"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.structures.bounding_box.BoxList.transpose"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "times", "=", "1", "if", "random", ".", "random", "(", ")", ">", "0.5", "else", "3", "\n", "for", "i", "in", "range", "(", "times", ")", ":", "\n", "                ", "image", "=", "F", ".", "rotate", "(", "image", ",", "90", ",", "expand", "=", "True", ")", "\n", "target", "=", "target", ".", "transpose", "(", "2", ")", "\n", "# target.sort()", "\n", "\n", "", "", "return", "image", ",", "target", "", "", "", ""]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.transforms.build.build_transforms": [[67, 114], ["transforms.Normalize", "transforms.ColorJitter", "transforms.RandomCrop_resize", "transforms.Compose", "transforms.Compose", "transforms.ToTensor", "transforms.ToTensor"], "function", ["None"], ["", "def", "make_data_sampler", "(", "dataset", ",", "shuffle", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "return", "samplers", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "shuffle", ")", "\n", "", "if", "shuffle", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "RandomSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SequentialSampler", "(", "dataset", ")", "\n", "", "return", "sampler", "\n", "\n", "\n", "", "def", "_quantize", "(", "x", ",", "bins", ")", ":", "\n", "    ", "bins", "=", "copy", ".", "copy", "(", "bins", ")", "\n", "bins", "=", "sorted", "(", "bins", ")", "\n", "quantized", "=", "list", "(", "map", "(", "lambda", "y", ":", "bisect", ".", "bisect_right", "(", "bins", ",", "y", ")", ",", "x", ")", ")", "\n", "return", "quantized", "\n", "\n", "\n", "", "def", "_compute_aspect_ratios", "(", "dataset", ")", ":", "\n", "    ", "aspect_ratios", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "img_info", "=", "dataset", ".", "get_img_info", "(", "i", ")", "\n", "aspect_ratio", "=", "float", "(", "img_info", "[", "\"height\"", "]", ")", "/", "float", "(", "img_info", "[", "\"width\"", "]", ")", "\n", "aspect_ratios", ".", "append", "(", "aspect_ratio", ")", "\n", "", "return", "aspect_ratios", "\n", "\n", "\n", "", "def", "make_batch_data_sampler", "(", "\n", "dataset", ",", "sampler", ",", "aspect_grouping", ",", "images_per_batch", ",", "num_iters", "=", "None", ",", "start_iter", "=", "0", "\n", ")", ":", "\n", "    ", "if", "aspect_grouping", ":", "\n", "        ", "if", "not", "isinstance", "(", "aspect_grouping", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "aspect_grouping", "=", "[", "aspect_grouping", "]", "\n", "", "aspect_ratios", "=", "_compute_aspect_ratios", "(", "dataset", ")", "\n", "group_ids", "=", "_quantize", "(", "aspect_ratios", ",", "aspect_grouping", ")", "\n", "batch_sampler", "=", "samplers", ".", "GroupedBatchSampler", "(", "\n", "sampler", ",", "group_ids", ",", "images_per_batch", ",", "drop_uneven", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "        ", "batch_sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "BatchSampler", "(", "\n", "sampler", ",", "images_per_batch", ",", "drop_last", "=", "False", "\n", ")", "\n", "", "if", "num_iters", "is", "not", "None", ":", "\n", "        ", "batch_sampler", "=", "samplers", ".", "IterationBasedBatchSampler", "(", "\n", "batch_sampler", ",", "num_iters", ",", "start_iter", "\n", ")", "\n", "", "return", "batch_sampler", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.OptimizerDict.__init__": [[9, 11], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["from", "maskrcnn_benchmark", ".", "utils", ".", "miscellaneous", "import", "save_labels", "\n", "\n", "from", ".", "import", "datasets", "as", "D", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.OptimizerDict.state_dict": [[12, 14], ["optim.state_dict", "build.OptimizerDict.values"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.OptimizerDict.state_dict"], ["from", ".", "import", "samplers", "\n", "\n", "from", ".", "collate_batch", "import", "BatchCollator", ",", "BBoxAugCollator", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.OptimizerDict.load_state_dict": [[15, 18], ["zip", "build.OptimizerDict.values", "optim.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.OptimizerDict.load_state_dict"], ["from", ".", "transforms", "import", "build_transforms", "\n", "\n", "\n", "def", "build_dataset", "(", "dataset_list", ",", "transforms", ",", "dataset_catalog", ",", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.make_optimizer": [[24, 61], ["model.named_parameters", "torch.optim.SGD", "key.startswith", "key.endswith", "print"], "function", ["None"], ["\n", "if", "not", "isinstance", "(", "dataset_list", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"dataset_list should be a list of strings, got {}\"", ".", "format", "(", "dataset_list", ")", "\n", ")", "\n", "", "datasets", "=", "[", "]", "\n", "for", "dataset_name", "in", "dataset_list", ":", "\n", "        ", "data", "=", "dataset_catalog", ".", "get", "(", "dataset_name", ")", "\n", "factory", "=", "getattr", "(", "D", ",", "data", "[", "\"factory\"", "]", ")", "\n", "args", "=", "data", "[", "\"args\"", "]", "\n", "# for COCODataset, we want to remove images without annotations", "\n", "# during training", "\n", "if", "data", "[", "\"factory\"", "]", "in", "[", "\"COCODataset\"", ",", "\n", "\"WordDataset\"", ",", "\n", "\"CharDataset\"", ",", "]", ":", "\n", "            ", "args", "[", "\"remove_images_without_annotations\"", "]", "=", "is_train", "\n", "", "if", "data", "[", "\"factory\"", "]", "==", "\"PascalVOCDataset\"", ":", "\n", "            ", "args", "[", "\"use_difficult\"", "]", "=", "not", "is_train", "\n", "", "if", "data", "[", "\"factory\"", "]", "==", "\"COCODataset\"", ":", "\n", "            ", "args", "[", "\"cfg\"", "]", "=", "cfg", "\n", "", "args", "[", "\"transforms\"", "]", "=", "transforms", "\n", "args", "[", "\"augment\"", "]", "=", "cfg", ".", "INPUT", ".", "AUGMENT", "\n", "# make dataset from factory", "\n", "print", "(", "factory", ")", "\n", "dataset", "=", "factory", "(", "**", "args", ")", "\n", "datasets", ".", "append", "(", "dataset", ")", "\n", "\n", "# for testing, return a list of datasets", "\n", "", "if", "not", "is_train", ":", "\n", "        ", "return", "datasets", "\n", "\n", "# for training, concatenate all datasets into a single one", "\n", "", "dataset", "=", "datasets", "[", "0", "]", "\n", "if", "len", "(", "datasets", ")", ">", "1", ":", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.make_lr_scheduler": [[63, 81], ["lr_scheduler.WarmupMultiStepLR", "lr_scheduler.WarmupPolynormialLR"], "function", ["None"], ["\n", "", "return", "[", "dataset", "]", "\n", "\n", "\n", "", "def", "make_data_sampler", "(", "dataset", ",", "shuffle", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "return", "samplers", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "shuffle", ")", "\n", "", "if", "shuffle", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "RandomSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SequentialSampler", "(", "dataset", ")", "\n", "", "return", "sampler", "\n", "\n", "\n", "", "def", "_quantize", "(", "x", ",", "bins", ")", ":", "\n", "    ", "bins", "=", "copy", ".", "copy", "(", "bins", ")", "\n", "bins", "=", "sorted", "(", "bins", ")", "\n", "quantized", "=", "list", "(", "map", "(", "lambda", "y", ":", "bisect", ".", "bisect_right", "(", "bins", ",", "y", ")", ",", "x", ")", ")", "\n", "return", "quantized", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.build.make_search_lr_scheduler": [[84, 92], ["lr_scheduler.PolyCosineAnnealingLR"], "function", ["None"], ["", "def", "_compute_aspect_ratios", "(", "dataset", ")", ":", "\n", "    ", "aspect_ratios", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "img_info", "=", "dataset", ".", "get_img_info", "(", "i", ")", "\n", "aspect_ratio", "=", "float", "(", "img_info", "[", "\"height\"", "]", ")", "/", "float", "(", "img_info", "[", "\"width\"", "]", ")", "\n", "aspect_ratios", ".", "append", "(", "aspect_ratio", ")", "\n", "", "return", "aspect_ratios", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.WarmupMultiStepLR.__init__": [[12, 39], ["super().__init__", "ValueError", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "milestones", ",", "\n", "gamma", "=", "0.1", ",", "\n", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_iters", "=", "500", ",", "\n", "warmup_method", "=", "\"linear\"", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Milestones should be a list of\"", "\" increasing integers. Got {}\"", ",", "\n", "milestones", ",", "\n", ")", "\n", "\n", "", "if", "warmup_method", "not", "in", "(", "\"constant\"", ",", "\"linear\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Only 'constant' or 'linear' warmup_method accepted\"", "\n", "\"got {}\"", ".", "format", "(", "warmup_method", ")", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", "WarmupMultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.WarmupMultiStepLR.get_lr": [[40, 53], ["bisect.bisect_right", "float"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "warmup_factor", "=", "1", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_iters", ":", "\n", "            ", "if", "self", ".", "warmup_method", "==", "\"constant\"", ":", "\n", "                ", "warmup_factor", "=", "self", ".", "warmup_factor", "\n", "", "elif", "self", ".", "warmup_method", "==", "\"linear\"", ":", "\n", "                ", "alpha", "=", "float", "(", "self", ".", "last_epoch", ")", "/", "self", ".", "warmup_iters", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.WarmupPolynormialLR.__init__": [[57, 73], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "max_iter", ",", "\n", "power", "=", "0.9", ",", "\n", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_iters", "=", "500", ",", "\n", "warmup_method", "=", "\"linear\"", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "power", "=", "power", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", "WarmupPolynormialLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.WarmupPolynormialLR.get_lr": [[74, 87], ["float"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "warmup_factor", "=", "1", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_iters", ":", "\n", "            ", "if", "self", ".", "warmup_method", "==", "\"constant\"", ":", "\n", "                ", "warmup_factor", "=", "self", ".", "warmup_factor", "\n", "", "elif", "self", ".", "warmup_method", "==", "\"linear\"", ":", "\n", "                ", "alpha", "=", "float", "(", "self", ".", "last_epoch", ")", "/", "self", ".", "warmup_iters", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "(", "1", "-", "self", ".", "last_epoch", "/", "self", ".", "max_iter", ")", "**", "self", ".", "power", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__": [[91, 97], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "max_iter", ",", "T_max", ",", "eta_min", "=", "0", ",", "power", "=", "0.9", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "power", "=", "power", "\n", "self", ".", "T_max", "=", "T_max", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "super", "(", "PolyCosineAnnealingLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lanfeng4659_STR-TDSL.solver.lr_scheduler.PolyCosineAnnealingLR.get_lr": [[98, 103], ["math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "eta_min", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "\n", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "self", ".", "last_epoch", "/", "self", ".", "T_max", ")", ")", "/", "2", "\n", "*", "(", "1", "-", "self", ".", "last_epoch", "/", "self", ".", "max_iter", ")", "**", "self", ".", "power", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "", ""]]}