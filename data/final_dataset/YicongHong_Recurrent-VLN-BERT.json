{"home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.model_OSCAR.VLNBERT.__init__": [[11, 27], ["torch.Module.__init__", "print", "vlnbert.vlnbert_init.get_vlnbert_models", "torch.Sequential", "torch.Sequential", "model_OSCAR.BertLayerNorm", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "model_OSCAR.BertLayerNorm", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_init.get_vlnbert_models"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", "=", "2048", "+", "128", ")", ":", "\n", "        ", "super", "(", "VLNBERT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'\\nInitalizing the VLN-BERT model ...'", ")", "\n", "self", ".", "vln_bert", "=", "get_vlnbert_models", "(", "args", ",", "config", "=", "None", ")", "# initialize the VLN-BERT", "\n", "self", ".", "vln_bert", ".", "config", ".", "directions", "=", "4", "# a preset random number", "\n", "\n", "hidden_size", "=", "self", ".", "vln_bert", ".", "config", ".", "hidden_size", "\n", "layer_norm_eps", "=", "self", ".", "vln_bert", ".", "config", ".", "layer_norm_eps", "\n", "\n", "self", ".", "action_state_project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden_size", "+", "args", ".", "angle_feat_size", ",", "hidden_size", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "action_LayerNorm", "=", "BertLayerNorm", "(", "hidden_size", ",", "eps", "=", "layer_norm_eps", ")", "\n", "\n", "self", ".", "drop_env", "=", "nn", ".", "Dropout", "(", "p", "=", "args", ".", "featdropout", ")", "\n", "self", ".", "img_projection", "=", "nn", ".", "Linear", "(", "feature_size", ",", "hidden_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "cand_LayerNorm", "=", "BertLayerNorm", "(", "hidden_size", ",", "eps", "=", "layer_norm_eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.model_OSCAR.VLNBERT.forward": [[28, 58], ["model_OSCAR.VLNBERT.vln_bert", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_OSCAR.VLNBERT.action_state_project", "model_OSCAR.VLNBERT.action_LayerNorm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_OSCAR.VLNBERT.drop_env", "model_OSCAR.VLNBERT.img_projection", "model_OSCAR.VLNBERT.cand_LayerNorm", "model_OSCAR.VLNBERT.vln_bert", "model_OSCAR.VLNBERT.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mode", ",", "sentence", ",", "token_type_ids", "=", "None", ",", "\n", "attention_mask", "=", "None", ",", "lang_mask", "=", "None", ",", "vis_mask", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "action_feats", "=", "None", ",", "pano_feats", "=", "None", ",", "cand_feats", "=", "None", ")", ":", "\n", "\n", "        ", "if", "mode", "==", "'language'", ":", "\n", "            ", "encoded_sentence", "=", "self", ".", "vln_bert", "(", "mode", ",", "sentence", ",", "position_ids", "=", "position_ids", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "attention_mask", "=", "attention_mask", ")", "\n", "\n", "return", "encoded_sentence", "\n", "\n", "", "elif", "mode", "==", "'visual'", ":", "\n", "\n", "            ", "state_action_embed", "=", "torch", ".", "cat", "(", "(", "sentence", "[", ":", ",", "0", ",", ":", "]", ",", "action_feats", ")", ",", "1", ")", "\n", "state_with_action", "=", "self", ".", "action_state_project", "(", "state_action_embed", ")", "\n", "state_with_action", "=", "self", ".", "action_LayerNorm", "(", "state_with_action", ")", "\n", "state_feats", "=", "torch", ".", "cat", "(", "(", "state_with_action", ".", "unsqueeze", "(", "1", ")", ",", "sentence", "[", ":", ",", "1", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "cand_feats", "[", "...", ",", ":", "-", "args", ".", "angle_feat_size", "]", "=", "self", ".", "drop_env", "(", "cand_feats", "[", "...", ",", ":", "-", "args", ".", "angle_feat_size", "]", ")", "\n", "\n", "cand_feats_embed", "=", "self", ".", "img_projection", "(", "cand_feats", ")", "# [2176 * 768] projection", "\n", "cand_feats_embed", "=", "self", ".", "cand_LayerNorm", "(", "cand_feats_embed", ")", "\n", "\n", "# logit is the attention scores over the candidate features", "\n", "h_t", ",", "logit", "=", "self", ".", "vln_bert", "(", "mode", ",", "state_feats", ",", "\n", "attention_mask", "=", "attention_mask", ",", "img_feats", "=", "cand_feats_embed", ")", "\n", "\n", "return", "h_t", ",", "logit", "\n", "\n", "", "else", ":", "\n", "            ", "ModuleNotFoundError", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.model_OSCAR.BertLayerNorm.__init__": [[61, 68], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "eps", "=", "1e-12", ")", ":", "\n", "        ", "\"\"\"Construct a layernorm module in the TF style (epsilon inside the square root).\n        \"\"\"", "\n", "super", "(", "BertLayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "hidden_size", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "hidden_size", ")", ")", "\n", "self", ".", "variance_epsilon", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.model_OSCAR.BertLayerNorm.forward": [[69, 74], ["x.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "u", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "s", "=", "(", "x", "-", "u", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "u", ")", "/", "torch", ".", "sqrt", "(", "s", "+", "self", ".", "variance_epsilon", ")", "\n", "return", "self", ".", "weight", "*", "x", "+", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.model_OSCAR.Critic.__init__": [[77, 84], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Critic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "state2value", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "768", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "args", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.model_OSCAR.Critic.forward": [[86, 88], ["model_OSCAR.Critic.state2value().squeeze", "model_OSCAR.Critic.state2value"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "self", ".", "state2value", "(", "state", ")", ".", "squeeze", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.param.Param.__init__": [[6, 78], ["argparse.ArgumentParser", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.add_argument", "param.Param.parser.parse_args", "print", "print", "print", "print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"\"", ")", "\n", "\n", "# General", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_only'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'fast mode for testing'", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--iters'", ",", "type", "=", "int", ",", "default", "=", "300000", ",", "help", "=", "'training iterations'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'default'", ",", "help", "=", "'experiment id'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--vlnbert'", ",", "type", "=", "str", ",", "default", "=", "'oscar'", ",", "help", "=", "'oscar or prevalent'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--train'", ",", "type", "=", "str", ",", "default", "=", "'listener'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--description'", ",", "type", "=", "str", ",", "default", "=", "'no description\\n'", ")", "\n", "\n", "# Data preparation", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--maxInput'", ",", "type", "=", "int", ",", "default", "=", "80", ",", "help", "=", "\"max input instruction\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--maxAction'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "help", "=", "'Max Action sequence'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--ignoreid'", ",", "type", "=", "int", ",", "default", "=", "-", "100", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--feature_size'", ",", "type", "=", "int", ",", "default", "=", "2048", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--loadOptim\"", ",", "action", "=", "\"store_const\"", ",", "default", "=", "False", ",", "const", "=", "True", ")", "\n", "\n", "# Load the model from", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--load\"", ",", "default", "=", "None", ",", "help", "=", "'path of the trained model'", ")", "\n", "\n", "# Augmented Paths from", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--aug\"", ",", "default", "=", "None", ")", "\n", "\n", "# Listener Model Config", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--zeroInit\"", ",", "dest", "=", "'zero_init'", ",", "action", "=", "'store_const'", ",", "default", "=", "False", ",", "const", "=", "True", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--mlWeight\"", ",", "dest", "=", "'ml_weight'", ",", "type", "=", "float", ",", "default", "=", "0.20", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--teacherWeight\"", ",", "dest", "=", "'teacher_weight'", ",", "type", "=", "float", ",", "default", "=", "1.", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--features\"", ",", "type", "=", "str", ",", "default", "=", "'places365'", ")", "\n", "\n", "# Dropout Param", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--featdropout'", ",", "type", "=", "float", ",", "default", "=", "0.3", ")", "\n", "\n", "# Submision configuration", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--submit\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "\n", "# Training Configurations", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--optim'", ",", "type", "=", "str", ",", "default", "=", "'rms'", ")", "# rms, adam", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.00001", ",", "help", "=", "\"the learning rate\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--decay'", ",", "dest", "=", "'weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--feedback'", ",", "type", "=", "str", ",", "default", "=", "'sample'", ",", "\n", "help", "=", "'How to choose next position, one of ``teacher``, ``sample`` and ``argmax``'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--teacher'", ",", "type", "=", "str", ",", "default", "=", "'final'", ",", "\n", "help", "=", "\"How to get supervision. one of ``next`` and ``final`` \"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--epsilon'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "\n", "# Model hyper params:", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--angleFeatSize\"", ",", "dest", "=", "\"angle_feat_size\"", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "\n", "# A2C", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--gamma\"", ",", "default", "=", "0.9", ",", "type", "=", "float", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--normalize\"", ",", "dest", "=", "\"normalize_loss\"", ",", "default", "=", "\"total\"", ",", "type", "=", "str", ",", "help", "=", "'batch or total'", ")", "\n", "\n", "self", ".", "args", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "optim", "==", "'rms'", ":", "\n", "            ", "print", "(", "\"Optimizer: Using RMSProp\"", ")", "\n", "self", ".", "args", ".", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "\n", "", "elif", "self", ".", "args", ".", "optim", "==", "'adam'", ":", "\n", "            ", "print", "(", "\"Optimizer: Using Adam\"", ")", "\n", "self", ".", "args", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "\n", "", "elif", "self", ".", "args", ".", "optim", "==", "'adamW'", ":", "\n", "            ", "print", "(", "\"Optimizer: Using AdamW\"", ")", "\n", "self", ".", "args", ".", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "\n", "", "elif", "self", ".", "args", ".", "optim", "==", "'sgd'", ":", "\n", "            ", "print", "(", "\"Optimizer: sgd\"", ")", "\n", "self", ".", "args", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.eval.Evaluation.__init__": [[20, 40], ["set", "set", "utils.load_nav_graphs", "eval.Evaluation.graphs.items", "utils.load_datasets", "dict", "eval.Evaluation.scans.append", "networkx.all_pairs_dijkstra_path_length", "str", "range", "len"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.load_nav_graphs", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.load_datasets"], ["def", "__init__", "(", "self", ",", "splits", ",", "scans", ",", "tok", ")", ":", "\n", "        ", "self", ".", "error_margin", "=", "3.0", "\n", "self", ".", "splits", "=", "splits", "\n", "self", ".", "tok", "=", "tok", "\n", "self", ".", "gt", "=", "{", "}", "\n", "self", ".", "instr_ids", "=", "[", "]", "\n", "self", ".", "scans", "=", "[", "]", "\n", "for", "split", "in", "splits", ":", "\n", "            ", "for", "item", "in", "load_datasets", "(", "[", "split", "]", ")", ":", "\n", "                ", "if", "scans", "is", "not", "None", "and", "item", "[", "'scan'", "]", "not", "in", "scans", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "gt", "[", "str", "(", "item", "[", "'path_id'", "]", ")", "]", "=", "item", "\n", "self", ".", "scans", ".", "append", "(", "item", "[", "'scan'", "]", ")", "\n", "self", ".", "instr_ids", "+=", "[", "'%s_%d'", "%", "(", "item", "[", "'path_id'", "]", ",", "i", ")", "for", "i", "in", "range", "(", "len", "(", "item", "[", "'instructions'", "]", ")", ")", "]", "\n", "", "", "self", ".", "scans", "=", "set", "(", "self", ".", "scans", ")", "\n", "self", ".", "instr_ids", "=", "set", "(", "self", ".", "instr_ids", ")", "\n", "self", ".", "graphs", "=", "load_nav_graphs", "(", "self", ".", "scans", ")", "\n", "self", ".", "distances", "=", "{", "}", "\n", "for", "scan", ",", "G", "in", "self", ".", "graphs", ".", "items", "(", ")", ":", "# compute all shortest paths", "\n", "            ", "self", ".", "distances", "[", "scan", "]", "=", "dict", "(", "nx", ".", "all_pairs_dijkstra_path_length", "(", "G", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.eval.Evaluation._get_nearest": [[41, 50], ["None"], "methods", ["None"], ["", "", "def", "_get_nearest", "(", "self", ",", "scan", ",", "goal_id", ",", "path", ")", ":", "\n", "        ", "near_id", "=", "path", "[", "0", "]", "[", "0", "]", "\n", "near_d", "=", "self", ".", "distances", "[", "scan", "]", "[", "near_id", "]", "[", "goal_id", "]", "\n", "for", "item", "in", "path", ":", "\n", "            ", "d", "=", "self", ".", "distances", "[", "scan", "]", "[", "item", "[", "0", "]", "]", "[", "goal_id", "]", "\n", "if", "d", "<", "near_d", ":", "\n", "                ", "near_id", "=", "item", "[", "0", "]", "\n", "near_d", "=", "d", "\n", "", "", "return", "near_id", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.eval.Evaluation._score_item": [[51, 72], ["eval.Evaluation._get_nearest", "eval.Evaluation.scores[].append", "eval.Evaluation.scores[].append", "eval.Evaluation.scores[].append", "eval.Evaluation.scores[].append", "eval.Evaluation.scores[].append", "len", "instr_id.split"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.eval.Evaluation._get_nearest"], ["", "def", "_score_item", "(", "self", ",", "instr_id", ",", "path", ")", ":", "\n", "        ", "''' Calculate error based on the final position in trajectory, and also\n            the closest position (oracle stopping rule).\n            The path contains [view_id, angle, vofv] '''", "\n", "gt", "=", "self", ".", "gt", "[", "instr_id", ".", "split", "(", "'_'", ")", "[", "-", "2", "]", "]", "\n", "start", "=", "gt", "[", "'path'", "]", "[", "0", "]", "\n", "assert", "start", "==", "path", "[", "0", "]", "[", "0", "]", ",", "'Result trajectories should include the start position'", "\n", "goal", "=", "gt", "[", "'path'", "]", "[", "-", "1", "]", "\n", "final_position", "=", "path", "[", "-", "1", "]", "[", "0", "]", "# the first of [view_id, angle, vofv]", "\n", "nearest_position", "=", "self", ".", "_get_nearest", "(", "gt", "[", "'scan'", "]", ",", "goal", ",", "path", ")", "\n", "self", ".", "scores", "[", "'nav_errors'", "]", ".", "append", "(", "self", ".", "distances", "[", "gt", "[", "'scan'", "]", "]", "[", "final_position", "]", "[", "goal", "]", ")", "\n", "self", ".", "scores", "[", "'oracle_errors'", "]", ".", "append", "(", "self", ".", "distances", "[", "gt", "[", "'scan'", "]", "]", "[", "nearest_position", "]", "[", "goal", "]", ")", "\n", "self", ".", "scores", "[", "'trajectory_steps'", "]", ".", "append", "(", "len", "(", "path", ")", "-", "1", ")", "\n", "distance", "=", "0", "# length of the path in meters", "\n", "prev", "=", "path", "[", "0", "]", "\n", "for", "curr", "in", "path", "[", "1", ":", "]", ":", "\n", "            ", "distance", "+=", "self", ".", "distances", "[", "gt", "[", "'scan'", "]", "]", "[", "prev", "[", "0", "]", "]", "[", "curr", "[", "0", "]", "]", "\n", "prev", "=", "curr", "\n", "", "self", ".", "scores", "[", "'trajectory_lengths'", "]", ".", "append", "(", "distance", ")", "\n", "self", ".", "scores", "[", "'shortest_lengths'", "]", ".", "append", "(", "\n", "self", ".", "distances", "[", "gt", "[", "'scan'", "]", "]", "[", "start", "]", "[", "goal", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.eval.Evaluation.score": [[74, 113], ["collections.defaultdict", "set", "print", "len", "len", "numpy.average", "type", "len", "numpy.average", "numpy.average", "numpy.average", "numpy.average", "float", "float", "float", "float", "open", "json.load", "set.remove", "eval.Evaluation._score_item", "len", "len", "len", "len", "len", "max", "zip", "len", "len", "float"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.eval.Evaluation._score_item"], ["", "def", "score", "(", "self", ",", "output_file", ")", ":", "\n", "        ", "''' Evaluate each agent trajectory based on how close it got to the goal location '''", "\n", "self", ".", "scores", "=", "defaultdict", "(", "list", ")", "\n", "instr_ids", "=", "set", "(", "self", ".", "instr_ids", ")", "\n", "if", "type", "(", "output_file", ")", "is", "str", ":", "\n", "            ", "with", "open", "(", "output_file", ")", "as", "f", ":", "\n", "                ", "results", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "            ", "results", "=", "output_file", "\n", "\n", "", "print", "(", "'result length'", ",", "len", "(", "results", ")", ")", "\n", "for", "item", "in", "results", ":", "\n", "# Check against expected ids", "\n", "            ", "if", "item", "[", "'instr_id'", "]", "in", "instr_ids", ":", "\n", "                ", "instr_ids", ".", "remove", "(", "item", "[", "'instr_id'", "]", ")", "\n", "self", ".", "_score_item", "(", "item", "[", "'instr_id'", "]", ",", "item", "[", "'trajectory'", "]", ")", "\n", "\n", "", "", "if", "'train'", "not", "in", "self", ".", "splits", ":", "# Exclude the training from this. (Because training eval may be partial)", "\n", "            ", "assert", "len", "(", "instr_ids", ")", "==", "0", ",", "'Missing %d of %d instruction ids from %s - not in %s'", "%", "(", "len", "(", "instr_ids", ")", ",", "len", "(", "self", ".", "instr_ids", ")", ",", "\",\"", ".", "join", "(", "self", ".", "splits", ")", ",", "output_file", ")", "\n", "assert", "len", "(", "self", ".", "scores", "[", "'nav_errors'", "]", ")", "==", "len", "(", "self", ".", "instr_ids", ")", "\n", "", "score_summary", "=", "{", "\n", "'nav_error'", ":", "np", ".", "average", "(", "self", ".", "scores", "[", "'nav_errors'", "]", ")", ",", "\n", "'oracle_error'", ":", "np", ".", "average", "(", "self", ".", "scores", "[", "'oracle_errors'", "]", ")", ",", "\n", "'steps'", ":", "np", ".", "average", "(", "self", ".", "scores", "[", "'trajectory_steps'", "]", ")", ",", "\n", "'lengths'", ":", "np", ".", "average", "(", "self", ".", "scores", "[", "'trajectory_lengths'", "]", ")", "\n", "}", "\n", "num_successes", "=", "len", "(", "[", "i", "for", "i", "in", "self", ".", "scores", "[", "'nav_errors'", "]", "if", "i", "<", "self", ".", "error_margin", "]", ")", "\n", "score_summary", "[", "'success_rate'", "]", "=", "float", "(", "num_successes", ")", "/", "float", "(", "len", "(", "self", ".", "scores", "[", "'nav_errors'", "]", ")", ")", "\n", "oracle_successes", "=", "len", "(", "[", "i", "for", "i", "in", "self", ".", "scores", "[", "'oracle_errors'", "]", "if", "i", "<", "self", ".", "error_margin", "]", ")", "\n", "score_summary", "[", "'oracle_rate'", "]", "=", "float", "(", "oracle_successes", ")", "/", "float", "(", "len", "(", "self", ".", "scores", "[", "'oracle_errors'", "]", ")", ")", "\n", "\n", "spl", "=", "[", "float", "(", "error", "<", "self", ".", "error_margin", ")", "*", "l", "/", "max", "(", "l", ",", "p", ",", "0.01", ")", "\n", "for", "error", ",", "p", ",", "l", "in", "\n", "zip", "(", "self", ".", "scores", "[", "'nav_errors'", "]", ",", "self", ".", "scores", "[", "'trajectory_lengths'", "]", ",", "self", ".", "scores", "[", "'shortest_lengths'", "]", ")", "\n", "]", "\n", "score_summary", "[", "'spl'", "]", "=", "np", ".", "average", "(", "spl", ")", "\n", "\n", "return", "score_summary", ",", "self", ".", "scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.BaseAgent.__init__": [[30, 36], ["random.seed"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "env", ",", "results_path", ")", ":", "\n", "        ", "self", ".", "env", "=", "env", "\n", "self", ".", "results_path", "=", "results_path", "\n", "random", ".", "seed", "(", "1", ")", "\n", "self", ".", "results", "=", "{", "}", "\n", "self", ".", "losses", "=", "[", "]", "# For learning agents", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.BaseAgent.write_results": [[37, 41], ["open", "json.dump", "agent.BaseAgent.results.items"], "methods", ["None"], ["", "def", "write_results", "(", "self", ")", ":", "\n", "        ", "output", "=", "[", "{", "'instr_id'", ":", "k", ",", "'trajectory'", ":", "v", "}", "for", "k", ",", "v", "in", "self", ".", "results", ".", "items", "(", ")", "]", "\n", "with", "open", "(", "self", ".", "results_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "output", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.BaseAgent.get_results": [[42, 45], ["agent.BaseAgent.results.items"], "methods", ["None"], ["", "", "def", "get_results", "(", "self", ")", ":", "\n", "        ", "output", "=", "[", "{", "'instr_id'", ":", "k", ",", "'trajectory'", ":", "v", "}", "for", "k", ",", "v", "in", "self", ".", "results", ".", "items", "(", ")", "]", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.BaseAgent.rollout": [[46, 49], ["None"], "methods", ["None"], ["", "def", "rollout", "(", "self", ",", "**", "args", ")", ":", "\n", "        ", "''' Return a list of dicts containing instr_id:'xx', path:[(viewpointId, heading_rad, elevation_rad)]  '''", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.BaseAgent.get_agent": [[50, 53], ["globals"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_agent", "(", "name", ")", ":", "\n", "        ", "return", "globals", "(", ")", "[", "name", "+", "\"Agent\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.BaseAgent.test": [[54, 77], ["agent.BaseAgent.env.reset_epoch", "range", "agent.BaseAgent.rollout", "agent.BaseAgent.rollout"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.reset_epoch", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.rollout", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.rollout"], ["", "def", "test", "(", "self", ",", "iters", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset_epoch", "(", "shuffle", "=", "(", "iters", "is", "not", "None", ")", ")", "# If iters is not none, shuffle the env batch", "\n", "self", ".", "losses", "=", "[", "]", "\n", "self", ".", "results", "=", "{", "}", "\n", "# We rely on env showing the entire batch before repeating anything", "\n", "looped", "=", "False", "\n", "self", ".", "loss", "=", "0", "\n", "if", "iters", "is", "not", "None", ":", "\n", "# For each time, it will run the first 'iters' iterations. (It was shuffled before)", "\n", "            ", "for", "i", "in", "range", "(", "iters", ")", ":", "\n", "                ", "for", "traj", "in", "self", ".", "rollout", "(", "**", "kwargs", ")", ":", "\n", "                    ", "self", ".", "loss", "=", "0", "\n", "self", ".", "results", "[", "traj", "[", "'instr_id'", "]", "]", "=", "traj", "[", "'path'", "]", "\n", "", "", "", "else", ":", "# Do a full round", "\n", "            ", "while", "True", ":", "\n", "                ", "for", "traj", "in", "self", ".", "rollout", "(", "**", "kwargs", ")", ":", "\n", "                    ", "if", "traj", "[", "'instr_id'", "]", "in", "self", ".", "results", ":", "\n", "                        ", "looped", "=", "True", "\n", "", "else", ":", "\n", "                        ", "self", ".", "loss", "=", "0", "\n", "self", ".", "results", "[", "traj", "[", "'instr_id'", "]", "]", "=", "traj", "[", "'path'", "]", "\n", "", "", "if", "looped", ":", "\n", "                    ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.__init__": [[94, 122], ["agent.BaseAgent.__init__", "param.args.optimizer", "param.args.optimizer", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "utils.ndtw_initialize", "sys.stdout.flush", "collections.defaultdict", "model_OSCAR.VLNBERT().cuda", "model_OSCAR.Critic().cuda", "agent.Seq2SeqAgent.vln_bert.parameters", "agent.Seq2SeqAgent.critic.parameters", "model_PREVALENT.VLNBERT().cuda", "model_PREVALENT.Critic().cuda", "model_OSCAR.VLNBERT", "model_OSCAR.Critic", "model_PREVALENT.VLNBERT", "model_PREVALENT.Critic"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.ndtw_initialize"], ["def", "__init__", "(", "self", ",", "env", ",", "results_path", ",", "tok", ",", "episode_len", "=", "20", ")", ":", "\n", "        ", "super", "(", "Seq2SeqAgent", ",", "self", ")", ".", "__init__", "(", "env", ",", "results_path", ")", "\n", "self", ".", "tok", "=", "tok", "\n", "self", ".", "episode_len", "=", "episode_len", "\n", "self", ".", "feature_size", "=", "self", ".", "env", ".", "feature_size", "\n", "\n", "# Models", "\n", "if", "args", ".", "vlnbert", "==", "'oscar'", ":", "\n", "            ", "self", ".", "vln_bert", "=", "model_OSCAR", ".", "VLNBERT", "(", "feature_size", "=", "self", ".", "feature_size", "+", "args", ".", "angle_feat_size", ")", ".", "cuda", "(", ")", "\n", "self", ".", "critic", "=", "model_OSCAR", ".", "Critic", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "args", ".", "vlnbert", "==", "'prevalent'", ":", "\n", "            ", "self", ".", "vln_bert", "=", "model_PREVALENT", ".", "VLNBERT", "(", "feature_size", "=", "self", ".", "feature_size", "+", "args", ".", "angle_feat_size", ")", ".", "cuda", "(", ")", "\n", "self", ".", "critic", "=", "model_PREVALENT", ".", "Critic", "(", ")", ".", "cuda", "(", ")", "\n", "", "self", ".", "models", "=", "(", "self", ".", "vln_bert", ",", "self", ".", "critic", ")", "\n", "\n", "# Optimizers", "\n", "self", ".", "vln_bert_optimizer", "=", "args", ".", "optimizer", "(", "self", ".", "vln_bert", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "self", ".", "critic_optimizer", "=", "args", ".", "optimizer", "(", "self", ".", "critic", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "self", ".", "optimizers", "=", "(", "self", ".", "vln_bert_optimizer", ",", "self", ".", "critic_optimizer", ")", "\n", "\n", "# Evaluations", "\n", "self", ".", "losses", "=", "[", "]", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "args", ".", "ignoreid", ",", "size_average", "=", "False", ")", "\n", "self", ".", "ndtw_criterion", "=", "utils", ".", "ndtw_initialize", "(", ")", "\n", "\n", "# Logs", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "self", ".", "logs", "=", "defaultdict", "(", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent._sort_batch": [[123, 141], ["numpy.array", "numpy.argmax", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy.sort", "torch.from_numpy.sort", "torch.from_numpy.sort", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.autograd.Variable().long().cuda", "torch.autograd.Variable().long().cuda", "torch.autograd.Variable().long().cuda", "mask.long().cuda", "torch.zeros_like.long().cuda", "torch.zeros_like.long().cuda", "torch.zeros_like.long().cuda", "list", "list", "torch.autograd.Variable().long", "torch.autograd.Variable().long", "torch.autograd.Variable().long", "mask.long", "torch.zeros_like.long", "torch.zeros_like.long", "torch.zeros_like.long", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["None"], ["", "def", "_sort_batch", "(", "self", ",", "obs", ")", ":", "\n", "        ", "seq_tensor", "=", "np", ".", "array", "(", "[", "ob", "[", "'instr_encoding'", "]", "for", "ob", "in", "obs", "]", ")", "\n", "seq_lengths", "=", "np", ".", "argmax", "(", "seq_tensor", "==", "padding_idx", ",", "axis", "=", "1", ")", "\n", "seq_lengths", "[", "seq_lengths", "==", "0", "]", "=", "seq_tensor", ".", "shape", "[", "1", "]", "\n", "\n", "seq_tensor", "=", "torch", ".", "from_numpy", "(", "seq_tensor", ")", "\n", "seq_lengths", "=", "torch", ".", "from_numpy", "(", "seq_lengths", ")", "\n", "\n", "# Sort sequences by lengths", "\n", "seq_lengths", ",", "perm_idx", "=", "seq_lengths", ".", "sort", "(", "0", ",", "True", ")", "# True -> descending", "\n", "sorted_tensor", "=", "seq_tensor", "[", "perm_idx", "]", "\n", "mask", "=", "(", "sorted_tensor", "!=", "padding_idx", ")", "\n", "\n", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "mask", ")", "\n", "\n", "return", "Variable", "(", "sorted_tensor", ",", "requires_grad", "=", "False", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "mask", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "token_type_ids", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "list", "(", "seq_lengths", ")", ",", "list", "(", "perm_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent._feature_variable": [[142, 148], ["numpy.empty", "enumerate", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "_feature_variable", "(", "self", ",", "obs", ")", ":", "\n", "        ", "''' Extract precomputed features into variable. '''", "\n", "features", "=", "np", ".", "empty", "(", "(", "len", "(", "obs", ")", ",", "args", ".", "views", ",", "self", ".", "feature_size", "+", "args", ".", "angle_feat_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", ",", "ob", "in", "enumerate", "(", "obs", ")", ":", "\n", "            ", "features", "[", "i", ",", ":", ",", ":", "]", "=", "ob", "[", "'feature'", "]", "# Image feat", "\n", "", "return", "Variable", "(", "torch", ".", "from_numpy", "(", "features", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent._candidate_variable": [[149, 159], ["numpy.zeros", "enumerate", "enumerate", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "len", "len", "max", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "_candidate_variable", "(", "self", ",", "obs", ")", ":", "\n", "        ", "candidate_leng", "=", "[", "len", "(", "ob", "[", "'candidate'", "]", ")", "+", "1", "for", "ob", "in", "obs", "]", "# +1 is for the end", "\n", "candidate_feat", "=", "np", ".", "zeros", "(", "(", "len", "(", "obs", ")", ",", "max", "(", "candidate_leng", ")", ",", "self", ".", "feature_size", "+", "args", ".", "angle_feat_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# Note: The candidate_feat at len(ob['candidate']) is the feature for the END", "\n", "# which is zero in my implementation", "\n", "for", "i", ",", "ob", "in", "enumerate", "(", "obs", ")", ":", "\n", "            ", "for", "j", ",", "cc", "in", "enumerate", "(", "ob", "[", "'candidate'", "]", ")", ":", "\n", "                ", "candidate_feat", "[", "i", ",", "j", ",", ":", "]", "=", "cc", "[", "'feature'", "]", "\n", "\n", "", "", "return", "torch", ".", "from_numpy", "(", "candidate_feat", ")", ".", "cuda", "(", ")", ",", "candidate_leng", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.get_input_feat": [[160, 169], ["numpy.zeros", "enumerate", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "agent.Seq2SeqAgent._candidate_variable", "utils.angle_feature", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent._candidate_variable", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.angle_feature"], ["", "def", "get_input_feat", "(", "self", ",", "obs", ")", ":", "\n", "        ", "input_a_t", "=", "np", ".", "zeros", "(", "(", "len", "(", "obs", ")", ",", "args", ".", "angle_feat_size", ")", ",", "np", ".", "float32", ")", "\n", "for", "i", ",", "ob", "in", "enumerate", "(", "obs", ")", ":", "\n", "            ", "input_a_t", "[", "i", "]", "=", "utils", ".", "angle_feature", "(", "ob", "[", "'heading'", "]", ",", "ob", "[", "'elevation'", "]", ")", "\n", "", "input_a_t", "=", "torch", ".", "from_numpy", "(", "input_a_t", ")", ".", "cuda", "(", ")", "\n", "# f_t = self._feature_variable(obs)      # Pano image features from obs", "\n", "candidate_feat", ",", "candidate_leng", "=", "self", ".", "_candidate_variable", "(", "obs", ")", "\n", "\n", "return", "input_a_t", ",", "candidate_feat", ",", "candidate_leng", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent._teacher_action": [[170, 190], ["numpy.zeros", "enumerate", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "len", "enumerate", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len"], "methods", ["None"], ["", "def", "_teacher_action", "(", "self", ",", "obs", ",", "ended", ")", ":", "\n", "        ", "\"\"\"\n        Extract teacher actions into variable.\n        :param obs: The observation.\n        :param ended: Whether the action seq is ended\n        :return:\n        \"\"\"", "\n", "a", "=", "np", ".", "zeros", "(", "len", "(", "obs", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "for", "i", ",", "ob", "in", "enumerate", "(", "obs", ")", ":", "\n", "            ", "if", "ended", "[", "i", "]", ":", "# Just ignore this index", "\n", "                ", "a", "[", "i", "]", "=", "args", ".", "ignoreid", "\n", "", "else", ":", "\n", "                ", "for", "k", ",", "candidate", "in", "enumerate", "(", "ob", "[", "'candidate'", "]", ")", ":", "\n", "                    ", "if", "candidate", "[", "'viewpointId'", "]", "==", "ob", "[", "'teacher'", "]", ":", "# Next view point", "\n", "                        ", "a", "[", "i", "]", "=", "k", "\n", "break", "\n", "", "", "else", ":", "# Stop here", "\n", "                    ", "assert", "ob", "[", "'teacher'", "]", "==", "ob", "[", "'viewpoint'", "]", "# The teacher action should be \"STAY HERE\"", "\n", "a", "[", "i", "]", "=", "len", "(", "ob", "[", "'candidate'", "]", ")", "\n", "", "", "", "return", "torch", ".", "from_numpy", "(", "a", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.make_equiv_action": [[191, 228], ["enumerate", "range", "type", "agent.Seq2SeqAgent.env.env.sims[].makeAction", "agent.Seq2SeqAgent.env.env.sims[].makeAction", "len", "agent.Seq2SeqAgent.make_equiv_action.take_action"], "methods", ["None"], ["", "def", "make_equiv_action", "(", "self", ",", "a_t", ",", "perm_obs", ",", "perm_idx", "=", "None", ",", "traj", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Interface between Panoramic view and Egocentric view\n        It will convert the action panoramic view action a_t to equivalent egocentric view actions for the simulator\n        \"\"\"", "\n", "def", "take_action", "(", "i", ",", "idx", ",", "name", ")", ":", "\n", "            ", "if", "type", "(", "name", ")", "is", "int", ":", "# Go to the next view", "\n", "                ", "self", ".", "env", ".", "env", ".", "sims", "[", "idx", "]", ".", "makeAction", "(", "name", ",", "0", ",", "0", ")", "\n", "", "else", ":", "# Adjust", "\n", "                ", "self", ".", "env", ".", "env", ".", "sims", "[", "idx", "]", ".", "makeAction", "(", "*", "self", ".", "env_actions", "[", "name", "]", ")", "\n", "\n", "", "", "if", "perm_idx", "is", "None", ":", "\n", "            ", "perm_idx", "=", "range", "(", "len", "(", "perm_obs", ")", ")", "\n", "\n", "", "for", "i", ",", "idx", "in", "enumerate", "(", "perm_idx", ")", ":", "\n", "            ", "action", "=", "a_t", "[", "i", "]", "\n", "if", "action", "!=", "-", "1", ":", "# -1 is the <stop> action", "\n", "                ", "select_candidate", "=", "perm_obs", "[", "i", "]", "[", "'candidate'", "]", "[", "action", "]", "\n", "src_point", "=", "perm_obs", "[", "i", "]", "[", "'viewIndex'", "]", "\n", "trg_point", "=", "select_candidate", "[", "'pointId'", "]", "\n", "src_level", "=", "(", "src_point", ")", "//", "12", "# The point idx started from 0", "\n", "trg_level", "=", "(", "trg_point", ")", "//", "12", "\n", "while", "src_level", "<", "trg_level", ":", "# Tune up", "\n", "                    ", "take_action", "(", "i", ",", "idx", ",", "'up'", ")", "\n", "src_level", "+=", "1", "\n", "", "while", "src_level", ">", "trg_level", ":", "# Tune down", "\n", "                    ", "take_action", "(", "i", ",", "idx", ",", "'down'", ")", "\n", "src_level", "-=", "1", "\n", "", "while", "self", ".", "env", ".", "env", ".", "sims", "[", "idx", "]", ".", "getState", "(", ")", ".", "viewIndex", "!=", "trg_point", ":", "# Turn right until the target", "\n", "                    ", "take_action", "(", "i", ",", "idx", ",", "'right'", ")", "\n", "", "assert", "select_candidate", "[", "'viewpointId'", "]", "==", "self", ".", "env", ".", "env", ".", "sims", "[", "idx", "]", ".", "getState", "(", ")", ".", "navigableLocations", "[", "select_candidate", "[", "'idx'", "]", "]", ".", "viewpointId", "\n", "take_action", "(", "i", ",", "idx", ",", "select_candidate", "[", "'idx'", "]", ")", "\n", "\n", "state", "=", "self", ".", "env", ".", "env", ".", "sims", "[", "idx", "]", ".", "getState", "(", ")", "\n", "if", "traj", "is", "not", "None", ":", "\n", "                    ", "traj", "[", "i", "]", "[", "'path'", "]", ".", "append", "(", "(", "state", ".", "location", ".", "viewpointId", ",", "state", ".", "heading", ",", "state", ".", "elevation", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.rollout": [[229, 473], ["len", "agent.Seq2SeqAgent._sort_batch", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.array", "range", "numpy.array", "numpy.array", "agent.Seq2SeqAgent.vln_bert", "agent.Seq2SeqAgent.get_input_feat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "max", "agent.Seq2SeqAgent.vln_bert", "hidden_states.append", "utils.length2mask", "logit.masked_fill_", "agent.Seq2SeqAgent._teacher_action", "agent.Seq2SeqAgent.criterion", "torch.distributions.Categorical.sample().detach.cpu().numpy", "enumerate", "agent.Seq2SeqAgent.make_equiv_action", "numpy.array", "numpy.logical_or", "numpy.array.all", "agent.Seq2SeqAgent.get_input_feat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "max", "agent.Seq2SeqAgent.vln_bert", "agent.Seq2SeqAgent.critic().detach", "numpy.zeros", "range", "len", "range", "agent.Seq2SeqAgent.logs[].append", "agent.Seq2SeqAgent.logs[].append", "agent.Seq2SeqAgent.logs[].append", "type", "agent.Seq2SeqAgent.losses.append", "agent.Seq2SeqAgent.losses.append", "agent.Seq2SeqAgent.env.reset", "agent.Seq2SeqAgent.env._get_obs", "agent.Seq2SeqAgent.vln_bert", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "agent.Seq2SeqAgent.env._get_obs", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.ones", "enumerate", "rewards.append", "masks.append", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "numpy.zeros.copy", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "agent.Seq2SeqAgent.critic", "agent.Seq2SeqAgent.logs[].append", "rl_loss.item", "float", "logit.max", "torch.distributions.Categorical.sample().detach.detach", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "policy_log_probs.append", "torch.distributions.Categorical.sample().detach.cpu", "h_t.unsqueeze", "agent.Seq2SeqAgent.critic", "numpy.sum", "agent.Seq2SeqAgent.loss.item", "h_t.unsqueeze", "utils.length2mask", "torch.log_softmax.gather", "torch.softmax", "torch.softmax", "torch.softmax", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "agent.Seq2SeqAgent.logs[].append", "entropys.append", "torch.distributions.Categorical.sample().detach", "torch.distributions.Categorical.sample().detach", "torch.distributions.Categorical.sample().detach", "policy_log_probs.append", "print", "sys.exit", "utils.length2mask", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.distributions.Categorical.sample().detach.unsqueeze", "torch.distributions.Categorical.entropy().sum().item", "torch.distributions.Categorical.entropy().sum().item", "torch.distributions.Categorical.entropy().sum().item", "torch.distributions.Categorical.entropy", "torch.distributions.Categorical.entropy", "torch.distributions.Categorical.entropy", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.log_prob", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.entropy().sum", "torch.distributions.Categorical.entropy().sum", "torch.distributions.Categorical.entropy().sum", "NameError", "torch.distributions.Categorical.entropy", "torch.distributions.Categorical.entropy", "torch.distributions.Categorical.entropy"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent._sort_batch", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.get_input_feat", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.length2mask", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent._teacher_action", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.make_equiv_action", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.get_input_feat", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.reset", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch._get_obs", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch._get_obs", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.length2mask", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.length2mask"], ["", "", "", "", "def", "rollout", "(", "self", ",", "train_ml", "=", "None", ",", "train_rl", "=", "True", ",", "reset", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param train_ml:    The weight to train with maximum likelihood\n        :param train_rl:    whether use RL in training\n        :param reset:       Reset the environment\n\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "feedback", "==", "'teacher'", "or", "self", ".", "feedback", "==", "'argmax'", ":", "\n", "            ", "train_rl", "=", "False", "\n", "\n", "", "if", "reset", ":", "# Reset env", "\n", "            ", "obs", "=", "np", ".", "array", "(", "self", ".", "env", ".", "reset", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "obs", "=", "np", ".", "array", "(", "self", ".", "env", ".", "_get_obs", "(", ")", ")", "\n", "\n", "", "batch_size", "=", "len", "(", "obs", ")", "\n", "\n", "# Language input", "\n", "sentence", ",", "language_attention_mask", ",", "token_type_ids", ",", "seq_lengths", ",", "perm_idx", "=", "self", ".", "_sort_batch", "(", "obs", ")", "\n", "perm_obs", "=", "obs", "[", "perm_idx", "]", "\n", "\n", "''' Language BERT '''", "\n", "language_inputs", "=", "{", "'mode'", ":", "'language'", ",", "\n", "'sentence'", ":", "sentence", ",", "\n", "'attention_mask'", ":", "language_attention_mask", ",", "\n", "'lang_mask'", ":", "language_attention_mask", ",", "\n", "'token_type_ids'", ":", "token_type_ids", "}", "\n", "if", "args", ".", "vlnbert", "==", "'oscar'", ":", "\n", "            ", "language_features", "=", "self", ".", "vln_bert", "(", "**", "language_inputs", ")", "\n", "", "elif", "args", ".", "vlnbert", "==", "'prevalent'", ":", "\n", "            ", "h_t", ",", "language_features", "=", "self", ".", "vln_bert", "(", "**", "language_inputs", ")", "\n", "\n", "# Record starting point", "\n", "", "traj", "=", "[", "{", "\n", "'instr_id'", ":", "ob", "[", "'instr_id'", "]", ",", "\n", "'path'", ":", "[", "(", "ob", "[", "'viewpoint'", "]", ",", "ob", "[", "'heading'", "]", ",", "ob", "[", "'elevation'", "]", ")", "]", ",", "\n", "}", "for", "ob", "in", "perm_obs", "]", "\n", "\n", "# Init the reward shaping", "\n", "last_dist", "=", "np", ".", "zeros", "(", "batch_size", ",", "np", ".", "float32", ")", "\n", "last_ndtw", "=", "np", ".", "zeros", "(", "batch_size", ",", "np", ".", "float32", ")", "\n", "for", "i", ",", "ob", "in", "enumerate", "(", "perm_obs", ")", ":", "# The init distance from the view point to the target", "\n", "            ", "last_dist", "[", "i", "]", "=", "ob", "[", "'distance'", "]", "\n", "path_act", "=", "[", "vp", "[", "0", "]", "for", "vp", "in", "traj", "[", "i", "]", "[", "'path'", "]", "]", "\n", "last_ndtw", "[", "i", "]", "=", "self", ".", "ndtw_criterion", "[", "ob", "[", "'scan'", "]", "]", "(", "path_act", ",", "ob", "[", "'gt_path'", "]", ",", "metric", "=", "'ndtw'", ")", "\n", "\n", "# Initialization the tracking state", "\n", "", "ended", "=", "np", ".", "array", "(", "[", "False", "]", "*", "batch_size", ")", "# Indices match permuation of the model, not env", "\n", "\n", "# Init the logs", "\n", "rewards", "=", "[", "]", "\n", "hidden_states", "=", "[", "]", "\n", "policy_log_probs", "=", "[", "]", "\n", "masks", "=", "[", "]", "\n", "entropys", "=", "[", "]", "\n", "ml_loss", "=", "0.", "\n", "\n", "for", "t", "in", "range", "(", "self", ".", "episode_len", ")", ":", "\n", "\n", "            ", "input_a_t", ",", "candidate_feat", ",", "candidate_leng", "=", "self", ".", "get_input_feat", "(", "perm_obs", ")", "\n", "\n", "# the first [CLS] token, initialized by the language BERT, serves", "\n", "# as the agent's state passing through time steps", "\n", "if", "(", "t", ">=", "1", ")", "or", "(", "args", ".", "vlnbert", "==", "'prevalent'", ")", ":", "\n", "                ", "language_features", "=", "torch", ".", "cat", "(", "(", "h_t", ".", "unsqueeze", "(", "1", ")", ",", "language_features", "[", ":", ",", "1", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "visual_temp_mask", "=", "(", "utils", ".", "length2mask", "(", "candidate_leng", ")", "==", "0", ")", ".", "long", "(", ")", "\n", "visual_attention_mask", "=", "torch", ".", "cat", "(", "(", "language_attention_mask", ",", "visual_temp_mask", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "self", ".", "vln_bert", ".", "vln_bert", ".", "config", ".", "directions", "=", "max", "(", "candidate_leng", ")", "\n", "''' Visual BERT '''", "\n", "visual_inputs", "=", "{", "'mode'", ":", "'visual'", ",", "\n", "'sentence'", ":", "language_features", ",", "\n", "'attention_mask'", ":", "visual_attention_mask", ",", "\n", "'lang_mask'", ":", "language_attention_mask", ",", "\n", "'vis_mask'", ":", "visual_temp_mask", ",", "\n", "'token_type_ids'", ":", "token_type_ids", ",", "\n", "'action_feats'", ":", "input_a_t", ",", "\n", "# 'pano_feats':         f_t,", "\n", "'cand_feats'", ":", "candidate_feat", "}", "\n", "h_t", ",", "logit", "=", "self", ".", "vln_bert", "(", "**", "visual_inputs", ")", "\n", "hidden_states", ".", "append", "(", "h_t", ")", "\n", "\n", "# Mask outputs where agent can't move forward", "\n", "# Here the logit is [b, max_candidate]", "\n", "candidate_mask", "=", "utils", ".", "length2mask", "(", "candidate_leng", ")", "\n", "logit", ".", "masked_fill_", "(", "candidate_mask", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "# Supervised training", "\n", "target", "=", "self", ".", "_teacher_action", "(", "perm_obs", ",", "ended", ")", "\n", "ml_loss", "+=", "self", ".", "criterion", "(", "logit", ",", "target", ")", "\n", "\n", "# Determine next model inputs", "\n", "if", "self", ".", "feedback", "==", "'teacher'", ":", "\n", "                ", "a_t", "=", "target", "# teacher forcing", "\n", "", "elif", "self", ".", "feedback", "==", "'argmax'", ":", "\n", "                ", "_", ",", "a_t", "=", "logit", ".", "max", "(", "1", ")", "# student forcing - argmax", "\n", "a_t", "=", "a_t", ".", "detach", "(", ")", "\n", "log_probs", "=", "F", ".", "log_softmax", "(", "logit", ",", "1", ")", "# Calculate the log_prob here", "\n", "policy_log_probs", ".", "append", "(", "log_probs", ".", "gather", "(", "1", ",", "a_t", ".", "unsqueeze", "(", "1", ")", ")", ")", "# Gather the log_prob for each batch", "\n", "", "elif", "self", ".", "feedback", "==", "'sample'", ":", "\n", "                ", "probs", "=", "F", ".", "softmax", "(", "logit", ",", "1", ")", "# sampling an action from model", "\n", "c", "=", "torch", ".", "distributions", ".", "Categorical", "(", "probs", ")", "\n", "self", ".", "logs", "[", "'entropy'", "]", ".", "append", "(", "c", ".", "entropy", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "# For log", "\n", "entropys", ".", "append", "(", "c", ".", "entropy", "(", ")", ")", "# For optimization", "\n", "a_t", "=", "c", ".", "sample", "(", ")", ".", "detach", "(", ")", "\n", "policy_log_probs", ".", "append", "(", "c", ".", "log_prob", "(", "a_t", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "self", ".", "feedback", ")", "\n", "sys", ".", "exit", "(", "'Invalid feedback option'", ")", "\n", "# Prepare environment action", "\n", "# NOTE: Env action is in the perm_obs space", "\n", "", "cpu_a_t", "=", "a_t", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", ",", "next_id", "in", "enumerate", "(", "cpu_a_t", ")", ":", "\n", "                ", "if", "next_id", "==", "(", "candidate_leng", "[", "i", "]", "-", "1", ")", "or", "next_id", "==", "args", ".", "ignoreid", "or", "ended", "[", "i", "]", ":", "# The last action is <end>", "\n", "                    ", "cpu_a_t", "[", "i", "]", "=", "-", "1", "# Change the <end> and ignore action to -1", "\n", "\n", "# Make action and get the new state", "\n", "", "", "self", ".", "make_equiv_action", "(", "cpu_a_t", ",", "perm_obs", ",", "perm_idx", ",", "traj", ")", "\n", "obs", "=", "np", ".", "array", "(", "self", ".", "env", ".", "_get_obs", "(", ")", ")", "\n", "perm_obs", "=", "obs", "[", "perm_idx", "]", "# Perm the obs for the resu", "\n", "\n", "if", "train_rl", ":", "\n", "# Calculate the mask and reward", "\n", "                ", "dist", "=", "np", ".", "zeros", "(", "batch_size", ",", "np", ".", "float32", ")", "\n", "ndtw_score", "=", "np", ".", "zeros", "(", "batch_size", ",", "np", ".", "float32", ")", "\n", "reward", "=", "np", ".", "zeros", "(", "batch_size", ",", "np", ".", "float32", ")", "\n", "mask", "=", "np", ".", "ones", "(", "batch_size", ",", "np", ".", "float32", ")", "\n", "for", "i", ",", "ob", "in", "enumerate", "(", "perm_obs", ")", ":", "\n", "                    ", "dist", "[", "i", "]", "=", "ob", "[", "'distance'", "]", "\n", "path_act", "=", "[", "vp", "[", "0", "]", "for", "vp", "in", "traj", "[", "i", "]", "[", "'path'", "]", "]", "\n", "ndtw_score", "[", "i", "]", "=", "self", ".", "ndtw_criterion", "[", "ob", "[", "'scan'", "]", "]", "(", "path_act", ",", "ob", "[", "'gt_path'", "]", ",", "metric", "=", "'ndtw'", ")", "\n", "\n", "if", "ended", "[", "i", "]", ":", "\n", "                        ", "reward", "[", "i", "]", "=", "0.0", "\n", "mask", "[", "i", "]", "=", "0.0", "\n", "", "else", ":", "\n", "                        ", "action_idx", "=", "cpu_a_t", "[", "i", "]", "\n", "# Target reward", "\n", "if", "action_idx", "==", "-", "1", ":", "# If the action now is end", "\n", "                            ", "if", "dist", "[", "i", "]", "<", "3.0", ":", "# Correct", "\n", "                                ", "reward", "[", "i", "]", "=", "2.0", "+", "ndtw_score", "[", "i", "]", "*", "2.0", "\n", "", "else", ":", "# Incorrect", "\n", "                                ", "reward", "[", "i", "]", "=", "-", "2.0", "\n", "", "", "else", ":", "# The action is not end", "\n", "# Path fidelity rewards (distance & nDTW)", "\n", "                            ", "reward", "[", "i", "]", "=", "-", "(", "dist", "[", "i", "]", "-", "last_dist", "[", "i", "]", ")", "\n", "ndtw_reward", "=", "ndtw_score", "[", "i", "]", "-", "last_ndtw", "[", "i", "]", "\n", "if", "reward", "[", "i", "]", ">", "0.0", ":", "# Quantification", "\n", "                                ", "reward", "[", "i", "]", "=", "1.0", "+", "ndtw_reward", "\n", "", "elif", "reward", "[", "i", "]", "<", "0.0", ":", "\n", "                                ", "reward", "[", "i", "]", "=", "-", "1.0", "+", "ndtw_reward", "\n", "", "else", ":", "\n", "                                ", "raise", "NameError", "(", "\"The action doesn't change the move\"", ")", "\n", "# Miss the target penalty", "\n", "", "if", "(", "last_dist", "[", "i", "]", "<=", "1.0", ")", "and", "(", "dist", "[", "i", "]", "-", "last_dist", "[", "i", "]", ">", "0.0", ")", ":", "\n", "                                ", "reward", "[", "i", "]", "-=", "(", "1.0", "-", "last_dist", "[", "i", "]", ")", "*", "2.0", "\n", "", "", "", "", "rewards", ".", "append", "(", "reward", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "last_dist", "[", ":", "]", "=", "dist", "\n", "last_ndtw", "[", ":", "]", "=", "ndtw_score", "\n", "\n", "# Update the finished actions", "\n", "# -1 means ended or ignored (already ended)", "\n", "", "ended", "[", ":", "]", "=", "np", ".", "logical_or", "(", "ended", ",", "(", "cpu_a_t", "==", "-", "1", ")", ")", "\n", "\n", "# Early exit if all ended", "\n", "if", "ended", ".", "all", "(", ")", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "train_rl", ":", "\n", "# Last action in A2C", "\n", "            ", "input_a_t", ",", "candidate_feat", ",", "candidate_leng", "=", "self", ".", "get_input_feat", "(", "perm_obs", ")", "\n", "\n", "language_features", "=", "torch", ".", "cat", "(", "(", "h_t", ".", "unsqueeze", "(", "1", ")", ",", "language_features", "[", ":", ",", "1", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "visual_temp_mask", "=", "(", "utils", ".", "length2mask", "(", "candidate_leng", ")", "==", "0", ")", ".", "long", "(", ")", "\n", "visual_attention_mask", "=", "torch", ".", "cat", "(", "(", "language_attention_mask", ",", "visual_temp_mask", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "self", ".", "vln_bert", ".", "vln_bert", ".", "config", ".", "directions", "=", "max", "(", "candidate_leng", ")", "\n", "''' Visual BERT '''", "\n", "visual_inputs", "=", "{", "'mode'", ":", "'visual'", ",", "\n", "'sentence'", ":", "language_features", ",", "\n", "'attention_mask'", ":", "visual_attention_mask", ",", "\n", "'lang_mask'", ":", "language_attention_mask", ",", "\n", "'vis_mask'", ":", "visual_temp_mask", ",", "\n", "'token_type_ids'", ":", "token_type_ids", ",", "\n", "'action_feats'", ":", "input_a_t", ",", "\n", "# 'pano_feats':         f_t,", "\n", "'cand_feats'", ":", "candidate_feat", "}", "\n", "last_h_", ",", "_", "=", "self", ".", "vln_bert", "(", "**", "visual_inputs", ")", "\n", "\n", "rl_loss", "=", "0.", "\n", "\n", "# NOW, A2C!!!", "\n", "# Calculate the final discounted reward", "\n", "last_value__", "=", "self", ".", "critic", "(", "last_h_", ")", ".", "detach", "(", ")", "# The value esti of the last state, remove the grad for safety", "\n", "discount_reward", "=", "np", ".", "zeros", "(", "batch_size", ",", "np", ".", "float32", ")", "# The inital reward is zero", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "if", "not", "ended", "[", "i", "]", ":", "# If the action is not ended, use the value function as the last reward", "\n", "                    ", "discount_reward", "[", "i", "]", "=", "last_value__", "[", "i", "]", "\n", "\n", "", "", "length", "=", "len", "(", "rewards", ")", "\n", "total", "=", "0", "\n", "for", "t", "in", "range", "(", "length", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "discount_reward", "=", "discount_reward", "*", "args", ".", "gamma", "+", "rewards", "[", "t", "]", "# If it ended, the reward will be 0", "\n", "mask_", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "masks", "[", "t", "]", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "clip_reward", "=", "discount_reward", ".", "copy", "(", ")", "\n", "r_", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "clip_reward", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "v_", "=", "self", ".", "critic", "(", "hidden_states", "[", "t", "]", ")", "\n", "a_", "=", "(", "r_", "-", "v_", ")", ".", "detach", "(", ")", "\n", "\n", "rl_loss", "+=", "(", "-", "policy_log_probs", "[", "t", "]", "*", "a_", "*", "mask_", ")", ".", "sum", "(", ")", "\n", "rl_loss", "+=", "(", "(", "(", "r_", "-", "v_", ")", "**", "2", ")", "*", "mask_", ")", ".", "sum", "(", ")", "*", "0.5", "# 1/2 L2 loss", "\n", "if", "self", ".", "feedback", "==", "'sample'", ":", "\n", "                    ", "rl_loss", "+=", "(", "-", "0.01", "*", "entropys", "[", "t", "]", "*", "mask_", ")", ".", "sum", "(", ")", "\n", "", "self", ".", "logs", "[", "'critic_loss'", "]", ".", "append", "(", "(", "(", "(", "r_", "-", "v_", ")", "**", "2", ")", "*", "mask_", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "total", "=", "total", "+", "np", ".", "sum", "(", "masks", "[", "t", "]", ")", "\n", "", "self", ".", "logs", "[", "'total'", "]", ".", "append", "(", "total", ")", "\n", "\n", "# Normalize the loss function", "\n", "if", "args", ".", "normalize_loss", "==", "'total'", ":", "\n", "                ", "rl_loss", "/=", "total", "\n", "", "elif", "args", ".", "normalize_loss", "==", "'batch'", ":", "\n", "                ", "rl_loss", "/=", "batch_size", "\n", "", "else", ":", "\n", "                ", "assert", "args", ".", "normalize_loss", "==", "'none'", "\n", "\n", "", "self", ".", "loss", "+=", "rl_loss", "\n", "self", ".", "logs", "[", "'RL_loss'", "]", ".", "append", "(", "rl_loss", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "train_ml", "is", "not", "None", ":", "\n", "            ", "self", ".", "loss", "+=", "ml_loss", "*", "train_ml", "/", "batch_size", "\n", "self", ".", "logs", "[", "'IL_loss'", "]", ".", "append", "(", "(", "ml_loss", "*", "train_ml", "/", "batch_size", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "type", "(", "self", ".", "loss", ")", "is", "int", ":", "# For safety, it will be activated if no losses are added", "\n", "            ", "self", ".", "losses", ".", "append", "(", "0.", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "losses", ".", "append", "(", "self", ".", "loss", ".", "item", "(", ")", "/", "self", ".", "episode_len", ")", "# This argument is useless.", "\n", "\n", "", "return", "traj", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.test": [[474, 484], ["agent.BaseAgent.test", "agent.Seq2SeqAgent.vln_bert.train", "agent.Seq2SeqAgent.critic.train", "agent.Seq2SeqAgent.vln_bert.eval", "agent.Seq2SeqAgent.critic.eval"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.test", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.train.train", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.train.train"], ["", "def", "test", "(", "self", ",", "use_dropout", "=", "False", ",", "feedback", "=", "'argmax'", ",", "allow_cheat", "=", "False", ",", "iters", "=", "None", ")", ":", "\n", "        ", "''' Evaluate once on each instruction in the current environment '''", "\n", "self", ".", "feedback", "=", "feedback", "\n", "if", "use_dropout", ":", "\n", "            ", "self", ".", "vln_bert", ".", "train", "(", ")", "\n", "self", ".", "critic", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "vln_bert", ".", "eval", "(", ")", "\n", "self", ".", "critic", ".", "eval", "(", ")", "\n", "", "super", "(", "Seq2SeqAgent", ",", "self", ")", ".", "test", "(", "iters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.zero_grad": [[485, 491], ["zip", "model.train", "optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.train.train", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss", "=", "0.", "\n", "self", ".", "losses", "=", "[", "]", "\n", "for", "model", ",", "optimizer", "in", "zip", "(", "self", ".", "models", ",", "self", ".", "optimizers", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.accumulate_gradient": [[492, 503], ["agent.Seq2SeqAgent.rollout", "agent.Seq2SeqAgent.rollout", "agent.Seq2SeqAgent.rollout"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.rollout", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.rollout", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.rollout"], ["", "", "def", "accumulate_gradient", "(", "self", ",", "feedback", "=", "'teacher'", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "feedback", "==", "'teacher'", ":", "\n", "            ", "self", ".", "feedback", "=", "'teacher'", "\n", "self", ".", "rollout", "(", "train_ml", "=", "args", ".", "teacher_weight", ",", "train_rl", "=", "False", ",", "**", "kwargs", ")", "\n", "", "elif", "feedback", "==", "'sample'", ":", "\n", "            ", "self", ".", "feedback", "=", "'teacher'", "\n", "self", ".", "rollout", "(", "train_ml", "=", "args", ".", "ml_weight", ",", "train_rl", "=", "False", ",", "**", "kwargs", ")", "\n", "self", ".", "feedback", "=", "'sample'", "\n", "self", ".", "rollout", "(", "train_ml", "=", "None", ",", "train_rl", "=", "True", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.optim_step": [[504, 511], ["agent.Seq2SeqAgent.loss.backward", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "agent.Seq2SeqAgent.vln_bert_optimizer.step", "agent.Seq2SeqAgent.critic_optimizer.step", "agent.Seq2SeqAgent.vln_bert.parameters"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.step", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.step"], ["", "", "def", "optim_step", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss", ".", "backward", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm", "(", "self", ".", "vln_bert", ".", "parameters", "(", ")", ",", "40.", ")", "\n", "\n", "self", ".", "vln_bert_optimizer", ".", "step", "(", ")", "\n", "self", ".", "critic_optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.train": [[512, 548], ["agent.Seq2SeqAgent.vln_bert.train", "agent.Seq2SeqAgent.critic.train", "range", "agent.Seq2SeqAgent.vln_bert_optimizer.zero_grad", "agent.Seq2SeqAgent.critic_optimizer.zero_grad", "agent.Seq2SeqAgent.loss.backward", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "agent.Seq2SeqAgent.vln_bert_optimizer.step", "agent.Seq2SeqAgent.critic_optimizer.step", "agent.Seq2SeqAgent.rollout", "agent.Seq2SeqAgent.vln_bert.parameters", "utils.print_progress", "agent.Seq2SeqAgent.rollout", "agent.Seq2SeqAgent.rollout"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.train.train", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.train.train", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.zero_grad", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.zero_grad", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.step", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.step", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.rollout", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.print_progress", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.rollout", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.rollout"], ["", "def", "train", "(", "self", ",", "n_iters", ",", "feedback", "=", "'teacher'", ",", "**", "kwargs", ")", ":", "\n", "        ", "''' Train for a given number of iterations '''", "\n", "self", ".", "feedback", "=", "feedback", "\n", "\n", "self", ".", "vln_bert", ".", "train", "(", ")", "\n", "self", ".", "critic", ".", "train", "(", ")", "\n", "\n", "self", ".", "losses", "=", "[", "]", "\n", "for", "iter", "in", "range", "(", "1", ",", "n_iters", "+", "1", ")", ":", "\n", "\n", "            ", "self", ".", "vln_bert_optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "critic_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "self", ".", "loss", "=", "0", "\n", "\n", "if", "feedback", "==", "'teacher'", ":", "\n", "                ", "self", ".", "feedback", "=", "'teacher'", "\n", "self", ".", "rollout", "(", "train_ml", "=", "args", ".", "teacher_weight", ",", "train_rl", "=", "False", ",", "**", "kwargs", ")", "\n", "", "elif", "feedback", "==", "'sample'", ":", "# agents in IL and RL separately", "\n", "                ", "if", "args", ".", "ml_weight", "!=", "0", ":", "\n", "                    ", "self", ".", "feedback", "=", "'teacher'", "\n", "self", ".", "rollout", "(", "train_ml", "=", "args", ".", "ml_weight", ",", "train_rl", "=", "False", ",", "**", "kwargs", ")", "\n", "", "self", ".", "feedback", "=", "'sample'", "\n", "self", ".", "rollout", "(", "train_ml", "=", "None", ",", "train_rl", "=", "True", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "                ", "assert", "False", "\n", "\n", "", "self", ".", "loss", ".", "backward", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm", "(", "self", ".", "vln_bert", ".", "parameters", "(", ")", ",", "40.", ")", "\n", "\n", "self", ".", "vln_bert_optimizer", ".", "step", "(", ")", "\n", "self", ".", "critic_optimizer", ".", "step", "(", ")", "\n", "\n", "if", "args", ".", "aug", "is", "None", ":", "\n", "                ", "print_progress", "(", "iter", ",", "n_iters", "+", "1", ",", "prefix", "=", "'Progress:'", ",", "suffix", "=", "'Complete'", ",", "bar_length", "=", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.save": [[549, 565], ["os.path.split", "os.makedirs", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "agent.Seq2SeqAgent.save.create_state"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.save", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.save", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.save", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.save", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.save", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.save", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.save", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.save", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.save"], ["", "", "", "def", "save", "(", "self", ",", "epoch", ",", "path", ")", ":", "\n", "        ", "''' Snapshot models '''", "\n", "the_dir", ",", "_", "=", "os", ".", "path", ".", "split", "(", "path", ")", "\n", "os", ".", "makedirs", "(", "the_dir", ",", "exist_ok", "=", "True", ")", "\n", "states", "=", "{", "}", "\n", "def", "create_state", "(", "name", ",", "model", ",", "optimizer", ")", ":", "\n", "            ", "states", "[", "name", "]", "=", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "", "all_tuple", "=", "[", "(", "\"vln_bert\"", ",", "self", ".", "vln_bert", ",", "self", ".", "vln_bert_optimizer", ")", ",", "\n", "(", "\"critic\"", ",", "self", ".", "critic", ",", "self", ".", "critic_optimizer", ")", "]", "\n", "for", "param", "in", "all_tuple", ":", "\n", "            ", "create_state", "(", "*", "param", ")", "\n", "", "torch", ".", "save", "(", "states", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load": [[566, 585], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.state_dict", "set", "set", "model.state_dict.update", "model.load_state_dict", "agent.Seq2SeqAgent.load.recover_state"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.FloydGraph.update"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "''' Loads parameters (but not training state) '''", "\n", "states", "=", "torch", ".", "load", "(", "path", ")", "\n", "\n", "def", "recover_state", "(", "name", ",", "model", ",", "optimizer", ")", ":", "\n", "            ", "state", "=", "model", ".", "state_dict", "(", ")", "\n", "model_keys", "=", "set", "(", "state", ".", "keys", "(", ")", ")", "\n", "load_keys", "=", "set", "(", "states", "[", "name", "]", "[", "'state_dict'", "]", ".", "keys", "(", ")", ")", "\n", "if", "model_keys", "!=", "load_keys", ":", "\n", "                ", "print", "(", "\"NOTICE: DIFFERENT KEYS IN THE LISTEREN\"", ")", "\n", "", "state", ".", "update", "(", "states", "[", "name", "]", "[", "'state_dict'", "]", ")", "\n", "model", ".", "load_state_dict", "(", "state", ")", "\n", "if", "args", ".", "loadOptim", ":", "\n", "                ", "optimizer", ".", "load_state_dict", "(", "states", "[", "name", "]", "[", "'optimizer'", "]", ")", "\n", "", "", "all_tuple", "=", "[", "(", "\"vln_bert\"", ",", "self", ".", "vln_bert", ",", "self", ".", "vln_bert_optimizer", ")", ",", "\n", "(", "\"critic\"", ",", "self", ".", "critic", ",", "self", ".", "critic_optimizer", ")", "]", "\n", "for", "param", "in", "all_tuple", ":", "\n", "            ", "recover_state", "(", "*", "param", ")", "\n", "", "return", "states", "[", "'vln_bert'", "]", "[", "'epoch'", "]", "-", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.train.train": [[41, 149], ["tensorboardX.SummaryWriter", "agent.Seq2SeqAgent", "open", "open.write", "open.close", "time.time", "print", "range", "agent.Seq2SeqAgent.save", "collections.defaultdict", "min", "max", "max", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "val_envs.items", "open", "open.write", "open.close", "print", "os.path.join", "str", "agent.Seq2SeqAgent.load", "print", "agent.Seq2SeqAgent.load", "print", "str", "agent.Seq2SeqAgent.train", "len", "range", "sum", "len", "sum", "sum", "max", "sum", "max", "sum", "agent.Seq2SeqAgent.test", "agent.Seq2SeqAgent.get_results", "evaluator.score", "score_summary.items", "print", "os.path.join", "os.path.join", "range", "agent.Seq2SeqAgent.train", "agent.Seq2SeqAgent.train", "utils.print_progress", "len", "len", "agent.Seq2SeqAgent.save", "agent.Seq2SeqAgent.save", "print", "open", "open.write", "open.close", "tensorboardX.SummaryWriter.add_scalar", "os.path.join", "os.path.join", "utils.timeSince", "float", "float", "param.args.iters", "param.args.iters"], "function", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.save", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.train.train", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.test", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.BaseAgent.get_results", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.eval.Evaluation.score", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.train.train", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.train.train", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.print_progress", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.save", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.save", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.timeSince"], ["def", "train", "(", "train_env", ",", "tok", ",", "n_iters", ",", "log_every", "=", "2000", ",", "val_envs", "=", "{", "}", ",", "aug_env", "=", "None", ")", ":", "\n", "    ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "log_dir", ")", "\n", "listner", "=", "Seq2SeqAgent", "(", "train_env", ",", "\"\"", ",", "tok", ",", "args", ".", "maxAction", ")", "\n", "\n", "record_file", "=", "open", "(", "'./logs/'", "+", "args", ".", "name", "+", "'.txt'", ",", "'a'", ")", "\n", "record_file", ".", "write", "(", "str", "(", "args", ")", "+", "'\\n\\n'", ")", "\n", "record_file", ".", "close", "(", ")", "\n", "\n", "start_iter", "=", "0", "\n", "if", "args", ".", "load", "is", "not", "None", ":", "\n", "        ", "if", "args", ".", "aug", "is", "None", ":", "\n", "            ", "start_iter", "=", "listner", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "load", ")", ")", "\n", "print", "(", "\"\\nLOAD the model from {}, iteration \"", ".", "format", "(", "args", ".", "load", ",", "start_iter", ")", ")", "\n", "", "else", ":", "\n", "            ", "load_iter", "=", "listner", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "load", ")", ")", "\n", "print", "(", "\"\\nLOAD the model from {}, iteration \"", ".", "format", "(", "args", ".", "load", ",", "load_iter", ")", ")", "\n", "\n", "", "", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'\\nListener training starts, start iteration: %s'", "%", "str", "(", "start_iter", ")", ")", "\n", "\n", "best_val", "=", "{", "'val_unseen'", ":", "{", "\"spl\"", ":", "0.", ",", "\"sr\"", ":", "0.", ",", "\"state\"", ":", "\"\"", ",", "'update'", ":", "False", "}", "}", "\n", "\n", "for", "idx", "in", "range", "(", "start_iter", ",", "start_iter", "+", "n_iters", ",", "log_every", ")", ":", "\n", "        ", "listner", ".", "logs", "=", "defaultdict", "(", "list", ")", "\n", "interval", "=", "min", "(", "log_every", ",", "n_iters", "-", "idx", ")", "\n", "iter", "=", "idx", "+", "interval", "\n", "\n", "# Train for log_every interval", "\n", "if", "aug_env", "is", "None", ":", "\n", "            ", "listner", ".", "env", "=", "train_env", "\n", "listner", ".", "train", "(", "interval", ",", "feedback", "=", "feedback_method", ")", "# Train interval iters", "\n", "", "else", ":", "\n", "            ", "jdx_length", "=", "len", "(", "range", "(", "interval", "//", "2", ")", ")", "\n", "for", "jdx", "in", "range", "(", "interval", "//", "2", ")", ":", "\n", "# Train with GT data", "\n", "                ", "listner", ".", "env", "=", "train_env", "\n", "args", ".", "ml_weight", "=", "0.2", "\n", "listner", ".", "train", "(", "1", ",", "feedback", "=", "feedback_method", ")", "\n", "\n", "# Train with Augmented data", "\n", "listner", ".", "env", "=", "aug_env", "\n", "args", ".", "ml_weight", "=", "0.2", "\n", "listner", ".", "train", "(", "1", ",", "feedback", "=", "feedback_method", ")", "\n", "\n", "print_progress", "(", "jdx", ",", "jdx_length", ",", "prefix", "=", "'Progress:'", ",", "suffix", "=", "'Complete'", ",", "bar_length", "=", "50", ")", "\n", "\n", "# Log the training stats to tensorboard", "\n", "", "", "total", "=", "max", "(", "sum", "(", "listner", ".", "logs", "[", "'total'", "]", ")", ",", "1", ")", "\n", "length", "=", "max", "(", "len", "(", "listner", ".", "logs", "[", "'critic_loss'", "]", ")", ",", "1", ")", "\n", "critic_loss", "=", "sum", "(", "listner", ".", "logs", "[", "'critic_loss'", "]", ")", "/", "total", "\n", "RL_loss", "=", "sum", "(", "listner", ".", "logs", "[", "'RL_loss'", "]", ")", "/", "max", "(", "len", "(", "listner", ".", "logs", "[", "'RL_loss'", "]", ")", ",", "1", ")", "\n", "IL_loss", "=", "sum", "(", "listner", ".", "logs", "[", "'IL_loss'", "]", ")", "/", "max", "(", "len", "(", "listner", ".", "logs", "[", "'IL_loss'", "]", ")", ",", "1", ")", "\n", "entropy", "=", "sum", "(", "listner", ".", "logs", "[", "'entropy'", "]", ")", "/", "total", "\n", "writer", ".", "add_scalar", "(", "\"loss/critic\"", ",", "critic_loss", ",", "idx", ")", "\n", "writer", ".", "add_scalar", "(", "\"policy_entropy\"", ",", "entropy", ",", "idx", ")", "\n", "writer", ".", "add_scalar", "(", "\"loss/RL_loss\"", ",", "RL_loss", ",", "idx", ")", "\n", "writer", ".", "add_scalar", "(", "\"loss/IL_loss\"", ",", "IL_loss", ",", "idx", ")", "\n", "writer", ".", "add_scalar", "(", "\"total_actions\"", ",", "total", ",", "idx", ")", "\n", "writer", ".", "add_scalar", "(", "\"max_length\"", ",", "length", ",", "idx", ")", "\n", "# print(\"total_actions\", total, \", max_length\", length)", "\n", "\n", "# Run validation", "\n", "loss_str", "=", "\"iter {}\"", ".", "format", "(", "iter", ")", "\n", "for", "env_name", ",", "(", "env", ",", "evaluator", ")", "in", "val_envs", ".", "items", "(", ")", ":", "\n", "            ", "listner", ".", "env", "=", "env", "\n", "\n", "# Get validation distance from goal under test evaluation conditions", "\n", "listner", ".", "test", "(", "use_dropout", "=", "False", ",", "feedback", "=", "'argmax'", ",", "iters", "=", "None", ")", "\n", "result", "=", "listner", ".", "get_results", "(", ")", "\n", "score_summary", ",", "_", "=", "evaluator", ".", "score", "(", "result", ")", "\n", "loss_str", "+=", "\", %s \"", "%", "env_name", "\n", "for", "metric", ",", "val", "in", "score_summary", ".", "items", "(", ")", ":", "\n", "                ", "if", "metric", "in", "[", "'spl'", "]", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "\"spl/%s\"", "%", "env_name", ",", "val", ",", "idx", ")", "\n", "if", "env_name", "in", "best_val", ":", "\n", "                        ", "if", "val", ">", "best_val", "[", "env_name", "]", "[", "'spl'", "]", ":", "\n", "                            ", "best_val", "[", "env_name", "]", "[", "'spl'", "]", "=", "val", "\n", "best_val", "[", "env_name", "]", "[", "'update'", "]", "=", "True", "\n", "", "elif", "(", "val", "==", "best_val", "[", "env_name", "]", "[", "'spl'", "]", ")", "and", "(", "score_summary", "[", "'success_rate'", "]", ">", "best_val", "[", "env_name", "]", "[", "'sr'", "]", ")", ":", "\n", "                            ", "best_val", "[", "env_name", "]", "[", "'spl'", "]", "=", "val", "\n", "best_val", "[", "env_name", "]", "[", "'update'", "]", "=", "True", "\n", "", "", "", "loss_str", "+=", "', %s: %.4f'", "%", "(", "metric", ",", "val", ")", "\n", "\n", "", "", "record_file", "=", "open", "(", "'./logs/'", "+", "args", ".", "name", "+", "'.txt'", ",", "'a'", ")", "\n", "record_file", ".", "write", "(", "loss_str", "+", "'\\n'", ")", "\n", "record_file", ".", "close", "(", ")", "\n", "\n", "for", "env_name", "in", "best_val", ":", "\n", "            ", "if", "best_val", "[", "env_name", "]", "[", "'update'", "]", ":", "\n", "                ", "best_val", "[", "env_name", "]", "[", "'state'", "]", "=", "'Iter %d %s'", "%", "(", "iter", ",", "loss_str", ")", "\n", "best_val", "[", "env_name", "]", "[", "'update'", "]", "=", "False", "\n", "listner", ".", "save", "(", "idx", ",", "os", ".", "path", ".", "join", "(", "\"snap\"", ",", "args", ".", "name", ",", "\"state_dict\"", ",", "\"best_%s\"", "%", "(", "env_name", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "listner", ".", "save", "(", "idx", ",", "os", ".", "path", ".", "join", "(", "\"snap\"", ",", "args", ".", "name", ",", "\"state_dict\"", ",", "\"latest_dict\"", ")", ")", "\n", "\n", "", "", "print", "(", "(", "'%s (%d %d%%) %s'", "%", "(", "timeSince", "(", "start", ",", "float", "(", "iter", ")", "/", "n_iters", ")", ",", "\n", "iter", ",", "float", "(", "iter", ")", "/", "n_iters", "*", "100", ",", "loss_str", ")", ")", ")", "\n", "\n", "if", "iter", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "\"BEST RESULT TILL NOW\"", ")", "\n", "for", "env_name", "in", "best_val", ":", "\n", "                ", "print", "(", "env_name", ",", "best_val", "[", "env_name", "]", "[", "'state'", "]", ")", "\n", "\n", "record_file", "=", "open", "(", "'./logs/'", "+", "args", ".", "name", "+", "'.txt'", ",", "'a'", ")", "\n", "record_file", ".", "write", "(", "'BEST RESULT TILL NOW: '", "+", "env_name", "+", "' | '", "+", "best_val", "[", "env_name", "]", "[", "'state'", "]", "+", "'\\n'", ")", "\n", "record_file", ".", "close", "(", ")", "\n", "\n", "", "", "", "listner", ".", "save", "(", "idx", ",", "os", ".", "path", ".", "join", "(", "\"snap\"", ",", "args", ".", "name", ",", "\"state_dict\"", ",", "\"LAST_iter%d\"", "%", "(", "idx", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.train.valid": [[151, 176], ["agent.Seq2SeqAgent", "print", "val_envs.items", "collections.defaultdict", "agent.Seq2SeqAgent.test", "agent.Seq2SeqAgent.get_results", "evaluator.score", "score_summary.items", "print", "json.dump", "agent.Seq2SeqAgent.load", "open", "os.path.join"], "function", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.test", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.BaseAgent.get_results", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.eval.Evaluation.score", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load"], ["", "def", "valid", "(", "train_env", ",", "tok", ",", "val_envs", "=", "{", "}", ")", ":", "\n", "    ", "agent", "=", "Seq2SeqAgent", "(", "train_env", ",", "\"\"", ",", "tok", ",", "args", ".", "maxAction", ")", "\n", "\n", "print", "(", "\"Loaded the listener model at iter %d from %s\"", "%", "(", "agent", ".", "load", "(", "args", ".", "load", ")", ",", "args", ".", "load", ")", ")", "\n", "\n", "for", "env_name", ",", "(", "env", ",", "evaluator", ")", "in", "val_envs", ".", "items", "(", ")", ":", "\n", "        ", "agent", ".", "logs", "=", "defaultdict", "(", "list", ")", "\n", "agent", ".", "env", "=", "env", "\n", "\n", "iters", "=", "None", "\n", "agent", ".", "test", "(", "use_dropout", "=", "False", ",", "feedback", "=", "'argmax'", ",", "iters", "=", "iters", ")", "\n", "result", "=", "agent", ".", "get_results", "(", ")", "\n", "\n", "if", "env_name", "!=", "''", ":", "\n", "            ", "score_summary", ",", "_", "=", "evaluator", ".", "score", "(", "result", ")", "\n", "loss_str", "=", "\"Env name: %s\"", "%", "env_name", "\n", "for", "metric", ",", "val", "in", "score_summary", ".", "items", "(", ")", ":", "\n", "                ", "loss_str", "+=", "', %s: %.4f'", "%", "(", "metric", ",", "val", ")", "\n", "", "print", "(", "loss_str", ")", "\n", "\n", "", "if", "args", ".", "submit", ":", "\n", "            ", "json", ".", "dump", "(", "\n", "result", ",", "\n", "open", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"submit_%s.json\"", "%", "env_name", ")", ",", "'w'", ")", ",", "\n", "sort_keys", "=", "True", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.train.setup": [[178, 183], ["torch.manual_seed", "torch.cuda.manual_seed", "random.seed", "numpy.random.seed"], "function", ["None"], ["", "", "", "def", "setup", "(", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "1", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "1", ")", "\n", "random", ".", "seed", "(", "0", ")", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.train.train_val": [[184, 221], ["train.setup", "vlnbert.vlnbert_init.get_tokenizer", "utils.read_img_features", "env.R2RBatch", "OrderedDict", "set", "val_env_names.append", "train.train", "train.valid", "key.split", "list", "env.R2RBatch", "eval.Evaluation", "utils.read_img_features.keys"], "function", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.train.setup", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_init.get_tokenizer", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.read_img_features", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.train.train", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.train.valid"], ["", "def", "train_val", "(", "test_only", "=", "False", ")", ":", "\n", "    ", "''' Train on the training set, and validate on seen and unseen splits. '''", "\n", "setup", "(", ")", "\n", "tok", "=", "get_tokenizer", "(", "args", ")", "\n", "\n", "feat_dict", "=", "read_img_features", "(", "features", ",", "test_only", "=", "test_only", ")", "\n", "\n", "if", "test_only", ":", "\n", "        ", "featurized_scans", "=", "None", "\n", "val_env_names", "=", "[", "'val_train_seen'", "]", "\n", "", "else", ":", "\n", "        ", "featurized_scans", "=", "set", "(", "[", "key", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "for", "key", "in", "list", "(", "feat_dict", ".", "keys", "(", ")", ")", "]", ")", "\n", "val_env_names", "=", "[", "'val_train_seen'", ",", "'val_seen'", ",", "'val_unseen'", "]", "\n", "\n", "", "train_env", "=", "R2RBatch", "(", "feat_dict", ",", "batch_size", "=", "args", ".", "batchSize", ",", "splits", "=", "[", "'train'", "]", ",", "tokenizer", "=", "tok", ")", "\n", "from", "collections", "import", "OrderedDict", "\n", "\n", "if", "args", ".", "submit", ":", "\n", "        ", "val_env_names", ".", "append", "(", "'test'", ")", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "\n", "", "val_envs", "=", "OrderedDict", "(", "\n", "(", "(", "split", ",", "\n", "(", "R2RBatch", "(", "feat_dict", ",", "batch_size", "=", "args", ".", "batchSize", ",", "splits", "=", "[", "split", "]", ",", "tokenizer", "=", "tok", ")", ",", "\n", "Evaluation", "(", "[", "split", "]", ",", "featurized_scans", ",", "tok", ")", ")", "\n", ")", "\n", "for", "split", "in", "val_env_names", "\n", ")", "\n", ")", "\n", "\n", "if", "args", ".", "train", "==", "'listener'", ":", "\n", "        ", "train", "(", "train_env", ",", "tok", ",", "args", ".", "iters", ",", "val_envs", "=", "val_envs", ")", "\n", "", "elif", "args", ".", "train", "==", "'validlistener'", ":", "\n", "        ", "valid", "(", "train_env", ",", "tok", ",", "val_envs", "=", "val_envs", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.train.train_val_augment": [[222, 254], ["train.setup", "vlnbert.vlnbert_init.get_tokenizer", "utils.read_img_features", "env.R2RBatch", "env.R2RBatch", "train.train", "set", "env.R2RBatch", "eval.Evaluation", "key.split", "list", "utils.read_img_features.keys"], "function", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.train.setup", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_init.get_tokenizer", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.read_img_features", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.train.train"], ["", "", "def", "train_val_augment", "(", "test_only", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Train the listener with the augmented data\n    \"\"\"", "\n", "setup", "(", ")", "\n", "\n", "# Create a batch training environment that will also preprocess text", "\n", "tok_bert", "=", "get_tokenizer", "(", "args", ")", "\n", "\n", "# Load the env img features", "\n", "feat_dict", "=", "read_img_features", "(", "features", ",", "test_only", "=", "test_only", ")", "\n", "\n", "if", "test_only", ":", "\n", "        ", "featurized_scans", "=", "None", "\n", "val_env_names", "=", "[", "'val_train_seen'", "]", "\n", "", "else", ":", "\n", "        ", "featurized_scans", "=", "set", "(", "[", "key", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "for", "key", "in", "list", "(", "feat_dict", ".", "keys", "(", ")", ")", "]", ")", "\n", "val_env_names", "=", "[", "'val_train_seen'", ",", "'val_seen'", ",", "'val_unseen'", "]", "\n", "\n", "# Load the augmentation data", "\n", "", "aug_path", "=", "args", ".", "aug", "\n", "# Create the training environment", "\n", "train_env", "=", "R2RBatch", "(", "feat_dict", ",", "batch_size", "=", "args", ".", "batchSize", ",", "splits", "=", "[", "'train'", "]", ",", "tokenizer", "=", "tok_bert", ")", "\n", "aug_env", "=", "R2RBatch", "(", "feat_dict", ",", "batch_size", "=", "args", ".", "batchSize", ",", "splits", "=", "[", "aug_path", "]", ",", "tokenizer", "=", "tok_bert", ",", "name", "=", "'aug'", ")", "\n", "\n", "# Setup the validation data", "\n", "val_envs", "=", "{", "split", ":", "(", "R2RBatch", "(", "feat_dict", ",", "batch_size", "=", "args", ".", "batchSize", ",", "splits", "=", "[", "split", "]", ",", "tokenizer", "=", "tok_bert", ")", ",", "\n", "Evaluation", "(", "[", "split", "]", ",", "featurized_scans", ",", "tok_bert", ")", ")", "\n", "for", "split", "in", "val_env_names", "}", "\n", "\n", "# Start training", "\n", "train", "(", "train_env", ",", "tok_bert", ",", "args", ".", "iters", ",", "val_envs", "=", "val_envs", ",", "aug_env", "=", "aug_env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.model_PREVALENT.VLNBERT.__init__": [[13, 34], ["torch.Module.__init__", "print", "vlnbert.vlnbert_init.get_vlnbert_models", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model_PREVALENT.BertLayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "model_PREVALENT.BertLayerNorm", "model_PREVALENT.BertLayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "model_PREVALENT.BertLayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_init.get_vlnbert_models"], ["    ", "def", "__init__", "(", "self", ",", "feature_size", "=", "2048", "+", "128", ")", ":", "\n", "        ", "super", "(", "VLNBERT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'\\nInitalizing the VLN-BERT model ...'", ")", "\n", "\n", "self", ".", "vln_bert", "=", "get_vlnbert_models", "(", "args", ",", "config", "=", "None", ")", "# initialize the VLN-BERT", "\n", "self", ".", "vln_bert", ".", "config", ".", "directions", "=", "4", "# a preset random number", "\n", "\n", "hidden_size", "=", "self", ".", "vln_bert", ".", "config", ".", "hidden_size", "\n", "layer_norm_eps", "=", "self", ".", "vln_bert", ".", "config", ".", "layer_norm_eps", "\n", "\n", "self", ".", "action_state_project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden_size", "+", "args", ".", "angle_feat_size", ",", "hidden_size", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "action_LayerNorm", "=", "BertLayerNorm", "(", "hidden_size", ",", "eps", "=", "layer_norm_eps", ")", "\n", "\n", "self", ".", "drop_env", "=", "nn", ".", "Dropout", "(", "p", "=", "args", ".", "featdropout", ")", "\n", "self", ".", "img_projection", "=", "nn", ".", "Linear", "(", "feature_size", ",", "hidden_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "cand_LayerNorm", "=", "BertLayerNorm", "(", "hidden_size", ",", "eps", "=", "layer_norm_eps", ")", "\n", "\n", "self", ".", "vis_lang_LayerNorm", "=", "BertLayerNorm", "(", "hidden_size", ",", "eps", "=", "layer_norm_eps", ")", "\n", "self", ".", "state_proj", "=", "nn", ".", "Linear", "(", "hidden_size", "*", "2", ",", "hidden_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "state_LayerNorm", "=", "BertLayerNorm", "(", "hidden_size", ",", "eps", "=", "layer_norm_eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.model_PREVALENT.VLNBERT.forward": [[35, 67], ["model_PREVALENT.VLNBERT.vln_bert", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_PREVALENT.VLNBERT.action_state_project", "model_PREVALENT.VLNBERT.action_LayerNorm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_PREVALENT.VLNBERT.drop_env", "model_PREVALENT.VLNBERT.vln_bert", "model_PREVALENT.VLNBERT.vis_lang_LayerNorm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_PREVALENT.VLNBERT.state_proj", "model_PREVALENT.VLNBERT.state_LayerNorm", "model_PREVALENT.VLNBERT.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mode", ",", "sentence", ",", "token_type_ids", "=", "None", ",", "\n", "attention_mask", "=", "None", ",", "lang_mask", "=", "None", ",", "vis_mask", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "action_feats", "=", "None", ",", "pano_feats", "=", "None", ",", "cand_feats", "=", "None", ")", ":", "\n", "\n", "        ", "if", "mode", "==", "'language'", ":", "\n", "            ", "init_state", ",", "encoded_sentence", "=", "self", ".", "vln_bert", "(", "mode", ",", "sentence", ",", "attention_mask", "=", "attention_mask", ",", "lang_mask", "=", "lang_mask", ",", ")", "\n", "\n", "return", "init_state", ",", "encoded_sentence", "\n", "\n", "", "elif", "mode", "==", "'visual'", ":", "\n", "\n", "            ", "state_action_embed", "=", "torch", ".", "cat", "(", "(", "sentence", "[", ":", ",", "0", ",", ":", "]", ",", "action_feats", ")", ",", "1", ")", "\n", "state_with_action", "=", "self", ".", "action_state_project", "(", "state_action_embed", ")", "\n", "state_with_action", "=", "self", ".", "action_LayerNorm", "(", "state_with_action", ")", "\n", "state_feats", "=", "torch", ".", "cat", "(", "(", "state_with_action", ".", "unsqueeze", "(", "1", ")", ",", "sentence", "[", ":", ",", "1", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "cand_feats", "[", "...", ",", ":", "-", "args", ".", "angle_feat_size", "]", "=", "self", ".", "drop_env", "(", "cand_feats", "[", "...", ",", ":", "-", "args", ".", "angle_feat_size", "]", ")", "\n", "\n", "# logit is the attention scores over the candidate features", "\n", "h_t", ",", "logit", ",", "attended_language", ",", "attended_visual", "=", "self", ".", "vln_bert", "(", "mode", ",", "state_feats", ",", "\n", "attention_mask", "=", "attention_mask", ",", "lang_mask", "=", "lang_mask", ",", "vis_mask", "=", "vis_mask", ",", "img_feats", "=", "cand_feats", ")", "\n", "\n", "# update agent's state, unify history, language and vision by elementwise product", "\n", "vis_lang_feat", "=", "self", ".", "vis_lang_LayerNorm", "(", "attended_language", "*", "attended_visual", ")", "\n", "state_output", "=", "torch", ".", "cat", "(", "(", "h_t", ",", "vis_lang_feat", ")", ",", "dim", "=", "-", "1", ")", "\n", "state_proj", "=", "self", ".", "state_proj", "(", "state_output", ")", "\n", "state_proj", "=", "self", ".", "state_LayerNorm", "(", "state_proj", ")", "\n", "\n", "return", "state_proj", ",", "logit", "\n", "\n", "", "else", ":", "\n", "            ", "ModuleNotFoundError", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.model_PREVALENT.BertLayerNorm.__init__": [[70, 77], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "eps", "=", "1e-12", ")", ":", "\n", "        ", "\"\"\"Construct a layernorm module in the TF style (epsilon inside the square root).\n        \"\"\"", "\n", "super", "(", "BertLayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "hidden_size", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "hidden_size", ")", ")", "\n", "self", ".", "variance_epsilon", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.model_PREVALENT.BertLayerNorm.forward": [[78, 83], ["x.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "u", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "s", "=", "(", "x", "-", "u", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "u", ")", "/", "torch", ".", "sqrt", "(", "s", "+", "self", ".", "variance_epsilon", ")", "\n", "return", "self", ".", "weight", "*", "x", "+", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.model_PREVALENT.Critic.__init__": [[86, 93], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Critic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "state2value", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "768", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "args", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.model_PREVALENT.Critic.forward": [[95, 97], ["model_PREVALENT.Critic.state2value().squeeze", "model_PREVALENT.Critic.state2value"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "self", ".", "state2value", "(", "state", ")", ".", "squeeze", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.__init__": [[112, 131], ["utils.Tokenizer.vocab_size", "utils.Tokenizer.add_word", "print", "print", "print", "enumerate", "collections.defaultdict", "collections.defaultdict.update", "utils.Tokenizer.word_to_index.items", "utils.Tokenizer.vocab_size", "utils.Tokenizer.vocab_size", "len"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.vocab_size", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.add_word", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.FloydGraph.update", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.vocab_size", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.vocab_size"], ["def", "__init__", "(", "self", ",", "vocab", "=", "None", ",", "encoding_length", "=", "20", ")", ":", "\n", "        ", "self", ".", "encoding_length", "=", "encoding_length", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "word_to_index", "=", "{", "}", "\n", "self", ".", "index_to_word", "=", "{", "}", "\n", "if", "vocab", ":", "\n", "            ", "for", "i", ",", "word", "in", "enumerate", "(", "vocab", ")", ":", "\n", "                ", "self", ".", "word_to_index", "[", "word", "]", "=", "i", "\n", "", "new_w2i", "=", "defaultdict", "(", "lambda", ":", "self", ".", "word_to_index", "[", "'<UNK>'", "]", ")", "\n", "new_w2i", ".", "update", "(", "self", ".", "word_to_index", ")", "\n", "self", ".", "word_to_index", "=", "new_w2i", "\n", "for", "key", ",", "value", "in", "self", ".", "word_to_index", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "index_to_word", "[", "value", "]", "=", "key", "\n", "", "", "old", "=", "self", ".", "vocab_size", "(", ")", "\n", "self", ".", "add_word", "(", "'<BOS>'", ")", "\n", "assert", "self", ".", "vocab_size", "(", ")", "==", "old", "+", "1", "\n", "print", "(", "\"OLD_VOCAB_SIZE\"", ",", "old", ")", "\n", "print", "(", "\"VOCAB_SIZE\"", ",", "self", ".", "vocab_size", "(", ")", ")", "\n", "print", "(", "\"VOACB\"", ",", "len", "(", "vocab", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.finalize": [[132, 137], ["dict"], "methods", ["None"], ["", "def", "finalize", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This is used for debug\n        \"\"\"", "\n", "self", ".", "word_to_index", "=", "dict", "(", "self", ".", "word_to_index", ")", "# To avoid using mis-typing tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.add_word": [[138, 142], ["utils.Tokenizer.vocab_size", "utils.Tokenizer.vocab_size"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.vocab_size", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.vocab_size"], ["", "def", "add_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "assert", "word", "not", "in", "self", ".", "word_to_index", "\n", "self", ".", "word_to_index", "[", "word", "]", "=", "self", ".", "vocab_size", "(", ")", "# vocab_size() is the", "\n", "self", ".", "index_to_word", "[", "self", ".", "vocab_size", "(", ")", "]", "=", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.split_sentence": [[143, 154], ["s.strip().lower", "Tokenizer.SENTENCE_SPLIT_REGEX.split", "all", "list", "toks.append", "s.strip", "sentence.strip", "len", "all", "s.strip"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "split_sentence", "(", "sentence", ")", ":", "\n", "        ", "''' Break sentence into a list of words and punctuation '''", "\n", "toks", "=", "[", "]", "\n", "for", "word", "in", "[", "s", ".", "strip", "(", ")", ".", "lower", "(", ")", "for", "s", "in", "Tokenizer", ".", "SENTENCE_SPLIT_REGEX", ".", "split", "(", "sentence", ".", "strip", "(", ")", ")", "if", "len", "(", "s", ".", "strip", "(", ")", ")", ">", "0", "]", ":", "\n", "# Break up any words containing punctuation only, e.g. '!?', unless it is multiple full stops e.g. '..'", "\n", "            ", "if", "all", "(", "c", "in", "string", ".", "punctuation", "for", "c", "in", "word", ")", "and", "not", "all", "(", "c", "in", "'.'", "for", "c", "in", "word", ")", ":", "\n", "                ", "toks", "+=", "list", "(", "word", ")", "\n", "", "else", ":", "\n", "                ", "toks", ".", "append", "(", "word", ")", "\n", "", "", "return", "toks", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.vocab_size": [[155, 157], ["len"], "methods", ["None"], ["", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "index_to_word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.encode_sentence": [[158, 179], ["utils.Tokenizer.split_sentence", "encoding.append", "numpy.array", "len", "sys.exit", "encoding.append", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.split_sentence"], ["", "def", "encode_sentence", "(", "self", ",", "sentence", ",", "max_length", "=", "None", ")", ":", "\n", "        ", "if", "max_length", "is", "None", ":", "\n", "            ", "max_length", "=", "self", ".", "encoding_length", "\n", "", "if", "len", "(", "self", ".", "word_to_index", ")", "==", "0", ":", "\n", "            ", "sys", ".", "exit", "(", "'Tokenizer has no vocab'", ")", "\n", "\n", "", "encoding", "=", "[", "self", ".", "word_to_index", "[", "'<BOS>'", "]", "]", "\n", "for", "word", "in", "self", ".", "split_sentence", "(", "sentence", ")", ":", "\n", "            ", "encoding", ".", "append", "(", "self", ".", "word_to_index", "[", "word", "]", ")", "# Default Dict", "\n", "", "encoding", ".", "append", "(", "self", ".", "word_to_index", "[", "'<EOS>'", "]", ")", "\n", "\n", "if", "len", "(", "encoding", ")", "<=", "2", ":", "\n", "            ", "return", "None", "\n", "#assert len(encoding) > 2", "\n", "\n", "", "if", "len", "(", "encoding", ")", "<", "max_length", ":", "\n", "            ", "encoding", "+=", "[", "self", ".", "word_to_index", "[", "'<PAD>'", "]", "]", "*", "(", "max_length", "-", "len", "(", "encoding", ")", ")", "# Padding", "\n", "", "elif", "len", "(", "encoding", ")", ">", "max_length", ":", "\n", "            ", "encoding", "[", "max_length", "-", "1", "]", "=", "self", ".", "word_to_index", "[", "'<EOS>'", "]", "# Cut the length with EOS", "\n", "\n", "", "return", "np", ".", "array", "(", "encoding", "[", ":", "max_length", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.decode_sentence": [[180, 190], ["sentence.append"], "methods", ["None"], ["", "def", "decode_sentence", "(", "self", ",", "encoding", ",", "length", "=", "None", ")", ":", "\n", "        ", "sentence", "=", "[", "]", "\n", "if", "length", "is", "not", "None", ":", "\n", "            ", "encoding", "=", "encoding", "[", ":", "length", "]", "\n", "", "for", "ix", "in", "encoding", ":", "\n", "            ", "if", "ix", "==", "self", ".", "word_to_index", "[", "'<PAD>'", "]", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "sentence", ".", "append", "(", "self", ".", "index_to_word", "[", "ix", "]", ")", "\n", "", "", "return", "\" \"", ".", "join", "(", "sentence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.shrink": [[191, 206], ["numpy.argmax", "len", "numpy.array", "len"], "methods", ["None"], ["", "def", "shrink", "(", "self", ",", "inst", ")", ":", "\n", "        ", "\"\"\"\n        :param inst:    The id inst\n        :return:  Remove the potential <BOS> and <EOS>\n                  If no <EOS> return empty list\n        \"\"\"", "\n", "if", "len", "(", "inst", ")", "==", "0", ":", "\n", "            ", "return", "inst", "\n", "", "end", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "inst", ")", "==", "self", ".", "word_to_index", "[", "'<EOS>'", "]", ")", "# If no <EOS>, return empty string", "\n", "if", "len", "(", "inst", ")", ">", "1", "and", "inst", "[", "0", "]", "==", "self", ".", "word_to_index", "[", "'<BOS>'", "]", ":", "\n", "            ", "start", "=", "1", "\n", "", "else", ":", "\n", "            ", "start", "=", "0", "\n", "# print(inst, start, end)", "\n", "", "return", "inst", "[", "start", ":", "end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.GracefulKiller.__init__": [[386, 389], ["signal.signal", "signal.signal"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "self", ".", "exit_gracefully", ")", "\n", "signal", ".", "signal", "(", "signal", ".", "SIGTERM", ",", "self", ".", "exit_gracefully", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.GracefulKiller.exit_gracefully": [[390, 392], ["None"], "methods", ["None"], ["", "def", "exit_gracefully", "(", "self", ",", "signum", ",", "frame", ")", ":", "\n", "    ", "self", ".", "kill_now", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Timer.__init__": [[396, 400], ["collections.OrderedDict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "cul", "=", "OrderedDict", "(", ")", "\n", "self", ".", "start", "=", "{", "}", "\n", "self", ".", "iter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Timer.reset": [[401, 405], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "cul", "=", "OrderedDict", "(", ")", "\n", "self", ".", "start", "=", "{", "}", "\n", "self", ".", "iter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Timer.tic": [[406, 408], ["time.time"], "methods", ["None"], ["", "def", "tic", "(", "self", ",", "key", ")", ":", "\n", "        ", "self", ".", "start", "[", "key", "]", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Timer.toc": [[409, 415], ["time.time"], "methods", ["None"], ["", "def", "toc", "(", "self", ",", "key", ")", ":", "\n", "        ", "delta", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start", "[", "key", "]", "\n", "if", "key", "not", "in", "self", ".", "cul", ":", "\n", "            ", "self", ".", "cul", "[", "key", "]", "=", "delta", "\n", "", "else", ":", "\n", "            ", "self", ".", "cul", "[", "key", "]", "+=", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Timer.step": [[416, 418], ["None"], "methods", ["None"], ["", "", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Timer.show": [[419, 425], ["sum", "print", "utils.Timer.cul.values", "print"], "methods", ["None"], ["", "def", "show", "(", "self", ")", ":", "\n", "        ", "total", "=", "sum", "(", "self", ".", "cul", ".", "values", "(", ")", ")", "\n", "for", "key", "in", "self", ".", "cul", ":", "\n", "            ", "print", "(", "\"%s, total time %0.2f, avg time %0.2f, part of %0.2f\"", "%", "\n", "(", "key", ",", "self", ".", "cul", "[", "key", "]", ",", "self", ".", "cul", "[", "key", "]", "*", "1.", "/", "self", ".", "iter", ",", "self", ".", "cul", "[", "key", "]", "*", "1.", "/", "total", ")", ")", "\n", "", "print", "(", "total", "/", "self", ".", "iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.FloydGraph.__init__": [[499, 503], ["collections.defaultdict", "collections.defaultdict", "set", "collections.defaultdict", "collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_dis", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "lambda", ":", "95959595", ")", ")", "\n", "self", ".", "_point", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "lambda", ":", "\"\"", ")", ")", "\n", "self", ".", "_visited", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.FloydGraph.distance": [[504, 509], ["None"], "methods", ["None"], ["", "def", "distance", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "x", "==", "y", ":", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_dis", "[", "x", "]", "[", "y", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.FloydGraph.add_edge": [[510, 516], ["None"], "methods", ["None"], ["", "", "def", "add_edge", "(", "self", ",", "x", ",", "y", ",", "dis", ")", ":", "\n", "        ", "if", "dis", "<", "self", ".", "_dis", "[", "x", "]", "[", "y", "]", ":", "\n", "            ", "self", ".", "_dis", "[", "x", "]", "[", "y", "]", "=", "dis", "\n", "self", ".", "_dis", "[", "y", "]", "[", "x", "]", "=", "dis", "\n", "self", ".", "_point", "[", "x", "]", "[", "y", "]", "=", "\"\"", "\n", "self", ".", "_point", "[", "y", "]", "[", "x", "]", "=", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.FloydGraph.update": [[517, 527], ["utils.FloydGraph._visited.add"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "k", ")", ":", "\n", "        ", "for", "x", "in", "self", ".", "_dis", ":", "\n", "            ", "for", "y", "in", "self", ".", "_dis", ":", "\n", "                ", "if", "x", "!=", "y", ":", "\n", "                    ", "if", "self", ".", "_dis", "[", "x", "]", "[", "k", "]", "+", "self", ".", "_dis", "[", "k", "]", "[", "y", "]", "<", "self", ".", "_dis", "[", "x", "]", "[", "y", "]", ":", "\n", "                        ", "self", ".", "_dis", "[", "x", "]", "[", "y", "]", "=", "self", ".", "_dis", "[", "x", "]", "[", "k", "]", "+", "self", ".", "_dis", "[", "k", "]", "[", "y", "]", "\n", "self", ".", "_dis", "[", "y", "]", "[", "x", "]", "=", "self", ".", "_dis", "[", "x", "]", "[", "y", "]", "\n", "self", ".", "_point", "[", "x", "]", "[", "y", "]", "=", "k", "\n", "self", ".", "_point", "[", "y", "]", "[", "x", "]", "=", "k", "\n", "", "", "", "", "self", ".", "_visited", ".", "add", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.FloydGraph.visited": [[528, 530], ["None"], "methods", ["None"], ["", "def", "visited", "(", "self", ",", "k", ")", ":", "\n", "        ", "return", "(", "k", "in", "self", ".", "_visited", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.FloydGraph.path": [[531, 548], ["utils.FloydGraph.path", "utils.FloydGraph.path"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.FloydGraph.path", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.FloydGraph.path"], ["", "def", "path", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        :param x: start\n        :param y: end\n        :return: the path from x to y [v1, v2, ..., v_n, y]\n        \"\"\"", "\n", "if", "x", "==", "y", ":", "\n", "            ", "return", "[", "]", "\n", "", "if", "self", ".", "_point", "[", "x", "]", "[", "y", "]", "==", "\"\"", ":", "# Direct edge", "\n", "            ", "return", "[", "y", "]", "\n", "", "else", ":", "\n", "            ", "k", "=", "self", ".", "_point", "[", "x", "]", "[", "y", "]", "\n", "# print(x, y, k)", "\n", "# for x1 in (x, k, y):", "\n", "#     for x2 in (x, k, y):", "\n", "#         print(x1, x2, \"%.4f\" % self._dis[x1][x2])", "\n", "return", "self", ".", "path", "(", "x", ",", "k", ")", "+", "self", ".", "path", "(", "k", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.DTW.__init__": [[632, 644], ["dict", "networkx.all_pairs_dijkstra_path_length"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "graph", ",", "weight", "=", "'weight'", ",", "threshold", "=", "3.0", ")", ":", "\n", "    ", "\"\"\"Initializes a DTW object.\n    Args:\n      graph: networkx graph for the environment.\n      weight: networkx edge weight key (str).\n      threshold: distance threshold $d_{th}$ (float).\n    \"\"\"", "\n", "self", ".", "graph", "=", "graph", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "distance", "=", "dict", "(", "\n", "nx", ".", "all_pairs_dijkstra_path_length", "(", "self", ".", "graph", ",", "weight", "=", "self", ".", "weight", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.DTW.__call__": [[645, 675], ["range", "numpy.exp", "numpy.ones", "range", "len", "min", "len", "len", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "prediction", ",", "reference", ",", "metric", "=", "'sdtw'", ")", ":", "\n", "    ", "\"\"\"Computes DTW metrics.\n    Args:\n      prediction: list of nodes (str), path predicted by agent.\n      reference: list of nodes (str), the ground truth path.\n      metric: one of ['ndtw', 'sdtw', 'dtw'].\n    Returns:\n      the DTW between the prediction and reference path (float).\n    \"\"\"", "\n", "assert", "metric", "in", "[", "'ndtw'", ",", "'sdtw'", ",", "'dtw'", "]", "\n", "\n", "dtw_matrix", "=", "np", ".", "inf", "*", "np", ".", "ones", "(", "(", "len", "(", "prediction", ")", "+", "1", ",", "len", "(", "reference", ")", "+", "1", ")", ")", "\n", "dtw_matrix", "[", "0", "]", "[", "0", "]", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "prediction", ")", "+", "1", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "1", ",", "len", "(", "reference", ")", "+", "1", ")", ":", "\n", "        ", "best_previous_cost", "=", "min", "(", "\n", "dtw_matrix", "[", "i", "-", "1", "]", "[", "j", "]", ",", "dtw_matrix", "[", "i", "]", "[", "j", "-", "1", "]", ",", "dtw_matrix", "[", "i", "-", "1", "]", "[", "j", "-", "1", "]", ")", "\n", "cost", "=", "self", ".", "distance", "[", "prediction", "[", "i", "-", "1", "]", "]", "[", "reference", "[", "j", "-", "1", "]", "]", "\n", "dtw_matrix", "[", "i", "]", "[", "j", "]", "=", "cost", "+", "best_previous_cost", "\n", "", "", "dtw", "=", "dtw_matrix", "[", "len", "(", "prediction", ")", "]", "[", "len", "(", "reference", ")", "]", "\n", "\n", "if", "metric", "==", "'dtw'", ":", "\n", "      ", "return", "dtw", "\n", "\n", "", "ndtw", "=", "np", ".", "exp", "(", "-", "dtw", "/", "(", "self", ".", "threshold", "*", "len", "(", "reference", ")", ")", ")", "\n", "if", "metric", "==", "'ndtw'", ":", "\n", "      ", "return", "ndtw", "\n", "\n", "", "success", "=", "self", ".", "distance", "[", "prediction", "[", "-", "1", "]", "]", "[", "reference", "[", "-", "1", "]", "]", "<=", "self", ".", "threshold", "\n", "return", "success", "*", "ndtw", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.load_nav_graphs": [[23, 49], ["open", "networkx.Graph", "json.load", "enumerate", "networkx.set_node_attributes", "enumerate", "numpy.array", "nx.Graph.add_edge", "utils.load_nav_graphs.distance"], "function", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.FloydGraph.add_edge", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.FloydGraph.distance"], ["def", "load_nav_graphs", "(", "scans", ")", ":", "\n", "    ", "''' Load connectivity graph for each scan '''", "\n", "\n", "def", "distance", "(", "pose1", ",", "pose2", ")", ":", "\n", "        ", "''' Euclidean distance between two graph poses '''", "\n", "return", "(", "(", "pose1", "[", "'pose'", "]", "[", "3", "]", "-", "pose2", "[", "'pose'", "]", "[", "3", "]", ")", "**", "2", "+", "(", "pose1", "[", "'pose'", "]", "[", "7", "]", "-", "pose2", "[", "'pose'", "]", "[", "7", "]", ")", "**", "2", "+", "(", "pose1", "[", "'pose'", "]", "[", "11", "]", "-", "pose2", "[", "'pose'", "]", "[", "11", "]", ")", "**", "2", ")", "**", "0.5", "\n", "\n", "", "graphs", "=", "{", "}", "\n", "for", "scan", "in", "scans", ":", "\n", "        ", "with", "open", "(", "'connectivity/%s_connectivity.json'", "%", "scan", ")", "as", "f", ":", "\n", "            ", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "positions", "=", "{", "}", "\n", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "data", ")", ":", "\n", "                ", "if", "item", "[", "'included'", "]", ":", "\n", "                    ", "for", "j", ",", "conn", "in", "enumerate", "(", "item", "[", "'unobstructed'", "]", ")", ":", "\n", "                        ", "if", "conn", "and", "data", "[", "j", "]", "[", "'included'", "]", ":", "\n", "                            ", "positions", "[", "item", "[", "'image_id'", "]", "]", "=", "np", ".", "array", "(", "[", "item", "[", "'pose'", "]", "[", "3", "]", ",", "\n", "item", "[", "'pose'", "]", "[", "7", "]", ",", "item", "[", "'pose'", "]", "[", "11", "]", "]", ")", ";", "\n", "assert", "data", "[", "j", "]", "[", "'unobstructed'", "]", "[", "i", "]", ",", "'Graph should be undirected'", "\n", "G", ".", "add_edge", "(", "item", "[", "'image_id'", "]", ",", "data", "[", "j", "]", "[", "'image_id'", "]", ",", "weight", "=", "distance", "(", "item", ",", "data", "[", "j", "]", ")", ")", "\n", "", "", "", "", "nx", ".", "set_node_attributes", "(", "G", ",", "values", "=", "positions", ",", "name", "=", "'position'", ")", "\n", "graphs", "[", "scan", "]", "=", "G", "\n", "", "", "return", "graphs", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.load_datasets": [[51, 89], ["random.getstate", "random.setstate", "split.split", "len", "print", "random.seed", "random.shuffle", "int", "open", "json.load", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load"], ["", "def", "load_datasets", "(", "splits", ")", ":", "\n", "    ", "\"\"\"\n\n    :param splits: A list of split.\n        if the split is \"something@5000\", it will use a random 5000 data from the data\n    :return:\n    \"\"\"", "\n", "import", "random", "\n", "data", "=", "[", "]", "\n", "old_state", "=", "random", ".", "getstate", "(", ")", "\n", "for", "split", "in", "splits", ":", "\n", "# It only needs some part of the dataset?", "\n", "        ", "components", "=", "split", ".", "split", "(", "\"@\"", ")", "\n", "number", "=", "-", "1", "\n", "if", "len", "(", "components", ")", ">", "1", ":", "\n", "            ", "split", ",", "number", "=", "components", "[", "0", "]", ",", "int", "(", "components", "[", "1", "]", ")", "\n", "\n", "# Load Json", "\n", "# if split in ['train', 'val_seen', 'val_unseen', 'test',", "\n", "#              'val_unseen_half1', 'val_unseen_half2', 'val_seen_half1', 'val_seen_half2']:       # Add two halves for sanity check", "\n", "", "if", "\"/\"", "not", "in", "split", ":", "\n", "            ", "with", "open", "(", "'data/R2R_%s.json'", "%", "split", ")", "as", "f", ":", "\n", "                ", "new_data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'\\nLoading prevalent data for pretraining...'", ")", "\n", "with", "open", "(", "split", ")", "as", "f", ":", "\n", "                ", "new_data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "# Partition", "\n", "", "", "if", "number", ">", "0", ":", "\n", "            ", "random", ".", "seed", "(", "0", ")", "# Make the data deterministic, additive", "\n", "random", ".", "shuffle", "(", "new_data", ")", "\n", "new_data", "=", "new_data", "[", ":", "number", "]", "\n", "\n", "# Join", "\n", "", "data", "+=", "new_data", "\n", "", "random", ".", "setstate", "(", "old_state", ")", "# Recover the state of the random generator", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.pad_instr_tokens": [[91, 106], ["len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "pad_instr_tokens", "(", "instr_tokens", ",", "maxlength", "=", "20", ")", ":", "\n", "\n", "    ", "if", "len", "(", "instr_tokens", ")", "<=", "2", ":", "#assert len(raw_instr_tokens) > 2", "\n", "        ", "return", "None", "\n", "\n", "", "if", "len", "(", "instr_tokens", ")", ">", "maxlength", "-", "2", ":", "# -2 for [CLS] and [SEP]", "\n", "        ", "instr_tokens", "=", "instr_tokens", "[", ":", "(", "maxlength", "-", "2", ")", "]", "\n", "\n", "", "instr_tokens", "=", "[", "'[CLS]'", "]", "+", "instr_tokens", "+", "[", "'[SEP]'", "]", "\n", "num_words", "=", "len", "(", "instr_tokens", ")", "# - 1  # include [SEP]", "\n", "instr_tokens", "+=", "[", "'[PAD]'", "]", "*", "(", "maxlength", "-", "len", "(", "instr_tokens", ")", ")", "\n", "\n", "assert", "len", "(", "instr_tokens", ")", "==", "maxlength", "\n", "\n", "return", "instr_tokens", ",", "num_words", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.build_vocab": [[208, 223], ["collections.Counter", "utils.Tokenizer", "utils.load_datasets", "list", "collections.Counter.most_common", "collections.Counter.update", "list.append", "utils.Tokenizer.split_sentence"], "function", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.load_datasets", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.FloydGraph.update", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.split_sentence"], ["", "", "def", "build_vocab", "(", "splits", "=", "[", "'train'", "]", ",", "min_count", "=", "5", ",", "start_vocab", "=", "base_vocab", ")", ":", "\n", "    ", "''' Build a vocab, starting with base vocab containing a few useful tokens. '''", "\n", "count", "=", "Counter", "(", ")", "\n", "t", "=", "Tokenizer", "(", ")", "\n", "data", "=", "load_datasets", "(", "splits", ")", "\n", "for", "item", "in", "data", ":", "\n", "        ", "for", "instr", "in", "item", "[", "'instructions'", "]", ":", "\n", "            ", "count", ".", "update", "(", "t", ".", "split_sentence", "(", "instr", ")", ")", "\n", "", "", "vocab", "=", "list", "(", "start_vocab", ")", "\n", "for", "word", ",", "num", "in", "count", ".", "most_common", "(", ")", ":", "\n", "        ", "if", "num", ">=", "min_count", ":", "\n", "            ", "vocab", ".", "append", "(", "word", ")", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.write_vocab": [[225, 230], ["print", "open", "f.write", "len"], "function", ["None"], ["", "def", "write_vocab", "(", "vocab", ",", "path", ")", ":", "\n", "    ", "print", "(", "'Writing vocab of size %d to %s'", "%", "(", "len", "(", "vocab", ")", ",", "path", ")", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "word", "in", "vocab", ":", "\n", "            ", "f", ".", "write", "(", "\"%s\\n\"", "%", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.read_vocab": [[232, 236], ["open", "word.strip", "f.readlines"], "function", ["None"], ["", "", "", "def", "read_vocab", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "vocab", "=", "[", "word", ".", "strip", "(", ")", "for", "word", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.asMinutes": [[238, 242], ["math.floor"], "function", ["None"], ["", "def", "asMinutes", "(", "s", ")", ":", "\n", "    ", "m", "=", "math", ".", "floor", "(", "s", "/", "60", ")", "\n", "s", "-=", "m", "*", "60", "\n", "return", "'%dm %ds'", "%", "(", "m", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.timeSince": [[244, 250], ["time.time", "utils.asMinutes", "utils.asMinutes"], "function", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.asMinutes", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.asMinutes"], ["", "def", "timeSince", "(", "since", ",", "percent", ")", ":", "\n", "    ", "now", "=", "time", ".", "time", "(", ")", "\n", "s", "=", "now", "-", "since", "\n", "es", "=", "s", "/", "(", "percent", ")", "\n", "rs", "=", "es", "-", "s", "\n", "return", "'%s (- %s)'", "%", "(", "asMinutes", "(", "s", ")", ",", "asMinutes", "(", "rs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.read_img_features": [[251, 281], ["print", "time.time", "print", "int", "open", "csv.DictReader", "numpy.frombuffer().reshape", "time.time", "numpy.frombuffer", "base64.decodestring", "item[].encode"], "function", ["None"], ["", "def", "read_img_features", "(", "feature_store", ",", "test_only", "=", "False", ")", ":", "\n", "    ", "import", "csv", "\n", "import", "base64", "\n", "from", "tqdm", "import", "tqdm", "\n", "\n", "print", "(", "\"Start loading the image feature ... (~50 seconds)\"", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "\"detectfeat\"", "in", "args", ".", "features", ":", "\n", "        ", "views", "=", "int", "(", "args", ".", "features", "[", "10", ":", "]", ")", "\n", "", "else", ":", "\n", "        ", "views", "=", "36", "\n", "\n", "", "args", ".", "views", "=", "views", "\n", "\n", "tsv_fieldnames", "=", "[", "'scanId'", ",", "'viewpointId'", ",", "'image_w'", ",", "'image_h'", ",", "'vfov'", ",", "'features'", "]", "\n", "\n", "if", "not", "test_only", ":", "\n", "        ", "features", "=", "{", "}", "\n", "with", "open", "(", "feature_store", ",", "\"r\"", ")", "as", "tsv_in_file", ":", "# Open the tsv file.", "\n", "            ", "reader", "=", "csv", ".", "DictReader", "(", "tsv_in_file", ",", "delimiter", "=", "'\\t'", ",", "fieldnames", "=", "tsv_fieldnames", ")", "\n", "for", "item", "in", "reader", ":", "\n", "                ", "long_id", "=", "item", "[", "'scanId'", "]", "+", "\"_\"", "+", "item", "[", "'viewpointId'", "]", "\n", "features", "[", "long_id", "]", "=", "np", ".", "frombuffer", "(", "base64", ".", "decodestring", "(", "item", "[", "'features'", "]", ".", "encode", "(", "'ascii'", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "(", "views", ",", "-", "1", ")", ")", "# Feature of long_id is (36, 2048)", "\n", "", "", "", "else", ":", "\n", "        ", "features", "=", "None", "\n", "\n", "", "print", "(", "\"Finish Loading the image feature from %s in %0.4f seconds\"", "%", "(", "feature_store", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.read_candidates": [[282, 321], ["print", "time.time", "collections.defaultdict", "print", "dict", "open", "csv.DictReader", "sum", "list", "candidates[].append", "len", "len", "float", "float", "int", "numpy.frombuffer", "dict.values", "time.time", "int", "base64.decodestring", "item[].encode"], "function", ["None"], ["", "def", "read_candidates", "(", "candidates_store", ")", ":", "\n", "    ", "import", "csv", "\n", "import", "base64", "\n", "from", "collections", "import", "defaultdict", "\n", "print", "(", "\"Start loading the candidate feature\"", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "TSV_FIELDNAMES", "=", "[", "'scanId'", ",", "'viewpointId'", ",", "'heading'", ",", "'elevation'", ",", "'next'", ",", "'pointId'", ",", "'idx'", ",", "'feature'", "]", "\n", "candidates", "=", "defaultdict", "(", "lambda", ":", "list", "(", ")", ")", "\n", "items", "=", "0", "\n", "with", "open", "(", "candidates_store", ",", "\"r\"", ")", "as", "tsv_in_file", ":", "# Open the tsv file.", "\n", "        ", "reader", "=", "csv", ".", "DictReader", "(", "tsv_in_file", ",", "delimiter", "=", "'\\t'", ",", "fieldnames", "=", "TSV_FIELDNAMES", ")", "\n", "for", "item", "in", "reader", ":", "\n", "            ", "long_id", "=", "item", "[", "'scanId'", "]", "+", "\"_\"", "+", "item", "[", "'viewpointId'", "]", "\n", "candidates", "[", "long_id", "]", ".", "append", "(", "\n", "{", "'heading'", ":", "float", "(", "item", "[", "'heading'", "]", ")", ",", "\n", "'elevation'", ":", "float", "(", "item", "[", "'elevation'", "]", ")", ",", "\n", "'scanId'", ":", "item", "[", "'scanId'", "]", ",", "\n", "'viewpointId'", ":", "item", "[", "'next'", "]", ",", "\n", "'pointId'", ":", "int", "(", "item", "[", "'pointId'", "]", ")", ",", "\n", "'idx'", ":", "int", "(", "item", "[", "'idx'", "]", ")", "+", "1", ",", "# Because a bug in the precompute code, here +1 is important", "\n", "'feature'", ":", "np", ".", "frombuffer", "(", "\n", "base64", ".", "decodestring", "(", "item", "[", "'feature'", "]", ".", "encode", "(", "'ascii'", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "}", "\n", ")", "\n", "items", "+=", "1", "\n", "\n", "", "", "for", "long_id", "in", "candidates", ":", "\n", "        ", "assert", "(", "len", "(", "candidates", "[", "long_id", "]", ")", ")", "!=", "0", "\n", "\n", "", "assert", "sum", "(", "len", "(", "candidate", ")", "for", "candidate", "in", "candidates", ".", "values", "(", ")", ")", "==", "items", "\n", "\n", "# candidate = candidates[long_id]", "\n", "# print(candidate)", "\n", "print", "(", "\"Finish Loading the candidates from %s in %0.4f seconds\"", "%", "(", "candidates_store", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "candidates", "=", "dict", "(", "candidates", ")", "\n", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.add_exploration": [[322, 328], ["json.load", "open"], "function", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load"], ["", "def", "add_exploration", "(", "paths", ")", ":", "\n", "    ", "explore", "=", "json", ".", "load", "(", "open", "(", "\"data/exploration.json\"", ",", "'r'", ")", ")", "\n", "inst2explore", "=", "{", "path", "[", "'instr_id'", "]", ":", "path", "[", "'trajectory'", "]", "for", "path", "in", "explore", "}", "\n", "for", "path", "in", "paths", ":", "\n", "        ", "path", "[", "'trajectory'", "]", "=", "inst2explore", "[", "path", "[", "'instr_id'", "]", "]", "+", "path", "[", "'trajectory'", "]", "\n", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.angle_feature": [[329, 338], ["numpy.array", "math.sin", "math.cos", "math.sin", "math.cos"], "function", ["None"], ["", "def", "angle_feature", "(", "heading", ",", "elevation", ")", ":", "\n", "\n", "    ", "import", "math", "\n", "# twopi = math.pi * 2", "\n", "# heading = (heading + twopi) % twopi     # From 0 ~ 2pi", "\n", "# It will be the same", "\n", "return", "np", ".", "array", "(", "[", "math", ".", "sin", "(", "heading", ")", ",", "math", ".", "cos", "(", "heading", ")", ",", "\n", "math", ".", "sin", "(", "elevation", ")", ",", "math", ".", "cos", "(", "elevation", ")", "]", "*", "(", "args", ".", "angle_feat_size", "//", "4", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.new_simulator": [[339, 354], ["MatterSim.Simulator", "MatterSim.Simulator.setRenderingEnabled", "MatterSim.Simulator.setCameraResolution", "MatterSim.Simulator.setCameraVFOV", "MatterSim.Simulator.setDiscretizedViewingAngles", "MatterSim.Simulator.init", "math.radians"], "function", ["None"], ["", "def", "new_simulator", "(", ")", ":", "\n", "    ", "import", "MatterSim", "\n", "# Simulator image parameters", "\n", "WIDTH", "=", "640", "\n", "HEIGHT", "=", "480", "\n", "VFOV", "=", "60", "\n", "\n", "sim", "=", "MatterSim", ".", "Simulator", "(", ")", "\n", "sim", ".", "setRenderingEnabled", "(", "False", ")", "\n", "sim", ".", "setCameraResolution", "(", "WIDTH", ",", "HEIGHT", ")", "\n", "sim", ".", "setCameraVFOV", "(", "math", ".", "radians", "(", "VFOV", ")", ")", "\n", "sim", ".", "setDiscretizedViewingAngles", "(", "True", ")", "\n", "sim", ".", "init", "(", ")", "\n", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.get_point_angle_feature": [[355, 375], ["utils.new_simulator", "numpy.empty", "range", "math.radians", "new_simulator.getState", "utils.angle_feature", "new_simulator.newEpisode", "math.radians", "new_simulator.makeAction", "new_simulator.makeAction"], "function", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.new_simulator", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.angle_feature"], ["", "def", "get_point_angle_feature", "(", "baseViewId", "=", "0", ")", ":", "\n", "    ", "sim", "=", "new_simulator", "(", ")", "\n", "\n", "feature", "=", "np", ".", "empty", "(", "(", "36", ",", "args", ".", "angle_feat_size", ")", ",", "np", ".", "float32", ")", "\n", "base_heading", "=", "(", "baseViewId", "%", "12", ")", "*", "math", ".", "radians", "(", "30", ")", "\n", "for", "ix", "in", "range", "(", "36", ")", ":", "\n", "        ", "if", "ix", "==", "0", ":", "\n", "            ", "sim", ".", "newEpisode", "(", "'ZMojNkEp431'", ",", "'2f4d90acd4024c269fb0efe49a8ac540'", ",", "0", ",", "math", ".", "radians", "(", "-", "30", ")", ")", "\n", "", "elif", "ix", "%", "12", "==", "0", ":", "\n", "            ", "sim", ".", "makeAction", "(", "0", ",", "1.0", ",", "1.0", ")", "\n", "", "else", ":", "\n", "            ", "sim", ".", "makeAction", "(", "0", ",", "1.0", ",", "0", ")", "\n", "\n", "", "state", "=", "sim", ".", "getState", "(", ")", "\n", "assert", "state", ".", "viewIndex", "==", "ix", "\n", "\n", "heading", "=", "state", ".", "heading", "-", "base_heading", "\n", "\n", "feature", "[", "ix", ",", ":", "]", "=", "angle_feature", "(", "heading", ",", "state", ".", "elevation", ")", "\n", "", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.get_all_point_angle_feature": [[376, 378], ["utils.get_point_angle_feature", "range"], "function", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.get_point_angle_feature"], ["", "def", "get_all_point_angle_feature", "(", ")", ":", "\n", "    ", "return", "[", "get_point_angle_feature", "(", "baseViewId", ")", "for", "baseViewId", "in", "range", "(", "36", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.add_idx": [[379, 382], ["utils.Tokenizer.split_sentence", "str", "enumerate"], "function", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.split_sentence"], ["", "def", "add_idx", "(", "inst", ")", ":", "\n", "    ", "toks", "=", "Tokenizer", ".", "split_sentence", "(", "inst", ")", "\n", "return", "\" \"", ".", "join", "(", "[", "str", "(", "idx", ")", "+", "tok", "for", "idx", ",", "tok", "in", "enumerate", "(", "toks", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.stop_words_location": [[432, 441], ["utils.Tokenizer.split_sentence", "numpy.ones", "sws.append", "len", "enumerate", "len", "len", "len", "zip"], "function", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.split_sentence"], ["def", "stop_words_location", "(", "inst", ",", "mask", "=", "False", ")", ":", "\n", "    ", "toks", "=", "Tokenizer", ".", "split_sentence", "(", "inst", ")", "\n", "sws", "=", "[", "i", "for", "i", ",", "tok", "in", "enumerate", "(", "toks", ")", "if", "tok", "in", "stop_word_list", "]", "# The index of the stop words", "\n", "if", "len", "(", "sws", ")", "==", "0", "or", "sws", "[", "-", "1", "]", "!=", "(", "len", "(", "toks", ")", "-", "1", ")", ":", "# Add the index of the last token", "\n", "        ", "sws", ".", "append", "(", "len", "(", "toks", ")", "-", "1", ")", "\n", "", "sws", "=", "[", "x", "for", "x", ",", "y", "in", "zip", "(", "sws", "[", ":", "-", "1", "]", ",", "sws", "[", "1", ":", "]", ")", "if", "x", "+", "1", "!=", "y", "]", "+", "[", "sws", "[", "-", "1", "]", "]", "# Filter the adjacent stop word", "\n", "sws_mask", "=", "np", ".", "ones", "(", "len", "(", "toks", ")", ",", "np", ".", "int32", ")", "# Create the mask", "\n", "sws_mask", "[", "sws", "]", "=", "0", "\n", "return", "sws_mask", "if", "mask", "else", "sws", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.get_segments": [[442, 449], ["utils.Tokenizer.split_sentence", "list", "filter", "enumerate", "len", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.split_sentence"], ["", "def", "get_segments", "(", "inst", ",", "mask", "=", "False", ")", ":", "\n", "    ", "toks", "=", "Tokenizer", ".", "split_sentence", "(", "inst", ")", "\n", "sws", "=", "[", "i", "for", "i", ",", "tok", "in", "enumerate", "(", "toks", ")", "if", "tok", "in", "stop_word_list", "]", "# The index of the stop words", "\n", "sws", "=", "[", "-", "1", "]", "+", "sws", "+", "[", "len", "(", "toks", ")", "]", "# Add the <start> and <end> positions", "\n", "segments", "=", "[", "toks", "[", "sws", "[", "i", "]", "+", "1", ":", "sws", "[", "i", "+", "1", "]", "]", "for", "i", "in", "range", "(", "len", "(", "sws", ")", "-", "1", ")", "]", "# Slice the segments from the tokens", "\n", "segments", "=", "list", "(", "filter", "(", "lambda", "x", ":", "len", "(", "x", ")", ">", "0", ",", "segments", ")", ")", "# remove the consecutive stop words", "\n", "return", "segments", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.clever_pad_sequence": [[450, 469], ["sequences[].size", "max", "enumerate", "sequences[].data.new().fill_", "tensor.size", "seq.size", "len", "len", "sequences[].data.new"], "function", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.size", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.size", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.size"], ["", "def", "clever_pad_sequence", "(", "sequences", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", ":", "\n", "    ", "max_size", "=", "sequences", "[", "0", "]", ".", "size", "(", ")", "\n", "max_len", ",", "trailing_dims", "=", "max_size", "[", "0", "]", ",", "max_size", "[", "1", ":", "]", "\n", "max_len", "=", "max", "(", "seq", ".", "size", "(", ")", "[", "0", "]", "for", "seq", "in", "sequences", ")", "\n", "if", "batch_first", ":", "\n", "        ", "out_dims", "=", "(", "len", "(", "sequences", ")", ",", "max_len", ")", "+", "trailing_dims", "\n", "", "else", ":", "\n", "        ", "out_dims", "=", "(", "max_len", ",", "len", "(", "sequences", ")", ")", "+", "trailing_dims", "\n", "", "if", "padding_value", "is", "not", "None", ":", "\n", "        ", "out_tensor", "=", "sequences", "[", "0", "]", ".", "data", ".", "new", "(", "*", "out_dims", ")", ".", "fill_", "(", "padding_value", ")", "\n", "", "for", "i", ",", "tensor", "in", "enumerate", "(", "sequences", ")", ":", "\n", "        ", "length", "=", "tensor", ".", "size", "(", "0", ")", "\n", "# use index notation to prevent duplicate references to the tensor", "\n", "if", "batch_first", ":", "\n", "            ", "out_tensor", "[", "i", ",", ":", "length", ",", "...", "]", "=", "tensor", "\n", "", "else", ":", "\n", "            ", "out_tensor", "[", ":", "length", ",", "i", ",", "...", "]", "=", "tensor", "\n", "\n", "", "", "return", "out_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.length2mask": [[471, 477], ["len", "int", "max", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze", "torch.LongTensor", "torch.arange"], "function", ["None"], ["def", "length2mask", "(", "length", ",", "size", "=", "None", ")", ":", "\n", "    ", "batch_size", "=", "len", "(", "length", ")", "\n", "size", "=", "int", "(", "max", "(", "length", ")", ")", "if", "size", "is", "None", "else", "size", "\n", "mask", "=", "(", "torch", ".", "arange", "(", "size", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ")", "\n", ">", "(", "torch", ".", "LongTensor", "(", "length", ")", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ".", "cuda", "(", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.average_length": [[478, 485], ["length.append", "sum", "len", "len"], "function", ["None"], ["", "def", "average_length", "(", "path2inst", ")", ":", "\n", "    ", "length", "=", "[", "]", "\n", "\n", "for", "name", "in", "path2inst", ":", "\n", "        ", "datum", "=", "path2inst", "[", "name", "]", "\n", "length", ".", "append", "(", "len", "(", "datum", ")", ")", "\n", "", "return", "sum", "(", "length", ")", "/", "len", "(", "length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.tile_batch": [[486, 490], ["tensor.unsqueeze().expand().contiguous().view.size", "tensor.unsqueeze().expand().contiguous().view.unsqueeze().expand().contiguous().view", "tensor.unsqueeze().expand().contiguous().view.unsqueeze().expand().contiguous", "tensor.unsqueeze().expand().contiguous().view.unsqueeze().expand", "tensor.unsqueeze().expand().contiguous().view.unsqueeze", "len"], "function", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.size"], ["", "def", "tile_batch", "(", "tensor", ",", "multiplier", ")", ":", "\n", "    ", "_", ",", "*", "s", "=", "tensor", ".", "size", "(", ")", "\n", "tensor", "=", "tensor", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "multiplier", ",", "*", "(", "-", "1", ",", ")", "*", "len", "(", "s", ")", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "*", "s", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.viewpoint_drop_mask": [[491, 496], ["torch.random.manual_seed", "drop_func", "hash", "torch.ones().cuda", "torch.ones"], "function", ["None"], ["", "def", "viewpoint_drop_mask", "(", "viewpoint", ",", "seed", "=", "None", ",", "drop_func", "=", "None", ")", ":", "\n", "    ", "local_seed", "=", "hash", "(", "viewpoint", ")", "^", "seed", "\n", "torch", ".", "random", ".", "manual_seed", "(", "local_seed", ")", "\n", "drop_mask", "=", "drop_func", "(", "torch", ".", "ones", "(", "2048", ")", ".", "cuda", "(", ")", ")", "\n", "return", "drop_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.print_progress": [[549, 570], ["str_format.format", "int", "sys.stdout.flush", "round", "sys.stdout.write", "sys.stdout.write", "str", "float", "float"], "function", ["None"], ["", "", "", "def", "print_progress", "(", "iteration", ",", "total", ",", "prefix", "=", "''", ",", "suffix", "=", "''", ",", "decimals", "=", "1", ",", "bar_length", "=", "100", ")", ":", "\n", "    ", "\"\"\"\n    Call in a loop to create terminal progress bar\n    @params:\n        iteration   - Required  : current iteration (Int)\n        total       - Required  : total iterations (Int)\n        prefix      - Optional  : prefix string (Str)\n        suffix      - Optional  : suffix string (Str)\n        decimals    - Optional  : positive number of decimals in percent complete (Int)\n        bar_length  - Optional  : character length of bar (Int)\n    \"\"\"", "\n", "str_format", "=", "\"{0:.\"", "+", "str", "(", "decimals", ")", "+", "\"f}\"", "\n", "percents", "=", "str_format", ".", "format", "(", "100", "*", "(", "iteration", "/", "float", "(", "total", ")", ")", ")", "\n", "filled_length", "=", "int", "(", "round", "(", "bar_length", "*", "iteration", "/", "float", "(", "total", ")", ")", ")", "\n", "bar", "=", "'\u2588'", "*", "filled_length", "+", "'-'", "*", "(", "bar_length", "-", "filled_length", ")", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "'\\r%s |%s| %s%s %s'", "%", "(", "prefix", ",", "bar", ",", "percents", ",", "'%'", ",", "suffix", ")", ")", ",", "\n", "\n", "if", "iteration", "==", "total", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.ndtw_initialize": [[571, 585], ["open", "json.load", "all_scan_ids.append", "utils.ndtw_graphload", "utils.DTW"], "function", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.ndtw_graphload"], ["", "def", "ndtw_initialize", "(", ")", ":", "\n", "    ", "ndtw_criterion", "=", "{", "}", "\n", "scan_gts_dir", "=", "'data/id_paths.json'", "\n", "with", "open", "(", "scan_gts_dir", ")", "as", "f_", ":", "\n", "        ", "scan_gts", "=", "json", ".", "load", "(", "f_", ")", "\n", "", "all_scan_ids", "=", "[", "]", "\n", "for", "key", "in", "scan_gts", ":", "\n", "        ", "path_scan_id", "=", "scan_gts", "[", "key", "]", "[", "0", "]", "\n", "# print('path_scan_id', path_scan_id)", "\n", "if", "path_scan_id", "not", "in", "all_scan_ids", ":", "\n", "            ", "all_scan_ids", ".", "append", "(", "path_scan_id", ")", "\n", "ndtw_graph", "=", "ndtw_graphload", "(", "path_scan_id", ")", "\n", "ndtw_criterion", "[", "path_scan_id", "]", "=", "DTW", "(", "ndtw_graph", ")", "\n", "", "", "return", "ndtw_criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.ndtw_graphload": [[586, 618], ["networkx.from_numpy_matrix", "networkx.relabel.relabel_nodes", "networkx.set_node_attributes", "networkx.set_node_attributes", "networkx.set_edge_attributes", "networkx.set_edge_attributes", "open", "json.load", "numpy.array", "numpy.array", "numpy.array", "dict", "numpy.linalg.norm", "numpy.linalg.norm", "enumerate", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.agent.Seq2SeqAgent.load"], ["", "def", "ndtw_graphload", "(", "scan", ")", ":", "\n", "    ", "\"\"\"Loads a networkx graph for a given scan.\n    Args:\n    connections_file: A string with the path to the .json file with the\n      connectivity information.\n    Returns:\n    A networkx graph.\n    \"\"\"", "\n", "connections_file", "=", "'connectivity/{}_connectivity.json'", ".", "format", "(", "scan", ")", "\n", "with", "open", "(", "connections_file", ")", "as", "f", ":", "\n", "        ", "lines", "=", "json", ".", "load", "(", "f", ")", "\n", "nodes", "=", "np", ".", "array", "(", "[", "x", "[", "'image_id'", "]", "for", "x", "in", "lines", "]", ")", "\n", "matrix", "=", "np", ".", "array", "(", "[", "x", "[", "'unobstructed'", "]", "for", "x", "in", "lines", "]", ")", "\n", "mask", "=", "np", ".", "array", "(", "[", "x", "[", "'included'", "]", "for", "x", "in", "lines", "]", ")", "\n", "\n", "matrix", "=", "matrix", "[", "mask", "]", "[", ":", ",", "mask", "]", "\n", "nodes", "=", "nodes", "[", "mask", "]", "\n", "\n", "pos2d", "=", "{", "x", "[", "'image_id'", "]", ":", "np", ".", "array", "(", "x", "[", "'pose'", "]", ")", "[", "[", "3", ",", "7", "]", "]", "for", "x", "in", "lines", "}", "\n", "pos3d", "=", "{", "x", "[", "'image_id'", "]", ":", "np", ".", "array", "(", "x", "[", "'pose'", "]", ")", "[", "[", "3", ",", "7", ",", "11", "]", "]", "for", "x", "in", "lines", "}", "\n", "\n", "", "graph", "=", "nx", ".", "from_numpy_matrix", "(", "matrix", ")", "\n", "graph", "=", "nx", ".", "relabel", ".", "relabel_nodes", "(", "graph", ",", "dict", "(", "enumerate", "(", "nodes", ")", ")", ")", "\n", "nx", ".", "set_node_attributes", "(", "graph", ",", "pos2d", ",", "'pos2d'", ")", "\n", "nx", ".", "set_node_attributes", "(", "graph", ",", "pos3d", ",", "'pos3d'", ")", "\n", "\n", "weight2d", "=", "{", "(", "u", ",", "v", ")", ":", "norm", "(", "pos2d", "[", "u", "]", "-", "pos2d", "[", "v", "]", ")", "for", "u", ",", "v", "in", "graph", ".", "edges", "}", "\n", "weight3d", "=", "{", "(", "u", ",", "v", ")", ":", "norm", "(", "pos3d", "[", "u", "]", "-", "pos3d", "[", "v", "]", ")", "for", "u", ",", "v", "in", "graph", ".", "edges", "}", "\n", "nx", ".", "set_edge_attributes", "(", "graph", ",", "weight2d", ",", "'weight2d'", ")", "\n", "nx", ".", "set_edge_attributes", "(", "graph", ",", "weight3d", ",", "'weight3d'", ")", "\n", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.EnvBatch.__init__": [[27, 57], ["range", "print", "MatterSim.Simulator", "MatterSim.Simulator.setRenderingEnabled", "MatterSim.Simulator.setDiscretizedViewingAngles", "MatterSim.Simulator.setCameraResolution", "MatterSim.Simulator.setCameraVFOV", "MatterSim.Simulator.init", "env.EnvBatch.sims.append", "type", "print", "math.radians", "next", "iter", "env.EnvBatch.features.values"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "feature_store", "=", "None", ",", "batch_size", "=", "100", ")", ":", "\n", "        ", "\"\"\"\n        1. Load pretrained image feature\n        2. Init the Simulator.\n        :param feature_store: The name of file stored the feature.\n        :param batch_size:  Used to create the simulator list.\n        \"\"\"", "\n", "if", "feature_store", ":", "\n", "            ", "if", "type", "(", "feature_store", ")", "is", "dict", ":", "# A silly way to avoid multiple reading", "\n", "                ", "self", ".", "features", "=", "feature_store", "\n", "self", ".", "image_w", "=", "640", "\n", "self", ".", "image_h", "=", "480", "\n", "self", ".", "vfov", "=", "60", "\n", "self", ".", "feature_size", "=", "next", "(", "iter", "(", "self", ".", "features", ".", "values", "(", ")", ")", ")", ".", "shape", "[", "-", "1", "]", "\n", "print", "(", "'The feature size is %d'", "%", "self", ".", "feature_size", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'    Image features not provided - in testing mode'", ")", "\n", "self", ".", "features", "=", "None", "\n", "self", ".", "image_w", "=", "640", "\n", "self", ".", "image_h", "=", "480", "\n", "self", ".", "vfov", "=", "60", "\n", "", "self", ".", "sims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "sim", "=", "MatterSim", ".", "Simulator", "(", ")", "\n", "sim", ".", "setRenderingEnabled", "(", "False", ")", "\n", "sim", ".", "setDiscretizedViewingAngles", "(", "True", ")", "# Set increment/decrement to 30 degree. (otherwise by radians)", "\n", "sim", ".", "setCameraResolution", "(", "self", ".", "image_w", ",", "self", ".", "image_h", ")", "\n", "sim", ".", "setCameraVFOV", "(", "math", ".", "radians", "(", "self", ".", "vfov", ")", ")", "\n", "sim", ".", "init", "(", ")", "\n", "self", ".", "sims", ".", "append", "(", "sim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.EnvBatch._make_id": [[58, 60], ["None"], "methods", ["None"], ["", "", "def", "_make_id", "(", "self", ",", "scanId", ",", "viewpointId", ")", ":", "\n", "        ", "return", "scanId", "+", "'_'", "+", "viewpointId", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.EnvBatch.newEpisodes": [[61, 64], ["enumerate", "zip", "env.EnvBatch.sims[].newEpisode"], "methods", ["None"], ["", "def", "newEpisodes", "(", "self", ",", "scanIds", ",", "viewpointIds", ",", "headings", ")", ":", "\n", "        ", "for", "i", ",", "(", "scanId", ",", "viewpointId", ",", "heading", ")", "in", "enumerate", "(", "zip", "(", "scanIds", ",", "viewpointIds", ",", "headings", ")", ")", ":", "\n", "            ", "self", ".", "sims", "[", "i", "]", ".", "newEpisode", "(", "scanId", ",", "viewpointId", ",", "heading", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.EnvBatch.getStates": [[65, 83], ["enumerate", "sim.getState", "env.EnvBatch._make_id", "feature_states.append", "feature_states.append"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.EnvBatch._make_id"], ["", "", "def", "getStates", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get list of states augmented with precomputed image features. rgb field will be empty.\n        Agent's current view [0-35] (set only when viewing angles are discretized)\n            [0-11] looking down, [12-23] looking at horizon, [24-35] looking up\n        :return: [ ((30, 2048), sim_state) ] * batch_size\n        \"\"\"", "\n", "feature_states", "=", "[", "]", "\n", "for", "i", ",", "sim", "in", "enumerate", "(", "self", ".", "sims", ")", ":", "\n", "            ", "state", "=", "sim", ".", "getState", "(", ")", "\n", "\n", "long_id", "=", "self", ".", "_make_id", "(", "state", ".", "scanId", ",", "state", ".", "location", ".", "viewpointId", ")", "\n", "if", "self", ".", "features", ":", "\n", "                ", "feature", "=", "self", ".", "features", "[", "long_id", "]", "\n", "feature_states", ".", "append", "(", "(", "feature", ",", "state", ")", ")", "\n", "", "else", ":", "\n", "                ", "feature_states", ".", "append", "(", "(", "None", ",", "state", ")", ")", "\n", "", "", "return", "feature_states", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.EnvBatch.makeActions": [[84, 89], ["enumerate", "env.EnvBatch.sims[].makeAction"], "methods", ["None"], ["", "def", "makeActions", "(", "self", ",", "actions", ")", ":", "\n", "        ", "''' Take an action using the full state dependent action interface (with batched input).\n            Every action element should be an (index, heading, elevation) tuple. '''", "\n", "for", "i", ",", "(", "index", ",", "heading", ",", "elevation", ")", "in", "enumerate", "(", "actions", ")", ":", "\n", "            ", "self", ".", "sims", "[", "i", "]", ".", "makeAction", "(", "index", ",", "heading", ",", "elevation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.__init__": [[94, 161], ["env.EnvBatch", "set", "random.seed", "random.shuffle", "env.R2RBatch._load_nav_graphs", "utils.get_all_point_angle_feature", "utils.new_simulator", "print", "enumerate", "utils.load_datasets", "enumerate", "len", "len", "dict", "env.R2RBatch.data.append", "scans.append", "dict", "tokenizer.tokenize", "utils.pad_instr_tokens", "tokenizer.convert_tokens_to_ids", "env.R2RBatch.data.append", "scans.append"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch._load_nav_graphs", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.get_all_point_angle_feature", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.new_simulator", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.load_datasets", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.pad_instr_tokens"], ["def", "__init__", "(", "self", ",", "feature_store", ",", "batch_size", "=", "100", ",", "seed", "=", "10", ",", "splits", "=", "[", "'train'", "]", ",", "tokenizer", "=", "None", ",", "\n", "name", "=", "None", ")", ":", "\n", "        ", "self", ".", "env", "=", "EnvBatch", "(", "feature_store", "=", "feature_store", ",", "batch_size", "=", "batch_size", ")", "\n", "if", "feature_store", ":", "\n", "            ", "self", ".", "feature_size", "=", "self", ".", "env", ".", "feature_size", "\n", "", "else", ":", "\n", "            ", "self", ".", "feature_size", "=", "2048", "\n", "", "self", ".", "data", "=", "[", "]", "\n", "if", "tokenizer", ":", "\n", "            ", "self", ".", "tok", "=", "tokenizer", "\n", "", "scans", "=", "[", "]", "\n", "for", "split", "in", "splits", ":", "\n", "            ", "for", "i_item", ",", "item", "in", "enumerate", "(", "load_datasets", "(", "[", "split", "]", ")", ")", ":", "\n", "                ", "if", "args", ".", "test_only", "and", "i_item", "==", "64", ":", "\n", "                    ", "break", "\n", "", "if", "\"/\"", "in", "split", ":", "\n", "                    ", "try", ":", "\n", "                        ", "new_item", "=", "dict", "(", "item", ")", "\n", "new_item", "[", "'instr_id'", "]", "=", "item", "[", "'path_id'", "]", "\n", "new_item", "[", "'instructions'", "]", "=", "item", "[", "'instructions'", "]", "[", "0", "]", "\n", "new_item", "[", "'instr_encoding'", "]", "=", "item", "[", "'instr_enc'", "]", "\n", "if", "new_item", "[", "'instr_encoding'", "]", "is", "not", "None", ":", "# Filter the wrong data", "\n", "                            ", "self", ".", "data", ".", "append", "(", "new_item", ")", "\n", "scans", ".", "append", "(", "item", "[", "'scan'", "]", ")", "\n", "", "", "except", ":", "\n", "                        ", "continue", "\n", "", "", "else", ":", "\n", "# Split multiple instructions into separate entries", "\n", "                    ", "for", "j", ",", "instr", "in", "enumerate", "(", "item", "[", "'instructions'", "]", ")", ":", "\n", "                        ", "try", ":", "\n", "                            ", "new_item", "=", "dict", "(", "item", ")", "\n", "new_item", "[", "'instr_id'", "]", "=", "'%s_%d'", "%", "(", "item", "[", "'path_id'", "]", ",", "j", ")", "\n", "new_item", "[", "'instructions'", "]", "=", "instr", "\n", "\n", "''' BERT tokenizer '''", "\n", "instr_tokens", "=", "tokenizer", ".", "tokenize", "(", "instr", ")", "\n", "padded_instr_tokens", ",", "num_words", "=", "pad_instr_tokens", "(", "instr_tokens", ",", "args", ".", "maxInput", ")", "\n", "new_item", "[", "'instr_encoding'", "]", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "padded_instr_tokens", ")", "\n", "\n", "if", "new_item", "[", "'instr_encoding'", "]", "is", "not", "None", ":", "# Filter the wrong data", "\n", "                                ", "self", ".", "data", ".", "append", "(", "new_item", ")", "\n", "scans", ".", "append", "(", "item", "[", "'scan'", "]", ")", "\n", "", "", "except", ":", "\n", "                            ", "continue", "\n", "\n", "", "", "", "", "", "if", "name", "is", "None", ":", "\n", "            ", "self", ".", "name", "=", "splits", "[", "0", "]", "if", "len", "(", "splits", ")", ">", "0", "else", "\"FAKE\"", "\n", "", "else", ":", "\n", "            ", "self", ".", "name", "=", "name", "\n", "\n", "", "self", ".", "scans", "=", "set", "(", "scans", ")", "\n", "self", ".", "splits", "=", "splits", "\n", "self", ".", "seed", "=", "seed", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "data", ")", "\n", "\n", "self", ".", "ix", "=", "0", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "_load_nav_graphs", "(", ")", "\n", "\n", "self", ".", "angle_feature", "=", "utils", ".", "get_all_point_angle_feature", "(", ")", "\n", "self", ".", "sim", "=", "utils", ".", "new_simulator", "(", ")", "\n", "self", ".", "buffered_state_dict", "=", "{", "}", "\n", "\n", "# It means that the fake data is equals to data in the supervised setup", "\n", "self", ".", "fake_data", "=", "self", ".", "data", "\n", "print", "(", "'R2RBatch loaded with %d instructions, using splits: %s'", "%", "(", "len", "(", "self", ".", "data", ")", ",", "\",\"", ".", "join", "(", "splits", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.size": [[162, 164], ["len"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch._load_nav_graphs": [[165, 182], ["print", "utils.load_nav_graphs", "env.R2RBatch.graphs.items", "env.R2RBatch.graphs.items", "dict", "dict", "len", "networkx.all_pairs_dijkstra_path", "networkx.all_pairs_dijkstra_path_length"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.load_nav_graphs"], ["", "def", "_load_nav_graphs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        load graph from self.scan,\n        Store the graph {scan_id: graph} in self.graphs\n        Store the shortest path {scan_id: {view_id_x: {view_id_y: [path]} } } in self.paths\n        Store the distances in self.distances. (Structure see above)\n        Load connectivity graph for each scan, useful for reasoning about shortest paths\n        :return: None\n        \"\"\"", "\n", "print", "(", "'Loading navigation graphs for %d scans'", "%", "len", "(", "self", ".", "scans", ")", ")", "\n", "self", ".", "graphs", "=", "load_nav_graphs", "(", "self", ".", "scans", ")", "\n", "self", ".", "paths", "=", "{", "}", "\n", "for", "scan", ",", "G", "in", "self", ".", "graphs", ".", "items", "(", ")", ":", "# compute all shortest paths", "\n", "            ", "self", ".", "paths", "[", "scan", "]", "=", "dict", "(", "nx", ".", "all_pairs_dijkstra_path", "(", "G", ")", ")", "\n", "", "self", ".", "distances", "=", "{", "}", "\n", "for", "scan", ",", "G", "in", "self", ".", "graphs", ".", "items", "(", ")", ":", "# compute all shortest paths", "\n", "            ", "self", ".", "distances", "[", "scan", "]", "=", "dict", "(", "nx", ".", "all_pairs_dijkstra_path_length", "(", "G", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch._next_minibatch": [[183, 206], ["len", "random.shuffle", "len", "len", "random.shuffle", "len"], "methods", ["None"], ["", "", "def", "_next_minibatch", "(", "self", ",", "tile_one", "=", "False", ",", "batch_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Store the minibach in 'self.batch'\n        :param tile_one: Tile the one into batch_size\n        :return: None\n        \"\"\"", "\n", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "self", ".", "batch_size", "\n", "", "if", "tile_one", ":", "\n", "            ", "batch", "=", "[", "self", ".", "data", "[", "self", ".", "ix", "]", "]", "*", "batch_size", "\n", "self", ".", "ix", "+=", "1", "\n", "if", "self", ".", "ix", ">=", "len", "(", "self", ".", "data", ")", ":", "\n", "                ", "random", ".", "shuffle", "(", "self", ".", "data", ")", "\n", "self", ".", "ix", "-=", "len", "(", "self", ".", "data", ")", "\n", "", "", "else", ":", "\n", "            ", "batch", "=", "self", ".", "data", "[", "self", ".", "ix", ":", "self", ".", "ix", "+", "batch_size", "]", "\n", "if", "len", "(", "batch", ")", "<", "batch_size", ":", "\n", "                ", "random", ".", "shuffle", "(", "self", ".", "data", ")", "\n", "self", ".", "ix", "=", "batch_size", "-", "len", "(", "batch", ")", "\n", "batch", "+=", "self", ".", "data", "[", ":", "self", ".", "ix", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "ix", "+=", "batch_size", "\n", "", "", "self", ".", "batch", "=", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.reset_epoch": [[207, 213], ["random.shuffle"], "methods", ["None"], ["", "def", "reset_epoch", "(", "self", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "''' Reset the data index to beginning of epoch. Primarily for testing.\n            You must still call reset() for a new episode. '''", "\n", "if", "shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "data", ")", "\n", "", "self", ".", "ix", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch._shortest_path_action": [[214, 221], ["None"], "methods", ["None"], ["", "def", "_shortest_path_action", "(", "self", ",", "state", ",", "goalViewpointId", ")", ":", "\n", "        ", "''' Determine next action on the shortest path to goal, for supervised training. '''", "\n", "if", "state", ".", "location", ".", "viewpointId", "==", "goalViewpointId", ":", "\n", "            ", "return", "goalViewpointId", "# Just stop here", "\n", "", "path", "=", "self", ".", "paths", "[", "state", ".", "scanId", "]", "[", "state", ".", "location", ".", "viewpointId", "]", "[", "goalViewpointId", "]", "\n", "nextViewpointId", "=", "path", "[", "1", "]", "\n", "return", "nextViewpointId", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.make_candidate": [[222, 293], ["numpy.sqrt", "math.radians", "range", "list", "env.R2RBatch.sim.getState", "enumerate", "adj_dict.values", "c.copy", "utils.angle_feature", "numpy.concatenate", "c.copy.pop", "candidate_new.append", "env.R2RBatch.sim.newEpisode", "env.R2RBatch.make_candidate._loc_distance"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.angle_feature"], ["", "def", "make_candidate", "(", "self", ",", "feature", ",", "scanId", ",", "viewpointId", ",", "viewId", ")", ":", "\n", "        ", "def", "_loc_distance", "(", "loc", ")", ":", "\n", "            ", "return", "np", ".", "sqrt", "(", "loc", ".", "rel_heading", "**", "2", "+", "loc", ".", "rel_elevation", "**", "2", ")", "\n", "", "base_heading", "=", "(", "viewId", "%", "12", ")", "*", "math", ".", "radians", "(", "30", ")", "\n", "adj_dict", "=", "{", "}", "\n", "long_id", "=", "\"%s_%s\"", "%", "(", "scanId", ",", "viewpointId", ")", "\n", "if", "long_id", "not", "in", "self", ".", "buffered_state_dict", ":", "\n", "            ", "for", "ix", "in", "range", "(", "36", ")", ":", "\n", "                ", "if", "ix", "==", "0", ":", "\n", "                    ", "self", ".", "sim", ".", "newEpisode", "(", "scanId", ",", "viewpointId", ",", "0", ",", "math", ".", "radians", "(", "-", "30", ")", ")", "\n", "", "elif", "ix", "%", "12", "==", "0", ":", "\n", "                    ", "self", ".", "sim", ".", "makeAction", "(", "0", ",", "1.0", ",", "1.0", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "sim", ".", "makeAction", "(", "0", ",", "1.0", ",", "0", ")", "\n", "\n", "", "state", "=", "self", ".", "sim", ".", "getState", "(", ")", "\n", "assert", "state", ".", "viewIndex", "==", "ix", "\n", "\n", "# Heading and elevation for the viewpoint center", "\n", "heading", "=", "state", ".", "heading", "-", "base_heading", "\n", "elevation", "=", "state", ".", "elevation", "\n", "\n", "visual_feat", "=", "feature", "[", "ix", "]", "\n", "\n", "# get adjacent locations", "\n", "for", "j", ",", "loc", "in", "enumerate", "(", "state", ".", "navigableLocations", "[", "1", ":", "]", ")", ":", "\n", "# if a loc is visible from multiple view, use the closest", "\n", "# view (in angular distance) as its representation", "\n", "                    ", "distance", "=", "_loc_distance", "(", "loc", ")", "\n", "\n", "# Heading and elevation for for the loc", "\n", "loc_heading", "=", "heading", "+", "loc", ".", "rel_heading", "\n", "loc_elevation", "=", "elevation", "+", "loc", ".", "rel_elevation", "\n", "angle_feat", "=", "utils", ".", "angle_feature", "(", "loc_heading", ",", "loc_elevation", ")", "\n", "if", "(", "loc", ".", "viewpointId", "not", "in", "adj_dict", "or", "\n", "distance", "<", "adj_dict", "[", "loc", ".", "viewpointId", "]", "[", "'distance'", "]", ")", ":", "\n", "                        ", "adj_dict", "[", "loc", ".", "viewpointId", "]", "=", "{", "\n", "'heading'", ":", "loc_heading", ",", "\n", "'elevation'", ":", "loc_elevation", ",", "\n", "\"normalized_heading\"", ":", "state", ".", "heading", "+", "loc", ".", "rel_heading", ",", "\n", "'scanId'", ":", "scanId", ",", "\n", "'viewpointId'", ":", "loc", ".", "viewpointId", ",", "# Next viewpoint id", "\n", "'pointId'", ":", "ix", ",", "\n", "'distance'", ":", "distance", ",", "\n", "'idx'", ":", "j", "+", "1", ",", "\n", "'feature'", ":", "np", ".", "concatenate", "(", "(", "visual_feat", ",", "angle_feat", ")", ",", "-", "1", ")", "\n", "}", "\n", "", "", "", "candidate", "=", "list", "(", "adj_dict", ".", "values", "(", ")", ")", "\n", "self", ".", "buffered_state_dict", "[", "long_id", "]", "=", "[", "\n", "{", "key", ":", "c", "[", "key", "]", "\n", "for", "key", "in", "\n", "[", "'normalized_heading'", ",", "'elevation'", ",", "'scanId'", ",", "'viewpointId'", ",", "\n", "'pointId'", ",", "'idx'", "]", "}", "\n", "for", "c", "in", "candidate", "\n", "]", "\n", "return", "candidate", "\n", "", "else", ":", "\n", "            ", "candidate", "=", "self", ".", "buffered_state_dict", "[", "long_id", "]", "\n", "candidate_new", "=", "[", "]", "\n", "for", "c", "in", "candidate", ":", "\n", "                ", "c_new", "=", "c", ".", "copy", "(", ")", "\n", "ix", "=", "c_new", "[", "'pointId'", "]", "\n", "normalized_heading", "=", "c_new", "[", "'normalized_heading'", "]", "\n", "visual_feat", "=", "feature", "[", "ix", "]", "\n", "loc_heading", "=", "normalized_heading", "-", "base_heading", "\n", "c_new", "[", "'heading'", "]", "=", "loc_heading", "\n", "angle_feat", "=", "utils", ".", "angle_feature", "(", "c_new", "[", "'heading'", "]", ",", "c_new", "[", "'elevation'", "]", ")", "\n", "c_new", "[", "'feature'", "]", "=", "np", ".", "concatenate", "(", "(", "visual_feat", ",", "angle_feat", ")", ",", "-", "1", ")", "\n", "c_new", ".", "pop", "(", "'normalized_heading'", ")", "\n", "candidate_new", ".", "append", "(", "c_new", ")", "\n", "", "return", "candidate_new", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch._get_obs": [[294, 328], ["enumerate", "env.R2RBatch.env.getStates", "env.R2RBatch.make_candidate", "numpy.concatenate", "obs.append", "numpy.zeros", "env.R2RBatch._shortest_path_action"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.EnvBatch.getStates", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.make_candidate", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch._shortest_path_action"], ["", "", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "obs", "=", "[", "]", "\n", "for", "i", ",", "(", "feature", ",", "state", ")", "in", "enumerate", "(", "self", ".", "env", ".", "getStates", "(", ")", ")", ":", "\n", "            ", "item", "=", "self", ".", "batch", "[", "i", "]", "\n", "base_view_id", "=", "state", ".", "viewIndex", "\n", "\n", "if", "feature", "is", "None", ":", "\n", "                ", "feature", "=", "np", ".", "zeros", "(", "(", "36", ",", "2048", ")", ")", "\n", "\n", "# Full features", "\n", "", "candidate", "=", "self", ".", "make_candidate", "(", "feature", ",", "state", ".", "scanId", ",", "state", ".", "location", ".", "viewpointId", ",", "state", ".", "viewIndex", ")", "\n", "# [visual_feature, angle_feature] for views", "\n", "feature", "=", "np", ".", "concatenate", "(", "(", "feature", ",", "self", ".", "angle_feature", "[", "base_view_id", "]", ")", ",", "-", "1", ")", "\n", "\n", "obs", ".", "append", "(", "{", "\n", "'instr_id'", ":", "item", "[", "'instr_id'", "]", ",", "\n", "'scan'", ":", "state", ".", "scanId", ",", "\n", "'viewpoint'", ":", "state", ".", "location", ".", "viewpointId", ",", "\n", "'viewIndex'", ":", "state", ".", "viewIndex", ",", "\n", "'heading'", ":", "state", ".", "heading", ",", "\n", "'elevation'", ":", "state", ".", "elevation", ",", "\n", "'feature'", ":", "feature", ",", "\n", "'candidate'", ":", "candidate", ",", "\n", "'navigableLocations'", ":", "state", ".", "navigableLocations", ",", "\n", "'instructions'", ":", "item", "[", "'instructions'", "]", ",", "\n", "'teacher'", ":", "self", ".", "_shortest_path_action", "(", "state", ",", "item", "[", "'path'", "]", "[", "-", "1", "]", ")", ",", "\n", "'gt_path'", ":", "item", "[", "'path'", "]", ",", "\n", "'path_id'", ":", "item", "[", "'path_id'", "]", "\n", "}", ")", "\n", "if", "'instr_encoding'", "in", "item", ":", "\n", "                ", "obs", "[", "-", "1", "]", "[", "'instr_encoding'", "]", "=", "item", "[", "'instr_encoding'", "]", "\n", "# A2C reward. The negative distance between the state and the final state", "\n", "", "obs", "[", "-", "1", "]", "[", "'distance'", "]", "=", "self", ".", "distances", "[", "state", ".", "scanId", "]", "[", "state", ".", "location", ".", "viewpointId", "]", "[", "item", "[", "'path'", "]", "[", "-", "1", "]", "]", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.reset": [[329, 344], ["env.R2RBatch.env.newEpisodes", "env.R2RBatch._get_obs", "env.R2RBatch._next_minibatch", "env.R2RBatch._next_minibatch", "len"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.EnvBatch.newEpisodes", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch._get_obs", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch._next_minibatch", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch._next_minibatch"], ["", "def", "reset", "(", "self", ",", "batch", "=", "None", ",", "inject", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "''' Load a new minibatch / episodes. '''", "\n", "if", "batch", "is", "None", ":", "# Allow the user to explicitly define the batch", "\n", "            ", "self", ".", "_next_minibatch", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "if", "inject", ":", "# Inject the batch into the next minibatch", "\n", "                ", "self", ".", "_next_minibatch", "(", "**", "kwargs", ")", "\n", "self", ".", "batch", "[", ":", "len", "(", "batch", ")", "]", "=", "batch", "\n", "", "else", ":", "# Else set the batch to the current batch", "\n", "                ", "self", ".", "batch", "=", "batch", "\n", "", "", "scanIds", "=", "[", "item", "[", "'scan'", "]", "for", "item", "in", "self", ".", "batch", "]", "\n", "viewpointIds", "=", "[", "item", "[", "'path'", "]", "[", "0", "]", "for", "item", "in", "self", ".", "batch", "]", "\n", "headings", "=", "[", "item", "[", "'heading'", "]", "for", "item", "in", "self", ".", "batch", "]", "\n", "self", ".", "env", ".", "newEpisodes", "(", "scanIds", ",", "viewpointIds", ",", "headings", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.step": [[345, 349], ["env.R2RBatch.env.makeActions", "env.R2RBatch._get_obs"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.EnvBatch.makeActions", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch._get_obs"], ["", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "        ", "''' Take action (same interface as makeActions) '''", "\n", "self", ".", "env", ".", "makeActions", "(", "actions", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.get_statistics": [[350, 360], ["len", "len", "len", "env.R2RBatch.tok.split_sentence"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.utils.Tokenizer.split_sentence"], ["", "def", "get_statistics", "(", "self", ")", ":", "\n", "        ", "stats", "=", "{", "}", "\n", "length", "=", "0", "\n", "path", "=", "0", "\n", "for", "datum", "in", "self", ".", "data", ":", "\n", "            ", "length", "+=", "len", "(", "self", ".", "tok", ".", "split_sentence", "(", "datum", "[", "'instructions'", "]", ")", ")", "\n", "path", "+=", "self", ".", "distances", "[", "datum", "[", "'scan'", "]", "]", "[", "datum", "[", "'path'", "]", "[", "0", "]", "]", "[", "datum", "[", "'path'", "]", "[", "-", "1", "]", "]", "\n", "", "stats", "[", "'length'", "]", "=", "length", "/", "len", "(", "self", ".", "data", ")", "\n", "stats", "[", "'path'", "]", "=", "path", "/", "len", "(", "self", ".", "data", ")", "\n", "return", "stats", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_OSCAR.CaptionBertSelfAttention.__init__": [[24, 27], ["transformers.pytorch_transformers.modeling_bert.BertSelfAttention.__init__"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CaptionBertSelfAttention", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_OSCAR.CaptionBertSelfAttention.forward": [[28, 73], ["vlnbert_OSCAR.CaptionBertSelfAttention.transpose_for_scores", "vlnbert_OSCAR.CaptionBertSelfAttention.transpose_for_scores", "vlnbert_OSCAR.CaptionBertSelfAttention.transpose_for_scores", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "vlnbert_OSCAR.CaptionBertSelfAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vlnbert_OSCAR.CaptionBertSelfAttention.query", "vlnbert_OSCAR.CaptionBertSelfAttention.key", "vlnbert_OSCAR.CaptionBertSelfAttention.value", "vlnbert_OSCAR.CaptionBertSelfAttention.query", "vlnbert_OSCAR.CaptionBertSelfAttention.key", "vlnbert_OSCAR.CaptionBertSelfAttention.value", "vlnbert_OSCAR.CaptionBertSelfAttention.transpose", "math.sqrt", "torch.nn.Softmax", "torch.nn.Softmax", "context_layer.view.view.permute", "context_layer.view.view.size", "list", "range"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertOutAttention.transpose_for_scores", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertOutAttention.transpose_for_scores", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertOutAttention.transpose_for_scores", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.size"], ["", "def", "forward", "(", "self", ",", "mode", ",", "hidden_states", ",", "attention_mask", ",", "head_mask", "=", "None", ",", "\n", "history_state", "=", "None", ")", ":", "\n", "        ", "if", "history_state", "is", "not", "None", ":", "\n", "            ", "x_states", "=", "torch", ".", "cat", "(", "[", "history_state", ",", "hidden_states", "]", ",", "dim", "=", "1", ")", "\n", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "x_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "x_states", ")", "\n", "", "else", ":", "\n", "            ", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "", "if", "mode", "==", "'visual'", ":", "\n", "            ", "mixed_query_layer", "=", "mixed_query_layer", "[", ":", ",", "[", "0", "]", "+", "list", "(", "range", "(", "-", "self", ".", "config", ".", "directions", ",", "0", ")", ")", ",", ":", "]", "\n", "\n", "", "''' language feature only provide Keys and Values '''", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "attention_head_size", ")", "\n", "# Apply the attention mask is (precomputed for all layers in BertModel forward() function)", "\n", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attention_probs", "=", "attention_probs", "*", "head_mask", "\n", "\n", "", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "\n", "outputs", "=", "(", "context_layer", ",", "attention_scores", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_OSCAR.CaptionBertAttention.__init__": [[79, 84], ["transformers.pytorch_transformers.modeling_bert.BertAttention.__init__", "vlnbert_OSCAR.CaptionBertSelfAttention", "transformers.pytorch_transformers.modeling_bert.BertSelfOutput"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CaptionBertAttention", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "self", "=", "CaptionBertSelfAttention", "(", "config", ")", "\n", "self", ".", "output", "=", "BertSelfOutput", "(", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_OSCAR.CaptionBertAttention.forward": [[85, 99], ["vlnbert_OSCAR.CaptionBertAttention.self", "vlnbert_OSCAR.CaptionBertAttention.output", "vlnbert_OSCAR.CaptionBertAttention.output", "list", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mode", ",", "input_tensor", ",", "attention_mask", ",", "head_mask", "=", "None", ",", "\n", "history_state", "=", "None", ")", ":", "\n", "        ", "''' transformer processing '''", "\n", "self_outputs", "=", "self", ".", "self", "(", "mode", ",", "input_tensor", ",", "attention_mask", ",", "head_mask", ",", "history_state", ")", "\n", "\n", "''' feed-forward network with residule '''", "\n", "if", "mode", "==", "'visual'", ":", "\n", "            ", "attention_output", "=", "self", ".", "output", "(", "self_outputs", "[", "0", "]", ",", "input_tensor", "[", ":", ",", "[", "0", "]", "+", "list", "(", "range", "(", "-", "self", ".", "config", ".", "directions", ",", "0", ")", ")", ",", ":", "]", ")", "\n", "", "if", "mode", "==", "'language'", ":", "\n", "            ", "attention_output", "=", "self", ".", "output", "(", "self_outputs", "[", "0", "]", ",", "input_tensor", ")", "\n", "\n", "", "outputs", "=", "(", "attention_output", ",", ")", "+", "self_outputs", "[", "1", ":", "]", "# add attentions if we output them", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_OSCAR.CaptionBertLayer.__init__": [[105, 110], ["transformers.pytorch_transformers.modeling_bert.BertLayer.__init__", "vlnbert_OSCAR.CaptionBertAttention", "transformers.pytorch_transformers.modeling_bert.BertIntermediate", "transformers.pytorch_transformers.modeling_bert.BertOutput"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CaptionBertLayer", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "attention", "=", "CaptionBertAttention", "(", "config", ")", "\n", "self", ".", "intermediate", "=", "BertIntermediate", "(", "config", ")", "\n", "self", ".", "output", "=", "BertOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_OSCAR.CaptionBertLayer.forward": [[111, 124], ["vlnbert_OSCAR.CaptionBertLayer.attention", "vlnbert_OSCAR.CaptionBertLayer.intermediate", "vlnbert_OSCAR.CaptionBertLayer.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mode", ",", "hidden_states", ",", "attention_mask", ",", "head_mask", "=", "None", ",", "\n", "history_state", "=", "None", ")", ":", "\n", "\n", "        ", "attention_outputs", "=", "self", ".", "attention", "(", "mode", ",", "hidden_states", ",", "attention_mask", ",", "\n", "head_mask", ",", "history_state", ")", "\n", "\n", "''' feed-forward network with residule '''", "\n", "attention_output", "=", "attention_outputs", "[", "0", "]", "\n", "intermediate_output", "=", "self", ".", "intermediate", "(", "attention_output", ")", "\n", "layer_output", "=", "self", ".", "output", "(", "intermediate_output", ",", "attention_output", ")", "\n", "outputs", "=", "(", "layer_output", ",", ")", "+", "attention_outputs", "[", "1", ":", "]", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_OSCAR.CaptionBertEncoder.__init__": [[130, 137], ["transformers.pytorch_transformers.modeling_bert.BertEncoder.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "vlnbert_OSCAR.CaptionBertLayer", "range"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CaptionBertEncoder", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "# 12 Bert layers", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "CaptionBertLayer", "(", "config", ")", "for", "_", "in", "range", "(", "config", ".", "num_hidden_layers", ")", "]", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_OSCAR.CaptionBertEncoder.forward": [[138, 174], ["enumerate", "layer_module", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "layer_module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mode", ",", "hidden_states", ",", "attention_mask", ",", "head_mask", "=", "None", ",", "\n", "encoder_history_states", "=", "None", ")", ":", "\n", "\n", "        ", "if", "mode", "==", "'visual'", ":", "\n", "            ", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "                ", "history_state", "=", "None", "if", "encoder_history_states", "is", "None", "else", "encoder_history_states", "[", "i", "]", "\n", "\n", "layer_outputs", "=", "layer_module", "(", "mode", ",", "\n", "hidden_states", ",", "attention_mask", ",", "head_mask", "[", "i", "]", ",", "\n", "history_state", ")", "\n", "\n", "concat_layer_outputs", "=", "torch", ".", "cat", "(", "(", "layer_outputs", "[", "0", "]", "[", ":", ",", "0", ":", "1", ",", ":", "]", ",", "hidden_states", "[", ":", ",", "1", ":", "-", "self", ".", "config", ".", "directions", ",", ":", "]", ",", "layer_outputs", "[", "0", "]", "[", ":", ",", "1", ":", "self", ".", "config", ".", "directions", "+", "1", ",", ":", "]", ")", ",", "1", ")", "\n", "hidden_states", "=", "concat_layer_outputs", "\n", "\n", "if", "i", "==", "self", ".", "config", ".", "num_hidden_layers", "-", "1", ":", "\n", "                    ", "state_attention_score", "=", "layer_outputs", "[", "1", "]", "[", ":", ",", ":", ",", "0", ",", ":", "]", "\n", "lang_attention_score", "=", "layer_outputs", "[", "1", "]", "[", ":", ",", ":", ",", "-", "self", ".", "config", ".", "directions", ":", ",", "1", ":", "-", "self", ".", "config", ".", "directions", "]", "\n", "vis_attention_score", "=", "layer_outputs", "[", "1", "]", "[", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n", "", "", "outputs", "=", "(", "hidden_states", ",", "state_attention_score", ",", "lang_attention_score", ",", "vis_attention_score", ")", "\n", "\n", "", "elif", "mode", "==", "'language'", ":", "\n", "            ", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "                ", "history_state", "=", "None", "if", "encoder_history_states", "is", "None", "else", "encoder_history_states", "[", "i", "]", "# default None", "\n", "\n", "layer_outputs", "=", "layer_module", "(", "mode", ",", "\n", "hidden_states", ",", "attention_mask", ",", "head_mask", "[", "i", "]", ",", "\n", "history_state", ")", "\n", "hidden_states", "=", "layer_outputs", "[", "0", "]", "\n", "\n", "if", "i", "==", "self", ".", "config", ".", "num_hidden_layers", "-", "1", ":", "\n", "                    ", "slang_attention_score", "=", "layer_outputs", "[", "1", "]", "\n", "\n", "", "", "outputs", "=", "(", "hidden_states", ",", "slang_attention_score", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_OSCAR.BertImgModel.__init__": [[179, 189], ["transformers.pytorch_transformers.modeling_bert.BertPreTrainedModel.__init__", "transformers.pytorch_transformers.modeling_bert.BertEmbeddings", "vlnbert_OSCAR.CaptionBertEncoder", "transformers.pytorch_transformers.modeling_bert.BertPooler", "logger.info", "vlnbert_OSCAR.BertImgModel.apply"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertImgModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "embeddings", "=", "BertEmbeddings", "(", "config", ")", "\n", "self", ".", "encoder", "=", "CaptionBertEncoder", "(", "config", ")", "\n", "self", ".", "pooler", "=", "BertPooler", "(", "config", ")", "\n", "\n", "self", ".", "img_dim", "=", "config", ".", "img_feature_dim", "\n", "logger", ".", "info", "(", "'BertImgModel Image Dimension: {}'", ".", "format", "(", "self", ".", "img_dim", ")", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_OSCAR.BertImgModel.forward": [[190, 224], ["attention_mask.unsqueeze.to", "vlnbert_OSCAR.BertImgModel.encoder", "vlnbert_OSCAR.BertImgModel.pooler", "attention_mask.dim", "attention_mask.unsqueeze().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attention_mask.dim", "attention_mask.unsqueeze", "vlnbert_OSCAR.BertImgModel.embeddings", "attention_mask.unsqueeze", "next", "vlnbert_OSCAR.BertImgModel.parameters"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mode", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "img_feats", "=", "None", ")", ":", "\n", "\n", "        ", "if", "attention_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "", "elif", "attention_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "num_hidden_layers", "\n", "\n", "if", "mode", "==", "'visual'", ":", "\n", "            ", "language_features", "=", "input_ids", "\n", "concat_embedding_output", "=", "torch", ".", "cat", "(", "(", "language_features", ",", "img_feats", ")", ",", "1", ")", "\n", "", "elif", "mode", "==", "'language'", ":", "\n", "            ", "embedding_output", "=", "self", ".", "embeddings", "(", "input_ids", ",", "position_ids", "=", "position_ids", ",", "\n", "token_type_ids", "=", "token_type_ids", ")", "\n", "concat_embedding_output", "=", "embedding_output", "\n", "\n", "", "''' pass to the Transformer layers '''", "\n", "encoder_outputs", "=", "self", ".", "encoder", "(", "mode", ",", "concat_embedding_output", ",", "\n", "extended_attention_mask", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "sequence_output", "=", "encoder_outputs", "[", "0", "]", "\n", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ")", "# We \"pool\" the model by simply taking the hidden state corresponding to the first token", "\n", "\n", "# add hidden_states and attentions if they are here", "\n", "outputs", "=", "(", "sequence_output", ",", "pooled_output", ",", ")", "+", "encoder_outputs", "[", "1", ":", "]", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_OSCAR.VLNBert.__init__": [[230, 241], ["transformers.pytorch_transformers.modeling_bert.BertPreTrainedModel.__init__", "vlnbert_OSCAR.BertImgModel", "transformers.pytorch_transformers.modeling_bert.BertLayerNorm", "torch.nn.Linear", "torch.nn.Linear", "transformers.pytorch_transformers.modeling_bert.BertLayerNorm", "torch.nn.Dropout", "torch.nn.Dropout", "vlnbert_OSCAR.VLNBert.apply"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "VLNBert", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "bert", "=", "BertImgModel", "(", "config", ")", "\n", "\n", "self", ".", "vis_lang_LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "state_proj", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", "*", "2", ",", "config", ".", "hidden_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "state_LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_OSCAR.VLNBert.forward": [[242, 282], ["vlnbert_OSCAR.VLNBert.bert", "vlnbert_OSCAR.VLNBert.dropout", "language_attentions.mean", "visual_attentions.mean", "vlnbert_OSCAR.VLNBert.vis_lang_LayerNorm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vlnbert_OSCAR.VLNBert.state_proj", "vlnbert_OSCAR.VLNBert.state_LayerNorm", "torch.nn.Softmax", "torch.nn.Softmax", "language_attentions.mean.clone", "torch.nn.Softmax", "torch.nn.Softmax", "visual_attentions.mean.clone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mode", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "img_feats", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "mode", ",", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "img_feats", "=", "img_feats", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "sequence_output", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "if", "mode", "==", "'language'", ":", "\n", "            ", "return", "sequence_output", "\n", "\n", "", "elif", "mode", "==", "'visual'", ":", "\n", "# attention scores with respect to agent's state", "\n", "            ", "language_attentions", "=", "outputs", "[", "2", "]", "[", ":", ",", ":", ",", "1", ":", "-", "self", ".", "config", ".", "directions", "]", "\n", "visual_attentions", "=", "outputs", "[", "2", "]", "[", ":", ",", ":", ",", "-", "self", ".", "config", ".", "directions", ":", "]", "\n", "\n", "language_attention_scores", "=", "language_attentions", ".", "mean", "(", "dim", "=", "1", ")", "# mean over the 12 heads", "\n", "visual_attention_scores", "=", "visual_attentions", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "# weighted_feat", "\n", "language_attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "language_attention_scores", ".", "clone", "(", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "visual_attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "visual_attention_scores", ".", "clone", "(", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "language_seq", "=", "sequence_output", "[", ":", ",", "1", ":", "-", "self", ".", "config", ".", "directions", ",", ":", "]", "\n", "visual_seq", "=", "sequence_output", "[", ":", ",", "-", "self", ".", "config", ".", "directions", ":", ",", ":", "]", "\n", "\n", "# residual weighting, final attention to weight the raw inputs", "\n", "attended_language", "=", "(", "language_attention_probs", "*", "input_ids", "[", ":", ",", "1", ":", ",", ":", "]", ")", ".", "sum", "(", "1", ")", "\n", "attended_visual", "=", "(", "visual_attention_probs", "*", "img_feats", ")", ".", "sum", "(", "1", ")", "\n", "\n", "# update agent's state, unify history, language and vision by elementwise product", "\n", "vis_lang_feat", "=", "self", ".", "vis_lang_LayerNorm", "(", "attended_language", "*", "attended_visual", ")", "\n", "state_output", "=", "torch", ".", "cat", "(", "(", "pooled_output", ",", "vis_lang_feat", ")", ",", "dim", "=", "-", "1", ")", "\n", "state_proj", "=", "self", ".", "state_proj", "(", "state_output", ")", "\n", "state_proj", "=", "self", ".", "state_LayerNorm", "(", "state_proj", ")", "\n", "\n", "return", "state_proj", ",", "visual_attention_scores", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertEmbeddings.__init__": [[47, 57], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "token_type_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "type_vocab_size", ",", "config", ".", "hidden_size", ")", "\n", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load", "\n", "# any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertEmbeddings.forward": [[58, 74], ["input_ids.size", "vlnbert_PREVALENT.BertEmbeddings.word_embeddings", "vlnbert_PREVALENT.BertEmbeddings.position_embeddings", "vlnbert_PREVALENT.BertEmbeddings.token_type_embeddings", "vlnbert_PREVALENT.BertEmbeddings.LayerNorm", "vlnbert_PREVALENT.BertEmbeddings.dropout", "torch.arange", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "torch.zeros_like", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.size"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ")", ":", "\n", "        ", "seq_length", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "\n", "", "words_embeddings", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "token_type_embeddings", "=", "self", ".", "token_type_embeddings", "(", "token_type_ids", ")", "\n", "\n", "embeddings", "=", "words_embeddings", "+", "position_embeddings", "+", "token_type_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertSelfAttention.__init__": [[77, 94], ["torch.nn.Module.__init__", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "ValueError"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "output_attentions", "=", "True", "\n", "\n", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertSelfAttention.transpose_for_scores": [[95, 99], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.size"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertSelfAttention.forward": [[100, 134], ["vlnbert_PREVALENT.BertSelfAttention.query", "vlnbert_PREVALENT.BertSelfAttention.key", "vlnbert_PREVALENT.BertSelfAttention.value", "vlnbert_PREVALENT.BertSelfAttention.transpose_for_scores", "vlnbert_PREVALENT.BertSelfAttention.transpose_for_scores", "vlnbert_PREVALENT.BertSelfAttention.transpose_for_scores", "torch.matmul", "vlnbert_PREVALENT.BertSelfAttention.dropout", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "vlnbert_PREVALENT.BertSelfAttention.transpose", "math.sqrt", "torch.nn.Softmax", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertOutAttention.transpose_for_scores", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertOutAttention.transpose_for_scores", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertOutAttention.transpose_for_scores", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.size"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "attention_head_size", ")", "\n", "# Apply the attention mask is (precomputed for all layers in BertModel forward() function)", "\n", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attention_probs", "=", "attention_probs", "*", "head_mask", "\n", "\n", "", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "\n", "outputs", "=", "(", "context_layer", ",", "attention_scores", ")", "if", "self", ".", "output_attentions", "else", "(", "context_layer", ",", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertSelfOutput.__init__": [[137, 142], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertSelfOutput.forward": [[143, 148], ["vlnbert_PREVALENT.BertSelfOutput.dense", "vlnbert_PREVALENT.BertSelfOutput.dropout", "vlnbert_PREVALENT.BertSelfOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertAttention.__init__": [[151, 155], ["torch.nn.Module.__init__", "vlnbert_PREVALENT.BertSelfAttention", "vlnbert_PREVALENT.BertSelfOutput"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self", "=", "BertSelfAttention", "(", "config", ")", "\n", "self", ".", "output", "=", "BertSelfOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertAttention.forward": [[156, 161], ["vlnbert_PREVALENT.BertAttention.self", "vlnbert_PREVALENT.BertAttention.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "attention_mask", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "self_outputs", "=", "self", ".", "self", "(", "input_tensor", ",", "attention_mask", ",", "head_mask", ")", "\n", "attention_output", "=", "self", ".", "output", "(", "self_outputs", "[", "0", "]", ",", "input_tensor", ")", "\n", "outputs", "=", "(", "attention_output", ",", ")", "+", "self_outputs", "[", "1", ":", "]", "# add attentions if we output them", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertIntermediate.__init__": [[164, 171], ["torch.nn.Module.__init__", "torch.nn.Linear", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertIntermediate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "hidden_act", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "config", ".", "hidden_act", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertIntermediate.forward": [[172, 176], ["vlnbert_PREVALENT.BertIntermediate.dense", "vlnbert_PREVALENT.BertIntermediate.intermediate_act_fn"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertOutput.__init__": [[179, 184], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertOutput.forward": [[185, 190], ["vlnbert_PREVALENT.BertOutput.dense", "vlnbert_PREVALENT.BertOutput.dropout", "vlnbert_PREVALENT.BertOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertLayer.__init__": [[193, 198], ["torch.nn.Module.__init__", "vlnbert_PREVALENT.BertAttention", "vlnbert_PREVALENT.BertIntermediate", "vlnbert_PREVALENT.BertOutput"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "BertAttention", "(", "config", ")", "\n", "self", ".", "intermediate", "=", "BertIntermediate", "(", "config", ")", "\n", "self", ".", "output", "=", "BertOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertLayer.forward": [[199, 206], ["vlnbert_PREVALENT.BertLayer.attention", "vlnbert_PREVALENT.BertLayer.intermediate", "vlnbert_PREVALENT.BertLayer.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "attention_outputs", "=", "self", ".", "attention", "(", "hidden_states", ",", "attention_mask", ",", "head_mask", ")", "\n", "attention_output", "=", "attention_outputs", "[", "0", "]", "\n", "intermediate_output", "=", "self", ".", "intermediate", "(", "attention_output", ")", "\n", "layer_output", "=", "self", ".", "output", "(", "intermediate_output", ",", "attention_output", ")", "\n", "outputs", "=", "(", "layer_output", ",", ")", "+", "attention_outputs", "[", "1", ":", "]", "# add attentions if we output them", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertPooler.__init__": [[209, 213], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPooler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertPooler.forward": [[214, 221], ["vlnbert_PREVALENT.BertPooler.dense", "vlnbert_PREVALENT.BertPooler.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "# We \"pool\" the model by simply taking the hidden state corresponding", "\n", "# to the first token.", "\n", "        ", "first_token_tensor", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "pooled_output", "=", "self", ".", "dense", "(", "first_token_tensor", ")", "\n", "pooled_output", "=", "self", ".", "activation", "(", "pooled_output", ")", "\n", "return", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertXAttention.__init__": [[224, 228], ["torch.nn.Module.__init__", "vlnbert_PREVALENT.BertOutAttention", "vlnbert_PREVALENT.BertSelfOutput"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "ctx_dim", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "att", "=", "BertOutAttention", "(", "config", ",", "ctx_dim", "=", "ctx_dim", ")", "\n", "self", ".", "output", "=", "BertSelfOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertXAttention.forward": [[229, 233], ["vlnbert_PREVALENT.BertXAttention.att", "vlnbert_PREVALENT.BertXAttention.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "ctx_tensor", ",", "ctx_att_mask", "=", "None", ")", ":", "\n", "        ", "output", ",", "attention_scores", "=", "self", ".", "att", "(", "input_tensor", ",", "ctx_tensor", ",", "ctx_att_mask", ")", "\n", "attention_output", "=", "self", ".", "output", "(", "output", ",", "input_tensor", ")", "\n", "return", "attention_output", ",", "attention_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertOutAttention.__init__": [[236, 254], ["torch.nn.Module.__init__", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "ValueError"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "ctx_dim", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "# visual_dim = 2048", "\n", "if", "ctx_dim", "is", "None", ":", "\n", "            ", "ctx_dim", "=", "config", ".", "hidden_size", "\n", "", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "ctx_dim", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "ctx_dim", ",", "self", ".", "all_head_size", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertOutAttention.transpose_for_scores": [[255, 259], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.size"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertOutAttention.forward": [[260, 289], ["vlnbert_PREVALENT.BertOutAttention.query", "vlnbert_PREVALENT.BertOutAttention.key", "vlnbert_PREVALENT.BertOutAttention.value", "vlnbert_PREVALENT.BertOutAttention.transpose_for_scores", "vlnbert_PREVALENT.BertOutAttention.transpose_for_scores", "vlnbert_PREVALENT.BertOutAttention.transpose_for_scores", "torch.matmul", "vlnbert_PREVALENT.BertOutAttention.dropout", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "vlnbert_PREVALENT.BertOutAttention.transpose", "math.sqrt", "torch.nn.Softmax", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertOutAttention.transpose_for_scores", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertOutAttention.transpose_for_scores", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.BertOutAttention.transpose_for_scores", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.size"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "context", ",", "attention_mask", "=", "None", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "context", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "context", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "attention_head_size", ")", "\n", "\n", "# Apply the attention mask is (precomputed for all layers in BertModel forward() function)", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "            ", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "return", "context_layer", ",", "attention_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.LXRTXLayer.__init__": [[292, 305], ["torch.nn.Module.__init__", "vlnbert_PREVALENT.BertAttention", "vlnbert_PREVALENT.BertIntermediate", "vlnbert_PREVALENT.BertOutput", "vlnbert_PREVALENT.BertAttention", "vlnbert_PREVALENT.BertIntermediate", "vlnbert_PREVALENT.BertOutput", "vlnbert_PREVALENT.BertXAttention"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "# Lang self-att and FFN layer", "\n", "self", ".", "lang_self_att", "=", "BertAttention", "(", "config", ")", "\n", "self", ".", "lang_inter", "=", "BertIntermediate", "(", "config", ")", "\n", "self", ".", "lang_output", "=", "BertOutput", "(", "config", ")", "\n", "# Visn self-att and FFN layer", "\n", "self", ".", "visn_self_att", "=", "BertAttention", "(", "config", ")", "\n", "self", ".", "visn_inter", "=", "BertIntermediate", "(", "config", ")", "\n", "self", ".", "visn_output", "=", "BertOutput", "(", "config", ")", "\n", "# The cross attention layer", "\n", "self", ".", "visual_attention", "=", "BertXAttention", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.LXRTXLayer.cross_att": [[306, 310], ["vlnbert_PREVALENT.LXRTXLayer.visual_attention"], "methods", ["None"], ["", "def", "cross_att", "(", "self", ",", "lang_input", ",", "lang_attention_mask", ",", "visn_input", ",", "visn_attention_mask", ")", ":", "\n", "        ", "''' Cross Attention -- cross for vision not for language '''", "\n", "visn_att_output", ",", "attention_scores", "=", "self", ".", "visual_attention", "(", "visn_input", ",", "lang_input", ",", "ctx_att_mask", "=", "lang_attention_mask", ")", "\n", "return", "visn_att_output", ",", "attention_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.LXRTXLayer.self_att": [[311, 315], ["vlnbert_PREVALENT.LXRTXLayer.visn_self_att"], "methods", ["None"], ["", "def", "self_att", "(", "self", ",", "visn_input", ",", "visn_attention_mask", ")", ":", "\n", "        ", "''' Self Attention -- on visual features with language clues '''", "\n", "visn_att_output", "=", "self", ".", "visn_self_att", "(", "visn_input", ",", "visn_attention_mask", ")", "\n", "return", "visn_att_output", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.LXRTXLayer.output_fc": [[316, 321], ["vlnbert_PREVALENT.LXRTXLayer.visn_inter", "vlnbert_PREVALENT.LXRTXLayer.visn_output"], "methods", ["None"], ["", "def", "output_fc", "(", "self", ",", "visn_input", ")", ":", "\n", "        ", "''' Feed forward '''", "\n", "visn_inter_output", "=", "self", ".", "visn_inter", "(", "visn_input", ")", "\n", "visn_output", "=", "self", ".", "visn_output", "(", "visn_inter_output", ",", "visn_input", ")", "\n", "return", "visn_output", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.LXRTXLayer.forward": [[322, 343], ["torch.cat", "torch.cat", "vlnbert_PREVALENT.LXRTXLayer.cross_att", "vlnbert_PREVALENT.LXRTXLayer.self_att", "vlnbert_PREVALENT.LXRTXLayer.output_fc", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.LXRTXLayer.cross_att", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.LXRTXLayer.self_att", "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.LXRTXLayer.output_fc"], ["", "def", "forward", "(", "self", ",", "lang_feats", ",", "lang_attention_mask", ",", "\n", "visn_feats", ",", "visn_attention_mask", ",", "tdx", ")", ":", "\n", "\n", "        ", "''' visual self-attention with state '''", "\n", "visn_att_output", "=", "torch", ".", "cat", "(", "(", "lang_feats", "[", ":", ",", "0", ":", "1", ",", ":", "]", ",", "visn_feats", ")", ",", "dim", "=", "1", ")", "\n", "state_vis_mask", "=", "torch", ".", "cat", "(", "(", "lang_attention_mask", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", "]", ",", "visn_attention_mask", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "''' state and vision attend to language '''", "\n", "visn_att_output", ",", "cross_attention_scores", "=", "self", ".", "cross_att", "(", "lang_feats", "[", ":", ",", "1", ":", ",", ":", "]", ",", "lang_attention_mask", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", ",", "visn_att_output", ",", "state_vis_mask", ")", "\n", "\n", "language_attention_scores", "=", "cross_attention_scores", "[", ":", ",", ":", ",", "0", ",", ":", "]", "\n", "\n", "state_visn_att_output", "=", "self", ".", "self_att", "(", "visn_att_output", ",", "state_vis_mask", ")", "\n", "state_visn_output", "=", "self", ".", "output_fc", "(", "state_visn_att_output", "[", "0", "]", ")", "\n", "\n", "visn_att_output", "=", "state_visn_output", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "lang_att_output", "=", "torch", ".", "cat", "(", "(", "state_visn_output", "[", ":", ",", "0", ":", "1", ",", ":", "]", ",", "lang_feats", "[", ":", ",", "1", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "visual_attention_scores", "=", "state_visn_att_output", "[", "1", "]", "[", ":", ",", ":", ",", "0", ",", "1", ":", "]", "\n", "\n", "return", "lang_att_output", ",", "visn_att_output", ",", "language_attention_scores", ",", "visual_attention_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VisionEncoder.__init__": [[346, 355], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vision_size", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "feat_dim", "=", "vision_size", "\n", "\n", "# Object feature encoding", "\n", "self", ".", "visn_fc", "=", "nn", ".", "Linear", "(", "feat_dim", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "visn_layer_norm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-12", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VisionEncoder.forward": [[356, 364], ["vlnbert_PREVALENT.VisionEncoder.visn_fc", "vlnbert_PREVALENT.VisionEncoder.visn_layer_norm", "vlnbert_PREVALENT.VisionEncoder.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "visn_input", ")", ":", "\n", "        ", "feats", "=", "visn_input", "\n", "\n", "x", "=", "self", ".", "visn_fc", "(", "feats", ")", "\n", "x", "=", "self", ".", "visn_layer_norm", "(", "x", ")", "\n", "\n", "output", "=", "self", ".", "dropout", "(", "x", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__": [[367, 383], ["transformers.pytorch_transformers.modeling_bert.BertPreTrainedModel.__init__", "vlnbert_PREVALENT.BertEmbeddings", "vlnbert_PREVALENT.BertPooler", "logger.info", "torch.nn.ModuleList", "torch.nn.ModuleList", "vlnbert_PREVALENT.VisionEncoder", "vlnbert_PREVALENT.VLNBert.apply", "vlnbert_PREVALENT.BertLayer", "vlnbert_PREVALENT.LXRTXLayer", "range", "range"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "VLNBert", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "embeddings", "=", "BertEmbeddings", "(", "config", ")", "\n", "self", ".", "pooler", "=", "BertPooler", "(", "config", ")", "\n", "\n", "self", ".", "img_dim", "=", "config", ".", "img_feature_dim", "# 2176", "\n", "logger", ".", "info", "(", "'VLNBert Image Dimension: {}'", ".", "format", "(", "self", ".", "img_dim", ")", ")", "\n", "self", ".", "img_feature_type", "=", "config", ".", "img_feature_type", "# ''", "\n", "self", ".", "vl_layers", "=", "config", ".", "vl_layers", "# 4", "\n", "self", ".", "la_layers", "=", "config", ".", "la_layers", "# 9", "\n", "self", ".", "lalayer", "=", "nn", ".", "ModuleList", "(", "\n", "[", "BertLayer", "(", "config", ")", "for", "_", "in", "range", "(", "self", ".", "la_layers", ")", "]", ")", "\n", "self", ".", "addlayer", "=", "nn", ".", "ModuleList", "(", "\n", "[", "LXRTXLayer", "(", "config", ")", "for", "_", "in", "range", "(", "self", ".", "vl_layers", ")", "]", ")", "\n", "self", ".", "vision_encoder", "=", "VisionEncoder", "(", "self", ".", "config", ".", "img_feature_dim", ",", "self", ".", "config", ")", "\n", "self", ".", "apply", "(", "self", ".", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.VLNBert.forward": [[384, 450], ["attention_mask.unsqueeze().unsqueeze", "extended_attention_mask.to.to.to", "torch.zeros_like", "vlnbert_PREVALENT.VLNBert.embeddings", "vlnbert_PREVALENT.VLNBert.pooler", "attention_mask.unsqueeze", "layer_module", "vlnbert_PREVALENT.VLNBert.vision_encoder", "text_embeds.size", "img_seq_mask.unsqueeze().unsqueeze", "extended_img_mask.to.to.to", "enumerate", "vlnbert_PREVALENT.VLNBert.pooler", "language_attention_scores.mean", "visual_attention_scores.mean", "next", "layer_module", "vlnbert_PREVALENT.VLNBert.parameters", "img_seq_mask.unsqueeze", "next", "torch.nn.Softmax", "language_attention_scores.mean.clone", "torch.nn.Softmax", "visual_attention_scores.mean.clone", "vlnbert_PREVALENT.VLNBert.parameters"], "methods", ["home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.r2r_src.env.R2RBatch.size"], ["", "def", "forward", "(", "self", ",", "mode", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "\n", "attention_mask", "=", "None", ",", "lang_mask", "=", "None", ",", "vis_mask", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "img_feats", "=", "None", ")", ":", "\n", "\n", "        ", "attention_mask", "=", "lang_mask", "\n", "\n", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "\n", "", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "num_hidden_layers", "\n", "\n", "if", "mode", "==", "'language'", ":", "\n", "            ", "''' LXMERT language branch (in VLN only perform this at initialization) '''", "\n", "embedding_output", "=", "self", ".", "embeddings", "(", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ")", "\n", "text_embeds", "=", "embedding_output", "\n", "\n", "for", "layer_module", "in", "self", ".", "lalayer", ":", "\n", "                ", "temp_output", "=", "layer_module", "(", "text_embeds", ",", "extended_attention_mask", ")", "\n", "text_embeds", "=", "temp_output", "[", "0", "]", "\n", "\n", "", "sequence_output", "=", "text_embeds", "\n", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ")", "\n", "\n", "return", "pooled_output", ",", "sequence_output", "\n", "\n", "", "elif", "mode", "==", "'visual'", ":", "\n", "            ", "''' LXMERT visual branch (no language processing during navigation) '''", "\n", "text_embeds", "=", "input_ids", "\n", "\n", "text_mask", "=", "extended_attention_mask", "\n", "\n", "img_embedding_output", "=", "self", ".", "vision_encoder", "(", "img_feats", ")", "\n", "img_seq_len", "=", "img_feats", ".", "shape", "[", "1", "]", "\n", "batch_size", "=", "text_embeds", ".", "size", "(", "0", ")", "\n", "\n", "img_seq_mask", "=", "vis_mask", "\n", "\n", "extended_img_mask", "=", "img_seq_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "extended_img_mask", "=", "extended_img_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_img_mask", "=", "(", "1.0", "-", "extended_img_mask", ")", "*", "-", "10000.0", "\n", "img_mask", "=", "extended_img_mask", "\n", "\n", "lang_output", "=", "text_embeds", "\n", "visn_output", "=", "img_embedding_output", "\n", "\n", "for", "tdx", ",", "layer_module", "in", "enumerate", "(", "self", ".", "addlayer", ")", ":", "\n", "                ", "lang_output", ",", "visn_output", ",", "language_attention_scores", ",", "visual_attention_scores", "=", "layer_module", "(", "lang_output", ",", "text_mask", ",", "visn_output", ",", "img_mask", ",", "tdx", ")", "\n", "\n", "", "sequence_output", "=", "lang_output", "\n", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ")", "\n", "\n", "language_state_scores", "=", "language_attention_scores", ".", "mean", "(", "dim", "=", "1", ")", "\n", "visual_action_scores", "=", "visual_attention_scores", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "# weighted_feat", "\n", "language_attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "language_state_scores", ".", "clone", "(", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "visual_attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "visual_action_scores", ".", "clone", "(", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "attended_language", "=", "(", "language_attention_probs", "*", "text_embeds", "[", ":", ",", "1", ":", ",", ":", "]", ")", ".", "sum", "(", "1", ")", "\n", "attended_visual", "=", "(", "visual_attention_probs", "*", "img_embedding_output", ")", ".", "sum", "(", "1", ")", "\n", "\n", "return", "pooled_output", ",", "visual_action_scores", ",", "attended_language", ",", "attended_visual", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.gelu": [[22, 29], ["torch.erf", "math.sqrt"], "function", ["None"], ["def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\"Implementation of the gelu activation function.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_PREVALENT.swish": [[31, 33], ["torch.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_init.get_tokenizer": [[5, 14], ["tokenizer_class.from_pretrained", "tokenizer_class.from_pretrained"], "function", ["None"], ["def", "get_tokenizer", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "vlnbert", "==", "'oscar'", ":", "\n", "        ", "tokenizer_class", "=", "BertTokenizer", "\n", "model_name_or_path", "=", "'Oscar/pretrained_models/base-no-labels/ep_67_588997'", "\n", "tokenizer", "=", "tokenizer_class", ".", "from_pretrained", "(", "model_name_or_path", ",", "do_lower_case", "=", "True", ")", "\n", "", "elif", "args", ".", "vlnbert", "==", "'prevalent'", ":", "\n", "        ", "tokenizer_class", "=", "BertTokenizer", "\n", "tokenizer", "=", "tokenizer_class", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "", "return", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.YicongHong_Recurrent-VLN-BERT.vlnbert.vlnbert_init.get_vlnbert_models": [[15, 46], ["config_class.from_pretrained", "model_class.from_pretrained", "config_class.from_pretrained", "model_class.from_pretrained"], "function", ["None"], ["", "def", "get_vlnbert_models", "(", "args", ",", "config", "=", "None", ")", ":", "\n", "    ", "config_class", "=", "BertConfig", "\n", "\n", "if", "args", ".", "vlnbert", "==", "'oscar'", ":", "\n", "        ", "from", "vlnbert", ".", "vlnbert_OSCAR", "import", "VLNBert", "\n", "model_class", "=", "VLNBert", "\n", "model_name_or_path", "=", "'Oscar/pretrained_models/base-no-labels/ep_67_588997'", "\n", "vis_config", "=", "config_class", ".", "from_pretrained", "(", "model_name_or_path", ",", "num_labels", "=", "2", ",", "finetuning_task", "=", "'vln-r2r'", ")", "\n", "\n", "vis_config", ".", "model_type", "=", "'visual'", "\n", "vis_config", ".", "finetuning_task", "=", "'vln-r2r'", "\n", "vis_config", ".", "hidden_dropout_prob", "=", "0.3", "\n", "vis_config", ".", "hidden_size", "=", "768", "\n", "vis_config", ".", "img_feature_dim", "=", "2176", "\n", "vis_config", ".", "num_attention_heads", "=", "12", "\n", "vis_config", ".", "num_hidden_layers", "=", "12", "\n", "visual_model", "=", "model_class", ".", "from_pretrained", "(", "model_name_or_path", ",", "from_tf", "=", "False", ",", "config", "=", "vis_config", ")", "\n", "\n", "", "elif", "args", ".", "vlnbert", "==", "'prevalent'", ":", "\n", "        ", "from", "vlnbert", ".", "vlnbert_PREVALENT", "import", "VLNBert", "\n", "model_class", "=", "VLNBert", "\n", "model_name_or_path", "=", "'Prevalent/pretrained_model/pytorch_model.bin'", "\n", "vis_config", "=", "config_class", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "vis_config", ".", "img_feature_dim", "=", "2176", "\n", "vis_config", ".", "img_feature_type", "=", "\"\"", "\n", "vis_config", ".", "vl_layers", "=", "4", "\n", "vis_config", ".", "la_layers", "=", "9", "\n", "\n", "visual_model", "=", "model_class", ".", "from_pretrained", "(", "model_name_or_path", ",", "config", "=", "vis_config", ")", "\n", "\n", "", "return", "visual_model", "\n", "", ""]]}