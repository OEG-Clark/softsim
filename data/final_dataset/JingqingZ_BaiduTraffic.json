{"home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.error.mape": [[7, 9], ["numpy.abs"], "function", ["None"], ["def", "mape", "(", "pred", ",", "target", ")", ":", "\n", "    ", "return", "np", ".", "abs", "(", "pred", "-", "target", ")", "/", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.error.get_error": [[10, 83], ["print", "dataloader.load_event_data", "print", "numpy.load", "print", "dataloader.load_data_noneighbour", "print", "print", "numpy.zeros", "numpy.zeros", "numpy.zeros", "time.time", "range", "numpy.savez", "print", "numpy.nanmean", "print", "numpy.nanmean", "print", "dataloader.get_event_filter", "numpy.array", "numpy.zeros", "range", "range", "time.time", "print", "range", "error.mape"], "function", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_event_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data_noneighbour", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_event_filter", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.utils.mape"], ["", "def", "get_error", "(", "filename", ",", "model_name", ")", ":", "\n", "\n", "    ", "print", "(", "\"Load Event\"", ")", "\n", "event_dict", "=", "dataloader", ".", "load_event_data", "(", ")", "\n", "\n", "print", "(", "\"Loading Prediction %s\"", "%", "filename", ")", "\n", "data", "=", "np", ".", "load", "(", "filename", ")", "\n", "test_pred", "=", "data", "[", "\"pred\"", "]", "\n", "print", "(", "\"Prediction Loaded \"", ",", "test_pred", ".", "shape", ")", "\n", "\n", "# root_data, neighbour_data, pathlist = dataloader.load_data(5, 5)", "\n", "root_data", ",", "pathlist", "=", "dataloader", ".", "load_data_noneighbour", "(", "5", ",", "5", ")", "\n", "test_data", "=", "root_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", "\n", "\n", "print", "(", "\"Pred \"", ",", "test_pred", ".", "shape", ")", "\n", "print", "(", "\"Test \"", ",", "test_data", ".", "shape", ")", "\n", "\n", "import", "time", "\n", "\n", "path_time_loss", "=", "np", ".", "zeros", "(", "(", "test_pred", ".", "shape", "[", "0", "]", ",", "config", ".", "out_seq_length", ")", ")", "\n", "path_event_loss", "=", "np", ".", "zeros", "(", "(", "test_pred", ".", "shape", "[", "0", "]", ",", "config", ".", "out_seq_length", ")", ")", "\n", "\n", "path_period_loss", "=", "np", ".", "zeros", "(", "(", "test_pred", ".", "shape", "[", "0", "]", ",", "test_pred", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "steptime", "=", "time", ".", "time", "(", ")", "\n", "# flagevent = 0", "\n", "for", "path", "in", "range", "(", "test_pred", ".", "shape", "[", "0", "]", ")", ":", "\n", "# if flagevent > 10:", "\n", "#     break", "\n", "\n", "        ", "event_filter", "=", "dataloader", ".", "get_event_filter", "(", "event_dict", "[", "pathlist", "[", "path", "]", "]", ")", "\n", "event_filter", "=", "np", ".", "array", "(", "event_filter", ")", "\n", "\n", "event_count", "=", "np", ".", "zeros", "(", "config", ".", "out_seq_length", ")", "\n", "\n", "if", "path", "%", "1000", "==", "0", ":", "\n", "            ", "ntime", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "path", ",", "ntime", "-", "steptime", ")", "\n", "steptime", "=", "ntime", "\n", "\n", "", "for", "seqloc", "in", "range", "(", "test_pred", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "pred", "=", "test_pred", "[", "path", ",", "seqloc", "]", "\n", "real", "=", "test_data", "[", "path", ",", "seqloc", "+", "config", ".", "in_seq_length", ":", "seqloc", "+", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", "]", "\n", "\n", "for", "tlen", "in", "range", "(", "config", ".", "out_seq_length", ")", ":", "\n", "                ", "mapeloss", "=", "mape", "(", "pred", "[", "tlen", ",", "0", "]", ",", "real", "[", "tlen", ",", "0", "]", ")", "\n", "path_time_loss", "[", "path", ",", "tlen", "]", "+=", "mapeloss", "\n", "\n", "if", "event_filter", "[", "seqloc", "+", "config", ".", "in_seq_length", "+", "tlen", "]", ">", "0", ":", "\n", "                    ", "path_event_loss", "[", "path", ",", "tlen", "]", "+=", "mapeloss", "\n", "event_count", "[", "tlen", "]", "+=", "1", "\n", "\n", "", "if", "tlen", "==", "config", ".", "out_seq_length", "-", "1", ":", "\n", "                    ", "path_period_loss", "[", "path", ",", "seqloc", "]", "=", "mapeloss", "\n", "\n", "", "", "", "path_time_loss", "[", "path", "]", "/=", "test_pred", ".", "shape", "[", "1", "]", "\n", "\n", "for", "tlen", "in", "range", "(", "config", ".", "out_seq_length", ")", ":", "\n", "            ", "if", "event_count", "[", "tlen", "]", ">", "0", ":", "\n", "                ", "path_event_loss", "[", "path", ",", "tlen", "]", "/=", "event_count", "[", "tlen", "]", "\n", "# if np.sum(event_count) > 0:", "\n", "#     print(path_event_loss[path])", "\n", "# flagevent += 1", "\n", "", "", "", "np", ".", "savez", "(", "config", ".", "result_path", "+", "\"%s_path_period_loss.npz\"", "%", "model_name", ",", "error", "=", "path_period_loss", ")", "\n", "print", "(", "\"Path period loss saved\"", ")", "\n", "\n", "path_time_loss", "[", "path_time_loss", "==", "0", "]", "=", "np", ".", "nan", "\n", "time_loss", "=", "np", ".", "nanmean", "(", "path_time_loss", ",", "axis", "=", "0", ")", "\n", "print", "(", "\"Time loss: \"", ",", "time_loss", ")", "\n", "\n", "path_event_loss", "[", "path_event_loss", "==", "0", "]", "=", "np", ".", "nan", "\n", "event_loss", "=", "np", ".", "nanmean", "(", "path_event_loss", ",", "axis", "=", "0", ")", "\n", "print", "(", "\"Event loss: \"", ",", "event_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.error.sort_path_error": [[84, 91], ["numpy.load", "dataloader.get_pathlist", "numpy.mean", "print"], "function", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_pathlist"], ["", "def", "sort_path_error", "(", "filename", ")", ":", "\n", "    ", "data", "=", "np", ".", "load", "(", "filename", ")", "\n", "data", "=", "data", "[", "\"error\"", "]", "\n", "pathlist", "=", "dataloader", ".", "get_pathlist", "(", ")", "\n", "\n", "pathmean", "=", "np", ".", "mean", "(", "data", ",", "axis", "=", "1", ")", "\n", "print", "(", "pathmean", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.error.get_event_loss": [[93, 164], ["print", "open", "dict", "print", "numpy.load", "print", "dataloader.load_data_noneighbour", "print", "print", "numpy.zeros", "dict", "range", "numpy.nanmean", "print", "line.replace().split", "eval", "len", "len", "range", "np.zeros.copy", "numpy.nanmean", "print", "line.replace", "error.mape"], "function", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data_noneighbour", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.utils.mape"], ["", "def", "get_event_loss", "(", "filename", ",", "filename_event", ")", ":", "\n", "\n", "    ", "print", "(", "\"Load event\"", ")", "\n", "eventfile", "=", "open", "(", "filename_event", ",", "\"r\"", ")", "\n", "eventdict", "=", "dict", "(", ")", "\n", "for", "line", "in", "eventfile", ":", "\n", "        ", "content", "=", "line", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "split", "(", "\":\"", ")", "\n", "eventdict", "[", "content", "[", "0", "]", "]", "=", "eval", "(", "content", "[", "1", "]", ")", "\n", "\n", "\n", "", "print", "(", "\"Loading Prediction %s\"", "%", "filename", ")", "\n", "data", "=", "np", ".", "load", "(", "filename", ")", "\n", "test_pred", "=", "data", "[", "\"pred\"", "]", "\n", "print", "(", "\"Prediction Loaded \"", ",", "test_pred", ".", "shape", ")", "\n", "\n", "root_data", ",", "pathlist", "=", "dataloader", ".", "load_data_noneighbour", "(", "5", ",", "5", ")", "\n", "# test_data = root_data[:, -config.valid_length:, :]", "\n", "print", "(", "\"Test data \"", ",", "root_data", ".", "shape", ")", "\n", "print", "(", "\"Pathlist %d\"", "%", "len", "(", "pathlist", ")", ")", "\n", "\n", "path_event_loss", "=", "np", ".", "zeros", "(", "(", "test_pred", ".", "shape", "[", "0", "]", ",", "config", ".", "out_seq_length", ")", ")", "\n", "\n", "testedpath", "=", "dict", "(", ")", "\n", "\n", "for", "pid", "in", "range", "(", "test_pred", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "path", "=", "pathlist", "[", "pid", "]", "\n", "if", "path", "not", "in", "eventdict", "or", "path", "in", "testedpath", ":", "\n", "            ", "continue", "\n", "\n", "", "testedpath", "[", "path", "]", "=", "0", "\n", "\n", "eventlist", "=", "eventdict", "[", "path", "]", "\n", "\n", "if", "len", "(", "eventlist", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "numiter", "=", "0", "\n", "\n", "last", "=", "-", "1", "\n", "\n", "# print(eventlist)", "\n", "for", "t", "in", "eventlist", ":", "\n", "            ", "if", "t", "<", "last", "+", "50", ":", "\n", "                ", "last", "=", "t", "\n", "continue", "\n", "", "last", "=", "t", "\n", "# print(last)", "\n", "\n", "maxseqloc", "=", "t", "-", "(", "config", ".", "full_length", "-", "config", ".", "valid_length", "+", "config", ".", "in_seq_length", ")", "\n", "if", "maxseqloc", ">=", "test_pred", ".", "shape", "[", "1", "]", "or", "maxseqloc", "<", "0", ":", "\n", "                ", "continue", "\n", "", "numiter", "+=", "1", "\n", "\n", "real", "=", "root_data", "[", "pid", ",", "t", "]", "\n", "for", "ol", "in", "range", "(", "test_pred", ".", "shape", "[", "2", "]", ")", ":", "\n", "                ", "seqloc", "=", "t", "-", "(", "config", ".", "full_length", "-", "config", ".", "valid_length", "+", "config", ".", "in_seq_length", "+", "ol", ")", "\n", "pred", "=", "test_pred", "[", "pid", ",", "seqloc", ",", "ol", "]", "\n", "mapeloss", "=", "mape", "(", "pred", ",", "real", ")", "\n", "path_event_loss", "[", "pid", ",", "ol", "]", "+=", "mapeloss", "\n", "\n", "", "", "path_event_loss", "[", "pid", "]", "/=", "numiter", "\n", "\n", "if", "pid", "%", "1000", "==", "0", ":", "\n", "            ", "tmp", "=", "path_event_loss", ".", "copy", "(", ")", "\n", "tmp", "[", "tmp", "==", "0", "]", "=", "np", ".", "nan", "\n", "event_loss", "=", "np", ".", "nanmean", "(", "tmp", ",", "axis", "=", "0", ")", "\n", "print", "(", "\"Event loss %d: \"", "%", "pid", ",", "event_loss", ")", "\n", "\n", "", "", "path_event_loss", "[", "path_event_loss", "==", "0", "]", "=", "np", ".", "nan", "\n", "event_loss", "=", "np", ".", "nanmean", "(", "path_event_loss", ",", "axis", "=", "0", ")", "\n", "print", "(", "\"Event loss: \"", ",", "event_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.baselines.get_xy": [[14, 42], ["list", "list", "list", "random.shuffle", "numpy.stack", "numpy.stack", "range", "dataloader.get_pathlist", "dataloader.load_event_data", "dataloader.get_event_filter_allpath", "dataloader.get_event_orders", "np.stack.append", "np.stack.append", "np.stack.append", "config.out_seq_length", "config.out_seq_length", "config.out_seq_length", "config.out_seq_length"], "function", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_pathlist", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_event_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_event_filter_allpath", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_event_orders"], ["def", "get_xy", "(", "data", ",", "testlen", "=", "1", ",", "filter_num", "=", "30000", ",", "event", "=", "False", ")", ":", "\n", "    ", "x", "=", "list", "(", ")", "\n", "y", "=", "list", "(", ")", "\n", "num_seq", "=", "data", ".", "shape", "[", "1", "]", "-", "config", ".", "in_seq_length", "-", "config", ".", "out_seq_length", "\n", "\n", "allorder", "=", "list", "(", "range", "(", "data", ".", "shape", "[", "0", "]", "*", "num_seq", ")", ")", "\n", "random", ".", "shuffle", "(", "allorder", ")", "\n", "if", "event", ":", "\n", "        ", "pathlist", "=", "dataloader", ".", "get_pathlist", "(", ")", "\n", "event_data", "=", "dataloader", ".", "load_event_data", "(", ")", "\n", "event_filter_allpath", "=", "dataloader", ".", "get_event_filter_allpath", "(", "event_data", ",", "pathlist", ")", "\n", "filterorder", "=", "dataloader", ".", "get_event_orders", "(", "event_filter_allpath", ",", "allorder", ",", "num_seq", ",", "tsteps", "=", "filter_num", "//", "config", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "        ", "filterorder", "=", "allorder", "[", ":", "filter_num", "]", "\n", "\n", "# for path in range(data.shape[0]):", "\n", "#     for xid in range(data.shape[1] - config.in_seq_length - config.out_seq_length):", "\n", "", "for", "fid", "in", "filterorder", ":", "\n", "        ", "path", "=", "fid", "//", "num_seq", "\n", "xid", "=", "fid", "%", "num_seq", "\n", "x", ".", "append", "(", "data", "[", "path", ",", "xid", ":", "xid", "+", "config", ".", "in_seq_length", "]", ")", "\n", "if", "testlen", "==", "1", ":", "\n", "            ", "y", ".", "append", "(", "data", "[", "path", ",", "xid", "+", "config", ".", "in_seq_length", "]", ")", "\n", "", "else", ":", "\n", "            ", "y", ".", "append", "(", "data", "[", "path", ",", "xid", "+", "config", ".", "in_seq_length", ":", "xid", "+", "config", ".", "in_seq_length", "+", "testlen", "]", ")", "\n", "", "", "x", "=", "np", ".", "stack", "(", "x", ",", "axis", "=", "0", ")", "\n", "y", "=", "np", ".", "stack", "(", "y", ",", "axis", "=", "0", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.baselines.test_baseline": [[43, 91], ["dataloader.load_data_noneighbour", "print", "baselines.get_xy", "print", "baselines.get_xy", "print", "baselines.get_xy", "print", "print", "time.time", "model.fit", "time.time", "print", "baselines.test_baseline.test"], "function", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data_noneighbour", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.baselines.get_xy", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.baselines.get_xy", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.baselines.get_xy"], ["", "def", "test_baseline", "(", "model", ",", "filter_num", ",", "testfilter_num", ")", ":", "\n", "    ", "data", ",", "pathlist", "=", "dataloader", ".", "load_data_noneighbour", "(", "5", ",", "5", ")", "\n", "\n", "traindata", "=", "data", "[", ":", ",", ":", "-", "config", ".", "valid_length", "//", "2", ",", "0", "]", "\n", "testdata", "=", "data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", "0", "]", "\n", "\n", "print", "(", "\"Get XY ...\"", ")", "\n", "x", ",", "y", "=", "get_xy", "(", "traindata", ",", "1", ",", "filter_num", ")", "\n", "print", "(", "\"Get Train XY %s %s \"", "%", "(", "x", ".", "shape", ",", "y", ".", "shape", ")", ")", "\n", "tx", ",", "ty", "=", "get_xy", "(", "testdata", ",", "config", ".", "out_seq_length", ",", "testfilter_num", ")", "\n", "print", "(", "\"Get Test XY %s %s \"", "%", "(", "tx", ".", "shape", ",", "ty", ".", "shape", ")", ")", "\n", "ex", ",", "ey", "=", "get_xy", "(", "testdata", ",", "config", ".", "out_seq_length", ",", "testfilter_num", ",", "event", "=", "True", ")", "\n", "print", "(", "\"Get Etest XY %s %s \"", "%", "(", "ex", ".", "shape", ",", "ey", ".", "shape", ")", ")", "\n", "\n", "# x, y = sklearn.utils.shuffle(x, y)", "\n", "# x = x[:30000, :]", "\n", "# y = y[:30000]", "\n", "\n", "# tx, ty = sklearn.utils.shuffle(tx, ty)", "\n", "# tx = tx[:30000, :]", "\n", "# ty = ty[:30000]", "\n", "\n", "print", "(", "\"Train\"", ")", "\n", "stime", "=", "time", ".", "time", "(", ")", "\n", "model", ".", "fit", "(", "x", ",", "y", ")", "\n", "etime", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Train %d\"", "%", "(", "etime", "-", "stime", ")", ")", "\n", "\n", "def", "test", "(", "testx", ",", "testy", ")", ":", "\n", "        ", "print", "(", "\"Test\"", ")", "\n", "stime", "=", "time", ".", "time", "(", ")", "\n", "predlist", "=", "list", "(", ")", "\n", "for", "pid", "in", "range", "(", "config", ".", "out_seq_length", ")", ":", "\n", "            ", "print", "(", "\"Test %d %d\"", "%", "(", "pid", ",", "time", ".", "time", "(", ")", "-", "stime", ")", ")", "\n", "pred", "=", "model", ".", "predict", "(", "testx", ")", "\n", "predlist", ".", "append", "(", "pred", ")", "\n", "testx", "[", ":", ",", ":", "-", "1", "]", "=", "testx", "[", ":", ",", "1", ":", "]", "\n", "testx", "[", ":", ",", "-", "1", "]", "=", "pred", "\n", "", "etime", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Test %d\"", "%", "(", "etime", "-", "stime", ")", ")", "\n", "\n", "predlist", "=", "np", ".", "stack", "(", "predlist", ",", "axis", "=", "-", "1", ")", "\n", "mapeloss", "=", "utils", ".", "mape", "(", "predlist", ",", "testy", ")", "\n", "tloss", "=", "np", ".", "mean", "(", "mapeloss", ",", "axis", "=", "0", ")", "\n", "print", "(", "\"Test \"", ",", "tloss", ")", "\n", "\n", "", "test", "(", "tx", ",", "ty", ")", "\n", "test", "(", "ex", ",", "ey", ")", "\n", "# print(sumtloss / data.shape[0])", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.baselines.test_arima": [[93, 139], ["dataloader.load_data_noneighbour", "print", "baselines.get_xy", "print", "baselines.get_xy", "print", "baselines.test_baseline.test"], "function", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data_noneighbour", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.baselines.get_xy", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.baselines.get_xy"], ["", "def", "test_arima", "(", "testfilter_num", ")", ":", "\n", "    ", "data", ",", "pathlist", "=", "dataloader", ".", "load_data_noneighbour", "(", "5", ",", "5", ")", "\n", "\n", "# traindata = data[:, :-config.valid_length // 2, 0]", "\n", "testdata", "=", "data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", "0", "]", "\n", "\n", "print", "(", "\"Get XY ...\"", ")", "\n", "# x, y = get_xy(traindata, 1, filter_num)", "\n", "# print(\"Get Train XY %s %s \" % (x.shape, y.shape))", "\n", "tx", ",", "ty", "=", "get_xy", "(", "testdata", ",", "config", ".", "out_seq_length", ",", "testfilter_num", ")", "\n", "print", "(", "\"Get Test XY %s %s \"", "%", "(", "tx", ".", "shape", ",", "ty", ".", "shape", ")", ")", "\n", "ex", ",", "ey", "=", "get_xy", "(", "testdata", ",", "config", ".", "out_seq_length", ",", "testfilter_num", ",", "event", "=", "True", ")", "\n", "print", "(", "\"Get Etest XY %s %s \"", "%", "(", "ex", ".", "shape", ",", "ey", ".", "shape", ")", ")", "\n", "\n", "# x, y = sklearn.utils.shuffle(x, y)", "\n", "# x = x[:30000, :]", "\n", "# y = y[:30000]", "\n", "\n", "# tx, ty = sklearn.utils.shuffle(tx, ty)", "\n", "# tx = tx[:30000, :]", "\n", "# ty = ty[:30000]", "\n", "\n", "def", "test", "(", "testx", ",", "testy", ")", ":", "\n", "        ", "print", "(", "\"Test\"", ")", "\n", "stime", "=", "time", ".", "time", "(", ")", "\n", "predlist", "=", "list", "(", ")", "\n", "for", "idx", "in", "range", "(", "testx", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "model", "=", "ARIMA", "(", "testx", "[", "0", "]", ",", "order", "=", "(", "1", ",", "1", ",", "0", ")", ")", "\n", "model_fit", "=", "model", ".", "fit", "(", "disp", "=", "0", ")", "\n", "pred", ",", "stderr", ",", "conf_int", "=", "model_fit", ".", "forecast", "(", "config", ".", "out_seq_length", ")", "\n", "predlist", ".", "append", "(", "pred", ")", "\n", "if", "idx", "%", "20", "==", "0", ":", "\n", "                ", "print", "(", "\"Test %d %d\"", "%", "(", "idx", ",", "time", ".", "time", "(", ")", "-", "stime", ")", ",", "utils", ".", "mape", "(", "pred", ",", "testy", "[", "idx", "]", ")", ")", "\n", "\n", "", "", "etime", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Test %d\"", "%", "(", "etime", "-", "stime", ")", ")", "\n", "predlist", "=", "np", ".", "stack", "(", "predlist", ",", "axis", "=", "0", ")", "\n", "mapeloss", "=", "utils", ".", "mape", "(", "predlist", ",", "testy", ")", "\n", "tloss", "=", "np", ".", "mean", "(", "mapeloss", ",", "axis", "=", "0", ")", "\n", "print", "(", "\"Test \"", ",", "tloss", ")", "\n", "return", "tloss", "\n", "\n", "", "timeloss", "=", "test", "(", "tx", ",", "ty", ")", "\n", "eventloss", "=", "test", "(", "ex", ",", "ey", ")", "\n", "print", "(", "timeloss", ",", "np", ".", "mean", "(", "timeloss", ")", ")", "\n", "print", "(", "eventloss", ",", "np", ".", "mean", "(", "eventloss", ")", ")", "\n", "# print(sumtloss / data.shape[0])", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.time_feature_extraction_15min.time_feature_extraction": [[67, 83], ["numpy.zeros", "int", "int", "range", "range"], "function", ["None"], ["def", "time_feature_extraction", "(", "time", ")", ":", "\n", "    ", "temp_time_feature", "=", "np", ".", "zeros", "(", "TIME_FEATURE_DIM", ",", "dtype", "=", "np", ".", "float", ")", "\n", "day", "=", "int", "(", "time", "/", "(", "24", "*", "4", ")", ")", "\n", "if", "day", "in", "workday", ":", "\n", "        ", "temp_time_feature", "[", "0", "]", "=", "1", "\n", "", "elif", "day", "in", "weekend", ":", "\n", "        ", "temp_time_feature", "[", "1", "]", "=", "1", "\n", "", "else", ":", "\n", "        ", "temp_time_feature", "[", "2", "]", "=", "1", "\n", "", "hour", "=", "int", "(", "(", "time", "-", "day", "*", "24", "*", "4", ")", "/", "4", ")", "\n", "min", "=", "time", "-", "day", "*", "24", "*", "4", "-", "hour", "*", "4", "\n", "temp_time_feature", "[", "3", "]", "=", "hour", "\n", "temp_time_feature", "[", "4", "]", "=", "min", "\n", "if", "(", "hour", "in", "range", "(", "6", ",", "9", ")", ")", "or", "(", "hour", "in", "range", "(", "16", ",", "19", ")", ")", ":", "\n", "        ", "temp_time_feature", "[", "5", "]", "=", "1", "\n", "", "return", "temp_time_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.__init__": [[27, 38], ["tensorflow.train.Saver", "tensorflow.ConfigProto", "tensorflow.Session", "tensorlayer.layers.initialize_global_variables", "train.Controller.__init_path__", "train.Controller.__init_mkdir__"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.__init_path__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.__init_mkdir__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "base_epoch", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "50", ")", "\n", "gpu_config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "gpu_config", ".", "gpu_options", ".", "per_process_gpu_memory_fraction", "=", "config", ".", "gpu_memory", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "config", "=", "gpu_config", ")", "\n", "tl", ".", "layers", ".", "initialize_global_variables", "(", "self", ".", "sess", ")", "\n", "\n", "self", ".", "base_epoch", "=", "base_epoch", "\n", "self", ".", "__init_path__", "(", ")", "\n", "self", ".", "__init_mkdir__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.save_model": [[39, 43], ["train.Controller.saver.save", "print"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save"], ["", "def", "save_model", "(", "self", ",", "path", ",", "global_step", "=", "None", ")", ":", "\n", "        ", "save_path", "=", "self", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "path", ",", "global_step", "=", "global_step", ")", "\n", "print", "(", "\"[S] Model saved in ckpt %s\"", "%", "save_path", ")", "\n", "return", "save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.restore_model": [[44, 49], ["train.Controller.saver.restore", "print"], "methods", ["None"], ["", "def", "restore_model", "(", "self", ",", "path", ",", "global_step", "=", "None", ")", ":", "\n", "        ", "model_path", "=", "\"%s-%s\"", "%", "(", "path", ",", "global_step", ")", "\n", "self", ".", "saver", ".", "restore", "(", "self", ".", "sess", ",", "model_path", ")", "\n", "print", "(", "\"[R] Model restored from ckpt %s\"", "%", "model_path", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.__init_path__": [[50, 54], ["None"], "methods", ["None"], ["", "def", "__init_path__", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_save_dir", "=", "config", ".", "model_path", "+", "self", ".", "model", ".", "model_name", "+", "\"/\"", "\n", "self", ".", "log_save_dir", "=", "config", ".", "logs_path", "+", "self", ".", "model", ".", "model_name", "+", "\"/\"", "\n", "self", ".", "figs_save_dir", "=", "config", ".", "figs_path", "+", "self", ".", "model", ".", "model_name", "+", "\"/\"", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.__init_mkdir__": [[55, 62], ["utils.make_dirlist"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.utils.make_dirlist"], ["", "def", "__init_mkdir__", "(", "self", ")", ":", "\n", "        ", "dirlist", "=", "[", "\n", "self", ".", "model_save_dir", ",", "\n", "self", ".", "log_save_dir", ",", "\n", "self", ".", "figs_save_dir", "\n", "]", "\n", "utils", ".", "make_dirlist", "(", "dirlist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.__train__": [[63, 123], ["list", "random.shuffle", "numpy.zeros", "time.time", "time.time", "range", "print", "logger.add_log", "range", "len", "dataloader.get_minibatch", "train.Controller.sess.run", "numpy.array", "print", "time.time", "logger.add_log", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log"], ["", "def", "__train__", "(", "self", ",", "epoch", ",", "root_data", ",", "neighbour_data", ",", "logger", ")", ":", "\n", "\n", "        ", "each_num_seq", "=", "root_data", ".", "shape", "[", "1", "]", "-", "(", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ")", "+", "1", "\n", "total_batch_size", "=", "root_data", ".", "shape", "[", "0", "]", "*", "each_num_seq", "\n", "train_order", "=", "list", "(", "range", "(", "total_batch_size", ")", ")", "\n", "random", ".", "shuffle", "(", "train_order", ")", "\n", "train_order", "=", "train_order", "[", ":", "config", ".", "batch_size", "*", "1000", "]", "\n", "\n", "all_loss", "=", "np", ".", "zeros", "(", "7", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "train_steps", "=", "len", "(", "train_order", ")", "//", "config", ".", "batch_size", "\n", "\n", "for", "cstep", "in", "range", "(", "train_steps", ")", ":", "\n", "\n", "            ", "x_root", ",", "x_neight", ",", "decode_seq", ",", "target_seq", "=", "dataloader", ".", "get_minibatch", "(", "\n", "root_data", ",", "\n", "neighbour_data", ",", "\n", "order", "=", "train_order", "[", "cstep", "*", "config", ".", "batch_size", ":", "(", "cstep", "+", "1", ")", "*", "config", ".", "batch_size", "]", ",", "\n", "num_seq", "=", "each_num_seq", "\n", ")", "\n", "\n", "global_step", "=", "cstep", "+", "epoch", "*", "train_steps", "\n", "\n", "results", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "model", ".", "mae_copy", ",", "\n", "self", ".", "model", ".", "train_loss", ",", "\n", "self", ".", "model", ".", "nmse_train_loss", ",", "\n", "self", ".", "model", ".", "nmse_train_noend", ",", "\n", "self", ".", "model", ".", "mse_train_noend", ",", "\n", "self", ".", "model", ".", "mae_train_noend", ",", "\n", "self", ".", "model", ".", "mape_train_noend", ",", "\n", "self", ".", "model", ".", "learning_rate", ",", "\n", "self", ".", "model", ".", "optim", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "x_root", ":", "x_root", ",", "\n", "self", ".", "model", ".", "x_neighbour", ":", "x_neight", ",", "\n", "self", ".", "model", ".", "decode_seqs", ":", "decode_seq", ",", "\n", "self", ".", "model", ".", "target_seqs", ":", "target_seq", ",", "\n", "self", ".", "model", ".", "global_step", ":", "global_step", ",", "\n", "}", ")", "\n", "\n", "all_loss", "+=", "np", ".", "array", "(", "results", "[", ":", "-", "2", "]", ")", "\n", "\n", "if", "cstep", "%", "100", "==", "0", "and", "cstep", ">", "0", ":", "\n", "                ", "print", "(", "\n", "\"[Train] Epoch: [%3d][%4d/%4d] time: %.4f, lr: %.8f, loss: %s\"", "%", "\n", "(", "epoch", ",", "cstep", ",", "train_steps", ",", "time", ".", "time", "(", ")", "-", "step_time", ",", "results", "[", "-", "2", "]", ",", "all_loss", "/", "(", "cstep", "+", "1", ")", ")", "\n", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "add_log", "(", "global_step", ",", "all_loss", "/", "(", "cstep", "+", "1", ")", ")", "\n", "\n", "", "", "print", "(", "\n", "\"[Train Sum] Epoch: [%3d] time: %.4f, lr: %.8f, loss: %s\"", "%", "\n", "(", "epoch", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "results", "[", "-", "2", "]", ",", "all_loss", "/", "train_steps", ")", "\n", ")", "\n", "logger", ".", "add_log", "(", "global_step", ",", "all_loss", "/", "train_steps", ")", "\n", "\n", "return", "all_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.__valid__": [[124, 176], ["list", "numpy.zeros", "time.time", "time.time", "range", "print", "logger.add_log", "range", "dataloader.get_minibatch", "train.Controller.sess.run", "numpy.array", "print", "time.time", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch"], ["", "def", "__valid__", "(", "self", ",", "epoch", ",", "root_data", ",", "neighbour_data", ",", "logger", ")", ":", "\n", "\n", "        ", "each_num_seq", "=", "root_data", ".", "shape", "[", "1", "]", "-", "(", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ")", "+", "1", "\n", "total_batch_size", "=", "root_data", ".", "shape", "[", "0", "]", "*", "each_num_seq", "\n", "train_order", "=", "list", "(", "range", "(", "total_batch_size", ")", ")", "\n", "\n", "all_loss", "=", "np", ".", "zeros", "(", "7", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "valid_steps", "=", "total_batch_size", "//", "config", ".", "batch_size", "\n", "\n", "for", "cstep", "in", "range", "(", "valid_steps", ")", ":", "\n", "\n", "            ", "x_root", ",", "x_neight", ",", "decode_seq", ",", "target_seq", "=", "dataloader", ".", "get_minibatch", "(", "\n", "root_data", ",", "\n", "neighbour_data", ",", "\n", "order", "=", "train_order", "[", "cstep", "*", "config", ".", "batch_size", ":", "(", "cstep", "+", "1", ")", "*", "config", ".", "batch_size", "]", ",", "\n", "num_seq", "=", "each_num_seq", "\n", ")", "\n", "\n", "results", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "model", ".", "mae_copy", ",", "\n", "self", ".", "model", ".", "test_loss", ",", "\n", "self", ".", "model", ".", "nmse_test_loss", ",", "\n", "self", ".", "model", ".", "nmse_test_noend", ",", "\n", "self", ".", "model", ".", "mse_test_noend", ",", "\n", "self", ".", "model", ".", "mae_test_noend", ",", "\n", "self", ".", "model", ".", "mape_test_noend", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "x_root", ":", "x_root", ",", "\n", "self", ".", "model", ".", "x_neighbour", ":", "x_neight", ",", "\n", "self", ".", "model", ".", "decode_seqs", ":", "decode_seq", ",", "\n", "self", ".", "model", ".", "target_seqs", ":", "target_seq", ",", "\n", "}", ")", "\n", "\n", "all_loss", "+=", "np", ".", "array", "(", "results", "[", ":", "]", ")", "\n", "\n", "if", "cstep", "%", "100", "==", "0", "and", "cstep", ">", "0", ":", "\n", "                ", "print", "(", "\n", "\"[Valid] Epoch: [%3d][%4d/%4d] time: %.4f, loss: %s\"", "%", "\n", "(", "epoch", ",", "cstep", ",", "valid_steps", ",", "time", ".", "time", "(", ")", "-", "step_time", ",", "all_loss", "/", "(", "cstep", "+", "1", ")", ")", "\n", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "print", "(", "\n", "\"[Valid Sum] Epoch: [%3d] time: %.4f, loss: %s\"", "%", "\n", "(", "epoch", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "all_loss", "/", "valid_steps", ")", "\n", ")", "\n", "logger", ".", "add_log", "(", "epoch", ",", "all_loss", "/", "valid_steps", ")", "\n", "\n", "return", "all_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.__test__": [[177, 259], ["list", "numpy.zeros", "numpy.zeros", "time.time", "time.time", "list", "range", "numpy.stack", "numpy.savez", "print", "range", "list", "time.time", "range", "numpy.concatenate", "numpy.stack.append", "logger.add_log", "os.path.exists", "os.makedirs", "dataloader.get_minibatch_4_test_neighbour", "train.Controller.sess.run", "list", "range", "numpy.concatenate", "numpy.mean", "numpy.mean", "numpy.concatenate.append", "print", "numpy.stack", "numpy.savez", "train.Controller.sess.run", "list.append", "utils.mape", "utils.mape", "os.path.exists", "os.makedirs", "list", "list", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_4_test_neighbour", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.utils.mape", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.utils.mape"], ["", "def", "__test__", "(", "self", ",", "epoch", ",", "root_data", ",", "neighbour_data", ",", "logger", ",", "pathlist", ",", "test_interval", "=", "10", ")", ":", "\n", "\n", "        ", "each_num_seq", "=", "root_data", ".", "shape", "[", "1", "]", "-", "(", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ")", "+", "1", "\n", "total_batch_size", "=", "root_data", ".", "shape", "[", "0", "]", "*", "each_num_seq", "\n", "train_order", "=", "list", "(", "range", "(", "total_batch_size", ")", ")", "\n", "\n", "all_loss", "=", "np", ".", "zeros", "(", "1", ")", "\n", "time_loss", "=", "np", ".", "zeros", "(", "config", ".", "out_seq_length", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "round", "=", "0", "\n", "pathpred", "=", "list", "(", ")", "\n", "for", "path", "in", "range", "(", "0", ",", "root_data", ".", "shape", "[", "0", "]", ",", "test_interval", ")", ":", "\n", "            ", "predlist", "=", "list", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "for", "cstep", "in", "range", "(", "each_num_seq", "//", "config", ".", "batch_size", ")", ":", "\n", "                ", "round", "+=", "1", "\n", "\n", "x_root", ",", "x_neight", ",", "decode_seq", ",", "target_seq", "=", "dataloader", ".", "get_minibatch_4_test_neighbour", "(", "\n", "root_data", ",", "\n", "neighbour_data", ",", "\n", "path", ",", "\n", "cstep", "\n", ")", "\n", "\n", "state", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "model", ".", "net_rnn", ".", "final_state_encode", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "x_root", ":", "x_root", ",", "\n", "self", ".", "model", ".", "x_neighbour", ":", "x_neight", "\n", "}", ")", "\n", "\n", "spred", "=", "decode_seq", "[", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "\n", "spredlist", "=", "list", "(", ")", "\n", "for", "_", "in", "range", "(", "config", ".", "out_seq_length", ")", ":", "# max sentence length", "\n", "                    ", "spred", ",", "state", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "model", ".", "test_net", ".", "outputs", ",", "\n", "self", ".", "model", ".", "net_rnn", ".", "final_state_decode", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "net_rnn", ".", "initial_state_decode", ":", "state", ",", "\n", "self", ".", "model", ".", "decode_seqs_test", ":", "spred", "\n", "}", ")", "\n", "spredlist", ".", "append", "(", "spred", ")", "\n", "\n", "", "pred", "=", "np", ".", "concatenate", "(", "spredlist", ",", "axis", "=", "1", ")", "\n", "all_loss", "+=", "np", ".", "mean", "(", "utils", ".", "mape", "(", "pred", ",", "target_seq", "[", ":", ",", ":", "-", "1", ",", ":", "]", ")", ")", "\n", "time_loss", "+=", "np", ".", "mean", "(", "utils", ".", "mape", "(", "pred", "[", ":", ",", ":", "config", ".", "out_seq_length", ",", "0", "]", ",", "target_seq", "[", ":", ",", ":", "config", ".", "out_seq_length", ",", "0", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "predlist", ".", "append", "(", "pred", ")", "\n", "\n", "", "predlist", "=", "np", ".", "concatenate", "(", "predlist", ",", "axis", "=", "0", ")", "\n", "pathpred", ".", "append", "(", "predlist", ")", "\n", "\n", "if", "path", "%", "500", "==", "0", ":", "\n", "                ", "print", "(", "\n", "\"[Test] Epoch: [%3d][%5d/%5d] time: %.4f, loss: %s, tloss: %s\"", "%", "\n", "(", "epoch", ",", "path", ",", "root_data", ".", "shape", "[", "0", "]", ",", "time", ".", "time", "(", ")", "-", "step_time", ",", "all_loss", "/", "round", ",", "time_loss", "/", "round", ")", "\n", ")", "\n", "\n", "tmppathpred", "=", "np", ".", "stack", "(", "pathpred", ",", "axis", "=", "0", ")", "\n", "savedir", "=", "config", ".", "result_path", "+", "self", ".", "model", ".", "model_name", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "savedir", ")", "\n", "", "np", ".", "savez", "(", "savedir", "+", "\"%d_test\"", "%", "(", "epoch", ")", ",", "pred", "=", "tmppathpred", ")", "\n", "\n", "", "logger", ".", "add_log", "(", "\"%d_%s\"", "%", "(", "epoch", ",", "pathlist", "[", "path", "]", ")", ",", "list", "(", "all_loss", "/", "round", ")", "+", "list", "(", "time_loss", "/", "round", ")", ")", "\n", "\n", "", "pathpred", "=", "np", ".", "stack", "(", "pathpred", ",", "axis", "=", "0", ")", "\n", "savedir", "=", "config", ".", "result_path", "+", "self", ".", "model", ".", "model_name", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "savedir", ")", "\n", "", "np", ".", "savez", "(", "savedir", "+", "\"%d_test\"", "%", "(", "epoch", ")", ",", "pred", "=", "pathpred", ")", "\n", "\n", "print", "(", "\n", "\"[Test Sum] Epoch [%3d]: time: %.4f, loss: %s, tloss: %s\"", "%", "\n", "(", "epoch", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "all_loss", "/", "round", ",", "time_loss", "/", "round", ")", "\n", ")", "\n", "\n", "return", "all_loss", ",", "time_loss", ",", "pathpred", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.controller_train": [[260, 297], ["dataloader.load_data", "log.Logger", "log.Logger", "range", "train.Controller.restore_model", "train.Controller.__train__", "log.Logger.save", "log.Logger.save", "train.Controller.__test__", "train.Controller.save_model", "list", "range"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.restore_model", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__train__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__test__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.save_model"], ["", "def", "controller_train", "(", "self", ",", "tepoch", "=", "config", ".", "epoch", ")", ":", "\n", "        ", "root_data", ",", "neighbour_data", ",", "pathlist", "=", "dataloader", ".", "load_data", "(", "5", ",", "5", ")", "\n", "\n", "last_save_epoch", "=", "self", ".", "base_epoch", "\n", "global_epoch", "=", "self", ".", "base_epoch", "+", "1", "\n", "\n", "if", "last_save_epoch", ">=", "0", ":", "\n", "            ", "self", ".", "restore_model", "(", "\n", "path", "=", "self", ".", "model_save_dir", ",", "\n", "global_step", "=", "last_save_epoch", "\n", ")", "\n", "\n", "", "logger_train", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"mae_copy\"", ",", "\"loss\"", ",", "\"nmse_train\"", ",", "\"nmse\"", ",", "\"mse\"", ",", "\"mae\"", ",", "\"mape\"", "]", ")", "\n", "# logger_valid = log.Logger(columns=[\"mae_copy\", \"lossv\", \"nmse_test\", \"nmsev\", \"msev\", \"maev\", \"mapev\"])", "\n", "# logger_test = log.Logger(columns=[\"mae_copy\", \"lossv\", \"nmse_test\", \"nmsev\", \"msev\", \"maev\", \"mapev\"] + list(range(15, 121, 15)))", "\n", "logger_test", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"mapev\"", "]", "+", "list", "(", "range", "(", "15", ",", "121", ",", "15", ")", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "tepoch", "+", "1", ")", ":", "\n", "\n", "            ", "self", ".", "__train__", "(", "global_epoch", ",", "root_data", "[", ":", ",", ":", "-", "config", ".", "valid_length", ",", ":", "]", ",", "neighbour_data", "[", ":", ",", ":", "-", "config", ".", "valid_length", ",", ":", "]", ",", "logger_train", ")", "\n", "\n", "if", "epoch", "%", "config", ".", "test_p_epoch", "==", "0", ":", "\n", "# self.__valid__(global_epoch, root_data[:, -config.valid_length:, :], neighbour_data[:, -config.valid_length:, :], logger_valid)", "\n", "                ", "self", ".", "__test__", "(", "global_epoch", ",", "root_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", ",", "neighbour_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", ",", "logger_test", ",", "pathlist", ")", "\n", "\n", "", "if", "global_epoch", ">", "self", ".", "base_epoch", "and", "global_epoch", "%", "config", ".", "save_p_epoch", "==", "0", ":", "\n", "                ", "self", ".", "save_model", "(", "\n", "path", "=", "self", ".", "model_save_dir", ",", "\n", "global_step", "=", "global_epoch", "\n", ")", "\n", "last_save_epoch", "=", "global_epoch", "\n", "\n", "", "logger_train", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_train.csv\"", ")", "\n", "# logger_valid.save(self.log_save_dir + config.global_start_time + \"_valid.csv\")", "\n", "logger_test", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_test.csv\"", ")", "\n", "\n", "global_epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.controller_test": [[298, 317], ["dataloader.load_data", "train.Controller.restore_model", "log.Logger", "train.Controller.__test__", "log.Logger.save", "list", "range"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.restore_model", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__test__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save"], ["", "", "def", "controller_test", "(", "self", ")", ":", "\n", "# root_data,pathlist  = dataloader.load_data_all()", "\n", "        ", "root_data", ",", "neighbour_data", ",", "pathlist", "=", "dataloader", ".", "load_data", "(", "5", ",", "5", ")", "\n", "\n", "last_save_epoch", "=", "self", ".", "base_epoch", "\n", "global_epoch", "=", "self", ".", "base_epoch", "+", "1", "\n", "\n", "assert", "last_save_epoch", ">=", "0", "\n", "self", ".", "restore_model", "(", "\n", "path", "=", "self", ".", "model_save_dir", ",", "\n", "global_step", "=", "last_save_epoch", "\n", ")", "\n", "\n", "# logger_test = log.Logger(columns=[\"mae_copy\", \"lossv\", \"nmse_test\", \"nmsev\", \"msev\", \"maev\", \"mapev\"] + list(range(15, 121, 15)))", "\n", "logger_test", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"mapev\"", "]", "+", "list", "(", "range", "(", "15", ",", "121", ",", "15", ")", ")", ")", "\n", "\n", "self", ".", "__test__", "(", "global_epoch", ",", "root_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", ",", "neighbour_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", ",", "logger_test", ",", "pathlist", ",", "test_interval", "=", "1", ")", "\n", "\n", "logger_test", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_test.csv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Seq2Seq_Controller.__train__": [[320, 378], ["list", "random.shuffle", "numpy.zeros", "time.time", "time.time", "range", "print", "logger.add_log", "range", "len", "dataloader.get_minibatch_all", "train.Seq2Seq_Controller.sess.run", "numpy.array", "print", "time.time", "logger.add_log", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_all", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log"], ["    ", "def", "__train__", "(", "self", ",", "epoch", ",", "root_data", ",", "logger", ")", ":", "\n", "\n", "        ", "each_num_seq", "=", "root_data", ".", "shape", "[", "1", "]", "-", "(", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ")", "+", "1", "\n", "total_batch_size", "=", "root_data", ".", "shape", "[", "0", "]", "*", "each_num_seq", "\n", "train_order", "=", "list", "(", "range", "(", "total_batch_size", ")", ")", "\n", "random", ".", "shuffle", "(", "train_order", ")", "\n", "train_order", "=", "train_order", "[", ":", "config", ".", "batch_size", "*", "1000", "]", "\n", "\n", "all_loss", "=", "np", ".", "zeros", "(", "7", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "train_steps", "=", "len", "(", "train_order", ")", "//", "config", ".", "batch_size", "\n", "\n", "for", "cstep", "in", "range", "(", "train_steps", ")", ":", "\n", "\n", "            ", "x_root", ",", "decode_seq", ",", "target_seq", "=", "dataloader", ".", "get_minibatch_all", "(", "\n", "root_data", ",", "\n", "order", "=", "train_order", "[", "cstep", "*", "config", ".", "batch_size", ":", "(", "cstep", "+", "1", ")", "*", "config", ".", "batch_size", "]", ",", "\n", "num_seq", "=", "each_num_seq", "\n", ")", "\n", "\n", "global_step", "=", "cstep", "+", "epoch", "*", "train_steps", "\n", "\n", "results", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "model", ".", "mae_copy", ",", "\n", "self", ".", "model", ".", "train_loss", ",", "\n", "self", ".", "model", ".", "nmse_train_loss", ",", "\n", "self", ".", "model", ".", "nmse_train_noend", ",", "\n", "self", ".", "model", ".", "mse_train_noend", ",", "\n", "self", ".", "model", ".", "mae_train_noend", ",", "\n", "self", ".", "model", ".", "mape_train_noend", ",", "\n", "self", ".", "model", ".", "learning_rate", ",", "\n", "self", ".", "model", ".", "optim", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "x_root", ":", "x_root", ",", "\n", "self", ".", "model", ".", "decode_seqs", ":", "decode_seq", ",", "\n", "self", ".", "model", ".", "target_seqs", ":", "target_seq", ",", "\n", "self", ".", "model", ".", "global_step", ":", "global_step", ",", "\n", "}", ")", "\n", "\n", "all_loss", "+=", "np", ".", "array", "(", "results", "[", ":", "-", "2", "]", ")", "\n", "\n", "if", "cstep", "%", "100", "==", "0", "and", "cstep", ">", "0", ":", "\n", "                ", "print", "(", "\n", "\"[Train] Epoch: [%3d][%4d/%4d] time: %.4f, lr: %.8f, loss: %s\"", "%", "\n", "(", "epoch", ",", "cstep", ",", "train_steps", ",", "time", ".", "time", "(", ")", "-", "step_time", ",", "results", "[", "-", "2", "]", ",", "all_loss", "/", "(", "cstep", "+", "1", ")", ")", "\n", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "add_log", "(", "global_step", ",", "all_loss", "/", "(", "cstep", "+", "1", ")", ")", "\n", "\n", "", "", "print", "(", "\n", "\"[Train Sum] Epoch: [%3d] time: %.4f, lr: %.8f, loss: %s\"", "%", "\n", "(", "epoch", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "results", "[", "-", "2", "]", ",", "all_loss", "/", "train_steps", ")", "\n", ")", "\n", "logger", ".", "add_log", "(", "global_step", ",", "all_loss", "/", "train_steps", ")", "\n", "\n", "return", "all_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Seq2Seq_Controller.__valid__": [[379, 429], ["list", "numpy.zeros", "time.time", "time.time", "range", "print", "logger.add_log", "range", "dataloader.get_minibatch_all", "train.Seq2Seq_Controller.sess.run", "numpy.array", "print", "time.time", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_all"], ["", "def", "__valid__", "(", "self", ",", "epoch", ",", "root_data", ",", "logger", ")", ":", "\n", "\n", "        ", "each_num_seq", "=", "root_data", ".", "shape", "[", "1", "]", "-", "(", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ")", "+", "1", "\n", "total_batch_size", "=", "root_data", ".", "shape", "[", "0", "]", "*", "each_num_seq", "\n", "train_order", "=", "list", "(", "range", "(", "total_batch_size", ")", ")", "\n", "\n", "all_loss", "=", "np", ".", "zeros", "(", "7", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "valid_steps", "=", "total_batch_size", "//", "config", ".", "batch_size", "\n", "\n", "for", "cstep", "in", "range", "(", "valid_steps", ")", ":", "\n", "\n", "            ", "x_root", ",", "decode_seq", ",", "target_seq", "=", "dataloader", ".", "get_minibatch_all", "(", "\n", "root_data", ",", "\n", "order", "=", "train_order", "[", "cstep", "*", "config", ".", "batch_size", ":", "(", "cstep", "+", "1", ")", "*", "config", ".", "batch_size", "]", ",", "\n", "num_seq", "=", "each_num_seq", "\n", ")", "\n", "\n", "results", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "model", ".", "mae_copy", ",", "\n", "self", ".", "model", ".", "test_loss", ",", "\n", "self", ".", "model", ".", "nmse_test_loss", ",", "\n", "self", ".", "model", ".", "nmse_test_noend", ",", "\n", "self", ".", "model", ".", "mse_test_noend", ",", "\n", "self", ".", "model", ".", "mae_test_noend", ",", "\n", "self", ".", "model", ".", "mape_test_noend", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "x_root", ":", "x_root", ",", "\n", "self", ".", "model", ".", "decode_seqs", ":", "decode_seq", ",", "\n", "self", ".", "model", ".", "target_seqs", ":", "target_seq", ",", "\n", "}", ")", "\n", "\n", "all_loss", "+=", "np", ".", "array", "(", "results", "[", ":", "7", "]", ")", "\n", "\n", "if", "cstep", "%", "100", "==", "0", "and", "cstep", ">", "0", ":", "\n", "                ", "print", "(", "\n", "\"[Valid] Epoch: [%3d][%4d/%4d] time: %.4f, loss: %s\"", "%", "\n", "(", "epoch", ",", "cstep", ",", "valid_steps", ",", "time", ".", "time", "(", ")", "-", "step_time", ",", "all_loss", "/", "(", "cstep", "+", "1", ")", ")", "\n", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "print", "(", "\n", "\"[Valid Sum] Epoch: [%3d] time: %.4f, loss: %s\"", "%", "\n", "(", "epoch", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "all_loss", "/", "valid_steps", ")", "\n", ")", "\n", "logger", ".", "add_log", "(", "epoch", ",", "all_loss", "/", "valid_steps", ")", "\n", "\n", "return", "all_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Seq2Seq_Controller.__test__": [[430, 511], ["list", "numpy.zeros", "numpy.zeros", "time.time", "time.time", "list", "range", "numpy.stack", "numpy.savez", "print", "range", "list", "time.time", "range", "numpy.concatenate", "numpy.stack.append", "logger.add_log", "os.path.exists", "os.makedirs", "dataloader.get_minibatch_4_test", "train.Seq2Seq_Controller.sess.run", "list", "range", "numpy.concatenate", "numpy.mean", "numpy.mean", "numpy.concatenate.append", "print", "numpy.stack", "numpy.savez", "train.Seq2Seq_Controller.sess.run", "list.append", "utils.mape", "utils.mape", "os.path.exists", "os.makedirs", "list", "list", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_4_test", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.utils.mape", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.utils.mape"], ["", "def", "__test__", "(", "self", ",", "epoch", ",", "root_data", ",", "logger", ",", "pathlist", ",", "test_interval", "=", "10", ")", ":", "\n", "\n", "        ", "each_num_seq", "=", "root_data", ".", "shape", "[", "1", "]", "-", "(", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ")", "+", "1", "\n", "total_batch_size", "=", "root_data", ".", "shape", "[", "0", "]", "*", "each_num_seq", "\n", "train_order", "=", "list", "(", "range", "(", "total_batch_size", ")", ")", "\n", "\n", "all_loss", "=", "np", ".", "zeros", "(", "1", ")", "\n", "time_loss", "=", "np", ".", "zeros", "(", "config", ".", "out_seq_length", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "round", "=", "0", "\n", "pathpred", "=", "list", "(", ")", "\n", "for", "path", "in", "range", "(", "0", ",", "root_data", ".", "shape", "[", "0", "]", ",", "test_interval", ")", ":", "\n", "            ", "predlist", "=", "list", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "for", "cstep", "in", "range", "(", "each_num_seq", "//", "config", ".", "batch_size", ")", ":", "\n", "                ", "round", "+=", "1", "\n", "\n", "x_root", ",", "decode_seq", ",", "target_seq", "=", "dataloader", ".", "get_minibatch_4_test", "(", "\n", "root_data", ",", "\n", "path", ",", "\n", "cstep", "\n", ")", "\n", "\n", "state", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "model", ".", "net_rnn", ".", "final_state_encode", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "x_root", ":", "x_root", "\n", "}", ")", "\n", "\n", "spred", "=", "decode_seq", "[", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "\n", "spredlist", "=", "list", "(", ")", "\n", "for", "_", "in", "range", "(", "config", ".", "out_seq_length", ")", ":", "# max sentence length", "\n", "                    ", "spred", ",", "state", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "model", ".", "test_net", ".", "outputs", ",", "\n", "self", ".", "model", ".", "net_rnn", ".", "final_state_decode", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "net_rnn", ".", "initial_state_decode", ":", "state", ",", "\n", "self", ".", "model", ".", "decode_seqs_test", ":", "spred", "\n", "}", ")", "\n", "spredlist", ".", "append", "(", "spred", ")", "\n", "\n", "", "pred", "=", "np", ".", "concatenate", "(", "spredlist", ",", "axis", "=", "1", ")", "\n", "all_loss", "+=", "np", ".", "mean", "(", "utils", ".", "mape", "(", "pred", ",", "target_seq", "[", ":", ",", ":", "-", "1", ",", ":", "]", ")", ")", "\n", "time_loss", "+=", "np", ".", "mean", "(", "utils", ".", "mape", "(", "pred", "[", ":", ",", ":", "config", ".", "out_seq_length", ",", "0", "]", ",", "target_seq", "[", ":", ",", ":", "config", ".", "out_seq_length", ",", "0", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "predlist", ".", "append", "(", "pred", ")", "\n", "\n", "", "predlist", "=", "np", ".", "concatenate", "(", "predlist", ",", "axis", "=", "0", ")", "\n", "pathpred", ".", "append", "(", "predlist", ")", "\n", "\n", "if", "path", "%", "500", "==", "0", ":", "\n", "                ", "print", "(", "\n", "\"[Test] Epoch: [%3d][%5d/%5d] time: %.4f, loss: %s, tloss: %s\"", "%", "\n", "(", "epoch", ",", "path", ",", "root_data", ".", "shape", "[", "0", "]", ",", "time", ".", "time", "(", ")", "-", "step_time", ",", "all_loss", "/", "round", ",", "time_loss", "/", "round", ")", "\n", ")", "\n", "\n", "tmppathpred", "=", "np", ".", "stack", "(", "pathpred", ",", "axis", "=", "0", ")", "\n", "savedir", "=", "config", ".", "result_path", "+", "self", ".", "model", ".", "model_name", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "savedir", ")", "\n", "", "np", ".", "savez", "(", "savedir", "+", "\"%d_test\"", "%", "(", "epoch", ")", ",", "pred", "=", "tmppathpred", ")", "\n", "\n", "", "logger", ".", "add_log", "(", "\"%d_%s\"", "%", "(", "epoch", ",", "pathlist", "[", "path", "]", ")", ",", "list", "(", "all_loss", "/", "round", ")", "+", "list", "(", "time_loss", "/", "round", ")", ")", "\n", "\n", "", "pathpred", "=", "np", ".", "stack", "(", "pathpred", ",", "axis", "=", "0", ")", "\n", "savedir", "=", "config", ".", "result_path", "+", "self", ".", "model", ".", "model_name", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "savedir", ")", "\n", "", "np", ".", "savez", "(", "savedir", "+", "\"%d_test\"", "%", "(", "epoch", ")", ",", "pred", "=", "pathpred", ")", "\n", "\n", "\n", "print", "(", "\n", "\"[Test Sum] Epoch [%3d]: time: %.4f, loss: %s, tloss: %s\"", "%", "\n", "(", "epoch", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "all_loss", "/", "round", ",", "time_loss", "/", "round", ")", "\n", ")", "\n", "\n", "return", "all_loss", ",", "time_loss", ",", "pathpred", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Seq2Seq_Controller.controller_train": [[512, 554], ["dataloader.load_data", "log.Logger", "log.Logger", "range", "train.Seq2Seq_Controller.restore_model", "train.Seq2Seq_Controller.__train__", "log.Logger.save", "log.Logger.save", "train.Seq2Seq_Controller.__test__", "train.Seq2Seq_Controller.save_model", "list", "range"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.restore_model", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__train__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__test__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.save_model"], ["", "def", "controller_train", "(", "self", ",", "tepoch", "=", "config", ".", "epoch", ")", ":", "\n", "# root_data, pathlist  = dataloader.load_data_all()", "\n", "        ", "root_data", ",", "neighbour_data", ",", "pathlist", "=", "dataloader", ".", "load_data", "(", "5", ",", "5", ")", "\n", "del", "neighbour_data", "\n", "\n", "last_save_epoch", "=", "self", ".", "base_epoch", "\n", "global_epoch", "=", "self", ".", "base_epoch", "+", "1", "\n", "\n", "if", "last_save_epoch", ">=", "0", ":", "\n", "            ", "self", ".", "restore_model", "(", "\n", "path", "=", "self", ".", "model_save_dir", ",", "\n", "global_step", "=", "last_save_epoch", "\n", ")", "\n", "# tl.files.save_npz_dict(self.model.train_net.all_params, name=self.model_save_dir + \"%d.npz\" % global_epoch, sess=self.sess)", "\n", "# return", "\n", "\n", "# logger_train = log.Logger(columns=[\"mae_copy\", \"loss\", \"nmse_train\", \"nmse\", \"mse\", \"mae\", \"mape\", \"lossv\", \"nmse_test\", \"nmsev\", \"msev\", \"maev\", \"mapev\"])", "\n", "", "logger_train", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"mae_copy\"", ",", "\"loss\"", ",", "\"nmse_train\"", ",", "\"nmse\"", ",", "\"mse\"", ",", "\"mae\"", ",", "\"mape\"", "]", ")", "\n", "# logger_valid = log.Logger(columns=[\"mae_copy\", \"lossv\", \"nmse_test\", \"nmsev\", \"msev\", \"maev\", \"mapev\"])", "\n", "# logger_test = log.Logger(columns=[\"mae_copy\", \"lossv\", \"nmse_test\", \"nmsev\", \"msev\", \"maev\", \"mapev\"] + list(range(15, 121, 15)))", "\n", "logger_test", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"mapev\"", "]", "+", "list", "(", "range", "(", "15", ",", "121", ",", "15", ")", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "tepoch", "+", "1", ")", ":", "\n", "\n", "            ", "self", ".", "__train__", "(", "global_epoch", ",", "root_data", "[", ":", ",", ":", "-", "config", ".", "valid_length", ",", ":", "]", ",", "logger_train", ")", "\n", "\n", "if", "epoch", "%", "config", ".", "test_p_epoch", "==", "0", ":", "\n", "# self.__valid__(global_epoch, root_data[:, -config.valid_length:, :], logger_valid)", "\n", "                ", "self", ".", "__test__", "(", "global_epoch", ",", "root_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", ",", "logger_test", ",", "pathlist", ")", "\n", "\n", "", "if", "global_epoch", ">", "self", ".", "base_epoch", "and", "global_epoch", "%", "config", ".", "save_p_epoch", "==", "0", ":", "\n", "                ", "self", ".", "save_model", "(", "\n", "path", "=", "self", ".", "model_save_dir", ",", "\n", "global_step", "=", "global_epoch", "\n", ")", "\n", "last_save_epoch", "=", "global_epoch", "\n", "\n", "", "logger_train", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_train.csv\"", ")", "\n", "# logger_valid.save(self.log_save_dir + config.global_start_time + \"_valid.csv\")", "\n", "logger_test", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_test.csv\"", ")", "\n", "\n", "global_epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Seq2Seq_Controller.controller_test": [[555, 577], ["dataloader.load_data", "train.Seq2Seq_Controller.restore_model", "log.Logger", "train.Seq2Seq_Controller.__test__", "log.Logger.save", "list", "range"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.restore_model", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__test__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save"], ["", "", "def", "controller_test", "(", "self", ")", ":", "\n", "# root_data,pathlist  = dataloader.load_data_all()", "\n", "        ", "root_data", ",", "neighbour_data", ",", "pathlist", "=", "dataloader", ".", "load_data", "(", "5", ",", "5", ")", "\n", "del", "neighbour_data", "\n", "# event_data = dataloader.load_event_data()", "\n", "\n", "last_save_epoch", "=", "self", ".", "base_epoch", "\n", "global_epoch", "=", "self", ".", "base_epoch", "+", "1", "\n", "\n", "assert", "last_save_epoch", ">=", "0", "\n", "self", ".", "restore_model", "(", "\n", "path", "=", "self", ".", "model_save_dir", ",", "\n", "global_step", "=", "last_save_epoch", "\n", ")", "\n", "\n", "# logger_test = log.Logger(columns=[\"mae_copy\", \"lossv\", \"nmse_test\", \"nmsev\", \"msev\", \"maev\", \"mapev\"] + list(range(15, 121, 15)))", "\n", "logger_test", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"mapev\"", "]", "+", "list", "(", "range", "(", "15", ",", "121", ",", "15", ")", ")", ")", "\n", "\n", "self", ".", "__test__", "(", "global_epoch", ",", "root_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", ",", "logger_test", ",", "pathlist", ",", "test_interval", "=", "1", ")", "\n", "# self.__test_event__(global_epoch, root_data[:, -config.valid_length:, :], event_data, logger_test, pathlist, test_interval=1)", "\n", "\n", "logger_test", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_test.csv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.WideDeep_Controller.__train__": [[580, 641], ["list", "random.shuffle", "numpy.zeros", "time.time", "time.time", "range", "print", "logger.add_log", "range", "len", "dataloader.get_minibatch_features", "train.WideDeep_Controller.sess.run", "numpy.array", "print", "time.time", "logger.add_log", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_features", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log"], ["    ", "def", "__train__", "(", "self", ",", "epoch", ",", "root_data", ",", "features_info", ",", "features_time", ",", "logger", ")", ":", "\n", "\n", "        ", "each_num_seq", "=", "root_data", ".", "shape", "[", "1", "]", "-", "(", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ")", "+", "1", "\n", "total_batch_size", "=", "root_data", ".", "shape", "[", "0", "]", "*", "each_num_seq", "\n", "train_order", "=", "list", "(", "range", "(", "total_batch_size", ")", ")", "\n", "random", ".", "shuffle", "(", "train_order", ")", "\n", "train_order", "=", "train_order", "[", ":", "config", ".", "batch_size", "*", "1000", "]", "\n", "\n", "all_loss", "=", "np", ".", "zeros", "(", "7", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "train_steps", "=", "len", "(", "train_order", ")", "//", "config", ".", "batch_size", "\n", "\n", "for", "cstep", "in", "range", "(", "train_steps", ")", ":", "\n", "\n", "            ", "x_root", ",", "x_features", ",", "decode_seq", ",", "target_seq", "=", "dataloader", ".", "get_minibatch_features", "(", "\n", "root_data", ",", "\n", "features_info", ",", "\n", "features_time", ",", "\n", "order", "=", "train_order", "[", "cstep", "*", "config", ".", "batch_size", ":", "(", "cstep", "+", "1", ")", "*", "config", ".", "batch_size", "]", ",", "\n", "num_seq", "=", "each_num_seq", "\n", ")", "\n", "\n", "global_step", "=", "cstep", "+", "epoch", "*", "train_steps", "\n", "\n", "results", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "model", ".", "mae_copy", ",", "\n", "self", ".", "model", ".", "train_loss", ",", "\n", "self", ".", "model", ".", "nmse_train_loss", ",", "\n", "self", ".", "model", ".", "nmse_train_noend", ",", "\n", "self", ".", "model", ".", "mse_train_noend", ",", "\n", "self", ".", "model", ".", "mae_train_noend", ",", "\n", "self", ".", "model", ".", "mape_train_noend", ",", "\n", "self", ".", "model", ".", "learning_rate", ",", "\n", "self", ".", "model", ".", "optim", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "x_root", ":", "x_root", ",", "\n", "self", ".", "model", ".", "features", ":", "x_features", ",", "\n", "self", ".", "model", ".", "decode_seqs", ":", "decode_seq", ",", "\n", "self", ".", "model", ".", "target_seqs", ":", "target_seq", ",", "\n", "self", ".", "model", ".", "global_step", ":", "global_step", ",", "\n", "}", ")", "\n", "\n", "all_loss", "+=", "np", ".", "array", "(", "results", "[", ":", "-", "2", "]", ")", "\n", "\n", "if", "cstep", "%", "100", "==", "0", "and", "cstep", ">", "0", ":", "\n", "                ", "print", "(", "\n", "\"[Train] Epoch: [%3d][%4d/%4d] time: %.4f, lr: %.8f, loss: %s\"", "%", "\n", "(", "epoch", ",", "cstep", ",", "train_steps", ",", "time", ".", "time", "(", ")", "-", "step_time", ",", "results", "[", "-", "2", "]", ",", "all_loss", "/", "(", "cstep", "+", "1", ")", ")", "\n", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "add_log", "(", "global_step", ",", "all_loss", "/", "(", "cstep", "+", "1", ")", ")", "\n", "\n", "", "", "print", "(", "\n", "\"[Train Sum] Epoch: [%3d] time: %.4f, lr: %.8f, loss: %s\"", "%", "\n", "(", "epoch", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "results", "[", "-", "2", "]", ",", "all_loss", "/", "train_steps", ")", "\n", ")", "\n", "logger", ".", "add_log", "(", "global_step", ",", "all_loss", "/", "train_steps", ")", "\n", "\n", "return", "all_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.WideDeep_Controller.__test__": [[642, 724], ["numpy.zeros", "numpy.zeros", "time.time", "time.time", "list", "range", "numpy.stack", "numpy.savez", "print", "list", "time.time", "range", "numpy.concatenate", "numpy.stack.append", "logger.add_log", "os.path.exists", "os.makedirs", "dataloader.get_minibatch_features_4_test", "train.WideDeep_Controller.sess.run", "list", "range", "numpy.concatenate", "numpy.mean", "numpy.mean", "numpy.concatenate.append", "print", "numpy.stack", "numpy.savez", "train.WideDeep_Controller.sess.run", "list.append", "utils.mape", "utils.mape", "os.path.exists", "os.makedirs", "list", "list", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_features_4_test", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.utils.mape", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.utils.mape"], ["", "def", "__test__", "(", "self", ",", "epoch", ",", "root_data", ",", "features_info", ",", "features_time", ",", "logger", ",", "pathlist", ",", "test_interval", "=", "10", ")", ":", "\n", "\n", "        ", "each_num_seq", "=", "root_data", ".", "shape", "[", "1", "]", "-", "(", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ")", "+", "1", "\n", "total_batch_size", "=", "root_data", ".", "shape", "[", "0", "]", "*", "each_num_seq", "\n", "\n", "all_loss", "=", "np", ".", "zeros", "(", "1", ")", "\n", "time_loss", "=", "np", ".", "zeros", "(", "config", ".", "out_seq_length", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "round", "=", "0", "\n", "pathpred", "=", "list", "(", ")", "\n", "for", "path", "in", "range", "(", "0", ",", "root_data", ".", "shape", "[", "0", "]", ",", "test_interval", ")", ":", "\n", "            ", "predlist", "=", "list", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "for", "cstep", "in", "range", "(", "each_num_seq", "//", "config", ".", "batch_size", ")", ":", "\n", "                ", "round", "+=", "1", "\n", "\n", "x_root", ",", "x_features", ",", "decode_seq", ",", "target_seq", "=", "dataloader", ".", "get_minibatch_features_4_test", "(", "\n", "root_data", ",", "\n", "features_info", ",", "\n", "features_time", ",", "\n", "path", ",", "\n", "cstep", "\n", ")", "\n", "\n", "state", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "model", ".", "net_rnn", ".", "final_state_encode", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "x_root", ":", "x_root", ",", "\n", "self", ".", "model", ".", "features", ":", "x_features", "\n", "}", ")", "\n", "\n", "spred", "=", "decode_seq", "[", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "\n", "spredlist", "=", "list", "(", ")", "\n", "for", "_", "in", "range", "(", "config", ".", "out_seq_length", ")", ":", "# max sentence length", "\n", "                    ", "spred", ",", "state", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "model", ".", "test_net", ".", "outputs", ",", "\n", "self", ".", "model", ".", "net_rnn", ".", "final_state_decode", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "net_rnn", ".", "initial_state_decode", ":", "state", ",", "\n", "self", ".", "model", ".", "decode_seqs_test", ":", "spred", ",", "\n", "self", ".", "model", ".", "features_test", ":", "x_features", "[", ":", ",", "_", ":", "_", "+", "1", ",", ":", "]", "\n", "}", ")", "\n", "spredlist", ".", "append", "(", "spred", ")", "\n", "\n", "", "pred", "=", "np", ".", "concatenate", "(", "spredlist", ",", "axis", "=", "1", ")", "\n", "all_loss", "+=", "np", ".", "mean", "(", "utils", ".", "mape", "(", "pred", ",", "target_seq", "[", ":", ",", ":", "-", "1", ",", ":", "]", ")", ")", "\n", "time_loss", "+=", "np", ".", "mean", "(", "utils", ".", "mape", "(", "pred", "[", ":", ",", ":", "config", ".", "out_seq_length", ",", "0", "]", ",", "target_seq", "[", ":", ",", ":", "config", ".", "out_seq_length", ",", "0", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "predlist", ".", "append", "(", "pred", ")", "\n", "\n", "", "predlist", "=", "np", ".", "concatenate", "(", "predlist", ",", "axis", "=", "0", ")", "\n", "pathpred", ".", "append", "(", "predlist", ")", "\n", "\n", "if", "path", "%", "500", "==", "0", ":", "\n", "                ", "print", "(", "\n", "\"[Test] Epoch: [%3d][%5d/%5d] time: %.4f, loss: %s, tloss: %s\"", "%", "\n", "(", "epoch", ",", "path", ",", "root_data", ".", "shape", "[", "0", "]", ",", "time", ".", "time", "(", ")", "-", "step_time", ",", "all_loss", "/", "round", ",", "time_loss", "/", "round", ")", "\n", ")", "\n", "tmppathpred", "=", "np", ".", "stack", "(", "pathpred", ",", "axis", "=", "0", ")", "\n", "savedir", "=", "config", ".", "result_path", "+", "self", ".", "model", ".", "model_name", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "savedir", ")", "\n", "", "np", ".", "savez", "(", "savedir", "+", "\"%d_test\"", "%", "(", "epoch", ")", ",", "pred", "=", "tmppathpred", ")", "\n", "", "logger", ".", "add_log", "(", "\"%d_%s\"", "%", "(", "epoch", ",", "pathlist", "[", "path", "]", ")", ",", "list", "(", "all_loss", "/", "round", ")", "+", "list", "(", "time_loss", "/", "round", ")", ")", "\n", "\n", "", "pathpred", "=", "np", ".", "stack", "(", "pathpred", ",", "axis", "=", "0", ")", "\n", "\n", "savedir", "=", "config", ".", "result_path", "+", "self", ".", "model", ".", "model_name", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "savedir", ")", "\n", "", "np", ".", "savez", "(", "savedir", "+", "\"%d_test\"", "%", "(", "epoch", ")", ",", "pred", "=", "pathpred", ")", "\n", "\n", "print", "(", "\n", "\"[Test Sum] Epoch [%3d]: time: %.4f, loss: %s, tloss: %s\"", "%", "\n", "(", "epoch", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "all_loss", "/", "round", ",", "time_loss", "/", "round", ")", "\n", ")", "\n", "\n", "return", "all_loss", ",", "time_loss", ",", "pathpred", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.WideDeep_Controller.controller_train": [[725, 767], ["dataloader.load_data", "dataloader.load_features", "log.Logger", "log.Logger", "range", "train.WideDeep_Controller.restore_model", "train.WideDeep_Controller.__train__", "log.Logger.save", "log.Logger.save", "train.WideDeep_Controller.__test__", "train.WideDeep_Controller.save_model", "list", "range"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_features", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.restore_model", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__train__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__test__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.save_model"], ["", "def", "controller_train", "(", "self", ",", "tepoch", "=", "config", ".", "epoch", ")", ":", "\n", "# root_data, pathlist  = dataloader.load_data_all()", "\n", "        ", "root_data", ",", "neighbour_data", ",", "pathlist", "=", "dataloader", ".", "load_data", "(", "5", ",", "5", ")", "\n", "del", "neighbour_data", "\n", "features_info", ",", "features_time", ",", "features_pathlist", "=", "dataloader", ".", "load_features", "(", "pathlist", ")", "\n", "\n", "assert", "features_info", ".", "shape", "[", "0", "]", "==", "root_data", ".", "shape", "[", "0", "]", "\n", "assert", "features_pathlist", "==", "pathlist", "\n", "\n", "last_save_epoch", "=", "self", ".", "base_epoch", "\n", "global_epoch", "=", "self", ".", "base_epoch", "+", "1", "\n", "\n", "if", "last_save_epoch", ">=", "0", ":", "\n", "            ", "self", ".", "restore_model", "(", "\n", "path", "=", "self", ".", "model_save_dir", ",", "\n", "global_step", "=", "last_save_epoch", "\n", ")", "\n", "\n", "", "logger_train", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"mae_copy\"", ",", "\"loss\"", ",", "\"nmse_train\"", ",", "\"nmse\"", ",", "\"mse\"", ",", "\"mae\"", ",", "\"mape\"", "]", ")", "\n", "# logger_valid = log.Logger(columns=[\"mae_copy\", \"lossv\", \"nmse_test\", \"nmsev\", \"msev\", \"maev\", \"mapev\"])", "\n", "logger_test", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"mapev\"", "]", "+", "list", "(", "range", "(", "15", ",", "121", ",", "15", ")", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "tepoch", "+", "1", ")", ":", "\n", "\n", "            ", "self", ".", "__train__", "(", "global_epoch", ",", "root_data", "[", ":", ",", ":", "-", "config", ".", "valid_length", ",", ":", "]", ",", "features_info", ",", "features_time", ",", "logger_train", ")", "\n", "\n", "if", "epoch", "%", "config", ".", "test_p_epoch", "==", "0", ":", "\n", "# self.__valid__(global_epoch, root_data[:, -config.valid_length:, :], logger_valid)", "\n", "                ", "self", ".", "__test__", "(", "global_epoch", ",", "root_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", ",", "features_info", ",", "features_time", ",", "logger_test", ",", "pathlist", ")", "\n", "\n", "", "if", "global_epoch", ">", "self", ".", "base_epoch", "and", "global_epoch", "%", "config", ".", "save_p_epoch", "==", "0", ":", "\n", "                ", "self", ".", "save_model", "(", "\n", "path", "=", "self", ".", "model_save_dir", ",", "\n", "global_step", "=", "global_epoch", "\n", ")", "\n", "last_save_epoch", "=", "global_epoch", "\n", "\n", "", "logger_train", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_train.csv\"", ")", "\n", "# logger_valid.save(self.log_save_dir + config.global_start_time + \"_valid.csv\")", "\n", "logger_test", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_test.csv\"", ")", "\n", "\n", "global_epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.WideDeep_Controller.controller_test": [[768, 791], ["dataloader.load_data", "dataloader.load_features", "train.WideDeep_Controller.restore_model", "log.Logger", "train.WideDeep_Controller.__test__", "log.Logger.save", "list", "range"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_features", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.restore_model", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__test__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save"], ["", "", "def", "controller_test", "(", "self", ")", ":", "\n", "# root_data,pathlist  = dataloader.load_data_all()", "\n", "        ", "root_data", ",", "neighbour_data", ",", "pathlist", "=", "dataloader", ".", "load_data", "(", "5", ",", "5", ")", "\n", "del", "neighbour_data", "\n", "features_info", ",", "features_time", ",", "features_pathlist", "=", "dataloader", ".", "load_features", "(", "pathlist", ")", "\n", "\n", "assert", "features_info", ".", "shape", "[", "0", "]", "==", "root_data", ".", "shape", "[", "0", "]", "\n", "assert", "features_pathlist", "==", "pathlist", "\n", "\n", "last_save_epoch", "=", "self", ".", "base_epoch", "\n", "global_epoch", "=", "self", ".", "base_epoch", "+", "1", "\n", "\n", "assert", "last_save_epoch", ">=", "0", "\n", "self", ".", "restore_model", "(", "\n", "path", "=", "self", ".", "model_save_dir", ",", "\n", "global_step", "=", "last_save_epoch", "\n", ")", "\n", "\n", "logger_test", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"mapev\"", "]", "+", "list", "(", "range", "(", "15", ",", "121", ",", "15", ")", ")", ")", "\n", "\n", "self", ".", "__test__", "(", "global_epoch", ",", "root_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", ",", "features_info", ",", "features_time", ",", "logger_test", ",", "pathlist", ",", "test_interval", "=", "1", ")", "\n", "\n", "logger_test", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_test.csv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Query_Controller.__train__": [[794, 862], ["list", "random.shuffle", "numpy.zeros", "time.time", "time.time", "range", "print", "logger.add_log", "range", "len", "dataloader.get_minibatch_all_query", "train.Query_Controller.sess.run", "numpy.array", "print", "time.time", "logger.add_log", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_all_query", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log"], ["    ", "def", "__train__", "(", "self", ",", "epoch", ",", "root_data", ",", "query_data", ",", "logger", ",", "pathlist", ")", ":", "\n", "\n", "        ", "each_num_seq", "=", "root_data", ".", "shape", "[", "1", "]", "-", "(", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ")", "+", "1", "\n", "total_batch_size", "=", "root_data", ".", "shape", "[", "0", "]", "*", "each_num_seq", "\n", "train_order", "=", "list", "(", "range", "(", "total_batch_size", ")", ")", "\n", "random", ".", "shuffle", "(", "train_order", ")", "\n", "train_order", "=", "train_order", "[", ":", "config", ".", "batch_size", "*", "1000", "]", "\n", "\n", "all_loss", "=", "np", ".", "zeros", "(", "13", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "train_steps", "=", "len", "(", "train_order", ")", "//", "config", ".", "batch_size", "\n", "\n", "for", "cstep", "in", "range", "(", "train_steps", ")", ":", "\n", "\n", "            ", "x_root", ",", "decode_seq", ",", "target_seq", ",", "x_query", ",", "decode_query", "=", "dataloader", ".", "get_minibatch_all_query", "(", "\n", "root_data", ",", "\n", "query_data", ",", "\n", "pathlist", ",", "\n", "order", "=", "train_order", "[", "cstep", "*", "config", ".", "batch_size", ":", "(", "cstep", "+", "1", ")", "*", "config", ".", "batch_size", "]", ",", "\n", "num_seq", "=", "each_num_seq", "\n", ")", "\n", "\n", "global_step", "=", "cstep", "+", "epoch", "*", "train_steps", "\n", "\n", "results", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "model", ".", "mae_copy", ",", "\n", "self", ".", "model", ".", "train_loss", ",", "\n", "self", ".", "model", ".", "nmse_train_loss", ",", "\n", "self", ".", "model", ".", "nmse_train_noend", ",", "\n", "self", ".", "model", ".", "mse_train_noend", ",", "\n", "self", ".", "model", ".", "mae_train_noend", ",", "\n", "self", ".", "model", ".", "mape_train_noend", ",", "\n", "self", ".", "model", ".", "test_loss", ",", "\n", "self", ".", "model", ".", "nmse_test_loss", ",", "\n", "self", ".", "model", ".", "nmse_test_noend", ",", "\n", "self", ".", "model", ".", "mse_test_noend", ",", "\n", "self", ".", "model", ".", "mae_test_noend", ",", "\n", "self", ".", "model", ".", "mape_test_noend", ",", "\n", "self", ".", "model", ".", "learning_rate", ",", "\n", "self", ".", "model", ".", "optim", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "x_root", ":", "x_root", ",", "\n", "self", ".", "model", ".", "decode_seqs", ":", "decode_seq", ",", "\n", "self", ".", "model", ".", "target_seqs", ":", "target_seq", ",", "\n", "self", ".", "model", ".", "query_x", ":", "x_query", ",", "\n", "self", ".", "model", ".", "query_decode_seq", ":", "decode_query", ",", "\n", "self", ".", "model", ".", "global_step", ":", "global_step", ",", "\n", "}", ")", "\n", "\n", "all_loss", "+=", "np", ".", "array", "(", "results", "[", ":", "-", "2", "]", ")", "\n", "\n", "if", "cstep", "%", "100", "==", "0", "and", "cstep", ">", "0", ":", "\n", "                ", "print", "(", "\n", "\"[Train] Epoch: [%3d][%4d/%4d] time: %.4f, lr: %.8f, loss: %s\"", "%", "\n", "(", "epoch", ",", "cstep", ",", "train_steps", ",", "time", ".", "time", "(", ")", "-", "step_time", ",", "results", "[", "-", "2", "]", ",", "all_loss", "/", "(", "cstep", "+", "1", ")", ")", "\n", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "add_log", "(", "global_step", ",", "all_loss", "/", "(", "cstep", "+", "1", ")", ")", "\n", "\n", "", "", "print", "(", "\n", "\"[Train Sum] Epoch: [%3d] time: %.4f, lr: %.8f, loss: %s\"", "%", "\n", "(", "epoch", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "results", "[", "-", "2", "]", ",", "all_loss", "/", "train_steps", ")", "\n", ")", "\n", "logger", ".", "add_log", "(", "global_step", ",", "all_loss", "/", "train_steps", ")", "\n", "\n", "return", "all_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Query_Controller.__test__": [[864, 946], ["list", "numpy.zeros", "numpy.zeros", "time.time", "time.time", "list", "range", "numpy.stack", "numpy.savez", "print", "range", "list", "time.time", "range", "numpy.concatenate", "numpy.stack.append", "logger.add_log", "os.path.exists", "os.makedirs", "dataloader.get_minibatch_4_test_query", "train.Query_Controller.sess.run", "numpy.array", "numpy.mean", "numpy.concatenate.append", "print", "numpy.stack", "numpy.savez", "utils.mape", "os.path.exists", "os.makedirs", "list", "list", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_4_test_query", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.utils.mape"], ["", "def", "__test__", "(", "self", ",", "epoch", ",", "root_data", ",", "query_data", ",", "logger", ",", "pathlist", ",", "test_interval", "=", "10", ")", ":", "\n", "\n", "        ", "each_num_seq", "=", "root_data", ".", "shape", "[", "1", "]", "-", "(", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ")", "+", "1", "\n", "total_batch_size", "=", "root_data", ".", "shape", "[", "0", "]", "*", "each_num_seq", "\n", "train_order", "=", "list", "(", "range", "(", "total_batch_size", ")", ")", "\n", "\n", "all_loss", "=", "np", ".", "zeros", "(", "7", ")", "\n", "time_loss", "=", "np", ".", "zeros", "(", "config", ".", "out_seq_length", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "round", "=", "0", "\n", "pathpred", "=", "list", "(", ")", "\n", "for", "path", "in", "range", "(", "0", ",", "root_data", ".", "shape", "[", "0", "]", ",", "test_interval", ")", ":", "\n", "            ", "predlist", "=", "list", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "for", "cstep", "in", "range", "(", "each_num_seq", "//", "config", ".", "batch_size", ")", ":", "\n", "                ", "round", "+=", "1", "\n", "\n", "x_root", ",", "decode_seq", ",", "target_seq", ",", "x_query", ",", "decode_query", "=", "dataloader", ".", "get_minibatch_4_test_query", "(", "\n", "root_data", ",", "\n", "query_data", ",", "\n", "path", ",", "\n", "pathlist", ",", "\n", "cstep", "\n", ")", "\n", "\n", "allresults", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "model", ".", "test_net", ".", "outputs", ",", "\n", "self", ".", "model", ".", "mae_copy", ",", "\n", "self", ".", "model", ".", "test_loss", ",", "\n", "self", ".", "model", ".", "nmse_test_loss", ",", "\n", "self", ".", "model", ".", "nmse_test_noend", ",", "\n", "self", ".", "model", ".", "mse_test_noend", ",", "\n", "self", ".", "model", ".", "mae_test_noend", ",", "\n", "self", ".", "model", ".", "mape_test_noend", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "x_root", ":", "x_root", ",", "\n", "self", ".", "model", ".", "decode_seqs", ":", "decode_seq", ",", "\n", "self", ".", "model", ".", "target_seqs", ":", "target_seq", ",", "\n", "self", ".", "model", ".", "query_x", ":", "x_query", ",", "\n", "self", ".", "model", ".", "query_decode_seq", ":", "decode_query", "\n", "}", ")", "\n", "pred", "=", "allresults", "[", "0", "]", "\n", "results", "=", "allresults", "[", "1", ":", "]", "\n", "\n", "all_loss", "+=", "np", ".", "array", "(", "results", "[", ":", "7", "]", ")", "\n", "time_loss", "+=", "np", ".", "mean", "(", "utils", ".", "mape", "(", "pred", "[", ":", ",", ":", "config", ".", "out_seq_length", ",", "0", "]", ",", "target_seq", "[", ":", ",", ":", "config", ".", "out_seq_length", ",", "0", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "predlist", ".", "append", "(", "pred", ")", "\n", "\n", "", "predlist", "=", "np", ".", "concatenate", "(", "predlist", ",", "axis", "=", "0", ")", "\n", "pathpred", ".", "append", "(", "predlist", ")", "\n", "\n", "if", "path", "%", "500", "==", "0", ":", "\n", "                ", "print", "(", "\n", "\"[Test] Epoch: [%3d][%5d/%5d] time: %.4f, loss: %s, tloss: %s\"", "%", "\n", "(", "epoch", ",", "path", ",", "root_data", ".", "shape", "[", "0", "]", ",", "time", ".", "time", "(", ")", "-", "step_time", ",", "all_loss", "/", "round", ",", "time_loss", "/", "round", ")", "\n", ")", "\n", "\n", "tmppathpred", "=", "np", ".", "stack", "(", "pathpred", ",", "axis", "=", "0", ")", "\n", "savedir", "=", "config", ".", "result_path", "+", "self", ".", "model", ".", "model_name", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "savedir", ")", "\n", "", "np", ".", "savez", "(", "savedir", "+", "\"%d_test\"", "%", "(", "epoch", ")", ",", "pred", "=", "tmppathpred", ")", "\n", "\n", "", "logger", ".", "add_log", "(", "\"%d_%s\"", "%", "(", "epoch", ",", "pathlist", "[", "path", "]", ")", ",", "list", "(", "all_loss", "/", "round", ")", "+", "list", "(", "time_loss", "/", "round", ")", ")", "\n", "\n", "", "pathpred", "=", "np", ".", "stack", "(", "pathpred", ",", "axis", "=", "0", ")", "\n", "savedir", "=", "config", ".", "result_path", "+", "self", ".", "model", ".", "model_name", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "savedir", ")", "\n", "", "np", ".", "savez", "(", "savedir", "+", "\"%d_test\"", "%", "(", "epoch", ")", ",", "pred", "=", "pathpred", ")", "\n", "\n", "\n", "print", "(", "\n", "\"[Test Sum] Epoch [%3d]: time: %.4f, loss: %s, tloss: %s\"", "%", "\n", "(", "epoch", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "all_loss", "/", "round", ",", "time_loss", "/", "round", ")", "\n", ")", "\n", "\n", "return", "all_loss", ",", "time_loss", ",", "pathpred", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Query_Controller.controller_train": [[947, 986], ["dataloader.load_data", "dataloader.get_query_data", "log.Logger", "log.Logger", "range", "train.Query_Controller.restore_model", "train.Query_Controller.__train__", "log.Logger.save", "log.Logger.save", "train.Query_Controller.__test__", "train.Query_Controller.save_model", "list", "range"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_query_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.restore_model", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__train__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__test__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.save_model"], ["", "def", "controller_train", "(", "self", ",", "tepoch", "=", "config", ".", "epoch", ")", ":", "\n", "# root_data, pathlist  = dataloader.load_data_all()", "\n", "        ", "root_data", ",", "neighbour_data", ",", "pathlist", "=", "dataloader", ".", "load_data", "(", "5", ",", "5", ")", "\n", "del", "neighbour_data", "\n", "query_data", "=", "dataloader", ".", "get_query_data", "(", ")", "\n", "\n", "last_save_epoch", "=", "self", ".", "base_epoch", "\n", "global_epoch", "=", "self", ".", "base_epoch", "+", "1", "\n", "\n", "if", "last_save_epoch", ">=", "0", ":", "\n", "            ", "self", ".", "restore_model", "(", "\n", "path", "=", "self", ".", "model_save_dir", ",", "\n", "global_step", "=", "last_save_epoch", "\n", ")", "\n", "\n", "", "logger_train", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"mae_copy\"", ",", "\"loss\"", ",", "\"nmse_train\"", ",", "\"nmse\"", ",", "\"mse\"", ",", "\"mae\"", ",", "\"mape\"", ",", "\"lossv\"", ",", "\"nmse_test\"", ",", "\"nmsev\"", ",", "\"msev\"", ",", "\"maev\"", ",", "\"mapev\"", "]", ")", "\n", "# logger_valid = log.Logger(columns=[\"mae_copy\", \"lossv\", \"nmse_test\", \"nmsev\", \"msev\", \"maev\", \"mapev\"])", "\n", "logger_test", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"mae_copy\"", ",", "\"lossv\"", ",", "\"nmse_test\"", ",", "\"nmsev\"", ",", "\"msev\"", ",", "\"maev\"", ",", "\"mapev\"", "]", "+", "list", "(", "range", "(", "15", ",", "121", ",", "15", ")", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "tepoch", "+", "1", ")", ":", "\n", "\n", "            ", "self", ".", "__train__", "(", "global_epoch", ",", "root_data", "[", ":", ",", ":", "-", "config", ".", "valid_length", ",", ":", "]", ",", "query_data", ",", "logger_train", ",", "pathlist", ")", "\n", "\n", "if", "epoch", "%", "config", ".", "test_p_epoch", "==", "0", ":", "\n", "# self.__valid__(global_epoch, root_data[:, -config.valid_length:, :], logger_valid)", "\n", "                ", "self", ".", "__test__", "(", "global_epoch", ",", "root_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", ",", "query_data", ",", "logger_test", ",", "pathlist", ")", "\n", "\n", "", "if", "global_epoch", ">", "self", ".", "base_epoch", "and", "global_epoch", "%", "config", ".", "save_p_epoch", "==", "0", ":", "\n", "                ", "self", ".", "save_model", "(", "\n", "path", "=", "self", ".", "model_save_dir", ",", "\n", "global_step", "=", "global_epoch", "\n", ")", "\n", "last_save_epoch", "=", "global_epoch", "\n", "\n", "", "logger_train", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_train.csv\"", ")", "\n", "# logger_valid.save(self.log_save_dir + config.global_start_time + \"_valid.csv\")", "\n", "logger_test", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_test.csv\"", ")", "\n", "\n", "global_epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Query_Controller.controller_test": [[987, 1009], ["dataloader.load_data", "dataloader.get_query_data", "train.Query_Controller.restore_model", "log.Logger", "train.Query_Controller.__test__", "log.Logger.save", "list", "range"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_query_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.restore_model", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__test__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save"], ["", "", "def", "controller_test", "(", "self", ")", ":", "\n", "# root_data,pathlist  = dataloader.load_data_all()", "\n", "        ", "root_data", ",", "neighbour_data", ",", "pathlist", "=", "dataloader", ".", "load_data", "(", "5", ",", "5", ")", "\n", "del", "neighbour_data", "\n", "# event_data = dataloader.load_event_data()", "\n", "query_data", "=", "dataloader", ".", "get_query_data", "(", ")", "\n", "\n", "last_save_epoch", "=", "self", ".", "base_epoch", "\n", "global_epoch", "=", "self", ".", "base_epoch", "+", "1", "\n", "\n", "assert", "last_save_epoch", ">=", "0", "\n", "self", ".", "restore_model", "(", "\n", "path", "=", "self", ".", "model_save_dir", ",", "\n", "global_step", "=", "last_save_epoch", "\n", ")", "\n", "\n", "logger_test", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"mae_copy\"", ",", "\"lossv\"", ",", "\"nmse_test\"", ",", "\"nmsev\"", ",", "\"msev\"", ",", "\"maev\"", ",", "\"mapev\"", "]", "+", "list", "(", "range", "(", "15", ",", "121", ",", "15", ")", ")", ")", "\n", "\n", "self", ".", "__test__", "(", "global_epoch", ",", "root_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", ",", "query_data", ",", "logger_test", ",", "pathlist", ",", "test_interval", "=", "1", ")", "\n", "# self.__test_event__(global_epoch, root_data[:, -config.valid_length:, :], event_data, logger_test, pathlist, test_interval=1)", "\n", "\n", "logger_test", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_test.csv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Query_Comb_Controller.__train__": [[1012, 1075], ["list", "random.shuffle", "dataloader.get_event_orders", "random.shuffle", "numpy.zeros", "time.time", "time.time", "range", "print", "logger.add_log", "range", "len", "dataloader.get_minibatch_all_query", "train.Query_Comb_Controller.sess.run", "numpy.array", "print", "time.time", "logger.add_log", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_event_orders", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_all_query", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log"], ["    ", "def", "__train__", "(", "self", ",", "epoch", ",", "root_data", ",", "query_data", ",", "event_filter_allpath", ",", "logger", ",", "pathlist", ")", ":", "\n", "\n", "        ", "each_num_seq", "=", "root_data", ".", "shape", "[", "1", "]", "-", "(", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ")", "+", "1", "\n", "total_batch_size", "=", "root_data", ".", "shape", "[", "0", "]", "*", "each_num_seq", "\n", "full_train_order", "=", "list", "(", "range", "(", "total_batch_size", ")", ")", "\n", "random", ".", "shuffle", "(", "full_train_order", ")", "\n", "\n", "# nonevent_train_order = full_train_order[:config.batch_size * 0]", "\n", "event_train_order", "=", "dataloader", ".", "get_event_orders", "(", "event_filter_allpath", ",", "full_train_order", ",", "each_num_seq", ",", "tsteps", "=", "1000", ")", "\n", "# train_order = nonevent_train_order + event_train_order", "\n", "train_order", "=", "event_train_order", "\n", "random", ".", "shuffle", "(", "train_order", ")", "\n", "\n", "all_loss", "=", "np", ".", "zeros", "(", "3", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "train_steps", "=", "len", "(", "train_order", ")", "//", "config", ".", "batch_size", "\n", "\n", "for", "cstep", "in", "range", "(", "train_steps", ")", ":", "\n", "\n", "            ", "x_root", ",", "decode_seq", ",", "target_seq", ",", "x_query", ",", "decode_query", "=", "dataloader", ".", "get_minibatch_all_query", "(", "\n", "root_data", ",", "\n", "query_data", ",", "\n", "pathlist", ",", "\n", "order", "=", "train_order", "[", "cstep", "*", "config", ".", "batch_size", ":", "(", "cstep", "+", "1", ")", "*", "config", ".", "batch_size", "]", ",", "\n", "num_seq", "=", "each_num_seq", "\n", ")", "\n", "\n", "global_step", "=", "cstep", "+", "epoch", "*", "train_steps", "\n", "\n", "results", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "model", ".", "train_loss", ",", "\n", "self", ".", "model", ".", "nmse_train_noend", ",", "\n", "self", ".", "model", ".", "mape_train_noend", ",", "\n", "self", ".", "model", ".", "learning_rate", ",", "\n", "self", ".", "model", ".", "optim", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "x_root", ":", "x_root", ",", "\n", "self", ".", "model", ".", "decode_seqs", ":", "decode_seq", ",", "\n", "self", ".", "model", ".", "target_seqs", ":", "target_seq", ",", "\n", "self", ".", "model", ".", "query_x", ":", "x_query", ",", "\n", "self", ".", "model", ".", "query_decode_seq", ":", "decode_query", "[", ":", ",", "1", ":", ",", ":", "]", ",", "\n", "self", ".", "model", ".", "global_step", ":", "global_step", ",", "\n", "}", ")", "\n", "\n", "all_loss", "+=", "np", ".", "array", "(", "results", "[", ":", "-", "2", "]", ")", "\n", "\n", "if", "cstep", "%", "100", "==", "0", "and", "cstep", ">", "0", ":", "\n", "                ", "print", "(", "\n", "\"[Train] Epoch: [%3d][%4d/%4d] time: %.4f, lr: %.8f, loss: %s\"", "%", "\n", "(", "epoch", ",", "cstep", ",", "train_steps", ",", "time", ".", "time", "(", ")", "-", "step_time", ",", "results", "[", "-", "2", "]", ",", "all_loss", "/", "(", "cstep", "+", "1", ")", ")", "\n", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "add_log", "(", "global_step", ",", "all_loss", "/", "(", "cstep", "+", "1", ")", ")", "\n", "\n", "", "", "print", "(", "\n", "\"[Train Sum] Epoch: [%3d] time: %.4f, lr: %.8f, loss: %s\"", "%", "\n", "(", "epoch", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "results", "[", "-", "2", "]", ",", "all_loss", "/", "train_steps", ")", "\n", ")", "\n", "logger", ".", "add_log", "(", "global_step", ",", "all_loss", "/", "train_steps", ")", "\n", "\n", "return", "all_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Query_Comb_Controller.__test__": [[1076, 1172], ["list", "numpy.zeros", "numpy.zeros", "time.time", "time.time", "list", "range", "numpy.stack", "numpy.savez", "print", "range", "list", "time.time", "range", "numpy.concatenate", "numpy.stack.append", "logger.add_log", "os.path.exists", "os.makedirs", "dataloader.get_minibatch_4_test_query", "train.Query_Comb_Controller.sess.run", "list", "list", "range", "numpy.stack", "numpy.swapaxes", "numpy.reshape", "train.Query_Comb_Controller.sess.run", "utils.mape", "numpy.mean", "numpy.mean", "numpy.concatenate.append", "print", "numpy.stack", "numpy.savez", "train.Query_Comb_Controller.sess.run", "list.append", "list.append", "os.path.exists", "os.makedirs", "list", "list", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_4_test_query", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.utils.mape"], ["", "def", "__test__", "(", "self", ",", "epoch", ",", "root_data", ",", "query_data", ",", "logger", ",", "pathlist", ",", "test_interval", "=", "10", ")", ":", "\n", "\n", "        ", "each_num_seq", "=", "root_data", ".", "shape", "[", "1", "]", "-", "(", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ")", "+", "1", "\n", "total_batch_size", "=", "root_data", ".", "shape", "[", "0", "]", "*", "each_num_seq", "\n", "train_order", "=", "list", "(", "range", "(", "total_batch_size", ")", ")", "\n", "\n", "all_loss", "=", "np", ".", "zeros", "(", "1", ")", "\n", "time_loss", "=", "np", ".", "zeros", "(", "config", ".", "out_seq_length", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "round", "=", "0", "\n", "pathpred", "=", "list", "(", ")", "\n", "for", "path", "in", "range", "(", "0", ",", "root_data", ".", "shape", "[", "0", "]", ",", "test_interval", ")", ":", "\n", "            ", "predlist", "=", "list", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "for", "cstep", "in", "range", "(", "each_num_seq", "//", "config", ".", "batch_size", ")", ":", "\n", "                ", "round", "+=", "1", "\n", "\n", "x_root", ",", "decode_seq", ",", "target_seq", ",", "x_query", ",", "decode_query", "=", "dataloader", ".", "get_minibatch_4_test_query", "(", "\n", "root_data", ",", "\n", "query_data", ",", "\n", "path", ",", "\n", "pathlist", ",", "\n", "cstep", "\n", ")", "\n", "\n", "state", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "model", ".", "test_seq2seq_rnn", ".", "final_state_encode", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "x_root", ":", "x_root", ",", "\n", "}", ")", "\n", "\n", "spred", "=", "decode_seq", "[", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "\n", "spredlist", "=", "list", "(", ")", "\n", "statelist", "=", "list", "(", ")", "\n", "for", "_", "in", "range", "(", "config", ".", "out_seq_length", ")", ":", "# max sentence length", "\n", "                    ", "spred", ",", "state", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "model", ".", "test_seq2seq_out", ".", "outputs", ",", "\n", "self", ".", "model", ".", "test_seq2seq_rnn", ".", "final_state_decode", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "test_seq2seq_rnn", ".", "initial_state_decode", ":", "state", ",", "\n", "self", ".", "model", ".", "decode_seqs_test", ":", "spred", ",", "\n", "}", ")", "\n", "spredlist", ".", "append", "(", "spred", ")", "\n", "statelist", ".", "append", "(", "state", "[", "1", "]", ")", "# LSTMStateTuple (cell_state, hidden_state)", "\n", "", "traffic_state", "=", "np", ".", "stack", "(", "statelist", ",", "axis", "=", "0", ")", "\n", "traffic_state", "=", "np", ".", "swapaxes", "(", "traffic_state", ",", "axis1", "=", "0", ",", "axis2", "=", "1", ")", "\n", "traffic_state", "=", "np", ".", "reshape", "(", "traffic_state", ",", "(", "config", ".", "batch_size", "*", "config", ".", "out_seq_length", ",", "config", ".", "dim_hidden", ")", ")", "\n", "\n", "newpred", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "model", ".", "test_net", ".", "outputs", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "traffic_state", ":", "traffic_state", ",", "\n", "self", ".", "model", ".", "query_decode_seq", ":", "decode_query", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "}", ")", "\n", "\n", "mapeloss", "=", "utils", ".", "mape", "(", "newpred", ",", "target_seq", "[", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "all_loss", "+=", "np", ".", "mean", "(", "mapeloss", ")", "\n", "time_loss", "+=", "np", ".", "mean", "(", "mapeloss", "[", ":", ",", ":", ",", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "predlist", ".", "append", "(", "newpred", ")", "\n", "\n", "", "predlist", "=", "np", ".", "concatenate", "(", "predlist", ",", "axis", "=", "0", ")", "\n", "pathpred", ".", "append", "(", "predlist", ")", "\n", "\n", "if", "path", "%", "500", "==", "0", ":", "\n", "                ", "print", "(", "\n", "\"[Test] Epoch: [%3d][%5d/%5d] time: %.4f, loss: %s, tloss: %s\"", "%", "\n", "(", "epoch", ",", "path", ",", "root_data", ".", "shape", "[", "0", "]", ",", "time", ".", "time", "(", ")", "-", "step_time", ",", "all_loss", "/", "round", ",", "time_loss", "/", "round", ")", "\n", ")", "\n", "\n", "tmppathpred", "=", "np", ".", "stack", "(", "pathpred", ",", "axis", "=", "0", ")", "\n", "\n", "savedir", "=", "config", ".", "result_path", "+", "self", ".", "model", ".", "model_name", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "savedir", ")", "\n", "", "np", ".", "savez", "(", "savedir", "+", "\"%d_test\"", "%", "(", "epoch", ")", ",", "pred", "=", "tmppathpred", ")", "\n", "\n", "", "logger", ".", "add_log", "(", "\"%d_%s\"", "%", "(", "epoch", ",", "pathlist", "[", "path", "]", ")", ",", "list", "(", "all_loss", "/", "round", ")", "+", "list", "(", "time_loss", "/", "round", ")", ")", "\n", "\n", "", "pathpred", "=", "np", ".", "stack", "(", "pathpred", ",", "axis", "=", "0", ")", "\n", "savedir", "=", "config", ".", "result_path", "+", "self", ".", "model", ".", "model_name", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "savedir", ")", "\n", "", "np", ".", "savez", "(", "savedir", "+", "\"%d_test\"", "%", "(", "epoch", ")", ",", "pred", "=", "pathpred", ")", "\n", "\n", "\n", "print", "(", "\n", "\"[Test Sum] Epoch [%3d]: time: %.4f, loss: %s, tloss: %s\"", "%", "\n", "(", "epoch", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "all_loss", "/", "round", ",", "time_loss", "/", "round", ")", "\n", ")", "\n", "\n", "return", "all_loss", ",", "time_loss", ",", "pathpred", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Query_Comb_Controller.controller_train": [[1173, 1225], ["dataloader.load_data", "dataloader.get_query_data", "dataloader.load_event_data", "dataloader.get_event_filter_allpath", "log.Logger", "log.Logger", "range", "log.Logger", "train.Query_Comb_Controller.__test__", "log.Logger.save", "train.Query_Comb_Controller.restore_model", "tensorlayer.files.load_and_assign_npz_dict", "train.Query_Comb_Controller.save_model", "train.Query_Comb_Controller.__train__", "log.Logger.save", "log.Logger.save", "train.Query_Comb_Controller.__test__", "train.Query_Comb_Controller.save_model", "list", "list", "range", "range"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_query_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_event_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_event_filter_allpath", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__test__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.restore_model", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.save_model", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__train__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__test__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.save_model"], ["", "def", "controller_train", "(", "self", ",", "tepoch", "=", "config", ".", "epoch", ")", ":", "\n", "\n", "# root_data, pathlist  = dataloader.load_data_all()", "\n", "        ", "root_data", ",", "neighbour_data", ",", "pathlist", "=", "dataloader", ".", "load_data", "(", "5", ",", "5", ")", "\n", "del", "neighbour_data", "\n", "query_data", "=", "dataloader", ".", "get_query_data", "(", ")", "\n", "event_data", "=", "dataloader", ".", "load_event_data", "(", ")", "\n", "event_filter_allpath", "=", "dataloader", ".", "get_event_filter_allpath", "(", "event_data", ",", "pathlist", ")", "\n", "\n", "last_save_epoch", "=", "self", ".", "base_epoch", "\n", "global_epoch", "=", "self", ".", "base_epoch", "+", "1", "\n", "\n", "if", "last_save_epoch", ">=", "0", ":", "\n", "            ", "self", ".", "restore_model", "(", "\n", "path", "=", "self", ".", "model_save_dir", ",", "\n", "global_step", "=", "last_save_epoch", "\n", ")", "\n", "", "else", ":", "\n", "            ", "tl", ".", "files", ".", "load_and_assign_npz_dict", "(", "name", "=", "config", ".", "model_path", "+", "\"seq2seq_model/101.npz\"", ",", "sess", "=", "self", ".", "sess", ")", "\n", "self", ".", "save_model", "(", "\n", "path", "=", "self", ".", "model_save_dir", ",", "\n", "global_step", "=", "0", "\n", ")", "\n", "\n", "", "logger_train", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"loss\"", ",", "\"nmse_train\"", ",", "\"mape\"", "]", ")", "\n", "# logger_valid = log.Logger(columns=[\"mae_copy\", \"lossv\", \"nmse_test\", \"nmsev\", \"msev\", \"maev\", \"mapev\"])", "\n", "logger_test", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"mapev\"", "]", "+", "list", "(", "range", "(", "15", ",", "121", ",", "15", ")", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "tepoch", "+", "1", ")", ":", "\n", "\n", "            ", "self", ".", "__train__", "(", "global_epoch", ",", "root_data", "[", ":", ",", ":", "-", "config", ".", "valid_length", ",", ":", "]", ",", "query_data", ",", "event_filter_allpath", ",", "logger_train", ",", "pathlist", ")", "\n", "\n", "if", "epoch", "%", "config", ".", "test_p_epoch", "==", "0", ":", "\n", "# self.__valid__(global_epoch, root_data[:, -config.valid_length:, :], logger_valid)", "\n", "                ", "self", ".", "__test__", "(", "global_epoch", ",", "root_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", ",", "query_data", ",", "logger_test", ",", "pathlist", ",", "test_interval", "=", "50", ")", "\n", "\n", "", "if", "global_epoch", ">", "self", ".", "base_epoch", "and", "global_epoch", "%", "config", ".", "save_p_epoch", "==", "0", ":", "\n", "                ", "self", ".", "save_model", "(", "\n", "path", "=", "self", ".", "model_save_dir", ",", "\n", "global_step", "=", "global_epoch", "\n", ")", "\n", "last_save_epoch", "=", "global_epoch", "\n", "\n", "", "logger_train", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_train.csv\"", ")", "\n", "# logger_valid.save(self.log_save_dir + config.global_start_time + \"_valid.csv\")", "\n", "logger_test", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_test.csv\"", ")", "\n", "\n", "global_epoch", "+=", "1", "\n", "\n", "", "logger_test", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"mapev\"", "]", "+", "list", "(", "range", "(", "15", ",", "121", ",", "15", ")", ")", ")", "\n", "self", ".", "__test__", "(", "global_epoch", ",", "root_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", ",", "query_data", ",", "logger_test", ",", "pathlist", ",", "test_interval", "=", "1", ")", "\n", "logger_test", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_test_full.csv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Query_Comb_Controller.controller_test": [[1226, 1248], ["dataloader.load_data", "dataloader.get_query_data", "train.Query_Comb_Controller.restore_model", "log.Logger", "train.Query_Comb_Controller.__test__", "log.Logger.save", "list", "range"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_query_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.restore_model", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__test__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save"], ["", "def", "controller_test", "(", "self", ",", "restore", "=", "True", ")", ":", "\n", "# root_data,pathlist  = dataloader.load_data_all()", "\n", "        ", "root_data", ",", "neighbour_data", ",", "pathlist", "=", "dataloader", ".", "load_data", "(", "5", ",", "5", ")", "\n", "del", "neighbour_data", "\n", "# event_data = dataloader.load_event_data()", "\n", "query_data", "=", "dataloader", ".", "get_query_data", "(", ")", "\n", "\n", "last_save_epoch", "=", "self", ".", "base_epoch", "\n", "global_epoch", "=", "self", ".", "base_epoch", "+", "1", "\n", "\n", "assert", "last_save_epoch", ">=", "0", "\n", "self", ".", "restore_model", "(", "\n", "path", "=", "self", ".", "model_save_dir", ",", "\n", "global_step", "=", "last_save_epoch", "\n", ")", "\n", "\n", "logger_test", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"mapev\"", "]", "+", "list", "(", "range", "(", "15", ",", "121", ",", "15", ")", ")", ")", "\n", "\n", "self", ".", "__test__", "(", "global_epoch", ",", "root_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", ",", "query_data", ",", "logger_test", ",", "pathlist", ",", "test_interval", "=", "1", ")", "\n", "# self.__test_event__(global_epoch, root_data[:, -config.valid_length:, :], event_data, logger_test, pathlist, test_interval=1)", "\n", "\n", "logger_test", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_test.csv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__train__": [[1251, 1427], ["list", "random.shuffle", "random.shuffle", "numpy.zeros", "time.time", "time.time", "range", "print", "logger.add_log", "range", "len", "dataloader.get_minibatch_all_comb", "numpy.array", "dataloader.get_event_orders", "dataloader.get_event_orders", "train.All_Comb_Controller.sess.run", "print", "time.time", "logger.add_log", "train.All_Comb_Controller.sess.run", "train.All_Comb_Controller.sess.run", "list", "list", "range", "numpy.concatenate", "numpy.stack", "numpy.swapaxes", "numpy.reshape", "train.All_Comb_Controller.sess.run", "train.All_Comb_Controller.sess.run", "list.append", "list.append", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_all_comb", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_event_orders", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_event_orders", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log"], ["    ", "def", "__train__", "(", "self", ",", "epoch", ",", "root_data", ",", "neighbour_data", ",", "features_info", ",", "features_time", ",", "query_data", ",", "event_filter_allpath", ",", "logger", ",", "pathlist", ")", ":", "\n", "\n", "        ", "each_num_seq", "=", "root_data", ".", "shape", "[", "1", "]", "-", "(", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ")", "+", "1", "\n", "total_batch_size", "=", "root_data", ".", "shape", "[", "0", "]", "*", "each_num_seq", "\n", "full_train_order", "=", "list", "(", "range", "(", "total_batch_size", ")", ")", "\n", "random", ".", "shuffle", "(", "full_train_order", ")", "\n", "\n", "if", "epoch", "<", "config", ".", "all_model_stage_epoch", "[", "1", "]", ":", "\n", "            ", "nonevent_train_order", "=", "full_train_order", "[", ":", "config", ".", "batch_size", "*", "1000", "]", "\n", "train_order", "=", "nonevent_train_order", "\n", "", "else", ":", "\n", "            ", "if", "epoch", "<", "config", ".", "all_model_stage_epoch", "[", "1", "]", "+", "10", ":", "\n", "                ", "nonevent_train_order", "=", "full_train_order", "[", ":", "config", ".", "batch_size", "*", "500", "]", "\n", "event_train_order", "=", "dataloader", ".", "get_event_orders", "(", "event_filter_allpath", ",", "full_train_order", ",", "each_num_seq", ",", "tsteps", "=", "500", ")", "\n", "train_order", "=", "nonevent_train_order", "+", "event_train_order", "\n", "", "else", ":", "\n", "                ", "event_train_order", "=", "dataloader", ".", "get_event_orders", "(", "event_filter_allpath", ",", "full_train_order", ",", "each_num_seq", ",", "tsteps", "=", "2000", ")", "\n", "train_order", "=", "event_train_order", "\n", "", "", "random", ".", "shuffle", "(", "train_order", ")", "\n", "\n", "all_loss", "=", "np", ".", "zeros", "(", "3", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "train_steps", "=", "len", "(", "train_order", ")", "//", "config", ".", "batch_size", "\n", "\n", "for", "cstep", "in", "range", "(", "train_steps", ")", ":", "\n", "\n", "            ", "x_root", ",", "x_neigh", ",", "x_features", ",", "decode_seq", ",", "target_seq", ",", "x_query", ",", "decode_query", "=", "dataloader", ".", "get_minibatch_all_comb", "(", "\n", "root_data", ",", "\n", "neighbour_data", ",", "\n", "features_info", ",", "\n", "features_time", ",", "\n", "query_data", ",", "\n", "pathlist", ",", "\n", "order", "=", "train_order", "[", "cstep", "*", "config", ".", "batch_size", ":", "(", "cstep", "+", "1", ")", "*", "config", ".", "batch_size", "]", ",", "\n", "num_seq", "=", "each_num_seq", "\n", ")", "\n", "\n", "\n", "if", "epoch", "<", "config", ".", "all_model_stage_epoch", "[", "0", "]", ":", "\n", "                ", "stagestr", "=", "\"spatial\"", "\n", "global_step", "=", "cstep", "+", "epoch", "*", "train_steps", "\n", "\n", "results", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "model", ".", "train_loss_spatial", ",", "\n", "self", ".", "model", ".", "nmse_train_noend_spatial", ",", "\n", "self", ".", "model", ".", "mape_train_noend_spatial", ",", "\n", "self", ".", "model", ".", "learning_rate", ",", "\n", "self", ".", "model", ".", "optim_spatial", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "x_root", ":", "x_root", ",", "\n", "self", ".", "model", ".", "x_neighbour", ":", "x_neigh", ",", "\n", "self", ".", "model", ".", "features", ":", "x_features", ",", "\n", "self", ".", "model", ".", "decode_seqs", ":", "decode_seq", ",", "\n", "self", ".", "model", ".", "target_seqs", ":", "target_seq", ",", "\n", "self", ".", "model", ".", "query_x", ":", "x_query", ",", "\n", "self", ".", "model", ".", "query_decode_seq", ":", "decode_query", "[", ":", ",", "1", ":", ",", ":", "]", ",", "\n", "self", ".", "model", ".", "global_step", ":", "global_step", ",", "\n", "}", ")", "\n", "\n", "", "elif", "epoch", "<", "config", ".", "all_model_stage_epoch", "[", "1", "]", ":", "\n", "                ", "stagestr", "=", "\"wide\"", "\n", "global_step", "=", "cstep", "+", "(", "epoch", "-", "config", ".", "all_model_stage_epoch", "[", "0", "]", ")", "*", "train_steps", "\n", "\n", "results", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "model", ".", "train_loss_wide", ",", "\n", "self", ".", "model", ".", "nmse_train_noend_wide", ",", "\n", "self", ".", "model", ".", "mape_train_noend_wide", ",", "\n", "self", ".", "model", ".", "learning_rate", ",", "\n", "self", ".", "model", ".", "optim_wide", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "x_root", ":", "x_root", ",", "\n", "self", ".", "model", ".", "x_neighbour", ":", "x_neigh", ",", "\n", "self", ".", "model", ".", "features", ":", "x_features", ",", "\n", "self", ".", "model", ".", "decode_seqs", ":", "decode_seq", ",", "\n", "self", ".", "model", ".", "target_seqs", ":", "target_seq", ",", "\n", "self", ".", "model", ".", "query_x", ":", "x_query", ",", "\n", "self", ".", "model", ".", "query_decode_seq", ":", "decode_query", "[", ":", ",", "1", ":", ",", ":", "]", ",", "\n", "self", ".", "model", ".", "global_step", ":", "global_step", ",", "\n", "}", ")", "\n", "\n", "", "else", ":", "\n", "                ", "stagestr", "=", "\"query\"", "\n", "global_step", "=", "cstep", "+", "(", "epoch", "-", "config", ".", "all_model_stage_epoch", "[", "1", "]", ")", "*", "train_steps", "\n", "\n", "state", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "model", ".", "test_net_seq2seq", ".", "final_state_encode", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "x_root", ":", "x_root", ",", "\n", "self", ".", "model", ".", "x_neighbour", ":", "x_neigh", ",", "\n", "self", ".", "model", ".", "features", ":", "x_features", "\n", "}", ")", "\n", "\n", "spred", "=", "decode_seq", "[", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "\n", "spredlist", "=", "list", "(", ")", "\n", "statelist", "=", "list", "(", ")", "\n", "\n", "for", "_", "in", "range", "(", "config", ".", "out_seq_length", ")", ":", "# max sentence length", "\n", "                    ", "spred", ",", "state", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "model", ".", "test_net_wide", ".", "outputs", ",", "\n", "self", ".", "model", ".", "test_net_seq2seq", ".", "final_state_decode", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "test_net_seq2seq", ".", "initial_state_decode", ":", "state", ",", "\n", "self", ".", "model", ".", "decode_seqs_test", ":", "spred", ",", "\n", "self", ".", "model", ".", "features", ":", "x_features", ",", "\n", "self", ".", "model", ".", "features_test", ":", "x_features", "[", ":", ",", "_", ":", "_", "+", "1", ",", ":", "]", "\n", "}", ")", "\n", "spredlist", ".", "append", "(", "spred", ")", "\n", "statelist", ".", "append", "(", "state", "[", "1", "]", ")", "# LSTMStateTuple (cell_state, hidden_state)", "\n", "\n", "", "basepred", "=", "np", ".", "concatenate", "(", "spredlist", ",", "axis", "=", "1", ")", "\n", "\n", "traffic_state", "=", "np", ".", "stack", "(", "statelist", ",", "axis", "=", "0", ")", "\n", "traffic_state", "=", "np", ".", "swapaxes", "(", "traffic_state", ",", "axis1", "=", "0", ",", "axis2", "=", "1", ")", "\n", "assert", "traffic_state", ".", "shape", "==", "(", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "config", ".", "dim_hidden", ")", "\n", "traffic_state", "=", "np", ".", "reshape", "(", "traffic_state", ",", "(", "config", ".", "batch_size", "*", "config", ".", "out_seq_length", ",", "config", ".", "dim_hidden", ")", ")", "\n", "\n", "results", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "# self.model.test_net_query.outputs,", "\n", "self", ".", "model", ".", "train_loss_query", ",", "\n", "self", ".", "model", ".", "nmse_train_noend_query", ",", "\n", "self", ".", "model", ".", "mape_train_noend_query", ",", "\n", "self", ".", "model", ".", "learning_rate", ",", "\n", "self", ".", "model", ".", "optim_query", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "x_root", ":", "x_root", ",", "\n", "self", ".", "model", ".", "x_neighbour", ":", "x_neigh", ",", "\n", "self", ".", "model", ".", "traffic_state", ":", "traffic_state", ",", "\n", "self", ".", "model", ".", "query_decode_seq", ":", "decode_query", "[", ":", ",", "1", ":", ",", ":", "]", ",", "\n", "self", ".", "model", ".", "features", ":", "x_features", ",", "\n", "self", ".", "model", ".", "base_pred", ":", "basepred", ",", "# TODO residual net", "\n", "self", ".", "model", ".", "decode_seqs", ":", "decode_seq", ",", "\n", "self", ".", "model", ".", "target_seqs", ":", "target_seq", ",", "\n", "self", ".", "model", ".", "query_x", ":", "x_query", ",", "\n", "self", ".", "model", ".", "global_step", ":", "global_step", ",", "\n", "# self.model.features_test: x_features[:, _:_+1 ,:]", "\n", "}", ")", "\n", "\n", "'''\n                results = self.sess.run([\n                    self.model.train_loss_query,\n                    self.model.nmse_train_noend_query,\n                    self.model.mape_train_noend_query,\n                    self.model.learning_rate,\n                    self.model.optim_query],\n                    feed_dict={\n                        self.model.x_root: x_root,\n                        self.model.x_neighbour: x_neigh,\n                        self.model.features: x_features,\n                        self.model.decode_seqs: decode_seq,\n                        self.model.target_seqs: target_seq,\n                        self.model.query_x: x_query,\n                        self.model.query_decode_seq: decode_query[:, 1:, :],\n                        self.model.global_step: global_step,\n                    })\n                '''", "\n", "\n", "", "all_loss", "+=", "np", ".", "array", "(", "results", "[", ":", "-", "2", "]", ")", "\n", "\n", "if", "cstep", "%", "100", "==", "0", "and", "cstep", ">", "0", ":", "\n", "                ", "print", "(", "\n", "\"[Train %s] Epoch: [%3d][%4d/%4d] time: %.4f, lr: %.8f, loss: %s\"", "%", "\n", "(", "stagestr", ",", "epoch", ",", "cstep", ",", "train_steps", ",", "time", ".", "time", "(", ")", "-", "step_time", ",", "results", "[", "-", "2", "]", ",", "all_loss", "/", "(", "cstep", "+", "1", ")", ")", "\n", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "add_log", "(", "global_step", ",", "all_loss", "/", "(", "cstep", "+", "1", ")", ")", "\n", "\n", "", "", "print", "(", "\n", "\"[Train %s Sum] Epoch: [%3d] time: %.4f, lr: %.8f, loss: %s\"", "%", "\n", "(", "stagestr", ",", "epoch", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "results", "[", "-", "2", "]", ",", "all_loss", "/", "train_steps", ")", "\n", ")", "\n", "logger", ".", "add_log", "(", "global_step", ",", "all_loss", "/", "train_steps", ")", "\n", "\n", "return", "all_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__test__": [[1428, 1570], ["list", "numpy.zeros", "numpy.zeros", "time.time", "time.time", "list", "range", "numpy.stack", "numpy.savez", "print", "range", "list", "time.time", "range", "numpy.concatenate", "numpy.stack.append", "logger.add_log", "os.path.exists", "os.makedirs", "dataloader.get_minibatch_4_test_all_comb", "train.All_Comb_Controller.sess.run", "list", "list", "numpy.mean", "numpy.mean", "print", "numpy.stack", "numpy.savez", "range", "numpy.concatenate", "utils.mape", "numpy.concatenate.append", "range", "numpy.concatenate", "os.path.exists", "os.makedirs", "list", "list", "train.All_Comb_Controller.sess.run", "list.append", "list.append", "train.All_Comb_Controller.sess.run", "list.append", "list.append", "utils.mape", "numpy.concatenate.append", "numpy.stack", "numpy.swapaxes", "numpy.reshape", "train.All_Comb_Controller.sess.run", "utils.mape", "numpy.concatenate.append", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_4_test_all_comb", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.utils.mape", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.utils.mape", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.utils.mape"], ["", "def", "__test__", "(", "self", ",", "epoch", ",", "root_data", ",", "neighbour_data", ",", "features_info", ",", "features_time", ",", "query_data", ",", "logger", ",", "pathlist", ",", "test_interval", "=", "10", ")", ":", "\n", "        ", "stagestr", "=", "\"null\"", "\n", "if", "epoch", "<", "config", ".", "all_model_stage_epoch", "[", "0", "]", ":", "\n", "            ", "stagestr", "=", "\"spatial\"", "\n", "", "elif", "epoch", "<", "config", ".", "all_model_stage_epoch", "[", "1", "]", ":", "\n", "            ", "stagestr", "=", "\"wide\"", "\n", "", "else", ":", "\n", "            ", "stagestr", "=", "\"query\"", "\n", "\n", "", "each_num_seq", "=", "root_data", ".", "shape", "[", "1", "]", "-", "(", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ")", "+", "1", "\n", "total_batch_size", "=", "root_data", ".", "shape", "[", "0", "]", "*", "each_num_seq", "\n", "train_order", "=", "list", "(", "range", "(", "total_batch_size", ")", ")", "\n", "\n", "all_loss", "=", "np", ".", "zeros", "(", "1", ")", "\n", "time_loss", "=", "np", ".", "zeros", "(", "config", ".", "out_seq_length", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "round", "=", "0", "\n", "pathpred", "=", "list", "(", ")", "\n", "for", "path", "in", "range", "(", "0", ",", "root_data", ".", "shape", "[", "0", "]", ",", "test_interval", ")", ":", "\n", "            ", "predlist", "=", "list", "(", ")", "\n", "step_time", "=", "time", ".", "time", "(", ")", "\n", "for", "cstep", "in", "range", "(", "each_num_seq", "//", "config", ".", "batch_size", ")", ":", "\n", "                ", "round", "+=", "1", "\n", "\n", "x_root", ",", "x_neigh", ",", "x_features", ",", "decode_seq", ",", "target_seq", ",", "x_query", ",", "decode_query", "=", "dataloader", ".", "get_minibatch_4_test_all_comb", "(", "\n", "root_data", ",", "\n", "neighbour_data", ",", "\n", "features_info", ",", "\n", "features_time", ",", "\n", "query_data", ",", "\n", "path", ",", "\n", "pathlist", ",", "\n", "cstep", "\n", ")", "\n", "\n", "state", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "model", ".", "test_net_seq2seq", ".", "final_state_encode", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "x_root", ":", "x_root", ",", "\n", "self", ".", "model", ".", "x_neighbour", ":", "x_neigh", ",", "\n", "self", ".", "model", ".", "features", ":", "x_features", "\n", "}", ")", "\n", "\n", "spred", "=", "decode_seq", "[", ":", ",", "0", ":", "1", ",", ":", "]", "\n", "\n", "spredlist", "=", "list", "(", ")", "\n", "statelist", "=", "list", "(", ")", "\n", "\n", "if", "epoch", "<", "config", ".", "all_model_stage_epoch", "[", "0", "]", ":", "\n", "                    ", "for", "_", "in", "range", "(", "config", ".", "out_seq_length", ")", ":", "# max sentence length", "\n", "                        ", "spred", ",", "state", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "model", ".", "test_net_spatial", ".", "outputs", ",", "\n", "self", ".", "model", ".", "test_net_seq2seq", ".", "final_state_decode", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "test_net_seq2seq", ".", "initial_state_decode", ":", "state", ",", "\n", "self", ".", "model", ".", "decode_seqs_test", ":", "spred", ",", "\n", "self", ".", "model", ".", "features", ":", "x_features", ",", "\n", "self", ".", "model", ".", "features_test", ":", "x_features", "[", ":", ",", "_", ":", "_", "+", "1", ",", ":", "]", "\n", "}", ")", "\n", "spredlist", ".", "append", "(", "spred", ")", "\n", "statelist", ".", "append", "(", "state", "[", "1", "]", ")", "# LSTMStateTuple (cell_state, hidden_state)", "\n", "\n", "", "basepred", "=", "np", ".", "concatenate", "(", "spredlist", ",", "axis", "=", "1", ")", "\n", "mapeloss", "=", "utils", ".", "mape", "(", "basepred", ",", "target_seq", "[", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "predlist", ".", "append", "(", "basepred", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                    ", "for", "_", "in", "range", "(", "config", ".", "out_seq_length", ")", ":", "# max sentence length", "\n", "                        ", "spred", ",", "state", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "model", ".", "test_net_wide", ".", "outputs", ",", "\n", "self", ".", "model", ".", "test_net_seq2seq", ".", "final_state_decode", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "test_net_seq2seq", ".", "initial_state_decode", ":", "state", ",", "\n", "self", ".", "model", ".", "decode_seqs_test", ":", "spred", ",", "\n", "self", ".", "model", ".", "features", ":", "x_features", ",", "\n", "self", ".", "model", ".", "features_test", ":", "x_features", "[", ":", ",", "_", ":", "_", "+", "1", ",", ":", "]", "\n", "}", ")", "\n", "spredlist", ".", "append", "(", "spred", ")", "\n", "statelist", ".", "append", "(", "state", "[", "1", "]", ")", "# LSTMStateTuple (cell_state, hidden_state)", "\n", "\n", "", "basepred", "=", "np", ".", "concatenate", "(", "spredlist", ",", "axis", "=", "1", ")", "\n", "\n", "if", "epoch", "<", "config", ".", "all_model_stage_epoch", "[", "1", "]", ":", "\n", "                        ", "mapeloss", "=", "utils", ".", "mape", "(", "basepred", ",", "target_seq", "[", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "predlist", ".", "append", "(", "basepred", ")", "\n", "", "else", ":", "\n", "                        ", "traffic_state", "=", "np", ".", "stack", "(", "statelist", ",", "axis", "=", "0", ")", "\n", "traffic_state", "=", "np", ".", "swapaxes", "(", "traffic_state", ",", "axis1", "=", "0", ",", "axis2", "=", "1", ")", "\n", "assert", "traffic_state", ".", "shape", "==", "(", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "config", ".", "dim_hidden", ")", "\n", "traffic_state", "=", "np", ".", "reshape", "(", "traffic_state", ",", "(", "config", ".", "batch_size", "*", "config", ".", "out_seq_length", ",", "config", ".", "dim_hidden", ")", ")", "\n", "\n", "newpred", "=", "self", ".", "sess", ".", "run", "(", "\n", "self", ".", "model", ".", "test_net_query", ".", "outputs", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "model", ".", "traffic_state", ":", "traffic_state", ",", "\n", "self", ".", "model", ".", "query_decode_seq", ":", "decode_query", "[", ":", ",", "1", ":", ",", ":", "]", ",", "\n", "self", ".", "model", ".", "features", ":", "x_features", ",", "\n", "self", ".", "model", ".", "base_pred", ":", "basepred", ",", "# TODO residual net", "\n", "# self.model.features_test: x_features[:, _:_+1 ,:]", "\n", "}", ")", "\n", "\n", "mapeloss", "=", "utils", ".", "mape", "(", "newpred", ",", "target_seq", "[", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "predlist", ".", "append", "(", "newpred", ")", "\n", "\n", "", "", "all_loss", "+=", "np", ".", "mean", "(", "mapeloss", ")", "\n", "time_loss", "+=", "np", ".", "mean", "(", "mapeloss", "[", ":", ",", ":", ",", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "predlist", "=", "np", ".", "concatenate", "(", "predlist", ",", "axis", "=", "0", ")", "\n", "pathpred", ".", "append", "(", "predlist", ")", "\n", "\n", "if", "path", "%", "500", "==", "0", ":", "\n", "                ", "print", "(", "\n", "\"[Test %s] Epoch: [%3d][%5d/%5d] time: %.4f, loss: %s, tloss: %s\"", "%", "\n", "(", "stagestr", ",", "epoch", ",", "path", ",", "root_data", ".", "shape", "[", "0", "]", ",", "time", ".", "time", "(", ")", "-", "step_time", ",", "all_loss", "/", "round", ",", "time_loss", "/", "round", ")", "\n", ")", "\n", "\n", "tmppathpred", "=", "np", ".", "stack", "(", "pathpred", ",", "axis", "=", "0", ")", "\n", "\n", "savedir", "=", "config", ".", "result_path", "+", "self", ".", "model", ".", "model_name", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "savedir", ")", "\n", "", "np", ".", "savez", "(", "savedir", "+", "\"%d_test\"", "%", "(", "epoch", ")", ",", "pred", "=", "tmppathpred", ")", "\n", "\n", "", "logger", ".", "add_log", "(", "\"%d_%s\"", "%", "(", "epoch", ",", "pathlist", "[", "path", "]", ")", ",", "list", "(", "all_loss", "/", "round", ")", "+", "list", "(", "time_loss", "/", "round", ")", ")", "\n", "\n", "", "pathpred", "=", "np", ".", "stack", "(", "pathpred", ",", "axis", "=", "0", ")", "\n", "savedir", "=", "config", ".", "result_path", "+", "self", ".", "model", ".", "model_name", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "savedir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "savedir", ")", "\n", "", "np", ".", "savez", "(", "savedir", "+", "\"%d_test\"", "%", "(", "epoch", ")", ",", "pred", "=", "pathpred", ")", "\n", "\n", "\n", "print", "(", "\n", "\"[Test %s Sum] Epoch [%3d]: time: %.4f, loss: %s, tloss: %s\"", "%", "\n", "(", "stagestr", ",", "epoch", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "all_loss", "/", "round", ",", "time_loss", "/", "round", ")", "\n", ")", "\n", "\n", "return", "all_loss", ",", "time_loss", ",", "pathpred", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.controller_train": [[1571, 1641], ["dataloader.load_data", "dataloader.load_features", "dataloader.get_query_data", "dataloader.load_event_data", "dataloader.get_event_filter_allpath", "log.Logger", "log.Logger", "range", "log.Logger", "train.All_Comb_Controller.__test__", "log.Logger.save", "train.All_Comb_Controller.__train__", "log.Logger.save", "log.Logger.save", "train.All_Comb_Controller.restore_model", "train.All_Comb_Controller.__test__", "train.All_Comb_Controller.save_model", "tensorlayer.files.load_and_assign_npz_dict", "list", "list", "range", "range"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_features", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_query_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_event_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_event_filter_allpath", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__test__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__train__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.restore_model", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__test__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.save_model"], ["", "def", "controller_train", "(", "self", ",", "tepoch", "=", "config", ".", "epoch", ")", ":", "\n", "\n", "# root_data, pathlist  = dataloader.load_data_all()", "\n", "        ", "root_data", ",", "neighbour_data", ",", "pathlist", "=", "dataloader", ".", "load_data", "(", "5", ",", "5", ")", "\n", "features_info", ",", "features_time", ",", "features_pathlist", "=", "dataloader", ".", "load_features", "(", "pathlist", ")", "\n", "query_data", "=", "dataloader", ".", "get_query_data", "(", ")", "\n", "event_data", "=", "dataloader", ".", "load_event_data", "(", ")", "\n", "event_filter_allpath", "=", "dataloader", ".", "get_event_filter_allpath", "(", "event_data", ",", "pathlist", ")", "\n", "\n", "last_save_epoch", "=", "self", ".", "base_epoch", "\n", "global_epoch", "=", "self", ".", "base_epoch", "+", "1", "\n", "\n", "if", "last_save_epoch", ">=", "0", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "restore_model", "(", "\n", "path", "=", "self", ".", "model_save_dir", ",", "\n", "global_step", "=", "last_save_epoch", "\n", ")", "\n", "", "except", ":", "\n", "                ", "tl", ".", "files", ".", "load_and_assign_npz_dict", "(", "name", "=", "self", ".", "model_save_dir", "+", "\"%d.npz\"", "%", "last_save_epoch", ",", "sess", "=", "self", ".", "sess", ")", "\n", "\n", "", "", "logger_train", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"loss\"", ",", "\"nmse_train\"", ",", "\"mape\"", "]", ")", "\n", "# logger_valid = log.Logger(columns=[\"mae_copy\", \"lossv\", \"nmse_test\", \"nmsev\", \"msev\", \"maev\", \"mapev\"])", "\n", "logger_test", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"mapev\"", "]", "+", "list", "(", "range", "(", "15", ",", "121", ",", "15", ")", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "tepoch", "+", "1", ")", ":", "\n", "\n", "            ", "self", ".", "__train__", "(", "\n", "global_epoch", ",", "\n", "root_data", "[", ":", ",", ":", "-", "config", ".", "valid_length", ",", ":", "]", ",", "\n", "neighbour_data", "[", ":", ",", ":", "-", "config", ".", "valid_length", ",", ":", "]", ",", "\n", "features_info", ",", "features_time", ",", "\n", "query_data", ",", "event_filter_allpath", ",", "\n", "logger_train", ",", "pathlist", "\n", ")", "\n", "\n", "if", "epoch", "%", "config", ".", "test_p_epoch", "==", "0", ":", "\n", "# self.__valid__(global_epoch, root_data[:, -config.valid_length:, :], logger_valid)", "\n", "                ", "self", ".", "__test__", "(", "\n", "global_epoch", ",", "\n", "root_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", ",", "\n", "neighbour_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", ",", "\n", "features_info", ",", "features_time", ",", "\n", "query_data", ",", "\n", "logger_test", ",", "pathlist", ",", "test_interval", "=", "50", "\n", ")", "\n", "\n", "", "if", "global_epoch", ">", "self", ".", "base_epoch", "and", "global_epoch", "%", "config", ".", "save_p_epoch", "==", "0", ":", "\n", "                ", "self", ".", "save_model", "(", "\n", "path", "=", "self", ".", "model_save_dir", ",", "\n", "global_step", "=", "global_epoch", "\n", ")", "\n", "last_save_epoch", "=", "global_epoch", "\n", "\n", "", "logger_train", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_train.csv\"", ")", "\n", "# logger_valid.save(self.log_save_dir + config.global_start_time + \"_valid.csv\")", "\n", "logger_test", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_test.csv\"", ")", "\n", "\n", "global_epoch", "+=", "1", "\n", "\n", "", "logger_test", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"mapev\"", "]", "+", "list", "(", "range", "(", "15", ",", "121", ",", "15", ")", ")", ")", "\n", "self", ".", "__test__", "(", "\n", "global_epoch", ",", "\n", "root_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", ",", "\n", "neighbour_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", ",", "\n", "features_info", ",", "features_time", ",", "\n", "query_data", ",", "\n", "logger_test", ",", "pathlist", ",", "test_interval", "=", "1", "\n", ")", "\n", "logger_test", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_test_full.csv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.controller_test": [[1642, 1680], ["dataloader.load_data", "dataloader.load_features", "dataloader.get_query_data", "train.All_Comb_Controller.restore_model", "log.Logger", "train.All_Comb_Controller.__test__", "log.Logger.save", "list", "range"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_features", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_query_data", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.Controller.restore_model", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.train.All_Comb_Controller.__test__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save"], ["", "def", "controller_test", "(", "self", ",", "restore", "=", "True", ")", ":", "\n", "# root_data,pathlist  = dataloader.load_data_all()", "\n", "        ", "root_data", ",", "neighbour_data", ",", "pathlist", "=", "dataloader", ".", "load_data", "(", "5", ",", "5", ")", "\n", "# event_data = dataloader.load_event_data()", "\n", "features_info", ",", "features_time", ",", "features_pathlist", "=", "dataloader", ".", "load_features", "(", "pathlist", ")", "\n", "query_data", "=", "dataloader", ".", "get_query_data", "(", ")", "\n", "\n", "\n", "last_save_epoch", "=", "self", ".", "base_epoch", "\n", "global_epoch", "=", "self", ".", "base_epoch", "+", "1", "\n", "\n", "assert", "last_save_epoch", ">=", "0", "\n", "self", ".", "restore_model", "(", "\n", "path", "=", "self", ".", "model_save_dir", ",", "\n", "global_step", "=", "last_save_epoch", "\n", ")", "\n", "'''\n        tl.files.save_npz_dict(\n            self.model.train_net_spatial.all_params + self.model.train_net_wide.all_params + self.model.train_net_query.all_params,\n            name=self.model_save_dir + \"%d.npz\" % global_epoch,\n            sess=self.sess\n        )\n        return\n        '''", "\n", "\n", "logger_test", "=", "log", ".", "Logger", "(", "columns", "=", "[", "\"mapev\"", "]", "+", "list", "(", "range", "(", "15", ",", "121", ",", "15", ")", ")", ")", "\n", "\n", "self", ".", "__test__", "(", "\n", "global_epoch", ",", "\n", "root_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", ",", "\n", "neighbour_data", "[", ":", ",", "-", "config", ".", "valid_length", ":", ",", ":", "]", ",", "\n", "features_info", ",", "features_time", ",", "\n", "query_data", ",", "\n", "logger_test", ",", "pathlist", ",", "test_interval", "=", "1", "\n", ")", "\n", "# self.__test_event__(global_epoch, root_data[:, -config.valid_length:, :], event_data, logger_test, pathlist, test_interval=1)", "\n", "\n", "logger_test", ".", "save", "(", "self", ".", "log_save_dir", "+", "config", ".", "global_start_time", "+", "\"_test.csv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.playground.RoadNode.__init__": [[18, 24], ["list", "list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "id", ")", ":", "\n", "# may duplicate", "\n", "        ", "self", ".", "previous", "=", "list", "(", ")", "\n", "# may duplicate", "\n", "self", ".", "next", "=", "list", "(", ")", "\n", "self", ".", "id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.playground.roadnet_extraction": [[25, 202], ["open", "dict", "print", "progressbar.ProgressBar", "enumerate", "open.close", "print", "numpy.zeros", "numpy.zeros", "numpy.set_printoptions", "print", "print", "print", "print", "print", "open", "dict", "list", "progressbar.ProgressBar", "enumerate", "open.close", "print", "open", "open.close", "progressbar.ProgressBar.update", "line.replace().split", "node_dict[].previous.append", "node_dict[].next.append", "node_dict[].next.append", "node_dict[].previous.append", "len", "len", "len", "list", "range", "list", "range", "progressbar.ProgressBar.update", "line.replace().split", "list", "dict", "dict", "list.append", "open.write", "open.write", "str", "playground.RoadNode", "playground.RoadNode", "playground.RoadNode", "dict.keys", "list", "list", "playground.roadnet_extraction.deep_previous"], "function", ["None"], ["", "", "def", "roadnet_extraction", "(", ")", ":", "\n", "\n", "    ", "roadnetfilename", "=", "datapath", "+", "\"beijing roadnet/R.mid\"", "\n", "roadnetfile", "=", "open", "(", "roadnetfilename", ",", "\"rb\"", ")", "\n", "\n", "node_dict", "=", "dict", "(", ")", "\n", "\n", "print", "(", "\"Loading road network ... \"", ")", "\n", "bar", "=", "progressbar", ".", "ProgressBar", "(", "max_value", "=", "857767", ")", "\n", "for", "iter", ",", "l", "in", "enumerate", "(", "roadnetfile", ")", ":", "\n", "        ", "bar", ".", "update", "(", "iter", ")", "\n", "\n", "line", "=", "str", "(", "l", ")", "[", "2", ":", "-", "1", "]", "\n", "content", "=", "line", ".", "replace", "(", "\"\\\"\"", ",", "\"\"", ")", ".", "split", "(", "\"\\\\t\"", ")", "\n", "\n", "current_node", "=", "content", "[", "1", "]", "\n", "previous_node", "=", "content", "[", "9", "]", "\n", "next_node", "=", "content", "[", "10", "]", "\n", "\n", "if", "current_node", "not", "in", "node_dict", ":", "\n", "            ", "n", "=", "RoadNode", "(", "current_node", ")", "\n", "node_dict", "[", "current_node", "]", "=", "n", "\n", "", "node_dict", "[", "current_node", "]", ".", "previous", ".", "append", "(", "previous_node", ")", "\n", "node_dict", "[", "current_node", "]", ".", "next", ".", "append", "(", "next_node", ")", "\n", "\n", "if", "previous_node", "not", "in", "node_dict", ":", "\n", "            ", "n", "=", "RoadNode", "(", "previous_node", ")", "\n", "node_dict", "[", "previous_node", "]", "=", "n", "\n", "", "node_dict", "[", "previous_node", "]", ".", "next", ".", "append", "(", "current_node", ")", "\n", "\n", "if", "next_node", "not", "in", "node_dict", ":", "\n", "            ", "n", "=", "RoadNode", "(", "next_node", ")", "\n", "node_dict", "[", "next_node", "]", "=", "n", "\n", "", "node_dict", "[", "next_node", "]", ".", "previous", ".", "append", "(", "current_node", ")", "\n", "\n", "", "roadnetfile", ".", "close", "(", ")", "\n", "print", "(", "\"Network loaded!\"", ")", "\n", "\n", "# analysis", "\n", "nprev", "=", "np", ".", "zeros", "(", "11", ")", "\n", "nnext", "=", "np", ".", "zeros", "(", "11", ")", "\n", "sump", "=", "sumn", "=", "0", "\n", "for", "node", "in", "node_dict", ":", "\n", "# if len(node_dict[node].previous) > 1:", "\n", "#    print(node, str(node_dict[node].previous))", "\n", "# if len(node_dict[node].next) > 1:", "\n", "#     print(node, str(node_dict[node].next))", "\n", "        ", "sump", "+=", "len", "(", "node_dict", "[", "node", "]", ".", "previous", ")", "\n", "sumn", "+=", "len", "(", "node_dict", "[", "node", "]", ".", "next", ")", "\n", "nprev", "[", "min", "(", "10", ",", "len", "(", "node_dict", "[", "node", "]", ".", "previous", ")", ")", "]", "+=", "1", "\n", "nnext", "[", "min", "(", "10", ",", "len", "(", "node_dict", "[", "node", "]", ".", "next", ")", ")", "]", "+=", "1", "\n", "", "np", ".", "set_printoptions", "(", "suppress", "=", "True", ")", "\n", "print", "(", "\"Number of Road: \"", ",", "len", "(", "node_dict", ".", "keys", "(", ")", ")", ")", "\n", "print", "(", "\"Number of Previous:\"", ",", "nprev", ")", "\n", "print", "(", "\"Number of Next\"", ",", "nnext", ")", "\n", "print", "(", "\"Avg Prev %.2f, Next %.2f\"", "%", "(", "sump", "/", "len", "(", "node_dict", ".", "keys", "(", ")", ")", ",", "sumn", "/", "len", "(", "node_dict", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n", "print", "(", "\"Getting links ...\"", ")", "\n", "# eventsetfilename = datapath + \"event_link_set_beijing\"", "\n", "eventsetfilename", "=", "datapath", "+", "\"event_link_set_beijing\"", "\n", "eventsetfile", "=", "open", "(", "eventsetfilename", ",", "\"r\"", ")", "\n", "event_road", "=", "dict", "(", ")", "\n", "linklist", "=", "list", "(", ")", "\n", "\n", "'''\n    bar = progressbar.ProgressBar(max_value=1151)\n    for iter, line in enumerate(eventsetfile):\n        bar.update(iter)\n        nodeids = line.replace(\"\\n\", \"\").split(\"\\t\")\n        for nid in nodeids:\n            event_road[nid] = 1\n\n    print(\"Number of event road: \", len(event_road.keys()))\n    bar = progressbar.ProgressBar(max_value=len(event_road.keys()))\n    for iter, nid in enumerate(event_road.keys()):\n        bar.update(iter)\n        for njd in event_road.keys():\n            if nid == njd:\n                continue\n            if nid in node_dict and njd in node_dict[nid].next:\n                linklist.append((nid, njd))\n            if nid in node_dict and njd in node_dict[nid].previous:\n                linklist.append((njd, nid))\n    '''", "\n", "\n", "def", "deep_next", "(", "gid", ",", "depth", ")", ":", "\n", "        ", "if", "gid", "not", "in", "node_dict", ":", "\n", "            ", "return", "list", "(", ")", "\n", "", "allnext", "=", "list", "(", ")", "\n", "for", "d", "in", "range", "(", "depth", ")", ":", "\n", "            ", "if", "d", "==", "0", ":", "\n", "                ", "allnext", ".", "append", "(", "node_dict", "[", "gid", "]", ".", "next", ")", "\n", "", "else", ":", "\n", "                ", "allnext", ".", "append", "(", "list", "(", ")", ")", "\n", "for", "pid", "in", "allnext", "[", "d", "-", "1", "]", ":", "\n", "                    ", "if", "pid", "in", "node_dict", ":", "\n", "                        ", "allnext", "[", "d", "]", "+=", "node_dict", "[", "pid", "]", ".", "next", "\n", "", "", "", "", "return", "allnext", "\n", "\n", "", "def", "deep_previous", "(", "gid", ",", "depth", ")", ":", "\n", "        ", "if", "gid", "not", "in", "node_dict", ":", "\n", "            ", "return", "list", "(", ")", "\n", "", "allprev", "=", "list", "(", ")", "\n", "for", "d", "in", "range", "(", "depth", ")", ":", "\n", "            ", "if", "d", "==", "0", ":", "\n", "                ", "allprev", ".", "append", "(", "node_dict", "[", "gid", "]", ".", "previous", ")", "\n", "", "else", ":", "\n", "                ", "allprev", ".", "append", "(", "list", "(", ")", ")", "\n", "for", "pid", "in", "allprev", "[", "d", "-", "1", "]", ":", "\n", "                    ", "if", "pid", "in", "node_dict", ":", "\n", "                        ", "allprev", "[", "d", "]", "+=", "node_dict", "[", "pid", "]", ".", "previous", "\n", "", "", "", "", "return", "allprev", "\n", "\n", "", "bar", "=", "progressbar", ".", "ProgressBar", "(", "max_value", "=", "1151", ")", "\n", "for", "iter", ",", "line", "in", "enumerate", "(", "eventsetfile", ")", ":", "\n", "        ", "bar", ".", "update", "(", "iter", ")", "\n", "nodeids", "=", "line", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "\n", "clink", "=", "list", "(", ")", "\n", "deepprev", "=", "dict", "(", ")", "\n", "deepnext", "=", "dict", "(", ")", "\n", "# all_neighbour = list()", "\n", "for", "nid", "in", "nodeids", ":", "\n", "# all_neighbour += node_dict[nid].next + node_dict[nid].previous", "\n", "            ", "deepprev", "[", "nid", "]", "=", "deep_previous", "(", "nid", ",", "2", ")", "\n", "deepnext", "[", "nid", "]", "=", "deep_next", "(", "nid", ",", "2", ")", "\n", "\n", "", "for", "nid", "in", "nodeids", ":", "\n", "            ", "for", "njd", "in", "nodeids", ":", "\n", "                ", "if", "nid", "==", "njd", ":", "\n", "                    ", "continue", "\n", "\n", "", "foundflag", "=", "False", "\n", "for", "idx", ",", "dn", "in", "enumerate", "(", "deepnext", "[", "nid", "]", ")", ":", "\n", "                    ", "if", "njd", "in", "dn", ":", "\n", "                        ", "clink", ".", "append", "(", "(", "nid", ",", "njd", ",", "idx", ")", ")", "\n", "foundflag", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "foundflag", ":", "\n", "                    ", "continue", "\n", "\n", "", "for", "idx", ",", "dn", "in", "enumerate", "(", "deepprev", "[", "njd", "]", ")", ":", "\n", "                    ", "if", "nid", "in", "dn", ":", "\n", "                        ", "clink", ".", "append", "(", "(", "nid", ",", "njd", ",", "idx", ")", ")", "\n", "foundflag", "=", "True", "\n", "break", "\n", "\n", "# if nid in node_dict and njd in node_dict[nid].next:", "\n", "#     clink.append((nid, njd))", "\n", "# if nid in node_dict and njd in node_dict[nid].previous:", "\n", "#     clink.append((njd, nid))", "\n", "", "", "", "", "'''\n        print(all_neighbour)\n        print(len(all_neighbour))\n        allin = list()\n        notin = list()\n        for ne in all_neighbour:\n            if ne in nodeids:\n                allin.append(ne)\n            else:\n                notin.append(ne)\n        print(allin)\n        print(len(notin))\n        exit()\n        '''", "\n", "linklist", ".", "append", "(", "clink", ")", "\n", "\n", "", "eventsetfile", ".", "close", "(", ")", "\n", "\n", "print", "(", "\"Saving ... \"", ")", "\n", "resultfilename", "=", "resultspath", "+", "\"event_link_set_beijing_link.txt\"", "\n", "resultfile", "=", "open", "(", "resultfilename", ",", "\"w\"", ")", "\n", "for", "link", "in", "linklist", ":", "\n", "        ", "resultfile", ".", "write", "(", "str", "(", "link", ")", ")", "\n", "resultfile", ".", "write", "(", "\"\\n\"", ")", "\n", "", "resultfile", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.playground.draw_roadnet": [[203, 284], ["open", "open", "pickle.load", "open.close", "progressbar.ProgressBar", "enumerate", "open.close", "progressbar.ProgressBar.update", "eval", "networkx.DiGraph", "dict", "networkx.pagerank", "networkx.draw", "matplotlib.show", "exit", "list", "sorted", "nx.pagerank.items", "list.append", "nx.DiGraph.add_nodes_from", "nx.DiGraph.add_edge", "linkdict[].append", "operator.itemgetter", "list"], "function", ["None"], ["", "def", "draw_roadnet", "(", ")", ":", "\n", "    ", "roadnetfilename", "=", "resultspath", "+", "\"event_link_set_beijing_link.txt\"", "\n", "roadnetfile", "=", "open", "(", "roadnetfilename", ",", "\"r\"", ")", "\n", "\n", "import", "pickle", "\n", "traffic_data_file", "=", "open", "(", "config", ".", "data_path", "+", "\"event_traffic_completion_beijing_15min.pkl\"", ",", "\"rb\"", ")", "\n", "traffic_data", "=", "pickle", ".", "load", "(", "traffic_data_file", ",", "encoding", "=", "'latin1'", ")", "\n", "traffic_data_file", ".", "close", "(", ")", "\n", "\n", "# prfilename = resultspath + \"pagerank.txt\"", "\n", "# prfile = open(prfilename, \"w\")", "\n", "bar", "=", "progressbar", ".", "ProgressBar", "(", "max_value", "=", "1151", ")", "\n", "for", "iter", ",", "line", "in", "enumerate", "(", "roadnetfile", ")", ":", "\n", "        ", "bar", ".", "update", "(", "iter", ")", "\n", "\n", "content", "=", "eval", "(", "line", ")", "\n", "\n", "graph", "=", "nx", ".", "DiGraph", "(", ")", "\n", "linkdict", "=", "dict", "(", ")", "\n", "for", "link", "in", "content", ":", "\n", "            ", "if", "link", "[", "2", "]", "==", "1", ":", "\n", "                ", "if", "link", "[", "0", "]", "not", "in", "traffic_data", "or", "link", "[", "1", "]", "not", "in", "traffic_data", ":", "\n", "                    ", "continue", "\n", "", "graph", ".", "add_nodes_from", "(", "link", "[", ":", "-", "1", "]", ")", "\n", "graph", ".", "add_edge", "(", "link", "[", "0", "]", ",", "link", "[", "1", "]", ")", "\n", "if", "link", "[", "0", "]", "not", "in", "linkdict", ":", "\n", "                    ", "linkdict", "[", "link", "[", "0", "]", "]", "=", "list", "(", ")", "\n", "", "linkdict", "[", "link", "[", "0", "]", "]", ".", "append", "(", "link", "[", "1", "]", ")", "\n", "", "", "prnodes", "=", "nx", ".", "pagerank", "(", "graph", ",", "max_iter", "=", "10000", ",", "tol", "=", "1e-8", ")", "\n", "# prfile.write(str(prnodes))", "\n", "# prfile.write(\"\\n\")", "\n", "\n", "'''\n        \n        nsize = list()\n        for node in graph.nodes:\n            nsize.append(prnodes[node])\n        nsize = np.array(nsize)\n        nsize *= 8 / np.max(nsize)\n        nsize = np.exp(nsize)\n        nsize *= 600 / np.max(nsize)\n        # nx.draw(graph, options)\n        '''", "\n", "nx", ".", "draw", "(", "graph", ",", "node_size", "=", "20", ")", "\n", "plt", ".", "show", "(", ")", "\n", "exit", "(", ")", "\n", "# nx.draw(graph, node_size=20)", "\n", "\n", "import", "operator", "\n", "sortedlist", "=", "list", "(", ")", "\n", "for", "node", ",", "value", "in", "sorted", "(", "prnodes", ".", "items", "(", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ",", "reverse", "=", "True", ")", ":", "\n", "            ", "sortedlist", ".", "append", "(", "(", "node", ",", "value", ")", ")", "\n", "# prfile.write(str(sortedlist))", "\n", "# prfile.write(\"\\n\")", "\n", "\n", "", "'''\n        selected_graph = nx.DiGraph()\n        selected_nsize = list()\n        for i in range(200):\n            selected_graph.add_node(sortedlist[i][0])\n            selected_nsize.append(sortedlist[i][1])\n        for ni in selected_graph.nodes:\n            for nj in selected_graph.nodes:\n                if ni == nj:\n                    continue\n                if ni in linkdict and nj in linkdict[ni]:\n                    selected_graph.add_edge(ni, nj)\n\n\n        selected_nsize = np.array(selected_nsize)\n        selected_nsize *= 8 / np.max(selected_nsize)\n        selected_nsize = np.exp(selected_nsize)\n        selected_nsize *= 600 / np.max(selected_nsize)\n\n        nx.draw(selected_graph, node_size=selected_nsize)\n        plt.show()\n        # plt.savefig(resultspath + \"figs/roadnet_set_1km/roadnet_%d.png\" % iter)\n        # plt.clf()\n        '''", "\n", "\n", "", "roadnetfile", ".", "close", "(", ")", "\n", "# prfile.close()", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.playground.get_data": [[286, 302], ["pickle.load", "pickle.load", "pickle.load.keys", "print", "print", "print", "open", "open", "len", "len", "print"], "function", ["None"], ["", "def", "get_data", "(", ")", ":", "\n", "    ", "import", "pickle", "\n", "\n", "t", "=", "pickle", ".", "load", "(", "open", "(", "datapath", "+", "\"event_traffic_completion_beijing_15min.pkl\"", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "d", "=", "pickle", ".", "load", "(", "open", "(", "datapath", "+", "\"event_traffic_flag_beijing.pkl\"", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "num", "=", "0", "\n", "incom", "=", "0", "\n", "for", "key", "in", "d", ".", "keys", "(", ")", ":", "\n", "        ", "num", "+=", "1", "if", "d", "[", "key", "]", "else", "0", "\n", "if", "d", "[", "key", "]", "and", "key", "not", "in", "t", ":", "\n", "            ", "print", "(", "key", ")", "\n", "", "elif", "d", "[", "key", "]", "and", "key", "in", "t", ":", "\n", "            ", "incom", "+=", "1", "\n", "", "", "print", "(", "num", ",", "len", "(", "d", ")", ")", "\n", "print", "(", "incom", ")", "\n", "print", "(", "len", "(", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.playground.draw_sequence": [[303, 307], ["dataloader.load_data", "matplotlib.plot", "matplotlib.show"], "function", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data"], ["", "def", "draw_sequence", "(", ")", ":", "\n", "    ", "root_data", ",", "neighbour_data", "=", "dataloader", ".", "load_data", "(", "3", ",", "3", ")", "\n", "plt", ".", "plot", "(", "root_data", "[", "0", ",", ":", "96", "*", "7", ",", "0", "]", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.playground.filt_error": [[308, 327], ["open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "numpy.zeros", "len", "print", "numpy.mean", "numpy.mean", "numpy.mean", "pickle.load.keys", "numpy.abs", "numpy.abs"], "function", ["None"], ["", "def", "filt_error", "(", ")", ":", "\n", "    ", "traffic_data_file", "=", "open", "(", "config", ".", "data_path", "+", "\"event_traffic_completion_beijing_15min_filtfilt_0.05.pkl\"", ",", "\"rb\"", ")", "\n", "traffic_data_filt", "=", "pickle", ".", "load", "(", "traffic_data_file", ",", "encoding", "=", "'latin1'", ")", "\n", "traffic_data_file", ".", "close", "(", ")", "\n", "\n", "traffic_data_file", "=", "open", "(", "config", ".", "data_path", "+", "\"event_traffic_completion_beijing_15min.pkl\"", ",", "\"rb\"", ")", "\n", "traffic_data", "=", "pickle", ".", "load", "(", "traffic_data_file", ",", "encoding", "=", "'latin1'", ")", "\n", "traffic_data_file", ".", "close", "(", ")", "\n", "\n", "sum_error", "=", "np", ".", "zeros", "(", "3", ")", "\n", "for", "key", "in", "traffic_data", ":", "\n", "        ", "mae", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "traffic_data", "[", "key", "]", "-", "traffic_data_filt", "[", "key", "]", ")", ")", "\n", "mape", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "traffic_data", "[", "key", "]", "-", "traffic_data_filt", "[", "key", "]", ")", "/", "traffic_data", "[", "key", "]", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "traffic_data", "[", "key", "]", "-", "traffic_data_filt", "[", "key", "]", ")", "**", "2", ")", "\n", "sum_error", "[", "0", "]", "+=", "mae", "\n", "sum_error", "[", "1", "]", "+=", "mape", "\n", "sum_error", "[", "2", "]", "+=", "mse", "\n", "", "sum_error", "/=", "len", "(", "traffic_data", ".", "keys", "(", ")", ")", "\n", "print", "(", "sum_error", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.playground.compare_filt": [[328, 357], ["open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.show", "exit"], "function", ["None"], ["", "def", "compare_filt", "(", ")", ":", "\n", "    ", "traffic_data_file", "=", "open", "(", "config", ".", "data_path", "+", "\"event_traffic_completion_beijing_15min_filtfilt.pkl\"", ",", "\"rb\"", ")", "\n", "traffic_data_filt", "=", "pickle", ".", "load", "(", "traffic_data_file", ",", "encoding", "=", "'latin1'", ")", "\n", "traffic_data_file", ".", "close", "(", ")", "\n", "\n", "traffic_data_file", "=", "open", "(", "config", ".", "data_path", "+", "\"event_traffic_completion_beijing_15min_filtfilt_0.1.pkl\"", ",", "\"rb\"", ")", "\n", "traffic_data_filt_01", "=", "pickle", ".", "load", "(", "traffic_data_file", ",", "encoding", "=", "'latin1'", ")", "\n", "traffic_data_file", ".", "close", "(", ")", "\n", "\n", "traffic_data_file", "=", "open", "(", "config", ".", "data_path", "+", "\"event_traffic_completion_beijing_15min_filtfilt_0.05.pkl\"", ",", "\"rb\"", ")", "\n", "traffic_data_filt_005", "=", "pickle", ".", "load", "(", "traffic_data_file", ",", "encoding", "=", "'latin1'", ")", "\n", "traffic_data_file", ".", "close", "(", ")", "\n", "\n", "traffic_data_file", "=", "open", "(", "config", ".", "data_path", "+", "\"event_traffic_completion_beijing_15min.pkl\"", ",", "\"rb\"", ")", "\n", "traffic_data", "=", "pickle", ".", "load", "(", "traffic_data_file", ",", "encoding", "=", "'latin1'", ")", "\n", "traffic_data_file", ".", "close", "(", ")", "\n", "\n", "traffic_data_file", "=", "open", "(", "config", ".", "data_path", "+", "\"event_traffic_beijing_mv_avg_15min_completion.pkl\"", ",", "\"rb\"", ")", "\n", "traffic_data_mv", "=", "pickle", ".", "load", "(", "traffic_data_file", ",", "encoding", "=", "'latin1'", ")", "\n", "traffic_data_file", ".", "close", "(", ")", "\n", "\n", "for", "key", "in", "traffic_data", ":", "\n", "        ", "plt", ".", "plot", "(", "traffic_data", "[", "key", "]", "[", ":", "96", "*", "14", "]", ",", "color", "=", "\"green\"", ")", "\n", "plt", ".", "plot", "(", "traffic_data_filt", "[", "key", "]", "[", ":", "96", "*", "14", "]", ",", "color", "=", "\"red\"", ")", "\n", "plt", ".", "plot", "(", "traffic_data_filt_01", "[", "key", "]", "[", ":", "96", "*", "14", "]", ",", "color", "=", "\"orange\"", ")", "\n", "plt", ".", "plot", "(", "traffic_data_filt_005", "[", "key", "]", "[", ":", "96", "*", "14", "]", ",", "color", "=", "\"yellow\"", ")", "\n", "plt", ".", "plot", "(", "traffic_data_mv", "[", "key", "]", "[", ":", "96", "*", "14", "]", ",", "color", "=", "\"blue\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.playground.get_event_link": [[358, 387], ["open", "open", "eval", "open", "open.readlines", "dict", "enumerate", "enumerate", "pickle.dump", "event_time[].split", "event.replace().split", "print", "open", "open.readlines", "nodedict[].append", "event.replace", "list", "int", "int"], "function", ["None"], ["", "", "def", "get_event_link", "(", ")", ":", "\n", "# traffic_data_file = open(config.data_path + \"event_traffic_beijing_1km_mv_avg_15min_completion.pkl\", \"rb\")", "\n", "# traffic_data_mv = pickle.load(traffic_data_file, encoding='latin1')", "\n", "# traffic_data_file.close()", "\n", "\n", "    ", "traffic_link_set", "=", "open", "(", "config", ".", "data_path", "+", "\"event_link_set_beijing_1km\"", ",", "\"r\"", ")", "\n", "event_filter_file", "=", "open", "(", "config", ".", "data_path", "+", "\"event_filter.txt\"", ",", "\"r\"", ")", "\n", "event_filter", "=", "eval", "(", "event_filter_file", ".", "readlines", "(", ")", "[", "0", "]", ")", "\n", "\n", "event_time_file", "=", "open", "(", "config", ".", "data_path", "+", "\"event_beijing_final.txt\"", ",", "\"r\"", ")", "\n", "event_time", "=", "event_time_file", ".", "readlines", "(", ")", "\n", "\n", "nodedict", "=", "dict", "(", ")", "\n", "iter", "=", "0", "\n", "for", "idx", ",", "event", "in", "enumerate", "(", "traffic_link_set", ")", ":", "\n", "        ", "if", "event_filter", "[", "idx", "]", "==", "0", ":", "\n", "            ", "continue", "\n", "", "content", "=", "event_time", "[", "iter", "]", ".", "split", "(", "\"\\t\"", ")", "\n", "nodes", "=", "event", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "for", "node", "in", "nodes", ":", "\n", "            ", "if", "node", "not", "in", "nodedict", ":", "\n", "                ", "nodedict", "[", "node", "]", "=", "list", "(", ")", "\n", "", "nodedict", "[", "node", "]", ".", "append", "(", "(", "int", "(", "content", "[", "0", "]", ")", "//", "3", ",", "int", "(", "content", "[", "1", "]", ")", "//", "3", ")", ")", "\n", "", "iter", "+=", "1", "\n", "", "for", "idx", ",", "node", "in", "enumerate", "(", "nodedict", ")", ":", "\n", "        ", "if", "idx", ">", "100", ":", "\n", "            ", "break", "\n", "", "print", "(", "nodedict", "[", "node", "]", ")", "\n", "", "pickle", ".", "dump", "(", "nodedict", ",", "open", "(", "config", ".", "data_path", "+", "\"event_link_set_beijing_event_time_1km.pkl\"", ",", "\"wb\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.playground.analyse_event_link": [[388, 394], ["pickle.load", "enumerate", "open", "print"], "function", ["None"], ["", "def", "analyse_event_link", "(", ")", ":", "\n", "    ", "data", "=", "pickle", ".", "load", "(", "open", "(", "config", ".", "data_path", "+", "\"event_link_set_beijing_event_time_1km.pkl\"", ",", "\"rb\"", ")", ")", "\n", "for", "idx", ",", "node", "in", "enumerate", "(", "data", ")", ":", "\n", "        ", "for", "time", "in", "data", "[", "node", "]", ":", "\n", "            ", "if", "time", "[", "1", "]", ">=", "61", "*", "96", ":", "\n", "                ", "print", "(", "node", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.playground.test_combine": [[395, 411], ["numpy.random.randint", "numpy.reshape", "list", "range", "numpy.stack", "numpy.swapaxes", "numpy.reshape", "print", "print", "print", "print", "np.reshape.append"], "function", ["None"], ["", "", "", "", "def", "test_combine", "(", ")", ":", "\n", "    ", "B", "=", "4", "\n", "S", "=", "3", "\n", "H", "=", "2", "\n", "arr", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "100", ",", "size", "=", "(", "B", "*", "S", ",", "H", ")", ")", "\n", "arr3d", "=", "np", ".", "reshape", "(", "arr", ",", "(", "B", ",", "S", ",", "H", ")", ")", "\n", "arrlist", "=", "list", "(", ")", "\n", "for", "s", "in", "range", "(", "S", ")", ":", "\n", "        ", "arrlist", ".", "append", "(", "arr3d", "[", ":", ",", "s", ",", ":", "]", ")", "\n", "", "arrlist", "=", "np", ".", "stack", "(", "arrlist", ",", "axis", "=", "0", ")", "\n", "arrlist", "=", "np", ".", "swapaxes", "(", "arrlist", ",", "axis1", "=", "0", ",", "axis2", "=", "1", ")", "\n", "arrlist", "=", "np", ".", "reshape", "(", "arrlist", ",", "(", "B", "*", "S", ",", "H", ")", ")", "\n", "print", "(", "arrlist", "==", "arr", ")", "\n", "print", "(", "arr", ")", "\n", "print", "(", "arr3d", ")", "\n", "print", "(", "arrlist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.calculate_connected_comp.find": [[24, 28], ["calculate_connected_comp.find"], "function", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.calculate_connected_comp.find"], ["def", "find", "(", "a", ")", ":", "\n", "    ", "if", "(", "pre_dict", "[", "a", "]", "!=", "a", ")", ":", "\n", "        ", "pre_dict", "[", "a", "]", "=", "find", "(", "pre_dict", "[", "a", "]", ")", "\n", "", "return", "pre_dict", "[", "a", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.calculate_connected_comp.join": [[30, 35], ["calculate_connected_comp.find", "calculate_connected_comp.find"], "function", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.calculate_connected_comp.find", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.calculate_connected_comp.find"], ["", "def", "join", "(", "x", ",", "y", ")", ":", "\n", "    ", "fx", "=", "find", "(", "x", ")", "\n", "fy", "=", "find", "(", "y", ")", "\n", "if", "(", "fx", "!=", "fy", ")", ":", "\n", "        ", "pre_dict", "[", "fy", "]", "=", "fx", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.calculate_connected_comp.roadnet_extraction": [[37, 61], ["open", "print", "open", "print", "line.replace().split", "line.replace().split", "calculate_connected_comp.join", "calculate_connected_comp.join", "len", "line.replace", "line.replace"], "function", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.calculate_connected_comp.join", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.calculate_connected_comp.join"], ["", "", "def", "roadnet_extraction", "(", ")", ":", "\n", "    ", "roadnetfilename", "=", "datapath", "+", "\"beijing roadnet/R.mid\"", "\n", "# get the node", "\n", "for", "line", "in", "open", "(", "roadnetfilename", ")", ":", "\n", "        ", "temp_arr", "=", "line", ".", "replace", "(", "\"\\\"\"", ",", "\"\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "temp_arr", "[", "1", "]", "not", "in", "pre_dict", ":", "\n", "            ", "pre_dict", "[", "temp_arr", "[", "1", "]", "]", "=", "temp_arr", "[", "1", "]", "\n", "", "if", "temp_arr", "[", "9", "]", "not", "in", "pre_dict", ":", "\n", "            ", "pre_dict", "[", "temp_arr", "[", "9", "]", "]", "=", "temp_arr", "[", "9", "]", "\n", "", "if", "temp_arr", "[", "10", "]", "not", "in", "pre_dict", ":", "\n", "            ", "pre_dict", "[", "temp_arr", "[", "10", "]", "]", "=", "temp_arr", "[", "10", "]", "\n", "", "", "print", "(", "\"len(pred_dict) is {}\"", ".", "format", "(", "len", "(", "pre_dict", ")", ")", ")", "\n", "\n", "for", "line", "in", "open", "(", "roadnetfilename", ")", ":", "\n", "        ", "temp_arr", "=", "line", ".", "replace", "(", "\"\\\"\"", ",", "\"\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "join", "(", "temp_arr", "[", "9", "]", ",", "temp_arr", "[", "1", "]", ")", "\n", "join", "(", "temp_arr", "[", "1", "]", ",", "temp_arr", "[", "10", "]", ")", "\n", "\n", "", "num_connected_comp", "=", "0", "\n", "for", "key", "in", "pre_dict", ":", "\n", "        ", "if", "pre_dict", "[", "key", "]", "==", "key", ":", "\n", "            ", "num_connected_comp", "+=", "1", "\n", "\n", "", "", "print", "(", "\"num_connected_comp is {}\"", ".", "format", "(", "num_connected_comp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Spacial_Model.__init__": [[16, 32], ["model.Spacial_Model.__create_placeholders__", "model.Spacial_Model.__create_model__", "model.Spacial_Model.__create_loss__", "model.Spacial_Model.__create_training_op__"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Spacial_Model.__create_placeholders__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__create_model__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__create_loss__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__create_training_op__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model_name", ",", "\n", "start_learning_rate", ",", "\n", "decay_rate", ",", "\n", "decay_steps", "\n", ")", ":", "\n", "        ", "self", ".", "start_learning_rate", "=", "start_learning_rate", "\n", "self", ".", "decay_rate", "=", "decay_rate", "\n", "self", ".", "decay_steps", "=", "decay_steps", "\n", "self", ".", "model_name", "=", "model_name", "\n", "\n", "self", ".", "__create_placeholders__", "(", ")", "\n", "self", ".", "__create_model__", "(", ")", "\n", "self", ".", "__create_loss__", "(", ")", "\n", "self", ".", "__create_training_op__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Spacial_Model.__create_placeholders__": [[33, 63], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "__create_placeholders__", "(", "self", ")", ":", "\n", "        ", "self", ".", "x_root", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "config", ".", "batch_size", ",", "config", ".", "in_seq_length", ",", "1", "]", ",", "\n", "name", "=", "'input_x_root'", "\n", ")", "\n", "self", ".", "x_neighbour", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "config", ".", "batch_size", ",", "config", ".", "in_seq_length", ",", "config", ".", "num_neighbour", "]", ",", "\n", "name", "=", "'input_x_neighbour'", "\n", ")", "\n", "self", ".", "decode_seqs", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", "+", "1", ",", "1", "]", ",", "# start_id at beginning", "\n", "name", "=", "\"decode_root_seqs\"", "\n", ")", "\n", "self", ".", "decode_seqs_test", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "config", ".", "batch_size", ",", "1", ",", "1", "]", ",", "# start_id at beginning", "\n", "name", "=", "\"decode_root_seqs_test\"", "\n", ")", "\n", "self", ".", "target_seqs", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", "+", "1", ",", "1", "]", ",", "# end_id at end", "\n", "name", "=", "\"target_root_seqs\"", "\n", ")", "\n", "self", ".", "global_step", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "int32", ",", "\n", "shape", "=", "[", "]", ",", "\n", "name", "=", "\"global_step\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Spacial_Model.__create_model__": [[65, 82], ["model.Spacial_Model.__get_network__", "model.Spacial_Model.__get_network__", "model.Spacial_Model.train_net.print_params", "model.Spacial_Model.train_net.print_layers"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__get_network__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__get_network__"], ["", "def", "__create_model__", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_net", "=", "self", ".", "__get_network__", "(", "\n", "self", ".", "x_root", ",", "\n", "self", ".", "x_neighbour", ",", "\n", "self", ".", "decode_seqs", ",", "\n", "is_train", "=", "True", ",", "\n", "reuse", "=", "False", ",", "\n", ")", "\n", "self", ".", "test_net", "=", "self", ".", "__get_network__", "(", "\n", "self", ".", "x_root", ",", "\n", "self", ".", "x_neighbour", ",", "\n", "self", ".", "decode_seqs_test", ",", "\n", "is_train", "=", "False", ",", "\n", "reuse", "=", "True", ",", "\n", ")", "\n", "self", ".", "train_net", ".", "print_params", "(", "False", ")", "\n", "self", ".", "train_net", ".", "print_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Spacial_Model.__get_mape__": [[83, 85], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.abs"], "methods", ["None"], ["", "def", "__get_mape__", "(", "self", ",", "out", ",", "target", ")", ":", "\n", "        ", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "out", "-", "target", ")", "/", "target", ",", "[", "1", ",", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Spacial_Model.__create_loss__": [[86, 135], ["tensorlayer.cost.absolute_difference_error", "tensorlayer.cost.normalized_mean_square_error", "tensorlayer.cost.normalized_mean_square_error", "tensorlayer.cost.mean_squared_error", "tensorlayer.cost.absolute_difference_error", "model.Spacial_Model.__get_mape__", "tensorlayer.cost.normalized_mean_square_error", "tensorlayer.cost.normalized_mean_square_error", "tensorlayer.cost.mean_squared_error", "tensorlayer.cost.absolute_difference_error", "model.Spacial_Model.__get_mape__", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Spacial_Model.__get_mape__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Spacial_Model.__get_mape__"], ["", "def", "__create_loss__", "(", "self", ")", ":", "\n", "        ", "self", ".", "mae_copy", "=", "tl", ".", "cost", ".", "absolute_difference_error", "(", "\n", "tf", ".", "slice", "(", "self", ".", "x_root", ",", "[", "0", ",", "config", ".", "in_seq_length", "-", "config", ".", "out_seq_length", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "tf", ".", "slice", "(", "self", ".", "target_seqs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "is_mean", "=", "True", "\n", ")", "\n", "# train loss", "\n", "self", ".", "nmse_train_loss", "=", "tl", ".", "cost", ".", "normalized_mean_square_error", "(", "self", ".", "train_net", ".", "outputs", ",", "self", ".", "target_seqs", ")", "\n", "self", ".", "nmse_train_noend", "=", "tl", ".", "cost", ".", "normalized_mean_square_error", "(", "\n", "tf", ".", "slice", "(", "self", ".", "train_net", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "tf", ".", "slice", "(", "self", ".", "target_seqs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", "\n", ")", "\n", "self", ".", "mse_train_noend", "=", "tl", ".", "cost", ".", "mean_squared_error", "(", "\n", "tf", ".", "slice", "(", "self", ".", "train_net", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "tf", ".", "slice", "(", "self", ".", "target_seqs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "is_mean", "=", "True", "\n", ")", "\n", "self", ".", "mae_train_noend", "=", "tl", ".", "cost", ".", "absolute_difference_error", "(", "\n", "tf", ".", "slice", "(", "self", ".", "train_net", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "tf", ".", "slice", "(", "self", ".", "target_seqs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "is_mean", "=", "True", "\n", ")", "\n", "self", ".", "mape_train_noend", "=", "self", ".", "__get_mape__", "(", "\n", "tf", ".", "slice", "(", "self", ".", "train_net", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "tf", ".", "slice", "(", "self", ".", "target_seqs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", "\n", ")", "\n", "# test loss", "\n", "self", ".", "nmse_test_loss", "=", "tl", ".", "cost", ".", "normalized_mean_square_error", "(", "self", ".", "test_net", ".", "outputs", ",", "self", ".", "target_seqs", ")", "\n", "self", ".", "nmse_test_noend", "=", "tl", ".", "cost", ".", "normalized_mean_square_error", "(", "\n", "tf", ".", "slice", "(", "self", ".", "test_net", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "tf", ".", "slice", "(", "self", ".", "target_seqs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", "\n", ")", "\n", "self", ".", "mse_test_noend", "=", "tl", ".", "cost", ".", "mean_squared_error", "(", "\n", "tf", ".", "slice", "(", "self", ".", "test_net", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "tf", ".", "slice", "(", "self", ".", "target_seqs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "is_mean", "=", "True", "\n", ")", "\n", "self", ".", "mae_test_noend", "=", "tl", ".", "cost", ".", "absolute_difference_error", "(", "\n", "tf", ".", "slice", "(", "self", ".", "test_net", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "tf", ".", "slice", "(", "self", ".", "target_seqs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "is_mean", "=", "True", "\n", ")", "\n", "self", ".", "mape_test_noend", "=", "self", ".", "__get_mape__", "(", "\n", "tf", ".", "slice", "(", "self", ".", "test_net", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "tf", ".", "slice", "(", "self", ".", "target_seqs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", "\n", ")", "\n", "# adaptive train loss", "\n", "self", ".", "train_loss", "=", "self", ".", "nmse_train_loss", "\n", "self", ".", "test_loss", "=", "self", ".", "nmse_test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Spacial_Model.__create_training_op__": [[136, 148], ["tensorflow.train.exponential_decay", "tensorlayer.layers.get_variables_with_name", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer"], "methods", ["None"], ["", "def", "__create_training_op__", "(", "self", ")", ":", "\n", "        ", "self", ".", "learning_rate", "=", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "learning_rate", "=", "self", ".", "start_learning_rate", ",", "\n", "global_step", "=", "self", ".", "global_step", ",", "\n", "decay_steps", "=", "self", ".", "decay_steps", ",", "\n", "decay_rate", "=", "self", ".", "decay_rate", ",", "\n", "staircase", "=", "True", ",", "\n", "name", "=", "\"learning_rate\"", "\n", ")", "\n", "all_vars", "=", "tl", ".", "layers", ".", "get_variables_with_name", "(", "self", ".", "model_name", ")", "\n", "self", ".", "optim", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "learning_rate", ",", "beta1", "=", "0.5", ")", ".", "minimize", "(", "self", ".", "train_loss", ",", "var_list", "=", "all_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Spacial_Model.__get_network__": [[149, 194], ["tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.variable_scope", "tensorlayer.layers.set_name_reuse", "tensorlayer.layers.InputLayer", "tensorlayer.layers.InputLayer", "tensorlayer.layers.ReshapeLayer", "tensorflow.expand_dims", "tensorlayer.layers.Conv1d", "tensorlayer.layers.BatchNormLayer", "tensorlayer.layers.MaxPool1d", "tensorlayer.layers.FlattenLayer", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.ConcatLayer", "tensorlayer.layers.InputLayer", "tensorlayer.layers.Seq2Seq", "tensorlayer.layers.DenseLayer", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.ReshapeLayer", "tensorflow.random_uniform_initializer", "tensorlayer.layers.retrieve_seq_length_op", "tensorlayer.layers.retrieve_seq_length_op"], "methods", ["None"], ["", "def", "__get_network__", "(", "self", ",", "encode_seq", ",", "neighbour_seq", ",", "decode_seq", ",", "is_train", "=", "True", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "w_init", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.02", ")", "\n", "g_init", "=", "tf", ".", "random_normal_initializer", "(", "1.", ",", "0.02", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "model_name", ",", "reuse", "=", "reuse", ")", "as", "vs", ":", "\n", "            ", "tl", ".", "layers", ".", "set_name_reuse", "(", "reuse", ")", "\n", "inputs_x_root", "=", "InputLayer", "(", "encode_seq", ",", "name", "=", "'in_root'", ")", "\n", "inputs_x_nbor", "=", "InputLayer", "(", "neighbour_seq", ",", "name", "=", "\"in_neighbour\"", ")", "\n", "\n", "# encoding neighbour graph information", "\n", "n", "=", "ReshapeLayer", "(", "inputs_x_nbor", ",", "(", "config", ".", "batch_size", "*", "config", ".", "in_seq_length", ",", "config", ".", "num_neighbour", ")", ",", "\"reshape1\"", ")", "\n", "n", ".", "outputs", "=", "tf", ".", "expand_dims", "(", "n", ".", "outputs", ",", "axis", "=", "-", "1", ")", "\n", "n", "=", "Conv1d", "(", "n", ",", "4", ",", "4", ",", "1", ",", "act", "=", "tf", ".", "identity", ",", "padding", "=", "'SAME'", ",", "W_init", "=", "w_init", ",", "name", "=", "'conv1'", ")", "\n", "n", "=", "BatchNormLayer", "(", "n", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "is_train", "=", "is_train", ",", "gamma_init", "=", "g_init", ",", "name", "=", "'bn1'", ")", "\n", "n", "=", "MaxPool1d", "(", "n", ",", "2", ",", "2", ",", "padding", "=", "'valid'", ",", "name", "=", "'maxpool1'", ")", "\n", "n", "=", "FlattenLayer", "(", "n", ",", "name", "=", "\"flatten1\"", ")", "\n", "n", "=", "ReshapeLayer", "(", "n", ",", "(", "config", ".", "batch_size", ",", "config", ".", "in_seq_length", ",", "-", "1", ")", ",", "name", "=", "\"reshape1_back\"", ")", "\n", "\n", "net_encode", "=", "ConcatLayer", "(", "[", "inputs_x_root", ",", "n", "]", ",", "concat_dim", "=", "-", "1", ",", "name", "=", "\"encode\"", ")", "\n", "net_decode", "=", "InputLayer", "(", "decode_seq", ",", "name", "=", "\"decode\"", ")", "\n", "\n", "net_rnn", "=", "Seq2Seq", "(", "\n", "net_encode", ",", "net_decode", ",", "\n", "cell_fn", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", ",", "\n", "n_hidden", "=", "config", ".", "dim_hidden", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "0.1", ",", "0.1", ")", ",", "\n", "encode_sequence_length", "=", "tl", ".", "layers", ".", "retrieve_seq_length_op", "(", "net_encode", ".", "outputs", ")", ",", "\n", "decode_sequence_length", "=", "tl", ".", "layers", ".", "retrieve_seq_length_op", "(", "net_decode", ".", "outputs", ")", ",", "\n", "initial_state_encode", "=", "None", ",", "\n", "# dropout=(0.8 if is_train else None),", "\n", "dropout", "=", "None", ",", "\n", "n_layer", "=", "1", ",", "\n", "return_seq_2d", "=", "True", ",", "\n", "name", "=", "'seq2seq'", "\n", ")", "\n", "# net_out = DenseLayer(net_rnn, n_units=64, act=tf.identity, name='dense1')", "\n", "net_out", "=", "DenseLayer", "(", "net_rnn", ",", "n_units", "=", "1", ",", "act", "=", "tf", ".", "identity", ",", "name", "=", "'dense2'", ")", "\n", "if", "is_train", ":", "\n", "                ", "net_out", "=", "ReshapeLayer", "(", "net_out", ",", "(", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", "+", "1", ",", "1", ")", ",", "name", "=", "\"reshape_out\"", ")", "\n", "", "else", ":", "\n", "                ", "net_out", "=", "ReshapeLayer", "(", "net_out", ",", "(", "config", ".", "batch_size", ",", "1", ",", "1", ")", ",", "name", "=", "\"reshape_out\"", ")", "\n", "\n", "", "self", ".", "net_rnn", "=", "net_rnn", "\n", "\n", "return", "net_out", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Seq2Seq_Model.__create_model__": [[197, 212], ["model.Seq2Seq_Model.__get_network__", "model.Seq2Seq_Model.__get_network__", "model.Seq2Seq_Model.train_net.print_params", "model.Seq2Seq_Model.train_net.print_layers"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__get_network__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__get_network__"], ["    ", "def", "__create_model__", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_net", "=", "self", ".", "__get_network__", "(", "\n", "self", ".", "x_root", ",", "\n", "self", ".", "decode_seqs", ",", "\n", "is_train", "=", "True", ",", "\n", "reuse", "=", "False", ",", "\n", ")", "\n", "self", ".", "test_net", "=", "self", ".", "__get_network__", "(", "\n", "self", ".", "x_root", ",", "\n", "self", ".", "decode_seqs_test", ",", "\n", "is_train", "=", "False", ",", "\n", "reuse", "=", "True", ",", "\n", ")", "\n", "self", ".", "train_net", ".", "print_params", "(", "False", ")", "\n", "self", ".", "train_net", ".", "print_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Seq2Seq_Model.__get_network__": [[213, 247], ["tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.variable_scope", "tensorlayer.layers.set_name_reuse", "tensorlayer.layers.InputLayer", "tensorlayer.layers.InputLayer", "tensorlayer.layers.Seq2Seq", "tensorlayer.layers.DenseLayer", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.ReshapeLayer", "tensorflow.random_uniform_initializer", "tensorlayer.layers.retrieve_seq_length_op", "tensorlayer.layers.retrieve_seq_length_op"], "methods", ["None"], ["", "def", "__get_network__", "(", "self", ",", "encode_seq", ",", "decode_seq", ",", "is_train", "=", "True", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "w_init", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.02", ")", "\n", "g_init", "=", "tf", ".", "random_normal_initializer", "(", "1.", ",", "0.02", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "model_name", ",", "reuse", "=", "reuse", ")", "as", "vs", ":", "\n", "            ", "tl", ".", "layers", ".", "set_name_reuse", "(", "reuse", ")", "\n", "net_encode", "=", "InputLayer", "(", "encode_seq", ",", "name", "=", "'in_root'", ")", "\n", "\n", "net_decode", "=", "InputLayer", "(", "decode_seq", ",", "name", "=", "\"decode\"", ")", "\n", "\n", "net_rnn", "=", "Seq2Seq", "(", "\n", "net_encode", ",", "net_decode", ",", "\n", "cell_fn", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", ",", "\n", "n_hidden", "=", "config", ".", "dim_hidden", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "0.1", ",", "0.1", ")", ",", "\n", "encode_sequence_length", "=", "tl", ".", "layers", ".", "retrieve_seq_length_op", "(", "net_encode", ".", "outputs", ")", ",", "\n", "decode_sequence_length", "=", "tl", ".", "layers", ".", "retrieve_seq_length_op", "(", "net_decode", ".", "outputs", ")", ",", "\n", "initial_state_encode", "=", "None", ",", "\n", "# dropout=(0.8 if is_train else None),", "\n", "dropout", "=", "None", ",", "\n", "n_layer", "=", "1", ",", "\n", "return_seq_2d", "=", "True", ",", "\n", "name", "=", "'seq2seq'", "\n", ")", "\n", "# net_out = DenseLayer(net_rnn, n_units=64, act=tf.identity, name='dense1')", "\n", "net_out", "=", "DenseLayer", "(", "net_rnn", ",", "n_units", "=", "1", ",", "act", "=", "tf", ".", "identity", ",", "name", "=", "'dense2'", ")", "\n", "if", "is_train", ":", "\n", "                ", "net_out", "=", "ReshapeLayer", "(", "net_out", ",", "(", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", "+", "1", ",", "1", ")", ",", "name", "=", "\"reshape_out\"", ")", "\n", "", "else", ":", "\n", "                ", "net_out", "=", "ReshapeLayer", "(", "net_out", ",", "(", "config", ".", "batch_size", ",", "1", ",", "1", ")", ",", "name", "=", "\"reshape_out\"", ")", "\n", "\n", "", "self", ".", "net_rnn", "=", "net_rnn", "\n", "\n", "return", "net_out", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.WideDeep_Model.__init__": [[250, 257], ["model.WideDeep_Model.__create_placeholders_for_features__", "model.Spacial_Model.__init__"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__create_placeholders_for_features__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "__create_placeholders_for_features__", "(", ")", "\n", "super", "(", "WideDeep_Model", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.WideDeep_Model.__create_placeholders_for_features__": [[258, 270], ["tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "__create_placeholders_for_features__", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "features", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", "+", "1", ",", "config", ".", "dim_features", "]", ",", "\n", "name", "=", "'input_features'", "\n", ")", "\n", "\n", "self", ".", "features_test", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "config", ".", "batch_size", ",", "1", ",", "config", ".", "dim_features", "]", ",", "\n", "name", "=", "'input_features_test'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.WideDeep_Model.__create_model__": [[272, 289], ["model.WideDeep_Model.__get_network__", "model.WideDeep_Model.__get_network__", "model.WideDeep_Model.train_net.print_params", "model.WideDeep_Model.train_net.print_layers"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__get_network__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__get_network__"], ["", "def", "__create_model__", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_net", "=", "self", ".", "__get_network__", "(", "\n", "self", ".", "x_root", ",", "\n", "self", ".", "decode_seqs", ",", "\n", "self", ".", "features", ",", "\n", "is_train", "=", "True", ",", "\n", "reuse", "=", "False", ",", "\n", ")", "\n", "self", ".", "test_net", "=", "self", ".", "__get_network__", "(", "\n", "self", ".", "x_root", ",", "\n", "self", ".", "decode_seqs_test", ",", "\n", "self", ".", "features_test", ",", "\n", "is_train", "=", "False", ",", "\n", "reuse", "=", "True", ",", "\n", ")", "\n", "self", ".", "train_net", ".", "print_params", "(", "False", ")", "\n", "self", ".", "train_net", ".", "print_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.WideDeep_Model.__get_network__": [[290, 334], ["tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.variable_scope", "tensorlayer.layers.set_name_reuse", "tensorlayer.layers.InputLayer", "tensorlayer.layers.DenseLayer", "tensorlayer.layers.InputLayer", "tensorlayer.layers.InputLayer", "tensorlayer.layers.Seq2Seq", "tensorlayer.layers.ConcatLayer", "tensorlayer.layers.DenseLayer", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.ReshapeLayer", "tensorflow.random_uniform_initializer", "tensorlayer.layers.retrieve_seq_length_op", "tensorlayer.layers.retrieve_seq_length_op"], "methods", ["None"], ["", "def", "__get_network__", "(", "self", ",", "encode_seq", ",", "decode_seq", ",", "features", ",", "is_train", "=", "True", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "w_init", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.02", ")", "\n", "g_init", "=", "tf", ".", "random_normal_initializer", "(", "1.", ",", "0.02", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "model_name", ",", "reuse", "=", "reuse", ")", "as", "vs", ":", "\n", "            ", "tl", ".", "layers", ".", "set_name_reuse", "(", "reuse", ")", "\n", "\n", "net_features", "=", "InputLayer", "(", "features", ",", "name", "=", "\"in_features\"", ")", "\n", "if", "is_train", ":", "\n", "                ", "net_features", "=", "ReshapeLayer", "(", "net_features", ",", "(", "config", ".", "batch_size", "*", "(", "config", ".", "out_seq_length", "+", "1", ")", ",", "config", ".", "dim_features", ")", ",", "name", "=", "\"reshape_feature_1\"", ")", "\n", "", "else", ":", "\n", "                ", "net_features", "=", "ReshapeLayer", "(", "net_features", ",", "(", "config", ".", "batch_size", "*", "(", "1", ")", ",", "config", ".", "dim_features", ")", ",", "name", "=", "\"reshape_feature_1\"", ")", "\n", "\n", "", "net_features", "=", "DenseLayer", "(", "net_features", ",", "n_units", "=", "32", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "'dense_features'", ")", "\n", "\n", "net_encode", "=", "InputLayer", "(", "encode_seq", ",", "name", "=", "'in_root'", ")", "\n", "net_decode", "=", "InputLayer", "(", "decode_seq", ",", "name", "=", "\"decode\"", ")", "\n", "\n", "net_rnn", "=", "Seq2Seq", "(", "\n", "net_encode", ",", "net_decode", ",", "\n", "cell_fn", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", ",", "\n", "n_hidden", "=", "config", ".", "dim_hidden", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "0.1", ",", "0.1", ")", ",", "\n", "encode_sequence_length", "=", "tl", ".", "layers", ".", "retrieve_seq_length_op", "(", "net_encode", ".", "outputs", ")", ",", "\n", "decode_sequence_length", "=", "tl", ".", "layers", ".", "retrieve_seq_length_op", "(", "net_decode", ".", "outputs", ")", ",", "\n", "initial_state_encode", "=", "None", ",", "\n", "# dropout=(0.8 if is_train else None),", "\n", "dropout", "=", "None", ",", "\n", "n_layer", "=", "1", ",", "\n", "return_seq_2d", "=", "True", ",", "\n", "name", "=", "'seq2seq'", "\n", ")", "\n", "\n", "# net_out = DenseLayer(net_rnn, n_units=64, act=tf.identity, name='dense1')", "\n", "net_out", "=", "ConcatLayer", "(", "[", "net_rnn", ",", "net_features", "]", ",", "concat_dim", "=", "-", "1", ",", "name", "=", "\"concat\"", ")", "\n", "net_out", "=", "DenseLayer", "(", "net_out", ",", "n_units", "=", "1", ",", "act", "=", "tf", ".", "identity", ",", "name", "=", "'dense2'", ")", "\n", "if", "is_train", ":", "\n", "                ", "net_out", "=", "ReshapeLayer", "(", "net_out", ",", "(", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", "+", "1", ",", "1", ")", ",", "name", "=", "\"reshape_out\"", ")", "\n", "", "else", ":", "\n", "                ", "net_out", "=", "ReshapeLayer", "(", "net_out", ",", "(", "config", ".", "batch_size", ",", "1", ",", "1", ")", ",", "name", "=", "\"reshape_out\"", ")", "\n", "\n", "", "self", ".", "net_rnn", "=", "net_rnn", "\n", "\n", "return", "net_out", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Query_Model.__init__": [[337, 344], ["model.Query_Model.__create_placeholders_for_query__", "model.Spacial_Model.__init__"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Query_Comb_Model.__create_placeholders_for_query__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "__create_placeholders_for_query__", "(", ")", "\n", "super", "(", "Query_Model", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Query_Model.__create_placeholders_for_query__": [[345, 361], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "__create_placeholders_for_query__", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "query_x", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "config", ".", "batch_size", ",", "config", ".", "in_seq_length", ",", "1", "]", ",", "\n", "name", "=", "'input_query'", "\n", ")", "\n", "self", ".", "query_decode_seq", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", "+", "1", ",", "1", "]", ",", "\n", "name", "=", "'decode_query'", "\n", ")", "\n", "self", ".", "query_decode_seq_test", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "config", ".", "batch_size", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'decode_query'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Query_Model.__create_model__": [[363, 380], ["model.Query_Model.__get_network__", "model.Query_Model.__get_network__", "model.Query_Model.train_net.print_params", "model.Query_Model.train_net.print_layers"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__get_network__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__get_network__"], ["", "def", "__create_model__", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_net", "=", "self", ".", "__get_network__", "(", "\n", "self", ".", "x_root", ",", "\n", "self", ".", "decode_seqs", ",", "\n", "self", ".", "query_decode_seq", ",", "\n", "is_train", "=", "True", ",", "\n", "reuse", "=", "False", ",", "\n", ")", "\n", "self", ".", "test_net", "=", "self", ".", "__get_network__", "(", "\n", "self", ".", "x_root", ",", "\n", "self", ".", "decode_seqs_test", ",", "\n", "self", ".", "query_decode_seq_test", ",", "\n", "is_train", "=", "False", ",", "\n", "reuse", "=", "True", ",", "\n", ")", "\n", "self", ".", "train_net", ".", "print_params", "(", "False", ")", "\n", "self", ".", "train_net", ".", "print_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Query_Model.__get_network__": [[381, 420], ["tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.variable_scope", "tensorlayer.layers.set_name_reuse", "tensorlayer.layers.InputLayer", "tensorlayer.layers.InputLayer", "tensorlayer.layers.ConcatLayer", "tensorlayer.layers.InputLayer", "tensorlayer.layers.InputLayer", "tensorlayer.layers.ConcatLayer", "tensorlayer.layers.Seq2Seq", "tensorlayer.layers.DenseLayer", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.ReshapeLayer", "tensorflow.random_uniform_initializer", "tensorlayer.layers.retrieve_seq_length_op", "tensorlayer.layers.retrieve_seq_length_op"], "methods", ["None"], ["", "def", "__get_network__", "(", "self", ",", "encode_seq", ",", "decode_seq", ",", "query_decode_seq", ",", "is_train", "=", "True", ",", "reuse", "=", "False", ")", ":", "\n", "\n", "        ", "w_init", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.02", ")", "\n", "g_init", "=", "tf", ".", "random_normal_initializer", "(", "1.", ",", "0.02", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "model_name", ",", "reuse", "=", "reuse", ")", "as", "vs", ":", "\n", "            ", "tl", ".", "layers", ".", "set_name_reuse", "(", "reuse", ")", "\n", "net_encode_traffic", "=", "InputLayer", "(", "encode_seq", ",", "name", "=", "'in_root_net'", ")", "\n", "net_encode_query", "=", "InputLayer", "(", "self", ".", "query_x", ",", "name", "=", "\"in_query_net\"", ")", "\n", "net_encode", "=", "ConcatLayer", "(", "[", "net_encode_traffic", ",", "net_encode_query", "]", ",", "concat_dim", "=", "-", "1", ",", "name", "=", "\"encode\"", ")", "\n", "\n", "net_decode_traffic", "=", "InputLayer", "(", "decode_seq", ",", "name", "=", "\"decode_root\"", ")", "\n", "net_decode_query", "=", "InputLayer", "(", "query_decode_seq", ",", "name", "=", "\"decode_query_net\"", ")", "\n", "net_decode", "=", "ConcatLayer", "(", "[", "net_decode_traffic", ",", "net_decode_query", "]", ",", "concat_dim", "=", "-", "1", ",", "name", "=", "\"decode\"", ")", "\n", "\n", "net_rnn", "=", "Seq2Seq", "(", "\n", "net_encode", ",", "net_decode", ",", "\n", "cell_fn", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", ",", "\n", "n_hidden", "=", "config", ".", "dim_hidden", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "0.1", ",", "0.1", ")", ",", "\n", "encode_sequence_length", "=", "tl", ".", "layers", ".", "retrieve_seq_length_op", "(", "net_encode", ".", "outputs", ")", ",", "\n", "decode_sequence_length", "=", "tl", ".", "layers", ".", "retrieve_seq_length_op", "(", "net_decode", ".", "outputs", ")", ",", "\n", "initial_state_encode", "=", "None", ",", "\n", "# dropout=(0.8 if is_train else None),", "\n", "dropout", "=", "None", ",", "\n", "n_layer", "=", "1", ",", "\n", "return_seq_2d", "=", "True", ",", "\n", "name", "=", "'seq2seq'", "\n", ")", "\n", "# net_out = DenseLayer(net_rnn, n_units=64, act=tf.identity, name='dense1')", "\n", "net_out", "=", "DenseLayer", "(", "net_rnn", ",", "n_units", "=", "1", ",", "act", "=", "tf", ".", "identity", ",", "name", "=", "'dense2'", ")", "\n", "if", "is_train", ":", "\n", "                ", "net_out", "=", "ReshapeLayer", "(", "net_out", ",", "(", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", "+", "1", ",", "1", ")", ",", "name", "=", "\"reshape_out\"", ")", "\n", "", "else", ":", "\n", "                ", "net_out", "=", "ReshapeLayer", "(", "net_out", ",", "(", "config", ".", "batch_size", ",", "1", ",", "1", ")", ",", "name", "=", "\"reshape_out\"", ")", "\n", "\n", "", "self", ".", "net_rnn", "=", "net_rnn", "\n", "\n", "return", "net_out", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Query_Comb_Model.__init__": [[423, 430], ["model.Query_Comb_Model.__create_placeholders_for_query__", "model.Query_Model.__init__"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Query_Comb_Model.__create_placeholders_for_query__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "__create_placeholders_for_query__", "(", ")", "\n", "super", "(", "Query_Comb_Model", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Query_Comb_Model.__create_placeholders_for_query__": [[431, 452], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "__create_placeholders_for_query__", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "query_x", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "config", ".", "batch_size", ",", "config", ".", "in_seq_length", ",", "1", "]", ",", "\n", "name", "=", "'input_query'", "\n", ")", "\n", "self", ".", "query_decode_seq", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ",", "\n", "name", "=", "'decode_query'", "\n", ")", "\n", "self", ".", "query_decode_seq_test", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "config", ".", "batch_size", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'decode_query'", "\n", ")", "\n", "self", ".", "traffic_state", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "config", ".", "batch_size", "*", "(", "config", ".", "out_seq_length", ")", ",", "config", ".", "dim_hidden", "]", ",", "\n", "name", "=", "\"traffic_state\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Query_Comb_Model.__create_training_op__": [[454, 466], ["tensorflow.train.exponential_decay", "tensorlayer.layers.get_variables_with_name", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer"], "methods", ["None"], ["", "def", "__create_training_op__", "(", "self", ")", ":", "\n", "        ", "self", ".", "learning_rate", "=", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "learning_rate", "=", "self", ".", "start_learning_rate", ",", "\n", "global_step", "=", "self", ".", "global_step", ",", "\n", "decay_steps", "=", "self", ".", "decay_steps", ",", "\n", "decay_rate", "=", "self", ".", "decay_rate", ",", "\n", "staircase", "=", "True", ",", "\n", "name", "=", "\"learning_rate\"", "\n", ")", "\n", "all_model_vars", "=", "tl", ".", "layers", ".", "get_variables_with_name", "(", "self", ".", "model_name", ")", "\n", "self", ".", "optim", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "learning_rate", ",", "beta1", "=", "0.5", ")", ".", "minimize", "(", "self", ".", "train_loss", ",", "var_list", "=", "all_model_vars", ")", "\n", "# self.optim = tf.train.AdamOptimizer(self.learning_rate, beta1=0.5) \\", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Query_Comb_Model.__create_model__": [[469, 484], ["model.Query_Comb_Model.__get_network__", "model.Query_Comb_Model.__get_network__", "model.Query_Comb_Model.train_net.print_params", "model.Query_Comb_Model.train_net.print_layers"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__get_network__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__get_network__"], ["", "def", "__create_model__", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_seq2seq_rnn", ",", "self", ".", "train_seq2seq_out", ",", "self", ".", "train_query_rnn", ",", "self", ".", "train_net", "=", "self", ".", "__get_network__", "(", "\n", "self", ".", "x_root", ",", "\n", "self", ".", "decode_seqs", ",", "\n", "is_train", "=", "True", ",", "\n", "reuse", "=", "False", ",", "\n", ")", "\n", "self", ".", "test_seq2seq_rnn", ",", "self", ".", "test_seq2seq_out", ",", "self", ".", "test_query_rnn", ",", "self", ".", "test_net", "=", "self", ".", "__get_network__", "(", "\n", "self", ".", "x_root", ",", "\n", "self", ".", "decode_seqs_test", ",", "\n", "is_train", "=", "False", ",", "\n", "reuse", "=", "True", ",", "\n", ")", "\n", "self", ".", "train_net", ".", "print_params", "(", "False", ")", "\n", "self", ".", "train_net", ".", "print_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Query_Comb_Model.__create_loss__": [[485, 496], ["tensorlayer.cost.normalized_mean_square_error", "model.Query_Comb_Model.__get_mape__", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Spacial_Model.__get_mape__"], ["", "def", "__create_loss__", "(", "self", ")", ":", "\n", "# train loss", "\n", "        ", "self", ".", "nmse_train_noend", "=", "tl", ".", "cost", ".", "normalized_mean_square_error", "(", "\n", "tf", ".", "slice", "(", "self", ".", "train_net", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "tf", ".", "slice", "(", "self", ".", "target_seqs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", "\n", ")", "\n", "self", ".", "mape_train_noend", "=", "self", ".", "__get_mape__", "(", "\n", "tf", ".", "slice", "(", "self", ".", "train_net", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "tf", ".", "slice", "(", "self", ".", "target_seqs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", "\n", ")", "\n", "self", ".", "train_loss", "=", "self", ".", "nmse_train_noend", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Query_Comb_Model.__get_network__": [[497, 576], ["tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.variable_scope", "tensorlayer.layers.set_name_reuse", "tensorlayer.layers.InputLayer", "tensorlayer.layers.InputLayer", "tensorlayer.layers.Seq2Seq", "tensorlayer.layers.DenseLayer", "tensorflow.variable_scope", "tensorlayer.layers.set_name_reuse", "tensorlayer.layers.InputLayer", "tensorlayer.layers.InputLayer", "tensorlayer.layers.RNNLayer", "tensorlayer.layers.ExpandDimsLayer", "tensorlayer.layers.TileLayer", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.InputLayer", "tensorlayer.layers.DenseLayer", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.ReshapeLayer", "tensorflow.slice", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.ConcatLayer", "tensorlayer.layers.ConcatLayer", "tensorflow.random_uniform_initializer", "tensorlayer.layers.retrieve_seq_length_op", "tensorlayer.layers.retrieve_seq_length_op", "tensorflow.random_uniform_initializer"], "methods", ["None"], ["", "def", "__get_network__", "(", "self", ",", "encode_seq", ",", "decode_seq", ",", "is_train", "=", "True", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "w_init", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.02", ")", "\n", "g_init", "=", "tf", ".", "random_normal_initializer", "(", "1.", ",", "0.02", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"seq2seq_model\"", ",", "reuse", "=", "reuse", ")", "as", "vs", ":", "\n", "            ", "tl", ".", "layers", ".", "set_name_reuse", "(", "reuse", ")", "\n", "net_encode", "=", "InputLayer", "(", "encode_seq", ",", "name", "=", "'in_root'", ")", "\n", "\n", "net_decode", "=", "InputLayer", "(", "decode_seq", ",", "name", "=", "\"decode\"", ")", "\n", "\n", "net_rnn", "=", "Seq2Seq", "(", "\n", "net_encode", ",", "net_decode", ",", "\n", "cell_fn", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", ",", "\n", "n_hidden", "=", "config", ".", "dim_hidden", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "0.1", ",", "0.1", ")", ",", "\n", "encode_sequence_length", "=", "tl", ".", "layers", ".", "retrieve_seq_length_op", "(", "net_encode", ".", "outputs", ")", ",", "\n", "decode_sequence_length", "=", "tl", ".", "layers", ".", "retrieve_seq_length_op", "(", "net_decode", ".", "outputs", ")", ",", "\n", "initial_state_encode", "=", "None", ",", "\n", "# dropout=(0.8 if is_train else None),", "\n", "dropout", "=", "None", ",", "\n", "n_layer", "=", "1", ",", "\n", "return_seq_2d", "=", "True", ",", "\n", "name", "=", "'seq2seq'", "\n", ")", "\n", "# self.net_rnn_seq2seq = net_rnn", "\n", "net_rnn_seq2seq", "=", "net_rnn", "\n", "\n", "net_out_seq2seq", "=", "DenseLayer", "(", "net_rnn", ",", "n_units", "=", "1", ",", "act", "=", "tf", ".", "identity", ",", "name", "=", "'dense2'", ")", "\n", "if", "is_train", ":", "\n", "                ", "net_out_seq2seq", "=", "ReshapeLayer", "(", "net_out_seq2seq", ",", "(", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", "+", "1", ",", "1", ")", ",", "name", "=", "\"reshape_out\"", ")", "\n", "", "else", ":", "\n", "                ", "net_out_seq2seq", "=", "ReshapeLayer", "(", "net_out_seq2seq", ",", "(", "config", ".", "batch_size", ",", "1", ",", "1", ")", ",", "name", "=", "\"reshape_out\"", ")", "\n", "\n", "# net_out_seq2seq = net_out_seq2seq", "\n", "# net_out = DenseLayer(net_rnn, n_units=64, act=tf.identity, name='dense1')", "\n", "# net_out = DenseLayer(net_rnn, n_units=1, act=tf.identity, name='dense2')", "\n", "# net_out = ReshapeLayer(net_out, (config.batch_size, config.out_seq_length + 1, 1), name=\"reshape_out\")", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "model_name", ",", "reuse", "=", "reuse", ")", "as", "vs", ":", "\n", "            ", "tl", ".", "layers", ".", "set_name_reuse", "(", "reuse", ")", "\n", "net_encode_query", "=", "InputLayer", "(", "self", ".", "query_x", ",", "name", "=", "'in_root_query'", ")", "\n", "\n", "net_decode_query", "=", "InputLayer", "(", "self", ".", "query_decode_seq", ",", "name", "=", "\"decode_query\"", ")", "\n", "\n", "net_rnn_query", "=", "RNNLayer", "(", "\n", "net_decode_query", ",", "\n", "cell_fn", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", ",", "\n", "cell_init_args", "=", "{", "\"forget_bias\"", ":", "1.0", "}", ",", "\n", "n_hidden", "=", "config", ".", "query_dim_hidden", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "0.1", ",", "0.1", ")", ",", "\n", "n_steps", "=", "config", ".", "out_seq_length", ",", "\n", "return_last", "=", "True", ",", "\n", "# return_last=False,", "\n", "# return_seq_2d=True,", "\n", "name", "=", "\"rnn_query\"", "\n", ")", "\n", "net_rnn_query", "=", "ExpandDimsLayer", "(", "net_rnn_query", ",", "axis", "=", "1", ",", "name", "=", "\"rnn_query_expand\"", ")", "\n", "net_rnn_query", "=", "TileLayer", "(", "net_rnn_query", ",", "[", "1", ",", "config", ".", "out_seq_length", ",", "1", "]", ",", "name", "=", "\"rnn_query_tile\"", ")", "\n", "net_rnn_query", "=", "ReshapeLayer", "(", "net_rnn_query", ",", "(", "config", ".", "batch_size", "*", "config", ".", "out_seq_length", ",", "config", ".", "query_dim_hidden", ")", ",", "name", "=", "\"rnn_query_reshape\"", ")", "\n", "\n", "net_traffic_state", "=", "InputLayer", "(", "self", ".", "traffic_state", ",", "name", "=", "\"in_traffic_state\"", ")", "\n", "\n", "if", "is_train", ":", "\n", "                ", "net_rnn_traffic", "=", "ReshapeLayer", "(", "net_rnn_seq2seq", ",", "(", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", "+", "1", ",", "config", ".", "dim_hidden", ")", ",", "name", "=", "\"reshape_traffic_q1\"", ")", "\n", "net_rnn_traffic", ".", "outputs", "=", "tf", ".", "slice", "(", "net_rnn_traffic", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "config", ".", "dim_hidden", "]", ",", "name", "=", "\"slice_traffic_q\"", ")", "\n", "net_rnn_traffic", "=", "ReshapeLayer", "(", "net_rnn_traffic", ",", "(", "config", ".", "batch_size", "*", "config", ".", "out_seq_length", ",", "config", ".", "dim_hidden", ")", ",", "name", "=", "\"reshape_traffic_q2\"", ")", "\n", "net_out", "=", "ConcatLayer", "(", "[", "net_rnn_traffic", ",", "net_rnn_query", "]", ",", "concat_dim", "=", "-", "1", ",", "name", "=", "\"concat_traffic_query1\"", ")", "\n", "", "else", ":", "\n", "                ", "net_out", "=", "ConcatLayer", "(", "[", "net_traffic_state", ",", "net_rnn_query", "]", ",", "concat_dim", "=", "-", "1", ",", "name", "=", "\"concat_traffic_query2\"", ")", "\n", "\n", "# net_out = DenseLayer(net_out, n_units=128, act=tf.nn.relu, name=\"dense_query1\")", "\n", "# net_out = DenseLayer(net_out, n_units=32, act=tf.nn.relu, name=\"dense_query2\")", "\n", "", "net_out", "=", "DenseLayer", "(", "net_out", ",", "n_units", "=", "1", ",", "act", "=", "tf", ".", "identity", ",", "name", "=", "\"dense_query3\"", ")", "\n", "# net_out = ReshapeLayer(net_out, (config.batch_size, config.out_seq_length + 1, 1), name=\"reshape_out\")", "\n", "# if is_train:", "\n", "net_out", "=", "ReshapeLayer", "(", "net_out", ",", "(", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", ")", ",", "name", "=", "\"reshape_out\"", ")", "\n", "# else:", "\n", "#    net_out = ReshapeLayer(net_out, (config.batch_size, 1, 1), name=\"reshape_out\")", "\n", "", "return", "net_rnn_seq2seq", ",", "net_out_seq2seq", ",", "net_rnn_query", ",", "net_out", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__init__": [[579, 586], ["model.All_Comb_Model.__create_placeholders_for_features__", "model.Query_Comb_Model.__init__"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__create_placeholders_for_features__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "__create_placeholders_for_features__", "(", ")", "\n", "super", "(", "All_Comb_Model", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__create_model__": [[587, 608], ["model.All_Comb_Model.__get_network__", "model.All_Comb_Model.__get_network__", "model.All_Comb_Model.train_net_query.print_params", "model.All_Comb_Model.train_net_query.print_layers"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__get_network__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__get_network__"], ["", "def", "__create_model__", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_net_seq2seq", ",", "self", ".", "train_net_spatial", ",", "self", ".", "train_net_wide", ",", "self", ".", "train_net_rnn_query", ",", "self", ".", "train_net_query", "=", "self", ".", "__get_network__", "(", "\n", "self", ".", "x_root", ",", "\n", "self", ".", "x_neighbour", ",", "\n", "self", ".", "decode_seqs", ",", "\n", "self", ".", "features", ",", "\n", "self", ".", "features", ",", "\n", "is_train", "=", "True", ",", "\n", "reuse", "=", "False", ",", "\n", ")", "\n", "self", ".", "test_net_seq2seq", ",", "self", ".", "test_net_spatial", ",", "self", ".", "test_net_wide", ",", "self", ".", "test_net_rnn_query", ",", "self", ".", "test_net_query", "=", "self", ".", "__get_network__", "(", "\n", "self", ".", "x_root", ",", "\n", "self", ".", "x_neighbour", ",", "\n", "self", ".", "decode_seqs_test", ",", "\n", "self", ".", "features_test", ",", "\n", "self", ".", "features", ",", "\n", "is_train", "=", "False", ",", "\n", "reuse", "=", "True", ",", "\n", ")", "\n", "self", ".", "train_net_query", ".", "print_params", "(", "False", ")", "\n", "self", ".", "train_net_query", ".", "print_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__create_loss__": [[609, 649], ["tensorlayer.cost.normalized_mean_square_error", "tensorlayer.cost.normalized_mean_square_error", "model.All_Comb_Model.__get_mape__", "tensorlayer.cost.normalized_mean_square_error", "tensorlayer.cost.normalized_mean_square_error", "model.All_Comb_Model.__get_mape__", "tensorlayer.cost.normalized_mean_square_error", "model.All_Comb_Model.__get_mape__", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice"], "methods", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Spacial_Model.__get_mape__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Spacial_Model.__get_mape__", "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.Spacial_Model.__get_mape__"], ["", "def", "__create_loss__", "(", "self", ")", ":", "\n", "# train loss for spatial", "\n", "        ", "self", ".", "nmse_train_spatial", "=", "tl", ".", "cost", ".", "normalized_mean_square_error", "(", "\n", "tf", ".", "slice", "(", "self", ".", "train_net_spatial", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", "+", "1", ",", "1", "]", ")", ",", "\n", "tf", ".", "slice", "(", "self", ".", "target_seqs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", "+", "1", ",", "1", "]", ")", "\n", ")", "\n", "self", ".", "nmse_train_noend_spatial", "=", "tl", ".", "cost", ".", "normalized_mean_square_error", "(", "\n", "tf", ".", "slice", "(", "self", ".", "train_net_spatial", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "tf", ".", "slice", "(", "self", ".", "target_seqs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", "\n", ")", "\n", "self", ".", "mape_train_noend_spatial", "=", "self", ".", "__get_mape__", "(", "\n", "tf", ".", "slice", "(", "self", ".", "train_net_spatial", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "tf", ".", "slice", "(", "self", ".", "target_seqs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", "\n", ")", "\n", "self", ".", "train_loss_spatial", "=", "self", ".", "nmse_train_spatial", "\n", "# train loss for wide", "\n", "self", ".", "nmse_train_wide", "=", "tl", ".", "cost", ".", "normalized_mean_square_error", "(", "\n", "tf", ".", "slice", "(", "self", ".", "train_net_wide", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", "+", "1", ",", "1", "]", ")", ",", "\n", "tf", ".", "slice", "(", "self", ".", "target_seqs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", "+", "1", ",", "1", "]", ")", "\n", ")", "\n", "self", ".", "nmse_train_noend_wide", "=", "tl", ".", "cost", ".", "normalized_mean_square_error", "(", "\n", "tf", ".", "slice", "(", "self", ".", "train_net_wide", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "tf", ".", "slice", "(", "self", ".", "target_seqs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", "\n", ")", "\n", "self", ".", "mape_train_noend_wide", "=", "self", ".", "__get_mape__", "(", "\n", "tf", ".", "slice", "(", "self", ".", "train_net_wide", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "tf", ".", "slice", "(", "self", ".", "target_seqs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", "\n", ")", "\n", "self", ".", "train_loss_wide", "=", "self", ".", "nmse_train_wide", "\n", "# train loss for query", "\n", "self", ".", "nmse_train_noend_query", "=", "tl", ".", "cost", ".", "normalized_mean_square_error", "(", "\n", "tf", ".", "slice", "(", "self", ".", "train_net_query", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "tf", ".", "slice", "(", "self", ".", "target_seqs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", "\n", ")", "\n", "self", ".", "mape_train_noend_query", "=", "self", ".", "__get_mape__", "(", "\n", "tf", ".", "slice", "(", "self", ".", "train_net_query", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", ",", "\n", "tf", ".", "slice", "(", "self", ".", "target_seqs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ")", "\n", ")", "\n", "# self.train_loss_query = self.nmse_train_noend_query", "\n", "self", ".", "train_loss_query", "=", "self", ".", "mape_train_noend_query", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__create_training_op__": [[650, 668], ["tensorflow.train.exponential_decay", "tensorlayer.layers.get_variables_with_name", "tensorflow.train.AdamOptimizer().minimize", "tensorlayer.layers.get_variables_with_name", "tensorflow.train.AdamOptimizer().minimize", "tensorlayer.layers.get_variables_with_name", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer"], "methods", ["None"], ["", "def", "__create_training_op__", "(", "self", ")", ":", "\n", "        ", "self", ".", "learning_rate", "=", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "learning_rate", "=", "self", ".", "start_learning_rate", ",", "\n", "global_step", "=", "self", ".", "global_step", ",", "\n", "decay_steps", "=", "self", ".", "decay_steps", ",", "\n", "decay_rate", "=", "self", ".", "decay_rate", ",", "\n", "staircase", "=", "True", ",", "\n", "name", "=", "\"learning_rate\"", "\n", ")", "\n", "all_spatial_vars", "=", "tl", ".", "layers", ".", "get_variables_with_name", "(", "self", ".", "model_name", "+", "\"_spatial\"", ")", "\n", "self", ".", "optim_spatial", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "learning_rate", ",", "beta1", "=", "0.5", ")", ".", "minimize", "(", "self", ".", "train_loss_spatial", ",", "var_list", "=", "all_spatial_vars", ")", "\n", "all_wide_vars", "=", "tl", ".", "layers", ".", "get_variables_with_name", "(", "self", ".", "model_name", "+", "\"_wide\"", ")", "\n", "self", ".", "optim_wide", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "learning_rate", ",", "beta1", "=", "0.5", ")", ".", "minimize", "(", "self", ".", "train_loss_wide", ",", "var_list", "=", "all_wide_vars", ")", "\n", "all_query_vars", "=", "tl", ".", "layers", ".", "get_variables_with_name", "(", "self", ".", "model_name", "+", "\"_query\"", ")", "\n", "self", ".", "optim_query", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "learning_rate", ",", "beta1", "=", "0.5", ")", ".", "minimize", "(", "self", ".", "train_loss_query", ",", "var_list", "=", "all_query_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__create_placeholders_for_features__": [[669, 687], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "__create_placeholders_for_features__", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "features", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", "+", "1", ",", "config", ".", "dim_features", "]", ",", "\n", "name", "=", "'input_features'", "\n", ")", "\n", "\n", "self", ".", "features_test", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "config", ".", "batch_size", ",", "1", ",", "config", ".", "dim_features", "]", ",", "\n", "name", "=", "'input_features_test'", "\n", ")", "\n", "\n", "self", ".", "base_pred", "=", "tf", ".", "placeholder", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", "]", ",", "\n", "name", "=", "'input_base_pred'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.model.All_Comb_Model.__get_network__": [[689, 848], ["tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "tensorflow.variable_scope", "tensorlayer.layers.set_name_reuse", "tensorlayer.layers.InputLayer", "tensorlayer.layers.InputLayer", "tensorlayer.layers.ReshapeLayer", "tensorflow.expand_dims", "tensorlayer.layers.Conv1d", "tensorlayer.layers.BatchNormLayer", "tensorlayer.layers.MaxPool1d", "tensorlayer.layers.FlattenLayer", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.ConcatLayer", "tensorlayer.layers.InputLayer", "tensorlayer.layers.Seq2Seq", "tensorlayer.layers.DenseLayer", "tensorflow.variable_scope", "tensorlayer.layers.set_name_reuse", "tensorlayer.layers.InputLayer", "tensorlayer.layers.InputLayer", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.DenseLayer", "tensorlayer.layers.DenseLayer", "tensorlayer.layers.ConcatLayer", "tensorlayer.layers.DenseLayer", "tensorflow.variable_scope", "tensorlayer.layers.set_name_reuse", "tensorlayer.layers.InputLayer", "tensorlayer.layers.RNNLayer", "tensorlayer.layers.ExpandDimsLayer", "tensorlayer.layers.TileLayer", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.InputLayer", "tensorlayer.layers.ReshapeLayer", "tensorflow.slice", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.ConcatLayer", "tensorlayer.layers.DenseLayer", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.InputLayer", "tensorflow.add", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.ReshapeLayer", "tensorlayer.layers.ReshapeLayer", "tensorflow.random_uniform_initializer", "tensorlayer.layers.retrieve_seq_length_op", "tensorlayer.layers.retrieve_seq_length_op", "tensorflow.random_uniform_initializer"], "methods", ["None"], ["", "def", "__get_network__", "(", "self", ",", "encode_seq", ",", "neighbour_seq", ",", "decode_seq", ",", "features", ",", "features_full", ",", "is_train", "=", "True", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "w_init", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.02", ")", "\n", "g_init", "=", "tf", ".", "random_normal_initializer", "(", "1.", ",", "0.02", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "model_name", "+", "\"_spatial\"", ",", "reuse", "=", "reuse", ")", "as", "vs", ":", "\n", "            ", "tl", ".", "layers", ".", "set_name_reuse", "(", "reuse", ")", "\n", "inputs_x_root", "=", "InputLayer", "(", "encode_seq", ",", "name", "=", "'in_root'", ")", "\n", "inputs_x_nbor", "=", "InputLayer", "(", "neighbour_seq", ",", "name", "=", "\"in_neighbour\"", ")", "\n", "\n", "# encoding neighbour graph information", "\n", "n", "=", "ReshapeLayer", "(", "inputs_x_nbor", ",", "(", "config", ".", "batch_size", "*", "config", ".", "in_seq_length", ",", "config", ".", "num_neighbour", ")", ",", "\"reshape1\"", ")", "\n", "n", ".", "outputs", "=", "tf", ".", "expand_dims", "(", "n", ".", "outputs", ",", "axis", "=", "-", "1", ")", "\n", "n", "=", "Conv1d", "(", "n", ",", "4", ",", "4", ",", "1", ",", "act", "=", "tf", ".", "identity", ",", "padding", "=", "'SAME'", ",", "W_init", "=", "w_init", ",", "name", "=", "'conv1'", ")", "\n", "n", "=", "BatchNormLayer", "(", "n", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "is_train", "=", "is_train", ",", "gamma_init", "=", "g_init", ",", "name", "=", "'bn1'", ")", "\n", "n", "=", "MaxPool1d", "(", "n", ",", "2", ",", "2", ",", "padding", "=", "'valid'", ",", "name", "=", "'maxpool1'", ")", "\n", "n", "=", "FlattenLayer", "(", "n", ",", "name", "=", "\"flatten1\"", ")", "\n", "n", "=", "ReshapeLayer", "(", "n", ",", "(", "config", ".", "batch_size", ",", "config", ".", "in_seq_length", ",", "-", "1", ")", ",", "name", "=", "\"reshape1_back\"", ")", "\n", "\n", "net_encode", "=", "ConcatLayer", "(", "[", "inputs_x_root", ",", "n", "]", ",", "concat_dim", "=", "-", "1", ",", "name", "=", "\"encode\"", ")", "\n", "net_decode", "=", "InputLayer", "(", "decode_seq", ",", "name", "=", "\"decode\"", ")", "\n", "\n", "net_rnn", "=", "Seq2Seq", "(", "\n", "net_encode", ",", "net_decode", ",", "\n", "cell_fn", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", ",", "\n", "n_hidden", "=", "config", ".", "dim_hidden", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "0.1", ",", "0.1", ")", ",", "\n", "encode_sequence_length", "=", "tl", ".", "layers", ".", "retrieve_seq_length_op", "(", "net_encode", ".", "outputs", ")", ",", "\n", "decode_sequence_length", "=", "tl", ".", "layers", ".", "retrieve_seq_length_op", "(", "net_decode", ".", "outputs", ")", ",", "\n", "initial_state_encode", "=", "None", ",", "\n", "# dropout=(0.8 if is_train else None),", "\n", "dropout", "=", "None", ",", "\n", "n_layer", "=", "1", ",", "\n", "return_seq_2d", "=", "True", ",", "\n", "name", "=", "'seq2seq'", "\n", ")", "\n", "net_rnn_seq2seq", "=", "net_rnn", "\n", "\n", "net_spatial_out", "=", "DenseLayer", "(", "net_rnn", ",", "n_units", "=", "1", ",", "act", "=", "tf", ".", "identity", ",", "name", "=", "'dense2'", ")", "\n", "if", "is_train", ":", "\n", "                ", "net_spatial_out", "=", "ReshapeLayer", "(", "net_spatial_out", ",", "(", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", "+", "1", ",", "1", ")", ",", "name", "=", "\"reshape_out\"", ")", "\n", "", "else", ":", "\n", "                ", "net_spatial_out", "=", "ReshapeLayer", "(", "net_spatial_out", ",", "(", "config", ".", "batch_size", ",", "1", ",", "1", ")", ",", "name", "=", "\"reshape_out\"", ")", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "model_name", "+", "\"_wide\"", ",", "reuse", "=", "reuse", ")", "as", "vs", ":", "\n", "            ", "tl", ".", "layers", ".", "set_name_reuse", "(", "reuse", ")", "\n", "# Features", "\n", "net_features", "=", "InputLayer", "(", "features", ",", "name", "=", "\"in_features\"", ")", "\n", "net_features_full", "=", "InputLayer", "(", "features_full", ",", "name", "=", "\"in_features_full\"", ")", "\n", "net_features_full", "=", "ReshapeLayer", "(", "net_features_full", ",", "(", "config", ".", "batch_size", "*", "(", "config", ".", "out_seq_length", "+", "1", ")", ",", "config", ".", "dim_features", ")", ",", "name", "=", "\"reshape_feature_full_1\"", ")", "\n", "if", "is_train", ":", "\n", "                ", "net_features", "=", "ReshapeLayer", "(", "net_features", ",", "(", "config", ".", "batch_size", "*", "(", "config", ".", "out_seq_length", "+", "1", ")", ",", "config", ".", "dim_features", ")", ",", "name", "=", "\"reshape_feature_1\"", ")", "\n", "", "else", ":", "\n", "                ", "net_features", "=", "ReshapeLayer", "(", "net_features", ",", "(", "config", ".", "batch_size", "*", "(", "1", ")", ",", "config", ".", "dim_features", ")", ",", "name", "=", "\"reshape_feature_1\"", ")", "\n", "\n", "", "self", ".", "net_features_dim", "=", "32", "\n", "net_features", "=", "DenseLayer", "(", "net_features", ",", "n_units", "=", "self", ".", "net_features_dim", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "'dense_features'", ")", "\n", "net_features_full", "=", "DenseLayer", "(", "net_features_full", ",", "n_units", "=", "self", ".", "net_features_dim", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "name", "=", "'dense_features_full'", ")", "\n", "# self.net_features = net_features", "\n", "\n", "net_wide_out", "=", "ConcatLayer", "(", "[", "net_rnn_seq2seq", ",", "net_features", "]", ",", "concat_dim", "=", "-", "1", ",", "name", "=", "\"concat_features\"", ")", "\n", "net_wide_out", "=", "DenseLayer", "(", "net_wide_out", ",", "n_units", "=", "1", ",", "act", "=", "tf", ".", "identity", ",", "name", "=", "'dense2'", ")", "\n", "\n", "if", "is_train", ":", "\n", "                ", "net_wide_out", "=", "ReshapeLayer", "(", "net_wide_out", ",", "(", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", "+", "1", ",", "1", ")", ",", "name", "=", "\"reshape_out\"", ")", "\n", "", "else", ":", "\n", "                ", "net_wide_out", "=", "ReshapeLayer", "(", "net_wide_out", ",", "(", "config", ".", "batch_size", ",", "1", ",", "1", ")", ",", "name", "=", "\"reshape_out\"", ")", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "model_name", "+", "\"_query\"", ",", "reuse", "=", "reuse", ")", "as", "vs", ":", "\n", "            ", "tl", ".", "layers", ".", "set_name_reuse", "(", "reuse", ")", "\n", "\n", "net_decode_query", "=", "InputLayer", "(", "self", ".", "query_decode_seq", ",", "name", "=", "\"decode_query\"", ")", "\n", "\n", "net_rnn_query", "=", "RNNLayer", "(", "\n", "net_decode_query", ",", "\n", "cell_fn", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", ",", "\n", "cell_init_args", "=", "{", "\"forget_bias\"", ":", "1.0", "}", ",", "\n", "n_hidden", "=", "config", ".", "query_dim_hidden", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "0.1", ",", "0.1", ")", ",", "\n", "n_steps", "=", "config", ".", "out_seq_length", ",", "\n", "return_last", "=", "True", ",", "\n", "\n", "# return_last=False,", "\n", "# return_seq_2d=True,", "\n", "name", "=", "\"rnn_query\"", "\n", ")", "\n", "'''\n            net_rnn_query = DynamicRNNLayer(\n                net_decode_query,\n                cell_fn=tf.contrib.rnn.BasicLSTMCell,\n                cell_init_args={\"forget_bias\": 1.0},\n                # n_hidden=config.query_dim_hidden,\n                n_hidden=32,\n                initializer=tf.random_uniform_initializer(-0.1, 0.1),\n                return_last=True,\n                # dropout=0.8,\n                sequence_length=tl.layers.retrieve_seq_length_op(net_decode_query.outputs),\n                # return_last=False,\n                # return_seq_2d=True,\n                name=\"rnn_query_dynamic\"\n            )\n            '''", "\n", "\n", "net_rnn_query", "=", "ExpandDimsLayer", "(", "net_rnn_query", ",", "axis", "=", "1", ",", "name", "=", "\"rnn_query_expand\"", ")", "\n", "net_rnn_query", "=", "TileLayer", "(", "net_rnn_query", ",", "[", "1", ",", "config", ".", "out_seq_length", ",", "1", "]", ",", "name", "=", "\"rnn_query_tile\"", ")", "\n", "net_rnn_query", "=", "ReshapeLayer", "(", "net_rnn_query", ",", "(", "config", ".", "batch_size", "*", "config", ".", "out_seq_length", ",", "config", ".", "query_dim_hidden", ")", ",", "name", "=", "\"rnn_query_reshape\"", ")", "\n", "# net_rnn_query = ReshapeLayer(net_rnn_query, (config.batch_size * config.out_seq_length, 32), name=\"rnn_query_reshape\")", "\n", "\n", "# self.net_rnn_query = net_rnn_query", "\n", "\n", "net_traffic_state", "=", "InputLayer", "(", "self", ".", "traffic_state", ",", "name", "=", "\"in_traffic_state\"", ")", "\n", "\n", "'''\n            if is_train:\n                net_rnn_traffic = ReshapeLayer(net_rnn_seq2seq, (config.batch_size, config.out_seq_length + 1, config.dim_hidden), name=\"reshape_traffic_q1\")\n                net_rnn_traffic.outputs = tf.slice(net_rnn_traffic.outputs, [0, 0, 0], [config.batch_size, config.out_seq_length, config.dim_hidden], name=\"slice_traffic_q\")\n                net_rnn_traffic = ReshapeLayer(net_rnn_traffic, (config.batch_size * config.out_seq_length, config.dim_hidden), name=\"reshape_traffic_q2\")\n\n                net_features_traffic = ReshapeLayer(net_features, (config.batch_size, config.out_seq_length + 1, self.net_features_dim), name=\"reshape_features_q1\")\n                net_features_traffic.outputs = tf.slice(net_features_traffic.outputs, [0, 0, 0], [config.batch_size, config.out_seq_length, self.net_features_dim], name=\"slice_features_q\")\n                net_features_traffic = ReshapeLayer(net_features_traffic, (config.batch_size * config.out_seq_length, self.net_features_dim), name=\"reshape_features_q2\")\n\n                net_query_out = ConcatLayer([net_rnn_traffic, net_features_traffic, net_rnn_query], concat_dim=-1, name=\"concat_traffic_query1\")\n                # net_query_out = ConcatLayer([net_rnn_traffic, net_rnn_query], concat_dim=-1, name=\"concat_traffic_query1\")\n            else:\n            '''", "\n", "net_features_traffic", "=", "ReshapeLayer", "(", "net_features_full", ",", "(", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", "+", "1", ",", "self", ".", "net_features_dim", ")", ",", "name", "=", "\"reshape_features_q1\"", ")", "\n", "net_features_traffic", ".", "outputs", "=", "tf", ".", "slice", "(", "net_features_traffic", ".", "outputs", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "self", ".", "net_features_dim", "]", ",", "name", "=", "\"slice_features_q\"", ")", "\n", "net_features_traffic", "=", "ReshapeLayer", "(", "net_features_traffic", ",", "(", "config", ".", "batch_size", "*", "config", ".", "out_seq_length", ",", "self", ".", "net_features_dim", ")", ",", "name", "=", "\"reshape_features_q2\"", ")", "\n", "\n", "net_query_out", "=", "ConcatLayer", "(", "[", "net_traffic_state", ",", "net_features_traffic", ",", "net_rnn_query", "]", ",", "concat_dim", "=", "-", "1", ",", "name", "=", "\"concat_traffic_query1\"", ")", "\n", "# net_rnn_traffic = ReshapeLayer(net_rnn_seq2seq, (config.batch_size, config.out_seq_length + 1, config.dim_hidden), name=\"reshape_traffic_q1\")", "\n", "# net_rnn_traffic.outputs = tf.slice(net_rnn_traffic.outputs, [0, 0, 0], [config.batch_size, config.out_seq_length, config.dim_hidden], name=\"slice_traffic_q\")", "\n", "# net_rnn_traffic = ReshapeLayer(net_rnn_traffic, (config.batch_size * config.out_seq_length, config.dim_hidden), name=\"reshape_traffic_q2\")", "\n", "# net_query_out = ConcatLayer([net_rnn_traffic, net_features_traffic, net_rnn_query], concat_dim=-1, name=\"concat_traffic_query1\")", "\n", "\n", "# net_out = DenseLayer(net_out, n_units=128, act=tf.nn.relu, name=\"dense_query1\")", "\n", "# net_out = DenseLayer(net_out, n_units=64, act=tf.nn.relu, name=\"dense_query2\")", "\n", "# net_query_out = DropoutLayer(net_query_out, keep=0.8, is_fix=True, is_train=is_train, name='drop_query3')", "\n", "net_query_out", "=", "DenseLayer", "(", "net_query_out", ",", "n_units", "=", "1", ",", "act", "=", "tf", ".", "identity", ",", "name", "=", "\"dense_query3\"", ")", "\n", "# net_out = ReshapeLayer(net_out, (config.batch_size, config.out_seq_length + 1, 1), name=\"reshape_out\")", "\n", "# if is_train:", "\n", "net_query_out", "=", "ReshapeLayer", "(", "net_query_out", ",", "(", "config", ".", "batch_size", ",", "config", ".", "out_seq_length", ",", "1", ")", ",", "name", "=", "\"reshape_out\"", ")", "\n", "# else:", "\n", "#    net_out = ReshapeLayer(net_out, (config.batch_size, 1, 1), name=\"reshape_out\")", "\n", "\n", "# TODO residual net", "\n", "'''\n            if is_train:\n                net_query_out.outputs = tf.add(\n                    net_query_out.outputs,\n                    tf.slice(net_wide_out.outputs, [0, 0, 0], [config.batch_size, config.out_seq_length, 1]),\n                    name=\"res_add\"\n                )\n            else:\n            '''", "\n", "net_base_pred", "=", "InputLayer", "(", "self", ".", "base_pred", ",", "name", "=", "\"in_net_base_pred\"", ")", "\n", "net_query_out", ".", "outputs", "=", "tf", ".", "add", "(", "net_query_out", ".", "outputs", ",", "net_base_pred", ".", "outputs", ",", "name", "=", "\"res_add\"", ")", "\n", "\n", "", "return", "net_rnn_seq2seq", ",", "net_spatial_out", ",", "net_wide_out", ",", "net_rnn_query", ",", "net_query_out", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.__init__": [[5, 7], ["pandas.DataFrame"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "columns", ")", ":", "\n", "        ", "self", ".", "log", "=", "pd", ".", "DataFrame", "(", "columns", "=", "columns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.add_log": [[9, 12], ["len", "len"], "methods", ["None"], ["", "def", "add_log", "(", "self", ",", "index", ",", "log_content", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "log", ".", "columns", ")", "==", "len", "(", "log_content", ")", "\n", "self", ".", "log", ".", "loc", "[", "index", "]", "=", "log_content", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.log.Logger.save": [[14, 16], ["log.Logger.log.to_csv"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "log", ".", "to_csv", "(", "path", ",", "float_format", "=", "\"%.8f\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.find_neighbours": [[9, 108], ["open", "eval", "open.close", "open", "open.readlines", "open.close", "open", "open.readlines", "open.close", "open", "open.readlines", "open.close", "open", "pickle.load", "open.close", "open", "dict", "progressbar.ProgressBar", "enumerate", "open.close", "open.readline", "len", "len", "len", "len", "len", "len", "progressbar.ProgressBar.update", "line.replace().split", "dataloader.find_neighbours.get_dict"], "function", ["None"], ["def", "find_neighbours", "(", "predecessor", "=", "5", ",", "successors", "=", "5", ")", ":", "\n", "\n", "    ", "event_filter_file", "=", "open", "(", "config", ".", "data_path", "+", "\"event_filter.txt\"", ",", "\"r\"", ")", "\n", "event_filter_flag", "=", "eval", "(", "event_filter_file", ".", "readline", "(", ")", ")", "\n", "event_filter_file", ".", "close", "(", ")", "\n", "\n", "event_set_file", "=", "open", "(", "config", ".", "data_path", "+", "\"event_link_set_beijing_1km\"", ",", "\"r\"", ")", "\n", "event_set", "=", "event_set_file", ".", "readlines", "(", ")", "\n", "event_set_file", ".", "close", "(", ")", "\n", "\n", "event_link_file", "=", "open", "(", "config", ".", "result_path", "+", "\"event_link_set_beijing_link_1km.txt\"", ",", "\"r\"", ")", "\n", "event_link", "=", "event_link_file", ".", "readlines", "(", ")", "\n", "event_link_file", ".", "close", "(", ")", "\n", "\n", "event_pagerank_file", "=", "open", "(", "config", ".", "result_path", "+", "\"pagerank_1km.txt\"", ",", "\"r\"", ")", "\n", "event_pagerank", "=", "event_pagerank_file", ".", "readlines", "(", ")", "\n", "event_pagerank_file", ".", "close", "(", ")", "\n", "\n", "# traffic_data_file = open(config.data_path + \"event_traffic_completion_beijing_15min.pkl\", \"rb\")", "\n", "# traffic_data_file = open(config.data_path + \"event_traffic_beijing_mv_avg_15min_completion.pkl\", \"rb\")", "\n", "# traffic_data_file = open(config.data_path + \"event_traffic_beijing_1km_mv_avg_15min.pkl\", \"rb\")", "\n", "traffic_data_file", "=", "open", "(", "config", ".", "data_path", "+", "\"event_traffic_beijing_1km_mv_avg_15min_completion.pkl\"", ",", "\"rb\"", ")", "\n", "traffic_data", "=", "pickle", ".", "load", "(", "traffic_data_file", ",", "encoding", "=", "'latin1'", ")", "\n", "traffic_data_file", ".", "close", "(", ")", "\n", "\n", "outfile", "=", "open", "(", "config", ".", "result_path", "+", "\"neighbours_1km.txt\"", ",", "\"w\"", ")", "\n", "\n", "assert", "len", "(", "event_filter_flag", ")", "==", "len", "(", "event_set", ")", "\n", "assert", "len", "(", "event_filter_flag", ")", "==", "len", "(", "event_link", ")", "\n", "assert", "len", "(", "event_filter_flag", ")", "==", "len", "(", "event_pagerank", ")", "\n", "\n", "save_dict", "=", "dict", "(", ")", "\n", "\n", "bar", "=", "progressbar", ".", "ProgressBar", "(", "max_value", "=", "1151", ")", "\n", "for", "iter", ",", "line", "in", "enumerate", "(", "event_set", ")", ":", "\n", "        ", "bar", ".", "update", "(", "iter", ")", "\n", "\n", "if", "event_filter_flag", "[", "iter", "]", "==", "0", ":", "\n", "            ", "continue", "\n", "", "nodes", "=", "line", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "\n", "def", "get_dict", "(", "links", ")", ":", "\n", "            ", "ldict", "=", "dict", "(", ")", "\n", "llist", "=", "eval", "(", "links", ")", "\n", "for", "l", "in", "llist", ":", "\n", "                ", "if", "l", "[", "2", "]", "!=", "1", ":", "\n", "                    ", "continue", "\n", "", "if", "l", "[", "0", "]", "not", "in", "ldict", ":", "\n", "                    ", "ldict", "[", "l", "[", "0", "]", "]", "=", "{", "\"prev\"", ":", "list", "(", ")", ",", "\"next\"", ":", "list", "(", ")", "}", "\n", "", "if", "l", "[", "1", "]", "not", "in", "ldict", ":", "\n", "                    ", "ldict", "[", "l", "[", "1", "]", "]", "=", "{", "\"prev\"", ":", "list", "(", ")", ",", "\"next\"", ":", "list", "(", ")", "}", "\n", "", "ldict", "[", "l", "[", "0", "]", "]", "[", "\"next\"", "]", ".", "append", "(", "l", "[", "1", "]", ")", "\n", "ldict", "[", "l", "[", "1", "]", "]", "[", "\"prev\"", "]", ".", "append", "(", "l", "[", "0", "]", ")", "\n", "", "return", "ldict", "\n", "\n", "", "link_dict", "=", "get_dict", "(", "event_link", "[", "iter", "]", ")", "\n", "\n", "for", "node", "in", "nodes", ":", "\n", "            ", "if", "node", "not", "in", "traffic_data", ":", "\n", "                ", "continue", "\n", "\n", "", "def", "get_neighbours", "(", "root", ",", "num", ",", "direction", ")", ":", "\n", "                ", "assert", "direction", "==", "\"prev\"", "or", "direction", "==", "\"next\"", "\n", "qnode", "=", "queue", ".", "Queue", "(", ")", "\n", "qnode", ".", "put", "(", "root", ")", "\n", "reslist", "=", "list", "(", ")", "\n", "while", "len", "(", "reslist", ")", "<", "num", "and", "not", "qnode", ".", "empty", "(", ")", ":", "\n", "                    ", "cur", "=", "qnode", ".", "get", "(", ")", "\n", "if", "cur", "not", "in", "traffic_data", ":", "\n", "                        ", "continue", "\n", "", "if", "cur", "in", "link_dict", ":", "\n", "                        ", "for", "n", "in", "link_dict", "[", "cur", "]", "[", "direction", "]", ":", "\n", "                            ", "qnode", ".", "put", "(", "n", ")", "\n", "", "", "if", "cur", "!=", "root", ":", "\n", "                        ", "reslist", ".", "append", "(", "cur", ")", "\n", "", "", "return", "reslist", "\n", "\n", "", "prevlist", "=", "get_neighbours", "(", "node", ",", "predecessor", ",", "\"prev\"", ")", "\n", "nextlist", "=", "get_neighbours", "(", "node", ",", "successors", ",", "\"next\"", ")", "\n", "\n", "if", "len", "(", "prevlist", ")", "<", "predecessor", "or", "len", "(", "nextlist", ")", "<", "successors", ":", "\n", "                ", "continue", "\n", "\n", "", "fulllist", "=", "[", "node", "]", "\n", "fulllist", "+=", "prevlist", "\n", "fulllist", "+=", "nextlist", "\n", "\n", "key", "=", "\"\"", "\n", "for", "ele", "in", "fulllist", ":", "\n", "                ", "key", "+=", "ele", "+", "\"_\"", "\n", "", "if", "key", "in", "save_dict", ":", "\n", "                ", "continue", "\n", "", "save_dict", "[", "key", "]", "=", "1", "\n", "\n", "# print(fulllist)", "\n", "\n", "outfile", ".", "write", "(", "str", "(", "fulllist", ")", ")", "\n", "outfile", ".", "write", "(", "\"\\n\"", ")", "\n", "", "", "outfile", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data": [[109, 163], ["print", "open", "pickle.load", "open.close", "open", "open.readlines", "list", "list", "list", "numpy.stack", "numpy.stack", "print", "eval", "numpy.expand_dims", "list", "reversed", "numpy.array", "numpy.swapaxes", "np.stack.append", "np.stack.append", "list.append", "numpy.percentile", "len", "np.swapaxes.append", "np.swapaxes.append"], "function", ["None"], ["", "def", "load_data", "(", "predecessor", "=", "5", ",", "successors", "=", "5", ")", ":", "\n", "    ", "print", "(", "\"Loading data...\"", ")", "\n", "# traffic_data_file = open(config.data_path + \"event_traffic_completion_beijing_15min_filtfilt_0.05.pkl\", \"rb\")", "\n", "# traffic_data_file = open(config.data_path + \"event_traffic_beijing_mv_avg_15min_completion.pkl\", \"rb\")", "\n", "# traffic_data_file = open(config.data_path + \"event_traffic_beijing_1km_mv_avg_15min.pkl\", \"rb\")", "\n", "traffic_data_file", "=", "open", "(", "config", ".", "data_path", "+", "\"event_traffic_beijing_1km_mv_avg_15min_completion.pkl\"", ",", "\"rb\"", ")", "\n", "traffic_data", "=", "pickle", ".", "load", "(", "traffic_data_file", ",", "encoding", "=", "'latin1'", ")", "\n", "traffic_data_file", ".", "close", "(", ")", "\n", "\n", "neighbour_file", "=", "open", "(", "config", ".", "result_path", "+", "\"neighbours_1km.txt\"", ",", "\"r\"", ")", "\n", "neighbour", "=", "neighbour_file", ".", "readlines", "(", ")", "\n", "\n", "rootdata", "=", "list", "(", ")", "\n", "neigdata", "=", "list", "(", ")", "\n", "\n", "rootpathlist", "=", "list", "(", ")", "\n", "for", "line", "in", "neighbour", ":", "\n", "        ", "group", "=", "eval", "(", "line", ")", "\n", "assert", "len", "(", "group", ")", "==", "predecessor", "+", "successors", "+", "1", "\n", "\n", "root_traffic", "=", "traffic_data", "[", "group", "[", "0", "]", "]", "\n", "root_traffic", "=", "np", ".", "expand_dims", "(", "root_traffic", ",", "axis", "=", "-", "1", ")", "\n", "\n", "prevlist", "=", "group", "[", "1", ":", "1", "+", "predecessor", "]", "\n", "nextlist", "=", "group", "[", "-", "successors", ":", "]", "\n", "neighbourlist", "=", "list", "(", ")", "\n", "\n", "for", "prev", "in", "reversed", "(", "prevlist", ")", ":", "\n", "            ", "neighbourlist", ".", "append", "(", "traffic_data", "[", "prev", "]", ")", "\n", "", "for", "next", "in", "nextlist", ":", "\n", "            ", "neighbourlist", ".", "append", "(", "traffic_data", "[", "next", "]", ")", "\n", "\n", "", "neighbourlist", "=", "np", ".", "array", "(", "neighbourlist", ")", "\n", "neighbourlist", "=", "np", ".", "swapaxes", "(", "neighbourlist", ",", "0", ",", "1", ")", "\n", "\n", "rootdata", ".", "append", "(", "root_traffic", ")", "\n", "neigdata", ".", "append", "(", "neighbourlist", ")", "\n", "\n", "rootpathlist", ".", "append", "(", "group", "[", "0", "]", ")", "\n", "\n", "", "rootdata", "=", "np", ".", "stack", "(", "rootdata", ")", "\n", "neigdata", "=", "np", ".", "stack", "(", "neigdata", ")", "\n", "\n", "assert", "rootdata", ".", "shape", "[", ":", "-", "1", "]", "==", "neigdata", ".", "shape", "[", ":", "-", "1", "]", "\n", "\n", "lowbound", "=", "5", "\n", "assert", "lowbound", ">", "0", "\n", "assert", "lowbound", "<", "np", ".", "percentile", "(", "rootdata", ",", "2", ")", "\n", "rootdata", "[", "rootdata", "<", "lowbound", "]", "=", "lowbound", "\n", "neigdata", "[", "neigdata", "<", "lowbound", "]", "=", "lowbound", "\n", "\n", "print", "(", "\"Data Loaded: x_root %s, x_neighbour: %s\"", "%", "(", "rootdata", ".", "shape", ",", "neigdata", ".", "shape", ")", ")", "\n", "\n", "return", "rootdata", ",", "neigdata", ",", "rootpathlist", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data_noneighbour": [[164, 205], ["print", "open", "pickle.load", "open.close", "open", "open.readlines", "list", "list", "enumerate", "numpy.stack", "print", "eval", "numpy.expand_dims", "np.stack.append", "list.append", "numpy.percentile", "len"], "function", ["None"], ["", "def", "load_data_noneighbour", "(", "predecessor", "=", "5", ",", "successors", "=", "5", ")", ":", "\n", "    ", "print", "(", "\"Loading data...\"", ")", "\n", "# traffic_data_file = open(config.data_path + \"event_traffic_completion_beijing_15min_filtfilt_0.05.pkl\", \"rb\")", "\n", "# traffic_data_file = open(config.data_path + \"event_traffic_beijing_mv_avg_15min_completion.pkl\", \"rb\")", "\n", "# traffic_data_file = open(config.data_path + \"event_traffic_beijing_1km_mv_avg_15min.pkl\", \"rb\")", "\n", "traffic_data_file", "=", "open", "(", "config", ".", "data_path", "+", "\"event_traffic_beijing_1km_mv_avg_15min_completion.pkl\"", ",", "\"rb\"", ")", "\n", "traffic_data", "=", "pickle", ".", "load", "(", "traffic_data_file", ",", "encoding", "=", "'latin1'", ")", "\n", "traffic_data_file", ".", "close", "(", ")", "\n", "\n", "neighbour_file", "=", "open", "(", "config", ".", "result_path", "+", "\"neighbours_1km.txt\"", ",", "\"r\"", ")", "\n", "neighbour", "=", "neighbour_file", ".", "readlines", "(", ")", "\n", "\n", "rootdata", "=", "list", "(", ")", "\n", "\n", "rootpathlist", "=", "list", "(", ")", "\n", "for", "idx", ",", "line", "in", "enumerate", "(", "neighbour", ")", ":", "\n", "# if idx > 100:", "\n", "#     break", "\n", "        ", "group", "=", "eval", "(", "line", ")", "\n", "assert", "len", "(", "group", ")", "==", "predecessor", "+", "successors", "+", "1", "\n", "\n", "root_traffic", "=", "traffic_data", "[", "group", "[", "0", "]", "]", "\n", "root_traffic", "=", "np", ".", "expand_dims", "(", "root_traffic", ",", "axis", "=", "-", "1", ")", "\n", "\n", "prevlist", "=", "group", "[", "1", ":", "1", "+", "predecessor", "]", "\n", "nextlist", "=", "group", "[", "-", "successors", ":", "]", "\n", "\n", "rootdata", ".", "append", "(", "root_traffic", ")", "\n", "\n", "rootpathlist", ".", "append", "(", "group", "[", "0", "]", ")", "\n", "\n", "", "rootdata", "=", "np", ".", "stack", "(", "rootdata", ")", "\n", "\n", "lowbound", "=", "5", "\n", "assert", "lowbound", ">", "0", "\n", "assert", "lowbound", "<", "np", ".", "percentile", "(", "rootdata", ",", "2", ")", "\n", "rootdata", "[", "rootdata", "<", "lowbound", "]", "=", "lowbound", "\n", "\n", "print", "(", "\"Data Loaded: x_root %s \"", ",", "rootdata", ".", "shape", ")", "\n", "\n", "return", "rootdata", ",", "rootpathlist", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_pathlist": [[206, 217], ["list", "open", "open.readlines", "eval", "list.append"], "function", ["None"], ["", "def", "get_pathlist", "(", ")", ":", "\n", "\n", "    ", "pathlist", "=", "list", "(", ")", "\n", "neighbour_file", "=", "open", "(", "config", ".", "result_path", "+", "\"neighbours_1km.txt\"", ",", "\"r\"", ")", "\n", "neighbour", "=", "neighbour_file", ".", "readlines", "(", ")", "\n", "\n", "for", "line", "in", "neighbour", ":", "\n", "        ", "group", "=", "eval", "(", "line", ")", "\n", "pathlist", ".", "append", "(", "group", "[", "0", "]", ")", "\n", "\n", "", "return", "pathlist", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch": [[218, 244], ["list", "list", "list", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.zeros", "numpy.zeros", "np.stack.append", "np.stack.append", "np.stack.append"], "function", ["None"], ["", "def", "get_minibatch", "(", "root_data", ",", "neighbour_data", ",", "order", ",", "num_seq", ")", ":", "\n", "    ", "minibatch_x_root", "=", "list", "(", ")", "\n", "minibatch_x_neighbour", "=", "list", "(", ")", "\n", "minibatch_y_root", "=", "list", "(", ")", "\n", "\n", "for", "o", "in", "order", ":", "\n", "        ", "seq_id", "=", "o", "//", "num_seq", "\n", "seq_loc", "=", "o", "%", "num_seq", "\n", "minibatch_x_root", ".", "append", "(", "root_data", "[", "seq_id", ",", "seq_loc", ":", "seq_loc", "+", "config", ".", "in_seq_length", ",", ":", "]", ")", "\n", "minibatch_y_root", ".", "append", "(", "root_data", "[", "seq_id", ",", "seq_loc", "+", "config", ".", "in_seq_length", ":", "seq_loc", "+", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ",", ":", "]", ")", "\n", "minibatch_x_neighbour", ".", "append", "(", "neighbour_data", "[", "seq_id", ",", "seq_loc", ":", "seq_loc", "+", "config", ".", "in_seq_length", ",", ":", "]", ")", "\n", "\n", "", "minibatch_x_root", "=", "np", ".", "stack", "(", "minibatch_x_root", ")", "\n", "minibatch_y_root", "=", "np", ".", "stack", "(", "minibatch_y_root", ")", "\n", "minibatch_x_neighbour", "=", "np", ".", "stack", "(", "minibatch_x_neighbour", ")", "\n", "\n", "minibatch_decode_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "minibatch_target_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "1", ":", ",", ":", "]", "=", "minibatch_y_root", "\n", "minibatch_target_seq", "[", ":", ",", ":", "-", "1", ",", ":", "]", "=", "minibatch_y_root", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "0", ",", ":", "]", "=", "config", ".", "start_id", "\n", "minibatch_target_seq", "[", ":", ",", "-", "1", ",", ":", "]", "=", "config", ".", "end_id", "\n", "\n", "return", "minibatch_x_root", ",", "minibatch_x_neighbour", ",", "minibatch_decode_seq", ",", "minibatch_target_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_data_all": [[245, 271], ["print", "open", "pickle.load", "open.close", "list", "list", "numpy.stack", "numpy.expand_dims", "print", "np.expand_dims.append", "list.append", "numpy.percentile"], "function", ["None"], ["", "def", "load_data_all", "(", ")", ":", "\n", "    ", "print", "(", "\"Loading data...\"", ")", "\n", "# traffic_data_file = open(config.data_path + \"event_traffic_completion_beijing_15min_filtfilt_0.05.pkl\", \"rb\")", "\n", "# traffic_data_file = open(config.data_path + \"event_traffic_beijing_mv_avg_15min_completion.pkl\", \"rb\")", "\n", "# traffic_data_file = open(config.data_path + \"event_traffic_beijing_1km_mv_avg_15min.pkl\", \"rb\")", "\n", "traffic_data_file", "=", "open", "(", "config", ".", "data_path", "+", "\"event_traffic_beijing_1km_mv_avg_15min_completion.pkl\"", ",", "\"rb\"", ")", "\n", "traffic_data", "=", "pickle", ".", "load", "(", "traffic_data_file", ",", "encoding", "=", "'latin1'", ")", "\n", "traffic_data_file", ".", "close", "(", ")", "\n", "\n", "alldata", "=", "list", "(", ")", "\n", "nodelist", "=", "list", "(", ")", "\n", "for", "node", "in", "traffic_data", ":", "\n", "        ", "alldata", ".", "append", "(", "traffic_data", "[", "node", "]", ")", "\n", "nodelist", ".", "append", "(", "node", ")", "\n", "", "alldata", "=", "np", ".", "stack", "(", "alldata", ")", "\n", "alldata", "=", "np", ".", "expand_dims", "(", "alldata", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# print(np.isfinite(alldata))", "\n", "# print(np.sum(alldata))", "\n", "lowbound", "=", "5", "\n", "assert", "lowbound", ">", "0", "\n", "assert", "lowbound", "<", "np", ".", "percentile", "(", "alldata", ",", "2", ")", "\n", "alldata", "[", "alldata", "<", "lowbound", "]", "=", "lowbound", "\n", "\n", "print", "(", "\"Data Loaded: all \"", ",", "alldata", ".", "shape", ")", "\n", "return", "alldata", ",", "nodelist", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_all": [[272, 295], ["list", "list", "numpy.stack", "numpy.stack", "numpy.zeros", "numpy.zeros", "np.stack.append", "np.stack.append"], "function", ["None"], ["", "def", "get_minibatch_all", "(", "root_data", ",", "order", ",", "num_seq", ")", ":", "\n", "    ", "minibatch_x_root", "=", "list", "(", ")", "\n", "minibatch_y_root", "=", "list", "(", ")", "\n", "\n", "for", "o", "in", "order", ":", "\n", "        ", "seq_id", "=", "o", "//", "num_seq", "\n", "seq_loc", "=", "o", "%", "num_seq", "\n", "minibatch_x_root", ".", "append", "(", "root_data", "[", "seq_id", ",", "seq_loc", ":", "seq_loc", "+", "config", ".", "in_seq_length", ",", ":", "]", ")", "\n", "minibatch_y_root", ".", "append", "(", "root_data", "[", "seq_id", ",", "seq_loc", "+", "config", ".", "in_seq_length", ":", "seq_loc", "+", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ",", ":", "]", ")", "\n", "\n", "", "minibatch_x_root", "=", "np", ".", "stack", "(", "minibatch_x_root", ")", "\n", "minibatch_y_root", "=", "np", ".", "stack", "(", "minibatch_y_root", ")", "\n", "\n", "minibatch_decode_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "minibatch_target_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "1", ":", ",", ":", "]", "=", "minibatch_y_root", "\n", "minibatch_target_seq", "[", ":", ",", ":", "-", "1", ",", ":", "]", "=", "minibatch_y_root", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "0", ",", ":", "]", "=", "config", ".", "start_id", "\n", "minibatch_target_seq", "[", ":", ",", "-", "1", ",", ":", "]", "=", "config", ".", "end_id", "\n", "\n", "return", "minibatch_x_root", ",", "minibatch_decode_seq", ",", "minibatch_target_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_all_query": [[296, 328], ["list", "list", "list", "list", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.zeros", "numpy.zeros", "numpy.zeros", "np.stack.append", "np.stack.append", "np.stack.append", "np.stack.append"], "function", ["None"], ["", "def", "get_minibatch_all_query", "(", "root_data", ",", "query_data", ",", "pathlist", ",", "order", ",", "num_seq", ")", ":", "\n", "    ", "minibatch_x_root", "=", "list", "(", ")", "\n", "minibatch_y_root", "=", "list", "(", ")", "\n", "minibatch_query_x", "=", "list", "(", ")", "\n", "minibatch_query_y", "=", "list", "(", ")", "\n", "\n", "for", "o", "in", "order", ":", "\n", "        ", "seq_id", "=", "o", "//", "num_seq", "\n", "seq_loc", "=", "o", "%", "num_seq", "\n", "minibatch_x_root", ".", "append", "(", "root_data", "[", "seq_id", ",", "seq_loc", ":", "seq_loc", "+", "config", ".", "in_seq_length", ",", ":", "]", ")", "\n", "minibatch_y_root", ".", "append", "(", "root_data", "[", "seq_id", ",", "seq_loc", "+", "config", ".", "in_seq_length", ":", "seq_loc", "+", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ",", ":", "]", ")", "\n", "minibatch_query_x", ".", "append", "(", "query_data", "[", "pathlist", "[", "seq_id", "]", "]", "[", "seq_loc", ":", "seq_loc", "+", "config", ".", "in_seq_length", ",", ":", "]", ")", "\n", "minibatch_query_y", ".", "append", "(", "query_data", "[", "pathlist", "[", "seq_id", "]", "]", "[", "seq_loc", "+", "config", ".", "in_seq_length", ":", "seq_loc", "+", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ",", ":", "]", ")", "\n", "\n", "", "minibatch_x_root", "=", "np", ".", "stack", "(", "minibatch_x_root", ")", "\n", "minibatch_y_root", "=", "np", ".", "stack", "(", "minibatch_y_root", ")", "\n", "minibatch_query_x", "=", "np", ".", "stack", "(", "minibatch_query_x", ")", "\n", "minibatch_query_y", "=", "np", ".", "stack", "(", "minibatch_query_y", ")", "\n", "\n", "minibatch_decode_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "minibatch_target_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "minibatch_decode_seq_query", "=", "np", ".", "zeros", "(", "(", "minibatch_query_y", ".", "shape", "[", "0", "]", ",", "minibatch_query_y", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_query_y", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "1", ":", ",", ":", "]", "=", "minibatch_y_root", "\n", "minibatch_target_seq", "[", ":", ",", ":", "-", "1", ",", ":", "]", "=", "minibatch_y_root", "\n", "minibatch_decode_seq_query", "[", ":", ",", "1", ":", ",", ":", "]", "=", "minibatch_query_y", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "0", ",", ":", "]", "=", "config", ".", "start_id", "\n", "minibatch_target_seq", "[", ":", ",", "-", "1", ",", ":", "]", "=", "config", ".", "end_id", "\n", "minibatch_decode_seq_query", "[", ":", ",", "0", ",", ":", "]", "=", "config", ".", "start_id", "\n", "\n", "return", "minibatch_x_root", ",", "minibatch_decode_seq", ",", "minibatch_target_seq", ",", "minibatch_query_x", ",", "minibatch_decode_seq_query", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_all_comb": [[329, 373], ["list", "list", "list", "list", "list", "list", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.zeros", "numpy.zeros", "numpy.zeros", "np.stack.append", "np.stack.append", "np.stack.append", "np.stack.append", "np.stack.append", "numpy.zeros", "range", "np.stack.append"], "function", ["None"], ["", "def", "get_minibatch_all_comb", "(", "root_data", ",", "neighbour_data", ",", "features_info", ",", "features_time", ",", "query_data", ",", "pathlist", ",", "order", ",", "num_seq", ")", ":", "\n", "    ", "minibatch_x_root", "=", "list", "(", ")", "\n", "minibatch_y_root", "=", "list", "(", ")", "\n", "minibatch_query_x", "=", "list", "(", ")", "\n", "minibatch_query_y", "=", "list", "(", ")", "\n", "minibatch_x_neighbour", "=", "list", "(", ")", "\n", "minibatch_features", "=", "list", "(", ")", "\n", "\n", "for", "o", "in", "order", ":", "\n", "        ", "seq_id", "=", "o", "//", "num_seq", "\n", "seq_loc", "=", "o", "%", "num_seq", "\n", "minibatch_x_root", ".", "append", "(", "root_data", "[", "seq_id", ",", "seq_loc", ":", "seq_loc", "+", "config", ".", "in_seq_length", ",", ":", "]", ")", "\n", "minibatch_y_root", ".", "append", "(", "root_data", "[", "seq_id", ",", "seq_loc", "+", "config", ".", "in_seq_length", ":", "seq_loc", "+", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ",", ":", "]", ")", "\n", "minibatch_query_x", ".", "append", "(", "query_data", "[", "pathlist", "[", "seq_id", "]", "]", "[", "seq_loc", ":", "seq_loc", "+", "config", ".", "in_seq_length", ",", ":", "]", ")", "\n", "minibatch_query_y", ".", "append", "(", "query_data", "[", "pathlist", "[", "seq_id", "]", "]", "[", "seq_loc", "+", "config", ".", "in_seq_length", ":", "seq_loc", "+", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ",", ":", "]", ")", "\n", "minibatch_x_neighbour", ".", "append", "(", "neighbour_data", "[", "seq_id", ",", "seq_loc", ":", "seq_loc", "+", "config", ".", "in_seq_length", ",", ":", "]", ")", "\n", "\n", "f", "=", "np", ".", "zeros", "(", "[", "config", ".", "out_seq_length", "+", "1", ",", "config", ".", "dim_features", "]", ")", "\n", "for", "fi", "in", "range", "(", "config", ".", "out_seq_length", ")", ":", "\n", "            ", "f", "[", "fi", ",", ":", "config", ".", "dim_features_info", "]", "=", "features_info", "[", "seq_id", ",", ":", "]", "\n", "f", "[", "fi", ",", "-", "config", ".", "dim_features_time", ":", "]", "=", "features_time", "[", "seq_loc", "+", "config", ".", "in_seq_length", "+", "fi", ",", ":", "]", "\n", "", "minibatch_features", ".", "append", "(", "f", ")", "\n", "\n", "\n", "", "minibatch_x_root", "=", "np", ".", "stack", "(", "minibatch_x_root", ")", "\n", "minibatch_y_root", "=", "np", ".", "stack", "(", "minibatch_y_root", ")", "\n", "minibatch_query_x", "=", "np", ".", "stack", "(", "minibatch_query_x", ")", "\n", "minibatch_query_y", "=", "np", ".", "stack", "(", "minibatch_query_y", ")", "\n", "minibatch_x_neighbour", "=", "np", ".", "stack", "(", "minibatch_x_neighbour", ")", "\n", "minibatch_features", "=", "np", ".", "stack", "(", "minibatch_features", ")", "\n", "\n", "minibatch_decode_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "minibatch_target_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "minibatch_decode_seq_query", "=", "np", ".", "zeros", "(", "(", "minibatch_query_y", ".", "shape", "[", "0", "]", ",", "minibatch_query_y", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_query_y", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "1", ":", ",", ":", "]", "=", "minibatch_y_root", "\n", "minibatch_target_seq", "[", ":", ",", ":", "-", "1", ",", ":", "]", "=", "minibatch_y_root", "\n", "minibatch_decode_seq_query", "[", ":", ",", "1", ":", ",", ":", "]", "=", "minibatch_query_y", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "0", ",", ":", "]", "=", "config", ".", "start_id", "\n", "minibatch_target_seq", "[", ":", ",", "-", "1", ",", ":", "]", "=", "config", ".", "end_id", "\n", "minibatch_decode_seq_query", "[", ":", ",", "0", ",", ":", "]", "=", "config", ".", "start_id", "\n", "\n", "return", "minibatch_x_root", ",", "minibatch_x_neighbour", ",", "minibatch_features", ",", "minibatch_decode_seq", ",", "minibatch_target_seq", ",", "minibatch_query_x", ",", "minibatch_decode_seq_query", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_4_test_query": [[374, 405], ["list", "list", "list", "list", "range", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.zeros", "numpy.zeros", "numpy.zeros", "np.stack.append", "np.stack.append", "np.stack.append", "np.stack.append"], "function", ["None"], ["", "def", "get_minibatch_4_test_query", "(", "root_data", ",", "query_data", ",", "path", ",", "pathlist", ",", "cstep", ")", ":", "\n", "    ", "minibatch_x_root", "=", "list", "(", ")", "\n", "minibatch_y_root", "=", "list", "(", ")", "\n", "minibatch_query_x", "=", "list", "(", ")", "\n", "minibatch_query_y", "=", "list", "(", ")", "\n", "\n", "for", "o", "in", "range", "(", "config", ".", "batch_size", ")", ":", "\n", "        ", "baseloc", "=", "o", "+", "cstep", "*", "config", ".", "batch_size", "\n", "minibatch_x_root", ".", "append", "(", "root_data", "[", "path", ",", "baseloc", ":", "baseloc", "+", "config", ".", "in_seq_length", ",", ":", "]", ")", "\n", "minibatch_y_root", ".", "append", "(", "root_data", "[", "path", ",", "baseloc", "+", "config", ".", "in_seq_length", ":", "baseloc", "+", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ",", ":", "]", ")", "\n", "minibatch_query_x", ".", "append", "(", "query_data", "[", "pathlist", "[", "path", "]", "]", "[", "baseloc", ":", "baseloc", "+", "config", ".", "in_seq_length", ",", ":", "]", ")", "\n", "minibatch_query_y", ".", "append", "(", "query_data", "[", "pathlist", "[", "path", "]", "]", "[", "baseloc", "+", "config", ".", "in_seq_length", ":", "baseloc", "+", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ",", ":", "]", ")", "\n", "\n", "", "minibatch_x_root", "=", "np", ".", "stack", "(", "minibatch_x_root", ")", "\n", "minibatch_y_root", "=", "np", ".", "stack", "(", "minibatch_y_root", ")", "\n", "minibatch_query_x", "=", "np", ".", "stack", "(", "minibatch_query_x", ")", "\n", "minibatch_query_y", "=", "np", ".", "stack", "(", "minibatch_query_y", ")", "\n", "\n", "minibatch_decode_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "minibatch_target_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "minibatch_decode_seq_query", "=", "np", ".", "zeros", "(", "(", "minibatch_query_y", ".", "shape", "[", "0", "]", ",", "minibatch_query_y", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_query_y", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "1", ":", ",", ":", "]", "=", "minibatch_y_root", "\n", "minibatch_target_seq", "[", ":", ",", ":", "-", "1", ",", ":", "]", "=", "minibatch_y_root", "\n", "minibatch_decode_seq_query", "[", ":", ",", "1", ":", ",", ":", "]", "=", "minibatch_query_y", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "0", ",", ":", "]", "=", "config", ".", "start_id", "\n", "minibatch_target_seq", "[", ":", ",", "-", "1", ",", ":", "]", "=", "config", ".", "end_id", "\n", "minibatch_decode_seq_query", "[", ":", ",", "0", ",", ":", "]", "=", "config", ".", "start_id", "\n", "\n", "return", "minibatch_x_root", ",", "minibatch_decode_seq", ",", "minibatch_target_seq", ",", "minibatch_query_x", ",", "minibatch_decode_seq_query", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_4_test_all_comb": [[406, 449], ["list", "list", "list", "list", "list", "list", "range", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.zeros", "numpy.zeros", "numpy.zeros", "np.stack.append", "np.stack.append", "np.stack.append", "np.stack.append", "np.stack.append", "numpy.zeros", "range", "np.stack.append"], "function", ["None"], ["", "def", "get_minibatch_4_test_all_comb", "(", "root_data", ",", "neighbour_data", ",", "features_info", ",", "features_time", ",", "query_data", ",", "path", ",", "pathlist", ",", "cstep", ")", ":", "\n", "    ", "minibatch_x_root", "=", "list", "(", ")", "\n", "minibatch_y_root", "=", "list", "(", ")", "\n", "minibatch_query_x", "=", "list", "(", ")", "\n", "minibatch_query_y", "=", "list", "(", ")", "\n", "minibatch_x_neighbour", "=", "list", "(", ")", "\n", "minibatch_features", "=", "list", "(", ")", "\n", "\n", "for", "o", "in", "range", "(", "config", ".", "batch_size", ")", ":", "\n", "        ", "baseloc", "=", "o", "+", "cstep", "*", "config", ".", "batch_size", "\n", "minibatch_x_root", ".", "append", "(", "root_data", "[", "path", ",", "baseloc", ":", "baseloc", "+", "config", ".", "in_seq_length", ",", ":", "]", ")", "\n", "minibatch_y_root", ".", "append", "(", "root_data", "[", "path", ",", "baseloc", "+", "config", ".", "in_seq_length", ":", "baseloc", "+", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ",", ":", "]", ")", "\n", "minibatch_query_x", ".", "append", "(", "query_data", "[", "pathlist", "[", "path", "]", "]", "[", "baseloc", ":", "baseloc", "+", "config", ".", "in_seq_length", ",", ":", "]", ")", "\n", "minibatch_query_y", ".", "append", "(", "query_data", "[", "pathlist", "[", "path", "]", "]", "[", "baseloc", "+", "config", ".", "in_seq_length", ":", "baseloc", "+", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ",", ":", "]", ")", "\n", "minibatch_x_neighbour", ".", "append", "(", "neighbour_data", "[", "path", ",", "baseloc", ":", "baseloc", "+", "config", ".", "in_seq_length", ",", ":", "]", ")", "\n", "\n", "f", "=", "np", ".", "zeros", "(", "[", "config", ".", "out_seq_length", "+", "1", ",", "config", ".", "dim_features", "]", ")", "\n", "for", "fi", "in", "range", "(", "config", ".", "out_seq_length", ")", ":", "\n", "            ", "f", "[", "fi", ",", ":", "config", ".", "dim_features_info", "]", "=", "features_info", "[", "path", ",", ":", "]", "\n", "f", "[", "fi", ",", "-", "config", ".", "dim_features_time", ":", "]", "=", "features_time", "[", "-", "config", ".", "valid_length", "+", "baseloc", "+", "config", ".", "in_seq_length", "+", "fi", ",", ":", "]", "\n", "", "minibatch_features", ".", "append", "(", "f", ")", "\n", "\n", "\n", "", "minibatch_x_root", "=", "np", ".", "stack", "(", "minibatch_x_root", ")", "\n", "minibatch_y_root", "=", "np", ".", "stack", "(", "minibatch_y_root", ")", "\n", "minibatch_query_x", "=", "np", ".", "stack", "(", "minibatch_query_x", ")", "\n", "minibatch_query_y", "=", "np", ".", "stack", "(", "minibatch_query_y", ")", "\n", "minibatch_x_neighbour", "=", "np", ".", "stack", "(", "minibatch_x_neighbour", ")", "\n", "minibatch_features", "=", "np", ".", "stack", "(", "minibatch_features", ")", "\n", "\n", "minibatch_decode_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "minibatch_target_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "minibatch_decode_seq_query", "=", "np", ".", "zeros", "(", "(", "minibatch_query_y", ".", "shape", "[", "0", "]", ",", "minibatch_query_y", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_query_y", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "1", ":", ",", ":", "]", "=", "minibatch_y_root", "\n", "minibatch_target_seq", "[", ":", ",", ":", "-", "1", ",", ":", "]", "=", "minibatch_y_root", "\n", "minibatch_decode_seq_query", "[", ":", ",", "1", ":", ",", ":", "]", "=", "minibatch_query_y", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "0", ",", ":", "]", "=", "config", ".", "start_id", "\n", "minibatch_target_seq", "[", ":", ",", "-", "1", ",", ":", "]", "=", "config", ".", "end_id", "\n", "minibatch_decode_seq_query", "[", ":", ",", "0", ",", ":", "]", "=", "config", ".", "start_id", "\n", "\n", "return", "minibatch_x_root", ",", "minibatch_x_neighbour", ",", "minibatch_features", ",", "minibatch_decode_seq", ",", "minibatch_target_seq", ",", "minibatch_query_x", ",", "minibatch_decode_seq_query", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_features": [[450, 481], ["list", "list", "list", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.zeros", "numpy.zeros", "np.stack.append", "np.stack.append", "numpy.zeros", "range", "np.stack.append"], "function", ["None"], ["", "def", "get_minibatch_features", "(", "root_data", ",", "features_info", ",", "features_time", ",", "order", ",", "num_seq", ")", ":", "\n", "    ", "minibatch_x_root", "=", "list", "(", ")", "\n", "minibatch_y_root", "=", "list", "(", ")", "\n", "minibatch_features", "=", "list", "(", ")", "\n", "\n", "for", "o", "in", "order", ":", "\n", "        ", "seq_id", "=", "o", "//", "num_seq", "\n", "seq_loc", "=", "o", "%", "num_seq", "\n", "minibatch_x_root", ".", "append", "(", "root_data", "[", "seq_id", ",", "seq_loc", ":", "seq_loc", "+", "config", ".", "in_seq_length", ",", ":", "]", ")", "\n", "minibatch_y_root", ".", "append", "(", "root_data", "[", "seq_id", ",", "seq_loc", "+", "config", ".", "in_seq_length", ":", "seq_loc", "+", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ",", ":", "]", ")", "\n", "\n", "f", "=", "np", ".", "zeros", "(", "[", "config", ".", "out_seq_length", "+", "1", ",", "config", ".", "dim_features", "]", ")", "\n", "for", "fi", "in", "range", "(", "config", ".", "out_seq_length", ")", ":", "\n", "            ", "f", "[", "fi", ",", ":", "config", ".", "dim_features_info", "]", "=", "features_info", "[", "seq_id", ",", ":", "]", "\n", "f", "[", "fi", ",", "-", "config", ".", "dim_features_time", ":", "]", "=", "features_time", "[", "seq_loc", "+", "config", ".", "in_seq_length", "+", "fi", ",", ":", "]", "\n", "", "minibatch_features", ".", "append", "(", "f", ")", "\n", "\n", "", "minibatch_x_root", "=", "np", ".", "stack", "(", "minibatch_x_root", ")", "\n", "minibatch_y_root", "=", "np", ".", "stack", "(", "minibatch_y_root", ")", "\n", "minibatch_features", "=", "np", ".", "stack", "(", "minibatch_features", ")", "\n", "\n", "minibatch_decode_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "minibatch_target_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "1", ":", ",", ":", "]", "=", "minibatch_y_root", "\n", "minibatch_target_seq", "[", ":", ",", ":", "-", "1", ",", ":", "]", "=", "minibatch_y_root", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "0", ",", ":", "]", "=", "config", ".", "start_id", "\n", "minibatch_target_seq", "[", ":", ",", "-", "1", ",", ":", "]", "=", "config", ".", "end_id", "\n", "\n", "return", "minibatch_x_root", ",", "minibatch_features", ",", "minibatch_decode_seq", ",", "minibatch_target_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_features_4_test": [[482, 512], ["list", "list", "list", "range", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.zeros", "numpy.zeros", "np.stack.append", "np.stack.append", "numpy.zeros", "range", "np.stack.append"], "function", ["None"], ["", "def", "get_minibatch_features_4_test", "(", "root_data", ",", "features_info", ",", "features_time", ",", "path", ",", "cstep", ")", ":", "\n", "    ", "minibatch_x_root", "=", "list", "(", ")", "\n", "minibatch_y_root", "=", "list", "(", ")", "\n", "minibatch_features", "=", "list", "(", ")", "\n", "\n", "for", "o", "in", "range", "(", "config", ".", "batch_size", ")", ":", "\n", "        ", "baseloc", "=", "o", "+", "cstep", "*", "config", ".", "batch_size", "\n", "minibatch_x_root", ".", "append", "(", "root_data", "[", "path", ",", "baseloc", ":", "baseloc", "+", "config", ".", "in_seq_length", ",", ":", "]", ")", "\n", "minibatch_y_root", ".", "append", "(", "root_data", "[", "path", ",", "baseloc", "+", "config", ".", "in_seq_length", ":", "baseloc", "+", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ",", ":", "]", ")", "\n", "\n", "f", "=", "np", ".", "zeros", "(", "[", "config", ".", "out_seq_length", "+", "1", ",", "config", ".", "dim_features", "]", ")", "\n", "for", "fi", "in", "range", "(", "config", ".", "out_seq_length", ")", ":", "\n", "            ", "f", "[", "fi", ",", ":", "config", ".", "dim_features_info", "]", "=", "features_info", "[", "path", ",", ":", "]", "\n", "f", "[", "fi", ",", "-", "config", ".", "dim_features_time", ":", "]", "=", "features_time", "[", "-", "config", ".", "valid_length", "+", "baseloc", "+", "config", ".", "in_seq_length", "+", "fi", ",", ":", "]", "\n", "", "minibatch_features", ".", "append", "(", "f", ")", "\n", "\n", "", "minibatch_x_root", "=", "np", ".", "stack", "(", "minibatch_x_root", ")", "\n", "minibatch_y_root", "=", "np", ".", "stack", "(", "minibatch_y_root", ")", "\n", "minibatch_features", "=", "np", ".", "stack", "(", "minibatch_features", ")", "\n", "\n", "minibatch_decode_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "minibatch_target_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "1", ":", ",", ":", "]", "=", "minibatch_y_root", "\n", "minibatch_target_seq", "[", ":", ",", ":", "-", "1", ",", ":", "]", "=", "minibatch_y_root", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "0", ",", ":", "]", "=", "config", ".", "start_id", "\n", "minibatch_target_seq", "[", ":", ",", "-", "1", ",", ":", "]", "=", "config", ".", "end_id", "\n", "\n", "return", "minibatch_x_root", ",", "minibatch_features", ",", "minibatch_decode_seq", ",", "minibatch_target_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_4_test": [[513, 535], ["list", "list", "range", "numpy.stack", "numpy.stack", "numpy.zeros", "numpy.zeros", "np.stack.append", "np.stack.append"], "function", ["None"], ["", "def", "get_minibatch_4_test", "(", "root_data", ",", "path", ",", "cstep", ")", ":", "\n", "    ", "minibatch_x_root", "=", "list", "(", ")", "\n", "minibatch_y_root", "=", "list", "(", ")", "\n", "\n", "for", "o", "in", "range", "(", "config", ".", "batch_size", ")", ":", "\n", "        ", "baseloc", "=", "o", "+", "cstep", "*", "config", ".", "batch_size", "\n", "minibatch_x_root", ".", "append", "(", "root_data", "[", "path", ",", "baseloc", ":", "baseloc", "+", "config", ".", "in_seq_length", ",", ":", "]", ")", "\n", "minibatch_y_root", ".", "append", "(", "root_data", "[", "path", ",", "baseloc", "+", "config", ".", "in_seq_length", ":", "baseloc", "+", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ",", ":", "]", ")", "\n", "\n", "", "minibatch_x_root", "=", "np", ".", "stack", "(", "minibatch_x_root", ")", "\n", "minibatch_y_root", "=", "np", ".", "stack", "(", "minibatch_y_root", ")", "\n", "\n", "minibatch_decode_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "minibatch_target_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "1", ":", ",", ":", "]", "=", "minibatch_y_root", "\n", "minibatch_target_seq", "[", ":", ",", ":", "-", "1", ",", ":", "]", "=", "minibatch_y_root", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "0", ",", ":", "]", "=", "config", ".", "start_id", "\n", "minibatch_target_seq", "[", ":", ",", "-", "1", ",", ":", "]", "=", "config", ".", "end_id", "\n", "\n", "return", "minibatch_x_root", ",", "minibatch_decode_seq", ",", "minibatch_target_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_4_test_neighbour": [[536, 561], ["list", "list", "list", "range", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.zeros", "numpy.zeros", "np.stack.append", "np.stack.append", "np.stack.append"], "function", ["None"], ["", "def", "get_minibatch_4_test_neighbour", "(", "root_data", ",", "neighbour_data", ",", "path", ",", "cstep", ")", ":", "\n", "    ", "minibatch_x_root", "=", "list", "(", ")", "\n", "minibatch_y_root", "=", "list", "(", ")", "\n", "minibatch_x_neighbour", "=", "list", "(", ")", "\n", "\n", "for", "o", "in", "range", "(", "config", ".", "batch_size", ")", ":", "\n", "        ", "baseloc", "=", "o", "+", "cstep", "*", "config", ".", "batch_size", "\n", "minibatch_x_root", ".", "append", "(", "root_data", "[", "path", ",", "baseloc", ":", "baseloc", "+", "config", ".", "in_seq_length", ",", ":", "]", ")", "\n", "minibatch_y_root", ".", "append", "(", "root_data", "[", "path", ",", "baseloc", "+", "config", ".", "in_seq_length", ":", "baseloc", "+", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ",", ":", "]", ")", "\n", "minibatch_x_neighbour", ".", "append", "(", "neighbour_data", "[", "path", ",", "baseloc", ":", "baseloc", "+", "config", ".", "in_seq_length", ",", ":", "]", ")", "\n", "\n", "", "minibatch_x_root", "=", "np", ".", "stack", "(", "minibatch_x_root", ")", "\n", "minibatch_y_root", "=", "np", ".", "stack", "(", "minibatch_y_root", ")", "\n", "minibatch_x_neighbour", "=", "np", ".", "stack", "(", "minibatch_x_neighbour", ")", "\n", "\n", "minibatch_decode_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "minibatch_target_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "1", ":", ",", ":", "]", "=", "minibatch_y_root", "\n", "minibatch_target_seq", "[", ":", ",", ":", "-", "1", ",", ":", "]", "=", "minibatch_y_root", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "0", ",", ":", "]", "=", "config", ".", "start_id", "\n", "minibatch_target_seq", "[", ":", ",", "-", "1", ",", ":", "]", "=", "config", ".", "end_id", "\n", "\n", "return", "minibatch_x_root", ",", "minibatch_x_neighbour", ",", "minibatch_decode_seq", ",", "minibatch_target_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_event_filter": [[562, 571], ["range"], "function", ["None"], ["", "def", "get_event_filter", "(", "event_period", ")", ":", "\n", "    ", "event_filter", "=", "[", "0", "]", "*", "config", ".", "valid_length", "\n", "for", "etime", "in", "event_period", ":", "\n", "        ", "for", "t", "in", "range", "(", "etime", "[", "0", "]", ",", "etime", "[", "1", "]", ")", ":", "\n", "            ", "vt", "=", "t", "-", "(", "config", ".", "full_length", "-", "config", ".", "valid_length", ")", "\n", "if", "vt", "<", "0", ":", "\n", "                ", "break", "\n", "", "event_filter", "[", "vt", "]", "=", "1", "\n", "", "", "return", "event_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_event_filter_allpath": [[572, 579], ["numpy.zeros", "enumerate", "dataloader.get_event_filter", "len"], "function", ["home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_event_filter"], ["", "def", "get_event_filter_allpath", "(", "event_data", ",", "pathlist", ")", ":", "\n", "    ", "filter", "=", "np", ".", "zeros", "(", "(", "len", "(", "pathlist", ")", ",", "config", ".", "valid_length", ")", ")", "\n", "for", "idx", ",", "path", "in", "enumerate", "(", "pathlist", ")", ":", "\n", "        ", "filter", "[", "idx", "]", "=", "get_event_filter", "(", "event_data", "[", "path", "]", ")", "\n", "# print(np.sum(filter[idx]))", "\n", "# print(filter.shape)", "\n", "", "return", "filter", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_event_orders": [[580, 596], ["numpy.sum"], "function", ["None"], ["", "def", "get_event_orders", "(", "event_filter_allpath", ",", "full_train_order", ",", "num_seq", ",", "tsteps", "=", "500", ")", ":", "\n", "    ", "train_order", "=", "[", "0", "]", "*", "(", "config", ".", "batch_size", "*", "tsteps", ")", "\n", "curnum", "=", "0", "\n", "for", "ord", "in", "full_train_order", ":", "\n", "        ", "seq_id", "=", "ord", "//", "num_seq", "\n", "seq_loc", "=", "ord", "%", "num_seq", "\n", "if", "seq_id", ">=", "event_filter_allpath", ".", "shape", "[", "0", "]", "or", "seq_loc", "+", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ">=", "event_filter_allpath", ".", "shape", "[", "1", "]", ":", "\n", "            ", "continue", "\n", "", "if", "np", ".", "sum", "(", "event_filter_allpath", "[", "seq_id", ",", "seq_loc", "+", "config", ".", "in_seq_length", ":", "seq_loc", "+", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", "]", ")", ">", "0", ":", "\n", "            ", "train_order", "[", "curnum", "]", "=", "ord", "\n", "curnum", "+=", "1", "\n", "", "if", "curnum", "==", "config", ".", "batch_size", "*", "tsteps", ":", "\n", "            ", "break", "\n", "# assert curnum == config.batch_size * tsteps", "\n", "", "", "return", "train_order", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_minibatch_4_test_event": [[597, 645], ["list", "list", "list", "numpy.stack", "numpy.stack", "numpy.zeros", "numpy.zeros", "len", "range", "np.stack.append", "np.stack.append", "len", "range", "len", "np.stack.append", "np.stack.append", "len"], "function", ["None"], ["", "def", "get_minibatch_4_test_event", "(", "root_data", ",", "event_filter", ",", "path", ",", "startidx", ",", "neighbour_data", "=", "None", ")", ":", "\n", "    ", "assert", "root_data", ".", "shape", "[", "1", "]", "==", "len", "(", "event_filter", ")", "\n", "\n", "minibatch_x_root", "=", "list", "(", ")", "\n", "minibatch_y_root", "=", "list", "(", ")", "\n", "minibatch_x_neighbour", "=", "list", "(", ")", "\n", "\n", "curidx", "=", "startidx", "\n", "while", "len", "(", "minibatch_x_root", ")", "<", "config", ".", "batch_size", "and", "curidx", "<", "config", ".", "valid_length", "-", "config", ".", "in_seq_length", "-", "config", ".", "out_seq_length", ":", "\n", "        ", "flag", "=", "True", "\n", "for", "i", "in", "range", "(", "config", ".", "out_seq_length", ")", ":", "\n", "            ", "if", "event_filter", "[", "curidx", "+", "config", ".", "in_seq_length", "+", "i", "]", "==", "0", ":", "\n", "                ", "flag", "=", "False", "\n", "break", "\n", "", "", "if", "not", "flag", ":", "\n", "            ", "curidx", "+=", "1", "\n", "continue", "\n", "", "minibatch_x_root", ".", "append", "(", "root_data", "[", "path", ",", "curidx", ":", "curidx", "+", "config", ".", "in_seq_length", ",", ":", "]", ")", "\n", "minibatch_y_root", ".", "append", "(", "root_data", "[", "path", ",", "curidx", "+", "config", ".", "in_seq_length", ":", "curidx", "+", "config", ".", "in_seq_length", "+", "config", ".", "out_seq_length", ",", ":", "]", ")", "\n", "# minibatch_x_neighbour.append(neighbour_data[path, baseloc : baseloc + config.in_seq_length, :])", "\n", "curidx", "+=", "1", "\n", "\n", "\n", "", "if", "len", "(", "minibatch_x_root", ")", "<", "config", ".", "batch_size", "/", "2", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", ",", "curidx", ",", "True", "\n", "", "else", ":", "\n", "        ", "for", "last", "in", "range", "(", "config", ".", "batch_size", "-", "len", "(", "minibatch_x_root", ")", ")", ":", "\n", "            ", "minibatch_x_root", ".", "append", "(", "minibatch_x_root", "[", "-", "1", "]", ")", "\n", "minibatch_y_root", ".", "append", "(", "minibatch_y_root", "[", "-", "1", "]", ")", "\n", "\n", "", "", "minibatch_x_root", "=", "np", ".", "stack", "(", "minibatch_x_root", ")", "\n", "minibatch_y_root", "=", "np", ".", "stack", "(", "minibatch_y_root", ")", "\n", "# minibatch_x_neighbour = np.stack(minibatch_x_neighbour)", "\n", "\n", "minibatch_decode_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "minibatch_target_seq", "=", "np", ".", "zeros", "(", "(", "minibatch_y_root", ".", "shape", "[", "0", "]", ",", "minibatch_y_root", ".", "shape", "[", "1", "]", "+", "1", ",", "minibatch_y_root", ".", "shape", "[", "2", "]", ")", ")", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "1", ":", ",", ":", "]", "=", "minibatch_y_root", "\n", "minibatch_target_seq", "[", ":", ",", ":", "-", "1", ",", ":", "]", "=", "minibatch_y_root", "\n", "\n", "minibatch_decode_seq", "[", ":", ",", "0", ",", ":", "]", "=", "config", ".", "start_id", "\n", "minibatch_target_seq", "[", ":", ",", "-", "1", ",", ":", "]", "=", "config", ".", "end_id", "\n", "\n", "if", "curidx", "<", "config", ".", "valid_length", "-", "config", ".", "in_seq_length", "-", "config", ".", "out_seq_length", ":", "\n", "        ", "return", "minibatch_x_root", ",", "minibatch_decode_seq", ",", "minibatch_target_seq", ",", "curidx", ",", "False", "\n", "\n", "", "return", "minibatch_x_root", ",", "minibatch_decode_seq", ",", "minibatch_target_seq", ",", "curidx", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_features": [[646, 680], ["print", "open", "open", "open", "open", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "open.close", "open.close", "open.close", "open.close", "print", "numpy.zeros", "enumerate", "linklist.index", "len"], "function", ["None"], ["", "def", "load_features", "(", "pathlist", "=", "None", ")", ":", "\n", "    ", "print", "(", "\"Loading Features ...\"", ")", "\n", "coarse_file", "=", "open", "(", "config", ".", "data_path", "+", "\"wide_features/event_link_set_all_poi_type_feature_coarse_beijing_1km.pkl\"", ",", "\"rb\"", ")", "\n", "fine_file", "=", "open", "(", "config", ".", "data_path", "+", "\"wide_features/event_link_set_all_poi_type_feature_fine_beijing_1km.pkl\"", ",", "\"rb\"", ")", "\n", "info_file", "=", "open", "(", "config", ".", "data_path", "+", "\"wide_features/event_link_set_all_beijing_1km_link_info_feature.pkl\"", ",", "\"rb\"", ")", "\n", "time_file", "=", "open", "(", "config", ".", "data_path", "+", "\"wide_features/time_feature_15min.pkl\"", ",", "\"rb\"", ")", "\n", "\n", "linklist_coarse", ",", "features_coarse", "=", "pickle", ".", "load", "(", "coarse_file", ",", "encoding", "=", "'latin1'", ")", "\n", "linklist_fine", ",", "features_fine", "=", "pickle", ".", "load", "(", "fine_file", ",", "encoding", "=", "'latin1'", ")", "\n", "linklist_info", ",", "features_info", "=", "pickle", ".", "load", "(", "info_file", ",", "encoding", "=", "'latin1'", ")", "\n", "features_time", "=", "pickle", ".", "load", "(", "time_file", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "coarse_file", ".", "close", "(", ")", "\n", "fine_file", ".", "close", "(", ")", "\n", "info_file", ".", "close", "(", ")", "\n", "time_file", ".", "close", "(", ")", "\n", "\n", "assert", "linklist_coarse", "==", "linklist_fine", "\n", "assert", "linklist_coarse", "==", "linklist_info", "\n", "linklist", "=", "linklist_coarse", "\n", "\n", "if", "pathlist", "is", "not", "None", ":", "\n", "        ", "new_features_info", "=", "np", ".", "zeros", "(", "(", "len", "(", "pathlist", ")", ",", "features_info", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "for", "pid", ",", "path", "in", "enumerate", "(", "pathlist", ")", ":", "\n", "            ", "linkidx", "=", "linklist", ".", "index", "(", "path", ")", "\n", "new_features_info", "[", "pid", ",", ":", "]", "=", "features_info", "[", "linkidx", ",", ":", "]", "\n", "\n", "", "features_info", "=", "new_features_info", "\n", "linklist", "=", "pathlist", "\n", "\n", "", "print", "(", "\"Features Loaded. Info %s, Time %s\"", "%", "(", "features_info", ".", "shape", ",", "features_time", ".", "shape", ")", ")", "\n", "\n", "return", "features_info", ",", "features_time", ",", "linklist", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.load_event_data": [[681, 713], ["pickle.load", "open"], "function", ["None"], ["", "def", "load_event_data", "(", ")", ":", "\n", "    ", "'''\n\n    rootdata, neighbourdata, pathlist = load_data(5, 5)\n    event_period = pickle.load(open(config.data_path + \"event_link_set_beijing_event_time_1km.pkl\", \"rb\"))\n\n    pathid = dict()\n    # dup = 0\n    for idx ,path in enumerate(pathlist):\n        # if path in pathid:\n        #     dup += 1\n        pathid[path] = idx\n    # print(dup)\n\n    event_period_data_list = list()\n    for path in event_period:\n        if path not in pathid:\n            continue\n        for event in event_period[path]:\n            starttime = event[0]\n            endtime = event[1]\n            if endtime < config.full_length - config.valid_length:\n                continue\n            for ctime in range(starttime, endtime - config.out_seq_length):\n                event_period_data_list.append(rootdata[pathid[path], ctime - config.in_seq_length : ctime + config.out_seq_length, :])\n\n    event_period_data_list = np.stack(event_period_data_list, axis=0)\n    print(event_period_data_list.shape)\n    return event_period_data_list\n    '''", "\n", "event_period", "=", "pickle", ".", "load", "(", "open", "(", "config", ".", "data_path", "+", "\"event_link_set_beijing_event_time_1km.pkl\"", ",", "\"rb\"", ")", ")", "\n", "return", "event_period", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.dataloader.get_query_data": [[714, 723], ["print", "pickle.load", "print", "open", "numpy.expand_dims", "numpy.array"], "function", ["None"], ["", "def", "get_query_data", "(", ")", ":", "\n", "    ", "print", "(", "\"Loading Query %d...\"", "%", "config", ".", "impact_k", ")", "\n", "data", "=", "pickle", ".", "load", "(", "open", "(", "config", ".", "data_path", "+", "\"query_distribution_beijing_1km_k_%d_filtfilt.pkl\"", "%", "config", ".", "impact_k", ",", "\"rb\"", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "for", "node", "in", "data", ":", "\n", "        ", "data", "[", "node", "]", "=", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "data", "[", "node", "]", ")", ",", "axis", "=", "1", ")", "\n", "assert", "data", "[", "node", "]", ".", "shape", "[", "0", "]", "==", "config", ".", "full_length", "\n", "assert", "data", "[", "node", "]", ".", "shape", "[", "1", "]", "==", "1", "\n", "", "print", "(", "\"Query Loaded\"", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.utils.make_dirlist": [[6, 10], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "make_dirlist", "(", "dirlist", ")", ":", "\n", "    ", "for", "dir", "in", "dirlist", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.utils.now2string": [[13, 15], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "now2string", "(", "fmt", "=", "\"%Y-%m-%d-%H-%M-%S\"", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "fmt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.src.utils.mape": [[16, 18], ["numpy.abs"], "function", ["None"], ["", "def", "mape", "(", "pred", ",", "target", ")", ":", "\n", "    ", "return", "np", ".", "abs", "(", "pred", "-", "target", ")", "/", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.preprocessing.s_grid_and_d_grid.timeid": [[13, 25], ["time.strptime", "int", "int", "int"], "function", ["None"], ["def", "timeid", "(", "input1", ")", ":", "\n", "    ", "t1", "=", "time", ".", "strptime", "(", "input1", "[", "0", "]", ",", "\"%Y-%m-%d %H:%M:%S\"", ")", "\n", "mon", "=", "t1", ".", "tm_mon", "\n", "day", "=", "t1", ".", "tm_mday", "\n", "hour", "=", "t1", ".", "tm_hour", "\n", "minute", "=", "t1", ".", "tm_min", "\n", "time_id", "=", "60", "*", "(", "24", "*", "(", "30", "*", "(", "mon", "-", "4", ")", "+", "day", "-", "1", ")", "+", "hour", ")", "+", "minute", "\n", "#    if time_id >=87840:", "\n", "#        print\"%d\\t%d\\t%d\\t%d\"(mon,day,hour,minute)", "\n", "time_id_s", "=", "time_id", "+", "int", "(", "input1", "[", "1", "]", ")", "+", "int", "(", "input1", "[", "11", "]", ")", "\n", "time_id_d", "=", "time_id_s", "+", "int", "(", "input1", "[", "10", "]", ")", "\n", "return", "time_id_d", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.preprocessing.get_link_info_feature_beijing.link_info_feature_extraction": [[73, 126], ["list", "list", "list", "range", "open", "range", "list", "numpy.zeros", "range", "open", "list.append", "list.append", "print", "numpy.zeros", "range", "list.append", "list.append", "line.strip().replace().split", "list.append", "range", "print", "list.append", "line.strip().replace().split", "range", "range", "collections.defaultdict", "numpy.zeros", "float", "line.strip().replace", "line.strip().replace", "line.strip", "line.strip"], "function", ["None"], ["def", "link_info_feature_extraction", "(", "link_info_file", ")", ":", "\n", "    ", "link_list", "=", "list", "(", ")", "\n", "# init the feature dict", "\n", "feature_dim_list", "=", "list", "(", ")", "\n", "feature_dict_list", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "one_hot_feature_type_len", ")", ":", "\n", "        ", "feature_dim_list", ".", "append", "(", "0", ")", "\n", "feature_dict_list", ".", "append", "(", "defaultdict", "(", ")", ")", "\n", "# get the dict", "\n", "", "link_num", "=", "0", "\n", "for", "line", "in", "open", "(", "link_info_file", ")", ":", "\n", "        ", "link_num", "+=", "1", "\n", "temp_arr", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "replace", "(", "\"\\\"\"", ",", "\"\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "\n", "link_list", ".", "append", "(", "temp_arr", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "one_hot_feature_type_len", ")", ":", "\n", "            ", "if", "temp_arr", "[", "one_hot_index", "[", "i", "]", "]", "not", "in", "feature_dict_list", "[", "i", "]", ":", "\n", "                ", "feature_dict_list", "[", "i", "]", "[", "temp_arr", "[", "one_hot_index", "[", "i", "]", "]", "]", "=", "feature_dim_list", "[", "i", "]", "\n", "feature_dim_list", "[", "i", "]", "+=", "1", "\n", "", "", "", "total_feature_len", "=", "0", "\n", "for", "i", "in", "range", "(", "one_hot_feature_type_len", ")", ":", "\n", "        ", "print", "(", "\"feature_dim_list[{}] is {}\"", ".", "format", "(", "one_hot_index", "[", "i", "]", ",", "feature_dim_list", "[", "i", "]", ")", ")", "\n", "total_feature_len", "+=", "feature_dim_list", "[", "i", "]", "\n", "# one_hot and numeric feature extraction", "\n", "", "one_hot_feature_list", "=", "list", "(", ")", "\n", "numeric_feature", "=", "np", ".", "zeros", "(", "(", "link_num", ",", "numeric_feature_len", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", "in", "range", "(", "one_hot_feature_type_len", ")", ":", "\n", "        ", "one_hot_feature_list", ".", "append", "(", "np", ".", "zeros", "(", "(", "link_num", ",", "feature_dim_list", "[", "i", "]", ")", ",", "dtype", "=", "np", ".", "float", ")", ")", "\n", "\n", "", "link_num", "=", "0", "\n", "for", "line", "in", "open", "(", "link_info_file", ")", ":", "\n", "        ", "temp_arr", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "replace", "(", "\"\\\"\"", ",", "\"\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "for", "i", "in", "range", "(", "one_hot_feature_type_len", ")", ":", "\n", "            ", "temp_feature", "=", "temp_arr", "[", "one_hot_index", "[", "i", "]", "]", "\n", "temp_feature_index", "=", "feature_dict_list", "[", "i", "]", "[", "temp_feature", "]", "\n", "one_hot_feature_list", "[", "i", "]", "[", "link_num", ",", "temp_feature_index", "]", "=", "1", "\n", "", "for", "i", "in", "range", "(", "numeric_feature_len", ")", ":", "\n", "            ", "temp_feature", "=", "temp_arr", "[", "numeric_index", "[", "i", "]", "]", "\n", "numeric_feature", "[", "link_num", ",", "i", "]", "=", "float", "(", "temp_feature", ")", "\n", "\n", "", "link_num", "+=", "1", "\n", "# merge the feature list into one np array", "\n", "", "one_hot_feature_list", ".", "append", "(", "numeric_feature", ")", "\n", "feature_dim_list", ".", "append", "(", "numeric_feature_len", ")", "\n", "total_feature_len", "+=", "numeric_feature_len", "\n", "print", "(", "\"total_feature_len is {}\"", ".", "format", "(", "total_feature_len", ")", ")", "\n", "link_info_feature", "=", "np", ".", "zeros", "(", "(", "link_num", ",", "total_feature_len", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "col_index", "=", "0", "\n", "for", "i", "in", "range", "(", "one_hot_feature_type_len", "+", "1", ")", ":", "# plus numeric feature", "\n", "        ", "link_info_feature", "[", ":", ",", "col_index", ":", "col_index", "+", "feature_dim_list", "[", "i", "]", "]", "=", "one_hot_feature_list", "[", "i", "]", "\n", "col_index", "+=", "feature_dim_list", "[", "i", "]", "\n", "\n", "", "return", "link_list", ",", "link_info_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.preprocessing.get_query_distribution_feature_beijing_1km_seq.distance": [[12, 24], ["math.sqrt", "math.sqrt", "math.sqrt"], "function", ["None"], ["def", "distance", "(", "d_r", ",", "d_c", ",", "s_r", ",", "s_c", ",", "lu_r", ",", "lu_c", ")", ":", "\n", "    ", "cross", "=", "(", "lu_r", "-", "d_r", ")", "*", "(", "s_r", "-", "d_r", ")", "+", "(", "lu_c", "-", "d_c", ")", "*", "(", "s_c", "-", "d_c", ")", "\n", "if", "cross", "<=", "0", ":", "\n", "        ", "return", "sqrt", "(", "(", "lu_r", "-", "d_r", ")", "*", "(", "lu_r", "-", "d_r", ")", "+", "(", "lu_c", "-", "d_c", ")", "*", "(", "lu_c", "-", "d_c", ")", ")", "\n", "", "else", ":", "\n", "        ", "d2", "=", "(", "s_r", "-", "d_r", ")", "*", "(", "s_r", "-", "d_r", ")", "+", "(", "s_c", "-", "d_c", ")", "*", "(", "s_c", "-", "d_c", ")", "\n", "if", "cross", ">=", "d2", ":", "\n", "            ", "return", "sqrt", "(", "(", "lu_r", "-", "s_r", ")", "*", "(", "lu_r", "-", "s_r", ")", "+", "(", "lu_c", "-", "s_c", ")", "*", "(", "lu_c", "-", "s_c", ")", ")", "\n", "", "else", ":", "\n", "            ", "d1", "=", "(", "lu_r", "-", "d_r", ")", "*", "(", "lu_r", "-", "d_r", ")", "+", "(", "lu_c", "-", "d_c", ")", "*", "(", "lu_c", "-", "d_c", ")", "\n", "r", "=", "cross", "*", "cross", "/", "d2", "/", "d1", "\n", "return", "sqrt", "(", "d1", "*", "(", "1", "-", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.preprocessing.get_query_info_beijing.timeid": [[13, 27], ["time.strptime", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "timeid", "(", "input1", ")", ":", "\n", "    ", "t1", "=", "time", ".", "strptime", "(", "input1", "[", "0", "]", ",", "\"%Y-%m-%d %H:%M:%S\"", ")", "\n", "mon", "=", "t1", ".", "tm_mon", "\n", "day", "=", "t1", ".", "tm_mday", "\n", "hour", "=", "t1", ".", "tm_hour", "\n", "minute", "=", "t1", ".", "tm_min", "\n", "time_id", "=", "60", "*", "(", "24", "*", "(", "30", "*", "(", "mon", "-", "4", ")", "+", "day", "-", "1", ")", "+", "hour", ")", "+", "minute", "\n", "#    if time_id >=87840:", "\n", "#        print\"%d\\t%d\\t%d\\t%d\"(mon,day,hour,minute)", "\n", "time_id_s", "=", "time_id", "+", "int", "(", "input1", "[", "1", "]", ")", "+", "int", "(", "input1", "[", "11", "]", ")", "\n", "time_id_d", "=", "time_id_s", "+", "int", "(", "input1", "[", "10", "]", ")", "\n", "time_id_s", "=", "int", "(", "time_id_s", "/", "5", ")", "\n", "time_id_d", "=", "int", "(", "time_id_d", "/", "5", ")", "\n", "return", "time_id_s", ",", "time_id_d", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.intermediate_files.release_traffic_speed_subdataset.traffic_speed_extraction": [[17, 49], ["print", "cPickle.load", "len", "print", "collections.defaultdict", "open", "print", "open", "cPickle.load.keys", "open.close", "open", "cPickle.load.keys", "line.strip().split", "len", "range", "print", "open.write", "line.strip"], "function", ["None"], ["def", "traffic_speed_extraction", "(", "origin_traffic_pkl_file", ",", "link_id_hash_map_file", ",", "traffic_pkl_file", ",", "traffic_file", ")", ":", "\n", "# load traffic speed", "\n", "    ", "print", "(", "\"loading traffic speed dataset ...\"", ")", "\n", "event_traffic", "=", "cPickle", ".", "load", "(", "open", "(", "origin_traffic_pkl_file", ",", "\"rb\"", ")", ")", "\n", "total_link_num", "=", "len", "(", "event_traffic", ".", "keys", "(", ")", ")", "\n", "print", "(", "\"link_num is {}\"", ".", "format", "(", "total_link_num", ")", ")", "\n", "# load link_id_hash_map", "\n", "link_id_hash_map", "=", "defaultdict", "(", ")", "\n", "for", "line", "in", "open", "(", "link_id_hash_map_file", ")", ":", "\n", "        ", "temp_arr", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "link_id_hash_map", "[", "temp_arr", "[", "0", "]", "]", "=", "temp_arr", "[", "1", "]", "\n", "# write to pkl file", "\n", "", "'''\n    output_traffic = defaultdict()\n    for link_id in event_traffic.keys():\n        output_traffic[link_id_hash_map[link_id]] = event_traffic[link_id]\n    print(\"dumping traffic speed dataset ...\")\n    cPickle.dump(output_traffic, open(traffic_pkl_file, \"wb\"))\n    '''", "\n", "# write to text file", "\n", "print", "(", "\"writing to text file ...\"", ")", "\n", "fw", "=", "open", "(", "traffic_file", ",", "\"wb\"", ")", "\n", "link_cnt", "=", "0", "\n", "for", "link_id", "in", "event_traffic", ".", "keys", "(", ")", ":", "\n", "        ", "link_cnt", "+=", "1", "\n", "if", "link_cnt", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "\"{}/{}\"", ".", "format", "(", "link_cnt", ",", "total_link_num", ")", ")", "\n", "", "new_link_id", "=", "link_id_hash_map", "[", "link_id", "]", "\n", "temp_len", "=", "len", "(", "event_traffic", "[", "link_id", "]", ")", "\n", "for", "i", "in", "range", "(", "temp_len", ")", ":", "\n", "            ", "fw", ".", "write", "(", "\"{}, {}, {}\\n\"", ".", "format", "(", "new_link_id", ",", "i", ",", "event_traffic", "[", "link_id", "]", "[", "i", "]", ")", ")", "\n", "", "", "fw", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.intermediate_files.time_feature_extraction_15min.time_feature_extraction": [[67, 83], ["numpy.zeros", "int", "int", "range", "range"], "function", ["None"], ["def", "time_feature_extraction", "(", "time", ")", ":", "\n", "    ", "temp_time_feature", "=", "np", ".", "zeros", "(", "TIME_FEATURE_DIM", ",", "dtype", "=", "np", ".", "float", ")", "\n", "day", "=", "int", "(", "time", "/", "(", "24", "*", "4", ")", ")", "\n", "if", "day", "in", "workday", ":", "\n", "        ", "temp_time_feature", "[", "0", "]", "=", "1", "\n", "", "elif", "day", "in", "weekend", ":", "\n", "        ", "temp_time_feature", "[", "1", "]", "=", "1", "\n", "", "else", ":", "\n", "        ", "temp_time_feature", "[", "2", "]", "=", "1", "\n", "", "hour", "=", "int", "(", "(", "time", "-", "day", "*", "24", "*", "4", ")", "/", "4", ")", "\n", "min", "=", "time", "-", "day", "*", "24", "*", "4", "-", "hour", "*", "4", "\n", "temp_time_feature", "[", "3", "]", "=", "hour", "\n", "temp_time_feature", "[", "4", "]", "=", "min", "\n", "if", "(", "hour", "in", "range", "(", "6", ",", "9", ")", ")", "or", "(", "hour", "in", "range", "(", "16", ",", "19", ")", ")", ":", "\n", "        ", "temp_time_feature", "[", "5", "]", "=", "1", "\n", "", "return", "temp_time_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.intermediate_files.get_link_info_feature_beijing.link_info_feature_extraction": [[73, 126], ["list", "list", "list", "range", "open", "range", "list", "numpy.zeros", "range", "open", "list.append", "list.append", "print", "numpy.zeros", "range", "list.append", "list.append", "line.strip().replace().split", "list.append", "range", "print", "list.append", "line.strip().replace().split", "range", "range", "collections.defaultdict", "numpy.zeros", "float", "line.strip().replace", "line.strip().replace", "line.strip", "line.strip"], "function", ["None"], ["def", "link_info_feature_extraction", "(", "link_info_file", ")", ":", "\n", "    ", "link_list", "=", "list", "(", ")", "\n", "# init the feature dict", "\n", "feature_dim_list", "=", "list", "(", ")", "\n", "feature_dict_list", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "one_hot_feature_type_len", ")", ":", "\n", "        ", "feature_dim_list", ".", "append", "(", "0", ")", "\n", "feature_dict_list", ".", "append", "(", "defaultdict", "(", ")", ")", "\n", "# get the dict", "\n", "", "link_num", "=", "0", "\n", "for", "line", "in", "open", "(", "link_info_file", ")", ":", "\n", "        ", "link_num", "+=", "1", "\n", "temp_arr", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "replace", "(", "\"\\\"\"", ",", "\"\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "\n", "link_list", ".", "append", "(", "temp_arr", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "one_hot_feature_type_len", ")", ":", "\n", "            ", "if", "temp_arr", "[", "one_hot_index", "[", "i", "]", "]", "not", "in", "feature_dict_list", "[", "i", "]", ":", "\n", "                ", "feature_dict_list", "[", "i", "]", "[", "temp_arr", "[", "one_hot_index", "[", "i", "]", "]", "]", "=", "feature_dim_list", "[", "i", "]", "\n", "feature_dim_list", "[", "i", "]", "+=", "1", "\n", "", "", "", "total_feature_len", "=", "0", "\n", "for", "i", "in", "range", "(", "one_hot_feature_type_len", ")", ":", "\n", "        ", "print", "(", "\"feature_dim_list[{}] is {}\"", ".", "format", "(", "one_hot_index", "[", "i", "]", ",", "feature_dim_list", "[", "i", "]", ")", ")", "\n", "total_feature_len", "+=", "feature_dim_list", "[", "i", "]", "\n", "# one_hot and numeric feature extraction", "\n", "", "one_hot_feature_list", "=", "list", "(", ")", "\n", "numeric_feature", "=", "np", ".", "zeros", "(", "(", "link_num", ",", "numeric_feature_len", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", "in", "range", "(", "one_hot_feature_type_len", ")", ":", "\n", "        ", "one_hot_feature_list", ".", "append", "(", "np", ".", "zeros", "(", "(", "link_num", ",", "feature_dim_list", "[", "i", "]", ")", ",", "dtype", "=", "np", ".", "float", ")", ")", "\n", "\n", "", "link_num", "=", "0", "\n", "for", "line", "in", "open", "(", "link_info_file", ")", ":", "\n", "        ", "temp_arr", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "replace", "(", "\"\\\"\"", ",", "\"\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "for", "i", "in", "range", "(", "one_hot_feature_type_len", ")", ":", "\n", "            ", "temp_feature", "=", "temp_arr", "[", "one_hot_index", "[", "i", "]", "]", "\n", "temp_feature_index", "=", "feature_dict_list", "[", "i", "]", "[", "temp_feature", "]", "\n", "one_hot_feature_list", "[", "i", "]", "[", "link_num", ",", "temp_feature_index", "]", "=", "1", "\n", "", "for", "i", "in", "range", "(", "numeric_feature_len", ")", ":", "\n", "            ", "temp_feature", "=", "temp_arr", "[", "numeric_index", "[", "i", "]", "]", "\n", "numeric_feature", "[", "link_num", ",", "i", "]", "=", "float", "(", "temp_feature", ")", "\n", "\n", "", "link_num", "+=", "1", "\n", "# merge the feature list into one np array", "\n", "", "one_hot_feature_list", ".", "append", "(", "numeric_feature", ")", "\n", "feature_dim_list", ".", "append", "(", "numeric_feature_len", ")", "\n", "total_feature_len", "+=", "numeric_feature_len", "\n", "print", "(", "\"total_feature_len is {}\"", ".", "format", "(", "total_feature_len", ")", ")", "\n", "link_info_feature", "=", "np", ".", "zeros", "(", "(", "link_num", ",", "total_feature_len", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "col_index", "=", "0", "\n", "for", "i", "in", "range", "(", "one_hot_feature_type_len", "+", "1", ")", ":", "# plus numeric feature", "\n", "        ", "link_info_feature", "[", ":", ",", "col_index", ":", "col_index", "+", "feature_dim_list", "[", "i", "]", "]", "=", "one_hot_feature_list", "[", "i", "]", "\n", "col_index", "+=", "feature_dim_list", "[", "i", "]", "\n", "\n", "", "return", "link_list", ",", "link_info_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.intermediate_files.get_query_distribution_feature_beijing_1km_seq.distance": [[12, 24], ["math.sqrt", "math.sqrt", "math.sqrt"], "function", ["None"], ["def", "distance", "(", "d_r", ",", "d_c", ",", "s_r", ",", "s_c", ",", "lu_r", ",", "lu_c", ")", ":", "\n", "    ", "cross", "=", "(", "lu_r", "-", "d_r", ")", "*", "(", "s_r", "-", "d_r", ")", "+", "(", "lu_c", "-", "d_c", ")", "*", "(", "s_c", "-", "d_c", ")", "\n", "if", "cross", "<=", "0", ":", "\n", "        ", "return", "sqrt", "(", "(", "lu_r", "-", "d_r", ")", "*", "(", "lu_r", "-", "d_r", ")", "+", "(", "lu_c", "-", "d_c", ")", "*", "(", "lu_c", "-", "d_c", ")", ")", "\n", "", "else", ":", "\n", "        ", "d2", "=", "(", "s_r", "-", "d_r", ")", "*", "(", "s_r", "-", "d_r", ")", "+", "(", "s_c", "-", "d_c", ")", "*", "(", "s_c", "-", "d_c", ")", "\n", "if", "cross", ">=", "d2", ":", "\n", "            ", "return", "sqrt", "(", "(", "lu_r", "-", "s_r", ")", "*", "(", "lu_r", "-", "s_r", ")", "+", "(", "lu_c", "-", "s_c", ")", "*", "(", "lu_c", "-", "s_c", ")", ")", "\n", "", "else", ":", "\n", "            ", "d1", "=", "(", "lu_r", "-", "d_r", ")", "*", "(", "lu_r", "-", "d_r", ")", "+", "(", "lu_c", "-", "d_c", ")", "*", "(", "lu_c", "-", "d_c", ")", "\n", "r", "=", "cross", "*", "cross", "/", "d2", "/", "d1", "\n", "return", "sqrt", "(", "d1", "*", "(", "1", "-", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.intermediate_files.release_query_subdataset_beijing.get_start_time": [[16, 21], ["datetime.datetime.strptime", "int", "int", "datetime.timedelta"], "function", ["None"], ["def", "get_start_time", "(", "query_info", ")", ":", "\n", "    ", "loc_time", "=", "datetime", ".", "datetime", ".", "strptime", "(", "query_info", "[", "0", "]", ",", "\"%Y-%m-%d %H:%M:%S\"", ")", "\n", "walk_time", "=", "int", "(", "query_info", "[", "1", "]", ")", "+", "int", "(", "query_info", "[", "11", "]", ")", "\n", "start_timestamp", "=", "loc_time", "+", "datetime", ".", "timedelta", "(", "minutes", "=", "walk_time", ")", "\n", "return", "start_timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.JingqingZ_BaiduTraffic.intermediate_files.get_query_info_beijing.timeid": [[13, 27], ["time.strptime", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "timeid", "(", "input1", ")", ":", "\n", "    ", "t1", "=", "time", ".", "strptime", "(", "input1", "[", "0", "]", ",", "\"%Y-%m-%d %H:%M:%S\"", ")", "\n", "mon", "=", "t1", ".", "tm_mon", "\n", "day", "=", "t1", ".", "tm_mday", "\n", "hour", "=", "t1", ".", "tm_hour", "\n", "minute", "=", "t1", ".", "tm_min", "\n", "time_id", "=", "60", "*", "(", "24", "*", "(", "30", "*", "(", "mon", "-", "4", ")", "+", "day", "-", "1", ")", "+", "hour", ")", "+", "minute", "\n", "#    if time_id >=87840:", "\n", "#        print\"%d\\t%d\\t%d\\t%d\"(mon,day,hour,minute)", "\n", "time_id_s", "=", "time_id", "+", "int", "(", "input1", "[", "1", "]", ")", "+", "int", "(", "input1", "[", "11", "]", ")", "\n", "time_id_d", "=", "time_id_s", "+", "int", "(", "input1", "[", "10", "]", ")", "\n", "time_id_s", "=", "int", "(", "time_id_s", "/", "5", ")", "\n", "time_id_d", "=", "int", "(", "time_id_d", "/", "5", ")", "\n", "return", "time_id_s", ",", "time_id_d", "\n", "\n"]]}