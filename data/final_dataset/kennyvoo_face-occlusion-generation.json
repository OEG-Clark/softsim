{"home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.None.main.Occlusion_Generator.__init__": [[41, 48], ["utils.utils.get_src_augmentor", "utils.utils.get_occluder_augmentor"], "methods", ["home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.get_src_augmentor", "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.get_occluder_augmentor"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "images_list", ",", "occluders_list", ",", "seeds", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "image_augmentor", "=", "get_src_augmentor", "(", ")", "\n", "self", ".", "occluder_augmentor", "=", "get_occluder_augmentor", "(", ")", "\n", "self", ".", "images_list", "=", "images_list", "\n", "self", ".", "occluders_list", "=", "occluders_list", "\n", "self", ".", "seeds", "=", "seeds", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.None.main.Occlusion_Generator.occlude_images": [[49, 117], ["main.set_random_seed", "utils.utils.get_srcNmask", "cv2.boundingRect", "utils.utils.augment_occluder", "numpy.random.uniform", "numpy.ones", "cv2.threshold", "cv2.GaussianBlur", "numpy.where", "main.Occlusion_Generator.image_augmentor", "cv2.cvtColor", "main.Occlusion_Generator.save_images", "utils.utils.get_randomOccluderNmask", "utils.utils.get_occluderNmask", "utils.utils.angle3pt", "imutils.rotate_bound", "imutils.rotate_bound", "numpy.zeros", "utils.paste_over.paste_over", "cv2.dilate", "cv2.erode", "numpy.dstack", "print", "print", "main.Occlusion_Generator.colour_transfer", "print", "print", "image.split", "print", "numpy.invert"], "methods", ["home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.None.main.set_random_seed", "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.get_srcNmask", "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.augment_occluder", "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.None.main.Occlusion_Generator.save_images", "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.get_randomOccluderNmask", "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.get_occluderNmask", "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.angle3pt", "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.paste_over.paste_over", "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.None.main.Occlusion_Generator.colour_transfer"], ["", "def", "occlude_images", "(", "self", ",", "index", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "image", "=", "self", ".", "images_list", "[", "index", "]", "\n", "occluder", "=", "self", ".", "occluders_list", "[", "index", "]", "\n", "seed", "=", "self", ".", "seeds", "[", "index", "]", "\n", "\n", "#set seed", "\n", "set_random_seed", "(", "seed", ")", "\n", "\n", "# get source img and mask", "\n", "src_img", ",", "src_mask", "=", "get_srcNmask", "(", "image", ",", "self", ".", "args", "[", "\"srcImageDir\"", "]", ",", "self", ".", "args", "[", "\"srcMaskDir\"", "]", ")", "\n", "\n", "#get occluder img and mask", "\n", "if", "self", ".", "args", "[", "\"randomOcclusion\"", "]", ":", "\n", "                ", "occluder_img", ",", "occluder_mask", "=", "get_randomOccluderNmask", "(", ")", "\n", "", "else", ":", "\n", "                ", "occluder_img", ",", "occluder_mask", "=", "get_occluderNmask", "(", "occluder", ",", "self", ".", "args", "[", "\"occluderDir\"", "]", ",", "self", ".", "args", "[", "\"occluderMaskDir\"", "]", ")", "\n", "\n", "", "src_rect", "=", "cv2", ".", "boundingRect", "(", "src_mask", ")", "\n", "\n", "#colour transfer", "\n", "if", "self", ".", "args", "[", "\"colour_transfer_sot\"", "]", ":", "\n", "                ", "try", ":", "\n", "                    ", "occluder_img", "=", "self", ".", "colour_transfer", "(", "src_img", ",", "src_mask", ",", "occluder_img", ",", "src_rect", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "print", "(", "e", ")", "\n", "#augment occluders", "\n", "", "", "occluder_img", ",", "occluder_mask", "=", "augment_occluder", "(", "self", ".", "occluder_augmentor", ",", "occluder_img", ",", "occluder_mask", ",", "src_rect", ")", "\n", "#random location around src", "\n", "occluder_coord", "=", "np", ".", "random", ".", "uniform", "(", "[", "src_rect", "[", "0", "]", ",", "src_rect", "[", "1", "]", "]", ",", "[", "src_rect", "[", "0", "]", "+", "src_rect", "[", "2", "]", ",", "src_rect", "[", "1", "]", "+", "src_rect", "[", "3", "]", "]", ")", "\n", "\n", "if", "self", ".", "args", "[", "\"rotate_around_center\"", "]", ":", "\n", "                ", "src_center", "=", "(", "src_rect", "[", "0", "]", "+", "(", "src_rect", "[", "2", "]", "/", "2", ")", ",", "(", "src_rect", "[", "1", "]", "+", "src_rect", "[", "3", "]", "/", "2", ")", ")", "\n", "rotation", "=", "angle3pt", "(", "(", "src_center", "[", "0", "]", ",", "occluder_coord", "[", "1", "]", ")", ",", "src_center", ",", "occluder_coord", ")", "\n", "if", "occluder_coord", "[", "1", "]", ">", "src_center", "[", "1", "]", ":", "\n", "                    ", "rotation", "=", "rotation", "+", "180", "\n", "", "occluder_img", "=", "imutils", ".", "rotate_bound", "(", "occluder_img", ",", "rotation", ")", "\n", "occluder_mask", "=", "imutils", ".", "rotate_bound", "(", "occluder_mask", ",", "rotation", ")", "\n", "\n", "#overlay occluder to src images", "\n", "", "try", ":", "\n", "                ", "occlusion_mask", "=", "np", ".", "zeros", "(", "src_mask", ".", "shape", ",", "np", ".", "uint8", ")", "\n", "occlusion_mask", "[", "(", "occlusion_mask", ">", "0", ")", "&", "(", "occlusion_mask", "<", "255", ")", "]", "=", "255", "\n", "#paste occluder to src image", "\n", "result_img", ",", "result_mask", ",", "occlusion_mask", "=", "paste_over", "(", "occluder_img", ",", "occluder_mask", ",", "src_img", ",", "src_mask", ",", "occluder_coord", ",", "occlusion_mask", ",", "self", ".", "args", "[", "\"randomOcclusion\"", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "print", "(", "f'Failed: {image} , {occluder}'", ")", "\n", "return", "\n", "\n", "#blur edges of occluder", "\n", "", "kernel", "=", "np", ".", "ones", "(", "(", "5", ",", "5", ")", ",", "np", ".", "uint8", ")", "\n", "occlusion_mask_edges", "=", "cv2", ".", "dilate", "(", "occlusion_mask", ",", "kernel", ",", "iterations", "=", "2", ")", "-", "cv2", ".", "erode", "(", "occlusion_mask", ",", "kernel", ",", "iterations", "=", "2", ")", "\n", "ret", ",", "filtered_occlusion_mask_edges", "=", "cv2", ".", "threshold", "(", "occlusion_mask_edges", ",", "240", ",", "255", ",", "cv2", ".", "THRESH_BINARY", ")", "\n", "blurred_image", "=", "cv2", ".", "GaussianBlur", "(", "result_img", ",", "(", "5", ",", "5", ")", ",", "0", ")", "\n", "result_img", "=", "np", ".", "where", "(", "np", ".", "dstack", "(", "(", "np", ".", "invert", "(", "filtered_occlusion_mask_edges", "==", "255", ")", ",", ")", "*", "3", ")", ",", "result_img", ",", "blurred_image", ")", "\n", "\n", "\n", "# augment occluded image", "\n", "transformed", "=", "self", ".", "image_augmentor", "(", "image", "=", "result_img", ",", "mask", "=", "result_mask", ",", "mask1", "=", "occlusion_mask", ")", "\n", "result_img", ",", "result_mask", ",", "occlusion_mask", "=", "transformed", "[", "\"image\"", "]", ",", "transformed", "[", "\"mask\"", "]", ",", "transformed", "[", "\"mask1\"", "]", "\n", "result_img", "=", "cv2", ".", "cvtColor", "(", "result_img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "\n", "#save images", "\n", "self", ".", "save_images", "(", "image", ".", "split", "(", "\".\"", ")", "[", "0", "]", ",", "result_img", ",", "result_mask", ",", "occlusion_mask", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "print", "(", "image", ")", "\n", "", "", "def", "save_images", "(", "self", ",", "img_name", ",", "image", ",", "mask", ",", "occlusion_mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.None.main.Occlusion_Generator.save_images": [[117, 123], ["cv2.imwrite", "cv2.imwrite", "cv2.imwrite"], "methods", ["None"], ["", "", "def", "save_images", "(", "self", ",", "img_name", ",", "image", ",", "mask", ",", "occlusion_mask", ")", ":", "\n", "\n", "        ", "cv2", ".", "imwrite", "(", "self", ".", "args", "[", "\"outputImgDir\"", "]", "+", "f\"{img_name}.jpg\"", ",", "image", ")", "\n", "cv2", ".", "imwrite", "(", "self", ".", "args", "[", "\"outputMaskDir\"", "]", "+", "f\"{img_name}.png\"", ",", "mask", "/", "255", ")", "\n", "if", "self", ".", "args", "[", "\"maskForOcclusion\"", "]", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "self", ".", "args", "[", "\"occlusionMaskDir\"", "]", "+", "f\"{img_name}.png\"", ",", "occlusion_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.None.main.Occlusion_Generator.colour_transfer": [[124, 164], ["cv2.bitwise_or", "cv2.resize", "cv2.resize", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.std", "numpy.std", "numpy.std", "numpy.round", "utils.colour_transfer.color_transfer_sot", "numpy.random.binomial", "min", "min", "min", "numpy.sum", "numpy.sum", "numpy.invert", "numpy.clip", "cv2.resize.astype"], "methods", ["home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.colour_transfer.color_transfer_sot"], ["", "", "def", "colour_transfer", "(", "self", ",", "src_img", ",", "src_mask", ",", "occluder_img", ",", "src_rect", ")", ":", "\n", "##change the colour of the occluder ", "\n", "#crop the src image ", "\n", "        ", "temp_src", "=", "cv2", ".", "bitwise_or", "(", "src_img", ",", "src_img", ",", "mask", "=", "src_mask", ")", "\n", "cropped_src", "=", "temp_src", "[", "src_rect", "[", "1", "]", ":", "(", "src_rect", "[", "1", "]", "+", "src_rect", "[", "3", "]", ")", ",", "src_rect", "[", "0", "]", ":", "(", "src_rect", "[", "0", "]", "+", "src_rect", "[", "2", "]", ")", "]", "\n", "#crop the mask ", "\n", "cropped_src_mask", "=", "src_mask", "[", "src_rect", "[", "1", "]", ":", "(", "src_rect", "[", "1", "]", "+", "src_rect", "[", "3", "]", ")", ",", "src_rect", "[", "0", "]", ":", "(", "src_rect", "[", "0", "]", "+", "src_rect", "[", "2", "]", ")", "]", "\n", "cropped_src", "=", "cv2", ".", "resize", "(", "cropped_src", ",", "(", "occluder_img", ".", "shape", "[", "1", "]", ",", "occluder_img", ".", "shape", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "#resize to the size of src image", "\n", "cropped_src_mask", "=", "cv2", ".", "resize", "(", "cropped_src_mask", ",", "(", "occluder_img", ".", "shape", "[", "1", "]", ",", "occluder_img", ".", "shape", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "\n", "##solve black imbalance", "\n", "#get the mean and std in each channel ", "\n", "r", "=", "np", ".", "mean", "(", "cropped_src", "[", ":", ",", ":", ",", "0", "]", "[", "cropped_src", "[", ":", ",", ":", ",", "0", "]", "!=", "0", "]", ")", "\n", "g", "=", "np", ".", "mean", "(", "cropped_src", "[", ":", ",", ":", ",", "1", "]", "[", "cropped_src", "[", ":", ",", ":", ",", "1", "]", "!=", "0", "]", ")", "\n", "b", "=", "np", ".", "mean", "(", "cropped_src", "[", ":", ",", ":", ",", "2", "]", "[", "cropped_src", "[", ":", ",", ":", ",", "2", "]", "!=", "0", "]", ")", "\n", "r_std", "=", "np", ".", "std", "(", "cropped_src", "[", ":", ",", ":", ",", "0", "]", "[", "cropped_src", "[", ":", ",", ":", ",", "0", "]", "!=", "0", "]", ")", "\n", "g_std", "=", "np", ".", "std", "(", "cropped_src", "[", ":", ",", ":", ",", "1", "]", "[", "cropped_src", "[", ":", ",", ":", ",", "1", "]", "!=", "0", "]", ")", "\n", "b_std", "=", "np", ".", "std", "(", "cropped_src", "[", ":", ",", ":", ",", "2", "]", "[", "cropped_src", "[", ":", ",", ":", ",", "2", "]", "!=", "0", "]", ")", "\n", "\n", "# calculate the black ratio. src/occluder  ", "\n", "# current lower threshold is set to half the mean in each channel", "\n", "black_ratio", "=", "np", ".", "round", "(", "(", "np", ".", "sum", "(", "cropped_src", "<", "(", "r", "/", "2", ",", "g", "/", "2", ",", "b", "/", "2", ")", ")", "/", "np", ".", "sum", "(", "occluder_img", "==", "(", "0", ",", "0", ",", "0", ")", ")", ")", "-", "1", ",", "2", ")", "\n", "\n", "if", "black_ratio", ">", "1", ":", "\n", "            ", "black_ratio", "=", "1", "\n", "\n", "", "if", "(", "black_ratio", ")", ">", "0", ":", "\n", "            ", "cropped_src_mask", "[", "cropped_src_mask", "==", "0", "]", "=", "np", ".", "random", ".", "binomial", "(", "n", "=", "1", ",", "p", "=", "1", "-", "black_ratio", ",", "size", "=", "[", "cropped_src_mask", "[", "cropped_src_mask", "==", "0", "]", ".", "size", "]", ")", "\n", "cropped_src", "[", ":", ",", ":", ",", ":", "3", "]", "[", "np", ".", "invert", "(", "cropped_src_mask", ".", "astype", "(", "bool", ")", ")", "]", "=", "[", "r", ",", "g", ",", "b", "]", "\n", "# handle pixels that is too bright", "\n", "# current upper threshold set to mean + 1 std", "\n", "", "r2", ",", "g2", ",", "b2", "=", "r", "+", "r_std", ",", "g", "+", "g_std", ",", "b", "+", "b_std", "\n", "red", ",", "green", ",", "blue", "=", "cropped_src", "[", ":", ",", ":", ",", "0", "]", ",", "cropped_src", "[", ":", ",", ":", ",", "1", "]", ",", "cropped_src", "[", ":", ",", ":", ",", "2", "]", "\n", "mask", "=", "(", "red", ">", "r2", ")", "|", "(", "green", ">", "g2", ")", "|", "(", "blue", ">", "b2", ")", "\n", "cropped_src", "[", ":", ",", ":", ",", ":", "3", "]", "[", "mask", "]", "=", "[", "min", "(", "255", ",", "r", "+", "r_std", ")", ",", "min", "(", "255", ",", "g", "+", "g_std", ")", ",", "min", "(", "255", ",", "b", "+", "b_std", ")", "]", "\n", "\n", "occluder_img", "=", "color_transfer_sot", "(", "occluder_img", "/", "255", ",", "cropped_src", "/", "255", ")", "\n", "occluder_img", "=", "(", "np", ".", "clip", "(", "occluder_img", ",", "0.0", ",", "1.0", ")", "*", "255", ")", ".", "astype", "(", "\"uint8\"", ")", "\n", "return", "occluder_img", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.None.main.set_random_seed": [[21, 36], ["cupy.random.seed", "random.seed", "numpy.random.seed", "imgaug.random.seed", "str"], "function", ["None"], ["def", "set_random_seed", "(", "seed", ",", "deterministic", "=", "False", ")", ":", "\n", "    ", "\"\"\"Set random seed.\n    Args:\n        seed (int): Seed to be used.\n        deterministic (bool): Whether to set the deterministic option for\n            CUDNN backend, i.e., set `torch.backends.cudnn.deterministic`\n            to True and `torch.backends.cudnn.benchmark` to False.\n            Default: False.\n    \"\"\"", "\n", "# ia.seed(seed)", "\n", "cp", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "imgaug", ".", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.random_shape_generator.Segment.__init__": [[19, 30], ["kw.get", "kw.get", "numpy.sqrt", "numpy.zeros", "random_shape_generator.Segment.calc_intermediate_points", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.random_shape_generator.Segment.calc_intermediate_points"], ["    ", "def", "__init__", "(", "self", ",", "p1", ",", "p2", ",", "angle1", ",", "angle2", ",", "**", "kw", ")", ":", "\n", "        ", "self", ".", "p1", "=", "p1", ";", "self", ".", "p2", "=", "p2", "\n", "self", ".", "angle1", "=", "angle1", ";", "self", ".", "angle2", "=", "angle2", "\n", "self", ".", "numpoints", "=", "kw", ".", "get", "(", "\"numpoints\"", ",", "100", ")", "\n", "r", "=", "kw", ".", "get", "(", "\"r\"", ",", "0.3", ")", "\n", "d", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "self", ".", "p2", "-", "self", ".", "p1", ")", "**", "2", ")", ")", "\n", "self", ".", "r", "=", "r", "*", "d", "\n", "self", ".", "p", "=", "np", ".", "zeros", "(", "(", "4", ",", "2", ")", ")", "\n", "self", ".", "p", "[", "0", ",", ":", "]", "=", "self", ".", "p1", "[", ":", "]", "\n", "self", ".", "p", "[", "3", ",", ":", "]", "=", "self", ".", "p2", "[", ":", "]", "\n", "self", ".", "calc_intermediate_points", "(", "self", ".", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.random_shape_generator.Segment.calc_intermediate_points": [[31, 37], ["random_shape_generator.bezier", "numpy.array", "numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.random_shape_generator.bezier"], ["", "def", "calc_intermediate_points", "(", "self", ",", "r", ")", ":", "\n", "        ", "self", ".", "p", "[", "1", ",", ":", "]", "=", "self", ".", "p1", "+", "np", ".", "array", "(", "[", "self", ".", "r", "*", "np", ".", "cos", "(", "self", ".", "angle1", ")", ",", "\n", "self", ".", "r", "*", "np", ".", "sin", "(", "self", ".", "angle1", ")", "]", ")", "\n", "self", ".", "p", "[", "2", ",", ":", "]", "=", "self", ".", "p2", "+", "np", ".", "array", "(", "[", "self", ".", "r", "*", "np", ".", "cos", "(", "self", ".", "angle2", "+", "np", ".", "pi", ")", ",", "\n", "self", ".", "r", "*", "np", ".", "sin", "(", "self", ".", "angle2", "+", "np", ".", "pi", ")", "]", ")", "\n", "self", ".", "curve", "=", "bezier", "(", "self", ".", "p", ",", "self", ".", "numpoints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.random_shape_generator.bezier": [[10, 17], ["len", "numpy.linspace", "numpy.zeros", "range", "numpy.outer", "bernstein"], "function", ["None"], ["def", "bezier", "(", "points", ",", "num", "=", "200", ")", ":", "\n", "    ", "N", "=", "len", "(", "points", ")", "\n", "t", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "num", "=", "num", ")", "\n", "curve", "=", "np", ".", "zeros", "(", "(", "num", ",", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "curve", "+=", "np", ".", "outer", "(", "bernstein", "(", "N", "-", "1", ",", "i", ",", "t", ")", ",", "points", "[", "i", "]", ")", "\n", "", "return", "curve", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.random_shape_generator.get_curve": [[39, 46], ["range", "numpy.concatenate", "random_shape_generator.Segment", "segments.append", "len"], "function", ["None"], ["", "", "def", "get_curve", "(", "points", ",", "**", "kw", ")", ":", "\n", "    ", "segments", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "points", ")", "-", "1", ")", ":", "\n", "        ", "seg", "=", "Segment", "(", "points", "[", "i", ",", ":", "2", "]", ",", "points", "[", "i", "+", "1", ",", ":", "2", "]", ",", "points", "[", "i", ",", "2", "]", ",", "points", "[", "i", "+", "1", ",", "2", "]", ",", "**", "kw", ")", "\n", "segments", ".", "append", "(", "seg", ")", "\n", "", "curve", "=", "np", ".", "concatenate", "(", "[", "s", ".", "curve", "for", "s", "in", "segments", "]", ")", "\n", "return", "segments", ",", "curve", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.random_shape_generator.ccw_sort": [[47, 51], ["numpy.arctan2", "numpy.mean", "numpy.argsort"], "function", ["None"], ["", "def", "ccw_sort", "(", "p", ")", ":", "\n", "    ", "d", "=", "p", "-", "np", ".", "mean", "(", "p", ",", "axis", "=", "0", ")", "\n", "s", "=", "np", ".", "arctan2", "(", "d", "[", ":", ",", "0", "]", ",", "d", "[", ":", ",", "1", "]", ")", "\n", "return", "p", "[", "np", ".", "argsort", "(", "s", ")", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.random_shape_generator.get_bezier_curve": [[52, 74], ["random_shape_generator.ccw_sort", "numpy.append", "numpy.diff", "numpy.arctan2", "f", "numpy.roll", "numpy.append", "numpy.append", "random_shape_generator.get_curve", "numpy.atleast_2d", "numpy.arctan", "numpy.atleast_2d", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.random_shape_generator.ccw_sort", "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.random_shape_generator.get_curve"], ["", "def", "get_bezier_curve", "(", "a", ",", "rad", "=", "0.2", ",", "edgy", "=", "0", ")", ":", "\n", "    ", "\"\"\" given an array of points *a*, create a curve through\n    those points. \n    *rad* is a number between 0 and 1 to steer the distance of\n          control points.\n    *edgy* is a parameter which controls how \"edgy\" the curve is,\n           edgy=0 is smoothest.\"\"\"", "\n", "p", "=", "np", ".", "arctan", "(", "edgy", ")", "/", "np", ".", "pi", "+", ".5", "\n", "a", "=", "ccw_sort", "(", "a", ")", "\n", "a", "=", "np", ".", "append", "(", "a", ",", "np", ".", "atleast_2d", "(", "a", "[", "0", ",", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "d", "=", "np", ".", "diff", "(", "a", ",", "axis", "=", "0", ")", "\n", "ang", "=", "np", ".", "arctan2", "(", "d", "[", ":", ",", "1", "]", ",", "d", "[", ":", ",", "0", "]", ")", "\n", "f", "=", "lambda", "ang", ":", "(", "ang", ">=", "0", ")", "*", "ang", "+", "(", "ang", "<", "0", ")", "*", "(", "ang", "+", "2", "*", "np", ".", "pi", ")", "\n", "ang", "=", "f", "(", "ang", ")", "\n", "ang1", "=", "ang", "\n", "ang2", "=", "np", ".", "roll", "(", "ang", ",", "1", ")", "\n", "ang", "=", "p", "*", "ang1", "+", "(", "1", "-", "p", ")", "*", "ang2", "+", "(", "np", ".", "abs", "(", "ang2", "-", "ang1", ")", ">", "np", ".", "pi", ")", "*", "np", ".", "pi", "\n", "ang", "=", "np", ".", "append", "(", "ang", ",", "[", "ang", "[", "0", "]", "]", ")", "\n", "a", "=", "np", ".", "append", "(", "a", ",", "np", ".", "atleast_2d", "(", "ang", ")", ".", "T", ",", "axis", "=", "1", ")", "\n", "s", ",", "c", "=", "get_curve", "(", "a", ",", "r", "=", "rad", ",", "method", "=", "\"var\"", ")", "\n", "x", ",", "y", "=", "c", ".", "T", "\n", "return", "x", ",", "y", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.random_shape_generator.get_random_points": [[76, 86], ["numpy.random.rand", "numpy.sqrt", "numpy.all", "random_shape_generator.get_random_points", "numpy.sum", "numpy.diff", "random_shape_generator.ccw_sort"], "function", ["home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.random_shape_generator.get_random_points", "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.random_shape_generator.ccw_sort"], ["", "def", "get_random_points", "(", "n", "=", "5", ",", "scale", "=", "0.8", ",", "mindst", "=", "None", ",", "rec", "=", "0", ")", ":", "\n", "    ", "\"\"\" create n random points in the unit square, which are *mindst*\n    apart, then scale them.\"\"\"", "\n", "mindst", "=", "mindst", "or", ".7", "/", "n", "\n", "a", "=", "np", ".", "random", ".", "rand", "(", "n", ",", "2", ")", "\n", "d", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "diff", "(", "ccw_sort", "(", "a", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "**", "2", ")", "\n", "if", "np", ".", "all", "(", "d", ">=", "mindst", ")", "or", "rec", ">=", "200", ":", "\n", "        ", "return", "a", "*", "scale", "\n", "", "else", ":", "\n", "        ", "return", "get_random_points", "(", "n", "=", "n", ",", "scale", "=", "scale", ",", "mindst", "=", "mindst", ",", "rec", "=", "rec", "+", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.ProgressBarActor.__init__": [[225, 229], ["asyncio.Event"], "methods", ["None"], ["def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "counter", "=", "0", "\n", "self", ".", "delta", "=", "0", "\n", "self", ".", "event", "=", "Event", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.ProgressBarActor.update": [[230, 237], ["utils.ProgressBarActor.event.set"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "num_items_completed", ":", "int", ")", "->", "None", ":", "\n", "        ", "\"\"\"Updates the ProgressBar with the incremental\n        number of items that were just completed.\n        \"\"\"", "\n", "self", ".", "counter", "+=", "num_items_completed", "\n", "self", ".", "delta", "+=", "num_items_completed", "\n", "self", ".", "event", ".", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.ProgressBarActor.get_counter": [[251, 256], ["None"], "methods", ["None"], ["", "def", "get_counter", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Returns the total number of complete items.\n        \"\"\"", "\n", "return", "self", ".", "counter", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.ProgressBar.__init__": [[264, 271], ["ProgressBarActor.remote"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "total", ":", "int", ",", "description", ":", "str", "=", "\"\"", ")", ":", "\n", "# Ray actors don't seem to play nice with mypy, generating", "\n", "# a spurious warning for the following line,", "\n", "# which we need to suppress. The code is fine.", "\n", "        ", "self", ".", "progress_actor", "=", "ProgressBarActor", ".", "remote", "(", ")", "# type: ignore", "\n", "self", ".", "total", "=", "total", "\n", "self", ".", "description", "=", "description", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.ProgressBar.actor": [[272, 279], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "actor", "(", "self", ")", "->", "ActorHandle", ":", "\n", "        ", "\"\"\"Returns a reference to the remote `ProgressBarActor`.\n\n        When you complete tasks, call `update` on the actor.\n        \"\"\"", "\n", "return", "self", ".", "progress_actor", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.ProgressBar.print_until_done": [[280, 294], ["tqdm.tqdm.tqdm", "ray.get", "tqdm.tqdm.tqdm.update", "utils.ProgressBar.actor.wait_for_update.remote", "tqdm.tqdm.tqdm.close"], "methods", ["home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.ProgressBarActor.update"], ["", "def", "print_until_done", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Blocking call.\n\n        Do this after starting a series of remote Ray tasks, to which you've\n        passed the actor handle. Each of them calls `update` on the actor.\n        When the progress meter reaches 100%, this method returns.\n        \"\"\"", "\n", "pbar", "=", "tqdm", "(", "desc", "=", "self", ".", "description", ",", "total", "=", "self", ".", "total", ")", "\n", "while", "True", ":", "\n", "            ", "delta", ",", "counter", "=", "ray", ".", "get", "(", "self", ".", "actor", ".", "wait_for_update", ".", "remote", "(", ")", ")", "\n", "pbar", ".", "update", "(", "delta", ")", "\n", "if", "counter", ">=", "self", ".", "total", ":", "\n", "                ", "pbar", ".", "close", "(", ")", "\n", "return", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.validate_path": [[22, 28], ["os.listdir", "print", "ValueError", "os.path.exists", "os.path.isdir", "len"], "function", ["None"], ["def", "validate_path", "(", "name", ",", "dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", "or", "not", "os", ".", "path", ".", "isdir", "(", "dir", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'The path for the directory \"{dir}\"\" does not exist or is not a folder'", ")", "\n", "", "files_name", "=", "os", ".", "listdir", "(", "dir", ")", "\n", "print", "(", "f'Total number of files in the path of {name}: {len(files_name)}'", ")", "\n", "return", "files_name", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.validate_img_mask_pair": [[30, 40], ["os.path.exists", "img.split", "validated_images_name.append", "print"], "function", ["None"], ["", "def", "validate_img_mask_pair", "(", "images_name", ",", "maskDir", ")", ":", "\n", "    ", "validated_images_name", "=", "[", "]", "\n", "for", "img", "in", "images_name", ":", "\n", "        ", "img_name", "=", "img", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "maskDir", "+", "f\"{img_name}.png\"", ")", ":", "\n", "            ", "validated_images_name", ".", "append", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'skipping img {img_name} ...'", ")", "\n", "continue", "\n", "", "", "return", "validated_images_name", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.get_src_augmentor": [[42, 73], ["albumentations.Compose", "albumentations.AdvancedBlur", "albumentations.HorizontalFlip", "albumentations.RandomBrightnessContrast"], "function", ["None"], ["", "def", "get_src_augmentor", "(", ")", ":", "\n", "    ", "\"\"\"\n    Face augmentor\n    \"\"\"", "\n", "aug", "=", "A", ".", "Compose", "(", "[", "\n", "A", ".", "AdvancedBlur", "(", ")", ",", "\n", "A", ".", "HorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "# A.OneOf([", "\n", "#     # A.ElasticTransform(alpha=120, sigma=120 * 0.05, alpha_affine=120 * 0.03, p=0.5),", "\n", "#     A.RandomSunFlare (num_flare_circles_lower=3, num_flare_circles_upper=5,src_radius=200),", "\n", "#     A.RandomShadow(shadow_dimension=4,),", "\n", "#     A.RandomSnow(snow_point_upper=0.2,brightness_coeff=1.5),", "\n", "#     A.RandomRain( blur_value=3)", "\n", "#     # A.OpticalDistortion(distort_limit=2, shift_limit=0.5, p=1)   ,", "\n", "#     # A.ImageCompression (quality_lower=70,p=0.5),               ", "\n", "#     ], p=0.5),", "\n", "# A.Affine  (", "\n", "#     scale=(0.8,1.2),", "\n", "#     rotate=(-50,50),", "\n", "#     shear=(-8,8),", "\n", "#     fit_output=True,", "\n", "#     p=0.7", "\n", "# ),", "\n", "# A.CLAHE(p=0.5),", "\n", "A", ".", "RandomBrightnessContrast", "(", "p", "=", "0.5", ")", ",", "]", ",", "\n", "additional_targets", "=", "{", "\n", "'mask1'", ":", "'mask'", "\n", "}", "\n", ")", "\n", "# A.RandomGamma(p=0.5)])", "\n", "return", "aug", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.angle3pt": [[76, 81], ["math.degrees", "math.atan2", "math.atan2"], "function", ["None"], ["", "def", "angle3pt", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "\"\"\"Counterclockwise angle in degrees by turning from a to c around b\n        Returns a float between 0.0 and 360.0\"\"\"", "\n", "ang", "=", "math", ".", "degrees", "(", "math", ".", "atan2", "(", "c", "[", "1", "]", "-", "b", "[", "1", "]", ",", "c", "[", "0", "]", "-", "b", "[", "0", "]", ")", "-", "math", ".", "atan2", "(", "a", "[", "1", "]", "-", "b", "[", "1", "]", ",", "a", "[", "0", "]", "-", "b", "[", "0", "]", ")", ")", "\n", "return", "ang", "+", "360", "if", "ang", "<", "0", "else", "ang", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.get_occluder_augmentor": [[83, 114], ["albumentations.Compose", "albumentations.AdvancedBlur", "albumentations.OneOf", "albumentations.Affine", "albumentations.RandomBrightnessContrast", "albumentations.ImageCompression"], "function", ["None"], ["", "def", "get_occluder_augmentor", "(", ")", ":", "\n", "    ", "\"\"\"\n    Occludor augmentor\n    \"\"\"", "\n", "aug", "=", "A", ".", "Compose", "(", "[", "\n", "A", ".", "AdvancedBlur", "(", ")", ",", "\n", "# A.OneOf([", "\n", "#     A.GaussNoise(),", "\n", "#     A.GlassBlur (),", "\n", "#     A.MotionBlur (),   ", "\n", "# ], p=0.5),    ", "\n", "# A.VerticalFlip(p=0.5),              ", "\n", "# A.RandomRotate90(p=0.5),", "\n", "A", ".", "OneOf", "(", "[", "\n", "# A.ElasticTransform(alpha=120, sigma=120 * 0.05, alpha_affine=120 * 0.03, p=0.5),", "\n", "# A.RandomSunFlare (num_flare_circles_lower=3, num_flare_circles_upper=5,src_radius=400),", "\n", "# A.OpticalDistortion(distort_limit=2, shift_limit=0.5, p=1)   ,", "\n", "A", ".", "ImageCompression", "(", "quality_lower", "=", "70", ",", "p", "=", "0.5", ")", ",", "\n", "]", ",", "p", "=", "0.5", ")", ",", "\n", "A", ".", "Affine", "(", "\n", "scale", "=", "(", "0.8", ",", "1.2", ")", ",", "\n", "rotate", "=", "(", "-", "15", ",", "15", ")", ",", "\n", "shear", "=", "(", "-", "8", ",", "8", ")", ",", "\n", "fit_output", "=", "True", ",", "\n", "p", "=", "0.7", "\n", ")", ",", "\n", "# A.CLAHE(p=0.5),", "\n", "A", ".", "RandomBrightnessContrast", "(", "p", "=", "0.5", ",", "brightness_limit", "=", "0.1", ",", "contrast_limit", "=", "0.1", ",", "brightness_by_max", "=", "False", ")", ",", "\n", "# A.RandomGamma(p=0.5)", "\n", "]", ")", "\n", "return", "aug", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.resize_by_factor": [[116, 123], ["tuple", "cv2.resize", "numpy.round().astype", "numpy.round", "numpy.array"], "function", ["None"], ["", "def", "resize_by_factor", "(", "im", ",", "factor", ")", ":", "\n", "    ", "\"\"\"Returns a copy of `im` resized by `factor`, using bilinear interp for up and area interp\n    for downscaling.\n    \"\"\"", "\n", "new_size", "=", "tuple", "(", "np", ".", "round", "(", "np", ".", "array", "(", "[", "im", ".", "shape", "[", "1", "]", ",", "im", ".", "shape", "[", "0", "]", "]", ")", "*", "factor", ")", ".", "astype", "(", "int", ")", ")", "\n", "# interp = cv2.INTER_LANCZOS4 if factor > 1.0 else cv2.INTER_AREA", "\n", "return", "cv2", ".", "resize", "(", "im", ",", "new_size", ",", "fx", "=", "factor", ",", "fy", "=", "factor", ",", "interpolation", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.augment_occluder": [[125, 145], ["cv2.boundingRect", "utils.resize_by_factor", "utils.resize_by_factor", "aug", "cv2.cvtColor", "numpy.sqrt", "numpy.random.uniform", "print"], "function", ["home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.resize_by_factor", "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.resize_by_factor"], ["", "def", "augment_occluder", "(", "aug", ",", "occluder_img", ",", "occluder_mask", ",", "src_rect", ")", ":", "\n", "    ", "occluder_rect", "=", "cv2", ".", "boundingRect", "(", "occluder_mask", ")", "\n", "#random resize", "\n", "try", ":", "\n", "        ", "scale_factor", "=", "(", "(", "(", "src_rect", "[", "2", "]", "*", "src_rect", "[", "3", "]", ")", ")", "/", "(", "occluder_rect", "[", "2", "]", "*", "occluder_rect", "[", "3", "]", ")", ")", "*", "np", ".", "random", ".", "uniform", "(", "0.5", ",", "1", ")", "\n", "scale_factor", "=", "np", ".", "sqrt", "(", "scale_factor", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "scale_factor", "=", "1", "\n", "", "occluder_img", "=", "resize_by_factor", "(", "occluder_img", ",", "scale_factor", ")", "\n", "occluder_mask", "=", "resize_by_factor", "(", "occluder_mask", ",", "scale_factor", ")", "\n", "#perform augmentation", "\n", "transformed", "=", "aug", "(", "image", "=", "occluder_img", ",", "mask", "=", "occluder_mask", ")", "\n", "occluder_img", ",", "occluder_mask", "=", "transformed", "[", "\"image\"", "]", ",", "transformed", "[", "\"mask\"", "]", "\n", "\n", "# convert rgb to rgba to convert black to transparent", "\n", "occluder_img", "=", "cv2", ".", "cvtColor", "(", "occluder_img", ",", "cv2", ".", "COLOR_RGB2RGBA", ")", "\n", "occluder_img", "[", ":", ",", ":", ",", "3", "]", "=", "occluder_mask", "\n", "\n", "return", "occluder_img", ",", "occluder_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.get_randomOccluderNmask": [[146, 177], ["numpy.random.rand", "numpy.random.rand", "random.randint", "random_shape_generator.get_random_points", "random_shape_generator.get_bezier_curve", "os.listdir", "cv2.imread", "cv2.resize", "cv2.boundingRect", "skimage.draw.polygon2mask().astype", "random.sample", "random.sample", "cv2.cvtColor", "cv2.bitwise_and", "glob.glob", "print", "print", "skimage.draw.polygon2mask", "list", "zip"], "function", ["home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.random_shape_generator.get_random_points", "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.random_shape_generator.get_bezier_curve"], ["", "def", "get_randomOccluderNmask", "(", ")", ":", "\n", "#get random shape mask", "\n", "    ", "rad", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "edgy", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "mask_shape", "=", "512", "\n", "no_of_points", "=", "random", ".", "randint", "(", "3", ",", "15", ")", "\n", "a", "=", "get_random_points", "(", "n", "=", "no_of_points", ",", "scale", "=", "mask_shape", ")", "\n", "x", ",", "y", ",", "_", "=", "get_bezier_curve", "(", "a", ",", "rad", "=", "rad", ",", "edgy", "=", "edgy", ")", "\n", "occluder_mask", "=", "skimage", ".", "draw", ".", "polygon2mask", "(", "(", "mask_shape", ",", "mask_shape", ")", ",", "list", "(", "zip", "(", "x", ",", "y", ")", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "\n", "\n", "# get random texture", "\n", "texture_list", "=", "os", ".", "listdir", "(", "\"./dataset/DTD/images/\"", ")", "\n", "# texture_list.remove('freckled')", "\n", "texture_choice", "=", "random", ".", "sample", "(", "texture_list", ",", "1", ")", "[", "0", "]", "\n", "texture_img", "=", "random", ".", "sample", "(", "glob", ".", "glob", "(", "f\"./dataset/DTD/images/{texture_choice}/*.jpg\"", ")", ",", "1", ")", "[", "0", "]", "\n", "ori_occluder_img", "=", "cv2", ".", "imread", "(", "texture_img", ",", "-", "1", ")", "\n", "ori_occluder_img", "=", "cv2", ".", "resize", "(", "ori_occluder_img", ",", "(", "mask_shape", ",", "mask_shape", ")", ")", "\n", "try", ":", "\n", "        ", "ori_occluder_img", "=", "cv2", ".", "cvtColor", "(", "ori_occluder_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "#cropped out the hand img", "\n", "", "try", ":", "\n", "        ", "occluder_img", "=", "cv2", ".", "bitwise_and", "(", "ori_occluder_img", ",", "ori_occluder_img", ",", "mask", "=", "occluder_mask", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "return", "\n", "", "occluder_rect", "=", "cv2", ".", "boundingRect", "(", "occluder_mask", ")", "\n", "cropped_occluder_mask", "=", "occluder_mask", "[", "occluder_rect", "[", "1", "]", ":", "(", "occluder_rect", "[", "1", "]", "+", "occluder_rect", "[", "3", "]", ")", ",", "occluder_rect", "[", "0", "]", ":", "(", "occluder_rect", "[", "0", "]", "+", "occluder_rect", "[", "2", "]", ")", "]", "\n", "cropped_occluder_img", "=", "occluder_img", "[", "occluder_rect", "[", "1", "]", ":", "(", "occluder_rect", "[", "1", "]", "+", "occluder_rect", "[", "3", "]", ")", ",", "occluder_rect", "[", "0", "]", ":", "(", "occluder_rect", "[", "0", "]", "+", "occluder_rect", "[", "2", "]", ")", "]", "\n", "return", "cropped_occluder_img", ",", "cropped_occluder_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.get_srcNmask": [[178, 191], ["cv2.imread", "cv2.cvtColor", "cv2.imread", "cv2.resize", "cv2.cvtColor", "image_file.split", "os.path.abspath", "os.path.join"], "function", ["None"], ["", "def", "get_srcNmask", "(", "image_file", ",", "img_path", ",", "mask_path", ")", ":", "\n", "    ", "\"\"\"\n    Get the face image and mask\n    \"\"\"", "\n", "img_name", "=", "image_file", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "src_img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "img_path", ",", "image_file", ")", ")", ",", "-", "1", ")", "\n", "src_img", "=", "cv2", ".", "cvtColor", "(", "src_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "src_mask", "=", "cv2", ".", "imread", "(", "mask_path", "+", "f\"{img_name}.png\"", ")", "\n", "src_mask", "=", "cv2", ".", "resize", "(", "src_mask", ",", "(", "1024", ",", "1024", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "src_mask", "=", "cv2", ".", "cvtColor", "(", "src_mask", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "\n", "return", "src_img", ",", "src_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.utils.get_occluderNmask": [[193, 217], ["cv2.imread", "cv2.imread", "cv2.cvtColor", "cv2.resize", "cv2.boundingRect", "occluder_file.split", "os.path.abspath", "cv2.cvtColor", "os.path.abspath", "cv2.bitwise_and", "os.path.join", "print", "exit", "os.path.join", "print"], "function", ["None"], ["", "def", "get_occluderNmask", "(", "occluder_file", ",", "img_path", ",", "mask_path", ")", ":", "\n", "    ", "occluder_name", "=", "occluder_file", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "ori_occluder_img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "img_path", ",", "occluder_file", ")", ")", ",", "-", "1", ")", "\n", "try", ":", "\n", "        ", "ori_occluder_img", "=", "cv2", ".", "cvtColor", "(", "ori_occluder_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "exit", "(", ")", "\n", "", "occluder_mask", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "mask_path", ",", "occluder_name", "+", "\".png\"", ")", ")", ")", "\n", "occluder_mask", "=", "cv2", ".", "cvtColor", "(", "occluder_mask", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "\n", "occluder_mask", "=", "cv2", ".", "resize", "(", "occluder_mask", ",", "(", "ori_occluder_img", ".", "shape", "[", "1", "]", ",", "ori_occluder_img", ".", "shape", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "\n", "#cropped out the hand img", "\n", "try", ":", "\n", "        ", "occluder_img", "=", "cv2", ".", "bitwise_and", "(", "ori_occluder_img", ",", "ori_occluder_img", ",", "mask", "=", "occluder_mask", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "return", "\n", "\n", "", "occluder_rect", "=", "cv2", ".", "boundingRect", "(", "occluder_mask", ")", "\n", "cropped_occluder_mask", "=", "occluder_mask", "[", "occluder_rect", "[", "1", "]", ":", "(", "occluder_rect", "[", "1", "]", "+", "occluder_rect", "[", "3", "]", ")", ",", "occluder_rect", "[", "0", "]", ":", "(", "occluder_rect", "[", "0", "]", "+", "occluder_rect", "[", "2", "]", ")", "]", "\n", "cropped_occluder_img", "=", "occluder_img", "[", "occluder_rect", "[", "1", "]", ":", "(", "occluder_rect", "[", "1", "]", "+", "occluder_rect", "[", "3", "]", ")", ",", "occluder_rect", "[", "0", "]", ":", "(", "occluder_rect", "[", "0", "]", "+", "occluder_rect", "[", "2", "]", ")", "]", "\n", "return", "cropped_occluder_img", ",", "cropped_occluder_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.colour_transfer.gaussian": [[6, 8], ["cupy.exp"], "function", ["None"], ["def", "gaussian", "(", "x_square", ",", "sigma", ")", ":", "\n", "    ", "return", "cp", ".", "exp", "(", "-", "0.5", "*", "x_square", "/", "sigma", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.colour_transfer.bilateral_filter": [[10, 29], ["int", "int", "cupy.zeros", "range", "range", "colour_transfer.gaussian", "cupy.roll", "colour_transfer.gaussian"], "function", ["home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.colour_transfer.gaussian", "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.colour_transfer.gaussian"], ["", "def", "bilateral_filter", "(", "image", ",", "sigma_space", ",", "sigma_intensity", ")", ":", "\n", "# kernel_size should be twice the sigma space to avoid calculating negligible values", "\n", "    ", "kernel_size", "=", "int", "(", "2", "*", "sigma_space", "+", "1", ")", "\n", "half_kernel_size", "=", "int", "(", "kernel_size", "/", "2", ")", "\n", "result", "=", "cp", ".", "zeros", "(", "image", ".", "shape", ")", "\n", "W", "=", "0", "\n", "\n", "# Iterating over the kernel", "\n", "for", "x", "in", "range", "(", "-", "half_kernel_size", ",", "half_kernel_size", "+", "1", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "-", "half_kernel_size", ",", "half_kernel_size", "+", "1", ")", ":", "\n", "            ", "Gspace", "=", "gaussian", "(", "x", "**", "2", "+", "y", "**", "2", ",", "sigma_space", ")", "\n", "shifted_image", "=", "cp", ".", "roll", "(", "image", ",", "[", "x", ",", "y", "]", ",", "[", "1", ",", "0", "]", ")", "\n", "intensity_difference_image", "=", "image", "-", "shifted_image", "\n", "Gintenisity", "=", "gaussian", "(", "\n", "intensity_difference_image", "**", "2", ",", "sigma_intensity", ")", "\n", "result", "+=", "Gspace", "*", "Gintenisity", "*", "shifted_image", "\n", "W", "+=", "Gspace", "*", "Gintenisity", "\n", "\n", "", "", "return", "result", "/", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.colour_transfer.color_transfer_sot": [[32, 96], ["cupy.array", "cupy.array", "cp.array.copy", "cupy.empty", "range", "cupy.asnumpy", "len", "ValueError", "ValueError", "cp.empty.fill", "range", "cupy.random.normal().astype", "cupy.linalg.norm", "cupy.sum().reshape", "cupy.sum().reshape", "cupy.argsort", "cupy.argsort", "range", "cp.empty.reshape", "colour_transfer.bilateral_filter", "colour_transfer.bilateral_filter", "colour_transfer.bilateral_filter", "cupy.stack", "len", "print", "cupy.random.normal", "cupy.sum", "cupy.sum"], "function", ["home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.colour_transfer.bilateral_filter", "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.colour_transfer.bilateral_filter", "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.colour_transfer.bilateral_filter"], ["", "def", "color_transfer_sot", "(", "src", ",", "trg", ",", "steps", "=", "15", ",", "batch_size", "=", "5", ",", "reg_sigmaXY", "=", "16", ",", "reg_sigmaV", "=", "30", ")", ":", "\n", "    ", "\"\"\"\n    Color Transform via Sliced Optimal Transfer\n    ported by @iperov from https://github.com/dcoeurjo/OTColorTransfer\n    src         - any float range any channel image\n    dst         - any float range any channel image, same shape as src\n    steps       - number of solver steps\n    batch_size  - solver batch size\n    reg_sigmaXY - apply regularization and sigmaXY of filter, otherwise set to 0.0\n    reg_sigmaV  - sigmaV of filter\n    return value - clip it manually\n    \"\"\"", "\n", "# if not np.issubdtype(src.dtype, np.floating):", "\n", "#     raise ValueError(\"src value must be float\")", "\n", "# if not np.issubdtype(trg.dtype, np.floating):", "\n", "#     raise ValueError(\"trg value must be float\")", "\n", "src", "=", "cp", ".", "array", "(", "src", ")", "\n", "trg", "=", "cp", ".", "array", "(", "trg", ")", "\n", "\n", "if", "len", "(", "src", ".", "shape", ")", "!=", "3", ":", "\n", "        ", "raise", "ValueError", "(", "\"src shape must have rank 3 (h,w,c)\"", ")", "\n", "\n", "", "if", "src", ".", "shape", "!=", "trg", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "\"src and trg shapes must be equal\"", ")", "\n", "\n", "", "src_dtype", "=", "src", ".", "dtype", "\n", "h", ",", "w", ",", "c", "=", "src", ".", "shape", "\n", "new_src", "=", "src", ".", "copy", "(", ")", "\n", "\n", "advect", "=", "cp", ".", "empty", "(", "(", "h", "*", "w", ",", "c", ")", ",", "dtype", "=", "src_dtype", ")", "\n", "for", "step", "in", "range", "(", "steps", ")", ":", "\n", "        ", "advect", ".", "fill", "(", "0", ")", "\n", "for", "batch", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "dir", "=", "cp", ".", "random", ".", "normal", "(", "size", "=", "c", ")", ".", "astype", "(", "src_dtype", ")", "\n", "dir", "/=", "cp", ".", "linalg", ".", "norm", "(", "dir", ")", "\n", "\n", "projsource", "=", "cp", ".", "sum", "(", "new_src", "*", "dir", ",", "axis", "=", "-", "1", ")", ".", "reshape", "(", "(", "h", "*", "w", ")", ")", "\n", "projtarget", "=", "cp", ".", "sum", "(", "trg", "*", "dir", ",", "axis", "=", "-", "1", ")", ".", "reshape", "(", "(", "h", "*", "w", ")", ")", "\n", "\n", "idSource", "=", "cp", ".", "argsort", "(", "projsource", ")", "\n", "idTarget", "=", "cp", ".", "argsort", "(", "projtarget", ")", "\n", "\n", "a", "=", "projtarget", "[", "idTarget", "]", "-", "projsource", "[", "idSource", "]", "\n", "for", "i_c", "in", "range", "(", "c", ")", ":", "\n", "                ", "advect", "[", "idSource", ",", "i_c", "]", "+=", "a", "*", "dir", "[", "i_c", "]", "\n", "", "", "new_src", "+=", "advect", ".", "reshape", "(", "(", "h", ",", "w", ",", "c", ")", ")", "/", "batch_size", "\n", "\n", "", "if", "reg_sigmaXY", "!=", "0.0", ":", "\n", "        ", "src_diff", "=", "(", "new_src", "-", "src", ")", ".", "astype", "(", "cp", ".", "float32", ")", "\n", "# try:", "\n", "try", ":", "\n", "\n", "# src_diff_filt = bilateral_filter(src_diff, reg_sigmaV, reg_sigmaXY )", "\n", "            ", "R_bf", "=", "bilateral_filter", "(", "src_diff", "[", ":", ",", ":", ",", "0", "]", ",", "reg_sigmaV", ",", "reg_sigmaXY", ")", "\n", "G_bf", "=", "bilateral_filter", "(", "src_diff", "[", ":", ",", ":", ",", "1", "]", ",", "reg_sigmaV", ",", "reg_sigmaXY", ")", "\n", "B_bf", "=", "bilateral_filter", "(", "src_diff", "[", ":", ",", ":", ",", "2", "]", ",", "reg_sigmaV", ",", "reg_sigmaXY", ")", "\n", "src_diff_filt", "=", "cp", ".", "stack", "(", "[", "R_bf", ",", "G_bf", ",", "B_bf", "]", ",", "axis", "=", "2", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "\n", "", "if", "len", "(", "src_diff_filt", ".", "shape", ")", "==", "2", ":", "\n", "            ", "src_diff_filt", "=", "src_diff_filt", "[", "...", ",", "None", "]", "\n", "", "new_src", "=", "src", "+", "src_diff_filt", "\n", "", "return", "cp", ".", "asnumpy", "(", "new_src", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kennyvoo_face-occlusion-generation.utils.paste_over.paste_over": [[6, 60], ["numpy.asarray", "numpy.asarray", "numpy.round().astype", "numpy.clip", "numpy.clip", "numpy.ones", "cv2.erode", "cv2.GaussianBlur", "numpy.expand_dims", "cv2.add", "cv2.subtract", "region_src[].astype", "numpy.round", "numpy.random.rand", "numpy.random.uniform"], "function", ["None"], ["def", "paste_over", "(", "im_src", ",", "occluder_mask", ",", "im_dst", ",", "dst_mask", ",", "center", ",", "occlusion_mask", ",", "randOcc", ")", ":", "\n", "    ", "\"\"\"Pastes `im_src` onto `im_dst` at a specified position, with alpha blending, in place.\n    Locations outside the bounds of `im_dst` are handled as expected (only a part or none of\n    `im_src` becomes visie).\n    Args:\n        im_src: The RGBA image to be pasted onto `im_dst`. Its size can be arbitrary.\n        im_dst: The target image.\n        alpha: A float (0.0-1.0) array of the same size as `im_src` controlling the alpha blending\n            at each pixel. Large values mean more visibility for `im_src`.\n        center: coordinates in `im_dst` where the center of `im_src` should be placed.\n    \"\"\"", "\n", "\n", "width_height_src", "=", "np", ".", "asarray", "(", "[", "im_src", ".", "shape", "[", "1", "]", ",", "im_src", ".", "shape", "[", "0", "]", "]", ")", "\n", "width_height_dst", "=", "np", ".", "asarray", "(", "[", "im_dst", ".", "shape", "[", "1", "]", ",", "im_dst", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n", "center", "=", "np", ".", "round", "(", "center", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "raw_start_dst", "=", "center", "-", "width_height_src", "//", "2", "\n", "raw_end_dst", "=", "raw_start_dst", "+", "width_height_src", "\n", "\n", "start_dst", "=", "np", ".", "clip", "(", "raw_start_dst", ",", "0", ",", "width_height_dst", ")", "\n", "end_dst", "=", "np", ".", "clip", "(", "raw_end_dst", ",", "0", ",", "width_height_dst", ")", "\n", "region_dst", "=", "im_dst", "[", "start_dst", "[", "1", "]", ":", "end_dst", "[", "1", "]", ",", "start_dst", "[", "0", "]", ":", "end_dst", "[", "0", "]", "]", "\n", "\n", "start_src", "=", "start_dst", "-", "raw_start_dst", "\n", "end_src", "=", "width_height_src", "+", "(", "end_dst", "-", "raw_end_dst", ")", "\n", "occluder_mask", "=", "occluder_mask", "[", "start_src", "[", "1", "]", ":", "end_src", "[", "1", "]", ",", "start_src", "[", "0", "]", ":", "end_src", "[", "0", "]", "]", "\n", "region_src", "=", "im_src", "[", "start_src", "[", "1", "]", ":", "end_src", "[", "1", "]", ",", "start_src", "[", "0", "]", ":", "end_src", "[", "0", "]", "]", "\n", "color_src", "=", "region_src", "[", "...", ",", "0", ":", "3", "]", "\n", "\n", "\n", "alpha", "=", "(", "region_src", "[", "...", ",", "3", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", "/", "255", ")", "\n", "if", "randOcc", ":", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.3", ":", "\n", "            ", "alpha", "*=", "np", ".", "random", ".", "uniform", "(", "0.4", ",", "0.7", ")", "\n", "# if np.random.rand()<0.5:", "\n", "#     if np.random.rand()<0.5:", "\n", "#         temp = cv2.erode(alpha,np.ones((15,15), np.uint8),iterations = np.random.randint(2,7))", "\n", "#         temp= np.expand_dims(temp, axis=2)", "\n", "#         alpha-=temp*np.random.uniform(0.3, 0.8)", "\n", "#     else:", "\n", "#         alpha*=np.random.uniform(0.3, 0.6)", "\n", "\n", "#alpha blending edge processing", "\n", "", "", "kernel", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "alpha", "=", "cv2", ".", "erode", "(", "alpha", ",", "kernel", ",", "iterations", "=", "1", ")", "\n", "alpha", "=", "cv2", ".", "GaussianBlur", "(", "alpha", ",", "(", "5", ",", "5", ")", ",", "0", ")", "\n", "alpha", "=", "np", ".", "expand_dims", "(", "alpha", ",", "axis", "=", "2", ")", "\n", "\n", "\n", "occlusion_mask", "[", "start_dst", "[", "1", "]", ":", "end_dst", "[", "1", "]", ",", "start_dst", "[", "0", "]", ":", "end_dst", "[", "0", "]", "]", "=", "cv2", ".", "add", "(", "occlusion_mask", "[", "start_dst", "[", "1", "]", ":", "end_dst", "[", "1", "]", ",", "start_dst", "[", "0", "]", ":", "end_dst", "[", "0", "]", "]", ",", "occluder_mask", ")", "\n", "\n", "dst_mask", "[", "start_dst", "[", "1", "]", ":", "end_dst", "[", "1", "]", ",", "start_dst", "[", "0", "]", ":", "end_dst", "[", "0", "]", "]", "=", "cv2", ".", "subtract", "(", "dst_mask", "[", "start_dst", "[", "1", "]", ":", "end_dst", "[", "1", "]", ",", "start_dst", "[", "0", "]", ":", "end_dst", "[", "0", "]", "]", ",", "occluder_mask", ")", "\n", "im_dst", "[", "start_dst", "[", "1", "]", ":", "end_dst", "[", "1", "]", ",", "start_dst", "[", "0", "]", ":", "end_dst", "[", "0", "]", "]", "=", "(", "alpha", "*", "color_src", "+", "(", "1", "-", "alpha", ")", "*", "region_dst", ")", "\n", "return", "im_dst", ",", "dst_mask", ",", "occlusion_mask", "", "", ""]]}