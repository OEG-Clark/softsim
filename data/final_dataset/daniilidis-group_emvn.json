{"home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.run_groupconv": [[15, 36], ["layers.group_conv", "torch.rand", "layers.group_conv.", "range", "layers.get_cyclic12_idx", "layers.group_conv.", "torch.allclose", "layers.get_ico60_idx", "torch.allclose"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.get_cyclic12_idx", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.get_ico60_idx"], ["def", "run_groupconv", "(", "n_elements", ",", "support", "=", "None", ")", ":", "\n", "  ", "chin", ",", "chout", ",", "bs", "=", "4", ",", "8", ",", "10", "\n", "layer", "=", "layers", ".", "group_conv", "(", "chin", ",", "chout", ",", "\n", "init", "=", "'he'", ",", "\n", "n_elements", "=", "n_elements", ",", "\n", "support", "=", "support", ")", "\n", "inp", "=", "torch", ".", "rand", "(", "bs", ",", "chin", ",", "n_elements", ",", "1", ")", "\n", "out", "=", "layer", "(", "inp", ")", "\n", "if", "n_elements", "==", "12", ":", "\n", "    ", "cayley", "=", "layers", ".", "get_cyclic12_idx", "(", ")", "\n", "", "elif", "n_elements", "==", "60", ":", "\n", "    ", "cayley", "=", "layers", ".", "get_ico60_idx", "(", ")", "\n", "\n", "# test equivariance for all elements of the group", "\n", "", "for", "i", "in", "range", "(", "1", ",", "n_elements", ")", ":", "\n", "    ", "rot_inp", "=", "inp", "[", "...", ",", "cayley", "[", "i", "]", ",", ":", "]", "\n", "rot_out", "=", "layer", "(", "rot_inp", ")", "\n", "assert", "rot_out", ".", "shape", "==", "(", "bs", ",", "chout", ",", "n_elements", ",", "1", ")", "\n", "gt_out", "=", "out", "[", "...", ",", "cayley", "[", "i", "]", ",", ":", "]", "\n", "assert", "torch", ".", "allclose", "(", "gt_out", ",", "rot_out", ")", "\n", "assert", "not", "torch", ".", "allclose", "(", "gt_out", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.test_groupconv12_equivariance": [[38, 40], ["test_groupconv.run_groupconv"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.run_groupconv"], ["", "", "def", "test_groupconv12_equivariance", "(", ")", ":", "\n", "  ", "run_groupconv", "(", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.test_groupconv12_localized_equivariance": [[42, 45], ["test_groupconv.run_groupconv", "test_groupconv.run_groupconv"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.run_groupconv", "home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.run_groupconv"], ["", "def", "test_groupconv12_localized_equivariance", "(", ")", ":", "\n", "  ", "run_groupconv", "(", "12", ",", "[", "0", ",", "1", "]", ")", "\n", "run_groupconv", "(", "12", ",", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.test_groupconv60_equivariance": [[47, 49], ["test_groupconv.run_groupconv"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.run_groupconv"], ["", "def", "test_groupconv60_equivariance", "(", ")", ":", "\n", "  ", "run_groupconv", "(", "60", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.test_groupconv60_localized_equivariance": [[51, 56], ["test_groupconv.run_groupconv", "test_groupconv.run_groupconv", "test_groupconv.run_groupconv", "test_groupconv.run_groupconv"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.run_groupconv", "home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.run_groupconv", "home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.run_groupconv", "home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.run_groupconv"], ["", "def", "test_groupconv60_localized_equivariance", "(", ")", ":", "\n", "  ", "run_groupconv", "(", "60", ",", "[", "0", ",", "1", "]", ")", "\n", "run_groupconv", "(", "60", ",", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "run_groupconv", "(", "60", ",", "[", "0", ",", "8", ",", "1", ",", "15", ",", "12", ",", "25", ",", "21", ",", "19", ",", "29", ",", "7", ",", "11", ",", "20", ",", "4", "]", ")", "\n", "run_groupconv", "(", "60", ",", "[", "0", ",", "8", ",", "1", ",", "15", ",", "12", ",", "25", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.run_hconv": [[58, 84], ["layers.homogeneous_conv", "torch.rand", "layers.homogeneous_conv.", "range", "layers.homogeneous_conv.", "torch.allclose", "layers.homogeneous_conv", "torch.allclose"], "function", ["None"], ["", "def", "run_hconv", "(", "n_homogeneous", ",", "support", "=", "None", ")", ":", "\n", "  ", "\"\"\"Run homogeneous convolution\"\"\"", "\n", "chin", ",", "chout", ",", "bs", "=", "4", ",", "8", ",", "10", "\n", "n_group", "=", "60", "\n", "layer", "=", "layers", ".", "homogeneous_conv", "(", "chin", ",", "chout", ",", "\n", "init", "=", "'he'", ",", "\n", "n_group", "=", "n_group", ",", "\n", "n_homogeneous", "=", "n_homogeneous", ",", "\n", "support", "=", "support", ")", "\n", "inp", "=", "torch", ".", "rand", "(", "bs", ",", "chin", ",", "n_homogeneous", ",", "1", ")", "\n", "out", "=", "layer", "(", "inp", ")", "\n", "\n", "# TODO: find one known permutation instead of using the precomputed table", "\n", "# get cayley from another layer w/ full support!", "\n", "cayley", "=", "layers", ".", "homogeneous_conv", "(", "1", ",", "1", ",", "\n", "n_group", "=", "n_group", ",", "\n", "n_homogeneous", "=", "n_homogeneous", ",", "\n", "support", "=", "None", ")", ".", "conv", ".", "idx", "\n", "# test equivariance for all elements of the group", "\n", "for", "i", "in", "range", "(", "1", ",", "n_group", ")", ":", "\n", "    ", "rot_inp", "=", "inp", "[", "...", ",", "cayley", "[", "i", "]", ",", ":", "]", "\n", "rot_out", "=", "layer", "(", "rot_inp", ")", "\n", "assert", "rot_out", ".", "shape", "==", "(", "bs", ",", "chout", ",", "n_homogeneous", ",", "1", ")", "\n", "gt_out", "=", "out", "[", "...", ",", "cayley", "[", "i", "]", ",", ":", "]", "\n", "assert", "torch", ".", "allclose", "(", "gt_out", ",", "rot_out", ",", "atol", "=", "1e-6", ")", "\n", "assert", "not", "torch", ".", "allclose", "(", "gt_out", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.test_homogeneousconv60_equivariance": [[86, 91], ["test_groupconv.run_hconv", "test_groupconv.run_hconv", "test_groupconv.run_hconv", "test_groupconv.run_hconv", "list", "list", "range", "range"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.run_hconv", "home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.run_hconv", "home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.run_hconv", "home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.run_hconv"], ["", "", "def", "test_homogeneousconv60_equivariance", "(", ")", ":", "\n", "  ", "run_hconv", "(", "20", ")", "\n", "run_hconv", "(", "12", ")", "\n", "run_hconv", "(", "20", ",", "support", "=", "list", "(", "range", "(", "10", ")", ")", ")", "\n", "run_hconv", "(", "12", ",", "support", "=", "list", "(", "range", "(", "6", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.test.test_groupconv.test_homogeneousconv60_id": [[93, 101], ["torch.rand", "layers.homogeneous_conv", "layers.homogeneous_conv.", "torch.allclose"], "function", ["None"], ["", "def", "test_homogeneousconv60_id", "(", ")", ":", "\n", "  ", "inp", "=", "torch", ".", "rand", "(", "3", ",", "4", ",", "20", ",", "1", ")", "\n", "layer", "=", "layers", ".", "homogeneous_conv", "(", "4", ",", "4", ",", "\n", "init", "=", "'id'", ",", "\n", "n_group", "=", "60", ",", "\n", "n_homogeneous", "=", "20", ")", "\n", "out", "=", "layer", "(", "inp", ")", "\n", "torch", ".", "allclose", "(", "out", ",", "inp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.BasicBlock.__init__": [[25, 40], ["torch.Module.__init__", "models.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "models.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "layers.CircularPad"], "methods", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.Identity.__init__", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.conv3x3", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "circpad", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "circpad", ":", "\n", "            ", "pad", "=", "0", "\n", "self", ".", "circpad", "=", "layers", ".", "CircularPad", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "pad", "=", "1", "\n", "self", ".", "circpad", "=", "None", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "pad", "=", "pad", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "pad", "=", "pad", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.BasicBlock.forward": [[41, 62], ["models.BasicBlock.conv1", "models.BasicBlock.bn1", "models.BasicBlock.relu", "models.BasicBlock.conv2", "models.BasicBlock.bn2", "models.BasicBlock.relu", "models.BasicBlock.circpad", "models.BasicBlock.circpad", "models.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "if", "self", ".", "circpad", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "circpad", "(", "x", ")", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "circpad", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "circpad", "(", "out", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "residual", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.Bottleneck.__init__": [[67, 81], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.Identity.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "circpad", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# NOT IMPLEMENTED!", "\n", "assert", "not", "circpad", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.Bottleneck.forward": [[82, 103], ["models.Bottleneck.conv1", "models.Bottleneck.bn1", "models.Bottleneck.relu", "models.Bottleneck.conv2", "models.Bottleneck.bn2", "models.Bottleneck.relu", "models.Bottleneck.conv3", "models.Bottleneck.bn3", "models.Bottleneck.relu", "models.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.GroupConvBlock.__init__": [[106, 127], ["torch.Module.__init__", "layers.homogeneous_or_group_conv", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "activation", "activation"], "methods", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.Identity.__init__", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.homogeneous_or_group_conv"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "init", ",", "\n", "n_elements", "=", "12", ",", "\n", "n_homogeneous", "=", "0", ",", "\n", "use_bn", "=", "True", ",", "\n", "activation", "=", "nn", ".", "ReLU", ",", "\n", "support", "=", "None", ",", "\n", "homogeneous_output", "=", "True", ")", ":", "\n", "        ", "super", "(", "GroupConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "self", ".", "conv1", "=", "layers", ".", "homogeneous_or_group_conv", "(", "inplanes", ",", "planes", ",", "\n", "init", "=", "init", ",", "\n", "n_elements", "=", "n_elements", ",", "\n", "n_homogeneous", "=", "n_homogeneous", ",", "\n", "support", "=", "support", ",", "\n", "homogeneous_output", "=", "homogeneous_output", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "try", ":", "\n", "            ", "self", ".", "relu", "=", "activation", "(", "inplace", "=", "True", ")", "\n", "", "except", "TypeError", ":", "\n", "# inplace not supported", "\n", "            ", "self", ".", "relu", "=", "activation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.GroupConvBlock.forward": [[128, 135], ["models.GroupConvBlock.conv1", "models.GroupConvBlock.relu", "models.GroupConvBlock.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.ResNetMVGCNN.__init__": [[151, 235], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "models.ResNetMVGCNN._make_layer", "models.ResNetMVGCNN._make_layer", "models.ResNetMVGCNN._make_layer", "models.ResNetMVGCNN._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "layers.Identity", "layers.Identity", "torch.Linear", "torch.Linear", "torch.Linear", "models.ResNetMVGCNN.modules", "numpy.array", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.CircularPad", "layers.CircularPad", "isinstance", "enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.GroupConvBlock", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "zip", "fc_before_conv.append", "zip", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.Linear", "torch.Linear", "torch.Linear", "fc_before_conv.append", "range", "len", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.Identity.__init__", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.ResNetMVGCNN._make_layer", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.ResNetMVGCNN._make_layer", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.ResNetMVGCNN._make_layer", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.ResNetMVGCNN._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "channels", ",", "gconv_channels", ",", "\n", "num_classes", "=", "3", ",", "\n", "view_dropout", "=", "False", ",", "\n", "n_group_elements", "=", "12", ",", "\n", "n_homogeneous", "=", "0", ",", "\n", "bn_after_gconv", "=", "True", ",", "\n", "gconv_activation", "=", "nn", ".", "ReLU", ",", "\n", "gconv_support", "=", "None", ",", "\n", "viewpool", "=", "'avg'", ",", "\n", "n_fc_before_gconv", "=", "False", ",", "\n", "circpad", "=", "False", ",", "\n", "full_homogeneous", "=", "True", ")", ":", "\n", "        ", "assert", "gconv_channels", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "view_dropout", "=", "view_dropout", "\n", "self", ".", "viewpool", "=", "viewpool", "\n", "super", "(", "ResNetMVGCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "circpad", ":", "\n", "            ", "pad1", ",", "pad3", "=", "0", ",", "0", "\n", "self", ".", "circpad1", "=", "layers", ".", "CircularPad", "(", "1", ")", "\n", "self", ".", "circpad3", "=", "layers", ".", "CircularPad", "(", "3", ")", "\n", "", "else", ":", "\n", "            ", "pad1", ",", "pad3", "=", "1", ",", "3", "\n", "self", ".", "circpad1", ",", "self", ".", "circpad3", "=", "None", ",", "None", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "padding", "=", "pad3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "pad1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "channels", "[", "0", "]", ",", "circpad", "=", "circpad", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "channels", "[", "1", "]", ",", "\n", "stride", "=", "2", ",", "circpad", "=", "circpad", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "channels", "[", "2", "]", ",", "\n", "stride", "=", "2", ",", "circpad", "=", "circpad", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "channels", "[", "3", "]", ",", "\n", "stride", "=", "2", ",", "circpad", "=", "circpad", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "final_descriptor", "=", "layers", ".", "Identity", "(", ")", "\n", "self", ".", "initial_group", "=", "layers", ".", "Identity", "(", ")", "\n", "self", ".", "gcnn_fc", "=", "nn", ".", "Linear", "(", "\n", "gconv_channels", "[", "-", "1", "]", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "if", "n_fc_before_gconv", ">", "0", ":", "\n", "            ", "nlayers", "=", "[", "512", "]", "+", "[", "gconv_channels", "[", "0", "]", "\n", "for", "_", "in", "range", "(", "n_fc_before_gconv", ")", "]", "\n", "fc_before_conv", "=", "[", "]", "\n", "for", "i", ",", "(", "chin", ",", "chout", ")", "in", "enumerate", "(", "zip", "(", "nlayers", ",", "nlayers", "[", "1", ":", "]", ")", ")", ":", "\n", "                ", "fc_before_conv", ".", "append", "(", "nn", ".", "Linear", "(", "chin", ",", "chout", ")", ")", "\n", "if", "i", "!=", "len", "(", "nlayers", ")", "-", "2", ":", "\n", "# last mlp layer is linear", "\n", "                    ", "fc_before_conv", ".", "append", "(", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "", "self", ".", "fc_before_conv", "=", "nn", ".", "Sequential", "(", "*", "fc_before_conv", ")", "\n", "gconv_channels", "=", "[", "gconv_channels", "[", "0", "]", ",", "*", "gconv_channels", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc_before_conv", "=", "None", "\n", "gconv_channels", "=", "[", "512", ",", "*", "gconv_channels", "]", "\n", "\n", "", "n_homogeneous_per_layer", "=", "np", ".", "array", "(", "\n", "[", "n_homogeneous", "for", "_", "in", "gconv_channels", "]", ")", "\n", "support_per_layer", "=", "[", "gconv_support", "for", "_", "in", "gconv_channels", "]", "\n", "if", "not", "full_homogeneous", "and", "n_homogeneous", ">", "0", ":", "\n", "            ", "n_homogeneous_per_layer", "[", "1", ":", "]", "=", "0", "\n", "support_per_layer", "[", "0", "]", "=", "None", "\n", "", "self", ".", "gc_layers", "=", "[", "GroupConvBlock", "(", "chin", ",", "chout", ",", "\n", "init", "=", "'he'", ",", "\n", "n_elements", "=", "n_group_elements", ",", "\n", "n_homogeneous", "=", "nh", ",", "\n", "use_bn", "=", "bn_after_gconv", ",", "\n", "activation", "=", "gconv_activation", ",", "\n", "support", "=", "sup", ",", "\n", "homogeneous_output", "=", "full_homogeneous", ")", "\n", "for", "chin", ",", "chout", ",", "nh", ",", "sup", "in", "zip", "(", "gconv_channels", ",", "\n", "gconv_channels", "[", "1", ":", "]", ",", "\n", "n_homogeneous_per_layer", ",", "\n", "support_per_layer", ")", "]", "\n", "self", ".", "gconv", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "gc_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.ResNetMVGCNN._make_layer": [[236, 254], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "circpad", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "\n", "circpad", "=", "circpad", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "circpad", "=", "circpad", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.ResNetMVGCNN.forward": [[255, 315], ["get_pool_fn.view", "models.ResNetMVGCNN.conv1", "models.ResNetMVGCNN.bn1", "models.ResNetMVGCNN.relu", "models.ResNetMVGCNN.maxpool", "models.ResNetMVGCNN.layer1", "models.ResNetMVGCNN.layer2", "models.ResNetMVGCNN.layer3", "models.ResNetMVGCNN.layer4", "models.ResNetMVGCNN.avgpool", "get_pool_fn.view", "get_pool_fn.transpose().unsqueeze", "models.ResNetMVGCNN.initial_group", "models.get_pool_fn", "numpy.random.randint", "numpy.random.choice", "models.ResNetMVGCNN.circpad3", "models.ResNetMVGCNN.circpad1", "models.ResNetMVGCNN.fc_before_conv", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "models.ResNetMVGCNN.gconv", "get_pool_fn.", "models.ResNetMVGCNN.final_descriptor", "models.ResNetMVGCNN.gcnn_fc", "models.ResNetMVGCNN.final_descriptor", "models.ResNetMVGCNN.gcnn_fc", "get_pool_fn.", "get_pool_fn.transpose", "get_pool_fn.", "get_pool_fn.transpose"], "methods", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.get_pool_fn"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "view_dropout", ":", "\n", "            ", "nviews", "=", "x", ".", "shape", "[", "1", "]", "\n", "# number of views to keep", "\n", "nkeep", "=", "np", ".", "random", ".", "randint", "(", "\n", "self", ".", "view_dropout", "[", "0", "]", ",", "self", ".", "view_dropout", "[", "1", "]", ")", "\n", "idx", "=", "np", ".", "random", ".", "choice", "(", "nviews", ",", "nkeep", ",", "replace", "=", "False", ")", "\n", "x", "=", "x", "[", ":", ",", "idx", "]", "\n", "\n", "", "shp", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "(", "shp", "[", "0", "]", "*", "shp", "[", "1", "]", ",", "*", "shp", "[", "2", ":", "]", ")", ")", "\n", "if", "self", ".", "circpad3", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "circpad3", "(", "x", ")", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "self", ".", "circpad1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "circpad1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "if", "self", ".", "fc_before_conv", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "fc_before_conv", "(", "x", "[", "...", ",", "0", ",", "0", "]", ")", "\n", "\n", "# batch, views, ...", "\n", "", "x", "=", "x", ".", "view", "(", "(", "shp", "[", "0", "]", ",", "shp", "[", "1", "]", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "# reintroduce missing views (make their features zero)", "\n", "# TODO: could we use geodesic average instead?", "\n", "if", "self", ".", "view_dropout", ":", "\n", "            ", "new_x", "=", "torch", ".", "zeros", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "nviews", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", ",", "\n", "requires_grad", "=", "False", ",", "\n", "device", "=", "x", ".", "device", ")", "\n", "new_x", "[", ":", ",", "idx", "]", "=", "x", "\n", "x", "=", "new_x", "\n", "\n", "# make (batch, channels, views, 1)", "\n", "", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "x", "=", "self", ".", "initial_group", "(", "x", ")", "\n", "\n", "# apply G-CNN", "\n", "x", "=", "self", ".", "gconv", "(", "x", ")", "[", "...", ",", "0", "]", "\n", "\n", "# final pooling", "\n", "pool_fn", "=", "get_pool_fn", "(", "self", ".", "viewpool", ")", "\n", "if", "'verylate'", "not", "in", "self", ".", "viewpool", ":", "\n", "            ", "x", "=", "pool_fn", "(", "x", ",", "dim", "=", "2", ")", "\n", "x", "=", "self", ".", "final_descriptor", "(", "x", ")", "\n", "x", "=", "self", ".", "gcnn_fc", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_descriptor", "(", "pool_fn", "(", "x", ",", "dim", "=", "2", ")", ")", "\n", "x", "=", "self", ".", "gcnn_fc", "(", "x", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "x", "=", "pool_fn", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.conv3x3": [[16, 20], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "pad", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.get_pool_fn": [[137, 143], ["torch.max", "torch.max", "torch.max"], "function", ["None"], ["", "", "def", "get_pool_fn", "(", "viewpool", ")", ":", "\n", "    ", "assert", "'max'", "in", "viewpool", "or", "'avg'", "in", "viewpool", "\n", "pool_fn", "=", "(", "(", "lambda", "*", "a", ",", "**", "kwa", ":", "torch", ".", "max", "(", "*", "a", ",", "**", "kwa", ")", "[", "0", "]", ")", "\n", "if", "'max'", "in", "viewpool", "\n", "else", "torch", ".", "mean", ")", "\n", "return", "pool_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.resnet_pretrained": [[317, 326], ["torch.load_url", "model.state_dict", "print", "model.state_dict.update", "model.load_state_dict", "model_zoo.load_url.items", "len"], "function", ["None"], ["", "", "def", "resnet_pretrained", "(", "model", ",", "depth", ")", ":", "\n", "    ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "f'resnet{depth}'", "]", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "k", "in", "model_dict", "and", "v", ".", "shape", "==", "model_dict", "[", "k", "]", ".", "shape", "}", "\n", "print", "(", "'Loading {} inputs from pretrained model...'", "\n", ".", "format", "(", "len", "(", "pretrained_dict", ")", ")", ")", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.resnet18mvgcnn": [[328, 331], ["models.resnet_mvgcnn"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.resnet_mvgcnn"], ["", "def", "resnet18mvgcnn", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a MVGCNN based on ResNet-18 model.\"\"\"", "\n", "return", "resnet_mvgcnn", "(", "18", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.resnet_mvgcnn": [[333, 350], ["models.ResNetMVGCNN", "torch.load_url", "ResNetMVGCNN.state_dict", "print", "model.state_dict.update", "ResNetMVGCNN.load_state_dict", "model_zoo.load_url.items", "len"], "function", ["None"], ["", "def", "resnet_mvgcnn", "(", "depth", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a MVGCNN based on ResNet-18 model.\"\"\"", "\n", "model", "=", "ResNetMVGCNN", "(", "BasicBlock", ",", "\n", "resnet_layers", "[", "depth", "]", ",", "\n", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "\n", "model_urls", "[", "'resnet{}'", ".", "format", "(", "depth", ")", "]", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "\n", "if", "k", "in", "model_dict", "and", "v", ".", "shape", "==", "model_dict", "[", "k", "]", ".", "shape", "}", "\n", "print", "(", "'Loading {} inputs from pretrained model...'", "\n", ".", "format", "(", "len", "(", "pretrained_dict", ")", ")", ")", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.logger.Logger.__init__": [[13, 16], ["tensorflow.summary.FileWriter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ")", ":", "\n", "        ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.logger.Logger.scalar_summary": [[17, 21], ["tensorflow.Summary", "logger.Logger.writer.add_summary", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.logger.Logger.image_summary": [[22, 44], ["enumerate", "tensorflow.Summary", "logger.Logger.writer.add_summary", "scipy.misc.toimage().save", "tensorflow.Summary.Image", "img_summaries.append", "StringIO", "tensorflow.Summary.Value", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue"], "methods", ["None"], ["", "def", "image_summary", "(", "self", ",", "tag", ",", "images", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a list of images.\"\"\"", "\n", "\n", "img_summaries", "=", "[", "]", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "# Write the image to a string", "\n", "            ", "try", ":", "\n", "                ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "                ", "s", "=", "BytesIO", "(", ")", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "img", ")", ".", "save", "(", "s", ",", "format", "=", "\"png\"", ")", "\n", "\n", "# Create an Image object", "\n", "img_sum", "=", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", ",", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'%s/%d'", "%", "(", "tag", ",", "i", ")", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.logger.Logger.histo_summary": [[45, 72], ["numpy.histogram", "tensorflow.HistogramProto", "float", "float", "int", "float", "float", "tensorflow.Summary", "logger.Logger.writer.add_summary", "logger.Logger.writer.flush", "numpy.min", "numpy.max", "numpy.prod", "numpy.sum", "numpy.sum", "tensorflow.HistogramProto.bucket_limit.append", "tensorflow.HistogramProto.bucket.append", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "histo_summary", "(", "self", ",", "tag", ",", "values", ",", "step", ",", "bins", "=", "40", ")", ":", "\n", "        ", "\"\"\"Log a histogram of the tensor of values.\"\"\"", "\n", "\n", "# Create a histogram using numpy", "\n", "counts", ",", "bin_edges", "=", "np", ".", "histogram", "(", "values", ",", "bins", "=", "bins", ")", "\n", "\n", "# Fill the fields of the histogram proto", "\n", "hist", "=", "tf", ".", "HistogramProto", "(", ")", "\n", "hist", ".", "min", "=", "float", "(", "np", ".", "min", "(", "values", ")", ")", "\n", "hist", ".", "max", "=", "float", "(", "np", ".", "max", "(", "values", ")", ")", "\n", "hist", ".", "num", "=", "int", "(", "np", ".", "prod", "(", "values", ".", "shape", ")", ")", "\n", "hist", ".", "sum", "=", "float", "(", "np", ".", "sum", "(", "values", ")", ")", "\n", "hist", ".", "sum_squares", "=", "float", "(", "np", ".", "sum", "(", "values", "**", "2", ")", ")", "\n", "\n", "# Drop the start of the first bin", "\n", "bin_edges", "=", "bin_edges", "[", "1", ":", "]", "\n", "\n", "# Add bin edges and counts", "\n", "for", "edge", "in", "bin_edges", ":", "\n", "            ", "hist", ".", "bucket_limit", ".", "append", "(", "edge", ")", "\n", "", "for", "c", "in", "counts", ":", "\n", "            ", "hist", ".", "bucket", ".", "append", "(", "c", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "histo", "=", "hist", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.LMDBMultiView._augment": [[52, 68], ["numpy.random.uniform", "x.clip().astype.clip().astype.mean", "x.clip().astype.clip().astype.clip().astype", "x.clip().astype.clip().astype.clip"], "methods", ["None"], ["    ", "def", "_augment", "(", "x", ")", ":", "\n", "# brighness / contrast / noise", "\n", "        ", "factors", "=", "np", ".", "random", ".", "uniform", "(", "0.6", ",", "1.4", ",", "2", ")", "\n", "# contrast", "\n", "mean", "=", "x", ".", "mean", "(", ")", "\n", "x", "=", "(", "x", "-", "mean", ")", "*", "factors", "[", "0", "]", "+", "mean", "\n", "# brightness", "\n", "x", "=", "x", "*", "factors", "[", "1", "]", "\n", "# Gaussian noise sigma=0.1 (seems to hurt val performance)", "\n", "# x += np.random.randn(*x.shape) * 0.1 * 255", "\n", "# TODO: add jpeg compression (40-100)?", "\n", "# TODO: add small affine transforms?", "\n", "\n", "x", "=", "x", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.LMDBMultiView.load": [[69, 144], ["cv2.imdecode", "numpy.split", "numpy.stack", "re.match", "custom_dataset.LMDBMultiView.filter_classes.index", "any", "re.match.groups", "print", "int", "len", "len", "custom_dataset.autocrop", "out.append", "numpy.log", "cv2.logPolar", "pathlib.Path", "cv2.resize", "cv2.linearPolar", "numpy.sqrt", "numpy.sqrt", "len"], "methods", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.autocrop"], ["", "def", "load", "(", "self", ",", "xs", ")", ":", "\n", "        ", "if", "self", ".", "filter_classes", ":", "\n", "            ", "if", "not", "any", "(", "[", "c", "in", "xs", "[", "-", "1", "]", "for", "c", "in", "self", ".", "filter_classes", "]", ")", ":", "\n", "# print('removing ' + xs[-1])", "\n", "                ", "return", "None", "\n", "\n", "", "", "fname", "=", "xs", "[", "-", "1", "]", "\n", "\n", "if", "self", ".", "filter_ids", "or", "self", ".", "filter_classes", ":", "\n", "            ", "match", "=", "re", ".", "match", "(", "'(.*)_(\\d\\d\\d\\d).*'", ",", "Path", "(", "fname", ")", ".", "name", ")", "\n", "if", "match", ":", "\n", "                ", "cls", ",", "id", "=", "match", ".", "groups", "(", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Warning! could not match class and id!'", ")", "\n", "cls", ",", "id", "=", "self", ".", "filter_classes", "[", "0", "]", ",", "0", "\n", "\n", "", "", "if", "self", ".", "filter_ids", ":", "\n", "            ", "if", "int", "(", "id", ")", ">", "self", ".", "filter_ids", "[", "cls", "]", ":", "\n", "                ", "return", "None", "\n", "\n", "", "", "label", "=", "xs", "[", "-", "2", "]", "\n", "if", "self", ".", "label_to0idx", ":", "\n", "            ", "label", "-=", "1", "\n", "# adjust label", "\n", "", "if", "self", ".", "filter_classes", ":", "\n", "            ", "label", "=", "self", ".", "filter_classes", ".", "index", "(", "cls", ")", "\n", "\n", "# this is when we have n encoded views", "\n", "# xs = np.stack([cv2.imdecode(x, cv2.IMREAD_GRAYSCALE)", "\n", "#                for x in xs[:-2]])", "\n", "# and this when we have a single encoding for all views (faster)", "\n", "", "flag", "=", "cv2", ".", "IMREAD_COLOR", "if", "self", ".", "rgb", "else", "cv2", ".", "IMREAD_GRAYSCALE", "\n", "x", "=", "cv2", ".", "imdecode", "(", "xs", "[", "0", "]", ",", "flag", ")", "\n", "xs", "=", "np", ".", "split", "(", "x", ",", "x", ".", "shape", "[", "1", "]", "//", "x", ".", "shape", "[", "0", "]", ",", "axis", "=", "1", ")", "\n", "\n", "if", "self", ".", "filter_views", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "xs", ")", "==", "len", "(", "self", ".", "filter_views", ")", ":", "\n", "# upright datasets correspond to views given by this constant", "\n", "                ", "xs", "=", "[", "xs", "[", "i", "]", "for", "i", "in", "cts", ".", "upright_to_homogeneous", "[", "len", "(", "xs", ")", "]", "]", "\n", "", "else", ":", "\n", "                ", "xs", "=", "[", "xs", "[", "i", "]", "for", "i", "in", "self", ".", "filter_views", "]", "\n", "\n", "", "", "if", "self", ".", "autocrop", ":", "\n", "            ", "xs", "=", "[", "autocrop", "(", "x", ",", "self", ".", "keep_aspect_ratio", ")", "for", "x", "in", "xs", "]", "\n", "\n", "", "if", "self", ".", "force_res", ">", "0", ":", "\n", "            ", "out", "=", "[", "]", "\n", "res", "=", "self", ".", "force_res", "\n", "for", "x", "in", "xs", ":", "\n", "                ", "h", ",", "w", "=", "x", ".", "shape", "\n", "if", "(", "h", "!=", "res", "or", "w", "!=", "res", ")", ":", "\n", "                    ", "x", "=", "cv2", ".", "resize", "(", "x", ",", "(", "res", ",", "res", ")", ")", "\n", "", "out", ".", "append", "(", "x", ")", "\n", "", "xs", "=", "out", "\n", "\n", "# if we want to augment individual views, add here", "\n", "", "if", "self", ".", "polarmode", "==", "'logpolar'", ":", "\n", "            ", "w", "=", "xs", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "# this will create some dead pixels", "\n", "m", "=", "w", "/", "np", ".", "log", "(", "w", "*", "np", ".", "sqrt", "(", "2", ")", "/", "2", ")", "\n", "# but this may crop parts of the original img:", "\n", "# m = w/np.log(w/2)", "\n", "xs", "=", "[", "cv2", ".", "logPolar", "(", "x", ",", "(", "(", "w", "-", "1.", ")", "/", "2.", ",", "(", "w", "-", "1.", ")", "/", "2.", ")", ",", "m", ",", "\n", "cv2", ".", "INTER_LINEAR", "+", "cv2", ".", "WARP_FILL_OUTLIERS", ")", "\n", "for", "x", "in", "xs", "]", "\n", "", "elif", "self", ".", "polarmode", "==", "'polar'", ":", "\n", "            ", "w", "=", "xs", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "m", "=", "w", "*", "np", ".", "sqrt", "(", "2", ")", "/", "2", "\n", "xs", "=", "[", "cv2", ".", "linearPolar", "(", "x", ",", "(", "(", "w", "-", "1.", ")", "/", "2.", ",", "(", "w", "-", "1.", ")", "/", "2.", ")", ",", "m", ",", "\n", "cv2", ".", "INTER_LINEAR", "+", "cv2", ".", "WARP_FILL_OUTLIERS", ")", "\n", "for", "x", "in", "xs", "]", "\n", "\n", "", "xs", "=", "np", ".", "stack", "(", "xs", ",", "axis", "=", "0", ")", "\n", "\n", "return", "[", "xs", ",", "label", ",", "fname", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.LMDBMultiView.__init__": [[145, 186], ["isinstance", "ds.append", "tensorpack.PrefetchData", "tensorpack.MapData", "tensorpack.BatchData", "tensorpack.LMDBSerializer.load", "tensorpack.LocallyShuffleData", "tensorpack.MapDataComponent", "tensorpack.PrefetchDataZMQ", "ds[].reset_state"], "methods", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.LMDBMultiView.load"], ["", "def", "__init__", "(", "self", ",", "datafile", ",", "batch_size", ",", "\n", "num_workers", "=", "1", ",", "nviews", "=", "12", ",", "reset", "=", "True", ",", "augment", "=", "False", ",", "\n", "filter_classes", "=", "None", ",", "filter_views", "=", "None", ",", "polarmode", "=", "'cartesian'", ",", "\n", "shuffle", "=", "True", ",", "filter_ids", "=", "None", ",", "label_to0idx", "=", "False", ",", "\n", "rgb", "=", "False", ",", "force_res", "=", "0", ",", "autocrop", "=", "False", ",", "keep_aspect_ratio", "=", "False", ")", ":", "\n", "        ", "self", ".", "filter_classes", "=", "filter_classes", "\n", "self", ".", "filter_views", "=", "filter_views", "\n", "self", ".", "filter_ids", "=", "filter_ids", "\n", "self", ".", "polarmode", "=", "polarmode", "\n", "self", ".", "label_to0idx", "=", "label_to0idx", "\n", "self", ".", "rgb", "=", "rgb", "\n", "self", ".", "force_res", "=", "force_res", "\n", "self", ".", "autocrop", "=", "autocrop", "\n", "self", ".", "keep_aspect_ratio", "=", "keep_aspect_ratio", "\n", "\n", "if", "not", "isinstance", "(", "datafile", ",", "list", ")", ":", "\n", "            ", "datafile", "=", "[", "datafile", "]", "\n", "\n", "", "ds", "=", "[", "]", "\n", "for", "d", "in", "datafile", ":", "\n", "            ", "ds", ".", "append", "(", "df", ".", "LMDBSerializer", ".", "load", "(", "d", ",", "shuffle", "=", "shuffle", ")", ")", "\n", "if", "shuffle", ":", "\n", "                ", "ds", "[", "-", "1", "]", "=", "df", ".", "LocallyShuffleData", "(", "ds", "[", "-", "1", "]", ",", "100", ")", "\n", "", "ds", "[", "-", "1", "]", "=", "df", ".", "PrefetchData", "(", "ds", "[", "-", "1", "]", ",", "20", ",", "1", ")", "\n", "\n", "ds", "[", "-", "1", "]", "=", "df", ".", "MapData", "(", "ds", "[", "-", "1", "]", ",", "self", ".", "load", ")", "\n", "if", "augment", ":", "\n", "                ", "ds", "[", "-", "1", "]", "=", "df", ".", "MapDataComponent", "(", "ds", "[", "-", "1", "]", ",", "LMDBMultiView", ".", "_augment", ",", "0", ")", "\n", "\n", "", "if", "(", "not", "filter_classes", "and", "\n", "not", "filter_ids", "and", "\n", "num_workers", ">", "1", ")", ":", "\n", "# warning: skipping this is slower when filtering datasets", "\n", "#          but epoch counting will be wrong otherwise", "\n", "                ", "ds", "[", "-", "1", "]", "=", "df", ".", "PrefetchDataZMQ", "(", "ds", "[", "-", "1", "]", ",", "num_workers", ")", "\n", "", "ds", "[", "-", "1", "]", "=", "df", ".", "BatchData", "(", "ds", "[", "-", "1", "]", ",", "batch_size", ")", "\n", "\n", "if", "reset", ":", "\n", "                ", "ds", "[", "-", "1", "]", ".", "reset_state", "(", ")", "\n", "\n", "", "", "self", ".", "ds", "=", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.LMDBMultiView.__iter__": [[187, 194], ["time.perf_counter", "time.perf_counter", "time.perf_counter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "t0", "=", "time", ".", "perf_counter", "(", ")", "\n", "for", "d", "in", "self", ".", "ds", ":", "\n", "            ", "for", "e", "in", "d", ":", "\n", "                ", "t", "=", "time", ".", "perf_counter", "(", ")", "-", "t0", "\n", "t0", "=", "time", ".", "perf_counter", "(", ")", "\n", "yield", "[", "*", "e", ",", "t", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.LMDBMultiView.__len__": [[195, 197], ["sum", "len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "[", "len", "(", "d", ")", "for", "d", "in", "self", ".", "ds", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.find_classes": [[13, 22], ["classes.sort", "os.listdir", "os.path.isdir", "range", "os.path.join", "len"], "function", ["None"], ["def", "find_classes", "(", "dir", ",", "filter_classes", "=", "None", ")", ":", "\n", "    ", "classes", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "dir", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "d", ")", ")", "]", "\n", "if", "filter_classes", ":", "\n", "        ", "classes", "=", "[", "c", "for", "c", "in", "classes", "if", "c", "in", "filter_classes", "]", "\n", "", "classes", ".", "sort", "(", ")", "\n", "class_to_idx", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "\n", "return", "classes", ",", "class_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.autocrop": [[24, 49], ["numpy.where", "numpy.where", "print", "len", "len", "min", "max", "min", "max", "im.max", "im.max", "int", "int", "max", "min", "max", "min", "numpy.floor", "numpy.ceil", "int", "int", "numpy.floor", "numpy.ceil"], "function", ["None"], ["", "def", "autocrop", "(", "im", ",", "keep_aspect_ratio", "=", "False", ")", ":", "\n", "    ", "cols", "=", "np", ".", "where", "(", "im", ".", "max", "(", "axis", "=", "0", ")", ">", "0", ")", "[", "0", "]", "\n", "rows", "=", "np", ".", "where", "(", "im", ".", "max", "(", "axis", "=", "1", ")", ">", "0", ")", "[", "0", "]", "\n", "if", "len", "(", "cols", ")", "==", "0", "or", "len", "(", "rows", ")", "==", "0", ":", "\n", "        ", "print", "(", "'WARNING! zero img detected!'", ")", "\n", "return", "im", "\n", "", "else", ":", "\n", "        ", "crop", "=", "(", "min", "(", "rows", ")", ",", "max", "(", "rows", ")", ",", "\n", "min", "(", "cols", ")", ",", "max", "(", "cols", ")", ")", "\n", "if", "keep_aspect_ratio", ":", "\n", "            ", "y0", ",", "y1", ",", "x0", ",", "x1", "=", "crop", "\n", "h", ",", "w", "=", "y1", "-", "y0", ",", "x1", "-", "x0", "\n", "if", "h", ">", "w", ":", "\n", "                ", "d", "=", "(", "h", "-", "w", ")", "/", "2", "\n", "x0", "-=", "int", "(", "np", ".", "floor", "(", "d", ")", ")", "\n", "x1", "+=", "int", "(", "np", ".", "ceil", "(", "d", ")", ")", "\n", "", "elif", "h", "<", "w", ":", "\n", "                ", "d", "=", "(", "w", "-", "h", ")", "/", "2", "\n", "y0", "-=", "int", "(", "np", ".", "floor", "(", "d", ")", ")", "\n", "y1", "+=", "int", "(", "np", ".", "ceil", "(", "d", ")", ")", "\n", "", "h", ",", "w", "=", "im", ".", "shape", "[", ":", "2", "]", "\n", "crop", "=", "(", "max", "(", "0", ",", "y0", ")", ",", "min", "(", "h", "-", "1", ",", "y1", ")", ",", "\n", "max", "(", "0", ",", "x0", ")", ",", "min", "(", "w", "-", "1", ",", "x1", ")", ")", "\n", "\n", "", "return", "im", "[", "crop", "[", "0", "]", ":", "crop", "[", "1", "]", "+", "1", ",", "crop", "[", "2", "]", ":", "crop", "[", "3", "]", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.load_data": [[199, 212], ["args.data.endswith", "custom_dataset.load_data_lmdb", "tensorpack.FakeData", "tensorpack.FakeData", "df.FakeData.reset_state", "df.FakeData.reset_state", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.load_data_lmdb"], ["", "", "def", "load_data", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "data", ".", "endswith", "(", "'.lmdb'", ")", ":", "\n", "        ", "return", "load_data_lmdb", "(", "args", ")", "\n", "", "elif", "args", ".", "data", "==", "'fake'", ":", "\n", "        ", "nviews", "=", "args", ".", "n_homogeneous", "if", "args", ".", "n_homogeneous", "else", "args", ".", "n_group_elements", "\n", "imshape", "=", "(", "args", ".", "batch_size", ",", "nviews", ",", "224", ",", "224", ")", "\n", "train_loader", "=", "df", ".", "FakeData", "(", "(", "imshape", ",", "[", "args", ".", "batch_size", "]", ",", "[", "1", "]", ",", "[", "1", "]", ")", ",", "\n", "dtype", "=", "(", "'uint8'", ",", "'int64'", ",", "'str'", ",", "'float32'", ")", ")", "\n", "test_loader", "=", "df", ".", "FakeData", "(", "(", "imshape", ",", "[", "args", ".", "batch_size", "]", ",", "[", "1", "]", ",", "[", "1", "]", ")", ",", "\n", "dtype", "=", "(", "'uint8'", ",", "'int64'", ",", "'str'", ",", "'float32'", ")", ")", "\n", "train_loader", ".", "reset_state", "(", ")", "\n", "test_loader", ".", "reset_state", "(", ")", "\n", "return", "(", "train_loader", ",", "test_loader", ",", "np", ".", "arange", "(", "40", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.get_lmdb_properties": [[214, 226], ["tensorpack.LMDBSerializer.load", "df.LMDBSerializer.load.reset_state", "numpy.unique", "args.data.format", "labels.append", "len"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.LMDBMultiView.load"], ["", "", "def", "get_lmdb_properties", "(", "args", ")", ":", "\n", "    ", "ds", "=", "df", ".", "LMDBSerializer", ".", "load", "(", "args", ".", "data", ".", "format", "(", "'test'", ")", ",", "\n", "shuffle", "=", "False", ")", "\n", "ds", ".", "reset_state", "(", ")", "\n", "labels", "=", "[", "]", "\n", "for", "d", "in", "ds", ":", "\n", "        ", "labels", ".", "append", "(", "d", "[", "-", "2", "]", ")", "\n", "# component -2 is label, -1 is fname", "\n", "", "classes", "=", "np", ".", "unique", "(", "labels", ")", "\n", "nviews", "=", "len", "(", "d", ")", "-", "2", "\n", "\n", "return", "classes", ",", "nviews", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.get_filtered_views": [[228, 238], ["None"], "function", ["None"], ["", "def", "get_filtered_views", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "n_homogeneous", ">", "0", ":", "\n", "        ", "filter_views", "=", "(", "cts", ".", "homogeneous_tables", "\n", "[", "args", ".", "n_group_elements", "]", "\n", "[", "args", ".", "n_homogeneous", "]", "\n", "[", "'ids'", "]", ")", "\n", "", "else", ":", "\n", "        ", "filter_views", "=", "None", "\n", "\n", "", "return", "filter_views", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.load_data_lmdb": [[240, 296], ["custom_dataset.get_lmdb_properties", "print", "custom_dataset.get_filtered_views", "custom_dataset.LMDBMultiView", "custom_dataset.LMDBMultiView", "np.arange.min", "print", "numpy.arange", "args.data.format", "args.data.format", "len", "len", "args.data.format", "args.data.format"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.get_lmdb_properties", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.get_filtered_views"], ["", "def", "load_data_lmdb", "(", "args", ")", ":", "\n", "    ", "classes", ",", "nviews", "=", "get_lmdb_properties", "(", "args", ")", "\n", "if", "classes", ".", "min", "(", ")", "==", "1", ":", "\n", "        ", "print", "(", "'No 0 class detected! Subtracting 1 from labels!'", ")", "\n", "classes", "-=", "1", "\n", "label_to0idx", "=", "True", "\n", "assert", "not", "args", ".", "filter_classes", "\n", "", "else", ":", "\n", "        ", "label_to0idx", "=", "False", "\n", "\n", "", "if", "args", ".", "filter_classes", ":", "\n", "        ", "classes", "=", "np", ".", "arange", "(", "len", "(", "args", ".", "filter_classes", ")", ")", "\n", "", "print", "(", "'Classes={:d}, Views={:d}'", ".", "format", "(", "len", "(", "classes", ")", ",", "nviews", ")", ")", "\n", "\n", "filter_views", "=", "get_filtered_views", "(", "args", ")", "\n", "filter_ids", "=", "{", "}", "\n", "for", "m", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "        ", "filter_ids", "[", "m", "]", "=", "cts", ".", "modelnet_subset", "[", "m", "]", "if", "args", ".", "modelnet_subset", "else", "None", "\n", "\n", "", "traindata", "=", "(", "[", "args", ".", "data", ".", "format", "(", "'train'", ")", ",", "args", ".", "data", ".", "format", "(", "'val'", ")", "]", "\n", "if", "args", ".", "combine_train_val", "\n", "else", "args", ".", "data", ".", "format", "(", "'train'", ")", ")", "\n", "train_loader", "=", "LMDBMultiView", "(", "traindata", ",", "\n", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "8", ",", "\n", "nviews", "=", "nviews", ",", "\n", "augment", "=", "args", ".", "augment", ",", "\n", "filter_classes", "=", "args", ".", "filter_classes", ",", "\n", "filter_views", "=", "filter_views", ",", "\n", "polarmode", "=", "args", ".", "polarmode", ",", "\n", "shuffle", "=", "True", ",", "\n", "filter_ids", "=", "filter_ids", "[", "'train'", "]", ",", "\n", "label_to0idx", "=", "label_to0idx", ",", "\n", "rgb", "=", "args", ".", "rgb", ",", "\n", "force_res", "=", "args", ".", "force_res", ",", "\n", "autocrop", "=", "args", ".", "autocrop", ",", "\n", "keep_aspect_ratio", "=", "args", ".", "keep_aspect_ratio", ")", "\n", "test_loader", "=", "LMDBMultiView", "(", "args", ".", "data", ".", "format", "(", "'test'", ")", ",", "\n", "# WARNING! we halve the batch size so eval", "\n", "# can run on Titan Z", "\n", "args", ".", "batch_size", "//", "2", ",", "\n", "num_workers", "=", "1", ",", "\n", "nviews", "=", "nviews", ",", "\n", "augment", "=", "False", ",", "\n", "filter_classes", "=", "args", ".", "filter_classes", ",", "\n", "filter_views", "=", "filter_views", ",", "\n", "polarmode", "=", "args", ".", "polarmode", ",", "\n", "shuffle", "=", "False", ",", "\n", "filter_ids", "=", "filter_ids", "[", "'test'", "]", ",", "\n", "label_to0idx", "=", "label_to0idx", ",", "\n", "rgb", "=", "args", ".", "rgb", ",", "\n", "force_res", "=", "args", ".", "force_res", ",", "\n", "autocrop", "=", "args", ".", "autocrop", ",", "\n", "keep_aspect_ratio", "=", "args", ".", "keep_aspect_ratio", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", ",", "classes", "\n", "", ""]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.load_model": [[189, 208], ["models.resnet_mvgcnn", "logger.info", "len"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.models.resnet_mvgcnn"], ["def", "load_model", "(", "classes", ")", ":", "\n", "    ", "model", "=", "models", ".", "resnet_mvgcnn", "(", "args", ".", "depth", ",", "\n", "pretrained", "=", "args", ".", "pretrained", ",", "\n", "num_classes", "=", "len", "(", "classes", ")", ",", "\n", "gconv_channels", "=", "args", ".", "gconv_channels", ",", "\n", "view_dropout", "=", "args", ".", "view_dropout", ",", "\n", "n_group_elements", "=", "args", ".", "n_group_elements", ",", "\n", "n_homogeneous", "=", "args", ".", "n_homogeneous", ",", "\n", "bn_after_gconv", "=", "args", ".", "bn_after_gconv", ",", "\n", "gconv_activation", "=", "ACTIVATIONS", "[", "args", ".", "gconv_activation", "]", ",", "\n", "gconv_support", "=", "args", ".", "gconv_support", ",", "\n", "viewpool", "=", "args", ".", "viewpool", ",", "\n", "n_fc_before_gconv", "=", "args", ".", "n_fc_before_gconv", ",", "\n", "circpad", "=", "args", ".", "circpad", ",", "\n", "full_homogeneous", "=", "not", "args", ".", "homogeneous_only1st", ")", "\n", "\n", "logger", ".", "info", "(", "'Loaded model...'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.load_checkpoint": [[211, 229], ["torch.load", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "dict", "os.path.isfile", "logger.info", "optimizer.load_state_dict", "logger.info", "torch.load.get"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.LMDBMultiView.load", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.LMDBMultiView.load", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.LMDBMultiView.load", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.LMDBMultiView.load"], ["", "def", "load_checkpoint", "(", "strdir", ",", "model", ",", "optimizer", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isfile", "(", "strdir", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'WARNING: no checkpoint file found! starting from scratch'", ")", "\n", "return", "\n", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "strdir", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "strict", "=", "True", ")", "\n", "try", ":", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "logger", ".", "info", "(", "'Warning! could not load optimizer state; this may happen when warm_starting from different model'", ")", "\n", "\n", "", "train_state", "=", "dict", "(", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", ",", "\n", "lr", "=", "checkpoint", "[", "'lr'", "]", ",", "\n", "step", "=", "checkpoint", "[", "'step'", "]", ",", "\n", "steps_epoch", "=", "checkpoint", ".", "get", "(", "'steps_epoch'", ",", "0", ")", ")", "\n", "\n", "return", "train_state", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.np2tensor": [[231, 242], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy.pin_memory", "torch.from_numpy.cuda"], "function", ["None"], ["", "def", "np2tensor", "(", "x", ",", "device", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", "\n", "", "except", "TypeError", ":", "\n", "# already a Tensor", "\n", "        ", "pass", "\n", "", "if", "not", "args", ".", "cpu", ":", "\n", "        ", "x", ".", "pin_memory", "(", ")", "\n", "return", "x", ".", "cuda", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.load_inputs_targets": [[249, 269], ["args.data.endswith", "m40_mean[].to", "m40_std[].to", "targets.long.long", "train.np2tensor", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.stack.float", "torch.stack.transpose().transpose", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.stack.transpose"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.np2tensor"], ["def", "load_inputs_targets", "(", "inputs", ",", "targets", ",", "device", ")", ":", "\n", "# CHECKME! not sure if this is the most efficient way", "\n", "    ", "inputs", ",", "targets", "=", "[", "np2tensor", "(", "i", ",", "device", ")", "for", "i", "in", "[", "inputs", ",", "targets", "]", "]", "\n", "# dims: batch, views, channels, rows, cols", "\n", "# gray to RGB (TODO: this should be weighted)", "\n", "# lmdb datasets are 1 channel", "\n", "if", "args", ".", "data", ".", "endswith", "(", "'.lmdb'", ")", ":", "# and inputs.shape[-3] != 3:", "\n", "        ", "if", "inputs", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "\n", "            ", "inputs", "=", "inputs", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "torch", ".", "stack", "(", "[", "inputs", ",", "inputs", ",", "inputs", "]", ",", "dim", "=", "-", "3", ")", "\n", "", "", "else", ":", "\n", "        ", "inputs", "=", "torch", ".", "transpose", "(", "torch", ".", "transpose", "(", "inputs", ",", "-", "1", ",", "-", "2", ")", ",", "-", "2", ",", "-", "3", ")", "\n", "", "inputs", "=", "inputs", ".", "float", "(", ")", "/", "255.", "\n", "# TODO: change this for matterport!!!", "\n", "inputs", "-=", "m40_mean", "[", ":", ",", "None", ",", "None", "]", ".", "to", "(", "device", ")", "\n", "inputs", "/=", "m40_std", "[", ":", ",", "None", ",", "None", "]", ".", "to", "(", "device", ")", "\n", "targets", "=", "targets", ".", "long", "(", ")", "\n", "\n", "return", "inputs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.smooth_labels": [[271, 281], ["torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda.fill_", "torch.FloatTensor().cuda.scatter_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "def", "smooth_labels", "(", "targets", ",", "device", ")", ":", "\n", "# TODO! take n_classes as arg!", "\n", "    ", "n_classes", "=", "40", "\n", "y_onehot", "=", "(", "torch", ".", "FloatTensor", "(", "targets", ".", "shape", "[", "0", "]", ",", "n_classes", ")", "\n", ".", "cuda", "(", "device", ",", "non_blocking", "=", "True", ")", ")", "\n", "y_onehot", ".", "fill_", "(", "args", ".", "label_smoothing", "/", "(", "n_classes", "-", "1.", ")", ")", "\n", "onehot_targets", "=", "y_onehot", ".", "scatter_", "(", "1", ",", "targets", "[", ":", ",", "None", "]", ",", "\n", "1", "-", "args", ".", "label_smoothing", ")", "\n", "\n", "return", "onehot_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.compute_triplet_loss": [[283, 315], ["torch.normalize", "targets.cpu().numpy", "zip", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "set", "numpy.stack", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "e.detach", "targets.cpu", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "numpy.arange", "torch.max", "torch.max", "torch.max", "torch.max", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "list", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.min", "torch.min", "torch.min", "torch.min", "NotImplementedError", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "sorted", "samples.items", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "compute_triplet_loss", "(", "embeddings", ",", "targets", ",", "samples", ",", "margin", "=", "0.2", ",", "mode", "=", "'hardest'", ",", "n_classes", "=", "None", ")", ":", "\n", "    ", "embeddings", "=", "F", ".", "normalize", "(", "embeddings", ",", "dim", "=", "1", ")", "\n", "cpu_targets", "=", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "len", "(", "samples", ")", "<", "n_classes", ":", "\n", "        ", "loss", "=", "0", "\n", "", "else", ":", "\n", "# compute pairwise cosine distances", "\n", "        ", "sample_matrix", "=", "torch", ".", "stack", "(", "[", "v", "for", "k", ",", "v", "in", "sorted", "(", "samples", ".", "items", "(", ")", ")", "]", ")", "\n", "dists", "=", "1", "-", "(", "embeddings", "@", "torch", ".", "transpose", "(", "sample_matrix", ",", "1", ",", "0", ")", ")", "\n", "positive", "=", "torch", ".", "gather", "(", "dists", ",", "dim", "=", "1", ",", "index", "=", "targets", "[", ":", ",", "None", "]", ")", "[", ":", ",", "0", "]", "\n", "\n", "# TODO: can we do this using Tensors?", "\n", "cls", "=", "set", "(", "np", ".", "arange", "(", "n_classes", ")", ")", "\n", "complement", "=", "np", ".", "stack", "(", "[", "list", "(", "cls", "-", "{", "t", "}", ")", "for", "t", "in", "cpu_targets", "]", ")", "\n", "negative", "=", "torch", ".", "gather", "(", "dists", ",", "\n", "dim", "=", "1", ",", "\n", "index", "=", "torch", ".", "from_numpy", "(", "complement", ")", ".", "to", "(", "dists", ".", "device", ")", ")", "\n", "if", "mode", "==", "'hardest'", ":", "\n", "# hardest sample: min dist from wrong class", "\n", "            ", "negative", "=", "torch", ".", "min", "(", "negative", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "elif", "mode", "==", "'semi-hard'", ":", "\n", "# semi-hard: wrong class but closer than 'positive'", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "max", "(", "positive", "-", "negative", "+", "margin", ",", "\n", "torch", ".", "zeros_like", "(", "positive", ")", ")", ")", "\n", "\n", "# update samples", "\n", "", "for", "e", ",", "t", "in", "zip", "(", "embeddings", ",", "cpu_targets", ")", ":", "\n", "        ", "samples", "[", "t", "]", "=", "e", ".", "detach", "(", ")", "\n", "\n", "", "return", "loss", ",", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.train": [[317, 386], ["len", "time.perf_counter", "enumerate", "time.perf_counter", "train.load_inputs_targets", "model", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "torch.argmax().cpu", "time.perf_counter", "train.smooth_labels", "criterion", "criterion", "train.compute_triplet_loss", "time.perf_counter", "targets.size", "train.get_summary_ims", "util.logStep", "print", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "len", "numpy.cos", "criterion.item", "numpy.array().mean", "time.perf_counter", "numpy.array", "targets.cpu"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.load_inputs_targets", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.smooth_labels", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.compute_triplet_loss", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.get_summary_ims", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.util.logStep"], ["", "def", "train", "(", "train_loader", ",", "device", ",", "model", ",", "criterion", ",", "optimizer", ",", "summary_writer", ",", "train_state", ",", "n_classes", "=", "None", ")", ":", "\n", "    ", "train_size", "=", "len", "(", "train_loader", ")", "\n", "t_batch", "=", "time", ".", "perf_counter", "(", ")", "\n", "triplet_samples", "=", "{", "}", "\n", "for", "i", ",", "(", "inputs", ",", "targets", ",", "fnames", ",", "tload", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "t0", "=", "time", ".", "perf_counter", "(", ")", "\n", "inputs", ",", "targets", "=", "load_inputs_targets", "(", "inputs", ",", "targets", ",", "device", ")", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "if", "args", ".", "label_smoothing", ">", "0", ":", "\n", "            ", "onehot_targets", "=", "smooth_labels", "(", "targets", ",", "device", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "onehot_targets", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "", "if", "args", ".", "triplet_loss", ":", "\n", "            ", "triplet_loss", ",", "triplet_samples", "=", "compute_triplet_loss", "(", "outputs", ",", "\n", "targets", ",", "\n", "triplet_samples", ",", "\n", "n_classes", "=", "n_classes", ")", "\n", "# TODO: use weights here", "\n", "loss", "+=", "triplet_loss", "\n", "", "else", ":", "\n", "            ", "triplet_loss", "=", "None", "\n", "\n", "# compute gradient and do SGD step", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "elapsed", "=", "time", ".", "perf_counter", "(", ")", "-", "t0", "\n", "\n", "# add summaries", "\n", "pred", "=", "torch", ".", "argmax", "(", "outputs", ".", "data", ",", "1", ")", ".", "cpu", "(", ")", "\n", "acc", "=", "100.", "*", "(", "pred", "==", "targets", ".", "cpu", "(", ")", ")", ".", "sum", "(", ")", ".", "double", "(", ")", "/", "targets", ".", "size", "(", "0", ")", "\n", "ims", "=", "get_summary_ims", "(", "inputs", ")", "if", "train_state", "[", "'step'", "]", "==", "0", "else", "None", "\n", "train_state", "[", "'step'", "]", "+=", "1", "\n", "\n", "if", "not", "args", ".", "nolog", ":", "\n", "            ", "util", ".", "logStep", "(", "summary_writer", ",", "model", ",", "\n", "train_state", "[", "'step'", "]", ",", "\n", "loss", ",", "acc", ",", "train_state", "[", "'lr'", "]", ",", "1.", "/", "elapsed", ",", "\n", "ims", ",", "triplet_loss", "=", "triplet_loss", ")", "\n", "\n", "# update lr if 'cosine' mode", "\n", "", "if", "args", ".", "lr_decay_mode", "==", "'cos'", ":", "\n", "# estimate steps_epoch from first epoch (we may have dropped entries)", "\n", "            ", "steps_epoch", "=", "(", "train_state", "[", "'steps_epoch'", "]", "if", "train_state", "[", "'steps_epoch'", "]", ">", "0", "\n", "else", "len", "(", "train_loader", ")", ")", "\n", "# TODO: there will be a jump here if many entries are dropped", "\n", "#       and we only figure out # of steps after first epoch", "\n", "\n", "if", "train_state", "[", "'step'", "]", "<", "steps_epoch", ":", "\n", "                ", "train_state", "[", "'lr'", "]", "=", "args", ".", "lr", "*", "train_state", "[", "'step'", "]", "/", "steps_epoch", "\n", "", "else", ":", "\n", "                ", "nsteps", "=", "steps_epoch", "*", "args", ".", "epochs", "\n", "train_state", "[", "'lr'", "]", "=", "(", "0.5", "*", "args", ".", "lr", "*", "\n", "(", "1", "+", "np", ".", "cos", "(", "train_state", "[", "'step'", "]", "*", "np", ".", "pi", "/", "nsteps", ")", ")", ")", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "train_state", "[", "'lr'", "]", "\n", "\n", "", "", "if", "(", "i", "+", "1", ")", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "\"\\tIter [%d/%d] Loss: %.4f Time batch: %.4f s; Time GPU %.4f s; Time to load: %.4f s\"", "%", "\n", "(", "i", "+", "1", ",", "train_size", ",", "loss", ".", "item", "(", ")", ",", "\n", "time", ".", "perf_counter", "(", ")", "-", "t_batch", ",", "\n", "elapsed", ",", "\n", "np", ".", "array", "(", "tload", ")", ".", "mean", "(", ")", ")", ")", "\n", "", "t_batch", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "if", "args", ".", "max_steps", ">", "0", "and", "i", ">", "args", ".", "max_steps", ":", "\n", "            ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.save_shrec17_output": [[388, 398], ["os.path.join", "os.makedirs", "open", "zip", "os.path.join", "numpy.argsort", "range", "print"], "function", ["None"], ["", "", "", "def", "save_shrec17_output", "(", "query", ",", "dists", ",", "fnames", ",", "query_lbl", ",", "lbls", ")", ":", "\n", "# WARNING! not too flexible; we assume fixed dset names", "\n", "    ", "outdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "'retrieval'", ",", "args", ".", "retrieval_dir", ")", "\n", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "query", ")", ",", "'w'", ")", "as", "fout", ":", "\n", "# return max. 1000 objects", "\n", "        ", "for", "i", ",", "_", "in", "zip", "(", "np", ".", "argsort", "(", "dists", ")", ",", "range", "(", "1000", ")", ")", ":", "\n", "# only return objs classified as same class as query", "\n", "            ", "if", "lbls", "[", "i", "]", "==", "query_lbl", ":", "\n", "                ", "print", "(", "fnames", "[", "i", "]", ",", "file", "=", "fout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.eval_shrec17_output": [[400, 422], ["basedir.is_dir", "str.is_dir", "os.path.isdir", "str", "os.environ.copy", "subprocess.Popen", "subprocess.Popen.wait", "pd.read_csv", "pathlib.Path", "outdir.split", "os.path.realpath"], "function", ["None"], ["", "", "", "", "def", "eval_shrec17_output", "(", "outdir", ")", ":", "\n", "    ", "basedir", "=", "Path", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ".", "parent", "/", "'..'", "/", "'..'", "\n", "evaldir", "=", "basedir", "/", "'external/shrec17_evaluator'", "\n", "assert", "basedir", ".", "is_dir", "(", ")", "\n", "assert", "evaldir", ".", "is_dir", "(", ")", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "outdir", ")", "\n", "evaldir", "=", "str", "(", "evaldir", ")", "\n", "if", "outdir", "[", "-", "1", "]", "!=", "'/'", ":", "\n", "        ", "outdir", "+=", "'/'", "\n", "# include ~/bin in path", "\n", "", "env", "=", "os", ".", "environ", ".", "copy", "(", ")", "\n", "env", "[", "'PATH'", "]", "=", "'{}/bin:{}'", ".", "format", "(", "env", "[", "'HOME'", "]", ",", "env", "[", "'PATH'", "]", ")", "\n", "p", "=", "subprocess", ".", "Popen", "(", "[", "'node'", ",", "'evaluate.js'", ",", "outdir", "]", ",", "\n", "cwd", "=", "evaldir", ",", "\n", "env", "=", "env", ")", "\n", "p", ".", "wait", "(", ")", "\n", "\n", "import", "pandas", "as", "pd", "\n", "data", "=", "pd", ".", "read_csv", "(", "'{}/{}.summary.csv'", "\n", ".", "format", "(", "evaldir", ",", "outdir", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", ")", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.eval_retrieval": [[424, 464], ["logger.info", "scipy.spatial.distance.squareform", "logger.info", "dict", "zip", "scipy.spatial.distance.pdist", "retrieval_out[].append", "retrieval_out[].get", "[].append", "numpy.mean", "logger.info", "train.eval_shrec17_output", "logger.info", "logger.info", "logger.info", "numpy.mean", "len", "d.copy.copy", "train.save_shrec17_output", "sklearn.metrics.average_precision_score", "retrieval_out[].values", "str", "train.eval_retrieval.totable"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.eval_shrec17_output", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.save_shrec17_output"], ["", "def", "eval_retrieval", "(", "descriptors", ",", "gt_labels", ",", "pred_labels", ",", "fnames", ",", "eval_shrec", "=", "False", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'Evaluating retrieval...'", ")", "\n", "# compute pairwise distances", "\n", "dists", "=", "squareform", "(", "pdist", "(", "descriptors", ",", "'cosine'", ")", ")", "\n", "logger", ".", "info", "(", "'Computed pairwise distances between {} samples'", "\n", ".", "format", "(", "len", "(", "dists", ")", ")", ")", "\n", "fnames", "=", "[", "Path", "(", "f", ")", ".", "parts", "[", "-", "2", "]", "for", "f", "in", "fnames", "]", "\n", "retrieval_out", "=", "dict", "(", "mAP_inst", "=", "[", "]", ",", "mAP_cls", "=", "{", "}", ")", "\n", "for", "d", ",", "c", ",", "l", ",", "f", "in", "zip", "(", "dists", ",", "gt_labels", ",", "pred_labels", ",", "fnames", ")", ":", "\n", "        ", "positive", "=", "gt_labels", "==", "c", "\n", "if", "args", ".", "retrieval_include_same", ":", "\n", "# set dists to 0 of elements from the same class to always return them", "\n", "# TODO: should sort by distance, but it won't affect mAP", "\n", "            ", "d", "=", "d", ".", "copy", "(", ")", "\n", "d", "[", "pred_labels", "==", "c", "]", "=", "0", "\n", "\n", "# save list of retrieved elements in order", "\n", "", "if", "eval_shrec", ":", "\n", "            ", "save_shrec17_output", "(", "f", ",", "d", ",", "fnames", ",", "l", ",", "pred_labels", ")", "\n", "", "score", "=", "100.", "*", "average_precision_score", "(", "positive", ",", "2", "-", "d", ")", "\n", "retrieval_out", "[", "'mAP_inst'", "]", ".", "append", "(", "score", ")", "\n", "retrieval_out", "[", "'mAP_cls'", "]", "[", "c", "]", "=", "retrieval_out", "[", "'mAP_cls'", "]", ".", "get", "(", "c", ",", "[", "]", ")", "\n", "retrieval_out", "[", "'mAP_cls'", "]", "[", "c", "]", ".", "append", "(", "score", ")", "\n", "# retrieval_out['AUC'].append(roc_auc_score(positive, 2-d))", "\n", "# compute per class avg", "\n", "", "retrieval_out", "[", "'mAP_cls'", "]", "=", "[", "np", ".", "mean", "(", "v", ")", "\n", "for", "v", "in", "retrieval_out", "[", "'mAP_cls'", "]", ".", "values", "(", ")", "]", "\n", "\n", "if", "eval_shrec", ":", "\n", "        ", "logger", ".", "info", "(", "'Evaluating SHREC17'", ")", "\n", "out", "=", "eval_shrec17_output", "(", "str", "(", "(", "Path", "(", "args", ".", "logdir", ")", "/", "'retrieval'", ")", "\n", ".", "absolute", "(", ")", ")", ")", "\n", "\n", "def", "totable", "(", "x", ")", ":", "return", "'|{}|{}|'", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "args", ".", "logdir", ")", ",", "\n", "'|'", ".", "join", "(", "[", "str", "(", "xx", ")", "for", "xx", "in", "x", "]", ")", ")", "\n", "logger", ".", "info", "(", "totable", "(", "out", ".", "columns", ")", ")", "\n", "logger", ".", "info", "(", "totable", "(", "out", ".", "values", "[", "0", "]", ")", ")", "\n", "logger", ".", "info", "(", "totable", "(", "out", ".", "values", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "return", "{", "k", ":", "np", ".", "mean", "(", "v", ")", "for", "k", ",", "v", "in", "retrieval_out", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.eval": [[467, 568], ["enumerate", "util.ld2dl", "train.eval._acc"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.util.ld2dl"], ["", "def", "eval", "(", "data_loader", ",", "device", ",", "model", ",", "criterion", ",", "eval_shrec", ")", ":", "\n", "    ", "def", "_acc", "(", "preds", ",", "tgts", ")", ":", "\n", "        ", "return", "100.", "*", "sum", "(", "preds", "==", "tgts", ")", "/", "len", "(", "preds", ")", "\n", "\n", "# introspected features from the model", "\n", "", "introspection", "=", "[", "]", "\n", "# Eval", "\n", "if", "args", ".", "eval_retrieval", ":", "\n", "        ", "def", "hook", "(", "model", ",", "input", ",", "output", ")", ":", "\n", "            ", "introspection", ".", "append", "(", "{", "'descriptor'", ":", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", ")", "\n", "", "model", ".", "final_descriptor", ".", "register_forward_hook", "(", "hook", ")", "\n", "\n", "# save fmaps", "\n", "", "if", "args", ".", "save_fmaps", ":", "\n", "        ", "def", "hook", "(", "model", ",", "input", ",", "output", ")", ":", "\n", "            ", "introspection", ".", "append", "(", "\n", "{", "'initial_group'", ":", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", ")", "\n", "", "model", ".", "initial_group", ".", "register_forward_hook", "(", "hook", ")", "\n", "\n", "def", "hook", "(", "model", ",", "input", ",", "output", ")", ":", "\n", "            ", "introspection", ".", "append", "(", "{", "'fmaps'", ":", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", ")", "\n", "", "for", "l", "in", "model", ".", "gc_layers", ":", "\n", "            ", "l", ".", "register_forward_hook", "(", "hook", ")", "\n", "\n", "", "", "losses", "=", "[", "]", "\n", "preds", "=", "[", "]", "\n", "tgts", "=", "[", "]", "\n", "for", "i", ",", "(", "inputs", ",", "targets", ",", "fnames", ",", "tload", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "load_inputs_targets", "(", "inputs", ",", "targets", ",", "device", ")", "\n", "\n", "# compute output", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "\n", "if", "args", ".", "label_smoothing", ">", "0", ":", "\n", "                ", "onehot_targets", "=", "smooth_labels", "(", "targets", ",", "device", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "onehot_targets", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "\n", "losses", ".", "append", "(", "loss", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "preds", ".", "append", "(", "predicted", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "tgts", ".", "append", "(", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# accumulate descriptors for retrieval", "\n", "if", "args", ".", "eval_retrieval", ":", "\n", "                ", "introspection", "[", "-", "1", "]", "[", "'gt_label'", "]", "=", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "introspection", "[", "-", "1", "]", "[", "'pred_label'", "]", "=", "predicted", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "introspection", "[", "-", "1", "]", "[", "'fname'", "]", "=", "fnames", "\n", "\n", "# these are huge!", "\n", "", "if", "args", ".", "save_fmaps", ":", "\n", "# saving only view 0", "\n", "                ", "introspection", "[", "-", "1", "]", "[", "'inputs'", "]", "=", "inputs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "0", "]", "\n", "\n", "", "", "if", "(", "i", "+", "1", ")", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "\"\\tIter [%d/%d] Loss: %.4f  Acc: %.4f\"", "%", "\n", "(", "i", "+", "1", ",", "\n", "len", "(", "data_loader", ")", ",", "\n", "losses", "[", "-", "1", "]", ",", "\n", "_acc", "(", "preds", "[", "-", "1", "]", ",", "tgts", "[", "-", "1", "]", ")", ")", ")", "\n", "\n", "", "if", "args", ".", "max_steps", ">", "0", "and", "i", ">", "args", ".", "max_steps", ":", "\n", "            ", "break", "\n", "\n", "# save / eval descriptors", "\n", "", "", "retrieval_dict", "=", "util", ".", "ld2dl", "(", "introspection", ")", "\n", "if", "args", ".", "eval_retrieval", ":", "\n", "        ", "retrieval_dict", "=", "{", "k", ":", "np", ".", "concatenate", "(", "v", ")", "\n", "for", "k", ",", "v", "in", "retrieval_dict", ".", "items", "(", ")", "}", "\n", "retrieval_out", "=", "eval_retrieval", "(", "retrieval_dict", "[", "'descriptor'", "]", ",", "\n", "retrieval_dict", "[", "'gt_label'", "]", ",", "\n", "retrieval_dict", "[", "'pred_label'", "]", ",", "\n", "retrieval_dict", "[", "'fname'", "]", ",", "\n", "eval_shrec", ")", "\n", "# np.savez('/tmp/desc.npz', retrieval_dict)", "\n", "", "else", ":", "\n", "        ", "retrieval_out", "=", "{", "}", "\n", "\n", "", "if", "args", ".", "save_fmaps", ":", "\n", "        ", "outfile", "=", "str", "(", "Path", "(", "args", ".", "logdir", ")", "/", "'introspection.npz'", ")", "\n", "print", "(", "'saving {}'", ".", "format", "(", "outfile", ")", ")", "\n", "np", ".", "savez", "(", "outfile", ",", "retrieval_dict", ")", "\n", "\n", "", "preds", ",", "tgts", "=", "np", ".", "concatenate", "(", "preds", ")", ",", "np", ".", "concatenate", "(", "tgts", ")", "\n", "\n", "metrics", "=", "retrieval_out", "\n", "metrics", "[", "'acc_inst'", "]", "=", "_acc", "(", "preds", ",", "tgts", ")", "\n", "metrics", "[", "'acc_cls'", "]", "=", "[", "_acc", "(", "preds", "[", "tgts", "==", "c", "]", ",", "tgts", "[", "tgts", "==", "c", "]", ")", "\n", "for", "c", "in", "np", ".", "unique", "(", "tgts", ")", "]", "\n", "logger", ".", "info", "(", "'acc per class={}'", ".", "format", "(", "metrics", "[", "'acc_cls'", "]", ")", ")", "\n", "metrics", "[", "'acc_cls'", "]", "=", "np", ".", "mean", "(", "metrics", "[", "'acc_cls'", "]", ")", "\n", "metrics", "[", "'loss'", "]", "=", "np", ".", "mean", "(", "losses", ")", "\n", "\n", "# compute combined score (avg between acc / map micro and macro)", "\n", "metrics", "[", "'combined'", "]", "=", "np", ".", "mean", "(", "[", "metrics", ".", "get", "(", "s", ",", "0", ")", "for", "s", "in", "\n", "[", "'acc_inst'", ",", "'acc_cls'", ",", "'mAP_inst'", ",", "'mAP_cls'", "]", "]", ")", "\n", "\n", "return", "metrics", ",", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.init_train_state": [[570, 575], ["dict"], "function", ["None"], ["", "def", "init_train_state", "(", ")", ":", "\n", "    ", "return", "dict", "(", "start_epoch", "=", "0", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "step", "=", "0", ",", "\n", "steps_epoch", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.get_summary_ims": [[577, 588], ["len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().unbind", "torch.cat().unbind", "torch.cat().unbind", "torch.cat().unbind", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.split", "torch.split", "torch.split", "torch.split"], "function", ["None"], ["", "def", "get_summary_ims", "(", "inputs", ")", ":", "\n", "    ", "shp", "=", "inputs", ".", "shape", "\n", "if", "len", "(", "shp", ")", "==", "5", ":", "\n", "        ", "nsplits", "=", "10", "if", "args", ".", "n_homogeneous", "==", "20", "else", "12", "\n", "ims", "=", "torch", ".", "cat", "(", "torch", ".", "cat", "(", "\n", "torch", ".", "split", "(", "inputs", "[", "0", "]", ",", "nsplits", ")", ",", "dim", "=", "2", ")", ".", "unbind", "(", ")", ",", "\n", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "        ", "ims", "=", "inputs", "[", "0", "]", "\n", "\n", "", "return", "ims", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.main": [[590, 737], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "logger.info", "custom_dataset.load_data", "train.load_model", "logger.info", "load_model.to", "logger.info", "logger.Logger", "train.init_train_state", "str", "os.path.isfile", "range", "numpy.arange", "torch.device", "torch.device", "torch.device", "torch.device", "torch.BCEWithLogitsLoss", "torch.CrossEntropyLoss", "getattr().parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "logger.info", "os.path.isfile", "train.load_checkpoint", "logger.info", "train.init_train_state", "logger.info", "train.load_checkpoint", "logger.info", "logger.info", "logger.info", "time.time", "epoch_time.append", "logger.info", "util.count_parameters", "str", "load_model.parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "pathlib.Path", "load_model.train", "train.train", "logger.info", "logger.info", "load_model.eval", "train.eval", "logger.info", "train.get_summary_ims", "logger.info", "util.save_checkpoint", "time.time", "logger.info", "logger.info", "logger.info", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "getattr", "load_model.parameters", "util.logEpoch", "str", "time.perf_counter", "numpy.max", "len", "load_model.state_dict", "torch.optim.SGD.state_dict", "os.path.basename", "metrics.get", "metrics.get", "time.time", "metrics.get", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.custom_dataset.load_data", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.load_model", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.init_train_state", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.load_checkpoint", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.init_train_state", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.load_checkpoint", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.util.count_parameters", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.train", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.train", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.eval", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.eval", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.train.get_summary_ims", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.util.save_checkpoint", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.util.logEpoch"], ["", "def", "main", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "torch", ".", "manual_seed", "(", "0", ")", "\n", "\n", "logger", ".", "info", "(", "'Loading data...'", ")", "\n", "train_loader", ",", "val_loader", ",", "classes", "=", "custom_dataset", ".", "load_data", "(", "args", ")", "\n", "\n", "# override autodetect if n_classes is given", "\n", "if", "args", ".", "n_classes", ">", "0", ":", "\n", "        ", "classes", "=", "np", ".", "arange", "(", "args", ".", "n_classes", ")", "\n", "\n", "", "model", "=", "load_model", "(", "classes", ")", "\n", "\n", "logger", ".", "info", "(", "'Loaded model; params={}'", ".", "format", "(", "util", ".", "count_parameters", "(", "model", ")", ")", ")", "\n", "if", "not", "args", ".", "cpu", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "\"cpu\"", "\n", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "logger", ".", "info", "(", "'Running on '", "+", "str", "(", "device", ")", ")", "\n", "\n", "summary_writer", "=", "Logger", "(", "args", ".", "logdir", ")", "\n", "\n", "# Loss and Optimizer", "\n", "n_epochs", "=", "args", ".", "epochs", "\n", "if", "args", ".", "label_smoothing", ">", "0", ":", "\n", "        ", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "else", ":", "\n", "        ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "", "train_state", "=", "init_train_state", "(", ")", "\n", "# freeze layers", "\n", "for", "l", "in", "args", ".", "freeze_layers", ":", "\n", "        ", "for", "p", "in", "getattr", "(", "model", ",", "l", ")", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "", "", "if", "args", ".", "optimizer", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "train_state", "[", "'lr'", "]", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "'nesterov'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "train_state", "[", "'lr'", "]", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "True", ")", "\n", "# this is used to warm-start", "\n", "", "if", "args", ".", "warm_start_from", ":", "\n", "        ", "logger", ".", "info", "(", "'Warm-starting from {}'", ".", "format", "(", "args", ".", "warm_start_from", ")", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "args", ".", "warm_start_from", ")", "\n", "train_state", "=", "load_checkpoint", "(", "args", ".", "warm_start_from", ",", "model", ",", "optimizer", ")", "\n", "logger", ".", "info", "(", "'Params loaded.'", ")", "\n", "# do not override train_state these when warm staring", "\n", "train_state", "=", "init_train_state", "(", ")", "\n", "\n", "", "ckptfile", "=", "str", "(", "Path", "(", "args", ".", "logdir", ")", "/", "args", ".", "latest_fname", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "ckptfile", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Loading checkpoint: {}'", ".", "format", "(", "ckptfile", ")", ")", "\n", "train_state", "=", "load_checkpoint", "(", "ckptfile", ",", "model", ",", "optimizer", ")", "\n", "logger", ".", "info", "(", "'Params loaded.'", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "'Checkpoint {} not found; ignoring.'", ".", "format", "(", "ckptfile", ")", ")", "\n", "\n", "# Training / Eval loop", "\n", "", "epoch_time", "=", "[", "]", "# store time per epoch", "\n", "# we save epoch+1 to checkpoints; but for eval we should repeat prev. epoch", "\n", "if", "args", ".", "skip_train", ":", "\n", "        ", "train_state", "[", "'start_epoch'", "]", "-=", "1", "\n", "", "for", "epoch", "in", "range", "(", "train_state", "[", "'start_epoch'", "]", ",", "n_epochs", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Epoch: [%d/%d]'", "%", "(", "epoch", "+", "1", ",", "n_epochs", ")", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "not", "args", ".", "skip_train", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "train", "(", "train_loader", ",", "device", ",", "model", ",", "criterion", ",", "optimizer", ",", "summary_writer", ",", "train_state", ",", "\n", "n_classes", "=", "len", "(", "classes", ")", ")", "\n", "logger", ".", "info", "(", "'Time taken: %.2f sec...'", "%", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "if", "epoch", "==", "0", ":", "\n", "                ", "train_state", "[", "'steps_epoch'", "]", "=", "train_state", "[", "'step'", "]", "\n", "# always eval on last epoch", "\n", "", "", "if", "not", "args", ".", "skip_eval", "or", "epoch", "==", "n_epochs", "-", "1", ":", "\n", "            ", "logger", ".", "info", "(", "'\\n Starting evaluation...'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "eval_shrec", "=", "True", "if", "epoch", "==", "n_epochs", "-", "1", "and", "args", ".", "retrieval_dir", "else", "False", "\n", "metrics", ",", "inputs", "=", "eval", "(", "\n", "val_loader", ",", "device", ",", "model", ",", "criterion", ",", "eval_shrec", ")", "\n", "\n", "logger", ".", "info", "(", "'\\tcombined: %.2f, Acc: %.2f, mAP: %.2f, Loss: %.4f'", "%", "\n", "(", "metrics", "[", "'combined'", "]", ",", "\n", "metrics", "[", "'acc_inst'", "]", ",", "\n", "metrics", ".", "get", "(", "'mAP_inst'", ",", "0.", ")", ",", "\n", "metrics", "[", "'loss'", "]", ")", ")", "\n", "\n", "# Log epoch to tensorboard", "\n", "# See log using: tensorboard --logdir='logs' --port=6006", "\n", "ims", "=", "get_summary_ims", "(", "inputs", ")", "\n", "if", "not", "args", ".", "nolog", ":", "\n", "                ", "util", ".", "logEpoch", "(", "summary_writer", ",", "model", ",", "epoch", "+", "1", ",", "metrics", ",", "ims", ")", "\n", "", "", "else", ":", "\n", "            ", "metrics", "=", "None", "\n", "\n", "# Decaying Learning Rate", "\n", "", "if", "args", ".", "lr_decay_mode", "==", "'step'", ":", "\n", "            ", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "lr_decay_freq", "==", "0", ":", "\n", "                ", "train_state", "[", "'lr'", "]", "*=", "args", ".", "lr_decay", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "param_group", "[", "'lr'", "]", "=", "train_state", "[", "'lr'", "]", "\n", "\n", "# Save model", "\n", "", "", "", "if", "not", "args", ".", "skip_train", ":", "\n", "            ", "logger", ".", "info", "(", "'\\tSaving latest model'", ")", "\n", "util", ".", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'step'", ":", "train_state", "[", "'step'", "]", ",", "\n", "'steps_epoch'", ":", "train_state", "[", "'steps_epoch'", "]", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'metrics'", ":", "metrics", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'lr'", ":", "train_state", "[", "'lr'", "]", ",", "\n", "}", ",", "\n", "str", "(", "Path", "(", "args", ".", "logdir", ")", "/", "args", ".", "latest_fname", ")", ")", "\n", "\n", "", "total_epoch_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "epoch_time", ".", "append", "(", "total_epoch_time", ")", "\n", "logger", ".", "info", "(", "'Total time for this epoch: {} s'", ".", "format", "(", "total_epoch_time", ")", ")", "\n", "\n", "# if last epoch, show eval results", "\n", "if", "epoch", "==", "n_epochs", "-", "1", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "'|model|combined|acc inst|acc cls|mAP inst|mAP cls|loss|'", ")", "\n", "logger", ".", "info", "(", "'|{}|{:.2f}|{:.2f}|{:.2f}|{:.2f}|{:.2f}|{:.4f}|'", "\n", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "args", ".", "logdir", ")", ",", "\n", "metrics", "[", "'combined'", "]", ",", "\n", "metrics", "[", "'acc_inst'", "]", ",", "\n", "metrics", "[", "'acc_cls'", "]", ",", "\n", "metrics", ".", "get", "(", "'mAP_inst'", ",", "0.", ")", ",", "\n", "metrics", ".", "get", "(", "'mAP_cls'", ",", "0.", ")", ",", "\n", "metrics", "[", "'loss'", "]", ")", ")", "\n", "\n", "", "if", "args", ".", "skip_train", ":", "\n", "# if evaluating, run it once", "\n", "            ", "break", "\n", "\n", "", "if", "time", ".", "perf_counter", "(", ")", "+", "np", ".", "max", "(", "epoch_time", ")", ">", "start_time", "+", "args", ".", "exit_after", ":", "\n", "            ", "logger", ".", "info", "(", "'Next epoch will likely exceed alotted time; exiting...'", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.group_conv.__init__": [[27, 59], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "layers.get_cyclic12_idx", "len", "layers.group_conv.modules", "layers.get_ico60_idx", "isinstance", "torch.cat", "torch.zeros", "torch.zeros", "range", "torch.nn.init.kaiming_normal_", "torch.zeros", "torch.ones", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.Identity.__init__", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.get_cyclic12_idx", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.get_ico60_idx"], ["def", "__init__", "(", "self", ",", "inplane", ",", "outplane", ",", "\n", "init", "=", "'id'", ",", "n_elements", "=", "12", ",", "support", "=", "None", ")", ":", "\n", "        ", "assert", "init", "in", "[", "'he'", ",", "'id'", "]", "\n", "super", "(", "group_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "n_elements", "==", "12", ":", "\n", "            ", "self", ".", "idx", "=", "get_cyclic12_idx", "(", ")", "\n", "", "elif", "n_elements", "==", "60", ":", "\n", "            ", "self", ".", "idx", "=", "get_ico60_idx", "(", ")", "\n", "", "if", "support", ":", "\n", "            ", "self", ".", "idx", "=", "self", ".", "idx", "[", ":", ",", "support", "]", "\n", "n_elements", "=", "len", "(", "support", ")", "\n", "\n", "", "self", ".", "inplane", "=", "inplane", "\n", "self", ".", "outplane", "=", "outplane", "\n", "self", ".", "gc", "=", "nn", ".", "Conv2d", "(", "inplane", ",", "\n", "outplane", ",", "\n", "kernel_size", "=", "[", "1", ",", "n_elements", "]", ")", "\n", "if", "init", "==", "'he'", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "\n", "nonlinearity", "=", "'relu'", ")", "\n", "m", ".", "bias", ".", "data", "=", "torch", ".", "zeros", "(", "m", ".", "bias", ".", "data", ".", "shape", ")", "\n", "", "", "", "elif", "init", "==", "'id'", ":", "\n", "            ", "ww", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones", "(", "[", "1", ",", "1", "]", ")", ",", "\n", "torch", ".", "zeros", "(", "[", "1", ",", "n_elements", "-", "1", "]", ")", "]", ",", "\n", "dim", "=", "1", ")", "\n", "\n", "self", ".", "gc", ".", "weight", ".", "data", "=", "torch", ".", "zeros", "(", "(", "self", ".", "gc", ".", "weight", ".", "data", ".", "shape", ")", ")", "\n", "self", ".", "gc", ".", "bias", ".", "data", "=", "torch", ".", "zeros", "(", "(", "self", ".", "gc", ".", "bias", ".", "data", ".", "shape", ")", ")", "\n", "for", "m", "in", "range", "(", "inplane", ")", ":", "\n", "                ", "self", ".", "gc", ".", "weight", ".", "data", "[", "m", ",", "m", ",", ":", ",", ":", "]", "=", "ww", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.group_conv.forward": [[60, 65], ["layers.group_conv.gc"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "[", ":", ",", ":", ",", "self", ".", "idx", ",", "0", "]", "\n", "x", "=", "self", ".", "gc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.homogeneous_conv.__init__": [[77, 101], ["torch.nn.Module.__init__", "layers.group_conv", "numpy.vectorize", "numpy.zeros", "range", "torch.Tensor", "range", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.Identity.__init__"], ["def", "__init__", "(", "self", ",", "inplane", ",", "outplane", ",", "n_homogeneous", "=", "12", ",", "\n", "init", "=", "'id'", ",", "n_group", "=", "60", ",", "support", "=", "None", ",", "homogeneous_output", "=", "True", ")", ":", "\n", "        ", "assert", "n_group", "==", "60", "\n", "assert", "n_homogeneous", "in", "[", "12", ",", "20", "]", "\n", "super", "(", "homogeneous_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "homogeneous_output", "=", "homogeneous_output", "\n", "classes", "=", "cts", ".", "homogeneous_tables", "[", "n_group", "]", "[", "n_homogeneous", "]", "[", "'classes'", "]", "\n", "ids", "=", "cts", ".", "homogeneous_tables", "[", "n_group", "]", "[", "n_homogeneous", "]", "[", "'ids'", "]", "\n", "\n", "if", "support", "is", "not", "None", ":", "\n", "            ", "ids", "=", "[", "ids", "[", "s", "]", "for", "s", "in", "support", "]", "\n", "", "self", ".", "conv", "=", "group_conv", "(", "inplane", ",", "outplane", ",", "\n", "init", "=", "init", ",", "\n", "n_elements", "=", "n_group", ",", "\n", "support", "=", "ids", ")", "\n", "id2tri", "=", "{", "i", ":", "np", ".", "where", "(", "classes", "==", "i", ")", "[", "0", "]", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "n_group", ")", "}", "\n", "self", ".", "conv", ".", "idx", "=", "np", ".", "vectorize", "(", "id2tri", ".", "__getitem__", ")", "(", "self", ".", "conv", ".", "idx", ")", "\n", "\n", "if", "homogeneous_output", ":", "\n", "            ", "pool_matrix", "=", "np", ".", "zeros", "(", "(", "n_homogeneous", ",", "n_group", ")", ")", "\n", "for", "i", "in", "range", "(", "n_homogeneous", ")", ":", "\n", "                ", "pool_matrix", "[", "i", "]", "[", "classes", "[", "i", "]", "]", "=", "1.", "/", "classes", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "", "self", ".", "pool", "=", "torch", ".", "Tensor", "(", "pool_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.homogeneous_conv.forward": [[102, 109], ["layers.homogeneous_conv.conv", "layers.homogeneous_conv.pool.to"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "homogeneous_output", ":", "\n", "# group-pooling back to # of original views", "\n", "            ", "x", "=", "self", ".", "pool", ".", "to", "(", "device", "=", "x", ".", "device", ")", "@", "x", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.CircularPad.__init__": [[126, 131], ["torch.nn.Module.__init__", "torch.nn.modules.padding.ConstantPad2d"], "methods", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.Identity.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pad", ")", ":", "\n", "        ", "super", "(", "CircularPad", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pad", "=", "pad", "\n", "self", ".", "zeropad", "=", "torch", ".", "nn", ".", "modules", ".", "padding", ".", "ConstantPad2d", "(", "\n", "(", "pad", ",", "pad", ",", "0", ",", "0", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.CircularPad.forward": [[132, 136], ["torch.cat", "layers.CircularPad.zeropad"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "x", "[", "...", ",", "-", "self", ".", "pad", ":", ",", ":", "]", ",", "x", ",", "x", "[", "...", ",", ":", "self", ".", "pad", ",", ":", "]", "]", ",", "dim", "=", "-", "2", ")", "\n", "x", "=", "self", ".", "zeropad", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.Identity.__init__": [[139, 141], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.Identity.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.Identity.forward": [[142, 144], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.get_cyclic12_idx": [[9, 15], ["numpy.zeros", "range", "range"], "function", ["None"], ["def", "get_cyclic12_idx", "(", ")", ":", "\n", "    ", "idx", "=", "np", ".", "zeros", "(", "[", "12", ",", "12", "]", ")", "\n", "for", "i", "in", "range", "(", "12", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "12", ")", ":", "\n", "            ", "idx", "[", "i", ",", "j", "]", "=", "(", "i", "+", "j", ")", "%", "12", "\n", "", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.get_ico60_idx": [[17, 22], ["scipy.loadmat", "os.path.join", "os.path.dirname"], "function", ["None"], ["", "def", "get_ico60_idx", "(", ")", ":", "\n", "    ", "matt", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\n", "'cayley.mat'", ")", ")", "\n", "idx", "=", "matt", "[", "'multi'", "]", "-", "1", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.layers.homogeneous_or_group_conv": [[111, 123], ["dict", "layers.homogeneous_conv", "layers.group_conv"], "function", ["None"], ["", "", "def", "homogeneous_or_group_conv", "(", "inplanes", ",", "outplanes", ",", "init", ",", "n_homogeneous", ",", "\n", "n_elements", "=", "12", ",", "support", "=", "None", ",", "homogeneous_output", "=", "True", ")", ":", "\n", "    ", "args", "=", "[", "inplanes", ",", "outplanes", "]", "\n", "kwargs", "=", "dict", "(", "init", "=", "init", ",", "support", "=", "support", ")", "\n", "if", "n_homogeneous", ">", "0", ":", "\n", "        ", "return", "homogeneous_conv", "(", "*", "args", ",", "\n", "n_homogeneous", "=", "n_homogeneous", ",", "\n", "n_group", "=", "n_elements", ",", "\n", "homogeneous_output", "=", "homogeneous_output", ",", "\n", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "return", "group_conv", "(", "*", "args", ",", "n_elements", "=", "n_elements", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.util.logEpoch": [[6, 23], ["metrics.items", "model.named_parameters", "info.items", "logger.scalar_summary", "tag.replace.replace", "logger.histo_summary", "ims.cpu().numpy", "logger.image_summary", "value.data.cpu().numpy", "logger.histo_summary", "value.grad.data.cpu().numpy", "ims.cpu", "value.data.cpu", "value.grad.data.cpu"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.logger.Logger.scalar_summary", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.logger.Logger.histo_summary", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.logger.Logger.image_summary", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.logger.Logger.histo_summary"], ["def", "logEpoch", "(", "logger", ",", "model", ",", "epoch", ",", "metrics", ",", "ims", ")", ":", "\n", "# 1. Log scalar values (scalar summary)", "\n", "    ", "for", "tag", ",", "value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "scalar_summary", "(", "'metrics/'", "+", "tag", ",", "value", ",", "epoch", ")", "\n", "\n", "# 2. Log values and gradients of the parameters (histogram summary)", "\n", "", "for", "tag", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "tag", "=", "tag", ".", "replace", "(", "'.'", ",", "'/'", ")", "\n", "logger", ".", "histo_summary", "(", "tag", ",", "value", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "epoch", ")", "\n", "if", "value", ".", "grad", "is", "not", "None", ":", "\n", "            ", "logger", ".", "histo_summary", "(", "\n", "tag", "+", "'/grad'", ",", "value", ".", "grad", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "epoch", ")", "\n", "\n", "# 3. Log training images (image summary)", "\n", "", "", "info", "=", "{", "'images'", ":", "ims", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", "\n", "for", "tag", ",", "images", "in", "info", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "image_summary", "(", "tag", ",", "images", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.util.logStep": [[25, 44], ["info.items", "loss.item", "accuracy.item", "logger.scalar_summary", "info.items", "ims.cpu().numpy", "logger.image_summary", "ims.cpu"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.logger.Logger.scalar_summary", "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.logger.Logger.image_summary"], ["", "", "def", "logStep", "(", "logger", ",", "model", ",", "epoch", ",", "\n", "loss", ",", "accuracy", ",", "lr", ",", "steps_per_sec", ",", "\n", "ims", "=", "None", ",", "triplet_loss", "=", "None", ")", ":", "\n", "# 1. Log scalar values (scalar summary)", "\n", "    ", "info", "=", "{", "'train_loss'", ":", "loss", ".", "item", "(", ")", ",", "\n", "'train_accuracy'", ":", "accuracy", ".", "item", "(", ")", ",", "\n", "'train_lr'", ":", "lr", ",", "\n", "'steps_per_sec'", ":", "steps_per_sec", "}", "\n", "\n", "if", "triplet_loss", "is", "not", "None", ":", "\n", "        ", "info", "[", "'train_triplet_loss'", "]", "=", "triplet_loss", "\n", "\n", "", "for", "tag", ",", "value", "in", "info", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "scalar_summary", "(", "'train_metrics/'", "+", "tag", ",", "value", ",", "epoch", ")", "\n", "\n", "", "if", "ims", "is", "not", "None", ":", "\n", "        ", "info", "=", "{", "'train_images'", ":", "ims", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", "\n", "for", "tag", ",", "images", "in", "info", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "image_summary", "(", "tag", ",", "images", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.util.save_checkpoint": [[46, 50], ["torch.save", "os.path.exists", "os.makedirs", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["", "", "", "def", "save_checkpoint", "(", "state", ",", "fname", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "fname", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "fname", ")", ",", "exist_ok", "=", "True", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.util.init_logger": [[52, 74], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.path.expanduser", "os.makedirs", "os.path.join", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["", "def", "init_logger", "(", "logdir", ",", "fname", "=", "'logging.log'", ")", ":", "\n", "# create logger", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'logger'", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "# create formatter and add it to the handlers", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'[%(asctime)s:%(levelname)s] %(message)s'", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "fname", ":", "\n", "# create file handler", "\n", "        ", "logdir", "=", "os", ".", "path", ".", "expanduser", "(", "logdir", ")", "\n", "os", ".", "makedirs", "(", "logdir", ",", "exist_ok", "=", "True", ")", "\n", "logfile", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "fname", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "logfile", ")", "\n", "# create console handler", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "# add the handlers to the logger", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.util.ld2dl": [[76, 85], ["o.items", "dd.keys", "d_out[].append"], "function", ["None"], ["", "def", "ld2dl", "(", "d", ")", ":", "\n", "    ", "\"\"\" List of dict to dict of list. \"\"\"", "\n", "if", "not", "d", ":", "\n", "        ", "return", "d", "\n", "", "d_out", "=", "{", "k", ":", "[", "]", "for", "dd", "in", "d", "for", "k", "in", "dd", ".", "keys", "(", ")", "}", "\n", "for", "o", "in", "d", ":", "\n", "        ", "for", "k", ",", "v", "in", "o", ".", "items", "(", ")", ":", "\n", "            ", "d_out", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "", "return", "d_out", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_emvn.emvn.util.count_parameters": [[87, 90], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "\"\"\"see https://discuss.pytorch.org/t/how-do-i-check-the-number-of-parameters-of-a-model/4325/11\"\"\"", "\n", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "", ""]]}