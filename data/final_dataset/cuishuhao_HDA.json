{"home.repos.pwc.inspect_result.cuishuhao_HDA.utils.loss.Myloss.__init__": [[10, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.dataloader.ImageSourceList.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "        ", "super", "(", "Myloss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "return", "\n", "", "def", "forward", "(", "self", ",", "input_", ",", "label", ",", "weight", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.utils.loss.Myloss.forward": [[14, 17], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ",", "label", ",", "weight", ")", ":", "\n", "        ", "entropy", "=", "-", "label", "*", "torch", ".", "log", "(", "input_", "+", "self", ".", "epsilon", ")", "-", "(", "1", "-", "label", ")", "*", "torch", ".", "log", "(", "1", "-", "input_", "+", "self", ".", "epsilon", ")", "\n", "return", "torch", ".", "sum", "(", "entropy", "*", "weight", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.utils.loss.Entropy": [[18, 24], ["input_.size", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["", "", "def", "Entropy", "(", "input_", ")", ":", "\n", "    ", "bs", "=", "input_", ".", "size", "(", "0", ")", "\n", "epsilon", "=", "1e-5", "\n", "entropy", "=", "-", "input_", "*", "torch", ".", "log", "(", "input_", "+", "epsilon", ")", "\n", "entropy", "=", "torch", ".", "sum", "(", "entropy", ",", "dim", "=", "1", ")", "\n", "return", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.utils.loss.grl_hook": [[25, 29], ["grad.clone"], "function", ["None"], ["", "def", "grl_hook", "(", "coeff", ")", ":", "\n", "    ", "def", "fun1", "(", "grad", ")", ":", "\n", "        ", "return", "-", "coeff", "*", "grad", ".", "clone", "(", ")", "\n", "", "return", "fun1", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.utils.loss.HDA_UDA": [[30, 54], ["loss.Myloss", "input_list[].reshape", "ad_net", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "loss.Entropy", "torch.exp.register_hook", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.Sigmoid", "softmax_output.size", "loss.grl_hook", "torch.abs", "torch.abs", "torch.abs", "myloss", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "weight.view", "softmax_output.size", "softmax_output.size", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "numpy.array", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.cuishuhao_HDA.utils.loss.Entropy", "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.grl_hook"], ["", "def", "HDA_UDA", "(", "input_list", ",", "ad_net", ",", "coeff", "=", "None", ",", "myloss", "=", "Myloss", "(", ")", ")", ":", "\n", "    ", "softmax_output", "=", "input_list", "[", "0", "]", "\n", "focals", "=", "input_list", "[", "1", "]", ".", "reshape", "(", "-", "1", ")", "\n", "ad_out", "=", "ad_net", "(", "softmax_output", ")", "\n", "ad_out", "=", "nn", ".", "Sigmoid", "(", ")", "(", "ad_out", ")", "\n", "batch_size", "=", "softmax_output", ".", "size", "(", "0", ")", "//", "2", "\n", "dc_target", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "[", "1", "]", "]", "*", "batch_size", "+", "[", "[", "0", "]", "]", "*", "batch_size", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "x", "=", "softmax_output", "\n", "entropy", "=", "Entropy", "(", "x", ")", "\n", "entropy", ".", "register_hook", "(", "grl_hook", "(", "coeff", ")", ")", "\n", "entropy", "=", "torch", ".", "exp", "(", "-", "entropy", ")", "\n", "mean_entropy", "=", "torch", ".", "mean", "(", "entropy", ")", "\n", "heuristic", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "focals", ")", ")", "\n", "\n", "source_mask", "=", "torch", ".", "ones_like", "(", "entropy", ")", "\n", "source_mask", "[", "softmax_output", ".", "size", "(", "0", ")", "//", "2", ":", "]", "=", "0", "\n", "source_weight", "=", "entropy", "*", "source_mask", "\n", "target_mask", "=", "torch", ".", "ones_like", "(", "entropy", ")", "\n", "target_mask", "[", "0", ":", "softmax_output", ".", "size", "(", "0", ")", "//", "2", "]", "=", "0", "\n", "target_weight", "=", "entropy", "*", "target_mask", "\n", "weight", "=", "source_weight", "/", "torch", ".", "sum", "(", "source_weight", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "+", "target_weight", "/", "torch", ".", "sum", "(", "target_weight", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "return", "myloss", "(", "ad_out", ",", "dc_target", ",", "weight", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "mean_entropy", ",", "heuristic", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.utils.loss.HDA_SSDA": [[55, 85], ["loss.Myloss", "input_list[].reshape", "ad_net", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "loss.Entropy", "torch.exp.register_hook", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "softmax_output.size", "loss.grl_hook", "torch.mean", "torch.mean", "torch.mean", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.abs", "torch.abs", "torch.abs", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "softmax_output.size", "softmax_output.size", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum", "torch.sum", "torch.sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "softmax_output.size", "softmax_output.size", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "numpy.array", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum", "torch.sum", "torch.sum", "torch.CrossEntropyLoss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.cuishuhao_HDA.utils.loss.Entropy", "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.grl_hook"], ["", "def", "HDA_SSDA", "(", "input_list", ",", "ad_net", ",", "coeff", "=", "None", ",", "myloss", "=", "Myloss", "(", ")", ")", ":", "\n", "    ", "softmax_output", "=", "input_list", "[", "0", "]", "\n", "focals", "=", "input_list", "[", "1", "]", ".", "reshape", "(", "-", "1", ")", "\n", "ad_out", "=", "ad_net", "(", "softmax_output", ")", "\n", "batch_size", "=", "softmax_output", ".", "size", "(", "0", ")", "//", "3", "\n", "dc_target", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "2", "]", "*", "batch_size", "+", "[", "1", "]", "*", "batch_size", "+", "[", "0", "]", "*", "batch_size", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "x", "=", "softmax_output", "\n", "entropy", "=", "Entropy", "(", "x", ")", "\n", "entropy", ".", "register_hook", "(", "grl_hook", "(", "coeff", ")", ")", "\n", "entropy", "=", "torch", ".", "exp", "(", "-", "entropy", ")", "\n", "mean_entropy", "=", "torch", ".", "mean", "(", "entropy", ")", "\n", "heuristic", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "focals", ")", ")", "*", "0.5", "\n", "\n", "source_mask", "=", "torch", ".", "ones_like", "(", "entropy", ")", "\n", "source_mask", "[", "softmax_output", ".", "size", "(", "0", ")", "//", "3", ":", "]", "=", "0", "\n", "source_weight", "=", "entropy", "*", "source_mask", "\n", "\n", "label_mask", "=", "torch", ".", "ones_like", "(", "entropy", ")", "\n", "label_mask", "[", "softmax_output", ".", "size", "(", "0", ")", "*", "2", "//", "3", ":", "]", "=", "0", "\n", "label_mask", "[", "0", ":", "softmax_output", ".", "size", "(", "0", ")", "//", "3", "]", "=", "0", "\n", "label_weight", "=", "entropy", "*", "label_mask", "\n", "\n", "target_mask", "=", "torch", ".", "ones_like", "(", "entropy", ")", "\n", "target_mask", "[", "0", ":", "softmax_output", ".", "size", "(", "0", ")", "*", "2", "//", "3", "]", "=", "0", "\n", "target_weight", "=", "entropy", "*", "target_mask", "\n", "weight", "=", "source_weight", "/", "torch", ".", "sum", "(", "source_weight", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "+", "label_weight", "/", "torch", ".", "sum", "(", "label_weight", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "+", "target_weight", "/", "torch", ".", "sum", "(", "target_weight", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "return", "torch", ".", "sum", "(", "weight", "*", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "(", "ad_out", ",", "dc_target", ")", ")", "/", "3", "*", "2", ",", "mean_entropy", ",", "heuristic", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.utils.loss.HDA_MSDA": [[86, 111], ["loss.Myloss", "input_list[].reshape", "ad_net", "torch.cat", "torch.cat", "torch.cat", "loss.Entropy", "torch.exp.register_hook", "torch.exp", "torch.exp", "torch.exp", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "softmax_output.size", "labels.size", "loss.grl_hook", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "labels.size", "labels.size", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.sum().detach().item", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.sum().detach", "torch.CrossEntropyLoss", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "numpy.array"], "function", ["home.repos.pwc.inspect_result.cuishuhao_HDA.utils.loss.Entropy", "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.grl_hook"], ["", "def", "HDA_MSDA", "(", "input_list", ",", "ad_net", ",", "coeff", "=", "None", ",", "myloss", "=", "Myloss", "(", ")", ")", ":", "\n", "    ", "softmax_output", "=", "input_list", "[", "0", "]", "\n", "focals", "=", "input_list", "[", "1", "]", ".", "reshape", "(", "-", "1", ")", "\n", "labels", "=", "input_list", "[", "2", "]", "\n", "ad_out", "=", "ad_net", "(", "softmax_output", ")", "\n", "\n", "batch_size", "=", "softmax_output", ".", "size", "(", "0", ")", "-", "labels", ".", "size", "(", "0", ")", "\n", "dc_target", "=", "torch", ".", "cat", "(", "(", "labels", "+", "1", ",", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "0", "]", "*", "batch_size", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", ",", "0", ")", "\n", "\n", "x", "=", "softmax_output", "\n", "entropy", "=", "Entropy", "(", "x", ")", "\n", "entropy", ".", "register_hook", "(", "grl_hook", "(", "coeff", ")", ")", "\n", "entropy", "=", "torch", ".", "exp", "(", "-", "entropy", ")", "\n", "mean_entropy", "=", "torch", ".", "mean", "(", "entropy", ")", "\n", "heuristic", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "focals", ")", ")", "\n", "\n", "source_mask", "=", "torch", ".", "ones_like", "(", "entropy", ")", "\n", "source_mask", "[", "labels", ".", "size", "(", "0", ")", ":", "]", "=", "0", "\n", "source_weight", "=", "entropy", "*", "source_mask", "\n", "target_mask", "=", "torch", ".", "ones_like", "(", "entropy", ")", "\n", "target_mask", "[", "0", ":", "labels", ".", "size", "(", "0", ")", "]", "=", "0", "\n", "target_weight", "=", "entropy", "*", "target_mask", "\n", "weight", "=", "source_weight", "/", "torch", ".", "sum", "(", "source_weight", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "+", "target_weight", "/", "torch", ".", "sum", "(", "target_weight", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "return", "torch", ".", "sum", "(", "weight", "*", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "(", "ad_out", ",", "dc_target", ")", ")", ",", "mean_entropy", ",", "heuristic", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.utils.lr_schedule.inv_lr_scheduler": [[1, 11], ["None"], "function", ["None"], ["def", "inv_lr_scheduler", "(", "optimizer", ",", "iter_num", ",", "gamma", ",", "power", ",", "lr", "=", "0.001", ",", "weight_decay", "=", "0.0005", ")", ":", "\n", "    ", "\"\"\"Decay learning rate by a factor of 0.1 every lr_decay_epoch epochs.\"\"\"", "\n", "lr", "=", "lr", "*", "(", "1", "+", "gamma", "*", "iter_num", ")", "**", "(", "-", "power", ")", "\n", "i", "=", "0", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "*", "param_group", "[", "'lr_mult'", "]", "\n", "param_group", "[", "'weight_decay'", "]", "=", "weight_decay", "*", "param_group", "[", "'decay_mult'", "]", "\n", "i", "+=", "1", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.ResNetFc.__init__": [[95, 134], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "network.ResNetFc.heuristic.apply", "torch.Linear", "torch.Linear", "network.ResNetFc.heuristic1.apply", "torch.Linear", "torch.Linear", "network.ResNetFc.heuristic2.apply", "torch.Linear", "torch.Linear", "network.ResNetFc.heuristic3.apply", "torch.Linear", "torch.Linear", "network.ResNetFc.heuristic4.apply", "network.ResNetFc.fc.apply", "network.ResNetFc.fc.apply"], "methods", ["home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.dataloader.ImageSourceList.__init__"], ["  ", "def", "__init__", "(", "self", ",", "resnet_name", ",", "bottleneck_dim", "=", "256", ",", "new_cls", "=", "False", ",", "class_num", "=", "1000", ",", "heuristic_num", "=", "1", ",", "heuristic_initial", "=", "False", ")", ":", "\n", "    ", "super", "(", "ResNetFc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model_resnet", "=", "resnet_dict", "[", "resnet_name", "]", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "conv1", "=", "model_resnet", ".", "conv1", "\n", "self", ".", "bn1", "=", "model_resnet", ".", "bn1", "\n", "self", ".", "relu", "=", "model_resnet", ".", "relu", "\n", "self", ".", "maxpool", "=", "model_resnet", ".", "maxpool", "\n", "self", ".", "layer1", "=", "model_resnet", ".", "layer1", "\n", "self", ".", "layer2", "=", "model_resnet", ".", "layer2", "\n", "self", ".", "layer3", "=", "model_resnet", ".", "layer3", "\n", "self", ".", "layer4", "=", "model_resnet", ".", "layer4", "\n", "self", ".", "avgpool", "=", "model_resnet", ".", "avgpool", "\n", "self", ".", "feature_layers", "=", "nn", ".", "Sequential", "(", "self", ".", "conv1", ",", "self", ".", "bn1", ",", "self", ".", "relu", ",", "self", ".", "maxpool", ",", "self", ".", "layer1", ",", "self", ".", "layer2", ",", "self", ".", "layer3", ",", "self", ".", "layer4", ",", "self", ".", "avgpool", ")", "\n", "self", ".", "select_layers", "=", "nn", ".", "Sequential", "(", "self", ".", "layer3", ",", "self", ".", "layer4", ",", "self", ".", "avgpool", ")", "\n", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "new_cls", "=", "new_cls", "\n", "self", ".", "heuristic_num", "=", "heuristic_num", "\n", "if", "new_cls", ":", "\n", "        ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "model_resnet", ".", "fc", ".", "in_features", ",", "class_num", ")", "\n", "if", "heuristic_initial", ":", "\n", "            ", "self", ".", "fc", ".", "apply", "(", "hun_weights", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", ".", "apply", "(", "init_weights", ")", "\n", "", "self", ".", "heuristic", "=", "nn", ".", "Linear", "(", "model_resnet", ".", "fc", ".", "in_features", ",", "class_num", ")", "\n", "self", ".", "heuristic", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "heuristic1", "=", "nn", ".", "Linear", "(", "model_resnet", ".", "fc", ".", "in_features", ",", "class_num", ")", "\n", "self", ".", "heuristic1", ".", "apply", "(", "one_weights", ")", "\n", "self", ".", "heuristic2", "=", "nn", ".", "Linear", "(", "model_resnet", ".", "fc", ".", "in_features", ",", "class_num", ")", "\n", "self", ".", "heuristic2", ".", "apply", "(", "two_weights", ")", "\n", "self", ".", "heuristic3", "=", "nn", ".", "Linear", "(", "model_resnet", ".", "fc", ".", "in_features", ",", "class_num", ")", "\n", "self", ".", "heuristic3", ".", "apply", "(", "three_weights", ")", "\n", "self", ".", "heuristic4", "=", "nn", ".", "Linear", "(", "model_resnet", ".", "fc", ".", "in_features", ",", "class_num", ")", "\n", "self", ".", "heuristic4", ".", "apply", "(", "four_weights", ")", "\n", "self", ".", "__in_features", "=", "model_resnet", ".", "fc", ".", "in_features", "\n", "", "else", ":", "\n", "        ", "self", ".", "fc", "=", "model_resnet", ".", "fc", "\n", "self", ".", "__in_features", "=", "model_resnet", ".", "fc", ".", "in_features", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.ResNetFc.forward": [[135, 168], ["network.ResNetFc.feature_layers", "x.view.view.view", "network.ResNetFc.fc", "x.view.view.size", "network.ResNetFc.heuristic", "network.ResNetFc.heuristic", "network.ResNetFc.heuristic1", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "network.ResNetFc.heuristic", "network.ResNetFc.heuristic1", "network.ResNetFc.heuristic2", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "network.ResNetFc.heuristic", "network.ResNetFc.heuristic1", "network.ResNetFc.heuristic2", "network.ResNetFc.heuristic3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "network.ResNetFc.heuristic", "network.ResNetFc.heuristic1", "network.ResNetFc.heuristic2", "network.ResNetFc.heuristic3", "network.ResNetFc.heuristic4"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "heuristic", "=", "True", ")", ":", "\n", "    ", "x", "=", "self", ".", "feature_layers", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "if", "self", ".", "heuristic_num", "==", "1", ":", "\n", "        ", "geuristic", "=", "self", ".", "heuristic", "(", "x", ")", "\n", "", "elif", "self", ".", "heuristic_num", "==", "2", ":", "\n", "        ", "now1", "=", "self", ".", "heuristic", "(", "x", ")", "\n", "now2", "=", "self", ".", "heuristic1", "(", "x", ")", "\n", "now_all", "=", "torch", ".", "cat", "(", "(", "now1", ",", "now2", ")", ",", "0", ")", ".", "reshape", "(", "self", ".", "heuristic_num", ",", "-", "1", ",", "now1", ".", "shape", "[", "1", "]", ")", "\n", "geuristic", "=", "now1", "+", "now2", "\n", "", "elif", "self", ".", "heuristic_num", "==", "3", ":", "\n", "        ", "now1", "=", "self", ".", "heuristic", "(", "x", ")", "\n", "now2", "=", "self", ".", "heuristic1", "(", "x", ")", "\n", "now3", "=", "self", ".", "heuristic2", "(", "x", ")", "\n", "now_all", "=", "torch", ".", "cat", "(", "(", "now1", ",", "now2", ",", "now3", ")", ",", "0", ")", ".", "reshape", "(", "self", ".", "heuristic_num", ",", "-", "1", ",", "now1", ".", "shape", "[", "1", "]", ")", "\n", "geuristic", "=", "(", "now1", "+", "now2", "+", "now3", ")", "\n", "", "elif", "self", ".", "heuristic_num", "==", "4", ":", "\n", "        ", "now1", "=", "self", ".", "heuristic", "(", "x", ")", "\n", "now2", "=", "self", ".", "heuristic1", "(", "x", ")", "\n", "now3", "=", "self", ".", "heuristic2", "(", "x", ")", "\n", "now4", "=", "self", ".", "heuristic3", "(", "x", ")", "\n", "geuristic", "=", "(", "now1", "+", "now2", "+", "now3", "+", "now4", ")", "\n", "", "elif", "self", ".", "heuristic_num", "==", "5", ":", "\n", "        ", "now1", "=", "self", ".", "heuristic", "(", "x", ")", "\n", "now2", "=", "self", ".", "heuristic1", "(", "x", ")", "\n", "now3", "=", "self", ".", "heuristic2", "(", "x", ")", "\n", "now4", "=", "self", ".", "heuristic3", "(", "x", ")", "\n", "now5", "=", "self", ".", "heuristic4", "(", "x", ")", "\n", "geuristic", "=", "(", "now1", "+", "now2", "+", "now3", "+", "now4", "+", "now5", ")", "\n", "", "y", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "heuristic", ":", "\n", "        ", "y", "=", "y", "-", "geuristic", "\n", "", "return", "x", ",", "y", ",", "geuristic", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.ResNetFc.output_num": [[169, 171], ["None"], "methods", ["None"], ["", "def", "output_num", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "__in_features", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.ResNetFc.get_parameters": [[172, 184], ["network.ResNetFc.feature_layers.parameters", "network.ResNetFc.heuristic1.parameters", "network.ResNetFc.heuristic2.parameters", "network.ResNetFc.heuristic3.parameters", "network.ResNetFc.heuristic4.parameters", "network.ResNetFc.fc.parameters", "network.ResNetFc.heuristic.parameters", "network.ResNetFc.parameters"], "methods", ["None"], ["", "def", "get_parameters", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "new_cls", ":", "\n", "        ", "parameter_list", "=", "[", "{", "\"params\"", ":", "self", ".", "feature_layers", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "1", ",", "'decay_mult'", ":", "2", "}", ",", "{", "\"params\"", ":", "self", ".", "heuristic1", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "heuristic2", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "heuristic3", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "heuristic4", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "fc", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "heuristic", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", "]", "\n", "", "else", ":", "\n", "        ", "parameter_list", "=", "[", "{", "\"params\"", ":", "self", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "1", ",", "'decay_mult'", ":", "2", "}", "]", "\n", "", "return", "parameter_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.AdversarialNetwork.__init__": [[187, 200], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sigmoid", "torch.Sigmoid", "network.AdversarialNetwork.apply"], "methods", ["home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.dataloader.ImageSourceList.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_feature", ",", "hidden_size", ",", "multi", "=", "1", ")", ":", "\n", "    ", "super", "(", "AdversarialNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ad_layer1", "=", "nn", ".", "Linear", "(", "in_feature", ",", "hidden_size", ")", "\n", "self", ".", "ad_layer2", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "ad_layer3", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "multi", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "iter_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.AdversarialNetwork.forward": [[201, 215], ["network.calc_coeff", "network.AdversarialNetwork.register_hook", "network.AdversarialNetwork.ad_layer1", "network.AdversarialNetwork.relu1", "network.AdversarialNetwork.dropout1", "network.AdversarialNetwork.ad_layer2", "network.AdversarialNetwork.relu2", "network.AdversarialNetwork.dropout2", "network.AdversarialNetwork.ad_layer3", "network.grl_hook"], "methods", ["home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.calc_coeff", "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.grl_hook"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "training", ":", "\n", "        ", "self", ".", "iter_num", "+=", "1", "\n", "", "coeff", "=", "calc_coeff", "(", "self", ".", "iter_num", ")", "\n", "x", "=", "x", "*", "1.0", "\n", "x", ".", "register_hook", "(", "grl_hook", "(", "coeff", ")", ")", "\n", "x", "=", "self", ".", "ad_layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout1", "(", "x", ")", "\n", "x", "=", "self", ".", "ad_layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout2", "(", "x", ")", "\n", "y", "=", "self", ".", "ad_layer3", "(", "x", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.AdversarialNetwork.output_num": [[216, 218], ["None"], "methods", ["None"], ["", "def", "output_num", "(", "self", ")", ":", "\n", "    ", "return", "1", "\n", "", "def", "get_parameters", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.AdversarialNetwork.get_parameters": [[218, 220], ["network.AdversarialNetwork.parameters"], "methods", ["None"], ["", "def", "get_parameters", "(", "self", ")", ":", "\n", "    ", "return", "[", "{", "\"params\"", ":", "self", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "10", ",", "'decay_mult'", ":", "2", "}", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.calc_coeff": [[12, 14], ["numpy.float", "numpy.exp"], "function", ["None"], ["def", "calc_coeff", "(", "iter_num", ",", "high", "=", "1.0", ",", "low", "=", "0.0", ",", "alpha", "=", "10.0", ",", "max_iter", "=", "10000.0", ")", ":", "\n", "    ", "return", "np", ".", "float", "(", "2.0", "*", "(", "high", "-", "low", ")", "/", "(", "1.0", "+", "np", ".", "exp", "(", "-", "alpha", "*", "iter_num", "/", "max_iter", ")", ")", "-", "(", "high", "-", "low", ")", "+", "low", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.init_weights": [[15, 26], ["torch.init.kaiming_uniform_", "torch.init.zeros_", "classname.find", "classname.find", "classname.find", "torch.init.normal_", "torch.init.zeros_", "classname.find", "torch.init.kaiming_normal_", "torch.init.zeros_"], "function", ["None"], ["", "def", "init_weights", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'ConvTranspose2d'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "1.0", ",", "0.02", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.one_weights": [[27, 38], ["torch.init.kaiming_uniform_", "torch.init.zeros_", "classname.find", "classname.find", "classname.find", "torch.init.normal_", "torch.init.zeros_", "classname.find", "torch.init.kaiming_normal_", "torch.init.zeros_"], "function", ["None"], ["", "", "def", "one_weights", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'ConvTranspose2d'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "1.0", ",", "0.02", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.two_weights": [[39, 50], ["torch.init.kaiming_uniform_", "torch.init.zeros_", "classname.find", "classname.find", "classname.find", "torch.init.normal_", "torch.init.zeros_", "classname.find", "torch.init.kaiming_normal_", "torch.init.zeros_"], "function", ["None"], ["", "", "def", "two_weights", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'ConvTranspose2d'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "1.0", ",", "0.02", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "2", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.three_weights": [[51, 62], ["torch.init.kaiming_uniform_", "torch.init.zeros_", "classname.find", "classname.find", "classname.find", "torch.init.normal_", "torch.init.zeros_", "classname.find", "torch.init.kaiming_normal_", "torch.init.zeros_"], "function", ["None"], ["", "", "def", "three_weights", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'ConvTranspose2d'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "1.0", ",", "0.02", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "3", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.four_weights": [[63, 74], ["torch.init.kaiming_uniform_", "torch.init.zeros_", "classname.find", "classname.find", "classname.find", "torch.init.normal_", "torch.init.zeros_", "classname.find", "torch.init.kaiming_normal_", "torch.init.zeros_"], "function", ["None"], ["", "", "def", "four_weights", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'ConvTranspose2d'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "1.0", ",", "0.02", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "4", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.hun_weights": [[75, 86], ["torch.init.kaiming_uniform_", "torch.init.zeros_", "classname.find", "classname.find", "classname.find", "torch.init.normal_", "torch.init.zeros_", "classname.find", "torch.init.kaiming_normal_", "torch.init.zeros_"], "function", ["None"], ["", "", "def", "hun_weights", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'ConvTranspose2d'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "1.0", ",", "0.02", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "100", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.grl_hook": [[89, 93], ["grad.clone"], "function", ["None"], ["def", "grl_hook", "(", "coeff", ")", ":", "\n", "    ", "def", "fun1", "(", "grad", ")", ":", "\n", "        ", "return", "-", "coeff", "*", "grad", ".", "clone", "(", ")", "\n", "", "return", "fun1", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.ResizeImage.__init__": [[9, 14], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "      ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "        ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.ResizeImage.__call__": [[14, 17], ["img.resize"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "      ", "th", ",", "tw", "=", "self", ".", "size", "\n", "return", "img", ".", "resize", "(", "(", "th", ",", "tw", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.RandomSizedCrop.__init__": [[29, 32], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.RandomSizedCrop.__call__": [[33, 38], ["random.randint", "random.randint"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h_off", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "shape", "[", "1", "]", "-", "self", ".", "size", ")", "\n", "w_off", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "shape", "[", "2", "]", "-", "self", ".", "size", ")", "\n", "img", "=", "img", "[", ":", ",", "h_off", ":", "h_off", "+", "self", ".", "size", ",", "w_off", ":", "w_off", "+", "self", ".", "size", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.Normalize.__init__": [[49, 55], ["numpy.load", "torch.from_numpy", "numpy.load.astype"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", "=", "None", ",", "meanfile", "=", "None", ")", ":", "\n", "        ", "if", "mean", ":", "\n", "            ", "self", ".", "mean", "=", "mean", "\n", "", "else", ":", "\n", "            ", "arr", "=", "np", ".", "load", "(", "meanfile", ")", "\n", "self", ".", "mean", "=", "torch", ".", "from_numpy", "(", "arr", ".", "astype", "(", "'float32'", ")", "/", "255.0", ")", "[", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.Normalize.__call__": [[56, 67], ["zip", "t.sub_"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n        Returns:\n            Tensor: Normalized image.\n        \"\"\"", "\n", "# TODO: make efficient", "\n", "for", "t", ",", "m", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.PlaceCrop.__init__": [[78, 85], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "start_x", ",", "start_y", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "start_x", "=", "start_x", "\n", "self", ".", "start_y", "=", "start_y", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.PlaceCrop.__call__": [[86, 95], ["img.crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be cropped.\n        Returns:\n            PIL.Image: Cropped image.\n        \"\"\"", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "return", "img", ".", "crop", "(", "(", "self", ".", "start_x", ",", "self", ".", "start_y", ",", "self", ".", "start_x", "+", "tw", ",", "self", ".", "start_y", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.ForceFlip.__call__": [[100, 108], ["img.transpose"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be flipped.\n        Returns:\n            PIL.Image: Randomly flipped image.\n        \"\"\"", "\n", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.CenterCrop.__init__": [[117, 122], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.CenterCrop.__call__": [[123, 136], ["int", "int"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be cropped.\n        Returns:\n            PIL.Image: Cropped image.\n        \"\"\"", "\n", "w", ",", "h", "=", "(", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", ")", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "w_off", "=", "int", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", "\n", "h_off", "=", "int", "(", "(", "h", "-", "th", ")", "/", "2.", ")", "\n", "img", "=", "img", "[", ":", ",", "h_off", ":", "h_off", "+", "th", ",", "w_off", ":", "w_off", "+", "tw", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.image_train": [[138, 147], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "", "def", "image_train", "(", "resize_size", "=", "256", ",", "crop_size", "=", "224", ",", "alexnet", "=", "False", ")", ":", "\n", "  ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "resize_size", ",", "resize_size", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "crop_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.image_target": [[148, 157], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "image_target", "(", "resize_size", "=", "256", ",", "crop_size", "=", "224", ",", "alexnet", "=", "False", ")", ":", "\n", "  ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "resize_size", ",", "resize_size", ")", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "224", ")", ",", "#TODO", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.image_test": [[159, 171], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "image_test", "(", "resize_size", "=", "256", ",", "crop_size", "=", "224", ",", "alexnet", "=", "False", ")", ":", "\n", "  ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "start_first", "=", "0", "\n", "start_center", "=", "(", "resize_size", "-", "crop_size", "-", "1", ")", "/", "2", "\n", "start_last", "=", "resize_size", "-", "crop_size", "-", "1", "\n", "\n", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "resize_size", ",", "resize_size", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.dataloader.ImageList.__init__": [[36, 49], ["dataloader.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.dataloader.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "image_list", ",", "labels", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "mode", "=", "'RGB'", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "image_list", ",", "labels", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in subfolders of: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "if", "mode", "==", "'RGB'", ":", "\n", "            ", "self", ".", "loader", "=", "rgb_loader", "\n", "", "elif", "mode", "==", "'L'", ":", "\n", "            ", "self", ".", "loader", "=", "l_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.dataloader.ImageList.__getitem__": [[50, 59], ["dataloader.ImageList.loader", "dataloader.ImageList.transform", "dataloader.ImageList.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "target", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.dataloader.ImageList.__len__": [[60, 62], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.dataloader.ImageSourceList.__init__": [[66, 92], ["range", "len", "open().readlines", "random.shuffle", "dataloader.make_dataset", "imgs.append", "len", "len", "len", "len", "RuntimeError", "round", "open", "len"], "methods", ["home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.dataloader.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "source_list", ",", "labels", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "mode", "=", "'RGB'", ",", "batch_number", "=", "16", ")", ":", "\n", "        ", "imgs", "=", "[", "]", "\n", "bigest", "=", "0", "\n", "for", "name", "in", "source_list", ":", "\n", "            ", "image_list", "=", "open", "(", "name", ")", ".", "readlines", "(", ")", "\n", "random", ".", "shuffle", "(", "image_list", ")", "\n", "if", "len", "(", "image_list", ")", ">", "bigest", ":", "\n", "                  ", "bigest", "=", "len", "(", "image_list", ")", "\n", "", "img", "=", "make_dataset", "(", "image_list", ",", "labels", ")", "\n", "if", "len", "(", "img", ")", "==", "0", ":", "\n", "                ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in subfolders of: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "", "imgs", ".", "append", "(", "img", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "source_list", ")", ")", ":", "\n", "             ", "imgs", "[", "i", "]", "=", "imgs", "[", "i", "]", "*", "round", "(", "0.5", "+", "bigest", "/", "len", "(", "imgs", "[", "i", "]", ")", ")", "\n", "", "self", ".", "domainnum", "=", "len", "(", "source_list", ")", "\n", "#self.batchnum = batch_number", "\n", "self", ".", "bigest", "=", "bigest", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "#from IPython import embed;embed();exit();", "\n", "if", "mode", "==", "'RGB'", ":", "\n", "            ", "self", ".", "loader", "=", "rgb_loader", "\n", "", "elif", "mode", "==", "'L'", ":", "\n", "            ", "self", ".", "loader", "=", "l_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.dataloader.ImageSourceList.__getitem__": [[93, 103], ["random.randint", "dataloader.ImageSourceList.loader", "dataloader.ImageSourceList.transform", "dataloader.ImageSourceList.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "#i,j = index//self.domainnum, index%self.domainnum", "\n", "        ", "j", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "domainnum", "-", "1", ")", "\n", "path", ",", "target", "=", "self", ".", "imgs", "[", "j", "]", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "", "return", "img", ",", "target", ",", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.dataloader.ImageSourceList.__len__": [[116, 118], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "bigest", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.dataloader.make_dataset": [[13, 23], ["len", "len", "image_list[].strip", "range", "image_list[].split", "numpy.array", "int", "val.split", "val.split", "int", "val.split", "val.split"], "function", ["None"], ["def", "make_dataset", "(", "image_list", ",", "labels", ")", ":", "\n", "    ", "if", "labels", ":", "\n", "      ", "len_", "=", "len", "(", "image_list", ")", "\n", "images", "=", "[", "(", "image_list", "[", "i", "]", ".", "strip", "(", ")", ",", "labels", "[", "i", ",", ":", "]", ")", "for", "i", "in", "range", "(", "len_", ")", "]", "\n", "", "else", ":", "\n", "      ", "if", "len", "(", "image_list", "[", "0", "]", ".", "split", "(", ")", ")", ">", "2", ":", "\n", "        ", "images", "=", "[", "(", "val", ".", "split", "(", ")", "[", "0", "]", ",", "np", ".", "array", "(", "[", "int", "(", "la", ")", "for", "la", "in", "val", ".", "split", "(", ")", "[", "1", ":", "]", "]", ")", ")", "for", "val", "in", "image_list", "]", "\n", "", "else", ":", "\n", "        ", "images", "=", "[", "(", "val", ".", "split", "(", ")", "[", "0", "]", ",", "int", "(", "val", ".", "split", "(", ")", "[", "1", "]", ")", ")", "for", "val", "in", "image_list", "]", "\n", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.dataloader.rgb_loader": [[25, 29], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["", "def", "rgb_loader", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.dataloader.l_loader": [[30, 34], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["", "", "", "def", "l_loader", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'L'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.scripts.train_ssda.image_classification_test": [[25, 46], ["torch.max", "torch.max", "torch.max", "torch.no_grad", "torch.no_grad", "torch.no_grad", "iter", "range", "torch.sum().item", "torch.sum().item", "torch.sum().item", "float", "len", "iter.next", "inputs.cuda.cuda", "labels.cuda.cuda", "model", "outputs.float", "labels.cuda.float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.cat.size", "outputs.float", "labels.cuda.float", "torch.squeeze().float", "torch.squeeze().float", "torch.squeeze().float", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "function", ["None"], ["def", "image_classification_test", "(", "loader", ",", "model", ",", "heuristic", "=", "False", ")", ":", "\n", "    ", "start_test", "=", "True", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "       ", "iter_test", "=", "iter", "(", "loader", "[", "\"test\"", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "loader", "[", "'test'", "]", ")", ")", ":", "\n", "           ", "data", "=", "iter_test", ".", "next", "(", ")", "\n", "inputs", "=", "data", "[", "0", "]", "\n", "labels", "=", "data", "[", "1", "]", "\n", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "_", ",", "outputs", ",", "_", "=", "model", "(", "inputs", ",", "heuristic", "=", "heuristic", ")", "\n", "if", "start_test", ":", "\n", "               ", "all_output", "=", "outputs", ".", "float", "(", ")", "\n", "all_label", "=", "labels", ".", "float", "(", ")", "\n", "start_test", "=", "False", "\n", "", "else", ":", "\n", "               ", "all_output", "=", "torch", ".", "cat", "(", "(", "all_output", ",", "outputs", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "all_label", "=", "torch", ".", "cat", "(", "(", "all_label", ",", "labels", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "", "", "", "_", ",", "predict", "=", "torch", ".", "max", "(", "all_output", ",", "1", ")", "\n", "accuracy", "=", "torch", ".", "sum", "(", "torch", ".", "squeeze", "(", "predict", ")", ".", "float", "(", ")", "==", "all_label", ")", ".", "item", "(", ")", "/", "float", "(", "all_label", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.scripts.train_ssda.nogauss": [[48, 55], ["torch.std().repeat", "torch.std().repeat", "torch.std().repeat", "torch.mean().repeat", "torch.mean().repeat", "torch.mean().repeat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.std", "torch.std", "torch.std", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "nogauss", "(", "a", ")", ":", "\n", "    ", "num", "=", "a", ".", "shape", "[", "1", "]", "\n", "std", "=", "torch", ".", "std", "(", "a", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "repeat", "(", "1", ",", "num", ")", "\n", "mean", "=", "torch", ".", "mean", "(", "a", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "repeat", "(", "1", ",", "num", ")", "\n", "cal", "=", "(", "a", "-", "mean", ")", "/", "std", "\n", "y", "=", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "cal", ",", "4", ")", ",", "1", ")", "-", "3", "*", "torch", ".", "pow", "(", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "cal", ",", "2", ")", ",", "1", ")", ",", "2", ")", "\n", "return", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.scripts.train_ssda.train_ssda": [[56, 198], ["dataset.image_target", "dataset.image_target", "dataset.image_target", "dataset.image_test", "dataset.dataloader.ImageList", "torch.utils.data.DataLoader", "dataset.dataloader.ImageList", "torch.utils.data.DataLoader", "dataset.dataloader.ImageList", "torch.utils.data.DataLoader", "dataset.dataloader.ImageList", "torch.utils.data.DataLoader", "nn.DataParallel.cuda", "network.AdversarialNetwork", "nn.DataParallel.cuda", "config[].split", "len", "len", "len", "range", "open().readlines", "open().readlines", "open().readlines", "open().readlines", "nn.DataParallel.get_parameters", "nn.DataParallel.get_parameters", "param_lr.append", "len", "torch.DataParallel", "torch.DataParallel", "nn.DataParallel.train", "nn.DataParallel.train", "lr_scheduler", "lr_scheduler.zero_grad", "iter.next", "iter.next", "iter.next", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nn.DataParallel.", "nn.DataParallel.", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.HDA_SSDA", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "total_loss.backward", "lr_scheduler.step", "nn.DataParallel.train", "train_ssda.image_classification_test", "torch.Sequential", "config[].write", "config[].flush", "print", "torch.save", "torch.save", "torch.save", "iter", "iter", "iter", "inputs_source.cuda", "inputs_target1.cuda", "labels_source.cuda", "inputs_target2.cuda", "labels_target1.cuda", "torch.Softmax", "network.calc_coeff", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.CrossEntropyLoss", "config[].write", "config[].flush", "print", "open", "open", "open", "open", "nn.DataParallel.state_dict", "os.join", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "train_ssda.nogauss", "train_ssda.nogauss", "int", "int", "int", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "enumerate", "enumerate", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "function", ["home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.image_target", "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.image_target", "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.image_target", "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.image_test", "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.AdversarialNetwork.get_parameters", "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.AdversarialNetwork.get_parameters", "home.repos.pwc.inspect_result.cuishuhao_HDA.utils.loss.HDA_SSDA", "home.repos.pwc.inspect_result.cuishuhao_HDA.scripts.train_msda.image_classification_test", "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.calc_coeff", "home.repos.pwc.inspect_result.cuishuhao_HDA.scripts.train_msda.nogauss", "home.repos.pwc.inspect_result.cuishuhao_HDA.scripts.train_msda.nogauss"], ["", "def", "train_ssda", "(", "config", ")", ":", "\n", "## set pre-process", "\n", "    ", "prep_dict", "=", "{", "}", "\n", "dsets", "=", "{", "}", "\n", "dset_loaders", "=", "{", "}", "\n", "data_config", "=", "config", "[", "\"data\"", "]", "\n", "prep_config", "=", "config", "[", "\"prep\"", "]", "\n", "prep_dict", "[", "\"source\"", "]", "=", "prep", ".", "image_target", "(", "**", "config", "[", "\"prep\"", "]", "[", "'params'", "]", ")", "\n", "prep_dict", "[", "\"target1\"", "]", "=", "prep", ".", "image_target", "(", "**", "config", "[", "\"prep\"", "]", "[", "'params'", "]", ")", "\n", "prep_dict", "[", "\"target2\"", "]", "=", "prep", ".", "image_target", "(", "**", "config", "[", "\"prep\"", "]", "[", "'params'", "]", ")", "\n", "prep_dict", "[", "\"test\"", "]", "=", "prep", ".", "image_test", "(", "**", "config", "[", "\"prep\"", "]", "[", "'params'", "]", ")", "\n", "\n", "## prepare data", "\n", "train_bs", "=", "data_config", "[", "\"source\"", "]", "[", "\"batch_size\"", "]", "\n", "test_bs", "=", "data_config", "[", "\"test\"", "]", "[", "\"batch_size\"", "]", "\n", "dsets", "[", "\"source\"", "]", "=", "ImageList", "(", "open", "(", "data_config", "[", "\"source\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "transform", "=", "prep_dict", "[", "\"source\"", "]", ")", "\n", "dset_loaders", "[", "\"source\"", "]", "=", "DataLoader", "(", "dsets", "[", "\"source\"", "]", ",", "batch_size", "=", "train_bs", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "drop_last", "=", "True", ")", "\n", "dsets", "[", "\"target1\"", "]", "=", "ImageList", "(", "open", "(", "data_config", "[", "\"target1\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "transform", "=", "prep_dict", "[", "\"target1\"", "]", ")", "\n", "dset_loaders", "[", "\"target1\"", "]", "=", "DataLoader", "(", "dsets", "[", "\"target1\"", "]", ",", "batch_size", "=", "train_bs", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "drop_last", "=", "True", ")", "\n", "\n", "dsets", "[", "\"target2\"", "]", "=", "ImageList", "(", "open", "(", "data_config", "[", "\"target2\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "transform", "=", "prep_dict", "[", "\"target2\"", "]", ")", "\n", "dset_loaders", "[", "\"target2\"", "]", "=", "DataLoader", "(", "dsets", "[", "\"target2\"", "]", ",", "batch_size", "=", "train_bs", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "drop_last", "=", "True", ")", "\n", "\n", "dsets", "[", "\"test\"", "]", "=", "ImageList", "(", "open", "(", "data_config", "[", "\"test\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "transform", "=", "prep_dict", "[", "\"test\"", "]", ")", "\n", "dset_loaders", "[", "\"test\"", "]", "=", "DataLoader", "(", "dsets", "[", "\"test\"", "]", ",", "batch_size", "=", "test_bs", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "\n", "## set base network", "\n", "class_num", "=", "config", "[", "\"network\"", "]", "[", "\"params\"", "]", "[", "\"class_num\"", "]", "\n", "net_config", "=", "config", "[", "\"network\"", "]", "\n", "base_network", "=", "net_config", "[", "\"name\"", "]", "(", "**", "net_config", "[", "\"params\"", "]", ")", "\n", "base_network", "=", "base_network", ".", "cuda", "(", ")", "\n", "\n", "## add additional network for some methods", "\n", "ad_net", "=", "network", ".", "AdversarialNetwork", "(", "class_num", ",", "1024", ",", "multi", "=", "3", ")", "\n", "ad_net", "=", "ad_net", ".", "cuda", "(", ")", "\n", "\n", "## set optimizer", "\n", "parameter_list", "=", "base_network", ".", "get_parameters", "(", ")", "+", "ad_net", ".", "get_parameters", "(", ")", "\n", "optimizer_config", "=", "config", "[", "\"optimizer\"", "]", "\n", "optimizer", "=", "optimizer_config", "[", "\"type\"", "]", "(", "parameter_list", ",", "**", "(", "optimizer_config", "[", "\"optim_params\"", "]", ")", ")", "\n", "param_lr", "=", "[", "]", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_lr", ".", "append", "(", "param_group", "[", "\"lr\"", "]", ")", "\n", "", "schedule_param", "=", "optimizer_config", "[", "\"lr_param\"", "]", "\n", "lr_scheduler", "=", "lr_schedule", ".", "schedule_dict", "[", "optimizer_config", "[", "\"lr_type\"", "]", "]", "\n", "\n", "#multi gpu", "\n", "gpus", "=", "config", "[", "'gpu'", "]", ".", "split", "(", "','", ")", "\n", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "        ", "ad_net", "=", "nn", ".", "DataParallel", "(", "ad_net", ",", "device_ids", "=", "[", "int", "(", "i", ")", "for", "i", ",", "k", "in", "enumerate", "(", "gpus", ")", "]", ")", "\n", "base_network", "=", "nn", ".", "DataParallel", "(", "base_network", ",", "device_ids", "=", "[", "int", "(", "i", ")", "for", "i", ",", "k", "in", "enumerate", "(", "gpus", ")", "]", ")", "\n", "\n", "## train   ", "\n", "", "len_train_source", "=", "len", "(", "dset_loaders", "[", "\"source\"", "]", ")", "\n", "len_train_target1", "=", "len", "(", "dset_loaders", "[", "\"target1\"", "]", ")", "\n", "len_train_target2", "=", "len", "(", "dset_loaders", "[", "\"target2\"", "]", ")", "\n", "transfer_loss_value", "=", "classifier_loss_value", "=", "total_loss_value", "=", "0.0", "\n", "for", "i", "in", "range", "(", "config", "[", "\"num_iterations\"", "]", ")", ":", "\n", "#test", "\n", "        ", "if", "(", "i", "%", "config", "[", "\"test_interval\"", "]", "==", "config", "[", "\"test_interval\"", "]", "-", "1", ")", "or", "(", "i", ">", "int", "(", "config", "[", "\"num_iterations\"", "]", "*", "0.9", ")", "and", "i", "%", "(", "config", "[", "\"test_interval\"", "]", "/", "2", ")", "==", "(", "config", "[", "\"test_interval\"", "]", "/", "2", ")", "-", "1", ")", ":", "\n", "            ", "base_network", ".", "train", "(", "False", ")", "\n", "temp_acc", "=", "image_classification_test", "(", "dset_loaders", ",", "base_network", ",", "heuristic", "=", "config", "[", "\"heuristic\"", "]", ")", "\n", "temp_model", "=", "nn", ".", "Sequential", "(", "base_network", ")", "\n", "log_str", "=", "\"iter: {:05d}, precision: {:.5f}\"", ".", "format", "(", "i", ",", "temp_acc", ")", "\n", "config", "[", "\"out_file\"", "]", ".", "write", "(", "log_str", "+", "\"\\n\"", ")", "\n", "config", "[", "\"out_file\"", "]", ".", "flush", "(", ")", "\n", "print", "(", "log_str", ")", "\n", "#save model", "\n", "", "if", "i", "%", "config", "[", "\"snapshot_interval\"", "]", "==", "0", "and", "i", ":", "\n", "            ", "torch", ".", "save", "(", "base_network", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "config", "[", "\"output_path\"", "]", ",", "\"iter_{:05d}_model.pth.tar\"", ".", "format", "(", "i", ")", ")", ")", "\n", "\n", "## train one iter", "\n", "", "base_network", ".", "train", "(", "True", ")", "\n", "ad_net", ".", "train", "(", "True", ")", "\n", "loss_params", "=", "config", "[", "\"loss\"", "]", "\n", "optimizer", "=", "lr_scheduler", "(", "optimizer", ",", "i", ",", "**", "schedule_param", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "#dataloader", "\n", "if", "i", "%", "len_train_source", "==", "0", ":", "\n", "            ", "iter_source", "=", "iter", "(", "dset_loaders", "[", "\"source\"", "]", ")", "\n", "", "if", "i", "%", "len_train_target1", "==", "0", ":", "\n", "            ", "iter_target1", "=", "iter", "(", "dset_loaders", "[", "\"target1\"", "]", ")", "\n", "", "if", "i", "%", "len_train_target2", "==", "0", ":", "\n", "            ", "iter_target2", "=", "iter", "(", "dset_loaders", "[", "\"target2\"", "]", ")", "\n", "\n", "#data    ", "\n", "", "inputs_source", ",", "labels_source", "=", "iter_source", ".", "next", "(", ")", "\n", "inputs_target1", ",", "labels_target1", "=", "iter_target1", ".", "next", "(", ")", "\n", "inputs_target2", ",", "_", "=", "iter_target2", ".", "next", "(", ")", "\n", "inputs_source", ",", "inputs_target1", ",", "labels_source", "=", "inputs_source", ".", "cuda", "(", ")", ",", "inputs_target1", ".", "cuda", "(", ")", ",", "labels_source", ".", "cuda", "(", ")", "\n", "inputs_target2", ",", "labels_target1", "=", "inputs_target2", ".", "cuda", "(", ")", ",", "labels_target1", ".", "cuda", "(", ")", "\n", "inputs_st", "=", "torch", ".", "cat", "(", "(", "inputs_source", ",", "inputs_target1", ")", ",", "0", ")", "\n", "labels_st", "=", "torch", ".", "cat", "(", "(", "labels_source", ",", "labels_target1", ")", ",", "0", ")", "\n", "\n", "#network", "\n", "features_st", ",", "outputs_st", ",", "focal_st", "=", "base_network", "(", "inputs_st", ",", "heuristic", "=", "config", "[", "\"heuristic\"", "]", ")", "\n", "features_t2", ",", "outputs_t2", ",", "focal_t2", "=", "base_network", "(", "inputs_target2", ",", "heuristic", "=", "config", "[", "\"heuristic\"", "]", ")", "\n", "focals", "=", "torch", ".", "cat", "(", "(", "focal_st", ",", "focal_t2", ")", ",", "dim", "=", "0", ")", "\n", "outputs", "=", "torch", ".", "cat", "(", "(", "outputs_st", ",", "outputs_t2", ")", ",", "dim", "=", "0", ")", "\n", "softmax_out", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "outputs", ")", "\n", "\n", "#loss calculation", "\n", "transfer_loss", ",", "mean_entropy", ",", "heuristic", "=", "loss", ".", "HDA_SSDA", "(", "[", "softmax_out", ",", "focals", "]", ",", "ad_net", ",", "network", ".", "calc_coeff", "(", "i", ")", ")", "\n", "\n", "#similarity", "\n", "sim_st", "=", "torch", ".", "sum", "(", "outputs_st", "*", "focal_st", ",", "1", ")", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "outputs_st", ",", "2", ")", ",", "1", ")", ")", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "focal_st", ",", "2", ")", ",", "1", ")", ")", "\n", "sim_t2", "=", "torch", ".", "sum", "(", "outputs_t2", "*", "focal_t2", ",", "1", ")", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "outputs_t2", ",", "2", ")", ",", "1", ")", ")", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "focal_t2", ",", "2", ")", ",", "1", ")", ")", "\n", "relate_source", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "sim_st", ")", ")", "\n", "relate_target", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "sim_t2", ")", ")", "\n", "relate_all", "=", "relate_source", "+", "relate_target", "\n", "\n", "#calculate theta", "\n", "#theta = torch.acos(torch.cat((sim_st,sim_t2)))", "\n", "#m_theta = torch.mean(theta)", "\n", "#s_theta = torch.std(theta)", "\n", "\n", "#gaussianity", "\n", "gaussian", "=", "torch", ".", "abs", "(", "nogauss", "(", "outputs", ")", "-", "nogauss", "(", "outputs", "+", "focals", ")", ")", "\n", "\n", "classifier_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "outputs_st", ",", "labels_st", ")", "\n", "total_loss", "=", "loss_params", "[", "\"trade_off\"", "]", "*", "transfer_loss", "+", "classifier_loss", "+", "config", "[", "\"heuristic\"", "]", "*", "heuristic", "#+ gaussian *config[\"gauss\"]", "\n", "\n", "total_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "#if i % (5*config[\"print_num\"]) == 0 or (i %(config[\"print_num\"])==0 and i<4*config[\"print_num\"]):", "\n", "if", "i", "%", "config", "[", "\"print_num\"", "]", "==", "0", ":", "\n", "            ", "log_str", "=", "\"iter:{:05d},transfer:{:.5f},classifier:{:.5f},heuristic:{:.5f},relate:{:.5f},gaussian:{:.5f}\"", ".", "format", "(", "i", ",", "transfer_loss", ",", "classifier_loss", ",", "heuristic", ",", "relate_all", ",", "gaussian", ")", "\n", "config", "[", "\"out_file\"", "]", ".", "write", "(", "log_str", "+", "\"\\n\"", ")", "\n", "config", "[", "\"out_file\"", "]", ".", "flush", "(", ")", "\n", "print", "(", "log_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.scripts.train_uda.image_classification_test": [[26, 47], ["torch.max", "torch.max", "torch.max", "torch.no_grad", "torch.no_grad", "torch.no_grad", "iter", "range", "torch.sum().item", "torch.sum().item", "torch.sum().item", "float", "len", "iter.next", "inputs.cuda.cuda", "labels.cuda.cuda", "model", "outputs.float", "labels.cuda.float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.cat.size", "outputs.float", "labels.cuda.float", "torch.squeeze().float", "torch.squeeze().float", "torch.squeeze().float", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "function", ["None"], ["def", "image_classification_test", "(", "loader", ",", "model", ",", "heuristic", "=", "False", ")", ":", "\n", "    ", "start_test", "=", "True", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "       ", "iter_test", "=", "iter", "(", "loader", "[", "\"test\"", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "loader", "[", "'test'", "]", ")", ")", ":", "\n", "           ", "data", "=", "iter_test", ".", "next", "(", ")", "\n", "inputs", "=", "data", "[", "0", "]", "\n", "labels", "=", "data", "[", "1", "]", "\n", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "_", ",", "outputs", ",", "_", "=", "model", "(", "inputs", ",", "heuristic", "=", "heuristic", ")", "\n", "if", "start_test", ":", "\n", "               ", "all_output", "=", "outputs", ".", "float", "(", ")", "\n", "all_label", "=", "labels", ".", "float", "(", ")", "\n", "start_test", "=", "False", "\n", "", "else", ":", "\n", "               ", "all_output", "=", "torch", ".", "cat", "(", "(", "all_output", ",", "outputs", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "all_label", "=", "torch", ".", "cat", "(", "(", "all_label", ",", "labels", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "", "", "", "_", ",", "predict", "=", "torch", ".", "max", "(", "all_output", ",", "1", ")", "\n", "accuracy", "=", "torch", ".", "sum", "(", "torch", ".", "squeeze", "(", "predict", ")", ".", "float", "(", ")", "==", "all_label", ")", ".", "item", "(", ")", "/", "float", "(", "all_label", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.scripts.train_uda.nogauss": [[49, 56], ["torch.std().repeat", "torch.std().repeat", "torch.std().repeat", "torch.mean().repeat", "torch.mean().repeat", "torch.mean().repeat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.std", "torch.std", "torch.std", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "nogauss", "(", "a", ")", ":", "\n", "    ", "num", "=", "a", ".", "shape", "[", "1", "]", "\n", "std", "=", "torch", ".", "std", "(", "a", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "repeat", "(", "1", ",", "num", ")", "\n", "mean", "=", "torch", ".", "mean", "(", "a", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "repeat", "(", "1", ",", "num", ")", "\n", "cal", "=", "(", "a", "-", "mean", ")", "/", "std", "\n", "y", "=", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "cal", ",", "4", ")", ",", "1", ")", "-", "3", "*", "torch", ".", "pow", "(", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "cal", ",", "2", ")", ",", "1", ")", ",", "2", ")", "\n", "return", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.scripts.train_uda.train_uda": [[57, 185], ["dataset.image_target", "dataset.image_target", "dataset.image_test", "dataset.dataloader.ImageList", "torch.utils.data.DataLoader", "dataset.dataloader.ImageList", "torch.utils.data.DataLoader", "dataset.dataloader.ImageList", "torch.utils.data.DataLoader", "nn.DataParallel.cuda", "network.AdversarialNetwork", "nn.DataParallel.cuda", "config[].split", "len", "len", "range", "open().readlines", "open().readlines", "open().readlines", "nn.DataParallel.get_parameters", "nn.DataParallel.get_parameters", "param_lr.append", "len", "torch.DataParallel", "torch.DataParallel", "nn.DataParallel.train", "nn.DataParallel.train", "lr_scheduler", "lr_scheduler.zero_grad", "iter.next", "iter.next", "nn.DataParallel.", "nn.DataParallel.", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "utils.HDA_UDA", "total_loss.backward", "lr_scheduler.step", "nn.DataParallel.train", "train_uda.image_classification_test", "torch.Sequential", "config[].write", "config[].flush", "print", "torch.save", "torch.save", "torch.save", "iter", "iter", "inputs_source.cuda", "inputs_target.cuda", "labels_source.cuda", "torch.Softmax", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "network.calc_coeff", "torch.CrossEntropyLoss", "config[].write", "config[].flush", "print", "open", "open", "open", "nn.DataParallel.state_dict", "os.join", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.cat", "torch.cat", "torch.cat", "train_uda.nogauss", "train_uda.nogauss", "int", "int", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "enumerate", "enumerate", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "function", ["home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.image_target", "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.image_target", "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.image_test", "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.AdversarialNetwork.get_parameters", "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.AdversarialNetwork.get_parameters", "home.repos.pwc.inspect_result.cuishuhao_HDA.utils.loss.HDA_UDA", "home.repos.pwc.inspect_result.cuishuhao_HDA.scripts.train_msda.image_classification_test", "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.calc_coeff", "home.repos.pwc.inspect_result.cuishuhao_HDA.scripts.train_msda.nogauss", "home.repos.pwc.inspect_result.cuishuhao_HDA.scripts.train_msda.nogauss"], ["", "def", "train_uda", "(", "config", ")", ":", "\n", "## set pre-process", "\n", "    ", "prep_dict", "=", "{", "}", "\n", "dsets", "=", "{", "}", "\n", "dset_loaders", "=", "{", "}", "\n", "data_config", "=", "config", "[", "\"data\"", "]", "\n", "prep_config", "=", "config", "[", "\"prep\"", "]", "\n", "prep_dict", "[", "\"source\"", "]", "=", "prep", ".", "image_target", "(", "**", "config", "[", "\"prep\"", "]", "[", "'params'", "]", ")", "\n", "prep_dict", "[", "\"target\"", "]", "=", "prep", ".", "image_target", "(", "**", "config", "[", "\"prep\"", "]", "[", "'params'", "]", ")", "\n", "prep_dict", "[", "\"test\"", "]", "=", "prep", ".", "image_test", "(", "**", "config", "[", "\"prep\"", "]", "[", "'params'", "]", ")", "\n", "\n", "## prepare data", "\n", "train_bs", "=", "data_config", "[", "\"source\"", "]", "[", "\"batch_size\"", "]", "\n", "test_bs", "=", "data_config", "[", "\"test\"", "]", "[", "\"batch_size\"", "]", "\n", "dsets", "[", "\"source\"", "]", "=", "ImageList", "(", "open", "(", "data_config", "[", "\"source\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "transform", "=", "prep_dict", "[", "\"source\"", "]", ")", "\n", "dset_loaders", "[", "\"source\"", "]", "=", "DataLoader", "(", "dsets", "[", "\"source\"", "]", ",", "batch_size", "=", "train_bs", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "drop_last", "=", "True", ")", "\n", "dsets", "[", "\"target\"", "]", "=", "ImageList", "(", "open", "(", "data_config", "[", "\"target\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "transform", "=", "prep_dict", "[", "\"target\"", "]", ")", "\n", "dset_loaders", "[", "\"target\"", "]", "=", "DataLoader", "(", "dsets", "[", "\"target\"", "]", ",", "batch_size", "=", "train_bs", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "drop_last", "=", "True", ")", "\n", "\n", "dsets", "[", "\"test\"", "]", "=", "ImageList", "(", "open", "(", "data_config", "[", "\"test\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "transform", "=", "prep_dict", "[", "\"test\"", "]", ")", "\n", "dset_loaders", "[", "\"test\"", "]", "=", "DataLoader", "(", "dsets", "[", "\"test\"", "]", ",", "batch_size", "=", "test_bs", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "\n", "## set base network", "\n", "class_num", "=", "config", "[", "\"network\"", "]", "[", "\"params\"", "]", "[", "\"class_num\"", "]", "\n", "net_config", "=", "config", "[", "\"network\"", "]", "\n", "base_network", "=", "net_config", "[", "\"name\"", "]", "(", "**", "net_config", "[", "\"params\"", "]", ")", "\n", "base_network", "=", "base_network", ".", "cuda", "(", ")", "\n", "\n", "## add additional network for some methods", "\n", "ad_net", "=", "network", ".", "AdversarialNetwork", "(", "class_num", ",", "1024", ")", "\n", "ad_net", "=", "ad_net", ".", "cuda", "(", ")", "\n", "\n", "## set optimizer", "\n", "parameter_list", "=", "base_network", ".", "get_parameters", "(", ")", "+", "ad_net", ".", "get_parameters", "(", ")", "\n", "optimizer_config", "=", "config", "[", "\"optimizer\"", "]", "\n", "optimizer", "=", "optimizer_config", "[", "\"type\"", "]", "(", "parameter_list", ",", "**", "(", "optimizer_config", "[", "\"optim_params\"", "]", ")", ")", "\n", "param_lr", "=", "[", "]", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_lr", ".", "append", "(", "param_group", "[", "\"lr\"", "]", ")", "\n", "", "schedule_param", "=", "optimizer_config", "[", "\"lr_param\"", "]", "\n", "lr_scheduler", "=", "lr_schedule", ".", "schedule_dict", "[", "optimizer_config", "[", "\"lr_type\"", "]", "]", "\n", "\n", "#multi gpu", "\n", "gpus", "=", "config", "[", "'gpu'", "]", ".", "split", "(", "','", ")", "\n", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "        ", "ad_net", "=", "nn", ".", "DataParallel", "(", "ad_net", ",", "device_ids", "=", "[", "int", "(", "i", ")", "for", "i", ",", "k", "in", "enumerate", "(", "gpus", ")", "]", ")", "\n", "base_network", "=", "nn", ".", "DataParallel", "(", "base_network", ",", "device_ids", "=", "[", "int", "(", "i", ")", "for", "i", ",", "k", "in", "enumerate", "(", "gpus", ")", "]", ")", "\n", "\n", "## train   ", "\n", "", "len_train_source", "=", "len", "(", "dset_loaders", "[", "\"source\"", "]", ")", "\n", "len_train_target", "=", "len", "(", "dset_loaders", "[", "\"target\"", "]", ")", "\n", "transfer_loss_value", "=", "classifier_loss_value", "=", "total_loss_value", "=", "0.0", "\n", "for", "i", "in", "range", "(", "config", "[", "\"num_iterations\"", "]", ")", ":", "\n", "#test", "\n", "        ", "if", "i", "%", "config", "[", "\"test_interval\"", "]", "==", "config", "[", "\"test_interval\"", "]", "-", "1", ":", "\n", "            ", "base_network", ".", "train", "(", "False", ")", "\n", "temp_acc", "=", "image_classification_test", "(", "dset_loaders", ",", "base_network", ",", "heuristic", "=", "config", "[", "\"heuristic\"", "]", ")", "\n", "temp_model", "=", "nn", ".", "Sequential", "(", "base_network", ")", "\n", "log_str", "=", "\"iter: {:05d}, precision: {:.5f}\"", ".", "format", "(", "i", ",", "temp_acc", ")", "\n", "config", "[", "\"out_file\"", "]", ".", "write", "(", "log_str", "+", "\"\\n\"", ")", "\n", "config", "[", "\"out_file\"", "]", ".", "flush", "(", ")", "\n", "print", "(", "log_str", ")", "\n", "\n", "#save model", "\n", "", "if", "i", "%", "config", "[", "\"snapshot_interval\"", "]", "==", "0", "and", "i", ":", "\n", "            ", "torch", ".", "save", "(", "base_network", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "config", "[", "\"output_path\"", "]", ",", "\"iter_{:05d}_model.pth.tar\"", ".", "format", "(", "i", ")", ")", ")", "\n", "\n", "## train one iter", "\n", "", "base_network", ".", "train", "(", "True", ")", "\n", "ad_net", ".", "train", "(", "True", ")", "\n", "loss_params", "=", "config", "[", "\"loss\"", "]", "\n", "optimizer", "=", "lr_scheduler", "(", "optimizer", ",", "i", ",", "**", "schedule_param", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "#dataloader", "\n", "if", "i", "%", "len_train_source", "==", "0", ":", "\n", "            ", "iter_source", "=", "iter", "(", "dset_loaders", "[", "\"source\"", "]", ")", "\n", "", "if", "i", "%", "len_train_target", "==", "0", ":", "\n", "            ", "iter_target", "=", "iter", "(", "dset_loaders", "[", "\"target\"", "]", ")", "\n", "\n", "#data    ", "\n", "", "inputs_source", ",", "labels_source", "=", "iter_source", ".", "next", "(", ")", "\n", "inputs_target", ",", "_", "=", "iter_target", ".", "next", "(", ")", "\n", "inputs_source", ",", "inputs_target", ",", "labels_source", "=", "inputs_source", ".", "cuda", "(", ")", ",", "inputs_target", ".", "cuda", "(", ")", ",", "labels_source", ".", "cuda", "(", ")", "\n", "\n", "#network", "\n", "features_source", ",", "outputs_source", ",", "focal_source", "=", "base_network", "(", "inputs_source", ",", "heuristic", "=", "config", "[", "\"heuristic\"", "]", ")", "\n", "features_target", ",", "outputs_target", ",", "focal_target", "=", "base_network", "(", "inputs_target", ",", "heuristic", "=", "config", "[", "\"heuristic\"", "]", ")", "\n", "features", "=", "torch", ".", "cat", "(", "(", "features_source", ",", "features_target", ")", ",", "dim", "=", "0", ")", "\n", "outputs", "=", "torch", ".", "cat", "(", "(", "outputs_source", ",", "outputs_target", ")", ",", "dim", "=", "0", ")", "\n", "focals", "=", "torch", ".", "cat", "(", "(", "focal_source", ",", "focal_target", ")", ",", "dim", "=", "0", ")", "\n", "softmax_out", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "outputs", ")", "\n", "\n", "#similarity", "\n", "sim_source", "=", "torch", ".", "sum", "(", "outputs_source", "*", "focal_source", ",", "1", ")", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "outputs_source", ",", "2", ")", ",", "1", ")", ")", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "focal_source", ",", "2", ")", ",", "1", ")", ")", "\n", "sim_target", "=", "torch", ".", "sum", "(", "outputs_target", "*", "focal_target", ",", "1", ")", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "outputs_target", ",", "2", ")", ",", "1", ")", ")", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "focal_target", ",", "2", ")", ",", "1", ")", ")", "\n", "relate_source", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "sim_source", ")", ")", "\n", "relate_target", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "sim_target", ")", ")", "\n", "relate_all", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "torch", ".", "cat", "(", "(", "sim_source", ",", "sim_target", ")", ",", "0", ")", ")", ")", "\n", "\n", "# calculate the theta value", "\n", "#theta = torch.acos(torch.cat((sim_source,sim_target)))", "\n", "#m_theta = torch.mean(theta)", "\n", "#s_theta = torch.std(theta)", "\n", "\n", "#calculate the gaussian", "\n", "gaussian", "=", "torch", ".", "abs", "(", "nogauss", "(", "outputs", ")", "-", "nogauss", "(", "outputs", "+", "focals", ")", ")", "\n", "#loss calculation", "\n", "transfer_loss", ",", "mean_entropy", ",", "heuristic", "=", "loss", ".", "HDA_UDA", "(", "[", "softmax_out", ",", "focals", "]", ",", "ad_net", ",", "network", ".", "calc_coeff", "(", "i", ")", ")", "\n", "classifier_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "outputs_source", ",", "labels_source", ")", "\n", "total_loss", "=", "loss_params", "[", "\"trade_off\"", "]", "*", "transfer_loss", "+", "classifier_loss", "+", "config", "[", "\"heuristic\"", "]", "*", "heuristic", "#+ config[\"gauss\"] *gaussian", "\n", "\n", "if", "i", "%", "config", "[", "\"print_num\"", "]", "==", "0", ":", "\n", "            ", "log_str", "=", "\"iter:{:05d},transfer:{:.5f},classifier:{:.5f},heuristic:{:.5f},relate:{:.5f},gaussian:{:.5f}\"", ".", "format", "(", "i", ",", "transfer_loss", ",", "classifier_loss", ",", "heuristic", ",", "relate_all", ",", "gaussian", ")", "\n", "config", "[", "\"out_file\"", "]", ".", "write", "(", "log_str", "+", "\"\\n\"", ")", "\n", "config", "[", "\"out_file\"", "]", ".", "flush", "(", ")", "\n", "print", "(", "log_str", ")", "\n", "\n", "", "total_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.scripts.train_msda.image_classification_test": [[23, 44], ["torch.max", "torch.max", "torch.max", "torch.no_grad", "torch.no_grad", "torch.no_grad", "iter", "range", "torch.sum().item", "torch.sum().item", "torch.sum().item", "float", "len", "iter.next", "inputs.cuda.cuda", "labels.cuda.cuda", "model", "outputs.float", "labels.cuda.float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.cat.size", "outputs.float", "labels.cuda.float", "torch.squeeze().float", "torch.squeeze().float", "torch.squeeze().float", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "function", ["None"], ["def", "image_classification_test", "(", "loader", ",", "model", ",", "heuristic", "=", "False", ")", ":", "\n", "    ", "start_test", "=", "True", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "       ", "iter_test", "=", "iter", "(", "loader", "[", "\"test\"", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "loader", "[", "'test'", "]", ")", ")", ":", "\n", "           ", "data", "=", "iter_test", ".", "next", "(", ")", "\n", "inputs", "=", "data", "[", "0", "]", "\n", "labels", "=", "data", "[", "1", "]", "\n", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "_", ",", "outputs", ",", "_", "=", "model", "(", "inputs", ",", "heuristic", "=", "heuristic", ")", "\n", "if", "start_test", ":", "\n", "               ", "all_output", "=", "outputs", ".", "float", "(", ")", "\n", "all_label", "=", "labels", ".", "float", "(", ")", "\n", "start_test", "=", "False", "\n", "", "else", ":", "\n", "               ", "all_output", "=", "torch", ".", "cat", "(", "(", "all_output", ",", "outputs", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "all_label", "=", "torch", ".", "cat", "(", "(", "all_label", ",", "labels", ".", "float", "(", ")", ")", ",", "0", ")", "\n", "", "", "", "_", ",", "predict", "=", "torch", ".", "max", "(", "all_output", ",", "1", ")", "\n", "accuracy", "=", "torch", ".", "sum", "(", "torch", ".", "squeeze", "(", "predict", ")", ".", "float", "(", ")", "==", "all_label", ")", ".", "item", "(", ")", "/", "float", "(", "all_label", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.scripts.train_msda.nogauss": [[46, 53], ["torch.std().repeat", "torch.std().repeat", "torch.std().repeat", "torch.mean().repeat", "torch.mean().repeat", "torch.mean().repeat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.std", "torch.std", "torch.std", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "nogauss", "(", "a", ")", ":", "\n", "    ", "num", "=", "a", ".", "shape", "[", "1", "]", "\n", "std", "=", "torch", ".", "std", "(", "a", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "repeat", "(", "1", ",", "num", ")", "\n", "mean", "=", "torch", ".", "mean", "(", "a", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "repeat", "(", "1", ",", "num", ")", "\n", "cal", "=", "(", "a", "-", "mean", ")", "/", "std", "\n", "y", "=", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "cal", ",", "4", ")", ",", "1", ")", "-", "3", "*", "torch", ".", "pow", "(", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "cal", ",", "2", ")", ",", "1", ")", ",", "2", ")", "\n", "return", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cuishuhao_HDA.scripts.train_msda.train_msda": [[54, 184], ["dataset.image_target", "dataset.image_target", "dataset.image_test", "config[].remove", "len", "dataset.dataloader.ImageSourceList", "torch.utils.data.DataLoader", "dataset.dataloader.ImageList", "torch.utils.data.DataLoader", "dataset.dataloader.ImageList", "torch.utils.data.DataLoader", "nn.DataParallel.cuda", "network.AdversarialNetwork", "nn.DataParallel.cuda", "config[].split", "len", "len", "range", "open().readlines", "open().readlines", "nn.DataParallel.get_parameters", "nn.DataParallel.get_parameters", "param_lr.append", "len", "torch.DataParallel", "torch.DataParallel", "nn.DataParallel.train", "nn.DataParallel.train", "lr_scheduler", "lr_scheduler.zero_grad", "iter.next", "iter.next", "nn.DataParallel.", "nn.DataParallel.", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "utils.HDA_MSDA", "total_loss.backward", "lr_scheduler.step", "nn.DataParallel.train", "train_msda.image_classification_test", "torch.Sequential", "config[].write", "config[].flush", "print", "torch.save", "torch.save", "torch.save", "iter", "iter", "inputs_source.cuda", "inputs_target.cuda", "labels_source.cuda", "label_domain.cuda", "torch.Softmax", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "network.calc_coeff", "torch.CrossEntropyLoss", "config[].write", "config[].flush", "print", "open", "open", "nn.DataParallel.state_dict", "os.join", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "train_msda.nogauss", "train_msda.nogauss", "int", "int", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "enumerate", "enumerate", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "function", ["home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.image_target", "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.image_target", "home.repos.pwc.inspect_result.cuishuhao_HDA.dataset.preprocess.image_test", "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.AdversarialNetwork.get_parameters", "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.AdversarialNetwork.get_parameters", "home.repos.pwc.inspect_result.cuishuhao_HDA.utils.loss.HDA_MSDA", "home.repos.pwc.inspect_result.cuishuhao_HDA.scripts.train_msda.image_classification_test", "home.repos.pwc.inspect_result.cuishuhao_HDA.network.network.calc_coeff", "home.repos.pwc.inspect_result.cuishuhao_HDA.scripts.train_msda.nogauss", "home.repos.pwc.inspect_result.cuishuhao_HDA.scripts.train_msda.nogauss"], ["", "def", "train_msda", "(", "config", ")", ":", "\n", "## set pre-process", "\n", "    ", "prep_dict", "=", "{", "}", "\n", "dsets", "=", "{", "}", "\n", "dset_loaders", "=", "{", "}", "\n", "data_config", "=", "config", "[", "\"data\"", "]", "\n", "prep_config", "=", "config", "[", "\"prep\"", "]", "\n", "prep_dict", "[", "\"source\"", "]", "=", "prep", ".", "image_target", "(", "**", "config", "[", "\"prep\"", "]", "[", "'params'", "]", ")", "\n", "prep_dict", "[", "\"target\"", "]", "=", "prep", ".", "image_target", "(", "**", "config", "[", "\"prep\"", "]", "[", "'params'", "]", ")", "\n", "prep_dict", "[", "\"test\"", "]", "=", "prep", ".", "image_test", "(", "**", "config", "[", "\"prep\"", "]", "[", "'params'", "]", ")", "\n", "\n", "## prepare data", "\n", "train_bs", "=", "data_config", "[", "\"target\"", "]", "[", "\"batch_size\"", "]", "\n", "test_bs", "=", "data_config", "[", "\"test\"", "]", "[", "\"batch_size\"", "]", "\n", "config", "[", "'data_list'", "]", ".", "remove", "(", "data_config", "[", "\"target\"", "]", "[", "\"list_path\"", "]", ")", "\n", "domain_number", "=", "len", "(", "config", "[", "'data_list'", "]", ")", "\n", "\n", "dsets", "[", "\"source\"", "]", "=", "ImageSourceList", "(", "config", "[", "'data_list'", "]", ",", "transform", "=", "prep_dict", "[", "\"source\"", "]", ",", "batch_number", "=", "train_bs", ")", "\n", "dset_loaders", "[", "\"source\"", "]", "=", "DataLoader", "(", "dsets", "[", "\"source\"", "]", ",", "batch_size", "=", "train_bs", "*", "domain_number", ",", "shuffle", "=", "True", ",", "num_workers", "=", "10", ",", "drop_last", "=", "True", ")", "\n", "dsets", "[", "\"target\"", "]", "=", "ImageList", "(", "open", "(", "data_config", "[", "\"target\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "transform", "=", "prep_dict", "[", "\"target\"", "]", ")", "\n", "dset_loaders", "[", "\"target\"", "]", "=", "DataLoader", "(", "dsets", "[", "\"target\"", "]", ",", "batch_size", "=", "train_bs", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "drop_last", "=", "True", ")", "\n", "\n", "dsets", "[", "\"test\"", "]", "=", "ImageList", "(", "open", "(", "data_config", "[", "\"test\"", "]", "[", "\"list_path\"", "]", ")", ".", "readlines", "(", ")", ",", "transform", "=", "prep_dict", "[", "\"test\"", "]", ")", "\n", "dset_loaders", "[", "\"test\"", "]", "=", "DataLoader", "(", "dsets", "[", "\"test\"", "]", ",", "batch_size", "=", "test_bs", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "\n", "## set base network", "\n", "class_num", "=", "config", "[", "\"network\"", "]", "[", "\"params\"", "]", "[", "\"class_num\"", "]", "\n", "net_config", "=", "config", "[", "\"network\"", "]", "\n", "base_network", "=", "net_config", "[", "\"name\"", "]", "(", "**", "net_config", "[", "\"params\"", "]", ")", "\n", "base_network", "=", "base_network", ".", "cuda", "(", ")", "\n", "\n", "## add additional network for some methods", "\n", "ad_net", "=", "network", ".", "AdversarialNetwork", "(", "class_num", ",", "1024", ",", "multi", "=", "domain_number", "+", "1", ")", "\n", "ad_net", "=", "ad_net", ".", "cuda", "(", ")", "\n", "\n", "## set optimizer", "\n", "parameter_list", "=", "base_network", ".", "get_parameters", "(", ")", "+", "ad_net", ".", "get_parameters", "(", ")", "\n", "optimizer_config", "=", "config", "[", "\"optimizer\"", "]", "\n", "optimizer", "=", "optimizer_config", "[", "\"type\"", "]", "(", "parameter_list", ",", "**", "(", "optimizer_config", "[", "\"optim_params\"", "]", ")", ")", "\n", "param_lr", "=", "[", "]", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_lr", ".", "append", "(", "param_group", "[", "\"lr\"", "]", ")", "\n", "", "schedule_param", "=", "optimizer_config", "[", "\"lr_param\"", "]", "\n", "lr_scheduler", "=", "lr_schedule", ".", "schedule_dict", "[", "optimizer_config", "[", "\"lr_type\"", "]", "]", "\n", "\n", "#multi gpu", "\n", "gpus", "=", "config", "[", "'gpu'", "]", ".", "split", "(", "','", ")", "\n", "if", "len", "(", "gpus", ")", ">", "1", ":", "\n", "        ", "ad_net", "=", "nn", ".", "DataParallel", "(", "ad_net", ",", "device_ids", "=", "[", "int", "(", "i", ")", "for", "i", ",", "k", "in", "enumerate", "(", "gpus", ")", "]", ")", "\n", "base_network", "=", "nn", ".", "DataParallel", "(", "base_network", ",", "device_ids", "=", "[", "int", "(", "i", ")", "for", "i", ",", "k", "in", "enumerate", "(", "gpus", ")", "]", ")", "\n", "\n", "## train   ", "\n", "", "len_train_source", "=", "len", "(", "dset_loaders", "[", "\"source\"", "]", ")", "\n", "len_train_target", "=", "len", "(", "dset_loaders", "[", "\"target\"", "]", ")", "\n", "for", "i", "in", "range", "(", "config", "[", "\"num_iterations\"", "]", ")", ":", "\n", "#test", "\n", "        ", "if", "i", "%", "config", "[", "\"test_interval\"", "]", "==", "config", "[", "\"test_interval\"", "]", "-", "1", ":", "\n", "            ", "base_network", ".", "train", "(", "False", ")", "\n", "temp_acc", "=", "image_classification_test", "(", "dset_loaders", ",", "base_network", ",", "heuristic", "=", "config", "[", "\"heuristic\"", "]", ")", "\n", "temp_model", "=", "nn", ".", "Sequential", "(", "base_network", ")", "\n", "log_str", "=", "\"iter: {:05d}, precision: {:.5f}\"", ".", "format", "(", "i", ",", "temp_acc", ")", "\n", "config", "[", "\"out_file\"", "]", ".", "write", "(", "log_str", "+", "\"\\n\"", ")", "\n", "config", "[", "\"out_file\"", "]", ".", "flush", "(", ")", "\n", "print", "(", "log_str", ")", "\n", "#save model", "\n", "", "if", "i", "%", "config", "[", "\"snapshot_interval\"", "]", "==", "0", "and", "i", ":", "\n", "            ", "torch", ".", "save", "(", "base_network", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "config", "[", "\"output_path\"", "]", ",", "\"iter_{:05d}_model.pth.tar\"", ".", "format", "(", "i", ")", ")", ")", "\n", "\n", "## train one iter", "\n", "", "base_network", ".", "train", "(", "True", ")", "\n", "ad_net", ".", "train", "(", "True", ")", "\n", "loss_params", "=", "config", "[", "\"loss\"", "]", "\n", "optimizer", "=", "lr_scheduler", "(", "optimizer", ",", "i", ",", "**", "schedule_param", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "#dataloader", "\n", "if", "i", "%", "len_train_source", "==", "0", ":", "\n", "            ", "iter_source", "=", "iter", "(", "dset_loaders", "[", "\"source\"", "]", ")", "\n", "", "if", "i", "%", "len_train_target", "==", "0", ":", "\n", "            ", "iter_target", "=", "iter", "(", "dset_loaders", "[", "\"target\"", "]", ")", "\n", "\n", "#network", "\n", "", "inputs_source", ",", "labels_source", ",", "label_domain", "=", "iter_source", ".", "next", "(", ")", "\n", "inputs_target", ",", "_", "=", "iter_target", ".", "next", "(", ")", "\n", "inputs_source", ",", "inputs_target", ",", "labels_source", ",", "label_domain", "=", "inputs_source", ".", "cuda", "(", ")", ",", "inputs_target", ".", "cuda", "(", ")", ",", "labels_source", ".", "cuda", "(", ")", ",", "label_domain", ".", "cuda", "(", ")", "\n", "\n", "#network", "\n", "features_source", ",", "outputs_source", ",", "focal_source", "=", "base_network", "(", "inputs_source", ",", "heuristic", "=", "config", "[", "\"heuristic\"", "]", ")", "\n", "features_target", ",", "outputs_target", ",", "focal_target", "=", "base_network", "(", "inputs_target", ",", "heuristic", "=", "config", "[", "\"heuristic\"", "]", ")", "\n", "features", "=", "torch", ".", "cat", "(", "(", "features_source", ",", "features_target", ")", ",", "dim", "=", "0", ")", "\n", "outputs", "=", "torch", ".", "cat", "(", "(", "outputs_source", ",", "outputs_target", ")", ",", "dim", "=", "0", ")", "\n", "focals", "=", "torch", ".", "cat", "(", "(", "focal_source", ",", "focal_target", ")", ",", "dim", "=", "0", ")", "\n", "softmax_out", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "outputs", ")", "\n", "\n", "#similarity", "\n", "sim_source", "=", "torch", ".", "sum", "(", "outputs_source", "*", "focal_source", ",", "1", ")", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "outputs_source", ",", "2", ")", ",", "1", ")", ")", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "focal_source", ",", "2", ")", ",", "1", ")", ")", "\n", "sim_target", "=", "torch", ".", "sum", "(", "outputs_target", "*", "focal_target", ",", "1", ")", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "outputs_target", ",", "2", ")", ",", "1", ")", ")", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "focal_target", ",", "2", ")", ",", "1", ")", ")", "\n", "relate_source", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "sim_source", ")", ")", "\n", "relate_target", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "sim_target", ")", ")", "\n", "relate_all", "=", "relate_source", "+", "relate_target", "\n", "\n", "# calculate the theta value", "\n", "#theta = torch.acos(torch.cat((sim_source,sim_target)))", "\n", "#m_theta = torch.mean(theta)", "\n", "#s_theta = torch.std(theta)", "\n", "\n", "#calculate the gaussian", "\n", "gaussian", "=", "torch", ".", "abs", "(", "nogauss", "(", "outputs", ")", "-", "nogauss", "(", "outputs", "+", "focals", ")", ")", "\n", "\n", "#loss calculation", "\n", "transfer_loss", ",", "mean_entropy", ",", "heuristic", "=", "loss", ".", "HDA_MSDA", "(", "[", "softmax_out", ",", "focals", ",", "label_domain", "]", ",", "ad_net", ",", "network", ".", "calc_coeff", "(", "i", ")", ")", "\n", "classifier_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "outputs_source", ",", "labels_source", ")", "\n", "total_loss", "=", "loss_params", "[", "\"trade_off\"", "]", "*", "transfer_loss", "+", "classifier_loss", "+", "config", "[", "\"heuristic\"", "]", "*", "heuristic", "#+ config['gauss'] * gaussian", "\n", "\n", "if", "i", "%", "(", "config", "[", "\"print_num\"", "]", ")", "==", "0", ":", "\n", "            ", "log_str", "=", "\"iter:{:05d},transfer:{:.5f},classifier:{:.5f},heuristic:{:.5f},relate:{:.5f},gaussian:{:.5f}\"", ".", "format", "(", "i", ",", "transfer_loss", ",", "classifier_loss", ",", "heuristic", ",", "relate_all", ",", "gaussian", ")", "\n", "config", "[", "\"out_file\"", "]", ".", "write", "(", "log_str", "+", "\"\\n\"", ")", "\n", "config", "[", "\"out_file\"", "]", ".", "flush", "(", ")", "\n", "print", "(", "log_str", ")", "\n", "\n", "", "total_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "", ""]]}