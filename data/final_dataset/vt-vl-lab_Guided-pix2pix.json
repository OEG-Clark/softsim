{"home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.None.evaluate.load_network": [[9, 29], ["print", "isinstance", "torch.load", "model.cuda", "model.load_state_dict", "model.load_state_dict", "model.cpu().state_dict", "model.cpu"], "function", ["None"], ["def", "load_network", "(", "model", ",", "save_path", ")", ":", "\n", "    ", "print", "(", "'loading the TextureGAN model from %s'", "%", "save_path", ")", "\n", "if", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "", "model_state", "=", "torch", ".", "load", "(", "save_path", ")", "\n", "if", "\"state_dict\"", "in", "model_state", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_state", "[", "\"state_dict\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_state", ")", "\n", "model_state", "=", "{", "\n", "'state_dict'", ":", "model", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'iteration'", ":", "iteration", ",", "\n", "'model'", ":", "args", ".", "model", ",", "\n", "'color_space'", ":", "args", ".", "color_space", ",", "\n", "'batch_size'", ":", "args", ".", "batch_size", ",", "\n", "'dataset'", ":", "dataset", ",", "\n", "'image_size'", ":", "args", ".", "image_size", "\n", "}", "\n", "", "model", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.toLAB.__init__": [[24, 26], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "space", "=", "'LAB'", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.toLAB.__call__": [[27, 30], ["skimage.color.rgb2lab", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ")", ":", "\n", "        ", "lab_images", "=", "[", "color", ".", "rgb2lab", "(", "np", ".", "array", "(", "image", ")", "/", "255.0", ")", "for", "image", "in", "images", "]", "\n", "return", "lab_images", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.toRGB_.__init__": [[37, 39], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "space", "=", "'LAB'", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.toRGB_.__call__": [[40, 44], ["numpy.transpose", "numpy.transpose.numpy", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ")", ":", "\n", "        ", "images", "=", "np", ".", "transpose", "(", "images", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "rgb_images", "=", "[", "(", "np", ".", "array", "(", "image", ")", "/", "255.0", ")", "for", "image", "in", "images", "]", "\n", "return", "rgb_images", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.toRGB.__init__": [[51, 53], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "space", "=", "'LAB'", ")", ":", "\n", "        ", "self", ".", "space", "=", "space", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.toRGB.__call__": [[54, 65], ["numpy.transpose", "skimage.color.lab2rgb", "numpy.transpose", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ")", ":", "\n", "        ", "if", "self", ".", "space", "==", "'LAB'", ":", "\n", "# npimg = np.transpose(np.array(images), (1, 2, 0))", "\n", "# print(image)", "\n", "            ", "rgb_img", "=", "[", "np", ".", "transpose", "(", "color", ".", "lab2rgb", "(", "np", ".", "transpose", "(", "image", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", ",", "(", "2", ",", "0", ",", "1", ")", ")", "for", "image", "in", "images", "]", "\n", "", "elif", "self", ".", "space", "==", "'RGB'", ":", "\n", "# print np.shape(images)", "\n", "# images = np.transpose(images.numpy(), (1, 2, 0))", "\n", "            ", "rgb_img", "=", "[", "(", "np", ".", "array", "(", "image", ")", "/", "255.0", ")", "for", "image", "in", "images", "]", "\n", "\n", "", "return", "rgb_img", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.toTensor.__init__": [[70, 72], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "space", "=", "'RGB'", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.toTensor.__call__": [[73, 76], ["torch.from_numpy", "pic.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "pics", ")", ":", "\n", "        ", "imgs", "=", "[", "torch", ".", "from_numpy", "(", "pic", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "for", "pic", "in", "pics", "]", "\n", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.Compose.__init__": [[206, 208], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.Compose.__call__": [[209, 213], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "imgs", "=", "t", "(", "imgs", ")", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.Scale.__init__": [[226, 231], ["torchvision.transforms.Scale", "isinstance", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "assert", "isinstance", "(", "size", ",", "int", ")", "or", "(", "isinstance", "(", "size", ",", "collections", ".", "Iterable", ")", "and", "len", "(", "size", ")", "==", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "transform", "=", "torchvision", ".", "transforms", ".", "Scale", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.Scale.__call__": [[232, 240], ["texture_transforms.Scale.transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            imgs (list of PIL.Image): Images to be scaled.\n        Returns:\n            list of PIL.Image: Rescaled images.\n        \"\"\"", "\n", "return", "[", "self", ".", "transform", "(", "img", ")", "for", "img", "in", "imgs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.CenterCrop.__init__": [[250, 256], ["isinstance", "torchvision.transforms.CenterCrop", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "transform", "=", "torchvision", ".", "transforms", ".", "CenterCrop", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.CenterCrop.__call__": [[257, 265], ["texture_transforms.CenterCrop.transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            imgs (PIL.Image): Image to be cropped.\n        Returns:\n            PIL.Image: Cropped image.\n        \"\"\"", "\n", "return", "[", "self", ".", "transform", "(", "img", ")", "for", "img", "in", "imgs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.Pad.__init__": [[279, 290], ["isinstance", "isinstance", "torchvision.transforms.Pad", "isinstance", "ValueError", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "padding", ",", "fill", "=", "0", ")", ":", "\n", "        ", "assert", "isinstance", "(", "padding", ",", "(", "numbers", ".", "Number", ",", "tuple", ")", ")", "\n", "assert", "isinstance", "(", "fill", ",", "(", "numbers", ".", "Number", ",", "str", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "padding", ",", "collections", ".", "Sequence", ")", "and", "len", "(", "padding", ")", "not", "in", "[", "2", ",", "4", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"Padding must be an int or a 2, or 4 element tuple, not a \"", "+", "\n", "\"{} element tuple\"", ".", "format", "(", "len", "(", "padding", ")", ")", ")", "\n", "\n", "", "self", ".", "padding", "=", "padding", "\n", "self", ".", "fill", "=", "fill", "\n", "\n", "self", ".", "transform", "=", "torchvision", ".", "transforms", ".", "Pad", "(", "padding", ",", "fill", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.Pad.__call__": [[291, 300], ["texture_transforms.Pad.transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be padded.\n        Returns:\n            PIL.Image: Padded image.\n        \"\"\"", "\n", "\n", "return", "[", "self", ".", "transform", "(", "img", ")", "for", "img", "in", "imgs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.RandomCrop.__init__": [[314, 320], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "0", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.RandomCrop.__call__": [[321, 339], ["random.randint", "random.randint", "img.crop", "PIL.ImageOps.expand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be cropped.\n        Returns:\n            PIL.Image: Cropped image.\n        \"\"\"", "\n", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "imgs", "=", "[", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "for", "img", "in", "imgs", "]", "\n", "\n", "", "w", ",", "h", "=", "imgs", "[", "0", "]", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "imgs", "\n", "\n", "", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "return", "[", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "for", "img", "in", "imgs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.RandomHorizontalFlip.__call__": [[344, 354], ["random.random", "img.transpose"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be flipped.\n        Returns:\n            PIL.Image: Randomly flipped image.\n        \"\"\"", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "return", "[", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "for", "img", "in", "imgs", "]", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.RandomSizedCrop.__init__": [[367, 371], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "min_resize", "=", "0.08", ",", "max_resize", "=", "1.0", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "resize_size", "=", "(", "min_resize", ",", "max_resize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.RandomSizedCrop.__call__": [[372, 397], ["range", "texture_transforms.Scale", "texture_transforms.CenterCrop", "CenterCrop.", "random.uniform", "int", "int", "Scale.", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "math.sqrt", "math.sqrt", "img.crop", "img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "imgs", "[", "0", "]", ".", "size", "[", "0", "]", "*", "imgs", "[", "0", "]", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "self", ".", "resize_size", "[", "0", "]", ",", "self", ".", "resize_size", "[", "1", "]", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "3.", "/", "4", ",", "4.", "/", "3", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "imgs", "[", "0", "]", ".", "size", "[", "0", "]", "and", "h", "<=", "imgs", "[", "0", "]", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "imgs", "[", "0", "]", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "imgs", "[", "0", "]", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "\n", "imgs", "=", "[", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "for", "img", "in", "imgs", "]", "\n", "assert", "(", "[", "img", ".", "size", "==", "(", "w", ",", "h", ")", "for", "img", "in", "imgs", "]", ")", "\n", "\n", "return", "[", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", "for", "img", "in", "imgs", "]", "\n", "\n", "# Fallback", "\n", "", "", "scale", "=", "Scale", "(", "self", ".", "size", ",", "interpolation", "=", "self", ".", "interpolation", ")", "\n", "crop", "=", "CenterCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "scale", "(", "imgs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.normalize_lab": [[78, 100], ["torch.zeros", "torch.zeros", "lab_img.size", "lab_img.size", "torch.zeros.double", "lab_img.double", "torch.zeros.double"], "function", ["None"], ["", "", "def", "normalize_lab", "(", "lab_img", ")", ":", "\n", "    ", "\"\"\"\n    Normalizes the LAB image to lie in range 0-1\n    \n    Args:\n    lab_img : torch.Tensor img in lab space\n    \n    Returns:\n    lab_img : torch.Tensor Normalized lab_img \n    \"\"\"", "\n", "mean", "=", "torch", ".", "zeros", "(", "lab_img", ".", "size", "(", ")", ")", "\n", "stds", "=", "torch", ".", "zeros", "(", "lab_img", ".", "size", "(", ")", ")", "\n", "\n", "mean", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "50", "\n", "mean", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "0", "\n", "mean", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "0", "\n", "\n", "stds", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "50", "\n", "stds", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "128", "\n", "stds", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "128", "\n", "\n", "return", "(", "lab_img", ".", "double", "(", ")", "-", "mean", ".", "double", "(", ")", ")", "/", "stds", ".", "double", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.normalize_seg": [[101, 118], ["torch.round", "torch.max"], "function", ["None"], ["", "def", "normalize_seg", "(", "seg", ")", ":", "\n", "    ", "\"\"\"\n    Normalizes the LAB image to lie in range 0-1\n    \n    Args:\n    lab_img : torch.Tensor img in lab space\n    \n    Returns:\n    lab_img : torch.Tensor Normalized lab_img \n    \"\"\"", "\n", "result", "=", "seg", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "if", "torch", ".", "max", "(", "result", ")", ">", "1", ":", "\n", "        ", "result", "=", "result", "/", "100.0", "\n", "", "result", "=", "torch", ".", "round", "(", "result", ")", "\n", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.normalize_rgb": [[119, 141], ["torch.zeros", "torch.zeros", "rgb_img.size", "rgb_img.size", "torch.zeros.double", "rgb_img.double", "torch.zeros.double"], "function", ["None"], ["", "def", "normalize_rgb", "(", "rgb_img", ")", ":", "\n", "    ", "\"\"\"\n    Normalizes the LAB image to lie in range 0-1\n    \n    Args:\n    lab_img : torch.Tensor img in lab space\n    \n    Returns:\n    lab_img : torch.Tensor Normalized lab_img \n    \"\"\"", "\n", "mean", "=", "torch", ".", "zeros", "(", "rgb_img", ".", "size", "(", ")", ")", "\n", "stds", "=", "torch", ".", "zeros", "(", "rgb_img", ".", "size", "(", ")", ")", "\n", "\n", "mean", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "0.485", "\n", "mean", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "0.456", "\n", "mean", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "0.406", "\n", "\n", "stds", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "0.229", "\n", "stds", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "0.224", "\n", "stds", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "0.225", "\n", "\n", "return", "(", "rgb_img", ".", "double", "(", ")", "-", "mean", ".", "double", "(", ")", ")", "/", "stds", ".", "double", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.denormalize_lab": [[143, 165], ["torch.zeros", "torch.zeros", "lab_img.size", "lab_img.size", "torch.zeros.double", "lab_img.double", "torch.zeros.double"], "function", ["None"], ["", "def", "denormalize_lab", "(", "lab_img", ")", ":", "\n", "    ", "\"\"\"\n    Normalizes the LAB image to lie in range 0-1\n    \n    Args:\n    lab_img : torch.Tensor img in lab space\n    \n    Returns:\n    lab_img : torch.Tensor Normalized lab_img \n    \"\"\"", "\n", "mean", "=", "torch", ".", "zeros", "(", "lab_img", ".", "size", "(", ")", ")", "\n", "stds", "=", "torch", ".", "zeros", "(", "lab_img", ".", "size", "(", ")", ")", "\n", "\n", "mean", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "50", "\n", "mean", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "0", "\n", "mean", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "0", "\n", "\n", "stds", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "50", "\n", "stds", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "128", "\n", "stds", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "128", "\n", "\n", "return", "lab_img", ".", "double", "(", ")", "*", "stds", ".", "double", "(", ")", "+", "mean", ".", "double", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.denormalize_rgb": [[167, 189], ["torch.zeros", "torch.zeros", "rgb_img.size", "rgb_img.size", "torch.zeros.double", "rgb_img.double", "torch.zeros.double"], "function", ["None"], ["", "def", "denormalize_rgb", "(", "rgb_img", ")", ":", "\n", "    ", "\"\"\"\n    Normalizes the LAB image to lie in range 0-1\n    \n    Args:\n    lab_img : torch.Tensor img in lab space\n    \n    Returns:\n    lab_img : torch.Tensor Normalized lab_img \n    \"\"\"", "\n", "mean", "=", "torch", ".", "zeros", "(", "rgb_img", ".", "size", "(", ")", ")", "\n", "stds", "=", "torch", ".", "zeros", "(", "rgb_img", ".", "size", "(", ")", ")", "\n", "\n", "mean", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "0.485", "\n", "mean", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "0.456", "\n", "mean", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "0.406", "\n", "\n", "stds", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "0.229", "\n", "stds", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "0.224", "\n", "stds", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "0.225", "\n", "\n", "return", "rgb_img", ".", "double", "(", ")", "*", "stds", ".", "double", "(", ")", "+", "mean", ".", "double", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.image_pool.ImagePool.__init__": [[6, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pool_size", ")", ":", "\n", "        ", "self", ".", "pool_size", "=", "pool_size", "\n", "if", "self", ".", "pool_size", ">", "0", ":", "\n", "            ", "self", ".", "num_imgs", "=", "0", "\n", "self", ".", "images", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.image_pool.ImagePool.query": [[12, 33], ["torch.cat", "torch.unsqueeze", "image_pool.ImagePool.images.append", "torch.cat.append", "random.uniform", "random.randint", "image_pool.ImagePool.images[].clone", "torch.cat.append", "torch.cat.append"], "methods", ["None"], ["", "", "def", "query", "(", "self", ",", "images", ")", ":", "\n", "        ", "if", "self", ".", "pool_size", "==", "0", ":", "\n", "            ", "return", "images", "\n", "", "return_images", "=", "[", "]", "\n", "for", "image", "in", "images", ":", "\n", "            ", "image", "=", "torch", ".", "unsqueeze", "(", "image", ".", "data", ",", "0", ")", "\n", "if", "self", ".", "num_imgs", "<", "self", ".", "pool_size", ":", "\n", "                ", "self", ".", "num_imgs", "=", "self", ".", "num_imgs", "+", "1", "\n", "self", ".", "images", ".", "append", "(", "image", ")", "\n", "return_images", ".", "append", "(", "image", ")", "\n", "", "else", ":", "\n", "                ", "p", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "p", ">", "0.5", ":", "\n", "                    ", "random_id", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "pool_size", "-", "1", ")", "# randint is inclusive", "\n", "tmp", "=", "self", ".", "images", "[", "random_id", "]", ".", "clone", "(", ")", "\n", "self", ".", "images", "[", "random_id", "]", "=", "image", "\n", "return_images", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                    ", "return_images", ".", "append", "(", "image", ")", "\n", "", "", "", "return_images", "=", "torch", ".", "cat", "(", "return_images", ",", "0", ")", "\n", "return", "return_images", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.tensor2im": [[12, 22], ["isinstance", "image_tensor[].cpu().float().numpy", "np.tile.astype", "numpy.tile", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["def", "tensor2im", "(", "input_image", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "if", "isinstance", "(", "input_image", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "image_tensor", "=", "input_image", ".", "data", "\n", "", "else", ":", "\n", "        ", "return", "input_image", "\n", "", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "if", "image_numpy", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "image_numpy", "=", "np", ".", "tile", "(", "image_numpy", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.diagnose_network": [[24, 35], ["net.parameters", "print", "print", "torch.mean", "torch.abs"], "function", ["None"], ["", "def", "diagnose_network", "(", "net", ",", "name", "=", "'network'", ")", ":", "\n", "    ", "mean", "=", "0.0", "\n", "count", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "            ", "mean", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "param", ".", "grad", ".", "data", ")", ")", "\n", "count", "+=", "1", "\n", "", "", "if", "count", ">", "0", ":", "\n", "        ", "mean", "=", "mean", "/", "count", "\n", "", "print", "(", "name", ")", "\n", "print", "(", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.save_image": [[37, 40], ["PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ")", ":", "\n", "    ", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.print_current_losses": [[42, 47], ["losses.items", "print"], "function", ["None"], ["", "def", "print_current_losses", "(", "epoch", ",", "i", ",", "losses", ",", "t", ",", "t_data", ")", ":", "\n", "    ", "message", "=", "'(epoch: %d, iters: %d, time: %.3f, data: %.3f) '", "%", "(", "epoch", ",", "i", ",", "t", ",", "t_data", ")", "\n", "for", "k", ",", "v", "in", "losses", ".", "items", "(", ")", ":", "\n", "        ", "message", "+=", "'%s: %.3f '", "%", "(", "k", ",", "v", ")", "\n", "", "print", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.mkdirs": [[49, 55], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.mkdir", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.mkdir"], ["", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.mkdir": [[57, 60], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.visualize_pose": [[62, 74], ["util.tensor2im", "util.tensor2im", "util.tensor2im", "pose[].cpu().float().numpy", "numpy.transpose", "numpy.amax", "numpy.tile().astype", "numpy.expand_dims", "pose[].cpu().float", "np.amax.squeeze", "numpy.tile", "pose[].cpu"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.tensor2im", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.tensor2im", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.tensor2im"], ["", "", "def", "visualize_pose", "(", "input_batch", ",", "guide_batch", ",", "target_batch", ",", "output_batch", ")", ":", "\n", "# convert to numpy image", "\n", "    ", "input", "=", "tensor2im", "(", "input_batch", ")", "\n", "target", "=", "tensor2im", "(", "target_batch", ")", "\n", "output", "=", "tensor2im", "(", "output_batch", ")", "\n", "pose", "=", "guide_batch", ".", "data", "\n", "pose_np", "=", "pose", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "pose_np", "=", "np", ".", "transpose", "(", "pose_np", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "pose", "=", "np", ".", "amax", "(", "np", ".", "expand_dims", "(", "pose_np", ",", "0", ")", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "pose", "=", "(", "pose", ".", "squeeze", "(", "0", ")", "+", "1.0", ")", "*", "127.5", "\n", "guide", "=", "np", ".", "tile", "(", "pose", ",", "(", "1", ",", "1", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "input", ",", "guide", ",", "target", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.depth2im": [[76, 82], ["depth[].squeeze().cpu().float().numpy", "numpy.stack", "depth[].squeeze().cpu().float", "depth[].squeeze().cpu", "depth[].squeeze"], "function", ["None"], ["", "def", "depth2im", "(", "depth", ")", ":", "\n", "    ", "depth", "=", "depth", ".", "data", "\n", "depth_np", "=", "depth", "[", "0", "]", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "depth_np", "=", "np", ".", "stack", "(", "(", "depth_np", ",", ")", "*", "3", ",", "-", "1", ")", "\n", "depth", "=", "(", "(", "depth_np", "+", "1.0", ")", "*", "127.5", ")", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.visualize_depth": [[83, 90], ["util.depth2im", "util.depth2im", "util.depth2im", "util.tensor2im"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.depth2im", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.depth2im", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.depth2im", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.tensor2im"], ["", "def", "visualize_depth", "(", "input_batch", ",", "guide_batch", ",", "target_batch", ",", "output_batch", ")", ":", "\n", "# process the depth (input/target/output) ", "\n", "    ", "input", "=", "depth2im", "(", "input_batch", ")", "\n", "target", "=", "depth2im", "(", "target_batch", ")", "\n", "output", "=", "depth2im", "(", "output_batch", ")", "\n", "guide", "=", "tensor2im", "(", "guide_batch", ")", "\n", "return", "input", ",", "guide", ",", "target", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.visualize_texture": [[92, 132], ["input_batch.cpu.cpu", "vis_image.cpu", "vis_image.cpu", "vis_image.detach().cpu", "guide_batch[].unsqueeze", "texture_transforms.denormalize_lab", "texture_transforms.denormalize_lab", "texture_transforms.denormalize_lab", "util.vis_image", "util.vis_image", "util.vis_image", "numpy.transpose", "numpy.stack", "numpy.transpose", "numpy.transpose", "mask_batch[].numpy", "output.round().astype.round().astype", "guide.round().astype.round().astype", "target.round().astype.round().astype", "input.round().astype.round().astype", "vis_image.detach", "output.round().astype.round", "guide.round().astype.round", "target.round().astype.round", "input.round().astype.round", "input_batch[].numpy().squeeze", "input_batch[].numpy"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.denormalize_lab", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.denormalize_lab", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.denormalize_lab", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.vis_image", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.vis_image", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.vis_image"], ["", "def", "visualize_texture", "(", "input_batch", ",", "guide_batch", ",", "target_batch", ",", "output_batch", ")", ":", "\n", "    ", "input_batch", "=", "input_batch", ".", "cpu", "(", ")", "\n", "guide_batch", "=", "guide_batch", ".", "cpu", "(", ")", "\n", "target_batch", "=", "target_batch", ".", "cpu", "(", ")", "\n", "output_batch", "=", "output_batch", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "# process the guide", "\n", "# Concatenation of [channel for texture intensity + two channels for color + channel for binary location mask]", "\n", "mask_batch", "=", "guide_batch", "[", ":", ",", "3", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "3", ")", "\n", "# mask = -1 of not included and 1 if included", "\n", "# change this to 0 and 1 respectively", "\n", "mask_batch", "[", "mask_batch", "==", "-", "1", "]", "=", "0", "\n", "guide_batch", "=", "guide_batch", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", "\n", "## denormalize to LAB", "\n", "guide_batch", "=", "custom_transforms", ".", "denormalize_lab", "(", "guide_batch", ")", "\n", "target_batch", "=", "custom_transforms", ".", "denormalize_lab", "(", "target_batch", ")", "\n", "output_batch", "=", "custom_transforms", ".", "denormalize_lab", "(", "output_batch", ")", "\n", "# convert to RGB for visualization", "\n", "guide_batch", "=", "vis_image", "(", "guide_batch", ")", "\n", "target_batch", "=", "vis_image", "(", "target_batch", ")", "\n", "output_batch", "=", "vis_image", "(", "output_batch", ")", "\n", "# get [h,w,c]", "\n", "output", "=", "np", ".", "transpose", "(", "output_batch", "[", "0", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "input", "=", "np", ".", "stack", "(", "(", "input_batch", "[", "0", "]", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ",", ")", "*", "3", ",", "-", "1", ")", "# [h,w,3]", "\n", "target", "=", "np", ".", "transpose", "(", "target_batch", "[", "0", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "guide", "=", "np", ".", "transpose", "(", "guide_batch", "[", "0", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "# get [0,255]", "\n", "output", "=", "(", "output", "*", "255", ")", "\n", "input", "=", "(", "input", "*", "255", ")", "\n", "target", "=", "(", "target", "*", "255", ")", "\n", "guide", "=", "(", "guide", "*", "255", ")", "\n", "# put texture on top of sketch", "\n", "current_mask", "=", "mask_batch", "[", "0", "]", ".", "numpy", "(", ")", "\n", "guide", "=", "guide", "*", "current_mask", "+", "(", "1", "-", "current_mask", ")", "*", "input", "\n", "# round and to uint8", "\n", "output", "=", "output", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "guide", "=", "guide", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "target", "=", "target", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "input", "=", "input", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# return processed values        ", "\n", "return", "input", ",", "guide", ",", "target", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.save_texture_out": [[133, 148], ["vis_image.detach().cpu", "texture_transforms.denormalize_lab", "util.vis_image", "numpy.transpose", "output.round().astype.round().astype", "util.mkdir", "util.save_image", "os.path.join", "vis_image.detach", "output.round().astype.round"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.denormalize_lab", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.vis_image", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.mkdir", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.save_image"], ["", "def", "save_texture_out", "(", "output_batch", ",", "path", ",", "index", ")", ":", "\n", "    ", "output_batch", "=", "output_batch", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "## denormalize to LAB", "\n", "output_batch", "=", "custom_transforms", ".", "denormalize_lab", "(", "output_batch", ")", "\n", "# convert to RGB for visualization", "\n", "output_batch", "=", "vis_image", "(", "output_batch", ")", "\n", "# get [h,w,c]", "\n", "output", "=", "np", ".", "transpose", "(", "output_batch", "[", "0", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "# get [0,255]", "\n", "output", "=", "(", "output", "*", "255", ")", "\n", "# round and to uint8", "\n", "output", "=", "output", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# save", "\n", "mkdir", "(", "path", ")", "\n", "save_image", "(", "output", ",", "os", ".", "path", ".", "join", "(", "path", ",", "'%d.png'", "%", "index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.vis_image": [[149, 157], ["torch.cuda.is_available", "img.cpu.numpy", "texture_transforms.toRGB", "custom_transforms.toRGB.", "img.cpu.cpu"], "function", ["None"], ["", "def", "vis_image", "(", "img", ")", ":", "\n", "# returb RGB numpy image [0,1]", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "img", "=", "img", ".", "cpu", "(", ")", "\n", "", "img", "=", "img", ".", "numpy", "(", ")", "\n", "ToRGB", "=", "custom_transforms", ".", "toRGB", "(", ")", "\n", "img_np", "=", "ToRGB", "(", "img", ")", "\n", "return", "img_np", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.save": [[159, 184], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "util.mkdir", "util.mkdir", "util.mkdir", "util.mkdir", "util.save_image", "util.save_image", "util.save_image", "util.save_image", "util.visualize_depth", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "util.visualize_pose", "util.visualize_texture", "print"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.mkdir", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.mkdir", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.mkdir", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.mkdir", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.save_image", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.save_image", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.save_image", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.save_image", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.visualize_depth", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.visualize_pose", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.visualize_texture"], ["", "def", "save", "(", "input", ",", "guide", ",", "target", ",", "output", ",", "path", ",", "index", ",", "opt", ")", ":", "\n", "    ", "task", "=", "opt", ".", "task", "\n", "if", "(", "task", "==", "'depth'", ")", ":", "\n", "    \t", "input", ",", "guide", ",", "target", ",", "output", "=", "visualize_depth", "(", "input", ",", "guide", ",", "target", ",", "output", ")", "\n", "", "elif", "(", "task", "==", "'pose'", ")", ":", "\n", "    \t", "input", ",", "guide", ",", "target", ",", "output", "=", "visualize_pose", "(", "input", ",", "guide", ",", "target", ",", "output", ")", "\n", "", "elif", "(", "task", "==", "'texture'", ")", ":", "\n", "    \t", "input", ",", "guide", ",", "target", ",", "output", "=", "visualize_texture", "(", "input", ",", "guide", ",", "target", ",", "output", ")", "\n", "", "else", ":", "\n", "    \t", "print", "(", "'Invalid task. Valid tasks are [depth, pose, or texture].'", ")", "\n", "\n", "", "input_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'input'", ")", "\n", "guide_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'guide'", ")", "\n", "target_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'target'", ")", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'output'", ")", "\n", "\n", "mkdir", "(", "input_path", ")", "\n", "mkdir", "(", "guide_path", ")", "\n", "mkdir", "(", "target_path", ")", "\n", "mkdir", "(", "output_path", ")", "\n", "\n", "save_image", "(", "input", ",", "os", ".", "path", ".", "join", "(", "input_path", ",", "'%d.png'", "%", "index", ")", ")", "\n", "save_image", "(", "guide", ",", "os", ".", "path", ".", "join", "(", "guide_path", ",", "'%d.png'", "%", "index", ")", ")", "\n", "save_image", "(", "target", ",", "os", ".", "path", ".", "join", "(", "target_path", ",", "'%d.png'", "%", "index", ")", ")", "\n", "save_image", "(", "output", ",", "os", ".", "path", ".", "join", "(", "output_path", ",", "'%d.png'", "%", "index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.evaluate_depth": [[186, 218], ["os.path.join", "scipy.io.loadmat", "mat[].squeeze", "os.path.join", "scipy.io.loadmat", "mat[].squeeze", "range", "print", "len", "real.squeeze.squeeze", "fake.squeeze.squeeze", "numpy.sqrt", "rmse.append", "numpy.mean", "numpy.mean", "target.data.cpu().numpy", "output.data.cpu().numpy", "target.data.cpu", "output.data.cpu"], "function", ["None"], ["", "def", "evaluate_depth", "(", "output_list", ",", "target_list", ",", "opt", ")", ":", "\n", "    ", "import", "scipy", ".", "io", "\n", "# read min/max for normalization", "\n", "file", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'max_16x.mat'", ")", "\n", "mat", "=", "scipy", ".", "io", ".", "loadmat", "(", "file", ")", "\n", "max_", "=", "mat", "[", "'max_16x'", "]", ".", "squeeze", "(", ")", "\n", "file", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'min_16x.mat'", ")", "\n", "mat", "=", "scipy", ".", "io", ".", "loadmat", "(", "file", ")", "\n", "min_", "=", "mat", "[", "'min_16x'", "]", ".", "squeeze", "(", ")", "\n", "rmse", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "output_list", ")", ")", ":", "\n", "        ", "target", "=", "target_list", "[", "i", "]", "[", "0", "]", "[", "0", "]", "\n", "output", "=", "output_list", "[", "i", "]", "[", "0", "]", "[", "0", "]", "\n", "# reverse normalization", "\n", "cur_max", "=", "max_", "[", "i", "]", "\n", "cur_min", "=", "min_", "[", "i", "]", "\n", "real", "=", "(", "(", "target", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "+", "1", ")", "/", "2", ")", "# back to [0,1]", "\n", "real", "=", "(", "real", "*", "(", "cur_max", "-", "cur_min", ")", ")", "+", "cur_min", "# convert to meters", "\n", "real", "=", "real", "*", "100", "# convert to cm", "\n", "fake", "=", "(", "(", "output", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "+", "1", ")", "/", "2", ")", "\n", "fake", "=", "(", "fake", "*", "(", "cur_max", "-", "cur_min", ")", ")", "+", "cur_min", "\n", "fake", "=", "fake", "*", "100", "\n", "# remove the edge for fair comparison with state-of-the-art", "\n", "real", "=", "real", ".", "squeeze", "(", ")", "\n", "fake", "=", "fake", ".", "squeeze", "(", ")", "\n", "h", "=", "480", "\n", "w", "=", "640", "\n", "real", "=", "real", "[", "7", ":", "h", "-", "6", ",", "7", ":", "w", "-", "6", "]", "\n", "fake", "=", "fake", "[", "7", ":", "h", "-", "6", ",", "7", ":", "w", "-", "6", "]", "\n", "current_rmse", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "(", "real", "-", "fake", ")", "**", "2", ")", ")", "\n", "rmse", ".", "append", "(", "current_rmse", ")", "\n", "", "print", "(", "'RMSE = %f'", "%", "np", ".", "mean", "(", "rmse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.evaluate_pose": [[220, 227], ["range", "print", "eval.InceptionScore.get_inception_score", "print", "len", "ssim.append", "skimage.measure.compare_ssim", "numpy.mean", "numpy.std"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.eval.InceptionScore.get_inception_score"], ["", "def", "evaluate_pose", "(", "output_list", ",", "target_list", ")", ":", "\n", "    ", "ssim", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "output_list", ")", ")", ":", "\n", "        ", "ssim", ".", "append", "(", "compare_ssim", "(", "output_list", "[", "i", "]", ",", "target_list", "[", "i", "]", ",", "multichannel", "=", "True", ")", ")", "\n", "", "print", "(", "'SSIM Score: mean = %f, std= %f'", "%", "(", "np", ".", "mean", "(", "ssim", ")", ",", "np", ".", "std", "(", "ssim", ")", ")", ")", "\n", "mean", ",", "std", "=", "get_inception_score", "(", "output_list", ")", "\n", "print", "(", "'Inception Score: mean = %f, std= %f'", "%", "(", "mean", ",", "std", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.eval.InceptionScore.get_inception_score": [[31, 62], ["type", "type", "len", "numpy.max", "numpy.min", "img.astype.astype", "inps.append", "tensorflow.Session", "int", "range", "numpy.concatenate", "range", "numpy.max", "numpy.min", "numpy.expand_dims", "math.ceil", "sys.stdout.write", "sys.stdout.write", "sys.stdout.flush", "sys.stdout.flush", "numpy.concatenate", "sess.run", "np.concatenate.append", "numpy.mean", "scores.append", "numpy.mean", "numpy.std", "numpy.sum", "numpy.exp", "float", "float", "min", "numpy.log", "numpy.log", "len", "len", "numpy.expand_dims", "numpy.mean"], "function", ["None"], ["def", "get_inception_score", "(", "images", ",", "splits", "=", "10", ")", ":", "\n", "  ", "assert", "(", "type", "(", "images", ")", "==", "list", ")", "\n", "assert", "(", "type", "(", "images", "[", "0", "]", ")", "==", "np", ".", "ndarray", ")", "\n", "assert", "(", "len", "(", "images", "[", "0", "]", ".", "shape", ")", "==", "3", ")", "\n", "if", "(", "np", ".", "max", "(", "images", "[", "0", "]", ")", "<=", "10", "or", "np", ".", "min", "(", "images", "[", "0", "]", ")", "<", "0.0", ")", ":", "\n", "    ", "return", "False", ",", "0", ",", "0", "\n", "", "assert", "(", "np", ".", "max", "(", "images", "[", "0", "]", ")", ">", "10", ")", "\n", "assert", "(", "np", ".", "min", "(", "images", "[", "0", "]", ")", ">=", "0.0", ")", "\n", "inps", "=", "[", "]", "\n", "for", "img", "in", "images", ":", "\n", "    ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "inps", ".", "append", "(", "np", ".", "expand_dims", "(", "img", ",", "0", ")", ")", "\n", "", "bs", "=", "100", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "    ", "preds", "=", "[", "]", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "len", "(", "inps", ")", ")", "/", "float", "(", "bs", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "\".\"", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "inp", "=", "inps", "[", "(", "i", "*", "bs", ")", ":", "min", "(", "(", "i", "+", "1", ")", "*", "bs", ",", "len", "(", "inps", ")", ")", "]", "\n", "inp", "=", "np", ".", "concatenate", "(", "inp", ",", "0", ")", "\n", "pred", "=", "sess", ".", "run", "(", "softmax", ",", "{", "'ExpandDims:0'", ":", "inp", "}", ")", "\n", "preds", ".", "append", "(", "pred", ")", "\n", "", "preds", "=", "np", ".", "concatenate", "(", "preds", ",", "0", ")", "\n", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "splits", ")", ":", "\n", "      ", "part", "=", "preds", "[", "(", "i", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ":", "(", "(", "i", "+", "1", ")", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ",", ":", "]", "\n", "kl", "=", "part", "*", "(", "np", ".", "log", "(", "part", ")", "-", "np", ".", "log", "(", "np", ".", "expand_dims", "(", "np", ".", "mean", "(", "part", ",", "0", ")", ",", "0", ")", ")", ")", "\n", "kl", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "kl", ",", "1", ")", ")", "\n", "scores", ".", "append", "(", "np", ".", "exp", "(", "kl", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "scores", ")", ",", "np", ".", "std", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.eval.InceptionScore._init_inception": [[64, 103], ["os.path.join", "tarfile.open().extractall", "os.path.exists", "os.makedirs", "DATA_URL.split", "os.path.exists", "six.moves.urllib.request.urlretrieve", "print", "os.stat", "print", "tensorflow.gfile.FastGFile", "tensorflow.GraphDef", "tf.GraphDef.ParseFromString", "tensorflow.import_graph_def", "tensorflow.Session", "sess.graph.get_tensor_by_name", "sess.graph.get_tensor_by_name.graph.get_operations", "enumerate", "tensorflow.matmul", "tensorflow.nn.softmax", "sys.stdout.write", "sys.stdout.write", "sys.stdout.flush", "sys.stdout.flush", "tarfile.open", "os.path.join", "f.read", "tensorflow.squeeze", "o.get_shape", "enumerate", "tensorflow.TensorShape", "sess.graph.get_operation_by_name", "new_shape.append", "new_shape.append", "float", "float"], "function", ["None"], ["", "", "def", "_init_inception", "(", ")", ":", "\n", "  ", "global", "softmax", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "MODEL_DIR", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "MODEL_DIR", ")", "\n", "", "filename", "=", "DATA_URL", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "    ", "def", "_progress", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "      ", "sys", ".", "stdout", ".", "write", "(", "'\\r>> Downloading %s %.1f%%'", "%", "(", "\n", "filename", ",", "float", "(", "count", "*", "block_size", ")", "/", "float", "(", "total_size", ")", "*", "100.0", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "filepath", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "DATA_URL", ",", "filepath", ",", "_progress", ")", "\n", "print", "(", ")", "\n", "statinfo", "=", "os", ".", "stat", "(", "filepath", ")", "\n", "print", "(", "'Succesfully downloaded'", ",", "filename", ",", "statinfo", ".", "st_size", ",", "'bytes.'", ")", "\n", "", "tarfile", ".", "open", "(", "filepath", ",", "'r:gz'", ")", ".", "extractall", "(", "MODEL_DIR", ")", "\n", "with", "tf", ".", "gfile", ".", "FastGFile", "(", "os", ".", "path", ".", "join", "(", "\n", "MODEL_DIR", ",", "'classify_image_graph_def.pb'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "    ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "_", "=", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "''", ")", "\n", "# Works with an arbitrary minibatch size.", "\n", "", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "    ", "pool3", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "'pool_3:0'", ")", "\n", "ops", "=", "pool3", ".", "graph", ".", "get_operations", "(", ")", "\n", "for", "op_idx", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "        ", "for", "o", "in", "op", ".", "outputs", ":", "\n", "            ", "shape", "=", "o", ".", "get_shape", "(", ")", "\n", "shape", "=", "[", "s", ".", "value", "for", "s", "in", "shape", "]", "\n", "new_shape", "=", "[", "]", "\n", "for", "j", ",", "s", "in", "enumerate", "(", "shape", ")", ":", "\n", "                ", "if", "s", "==", "1", "and", "j", "==", "0", ":", "\n", "                    ", "new_shape", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "new_shape", ".", "append", "(", "s", ")", "\n", "", "", "o", ".", "_shape", "=", "tf", ".", "TensorShape", "(", "new_shape", ")", "\n", "", "", "w", "=", "sess", ".", "graph", ".", "get_operation_by_name", "(", "\"softmax/logits/MatMul\"", ")", ".", "inputs", "[", "1", "]", "\n", "logits", "=", "tf", ".", "matmul", "(", "tf", ".", "squeeze", "(", "pool3", ")", ",", "w", ")", "\n", "softmax", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.texturegan.TextureGAN.__init__": [[7, 27], ["torch.Module.__init__", "texturegan.TextureGAN.create_model"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.__init__.create_model"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", ")", ":", "\n", "        ", "\"\"\"\n        Defines the necessary modules of the TextureGAN Generator\n\n        Input:\n        - int input_nc : Input number of channels\n        - int output_nc : Output number of channels\n        \"\"\"", "\n", "super", "(", "TextureGAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "\n", "self", ".", "batch_norm", "=", "nn", ".", "BatchNorm2d", "\n", "self", ".", "ngf", "=", "ngf", "\n", "self", ".", "input_nc", "=", "input_nc", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "\n", "self", ".", "res_block", "=", "ResidualBlock", "\n", "self", ".", "biup", "=", "UpsamplingBlock", "\n", "self", ".", "main_model", "=", "MainModel", "\n", "self", ".", "model", "=", "self", ".", "create_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.texturegan.TextureGAN.create_model": [[28, 39], ["torch.Sequential", "torch.Sequential", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "texturegan.TextureGAN.main_model", "texturegan.TextureGAN.conv", "texturegan.TextureGAN.res_block", "texturegan.TextureGAN.res_block", "texturegan.TextureGAN.conv", "texturegan.TextureGAN.batch_norm"], "methods", ["None"], ["", "def", "create_model", "(", "self", ")", ":", "\n", "        ", "skip_block", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "skip_block", ".", "add_module", "(", "'main_model'", ",", "self", ".", "main_model", "(", "self", ".", "input_nc", ",", "self", ".", "output_nc", ",", "self", ".", "ngf", ")", ")", "\n", "skip_block", ".", "add_module", "(", "'conv_6'", ",", "self", ".", "conv", "(", "self", ".", "ngf", "+", "5", ",", "self", ".", "ngf", "*", "2", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "skip_block", ".", "add_module", "(", "'res_block_14'", ",", "self", ".", "res_block", "(", "self", ".", "ngf", "*", "2", ",", "self", ".", "ngf", "*", "2", ")", ")", "\n", "skip_block", ".", "add_module", "(", "'res_block_15'", ",", "self", ".", "res_block", "(", "self", ".", "ngf", "*", "2", ",", "self", ".", "ngf", "*", "2", ")", ")", "\n", "skip_block", ".", "add_module", "(", "'conv_7'", ",", "self", ".", "conv", "(", "self", ".", "ngf", "*", "2", ",", "3", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "skip_block", ".", "add_module", "(", "'batch_9'", ",", "self", ".", "batch_norm", "(", "3", ")", ")", "\n", "\n", "return", "skip_block", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.texturegan.TextureGAN.forward": [[40, 42], ["texturegan.TextureGAN.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.texturegan.MainModel.__init__": [[45, 106], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "texturegan.MainModel.conv", "texturegan.MainModel.batch_norm", "torch.ReLU", "torch.ReLU", "texturegan.MainModel.res_block", "texturegan.MainModel.conv", "texturegan.MainModel.batch_norm", "torch.ReLU", "torch.ReLU", "texturegan.MainModel.res_block", "texturegan.MainModel.conv", "texturegan.MainModel.batch_norm", "torch.ReLU", "torch.ReLU", "texturegan.MainModel.res_block", "texturegan.MainModel.conv", "texturegan.MainModel.batch_norm", "torch.ReLU", "torch.ReLU", "texturegan.MainModel.res_block", "texturegan.MainModel.res_block", "texturegan.MainModel.res_block", "texturegan.MainModel.res_block", "texturegan.MainModel.res_block", "texturegan.MainModel.biup", "texturegan.MainModel.batch_norm", "torch.ReLU", "torch.ReLU", "texturegan.MainModel.res_block", "texturegan.MainModel.res_block", "texturegan.MainModel.biup", "texturegan.MainModel.batch_norm", "torch.ReLU", "torch.ReLU", "texturegan.MainModel.res_block", "texturegan.MainModel.res_block", "texturegan.MainModel.biup", "texturegan.MainModel.batch_norm", "torch.ReLU", "torch.ReLU", "texturegan.MainModel.res_block", "texturegan.MainModel.batch_norm"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", ")", ":", "\n", "        ", "\"\"\"\n        Function which pieces together the model\n        \"\"\"", "\n", "super", "(", "MainModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "\n", "self", ".", "batch_norm", "=", "nn", ".", "BatchNorm2d", "\n", "self", ".", "ngf", "=", "ngf", "\n", "self", ".", "input_nc", "=", "input_nc", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "\n", "self", ".", "res_block", "=", "ResidualBlock", "\n", "self", ".", "biup", "=", "UpsamplingBlock", "\n", "model", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "model", ".", "add_module", "(", "'conv_1'", ",", "self", ".", "conv", "(", "input_nc", ",", "ngf", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "model", ".", "add_module", "(", "'batch_1'", ",", "self", ".", "batch_norm", "(", "ngf", ")", ")", "\n", "model", ".", "add_module", "(", "'norm_1'", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "model", ".", "add_module", "(", "'res_block_1'", ",", "self", ".", "res_block", "(", "ngf", ",", "ngf", ")", ")", "\n", "model", ".", "add_module", "(", "'conv_2'", ",", "self", ".", "conv", "(", "ngf", ",", "ngf", "*", "2", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "model", ".", "add_module", "(", "'batch_2'", ",", "self", ".", "batch_norm", "(", "ngf", "*", "2", ")", ")", "\n", "model", ".", "add_module", "(", "'norm_2'", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "model", ".", "add_module", "(", "'res_block_2'", ",", "self", ".", "res_block", "(", "ngf", "*", "2", ",", "ngf", "*", "2", ")", ")", "\n", "\n", "model", ".", "add_module", "(", "'conv_3'", ",", "self", ".", "conv", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "model", ".", "add_module", "(", "'batch_3'", ",", "self", ".", "batch_norm", "(", "ngf", "*", "4", ")", ")", "\n", "model", ".", "add_module", "(", "'norm_3'", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "model", ".", "add_module", "(", "'res_block_3'", ",", "self", ".", "res_block", "(", "ngf", "*", "4", ",", "ngf", "*", "4", ")", ")", "\n", "\n", "model", ".", "add_module", "(", "'conv_4'", ",", "self", ".", "conv", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "model", ".", "add_module", "(", "'batch_4'", ",", "self", ".", "batch_norm", "(", "ngf", "*", "8", ")", ")", "\n", "model", ".", "add_module", "(", "'norm_4'", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "model", ".", "add_module", "(", "'res_block_4'", ",", "self", ".", "res_block", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ")", ")", "\n", "model", ".", "add_module", "(", "'res_block_5'", ",", "self", ".", "res_block", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ")", ")", "\n", "model", ".", "add_module", "(", "'res_block_6'", ",", "self", ".", "res_block", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ")", ")", "\n", "model", ".", "add_module", "(", "'res_block_7'", ",", "self", ".", "res_block", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ")", ")", "\n", "model", ".", "add_module", "(", "'res_block_8'", ",", "self", ".", "res_block", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ")", ")", "\n", "\n", "model", ".", "add_module", "(", "'upsampl_1'", ",", "self", ".", "biup", "(", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "model", ".", "add_module", "(", "'batch_5'", ",", "self", ".", "batch_norm", "(", "ngf", "*", "4", ")", ")", "\n", "model", ".", "add_module", "(", "'norm_5'", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "model", ".", "add_module", "(", "'res_block_9'", ",", "self", ".", "res_block", "(", "ngf", "*", "4", ",", "ngf", "*", "4", ")", ")", "\n", "model", ".", "add_module", "(", "'res_block_10'", ",", "self", ".", "res_block", "(", "ngf", "*", "4", ",", "ngf", "*", "4", ")", ")", "\n", "\n", "model", ".", "add_module", "(", "'upsampl_2'", ",", "self", ".", "biup", "(", "ngf", "*", "4", ",", "ngf", "*", "2", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "model", ".", "add_module", "(", "'batch_6'", ",", "self", ".", "batch_norm", "(", "ngf", "*", "2", ")", ")", "\n", "model", ".", "add_module", "(", "'norm_6'", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "model", ".", "add_module", "(", "'res_block_11'", ",", "self", ".", "res_block", "(", "ngf", "*", "2", ",", "ngf", "*", "2", ")", ")", "\n", "model", ".", "add_module", "(", "'res_block_12'", ",", "self", ".", "res_block", "(", "ngf", "*", "2", ",", "ngf", "*", "2", ")", ")", "\n", "\n", "model", ".", "add_module", "(", "'upsampl_3'", ",", "self", ".", "biup", "(", "ngf", "*", "2", ",", "ngf", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "model", ".", "add_module", "(", "'batch_7'", ",", "self", ".", "batch_norm", "(", "ngf", ")", ")", "\n", "model", ".", "add_module", "(", "'norm_7'", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "model", ".", "add_module", "(", "'res_block_13'", ",", "self", ".", "res_block", "(", "ngf", ",", "ngf", ")", ")", "\n", "model", ".", "add_module", "(", "'batch_8'", ",", "self", ".", "batch_norm", "(", "ngf", ")", ")", "\n", "\n", "self", ".", "main_model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.texturegan.MainModel.forward": [[108, 110], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "texturegan.MainModel.main_model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "self", ".", "main_model", "(", "x", ")", ",", "x", ")", ",", "1", ")", "\n", "#return self.main_model(input)", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.texturegan.UpsamplingBlock.__init__": [[114, 135], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential.add_module", "torch.Sequential.add_module", "conv", "biup"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "kernel", ",", "stride", ",", "pad", ")", ":", "\n", "        ", "\"\"\"\n        Single block of upsampling operation\n\n        Input:\n        - int input_nc    : Input number of channels\n        - int output_nc   : Output number of channels\n        - int kernel      : Kernel size\n        - int stride\t  : Stride length\n        - int pad         : Padd_moduleing\n        \"\"\"", "\n", "super", "(", "UpsamplingBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "conv", "=", "nn", ".", "Conv2d", "\n", "biup", "=", "nn", ".", "Upsample", "\n", "\n", "block", "=", "nn", ".", "Sequential", "(", ")", "\n", "block", ".", "add_module", "(", "'conv_1'", ",", "conv", "(", "input_nc", ",", "output_nc", ",", "kernel", ",", "stride", ",", "pad", ")", ")", "\n", "block", ".", "add_module", "(", "'upsample_2'", ",", "biup", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "\n", "self", ".", "biup_block", "=", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.texturegan.UpsamplingBlock.forward": [[136, 138], ["texturegan.UpsamplingBlock.biup_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "biup_block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.texturegan.ResidualBlock.__init__": [[147, 161], ["torch.Module.__init__", "texturegan.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "texturegan.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.texturegan.conv3x3", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.texturegan.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "residual", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_channels", ",", "out_channels", ",", "stride", ",", "\n", "padding", "=", "dilation", "[", "0", "]", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "out_channels", ",", "out_channels", ",", "stride", ",", "\n", "padding", "=", "dilation", "[", "1", "]", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "residual", "=", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.texturegan.ResidualBlock.forward": [[162, 179], ["texturegan.ResidualBlock.conv1", "texturegan.ResidualBlock.bn1", "texturegan.ResidualBlock.relu", "texturegan.ResidualBlock.conv2", "texturegan.ResidualBlock.bn2", "texturegan.ResidualBlock.relu", "texturegan.ResidualBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "if", "self", ".", "residual", ":", "\n", "            ", "out", "+=", "residual", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.texturegan.conv3x3": [[141, 144], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.GANLoss.__init__": [[130, 138], ["torch.Module.__init__", "networks.GANLoss.register_buffer", "networks.GANLoss.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'real_label'", ",", "torch", ".", "tensor", "(", "target_real_label", ")", ")", "\n", "self", ".", "register_buffer", "(", "'fake_label'", ",", "torch", ".", "tensor", "(", "target_fake_label", ")", ")", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.GANLoss.get_target_tensor": [[139, 145], ["target_tensor.expand_as"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "target_is_real", ":", "\n", "            ", "target_tensor", "=", "self", ".", "real_label", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "fake_label", "\n", "", "return", "target_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.GANLoss.__call__": [[146, 149], ["networks.GANLoss.get_target_tensor", "networks.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", ",", "target_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.ResnetBlock.__init__": [[153, 156], ["torch.ReLU", "torch.ReLU", "torch.Module.__init__", "networks.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ")", "\n", "", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ")", ":", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.ResnetBlock.build_conv_block": [[156, 182], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "activation", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "activation", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.ResnetBlock.forward": [[182, 185], ["networks.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.NLayerDiscriminator.__init__": [[193, 228], ["torch.Module.__init__", "range", "min", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "min", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "", "kw", "=", "4", "\n", "padw", "=", "1", "\n", "sequence", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "nf_mult", "=", "1", "\n", "nf_mult_prev", "=", "1", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "sequence", "+=", "[", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.NLayerDiscriminator.forward": [[228, 230], ["networks.NLayerDiscriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.PixelDiscriminator.__init__": [[233, 249], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "networks.PixelDiscriminator.net.append", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ")", ":", "\n", "        ", "super", "(", "PixelDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "", "self", ".", "net", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", "]", "\n", "if", "use_sigmoid", ":", "\n", "            ", "self", ".", "net", ".", "append", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "net", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.PixelDiscriminator.forward": [[249, 251], ["networks.PixelDiscriminator.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.bFT_Unet.__init__": [[258, 329], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "networks.bFT_Unet.bottleneck_layer", "networks.bFT_Unet.bottleneck_layer", "networks.bFT_Unet.bottleneck_layer", "networks.bFT_Unet.bottleneck_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "networks.bFT_Unet.bottleneck_layer", "networks.bFT_Unet.bottleneck_layer", "networks.bFT_Unet.bottleneck_layer", "networks.bFT_Unet.bottleneck_layer", "networks.bFT_Unet.bottleneck_layer", "networks.bFT_Unet.bottleneck_layer", "networks.bFT_Unet.bottleneck_layer", "networks.bFT_Unet.bottleneck_layer", "networks.bFT_Unet.bottleneck_layer", "networks.bFT_Unet.bottleneck_layer", "networks.bFT_Unet.bottleneck_layer", "networks.bFT_Unet.bottleneck_layer", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "guide_nc", ",", "output_nc", ",", "num_downs", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "bottleneck_depth", "=", "100", ")", ":", "\n", "        ", "super", "(", "bFT_Unet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_downs", "=", "num_downs", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "self", ".", "downconv1", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", ")", "\n", "self", ".", "downconv2", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "ngf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", ")", "\n", "self", ".", "downconv3", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", ")", "\n", "self", ".", "downconv4", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", ")", "\n", "\n", "downconv", "=", "[", "]", "## this has #(num_downs - 5) layers each with [relu-downconv-norm]", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "            ", "downconv", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", "\n", "", "self", ".", "downconv", "=", "nn", ".", "Sequential", "(", "*", "downconv", ")", "\n", "self", ".", "downconv5", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", ")", "\n", "\n", "### bottleneck ------", "\n", "\n", "self", ".", "upconv1", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "ngf", "*", "8", ")", "]", ")", "\n", "upconv", "=", "[", "]", "## this has #(num_downs - 5) layers each with [relu-upconv-norm]", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "            ", "upconv", "+=", "[", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "8", "*", "2", ",", "ngf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "ngf", "*", "8", ")", "]", "\n", "", "self", ".", "upconv", "=", "nn", ".", "Sequential", "(", "*", "upconv", ")", "\n", "self", ".", "upconv2", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "8", "*", "2", ",", "ngf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "ngf", "*", "4", ")", "]", ")", "\n", "self", ".", "upconv3", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "4", "*", "2", ",", "ngf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "ngf", "*", "2", ")", "]", ")", "\n", "self", ".", "upconv4", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "2", "*", "2", ",", "ngf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "ngf", ")", "]", ")", "\n", "self", ".", "upconv5", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "2", ",", "output_nc", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "nn", ".", "Tanh", "(", ")", "]", ")", "\n", "\n", "### guide downsampling", "\n", "self", ".", "G_downconv1", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "Conv2d", "(", "guide_nc", ",", "ngf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", ")", "\n", "self", ".", "G_downconv2", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "ngf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", ")", "\n", "self", ".", "G_downconv3", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", ")", "\n", "self", ".", "G_downconv4", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", ")", "\n", "G_downconv", "=", "[", "]", "## this has #(num_downs - 5) layers each with [relu-downconv-norm]", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "            ", "G_downconv", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", "\n", "", "self", ".", "G_downconv", "=", "nn", ".", "Sequential", "(", "*", "G_downconv", ")", "\n", "\n", "### bottlenecks for param generation", "\n", "self", ".", "bottleneck_alpha_2", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", "(", "ngf", "*", "2", ",", "bottleneck_depth", ")", ")", "\n", "self", ".", "bottleneck_beta_2", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", "(", "ngf", "*", "2", ",", "bottleneck_depth", ")", ")", "\n", "self", ".", "bottleneck_alpha_3", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", "(", "ngf", "*", "4", ",", "bottleneck_depth", ")", ")", "\n", "self", ".", "bottleneck_beta_3", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", "(", "ngf", "*", "4", ",", "bottleneck_depth", ")", ")", "\n", "self", ".", "bottleneck_alpha_4", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", "(", "ngf", "*", "8", ",", "bottleneck_depth", ")", ")", "\n", "self", ".", "bottleneck_beta_4", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", "(", "ngf", "*", "8", ",", "bottleneck_depth", ")", ")", "\n", "bottleneck_alpha", "=", "[", "]", "\n", "bottleneck_beta", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "            ", "bottleneck_alpha", "+=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "8", ",", "bottleneck_depth", ")", "\n", "bottleneck_beta", "+=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "8", ",", "bottleneck_depth", ")", "\n", "", "self", ".", "bottleneck_alpha", "=", "nn", ".", "Sequential", "(", "*", "bottleneck_alpha", ")", "\n", "self", ".", "bottleneck_beta", "=", "nn", ".", "Sequential", "(", "*", "bottleneck_beta", ")", "\n", "### for guide", "\n", "self", ".", "G_bottleneck_alpha_2", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", "(", "ngf", "*", "2", ",", "bottleneck_depth", ")", ")", "\n", "self", ".", "G_bottleneck_beta_2", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", "(", "ngf", "*", "2", ",", "bottleneck_depth", ")", ")", "\n", "self", ".", "G_bottleneck_alpha_3", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", "(", "ngf", "*", "4", ",", "bottleneck_depth", ")", ")", "\n", "self", ".", "G_bottleneck_beta_3", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", "(", "ngf", "*", "4", ",", "bottleneck_depth", ")", ")", "\n", "self", ".", "G_bottleneck_alpha_4", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", "(", "ngf", "*", "8", ",", "bottleneck_depth", ")", ")", "\n", "self", ".", "G_bottleneck_beta_4", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", "(", "ngf", "*", "8", ",", "bottleneck_depth", ")", ")", "\n", "G_bottleneck_alpha", "=", "[", "]", "\n", "G_bottleneck_beta", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "            ", "G_bottleneck_alpha", "+=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "8", ",", "bottleneck_depth", ")", "\n", "G_bottleneck_beta", "+=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "8", ",", "bottleneck_depth", ")", "\n", "", "self", ".", "G_bottleneck_alpha", "=", "nn", ".", "Sequential", "(", "*", "G_bottleneck_alpha", ")", "\n", "self", ".", "G_bottleneck_beta", "=", "nn", ".", "Sequential", "(", "*", "G_bottleneck_beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.bFT_Unet.bottleneck_layer": [[330, 332], ["torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "bottleneck_layer", "(", "self", ",", "nc", ",", "bottleneck_depth", ")", ":", "\n", "        ", "return", "[", "nn", ".", "Conv2d", "(", "nc", ",", "bottleneck_depth", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "Conv2d", "(", "bottleneck_depth", ",", "nc", ",", "kernel_size", "=", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.bFT_Unet.get_FiLM_param_": [[334, 367], ["X.clone", "alpha_layer", "beta_layer"], "methods", ["None"], ["", "def", "get_FiLM_param_", "(", "self", ",", "X", ",", "i", ",", "guide", "=", "False", ")", ":", "\n", "        ", "x", "=", "X", ".", "clone", "(", ")", "\n", "# bottleneck", "\n", "if", "guide", ":", "\n", "            ", "if", "(", "i", "==", "'2'", ")", ":", "\n", "                ", "alpha_layer", "=", "self", ".", "G_bottleneck_alpha_2", "\n", "beta_layer", "=", "self", ".", "G_bottleneck_beta_2", "\n", "", "elif", "(", "i", "==", "'3'", ")", ":", "\n", "                ", "alpha_layer", "=", "self", ".", "G_bottleneck_alpha_3", "\n", "beta_layer", "=", "self", ".", "G_bottleneck_beta_3", "\n", "", "elif", "(", "i", "==", "'4'", ")", ":", "\n", "                ", "alpha_layer", "=", "self", ".", "G_bottleneck_alpha_4", "\n", "beta_layer", "=", "self", ".", "G_bottleneck_beta_4", "\n", "", "else", ":", "# a number i will be given to specify which bottleneck to use", "\n", "                ", "alpha_layer", "=", "self", ".", "G_bottleneck_alpha", "[", "i", ":", "i", "+", "3", "]", "\n", "beta_layer", "=", "self", ".", "G_bottleneck_beta", "[", "i", ":", "i", "+", "3", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "(", "i", "==", "'2'", ")", ":", "\n", "                ", "alpha_layer", "=", "self", ".", "bottleneck_alpha_2", "\n", "beta_layer", "=", "self", ".", "bottleneck_beta_2", "\n", "", "elif", "(", "i", "==", "'3'", ")", ":", "\n", "                ", "alpha_layer", "=", "self", ".", "bottleneck_alpha_3", "\n", "beta_layer", "=", "self", ".", "bottleneck_beta_3", "\n", "", "elif", "(", "i", "==", "'4'", ")", ":", "\n", "                ", "alpha_layer", "=", "self", ".", "bottleneck_alpha_4", "\n", "beta_layer", "=", "self", ".", "bottleneck_beta_4", "\n", "", "else", ":", "# a number i will be given to specify which bottleneck to use", "\n", "                ", "alpha_layer", "=", "self", ".", "bottleneck_alpha", "[", "i", ":", "i", "+", "3", "]", "\n", "beta_layer", "=", "self", ".", "bottleneck_beta", "[", "i", ":", "i", "+", "3", "]", "\n", "\n", "", "", "alpha", "=", "alpha_layer", "(", "x", ")", "\n", "beta", "=", "beta_layer", "(", "x", ")", "\n", "return", "alpha", ",", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.bFT_Unet.forward": [[368, 434], ["networks.bFT_Unet.downconv1", "networks.bFT_Unet.G_downconv1", "networks.bFT_Unet.downconv2", "networks.bFT_Unet.G_downconv2", "networks.bFT_Unet.get_FiLM_param_", "networks.bFT_Unet.get_FiLM_param_", "networks.affine_transformation", "networks.affine_transformation", "networks.bFT_Unet.downconv3", "networks.bFT_Unet.G_downconv3", "networks.bFT_Unet.get_FiLM_param_", "networks.bFT_Unet.get_FiLM_param_", "networks.affine_transformation", "networks.affine_transformation", "networks.bFT_Unet.downconv4", "networks.bFT_Unet.G_downconv4", "networks.bFT_Unet.get_FiLM_param_", "networks.bFT_Unet.get_FiLM_param_", "networks.affine_transformation", "networks.affine_transformation", "range", "networks.bFT_Unet.downconv5", "networks.bFT_Unet.upconv1", "range", "networks.bFT_Unet.upconv2", "networks.bFT_Unet.upconv3", "networks.bFT_Unet.upconv4", "networks.bFT_Unet.upconv5", "networks.bFT_Unet.get_FiLM_param_", "networks.bFT_Unet.get_FiLM_param_", "networks.affine_transformation", "networks.affine_transformation", "upconv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "downconv", "G_downconv", "downconv", "G_downconv"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation"], ["", "def", "forward", "(", "self", ",", "input", ",", "guide", ")", ":", "\n", "## downconv", "\n", "        ", "down1", "=", "self", ".", "downconv1", "(", "input", ")", "\n", "G_down1", "=", "self", ".", "G_downconv1", "(", "guide", ")", "\n", "\n", "down2", "=", "self", ".", "downconv2", "(", "down1", ")", "\n", "G_down2", "=", "self", ".", "G_downconv2", "(", "G_down1", ")", "\n", "\n", "g_alpha2", ",", "g_beta2", "=", "self", ".", "get_FiLM_param_", "(", "G_down2", ",", "'2'", ",", "guide", "=", "True", ")", "\n", "i_alpha2", ",", "i_beta2", "=", "self", ".", "get_FiLM_param_", "(", "down2", ",", "'2'", ")", "\n", "down2", "=", "affine_transformation", "(", "down2", ",", "g_alpha2", ",", "g_beta2", ")", "\n", "G_down2", "=", "affine_transformation", "(", "G_down2", ",", "i_alpha2", ",", "i_beta2", ")", "\n", "\n", "\n", "down3", "=", "self", ".", "downconv3", "(", "down2", ")", "\n", "G_down3", "=", "self", ".", "G_downconv3", "(", "G_down2", ")", "\n", "\n", "g_alpha3", ",", "g_beta3", "=", "self", ".", "get_FiLM_param_", "(", "G_down3", ",", "'3'", ",", "guide", "=", "True", ")", "\n", "i_alpha3", ",", "i_beta3", "=", "self", ".", "get_FiLM_param_", "(", "down3", ",", "'3'", ")", "\n", "down3", "=", "affine_transformation", "(", "down3", ",", "g_alpha3", ",", "g_beta3", ")", "\n", "G_down3", "=", "affine_transformation", "(", "G_down3", ",", "i_alpha3", ",", "i_beta3", ")", "\n", "\n", "down4", "=", "self", ".", "downconv4", "(", "down3", ")", "\n", "G_down4", "=", "self", ".", "G_downconv4", "(", "G_down3", ")", "\n", "\n", "g_alpha4", ",", "g_beta4", "=", "self", ".", "get_FiLM_param_", "(", "G_down4", ",", "'4'", ",", "guide", "=", "True", ")", "\n", "i_alpha4", ",", "i_beta4", "=", "self", ".", "get_FiLM_param_", "(", "down4", ",", "'4'", ")", "\n", "down4", "=", "affine_transformation", "(", "down4", ",", "g_alpha4", ",", "g_beta4", ")", "\n", "G_down4", "=", "affine_transformation", "(", "G_down4", ",", "i_alpha4", ",", "i_beta4", ")", "\n", "\n", "## (num_downs - 5) layers", "\n", "down", "=", "[", "]", "\n", "G_down", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_downs", "-", "5", ")", ":", "\n", "            ", "layer", "=", "2", "*", "i", "\n", "bottleneck_layer", "=", "3", "*", "i", "\n", "downconv", "=", "self", ".", "downconv", "[", "layer", ":", "layer", "+", "2", "]", "\n", "G_downconv", "=", "self", ".", "G_downconv", "[", "layer", ":", "layer", "+", "2", "]", "\n", "if", "(", "layer", "==", "0", ")", ":", "\n", "                ", "down", "+=", "[", "downconv", "(", "down4", ")", "]", "\n", "G_down", "+=", "[", "G_downconv", "(", "G_down4", ")", "]", "\n", "", "else", ":", "\n", "                ", "down", "+=", "[", "downconv", "(", "down", "[", "i", "-", "1", "]", ")", "]", "\n", "G_down", "+=", "[", "G_downconv", "(", "G_down", "[", "i", "-", "1", "]", ")", "]", "\n", "\n", "", "g_alpha", ",", "g_beta", "=", "self", ".", "get_FiLM_param_", "(", "G_down", "[", "i", "]", ",", "bottleneck_layer", ",", "guide", "=", "True", ")", "\n", "i_alpha", ",", "i_beta", "=", "self", ".", "get_FiLM_param_", "(", "down", "[", "i", "]", ",", "bottleneck_layer", ")", "\n", "down", "[", "i", "]", "=", "affine_transformation", "(", "down", "[", "i", "]", ",", "g_alpha", ",", "g_beta", ")", "\n", "G_down", "[", "i", "]", "=", "affine_transformation", "(", "G_down", "[", "i", "]", ",", "i_alpha", ",", "i_beta", ")", "\n", "\n", "", "down5", "=", "self", ".", "downconv5", "(", "down", "[", "-", "1", "]", ")", "\n", "\n", "## concat and upconv", "\n", "up", "=", "self", ".", "upconv1", "(", "down5", ")", "\n", "num_down", "=", "self", ".", "num_downs", "-", "5", "\n", "for", "i", "in", "range", "(", "self", ".", "num_downs", "-", "5", ")", ":", "\n", "            ", "layer", "=", "3", "*", "i", "\n", "upconv", "=", "self", ".", "upconv", "[", "layer", ":", "layer", "+", "3", "]", "\n", "num_down", "-=", "1", "\n", "up", "=", "upconv", "(", "torch", ".", "cat", "(", "[", "down", "[", "num_down", "]", ",", "up", "]", ",", "1", ")", ")", "\n", "", "up", "=", "self", ".", "upconv2", "(", "torch", ".", "cat", "(", "[", "down4", ",", "up", "]", ",", "1", ")", ")", "\n", "up", "=", "self", ".", "upconv3", "(", "torch", ".", "cat", "(", "[", "down3", ",", "up", "]", ",", "1", ")", ")", "\n", "up", "=", "self", ".", "upconv4", "(", "torch", ".", "cat", "(", "[", "down2", ",", "up", "]", ",", "1", ")", ")", "\n", "up", "=", "self", ".", "upconv5", "(", "torch", ".", "cat", "(", "[", "down1", ",", "up", "]", ",", "1", ")", ")", "\n", "\n", "return", "up", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.bFT_Resnet.__init__": [[436, 491], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "networks.bFT_Resnet.bottleneck_layer", "networks.bFT_Resnet.bottleneck_layer", "networks.bFT_Resnet.bottleneck_layer", "networks.bFT_Resnet.bottleneck_layer", "networks.bFT_Resnet.bottleneck_layer", "networks.bFT_Resnet.bottleneck_layer", "networks.bFT_Resnet.bottleneck_layer", "networks.bFT_Resnet.bottleneck_layer", "networks.bFT_Resnet.bottleneck_layer", "networks.bFT_Resnet.bottleneck_layer", "networks.bFT_Resnet.bottleneck_layer", "networks.bFT_Resnet.bottleneck_layer", "networks.bFT_Resnet.bottleneck_layer", "networks.bFT_Resnet.bottleneck_layer", "networks.bFT_Resnet.bottleneck_layer", "networks.bFT_Resnet.bottleneck_layer", "range", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "networks.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "int", "int", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "guide_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_blocks", "=", "9", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ",", "bottleneck_depth", "=", "100", ")", ":", "\n", "        ", "super", "(", "bFT_Resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "n_downsampling", "=", "3", "\n", "\n", "## input", "\n", "padding_in", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "self", ".", "padding_in", "=", "nn", ".", "Sequential", "(", "*", "padding_in", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "ngf", ",", "ngf", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "## guide", "\n", "padding_g", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "guide_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "self", ".", "padding_g", "=", "nn", ".", "Sequential", "(", "*", "padding_g", ")", "\n", "self", ".", "conv1_g", "=", "nn", ".", "Conv2d", "(", "ngf", ",", "ngf", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2_g", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3_g", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "# bottleneck1", "\n", "self", ".", "bottleneck_alpha_1", "=", "self", ".", "bottleneck_layer", "(", "ngf", ",", "bottleneck_depth", ")", "\n", "self", ".", "G_bottleneck_alpha_1", "=", "self", ".", "bottleneck_layer", "(", "ngf", ",", "bottleneck_depth", ")", "\n", "self", ".", "bottleneck_beta_1", "=", "self", ".", "bottleneck_layer", "(", "ngf", ",", "bottleneck_depth", ")", "\n", "self", ".", "G_bottleneck_beta_1", "=", "self", ".", "bottleneck_layer", "(", "ngf", ",", "bottleneck_depth", ")", "\n", "# bottleneck2", "\n", "self", ".", "bottleneck_alpha_2", "=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "2", ",", "bottleneck_depth", ")", "\n", "self", ".", "G_bottleneck_alpha_2", "=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "2", ",", "bottleneck_depth", ")", "\n", "self", ".", "bottleneck_beta_2", "=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "2", ",", "bottleneck_depth", ")", "\n", "self", ".", "G_bottleneck_beta_2", "=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "2", ",", "bottleneck_depth", ")", "\n", "# bottleneck3", "\n", "self", ".", "bottleneck_alpha_3", "=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "4", ",", "bottleneck_depth", ")", "\n", "self", ".", "G_bottleneck_alpha_3", "=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "4", ",", "bottleneck_depth", ")", "\n", "self", ".", "bottleneck_beta_3", "=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "4", ",", "bottleneck_depth", ")", "\n", "self", ".", "G_bottleneck_beta_3", "=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "4", ",", "bottleneck_depth", ")", "\n", "# bottleneck4", "\n", "self", ".", "bottleneck_alpha_4", "=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "8", ",", "bottleneck_depth", ")", "\n", "self", ".", "G_bottleneck_alpha_4", "=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "8", ",", "bottleneck_depth", ")", "\n", "self", ".", "bottleneck_beta_4", "=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "8", ",", "bottleneck_depth", ")", "\n", "self", ".", "G_bottleneck_beta_4", "=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "8", ",", "bottleneck_depth", ")", "\n", "\n", "resnet", "=", "[", "]", "\n", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "resnet", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "self", ".", "activation", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "", "self", ".", "resnet", "=", "nn", ".", "Sequential", "(", "*", "resnet", ")", "\n", "decoder", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "decoder", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "self", ".", "activation", "]", "\n", "", "self", ".", "pre_decoder", "=", "nn", ".", "Sequential", "(", "*", "decoder", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.bFT_Resnet.bottleneck_layer": [[492, 494], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "bottleneck_layer", "(", "self", ",", "nc", ",", "bottleneck_depth", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "Conv2d", "(", "nc", ",", "bottleneck_depth", ",", "kernel_size", "=", "1", ")", ",", "self", ".", "activation", ",", "nn", ".", "Conv2d", "(", "bottleneck_depth", ",", "nc", ",", "kernel_size", "=", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.bFT_Resnet.get_FiLM_param_": [[495, 527], ["X.clone", "alpha_layer", "beta_layer"], "methods", ["None"], ["", "def", "get_FiLM_param_", "(", "self", ",", "X", ",", "i", ",", "guide", "=", "False", ")", ":", "\n", "        ", "x", "=", "X", ".", "clone", "(", ")", "\n", "# bottleneck", "\n", "if", "guide", ":", "\n", "            ", "if", "(", "i", "==", "1", ")", ":", "\n", "                ", "alpha_layer", "=", "self", ".", "G_bottleneck_alpha_1", "\n", "beta_layer", "=", "self", ".", "G_bottleneck_beta_1", "\n", "", "elif", "(", "i", "==", "2", ")", ":", "\n", "                ", "alpha_layer", "=", "self", ".", "G_bottleneck_alpha_2", "\n", "beta_layer", "=", "self", ".", "G_bottleneck_beta_2", "\n", "", "elif", "(", "i", "==", "3", ")", ":", "\n", "                ", "alpha_layer", "=", "self", ".", "G_bottleneck_alpha_3", "\n", "beta_layer", "=", "self", ".", "G_bottleneck_beta_3", "\n", "", "elif", "(", "i", "==", "4", ")", ":", "\n", "                ", "alpha_layer", "=", "self", ".", "G_bottleneck_alpha_4", "\n", "beta_layer", "=", "self", ".", "G_bottleneck_beta_4", "\n", "", "", "else", ":", "\n", "            ", "if", "(", "i", "==", "1", ")", ":", "\n", "                ", "alpha_layer", "=", "self", ".", "bottleneck_alpha_1", "\n", "beta_layer", "=", "self", ".", "bottleneck_beta_1", "\n", "", "elif", "(", "i", "==", "2", ")", ":", "\n", "                ", "alpha_layer", "=", "self", ".", "bottleneck_alpha_2", "\n", "beta_layer", "=", "self", ".", "bottleneck_beta_2", "\n", "", "elif", "(", "i", "==", "3", ")", ":", "\n", "                ", "alpha_layer", "=", "self", ".", "bottleneck_alpha_3", "\n", "beta_layer", "=", "self", ".", "bottleneck_beta_3", "\n", "", "elif", "(", "i", "==", "4", ")", ":", "\n", "                ", "alpha_layer", "=", "self", ".", "bottleneck_alpha_4", "\n", "beta_layer", "=", "self", ".", "bottleneck_beta_4", "\n", "", "", "alpha", "=", "alpha_layer", "(", "x", ")", "\n", "beta", "=", "beta_layer", "(", "x", ")", "\n", "return", "alpha", ",", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.bFT_Resnet.forward": [[529, 575], ["networks.bFT_Resnet.padding_in", "networks.bFT_Resnet.padding_g", "networks.bFT_Resnet.get_FiLM_param_", "networks.bFT_Resnet.get_FiLM_param_", "networks.affine_transformation", "networks.affine_transformation", "networks.bFT_Resnet.activation", "networks.bFT_Resnet.activation", "networks.bFT_Resnet.conv1", "networks.bFT_Resnet.conv1_g", "networks.bFT_Resnet.get_FiLM_param_", "networks.bFT_Resnet.get_FiLM_param_", "networks.affine_transformation", "networks.affine_transformation", "networks.bFT_Resnet.activation", "networks.bFT_Resnet.activation", "networks.bFT_Resnet.conv2", "networks.bFT_Resnet.conv2_g", "networks.bFT_Resnet.get_FiLM_param_", "networks.bFT_Resnet.get_FiLM_param_", "networks.affine_transformation", "networks.affine_transformation", "networks.bFT_Resnet.activation", "networks.bFT_Resnet.activation", "networks.bFT_Resnet.conv3", "networks.bFT_Resnet.conv3_g", "networks.bFT_Resnet.get_FiLM_param_", "networks.affine_transformation", "networks.bFT_Resnet.activation", "networks.bFT_Resnet.resnet", "networks.bFT_Resnet.pre_decoder", "networks.bFT_Resnet.decoder"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation"], ["", "def", "forward", "(", "self", ",", "input", ",", "guidance", ")", ":", "\n", "        ", "input", "=", "self", ".", "padding_in", "(", "input", ")", "\n", "guidance", "=", "self", ".", "padding_g", "(", "guidance", ")", "\n", "\n", "g_alpha1", ",", "g_beta1", "=", "self", ".", "get_FiLM_param_", "(", "guidance", ",", "1", ",", "guide", "=", "True", ")", "\n", "i_alpha1", ",", "i_beta1", "=", "self", ".", "get_FiLM_param_", "(", "input", ",", "1", ")", "\n", "guidance", "=", "affine_transformation", "(", "guidance", ",", "i_alpha1", ",", "i_beta1", ")", "\n", "input", "=", "affine_transformation", "(", "input", ",", "g_alpha1", ",", "g_beta1", ")", "\n", "\n", "input", "=", "self", ".", "activation", "(", "input", ")", "\n", "guidance", "=", "self", ".", "activation", "(", "guidance", ")", "\n", "\n", "input", "=", "self", ".", "conv1", "(", "input", ")", "\n", "guidance", "=", "self", ".", "conv1_g", "(", "guidance", ")", "\n", "\n", "g_alpha2", ",", "g_beta2", "=", "self", ".", "get_FiLM_param_", "(", "guidance", ",", "2", ",", "guide", "=", "True", ")", "\n", "i_alpha2", ",", "i_beta2", "=", "self", ".", "get_FiLM_param_", "(", "input", ",", "2", ")", "\n", "input", "=", "affine_transformation", "(", "input", ",", "g_alpha2", ",", "g_beta2", ")", "\n", "guidance", "=", "affine_transformation", "(", "guidance", ",", "i_alpha2", ",", "i_beta2", ")", "\n", "\n", "input", "=", "self", ".", "activation", "(", "input", ")", "\n", "guidance", "=", "self", ".", "activation", "(", "guidance", ")", "\n", "\n", "input", "=", "self", ".", "conv2", "(", "input", ")", "\n", "guidance", "=", "self", ".", "conv2_g", "(", "guidance", ")", "\n", "\n", "g_alpha3", ",", "g_beta3", "=", "self", ".", "get_FiLM_param_", "(", "guidance", ",", "3", ",", "guide", "=", "True", ")", "\n", "i_alpha3", ",", "i_beta3", "=", "self", ".", "get_FiLM_param_", "(", "input", ",", "3", ")", "\n", "input", "=", "affine_transformation", "(", "input", ",", "g_alpha3", ",", "g_beta3", ")", "\n", "guidance", "=", "affine_transformation", "(", "guidance", ",", "i_alpha3", ",", "i_beta3", ")", "\n", "\n", "input", "=", "self", ".", "activation", "(", "input", ")", "\n", "guidance", "=", "self", ".", "activation", "(", "guidance", ")", "\n", "\n", "input", "=", "self", ".", "conv3", "(", "input", ")", "\n", "guidance", "=", "self", ".", "conv3_g", "(", "guidance", ")", "\n", "\n", "g_alpha4", ",", "g_beta4", "=", "self", ".", "get_FiLM_param_", "(", "guidance", ",", "4", ",", "guide", "=", "True", ")", "\n", "input", "=", "affine_transformation", "(", "input", ",", "g_alpha4", ",", "g_beta4", ")", "\n", "\n", "input", "=", "self", ".", "activation", "(", "input", ")", "\n", "\n", "input", "=", "self", ".", "resnet", "(", "input", ")", "\n", "input", "=", "self", ".", "pre_decoder", "(", "input", ")", "\n", "output", "=", "self", ".", "decoder", "(", "input", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_resnet.__init__": [[580, 630], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.Conv2d", "torch.Conv2d", "norm_layer", "networks.uFT_resnet.bottleneck_layer", "networks.uFT_resnet.bottleneck_layer", "networks.uFT_resnet.bottleneck_layer", "networks.uFT_resnet.bottleneck_layer", "networks.uFT_resnet.bottleneck_layer", "networks.uFT_resnet.bottleneck_layer", "networks.uFT_resnet.bottleneck_layer", "networks.uFT_resnet.bottleneck_layer", "range", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "networks.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "int", "int", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "guide_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "n_blocks", "=", "9", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "padding_type", "=", "'reflect'", ",", "bottleneck_depth", "=", "100", ")", ":", "\n", "        ", "super", "(", "uFT_resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "n_downsampling", "=", "3", "\n", "\n", "## input", "\n", "padding_in", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "self", ".", "padding_in", "=", "nn", ".", "Sequential", "(", "*", "padding_in", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "ngf", ",", "ngf", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "## guide", "\n", "padding_g", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "guide_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "self", ".", "padding_g", "=", "nn", ".", "Sequential", "(", "*", "padding_g", ")", "\n", "self", ".", "conv1_g", "=", "nn", ".", "Conv2d", "(", "ngf", ",", "ngf", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm1_g", "=", "norm_layer", "(", "ngf", "*", "1", ")", "\n", "self", ".", "conv2_g", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm2_g", "=", "norm_layer", "(", "ngf", "*", "2", ")", "\n", "self", ".", "conv3_g", "=", "nn", ".", "Conv2d", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "norm3_g", "=", "norm_layer", "(", "ngf", "*", "4", ")", "\n", "\n", "# bottleneck1", "\n", "self", ".", "bottleneck_alpha_1", "=", "self", ".", "bottleneck_layer", "(", "ngf", ",", "bottleneck_depth", ")", "\n", "self", ".", "bottleneck_beta_1", "=", "self", ".", "bottleneck_layer", "(", "ngf", ",", "bottleneck_depth", ")", "\n", "# bottleneck2", "\n", "self", ".", "bottleneck_alpha_2", "=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "2", ",", "bottleneck_depth", ")", "\n", "self", ".", "bottleneck_beta_2", "=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "2", ",", "bottleneck_depth", ")", "\n", "# bottleneck3", "\n", "self", ".", "bottleneck_alpha_3", "=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "4", ",", "bottleneck_depth", ")", "\n", "self", ".", "bottleneck_beta_3", "=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "4", ",", "bottleneck_depth", ")", "\n", "# bottleneck4", "\n", "self", ".", "bottleneck_alpha_4", "=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "8", ",", "bottleneck_depth", ")", "\n", "self", ".", "bottleneck_beta_4", "=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "8", ",", "bottleneck_depth", ")", "\n", "\n", "resnet", "=", "[", "]", "\n", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "resnet", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "activation", "=", "self", ".", "activation", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "", "self", ".", "resnet", "=", "nn", ".", "Sequential", "(", "*", "resnet", ")", "\n", "decoder", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "decoder", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "self", ".", "activation", "]", "\n", "", "self", ".", "pre_decoder", "=", "nn", ".", "Sequential", "(", "*", "decoder", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "nn", ".", "Tanh", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_resnet.bottleneck_layer": [[631, 633], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "bottleneck_layer", "(", "self", ",", "nc", ",", "bottleneck_depth", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "Conv2d", "(", "nc", ",", "bottleneck_depth", ",", "kernel_size", "=", "1", ")", ",", "self", ".", "activation", ",", "nn", ".", "Conv2d", "(", "bottleneck_depth", ",", "nc", ",", "kernel_size", "=", "1", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_resnet.get_FiLM_param_": [[634, 652], ["X.clone", "alpha_layer", "beta_layer"], "methods", ["None"], ["", "def", "get_FiLM_param_", "(", "self", ",", "X", ",", "i", ")", ":", "\n", "        ", "x", "=", "X", ".", "clone", "(", ")", "\n", "# bottleneck", "\n", "if", "(", "i", "==", "1", ")", ":", "\n", "            ", "alpha_layer", "=", "self", ".", "bottleneck_alpha_1", "\n", "beta_layer", "=", "self", ".", "bottleneck_beta_1", "\n", "", "elif", "(", "i", "==", "2", ")", ":", "\n", "            ", "alpha_layer", "=", "self", ".", "bottleneck_alpha_2", "\n", "beta_layer", "=", "self", ".", "bottleneck_beta_2", "\n", "", "elif", "(", "i", "==", "3", ")", ":", "\n", "            ", "alpha_layer", "=", "self", ".", "bottleneck_alpha_3", "\n", "beta_layer", "=", "self", ".", "bottleneck_beta_3", "\n", "", "elif", "(", "i", "==", "4", ")", ":", "\n", "            ", "alpha_layer", "=", "self", ".", "bottleneck_alpha_4", "\n", "beta_layer", "=", "self", ".", "bottleneck_beta_4", "\n", "", "alpha", "=", "alpha_layer", "(", "x", ")", "\n", "beta", "=", "beta_layer", "(", "x", ")", "\n", "return", "alpha", ",", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_resnet.forward": [[654, 697], ["networks.uFT_resnet.padding_in", "networks.uFT_resnet.padding_g", "networks.uFT_resnet.get_FiLM_param_", "networks.affine_transformation", "networks.uFT_resnet.norm1_g", "networks.uFT_resnet.activation", "networks.uFT_resnet.activation", "networks.uFT_resnet.conv1", "networks.uFT_resnet.conv1_g", "networks.uFT_resnet.get_FiLM_param_", "networks.affine_transformation", "networks.uFT_resnet.norm2_g", "networks.uFT_resnet.activation", "networks.uFT_resnet.activation", "networks.uFT_resnet.conv2", "networks.uFT_resnet.conv2_g", "networks.uFT_resnet.get_FiLM_param_", "networks.affine_transformation", "networks.uFT_resnet.norm3_g", "networks.uFT_resnet.activation", "networks.uFT_resnet.activation", "networks.uFT_resnet.conv3", "networks.uFT_resnet.conv3_g", "networks.uFT_resnet.get_FiLM_param_", "networks.affine_transformation", "networks.uFT_resnet.activation", "networks.uFT_resnet.resnet", "networks.uFT_resnet.pre_decoder", "networks.uFT_resnet.decoder"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation"], ["", "def", "forward", "(", "self", ",", "input", ",", "guidance", ")", ":", "\n", "        ", "input", "=", "self", ".", "padding_in", "(", "input", ")", "\n", "guidance", "=", "self", ".", "padding_g", "(", "guidance", ")", "\n", "\n", "alpha1", ",", "beta1", "=", "self", ".", "get_FiLM_param_", "(", "guidance", ",", "1", ")", "\n", "input", "=", "affine_transformation", "(", "input", ",", "alpha1", ",", "beta1", ")", "\n", "guidance", "=", "self", ".", "norm1_g", "(", "guidance", ")", "\n", "\n", "input", "=", "self", ".", "activation", "(", "input", ")", "\n", "guidance", "=", "self", ".", "activation", "(", "guidance", ")", "\n", "\n", "input", "=", "self", ".", "conv1", "(", "input", ")", "\n", "guidance", "=", "self", ".", "conv1_g", "(", "guidance", ")", "\n", "\n", "alpha2", ",", "beta2", "=", "self", ".", "get_FiLM_param_", "(", "guidance", ",", "2", ")", "\n", "input", "=", "affine_transformation", "(", "input", ",", "alpha2", ",", "beta2", ")", "\n", "guidance", "=", "self", ".", "norm2_g", "(", "guidance", ")", "\n", "\n", "input", "=", "self", ".", "activation", "(", "input", ")", "\n", "guidance", "=", "self", ".", "activation", "(", "guidance", ")", "\n", "\n", "input", "=", "self", ".", "conv2", "(", "input", ")", "\n", "guidance", "=", "self", ".", "conv2_g", "(", "guidance", ")", "\n", "\n", "alpha3", ",", "beta3", "=", "self", ".", "get_FiLM_param_", "(", "guidance", ",", "3", ")", "\n", "input", "=", "affine_transformation", "(", "input", ",", "alpha3", ",", "beta3", ")", "\n", "guidance", "=", "self", ".", "norm3_g", "(", "guidance", ")", "\n", "\n", "input", "=", "self", ".", "activation", "(", "input", ")", "\n", "guidance", "=", "self", ".", "activation", "(", "guidance", ")", "\n", "\n", "input", "=", "self", ".", "conv3", "(", "input", ")", "\n", "guidance", "=", "self", ".", "conv3_g", "(", "guidance", ")", "\n", "\n", "alpha4", ",", "beta4", "=", "self", ".", "get_FiLM_param_", "(", "guidance", ",", "4", ")", "\n", "input", "=", "affine_transformation", "(", "input", ",", "alpha4", ",", "beta4", ")", "\n", "\n", "input", "=", "self", ".", "activation", "(", "input", ")", "\n", "\n", "input", "=", "self", ".", "resnet", "(", "input", ")", "\n", "input", "=", "self", ".", "pre_decoder", "(", "input", ")", "\n", "output", "=", "self", ".", "decoder", "(", "input", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.__init__": [[699, 762], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "norm_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "norm_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "norm_layer", "norm_layer", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "networks.uFT_Unet.bottleneck_layer", "networks.uFT_Unet.bottleneck_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "networks.uFT_Unet.bottleneck_layer", "networks.uFT_Unet.bottleneck_layer", "networks.uFT_Unet.bottleneck_layer", "networks.uFT_Unet.bottleneck_layer", "networks.uFT_Unet.bottleneck_layer", "networks.uFT_Unet.bottleneck_layer", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.__init__", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "guide_nc", ",", "output_nc", ",", "num_downs", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "bottleneck_depth", "=", "100", ")", ":", "\n", "        ", "super", "(", "uFT_Unet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_downs", "=", "num_downs", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "self", ".", "downconv1", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", ")", "\n", "self", ".", "downconv2", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "ngf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", ")", "\n", "self", ".", "downconv3", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", ")", "\n", "self", ".", "downconv4", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", ")", "\n", "\n", "downconv", "=", "[", "]", "## this has #(num_downs - 5) layers each with [relu-downconv-norm]", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "            ", "downconv", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", "\n", "", "self", ".", "downconv", "=", "nn", ".", "Sequential", "(", "*", "downconv", ")", "\n", "self", ".", "downconv5", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", ")", "\n", "\n", "### bottleneck ------", "\n", "\n", "self", ".", "upconv1", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "ngf", "*", "8", ")", "]", ")", "\n", "upconv", "=", "[", "]", "## this has #(num_downs - 5) layers each with [relu-upconv-norm]", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "            ", "upconv", "+=", "[", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "8", "*", "2", ",", "ngf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "ngf", "*", "8", ")", "]", "\n", "", "self", ".", "upconv", "=", "nn", ".", "Sequential", "(", "*", "upconv", ")", "\n", "self", ".", "upconv2", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "8", "*", "2", ",", "ngf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "ngf", "*", "4", ")", "]", ")", "\n", "self", ".", "upconv3", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "4", "*", "2", ",", "ngf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "ngf", "*", "2", ")", "]", ")", "\n", "self", ".", "upconv4", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "2", "*", "2", ",", "ngf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "ngf", ")", "]", ")", "\n", "self", ".", "upconv5", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "2", ",", "output_nc", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "nn", ".", "Tanh", "(", ")", "]", ")", "\n", "\n", "### guide downsampling", "\n", "self", ".", "G_downconv1", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "Conv2d", "(", "guide_nc", ",", "ngf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", ")", "\n", "self", ".", "G_downconv2", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "ngf", ",", "ngf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", ")", "\n", "self", ".", "G_downconv3", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", ")", "\n", "self", ".", "G_downconv4", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", ")", "\n", "G_downconv", "=", "[", "]", "## this has #(num_downs - 5) layers each with [relu-downconv-norm]", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "            ", "G_downconv", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "]", "\n", "", "self", ".", "G_downconv", "=", "nn", ".", "Sequential", "(", "*", "G_downconv", ")", "\n", "\n", "### bottlenecks for param generation", "\n", "### for guide", "\n", "### normalization", "\n", "self", ".", "G_bottleneck_alpha_2", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", "(", "ngf", "*", "2", ",", "bottleneck_depth", ")", ")", "\n", "self", ".", "G_bottleneck_beta_2", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", "(", "ngf", "*", "2", ",", "bottleneck_depth", ")", ")", "\n", "self", ".", "norm2_g", "=", "norm_layer", "(", "ngf", "*", "2", ")", "\n", "self", ".", "G_bottleneck_alpha_3", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", "(", "ngf", "*", "4", ",", "bottleneck_depth", ")", ")", "\n", "self", ".", "G_bottleneck_beta_3", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", "(", "ngf", "*", "4", ",", "bottleneck_depth", ")", ")", "\n", "self", ".", "norm3_g", "=", "norm_layer", "(", "ngf", "*", "4", ")", "\n", "self", ".", "G_bottleneck_alpha_4", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", "(", "ngf", "*", "8", ",", "bottleneck_depth", ")", ")", "\n", "self", ".", "G_bottleneck_beta_4", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "bottleneck_layer", "(", "ngf", "*", "8", ",", "bottleneck_depth", ")", ")", "\n", "self", ".", "norm4_g", "=", "norm_layer", "(", "ngf", "*", "8", ")", "\n", "G_bottleneck_alpha", "=", "[", "]", "\n", "G_bottleneck_beta", "=", "[", "]", "\n", "self", ".", "norm_g", "=", "norm_layer", "(", "ngf", "*", "8", ")", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "            ", "G_bottleneck_alpha", "+=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "8", ",", "bottleneck_depth", ")", "\n", "G_bottleneck_beta", "+=", "self", ".", "bottleneck_layer", "(", "ngf", "*", "8", ",", "bottleneck_depth", ")", "\n", "", "self", ".", "G_bottleneck_alpha", "=", "nn", ".", "Sequential", "(", "*", "G_bottleneck_alpha", ")", "\n", "self", ".", "G_bottleneck_beta", "=", "nn", ".", "Sequential", "(", "*", "G_bottleneck_beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.bottleneck_layer": [[763, 765], ["torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "bottleneck_layer", "(", "self", ",", "nc", ",", "bottleneck_depth", ")", ":", "\n", "        ", "return", "[", "nn", ".", "Conv2d", "(", "nc", ",", "bottleneck_depth", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "nn", ".", "Conv2d", "(", "bottleneck_depth", ",", "nc", ",", "kernel_size", "=", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_": [[767, 786], ["X.clone", "alpha_layer", "beta_layer"], "methods", ["None"], ["", "def", "get_FiLM_param_", "(", "self", ",", "X", ",", "i", ")", ":", "\n", "        ", "x", "=", "X", ".", "clone", "(", ")", "\n", "# bottleneck", "\n", "if", "(", "i", "==", "'2'", ")", ":", "\n", "            ", "alpha_layer", "=", "self", ".", "G_bottleneck_alpha_2", "\n", "beta_layer", "=", "self", ".", "G_bottleneck_beta_2", "\n", "", "elif", "(", "i", "==", "'3'", ")", ":", "\n", "            ", "alpha_layer", "=", "self", ".", "G_bottleneck_alpha_3", "\n", "beta_layer", "=", "self", ".", "G_bottleneck_beta_3", "\n", "", "elif", "(", "i", "==", "'4'", ")", ":", "\n", "            ", "alpha_layer", "=", "self", ".", "G_bottleneck_alpha_4", "\n", "beta_layer", "=", "self", ".", "G_bottleneck_beta_4", "\n", "", "else", ":", "# a number i will ve given to specify which bottleneck to use", "\n", "            ", "alpha_layer", "=", "self", ".", "G_bottleneck_alpha", "[", "i", ":", "i", "+", "3", "]", "\n", "beta_layer", "=", "self", ".", "G_bottleneck_beta", "[", "i", ":", "i", "+", "3", "]", "\n", "\n", "", "alpha", "=", "alpha_layer", "(", "x", ")", "\n", "beta", "=", "beta_layer", "(", "x", ")", "\n", "return", "alpha", ",", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.forward": [[787, 848], ["networks.uFT_Unet.downconv1", "networks.uFT_Unet.G_downconv1", "networks.uFT_Unet.downconv2", "networks.uFT_Unet.G_downconv2", "networks.uFT_Unet.get_FiLM_param_", "networks.affine_transformation", "networks.uFT_Unet.norm2_g", "networks.uFT_Unet.downconv3", "networks.uFT_Unet.G_downconv3", "networks.uFT_Unet.get_FiLM_param_", "networks.affine_transformation", "networks.uFT_Unet.norm3_g", "networks.uFT_Unet.downconv4", "networks.uFT_Unet.G_downconv4", "networks.uFT_Unet.get_FiLM_param_", "networks.affine_transformation", "networks.uFT_Unet.norm4_g", "range", "networks.uFT_Unet.downconv5", "networks.uFT_Unet.upconv1", "range", "networks.uFT_Unet.upconv2", "networks.uFT_Unet.upconv3", "networks.uFT_Unet.upconv4", "networks.uFT_Unet.upconv5", "networks.uFT_Unet.get_FiLM_param_", "networks.affine_transformation", "networks.uFT_Unet.norm_g", "upconv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "downconv", "G_downconv", "downconv", "G_downconv"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.uFT_Unet.get_FiLM_param_", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation"], ["", "def", "forward", "(", "self", ",", "input", ",", "guide", ")", ":", "\n", "## downconv", "\n", "        ", "down1", "=", "self", ".", "downconv1", "(", "input", ")", "\n", "G_down1", "=", "self", ".", "G_downconv1", "(", "guide", ")", "\n", "\n", "down2", "=", "self", ".", "downconv2", "(", "down1", ")", "\n", "G_down2", "=", "self", ".", "G_downconv2", "(", "G_down1", ")", "\n", "\n", "g_alpha2", ",", "g_beta2", "=", "self", ".", "get_FiLM_param_", "(", "G_down2", ",", "'2'", ")", "\n", "down2", "=", "affine_transformation", "(", "down2", ",", "g_alpha2", ",", "g_beta2", ")", "\n", "G_down2", "=", "self", ".", "norm2_g", "(", "G_down2", ")", "\n", "\n", "down3", "=", "self", ".", "downconv3", "(", "down2", ")", "\n", "G_down3", "=", "self", ".", "G_downconv3", "(", "G_down2", ")", "\n", "\n", "g_alpha3", ",", "g_beta3", "=", "self", ".", "get_FiLM_param_", "(", "G_down3", ",", "'3'", ")", "\n", "down3", "=", "affine_transformation", "(", "down3", ",", "g_alpha3", ",", "g_beta3", ")", "\n", "G_down3", "=", "self", ".", "norm3_g", "(", "G_down3", ")", "\n", "\n", "down4", "=", "self", ".", "downconv4", "(", "down3", ")", "\n", "G_down4", "=", "self", ".", "G_downconv4", "(", "G_down3", ")", "\n", "\n", "g_alpha4", ",", "g_beta4", "=", "self", ".", "get_FiLM_param_", "(", "G_down4", ",", "'4'", ")", "\n", "down4", "=", "affine_transformation", "(", "down4", ",", "g_alpha4", ",", "g_beta4", ")", "\n", "G_down4", "=", "self", ".", "norm4_g", "(", "G_down4", ")", "\n", "\n", "## (num_downs - 5) layers", "\n", "down", "=", "[", "]", "\n", "G_down", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_downs", "-", "5", ")", ":", "\n", "            ", "layer", "=", "2", "*", "i", "\n", "bottleneck_layer", "=", "3", "*", "i", "\n", "downconv", "=", "self", ".", "downconv", "[", "layer", ":", "layer", "+", "2", "]", "\n", "G_downconv", "=", "self", ".", "G_downconv", "[", "layer", ":", "layer", "+", "2", "]", "\n", "if", "(", "layer", "==", "0", ")", ":", "\n", "                ", "down", "+=", "[", "downconv", "(", "down4", ")", "]", "\n", "G_down", "+=", "[", "G_downconv", "(", "G_down4", ")", "]", "\n", "", "else", ":", "\n", "                ", "down", "+=", "[", "downconv", "(", "down", "[", "i", "-", "1", "]", ")", "]", "\n", "G_down", "+=", "[", "G_downconv", "(", "G_down", "[", "i", "-", "1", "]", ")", "]", "\n", "\n", "", "g_alpha", ",", "g_beta", "=", "self", ".", "get_FiLM_param_", "(", "G_down", "[", "i", "]", ",", "bottleneck_layer", ")", "\n", "down", "[", "i", "]", "=", "affine_transformation", "(", "down", "[", "i", "]", ",", "g_alpha", ",", "g_beta", ")", "\n", "G_down", "[", "i", "]", "=", "self", ".", "norm_g", "(", "G_down", "[", "i", "]", ")", "\n", "\n", "", "down5", "=", "self", ".", "downconv5", "(", "down", "[", "-", "1", "]", ")", "\n", "\n", "## concat and upconv", "\n", "up", "=", "self", ".", "upconv1", "(", "down5", ")", "\n", "num_down", "=", "self", ".", "num_downs", "-", "5", "\n", "for", "i", "in", "range", "(", "self", ".", "num_downs", "-", "5", ")", ":", "\n", "            ", "layer", "=", "3", "*", "i", "\n", "upconv", "=", "self", ".", "upconv", "[", "layer", ":", "layer", "+", "3", "]", "\n", "num_down", "-=", "1", "\n", "up", "=", "upconv", "(", "torch", ".", "cat", "(", "[", "down", "[", "num_down", "]", ",", "up", "]", ",", "1", ")", ")", "\n", "", "up", "=", "self", ".", "upconv2", "(", "torch", ".", "cat", "(", "[", "down4", ",", "up", "]", ",", "1", ")", ")", "\n", "up", "=", "self", ".", "upconv3", "(", "torch", ".", "cat", "(", "[", "down3", ",", "up", "]", ",", "1", ")", ")", "\n", "up", "=", "self", ".", "upconv4", "(", "torch", ".", "cat", "(", "[", "down2", ",", "up", "]", ",", "1", ")", ")", "\n", "up", "=", "self", ".", "upconv5", "(", "torch", ".", "cat", "(", "[", "down1", ",", "up", "]", ",", "1", ")", ")", "\n", "\n", "return", "up", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.get_norm_layer": [[11, 21], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "\n", "", "elif", "norm_type", "==", "'none'", ":", "\n", "        ", "norm_layer", "=", "None", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.get_scheduler": [[23, 38], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.ReduceLROnPlateau", "max", "float", "torch.optim.lr_scheduler.CosineAnnealingLR", "NotImplementedError"], "function", ["None"], ["", "def", "get_scheduler", "(", "optimizer", ",", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "lr_policy", "==", "'lambda'", ":", "\n", "        ", "def", "lambda_rule", "(", "epoch", ")", ":", "\n", "            ", "lr_l", "=", "1.0", "-", "max", "(", "0", ",", "epoch", "+", "opt", ".", "epoch_count", "-", "opt", ".", "niter", ")", "/", "float", "(", "opt", ".", "niter_decay", "+", "1", ")", "\n", "return", "lr_l", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_rule", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "opt", ".", "lr_decay_iters", ",", "gamma", "=", "0.1", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'plateau'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.2", ",", "threshold", "=", "0.01", ",", "patience", "=", "5", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "opt", ".", "niter", ",", "eta_min", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "NotImplementedError", "(", "'learning rate policy [%s] is not implemented'", ",", "opt", ".", "lr_policy", ")", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.init_weights": [[40, 62], ["print", "net.apply", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "    ", "def", "init_func", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.init_net": [[64, 71], ["networks.init_weights", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.init_weights"], ["", "def", "init_net", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "gpu_ids", ")", "\n", "", "init_weights", "(", "net", ",", "init_type", ",", "gain", "=", "init_gain", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.calc_mean_std": [[73, 82], ["feat.size", "feat_var.sqrt().view", "feat.view().mean().view", "len", "feat.view().var", "feat_var.sqrt", "feat.view().mean", "feat.view", "feat.view"], "function", ["None"], ["", "def", "calc_mean_std", "(", "feat", ",", "eps", "=", "1e-5", ")", ":", "\n", "# eps is a small value added to the variance to avoid divide-by-zero.", "\n", "    ", "size", "=", "feat", ".", "size", "(", ")", "\n", "assert", "(", "len", "(", "size", ")", "==", "4", ")", "\n", "N", ",", "C", "=", "size", "[", ":", "2", "]", "\n", "feat_var", "=", "feat", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", ".", "var", "(", "dim", "=", "2", ")", "+", "eps", "\n", "feat_std", "=", "feat_var", ".", "sqrt", "(", ")", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "feat_mean", "=", "feat", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "2", ")", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "return", "feat_mean", ",", "feat_std", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.affine_transformation": [[84, 90], ["X.clone", "networks.calc_mean_std", "mean.expand_as.expand_as", "std.expand_as.expand_as"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.calc_mean_std"], ["", "def", "affine_transformation", "(", "X", ",", "alpha", ",", "beta", ")", ":", "\n", "    ", "x", "=", "X", ".", "clone", "(", ")", "\n", "mean", ",", "std", "=", "calc_mean_std", "(", "x", ")", "\n", "mean", "=", "mean", ".", "expand_as", "(", "x", ")", "\n", "std", "=", "std", ".", "expand_as", "(", "x", ")", "\n", "return", "alpha", "*", "(", "(", "x", "-", "mean", ")", "/", "std", ")", "+", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.define_G": [[96, 109], ["networks.get_norm_layer", "networks.init_net", "networks.bFT_Resnet", "networks.bFT_Unet", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.init_net"], ["", "def", "define_G", "(", "input_nc", ",", "guide_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "n_layers", "=", "8", ",", "n_downsampling", "=", "3", ",", "n_blocks", "=", "9", ",", "norm", "=", "'batch'", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "net", "=", "None", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "if", "netG", "==", "'bFT_resnet'", ":", "\n", "        ", "net", "=", "bFT_Resnet", "(", "input_nc", ",", "guide_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "n_blocks", "=", "n_blocks", ")", "\n", "", "elif", "netG", "==", "'bFT_unet'", ":", "\n", "        ", "net", "=", "bFT_Unet", "(", "input_nc", ",", "guide_nc", ",", "output_nc", ",", "n_layers", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Generator model name [%s] is not recognized'", "%", "netG", ")", "\n", "", "net", "=", "init_net", "(", "net", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.define_D": [[110, 123], ["networks.get_norm_layer", "networks.init_net", "networks.NLayerDiscriminator", "networks.NLayerDiscriminator", "networks.PixelDiscriminator", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.init_net"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "netD", ",", "n_layers_D", "=", "3", ",", "norm", "=", "'batch'", ",", "use_sigmoid", "=", "False", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "net", "=", "None", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "if", "netD", "==", "'basic'", ":", "\n", "        ", "net", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "use_sigmoid", ")", "\n", "", "elif", "netD", "==", "'n_layers'", ":", "\n", "        ", "net", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "use_sigmoid", ")", "\n", "", "elif", "netD", "==", "'pixel'", ":", "\n", "        ", "net", "=", "PixelDiscriminator", "(", "input_nc", ",", "ndf", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "use_sigmoid", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Discriminator model name [%s] is not recognized'", "%", "net", ")", "\n", "", "return", "init_net", "(", "net", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.test_model.TestModel.name": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'TestModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.test_model.TestModel.modify_commandline_options": [[10, 21], ["guided_pix2pix_model.GuidedPix2PixModel.modify_commandline_options", "guided_pix2pix_model.GuidedPix2PixModel.modify_commandline_options.set_defaults", "guided_pix2pix_model.GuidedPix2PixModel.modify_commandline_options.add_argument"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.depth_dataset.DepthDataset.modify_commandline_options"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "assert", "not", "is_train", ",", "'TestModel cannot be used in train mode'", "\n", "parser", "=", "GuidedPix2PixModel", ".", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "False", ")", "\n", "parser", ".", "set_defaults", "(", "dataset_mode", "=", "'single'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--model_suffix'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'In checkpoints_dir, [epoch]_net_G[model_suffix].pth will'", "\n", "' be loaded as the generator of TestModel'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.test_model.TestModel.initialize": [[22, 37], ["base_model.BaseModel.initialize", "networks.define_G", "setattr"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.define_G"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "assert", "(", "not", "opt", ".", "isTrain", ")", "\n", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "# specify the models you want to save to the disk. The program will call base_model.save_networks and base_model.load_networks", "\n", "self", ".", "model_names", "=", "[", "'G'", "+", "opt", ".", "model_suffix", "]", "\n", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "input_nc", "=", "opt", ".", "input_nc", ",", "guide_nc", "=", "opt", ".", "guide_nc", ",", "output_nc", "=", "opt", ".", "output_nc", ",", "ngf", "=", "opt", ".", "ngf", ",", "netG", "=", "opt", ".", "netG", ",", "n_layers", "=", "opt", ".", "n_layers", ",", "\n", "norm", "=", "opt", ".", "norm", ",", "init_type", "=", "opt", ".", "init_type", ",", "init_gain", "=", "opt", ".", "init_gain", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "# assigns the model to self.netG_[suffix] so that it can be loaded", "\n", "# please see BaseModel.load_networks", "\n", "setattr", "(", "self", ",", "'netG'", "+", "opt", ".", "model_suffix", ",", "self", ".", "netG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.test_model.TestModel.set_input": [[38, 42], ["input[].to", "input[].to"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "# we need to use single_dataset mode", "\n", "        ", "self", ".", "real_A", "=", "input", "[", "'A'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "guide", "=", "input", "[", "'guide'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.test_model.TestModel.forward": [[43, 45], ["test_model.TestModel.netG"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "fake_B", "=", "self", ".", "netG", "(", "self", ".", "real_A", ",", "self", ".", "guide", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.test_model.TestModel.get_output": [[46, 48], ["None"], "methods", ["None"], ["", "def", "get_output", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fake_B", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.guided_pix2pix_model.GuidedPix2PixModel.name": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'GuidedPix2PixModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.guided_pix2pix_model.GuidedPix2PixModel.initialize": [[11, 56], ["base_model.BaseModel.initialize", "networks.define_G", "networks.define_D", "util.util.image_pool.ImagePool", "torch.nn.L1Loss", "torch.optim.Adam", "guided_pix2pix_model.GuidedPix2PixModel.optimizers.append", "networks.GANLoss().to", "guided_pix2pix_model.GuidedPix2PixModel.netG.parameters", "torch.optim.Adam", "guided_pix2pix_model.GuidedPix2PixModel.optimizers.append", "guided_pix2pix_model.GuidedPix2PixModel.netD.parameters", "networks.GANLoss"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.define_G", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.define_D"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "# specify the training losses you want to print out. The program will call base_model.get_current_losses", "\n", "self", ".", "use_GAN", "=", "opt", ".", "use_GAN", "\n", "if", "self", ".", "use_GAN", ":", "\n", "            ", "self", ".", "loss_names", "=", "[", "'G_GAN'", ",", "'G_L1'", ",", "'D_real'", ",", "'D_fake'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss_names", "=", "[", "'G_L1'", "]", "\n", "\n", "# specify the models you want to save to the disk. The program will call base_model.save_networks and base_model.load_networks", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "if", "self", ".", "use_GAN", ":", "\n", "                ", "self", ".", "model_names", "=", "[", "'G'", ",", "'D'", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "model_names", "=", "[", "'G'", "]", "\n", "", "", "else", ":", "# during test time, only load Gs", "\n", "            ", "self", ".", "model_names", "=", "[", "'G'", "]", "\n", "\n", "# load/define networks", "\n", "", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "input_nc", "=", "opt", ".", "input_nc", ",", "guide_nc", "=", "opt", ".", "guide_nc", ",", "output_nc", "=", "opt", ".", "output_nc", ",", "ngf", "=", "opt", ".", "ngf", ",", "netG", "=", "opt", ".", "netG", ",", "n_layers", "=", "opt", ".", "n_layers", ",", "norm", "=", "opt", ".", "norm", ",", "init_type", "=", "opt", ".", "init_type", ",", "init_gain", "=", "opt", ".", "init_gain", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "if", "self", ".", "isTrain", "&", "self", ".", "use_GAN", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "input_nc", "=", "opt", ".", "input_nc", "+", "opt", ".", "guide_nc", "+", "opt", ".", "output_nc", ",", "ndf", "=", "opt", ".", "ndf", ",", "netD", "=", "opt", ".", "netD", ",", "n_layers_D", "=", "opt", ".", "n_layers_D", ",", "\n", "norm", "=", "opt", ".", "norm", ",", "use_sigmoid", "=", "use_sigmoid", ",", "init_type", "=", "opt", ".", "init_type", ",", "init_gain", "=", "opt", ".", "init_gain", ",", "gpu_ids", "=", "self", ".", "gpu_ids", ")", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "fake_AB_pool", "=", "ImagePool", "(", "0", ")", "\n", "\n", "# define loss functions", "\n", "if", "self", ".", "use_GAN", ":", "\n", "                ", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "self", ".", "criterionL1", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "# initialize optimizers", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netG", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "if", "self", ".", "use_GAN", ":", "\n", "                ", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netD", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.guided_pix2pix_model.GuidedPix2PixModel.set_input": [[57, 61], ["input[].to", "input[].to", "input[].to"], "methods", ["None"], ["", "", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "real_A", "=", "input", "[", "'A'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "real_B", "=", "input", "[", "'B'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "guide", "=", "input", "[", "'guide'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.guided_pix2pix_model.GuidedPix2PixModel.forward": [[62, 64], ["guided_pix2pix_model.GuidedPix2PixModel.netG"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "fake_B", "=", "self", ".", "netG", "(", "self", ".", "real_A", ",", "self", ".", "guide", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.guided_pix2pix_model.GuidedPix2PixModel.get_output": [[65, 67], ["None"], "methods", ["None"], ["", "def", "get_output", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fake_B", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.guided_pix2pix_model.GuidedPix2PixModel.get_class": [[68, 70], ["None"], "methods", ["None"], ["", "def", "get_class", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "class_B", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.guided_pix2pix_model.GuidedPix2PixModel.get_current_data": [[71, 73], ["None"], "methods", ["None"], ["", "def", "get_current_data", "(", "self", ")", ":", "\n", "        ", "return", "{", "'A'", ":", "self", ".", "real_A", ",", "'guide'", ":", "self", ".", "guide", ",", "'B'", ":", "self", ".", "real_B", ",", "'output'", ":", "self", ".", "fake_B", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.guided_pix2pix_model.GuidedPix2PixModel.backward_D": [[74, 92], ["guided_pix2pix_model.GuidedPix2PixModel.fake_AB_pool.query", "guided_pix2pix_model.GuidedPix2PixModel.netD", "guided_pix2pix_model.GuidedPix2PixModel.criterionGAN", "torch.cat", "guided_pix2pix_model.GuidedPix2PixModel.netD", "guided_pix2pix_model.GuidedPix2PixModel.criterionGAN", "guided_pix2pix_model.GuidedPix2PixModel.loss_D.backward", "torch.cat", "guided_pix2pix_model.GuidedPix2PixModel.detach"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.image_pool.ImagePool.query"], ["", "def", "backward_D", "(", "self", ")", ":", "\n", "# Fake", "\n", "# stop backprop to the generator by detaching fake_B", "\n", "        ", "fake_AB", "=", "self", ".", "fake_AB_pool", ".", "query", "(", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "guide", ",", "self", ".", "fake_B", ")", ",", "1", ")", ")", "\n", "\n", "pred_fake", "=", "self", ".", "netD", "(", "fake_AB", ".", "detach", "(", ")", ")", "\n", "self", ".", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ")", "\n", "\n", "# Real", "\n", "real_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "guide", ",", "self", ".", "real_B", ")", ",", "1", ")", "\n", "\n", "pred_real", "=", "self", ".", "netD", "(", "real_AB", ")", "\n", "self", ".", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "\n", "# Combined loss", "\n", "self", ".", "loss_D", "=", "(", "self", ".", "loss_D_fake", "+", "self", ".", "loss_D_real", ")", "*", "0.5", "\n", "\n", "self", ".", "loss_D", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.guided_pix2pix_model.GuidedPix2PixModel.backward_G": [[93, 107], ["guided_pix2pix_model.GuidedPix2PixModel.loss_G.backward", "torch.cat", "guided_pix2pix_model.GuidedPix2PixModel.netD", "guided_pix2pix_model.GuidedPix2PixModel.criterionGAN", "guided_pix2pix_model.GuidedPix2PixModel.criterionL1", "guided_pix2pix_model.GuidedPix2PixModel.criterionL1"], "methods", ["None"], ["", "def", "backward_G", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "use_GAN", ":", "\n", "# First, G(A) should fake the discriminator", "\n", "            ", "fake_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "guide", ",", "self", ".", "fake_B", ")", ",", "1", ")", "\n", "pred_fake", "=", "self", ".", "netD", "(", "fake_AB", ")", "\n", "self", ".", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "# Second, G(A) = B", "\n", "self", ".", "loss_G_L1", "=", "self", ".", "criterionL1", "(", "self", ".", "fake_B", ",", "self", ".", "real_B", ")", "*", "self", ".", "opt", ".", "lambda_L1", "\n", "self", ".", "loss_G", "=", "self", ".", "loss_G_GAN", "+", "self", ".", "loss_G_L1", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss_G_L1", "=", "self", ".", "criterionL1", "(", "self", ".", "fake_B", ",", "self", ".", "real_B", ")", "\n", "self", ".", "loss_G", "=", "self", ".", "loss_G_L1", "\n", "\n", "", "self", ".", "loss_G", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.guided_pix2pix_model.GuidedPix2PixModel.optimize_parameters": [[108, 126], ["guided_pix2pix_model.GuidedPix2PixModel.forward", "guided_pix2pix_model.GuidedPix2PixModel.set_requires_grad", "guided_pix2pix_model.GuidedPix2PixModel.optimizer_D.zero_grad", "guided_pix2pix_model.GuidedPix2PixModel.backward_D", "guided_pix2pix_model.GuidedPix2PixModel.optimizer_D.step", "guided_pix2pix_model.GuidedPix2PixModel.set_requires_grad", "guided_pix2pix_model.GuidedPix2PixModel.optimizer_G.zero_grad", "guided_pix2pix_model.GuidedPix2PixModel.backward_G", "guided_pix2pix_model.GuidedPix2PixModel.optimizer_G.step", "guided_pix2pix_model.GuidedPix2PixModel.optimizer_G.zero_grad", "guided_pix2pix_model.GuidedPix2PixModel.backward_G", "guided_pix2pix_model.GuidedPix2PixModel.optimizer_G.step"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.forward", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.guided_pix2pix_model.GuidedPix2PixModel.backward_D", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.guided_pix2pix_model.GuidedPix2PixModel.backward_G", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.guided_pix2pix_model.GuidedPix2PixModel.backward_G"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "if", "self", ".", "use_GAN", ":", "\n", "# update D", "\n", "            ", "self", ".", "set_requires_grad", "(", "self", ".", "netD", ",", "True", ")", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_D", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "# update G", "\n", "self", ".", "set_requires_grad", "(", "self", ".", "netD", ",", "False", ")", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "# update G", "\n", "            ", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.__init__.find_model_using_name": [[5, 27], ["importlib.import_module", "importlib.import_module.__dict__.items", "model_name.replace", "print", "exit", "issubclass", "name.lower", "target_model_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.__init__.get_option_setter": [[29, 32], ["__init__.find_model_using_name"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.__init__.find_model_using_name"], []], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.__init__.create_model": [[34, 40], ["__init__.find_model_using_name", "find_model_using_name.", "model.initialize", "print", "model.name"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.__init__.find_model_using_name", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.depth_dataset.DepthDataset.name"], []], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.modify_commandline_options": [[11, 14], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.name": [[15, 17], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.initialize": [[18, 27], ["os.path.join", "torch.device", "torch.device"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "use_GAN", "=", "opt", ".", "use_GAN", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", ")", "if", "self", ".", "gpu_ids", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "self", ".", "loss_names", "=", "[", "]", "\n", "self", ".", "model_names", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.set_input": [[28, 30], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "input", "=", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.forward": [[31, 33], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.setup": [[35, 42], ["base_model.BaseModel.print_networks", "base_model.BaseModel.load_networks", "networks.get_scheduler"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.print_networks", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.load_networks", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.networks.get_scheduler"], ["", "def", "setup", "(", "self", ",", "opt", ",", "parser", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "schedulers", "=", "[", "networks", ".", "get_scheduler", "(", "optimizer", ",", "opt", ")", "for", "optimizer", "in", "self", ".", "optimizers", "]", "\n", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "self", ".", "load_networks", "(", "opt", ".", "epoch", ")", "\n", "", "self", ".", "print_networks", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.eval": [[44, 49], ["isinstance", "getattr", "getattr.eval"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.test": [[52, 55], ["torch.no_grad", "base_model.BaseModel.forward"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.forward"], ["", "", "", "def", "test", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.get_image_paths": [[57, 59], ["None"], "methods", ["None"], ["", "", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.optimize_parameters": [[60, 62], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.update_learning_rate": [[64, 69], ["print", "scheduler.step"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "for", "scheduler", "in", "self", ".", "schedulers", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "", "lr", "=", "self", ".", "optimizers", "[", "0", "]", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "print", "(", "'learning rate = %.7f'", "%", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.get_current_losses": [[71, 78], ["collections.OrderedDict", "isinstance", "float", "getattr"], "methods", ["None"], ["", "def", "get_current_losses", "(", "self", ")", ":", "\n", "        ", "errors_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "loss_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "# float(...) works for both scalar tensor and float number", "\n", "                ", "errors_ret", "[", "name", "]", "=", "float", "(", "getattr", "(", "self", ",", "'loss_'", "+", "name", ")", ")", "\n", "", "", "return", "errors_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.save_networks": [[80, 92], ["isinstance", "os.path.join", "getattr", "torch.cuda.is_available", "torch.save", "getattr.cuda", "torch.save", "len", "getattr.module.cpu().state_dict", "getattr.cpu().state_dict", "getattr.module.cpu", "getattr.cpu"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.save", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.save"], ["", "def", "save_networks", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "\n", "if", "len", "(", "self", ".", "gpu_ids", ")", ">", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "torch", ".", "save", "(", "net", ".", "module", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "net", ".", "cuda", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.__patch_instance_norm_state_dict": [[93, 105], ["len", "base_model.BaseModel.__patch_instance_norm_state_dict", "module.__class__.__name__.startswith", "module.__class__.__name__.startswith", "state_dict.pop", "getattr", "getattr", "state_dict.pop"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.__patch_instance_norm_state_dict"], ["", "", "", "", "def", "__patch_instance_norm_state_dict", "(", "self", ",", "state_dict", ",", "module", ",", "keys", ",", "i", "=", "0", ")", ":", "\n", "        ", "key", "=", "keys", "[", "i", "]", "\n", "if", "i", "+", "1", "==", "len", "(", "keys", ")", ":", "# at the end, pointing to a parameter/buffer", "\n", "            ", "if", "module", ".", "__class__", ".", "__name__", ".", "startswith", "(", "'InstanceNorm'", ")", "and", "(", "key", "==", "'running_mean'", "or", "key", "==", "'running_var'", ")", ":", "\n", "                ", "if", "getattr", "(", "module", ",", "key", ")", "is", "None", ":", "\n", "                    ", "state_dict", ".", "pop", "(", "'.'", ".", "join", "(", "keys", ")", ")", "\n", "", "", "if", "module", ".", "__class__", ".", "__name__", ".", "startswith", "(", "'InstanceNorm'", ")", "and", "(", "key", "==", "'num_batches_tracked'", ")", ":", "\n", "                ", "state_dict", ".", "pop", "(", "'.'", ".", "join", "(", "keys", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "__patch_instance_norm_state_dict", "(", "state_dict", ",", "getattr", "(", "module", ",", "key", ")", ",", "keys", ",", "i", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.load_networks": [[107, 126], ["isinstance", "os.path.join", "getattr", "isinstance", "print", "torch.load", "hasattr", "list", "getattr.load_state_dict", "torch.load.keys", "base_model.BaseModel.__patch_instance_norm_state_dict", "str", "key.split"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.__patch_instance_norm_state_dict"], ["", "", "def", "load_networks", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "load_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "name", ")", "\n", "load_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "load_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "net", "=", "net", ".", "module", "\n", "", "print", "(", "'loading the model from %s'", "%", "load_path", ")", "\n", "# if you are using PyTorch newer than 0.4 (e.g., built from", "\n", "# GitHub source), you can remove str() on self.device", "\n", "state_dict", "=", "torch", ".", "load", "(", "load_path", ",", "map_location", "=", "str", "(", "self", ".", "device", ")", ")", "\n", "if", "hasattr", "(", "state_dict", ",", "'_metadata'", ")", ":", "\n", "                    ", "del", "state_dict", ".", "_metadata", "\n", "\n", "# patch InstanceNorm checkpoints prior to 0.4", "\n", "", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "# need to copy keys here because we mutate in loop", "\n", "                    ", "self", ".", "__patch_instance_norm_state_dict", "(", "state_dict", ",", "net", ",", "key", ".", "split", "(", "'.'", ")", ")", "\n", "", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.print_networks": [[128, 140], ["print", "print", "isinstance", "getattr", "getattr.parameters", "print", "param.numel", "print"], "methods", ["None"], ["", "", "", "def", "print_networks", "(", "self", ",", "verbose", ")", ":", "\n", "        ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "if", "verbose", ":", "\n", "                    ", "print", "(", "net", ")", "\n", "", "print", "(", "'[Network %s] Total number of parameters : %.3f M'", "%", "(", "name", ",", "num_params", "/", "1e6", ")", ")", "\n", "", "", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.models.base_model.BaseModel.set_requires_grad": [[142, 149], ["isinstance", "net.parameters"], "methods", ["None"], ["", "def", "set_requires_grad", "(", "self", ",", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "            ", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "            ", "if", "net", "is", "not", "None", ":", "\n", "                ", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.base_dataset.BaseDataset.__init__": [[7, 9], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.base_dataset.BaseDataset.name": [[10, 12], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseDataset'", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.base_dataset.BaseDataset.modify_commandline_options": [[13, 16], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.base_dataset.BaseDataset.initialize": [[17, 19], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.base_dataset.BaseDataset.__len__": [[20, 22], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.base_dataset.get_transform": [[24, 52], ["torchvision.Compose", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.RandomCrop", "transform_list.append", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "transform_list.append", "torchvision.Lambda", "transform_list.append", "transform_list.append", "torchvision.Lambda", "torchvision.RandomCrop", "transform_list.append", "ValueError", "base_dataset.__scale_width", "torchvision.Lambda", "base_dataset.__scale_width", "base_dataset.__adjust"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.base_dataset.__adjust"], ["", "", "def", "get_transform", "(", "opt", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "opt", ".", "resize_or_crop", "==", "'resize_and_crop'", ":", "\n", "        ", "osize", "=", "[", "opt", ".", "loadSize", ",", "opt", ".", "loadSize", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "osize", ",", "Image", ".", "BICUBIC", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'crop'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'scale_width'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "\n", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "fineSize", ")", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'scale_width_and_crop'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "\n", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "loadSize", ")", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'none'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "\n", "lambda", "img", ":", "__adjust", "(", "img", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'--resize_or_crop %s is not a valid option.'", "%", "opt", ".", "resize_or_crop", ")", "\n", "\n", "", "if", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_flip", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "\n", "", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.base_dataset.__adjust": [[55, 73], ["img.resize", "base_dataset.__print_size_warning"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.base_dataset.__print_size_warning"], ["", "def", "__adjust", "(", "img", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "\n", "# the size needs to be a multiple of this number,", "\n", "# because going through generator network may change img size", "\n", "# and eventually cause size mismatch error", "\n", "mult", "=", "4", "\n", "if", "ow", "%", "mult", "==", "0", "and", "oh", "%", "mult", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "(", "ow", "-", "1", ")", "//", "mult", "\n", "w", "=", "(", "w", "+", "1", ")", "*", "mult", "\n", "h", "=", "(", "oh", "-", "1", ")", "//", "mult", "\n", "h", "=", "(", "h", "+", "1", ")", "*", "mult", "\n", "\n", "if", "ow", "!=", "w", "or", "oh", "!=", "h", ":", "\n", "        ", "__print_size_warning", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", "\n", "\n", "", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.base_dataset.__scale_width": [[75, 94], ["int", "img.resize", "base_dataset.__print_size_warning"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.base_dataset.__print_size_warning"], ["", "def", "__scale_width", "(", "img", ",", "target_width", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "\n", "# the size needs to be a multiple of this number,", "\n", "# because going through generator network may change img size", "\n", "# and eventually cause size mismatch error", "\n", "mult", "=", "4", "\n", "assert", "target_width", "%", "mult", "==", "0", ",", "\"the target width needs to be multiple of %d.\"", "%", "mult", "\n", "if", "(", "ow", "==", "target_width", "and", "oh", "%", "mult", "==", "0", ")", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "target_width", "\n", "target_height", "=", "int", "(", "target_width", "*", "oh", "/", "ow", ")", "\n", "m", "=", "(", "target_height", "-", "1", ")", "//", "mult", "\n", "h", "=", "(", "m", "+", "1", ")", "*", "mult", "\n", "\n", "if", "target_height", "!=", "h", ":", "\n", "        ", "__print_size_warning", "(", "target_width", ",", "target_height", ",", "w", ",", "h", ")", "\n", "\n", "", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.base_dataset.__print_size_warning": [[96, 103], ["hasattr", "print"], "function", ["None"], ["", "def", "__print_size_warning", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "__print_size_warning", ",", "'has_printed'", ")", ":", "\n", "        ", "print", "(", "\"The image size needs to be a multiple of 4. \"", "\n", "\"The loaded image size was (%d, %d), so it was adjusted to \"", "\n", "\"(%d, %d). This adjustment will be done to all images \"", "\n", "\"whose sizes are not multiples of 4\"", "%", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", ")", "\n", "__print_size_warning", ".", "has_printed", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.TextureDataset.modify_commandline_options": [[156, 159], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.TextureDataset.initialize": [[160, 175], ["texture_dataset.make_dataset", "texture_dataset.train_get_transforms", "texture_dataset.test_get_transforms"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.make_dataset", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.train_get_transforms", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.test_get_transforms"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "\n", "# train or val", "\n", "if", "(", "opt", ".", "isTrain", ")", ":", "\n", "            ", "choice", "=", "'train'", "\n", "self", ".", "transform", "=", "train_get_transforms", "(", ")", "\n", "", "else", ":", "\n", "            ", "choice", "=", "'val'", "\n", "self", ".", "transform", "=", "test_get_transforms", "(", ")", "\n", "\n", "", "self", ".", "erode_seg", "=", "True", "\n", "self", ".", "loader", "=", "default_loader", "\n", "\n", "self", ".", "imgs", "=", "make_dataset", "(", "opt", ".", "dataroot", ",", "choice", ",", "self", ".", "erode_seg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.TextureDataset.__getitem__": [[176, 252], ["texture_dataset.TextureDataset.loader", "texture_dataset.TextureDataset.loader", "texture_dataset.TextureDataset.loader", "texture_dataset.TextureDataset.loader", "util.texture_transforms.normalize_lab.unsqueeze", "util.texture_transforms.normalize_lab.unsqueeze", "torch.cat.unsqueeze", "texture_dataset.TextureDataset.unsqueeze", "util.texture_transforms.normalize_lab.unsqueeze", "util.texture_transforms.normalize_lab", "util.texture_transforms.normalize_lab", "util.texture_transforms.normalize_lab", "util.texture_transforms.normalize_seg", "util.texture_transforms.normalize_seg", "torch.cat.size", "torch.cat.view", "torch.cat", "texture_dataset.TextureDataset.view", "util.texture_transforms.normalize_lab.size", "torch.arange().long", "target_texture.index_select", "input_stack[].float().unsqueeze().squeeze", "input_stack[].float().squeeze", "target_img.float().squeeze", "texture_dataset.TextureDataset.loader", "torch.cat.fill_", "torch.ones", "texture_dataset.gen_input_rand", "torch.max", "torch.max", "texture_dataset.TextureDataset.transform", "texture_dataset.TextureDataset.transform", "torch.cat.size", "util.texture_transforms.normalize_lab.float", "torch.cat.float", "texture_dataset.gen_input_rand", "torch.arange", "input_stack[].float().unsqueeze", "input_stack[].float", "target_img.float", "target_texture.size", "input_stack[].float"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.normalize_lab", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.normalize_lab", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.normalize_lab", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.normalize_seg", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.texture_transforms.normalize_seg", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.gen_input_rand", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.gen_input_rand"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "erode_seg", ":", "\n", "            ", "img_path", ",", "skg_path", ",", "seg_path", ",", "eroded_seg_path", ",", "txt_path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "img_path", ",", "skg_path", ",", "seg_path", ",", "txt_path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "\n", "", "img", "=", "self", ".", "loader", "(", "img_path", ")", "\n", "skg", "=", "self", ".", "loader", "(", "skg_path", ")", "\n", "seg", "=", "self", ".", "loader", "(", "seg_path", ")", "\n", "txt", "=", "self", ".", "loader", "(", "txt_path", ")", "\n", "\n", "if", "self", ".", "erode_seg", ":", "\n", "            ", "eroded_seg", "=", "self", ".", "loader", "(", "eroded_seg_path", ")", "\n", "", "else", ":", "\n", "            ", "eroded_seg", "=", "None", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "erode_seg", ":", "\n", "                ", "img", ",", "skg", ",", "seg", ",", "eroded_seg", ",", "txt", "=", "self", ".", "transform", "(", "[", "img", ",", "skg", ",", "seg", ",", "eroded_seg", ",", "txt", "]", ")", "\n", "", "else", ":", "\n", "                ", "img", ",", "skg", ",", "seg", ",", "txt", "=", "self", ".", "transform", "(", "[", "img", ",", "skg", ",", "seg", ",", "txt", "]", ")", "\n", "eroded_seg", "=", "seg", "\n", "\n", "## WE NOW HAVE: img, skg, seg, eroded_seg, txt", "\n", "# convert them to 1 batch for processing", "\n", "", "", "img", "=", "img", ".", "unsqueeze", "(", "0", ")", "\n", "skg", "=", "skg", ".", "unsqueeze", "(", "0", ")", "\n", "seg", "=", "seg", ".", "unsqueeze", "(", "0", ")", "\n", "eroded_seg", "=", "eroded_seg", ".", "unsqueeze", "(", "0", ")", "\n", "txt", "=", "txt", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# output img/skg/seg lab between 0-100, -128-128", "\n", "# normalize", "\n", "img", "=", "custom_transforms", ".", "normalize_lab", "(", "img", ")", "\n", "skg", "=", "custom_transforms", ".", "normalize_lab", "(", "skg", ")", "\n", "txt", "=", "custom_transforms", ".", "normalize_lab", "(", "txt", ")", "\n", "seg", "=", "custom_transforms", ".", "normalize_seg", "(", "seg", ")", "\n", "eroded_seg", "=", "custom_transforms", ".", "normalize_seg", "(", "eroded_seg", ")", "\n", "\n", "if", "not", "self", ".", "opt", ".", "use_segmentation_patch", ":", "\n", "            ", "seg", ".", "fill_", "(", "1", ")", "\n", "", "bs", ",", "w", ",", "h", "=", "seg", ".", "size", "(", ")", "\n", "\n", "seg", "=", "seg", ".", "view", "(", "bs", ",", "1", ",", "w", ",", "h", ")", "\n", "seg", "=", "torch", ".", "cat", "(", "(", "seg", ",", "seg", ",", "seg", ")", ",", "1", ")", "\n", "eroded_seg", "=", "eroded_seg", ".", "view", "(", "bs", ",", "1", ",", "w", ",", "h", ")", "\n", "\n", "temp", "=", "torch", ".", "ones", "(", "seg", ".", "size", "(", ")", ")", "*", "(", "1", "-", "seg", ")", ".", "float", "(", ")", "\n", "temp", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "0", "# torch.ones(seg[:,1,:,:].size())*(1-seg[:,1,:,:]).float()", "\n", "temp", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "0", "# torch.ones(seg[:,2,:,:].size())*(1-seg[:,2,:,:]).float()", "\n", "\n", "txt", "=", "txt", ".", "float", "(", ")", "*", "seg", ".", "float", "(", ")", "+", "temp", "\n", "\n", "if", "self", ".", "opt", ".", "input_texture_patch", "==", "'original_image'", ":", "\n", "            ", "inp", ",", "_", "=", "gen_input_rand", "(", "img", ",", "skg", ",", "eroded_seg", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "self", ".", "opt", ".", "patch_size_min", ",", "self", ".", "opt", ".", "patch_size_max", ",", "self", ".", "opt", ".", "num_input_texture_patch", ")", "\n", "", "elif", "self", ".", "opt", ".", "input_texture_patch", "==", "'dtd_texture'", ":", "\n", "            ", "inp", ",", "_", "=", "gen_input_rand", "(", "txt", ",", "skg", ",", "eroded_seg", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "self", ".", "opt", ".", "patch_size_min", ",", "self", ".", "opt", ".", "patch_size_max", ",", "self", ".", "opt", ".", "num_input_texture_patch", ")", "\n", "\n", "", "batch_size", ",", "_", ",", "_", ",", "_", "=", "img", ".", "size", "(", ")", "\n", "\n", "input_stack", "=", "inp", "\n", "target_img", "=", "img", "\n", "segment", "=", "seg", "\n", "target_texture", "=", "txt", "\n", "\n", "inv_idx", "=", "torch", ".", "arange", "(", "target_texture", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "long", "(", ")", "\n", "target_texture_inv", "=", "target_texture", ".", "index_select", "(", "0", ",", "inv_idx", ")", "\n", "\n", "assert", "torch", ".", "max", "(", "seg", ")", "<=", "1", "\n", "assert", "torch", ".", "max", "(", "eroded_seg", ")", "<=", "1", "\n", "\n", "A", "=", "input_stack", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ".", "squeeze", "(", "0", ")", "\n", "guide", "=", "input_stack", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ".", "float", "(", ")", ".", "squeeze", "(", "0", ")", "\n", "B", "=", "target_img", ".", "float", "(", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "return", "{", "'A'", ":", "A", ",", "'guide'", ":", "guide", ",", "'B'", ":", "B", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.TextureDataset.__len__": [[253, 255], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.TextureDataset.name": [[256, 258], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'TextureDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.is_image_file": [[18, 20], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.find_classes": [[21, 26], ["classes.sort", "os.listdir", "os.listdir", "os.isdir", "range", "os.path.join", "os.path.join", "len"], "function", ["None"], ["", "def", "find_classes", "(", "directory", ")", ":", "\n", "    ", "classes", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "directory", ")", "if", "osp", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "d", ")", ")", "]", "\n", "classes", ".", "sort", "(", ")", "\n", "class_to_idx", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "return", "classes", ",", "class_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.make_dataset": [[27, 47], ["glob.glob", "sorted", "glob.glob", "sorted", "glob.glob", "sorted", "glob.glob", "range", "random.shuffle", "os.join", "os.join", "os.join", "os.join", "len", "extended_txt.append", "glob.glob", "sorted", "list", "list", "os.join", "zip", "zip", "len"], "function", ["None"], ["", "def", "make_dataset", "(", "directory", ",", "opt", ",", "erode_seg", "=", "True", ")", ":", "\n", "# opt: 'train' or 'val'", "\n", "    ", "img", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "directory", ",", "opt", "+", "'_img/*/*.jpg'", ")", ")", "\n", "img", "=", "sorted", "(", "img", ")", "\n", "skg", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "directory", ",", "opt", "+", "'_skg/*/*.jpg'", ")", ")", "\n", "skg", "=", "sorted", "(", "skg", ")", "\n", "seg", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "directory", ",", "opt", "+", "'_seg/*/*.jpg'", ")", ")", "\n", "seg", "=", "sorted", "(", "seg", ")", "\n", "txt", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "directory", ",", "opt", "+", "'_txt/*/*.jpg'", ")", ")", "\n", "extended_txt", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "skg", ")", ")", ":", "\n", "        ", "extended_txt", ".", "append", "(", "txt", "[", "i", "%", "len", "(", "txt", ")", "]", ")", "\n", "", "random", ".", "shuffle", "(", "extended_txt", ")", "\n", "\n", "if", "erode_seg", ":", "\n", "        ", "eroded_seg", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "directory", ",", "'eroded_'", "+", "opt", "+", "'_seg/*/*.jpg'", ")", ")", "\n", "eroded_seg", "=", "sorted", "(", "eroded_seg", ")", "\n", "return", "list", "(", "zip", "(", "img", ",", "skg", ",", "seg", ",", "eroded_seg", ",", "extended_txt", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "list", "(", "zip", "(", "img", ",", "skg", ",", "seg", ",", "extended_txt", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.pil_loader": [[49, 54], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["", "", "def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.accimage_loader": [[56, 63], ["accimage.Image", "texture_dataset.pil_loader"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.pil_loader"], ["", "", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "import", "accimage", "\n", "try", ":", "\n", "        ", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.default_loader": [[65, 67], ["texture_dataset.pil_loader"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.pil_loader"], ["", "", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.train_get_transforms": [[68, 77], ["util.texture_transforms.Compose", "util.texture_transforms.RandomSizedCrop", "util.texture_transforms.RandomHorizontalFlip", "util.texture_transforms.toLAB", "util.texture_transforms.toTensor"], "function", ["None"], ["", "def", "train_get_transforms", "(", ")", ":", "\n", "    ", "transforms_list", "=", "[", "\n", "custom_transforms", ".", "RandomSizedCrop", "(", "128", ",", "0.6", ",", "1", ")", ",", "\n", "custom_transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "custom_transforms", ".", "toLAB", "(", ")", ",", "\n", "custom_transforms", ".", "toTensor", "(", ")", ",", "\n", "]", "\n", "transforms", "=", "custom_transforms", ".", "Compose", "(", "transforms_list", ")", "\n", "return", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.test_get_transforms": [[78, 87], ["util.texture_transforms.Compose", "util.texture_transforms.Scale", "util.texture_transforms.CenterCrop", "util.texture_transforms.toLAB", "util.texture_transforms.toTensor"], "function", ["None"], ["", "def", "test_get_transforms", "(", ")", ":", "\n", "    ", "transforms_list", "=", "[", "\n", "custom_transforms", ".", "Scale", "(", "128", ")", ",", "\n", "custom_transforms", ".", "CenterCrop", "(", "128", ")", ",", "\n", "custom_transforms", ".", "toLAB", "(", ")", ",", "\n", "custom_transforms", ".", "toTensor", "(", ")", ",", "\n", "]", "\n", "transforms", "=", "custom_transforms", ".", "Compose", "(", "transforms_list", ")", "\n", "return", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.get_coor": [[88, 92], ["int"], "function", ["None"], ["", "def", "get_coor", "(", "index", ",", "size", ")", ":", "\n", "    ", "index", "=", "int", "(", "index", ")", "\n", "w", ",", "h", "=", "size", "\n", "return", "(", "(", "index", "%", "(", "w", "*", "h", ")", ")", "/", "h", ",", "(", "(", "index", "%", "(", "w", "*", "h", ")", ")", "%", "h", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.gen_input": [[93, 108], ["max", "max", "min", "min", "img[].clone", "torch.cat", "img.size", "int", "int", "int", "int", "input_sketch.cpu().float", "input_texture.float", "input_sketch.cpu"], "function", ["None"], ["", "def", "gen_input", "(", "img", ",", "skg", ",", "ini_texture", ",", "ini_mask", ",", "xcenter", "=", "64", ",", "ycenter", "=", "64", ",", "size", "=", "40", ")", ":", "\n", "# generate input skg with random patch from img", "\n", "# input img,skg [bsx3xwxh], xcenter,ycenter, size", "\n", "# output bsx5xwxh", "\n", "    ", "w", ",", "h", "=", "img", ".", "size", "(", ")", "[", "1", ":", "3", "]", "\n", "xstart", "=", "max", "(", "int", "(", "xcenter", "-", "size", "/", "2", ")", ",", "0", ")", "\n", "ystart", "=", "max", "(", "int", "(", "ycenter", "-", "size", "/", "2", ")", ",", "0", ")", "\n", "xend", "=", "min", "(", "int", "(", "xcenter", "+", "size", "/", "2", ")", ",", "w", ")", "\n", "yend", "=", "min", "(", "int", "(", "ycenter", "+", "size", "/", "2", ")", ",", "h", ")", "\n", "input_texture", "=", "ini_texture", "# torch.ones(img.size())*(1)", "\n", "input_sketch", "=", "skg", "[", "0", ":", "1", ",", ":", ",", ":", "]", "# L channel from skg", "\n", "input_mask", "=", "ini_mask", "# torch.ones(input_sketch.size())*(-1)", "\n", "input_mask", "[", ":", ",", "xstart", ":", "xend", ",", "ystart", ":", "yend", "]", "=", "1", "\n", "input_texture", "[", ":", ",", "xstart", ":", "xend", ",", "ystart", ":", "yend", "]", "=", "img", "[", ":", ",", "xstart", ":", "xend", ",", "ystart", ":", "yend", "]", ".", "clone", "(", ")", "\n", "return", "torch", ".", "cat", "(", "(", "input_sketch", ".", "cpu", "(", ")", ".", "float", "(", ")", ",", "input_texture", ".", "float", "(", ")", ",", "input_mask", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.rand_between": [[109, 111], ["torch.round", "torch.rand"], "function", ["None"], ["", "def", "rand_between", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "a", "+", "torch", ".", "round", "(", "torch", ".", "rand", "(", "1", ")", "*", "(", "b", "-", "a", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.gen_input_rand": [[112, 154], ["img.size", "torch.Tensor", "range", "torch.max", "range", "texture_info.append", "torch.ones", "torch.ones", "int", "torch.arange", "temp_info.append", "texture_dataset.gen_input", "int", "int", "int", "int", "img[].size", "texture_dataset.rand_between", "seg[].view().size", "len", "int", "texture_dataset.get_coor", "math.ceil", "math.ceil", "math.floor", "math.floor", "texture_dataset.rand_between", "seg[].size", "seg[].view", "seg[].view", "seg_one.view().size", "seg_one.view"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.gen_input", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.rand_between", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.get_coor", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.texture_dataset.rand_between"], ["", "def", "gen_input_rand", "(", "img", ",", "skg", ",", "seg", ",", "size_min", "=", "40", ",", "size_max", "=", "60", ",", "num_patch", "=", "1", ")", ":", "\n", "# generate input skg with random patch from img", "\n", "# input img,skg [bsx3xwxh], xcenter,ycenter, size", "\n", "# output bsx5xwxh", "\n", "    ", "bs", ",", "c", ",", "w", ",", "h", "=", "img", ".", "size", "(", ")", "\n", "results", "=", "torch", ".", "Tensor", "(", "bs", ",", "5", ",", "w", ",", "h", ")", "\n", "texture_info", "=", "[", "]", "\n", "\n", "seg", "=", "seg", "/", "torch", ".", "max", "(", "seg", ")", "#make sure it's 0/1", "\n", "\n", "seg", "[", ":", ",", "0", ":", "int", "(", "math", ".", "ceil", "(", "size_min", "/", "2", ")", ")", ",", ":", "]", "=", "0", "\n", "seg", "[", ":", ",", ":", ",", "0", ":", "int", "(", "math", ".", "ceil", "(", "size_min", "/", "2", ")", ")", "]", "=", "0", "\n", "seg", "[", ":", ",", ":", ",", "int", "(", "math", ".", "floor", "(", "h", "-", "size_min", "/", "2", ")", ")", ":", "h", "]", "=", "0", "\n", "seg", "[", ":", ",", "int", "(", "math", ".", "floor", "(", "w", "-", "size_min", "/", "2", ")", ")", ":", "w", ",", ":", "]", "=", "0", "\n", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "        ", "counter", "=", "0", "\n", "ini_texture", "=", "torch", ".", "ones", "(", "img", "[", "0", "]", ".", "size", "(", ")", ")", "*", "(", "1", ")", "\n", "ini_mask", "=", "torch", ".", "ones", "(", "(", "1", ",", "w", ",", "h", ")", ")", "*", "(", "-", "1", ")", "\n", "temp_info", "=", "[", "]", "\n", "\n", "for", "j", "in", "range", "(", "num_patch", ")", ":", "\n", "            ", "crop_size", "=", "int", "(", "rand_between", "(", "size_min", ",", "size_max", ")", ")", "\n", "\n", "seg_index_size", "=", "seg", "[", "i", ",", ":", ",", ":", "]", ".", "view", "(", "-", "1", ")", ".", "size", "(", ")", "[", "0", "]", "\n", "seg_index", "=", "torch", ".", "arange", "(", "0", ",", "seg_index_size", ")", "\n", "seg_one", "=", "seg_index", "[", "seg", "[", "i", ",", ":", ",", ":", "]", ".", "view", "(", "-", "1", ")", "==", "1", "]", "\n", "if", "len", "(", "seg_one", ")", "!=", "0", ":", "\n", "                ", "seg_select_index", "=", "int", "(", "rand_between", "(", "0", ",", "seg_one", ".", "view", "(", "-", "1", ")", ".", "size", "(", ")", "[", "0", "]", "-", "1", ")", ")", "\n", "x", ",", "y", "=", "get_coor", "(", "seg_one", "[", "seg_select_index", "]", ",", "seg", "[", "i", ",", ":", ",", ":", "]", ".", "size", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "x", ",", "y", "=", "(", "w", "/", "2", ",", "h", "/", "2", ")", "\n", "\n", "", "temp_info", ".", "append", "(", "[", "x", ",", "y", ",", "crop_size", "]", ")", "\n", "res", "=", "gen_input", "(", "img", "[", "i", "]", ",", "skg", "[", "i", "]", ",", "ini_texture", ",", "ini_mask", ",", "x", ",", "y", ",", "crop_size", ")", "\n", "\n", "ini_texture", "=", "res", "[", "1", ":", "4", ",", ":", ",", ":", "]", "\n", "\n", "", "texture_info", ".", "append", "(", "temp_info", ")", "\n", "results", "[", "i", ",", ":", ",", ":", ",", ":", "]", "=", "res", "\n", "", "return", "results", ",", "texture_info", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.pose_dataset.PoseDataset.modify_commandline_options": [[10, 13], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.pose_dataset.PoseDataset.initialize": [[14, 22], ["os.path.join", "torchvision.Compose", "torchvision.ToTensor"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "if", "(", "self", ".", "opt", ".", "isTrain", ")", ":", "\n", "            ", "phase", "=", "'train'", "\n", "", "else", ":", "\n", "            ", "phase", "=", "'test'", "\n", "", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "dataroot", ",", "phase", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.pose_dataset.PoseDataset.randomFlip": [[23, 34], ["random.randint", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip"], "methods", ["None"], ["", "def", "randomFlip", "(", "self", ",", "x", ",", "x_target", ",", "pose", ",", "pose_target", ",", "mask", ",", "mask_target", ")", ":", "\n", "# random horizontal flip", "\n", "        ", "rand", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "(", "rand", "==", "1", ")", ":", "\n", "            ", "x", "=", "np", ".", "flip", "(", "x", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "x_target", "=", "np", ".", "flip", "(", "x_target", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "pose", "=", "np", ".", "flip", "(", "pose", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "pose_target", "=", "np", ".", "flip", "(", "pose_target", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "mask", "=", "np", ".", "flip", "(", "mask", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "mask_target", "=", "np", ".", "flip", "(", "mask_target", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "", "return", "x", ",", "x_target", ",", "pose", ",", "pose_target", ",", "mask", ",", "mask_target", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.pose_dataset.PoseDataset.__getitem__": [[35, 65], ["os.path.join", "open", "pickle.load", "pose_dataset.PoseDataset.transform", "pose_dataset.PoseDataset.transform", "pose_dataset.PoseDataset.transform", "pose_dataset.PoseDataset.transform", "pose_dataset.PoseDataset.transform", "pose_dataset.PoseDataset.transform", "pose_dataset.PoseDataset.randomFlip"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.depth_dataset.DepthDataset.randomFlip"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'%d.pkl'", "%", "index", ")", "\n", "pickle_in", "=", "open", "(", "path", ",", "\"rb\"", ")", "\n", "sample", "=", "pickle", ".", "load", "(", "pickle_in", ")", "\n", "\n", "x", "=", "sample", "[", "'x'", "]", "#(256, 256, 3)", "\n", "x_target", "=", "sample", "[", "'x_target'", "]", "#(256, 256, 3)", "\n", "pose", "=", "sample", "[", "'pose'", "]", "#(256, 256, 18)", "\n", "pose_target", "=", "sample", "[", "'pose_target'", "]", "#(256, 256, 18)", "\n", "mask", "=", "sample", "[", "'mask'", "]", "#(256, 256, 1)", "\n", "mask_target", "=", "sample", "[", "'mask_target'", "]", "#(256, 256, 1)", "\n", "\n", "# random fliping", "\n", "if", "(", "self", ".", "opt", ".", "isTrain", ")", ":", "\n", "            ", "x", ",", "x_target", ",", "pose", ",", "pose_target", ",", "mask", ",", "mask_target", "=", "self", ".", "randomFlip", "(", "x", ",", "x_target", ",", "pose", ",", "pose_target", ",", "mask", ",", "mask_target", ")", "\n", "\n", "# to tensor", "\n", "", "x", "=", "self", ".", "transform", "(", "x", ")", "\n", "x_target", "=", "self", ".", "transform", "(", "x_target", ")", "\n", "pose", "=", "self", ".", "transform", "(", "pose", ")", "\n", "pose_target", "=", "self", ".", "transform", "(", "pose_target", ")", "\n", "mask", "=", "self", ".", "transform", "(", "mask", ")", "\n", "mask_target", "=", "self", ".", "transform", "(", "mask_target", ")", "\n", "\n", "# input-guide-target", "\n", "input", "=", "(", "x", "/", "255", ")", "*", "2", "-", "1", "\n", "guide", "=", "pose_target", "\n", "target", "=", "(", "x_target", "/", "255", ")", "*", "2", "-", "1", "\n", "# Put data into [input, guide, target]", "\n", "return", "{", "'A'", ":", "input", ",", "'guide'", ":", "guide", ",", "'B'", ":", "target", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.pose_dataset.PoseDataset.__len__": [[67, 72], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "(", "self", ".", "opt", ".", "isTrain", ")", ":", "\n", "            ", "return", "73340", "\n", "", "else", ":", "\n", "            ", "return", "12800", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.pose_dataset.PoseDataset.name": [[73, 75], ["None"], "methods", ["None"], ["", "", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'PoseDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.__init__.CustomDatasetDataLoader.name": [[53, 55], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.__init__.CustomDatasetDataLoader.initialize": [[56, 64], ["data.base_data_loader.BaseDataLoader.initialize", "__init__.create_dataset", "torch.utils.data.DataLoader", "int"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.__init__.create_dataset"], []], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.__init__.CustomDatasetDataLoader.load_data": [[65, 67], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.__init__.CustomDatasetDataLoader.__len__": [[68, 70], ["min", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.__init__.CustomDatasetDataLoader.__iter__": [[71, 76], ["enumerate"], "methods", ["None"], []], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.__init__.find_dataset_using_name": [[7, 29], ["importlib.import_module", "importlib.import_module.__dict__.items", "dataset_name.replace", "print", "exit", "issubclass", "name.lower", "target_dataset_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.__init__.get_option_setter": [[31, 34], ["__init__.find_dataset_using_name"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.__init__.find_dataset_using_name"], []], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.__init__.create_dataset": [[36, 42], ["__init__.find_dataset_using_name", "find_dataset_using_name.", "dataset.initialize", "print", "dataset.name"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.__init__.find_dataset_using_name", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.depth_dataset.DepthDataset.name"], []], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.__init__.CreateDataLoader": [[44, 48], ["__init__.CustomDatasetDataLoader", "__init__.CustomDatasetDataLoader.initialize"], "function", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.initialize"], []], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.base_data_loader.BaseDataLoader.__init__": [[2, 4], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.base_data_loader.BaseDataLoader.initialize": [[5, 8], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.base_data_loader.BaseDataLoader.load_data": [[9, 11], ["None"], "methods", ["None"], ["", "def", "load_data", "(", ")", ":", "\n", "        ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.depth_dataset.DepthDataset.modify_commandline_options": [[11, 14], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.depth_dataset.DepthDataset.initialize": [[15, 27], ["os.path.join", "os.path.join", "os.path.join", "depth_dataset.DepthDataset.read_mat_files"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.depth_dataset.DepthDataset.read_mat_files"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "\n", "if", "(", "self", ".", "opt", ".", "isTrain", ")", ":", "\n", "            ", "file", "=", "'train'", "\n", "", "else", ":", "\n", "            ", "file", "=", "'test'", "\n", "", "dir_A", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'input_%dx_%s.mat'", "%", "(", "opt", ".", "depthTask_scale", ",", "file", ")", ")", "\n", "dir_B", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'depth_%s.mat'", "%", "(", "file", ")", ")", "\n", "dir_guide", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "'nyu_depth_v2_labeled.mat'", ")", "\n", "self", ".", "As", ",", "self", ".", "guides", ",", "self", ".", "Bs", "=", "self", ".", "read_mat_files", "(", "dir_A", ",", "dir_B", ",", "dir_guide", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.depth_dataset.DepthDataset.read_mat_files": [[28, 59], ["print", "numpy.clip", "numpy.transpose", "numpy.transpose", "scipy.io.loadmat", "mat[].astype", "numpy.transpose", "h5py.File", "numpy.array", "numpy.array.astype", "numpy.transpose", "scipy.io.loadmat", "mat[].astype", "numpy.transpose", "h5py.File", "numpy.array().astype", "hf.get", "h5py.File", "numpy.array().astype", "numpy.array", "numpy.array", "hf.get", "hf.get"], "methods", ["None"], ["", "def", "read_mat_files", "(", "self", ",", "dir_A", ",", "dir_B", ",", "dir_guide", ")", ":", "\n", "        ", "print", "(", "'Reading Matlab files...'", ")", "\n", "##### A ##### ", "\n", "if", "(", "self", ".", "opt", ".", "isTrain", ")", ":", "\n", "            ", "data", "=", "'input_%dx_train'", "%", "self", ".", "opt", ".", "depthTask_scale", "\n", "with", "h5py", ".", "File", "(", "dir_A", ",", "'r'", ")", "as", "hf", ":", "\n", "                ", "LowRes", "=", "np", ".", "array", "(", "hf", ".", "get", "(", "data", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "As", "=", "np", ".", "transpose", "(", "LowRes", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "'input_%dx_test'", "%", "self", ".", "opt", ".", "depthTask_scale", "\n", "mat", "=", "scipy", ".", "io", ".", "loadmat", "(", "dir_A", ")", "\n", "LowRes", "=", "mat", "[", "data", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "As", "=", "np", ".", "transpose", "(", "LowRes", ",", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", "\n", "", "As", "=", "np", ".", "clip", "(", "As", ",", "0", ",", "1", ")", "\n", "##### Guide ######", "\n", "with", "h5py", ".", "File", "(", "dir_guide", ",", "'r'", ")", "as", "hf", ":", "\n", "            ", "images", "=", "np", ".", "array", "(", "hf", ".", "get", "(", "'images'", ")", ")", "\n", "", "images", "=", "np", ".", "transpose", "(", "images", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "guides", "=", "images", ".", "astype", "(", "np", ".", "float32", ")", "/", "255", "\n", "##### B ######", "\n", "if", "(", "self", ".", "opt", ".", "isTrain", ")", ":", "\n", "            ", "data", "=", "'depth_train'", "\n", "with", "h5py", ".", "File", "(", "dir_B", ",", "'r'", ")", "as", "hf", ":", "\n", "                ", "depths", "=", "np", ".", "array", "(", "hf", ".", "get", "(", "data", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "Bs", "=", "np", ".", "transpose", "(", "depths", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "'depth_test'", "\n", "mat", "=", "scipy", ".", "io", ".", "loadmat", "(", "dir_B", ")", "\n", "depths", "=", "mat", "[", "data", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "Bs", "=", "np", ".", "transpose", "(", "depths", ",", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", "\n", "", "return", "As", ",", "guides", ",", "Bs", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.depth_dataset.DepthDataset.randomFlip": [[60, 68], ["random.randint", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip", "numpy.flip", "numpy.flip"], "methods", ["None"], ["", "def", "randomFlip", "(", "self", ",", "input", ",", "guide", ",", "target", ")", ":", "\n", "# random horizontal flip", "\n", "        ", "rand", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "(", "rand", "==", "1", ")", ":", "\n", "            ", "input", "=", "np", ".", "flip", "(", "input", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "guide", "=", "np", ".", "flip", "(", "guide", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "target", "=", "np", ".", "flip", "(", "target", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "", "return", "input", ",", "guide", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.depth_dataset.DepthDataset.__getitem__": [[69, 98], ["torchvision.Compose", "torchvision.Compose.", "torchvision.Compose.", "torchvision.Compose.", "depth_dataset.DepthDataset.randomFlip", "torchvision.ToTensor"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.depth_dataset.DepthDataset.randomFlip"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "(", "self", ".", "opt", ".", "isTrain", ")", ":", "\n", "            ", "shift", "=", "0", "\n", "", "else", ":", "\n", "            ", "shift", "=", "1000", "\n", "\n", "", "A", "=", "self", ".", "As", "[", "index", "]", "\n", "guide", "=", "self", ".", "guides", "[", "shift", "+", "index", "]", "\n", "B", "=", "self", ".", "Bs", "[", "index", "]", "\n", "\n", "# normalize [-1,1]", "\n", "A", "=", "A", "*", "2", "-", "1", "\n", "guide", "=", "guide", "*", "2", "-", "1", "\n", "B", "=", "B", "*", "2", "-", "1", "\n", "\n", "if", "self", ".", "opt", ".", "isTrain", ":", "\n", "            ", "A", ",", "guide", ",", "B", "=", "self", ".", "randomFlip", "(", "A", ",", "guide", ",", "B", ")", "\n", "\n", "# return as tensors", "\n", "", "t", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "A", "=", "t", "(", "A", ")", "\n", "guide", "=", "t", "(", "guide", ")", "\n", "B", "=", "t", "(", "B", ")", "\n", "\n", "assert", "(", "self", ".", "opt", ".", "input_nc", "==", "1", ")", "\n", "assert", "(", "self", ".", "opt", ".", "output_nc", "==", "1", ")", "\n", "assert", "(", "self", ".", "opt", ".", "guide_nc", "==", "3", ")", "\n", "\n", "return", "{", "'A'", ":", "A", ",", "'guide'", ":", "guide", ",", "'B'", ":", "B", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.depth_dataset.DepthDataset.__len__": [[99, 101], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "As", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.depth_dataset.DepthDataset.name": [[102, 104], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'DepthDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.test_options.TestOptions.initialize": [[5, 18], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.set_defaults", "float", "float"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--task'", ",", "required", "=", "True", ",", "help", "=", "'the task you are testing, this effects visualization and evaluation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--ntest'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'# of test examples.'", ")", "\n", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'aspect ratio of result images'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "#  Batchnorm has different behavioir during training and test.", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use eval mode during test time.'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_test'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'how many test images to run'", ")", "\n", "parser", ".", "set_defaults", "(", "model", "=", "'test'", ")", "\n", "self", ".", "isTrain", "=", "False", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.train_options.TrainOptions.initialize": [[5, 23], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_count'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'the starting epoch count, we save the model by <epoch_count>, <epoch_count>+<save_latest_freq>, ...'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter at starting learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_lsgan'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do *not* use least square GAN, if false, use vanilla GAN'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_policy'", ",", "type", "=", "str", ",", "default", "=", "'lambda'", ",", "help", "=", "'learning rate policy: lambda|step|plateau|cosine'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_iters'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'multiply by a gamma every lr_decay_iters iterations'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_L1'", ",", "type", "=", "float", ",", "default", "=", "100", ",", "help", "=", "'wieght of the L1 loss'", ")", "\n", "self", ".", "isTrain", "=", "True", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.initialize": [[13, 49], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "float"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "# general", "\n", "        ", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "required", "=", "True", ",", "help", "=", "'path to the dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_mode'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'chooses which dataset to load. [pose | texture | depth]'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of input image channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--guide_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of guide image channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--netD'", ",", "type", "=", "str", ",", "default", "=", "'basic'", ",", "help", "=", "'selects model to use for netD: SN-PatchGAN'", ")", "\n", "parser", ".", "add_argument", "(", "'--netG'", ",", "type", "=", "str", ",", "default", "=", "'bFT_resnet'", ",", "help", "=", "'selects model to use for netG: bFT_resnet or bFT_unet'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_GAN'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use GAN loss in addition to default L1 loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_layers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'only used if netG has unet base'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'only used if netD==n_layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'experiment_name'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'guided_pix2pix'", ",", "help", "=", "'chooses which model to use. Only guided_pix2pix is supported.'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "str", ",", "default", "=", "'latest'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_threads'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'models are saved here'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'instance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_type'", ",", "type", "=", "str", ",", "default", "=", "'normal'", ",", "help", "=", "'network initialization [normal|xavier|kaiming|orthogonal]'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_gain'", ",", "type", "=", "float", ",", "default", "=", "0.02", ",", "help", "=", "'scaling factor for normal, xavier and orthogonal.'", ")", "\n", "# task specific", "\n", "parser", ".", "add_argument", "(", "'--depthTask_scale'", ",", "default", "=", "16", ",", "type", "=", "int", ",", "help", "=", "'Select the upsampling scale: 4, 8, or 16'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_texture_patch'", ",", "default", "=", "'original_image'", ",", "type", "=", "str", ",", "choices", "=", "[", "'original_image'", ",", "'dtd_texture'", "]", ",", "help", "=", "'whether or not to inject noise into the network'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_segmentation_patch'", ",", "default", "=", "True", ",", "type", "=", "bool", ",", "help", "=", "'whether or not to inject noise into the network'", ")", "\n", "parser", ".", "add_argument", "(", "'--patch_size_min'", ",", "default", "=", "20", ",", "type", "=", "int", ",", "help", "=", "'minumum texture patch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--patch_size_max'", ",", "default", "=", "40", ",", "type", "=", "int", ",", "help", "=", "'max texture patch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_input_texture_patch'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "\n", "self", ".", "initialized", "=", "True", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.gather_options": [[50, 74], ["base_options.BaseOptions.parse_known_args", "models.get_option_setter", "models.get_option_setter.", "base_options.BaseOptions.parse_known_args", "data.get_option_setter", "data.get_option_setter.", "base_options.BaseOptions.parse_args", "argparse.ArgumentParser", "base_options.BaseOptions.initialize"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.initialize"], ["", "def", "gather_options", "(", "self", ")", ":", "\n", "# initialize parser with basic options", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", "=", "self", ".", "initialize", "(", "parser", ")", "\n", "\n", "# get the basic options", "\n", "", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# modify model-related parser options", "\n", "model_name", "=", "opt", ".", "model", "\n", "model_option_setter", "=", "models", ".", "get_option_setter", "(", "model_name", ")", "\n", "parser", "=", "model_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "# parse again with the new defaults", "\n", "\n", "# modify dataset-related parser options", "\n", "dataset_name", "=", "opt", ".", "dataset_mode", "\n", "dataset_option_setter", "=", "data", ".", "get_option_setter", "(", "dataset_name", ")", "\n", "parser", "=", "dataset_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "\n", "self", ".", "parser", "=", "parser", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.print_options": [[75, 94], ["sorted", "print", "os.path.join", "util.util.util.mkdirs", "os.path.join", "vars().items", "base_options.BaseOptions.parser.get_default", "open", "opt_file.write", "opt_file.write", "str", "str", "vars", "str"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.util.util.mkdirs"], ["", "def", "print_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "message", "=", "''", "\n", "message", "+=", "'----------------- Options ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "comment", "=", "''", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'----------------- End -------------------'", "\n", "print", "(", "message", ")", "\n", "\n", "# save to the disk", "\n", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "opt_file", ".", "write", "(", "message", ")", "\n", "opt_file", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.parse": [[95, 114], ["base_options.BaseOptions.gather_options", "base_options.BaseOptions.print_options", "base_options.BaseOptions.gpu_ids.split", "int", "len", "torch.cuda.set_device", "base_options.BaseOptions.gpu_ids.append"], "methods", ["home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.gather_options", "home.repos.pwc.inspect_result.vt-vl-lab_Guided-pix2pix.options.base_options.BaseOptions.print_options"], ["", "", "def", "parse", "(", "self", ")", ":", "\n", "\n", "        ", "opt", "=", "self", ".", "gather_options", "(", ")", "\n", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "self", ".", "print_options", "(", "opt", ")", "\n", "\n", "# set gpu ids", "\n", "str_ids", "=", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "", "", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "opt", "=", "opt", "\n", "return", "self", ".", "opt", "\n", "", "", ""]]}