{"home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.Testfile.get_bar_piano_roll": [[19, 27], ["np.delete.reshape", "int", "numpy.concatenate", "numpy.delete", "numpy.zeros", "int"], "function", ["None"], ["def", "get_bar_piano_roll", "(", "piano_roll", ")", ":", "\n", "    ", "if", "int", "(", "piano_roll", ".", "shape", "[", "0", "]", "%", "64", ")", "is", "not", "0", ":", "\n", "        ", "if", "LAST_BAR_MODE", "==", "'fill'", ":", "\n", "            ", "piano_roll", "=", "np", ".", "concatenate", "(", "(", "piano_roll", ",", "np", ".", "zeros", "(", "(", "64", "-", "piano_roll", ".", "shape", "[", "0", "]", "%", "64", ",", "128", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "elif", "LAST_BAR_MODE", "==", "'remove'", ":", "\n", "            ", "piano_roll", "=", "np", ".", "delete", "(", "piano_roll", ",", "np", ".", "s_", "[", "-", "int", "(", "piano_roll", ".", "shape", "[", "0", "]", "%", "64", ")", ":", "]", ",", "axis", "=", "0", ")", "\n", "", "", "piano_roll", "=", "piano_roll", ".", "reshape", "(", "-", "1", ",", "64", ",", "128", ")", "\n", "return", "piano_roll", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.Testfile.to_binary": [[29, 35], ["tf.equal", "tf.logical_and", "tf.reduce_max"], "function", ["None"], ["", "def", "to_binary", "(", "bars", ",", "threshold", "=", "0.0", ")", ":", "\n", "    ", "\"\"\"Turn velocity value into boolean\"\"\"", "\n", "track_is_max", "=", "tf", ".", "equal", "(", "bars", ",", "tf", ".", "reduce_max", "(", "bars", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", ")", "\n", "track_pass_threshold", "=", "(", "bars", ">", "threshold", ")", "\n", "out_track", "=", "tf", ".", "logical_and", "(", "track_is_max", ",", "track_pass_threshold", ")", "\n", "return", "out_track", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.style_classifier.Classifer.__init__": [[13, 47], ["collections.namedtuple", "collections.namedtuple._make", "style_classifier.Classifer._build_model", "utils.get_now_datetime", "tensorflow.train.Saver"], "methods", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan._build_model", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.get_now_datetime"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "args", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "dataset_dir", "=", "args", ".", "dataset_dir", "\n", "self", ".", "dataset_A_dir", "=", "args", ".", "dataset_A_dir", "\n", "self", ".", "dataset_B_dir", "=", "args", ".", "dataset_B_dir", "\n", "self", ".", "sample_dir", "=", "args", ".", "sample_dir", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "image_size", "=", "args", ".", "fine_size", "# cropped size", "\n", "self", ".", "time_step", "=", "args", ".", "time_step", "\n", "self", ".", "pitch_range", "=", "args", ".", "pitch_range", "\n", "self", ".", "input_c_dim", "=", "args", ".", "input_nc", "# number of input image channels", "\n", "self", ".", "sigma_c", "=", "args", ".", "sigma_c", "\n", "self", ".", "sigma_d", "=", "args", ".", "sigma_d", "\n", "self", ".", "model", "=", "args", ".", "model", "\n", "\n", "self", ".", "generator", "=", "generator_resnet", "\n", "self", ".", "discriminator", "=", "discriminator_classifier", "\n", "self", ".", "criterionGAN", "=", "softmax_criterion", "\n", "\n", "OPTIONS", "=", "namedtuple", "(", "'OPTIONS'", ",", "'batch_size '", "\n", "'image_size '", "\n", "'gf_dim '", "\n", "'df_dim '", "\n", "'output_c_dim '", "\n", "'is_training'", ")", "\n", "self", ".", "options", "=", "OPTIONS", ".", "_make", "(", "(", "args", ".", "batch_size", ",", "\n", "args", ".", "fine_size", ",", "\n", "args", ".", "ngf", ",", "\n", "args", ".", "ndf", ",", "\n", "args", ".", "output_nc", ",", "\n", "args", ".", "phase", "==", "'train'", ")", ")", "\n", "self", ".", "_build_model", "(", ")", "\n", "self", ".", "now_datetime", "=", "get_now_datetime", "(", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.style_classifier.Classifer._build_model": [[48, 79], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "style_classifier.Classifer.discriminator", "style_classifier.Classifer.discriminator", "style_classifier.Classifer.criterionGAN", "tensorflow.summary.scalar", "tensorflow.nn.softmax", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.placeholder", "style_classifier.Classifer.discriminator", "tensorflow.nn.softmax", "tensorflow.trainable_variables", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.cast", "print"], "methods", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.discriminator", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.discriminator", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.discriminator"], ["", "def", "_build_model", "(", "self", ")", ":", "\n", "\n", "# define some placeholders", "\n", "        ", "self", ".", "origin_train", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "time_step", ",", "self", ".", "pitch_range", ",", "\n", "self", ".", "input_c_dim", "]", ")", "\n", "self", ".", "label_train", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ")", "\n", "self", ".", "origin_test", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "time_step", ",", "self", ".", "pitch_range", ",", "self", ".", "input_c_dim", "]", ")", "\n", "self", ".", "label_test", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "2", "]", ")", "\n", "\n", "# Origin samples passed through the classifier", "\n", "self", ".", "D_origin", "=", "self", ".", "discriminator", "(", "self", ".", "origin_train", ",", "self", ".", "options", ",", "False", ",", "name", "=", "'classifier'", ")", "\n", "self", ".", "D_test", "=", "self", ".", "discriminator", "(", "self", ".", "origin_test", ",", "self", ".", "options", ",", "True", ",", "name", "=", "'classifier'", ")", "\n", "\n", "# Discriminator loss", "\n", "self", ".", "d_loss", "=", "self", ".", "criterionGAN", "(", "self", ".", "D_origin", ",", "self", ".", "label_train", ")", "\n", "self", ".", "d_loss_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "'d_loss'", ",", "self", ".", "d_loss", ")", "\n", "\n", "# test accuracy", "\n", "self", ".", "D_test_softmax", "=", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "D_test", ")", "\n", "self", ".", "correct_prediction_test", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "self", ".", "D_test_softmax", ",", "1", ")", ",", "tf", ".", "argmax", "(", "self", ".", "label_test", ",", "1", ")", ")", "\n", "self", ".", "accuracy_test", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "self", ".", "correct_prediction_test", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "# test midi", "\n", "self", ".", "test_midi", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "time_step", ",", "self", ".", "pitch_range", ",", "self", ".", "input_c_dim", "]", ")", "\n", "self", ".", "test_result", "=", "self", ".", "discriminator", "(", "self", ".", "test_midi", ",", "self", ".", "options", ",", "True", ",", "name", "=", "'classifier'", ")", "\n", "self", ".", "test_result_softmax", "=", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "test_result", ")", "\n", "\n", "t_vars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "self", ".", "d_vars", "=", "[", "var", "for", "var", "in", "t_vars", "if", "'classifier'", "in", "var", ".", "name", "]", "\n", "for", "var", "in", "t_vars", ":", "\n", "            ", "print", "(", "var", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.style_classifier.Classifer.train": [[80, 166], ["tensorflow.placeholder", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.global_variables_initializer", "style_classifier.Classifer.sess.run", "tensorflow.summary.FileWriter", "glob.glob.glob", "glob.glob.glob", "zip", "print", "glob.glob.glob", "glob.glob.glob", "zip", "print", "numpy.array().astype", "numpy.random.normal", "numpy.array().astype().reshape", "range", "str", "training_list.append", "testing_list.append", "len", "random.shuffle", "range", "style_classifier.Classifer.save", "style_classifier.Classifer.sess.run", "print", "tensorflow.train.AdamOptimizer", "range", "range", "range", "range", "numpy.array", "numpy.array().astype", "len", "numpy.array().astype", "numpy.array().astype().reshape", "style_classifier.Classifer.sess.run", "style_classifier.Classifer.writer.add_summary", "len", "len", "len", "len", "numpy.load", "len", "numpy.array", "numpy.array", "numpy.array().astype", "numpy.load", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.save", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.load", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.load"], ["", "", "def", "train", "(", "self", ",", "args", ")", ":", "\n", "\n", "# learning rate", "\n", "        ", "self", ".", "lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "None", ",", "name", "=", "'learning_rate'", ")", "\n", "\n", "# Optimizer", "\n", "self", ".", "d_optim", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ",", "beta1", "=", "args", ".", "beta1", ")", ".", "minimize", "(", "self", ".", "d_loss", ",", "var_list", "=", "self", ".", "d_vars", ")", "\n", "\n", "init_op", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init_op", ")", "\n", "\n", "# log path", "\n", "log_dir", "=", "'./logs/classifier_{}2{}_{}_{}'", ".", "format", "(", "self", ".", "dataset_A_dir", ",", "self", ".", "dataset_B_dir", ",", "self", ".", "now_datetime", ",", "\n", "str", "(", "self", ".", "sigma_c", ")", ")", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", ",", "self", ".", "sess", ".", "graph", ")", "\n", "counter", "=", "1", "\n", "\n", "# create training list (origin data with corresponding label)", "\n", "# Label for A is (1, 0), for B is (0, 1)", "\n", "dataA", "=", "glob", "(", "'./datasets/{}/train/*.*'", ".", "format", "(", "self", ".", "dataset_A_dir", ")", ")", "\n", "dataB", "=", "glob", "(", "'./datasets/{}/train/*.*'", ".", "format", "(", "self", ".", "dataset_B_dir", ")", ")", "\n", "labelA", "=", "[", "(", "1.0", ",", "0.0", ")", "for", "_", "in", "range", "(", "len", "(", "dataA", ")", ")", "]", "\n", "labelB", "=", "[", "(", "0.0", ",", "1.0", ")", "for", "_", "in", "range", "(", "len", "(", "dataB", ")", ")", "]", "\n", "data_origin", "=", "dataA", "+", "dataB", "\n", "label_origin", "=", "labelA", "+", "labelB", "\n", "training_list", "=", "[", "]", "\n", "for", "pair", "in", "zip", "(", "data_origin", ",", "label_origin", ")", ":", "\n", "            ", "training_list", ".", "append", "(", "pair", ")", "\n", "", "print", "(", "'Successfully create training list!'", ")", "\n", "\n", "# create test list (origin data with corresponding label)", "\n", "dataA", "=", "glob", "(", "'./datasets/{}/test/*.*'", ".", "format", "(", "self", ".", "dataset_A_dir", ")", ")", "\n", "dataB", "=", "glob", "(", "'./datasets/{}/test/*.*'", ".", "format", "(", "self", ".", "dataset_B_dir", ")", ")", "\n", "labelA", "=", "[", "(", "1.0", ",", "0.0", ")", "for", "_", "in", "range", "(", "len", "(", "dataA", ")", ")", "]", "\n", "labelB", "=", "[", "(", "0.0", ",", "1.0", ")", "for", "_", "in", "range", "(", "len", "(", "dataB", ")", ")", "]", "\n", "data_origin", "=", "dataA", "+", "dataB", "\n", "label_origin", "=", "labelA", "+", "labelB", "\n", "testing_list", "=", "[", "]", "\n", "for", "pair", "in", "zip", "(", "data_origin", ",", "label_origin", ")", ":", "\n", "            ", "testing_list", ".", "append", "(", "pair", ")", "\n", "", "print", "(", "'Successfully create testing list!'", ")", "\n", "\n", "data_test", "=", "[", "np", ".", "load", "(", "pair", "[", "0", "]", ")", "*", "2.", "-", "1.", "for", "pair", "in", "testing_list", "]", "\n", "data_test", "=", "np", ".", "array", "(", "data_test", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "gaussian_noise", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "self", ".", "sigma_c", ",", "[", "data_test", ".", "shape", "[", "0", "]", ",", "data_test", ".", "shape", "[", "1", "]", ",", "\n", "data_test", ".", "shape", "[", "2", "]", ",", "data_test", ".", "shape", "[", "3", "]", "]", ")", "\n", "data_test", "+=", "gaussian_noise", "\n", "# data_test = data_test.reshape(data_test.shape[0], data_test.shape[1], data_test.shape[2], 1)", "\n", "label_test", "=", "[", "pair", "[", "1", "]", "for", "pair", "in", "testing_list", "]", "\n", "label_test", "=", "np", ".", "array", "(", "label_test", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "len", "(", "label_test", ")", ",", "2", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epoch", ")", ":", "\n", "\n", "# shuffle the training samples", "\n", "            ", "shuffle", "(", "training_list", ")", "\n", "\n", "# get the correct batch number", "\n", "batch_idx", "=", "len", "(", "training_list", ")", "//", "self", ".", "batch_size", "\n", "\n", "# learning rate would decay after certain epochs", "\n", "lr", "=", "args", ".", "lr", "if", "epoch", "<", "args", ".", "epoch_step", "else", "args", ".", "lr", "*", "(", "args", ".", "epoch", "-", "epoch", ")", "/", "(", "args", ".", "epoch", "-", "args", ".", "epoch_step", ")", "\n", "\n", "for", "idx", "in", "range", "(", "batch_idx", ")", ":", "\n", "\n", "# data samples in batch", "\n", "                ", "batch", "=", "training_list", "[", "idx", "*", "self", ".", "batch_size", ":", "(", "idx", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "batch_data", "=", "[", "np", ".", "load", "(", "pair", "[", "0", "]", ")", "*", "2.", "-", "1.", "for", "pair", "in", "batch", "]", "\n", "batch_data", "=", "np", ".", "array", "(", "batch_data", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# data labels in batch", "\n", "batch_label", "=", "[", "pair", "[", "1", "]", "for", "pair", "in", "batch", "]", "\n", "batch_label", "=", "np", ".", "array", "(", "batch_label", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "len", "(", "batch_label", ")", ",", "2", ")", "\n", "\n", "# update classifier network", "\n", "_", ",", "summary_str", ",", "d_loss", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "d_optim", ",", "self", ".", "d_loss_sum", ",", "self", ".", "d_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "origin_train", ":", "batch_data", ",", "\n", "self", ".", "label_train", ":", "batch_label", ",", "self", ".", "lr", ":", "lr", "}", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary_str", ",", "counter", ")", "\n", "counter", "+=", "1", "\n", "\n", "", "self", ".", "save", "(", "args", ".", "checkpoint_dir", ",", "epoch", ")", "\n", "\n", "# test the classifier accuracy based on testing list", "\n", "accuracy_test", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "accuracy_test", ",", "feed_dict", "=", "{", "self", ".", "origin_test", ":", "data_test", ",", "\n", "self", ".", "label_test", ":", "label_test", "}", ")", "\n", "print", "(", "'epoch:'", ",", "epoch", ",", "'testing accuracy:'", ",", "accuracy_test", ",", "'loss:'", ",", "d_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.style_classifier.Classifer.save": [[167, 179], ["os.path.join", "style_classifier.Classifer.saver.save", "str", "os.path.exists", "os.makedirs", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.save"], ["", "", "def", "save", "(", "self", ",", "checkpoint_dir", ",", "step", ")", ":", "\n", "        ", "model_name", "=", "\"classifier.model\"", "\n", "model_dir", "=", "\"classifier_{}2{}_{}_{}\"", ".", "format", "(", "self", ".", "dataset_A_dir", ",", "self", ".", "dataset_B_dir", ",", "self", ".", "now_datetime", ",", "\n", "str", "(", "self", ".", "sigma_c", ")", ")", "\n", "# model_dir = \"classifier_{}2{}_{}_{}\".format(self.dataset_A_dir, self.dataset_B_dir, '2018-06-08',", "\n", "#                                             str(self.sigma_c))", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_dir", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "\n", "", "self", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_name", ")", ",", "global_step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.style_classifier.Classifer.load": [[180, 196], ["print", "os.path.join", "tensorflow.train.get_checkpoint_state", "str", "os.path.basename", "style_classifier.Classifer.saver.restore", "os.path.join"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "checkpoint_dir", ")", ":", "\n", "        ", "print", "(", "\" [*] Reading checkpoint...\"", ")", "\n", "\n", "model_dir", "=", "\"classifier_{}2{}_{}_{}\"", ".", "format", "(", "self", ".", "dataset_A_dir", ",", "self", ".", "dataset_B_dir", ",", "self", ".", "now_datetime", ",", "\n", "str", "(", "self", ".", "sigma_c", ")", ")", "\n", "# model_dir = \"classifier_{}2{}_{}_{}\".format(self.dataset_A_dir, self.dataset_B_dir, '2018-06-08',", "\n", "#                                             str(self.sigma_c))", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_dir", ")", "\n", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "checkpoint_dir", ")", "\n", "if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "            ", "ckpt_name", "=", "os", ".", "path", ".", "basename", "(", "ckpt", ".", "model_checkpoint_path", ")", "\n", "self", ".", "saver", ".", "restore", "(", "self", ".", "sess", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "ckpt_name", ")", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.style_classifier.Classifer.test": [[197, 317], ["tensorflow.global_variables_initializer", "style_classifier.Classifer.sess.run", "glob.glob.glob", "glob.glob.glob.sort", "glob.glob.glob", "glob.glob.glob.sort", "glob.glob.glob", "glob.glob.glob.sort", "list", "style_classifier.Classifer.load", "os.path.join", "range", "line_list.sort", "f.close", "print", "zip", "print", "print", "os.path.exists", "os.makedirs", "len", "print", "numpy.load", "numpy.load", "numpy.load", "style_classifier.Classifer.sess.run", "style_classifier.Classifer.sess.run", "style_classifier.Classifer.sess.run", "numpy.abs", "numpy.mean", "utils.save_midis", "utils.save_midis", "utils.save_midis", "open", "f.write", "range", "len", "len", "len", "line_list.append", "os.path.join", "os.path.join", "os.path.join", "line_list.append", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "f.writelines", "int", "int", "int", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "numpy.argmax", "[].split", "[].split", "[].split", "os.path.splitext", "os.path.splitext", "os.path.splitext", "os.path.basename", "os.path.basename", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.load", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.load", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.load", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.load", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.save_midis", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.save_midis", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.save_midis"], ["", "", "def", "test", "(", "self", ",", "args", ")", ":", "\n", "        ", "init_op", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init_op", ")", "\n", "# load the origin samples in npy format and sorted in ascending order", "\n", "sample_files_origin", "=", "glob", "(", "'./test/{}2{}_{}_{}_{}/{}/npy/origin/*.*'", ".", "format", "(", "self", ".", "dataset_A_dir", ",", "\n", "self", ".", "dataset_B_dir", ",", "\n", "self", ".", "model", ",", "\n", "self", ".", "sigma_d", ",", "\n", "self", ".", "now_datetime", ",", "\n", "args", ".", "which_direction", ")", ")", "\n", "sample_files_origin", ".", "sort", "(", "key", "=", "lambda", "x", ":", "int", "(", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "x", ")", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", ")", "\n", "\n", "# load the origin samples in npy format and sorted in ascending order", "\n", "sample_files_transfer", "=", "glob", "(", "'./test/{}2{}_{}_{}_{}/{}/npy/transfer/*.*'", ".", "format", "(", "self", ".", "dataset_A_dir", ",", "\n", "self", ".", "dataset_B_dir", ",", "\n", "self", ".", "model", ",", "\n", "self", ".", "sigma_d", ",", "\n", "self", ".", "now_datetime", ",", "\n", "args", ".", "which_direction", ")", ")", "\n", "sample_files_transfer", ".", "sort", "(", "key", "=", "lambda", "x", ":", "int", "(", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "x", ")", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", ")", "\n", "\n", "# load the origin samples in npy format and sorted in ascending order", "\n", "sample_files_cycle", "=", "glob", "(", "'./test/{}2{}_{}_{}_{}/{}/npy/cycle/*.*'", ".", "format", "(", "self", ".", "dataset_A_dir", ",", "\n", "self", ".", "dataset_B_dir", ",", "\n", "self", ".", "model", ",", "\n", "self", ".", "sigma_d", ",", "\n", "self", ".", "now_datetime", ",", "\n", "args", ".", "which_direction", ")", ")", "\n", "sample_files_cycle", ".", "sort", "(", "key", "=", "lambda", "x", ":", "int", "(", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "x", ")", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", ")", "\n", "\n", "# put the origin, transfer and cycle of the same phrase in one zip", "\n", "sample_files", "=", "list", "(", "zip", "(", "sample_files_origin", ",", "sample_files_transfer", ",", "sample_files_cycle", ")", ")", "\n", "\n", "if", "self", ".", "load", "(", "args", ".", "checkpoint_dir", ")", ":", "\n", "            ", "print", "(", "\" [*] Load SUCCESS\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\" [!] Load failed...\"", ")", "\n", "\n", "# create a test path to store the generated sample midi files attached with probability", "\n", "", "test_dir_mid", "=", "os", ".", "path", ".", "join", "(", "args", ".", "test_dir", ",", "'{}2{}_{}_{}_{}/{}/mid_attach_prob'", ".", "format", "(", "self", ".", "dataset_A_dir", ",", "\n", "self", ".", "dataset_B_dir", ",", "\n", "self", ".", "model", ",", "\n", "self", ".", "sigma_d", ",", "\n", "self", ".", "now_datetime", ",", "\n", "args", ".", "which_direction", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "test_dir_mid", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "test_dir_mid", ")", "\n", "\n", "", "count_origin", "=", "0", "\n", "count_transfer", "=", "0", "\n", "count_cycle", "=", "0", "\n", "line_list", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "sample_files", ")", ")", ":", "\n", "            ", "print", "(", "'Classifying midi: '", ",", "sample_files", "[", "idx", "]", ")", "\n", "\n", "# load sample phrases in npy formats", "\n", "sample_origin", "=", "np", ".", "load", "(", "sample_files", "[", "idx", "]", "[", "0", "]", ")", "\n", "sample_transfer", "=", "np", ".", "load", "(", "sample_files", "[", "idx", "]", "[", "1", "]", ")", "\n", "sample_cycle", "=", "np", ".", "load", "(", "sample_files", "[", "idx", "]", "[", "2", "]", ")", "\n", "\n", "# get the probability for each sample phrase", "\n", "test_result_origin", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "test_result_softmax", ",", "\n", "feed_dict", "=", "{", "self", ".", "test_midi", ":", "sample_origin", "*", "2.", "-", "1.", "}", ")", "\n", "test_result_transfer", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "test_result_softmax", ",", "\n", "feed_dict", "=", "{", "self", ".", "test_midi", ":", "sample_transfer", "*", "2.", "-", "1.", "}", ")", "\n", "test_result_cycle", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "test_result_softmax", ",", "\n", "feed_dict", "=", "{", "self", ".", "test_midi", ":", "sample_cycle", "*", "2.", "-", "1.", "}", ")", "\n", "\n", "origin_transfer_diff", "=", "np", ".", "abs", "(", "test_result_origin", "-", "test_result_transfer", ")", "\n", "content_diff", "=", "np", ".", "mean", "(", "(", "sample_origin", "*", "1.0", "-", "sample_transfer", "*", "1.0", ")", "**", "2", ")", "\n", "\n", "# labels: (1, 0) for A, (0, 1) for B", "\n", "if", "args", ".", "which_direction", "==", "'AtoB'", ":", "\n", "                ", "line_list", ".", "append", "(", "(", "idx", "+", "1", ",", "content_diff", ",", "origin_transfer_diff", "[", "0", "]", "[", "0", "]", ",", "test_result_origin", "[", "0", "]", "[", "0", "]", ",", "\n", "test_result_transfer", "[", "0", "]", "[", "0", "]", ",", "test_result_cycle", "[", "0", "]", "[", "0", "]", ")", ")", "\n", "\n", "# for the accuracy calculation", "\n", "count_origin", "+=", "1", "if", "np", ".", "argmax", "(", "test_result_origin", "[", "0", "]", ")", "==", "0", "else", "0", "\n", "count_transfer", "+=", "1", "if", "np", ".", "argmax", "(", "test_result_transfer", "[", "0", "]", ")", "==", "0", "else", "0", "\n", "count_cycle", "+=", "1", "if", "np", ".", "argmax", "(", "test_result_cycle", "[", "0", "]", ")", "==", "0", "else", "0", "\n", "\n", "# create paths for origin, transfer and cycle samples attached with probability", "\n", "path_origin", "=", "os", ".", "path", ".", "join", "(", "test_dir_mid", ",", "'{}_origin_{}.mid'", ".", "format", "(", "idx", "+", "1", ",", "test_result_origin", "[", "0", "]", "[", "0", "]", ")", ")", "\n", "path_transfer", "=", "os", ".", "path", ".", "join", "(", "test_dir_mid", ",", "'{}_transfer_{}.mid'", ".", "format", "(", "idx", "+", "1", ",", "test_result_transfer", "[", "0", "]", "[", "0", "]", ")", ")", "\n", "path_cycle", "=", "os", ".", "path", ".", "join", "(", "test_dir_mid", ",", "'{}_cycle_{}.mid'", ".", "format", "(", "idx", "+", "1", ",", "test_result_cycle", "[", "0", "]", "[", "0", "]", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "line_list", ".", "append", "(", "(", "idx", "+", "1", ",", "content_diff", ",", "origin_transfer_diff", "[", "0", "]", "[", "1", "]", ",", "test_result_origin", "[", "0", "]", "[", "1", "]", ",", "\n", "test_result_transfer", "[", "0", "]", "[", "1", "]", ",", "test_result_cycle", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "\n", "# for the accuracy calculation", "\n", "count_origin", "+=", "1", "if", "np", ".", "argmax", "(", "test_result_origin", "[", "0", "]", ")", "==", "1", "else", "0", "\n", "count_transfer", "+=", "1", "if", "np", ".", "argmax", "(", "test_result_transfer", "[", "0", "]", ")", "==", "1", "else", "0", "\n", "count_cycle", "+=", "1", "if", "np", ".", "argmax", "(", "test_result_cycle", "[", "0", "]", ")", "==", "1", "else", "0", "\n", "\n", "# create paths for origin, transfer and cycle samples attached with probability", "\n", "path_origin", "=", "os", ".", "path", ".", "join", "(", "test_dir_mid", ",", "'{}_origin_{}.mid'", ".", "format", "(", "idx", "+", "1", ",", "test_result_origin", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "path_transfer", "=", "os", ".", "path", ".", "join", "(", "test_dir_mid", ",", "'{}_transfer_{}.mid'", ".", "format", "(", "idx", "+", "1", ",", "test_result_transfer", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "path_cycle", "=", "os", ".", "path", ".", "join", "(", "test_dir_mid", ",", "'{}_cycle_{}.mid'", ".", "format", "(", "idx", "+", "1", ",", "test_result_cycle", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "\n", "# generate sample MIDI files", "\n", "", "save_midis", "(", "sample_origin", ",", "path_origin", ")", "\n", "save_midis", "(", "sample_transfer", ",", "path_transfer", ")", "\n", "save_midis", "(", "sample_cycle", ",", "path_cycle", ")", "\n", "\n", "# sort the line_list based on origin_transfer_diff and write to a ranking txt file", "\n", "", "line_list", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ",", "reverse", "=", "True", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "test_dir_mid", ",", "'Rankings_{}.txt'", ".", "format", "(", "args", ".", "which_direction", ")", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "'Id  Content_diff  P_O - P_T  Prob_Origin  Prob_Transfer  Prob_Cycle'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "line_list", ")", ")", ":", "\n", "                ", "f", ".", "writelines", "(", "\"\\n%5d %5f %5f %5f %5f %5f\"", "%", "(", "line_list", "[", "i", "]", "[", "0", "]", ",", "line_list", "[", "i", "]", "[", "1", "]", ",", "line_list", "[", "i", "]", "[", "2", "]", ",", "\n", "line_list", "[", "i", "]", "[", "3", "]", ",", "line_list", "[", "i", "]", "[", "4", "]", ",", "line_list", "[", "i", "]", "[", "5", "]", ")", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n", "# calculate the accuracy", "\n", "accuracy_origin", "=", "count_origin", "*", "1.0", "/", "len", "(", "sample_files", ")", "\n", "accuracy_transfer", "=", "count_transfer", "*", "1.0", "/", "len", "(", "sample_files", ")", "\n", "accuracy_cycle", "=", "count_cycle", "*", "1.0", "/", "len", "(", "sample_files", ")", "\n", "print", "(", "'Accuracy of this classifier on test datasets is :'", ",", "accuracy_origin", ",", "accuracy_transfer", ",", "accuracy_cycle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.style_classifier.Classifer.test_famous": [[318, 350], ["tensorflow.global_variables_initializer", "style_classifier.Classifer.sess.run", "numpy.load", "numpy.load", "print", "style_classifier.Classifer.load", "range", "print", "print", "print", "print", "phrase_o.reshape.reshape.reshape", "style_classifier.Classifer.sess.run", "phrase_t.reshape.reshape.reshape", "style_classifier.Classifer.sess.run"], "methods", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.load", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.load", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.load"], ["", "def", "test_famous", "(", "self", ",", "args", ")", ":", "\n", "        ", "init_op", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init_op", ")", "\n", "\n", "song_o", "=", "np", ".", "load", "(", "'./datasets/famous_songs/C2J/merged_npy/Scenes from Childhood (Schumann).npy'", ")", "\n", "song_t", "=", "np", ".", "load", "(", "'./datasets/famous_songs/C2J/transfer/Scenes from Childhood (Schumann).npy'", ")", "\n", "print", "(", "song_o", ".", "shape", ",", "song_t", ".", "shape", ")", "\n", "\n", "if", "self", ".", "load", "(", "args", ".", "checkpoint_dir", ")", ":", "\n", "            ", "print", "(", "\" [*] Load SUCCESS\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\" [!] Load failed...\"", ")", "\n", "\n", "", "sum_o_A", "=", "0", "\n", "sum_o_B", "=", "0", "\n", "sum_t_A", "=", "0", "\n", "sum_t_B", "=", "0", "\n", "for", "idx", "in", "range", "(", "song_t", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "phrase_o", "=", "song_o", "[", "idx", "]", "\n", "phrase_o", "=", "phrase_o", ".", "reshape", "(", "1", ",", "phrase_o", ".", "shape", "[", "0", "]", ",", "phrase_o", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "origin", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "test_result_softmax", ",", "feed_dict", "=", "{", "self", ".", "test_midi", ":", "phrase_o", "*", "2.", "-", "1.", "}", ")", "\n", "phrase_t", "=", "song_t", "[", "idx", "]", "\n", "phrase_t", "=", "phrase_t", ".", "reshape", "(", "1", ",", "phrase_t", ".", "shape", "[", "0", "]", ",", "phrase_t", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "transfer", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "test_result_softmax", ",", "feed_dict", "=", "{", "self", ".", "test_midi", ":", "phrase_t", "*", "2.", "-", "1.", "}", ")", "\n", "\n", "sum_o_A", "+=", "origin", "[", "0", "]", "[", "0", "]", "\n", "sum_o_B", "+=", "origin", "[", "0", "]", "[", "1", "]", "\n", "sum_t_A", "+=", "transfer", "[", "0", "]", "[", "0", "]", "\n", "sum_t_B", "+=", "transfer", "[", "0", "]", "[", "1", "]", "\n", "\n", "", "print", "(", "\"origin, source:\"", ",", "sum_o_A", "/", "song_t", ".", "shape", "[", "0", "]", ",", "\"target:\"", ",", "sum_o_B", "/", "song_t", ".", "shape", "[", "0", "]", ")", "\n", "print", "(", "\"transfer, source:\"", ",", "sum_t_A", "/", "song_t", ".", "shape", "[", "0", "]", ",", "\"target:\"", ",", "sum_t_B", "/", "song_t", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm": [[9, 11], ["tensorflow.contrib.layers.batch_norm"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm"], ["def", "batch_norm", "(", "x", ",", "name", "=", "\"batch_norm\"", ")", ":", "\n", "    ", "return", "tf", ".", "contrib", ".", "layers", ".", "batch_norm", "(", "x", ",", "decay", "=", "0.9", ",", "updates_collections", "=", "None", ",", "epsilon", "=", "1e-5", ",", "scale", "=", "True", ",", "scope", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm": [[13, 23], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.moments", "tensorflow.rsqrt", "input.get_shape", "tensorflow.random_normal_initializer", "tensorflow.constant_initializer"], "function", ["None"], ["", "def", "instance_norm", "(", "input", ",", "name", "=", "\"instance_norm\"", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "depth", "=", "input", ".", "get_shape", "(", ")", "[", "3", "]", "\n", "scale", "=", "tf", ".", "get_variable", "(", "\"scale\"", ",", "[", "depth", "]", ",", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "1.0", ",", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "offset", "=", "tf", ".", "get_variable", "(", "\"offset\"", ",", "[", "depth", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "mean", ",", "variance", "=", "tf", ".", "nn", ".", "moments", "(", "input", ",", "axes", "=", "[", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ")", "\n", "epsilon", "=", "1e-5", "\n", "inv", "=", "tf", ".", "rsqrt", "(", "variance", "+", "epsilon", ")", "\n", "normalized", "=", "(", "input", "-", "mean", ")", "*", "inv", "\n", "return", "scale", "*", "normalized", "+", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d": [[25, 30], ["tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.truncated_normal_initializer"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d"], ["", "", "def", "conv2d", "(", "input_", ",", "output_dim", ",", "ks", "=", "7", ",", "s", "=", "2", ",", "stddev", "=", "0.02", ",", "padding", "=", "'SAME'", ",", "name", "=", "\"conv2d\"", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "return", "slim", ".", "conv2d", "(", "input_", ",", "output_dim", ",", "ks", ",", "s", ",", "padding", "=", "padding", ",", "activation_fn", "=", "None", ",", "\n", "weights_initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", ",", "\n", "biases_initializer", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d": [[32, 37], ["tensorflow.variable_scope", "tensorflow.conv2d_transpose", "tensorflow.truncated_normal_initializer"], "function", ["None"], ["", "", "def", "deconv2d", "(", "input_", ",", "output_dim", ",", "ks", "=", "7", ",", "s", "=", "2", ",", "stddev", "=", "0.02", ",", "padding", "=", "'SAME'", ",", "name", "=", "\"deconv2d\"", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "return", "slim", ".", "conv2d_transpose", "(", "input_", ",", "output_dim", ",", "ks", ",", "s", ",", "padding", "=", "padding", ",", "activation_fn", "=", "None", ",", "\n", "weights_initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", ",", "\n", "biases_initializer", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu": [[39, 41], ["tensorflow.maximum"], "function", ["None"], ["", "", "def", "lrelu", "(", "x", ",", "leak", "=", "0.2", ",", "name", "=", "\"lrelu\"", ")", ":", "\n", "    ", "return", "tf", ".", "maximum", "(", "x", ",", "leak", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu": [[43, 48], ["tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu"], ["", "def", "relu", "(", "tensor_in", ")", ":", "\n", "    ", "if", "tensor_in", "is", "not", "None", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "relu", "(", "tensor_in", ")", "\n", "", "else", ":", "\n", "        ", "return", "tensor_in", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.linear": [[50, 62], ["input_.get_shape().as_list", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "input_.get_shape", "tensorflow.random_normal_initializer", "tensorflow.constant_initializer", "tensorflow.matmul", "tensorflow.matmul"], "function", ["None"], ["", "", "def", "linear", "(", "input_", ",", "output_size", ",", "scope", "=", "None", ",", "stddev", "=", "0.02", ",", "bias_start", "=", "0.0", ",", "with_w", "=", "False", ")", ":", "\n", "    ", "shape", "=", "input_", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"Linear\"", ")", ":", "\n", "        ", "matrix", "=", "tf", ".", "get_variable", "(", "\"Matrix\"", ",", "[", "shape", "[", "1", "]", ",", "output_size", "]", ",", "tf", ".", "float32", ",", "\n", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "stddev", ")", ")", "\n", "bias", "=", "tf", ".", "get_variable", "(", "\"bias\"", ",", "[", "output_size", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "bias_start", ")", ")", "\n", "if", "with_w", ":", "\n", "            ", "return", "tf", ".", "matmul", "(", "input_", ",", "matrix", ")", "+", "bias", ",", "matrix", ",", "bias", "\n", "", "else", ":", "\n", "            ", "return", "tf", ".", "matmul", "(", "input_", ",", "matrix", ")", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.to_binary_tf": [[64, 93], ["tensorflow.equal", "tensorflow.logical_and", "tensorflow.equal", "tensorflow.logical_and", "len", "tensorflow.slice", "tensorflow.slice", "tensorflow.reduce_max", "len", "tensorflow.concat", "tensorflow.reduce_max", "bar_or_track_bar.get_shape", "len", "tensorflow.slice", "tensorflow.slice", "bar_or_track_bar.get_shape", "len", "tensorflow.concat", "bar_or_track_bar.get_shape", "bar_or_track_bar.get_shape"], "function", ["None"], ["", "", "", "def", "to_binary_tf", "(", "bar_or_track_bar", ",", "threshold", "=", "0.0", ",", "track_mode", "=", "False", ",", "melody", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return the binarize tensor of the input tensor (be careful of the channel order!)\"\"\"", "\n", "if", "track_mode", ":", "\n", "# melody track", "\n", "        ", "if", "melody", ":", "\n", "            ", "melody_is_max", "=", "tf", ".", "equal", "(", "bar_or_track_bar", ",", "tf", ".", "reduce_max", "(", "bar_or_track_bar", ",", "axis", "=", "2", ",", "keep_dims", "=", "True", ")", ")", "\n", "melody_pass_threshold", "=", "(", "bar_or_track_bar", ">", "threshold", ")", "\n", "out_tensor", "=", "tf", ".", "logical_and", "(", "melody_is_max", ",", "melody_pass_threshold", ")", "\n", "# non-melody track", "\n", "", "else", ":", "\n", "            ", "out_tensor", "=", "(", "bar_or_track_bar", ">", "threshold", ")", "\n", "", "return", "out_tensor", "\n", "", "else", ":", "\n", "        ", "if", "len", "(", "bar_or_track_bar", ".", "get_shape", "(", ")", ")", "==", "4", ":", "\n", "            ", "melody_track", "=", "tf", ".", "slice", "(", "bar_or_track_bar", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "other_tracks", "=", "tf", ".", "slice", "(", "bar_or_track_bar", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "", "elif", "len", "(", "bar_or_track_bar", ".", "get_shape", "(", ")", ")", "==", "5", ":", "\n", "            ", "melody_track", "=", "tf", ".", "slice", "(", "bar_or_track_bar", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "other_tracks", "=", "tf", ".", "slice", "(", "bar_or_track_bar", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "# melody track", "\n", "", "melody_is_max", "=", "tf", ".", "equal", "(", "melody_track", ",", "tf", ".", "reduce_max", "(", "melody_track", ",", "axis", "=", "2", ",", "keep_dims", "=", "True", ")", ")", "\n", "melody_pass_threshold", "=", "(", "melody_track", ">", "threshold", ")", "\n", "out_tensor_melody", "=", "tf", ".", "logical_and", "(", "melody_is_max", ",", "melody_pass_threshold", ")", "\n", "# other tracks", "\n", "out_tensor_others", "=", "(", "other_tracks", ">", "threshold", ")", "\n", "if", "len", "(", "bar_or_track_bar", ".", "get_shape", "(", ")", ")", "==", "4", ":", "\n", "            ", "return", "tf", ".", "concat", "(", "[", "out_tensor_melody", ",", "out_tensor_others", "]", ",", "3", ")", "\n", "", "elif", "len", "(", "bar_or_track_bar", ".", "get_shape", "(", ")", ")", "==", "5", ":", "\n", "            ", "return", "tf", ".", "concat", "(", "[", "out_tensor_melody", ",", "out_tensor_others", "]", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.to_chroma_tf": [[95, 106], ["tensorflow.stack", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reduce_max", "tensorflow.reduce_min", "tensorflow.truediv", "tensorflow.cast", "tensorflow.shape", "bar_or_track_bar.get_shape", "bar_or_track_bar.get_shape"], "function", ["None"], ["", "", "", "def", "to_chroma_tf", "(", "bar_or_track_bar", ",", "is_normalize", "=", "True", ")", ":", "\n", "    ", "\"\"\"Return the chroma tensor of the input tensor\"\"\"", "\n", "out_shape", "=", "tf", ".", "stack", "(", "[", "tf", ".", "shape", "(", "bar_or_track_bar", ")", "[", "0", "]", ",", "bar_or_track_bar", ".", "get_shape", "(", ")", "[", "1", "]", ",", "12", ",", "7", ",", "\n", "bar_or_track_bar", ".", "get_shape", "(", ")", "[", "3", "]", "]", ")", "\n", "chroma", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "reshape", "(", "tf", ".", "cast", "(", "bar_or_track_bar", ",", "tf", ".", "float32", ")", ",", "out_shape", ")", ",", "axis", "=", "3", ")", "\n", "if", "is_normalize", ":", "\n", "        ", "chroma_max", "=", "tf", ".", "reduce_max", "(", "chroma", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keep_dims", "=", "True", ")", "\n", "chroma_min", "=", "tf", ".", "reduce_min", "(", "chroma", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keep_dims", "=", "True", ")", "\n", "return", "tf", ".", "truediv", "(", "chroma", "-", "chroma_min", ",", "(", "chroma_max", "-", "chroma_min", "+", "1e-15", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "chroma", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.to_binary": [[108, 114], ["tensorflow.equal", "tensorflow.logical_and", "tensorflow.reduce_max"], "function", ["None"], ["", "", "def", "to_binary", "(", "bars", ",", "threshold", "=", "0.0", ")", ":", "\n", "    ", "\"\"\"Turn velocity value into boolean\"\"\"", "\n", "track_is_max", "=", "tf", ".", "equal", "(", "bars", ",", "tf", ".", "reduce_max", "(", "bars", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", ")", "\n", "track_pass_threshold", "=", "(", "bars", ">", "threshold", ")", "\n", "out_track", "=", "tf", ".", "logical_and", "(", "track_is_max", ",", "track_pass_threshold", ")", "\n", "return", "out_track", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d_musegan": [[116, 150], ["tensorflow.variable_scope", "print", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.stack", "tensorflow.reshape", "tensorflow.nn.bias_add", "tensorflow.get_variable_scope", "tensorflow.truncated_normal_initializer", "tensorflow.constant_initializer", "list", "tensorflow.get_variable_scope", "tensor_in.get_shape", "tensorflow.shape", "tf.nn.conv2d.get_shape"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d"], ["", "def", "conv2d_musegan", "(", "tensor_in", ",", "out_channels", ",", "kernels", ",", "strides", ",", "stddev", "=", "0.02", ",", "name", "=", "'conv2d'", ",", "reuse", "=", "None", ",", "padding", "=", "'VALID'", ")", ":", "\n", "    ", "\"\"\"\n    Apply a 2D convolution layer on the input tensor and return the resulting tensor.\n\n    Args:\n        tensor_in (tensor): The input tensor.\n        out_channels (int): The number of output channels.\n        kernels (list of int): The size of the kernel. [kernel_height, kernel_width]\n        strides (list of int): The stride of the sliding window. [stride_height, stride_width]\n        stddev (float): The value passed to the truncated normal initializer for weights. Defaults to 0.02.\n        name (str): The tenorflow variable scope. Defaults to 'conv2d'.\n        reuse (bool): True to reuse weights and biases.\n        padding (str): 'SAME' or 'VALID'. The type of padding algorithm to use. Defaults to 'VALID'.\n\n    Returns:\n        tensor: The resulting tensor.\n\n    \"\"\"", "\n", "if", "tensor_in", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ")", ":", "\n", "\n", "            ", "print", "(", "'|   |---'", "+", "tf", ".", "get_variable_scope", "(", ")", ".", "name", ",", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse", ")", "\n", "\n", "weights", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "kernels", "+", "[", "tensor_in", ".", "get_shape", "(", ")", "[", "-", "1", "]", ",", "out_channels", "]", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", ")", "\n", "biases", "=", "tf", ".", "get_variable", "(", "'biases'", ",", "[", "out_channels", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "tensor_in", ",", "weights", ",", "strides", "=", "[", "1", "]", "+", "strides", "+", "[", "1", "]", ",", "padding", "=", "padding", ")", "\n", "\n", "out_shape", "=", "tf", ".", "stack", "(", "[", "tf", ".", "shape", "(", "tensor_in", ")", "[", "0", "]", "]", "+", "list", "(", "conv", ".", "get_shape", "(", ")", "[", "1", ":", "]", ")", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "biases", ")", ",", "out_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d_musegan": [[152, 194], ["tensorflow.variable_scope", "print", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.stack", "tensorflow.reshape", "tensorflow.nn.conv2d_transpose", "tensorflow.nn.bias_add", "tensorflow.get_variable_scope", "tensorflow.truncated_normal_initializer", "tensorflow.constant_initializer", "tensorflow.nn.deconv2d", "tensorflow.get_variable_scope", "tensor_in.get_shape", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d"], ["", "", "", "def", "deconv2d_musegan", "(", "tensor_in", ",", "out_shape", ",", "out_channels", ",", "kernels", ",", "strides", ",", "stddev", "=", "0.02", ",", "name", "=", "'transconv2d'", ",", "reuse", "=", "None", ",", "\n", "padding", "=", "'VALID'", ")", ":", "\n", "    ", "\"\"\"\n    Apply a 2D transposed convolution layer on the input tensor and return the resulting tensor.\n\n    Args:\n        tensor_in (tensor): The input tensor.\n        out_shape (list of int): The output shape. [height, width]\n        out_channels (int): The number of output channels.\n        kernels (list of int): The size of the kernel.[kernel_height, kernel_width]\n        strides (list of int): The stride of the sliding window. [stride_height, stride_width]\n        stddev (float): The value passed to the truncated normal initializer for weights. Defaults to 0.02.\n        name (str): The tenorflow variable scope. Defaults to 'transconv2d'.\n        reuse (bool): True to reuse weights and biases.\n        padding (str): 'SAME' or 'VALID'. The type of padding algorithm to use. Defaults to 'VALID'.\n\n    Returns:\n        tensor: The resulting tensor.\n\n    \"\"\"", "\n", "if", "tensor_in", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ")", ":", "\n", "\n", "            ", "print", "(", "'|   |---'", "+", "tf", ".", "get_variable_scope", "(", ")", ".", "name", ",", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse", ")", "\n", "\n", "# filter : [height, width, output_channels, in_channels]", "\n", "weights", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "kernels", "+", "[", "out_channels", ",", "tensor_in", ".", "get_shape", "(", ")", "[", "-", "1", "]", "]", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", ")", "\n", "biases", "=", "tf", ".", "get_variable", "(", "'biases'", ",", "[", "out_channels", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "output_shape", "=", "tf", ".", "stack", "(", "[", "tf", ".", "shape", "(", "tensor_in", ")", "[", "0", "]", "]", "+", "out_shape", "+", "[", "out_channels", "]", ")", "\n", "\n", "try", ":", "\n", "                ", "conv_transpose", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "tensor_in", ",", "weights", ",", "output_shape", "=", "output_shape", ",", "\n", "strides", "=", "[", "1", "]", "+", "strides", "+", "[", "1", "]", ",", "padding", "=", "padding", ")", "\n", "", "except", "AttributeError", ":", "# Support for verisons of TensorFlow before 0.7.0", "\n", "                ", "conv_transpose", "=", "tf", ".", "nn", ".", "deconv2d", "(", "tensor_in", ",", "weights", ",", "output_shape", "=", "output_shape", ",", "strides", "=", "[", "1", "]", "+", "strides", "+", "[", "1", "]", ",", "\n", "padding", "=", "padding", ")", "\n", "\n", "", "return", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv_transpose", ",", "biases", ")", ",", "output_shape", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.main.main": [[50, 69], ["tensorflow.ConfigProto", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "tensorflow.Session", "model.cyclegan", "style_classifier.Classifer", "model.cyclegan.train", "model.cyclegan.test", "style_classifier.Classifer.train", "style_classifier.Classifer.test"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.train", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.test", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.train", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.test"], ["def", "main", "(", "_", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "checkpoint_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "checkpoint_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "sample_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "sample_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "test_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "test_dir", ")", "\n", "\n", "", "tfconfig", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", "\n", "tfconfig", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "tf", ".", "Session", "(", "config", "=", "tfconfig", ")", "as", "sess", ":", "\n", "\n", "        ", "if", "args", ".", "type", "==", "'cyclegan'", ":", "\n", "            ", "model", "=", "cyclegan", "(", "sess", ",", "args", ")", "\n", "model", ".", "train", "(", "args", ")", "if", "args", ".", "phase", "==", "'train'", "else", "model", ".", "test", "(", "args", ")", "\n", "\n", "", "if", "args", ".", "type", "==", "'classifier'", ":", "\n", "            ", "classifier", "=", "Classifer", "(", "sess", ",", "args", ")", "\n", "classifier", ".", "train", "(", "args", ")", "if", "args", ".", "phase", "==", "'train'", "else", "classifier", ".", "test", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.write_midi.set_piano_roll_to_instrument": [[5, 83], ["piano_roll.reshape.reshape", "numpy.concatenate", "numpy.diff", "range", "instrument.notes.sort", "float", "np.concatenate.astype", "list", "list", "range", "range", "numpy.zeros", "numpy.zeros", "len", "len", "len", "len", "start_idx[].astype", "end_idx[].astype", "zip", "temp_start_time.index", "range", "zip", "len", "len", "pretty_midi.Note", "instrument.notes.append", "instrument.notes.append", "len", "temp_start_time.pop", "temp_end_time.pop", "pretty_midi.Note", "pretty_midi.Note", "len", "t.append"], "function", ["None"], ["def", "set_piano_roll_to_instrument", "(", "piano_roll", ",", "instrument", ",", "velocity", "=", "100", ",", "tempo", "=", "120.0", ",", "beat_resolution", "=", "16", ")", ":", "\n", "# Calculate time per pixel", "\n", "    ", "tpp", "=", "60.0", "/", "tempo", "/", "float", "(", "beat_resolution", ")", "\n", "threshold", "=", "60.0", "/", "tempo", "/", "4", "\n", "phrase_end_time", "=", "60.0", "/", "tempo", "*", "4", "*", "piano_roll", ".", "shape", "[", "0", "]", "\n", "# Create piano_roll_search that captures note onsets and offsets", "\n", "piano_roll", "=", "piano_roll", ".", "reshape", "(", "(", "piano_roll", ".", "shape", "[", "0", "]", "*", "piano_roll", ".", "shape", "[", "1", "]", ",", "piano_roll", ".", "shape", "[", "2", "]", ")", ")", "\n", "piano_roll_diff", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "1", ",", "128", ")", ",", "dtype", "=", "int", ")", ",", "piano_roll", ",", "np", ".", "zeros", "(", "(", "1", ",", "128", ")", ",", "dtype", "=", "int", ")", ")", ")", "\n", "piano_roll_search", "=", "np", ".", "diff", "(", "piano_roll_diff", ".", "astype", "(", "int", ")", ",", "axis", "=", "0", ")", "\n", "# Iterate through all possible(128) pitches", "\n", "\n", "for", "note_num", "in", "range", "(", "128", ")", ":", "\n", "# Search for notes", "\n", "        ", "start_idx", "=", "(", "piano_roll_search", "[", ":", ",", "note_num", "]", ">", "0", ")", ".", "nonzero", "(", ")", "\n", "start_time", "=", "list", "(", "tpp", "*", "(", "start_idx", "[", "0", "]", ".", "astype", "(", "float", ")", ")", ")", "\n", "# print('start_time:', start_time)", "\n", "# print(len(start_time))", "\n", "end_idx", "=", "(", "piano_roll_search", "[", ":", ",", "note_num", "]", "<", "0", ")", ".", "nonzero", "(", ")", "\n", "end_time", "=", "list", "(", "tpp", "*", "(", "end_idx", "[", "0", "]", ".", "astype", "(", "float", ")", ")", ")", "\n", "# print('end_time:', end_time)", "\n", "# print(len(end_time))", "\n", "duration", "=", "[", "pair", "[", "1", "]", "-", "pair", "[", "0", "]", "for", "pair", "in", "zip", "(", "start_time", ",", "end_time", ")", "]", "\n", "# print('duration each note:', duration)", "\n", "# print(len(duration))", "\n", "\n", "temp_start_time", "=", "[", "i", "for", "i", "in", "start_time", "]", "\n", "temp_end_time", "=", "[", "i", "for", "i", "in", "end_time", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "start_time", ")", ")", ":", "\n", "# print(start_time)", "\n", "            ", "if", "start_time", "[", "i", "]", "in", "temp_start_time", "and", "i", "!=", "len", "(", "start_time", ")", "-", "1", ":", "\n", "# print('i and start_time:', i, start_time[i])", "\n", "                ", "t", "=", "[", "]", "\n", "current_idx", "=", "temp_start_time", ".", "index", "(", "start_time", "[", "i", "]", ")", "\n", "for", "j", "in", "range", "(", "current_idx", "+", "1", ",", "len", "(", "temp_start_time", ")", ")", ":", "\n", "# print(j, temp_start_time[j])", "\n", "                    ", "if", "temp_start_time", "[", "j", "]", "<", "start_time", "[", "i", "]", "+", "threshold", "and", "temp_end_time", "[", "j", "]", "<=", "start_time", "[", "i", "]", "+", "threshold", ":", "\n", "# print('popped start time:', temp_start_time[j])", "\n", "                        ", "t", ".", "append", "(", "j", ")", "\n", "# print('popped temp_start_time:', t)", "\n", "", "", "for", "_", "in", "t", ":", "\n", "                    ", "temp_start_time", ".", "pop", "(", "t", "[", "0", "]", ")", "\n", "temp_end_time", ".", "pop", "(", "t", "[", "0", "]", ")", "\n", "# print('popped temp_start_time:', temp_start_time)", "\n", "\n", "", "", "", "start_time", "=", "temp_start_time", "\n", "# print('After checking, start_time:', start_time)", "\n", "# print(len(start_time))", "\n", "end_time", "=", "temp_end_time", "\n", "# print('After checking, end_time:', end_time)", "\n", "# print(len(end_time))", "\n", "duration", "=", "[", "pair", "[", "1", "]", "-", "pair", "[", "0", "]", "for", "pair", "in", "zip", "(", "start_time", ",", "end_time", ")", "]", "\n", "# print('After checking, duration each note:', duration)", "\n", "# print(len(duration))", "\n", "\n", "if", "len", "(", "end_time", ")", "<", "len", "(", "start_time", ")", ":", "\n", "            ", "d", "=", "len", "(", "start_time", ")", "-", "len", "(", "end_time", ")", "\n", "start_time", "=", "start_time", "[", ":", "-", "d", "]", "\n", "# Iterate through all the searched notes", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "start_time", ")", ")", ":", "\n", "            ", "if", "duration", "[", "idx", "]", ">=", "threshold", ":", "\n", "# Create an Note object with corresponding note number, start time and end time", "\n", "                ", "note", "=", "pretty_midi", ".", "Note", "(", "velocity", "=", "velocity", ",", "pitch", "=", "note_num", ",", "start", "=", "start_time", "[", "idx", "]", ",", "end", "=", "end_time", "[", "idx", "]", ")", "\n", "# Add the note to the Instrument object", "\n", "instrument", ".", "notes", ".", "append", "(", "note", ")", "\n", "", "else", ":", "\n", "                ", "if", "start_time", "[", "idx", "]", "+", "threshold", "<=", "phrase_end_time", ":", "\n", "# Create an Note object with corresponding note number, start time and end time", "\n", "                    ", "note", "=", "pretty_midi", ".", "Note", "(", "velocity", "=", "velocity", ",", "pitch", "=", "note_num", ",", "start", "=", "start_time", "[", "idx", "]", ",", "\n", "end", "=", "start_time", "[", "idx", "]", "+", "threshold", ")", "\n", "", "else", ":", "\n", "# Create an Note object with corresponding note number, start time and end time", "\n", "                    ", "note", "=", "pretty_midi", ".", "Note", "(", "velocity", "=", "velocity", ",", "pitch", "=", "note_num", ",", "start", "=", "start_time", "[", "idx", "]", ",", "\n", "end", "=", "phrase_end_time", ")", "\n", "# Add the note to the Instrument object", "\n", "", "instrument", ".", "notes", ".", "append", "(", "note", ")", "\n", "# Sort the notes by their start time", "\n", "", "", "", "instrument", ".", "notes", ".", "sort", "(", "key", "=", "lambda", "note", ":", "note", ".", "start", ")", "\n", "# print(max([i.end for i in instrument.notes]))", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.write_midi.write_piano_roll_to_midi": [[87, 99], ["pretty_midi.PrettyMIDI", "pretty_midi.Instrument", "write_midi.set_piano_roll_to_instrument", "pretty_midi.PrettyMIDI.instruments.append", "pretty_midi.PrettyMIDI.write"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.write_midi.set_piano_roll_to_instrument"], ["", "def", "write_piano_roll_to_midi", "(", "piano_roll", ",", "filename", ",", "program_num", "=", "0", ",", "is_drum", "=", "False", ",", "velocity", "=", "100", ",", "\n", "tempo", "=", "120.0", ",", "beat_resolution", "=", "16", ")", ":", "\n", "# Create a PrettyMIDI object", "\n", "    ", "midi", "=", "pretty_midi", ".", "PrettyMIDI", "(", "initial_tempo", "=", "tempo", ")", "\n", "# Create an Instrument object", "\n", "instrument", "=", "pretty_midi", ".", "Instrument", "(", "program", "=", "program_num", ",", "is_drum", "=", "is_drum", ")", "\n", "# Set the piano roll to the Instrument object", "\n", "set_piano_roll_to_instrument", "(", "piano_roll", ",", "instrument", ",", "velocity", ",", "tempo", ",", "beat_resolution", ")", "\n", "# Add the instrument to the PrettyMIDI object", "\n", "midi", ".", "instruments", ".", "append", "(", "instrument", ")", "\n", "# Write out the MIDI data", "\n", "midi", ".", "write", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.write_midi.write_piano_rolls_to_midi": [[101, 122], ["pretty_midi.PrettyMIDI", "range", "pretty_midi.PrettyMIDI.write", "print", "len", "pretty_midi.Instrument", "write_midi.set_piano_roll_to_instrument", "pretty_midi.PrettyMIDI.instruments.append", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.write_midi.set_piano_roll_to_instrument"], ["", "def", "write_piano_rolls_to_midi", "(", "piano_rolls", ",", "program_nums", "=", "None", ",", "is_drum", "=", "None", ",", "filename", "=", "'test.mid'", ",", "velocity", "=", "100", ",", "\n", "tempo", "=", "120.0", ",", "beat_resolution", "=", "24", ")", ":", "\n", "    ", "if", "len", "(", "piano_rolls", ")", "!=", "len", "(", "program_nums", ")", "or", "len", "(", "piano_rolls", ")", "!=", "len", "(", "is_drum", ")", ":", "\n", "        ", "print", "(", "\"Error: piano_rolls and program_nums have different sizes...\"", ")", "\n", "return", "False", "\n", "", "if", "not", "program_nums", ":", "\n", "        ", "program_nums", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "", "if", "not", "is_drum", ":", "\n", "        ", "is_drum", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "# Create a PrettyMIDI object", "\n", "", "midi", "=", "pretty_midi", ".", "PrettyMIDI", "(", "initial_tempo", "=", "tempo", ")", "\n", "# Iterate through all the input instruments", "\n", "for", "idx", "in", "range", "(", "len", "(", "piano_rolls", ")", ")", ":", "\n", "# Create an Instrument object", "\n", "        ", "instrument", "=", "pretty_midi", ".", "Instrument", "(", "program", "=", "program_nums", "[", "idx", "]", ",", "is_drum", "=", "is_drum", "[", "idx", "]", ")", "\n", "# Set the piano roll to the Instrument object", "\n", "set_piano_roll_to_instrument", "(", "piano_rolls", "[", "idx", "]", ",", "instrument", ",", "velocity", ",", "tempo", ",", "beat_resolution", ")", "\n", "# Add the instrument to the PrettyMIDI object", "\n", "midi", ".", "instruments", ".", "append", "(", "instrument", ")", "\n", "# Write out the MIDI data", "\n", "", "midi", ".", "write", "(", "filename", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.abs_criterion": [[7, 9], ["tensorflow.reduce_mean", "tensorflow.abs"], "function", ["None"], ["def", "abs_criterion", "(", "in_", ",", "target", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "in_", "-", "target", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.mae_criterion": [[11, 13], ["tensorflow.reduce_mean"], "function", ["None"], ["", "def", "mae_criterion", "(", "in_", ",", "target", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_mean", "(", "(", "in_", "-", "target", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.sce_criterion": [[15, 17], ["tensorflow.reduce_mean", "tensorflow.nn.sigmoid_cross_entropy_with_logits"], "function", ["None"], ["", "def", "sce_criterion", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "logits", ",", "labels", "=", "labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.softmax_criterion": [[19, 21], ["tensorflow.reduce_mean", "tensorflow.nn.softmax_cross_entropy_with_logits"], "function", ["None"], ["", "def", "softmax_criterion", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "logits", ",", "labels", "=", "labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.discriminator_midinet": [[23, 41], ["tensorflow.variable_scope", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.linear", "ops.linear", "tensorflow.get_variable_scope().reuse_variables", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "tensorflow.reshape", "tensorflow.nn.sigmoid", "ops.conv2d", "ops.conv2d", "ops.conv2d", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.linear", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.linear", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d"], ["", "def", "discriminator_midinet", "(", "image", ",", "options", ",", "reuse", "=", "False", ",", "name", "=", "\"discriminator\"", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "# image is 256 x 256 x input_c_dim", "\n", "        ", "if", "reuse", ":", "\n", "            ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse", "is", "False", "\n", "\n", "", "h0", "=", "lrelu", "(", "batch_norm", "(", "conv2d", "(", "image", ",", "options", ".", "df_dim", ",", "name", "=", "'d_h0_conv'", ")", ",", "name", "=", "'d_h0_conv_bn'", ")", ")", "\n", "# h0 is (128 x 128 x self.df_dim)", "\n", "h1", "=", "lrelu", "(", "batch_norm", "(", "conv2d", "(", "h0", ",", "options", ".", "df_dim", ",", "name", "=", "'d_h1_conv'", ")", ",", "name", "=", "'d_h1_conv_bn'", ")", ")", "\n", "# h1 is (64 x 64 x self.df_dim*2)", "\n", "h2", "=", "lrelu", "(", "batch_norm", "(", "conv2d", "(", "h1", ",", "options", ".", "df_dim", ",", "name", "=", "'d_h2_conv'", ")", ",", "name", "=", "'d_h2_conv_bn'", ")", ")", "\n", "# h2 is (32x 32 x self.df_dim*4)", "\n", "h3", "=", "linear", "(", "tf", ".", "reshape", "(", "h2", ",", "[", "options", ".", "batch_size", ",", "-", "1", "]", ")", ",", "options", ".", "df_dim", "*", "16", ",", "scope", "=", "'d_h3_linear'", ")", "\n", "# h3 is (32 x 32 x self.df_dim*8)", "\n", "h4", "=", "linear", "(", "h3", ",", "options", ".", "output_c_dim", ",", "scope", "=", "'d_h4_linear'", ")", "\n", "return", "tf", ".", "nn", ".", "sigmoid", "(", "h4", ")", ",", "h4", ",", "h0", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.generator_midinet": [[43, 67], ["tensorflow.variable_scope", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.reshape", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.tanh", "tensorflow.get_variable_scope().reuse_variables", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.linear", "ops.linear", "ops.deconv2d", "ops.deconv2d", "ops.deconv2d", "ops.deconv2d", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.linear", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.linear", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d"], ["", "", "def", "generator_midinet", "(", "image", ",", "options", ",", "reuse", "=", "False", ",", "name", "=", "'generator'", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "if", "reuse", ":", "\n", "            ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse", "is", "False", "\n", "\n", "# h0 = lrelu(batch_norm(conv2d(image, options.df_dim, name='g_h0_conv'), name='g_h0_conv_bn'))", "\n", "# h1 = lrelu(batch_norm(conv2d(h0, options.df_dim * 2, name='g_h1_conv'), name='g_h1_conv_bn'))", "\n", "# h2 = lrelu(batch_norm(conv2d(h1, options.df_dim * 4, name='g_h2_conv'), name='g_h2_conv_bn'))", "\n", "# h3 = lrelu(batch_norm(conv2d(h2, options.df_dim * 8, name='g_h3_conv'), name='g_h3_conv_bn'))", "\n", "# h4 = lrelu(batch_norm(conv2d(h3, options.df_dim * 16, name='g_h4_conv'), name='g_h4_conv_bn'))", "\n", "", "h0", "=", "tf", ".", "nn", ".", "relu", "(", "batch_norm", "(", "linear", "(", "image", ",", "options", ".", "df_dim", "*", "16", ",", "'g_h0_lin'", ")", ",", "name", "=", "'g_h0_lin_bn'", ")", ")", "\n", "h1", "=", "tf", ".", "nn", ".", "relu", "(", "batch_norm", "(", "linear", "(", "h0", ",", "options", ".", "df_dim", "*", "8", ",", "'g_h1_lin'", ")", ",", "name", "=", "'g_h1_lin_bn'", ")", ")", "\n", "h1", "=", "tf", ".", "reshape", "(", "h1", ",", "[", "options", ".", "batch_size", ",", "2", ",", "1", ",", "options", ".", "gf_dim", "*", "4", "]", ")", "\n", "h5", "=", "tf", ".", "nn", ".", "relu", "(", "batch_norm", "(", "deconv2d", "(", "h1", ",", "options", ".", "df_dim", "*", "2", ",", "[", "4", ",", "1", "]", ",", "[", "4", ",", "1", "]", ",", "name", "=", "'g_h5_conv'", ")", ",", "name", "=", "'g_h5_conv_bn'", ")", ")", "\n", "h6", "=", "tf", ".", "nn", ".", "relu", "(", "batch_norm", "(", "deconv2d", "(", "h5", ",", "options", ".", "df_dim", "*", "2", ",", "[", "4", ",", "1", "]", ",", "[", "4", ",", "1", "]", ",", "name", "=", "'g_h6_conv'", ")", ",", "name", "=", "'g_h6_conv_bn'", ")", ")", "\n", "h7", "=", "tf", ".", "nn", ".", "relu", "(", "batch_norm", "(", "deconv2d", "(", "h6", ",", "options", ".", "df_dim", "*", "2", ",", "[", "4", ",", "1", "]", ",", "[", "4", ",", "1", "]", ",", "name", "=", "'g_h7_conv'", ")", ",", "name", "=", "'g_h7_conv_bn'", ")", ")", "\n", "h8", "=", "tf", ".", "nn", ".", "tanh", "(", "batch_norm", "(", "deconv2d", "(", "h7", ",", "options", ".", "output_c_dim", ",", "[", "1", ",", "64", "]", ",", "[", "1", ",", "64", "]", ",", "name", "=", "'g_h8_conv'", ")", ",", "name", "=", "'g_h8_conv_bn'", ")", ")", "\n", "# h9 = tf.nn.relu(batch_norm(deconv2d(h8, options.df_dim, name='g_h9_conv'), name='g_h9_conv_bn'))", "\n", "# h10 = tf.nn.sigmoid(batch_norm(deconv2d(h9, options.output_c_dim, name='g_h10_conv'), name='g_h10_conv_bn'))", "\n", "\n", "return", "h8", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.discriminator_musegan_bar": [[69, 90], ["tensorflow.variable_scope", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.lrelu", "tensorflow.reshape", "ops.lrelu", "ops.linear", "tensorflow.get_variable_scope().reuse_variables", "ops.conv2d", "ops.conv2d", "ops.conv2d", "ops.conv2d", "ops.conv2d", "ops.conv2d", "ops.linear", "np.product", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope", "ops.lrelu.get_shape"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.linear", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.linear"], ["", "", "def", "discriminator_musegan_bar", "(", "input", ",", "reuse", "=", "False", ",", "name", "=", "'discriminator_bar'", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "if", "reuse", ":", "\n", "            ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse", "is", "False", "\n", "\n", "## conv", "\n", "", "h0", "=", "lrelu", "(", "conv2d", "(", "input", ",", "128", ",", "[", "1", ",", "12", "]", ",", "[", "1", ",", "12", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "'d_h0_conv'", ")", ")", "\n", "h1", "=", "lrelu", "(", "conv2d", "(", "h0", ",", "128", ",", "[", "1", ",", "7", "]", ",", "[", "1", ",", "7", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "'d_h1_conv'", ")", ")", "\n", "h2", "=", "lrelu", "(", "conv2d", "(", "h1", ",", "128", ",", "[", "2", ",", "1", "]", ",", "[", "2", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "'d_h2_conv'", ")", ")", "\n", "h3", "=", "lrelu", "(", "conv2d", "(", "h2", ",", "128", ",", "[", "2", ",", "1", "]", ",", "[", "2", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "'d_h3_conv'", ")", ")", "\n", "h4", "=", "lrelu", "(", "conv2d", "(", "h3", ",", "256", ",", "[", "4", ",", "1", "]", ",", "[", "2", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "'d_h4_conv'", ")", ")", "\n", "h5", "=", "lrelu", "(", "conv2d", "(", "h4", ",", "512", ",", "[", "3", ",", "1", "]", ",", "[", "2", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "'d_h5_conv'", ")", ")", "\n", "\n", "## linear", "\n", "h6", "=", "tf", ".", "reshape", "(", "h5", ",", "[", "-", "1", ",", "np", ".", "product", "(", "[", "s", ".", "value", "for", "s", "in", "h5", ".", "get_shape", "(", ")", "[", "1", ":", "]", "]", ")", "]", ")", "\n", "h6", "=", "lrelu", "(", "linear", "(", "h6", ",", "1024", ",", "scope", "=", "'d_h6_linear'", ")", ")", "\n", "h7", "=", "linear", "(", "h6", ",", "1", ",", "scope", "=", "'d_h7_linear'", ")", "\n", "return", "h5", ",", "h7", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.discriminator_musegan_phase": [[92, 108], ["tensorflow.variable_scope", "ops.lrelu", "ops.lrelu", "tensorflow.reshape", "ops.lrelu", "ops.linear", "tensorflow.get_variable_scope().reuse_variables", "ops.conv2d", "ops.conv2d", "ops.linear", "tensorflow.expand_dims", "np.product", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope", "ops.lrelu.get_shape"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.linear", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.linear"], ["", "", "def", "discriminator_musegan_phase", "(", "input", ",", "reuse", "=", "False", ",", "name", "=", "'discriminator_phase'", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "if", "reuse", ":", "\n", "            ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse", "is", "False", "\n", "\n", "## conv", "\n", "", "h0", "=", "lrelu", "(", "conv2d", "(", "tf", ".", "expand_dims", "(", "input", ",", "axis", "=", "2", ")", ",", "512", ",", "[", "2", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "'d_h0_conv'", ")", ")", "\n", "h1", "=", "lrelu", "(", "conv2d", "(", "h0", ",", "128", ",", "[", "3", ",", "1", "]", ",", "[", "3", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "'d_h1_conv'", ")", ")", "\n", "\n", "## linear", "\n", "h2", "=", "tf", ".", "reshape", "(", "h1", ",", "[", "-", "1", ",", "np", ".", "product", "(", "[", "s", ".", "value", "for", "s", "in", "h1", ".", "get_shape", "(", ")", "[", "1", ":", "]", "]", ")", "]", ")", "\n", "h2", "=", "lrelu", "(", "linear", "(", "h2", ",", "1024", ",", "scope", "=", "'d_h2_linear'", ")", ")", "\n", "h3", "=", "linear", "(", "h2", ",", "1", ",", "scope", "=", "'d_h3_linear'", ")", "\n", "return", "h3", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.generator_musegan_bar": [[110, 144], ["tensorflow.variable_scope", "tensorflow.reshape", "ops.relu", "tensorflow.reshape", "ops.relu", "ops.relu", "ops.relu", "ops.relu", "ops.relu", "ops.relu", "ops.deconv2d", "tensorflow.nn.tanh", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.stack", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.deconv2d", "ops.deconv2d", "ops.deconv2d", "ops.deconv2d", "ops.deconv2d", "ops.deconv2d", "ops.deconv2d", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope", "input.get_shape"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d"], ["", "", "def", "generator_musegan_bar", "(", "input", ",", "output_dim", ",", "reuse", "=", "False", ",", "name", "=", "'generator_bar'", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "if", "reuse", ":", "\n", "            ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse", "is", "False", "\n", "\n", "", "h0", "=", "tf", ".", "reshape", "(", "input", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "1", ",", "1", ",", "input", ".", "get_shape", "(", ")", "[", "1", "]", "]", ")", ")", "\n", "h0", "=", "relu", "(", "batch_norm", "(", "deconv2d", "(", "h0", ",", "1024", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "'g_h0_deconv'", ")", ",", "\n", "name", "=", "'g_h0_deconv_bn'", ")", ")", "\n", "\n", "h1", "=", "tf", ".", "reshape", "(", "h0", ",", "[", "-", "1", ",", "2", ",", "1", ",", "512", "]", ")", "\n", "h1", "=", "relu", "(", "batch_norm", "(", "deconv2d", "(", "h1", ",", "512", ",", "[", "2", ",", "1", "]", ",", "[", "2", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "'g_h1_deconv'", ")", ",", "\n", "name", "=", "'g_h1_deconv_bn'", ")", ")", "\n", "\n", "h2", "=", "relu", "(", "batch_norm", "(", "deconv2d", "(", "h1", ",", "256", ",", "[", "2", ",", "1", "]", ",", "[", "2", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "'g_h2_deconv'", ")", ",", "\n", "name", "=", "'g_h2_deconv_bn'", ")", ")", "\n", "\n", "h3", "=", "relu", "(", "batch_norm", "(", "deconv2d", "(", "h2", ",", "256", ",", "[", "2", ",", "1", "]", ",", "[", "2", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "'g_h3_deconv'", ")", ",", "\n", "name", "=", "'g_h3_deconv_bn'", ")", ")", "\n", "\n", "h4", "=", "relu", "(", "batch_norm", "(", "deconv2d", "(", "h3", ",", "128", ",", "[", "2", ",", "1", "]", ",", "[", "2", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "'g_h4_deconv'", ")", ",", "\n", "name", "=", "'g_h4_deconv_bn'", ")", ")", "\n", "\n", "h5", "=", "relu", "(", "batch_norm", "(", "deconv2d", "(", "h4", ",", "128", ",", "[", "3", ",", "1", "]", ",", "[", "3", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "'g_h5_deconv'", ")", ",", "\n", "name", "=", "'g_h5_deconv_bn'", ")", ")", "\n", "\n", "h6", "=", "relu", "(", "batch_norm", "(", "deconv2d", "(", "h5", ",", "64", ",", "[", "1", ",", "7", "]", ",", "[", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "'g_h6_deconv'", ")", ",", "\n", "name", "=", "'g_h6_deconv_bn'", ")", ")", "\n", "\n", "h7", "=", "deconv2d", "(", "h6", ",", "output_dim", ",", "[", "1", ",", "12", "]", ",", "[", "1", ",", "12", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "'g_h7_deconv'", ")", "\n", "\n", "return", "tf", ".", "nn", ".", "tanh", "(", "h7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.generator_musegan_phase": [[146, 161], ["tensorflow.variable_scope", "tensorflow.reshape", "ops.relu", "ops.relu", "tensorflow.transpose", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.stack", "ops.batch_norm", "ops.batch_norm", "tensorflow.squeeze", "ops.deconv2d", "ops.deconv2d", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope", "input.get_shape"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d"], ["", "", "def", "generator_musegan_phase", "(", "input", ",", "output_dim", ",", "reuse", "=", "False", ",", "name", "=", "'generator_phase'", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "if", "reuse", ":", "\n", "            ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse", "is", "False", "\n", "\n", "", "h0", "=", "tf", ".", "reshape", "(", "input", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "1", ",", "1", ",", "input", ".", "get_shape", "(", ")", "[", "1", "]", "]", ")", ")", "\n", "h0", "=", "relu", "(", "batch_norm", "(", "deconv2d", "(", "h0", ",", "1024", ",", "[", "2", ",", "1", "]", ",", "[", "2", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "'g_h1_deconv'", ")", ",", "\n", "name", "=", "'g_h1_deconv_bn'", ")", ")", "\n", "h1", "=", "relu", "(", "batch_norm", "(", "deconv2d", "(", "h0", ",", "output_dim", ",", "[", "3", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "name", "=", "'g_h2_deconv'", ")", ",", "\n", "name", "=", "'g_h2_deconv_bn'", ")", ")", "\n", "h1", "=", "tf", ".", "transpose", "(", "tf", ".", "squeeze", "(", "h1", ",", "axis", "=", "2", ")", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "return", "h1", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.discriminator": [[163, 195], ["tensorflow.variable_scope", "ops.lrelu", "ops.lrelu", "ops.conv2d", "tensorflow.get_variable_scope().reuse_variables", "ops.conv2d", "ops.instance_norm", "ops.conv2d", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d"], ["", "", "def", "discriminator", "(", "image", ",", "options", ",", "reuse", "=", "False", ",", "name", "=", "\"discriminator\"", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "# image is 256 x 256 x input_c_dim", "\n", "        ", "if", "reuse", ":", "\n", "            ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse", "is", "False", "\n", "\n", "# h0 = lrelu(conv2d(image, options.df_dim, ks=[12, 12], s=[12, 12], name='d_h0_conv'))", "\n", "# h1 = lrelu(instance_norm(conv2d(h0, options.df_dim*4, ks=[4, 1], s=[4, 1], name='d_h1_conv'), 'd_bn1'))", "\n", "# h4 = conv2d(h1, 1, s=1, name='d_h3_pred')", "\n", "\n", "# # input is (64 x 84 x self.df_dim)", "\n", "# h0 = lrelu(conv2d(image, options.df_dim, ks=[1, 12], s=[1, 12], name='d_h0_conv'))", "\n", "# # h0 is (64 x 7 x self.df_dim)", "\n", "# h1 = lrelu(instance_norm(conv2d(h0, options.df_dim*2, ks=[2, 1], s=[2, 1], name='d_h1_conv'), 'd_bn1'))", "\n", "# # h1 is (32 x 7 x self.df_dim*2)", "\n", "# h2 = lrelu(instance_norm(conv2d(h1, options.df_dim*4, ks=[2, 1], s=[2, 1], name='d_h2_conv'), 'd_bn2'))", "\n", "# # h2 is (16x 7 x self.df_dim*4)", "\n", "# h3 = lrelu(instance_norm(conv2d(h2, options.df_dim*8, ks=[2, 1], s=[2, 1], name='d_h3_conv'), 'd_bn3'))", "\n", "# # h3 is (8 x 7 x self.df_dim*8)", "\n", "# h4 = conv2d(h3, 1, s=1, name='d_h3_pred')", "\n", "# # h4 is (8 x 7 x 1)", "\n", "\n", "", "h0", "=", "lrelu", "(", "conv2d", "(", "image", ",", "options", ".", "df_dim", ",", "name", "=", "'d_h0_conv'", ")", ")", "\n", "# (32, 42, 64)", "\n", "h1", "=", "lrelu", "(", "instance_norm", "(", "conv2d", "(", "h0", ",", "options", ".", "df_dim", "*", "4", ",", "name", "=", "'d_h1_conv'", ")", ",", "'d_bn1'", ")", ")", "\n", "# (16, 21, 256)", "\n", "h4", "=", "conv2d", "(", "h1", ",", "1", ",", "s", "=", "1", ",", "name", "=", "'d_h3_pred'", ")", "\n", "# (16, 21, 1)", "\n", "return", "h4", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.generator_unet": [[197, 260], ["tensorflow.variable_scope", "ops.instance_norm", "ops.instance_norm", "ops.instance_norm", "ops.instance_norm", "ops.instance_norm", "ops.instance_norm", "ops.instance_norm", "ops.instance_norm", "ops.deconv2d", "tensorflow.nn.dropout", "tensorflow.concat", "ops.deconv2d", "tensorflow.nn.dropout", "tensorflow.concat", "ops.deconv2d", "tensorflow.nn.dropout", "tensorflow.concat", "ops.deconv2d", "tensorflow.concat", "ops.deconv2d", "tensorflow.concat", "ops.deconv2d", "tensorflow.concat", "ops.deconv2d", "tensorflow.concat", "ops.deconv2d", "tensorflow.nn.tanh", "tensorflow.get_variable_scope().reuse_variables", "ops.conv2d", "ops.conv2d", "ops.conv2d", "ops.conv2d", "ops.conv2d", "ops.conv2d", "ops.conv2d", "ops.conv2d", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.instance_norm", "ops.instance_norm", "ops.instance_norm", "ops.instance_norm", "ops.instance_norm", "ops.instance_norm", "ops.instance_norm", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm"], ["", "", "def", "generator_unet", "(", "image", ",", "options", ",", "reuse", "=", "False", ",", "name", "=", "\"generator\"", ")", ":", "\n", "\n", "    ", "dropout_rate", "=", "0.5", "if", "options", ".", "is_training", "else", "1.0", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "# image is 256 x 256 x input_c_dim", "\n", "        ", "if", "reuse", ":", "\n", "            ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse", "is", "False", "\n", "\n", "# image is (256 x 256 x input_c_dim)", "\n", "", "e1", "=", "instance_norm", "(", "conv2d", "(", "image", ",", "options", ".", "gf_dim", ",", "name", "=", "'g_e1_conv'", ")", ")", "\n", "# e1 is (128 x 128 x self.gf_dim)", "\n", "e2", "=", "instance_norm", "(", "conv2d", "(", "lrelu", "(", "e1", ")", ",", "options", ".", "gf_dim", "*", "2", ",", "name", "=", "'g_e2_conv'", ")", ",", "'g_bn_e2'", ")", "\n", "# e2 is (64 x 64 x self.gf_dim*2)", "\n", "e3", "=", "instance_norm", "(", "conv2d", "(", "lrelu", "(", "e2", ")", ",", "options", ".", "gf_dim", "*", "4", ",", "s", "=", "3", ",", "name", "=", "'g_e3_conv'", ")", ",", "'g_bn_e3'", ")", "\n", "# e3 is (32 x 32 x self.gf_dim*4)", "\n", "e4", "=", "instance_norm", "(", "conv2d", "(", "lrelu", "(", "e3", ")", ",", "options", ".", "gf_dim", "*", "8", ",", "s", "=", "[", "2", ",", "1", "]", ",", "name", "=", "'g_e4_conv'", ")", ",", "'g_bn_e4'", ")", "\n", "# e4 is (16 x 16 x self.gf_dim*8)", "\n", "e5", "=", "instance_norm", "(", "conv2d", "(", "lrelu", "(", "e4", ")", ",", "options", ".", "gf_dim", "*", "8", ",", "s", "=", "[", "2", ",", "1", "]", ",", "name", "=", "'g_e5_conv'", ")", ",", "'g_bn_e5'", ")", "\n", "# e5 is (8 x 8 x self.gf_dim*8)", "\n", "e6", "=", "instance_norm", "(", "conv2d", "(", "lrelu", "(", "e5", ")", ",", "options", ".", "gf_dim", "*", "8", ",", "s", "=", "[", "2", ",", "7", "]", ",", "name", "=", "'g_e6_conv'", ")", ",", "'g_bn_e6'", ")", "\n", "# e6 is (4 x 4 x self.gf_dim*8)", "\n", "e7", "=", "instance_norm", "(", "conv2d", "(", "lrelu", "(", "e6", ")", ",", "options", ".", "gf_dim", "*", "8", ",", "s", "=", "[", "2", ",", "1", "]", ",", "name", "=", "'g_e7_conv'", ")", ",", "'g_bn_e7'", ")", "\n", "# e7 is (2 x 2 x self.gf_dim*8)", "\n", "e8", "=", "instance_norm", "(", "conv2d", "(", "lrelu", "(", "e7", ")", ",", "options", ".", "gf_dim", "*", "8", ",", "s", "=", "[", "2", ",", "1", "]", ",", "name", "=", "'g_e8_conv'", ")", ",", "'g_bn_e8'", ")", "\n", "# e8 is (1 x 1 x self.gf_dim*8)", "\n", "\n", "d1", "=", "deconv2d", "(", "tf", ".", "nn", ".", "relu", "(", "e8", ")", ",", "options", ".", "gf_dim", "*", "8", ",", "s", "=", "[", "2", ",", "1", "]", ",", "name", "=", "'g_d1'", ")", "\n", "d1", "=", "tf", ".", "nn", ".", "dropout", "(", "d1", ",", "dropout_rate", ")", "\n", "d1", "=", "tf", ".", "concat", "(", "[", "instance_norm", "(", "d1", ",", "'g_bn_d1'", ")", ",", "e7", "]", ",", "3", ")", "\n", "# d1 is (2 x 2 x self.gf_dim*8*2)", "\n", "\n", "d2", "=", "deconv2d", "(", "tf", ".", "nn", ".", "relu", "(", "d1", ")", ",", "options", ".", "gf_dim", "*", "8", ",", "s", "=", "[", "2", ",", "1", "]", ",", "name", "=", "'g_d2'", ")", "\n", "d2", "=", "tf", ".", "nn", ".", "dropout", "(", "d2", ",", "dropout_rate", ")", "\n", "d2", "=", "tf", ".", "concat", "(", "[", "instance_norm", "(", "d2", ",", "'g_bn_d2'", ")", ",", "e6", "]", ",", "3", ")", "\n", "# d2 is (4 x 4 x self.gf_dim*8*2)", "\n", "\n", "d3", "=", "deconv2d", "(", "tf", ".", "nn", ".", "relu", "(", "d2", ")", ",", "options", ".", "gf_dim", "*", "8", ",", "s", "=", "[", "2", ",", "7", "]", ",", "name", "=", "'g_d3'", ")", "\n", "d3", "=", "tf", ".", "nn", ".", "dropout", "(", "d3", ",", "dropout_rate", ")", "\n", "d3", "=", "tf", ".", "concat", "(", "[", "instance_norm", "(", "d3", ",", "'g_bn_d3'", ")", ",", "e5", "]", ",", "3", ")", "\n", "# d3 is (8 x 8 x self.gf_dim*8*2)", "\n", "\n", "d4", "=", "deconv2d", "(", "tf", ".", "nn", ".", "relu", "(", "d3", ")", ",", "options", ".", "gf_dim", "*", "8", ",", "s", "=", "[", "2", ",", "1", "]", ",", "name", "=", "'g_d4'", ")", "\n", "d4", "=", "tf", ".", "concat", "(", "[", "instance_norm", "(", "d4", ",", "'g_bn_d4'", ")", ",", "e4", "]", ",", "3", ")", "\n", "# d4 is (16 x 16 x self.gf_dim*8*2)", "\n", "\n", "d5", "=", "deconv2d", "(", "tf", ".", "nn", ".", "relu", "(", "d4", ")", ",", "options", ".", "gf_dim", "*", "4", ",", "s", "=", "[", "2", ",", "1", "]", ",", "name", "=", "'g_d5'", ")", "\n", "d5", "=", "tf", ".", "concat", "(", "[", "instance_norm", "(", "d5", ",", "'g_bn_d5'", ")", ",", "e3", "]", ",", "3", ")", "\n", "# d5 is (32 x 32 x self.gf_dim*4*2)", "\n", "\n", "d6", "=", "deconv2d", "(", "tf", ".", "nn", ".", "relu", "(", "d5", ")", ",", "options", ".", "gf_dim", "*", "2", ",", "s", "=", "3", ",", "name", "=", "'g_d6'", ")", "\n", "d6", "=", "tf", ".", "concat", "(", "[", "instance_norm", "(", "d6", ",", "'g_bn_d6'", ")", ",", "e2", "]", ",", "3", ")", "\n", "# d6 is (64 x 64 x self.gf_dim*2*2)", "\n", "\n", "d7", "=", "deconv2d", "(", "tf", ".", "nn", ".", "relu", "(", "d6", ")", ",", "options", ".", "gf_dim", ",", "name", "=", "'g_d7'", ")", "\n", "d7", "=", "tf", ".", "concat", "(", "[", "instance_norm", "(", "d7", ",", "'g_bn_d7'", ")", ",", "e1", "]", ",", "3", ")", "\n", "# d7 is (128 x 128 x self.gf_dim*1*2)", "\n", "\n", "d8", "=", "deconv2d", "(", "tf", ".", "nn", ".", "relu", "(", "d7", ")", ",", "options", ".", "output_c_dim", ",", "name", "=", "'g_d8'", ")", "\n", "# d8 is (256 x 256 x output_c_dim)", "\n", "\n", "return", "tf", ".", "nn", ".", "tanh", "(", "d8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.generator_resnet": [[262, 336], ["tensorflow.variable_scope", "tensorflow.pad", "ops.relu", "ops.relu", "ops.relu", "module.generator_resnet.residule_block"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu"], ["", "", "def", "generator_resnet", "(", "image", ",", "options", ",", "reuse", "=", "False", ",", "name", "=", "\"generator\"", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "# image is 256 x 256 x input_c_dim", "\n", "        ", "if", "reuse", ":", "\n", "            ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse", "is", "False", "\n", "\n", "", "def", "residule_block", "(", "x", ",", "dim", ",", "ks", "=", "3", ",", "s", "=", "1", ",", "name", "=", "'res'", ")", ":", "\n", "# e.g, x is (# of images * 128 * 128 * 3)", "\n", "            ", "p", "=", "int", "(", "(", "ks", "-", "1", ")", "/", "2", ")", "\n", "# For ks = 3, p = 1", "\n", "y", "=", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "p", ",", "p", "]", ",", "[", "p", ",", "p", "]", ",", "[", "0", ",", "0", "]", "]", ",", "\"REFLECT\"", ")", "\n", "# After first padding, (# of images * 130 * 130 * 3)", "\n", "y", "=", "instance_norm", "(", "conv2d", "(", "y", ",", "dim", ",", "ks", ",", "s", ",", "padding", "=", "'VALID'", ",", "name", "=", "name", "+", "'_c1'", ")", ",", "name", "+", "'_bn1'", ")", "\n", "# After first conv2d, (# of images * 128 * 128 * 3)", "\n", "y", "=", "tf", ".", "pad", "(", "tf", ".", "nn", ".", "relu", "(", "y", ")", ",", "[", "[", "0", ",", "0", "]", ",", "[", "p", ",", "p", "]", ",", "[", "p", ",", "p", "]", ",", "[", "0", ",", "0", "]", "]", ",", "\"REFLECT\"", ")", "\n", "# After second padding, (# of images * 130 * 130 * 3)", "\n", "y", "=", "instance_norm", "(", "conv2d", "(", "y", ",", "dim", ",", "ks", ",", "s", ",", "padding", "=", "'VALID'", ",", "name", "=", "name", "+", "'_c2'", ")", ",", "name", "+", "'_bn2'", ")", "\n", "# After second conv2d, (# of images * 128 * 128 * 3)", "\n", "return", "relu", "(", "y", "+", "x", ")", "\n", "\n", "# Justin Johnson's model from https://github.com/jcjohnson/fast-neural-style/", "\n", "# The network with 9 blocks consists of: c7s1-32, d64, d128, R128, R128, R128,", "\n", "# R128, R128, R128, R128, R128, R128, u64, u32, c7s1-3", "\n", "\n", "# Original image is (# of images * 256 * 256 * 3)", "\n", "", "c0", "=", "tf", ".", "pad", "(", "image", ",", "[", "[", "0", ",", "0", "]", ",", "[", "3", ",", "3", "]", ",", "[", "3", ",", "3", "]", ",", "[", "0", ",", "0", "]", "]", ",", "\"REFLECT\"", ")", "\n", "# c0 is (# of images * 262 * 262 * 3)", "\n", "c1", "=", "relu", "(", "instance_norm", "(", "conv2d", "(", "c0", ",", "options", ".", "gf_dim", ",", "7", ",", "1", ",", "padding", "=", "'VALID'", ",", "name", "=", "'g_e1_c'", ")", ",", "'g_e1_bn'", ")", ")", "\n", "# c1 is (# of images * 256 * 256 * 64)", "\n", "c2", "=", "relu", "(", "instance_norm", "(", "conv2d", "(", "c1", ",", "options", ".", "gf_dim", "*", "2", ",", "3", ",", "2", ",", "name", "=", "'g_e2_c'", ")", ",", "'g_e2_bn'", ")", ")", "\n", "# c2 is (# of images * 128 * 128 * 128)", "\n", "c3", "=", "relu", "(", "instance_norm", "(", "conv2d", "(", "c2", ",", "options", ".", "gf_dim", "*", "4", ",", "3", ",", "2", ",", "name", "=", "'g_e3_c'", ")", ",", "'g_e3_bn'", ")", ")", "\n", "# c3 is (# of images * 64 * 64 * 256)", "\n", "\n", "# c4 = relu(instance_norm(conv2d(c3, options.gf_dim*8, 3, 3, name='g_e4_c'), 'g_e4_bn'))", "\n", "# c5 = relu(instance_norm(conv2d(c4, options.gf_dim*16, 3, [4, 1], name='g_e5_c'), 'g_e5_bn'))", "\n", "\n", "# define G network with 9 resnet blocks", "\n", "r1", "=", "residule_block", "(", "c3", ",", "options", ".", "gf_dim", "*", "4", ",", "name", "=", "'g_r1'", ")", "\n", "# r1 is (# of images * 64 * 64 * 256)", "\n", "r2", "=", "residule_block", "(", "r1", ",", "options", ".", "gf_dim", "*", "4", ",", "name", "=", "'g_r2'", ")", "\n", "# r2 is (# of images * 64 * 64 * 256)", "\n", "r3", "=", "residule_block", "(", "r2", ",", "options", ".", "gf_dim", "*", "4", ",", "name", "=", "'g_r3'", ")", "\n", "# r3 is (# of images * 64 * 64 * 256)", "\n", "r4", "=", "residule_block", "(", "r3", ",", "options", ".", "gf_dim", "*", "4", ",", "name", "=", "'g_r4'", ")", "\n", "# r4 is (# of images * 64 * 64 * 256)", "\n", "r5", "=", "residule_block", "(", "r4", ",", "options", ".", "gf_dim", "*", "4", ",", "name", "=", "'g_r5'", ")", "\n", "# r5 is (# of images * 64 * 64 * 256)", "\n", "r6", "=", "residule_block", "(", "r5", ",", "options", ".", "gf_dim", "*", "4", ",", "name", "=", "'g_r6'", ")", "\n", "# r6 is (# of images * 64 * 64 * 256)", "\n", "r7", "=", "residule_block", "(", "r6", ",", "options", ".", "gf_dim", "*", "4", ",", "name", "=", "'g_r7'", ")", "\n", "# r7 is (# of images * 64 * 64 * 256)", "\n", "r8", "=", "residule_block", "(", "r7", ",", "options", ".", "gf_dim", "*", "4", ",", "name", "=", "'g_r8'", ")", "\n", "# r8 is (# of images * 64 * 64 * 256)", "\n", "r9", "=", "residule_block", "(", "r8", ",", "options", ".", "gf_dim", "*", "4", ",", "name", "=", "'g_r9'", ")", "\n", "# r9 is (# of images * 64 * 64 * 256)", "\n", "r10", "=", "residule_block", "(", "r9", ",", "options", ".", "gf_dim", "*", "4", ",", "name", "=", "'g_r10'", ")", "\n", "\n", "# d4 = relu(instance_norm(deconv2d(r9, options.gf_dim*8, 3, [4, 1], name='g_d4_dc'), 'g_d4_bn'))", "\n", "# d5 = relu(instance_norm(deconv2d(d4, options.gf_dim*4, 3, 3, name='g_d5_dc'), 'g_d5_bn'))", "\n", "\n", "d1", "=", "relu", "(", "instance_norm", "(", "deconv2d", "(", "r10", ",", "options", ".", "gf_dim", "*", "2", ",", "3", ",", "2", ",", "name", "=", "'g_d1_dc'", ")", ",", "'g_d1_bn'", ")", ")", "\n", "# d1 is (# of images * 128 * 128 * 128)", "\n", "d2", "=", "relu", "(", "instance_norm", "(", "deconv2d", "(", "d1", ",", "options", ".", "gf_dim", ",", "3", ",", "2", ",", "name", "=", "'g_d2_dc'", ")", ",", "'g_d2_bn'", ")", ")", "\n", "# d2 is (# of images * 256 * 256 * 64)", "\n", "d3", "=", "tf", ".", "pad", "(", "d2", ",", "[", "[", "0", ",", "0", "]", ",", "[", "3", ",", "3", "]", ",", "[", "3", ",", "3", "]", ",", "[", "0", ",", "0", "]", "]", ",", "\"REFLECT\"", ")", "\n", "# After padding, (# of images * 262 * 262 * 64)", "\n", "pred", "=", "tf", ".", "nn", ".", "sigmoid", "(", "conv2d", "(", "d3", ",", "options", ".", "output_c_dim", ",", "7", ",", "1", ",", "padding", "=", "'VALID'", ",", "name", "=", "'g_pred_c'", ")", ")", "\n", "# Output image is (# of images * 256 * 256 * 3)", "\n", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.discriminator_classifier": [[338, 370], ["tensorflow.variable_scope", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.conv2d", "tensorflow.reshape", "tensorflow.get_variable_scope().reuse_variables", "ops.conv2d", "ops.instance_norm", "ops.instance_norm", "ops.instance_norm", "ops.conv2d", "ops.conv2d", "ops.conv2d", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.instance_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d"], ["", "", "def", "discriminator_classifier", "(", "image", ",", "options", ",", "reuse", "=", "False", ",", "name", "=", "\"discriminator\"", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "# image is 256 x 256 x input_c_dim", "\n", "        ", "if", "reuse", ":", "\n", "            ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse", "is", "False", "\n", "# # input is 384, 84, 1", "\n", "# h0 = lrelu(conv2d(image, options.df_dim, [12, 12], [12, 12], name='d_h0_conv'))", "\n", "# # h0 is (32 x 7 x self.df_dim)", "\n", "# h1 = lrelu(instance_norm(conv2d(h0, options.df_dim*2, [2, 1], [2, 1], name='d_h1_conv'), 'd_bn1'))", "\n", "# # h1 is (16 x 7 x self.df_dim*2)", "\n", "# h2 = lrelu(instance_norm(conv2d(h1, options.df_dim*4, [2, 1], [2, 1], name='d_h2_conv'), 'd_bn2'))", "\n", "# # h2 is (8 x 7 x self.df_dim*4)", "\n", "# h3 = lrelu(instance_norm(conv2d(h2, options.df_dim*8, [8, 1], [8, 1], name='d_h3_conv'), 'd_bn3'))", "\n", "# # h3 is (1 x 7 x self.df_dim*8)", "\n", "# h4 = conv2d(h3, 2, [1, 7], [1, 7], name='d_h3_pred')", "\n", "# # h4 is (1 x 1 x 2)", "\n", "\n", "# input is 64, 84, 1", "\n", "", "h0", "=", "lrelu", "(", "conv2d", "(", "image", ",", "options", ".", "df_dim", ",", "[", "1", ",", "12", "]", ",", "[", "1", ",", "12", "]", ",", "name", "=", "'d_h0_conv'", ")", ")", "\n", "# h0 is (64 x 7 x self.df_dim)", "\n", "h1", "=", "lrelu", "(", "instance_norm", "(", "conv2d", "(", "h0", ",", "options", ".", "df_dim", "*", "2", ",", "[", "4", ",", "1", "]", ",", "[", "4", ",", "1", "]", ",", "name", "=", "'d_h1_conv'", ")", ",", "'d_bn1'", ")", ")", "\n", "# h1 is (16 x 7 x self.df_dim*2)", "\n", "h2", "=", "lrelu", "(", "instance_norm", "(", "conv2d", "(", "h1", ",", "options", ".", "df_dim", "*", "4", ",", "[", "2", ",", "1", "]", ",", "[", "2", ",", "1", "]", ",", "name", "=", "'d_h2_conv'", ")", ",", "'d_bn2'", ")", ")", "\n", "# h2 is (8 x 7 x self.df_dim*4)", "\n", "h3", "=", "lrelu", "(", "instance_norm", "(", "conv2d", "(", "h2", ",", "options", ".", "df_dim", "*", "8", ",", "[", "8", ",", "1", "]", ",", "[", "8", ",", "1", "]", ",", "name", "=", "'d_h3_conv'", ")", ",", "'d_bn3'", ")", ")", "\n", "# h3 is (1 x 7 x self.df_dim*8)", "\n", "h4", "=", "conv2d", "(", "h3", ",", "2", ",", "[", "1", ",", "7", "]", ",", "[", "1", ",", "7", "]", ",", "name", "=", "'d_h3_pred'", ")", "\n", "# h4 is (1 x 1 x 2)", "\n", "return", "tf", ".", "reshape", "(", "h4", ",", "[", "-", "1", ",", "2", "]", ")", "# batch_size * 2", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.PhraseGenerator": [[372, 393], ["tensorflow.variable_scope", "tensorflow.reshape", "ops.relu", "ops.relu", "tensorflow.transpose", "tensorflow.stack", "ops.batch_norm", "ops.batch_norm", "tensorflow.squeeze", "ops.deconv2d_musegan", "ops.deconv2d_musegan", "in_tensor.get_shape"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d_musegan", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d_musegan"], ["", "", "def", "PhraseGenerator", "(", "in_tensor", ",", "output_dim", ",", "reuse", "=", "False", ",", "name", "=", "'generator'", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "h0", "=", "tf", ".", "reshape", "(", "in_tensor", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "1", ",", "1", ",", "in_tensor", ".", "get_shape", "(", ")", "[", "1", "]", "]", ")", ")", "\n", "h0", "=", "relu", "(", "batch_norm", "(", "deconv2d_musegan", "(", "tensor_in", "=", "h0", ",", "\n", "out_shape", "=", "[", "2", ",", "1", "]", ",", "\n", "out_channels", "=", "1024", ",", "\n", "kernels", "=", "[", "2", ",", "1", "]", ",", "\n", "strides", "=", "[", "2", ",", "1", "]", ",", "\n", "name", "=", "'h1'", ")", ",", "\n", "'h1_bn'", ")", ")", "\n", "h1", "=", "relu", "(", "batch_norm", "(", "deconv2d_musegan", "(", "tensor_in", "=", "h0", ",", "\n", "out_shape", "=", "[", "4", ",", "1", "]", ",", "\n", "out_channels", "=", "output_dim", ",", "\n", "kernels", "=", "[", "3", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", "]", ",", "\n", "name", "=", "'h2'", ")", ",", "\n", "'h2_bn'", ")", ")", "\n", "h1", "=", "tf", ".", "transpose", "(", "tf", ".", "squeeze", "(", "h1", ",", "axis", "=", "2", ")", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "", "return", "h1", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.BarGenerator": [[395, 418], ["tensorflow.nn.tanh", "tensorflow.variable_scope", "tensorflow.reshape", "ops.relu", "tensorflow.reshape", "ops.relu", "ops.relu", "ops.relu", "ops.relu", "ops.relu", "ops.relu", "ops.deconv2d_musegan", "tensorflow.stack", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.deconv2d_musegan", "ops.deconv2d_musegan", "ops.deconv2d_musegan", "ops.deconv2d_musegan", "ops.deconv2d_musegan", "ops.deconv2d_musegan", "ops.deconv2d_musegan", "in_tensor.get_shape"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.relu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d_musegan", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.batch_norm", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d_musegan", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d_musegan", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d_musegan", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d_musegan", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d_musegan", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d_musegan", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.deconv2d_musegan"], ["", "def", "BarGenerator", "(", "in_tensor", ",", "output_dim", ",", "reuse", "=", "False", ",", "name", "=", "'generator'", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ")", ":", "\n", "\n", "        ", "h0", "=", "tf", ".", "reshape", "(", "in_tensor", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "1", ",", "1", ",", "in_tensor", ".", "get_shape", "(", ")", "[", "1", "]", "]", ")", ")", "\n", "h0", "=", "relu", "(", "batch_norm", "(", "deconv2d_musegan", "(", "h0", ",", "[", "1", ",", "1", "]", ",", "1024", ",", "kernels", "=", "[", "1", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "1", "]", ",", "name", "=", "'h0'", ")", ",", "'h0_bn'", ")", ")", "\n", "\n", "h1", "=", "tf", ".", "reshape", "(", "h0", ",", "[", "-", "1", ",", "2", ",", "1", ",", "512", "]", ")", "\n", "h1", "=", "relu", "(", "batch_norm", "(", "deconv2d_musegan", "(", "h1", ",", "[", "4", ",", "1", "]", ",", "512", ",", "kernels", "=", "[", "2", ",", "1", "]", ",", "strides", "=", "[", "2", ",", "1", "]", ",", "name", "=", "'h1'", ")", ",", "'h1_bn'", ")", ")", "\n", "\n", "h2", "=", "relu", "(", "batch_norm", "(", "deconv2d_musegan", "(", "h1", ",", "[", "8", ",", "1", "]", ",", "256", ",", "kernels", "=", "[", "2", ",", "1", "]", ",", "strides", "=", "[", "2", ",", "1", "]", ",", "name", "=", "'h2'", ")", ",", "'h2_bn'", ")", ")", "\n", "\n", "h3", "=", "relu", "(", "batch_norm", "(", "deconv2d_musegan", "(", "h2", ",", "[", "16", ",", "1", "]", ",", "256", ",", "kernels", "=", "[", "2", ",", "1", "]", ",", "strides", "=", "[", "2", ",", "1", "]", ",", "name", "=", "'h3'", ")", ",", "'h3_bn'", ")", ")", "\n", "\n", "h4", "=", "relu", "(", "batch_norm", "(", "deconv2d_musegan", "(", "h3", ",", "[", "32", ",", "1", "]", ",", "128", ",", "kernels", "=", "[", "2", ",", "1", "]", ",", "strides", "=", "[", "2", ",", "1", "]", ",", "name", "=", "'h4'", ")", ",", "'h4_bn'", ")", ")", "\n", "\n", "h5", "=", "relu", "(", "batch_norm", "(", "deconv2d_musegan", "(", "h4", ",", "[", "96", ",", "1", "]", ",", "128", ",", "kernels", "=", "[", "3", ",", "1", "]", ",", "strides", "=", "[", "3", ",", "1", "]", ",", "name", "=", "'h5'", ")", ",", "'h5_bn'", ")", ")", "\n", "\n", "h6", "=", "relu", "(", "batch_norm", "(", "deconv2d_musegan", "(", "h5", ",", "[", "96", ",", "7", "]", ",", "64", ",", "kernels", "=", "[", "1", ",", "7", "]", ",", "strides", "=", "[", "1", ",", "1", "]", ",", "name", "=", "'h6'", ")", ",", "'h6_bn'", ")", ")", "\n", "\n", "h7", "=", "deconv2d_musegan", "(", "h6", ",", "[", "96", ",", "84", "]", ",", "output_dim", ",", "kernels", "=", "[", "1", ",", "12", "]", ",", "strides", "=", "[", "1", ",", "12", "]", ",", "name", "=", "'h7'", ")", "\n", "\n", "", "return", "tf", ".", "nn", ".", "tanh", "(", "h7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.BarDiscriminator": [[420, 438], ["tensorflow.variable_scope", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.lrelu", "tensorflow.reshape", "ops.lrelu", "ops.linear", "ops.conv2d_musegan", "ops.conv2d_musegan", "ops.conv2d_musegan", "ops.conv2d_musegan", "ops.conv2d_musegan", "ops.conv2d_musegan", "ops.linear", "np.product", "ops.lrelu.get_shape"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.linear", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d_musegan", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d_musegan", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d_musegan", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d_musegan", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d_musegan", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d_musegan", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.linear"], ["", "def", "BarDiscriminator", "(", "in_tensor", ",", "reuse", "=", "False", ",", "name", "=", "'discriminator'", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ")", ":", "\n", "\n", "## conv", "\n", "        ", "h0", "=", "lrelu", "(", "conv2d_musegan", "(", "in_tensor", ",", "128", ",", "kernels", "=", "[", "1", ",", "12", "]", ",", "strides", "=", "[", "1", ",", "12", "]", ",", "name", "=", "'h0'", ")", ")", "\n", "h1", "=", "lrelu", "(", "conv2d_musegan", "(", "h0", ",", "128", ",", "kernels", "=", "[", "1", ",", "7", "]", ",", "strides", "=", "[", "1", ",", "7", "]", ",", "name", "=", "'h1'", ")", ")", "\n", "h2", "=", "lrelu", "(", "conv2d_musegan", "(", "h1", ",", "128", ",", "kernels", "=", "[", "2", ",", "1", "]", ",", "strides", "=", "[", "2", ",", "1", "]", ",", "name", "=", "'h2'", ")", ")", "\n", "h3", "=", "lrelu", "(", "conv2d_musegan", "(", "h2", ",", "128", ",", "kernels", "=", "[", "2", ",", "1", "]", ",", "strides", "=", "[", "2", ",", "1", "]", ",", "name", "=", "'h3'", ")", ")", "\n", "h4", "=", "lrelu", "(", "conv2d_musegan", "(", "h3", ",", "256", ",", "kernels", "=", "[", "4", ",", "1", "]", ",", "strides", "=", "[", "2", ",", "1", "]", ",", "name", "=", "'h4'", ")", ")", "\n", "h5", "=", "lrelu", "(", "conv2d_musegan", "(", "h4", ",", "512", ",", "kernels", "=", "[", "3", ",", "1", "]", ",", "strides", "=", "[", "2", ",", "1", "]", ",", "name", "=", "'h5'", ")", ")", "\n", "\n", "## linear", "\n", "h6", "=", "tf", ".", "reshape", "(", "h5", ",", "[", "-", "1", ",", "np", ".", "product", "(", "[", "s", ".", "value", "for", "s", "in", "h5", ".", "get_shape", "(", ")", "[", "1", ":", "]", "]", ")", "]", ")", "\n", "h6", "=", "lrelu", "(", "linear", "(", "h6", ",", "1024", ",", "scope", "=", "'h6'", ")", ")", "\n", "h7", "=", "linear", "(", "h6", ",", "1", ",", "scope", "=", "'h7'", ")", "\n", "\n", "", "return", "h5", ",", "h7", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.PhraseDiscriminator": [[440, 454], ["tensorflow.variable_scope", "ops.lrelu", "ops.lrelu", "tensorflow.reshape", "ops.lrelu", "ops.linear", "ops.conv2d_musegan", "ops.conv2d_musegan", "ops.linear", "tensorflow.expand_dims", "np.product", "ops.lrelu.get_shape"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.lrelu", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.linear", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d_musegan", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.conv2d_musegan", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.linear"], ["", "def", "PhraseDiscriminator", "(", "in_tensor", ",", "reuse", "=", "False", ",", "name", "=", "'discriminator'", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ")", ":", "\n", "\n", "## conv", "\n", "        ", "h0", "=", "lrelu", "(", "conv2d_musegan", "(", "tf", ".", "expand_dims", "(", "in_tensor", ",", "axis", "=", "2", ")", ",", "512", ",", "kernels", "=", "[", "2", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "1", "]", ",", "name", "=", "'h0'", ")", ")", "\n", "h1", "=", "lrelu", "(", "conv2d_musegan", "(", "h0", ",", "128", ",", "kernels", "=", "[", "3", ",", "1", "]", ",", "strides", "=", "[", "3", ",", "1", "]", ",", "name", "=", "'h1'", ")", ")", "\n", "\n", "## linear", "\n", "h2", "=", "tf", ".", "reshape", "(", "h1", ",", "[", "-", "1", ",", "np", ".", "product", "(", "[", "s", ".", "value", "for", "s", "in", "h1", ".", "get_shape", "(", ")", "[", "1", ":", "]", "]", ")", "]", ")", "\n", "h2", "=", "lrelu", "(", "linear", "(", "h2", ",", "1024", ",", "scope", "=", "'h2'", ")", ")", "\n", "h3", "=", "linear", "(", "h2", ",", "1", ",", "scope", "=", "'h3'", ")", "\n", "\n", "", "return", "h3", "\n", "", ""]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.convert_clean.make_sure_path_exists": [[14, 22], ["os.makedirs"], "function", ["None"], ["def", "make_sure_path_exists", "(", "path", ")", ":", "\n", "    ", "\"\"\"Create all intermediate-level directories if the given path does not\n    exist\"\"\"", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exception", ":", "\n", "        ", "if", "exception", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.convert_clean.get_midi_path": [[24, 32], ["os.walk", "filename.endswith", "filepaths.append", "os.path.join"], "function", ["None"], ["", "", "", "def", "get_midi_path", "(", "root", ")", ":", "\n", "    ", "\"\"\"Return a list of paths to MIDI files in `root` (recursively)\"\"\"", "\n", "filepaths", "=", "[", "]", "\n", "for", "dirpath", ",", "_", ",", "filenames", "in", "os", ".", "walk", "(", "root", ")", ":", "\n", "        ", "for", "filename", "in", "filenames", ":", "\n", "            ", "if", "filename", ".", "endswith", "(", "'.mid'", ")", ":", "\n", "                ", "filepaths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "dirpath", ",", "filename", ")", ")", "\n", "", "", "", "return", "filepaths", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.convert_clean.get_midi_info": [[34, 58], ["pm.get_tempo_changes", "pm.time_signature_changes.sort", "pm.estimate_beat_start", "len", "len", "len"], "function", ["None"], ["", "def", "get_midi_info", "(", "pm", ")", ":", "\n", "    ", "\"\"\"Return useful information from a pretty_midi.PrettyMIDI instance\"\"\"", "\n", "if", "pm", ".", "time_signature_changes", ":", "\n", "        ", "pm", ".", "time_signature_changes", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "time", ")", "\n", "first_beat_time", "=", "pm", ".", "time_signature_changes", "[", "0", "]", ".", "time", "\n", "", "else", ":", "\n", "        ", "first_beat_time", "=", "pm", ".", "estimate_beat_start", "(", ")", "\n", "\n", "", "tc_times", ",", "tempi", "=", "pm", ".", "get_tempo_changes", "(", ")", "\n", "\n", "if", "len", "(", "pm", ".", "time_signature_changes", ")", "==", "1", ":", "\n", "        ", "time_sign", "=", "'{}/{}'", ".", "format", "(", "pm", ".", "time_signature_changes", "[", "0", "]", ".", "numerator", ",", "\n", "pm", ".", "time_signature_changes", "[", "0", "]", ".", "denominator", ")", "\n", "", "else", ":", "\n", "        ", "time_sign", "=", "None", "\n", "\n", "", "midi_info", "=", "{", "\n", "'first_beat_time'", ":", "first_beat_time", ",", "\n", "'num_time_signature_change'", ":", "len", "(", "pm", ".", "time_signature_changes", ")", ",", "\n", "'time_signature'", ":", "time_sign", ",", "\n", "'tempo'", ":", "tempi", "[", "0", "]", "if", "len", "(", "tc_times", ")", "==", "1", "else", "None", "\n", "}", "\n", "\n", "return", "midi_info", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.convert_clean.midi_filter": [[60, 69], ["None"], "function", ["None"], ["", "def", "midi_filter", "(", "midi_info", ")", ":", "\n", "    ", "\"\"\"Return True for qualified midi files and False for unwanted ones\"\"\"", "\n", "if", "midi_info", "[", "'first_beat_time'", "]", ">", "0.0", ":", "\n", "        ", "return", "False", "\n", "", "elif", "midi_info", "[", "'num_time_signature_change'", "]", ">", "1", ":", "\n", "        ", "return", "False", "\n", "", "elif", "midi_info", "[", "'time_signature'", "]", "not", "in", "[", "'4/4'", "]", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.convert_clean.get_merged": [[71, 97], ["enumerate", "pypianoroll.Multitrack", "category_list[].append", "multitrack[].get_merged_pianoroll", "tracks.append", "tracks.append", "category_list[].append", "pypianoroll.Track", "pypianoroll.Track", "category_list[].append", "category_list[].append", "category_list[].append"], "function", ["None"], ["", "def", "get_merged", "(", "multitrack", ")", ":", "\n", "    ", "\"\"\"Return a `pypianoroll.Multitrack` instance with piano-rolls merged to\n    five tracks (Bass, Drums, Guitar, Piano and Strings)\"\"\"", "\n", "category_list", "=", "{", "'Bass'", ":", "[", "]", ",", "'Drums'", ":", "[", "]", ",", "'Guitar'", ":", "[", "]", ",", "'Piano'", ":", "[", "]", ",", "'Strings'", ":", "[", "]", "}", "\n", "program_dict", "=", "{", "'Piano'", ":", "0", ",", "'Drums'", ":", "0", ",", "'Guitar'", ":", "24", ",", "'Bass'", ":", "32", ",", "'Strings'", ":", "48", "}", "\n", "\n", "for", "idx", ",", "track", "in", "enumerate", "(", "multitrack", ".", "tracks", ")", ":", "\n", "        ", "if", "track", ".", "is_drum", ":", "\n", "            ", "category_list", "[", "'Drums'", "]", ".", "append", "(", "idx", ")", "\n", "", "elif", "track", ".", "program", "//", "8", "==", "0", ":", "\n", "            ", "category_list", "[", "'Piano'", "]", ".", "append", "(", "idx", ")", "\n", "", "elif", "track", ".", "program", "//", "8", "==", "3", ":", "\n", "            ", "category_list", "[", "'Guitar'", "]", ".", "append", "(", "idx", ")", "\n", "", "elif", "track", ".", "program", "//", "8", "==", "4", ":", "\n", "            ", "category_list", "[", "'Bass'", "]", ".", "append", "(", "idx", ")", "\n", "", "else", ":", "\n", "            ", "category_list", "[", "'Strings'", "]", ".", "append", "(", "idx", ")", "\n", "\n", "", "", "tracks", "=", "[", "]", "\n", "for", "key", "in", "category_list", ":", "\n", "        ", "if", "category_list", "[", "key", "]", ":", "\n", "            ", "merged", "=", "multitrack", "[", "category_list", "[", "key", "]", "]", ".", "get_merged_pianoroll", "(", ")", "\n", "tracks", ".", "append", "(", "Track", "(", "merged", ",", "program_dict", "[", "key", "]", ",", "key", "==", "'Drums'", ",", "key", ")", ")", "\n", "", "else", ":", "\n", "            ", "tracks", ".", "append", "(", "Track", "(", "None", ",", "program_dict", "[", "key", "]", ",", "key", "==", "'Drums'", ",", "key", ")", ")", "\n", "", "", "return", "Multitrack", "(", "None", ",", "tracks", ",", "multitrack", ".", "tempo", ",", "multitrack", ".", "downbeat", ",", "multitrack", ".", "beat_resolution", ",", "multitrack", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.convert_clean.converter": [[99, 118], ["pypianoroll.Multitrack", "pretty_midi.PrettyMIDI", "convert_clean.get_midi_info", "pypianoroll.from_pretty_midi", "convert_clean.get_merged", "convert_clean.make_sure_path_exists", "get_merged.save", "os.path.splitext", "os.path.join", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.convert_clean.get_midi_info", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.convert_clean.get_merged", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.convert_clean.make_sure_path_exists", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.save"], ["", "def", "converter", "(", "filepath", ")", ":", "\n", "    ", "\"\"\"Save a multi-track piano-roll converted from a MIDI file to target\n    dataset directory and update MIDI information to `midi_dict`\"\"\"", "\n", "try", ":", "\n", "        ", "midi_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "filepath", ")", ")", "[", "0", "]", "\n", "multitrack", "=", "Multitrack", "(", "resolution", "=", "24", ",", "name", "=", "midi_name", ")", "\n", "\n", "pm", "=", "pretty_midi", ".", "PrettyMIDI", "(", "filepath", ")", "\n", "midi_info", "=", "get_midi_info", "(", "pm", ")", "\n", "multitrack", "=", "pypianoroll", ".", "from_pretty_midi", "(", "pm", ")", "\n", "merged", "=", "get_merged", "(", "multitrack", ")", "\n", "\n", "make_sure_path_exists", "(", "converter_path", ")", "\n", "merged", ".", "save", "(", "os", ".", "path", ".", "join", "(", "converter_path", ",", "midi_name", "+", "'.npz'", ")", ")", "\n", "\n", "return", "[", "midi_name", ",", "midi_info", "]", "\n", "\n", "", "except", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.convert_clean.main": [[120, 150], ["convert_clean.get_midi_path", "print", "convert_clean.make_sure_path_exists", "print", "os.path.join", "convert_clean.converter", "open", "json.dump", "open", "json.load", "convert_clean.midi_filter", "open", "json.dump", "os.path.join", "len", "len", "os.path.join", "shutil.copyfile", "os.path.join", "len", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.convert_clean.get_midi_path", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.convert_clean.make_sure_path_exists", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.convert_clean.converter", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.load", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.convert_clean.midi_filter"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Main function of the converter\"\"\"", "\n", "midi_paths", "=", "get_midi_path", "(", "os", ".", "path", ".", "join", "(", "ROOT_PATH", ",", "'MIDI/pop/pop_test/origin_midi'", ")", ")", "\n", "midi_dict", "=", "{", "}", "\n", "kv_pairs", "=", "[", "converter", "(", "midi_path", ")", "for", "midi_path", "in", "midi_paths", "]", "\n", "for", "kv_pair", "in", "kv_pairs", ":", "\n", "        ", "if", "kv_pair", "is", "not", "None", ":", "\n", "            ", "midi_dict", "[", "kv_pair", "[", "0", "]", "]", "=", "kv_pair", "[", "1", "]", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "ROOT_PATH", ",", "'MIDI/pop/pop_test/midis.json'", ")", ",", "'w'", ")", "as", "outfile", ":", "\n", "        ", "json", ".", "dump", "(", "midi_dict", ",", "outfile", ")", "\n", "\n", "", "print", "(", "\"[Done] {} files out of {} have been successfully converted\"", ".", "format", "(", "len", "(", "midi_dict", ")", ",", "len", "(", "midi_paths", ")", ")", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "ROOT_PATH", ",", "'MIDI/pop/pop_test/midis.json'", ")", ")", "as", "infile", ":", "\n", "        ", "midi_dict", "=", "json", ".", "load", "(", "infile", ")", "\n", "", "count", "=", "0", "\n", "make_sure_path_exists", "(", "cleaner_path", ")", "\n", "midi_dict_clean", "=", "{", "}", "\n", "for", "key", "in", "midi_dict", ":", "\n", "        ", "if", "midi_filter", "(", "midi_dict", "[", "key", "]", ")", ":", "\n", "            ", "midi_dict_clean", "[", "key", "]", "=", "midi_dict", "[", "key", "]", "\n", "count", "+=", "1", "\n", "shutil", ".", "copyfile", "(", "os", ".", "path", ".", "join", "(", "converter_path", ",", "key", "+", "'.npz'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "cleaner_path", ",", "key", "+", "'.npz'", ")", ")", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "ROOT_PATH", ",", "'MIDI/pop/pop_test/midis_clean.json'", ")", ",", "'w'", ")", "as", "outfile", ":", "\n", "        ", "json", ".", "dump", "(", "midi_dict_clean", ",", "outfile", ")", "\n", "\n", "", "print", "(", "\"[Done] {} files out of {} have been successfully cleaned\"", ".", "format", "(", "count", ",", "len", "(", "midi_dict", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.__init__": [[18, 56], ["collections.namedtuple", "collections.namedtuple._make", "model.cyclegan._build_model", "tensorflow.train.Saver", "utils.get_now_datetime", "utils.ImagePool"], "methods", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan._build_model", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.get_now_datetime"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "args", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "image_size", "=", "args", ".", "fine_size", "# cropped size", "\n", "self", ".", "time_step", "=", "args", ".", "time_step", "\n", "self", ".", "pitch_range", "=", "args", ".", "pitch_range", "\n", "self", ".", "input_c_dim", "=", "args", ".", "input_nc", "# number of input image channels", "\n", "self", ".", "output_c_dim", "=", "args", ".", "output_nc", "# number of output image channels", "\n", "self", ".", "L1_lambda", "=", "args", ".", "L1_lambda", "\n", "self", ".", "gamma", "=", "args", ".", "gamma", "\n", "self", ".", "sigma_d", "=", "args", ".", "sigma_d", "\n", "self", ".", "dataset_dir", "=", "args", ".", "dataset_dir", "\n", "self", ".", "dataset_A_dir", "=", "args", ".", "dataset_A_dir", "\n", "self", ".", "dataset_B_dir", "=", "args", ".", "dataset_B_dir", "\n", "self", ".", "sample_dir", "=", "args", ".", "sample_dir", "\n", "\n", "self", ".", "model", "=", "args", ".", "model", "\n", "self", ".", "discriminator", "=", "discriminator", "\n", "self", ".", "generator", "=", "generator_resnet", "\n", "self", ".", "criterionGAN", "=", "mae_criterion", "\n", "\n", "OPTIONS", "=", "namedtuple", "(", "'OPTIONS'", ",", "'batch_size '", "\n", "'image_size '", "\n", "'gf_dim '", "\n", "'df_dim '", "\n", "'output_c_dim '", "\n", "'is_training'", ")", "\n", "self", ".", "options", "=", "OPTIONS", ".", "_make", "(", "(", "args", ".", "batch_size", ",", "\n", "args", ".", "fine_size", ",", "\n", "args", ".", "ngf", ",", "\n", "args", ".", "ndf", ",", "\n", "args", ".", "output_nc", ",", "\n", "args", ".", "phase", "==", "'train'", ")", ")", "\n", "\n", "self", ".", "_build_model", "(", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "30", ")", "\n", "self", ".", "now_datetime", "=", "get_now_datetime", "(", ")", "\n", "self", ".", "pool", "=", "ImagePool", "(", "args", ".", "max_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan._build_model": [[57, 187], ["tensorflow.placeholder", "tensorflow.placeholder", "model.cyclegan.generator", "model.cyclegan.generator", "model.cyclegan.generator", "model.cyclegan.generator", "ops.to_binary", "ops.to_binary", "ops.to_binary", "ops.to_binary", "ops.to_binary", "ops.to_binary", "model.cyclegan.discriminator", "model.cyclegan.discriminator", "model.cyclegan.discriminator", "model.cyclegan.discriminator", "tensorflow.placeholder", "tensorflow.placeholder", "model.cyclegan.discriminator", "model.cyclegan.discriminator", "model.cyclegan.criterionGAN", "model.cyclegan.criterionGAN", "model.cyclegan.criterionGAN", "model.cyclegan.criterionGAN", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.placeholder", "model.cyclegan.generator", "model.cyclegan.generator", "model.cyclegan.generator", "model.cyclegan.generator", "ops.to_binary", "ops.to_binary", "ops.to_binary", "ops.to_binary", "ops.to_binary", "ops.to_binary", "tensorflow.trainable_variables", "tensorflow.placeholder", "model.cyclegan.discriminator", "model.cyclegan.discriminator", "model.cyclegan.discriminator", "model.cyclegan.discriminator", "model.cyclegan.criterionGAN", "model.cyclegan.criterionGAN", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.ones_like", "tensorflow.zeros_like", "model.cyclegan.criterionGAN", "model.cyclegan.criterionGAN", "model.cyclegan.criterionGAN", "model.cyclegan.criterionGAN", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge", "tensorflow.summary.merge", "print", "module.abs_criterion", "module.abs_criterion", "tensorflow.ones_like", "tensorflow.ones_like", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.ones_like", "tensorflow.zeros_like"], "methods", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.to_binary", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.to_binary", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.to_binary", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.to_binary", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.to_binary", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.to_binary", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.discriminator", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.discriminator", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.discriminator", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.discriminator", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.discriminator", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.discriminator", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.merge", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.to_binary", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.to_binary", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.to_binary", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.to_binary", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.to_binary", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.ops.to_binary", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.discriminator", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.discriminator", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.discriminator", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.discriminator", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.merge", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.merge", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.abs_criterion", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.module.abs_criterion"], ["", "def", "_build_model", "(", "self", ")", ":", "\n", "\n", "# define some placeholders", "\n", "        ", "self", ".", "real_data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "time_step", ",", "self", ".", "pitch_range", ",", "\n", "self", ".", "input_c_dim", "+", "self", ".", "output_c_dim", "]", ",", "name", "=", "'real_A_and_B'", ")", "\n", "if", "self", ".", "model", "!=", "'base'", ":", "\n", "            ", "self", ".", "real_mixed", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "time_step", ",", "self", ".", "pitch_range", ",", "\n", "self", ".", "input_c_dim", "]", ",", "name", "=", "'real_A_and_B_mixed'", ")", "\n", "\n", "", "self", ".", "real_A", "=", "self", ".", "real_data", "[", ":", ",", ":", ",", ":", ",", ":", "self", ".", "input_c_dim", "]", "\n", "self", ".", "real_B", "=", "self", ".", "real_data", "[", ":", ",", ":", ",", ":", ",", "self", ".", "input_c_dim", ":", "self", ".", "input_c_dim", "+", "self", ".", "output_c_dim", "]", "\n", "\n", "self", ".", "gaussian_noise", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "time_step", ",", "self", ".", "pitch_range", ",", "\n", "self", ".", "input_c_dim", "]", ",", "name", "=", "'gaussian_noise'", ")", "\n", "# Generator: A - B - A", "\n", "self", ".", "fake_B", "=", "self", ".", "generator", "(", "self", ".", "real_A", ",", "self", ".", "options", ",", "False", ",", "name", "=", "\"generatorA2B\"", ")", "\n", "self", ".", "fake_A_", "=", "self", ".", "generator", "(", "self", ".", "fake_B", ",", "self", ".", "options", ",", "False", ",", "name", "=", "\"generatorB2A\"", ")", "\n", "# Generator: B - A - B", "\n", "self", ".", "fake_A", "=", "self", ".", "generator", "(", "self", ".", "real_B", ",", "self", ".", "options", ",", "True", ",", "name", "=", "\"generatorB2A\"", ")", "\n", "self", ".", "fake_B_", "=", "self", ".", "generator", "(", "self", ".", "fake_A", ",", "self", ".", "options", ",", "True", ",", "name", "=", "\"generatorA2B\"", ")", "\n", "# to binary", "\n", "self", ".", "real_A_binary", "=", "to_binary", "(", "self", ".", "real_A", ",", "0.5", ")", "\n", "self", ".", "real_B_binary", "=", "to_binary", "(", "self", ".", "real_B", ",", "0.5", ")", "\n", "self", ".", "fake_A_binary", "=", "to_binary", "(", "self", ".", "fake_A", ",", "0.5", ")", "\n", "self", ".", "fake_B_binary", "=", "to_binary", "(", "self", ".", "fake_B", ",", "0.5", ")", "\n", "self", ".", "fake_A__binary", "=", "to_binary", "(", "self", ".", "fake_A_", ",", "0.5", ")", "\n", "self", ".", "fake_B__binary", "=", "to_binary", "(", "self", ".", "fake_B_", ",", "0.5", ")", "\n", "\n", "# Discriminator: Fake", "\n", "self", ".", "DB_fake", "=", "self", ".", "discriminator", "(", "self", ".", "fake_B", "+", "self", ".", "gaussian_noise", ",", "self", ".", "options", ",", "\n", "reuse", "=", "False", ",", "name", "=", "\"discriminatorB\"", ")", "\n", "self", ".", "DA_fake", "=", "self", ".", "discriminator", "(", "self", ".", "fake_A", "+", "self", ".", "gaussian_noise", ",", "self", ".", "options", ",", "\n", "reuse", "=", "False", ",", "name", "=", "\"discriminatorA\"", ")", "\n", "# Discriminator: Real", "\n", "self", ".", "DA_real", "=", "self", ".", "discriminator", "(", "self", ".", "real_A", "+", "self", ".", "gaussian_noise", ",", "self", ".", "options", ",", "reuse", "=", "True", ",", "\n", "name", "=", "\"discriminatorA\"", ")", "\n", "self", ".", "DB_real", "=", "self", ".", "discriminator", "(", "self", ".", "real_B", "+", "self", ".", "gaussian_noise", ",", "self", ".", "options", ",", "reuse", "=", "True", ",", "\n", "name", "=", "\"discriminatorB\"", ")", "\n", "\n", "self", ".", "fake_A_sample", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "time_step", ",", "self", ".", "pitch_range", ",", "\n", "self", ".", "input_c_dim", "]", ",", "name", "=", "'fake_A_sample'", ")", "\n", "self", ".", "fake_B_sample", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "time_step", ",", "self", ".", "pitch_range", ",", "\n", "self", ".", "input_c_dim", "]", ",", "name", "=", "'fake_B_sample'", ")", "\n", "self", ".", "DA_fake_sample", "=", "self", ".", "discriminator", "(", "self", ".", "fake_A_sample", "+", "self", ".", "gaussian_noise", ",", "\n", "self", ".", "options", ",", "reuse", "=", "True", ",", "name", "=", "\"discriminatorA\"", ")", "\n", "self", ".", "DB_fake_sample", "=", "self", ".", "discriminator", "(", "self", ".", "fake_B_sample", "+", "self", ".", "gaussian_noise", ",", "\n", "self", ".", "options", ",", "reuse", "=", "True", ",", "name", "=", "\"discriminatorB\"", ")", "\n", "if", "self", ".", "model", "!=", "'base'", ":", "\n", "# Discriminator: All", "\n", "            ", "self", ".", "DA_real_all", "=", "self", ".", "discriminator", "(", "self", ".", "real_mixed", "+", "self", ".", "gaussian_noise", ",", "self", ".", "options", ",", "reuse", "=", "False", ",", "\n", "name", "=", "\"discriminatorA_all\"", ")", "\n", "self", ".", "DA_fake_sample_all", "=", "self", ".", "discriminator", "(", "self", ".", "fake_A_sample", "+", "self", ".", "gaussian_noise", ",", "\n", "self", ".", "options", ",", "reuse", "=", "True", ",", "name", "=", "\"discriminatorA_all\"", ")", "\n", "self", ".", "DB_real_all", "=", "self", ".", "discriminator", "(", "self", ".", "real_mixed", "+", "self", ".", "gaussian_noise", ",", "self", ".", "options", ",", "reuse", "=", "False", ",", "\n", "name", "=", "\"discriminatorB_all\"", ")", "\n", "self", ".", "DB_fake_sample_all", "=", "self", ".", "discriminator", "(", "self", ".", "fake_B_sample", "+", "self", ".", "gaussian_noise", ",", "\n", "self", ".", "options", ",", "reuse", "=", "True", ",", "name", "=", "\"discriminatorB_all\"", ")", "\n", "# Generator loss", "\n", "", "self", ".", "cycle_loss", "=", "self", ".", "L1_lambda", "*", "abs_criterion", "(", "self", ".", "real_A", ",", "self", ".", "fake_A_", ")", "+", "self", ".", "L1_lambda", "*", "abs_criterion", "(", "self", ".", "real_B", ",", "self", ".", "fake_B_", ")", "\n", "self", ".", "g_loss_a2b", "=", "self", ".", "criterionGAN", "(", "self", ".", "DB_fake", ",", "tf", ".", "ones_like", "(", "self", ".", "DB_fake", ")", ")", "+", "self", ".", "cycle_loss", "\n", "self", ".", "g_loss_b2a", "=", "self", ".", "criterionGAN", "(", "self", ".", "DA_fake", ",", "tf", ".", "ones_like", "(", "self", ".", "DA_fake", ")", ")", "+", "self", ".", "cycle_loss", "\n", "self", ".", "g_loss", "=", "self", ".", "g_loss_a2b", "+", "self", ".", "g_loss_b2a", "-", "self", ".", "cycle_loss", "\n", "# Discriminator loss", "\n", "self", ".", "db_loss_real", "=", "self", ".", "criterionGAN", "(", "self", ".", "DB_real", ",", "tf", ".", "ones_like", "(", "self", ".", "DB_real", ")", ")", "\n", "self", ".", "db_loss_fake", "=", "self", ".", "criterionGAN", "(", "self", ".", "DB_fake_sample", ",", "tf", ".", "zeros_like", "(", "self", ".", "DB_fake_sample", ")", ")", "\n", "self", ".", "db_loss", "=", "(", "self", ".", "db_loss_real", "+", "self", ".", "db_loss_fake", ")", "/", "2", "\n", "self", ".", "da_loss_real", "=", "self", ".", "criterionGAN", "(", "self", ".", "DA_real", ",", "tf", ".", "ones_like", "(", "self", ".", "DA_real", ")", ")", "\n", "self", ".", "da_loss_fake", "=", "self", ".", "criterionGAN", "(", "self", ".", "DA_fake_sample", ",", "tf", ".", "zeros_like", "(", "self", ".", "DA_fake_sample", ")", ")", "\n", "self", ".", "da_loss", "=", "(", "self", ".", "da_loss_real", "+", "self", ".", "da_loss_fake", ")", "/", "2", "\n", "self", ".", "d_loss", "=", "self", ".", "da_loss", "+", "self", ".", "db_loss", "\n", "\n", "if", "self", ".", "model", "!=", "'base'", ":", "\n", "            ", "self", ".", "db_all_loss_real", "=", "self", ".", "criterionGAN", "(", "self", ".", "DB_real_all", ",", "tf", ".", "ones_like", "(", "self", ".", "DB_real_all", ")", ")", "\n", "self", ".", "db_all_loss_fake", "=", "self", ".", "criterionGAN", "(", "self", ".", "DB_fake_sample_all", ",", "tf", ".", "zeros_like", "(", "self", ".", "DB_fake_sample_all", ")", ")", "\n", "self", ".", "db_all_loss", "=", "(", "self", ".", "db_all_loss_real", "+", "self", ".", "db_all_loss_fake", ")", "/", "2", "\n", "self", ".", "da_all_loss_real", "=", "self", ".", "criterionGAN", "(", "self", ".", "DA_real_all", ",", "tf", ".", "ones_like", "(", "self", ".", "DA_real_all", ")", ")", "\n", "self", ".", "da_all_loss_fake", "=", "self", ".", "criterionGAN", "(", "self", ".", "DA_fake_sample_all", ",", "tf", ".", "zeros_like", "(", "self", ".", "DA_fake_sample_all", ")", ")", "\n", "self", ".", "da_all_loss", "=", "(", "self", ".", "da_all_loss_real", "+", "self", ".", "da_all_loss_fake", ")", "/", "2", "\n", "self", ".", "d_all_loss", "=", "self", ".", "da_all_loss", "+", "self", ".", "db_all_loss", "\n", "self", ".", "D_loss", "=", "self", ".", "d_loss", "+", "self", ".", "gamma", "*", "self", ".", "d_all_loss", "\n", "\n", "# Define all summaries", "\n", "", "self", ".", "g_loss_a2b_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "\"g_loss_a2b\"", ",", "self", ".", "g_loss_a2b", ")", "\n", "self", ".", "g_loss_b2a_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "\"g_loss_b2a\"", ",", "self", ".", "g_loss_b2a", ")", "\n", "self", ".", "g_loss_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "\"g_loss\"", ",", "self", ".", "g_loss", ")", "\n", "self", ".", "cycle_loss_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "\"cycle_loss\"", ",", "self", ".", "cycle_loss", ")", "\n", "self", ".", "g_sum", "=", "tf", ".", "summary", ".", "merge", "(", "[", "self", ".", "g_loss_a2b_sum", ",", "self", ".", "g_loss_b2a_sum", ",", "self", ".", "g_loss_sum", ",", "self", ".", "cycle_loss_sum", "]", ")", "\n", "self", ".", "db_loss_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "\"db_loss\"", ",", "self", ".", "db_loss", ")", "\n", "self", ".", "da_loss_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "\"da_loss\"", ",", "self", ".", "da_loss", ")", "\n", "self", ".", "d_loss_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "\"d_loss\"", ",", "self", ".", "d_loss", ")", "\n", "self", ".", "db_loss_real_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "\"db_loss_real\"", ",", "self", ".", "db_loss_real", ")", "\n", "self", ".", "db_loss_fake_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "\"db_loss_fake\"", ",", "self", ".", "db_loss_fake", ")", "\n", "self", ".", "da_loss_real_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "\"da_loss_real\"", ",", "self", ".", "da_loss_real", ")", "\n", "self", ".", "da_loss_fake_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "\"da_loss_fake\"", ",", "self", ".", "da_loss_fake", ")", "\n", "if", "self", ".", "model", "!=", "'base'", ":", "\n", "            ", "self", ".", "d_all_loss_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "\"d_all_loss\"", ",", "self", ".", "d_all_loss", ")", "\n", "self", ".", "D_loss_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "\"D_loss\"", ",", "self", ".", "d_loss", ")", "\n", "self", ".", "d_sum", "=", "tf", ".", "summary", ".", "merge", "(", "[", "self", ".", "da_loss_sum", ",", "self", ".", "da_loss_real_sum", ",", "self", ".", "da_loss_fake_sum", ",", "\n", "self", ".", "db_loss_sum", ",", "self", ".", "db_loss_real_sum", ",", "self", ".", "db_loss_fake_sum", ",", "\n", "self", ".", "d_loss_sum", ",", "self", ".", "d_all_loss_sum", ",", "self", ".", "D_loss_sum", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "d_sum", "=", "tf", ".", "summary", ".", "merge", "(", "[", "self", ".", "da_loss_sum", ",", "self", ".", "da_loss_real_sum", ",", "self", ".", "da_loss_fake_sum", ",", "\n", "self", ".", "db_loss_sum", ",", "self", ".", "db_loss_real_sum", ",", "self", ".", "db_loss_fake_sum", ",", "\n", "self", ".", "d_loss_sum", "]", ")", "\n", "\n", "# Test", "\n", "", "self", ".", "test_A", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "time_step", ",", "self", ".", "pitch_range", ",", "\n", "self", ".", "input_c_dim", "]", ",", "name", "=", "'test_A'", ")", "\n", "self", ".", "test_B", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "time_step", ",", "self", ".", "pitch_range", ",", "\n", "self", ".", "output_c_dim", "]", ",", "name", "=", "'test_B'", ")", "\n", "# A - B - A", "\n", "self", ".", "testB", "=", "self", ".", "generator", "(", "self", ".", "test_A", ",", "self", ".", "options", ",", "True", ",", "name", "=", "\"generatorA2B\"", ")", "\n", "self", ".", "testA_", "=", "self", ".", "generator", "(", "self", ".", "testB", ",", "self", ".", "options", ",", "True", ",", "name", "=", "'generatorB2A'", ")", "\n", "# B - A - B", "\n", "self", ".", "testA", "=", "self", ".", "generator", "(", "self", ".", "test_B", ",", "self", ".", "options", ",", "True", ",", "name", "=", "\"generatorB2A\"", ")", "\n", "self", ".", "testB_", "=", "self", ".", "generator", "(", "self", ".", "testA", ",", "self", ".", "options", ",", "True", ",", "name", "=", "'generatorA2B'", ")", "\n", "# to binary", "\n", "self", ".", "test_A_binary", "=", "to_binary", "(", "self", ".", "test_A", ",", "0.5", ")", "\n", "self", ".", "test_B_binary", "=", "to_binary", "(", "self", ".", "test_B", ",", "0.5", ")", "\n", "self", ".", "testA_binary", "=", "to_binary", "(", "self", ".", "testA", ",", "0.5", ")", "\n", "self", ".", "testB_binary", "=", "to_binary", "(", "self", ".", "testB", ",", "0.5", ")", "\n", "self", ".", "testA__binary", "=", "to_binary", "(", "self", ".", "testA_", ",", "0.5", ")", "\n", "self", ".", "testB__binary", "=", "to_binary", "(", "self", ".", "testB_", ",", "0.5", ")", "\n", "\n", "t_vars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "self", ".", "d_vars", "=", "[", "var", "for", "var", "in", "t_vars", "if", "'discriminator'", "in", "var", ".", "name", "]", "\n", "self", ".", "g_vars", "=", "[", "var", "for", "var", "in", "t_vars", "if", "'generator'", "in", "var", ".", "name", "]", "\n", "for", "var", "in", "t_vars", ":", "\n", "            ", "print", "(", "var", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.train": [[188, 323], ["tensorflow.placeholder", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.global_variables_initializer", "model.cyclegan.sess.run", "tensorflow.summary.FileWriter", "glob.glob.glob", "glob.glob.glob", "time.time", "range", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer().minimize", "glob.glob.glob", "model.cyclegan.load", "numpy.random.shuffle", "numpy.random.shuffle", "range", "tensorflow.train.AdamOptimizer", "print", "print", "numpy.random.shuffle", "min", "list", "numpy.array().astype", "numpy.abs", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "min", "zip", "utils.load_npy_data", "numpy.random.normal", "model.cyclegan.sess.run", "model.cyclegan.sess.run", "print", "print", "print", "numpy.array().astype", "model.cyclegan.sess.run", "model.cyclegan.writer.add_summary", "model.cyclegan.pool", "model.cyclegan.sess.run", "model.cyclegan.writer.add_summary", "print", "print", "print", "numpy.mod", "os.path.join", "model.cyclegan.sample_model", "numpy.mod", "model.cyclegan.save", "len", "len", "numpy.array", "os.path.exists", "os.makedirs", "numpy.load", "numpy.array", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.load", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.load_npy_data", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.sample_model", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.save", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.load"], ["", "", "def", "train", "(", "self", ",", "args", ")", ":", "\n", "\n", "# Learning rate", "\n", "        ", "self", ".", "lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "None", ",", "name", "=", "'learning_rate'", ")", "\n", "\n", "# Discriminator and Generator Optimizer", "\n", "if", "self", ".", "model", "==", "'base'", ":", "\n", "            ", "self", ".", "d_optim", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ",", "beta1", "=", "args", ".", "beta1", ")", ".", "minimize", "(", "self", ".", "d_loss", ",", "var_list", "=", "self", ".", "d_vars", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "d_optim", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ",", "beta1", "=", "args", ".", "beta1", ")", ".", "minimize", "(", "self", ".", "D_loss", ",", "var_list", "=", "self", ".", "d_vars", ")", "\n", "", "self", ".", "g_optim", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ",", "beta1", "=", "args", ".", "beta1", ")", ".", "minimize", "(", "self", ".", "g_loss", ",", "var_list", "=", "self", ".", "g_vars", ")", "\n", "\n", "init_op", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init_op", ")", "\n", "\n", "# define the path which stores the log file, format is \"{A}2{B}_{date}_{model}_{sigma}\".", "\n", "log_dir", "=", "'./logs/{}2{}_{}_{}_{}'", ".", "format", "(", "self", ".", "dataset_A_dir", ",", "self", ".", "dataset_B_dir", ",", "self", ".", "now_datetime", ",", "\n", "self", ".", "model", ",", "self", ".", "sigma_d", ")", "\n", "# log_dir = './logs/{}2{}_{}_{}_{}'.format(self.dataset_A_dir, self.dataset_B_dir, '2018-06-10',", "\n", "#                                          self.model, self.sigma_d)", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", ",", "self", ".", "sess", ".", "graph", ")", "\n", "\n", "# Data from domain A and B, and mixed dataset for partial and full models.", "\n", "dataA", "=", "glob", "(", "'./datasets/{}/train/*.*'", ".", "format", "(", "self", ".", "dataset_A_dir", ")", ")", "\n", "dataB", "=", "glob", "(", "'./datasets/{}/train/*.*'", ".", "format", "(", "self", ".", "dataset_B_dir", ")", ")", "\n", "if", "self", ".", "model", "==", "'partial'", ":", "\n", "            ", "data_mixed", "=", "dataA", "+", "dataB", "\n", "", "if", "self", ".", "model", "==", "'full'", ":", "\n", "            ", "data_mixed", "=", "glob", "(", "'./datasets/JCP_mixed/*.*'", ")", "\n", "\n", "", "counter", "=", "1", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "args", ".", "continue_train", ":", "\n", "            ", "if", "self", ".", "load", "(", "args", ".", "checkpoint_dir", ")", ":", "\n", "                ", "print", "(", "\" [*] Load SUCCESS\"", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\" [!] Load failed...\"", ")", "\n", "\n", "", "", "for", "epoch", "in", "range", "(", "args", ".", "epoch", ")", ":", "\n", "\n", "# Shuffle training data", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "dataA", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "dataB", ")", "\n", "if", "self", ".", "model", "!=", "'base'", ":", "np", ".", "random", ".", "shuffle", "(", "data_mixed", ")", "\n", "\n", "# Get the proper number of batches", "\n", "batch_idxs", "=", "min", "(", "min", "(", "len", "(", "dataA", ")", ",", "len", "(", "dataB", ")", ")", ",", "args", ".", "train_size", ")", "//", "self", ".", "batch_size", "\n", "\n", "# learning rate starts to decay when reaching the threshold", "\n", "lr", "=", "args", ".", "lr", "if", "epoch", "<", "args", ".", "epoch_step", "else", "args", ".", "lr", "*", "(", "args", ".", "epoch", "-", "epoch", ")", "/", "(", "args", ".", "epoch", "-", "args", ".", "epoch_step", ")", "\n", "\n", "for", "idx", "in", "range", "(", "0", ",", "batch_idxs", ")", ":", "\n", "\n", "# To feed real_data", "\n", "                ", "batch_files", "=", "list", "(", "zip", "(", "dataA", "[", "idx", "*", "self", ".", "batch_size", ":", "(", "idx", "+", "1", ")", "*", "self", ".", "batch_size", "]", ",", "\n", "dataB", "[", "idx", "*", "self", ".", "batch_size", ":", "(", "idx", "+", "1", ")", "*", "self", ".", "batch_size", "]", ")", ")", "\n", "batch_images", "=", "[", "load_npy_data", "(", "batch_file", ")", "for", "batch_file", "in", "batch_files", "]", "\n", "batch_images", "=", "np", ".", "array", "(", "batch_images", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# To feed gaussian noise", "\n", "gaussian_noise", "=", "np", ".", "abs", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "self", ".", "sigma_d", ",", "[", "self", ".", "batch_size", ",", "self", ".", "time_step", ",", "\n", "self", ".", "pitch_range", ",", "self", ".", "input_c_dim", "]", ")", ")", "\n", "\n", "if", "self", ".", "model", "==", "'base'", ":", "\n", "\n", "# Update G network and record fake outputs", "\n", "                    ", "fake_A", ",", "fake_B", ",", "_", ",", "summary_str", ",", "g_loss_a2b", ",", "g_loss_b2a", ",", "cycle_loss", ",", "g_loss", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "fake_A", ",", "\n", "self", ".", "fake_B", ",", "self", ".", "g_optim", ",", "self", ".", "g_sum", ",", "self", ".", "g_loss_a2b", ",", "self", ".", "g_loss_b2a", ",", "self", ".", "cycle_loss", ",", "\n", "self", ".", "g_loss", "]", ",", "feed_dict", "=", "{", "self", ".", "real_data", ":", "batch_images", ",", "self", ".", "gaussian_noise", ":", "gaussian_noise", ",", "\n", "self", ".", "lr", ":", "lr", "}", ")", "\n", "\n", "# Update D network", "\n", "_", ",", "summary_str", ",", "da_loss", ",", "db_loss", ",", "d_loss", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "d_optim", ",", "self", ".", "d_sum", ",", "self", ".", "da_loss", ",", "self", ".", "db_loss", ",", "self", ".", "d_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "real_data", ":", "batch_images", ",", "self", ".", "fake_A_sample", ":", "fake_A", ",", "self", ".", "fake_B_sample", ":", "fake_B", ",", "\n", "self", ".", "lr", ":", "lr", ",", "self", ".", "gaussian_noise", ":", "gaussian_noise", "}", ")", "\n", "\n", "print", "(", "'================================================================='", ")", "\n", "print", "(", "(", "\"Epoch: [%2d] [%4d/%4d] time: %4.4f, d_loss: %6.2f, G_loss: %6.2f\"", "%", "\n", "(", "epoch", ",", "idx", ",", "batch_idxs", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "d_loss", ",", "g_loss", ")", ")", ")", "\n", "print", "(", "(", "\"++++++++++G_loss_A2B: %6.2f G_loss_B2A: %6.2f Cycle_loss: %6.2f DA_loss: %6.2f DB_loss: %6.2f\"", "%", "\n", "(", "g_loss_a2b", ",", "g_loss_b2a", ",", "cycle_loss", ",", "da_loss", ",", "db_loss", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "\n", "# To feed real_mixed", "\n", "                    ", "batch_files_mixed", "=", "data_mixed", "[", "idx", "*", "self", ".", "batch_size", ":", "(", "idx", "+", "1", ")", "*", "self", ".", "batch_size", "]", "\n", "batch_images_mixed", "=", "[", "np", ".", "load", "(", "batch_file", ")", "*", "1.", "for", "batch_file", "in", "batch_files_mixed", "]", "\n", "batch_images_mixed", "=", "np", ".", "array", "(", "batch_images_mixed", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Update G network and record fake outputs", "\n", "fake_A", ",", "fake_B", ",", "_", ",", "summary_str", ",", "g_loss_a2b", ",", "g_loss_b2a", ",", "cycle_loss", ",", "g_loss", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "fake_A", ",", "self", ".", "fake_B", ",", "self", ".", "g_optim", ",", "self", ".", "g_sum", ",", "self", ".", "g_loss_a2b", ",", "self", ".", "g_loss_b2a", ",", "\n", "self", ".", "cycle_loss", ",", "self", ".", "g_loss", "]", ",", "feed_dict", "=", "{", "self", ".", "real_data", ":", "batch_images", ",", "\n", "self", ".", "gaussian_noise", ":", "gaussian_noise", ",", "self", ".", "lr", ":", "lr", ",", "\n", "self", ".", "real_mixed", ":", "batch_images_mixed", "}", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary_str", ",", "counter", ")", "\n", "[", "fake_A", ",", "fake_B", "]", "=", "self", ".", "pool", "(", "[", "fake_A", ",", "fake_B", "]", ")", "\n", "\n", "# Update D network", "\n", "_", ",", "summary_str", ",", "da_loss", ",", "db_loss", ",", "d_loss", ",", "da_all_loss", ",", "db_all_loss", ",", "d_all_loss", ",", "D_loss", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "d_optim", ",", "self", ".", "d_sum", ",", "self", ".", "da_loss", ",", "self", ".", "db_loss", ",", "self", ".", "d_loss", ",", "self", ".", "da_all_loss", ",", "\n", "self", ".", "db_all_loss", ",", "self", ".", "d_all_loss", ",", "self", ".", "D_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "real_data", ":", "batch_images", ",", "self", ".", "fake_A_sample", ":", "fake_A", ",", "self", ".", "fake_B_sample", ":", "fake_B", ",", "\n", "self", ".", "lr", ":", "lr", ",", "self", ".", "gaussian_noise", ":", "gaussian_noise", ",", "self", ".", "real_mixed", ":", "batch_images_mixed", "}", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary_str", ",", "counter", ")", "\n", "\n", "print", "(", "'================================================================='", ")", "\n", "print", "(", "(", "\"Epoch: [%2d] [%4d/%4d] time: %4.4f D_loss: %6.2f, d_loss: %6.2f, d_all_loss: %6.2f, \"", "\n", "\"G_loss: %6.2f\"", "%", "\n", "(", "epoch", ",", "idx", ",", "batch_idxs", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "D_loss", ",", "d_loss", ",", "d_all_loss", ",", "g_loss", ")", ")", ")", "\n", "print", "(", "(", "\"++++++++++G_loss_A2B: %6.2f G_loss_B2A: %6.2f Cycle_loss: %6.2f DA_loss: %6.2f DB_loss: %6.2f, \"", "\n", "\"DA_all_loss: %6.2f DB_all_loss: %6.2f\"", "%", "\n", "(", "g_loss_a2b", ",", "g_loss_b2a", ",", "cycle_loss", ",", "da_loss", ",", "db_loss", ",", "da_all_loss", ",", "db_all_loss", ")", ")", ")", "\n", "\n", "", "counter", "+=", "1", "\n", "\n", "if", "np", ".", "mod", "(", "counter", ",", "args", ".", "print_freq", ")", "==", "1", ":", "\n", "                    ", "sample_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "sample_dir", ",", "'{}2{}_{}_{}_{}'", ".", "format", "(", "self", ".", "dataset_A_dir", ",", "\n", "self", ".", "dataset_B_dir", ",", "\n", "self", ".", "now_datetime", ",", "\n", "self", ".", "model", ",", "\n", "self", ".", "sigma_d", ")", ")", "\n", "# sample_dir = os.path.join(self.sample_dir, '{}2{}_{}_{}_{}'.format(self.dataset_A_dir,", "\n", "#                                                                    self.dataset_B_dir,", "\n", "#                                                                    '2018-06-10',", "\n", "#                                                                    self.model,", "\n", "#                                                                    self.sigma_d))", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "sample_dir", ")", ":", "\n", "                        ", "os", ".", "makedirs", "(", "sample_dir", ")", "\n", "", "self", ".", "sample_model", "(", "sample_dir", ",", "epoch", ",", "idx", ")", "\n", "\n", "", "if", "np", ".", "mod", "(", "counter", ",", "batch_idxs", ")", "==", "1", ":", "\n", "                    ", "self", ".", "save", "(", "args", ".", "checkpoint_dir", ",", "counter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.save": [[324, 336], ["os.path.join", "model.cyclegan.saver.save", "os.path.exists", "os.makedirs", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.save"], ["", "", "", "", "def", "save", "(", "self", ",", "checkpoint_dir", ",", "step", ")", ":", "\n", "        ", "model_name", "=", "\"cyclegan.model\"", "\n", "model_dir", "=", "\"{}2{}_{}_{}_{}\"", ".", "format", "(", "self", ".", "dataset_A_dir", ",", "self", ".", "dataset_B_dir", ",", "self", ".", "now_datetime", ",", "self", ".", "model", ",", "\n", "self", ".", "sigma_d", ")", "\n", "# model_dir = \"{}2{}_{}_{}_{}\".format(self.dataset_A_dir, self.dataset_B_dir, '2018-06-14', self.model,", "\n", "#                                     self.sigma_d)", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_dir", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "\n", "", "self", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_name", ")", ",", "global_step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.load": [[337, 354], ["print", "os.path.join", "tensorflow.train.get_checkpoint_state", "os.path.basename", "model.cyclegan.saver.restore", "os.path.join"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "checkpoint_dir", ")", ":", "\n", "        ", "print", "(", "\" [*] Reading checkpoint...\"", ")", "\n", "\n", "model_dir", "=", "\"{}2{}_{}_{}_{}\"", ".", "format", "(", "self", ".", "dataset_A_dir", ",", "self", ".", "dataset_B_dir", ",", "self", ".", "now_datetime", ",", "self", ".", "model", ",", "\n", "self", ".", "sigma_d", ")", "\n", "# model_dir = \"{}2{}_{}_{}_{}\".format(self.dataset_A_dir, self.dataset_B_dir, '2018-06-14', self.model,", "\n", "#                                     self.sigma_d)", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_dir", ")", "\n", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "checkpoint_dir", ")", "\n", "if", "ckpt", "and", "ckpt", ".", "model_checkpoint_path", ":", "\n", "            ", "ckpt_name", "=", "os", ".", "path", ".", "basename", "(", "ckpt", ".", "model_checkpoint_path", ")", "\n", "self", ".", "saver", ".", "restore", "(", "self", ".", "sess", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "ckpt_name", ")", ")", "\n", "# self.saver.restore(self.sess, os.path.join(checkpoint_dir, 'cyclegan.model-7011'))", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.sample_model": [[355, 387], ["print", "glob.glob.glob", "glob.glob.glob", "glob.glob.glob.sort", "glob.glob.glob.sort", "list", "numpy.array().astype", "model.cyclegan.sess.run", "model.cyclegan.sess.run", "utils.save_midis", "utils.save_midis", "utils.save_midis", "utils.save_midis", "utils.save_midis", "utils.save_midis", "zip", "utils.load_npy_data", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "numpy.array", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "int", "int", "[].split", "[].split", "os.path.splitext", "os.path.splitext", "os.path.basename", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.save_midis", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.save_midis", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.save_midis", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.save_midis", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.save_midis", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.save_midis", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.load_npy_data"], ["", "", "def", "sample_model", "(", "self", ",", "sample_dir", ",", "epoch", ",", "idx", ")", ":", "\n", "\n", "        ", "print", "(", "'Processing sample......'", ")", "\n", "\n", "# Testing data from 2 domains A and B and sorted in ascending order", "\n", "dataA", "=", "glob", "(", "'./datasets/{}/train/*.*'", ".", "format", "(", "self", ".", "dataset_A_dir", ")", ")", "\n", "dataB", "=", "glob", "(", "'./datasets/{}/train/*.*'", ".", "format", "(", "self", ".", "dataset_B_dir", ")", ")", "\n", "dataA", ".", "sort", "(", "key", "=", "lambda", "x", ":", "int", "(", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "x", ")", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", ")", "\n", "dataB", ".", "sort", "(", "key", "=", "lambda", "x", ":", "int", "(", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "x", ")", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", ")", "\n", "\n", "batch_files", "=", "list", "(", "zip", "(", "dataA", "[", ":", "self", ".", "batch_size", "]", ",", "dataB", "[", ":", "self", ".", "batch_size", "]", ")", ")", "\n", "sample_images", "=", "[", "load_npy_data", "(", "batch_file", ")", "for", "batch_file", "in", "batch_files", "]", "\n", "sample_images", "=", "np", ".", "array", "(", "sample_images", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "real_A_binary", ",", "fake_A_binary", ",", "fake_B_binary", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "real_A_binary", ",", "self", ".", "fake_A_binary", ",", "\n", "self", ".", "fake_B_binary", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "real_data", ":", "sample_images", "}", ")", "\n", "real_B_binary", ",", "fake_A__binary", ",", "fake_B__binary", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "real_B_binary", ",", "self", ".", "fake_A__binary", ",", "\n", "self", ".", "fake_B__binary", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "real_data", ":", "sample_images", "}", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "sample_dir", ",", "'B2A'", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "sample_dir", ",", "'B2A'", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "sample_dir", ",", "'A2B'", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "sample_dir", ",", "'A2B'", ")", ")", "\n", "\n", "", "save_midis", "(", "real_A_binary", ",", "'./{}/A2B/{:02d}_{:04d}_origin.mid'", ".", "format", "(", "sample_dir", ",", "epoch", ",", "idx", ")", ")", "\n", "save_midis", "(", "fake_B_binary", ",", "'./{}/A2B/{:02d}_{:04d}_transfer.mid'", ".", "format", "(", "sample_dir", ",", "epoch", ",", "idx", ")", ")", "\n", "save_midis", "(", "fake_A__binary", ",", "'./{}/A2B/{:02d}_{:04d}_cycle.mid'", ".", "format", "(", "sample_dir", ",", "epoch", ",", "idx", ")", ")", "\n", "save_midis", "(", "real_B_binary", ",", "'./{}/B2A/{:02d}_{:04d}_origin.mid'", ".", "format", "(", "sample_dir", ",", "epoch", ",", "idx", ")", ")", "\n", "save_midis", "(", "fake_A_binary", ",", "'./{}/B2A/{:02d}_{:04d}_transfer.mid'", ".", "format", "(", "sample_dir", ",", "epoch", ",", "idx", ")", ")", "\n", "save_midis", "(", "fake_B__binary", ",", "'./{}/B2A/{:02d}_{:04d}_cycle.mid'", ".", "format", "(", "sample_dir", ",", "epoch", ",", "idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.test": [[388, 454], ["tensorflow.global_variables_initializer", "model.cyclegan.sess.run", "glob.glob.glob.sort", "model.cyclegan.load", "os.path.join", "os.path.join", "range", "glob.glob.glob", "print", "print", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "len", "print", "sample_npy.reshape", "os.path.join", "os.path.join", "os.path.join", "model.cyclegan.sess.run", "utils.save_midis", "utils.save_midis", "utils.save_midis", "os.path.join", "os.path.join", "os.path.join", "numpy.save", "numpy.save", "numpy.save", "glob.glob.glob", "Exception", "numpy.load", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "int", "[].split", "os.path.splitext", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.load", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.save_midis", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.save_midis", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.save_midis", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.save", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.save", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.save", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.load"], ["", "def", "test", "(", "self", ",", "args", ")", ":", "\n", "        ", "init_op", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init_op", ")", "\n", "if", "args", ".", "which_direction", "==", "'AtoB'", ":", "\n", "            ", "sample_files", "=", "glob", "(", "'./datasets/{}/test/*.*'", ".", "format", "(", "self", ".", "dataset_A_dir", ")", ")", "\n", "", "elif", "args", ".", "which_direction", "==", "'BtoA'", ":", "\n", "            ", "sample_files", "=", "glob", "(", "'./datasets/{}/test/*.*'", ".", "format", "(", "self", ".", "dataset_B_dir", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'--which_direction must be AtoB or BtoA'", ")", "\n", "", "sample_files", ".", "sort", "(", "key", "=", "lambda", "x", ":", "int", "(", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "x", ")", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", ")", "\n", "\n", "if", "self", ".", "load", "(", "args", ".", "checkpoint_dir", ")", ":", "\n", "            ", "print", "(", "\" [*] Load SUCCESS\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\" [!] Load failed...\"", ")", "\n", "\n", "", "if", "args", ".", "which_direction", "==", "'AtoB'", ":", "\n", "            ", "out_origin", ",", "out_var", ",", "out_var_cycle", ",", "in_var", "=", "(", "self", ".", "test_A_binary", ",", "self", ".", "testB_binary", ",", "self", ".", "testA__binary", ",", "\n", "self", ".", "test_A", ")", "\n", "", "else", ":", "\n", "            ", "out_origin", ",", "out_var", ",", "out_var_cycle", ",", "in_var", "=", "(", "self", ".", "test_B_binary", ",", "self", ".", "testA_binary", ",", "self", ".", "testB__binary", ",", "\n", "self", ".", "test_B", ")", "\n", "\n", "", "test_dir_mid", "=", "os", ".", "path", ".", "join", "(", "args", ".", "test_dir", ",", "'{}2{}_{}_{}_{}/{}/mid'", ".", "format", "(", "self", ".", "dataset_A_dir", ",", "\n", "self", ".", "dataset_B_dir", ",", "\n", "self", ".", "now_datetime", ",", "\n", "self", ".", "model", ",", "\n", "self", ".", "sigma_d", ",", "\n", "args", ".", "which_direction", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "test_dir_mid", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "test_dir_mid", ")", "\n", "\n", "", "test_dir_npy", "=", "os", ".", "path", ".", "join", "(", "args", ".", "test_dir", ",", "'{}2{}_{}_{}_{}/{}/npy'", ".", "format", "(", "self", ".", "dataset_A_dir", ",", "\n", "self", ".", "dataset_B_dir", ",", "\n", "self", ".", "now_datetime", ",", "\n", "self", ".", "model", ",", "\n", "self", ".", "sigma_d", ",", "\n", "args", ".", "which_direction", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "test_dir_npy", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "test_dir_npy", ")", "\n", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "sample_files", ")", ")", ":", "\n", "            ", "print", "(", "'Processing midi: '", ",", "sample_files", "[", "idx", "]", ")", "\n", "sample_npy", "=", "np", ".", "load", "(", "sample_files", "[", "idx", "]", ")", "*", "1.", "\n", "sample_npy_re", "=", "sample_npy", ".", "reshape", "(", "1", ",", "sample_npy", ".", "shape", "[", "0", "]", ",", "sample_npy", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "midi_path_origin", "=", "os", ".", "path", ".", "join", "(", "test_dir_mid", ",", "'{}_origin.mid'", ".", "format", "(", "idx", "+", "1", ")", ")", "\n", "midi_path_transfer", "=", "os", ".", "path", ".", "join", "(", "test_dir_mid", ",", "'{}_transfer.mid'", ".", "format", "(", "idx", "+", "1", ")", ")", "\n", "midi_path_cycle", "=", "os", ".", "path", ".", "join", "(", "test_dir_mid", ",", "'{}_cycle.mid'", ".", "format", "(", "idx", "+", "1", ")", ")", "\n", "origin_midi", ",", "fake_midi", ",", "fake_midi_cycle", "=", "self", ".", "sess", ".", "run", "(", "[", "out_origin", ",", "out_var", ",", "out_var_cycle", "]", ",", "\n", "feed_dict", "=", "{", "in_var", ":", "sample_npy_re", "}", ")", "\n", "save_midis", "(", "origin_midi", ",", "midi_path_origin", ")", "\n", "save_midis", "(", "fake_midi", ",", "midi_path_transfer", ")", "\n", "save_midis", "(", "fake_midi_cycle", ",", "midi_path_cycle", ")", "\n", "\n", "npy_path_origin", "=", "os", ".", "path", ".", "join", "(", "test_dir_npy", ",", "'origin'", ")", "\n", "npy_path_transfer", "=", "os", ".", "path", ".", "join", "(", "test_dir_npy", ",", "'transfer'", ")", "\n", "npy_path_cycle", "=", "os", ".", "path", ".", "join", "(", "test_dir_npy", ",", "'cycle'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "npy_path_origin", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "npy_path_origin", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "npy_path_transfer", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "npy_path_transfer", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "npy_path_cycle", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "npy_path_cycle", ")", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "npy_path_origin", ",", "'{}_origin.npy'", ".", "format", "(", "idx", "+", "1", ")", ")", ",", "origin_midi", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "npy_path_transfer", ",", "'{}_transfer.npy'", ".", "format", "(", "idx", "+", "1", ")", ")", ",", "fake_midi", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "npy_path_cycle", ",", "'{}_cycle.npy'", ".", "format", "(", "idx", "+", "1", ")", ")", ",", "fake_midi_cycle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.test_famous": [[455, 473], ["tensorflow.global_variables_initializer", "model.cyclegan.sess.run", "numpy.load", "print", "model.cyclegan.load", "model.cyclegan.sess.run", "utils.save_midis", "numpy.save", "print", "print"], "methods", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.load", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.load", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.save_midis", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.save"], ["", "", "def", "test_famous", "(", "self", ",", "args", ")", ":", "\n", "        ", "init_op", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init_op", ")", "\n", "song", "=", "np", ".", "load", "(", "'./datasets/famous_songs/P2C/merged_npy/YMCA.npy'", ")", "\n", "print", "(", "song", ".", "shape", ")", "\n", "if", "self", ".", "load", "(", "args", ".", "checkpoint_dir", ")", ":", "\n", "            ", "print", "(", "\" [*] Load SUCCESS\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\" [!] Load failed...\"", ")", "\n", "\n", "", "if", "args", ".", "which_direction", "==", "'AtoB'", ":", "\n", "            ", "out_var", ",", "in_var", "=", "(", "self", ".", "testB_binary", ",", "self", ".", "test_A", ")", "\n", "", "else", ":", "\n", "            ", "out_var", ",", "in_var", "=", "(", "self", ".", "testA_binary", ",", "self", ".", "test_B", ")", "\n", "\n", "", "transfer", "=", "self", ".", "sess", ".", "run", "(", "out_var", ",", "feed_dict", "=", "{", "in_var", ":", "song", "*", "1.", "}", ")", "\n", "save_midis", "(", "transfer", ",", "'./datasets/famous_songs/P2C/transfer/YMCA.mid'", ",", "127", ")", "\n", "np", ".", "save", "(", "'./datasets/famous_songs/P2C/transfer/YMCA.npy'", ",", "transfer", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.ImagePool.__init__": [[30, 34], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "maxsize", "=", "50", ")", ":", "\n", "        ", "self", ".", "maxsize", "=", "maxsize", "\n", "self", ".", "num_img", "=", "0", "\n", "self", ".", "images", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.ImagePool.__call__": [[35, 52], ["utils.ImagePool.images.append", "numpy.random.rand", "int", "int", "copy.copy", "copy.copy", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "self", ".", "maxsize", "<=", "0", ":", "\n", "            ", "return", "image", "\n", "", "if", "self", ".", "num_img", "<", "self", ".", "maxsize", ":", "\n", "            ", "self", ".", "images", ".", "append", "(", "image", ")", "\n", "self", ".", "num_img", "+=", "1", "\n", "return", "image", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "0.5", ":", "\n", "            ", "idx", "=", "int", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "self", ".", "maxsize", ")", "\n", "tmp1", "=", "copy", ".", "copy", "(", "self", ".", "images", "[", "idx", "]", ")", "[", "0", "]", "\n", "self", ".", "images", "[", "idx", "]", "[", "0", "]", "=", "image", "[", "0", "]", "\n", "idx", "=", "int", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "self", ".", "maxsize", ")", "\n", "tmp2", "=", "copy", ".", "copy", "(", "self", ".", "images", "[", "idx", "]", ")", "[", "1", "]", "\n", "self", ".", "images", "[", "idx", "]", "[", "1", "]", "=", "image", "[", "1", "]", "\n", "return", "[", "tmp1", ",", "tmp2", "]", "\n", "", "else", ":", "\n", "            ", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.load_test_data": [[54, 59], ["utils.imread", "scipy.misc.imresize"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.imread"], ["", "", "", "def", "load_test_data", "(", "image_path", ",", "fine_size", "=", "256", ")", ":", "\n", "    ", "img", "=", "imread", "(", "image_path", ")", "\n", "img", "=", "scipy", ".", "misc", ".", "imresize", "(", "img", ",", "[", "fine_size", ",", "fine_size", "]", ")", "\n", "img", "=", "img", "/", "127.5", "-", "1", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.load_train_data": [[61, 85], ["utils.imread", "utils.imread", "numpy.concatenate", "scipy.misc.imresize", "scipy.misc.imresize", "int", "int", "scipy.misc.imresize", "scipy.misc.imresize", "numpy.ceil", "numpy.ceil", "numpy.random.random", "numpy.fliplr", "numpy.fliplr", "numpy.random.uniform", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.imread", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.imread"], ["", "def", "load_train_data", "(", "image_path", ",", "load_size", "=", "286", ",", "fine_size", "=", "256", ",", "is_testing", "=", "False", ")", ":", "\n", "    ", "img_A", "=", "imread", "(", "image_path", "[", "0", "]", ")", "\n", "img_B", "=", "imread", "(", "image_path", "[", "1", "]", ")", "\n", "if", "not", "is_testing", ":", "\n", "        ", "img_A", "=", "scipy", ".", "misc", ".", "imresize", "(", "img_A", ",", "[", "load_size", ",", "load_size", "]", ")", "\n", "img_B", "=", "scipy", ".", "misc", ".", "imresize", "(", "img_B", ",", "[", "load_size", ",", "load_size", "]", ")", "\n", "h1", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "random", ".", "uniform", "(", "1e-2", ",", "load_size", "-", "fine_size", ")", ")", ")", "\n", "w1", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "random", ".", "uniform", "(", "1e-2", ",", "load_size", "-", "fine_size", ")", ")", ")", "\n", "img_A", "=", "img_A", "[", "h1", ":", "h1", "+", "fine_size", ",", "w1", ":", "w1", "+", "fine_size", "]", "\n", "img_B", "=", "img_B", "[", "h1", ":", "h1", "+", "fine_size", ",", "w1", ":", "w1", "+", "fine_size", "]", "\n", "\n", "if", "np", ".", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "img_A", "=", "np", ".", "fliplr", "(", "img_A", ")", "# Flip array in the left/right direction", "\n", "img_B", "=", "np", ".", "fliplr", "(", "img_B", ")", "\n", "", "", "else", ":", "\n", "        ", "img_A", "=", "scipy", ".", "misc", ".", "imresize", "(", "img_A", ",", "[", "fine_size", ",", "fine_size", "]", ")", "\n", "img_B", "=", "scipy", ".", "misc", ".", "imresize", "(", "img_B", ",", "[", "fine_size", ",", "fine_size", "]", ")", "\n", "\n", "", "img_A", "=", "img_A", "/", "127.5", "-", "1.", "\n", "img_B", "=", "img_B", "/", "127.5", "-", "1.", "\n", "\n", "img_AB", "=", "np", ".", "concatenate", "(", "(", "img_A", ",", "img_B", ")", ",", "axis", "=", "2", ")", "\n", "# img_AB shape: (fine_size, fine_size, input_c_dim + output_c_dim)", "\n", "return", "img_AB", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.load_midi_data": [[87, 96], ["pretty_midi.PrettyMIDI", "pretty_midi.PrettyMIDI", "piano_roll_A.reshape", "piano_roll_B.reshape", "numpy.concatenate", "select_instrument", "select_instrument"], "function", ["None"], ["", "def", "load_midi_data", "(", "midi_path", ")", ":", "\n", "    ", "midi_A", "=", "pm", ".", "PrettyMIDI", "(", "midi_path", "[", "0", "]", ")", "\n", "midi_B", "=", "pm", ".", "PrettyMIDI", "(", "midi_path", "[", "1", "]", ")", "\n", "piano_roll_A", "=", "select_instrument", "(", "midi_A", ")", "[", "1", "]", "\n", "piano_roll_B", "=", "select_instrument", "(", "midi_B", ")", "[", "1", "]", "\n", "piano_roll_A", ".", "reshape", "(", "piano_roll_A", ".", "shape", "[", "0", "]", ",", "piano_roll_A", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "piano_roll_B", ".", "reshape", "(", "piano_roll_B", ".", "shape", "[", "0", "]", ",", "piano_roll_B", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "piano_roll_AB", "=", "np", ".", "concatenate", "(", "(", "piano_roll_A", ",", "piano_roll_B", ")", ",", "axis", "=", "2", ")", "\n", "return", "piano_roll_AB", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.load_npy_data": [[98, 104], ["numpy.concatenate", "numpy.load", "numpy.load", "npy_A.reshape", "npy_B.reshape"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.load", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.model.cyclegan.load"], ["", "def", "load_npy_data", "(", "npy_data", ")", ":", "\n", "    ", "npy_A", "=", "np", ".", "load", "(", "npy_data", "[", "0", "]", ")", "*", "1.", "\n", "npy_B", "=", "np", ".", "load", "(", "npy_data", "[", "1", "]", ")", "*", "1.", "\n", "npy_AB", "=", "np", ".", "concatenate", "(", "(", "npy_A", ".", "reshape", "(", "npy_A", ".", "shape", "[", "0", "]", ",", "npy_A", ".", "shape", "[", "1", "]", ",", "1", ")", ",", "\n", "npy_B", ".", "reshape", "(", "npy_B", ".", "shape", "[", "0", "]", ",", "npy_B", ".", "shape", "[", "1", "]", ",", "1", ")", ")", ",", "axis", "=", "2", ")", "\n", "return", "npy_AB", "\n", "# -----------------------------", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.get_image": [[107, 109], ["utils.transform", "utils.imread"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.transform", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.imread"], ["", "def", "get_image", "(", "image_path", ",", "image_size", ",", "is_crop", "=", "True", ",", "resize_w", "=", "64", ",", "is_grayscale", "=", "False", ")", ":", "\n", "    ", "return", "transform", "(", "imread", "(", "image_path", ",", "is_grayscale", ")", ",", "image_size", ",", "is_crop", ",", "resize_w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.save_images": [[111, 113], ["utils.imsave", "utils.inverse_transform"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.imsave", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.inverse_transform"], ["", "def", "save_images", "(", "images", ",", "size", ",", "image_path", ")", ":", "\n", "    ", "return", "imsave", "(", "inverse_transform", "(", "images", ")", ",", "size", ",", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.imread": [[115, 120], ["_imread().astype", "_imread().astype", "_imread", "_imread"], "function", ["None"], ["", "def", "imread", "(", "path", ",", "is_grayscale", "=", "False", ")", ":", "\n", "    ", "if", "(", "is_grayscale", ")", ":", "\n", "        ", "return", "_imread", "(", "path", ",", "flatten", "=", "True", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "", "else", ":", "\n", "        ", "return", "_imread", "(", "path", ",", "mode", "=", "'RGB'", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.merge_images": [[122, 124], ["utils.inverse_transform"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.inverse_transform"], ["", "", "def", "merge_images", "(", "images", ",", "size", ")", ":", "\n", "    ", "return", "inverse_transform", "(", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.merge": [[126, 135], ["numpy.zeros", "enumerate"], "function", ["None"], ["", "def", "merge", "(", "images", ",", "size", ")", ":", "\n", "    ", "h", ",", "w", "=", "images", ".", "shape", "[", "1", "]", ",", "images", ".", "shape", "[", "2", "]", "\n", "img", "=", "np", ".", "zeros", "(", "(", "h", "*", "size", "[", "0", "]", ",", "w", "*", "size", "[", "1", "]", ",", "3", ")", ")", "\n", "for", "idx", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "        ", "i", "=", "idx", "%", "size", "[", "1", "]", "\n", "j", "=", "idx", "//", "size", "[", "1", "]", "\n", "img", "[", "j", "*", "h", ":", "j", "*", "h", "+", "h", ",", "i", "*", "w", ":", "i", "*", "w", "+", "w", ",", ":", "]", "=", "image", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.imsave": [[137, 139], ["scipy.misc.imsave", "utils.merge"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.imsave", "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.merge"], ["", "def", "imsave", "(", "images", ",", "size", ",", "path", ")", ":", "\n", "    ", "return", "scipy", ".", "misc", ".", "imsave", "(", "path", ",", "merge", "(", "images", ",", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.center_crop": [[141, 148], ["int", "int", "scipy.misc.imresize", "round", "round"], "function", ["None"], ["", "def", "center_crop", "(", "x", ",", "crop_h", ",", "crop_w", ",", "resize_h", "=", "64", ",", "resize_w", "=", "64", ")", ":", "\n", "    ", "if", "crop_w", "is", "None", ":", "\n", "        ", "crop_w", "=", "crop_h", "\n", "", "h", ",", "w", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "j", "=", "int", "(", "round", "(", "(", "h", "-", "crop_h", ")", "/", "2.", ")", ")", "\n", "i", "=", "int", "(", "round", "(", "(", "w", "-", "crop_w", ")", "/", "2.", ")", ")", "\n", "return", "scipy", ".", "misc", ".", "imresize", "(", "x", "[", "j", ":", "j", "+", "crop_h", ",", "i", ":", "i", "+", "crop_w", "]", ",", "[", "resize_h", ",", "resize_w", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.transform": [[150, 157], ["utils.center_crop", "numpy.array"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.center_crop"], ["", "def", "transform", "(", "image", ",", "npx", "=", "64", ",", "is_crop", "=", "True", ",", "resize_w", "=", "64", ")", ":", "\n", "# npx : # of pixels width/height of image", "\n", "    ", "if", "is_crop", ":", "\n", "        ", "cropped_image", "=", "center_crop", "(", "image", ",", "npx", ",", "resize_w", "=", "resize_w", ")", "\n", "", "else", ":", "\n", "        ", "cropped_image", "=", "image", "\n", "", "return", "np", ".", "array", "(", "cropped_image", ")", "/", "127.5", "-", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.inverse_transform": [[159, 161], ["None"], "function", ["None"], ["", "def", "inverse_transform", "(", "images", ")", ":", "\n", "    ", "return", "(", "images", "+", "1.", ")", "/", "2.", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.save_midis": [[168, 183], ["numpy.concatenate", "numpy.zeros", "images_with_pause.reshape.reshape", "range", "write_midi.write_piano_rolls_to_midi", "images_with_pause_list.append", "numpy.zeros", "numpy.zeros", "images_with_pause[].reshape"], "function", ["home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.write_midi.write_piano_rolls_to_midi"], ["", "def", "save_midis", "(", "bars", ",", "file_path", ",", "tempo", "=", "80.0", ")", ":", "\n", "    ", "padded_bars", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "bars", ".", "shape", "[", "0", "]", ",", "bars", ".", "shape", "[", "1", "]", ",", "24", ",", "bars", ".", "shape", "[", "3", "]", ")", ")", ",", "bars", ",", "\n", "np", ".", "zeros", "(", "(", "bars", ".", "shape", "[", "0", "]", ",", "bars", ".", "shape", "[", "1", "]", ",", "20", ",", "bars", ".", "shape", "[", "3", "]", ")", ")", ")", ",", "axis", "=", "2", ")", "\n", "pause", "=", "np", ".", "zeros", "(", "(", "bars", ".", "shape", "[", "0", "]", ",", "64", ",", "128", ",", "bars", ".", "shape", "[", "3", "]", ")", ")", "\n", "images_with_pause", "=", "padded_bars", "\n", "images_with_pause", "=", "images_with_pause", ".", "reshape", "(", "-", "1", ",", "64", ",", "padded_bars", ".", "shape", "[", "2", "]", ",", "padded_bars", ".", "shape", "[", "3", "]", ")", "\n", "images_with_pause_list", "=", "[", "]", "\n", "for", "ch_idx", "in", "range", "(", "padded_bars", ".", "shape", "[", "3", "]", ")", ":", "\n", "        ", "images_with_pause_list", ".", "append", "(", "images_with_pause", "[", ":", ",", ":", ",", ":", ",", "ch_idx", "]", ".", "reshape", "(", "images_with_pause", ".", "shape", "[", "0", "]", ",", "\n", "images_with_pause", ".", "shape", "[", "1", "]", ",", "\n", "images_with_pause", ".", "shape", "[", "2", "]", ")", ")", "\n", "# write_midi.write_piano_rolls_to_midi(images_with_pause_list, program_nums=[33, 0, 25, 49, 0],", "\n", "#                                      is_drum=[False, True, False, False, False], filename=file_path, tempo=80.0)", "\n", "", "write_midi", ".", "write_piano_rolls_to_midi", "(", "images_with_pause_list", ",", "program_nums", "=", "[", "0", "]", ",", "is_drum", "=", "[", "False", "]", ",", "filename", "=", "file_path", ",", "\n", "tempo", "=", "tempo", ",", "beat_resolution", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.get_sample_shape": [[185, 196], ["None"], "function", ["None"], ["", "def", "get_sample_shape", "(", "sample_size", ")", ":", "\n", "    ", "if", "sample_size", ">=", "64", "and", "sample_size", "%", "8", "==", "0", ":", "\n", "        ", "return", "[", "8", ",", "sample_size", "//", "8", "]", "\n", "", "elif", "sample_size", ">=", "48", "and", "sample_size", "%", "6", "==", "0", ":", "\n", "        ", "return", "[", "6", ",", "sample_size", "//", "6", "]", "\n", "", "elif", "sample_size", ">=", "24", "and", "sample_size", "%", "4", "==", "0", ":", "\n", "        ", "return", "[", "4", ",", "sample_size", "/", "4", "]", "\n", "", "elif", "sample_size", ">=", "15", "and", "sample_size", "%", "3", "==", "0", ":", "\n", "        ", "return", "[", "3", ",", "sample_size", "//", "3", "]", "\n", "", "elif", "sample_size", ">=", "8", "and", "sample_size", "%", "2", "==", "0", ":", "\n", "        ", "return", "[", "2", ",", "sample_size", "//", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.get_rand_samples": [[198, 201], ["numpy.random.choice"], "function", ["None"], ["", "", "def", "get_rand_samples", "(", "x", ",", "sample_size", "=", "64", ")", ":", "\n", "    ", "random_idx", "=", "np", ".", "random", ".", "choice", "(", "x", ".", "shape", "[", "0", "]", ",", "sample_size", ",", "replace", "=", "False", ")", "\n", "return", "x", "[", "random_idx", "]", "*", "2.", "-", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.sumuzhao_CycleGAN-Music-Style-Transfer.None.utils.get_now_datetime": [[203, 206], ["datetime.datetime.now().strftime", "str", "datetime.datetime.now"], "function", ["None"], ["", "def", "get_now_datetime", "(", ")", ":", "\n", "    ", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d'", ")", "\n", "return", "str", "(", "now", ")", "", "", ""]]}