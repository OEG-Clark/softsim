{"home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.__init__": [[17, 82], ["data_utils.SymptomVocab.trim_voc", "data_utils.SymptomVocab.special_sxs.extend", "len", "print", "len", "len", "isinstance", "data_utils.SymptomVocab.update_voc", "enumerate", "enumerate", "len"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.trim_voc", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.update_voc"], ["    ", "def", "__init__", "(", "self", ",", "samples", ":", "list", "=", "None", ",", "add_special_sxs", ":", "bool", "=", "False", ",", "\n", "min_sx_freq", ":", "int", "=", "None", ",", "max_voc_size", ":", "int", "=", "None", ")", ":", "\n", "\n", "# sx is short for symptom", "\n", "        ", "self", ".", "sx2idx", "=", "{", "}", "# map from symptom to symptom id", "\n", "self", ".", "idx2sx", "=", "{", "}", "# map from symptom id to symptom", "\n", "self", ".", "sx2count", "=", "{", "}", "# map from symptom to symptom count", "\n", "self", ".", "num_sxs", "=", "0", "# number of symptoms", "\n", "\n", "# symptom attrs", "\n", "self", ".", "SX_ATTR_PAD_IDX", "=", "0", "# symptom attribute id for PAD", "\n", "self", ".", "SX_ATTR_POS_IDX", "=", "1", "# symptom attribute id for YES", "\n", "self", ".", "SX_ATTR_NEG_IDX", "=", "2", "# symptom attribute id for NO", "\n", "self", ".", "SX_ATTR_NS_IDX", "=", "3", "# symptom attribute id for NOT SURE", "\n", "self", ".", "SX_ATTR_NM_IDX", "=", "4", "# symptom attribute id for NOT MENTIONED", "\n", "\n", "self", ".", "SX_ATTR_MAP", "=", "{", "# map from symptom attribute to symptom attribute id", "\n", "'0'", ":", "self", ".", "SX_ATTR_NEG_IDX", ",", "\n", "'1'", ":", "self", ".", "SX_ATTR_POS_IDX", ",", "\n", "'2'", ":", "self", ".", "SX_ATTR_NS_IDX", ",", "\n", "}", "\n", "\n", "self", ".", "SX_ATTR_MAP_INV", "=", "{", "\n", "self", ".", "SX_ATTR_NEG_IDX", ":", "'0'", ",", "\n", "self", ".", "SX_ATTR_POS_IDX", ":", "'1'", ",", "\n", "self", ".", "SX_ATTR_NS_IDX", ":", "'2'", ",", "\n", "}", "\n", "\n", "# special symptoms", "\n", "self", ".", "num_special", "=", "0", "# number of special symptoms", "\n", "self", ".", "special_sxs", "=", "[", "]", "\n", "\n", "# vocabulary", "\n", "self", ".", "min_sx_freq", "=", "min_sx_freq", "# minimal symptom frequency", "\n", "self", ".", "max_voc_size", "=", "max_voc_size", "# maximal symptom size", "\n", "\n", "# add special symptoms", "\n", "if", "add_special_sxs", ":", "# special symptoms", "\n", "            ", "self", ".", "SX_PAD", "=", "'[PAD]'", "\n", "self", ".", "SX_START", "=", "'[START]'", "\n", "self", ".", "SX_END", "=", "'[END]'", "\n", "self", ".", "SX_UNK", "=", "'[UNKNOWN]'", "\n", "self", ".", "SX_CLS", "=", "'[CLS]'", "\n", "self", ".", "SX_MASK", "=", "'[MASK]'", "\n", "self", ".", "special_sxs", ".", "extend", "(", "[", "self", ".", "SX_PAD", ",", "self", ".", "SX_START", ",", "self", ".", "SX_END", ",", "self", ".", "SX_UNK", ",", "self", ".", "SX_CLS", ",", "self", ".", "SX_MASK", "]", ")", "\n", "self", ".", "sx2idx", "=", "{", "sx", ":", "idx", "for", "idx", ",", "sx", "in", "enumerate", "(", "self", ".", "special_sxs", ")", "}", "\n", "self", ".", "idx2sx", "=", "{", "idx", ":", "sx", "for", "idx", ",", "sx", "in", "enumerate", "(", "self", ".", "special_sxs", ")", "}", "\n", "self", ".", "num_special", "=", "len", "(", "self", ".", "special_sxs", ")", "\n", "self", ".", "num_sxs", "+=", "self", ".", "num_special", "\n", "\n", "# update vocabulary", "\n", "", "if", "samples", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "samples", ",", "tuple", ")", ":", "\n", "                ", "samples", "=", "(", "samples", ",", ")", "\n", "", "num_samples", "=", "0", "\n", "for", "split", "in", "samples", ":", "\n", "                ", "num_samples", "+=", "self", ".", "update_voc", "(", "split", ")", "\n", "", "print", "(", "'symptom vocabulary constructed using {} split and {} samples '", "\n", "'({} symptoms with {} special symptoms)'", ".", "\n", "format", "(", "len", "(", "samples", ")", ",", "num_samples", ",", "self", ".", "num_sxs", "-", "self", ".", "num_special", ",", "self", ".", "num_special", ")", ")", "\n", "\n", "# trim vocabulary", "\n", "", "self", ".", "trim_voc", "(", ")", "\n", "\n", "assert", "self", ".", "num_sxs", "==", "len", "(", "self", ".", "sx2idx", ")", "==", "len", "(", "self", ".", "idx2sx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.add_symptom": [[83, 91], ["None"], "methods", ["None"], ["", "def", "add_symptom", "(", "self", ",", "sx", ":", "str", ")", "->", "None", ":", "\n", "        ", "if", "sx", "not", "in", "self", ".", "sx2idx", ":", "\n", "            ", "self", ".", "sx2idx", "[", "sx", "]", "=", "self", ".", "num_sxs", "\n", "self", ".", "sx2count", "[", "sx", "]", "=", "1", "\n", "self", ".", "idx2sx", "[", "self", ".", "num_sxs", "]", "=", "sx", "\n", "self", ".", "num_sxs", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "sx2count", "[", "sx", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.update_voc": [[92, 99], ["len", "data_utils.SymptomVocab.add_symptom", "data_utils.SymptomVocab.add_symptom"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.add_symptom", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.add_symptom"], ["", "", "def", "update_voc", "(", "self", ",", "samples", ":", "list", ")", "->", "int", ":", "\n", "        ", "for", "sample", "in", "samples", ":", "\n", "            ", "for", "sx", "in", "sample", "[", "'exp_sxs'", "]", ":", "\n", "                ", "self", ".", "add_symptom", "(", "sx", ")", "\n", "", "for", "sx", "in", "sample", "[", "'imp_sxs'", "]", ":", "\n", "                ", "self", ".", "add_symptom", "(", "sx", ")", "\n", "", "", "return", "len", "(", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.trim_voc": [[100, 113], ["len", "print", "data_utils.SymptomVocab.sx2count.get", "sorted", "enumerate", "enumerate", "data_utils.SymptomVocab.sx2count.get"], "methods", ["None"], ["", "def", "trim_voc", "(", "self", ")", ":", "\n", "        ", "sxs", "=", "[", "sx", "for", "sx", "in", "sorted", "(", "self", ".", "sx2count", ",", "key", "=", "self", ".", "sx2count", ".", "get", ",", "reverse", "=", "True", ")", "]", "\n", "if", "self", ".", "min_sx_freq", "is", "not", "None", ":", "\n", "            ", "sxs", "=", "[", "sx", "for", "sx", "in", "sxs", "if", "self", ".", "sx2count", ".", "get", "(", "sx", ")", ">=", "self", ".", "min_sx_freq", "]", "\n", "", "if", "self", ".", "max_voc_size", "is", "not", "None", ":", "\n", "            ", "sxs", "=", "sxs", "[", ":", "self", ".", "max_voc_size", "]", "\n", "", "sxs", "=", "self", ".", "special_sxs", "+", "sxs", "\n", "self", ".", "sx2idx", "=", "{", "sx", ":", "idx", "for", "idx", ",", "sx", "in", "enumerate", "(", "sxs", ")", "}", "\n", "self", ".", "idx2sx", "=", "{", "idx", ":", "sx", "for", "idx", ",", "sx", "in", "enumerate", "(", "sxs", ")", "}", "\n", "self", ".", "sx2count", "=", "{", "sx", ":", "self", ".", "sx2count", ".", "get", "(", "sx", ")", "for", "sx", "in", "sxs", "if", "sx", "in", "self", ".", "sx2count", "}", "\n", "self", ".", "num_sxs", "=", "len", "(", "self", ".", "sx2idx", ")", "\n", "print", "(", "'trimmed to {} symptoms with {} special symptoms'", ".", "\n", "format", "(", "self", ".", "num_sxs", "-", "self", ".", "num_special", ",", "self", ".", "num_special", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.encode": [[114, 131], ["sxs.items", "sx_ids.append", "attr_ids.append", "sx_ids.append", "attr_ids.append", "sx_ids.append", "attr_ids.append", "data_utils.SymptomVocab.sx2idx.get", "data_utils.SymptomVocab.SX_ATTR_MAP.get", "sx_ids.append", "attr_ids.append", "data_utils.SymptomVocab.SX_ATTR_MAP.get"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "sxs", ":", "dict", ",", "keep_unk", "=", "True", ",", "add_start", "=", "False", ",", "add_end", "=", "False", ")", ":", "\n", "        ", "sx_ids", ",", "attr_ids", "=", "[", "]", ",", "[", "]", "\n", "if", "add_start", ":", "\n", "            ", "sx_ids", ".", "append", "(", "self", ".", "start_idx", ")", "\n", "attr_ids", ".", "append", "(", "self", ".", "SX_ATTR_PAD_IDX", ")", "\n", "", "for", "sx", ",", "attr", "in", "sxs", ".", "items", "(", ")", ":", "\n", "            ", "if", "sx", "in", "self", ".", "sx2idx", ":", "\n", "                ", "sx_ids", ".", "append", "(", "self", ".", "sx2idx", ".", "get", "(", "sx", ")", ")", "\n", "attr_ids", ".", "append", "(", "self", ".", "SX_ATTR_MAP", ".", "get", "(", "attr", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "keep_unk", ":", "\n", "                    ", "sx_ids", ".", "append", "(", "self", ".", "unk_idx", ")", "\n", "attr_ids", ".", "append", "(", "self", ".", "SX_ATTR_MAP", ".", "get", "(", "attr", ")", ")", "\n", "", "", "", "if", "add_end", ":", "\n", "            ", "sx_ids", ".", "append", "(", "self", ".", "end_idx", ")", "\n", "attr_ids", ".", "append", "(", "self", ".", "SX_ATTR_PAD_IDX", ")", "\n", "", "return", "sx_ids", ",", "attr_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.decoder": [[132, 138], ["zip", "sx_attr.update", "data_utils.SymptomVocab.idx2sx.get", "data_utils.SymptomVocab.SX_ATTR_MAP_INV.get"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SIRecorder.update"], ["", "def", "decoder", "(", "self", ",", "sx_ids", ",", "attr_ids", ")", ":", "\n", "        ", "sx_attr", "=", "{", "}", "\n", "for", "sx_id", ",", "attr_id", "in", "zip", "(", "sx_ids", ",", "attr_ids", ")", ":", "\n", "            ", "if", "attr_id", "not", "in", "[", "self", ".", "SX_ATTR_PAD_IDX", ",", "self", ".", "SX_ATTR_NM_IDX", "]", ":", "\n", "                ", "sx_attr", ".", "update", "(", "{", "self", ".", "idx2sx", ".", "get", "(", "sx_id", ")", ":", "self", ".", "SX_ATTR_MAP_INV", ".", "get", "(", "attr_id", ")", "}", ")", "\n", "", "", "return", "sx_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.__len__": [[139, 141], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "num_sxs", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.pad_idx": [[142, 145], ["data_utils.SymptomVocab.sx2idx.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "pad_idx", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "sx2idx", ".", "get", "(", "self", ".", "SX_PAD", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.start_idx": [[146, 149], ["data_utils.SymptomVocab.sx2idx.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "start_idx", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "sx2idx", ".", "get", "(", "self", ".", "SX_START", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.end_idx": [[150, 153], ["data_utils.SymptomVocab.sx2idx.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "end_idx", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "sx2idx", ".", "get", "(", "self", ".", "SX_END", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.unk_idx": [[154, 157], ["data_utils.SymptomVocab.sx2idx.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "unk_idx", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "sx2idx", ".", "get", "(", "self", ".", "SX_UNK", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.cls_idx": [[158, 161], ["data_utils.SymptomVocab.sx2idx.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "cls_idx", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "sx2idx", ".", "get", "(", "self", ".", "SX_CLS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.mask_idx": [[162, 165], ["data_utils.SymptomVocab.sx2idx.get"], "methods", ["None"], ["", "@", "property", "\n", "def", "mask_idx", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "sx2idx", ".", "get", "(", "self", ".", "SX_MASK", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.pad_sx": [[166, 169], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pad_sx", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "SX_PAD", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.start_sx": [[170, 173], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "start_sx", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "SX_START", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.end_sx": [[174, 177], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "end_sx", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "SX_END", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.unk_sx": [[178, 181], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unk_sx", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "SX_UNK", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.cls_sx": [[182, 185], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cls_sx", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "SX_CLS", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.mask_sx": [[186, 189], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mask_sx", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "SX_MASK", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.__init__": [[193, 210], ["print", "isinstance", "data_utils.DiseaseVocab.update_voc", "len"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.update_voc"], ["    ", "def", "__init__", "(", "self", ",", "samples", ":", "list", "=", "None", ")", ":", "\n", "\n", "# dis is short for disease", "\n", "        ", "self", ".", "dis2idx", "=", "{", "}", "\n", "self", ".", "idx2dis", "=", "{", "}", "\n", "self", ".", "dis2count", "=", "{", "}", "\n", "self", ".", "num_dis", "=", "0", "\n", "\n", "# update vocabulary", "\n", "if", "samples", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "samples", ",", "tuple", ")", ":", "\n", "                ", "samples", "=", "(", "samples", ",", ")", "\n", "", "num_samples", "=", "0", "\n", "for", "split", "in", "samples", ":", "\n", "                ", "num_samples", "+=", "self", ".", "update_voc", "(", "split", ")", "\n", "", "print", "(", "'disease vocabulary constructed using {} split and {} samples\\nnum of unique diseases: {}'", ".", "\n", "format", "(", "len", "(", "samples", ")", ",", "num_samples", ",", "self", ".", "num_dis", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.add_disease": [[211, 219], ["None"], "methods", ["None"], ["", "", "def", "add_disease", "(", "self", ",", "dis", ":", "str", ")", "->", "None", ":", "\n", "        ", "if", "dis", "not", "in", "self", ".", "dis2idx", ":", "\n", "            ", "self", ".", "dis2idx", "[", "dis", "]", "=", "self", ".", "num_dis", "\n", "self", ".", "dis2count", "[", "dis", "]", "=", "1", "\n", "self", ".", "idx2dis", "[", "self", ".", "num_dis", "]", "=", "dis", "\n", "self", ".", "num_dis", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "dis2count", "[", "dis", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.update_voc": [[220, 224], ["len", "data_utils.DiseaseVocab.add_disease"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.add_disease"], ["", "", "def", "update_voc", "(", "self", ",", "samples", ":", "list", ")", "->", "int", ":", "\n", "        ", "for", "sample", "in", "samples", ":", "\n", "            ", "self", ".", "add_disease", "(", "sample", "[", "'label'", "]", ")", "\n", "", "return", "len", "(", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.__len__": [[225, 227], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "num_dis", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.encode": [[228, 230], ["data_utils.DiseaseVocab.dis2idx.get"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "dis", ")", ":", "\n", "        ", "return", "self", ".", "dis2idx", ".", "get", "(", "dis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomDataset.__init__": [[234, 244], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "samples", ",", "sv", ":", "SymptomVocab", ",", "dv", ":", "DiseaseVocab", ",", "keep_unk", ":", "bool", ",", "\n", "add_src_start", ":", "bool", "=", "False", ",", "add_tgt_start", ":", "bool", "=", "False", ",", "add_tgt_end", ":", "bool", "=", "False", ")", ":", "\n", "        ", "self", ".", "samples", "=", "samples", "\n", "self", ".", "sv", "=", "sv", "\n", "self", ".", "dv", "=", "dv", "\n", "self", ".", "keep_unk", "=", "keep_unk", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "sv", ")", "\n", "self", ".", "add_src_start", "=", "add_src_start", "\n", "self", ".", "add_tgt_start", "=", "add_tgt_start", "\n", "self", ".", "add_tgt_end", "=", "add_tgt_end", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomDataset.__len__": [[245, 247], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomDataset.__getitem__": [[248, 264], ["data_utils.SymptomDataset.sv.encode", "data_utils.SymptomDataset.sv.encode", "data_utils.to_tensor_vla", "data_utils.SymptomDataset.dv.encode"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.encode", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.encode", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.to_tensor_vla", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.encode"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample", "=", "self", ".", "samples", "[", "index", "]", "\n", "exp_sx_ids", ",", "exp_attr_ids", "=", "self", ".", "sv", ".", "encode", "(", "\n", "sample", "[", "'exp_sxs'", "]", ",", "keep_unk", "=", "self", ".", "keep_unk", ",", "add_start", "=", "self", ".", "add_src_start", ")", "\n", "imp_sx_ids", ",", "imp_attr_ids", "=", "self", ".", "sv", ".", "encode", "(", "\n", "sample", "[", "'imp_sxs'", "]", ",", "keep_unk", "=", "self", ".", "keep_unk", ",", "add_start", "=", "self", ".", "add_tgt_start", ",", "add_end", "=", "self", ".", "add_tgt_end", ")", "\n", "exp_sx_ids", ",", "exp_attr_ids", ",", "imp_sx_ids", ",", "imp_attr_ids", ",", "label", "=", "to_tensor_vla", "(", "\n", "exp_sx_ids", ",", "exp_attr_ids", ",", "imp_sx_ids", ",", "imp_attr_ids", ",", "self", ".", "dv", ".", "encode", "(", "sample", "[", "'label'", "]", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "item", "=", "{", "\n", "'exp_sx_ids'", ":", "exp_sx_ids", ",", "\n", "'exp_attr_ids'", ":", "exp_attr_ids", ",", "\n", "'imp_sx_ids'", ":", "imp_sx_ids", ",", "\n", "'imp_attr_ids'", ":", "imp_attr_ids", ",", "\n", "'label'", ":", "label", "\n", "}", "\n", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.PatientSimulator.__init__": [[300, 302], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sv", ":", "SymptomVocab", ")", ":", "\n", "        ", "self", ".", "sv", "=", "sv", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.PatientSimulator.init_sx_ids": [[303, 305], ["torch.full"], "methods", ["None"], ["", "def", "init_sx_ids", "(", "self", ",", "bsz", ")", ":", "\n", "        ", "return", "torch", ".", "full", "(", "(", "1", ",", "bsz", ")", ",", "self", ".", "sv", ".", "start_idx", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.PatientSimulator.init_attr_ids": [[306, 308], ["torch.full"], "methods", ["None"], ["", "def", "init_attr_ids", "(", "self", ",", "bsz", ")", ":", "\n", "        ", "return", "torch", ".", "full", "(", "(", "1", ",", "bsz", ")", ",", "self", ".", "sv", ".", "SX_ATTR_PAD_IDX", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.PatientSimulator.answer": [[309, 324], ["enumerate", "data_utils.to_tensor_vla", "act.item", "attr_ids.append", "d_action.append", "[].eq().nonzero", "len", "attr_ids.append", "d_action.append", "attr_ids.append", "d_action.append", "[].eq", "[].item", "act.item", "indices[].item"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.to_tensor_vla"], ["", "def", "answer", "(", "self", ",", "action", ",", "batch", ")", ":", "\n", "        ", "d_action", ",", "attr_ids", "=", "[", "]", ",", "[", "]", "\n", "for", "idx", ",", "act", "in", "enumerate", "(", "action", ")", ":", "\n", "            ", "if", "act", ".", "item", "(", ")", "<", "self", ".", "sv", ".", "num_special", ":", "\n", "                ", "attr_ids", ".", "append", "(", "self", ".", "sv", ".", "SX_ATTR_PAD_IDX", ")", "\n", "d_action", ".", "append", "(", "self", ".", "sv", ".", "pad_idx", ")", "\n", "", "else", ":", "\n", "                ", "indices", "=", "batch", "[", "'imp_sx_ids'", "]", "[", ":", ",", "idx", "]", ".", "eq", "(", "act", ".", "item", "(", ")", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", "\n", "if", "len", "(", "indices", ")", ">", "0", ":", "\n", "                    ", "attr_ids", ".", "append", "(", "batch", "[", "'imp_attr_ids'", "]", "[", "indices", "[", "0", "]", ".", "item", "(", ")", ",", "idx", "]", ".", "item", "(", ")", ")", "\n", "d_action", ".", "append", "(", "act", ")", "\n", "", "else", ":", "\n", "                    ", "attr_ids", ".", "append", "(", "self", ".", "sv", ".", "SX_ATTR_NM_IDX", ")", "\n", "d_action", ".", "append", "(", "self", ".", "sv", ".", "pad_idx", ")", "\n", "", "", "", "return", "to_tensor_vla", "(", "d_action", ",", "attr_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SIRecorder.__init__": [[329, 352], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "sum", "collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_samples", ",", "num_imp_sxs", ",", "digits", ")", ":", "\n", "        ", "self", ".", "epoch_rewards", "=", "defaultdict", "(", "list", ")", "# \u6a21\u62df\u7684\u6bcf\u4e00\u4e2a\u5e8f\u5217\u7684\u6bcf\u4e00\u4e2a\u67e5\u8be2\u7684\u75c7\u72b6\u7684\u5956\u52b1", "\n", "self", ".", "epoch_num_turns", "=", "defaultdict", "(", "list", ")", "# \u6a21\u62df\u7684\u6bcf\u4e00\u4e2a\u5e8f\u5217\u7684\u8be2\u95ee\u7684\u8f6e\u6570", "\n", "\n", "self", ".", "epoch_num_hits", "=", "defaultdict", "(", "list", ")", "# \u6a21\u62df\u7684\u6bcf\u4e00\u4e2a\u5e8f\u5217\u7684\u75c7\u72b6\u547d\u4e2d\u603b\u4e2a\u6570", "\n", "self", ".", "epoch_num_pos_hits", "=", "defaultdict", "(", "list", ")", "# \u6a21\u62df\u7684\u6bcf\u4e00\u4e2a\u5e8f\u5217\u7684\u75c7\u72b6\uff08yes\uff09\u547d\u4e2d\u4e2a\u6570", "\n", "self", ".", "epoch_num_neg_hits", "=", "defaultdict", "(", "list", ")", "# \u6a21\u62df\u7684\u6bcf\u4e00\u4e2a\u5e8f\u5217\u7684\u75c7\u72b6\uff08no\uff09\u547d\u4e2d\u4e2a\u6570", "\n", "self", ".", "epoch_num_ns_hits", "=", "defaultdict", "(", "list", ")", "# \u6a21\u62df\u7684\u6bcf\u4e00\u4e2a\u5e8f\u5217\u7684\u75c7\u72b6\uff08not sure\uff09\u547d\u4e2d\u4e2a\u6570", "\n", "\n", "self", ".", "epoch_num_repeats", "=", "defaultdict", "(", "list", ")", "# \u6a21\u62df\u7684\u6bcf\u4e00\u4e2a\u5e8f\u5217\u7684\u8be2\u95ee\u7684\u91cd\u590d\u75c7\u72b6\u7684\u4e2a\u6570", "\n", "self", ".", "epoch_distances", "=", "defaultdict", "(", "list", ")", "# \u6a21\u62df\u7684\u6bcf\u4e00\u4e2a\u5e8f\u5217\u7684\u6770\u5361\u5fb7\u8ddd\u79bb\uff08\u4e0d\u8003\u8651\u987a\u5e8f\uff09", "\n", "self", ".", "epoch_bleus", "=", "defaultdict", "(", "list", ")", "# \u6a21\u62df\u7684\u6bcf\u4e00\u4e2a\u5e8f\u5217\u7684BLEU\uff08\u8003\u8651\u987a\u5e8f\uff09", "\n", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "\n", "num_pos_imp_sxs", ",", "num_neg_imp_sxs", ",", "num_ns_imp_sxs", "=", "num_imp_sxs", "\n", "self", ".", "num_pos_imp_sxs", "=", "num_pos_imp_sxs", "\n", "self", ".", "num_neg_imp_sxs", "=", "num_neg_imp_sxs", "\n", "self", ".", "num_ns_imp_sxs", "=", "num_ns_imp_sxs", "\n", "self", ".", "num_imp_sxs", "=", "sum", "(", "num_imp_sxs", ")", "\n", "self", ".", "digits", "=", "digits", "\n", "\n", "self", ".", "epoch_acc", "=", "defaultdict", "(", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SIRecorder.update": [[353, 366], ["data_utils.SIRecorder.epoch_rewards[].extend", "data_utils.SIRecorder.epoch_num_turns[].extend", "data_utils.SIRecorder.epoch_num_hits[].extend", "data_utils.SIRecorder.epoch_num_pos_hits[].extend", "data_utils.SIRecorder.epoch_num_neg_hits[].extend", "data_utils.SIRecorder.epoch_num_ns_hits[].extend", "data_utils.SIRecorder.epoch_num_repeats[].extend", "data_utils.SIRecorder.epoch_distances[].extend", "data_utils.SIRecorder.epoch_bleus[].extend"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "batch_rewards", ",", "batch_num_turns", ",", "batch_num_hits", ",", "batch_num_pos_hits", ",", "\n", "batch_num_neg_hits", ",", "batch_num_ns_hits", ",", "batch_num_repeats", ",", "batch_distances", ",", "batch_bleus", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch_rewards", "[", "epoch", "]", ".", "extend", "(", "batch_rewards", ")", "\n", "self", ".", "epoch_num_turns", "[", "epoch", "]", ".", "extend", "(", "batch_num_turns", ")", "\n", "\n", "self", ".", "epoch_num_hits", "[", "epoch", "]", ".", "extend", "(", "batch_num_hits", ")", "\n", "self", ".", "epoch_num_pos_hits", "[", "epoch", "]", ".", "extend", "(", "batch_num_pos_hits", ")", "\n", "self", ".", "epoch_num_neg_hits", "[", "epoch", "]", ".", "extend", "(", "batch_num_neg_hits", ")", "\n", "self", ".", "epoch_num_ns_hits", "[", "epoch", "]", ".", "extend", "(", "batch_num_ns_hits", ")", "\n", "\n", "self", ".", "epoch_num_repeats", "[", "epoch", "]", ".", "extend", "(", "batch_num_repeats", ")", "\n", "self", ".", "epoch_distances", "[", "epoch", "]", ".", "extend", "(", "batch_distances", ")", "\n", "self", ".", "epoch_bleus", "[", "epoch", "]", ".", "extend", "(", "batch_bleus", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SIRecorder.update_acc": [[367, 369], ["None"], "methods", ["None"], ["", "def", "update_acc", "(", "self", ",", "epoch", ",", "acc", ")", ":", "\n", "        ", "self", ".", "epoch_acc", "[", "epoch", "]", "=", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SIRecorder.epoch_summary": [[370, 398], ["data_utils.average", "data_utils.average", "data_utils.average", "data_utils.average", "data_utils.average", "data_utils.average", "data_utils.average", "data_utils.average", "data_utils.average", "print", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.average", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.average", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.average", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.average", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.average", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.average", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.average", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.average", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.average"], ["", "def", "epoch_summary", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "avg_epoch_rewards", "=", "average", "(", "self", ".", "epoch_rewards", "[", "epoch", "]", ",", "self", ".", "num_imp_sxs", ")", "\n", "avg_epoch_turns", "=", "average", "(", "self", ".", "epoch_num_turns", "[", "epoch", "]", ",", "self", ".", "num_samples", ")", "\n", "\n", "avg_epoch_num_hits", "=", "average", "(", "self", ".", "epoch_num_hits", "[", "epoch", "]", ",", "self", ".", "num_imp_sxs", ")", "\n", "avg_epoch_num_pos_hits", "=", "average", "(", "self", ".", "epoch_num_pos_hits", "[", "epoch", "]", ",", "self", ".", "num_pos_imp_sxs", ")", "\n", "avg_epoch_num_neg_hits", "=", "average", "(", "self", ".", "epoch_num_neg_hits", "[", "epoch", "]", ",", "self", ".", "num_neg_imp_sxs", ")", "\n", "avg_epoch_num_ns_hits", "=", "average", "(", "self", ".", "epoch_num_ns_hits", "[", "epoch", "]", ",", "self", ".", "num_ns_imp_sxs", ")", "\n", "\n", "avg_epoch_num_repeats", "=", "average", "(", "self", ".", "epoch_num_repeats", "[", "epoch", "]", ",", "self", ".", "num_samples", ")", "\n", "avg_epoch_distances", "=", "average", "(", "self", ".", "epoch_distances", "[", "epoch", "]", ",", "self", ".", "num_samples", ")", "\n", "avg_epoch_bleus", "=", "average", "(", "self", ".", "epoch_bleus", "[", "epoch", "]", ",", "self", ".", "num_samples", ")", "\n", "\n", "epoch_acc", "=", "self", ".", "epoch_acc", "[", "epoch", "]", "if", "epoch", "in", "self", ".", "epoch_acc", "else", "0", "\n", "\n", "print", "(", "\n", "'epoch: {} -> rewards: {}, all/pos/neg/ns hits: {}/{}/{}/{}, acc: {}, repeats: {}, turns: {}, distances: {}, bleus: {}'", ".", "\n", "format", "(", "epoch", "+", "1", ",", "\n", "round", "(", "avg_epoch_rewards", ",", "self", ".", "digits", ")", ",", "\n", "round", "(", "avg_epoch_num_hits", ",", "self", ".", "digits", ")", ",", "\n", "round", "(", "avg_epoch_num_pos_hits", ",", "self", ".", "digits", ")", ",", "\n", "round", "(", "avg_epoch_num_neg_hits", ",", "self", ".", "digits", ")", ",", "\n", "round", "(", "avg_epoch_num_ns_hits", ",", "self", ".", "digits", ")", ",", "\n", "round", "(", "epoch_acc", ",", "self", ".", "digits", ")", ",", "\n", "round", "(", "avg_epoch_num_repeats", ",", "self", ".", "digits", ")", ",", "\n", "round", "(", "avg_epoch_turns", ",", "self", ".", "digits", ")", ",", "\n", "round", "(", "avg_epoch_distances", ",", "self", ".", "digits", ")", ",", "\n", "round", "(", "avg_epoch_bleus", ",", "self", ".", "digits", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SIRecorder.lmax": [[399, 405], ["max", "len", "arrays[].index"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "lmax", "(", "arrays", ":", "list", ")", ":", "\n", "        ", "cur_val", "=", "arrays", "[", "-", "1", "]", "\n", "max_val", "=", "max", "(", "arrays", ")", "\n", "max_index", "=", "len", "(", "arrays", ")", "-", "arrays", "[", ":", ":", "-", "1", "]", ".", "index", "(", "max_val", ")", "-", "1", "\n", "return", "cur_val", ",", "max_val", ",", "max_index", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SIRecorder.report": [[406, 422], ["data_utils.SIRecorder.lmax", "data_utils.SIRecorder.lmax", "data_utils.SIRecorder.lmax", "data_utils.average", "print", "range", "range", "zip", "round", "round", "round", "round", "round", "round"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SIRecorder.lmax", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SIRecorder.lmax", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SIRecorder.lmax", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.average"], ["", "def", "report", "(", "self", ",", "max_epoch", ":", "int", ",", "digits", ":", "int", ",", "alpha", ":", "float", "=", "0.2", ",", "verbose", ":", "bool", "=", "False", ")", ":", "\n", "        ", "recs", "=", "[", "average", "(", "self", ".", "epoch_num_hits", "[", "epoch", "]", ",", "self", ".", "num_imp_sxs", ")", "for", "epoch", "in", "range", "(", "max_epoch", "+", "1", ")", "]", "\n", "cur_rec", ",", "best_rec", ",", "best_rec_epoch", "=", "self", ".", "lmax", "(", "recs", ")", "\n", "accs", "=", "[", "self", ".", "epoch_acc", "[", "epoch", "]", "for", "epoch", "in", "range", "(", "max_epoch", "+", "1", ")", "]", "\n", "cur_acc", ",", "best_acc", ",", "best_acc_epoch", "=", "self", ".", "lmax", "(", "accs", ")", "\n", "mets", "=", "[", "alpha", "*", "rec", "+", "(", "1", "-", "alpha", ")", "*", "acc", "for", "rec", ",", "acc", "in", "zip", "(", "recs", ",", "accs", ")", "]", "\n", "cur_met", ",", "best_met", ",", "best_met_epoch", "=", "self", ".", "lmax", "(", "mets", ")", "\n", "best_rec_acc", ",", "best_acc_rec", ",", "best_met_rec", ",", "best_met_acc", "=", "accs", "[", "best_rec_epoch", "]", ",", "recs", "[", "best_acc_epoch", "]", ",", "recs", "[", "best_met_epoch", "]", ",", "accs", "[", "best_met_epoch", "]", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'best recall -> epoch: {}, recall: {}, accuracy: {}\\nbest accuracy -> epoch: {}, recall: {}, accuracy: {}\\nbest metric -> epoch: {}, recall: {}, accuracy: {}'", ".", "format", "(", "\n", "best_rec_epoch", ",", "round", "(", "best_rec", ",", "digits", ")", ",", "round", "(", "best_rec_acc", ",", "digits", ")", ",", "\n", "best_acc_epoch", ",", "round", "(", "best_acc_rec", ",", "digits", ")", ",", "round", "(", "best_acc", ",", "digits", ")", ",", "\n", "best_rec_epoch", ",", "round", "(", "best_met_rec", ",", "digits", ")", ",", "round", "(", "best_met_acc", ",", "digits", ")", "\n", ")", ")", "\n", "", "return", "cur_rec", ",", "best_rec", ",", "best_rec_epoch", ",", "best_rec_acc", ",", "cur_acc", ",", "best_acc", ",", "best_acc_epoch", ",", "best_acc_rec", ",", "cur_met", ",", "best_met", ",", "best_met_epoch", ",", "best_met_rec", ",", "best_met_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.RewardDistributor.__init__": [[606, 621], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sv", ":", "SymptomVocab", ",", "dv", ":", "DiseaseVocab", ",", "dscom", ")", ":", "\n", "\n", "        ", "self", ".", "sv", "=", "sv", "\n", "self", ".", "dv", "=", "dv", "\n", "\n", "# \u75c7\u72b6\u6062\u590d\u5956\u52b1", "\n", "self", ".", "pos_priori_reward", "=", "1.0", "\n", "self", ".", "neg_priori_reward", "=", "-", "1.0", "\n", "self", ".", "hit_reward", "=", "{", "1", ":", "10.0", ",", "2", ":", "5.0", ",", "3", ":", "5.0", "}", "\n", "self", ".", "decline_rate", "=", "0.1", "\n", "self", ".", "repeat_reward", "=", "0.0", "\n", "self", ".", "end_reward", "=", "0.0", "\n", "self", ".", "missed_reward", "=", "-", "0.2", "\n", "\n", "self", ".", "dscom", "=", "dscom", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.RewardDistributor.compute_sr_priori_reward": [[622, 631], ["reward.append", "reward.append"], "methods", ["None"], ["", "def", "compute_sr_priori_reward", "(", "self", ",", "action", ",", "dis_id", ",", "eps", "=", "0.0", ")", ":", "\n", "# \u5148\u9a8c\u5956\u52b1\uff0cpush\u667a\u80fd\u4f53\u4e0d\u751f\u6210\u65e0\u5173\u7684\u75c7\u72b6\uff08\u7531\u8bed\u6599\u5e93\u4e2d\u7684\u75be\u75c5-\u75c7\u72b6\u5171\u73b0\u77e9\u9635\u51b3\u5b9a\uff09", "\n", "        ", "reward", "=", "[", "]", "\n", "for", "act", "in", "action", ":", "\n", "            ", "if", "self", ".", "dscom", "[", "dis_id", ",", "act", "]", ">", "eps", ":", "\n", "                ", "reward", ".", "append", "(", "self", ".", "pos_priori_reward", ")", "\n", "", "else", ":", "\n", "                ", "reward", ".", "append", "(", "self", ".", "neg_priori_reward", ")", "\n", "", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.RewardDistributor.compute_sr_ground_reward": [[632, 657], ["enumerate", "set", "reward.append", "history_acts.add", "reward.append", "imp_sx.index", "reward.append", "reward.append", "len"], "methods", ["None"], ["", "def", "compute_sr_ground_reward", "(", "self", ",", "action", ",", "imp_sx", ",", "imp_attr", ",", "num_hit", ")", ":", "\n", "# \u771f\u5b9e\u5956\u52b1\uff0cpush\u667a\u80fd\u4f53\u751f\u6210ground truth\u4e2d\u7684\u75c7\u72b6", "\n", "# 1. \u5982\u679c\u667a\u80fd\u4f53\u751f\u6210\u4e86\u9690\u5f62\u75c7\u72b6\u4e2d\u5305\u542b\u7684\u75c7\u72b6\uff0c\u7ed9\u4e88\u6b63\u5411\u5956\u52b1", "\n", "# 2. \u5982\u679c\u667a\u80fd\u4f53\u751f\u6210\u4e86\u7ed3\u675f\u75c7\u72b6\uff0c\u7ed9\u4e88\u5956\u52b1\u7b49\u4e8e\u5f53\u524d\u5df2\u7ecf\u547d\u4e2d\u7684\u75c7\u72b6\u6570\u51cf\u53bb\u9690\u5f62\u75c7\u72b6\u4e2d\u5305\u542b\u7684\u75c7\u72b6\u6570\uff08\u8be5\u53c2\u6570\u8bbe\u7f6e\u4e0e\u667a\u80fd\u4f53\u7684\u8be2\u95ee\u8f6e\u6570\u7531\u76f4\u63a5\u5173\u7cfb\uff09", "\n", "# 3. \u5982\u679c\u667a\u80fd\u4f53\u751f\u6210\u4e86\u9690\u5f62\u75c7\u72b6\u4e2d\u4e0d\u5305\u542b\u7684\u75c7\u72b6\uff0c\u7ed9\u4e88\u8d1f\u5411\u5956\u52b1", "\n", "# 4. \u5982\u679c\u667a\u80fd\u4f53\u751f\u6210\u4e86\u5df2\u8be2\u95ee\u8fc7\u7684\u75c7\u72b6\uff0c\u7ed9\u4e88\u8d1f\u5411\u5956\u52b1", "\n", "        ", "reward", "=", "[", "]", "\n", "history_acts", ",", "num_repeat", "=", "set", "(", ")", ",", "0", "\n", "for", "i", ",", "act", "in", "enumerate", "(", "action", ")", ":", "\n", "            ", "if", "act", "in", "history_acts", ":", "\n", "                ", "num_repeat", "+=", "1", "\n", "reward", ".", "append", "(", "self", ".", "repeat_reward", ")", "\n", "", "else", ":", "\n", "                ", "history_acts", ".", "add", "(", "act", ")", "\n", "if", "act", "==", "self", ".", "sv", ".", "end_idx", ":", "\n", "                    ", "reward", ".", "append", "(", "num_hit", "-", "len", "(", "imp_sx", ")", "+", "self", ".", "end_reward", ")", "\n", "", "else", ":", "\n", "                    ", "if", "act", "in", "imp_sx", ":", "\n", "                        ", "idx", "=", "imp_sx", ".", "index", "(", "act", ")", "\n", "attr", "=", "imp_attr", "[", "idx", "]", "\n", "reward", ".", "append", "(", "self", ".", "hit_reward", "[", "attr", "]", "-", "i", "*", "self", ".", "decline_rate", ")", "\n", "# reward.append(self.hit_reward[attr])", "\n", "", "else", ":", "\n", "                        ", "reward", ".", "append", "(", "self", ".", "missed_reward", ")", "\n", "", "", "", "", "return", "reward", ",", "num_repeat", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.RewardDistributor.compute_sr_global_reward": [[658, 671], ["set().intersection", "nltk.translate.bleu_score.sentence_bleu", "set", "len", "set().union", "nltk.translate.bleu_score.SmoothingFunction", "set", "set"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_sr_global_reward", "(", "action", ",", "imp_sx", ",", "num_hit", ",", "eps", "=", "1e-3", ")", ":", "\n", "# \u5168\u5c40\u5956\u52b1\uff0cpush\u667a\u80fd\u4f53\u751f\u6210\u4e0e\u771f\u5b9e\u60c5\u51b5\u4e0b\uff0c\u987a\u5e8f\u5c3d\u53ef\u80fd\u7c7b\u4f3c\u7684\u5e8f\u5217", "\n", "# 1.\u975e\u5e8f\u5217\u76f8\u5173\u5956\u52b1\uff08\u6770\u5361\u5fb7\u8ddd\u79bb\uff09", "\n", "        ", "set", "(", "action", ")", ".", "intersection", "(", ")", "\n", "distance", "=", "(", "num_hit", "+", "eps", ")", "/", "(", "len", "(", "set", "(", "action", ")", ".", "union", "(", "set", "(", "imp_sx", ")", ")", ")", "+", "eps", ")", "\n", "# 2.\u5e8f\u5217\u76f8\u5173\u5956\u52b1\uff08BLEU\uff0c\u5176\u4e2ddenoise action\u662faction\u548c\u9690\u5f62\u75c7\u72b6\u5e8f\u5217\u4e2d\u7684\u516c\u5171\u5b50\u5e8f\u5217\uff09", "\n", "denoise_action", "=", "[", "act", "for", "act", "in", "action", "if", "act", "in", "imp_sx", "]", "\n", "bleu", "=", "sentence_bleu", "(", "[", "imp_sx", "]", ",", "denoise_action", ",", "smoothing_function", "=", "SmoothingFunction", "(", ")", ".", "method1", ")", "\n", "# \u8fd9\u4e9b\u5956\u52b1\u4ec5\u5206\u914d\u5230\u547d\u4e2d\u7684\u90a3\u4e9b\u75c7\u72b6\uff08\uff09", "\n", "distance", "=", "[", "distance", "if", "act", "in", "imp_sx", "else", "0", "for", "act", "in", "action", "]", "\n", "bleu", "=", "[", "bleu", "if", "act", "in", "imp_sx", "else", "0", "for", "act", "in", "action", "]", "\n", "return", "distance", ",", "bleu", ",", "denoise_action", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.RewardDistributor.compute_sr_reward": [[673, 712], ["data_utils.to_numpy_", "range", "sir.update", "data_utils.RewardDistributor.truncate_imp_sx", "data_utils.RewardDistributor.truncate_action", "num_turns.append", "len", "num_hits.append", "num_pos_hits.append", "num_neg_hits.append", "num_ns_hits.append", "data_utils.RewardDistributor.compute_sr_priori_reward", "data_utils.RewardDistributor.compute_sr_ground_reward", "num_repeats.append", "data_utils.RewardDistributor.compute_sr_global_reward", "distances.append", "bleus.append", "denoise_actions.append", "rewards.append", "len", "set().intersection", "len", "len", "len", "set", "set().intersection", "set().intersection", "set().intersection", "max", "max", "zip", "len", "set", "set", "set", "set", "len", "len", "set", "set", "set"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.to_numpy_", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SIRecorder.update", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.RewardDistributor.truncate_imp_sx", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.RewardDistributor.truncate_action", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.RewardDistributor.compute_sr_priori_reward", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.RewardDistributor.compute_sr_ground_reward", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.RewardDistributor.compute_sr_global_reward"], ["", "def", "compute_sr_reward", "(", "self", ",", "actions", ",", "np_batch", ",", "epoch", ",", "sir", ":", "SIRecorder", ")", ":", "\n", "        ", "batch_size", ",", "seq_len", "=", "actions", ".", "shape", "\n", "# \u5c06 actions \u8f6c\u5316\u4e3a numpy array", "\n", "actions", "=", "to_numpy_", "(", "actions", ")", "\n", "# \u521d\u59cb\u5316\u5956\u52b1\uff0c\u8be2\u95ee\u8f6e\u6570\uff0c\u75c7\u72b6\u547d\u4e2d\u6570\uff08yes/no/not sure\uff09", "\n", "rewards", ",", "num_turns", ",", "num_hits", ",", "num_pos_hits", ",", "num_neg_hits", ",", "num_ns_hits", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "# \u521d\u59cb\u5316\u91cd\u590d\u6b21\u6570\uff0c\u53bb\u566a\u7684\u52a8\u4f5c\u5e8f\u5217", "\n", "num_repeats", ",", "denoise_actions", ",", "distances", ",", "bleus", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "# \u8ba1\u7b97\u6bcf\u4e00\u4e2a\u5e8f\u5217\u7684\u56de\u62a5", "\n", "for", "idx", "in", "range", "(", "batch_size", ")", ":", "\n", "# break", "\n", "# \u5f97\u5230\u9690\u5f62\u75c7\u72b6\u5e8f\u5217\u7684yes/no/not sure\u5b50\u5e8f\u5217", "\n", "            ", "imp_sx", ",", "imp_attr", ",", "imp_pos_sx", ",", "imp_neg_sx", ",", "imp_ns_sx", "=", "self", ".", "truncate_imp_sx", "(", "idx", ",", "np_batch", ")", "\n", "# \u5f97\u5230\u52a8\u4f5c\u5e8f\u5217\uff08\u901a\u8fc7\u7ed3\u675f\u75c7\u72b6id\u8fdb\u884c\u622a\u65ad\uff09", "\n", "action", "=", "self", ".", "truncate_action", "(", "idx", ",", "actions", ")", "\n", "# \u8ba1\u7b97\u8be2\u95ee\u8f6e\u6570\uff0c\u75c7\u72b6\u547d\u4e2d\u6570\u7b49", "\n", "num_turns", ".", "append", "(", "len", "(", "action", ")", ")", "\n", "num_hit", "=", "len", "(", "set", "(", "action", ")", ".", "intersection", "(", "set", "(", "imp_sx", ")", ")", ")", "\n", "num_hits", ".", "append", "(", "num_hit", ")", "\n", "num_pos_hits", ".", "append", "(", "len", "(", "set", "(", "action", ")", ".", "intersection", "(", "set", "(", "imp_pos_sx", ")", ")", ")", ")", "\n", "num_neg_hits", ".", "append", "(", "len", "(", "set", "(", "action", ")", ".", "intersection", "(", "set", "(", "imp_neg_sx", ")", ")", ")", ")", "\n", "num_ns_hits", ".", "append", "(", "len", "(", "set", "(", "action", ")", ".", "intersection", "(", "set", "(", "imp_ns_sx", ")", ")", ")", ")", "\n", "# \u8ba1\u7b97\u5148\u9a8c\u5956\u52b1", "\n", "priori_reward", "=", "self", ".", "compute_sr_priori_reward", "(", "action", ",", "dis_id", "=", "np_batch", "[", "'labels'", "]", "[", "idx", "]", ")", "\n", "# \u8ba1\u7b97\u771f\u5b9e\u5956\u52b1", "\n", "ground_reward", ",", "num_repeat", "=", "self", ".", "compute_sr_ground_reward", "(", "action", ",", "imp_sx", ",", "imp_attr", ",", "num_hit", ")", "\n", "num_repeats", ".", "append", "(", "num_repeat", ")", "\n", "# \u8ba1\u7b97\u5168\u5c40\u5956\u52b1", "\n", "distance", ",", "bleu", ",", "denoise_action", "=", "self", ".", "compute_sr_global_reward", "(", "action", ",", "imp_sx", ",", "num_hit", ")", "\n", "distances", ".", "append", "(", "0", "if", "len", "(", "distance", ")", "==", "0", "else", "max", "(", "distance", ")", ")", "\n", "bleus", ".", "append", "(", "0", "if", "len", "(", "bleu", ")", "==", "0", "else", "max", "(", "bleu", ")", ")", "\n", "denoise_actions", ".", "append", "(", "denoise_action", ")", "\n", "# \u8ba1\u7b97\u6700\u7ec8\u5956\u52b1\uff08\u6bcf\u4e00\u6b65\u7684\u5956\u52b1\uff09", "\n", "reward", "=", "[", "pr", "+", "gr", "+", "dr", "+", "br", "for", "pr", ",", "gr", ",", "dr", ",", "br", "in", "zip", "(", "priori_reward", ",", "ground_reward", ",", "distance", ",", "bleu", ")", "]", "\n", "reward", "+=", "[", "0", "]", "*", "(", "seq_len", "-", "len", "(", "action", ")", ")", "\n", "rewards", ".", "append", "(", "reward", ")", "\n", "", "sir", ".", "update", "(", "rewards", ",", "num_turns", ",", "num_hits", ",", "num_pos_hits", ",", "num_neg_hits", ",", "\n", "num_ns_hits", ",", "num_repeats", ",", "distances", ",", "bleus", ",", "epoch", "=", "epoch", ")", "\n", "return", "rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.RewardDistributor.truncate_action": [[713, 716], ["actions[].tolist", "actions[].tolist.index"], "methods", ["None"], ["", "def", "truncate_action", "(", "self", ",", "idx", ":", "int", ",", "actions", ":", "list", ")", "->", "list", ":", "\n", "        ", "action", "=", "actions", "[", "idx", "]", ".", "tolist", "(", ")", "\n", "return", "action", "[", ":", "action", ".", "index", "(", "self", ".", "sv", ".", "end_idx", ")", "]", "if", "self", ".", "sv", ".", "end_idx", "in", "action", "else", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.RewardDistributor.truncate_imp_sx": [[717, 732], ["zip", "imp_sx.append", "imp_attr.append", "imp_pos_sx.append", "imp_neg_sx.append", "imp_ns_sx.append"], "methods", ["None"], ["", "def", "truncate_imp_sx", "(", "self", ",", "idx", ":", "int", ",", "np_batch", ":", "dict", ")", ":", "\n", "        ", "imp_sx", ",", "imp_attr", ",", "imp_pos_sx", ",", "imp_neg_sx", ",", "imp_ns_sx", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "sx_id", ",", "attr_id", "in", "zip", "(", "np_batch", "[", "'imp_sx_ids'", "]", "[", "1", ":", ",", "idx", "]", ",", "np_batch", "[", "'imp_attr_ids'", "]", "[", "1", ":", ",", "idx", "]", ")", ":", "\n", "            ", "if", "sx_id", "==", "self", ".", "sv", ".", "end_idx", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "imp_sx", ".", "append", "(", "sx_id", ")", "\n", "imp_attr", ".", "append", "(", "attr_id", ")", "\n", "if", "attr_id", "==", "self", ".", "sv", ".", "SX_ATTR_POS_IDX", ":", "\n", "                    ", "imp_pos_sx", ".", "append", "(", "sx_id", ")", "\n", "", "elif", "attr_id", "==", "self", ".", "sv", ".", "SX_ATTR_NEG_IDX", ":", "\n", "                    ", "imp_neg_sx", ".", "append", "(", "sx_id", ")", "\n", "", "elif", "attr_id", "==", "self", ".", "sv", ".", "SX_ATTR_NS_IDX", ":", "\n", "                    ", "imp_ns_sx", ".", "append", "(", "sx_id", ")", "\n", "", "", "", "return", "imp_sx", ",", "imp_attr", ",", "imp_pos_sx", ",", "imp_neg_sx", ",", "imp_ns_sx", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.lm_collater": [[267, 279], ["torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.stack", "torch.cat", "torch.cat"], "function", ["None"], ["", "", "def", "lm_collater", "(", "samples", ")", ":", "\n", "    ", "sx_ids", "=", "pad_sequence", "(", "\n", "[", "torch", ".", "cat", "(", "[", "sample", "[", "'exp_sx_ids'", "]", ",", "sample", "[", "'imp_sx_ids'", "]", "]", ")", "for", "sample", "in", "samples", "]", ",", "padding_value", "=", "0", ")", "\n", "attr_ids", "=", "pad_sequence", "(", "\n", "[", "torch", ".", "cat", "(", "[", "sample", "[", "'exp_attr_ids'", "]", ",", "sample", "[", "'imp_attr_ids'", "]", "]", ")", "for", "sample", "in", "samples", "]", ",", "padding_value", "=", "0", ")", "\n", "labels", "=", "torch", ".", "stack", "(", "[", "sample", "[", "'label'", "]", "for", "sample", "in", "samples", "]", ")", "\n", "items", "=", "{", "\n", "'sx_ids'", ":", "sx_ids", ",", "\n", "'attr_ids'", ":", "attr_ids", ",", "\n", "'labels'", ":", "labels", "\n", "}", "\n", "return", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.pg_collater": [[282, 296], ["torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.stack"], "function", ["None"], ["", "def", "pg_collater", "(", "samples", ")", ":", "\n", "    ", "exp_sx_ids", "=", "pad_sequence", "(", "[", "sample", "[", "'exp_sx_ids'", "]", "for", "sample", "in", "samples", "]", ",", "padding_value", "=", "0", ")", "\n", "exp_attr_ids", "=", "pad_sequence", "(", "[", "sample", "[", "'exp_attr_ids'", "]", "for", "sample", "in", "samples", "]", ",", "padding_value", "=", "0", ")", "\n", "imp_sx_ids", "=", "pad_sequence", "(", "[", "sample", "[", "'imp_sx_ids'", "]", "for", "sample", "in", "samples", "]", ",", "padding_value", "=", "0", ")", "\n", "imp_attr_ids", "=", "pad_sequence", "(", "[", "sample", "[", "'imp_attr_ids'", "]", "for", "sample", "in", "samples", "]", ",", "padding_value", "=", "0", ")", "\n", "labels", "=", "torch", ".", "stack", "(", "[", "sample", "[", "'label'", "]", "for", "sample", "in", "samples", "]", ")", "\n", "items", "=", "{", "\n", "'exp_sx_ids'", ":", "exp_sx_ids", ",", "\n", "'exp_attr_ids'", ":", "exp_attr_ids", ",", "\n", "'imp_sx_ids'", ":", "imp_sx_ids", ",", "\n", "'imp_attr_ids'", ":", "imp_attr_ids", ",", "\n", "'labels'", ":", "labels", "\n", "}", "\n", "return", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.recursive_sum": [[424, 432], ["isinstance", "sum", "data_utils.recursive_sum", "sum"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.recursive_sum"], ["", "", "def", "recursive_sum", "(", "item", ")", ":", "\n", "    ", "if", "isinstance", "(", "item", ",", "list", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "sum", "(", "item", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "return", "recursive_sum", "(", "sum", "(", "item", ",", "[", "]", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.average": [[434, 436], ["data_utils.recursive_sum", "data_utils.recursive_sum", "data_utils.recursive_sum"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.recursive_sum", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.recursive_sum", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.recursive_sum"], ["", "", "def", "average", "(", "numerator", ",", "denominator", ")", ":", "\n", "    ", "return", "0", "if", "recursive_sum", "(", "denominator", ")", "==", "0", "else", "recursive_sum", "(", "numerator", ")", "/", "recursive_sum", "(", "denominator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.to_numpy": [[438, 443], ["tensors.items", "tensor.cpu().numpy", "tensor.cpu"], "function", ["None"], ["", "def", "to_numpy", "(", "tensors", ")", ":", "\n", "    ", "arrays", "=", "{", "}", "\n", "for", "key", ",", "tensor", "in", "tensors", ".", "items", "(", ")", ":", "\n", "        ", "arrays", "[", "key", "]", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "arrays", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.to_numpy_": [[445, 447], ["tensor.cpu().numpy", "tensor.cpu"], "function", ["None"], ["", "def", "to_numpy_", "(", "tensor", ")", ":", "\n", "    ", "return", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.to_list": [[449, 451], ["to_numpy_().tolist", "data_utils.to_numpy_"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.to_numpy_"], ["", "def", "to_list", "(", "tensor", ")", ":", "\n", "    ", "return", "to_numpy_", "(", "tensor", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.to_numpy_vla": [[453, 458], ["arrays.append", "data_utils.to_numpy_"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.to_numpy_"], ["", "def", "to_numpy_vla", "(", "*", "tensors", ")", ":", "\n", "    ", "arrays", "=", "[", "]", "\n", "for", "tensor", "in", "tensors", ":", "\n", "        ", "arrays", ".", "append", "(", "to_numpy_", "(", "tensor", ")", ")", "\n", "", "return", "arrays", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.to_tensor_": [[460, 465], ["torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "to_tensor_", "(", "array", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "if", "dtype", "is", "None", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "array", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "array", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.to_tensor_vla": [[467, 472], ["tensors.append", "data_utils.to_tensor_"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.to_tensor_"], ["", "", "def", "to_tensor_vla", "(", "*", "arrays", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "tensors", "=", "[", "]", "\n", "for", "array", "in", "arrays", ":", "\n", "        ", "tensors", ".", "append", "(", "to_tensor_", "(", "array", ",", "dtype", ")", ")", "\n", "", "return", "tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.compute_num_sxs": [[474, 487], ["sample[].items"], "function", ["None"], ["", "def", "compute_num_sxs", "(", "samples", ")", ":", "\n", "    ", "num_yes_imp_sxs", "=", "0", "\n", "num_no_imp_sxs", "=", "0", "\n", "num_not_sure_imp_sxs", "=", "0", "\n", "for", "sample", "in", "samples", ":", "\n", "        ", "for", "sx", ",", "attr", "in", "sample", "[", "'imp_sxs'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "attr", "==", "'0'", ":", "\n", "                ", "num_no_imp_sxs", "+=", "1", "\n", "", "elif", "attr", "==", "'1'", ":", "\n", "                ", "num_yes_imp_sxs", "+=", "1", "\n", "", "else", ":", "\n", "                ", "num_not_sure_imp_sxs", "+=", "1", "\n", "", "", "", "return", "num_yes_imp_sxs", ",", "num_no_imp_sxs", ",", "num_not_sure_imp_sxs", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.combinations": [[489, 506], ["tuple", "len", "list", "range", "tuple", "reversed", "range", "range", "tuple"], "function", ["None"], ["", "def", "combinations", "(", "iterable", ",", "r", ")", ":", "\n", "    ", "pool", "=", "tuple", "(", "iterable", ")", "\n", "n", "=", "len", "(", "pool", ")", "\n", "if", "r", ">", "n", ":", "\n", "        ", "return", "\n", "", "indices", "=", "list", "(", "range", "(", "r", ")", ")", "\n", "yield", "tuple", "(", "pool", "[", "i", "]", "for", "i", "in", "indices", ")", "\n", "while", "True", ":", "\n", "        ", "for", "i", "in", "reversed", "(", "range", "(", "r", ")", ")", ":", "\n", "            ", "if", "indices", "[", "i", "]", "!=", "i", "+", "n", "-", "r", ":", "\n", "                ", "break", "\n", "", "", "else", ":", "\n", "            ", "return", "\n", "", "indices", "[", "i", "]", "+=", "1", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "r", ")", ":", "\n", "            ", "indices", "[", "j", "]", "=", "indices", "[", "j", "-", "1", "]", "+", "1", "\n", "", "yield", "tuple", "(", "pool", "[", "i", "]", "for", "i", "in", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.compute_dscom": [[509, 521], ["numpy.zeros", "isinstance", "sv.encode", "sv.encode", "dv.encode"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.encode", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.encode", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.encode"], ["", "", "def", "compute_dscom", "(", "samples", ",", "sv", ":", "SymptomVocab", ",", "dv", ":", "DiseaseVocab", ")", ":", "\n", "    ", "cm", "=", "np", ".", "zeros", "(", "(", "dv", ".", "num_dis", ",", "sv", ".", "num_sxs", ")", ")", "\n", "if", "not", "isinstance", "(", "samples", ",", "tuple", ")", ":", "\n", "        ", "samples", "=", "(", "samples", ",", ")", "\n", "", "for", "split", "in", "samples", ":", "\n", "        ", "for", "sample", "in", "split", ":", "\n", "            ", "exp_sx_ids", ",", "_", "=", "sv", ".", "encode", "(", "sample", "[", "'exp_sxs'", "]", ")", "\n", "imp_sx_ids", ",", "_", "=", "sv", ".", "encode", "(", "sample", "[", "'imp_sxs'", "]", ")", "\n", "dis_id", "=", "dv", ".", "encode", "(", "sample", "[", "'label'", "]", ")", "\n", "for", "sx_id", "in", "exp_sx_ids", "+", "imp_sx_ids", ":", "\n", "                ", "cm", "[", "dis_id", "]", "[", "sx_id", "]", "+=", "1", "\n", "", "", "", "return", "cm", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.compute_sscom": [[523, 541], ["numpy.zeros", "sv.encode", "sv.encode", "data_utils.combinations", "range", "range", "np.zeros.sum().reshape", "np.zeros.sum", "scipy.stats.truncnorm.rvs"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.encode", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.encode", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.combinations"], ["", "def", "compute_sscom", "(", "samples", ",", "sv", ":", "SymptomVocab", ",", "smooth", ":", "bool", "=", "True", ",", "normalize", ":", "bool", "=", "True", ")", ":", "\n", "    ", "cm", "=", "np", ".", "zeros", "(", "(", "sv", ".", "num_sxs", ",", "sv", ".", "num_sxs", ")", ")", "\n", "for", "sample", "in", "samples", ":", "\n", "        ", "exp_sx_ids", ",", "_", "=", "sv", ".", "encode", "(", "sample", "[", "'exp_sxs'", "]", ")", "\n", "imp_sx_ids", ",", "_", "=", "sv", ".", "encode", "(", "sample", "[", "'imp_sxs'", "]", ")", "\n", "sxs", "=", "exp_sx_ids", "+", "imp_sx_ids", "\n", "for", "(", "i", ",", "j", ")", "in", "combinations", "(", "sxs", ",", "2", ")", ":", "\n", "            ", "cm", "[", "i", "]", "[", "j", "]", "+=", "1", "\n", "cm", "[", "j", "]", "[", "i", "]", "+=", "1", "\n", "", "", "if", "smooth", ":", "\n", "        ", "min_val", ",", "max_val", "=", ".1", ",", ".5", "\n", "for", "i", "in", "range", "(", "sv", ".", "num_sxs", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "sv", ".", "num_sxs", ")", ":", "\n", "                ", "if", "cm", "[", "i", "]", "[", "j", "]", "==", "0", ":", "\n", "                    ", "cm", "[", "i", "]", "[", "j", "]", "=", "truncnorm", ".", "rvs", "(", "min_val", ",", "max_val", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "", "", "", "", "if", "normalize", ":", "\n", "        ", "cm", "=", "cm", "/", "cm", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "return", "cm", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.random_agent": [[543, 559], ["range", "recs.append", "sv.encode", "sv.encode", "numpy.random.choice", "len", "len", "sv.idx2sx.items", "sv.idx2sx.items"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.encode", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.encode"], ["", "def", "random_agent", "(", "samples", ",", "sv", ":", "SymptomVocab", ",", "max_turn", ":", "int", ",", "exclude_exp", ":", "bool", "=", "True", ",", "times", ":", "int", "=", "100", ")", ":", "\n", "    ", "recs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "times", ")", ":", "\n", "        ", "num_imp_sxs", ",", "num_hits", "=", "0", ",", "0", "\n", "for", "sample", "in", "samples", ":", "\n", "            ", "exp_sx_ids", ",", "_", "=", "sv", ".", "encode", "(", "sample", "[", "'exp_sxs'", "]", ",", "keep_unk", "=", "False", ")", "\n", "imp_sx_ids", ",", "_", "=", "sv", ".", "encode", "(", "sample", "[", "'imp_sxs'", "]", ",", "keep_unk", "=", "False", ")", "\n", "if", "exclude_exp", ":", "\n", "                ", "action_space", "=", "[", "sx_id", "for", "sx_id", ",", "_", "in", "sv", ".", "idx2sx", ".", "items", "(", ")", "if", "sx_id", "not", "in", "exp_sx_ids", "]", "\n", "", "else", ":", "\n", "                ", "action_space", "=", "[", "sx_id", "for", "sx_id", ",", "_", "in", "sv", ".", "idx2sx", ".", "items", "(", ")", "]", "\n", "", "actions", "=", "np", ".", "random", ".", "choice", "(", "action_space", ",", "size", "=", "max_turn", ",", "replace", "=", "False", ")", "\n", "num_imp_sxs", "+=", "len", "(", "imp_sx_ids", ")", "\n", "num_hits", "+=", "len", "(", "[", "action", "for", "action", "in", "actions", "if", "action", "in", "imp_sx_ids", "]", ")", "\n", "", "recs", ".", "append", "(", "num_hits", "/", "num_imp_sxs", ")", "\n", "", "return", "recs", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.rule_agent": [[561, 602], ["sv.encode", "sv.encode", "len", "len", "len", "set", "set", "range", "len", "len", "len", "numpy.zeros", "set.add", "actions.append", "zip", "zip", "numpy.flip", "numpy.flip", "numpy.argsort", "numpy.argsort", "set.union"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.encode", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.encode"], ["", "def", "rule_agent", "(", "samples", ",", "cm", ",", "sv", ":", "SymptomVocab", ",", "max_turn", ":", "int", ",", "exclude_exp", ":", "bool", "=", "True", ")", ":", "\n", "    ", "num_imp_sxs", ",", "num_pos_imp_sxs", ",", "num_neg_imp_sxs", "=", "0", ",", "0", ",", "0", "\n", "num_hits", ",", "num_pos_hits", ",", "num_neg_hits", "=", "0", ",", "0", ",", "0", "\n", "for", "sample", "in", "samples", ":", "\n", "        ", "exp_sx_ids", ",", "_", "=", "sv", ".", "encode", "(", "sample", "[", "'exp_sxs'", "]", ",", "keep_unk", "=", "False", ")", "\n", "imp_sx_ids", ",", "imp_attr_ids", "=", "sv", ".", "encode", "(", "sample", "[", "'imp_sxs'", "]", ",", "keep_unk", "=", "False", ")", "\n", "imp_pos_sx_ids", "=", "[", "sx_id", "for", "sx_id", ",", "attr_id", "in", "zip", "(", "imp_sx_ids", ",", "imp_attr_ids", ")", "if", "attr_id", "==", "sv", ".", "SX_ATTR_POS_IDX", "]", "\n", "imp_neg_sx_ids", "=", "[", "sx_id", "for", "sx_id", ",", "attr_id", "in", "zip", "(", "imp_sx_ids", ",", "imp_attr_ids", ")", "if", "attr_id", "==", "sv", ".", "SX_ATTR_NEG_IDX", "]", "\n", "num_imp_sxs", "+=", "len", "(", "imp_sx_ids", ")", "\n", "num_pos_imp_sxs", "+=", "len", "(", "imp_pos_sx_ids", ")", "\n", "num_neg_imp_sxs", "+=", "len", "(", "imp_neg_sx_ids", ")", "\n", "actions", "=", "[", "]", "\n", "current", "=", "set", "(", "exp_sx_ids", ")", "\n", "previous", "=", "set", "(", ")", "\n", "for", "step", "in", "range", "(", "max_turn", ")", ":", "\n", "# similarity score", "\n", "            ", "sim", "=", "np", ".", "zeros", "(", "sv", ".", "num_sxs", ")", "\n", "for", "sx", "in", "current", ":", "\n", "                ", "sim", "+=", "cm", "[", "sx", "]", "\n", "", "index", "=", "-", "1", "\n", "if", "exclude_exp", ":", "\n", "                ", "for", "index", "in", "np", ".", "flip", "(", "np", ".", "argsort", "(", "sim", ")", ")", ":", "\n", "                    ", "if", "index", "not", "in", "current", ".", "union", "(", "previous", ")", ":", "\n", "                        ", "break", "\n", "", "", "", "else", ":", "\n", "                ", "for", "index", "in", "np", ".", "flip", "(", "np", ".", "argsort", "(", "sim", ")", ")", ":", "\n", "                    ", "if", "index", "not", "in", "previous", ":", "\n", "                        ", "break", "\n", "# if index in imp_sx_ids and imp_attr_ids[imp_sx_ids.index(index)] == sv.SX_ATTR_POS_IDX:", "\n", "#     current.add(index)", "\n", "# if index in imp_sx_ids:", "\n", "#     current.add(index)", "\n", "", "", "", "previous", ".", "add", "(", "index", ")", "\n", "actions", ".", "append", "(", "index", ")", "\n", "", "num_hits", "+=", "len", "(", "[", "sx_id", "for", "sx_id", "in", "actions", "if", "sx_id", "in", "imp_sx_ids", "]", ")", "\n", "num_pos_hits", "+=", "len", "(", "[", "sx_id", "for", "sx_id", "in", "actions", "if", "sx_id", "in", "imp_pos_sx_ids", "]", ")", "\n", "num_neg_hits", "+=", "len", "(", "[", "sx_id", "for", "sx_id", "in", "actions", "if", "sx_id", "in", "imp_neg_sx_ids", "]", ")", "\n", "", "rec", "=", "num_hits", "/", "num_imp_sxs", "\n", "pos_rec", "=", "num_pos_hits", "/", "num_pos_imp_sxs", "\n", "neg_rec", "=", "num_neg_hits", "/", "num_neg_imp_sxs", "\n", "return", "rec", ",", "pos_rec", ",", "neg_rec", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.make_features_neural": [[734, 744], ["zip", "sv.decoder", "sv.decoder.items", "feats.append", "feature.append", "suffix.get"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.decoder"], ["", "", "def", "make_features_neural", "(", "sx_ids", ",", "attr_ids", ",", "labels", ",", "sv", ":", "SymptomVocab", ")", ":", "\n", "    ", "from", "conf", "import", "suffix", "\n", "feats", "=", "[", "]", "\n", "for", "sx_id", ",", "attr_id", "in", "zip", "(", "sx_ids", ",", "attr_ids", ")", ":", "\n", "        ", "feature", "=", "[", "]", "\n", "sample", "=", "sv", ".", "decoder", "(", "sx_id", ",", "attr_id", ")", "\n", "for", "sx", ",", "attr", "in", "sample", ".", "items", "(", ")", ":", "\n", "            ", "feature", ".", "append", "(", "sx", "+", "suffix", ".", "get", "(", "attr", ")", ")", "\n", "", "feats", ".", "append", "(", "' '", ".", "join", "(", "feature", ")", ")", "\n", "", "return", "feats", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.extract_features": [[746, 758], ["range", "len", "zip", "sx_feats.append", "attr_feats.append", "data_utils.to_tensor_", "data_utils.to_tensor_", "sx_feat.append", "attr_feat.append"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.to_tensor_", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.to_tensor_"], ["", "def", "extract_features", "(", "sx_ids", ",", "attr_ids", ",", "sv", ":", "SymptomVocab", ")", ":", "\n", "    ", "sx_feats", ",", "attr_feats", "=", "[", "]", ",", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "sx_ids", ")", ")", ":", "\n", "        ", "sx_feat", ",", "attr_feat", "=", "[", "sv", ".", "start_idx", "]", ",", "[", "sv", ".", "SX_ATTR_PAD_IDX", "]", "\n", "for", "sx_id", ",", "attr_id", "in", "zip", "(", "sx_ids", "[", "idx", "]", ",", "attr_ids", "[", "idx", "]", ")", ":", "\n", "            ", "if", "attr_id", "not", "in", "[", "sv", ".", "SX_ATTR_PAD_IDX", ",", "sv", ".", "SX_ATTR_NM_IDX", "]", ":", "\n", "# \u53bb\u9664\u65e0\u6548\u7684\u75c7\u72b6\u548c\u5c5e\u6027pairs", "\n", "                ", "sx_feat", ".", "append", "(", "sx_id", ")", "\n", "attr_feat", ".", "append", "(", "attr_id", ")", "\n", "", "", "sx_feats", ".", "append", "(", "to_tensor_", "(", "sx_feat", ")", ")", "\n", "attr_feats", ".", "append", "(", "to_tensor_", "(", "attr_feat", ")", ")", "\n", "", "return", "sx_feats", ",", "attr_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.make_features_xfmr": [[760, 780], ["torch.nn.utils.rnn.pad_sequence().long", "torch.nn.utils.rnn.pad_sequence().long", "torch.cat().permute", "torch.cat().permute", "data_utils.to_numpy_vla", "data_utils.extract_features", "data_utils.to_numpy_vla", "data_utils.extract_features", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.to_numpy_vla", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.extract_features", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.to_numpy_vla", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.extract_features"], ["", "def", "make_features_xfmr", "(", "sv", ":", "SymptomVocab", ",", "batch", ",", "si_sx_ids", "=", "None", ",", "si_attr_ids", "=", "None", ",", "merge_act", ":", "bool", "=", "False", ",", "\n", "merge_si", ":", "bool", "=", "False", ")", ":", "\n", "# convert to numpy", "\n", "    ", "assert", "merge_act", "or", "merge_si", "\n", "sx_feats", ",", "attr_feats", "=", "[", "]", ",", "[", "]", "\n", "if", "merge_act", ":", "\n", "        ", "act_sx_ids", "=", "torch", ".", "cat", "(", "[", "batch", "[", "'exp_sx_ids'", "]", ",", "batch", "[", "'imp_sx_ids'", "]", "]", ")", ".", "permute", "(", "[", "1", ",", "0", "]", ")", "\n", "act_attr_ids", "=", "torch", ".", "cat", "(", "[", "batch", "[", "'exp_attr_ids'", "]", ",", "batch", "[", "'imp_attr_ids'", "]", "]", ")", ".", "permute", "(", "[", "1", ",", "0", "]", ")", "\n", "act_sx_ids", ",", "act_attr_ids", "=", "to_numpy_vla", "(", "act_sx_ids", ",", "act_attr_ids", ")", "\n", "act_sx_feats", ",", "act_attr_feats", "=", "extract_features", "(", "act_sx_ids", ",", "act_attr_ids", ",", "sv", ")", "\n", "sx_feats", "+=", "act_sx_feats", "\n", "attr_feats", "+=", "act_attr_feats", "\n", "", "if", "merge_si", ":", "\n", "        ", "si_sx_ids", ",", "si_attr_ids", "=", "to_numpy_vla", "(", "si_sx_ids", ",", "si_attr_ids", ")", "\n", "si_sx_feats", ",", "si_attr_feats", "=", "extract_features", "(", "si_sx_ids", ",", "si_attr_ids", ",", "sv", ")", "\n", "sx_feats", "+=", "si_sx_feats", "\n", "attr_feats", "+=", "si_attr_feats", "\n", "", "sx_feats", "=", "pad_sequence", "(", "sx_feats", ",", "padding_value", "=", "sv", ".", "pad_idx", ")", ".", "long", "(", ")", "\n", "attr_feats", "=", "pad_sequence", "(", "attr_feats", ",", "padding_value", "=", "sv", ".", "SX_ATTR_PAD_IDX", ")", ".", "long", "(", ")", "\n", "return", "sx_feats", ",", "attr_feats", "\n", "", ""]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.make_features": [[16, 31], ["sample[].items", "sample[].items", "features.append", "labels.append", "feature.append", "dv.encode", "numpy.random.rand", "suffix.get", "feature.append", "int", "suffix.get"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.DiseaseVocab.encode"], ["def", "make_features", "(", "samples", ":", "list", ",", "dv", ":", "DiseaseVocab", ",", "add_imp", ":", "list", ",", "rec", ":", "float", "=", "1.0", ")", ":", "\n", "    ", "from", "conf", "import", "suffix", "\n", "# add_imp: a bool triple", "\n", "features", ",", "labels", "=", "[", "]", ",", "[", "]", "\n", "for", "sample", "in", "samples", ":", "\n", "        ", "feature", "=", "[", "]", "\n", "for", "sx", ",", "attr", "in", "sample", "[", "'exp_sxs'", "]", ".", "items", "(", ")", ":", "\n", "            ", "feature", ".", "append", "(", "sx", "+", "suffix", ".", "get", "(", "attr", ")", ")", "\n", "", "for", "sx", ",", "attr", "in", "sample", "[", "'imp_sxs'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "rec", ":", "\n", "                ", "if", "add_imp", "[", "int", "(", "attr", ")", "]", ":", "\n", "                    ", "feature", ".", "append", "(", "sx", "+", "suffix", ".", "get", "(", "attr", ")", ")", "\n", "", "", "", "features", ".", "append", "(", "' '", ".", "join", "(", "feature", ")", ")", "\n", "labels", ".", "append", "(", "dv", ".", "encode", "(", "sample", "[", "'label'", "]", ")", ")", "\n", "", "return", "features", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.run_svm_classifier": [[33, 45], ["sklearn.model_selection.GridSearchCV", "sklearn.svm.SVC.fit", "sklearn.svm.SVC", "sklearn.svm.SVC.fit", "sklearn.svm.SVC"], "function", ["None"], ["", "def", "run_svm_classifier", "(", "x_train", ",", "y_train", ",", "random_state", ":", "int", ",", "verbose", ":", "bool", ",", "tune", ":", "bool", "=", "True", ")", ":", "\n", "    ", "if", "tune", ":", "\n", "        ", "param_grid", "=", "[", "\n", "{", "'kernel'", ":", "[", "'rbf'", "]", ",", "'gamma'", ":", "[", "1e-3", ",", "1e-4", "]", ",", "'C'", ":", "[", "1e-2", ",", "1e-1", ",", "1", ",", "1e1", ",", "1e2", ",", "1e3", "]", "}", ",", "\n", "{", "'kernel'", ":", "[", "'linear'", "]", ",", "'C'", ":", "[", "1e-2", ",", "1e-1", ",", "1", ",", "1e1", ",", "1e2", ",", "1e3", "]", "}", "\n", "]", "\n", "clf", "=", "GridSearchCV", "(", "SVC", "(", "random_state", "=", "random_state", ")", ",", "param_grid", ",", "n_jobs", "=", "-", "1", ",", "verbose", "=", "verbose", ",", "scoring", "=", "'accuracy'", ")", "\n", "clf", ".", "fit", "(", "x_train", ",", "y_train", ")", "\n", "", "else", ":", "\n", "        ", "clf", "=", "SVC", "(", "random_state", "=", "random_state", ")", "\n", "clf", ".", "fit", "(", "x_train", ",", "y_train", ")", "\n", "", "return", "clf", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.run_dt_classifier": [[47, 62], ["sklearn.model_selection.GridSearchCV", "sklearn.tree.DecisionTreeClassifier.fit", "sklearn.tree.DecisionTreeClassifier", "sklearn.tree.DecisionTreeClassifier.fit", "sklearn.tree.DecisionTreeClassifier"], "function", ["None"], ["", "def", "run_dt_classifier", "(", "x_train", ",", "y_train", ",", "random_state", ":", "int", ",", "verbose", ":", "bool", ",", "tune", ":", "bool", "=", "True", ")", ":", "\n", "    ", "if", "tune", ":", "\n", "        ", "param_grid", "=", "{", "\n", "'max_depth'", ":", "[", "2", ",", "3", ",", "5", ",", "8", ",", "10", ",", "20", "]", ",", "\n", "'min_samples_leaf'", ":", "[", "5", ",", "10", ",", "20", ",", "50", ",", "100", "]", ",", "\n", "'criterion'", ":", "[", "\"gini\"", ",", "\"entropy\"", "]", "\n", "}", "\n", "clf", "=", "GridSearchCV", "(", "\n", "DecisionTreeClassifier", "(", "random_state", "=", "random_state", ")", ",", "param_grid", ",", "n_jobs", "=", "-", "1", ",", "verbose", "=", "verbose", ",", "\n", "scoring", "=", "'accuracy'", ")", "\n", "clf", ".", "fit", "(", "x_train", ",", "y_train", ")", "\n", "", "else", ":", "\n", "        ", "clf", "=", "DecisionTreeClassifier", "(", "random_state", "=", "random_state", ")", "\n", "clf", ".", "fit", "(", "x_train", ",", "y_train", ")", "\n", "", "return", "clf", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.run_rf_classifier": [[64, 81], ["sklearn.model_selection.GridSearchCV", "sklearn.tree.DecisionTreeClassifier.fit", "sklearn.tree.DecisionTreeClassifier", "sklearn.tree.DecisionTreeClassifier.fit", "sklearn.ensemble.RandomForestClassifier"], "function", ["None"], ["", "def", "run_rf_classifier", "(", "x_train", ",", "y_train", ",", "random_state", ":", "int", ",", "verbose", ":", "bool", ",", "tune", ":", "bool", "=", "True", ")", ":", "\n", "    ", "if", "tune", ":", "\n", "        ", "param_grid", "=", "{", "\n", "'max_features'", ":", "[", "'auto'", ",", "'sqrt'", "]", ",", "\n", "'max_depth'", ":", "[", "2", ",", "3", ",", "5", ",", "8", ",", "10", ",", "15", ",", "20", "]", ",", "\n", "'min_samples_split'", ":", "[", "2", ",", "5", ",", "10", "]", ",", "\n", "'min_samples_leaf'", ":", "[", "1", ",", "2", ",", "4", "]", ",", "\n", "'bootstrap'", ":", "[", "True", ",", "False", "]", "\n", "}", "\n", "clf", "=", "GridSearchCV", "(", "\n", "RandomForestClassifier", "(", "random_state", "=", "random_state", ")", ",", "param_grid", ",", "n_jobs", "=", "-", "1", ",", "verbose", "=", "verbose", ",", "\n", "scoring", "=", "'accuracy'", ")", "\n", "clf", ".", "fit", "(", "x_train", ",", "y_train", ")", "\n", "", "else", ":", "\n", "        ", "clf", "=", "DecisionTreeClassifier", "(", "random_state", "=", "random_state", ")", "\n", "clf", ".", "fit", "(", "x_train", ",", "y_train", ")", "\n", "", "return", "clf", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.run_gbdt_classifier": [[83, 99], ["sklearn.model_selection.GridSearchCV", "sklearn.ensemble.GradientBoostingClassifier.fit", "sklearn.ensemble.GradientBoostingClassifier", "sklearn.ensemble.GradientBoostingClassifier.fit", "sklearn.ensemble.GradientBoostingClassifier"], "function", ["None"], ["", "def", "run_gbdt_classifier", "(", "x_train", ",", "y_train", ",", "random_state", ":", "int", ",", "verbose", ":", "bool", ",", "tune", ":", "bool", "=", "True", ")", ":", "\n", "    ", "if", "tune", ":", "\n", "        ", "param_grid", "=", "{", "\n", "\"max_features\"", ":", "[", "'sqrt'", "]", ",", "\n", "\"max_depth\"", ":", "[", "5", ",", "8", ",", "10", ",", "12", "]", ",", "\n", "'min_samples_split'", ":", "[", "5", ",", "10", ",", "15", "]", ",", "\n", "'min_samples_leaf'", ":", "[", "1", ",", "2", ",", "3", "]", ",", "\n", "}", "\n", "clf", "=", "GridSearchCV", "(", "\n", "GradientBoostingClassifier", "(", "random_state", "=", "random_state", ")", ",", "param_grid", ",", "n_jobs", "=", "-", "1", ",", "verbose", "=", "verbose", ",", "\n", "scoring", "=", "'accuracy'", ")", "\n", "clf", ".", "fit", "(", "x_train", ",", "y_train", ")", "\n", "", "else", ":", "\n", "        ", "clf", "=", "GradientBoostingClassifier", "(", "random_state", "=", "random_state", ")", "\n", "clf", ".", "fit", "(", "x_train", ",", "y_train", ")", "\n", "", "return", "clf", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.train_classifier": [[101, 111], ["classifiers.get"], "function", ["None"], ["", "def", "train_classifier", "(", "x_train", ",", "y_train", ",", "classifier", ":", "str", ",", "random_state", ":", "int", ",", "verbose", ":", "bool", ",", "tune", ":", "bool", "=", "True", ")", ":", "\n", "    ", "classifiers", "=", "{", "\n", "'svm'", ":", "run_svm_classifier", ",", "\n", "'dt'", ":", "run_dt_classifier", ",", "\n", "'rf'", ":", "run_rf_classifier", ",", "\n", "'gbdt'", ":", "run_gbdt_classifier", ",", "\n", "}", "\n", "assert", "classifier", "in", "classifiers", ",", "'The specified classifier () is not supported.'", ".", "format", "(", "classifier", ")", "\n", "clf", "=", "classifiers", ".", "get", "(", "classifier", ")", "(", "x_train", ",", "y_train", ",", "random_state", ",", "verbose", ",", "tune", ")", "\n", "return", "clf", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.acc_f1_report": [[113, 120], ["sklearn.metrics.accuracy_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "print", "round", "round", "round"], "function", ["None"], ["", "def", "acc_f1_report", "(", "y_test", ",", "y_pred", ",", "digits", ":", "int", ")", ":", "\n", "    ", "acc", "=", "accuracy_score", "(", "y_test", ",", "y_pred", ")", "\n", "ma_f1", "=", "f1_score", "(", "y_test", ",", "y_pred", ",", "average", "=", "'macro'", ")", "\n", "wa_f1", "=", "f1_score", "(", "y_test", ",", "y_pred", ",", "average", "=", "'weighted'", ")", "\n", "print", "(", "'The accuracy/macro average f1/weighted average f1 on test set: {}/{}/{}'", ".", "format", "(", "\n", "round", "(", "acc", ",", "digits", ")", ",", "round", "(", "ma_f1", ",", "digits", ")", ",", "round", "(", "wa_f1", ",", "digits", ")", ")", ")", "\n", "return", "acc", ",", "ma_f1", ",", "wa_f1", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.cv_report": [[122, 134], ["print", "print", "print", "zip", "print", "print", "print", "print", "print", "sklearn.metrics.classification_report"], "function", ["None"], ["", "def", "cv_report", "(", "clf", ",", "y_test", ",", "y_pred", ",", "digits", ":", "int", ")", ":", "\n", "    ", "print", "(", "'Best parameters set found on development set:'", ")", "\n", "print", "(", "clf", ".", "best_params_", ")", "\n", "print", "(", "'Grid scores on development set:'", ")", "\n", "means", "=", "clf", ".", "cv_results_", "[", "'mean_test_score'", "]", "\n", "stds", "=", "clf", ".", "cv_results_", "[", "'std_test_score'", "]", "\n", "for", "mean", ",", "std", ",", "params", "in", "zip", "(", "means", ",", "stds", ",", "clf", ".", "cv_results_", "[", "'params'", "]", ")", ":", "\n", "        ", "print", "(", "'%0.3f (+/-%0.03f) for %r'", "%", "(", "mean", ",", "std", "*", "2", ",", "params", ")", ")", "\n", "", "print", "(", "'Detailed classification report:'", ")", "\n", "print", "(", "'The model is trained on the train/dev set.'", ")", "\n", "print", "(", "'The scores are computed on the test set.'", ")", "\n", "print", "(", "classification_report", "(", "y_test", ",", "y_pred", ",", "digits", "=", "digits", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.evaluate": [[136, 141], ["bound_utils.cv_report", "bound_utils.acc_f1_report"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.cv_report", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.acc_f1_report"], ["", "def", "evaluate", "(", "clf", ",", "y_test", ",", "y_pred", ",", "verbose", ":", "bool", ",", "digits", ":", "int", ")", ":", "\n", "    ", "if", "verbose", ":", "\n", "        ", "cv_report", "(", "clf", ",", "y_test", ",", "y_pred", ",", "digits", ")", "\n", "", "else", ":", "\n", "        ", "acc_f1_report", "(", "y_test", ",", "y_pred", ",", "digits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.build_classifier": [[143, 155], ["sklearn.feature_extraction.text.CountVectorizer", "sklearn.feature_extraction.text.CountVectorizer.fit_transform", "sklearn.feature_extraction.text.CountVectorizer.transform", "bound_utils.train_classifier", "train_classifier.predict", "bound_utils.evaluate"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.train_classifier", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomEncoderXFMR.predict", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.evaluate"], ["", "", "def", "build_classifier", "(", "x_train", ",", "y_train", ",", "x_test", ",", "y_test", ",", "classifier", ":", "str", ",", "random_state", ":", "int", ",", "verbose", ":", "bool", ",", "digits", ":", "int", ")", ":", "\n", "# vectorizer", "\n", "    ", "cv", "=", "CountVectorizer", "(", "tokenizer", "=", "tokenizer", ")", "\n", "_x_train", "=", "cv", ".", "fit_transform", "(", "x_train", ")", "\n", "_x_test", "=", "cv", ".", "transform", "(", "x_test", ")", "\n", "# training", "\n", "clf", "=", "train_classifier", "(", "_x_train", ",", "y_train", ",", "classifier", ",", "random_state", ",", "verbose", ")", "\n", "# inference", "\n", "y_pred", "=", "clf", ".", "predict", "(", "_x_test", ")", "\n", "# evaluate", "\n", "evaluate", "(", "clf", ",", "y_test", ",", "y_pred", ",", "verbose", ",", "digits", ")", "\n", "return", "clf", ",", "cv", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.run_classifier": [[157, 168], ["data_utils.DiseaseVocab", "bound_utils.make_features", "bound_utils.make_features", "bound_utils.build_classifier", "utils.save_pickle"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.make_features", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.make_features", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.build_classifier", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.save_pickle"], ["", "def", "run_classifier", "(", "train_samples", ":", "list", ",", "test_samples", ":", "list", ",", "add_imp", ":", "list", ",", "classifier", ":", "str", ",", "\n", "random_state", ":", "int", ",", "verbose", ":", "bool", ",", "digits", ":", "int", ",", "path", ":", "str", "=", "None", ")", ":", "\n", "# build disease vocabulary", "\n", "    ", "dv", "=", "DiseaseVocab", "(", "samples", "=", "train_samples", ")", "\n", "# make features", "\n", "x_train", ",", "y_train", "=", "make_features", "(", "train_samples", ",", "dv", ",", "add_imp", ")", "\n", "x_test", ",", "y_test", "=", "make_features", "(", "test_samples", ",", "dv", ",", "add_imp", ")", "\n", "clf", ",", "cv", "=", "build_classifier", "(", "x_train", ",", "y_train", ",", "x_test", ",", "y_test", ",", "classifier", ",", "random_state", ",", "verbose", ",", "digits", ")", "\n", "# dump classifier", "\n", "if", "path", "is", "not", "None", ":", "\n", "        ", "save_pickle", "(", "(", "clf", ",", "cv", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.run_classifiers": [[170, 186], ["print", "bound_utils.run_classifiers._run_classifier"], "function", ["None"], ["", "", "def", "run_classifiers", "(", "train_samples", ":", "list", ",", "test_samples", ":", "list", ",", "classifier", ":", "str", ",", "\n", "random_state", ":", "int", ",", "verbose", ":", "bool", ",", "digits", ":", "int", ")", ":", "\n", "\n", "    ", "def", "_run_classifier", "(", "add_imp", ")", ":", "\n", "        ", "return", "run_classifier", "(", "train_samples", ",", "test_samples", ",", "add_imp", ",", "classifier", ",", "random_state", ",", "verbose", ",", "digits", ")", "\n", "\n", "", "print", "(", "'='", "*", "100", "+", "'\\n{} acc lb.\\n'", ".", "format", "(", "classifier", ")", "+", "'='", "*", "100", ")", "\n", "_run_classifier", "(", "add_imp", "=", "[", "False", ",", "False", ",", "False", "]", ")", "\n", "print", "(", "'='", "*", "100", "+", "'\\n{} acc ub.\\n'", ".", "format", "(", "classifier", ")", "+", "'='", "*", "100", ")", "\n", "_run_classifier", "(", "add_imp", "=", "[", "True", ",", "True", ",", "True", "]", ")", "\n", "print", "(", "'='", "*", "100", "+", "'\\n{} acc ub (pos).\\n'", ".", "format", "(", "classifier", ")", "+", "'='", "*", "100", ")", "\n", "_run_classifier", "(", "add_imp", "=", "[", "False", ",", "True", ",", "False", "]", ")", "\n", "print", "(", "'='", "*", "100", "+", "'\\n{} acc ub (neg).\\n'", ".", "format", "(", "classifier", ")", "+", "'='", "*", "100", ")", "\n", "_run_classifier", "(", "add_imp", "=", "[", "True", ",", "False", ",", "True", "]", ")", "\n", "print", "(", "'='", "*", "100", "+", "'\\n{} acc ub (pos + neg).\\n'", ".", "format", "(", "classifier", ")", "+", "'='", "*", "100", ")", "\n", "_run_classifier", "(", "add_imp", "=", "[", "True", ",", "True", ",", "False", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.simulate": [[188, 197], ["data_utils.DiseaseVocab", "utils.load_pickle", "bound_utils.make_features", "clf.predict", "acc_scores.append", "cv.transform", "sklearn.metrics.accuracy_score"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.load_pickle", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.bound_utils.make_features", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomEncoderXFMR.predict"], ["", "def", "simulate", "(", "train_samples", ",", "test_samples", ",", "path", ",", "recs", ")", ":", "\n", "    ", "dv", "=", "DiseaseVocab", "(", "samples", "=", "train_samples", ")", "\n", "clf", ",", "cv", "=", "load_pickle", "(", "path", ")", "\n", "acc_scores", "=", "[", "]", "\n", "for", "rec", "in", "recs", ":", "\n", "        ", "x_test", ",", "y_test", "=", "make_features", "(", "test_samples", ",", "dv", ",", "add_imp", "=", "[", "True", ",", "True", ",", "True", "]", ",", "rec", "=", "rec", ")", "\n", "y_pred", "=", "clf", ".", "predict", "(", "cv", ".", "transform", "(", "x_test", ")", ")", "\n", "acc_scores", ".", "append", "(", "accuracy_score", "(", "y_test", ",", "y_pred", ")", ")", "\n", "", "return", "acc_scores", "\n", "", ""]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.PositionalEncoding.__init__": [[18, 28], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "layers.PositionalEncoding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.stat.STAT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dim", ":", "int", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "pos_dropout", ")", "\n", "\n", "position", "=", "torch", ".", "arange", "(", "pos_max_len", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "emb_dim", ",", "2", ")", "*", "(", "-", "math", ".", "log", "(", "10000.0", ")", "/", "emb_dim", ")", ")", "\n", "pe", "=", "torch", ".", "zeros", "(", "pos_max_len", ",", "1", ",", "emb_dim", ")", "\n", "pe", "[", ":", ",", "0", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "0", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.PositionalEncoding.forward": [[29, 32], ["layers.PositionalEncoding.dropout", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "pe", "[", ":", "x", ".", "size", "(", "0", ")", "]", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomDecoderXFMR.__init__": [[37, 56], ["torch.Module.__init__", "torch.TransformerEncoder", "torch.TransformerEncoder", "torch.Linear", "torch.Linear", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.stat.STAT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sx_embedding", ",", "attr_embedding", ",", "pos_embedding", ",", "num_sxs", ":", "int", ",", "emb_dim", ":", "int", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_sxs", "=", "num_sxs", "\n", "\n", "self", ".", "sx_embedding", "=", "sx_embedding", "\n", "self", ".", "attr_embedding", "=", "attr_embedding", "\n", "self", ".", "pos_embedding", "=", "pos_embedding", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "TransformerEncoder", "(", "\n", "encoder_layer", "=", "nn", ".", "TransformerEncoderLayer", "(", "\n", "d_model", "=", "emb_dim", ",", "\n", "nhead", "=", "dec_num_heads", ",", "\n", "dim_feedforward", "=", "dec_dim_feedforward", ",", "\n", "dropout", "=", "dec_dropout", ",", "\n", "activation", "=", "'relu'", ")", ",", "\n", "num_layers", "=", "dec_num_layers", ")", "\n", "\n", "self", ".", "sx_fc", "=", "nn", ".", "Linear", "(", "emb_dim", ",", "num_sxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomDecoderXFMR.forward": [[57, 66], ["layers.SymptomDecoderXFMR.decoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers.SymptomDecoderXFMR.pos_embedding", "layers.SymptomDecoderXFMR.sx_embedding", "layers.SymptomDecoderXFMR.attr_embedding", "layers.SymptomDecoderXFMR.sx_embedding", "layers.SymptomDecoderXFMR.attr_embedding"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.SymptomVocab.decoder"], ["", "def", "forward", "(", "self", ",", "sx_ids", ",", "attr_ids", ",", "mask", "=", "None", ",", "src_key_padding_mask", "=", "None", ")", ":", "\n", "        ", "if", "not", "sx_one_hot", "and", "not", "attr_one_hot", ":", "\n", "            ", "inputs", "=", "self", ".", "sx_embedding", "(", "sx_ids", ")", "+", "self", ".", "attr_embedding", "(", "attr_ids", ")", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "torch", ".", "cat", "(", "[", "self", ".", "sx_embedding", "(", "sx_ids", ")", ",", "self", ".", "attr_embedding", "(", "attr_ids", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "if", "dec_add_pos", ":", "\n", "            ", "inputs", "=", "self", ".", "pos_embedding", "(", "inputs", ")", "\n", "", "outputs", "=", "self", ".", "decoder", "(", "inputs", ",", "mask", ",", "src_key_padding_mask", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomDecoderXFMR.get_features": [[67, 70], ["layers.SymptomDecoderXFMR.sx_fc"], "methods", ["None"], ["", "def", "get_features", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "features", "=", "self", ".", "sx_fc", "(", "outputs", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomDecoderXFMR.compute_entropy": [[71, 73], ["torch.distributions.Categorical().entropy().item", "torch.distributions.Categorical().entropy().item", "torch.distributions.Categorical().entropy().item", "torch.distributions.Categorical().entropy().item", "math.log", "torch.distributions.Categorical().entropy", "torch.distributions.Categorical().entropy", "torch.distributions.Categorical().entropy", "torch.distributions.Categorical().entropy", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.nn.functional.softmax", "torch.nn.functional.softmax"], "methods", ["None"], ["", "def", "compute_entropy", "(", "self", ",", "features", ")", ":", "\n", "        ", "return", "torch", ".", "distributions", ".", "Categorical", "(", "functional", ".", "softmax", "(", "features", ",", "dim", "=", "-", "1", ")", ")", ".", "entropy", "(", ")", ".", "item", "(", ")", "/", "math", ".", "log", "(", "self", ".", "num_sxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomDecoderXFMR.init_repeat_score": [[74, 85], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "float", "range", "float"], "methods", ["None"], ["", "def", "init_repeat_score", "(", "self", ",", "bsz", ":", "int", ",", "sv", ":", "SymptomVocab", ",", "batch", ":", "dict", "=", "None", ")", ":", "\n", "        ", "prob", "=", "torch", ".", "zeros", "(", "bsz", ",", "self", ".", "num_sxs", ",", "device", "=", "device", ")", "\n", "prob", "[", ":", ",", ":", "sv", ".", "num_special", "]", "=", "float", "(", "'-inf'", ")", "\n", "prob", "[", ":", ",", "sv", ".", "end_idx", "]", "=", "0", "\n", "if", "exclude_exp", ":", "\n", "            ", "assert", "batch", "is", "not", "None", "\n", "for", "idx", "in", "range", "(", "bsz", ")", ":", "\n", "                ", "for", "sx", "in", "batch", "[", "'exp_sx_ids'", "]", "[", ":", ",", "idx", "]", ":", "\n", "                    ", "if", "sx", "!=", "sv", ".", "pad_idx", ":", "\n", "                        ", "prob", "[", "idx", ",", "sx", "]", "=", "float", "(", "'-inf'", ")", "\n", "", "", "", "", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomDecoderXFMR.update_repeat_score": [[86, 90], ["zip", "float", "act.item"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "update_repeat_score", "(", "action", ",", "score", ")", ":", "\n", "        ", "for", "act", ",", "sc", "in", "zip", "(", "action", ",", "score", ")", ":", "\n", "            ", "sc", "[", "act", ".", "item", "(", ")", "]", "=", "float", "(", "'-inf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomDecoderXFMR.simulate": [[91, 132], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers.SymptomDecoderXFMR.init_repeat_score", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "range", "actions.append", "log_probs.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "ps.init_sx_ids", "ps.init_attr_ids", "torch.cat.eq().transpose().contiguous", "torch.cat.eq().transpose().contiguous", "layers.SymptomDecoderXFMR.forward", "layers.SymptomDecoderXFMR.get_features", "layers.SymptomDecoderXFMR.update_repeat_score", "ps.answer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "actions.append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "log_probs.append", "torch.cat.eq().transpose", "torch.cat.eq().transpose", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.log_prob", "torch.distributions.Categorical.sample.unsqueeze", "q_attr_ids.unsqueeze", "torch.cat.eq", "torch.cat.eq"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomDecoderXFMR.init_repeat_score", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.PatientSimulator.init_sx_ids", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.PatientSimulator.init_attr_ids", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.Agent.forward", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomDecoderXFMR.get_features", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomDecoderXFMR.update_repeat_score", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.PatientSimulator.answer"], ["", "", "def", "simulate", "(", "self", ",", "batch", ":", "dict", ",", "ps", ":", "PatientSimulator", ",", "sv", ":", "SymptomVocab", ",", "max_turn", ":", "int", ",", "inference", ":", "bool", "=", "False", ")", ":", "\n", "# \u521d\u59cb\u5316\u8f93\u5165", "\n", "        ", "_", ",", "bsz", "=", "batch", "[", "'exp_sx_ids'", "]", ".", "shape", "\n", "sx_ids", "=", "torch", ".", "cat", "(", "[", "batch", "[", "'exp_sx_ids'", "]", ",", "ps", ".", "init_sx_ids", "(", "bsz", ")", "]", ")", "\n", "attr_ids", "=", "torch", ".", "cat", "(", "[", "batch", "[", "'exp_attr_ids'", "]", ",", "ps", ".", "init_attr_ids", "(", "bsz", ")", "]", ")", "\n", "# \u521d\u59cb\u5316\u91cd\u590d\u5206\u6570\uff0c\u624b\u52a8\u5c06\u9009\u62e9\u7279\u6b8asymptom\u7684action\u7684\u6982\u7387\u8bbe\u7f6e\u4e3a\u65e0\u7a77\u5c0f", "\n", "repeat_score", "=", "self", ".", "init_repeat_score", "(", "bsz", ",", "sv", ",", "batch", ")", "\n", "actions", ",", "log_probs", "=", "[", "]", ",", "[", "]", "\n", "# \u91c7\u6837 trajectory", "\n", "if", "max_turn", ">", "0", ":", "\n", "            ", "for", "step", "in", "range", "(", "max_turn", ")", ":", "\n", "# \u524d\u5411\u4f20\u64ad\u8ba1\u7b97\u9009\u62e9\u6bcf\u4e2aaction\u7684\u6982\u7387", "\n", "                ", "src_key_padding_mask", "=", "sx_ids", ".", "eq", "(", "sv", ".", "pad_idx", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "outputs", "=", "self", ".", "forward", "(", "sx_ids", ",", "attr_ids", ",", "src_key_padding_mask", "=", "src_key_padding_mask", ")", "\n", "features", "=", "self", ".", "get_features", "(", "outputs", "[", "-", "1", "]", ")", "\n", "if", "inference", ":", "\n", "# greedy decoding", "\n", "                    ", "action", "=", "(", "features", "+", "repeat_score", ")", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "# \u6839\u636epolicy\u7f51\u7edc\u5f53\u524d\u7684\u53c2\u6570\u62bd\u6837", "\n", "                    ", "policy", "=", "Categorical", "(", "functional", ".", "softmax", "(", "features", "+", "repeat_score", ",", "dim", "=", "-", "1", ")", ")", "\n", "action", "=", "policy", ".", "sample", "(", ")", "\n", "log_probs", ".", "append", "(", "policy", ".", "log_prob", "(", "action", ")", ")", "\n", "# \u8ba9\u5df2\u7ecf\u9009\u62e9\u7684action\u518d\u6b21\u88ab\u89e3\u7801\u51fa\u7684\u6982\u7387\u4e3a\u65e0\u7a77\u5c0f", "\n", "", "self", ".", "update_repeat_score", "(", "action", ",", "repeat_score", ")", "\n", "# \u4e0e\u75c5\u4eba\u6a21\u62df\u5668\u8fdb\u884c\u4ea4\u4e92\uff0c\u75c5\u4eba\u6a21\u62df\u5668\u544a\u77e5agent\u75c5\u4eba\u662f\u5426\u5177\u6709\u8be5\u75c7\u72b6", "\n", "_", ",", "q_attr_ids", "=", "ps", ".", "answer", "(", "action", ",", "batch", ")", "\n", "# \u66f4\u65b0 transformer \u7684\u8f93\u5165", "\n", "sx_ids", "=", "torch", ".", "cat", "(", "[", "sx_ids", ",", "action", ".", "unsqueeze", "(", "dim", "=", "0", ")", "]", ")", "\n", "attr_ids", "=", "torch", ".", "cat", "(", "[", "attr_ids", ",", "q_attr_ids", ".", "unsqueeze", "(", "dim", "=", "0", ")", "]", ")", "\n", "# \u8bb0\u5f55\u9009\u62e9\u7684\u52a8\u4f5c\u548c\u5bf9\u6570\u6982\u7387\uff08\u4fbf\u4e8e\u4e4b\u540e\u8ba1\u7b97\u56de\u62a5\u548c\u4f18\u5316\uff09", "\n", "actions", ".", "append", "(", "action", ")", "\n", "", "", "else", ":", "\n", "            ", "actions", ".", "append", "(", "torch", ".", "tensor", "(", "[", "sv", ".", "end_idx", "]", "*", "bsz", ",", "device", "=", "device", ")", ")", "\n", "log_probs", ".", "append", "(", "torch", ".", "tensor", "(", "[", "0", "]", "*", "bsz", ",", "device", "=", "device", ")", ")", "\n", "# \u8fd4\u56de\u6574\u4e2abatch\u7684 trajectory \u548c\u5bf9\u6570\u6982\u7387", "\n", "", "si_actions", "=", "torch", ".", "stack", "(", "actions", ",", "dim", "=", "1", ")", "\n", "si_log_probs", "=", "None", "if", "inference", "else", "torch", ".", "stack", "(", "log_probs", ",", "dim", "=", "1", ")", "\n", "si_sx_ids", "=", "sx_ids", ".", "permute", "(", "(", "1", ",", "0", ")", ")", "\n", "si_attr_ids", "=", "attr_ids", ".", "permute", "(", "(", "1", ",", "0", ")", ")", "\n", "return", "si_actions", ",", "si_log_probs", ",", "si_sx_ids", ",", "si_attr_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomDecoderXFMR.inference": [[133, 135], ["layers.SymptomDecoderXFMR.simulate"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomDecoderXFMR.simulate"], ["", "def", "inference", "(", "self", ",", "batch", ":", "dict", ",", "ps", ":", "PatientSimulator", ",", "sv", ":", "SymptomVocab", ",", "max_turn", ":", "int", ")", ":", "\n", "        ", "return", "self", ".", "simulate", "(", "batch", ",", "ps", ",", "sv", ",", "max_turn", ",", "inference", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomDecoderXFMR.generate": [[136, 147], ["layers.SymptomDecoderXFMR.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "layers.SymptomDecoderXFMR.inference", "ds_sx_ids.extend", "ds_attr_ids.extend", "ds_labels.extend", "to_list", "to_list", "to_list"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomEncoderXFMR.inference", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.to_list", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.to_list", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.to_list"], ["", "def", "generate", "(", "self", ",", "ds_loader", ",", "ps", ":", "PatientSimulator", ",", "sv", ":", "SymptomVocab", ",", "max_turn", ":", "int", ")", ":", "\n", "        ", "from", "data_utils", "import", "to_list", "\n", "ds_sx_ids", ",", "ds_attr_ids", ",", "ds_labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "self", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch", "in", "tqdm", "(", "ds_loader", ")", ":", "\n", "                ", "_", ",", "_", ",", "sx_ids", ",", "attr_ids", "=", "self", ".", "inference", "(", "batch", ",", "ps", ",", "sv", ",", "max_turn", ")", "\n", "ds_sx_ids", ".", "extend", "(", "to_list", "(", "sx_ids", ")", ")", "\n", "ds_attr_ids", ".", "extend", "(", "to_list", "(", "attr_ids", ")", ")", "\n", "ds_labels", ".", "extend", "(", "to_list", "(", "batch", "[", "'labels'", "]", ")", ")", "\n", "", "", "return", "ds_sx_ids", ",", "ds_attr_ids", ",", "ds_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomEncoderXFMR.__init__": [[151, 168], ["torch.Module.__init__", "torch.TransformerEncoder", "torch.TransformerEncoder", "torch.Linear", "torch.Linear", "torch.TransformerEncoderLayer", "torch.TransformerEncoderLayer"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.stat.STAT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sx_embedding", ",", "attr_embedding", ",", "num_dis", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_dis", "=", "num_dis", "\n", "self", ".", "sx_embedding", "=", "sx_embedding", "\n", "self", ".", "attr_embedding", "=", "attr_embedding", "\n", "\n", "self", ".", "encoder", "=", "nn", ".", "TransformerEncoder", "(", "\n", "encoder_layer", "=", "nn", ".", "TransformerEncoderLayer", "(", "\n", "d_model", "=", "enc_emb_dim", ",", "\n", "nhead", "=", "enc_num_heads", ",", "\n", "dim_feedforward", "=", "enc_num_layers", ",", "\n", "dropout", "=", "enc_dropout", ",", "\n", "activation", "=", "'relu'", ")", ",", "\n", "num_layers", "=", "enc_num_layers", ")", "\n", "\n", "self", ".", "dis_fc", "=", "nn", ".", "Linear", "(", "enc_emb_dim", ",", "num_dis", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomEncoderXFMR.forward": [[169, 176], ["layers.SymptomEncoderXFMR.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers.SymptomEncoderXFMR.sx_embedding", "layers.SymptomEncoderXFMR.attr_embedding", "layers.SymptomEncoderXFMR.sx_embedding", "layers.SymptomEncoderXFMR.attr_embedding"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sx_ids", ",", "attr_ids", ",", "mask", "=", "None", ",", "src_key_padding_mask", "=", "None", ")", ":", "\n", "        ", "if", "not", "sx_one_hot", "and", "not", "attr_one_hot", ":", "\n", "            ", "inputs", "=", "self", ".", "sx_embedding", "(", "sx_ids", ")", "+", "self", ".", "attr_embedding", "(", "attr_ids", ")", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "torch", ".", "cat", "(", "[", "self", ".", "sx_embedding", "(", "sx_ids", ")", ",", "self", ".", "attr_embedding", "(", "attr_ids", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "outputs", "=", "self", ".", "encoder", "(", "inputs", ",", "mask", ",", "src_key_padding_mask", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomEncoderXFMR.get_mp_features": [[178, 187], ["sx_ids.eq().transpose().contiguous", "layers.SymptomEncoderXFMR.forward", "mp_mask.unsqueeze().expand", "layers.SymptomEncoderXFMR.dis_fc", "sx_ids.eq().int", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "sx_ids.eq().transpose", "mp_mask.unsqueeze", "sx_ids.eq", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "sx_ids.eq"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.Agent.forward"], ["", "def", "get_mp_features", "(", "self", ",", "sx_ids", ",", "attr_ids", ",", "pad_idx", ")", ":", "\n", "        ", "src_key_padding_mask", "=", "sx_ids", ".", "eq", "(", "pad_idx", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "outputs", "=", "self", ".", "forward", "(", "sx_ids", ",", "attr_ids", ",", "src_key_padding_mask", "=", "src_key_padding_mask", ")", "\n", "seq_len", ",", "batch_size", ",", "emb_dim", "=", "outputs", ".", "shape", "\n", "mp_mask", "=", "(", "1", "-", "sx_ids", ".", "eq", "(", "pad_idx", ")", ".", "int", "(", ")", ")", "\n", "mp_mask_", "=", "mp_mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "seq_len", ",", "batch_size", ",", "emb_dim", ")", "\n", "avg_outputs", "=", "torch", ".", "sum", "(", "outputs", "*", "mp_mask_", ",", "dim", "=", "0", ")", "/", "torch", ".", "sum", "(", "mp_mask", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "features", "=", "self", ".", "dis_fc", "(", "avg_outputs", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomEncoderXFMR.predict": [[188, 192], ["layers.SymptomEncoderXFMR.get_mp_features", "layers.SymptomEncoderXFMR.argmax"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomEncoderXFMR.get_mp_features"], ["", "def", "predict", "(", "self", ",", "sx_ids", ",", "attr_ids", ",", "pad_idx", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "get_mp_features", "(", "sx_ids", ",", "attr_ids", ",", "pad_idx", ")", "\n", "labels", "=", "outputs", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomEncoderXFMR.inference": [[193, 195], ["layers.SymptomEncoderXFMR.simulate"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomDecoderXFMR.simulate"], ["", "def", "inference", "(", "self", ",", "sx_ids", ",", "attr_ids", ",", "pad_idx", ")", ":", "\n", "        ", "return", "self", ".", "simulate", "(", "sx_ids", ",", "attr_ids", ",", "pad_idx", ",", "inference", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomEncoderXFMR.compute_entropy": [[196, 198], ["torch.distributions.Categorical().entropy().item", "torch.distributions.Categorical().entropy().item", "torch.distributions.Categorical().entropy().item", "torch.distributions.Categorical().entropy().item", "torch.distributions.Categorical().entropy", "torch.distributions.Categorical().entropy", "torch.distributions.Categorical().entropy", "torch.distributions.Categorical().entropy", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.nn.functional.softmax", "torch.nn.functional.softmax"], "methods", ["None"], ["", "def", "compute_entropy", "(", "self", ",", "features", ")", ":", "\n", "        ", "return", "torch", ".", "distributions", ".", "Categorical", "(", "functional", ".", "softmax", "(", "features", ",", "dim", "=", "-", "1", ")", ")", ".", "entropy", "(", ")", ".", "item", "(", ")", "/", "self", ".", "num_dis", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomEncoderXFMR.compute_max_prob": [[199, 202], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.nn.functional.softmax", "torch.nn.functional.softmax"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_max_prob", "(", "features", ")", ":", "\n", "        ", "return", "torch", ".", "max", "(", "functional", ".", "softmax", "(", "features", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.Agent.__init__": [[206, 238], ["torch.Module.__init__", "layers.PositionalEncoding", "layers.SymptomDecoderXFMR", "layers.SymptomEncoderXFMR", "torch.Embedding", "torch.Embedding", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.stat.STAT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_sxs", ":", "int", ",", "num_dis", ":", "int", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "sx_one_hot", ":", "\n", "            ", "sx_embedding", "=", "nn", ".", "Embedding", "(", "num_sxs", ",", "num_sxs", ")", "\n", "sx_embedding", ".", "weight", ".", "data", "=", "torch", ".", "eye", "(", "num_sxs", ")", "\n", "sx_embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "self", ".", "sx_embedding", "=", "sx_embedding", "\n", "", "else", ":", "\n", "            ", "self", ".", "sx_embedding", "=", "nn", ".", "Embedding", "(", "num_sxs", ",", "dec_emb_dim", ",", "padding_idx", "=", "0", ")", "\n", "\n", "", "if", "attr_one_hot", ":", "\n", "            ", "attr_embedding", "=", "nn", ".", "Embedding", "(", "num_attrs", ",", "num_attrs", ")", "\n", "attr_embedding", ".", "weight", ".", "data", "=", "torch", ".", "eye", "(", "num_attrs", ")", "\n", "attr_embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "self", ".", "attr_embedding", "=", "attr_embedding", "\n", "", "else", ":", "\n", "            ", "self", ".", "attr_embedding", "=", "nn", ".", "Embedding", "(", "num_attrs", ",", "dec_emb_dim", ",", "padding_idx", "=", "0", ")", "\n", "\n", "", "if", "self", ".", "sx_embedding", ".", "weight", ".", "data", ".", "shape", "[", "-", "1", "]", "!=", "self", ".", "attr_embedding", ".", "weight", ".", "data", ".", "shape", "[", "-", "1", "]", ":", "\n", "            ", "emb_dim", "=", "self", ".", "sx_embedding", ".", "weight", ".", "data", ".", "shape", "[", "-", "1", "]", "+", "self", ".", "attr_embedding", ".", "weight", ".", "data", ".", "shape", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "emb_dim", "=", "dec_emb_dim", "\n", "\n", "", "self", ".", "pos_embedding", "=", "PositionalEncoding", "(", "emb_dim", ")", "\n", "\n", "self", ".", "symptom_decoder", "=", "SymptomDecoderXFMR", "(", "\n", "self", ".", "sx_embedding", ",", "self", ".", "attr_embedding", ",", "self", ".", "pos_embedding", ",", "num_sxs", ",", "emb_dim", ")", "\n", "\n", "self", ".", "symptom_encoder", "=", "SymptomEncoderXFMR", "(", "\n", "self", ".", "sx_embedding", ",", "self", ".", "attr_embedding", ",", "num_dis", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.Agent.forward": [[240, 242], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.Agent.load": [[243, 248], ["os.path.exists", "layers.Agent.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "print"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.Agent.load", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.Agent.load", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.Agent.load", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.Agent.load"], ["", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ")", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "'loading pre-trained parameters from {} ...'", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.Agent.save": [[249, 253], ["torch.save", "torch.save", "torch.save", "torch.save", "layers.Agent.state_dict", "print"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.Agent.save", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.Agent.save", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.Agent.save", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.Agent.save"], ["", "", "", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "torch", ".", "save", "(", "self", ".", "state_dict", "(", ")", ",", "path", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'saving best model to {}'", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.Agent.execute": [[254, 281], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers.Agent.symptom_decoder.init_repeat_score", "range", "torch.cat.clone().permute", "torch.cat.clone().permute", "torch.cat.clone().permute", "torch.cat.clone().permute", "make_features_xfmr", "layers.Agent.symptom_encoder.get_mp_features", "layers.Agent.symptom_encoder.compute_max_prob().item", "torch.cat.eq().transpose().contiguous", "torch.cat.eq().transpose().contiguous", "layers.Agent.symptom_decoder.forward", "layers.Agent.symptom_decoder.get_features", "layers.Agent.symptom_decoder.update_repeat_score", "ps.answer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ps.init_sx_ids", "ps.init_attr_ids", "batch[].eq().item", "torch.cat.clone", "torch.cat.clone", "torch.cat.clone", "torch.cat.clone", "layers.Agent.symptom_encoder.compute_max_prob", "torch.cat.eq().transpose", "torch.cat.eq().transpose", "action.unsqueeze", "q_attr_ids.unsqueeze", "batch[].eq", "layers.Agent.argmax", "torch.cat.eq", "torch.cat.eq"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomDecoderXFMR.init_repeat_score", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.make_features_xfmr", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomEncoderXFMR.get_mp_features", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.Agent.forward", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomDecoderXFMR.get_features", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomDecoderXFMR.update_repeat_score", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.PatientSimulator.answer", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.PatientSimulator.init_sx_ids", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.data_utils.PatientSimulator.init_attr_ids", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.SymptomEncoderXFMR.compute_max_prob"], ["", "", "def", "execute", "(", "self", ",", "batch", ":", "dict", ",", "ps", ":", "PatientSimulator", ",", "sv", ":", "SymptomVocab", ",", "max_turn", ":", "int", ",", "eps", ":", "float", ")", ":", "\n", "        ", "from", "data_utils", "import", "make_features_xfmr", "\n", "_", ",", "bsz", "=", "batch", "[", "'exp_sx_ids'", "]", ".", "shape", "\n", "sx_ids", "=", "torch", ".", "cat", "(", "[", "batch", "[", "'exp_sx_ids'", "]", ",", "ps", ".", "init_sx_ids", "(", "bsz", ")", "]", ")", "\n", "attr_ids", "=", "torch", ".", "cat", "(", "[", "batch", "[", "'exp_attr_ids'", "]", ",", "ps", ".", "init_attr_ids", "(", "bsz", ")", "]", ")", "\n", "repeat_score", "=", "self", ".", "symptom_decoder", ".", "init_repeat_score", "(", "bsz", ",", "sv", ",", "batch", ")", "\n", "for", "step", "in", "range", "(", "max_turn", "+", "1", ")", ":", "\n", "# \u6bcf\u4e00\u4e2astep\uff0c\u5148\u89c2\u5bdf encoder \u7684 entropy \u662f\u5426\u5df2\u7ecf\u6709\u8db3\u591f\u7684 confidence \u7ed9\u51fa\u8bca\u65ad\u7ed3\u679c", "\n", "            ", "si_sx_ids", "=", "sx_ids", ".", "clone", "(", ")", ".", "permute", "(", "(", "1", ",", "0", ")", ")", "\n", "si_attr_ids", "=", "attr_ids", ".", "clone", "(", ")", ".", "permute", "(", "(", "1", ",", "0", ")", ")", "\n", "si_sx_feats", ",", "si_attr_feats", "=", "make_features_xfmr", "(", "\n", "sv", ",", "batch", ",", "si_sx_ids", ",", "si_attr_ids", ",", "merge_act", "=", "False", ",", "merge_si", "=", "True", ")", "\n", "dc_outputs", "=", "self", ".", "symptom_encoder", ".", "get_mp_features", "(", "si_sx_feats", ",", "si_attr_feats", ",", "sv", ".", "pad_idx", ")", "\n", "prob", "=", "self", ".", "symptom_encoder", ".", "compute_max_prob", "(", "dc_outputs", ")", ".", "item", "(", ")", "\n", "if", "prob", ">", "eps", "or", "step", "==", "max_turn", ":", "\n", "                ", "is_success", "=", "batch", "[", "'labels'", "]", ".", "eq", "(", "dc_outputs", ".", "argmax", "(", "dim", "=", "-", "1", ")", ")", ".", "item", "(", ")", "\n", "max_prob", "=", "prob", "\n", "return", "step", ",", "is_success", ",", "max_prob", "\n", "# \u518d\u89c2\u5bdf decoder \u7684 entropy \u662f\u5426\u5df2\u7ecf\u6709\u8db3\u591f\u7684 confidence \u7ed9\u51fa\u8bca\u65ad\u7ed3\u679c", "\n", "", "src_key_padding_mask", "=", "sx_ids", ".", "eq", "(", "sv", ".", "pad_idx", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "outputs", "=", "self", ".", "symptom_decoder", ".", "forward", "(", "sx_ids", ",", "attr_ids", ",", "src_key_padding_mask", "=", "src_key_padding_mask", ")", "\n", "features", "=", "self", ".", "symptom_decoder", ".", "get_features", "(", "outputs", "[", "-", "1", "]", ")", "\n", "action", "=", "(", "features", "+", "repeat_score", ")", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "symptom_decoder", ".", "update_repeat_score", "(", "action", ",", "repeat_score", ")", "\n", "_", ",", "q_attr_ids", "=", "ps", ".", "answer", "(", "action", ",", "batch", ")", "\n", "sx_ids", "=", "torch", ".", "cat", "(", "[", "sx_ids", ",", "action", ".", "unsqueeze", "(", "dim", "=", "0", ")", "]", ")", "\n", "attr_ids", "=", "torch", ".", "cat", "(", "[", "attr_ids", ",", "q_attr_ids", ".", "unsqueeze", "(", "dim", "=", "0", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.stat.STAT.__init__": [[7, 10], ["utils.load_data", "utils.load_data"], "methods", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.load_data", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.load_data"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "train_samples", ",", "test_samples", "=", "load_data", "(", "train_path", ")", ",", "load_data", "(", "test_path", ")", "\n", "self", ".", "samples", "=", "train_samples", "+", "test_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.stat.STAT.count_num_samples": [[11, 13], ["print", "len"], "methods", ["None"], ["", "def", "count_num_samples", "(", "self", ")", ":", "\n", "        ", "print", "(", "'number of diseases: {}'", ".", "format", "(", "len", "(", "self", ".", "samples", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.stat.STAT.compute_num_diseases": [[14, 21], ["set", "print", "len", "set.add", "len"], "methods", ["None"], ["", "def", "compute_num_diseases", "(", "self", ")", ":", "\n", "# num of diseases", "\n", "        ", "dis", "=", "set", "(", ")", "\n", "for", "sample", "in", "self", ".", "samples", ":", "\n", "            ", "dis", ".", "add", "(", "sample", "[", "'label'", "]", ")", "\n", "", "print", "(", "'number of diseases: {}'", ".", "format", "(", "len", "(", "dis", ")", ")", ")", "\n", "return", "len", "(", "dis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.stat.STAT.compute_num_symptoms": [[22, 31], ["set", "print", "set.add", "set.add", "len"], "methods", ["None"], ["", "def", "compute_num_symptoms", "(", "self", ")", ":", "\n", "# num of unique symptoms", "\n", "        ", "sxs", "=", "set", "(", ")", "\n", "for", "sample", "in", "self", ".", "samples", ":", "\n", "            ", "for", "sx", "in", "sample", "[", "'exp_sxs'", "]", ":", "\n", "                ", "sxs", ".", "add", "(", "sx", ")", "\n", "", "for", "sx", "in", "sample", "[", "'imp_sxs'", "]", ":", "\n", "                ", "sxs", ".", "add", "(", "sx", ")", "\n", "", "", "print", "(", "'number of symptoms: {}'", ".", "format", "(", "len", "(", "sxs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.stat.STAT.count_symptom_lens": [[32, 40], ["numpy.array", "print", "numpy.array", "print", "len", "numpy.round", "numpy.max", "len", "numpy.round", "numpy.max", "numpy.mean", "numpy.mean"], "methods", ["None"], ["", "def", "count_symptom_lens", "(", "self", ")", ":", "\n", "# statistics of num of symptoms", "\n", "        ", "exp_sxs_lens", "=", "np", ".", "array", "(", "[", "len", "(", "sample", "[", "'exp_sxs'", "]", ")", "for", "sample", "in", "self", ".", "samples", "]", ")", "\n", "print", "(", "'number of avg./max. exp: {}/{}'", ".", "format", "(", "\n", "np", ".", "round", "(", "np", ".", "mean", "(", "exp_sxs_lens", ")", ",", "digits", ")", ",", "np", ".", "max", "(", "exp_sxs_lens", ")", ")", ")", "\n", "imp_sxs_lens", "=", "np", ".", "array", "(", "[", "len", "(", "sample", "[", "'imp_sxs'", "]", ")", "for", "sample", "in", "self", ".", "samples", "]", ")", "\n", "print", "(", "'number of avg./max. imp: {}/{}'", ".", "format", "(", "\n", "np", ".", "round", "(", "np", ".", "mean", "(", "imp_sxs_lens", ")", ",", "digits", ")", ",", "np", ".", "max", "(", "imp_sxs_lens", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.stat.STAT.count_zero_symptom": [[41, 49], ["print", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "count_zero_symptom", "(", "self", ")", ":", "\n", "# statistics of zero symptoms", "\n", "        ", "exp_0", ",", "imp_0", ",", "both", "=", "0", ",", "0", ",", "0", "\n", "for", "sample", "in", "self", ".", "samples", ":", "\n", "            ", "exp_0", "+=", "len", "(", "sample", "[", "'exp_sxs'", "]", ")", "==", "0", "\n", "imp_0", "+=", "len", "(", "sample", "[", "'imp_sxs'", "]", ")", "==", "0", "\n", "both", "+=", "len", "(", "sample", "[", "'exp_sxs'", "]", ")", "+", "len", "(", "sample", "[", "'imp_sxs'", "]", ")", "==", "0", "\n", "", "print", "(", "'number of zero exp/imp/both symptoms: {}/{}/{}'", ".", "format", "(", "exp_0", ",", "imp_0", ",", "both", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.stat.STAT.count_duplicates": [[50, 60], ["print", "sample[].items", "round"], "methods", ["None"], ["", "def", "count_duplicates", "(", "self", ")", ":", "\n", "        ", "num_duplicates", "=", "0", "\n", "total", "=", "0", "\n", "for", "sample", "in", "self", ".", "samples", ":", "\n", "            ", "for", "imp_sx", ",", "_", "in", "sample", "[", "'imp_sxs'", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "imp_sx", "in", "sample", "[", "'exp_sxs'", "]", ":", "\n", "                    ", "num_duplicates", "+=", "1", "\n", "", "total", "+=", "1", "\n", "", "", "print", "(", "'duplicates of implicit symptoms from explicit symptoms: {}/{}'", ".", "format", "(", "\n", "num_duplicates", ",", "round", "(", "num_duplicates", "/", "total", ",", "digits", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.convert_dxy": [[15, 22], ["enumerate", "str", "[].items", "[].items"], "function", ["None"], ["def", "convert_dxy", "(", "samples", ",", "prefix", ")", ":", "\n", "    ", "return", "[", "{", "\n", "'pid'", ":", "prefix", "+", "'-'", "+", "str", "(", "pid", "+", "1", ")", ",", "\n", "'exp_sxs'", ":", "{", "sx", ":", "'1'", "if", "attr", "else", "'0'", "for", "sx", ",", "attr", "in", "sample", "[", "'goal'", "]", "[", "'explicit_inform_slots'", "]", ".", "items", "(", ")", "}", ",", "\n", "'imp_sxs'", ":", "{", "sx", ":", "'1'", "if", "attr", "else", "'0'", "for", "sx", ",", "attr", "in", "sample", "[", "'goal'", "]", "[", "'implicit_inform_slots'", "]", ".", "items", "(", ")", "}", ",", "\n", "'label'", ":", "sample", "[", "'disease_tag'", "]", "\n", "}", "for", "pid", ",", "sample", "in", "enumerate", "(", "samples", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.convert_mz4": [[24, 26], ["utils.convert_dxy"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.convert_dxy"], ["", "def", "convert_mz4", "(", "samples", ",", "prefix", ")", ":", "\n", "    ", "return", "convert_dxy", "(", "samples", ",", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.convert_mz10": [[28, 40], ["samples.items", "attr_map.get", "[].items"], "function", ["None"], ["", "def", "convert_mz10", "(", "samples", ",", "keep_ns", ":", "bool", "=", "True", ")", ":", "\n", "# keep_ns: map 'not sure (NS)' as 'negative (NEG)' or as a new category", "\n", "    ", "if", "keep_ns", ":", "\n", "        ", "attr_map", "=", "{", "'0'", ":", "'0'", ",", "'1'", ":", "'1'", ",", "'2'", ":", "'2'", "}", "\n", "", "else", ":", "\n", "        ", "attr_map", "=", "{", "'0'", ":", "'0'", ",", "'1'", ":", "'1'", ",", "'2'", ":", "'0'", "}", "\n", "", "return", "[", "{", "\n", "'pid'", ":", "pid", ",", "\n", "'exp_sxs'", ":", "{", "sx", ":", "'1'", "for", "sx", "in", "sample", "[", "'explicit_info'", "]", "[", "'Symptom'", "]", "}", ",", "\n", "'imp_sxs'", ":", "{", "sx", ":", "attr_map", ".", "get", "(", "attr", ")", "for", "sx", ",", "attr", "in", "sample", "[", "'implicit_info'", "]", "[", "'Symptom'", "]", ".", "items", "(", ")", "}", ",", "\n", "'label'", ":", "sample", "[", "'diagnosis'", "]", "\n", "}", "for", "pid", ",", "sample", "in", "samples", ".", "items", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.filter_duplicate": [[42, 51], ["_samples.append", "imp_sxs.pop"], "function", ["None"], ["", "def", "filter_duplicate", "(", "samples", ")", ":", "\n", "    ", "_samples", "=", "[", "]", "\n", "for", "sample", "in", "samples", ":", "\n", "        ", "exp_sxs", ",", "imp_sxs", "=", "sample", "[", "'exp_sxs'", "]", ",", "sample", "[", "'imp_sxs'", "]", "\n", "for", "sx", "in", "exp_sxs", ":", "\n", "            ", "if", "sx", "in", "imp_sxs", ":", "\n", "                ", "imp_sxs", ".", "pop", "(", "sx", ")", "\n", "", "", "_samples", ".", "append", "(", "{", "'exp_sxs'", ":", "exp_sxs", ",", "'imp_sxs'", ":", "imp_sxs", ",", "'label'", ":", "sample", "[", "'label'", "]", "}", ")", "\n", "", "return", "_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.load_data": [[53, 63], ["isinstance", "isinstance", "open", "data.extend", "print", "json.load"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.Agent.load"], ["", "def", "load_data", "(", "paths", ")", "->", "list", ":", "\n", "    ", "if", "not", "isinstance", "(", "paths", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "assert", "isinstance", "(", "paths", ",", "str", ")", "\n", "paths", "=", "[", "paths", "]", "\n", "", "data", "=", "[", "]", "\n", "for", "path", "in", "paths", ":", "\n", "        ", "with", "open", "(", "path", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "data", ".", "extend", "(", "json", ".", "load", "(", "f", ")", ")", "\n", "print", "(", "'loading json object from {}.'", ".", "format", "(", "path", ")", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.load_json": [[65, 69], ["open", "json.load"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.Agent.load"], ["", "def", "load_json", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.write_data": [[71, 75], ["open", "json.dump", "print"], "function", ["None"], ["", "def", "write_data", "(", "obj", ",", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "f", ",", "indent", "=", "2", ",", "ensure_ascii", "=", "False", ")", "\n", "print", "(", "'dumping json object to {}.'", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.json_dump": [[77, 83], ["print", "print", "utils.write_data", "utils.write_data", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.write_data", "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.write_data"], ["", "", "def", "json_dump", "(", "train_samples", ",", "test_samples", ",", "ds", ")", ":", "\n", "    ", "print", "(", "'-'", "*", "50", ")", "\n", "print", "(", "'# num of total/train/test examples: {}/{}/{}'", ".", "format", "(", "\n", "len", "(", "train_samples", ")", "+", "len", "(", "test_samples", ")", ",", "len", "(", "train_samples", ")", ",", "len", "(", "test_samples", ")", ")", ")", "\n", "write_data", "(", "train_samples", ",", "'data/{}/train_set.json'", ".", "format", "(", "ds", ")", ")", "\n", "write_data", "(", "test_samples", ",", "'data/{}/test_set.json'", ".", "format", "(", "ds", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.tokenizer": [[85, 87], ["x.split"], "function", ["None"], ["", "def", "tokenizer", "(", "x", ")", ":", "\n", "    ", "return", "x", ".", "split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.load_pickle": [[89, 94], ["print", "open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.layers.Agent.load"], ["", "def", "load_pickle", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "obj", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "print", "(", "'loading pickle formatted model from {}.'", ".", "format", "(", "path", ")", ")", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.save_pickle": [[96, 101], ["open", "pickle.dump", "print"], "function", ["None"], ["", "def", "save_pickle", "(", "obj", ",", "path", ",", "verbose", ":", "bool", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "f", ")", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "'dumping pickle formatted model to {}.'", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.make_dirs": [[103, 112], ["isinstance", "isinstance", "os.path.dirname", "os.makedirs", "os.path.exists", "print"], "function", ["None"], ["", "", "def", "make_dirs", "(", "paths", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "paths", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "assert", "isinstance", "(", "paths", ",", "str", ")", "\n", "paths", "=", "[", "paths", "]", "\n", "", "for", "path", "in", "paths", ":", "\n", "        ", "dir_path", "=", "os", ".", "path", ".", "dirname", "(", "path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_path", ")", ":", "\n", "            ", "print", "(", "'making dir {} ...'", ".", "format", "(", "dir_path", ")", ")", "\n", "", "os", ".", "makedirs", "(", "dir_path", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lemuria-wchen_dxformer.None.utils.set_path": [[114, 120], ["None"], "function", ["None"], ["", "", "def", "set_path", "(", "name", ",", "dataset", ",", "exp_name", ",", "max_turn", ",", "num", ",", "num_repeats", ")", ":", "\n", "    ", "if", "num_repeats", "==", "1", ":", "\n", "        ", "path", "=", "'saved/{}/{}/{}_{}.pt'", ".", "format", "(", "dataset", ",", "exp_name", ",", "name", ",", "max_turn", ")", "\n", "", "else", ":", "\n", "        ", "path", "=", "'saved/{}/{}/{}_{}_{}.pt'", ".", "format", "(", "dataset", ",", "exp_name", ",", "name", ",", "max_turn", ",", "num", "+", "1", ")", "\n", "", "return", "path", "\n", "", ""]]}