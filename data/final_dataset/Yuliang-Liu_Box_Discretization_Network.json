{"home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.None.setup.get_extensions": [[17, 57], ["os.path.dirname", "os.path.join", "glob.glob", "glob.glob", "glob.glob", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "extension", "torch.cuda.is_available", "os.getenv"], "function", ["None"], ["def", "get_extensions", "(", ")", ":", "\n", "    ", "this_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "extensions_dir", "=", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"maskrcnn_benchmark\"", ",", "\"csrc\"", ")", "\n", "\n", "main_file", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"*.cpp\"", ")", ")", "\n", "source_cpu", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"cpu\"", ",", "\"*.cpp\"", ")", ")", "\n", "source_cuda", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "\"cuda\"", ",", "\"*.cu\"", ")", ")", "\n", "\n", "sources", "=", "main_file", "+", "source_cpu", "\n", "extension", "=", "CppExtension", "\n", "\n", "extra_compile_args", "=", "{", "\"cxx\"", ":", "[", "]", "}", "\n", "define_macros", "=", "[", "]", "\n", "\n", "if", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "CUDA_HOME", "is", "not", "None", ")", "or", "os", ".", "getenv", "(", "\"FORCE_CUDA\"", ",", "\"0\"", ")", "==", "\"1\"", ":", "\n", "        ", "extension", "=", "CUDAExtension", "\n", "sources", "+=", "source_cuda", "\n", "define_macros", "+=", "[", "(", "\"WITH_CUDA\"", ",", "None", ")", "]", "\n", "extra_compile_args", "[", "\"nvcc\"", "]", "=", "[", "\n", "\"-DCUDA_HAS_FP16=1\"", ",", "\n", "\"-D__CUDA_NO_HALF_OPERATORS__\"", ",", "\n", "\"-D__CUDA_NO_HALF_CONVERSIONS__\"", ",", "\n", "\"-D__CUDA_NO_HALF2_OPERATORS__\"", ",", "\n", "]", "\n", "\n", "", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "extensions_dir", ",", "s", ")", "for", "s", "in", "sources", "]", "\n", "\n", "include_dirs", "=", "[", "extensions_dir", "]", "\n", "\n", "ext_modules", "=", "[", "\n", "extension", "(", "\n", "\"maskrcnn_benchmark._C\"", ",", "\n", "sources", ",", "\n", "include_dirs", "=", "include_dirs", ",", "\n", "define_macros", "=", "define_macros", ",", "\n", "extra_compile_args", "=", "extra_compile_args", ",", "\n", ")", "\n", "]", "\n", "\n", "return", "ext_modules", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.test_single_image.main": [[14, 110], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "maskrcnn_benchmark.config.cfg.merge_from_file", "maskrcnn_benchmark.config.cfg.merge_from_list", "maskrcnn_benchmark.config.cfg.freeze", "predictor.COCODemo", "os.path.isdir", "os.path.isdir", "os.mkdir", "imgset.extend", "imgset.extend", "imgset.extend", "imgset.extend", "random.shuffle", "enumerate", "time.time", "cv2.imread", "predictor.COCODemo.run_on_opencv_image", "print", "cv2.resize", "cv2.imshow", "cv2.waitKey", "os.path.exists", "os.path.isdir", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "time.time", "cv2.imread", "predictor.COCODemo.run_on_opencv_image", "print", "cv2.resize", "cv2.imwrite", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.basename", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.miscellaneous.mkdir", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.run_on_opencv_image", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.run_on_opencv_image", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch Object Detection Webcam Demo\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config-file\"", ",", "\n", "default", "=", "\"../configs/caffe2/e2e_mask_rcnn_R_50_FPN_1x_caffe2.yaml\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--confidence-threshold\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.7", ",", "\n", "help", "=", "\"Minimum score for the prediction to be shown\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--min-image-size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "224", ",", "\n", "help", "=", "\"Smallest size of the image to feed to the model. \"", "\n", "\"Model was trained with 800, which gives best results\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--show-mask-heatmaps\"", ",", "\n", "dest", "=", "\"show_mask_heatmaps\"", ",", "\n", "help", "=", "\"Show a heatmap probability for the top masks-per-dim masks\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--masks-per-dim\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "2", ",", "\n", "help", "=", "\"Number of heatmaps per dimension to show\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify model config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--img\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"path to the target image\"", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"path to the target image\"", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# load config from file and command-line arguments", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "# prepare object that handles inference plus adds predictions on top of image", "\n", "coco_demo", "=", "COCODemo", "(", "\n", "cfg", ",", "\n", "confidence_threshold", "=", "args", ".", "confidence_threshold", ",", "\n", "show_mask_heatmaps", "=", "args", ".", "show_mask_heatmaps", ",", "\n", "masks_per_dim", "=", "args", ".", "masks_per_dim", ",", "\n", "min_image_size", "=", "args", ".", "min_image_size", ",", "\n", ")", "\n", "\n", "if", "not", "(", "(", "os", ".", "path", ".", "exists", "(", "args", ".", "img", ")", "or", "os", ".", "path", ".", "isdir", "(", "args", ".", "img", ")", ")", ")", ":", "\n", "        ", "assert", "(", "0", ")", ",", "\"Image or Dir: {} not found.\"", ".", "format", "(", "args", ".", "img", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "output_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "args", ".", "output_dir", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "isdir", "(", "args", ".", "img", ")", ":", "\n", "        ", "imgset", "=", "[", "]", "\n", "imgset", ".", "extend", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "img", ",", "'*.jpg'", ")", ")", ")", "\n", "imgset", ".", "extend", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "img", ",", "'*.JPG'", ")", ")", ")", "\n", "imgset", ".", "extend", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "img", ",", "'*.png'", ")", ")", ")", "\n", "imgset", ".", "extend", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "img", ",", "'*.PNG'", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "imgset", ")", "\n", "for", "iximg", ",", "img", "in", "enumerate", "(", "imgset", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "imgr", "=", "cv2", ".", "imread", "(", "img", ")", "\n", "composite", "=", "coco_demo", ".", "run_on_opencv_image", "(", "imgr", ")", "\n", "print", "(", "\"Time: {:.2f} s / img\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "composite", "=", "cv2", ".", "resize", "(", "composite", ",", "(", "1280", ",", "720", ")", ")", "\n", "cv2", ".", "imwrite", "(", "args", ".", "output_dir", "+", "os", ".", "path", ".", "basename", "(", "img", ")", ",", "composite", ")", "\n", "", "", "else", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "args", ".", "img", ")", "\n", "composite", "=", "coco_demo", ".", "run_on_opencv_image", "(", "img", ")", "\n", "print", "(", "\"Time: {:.2f} s / img\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "composite", "=", "cv2", ".", "resize", "(", "composite", ",", "(", "1280", ",", "720", ")", ")", "\n", "cv2", ".", "imshow", "(", "\"COCO detections\"", ",", "composite", ")", "\n", "cv2", ".", "waitKey", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.__init__": [[141, 174], ["cfg.clone", "maskrcnn_benchmark.modeling.detector.build_detection_model", "predictor.COCODemo.model.eval", "torch.device", "predictor.COCODemo.model.to", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer.load", "predictor.COCODemo.build_transform", "maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.Masker", "maskrcnn_benchmark.modeling.roi_heads.ke_head.inference.KEer", "torch.tensor", "torch.device"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.detector.detectors.build_detection_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.build_transform"], ["def", "__init__", "(", "\n", "self", ",", "\n", "cfg", ",", "\n", "confidence_threshold", "=", "0.7", ",", "\n", "show_mask_heatmaps", "=", "False", ",", "\n", "masks_per_dim", "=", "2", ",", "\n", "min_image_size", "=", "224", ",", "\n", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "self", ".", "model", "=", "build_detection_model", "(", "cfg", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "cfg", ".", "MODEL", ".", "DEVICE", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "min_image_size", "=", "min_image_size", "\n", "\n", "save_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "checkpointer", "=", "DetectronCheckpointer", "(", "cfg", ",", "self", ".", "model", ",", "save_dir", "=", "save_dir", ")", "\n", "_", "=", "checkpointer", ".", "load", "(", "cfg", ".", "MODEL", ".", "WEIGHT", ")", "\n", "\n", "self", ".", "transforms", "=", "self", ".", "build_transform", "(", ")", "\n", "\n", "mask_threshold", "=", "-", "1", "if", "show_mask_heatmaps", "else", "0.5", "\n", "self", ".", "masker", "=", "Masker", "(", "threshold", "=", "mask_threshold", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "keer", "=", "KEer", "(", ")", "\n", "\n", "# used to make colors for each class", "\n", "self", ".", "palette", "=", "torch", ".", "tensor", "(", "[", "2", "**", "25", "-", "1", ",", "2", "**", "15", "-", "1", ",", "2", "**", "21", "-", "1", "]", ")", "\n", "\n", "self", ".", "cpu_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "self", ".", "confidence_threshold", "=", "confidence_threshold", "\n", "self", ".", "show_mask_heatmaps", "=", "show_mask_heatmaps", "\n", "self", ".", "masks_per_dim", "=", "masks_per_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.build_transform": [[175, 204], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Lambda", "torchvision.transforms.Lambda", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["None"], ["", "def", "build_transform", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Creates a basic transformation that was used to train the models\n        \"\"\"", "\n", "cfg", "=", "self", ".", "cfg", "\n", "\n", "# we are loading images with OpenCV, so we don't need to convert them", "\n", "# to BGR, they are already! So all we need to do is to normalize", "\n", "# by 255 if we want to convert to BGR255 format, or flip the channels", "\n", "# if we want it to be in RGB in [0-1] range.", "\n", "if", "cfg", ".", "INPUT", ".", "TO_BGR255", ":", "\n", "            ", "to_bgr_transform", "=", "T", ".", "Lambda", "(", "lambda", "x", ":", "x", "*", "255", ")", "\n", "", "else", ":", "\n", "            ", "to_bgr_transform", "=", "T", ".", "Lambda", "(", "lambda", "x", ":", "x", "[", "[", "2", ",", "1", ",", "0", "]", "]", ")", "\n", "\n", "", "normalize_transform", "=", "T", ".", "Normalize", "(", "\n", "mean", "=", "cfg", ".", "INPUT", ".", "PIXEL_MEAN", ",", "std", "=", "cfg", ".", "INPUT", ".", "PIXEL_STD", "\n", ")", "\n", "\n", "transform", "=", "T", ".", "Compose", "(", "\n", "[", "\n", "T", ".", "ToPILImage", "(", ")", ",", "\n", "T", ".", "Resize", "(", "self", ".", "min_image_size", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "to_bgr_transform", ",", "\n", "normalize_transform", ",", "\n", "]", "\n", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.run_on_opencv_image": [[205, 234], ["image.copy", "predictor.COCODemo.compute_prediction", "predictor.COCODemo.select_top_predictions", "predictor.COCODemo.overlay_class_names", "predictor.COCODemo.create_mask_montage", "predictor.COCODemo.overlay_ke"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.compute_prediction", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.select_top_predictions", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.overlay_class_names", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.create_mask_montage", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.overlay_ke"], ["", "def", "run_on_opencv_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            image (np.ndarray): an image as returned by OpenCV\n\n        Returns:\n            prediction (BoxList): the detected objects. Additional information\n                of the detection properties can be found in the fields of\n                the BoxList via `prediction.fields()`\n        \"\"\"", "\n", "result", "=", "image", ".", "copy", "(", ")", "\n", "predictions", "=", "self", ".", "compute_prediction", "(", "image", ")", "\n", "\n", "top_predictions", "=", "self", ".", "select_top_predictions", "(", "predictions", ")", "\n", "\n", "if", "self", ".", "show_mask_heatmaps", ":", "\n", "            ", "return", "self", ".", "create_mask_montage", "(", "result", ",", "top_predictions", ")", "\n", "# result = self.overlay_boxes(result, top_predictions)", "\n", "# if self.cfg.MODEL.MASK_ON:", "\n", "#     result = self.overlay_mask(result, top_predictions)", "\n", "# if self.cfg.MODEL.KEYPOINT_ON:", "\n", "#     result = self.overlay_keypoints(result, top_predictions)", "\n", "# result = self.overlay_class_names(result, top_predictions)", "\n", "", "if", "self", ".", "cfg", ".", "MODEL", ".", "KE_ON", ":", "\n", "            ", "result", "=", "self", ".", "overlay_ke", "(", "result", ",", "top_predictions", ")", "\n", "", "ext", "=", "'t'", "\n", "result", "=", "self", ".", "overlay_class_names", "(", "result", ",", "top_predictions", ",", "ext", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.compute_prediction": [[235, 277], ["predictor.COCODemo.transforms", "maskrcnn_benchmark.structures.image_list.to_image_list", "image_list.to.to.to", "prediction.resize.resize.resize", "prediction.resize.resize.has_field", "torch.no_grad", "predictor.COCODemo.model", "o.to", "prediction.resize.resize.get_field", "prediction.resize.resize.add_field", "prediction.resize.resize.has_field", "prediction.resize.resize.get_field", "prediction.resize.resize.get_field", "prediction.resize.resize.add_field", "prediction.resize.resize.add_field", "predictor.COCODemo.masker"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.image_list.to_image_list", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.has_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.has_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field"], ["", "def", "compute_prediction", "(", "self", ",", "original_image", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            original_image (np.ndarray): an image as returned by OpenCV\n\n        Returns:\n            prediction (BoxList): the detected objects. Additional information\n                of the detection properties can be found in the fields of\n                the BoxList via `prediction.fields()`\n        \"\"\"", "\n", "# apply pre-processing to image", "\n", "image", "=", "self", ".", "transforms", "(", "original_image", ")", "\n", "# convert to an ImageList, padded so that it is divisible by", "\n", "# cfg.DATALOADER.SIZE_DIVISIBILITY", "\n", "image_list", "=", "to_image_list", "(", "image", ",", "self", ".", "cfg", ".", "DATALOADER", ".", "SIZE_DIVISIBILITY", ")", "\n", "image_list", "=", "image_list", ".", "to", "(", "self", ".", "device", ")", "\n", "# compute predictions", "\n", "height", ",", "width", "=", "original_image", ".", "shape", "[", ":", "-", "1", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "predictions", "=", "self", ".", "model", "(", "image_list", ")", "\n", "\n", "", "predictions", "=", "[", "o", ".", "to", "(", "self", ".", "cpu_device", ")", "for", "o", "in", "predictions", "]", "\n", "# always single image is passed at a time", "\n", "prediction", "=", "predictions", "[", "0", "]", "\n", "# reshape prediction (a BoxList) into the original image size", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "width", ",", "height", ")", ")", "\n", "\n", "if", "prediction", ".", "has_field", "(", "\"mask\"", ")", ":", "\n", "# if we have masks, paste the masks in the right position", "\n", "# in the image, as defined by the bounding boxes", "\n", "            ", "masks", "=", "prediction", ".", "get_field", "(", "\"mask\"", ")", "\n", "# always single image is passed at a time", "\n", "masks", "=", "self", ".", "masker", "(", "[", "masks", "]", ",", "[", "prediction", "]", ")", "[", "0", "]", "\n", "prediction", ".", "add_field", "(", "\"mask\"", ",", "masks", ")", "\n", "\n", "", "if", "prediction", ".", "has_field", "(", "\"ke\"", ")", "and", "self", ".", "cfg", ".", "MODEL", ".", "KE_ON", ":", "\n", "            ", "kes", "=", "prediction", ".", "get_field", "(", "\"ke\"", ")", "\n", "mty", "=", "prediction", ".", "get_field", "(", "\"mty\"", ")", "\n", "prediction", ".", "add_field", "(", "\"ke\"", ",", "kes", ".", "kes", ")", "\n", "prediction", ".", "add_field", "(", "\"mty\"", ",", "mty", ")", "\n", "\n", "", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.select_top_predictions": [[278, 298], ["predictions.get_field", "torch.nonzero().squeeze", "predictions.get_field", "predictions.get_field.sort", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["", "def", "select_top_predictions", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "\"\"\"\n        Select only predictions which have a `score` > self.confidence_threshold,\n        and returns the predictions in descending order of score\n\n        Arguments:\n            predictions (BoxList): the result of the computation by the model.\n                It should contain the field `scores`.\n\n        Returns:\n            prediction (BoxList): the detected objects. Additional information\n                of the detection properties can be found in the fields of\n                the BoxList via `prediction.fields()`\n        \"\"\"", "\n", "scores", "=", "predictions", ".", "get_field", "(", "\"scores\"", ")", "\n", "keep", "=", "torch", ".", "nonzero", "(", "scores", ">", "self", ".", "confidence_threshold", ")", ".", "squeeze", "(", "1", ")", "\n", "predictions", "=", "predictions", "[", "keep", "]", "\n", "scores", "=", "predictions", ".", "get_field", "(", "\"scores\"", ")", "\n", "_", ",", "idx", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "return", "predictions", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.compute_colors_for_labels": [[299, 306], ["None"], "methods", ["None"], ["", "def", "compute_colors_for_labels", "(", "self", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        Simple function that adds fixed colors depending on the class\n        \"\"\"", "\n", "colors", "=", "labels", "[", ":", ",", "None", "]", "*", "self", ".", "palette", "\n", "colors", "=", "(", "colors", "%", "255", ")", ".", "numpy", "(", ")", ".", "astype", "(", "\"uint8\"", ")", "\n", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.overlay_boxes": [[307, 330], ["predictions.get_field", "predictor.COCODemo.compute_colors_for_labels().tolist", "zip", "box.to.to.to", "cv2.rectangle", "predictor.COCODemo.compute_colors_for_labels", "box[].tolist", "box[].tolist", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.compute_colors_for_labels"], ["", "def", "overlay_boxes", "(", "self", ",", "image", ",", "predictions", ")", ":", "\n", "        ", "\"\"\"\n        Adds the predicted boxes on top of the image\n\n        Arguments:\n            image (np.ndarray): an image as returned by OpenCV\n            predictions (BoxList): the result of the computation by the model.\n                It should contain the field `labels`.\n        \"\"\"", "\n", "labels", "=", "predictions", ".", "get_field", "(", "\"labels\"", ")", "\n", "boxes", "=", "predictions", ".", "bbox", "\n", "\n", "colors", "=", "self", ".", "compute_colors_for_labels", "(", "labels", ")", ".", "tolist", "(", ")", "\n", "\n", "for", "box", ",", "color", "in", "zip", "(", "boxes", ",", "colors", ")", ":", "\n", "            ", "box", "=", "box", ".", "to", "(", "torch", ".", "int64", ")", "\n", "top_left", ",", "bottom_right", "=", "box", "[", ":", "2", "]", ".", "tolist", "(", ")", ",", "box", "[", "2", ":", "]", ".", "tolist", "(", ")", "\n", "# tuple(color)", "\n", "image", "=", "cv2", ".", "rectangle", "(", "\n", "image", ",", "tuple", "(", "top_left", ")", ",", "tuple", "(", "bottom_right", ")", ",", "(", "255", ",", "255", ",", "0", ")", ",", "2", "\n", ")", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.overlay_mask": [[331, 356], ["predictions.get_field().numpy", "predictions.get_field", "predictor.COCODemo.compute_colors_for_labels().tolist", "zip", "maskrcnn_benchmark.utils.cv2_util.findContours", "cv2.drawContours", "predictions.get_field", "predictor.COCODemo.compute_colors_for_labels"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.cv2_util.findContours", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.compute_colors_for_labels"], ["", "def", "overlay_mask", "(", "self", ",", "image", ",", "predictions", ")", ":", "\n", "        ", "\"\"\"\n        Adds the instances contours for each predicted object.\n        Each label has a different color.\n\n        Arguments:\n            image (np.ndarray): an image as returned by OpenCV\n            predictions (BoxList): the result of the computation by the model.\n                It should contain the field `mask` and `labels`.\n        \"\"\"", "\n", "masks", "=", "predictions", ".", "get_field", "(", "\"mask\"", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "predictions", ".", "get_field", "(", "\"labels\"", ")", "\n", "\n", "colors", "=", "self", ".", "compute_colors_for_labels", "(", "labels", ")", ".", "tolist", "(", ")", "\n", "\n", "for", "mask", ",", "color", "in", "zip", "(", "masks", ",", "colors", ")", ":", "\n", "            ", "thresh", "=", "mask", "[", "0", ",", ":", ",", ":", ",", "None", "]", "\n", "contours", ",", "hierarchy", "=", "cv2_util", ".", "findContours", "(", "\n", "thresh", ",", "cv2", ".", "RETR_TREE", ",", "cv2", ".", "CHAIN_APPROX_SIMPLE", "\n", ")", "\n", "image", "=", "cv2", ".", "drawContours", "(", "image", ",", "contours", ",", "-", "1", ",", "color", ",", "3", ")", "\n", "\n", "", "composite", "=", "image", "\n", "\n", "return", "composite", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.scores_to_probs": [[358, 364], ["temp.max", "numpy.exp", "numpy.exp", "numpy.sum", "numpy.sum", "numpy.exp", "numpy.exp"], "methods", ["None"], ["", "def", "scores_to_probs", "(", "self", ",", "scores", ")", ":", "\n", "        ", "temp", "=", "scores", "[", ":", "]", "\n", "max_score", "=", "temp", ".", "max", "(", ")", "\n", "temp", "=", "np", ".", "exp", "(", "temp", "-", "max_score", ")", "/", "np", ".", "sum", "(", "np", ".", "exp", "(", "temp", "-", "max_score", ")", ")", "\n", "scores", "[", ":", "]", "=", "temp", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.overlay_ke": [[365, 392], ["predictions.get_field().numpy", "predictions.get_field", "predictions.get_field().view().numpy", "predictions.get_field().numpy", "zip", "mty[].argmax", "predictor.COCODemo.scores_to_probs", "predictor.paraToQuad_v3", "predictions.get_field", "predictions.get_field().view", "predictions.get_field", "range", "print", "cv2.findContours", "cv2.drawContours", "cv2.line", "predictions.get_field"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.scores_to_probs", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.paraToQuad_v3", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.cv2_util.findContours", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["", "def", "overlay_ke", "(", "self", ",", "image", ",", "predictions", ")", ":", "\n", "        ", "kes", "=", "predictions", ".", "get_field", "(", "\"ke\"", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "predictions", ".", "get_field", "(", "\"labels\"", ")", "\n", "mtys", "=", "predictions", ".", "get_field", "(", "\"mty\"", ")", ".", "view", "(", "-", "1", ",", "24", ")", ".", "numpy", "(", ")", "\n", "boxes", "=", "predictions", ".", "bbox", "\n", "colors", "=", "[", "(", "255", ",", "0", ",", "0", ")", ",", "(", "255", ",", "128", ",", "0", ")", ",", "(", "255", ",", "255", ",", "0", ")", ",", "(", "0", ",", "255", ",", "0", ")", ",", "(", "0", ",", "255", ",", "255", ")", ",", "(", "0", ",", "0", ",", "255", ")", ",", "(", "0", ",", "128", ",", "255", ")", ",", "(", "128", ",", "0", ",", "255", ")", "]", "\n", "masks", "=", "predictions", ".", "get_field", "(", "\"mask\"", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "box", ",", "ke", ",", "mty", ",", "mask", "in", "zip", "(", "boxes", ",", "kes", ",", "mtys", ",", "masks", ")", ":", "\n", "            ", "mt", "=", "mty", "[", ":", "]", ".", "argmax", "(", ")", "\n", "mt_prob", "=", "self", ".", "scores_to_probs", "(", "mty", ")", "\n", "quad", "=", "paraToQuad_v3", "(", "ke", ",", "mt", ")", "\n", "\n", "if", "quad", ":", "\n", "                ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                    ", "cv2", ".", "line", "(", "image", ",", "quad", "[", "i", "]", ",", "quad", "[", "(", "i", "+", "1", ")", "%", "4", "]", ",", "(", "0", ",", "0", ",", "255", ")", ",", "2", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "\"find none quad\"", ",", "ke", ",", "mt", ")", "\n", "thresh", "=", "mask", "[", "0", ",", ":", ",", ":", ",", "None", "]", "\n", "_", ",", "contours", ",", "hierarchy", "=", "cv2", ".", "findContours", "(", "\n", "thresh", ",", "cv2", ".", "RETR_TREE", ",", "cv2", ".", "CHAIN_APPROX_SIMPLE", "\n", ")", "\n", "image", "=", "cv2", ".", "drawContours", "(", "image", ",", "contours", ",", "-", "1", ",", "(", "0", ",", "255", ",", "0", ")", ",", "2", ")", "\n", "\n", "", "", "composite", "=", "image", "\n", "\n", "return", "composite", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.overlay_keypoints": [[393, 401], ["predictions.get_field", "predictions.get_field.get_field", "torch.cat().numpy", "predictor.vis_keypoints", "torch.cat", "region.transpose"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.vis_keypoints", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.transpose"], ["", "def", "overlay_keypoints", "(", "self", ",", "image", ",", "predictions", ")", ":", "\n", "        ", "keypoints", "=", "predictions", ".", "get_field", "(", "\"keypoints\"", ")", "\n", "kps", "=", "keypoints", ".", "keypoints", "\n", "scores", "=", "keypoints", ".", "get_field", "(", "\"logits\"", ")", "\n", "kps", "=", "torch", ".", "cat", "(", "(", "kps", "[", ":", ",", ":", ",", "0", ":", "2", "]", ",", "scores", "[", ":", ",", ":", ",", "None", "]", ")", ",", "dim", "=", "2", ")", ".", "numpy", "(", ")", "\n", "for", "region", "in", "kps", ":", "\n", "            ", "image", "=", "vis_keypoints", "(", "image", ",", "region", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.create_mask_montage": [[402, 437], ["predictions.get_field", "maskrcnn_benchmark.layers.interpolate().byte", "masks.reshape.reshape.reshape", "torch.zeros", "range", "cv2.applyColorMap", "len", "torch.zeros", "range", "torch.zeros.numpy", "maskrcnn_benchmark.layers.interpolate", "masks.reshape.reshape.float", "len"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc.interpolate"], ["", "def", "create_mask_montage", "(", "self", ",", "image", ",", "predictions", ")", ":", "\n", "        ", "\"\"\"\n        Create a montage showing the probability heatmaps for each one one of the\n        detected objects\n\n        Arguments:\n            image (np.ndarray): an image as returned by OpenCV\n            predictions (BoxList): the result of the computation by the model.\n                It should contain the field `mask`.\n        \"\"\"", "\n", "masks", "=", "predictions", ".", "get_field", "(", "\"mask\"", ")", "\n", "masks_per_dim", "=", "self", ".", "masks_per_dim", "\n", "masks", "=", "L", ".", "interpolate", "(", "\n", "masks", ".", "float", "(", ")", ",", "scale_factor", "=", "1", "/", "masks_per_dim", "\n", ")", ".", "byte", "(", ")", "\n", "height", ",", "width", "=", "masks", ".", "shape", "[", "-", "2", ":", "]", "\n", "max_masks", "=", "masks_per_dim", "**", "2", "\n", "masks", "=", "masks", "[", ":", "max_masks", "]", "\n", "# handle case where we have less detections than max_masks", "\n", "if", "len", "(", "masks", ")", "<", "max_masks", ":", "\n", "            ", "masks_padded", "=", "torch", ".", "zeros", "(", "max_masks", ",", "1", ",", "height", ",", "width", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "masks_padded", "[", ":", "len", "(", "masks", ")", "]", "=", "masks", "\n", "masks", "=", "masks_padded", "\n", "", "masks", "=", "masks", ".", "reshape", "(", "masks_per_dim", ",", "masks_per_dim", ",", "height", ",", "width", ")", "\n", "result", "=", "torch", ".", "zeros", "(", "\n", "(", "masks_per_dim", "*", "height", ",", "masks_per_dim", "*", "width", ")", ",", "dtype", "=", "torch", ".", "uint8", "\n", ")", "\n", "for", "y", "in", "range", "(", "masks_per_dim", ")", ":", "\n", "            ", "start_y", "=", "y", "*", "height", "\n", "end_y", "=", "(", "y", "+", "1", ")", "*", "height", "\n", "for", "x", "in", "range", "(", "masks_per_dim", ")", ":", "\n", "                ", "start_x", "=", "x", "*", "width", "\n", "end_x", "=", "(", "x", "+", "1", ")", "*", "width", "\n", "result", "[", "start_y", ":", "end_y", ",", "start_x", ":", "end_x", "]", "=", "masks", "[", "y", ",", "x", "]", "\n", "", "", "return", "cv2", ".", "applyColorMap", "(", "result", ".", "numpy", "(", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.COCODemo.overlay_class_names": [[438, 467], ["predictions.get_field().tolist", "predictions.get_field().tolist", "zip", "template.format", "predictions.get_field", "predictions.get_field", "cv2.putText", "cv2.putText"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["", "def", "overlay_class_names", "(", "self", ",", "image", ",", "predictions", ",", "ext", ")", ":", "\n", "        ", "\"\"\"\n        Adds detected class names and scores in the positions defined by the\n        top-left corner of the predicted bounding box\n\n        Arguments:\n            image (np.ndarray): an image as returned by OpenCV\n            predictions (BoxList): the result of the computation by the model.\n                It should contain the field `scores` and `labels`.\n        \"\"\"", "\n", "scores", "=", "predictions", ".", "get_field", "(", "\"scores\"", ")", ".", "tolist", "(", ")", "\n", "labels", "=", "predictions", ".", "get_field", "(", "\"labels\"", ")", ".", "tolist", "(", ")", "\n", "labels", "=", "[", "self", ".", "CATEGORIES", "[", "i", "]", "for", "i", "in", "labels", "]", "\n", "boxes", "=", "predictions", ".", "bbox", "\n", "\n", "template", "=", "\"{}: {:.2f}\"", "\n", "for", "box", ",", "score", ",", "label", "in", "zip", "(", "boxes", ",", "scores", ",", "labels", ")", ":", "\n", "            ", "x", ",", "y", "=", "box", "[", ":", "2", "]", "\n", "s", "=", "template", ".", "format", "(", "ext", ",", "score", ")", "\n", "if", "ext", "==", "'c'", ":", "\n", "                ", "cv2", ".", "putText", "(", "\n", "image", ",", "s", ",", "(", "x", ",", "y", ")", ",", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", ".5", ",", "(", "255", ",", "255", ",", "0", ")", ",", "1", "\n", ")", "\n", "", "elif", "ext", "==", "'t'", ":", "\n", "                ", "cv2", ".", "putText", "(", "\n", "image", ",", "s", ",", "(", "x", ",", "y", ")", ",", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", ".5", ",", "(", "0", ",", "0", ",", "255", ")", ",", "1", "\n", ")", "\n", "\n", "", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.paraToQuad_v3": [[21, 58], ["Point", "Point", "Point", "Point", "Point", "Point", "itertools.permutations", "Polygon", "range", "range", "range", "Point.within", "Point.within", "LinearRing", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "paraToQuad_v3", "(", "kes", ",", "mt", ")", ":", "\n", "    ", "ms", "=", "(", "kes", "[", "0", ",", "0", "]", ",", "kes", "[", "6", ",", "0", "]", ")", "\n", "xs", "=", "[", "kes", "[", "i", ",", "0", "]", "for", "i", "in", "range", "(", "1", ",", "5", ")", "]", "\n", "ys", "=", "[", "kes", "[", "i", ",", "0", "]", "for", "i", "in", "range", "(", "7", ",", "11", ")", "]", "\n", "crs", "=", "(", "kes", "[", "5", ",", "0", "]", ",", "kes", "[", "11", ",", "0", "]", ")", "\n", "ms", "=", "Point", "(", "ms", ")", "\n", "crs", "=", "Point", "(", "crs", ")", "\n", "vp", "=", "[", "]", "\n", "all_types", "=", "[", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "[", "1", ",", "2", ",", "4", ",", "3", "]", ",", "[", "1", ",", "3", ",", "2", ",", "4", "]", ",", "[", "1", ",", "3", ",", "4", ",", "2", "]", ",", "[", "1", ",", "4", ",", "2", ",", "3", "]", ",", "[", "1", ",", "4", ",", "3", ",", "2", "]", ",", "[", "2", ",", "1", ",", "3", ",", "4", "]", ",", "[", "2", ",", "1", ",", "4", ",", "3", "]", ",", "[", "2", ",", "3", ",", "1", ",", "4", "]", ",", "[", "2", ",", "3", ",", "4", ",", "1", "]", ",", "[", "2", ",", "4", ",", "1", ",", "3", "]", ",", "[", "2", ",", "4", ",", "3", ",", "1", "]", ",", "[", "3", ",", "1", ",", "2", ",", "4", "]", ",", "[", "3", ",", "1", ",", "4", ",", "2", "]", ",", "[", "3", ",", "2", ",", "1", ",", "4", "]", ",", "[", "3", ",", "2", ",", "4", ",", "1", "]", ",", "[", "3", ",", "4", ",", "1", ",", "2", "]", ",", "[", "3", ",", "4", ",", "2", ",", "1", "]", ",", "[", "4", ",", "1", ",", "2", ",", "3", "]", ",", "[", "4", ",", "1", ",", "3", ",", "2", "]", ",", "[", "4", ",", "2", ",", "1", ",", "3", "]", ",", "[", "4", ",", "2", ",", "3", ",", "1", "]", ",", "[", "4", ",", "3", ",", "1", ",", "2", "]", ",", "[", "4", ",", "3", ",", "2", ",", "1", "]", "]", "\n", "all_types", "=", "[", "[", "all_types", "[", "iat", "]", "[", "0", "]", "-", "1", ",", "all_types", "[", "iat", "]", "[", "1", "]", "-", "1", ",", "all_types", "[", "iat", "]", "[", "2", "]", "-", "1", ",", "all_types", "[", "iat", "]", "[", "3", "]", "-", "1", "]", "for", "iat", "in", "range", "(", "24", ")", "]", "\n", "\n", "tpe", "=", "all_types", "[", "mt", "]", "\n", "p1", "=", "Point", "(", "(", "xs", "[", "0", "]", ",", "ys", "[", "tpe", "[", "0", "]", "]", ")", ")", "\n", "p2", "=", "Point", "(", "(", "xs", "[", "1", "]", ",", "ys", "[", "tpe", "[", "1", "]", "]", ")", ")", "\n", "p3", "=", "Point", "(", "(", "xs", "[", "2", "]", ",", "ys", "[", "tpe", "[", "2", "]", "]", ")", ")", "\n", "p4", "=", "Point", "(", "(", "xs", "[", "3", "]", ",", "ys", "[", "tpe", "[", "3", "]", "]", ")", ")", "\n", "pts", "=", "[", "p1", ",", "p2", ",", "p3", ",", "p4", "]", "\n", "scs", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", "\n", "for", "it", "in", "itertools", ".", "permutations", "(", "scs", ",", "4", ")", ":", "\n", "        ", "poly", "=", "Polygon", "(", "[", "(", "pts", "[", "it", "[", "0", "]", "]", ".", "x", ",", "pts", "[", "it", "[", "0", "]", "]", ".", "y", ")", ",", "(", "pts", "[", "it", "[", "1", "]", "]", ".", "x", ",", "pts", "[", "it", "[", "1", "]", "]", ".", "y", ")", ",", "(", "pts", "[", "it", "[", "2", "]", "]", ".", "x", ",", "pts", "[", "it", "[", "2", "]", "]", ".", "y", ")", ",", "(", "pts", "[", "it", "[", "3", "]", "]", ".", "x", ",", "pts", "[", "it", "[", "3", "]", "]", ".", "y", ")", "]", ")", "\n", "if", "poly", ".", "is_valid", "and", "ms", ".", "within", "(", "poly", ")", "and", "crs", ".", "within", "(", "poly", ")", ":", "\n", "            ", "quad", "=", "[", "(", "pts", "[", "it", "[", "0", "]", "]", ".", "x", ",", "pts", "[", "it", "[", "0", "]", "]", ".", "y", ")", ",", "(", "pts", "[", "it", "[", "1", "]", "]", ".", "x", ",", "pts", "[", "it", "[", "1", "]", "]", ".", "y", ")", ",", "(", "pts", "[", "it", "[", "2", "]", "]", ".", "x", ",", "pts", "[", "it", "[", "2", "]", "]", ".", "y", ")", ",", "(", "pts", "[", "it", "[", "3", "]", "]", ".", "x", ",", "pts", "[", "it", "[", "3", "]", "]", ".", "y", ")", "]", "\n", "lr", "=", "LinearRing", "(", "quad", ")", "\n", "if", "lr", ".", "is_ccw", ":", "\n", "                ", "return", "[", "(", "int", "(", "iq", "[", "0", "]", ")", ",", "int", "(", "iq", "[", "1", "]", ")", ")", "for", "iq", "in", "quad", "]", "\n", "", "else", ":", "\n", "                ", "quad", "=", "[", "quad", "[", "0", "]", ",", "quad", "[", "3", "]", ",", "quad", "[", "2", "]", ",", "quad", "[", "1", "]", "]", "\n", "return", "[", "(", "int", "(", "iq", "[", "0", "]", ")", ",", "int", "(", "iq", "[", "1", "]", ")", ")", "for", "iq", "in", "quad", "]", "\n", "\n", "", "return", "[", "(", "int", "(", "iq", "[", "0", "]", ")", ",", "int", "(", "iq", "[", "1", "]", ")", ")", "for", "iq", "in", "quad", "]", "\n", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.paraToQuad_v2": [[59, 133], ["Point", "Point", "Polygon", "range", "xrange", "Polygon", "xrange", "enumerate", "numpy.array", "LinearRing", "xrange", "xrange", "Point.within", "Point.within", "Point.within", "Point.within", "numpy.abs", "numpy.abs", "valid_intersect_areas.append", "numpy.array", "numpy.abs", "numpy.abs", "valid_intersect_areas.append", "valid_intersect_areas.append", "np.array.argmax", "np.array.argmax", "np.array.argmax", "np.array.argmax", "Polygon", "Polygon", "np.array.any", "Point.within", "Point.within", "valid_polys.append", "vp.append", "Point.within", "Point.within", "valid_polys.append", "vp.append", "ip.intersection", "ip.union", "xrange", "ip.intersection", "ip.union", "np.array.argmax", "np.array.argmax", "np.array.argmax", "np.array.argmax"], "function", ["None"], ["", "def", "paraToQuad_v2", "(", "kps", ",", "roRect", ",", "maskPoly", ")", ":", "\n", "    ", "ms", "=", "(", "kps", "[", "0", ",", "0", "]", ",", "kps", "[", "1", ",", "0", "]", ")", "\n", "xs", "=", "kps", "[", "0", ",", "1", ":", "5", "]", "\n", "xs", "=", "xs", "*", "2", "-", "ms", "[", "0", "]", "\n", "ys", "=", "kps", "[", "1", ",", "5", ":", "9", "]", "\n", "ys", "=", "ys", "*", "2", "-", "ms", "[", "1", "]", "\n", "crs", "=", "(", "kps", "[", "0", ",", "9", "]", ",", "kps", "[", "1", ",", "9", "]", ")", "\n", "ms", "=", "Point", "(", "ms", ")", "\n", "crs", "=", "Point", "(", "crs", ")", "\n", "roRectpoly", "=", "Polygon", "(", "[", "(", "roRect", "[", "0", "]", ",", "roRect", "[", "1", "]", ")", ",", "(", "roRect", "[", "2", "]", ",", "roRect", "[", "3", "]", ")", ",", "(", "roRect", "[", "4", "]", ",", "roRect", "[", "5", "]", ")", ",", "(", "roRect", "[", "6", "]", ",", "roRect", "[", "7", "]", ")", "]", ")", "# mask rect", "\n", "assert", "(", "maskPoly", ".", "shape", "[", "2", "]", "==", "2", ")", ",", "'x y correspond'", "\n", "maskpts", "=", "[", "(", "maskPoly", "[", "i", "]", "[", "0", "]", "[", "0", "]", ",", "maskPoly", "[", "i", "]", "[", "0", "]", "[", "1", "]", ")", "for", "i", "in", "xrange", "(", "maskPoly", ".", "shape", "[", "0", "]", ")", "]", "\n", "try", ":", "\n", "        ", "mask_poly", "=", "Polygon", "(", "maskpts", ")", "# mask rect", "\n", "", "except", ":", "\n", "        ", "return", "None", "\n", "", "if", "not", "(", "(", "ms", ".", "within", "(", "mask_poly", ")", "and", "crs", ".", "within", "(", "mask_poly", ")", ")", "or", "(", "roRectpoly", ".", "is_valid", "and", "ms", ".", "within", "(", "roRectpoly", ")", "and", "crs", ".", "within", "(", "roRectpoly", ")", ")", ")", ":", "\n", "        ", "return", "None", "\n", "", "idx", "=", "range", "(", "4", ")", "\n", "valid_polys", "=", "[", "]", "\n", "vp", "=", "[", "]", "\n", "for", "i1", "in", "xrange", "(", "4", ")", ":", "\n", "        ", "for", "i2", "in", "xrange", "(", "4", ")", ":", "\n", "            ", "for", "i3", "in", "xrange", "(", "4", ")", ":", "\n", "                ", "if", "i2", "!=", "i1", "!=", "i3", ":", "\n", "                    ", "i4", "=", "[", "idx", "[", "i", "]", "for", "i", "in", "xrange", "(", "4", ")", "if", "not", "i", "in", "[", "i1", ",", "i2", ",", "i3", "]", "]", "\n", "vas1s2", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", "\n", "try", ":", "\n", "                        ", "poly_s1", "=", "Polygon", "(", "[", "(", "xs", "[", "0", "]", ",", "ys", "[", "i1", "]", ")", ",", "(", "xs", "[", "1", "]", ",", "ys", "[", "i2", "]", ")", ",", "(", "xs", "[", "2", "]", ",", "ys", "[", "i3", "]", ")", ",", "(", "xs", "[", "3", "]", ",", "ys", "[", "i4", "]", ")", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "vas1s2", "[", "0", "]", "=", "1", "\n", "", "try", ":", "\n", "                        ", "poly_s2", "=", "Polygon", "(", "[", "(", "xs", "[", "0", "]", ",", "ys", "[", "i1", "]", ")", ",", "(", "xs", "[", "1", "]", ",", "ys", "[", "i2", "]", ")", ",", "(", "xs", "[", "3", "]", ",", "ys", "[", "i3", "]", ")", ",", "(", "xs", "[", "2", "]", ",", "ys", "[", "i4", "]", ")", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "vas1s2", "[", "1", "]", "=", "1", "\n", "", "if", "vas1s2", ".", "any", "(", ")", "==", "1", ":", "\n", "                        ", "continue", "\n", "", "if", "poly_s1", ".", "is_valid", "and", "ms", ".", "within", "(", "poly_s1", ")", "and", "crs", ".", "within", "(", "poly_s1", ")", ":", "\n", "                        ", "valid_polys", ".", "append", "(", "poly_s1", ")", "\n", "vp", ".", "append", "(", "[", "(", "xs", "[", "0", "]", ",", "ys", "[", "i1", "]", ")", ",", "(", "xs", "[", "1", "]", ",", "ys", "[", "i2", "]", ")", ",", "(", "xs", "[", "2", "]", ",", "ys", "[", "i3", "]", ")", ",", "(", "xs", "[", "3", "]", ",", "ys", "[", "i4", "]", ")", "]", ")", "\n", "", "if", "poly_s2", ".", "is_valid", "and", "ms", ".", "within", "(", "poly_s2", ")", "and", "crs", ".", "within", "(", "poly_s2", ")", ":", "\n", "                        ", "valid_polys", ".", "append", "(", "poly_s2", ")", "\n", "vp", ".", "append", "(", "[", "(", "xs", "[", "0", "]", ",", "ys", "[", "i1", "]", ")", ",", "(", "xs", "[", "1", "]", ",", "ys", "[", "i2", "]", ")", ",", "(", "xs", "[", "3", "]", ",", "ys", "[", "i3", "]", ")", ",", "(", "xs", "[", "2", "]", ",", "ys", "[", "i4", "]", ")", "]", ")", "\n", "\n", "", "", "", "", "", "valid_intersect_areas", "=", "[", "]", "\n", "if", "valid_polys", ":", "\n", "        ", "for", "ixp", ",", "ip", "in", "enumerate", "(", "valid_polys", ")", ":", "\n", "            ", "is_calmask", "=", "1", "\n", "try", ":", "\n", "                ", "ip_ins_area", "=", "np", ".", "abs", "(", "ip", ".", "intersection", "(", "mask_poly", ")", ".", "area", ")", "\n", "ip_un_area", "=", "np", ".", "abs", "(", "ip", ".", "union", "(", "mask_poly", ")", ".", "area", ")", "\n", "", "except", ":", "\n", "                ", "ip_ins_area", "=", "np", ".", "abs", "(", "ip", ".", "intersection", "(", "roRectpoly", ")", ".", "area", ")", "\n", "ip_un_area", "=", "np", ".", "abs", "(", "ip", ".", "union", "(", "roRectpoly", ")", ".", "area", ")", "\n", "is_calmask", "=", "0", "\n", "\n", "", "if", "ip_un_area", ">", "1e-5", ":", "\n", "                ", "if", "is_calmask", ":", "\n", "                    ", "valid_intersect_areas", ".", "append", "(", "ip_ins_area", "/", "ip_un_area", "+", "ip_ins_area", "/", "mask_poly", ".", "area", ")", "\n", "", "else", ":", "\n", "                    ", "valid_intersect_areas", ".", "append", "(", "ip_ins_area", "/", "ip_un_area", ")", "\n", "# valid_intersect_areas.append(ip_ins_area/(mask_poly.area+ip.area) + ip_ins_area/mask_poly.area) # next item is necessary", "\n", "", "", "else", ":", "\n", "                ", "valid_intersect_areas", ".", "append", "(", "0", ")", "# discard this poly", "\n", "", "", "via", "=", "np", ".", "array", "(", "valid_intersect_areas", ")", "\n", "# ================ change ccw ==================", "\n", "lr_checkCCW", "=", "LinearRing", "(", "vp", "[", "via", ".", "argmax", "(", ")", "]", ")", "\n", "if", "lr_checkCCW", ".", "is_ccw", ":", "\n", "            ", "return", "vp", "[", "via", ".", "argmax", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "vp", "[", "via", ".", "argmax", "(", ")", "]", "=", "[", "vp", "[", "via", ".", "argmax", "(", ")", "]", "[", "0", "]", ",", "vp", "[", "via", ".", "argmax", "(", ")", "]", "[", "3", "]", ",", "vp", "[", "via", ".", "argmax", "(", ")", "]", "[", "2", "]", ",", "vp", "[", "via", ".", "argmax", "(", ")", "]", "[", "1", "]", "]", "\n", "return", "vp", "[", "via", ".", "argmax", "(", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.demo.predictor.vis_keypoints": [[472, 531], ["matplotlib.get_cmap", "numpy.copy", "numpy.minimum", "numpy.minimum", "dataset_keypoints.index", "range", "cv2.addWeighted", "plt.get_cmap.", "cv2.line", "cv2.line", "len", "numpy.linspace", "tuple", "tuple", "tuple", "tuple", "cv2.line", "cv2.circle", "cv2.circle", "len", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "len", "len"], "function", ["None"], ["def", "vis_keypoints", "(", "img", ",", "kps", ",", "kp_thresh", "=", "2", ",", "alpha", "=", "0.7", ")", ":", "\n", "    ", "\"\"\"Visualizes keypoints (adapted from vis_one_image).\n    kps has shape (4, #keypoints) where 4 rows are (x, y, logit, prob).\n    \"\"\"", "\n", "dataset_keypoints", "=", "PersonKeypoints", ".", "NAMES", "\n", "kp_lines", "=", "PersonKeypoints", ".", "CONNECTIONS", "\n", "\n", "# Convert from plt 0-1 RGBA colors to 0-255 BGR colors for opencv.", "\n", "cmap", "=", "plt", ".", "get_cmap", "(", "'rainbow'", ")", "\n", "colors", "=", "[", "cmap", "(", "i", ")", "for", "i", "in", "np", ".", "linspace", "(", "0", ",", "1", ",", "len", "(", "kp_lines", ")", "+", "2", ")", "]", "\n", "colors", "=", "[", "(", "c", "[", "2", "]", "*", "255", ",", "c", "[", "1", "]", "*", "255", ",", "c", "[", "0", "]", "*", "255", ")", "for", "c", "in", "colors", "]", "\n", "\n", "# Perform the drawing on a copy of the image, to allow for blending.", "\n", "kp_mask", "=", "np", ".", "copy", "(", "img", ")", "\n", "\n", "# Draw mid shoulder / mid hip first for better visualization.", "\n", "mid_shoulder", "=", "(", "\n", "kps", "[", ":", "2", ",", "dataset_keypoints", ".", "index", "(", "'right_shoulder'", ")", "]", "+", "\n", "kps", "[", ":", "2", ",", "dataset_keypoints", ".", "index", "(", "'left_shoulder'", ")", "]", ")", "/", "2.0", "\n", "sc_mid_shoulder", "=", "np", ".", "minimum", "(", "\n", "kps", "[", "2", ",", "dataset_keypoints", ".", "index", "(", "'right_shoulder'", ")", "]", ",", "\n", "kps", "[", "2", ",", "dataset_keypoints", ".", "index", "(", "'left_shoulder'", ")", "]", ")", "\n", "mid_hip", "=", "(", "\n", "kps", "[", ":", "2", ",", "dataset_keypoints", ".", "index", "(", "'right_hip'", ")", "]", "+", "\n", "kps", "[", ":", "2", ",", "dataset_keypoints", ".", "index", "(", "'left_hip'", ")", "]", ")", "/", "2.0", "\n", "sc_mid_hip", "=", "np", ".", "minimum", "(", "\n", "kps", "[", "2", ",", "dataset_keypoints", ".", "index", "(", "'right_hip'", ")", "]", ",", "\n", "kps", "[", "2", ",", "dataset_keypoints", ".", "index", "(", "'left_hip'", ")", "]", ")", "\n", "nose_idx", "=", "dataset_keypoints", ".", "index", "(", "'nose'", ")", "\n", "if", "sc_mid_shoulder", ">", "kp_thresh", "and", "kps", "[", "2", ",", "nose_idx", "]", ">", "kp_thresh", ":", "\n", "        ", "cv2", ".", "line", "(", "\n", "kp_mask", ",", "tuple", "(", "mid_shoulder", ")", ",", "tuple", "(", "kps", "[", ":", "2", ",", "nose_idx", "]", ")", ",", "\n", "color", "=", "colors", "[", "len", "(", "kp_lines", ")", "]", ",", "thickness", "=", "2", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "", "if", "sc_mid_shoulder", ">", "kp_thresh", "and", "sc_mid_hip", ">", "kp_thresh", ":", "\n", "        ", "cv2", ".", "line", "(", "\n", "kp_mask", ",", "tuple", "(", "mid_shoulder", ")", ",", "tuple", "(", "mid_hip", ")", ",", "\n", "color", "=", "colors", "[", "len", "(", "kp_lines", ")", "+", "1", "]", ",", "thickness", "=", "2", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n", "# Draw the keypoints.", "\n", "", "for", "l", "in", "range", "(", "len", "(", "kp_lines", ")", ")", ":", "\n", "        ", "i1", "=", "kp_lines", "[", "l", "]", "[", "0", "]", "\n", "i2", "=", "kp_lines", "[", "l", "]", "[", "1", "]", "\n", "p1", "=", "kps", "[", "0", ",", "i1", "]", ",", "kps", "[", "1", ",", "i1", "]", "\n", "p2", "=", "kps", "[", "0", ",", "i2", "]", ",", "kps", "[", "1", ",", "i2", "]", "\n", "if", "kps", "[", "2", ",", "i1", "]", ">", "kp_thresh", "and", "kps", "[", "2", ",", "i2", "]", ">", "kp_thresh", ":", "\n", "            ", "cv2", ".", "line", "(", "\n", "kp_mask", ",", "p1", ",", "p2", ",", "\n", "color", "=", "colors", "[", "l", "]", ",", "thickness", "=", "2", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "", "if", "kps", "[", "2", ",", "i1", "]", ">", "kp_thresh", ":", "\n", "            ", "cv2", ".", "circle", "(", "\n", "kp_mask", ",", "p1", ",", "\n", "radius", "=", "3", ",", "color", "=", "colors", "[", "l", "]", ",", "thickness", "=", "-", "1", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "", "if", "kps", "[", "2", ",", "i2", "]", ">", "kp_thresh", ":", "\n", "            ", "cv2", ".", "circle", "(", "\n", "kp_mask", ",", "p2", ",", "\n", "radius", "=", "3", ",", "color", "=", "colors", "[", "l", "]", ",", "thickness", "=", "-", "1", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n", "# Blend the keypoints.", "\n", "", "", "return", "cv2", ".", "addWeighted", "(", "img", ",", "1.0", "-", "alpha", ",", "kp_mask", ",", "alpha", ",", "0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tools.test_net.main": [[21, 96], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "maskrcnn_benchmark.config.cfg.merge_from_file", "maskrcnn_benchmark.config.cfg.merge_from_list", "maskrcnn_benchmark.config.cfg.freeze", "maskrcnn_benchmark.utils.logger.setup_logger", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.modeling.detector.build_detection_model", "maskrcnn_benchmark.modeling.detector.build_detection_model.to", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer.load", "maskrcnn_benchmark.data.make_data_loader", "zip", "int", "torch.cuda.set_device", "torch.distributed.init_process_group", "maskrcnn_benchmark.utils.comm.synchronize", "maskrcnn_benchmark.utils.comm.get_rank", "len", "enumerate", "maskrcnn_benchmark.engine.inference.inference", "maskrcnn_benchmark.utils.comm.synchronize", "maskrcnn_benchmark.utils.collect_env.collect_env_info", "os.path.join", "maskrcnn_benchmark.utils.miscellaneous.mkdir"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.logger.setup_logger", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.detector.detectors.build_detection_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.data.build.make_data_loader", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.synchronize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_rank", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.engine.inference.inference", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.synchronize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.collect_env.collect_env_info", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.miscellaneous.mkdir"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch Object Detection Inference\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config-file\"", ",", "\n", "default", "=", "\"/private/home/fmassa/github/detectron.pytorch_v2/configs/e2e_faster_rcnn_R_50_C4_1x_caffe2.yaml\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "distributed", "=", "num_gpus", ">", "1", "\n", "\n", "if", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", "\n", ")", "\n", "synchronize", "(", ")", "\n", "\n", "", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "save_dir", "=", "\"\"", "\n", "logger", "=", "setup_logger", "(", "\"maskrcnn_benchmark\"", ",", "save_dir", ",", "get_rank", "(", ")", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "cfg", ")", "\n", "\n", "logger", ".", "info", "(", "\"Collecting env info (might take some time)\"", ")", "\n", "logger", ".", "info", "(", "\"\\n\"", "+", "collect_env_info", "(", ")", ")", "\n", "\n", "model", "=", "build_detection_model", "(", "cfg", ")", "\n", "model", ".", "to", "(", "cfg", ".", "MODEL", ".", "DEVICE", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "checkpointer", "=", "DetectronCheckpointer", "(", "cfg", ",", "model", ",", "save_dir", "=", "output_dir", ")", "\n", "_", "=", "checkpointer", ".", "load", "(", "cfg", ".", "MODEL", ".", "WEIGHT", ")", "\n", "\n", "iou_types", "=", "(", "\"bbox\"", ",", ")", "\n", "if", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "        ", "iou_types", "=", "iou_types", "+", "(", "\"segm\"", ",", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "KEYPOINT_ON", ":", "\n", "        ", "iou_types", "=", "iou_types", "+", "(", "\"keypoints\"", ",", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "KE_ON", ":", "\n", "        ", "iou_types", "=", "iou_types", "+", "(", "\"kes\"", ",", ")", "\n", "", "output_folders", "=", "[", "None", "]", "*", "len", "(", "cfg", ".", "DATASETS", ".", "TEST", ")", "\n", "dataset_names", "=", "cfg", ".", "DATASETS", ".", "TEST", "\n", "if", "cfg", ".", "OUTPUT_DIR", ":", "\n", "        ", "for", "idx", ",", "dataset_name", "in", "enumerate", "(", "dataset_names", ")", ":", "\n", "            ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"inference\"", ",", "dataset_name", ")", "\n", "mkdir", "(", "output_folder", ")", "\n", "output_folders", "[", "idx", "]", "=", "output_folder", "\n", "", "", "data_loaders_val", "=", "make_data_loader", "(", "cfg", ",", "is_train", "=", "False", ",", "is_distributed", "=", "distributed", ")", "\n", "for", "output_folder", ",", "dataset_name", ",", "data_loader_val", "in", "zip", "(", "output_folders", ",", "dataset_names", ",", "data_loaders_val", ")", ":", "\n", "        ", "inference", "(", "\n", "model", ",", "\n", "data_loader_val", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "iou_types", "=", "iou_types", ",", "\n", "box_only", "=", "False", "if", "cfg", ".", "MODEL", ".", "FCOS_ON", "or", "cfg", ".", "MODEL", ".", "RETINANET_ON", "else", "cfg", ".", "MODEL", ".", "RPN_ONLY", ",", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", ",", "\n", "expected_results", "=", "cfg", ".", "TEST", ".", "EXPECTED_RESULTS", ",", "\n", "expected_results_sigma_tol", "=", "cfg", ".", "TEST", ".", "EXPECTED_RESULTS_SIGMA_TOL", ",", "\n", "output_folder", "=", "output_folder", ",", "\n", ")", "\n", "synchronize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tools.train_net.train": [[29, 77], ["maskrcnn_benchmark.modeling.detector.build_detection_model", "torch.device", "torch.nn.parallel.DistributedDataParallel.to", "maskrcnn_benchmark.solver.make_optimizer", "maskrcnn_benchmark.solver.make_lr_scheduler", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer", "maskrcnn_benchmark.utils.checkpoint.DetectronCheckpointer.load", "arguments.update", "maskrcnn_benchmark.data.make_data_loader", "maskrcnn_benchmark.engine.trainer.do_train", "torch.nn.parallel.DistributedDataParallel", "maskrcnn_benchmark.utils.comm.get_rank", "maskrcnn_benchmark.config.cfg"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.detector.detectors.build_detection_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.build.make_optimizer", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.build.make_lr_scheduler", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.data.build.make_data_loader", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.engine.trainer.do_train", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_rank"], ["def", "train", "(", "cfg", ",", "local_rank", ",", "distributed", ")", ":", "\n", "    ", "model", "=", "build_detection_model", "(", "cfg", ")", "\n", "device", "=", "torch", ".", "device", "(", "cfg", ".", "MODEL", ".", "DEVICE", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "make_optimizer", "(", "cfg", ",", "model", ")", "\n", "scheduler", "=", "make_lr_scheduler", "(", "cfg", ",", "optimizer", ")", "\n", "\n", "if", "distributed", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ",", "device_ids", "=", "[", "local_rank", "]", ",", "output_device", "=", "local_rank", ",", "\n", "# this should be removed if we update BatchNorm stats", "\n", "broadcast_buffers", "=", "False", ",", "\n", ")", "\n", "\n", "", "arguments", "=", "{", "}", "\n", "arguments", "[", "\"iteration\"", "]", "=", "0", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "\n", "save_to_disk", "=", "get_rank", "(", ")", "==", "0", "\n", "checkpointer", "=", "DetectronCheckpointer", "(", "\n", "cfg", ",", "model", ",", "optimizer", ",", "scheduler", ",", "output_dir", ",", "save_to_disk", "\n", ")", "\n", "extra_checkpoint_data", "=", "checkpointer", ".", "load", "(", "cfg", ".", "MODEL", ".", "WEIGHT", ")", "\n", "arguments", ".", "update", "(", "extra_checkpoint_data", ")", "\n", "\n", "data_loader", "=", "make_data_loader", "(", "\n", "cfg", ",", "\n", "is_train", "=", "True", ",", "\n", "is_distributed", "=", "distributed", ",", "\n", "start_iter", "=", "arguments", "[", "\"iteration\"", "]", ",", "\n", ")", "\n", "\n", "checkpoint_period", "=", "cfg", ".", "SOLVER", ".", "CHECKPOINT_PERIOD", "\n", "\n", "do_train", "(", "\n", "model", ",", "\n", "data_loader", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "\n", "checkpointer", ",", "\n", "device", ",", "\n", "checkpoint_period", ",", "\n", "arguments", ",", "\n", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tools.train_net.run_test": [[79, 109], ["torch.cuda.empty_cache", "maskrcnn_benchmark.data.make_data_loader", "zip", "len", "enumerate", "maskrcnn_benchmark.engine.inference.inference", "maskrcnn_benchmark.utils.comm.synchronize", "os.path.join", "maskrcnn_benchmark.utils.miscellaneous.mkdir", "maskrcnn_benchmark.config.cfg"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.data.build.make_data_loader", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.engine.inference.inference", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.synchronize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.miscellaneous.mkdir"], ["", "def", "run_test", "(", "cfg", ",", "model", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "# TODO check if it helps", "\n", "iou_types", "=", "(", "\"bbox\"", ",", ")", "\n", "if", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "        ", "iou_types", "=", "iou_types", "+", "(", "\"segm\"", ",", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "KEYPOINT_ON", ":", "\n", "        ", "iou_types", "=", "iou_types", "+", "(", "\"keypoints\"", ",", ")", "\n", "", "output_folders", "=", "[", "None", "]", "*", "len", "(", "cfg", ".", "DATASETS", ".", "TEST", ")", "\n", "dataset_names", "=", "cfg", ".", "DATASETS", ".", "TEST", "\n", "if", "cfg", ".", "OUTPUT_DIR", ":", "\n", "        ", "for", "idx", ",", "dataset_name", "in", "enumerate", "(", "dataset_names", ")", ":", "\n", "            ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"inference\"", ",", "dataset_name", ")", "\n", "mkdir", "(", "output_folder", ")", "\n", "output_folders", "[", "idx", "]", "=", "output_folder", "\n", "", "", "data_loaders_val", "=", "make_data_loader", "(", "cfg", ",", "is_train", "=", "False", ",", "is_distributed", "=", "distributed", ")", "\n", "for", "output_folder", ",", "dataset_name", ",", "data_loader_val", "in", "zip", "(", "output_folders", ",", "dataset_names", ",", "data_loaders_val", ")", ":", "\n", "        ", "inference", "(", "\n", "model", ",", "\n", "data_loader_val", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "iou_types", "=", "iou_types", ",", "\n", "box_only", "=", "False", "if", "cfg", ".", "MODEL", ".", "FCOS_ON", "or", "cfg", ".", "MODEL", ".", "RETINANET_ON", "else", "cfg", ".", "MODEL", ".", "RPN_ONLY", ",", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", ",", "\n", "expected_results", "=", "cfg", ".", "TEST", ".", "EXPECTED_RESULTS", ",", "\n", "expected_results_sigma_tol", "=", "cfg", ".", "TEST", ".", "EXPECTED_RESULTS_SIGMA_TOL", ",", "\n", "output_folder", "=", "output_folder", ",", "\n", ")", "\n", "synchronize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tools.train_net.main": [[111, 171], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "maskrcnn_benchmark.config.cfg.merge_from_file", "maskrcnn_benchmark.config.cfg.merge_from_list", "maskrcnn_benchmark.config.cfg.freeze", "maskrcnn_benchmark.utils.logger.setup_logger", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "maskrcnn_benchmark.utils.logger.setup_logger.info", "train_net.train", "int", "torch.cuda.set_device", "torch.distributed.init_process_group", "maskrcnn_benchmark.utils.comm.synchronize", "maskrcnn_benchmark.utils.miscellaneous.mkdir", "maskrcnn_benchmark.utils.comm.get_rank", "open", "maskrcnn_benchmark.utils.logger.setup_logger.info", "train_net.run_test", "maskrcnn_benchmark.utils.collect_env.collect_env_info", "cf.read"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.logger.setup_logger", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tools.train_net.train", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.synchronize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.miscellaneous.mkdir", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_rank", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tools.train_net.run_test", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.collect_env.collect_env_info"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch Object Detection Training\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config-file\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--skip-test\"", ",", "\n", "dest", "=", "\"skip_test\"", ",", "\n", "help", "=", "\"Do not test the final model\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "args", ".", "distributed", "=", "num_gpus", ">", "1", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", "\n", ")", "\n", "synchronize", "(", ")", "\n", "\n", "", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "if", "output_dir", ":", "\n", "        ", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "\"maskrcnn_benchmark\"", ",", "output_dir", ",", "get_rank", "(", ")", ")", "\n", "logger", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "logger", ".", "info", "(", "\"Collecting env info (might take some time)\"", ")", "\n", "logger", ".", "info", "(", "\"\\n\"", "+", "collect_env_info", "(", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "with", "open", "(", "args", ".", "config_file", ",", "\"r\"", ")", "as", "cf", ":", "\n", "        ", "config_str", "=", "\"\\n\"", "+", "cf", ".", "read", "(", ")", "\n", "logger", ".", "info", "(", "config_str", ")", "\n", "", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "model", "=", "train", "(", "cfg", ",", "args", ".", "local_rank", ",", "args", ".", "distributed", ")", "\n", "\n", "if", "not", "args", ".", "skip_test", ":", "\n", "        ", "run_test", "(", "cfg", ",", "model", ",", "args", ".", "distributed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_metric_logger.TestMetricLogger.test_update": [[8, 18], ["maskrcnn_benchmark.utils.metric_logger.MetricLogger", "range", "test_metric_logger.TestMetricLogger.assertEqual", "test_metric_logger.TestMetricLogger.assertEqual", "test_metric_logger.TestMetricLogger.assertEqual", "test_metric_logger.TestMetricLogger.assertEqual", "maskrcnn_benchmark.utils.metric_logger.MetricLogger.update", "float"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update"], ["    ", "def", "test_update", "(", "self", ")", ":", "\n", "        ", "meter", "=", "MetricLogger", "(", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "meter", ".", "update", "(", "metric", "=", "float", "(", "i", ")", ")", "\n", "\n", "", "m", "=", "meter", ".", "meters", "[", "\"metric\"", "]", "\n", "self", ".", "assertEqual", "(", "m", ".", "count", ",", "10", ")", "\n", "self", ".", "assertEqual", "(", "m", ".", "total", ",", "45", ")", "\n", "self", ".", "assertEqual", "(", "m", ".", "median", ",", "4", ")", "\n", "self", ".", "assertEqual", "(", "m", ".", "avg", ",", "4.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_metric_logger.TestMetricLogger.test_no_attr": [[19, 26], ["maskrcnn_benchmark.utils.metric_logger.MetricLogger", "test_metric_logger.TestMetricLogger.assertRaises"], "methods", ["None"], ["", "def", "test_no_attr", "(", "self", ")", ":", "\n", "        ", "meter", "=", "MetricLogger", "(", ")", "\n", "_", "=", "meter", ".", "meters", "\n", "_", "=", "meter", ".", "delimiter", "\n", "def", "broken", "(", ")", ":", "\n", "            ", "_", "=", "meter", ".", "not_existent", "\n", "", "self", ".", "assertRaises", "(", "AttributeError", ",", "broken", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_predictors.TestPredictors.test_roi_box_predictors": [[53, 69], ["test_predictors._test_predictors", "test_predictors.TestPredictors.assertEqual", "test_predictors.TestPredictors.assertEqual", "test_predictors.TestPredictors.assertEqual", "test_predictors.TestPredictors.assertEqual", "test_predictors.TestPredictors.assertEqual", "len"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_predictors._test_predictors"], ["    ", "def", "test_roi_box_predictors", "(", "self", ")", ":", "\n", "        ", "''' Make sure roi box predictors run '''", "\n", "for", "cur_in", ",", "cur_out", ",", "cur_cfg", "in", "_test_predictors", "(", "\n", "self", ",", "\n", "registry", ".", "ROI_BOX_PREDICTOR", ",", "\n", "PREDICTOR_CFGS", ",", "\n", "PREDICTOR_INPUT_CHANNELS", ",", "\n", "hwsize", "=", "1", ",", "\n", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "len", "(", "cur_out", ")", ",", "2", ")", "\n", "scores", ",", "bbox_deltas", "=", "cur_out", "[", "0", "]", ",", "cur_out", "[", "1", "]", "\n", "self", ".", "assertEqual", "(", "\n", "scores", ".", "shape", "[", "1", "]", ",", "cur_cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_CLASSES", ")", "\n", "self", ".", "assertEqual", "(", "scores", ".", "shape", "[", "0", "]", ",", "cur_in", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "scores", ".", "shape", "[", "0", "]", ",", "bbox_deltas", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "scores", ".", "shape", "[", "1", "]", "*", "4", ",", "bbox_deltas", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_predictors.TestPredictors.test_roi_keypoints_predictors": [[70, 82], ["test_predictors._test_predictors", "test_predictors.TestPredictors.assertEqual", "test_predictors.TestPredictors.assertEqual"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_predictors._test_predictors"], ["", "", "def", "test_roi_keypoints_predictors", "(", "self", ")", ":", "\n", "        ", "''' Make sure roi keypoint predictors run '''", "\n", "for", "cur_in", ",", "cur_out", ",", "cur_cfg", "in", "_test_predictors", "(", "\n", "self", ",", "\n", "registry", ".", "ROI_KEYPOINT_PREDICTOR", ",", "\n", "PREDICTOR_CFGS", ",", "\n", "PREDICTOR_INPUT_CHANNELS", ",", "\n", "hwsize", "=", "14", ",", "\n", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "cur_out", ".", "shape", "[", "0", "]", ",", "cur_in", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "\n", "cur_out", ".", "shape", "[", "1", "]", ",", "cur_cfg", ".", "MODEL", ".", "ROI_KEYPOINT_HEAD", ".", "NUM_CLASSES", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_predictors.TestPredictors.test_roi_mask_predictors": [[83, 95], ["test_predictors._test_predictors", "test_predictors.TestPredictors.assertEqual", "test_predictors.TestPredictors.assertEqual"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_predictors._test_predictors"], ["", "", "def", "test_roi_mask_predictors", "(", "self", ")", ":", "\n", "        ", "''' Make sure roi mask predictors run '''", "\n", "for", "cur_in", ",", "cur_out", ",", "cur_cfg", "in", "_test_predictors", "(", "\n", "self", ",", "\n", "registry", ".", "ROI_MASK_PREDICTOR", ",", "\n", "PREDICTOR_CFGS", ",", "\n", "PREDICTOR_INPUT_CHANNELS", ",", "\n", "hwsize", "=", "14", ",", "\n", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "cur_out", ".", "shape", "[", "0", "]", ",", "cur_in", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "\n", "cur_out", ".", "shape", "[", "1", "]", ",", "cur_cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_CLASSES", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_predictors._test_predictors": [[23, 50], ["test_predictors..assertGreater", "predictors.items", "len", "print", "overwrite_in_channels.get", "builder", "torch.rand", "builder.", "utils.load_config", "copy.deepcopy", "maskrcnn_benchmark.modeling.registry.ROI_BOX_PREDICTOR", "maskrcnn_benchmark.modeling.registry.ROI_KEYPOINT_PREDICTOR", "maskrcnn_benchmark.modeling.registry.ROI_MASK_PREDICTOR"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.utils.load_config"], ["def", "_test_predictors", "(", "\n", "self", ",", "predictors", ",", "overwrite_cfgs", ",", "overwrite_in_channels", ",", "\n", "hwsize", ",", "\n", ")", ":", "\n", "    ", "''' Make sure predictors run '''", "\n", "\n", "self", ".", "assertGreater", "(", "len", "(", "predictors", ")", ",", "0", ")", "\n", "\n", "in_channels_default", "=", "64", "\n", "\n", "for", "name", ",", "builder", "in", "predictors", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "'Testing {}...'", ".", "format", "(", "name", ")", ")", "\n", "if", "name", "in", "overwrite_cfgs", ":", "\n", "            ", "cfg", "=", "load_config", "(", "overwrite_cfgs", "[", "name", "]", ")", "\n", "", "else", ":", "\n", "# Use default config if config file is not specified", "\n", "            ", "cfg", "=", "copy", ".", "deepcopy", "(", "g_cfg", ")", "\n", "\n", "", "in_channels", "=", "overwrite_in_channels", ".", "get", "(", "\n", "name", ",", "in_channels_default", ")", "\n", "\n", "fe", "=", "builder", "(", "cfg", ",", "in_channels", ")", "\n", "\n", "N", ",", "C_in", ",", "H", ",", "W", "=", "2", ",", "in_channels", ",", "hwsize", ",", "hwsize", "\n", "input", "=", "torch", ".", "rand", "(", "[", "N", ",", "C_in", ",", "H", ",", "W", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "out", "=", "fe", "(", "input", ")", "\n", "yield", "input", ",", "out", ",", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_configs.TestConfigs.test_configs_load": [[10, 21], ["utils.get_config_root_path", "glob.glob", "test_configs.TestConfigs.assertGreater", "os.path.join", "len", "print", "utils.load_config_from_file"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.env_tests.env.get_config_root_path", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.utils.load_config_from_file"], ["    ", "def", "test_configs_load", "(", "self", ")", ":", "\n", "        ", "''' Make sure configs are loadable '''", "\n", "\n", "cfg_root_path", "=", "utils", ".", "get_config_root_path", "(", ")", "\n", "files", "=", "glob", ".", "glob", "(", "\n", "os", ".", "path", ".", "join", "(", "cfg_root_path", ",", "\"./**/*.yaml\"", ")", ",", "recursive", "=", "True", ")", "\n", "self", ".", "assertGreater", "(", "len", "(", "files", ")", ",", "0", ")", "\n", "\n", "for", "fn", "in", "files", ":", "\n", "            ", "print", "(", "'Loading {}...'", ".", "format", "(", "fn", ")", ")", "\n", "utils", ".", "load_config_from_file", "(", "fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_data_samplers.SubsetSampler.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "indices", ")", ":", "\n", "        ", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_data_samplers.SubsetSampler.__iter__": [[19, 21], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_data_samplers.SubsetSampler.__len__": [[22, 24], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_data_samplers.TestGroupedBatchSampler.test_respect_order_simple": [[27, 39], ["torch.utils.data.sampler.SequentialSampler", "maskrcnn_benchmark.data.samplers.GroupedBatchSampler", "list", "list", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "range", "itertools.chain.from_iterable"], "methods", ["None"], ["    ", "def", "test_respect_order_simple", "(", "self", ")", ":", "\n", "        ", "drop_uneven", "=", "False", "\n", "dataset", "=", "[", "i", "for", "i", "in", "range", "(", "40", ")", "]", "\n", "group_ids", "=", "[", "i", "//", "10", "for", "i", "in", "dataset", "]", "\n", "sampler", "=", "SequentialSampler", "(", "dataset", ")", "\n", "for", "batch_size", "in", "[", "1", ",", "3", ",", "5", ",", "6", "]", ":", "\n", "            ", "batch_sampler", "=", "GroupedBatchSampler", "(", "\n", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", "\n", ")", "\n", "result", "=", "list", "(", "batch_sampler", ")", "\n", "merged_result", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "result", ")", ")", "\n", "self", ".", "assertEqual", "(", "merged_result", ",", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_data_samplers.TestGroupedBatchSampler.test_respect_order": [[40, 58], ["torch.utils.data.sampler.SequentialSampler", "enumerate", "maskrcnn_benchmark.data.samplers.GroupedBatchSampler", "list", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "range"], "methods", ["None"], ["", "", "def", "test_respect_order", "(", "self", ")", ":", "\n", "        ", "drop_uneven", "=", "False", "\n", "dataset", "=", "[", "i", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "group_ids", "=", "[", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", "]", "\n", "sampler", "=", "SequentialSampler", "(", "dataset", ")", "\n", "\n", "expected", "=", "[", "\n", "[", "[", "0", "]", ",", "[", "1", "]", ",", "[", "2", "]", ",", "[", "3", "]", ",", "[", "4", "]", ",", "[", "5", "]", ",", "[", "6", "]", ",", "[", "7", "]", ",", "[", "8", "]", ",", "[", "9", "]", "]", ",", "\n", "[", "[", "0", ",", "1", ",", "3", "]", ",", "[", "2", ",", "4", ",", "5", "]", ",", "[", "6", ",", "9", "]", ",", "[", "7", ",", "8", "]", "]", ",", "\n", "[", "[", "0", ",", "1", ",", "3", ",", "6", "]", ",", "[", "2", ",", "4", ",", "5", ",", "7", "]", ",", "[", "8", "]", ",", "[", "9", "]", "]", ",", "\n", "]", "\n", "\n", "for", "idx", ",", "batch_size", "in", "enumerate", "(", "[", "1", ",", "3", ",", "4", "]", ")", ":", "\n", "            ", "batch_sampler", "=", "GroupedBatchSampler", "(", "\n", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", "\n", ")", "\n", "result", "=", "list", "(", "batch_sampler", ")", "\n", "self", ".", "assertEqual", "(", "result", ",", "expected", "[", "idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_data_samplers.TestGroupedBatchSampler.test_respect_order_drop_uneven": [[59, 71], ["torch.utils.data.sampler.SequentialSampler", "maskrcnn_benchmark.data.samplers.GroupedBatchSampler", "list", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "range"], "methods", ["None"], ["", "", "def", "test_respect_order_drop_uneven", "(", "self", ")", ":", "\n", "        ", "batch_size", "=", "3", "\n", "drop_uneven", "=", "True", "\n", "dataset", "=", "[", "i", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "group_ids", "=", "[", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", "]", "\n", "sampler", "=", "SequentialSampler", "(", "dataset", ")", "\n", "batch_sampler", "=", "GroupedBatchSampler", "(", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", ")", "\n", "\n", "result", "=", "list", "(", "batch_sampler", ")", "\n", "\n", "expected", "=", "[", "[", "0", ",", "1", ",", "3", "]", ",", "[", "2", ",", "4", ",", "5", "]", "]", "\n", "self", ".", "assertEqual", "(", "result", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_data_samplers.TestGroupedBatchSampler.test_subset_sampler": [[72, 84], ["test_data_samplers.SubsetSampler", "maskrcnn_benchmark.data.samplers.GroupedBatchSampler", "list", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "range"], "methods", ["None"], ["", "def", "test_subset_sampler", "(", "self", ")", ":", "\n", "        ", "batch_size", "=", "3", "\n", "drop_uneven", "=", "False", "\n", "dataset", "=", "[", "i", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "group_ids", "=", "[", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", "]", "\n", "sampler", "=", "SubsetSampler", "(", "[", "0", ",", "3", ",", "5", ",", "6", ",", "7", ",", "8", "]", ")", "\n", "\n", "batch_sampler", "=", "GroupedBatchSampler", "(", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", ")", "\n", "result", "=", "list", "(", "batch_sampler", ")", "\n", "\n", "expected", "=", "[", "[", "0", ",", "3", ",", "6", "]", ",", "[", "5", ",", "7", ",", "8", "]", "]", "\n", "self", ".", "assertEqual", "(", "result", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_data_samplers.TestGroupedBatchSampler.test_permute_subset_sampler": [[85, 97], ["test_data_samplers.SubsetSampler", "maskrcnn_benchmark.data.samplers.GroupedBatchSampler", "list", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "range"], "methods", ["None"], ["", "def", "test_permute_subset_sampler", "(", "self", ")", ":", "\n", "        ", "batch_size", "=", "3", "\n", "drop_uneven", "=", "False", "\n", "dataset", "=", "[", "i", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "group_ids", "=", "[", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", "]", "\n", "sampler", "=", "SubsetSampler", "(", "[", "5", ",", "0", ",", "6", ",", "1", ",", "3", ",", "8", "]", ")", "\n", "\n", "batch_sampler", "=", "GroupedBatchSampler", "(", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", ")", "\n", "result", "=", "list", "(", "batch_sampler", ")", "\n", "\n", "expected", "=", "[", "[", "5", ",", "8", "]", ",", "[", "0", ",", "6", ",", "1", "]", ",", "[", "3", "]", "]", "\n", "self", ".", "assertEqual", "(", "result", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_data_samplers.TestGroupedBatchSampler.test_permute_subset_sampler_drop_uneven": [[98, 110], ["test_data_samplers.SubsetSampler", "maskrcnn_benchmark.data.samplers.GroupedBatchSampler", "list", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "range"], "methods", ["None"], ["", "def", "test_permute_subset_sampler_drop_uneven", "(", "self", ")", ":", "\n", "        ", "batch_size", "=", "3", "\n", "drop_uneven", "=", "True", "\n", "dataset", "=", "[", "i", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "group_ids", "=", "[", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", "]", "\n", "sampler", "=", "SubsetSampler", "(", "[", "5", ",", "0", ",", "6", ",", "1", ",", "3", ",", "8", "]", ")", "\n", "\n", "batch_sampler", "=", "GroupedBatchSampler", "(", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", ")", "\n", "result", "=", "list", "(", "batch_sampler", ")", "\n", "\n", "expected", "=", "[", "[", "0", ",", "6", ",", "1", "]", "]", "\n", "self", ".", "assertEqual", "(", "result", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_data_samplers.TestGroupedBatchSampler.test_len": [[111, 128], ["torch.utils.data.sampler.RandomSampler", "maskrcnn_benchmark.data.samplers.GroupedBatchSampler", "list", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "maskrcnn_benchmark.data.samplers.GroupedBatchSampler", "len", "list", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "test_data_samplers.TestGroupedBatchSampler.assertEqual", "random.randint", "len", "len", "len", "len", "len", "len", "len", "range"], "methods", ["None"], ["", "def", "test_len", "(", "self", ")", ":", "\n", "        ", "batch_size", "=", "3", "\n", "drop_uneven", "=", "True", "\n", "dataset", "=", "[", "i", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "group_ids", "=", "[", "random", ".", "randint", "(", "0", ",", "1", ")", "for", "_", "in", "dataset", "]", "\n", "sampler", "=", "RandomSampler", "(", "dataset", ")", "\n", "\n", "batch_sampler", "=", "GroupedBatchSampler", "(", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", ")", "\n", "result", "=", "list", "(", "batch_sampler", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "result", ")", ",", "len", "(", "batch_sampler", ")", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "result", ")", ",", "len", "(", "batch_sampler", ")", ")", "\n", "\n", "batch_sampler", "=", "GroupedBatchSampler", "(", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", ")", "\n", "batch_sampler_len", "=", "len", "(", "batch_sampler", ")", "\n", "result", "=", "list", "(", "batch_sampler", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "result", ")", ",", "batch_sampler_len", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "result", ")", ",", "len", "(", "batch_sampler", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_data_samplers.TestIterationBasedBatchSampler.test_number_of_iters_and_elements": [[131, 150], ["torch.utils.data.sampler.SequentialSampler", "torch.utils.data.sampler.BatchSampler", "maskrcnn_benchmark.data.samplers.IterationBasedBatchSampler", "enumerate", "len", "min", "test_data_samplers.TestIterationBasedBatchSampler.assertEqual", "range", "len", "len", "range"], "methods", ["None"], ["    ", "def", "test_number_of_iters_and_elements", "(", "self", ")", ":", "\n", "        ", "for", "batch_size", "in", "[", "2", ",", "3", ",", "4", "]", ":", "\n", "            ", "for", "num_iterations", "in", "[", "4", ",", "10", ",", "20", "]", ":", "\n", "                ", "for", "drop_last", "in", "[", "False", ",", "True", "]", ":", "\n", "                    ", "dataset", "=", "[", "i", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "sampler", "=", "SequentialSampler", "(", "dataset", ")", "\n", "batch_sampler", "=", "BatchSampler", "(", "\n", "sampler", ",", "batch_size", ",", "drop_last", "=", "drop_last", "\n", ")", "\n", "\n", "iter_sampler", "=", "IterationBasedBatchSampler", "(", "\n", "batch_sampler", ",", "num_iterations", "\n", ")", "\n", "assert", "len", "(", "iter_sampler", ")", "==", "num_iterations", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "iter_sampler", ")", ":", "\n", "                        ", "start", "=", "(", "i", "%", "len", "(", "batch_sampler", ")", ")", "*", "batch_size", "\n", "end", "=", "min", "(", "start", "+", "batch_size", ",", "len", "(", "dataset", ")", ")", "\n", "expected", "=", "[", "x", "for", "x", "in", "range", "(", "start", ",", "end", ")", "]", "\n", "self", ".", "assertEqual", "(", "batch", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_segmentation_mask.TestSegmentationMask.__init__": [[8, 22], ["unittest.TestCase.__init__", "maskrcnn_benchmark.structures.segmentation_mask.SegmentationMask", "maskrcnn_benchmark.structures.segmentation_mask.SegmentationMask().convert", "maskrcnn_benchmark.structures.segmentation_mask.SegmentationMask"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert"], ["    ", "def", "__init__", "(", "self", ",", "method_name", "=", "'runTest'", ")", ":", "\n", "        ", "super", "(", "TestSegmentationMask", ",", "self", ")", ".", "__init__", "(", "method_name", ")", "\n", "poly", "=", "[", "[", "[", "423.0", ",", "306.5", ",", "406.5", ",", "277.0", ",", "400.0", ",", "271.5", ",", "389.5", ",", "277.0", ",", "\n", "387.5", ",", "292.0", ",", "384.5", ",", "295.0", ",", "374.5", ",", "220.0", ",", "378.5", ",", "210.0", ",", "\n", "391.0", ",", "200.5", ",", "404.0", ",", "199.5", ",", "414.0", ",", "203.5", ",", "425.5", ",", "221.0", ",", "\n", "438.5", ",", "297.0", ",", "423.0", ",", "306.5", "]", ",", "\n", "[", "100", ",", "100", ",", "200", ",", "100", ",", "200", ",", "200", ",", "100", ",", "200", "]", ",", "\n", "]", "]", "\n", "width", "=", "640", "\n", "height", "=", "480", "\n", "size", "=", "width", ",", "height", "\n", "\n", "self", ".", "P", "=", "SegmentationMask", "(", "poly", ",", "size", ",", "'poly'", ")", "\n", "self", ".", "M", "=", "SegmentationMask", "(", "poly", ",", "size", ",", "'poly'", ")", ".", "convert", "(", "'mask'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_segmentation_mask.TestSegmentationMask.L1": [[24, 28], ["torch.sum().item", "A.get_mask_tensor", "B.get_mask_tensor", "torch.sum", "torch.abs", "torch.sum().item.float"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.SegmentationMask.get_mask_tensor", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.SegmentationMask.get_mask_tensor"], ["", "def", "L1", "(", "self", ",", "A", ",", "B", ")", ":", "\n", "        ", "diff", "=", "A", ".", "get_mask_tensor", "(", ")", "-", "B", ".", "get_mask_tensor", "(", ")", "\n", "diff", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "diff", ".", "float", "(", ")", ")", ")", ".", "item", "(", ")", "\n", "return", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_segmentation_mask.TestSegmentationMask.test_convert": [[30, 39], ["test_segmentation_mask.TestSegmentationMask.M.convert().convert", "test_segmentation_mask.TestSegmentationMask.P.convert().convert", "test_segmentation_mask.TestSegmentationMask.L1", "test_segmentation_mask.TestSegmentationMask.L1", "test_segmentation_mask.TestSegmentationMask.assertTrue", "test_segmentation_mask.TestSegmentationMask.assertTrue", "test_segmentation_mask.TestSegmentationMask.assertTrue", "test_segmentation_mask.TestSegmentationMask.M.convert", "test_segmentation_mask.TestSegmentationMask.P.convert"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_segmentation_mask.TestSegmentationMask.L1", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_segmentation_mask.TestSegmentationMask.L1", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert"], ["", "def", "test_convert", "(", "self", ")", ":", "\n", "        ", "M_hat", "=", "self", ".", "M", ".", "convert", "(", "'poly'", ")", ".", "convert", "(", "'mask'", ")", "\n", "P_hat", "=", "self", ".", "P", ".", "convert", "(", "'mask'", ")", ".", "convert", "(", "'poly'", ")", "\n", "\n", "diff_mask", "=", "self", ".", "L1", "(", "self", ".", "M", ",", "M_hat", ")", "\n", "diff_poly", "=", "self", ".", "L1", "(", "self", ".", "P", ",", "P_hat", ")", "\n", "self", ".", "assertTrue", "(", "diff_mask", "==", "diff_poly", ")", "\n", "self", ".", "assertTrue", "(", "diff_mask", "<=", "8169.", ")", "\n", "self", ".", "assertTrue", "(", "diff_poly", "<=", "8169.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_segmentation_mask.TestSegmentationMask.test_crop": [[41, 45], ["test_segmentation_mask.TestSegmentationMask.L1", "test_segmentation_mask.TestSegmentationMask.assertTrue", "test_segmentation_mask.TestSegmentationMask.M.crop", "test_segmentation_mask.TestSegmentationMask.P.crop"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_segmentation_mask.TestSegmentationMask.L1", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.crop", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.crop"], ["", "def", "test_crop", "(", "self", ")", ":", "\n", "        ", "box", "=", "[", "400", ",", "250", ",", "500", ",", "300", "]", "# xyxy", "\n", "diff", "=", "self", ".", "L1", "(", "self", ".", "M", ".", "crop", "(", "box", ")", ",", "self", ".", "P", ".", "crop", "(", "box", ")", ")", "\n", "self", ".", "assertTrue", "(", "diff", "<=", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_segmentation_mask.TestSegmentationMask.test_resize": [[47, 57], ["test_segmentation_mask.TestSegmentationMask.M.resize", "test_segmentation_mask.TestSegmentationMask.P.resize", "test_segmentation_mask.TestSegmentationMask.L1", "test_segmentation_mask.TestSegmentationMask.assertTrue", "test_segmentation_mask.TestSegmentationMask.assertTrue", "test_segmentation_mask.TestSegmentationMask.assertTrue", "test_segmentation_mask.TestSegmentationMask.assertTrue"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_segmentation_mask.TestSegmentationMask.L1"], ["", "def", "test_resize", "(", "self", ")", ":", "\n", "        ", "new_size", "=", "50", ",", "25", "\n", "M_hat", "=", "self", ".", "M", ".", "resize", "(", "new_size", ")", "\n", "P_hat", "=", "self", ".", "P", ".", "resize", "(", "new_size", ")", "\n", "diff", "=", "self", ".", "L1", "(", "M_hat", ",", "P_hat", ")", "\n", "\n", "self", ".", "assertTrue", "(", "self", ".", "M", ".", "size", "==", "self", ".", "P", ".", "size", ")", "\n", "self", ".", "assertTrue", "(", "M_hat", ".", "size", "==", "P_hat", ".", "size", ")", "\n", "self", ".", "assertTrue", "(", "self", ".", "M", ".", "size", "!=", "M_hat", ".", "size", ")", "\n", "self", ".", "assertTrue", "(", "diff", "<=", "255.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_segmentation_mask.TestSegmentationMask.test_transpose": [[59, 70], ["test_segmentation_mask.TestSegmentationMask.L1", "test_segmentation_mask.TestSegmentationMask.L1", "test_segmentation_mask.TestSegmentationMask.assertTrue", "test_segmentation_mask.TestSegmentationMask.assertTrue", "test_segmentation_mask.TestSegmentationMask.M.transpose", "test_segmentation_mask.TestSegmentationMask.P.transpose", "test_segmentation_mask.TestSegmentationMask.M.transpose", "test_segmentation_mask.TestSegmentationMask.P.transpose"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_segmentation_mask.TestSegmentationMask.L1", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_segmentation_mask.TestSegmentationMask.L1", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.transpose", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.transpose", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.transpose", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.transpose"], ["", "def", "test_transpose", "(", "self", ")", ":", "\n", "        ", "FLIP_LEFT_RIGHT", "=", "0", "\n", "FLIP_TOP_BOTTOM", "=", "1", "\n", "diff_hor", "=", "self", ".", "L1", "(", "self", ".", "M", ".", "transpose", "(", "FLIP_LEFT_RIGHT", ")", ",", "\n", "self", ".", "P", ".", "transpose", "(", "FLIP_LEFT_RIGHT", ")", ")", "\n", "\n", "diff_ver", "=", "self", ".", "L1", "(", "self", ".", "M", ".", "transpose", "(", "FLIP_TOP_BOTTOM", ")", ",", "\n", "self", ".", "P", ".", "transpose", "(", "FLIP_TOP_BOTTOM", ")", ")", "\n", "\n", "self", ".", "assertTrue", "(", "diff_hor", "<=", "53250.", ")", "\n", "self", ".", "assertTrue", "(", "diff_ver", "<=", "42494.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_feature_extractors.TestFeatureExtractors.test_roi_box_feature_extractors": [[64, 71], ["test_feature_extractors._test_feature_extractors"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_feature_extractors._test_feature_extractors"], ["    ", "def", "test_roi_box_feature_extractors", "(", "self", ")", ":", "\n", "        ", "''' Make sure roi box feature extractors run '''", "\n", "_test_feature_extractors", "(", "\n", "self", ",", "\n", "registry", ".", "ROI_BOX_FEATURE_EXTRACTORS", ",", "\n", "FEATURE_EXTRACTORS_CFGS", ",", "\n", "FEATURE_EXTRACTORS_INPUT_CHANNELS", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_feature_extractors.TestFeatureExtractors.test_roi_keypoints_feature_extractors": [[73, 80], ["test_feature_extractors._test_feature_extractors"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_feature_extractors._test_feature_extractors"], ["", "def", "test_roi_keypoints_feature_extractors", "(", "self", ")", ":", "\n", "        ", "''' Make sure roi keypoints feature extractors run '''", "\n", "_test_feature_extractors", "(", "\n", "self", ",", "\n", "registry", ".", "ROI_KEYPOINT_FEATURE_EXTRACTORS", ",", "\n", "FEATURE_EXTRACTORS_CFGS", ",", "\n", "FEATURE_EXTRACTORS_INPUT_CHANNELS", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_feature_extractors.TestFeatureExtractors.test_roi_mask_feature_extractors": [[82, 89], ["test_feature_extractors._test_feature_extractors"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_feature_extractors._test_feature_extractors"], ["", "def", "test_roi_mask_feature_extractors", "(", "self", ")", ":", "\n", "        ", "''' Make sure roi mask feature extractors run '''", "\n", "_test_feature_extractors", "(", "\n", "self", ",", "\n", "registry", ".", "ROI_MASK_FEATURE_EXTRACTORS", ",", "\n", "FEATURE_EXTRACTORS_CFGS", ",", "\n", "FEATURE_EXTRACTORS_INPUT_CHANNELS", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_feature_extractors._test_feature_extractors": [[25, 60], ["test_feature_extractors..assertGreater", "extractors.items", "len", "print", "overwrite_in_channels.get", "builder", "test_feature_extractors..assertIsNotNone", "torch.rand", "maskrcnn_benchmark.structures.bounding_box.BoxList", "builder.", "test_feature_extractors..assertEqual", "utils.load_config", "copy.deepcopy", "getattr", "torch.Size", "len", "maskrcnn_benchmark.modeling.registry.ROI_BOX_FEATURE_EXTRACTORS", "maskrcnn_benchmark.modeling.registry.ROI_KEYPOINT_FEATURE_EXTRACTORS", "maskrcnn_benchmark.modeling.registry.ROI_MASK_FEATURE_EXTRACTORS"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.utils.load_config"], ["def", "_test_feature_extractors", "(", "\n", "self", ",", "extractors", ",", "overwrite_cfgs", ",", "overwrite_in_channels", "\n", ")", ":", "\n", "    ", "''' Make sure roi box feature extractors run '''", "\n", "\n", "self", ".", "assertGreater", "(", "len", "(", "extractors", ")", ",", "0", ")", "\n", "\n", "in_channels_default", "=", "64", "\n", "\n", "for", "name", ",", "builder", "in", "extractors", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "'Testing {}...'", ".", "format", "(", "name", ")", ")", "\n", "if", "name", "in", "overwrite_cfgs", ":", "\n", "            ", "cfg", "=", "load_config", "(", "overwrite_cfgs", "[", "name", "]", ")", "\n", "", "else", ":", "\n", "# Use default config if config file is not specified", "\n", "            ", "cfg", "=", "copy", ".", "deepcopy", "(", "g_cfg", ")", "\n", "\n", "", "in_channels", "=", "overwrite_in_channels", ".", "get", "(", "\n", "name", ",", "in_channels_default", ")", "\n", "\n", "fe", "=", "builder", "(", "cfg", ",", "in_channels", ")", "\n", "self", ".", "assertIsNotNone", "(", "\n", "getattr", "(", "fe", ",", "'out_channels'", ",", "None", ")", ",", "\n", "'Need to provide out_channels for feature extractor {}'", ".", "format", "(", "name", ")", "\n", ")", "\n", "\n", "N", ",", "C_in", ",", "H", ",", "W", "=", "2", ",", "in_channels", ",", "24", ",", "32", "\n", "input", "=", "torch", ".", "rand", "(", "[", "N", ",", "C_in", ",", "H", ",", "W", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "bboxes", "=", "[", "[", "1", ",", "1", ",", "10", ",", "10", "]", ",", "[", "5", ",", "5", ",", "8", ",", "8", "]", ",", "[", "2", ",", "2", ",", "3", ",", "4", "]", "]", "\n", "img_size", "=", "[", "384", ",", "512", "]", "\n", "box_list", "=", "BoxList", "(", "bboxes", ",", "img_size", ",", "\"xyxy\"", ")", "\n", "out", "=", "fe", "(", "[", "input", "]", ",", "[", "box_list", "]", "*", "N", ")", "\n", "self", ".", "assertEqual", "(", "\n", "out", ".", "shape", "[", ":", "2", "]", ",", "\n", "torch", ".", "Size", "(", "[", "N", "*", "len", "(", "bboxes", ")", ",", "fe", ".", "out_channels", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_fbnet.TestFBNetBuilder.test_identity": [[24, 34], ["maskrcnn_benchmark.Identity", "torch.rand", "maskrcnn_benchmark.Identity.", "numpy.testing.assert_array_equal", "maskrcnn_benchmark.Identity", "torch.rand", "maskrcnn_benchmark.Identity.", "numpy.testing.assert_array_equal", "numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "test_identity", "(", "self", ")", ":", "\n", "        ", "id_op", "=", "fbnet_builder", ".", "Identity", "(", "20", ",", "20", ",", "1", ")", "\n", "input", "=", "torch", ".", "rand", "(", "[", "10", ",", "20", ",", "7", ",", "7", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "output", "=", "id_op", "(", "input", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "np", ".", "array", "(", "input", ")", ",", "np", ".", "array", "(", "output", ")", ")", "\n", "\n", "id_op", "=", "fbnet_builder", ".", "Identity", "(", "20", ",", "40", ",", "2", ")", "\n", "input", "=", "torch", ".", "rand", "(", "[", "10", ",", "20", ",", "7", ",", "7", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "output", "=", "id_op", "(", "input", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "output", ".", "shape", ",", "[", "10", ",", "40", ",", "4", ",", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_fbnet.TestFBNetBuilder.test_primitives": [[35, 44], ["maskrcnn_benchmark.PRIMITIVES.items", "print", "test_fbnet._test_primitive"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_fbnet._test_primitive"], ["", "def", "test_primitives", "(", "self", ")", ":", "\n", "        ", "''' Make sures the primitives runs '''", "\n", "for", "op_name", ",", "op_func", "in", "fbnet_builder", ".", "PRIMITIVES", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'Testing {}'", ".", "format", "(", "op_name", ")", ")", "\n", "\n", "_test_primitive", "(", "\n", "self", ",", "\"cpu\"", ",", "\n", "op_name", ",", "op_func", ",", "\n", "N", "=", "20", ",", "C_in", "=", "16", ",", "C_out", "=", "32", ",", "expand", "=", "4", ",", "stride", "=", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_fbnet.TestFBNetBuilder.test_primitives_cuda": [[46, 56], ["unittest.skipIf", "maskrcnn_benchmark.PRIMITIVES.items", "print", "test_fbnet._test_primitive"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_fbnet._test_primitive"], ["", "", "@", "unittest", ".", "skipIf", "(", "not", "TEST_CUDA", ",", "\"no CUDA detected\"", ")", "\n", "def", "test_primitives_cuda", "(", "self", ")", ":", "\n", "        ", "''' Make sures the primitives runs on cuda '''", "\n", "for", "op_name", ",", "op_func", "in", "fbnet_builder", ".", "PRIMITIVES", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'Testing {}'", ".", "format", "(", "op_name", ")", ")", "\n", "\n", "_test_primitive", "(", "\n", "self", ",", "\"cuda\"", ",", "\n", "op_name", ",", "op_func", ",", "\n", "N", "=", "20", ",", "C_in", "=", "16", ",", "C_out", "=", "32", ",", "expand", "=", "4", ",", "stride", "=", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_fbnet.TestFBNetBuilder.test_primitives_empty_batch": [[58, 68], ["maskrcnn_benchmark.PRIMITIVES.items", "print", "test_fbnet._test_primitive"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_fbnet._test_primitive"], ["", "", "def", "test_primitives_empty_batch", "(", "self", ")", ":", "\n", "        ", "''' Make sures the primitives runs '''", "\n", "for", "op_name", ",", "op_func", "in", "fbnet_builder", ".", "PRIMITIVES", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'Testing {}'", ".", "format", "(", "op_name", ")", ")", "\n", "\n", "# test empty batch size", "\n", "_test_primitive", "(", "\n", "self", ",", "\"cpu\"", ",", "\n", "op_name", ",", "op_func", ",", "\n", "N", "=", "0", ",", "C_in", "=", "16", ",", "C_out", "=", "32", ",", "expand", "=", "4", ",", "stride", "=", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_fbnet.TestFBNetBuilder.test_primitives_cuda_empty_batch": [[70, 81], ["unittest.skipIf", "maskrcnn_benchmark.PRIMITIVES.items", "print", "test_fbnet._test_primitive"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_fbnet._test_primitive"], ["", "", "@", "unittest", ".", "skipIf", "(", "not", "TEST_CUDA", ",", "\"no CUDA detected\"", ")", "\n", "def", "test_primitives_cuda_empty_batch", "(", "self", ")", ":", "\n", "        ", "''' Make sures the primitives runs '''", "\n", "for", "op_name", ",", "op_func", "in", "fbnet_builder", ".", "PRIMITIVES", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'Testing {}'", ".", "format", "(", "op_name", ")", ")", "\n", "\n", "# test empty batch size", "\n", "_test_primitive", "(", "\n", "self", ",", "\"cuda\"", ",", "\n", "op_name", ",", "op_func", ",", "\n", "N", "=", "0", ",", "C_in", "=", "16", ",", "C_out", "=", "32", ",", "expand", "=", "4", ",", "stride", "=", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_fbnet._test_primitive": [[13, 20], ["op_func().to", "torch.rand().to", "op_func().to.", "test_fbnet..assertEqual", "torch.Size", "op_func", "torch.rand"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to"], ["def", "_test_primitive", "(", "self", ",", "device", ",", "op_name", ",", "op_func", ",", "N", ",", "C_in", ",", "C_out", ",", "expand", ",", "stride", ")", ":", "\n", "    ", "op", "=", "op_func", "(", "C_in", ",", "C_out", ",", "expand", ",", "stride", ")", ".", "to", "(", "device", ")", "\n", "input", "=", "torch", ".", "rand", "(", "[", "N", ",", "C_in", ",", "7", ",", "7", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "output", "=", "op", "(", "input", ")", "\n", "self", ".", "assertEqual", "(", "\n", "output", ".", "shape", "[", ":", "2", "]", ",", "torch", ".", "Size", "(", "[", "N", ",", "C_out", "]", ")", ",", "\n", "'Primitive {} failed for shape {}.'", ".", "format", "(", "op_name", ",", "input", ".", "shape", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_backbones.TestBackbones.test_build_backbones": [[24, 51], ["test_backbones.TestBackbones.assertGreater", "maskrcnn_benchmark.modeling.registry.BACKBONES.items", "len", "print", "backbone_builder", "test_backbones.TestBackbones.assertIsNotNone", "torch.rand", "backbone_builder.", "utils.load_config", "copy.deepcopy", "getattr", "test_backbones.TestBackbones.assertEqual", "torch.Size"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.utils.load_config"], ["    ", "def", "test_build_backbones", "(", "self", ")", ":", "\n", "        ", "''' Make sure backbones run '''", "\n", "\n", "self", ".", "assertGreater", "(", "len", "(", "registry", ".", "BACKBONES", ")", ",", "0", ")", "\n", "\n", "for", "name", ",", "backbone_builder", "in", "registry", ".", "BACKBONES", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'Testing {}...'", ".", "format", "(", "name", ")", ")", "\n", "if", "name", "in", "BACKBONE_CFGS", ":", "\n", "                ", "cfg", "=", "load_config", "(", "BACKBONE_CFGS", "[", "name", "]", ")", "\n", "", "else", ":", "\n", "# Use default config if config file is not specified", "\n", "                ", "cfg", "=", "copy", ".", "deepcopy", "(", "g_cfg", ")", "\n", "", "backbone", "=", "backbone_builder", "(", "cfg", ")", "\n", "\n", "# make sures the backbone has `out_channels`", "\n", "self", ".", "assertIsNotNone", "(", "\n", "getattr", "(", "backbone", ",", "'out_channels'", ",", "None", ")", ",", "\n", "'Need to provide out_channels for backbone {}'", ".", "format", "(", "name", ")", "\n", ")", "\n", "\n", "N", ",", "C_in", ",", "H", ",", "W", "=", "2", ",", "3", ",", "224", ",", "256", "\n", "input", "=", "torch", ".", "rand", "(", "[", "N", ",", "C_in", ",", "H", ",", "W", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "out", "=", "backbone", "(", "input", ")", "\n", "for", "cur_out", "in", "out", ":", "\n", "                ", "self", ".", "assertEqual", "(", "\n", "cur_out", ".", "shape", "[", ":", "2", "]", ",", "\n", "torch", ".", "Size", "(", "[", "N", ",", "backbone", ".", "out_channels", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_nms.TestNMS.test_nms_cpu": [[11, 59], ["numpy.array().astype().reshape", "torch.from_numpy", "torch.from_numpy", "zip", "maskrcnn_benchmark.layers.nms", "numpy.sort", "numpy.testing.assert_array_equal", "numpy.array().astype", "numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "test_nms_cpu", "(", "self", ")", ":", "\n", "        ", "\"\"\" Match unit test UtilsNMSTest.TestNMS in\n            caffe2/operators/generate_proposals_op_util_nms_test.cc\n        \"\"\"", "\n", "\n", "inputs", "=", "(", "\n", "np", ".", "array", "(", "\n", "[", "\n", "10", ",", "\n", "10", ",", "\n", "50", ",", "\n", "60", ",", "\n", "0.5", ",", "\n", "11", ",", "\n", "12", ",", "\n", "48", ",", "\n", "60", ",", "\n", "0.7", ",", "\n", "8", ",", "\n", "9", ",", "\n", "40", ",", "\n", "50", ",", "\n", "0.6", ",", "\n", "100", ",", "\n", "100", ",", "\n", "150", ",", "\n", "140", ",", "\n", "0.9", ",", "\n", "99", ",", "\n", "110", ",", "\n", "155", ",", "\n", "139", ",", "\n", "0.8", ",", "\n", "]", "\n", ")", "\n", ".", "astype", "(", "np", ".", "float32", ")", "\n", ".", "reshape", "(", "-", "1", ",", "5", ")", "\n", ")", "\n", "\n", "boxes", "=", "torch", ".", "from_numpy", "(", "inputs", "[", ":", ",", ":", "4", "]", ")", "\n", "scores", "=", "torch", ".", "from_numpy", "(", "inputs", "[", ":", ",", "4", "]", ")", "\n", "test_thresh", "=", "[", "0.1", ",", "0.3", ",", "0.5", ",", "0.8", ",", "0.9", "]", "\n", "gt_indices", "=", "[", "[", "1", ",", "3", "]", ",", "[", "1", ",", "3", "]", ",", "[", "1", ",", "3", "]", ",", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", "]", "\n", "\n", "for", "thresh", ",", "gt_index", "in", "zip", "(", "test_thresh", ",", "gt_indices", ")", ":", "\n", "            ", "keep_indices", "=", "box_nms", "(", "boxes", ",", "scores", ",", "thresh", ")", "\n", "keep_indices", "=", "np", ".", "sort", "(", "keep_indices", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "keep_indices", ",", "np", ".", "array", "(", "gt_index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_nms.TestNMS.test_nms1_cpu": [[60, 218], ["torch.from_numpy", "torch.from_numpy", "numpy.array", "maskrcnn_benchmark.layers.nms", "numpy.sort", "numpy.testing.assert_array_equal", "numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array"], "methods", ["None"], ["", "", "def", "test_nms1_cpu", "(", "self", ")", ":", "\n", "        ", "\"\"\" Match unit test UtilsNMSTest.TestNMS1 in\n            caffe2/operators/generate_proposals_op_util_nms_test.cc\n        \"\"\"", "\n", "\n", "boxes", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "array", "(", "\n", "[", "\n", "[", "350.9821", ",", "161.8200", ",", "369.9685", ",", "205.2372", "]", ",", "\n", "[", "250.5236", ",", "154.2844", ",", "274.1773", ",", "204.9810", "]", ",", "\n", "[", "471.4920", ",", "160.4118", ",", "496.0094", ",", "213.4244", "]", ",", "\n", "[", "352.0421", ",", "164.5933", ",", "366.4458", ",", "205.9624", "]", ",", "\n", "[", "166.0765", ",", "169.7707", ",", "183.0102", ",", "232.6606", "]", ",", "\n", "[", "252.3000", ",", "183.1449", ",", "269.6541", ",", "210.6747", "]", ",", "\n", "[", "469.7862", ",", "162.0192", ",", "482.1673", ",", "187.0053", "]", ",", "\n", "[", "168.4862", ",", "174.2567", ",", "181.7437", ",", "232.9379", "]", ",", "\n", "[", "470.3290", ",", "162.3442", ",", "496.4272", ",", "214.6296", "]", ",", "\n", "[", "251.0450", ",", "155.5911", ",", "272.2693", ",", "203.3675", "]", ",", "\n", "[", "252.0326", ",", "154.7950", ",", "273.7404", ",", "195.3671", "]", ",", "\n", "[", "351.7479", ",", "161.9567", ",", "370.6432", ",", "204.3047", "]", ",", "\n", "[", "496.3306", ",", "161.7157", ",", "515.0573", ",", "210.7200", "]", ",", "\n", "[", "471.0749", ",", "162.6143", ",", "485.3374", ",", "207.3448", "]", ",", "\n", "[", "250.9745", ",", "160.7633", ",", "264.1924", ",", "206.8350", "]", ",", "\n", "[", "470.4792", ",", "169.0351", ",", "487.1934", ",", "220.2984", "]", ",", "\n", "[", "474.4227", ",", "161.9546", ",", "513.1018", ",", "215.5193", "]", ",", "\n", "[", "251.9428", ",", "184.1950", ",", "262.6937", ",", "207.6416", "]", ",", "\n", "[", "252.6623", ",", "175.0252", ",", "269.8806", ",", "213.7584", "]", ",", "\n", "[", "260.9884", ",", "157.0351", ",", "288.3554", ",", "206.6027", "]", ",", "\n", "[", "251.3629", ",", "164.5101", ",", "263.2179", ",", "202.4203", "]", ",", "\n", "[", "471.8361", ",", "190.8142", ",", "485.6812", ",", "220.8586", "]", ",", "\n", "[", "248.6243", ",", "156.9628", ",", "264.3355", ",", "199.2767", "]", ",", "\n", "[", "495.1643", ",", "158.0483", ",", "512.6261", ",", "184.4192", "]", ",", "\n", "[", "376.8718", ",", "168.0144", ",", "387.3584", ",", "201.3210", "]", ",", "\n", "[", "122.9191", ",", "160.7433", ",", "172.5612", ",", "231.3837", "]", ",", "\n", "[", "350.3857", ",", "175.8806", ",", "366.2500", ",", "205.4329", "]", ",", "\n", "[", "115.2958", ",", "162.7822", ",", "161.9776", ",", "229.6147", "]", ",", "\n", "[", "168.4375", ",", "177.4041", ",", "180.8028", ",", "232.4551", "]", ",", "\n", "[", "169.7939", ",", "184.4330", ",", "181.4767", ",", "232.1220", "]", ",", "\n", "[", "347.7536", ",", "175.9356", ",", "355.8637", ",", "197.5586", "]", ",", "\n", "[", "495.5434", ",", "164.6059", ",", "516.4031", ",", "207.7053", "]", ",", "\n", "[", "172.1216", ",", "194.6033", ",", "183.1217", ",", "235.2653", "]", ",", "\n", "[", "264.2654", ",", "181.5540", ",", "288.4626", ",", "214.0170", "]", ",", "\n", "[", "111.7971", ",", "183.7748", ",", "137.3745", ",", "225.9724", "]", ",", "\n", "[", "253.4919", ",", "186.3945", ",", "280.8694", ",", "210.0731", "]", ",", "\n", "[", "165.5334", ",", "169.7344", ",", "185.9159", ",", "232.8514", "]", ",", "\n", "[", "348.3662", ",", "184.5187", ",", "354.9081", ",", "201.4038", "]", ",", "\n", "[", "164.6562", ",", "162.5724", ",", "186.3108", ",", "233.5010", "]", ",", "\n", "[", "113.2999", ",", "186.8410", ",", "135.8841", ",", "219.7642", "]", ",", "\n", "[", "117.0282", ",", "179.8009", ",", "142.5375", ",", "221.0736", "]", ",", "\n", "[", "462.1312", ",", "161.1004", ",", "495.3576", ",", "217.2208", "]", ",", "\n", "[", "462.5800", ",", "159.9310", ",", "501.2937", ",", "224.1655", "]", ",", "\n", "[", "503.5242", ",", "170.0733", ",", "518.3792", ",", "209.0113", "]", ",", "\n", "[", "250.3658", ",", "195.5925", ",", "260.6523", ",", "212.4679", "]", ",", "\n", "[", "108.8287", ",", "163.6994", ",", "146.3642", ",", "229.7261", "]", ",", "\n", "[", "256.7617", ",", "187.3123", ",", "288.8407", ",", "211.2013", "]", ",", "\n", "[", "161.2781", ",", "167.4801", ",", "186.3751", ",", "232.7133", "]", ",", "\n", "[", "115.3760", ",", "177.5859", ",", "163.3512", ",", "236.9660", "]", ",", "\n", "[", "248.9077", ",", "188.0919", ",", "264.8579", ",", "207.9718", "]", ",", "\n", "[", "108.1349", ",", "160.7851", ",", "143.6370", ",", "229.6243", "]", ",", "\n", "[", "465.0900", ",", "156.7555", ",", "490.3561", ",", "213.5704", "]", ",", "\n", "[", "107.5338", ",", "173.4323", ",", "141.0704", ",", "235.2910", "]", ",", "\n", "]", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "\n", "scores", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "array", "(", "\n", "[", "\n", "0.1919", ",", "\n", "0.3293", ",", "\n", "0.0860", ",", "\n", "0.1600", ",", "\n", "0.1885", ",", "\n", "0.4297", ",", "\n", "0.0974", ",", "\n", "0.2711", ",", "\n", "0.1483", ",", "\n", "0.1173", ",", "\n", "0.1034", ",", "\n", "0.2915", ",", "\n", "0.1993", ",", "\n", "0.0677", ",", "\n", "0.3217", ",", "\n", "0.0966", ",", "\n", "0.0526", ",", "\n", "0.5675", ",", "\n", "0.3130", ",", "\n", "0.1592", ",", "\n", "0.1353", ",", "\n", "0.0634", ",", "\n", "0.1557", ",", "\n", "0.1512", ",", "\n", "0.0699", ",", "\n", "0.0545", ",", "\n", "0.2692", ",", "\n", "0.1143", ",", "\n", "0.0572", ",", "\n", "0.1990", ",", "\n", "0.0558", ",", "\n", "0.1500", ",", "\n", "0.2214", ",", "\n", "0.1878", ",", "\n", "0.2501", ",", "\n", "0.1343", ",", "\n", "0.0809", ",", "\n", "0.1266", ",", "\n", "0.0743", ",", "\n", "0.0896", ",", "\n", "0.0781", ",", "\n", "0.0983", ",", "\n", "0.0557", ",", "\n", "0.0623", ",", "\n", "0.5808", ",", "\n", "0.3090", ",", "\n", "0.1050", ",", "\n", "0.0524", ",", "\n", "0.0513", ",", "\n", "0.4501", ",", "\n", "0.4167", ",", "\n", "0.0623", ",", "\n", "0.1749", ",", "\n", "]", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "\n", "\n", "gt_indices", "=", "np", ".", "array", "(", "\n", "[", "\n", "1", ",", "\n", "6", ",", "\n", "7", ",", "\n", "8", ",", "\n", "11", ",", "\n", "12", ",", "\n", "13", ",", "\n", "14", ",", "\n", "17", ",", "\n", "18", ",", "\n", "19", ",", "\n", "21", ",", "\n", "23", ",", "\n", "24", ",", "\n", "25", ",", "\n", "26", ",", "\n", "30", ",", "\n", "32", ",", "\n", "33", ",", "\n", "34", ",", "\n", "35", ",", "\n", "37", ",", "\n", "43", ",", "\n", "44", ",", "\n", "47", ",", "\n", "50", ",", "\n", "]", "\n", ")", "\n", "keep_indices", "=", "box_nms", "(", "boxes", ",", "scores", ",", "0.5", ")", "\n", "keep_indices", "=", "np", ".", "sort", "(", "keep_indices", ")", "\n", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "keep_indices", ",", "gt_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_detectors.TestDetectors.test_build_detectors": [[117, 120], ["test_detectors._test_build_detectors"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_detectors._test_build_detectors"], ["    ", "def", "test_build_detectors", "(", "self", ")", ":", "\n", "        ", "''' Make sure models build '''", "\n", "_test_build_detectors", "(", "self", ",", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_detectors.TestDetectors.test_build_detectors_cuda": [[121, 125], ["unittest.skipIf", "test_detectors._test_build_detectors"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_detectors._test_build_detectors"], ["", "@", "unittest", ".", "skipIf", "(", "not", "TEST_CUDA", ",", "\"no CUDA detected\"", ")", "\n", "def", "test_build_detectors_cuda", "(", "self", ")", ":", "\n", "        ", "''' Make sure models build on gpu'''", "\n", "_test_build_detectors", "(", "self", ",", "\"cuda\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_detectors.TestDetectors.test_run_selected_detectors": [[126, 132], ["test_detectors.get_config_files", "test_detectors._test_run_selected_detectors"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_detectors.get_config_files", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_detectors._test_run_selected_detectors"], ["", "def", "test_run_selected_detectors", "(", "self", ")", ":", "\n", "        ", "''' Make sure models build and run '''", "\n", "# run on selected models", "\n", "cfg_files", "=", "get_config_files", "(", "CONFIG_FILES", ",", "None", ")", "\n", "# cfg_files = get_config_files(None, EXCLUDED_FOLDERS)", "\n", "_test_run_selected_detectors", "(", "self", ",", "cfg_files", ",", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_detectors.TestDetectors.test_run_selected_detectors_cuda": [[133, 140], ["unittest.skipIf", "test_detectors.get_config_files", "test_detectors._test_run_selected_detectors"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_detectors.get_config_files", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_detectors._test_run_selected_detectors"], ["", "@", "unittest", ".", "skipIf", "(", "not", "TEST_CUDA", ",", "\"no CUDA detected\"", ")", "\n", "def", "test_run_selected_detectors_cuda", "(", "self", ")", ":", "\n", "        ", "''' Make sure models build and run on cuda '''", "\n", "# run on selected models", "\n", "cfg_files", "=", "get_config_files", "(", "CONFIG_FILES", ",", "None", ")", "\n", "# cfg_files = get_config_files(None, EXCLUDED_FOLDERS)", "\n", "_test_run_selected_detectors", "(", "self", ",", "cfg_files", ",", "\"cuda\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_detectors.get_config_files": [[52, 67], ["utils.get_config_root_path", "glob.glob", "any", "os.path.join", "os.path.join", "test_detectors.get_config_files._contains"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.env_tests.env.get_config_root_path"], ["def", "get_config_files", "(", "file_list", ",", "exclude_folders", ")", ":", "\n", "    ", "cfg_root_path", "=", "utils", ".", "get_config_root_path", "(", ")", "\n", "if", "file_list", "is", "not", "None", ":", "\n", "        ", "files", "=", "[", "os", ".", "path", ".", "join", "(", "cfg_root_path", ",", "x", ")", "for", "x", "in", "file_list", "]", "\n", "", "else", ":", "\n", "        ", "files", "=", "glob", ".", "glob", "(", "\n", "os", ".", "path", ".", "join", "(", "cfg_root_path", ",", "\"./**/*.yaml\"", ")", ",", "recursive", "=", "True", ")", "\n", "\n", "", "def", "_contains", "(", "path", ",", "exclude_dirs", ")", ":", "\n", "        ", "return", "any", "(", "x", "in", "path", "for", "x", "in", "exclude_dirs", ")", "\n", "\n", "", "if", "exclude_folders", "is", "not", "None", ":", "\n", "        ", "files", "=", "[", "x", "for", "x", "in", "files", "if", "not", "_contains", "(", "x", ",", "exclude_folders", ")", "]", "\n", "\n", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_detectors.create_model": [[69, 75], ["copy.deepcopy", "copy.deepcopy.freeze", "maskrcnn_benchmark.modeling.detector.build_detection_model", "model.to.to"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.detector.detectors.build_detection_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to"], ["", "def", "create_model", "(", "cfg", ",", "device", ")", ":", "\n", "    ", "cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "model", "=", "build_detection_model", "(", "cfg", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_detectors.create_random_input": [[77, 84], ["maskrcnn_benchmark.structures.image_list.to_image_list", "ret.to.to", "ret.to.append", "torch.rand", "int"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.image_list.to_image_list", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to"], ["", "def", "create_random_input", "(", "cfg", ",", "device", ")", ":", "\n", "    ", "ret", "=", "[", "]", "\n", "for", "x", "in", "cfg", ".", "INPUT", ".", "MIN_SIZE_TRAIN", ":", "\n", "        ", "ret", ".", "append", "(", "torch", ".", "rand", "(", "3", ",", "x", ",", "int", "(", "x", "*", "1.2", ")", ")", ")", "\n", "", "ret", "=", "to_image_list", "(", "ret", ",", "cfg", ".", "DATALOADER", ".", "SIZE_DIVISIBILITY", ")", "\n", "ret", "=", "ret", ".", "to", "(", "device", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_detectors._test_build_detectors": [[86, 97], ["test_detectors.get_config_files", "test_detectors..assertGreater", "len", "test_detectors..subTest", "print", "utils.load_config_from_file", "test_detectors.create_model"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_detectors.get_config_files", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.utils.load_config_from_file", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_model"], ["", "def", "_test_build_detectors", "(", "self", ",", "device", ")", ":", "\n", "    ", "''' Make sure models build '''", "\n", "\n", "cfg_files", "=", "get_config_files", "(", "None", ",", "EXCLUDED_FOLDERS", ")", "\n", "self", ".", "assertGreater", "(", "len", "(", "cfg_files", ")", ",", "0", ")", "\n", "\n", "for", "cfg_file", "in", "cfg_files", ":", "\n", "        ", "with", "self", ".", "subTest", "(", "cfg_file", "=", "cfg_file", ")", ":", "\n", "            ", "print", "(", "'Testing {}...'", ".", "format", "(", "cfg_file", ")", ")", "\n", "cfg", "=", "utils", ".", "load_config_from_file", "(", "cfg_file", ")", "\n", "create_model", "(", "cfg", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_detectors._test_run_selected_detectors": [[99, 114], ["test_detectors..assertGreater", "len", "test_detectors..subTest", "print", "utils.load_config_from_file", "test_detectors.create_model", "test_detectors.create_random_input", "create_model.eval", "create_model.", "test_detectors..assertEqual", "len", "len"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.utils.load_config_from_file", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_detectors.create_random_input"], ["", "", "", "def", "_test_run_selected_detectors", "(", "self", ",", "cfg_files", ",", "device", ")", ":", "\n", "    ", "''' Make sure models build and run '''", "\n", "self", ".", "assertGreater", "(", "len", "(", "cfg_files", ")", ",", "0", ")", "\n", "\n", "for", "cfg_file", "in", "cfg_files", ":", "\n", "        ", "with", "self", ".", "subTest", "(", "cfg_file", "=", "cfg_file", ")", ":", "\n", "            ", "print", "(", "'Testing {}...'", ".", "format", "(", "cfg_file", ")", ")", "\n", "cfg", "=", "utils", ".", "load_config_from_file", "(", "cfg_file", ")", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TEST", "=", "10", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TEST", "=", "10", "\n", "model", "=", "create_model", "(", "cfg", ",", "device", ")", "\n", "inputs", "=", "create_random_input", "(", "cfg", ",", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "inputs", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "output", ")", ",", "len", "(", "inputs", ".", "image_sizes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_box_coder.TestBoxCoder.test_box_decoder": [[11, 106], ["maskrcnn_benchmark.modeling.box_coder.BoxCoder", "torch.from_numpy", "torch.from_numpy", "numpy.array().astype().reshape", "maskrcnn_benchmark.modeling.box_coder.BoxCoder.decode", "numpy.testing.assert_allclose", "numpy.array().astype().reshape", "numpy.array().astype().reshape", "maskrcnn_benchmark.modeling.box_coder.BoxCoder.decode.detach().numpy", "numpy.array().astype", "numpy.array().astype", "numpy.array().astype", "maskrcnn_benchmark.modeling.box_coder.BoxCoder.decode.detach", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.box_coder.BoxCoder.decode"], ["    ", "def", "test_box_decoder", "(", "self", ")", ":", "\n", "        ", "\"\"\" Match unit test UtilsBoxesTest.TestBboxTransformRandom in\n            caffe2/operators/generate_proposals_op_util_boxes_test.cc\n        \"\"\"", "\n", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "bbox", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "array", "(", "\n", "[", "\n", "175.62031555", ",", "\n", "20.91103172", ",", "\n", "253.352005", ",", "\n", "155.0145874", ",", "\n", "169.24636841", ",", "\n", "4.85241556", ",", "\n", "228.8605957", ",", "\n", "105.02092743", ",", "\n", "181.77426147", ",", "\n", "199.82876587", ",", "\n", "192.88427734", ",", "\n", "214.0255127", ",", "\n", "174.36262512", ",", "\n", "186.75761414", ",", "\n", "296.19091797", ",", "\n", "231.27906799", ",", "\n", "22.73153877", ",", "\n", "92.02596283", ",", "\n", "135.5695343", ",", "\n", "208.80291748", ",", "\n", "]", "\n", ")", "\n", ".", "astype", "(", "np", ".", "float32", ")", "\n", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "deltas", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "array", "(", "\n", "[", "\n", "0.47861834", ",", "\n", "0.13992102", ",", "\n", "0.14961673", ",", "\n", "0.71495209", ",", "\n", "0.29915856", ",", "\n", "-", "0.35664671", ",", "\n", "0.89018666", ",", "\n", "0.70815367", ",", "\n", "-", "0.03852064", ",", "\n", "0.44466892", ",", "\n", "0.49492538", ",", "\n", "0.71409376", ",", "\n", "0.28052918", ",", "\n", "0.02184832", ",", "\n", "0.65289006", ",", "\n", "1.05060139", ",", "\n", "-", "0.38172557", ",", "\n", "-", "0.08533806", ",", "\n", "-", "0.60335309", ",", "\n", "0.79052375", ",", "\n", "]", "\n", ")", "\n", ".", "astype", "(", "np", ".", "float32", ")", "\n", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "gt_bbox", "=", "(", "\n", "np", ".", "array", "(", "\n", "[", "\n", "206.949539", ",", "\n", "-", "30.715202", ",", "\n", "297.387665", ",", "\n", "244.448486", ",", "\n", "143.871216", ",", "\n", "-", "83.342888", ",", "\n", "290.502289", ",", "\n", "121.053398", ",", "\n", "177.430283", ",", "\n", "198.666245", ",", "\n", "196.295273", ",", "\n", "228.703079", ",", "\n", "152.251892", ",", "\n", "145.431564", ",", "\n", "387.215454", ",", "\n", "274.594238", ",", "\n", "5.062420", ",", "\n", "11.040955", ",", "\n", "66.328903", ",", "\n", "269.686218", ",", "\n", "]", "\n", ")", "\n", ".", "astype", "(", "np", ".", "float32", ")", "\n", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "results", "=", "box_coder", ".", "decode", "(", "deltas", ",", "bbox", ")", "\n", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "results", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "gt_bbox", ",", "atol", "=", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.test_rpn_heads.TestRPNHeads.test_build_rpn_heads": [[20, 57], ["test_rpn_heads.TestRPNHeads.assertGreater", "maskrcnn_benchmark.modeling.registry.RPN_HEADS.items", "len", "print", "builder", "torch.rand", "builder.", "test_rpn_heads.TestRPNHeads.assertEqual", "range", "utils.load_config", "copy.deepcopy", "len", "test_rpn_heads.TestRPNHeads.assertEqual", "test_rpn_heads.TestRPNHeads.assertEqual", "torch.Size", "torch.Size"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.utils.load_config"], ["    ", "def", "test_build_rpn_heads", "(", "self", ")", ":", "\n", "        ", "''' Make sure rpn heads run '''", "\n", "\n", "self", ".", "assertGreater", "(", "len", "(", "registry", ".", "RPN_HEADS", ")", ",", "0", ")", "\n", "\n", "in_channels", "=", "64", "\n", "num_anchors", "=", "10", "\n", "\n", "for", "name", ",", "builder", "in", "registry", ".", "RPN_HEADS", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'Testing {}...'", ".", "format", "(", "name", ")", ")", "\n", "if", "name", "in", "RPN_CFGS", ":", "\n", "                ", "cfg", "=", "load_config", "(", "RPN_CFGS", "[", "name", "]", ")", "\n", "", "else", ":", "\n", "# Use default config if config file is not specified", "\n", "                ", "cfg", "=", "copy", ".", "deepcopy", "(", "g_cfg", ")", "\n", "\n", "", "rpn", "=", "builder", "(", "cfg", ",", "in_channels", ",", "num_anchors", ")", "\n", "\n", "N", ",", "C_in", ",", "H", ",", "W", "=", "2", ",", "in_channels", ",", "24", ",", "32", "\n", "input", "=", "torch", ".", "rand", "(", "[", "N", ",", "C_in", ",", "H", ",", "W", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "LAYERS", "=", "3", "\n", "out", "=", "rpn", "(", "[", "input", "]", "*", "LAYERS", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "out", ")", ",", "2", ")", "\n", "logits", ",", "bbox_reg", "=", "out", "\n", "for", "idx", "in", "range", "(", "LAYERS", ")", ":", "\n", "                ", "self", ".", "assertEqual", "(", "\n", "logits", "[", "idx", "]", ".", "shape", ",", "\n", "torch", ".", "Size", "(", "[", "\n", "input", ".", "shape", "[", "0", "]", ",", "num_anchors", ",", "\n", "input", ".", "shape", "[", "2", "]", ",", "input", ".", "shape", "[", "3", "]", ",", "\n", "]", ")", "\n", ")", "\n", "self", ".", "assertEqual", "(", "\n", "bbox_reg", "[", "idx", "]", ".", "shape", ",", "\n", "torch", ".", "Size", "(", "[", "\n", "logits", "[", "idx", "]", ".", "shape", "[", "0", "]", ",", "num_anchors", "*", "4", ",", "\n", "logits", "[", "idx", "]", ".", "shape", "[", "2", "]", ",", "logits", "[", "idx", "]", ".", "shape", "[", "3", "]", ",", "\n", "]", ")", ",", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.utils.get_config_root_path": [[14, 16], ["env_tests.get_config_root_path"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.env_tests.env.get_config_root_path"], ["def", "get_config_root_path", "(", ")", ":", "\n", "    ", "return", "env_tests", ".", "get_config_root_path", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.utils.load_config": [[18, 22], ["os.path.join", "utils.load_config_from_file", "env_tests.get_config_root_path"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.utils.load_config_from_file", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.env_tests.env.get_config_root_path"], ["", "def", "load_config", "(", "rel_path", ")", ":", "\n", "    ", "''' Load config from file path specified as path relative to config_root '''", "\n", "cfg_path", "=", "os", ".", "path", ".", "join", "(", "env_tests", ".", "get_config_root_path", "(", ")", ",", "rel_path", ")", "\n", "return", "load_config_from_file", "(", "cfg_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.utils.load_config_from_file": [[24, 29], ["copy.deepcopy", "copy.deepcopy.merge_from_file"], "function", ["None"], ["", "def", "load_config_from_file", "(", "file_path", ")", ":", "\n", "    ", "''' Load config from file path specified as absolute path '''", "\n", "ret", "=", "copy", ".", "deepcopy", "(", "g_cfg", ")", "\n", "ret", ".", "merge_from_file", "(", "file_path", ")", "\n", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_model": [[15, 17], ["torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["None"], ["    ", "def", "create_model", "(", "self", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "2", ",", "3", ")", ",", "nn", ".", "Linear", "(", "3", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_complex_model": [[18, 35], ["torch.nn.Module", "torch.nn.Module", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Module", "torch.nn.Linear", "collections.OrderedDict", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["", "def", "create_complex_model", "(", "self", ")", ":", "\n", "        ", "m", "=", "nn", ".", "Module", "(", ")", "\n", "m", ".", "block1", "=", "nn", ".", "Module", "(", ")", "\n", "m", ".", "block1", ".", "layer1", "=", "nn", ".", "Linear", "(", "2", ",", "3", ")", "\n", "m", ".", "layer2", "=", "nn", ".", "Linear", "(", "3", ",", "2", ")", "\n", "m", ".", "res", "=", "nn", ".", "Module", "(", ")", "\n", "m", ".", "res", ".", "layer2", "=", "nn", ".", "Linear", "(", "3", ",", "2", ")", "\n", "\n", "state_dict", "=", "OrderedDict", "(", ")", "\n", "state_dict", "[", "\"layer1.weight\"", "]", "=", "torch", ".", "rand", "(", "3", ",", "2", ")", "\n", "state_dict", "[", "\"layer1.bias\"", "]", "=", "torch", ".", "rand", "(", "3", ")", "\n", "state_dict", "[", "\"layer2.weight\"", "]", "=", "torch", ".", "rand", "(", "2", ",", "3", ")", "\n", "state_dict", "[", "\"layer2.bias\"", "]", "=", "torch", ".", "rand", "(", "2", ")", "\n", "state_dict", "[", "\"res.layer2.weight\"", "]", "=", "torch", ".", "rand", "(", "2", ",", "3", ")", "\n", "state_dict", "[", "\"res.layer2.bias\"", "]", "=", "torch", ".", "rand", "(", "2", ")", "\n", "\n", "return", "m", ",", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.test_from_last_checkpoint_model": [[36, 70], ["zip", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "torch.nn.DataParallel", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "tempfile.TemporaryDirectory", "maskrcnn_benchmark.utils.checkpoint.Checkpointer", "maskrcnn_benchmark.utils.checkpoint.Checkpointer.save", "maskrcnn_benchmark.utils.checkpoint.Checkpointer", "checkpoint.TestCheckpointer.assertTrue", "checkpoint.TestCheckpointer.assertEqual", "maskrcnn_benchmark.utils.checkpoint.Checkpointer.load", "trained_model.parameters", "fresh_model.parameters", "checkpoint.TestCheckpointer.assertFalse", "checkpoint.TestCheckpointer.assertTrue", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "maskrcnn_benchmark.utils.checkpoint.Checkpointer.has_checkpoint", "maskrcnn_benchmark.utils.checkpoint.Checkpointer.get_checkpoint_file", "os.path.join", "trained_p.equal", "id", "id"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.has_checkpoint", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.get_checkpoint_file"], ["", "def", "test_from_last_checkpoint_model", "(", "self", ")", ":", "\n", "# test that loading works even if they differ by a prefix", "\n", "        ", "for", "trained_model", ",", "fresh_model", "in", "[", "\n", "(", "self", ".", "create_model", "(", ")", ",", "self", ".", "create_model", "(", ")", ")", ",", "\n", "(", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "self", ".", "create_model", "(", ")", ")", ",", "\n", "(", "self", ".", "create_model", "(", ")", ",", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ")", ",", "\n", "(", "\n", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "\n", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "\n", ")", ",", "\n", "]", ":", "\n", "\n", "            ", "with", "TemporaryDirectory", "(", ")", "as", "f", ":", "\n", "                ", "checkpointer", "=", "Checkpointer", "(", "\n", "trained_model", ",", "save_dir", "=", "f", ",", "save_to_disk", "=", "True", "\n", ")", "\n", "checkpointer", ".", "save", "(", "\"checkpoint_file\"", ")", "\n", "\n", "# in the same folder", "\n", "fresh_checkpointer", "=", "Checkpointer", "(", "fresh_model", ",", "save_dir", "=", "f", ")", "\n", "self", ".", "assertTrue", "(", "fresh_checkpointer", ".", "has_checkpoint", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "\n", "fresh_checkpointer", ".", "get_checkpoint_file", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "f", ",", "\"checkpoint_file.pth\"", ")", ",", "\n", ")", "\n", "_", "=", "fresh_checkpointer", ".", "load", "(", ")", "\n", "\n", "", "for", "trained_p", ",", "loaded_p", "in", "zip", "(", "\n", "trained_model", ".", "parameters", "(", ")", ",", "fresh_model", ".", "parameters", "(", ")", "\n", ")", ":", "\n", "# different tensor references", "\n", "                ", "self", ".", "assertFalse", "(", "id", "(", "trained_p", ")", "==", "id", "(", "loaded_p", ")", ")", "\n", "# same content", "\n", "self", ".", "assertTrue", "(", "trained_p", ".", "equal", "(", "loaded_p", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.test_from_name_file_model": [[71, 102], ["zip", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "torch.nn.DataParallel", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "tempfile.TemporaryDirectory", "maskrcnn_benchmark.utils.checkpoint.Checkpointer", "maskrcnn_benchmark.utils.checkpoint.Checkpointer.save", "trained_model.parameters", "fresh_model.parameters", "checkpoint.TestCheckpointer.assertFalse", "checkpoint.TestCheckpointer.assertTrue", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "checkpoint.TestCheckpointer.create_model", "tempfile.TemporaryDirectory", "maskrcnn_benchmark.utils.checkpoint.Checkpointer", "checkpoint.TestCheckpointer.assertFalse", "checkpoint.TestCheckpointer.assertEqual", "maskrcnn_benchmark.utils.checkpoint.Checkpointer.load", "trained_p.equal", "maskrcnn_benchmark.utils.checkpoint.Checkpointer.has_checkpoint", "maskrcnn_benchmark.utils.checkpoint.Checkpointer.get_checkpoint_file", "os.path.join", "id", "id"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.has_checkpoint", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.get_checkpoint_file"], ["", "", "", "def", "test_from_name_file_model", "(", "self", ")", ":", "\n", "# test that loading works even if they differ by a prefix", "\n", "        ", "for", "trained_model", ",", "fresh_model", "in", "[", "\n", "(", "self", ".", "create_model", "(", ")", ",", "self", ".", "create_model", "(", ")", ")", ",", "\n", "(", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "self", ".", "create_model", "(", ")", ")", ",", "\n", "(", "self", ".", "create_model", "(", ")", ",", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ")", ",", "\n", "(", "\n", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "\n", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "\n", ")", ",", "\n", "]", ":", "\n", "            ", "with", "TemporaryDirectory", "(", ")", "as", "f", ":", "\n", "                ", "checkpointer", "=", "Checkpointer", "(", "\n", "trained_model", ",", "save_dir", "=", "f", ",", "save_to_disk", "=", "True", "\n", ")", "\n", "checkpointer", ".", "save", "(", "\"checkpoint_file\"", ")", "\n", "\n", "# on different folders", "\n", "with", "TemporaryDirectory", "(", ")", "as", "g", ":", "\n", "                    ", "fresh_checkpointer", "=", "Checkpointer", "(", "fresh_model", ",", "save_dir", "=", "g", ")", "\n", "self", ".", "assertFalse", "(", "fresh_checkpointer", ".", "has_checkpoint", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "fresh_checkpointer", ".", "get_checkpoint_file", "(", ")", ",", "\"\"", ")", "\n", "_", "=", "fresh_checkpointer", ".", "load", "(", "os", ".", "path", ".", "join", "(", "f", ",", "\"checkpoint_file.pth\"", ")", ")", "\n", "\n", "", "", "for", "trained_p", ",", "loaded_p", "in", "zip", "(", "\n", "trained_model", ".", "parameters", "(", ")", ",", "fresh_model", ".", "parameters", "(", ")", "\n", ")", ":", "\n", "# different tensor references", "\n", "                ", "self", ".", "assertFalse", "(", "id", "(", "trained_p", ")", "==", "id", "(", "loaded_p", ")", ")", "\n", "# same content", "\n", "self", ".", "assertTrue", "(", "trained_p", ".", "equal", "(", "loaded_p", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.test_complex_model_loaded": [[103, 115], ["checkpoint.TestCheckpointer.create_complex_model", "maskrcnn_benchmark.utils.model_serialization.load_state_dict", "zip", "torch.nn.DataParallel", "torch.nn.DataParallel.state_dict().values", "state_dict.values", "checkpoint.TestCheckpointer.assertFalse", "checkpoint.TestCheckpointer.assertTrue", "loaded.equal", "torch.nn.DataParallel.state_dict", "id", "id"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tests.checkpoint.TestCheckpointer.create_complex_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.model_serialization.load_state_dict"], ["", "", "", "def", "test_complex_model_loaded", "(", "self", ")", ":", "\n", "        ", "for", "add_data_parallel", "in", "[", "False", ",", "True", "]", ":", "\n", "            ", "model", ",", "state_dict", "=", "self", ".", "create_complex_model", "(", ")", "\n", "if", "add_data_parallel", ":", "\n", "                ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "", "load_state_dict", "(", "model", ",", "state_dict", ")", "\n", "for", "loaded", ",", "stored", "in", "zip", "(", "model", ".", "state_dict", "(", ")", ".", "values", "(", ")", ",", "state_dict", ".", "values", "(", ")", ")", ":", "\n", "# different tensor references", "\n", "                ", "self", ".", "assertFalse", "(", "id", "(", "loaded", ")", "==", "id", "(", "stored", ")", ")", "\n", "# same content", "\n", "self", ".", "assertTrue", "(", "loaded", ".", "equal", "(", "stored", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.env_tests.env.get_config_root_path": [[6, 13], ["os.path.dirname", "os.path.dirname", "os.path.join", "os.path.abspath", "os.path.dirname", "os.path.realpath"], "function", ["None"], ["def", "get_config_root_path", "(", ")", ":", "\n", "    ", "''' Path to configs for unit tests '''", "\n", "# cur_file_dir is root/tests/env_tests", "\n", "cur_file_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ")", "\n", "ret", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "cur_file_dir", ")", ")", "\n", "ret", "=", "os", ".", "path", ".", "join", "(", "ret", ",", "\"configs\"", ")", "\n", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.model_serialization.align_and_update_state_dicts": [[10, 57], ["sorted", "sorted", "torch.as_tensor().view", "torch.as_tensor().view.max", "logging.getLogger", "enumerate", "list", "list", "len", "len", "max", "max", "idxs.tolist", "logging.getLogger.info", "model_state_dict.keys", "loaded_state_dict.keys", "i.endswith", "len", "torch.as_tensor", "log_str_template.format", "len", "len", "tuple"], "function", ["None"], ["def", "align_and_update_state_dicts", "(", "model_state_dict", ",", "loaded_state_dict", ")", ":", "\n", "    ", "\"\"\"\n    Strategy: suppose that the models that we will create will have prefixes appended\n    to each of its keys, for example due to an extra level of nesting that the original\n    pre-trained weights from ImageNet won't contain. For example, model.state_dict()\n    might return backbone[0].body.res2.conv1.weight, while the pre-trained model contains\n    res2.conv1.weight. We thus want to match both parameters together.\n    For that, we look for each model weight, look among all loaded keys if there is one\n    that is a suffix of the current weight name, and use it if that's the case.\n    If multiple matches exist, take the one with longest size\n    of the corresponding name. For example, for the same model as before, the pretrained\n    weight file can contain both res2.conv1.weight, as well as conv1.weight. In this case,\n    we want to match backbone[0].body.conv1.weight to conv1.weight, and\n    backbone[0].body.res2.conv1.weight to res2.conv1.weight.\n    \"\"\"", "\n", "current_keys", "=", "sorted", "(", "list", "(", "model_state_dict", ".", "keys", "(", ")", ")", ")", "\n", "loaded_keys", "=", "sorted", "(", "list", "(", "loaded_state_dict", ".", "keys", "(", ")", ")", ")", "\n", "# get a matrix of string matches, where each (i, j) entry correspond to the size of the", "\n", "# loaded_key string, if it matches", "\n", "match_matrix", "=", "[", "\n", "len", "(", "j", ")", "if", "i", ".", "endswith", "(", "j", ")", "else", "0", "for", "i", "in", "current_keys", "for", "j", "in", "loaded_keys", "\n", "]", "\n", "match_matrix", "=", "torch", ".", "as_tensor", "(", "match_matrix", ")", ".", "view", "(", "\n", "len", "(", "current_keys", ")", ",", "len", "(", "loaded_keys", ")", "\n", ")", "\n", "max_match_size", ",", "idxs", "=", "match_matrix", ".", "max", "(", "1", ")", "\n", "# remove indices that correspond to no-match", "\n", "idxs", "[", "max_match_size", "==", "0", "]", "=", "-", "1", "\n", "\n", "# used for logging", "\n", "max_size", "=", "max", "(", "[", "len", "(", "key", ")", "for", "key", "in", "current_keys", "]", ")", "if", "current_keys", "else", "1", "\n", "max_size_loaded", "=", "max", "(", "[", "len", "(", "key", ")", "for", "key", "in", "loaded_keys", "]", ")", "if", "loaded_keys", "else", "1", "\n", "log_str_template", "=", "\"{: <{}} loaded from {: <{}} of shape {}\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "for", "idx_new", ",", "idx_old", "in", "enumerate", "(", "idxs", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "if", "idx_old", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "", "key", "=", "current_keys", "[", "idx_new", "]", "\n", "key_old", "=", "loaded_keys", "[", "idx_old", "]", "\n", "model_state_dict", "[", "key", "]", "=", "loaded_state_dict", "[", "key_old", "]", "\n", "logger", ".", "info", "(", "\n", "log_str_template", ".", "format", "(", "\n", "key", ",", "\n", "max_size", ",", "\n", "key_old", ",", "\n", "max_size_loaded", ",", "\n", "tuple", "(", "loaded_state_dict", "[", "key_old", "]", ".", "shape", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.model_serialization.strip_prefix_if_present": [[61, 69], ["sorted", "collections.OrderedDict", "state_dict.items", "state_dict.keys", "all", "key.startswith", "key.replace"], "function", ["None"], ["", "", "def", "strip_prefix_if_present", "(", "state_dict", ",", "prefix", ")", ":", "\n", "    ", "keys", "=", "sorted", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "if", "not", "all", "(", "key", ".", "startswith", "(", "prefix", ")", "for", "key", "in", "keys", ")", ":", "\n", "        ", "return", "state_dict", "\n", "", "stripped_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "stripped_state_dict", "[", "key", ".", "replace", "(", "prefix", ",", "\"\"", ")", "]", "=", "value", "\n", "", "return", "stripped_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.model_serialization.load_state_dict": [[71, 81], ["model.state_dict", "model_serialization.strip_prefix_if_present", "model_serialization.align_and_update_state_dicts", "model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.model_serialization.strip_prefix_if_present", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.model_serialization.align_and_update_state_dicts", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.model_serialization.load_state_dict"], ["", "def", "load_state_dict", "(", "model", ",", "loaded_state_dict", ")", ":", "\n", "    ", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# if the state_dict comes from a model that was wrapped in a", "\n", "# DataParallel or DistributedDataParallel during serialization,", "\n", "# remove the \"module\" prefix before performing the matching", "\n", "loaded_state_dict", "=", "strip_prefix_if_present", "(", "loaded_state_dict", ",", "prefix", "=", "\"module.\"", ")", "\n", "align_and_update_state_dicts", "(", "model_state_dict", ",", "loaded_state_dict", ")", "\n", "\n", "# use strict loading", "\n", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.miscellaneous.mkdir": [[6, 12], ["os.makedirs"], "function", ["None"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_world_size": [[13, 19], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_world_size"], ["def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_rank": [[21, 27], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.is_main_process": [[29, 31], ["comm.get_rank"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.synchronize": [[33, 46], ["torch.get_world_size", "torch.barrier", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to synchronize (barrier) among all processes when\n    using distributed training\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.all_gather": [[48, 89], ["comm.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.IntTensor().to", "torch.IntTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.IntTensor", "torch.IntTensor", "range", "size.item", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.IntTensor", "torch.IntTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_world_size", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.all_gather", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.all_gather", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to"], ["", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "IntTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", "]", ")", ".", "to", "(", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.reduce_dict": [[91, 118], ["comm.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "input_dict.keys", "names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_world_size", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_rank"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "average", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.timer.Timer.__init__": [[9, 11], ["timer.Timer.reset"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.timer.Timer.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.timer.Timer.average_time": [[12, 15], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "average_time", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_time", "/", "self", ".", "calls", "if", "self", ".", "calls", ">", "0", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.timer.Timer.tic": [[16, 20], ["time.time"], "methods", ["None"], ["", "def", "tic", "(", "self", ")", ":", "\n", "# using time.time instead of time.clock because time time.clock", "\n", "# does not normalize for multithreading", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.timer.Timer.toc": [[21, 27], ["timer.Timer.add", "time.time"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.timer.Timer.add"], ["", "def", "toc", "(", "self", ",", "average", "=", "True", ")", ":", "\n", "        ", "self", ".", "add", "(", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", ")", "\n", "if", "average", ":", "\n", "            ", "return", "self", ".", "average_time", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.timer.Timer.add": [[28, 32], ["None"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "time_diff", ")", ":", "\n", "        ", "self", ".", "diff", "=", "time_diff", "\n", "self", ".", "total_time", "+=", "self", ".", "diff", "\n", "self", ".", "calls", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.timer.Timer.reset": [[33, 38], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_time", "=", "0.0", "\n", "self", ".", "calls", "=", "0", "\n", "self", ".", "start_time", "=", "0.0", "\n", "self", ".", "diff", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.timer.Timer.avg_time_str": [[39, 42], ["str", "datetime.timedelta"], "methods", ["None"], ["", "def", "avg_time_str", "(", "self", ")", ":", "\n", "        ", "time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "self", ".", "average_time", ")", ")", "\n", "return", "time_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.timer.get_time_str": [[44, 47], ["str", "datetime.timedelta"], "function", ["None"], ["", "", "def", "get_time_str", "(", "time_diff", ")", ":", "\n", "    ", "time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "time_diff", ")", ")", "\n", "return", "time_str", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.logger.setup_logger": [[7, 26], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join"], "function", ["None"], ["def", "setup_logger", "(", "name", ",", "save_dir", ",", "distributed_rank", ",", "filename", "=", "\"log.txt\"", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# don't log results for the non-master process", "\n", "if", "distributed_rank", ">", "0", ":", "\n", "        ", "return", "logger", "\n", "", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(name)s %(levelname)s: %(message)s\"", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "save_dir", ":", "\n", "        ", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "filename", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.__init__": [[31, 33], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Registry", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register": [[34, 46], ["registry._register_generic", "registry._register_generic"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry._register_generic", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry._register_generic"], ["", "def", "register", "(", "self", ",", "module_name", ",", "module", "=", "None", ")", ":", "\n", "# used as function call", "\n", "        ", "if", "module", "is", "not", "None", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "module", ")", "\n", "return", "\n", "\n", "# used as decorator", "\n", "", "def", "register_fn", "(", "fn", ")", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "fn", ")", "\n", "return", "fn", "\n", "\n", "", "return", "register_fn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry._register_generic": [[4, 7], ["None"], "function", ["None"], ["def", "_register_generic", "(", "module_dict", ",", "module_name", ",", "module", ")", ":", "\n", "    ", "assert", "module_name", "not", "in", "module_dict", "\n", "module_dict", "[", "module_name", "]", "=", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.cv2_util.findContours": [[8, 25], ["cv2.__version__.startswith", "cv2.findContours", "cv2.__version__.startswith", "cv2.findContours", "AssertionError"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.cv2_util.findContours", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.cv2_util.findContours"], ["def", "findContours", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Wraps cv2.findContours to maintain compatiblity between versions\n    3 and 4\n\n    Returns:\n        contours, hierarchy\n    \"\"\"", "\n", "if", "cv2", ".", "__version__", ".", "startswith", "(", "'4'", ")", ":", "\n", "        ", "contours", ",", "hierarchy", "=", "cv2", ".", "findContours", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "cv2", ".", "__version__", ".", "startswith", "(", "'3'", ")", ":", "\n", "        ", "_", ",", "contours", ",", "hierarchy", "=", "cv2", ".", "findContours", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "AssertionError", "(", "\n", "'cv2 must be either version 3 or 4 to call this method'", ")", "\n", "\n", "", "return", "contours", ",", "hierarchy", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.model_zoo.cache_url": [[17, 59], ["urlparse", "os.path.basename", "os.path.join", "maskrcnn_benchmark.utils.comm.synchronize", "os.path.expanduser", "os.getenv", "os.path.exists", "os.makedirs", "urlparse.path.replace", "maskrcnn_benchmark.utils.comm.is_main_process", "sys.stderr.write", "HASH_REGEX.search", "_download_url_to_file", "os.getenv", "os.path.join", "os.path.exists", "hash_prefix.group.group", "len"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.synchronize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.is_main_process"], ["def", "cache_url", "(", "url", ",", "model_dir", "=", "None", ",", "progress", "=", "True", ")", ":", "\n", "    ", "r\"\"\"Loads the Torch serialized object at the given URL.\n    If the object is already present in `model_dir`, it's deserialized and\n    returned. The filename part of the URL should follow the naming convention\n    ``filename-<sha256>.ext`` where ``<sha256>`` is the first eight or more\n    digits of the SHA256 hash of the contents of the file. The hash is used to\n    ensure unique names and to verify the contents of the file.\n    The default value of `model_dir` is ``$TORCH_HOME/models`` where\n    ``$TORCH_HOME`` defaults to ``~/.torch``. The default directory can be\n    overridden with the ``$TORCH_MODEL_ZOO`` environment variable.\n    Args:\n        url (string): URL of the object to download\n        model_dir (string, optional): directory in which to save the object\n        progress (bool, optional): whether or not to display a progress bar to stderr\n    Example:\n        >>> cached_file = maskrcnn_benchmark.utils.model_zoo.cache_url('https://s3.amazonaws.com/pytorch/models/resnet18-5c106cde.pth')\n    \"\"\"", "\n", "if", "model_dir", "is", "None", ":", "\n", "        ", "torch_home", "=", "os", ".", "path", ".", "expanduser", "(", "os", ".", "getenv", "(", "'TORCH_HOME'", ",", "'~/.torch'", ")", ")", "\n", "model_dir", "=", "os", ".", "getenv", "(", "'TORCH_MODEL_ZOO'", ",", "os", ".", "path", ".", "join", "(", "torch_home", ",", "'models'", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "model_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "model_dir", ")", "\n", "", "parts", "=", "urlparse", "(", "url", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "parts", ".", "path", ")", "\n", "if", "filename", "==", "\"model_final.pkl\"", ":", "\n", "# workaround as pre-trained Caffe2 models from Detectron have all the same filename", "\n", "# so make the full path the filename by replacing / with _", "\n", "        ", "filename", "=", "parts", ".", "path", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "\n", "", "cached_file", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cached_file", ")", "and", "is_main_process", "(", ")", ":", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "'Downloading: \"{}\" to {}\\n'", ".", "format", "(", "url", ",", "cached_file", ")", ")", "\n", "hash_prefix", "=", "HASH_REGEX", ".", "search", "(", "filename", ")", "\n", "if", "hash_prefix", "is", "not", "None", ":", "\n", "            ", "hash_prefix", "=", "hash_prefix", ".", "group", "(", "1", ")", "\n", "# workaround: Caffe2 models don't have a hash, but follow the R-50 convention,", "\n", "# which matches the hash PyTorch uses. So we skip the hash matching", "\n", "# if the hash_prefix is less than 6 characters", "\n", "if", "len", "(", "hash_prefix", ")", "<", "6", ":", "\n", "                ", "hash_prefix", "=", "None", "\n", "", "", "_download_url_to_file", "(", "url", ",", "cached_file", ",", "hash_prefix", ",", "progress", "=", "progress", ")", "\n", "", "synchronize", "(", ")", "\n", "return", "cached_file", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.metric_logger.SmoothedValue.__init__": [[13, 18], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ")", ":", "\n", "        ", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "series", "=", "[", "]", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.metric_logger.SmoothedValue.update": [[19, 24], ["metric_logger.SmoothedValue.deque.append", "metric_logger.SmoothedValue.series.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "series", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "total", "+=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.metric_logger.SmoothedValue.median": [[25, 29], ["torch.tensor", "torch.tensor.median().item", "list", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.metric_logger.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.metric_logger.SmoothedValue.avg": [[30, 34], ["torch.tensor", "torch.tensor.mean().item", "list", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.metric_logger.SmoothedValue.global_avg": [[35, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.metric_logger.MetricLogger.__init__": [[41, 44], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.metric_logger.MetricLogger.update": [[45, 51], ["kwargs.items", "isinstance", "isinstance", "metric_logger.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.metric_logger.MetricLogger.__getattr__": [[52, 59], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.metric_logger.MetricLogger.__str__": [[60, 67], ["metric_logger.MetricLogger.meters.items", "metric_logger.MetricLogger.delimiter.join", "loss_str.append"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {:.4f} ({:.4f})\"", ".", "format", "(", "name", ",", "meter", ".", "median", ",", "meter", ".", "global_avg", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.c2_model_loading._rename_basic_resnet_weights": [[12, 63], ["k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace"], "function", ["None"], ["def", "_rename_basic_resnet_weights", "(", "layer_keys", ")", ":", "\n", "    ", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"_\"", ",", "\".\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".w\"", ",", "\".weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".bn\"", ",", "\"_bn\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".b\"", ",", "\".bias\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"_bn.s\"", ",", "\"_bn.scale\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".biasranch\"", ",", "\".branch\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"bbox.pred\"", ",", "\"bbox_pred\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"cls.score\"", ",", "\"cls_score\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res.conv1_\"", ",", "\"conv1_\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# RPN / Faster RCNN", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".biasbox\"", ",", "\".bbox\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv.rpn\"", ",", "\"rpn.conv\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.bbox.pred\"", ",", "\"rpn.bbox_pred\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.cls.logits\"", ",", "\"rpn.cls_logits\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# Affine-Channel -> BatchNorm enaming", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"_bn.scale\"", ",", "\"_bn.weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# Make torchvision-compatible", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv1_bn.\"", ",", "\"bn1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res2.\"", ",", "\"layer1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res3.\"", ",", "\"layer2.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res4.\"", ",", "\"layer3.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res5.\"", ",", "\"layer4.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2a.\"", ",", "\".conv1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2a_bn.\"", ",", "\".bn1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2b.\"", ",", "\".conv2.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2b_bn.\"", ",", "\".bn2.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2c.\"", ",", "\".conv3.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2c_bn.\"", ",", "\".bn3.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch1.\"", ",", "\".downsample.0.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch1_bn.\"", ",", "\".downsample.1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# GroupNorm", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv1.gn.s\"", ",", "\"bn1.weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv1.gn.bias\"", ",", "\"bn1.bias\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv2.gn.s\"", ",", "\"bn2.weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv2.gn.bias\"", ",", "\"bn2.bias\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv3.gn.s\"", ",", "\"bn3.weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv3.gn.bias\"", ",", "\"bn3.bias\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"downsample.0.gn.s\"", ",", "\"downsample.1.weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"downsample.0.gn.bias\"", ",", "\"downsample.1.bias\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "return", "layer_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.c2_model_loading._rename_fpn_weights": [[64, 82], ["enumerate", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace"], "function", ["None"], ["", "def", "_rename_fpn_weights", "(", "layer_keys", ",", "stage_names", ")", ":", "\n", "    ", "for", "mapped_idx", ",", "stage_name", "in", "enumerate", "(", "stage_names", ",", "1", ")", ":", "\n", "        ", "suffix", "=", "\"\"", "\n", "if", "mapped_idx", "<", "4", ":", "\n", "            ", "suffix", "=", "\".lateral\"", "\n", "", "layer_keys", "=", "[", "\n", "k", ".", "replace", "(", "\"fpn.inner.layer{}.sum{}\"", ".", "format", "(", "stage_name", ",", "suffix", ")", ",", "\"fpn_inner{}\"", ".", "format", "(", "mapped_idx", ")", ")", "for", "k", "in", "layer_keys", "\n", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"fpn.layer{}.sum\"", ".", "format", "(", "stage_name", ")", ",", "\"fpn_layer{}\"", ".", "format", "(", "mapped_idx", ")", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "\n", "", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.conv.fpn2\"", ",", "\"rpn.conv\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.bbox_pred.fpn2\"", ",", "\"rpn.bbox_pred\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "\n", "k", ".", "replace", "(", "\"rpn.cls_logits.fpn2\"", ",", "\"rpn.cls_logits\"", ")", "for", "k", "in", "layer_keys", "\n", "]", "\n", "\n", "return", "layer_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.c2_model_loading._rename_weights_for_resnet": [[84, 131], ["sorted", "sorted", "c2_model_loading._rename_basic_resnet_weights", "c2_model_loading._rename_fpn_weights", "logging.getLogger", "logging.getLogger.info", "max", "collections.OrderedDict", "weights.keys", "weights.keys", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "torch.from_numpy", "logging.getLogger.info", "zip", "len"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.c2_model_loading._rename_basic_resnet_weights", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.c2_model_loading._rename_fpn_weights"], ["", "def", "_rename_weights_for_resnet", "(", "weights", ",", "stage_names", ")", ":", "\n", "    ", "original_keys", "=", "sorted", "(", "weights", ".", "keys", "(", ")", ")", "\n", "layer_keys", "=", "sorted", "(", "weights", ".", "keys", "(", ")", ")", "\n", "\n", "# for X-101, rename output to fc1000 to avoid conflicts afterwards", "\n", "layer_keys", "=", "[", "k", "if", "k", "!=", "\"pred_b\"", "else", "\"fc1000_b\"", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", "if", "k", "!=", "\"pred_w\"", "else", "\"fc1000_w\"", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# performs basic renaming: _ -> . , etc", "\n", "layer_keys", "=", "_rename_basic_resnet_weights", "(", "layer_keys", ")", "\n", "\n", "# FPN", "\n", "layer_keys", "=", "_rename_fpn_weights", "(", "layer_keys", ",", "stage_names", ")", "\n", "\n", "# Mask R-CNN", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"mask.fcn.logits\"", ",", "\"mask_fcn_logits\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".[mask].fcn\"", ",", "\"mask_fcn\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv5.mask\"", ",", "\"conv5_mask\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# Keypoint R-CNN", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"kps.score.lowres\"", ",", "\"kps_score_lowres\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"kps.score\"", ",", "\"kps_score\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv.fcn\"", ",", "\"conv_fcn\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# Rename for our RPN structure", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.\"", ",", "\"rpn.head.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "key_map", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "original_keys", ",", "layer_keys", ")", "}", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "info", "(", "\"Remapping C2 weights\"", ")", "\n", "max_c2_key_size", "=", "max", "(", "[", "len", "(", "k", ")", "for", "k", "in", "original_keys", "if", "\"_momentum\"", "not", "in", "k", "]", ")", "\n", "\n", "new_weights", "=", "OrderedDict", "(", ")", "\n", "for", "k", "in", "original_keys", ":", "\n", "        ", "v", "=", "weights", "[", "k", "]", "\n", "if", "\"_momentum\"", "in", "k", ":", "\n", "            ", "continue", "\n", "# if 'fc1000' in k:", "\n", "#     continue", "\n", "", "w", "=", "torch", ".", "from_numpy", "(", "v", ")", "\n", "# if \"bn\" in k:", "\n", "#     w = w.view(1, -1, 1, 1)", "\n", "logger", ".", "info", "(", "\"C2 name: {: <{}} mapped name: {}\"", ".", "format", "(", "k", ",", "max_c2_key_size", ",", "key_map", "[", "k", "]", ")", ")", "\n", "new_weights", "[", "key_map", "[", "k", "]", "]", "=", "w", "\n", "\n", "", "return", "new_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.c2_model_loading._load_c2_pickled_weights": [[133, 144], ["open", "pickle.load", "pickle.load"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.load"], ["", "def", "_load_c2_pickled_weights", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "if", "torch", ".", "_six", ".", "PY3", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "\"latin1\"", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "if", "\"blobs\"", "in", "data", ":", "\n", "        ", "weights", "=", "data", "[", "\"blobs\"", "]", "\n", "", "else", ":", "\n", "        ", "weights", "=", "data", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.c2_model_loading.load_resnet_c2_format": [[155, 174], ["C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "c2_model_loading._load_c2_pickled_weights", "conv_body.replace().replace().replace", "arch.replace().replace.replace().replace", "c2_model_loading._rename_weights_for_resnet", "dict", "conv_body.replace().replace", "arch.replace().replace.replace", "conv_body.replace"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.c2_model_loading._load_c2_pickled_weights", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.c2_model_loading._rename_weights_for_resnet"], ["@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-50-C4\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-50-C5\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-101-C4\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-101-C5\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-50-FPN\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-50-FPN-RETINANET\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-101-FPN\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-101-PAN\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-101-FPN-RETINANET\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-152-FPN\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-152-PAN\"", ")", "\n", "def", "load_resnet_c2_format", "(", "cfg", ",", "f", ")", ":", "\n", "    ", "state_dict", "=", "_load_c2_pickled_weights", "(", "f", ")", "\n", "conv_body", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "\n", "arch", "=", "conv_body", ".", "replace", "(", "\"-C4\"", ",", "\"\"", ")", ".", "replace", "(", "\"-C5\"", ",", "\"\"", ")", ".", "replace", "(", "\"-FPN\"", ",", "\"\"", ")", "\n", "arch", "=", "arch", ".", "replace", "(", "\"-RETINANET\"", ",", "\"\"", ")", ".", "replace", "(", "\"-PAN\"", ",", "\"\"", ")", "\n", "stages", "=", "_C2_STAGE_NAMES", "[", "arch", "]", "\n", "state_dict", "=", "_rename_weights_for_resnet", "(", "state_dict", ",", "stages", ")", "\n", "return", "dict", "(", "model", "=", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.c2_model_loading.load_c2_format": [[176, 178], ["None"], "function", ["None"], ["", "def", "load_c2_format", "(", "cfg", ",", "f", ")", ":", "\n", "    ", "return", "C2_FORMAT_LOADER", "[", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "]", "(", "cfg", ",", "f", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.collect_env.get_pil_version": [[7, 9], ["None"], "function", ["None"], ["def", "get_pil_version", "(", ")", ":", "\n", "    ", "return", "\"\\n        Pillow ({})\"", ".", "format", "(", "PIL", ".", "__version__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.collect_env.collect_env_info": [[11, 15], ["torch.utils.collect_env.get_pretty_env_info", "collect_env.get_pil_version"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.collect_env.get_pil_version"], ["", "def", "collect_env_info", "(", ")", ":", "\n", "    ", "env_str", "=", "get_pretty_env_info", "(", ")", "\n", "env_str", "+=", "get_pil_version", "(", ")", "\n", "return", "env_str", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.__init__": [[14, 31], ["logging.getLogger"], "methods", ["None"], ["class", "TestCheckpointer", "(", "unittest", ".", "TestCase", ")", ":", "\n", "    ", "def", "create_model", "(", "self", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "2", ",", "3", ")", ",", "nn", ".", "Linear", "(", "3", ",", "1", ")", ")", "\n", "\n", "", "def", "create_complex_model", "(", "self", ")", ":", "\n", "        ", "m", "=", "nn", ".", "Module", "(", ")", "\n", "m", ".", "block1", "=", "nn", ".", "Module", "(", ")", "\n", "m", ".", "block1", ".", "layer1", "=", "nn", ".", "Linear", "(", "2", ",", "3", ")", "\n", "m", ".", "layer2", "=", "nn", ".", "Linear", "(", "3", ",", "2", ")", "\n", "m", ".", "res", "=", "nn", ".", "Module", "(", ")", "\n", "m", ".", "res", ".", "layer2", "=", "nn", ".", "Linear", "(", "3", ",", "2", ")", "\n", "\n", "state_dict", "=", "OrderedDict", "(", ")", "\n", "state_dict", "[", "\"layer1.weight\"", "]", "=", "torch", ".", "rand", "(", "3", ",", "2", ")", "\n", "state_dict", "[", "\"layer1.bias\"", "]", "=", "torch", ".", "rand", "(", "3", ")", "\n", "state_dict", "[", "\"layer2.weight\"", "]", "=", "torch", ".", "rand", "(", "2", ",", "3", ")", "\n", "state_dict", "[", "\"layer2.bias\"", "]", "=", "torch", ".", "rand", "(", "2", ")", "\n", "state_dict", "[", "\"res.layer2.weight\"", "]", "=", "torch", ".", "rand", "(", "2", ",", "3", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.save": [[32, 51], ["checkpoint.Checkpointer.model.state_dict", "data.update", "os.path.join", "checkpoint.Checkpointer.logger.info", "torch.save", "checkpoint.Checkpointer.tag_last_checkpoint", "checkpoint.Checkpointer.optimizer.state_dict", "checkpoint.Checkpointer.scheduler.state_dict"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.tag_last_checkpoint"], ["state_dict", "[", "\"res.layer2.bias\"", "]", "=", "torch", ".", "rand", "(", "2", ")", "\n", "\n", "return", "m", ",", "state_dict", "\n", "\n", "", "def", "test_from_last_checkpoint_model", "(", "self", ")", ":", "\n", "# test that loading works even if they differ by a prefix", "\n", "        ", "for", "trained_model", ",", "fresh_model", "in", "[", "\n", "(", "self", ".", "create_model", "(", ")", ",", "self", ".", "create_model", "(", ")", ")", ",", "\n", "(", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "self", ".", "create_model", "(", ")", ")", ",", "\n", "(", "self", ".", "create_model", "(", ")", ",", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ")", ",", "\n", "(", "\n", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "\n", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "\n", ")", ",", "\n", "]", ":", "\n", "\n", "            ", "with", "TemporaryDirectory", "(", ")", "as", "f", ":", "\n", "                ", "checkpointer", "=", "Checkpointer", "(", "\n", "trained_model", ",", "save_dir", "=", "f", ",", "save_to_disk", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.load": [[52, 72], ["checkpoint.Checkpointer.Checkpointer.has_checkpoint", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer._load_file", "checkpoint.Checkpointer.Checkpointer._load_model", "checkpoint.Checkpointer.Checkpointer.get_checkpoint_file", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.optimizer.load_state_dict", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.scheduler.load_state_dict", "checkpoint.Checkpointer.Checkpointer.pop", "checkpoint.Checkpointer.Checkpointer.pop"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.has_checkpoint", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.DetectronCheckpointer._load_file", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer._load_model", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.get_checkpoint_file", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.model_serialization.load_state_dict"], ["checkpointer", ".", "save", "(", "\"checkpoint_file\"", ")", "\n", "\n", "# in the same folder", "\n", "fresh_checkpointer", "=", "Checkpointer", "(", "fresh_model", ",", "save_dir", "=", "f", ")", "\n", "self", ".", "assertTrue", "(", "fresh_checkpointer", ".", "has_checkpoint", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "\n", "fresh_checkpointer", ".", "get_checkpoint_file", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "f", ",", "\"checkpoint_file.pth\"", ")", ",", "\n", ")", "\n", "_", "=", "fresh_checkpointer", ".", "load", "(", ")", "\n", "\n", "", "for", "trained_p", ",", "loaded_p", "in", "zip", "(", "\n", "trained_model", ".", "parameters", "(", ")", ",", "fresh_model", ".", "parameters", "(", ")", "\n", ")", ":", "\n", "# different tensor references", "\n", "                ", "self", ".", "assertFalse", "(", "id", "(", "trained_p", ")", "==", "id", "(", "loaded_p", ")", ")", "\n", "# same content", "\n", "self", ".", "assertTrue", "(", "trained_p", ".", "equal", "(", "loaded_p", ")", ")", "\n", "\n", "", "", "", "def", "test_from_name_file_model", "(", "self", ")", ":", "\n", "# test that loading works even if they differ by a prefix", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.has_checkpoint": [[73, 76], ["os.path.join", "os.path.exists"], "methods", ["None"], ["        ", "for", "trained_model", ",", "fresh_model", "in", "[", "\n", "(", "self", ".", "create_model", "(", ")", ",", "self", ".", "create_model", "(", ")", ")", ",", "\n", "(", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "self", ".", "create_model", "(", ")", ")", ",", "\n", "(", "self", ".", "create_model", "(", ")", ",", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ")", ",", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.get_checkpoint_file": [[77, 88], ["os.path.join", "open", "f.read", "last_saved.strip.strip.strip"], "methods", ["None"], ["(", "\n", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "\n", "nn", ".", "DataParallel", "(", "self", ".", "create_model", "(", ")", ")", ",", "\n", ")", ",", "\n", "]", ":", "\n", "            ", "with", "TemporaryDirectory", "(", ")", "as", "f", ":", "\n", "                ", "checkpointer", "=", "Checkpointer", "(", "\n", "trained_model", ",", "save_dir", "=", "f", ",", "save_to_disk", "=", "True", "\n", ")", "\n", "checkpointer", ".", "save", "(", "\"checkpoint_file\"", ")", "\n", "\n", "# on different folders", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.tag_last_checkpoint": [[89, 93], ["os.path.join", "open", "f.write"], "methods", ["None"], ["with", "TemporaryDirectory", "(", ")", "as", "g", ":", "\n", "                    ", "fresh_checkpointer", "=", "Checkpointer", "(", "fresh_model", ",", "save_dir", "=", "g", ")", "\n", "self", ".", "assertFalse", "(", "fresh_checkpointer", ".", "has_checkpoint", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "fresh_checkpointer", ".", "get_checkpoint_file", "(", ")", ",", "\"\"", ")", "\n", "_", "=", "fresh_checkpointer", ".", "load", "(", "os", ".", "path", ".", "join", "(", "f", ",", "\"checkpoint_file.pth\"", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer._load_file": [[94, 96], ["torch.load", "torch.device"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.load"], ["\n", "", "", "for", "trained_p", ",", "loaded_p", "in", "zip", "(", "\n", "trained_model", ".", "parameters", "(", ")", ",", "fresh_model", ".", "parameters", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer._load_model": [[97, 99], ["maskrcnn_benchmark.utils.model_serialization.load_state_dict", "checkpoint.pop"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.model_serialization.load_state_dict"], [")", ":", "\n", "# different tensor references", "\n", "                ", "self", ".", "assertFalse", "(", "id", "(", "trained_p", ")", "==", "id", "(", "loaded_p", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.DetectronCheckpointer.__init__": [[102, 116], ["checkpoint.Checkpointer.__init__", "cfg.clone"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["\n", "", "", "", "def", "test_complex_model_loaded", "(", "self", ")", ":", "\n", "        ", "for", "add_data_parallel", "in", "[", "False", ",", "True", "]", ":", "\n", "            ", "model", ",", "state_dict", "=", "self", ".", "create_complex_model", "(", ")", "\n", "if", "add_data_parallel", ":", "\n", "                ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "", "load_state_dict", "(", "model", ",", "state_dict", ")", "\n", "for", "loaded", ",", "stored", "in", "zip", "(", "model", ".", "state_dict", "(", ")", ".", "values", "(", ")", ",", "state_dict", ".", "values", "(", ")", ")", ":", "\n", "# different tensor references", "\n", "                ", "self", ".", "assertFalse", "(", "id", "(", "loaded", ")", "==", "id", "(", "stored", ")", ")", "\n", "# same content", "\n", "self", ".", "assertTrue", "(", "loaded", ".", "equal", "(", "stored", ")", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.DetectronCheckpointer._load_file": [[117, 140], ["f.startswith", "f.startswith", "f.endswith", "checkpoint.Checkpointer._load_file", "maskrcnn_benchmark.utils.imports.import_file", "maskrcnn_benchmark.utils.imports.import_file.ModelCatalog.get", "checkpoint.DetectronCheckpointer.logger.info", "maskrcnn_benchmark.utils.model_zoo.cache_url", "checkpoint.DetectronCheckpointer.logger.info", "maskrcnn_benchmark.utils.c2_model_loading.load_c2_format", "dict", "len"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.DetectronCheckpointer._load_file", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.model_zoo.cache_url", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.c2_model_loading.load_c2_format"], ["", "", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "unittest", ".", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.env.setup_environment": [[7, 18], ["os.environ.get", "env.setup_custom_environment"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.env.setup_custom_environment"], ["    ", "''' Path to configs for unit tests '''", "\n", "# cur_file_dir is root/tests/env_tests", "\n", "cur_file_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ")", "\n", "ret", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "cur_file_dir", ")", ")", "\n", "ret", "=", "os", ".", "path", ".", "join", "(", "ret", ",", "\"configs\"", ")", "\n", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.env.setup_custom_environment": [[20, 34], ["maskrcnn_benchmark.utils.imports.import_file", "maskrcnn_benchmark.utils.imports.import_file.setup_environment", "hasattr", "callable"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.env.setup_environment"], []], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.box_coder.BoxCoder.__init__": [[13, 21], ["math.log"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "weights", ",", "bbox_xform_clip", "=", "math", ".", "log", "(", "1000.", "/", "16", ")", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            weights (4-element tuple)\n            bbox_xform_clip (float)\n        \"\"\"", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "bbox_xform_clip", "=", "bbox_xform_clip", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.box_coder.BoxCoder.encode": [[22, 51], ["torch.stack", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "reference_boxes", ",", "proposals", ")", ":", "\n", "        ", "\"\"\"\n        Encode a set of proposals with respect to some\n        reference boxes\n\n        Arguments:\n            reference_boxes (Tensor): reference boxes\n            proposals (Tensor): boxes to be encoded\n        \"\"\"", "\n", "\n", "TO_REMOVE", "=", "1", "# TODO remove", "\n", "ex_widths", "=", "proposals", "[", ":", ",", "2", "]", "-", "proposals", "[", ":", ",", "0", "]", "+", "TO_REMOVE", "\n", "ex_heights", "=", "proposals", "[", ":", ",", "3", "]", "-", "proposals", "[", ":", ",", "1", "]", "+", "TO_REMOVE", "\n", "ex_ctr_x", "=", "proposals", "[", ":", ",", "0", "]", "+", "0.5", "*", "ex_widths", "\n", "ex_ctr_y", "=", "proposals", "[", ":", ",", "1", "]", "+", "0.5", "*", "ex_heights", "\n", "\n", "gt_widths", "=", "reference_boxes", "[", ":", ",", "2", "]", "-", "reference_boxes", "[", ":", ",", "0", "]", "+", "TO_REMOVE", "\n", "gt_heights", "=", "reference_boxes", "[", ":", ",", "3", "]", "-", "reference_boxes", "[", ":", ",", "1", "]", "+", "TO_REMOVE", "\n", "gt_ctr_x", "=", "reference_boxes", "[", ":", ",", "0", "]", "+", "0.5", "*", "gt_widths", "\n", "gt_ctr_y", "=", "reference_boxes", "[", ":", ",", "1", "]", "+", "0.5", "*", "gt_heights", "\n", "\n", "wx", ",", "wy", ",", "ww", ",", "wh", "=", "self", ".", "weights", "\n", "targets_dx", "=", "wx", "*", "(", "gt_ctr_x", "-", "ex_ctr_x", ")", "/", "ex_widths", "\n", "targets_dy", "=", "wy", "*", "(", "gt_ctr_y", "-", "ex_ctr_y", ")", "/", "ex_heights", "\n", "targets_dw", "=", "ww", "*", "torch", ".", "log", "(", "gt_widths", "/", "ex_widths", ")", "\n", "targets_dh", "=", "wh", "*", "torch", ".", "log", "(", "gt_heights", "/", "ex_heights", ")", "\n", "\n", "targets", "=", "torch", ".", "stack", "(", "(", "targets_dx", ",", "targets_dy", ",", "targets_dw", ",", "targets_dh", ")", ",", "dim", "=", "1", ")", "\n", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.box_coder.BoxCoder.decode": [[52, 96], ["boxes.to.to.to", "torch.clamp", "torch.clamp", "torch.zeros_like", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to"], ["", "def", "decode", "(", "self", ",", "rel_codes", ",", "boxes", ")", ":", "\n", "        ", "\"\"\"\n        From a set of original boxes and encoded relative box offsets,\n        get the decoded boxes.\n\n        Arguments:\n            rel_codes (Tensor): encoded boxes\n            boxes (Tensor): reference boxes.\n        \"\"\"", "\n", "\n", "boxes", "=", "boxes", ".", "to", "(", "rel_codes", ".", "dtype", ")", "\n", "\n", "TO_REMOVE", "=", "1", "# TODO remove", "\n", "widths", "=", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "TO_REMOVE", "\n", "heights", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "TO_REMOVE", "\n", "ctr_x", "=", "boxes", "[", ":", ",", "0", "]", "+", "0.5", "*", "widths", "\n", "ctr_y", "=", "boxes", "[", ":", ",", "1", "]", "+", "0.5", "*", "heights", "\n", "\n", "wx", ",", "wy", ",", "ww", ",", "wh", "=", "self", ".", "weights", "\n", "dx", "=", "rel_codes", "[", ":", ",", "0", ":", ":", "4", "]", "/", "wx", "\n", "dy", "=", "rel_codes", "[", ":", ",", "1", ":", ":", "4", "]", "/", "wy", "\n", "dw", "=", "rel_codes", "[", ":", ",", "2", ":", ":", "4", "]", "/", "ww", "\n", "dh", "=", "rel_codes", "[", ":", ",", "3", ":", ":", "4", "]", "/", "wh", "\n", "\n", "# Prevent sending too large values into torch.exp()", "\n", "dw", "=", "torch", ".", "clamp", "(", "dw", ",", "max", "=", "self", ".", "bbox_xform_clip", ")", "\n", "dh", "=", "torch", ".", "clamp", "(", "dh", ",", "max", "=", "self", ".", "bbox_xform_clip", ")", "\n", "\n", "pred_ctr_x", "=", "dx", "*", "widths", "[", ":", ",", "None", "]", "+", "ctr_x", "[", ":", ",", "None", "]", "\n", "pred_ctr_y", "=", "dy", "*", "heights", "[", ":", ",", "None", "]", "+", "ctr_y", "[", ":", ",", "None", "]", "\n", "pred_w", "=", "torch", ".", "exp", "(", "dw", ")", "*", "widths", "[", ":", ",", "None", "]", "\n", "pred_h", "=", "torch", ".", "exp", "(", "dh", ")", "*", "heights", "[", ":", ",", "None", "]", "\n", "\n", "pred_boxes", "=", "torch", ".", "zeros_like", "(", "rel_codes", ")", "\n", "# x1", "\n", "pred_boxes", "[", ":", ",", "0", ":", ":", "4", "]", "=", "pred_ctr_x", "-", "0.5", "*", "pred_w", "\n", "# y1", "\n", "pred_boxes", "[", ":", ",", "1", ":", ":", "4", "]", "=", "pred_ctr_y", "-", "0.5", "*", "pred_h", "\n", "# x2 (note: \"- 1\" is correct; don't be fooled by the asymmetry)", "\n", "pred_boxes", "[", ":", ",", "2", ":", ":", "4", "]", "=", "pred_ctr_x", "+", "0.5", "*", "pred_w", "-", "1", "\n", "# y2 (note: \"- 1\" is correct; don't be fooled by the asymmetry)", "\n", "pred_boxes", "[", ":", ",", "3", ":", ":", "4", "]", "=", "pred_ctr_y", "+", "0.5", "*", "pred_h", "-", "1", "\n", "\n", "return", "pred_boxes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.balanced_positive_negative_sampler.BalancedPositiveNegativeSampler.__init__": [[10, 18], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "batch_size_per_image", ",", "positive_fraction", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            batch_size_per_image (int): number of elements to be selected per image\n            positive_fraction (float): percentace of positive elements per batch\n        \"\"\"", "\n", "self", ".", "batch_size_per_image", "=", "batch_size_per_image", "\n", "self", ".", "positive_fraction", "=", "positive_fraction", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.balanced_positive_negative_sampler.BalancedPositiveNegativeSampler.__call__": [[19, 69], ["torch.nonzero().squeeze", "torch.nonzero().squeeze", "int", "min", "min", "torch.zeros_like", "torch.zeros_like", "pos_idx.append", "neg_idx.append", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.numel", "torch.randperm", "torch.randperm", "torch.nonzero", "torch.nonzero", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.numel"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "matched_idxs", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            matched idxs: list of tensors containing -1, 0 or positive values.\n                Each tensor corresponds to a specific image.\n                -1 values are ignored, 0 are considered as negatives and > 0 as\n                positives.\n\n        Returns:\n            pos_idx (list[tensor])\n            neg_idx (list[tensor])\n\n        Returns two lists of binary masks for each image.\n        The first list contains the positive elements that were selected,\n        and the second list the negative example.\n        \"\"\"", "\n", "pos_idx", "=", "[", "]", "\n", "neg_idx", "=", "[", "]", "\n", "for", "matched_idxs_per_image", "in", "matched_idxs", ":", "\n", "            ", "positive", "=", "torch", ".", "nonzero", "(", "matched_idxs_per_image", ">=", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "negative", "=", "torch", ".", "nonzero", "(", "matched_idxs_per_image", "==", "0", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "num_pos", "=", "int", "(", "self", ".", "batch_size_per_image", "*", "self", ".", "positive_fraction", ")", "\n", "# protect against not enough positive examples", "\n", "num_pos", "=", "min", "(", "positive", ".", "numel", "(", ")", ",", "num_pos", ")", "\n", "num_neg", "=", "self", ".", "batch_size_per_image", "-", "num_pos", "\n", "# protect against not enough negative examples", "\n", "num_neg", "=", "min", "(", "negative", ".", "numel", "(", ")", ",", "num_neg", ")", "\n", "\n", "# randomly select positive and negative examples", "\n", "perm1", "=", "torch", ".", "randperm", "(", "positive", ".", "numel", "(", ")", ",", "device", "=", "positive", ".", "device", ")", "[", ":", "num_pos", "]", "\n", "perm2", "=", "torch", ".", "randperm", "(", "negative", ".", "numel", "(", ")", ",", "device", "=", "negative", ".", "device", ")", "[", ":", "num_neg", "]", "\n", "\n", "pos_idx_per_image", "=", "positive", "[", "perm1", "]", "\n", "neg_idx_per_image", "=", "negative", "[", "perm2", "]", "\n", "\n", "# create binary mask from indices", "\n", "pos_idx_per_image_mask", "=", "torch", ".", "zeros_like", "(", "\n", "matched_idxs_per_image", ",", "dtype", "=", "torch", ".", "uint8", "\n", ")", "\n", "neg_idx_per_image_mask", "=", "torch", ".", "zeros_like", "(", "\n", "matched_idxs_per_image", ",", "dtype", "=", "torch", ".", "uint8", "\n", ")", "\n", "pos_idx_per_image_mask", "[", "pos_idx_per_image", "]", "=", "1", "\n", "neg_idx_per_image_mask", "[", "neg_idx_per_image", "]", "=", "1", "\n", "\n", "pos_idx", ".", "append", "(", "pos_idx_per_image_mask", ")", "\n", "neg_idx", ".", "append", "(", "neg_idx_per_image_mask", ")", "\n", "\n", "", "return", "pos_idx", ",", "neg_idx", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.matcher.Matcher.__init__": [[23, 41], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "high_threshold", ",", "low_threshold", ",", "allow_low_quality_matches", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            high_threshold (float): quality values greater than or equal to\n                this value are candidate matches.\n            low_threshold (float): a lower quality threshold used to stratify\n                matches into three levels:\n                1) matches >= high_threshold\n                2) BETWEEN_THRESHOLDS matches in [low_threshold, high_threshold)\n                3) BELOW_LOW_THRESHOLD matches in [0, low_threshold)\n            allow_low_quality_matches (bool): if True, produce additional matches\n                for predictions that have only low-quality match candidates. See\n                set_low_quality_matches_ for more details.\n        \"\"\"", "\n", "assert", "low_threshold", "<=", "high_threshold", "\n", "self", ".", "high_threshold", "=", "high_threshold", "\n", "self", ".", "low_threshold", "=", "low_threshold", "\n", "self", ".", "allow_low_quality_matches", "=", "allow_low_quality_matches", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.matcher.Matcher.__call__": [[42, 82], ["match_quality_matrix.max", "match_quality_matrix.numel", "matches.clone", "matcher.Matcher.set_low_quality_matches_", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.matcher.Matcher.set_low_quality_matches_"], ["", "def", "__call__", "(", "self", ",", "match_quality_matrix", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            match_quality_matrix (Tensor[float]): an MxN tensor, containing the\n            pairwise quality between M ground-truth elements and N predicted elements.\n\n        Returns:\n            matches (Tensor[int64]): an N tensor where N[i] is a matched gt in\n            [0, M - 1] or a negative value indicating that prediction i could not\n            be matched.\n        \"\"\"", "\n", "if", "match_quality_matrix", ".", "numel", "(", ")", "==", "0", ":", "\n", "# empty targets or proposals not supported during training", "\n", "            ", "if", "match_quality_matrix", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"No ground-truth boxes available for one of the images \"", "\n", "\"during training\"", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"No proposal boxes available for one of the images \"", "\n", "\"during training\"", ")", "\n", "\n", "# match_quality_matrix is M (gt) x N (predicted)", "\n", "# Max over gt elements (dim 0) to find best gt candidate for each prediction", "\n", "", "", "matched_vals", ",", "matches", "=", "match_quality_matrix", ".", "max", "(", "dim", "=", "0", ")", "\n", "if", "self", ".", "allow_low_quality_matches", ":", "\n", "            ", "all_matches", "=", "matches", ".", "clone", "(", ")", "\n", "\n", "# Assign candidate matches with low quality to negative (unassigned) values", "\n", "", "below_low_threshold", "=", "matched_vals", "<", "self", ".", "low_threshold", "\n", "between_thresholds", "=", "(", "matched_vals", ">=", "self", ".", "low_threshold", ")", "&", "(", "\n", "matched_vals", "<", "self", ".", "high_threshold", "\n", ")", "\n", "matches", "[", "below_low_threshold", "]", "=", "Matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "matches", "[", "between_thresholds", "]", "=", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "\n", "if", "self", ".", "allow_low_quality_matches", ":", "\n", "            ", "self", ".", "set_low_quality_matches_", "(", "matches", ",", "all_matches", ",", "match_quality_matrix", ")", "\n", "\n", "", "return", "matches", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.matcher.Matcher.set_low_quality_matches_": [[83, 113], ["match_quality_matrix.max", "torch.nonzero"], "methods", ["None"], ["", "def", "set_low_quality_matches_", "(", "self", ",", "matches", ",", "all_matches", ",", "match_quality_matrix", ")", ":", "\n", "        ", "\"\"\"\n        Produce additional matches for predictions that have only low-quality matches.\n        Specifically, for each ground-truth find the set of predictions that have\n        maximum overlap with it (including ties); for each prediction in that set, if\n        it is unmatched, then match it to the ground-truth with which it has the highest\n        quality value.\n        \"\"\"", "\n", "# For each gt, find the prediction with which it has highest quality", "\n", "highest_quality_foreach_gt", ",", "_", "=", "match_quality_matrix", ".", "max", "(", "dim", "=", "1", ")", "\n", "# Find highest quality match available, even if it is low, including ties", "\n", "gt_pred_pairs_of_highest_quality", "=", "torch", ".", "nonzero", "(", "\n", "match_quality_matrix", "==", "highest_quality_foreach_gt", "[", ":", ",", "None", "]", "\n", ")", "\n", "# Example gt_pred_pairs_of_highest_quality:", "\n", "#   tensor([[    0, 39796],", "\n", "#           [    1, 32055],", "\n", "#           [    1, 32070],", "\n", "#           [    2, 39190],", "\n", "#           [    2, 40255],", "\n", "#           [    3, 40390],", "\n", "#           [    3, 41455],", "\n", "#           [    4, 45470],", "\n", "#           [    5, 45325],", "\n", "#           [    5, 46390]])", "\n", "# Each row is a (gt index, prediction index)", "\n", "# Note how gt items 1, 2, 3, and 5 each have two ties", "\n", "\n", "pred_inds_to_update", "=", "gt_pred_pairs_of_highest_quality", "[", ":", ",", "1", "]", "\n", "matches", "[", "pred_inds_to_update", "]", "=", "all_matches", "[", "pred_inds_to_update", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.poolers.LevelMapper.__init__": [[17, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "k_min", ",", "k_max", ",", "canonical_scale", "=", "224", ",", "canonical_level", "=", "4", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            k_min (int)\n            k_max (int)\n            canonical_scale (int)\n            canonical_level (int)\n            eps (float)\n        \"\"\"", "\n", "self", ".", "k_min", "=", "k_min", "\n", "self", ".", "k_max", "=", "k_max", "\n", "self", ".", "s0", "=", "canonical_scale", "\n", "self", ".", "lvl0", "=", "canonical_level", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.poolers.LevelMapper.__call__": [[32, 44], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "utils.cat", "torch.clamp.to", "torch.clamp.to", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "boxlist.area"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.area"], ["", "def", "__call__", "(", "self", ",", "boxlists", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            boxlists (list[BoxList])\n        \"\"\"", "\n", "# Compute level ids", "\n", "s", "=", "torch", ".", "sqrt", "(", "cat", "(", "[", "boxlist", ".", "area", "(", ")", "for", "boxlist", "in", "boxlists", "]", ")", ")", "\n", "\n", "# Eqn.(1) in FPN paper", "\n", "target_lvls", "=", "torch", ".", "floor", "(", "self", ".", "lvl0", "+", "torch", ".", "log2", "(", "s", "/", "self", ".", "s0", "+", "self", ".", "eps", ")", ")", "\n", "target_lvls", "=", "torch", ".", "clamp", "(", "target_lvls", ",", "min", "=", "self", ".", "k_min", ",", "max", "=", "self", ".", "k_max", ")", "\n", "return", "target_lvls", ".", "to", "(", "torch", ".", "int64", ")", "-", "self", ".", "k_min", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.poolers.LevelMapper.get_random": [[45, 49], ["None"], "methods", ["None"], ["", "def", "get_random", "(", "self", ",", "level", ")", ":", "\n", "        ", "\"\"\" Generate a random roi for target level\n        \"\"\"", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "torch", ".", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.poolers.Pooler.__init__": [[61, 86], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "poolers.LevelMapper", "poolers.append", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "torch.log2().item", "maskrcnn_benchmark.layers.ROIAlign", "maskrcnn_benchmark.layers.DCNPooling", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "output_size", ",", "scales", ",", "sampling_ratio", ",", "\n", "deformable", "=", "False", ",", "output_channel", "=", "256", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            output_size (list[tuple[int]] or list[int]): output size for the pooled region\n            scales (list[float]): scales for each Pooler\n            sampling_ratio (int): sampling ratio for ROIAlign\n        \"\"\"", "\n", "super", "(", "Pooler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "poolers", "=", "[", "]", "\n", "for", "scale", "in", "scales", ":", "\n", "            ", "poolers", ".", "append", "(", "\n", "ROIAlign", "(", "\n", "output_size", ",", "spatial_scale", "=", "scale", ",", "sampling_ratio", "=", "sampling_ratio", "\n", ")", "if", "not", "deformable", "else", "\n", "DCNPooling", "(", "spatial_scale", "=", "scale", ",", "pooled_size", "=", "output_size", ",", "no_trans", "=", "False", ",", "\n", "group_size", "=", "1", ",", "trans_std", "=", "0.1", ",", "output_dim", "=", "output_channel", ")", "\n", ")", "\n", "", "self", ".", "poolers", "=", "nn", ".", "ModuleList", "(", "poolers", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "# get the levels in the feature map by leveraging the fact that the network always", "\n", "# downsamples by a factor of 2 at each level.", "\n", "lvl_min", "=", "-", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "scales", "[", "0", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ")", ".", "item", "(", ")", "\n", "lvl_max", "=", "-", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "scales", "[", "-", "1", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ")", ".", "item", "(", ")", "\n", "self", ".", "map_levels", "=", "LevelMapper", "(", "lvl_min", ",", "lvl_max", ",", "canonical_scale", "=", "160", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.poolers.Pooler.convert_to_roi_format": [[87, 99], ["utils.cat", "utils.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.full", "torch.full", "torch.full", "torch.full", "enumerate", "len"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat"], ["", "def", "convert_to_roi_format", "(", "self", ",", "boxes", ")", ":", "\n", "        ", "concat_boxes", "=", "cat", "(", "[", "b", ".", "bbox", "for", "b", "in", "boxes", "]", ",", "dim", "=", "0", ")", "\n", "device", ",", "dtype", "=", "concat_boxes", ".", "device", ",", "concat_boxes", ".", "dtype", "\n", "ids", "=", "cat", "(", "\n", "[", "\n", "torch", ".", "full", "(", "(", "len", "(", "b", ")", ",", "1", ")", ",", "i", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "boxes", ")", "\n", "]", ",", "\n", "dim", "=", "0", ",", "\n", ")", "\n", "rois", "=", "torch", ".", "cat", "(", "[", "ids", ",", "concat_boxes", "]", ",", "dim", "=", "1", ")", "\n", "return", "rois", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.poolers.Pooler.forward": [[100, 140], ["len", "poolers.Pooler.convert_to_roi_format", "poolers.Pooler.map_levels", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "zip", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.new_tensor", "torch.nonzero().squeeze.new_tensor", "pooler", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "pooler"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.poolers.Pooler.convert_to_roi_format"], ["", "def", "forward", "(", "self", ",", "x", ",", "boxes", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            x (list[Tensor]): feature maps for each level\n            boxes (list[BoxList]): boxes to be used to perform the pooling operation.\n        Returns:\n            result (Tensor)\n        \"\"\"", "\n", "num_levels", "=", "len", "(", "self", ".", "poolers", ")", "\n", "rois", "=", "self", ".", "convert_to_roi_format", "(", "boxes", ")", "\n", "if", "num_levels", "==", "1", ":", "\n", "            ", "return", "self", ".", "poolers", "[", "0", "]", "(", "x", "[", "0", "]", ",", "rois", ")", "\n", "\n", "", "levels", "=", "self", ".", "map_levels", "(", "boxes", ")", "\n", "\n", "num_rois", "=", "len", "(", "rois", ")", "\n", "num_channels", "=", "x", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "output_size", "=", "self", ".", "output_size", "[", "0", "]", "\n", "\n", "dtype", ",", "device", "=", "x", "[", "0", "]", ".", "dtype", ",", "x", "[", "0", "]", ".", "device", "\n", "result", "=", "torch", ".", "zeros", "(", "\n", "(", "num_rois", ",", "num_channels", ",", "output_size", ",", "output_size", ")", ",", "\n", "dtype", "=", "dtype", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "for", "level", ",", "(", "per_level_feature", ",", "pooler", ")", "in", "enumerate", "(", "zip", "(", "x", ",", "self", ".", "poolers", ")", ")", ":", "\n", "            ", "idx_in_level", "=", "torch", ".", "nonzero", "(", "levels", "==", "level", ")", ".", "squeeze", "(", "1", ")", "\n", "rois_per_level", "=", "rois", "[", "idx_in_level", "]", "\n", "if", "idx_in_level", ".", "numel", "(", ")", "==", "0", ":", "\n", "                ", "if", "num_rois", "==", "0", ":", "\n", "                    ", "continue", "\n", "# create a roi and do one empty forward pass", "\n", "", "new_level", "=", "idx_in_level", ".", "new_tensor", "(", "(", "0", ",", ")", ")", "\n", "new_rois", "=", "rois", "[", "new_level", "]", "\n", "result", "[", "new_level", "]", "=", "result", "[", "new_level", "]", "+", "pooler", "(", "per_level_feature", ",", "new_rois", ")", "*", "0.0", "\n", "", "else", ":", "\n", "                ", "result", "[", "idx_in_level", "]", "=", "pooler", "(", "per_level_feature", ",", "rois_per_level", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.poolers.make_pooler": [[142, 152], ["poolers.Pooler"], "function", ["None"], ["", "", "def", "make_pooler", "(", "cfg", ",", "head_name", ")", ":", "\n", "    ", "resolution", "=", "cfg", ".", "MODEL", "[", "head_name", "]", ".", "POOLER_RESOLUTION", "\n", "scales", "=", "cfg", ".", "MODEL", "[", "head_name", "]", ".", "POOLER_SCALES", "\n", "sampling_ratio", "=", "cfg", ".", "MODEL", "[", "head_name", "]", ".", "POOLER_SAMPLING_RATIO", "\n", "pooler", "=", "Pooler", "(", "\n", "output_size", "=", "(", "resolution", ",", "resolution", ")", ",", "\n", "scales", "=", "scales", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", ")", "\n", "return", "pooler", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat": [[9, 17], ["isinstance", "torch.cat", "len"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat"], ["import", "copy", "\n", "\n", "from", "maskrcnn_benchmark", ".", "config", "import", "cfg", "as", "g_cfg", "\n", "\n", "\n", "def", "get_config_root_path", "(", ")", ":", "\n", "    ", "return", "env_tests", ".", "get_config_root_path", "(", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.make_layers.get_group_gn": [[14, 29], ["None"], "function", ["None"], ["def", "get_group_gn", "(", "dim", ",", "dim_per_gp", ",", "num_groups", ")", ":", "\n", "    ", "\"\"\"get number of groups used by GroupNorm, based on number of channels.\"\"\"", "\n", "assert", "dim_per_gp", "==", "-", "1", "or", "num_groups", "==", "-", "1", ",", "\"GroupNorm: can only specify G or C/G.\"", "\n", "\n", "if", "dim_per_gp", ">", "0", ":", "\n", "        ", "assert", "dim", "%", "dim_per_gp", "==", "0", ",", "\"dim: {}, dim_per_gp: {}\"", ".", "format", "(", "dim", ",", "dim_per_gp", ")", "\n", "group_gn", "=", "dim", "//", "dim_per_gp", "\n", "", "else", ":", "\n", "        ", "assert", "dim", "%", "num_groups", "==", "0", ",", "\"dim: {}, num_groups: {}\"", ".", "format", "(", "dim", ",", "num_groups", ")", "\n", "group_gn", "=", "num_groups", "\n", "\n", "", "return", "group_gn", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.make_layers.group_norm": [[31, 41], ["torch.nn.GroupNorm", "make_layers.get_group_gn"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.make_layers.get_group_gn"], ["", "def", "group_norm", "(", "out_channels", ",", "affine", "=", "True", ",", "divisor", "=", "1", ")", ":", "\n", "    ", "out_channels", "=", "out_channels", "//", "divisor", "\n", "dim_per_gp", "=", "cfg", ".", "MODEL", ".", "GROUP_NORM", ".", "DIM_PER_GP", "//", "divisor", "\n", "num_groups", "=", "cfg", ".", "MODEL", ".", "GROUP_NORM", ".", "NUM_GROUPS", "//", "divisor", "\n", "eps", "=", "cfg", ".", "MODEL", ".", "GROUP_NORM", ".", "EPSILON", "# default: 1e-5", "\n", "return", "torch", ".", "nn", ".", "GroupNorm", "(", "\n", "get_group_gn", "(", "out_channels", ",", "dim_per_gp", ",", "num_groups", ")", ",", "\n", "out_channels", ",", "\n", "eps", ",", "\n", "affine", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.make_layers.make_conv3x3": [[44, 78], ["maskrcnn_benchmark.layers.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "module.append", "module.append", "len", "torch.nn.Sequential", "make_layers.group_norm", "torch.nn.ReLU"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.make_layers.group_norm"], ["", "def", "make_conv3x3", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "dilation", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "use_gn", "=", "False", ",", "\n", "use_relu", "=", "False", ",", "\n", "kaiming_init", "=", "True", "\n", ")", ":", "\n", "    ", "conv", "=", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", "if", "use_gn", "else", "True", "\n", ")", "\n", "if", "kaiming_init", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "conv", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", "\n", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "conv", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "", "if", "not", "use_gn", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "conv", ".", "bias", ",", "0", ")", "\n", "", "module", "=", "[", "conv", ",", "]", "\n", "if", "use_gn", ":", "\n", "        ", "module", ".", "append", "(", "group_norm", "(", "out_channels", ")", ")", "\n", "", "if", "use_relu", ":", "\n", "        ", "module", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "if", "len", "(", "module", ")", ">", "1", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "*", "module", ")", "\n", "", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.make_layers.make_fc": [[80, 93], ["torch.nn.Linear", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_", "torch.nn.Linear", "torch.nn.init.kaiming_uniform_", "torch.nn.Sequential", "make_layers.group_norm"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.make_layers.group_norm"], ["", "def", "make_fc", "(", "dim_in", ",", "hidden_dim", ",", "use_gn", "=", "False", ")", ":", "\n", "    ", "'''\n        Caffe2 implementation uses XavierFill, which in fact\n        corresponds to kaiming_uniform_ in PyTorch\n    '''", "\n", "if", "use_gn", ":", "\n", "        ", "fc", "=", "nn", ".", "Linear", "(", "dim_in", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "fc", ".", "weight", ",", "a", "=", "1", ")", "\n", "return", "nn", ".", "Sequential", "(", "fc", ",", "group_norm", "(", "hidden_dim", ")", ")", "\n", "", "fc", "=", "nn", ".", "Linear", "(", "dim_in", ",", "hidden_dim", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "fc", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "fc", ".", "bias", ",", "0", ")", "\n", "return", "fc", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.make_layers.conv_with_kaiming_uniform": [[95, 127], ["conv_func", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_", "module.append", "module.append", "len", "torch.nn.Sequential", "make_layers.group_norm", "torch.nn.ReLU"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.make_layers.group_norm"], ["", "def", "conv_with_kaiming_uniform", "(", "use_gn", "=", "False", ",", "use_relu", "=", "False", ",", "use_deformable", "=", "False", ")", ":", "\n", "    ", "def", "make_conv", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", "\n", ")", ":", "\n", "        ", "if", "use_deformable", ":", "\n", "            ", "conv_func", "=", "DCN", "\n", "", "else", ":", "\n", "            ", "conv_func", "=", "Conv2d", "\n", "", "conv", "=", "conv_func", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", "*", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", "if", "use_gn", "else", "True", "\n", ")", "\n", "# Caffe2 implementation uses XavierFill, which in fact", "\n", "# corresponds to kaiming_uniform_ in PyTorch", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "conv", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "use_gn", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "conv", ".", "bias", ",", "0", ")", "\n", "", "module", "=", "[", "conv", ",", "]", "\n", "if", "use_gn", ":", "\n", "            ", "module", ".", "append", "(", "group_norm", "(", "out_channels", ")", ")", "\n", "", "if", "use_relu", ":", "\n", "            ", "module", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "if", "len", "(", "module", ")", ">", "1", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "*", "module", ")", "\n", "", "return", "conv", "\n", "\n", "", "return", "make_conv", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.rpn.RPNHeadConvRegressor.__init__": [[20, 36], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ",", "num_anchors", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            cfg              : config\n            in_channels (int): number of channels of the input feature\n            num_anchors (int): number of anchors to be predicted\n        \"\"\"", "\n", "super", "(", "RPNHeadConvRegressor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cls_logits", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "num_anchors", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "num_anchors", "*", "4", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", "\n", ")", "\n", "\n", "for", "l", "in", "[", "self", ".", "cls_logits", ",", "self", ".", "bbox_pred", "]", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.rpn.RPNHeadConvRegressor.forward": [[37, 43], ["isinstance", "rpn.RPNHeadConvRegressor.cls_logits", "rpn.RPNHeadConvRegressor.bbox_pred"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", "\n", "logits", "=", "[", "self", ".", "cls_logits", "(", "y", ")", "for", "y", "in", "x", "]", "\n", "bbox_reg", "=", "[", "self", ".", "bbox_pred", "(", "y", ")", "for", "y", "in", "x", "]", "\n", "\n", "return", "logits", ",", "bbox_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.rpn.RPNHeadFeatureSingleConv.__init__": [[50, 66], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            cfg              : config\n            in_channels (int): number of channels of the input feature\n        \"\"\"", "\n", "super", "(", "RPNHeadFeatureSingleConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", "\n", ")", "\n", "\n", "for", "l", "in", "[", "self", ".", "conv", "]", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n", "", "self", ".", "out_channels", "=", "in_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.rpn.RPNHeadFeatureSingleConv.forward": [[67, 72], ["isinstance", "torch.relu", "torch.relu", "rpn.RPNHeadFeatureSingleConv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", "\n", "x", "=", "[", "F", ".", "relu", "(", "self", ".", "conv", "(", "z", ")", ")", "for", "z", "in", "x", "]", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.rpn.RPNHead.__init__": [[80, 99], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ",", "num_anchors", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            cfg              : config\n            in_channels (int): number of channels of the input feature\n            num_anchors (int): number of anchors to be predicted\n        \"\"\"", "\n", "super", "(", "RPNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", "\n", ")", "\n", "self", ".", "cls_logits", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "num_anchors", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "num_anchors", "*", "4", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", "\n", ")", "\n", "\n", "for", "l", "in", "[", "self", ".", "conv", ",", "self", ".", "cls_logits", ",", "self", ".", "bbox_pred", "]", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.rpn.RPNHead.forward": [[100, 108], ["torch.relu", "torch.relu", "logits.append", "bbox_reg.append", "rpn.RPNHead.conv", "rpn.RPNHead.cls_logits", "rpn.RPNHead.bbox_pred"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "logits", "=", "[", "]", "\n", "bbox_reg", "=", "[", "]", "\n", "for", "feature", "in", "x", ":", "\n", "            ", "t", "=", "F", ".", "relu", "(", "self", ".", "conv", "(", "feature", ")", ")", "\n", "logits", ".", "append", "(", "self", ".", "cls_logits", "(", "t", ")", ")", "\n", "bbox_reg", ".", "append", "(", "self", ".", "bbox_pred", "(", "t", ")", ")", "\n", "", "return", "logits", ",", "bbox_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.rpn.RPNModule.__init__": [[116, 140], ["super().__init__", "cfg.clone", "anchor_generator.make_anchor_generator.make_anchor_generator", "rpn_head", "maskrcnn_benchmark.modeling.box_coder.BoxCoder", "inference.make_rpn_postprocessor", "inference.make_rpn_postprocessor", "loss.make_rpn_loss_evaluator", "anchor_generator.make_anchor_generator.make_anchor_generator.num_anchors_per_location"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.make_anchor_generator", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.inference.make_rpn_postprocessor", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.inference.make_rpn_postprocessor", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.loss.make_rpn_loss_evaluator", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.AnchorGenerator.num_anchors_per_location"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "RPNModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "\n", "anchor_generator", "=", "make_anchor_generator", "(", "cfg", ")", "\n", "\n", "rpn_head", "=", "registry", ".", "RPN_HEADS", "[", "cfg", ".", "MODEL", ".", "RPN", ".", "RPN_HEAD", "]", "\n", "head", "=", "rpn_head", "(", "\n", "cfg", ",", "in_channels", ",", "anchor_generator", ".", "num_anchors_per_location", "(", ")", "[", "0", "]", "\n", ")", "\n", "\n", "rpn_box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "\n", "box_selector_train", "=", "make_rpn_postprocessor", "(", "cfg", ",", "rpn_box_coder", ",", "is_train", "=", "True", ")", "\n", "box_selector_test", "=", "make_rpn_postprocessor", "(", "cfg", ",", "rpn_box_coder", ",", "is_train", "=", "False", ")", "\n", "\n", "loss_evaluator", "=", "make_rpn_loss_evaluator", "(", "cfg", ",", "rpn_box_coder", ")", "\n", "\n", "self", ".", "anchor_generator", "=", "anchor_generator", "\n", "self", ".", "head", "=", "head", "\n", "self", ".", "box_selector_train", "=", "box_selector_train", "\n", "self", ".", "box_selector_test", "=", "box_selector_test", "\n", "self", ".", "loss_evaluator", "=", "loss_evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.rpn.RPNModule.forward": [[141, 164], ["rpn.RPNModule.head", "rpn.RPNModule.anchor_generator", "rpn.RPNModule._forward_train", "rpn.RPNModule._forward_test"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.fcos.FCOSModule._forward_train", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.fcos.FCOSModule._forward_test"], ["", "def", "forward", "(", "self", ",", "images", ",", "features", ",", "targets", "=", "None", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            images (ImageList): images for which we want to compute the predictions\n            features (list[Tensor]): features computed from the images that are\n                used for computing the predictions. Each tensor in the list\n                correspond to different feature levels\n            targets (list[BoxList): ground-truth boxes present in the image (optional)\n\n        Returns:\n            boxes (list[BoxList]): the predicted boxes from the RPN, one BoxList per\n                image.\n            losses (dict[Tensor]): the losses for the model during training. During\n                testing, it is an empty dict.\n        \"\"\"", "\n", "objectness", ",", "rpn_box_regression", "=", "self", ".", "head", "(", "features", ")", "\n", "anchors", "=", "self", ".", "anchor_generator", "(", "images", ",", "features", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_forward_train", "(", "anchors", ",", "objectness", ",", "\n", "rpn_box_regression", ",", "targets", ",", "prefix", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_forward_test", "(", "anchors", ",", "objectness", ",", "rpn_box_regression", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.rpn.RPNModule._forward_train": [[165, 188], ["rpn.RPNModule.loss_evaluator", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "rpn.RPNModule.box_selector_train"], "methods", ["None"], ["", "", "def", "_forward_train", "(", "self", ",", "anchors", ",", "objectness", ",", "rpn_box_regression", ",", "\n", "targets", ",", "prefix", ")", ":", "\n", "        ", "if", "self", ".", "cfg", ".", "MODEL", ".", "RPN_ONLY", ":", "\n", "# When training an RPN-only model, the loss is determined by the", "\n", "# predicted objectness and rpn_box_regression values and there is", "\n", "# no need to transform the anchors into predicted boxes; this is an", "\n", "# optimization that avoids the unnecessary transformation.", "\n", "            ", "boxes", "=", "anchors", "\n", "", "else", ":", "\n", "# For end-to-end models, anchors must be transformed into boxes and", "\n", "# sampled into a training batch.", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "boxes", "=", "self", ".", "box_selector_train", "(", "\n", "anchors", ",", "objectness", ",", "rpn_box_regression", ",", "targets", "\n", ")", "\n", "", "", "loss_objectness", ",", "loss_rpn_box_reg", "=", "self", ".", "loss_evaluator", "(", "\n", "anchors", ",", "objectness", ",", "rpn_box_regression", ",", "targets", "\n", ")", "\n", "losses", "=", "{", "\n", "prefix", "+", "\"loss_objectness\"", ":", "loss_objectness", ",", "\n", "prefix", "+", "\"loss_rpn_box_reg\"", ":", "loss_rpn_box_reg", ",", "\n", "}", "\n", "return", "boxes", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.rpn.RPNModule._forward_test": [[189, 201], ["rpn.RPNModule.box_selector_test", "box.get_field().sort", "zip", "box.get_field"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["", "def", "_forward_test", "(", "self", ",", "anchors", ",", "objectness", ",", "rpn_box_regression", ")", ":", "\n", "        ", "boxes", "=", "self", ".", "box_selector_test", "(", "anchors", ",", "objectness", ",", "rpn_box_regression", ")", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "RPN_ONLY", ":", "\n", "# For end-to-end models, the RPN proposals are an intermediate state", "\n", "# and don't bother to sort them in decreasing score order. For RPN-only", "\n", "# models, the proposals are the final output and we return them in", "\n", "# high-to-low confidence order.", "\n", "            ", "inds", "=", "[", "\n", "box", ".", "get_field", "(", "\"objectness\"", ")", ".", "sort", "(", "descending", "=", "True", ")", "[", "1", "]", "for", "box", "in", "boxes", "\n", "]", "\n", "boxes", "=", "[", "box", "[", "ind", "]", "for", "box", ",", "ind", "in", "zip", "(", "boxes", ",", "inds", ")", "]", "\n", "", "return", "boxes", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.rpn.build_rpn": [[203, 213], ["rpn.RPNModule", "maskrcnn_benchmark.modeling.rpn.fcos.fcos.build_fcos", "maskrcnn_benchmark.modeling.rpn.retinanet.retinanet.build_retinanet"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.fcos.build_fcos", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.retinanet.build_retinanet"], ["", "", "def", "build_rpn", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "\"\"\"\n    This gives the gist of it. Not super important because it doesn't change as much\n    \"\"\"", "\n", "if", "cfg", ".", "MODEL", ".", "FCOS_ON", ":", "\n", "        ", "return", "build_fcos", "(", "cfg", ",", "in_channels", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "RETINANET_ON", ":", "\n", "        ", "return", "build_retinanet", "(", "cfg", ",", "in_channels", ")", "\n", "\n", "", "return", "RPNModule", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.__init__": [[16, 20], ["torch.nn.Module.__init__", "anchor_generator.BufferList.extend"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.extend"], ["def", "__init__", "(", "self", ",", "buffers", "=", "None", ")", ":", "\n", "        ", "super", "(", "BufferList", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "buffers", "is", "not", "None", ":", "\n", "            ", "self", ".", "extend", "(", "buffers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.extend": [[21, 26], ["len", "enumerate", "anchor_generator.BufferList.register_buffer", "str"], "methods", ["None"], ["", "", "def", "extend", "(", "self", ",", "buffers", ")", ":", "\n", "        ", "offset", "=", "len", "(", "self", ")", "\n", "for", "i", ",", "buffer", "in", "enumerate", "(", "buffers", ")", ":", "\n", "            ", "self", ".", "register_buffer", "(", "str", "(", "offset", "+", "i", ")", ",", "buffer", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.__len__": [[27, 29], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_buffers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.__iter__": [[30, 32], ["iter", "anchor_generator.BufferList._buffers.values"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "_buffers", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.AnchorGenerator.__init__": [[40, 69], ["torch.nn.Module.__init__", "anchor_generator.BufferList", "len", "generate_anchors().float", "len", "len", "RuntimeError", "generate_anchors().float", "zip", "anchor_generator.generate_anchors", "anchor_generator.generate_anchors", "isinstance"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.generate_anchors", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.generate_anchors"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sizes", "=", "(", "128", ",", "256", ",", "512", ")", ",", "\n", "aspect_ratios", "=", "(", "0.5", ",", "1.0", ",", "2.0", ")", ",", "\n", "anchor_strides", "=", "(", "8", ",", "16", ",", "32", ")", ",", "\n", "straddle_thresh", "=", "0", ",", "\n", ")", ":", "\n", "        ", "super", "(", "AnchorGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "len", "(", "anchor_strides", ")", "==", "1", ":", "\n", "            ", "anchor_stride", "=", "anchor_strides", "[", "0", "]", "\n", "cell_anchors", "=", "[", "\n", "generate_anchors", "(", "anchor_stride", ",", "sizes", ",", "aspect_ratios", ")", ".", "float", "(", ")", "\n", "]", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "anchor_strides", ")", "!=", "len", "(", "sizes", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"FPN should have #anchor_strides == #sizes\"", ")", "\n", "\n", "", "cell_anchors", "=", "[", "\n", "generate_anchors", "(", "\n", "anchor_stride", ",", "\n", "size", "if", "isinstance", "(", "size", ",", "(", "tuple", ",", "list", ")", ")", "else", "(", "size", ",", ")", ",", "\n", "aspect_ratios", "\n", ")", ".", "float", "(", ")", "\n", "for", "anchor_stride", ",", "size", "in", "zip", "(", "anchor_strides", ",", "sizes", ")", "\n", "]", "\n", "", "self", ".", "strides", "=", "anchor_strides", "\n", "self", ".", "cell_anchors", "=", "BufferList", "(", "cell_anchors", ")", "\n", "self", ".", "straddle_thresh", "=", "straddle_thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.AnchorGenerator.num_anchors_per_location": [[70, 72], ["len"], "methods", ["None"], ["", "def", "num_anchors_per_location", "(", "self", ")", ":", "\n", "        ", "return", "[", "len", "(", "cell_anchors", ")", "for", "cell_anchors", "in", "self", ".", "cell_anchors", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.AnchorGenerator.grid_anchors": [[73, 96], ["zip", "torch.arange", "torch.arange", "torch.meshgrid", "shift_x.reshape.reshape.reshape", "shift_y.reshape.reshape.reshape", "torch.stack", "anchors.append", "torch.stack.view", "base_anchors.view"], "methods", ["None"], ["", "def", "grid_anchors", "(", "self", ",", "grid_sizes", ")", ":", "\n", "        ", "anchors", "=", "[", "]", "\n", "for", "size", ",", "stride", ",", "base_anchors", "in", "zip", "(", "\n", "grid_sizes", ",", "self", ".", "strides", ",", "self", ".", "cell_anchors", "\n", ")", ":", "\n", "            ", "grid_height", ",", "grid_width", "=", "size", "\n", "device", "=", "base_anchors", ".", "device", "\n", "shifts_x", "=", "torch", ".", "arange", "(", "\n", "0", ",", "grid_width", "*", "stride", ",", "step", "=", "stride", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n", "shifts_y", "=", "torch", ".", "arange", "(", "\n", "0", ",", "grid_height", "*", "stride", ",", "step", "=", "stride", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n", "shift_y", ",", "shift_x", "=", "torch", ".", "meshgrid", "(", "shifts_y", ",", "shifts_x", ")", "\n", "shift_x", "=", "shift_x", ".", "reshape", "(", "-", "1", ")", "\n", "shift_y", "=", "shift_y", ".", "reshape", "(", "-", "1", ")", "\n", "shifts", "=", "torch", ".", "stack", "(", "(", "shift_x", ",", "shift_y", ",", "shift_x", ",", "shift_y", ")", ",", "dim", "=", "1", ")", "\n", "\n", "anchors", ".", "append", "(", "\n", "(", "shifts", ".", "view", "(", "-", "1", ",", "1", ",", "4", ")", "+", "base_anchors", ".", "view", "(", "1", ",", "-", "1", ",", "4", ")", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.AnchorGenerator.add_visibility_to": [[97, 111], ["boxlist.add_field", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field"], ["", "def", "add_visibility_to", "(", "self", ",", "boxlist", ")", ":", "\n", "        ", "image_width", ",", "image_height", "=", "boxlist", ".", "size", "\n", "anchors", "=", "boxlist", ".", "bbox", "\n", "if", "self", ".", "straddle_thresh", ">=", "0", ":", "\n", "            ", "inds_inside", "=", "(", "\n", "(", "anchors", "[", "...", ",", "0", "]", ">=", "-", "self", ".", "straddle_thresh", ")", "\n", "&", "(", "anchors", "[", "...", ",", "1", "]", ">=", "-", "self", ".", "straddle_thresh", ")", "\n", "&", "(", "anchors", "[", "...", ",", "2", "]", "<", "image_width", "+", "self", ".", "straddle_thresh", ")", "\n", "&", "(", "anchors", "[", "...", ",", "3", "]", "<", "image_height", "+", "self", ".", "straddle_thresh", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "anchors", ".", "device", "\n", "inds_inside", "=", "torch", ".", "ones", "(", "anchors", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "device", ")", "\n", "", "boxlist", ".", "add_field", "(", "\"visibility\"", ",", "inds_inside", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.AnchorGenerator.forward": [[112, 126], ["anchor_generator.AnchorGenerator.grid_anchors", "enumerate", "anchors.append", "maskrcnn_benchmark.structures.bounding_box.BoxList", "anchor_generator.AnchorGenerator.add_visibility_to", "anchors_in_image.append"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.AnchorGenerator.grid_anchors", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.AnchorGenerator.add_visibility_to"], ["", "def", "forward", "(", "self", ",", "image_list", ",", "feature_maps", ")", ":", "\n", "        ", "grid_sizes", "=", "[", "feature_map", ".", "shape", "[", "-", "2", ":", "]", "for", "feature_map", "in", "feature_maps", "]", "\n", "anchors_over_all_feature_maps", "=", "self", ".", "grid_anchors", "(", "grid_sizes", ")", "\n", "anchors", "=", "[", "]", "\n", "for", "i", ",", "(", "image_height", ",", "image_width", ")", "in", "enumerate", "(", "image_list", ".", "image_sizes", ")", ":", "\n", "            ", "anchors_in_image", "=", "[", "]", "\n", "for", "anchors_per_feature_map", "in", "anchors_over_all_feature_maps", ":", "\n", "                ", "boxlist", "=", "BoxList", "(", "\n", "anchors_per_feature_map", ",", "(", "image_width", ",", "image_height", ")", ",", "mode", "=", "\"xyxy\"", "\n", ")", "\n", "self", ".", "add_visibility_to", "(", "boxlist", ")", "\n", "anchors_in_image", ".", "append", "(", "boxlist", ")", "\n", "", "anchors", ".", "append", "(", "anchors_in_image", ")", "\n", "", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.make_anchor_generator": [[128, 144], ["anchor_generator.AnchorGenerator", "len", "len", "len"], "function", ["None"], ["", "", "def", "make_anchor_generator", "(", "config", ")", ":", "\n", "    ", "anchor_sizes", "=", "config", ".", "MODEL", ".", "RPN", ".", "ANCHOR_SIZES", "\n", "aspect_ratios", "=", "config", ".", "MODEL", ".", "RPN", ".", "ASPECT_RATIOS", "\n", "anchor_stride", "=", "config", ".", "MODEL", ".", "RPN", ".", "ANCHOR_STRIDE", "\n", "straddle_thresh", "=", "config", ".", "MODEL", ".", "RPN", ".", "STRADDLE_THRESH", "\n", "\n", "if", "config", ".", "MODEL", ".", "RPN", ".", "USE_FPN", ":", "\n", "        ", "assert", "len", "(", "anchor_stride", ")", "==", "len", "(", "\n", "anchor_sizes", "\n", ")", ",", "\"FPN should have len(ANCHOR_STRIDE) == len(ANCHOR_SIZES)\"", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "anchor_stride", ")", "==", "1", ",", "\"Non-FPN should have a single ANCHOR_STRIDE\"", "\n", "", "anchor_generator", "=", "AnchorGenerator", "(", "\n", "anchor_sizes", ",", "aspect_ratios", ",", "anchor_stride", ",", "straddle_thresh", "\n", ")", "\n", "return", "anchor_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.make_anchor_generator_retinanet": [[146, 167], ["anchor_generator.AnchorGenerator", "len", "len", "range", "new_anchor_sizes.append", "tuple", "per_layer_anchor_sizes.append", "tuple", "float"], "function", ["None"], ["", "def", "make_anchor_generator_retinanet", "(", "config", ")", ":", "\n", "    ", "anchor_sizes", "=", "config", ".", "MODEL", ".", "RETINANET", ".", "ANCHOR_SIZES", "\n", "aspect_ratios", "=", "config", ".", "MODEL", ".", "RETINANET", ".", "ASPECT_RATIOS", "\n", "anchor_strides", "=", "config", ".", "MODEL", ".", "RETINANET", ".", "ANCHOR_STRIDES", "\n", "straddle_thresh", "=", "config", ".", "MODEL", ".", "RETINANET", ".", "STRADDLE_THRESH", "\n", "octave", "=", "config", ".", "MODEL", ".", "RETINANET", ".", "OCTAVE", "\n", "scales_per_octave", "=", "config", ".", "MODEL", ".", "RETINANET", ".", "SCALES_PER_OCTAVE", "\n", "\n", "assert", "len", "(", "anchor_strides", ")", "==", "len", "(", "anchor_sizes", ")", ",", "\"Only support FPN now\"", "\n", "new_anchor_sizes", "=", "[", "]", "\n", "for", "size", "in", "anchor_sizes", ":", "\n", "        ", "per_layer_anchor_sizes", "=", "[", "]", "\n", "for", "scale_per_octave", "in", "range", "(", "scales_per_octave", ")", ":", "\n", "            ", "octave_scale", "=", "octave", "**", "(", "scale_per_octave", "/", "float", "(", "scales_per_octave", ")", ")", "\n", "per_layer_anchor_sizes", ".", "append", "(", "octave_scale", "*", "size", ")", "\n", "", "new_anchor_sizes", ".", "append", "(", "tuple", "(", "per_layer_anchor_sizes", ")", ")", "\n", "\n", "", "anchor_generator", "=", "AnchorGenerator", "(", "\n", "tuple", "(", "new_anchor_sizes", ")", ",", "aspect_ratios", ",", "anchor_strides", ",", "straddle_thresh", "\n", ")", "\n", "return", "anchor_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.generate_anchors": [[220, 231], ["anchor_generator._generate_anchors", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator._generate_anchors"], ["", "def", "generate_anchors", "(", "\n", "stride", "=", "16", ",", "sizes", "=", "(", "32", ",", "64", ",", "128", ",", "256", ",", "512", ")", ",", "aspect_ratios", "=", "(", "0.5", ",", "1", ",", "2", ")", "\n", ")", ":", "\n", "    ", "\"\"\"Generates a matrix of anchor boxes in (x1, y1, x2, y2) format. Anchors\n    are centered on stride / 2, have (approximate) sqrt areas of the specified\n    sizes, and aspect ratios as given.\n    \"\"\"", "\n", "return", "_generate_anchors", "(", "\n", "stride", ",", "\n", "np", ".", "array", "(", "sizes", ",", "dtype", "=", "np", ".", "float", ")", "/", "stride", ",", "\n", "np", ".", "array", "(", "aspect_ratios", ",", "dtype", "=", "np", ".", "float", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator._generate_anchors": [[234, 244], ["anchor_generator._ratio_enum", "numpy.vstack", "torch.from_numpy", "numpy.array", "anchor_generator._scale_enum", "range"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator._ratio_enum", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator._scale_enum"], ["", "def", "_generate_anchors", "(", "base_size", ",", "scales", ",", "aspect_ratios", ")", ":", "\n", "    ", "\"\"\"Generate anchor (reference) windows by enumerating aspect ratios X\n    scales wrt a reference (0, 0, base_size - 1, base_size - 1) window.\n    \"\"\"", "\n", "anchor", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "base_size", ",", "base_size", "]", ",", "dtype", "=", "np", ".", "float", ")", "-", "1", "\n", "anchors", "=", "_ratio_enum", "(", "anchor", ",", "aspect_ratios", ")", "\n", "anchors", "=", "np", ".", "vstack", "(", "\n", "[", "_scale_enum", "(", "anchors", "[", "i", ",", ":", "]", ",", "scales", ")", "for", "i", "in", "range", "(", "anchors", ".", "shape", "[", "0", "]", ")", "]", "\n", ")", "\n", "return", "torch", ".", "from_numpy", "(", "anchors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator._whctrs": [[246, 253], ["None"], "function", ["None"], ["", "def", "_whctrs", "(", "anchor", ")", ":", "\n", "    ", "\"\"\"Return width, height, x center, and y center for an anchor (window).\"\"\"", "\n", "w", "=", "anchor", "[", "2", "]", "-", "anchor", "[", "0", "]", "+", "1", "\n", "h", "=", "anchor", "[", "3", "]", "-", "anchor", "[", "1", "]", "+", "1", "\n", "x_ctr", "=", "anchor", "[", "0", "]", "+", "0.5", "*", "(", "w", "-", "1", ")", "\n", "y_ctr", "=", "anchor", "[", "1", "]", "+", "0.5", "*", "(", "h", "-", "1", ")", "\n", "return", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator._mkanchors": [[255, 270], ["numpy.hstack"], "function", ["None"], ["", "def", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", ":", "\n", "    ", "\"\"\"Given a vector of widths (ws) and heights (hs) around a center\n    (x_ctr, y_ctr), output a set of anchors (windows).\n    \"\"\"", "\n", "ws", "=", "ws", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "hs", "=", "hs", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "anchors", "=", "np", ".", "hstack", "(", "\n", "(", "\n", "x_ctr", "-", "0.5", "*", "(", "ws", "-", "1", ")", ",", "\n", "y_ctr", "-", "0.5", "*", "(", "hs", "-", "1", ")", ",", "\n", "x_ctr", "+", "0.5", "*", "(", "ws", "-", "1", ")", ",", "\n", "y_ctr", "+", "0.5", "*", "(", "hs", "-", "1", ")", ",", "\n", ")", "\n", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator._ratio_enum": [[272, 281], ["anchor_generator._whctrs", "numpy.round", "numpy.round", "anchor_generator._mkanchors", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator._whctrs", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator._mkanchors"], ["", "def", "_ratio_enum", "(", "anchor", ",", "ratios", ")", ":", "\n", "    ", "\"\"\"Enumerate a set of anchors for each aspect ratio wrt an anchor.\"\"\"", "\n", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "=", "_whctrs", "(", "anchor", ")", "\n", "size", "=", "w", "*", "h", "\n", "size_ratios", "=", "size", "/", "ratios", "\n", "ws", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "size_ratios", ")", ")", "\n", "hs", "=", "np", ".", "round", "(", "ws", "*", "ratios", ")", "\n", "anchors", "=", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator._scale_enum": [[283, 290], ["anchor_generator._whctrs", "anchor_generator._mkanchors"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator._whctrs", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator._mkanchors"], ["", "def", "_scale_enum", "(", "anchor", ",", "scales", ")", ":", "\n", "    ", "\"\"\"Enumerate a set of anchors for each scale wrt an anchor.\"\"\"", "\n", "w", ",", "h", ",", "x_ctr", ",", "y_ctr", "=", "_whctrs", "(", "anchor", ")", "\n", "ws", "=", "w", "*", "scales", "\n", "hs", "=", "h", "*", "scales", "\n", "anchors", "=", "_mkanchors", "(", "ws", ",", "hs", ",", "x_ctr", ",", "y_ctr", ")", "\n", "return", "anchors", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.inference.RPNPostProcessor.__init__": [[19, 50], ["super().__init__", "maskrcnn_benchmark.modeling.box_coder.BoxCoder"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "pre_nms_top_n", ",", "\n", "post_nms_top_n", ",", "\n", "nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            pre_nms_top_n (int)\n            post_nms_top_n (int)\n            nms_thresh (float)\n            min_size (int)\n            box_coder (BoxCoder)\n            fpn_post_nms_top_n (int)\n        \"\"\"", "\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n", "if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.inference.RPNPostProcessor.add_gt_proposals": [[51, 73], ["target.copy_with_fields", "gt_box.add_field", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "torch.ones", "zip", "len"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.copy_with_fields", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.cat_boxlist"], ["", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "# later cat of bbox requires all fields to be present for all bbox", "\n", "# so we need to add a dummy for objectness that's missing", "\n", "for", "gt_box", "in", "gt_boxes", ":", "\n", "            ", "gt_box", ".", "add_field", "(", "\"objectness\"", ",", "torch", ".", "ones", "(", "len", "(", "gt_box", ")", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "proposals", "=", "[", "\n", "cat_boxlist", "(", "(", "proposal", ",", "gt_box", ")", ")", "\n", "for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n", "]", "\n", "\n", "return", "proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.inference.RPNPostProcessor.forward_for_single_feature_map": [[74, 122], ["utils.permute_and_flatten().view", "objectness.sigmoid.sigmoid.sigmoid", "utils.permute_and_flatten", "min", "objectness.sigmoid.sigmoid.topk", "torch.cat", "inference.RPNPostProcessor.box_coder.decode", "proposals.view.view.view", "zip", "torch.arange", "torch.cat.reshape", "utils.permute_and_flatten.view", "torch.cat.view", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.clip_to_image", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms", "result.append", "utils.permute_and_flatten"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.utils.permute_and_flatten", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.box_coder.BoxCoder.decode", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.clip_to_image", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.remove_small_boxes", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.boxlist_nms", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.utils.permute_and_flatten"], ["", "def", "forward_for_single_feature_map", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n", "objectness", "=", "permute_and_flatten", "(", "objectness", ",", "N", ",", "A", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "objectness", "=", "objectness", ".", "sigmoid", "(", ")", "\n", "\n", "box_regression", "=", "permute_and_flatten", "(", "box_regression", ",", "N", ",", "A", ",", "4", ",", "H", ",", "W", ")", "\n", "\n", "num_anchors", "=", "A", "*", "H", "*", "W", "\n", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n", "box_regression", "=", "box_regression", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "anchors", "]", "\n", "concat_anchors", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "concat_anchors", "=", "concat_anchors", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "-", "1", ",", "4", ")", ",", "concat_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "proposals", "=", "proposals", ".", "view", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "proposal", ",", "score", ",", "im_shape", "in", "zip", "(", "proposals", ",", "objectness", ",", "image_shapes", ")", ":", "\n", "            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "boxlist", "=", "remove_small_boxes", "(", "boxlist", ",", "self", ".", "min_size", ")", "\n", "boxlist", "=", "boxlist_nms", "(", "\n", "boxlist", ",", "\n", "self", ".", "nms_thresh", ",", "\n", "max_proposals", "=", "self", ".", "post_nms_top_n", ",", "\n", "score_field", "=", "\"objectness\"", ",", "\n", ")", "\n", "result", ".", "append", "(", "boxlist", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.inference.RPNPostProcessor.forward": [[123, 151], ["len", "list", "zip", "list", "zip", "sampled_boxes.append", "zip", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "inference.RPNPostProcessor.select_over_all_levels", "inference.RPNPostProcessor.add_gt_proposals", "inference.RPNPostProcessor.forward_for_single_feature_map"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.inference.FCOSPostProcessor.select_over_all_levels", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.inference.RetinaNetPostProcessor.add_gt_proposals", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.inference.FCOSPostProcessor.forward_for_single_feature_map"], ["", "def", "forward", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[list[BoxList]]\n            objectness: list[tensor]\n            box_regression: list[tensor]\n\n        Returns:\n            boxlists (list[BoxList]): the post-processed anchors, after\n                applying box decoding and NMS\n        \"\"\"", "\n", "sampled_boxes", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "objectness", ")", "\n", "anchors", "=", "list", "(", "zip", "(", "*", "anchors", ")", ")", "\n", "for", "a", ",", "o", ",", "b", "in", "zip", "(", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "            ", "sampled_boxes", ".", "append", "(", "self", ".", "forward_for_single_feature_map", "(", "a", ",", "o", ",", "b", ")", ")", "\n", "\n", "", "boxlists", "=", "list", "(", "zip", "(", "*", "sampled_boxes", ")", ")", "\n", "boxlists", "=", "[", "cat_boxlist", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "\n", "if", "num_levels", ">", "1", ":", "\n", "            ", "boxlists", "=", "self", ".", "select_over_all_levels", "(", "boxlists", ")", "\n", "\n", "# append ground-truth bboxes to proposals", "\n", "", "if", "self", ".", "training", "and", "targets", "is", "not", "None", ":", "\n", "            ", "boxlists", "=", "self", ".", "add_gt_proposals", "(", "boxlists", ",", "targets", ")", "\n", "\n", "", "return", "boxlists", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.inference.RPNPostProcessor.select_over_all_levels": [[152, 180], ["len", "torch.cat", "min", "torch.topk", "torch.zeros_like", "inds_mask.split.split.split", "range", "range", "len", "len", "boxlists[].get_field", "min", "torch.topk", "boxlist.get_field", "len"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["", "def", "select_over_all_levels", "(", "self", ",", "boxlists", ")", ":", "\n", "        ", "num_images", "=", "len", "(", "boxlists", ")", "\n", "# different behavior during training and during testing:", "\n", "# during training, post_nms_top_n is over *all* the proposals combined, while", "\n", "# during testing, it is over the proposals for each image", "\n", "# TODO resolve this difference and make it consistent. It should be per image,", "\n", "# and not per batch", "\n", "if", "self", ".", "training", ":", "\n", "            ", "objectness", "=", "torch", ".", "cat", "(", "\n", "[", "boxlist", ".", "get_field", "(", "\"objectness\"", ")", "for", "boxlist", "in", "boxlists", "]", ",", "dim", "=", "0", "\n", ")", "\n", "box_sizes", "=", "[", "len", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", ")", "\n", "inds_mask", "=", "torch", ".", "zeros_like", "(", "objectness", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "inds_mask", "[", "inds_sorted", "]", "=", "1", "\n", "inds_mask", "=", "inds_mask", ".", "split", "(", "box_sizes", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_mask", "[", "i", "]", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "objectness", "=", "boxlists", "[", "i", "]", ".", "get_field", "(", "\"objectness\"", ")", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "\n", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", "\n", ")", "\n", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_sorted", "]", "\n", "", "", "return", "boxlists", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.inference.make_rpn_postprocessor": [[182, 203], ["inference.RPNPostProcessor"], "function", ["None"], ["", "", "def", "make_rpn_postprocessor", "(", "config", ",", "rpn_box_coder", ",", "is_train", ")", ":", "\n", "    ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TEST", "\n", "\n", "", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TRAIN", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TEST", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TEST", "\n", "", "nms_thresh", "=", "config", ".", "MODEL", ".", "RPN", ".", "NMS_THRESH", "\n", "min_size", "=", "config", ".", "MODEL", ".", "RPN", ".", "MIN_SIZE", "\n", "box_selector", "=", "RPNPostProcessor", "(", "\n", "pre_nms_top_n", "=", "pre_nms_top_n", ",", "\n", "post_nms_top_n", "=", "post_nms_top_n", ",", "\n", "nms_thresh", "=", "nms_thresh", ",", "\n", "min_size", "=", "min_size", ",", "\n", "box_coder", "=", "rpn_box_coder", ",", "\n", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", ",", "\n", ")", "\n", "return", "box_selector", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.loss.RPNLossComputation.__init__": [[26, 41], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "proposal_matcher", ",", "fg_bg_sampler", ",", "box_coder", ",", "\n", "generate_labels_func", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposal_matcher (Matcher)\n            fg_bg_sampler (BalancedPositiveNegativeSampler)\n            box_coder (BoxCoder)\n        \"\"\"", "\n", "# self.target_preparator = target_preparator", "\n", "self", ".", "proposal_matcher", "=", "proposal_matcher", "\n", "self", ".", "fg_bg_sampler", "=", "fg_bg_sampler", "\n", "self", ".", "box_coder", "=", "box_coder", "\n", "self", ".", "copied_fields", "=", "[", "]", "\n", "self", ".", "generate_labels_func", "=", "generate_labels_func", "\n", "self", ".", "discard_cases", "=", "[", "'not_visibility'", ",", "'between_thresholds'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.loss.RPNLossComputation.match_targets_to_anchors": [[42, 55], ["maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "loss.RPNLossComputation.proposal_matcher", "target.copy_with_fields.copy_with_fields.copy_with_fields", "matched_targets.add_field", "loss.RPNLossComputation.clamp"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.copy_with_fields", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field"], ["", "def", "match_targets_to_anchors", "(", "self", ",", "anchor", ",", "target", ",", "copied_fields", "=", "[", "]", ")", ":", "\n", "        ", "match_quality_matrix", "=", "boxlist_iou", "(", "target", ",", "anchor", ")", "\n", "matched_idxs", "=", "self", ".", "proposal_matcher", "(", "match_quality_matrix", ")", "\n", "# RPN doesn't need any fields from target", "\n", "# for creating the labels, so clear them all", "\n", "target", "=", "target", ".", "copy_with_fields", "(", "copied_fields", ")", "\n", "# get the targets corresponding GT for each anchor", "\n", "# NB: need to clamp the indices because we can have a single", "\n", "# GT in the image, and matched_idxs can be -2, which goes", "\n", "# out of bounds", "\n", "matched_targets", "=", "target", "[", "matched_idxs", ".", "clamp", "(", "min", "=", "0", ")", "]", "\n", "matched_targets", ".", "add_field", "(", "\"matched_idxs\"", ",", "matched_idxs", ")", "\n", "return", "matched_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.loss.RPNLossComputation.prepare_targets": [[56, 90], ["zip", "loss.RPNLossComputation.match_targets_to_anchors", "loss.RPNLossComputation.get_field", "loss.RPNLossComputation.generate_labels_func", "labels_per_image.to.to.to", "loss.RPNLossComputation.box_coder.encode", "labels.append", "regression_targets.append", "anchors_per_image.get_field"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.loss.RPNLossComputation.match_targets_to_anchors", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.box_coder.BoxCoder.encode", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["", "def", "prepare_targets", "(", "self", ",", "anchors", ",", "targets", ")", ":", "\n", "        ", "labels", "=", "[", "]", "\n", "regression_targets", "=", "[", "]", "\n", "for", "anchors_per_image", ",", "targets_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n", "            ", "matched_targets", "=", "self", ".", "match_targets_to_anchors", "(", "\n", "anchors_per_image", ",", "targets_per_image", ",", "self", ".", "copied_fields", "\n", ")", "\n", "\n", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "self", ".", "generate_labels_func", "(", "matched_targets", ")", "\n", "labels_per_image", "=", "labels_per_image", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# Background (negative examples)", "\n", "bg_indices", "=", "matched_idxs", "==", "Matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "labels_per_image", "[", "bg_indices", "]", "=", "0", "\n", "\n", "# discard anchors that go out of the boundaries of the image", "\n", "if", "\"not_visibility\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "labels_per_image", "[", "~", "anchors_per_image", ".", "get_field", "(", "\"visibility\"", ")", "]", "=", "-", "1", "\n", "\n", "# discard indices that are between thresholds", "\n", "", "if", "\"between_thresholds\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "inds_to_discard", "=", "matched_idxs", "==", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_per_image", "[", "inds_to_discard", "]", "=", "-", "1", "\n", "\n", "# compute regression targets", "\n", "", "regression_targets_per_image", "=", "self", ".", "box_coder", ".", "encode", "(", "\n", "matched_targets", ".", "bbox", ",", "anchors_per_image", ".", "bbox", "\n", ")", "\n", "\n", "labels", ".", "append", "(", "labels_per_image", ")", "\n", "regression_targets", ".", "append", "(", "regression_targets_per_image", ")", "\n", "\n", "", "return", "labels", ",", "regression_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.loss.RPNLossComputation.__call__": [[92, 132], ["loss.RPNLossComputation.prepare_targets", "loss.RPNLossComputation.fg_bg_sampler", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.cat", "utils.concat_box_prediction_layers", "objectness.squeeze.squeeze.squeeze", "torch.cat", "torch.cat", "torch.nn.functional.binary_cross_entropy_with_logits", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "maskrcnn_benchmark.layers.smooth_l1_loss", "torch.cat.numel", "torch.nonzero", "torch.nonzero", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.KeypointRCNNLossComputation.prepare_targets", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.utils.concat_box_prediction_layers", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.smooth_l1_loss.smooth_l1_loss", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat"], ["", "def", "__call__", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors (list[BoxList])\n            objectness (list[Tensor])\n            box_regression (list[Tensor])\n            targets (list[BoxList])\n\n        Returns:\n            objectness_loss (Tensor)\n            box_loss (Tensor\n        \"\"\"", "\n", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "anchors_per_image", "in", "anchors", "]", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_pos_inds", ",", "sampled_neg_inds", "]", ",", "dim", "=", "0", ")", "\n", "\n", "objectness", ",", "box_regression", "=", "concat_box_prediction_layers", "(", "objectness", ",", "box_regression", ")", "\n", "\n", "objectness", "=", "objectness", ".", "squeeze", "(", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "regression_targets", "=", "torch", ".", "cat", "(", "regression_targets", ",", "dim", "=", "0", ")", "\n", "\n", "box_loss", "=", "smooth_l1_loss", "(", "\n", "box_regression", "[", "sampled_pos_inds", "]", ",", "\n", "regression_targets", "[", "sampled_pos_inds", "]", ",", "\n", "beta", "=", "1.0", "/", "9", ",", "\n", "size_average", "=", "False", ",", "\n", ")", "/", "(", "sampled_inds", ".", "numel", "(", ")", ")", "\n", "\n", "objectness_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "objectness", "[", "sampled_inds", "]", ",", "labels", "[", "sampled_inds", "]", "\n", ")", "\n", "\n", "return", "objectness_loss", ",", "box_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.loss.generate_rpn_labels": [[134, 138], ["matched_targets.get_field"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["", "", "def", "generate_rpn_labels", "(", "matched_targets", ")", ":", "\n", "    ", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "matched_idxs", ">=", "0", "\n", "return", "labels_per_image", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.loss.make_rpn_loss_evaluator": [[140, 158], ["maskrcnn_benchmark.modeling.matcher.Matcher", "balanced_positive_negative_sampler.BalancedPositiveNegativeSampler", "loss.RPNLossComputation"], "function", ["None"], ["", "def", "make_rpn_loss_evaluator", "(", "cfg", ",", "box_coder", ")", ":", "\n", "    ", "matcher", "=", "Matcher", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "FG_IOU_THRESHOLD", ",", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BG_IOU_THRESHOLD", ",", "\n", "allow_low_quality_matches", "=", "True", ",", "\n", ")", "\n", "\n", "fg_bg_sampler", "=", "BalancedPositiveNegativeSampler", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BATCH_SIZE_PER_IMAGE", ",", "cfg", ".", "MODEL", ".", "RPN", ".", "POSITIVE_FRACTION", "\n", ")", "\n", "\n", "loss_evaluator", "=", "RPNLossComputation", "(", "\n", "matcher", ",", "\n", "fg_bg_sampler", ",", "\n", "box_coder", ",", "\n", "generate_rpn_labels", "\n", ")", "\n", "return", "loss_evaluator", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.utils.permute_and_flatten": [[10, 15], ["layer.reshape.view", "layer.reshape.permute", "layer.reshape.reshape"], "function", ["None"], ["\n", "from", "maskrcnn_benchmark", ".", "config", "import", "cfg", "as", "g_cfg", "\n", "\n", "\n", "def", "get_config_root_path", "(", ")", ":", "\n", "    ", "return", "env_tests", ".", "get_config_root_path", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.utils.concat_box_prediction_layers": [[17, 46], ["zip", "utils.cat().reshape", "utils.cat().reshape", "utils.permute_and_flatten", "box_cls_flattened.append", "utils.permute_and_flatten", "box_regression_flattened.append", "utils.cat", "utils.cat"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.utils.permute_and_flatten", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.utils.permute_and_flatten", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat"], ["\n", "", "def", "load_config", "(", "rel_path", ")", ":", "\n", "    ", "''' Load config from file path specified as path relative to config_root '''", "\n", "cfg_path", "=", "os", ".", "path", ".", "join", "(", "env_tests", ".", "get_config_root_path", "(", ")", ",", "rel_path", ")", "\n", "return", "load_config_from_file", "(", "cfg_path", ")", "\n", "\n", "\n", "", "def", "load_config_from_file", "(", "file_path", ")", ":", "\n", "    ", "''' Load config from file path specified as absolute path '''", "\n", "ret", "=", "copy", ".", "deepcopy", "(", "g_cfg", ")", "\n", "ret", ".", "merge_from_file", "(", "file_path", ")", "\n", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.retinanet.RetinaNetHead.__init__": [[18, 78], ["super().__init__", "range", "retinanet.RetinaNetHead.add_module", "retinanet.RetinaNetHead.add_module", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "len", "cls_tower.append", "cls_tower.append", "bbox_tower.append", "bbox_tower.append", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "modules.modules", "math.log", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "isinstance", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            in_channels (int): number of channels of the input feature\n            num_anchors (int): number of anchors to be predicted\n        \"\"\"", "\n", "super", "(", "RetinaNetHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# TODO: Implement the sigmoid version first.", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "RETINANET", ".", "NUM_CLASSES", "-", "1", "\n", "num_anchors", "=", "len", "(", "cfg", ".", "MODEL", ".", "RETINANET", ".", "ASPECT_RATIOS", ")", "*", "cfg", ".", "MODEL", ".", "RETINANET", ".", "SCALES_PER_OCTAVE", "\n", "\n", "cls_tower", "=", "[", "]", "\n", "bbox_tower", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "MODEL", ".", "RETINANET", ".", "NUM_CONVS", ")", ":", "\n", "            ", "cls_tower", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", ")", "\n", "cls_tower", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "bbox_tower", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", ")", "\n", "bbox_tower", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "self", ".", "add_module", "(", "'cls_tower'", ",", "nn", ".", "Sequential", "(", "*", "cls_tower", ")", ")", "\n", "self", ".", "add_module", "(", "'bbox_tower'", ",", "nn", ".", "Sequential", "(", "*", "bbox_tower", ")", ")", "\n", "self", ".", "cls_logits", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "num_anchors", "*", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "num_anchors", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", "\n", "# Initialization", "\n", "for", "modules", "in", "[", "self", ".", "cls_tower", ",", "self", ".", "bbox_tower", ",", "self", ".", "cls_logits", ",", "\n", "self", ".", "bbox_pred", "]", ":", "\n", "            ", "for", "l", "in", "modules", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "l", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n", "\n", "# retinanet_bias_init", "\n", "", "", "", "prior_prob", "=", "cfg", ".", "MODEL", ".", "RETINANET", ".", "PRIOR_PROB", "\n", "bias_value", "=", "-", "math", ".", "log", "(", "(", "1", "-", "prior_prob", ")", "/", "prior_prob", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "cls_logits", ".", "bias", ",", "bias_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.retinanet.RetinaNetHead.forward": [[79, 86], ["logits.append", "bbox_reg.append", "retinanet.RetinaNetHead.cls_logits", "retinanet.RetinaNetHead.bbox_pred", "retinanet.RetinaNetHead.cls_tower", "retinanet.RetinaNetHead.bbox_tower"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "logits", "=", "[", "]", "\n", "bbox_reg", "=", "[", "]", "\n", "for", "feature", "in", "x", ":", "\n", "            ", "logits", ".", "append", "(", "self", ".", "cls_logits", "(", "self", ".", "cls_tower", "(", "feature", ")", ")", ")", "\n", "bbox_reg", ".", "append", "(", "self", ".", "bbox_pred", "(", "self", ".", "bbox_tower", "(", "feature", ")", ")", ")", "\n", "", "return", "logits", ",", "bbox_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.retinanet.RetinaNetModule.__init__": [[94, 111], ["super().__init__", "cfg.clone", "anchor_generator.make_anchor_generator_retinanet.make_anchor_generator_retinanet", "retinanet.RetinaNetHead", "maskrcnn_benchmark.modeling.box_coder.BoxCoder", "inference.make_retinanet_postprocessor", "loss.make_retinanet_loss_evaluator"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.make_anchor_generator_retinanet", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.inference.make_retinanet_postprocessor", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.loss.make_retinanet_loss_evaluator"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "RetinaNetModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "\n", "anchor_generator", "=", "make_anchor_generator_retinanet", "(", "cfg", ")", "\n", "head", "=", "RetinaNetHead", "(", "cfg", ",", "in_channels", ")", "\n", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "10.", ",", "10.", ",", "5.", ",", "5.", ")", ")", "\n", "\n", "box_selector_test", "=", "make_retinanet_postprocessor", "(", "cfg", ",", "box_coder", ",", "is_train", "=", "False", ")", "\n", "\n", "loss_evaluator", "=", "make_retinanet_loss_evaluator", "(", "cfg", ",", "box_coder", ")", "\n", "\n", "self", ".", "anchor_generator", "=", "anchor_generator", "\n", "self", ".", "head", "=", "head", "\n", "self", ".", "box_selector_test", "=", "box_selector_test", "\n", "self", ".", "loss_evaluator", "=", "loss_evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.retinanet.RetinaNetModule.forward": [[112, 134], ["retinanet.RetinaNetModule.head", "retinanet.RetinaNetModule.anchor_generator", "retinanet.RetinaNetModule._forward_train", "retinanet.RetinaNetModule._forward_test"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.fcos.FCOSModule._forward_train", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.fcos.FCOSModule._forward_test"], ["", "def", "forward", "(", "self", ",", "images", ",", "features", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            images (ImageList): images for which we want to compute the predictions\n            features (list[Tensor]): features computed from the images that are\n                used for computing the predictions. Each tensor in the list\n                correspond to different feature levels\n            targets (list[BoxList): ground-truth boxes present in the image (optional)\n\n        Returns:\n            boxes (list[BoxList]): the predicted boxes from the RPN, one BoxList per\n                image.\n            losses (dict[Tensor]): the losses for the model during training. During\n                testing, it is an empty dict.\n        \"\"\"", "\n", "box_cls", ",", "box_regression", "=", "self", ".", "head", "(", "features", ")", "\n", "anchors", "=", "self", ".", "anchor_generator", "(", "images", ",", "features", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_forward_train", "(", "anchors", ",", "box_cls", ",", "box_regression", ",", "targets", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_forward_test", "(", "anchors", ",", "box_cls", ",", "box_regression", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.retinanet.RetinaNetModule._forward_train": [[135, 145], ["retinanet.RetinaNetModule.loss_evaluator"], "methods", ["None"], ["", "", "def", "_forward_train", "(", "self", ",", "anchors", ",", "box_cls", ",", "box_regression", ",", "targets", ")", ":", "\n", "\n", "        ", "loss_box_cls", ",", "loss_box_reg", "=", "self", ".", "loss_evaluator", "(", "\n", "anchors", ",", "box_cls", ",", "box_regression", ",", "targets", "\n", ")", "\n", "losses", "=", "{", "\n", "\"loss_retina_cls\"", ":", "loss_box_cls", ",", "\n", "\"loss_retina_reg\"", ":", "loss_box_reg", ",", "\n", "}", "\n", "return", "anchors", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.retinanet.RetinaNetModule._forward_test": [[146, 149], ["retinanet.RetinaNetModule.box_selector_test"], "methods", ["None"], ["", "def", "_forward_test", "(", "self", ",", "anchors", ",", "box_cls", ",", "box_regression", ")", ":", "\n", "        ", "boxes", "=", "self", ".", "box_selector_test", "(", "anchors", ",", "box_cls", ",", "box_regression", ")", "\n", "return", "boxes", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.retinanet.build_retinanet": [[151, 153], ["retinanet.RetinaNetModule"], "function", ["None"], ["", "", "def", "build_retinanet", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "return", "RetinaNetModule", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.inference.RetinaNetPostProcessor.__init__": [[19, 52], ["inference.RPNPostProcessor.__init__", "maskrcnn_benchmark.modeling.box_coder.BoxCoder"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "pre_nms_top_n", ",", "\n", "post_nms_top_n", ",", "\n", "nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            pre_nms_top_n (int)\n            post_nms_top_n (int)\n            nms_thresh (float)\n            min_size (int)\n            box_coder (BoxCoder)\n            fpn_post_nms_top_n (int)\n        \"\"\"", "\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n", "if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "\n", "", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.inference.RetinaNetPostProcessor.add_gt_proposals": [[53, 58], ["None"], "methods", ["None"], ["\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.inference.RetinaNetPostProcessor.forward_for_single_feature_map": [[59, 126], ["utils.permute_and_flatten", "box_cls.sigmoid.sigmoid.sigmoid", "utils.permute_and_flatten", "box_regression.reshape.reshape.reshape", "candidate_inds.view().sum", "pre_nms_top_n.clamp.clamp.clamp", "zip", "box_regression.reshape.reshape.size", "box_cls.sigmoid.sigmoid.size", "per_box_cls.topk", "inference.RetinaNetPostProcessor.box_coder.decode", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.clip_to_image", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes", "results.append", "candidate_inds.view", "per_candidate_inds.nonzero", "per_box_regression[].view", "per_anchors.bbox[].view"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.utils.permute_and_flatten", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.utils.permute_and_flatten", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.box_coder.BoxCoder.decode", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.clip_to_image", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.remove_small_boxes"], ["\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "# later cat of bbox requires all fields to be present for all bbox", "\n", "# so we need to add a dummy for objectness that's missing", "\n", "for", "gt_box", "in", "gt_boxes", ":", "\n", "            ", "gt_box", ".", "add_field", "(", "\"objectness\"", ",", "torch", ".", "ones", "(", "len", "(", "gt_box", ")", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "proposals", "=", "[", "\n", "cat_boxlist", "(", "(", "proposal", ",", "gt_box", ")", ")", "\n", "for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n", "]", "\n", "\n", "return", "proposals", "\n", "\n", "", "def", "forward_for_single_feature_map", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n", "objectness", "=", "permute_and_flatten", "(", "objectness", ",", "N", ",", "A", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "objectness", "=", "objectness", ".", "sigmoid", "(", ")", "\n", "\n", "box_regression", "=", "permute_and_flatten", "(", "box_regression", ",", "N", ",", "A", ",", "4", ",", "H", ",", "W", ")", "\n", "\n", "num_anchors", "=", "A", "*", "H", "*", "W", "\n", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n", "box_regression", "=", "box_regression", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "anchors", "]", "\n", "concat_anchors", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "concat_anchors", "=", "concat_anchors", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "-", "1", ",", "4", ")", ",", "concat_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "proposals", "=", "proposals", ".", "view", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "proposal", ",", "score", ",", "im_shape", "in", "zip", "(", "proposals", ",", "objectness", ",", "image_shapes", ")", ":", "\n", "            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "boxlist", "=", "remove_small_boxes", "(", "boxlist", ",", "self", ".", "min_size", ")", "\n", "boxlist", "=", "boxlist_nms", "(", "\n", "boxlist", ",", "\n", "self", ".", "nms_thresh", ",", "\n", "max_proposals", "=", "self", ".", "post_nms_top_n", ",", "\n", "score_field", "=", "\"objectness\"", ",", "\n", ")", "\n", "result", ".", "append", "(", "boxlist", ")", "\n", "", "return", "result", "\n", "\n", "", "def", "forward", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.inference.RetinaNetPostProcessor.select_over_all_levels": [[131, 175], ["len", "range", "boxlists[].get_field", "boxlists[].get_field", "range", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "len", "results.append", "boxes[].view", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms", "len", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.append", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field", "torch.kthvalue", "torch.nonzero().squeeze", "torch.full", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field.cpu", "image_thresh.item", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.boxlist_nms", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["\n", "sampled_boxes", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "objectness", ")", "\n", "anchors", "=", "list", "(", "zip", "(", "*", "anchors", ")", ")", "\n", "for", "a", ",", "o", ",", "b", "in", "zip", "(", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "            ", "sampled_boxes", ".", "append", "(", "self", ".", "forward_for_single_feature_map", "(", "a", ",", "o", ",", "b", ")", ")", "\n", "\n", "", "boxlists", "=", "list", "(", "zip", "(", "*", "sampled_boxes", ")", ")", "\n", "boxlists", "=", "[", "cat_boxlist", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "\n", "if", "num_levels", ">", "1", ":", "\n", "            ", "boxlists", "=", "self", ".", "select_over_all_levels", "(", "boxlists", ")", "\n", "\n", "# append ground-truth bboxes to proposals", "\n", "", "if", "self", ".", "training", "and", "targets", "is", "not", "None", ":", "\n", "            ", "boxlists", "=", "self", ".", "add_gt_proposals", "(", "boxlists", ",", "targets", ")", "\n", "\n", "", "return", "boxlists", "\n", "\n", "", "def", "select_over_all_levels", "(", "self", ",", "boxlists", ")", ":", "\n", "        ", "num_images", "=", "len", "(", "boxlists", ")", "\n", "# different behavior during training and during testing:", "\n", "# during training, post_nms_top_n is over *all* the proposals combined, while", "\n", "# during testing, it is over the proposals for each image", "\n", "# TODO resolve this difference and make it consistent. It should be per image,", "\n", "# and not per batch", "\n", "if", "self", ".", "training", ":", "\n", "            ", "objectness", "=", "torch", ".", "cat", "(", "\n", "[", "boxlist", ".", "get_field", "(", "\"objectness\"", ")", "for", "boxlist", "in", "boxlists", "]", ",", "dim", "=", "0", "\n", ")", "\n", "box_sizes", "=", "[", "len", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", ")", "\n", "inds_mask", "=", "torch", ".", "zeros_like", "(", "objectness", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "inds_mask", "[", "inds_sorted", "]", "=", "1", "\n", "inds_mask", "=", "inds_mask", ".", "split", "(", "box_sizes", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_mask", "[", "i", "]", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "objectness", "=", "boxlists", "[", "i", "]", ".", "get_field", "(", "\"objectness\"", ")", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.inference.make_retinanet_postprocessor": [[177, 195], ["inference.RetinaNetPostProcessor"], "function", ["None"], [")", "\n", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_sorted", "]", "\n", "", "", "return", "boxlists", "\n", "\n", "\n", "", "", "def", "make_rpn_postprocessor", "(", "config", ",", "rpn_box_coder", ",", "is_train", ")", ":", "\n", "    ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TEST", "\n", "\n", "", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TRAIN", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TEST", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TEST", "\n", "", "nms_thresh", "=", "config", ".", "MODEL", ".", "RPN", ".", "NMS_THRESH", "\n", "min_size", "=", "config", ".", "MODEL", ".", "RPN", ".", "MIN_SIZE", "\n", "box_selector", "=", "RPNPostProcessor", "(", "\n", "pre_nms_top_n", "=", "pre_nms_top_n", ",", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.loss.RetinaNetLossComputation.__init__": [[24, 42], ["None"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "proposal_matcher", ",", "fg_bg_sampler", ",", "box_coder", ",", "\n", "generate_labels_func", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposal_matcher (Matcher)\n            fg_bg_sampler (BalancedPositiveNegativeSampler)\n            box_coder (BoxCoder)\n        \"\"\"", "\n", "# self.target_preparator = target_preparator", "\n", "self", ".", "proposal_matcher", "=", "proposal_matcher", "\n", "self", ".", "fg_bg_sampler", "=", "fg_bg_sampler", "\n", "self", ".", "box_coder", "=", "box_coder", "\n", "self", ".", "copied_fields", "=", "[", "]", "\n", "self", ".", "generate_labels_func", "=", "generate_labels_func", "\n", "self", ".", "discard_cases", "=", "[", "'not_visibility'", ",", "'between_thresholds'", "]", "\n", "\n", "", "def", "match_targets_to_anchors", "(", "self", ",", "anchor", ",", "target", ",", "copied_fields", "=", "[", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.loss.RetinaNetLossComputation.__call__": [[43, 81], ["loss.RetinaNetLossComputation.prepare_targets", "len", "utils.concat_box_prediction_layers", "torch.cat", "torch.cat", "torch.nonzero().squeeze", "labels.int.int.int", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "maskrcnn_benchmark.layers.smooth_l1_loss", "max", "loss.RetinaNetLossComputation.box_cls_loss_func", "torch.nonzero", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.numel"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.KeypointRCNNLossComputation.prepare_targets", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.utils.concat_box_prediction_layers", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.smooth_l1_loss.smooth_l1_loss"], ["        ", "match_quality_matrix", "=", "boxlist_iou", "(", "target", ",", "anchor", ")", "\n", "matched_idxs", "=", "self", ".", "proposal_matcher", "(", "match_quality_matrix", ")", "\n", "# RPN doesn't need any fields from target", "\n", "# for creating the labels, so clear them all", "\n", "target", "=", "target", ".", "copy_with_fields", "(", "copied_fields", ")", "\n", "# get the targets corresponding GT for each anchor", "\n", "# NB: need to clamp the indices because we can have a single", "\n", "# GT in the image, and matched_idxs can be -2, which goes", "\n", "# out of bounds", "\n", "matched_targets", "=", "target", "[", "matched_idxs", ".", "clamp", "(", "min", "=", "0", ")", "]", "\n", "matched_targets", ".", "add_field", "(", "\"matched_idxs\"", ",", "matched_idxs", ")", "\n", "return", "matched_targets", "\n", "\n", "", "def", "prepare_targets", "(", "self", ",", "anchors", ",", "targets", ")", ":", "\n", "        ", "labels", "=", "[", "]", "\n", "regression_targets", "=", "[", "]", "\n", "for", "anchors_per_image", ",", "targets_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n", "            ", "matched_targets", "=", "self", ".", "match_targets_to_anchors", "(", "\n", "anchors_per_image", ",", "targets_per_image", ",", "self", ".", "copied_fields", "\n", ")", "\n", "\n", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "self", ".", "generate_labels_func", "(", "matched_targets", ")", "\n", "labels_per_image", "=", "labels_per_image", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# Background (negative examples)", "\n", "bg_indices", "=", "matched_idxs", "==", "Matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "labels_per_image", "[", "bg_indices", "]", "=", "0", "\n", "\n", "# discard anchors that go out of the boundaries of the image", "\n", "if", "\"not_visibility\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "labels_per_image", "[", "~", "anchors_per_image", ".", "get_field", "(", "\"visibility\"", ")", "]", "=", "-", "1", "\n", "\n", "# discard indices that are between thresholds", "\n", "", "if", "\"between_thresholds\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "inds_to_discard", "=", "matched_idxs", "==", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_per_image", "[", "inds_to_discard", "]", "=", "-", "1", "\n", "\n", "# compute regression targets", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.loss.generate_retinanet_labels": [[83, 86], ["matched_targets.get_field"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["matched_targets", ".", "bbox", ",", "anchors_per_image", ".", "bbox", "\n", ")", "\n", "\n", "labels", ".", "append", "(", "labels_per_image", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.retinanet.loss.make_retinanet_loss_evaluator": [[88, 108], ["maskrcnn_benchmark.modeling.matcher.Matcher", "maskrcnn_benchmark.layers.SigmoidFocalLoss", "loss.RetinaNetLossComputation"], "function", ["None"], ["\n", "", "return", "labels", ",", "regression_targets", "\n", "\n", "\n", "", "def", "__call__", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors (list[BoxList])\n            objectness (list[Tensor])\n            box_regression (list[Tensor])\n            targets (list[BoxList])\n\n        Returns:\n            objectness_loss (Tensor)\n            box_loss (Tensor\n        \"\"\"", "\n", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "anchors_per_image", "in", "anchors", "]", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.inference.FCOSPostProcessor.__init__": [[19, 45], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "pre_nms_top_n", ",", "\n", "post_nms_top_n", ",", "\n", "nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            pre_nms_top_n (int)\n            post_nms_top_n (int)\n            nms_thresh (float)\n            min_size (int)\n            box_coder (BoxCoder)\n            fpn_post_nms_top_n (int)\n        \"\"\"", "\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n", "if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.inference.FCOSPostProcessor.forward_for_single_feature_map": [[46, 113], ["box_cls.reshape().sigmoid.reshape().sigmoid.view().permute", "box_cls.reshape().sigmoid.reshape().sigmoid.reshape().sigmoid", "box_regression.reshape.reshape.view().permute", "box_regression.reshape.reshape.reshape", "centerness.reshape().sigmoid.reshape().sigmoid.view().permute", "centerness.reshape().sigmoid.reshape().sigmoid.reshape().sigmoid", "candidate_inds.view().sum", "pre_nms_top_n.clamp.clamp.clamp", "range", "per_candidate_inds.nonzero", "torch.stack", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.add_field", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes.clip_to_image", "maskrcnn_benchmark.structures.boxlist_ops.remove_small_boxes", "results.append", "box_cls.reshape().sigmoid.reshape().sigmoid.view", "box_cls.reshape().sigmoid.reshape().sigmoid.reshape", "box_regression.reshape.reshape.view", "centerness.reshape().sigmoid.reshape().sigmoid.view", "centerness.reshape().sigmoid.reshape().sigmoid.reshape", "candidate_inds.view", "per_candidate_inds.sum().item", "per_pre_nms_top_n.item", "per_box_cls.topk", "int", "int", "per_candidate_inds.sum"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.clip_to_image", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.remove_small_boxes"], ["\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "\n", "", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "# later cat of bbox requires all fields to be present for all bbox", "\n", "# so we need to add a dummy for objectness that's missing", "\n", "for", "gt_box", "in", "gt_boxes", ":", "\n", "            ", "gt_box", ".", "add_field", "(", "\"objectness\"", ",", "torch", ".", "ones", "(", "len", "(", "gt_box", ")", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "proposals", "=", "[", "\n", "cat_boxlist", "(", "(", "proposal", ",", "gt_box", ")", ")", "\n", "for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n", "]", "\n", "\n", "return", "proposals", "\n", "\n", "", "def", "forward_for_single_feature_map", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n", "objectness", "=", "permute_and_flatten", "(", "objectness", ",", "N", ",", "A", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "objectness", "=", "objectness", ".", "sigmoid", "(", ")", "\n", "\n", "box_regression", "=", "permute_and_flatten", "(", "box_regression", ",", "N", ",", "A", ",", "4", ",", "H", ",", "W", ")", "\n", "\n", "num_anchors", "=", "A", "*", "H", "*", "W", "\n", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n", "box_regression", "=", "box_regression", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "anchors", "]", "\n", "concat_anchors", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "concat_anchors", "=", "concat_anchors", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "-", "1", ",", "4", ")", ",", "concat_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "proposals", "=", "proposals", ".", "view", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "proposal", ",", "score", ",", "im_shape", "in", "zip", "(", "proposals", ",", "objectness", ",", "image_shapes", ")", ":", "\n", "            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "boxlist", "=", "remove_small_boxes", "(", "boxlist", ",", "self", ".", "min_size", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.inference.FCOSPostProcessor.forward": [[114, 138], ["enumerate", "list", "inference.FCOSPostProcessor.select_over_all_levels", "zip", "sampled_boxes.append", "zip", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "inference.FCOSPostProcessor.forward_for_single_feature_map"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.inference.FCOSPostProcessor.select_over_all_levels", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.inference.FCOSPostProcessor.forward_for_single_feature_map"], ["boxlist", "=", "boxlist_nms", "(", "\n", "boxlist", ",", "\n", "self", ".", "nms_thresh", ",", "\n", "max_proposals", "=", "self", ".", "post_nms_top_n", ",", "\n", "score_field", "=", "\"objectness\"", ",", "\n", ")", "\n", "result", ".", "append", "(", "boxlist", ")", "\n", "", "return", "result", "\n", "\n", "", "def", "forward", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[list[BoxList]]\n            objectness: list[tensor]\n            box_regression: list[tensor]\n\n        Returns:\n            boxlists (list[BoxList]): the post-processed anchors, after\n                applying box decoding and NMS\n        \"\"\"", "\n", "sampled_boxes", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "objectness", ")", "\n", "anchors", "=", "list", "(", "zip", "(", "*", "anchors", ")", ")", "\n", "for", "a", ",", "o", ",", "b", "in", "zip", "(", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "            ", "sampled_boxes", ".", "append", "(", "self", ".", "forward_for_single_feature_map", "(", "a", ",", "o", ",", "b", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.inference.FCOSPostProcessor.select_over_all_levels": [[143, 187], ["len", "range", "boxlists[].get_field", "boxlists[].get_field", "range", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "len", "results.append", "boxes[].view", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms", "len", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.append", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field", "torch.kthvalue", "torch.nonzero().squeeze", "torch.full", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field.cpu", "image_thresh.item", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.boxlist_nms", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["if", "num_levels", ">", "1", ":", "\n", "            ", "boxlists", "=", "self", ".", "select_over_all_levels", "(", "boxlists", ")", "\n", "\n", "# append ground-truth bboxes to proposals", "\n", "", "if", "self", ".", "training", "and", "targets", "is", "not", "None", ":", "\n", "            ", "boxlists", "=", "self", ".", "add_gt_proposals", "(", "boxlists", ",", "targets", ")", "\n", "\n", "", "return", "boxlists", "\n", "\n", "", "def", "select_over_all_levels", "(", "self", ",", "boxlists", ")", ":", "\n", "        ", "num_images", "=", "len", "(", "boxlists", ")", "\n", "# different behavior during training and during testing:", "\n", "# during training, post_nms_top_n is over *all* the proposals combined, while", "\n", "# during testing, it is over the proposals for each image", "\n", "# TODO resolve this difference and make it consistent. It should be per image,", "\n", "# and not per batch", "\n", "if", "self", ".", "training", ":", "\n", "            ", "objectness", "=", "torch", ".", "cat", "(", "\n", "[", "boxlist", ".", "get_field", "(", "\"objectness\"", ")", "for", "boxlist", "in", "boxlists", "]", ",", "dim", "=", "0", "\n", ")", "\n", "box_sizes", "=", "[", "len", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", ")", "\n", "inds_mask", "=", "torch", ".", "zeros_like", "(", "objectness", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "inds_mask", "[", "inds_sorted", "]", "=", "1", "\n", "inds_mask", "=", "inds_mask", ".", "split", "(", "box_sizes", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_mask", "[", "i", "]", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "objectness", "=", "boxlists", "[", "i", "]", ".", "get_field", "(", "\"objectness\"", ")", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "\n", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", "\n", ")", "\n", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_sorted", "]", "\n", "", "", "return", "boxlists", "\n", "\n", "\n", "", "", "def", "make_rpn_postprocessor", "(", "config", ",", "rpn_box_coder", ",", "is_train", ")", ":", "\n", "    ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TEST", "\n", "\n", "", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TRAIN", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.inference.make_fcos_postprocessor": [[189, 210], ["inference.FCOSPostProcessor"], "function", ["None"], ["if", "not", "is_train", ":", "\n", "        ", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TEST", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TEST", "\n", "", "nms_thresh", "=", "config", ".", "MODEL", ".", "RPN", ".", "NMS_THRESH", "\n", "min_size", "=", "config", ".", "MODEL", ".", "RPN", ".", "MIN_SIZE", "\n", "box_selector", "=", "RPNPostProcessor", "(", "\n", "pre_nms_top_n", "=", "pre_nms_top_n", ",", "\n", "post_nms_top_n", "=", "post_nms_top_n", ",", "\n", "nms_thresh", "=", "nms_thresh", ",", "\n", "min_size", "=", "min_size", ",", "\n", "box_coder", "=", "rpn_box_coder", ",", "\n", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", ",", "\n", ")", "\n", "return", "box_selector", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.fcos.FCOSHead.__init__": [[13, 78], ["super().__init__", "range", "fcos.FCOSHead.add_module", "fcos.FCOSHead.add_module", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.ModuleList", "torch.nn.ModuleList", "cls_tower.append", "cls_tower.append", "cls_tower.append", "bbox_tower.append", "bbox_tower.append", "bbox_tower.append", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "modules.modules", "math.log", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.GroupNorm", "torch.nn.ReLU", "torch.nn.ReLU", "isinstance", "maskrcnn_benchmark.layers.Scale", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "range"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            in_channels (int): number of channels of the input feature\n        \"\"\"", "\n", "super", "(", "FCOSHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# TODO: Implement the sigmoid version first.", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "FCOS", ".", "NUM_CLASSES", "-", "1", "\n", "\n", "cls_tower", "=", "[", "]", "\n", "bbox_tower", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "MODEL", ".", "FCOS", ".", "NUM_CONVS", ")", ":", "\n", "            ", "cls_tower", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", ")", "\n", "cls_tower", ".", "append", "(", "nn", ".", "GroupNorm", "(", "32", ",", "in_channels", ")", ")", "\n", "cls_tower", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "bbox_tower", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", ")", "\n", "bbox_tower", ".", "append", "(", "nn", ".", "GroupNorm", "(", "32", ",", "in_channels", ")", ")", "\n", "bbox_tower", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "self", ".", "add_module", "(", "'cls_tower'", ",", "nn", ".", "Sequential", "(", "*", "cls_tower", ")", ")", "\n", "self", ".", "add_module", "(", "'bbox_tower'", ",", "nn", ".", "Sequential", "(", "*", "bbox_tower", ")", ")", "\n", "self", ".", "cls_logits", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", "self", ".", "centerness", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", "\n", ")", "\n", "\n", "# initialization", "\n", "for", "modules", "in", "[", "self", ".", "cls_tower", ",", "self", ".", "bbox_tower", ",", "\n", "self", ".", "cls_logits", ",", "self", ".", "bbox_pred", ",", "\n", "self", ".", "centerness", "]", ":", "\n", "            ", "for", "l", "in", "modules", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "l", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n", "# initialize the bias for focal loss", "\n", "", "", "", "prior_prob", "=", "cfg", ".", "MODEL", ".", "FCOS", ".", "PRIOR_PROB", "\n", "bias_value", "=", "-", "math", ".", "log", "(", "(", "1", "-", "prior_prob", ")", "/", "prior_prob", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "self", ".", "cls_logits", ".", "bias", ",", "bias_value", ")", "\n", "\n", "self", ".", "scales", "=", "nn", ".", "ModuleList", "(", "[", "Scale", "(", "init_value", "=", "1.0", ")", "for", "_", "in", "range", "(", "5", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.fcos.FCOSHead.forward": [[79, 91], ["enumerate", "fcos.FCOSHead.cls_tower", "logits.append", "centerness.append", "bbox_reg.append", "fcos.FCOSHead.cls_logits", "fcos.FCOSHead.centerness", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "fcos.FCOSHead.bbox_pred", "fcos.FCOSHead.bbox_tower"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "logits", "=", "[", "]", "\n", "bbox_reg", "=", "[", "]", "\n", "centerness", "=", "[", "]", "\n", "for", "l", ",", "feature", "in", "enumerate", "(", "x", ")", ":", "\n", "            ", "cls_tower", "=", "self", ".", "cls_tower", "(", "feature", ")", "\n", "logits", ".", "append", "(", "self", ".", "cls_logits", "(", "cls_tower", ")", ")", "\n", "centerness", ".", "append", "(", "self", ".", "centerness", "(", "cls_tower", ")", ")", "\n", "bbox_reg", ".", "append", "(", "torch", ".", "exp", "(", "self", ".", "scales", "[", "l", "]", "(", "\n", "self", ".", "bbox_pred", "(", "self", ".", "bbox_tower", "(", "feature", ")", ")", "\n", ")", ")", ")", "\n", "", "return", "logits", ",", "bbox_reg", ",", "centerness", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.fcos.FCOSModule.__init__": [[99, 115], ["super().__init__", "cfg.clone", "fcos.FCOSHead", "inference.make_fcos_postprocessor", "inference.make_fcos_postprocessor", "loss.make_fcos_loss_evaluator"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.inference.make_fcos_postprocessor", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.inference.make_fcos_postprocessor", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.loss.make_fcos_loss_evaluator"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FCOSModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "\n", "head", "=", "FCOSHead", "(", "cfg", ",", "in_channels", ")", "\n", "\n", "box_selector_train", "=", "make_fcos_postprocessor", "(", "cfg", ",", "is_train", "=", "True", ")", "\n", "box_selector_test", "=", "make_fcos_postprocessor", "(", "cfg", ")", "\n", "\n", "loss_evaluator", "=", "make_fcos_loss_evaluator", "(", "cfg", ")", "\n", "self", ".", "head", "=", "head", "\n", "self", ".", "box_selector_train", "=", "box_selector_train", "\n", "self", ".", "box_selector_test", "=", "box_selector_test", "\n", "self", ".", "loss_evaluator", "=", "loss_evaluator", "\n", "self", ".", "fpn_strides", "=", "cfg", ".", "MODEL", ".", "FCOS", ".", "FPN_STRIDES", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.fcos.FCOSModule.forward": [[116, 144], ["fcos.FCOSModule.head", "fcos.FCOSModule.compute_locations", "fcos.FCOSModule._forward_train", "fcos.FCOSModule._forward_test"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.fcos.FCOSModule.compute_locations", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.fcos.FCOSModule._forward_train", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.fcos.FCOSModule._forward_test"], ["", "def", "forward", "(", "self", ",", "images", ",", "features", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            images (ImageList): images for which we want to compute the predictions\n            features (list[Tensor]): features computed from the images that are\n                used for computing the predictions. Each tensor in the list\n                correspond to different feature levels\n            targets (list[BoxList): ground-truth boxes present in the image (optional)\n\n        Returns:\n            boxes (list[BoxList]): the predicted boxes from the RPN, one BoxList per\n                image.\n            losses (dict[Tensor]): the losses for the model during training. During\n                testing, it is an empty dict.\n        \"\"\"", "\n", "box_cls", ",", "box_regression", ",", "centerness", "=", "self", ".", "head", "(", "features", ")", "\n", "locations", "=", "self", ".", "compute_locations", "(", "features", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_forward_train", "(", "\n", "locations", ",", "box_cls", ",", "\n", "box_regression", ",", "\n", "centerness", ",", "targets", ",", "images", ".", "image_sizes", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_forward_test", "(", "\n", "locations", ",", "box_cls", ",", "box_regression", ",", "\n", "centerness", ",", "images", ".", "image_sizes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.fcos.FCOSModule._forward_train": [[146, 164], ["fcos.FCOSModule.loss_evaluator", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "fcos.FCOSModule.box_selector_train"], "methods", ["None"], ["", "", "def", "_forward_train", "(", "self", ",", "locations", ",", "box_cls", ",", "box_regression", ",", "\n", "centerness", ",", "targets", ",", "image_sizes", ")", ":", "\n", "        ", "loss_box_cls", ",", "loss_box_reg", ",", "loss_centerness", "=", "self", ".", "loss_evaluator", "(", "\n", "locations", ",", "box_cls", ",", "box_regression", ",", "centerness", ",", "targets", "\n", ")", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "RPN_ONLY", ":", "\n", "            ", "boxes", "=", "None", "\n", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "boxes", "=", "self", ".", "box_selector_train", "(", "\n", "locations", ",", "box_cls", ",", "box_regression", ",", "\n", "centerness", ",", "image_sizes", ")", "\n", "", "", "losses", "=", "{", "\n", "\"loss_cls\"", ":", "loss_box_cls", ",", "\n", "\"loss_reg\"", ":", "loss_box_reg", ",", "\n", "\"loss_centerness\"", ":", "loss_centerness", "\n", "}", "\n", "return", "boxes", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.fcos.FCOSModule._forward_test": [[165, 171], ["fcos.FCOSModule.box_selector_test"], "methods", ["None"], ["", "def", "_forward_test", "(", "self", ",", "locations", ",", "box_cls", ",", "box_regression", ",", "centerness", ",", "image_sizes", ")", ":", "\n", "        ", "boxes", "=", "self", ".", "box_selector_test", "(", "\n", "locations", ",", "box_cls", ",", "box_regression", ",", "\n", "centerness", ",", "image_sizes", "\n", ")", "\n", "return", "boxes", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.fcos.FCOSModule.compute_locations": [[172, 182], ["enumerate", "fcos.FCOSModule.compute_locations_per_level", "locations.append", "feature.size"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.fcos.FCOSModule.compute_locations_per_level"], ["", "def", "compute_locations", "(", "self", ",", "features", ")", ":", "\n", "        ", "locations", "=", "[", "]", "\n", "for", "level", ",", "feature", "in", "enumerate", "(", "features", ")", ":", "\n", "            ", "h", ",", "w", "=", "feature", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "locations_per_level", "=", "self", ".", "compute_locations_per_level", "(", "\n", "h", ",", "w", ",", "self", ".", "fpn_strides", "[", "level", "]", ",", "\n", "feature", ".", "device", "\n", ")", "\n", "locations", ".", "append", "(", "locations_per_level", ")", "\n", "", "return", "locations", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.fcos.FCOSModule.compute_locations_per_level": [[183, 197], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "shift_x.reshape.reshape.reshape", "shift_y.reshape.reshape.reshape", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "compute_locations_per_level", "(", "self", ",", "h", ",", "w", ",", "stride", ",", "device", ")", ":", "\n", "        ", "shifts_x", "=", "torch", ".", "arange", "(", "\n", "0", ",", "w", "*", "stride", ",", "step", "=", "stride", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n", "shifts_y", "=", "torch", ".", "arange", "(", "\n", "0", ",", "h", "*", "stride", ",", "step", "=", "stride", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", "\n", ")", "\n", "shift_y", ",", "shift_x", "=", "torch", ".", "meshgrid", "(", "shifts_y", ",", "shifts_x", ")", "\n", "shift_x", "=", "shift_x", ".", "reshape", "(", "-", "1", ")", "\n", "shift_y", "=", "shift_y", ".", "reshape", "(", "-", "1", ")", "\n", "locations", "=", "torch", ".", "stack", "(", "(", "shift_x", ",", "shift_y", ")", ",", "dim", "=", "1", ")", "+", "stride", "//", "2", "\n", "return", "locations", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.fcos.build_fcos": [[198, 200], ["fcos.FCOSModule"], "function", ["None"], ["", "", "def", "build_fcos", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "return", "FCOSModule", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.loss.FCOSLossComputation.__init__": [[27, 44], ["maskrcnn_benchmark.layers.SigmoidFocalLoss", "maskrcnn_benchmark.layers.IOULoss", "torch.nn.BCEWithLogitsLoss", "soi.append", "soi.append"], "methods", ["None"], ["generate_labels_func", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposal_matcher (Matcher)\n            fg_bg_sampler (BalancedPositiveNegativeSampler)\n            box_coder (BoxCoder)\n        \"\"\"", "\n", "# self.target_preparator = target_preparator", "\n", "self", ".", "proposal_matcher", "=", "proposal_matcher", "\n", "self", ".", "fg_bg_sampler", "=", "fg_bg_sampler", "\n", "self", ".", "box_coder", "=", "box_coder", "\n", "self", ".", "copied_fields", "=", "[", "]", "\n", "self", ".", "generate_labels_func", "=", "generate_labels_func", "\n", "self", ".", "discard_cases", "=", "[", "'not_visibility'", ",", "'between_thresholds'", "]", "\n", "\n", "", "def", "match_targets_to_anchors", "(", "self", ",", "anchor", ",", "target", ",", "copied_fields", "=", "[", "]", ")", ":", "\n", "        ", "match_quality_matrix", "=", "boxlist_iou", "(", "target", ",", "anchor", ")", "\n", "matched_idxs", "=", "self", ".", "proposal_matcher", "(", "match_quality_matrix", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.loss.FCOSLossComputation.prepare_targets": [[45, 77], ["enumerate", "torch.cat", "torch.cat", "loss.FCOSLossComputation.compute_targets_for_locations", "range", "range", "points_per_level.new_tensor", "torch.cat.append", "len", "len", "torch.split", "torch.split", "len", "labels_level_first.append", "reg_targets_level_first.append", "object_sizes_of_interest_per_level[].expand", "torch.cat", "torch.cat", "len"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.loss.FCOSLossComputation.compute_targets_for_locations", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat"], ["# RPN doesn't need any fields from target", "\n", "# for creating the labels, so clear them all", "\n", "target", "=", "target", ".", "copy_with_fields", "(", "copied_fields", ")", "\n", "# get the targets corresponding GT for each anchor", "\n", "# NB: need to clamp the indices because we can have a single", "\n", "# GT in the image, and matched_idxs can be -2, which goes", "\n", "# out of bounds", "\n", "matched_targets", "=", "target", "[", "matched_idxs", ".", "clamp", "(", "min", "=", "0", ")", "]", "\n", "matched_targets", ".", "add_field", "(", "\"matched_idxs\"", ",", "matched_idxs", ")", "\n", "return", "matched_targets", "\n", "\n", "", "def", "prepare_targets", "(", "self", ",", "anchors", ",", "targets", ")", ":", "\n", "        ", "labels", "=", "[", "]", "\n", "regression_targets", "=", "[", "]", "\n", "for", "anchors_per_image", ",", "targets_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n", "            ", "matched_targets", "=", "self", ".", "match_targets_to_anchors", "(", "\n", "anchors_per_image", ",", "targets_per_image", ",", "self", ".", "copied_fields", "\n", ")", "\n", "\n", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "self", ".", "generate_labels_func", "(", "matched_targets", ")", "\n", "labels_per_image", "=", "labels_per_image", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# Background (negative examples)", "\n", "bg_indices", "=", "matched_idxs", "==", "Matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "labels_per_image", "[", "bg_indices", "]", "=", "0", "\n", "\n", "# discard anchors that go out of the boundaries of the image", "\n", "if", "\"not_visibility\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "labels_per_image", "[", "~", "anchors_per_image", ".", "get_field", "(", "\"visibility\"", ")", "]", "=", "-", "1", "\n", "\n", "# discard indices that are between thresholds", "\n", "", "if", "\"between_thresholds\"", "in", "self", ".", "discard_cases", ":", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.loss.FCOSLossComputation.compute_targets_for_locations": [[78, 120], ["range", "len", "targets_per_im.get_field", "targets_per_im.area", "torch.stack", "area[].repeat", "area[].repeat.min", "labels.append", "reg_targets.append", "torch.stack.max", "len", "torch.stack.min", "range", "len"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.area"], ["                ", "inds_to_discard", "=", "matched_idxs", "==", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_per_image", "[", "inds_to_discard", "]", "=", "-", "1", "\n", "\n", "# compute regression targets", "\n", "", "regression_targets_per_image", "=", "self", ".", "box_coder", ".", "encode", "(", "\n", "matched_targets", ".", "bbox", ",", "anchors_per_image", ".", "bbox", "\n", ")", "\n", "\n", "labels", ".", "append", "(", "labels_per_image", ")", "\n", "regression_targets", ".", "append", "(", "regression_targets_per_image", ")", "\n", "\n", "", "return", "labels", ",", "regression_targets", "\n", "\n", "\n", "", "def", "__call__", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors (list[BoxList])\n            objectness (list[Tensor])\n            box_regression (list[Tensor])\n            targets (list[BoxList])\n\n        Returns:\n            objectness_loss (Tensor)\n            box_loss (Tensor\n        \"\"\"", "\n", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "anchors_per_image", "in", "anchors", "]", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_pos_inds", ",", "sampled_neg_inds", "]", ",", "dim", "=", "0", ")", "\n", "\n", "objectness", ",", "box_regression", "=", "concat_box_prediction_layers", "(", "objectness", ",", "box_regression", ")", "\n", "\n", "objectness", "=", "objectness", ".", "squeeze", "(", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "regression_targets", "=", "torch", ".", "cat", "(", "regression_targets", ",", "dim", "=", "0", ")", "\n", "\n", "box_loss", "=", "smooth_l1_loss", "(", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.loss.FCOSLossComputation.compute_centerness_targets": [[121, 127], ["torch.sqrt", "left_right.min", "left_right.max", "top_bottom.min", "top_bottom.max"], "methods", ["None"], ["box_regression", "[", "sampled_pos_inds", "]", ",", "\n", "regression_targets", "[", "sampled_pos_inds", "]", ",", "\n", "beta", "=", "1.0", "/", "9", ",", "\n", "size_average", "=", "False", ",", "\n", ")", "/", "(", "sampled_inds", ".", "numel", "(", ")", ")", "\n", "\n", "objectness_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.loss.FCOSLossComputation.__call__": [[128, 190], ["box_cls[].size", "box_cls[].size", "loss.FCOSLossComputation.prepare_targets", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nonzero().squeeze", "len", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "loss.FCOSLossComputation.cls_loss_func", "torch.nonzero().squeeze.numel", "loss.FCOSLossComputation.compute_centerness_targets", "loss.FCOSLossComputation.box_reg_loss_func", "loss.FCOSLossComputation.centerness_loss_func", "torch.cat.sum", "torch.cat.sum", "box_cls[].permute().reshape", "box_regression[].permute().reshape", "labels[].reshape", "reg_targets[].reshape", "centerness[].reshape", "torch.nonzero", "torch.cat.int", "torch.nonzero().squeeze.numel", "box_cls[].permute", "box_regression[].permute"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.KeypointRCNNLossComputation.prepare_targets", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.loss.FCOSLossComputation.compute_centerness_targets"], ["objectness", "[", "sampled_inds", "]", ",", "labels", "[", "sampled_inds", "]", "\n", ")", "\n", "\n", "return", "objectness_loss", ",", "box_loss", "\n", "\n", "# This function should be overwritten in RetinaNet", "\n", "", "", "def", "generate_rpn_labels", "(", "matched_targets", ")", ":", "\n", "    ", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "matched_idxs", ">=", "0", "\n", "return", "labels_per_image", "\n", "\n", "\n", "", "def", "make_rpn_loss_evaluator", "(", "cfg", ",", "box_coder", ")", ":", "\n", "    ", "matcher", "=", "Matcher", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "FG_IOU_THRESHOLD", ",", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BG_IOU_THRESHOLD", ",", "\n", "allow_low_quality_matches", "=", "True", ",", "\n", ")", "\n", "\n", "fg_bg_sampler", "=", "BalancedPositiveNegativeSampler", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BATCH_SIZE_PER_IMAGE", ",", "cfg", ".", "MODEL", ".", "RPN", ".", "POSITIVE_FRACTION", "\n", ")", "\n", "\n", "loss_evaluator", "=", "RPNLossComputation", "(", "\n", "matcher", ",", "\n", "fg_bg_sampler", ",", "\n", "box_coder", ",", "\n", "generate_rpn_labels", "\n", ")", "\n", "return", "loss_evaluator", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.fcos.loss.make_fcos_loss_evaluator": [[192, 195], ["loss.FCOSLossComputation"], "function", ["None"], []], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.roi_heads.roi_heads.CombinedROIHeads.__init__": [[15, 24], ["super().__init__", "cfg.clone"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ",", "heads", ")", ":", "\n", "        ", "super", "(", "CombinedROIHeads", ",", "self", ")", ".", "__init__", "(", "heads", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "if", "cfg", ".", "MODEL", ".", "MASK_ON", "and", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "SHARE_BOX_FEATURE_EXTRACTOR", ":", "\n", "            ", "self", ".", "mask", ".", "feature_extractor", "=", "self", ".", "box", ".", "feature_extractor", "\n", "", "if", "cfg", ".", "MODEL", ".", "KE_ON", "and", "cfg", ".", "MODEL", ".", "ROI_KE_HEAD", ".", "SHARE_BOX_FEATURE_EXTRACTOR", ":", "\n", "            ", "self", ".", "ke", ".", "feature_extractor", "=", "self", ".", "box", ".", "feature_extractor", "\n", "", "if", "cfg", ".", "MODEL", ".", "KEYPOINT_ON", "and", "cfg", ".", "MODEL", ".", "ROI_KEYPOINT_HEAD", ".", "SHARE_BOX_FEATURE_EXTRACTOR", ":", "\n", "            ", "self", ".", "keypoint", ".", "feature_extractor", "=", "self", ".", "box", ".", "feature_extractor", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.roi_heads.roi_heads.CombinedROIHeads.forward": [[25, 77], ["roi_heads.CombinedROIHeads.box", "losses.update", "roi_heads.CombinedROIHeads.mask", "losses.update", "roi_heads.CombinedROIHeads.keypoint", "losses.update", "roi_heads.CombinedROIHeads.ke", "losses.update", "losses.update"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update"], ["", "", "def", "forward", "(", "self", ",", "features", ",", "proposals", ",", "targets", "=", "None", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        prefix (str): Some model may use auxiliary heads which don't share rpn,\n        use this to separate the loss names\n        \"\"\"", "\n", "losses", "=", "{", "}", "\n", "# TODO rename x to roi_box_features, if it doesn't increase memory consumption", "\n", "x", ",", "detections", ",", "loss_box", "=", "self", ".", "box", "(", "features", ",", "proposals", ",", "targets", ")", "\n", "losses", ".", "update", "(", "loss_box", ")", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "            ", "mask_features", "=", "features", "\n", "# optimization: during training, if we share the feature extractor between", "\n", "# the box and the mask heads, then we can reuse the features already computed", "\n", "if", "(", "\n", "self", ".", "training", "\n", "and", "self", ".", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "SHARE_BOX_FEATURE_EXTRACTOR", "\n", ")", ":", "\n", "                ", "mask_features", "=", "x", "\n", "# During training, self.box() will return the unaltered proposals as \"detections\"", "\n", "# this makes the API consistent during training and testing", "\n", "", "x", ",", "detections", ",", "loss_mask", "=", "self", ".", "mask", "(", "mask_features", ",", "detections", ",", "targets", ")", "\n", "losses", ".", "update", "(", "loss_mask", ")", "\n", "\n", "", "if", "self", ".", "cfg", ".", "MODEL", ".", "KEYPOINT_ON", ":", "\n", "            ", "keypoint_features", "=", "features", "\n", "# optimization: during training, if we share the feature extractor between", "\n", "# the box and the mask heads, then we can reuse the features already computed", "\n", "if", "(", "\n", "self", ".", "training", "\n", "and", "self", ".", "cfg", ".", "MODEL", ".", "ROI_KEYPOINT_HEAD", ".", "SHARE_BOX_FEATURE_EXTRACTOR", "\n", ")", ":", "\n", "                ", "keypoint_features", "=", "x", "\n", "# During training, self.box() will return the unaltered proposals as \"detections\"", "\n", "# this makes the API consistent during training and testing", "\n", "", "x", ",", "detections", ",", "loss_keypoint", "=", "self", ".", "keypoint", "(", "keypoint_features", ",", "detections", ",", "targets", ")", "\n", "losses", ".", "update", "(", "loss_keypoint", ")", "\n", "\n", "\n", "# BDN KE", "\n", "", "if", "self", ".", "cfg", ".", "MODEL", ".", "KE_ON", ":", "\n", "            ", "ke_features", "=", "features", "\n", "if", "(", "\n", "self", ".", "training", "\n", "and", "self", ".", "cfg", ".", "MODEL", ".", "ROI_KE_HEAD", ".", "SHARE_BOX_FEATURE_EXTRACTOR", "\n", ")", ":", "\n", "                ", "ke_features", "=", "x", "\n", "", "x", ",", "detections", ",", "loss_ke", ",", "loss_mty", "=", "self", ".", "ke", "(", "ke_features", ",", "detections", ",", "targets", ")", "\n", "losses", ".", "update", "(", "loss_ke", ")", "\n", "losses", ".", "update", "(", "loss_mty", ")", "\n", "\n", "", "losses", "=", "{", "prefix", "+", "k", ":", "losses", "[", "k", "]", "for", "k", "in", "losses", "}", "\n", "return", "x", ",", "detections", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.roi_heads.roi_heads.build_roi_heads": [[79, 100], ["CombinedROIHeads.append", "CombinedROIHeads.append", "CombinedROIHeads.append", "CombinedROIHeads.append", "roi_heads.CombinedROIHeads", "box_head.box_head.build_roi_box_head", "mask_head.mask_head.build_roi_mask_head", "keypoint_head.keypoint_head.build_roi_keypoint_head", "ke_head.ke_head.build_roi_ke_head"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.box_head.build_roi_box_head", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.mask_head.build_roi_mask_head", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.keypoint_head.build_roi_keypoint_head", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.ke_head.build_roi_ke_head"], ["", "", "def", "build_roi_heads", "(", "cfg", ",", "in_channels", ")", ":", "\n", "# individually create the heads, that will be combined together", "\n", "# afterwards", "\n", "    ", "roi_heads", "=", "[", "]", "\n", "if", "cfg", ".", "MODEL", ".", "RETINANET_ON", ":", "\n", "        ", "return", "[", "]", "\n", "\n", "", "if", "not", "cfg", ".", "MODEL", ".", "RPN_ONLY", ":", "\n", "        ", "roi_heads", ".", "append", "(", "(", "\"box\"", ",", "build_roi_box_head", "(", "cfg", ",", "in_channels", ")", ")", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "        ", "roi_heads", ".", "append", "(", "(", "\"mask\"", ",", "build_roi_mask_head", "(", "cfg", ",", "in_channels", ")", ")", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "KEYPOINT_ON", ":", "\n", "        ", "roi_heads", ".", "append", "(", "(", "\"keypoint\"", ",", "build_roi_keypoint_head", "(", "cfg", ",", "in_channels", ")", ")", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "KE_ON", ":", "\n", "        ", "roi_heads", ".", "append", "(", "(", "\"ke\"", ",", "build_roi_ke_head", "(", "cfg", ",", "in_channels", ")", ")", ")", "\n", "\n", "# combine individual heads in a single module", "\n", "", "if", "roi_heads", ":", "\n", "        ", "roi_heads", "=", "CombinedROIHeads", "(", "cfg", ",", "roi_heads", ")", "\n", "\n", "", "return", "roi_heads", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.mask_head.ROIMaskHead.__init__": [[37, 45], ["super().__init__", "cfg.clone", "roi_mask_feature_extractors.make_roi_mask_feature_extractor", "roi_mask_predictors.make_roi_mask_predictor", "inference.make_roi_mask_post_processor", "loss.make_roi_mask_loss_evaluator"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.roi_mask_feature_extractors.make_roi_mask_feature_extractor", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.roi_mask_predictors.make_roi_mask_predictor", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.inference.make_roi_mask_post_processor", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.loss.make_roi_mask_loss_evaluator"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "ROIMaskHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "self", ".", "feature_extractor", "=", "make_roi_mask_feature_extractor", "(", "cfg", ",", "in_channels", ")", "\n", "self", ".", "predictor", "=", "make_roi_mask_predictor", "(", "\n", "cfg", ",", "self", ".", "feature_extractor", ".", "out_channels", ")", "\n", "self", ".", "post_processor", "=", "make_roi_mask_post_processor", "(", "cfg", ")", "\n", "self", ".", "loss_evaluator", "=", "make_roi_mask_loss_evaluator", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.mask_head.ROIMaskHead.forward": [[46, 80], ["mask_head.ROIMaskHead.predictor", "mask_head.ROIMaskHead.loss_evaluator", "mask_head.keep_only_positive_boxes", "mask_head.ROIMaskHead.feature_extractor", "mask_head.ROIMaskHead.post_processor", "dict", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.ke_head.keep_only_positive_boxes", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat"], ["", "def", "forward", "(", "self", ",", "features", ",", "proposals", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            features (list[Tensor]): feature-maps from possibly several levels\n            proposals (list[BoxList]): proposal boxes\n            targets (list[BoxList], optional): the ground-truth targets.\n\n        Returns:\n            x (Tensor): the result of the feature extractor\n            proposals (list[BoxList]): during training, the original proposals\n                are returned. During testing, the predicted boxlists are returned\n                with the `mask` field set\n            losses (dict[Tensor]): During training, returns the losses for the\n                head. During testing, returns an empty dict.\n        \"\"\"", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# during training, only focus on positive boxes", "\n", "            ", "all_proposals", "=", "proposals", "\n", "proposals", ",", "positive_inds", "=", "keep_only_positive_boxes", "(", "proposals", ")", "\n", "", "if", "self", ".", "training", "and", "self", ".", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "SHARE_BOX_FEATURE_EXTRACTOR", ":", "\n", "            ", "x", "=", "features", "\n", "x", "=", "x", "[", "torch", ".", "cat", "(", "positive_inds", ",", "dim", "=", "0", ")", "]", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "feature_extractor", "(", "features", ",", "proposals", ")", "\n", "", "mask_logits", "=", "self", ".", "predictor", "(", "x", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "result", "=", "self", ".", "post_processor", "(", "mask_logits", ",", "proposals", ")", "\n", "return", "x", ",", "result", ",", "{", "}", "\n", "\n", "", "loss_mask", "=", "self", ".", "loss_evaluator", "(", "proposals", ",", "mask_logits", ",", "targets", ")", "\n", "\n", "return", "x", ",", "all_proposals", ",", "dict", "(", "loss_mask", "=", "loss_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.mask_head.keep_only_positive_boxes": [[13, 34], ["isinstance", "isinstance", "boxes[].has_field", "boxes_per_image.get_field", "inds_mask.nonzero().squeeze", "positive_boxes.append", "positive_inds.append", "inds_mask.nonzero"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.has_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["def", "keep_only_positive_boxes", "(", "boxes", ")", ":", "\n", "    ", "\"\"\"\n    Given a set of BoxList containing the `labels` field,\n    return a set of BoxList for which `labels > 0`.\n\n    Arguments:\n        boxes (list of BoxList)\n    \"\"\"", "\n", "assert", "isinstance", "(", "boxes", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "isinstance", "(", "boxes", "[", "0", "]", ",", "BoxList", ")", "\n", "assert", "boxes", "[", "0", "]", ".", "has_field", "(", "\"labels\"", ")", "\n", "positive_boxes", "=", "[", "]", "\n", "positive_inds", "=", "[", "]", "\n", "num_boxes", "=", "0", "\n", "for", "boxes_per_image", "in", "boxes", ":", "\n", "        ", "labels", "=", "boxes_per_image", ".", "get_field", "(", "\"labels\"", ")", "\n", "inds_mask", "=", "labels", ">", "0", "\n", "inds", "=", "inds_mask", ".", "nonzero", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "positive_boxes", ".", "append", "(", "boxes_per_image", "[", "inds", "]", ")", "\n", "positive_inds", ".", "append", "(", "inds_mask", ")", "\n", "", "return", "positive_boxes", ",", "positive_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.mask_head.build_roi_mask_head": [[82, 84], ["mask_head.ROIMaskHead"], "function", ["None"], ["", "", "def", "build_roi_mask_head", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "return", "ROIMaskHead", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.roi_mask_predictors.MaskRCNNC4Predictor.__init__": [[12, 28], ["torch.nn.Module.__init__", "maskrcnn_benchmark.layers.ConvTranspose2d", "maskrcnn_benchmark.layers.Conv2d", "roi_mask_predictors.MaskRCNNC4Predictor.named_parameters", "torch.nn.init.constant_", "torch.nn.init.kaiming_normal_"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "MaskRCNNC4Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_CLASSES", "\n", "dim_reduced", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "CONV_LAYERS", "[", "-", "1", "]", "\n", "num_inputs", "=", "in_channels", "\n", "\n", "self", ".", "conv5_mask", "=", "ConvTranspose2d", "(", "num_inputs", ",", "dim_reduced", ",", "2", ",", "2", ",", "0", ")", "\n", "self", ".", "mask_fcn_logits", "=", "Conv2d", "(", "dim_reduced", ",", "num_classes", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"bias\"", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0", ")", "\n", "", "elif", "\"weight\"", "in", "name", ":", "\n", "# Caffe2 implementation uses MSRAFill, which in fact", "\n", "# corresponds to kaiming_normal_ in PyTorch", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "param", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.roi_mask_predictors.MaskRCNNC4Predictor.forward": [[29, 32], ["torch.nn.functional.relu", "roi_mask_predictors.MaskRCNNC4Predictor.mask_fcn_logits", "roi_mask_predictors.MaskRCNNC4Predictor.conv5_mask"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv5_mask", "(", "x", ")", ")", "\n", "return", "self", ".", "mask_fcn_logits", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.roi_mask_predictors.MaskRCNNConv1x1Predictor.__init__": [[36, 50], ["torch.nn.Module.__init__", "maskrcnn_benchmark.layers.Conv2d", "roi_mask_predictors.MaskRCNNConv1x1Predictor.named_parameters", "torch.nn.init.constant_", "torch.nn.init.kaiming_normal_"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "MaskRCNNConv1x1Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_CLASSES", "\n", "num_inputs", "=", "in_channels", "\n", "\n", "self", ".", "mask_fcn_logits", "=", "Conv2d", "(", "num_inputs", ",", "num_classes", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"bias\"", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0", ")", "\n", "", "elif", "\"weight\"", "in", "name", ":", "\n", "# Caffe2 implementation uses MSRAFill, which in fact", "\n", "# corresponds to kaiming_normal_ in PyTorch", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "param", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.roi_mask_predictors.MaskRCNNConv1x1Predictor.forward": [[51, 53], ["roi_mask_predictors.MaskRCNNConv1x1Predictor.mask_fcn_logits"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "mask_fcn_logits", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.roi_mask_predictors.make_roi_mask_predictor": [[55, 58], ["func"], "function", ["None"], ["", "", "def", "make_roi_mask_predictor", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "func", "=", "registry", ".", "ROI_MASK_PREDICTOR", "[", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "PREDICTOR", "]", "\n", "return", "func", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.inference.MaskPostProcessor.__init__": [[23, 26], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.inference.MaskPostProcessor.forward": [[27, 62], ["x.sigmoid", "torch.cat", "torch.arange", "inference.MaskPostProcessor.split", "zip", "maskrcnn_benchmark.structures.bounding_box.BoxList.get_field", "len", "inference.MaskPostProcessor.masker", "maskrcnn_benchmark.structures.bounding_box.BoxList", "box.fields", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "results.append", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "box.get_field"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], [")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            pre_nms_top_n (int)\n            post_nms_top_n (int)\n            nms_thresh (float)\n            min_size (int)\n            box_coder (BoxCoder)\n            fpn_post_nms_top_n (int)\n        \"\"\"", "\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n", "if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "\n", "", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "# later cat of bbox requires all fields to be present for all bbox", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.inference.MaskPostProcessorCOCOFormat.forward": [[71, 86], ["inference.MaskPostProcessor.forward", "result.get_field().cpu", "result.add_field", "rle[].decode", "result.get_field", "mask_util.encode", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.iou_loss.IOULoss.forward", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.box_coder.BoxCoder.decode", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.box_coder.BoxCoder.encode"], ["\n", "return", "proposals", "\n", "\n", "", "def", "forward_for_single_feature_map", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n", "objectness", "=", "permute_and_flatten", "(", "objectness", ",", "N", ",", "A", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "objectness", "=", "objectness", ".", "sigmoid", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.inference.Masker.__init__": [[163, 166], ["None"], "methods", ["None"], ["box_sizes", "=", "[", "len", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", ")", "\n", "inds_mask", "=", "torch", ".", "zeros_like", "(", "objectness", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.inference.Masker.forward_single_image": [[167, 179], ["boxes.convert.convert.convert", "inference.paste_mask_in_image", "len", "masks.new_empty", "zip", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.inference.paste_mask_in_image"], ["inds_mask", "[", "inds_sorted", "]", "=", "1", "\n", "inds_mask", "=", "inds_mask", ".", "split", "(", "box_sizes", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_mask", "[", "i", "]", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "objectness", "=", "boxlists", "[", "i", "]", ".", "get_field", "(", "\"objectness\"", ")", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "\n", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", "\n", ")", "\n", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_sorted", "]", "\n", "", "", "return", "boxlists", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.inference.Masker.__call__": [[180, 195], ["isinstance", "zip", "len", "len", "inference.Masker.forward_single_image", "results.append", "len"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.KEer.forward_single_image"], ["\n", "\n", "", "", "def", "make_rpn_postprocessor", "(", "config", ",", "rpn_box_coder", ",", "is_train", ")", ":", "\n", "    ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TEST", "\n", "\n", "", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TRAIN", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TEST", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TEST", "\n", "", "nms_thresh", "=", "config", ".", "MODEL", ".", "RPN", ".", "NMS_THRESH", "\n", "min_size", "=", "config", ".", "MODEL", ".", "RPN", ".", "MIN_SIZE", "\n", "box_selector", "=", "RPNPostProcessor", "(", "\n", "pre_nms_top_n", "=", "pre_nms_top_n", ",", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.inference.expand_boxes": [[91, 106], ["torch.zeros_like"], "function", ["None"], ["\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n", "box_regression", "=", "box_regression", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "anchors", "]", "\n", "concat_anchors", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "concat_anchors", "=", "concat_anchors", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "-", "1", ",", "4", ")", ",", "concat_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "proposals", "=", "proposals", ".", "view", "(", "N", ",", "-", "1", ",", "4", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.inference.expand_masks": [[108, 116], ["mask.new_zeros", "float"], "function", ["None"], ["result", "=", "[", "]", "\n", "for", "proposal", ",", "score", ",", "im_shape", "in", "zip", "(", "proposals", ",", "objectness", ",", "image_shapes", ")", ":", "\n", "            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "boxlist", "=", "remove_small_boxes", "(", "boxlist", ",", "self", ".", "min_size", ")", "\n", "boxlist", "=", "boxlist_nms", "(", "\n", "boxlist", ",", "\n", "self", ".", "nms_thresh", ",", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.inference.paste_mask_in_image": [[118, 155], ["inference.expand_masks", "box.to.to", "int", "int", "max", "max", "maskrcnn_benchmark.layers.misc.interpolate.expand", "maskrcnn_benchmark.layers.misc.interpolate.to", "maskrcnn_benchmark.layers.misc.interpolate", "torch.zeros", "max", "min", "max", "min", "inference.expand_boxes"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.inference.expand_masks", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc.interpolate", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.expand_boxes"], ["score_field", "=", "\"objectness\"", ",", "\n", ")", "\n", "result", ".", "append", "(", "boxlist", ")", "\n", "", "return", "result", "\n", "\n", "", "def", "forward", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[list[BoxList]]\n            objectness: list[tensor]\n            box_regression: list[tensor]\n\n        Returns:\n            boxlists (list[BoxList]): the post-processed anchors, after\n                applying box decoding and NMS\n        \"\"\"", "\n", "sampled_boxes", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "objectness", ")", "\n", "anchors", "=", "list", "(", "zip", "(", "*", "anchors", ")", ")", "\n", "for", "a", ",", "o", ",", "b", "in", "zip", "(", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "            ", "sampled_boxes", ".", "append", "(", "self", ".", "forward_for_single_feature_map", "(", "a", ",", "o", ",", "b", ")", ")", "\n", "\n", "", "boxlists", "=", "list", "(", "zip", "(", "*", "sampled_boxes", ")", ")", "\n", "boxlists", "=", "[", "cat_boxlist", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "\n", "if", "num_levels", ">", "1", ":", "\n", "            ", "boxlists", "=", "self", ".", "select_over_all_levels", "(", "boxlists", ")", "\n", "\n", "# append ground-truth bboxes to proposals", "\n", "", "if", "self", ".", "training", "and", "targets", "is", "not", "None", ":", "\n", "            ", "boxlists", "=", "self", ".", "add_gt_proposals", "(", "boxlists", ",", "targets", ")", "\n", "\n", "", "return", "boxlists", "\n", "\n", "", "def", "select_over_all_levels", "(", "self", ",", "boxlists", ")", ":", "\n", "        ", "num_images", "=", "len", "(", "boxlists", ")", "\n", "# different behavior during training and during testing:", "\n", "# during training, post_nms_top_n is over *all* the proposals combined, while", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.inference.make_roi_mask_post_processor": [[197, 205], ["inference.MaskPostProcessor", "inference.Masker"], "function", ["None"], ["nms_thresh", "=", "nms_thresh", ",", "\n", "min_size", "=", "min_size", ",", "\n", "box_coder", "=", "rpn_box_coder", ",", "\n", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", ",", "\n", ")", "\n", "return", "box_selector", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.roi_mask_feature_extractors.MaskRCNNFPNFeatureExtractor.__init__": [[22, 59], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.poolers.Pooler", "enumerate", "maskrcnn_benchmark.modeling.make_layers.make_conv3x3", "roi_mask_feature_extractors.MaskRCNNFPNFeatureExtractor.add_module", "roi_mask_feature_extractors.MaskRCNNFPNFeatureExtractor.blocks.append"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.make_layers.make_conv3x3"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            num_classes (int): number of output classes\n            input_size (int): number of channels of the input once it's flattened\n            representation_size (int): size of the intermediate representation\n        \"\"\"", "\n", "super", "(", "MaskRCNNFPNFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "resolution", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "POOLER_RESOLUTION", "\n", "scales", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "POOLER_SCALES", "\n", "sampling_ratio", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "POOLER_SAMPLING_RATIO", "\n", "pooler", "=", "Pooler", "(", "\n", "output_size", "=", "(", "resolution", ",", "resolution", ")", ",", "\n", "scales", "=", "scales", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", "deformable", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "DEFORM_POOLING", "\n", ")", "\n", "input_size", "=", "in_channels", "\n", "self", ".", "pooler", "=", "pooler", "\n", "\n", "use_gn", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "USE_GN", "\n", "layers", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "CONV_LAYERS", "\n", "dilation", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "DILATION", "\n", "\n", "next_feature", "=", "input_size", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "layer_idx", ",", "layer_features", "in", "enumerate", "(", "layers", ",", "1", ")", ":", "\n", "            ", "layer_name", "=", "\"mask_fcn{}\"", ".", "format", "(", "layer_idx", ")", "\n", "module", "=", "make_conv3x3", "(", "\n", "next_feature", ",", "layer_features", ",", "\n", "dilation", "=", "dilation", ",", "stride", "=", "1", ",", "use_gn", "=", "use_gn", "\n", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "module", ")", "\n", "next_feature", "=", "layer_features", "\n", "self", ".", "blocks", ".", "append", "(", "layer_name", ")", "\n", "", "self", ".", "out_channels", "=", "layer_features", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.roi_mask_feature_extractors.MaskRCNNFPNFeatureExtractor.forward": [[60, 67], ["roi_mask_feature_extractors.MaskRCNNFPNFeatureExtractor.pooler", "torch.nn.functional.relu", "getattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "proposals", ")", ":", "\n", "        ", "x", "=", "self", ".", "pooler", "(", "x", ",", "proposals", ")", "\n", "\n", "for", "layer_name", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "getattr", "(", "self", ",", "layer_name", ")", "(", "x", ")", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.roi_mask_feature_extractors.make_roi_mask_feature_extractor": [[69, 74], ["func"], "function", ["None"], ["", "", "def", "make_roi_mask_feature_extractor", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "func", "=", "registry", ".", "ROI_MASK_FEATURE_EXTRACTORS", "[", "\n", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "FEATURE_EXTRACTOR", "\n", "]", "\n", "return", "func", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.loss.MaskRCNNLossComputation.__init__": [[46, 54], ["None"], "methods", ["None"], ["# for creating the labels, so clear them all", "\n", "target", "=", "target", ".", "copy_with_fields", "(", "copied_fields", ")", "\n", "# get the targets corresponding GT for each anchor", "\n", "# NB: need to clamp the indices because we can have a single", "\n", "# GT in the image, and matched_idxs can be -2, which goes", "\n", "# out of bounds", "\n", "matched_targets", "=", "target", "[", "matched_idxs", ".", "clamp", "(", "min", "=", "0", ")", "]", "\n", "matched_targets", ".", "add_field", "(", "\"matched_idxs\"", ",", "matched_idxs", ")", "\n", "return", "matched_targets", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.loss.MaskRCNNLossComputation.match_targets_to_proposals": [[55, 67], ["maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "loss.MaskRCNNLossComputation.proposal_matcher", "target.copy_with_fields.copy_with_fields.copy_with_fields", "matched_targets.add_field", "loss.MaskRCNNLossComputation.clamp"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.copy_with_fields", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field"], ["\n", "", "def", "prepare_targets", "(", "self", ",", "anchors", ",", "targets", ")", ":", "\n", "        ", "labels", "=", "[", "]", "\n", "regression_targets", "=", "[", "]", "\n", "for", "anchors_per_image", ",", "targets_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n", "            ", "matched_targets", "=", "self", ".", "match_targets_to_anchors", "(", "\n", "anchors_per_image", ",", "targets_per_image", ",", "self", ".", "copied_fields", "\n", ")", "\n", "\n", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "self", ".", "generate_labels_func", "(", "matched_targets", ")", "\n", "labels_per_image", "=", "labels_per_image", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.loss.MaskRCNNLossComputation.prepare_targets": [[68, 101], ["zip", "loss.MaskRCNNLossComputation.match_targets_to_proposals", "loss.MaskRCNNLossComputation.get_field", "loss.MaskRCNNLossComputation.get_field", "labels_per_image.to.to.to", "torch.nonzero().squeeze", "loss.MaskRCNNLossComputation.get_field", "loss.project_masks_on_boxes", "labels.append", "masks.append", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.KeypointRCNNLossComputation.match_targets_to_proposals", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.loss.project_masks_on_boxes"], ["# Background (negative examples)", "\n", "bg_indices", "=", "matched_idxs", "==", "Matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "labels_per_image", "[", "bg_indices", "]", "=", "0", "\n", "\n", "# discard anchors that go out of the boundaries of the image", "\n", "if", "\"not_visibility\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "labels_per_image", "[", "~", "anchors_per_image", ".", "get_field", "(", "\"visibility\"", ")", "]", "=", "-", "1", "\n", "\n", "# discard indices that are between thresholds", "\n", "", "if", "\"between_thresholds\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "inds_to_discard", "=", "matched_idxs", "==", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_per_image", "[", "inds_to_discard", "]", "=", "-", "1", "\n", "\n", "# compute regression targets", "\n", "", "regression_targets_per_image", "=", "self", ".", "box_coder", ".", "encode", "(", "\n", "matched_targets", ".", "bbox", ",", "anchors_per_image", ".", "bbox", "\n", ")", "\n", "\n", "labels", ".", "append", "(", "labels_per_image", ")", "\n", "regression_targets", ".", "append", "(", "regression_targets_per_image", ")", "\n", "\n", "", "return", "labels", ",", "regression_targets", "\n", "\n", "\n", "", "def", "__call__", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.loss.MaskRCNNLossComputation.__call__": [[102, 129], ["loss.MaskRCNNLossComputation.prepare_targets", "maskrcnn_benchmark.modeling.utils.cat", "maskrcnn_benchmark.modeling.utils.cat", "torch.nonzero().squeeze", "torch.nn.functional.binary_cross_entropy_with_logits", "maskrcnn_benchmark.modeling.utils.cat.numel", "torch.nonzero", "mask_logits.sum"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.KeypointRCNNLossComputation.prepare_targets", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat"], ["\n", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "anchors_per_image", "in", "anchors", "]", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_pos_inds", ",", "sampled_neg_inds", "]", ",", "dim", "=", "0", ")", "\n", "\n", "objectness", ",", "box_regression", "=", "concat_box_prediction_layers", "(", "objectness", ",", "box_regression", ")", "\n", "\n", "objectness", "=", "objectness", ".", "squeeze", "(", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "regression_targets", "=", "torch", ".", "cat", "(", "regression_targets", ",", "dim", "=", "0", ")", "\n", "\n", "box_loss", "=", "smooth_l1_loss", "(", "\n", "box_regression", "[", "sampled_pos_inds", "]", ",", "\n", "regression_targets", "[", "sampled_pos_inds", "]", ",", "\n", "beta", "=", "1.0", "/", "9", ",", "\n", "size_average", "=", "False", ",", "\n", ")", "/", "(", "sampled_inds", ".", "numel", "(", ")", ")", "\n", "\n", "objectness_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "objectness", "[", "sampled_inds", "]", ",", "labels", "[", "sampled_inds", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.loss.project_masks_on_boxes": [[11, 43], ["proposals.bbox.to.convert", "proposals.bbox.to.bbox.to", "zip", "torch.stack().to", "torch.device", "segmentation_mask.crop", "segmentation_mask.crop.resize", "cropped_mask.resize.get_mask_tensor", "masks.append", "len", "torch.empty", "torch.stack"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.crop", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.SegmentationMask.get_mask_tensor"], ["\n", "from", ".", ".", "balanced_positive_negative_sampler", "import", "BalancedPositiveNegativeSampler", "\n", "from", ".", ".", "utils", "import", "cat", "\n", "\n", "from", "maskrcnn_benchmark", ".", "layers", "import", "smooth_l1_loss", "\n", "from", "maskrcnn_benchmark", ".", "modeling", ".", "matcher", "import", "Matcher", "\n", "from", "maskrcnn_benchmark", ".", "structures", ".", "boxlist_ops", "import", "boxlist_iou", "\n", "from", "maskrcnn_benchmark", ".", "structures", ".", "boxlist_ops", "import", "cat_boxlist", "\n", "\n", "\n", "class", "RPNLossComputation", "(", "object", ")", ":", "\n", "    ", "\"\"\"\n    This class computes the RPN loss.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "proposal_matcher", ",", "fg_bg_sampler", ",", "box_coder", ",", "\n", "generate_labels_func", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposal_matcher (Matcher)\n            fg_bg_sampler (BalancedPositiveNegativeSampler)\n            box_coder (BoxCoder)\n        \"\"\"", "\n", "# self.target_preparator = target_preparator", "\n", "self", ".", "proposal_matcher", "=", "proposal_matcher", "\n", "self", ".", "fg_bg_sampler", "=", "fg_bg_sampler", "\n", "self", ".", "box_coder", "=", "box_coder", "\n", "self", ".", "copied_fields", "=", "[", "]", "\n", "self", ".", "generate_labels_func", "=", "generate_labels_func", "\n", "self", ".", "discard_cases", "=", "[", "'not_visibility'", ",", "'between_thresholds'", "]", "\n", "\n", "", "def", "match_targets_to_anchors", "(", "self", ",", "anchor", ",", "target", ",", "copied_fields", "=", "[", "]", ")", ":", "\n", "        ", "match_quality_matrix", "=", "boxlist_iou", "(", "target", ",", "anchor", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.mask_head.loss.make_roi_mask_loss_evaluator": [[131, 143], ["maskrcnn_benchmark.modeling.matcher.Matcher", "loss.MaskRCNNLossComputation"], "function", ["None"], ["return", "objectness_loss", ",", "box_loss", "\n", "\n", "# This function should be overwritten in RetinaNet", "\n", "", "", "def", "generate_rpn_labels", "(", "matched_targets", ")", ":", "\n", "    ", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "matched_idxs", ">=", "0", "\n", "return", "labels_per_image", "\n", "\n", "\n", "", "def", "make_rpn_loss_evaluator", "(", "cfg", ",", "box_coder", ")", ":", "\n", "    ", "matcher", "=", "Matcher", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "FG_IOU_THRESHOLD", ",", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BG_IOU_THRESHOLD", ",", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.roi_box_predictors.FastRCNNPredictor.__init__": [[8, 25], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FastRCNNPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "in_channels", "is", "not", "None", "\n", "\n", "num_inputs", "=", "in_channels", "\n", "\n", "num_classes", "=", "config", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_CLASSES", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "cls_score", "=", "nn", ".", "Linear", "(", "num_inputs", ",", "num_classes", ")", "\n", "num_bbox_reg_classes", "=", "2", "if", "config", ".", "MODEL", ".", "CLS_AGNOSTIC_BBOX_REG", "else", "num_classes", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Linear", "(", "num_inputs", ",", "num_bbox_reg_classes", "*", "4", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "cls_score", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "cls_score", ".", "bias", ",", "0", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "bbox_pred", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "0.001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bbox_pred", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.roi_box_predictors.FastRCNNPredictor.forward": [[26, 32], ["roi_box_predictors.FastRCNNPredictor.avgpool", "x.view.view.view", "roi_box_predictors.FastRCNNPredictor.cls_score", "roi_box_predictors.FastRCNNPredictor.bbox_pred", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "cls_logit", "=", "self", ".", "cls_score", "(", "x", ")", "\n", "bbox_pred", "=", "self", ".", "bbox_pred", "(", "x", ")", "\n", "return", "cls_logit", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.roi_box_predictors.FPNPredictor.__init__": [[36, 49], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FPNPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_CLASSES", "\n", "representation_size", "=", "in_channels", "\n", "\n", "self", ".", "cls_score", "=", "nn", ".", "Linear", "(", "representation_size", ",", "num_classes", ")", "\n", "num_bbox_reg_classes", "=", "2", "if", "cfg", ".", "MODEL", ".", "CLS_AGNOSTIC_BBOX_REG", "else", "num_classes", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Linear", "(", "representation_size", ",", "num_bbox_reg_classes", "*", "4", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "cls_score", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "bbox_pred", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "for", "l", "in", "[", "self", ".", "cls_score", ",", "self", ".", "bbox_pred", "]", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.roi_box_predictors.FPNPredictor.forward": [[50, 58], ["roi_box_predictors.FPNPredictor.cls_score", "roi_box_predictors.FPNPredictor.bbox_pred", "x.view.view.ndimension", "x.view.view.view", "list", "x.view.view.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "ndimension", "(", ")", "==", "4", ":", "\n", "            ", "assert", "list", "(", "x", ".", "shape", "[", "2", ":", "]", ")", "==", "[", "1", ",", "1", "]", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "scores", "=", "self", ".", "cls_score", "(", "x", ")", "\n", "bbox_deltas", "=", "self", ".", "bbox_pred", "(", "x", ")", "\n", "\n", "return", "scores", ",", "bbox_deltas", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.roi_box_predictors.make_roi_box_predictor": [[60, 63], ["func"], "function", ["None"], ["", "", "def", "make_roi_box_predictor", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "func", "=", "registry", ".", "ROI_BOX_PREDICTOR", "[", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "PREDICTOR", "]", "\n", "return", "func", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.inference.PostProcessor.__init__": [[19, 42], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.box_coder.BoxCoder"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "pre_nms_top_n", ",", "\n", "post_nms_top_n", ",", "\n", "nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            pre_nms_top_n (int)\n            post_nms_top_n (int)\n            nms_thresh (float)\n            min_size (int)\n            box_coder (BoxCoder)\n            fpn_post_nms_top_n (int)\n        \"\"\"", "\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.inference.PostProcessor.forward": [[43, 85], ["torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inference.PostProcessor.box_coder.decode", "proposals.repeat.repeat.split", "class_prob.split.split.split", "zip", "len", "box_regression.view", "proposals.repeat.repeat.repeat", "inference.PostProcessor.prepare_boxlist", "inference.PostProcessor.clip_to_image", "inference.PostProcessor.filter_results", "results.append", "sum"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.box_coder.BoxCoder.decode", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.inference.PostProcessor.prepare_boxlist", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.clip_to_image", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.inference.PostProcessor.filter_results"], ["if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "\n", "", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "# later cat of bbox requires all fields to be present for all bbox", "\n", "# so we need to add a dummy for objectness that's missing", "\n", "for", "gt_box", "in", "gt_boxes", ":", "\n", "            ", "gt_box", ".", "add_field", "(", "\"objectness\"", ",", "torch", ".", "ones", "(", "len", "(", "gt_box", ")", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "proposals", "=", "[", "\n", "cat_boxlist", "(", "(", "proposal", ",", "gt_box", ")", ")", "\n", "for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n", "]", "\n", "\n", "return", "proposals", "\n", "\n", "", "def", "forward_for_single_feature_map", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n", "objectness", "=", "permute_and_flatten", "(", "objectness", ",", "N", ",", "A", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.inference.PostProcessor.prepare_boxlist": [[86, 104], ["boxes.reshape.reshape.reshape", "scores.reshape.reshape.reshape", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field"], ["objectness", "=", "objectness", ".", "sigmoid", "(", ")", "\n", "\n", "box_regression", "=", "permute_and_flatten", "(", "box_regression", ",", "N", ",", "A", ",", "4", ",", "H", ",", "W", ")", "\n", "\n", "num_anchors", "=", "A", "*", "H", "*", "W", "\n", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n", "box_regression", "=", "box_regression", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "anchors", "]", "\n", "concat_anchors", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "concat_anchors", "=", "concat_anchors", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "-", "1", ",", "4", ")", ",", "concat_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.inference.PostProcessor.filter_results": [[105, 147], ["boxlist.bbox.reshape", "boxlist.get_field().reshape", "range", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "len", "inds_all[].nonzero().squeeze", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms", "len", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_nms.add_field", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.append", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "boxlist.get_field", "torch.full", "torch.full", "torch.full", "torch.full", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.get_field.cpu", "image_thresh.item", "inds_all[].nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.boxlist_nms", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["\n", "proposals", "=", "proposals", ".", "view", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "proposal", ",", "score", ",", "im_shape", "in", "zip", "(", "proposals", ",", "objectness", ",", "image_shapes", ")", ":", "\n", "            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "boxlist", "=", "remove_small_boxes", "(", "boxlist", ",", "self", ".", "min_size", ")", "\n", "boxlist", "=", "boxlist_nms", "(", "\n", "boxlist", ",", "\n", "self", ".", "nms_thresh", ",", "\n", "max_proposals", "=", "self", ".", "post_nms_top_n", ",", "\n", "score_field", "=", "\"objectness\"", ",", "\n", ")", "\n", "result", ".", "append", "(", "boxlist", ")", "\n", "", "return", "result", "\n", "\n", "", "def", "forward", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[list[BoxList]]\n            objectness: list[tensor]\n            box_regression: list[tensor]\n\n        Returns:\n            boxlists (list[BoxList]): the post-processed anchors, after\n                applying box decoding and NMS\n        \"\"\"", "\n", "sampled_boxes", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "objectness", ")", "\n", "anchors", "=", "list", "(", "zip", "(", "*", "anchors", ")", ")", "\n", "for", "a", ",", "o", ",", "b", "in", "zip", "(", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "            ", "sampled_boxes", ".", "append", "(", "self", ".", "forward_for_single_feature_map", "(", "a", ",", "o", ",", "b", ")", ")", "\n", "\n", "", "boxlists", "=", "list", "(", "zip", "(", "*", "sampled_boxes", ")", ")", "\n", "boxlists", "=", "[", "cat_boxlist", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "\n", "if", "num_levels", ">", "1", ":", "\n", "            ", "boxlists", "=", "self", ".", "select_over_all_levels", "(", "boxlists", ")", "\n", "\n", "# append ground-truth bboxes to proposals", "\n", "", "if", "self", ".", "training", "and", "targets", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.inference.make_roi_box_post_processor": [[149, 168], ["maskrcnn_benchmark.modeling.box_coder.BoxCoder", "inference.PostProcessor"], "function", ["None"], ["\n", "", "return", "boxlists", "\n", "\n", "", "def", "select_over_all_levels", "(", "self", ",", "boxlists", ")", ":", "\n", "        ", "num_images", "=", "len", "(", "boxlists", ")", "\n", "# different behavior during training and during testing:", "\n", "# during training, post_nms_top_n is over *all* the proposals combined, while", "\n", "# during testing, it is over the proposals for each image", "\n", "# TODO resolve this difference and make it consistent. It should be per image,", "\n", "# and not per batch", "\n", "if", "self", ".", "training", ":", "\n", "            ", "objectness", "=", "torch", ".", "cat", "(", "\n", "[", "boxlist", ".", "get_field", "(", "\"objectness\"", ")", "for", "boxlist", "in", "boxlists", "]", ",", "dim", "=", "0", "\n", ")", "\n", "box_sizes", "=", "[", "len", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", ")", "\n", "inds_mask", "=", "torch", ".", "zeros_like", "(", "objectness", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "inds_mask", "[", "inds_sorted", "]", "=", "1", "\n", "inds_mask", "=", "inds_mask", ".", "split", "(", "box_sizes", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.roi_box_feature_extractors.ResNet50Conv5ROIFeatureExtractor.__init__": [[15, 43], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.poolers.Pooler", "maskrcnn_benchmark.modeling.backbone.resnet.StageSpec", "maskrcnn_benchmark.modeling.backbone.resnet.ResNetHead"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "ResNet50Conv5ROIFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "resolution", "=", "config", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_RESOLUTION", "\n", "scales", "=", "config", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_SCALES", "\n", "sampling_ratio", "=", "config", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_SAMPLING_RATIO", "\n", "pooler", "=", "Pooler", "(", "\n", "output_size", "=", "(", "resolution", ",", "resolution", ")", ",", "\n", "scales", "=", "scales", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", "deformable", "=", "config", ".", "MODEL", ".", "RESNETS", ".", "DEFORM_POOLING", "\n", ")", "\n", "\n", "stage", "=", "resnet", ".", "StageSpec", "(", "index", "=", "4", ",", "block_count", "=", "3", ",", "return_features", "=", "False", ")", "\n", "head", "=", "resnet", ".", "ResNetHead", "(", "\n", "block_module", "=", "config", ".", "MODEL", ".", "RESNETS", ".", "TRANS_FUNC", ",", "\n", "stages", "=", "(", "stage", ",", ")", ",", "\n", "num_groups", "=", "config", ".", "MODEL", ".", "RESNETS", ".", "NUM_GROUPS", ",", "\n", "width_per_group", "=", "config", ".", "MODEL", ".", "RESNETS", ".", "WIDTH_PER_GROUP", ",", "\n", "stride_in_1x1", "=", "config", ".", "MODEL", ".", "RESNETS", ".", "STRIDE_IN_1X1", ",", "\n", "stride_init", "=", "None", ",", "\n", "res2_out_channels", "=", "config", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", ",", "\n", "dilation", "=", "config", ".", "MODEL", ".", "RESNETS", ".", "RES5_DILATION", "\n", ")", "\n", "\n", "self", ".", "pooler", "=", "pooler", "\n", "self", ".", "head", "=", "head", "\n", "self", ".", "out_channels", "=", "head", ".", "out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.roi_box_feature_extractors.ResNet50Conv5ROIFeatureExtractor.forward": [[44, 48], ["roi_box_feature_extractors.ResNet50Conv5ROIFeatureExtractor.pooler", "roi_box_feature_extractors.ResNet50Conv5ROIFeatureExtractor.head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "proposals", ")", ":", "\n", "        ", "x", "=", "self", ".", "pooler", "(", "x", ",", "proposals", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.roi_box_feature_extractors.FPN2MLPFeatureExtractor.__init__": [[56, 75], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.poolers.Pooler", "maskrcnn_benchmark.modeling.make_layers.make_fc", "maskrcnn_benchmark.modeling.make_layers.make_fc"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.make_layers.make_fc", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.make_layers.make_fc"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FPN2MLPFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "resolution", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_RESOLUTION", "\n", "scales", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_SCALES", "\n", "sampling_ratio", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_SAMPLING_RATIO", "\n", "pooler", "=", "Pooler", "(", "\n", "output_size", "=", "(", "resolution", ",", "resolution", ")", ",", "\n", "scales", "=", "scales", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", "deformable", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "DEFORM_POOLING", "\n", ")", "\n", "input_size", "=", "in_channels", "*", "resolution", "**", "2", "\n", "representation_size", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "MLP_HEAD_DIM", "\n", "use_gn", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "USE_GN", "\n", "self", ".", "pooler", "=", "pooler", "\n", "self", ".", "fc6", "=", "make_fc", "(", "input_size", ",", "representation_size", ",", "use_gn", ")", "\n", "self", ".", "fc7", "=", "make_fc", "(", "representation_size", ",", "representation_size", ",", "use_gn", ")", "\n", "self", ".", "out_channels", "=", "representation_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.roi_box_feature_extractors.FPN2MLPFeatureExtractor.forward": [[76, 84], ["roi_box_feature_extractors.FPN2MLPFeatureExtractor.pooler", "torch.nn.functional.relu.view", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu.size", "roi_box_feature_extractors.FPN2MLPFeatureExtractor.fc6", "roi_box_feature_extractors.FPN2MLPFeatureExtractor.fc7"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "proposals", ")", ":", "\n", "        ", "x", "=", "self", ".", "pooler", "(", "x", ",", "proposals", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc7", "(", "x", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.roi_box_feature_extractors.FPNXconv1fcFeatureExtractor.__init__": [[92, 140], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.poolers.Pooler", "range", "roi_box_feature_extractors.FPNXconv1fcFeatureExtractor.add_module", "maskrcnn_benchmark.modeling.make_layers.make_fc", "xconvs.append", "xconvs.append", "torch.nn.Sequential", "modules.modules", "torch.nn.Conv2d", "xconvs.append", "torch.nn.ReLU", "isinstance", "maskrcnn_benchmark.modeling.make_layers.group_norm", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.make_layers.make_fc", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.make_layers.group_norm"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FPNXconv1fcFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "resolution", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_RESOLUTION", "\n", "scales", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_SCALES", "\n", "sampling_ratio", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_SAMPLING_RATIO", "\n", "pooler", "=", "Pooler", "(", "\n", "output_size", "=", "(", "resolution", ",", "resolution", ")", ",", "\n", "scales", "=", "scales", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", ")", "\n", "self", ".", "pooler", "=", "pooler", "\n", "\n", "use_gn", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "USE_GN", "\n", "conv_head_dim", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "CONV_HEAD_DIM", "\n", "num_stacked_convs", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_STACKED_CONVS", "\n", "dilation", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "DILATION", "\n", "\n", "xconvs", "=", "[", "]", "\n", "for", "ix", "in", "range", "(", "num_stacked_convs", ")", ":", "\n", "            ", "xconvs", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "conv_head_dim", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", "if", "use_gn", "else", "True", "\n", ")", "\n", ")", "\n", "in_channels", "=", "conv_head_dim", "\n", "if", "use_gn", ":", "\n", "                ", "xconvs", ".", "append", "(", "group_norm", "(", "in_channels", ")", ")", "\n", "", "xconvs", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "", "self", ".", "add_module", "(", "\"xconvs\"", ",", "nn", ".", "Sequential", "(", "*", "xconvs", ")", ")", "\n", "for", "modules", "in", "[", "self", ".", "xconvs", ",", "]", ":", "\n", "            ", "for", "l", "in", "modules", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "l", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "if", "not", "use_gn", ":", "\n", "                        ", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "", "input_size", "=", "conv_head_dim", "*", "resolution", "**", "2", "\n", "representation_size", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "MLP_HEAD_DIM", "\n", "self", ".", "fc6", "=", "make_fc", "(", "input_size", ",", "representation_size", ",", "use_gn", "=", "False", ")", "\n", "self", ".", "out_channels", "=", "representation_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.roi_box_feature_extractors.FPNXconv1fcFeatureExtractor.forward": [[141, 147], ["roi_box_feature_extractors.FPNXconv1fcFeatureExtractor.pooler", "roi_box_feature_extractors.FPNXconv1fcFeatureExtractor.xconvs", "torch.nn.functional.relu.view", "torch.nn.functional.relu", "torch.nn.functional.relu.size", "roi_box_feature_extractors.FPNXconv1fcFeatureExtractor.fc6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "proposals", ")", ":", "\n", "        ", "x", "=", "self", ".", "pooler", "(", "x", ",", "proposals", ")", "\n", "x", "=", "self", ".", "xconvs", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc6", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.roi_box_feature_extractors.make_roi_box_feature_extractor": [[149, 154], ["func"], "function", ["None"], ["", "", "def", "make_roi_box_feature_extractor", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "func", "=", "registry", ".", "ROI_BOX_FEATURE_EXTRACTORS", "[", "\n", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "FEATURE_EXTRACTOR", "\n", "]", "\n", "return", "func", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.loss.FastRCNNLossComputation.__init__": [[21, 38], ["None"], "methods", ["None"], ["class", "RPNLossComputation", "(", "object", ")", ":", "\n", "    ", "\"\"\"\n    This class computes the RPN loss.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "proposal_matcher", ",", "fg_bg_sampler", ",", "box_coder", ",", "\n", "generate_labels_func", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposal_matcher (Matcher)\n            fg_bg_sampler (BalancedPositiveNegativeSampler)\n            box_coder (BoxCoder)\n        \"\"\"", "\n", "# self.target_preparator = target_preparator", "\n", "self", ".", "proposal_matcher", "=", "proposal_matcher", "\n", "self", ".", "fg_bg_sampler", "=", "fg_bg_sampler", "\n", "self", ".", "box_coder", "=", "box_coder", "\n", "self", ".", "copied_fields", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.loss.FastRCNNLossComputation.match_targets_to_proposals": [[39, 51], ["maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "loss.FastRCNNLossComputation.proposal_matcher", "target.copy_with_fields.copy_with_fields.copy_with_fields", "matched_targets.add_field", "loss.FastRCNNLossComputation.clamp"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.copy_with_fields", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field"], ["self", ".", "generate_labels_func", "=", "generate_labels_func", "\n", "self", ".", "discard_cases", "=", "[", "'not_visibility'", ",", "'between_thresholds'", "]", "\n", "\n", "", "def", "match_targets_to_anchors", "(", "self", ",", "anchor", ",", "target", ",", "copied_fields", "=", "[", "]", ")", ":", "\n", "        ", "match_quality_matrix", "=", "boxlist_iou", "(", "target", ",", "anchor", ")", "\n", "matched_idxs", "=", "self", ".", "proposal_matcher", "(", "match_quality_matrix", ")", "\n", "# RPN doesn't need any fields from target", "\n", "# for creating the labels, so clear them all", "\n", "target", "=", "target", ".", "copy_with_fields", "(", "copied_fields", ")", "\n", "# get the targets corresponding GT for each anchor", "\n", "# NB: need to clamp the indices because we can have a single", "\n", "# GT in the image, and matched_idxs can be -2, which goes", "\n", "# out of bounds", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.loss.FastRCNNLossComputation.prepare_targets": [[52, 81], ["zip", "loss.FastRCNNLossComputation.match_targets_to_proposals", "loss.FastRCNNLossComputation.get_field", "loss.FastRCNNLossComputation.get_field", "labels_per_image.to.to.to", "loss.FastRCNNLossComputation.box_coder.encode", "labels.append", "regression_targets.append"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.KeypointRCNNLossComputation.match_targets_to_proposals", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.box_coder.BoxCoder.encode"], ["matched_targets", "=", "target", "[", "matched_idxs", ".", "clamp", "(", "min", "=", "0", ")", "]", "\n", "matched_targets", ".", "add_field", "(", "\"matched_idxs\"", ",", "matched_idxs", ")", "\n", "return", "matched_targets", "\n", "\n", "", "def", "prepare_targets", "(", "self", ",", "anchors", ",", "targets", ")", ":", "\n", "        ", "labels", "=", "[", "]", "\n", "regression_targets", "=", "[", "]", "\n", "for", "anchors_per_image", ",", "targets_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n", "            ", "matched_targets", "=", "self", ".", "match_targets_to_anchors", "(", "\n", "anchors_per_image", ",", "targets_per_image", ",", "self", ".", "copied_fields", "\n", ")", "\n", "\n", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "self", ".", "generate_labels_func", "(", "matched_targets", ")", "\n", "labels_per_image", "=", "labels_per_image", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# Background (negative examples)", "\n", "bg_indices", "=", "matched_idxs", "==", "Matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "labels_per_image", "[", "bg_indices", "]", "=", "0", "\n", "\n", "# discard anchors that go out of the boundaries of the image", "\n", "if", "\"not_visibility\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "labels_per_image", "[", "~", "anchors_per_image", ".", "get_field", "(", "\"visibility\"", ")", "]", "=", "-", "1", "\n", "\n", "# discard indices that are between thresholds", "\n", "", "if", "\"between_thresholds\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "inds_to_discard", "=", "matched_idxs", "==", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_per_image", "[", "inds_to_discard", "]", "=", "-", "1", "\n", "\n", "# compute regression targets", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.loss.FastRCNNLossComputation.subsample": [[82, 117], ["loss.FastRCNNLossComputation.prepare_targets", "loss.FastRCNNLossComputation.fg_bg_sampler", "list", "zip", "enumerate", "proposals_per_image.add_field", "proposals_per_image.add_field", "zip", "torch.nonzero().squeeze", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.KeypointRCNNLossComputation.prepare_targets", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field"], ["", "regression_targets_per_image", "=", "self", ".", "box_coder", ".", "encode", "(", "\n", "matched_targets", ".", "bbox", ",", "anchors_per_image", ".", "bbox", "\n", ")", "\n", "\n", "labels", ".", "append", "(", "labels_per_image", ")", "\n", "regression_targets", ".", "append", "(", "regression_targets_per_image", ")", "\n", "\n", "", "return", "labels", ",", "regression_targets", "\n", "\n", "\n", "", "def", "__call__", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors (list[BoxList])\n            objectness (list[Tensor])\n            box_regression (list[Tensor])\n            targets (list[BoxList])\n\n        Returns:\n            objectness_loss (Tensor)\n            box_loss (Tensor\n        \"\"\"", "\n", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "anchors_per_image", "in", "anchors", "]", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_pos_inds", ",", "sampled_neg_inds", "]", ",", "dim", "=", "0", ")", "\n", "\n", "objectness", ",", "box_regression", "=", "concat_box_prediction_layers", "(", "objectness", ",", "box_regression", ")", "\n", "\n", "objectness", "=", "objectness", ".", "squeeze", "(", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.loss.FastRCNNLossComputation.__call__": [[118, 168], ["maskrcnn_benchmark.modeling.utils.cat", "maskrcnn_benchmark.modeling.utils.cat", "maskrcnn_benchmark.modeling.utils.cat", "maskrcnn_benchmark.modeling.utils.cat", "torch.nn.functional.cross_entropy", "torch.nonzero().squeeze", "maskrcnn_benchmark.layers.smooth_l1_loss", "hasattr", "RuntimeError", "torch.tensor", "maskrcnn_benchmark.modeling.utils.cat.numel", "proposal.get_field", "proposal.get_field", "torch.nonzero", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.smooth_l1_loss.smooth_l1_loss", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["regression_targets", "=", "torch", ".", "cat", "(", "regression_targets", ",", "dim", "=", "0", ")", "\n", "\n", "box_loss", "=", "smooth_l1_loss", "(", "\n", "box_regression", "[", "sampled_pos_inds", "]", ",", "\n", "regression_targets", "[", "sampled_pos_inds", "]", ",", "\n", "beta", "=", "1.0", "/", "9", ",", "\n", "size_average", "=", "False", ",", "\n", ")", "/", "(", "sampled_inds", ".", "numel", "(", ")", ")", "\n", "\n", "objectness_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "objectness", "[", "sampled_inds", "]", ",", "labels", "[", "sampled_inds", "]", "\n", ")", "\n", "\n", "return", "objectness_loss", ",", "box_loss", "\n", "\n", "# This function should be overwritten in RetinaNet", "\n", "", "", "def", "generate_rpn_labels", "(", "matched_targets", ")", ":", "\n", "    ", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "matched_idxs", ">=", "0", "\n", "return", "labels_per_image", "\n", "\n", "\n", "", "def", "make_rpn_loss_evaluator", "(", "cfg", ",", "box_coder", ")", ":", "\n", "    ", "matcher", "=", "Matcher", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "FG_IOU_THRESHOLD", ",", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BG_IOU_THRESHOLD", ",", "\n", "allow_low_quality_matches", "=", "True", ",", "\n", ")", "\n", "\n", "fg_bg_sampler", "=", "BalancedPositiveNegativeSampler", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BATCH_SIZE_PER_IMAGE", ",", "cfg", ".", "MODEL", ".", "RPN", ".", "POSITIVE_FRACTION", "\n", ")", "\n", "\n", "loss_evaluator", "=", "RPNLossComputation", "(", "\n", "matcher", ",", "\n", "fg_bg_sampler", ",", "\n", "box_coder", ",", "\n", "generate_rpn_labels", "\n", ")", "\n", "return", "loss_evaluator", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.loss.make_roi_box_loss_evaluator": [[170, 194], ["maskrcnn_benchmark.modeling.matcher.Matcher", "maskrcnn_benchmark.modeling.box_coder.BoxCoder", "maskrcnn_benchmark.modeling.balanced_positive_negative_sampler.BalancedPositiveNegativeSampler", "loss.FastRCNNLossComputation"], "function", ["None"], []], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.box_head.ROIBoxHead.__init__": [[16, 23], ["super().__init__", "roi_box_feature_extractors.make_roi_box_feature_extractor", "roi_box_predictors.make_roi_box_predictor", "inference.make_roi_box_post_processor", "loss.make_roi_box_loss_evaluator"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.roi_box_feature_extractors.make_roi_box_feature_extractor", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.roi_box_predictors.make_roi_box_predictor", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.inference.make_roi_box_post_processor", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.loss.make_roi_box_loss_evaluator"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "ROIBoxHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_extractor", "=", "make_roi_box_feature_extractor", "(", "cfg", ",", "in_channels", ")", "\n", "self", ".", "predictor", "=", "make_roi_box_predictor", "(", "\n", "cfg", ",", "self", ".", "feature_extractor", ".", "out_channels", ")", "\n", "self", ".", "post_processor", "=", "make_roi_box_post_processor", "(", "cfg", ")", "\n", "self", ".", "loss_evaluator", "=", "make_roi_box_loss_evaluator", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.box_head.ROIBoxHead.forward": [[24, 62], ["box_head.ROIBoxHead.feature_extractor", "box_head.ROIBoxHead.predictor", "box_head.ROIBoxHead.loss_evaluator", "box_head.ROIBoxHead.post_processor", "dict", "torch.no_grad", "box_head.ROIBoxHead.loss_evaluator.subsample"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.KeypointRCNNLossComputation.subsample"], ["", "def", "forward", "(", "self", ",", "features", ",", "proposals", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            features (list[Tensor]): feature-maps from possibly several levels\n            proposals (list[BoxList]): proposal boxes\n            targets (list[BoxList], optional): the ground-truth targets.\n\n        Returns:\n            x (Tensor): the result of the feature extractor\n            proposals (list[BoxList]): during training, the subsampled proposals\n                are returned. During testing, the predicted boxlists are returned\n            losses (dict[Tensor]): During training, returns the losses for the\n                head. During testing, returns an empty dict.\n        \"\"\"", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# Faster R-CNN subsamples during training the proposals with a fixed", "\n", "# positive / negative ratio", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "proposals", "=", "self", ".", "loss_evaluator", ".", "subsample", "(", "proposals", ",", "targets", ")", "\n", "\n", "# extract features that will be fed to the final classifier. The", "\n", "# feature_extractor generally corresponds to the pooler + heads", "\n", "", "", "x", "=", "self", ".", "feature_extractor", "(", "features", ",", "proposals", ")", "\n", "# final classifier that converts the features into predictions", "\n", "class_logits", ",", "box_regression", "=", "self", ".", "predictor", "(", "x", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "result", "=", "self", ".", "post_processor", "(", "(", "class_logits", ",", "box_regression", ")", ",", "proposals", ")", "\n", "return", "x", ",", "result", ",", "{", "}", "\n", "\n", "", "loss_classifier", ",", "loss_box_reg", "=", "self", ".", "loss_evaluator", "(", "\n", "[", "class_logits", "]", ",", "[", "box_regression", "]", "\n", ")", "\n", "return", "(", "\n", "x", ",", "\n", "proposals", ",", "\n", "dict", "(", "loss_classifier", "=", "loss_classifier", ",", "loss_box_reg", "=", "loss_box_reg", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.box_head.box_head.build_roi_box_head": [[65, 72], ["box_head.ROIBoxHead"], "function", ["None"], ["", "", "def", "build_roi_box_head", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a new box head.\n    By default, uses ROIBoxHead, but if it turns out not to be enough, just register a new class\n    and make it a parameter in the config\n    \"\"\"", "\n", "return", "ROIBoxHead", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.roi_ke_predictors.KERCNNC4Predictor.__init__": [[12, 64], ["torch.nn.Module.__init__", "int", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "maskrcnn_benchmark.layers.ConvTranspose2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "str", "int", "int"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "KERCNNC4Predictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_classes", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "NUM_CLASSES", "\n", "dim_reduced", "=", "cfg", ".", "MODEL", ".", "ROI_KE_HEAD", ".", "CONV_LAYERS", "[", "-", "1", "]", "\n", "\n", "self", ".", "resol", "=", "cfg", ".", "MODEL", ".", "ROI_KE_HEAD", ".", "RESOLUTION", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "ROI_HEADS", ".", "USE_FPN", ":", "\n", "            ", "num_inputs", "=", "dim_reduced", "\n", "", "else", ":", "\n", "            ", "stage_index", "=", "4", "\n", "stage2_relative_factor", "=", "2", "**", "(", "stage_index", "-", "1", ")", "\n", "res2_out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", "\n", "num_inputs", "=", "res2_out_channels", "*", "stage2_relative_factor", "\n", "\n", "", "assert", "(", "cfg", ".", "MODEL", ".", "ROI_KE_HEAD", ".", "NUM_KES", "%", "2", "==", "0", ")", ",", "'require plural but got {}'", ".", "format", "(", "str", "(", "cfg", ".", "MODEL", ".", "ROI_KE_HEAD", ".", "NUM_KES", ")", ")", "\n", "NumPred", "=", "int", "(", "cfg", ".", "MODEL", ".", "ROI_KE_HEAD", ".", "NUM_KES", "/", "2", "+", "2", ")", "\n", "\n", "\n", "self", ".", "ke_input_xy", "=", "Conv2d", "(", "num_inputs", ",", "num_inputs", ",", "1", ",", "1", ",", "0", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "ke_input_xy", ".", "weight", ",", "\n", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "ke_input_xy", ".", "bias", ",", "0", ")", "\n", "\n", "self", ".", "conv5_ke_xy", "=", "ConvTranspose2d", "(", "num_inputs", ",", "dim_reduced", ",", "2", ",", "2", ",", "0", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "conv5_ke_xy", ".", "weight", ",", "\n", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv5_ke_xy", ".", "bias", ",", "0", ")", "\n", "\n", "\n", "self", ".", "conv5_ke_x_shrink", "=", "Conv2d", "(", "dim_reduced", ",", "NumPred", ",", "(", "self", ".", "resol", ",", "1", ")", ",", "1", ",", "0", ")", "# H W", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "conv5_ke_x_shrink", ".", "weight", ",", "\n", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv5_ke_x_shrink", ".", "bias", ",", "0", ")", "\n", "\n", "self", ".", "conv5_ke_y_shrink", "=", "Conv2d", "(", "dim_reduced", ",", "NumPred", ",", "(", "1", ",", "self", ".", "resol", ")", ",", "1", ",", "0", ")", "# H W", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "conv5_ke_y_shrink", ".", "weight", ",", "\n", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv5_ke_y_shrink", ".", "bias", ",", "0", ")", "\n", "\n", "# mt branch", "\n", "self", ".", "cat_trans", "=", "Conv2d", "(", "dim_reduced", ",", "cfg", ".", "MODEL", ".", "ROI_KE_HEAD", ".", "NUM_KES", ",", "1", ",", "1", ",", "0", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "cat_trans", ".", "weight", ",", "\n", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "cat_trans", ".", "bias", ",", "0", ")", "\n", "\n", "self", ".", "mty", "=", "Conv2d", "(", "cfg", ".", "MODEL", ".", "ROI_KE_HEAD", ".", "NUM_KES", ",", "cfg", ".", "MODEL", ".", "ROI_KE_HEAD", ".", "NUM_MATCHTYPE", ",", "(", "int", "(", "self", ".", "resol", "/", "2", ")", ",", "int", "(", "self", ".", "resol", "/", "2", ")", ")", ",", "1", ",", "0", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "mty", ".", "weight", ",", "\n", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "mty", ".", "bias", ",", "0", ")", "\n", "\n", "self", ".", "up_scale", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.roi_ke_predictors.KERCNNC4Predictor.forward": [[65, 84], ["roi_ke_predictors.KERCNNC4Predictor.ke_input_xy", "roi_ke_predictors.KERCNNC4Predictor.conv5_ke_xy", "maskrcnn_benchmark.layers.interpolate", "roi_ke_predictors.KERCNNC4Predictor.conv5_ke_x_shrink", "roi_ke_predictors.KERCNNC4Predictor.conv5_ke_y_shrink", "roi_ke_predictors.KERCNNC4Predictor.cat_trans", "roi_ke_predictors.KERCNNC4Predictor.mty", "str", "torch.Size", "str", "torch.Size", "torch.Size", "roi_ke_predictors.KERCNNC4Predictor.size", "roi_ke_predictors.KERCNNC4Predictor.size", "roi_ke_predictors.KERCNNC4Predictor.size", "roi_ke_predictors.KERCNNC4Predictor.size", "roi_ke_predictors.KERCNNC4Predictor.size", "str", "roi_ke_predictors.KERCNNC4Predictor.size"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc.interpolate"], ["", "def", "forward", "(", "self", ",", "ft", ")", ":", "\n", "        ", "ft", "=", "self", ".", "ke_input_xy", "(", "ft", ")", "\n", "ft", "=", "self", ".", "conv5_ke_xy", "(", "ft", ")", "\n", "\n", "ft_2x", "=", "layers", ".", "interpolate", "(", "ft", ",", "scale_factor", "=", "self", ".", "up_scale", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "x", "=", "self", ".", "conv5_ke_x_shrink", "(", "ft_2x", ")", "\n", "\n", "y", "=", "self", ".", "conv5_ke_y_shrink", "(", "ft_2x", ")", "\n", "\n", "assert", "(", "x", ".", "size", "(", ")", "[", "2", ":", "]", "==", "torch", ".", "Size", "(", "[", "1", ",", "self", ".", "resol", "]", ")", "and", "y", ".", "size", "(", ")", "[", "2", ":", "]", "==", "torch", ".", "Size", "(", "[", "self", ".", "resol", ",", "1", "]", ")", ")", ",", "\"x y: \"", "+", "str", "(", "x", ".", "size", "(", ")", ")", "+", "'  '", "+", "str", "(", "y", ".", "size", "(", ")", ")", "\n", "\n", "# mty", "\n", "# mty = torch.cat((x_tc, y_tc), dim=1)", "\n", "mty", "=", "self", ".", "cat_trans", "(", "ft", ")", "\n", "mty", "=", "self", ".", "mty", "(", "mty", ")", "\n", "assert", "(", "mty", ".", "size", "(", ")", "[", "1", ":", "]", "==", "torch", ".", "Size", "(", "[", "24", ",", "1", ",", "1", "]", ")", ")", ",", "\"mty w h should be 1, but got {}\"", ".", "format", "(", "str", "(", "mty", ".", "size", "(", ")", ")", ")", "\n", "\n", "return", "x", ",", "y", ",", "mty", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.roi_ke_predictors.make_roi_ke_predictor": [[89, 92], ["func"], "function", ["None"], ["def", "make_roi_ke_predictor", "(", "cfg", ")", ":", "\n", "    ", "func", "=", "_ROI_KE_PREDICTOR", "[", "cfg", ".", "MODEL", ".", "ROI_KE_HEAD", ".", "PREDICTOR", "]", "\n", "return", "func", "(", "cfg", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.kePostProcessor.__init__": [[22, 26], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["post_nms_top_n", ",", "\n", "nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.kePostProcessor.forward": [[27, 59], ["ke_prob_x.split.split.split", "ke_prob_y.split.split.split", "mty_prob.split.split.split", "zip", "box.bbox.size", "maskrcnn_benchmark.structures.bounding_box.BoxList", "box.fields", "torch.cat", "maskrcnn_benchmark.structures.ke.textKES", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "results.append", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "inference.kePostProcessor.keer", "inference.kePostProcessor.keer", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "box.get_field"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], [")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            pre_nms_top_n (int)\n            post_nms_top_n (int)\n            nms_thresh (float)\n            min_size (int)\n            box_coder (BoxCoder)\n            fpn_post_nms_top_n (int)\n        \"\"\"", "\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n", "if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "\n", "", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.KEer.__init__": [[245, 248], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.KEer.compute_flow_field_cpu": [[220, 262], ["len", "boxes_data.tolist.tolist.int", "box_widths.tolist.tolist.clamp_", "box_heights.tolist.tolist.clamp_", "boxes_data.tolist.tolist.tolist", "box_widths.tolist.tolist.tolist", "box_heights.tolist.tolist.tolist", "torch.full", "range", "torch.full.to", "torch.linspace", "torch.linspace", "x[].expand", "y[].expand", "max", "min", "max", "min"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to"], []], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.KEer.compute_flow_field": [[263, 265], ["inference.KEer.compute_flow_field_cpu"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.KEer.compute_flow_field_cpu"], []], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.KEer.forward_single_image": [[249, 267], ["boxes.convert.convert.convert", "inference.heatmaps_to_kes", "print", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "kes.new_empty", "kes.new_empty.size"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.heatmaps_to_kes"], []], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.KEer.to_points": [[278, 287], ["masks.view", "masks.view.max", "torch.stack", "x_int.float", "y_int.float", "torch.ones_like"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.KEer.__call__": [[268, 284], ["isinstance", "zip", "len", "len", "inference.KEer.forward_single_image", "results.append", "len"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.KEer.forward_single_image"], []], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.scores_to_probs": [[170, 179], ["range", "temp.max", "numpy.exp", "numpy.sum", "numpy.exp"], "function", ["None"], ["                ", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_mask", "[", "i", "]", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "objectness", "=", "boxlists", "[", "i", "]", ".", "get_field", "(", "\"objectness\"", ")", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "\n", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", "\n", ")", "\n", "boxlists", "[", "i", "]", "=", "boxlists", "[", "i", "]", "[", "inds_sorted", "]", "\n", "", "", "return", "boxlists", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.kes_decode": [[75, 82], ["enumerate"], "function", ["None"], ["        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.heatmaps_to_kes": [[180, 238], ["rois.numpy.numpy", "np.transpose.numpy", "numpy.maximum", "numpy.maximum", "numpy.ceil", "numpy.ceil", "numpy.transpose", "numpy.zeros", "range", "len", "int", "int", "cv2.resize", "numpy.transpose", "inference.scores_to_probs", "range", "len", "np.transpose.copy", "roi_map[].argmax", "roi_map_probs[].max"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.transpose", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.transpose", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.scores_to_probs"], ["\n", "\n", "", "", "def", "make_rpn_postprocessor", "(", "config", ",", "rpn_box_coder", ",", "is_train", ")", ":", "\n", "    ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "fpn_post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "FPN_POST_NMS_TOP_N_TEST", "\n", "\n", "", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TRAIN", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TRAIN", "\n", "if", "not", "is_train", ":", "\n", "        ", "pre_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOP_N_TEST", "\n", "post_nms_top_n", "=", "config", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOP_N_TEST", "\n", "", "nms_thresh", "=", "config", ".", "MODEL", ".", "RPN", ".", "NMS_THRESH", "\n", "min_size", "=", "config", ".", "MODEL", ".", "RPN", ".", "MIN_SIZE", "\n", "box_selector", "=", "RPNPostProcessor", "(", "\n", "pre_nms_top_n", "=", "pre_nms_top_n", ",", "\n", "post_nms_top_n", "=", "post_nms_top_n", ",", "\n", "nms_thresh", "=", "nms_thresh", ",", "\n", "min_size", "=", "min_size", ",", "\n", "box_coder", "=", "rpn_box_coder", ",", "\n", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", ",", "\n", ")", "\n", "return", "box_selector", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.make_roi_ke_post_processor": [[286, 294], ["inference.KEPostProcessor", "inference.KEer"], "function", ["None"], []], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.KEPostProcessor.__init__": [[24, 27], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.KEPostProcessor.forward": [[28, 69], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "inference.KEPostProcessor.split", "zip", "maskrcnn_benchmark.structures.bounding_box.BoxList.get_field", "len", "inference.KEPostProcessor.keer", "maskrcnn_benchmark.structures.bounding_box.BoxList", "box.fields", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "results.append", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "box.get_field"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["        ", "\"\"\"\n        Arguments:\n            pre_nms_top_n (int)\n            post_nms_top_n (int)\n            nms_thresh (float)\n            min_size (int)\n            box_coder (BoxCoder)\n            fpn_post_nms_top_n (int)\n        \"\"\"", "\n", "super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n", "if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "\n", "", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "# later cat of bbox requires all fields to be present for all bbox", "\n", "# so we need to add a dummy for objectness that's missing", "\n", "for", "gt_box", "in", "gt_boxes", ":", "\n", "            ", "gt_box", ".", "add_field", "(", "\"objectness\"", ",", "torch", ".", "ones", "(", "len", "(", "gt_box", ")", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "proposals", "=", "[", "\n", "cat_boxlist", "(", "(", "proposal", ",", "gt_box", ")", ")", "\n", "for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.KEPostProcessorCOCOFormat.forward": [[78, 93], ["inference.KEPostProcessor.forward", "result.get_field().cpu", "result.add_field", "rle[].decode", "result.get_field", "ke_util.encode", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.iou_loss.IOULoss.forward", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.box_coder.BoxCoder.decode", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.box_coder.BoxCoder.encode"], ["\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n", "objectness", "=", "permute_and_flatten", "(", "objectness", ",", "N", ",", "A", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "objectness", "=", "objectness", ".", "sigmoid", "(", ")", "\n", "\n", "box_regression", "=", "permute_and_flatten", "(", "box_regression", ",", "N", ",", "A", ",", "4", ",", "H", ",", "W", ")", "\n", "\n", "num_anchors", "=", "A", "*", "H", "*", "W", "\n", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.expand_boxes": [[98, 113], ["torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "anchors", "]", "\n", "concat_anchors", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "concat_anchors", "=", "concat_anchors", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "-", "1", ",", "4", ")", ",", "concat_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "proposals", "=", "proposals", ".", "view", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "proposal", ",", "score", ",", "im_shape", "in", "zip", "(", "proposals", ",", "objectness", ",", "image_shapes", ")", ":", "\n", "            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "boxlist", "=", "remove_small_boxes", "(", "boxlist", ",", "self", ".", "min_size", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.expand_kes": [[115, 125], ["ke.new_zeros", "float"], "function", ["None"], ["boxlist", ",", "\n", "self", ".", "nms_thresh", ",", "\n", "max_proposals", "=", "self", ".", "post_nms_top_n", ",", "\n", "score_field", "=", "\"objectness\"", ",", "\n", ")", "\n", "result", ".", "append", "(", "boxlist", ")", "\n", "", "return", "result", "\n", "\n", "", "def", "forward", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.paste_ke_in_image": [[127, 169], ["inference.expand_kes", "box.to.to", "int", "int", "max", "max", "F.interpolate.expand", "F.interpolate.to", "torch.interpolate", "torch.zeros", "torch.zeros", "max", "min", "max", "min", "inference.expand_boxes"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.expand_kes", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc.interpolate", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.expand_boxes"], ["\n", "sampled_boxes", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "objectness", ")", "\n", "anchors", "=", "list", "(", "zip", "(", "*", "anchors", ")", ")", "\n", "for", "a", ",", "o", ",", "b", "in", "zip", "(", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "            ", "sampled_boxes", ".", "append", "(", "self", ".", "forward_for_single_feature_map", "(", "a", ",", "o", ",", "b", ")", ")", "\n", "\n", "", "boxlists", "=", "list", "(", "zip", "(", "*", "sampled_boxes", ")", ")", "\n", "boxlists", "=", "[", "cat_boxlist", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "\n", "if", "num_levels", ">", "1", ":", "\n", "            ", "boxlists", "=", "self", ".", "select_over_all_levels", "(", "boxlists", ")", "\n", "\n", "# append ground-truth bboxes to proposals", "\n", "", "if", "self", ".", "training", "and", "targets", "is", "not", "None", ":", "\n", "            ", "boxlists", "=", "self", ".", "add_gt_proposals", "(", "boxlists", ",", "targets", ")", "\n", "\n", "", "return", "boxlists", "\n", "\n", "", "def", "select_over_all_levels", "(", "self", ",", "boxlists", ")", ":", "\n", "        ", "num_images", "=", "len", "(", "boxlists", ")", "\n", "# different behavior during training and during testing:", "\n", "# during training, post_nms_top_n is over *all* the proposals combined, while", "\n", "# during testing, it is over the proposals for each image", "\n", "# TODO resolve this difference and make it consistent. It should be per image,", "\n", "# and not per batch", "\n", "if", "self", ".", "training", ":", "\n", "            ", "objectness", "=", "torch", ".", "cat", "(", "\n", "[", "boxlist", ".", "get_field", "(", "\"objectness\"", ")", "for", "boxlist", "in", "boxlists", "]", ",", "dim", "=", "0", "\n", ")", "\n", "box_sizes", "=", "[", "len", "(", "boxlist", ")", "for", "boxlist", "in", "boxlists", "]", "\n", "post_nms_top_n", "=", "min", "(", "self", ".", "fpn_post_nms_top_n", ",", "len", "(", "objectness", ")", ")", "\n", "_", ",", "inds_sorted", "=", "torch", ".", "topk", "(", "objectness", ",", "post_nms_top_n", ",", "dim", "=", "0", ",", "sorted", "=", "True", ")", "\n", "inds_mask", "=", "torch", ".", "zeros_like", "(", "objectness", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "inds_mask", "[", "inds_sorted", "]", "=", "1", "\n", "inds_mask", "=", "inds_mask", ".", "split", "(", "box_sizes", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.ke_head.ROIKEHead.__init__": [[37, 44], ["super().__init__", "cfg.clone", "roi_ke_feature_extractors.make_roi_ke_feature_extractor", "roi_ke_predictors.make_roi_ke_predictor", "inference.make_roi_ke_post_processor", "loss.make_roi_ke_loss_evaluator"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.roi_ke_feature_extractors.make_roi_ke_feature_extractor", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.roi_ke_predictors.make_roi_ke_predictor", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.inference.make_roi_ke_post_processor", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.loss.make_roi_ke_loss_evaluator"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "ROIKEHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "self", ".", "feature_extractor", "=", "make_roi_ke_feature_extractor", "(", "cfg", ",", "in_channels", ")", "\n", "self", ".", "predictor", "=", "make_roi_ke_predictor", "(", "cfg", ")", "\n", "self", ".", "post_processor", "=", "make_roi_ke_post_processor", "(", "cfg", ")", "\n", "self", ".", "loss_evaluator", "=", "make_roi_ke_loss_evaluator", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.ke_head.ROIKEHead.forward": [[45, 76], ["ke_head.ROIKEHead.feature_extractor", "ke_head.ROIKEHead.predictor", "ke_head.ROIKEHead.loss_evaluator", "ke_head.ROIKEHead.post_processor", "dict", "dict", "torch.no_grad", "ke_head.ROIKEHead.loss_evaluator.subsample"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.KeypointRCNNLossComputation.subsample"], ["", "def", "forward", "(", "self", ",", "features", ",", "proposals", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            features (list[Tensor]): feature-maps from possibly several levels\n            proposals (list[BoxList]): proposal boxes\n            targets (list[BoxList], optional): the ground-truth targets.\n\n        Returns:\n            x (Tensor): the result of the feature extractor\n            proposals (list[BoxList]): during training, the original proposals\n                are returned. During testing, the predicted boxlists are returned\n                with the `mask` field set\n            losses (dict[Tensor]): During training, returns the losses for the\n                head. During testing, returns an empty dict.\n        \"\"\"", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# during training, only focus on positive boxes", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "proposals", "=", "self", ".", "loss_evaluator", ".", "subsample", "(", "proposals", ",", "targets", ")", "\n", "\n", "", "", "x", "=", "self", ".", "feature_extractor", "(", "features", ",", "proposals", ")", "\n", "ke_outputs_x", ",", "ke_outputs_y", ",", "mty", "=", "self", ".", "predictor", "(", "x", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "result", "=", "self", ".", "post_processor", "(", "ke_outputs_x", ",", "ke_outputs_y", ",", "mty", ",", "proposals", ")", "\n", "return", "x", ",", "result", ",", "{", "}", ",", "{", "}", "\n", "\n", "", "loss_ke", ",", "loss_mty", "=", "self", ".", "loss_evaluator", "(", "proposals", ",", "ke_outputs_x", ",", "ke_outputs_y", ",", "mty", ")", "\n", "\n", "return", "x", ",", "proposals", ",", "dict", "(", "loss_ke", "=", "loss_ke", ")", ",", "dict", "(", "loss_mty", "=", "loss_mty", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.ke_head.keep_only_positive_boxes": [[13, 34], ["isinstance", "isinstance", "boxes[].has_field", "boxes_per_image.get_field", "inds_mask.nonzero().squeeze", "positive_boxes.append", "positive_inds.append", "inds_mask.nonzero"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.has_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["def", "keep_only_positive_boxes", "(", "boxes", ")", ":", "\n", "    ", "\"\"\"\n    Given a set of BoxList containing the `labels` field,\n    return a set of BoxList for which `labels > 0`.\n\n    Arguments:\n        boxes (list of BoxList)\n    \"\"\"", "\n", "assert", "isinstance", "(", "boxes", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "isinstance", "(", "boxes", "[", "0", "]", ",", "BoxList", ")", "\n", "assert", "boxes", "[", "0", "]", ".", "has_field", "(", "\"labels\"", ")", "\n", "positive_boxes", "=", "[", "]", "\n", "positive_inds", "=", "[", "]", "\n", "num_boxes", "=", "0", "\n", "for", "boxes_per_image", "in", "boxes", ":", "\n", "        ", "labels", "=", "boxes_per_image", ".", "get_field", "(", "\"labels\"", ")", "\n", "inds_mask", "=", "labels", ">", "0", "\n", "inds", "=", "inds_mask", ".", "nonzero", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "positive_boxes", ".", "append", "(", "boxes_per_image", "[", "inds", "]", ")", "\n", "positive_inds", ".", "append", "(", "inds_mask", ")", "\n", "", "return", "positive_boxes", ",", "positive_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.ke_head.build_roi_ke_head": [[78, 80], ["ke_head.ROIKEHead"], "function", ["None"], ["", "", "def", "build_roi_ke_head", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "return", "ROIKEHead", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.loss.KERCNNLossComputation.__init__": [[38, 48], ["cfg.clone"], "methods", ["None"], ["self", ".", "copied_fields", "=", "[", "]", "\n", "self", ".", "generate_labels_func", "=", "generate_labels_func", "\n", "self", ".", "discard_cases", "=", "[", "'not_visibility'", ",", "'between_thresholds'", "]", "\n", "\n", "", "def", "match_targets_to_anchors", "(", "self", ",", "anchor", ",", "target", ",", "copied_fields", "=", "[", "]", ")", ":", "\n", "        ", "match_quality_matrix", "=", "boxlist_iou", "(", "target", ",", "anchor", ")", "\n", "matched_idxs", "=", "self", ".", "proposal_matcher", "(", "match_quality_matrix", ")", "\n", "# RPN doesn't need any fields from target", "\n", "# for creating the labels, so clear them all", "\n", "target", "=", "target", ".", "copy_with_fields", "(", "copied_fields", ")", "\n", "# get the targets corresponding GT for each anchor", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.loss.KERCNNLossComputation.match_targets_to_proposals": [[49, 61], ["maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "loss.KERCNNLossComputation.proposal_matcher", "target.copy_with_fields.copy_with_fields.copy_with_fields", "matched_targets.add_field", "loss.KERCNNLossComputation.clamp"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.copy_with_fields", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field"], ["# NB: need to clamp the indices because we can have a single", "\n", "# GT in the image, and matched_idxs can be -2, which goes", "\n", "# out of bounds", "\n", "matched_targets", "=", "target", "[", "matched_idxs", ".", "clamp", "(", "min", "=", "0", ")", "]", "\n", "matched_targets", ".", "add_field", "(", "\"matched_idxs\"", ",", "matched_idxs", ")", "\n", "return", "matched_targets", "\n", "\n", "", "def", "prepare_targets", "(", "self", ",", "anchors", ",", "targets", ")", ":", "\n", "        ", "labels", "=", "[", "]", "\n", "regression_targets", "=", "[", "]", "\n", "for", "anchors_per_image", ",", "targets_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n", "            ", "matched_targets", "=", "self", ".", "match_targets_to_anchors", "(", "\n", "anchors_per_image", ",", "targets_per_image", ",", "self", ".", "copied_fields", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.loss.KERCNNLossComputation.prepare_targets": [[62, 95], ["zip", "loss.KERCNNLossComputation.match_targets_to_proposals", "loss.KERCNNLossComputation.get_field", "loss.KERCNNLossComputation.get_field", "labels_per_image.to.to.to", "loss.KERCNNLossComputation.get_field", "loss.KERCNNLossComputation.get_field", "loss._within_box", "labels.append", "kes.append", "mty.append", "_within_box.sum"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.KeypointRCNNLossComputation.match_targets_to_proposals", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss._within_box"], [")", "\n", "\n", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "self", ".", "generate_labels_func", "(", "matched_targets", ")", "\n", "labels_per_image", "=", "labels_per_image", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# Background (negative examples)", "\n", "bg_indices", "=", "matched_idxs", "==", "Matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "labels_per_image", "[", "bg_indices", "]", "=", "0", "\n", "\n", "# discard anchors that go out of the boundaries of the image", "\n", "if", "\"not_visibility\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "labels_per_image", "[", "~", "anchors_per_image", ".", "get_field", "(", "\"visibility\"", ")", "]", "=", "-", "1", "\n", "\n", "# discard indices that are between thresholds", "\n", "", "if", "\"between_thresholds\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "inds_to_discard", "=", "matched_idxs", "==", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_per_image", "[", "inds_to_discard", "]", "=", "-", "1", "\n", "\n", "# compute regression targets", "\n", "", "regression_targets_per_image", "=", "self", ".", "box_coder", ".", "encode", "(", "\n", "matched_targets", ".", "bbox", ",", "anchors_per_image", ".", "bbox", "\n", ")", "\n", "\n", "labels", ".", "append", "(", "labels_per_image", ")", "\n", "regression_targets", ".", "append", "(", "regression_targets_per_image", ")", "\n", "\n", "", "return", "labels", ",", "regression_targets", "\n", "\n", "\n", "", "def", "__call__", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.loss.KERCNNLossComputation.subsample": [[96, 131], ["loss.KERCNNLossComputation.prepare_targets", "loss.KERCNNLossComputation.fg_bg_sampler", "list", "zip", "enumerate", "proposals_per_image.add_field", "proposals_per_image.add_field", "proposals_per_image.add_field", "zip", "torch.nonzero().squeeze", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.KeypointRCNNLossComputation.prepare_targets", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field"], ["\n", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "anchors_per_image", "in", "anchors", "]", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_pos_inds", ",", "sampled_neg_inds", "]", ",", "dim", "=", "0", ")", "\n", "\n", "objectness", ",", "box_regression", "=", "concat_box_prediction_layers", "(", "objectness", ",", "box_regression", ")", "\n", "\n", "objectness", "=", "objectness", ".", "squeeze", "(", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "regression_targets", "=", "torch", ".", "cat", "(", "regression_targets", ",", "dim", "=", "0", ")", "\n", "\n", "box_loss", "=", "smooth_l1_loss", "(", "\n", "box_regression", "[", "sampled_pos_inds", "]", ",", "\n", "regression_targets", "[", "sampled_pos_inds", "]", ",", "\n", "beta", "=", "1.0", "/", "9", ",", "\n", "size_average", "=", "False", ",", "\n", ")", "/", "(", "sampled_inds", ".", "numel", "(", ")", ")", "\n", "\n", "objectness_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "objectness", "[", "sampled_inds", "]", ",", "labels", "[", "sampled_inds", "]", "\n", ")", "\n", "\n", "return", "objectness_loss", ",", "box_loss", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.loss.KERCNNLossComputation.__call__": [[132, 205], ["maskrcnn_benchmark.modeling.utils.cat", "maskrcnn_benchmark.modeling.utils.cat", "maskrcnn_benchmark.modeling.utils.cat().to", "torch.nonzero().squeeze", "maskrcnn_benchmark.modeling.utils.cat().to", "torch.nonzero().squeeze", "maskrcnn_benchmark.modeling.utils.cat().to", "torch.nonzero().squeeze", "maskrcnn_benchmark.modeling.utils.cat", "len", "len", "ke_logits_x.view.view.view", "ke_logits_y.view.view.view", "ke_logits_mty.view.view.view", "proposals_per_image.get_field", "proposals_per_image.get_field", "loss.project_kes_to_heatmap", "heatmaps_x.append", "heatmaps_y.append", "torch.nonzero().squeeze.append", "torch.nonzero().squeeze.append", "torch.nonzero().squeeze.append", "mtyS.append", "print", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "heatmaps_per_image_x.view", "heatmaps_per_image_y.view", "valid_per_image_x.view", "valid_per_image_y.view", "valid_per_image_mty.view", "heatmaps_per_image_mty.view", "maskrcnn_benchmark.modeling.utils.cat", "torch.nonzero", "maskrcnn_benchmark.modeling.utils.cat", "torch.nonzero", "maskrcnn_benchmark.modeling.utils.cat", "torch.nonzero", "maskrcnn_benchmark.modeling.utils.cat.numel", "torch.nonzero().squeeze.numel", "maskrcnn_benchmark.modeling.utils.cat.numel", "torch.nonzero().squeeze.numel", "ke_logits_x.view.view.sum", "ke_logits_y.view.view.sum", "ke_logits_mty.view.view.sum", "ke_logits_mty.view.view.numel", "torch.nonzero().squeeze.numel", "ke_logits_mty.view.view.sum", "torch.nn.functional.cross_entropy"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.loss.project_kes_to_heatmap", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat"], ["\n", "# This function should be overwritten in RetinaNet", "\n", "", "", "def", "generate_rpn_labels", "(", "matched_targets", ")", ":", "\n", "    ", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "matched_idxs", ">=", "0", "\n", "return", "labels_per_image", "\n", "\n", "\n", "", "def", "make_rpn_loss_evaluator", "(", "cfg", ",", "box_coder", ")", ":", "\n", "    ", "matcher", "=", "Matcher", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "FG_IOU_THRESHOLD", ",", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BG_IOU_THRESHOLD", ",", "\n", "allow_low_quality_matches", "=", "True", ",", "\n", ")", "\n", "\n", "fg_bg_sampler", "=", "BalancedPositiveNegativeSampler", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BATCH_SIZE_PER_IMAGE", ",", "cfg", ".", "MODEL", ".", "RPN", ".", "POSITIVE_FRACTION", "\n", ")", "\n", "\n", "loss_evaluator", "=", "RPNLossComputation", "(", "\n", "matcher", ",", "\n", "fg_bg_sampler", ",", "\n", "box_coder", ",", "\n", "generate_rpn_labels", "\n", ")", "\n", "return", "loss_evaluator", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.loss.project_kes_to_heatmap": [[20, 24], ["proposals.convert.convert", "maskrcnn_benchmark.structures.ke.kes_to_heat_map"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.ke.kes_to_heat_map"], ["\n", "class", "RPNLossComputation", "(", "object", ")", ":", "\n", "    ", "\"\"\"\n    This class computes the RPN loss.\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.loss._within_box": [[25, 34], ["None"], "function", ["None"], ["\n", "def", "__init__", "(", "self", ",", "proposal_matcher", ",", "fg_bg_sampler", ",", "box_coder", ",", "\n", "generate_labels_func", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposal_matcher (Matcher)\n            fg_bg_sampler (BalancedPositiveNegativeSampler)\n            box_coder (BoxCoder)\n        \"\"\"", "\n", "# self.target_preparator = target_preparator", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.loss.make_roi_ke_loss_evaluator": [[206, 222], ["maskrcnn_benchmark.modeling.matcher.Matcher", "maskrcnn_benchmark.modeling.balanced_positive_negative_sampler.BalancedPositiveNegativeSampler", "loss.KERCNNLossComputation"], "function", ["None"], []], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.roi_ke_feature_extractors.KERCNNFPNFeatureExtractor.__init__": [[15, 51], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.poolers.Pooler", "enumerate", "maskrcnn_benchmark.modeling.make_layers.make_conv3x3", "roi_ke_feature_extractors.KERCNNFPNFeatureExtractor.add_module", "roi_ke_feature_extractors.KERCNNFPNFeatureExtractor.blocks.append"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.make_layers.make_conv3x3"], ["def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            num_classes (int): number of output classes\n            input_size (int): number of channels of the input once it's flattened\n            representation_size (int): size of the intermediate representation\n        \"\"\"", "\n", "super", "(", "KERCNNFPNFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "resolution", "=", "cfg", ".", "MODEL", ".", "ROI_KE_HEAD", ".", "POOLER_RESOLUTION", "\n", "scales", "=", "cfg", ".", "MODEL", ".", "ROI_KE_HEAD", ".", "POOLER_SCALES", "\n", "sampling_ratio", "=", "cfg", ".", "MODEL", ".", "ROI_KE_HEAD", ".", "POOLER_SAMPLING_RATIO", "\n", "pooler", "=", "Pooler", "(", "\n", "output_size", "=", "(", "resolution", ",", "resolution", ")", ",", "\n", "scales", "=", "scales", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", "deformable", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "DEFORM_POOLING", "\n", ")", "\n", "input_size", "=", "in_channels", "\n", "self", ".", "pooler", "=", "pooler", "\n", "\n", "layers", "=", "cfg", ".", "MODEL", ".", "ROI_KE_HEAD", ".", "CONV_LAYERS", "\n", "use_gn", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "USE_GN", "\n", "dilation", "=", "cfg", ".", "MODEL", ".", "ROI_MASK_HEAD", ".", "DILATION", "\n", "\n", "next_feature", "=", "input_size", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "layer_idx", ",", "layer_features", "in", "enumerate", "(", "layers", ",", "1", ")", ":", "\n", "            ", "layer_name", "=", "\"ke_fcn{}\"", ".", "format", "(", "layer_idx", ")", "\n", "module", "=", "make_conv3x3", "(", "\n", "next_feature", ",", "layer_features", ",", "\n", "dilation", "=", "dilation", ",", "stride", "=", "1", ",", "use_gn", "=", "use_gn", "\n", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "module", ")", "\n", "next_feature", "=", "layer_features", "\n", "self", ".", "blocks", ".", "append", "(", "layer_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.roi_ke_feature_extractors.KERCNNFPNFeatureExtractor.forward": [[52, 59], ["roi_ke_feature_extractors.KERCNNFPNFeatureExtractor.pooler", "torch.nn.functional.relu", "getattr"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "proposals", ")", ":", "\n", "        ", "x", "=", "self", ".", "pooler", "(", "x", ",", "proposals", ")", "\n", "\n", "for", "layer_name", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "getattr", "(", "self", ",", "layer_name", ")", "(", "x", ")", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ke_head.roi_ke_feature_extractors.make_roi_ke_feature_extractor": [[66, 69], ["func"], "function", ["None"], ["def", "make_roi_ke_feature_extractor", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "func", "=", "_ROI_KE_FEATURE_EXTRACTORS", "[", "cfg", ".", "MODEL", ".", "ROI_KE_HEAD", ".", "FEATURE_EXTRACTOR", "]", "\n", "return", "func", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.roi_keypoint_feature_extractors.KeypointRCNNFeatureExtractor.__init__": [[12, 39], ["torch.nn.Module.__init__", "maskrcnn_benchmark.modeling.poolers.Pooler", "enumerate", "maskrcnn_benchmark.layers.Conv2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "roi_keypoint_feature_extractors.KeypointRCNNFeatureExtractor.add_module", "roi_keypoint_feature_extractors.KeypointRCNNFeatureExtractor.blocks.append"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "KeypointRCNNFeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "resolution", "=", "cfg", ".", "MODEL", ".", "ROI_KEYPOINT_HEAD", ".", "POOLER_RESOLUTION", "\n", "scales", "=", "cfg", ".", "MODEL", ".", "ROI_KEYPOINT_HEAD", ".", "POOLER_SCALES", "\n", "sampling_ratio", "=", "cfg", ".", "MODEL", ".", "ROI_KEYPOINT_HEAD", ".", "POOLER_SAMPLING_RATIO", "\n", "pooler", "=", "Pooler", "(", "\n", "output_size", "=", "(", "resolution", ",", "resolution", ")", ",", "\n", "scales", "=", "scales", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", "deformable", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "DEFORM_POOLING", "\n", ")", "\n", "self", ".", "pooler", "=", "pooler", "\n", "\n", "input_features", "=", "in_channels", "\n", "layers", "=", "cfg", ".", "MODEL", ".", "ROI_KEYPOINT_HEAD", ".", "CONV_LAYERS", "\n", "next_feature", "=", "input_features", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "layer_idx", ",", "layer_features", "in", "enumerate", "(", "layers", ",", "1", ")", ":", "\n", "            ", "layer_name", "=", "\"conv_fcn{}\"", ".", "format", "(", "layer_idx", ")", "\n", "module", "=", "Conv2d", "(", "next_feature", ",", "layer_features", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "module", ")", "\n", "next_feature", "=", "layer_features", "\n", "self", ".", "blocks", ".", "append", "(", "layer_name", ")", "\n", "", "self", ".", "out_channels", "=", "layer_features", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.roi_keypoint_feature_extractors.KeypointRCNNFeatureExtractor.forward": [[40, 45], ["roi_keypoint_feature_extractors.KeypointRCNNFeatureExtractor.pooler", "torch.nn.functional.relu", "getattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "proposals", ")", ":", "\n", "        ", "x", "=", "self", ".", "pooler", "(", "x", ",", "proposals", ")", "\n", "for", "layer_name", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "getattr", "(", "self", ",", "layer_name", ")", "(", "x", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.roi_keypoint_feature_extractors.make_roi_keypoint_feature_extractor": [[47, 52], ["func"], "function", ["None"], ["", "", "def", "make_roi_keypoint_feature_extractor", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "func", "=", "registry", ".", "ROI_KEYPOINT_FEATURE_EXTRACTORS", "[", "\n", "cfg", ".", "MODEL", ".", "ROI_KEYPOINT_HEAD", ".", "FEATURE_EXTRACTOR", "\n", "]", "\n", "return", "func", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.roi_keypoint_predictors.KeypointRCNNPredictor.__init__": [[9, 27], ["torch.nn.Module.__init__", "maskrcnn_benchmark.layers.ConvTranspose2d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "KeypointRCNNPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "input_features", "=", "in_channels", "\n", "num_keypoints", "=", "cfg", ".", "MODEL", ".", "ROI_KEYPOINT_HEAD", ".", "NUM_CLASSES", "\n", "deconv_kernel", "=", "4", "\n", "self", ".", "kps_score_lowres", "=", "layers", ".", "ConvTranspose2d", "(", "\n", "input_features", ",", "\n", "num_keypoints", ",", "\n", "deconv_kernel", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "deconv_kernel", "//", "2", "-", "1", ",", "\n", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "self", ".", "kps_score_lowres", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", "\n", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "kps_score_lowres", ".", "bias", ",", "0", ")", "\n", "self", ".", "up_scale", "=", "2", "\n", "self", ".", "out_channels", "=", "num_keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.roi_keypoint_predictors.KeypointRCNNPredictor.forward": [[28, 34], ["roi_keypoint_predictors.KeypointRCNNPredictor.kps_score_lowres", "maskrcnn_benchmark.layers.interpolate"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc.interpolate"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "kps_score_lowres", "(", "x", ")", "\n", "x", "=", "layers", ".", "interpolate", "(", "\n", "x", ",", "scale_factor", "=", "self", ".", "up_scale", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.roi_keypoint_predictors.make_roi_keypoint_predictor": [[36, 39], ["func"], "function", ["None"], ["", "", "def", "make_roi_keypoint_predictor", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "func", "=", "registry", ".", "ROI_KEYPOINT_PREDICTOR", "[", "cfg", ".", "MODEL", ".", "ROI_KEYPOINT_HEAD", ".", "PREDICTOR", "]", "\n", "return", "func", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.inference.KeypointPostProcessor.__init__": [[6, 9], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["from", "maskrcnn_benchmark", ".", "structures", ".", "boxlist_ops", "import", "cat_boxlist", "\n", "from", "maskrcnn_benchmark", ".", "structures", ".", "boxlist_ops", "import", "boxlist_nms", "\n", "from", "maskrcnn_benchmark", ".", "structures", ".", "boxlist_ops", "import", "remove_small_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.inference.KeypointPostProcessor.forward": [[10, 33], ["mask_prob.split.split.split", "scores.split.split.split", "zip", "inference.KeypointPostProcessor.keypointer", "len", "box.bbox.size", "maskrcnn_benchmark.structures.bounding_box.BoxList", "box.fields", "maskrcnn_benchmark.structures.keypoint.PersonKeypoints", "maskrcnn_benchmark.structures.keypoint.PersonKeypoints.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "results.append", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "box.get_field"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["from", ".", ".", "utils", "import", "cat", "\n", "from", ".", "utils", "import", "permute_and_flatten", "\n", "\n", "class", "RPNPostProcessor", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    Performs post-processing on the outputs of the RPN boxes, before feeding the\n    proposals to the heads\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "pre_nms_top_n", ",", "\n", "post_nms_top_n", ",", "\n", "nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.inference.Keypointer.__init__": [[107, 109], ["None"], "methods", ["None"], ["\n", "result", "=", "[", "]", "\n", "for", "proposal", ",", "score", ",", "im_shape", "in", "zip", "(", "proposals", ",", "objectness", ",", "image_shapes", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.inference.Keypointer.__call__": [[110, 120], ["isinstance", "inference.heatmaps_to_keypoints", "len", "masks.detach().cpu().numpy", "boxes[].bbox.cpu().numpy", "torch.from_numpy().to", "torch.as_tensor", "masks.detach().cpu", "boxes[].bbox.cpu", "torch.from_numpy", "masks.detach"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.inference.heatmaps_to_keypoints", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to"], ["            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "boxlist", "=", "remove_small_boxes", "(", "boxlist", ",", "self", ".", "min_size", ")", "\n", "boxlist", "=", "boxlist_nms", "(", "\n", "boxlist", ",", "\n", "self", ".", "nms_thresh", ",", "\n", "max_proposals", "=", "self", ".", "post_nms_top_n", ",", "\n", "score_field", "=", "\"objectness\"", ",", "\n", ")", "\n", "result", ".", "append", "(", "boxlist", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.inference.heatmaps_to_keypoints": [[40, 95], ["numpy.maximum", "numpy.maximum", "numpy.ceil", "numpy.ceil", "numpy.transpose", "numpy.zeros", "numpy.zeros", "range", "len", "cv2.resize", "numpy.transpose", "np.transpose.reshape().argmax", "numpy.transpose", "len", "len", "int", "int", "numpy.maximum", "numpy.maximum", "np.transpose.reshape", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.transpose", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.transpose", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.transpose"], ["self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n", "if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "\n", "", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n", "device", "=", "proposals", "[", "0", "]", ".", "bbox", ".", "device", "\n", "\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "# later cat of bbox requires all fields to be present for all bbox", "\n", "# so we need to add a dummy for objectness that's missing", "\n", "for", "gt_box", "in", "gt_boxes", ":", "\n", "            ", "gt_box", ".", "add_field", "(", "\"objectness\"", ",", "torch", ".", "ones", "(", "len", "(", "gt_box", ")", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "proposals", "=", "[", "\n", "cat_boxlist", "(", "(", "proposal", ",", "gt_box", ")", ")", "\n", "for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n", "]", "\n", "\n", "return", "proposals", "\n", "\n", "", "def", "forward_for_single_feature_map", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n", "objectness", "=", "permute_and_flatten", "(", "objectness", ",", "N", ",", "A", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "objectness", "=", "objectness", ".", "sigmoid", "(", ")", "\n", "\n", "box_regression", "=", "permute_and_flatten", "(", "box_regression", ",", "N", ",", "A", ",", "4", ",", "H", ",", "W", ")", "\n", "\n", "num_anchors", "=", "A", "*", "H", "*", "W", "\n", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.inference.make_roi_keypoint_post_processor": [[122, 126], ["inference.Keypointer", "inference.KeypointPostProcessor"], "function", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.keypoint_head.ROIKeypointHead.__init__": [[10, 18], ["super().__init__", "cfg.clone", "roi_keypoint_feature_extractors.make_roi_keypoint_feature_extractor", "roi_keypoint_predictors.make_roi_keypoint_predictor", "inference.make_roi_keypoint_post_processor", "loss.make_roi_keypoint_loss_evaluator"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.roi_keypoint_feature_extractors.make_roi_keypoint_feature_extractor", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.roi_keypoint_predictors.make_roi_keypoint_predictor", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.inference.make_roi_keypoint_post_processor", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.make_roi_keypoint_loss_evaluator"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "ROIKeypointHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "self", ".", "feature_extractor", "=", "make_roi_keypoint_feature_extractor", "(", "cfg", ",", "in_channels", ")", "\n", "self", ".", "predictor", "=", "make_roi_keypoint_predictor", "(", "\n", "cfg", ",", "self", ".", "feature_extractor", ".", "out_channels", ")", "\n", "self", ".", "post_processor", "=", "make_roi_keypoint_post_processor", "(", "cfg", ")", "\n", "self", ".", "loss_evaluator", "=", "make_roi_keypoint_loss_evaluator", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.keypoint_head.ROIKeypointHead.forward": [[19, 48], ["keypoint_head.ROIKeypointHead.feature_extractor", "keypoint_head.ROIKeypointHead.predictor", "keypoint_head.ROIKeypointHead.loss_evaluator", "keypoint_head.ROIKeypointHead.post_processor", "dict", "torch.no_grad", "keypoint_head.ROIKeypointHead.loss_evaluator.subsample"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.KeypointRCNNLossComputation.subsample"], ["", "def", "forward", "(", "self", ",", "features", ",", "proposals", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            features (list[Tensor]): feature-maps from possibly several levels\n            proposals (list[BoxList]): proposal boxes\n            targets (list[BoxList], optional): the ground-truth targets.\n\n        Returns:\n            x (Tensor): the result of the feature extractor\n            proposals (list[BoxList]): during training, the original proposals\n                are returned. During testing, the predicted boxlists are returned\n                with the `mask` field set\n            losses (dict[Tensor]): During training, returns the losses for the\n                head. During testing, returns an empty dict.\n        \"\"\"", "\n", "if", "self", ".", "training", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "proposals", "=", "self", ".", "loss_evaluator", ".", "subsample", "(", "proposals", ",", "targets", ")", "\n", "\n", "", "", "x", "=", "self", ".", "feature_extractor", "(", "features", ",", "proposals", ")", "\n", "kp_logits", "=", "self", ".", "predictor", "(", "x", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "result", "=", "self", ".", "post_processor", "(", "kp_logits", ",", "proposals", ")", "\n", "return", "x", ",", "result", ",", "{", "}", "\n", "\n", "", "loss_kp", "=", "self", ".", "loss_evaluator", "(", "proposals", ",", "kp_logits", ")", "\n", "\n", "return", "x", ",", "proposals", ",", "dict", "(", "loss_kp", "=", "loss_kp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.keypoint_head.build_roi_keypoint_head": [[50, 52], ["keypoint_head.ROIKeypointHead"], "function", ["None"], ["", "", "def", "build_roi_keypoint_head", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "return", "ROIKeypointHead", "(", "cfg", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.KeypointRCNNLossComputation.__init__": [[55, 65], ["None"], "methods", ["None"], ["\n", "", "def", "prepare_targets", "(", "self", ",", "anchors", ",", "targets", ")", ":", "\n", "        ", "labels", "=", "[", "]", "\n", "regression_targets", "=", "[", "]", "\n", "for", "anchors_per_image", ",", "targets_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n", "            ", "matched_targets", "=", "self", ".", "match_targets_to_anchors", "(", "\n", "anchors_per_image", ",", "targets_per_image", ",", "self", ".", "copied_fields", "\n", ")", "\n", "\n", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "self", ".", "generate_labels_func", "(", "matched_targets", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.KeypointRCNNLossComputation.match_targets_to_proposals": [[66, 78], ["maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "loss.KeypointRCNNLossComputation.proposal_matcher", "target.copy_with_fields.copy_with_fields.copy_with_fields", "matched_targets.add_field", "loss.KeypointRCNNLossComputation.clamp"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.copy_with_fields", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field"], ["labels_per_image", "=", "labels_per_image", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# Background (negative examples)", "\n", "bg_indices", "=", "matched_idxs", "==", "Matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "labels_per_image", "[", "bg_indices", "]", "=", "0", "\n", "\n", "# discard anchors that go out of the boundaries of the image", "\n", "if", "\"not_visibility\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "labels_per_image", "[", "~", "anchors_per_image", ".", "get_field", "(", "\"visibility\"", ")", "]", "=", "-", "1", "\n", "\n", "# discard indices that are between thresholds", "\n", "", "if", "\"between_thresholds\"", "in", "self", ".", "discard_cases", ":", "\n", "                ", "inds_to_discard", "=", "matched_idxs", "==", "Matcher", ".", "BETWEEN_THRESHOLDS", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.KeypointRCNNLossComputation.prepare_targets": [[79, 110], ["zip", "loss.KeypointRCNNLossComputation.match_targets_to_proposals", "loss.KeypointRCNNLossComputation.get_field", "loss.KeypointRCNNLossComputation.get_field", "labels_per_image.to.to.to", "loss.KeypointRCNNLossComputation.get_field", "loss._within_box", "labels.append", "keypoints.append"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.KeypointRCNNLossComputation.match_targets_to_proposals", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss._within_box"], ["labels_per_image", "[", "inds_to_discard", "]", "=", "-", "1", "\n", "\n", "# compute regression targets", "\n", "", "regression_targets_per_image", "=", "self", ".", "box_coder", ".", "encode", "(", "\n", "matched_targets", ".", "bbox", ",", "anchors_per_image", ".", "bbox", "\n", ")", "\n", "\n", "labels", ".", "append", "(", "labels_per_image", ")", "\n", "regression_targets", ".", "append", "(", "regression_targets_per_image", ")", "\n", "\n", "", "return", "labels", ",", "regression_targets", "\n", "\n", "\n", "", "def", "__call__", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors (list[BoxList])\n            objectness (list[Tensor])\n            box_regression (list[Tensor])\n            targets (list[BoxList])\n\n        Returns:\n            objectness_loss (Tensor)\n            box_loss (Tensor\n        \"\"\"", "\n", "anchors", "=", "[", "cat_boxlist", "(", "anchors_per_image", ")", "for", "anchors_per_image", "in", "anchors", "]", "\n", "labels", ",", "regression_targets", "=", "self", ".", "prepare_targets", "(", "anchors", ",", "targets", ")", "\n", "sampled_pos_inds", ",", "sampled_neg_inds", "=", "self", ".", "fg_bg_sampler", "(", "labels", ")", "\n", "sampled_pos_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_pos_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "nonzero", "(", "torch", ".", "cat", "(", "sampled_neg_inds", ",", "dim", "=", "0", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_pos_inds", ",", "sampled_neg_inds", "]", ",", "dim", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.KeypointRCNNLossComputation.subsample": [[111, 144], ["loss.KeypointRCNNLossComputation.prepare_targets", "loss.KeypointRCNNLossComputation.fg_bg_sampler", "list", "zip", "enumerate", "proposals_per_image.add_field", "proposals_per_image.add_field", "zip", "torch.nonzero().squeeze", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.KeypointRCNNLossComputation.prepare_targets", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field"], ["\n", "objectness", ",", "box_regression", "=", "concat_box_prediction_layers", "(", "objectness", ",", "box_regression", ")", "\n", "\n", "objectness", "=", "objectness", ".", "squeeze", "(", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "regression_targets", "=", "torch", ".", "cat", "(", "regression_targets", ",", "dim", "=", "0", ")", "\n", "\n", "box_loss", "=", "smooth_l1_loss", "(", "\n", "box_regression", "[", "sampled_pos_inds", "]", ",", "\n", "regression_targets", "[", "sampled_pos_inds", "]", ",", "\n", "beta", "=", "1.0", "/", "9", ",", "\n", "size_average", "=", "False", ",", "\n", ")", "/", "(", "sampled_inds", ".", "numel", "(", ")", ")", "\n", "\n", "objectness_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "objectness", "[", "sampled_inds", "]", ",", "labels", "[", "sampled_inds", "]", "\n", ")", "\n", "\n", "return", "objectness_loss", ",", "box_loss", "\n", "\n", "# This function should be overwritten in RetinaNet", "\n", "", "", "def", "generate_rpn_labels", "(", "matched_targets", ")", ":", "\n", "    ", "matched_idxs", "=", "matched_targets", ".", "get_field", "(", "\"matched_idxs\"", ")", "\n", "labels_per_image", "=", "matched_idxs", ">=", "0", "\n", "return", "labels_per_image", "\n", "\n", "\n", "", "def", "make_rpn_loss_evaluator", "(", "cfg", ",", "box_coder", ")", ":", "\n", "    ", "matcher", "=", "Matcher", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "FG_IOU_THRESHOLD", ",", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BG_IOU_THRESHOLD", ",", "\n", "allow_low_quality_matches", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.KeypointRCNNLossComputation.__call__": [[145, 170], ["maskrcnn_benchmark.modeling.utils.cat", "maskrcnn_benchmark.modeling.utils.cat().to", "torch.nonzero().squeeze", "keypoint_logits.view.view.view", "torch.nn.functional.cross_entropy", "proposals_per_image.get_field", "loss.project_keypoints_to_heatmap", "heatmaps.append", "torch.nonzero().squeeze.append", "heatmaps_per_image.view", "valid_per_image.view", "maskrcnn_benchmark.modeling.utils.cat", "torch.nonzero", "maskrcnn_benchmark.modeling.utils.cat.numel", "len", "keypoint_logits.view.view.sum"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.project_keypoints_to_heatmap", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat"], [")", "\n", "\n", "fg_bg_sampler", "=", "BalancedPositiveNegativeSampler", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "BATCH_SIZE_PER_IMAGE", ",", "cfg", ".", "MODEL", ".", "RPN", ".", "POSITIVE_FRACTION", "\n", ")", "\n", "\n", "loss_evaluator", "=", "RPNLossComputation", "(", "\n", "matcher", ",", "\n", "fg_bg_sampler", ",", "\n", "box_coder", ",", "\n", "generate_rpn_labels", "\n", ")", "\n", "return", "loss_evaluator", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.project_keypoints_to_heatmap": [[17, 21], ["proposals.convert.convert", "maskrcnn_benchmark.structures.keypoint.keypoints_to_heat_map"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.keypoints_to_heat_map"], ["from", "maskrcnn_benchmark", ".", "structures", ".", "boxlist_ops", "import", "boxlist_iou", "\n", "from", "maskrcnn_benchmark", ".", "structures", ".", "boxlist_ops", "import", "cat_boxlist", "\n", "\n", "\n", "class", "RPNLossComputation", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.cat_boxlist_with_keypoints": [[24, 37], ["all", "maskrcnn_benchmark.modeling.utils.cat", "boxlists[].get_fields", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist", "maskrcnn_benchmark.structures.boxlist_ops.cat_boxlist.add_field", "boxlist.copy_with_fields", "boxlist.has_field", "boxlist.get_field"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.cat_boxlist", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.copy_with_fields", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.has_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["\n", "\n", "def", "__init__", "(", "self", ",", "proposal_matcher", ",", "fg_bg_sampler", ",", "box_coder", ",", "\n", "generate_labels_func", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposal_matcher (Matcher)\n            fg_bg_sampler (BalancedPositiveNegativeSampler)\n            box_coder (BoxCoder)\n        \"\"\"", "\n", "# self.target_preparator = target_preparator", "\n", "self", ".", "proposal_matcher", "=", "proposal_matcher", "\n", "self", ".", "fg_bg_sampler", "=", "fg_bg_sampler", "\n", "self", ".", "box_coder", "=", "box_coder", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss._within_box": [[39, 52], ["None"], "function", ["None"], ["self", ".", "generate_labels_func", "=", "generate_labels_func", "\n", "self", ".", "discard_cases", "=", "[", "'not_visibility'", ",", "'between_thresholds'", "]", "\n", "\n", "", "def", "match_targets_to_anchors", "(", "self", ",", "anchor", ",", "target", ",", "copied_fields", "=", "[", "]", ")", ":", "\n", "        ", "match_quality_matrix", "=", "boxlist_iou", "(", "target", ",", "anchor", ")", "\n", "matched_idxs", "=", "self", ".", "proposal_matcher", "(", "match_quality_matrix", ")", "\n", "# RPN doesn't need any fields from target", "\n", "# for creating the labels, so clear them all", "\n", "target", "=", "target", ".", "copy_with_fields", "(", "copied_fields", ")", "\n", "# get the targets corresponding GT for each anchor", "\n", "# NB: need to clamp the indices because we can have a single", "\n", "# GT in the image, and matched_idxs can be -2, which goes", "\n", "# out of bounds", "\n", "matched_targets", "=", "target", "[", "matched_idxs", ".", "clamp", "(", "min", "=", "0", ")", "]", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.keypoint_head.loss.make_roi_keypoint_loss_evaluator": [[172, 184], ["maskrcnn_benchmark.modeling.matcher.Matcher", "maskrcnn_benchmark.modeling.balanced_positive_negative_sampler.BalancedPositiveNegativeSampler", "loss.KeypointRCNNLossComputation"], "function", ["None"], []], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_modeldef.add_archs": [[4, 9], ["None"], "function", ["None"], ["def", "add_archs", "(", "archs", ")", ":", "\n", "    ", "global", "MODEL_ARCH", "\n", "for", "x", "in", "archs", ":", "\n", "        ", "assert", "x", "not", "in", "MODEL_ARCH", ",", "\"Duplicated model name {} existed\"", ".", "format", "(", "x", ")", "\n", "MODEL_ARCH", "[", "x", "]", "=", "archs", "[", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.msr.ConcatUpConv.__init__": [[7, 21], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.init.kaiming_uniform_", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.init.kaiming_uniform_", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "outplanes", ",", "upsample", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConcatUpConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_channels", "=", "outplanes", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "con_1x1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "outplanes", ",", "1", ",", "bias", "=", "False", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "con_1x1", ".", "weight", ",", "a", "=", "1", ")", "\n", "self", ".", "nor_1", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "leakyrelu_1", "=", "nn", ".", "ReLU", "(", ")", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "self", ".", "con_3x3", "=", "nn", ".", "Conv2d", "(", "outplanes", ",", "out_channels", "//", "2", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "con_3x3", ".", "weight", ",", "a", "=", "1", ")", "\n", "self", ".", "nor_3", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", "//", "2", ")", "\n", "self", ".", "leakyrelu_3", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.msr.ConcatUpConv.forward": [[22, 30], ["torch.cat", "msr.ConcatUpConv.leakyrelu_1", "msr.ConcatUpConv.nor_1", "msr.ConcatUpConv.leakyrelu_3", "torch.nn.functional.interpolate", "msr.ConcatUpConv.con_1x1", "msr.ConcatUpConv.nor_3", "msr.ConcatUpConv.con_3x3"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc.interpolate"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "fusion", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "out_1", "=", "self", ".", "leakyrelu_1", "(", "self", ".", "nor_1", "(", "self", ".", "con_1x1", "(", "fusion", ")", ")", ")", "\n", "out", "=", "None", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "out", "=", "self", ".", "leakyrelu_3", "(", "self", ".", "nor_3", "(", "self", ".", "con_3x3", "(", "out_1", ")", ")", ")", "\n", "out", "=", "F", ".", "interpolate", "(", "out", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "", "return", "out", ",", "out_1", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.msr.MSR.__init__": [[33, 46], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList.append", "enumerate", "msr.ConcatUpConv", "torch.nn.ModuleList.append", "msr.ConcatUpConv"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "body", ",", "channels", ",", "fpn", "=", "None", ",", "pan", "=", "None", ")", ":", "\n", "        ", "super", "(", "MSR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "body", "=", "body", "\n", "cucs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "channel", "=", "channels", "[", "0", "]", "\n", "cucs", ".", "append", "(", "ConcatUpConv", "(", "channel", "*", "2", ",", "channel", ",", "upsample", "=", "False", ")", ")", "\n", "for", "i", ",", "channel", "in", "enumerate", "(", "channels", "[", "1", ":", "]", ")", ":", "\n", "            ", "cucs", ".", "append", "(", "ConcatUpConv", "(", "channel", "*", "2", ",", "channel", ")", ")", "\n", "", "self", ".", "cucs", "=", "cucs", "\n", "if", "fpn", "is", "not", "None", ":", "\n", "            ", "self", ".", "fpn", "=", "fpn", "\n", "", "if", "pan", "is", "not", "None", ":", "\n", "            ", "self", ".", "pan", "=", "pan", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.msr.MSR.forward": [[47, 66], ["msr.MSR.body", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "zip", "hasattr", "hasattr", "msr.MSR.body", "cuc", "new_outputs.append", "msr.MSR.pan", "msr.MSR.fpn"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc.interpolate", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc.interpolate"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "body", "(", "x", ")", "\n", "\n", "re_x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "0.5", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "output_re", "=", "self", ".", "body", "(", "re_x", ")", "[", "-", "1", "]", "\n", "low", "=", "F", ".", "interpolate", "(", "output_re", ",", "\n", "size", "=", "outputs", "[", "-", "1", "]", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "new_outputs", "=", "[", "]", "\n", "for", "cuc", ",", "high", "in", "zip", "(", "self", ".", "cucs", "[", ":", ":", "-", "1", "]", ",", "outputs", "[", ":", ":", "-", "1", "]", ")", ":", "\n", "            ", "low", ",", "out", "=", "cuc", "(", "high", ",", "low", ")", "\n", "new_outputs", ".", "append", "(", "out", ")", "\n", "", "outs", "=", "new_outputs", "[", ":", ":", "-", "1", "]", "\n", "if", "hasattr", "(", "self", ",", "'pan'", ")", ":", "\n", "            ", "outs", "=", "self", ".", "pan", "(", "outs", ")", "\n", "", "if", "hasattr", "(", "self", ",", "'fpn'", ")", ":", "\n", "            ", "outs", "=", "self", ".", "fpn", "(", "outs", ")", "\n", "", "return", "outs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.pan.FPA.__init__": [[6, 43], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", "=", "2048", ")", ":", "\n", "        ", "\"\"\"\n        Feature Pyramid Attention\n        :type channels: int\n        \"\"\"", "\n", "super", "(", "FPA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "channels_mid", "=", "int", "(", "channels", "/", "4", ")", "\n", "\n", "self", ".", "channels_cond", "=", "channels", "\n", "\n", "# Master branch", "\n", "self", ".", "conv_master", "=", "nn", ".", "Conv2d", "(", "self", ".", "channels_cond", ",", "channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_master", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "\n", "# Global pooling branch", "\n", "self", ".", "conv_gpb", "=", "nn", ".", "Conv2d", "(", "self", ".", "channels_cond", ",", "channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "#self.bn_gpb = nn.BatchNorm2d(channels)", "\n", "\n", "# C333 because of the shape of last feature maps is (16, 16).", "\n", "self", ".", "conv7x7_1", "=", "nn", ".", "Conv2d", "(", "self", ".", "channels_cond", ",", "channels_mid", ",", "kernel_size", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1_1", "=", "nn", ".", "BatchNorm2d", "(", "channels_mid", ")", "\n", "self", ".", "conv5x5_1", "=", "nn", ".", "Conv2d", "(", "channels_mid", ",", "channels_mid", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "2", ",", "padding", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2_1", "=", "nn", ".", "BatchNorm2d", "(", "channels_mid", ")", "\n", "self", ".", "conv3x3_1", "=", "nn", ".", "Conv2d", "(", "channels_mid", ",", "channels_mid", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3_1", "=", "nn", ".", "BatchNorm2d", "(", "channels_mid", ")", "\n", "\n", "self", ".", "conv7x7_2", "=", "nn", ".", "Conv2d", "(", "channels_mid", ",", "channels_mid", ",", "kernel_size", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1_2", "=", "nn", ".", "BatchNorm2d", "(", "channels_mid", ")", "\n", "self", ".", "conv5x5_2", "=", "nn", ".", "Conv2d", "(", "channels_mid", ",", "channels_mid", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2_2", "=", "nn", ".", "BatchNorm2d", "(", "channels_mid", ")", "\n", "self", ".", "conv3x3_2", "=", "nn", ".", "Conv2d", "(", "channels_mid", ",", "channels_mid", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3_2", "=", "nn", ".", "BatchNorm2d", "(", "channels_mid", ")", "\n", "\n", "self", ".", "bn_upsample_1", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "self", ".", "conv1x1_up1", "=", "nn", ".", "Conv2d", "(", "channels_mid", ",", "channels", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.pan.FPA.forward": [[44, 97], ["pan.FPA.conv_master", "pan.FPA.bn_master", "pan.FPA.conv_gpb", "pan.FPA.conv7x7_1", "pan.FPA.bn1_1", "pan.FPA.relu", "pan.FPA.conv7x7_2", "pan.FPA.bn1_2", "pan.FPA.conv5x5_1", "pan.FPA.bn2_1", "pan.FPA.relu", "pan.FPA.conv5x5_2", "pan.FPA.bn2_2", "pan.FPA.conv3x3_1", "pan.FPA.bn3_1", "pan.FPA.relu", "pan.FPA.conv3x3_2", "pan.FPA.bn3_2", "torch.upsample", "torch.upsample", "pan.FPA.relu", "torch.upsample", "torch.upsample", "pan.FPA.relu", "torch.upsample", "torch.upsample", "pan.FPA.relu", "pan.FPA.relu", "pan.FPA.bn_upsample_1", "pan.FPA.conv1x1_up1", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        :param x: Shape: [b, 2048, h, w]\n        :return: out: Feature maps. Shape: [b, 2048, h, w]\n        \"\"\"", "\n", "# Master branch", "\n", "x_master", "=", "self", ".", "conv_master", "(", "x", ")", "\n", "x_master", "=", "self", ".", "bn_master", "(", "x_master", ")", "\n", "\n", "# Global pooling branch", "\n", "x_gpb", "=", "nn", ".", "AvgPool2d", "(", "x", ".", "shape", "[", "2", ":", "]", ")", "(", "x", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "channels_cond", ",", "1", ",", "1", ")", "\n", "x_gpb", "=", "self", ".", "conv_gpb", "(", "x_gpb", ")", "\n", "#x_gpb = self.bn_gpb(x_gpb)", "\n", "\n", "# Branch 1", "\n", "x1_1", "=", "self", ".", "conv7x7_1", "(", "x", ")", "\n", "x1_1", "=", "self", ".", "bn1_1", "(", "x1_1", ")", "\n", "x1_1", "=", "self", ".", "relu", "(", "x1_1", ")", "\n", "x1_2", "=", "self", ".", "conv7x7_2", "(", "x1_1", ")", "\n", "x1_2", "=", "self", ".", "bn1_2", "(", "x1_2", ")", "\n", "\n", "# Branch 2", "\n", "x2_1", "=", "self", ".", "conv5x5_1", "(", "x1_1", ")", "\n", "x2_1", "=", "self", ".", "bn2_1", "(", "x2_1", ")", "\n", "x2_1", "=", "self", ".", "relu", "(", "x2_1", ")", "\n", "x2_2", "=", "self", ".", "conv5x5_2", "(", "x2_1", ")", "\n", "x2_2", "=", "self", ".", "bn2_2", "(", "x2_2", ")", "\n", "\n", "# Branch 3", "\n", "x3_1", "=", "self", ".", "conv3x3_1", "(", "x2_1", ")", "\n", "x3_1", "=", "self", ".", "bn3_1", "(", "x3_1", ")", "\n", "x3_1", "=", "self", ".", "relu", "(", "x3_1", ")", "\n", "x3_2", "=", "self", ".", "conv3x3_2", "(", "x3_1", ")", "\n", "x3_2", "=", "self", ".", "bn3_2", "(", "x3_2", ")", "\n", "\n", "# Merge branch 1 and 2", "\n", "x3_upsample", "=", "F", ".", "upsample", "(", "x3_2", ",", "size", "=", "x2_2", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "x2_merge", "=", "self", ".", "relu", "(", "x2_2", "+", "x3_upsample", ")", "\n", "\n", "x2_upsample", "=", "F", ".", "upsample", "(", "x2_merge", ",", "size", "=", "x1_2", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "x1_merge", "=", "self", ".", "relu", "(", "x1_2", "+", "x2_upsample", ")", "\n", "\n", "x1_merge_upsample", "=", "F", ".", "upsample", "(", "x1_merge", ",", "size", "=", "x_master", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "x1_merge_upsample_ch", "=", "self", ".", "relu", "(", "self", ".", "bn_upsample_1", "(", "self", ".", "conv1x1_up1", "(", "x1_merge_upsample", ")", ")", ")", "\n", "x_master", "=", "x_master", "*", "x1_merge_upsample_ch", "\n", "#", "\n", "out", "=", "self", ".", "relu", "(", "x_master", "+", "x_gpb", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.pan.GAU.__init__": [[100, 117], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels_high", ",", "channels_low", ",", "upsample", "=", "True", ")", ":", "\n", "        ", "super", "(", "GAU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Global Attention Upsample", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "conv3x3", "=", "nn", ".", "Conv2d", "(", "channels_low", ",", "channels_low", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_low", "=", "nn", ".", "BatchNorm2d", "(", "channels_low", ")", "\n", "\n", "self", ".", "conv1x1", "=", "nn", ".", "Conv2d", "(", "channels_high", ",", "channels_low", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "#self.bn_high = nn.BatchNorm2d(channels_low)", "\n", "\n", "if", "upsample", ":", "\n", "            ", "self", ".", "conv_upsample", "=", "nn", ".", "ConvTranspose2d", "(", "channels_high", ",", "channels_low", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_upsample", "=", "nn", ".", "BatchNorm2d", "(", "channels_low", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_reduction", "=", "nn", ".", "Conv2d", "(", "channels_high", ",", "channels_low", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_reduction", "=", "nn", ".", "BatchNorm2d", "(", "channels_low", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.pan.GAU.forward": [[118, 147], ["pan.GAU.conv1x1", "pan.GAU.relu", "pan.GAU.conv3x3", "pan.GAU.bn_low", "len", "pan.GAU.relu", "pan.GAU.relu", "torch.AvgPool2d", "torch.AvgPool2d", "pan.GAU.bn_upsample", "pan.GAU.bn_reduction", "pan.GAU.conv_upsample", "pan.GAU.conv_reduction"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fms_high", ",", "fms_low", ",", "fm_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Use the high level features with abundant catagory information to weight the low level features with pixel\n        localization information. In the meantime, we further use mask feature maps with catagory-specific information\n        to localize the mask position.\n        :param fms_high: Features of high level. Tensor.\n        :param fms_low: Features of low level.  Tensor.\n        :param fm_mask:\n        :return: fms_att_upsample\n        \"\"\"", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "fms_high", ".", "shape", "\n", "\n", "fms_high_gp", "=", "nn", ".", "AvgPool2d", "(", "fms_high", ".", "shape", "[", "2", ":", "]", ")", "(", "fms_high", ")", ".", "view", "(", "len", "(", "fms_high", ")", ",", "c", ",", "1", ",", "1", ")", "\n", "fms_high_gp", "=", "self", ".", "conv1x1", "(", "fms_high_gp", ")", "\n", "# fms_high_gp = self.bn_high(fms_high_gp)# arlog, when the spatial size HxW = 1x1, the BN cannot be used.", "\n", "fms_high_gp", "=", "self", ".", "relu", "(", "fms_high_gp", ")", "\n", "\n", "# fms_low_mask = torch.cat([fms_low, fm_mask], dim=1)", "\n", "fms_low_mask", "=", "self", ".", "conv3x3", "(", "fms_low", ")", "\n", "fms_low_mask", "=", "self", ".", "bn_low", "(", "fms_low_mask", ")", "\n", "\n", "fms_att", "=", "fms_low_mask", "*", "fms_high_gp", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "\n", "self", ".", "bn_upsample", "(", "self", ".", "conv_upsample", "(", "fms_high", ")", ")", "+", "fms_att", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "\n", "self", ".", "bn_reduction", "(", "self", ".", "conv_reduction", "(", "fms_high", ")", ")", "+", "fms_att", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.pan.PAN.__init__": [[150, 163], ["torch.Module.__init__", "pan.FPA", "pan.GAU", "pan.GAU", "pan.GAU"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :param blocks: Blocks of the network with reverse sequential.\n        \"\"\"", "\n", "super", "(", "PAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "channels_blocks", "=", "[", "2048", ",", "1024", ",", "512", ",", "256", "]", "\n", "\n", "self", ".", "fpa", "=", "FPA", "(", "channels", "=", "channels_blocks", "[", "0", "]", ")", "\n", "\n", "self", ".", "gau_block1", "=", "GAU", "(", "channels_blocks", "[", "0", "]", ",", "channels_blocks", "[", "1", "]", ")", "\n", "self", ".", "gau_block2", "=", "GAU", "(", "channels_blocks", "[", "1", "]", ",", "channels_blocks", "[", "2", "]", ")", "\n", "self", ".", "gau_block3", "=", "GAU", "(", "channels_blocks", "[", "2", "]", ",", "channels_blocks", "[", "3", "]", ")", "\n", "self", ".", "gau", "=", "[", "self", ".", "gau_block1", ",", "self", ".", "gau_block2", ",", "self", ".", "gau_block3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.pan.PAN.forward": [[164, 178], ["enumerate", "feats.reverse", "tuple", "feats.append", "pan.PAN.fpa", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fms", ")", ":", "\n", "        ", "\"\"\"\n        :param fms: Feature maps of forward propagation in the network with reverse sequential. shape:[b, c, h, w]\n        :return: fm_high. [b, 256, h, w]\n        \"\"\"", "\n", "feats", "=", "[", "]", "\n", "for", "i", ",", "fm_low", "in", "enumerate", "(", "fms", "[", ":", ":", "-", "1", "]", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "fm_high", "=", "self", ".", "fpa", "(", "fm_low", ")", "\n", "", "else", ":", "\n", "                ", "fm_high", "=", "self", ".", "gau", "[", "int", "(", "i", "-", "1", ")", "]", "(", "fm_high", ",", "fm_low", ")", "\n", "", "feats", ".", "append", "(", "fm_high", ")", "\n", "", "feats", ".", "reverse", "(", ")", "\n", "return", "tuple", "(", "feats", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fpn.FPN.__init__": [[14, 42], ["torch.nn.Module.__init__", "enumerate", "conv_block", "conv_block", "fpn.FPN.add_module", "fpn.FPN.add_module", "fpn.FPN.inner_blocks.append", "fpn.FPN.layer_blocks.append"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "in_channels_list", ",", "out_channels", ",", "conv_block", ",", "top_blocks", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            in_channels_list (list[int]): number of channels for each feature map that\n                will be fed\n            out_channels (int): number of channels of the FPN representation\n            top_blocks (nn.Module or None): if provided, an extra operation will\n                be performed on the output of the last (smallest resolution)\n                FPN output, and the result will extend the result list\n        \"\"\"", "\n", "super", "(", "FPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inner_blocks", "=", "[", "]", "\n", "self", ".", "layer_blocks", "=", "[", "]", "\n", "for", "idx", ",", "in_channels", "in", "enumerate", "(", "in_channels_list", ",", "1", ")", ":", "\n", "            ", "inner_block", "=", "\"fpn_inner{}\"", ".", "format", "(", "idx", ")", "\n", "layer_block", "=", "\"fpn_layer{}\"", ".", "format", "(", "idx", ")", "\n", "\n", "if", "in_channels", "==", "0", ":", "\n", "                ", "continue", "\n", "", "inner_block_module", "=", "conv_block", "(", "in_channels", ",", "out_channels", ",", "1", ")", "\n", "layer_block_module", "=", "conv_block", "(", "out_channels", ",", "out_channels", ",", "3", ",", "1", ")", "\n", "self", ".", "add_module", "(", "inner_block", ",", "inner_block_module", ")", "\n", "self", ".", "add_module", "(", "layer_block", ",", "layer_block_module", ")", "\n", "self", ".", "inner_blocks", ".", "append", "(", "inner_block", ")", "\n", "self", ".", "layer_blocks", ".", "append", "(", "layer_block", ")", "\n", "", "self", ".", "top_blocks", "=", "top_blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fpn.FPN.forward": [[43, 75], ["results.append", "zip", "isinstance", "tuple", "getattr", "torch.interpolate", "torch.interpolate", "results.insert", "fpn.FPN.top_blocks", "results.extend", "isinstance", "getattr", "getattr", "fpn.FPN.top_blocks", "results.extend", "getattr"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc.interpolate", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc.interpolate", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.extend"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            x (list[Tensor]): feature maps for each feature level.\n        Returns:\n            results (tuple[Tensor]): feature maps after FPN layers.\n                They are ordered from highest resolution first.\n        \"\"\"", "\n", "last_inner", "=", "getattr", "(", "self", ",", "self", ".", "inner_blocks", "[", "-", "1", "]", ")", "(", "x", "[", "-", "1", "]", ")", "\n", "results", "=", "[", "]", "\n", "results", ".", "append", "(", "getattr", "(", "self", ",", "self", ".", "layer_blocks", "[", "-", "1", "]", ")", "(", "last_inner", ")", ")", "\n", "for", "feature", ",", "inner_block", ",", "layer_block", "in", "zip", "(", "\n", "x", "[", ":", "-", "1", "]", "[", ":", ":", "-", "1", "]", ",", "self", ".", "inner_blocks", "[", ":", "-", "1", "]", "[", ":", ":", "-", "1", "]", ",", "self", ".", "layer_blocks", "[", ":", "-", "1", "]", "[", ":", ":", "-", "1", "]", "\n", ")", ":", "\n", "            ", "if", "not", "inner_block", ":", "\n", "                ", "continue", "\n", "", "inner_top_down", "=", "F", ".", "interpolate", "(", "last_inner", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "inner_lateral", "=", "getattr", "(", "self", ",", "inner_block", ")", "(", "feature", ")", "\n", "# TODO use size instead of scale to make it robust to different sizes", "\n", "# inner_top_down = F.upsample(last_inner, size=inner_lateral.shape[-2:],", "\n", "# mode='bilinear', align_corners=False)", "\n", "last_inner", "=", "inner_lateral", "+", "inner_top_down", "\n", "results", ".", "insert", "(", "0", ",", "getattr", "(", "self", ",", "layer_block", ")", "(", "last_inner", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "top_blocks", ",", "LastLevelP6P7", ")", ":", "\n", "            ", "last_results", "=", "self", ".", "top_blocks", "(", "x", "[", "-", "1", "]", ",", "results", "[", "-", "1", "]", ")", "\n", "results", ".", "extend", "(", "last_results", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "top_blocks", ",", "LastLevelMaxPool", ")", ":", "\n", "            ", "last_results", "=", "self", ".", "top_blocks", "(", "results", "[", "-", "1", "]", ")", "\n", "results", ".", "extend", "(", "last_results", ")", "\n", "\n", "", "return", "tuple", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fpn.LastLevelMaxPool.forward": [[78, 80], ["torch.max_pool2d", "torch.max_pool2d"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "[", "F", ".", "max_pool2d", "(", "x", ",", "1", ",", "2", ",", "0", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fpn.LastLevelP6P7.__init__": [[86, 94], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "LastLevelP6P7", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p6", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "p7", "=", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "2", ",", "1", ")", "\n", "for", "module", "in", "[", "self", ".", "p6", ",", "self", ".", "p7", "]", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "module", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "", "self", ".", "use_P5", "=", "in_channels", "==", "out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fpn.LastLevelP6P7.forward": [[95, 100], ["fpn.LastLevelP6P7.p6", "fpn.LastLevelP6P7.p7", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "c5", ",", "p5", ")", ":", "\n", "        ", "x", "=", "p5", "if", "self", ".", "use_P5", "else", "c5", "\n", "p6", "=", "self", ".", "p6", "(", "x", ")", "\n", "p7", "=", "self", ".", "p7", "(", "F", ".", "relu", "(", "p6", ")", ")", "\n", "return", "[", "p6", ",", "p7", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.resnet.ResNet.__init__": [[82, 138], ["torch.nn.Module.__init__", "stem_module", "enumerate", "resnet.ResNet._freeze_backbone", "resnet._make_stage", "resnet.ResNet.add_module", "resnet.ResNet.stages.append", "str", "int"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.resnet.ResNet._freeze_backbone", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.resnet._make_stage"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# If we want to use the cfg in forward(), then we should make a copy", "\n", "# of it and store it for later use:", "\n", "# self.cfg = cfg.clone()", "\n", "\n", "# Translate string names to implementations", "\n", "stem_module", "=", "_STEM_MODULES", "[", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STEM_FUNC", "]", "\n", "stage_specs", "=", "_STAGE_SPECS", "[", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "]", "\n", "transformation_module", "=", "_TRANSFORMATION_MODULES", "[", "cfg", ".", "MODEL", ".", "RESNETS", ".", "TRANS_FUNC", "]", "\n", "deformable_module", "=", "_TRANSFORMATION_MODULES", "[", "cfg", ".", "MODEL", ".", "RESNETS", ".", "DEF_FUNC", "]", "\n", "start_module", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "DEF_START_MODULE", "\n", "_DEF_IDX", "=", "{", "\"C3\"", ":", "1", ",", "\"C4\"", ":", "2", ",", "\"C5\"", ":", "3", "}", "\n", "if", "start_module", "in", "_DEF_IDX", ":", "\n", "            ", "start_idx", "=", "_DEF_IDX", "[", "start_module", "]", "\n", "", "else", ":", "\n", "            ", "start_idx", "=", "65535", "\n", "\n", "# Construct the stem module", "\n", "", "self", ".", "stem", "=", "stem_module", "(", "cfg", ")", "\n", "\n", "# Constuct the specified ResNet stages", "\n", "num_groups", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "NUM_GROUPS", "\n", "width_per_group", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "WIDTH_PER_GROUP", "\n", "in_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STEM_OUT_CHANNELS", "\n", "stage2_bottleneck_channels", "=", "num_groups", "*", "width_per_group", "\n", "stage2_out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", "\n", "self", ".", "stages", "=", "[", "]", "\n", "self", ".", "return_features", "=", "{", "}", "\n", "for", "i", ",", "stage_spec", "in", "enumerate", "(", "stage_specs", ")", ":", "\n", "            ", "name", "=", "\"layer\"", "+", "str", "(", "stage_spec", ".", "index", ")", "\n", "stage2_relative_factor", "=", "2", "**", "(", "stage_spec", ".", "index", "-", "1", ")", "\n", "bottleneck_channels", "=", "stage2_bottleneck_channels", "*", "stage2_relative_factor", "\n", "out_channels", "=", "stage2_out_channels", "*", "stage2_relative_factor", "\n", "if", "i", ">=", "start_idx", ":", "\n", "                ", "trans_mod", "=", "deformable_module", "\n", "", "else", ":", "\n", "                ", "trans_mod", "=", "transformation_module", "\n", "", "module", "=", "_make_stage", "(", "\n", "trans_mod", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "stage_spec", ".", "block_count", ",", "\n", "num_groups", ",", "\n", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STRIDE_IN_1X1", ",", "\n", "first_stride", "=", "int", "(", "stage_spec", ".", "index", ">", "1", ")", "+", "1", ",", "\n", ")", "\n", "in_channels", "=", "out_channels", "\n", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "self", ".", "stages", ".", "append", "(", "name", ")", "\n", "self", ".", "return_features", "[", "name", "]", "=", "stage_spec", ".", "return_features", "\n", "\n", "# Optionally freeze (requires_grad=False) parts of the backbone", "\n", "", "self", ".", "_freeze_backbone", "(", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "FREEZE_CONV_BODY_AT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.resnet.ResNet._freeze_backbone": [[139, 149], ["range", "getattr.parameters", "getattr", "str"], "methods", ["None"], ["", "def", "_freeze_backbone", "(", "self", ",", "freeze_at", ")", ":", "\n", "        ", "if", "freeze_at", "<", "0", ":", "\n", "            ", "return", "\n", "", "for", "stage_index", "in", "range", "(", "freeze_at", ")", ":", "\n", "            ", "if", "stage_index", "==", "0", ":", "\n", "                ", "m", "=", "self", ".", "stem", "# stage 0 is the stem", "\n", "", "else", ":", "\n", "                ", "m", "=", "getattr", "(", "self", ",", "\"layer\"", "+", "str", "(", "stage_index", ")", ")", "\n", "", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.resnet.ResNet.forward": [[150, 158], ["resnet.ResNet.stem", "getattr", "outputs.append"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "for", "stage_name", "in", "self", ".", "stages", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "stage_name", ")", "(", "x", ")", "\n", "if", "self", ".", "return_features", "[", "stage_name", "]", ":", "\n", "                ", "outputs", ".", "append", "(", "x", ")", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.resnet.ResNetHead.__init__": [[161, 203], ["torch.nn.Module.__init__", "resnet._make_stage", "resnet.ResNetHead.add_module", "resnet.ResNetHead.stages.append", "str", "int"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.resnet._make_stage"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block_module", ",", "\n", "stages", ",", "\n", "num_groups", "=", "1", ",", "\n", "width_per_group", "=", "64", ",", "\n", "stride_in_1x1", "=", "True", ",", "\n", "stride_init", "=", "None", ",", "\n", "res2_out_channels", "=", "256", ",", "\n", "dilation", "=", "1", "\n", ")", ":", "\n", "        ", "super", "(", "ResNetHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "stage2_relative_factor", "=", "2", "**", "(", "stages", "[", "0", "]", ".", "index", "-", "1", ")", "\n", "stage2_bottleneck_channels", "=", "num_groups", "*", "width_per_group", "\n", "out_channels", "=", "res2_out_channels", "*", "stage2_relative_factor", "\n", "in_channels", "=", "out_channels", "//", "2", "\n", "bottleneck_channels", "=", "stage2_bottleneck_channels", "*", "stage2_relative_factor", "\n", "\n", "block_module", "=", "_TRANSFORMATION_MODULES", "[", "block_module", "]", "\n", "\n", "self", ".", "stages", "=", "[", "]", "\n", "stride", "=", "stride_init", "\n", "for", "stage", "in", "stages", ":", "\n", "            ", "name", "=", "\"layer\"", "+", "str", "(", "stage", ".", "index", ")", "\n", "if", "not", "stride", ":", "\n", "                ", "stride", "=", "int", "(", "stage", ".", "index", ">", "1", ")", "+", "1", "\n", "", "module", "=", "_make_stage", "(", "\n", "block_module", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "stage", ".", "block_count", ",", "\n", "num_groups", ",", "\n", "stride_in_1x1", ",", "\n", "first_stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", "\n", ")", "\n", "stride", "=", "None", "\n", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "self", ".", "stages", ".", "append", "(", "name", ")", "\n", "", "self", ".", "out_channels", "=", "out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.resnet.ResNetHead.forward": [[204, 208], ["getattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "stage", "in", "self", ".", "stages", ":", "\n", "            ", "x", "=", "getattr", "(", "self", ",", "stage", ")", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.resnet.Bottleneck.__init__": [[241, 307], ["torch.nn.Module.__init__", "conv_func", "norm_func", "conv_func", "norm_func", "maskrcnn_benchmark.layers.Conv2d", "norm_func", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_", "conv_func", "norm_func", "modules.modules", "isinstance", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "num_groups", ",", "\n", "stride_in_1x1", ",", "\n", "stride", ",", "\n", "dilation", ",", "\n", "norm_func", ",", "\n", "conv_func", "=", "Conv2d", "\n", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "downsample", "=", "None", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "down_stride", "=", "stride", "if", "dilation", "==", "1", "else", "1", "\n", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv_func", "(", "\n", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "down_stride", ",", "bias", "=", "False", "\n", ")", ",", "\n", "norm_func", "(", "out_channels", ")", ",", "\n", ")", "\n", "for", "modules", "in", "[", "self", ".", "downsample", ",", "]", ":", "\n", "                ", "for", "l", "in", "modules", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "l", ",", "Conv2d", ")", ":", "\n", "                        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "l", ".", "weight", ",", "a", "=", "1", ")", "\n", "\n", "", "", "", "", "if", "dilation", ">", "1", ":", "\n", "            ", "stride", "=", "1", "# reset to be 1", "\n", "\n", "# The original MSRA ResNet models have stride in the first 1x1 conv", "\n", "# The subsequent fb.torch.resnet and Caffe2 ResNe[X]t implementations have", "\n", "# stride in the 3x3 conv", "\n", "", "stride_1x1", ",", "stride_3x3", "=", "(", "stride", ",", "1", ")", "if", "stride_in_1x1", "else", "(", "1", ",", "stride", ")", "\n", "\n", "self", ".", "conv1", "=", "conv_func", "(", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride_1x1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "norm_func", "(", "bottleneck_channels", ")", "\n", "# TODO: specify init for the above", "\n", "\n", "self", ".", "conv2", "=", "conv_func", "(", "\n", "bottleneck_channels", ",", "\n", "bottleneck_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride_3x3", ",", "\n", "padding", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "num_groups", ",", "\n", "dilation", "=", "dilation", "\n", ")", "\n", "self", ".", "bn2", "=", "norm_func", "(", "bottleneck_channels", ")", "\n", "\n", "self", ".", "conv3", "=", "Conv2d", "(", "\n", "bottleneck_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn3", "=", "norm_func", "(", "out_channels", ")", "\n", "\n", "for", "l", "in", "[", "self", ".", "conv1", ",", "self", ".", "conv2", ",", "self", ".", "conv3", ",", "]", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "l", ".", "weight", ",", "a", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.resnet.Bottleneck.forward": [[308, 329], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "torch.relu_", "torch.relu_", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "torch.relu_", "torch.relu_", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "torch.relu_", "torch.relu_", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "out0", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out0", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "F", ".", "relu_", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.resnet.BaseStem.__init__": [[332, 344], ["torch.nn.Module.__init__", "maskrcnn_benchmark.layers.Conv2d", "norm_func", "torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_uniform_"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "norm_func", ")", ":", "\n", "        ", "super", "(", "BaseStem", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STEM_OUT_CHANNELS", "\n", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "\n", "3", ",", "out_channels", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "norm_func", "(", "out_channels", ")", "\n", "\n", "for", "l", "in", "[", "self", ".", "conv1", ",", "]", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "l", ".", "weight", ",", "a", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.resnet.BaseStem.forward": [[345, 351], ["resnet.BaseStem.conv1", "resnet.BaseStem.bn1", "torch.relu_", "torch.relu_", "torch.max_pool2d", "torch.max_pool2d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu_", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.resnet.BottleneckWithFixedBatchNorm.__init__": [[354, 373], ["resnet.Bottleneck.__init__"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "num_groups", "=", "1", ",", "\n", "stride_in_1x1", "=", "True", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", "\n", ")", ":", "\n", "        ", "super", "(", "BottleneckWithFixedBatchNorm", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "bottleneck_channels", "=", "bottleneck_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "num_groups", "=", "num_groups", ",", "\n", "stride_in_1x1", "=", "stride_in_1x1", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "norm_func", "=", "FrozenBatchNorm2d", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.resnet.DeformableConvWithFixedBatchNorm.__init__": [[377, 397], ["resnet.Bottleneck.__init__"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "num_groups", "=", "1", ",", "\n", "stride_in_1x1", "=", "True", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", "\n", ")", ":", "\n", "        ", "super", "(", "DeformableConvWithFixedBatchNorm", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "bottleneck_channels", "=", "bottleneck_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "num_groups", "=", "num_groups", ",", "\n", "stride_in_1x1", "=", "stride_in_1x1", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "norm_func", "=", "FrozenBatchNorm2d", ",", "\n", "conv_func", "=", "DCN", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.resnet.StemWithFixedBatchNorm.__init__": [[401, 404], ["resnet.BaseStem.__init__"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "StemWithFixedBatchNorm", ",", "self", ")", ".", "__init__", "(", "\n", "cfg", ",", "norm_func", "=", "FrozenBatchNorm2d", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.resnet.BottleneckWithGN.__init__": [[408, 427], ["resnet.Bottleneck.__init__"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "num_groups", "=", "1", ",", "\n", "stride_in_1x1", "=", "True", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", "\n", ")", ":", "\n", "        ", "super", "(", "BottleneckWithGN", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "bottleneck_channels", "=", "bottleneck_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "num_groups", "=", "num_groups", ",", "\n", "stride_in_1x1", "=", "stride_in_1x1", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "norm_func", "=", "group_norm", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.resnet.DeformableConvWithGN.__init__": [[431, 451], ["resnet.Bottleneck.__init__"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "num_groups", "=", "1", ",", "\n", "stride_in_1x1", "=", "True", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", "\n", ")", ":", "\n", "        ", "super", "(", "DeformableConvWithGN", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "bottleneck_channels", "=", "bottleneck_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "num_groups", "=", "num_groups", ",", "\n", "stride_in_1x1", "=", "stride_in_1x1", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "norm_func", "=", "group_norm", ",", "\n", "conv_func", "=", "DCN", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.resnet.StemWithGN.__init__": [[455, 457], ["resnet.BaseStem.__init__"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "StemWithGN", ",", "self", ")", ".", "__init__", "(", "cfg", ",", "norm_func", "=", "group_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.resnet._make_stage": [[210, 238], ["range", "torch.nn.Sequential", "blocks.append", "transformation_module"], "function", ["None"], ["", "", "def", "_make_stage", "(", "\n", "transformation_module", ",", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "block_count", ",", "\n", "num_groups", ",", "\n", "stride_in_1x1", ",", "\n", "first_stride", ",", "\n", "dilation", "=", "1", "\n", ")", ":", "\n", "    ", "blocks", "=", "[", "]", "\n", "stride", "=", "first_stride", "\n", "for", "_", "in", "range", "(", "block_count", ")", ":", "\n", "        ", "blocks", ".", "append", "(", "\n", "transformation_module", "(", "\n", "in_channels", ",", "\n", "bottleneck_channels", ",", "\n", "out_channels", ",", "\n", "num_groups", ",", "\n", "stride_in_1x1", ",", "\n", "stride", ",", "\n", "dilation", "=", "dilation", "\n", ")", "\n", ")", "\n", "stride", "=", "1", "\n", "in_channels", "=", "out_channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.Identity.__init__": [[196, 211], ["torch.Module.__init__", "fbnet_builder.ConvBNRelu"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "(", "\n", "ConvBNRelu", "(", "\n", "C_in", ",", "\n", "C_out", ",", "\n", "kernel", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "0", ",", "\n", "no_bias", "=", "1", ",", "\n", "use_relu", "=", "\"relu\"", ",", "\n", "bn_type", "=", "\"bn\"", ",", "\n", ")", "\n", "if", "C_in", "!=", "C_out", "or", "stride", "!=", "1", "\n", "else", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.Identity.forward": [[213, 219], ["fbnet_builder.Identity.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "conv", ":", "\n", "            ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "x", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.CascadeConv3x3.__init__": [[222, 233], ["torch.Sequential.__init__", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.BatchNorm2d", "torch.ReLU", "torch.ReLU", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ")", ":", "\n", "        ", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "ops", "=", "[", "\n", "Conv2d", "(", "C_in", ",", "C_in", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "C_in", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "Conv2d", "(", "C_in", ",", "C_out", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "C_out", ")", ",", "\n", "]", "\n", "super", "(", "CascadeConv3x3", ",", "self", ")", ".", "__init__", "(", "*", "ops", ")", "\n", "self", ".", "res_connect", "=", "(", "stride", "==", "1", ")", "and", "(", "C_in", "==", "C_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.CascadeConv3x3.forward": [[234, 239], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.iou_loss.IOULoss.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "super", "(", "CascadeConv3x3", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "res_connect", ":", "\n", "            ", "y", "+=", "x", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.Shift.__init__": [[242, 268], ["torch.Module.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "fbnet_builder.Shift.register_parameter", "torch.Parameter", "torch.Parameter", "range"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "kernel_size", ",", "stride", ",", "padding", ")", ":", "\n", "        ", "super", "(", "Shift", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C", "=", "C", "\n", "kernel", "=", "torch", ".", "zeros", "(", "(", "C", ",", "1", ",", "kernel_size", ",", "kernel_size", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "ch_idx", "=", "0", "\n", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "dilation", "=", "1", "\n", "\n", "hks", "=", "kernel_size", "//", "2", "\n", "ksq", "=", "kernel_size", "**", "2", "\n", "\n", "for", "i", "in", "range", "(", "kernel_size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "kernel_size", ")", ":", "\n", "                ", "if", "i", "==", "hks", "and", "j", "==", "hks", ":", "\n", "                    ", "num_ch", "=", "C", "//", "ksq", "+", "C", "%", "ksq", "\n", "", "else", ":", "\n", "                    ", "num_ch", "=", "C", "//", "ksq", "\n", "", "kernel", "[", "ch_idx", ":", "ch_idx", "+", "num_ch", ",", "0", ",", "i", ",", "j", "]", "=", "1", "\n", "ch_idx", "+=", "num_ch", "\n", "\n", "", "", "self", ".", "register_parameter", "(", "\"bias\"", ",", "None", ")", "\n", "self", ".", "kernel", "=", "nn", ".", "Parameter", "(", "kernel", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.Shift.forward": [[269, 293], ["maskrcnn_benchmark.layers.misc._NewEmptyTensorOp.apply", "x.numel", "torch.functional.conv2d", "torch.functional.conv2d", "zip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "return", "nn", ".", "functional", ".", "conv2d", "(", "\n", "x", ",", "\n", "self", ".", "kernel", ",", "\n", "self", ".", "bias", ",", "\n", "(", "self", ".", "stride", ",", "self", ".", "stride", ")", ",", "\n", "(", "self", ".", "padding", ",", "self", ".", "padding", ")", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "C", ",", "# groups", "\n", ")", "\n", "\n", "", "output_shape", "=", "[", "\n", "(", "i", "+", "2", "*", "p", "-", "(", "di", "*", "(", "k", "-", "1", ")", "+", "1", ")", ")", "//", "d", "+", "1", "\n", "for", "i", ",", "p", ",", "di", ",", "k", ",", "d", "in", "zip", "(", "\n", "x", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "(", "self", ".", "padding", ",", "self", ".", "dilation", ")", ",", "\n", "(", "self", ".", "dilation", ",", "self", ".", "dilation", ")", ",", "\n", "(", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ")", ",", "\n", "(", "self", ".", "stride", ",", "self", ".", "stride", ")", ",", "\n", ")", "\n", "]", "\n", "output_shape", "=", "[", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "C", "]", "+", "output_shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "x", ",", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.ShiftBlock5x5.__init__": [[296, 314], ["fbnet_builder._get_divisible_by", "torch.Sequential.__init__", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.BatchNorm2d", "torch.ReLU", "torch.ReLU", "fbnet_builder.Shift", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder._get_divisible_by", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "expansion", ",", "stride", ")", ":", "\n", "        ", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "res_connect", "=", "(", "stride", "==", "1", ")", "and", "(", "C_in", "==", "C_out", ")", "\n", "\n", "C_mid", "=", "_get_divisible_by", "(", "C_in", "*", "expansion", ",", "8", ",", "8", ")", "\n", "\n", "ops", "=", "[", "\n", "# pw", "\n", "Conv2d", "(", "C_in", ",", "C_mid", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "C_mid", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# shift", "\n", "Shift", "(", "C_mid", ",", "5", ",", "stride", ",", "2", ")", ",", "\n", "# pw-linear", "\n", "Conv2d", "(", "C_mid", ",", "C_out", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "C_out", ")", ",", "\n", "]", "\n", "super", "(", "ShiftBlock5x5", ",", "self", ")", ".", "__init__", "(", "*", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.ShiftBlock5x5.forward": [[315, 320], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.iou_loss.IOULoss.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "super", "(", "ShiftBlock5x5", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "res_connect", ":", "\n", "            ", "y", "+=", "x", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.ChannelShuffle.__init__": [[323, 326], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", ")", ":", "\n", "        ", "super", "(", "ChannelShuffle", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.ChannelShuffle.forward": [[327, 339], ["x.size", "x.view().permute().contiguous().view", "x.view().permute().contiguous", "x.view().permute", "x.view", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]\"\"\"", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "assert", "C", "%", "g", "==", "0", ",", "\"Incompatible group size {} for input channel {}\"", ".", "format", "(", "\n", "g", ",", "C", "\n", ")", "\n", "return", "(", "\n", "x", ".", "view", "(", "N", ",", "g", ",", "int", "(", "C", "/", "g", ")", ",", "H", ",", "W", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.ConvBNRelu.__init__": [[343, 395], ["torch.Sequential.__init__", "isinstance", "maskrcnn_benchmark.layers.Conv2d", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "fbnet_builder.ConvBNRelu.add_module", "torch.init.constant_", "torch.init.constant_", "maskrcnn_benchmark.layers.BatchNorm2d", "fbnet_builder.ConvBNRelu.add_module", "fbnet_builder.ConvBNRelu.add_module", "len", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "maskrcnn_benchmark.layers.FrozenBatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_depth", ",", "\n", "output_depth", ",", "\n", "kernel", ",", "\n", "stride", ",", "\n", "pad", ",", "\n", "no_bias", ",", "\n", "use_relu", ",", "\n", "bn_type", ",", "\n", "group", "=", "1", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "ConvBNRelu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "use_relu", "in", "[", "\"relu\"", ",", "None", "]", "\n", "if", "isinstance", "(", "bn_type", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "assert", "len", "(", "bn_type", ")", "==", "2", "\n", "assert", "bn_type", "[", "0", "]", "==", "\"gn\"", "\n", "gn_group", "=", "bn_type", "[", "1", "]", "\n", "bn_type", "=", "bn_type", "[", "0", "]", "\n", "", "assert", "bn_type", "in", "[", "\"bn\"", ",", "\"af\"", ",", "\"gn\"", ",", "None", "]", "\n", "assert", "stride", "in", "[", "1", ",", "2", ",", "4", "]", "\n", "\n", "op", "=", "Conv2d", "(", "\n", "input_depth", ",", "\n", "output_depth", ",", "\n", "kernel_size", "=", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "pad", ",", "\n", "bias", "=", "not", "no_bias", ",", "\n", "groups", "=", "group", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "op", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "if", "op", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "op", ".", "bias", ",", "0.0", ")", "\n", "", "self", ".", "add_module", "(", "\"conv\"", ",", "op", ")", "\n", "\n", "if", "bn_type", "==", "\"bn\"", ":", "\n", "            ", "bn_op", "=", "BatchNorm2d", "(", "output_depth", ")", "\n", "", "elif", "bn_type", "==", "\"gn\"", ":", "\n", "            ", "bn_op", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "gn_group", ",", "num_channels", "=", "output_depth", ")", "\n", "", "elif", "bn_type", "==", "\"af\"", ":", "\n", "            ", "bn_op", "=", "FrozenBatchNorm2d", "(", "output_depth", ")", "\n", "", "if", "bn_type", "is", "not", "None", ":", "\n", "            ", "self", ".", "add_module", "(", "\"bn\"", ",", "bn_op", ")", "\n", "\n", "", "if", "use_relu", "==", "\"relu\"", ":", "\n", "            ", "self", ".", "add_module", "(", "\"relu\"", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.SEModule.__init__": [[400, 408], ["torch.Module.__init__", "max", "maskrcnn_benchmark.layers.Conv2d", "maskrcnn_benchmark.layers.Conv2d", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "C", ")", ":", "\n", "        ", "super", "(", "SEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid", "=", "max", "(", "C", "//", "self", ".", "reduction", ",", "8", ")", "\n", "conv1", "=", "Conv2d", "(", "C", ",", "mid", ",", "1", ",", "1", ",", "0", ")", "\n", "conv2", "=", "Conv2d", "(", "mid", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "conv1", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "conv2", ",", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.SEModule.forward": [[410, 412], ["fbnet_builder.SEModule.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.Upsample.__init__": [[415, 420], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", ",", "mode", ",", "align_corners", "=", "None", ")", ":", "\n", "        ", "super", "(", "Upsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "scale_factor", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.Upsample.forward": [[421, 425], ["maskrcnn_benchmark.layers.interpolate"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc.interpolate"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "interpolate", "(", "\n", "x", ",", "scale_factor", "=", "self", ".", "scale", ",", "mode", "=", "self", ".", "mode", ",", "\n", "align_corners", "=", "self", ".", "align_corners", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.IRFBlock.__init__": [[446, 548], ["torch.Module.__init__", "int", "fbnet_builder._get_divisible_by", "fbnet_builder.ConvBNRelu", "fbnet_builder._get_upsample_op", "fbnet_builder.ConvBNRelu", "torch.Sequential", "torch.Sequential", "fbnet_builder.ChannelShuffle", "fbnet_builder.SEModule", "torch.Sequential", "torch.Sequential", "fbnet_builder.ConvBNRelu", "fbnet_builder.ConvBNRelu", "torch.Sequential", "torch.Sequential", "fbnet_builder.ConvBNRelu", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder._get_divisible_by", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder._get_upsample_op"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_depth", ",", "\n", "output_depth", ",", "\n", "expansion", ",", "\n", "stride", ",", "\n", "bn_type", "=", "\"bn\"", ",", "\n", "kernel", "=", "3", ",", "\n", "width_divisor", "=", "1", ",", "\n", "shuffle_type", "=", "None", ",", "\n", "pw_group", "=", "1", ",", "\n", "se", "=", "False", ",", "\n", "cdw", "=", "False", ",", "\n", "dw_skip_bn", "=", "False", ",", "\n", "dw_skip_relu", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "IRFBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "kernel", "in", "[", "1", ",", "3", ",", "5", ",", "7", "]", ",", "kernel", "\n", "\n", "self", ".", "use_res_connect", "=", "stride", "==", "1", "and", "input_depth", "==", "output_depth", "\n", "self", ".", "output_depth", "=", "output_depth", "\n", "\n", "mid_depth", "=", "int", "(", "input_depth", "*", "expansion", ")", "\n", "mid_depth", "=", "_get_divisible_by", "(", "mid_depth", ",", "width_divisor", ",", "width_divisor", ")", "\n", "\n", "# pw", "\n", "self", ".", "pw", "=", "ConvBNRelu", "(", "\n", "input_depth", ",", "\n", "mid_depth", ",", "\n", "kernel", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "no_bias", "=", "1", ",", "\n", "use_relu", "=", "\"relu\"", ",", "\n", "bn_type", "=", "bn_type", ",", "\n", "group", "=", "pw_group", ",", "\n", ")", "\n", "\n", "# negative stride to do upsampling", "\n", "self", ".", "upscale", ",", "stride", "=", "_get_upsample_op", "(", "stride", ")", "\n", "\n", "# dw", "\n", "if", "kernel", "==", "1", ":", "\n", "            ", "self", ".", "dw", "=", "nn", ".", "Sequential", "(", ")", "\n", "", "elif", "cdw", ":", "\n", "            ", "dw1", "=", "ConvBNRelu", "(", "\n", "mid_depth", ",", "\n", "mid_depth", ",", "\n", "kernel", "=", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "(", "kernel", "//", "2", ")", ",", "\n", "group", "=", "mid_depth", ",", "\n", "no_bias", "=", "1", ",", "\n", "use_relu", "=", "\"relu\"", ",", "\n", "bn_type", "=", "bn_type", ",", "\n", ")", "\n", "dw2", "=", "ConvBNRelu", "(", "\n", "mid_depth", ",", "\n", "mid_depth", ",", "\n", "kernel", "=", "kernel", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "(", "kernel", "//", "2", ")", ",", "\n", "group", "=", "mid_depth", ",", "\n", "no_bias", "=", "1", ",", "\n", "use_relu", "=", "\"relu\"", "if", "not", "dw_skip_relu", "else", "None", ",", "\n", "bn_type", "=", "bn_type", "if", "not", "dw_skip_bn", "else", "None", ",", "\n", ")", "\n", "self", ".", "dw", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "\"dw1\"", ",", "dw1", ")", ",", "(", "\"dw2\"", ",", "dw2", ")", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dw", "=", "ConvBNRelu", "(", "\n", "mid_depth", ",", "\n", "mid_depth", ",", "\n", "kernel", "=", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "(", "kernel", "//", "2", ")", ",", "\n", "group", "=", "mid_depth", ",", "\n", "no_bias", "=", "1", ",", "\n", "use_relu", "=", "\"relu\"", "if", "not", "dw_skip_relu", "else", "None", ",", "\n", "bn_type", "=", "bn_type", "if", "not", "dw_skip_bn", "else", "None", ",", "\n", ")", "\n", "\n", "# pw-linear", "\n", "", "self", ".", "pwl", "=", "ConvBNRelu", "(", "\n", "mid_depth", ",", "\n", "output_depth", ",", "\n", "kernel", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "no_bias", "=", "1", ",", "\n", "use_relu", "=", "None", ",", "\n", "bn_type", "=", "bn_type", ",", "\n", "group", "=", "pw_group", ",", "\n", ")", "\n", "\n", "self", ".", "shuffle_type", "=", "shuffle_type", "\n", "if", "shuffle_type", "is", "not", "None", ":", "\n", "            ", "self", ".", "shuffle", "=", "ChannelShuffle", "(", "pw_group", ")", "\n", "\n", "", "self", ".", "se4", "=", "SEModule", "(", "output_depth", ")", "if", "se", "else", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "output_depth", "=", "output_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.IRFBlock.forward": [[549, 561], ["fbnet_builder.IRFBlock.pw", "fbnet_builder.IRFBlock.dw", "fbnet_builder.IRFBlock.pwl", "fbnet_builder.IRFBlock.se4", "fbnet_builder.IRFBlock.shuffle", "fbnet_builder.IRFBlock.upscale"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "pw", "(", "x", ")", "\n", "if", "self", ".", "shuffle_type", "==", "\"mid\"", ":", "\n", "            ", "y", "=", "self", ".", "shuffle", "(", "y", ")", "\n", "", "if", "self", ".", "upscale", "is", "not", "None", ":", "\n", "            ", "y", "=", "self", ".", "upscale", "(", "y", ")", "\n", "", "y", "=", "self", ".", "dw", "(", "y", ")", "\n", "y", "=", "self", ".", "pwl", "(", "y", ")", "\n", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "y", "+=", "x", "\n", "", "y", "=", "self", ".", "se4", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.FBNetBuilder.__init__": [[694, 708], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "width_ratio", ",", "\n", "bn_type", "=", "\"bn\"", ",", "\n", "width_divisor", "=", "1", ",", "\n", "dw_skip_bn", "=", "False", ",", "\n", "dw_skip_relu", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "width_ratio", "=", "width_ratio", "\n", "self", ".", "last_depth", "=", "-", "1", "\n", "self", ".", "bn_type", "=", "bn_type", "\n", "self", ".", "width_divisor", "=", "width_divisor", "\n", "self", ".", "dw_skip_bn", "=", "dw_skip_bn", "\n", "self", ".", "dw_skip_relu", "=", "dw_skip_relu", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.FBNetBuilder.add_first": [[709, 731], ["fbnet_builder.FBNetBuilder._get_divisible_width", "fbnet_builder.ConvBNRelu", "len", "int", "len"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.FBNetBuilder._get_divisible_width"], ["", "def", "add_first", "(", "self", ",", "stage_info", ",", "dim_in", "=", "3", ",", "pad", "=", "True", ")", ":", "\n", "# stage_info: [c, s, kernel]", "\n", "        ", "assert", "len", "(", "stage_info", ")", ">=", "2", "\n", "channel", "=", "stage_info", "[", "0", "]", "\n", "stride", "=", "stage_info", "[", "1", "]", "\n", "out_depth", "=", "self", ".", "_get_divisible_width", "(", "int", "(", "channel", "*", "self", ".", "width_ratio", ")", ")", "\n", "kernel", "=", "3", "\n", "if", "len", "(", "stage_info", ")", ">", "2", ":", "\n", "            ", "kernel", "=", "stage_info", "[", "2", "]", "\n", "\n", "", "out", "=", "ConvBNRelu", "(", "\n", "dim_in", ",", "\n", "out_depth", ",", "\n", "kernel", "=", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "kernel", "//", "2", "if", "pad", "else", "0", ",", "\n", "no_bias", "=", "1", ",", "\n", "use_relu", "=", "\"relu\"", ",", "\n", "bn_type", "=", "self", ".", "bn_type", ",", "\n", ")", "\n", "self", ".", "last_depth", "=", "out_depth", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.FBNetBuilder.add_blocks": [[732, 753], ["collections.OrderedDict", "torch.Sequential", "torch.Sequential", "isinstance", "all", "fbnet_builder.FBNetBuilder.add_ir_block", "isinstance"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.FBNetBuilder.add_ir_block"], ["", "def", "add_blocks", "(", "self", ",", "blocks", ")", ":", "\n", "        ", "\"\"\" blocks: [{}, {}, ...]\n        \"\"\"", "\n", "assert", "isinstance", "(", "blocks", ",", "list", ")", "and", "all", "(", "\n", "isinstance", "(", "x", ",", "dict", ")", "for", "x", "in", "blocks", "\n", ")", ",", "blocks", "\n", "\n", "modules", "=", "OrderedDict", "(", ")", "\n", "for", "block", "in", "blocks", ":", "\n", "            ", "stage_idx", "=", "block", "[", "\"stage_idx\"", "]", "\n", "block_idx", "=", "block", "[", "\"block_idx\"", "]", "\n", "block_op_type", "=", "block", "[", "\"block_op_type\"", "]", "\n", "tcns", "=", "block", "[", "\"block\"", "]", "\n", "n", "=", "tcns", "[", "2", "]", "\n", "assert", "n", "==", "1", "\n", "nnblock", "=", "self", ".", "add_ir_block", "(", "tcns", ",", "[", "block_op_type", "]", ")", "\n", "nn_name", "=", "\"xif{}_{}\"", ".", "format", "(", "stage_idx", ",", "block_idx", ")", "\n", "assert", "nn_name", "not", "in", "modules", "\n", "modules", "[", "nn_name", "]", "=", "nnblock", "\n", "", "ret", "=", "nn", ".", "Sequential", "(", "modules", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.FBNetBuilder.add_last": [[754, 790], ["fbnet_builder.FBNetBuilder._get_divisible_width", "fbnet_builder.ConvBNRelu", "len", "torch.Sequential", "torch.Sequential", "int", "int", "torch.Sequential", "torch.Sequential", "int"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.FBNetBuilder._get_divisible_width"], ["", "def", "add_last", "(", "self", ",", "stage_info", ")", ":", "\n", "        ", "\"\"\" skip last layer if channel_scale == 0\n            use the same output channel if channel_scale < 0\n        \"\"\"", "\n", "assert", "len", "(", "stage_info", ")", "==", "2", "\n", "channels", "=", "stage_info", "[", "0", "]", "\n", "channel_scale", "=", "stage_info", "[", "1", "]", "\n", "\n", "if", "channel_scale", "==", "0.0", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "if", "channel_scale", ">", "0", ":", "\n", "            ", "last_channel", "=", "(", "\n", "int", "(", "channels", "*", "self", ".", "width_ratio", ")", "if", "self", ".", "width_ratio", ">", "1.0", "else", "channels", "\n", ")", "\n", "last_channel", "=", "int", "(", "last_channel", "*", "channel_scale", ")", "\n", "", "else", ":", "\n", "            ", "last_channel", "=", "int", "(", "self", ".", "last_depth", "*", "(", "-", "channel_scale", ")", ")", "\n", "", "last_channel", "=", "self", ".", "_get_divisible_width", "(", "last_channel", ")", "\n", "\n", "if", "last_channel", "==", "0", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "dim_in", "=", "self", ".", "last_depth", "\n", "ret", "=", "ConvBNRelu", "(", "\n", "dim_in", ",", "\n", "last_channel", ",", "\n", "kernel", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "no_bias", "=", "1", ",", "\n", "use_relu", "=", "\"relu\"", ",", "\n", "bn_type", "=", "self", ".", "bn_type", ",", "\n", ")", "\n", "self", ".", "last_depth", "=", "last_channel", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.FBNetBuilder._add_ir_block": [[795, 810], ["None"], "methods", ["None"], ["", "def", "_add_ir_block", "(", "\n", "self", ",", "dim_in", ",", "dim_out", ",", "stride", ",", "expand_ratio", ",", "block_op_type", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "ret", "=", "PRIMITIVES", "[", "block_op_type", "]", "(", "\n", "dim_in", ",", "\n", "dim_out", ",", "\n", "expansion", "=", "expand_ratio", ",", "\n", "stride", "=", "stride", ",", "\n", "bn_type", "=", "self", ".", "bn_type", ",", "\n", "width_divisor", "=", "self", ".", "width_divisor", ",", "\n", "dw_skip_bn", "=", "self", ".", "dw_skip_bn", ",", "\n", "dw_skip_relu", "=", "self", ".", "dw_skip_relu", ",", "\n", "**", "kwargs", "\n", ")", "\n", "return", "ret", ",", "ret", ".", "output_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.FBNetBuilder.add_ir_block": [[811, 826], ["fbnet_builder.FBNetBuilder._get_divisible_width", "fbnet_builder.FBNetBuilder._add_ir_block", "int"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.FBNetBuilder._get_divisible_width", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.FBNetBuilder._add_ir_block"], ["", "def", "add_ir_block", "(", "self", ",", "tcns", ",", "block_op_types", ",", "**", "kwargs", ")", ":", "\n", "        ", "t", ",", "c", ",", "n", ",", "s", "=", "tcns", "\n", "assert", "n", "==", "1", "\n", "out_depth", "=", "self", ".", "_get_divisible_width", "(", "int", "(", "c", "*", "self", ".", "width_ratio", ")", ")", "\n", "dim_in", "=", "self", ".", "last_depth", "\n", "op", ",", "ret_depth", "=", "self", ".", "_add_ir_block", "(", "\n", "dim_in", ",", "\n", "out_depth", ",", "\n", "stride", "=", "s", ",", "\n", "expand_ratio", "=", "t", ",", "\n", "block_op_type", "=", "block_op_types", "[", "0", "]", ",", "\n", "**", "kwargs", "\n", ")", "\n", "self", ".", "last_depth", "=", "ret_depth", "\n", "return", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.FBNetBuilder._get_divisible_width": [[827, 830], ["fbnet_builder._get_divisible_by", "int"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder._get_divisible_by"], ["", "def", "_get_divisible_width", "(", "self", ",", "width", ")", ":", "\n", "        ", "ret", "=", "_get_divisible_by", "(", "int", "(", "width", ")", ",", "self", ".", "width_divisor", ",", "self", ".", "width_divisor", ")", "\n", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder._py2_round": [[26, 28], ["math.floor", "math.ceil"], "function", ["None"], ["def", "_py2_round", "(", "x", ")", ":", "\n", "    ", "return", "math", ".", "floor", "(", "x", "+", "0.5", ")", "if", "x", ">=", "0.0", "else", "math", ".", "ceil", "(", "x", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder._get_divisible_by": [[30, 35], ["int", "int", "fbnet_builder._py2_round"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder._py2_round"], ["", "def", "_get_divisible_by", "(", "num", ",", "divisible_by", ",", "min_val", ")", ":", "\n", "    ", "ret", "=", "int", "(", "num", ")", "\n", "if", "divisible_by", ">", "0", "and", "num", "%", "divisible_by", "!=", "0", ":", "\n", "        ", "ret", "=", "int", "(", "(", "_py2_round", "(", "num", "/", "divisible_by", ")", "or", "min_val", ")", "*", "divisible_by", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder._get_upsample_op": [[428, 443], ["isinstance", "fbnet_builder.Upsample", "isinstance", "all", "isinstance"], "function", ["None"], ["", "", "def", "_get_upsample_op", "(", "stride", ")", ":", "\n", "    ", "assert", "(", "\n", "stride", "in", "[", "1", ",", "2", ",", "4", "]", "\n", "or", "stride", "in", "[", "-", "1", ",", "-", "2", ",", "-", "4", "]", "\n", "or", "(", "isinstance", "(", "stride", ",", "tuple", ")", "and", "all", "(", "x", "in", "[", "-", "1", ",", "-", "2", ",", "-", "4", "]", "for", "x", "in", "stride", ")", ")", "\n", ")", "\n", "\n", "scales", "=", "stride", "\n", "ret", "=", "None", "\n", "if", "isinstance", "(", "stride", ",", "tuple", ")", "or", "stride", "<", "0", ":", "\n", "        ", "scales", "=", "[", "-", "x", "for", "x", "in", "stride", "]", "if", "isinstance", "(", "stride", ",", "tuple", ")", "else", "-", "stride", "\n", "stride", "=", "1", "\n", "ret", "=", "Upsample", "(", "scale_factor", "=", "scales", ",", "mode", "=", "\"nearest\"", ",", "align_corners", "=", "None", ")", "\n", "\n", "", "return", "ret", ",", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder._expand_block_cfg": [[563, 572], ["isinstance", "range", "copy.deepcopy", "ret.append"], "function", ["None"], ["", "", "def", "_expand_block_cfg", "(", "block_cfg", ")", ":", "\n", "    ", "assert", "isinstance", "(", "block_cfg", ",", "list", ")", "\n", "ret", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "block_cfg", "[", "2", "]", ")", ":", "\n", "        ", "cur", "=", "copy", ".", "deepcopy", "(", "block_cfg", ")", "\n", "cur", "[", "2", "]", "=", "1", "\n", "cur", "[", "3", "]", "=", "1", "if", "idx", ">=", "1", "else", "cur", "[", "3", "]", "\n", "ret", ".", "append", "(", "cur", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.expand_stage_cfg": [[574, 581], ["isinstance", "fbnet_builder._expand_block_cfg"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder._expand_block_cfg"], ["", "def", "expand_stage_cfg", "(", "stage_cfg", ")", ":", "\n", "    ", "\"\"\" For a single stage \"\"\"", "\n", "assert", "isinstance", "(", "stage_cfg", ",", "list", ")", "\n", "ret", "=", "[", "]", "\n", "for", "x", "in", "stage_cfg", ":", "\n", "        ", "ret", "+=", "_expand_block_cfg", "(", "x", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.expand_stages_cfg": [[583, 590], ["isinstance", "ret.append", "fbnet_builder.expand_stage_cfg"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.expand_stage_cfg"], ["", "def", "expand_stages_cfg", "(", "stage_cfgs", ")", ":", "\n", "    ", "\"\"\" For a list of stages \"\"\"", "\n", "assert", "isinstance", "(", "stage_cfgs", ",", "list", ")", "\n", "ret", "=", "[", "]", "\n", "for", "x", "in", "stage_cfgs", ":", "\n", "        ", "ret", ".", "append", "(", "expand_stage_cfg", "(", "x", ")", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder._block_cfgs_to_list": [[592, 601], ["isinstance", "enumerate", "fbnet_builder.expand_stage_cfg", "enumerate", "ret.append"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.expand_stage_cfg"], ["", "def", "_block_cfgs_to_list", "(", "block_cfgs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "block_cfgs", ",", "list", ")", "\n", "ret", "=", "[", "]", "\n", "for", "stage_idx", ",", "stage", "in", "enumerate", "(", "block_cfgs", ")", ":", "\n", "        ", "stage", "=", "expand_stage_cfg", "(", "stage", ")", "\n", "for", "block_idx", ",", "block", "in", "enumerate", "(", "stage", ")", ":", "\n", "            ", "cur", "=", "{", "\"stage_idx\"", ":", "stage_idx", ",", "\"block_idx\"", ":", "block_idx", ",", "\"block\"", ":", "block", "}", "\n", "ret", ".", "append", "(", "cur", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder._add_to_arch": [[603, 639], ["enumerate", "isinstance", "all", "isinstance", "all", "enumerate", "isinstance", "isinstance"], "function", ["None"], ["", "def", "_add_to_arch", "(", "arch", ",", "info", ",", "name", ")", ":", "\n", "    ", "\"\"\" arch = [{block_0}, {block_1}, ...]\n        info = [\n            # stage 0\n            [\n                block0_info,\n                block1_info,\n                ...\n            ], ...\n        ]\n        convert to:\n        arch = [\n            {\n                block_0,\n                name: block0_info,\n            },\n            {\n                block_1,\n                name: block1_info,\n            }, ...\n        ]\n    \"\"\"", "\n", "assert", "isinstance", "(", "arch", ",", "list", ")", "and", "all", "(", "isinstance", "(", "x", ",", "dict", ")", "for", "x", "in", "arch", ")", "\n", "assert", "isinstance", "(", "info", ",", "list", ")", "and", "all", "(", "isinstance", "(", "x", ",", "list", ")", "for", "x", "in", "info", ")", "\n", "idx", "=", "0", "\n", "for", "stage_idx", ",", "stage", "in", "enumerate", "(", "info", ")", ":", "\n", "        ", "for", "block_idx", ",", "block", "in", "enumerate", "(", "stage", ")", ":", "\n", "            ", "assert", "(", "\n", "arch", "[", "idx", "]", "[", "\"stage_idx\"", "]", "==", "stage_idx", "\n", "and", "arch", "[", "idx", "]", "[", "\"block_idx\"", "]", "==", "block_idx", "\n", ")", ",", "\"Index ({}, {}) does not match for block {}\"", ".", "format", "(", "\n", "stage_idx", ",", "block_idx", ",", "arch", "[", "idx", "]", "\n", ")", "\n", "assert", "name", "not", "in", "arch", "[", "idx", "]", "\n", "arch", "[", "idx", "]", "[", "name", "]", "=", "block", "\n", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.unify_arch_def": [[641, 669], ["copy.deepcopy", "copy.deepcopy.update", "fbnet_builder._block_cfgs_to_list", "fbnet_builder._add_to_arch"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder._block_cfgs_to_list", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder._add_to_arch"], ["", "", "", "def", "unify_arch_def", "(", "arch_def", ")", ":", "\n", "    ", "\"\"\" unify the arch_def to:\n        {\n            ...,\n            \"arch\": [\n                {\n                    \"stage_idx\": idx,\n                    \"block_idx\": idx,\n                    ...\n                },\n                {}, ...\n            ]\n        }\n    \"\"\"", "\n", "ret", "=", "copy", ".", "deepcopy", "(", "arch_def", ")", "\n", "\n", "assert", "\"block_cfg\"", "in", "arch_def", "and", "\"stages\"", "in", "arch_def", "[", "\"block_cfg\"", "]", "\n", "assert", "\"stages\"", "not", "in", "ret", "\n", "# copy 'first', 'last' etc. inside arch_def['block_cfg'] to ret", "\n", "ret", ".", "update", "(", "{", "x", ":", "arch_def", "[", "\"block_cfg\"", "]", "[", "x", "]", "for", "x", "in", "arch_def", "[", "\"block_cfg\"", "]", "}", ")", "\n", "ret", "[", "\"stages\"", "]", "=", "_block_cfgs_to_list", "(", "arch_def", "[", "\"block_cfg\"", "]", "[", "\"stages\"", "]", ")", "\n", "del", "ret", "[", "\"block_cfg\"", "]", "\n", "\n", "assert", "\"block_op_type\"", "in", "arch_def", "\n", "_add_to_arch", "(", "ret", "[", "\"stages\"", "]", ",", "arch_def", "[", "\"block_op_type\"", "]", ",", "\"block_op_type\"", ")", "\n", "del", "ret", "[", "\"block_op_type\"", "]", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.get_num_stages": [[671, 677], ["max"], "function", ["None"], ["", "def", "get_num_stages", "(", "arch_def", ")", ":", "\n", "    ", "ret", "=", "0", "\n", "for", "x", "in", "arch_def", "[", "\"stages\"", "]", ":", "\n", "        ", "ret", "=", "max", "(", "x", "[", "\"stage_idx\"", "]", ",", "ret", ")", "\n", "", "ret", "=", "ret", "+", "1", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.get_blocks": [[679, 691], ["copy.deepcopy", "ret[].append"], "function", ["None"], ["", "def", "get_blocks", "(", "arch_def", ",", "stage_indices", "=", "None", ",", "block_indices", "=", "None", ")", ":", "\n", "    ", "ret", "=", "copy", ".", "deepcopy", "(", "arch_def", ")", "\n", "ret", "[", "\"stages\"", "]", "=", "[", "]", "\n", "for", "block", "in", "arch_def", "[", "\"stages\"", "]", ":", "\n", "        ", "keep", "=", "True", "\n", "if", "stage_indices", "not", "in", "(", "None", ",", "[", "]", ")", "and", "block", "[", "\"stage_idx\"", "]", "not", "in", "stage_indices", ":", "\n", "            ", "keep", "=", "False", "\n", "", "if", "block_indices", "not", "in", "(", "None", ",", "[", "]", ")", "and", "block", "[", "\"block_idx\"", "]", "not", "in", "block_indices", ":", "\n", "            ", "keep", "=", "False", "\n", "", "if", "keep", ":", "\n", "            ", "ret", "[", "\"stages\"", "]", ".", "append", "(", "block", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet.FBNetTrunk.__init__": [[80, 87], ["torch.Module.__init__", "builder.add_first", "fbnet._get_trunk_cfg", "builder.add_blocks"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.FBNetBuilder.add_first", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet._get_trunk_cfg", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.FBNetBuilder.add_blocks"], ["    ", "def", "__init__", "(", "\n", "self", ",", "builder", ",", "arch_def", ",", "dim_in", ",", "\n", ")", ":", "\n", "        ", "super", "(", "FBNetTrunk", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "first", "=", "builder", ".", "add_first", "(", "arch_def", "[", "\"first\"", "]", ",", "dim_in", "=", "dim_in", ")", "\n", "trunk_cfg", "=", "_get_trunk_cfg", "(", "arch_def", ")", "\n", "self", ".", "stages", "=", "builder", ".", "add_blocks", "(", "trunk_cfg", "[", "\"stages\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet.FBNetTrunk.forward": [[89, 94], ["fbnet.FBNetTrunk.first", "fbnet.FBNetTrunk.stages"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "first", "(", "x", ")", "\n", "y", "=", "self", ".", "stages", "(", "y", ")", "\n", "ret", "=", "[", "y", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet.FBNetRPNHead.__init__": [[122, 137], ["torch.Module.__init__", "fbnet._get_rpn_stage", "builder.add_blocks", "len"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet._get_rpn_stage", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.FBNetBuilder.add_blocks"], ["    ", "def", "__init__", "(", "\n", "self", ",", "cfg", ",", "in_channels", ",", "builder", ",", "arch_def", ",", "\n", ")", ":", "\n", "        ", "super", "(", "FBNetRPNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "in_channels", "==", "builder", ".", "last_depth", "\n", "\n", "rpn_bn_type", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "RPN_BN_TYPE", "\n", "if", "len", "(", "rpn_bn_type", ")", ">", "0", ":", "\n", "            ", "builder", ".", "bn_type", "=", "rpn_bn_type", "\n", "\n", "", "use_blocks", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "RPN_HEAD_BLOCKS", "\n", "stages", "=", "_get_rpn_stage", "(", "arch_def", ",", "use_blocks", ")", "\n", "\n", "self", ".", "head", "=", "builder", ".", "add_blocks", "(", "stages", ")", "\n", "self", ".", "out_channels", "=", "builder", ".", "last_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet.FBNetRPNHead.forward": [[138, 141], ["fbnet.FBNetRPNHead.head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "[", "self", ".", "head", "(", "y", ")", "for", "y", "in", "x", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet.FBNetROIHead.__init__": [[175, 203], ["torch.Module.__init__", "isinstance", "maskrcnn_benchmark.modeling.poolers.make_pooler", "fbnet._get_head_stage", "builder.add_blocks", "copy.deepcopy", "builder.add_last", "torch.Sequential", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.poolers.make_pooler", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet._get_head_stage", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.FBNetBuilder.add_blocks", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.FBNetBuilder.add_last"], ["    ", "def", "__init__", "(", "\n", "self", ",", "cfg", ",", "in_channels", ",", "builder", ",", "arch_def", ",", "\n", "head_name", ",", "use_blocks", ",", "stride_init", ",", "last_layer_scale", ",", "\n", ")", ":", "\n", "        ", "super", "(", "FBNetROIHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "in_channels", "==", "builder", ".", "last_depth", "\n", "assert", "isinstance", "(", "use_blocks", ",", "list", ")", "\n", "\n", "head_cfg_name", "=", "ARCH_CFG_NAME_MAPPING", "[", "head_name", "]", "\n", "self", ".", "pooler", "=", "poolers", ".", "make_pooler", "(", "cfg", ",", "head_cfg_name", ")", "\n", "\n", "stage", "=", "_get_head_stage", "(", "arch_def", ",", "head_name", ",", "use_blocks", ")", "\n", "\n", "assert", "stride_init", "in", "[", "0", ",", "1", ",", "2", "]", "\n", "if", "stride_init", "!=", "0", ":", "\n", "            ", "stage", "[", "0", "]", "[", "\"block\"", "]", "[", "3", "]", "=", "stride_init", "\n", "", "blocks", "=", "builder", ".", "add_blocks", "(", "stage", ")", "\n", "\n", "last_info", "=", "copy", ".", "deepcopy", "(", "arch_def", "[", "\"last\"", "]", ")", "\n", "last_info", "[", "1", "]", "=", "last_layer_scale", "\n", "last", "=", "builder", ".", "add_last", "(", "last_info", ")", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"blocks\"", ",", "blocks", ")", ",", "\n", "(", "\"last\"", ",", "last", ")", "\n", "]", ")", ")", "\n", "\n", "self", ".", "out_channels", "=", "builder", ".", "last_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet.FBNetROIHead.forward": [[204, 208], ["fbnet.FBNetROIHead.pooler", "fbnet.FBNetROIHead.head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "proposals", ")", ":", "\n", "        ", "x", "=", "self", ".", "pooler", "(", "x", ",", "proposals", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet.create_builder": [[21, 69], ["fbnet_builder.unify_arch_def", "json.loads.get", "logger.info", "fbnet_builder.FBNetBuilder", "len", "json.loads", "len", "len"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.unify_arch_def", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.config.paths_catalog.ModelCatalog.get"], ["def", "create_builder", "(", "cfg", ")", ":", "\n", "    ", "bn_type", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "BN_TYPE", "\n", "if", "bn_type", "==", "\"gn\"", ":", "\n", "        ", "bn_type", "=", "(", "bn_type", ",", "cfg", ".", "GROUP_NORM", ".", "NUM_GROUPS", ")", "\n", "", "factor", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "SCALE_FACTOR", "\n", "\n", "arch", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "ARCH", "\n", "arch_def", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "ARCH_DEF", "\n", "if", "len", "(", "arch_def", ")", ">", "0", ":", "\n", "        ", "arch_def", "=", "json", ".", "loads", "(", "arch_def", ")", "\n", "", "if", "arch", "in", "modeldef", ".", "MODEL_ARCH", ":", "\n", "        ", "if", "len", "(", "arch_def", ")", ">", "0", ":", "\n", "            ", "assert", "(", "\n", "arch_def", "==", "modeldef", ".", "MODEL_ARCH", "[", "arch", "]", "\n", ")", ",", "\"Two architectures with the same name {},\\n{},\\n{}\"", ".", "format", "(", "\n", "arch", ",", "arch_def", ",", "modeldef", ".", "MODEL_ARCH", "[", "arch", "]", "\n", ")", "\n", "", "arch_def", "=", "modeldef", ".", "MODEL_ARCH", "[", "arch", "]", "\n", "", "else", ":", "\n", "        ", "assert", "arch_def", "is", "not", "None", "and", "len", "(", "arch_def", ")", ">", "0", "\n", "", "arch_def", "=", "mbuilder", ".", "unify_arch_def", "(", "arch_def", ")", "\n", "\n", "rpn_stride", "=", "arch_def", ".", "get", "(", "\"rpn_stride\"", ",", "None", ")", "\n", "if", "rpn_stride", "is", "not", "None", ":", "\n", "        ", "assert", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "ANCHOR_STRIDE", "[", "0", "]", "==", "rpn_stride", "\n", ")", ",", "\"Needs to set cfg.MODEL.RPN.ANCHOR_STRIDE to {}, got {}\"", ".", "format", "(", "\n", "rpn_stride", ",", "cfg", ".", "MODEL", ".", "RPN", ".", "ANCHOR_STRIDE", "\n", ")", "\n", "", "width_divisor", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "WIDTH_DIVISOR", "\n", "dw_skip_bn", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "DW_CONV_SKIP_BN", "\n", "dw_skip_relu", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "DW_CONV_SKIP_RELU", "\n", "\n", "logger", ".", "info", "(", "\n", "\"Building fbnet model with arch {} (without scaling):\\n{}\"", ".", "format", "(", "\n", "arch", ",", "arch_def", "\n", ")", "\n", ")", "\n", "\n", "builder", "=", "mbuilder", ".", "FBNetBuilder", "(", "\n", "width_ratio", "=", "factor", ",", "\n", "bn_type", "=", "bn_type", ",", "\n", "width_divisor", "=", "width_divisor", ",", "\n", "dw_skip_bn", "=", "dw_skip_bn", ",", "\n", "dw_skip_relu", "=", "dw_skip_relu", ",", "\n", ")", "\n", "\n", "return", "builder", ",", "arch_def", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet._get_trunk_cfg": [[71, 77], ["fbnet_builder.get_num_stages", "arch_def.get", "fbnet_builder.get_blocks", "range"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.get_num_stages", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.get_blocks"], ["", "def", "_get_trunk_cfg", "(", "arch_def", ")", ":", "\n", "    ", "\"\"\" Get all stages except the last one \"\"\"", "\n", "num_stages", "=", "mbuilder", ".", "get_num_stages", "(", "arch_def", ")", "\n", "trunk_stages", "=", "arch_def", ".", "get", "(", "\"backbone\"", ",", "range", "(", "num_stages", "-", "1", ")", ")", "\n", "ret", "=", "mbuilder", ".", "get_blocks", "(", "arch_def", ",", "stage_indices", "=", "trunk_stages", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet.add_conv_body": [[96, 105], ["maskrcnn_benchmark.modeling.registry.BACKBONES.register", "fbnet.create_builder", "fbnet.FBNetTrunk", "torch.Sequential", "collections.OrderedDict"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet.create_builder"], ["", "", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"FBNet\"", ")", "\n", "def", "add_conv_body", "(", "cfg", ",", "dim_in", "=", "3", ")", ":", "\n", "    ", "builder", ",", "arch_def", "=", "create_builder", "(", "cfg", ")", "\n", "\n", "body", "=", "FBNetTrunk", "(", "builder", ",", "arch_def", ",", "dim_in", ")", "\n", "model", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "\"body\"", ",", "body", ")", "]", ")", ")", "\n", "model", ".", "out_channels", "=", "builder", ".", "last_depth", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet._get_rpn_stage": [[107, 119], ["arch_def.get", "fbnet_builder.get_blocks", "logger.warn", "len", "range", "fbnet_builder.get_blocks"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.get_blocks", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.get_blocks"], ["", "def", "_get_rpn_stage", "(", "arch_def", ",", "num_blocks", ")", ":", "\n", "    ", "rpn_stage", "=", "arch_def", ".", "get", "(", "\"rpn\"", ")", "\n", "ret", "=", "mbuilder", ".", "get_blocks", "(", "arch_def", ",", "stage_indices", "=", "rpn_stage", ")", "\n", "if", "num_blocks", ">", "0", ":", "\n", "        ", "logger", ".", "warn", "(", "'Use last {} blocks in {} as rpn'", ".", "format", "(", "num_blocks", ",", "ret", ")", ")", "\n", "block_count", "=", "len", "(", "ret", "[", "\"stages\"", "]", ")", "\n", "assert", "num_blocks", "<=", "block_count", ",", "\"use block {}, block count {}\"", ".", "format", "(", "\n", "num_blocks", ",", "block_count", "\n", ")", "\n", "blocks", "=", "range", "(", "block_count", "-", "num_blocks", ",", "block_count", ")", "\n", "ret", "=", "mbuilder", ".", "get_blocks", "(", "ret", ",", "block_indices", "=", "blocks", ")", "\n", "", "return", "ret", "[", "\"stages\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet.add_rpn_head": [[143, 155], ["maskrcnn_benchmark.modeling.registry.RPN_HEADS.register", "fbnet.create_builder", "fbnet.FBNetRPNHead", "maskrcnn_benchmark.modeling.rpn.rpn.RPNHeadConvRegressor", "torch.Sequential"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet.create_builder"], ["", "", "@", "registry", ".", "RPN_HEADS", ".", "register", "(", "\"FBNet.rpn_head\"", ")", "\n", "def", "add_rpn_head", "(", "cfg", ",", "in_channels", ",", "num_anchors", ")", ":", "\n", "    ", "builder", ",", "model_arch", "=", "create_builder", "(", "cfg", ")", "\n", "builder", ".", "last_depth", "=", "in_channels", "\n", "\n", "assert", "in_channels", "==", "builder", ".", "last_depth", "\n", "# builder.name_prefix = \"[rpn]\"", "\n", "\n", "rpn_feature", "=", "FBNetRPNHead", "(", "cfg", ",", "in_channels", ",", "builder", ",", "model_arch", ")", "\n", "rpn_regressor", "=", "rpn", ".", "RPNHeadConvRegressor", "(", "\n", "cfg", ",", "rpn_feature", ".", "out_channels", ",", "num_anchors", ")", "\n", "return", "nn", ".", "Sequential", "(", "rpn_feature", ",", "rpn_regressor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet._get_head_stage": [[157, 164], ["arch.get", "fbnet_builder.get_blocks"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.config.paths_catalog.ModelCatalog.get", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet_builder.get_blocks"], ["", "def", "_get_head_stage", "(", "arch", ",", "head_name", ",", "blocks", ")", ":", "\n", "# use default name 'head' if the specific name 'head_name' does not existed", "\n", "    ", "if", "head_name", "not", "in", "arch", ":", "\n", "        ", "head_name", "=", "\"head\"", "\n", "", "head_stage", "=", "arch", ".", "get", "(", "head_name", ")", "\n", "ret", "=", "mbuilder", ".", "get_blocks", "(", "arch", ",", "stage_indices", "=", "head_stage", ",", "block_indices", "=", "blocks", ")", "\n", "return", "ret", "[", "\"stages\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet.add_roi_head": [[210, 222], ["maskrcnn_benchmark.modeling.registry.ROI_BOX_FEATURE_EXTRACTORS.register", "fbnet.create_builder", "fbnet.FBNetROIHead"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet.create_builder"], ["", "", "@", "registry", ".", "ROI_BOX_FEATURE_EXTRACTORS", ".", "register", "(", "\"FBNet.roi_head\"", ")", "\n", "def", "add_roi_head", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "builder", ",", "model_arch", "=", "create_builder", "(", "cfg", ")", "\n", "builder", ".", "last_depth", "=", "in_channels", "\n", "# builder.name_prefix = \"_[bbox]_\"", "\n", "\n", "return", "FBNetROIHead", "(", "\n", "cfg", ",", "in_channels", ",", "builder", ",", "model_arch", ",", "\n", "head_name", "=", "\"bbox\"", ",", "\n", "use_blocks", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "DET_HEAD_BLOCKS", ",", "\n", "stride_init", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "DET_HEAD_STRIDE", ",", "\n", "last_layer_scale", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "DET_HEAD_LAST_SCALE", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet.add_roi_head_keypoints": [[225, 237], ["maskrcnn_benchmark.modeling.registry.ROI_KEYPOINT_FEATURE_EXTRACTORS.register", "fbnet.create_builder", "fbnet.FBNetROIHead"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet.create_builder"], ["", "@", "registry", ".", "ROI_KEYPOINT_FEATURE_EXTRACTORS", ".", "register", "(", "\"FBNet.roi_head_keypoints\"", ")", "\n", "def", "add_roi_head_keypoints", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "builder", ",", "model_arch", "=", "create_builder", "(", "cfg", ")", "\n", "builder", ".", "last_depth", "=", "in_channels", "\n", "# builder.name_prefix = \"_[kpts]_\"", "\n", "\n", "return", "FBNetROIHead", "(", "\n", "cfg", ",", "in_channels", ",", "builder", ",", "model_arch", ",", "\n", "head_name", "=", "\"kpts\"", ",", "\n", "use_blocks", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "KPTS_HEAD_BLOCKS", ",", "\n", "stride_init", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "KPTS_HEAD_STRIDE", ",", "\n", "last_layer_scale", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "KPTS_HEAD_LAST_SCALE", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet.add_roi_head_mask": [[240, 252], ["maskrcnn_benchmark.modeling.registry.ROI_MASK_FEATURE_EXTRACTORS.register", "fbnet.create_builder", "fbnet.FBNetROIHead"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.fbnet.create_builder"], ["", "@", "registry", ".", "ROI_MASK_FEATURE_EXTRACTORS", ".", "register", "(", "\"FBNet.roi_head_mask\"", ")", "\n", "def", "add_roi_head_mask", "(", "cfg", ",", "in_channels", ")", ":", "\n", "    ", "builder", ",", "model_arch", "=", "create_builder", "(", "cfg", ")", "\n", "builder", ".", "last_depth", "=", "in_channels", "\n", "# builder.name_prefix = \"_[mask]_\"", "\n", "\n", "return", "FBNetROIHead", "(", "\n", "cfg", ",", "in_channels", ",", "builder", ",", "model_arch", ",", "\n", "head_name", "=", "\"mask\"", ",", "\n", "use_blocks", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "MASK_HEAD_BLOCKS", ",", "\n", "stride_init", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "MASK_HEAD_STRIDE", ",", "\n", "last_layer_scale", "=", "cfg", ".", "MODEL", ".", "FBNET", ".", "MASK_HEAD_LAST_SCALE", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.backbone.build_resnet_backbone": [[14, 23], ["maskrcnn_benchmark.modeling.registry.BACKBONES.register", "maskrcnn_benchmark.modeling.registry.BACKBONES.register", "maskrcnn_benchmark.modeling.registry.BACKBONES.register", "maskrcnn_benchmark.modeling.registry.BACKBONES.register", "resnet.ResNet", "torch.nn.Sequential", "collections.OrderedDict"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register"], ["@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-50-C4\"", ")", "\n", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-50-C5\"", ")", "\n", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-101-C4\"", ")", "\n", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-101-C5\"", ")", "\n", "def", "build_resnet_backbone", "(", "cfg", ")", ":", "\n", "    ", "body", "=", "resnet", ".", "ResNet", "(", "cfg", ")", "\n", "model", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "\"body\"", ",", "body", ")", "]", ")", ")", "\n", "model", ".", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "BACKBONE_OUT_CHANNELS", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.backbone.build_resnet_fpn_backbone": [[55, 86], ["maskrcnn_benchmark.modeling.registry.BACKBONES.register", "maskrcnn_benchmark.modeling.registry.BACKBONES.register", "maskrcnn_benchmark.modeling.registry.BACKBONES.register", "resnet.ResNet", "fpn.FPN", "pan.PAN", "msr.MSR", "torch.nn.Sequential", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform", "fpn.LastLevelMaxPool", "collections.OrderedDict"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.make_layers.conv_with_kaiming_uniform"], ["", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-50-PAN\"", ")", "\n", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-101-PAN\"", ")", "\n", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-152-PAN\"", ")", "\n", "def", "build_resnet_fpn_backbone", "(", "cfg", ")", ":", "\n", "    ", "in_channels_stage2", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", "\n", "in_channels_list", "=", "[", "\n", "in_channels_stage2", ",", "\n", "in_channels_stage2", "*", "2", ",", "\n", "in_channels_stage2", "*", "4", ",", "\n", "in_channels_stage2", "*", "8", ",", "\n", "]", "\n", "body", "=", "resnet", ".", "ResNet", "(", "cfg", ")", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "BACKBONE_OUT_CHANNELS", "\n", "fpn", "=", "fpn_module", ".", "FPN", "(", "\n", "in_channels_list", "=", "in_channels_list", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "conv_block", "=", "conv_with_kaiming_uniform", "(", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_GN", ",", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_RELU", ",", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_DEFORMABLE", "\n", ")", ",", "\n", "top_blocks", "=", "fpn_module", ".", "LastLevelMaxPool", "(", ")", ",", "\n", ")", "\n", "pan", "=", "PAN", "(", ")", "\n", "if", "cfg", ".", "MODEL", ".", "MSR_ON", ":", "\n", "        ", "model", "=", "MSR", "(", "body", ",", "in_channels_list", ",", "fpn", "=", "fpn", ",", "pan", "=", "pan", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "\"body\"", ",", "body", ")", ",", "\n", "(", "\"pan\"", ",", "pan", ")", ",", "\n", "(", "\"fpn\"", ",", "fpn", ")", "]", ")", ")", "\n", "", "model", ".", "out_channels", "=", "out_channels", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.backbone.build_resnet_fpn_p3p7_backbone": [[88, 112], ["maskrcnn_benchmark.modeling.registry.BACKBONES.register", "maskrcnn_benchmark.modeling.registry.BACKBONES.register", "resnet.ResNet", "fpn.FPN", "torch.nn.Sequential", "collections.OrderedDict", "maskrcnn_benchmark.modeling.make_layers.conv_with_kaiming_uniform", "fpn.LastLevelP6P7"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.registry.Registry.register", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.make_layers.conv_with_kaiming_uniform"], ["", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-50-FPN-RETINANET\"", ")", "\n", "@", "registry", ".", "BACKBONES", ".", "register", "(", "\"R-101-FPN-RETINANET\"", ")", "\n", "def", "build_resnet_fpn_p3p7_backbone", "(", "cfg", ")", ":", "\n", "    ", "body", "=", "resnet", ".", "ResNet", "(", "cfg", ")", "\n", "in_channels_stage2", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "RES2_OUT_CHANNELS", "\n", "out_channels", "=", "cfg", ".", "MODEL", ".", "RESNETS", ".", "BACKBONE_OUT_CHANNELS", "\n", "in_channels_p6p7", "=", "in_channels_stage2", "*", "8", "if", "cfg", ".", "MODEL", ".", "RETINANET", ".", "USE_C5", "else", "out_channels", "\n", "fpn", "=", "fpn_module", ".", "FPN", "(", "\n", "in_channels_list", "=", "[", "\n", "0", ",", "\n", "in_channels_stage2", "*", "2", ",", "\n", "in_channels_stage2", "*", "4", ",", "\n", "in_channels_stage2", "*", "8", ",", "\n", "]", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "conv_block", "=", "conv_with_kaiming_uniform", "(", "\n", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_GN", ",", "cfg", ".", "MODEL", ".", "FPN", ".", "USE_RELU", "\n", ")", ",", "\n", "top_blocks", "=", "fpn_module", ".", "LastLevelP6P7", "(", "in_channels_p6p7", ",", "out_channels", ")", ",", "\n", ")", "\n", "model", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "\"body\"", ",", "body", ")", ",", "(", "\"fpn\"", ",", "fpn", ")", "]", ")", ")", "\n", "model", ".", "out_channels", "=", "out_channels", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.backbone.build_backbone": [[114, 120], ["None"], "function", ["None"], ["", "def", "build_backbone", "(", "cfg", ")", ":", "\n", "    ", "assert", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "in", "registry", ".", "BACKBONES", ",", "\"cfg.MODEL.BACKBONE.CONV_BODY: {} are not registered in registry\"", ".", "format", "(", "\n", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "\n", ")", "\n", "return", "registry", ".", "BACKBONES", "[", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "]", "(", "cfg", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.detector.detectors.build_detection_model": [[8, 11], ["meta_arch"], "function", ["None"], ["def", "build_detection_model", "(", "cfg", ")", ":", "\n", "    ", "meta_arch", "=", "_DETECTION_META_ARCHITECTURES", "[", "cfg", ".", "MODEL", ".", "META_ARCHITECTURE", "]", "\n", "return", "meta_arch", "(", "cfg", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.detector.generalized_rcnn.GeneralizedRCNN.__init__": [[26, 33], ["torch.nn.Module.__init__", "cfg.clone", "backbone.build_backbone", "rpn.rpn.build_rpn", "roi_heads.roi_heads.build_roi_heads"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.backbone.backbone.build_backbone", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.rpn.build_rpn", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.roi_heads.roi_heads.build_roi_heads"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "GeneralizedRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "self", ".", "backbone", "=", "build_backbone", "(", "cfg", ")", "\n", "self", ".", "rpn", "=", "build_rpn", "(", "cfg", ",", "self", ".", "backbone", ".", "out_channels", ")", "\n", "self", ".", "roi_heads", "=", "build_roi_heads", "(", "cfg", ",", "self", ".", "backbone", ".", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.detector.generalized_rcnn.GeneralizedRCNN.forward": [[35, 72], ["maskrcnn_benchmark.structures.image_list.to_image_list", "generalized_rcnn.GeneralizedRCNN.backbone", "generalized_rcnn.GeneralizedRCNN.rpn", "ValueError", "generalized_rcnn.GeneralizedRCNN.roi_heads", "losses.update", "losses.update"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.image_list.to_image_list", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update"], ["", "def", "forward", "(", "self", ",", "images", ",", "targets", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            images (list[Tensor] or ImageList): images to be processed\n            targets (list[BoxList]): ground-truth boxes present in the image (optional)\n\n        Returns:\n            result (list[BoxList] or dict[Tensor]): the output from the model.\n                During training, it returns a dict[Tensor] which contains the losses.\n                During testing, it returns list[BoxList] contains additional fields\n                like `scores`, `labels` and `mask` (for Mask R-CNN models).\n\n        \"\"\"", "\n", "if", "self", ".", "training", "and", "targets", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"In training mode, targets should be passed\"", ")", "\n", "\n", "\n", "", "images", "=", "to_image_list", "(", "images", ")", "\n", "features", "=", "self", ".", "backbone", "(", "images", ".", "tensors", ")", "\n", "proposals", ",", "proposal_losses", "=", "self", ".", "rpn", "(", "images", ",", "features", ",", "targets", ")", "\n", "if", "self", ".", "roi_heads", ":", "\n", "            ", "x", ",", "result", ",", "detector_losses", "=", "self", ".", "roi_heads", "(", "features", ",", "proposals", ",", "targets", ")", "\n", "", "else", ":", "\n", "#self.warm_start -= 1", "\n", "# RPN-only models don't have roi_heads", "\n", "            ", "x", "=", "features", "\n", "result", "=", "proposals", "\n", "detector_losses", "=", "{", "}", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "losses", "=", "{", "}", "\n", "losses", ".", "update", "(", "detector_losses", ")", "\n", "losses", ".", "update", "(", "proposal_losses", ")", "\n", "\n", "return", "losses", "\n", "", "else", ":", "\n", "            ", "return", "result", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.BinaryMaskList.__init__": [[38, 83], ["isinstance", "tuple", "masks.masks.clone.masks.clone.clone", "isinstance", "len", "len", "isinstance", "isinstance", "torch.stack().clone", "masks.masks.clone.masks.clone.masks.clone", "RuntimeError", "isinstance", "RuntimeError", "torch.stack", "type", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "masks", ",", "size", ")", ":", "\n", "        ", "\"\"\"\n            Arguments:\n                masks: Either torch.tensor of [num_instances, H, W]\n                    or list of torch.tensors of [H, W] with num_instances elems,\n                    or RLE (Run Length Encoding) - interpreted as list of dicts,\n                    or BinaryMaskList.\n                size: absolute image size, width first\n\n            After initialization, a hard copy will be made, to leave the\n            initializing source data intact.\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "masks", ",", "torch", ".", "Tensor", ")", ":", "\n", "# The raw data representation is passed as argument", "\n", "            ", "masks", "=", "masks", ".", "clone", "(", ")", "\n", "", "elif", "isinstance", "(", "masks", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "masks", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "masks", "=", "torch", ".", "stack", "(", "masks", ",", "dim", "=", "2", ")", ".", "clone", "(", ")", "\n", "", "elif", "isinstance", "(", "masks", "[", "0", "]", ",", "dict", ")", "and", "\"count\"", "in", "masks", "[", "0", "]", ":", "\n", "# RLE interpretation", "\n", "\n", "                ", "masks", "=", "mask_utils", "\n", "", "else", ":", "\n", "                ", "RuntimeError", "(", "\n", "\"Type of `masks[0]` could not be interpreted: %s\"", "%", "type", "(", "masks", ")", "\n", ")", "\n", "", "", "elif", "isinstance", "(", "masks", ",", "BinaryMaskList", ")", ":", "\n", "# just hard copy the BinaryMaskList instance's underlying data", "\n", "            ", "masks", "=", "masks", ".", "masks", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "            ", "RuntimeError", "(", "\n", "\"Type of `masks` argument could not be interpreted:%s\"", "%", "type", "(", "masks", ")", "\n", ")", "\n", "\n", "", "if", "len", "(", "masks", ".", "shape", ")", "==", "2", ":", "\n", "# if only a single instance mask is passed", "\n", "            ", "masks", "=", "masks", "[", "None", "]", "\n", "\n", "", "assert", "len", "(", "masks", ".", "shape", ")", "==", "3", "\n", "assert", "masks", ".", "shape", "[", "1", "]", "==", "size", "[", "1", "]", ",", "\"%s != %s\"", "%", "(", "masks", ".", "shape", "[", "1", "]", ",", "size", "[", "1", "]", ")", "\n", "assert", "masks", ".", "shape", "[", "2", "]", "==", "size", "[", "0", "]", ",", "\"%s != %s\"", "%", "(", "masks", ".", "shape", "[", "2", "]", ",", "size", "[", "0", "]", ")", "\n", "\n", "self", ".", "masks", "=", "masks", "\n", "self", ".", "size", "=", "tuple", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.BinaryMaskList.transpose": [[84, 88], ["segmentation_mask.BinaryMaskList.masks.flip", "segmentation_mask.BinaryMaskList"], "methods", ["None"], ["", "def", "transpose", "(", "self", ",", "method", ")", ":", "\n", "        ", "dim", "=", "1", "if", "method", "==", "FLIP_TOP_BOTTOM", "else", "2", "\n", "flipped_masks", "=", "self", ".", "masks", ".", "flip", "(", "dim", ")", "\n", "return", "BinaryMaskList", "(", "flipped_masks", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.BinaryMaskList.crop": [[89, 109], ["isinstance", "str", "str", "min", "min", "min", "min", "max", "max", "segmentation_mask.BinaryMaskList", "type", "round", "max", "max", "max", "max", "float"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "box", ")", ":", "\n", "        ", "assert", "isinstance", "(", "box", ",", "(", "list", ",", "tuple", ",", "torch", ".", "Tensor", ")", ")", ",", "str", "(", "type", "(", "box", ")", ")", "\n", "# box is assumed to be xyxy", "\n", "current_width", ",", "current_height", "=", "self", ".", "size", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "[", "round", "(", "float", "(", "b", ")", ")", "for", "b", "in", "box", "]", "\n", "\n", "assert", "xmin", "<=", "xmax", "and", "ymin", "<=", "ymax", ",", "str", "(", "box", ")", "\n", "xmin", "=", "min", "(", "max", "(", "xmin", ",", "0", ")", ",", "current_width", "-", "1", ")", "\n", "ymin", "=", "min", "(", "max", "(", "ymin", ",", "0", ")", ",", "current_height", "-", "1", ")", "\n", "\n", "xmax", "=", "min", "(", "max", "(", "xmax", ",", "0", ")", ",", "current_width", ")", "\n", "ymax", "=", "min", "(", "max", "(", "ymax", ",", "0", ")", ",", "current_height", ")", "\n", "\n", "xmax", "=", "max", "(", "xmax", ",", "xmin", "+", "1", ")", "\n", "ymax", "=", "max", "(", "ymax", ",", "ymin", "+", "1", ")", "\n", "\n", "width", ",", "height", "=", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", "\n", "cropped_masks", "=", "self", ".", "masks", "[", ":", ",", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "\n", "cropped_size", "=", "width", ",", "height", "\n", "return", "BinaryMaskList", "(", "cropped_masks", ",", "cropped_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.BinaryMaskList.resize": [[110, 130], ["map", "[].type_as", "segmentation_mask.BinaryMaskList", "iter", "isinstance", "torch.nn.functional.interpolate", "segmentation_mask.BinaryMaskList.masks[].float"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc.interpolate"], ["", "def", "resize", "(", "self", ",", "size", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "iter", "(", "size", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "assert", "isinstance", "(", "size", ",", "(", "int", ",", "float", ")", ")", "\n", "size", "=", "size", ",", "size", "\n", "", "width", ",", "height", "=", "map", "(", "int", ",", "size", ")", "\n", "\n", "assert", "width", ">", "0", "\n", "assert", "height", ">", "0", "\n", "\n", "# Height comes first here!", "\n", "resized_masks", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "input", "=", "self", ".", "masks", "[", "None", "]", ".", "float", "(", ")", ",", "\n", "size", "=", "(", "height", ",", "width", ")", ",", "\n", "mode", "=", "\"bilinear\"", ",", "\n", "align_corners", "=", "False", ",", "\n", ")", "[", "0", "]", ".", "type_as", "(", "self", ".", "masks", ")", "\n", "resized_size", "=", "width", ",", "height", "\n", "return", "BinaryMaskList", "(", "resized_masks", ",", "resized_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.BinaryMaskList.convert_to_polygon": [[131, 134], ["segmentation_mask.BinaryMaskList._findContours", "segmentation_mask.PolygonList"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.BinaryMaskList._findContours"], ["", "def", "convert_to_polygon", "(", "self", ")", ":", "\n", "        ", "contours", "=", "self", ".", "_findContours", "(", ")", "\n", "return", "PolygonList", "(", "contours", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.BinaryMaskList.to": [[135, 137], ["None"], "methods", ["None"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.BinaryMaskList._findContours": [[138, 154], ["segmentation_mask.BinaryMaskList.masks.detach().numpy", "cv2.UMat", "cv2.findContours", "contours.append", "segmentation_mask.BinaryMaskList.masks.detach", "reshaped_contour.append", "len", "entity.reshape().tolist", "entity.reshape"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.cv2_util.findContours"], ["", "def", "_findContours", "(", "self", ")", ":", "\n", "        ", "contours", "=", "[", "]", "\n", "masks", "=", "self", ".", "masks", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "for", "mask", "in", "masks", ":", "\n", "            ", "mask", "=", "cv2", ".", "UMat", "(", "mask", ")", "\n", "contour", ",", "hierarchy", "=", "cv2", ".", "findContours", "(", "\n", "mask", ",", "cv2", ".", "RETR_EXTERNAL", ",", "cv2", ".", "CHAIN_APPROX_TC89_L1", "\n", ")", "\n", "\n", "reshaped_contour", "=", "[", "]", "\n", "for", "entity", "in", "contour", ":", "\n", "                ", "assert", "len", "(", "entity", ".", "shape", ")", "==", "3", "\n", "assert", "entity", ".", "shape", "[", "1", "]", "==", "1", ",", "\"Hierarchical contours are not allowed\"", "\n", "reshaped_contour", ".", "append", "(", "entity", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", ")", "\n", "", "contours", ".", "append", "(", "reshaped_contour", ")", "\n", "", "return", "contours", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.BinaryMaskList.__len__": [[155, 157], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.BinaryMaskList.__getitem__": [[158, 163], ["segmentation_mask.BinaryMaskList.masks[].clone", "segmentation_mask.BinaryMaskList"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# Probably it can cause some overhead", "\n", "# but preserves consistency", "\n", "        ", "masks", "=", "self", ".", "masks", "[", "index", "]", ".", "clone", "(", ")", "\n", "return", "BinaryMaskList", "(", "masks", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.BinaryMaskList.__iter__": [[164, 166], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.BinaryMaskList.__repr__": [[167, 173], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "s", "+=", "\"num_instances={}, \"", ".", "format", "(", "len", "(", "self", ".", "masks", ")", ")", "\n", "s", "+=", "\"image_width={}, \"", ".", "format", "(", "self", ".", "size", "[", "0", "]", ")", "\n", "s", "+=", "\"image_height={})\"", ".", "format", "(", "self", ".", "size", "[", "1", "]", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonInstance.__init__": [[182, 214], ["isinstance", "tuple", "isinstance", "torch.as_tensor", "copy.copy", "RuntimeError", "len", "valid_polygons.append", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "polygons", ",", "size", ")", ":", "\n", "        ", "\"\"\"\n            Arguments:\n                a list of lists of numbers.\n                The first level refers to all the polygons that compose the\n                object, and the second level to the polygon coordinates.\n        \"\"\"", "\n", "if", "isinstance", "(", "polygons", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "valid_polygons", "=", "[", "]", "\n", "for", "p", "in", "polygons", ":", "\n", "                ", "p", "=", "torch", ".", "as_tensor", "(", "p", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "if", "len", "(", "p", ")", ">=", "6", ":", "# 3 * 2 coordinates", "\n", "                    ", "valid_polygons", ".", "append", "(", "p", ")", "\n", "", "", "polygons", "=", "valid_polygons", "\n", "\n", "", "elif", "isinstance", "(", "polygons", ",", "PolygonInstance", ")", ":", "\n", "            ", "polygons", "=", "copy", ".", "copy", "(", "polygons", ".", "polygons", ")", "\n", "", "else", ":", "\n", "            ", "RuntimeError", "(", "\n", "\"Type of argument `polygons` is not allowed:%s\"", "%", "(", "type", "(", "polygons", ")", ")", "\n", ")", "\n", "\n", "", "\"\"\" This crashes the training way too many times...\n        for p in polygons:\n            assert p[::2].min() >= 0\n            assert p[::2].max() < size[0]\n            assert p[1::2].min() >= 0\n            assert p[1::2].max() , size[1]\n        \"\"\"", "\n", "\n", "self", ".", "polygons", "=", "polygons", "\n", "self", ".", "size", "=", "tuple", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonInstance.transpose": [[215, 237], ["segmentation_mask.PolygonInstance", "NotImplementedError", "poly.clone", "flipped_polygons.append"], "methods", ["None"], ["", "def", "transpose", "(", "self", ",", "method", ")", ":", "\n", "        ", "if", "method", "not", "in", "(", "FLIP_LEFT_RIGHT", ",", "FLIP_TOP_BOTTOM", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Only FLIP_LEFT_RIGHT and FLIP_TOP_BOTTOM implemented\"", "\n", ")", "\n", "\n", "", "flipped_polygons", "=", "[", "]", "\n", "width", ",", "height", "=", "self", ".", "size", "\n", "if", "method", "==", "FLIP_LEFT_RIGHT", ":", "\n", "            ", "dim", "=", "width", "\n", "idx", "=", "0", "\n", "", "elif", "method", "==", "FLIP_TOP_BOTTOM", ":", "\n", "            ", "dim", "=", "height", "\n", "idx", "=", "1", "\n", "\n", "", "for", "poly", "in", "self", ".", "polygons", ":", "\n", "            ", "p", "=", "poly", ".", "clone", "(", ")", "\n", "TO_REMOVE", "=", "1", "\n", "p", "[", "idx", ":", ":", "2", "]", "=", "dim", "-", "poly", "[", "idx", ":", ":", "2", "]", "-", "TO_REMOVE", "\n", "flipped_polygons", ".", "append", "(", "p", ")", "\n", "\n", "", "return", "PolygonInstance", "(", "flipped_polygons", ",", "size", "=", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonInstance.crop": [[238, 265], ["isinstance", "str", "map", "str", "min", "min", "min", "min", "max", "max", "segmentation_mask.PolygonInstance", "type", "max", "max", "max", "max", "poly.clone", "cropped_polygons.append"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "box", ")", ":", "\n", "        ", "assert", "isinstance", "(", "box", ",", "(", "list", ",", "tuple", ",", "torch", ".", "Tensor", ")", ")", ",", "str", "(", "type", "(", "box", ")", ")", "\n", "\n", "# box is assumed to be xyxy", "\n", "current_width", ",", "current_height", "=", "self", ".", "size", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "map", "(", "float", ",", "box", ")", "\n", "\n", "assert", "xmin", "<=", "xmax", "and", "ymin", "<=", "ymax", ",", "str", "(", "box", ")", "\n", "xmin", "=", "min", "(", "max", "(", "xmin", ",", "0", ")", ",", "current_width", "-", "1", ")", "\n", "ymin", "=", "min", "(", "max", "(", "ymin", ",", "0", ")", ",", "current_height", "-", "1", ")", "\n", "\n", "xmax", "=", "min", "(", "max", "(", "xmax", ",", "0", ")", ",", "current_width", ")", "\n", "ymax", "=", "min", "(", "max", "(", "ymax", ",", "0", ")", ",", "current_height", ")", "\n", "\n", "xmax", "=", "max", "(", "xmax", ",", "xmin", "+", "1", ")", "\n", "ymax", "=", "max", "(", "ymax", ",", "ymin", "+", "1", ")", "\n", "\n", "w", ",", "h", "=", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", "\n", "\n", "cropped_polygons", "=", "[", "]", "\n", "for", "poly", "in", "self", ".", "polygons", ":", "\n", "            ", "p", "=", "poly", ".", "clone", "(", ")", "\n", "p", "[", "0", ":", ":", "2", "]", "=", "p", "[", "0", ":", ":", "2", "]", "-", "xmin", "# .clamp(min=0, max=w)", "\n", "p", "[", "1", ":", ":", "2", "]", "=", "p", "[", "1", ":", ":", "2", "]", "-", "ymin", "# .clamp(min=0, max=h)", "\n", "cropped_polygons", ".", "append", "(", "p", ")", "\n", "\n", "", "return", "PolygonInstance", "(", "cropped_polygons", ",", "size", "=", "(", "w", ",", "h", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonInstance.resize": [[266, 289], ["tuple", "segmentation_mask.PolygonInstance", "iter", "segmentation_mask.PolygonInstance", "poly.clone", "scaled_polygons.append", "isinstance", "float", "float", "zip"], "methods", ["None"], ["", "def", "resize", "(", "self", ",", "size", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "iter", "(", "size", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "assert", "isinstance", "(", "size", ",", "(", "int", ",", "float", ")", ")", "\n", "size", "=", "size", ",", "size", "\n", "\n", "", "ratios", "=", "tuple", "(", "float", "(", "s", ")", "/", "float", "(", "s_orig", ")", "for", "s", ",", "s_orig", "in", "zip", "(", "size", ",", "self", ".", "size", ")", ")", "\n", "\n", "if", "ratios", "[", "0", "]", "==", "ratios", "[", "1", "]", ":", "\n", "            ", "ratio", "=", "ratios", "[", "0", "]", "\n", "scaled_polys", "=", "[", "p", "*", "ratio", "for", "p", "in", "self", ".", "polygons", "]", "\n", "return", "PolygonInstance", "(", "scaled_polys", ",", "size", ")", "\n", "\n", "", "ratio_w", ",", "ratio_h", "=", "ratios", "\n", "scaled_polygons", "=", "[", "]", "\n", "for", "poly", "in", "self", ".", "polygons", ":", "\n", "            ", "p", "=", "poly", ".", "clone", "(", ")", "\n", "p", "[", "0", ":", ":", "2", "]", "*=", "ratio_w", "\n", "p", "[", "1", ":", ":", "2", "]", "*=", "ratio_h", "\n", "scaled_polygons", ".", "append", "(", "p", ")", "\n", "\n", "", "return", "PolygonInstance", "(", "scaled_polygons", ",", "size", "=", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonInstance.convert_to_binarymask": [[290, 299], ["pycocotools.frPyObjects", "pycocotools.merge", "pycocotools.decode", "torch.from_numpy", "p.numpy"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.box_coder.BoxCoder.decode"], ["", "def", "convert_to_binarymask", "(", "self", ")", ":", "\n", "        ", "width", ",", "height", "=", "self", ".", "size", "\n", "# formatting for COCO PythonAPI", "\n", "polygons", "=", "[", "p", ".", "numpy", "(", ")", "for", "p", "in", "self", ".", "polygons", "]", "\n", "rles", "=", "mask_utils", ".", "frPyObjects", "(", "polygons", ",", "height", ",", "width", ")", "\n", "rle", "=", "mask_utils", ".", "merge", "(", "rles", ")", "\n", "mask", "=", "mask_utils", ".", "decode", "(", "rle", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonInstance.__len__": [[300, 302], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "polygons", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonInstance.__repr__": [[303, 309], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "s", "+=", "\"num_groups={}, \"", ".", "format", "(", "len", "(", "self", ".", "polygons", ")", ")", "\n", "s", "+=", "\"image_width={}, \"", ".", "format", "(", "self", ".", "size", "[", "0", "]", ")", "\n", "s", "+=", "\"image_height={}, \"", ".", "format", "(", "self", ".", "size", "[", "1", "]", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonList.__init__": [[316, 364], ["isinstance", "isinstance", "str", "tuple", "isinstance", "isinstance", "type", "segmentation_mask.PolygonInstance", "len", "isinstance", "str", "isinstance", "str", "RuntimeError", "len", "segmentation_mask.PolygonList.polygons.append", "type", "type", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "polygons", ",", "size", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            polygons:\n                a list of list of lists of numbers. The first\n                level of the list correspond to individual instances,\n                the second level to all the polygons that compose the\n                object, and the third level to the polygon coordinates.\n\n                OR\n\n                a list of PolygonInstances.\n\n                OR\n\n                a PolygonList\n\n            size: absolute image size\n\n        \"\"\"", "\n", "if", "isinstance", "(", "polygons", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "if", "len", "(", "polygons", ")", "==", "0", ":", "\n", "                ", "polygons", "=", "[", "[", "[", "]", "]", "]", "\n", "", "if", "isinstance", "(", "polygons", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "assert", "isinstance", "(", "polygons", "[", "0", "]", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ",", "str", "(", "\n", "type", "(", "polygons", "[", "0", "]", "[", "0", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "assert", "isinstance", "(", "polygons", "[", "0", "]", ",", "PolygonInstance", ")", ",", "str", "(", "type", "(", "polygons", "[", "0", "]", ")", ")", "\n", "\n", "", "", "elif", "isinstance", "(", "polygons", ",", "PolygonList", ")", ":", "\n", "            ", "size", "=", "polygons", ".", "size", "\n", "polygons", "=", "polygons", ".", "polygons", "\n", "\n", "", "else", ":", "\n", "            ", "RuntimeError", "(", "\n", "\"Type of argument `polygons` is not allowed:%s\"", "%", "(", "type", "(", "polygons", ")", ")", "\n", ")", "\n", "\n", "", "assert", "isinstance", "(", "size", ",", "(", "list", ",", "tuple", ")", ")", ",", "str", "(", "type", "(", "size", ")", ")", "\n", "\n", "self", ".", "polygons", "=", "[", "]", "\n", "for", "p", "in", "polygons", ":", "\n", "            ", "p", "=", "PolygonInstance", "(", "p", ",", "size", ")", "\n", "if", "len", "(", "p", ")", ">", "0", ":", "\n", "                ", "self", ".", "polygons", ".", "append", "(", "p", ")", "\n", "\n", "", "", "self", ".", "size", "=", "tuple", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonList.transpose": [[365, 376], ["segmentation_mask.PolygonList", "NotImplementedError", "flipped_polygons.append", "polygon.transpose"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.transpose"], ["", "def", "transpose", "(", "self", ",", "method", ")", ":", "\n", "        ", "if", "method", "not", "in", "(", "FLIP_LEFT_RIGHT", ",", "FLIP_TOP_BOTTOM", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Only FLIP_LEFT_RIGHT and FLIP_TOP_BOTTOM implemented\"", "\n", ")", "\n", "\n", "", "flipped_polygons", "=", "[", "]", "\n", "for", "polygon", "in", "self", ".", "polygons", ":", "\n", "            ", "flipped_polygons", ".", "append", "(", "polygon", ".", "transpose", "(", "method", ")", ")", "\n", "\n", "", "return", "PolygonList", "(", "flipped_polygons", ",", "size", "=", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonList.crop": [[377, 385], ["segmentation_mask.PolygonList", "cropped_polygons.append", "polygon.crop"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.crop"], ["", "def", "crop", "(", "self", ",", "box", ")", ":", "\n", "        ", "w", ",", "h", "=", "box", "[", "2", "]", "-", "box", "[", "0", "]", ",", "box", "[", "3", "]", "-", "box", "[", "1", "]", "\n", "cropped_polygons", "=", "[", "]", "\n", "for", "polygon", "in", "self", ".", "polygons", ":", "\n", "            ", "cropped_polygons", ".", "append", "(", "polygon", ".", "crop", "(", "box", ")", ")", "\n", "\n", "", "cropped_size", "=", "w", ",", "h", "\n", "return", "PolygonList", "(", "cropped_polygons", ",", "cropped_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonList.resize": [[386, 393], ["segmentation_mask.PolygonList", "resized_polygons.append", "polygon.resize"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize"], ["", "def", "resize", "(", "self", ",", "size", ")", ":", "\n", "        ", "resized_polygons", "=", "[", "]", "\n", "for", "polygon", "in", "self", ".", "polygons", ":", "\n", "            ", "resized_polygons", ".", "append", "(", "polygon", ".", "resize", "(", "size", ")", ")", "\n", "\n", "", "resized_size", "=", "size", "\n", "return", "PolygonList", "(", "resized_polygons", ",", "resized_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonList.to": [[394, 396], ["None"], "methods", ["None"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonList.convert_to_binarymask": [[397, 405], ["segmentation_mask.BinaryMaskList", "len", "torch.stack", "torch.empty", "p.convert_to_binarymask"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonList.convert_to_binarymask"], ["", "def", "convert_to_binarymask", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ")", ">", "0", ":", "\n", "            ", "masks", "=", "torch", ".", "stack", "(", "[", "p", ".", "convert_to_binarymask", "(", ")", "for", "p", "in", "self", ".", "polygons", "]", ")", "\n", "", "else", ":", "\n", "            ", "size", "=", "self", ".", "size", "\n", "masks", "=", "torch", ".", "empty", "(", "[", "0", ",", "size", "[", "1", "]", ",", "size", "[", "0", "]", "]", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "\n", "", "return", "BinaryMaskList", "(", "masks", ",", "size", "=", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonList.__len__": [[406, 408], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "polygons", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonList.__getitem__": [[409, 424], ["isinstance", "segmentation_mask.PolygonList", "isinstance", "isinstance", "item.tolist.tolist.nonzero", "item.tolist.tolist.tolist", "selected_polygons.append", "item.tolist.tolist.squeeze", "item.tolist.tolist.numel"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "int", ")", ":", "\n", "            ", "selected_polygons", "=", "[", "self", ".", "polygons", "[", "item", "]", "]", "\n", "", "elif", "isinstance", "(", "item", ",", "slice", ")", ":", "\n", "            ", "selected_polygons", "=", "self", ".", "polygons", "[", "item", "]", "\n", "", "else", ":", "\n", "# advanced indexing on a single dimension", "\n", "            ", "selected_polygons", "=", "[", "]", "\n", "if", "isinstance", "(", "item", ",", "torch", ".", "Tensor", ")", "and", "item", ".", "dtype", "==", "torch", ".", "uint8", ":", "\n", "                ", "item", "=", "item", ".", "nonzero", "(", ")", "\n", "item", "=", "item", ".", "squeeze", "(", "1", ")", "if", "item", ".", "numel", "(", ")", ">", "0", "else", "item", "\n", "item", "=", "item", ".", "tolist", "(", ")", "\n", "", "for", "i", "in", "item", ":", "\n", "                ", "selected_polygons", ".", "append", "(", "self", ".", "polygons", "[", "i", "]", ")", "\n", "", "", "return", "PolygonList", "(", "selected_polygons", ",", "size", "=", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonList.__iter__": [[425, 427], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "polygons", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonList.__repr__": [[428, 434], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "s", "+=", "\"num_instances={}, \"", ".", "format", "(", "len", "(", "self", ".", "polygons", ")", ")", "\n", "s", "+=", "\"image_width={}, \"", ".", "format", "(", "self", ".", "size", "[", "0", "]", ")", "\n", "s", "+=", "\"image_height={})\"", ".", "format", "(", "self", ".", "size", "[", "1", "]", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.SegmentationMask.__init__": [[443, 471], ["isinstance", "isinstance", "isinstance", "isinstance", "tuple", "len", "isinstance", "segmentation_mask.PolygonList", "size[].item", "size[].item", "segmentation_mask.BinaryMaskList", "NotImplementedError", "str"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "instances", ",", "size", ",", "mode", "=", "\"poly\"", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            instances: two types\n                (1) polygon\n                (2) binary mask\n            size: (width, height)\n            mode: 'poly', 'mask'. if mode is 'mask', convert mask of any format to binary mask\n        \"\"\"", "\n", "\n", "assert", "isinstance", "(", "size", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "len", "(", "size", ")", "==", "2", "\n", "if", "isinstance", "(", "size", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "assert", "isinstance", "(", "size", "[", "1", "]", ",", "torch", ".", "Tensor", ")", "\n", "size", "=", "size", "[", "0", "]", ".", "item", "(", ")", ",", "size", "[", "1", "]", ".", "item", "(", ")", "\n", "\n", "", "assert", "isinstance", "(", "size", "[", "0", "]", ",", "(", "int", ",", "float", ")", ")", "\n", "assert", "isinstance", "(", "size", "[", "1", "]", ",", "(", "int", ",", "float", ")", ")", "\n", "\n", "if", "mode", "==", "\"poly\"", ":", "\n", "            ", "self", ".", "instances", "=", "PolygonList", "(", "instances", ",", "size", ")", "\n", "", "elif", "mode", "==", "\"mask\"", ":", "\n", "            ", "self", ".", "instances", "=", "BinaryMaskList", "(", "instances", ",", "size", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unknown mode: %s\"", "%", "str", "(", "mode", ")", ")", "\n", "\n", "", "self", ".", "mode", "=", "mode", "\n", "self", ".", "size", "=", "tuple", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.SegmentationMask.transpose": [[472, 475], ["segmentation_mask.SegmentationMask.instances.transpose", "segmentation_mask.SegmentationMask"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.transpose"], ["", "def", "transpose", "(", "self", ",", "method", ")", ":", "\n", "        ", "flipped_instances", "=", "self", ".", "instances", ".", "transpose", "(", "method", ")", "\n", "return", "SegmentationMask", "(", "flipped_instances", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.SegmentationMask.crop": [[476, 480], ["segmentation_mask.SegmentationMask.instances.crop", "segmentation_mask.SegmentationMask"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.crop"], ["", "def", "crop", "(", "self", ",", "box", ")", ":", "\n", "        ", "cropped_instances", "=", "self", ".", "instances", ".", "crop", "(", "box", ")", "\n", "cropped_size", "=", "cropped_instances", ".", "size", "\n", "return", "SegmentationMask", "(", "cropped_instances", ",", "cropped_size", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.SegmentationMask.resize": [[481, 485], ["segmentation_mask.SegmentationMask.instances.resize", "segmentation_mask.SegmentationMask"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize"], ["", "def", "resize", "(", "self", ",", "size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "resized_instances", "=", "self", ".", "instances", ".", "resize", "(", "size", ")", "\n", "resized_size", "=", "size", "\n", "return", "SegmentationMask", "(", "resized_instances", ",", "resized_size", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.SegmentationMask.to": [[486, 488], ["None"], "methods", ["None"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.SegmentationMask.convert": [[489, 501], ["segmentation_mask.SegmentationMask", "segmentation_mask.SegmentationMask.instances.convert_to_polygon", "segmentation_mask.SegmentationMask.instances.convert_to_binarymask", "NotImplementedError", "str"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.BinaryMaskList.convert_to_polygon", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonList.convert_to_binarymask"], ["", "def", "convert", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "self", ".", "mode", ":", "\n", "            ", "return", "self", "\n", "\n", "", "if", "mode", "==", "\"poly\"", ":", "\n", "            ", "converted_instances", "=", "self", ".", "instances", ".", "convert_to_polygon", "(", ")", "\n", "", "elif", "mode", "==", "\"mask\"", ":", "\n", "            ", "converted_instances", "=", "self", ".", "instances", ".", "convert_to_binarymask", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unknown mode: %s\"", "%", "str", "(", "mode", ")", ")", "\n", "\n", "", "return", "SegmentationMask", "(", "converted_instances", ",", "self", ".", "size", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.SegmentationMask.get_mask_tensor": [[502, 508], ["instances.convert_to_binarymask.convert_to_binarymask.masks.squeeze", "instances.convert_to_binarymask.convert_to_binarymask.convert_to_binarymask"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.PolygonList.convert_to_binarymask"], ["", "def", "get_mask_tensor", "(", "self", ")", ":", "\n", "        ", "instances", "=", "self", ".", "instances", "\n", "if", "self", ".", "mode", "==", "\"poly\"", ":", "\n", "            ", "instances", "=", "instances", ".", "convert_to_binarymask", "(", ")", "\n", "# If there is only 1 instance", "\n", "", "return", "instances", ".", "masks", ".", "squeeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.SegmentationMask.__len__": [[509, 511], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "instances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.SegmentationMask.__getitem__": [[512, 515], ["segmentation_mask.SegmentationMask.instances.__getitem__", "segmentation_mask.SegmentationMask"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "selected_instances", "=", "self", ".", "instances", ".", "__getitem__", "(", "item", ")", "\n", "return", "SegmentationMask", "(", "selected_instances", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.SegmentationMask.__iter__": [[516, 519], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter_idx", "=", "0", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.SegmentationMask.__next__": [[520, 526], ["StopIteration", "segmentation_mask.SegmentationMask.__len__", "segmentation_mask.SegmentationMask.__getitem__"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.samplers.iteration_based_batch_sampler.IterationBasedBatchSampler.__len__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset.__getitem__"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "iter_idx", "<", "self", ".", "__len__", "(", ")", ":", "\n", "            ", "next_segmentation", "=", "self", ".", "__getitem__", "(", "self", ".", "iter_idx", ")", "\n", "self", ".", "iter_idx", "+=", "1", "\n", "return", "next_segmentation", "\n", "", "raise", "StopIteration", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.segmentation_mask.SegmentationMask.__repr__": [[529, 536], ["len"], "methods", ["None"], ["def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "s", "+=", "\"num_instances={}, \"", ".", "format", "(", "len", "(", "self", ".", "instances", ")", ")", "\n", "s", "+=", "\"image_width={}, \"", ".", "format", "(", "self", ".", "size", "[", "0", "]", ")", "\n", "s", "+=", "\"image_height={}, \"", ".", "format", "(", "self", ".", "size", "[", "1", "]", ")", "\n", "s", "+=", "\"mode={})\"", ".", "format", "(", "self", ".", "mode", ")", "\n", "return", "s", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.ke.KES.__init__": [[9, 38], ["torch.as_tensor", "isinstance", "torch.device", "len", "kes.view.view.unsqueeze", "kes.view.view.view", "kes_x.view.view.view", "kes_y.view.view.view", "kes.view.view.size", "str", "kes_x.view.view.size", "kes_y.view.view.size", "str", "kes.view.view.size", "kes.view.view.size", "str", "kes_y.view.view.size", "kes.view.view.size", "kes.view.view.size", "kes_x.view.view.size"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kes", ",", "size", ",", "mode", "=", "None", ")", ":", "\n", "# FIXME remove check once we have better integration with device", "\n", "# in my version this would consistently return a CPU tensor", "\n", "        ", "device", "=", "kes", ".", "device", "if", "isinstance", "(", "kes", ",", "torch", ".", "Tensor", ")", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "kes", "=", "torch", ".", "as_tensor", "(", "kes", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "if", "len", "(", "kes", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "            ", "kes", "=", "kes", ".", "unsqueeze", "(", "2", ")", "\n", "if", "not", "kes", ".", "size", "(", ")", "[", "0", "]", "==", "0", ":", "\n", "                ", "assert", "(", "kes", ".", "size", "(", ")", "[", "-", "2", "]", "==", "12", ")", ",", "str", "(", "kes", ".", "size", "(", ")", ")", "# 12kes", "\n", "\n", "", "", "num_kes", "=", "kes", ".", "shape", "[", "0", "]", "\n", "kes_x", "=", "kes", "[", ":", ",", ":", "6", ",", "0", "]", "# 4+2=6", "\n", "kes_y", "=", "kes", "[", ":", ",", "6", ":", ",", "0", "]", "\n", "# TODO remove once support or zero in dim is in", "\n", "if", "not", "kes", ".", "size", "(", ")", "[", "0", "]", "==", "0", ":", "\n", "            ", "assert", "(", "kes_x", ".", "size", "(", ")", "==", "kes_y", ".", "size", "(", ")", ")", ",", "str", "(", "kes_x", ".", "size", "(", ")", ")", "+", "' '", "+", "str", "(", "kes_y", ".", "size", "(", ")", ")", "\n", "\n", "", "if", "num_kes", ">", "0", ":", "\n", "            ", "kes", "=", "kes", ".", "view", "(", "num_kes", ",", "-", "1", ",", "1", ")", "\n", "kes_x", "=", "kes_x", ".", "view", "(", "num_kes", ",", "-", "1", ",", "1", ")", "\n", "kes_y", "=", "kes_y", ".", "view", "(", "num_kes", ",", "-", "1", ",", "1", ")", "\n", "\n", "# TODO should I split them?", "\n", "", "self", ".", "kes", "=", "kes", "\n", "self", ".", "kes_x", "=", "kes_x", "\n", "self", ".", "kes_y", "=", "kes_y", "\n", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.ke.KES.crop": [[39, 45], ["ke.KES.kes.clone", "type"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "box", ")", ":", "\n", "        ", "w", ",", "h", "=", "box", "[", "2", "]", "-", "box", "[", "0", "]", ",", "box", "[", "3", "]", "-", "box", "[", "1", "]", "\n", "k", "=", "self", ".", "kes", ".", "clone", "(", ")", "\n", "k", "[", ":", ",", ":", "6", ",", "0", "]", "-=", "box", "[", "0", "]", "\n", "k", "[", ":", ",", "6", ":", ",", "0", "]", "-=", "box", "[", "1", "]", "\n", "return", "type", "(", "self", ")", "(", "k", ",", "(", "w", ",", "h", ")", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.ke.KES.resize": [[46, 57], ["tuple", "ke.KES.kes_x.clone", "ke.KES.kes_y.clone", "torch.cat", "type", "float", "float", "zip"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat"], ["", "def", "resize", "(", "self", ",", "size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "ratios", "=", "tuple", "(", "float", "(", "s", ")", "/", "float", "(", "s_orig", ")", "for", "s", ",", "s_orig", "in", "zip", "(", "size", ",", "self", ".", "size", ")", ")", "\n", "ratio_w", ",", "ratio_h", "=", "ratios", "\n", "resized_data_x", "=", "self", ".", "kes_x", ".", "clone", "(", ")", "\n", "resized_data_x", "[", "...", ",", ":", "]", "*=", "ratio_w", "\n", "\n", "resized_data_y", "=", "self", ".", "kes_y", ".", "clone", "(", ")", "\n", "resized_data_y", "[", "...", ",", ":", "]", "*=", "ratio_h", "\n", "\n", "resized_data", "=", "torch", ".", "cat", "(", "(", "resized_data_x", ",", "resized_data_y", ")", ",", "dim", "=", "-", "2", ")", "\n", "return", "type", "(", "self", ")", "(", "resized_data", ",", "size", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.ke.KES.transpose": [[58, 73], ["ke.KES.kes_y.clone", "torch.cat", "NotImplementedError", "type", "type"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat"], ["", "def", "transpose", "(", "self", ",", "method", ")", ":", "\n", "        ", "if", "method", "not", "in", "(", "FLIP_LEFT_RIGHT", ",", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Only FLIP_LEFT_RIGHT implemented\"", ")", "\n", "\n", "", "flip_inds", "=", "type", "(", "self", ")", ".", "FLIP_INDS", "\n", "flipped_data_x", "=", "self", ".", "kes_x", "[", ":", ",", "flip_inds", "]", "\n", "width", "=", "self", ".", "size", "[", "0", "]", "\n", "TO_REMOVE", "=", "1", "\n", "# Flip x coordinates", "\n", "flipped_data_x", "[", "...", ",", ":", "]", "=", "width", "-", "flipped_data_x", "[", "...", ",", ":", "]", "-", "TO_REMOVE", "\n", "\n", "flipped_data_y", "=", "self", ".", "kes_y", ".", "clone", "(", ")", "\n", "flipped_data", "=", "torch", ".", "cat", "(", "(", "flipped_data_x", ",", "flipped_data_y", ")", ",", "dim", "=", "-", "2", ")", "\n", "return", "type", "(", "self", ")", "(", "flipped_data", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.ke.KES.to": [[74, 76], ["type", "ke.KES.kes.to"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", "(", "self", ".", "kes", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.ke.KES.__getitem__": [[77, 79], ["type"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", "(", "self", ".", "kes", "[", "item", "]", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.ke.KES.__repr__": [[80, 87], ["len", "len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "s", "+=", "'num_instances_x={}, '", ".", "format", "(", "len", "(", "self", ".", "kes_x", ")", ")", "\n", "s", "+=", "'num_instances_y={}, '", ".", "format", "(", "len", "(", "self", ".", "kes_y", ")", ")", "\n", "s", "+=", "'image_width={}, '", ".", "format", "(", "self", ".", "size", "[", "0", "]", ")", "\n", "s", "+=", "'image_height={})'", ".", "format", "(", "self", ".", "size", "[", "1", "]", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.ke._create_flip_indices": [[89, 95], ["flip_map.copy", "flip_map.copy.update", "torch.tensor", "names.index", "flip_map.items"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update"], ["", "", "def", "_create_flip_indices", "(", "names", ",", "flip_map", ")", ":", "\n", "    ", "full_flip_map", "=", "flip_map", ".", "copy", "(", ")", "\n", "full_flip_map", ".", "update", "(", "{", "v", ":", "k", "for", "k", ",", "v", "in", "flip_map", ".", "items", "(", ")", "}", ")", "\n", "flipped_names", "=", "[", "i", "if", "i", "not", "in", "full_flip_map", "else", "full_flip_map", "[", "i", "]", "for", "i", "in", "names", "]", "\n", "flip_indices", "=", "[", "names", ".", "index", "(", "i", ")", "for", "i", "in", "flipped_names", "]", "\n", "return", "torch", ".", "tensor", "(", "flip_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.ke.kes_to_heat_map": [[123, 165], ["x.floor().long.floor().long", "y.floor().long.floor().long", "valid_loc_x.long", "valid_loc_y.long", "valid_mty.long.long", "rois.numel", "valid_mty.long.sum", "rois.new().long", "rois.new().long", "x.floor().long.floor", "y.floor().long.floor", "rois.new", "rois.new"], "function", ["None"], ["def", "kes_to_heat_map", "(", "kes_x", ",", "kes_y", ",", "mty", ",", "rois", ",", "heatmap_size", ")", ":", "\n", "    ", "if", "rois", ".", "numel", "(", ")", "==", "0", ":", "\n", "        ", "return", "rois", ".", "new", "(", ")", ".", "long", "(", ")", ",", "rois", ".", "new", "(", ")", ".", "long", "(", ")", "\n", "", "offset_x", "=", "rois", "[", ":", ",", "0", "]", "\n", "offset_y", "=", "rois", "[", ":", ",", "1", "]", "\n", "scale_x", "=", "heatmap_size", "/", "(", "rois", "[", ":", ",", "2", "]", "-", "rois", "[", ":", ",", "0", "]", ")", "\n", "scale_y", "=", "heatmap_size", "/", "(", "rois", "[", ":", ",", "3", "]", "-", "rois", "[", ":", ",", "1", "]", ")", "\n", "\n", "offset_x", "=", "offset_x", "[", ":", ",", "None", "]", "\n", "offset_y", "=", "offset_y", "[", ":", ",", "None", "]", "\n", "scale_x", "=", "scale_x", "[", ":", ",", "None", "]", "\n", "scale_y", "=", "scale_y", "[", ":", ",", "None", "]", "\n", "\n", "x", "=", "kes_x", "[", "...", ",", "0", "]", "\n", "y", "=", "kes_y", "[", "...", ",", "0", "]", "\n", "\n", "x_boundary_inds", "=", "x", "==", "rois", "[", ":", ",", "2", "]", "[", ":", ",", "None", "]", "\n", "y_boundary_inds", "=", "y", "==", "rois", "[", ":", ",", "3", "]", "[", ":", ",", "None", "]", "\n", "\n", "x", "=", "(", "x", "-", "offset_x", ")", "*", "scale_x", "\n", "x", "=", "x", ".", "floor", "(", ")", ".", "long", "(", ")", "\n", "y", "=", "(", "y", "-", "offset_y", ")", "*", "scale_y", "\n", "y", "=", "y", ".", "floor", "(", ")", ".", "long", "(", ")", "\n", "\n", "x", "[", "x_boundary_inds", "]", "=", "heatmap_size", "-", "1", "\n", "y", "[", "y_boundary_inds", "]", "=", "heatmap_size", "-", "1", "\n", "\n", "valid_loc_x", "=", "(", "x", ">=", "0", ")", "&", "(", "x", "<", "heatmap_size", ")", "\n", "valid_x", "=", "(", "valid_loc_x", ")", ".", "long", "(", ")", "\n", "\n", "valid_loc_y", "=", "(", "y", ">=", "0", ")", "&", "(", "y", "<", "heatmap_size", ")", "\n", "valid_y", "=", "(", "valid_loc_y", ")", ".", "long", "(", ")", "\n", "\n", "valid_mty", "=", "(", "(", "x", ">=", "0", ")", "&", "(", "x", "<", "heatmap_size", ")", ")", "&", "(", "(", "y", ">=", "0", ")", "&", "(", "y", "<", "heatmap_size", ")", ")", "\n", "valid_mty", "=", "valid_mty", ".", "sum", "(", "dim", "=", "1", ")", ">", "0", "\n", "valid_mty", "=", "(", "valid_mty", ")", ".", "long", "(", ")", "\n", "\n", "heatmap_x", "=", "x", "\n", "heatmap_y", "=", "y", "\n", "\n", "mty", "=", "mty", "\n", "return", "heatmap_x", ",", "heatmap_y", ",", "valid_x", ",", "valid_y", ",", "mty", ",", "valid_mty", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.image_list.ImageList.__init__": [[15, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tensors", ",", "image_sizes", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            tensors (tensor)\n            image_sizes (list[tuple[int, int]])\n        \"\"\"", "\n", "self", ".", "tensors", "=", "tensors", "\n", "self", ".", "image_sizes", "=", "image_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.image_list.ImageList.to": [[24, 27], ["image_list.ImageList.tensors.to", "image_list.ImageList"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "cast_tensor", "=", "self", ".", "tensors", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "ImageList", "(", "cast_tensor", ",", "self", ".", "image_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.image_list.to_image_list": [[29, 73], ["isinstance", "isinstance", "isinstance", "image_list.ImageList", "isinstance", "tensors.dim", "tensors.dim", "tuple", "tensors[].new().zero_", "zip", "image_list.ImageList", "TypeError", "list", "int", "int", "tuple", "pad_img[].copy_", "max", "len", "tensors[].new", "type", "zip", "math.ceil", "math.ceil"], "function", ["None"], ["", "", "def", "to_image_list", "(", "tensors", ",", "size_divisible", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    tensors can be an ImageList, a torch.Tensor or\n    an iterable of Tensors. It can't be a numpy array.\n    When tensors is an iterable of Tensors, it pads\n    the Tensors with zeros so that they have the same\n    shape\n    \"\"\"", "\n", "if", "isinstance", "(", "tensors", ",", "torch", ".", "Tensor", ")", "and", "size_divisible", ">", "0", ":", "\n", "        ", "tensors", "=", "[", "tensors", "]", "\n", "\n", "", "if", "isinstance", "(", "tensors", ",", "ImageList", ")", ":", "\n", "        ", "return", "tensors", "\n", "", "elif", "isinstance", "(", "tensors", ",", "torch", ".", "Tensor", ")", ":", "\n", "# single tensor shape can be inferred", "\n", "        ", "if", "tensors", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "tensors", "=", "tensors", "[", "None", "]", "\n", "", "assert", "tensors", ".", "dim", "(", ")", "==", "4", "\n", "image_sizes", "=", "[", "tensor", ".", "shape", "[", "-", "2", ":", "]", "for", "tensor", "in", "tensors", "]", "\n", "return", "ImageList", "(", "tensors", ",", "image_sizes", ")", "\n", "", "elif", "isinstance", "(", "tensors", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "max_size", "=", "tuple", "(", "max", "(", "s", ")", "for", "s", "in", "zip", "(", "*", "[", "img", ".", "shape", "for", "img", "in", "tensors", "]", ")", ")", "\n", "\n", "# TODO Ideally, just remove this and let me model handle arbitrary", "\n", "# input sizs", "\n", "if", "size_divisible", ">", "0", ":", "\n", "            ", "import", "math", "\n", "\n", "stride", "=", "size_divisible", "\n", "max_size", "=", "list", "(", "max_size", ")", "\n", "max_size", "[", "1", "]", "=", "int", "(", "math", ".", "ceil", "(", "max_size", "[", "1", "]", "/", "stride", ")", "*", "stride", ")", "\n", "max_size", "[", "2", "]", "=", "int", "(", "math", ".", "ceil", "(", "max_size", "[", "2", "]", "/", "stride", ")", "*", "stride", ")", "\n", "max_size", "=", "tuple", "(", "max_size", ")", "\n", "\n", "", "batch_shape", "=", "(", "len", "(", "tensors", ")", ",", ")", "+", "max_size", "\n", "batched_imgs", "=", "tensors", "[", "0", "]", ".", "new", "(", "*", "batch_shape", ")", ".", "zero_", "(", ")", "\n", "for", "img", ",", "pad_img", "in", "zip", "(", "tensors", ",", "batched_imgs", ")", ":", "\n", "            ", "pad_img", "[", ":", "img", ".", "shape", "[", "0", "]", ",", ":", "img", ".", "shape", "[", "1", "]", ",", ":", "img", ".", "shape", "[", "2", "]", "]", ".", "copy_", "(", "img", ")", "\n", "\n", "", "image_sizes", "=", "[", "im", ".", "shape", "[", "-", "2", ":", "]", "for", "im", "in", "tensors", "]", "\n", "\n", "return", "ImageList", "(", "batched_imgs", ",", "image_sizes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Unsupported type for to_image_list: {}\"", ".", "format", "(", "type", "(", "tensors", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.__init__": [[19, 38], ["torch.as_tensor", "isinstance", "torch.device", "torch.as_tensor.ndimension", "ValueError", "torch.as_tensor.size", "ValueError", "ValueError", "torch.as_tensor.ndimension", "torch.as_tensor.size"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "bbox", ",", "image_size", ",", "mode", "=", "\"xyxy\"", ")", ":", "\n", "        ", "device", "=", "bbox", ".", "device", "if", "isinstance", "(", "bbox", ",", "torch", ".", "Tensor", ")", "else", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "bbox", "=", "torch", ".", "as_tensor", "(", "bbox", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "if", "bbox", ".", "ndimension", "(", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"bbox should have 2 dimensions, got {}\"", ".", "format", "(", "bbox", ".", "ndimension", "(", ")", ")", "\n", ")", "\n", "", "if", "bbox", ".", "size", "(", "-", "1", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"last dimension of bbox should have a \"", "\n", "\"size of 4, got {}\"", ".", "format", "(", "bbox", ".", "size", "(", "-", "1", ")", ")", "\n", ")", "\n", "", "if", "mode", "not", "in", "(", "\"xyxy\"", ",", "\"xywh\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"mode should be 'xyxy' or 'xywh'\"", ")", "\n", "\n", "", "self", ".", "bbox", "=", "bbox", "\n", "self", ".", "size", "=", "image_size", "# (image_width, image_height)", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "extra_fields", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.add_field": [[39, 41], ["None"], "methods", ["None"], ["", "def", "add_field", "(", "self", ",", "field", ",", "field_data", ")", ":", "\n", "        ", "self", ".", "extra_fields", "[", "field", "]", "=", "field_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.get_field": [[42, 44], ["None"], "methods", ["None"], ["", "def", "get_field", "(", "self", ",", "field", ")", ":", "\n", "        ", "return", "self", ".", "extra_fields", "[", "field", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.has_field": [[45, 47], ["None"], "methods", ["None"], ["", "def", "has_field", "(", "self", ",", "field", ")", ":", "\n", "        ", "return", "field", "in", "self", ".", "extra_fields", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.fields": [[48, 50], ["list", "bounding_box.BoxList.extra_fields.keys"], "methods", ["None"], ["", "def", "fields", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "extra_fields", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList._copy_extra_fields": [[51, 54], ["bbox.extra_fields.items"], "methods", ["None"], ["", "def", "_copy_extra_fields", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "bbox", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "extra_fields", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert": [[55, 74], ["bounding_box.BoxList._split_into_xyxy", "bounding_box.BoxList._copy_extra_fields", "ValueError", "torch.cat", "bounding_box.BoxList", "torch.cat", "bounding_box.BoxList"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList._split_into_xyxy", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList._copy_extra_fields", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat"], ["", "", "def", "convert", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "not", "in", "(", "\"xyxy\"", ",", "\"xywh\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"mode should be 'xyxy' or 'xywh'\"", ")", "\n", "", "if", "mode", "==", "self", ".", "mode", ":", "\n", "            ", "return", "self", "\n", "# we only have two modes, so don't need to check", "\n", "# self.mode", "\n", "", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "self", ".", "_split_into_xyxy", "(", ")", "\n", "if", "mode", "==", "\"xyxy\"", ":", "\n", "            ", "bbox", "=", "torch", ".", "cat", "(", "(", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ")", ",", "dim", "=", "-", "1", ")", "\n", "bbox", "=", "BoxList", "(", "bbox", ",", "self", ".", "size", ",", "mode", "=", "mode", ")", "\n", "", "else", ":", "\n", "            ", "TO_REMOVE", "=", "1", "\n", "bbox", "=", "torch", ".", "cat", "(", "\n", "(", "xmin", ",", "ymin", ",", "xmax", "-", "xmin", "+", "TO_REMOVE", ",", "ymax", "-", "ymin", "+", "TO_REMOVE", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "bbox", "=", "BoxList", "(", "bbox", ",", "self", ".", "size", ",", "mode", "=", "mode", ")", "\n", "", "bbox", ".", "_copy_extra_fields", "(", "self", ")", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList._split_into_xyxy": [[75, 90], ["bounding_box.BoxList.bbox.split", "bounding_box.BoxList.bbox.split", "RuntimeError"], "methods", ["None"], ["", "def", "_split_into_xyxy", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "\"xyxy\"", ":", "\n", "            ", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "self", ".", "bbox", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "return", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "\n", "", "elif", "self", ".", "mode", "==", "\"xywh\"", ":", "\n", "            ", "TO_REMOVE", "=", "1", "\n", "xmin", ",", "ymin", ",", "w", ",", "h", "=", "self", ".", "bbox", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "return", "(", "\n", "xmin", ",", "\n", "ymin", ",", "\n", "xmin", "+", "(", "w", "-", "TO_REMOVE", ")", ".", "clamp", "(", "min", "=", "0", ")", ",", "\n", "ymin", "+", "(", "h", "-", "TO_REMOVE", ")", ".", "clamp", "(", "min", "=", "0", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Should not be here\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.resize": [[91, 128], ["tuple", "bounding_box.BoxList._split_into_xyxy", "torch.cat", "bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "bounding_box.BoxList.convert", "bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "bounding_box.BoxList.add_field", "bounding_box.BoxList.add_field", "isinstance", "v.resize.resize.resize", "float", "float", "zip", "isinstance", "v.resize.resize.resize"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList._split_into_xyxy", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize"], ["", "", "def", "resize", "(", "self", ",", "size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Returns a resized copy of this bounding box\n\n        :param size: The requested size in pixels, as a 2-tuple:\n            (width, height).\n        \"\"\"", "\n", "\n", "ratios", "=", "tuple", "(", "float", "(", "s", ")", "/", "float", "(", "s_orig", ")", "for", "s", ",", "s_orig", "in", "zip", "(", "size", ",", "self", ".", "size", ")", ")", "\n", "if", "ratios", "[", "0", "]", "==", "ratios", "[", "1", "]", ":", "\n", "            ", "ratio", "=", "ratios", "[", "0", "]", "\n", "scaled_box", "=", "self", ".", "bbox", "*", "ratio", "\n", "bbox", "=", "BoxList", "(", "scaled_box", ",", "size", ",", "mode", "=", "self", ".", "mode", ")", "\n", "# bbox._copy_extra_fields(self)", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "v", "=", "v", ".", "resize", "(", "size", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "bbox", ".", "add_field", "(", "k", ",", "v", ")", "\n", "", "return", "bbox", "\n", "\n", "", "ratio_width", ",", "ratio_height", "=", "ratios", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "self", ".", "_split_into_xyxy", "(", ")", "\n", "scaled_xmin", "=", "xmin", "*", "ratio_width", "\n", "scaled_xmax", "=", "xmax", "*", "ratio_width", "\n", "scaled_ymin", "=", "ymin", "*", "ratio_height", "\n", "scaled_ymax", "=", "ymax", "*", "ratio_height", "\n", "scaled_box", "=", "torch", ".", "cat", "(", "\n", "(", "scaled_xmin", ",", "scaled_ymin", ",", "scaled_xmax", ",", "scaled_ymax", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "bbox", "=", "BoxList", "(", "scaled_box", ",", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "# bbox._copy_extra_fields(self)", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "resize", "(", "size", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "bbox", ".", "add_field", "(", "k", ",", "v", ")", "\n", "\n", "", "return", "bbox", ".", "convert", "(", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.transpose": [[129, 166], ["bounding_box.BoxList._split_into_xyxy", "torch.cat", "bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "bounding_box.BoxList.convert", "NotImplementedError", "bounding_box.BoxList.add_field", "isinstance", "v.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList._split_into_xyxy", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.transpose"], ["", "def", "transpose", "(", "self", ",", "method", ")", ":", "\n", "        ", "\"\"\"\n        Transpose bounding box (flip or rotate in 90 degree steps)\n        :param method: One of :py:attr:`PIL.Image.FLIP_LEFT_RIGHT`,\n          :py:attr:`PIL.Image.FLIP_TOP_BOTTOM`, :py:attr:`PIL.Image.ROTATE_90`,\n          :py:attr:`PIL.Image.ROTATE_180`, :py:attr:`PIL.Image.ROTATE_270`,\n          :py:attr:`PIL.Image.TRANSPOSE` or :py:attr:`PIL.Image.TRANSVERSE`.\n        \"\"\"", "\n", "if", "method", "not", "in", "(", "FLIP_LEFT_RIGHT", ",", "FLIP_TOP_BOTTOM", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Only FLIP_LEFT_RIGHT and FLIP_TOP_BOTTOM implemented\"", "\n", ")", "\n", "\n", "", "image_width", ",", "image_height", "=", "self", ".", "size", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "self", ".", "_split_into_xyxy", "(", ")", "\n", "if", "method", "==", "FLIP_LEFT_RIGHT", ":", "\n", "            ", "TO_REMOVE", "=", "1", "\n", "transposed_xmin", "=", "image_width", "-", "xmax", "-", "TO_REMOVE", "\n", "transposed_xmax", "=", "image_width", "-", "xmin", "-", "TO_REMOVE", "\n", "transposed_ymin", "=", "ymin", "\n", "transposed_ymax", "=", "ymax", "\n", "", "elif", "method", "==", "FLIP_TOP_BOTTOM", ":", "\n", "            ", "transposed_xmin", "=", "xmin", "\n", "transposed_xmax", "=", "xmax", "\n", "transposed_ymin", "=", "image_height", "-", "ymax", "\n", "transposed_ymax", "=", "image_height", "-", "ymin", "\n", "\n", "", "transposed_boxes", "=", "torch", ".", "cat", "(", "\n", "(", "transposed_xmin", ",", "transposed_ymin", ",", "transposed_xmax", ",", "transposed_ymax", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "bbox", "=", "BoxList", "(", "transposed_boxes", ",", "self", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "# bbox._copy_extra_fields(self)", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "transpose", "(", "method", ")", "\n", "", "bbox", ".", "add_field", "(", "k", ",", "v", ")", "\n", "", "return", "bbox", ".", "convert", "(", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.crop": [[167, 199], ["bounding_box.BoxList._split_into_xyxy", "torch.cat", "bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "bounding_box.BoxList.convert", "bounding_box.BoxList.add_field", "isinstance", "v.crop.crop.crop"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList._split_into_xyxy", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.crop"], ["", "def", "crop", "(", "self", ",", "box", ",", "remove_empty", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Cropss a rectangular region from this bounding box. The box is a\n        4-tuple defining the left, upper, right, and lower pixel\n        coordinate.\n        \"\"\"", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "self", ".", "_split_into_xyxy", "(", ")", "\n", "w", ",", "h", "=", "box", "[", "2", "]", "-", "box", "[", "0", "]", ",", "box", "[", "3", "]", "-", "box", "[", "1", "]", "\n", "cropped_xmin", "=", "(", "xmin", "-", "box", "[", "0", "]", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "w", ")", "\n", "cropped_ymin", "=", "(", "ymin", "-", "box", "[", "1", "]", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "h", ")", "\n", "cropped_xmax", "=", "(", "xmax", "-", "box", "[", "0", "]", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "w", ")", "\n", "cropped_ymax", "=", "(", "ymax", "-", "box", "[", "1", "]", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "h", ")", "\n", "\n", "# TODO should I filter empty boxes here?", "\n", "if", "False", ":", "\n", "            ", "is_empty", "=", "(", "cropped_xmin", "==", "cropped_xmax", ")", "|", "(", "cropped_ymin", "==", "cropped_ymax", ")", "\n", "\n", "", "cropped_box", "=", "torch", ".", "cat", "(", "\n", "(", "cropped_xmin", ",", "cropped_ymin", ",", "cropped_xmax", ",", "cropped_ymax", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "bbox", "=", "BoxList", "(", "cropped_box", ",", "(", "w", ",", "h", ")", ",", "mode", "=", "\"xyxy\"", ")", "\n", "# bbox._copy_extra_fields(self)", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "crop", "(", "box", ")", "\n", "", "bbox", ".", "add_field", "(", "k", ",", "v", ")", "\n", "\n", "", "if", "remove_empty", ":", "\n", "            ", "box", "=", "bbox", ".", "bbox", "\n", "keep", "=", "(", "box", "[", ":", ",", "3", "]", ">", "box", "[", ":", ",", "1", "]", ")", "&", "(", "box", "[", ":", ",", "2", "]", ">", "box", "[", ":", ",", "0", "]", ")", "\n", "bbox", "=", "bbox", "[", "keep", "]", "\n", "", "return", "bbox", ".", "convert", "(", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.to": [[202, 209], ["bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "bounding_box.BoxList.bbox.to", "hasattr", "bounding_box.BoxList.add_field", "v.to.to.to"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "bbox", "=", "BoxList", "(", "self", ".", "bbox", ".", "to", "(", "device", ")", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "v", ",", "\"to\"", ")", ":", "\n", "                ", "v", "=", "v", ".", "to", "(", "device", ")", "\n", "", "bbox", ".", "add_field", "(", "k", ",", "v", ")", "\n", "", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.__getitem__": [[210, 215], ["bounding_box.BoxList", "bounding_box.BoxList.extra_fields.items", "bounding_box.BoxList.add_field"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "bbox", "=", "BoxList", "(", "self", ".", "bbox", "[", "item", "]", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "bbox", ".", "add_field", "(", "k", ",", "v", "[", "item", "]", ")", "\n", "", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.__len__": [[216, 218], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "bbox", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.clip_to_image": [[219, 230], ["bounding_box.BoxList.bbox[].clamp_", "bounding_box.BoxList.bbox[].clamp_", "bounding_box.BoxList.bbox[].clamp_", "bounding_box.BoxList.bbox[].clamp_"], "methods", ["None"], ["", "def", "clip_to_image", "(", "self", ",", "remove_empty", "=", "True", ")", ":", "\n", "        ", "TO_REMOVE", "=", "1", "\n", "self", ".", "bbox", "[", ":", ",", "0", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "self", ".", "size", "[", "0", "]", "-", "TO_REMOVE", ")", "\n", "self", ".", "bbox", "[", ":", ",", "1", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "self", ".", "size", "[", "1", "]", "-", "TO_REMOVE", ")", "\n", "self", ".", "bbox", "[", ":", ",", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "self", ".", "size", "[", "0", "]", "-", "TO_REMOVE", ")", "\n", "self", ".", "bbox", "[", ":", ",", "3", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "self", ".", "size", "[", "1", "]", "-", "TO_REMOVE", ")", "\n", "if", "remove_empty", ":", "\n", "            ", "box", "=", "self", ".", "bbox", "\n", "keep", "=", "(", "box", "[", ":", ",", "3", "]", ">", "box", "[", ":", ",", "1", "]", ")", "&", "(", "box", "[", ":", ",", "2", "]", ">", "box", "[", ":", ",", "0", "]", ")", "\n", "return", "self", "[", "keep", "]", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.area": [[231, 242], ["RuntimeError"], "methods", ["None"], ["", "def", "area", "(", "self", ")", ":", "\n", "        ", "box", "=", "self", ".", "bbox", "\n", "if", "self", ".", "mode", "==", "\"xyxy\"", ":", "\n", "            ", "TO_REMOVE", "=", "1", "\n", "area", "=", "(", "box", "[", ":", ",", "2", "]", "-", "box", "[", ":", ",", "0", "]", "+", "TO_REMOVE", ")", "*", "(", "box", "[", ":", ",", "3", "]", "-", "box", "[", ":", ",", "1", "]", "+", "TO_REMOVE", ")", "\n", "", "elif", "self", ".", "mode", "==", "\"xywh\"", ":", "\n", "            ", "area", "=", "box", "[", ":", ",", "2", "]", "*", "box", "[", ":", ",", "3", "]", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Should not be here\"", ")", "\n", "\n", "", "return", "area", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.copy_with_fields": [[243, 253], ["bounding_box.BoxList", "isinstance", "bounding_box.BoxList.has_field", "bounding_box.BoxList.add_field", "bounding_box.BoxList.get_field", "KeyError"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.has_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["", "def", "copy_with_fields", "(", "self", ",", "fields", ",", "skip_missing", "=", "False", ")", ":", "\n", "        ", "bbox", "=", "BoxList", "(", "self", ".", "bbox", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "if", "not", "isinstance", "(", "fields", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "fields", "=", "[", "fields", "]", "\n", "", "for", "field", "in", "fields", ":", "\n", "            ", "if", "self", ".", "has_field", "(", "field", ")", ":", "\n", "                ", "bbox", ".", "add_field", "(", "field", ",", "self", ".", "get_field", "(", "field", ")", ")", "\n", "", "elif", "not", "skip_missing", ":", "\n", "                ", "raise", "KeyError", "(", "\"Field '{}' not found in {}\"", ".", "format", "(", "field", ",", "self", ")", ")", "\n", "", "", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.__repr__": [[254, 261], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "s", "+=", "\"num_boxes={}, \"", ".", "format", "(", "len", "(", "self", ")", ")", "\n", "s", "+=", "\"image_width={}, \"", ".", "format", "(", "self", ".", "size", "[", "0", "]", ")", "\n", "s", "+=", "\"image_height={}, \"", ".", "format", "(", "self", ".", "size", "[", "1", "]", ")", "\n", "s", "+=", "\"mode={})\"", ".", "format", "(", "self", ".", "mode", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.boxlist_nms": [[9, 32], ["boxlist.convert.convert", "boxlist.convert.get_field", "maskrcnn_benchmark.layers.nms", "boxlist.convert.convert"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert"], ["def", "boxlist_nms", "(", "boxlist", ",", "nms_thresh", ",", "max_proposals", "=", "-", "1", ",", "score_field", "=", "\"scores\"", ")", ":", "\n", "    ", "\"\"\"\n    Performs non-maximum suppression on a boxlist, with scores specified\n    in a boxlist field via score_field.\n\n    Arguments:\n        boxlist(BoxList)\n        nms_thresh (float)\n        max_proposals (int): if > 0, then only the top max_proposals are kept\n            after non-maximum suppression\n        score_field (str)\n    \"\"\"", "\n", "if", "nms_thresh", "<=", "0", ":", "\n", "        ", "return", "boxlist", "\n", "", "mode", "=", "boxlist", ".", "mode", "\n", "boxlist", "=", "boxlist", ".", "convert", "(", "\"xyxy\"", ")", "\n", "boxes", "=", "boxlist", ".", "bbox", "\n", "score", "=", "boxlist", ".", "get_field", "(", "score_field", ")", "\n", "keep", "=", "_box_nms", "(", "boxes", ",", "score", ",", "nms_thresh", ")", "\n", "if", "max_proposals", ">", "0", ":", "\n", "        ", "keep", "=", "keep", "[", ":", "max_proposals", "]", "\n", "", "boxlist", "=", "boxlist", "[", "keep", "]", "\n", "return", "boxlist", ".", "convert", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.remove_small_boxes": [[34, 49], ["xywh_boxes.unbind", "boxlist.convert"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert"], ["", "def", "remove_small_boxes", "(", "boxlist", ",", "min_size", ")", ":", "\n", "    ", "\"\"\"\n    Only keep boxes with both sides >= min_size\n\n    Arguments:\n        boxlist (Boxlist)\n        min_size (int)\n    \"\"\"", "\n", "# TODO maybe add an API for querying the ws / hs", "\n", "xywh_boxes", "=", "boxlist", ".", "convert", "(", "\"xywh\"", ")", ".", "bbox", "\n", "_", ",", "_", ",", "ws", ",", "hs", "=", "xywh_boxes", ".", "unbind", "(", "dim", "=", "1", ")", "\n", "keep", "=", "(", "\n", "(", "ws", ">=", "min_size", ")", "&", "(", "hs", ">=", "min_size", ")", "\n", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "return", "boxlist", "[", "keep", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.boxlist_iou": [[53, 89], ["len", "len", "boxlist1.area", "boxlist2.area", "torch.max", "torch.min", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.area", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.area"], ["", "def", "boxlist_iou", "(", "boxlist1", ",", "boxlist2", ")", ":", "\n", "    ", "\"\"\"Compute the intersection over union of two set of boxes.\n    The box order must be (xmin, ymin, xmax, ymax).\n\n    Arguments:\n      box1: (BoxList) bounding boxes, sized [N,4].\n      box2: (BoxList) bounding boxes, sized [M,4].\n\n    Returns:\n      (tensor) iou, sized [N,M].\n\n    Reference:\n      https://github.com/chainer/chainercv/blob/master/chainercv/utils/bbox/bbox_iou.py\n    \"\"\"", "\n", "if", "boxlist1", ".", "size", "!=", "boxlist2", ".", "size", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"boxlists should have same image size, got {}, {}\"", ".", "format", "(", "boxlist1", ",", "boxlist2", ")", ")", "\n", "\n", "", "N", "=", "len", "(", "boxlist1", ")", "\n", "M", "=", "len", "(", "boxlist2", ")", "\n", "\n", "area1", "=", "boxlist1", ".", "area", "(", ")", "\n", "area2", "=", "boxlist2", ".", "area", "(", ")", "\n", "\n", "box1", ",", "box2", "=", "boxlist1", ".", "bbox", ",", "boxlist2", ".", "bbox", "\n", "\n", "lt", "=", "torch", ".", "max", "(", "box1", "[", ":", ",", "None", ",", ":", "2", "]", ",", "box2", "[", ":", ",", ":", "2", "]", ")", "# [N,M,2]", "\n", "rb", "=", "torch", ".", "min", "(", "box1", "[", ":", ",", "None", ",", "2", ":", "]", ",", "box2", "[", ":", ",", "2", ":", "]", ")", "# [N,M,2]", "\n", "\n", "TO_REMOVE", "=", "1", "\n", "\n", "wh", "=", "(", "rb", "-", "lt", "+", "TO_REMOVE", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [N,M,2]", "\n", "inter", "=", "wh", "[", ":", ",", ":", ",", "0", "]", "*", "wh", "[", ":", ",", ":", ",", "1", "]", "# [N,M]", "\n", "\n", "iou", "=", "inter", "/", "(", "area1", "[", ":", ",", "None", "]", "+", "area2", "-", "inter", ")", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops._cat": [[92, 100], ["isinstance", "torch.cat", "len"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat"], ["", "def", "_cat", "(", "tensors", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Efficient version of torch.cat that avoids a copy if there is only a single element in a list\n    \"\"\"", "\n", "assert", "isinstance", "(", "tensors", ",", "(", "list", ",", "tuple", ")", ")", "\n", "if", "len", "(", "tensors", ")", "==", "1", ":", "\n", "        ", "return", "tensors", "[", "0", "]", "\n", "", "return", "torch", ".", "cat", "(", "tensors", ",", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.cat_boxlist": [[102, 129], ["isinstance", "all", "all", "all", "set", "all", "bounding_box.BoxList", "bboxes[].fields", "boxlist_ops._cat", "boxlist_ops._cat", "bounding_box.BoxList.add_field", "isinstance", "set", "bbox.get_field", "bbox.fields"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.fields", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops._cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops._cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.fields"], ["", "def", "cat_boxlist", "(", "bboxes", ")", ":", "\n", "    ", "\"\"\"\n    Concatenates a list of BoxList (having the same image size) into a\n    single BoxList\n\n    Arguments:\n        bboxes (list[BoxList])\n    \"\"\"", "\n", "assert", "isinstance", "(", "bboxes", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "all", "(", "isinstance", "(", "bbox", ",", "BoxList", ")", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "size", "=", "bboxes", "[", "0", "]", ".", "size", "\n", "assert", "all", "(", "bbox", ".", "size", "==", "size", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "mode", "=", "bboxes", "[", "0", "]", ".", "mode", "\n", "assert", "all", "(", "bbox", ".", "mode", "==", "mode", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "fields", "=", "set", "(", "bboxes", "[", "0", "]", ".", "fields", "(", ")", ")", "\n", "assert", "all", "(", "set", "(", "bbox", ".", "fields", "(", ")", ")", "==", "fields", "for", "bbox", "in", "bboxes", ")", "\n", "\n", "cat_boxes", "=", "BoxList", "(", "_cat", "(", "[", "bbox", ".", "bbox", "for", "bbox", "in", "bboxes", "]", ",", "dim", "=", "0", ")", ",", "size", ",", "mode", ")", "\n", "\n", "for", "field", "in", "fields", ":", "\n", "        ", "data", "=", "_cat", "(", "[", "bbox", ".", "get_field", "(", "field", ")", "for", "bbox", "in", "bboxes", "]", ",", "dim", "=", "0", ")", "\n", "cat_boxes", ".", "add_field", "(", "field", ",", "data", ")", "\n", "\n", "", "return", "cat_boxes", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.mty.MTY.__init__": [[14, 26], ["torch.as_tensor", "str", "isinstance", "torch.device", "len", "torch.as_tensor.size", "torch.as_tensor.size"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mty", ",", "size", ",", "mode", "=", "None", ")", ":", "\n", "# FIXME remove check once we have better integration with device", "\n", "# in my version this would consistently return a CPU tensor", "\n", "        ", "device", "=", "mty", ".", "device", "if", "isinstance", "(", "mty", ",", "torch", ".", "Tensor", ")", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "mty", "=", "torch", ".", "as_tensor", "(", "mty", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "device", ")", "\n", "\n", "# TODO should I split them?", "\n", "assert", "(", "len", "(", "mty", ".", "size", "(", ")", ")", "==", "1", ")", ",", "str", "(", "mty", ".", "size", "(", ")", ")", "\n", "self", ".", "mty", "=", "mty", "\n", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.mty.MTY.crop": [[27, 30], ["type"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "box", ")", ":", "\n", "        ", "w", ",", "h", "=", "box", "[", "2", "]", "-", "box", "[", "0", "]", ",", "box", "[", "3", "]", "-", "box", "[", "1", "]", "\n", "return", "type", "(", "self", ")", "(", "self", ".", "mty", ",", "(", "w", ",", "h", ")", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.mty.MTY.resize": [[31, 33], ["type"], "methods", ["None"], ["", "def", "resize", "(", "self", ",", "size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", "(", "self", ".", "mty", ",", "size", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.mty.MTY.transpose": [[34, 47], ["mty.MTY.mty.clone", "range", "NotImplementedError", "revs.reverse", "aty.index", "type", "mty.MTY.mty.size"], "methods", ["None"], ["", "def", "transpose", "(", "self", ",", "method", ")", ":", "\n", "        ", "if", "method", "not", "in", "(", "FLIP_LEFT_RIGHT", ",", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Only FLIP_LEFT_RIGHT implemented\"", ")", "\n", "\n", "", "flipped_data", "=", "self", ".", "mty", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "mty", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "            ", "revs", "=", "[", "it", "for", "it", "in", "aty", "[", "self", ".", "mty", "[", "i", "]", "]", "]", "\n", "revs", ".", "reverse", "(", ")", "\n", "flip_type", "=", "aty", ".", "index", "(", "revs", ")", "\n", "flipped_data", "[", "i", "]", "=", "flip_type", "\n", "\n", "", "return", "type", "(", "self", ")", "(", "flipped_data", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.mty.MTY.to": [[48, 50], ["type", "mty.MTY.mty.to"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", "(", "self", ".", "mty", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.mty.MTY.__getitem__": [[51, 53], ["type"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", "(", "self", ".", "mty", "[", "item", "]", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.mty.MTY.__repr__": [[54, 60], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "s", "+=", "'num_instances={}, '", ".", "format", "(", "len", "(", "self", ".", "mty", ")", ")", "\n", "s", "+=", "'image_width={}, '", ".", "format", "(", "self", ".", "size", "[", "0", "]", ")", "\n", "s", "+=", "'image_height={})'", ".", "format", "(", "self", ".", "size", "[", "1", "]", ")", "\n", "return", "s", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.__init__": [[9, 25], ["torch.as_tensor", "isinstance", "torch.device", "keypoints.view.view.view"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "keypoints", ",", "size", ",", "mode", "=", "None", ")", ":", "\n", "# FIXME remove check once we have better integration with device", "\n", "# in my version this would consistently return a CPU tensor", "\n", "        ", "device", "=", "keypoints", ".", "device", "if", "isinstance", "(", "keypoints", ",", "torch", ".", "Tensor", ")", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "keypoints", "=", "torch", ".", "as_tensor", "(", "keypoints", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "num_keypoints", "=", "keypoints", ".", "shape", "[", "0", "]", "\n", "if", "num_keypoints", ":", "\n", "            ", "keypoints", "=", "keypoints", ".", "view", "(", "num_keypoints", ",", "-", "1", ",", "3", ")", "\n", "\n", "# TODO should I split them?", "\n", "# self.visibility = keypoints[..., 2]", "\n", "", "self", ".", "keypoints", "=", "keypoints", "# [..., :2]", "\n", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "extra_fields", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.crop": [[26, 28], ["NotImplementedError"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "box", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize": [[29, 39], ["tuple", "keypoint.Keypoints.keypoints.clone", "keypoint.Keypoints.extra_fields.items", "type", "keypoints.add_field", "float", "float", "zip"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field"], ["", "def", "resize", "(", "self", ",", "size", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "ratios", "=", "tuple", "(", "float", "(", "s", ")", "/", "float", "(", "s_orig", ")", "for", "s", ",", "s_orig", "in", "zip", "(", "size", ",", "self", ".", "size", ")", ")", "\n", "ratio_w", ",", "ratio_h", "=", "ratios", "\n", "resized_data", "=", "self", ".", "keypoints", ".", "clone", "(", ")", "\n", "resized_data", "[", "...", ",", "0", "]", "*=", "ratio_w", "\n", "resized_data", "[", "...", ",", "1", "]", "*=", "ratio_h", "\n", "keypoints", "=", "type", "(", "self", ")", "(", "resized_data", ",", "size", ",", "self", ".", "mode", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "keypoints", ".", "add_field", "(", "k", ",", "v", ")", "\n", "", "return", "keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.transpose": [[40, 60], ["keypoint.Keypoints.extra_fields.items", "NotImplementedError", "type", "type", "keypoints.add_field"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field"], ["", "def", "transpose", "(", "self", ",", "method", ")", ":", "\n", "        ", "if", "method", "not", "in", "(", "FLIP_LEFT_RIGHT", ",", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Only FLIP_LEFT_RIGHT implemented\"", ")", "\n", "\n", "", "flip_inds", "=", "type", "(", "self", ")", ".", "FLIP_INDS", "\n", "flipped_data", "=", "self", ".", "keypoints", "[", ":", ",", "flip_inds", "]", "\n", "width", "=", "self", ".", "size", "[", "0", "]", "\n", "TO_REMOVE", "=", "1", "\n", "# Flip x coordinates", "\n", "flipped_data", "[", "...", ",", "0", "]", "=", "width", "-", "flipped_data", "[", "...", ",", "0", "]", "-", "TO_REMOVE", "\n", "\n", "# Maintain COCO convention that if visibility == 0, then x, y = 0", "\n", "inds", "=", "flipped_data", "[", "...", ",", "2", "]", "==", "0", "\n", "flipped_data", "[", "inds", "]", "=", "0", "\n", "\n", "keypoints", "=", "type", "(", "self", ")", "(", "flipped_data", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "keypoints", ".", "add_field", "(", "k", ",", "v", ")", "\n", "", "return", "keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to": [[61, 68], ["keypoint.Keypoints.extra_fields.items", "type", "keypoint.Keypoints.keypoints.to", "hasattr", "keypoints.add_field", "v.to.to.to"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "keypoints", "=", "type", "(", "self", ")", "(", "self", ".", "keypoints", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "v", ",", "\"to\"", ")", ":", "\n", "                ", "v", "=", "v", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "keypoints", ".", "add_field", "(", "k", ",", "v", ")", "\n", "", "return", "keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.__getitem__": [[69, 74], ["keypoint.Keypoints.extra_fields.items", "type", "keypoints.add_field"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "keypoints", "=", "type", "(", "self", ")", "(", "self", ".", "keypoints", "[", "item", "]", ",", "self", ".", "size", ",", "self", ".", "mode", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "keypoints", ".", "add_field", "(", "k", ",", "v", "[", "item", "]", ")", "\n", "", "return", "keypoints", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field": [[75, 77], ["None"], "methods", ["None"], ["", "def", "add_field", "(", "self", ",", "field", ",", "field_data", ")", ":", "\n", "        ", "self", ".", "extra_fields", "[", "field", "]", "=", "field_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field": [[78, 80], ["None"], "methods", ["None"], ["", "def", "get_field", "(", "self", ",", "field", ")", ":", "\n", "        ", "return", "self", ".", "extra_fields", "[", "field", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.__repr__": [[81, 87], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "s", "+=", "'num_instances={}, '", ".", "format", "(", "len", "(", "self", ".", "keypoints", ")", ")", "\n", "s", "+=", "'image_width={}, '", ".", "format", "(", "self", ".", "size", "[", "0", "]", ")", "\n", "s", "+=", "'image_height={})'", ".", "format", "(", "self", ".", "size", "[", "1", "]", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint._create_flip_indices": [[89, 95], ["flip_map.copy", "flip_map.copy.update", "torch.tensor", "names.index", "flip_map.items"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update"], ["", "", "def", "_create_flip_indices", "(", "names", ",", "flip_map", ")", ":", "\n", "    ", "full_flip_map", "=", "flip_map", ".", "copy", "(", ")", "\n", "full_flip_map", ".", "update", "(", "{", "v", ":", "k", "for", "k", ",", "v", "in", "flip_map", ".", "items", "(", ")", "}", ")", "\n", "flipped_names", "=", "[", "i", "if", "i", "not", "in", "full_flip_map", "else", "full_flip_map", "[", "i", "]", "for", "i", "in", "names", "]", "\n", "flip_indices", "=", "[", "names", ".", "index", "(", "i", ")", "for", "i", "in", "flipped_names", "]", "\n", "return", "torch", ".", "tensor", "(", "flip_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.kp_connections": [[131, 150], ["keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index"], "function", ["None"], ["def", "kp_connections", "(", "keypoints", ")", ":", "\n", "    ", "kp_lines", "=", "[", "\n", "[", "keypoints", ".", "index", "(", "'left_eye'", ")", ",", "keypoints", ".", "index", "(", "'right_eye'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'left_eye'", ")", ",", "keypoints", ".", "index", "(", "'nose'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_eye'", ")", ",", "keypoints", ".", "index", "(", "'nose'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_eye'", ")", ",", "keypoints", ".", "index", "(", "'right_ear'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'left_eye'", ")", ",", "keypoints", ".", "index", "(", "'left_ear'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_shoulder'", ")", ",", "keypoints", ".", "index", "(", "'right_elbow'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_elbow'", ")", ",", "keypoints", ".", "index", "(", "'right_wrist'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'left_shoulder'", ")", ",", "keypoints", ".", "index", "(", "'left_elbow'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'left_elbow'", ")", ",", "keypoints", ".", "index", "(", "'left_wrist'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_hip'", ")", ",", "keypoints", ".", "index", "(", "'right_knee'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_knee'", ")", ",", "keypoints", ".", "index", "(", "'right_ankle'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'left_hip'", ")", ",", "keypoints", ".", "index", "(", "'left_knee'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'left_knee'", ")", ",", "keypoints", ".", "index", "(", "'left_ankle'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_shoulder'", ")", ",", "keypoints", ".", "index", "(", "'left_shoulder'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_hip'", ")", ",", "keypoints", ".", "index", "(", "'left_hip'", ")", "]", ",", "\n", "]", "\n", "return", "kp_lines", "\n", "", "PersonKeypoints", ".", "CONNECTIONS", "=", "kp_connections", "(", "PersonKeypoints", ".", "NAMES", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.keypoints_to_heat_map": [[154, 189], ["x.floor().long.floor().long", "y.floor().long.floor().long", "rois.numel", "rois.new().long", "rois.new().long", "x.floor().long.floor", "y.floor().long.floor", "rois.new", "rois.new"], "function", ["None"], ["def", "keypoints_to_heat_map", "(", "keypoints", ",", "rois", ",", "heatmap_size", ")", ":", "\n", "    ", "if", "rois", ".", "numel", "(", ")", "==", "0", ":", "\n", "        ", "return", "rois", ".", "new", "(", ")", ".", "long", "(", ")", ",", "rois", ".", "new", "(", ")", ".", "long", "(", ")", "\n", "", "offset_x", "=", "rois", "[", ":", ",", "0", "]", "\n", "offset_y", "=", "rois", "[", ":", ",", "1", "]", "\n", "scale_x", "=", "heatmap_size", "/", "(", "rois", "[", ":", ",", "2", "]", "-", "rois", "[", ":", ",", "0", "]", ")", "\n", "scale_y", "=", "heatmap_size", "/", "(", "rois", "[", ":", ",", "3", "]", "-", "rois", "[", ":", ",", "1", "]", ")", "\n", "\n", "offset_x", "=", "offset_x", "[", ":", ",", "None", "]", "\n", "offset_y", "=", "offset_y", "[", ":", ",", "None", "]", "\n", "scale_x", "=", "scale_x", "[", ":", ",", "None", "]", "\n", "scale_y", "=", "scale_y", "[", ":", ",", "None", "]", "\n", "\n", "x", "=", "keypoints", "[", "...", ",", "0", "]", "\n", "y", "=", "keypoints", "[", "...", ",", "1", "]", "\n", "\n", "x_boundary_inds", "=", "x", "==", "rois", "[", ":", ",", "2", "]", "[", ":", ",", "None", "]", "\n", "y_boundary_inds", "=", "y", "==", "rois", "[", ":", ",", "3", "]", "[", ":", ",", "None", "]", "\n", "\n", "x", "=", "(", "x", "-", "offset_x", ")", "*", "scale_x", "\n", "x", "=", "x", ".", "floor", "(", ")", ".", "long", "(", ")", "\n", "y", "=", "(", "y", "-", "offset_y", ")", "*", "scale_y", "\n", "y", "=", "y", ".", "floor", "(", ")", ".", "long", "(", ")", "\n", "\n", "x", "[", "x_boundary_inds", "]", "=", "heatmap_size", "-", "1", "\n", "y", "[", "y_boundary_inds", "]", "=", "heatmap_size", "-", "1", "\n", "\n", "valid_loc", "=", "(", "x", ">=", "0", ")", "&", "(", "y", ">=", "0", ")", "&", "(", "x", "<", "heatmap_size", ")", "&", "(", "y", "<", "heatmap_size", ")", "\n", "vis", "=", "keypoints", "[", "...", ",", "2", "]", ">", "0", "\n", "valid", "=", "(", "valid_loc", "&", "vis", ")", ".", "long", "(", ")", "\n", "\n", "lin_ind", "=", "y", "*", "heatmap_size", "+", "x", "\n", "heatmaps", "=", "lin_ind", "*", "valid", "\n", "\n", "return", "heatmaps", ",", "valid", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.config.paths_catalog.DatasetCatalog.get": [[116, 148], ["RuntimeError", "dict", "dict", "dict", "dict", "os.path.join", "os.path.join", "dict", "dict", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "get", "(", "name", ")", ":", "\n", "        ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "if", "\"coco\"", "in", "name", ":", "\n", "            ", "args", "=", "dict", "(", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"img_dir\"", "]", ")", ",", "\n", "ann_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"ann_file\"", "]", ")", ",", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"COCODataset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "\"voc\"", "in", "name", ":", "\n", "            ", "args", "=", "dict", "(", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"data_dir\"", "]", ")", ",", "\n", "split", "=", "attrs", "[", "\"split\"", "]", ",", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"PascalVOCDataset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "elif", "True", ":", "\n", "            ", "args", "=", "dict", "(", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "0", "]", ")", ",", "\n", "ann_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "1", "]", ")", ",", "\n", ")", "\n", "return", "dict", "(", "\n", "factory", "=", "\"WordDataset\"", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "", "raise", "RuntimeError", "(", "\"Dataset not available: {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.config.paths_catalog.ModelCatalog.get": [[175, 182], ["name.startswith", "name.startswith", "RuntimeError", "paths_catalog.ModelCatalog.get_c2_detectron_12_2017_baselines", "paths_catalog.ModelCatalog.get_c2_imagenet_pretrained"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.config.paths_catalog.ModelCatalog.get_c2_detectron_12_2017_baselines", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.config.paths_catalog.ModelCatalog.get_c2_imagenet_pretrained"], ["@", "staticmethod", "\n", "def", "get", "(", "name", ")", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "\"Caffe2Detectron/COCO\"", ")", ":", "\n", "            ", "return", "ModelCatalog", ".", "get_c2_detectron_12_2017_baselines", "(", "name", ")", "\n", "", "if", "name", ".", "startswith", "(", "\"ImageNetPretrained\"", ")", ":", "\n", "            ", "return", "ModelCatalog", ".", "get_c2_imagenet_pretrained", "(", "name", ")", "\n", "", "raise", "RuntimeError", "(", "\"model not present in the catalog {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.config.paths_catalog.ModelCatalog.get_c2_imagenet_pretrained": [[183, 190], ["len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_c2_imagenet_pretrained", "(", "name", ")", ":", "\n", "        ", "prefix", "=", "ModelCatalog", ".", "S3_C2_DETECTRON_URL", "\n", "name", "=", "name", "[", "len", "(", "\"ImageNetPretrained/\"", ")", ":", "]", "\n", "name", "=", "ModelCatalog", ".", "C2_IMAGENET_MODELS", "[", "name", "]", "\n", "url", "=", "\"/\"", ".", "join", "(", "[", "prefix", ",", "name", "]", ")", "\n", "return", "url", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.config.paths_catalog.ModelCatalog.get_c2_detectron_12_2017_baselines": [[191, 209], ["ModelCatalog.C2_DETECTRON_SUFFIX.format", "name.split", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_c2_detectron_12_2017_baselines", "(", "name", ")", ":", "\n", "# Detectron C2 models are stored following the structure", "\n", "# prefix/<model_id>/2012_2017_baselines/<model_name>.yaml.<signature>/suffix", "\n", "# we use as identifiers in the catalog Caffe2Detectron/COCO/<model_id>/<model_name>", "\n", "        ", "prefix", "=", "ModelCatalog", ".", "S3_C2_DETECTRON_URL", "\n", "dataset_tag", "=", "\"keypoints_\"", "if", "\"keypoint\"", "in", "name", "else", "\"\"", "\n", "suffix", "=", "ModelCatalog", ".", "C2_DETECTRON_SUFFIX", ".", "format", "(", "dataset_tag", ",", "dataset_tag", ")", "\n", "# remove identification prefix", "\n", "name", "=", "name", "[", "len", "(", "\"Caffe2Detectron/COCO/\"", ")", ":", "]", "\n", "# split in <model_id> and <model_name>", "\n", "model_id", ",", "model_name", "=", "name", ".", "split", "(", "\"/\"", ")", "\n", "# parsing to make it match the url address from the Caffe2 models", "\n", "model_name", "=", "\"{}.yaml\"", ".", "format", "(", "model_name", ")", "\n", "signature", "=", "ModelCatalog", ".", "C2_DETECTRON_MODELS", "[", "name", "]", "\n", "unique_name", "=", "\".\"", ".", "join", "(", "[", "model_name", ",", "signature", "]", ")", "\n", "url", "=", "\"/\"", ".", "join", "(", "[", "prefix", ",", "model_id", ",", "\"12_2017_baselines\"", ",", "unique_name", ",", "suffix", "]", ")", "\n", "return", "url", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers._utils._load_C_extensions": [[14, 36], ["os.path.dirname", "os.path.dirname", "os.path.join", "glob.glob", "glob.glob", "glob.glob", "load_ext", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "torch.cuda.is_available", "source.extend", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.extend"], ["", "def", "_load_C_extensions", "(", ")", ":", "\n", "    ", "this_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "this_dir", "=", "os", ".", "path", ".", "dirname", "(", "this_dir", ")", "\n", "this_dir", "=", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"csrc\"", ")", "\n", "\n", "main_file", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"*.cpp\"", ")", ")", "\n", "source_cpu", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"cpu\"", ",", "\"*.cpp\"", ")", ")", "\n", "source_cuda", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"cuda\"", ",", "\"*.cu\"", ")", ")", "\n", "\n", "source", "=", "main_file", "+", "source_cpu", "\n", "\n", "extra_cflags", "=", "[", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "CUDA_HOME", "is", "not", "None", ":", "\n", "        ", "source", ".", "extend", "(", "source_cuda", ")", "\n", "extra_cflags", "=", "[", "\"-DWITH_CUDA\"", "]", "\n", "", "source", "=", "[", "os", ".", "path", ".", "join", "(", "this_dir", ",", "s", ")", "for", "s", "in", "source", "]", "\n", "extra_include_paths", "=", "[", "this_dir", "]", "\n", "return", "load_ext", "(", "\n", "\"torchvision\"", ",", "\n", "source", ",", "\n", "extra_cflags", "=", "extra_cflags", ",", "\n", "extra_include_paths", "=", "extra_include_paths", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.sigmoid_focal_loss._SigmoidFocalLoss.forward": [[10, 22], ["ctx.save_for_backward", "maskrcnn_benchmark._C.sigmoid_focalloss_forward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "logits", ",", "targets", ",", "gamma", ",", "alpha", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "logits", ",", "targets", ")", "\n", "num_classes", "=", "logits", ".", "shape", "[", "1", "]", "\n", "ctx", ".", "num_classes", "=", "num_classes", "\n", "ctx", ".", "gamma", "=", "gamma", "\n", "ctx", ".", "alpha", "=", "alpha", "\n", "\n", "losses", "=", "_C", ".", "sigmoid_focalloss_forward", "(", "\n", "logits", ",", "targets", ",", "num_classes", ",", "gamma", ",", "alpha", "\n", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.sigmoid_focal_loss._SigmoidFocalLoss.backward": [[23, 35], ["d_loss.contiguous.contiguous.contiguous", "maskrcnn_benchmark._C.sigmoid_focalloss_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "d_loss", ")", ":", "\n", "        ", "logits", ",", "targets", "=", "ctx", ".", "saved_tensors", "\n", "num_classes", "=", "ctx", ".", "num_classes", "\n", "gamma", "=", "ctx", ".", "gamma", "\n", "alpha", "=", "ctx", ".", "alpha", "\n", "d_loss", "=", "d_loss", ".", "contiguous", "(", ")", "\n", "d_logits", "=", "_C", ".", "sigmoid_focalloss_backward", "(", "\n", "logits", ",", "targets", ",", "d_loss", ",", "num_classes", ",", "gamma", ",", "alpha", "\n", ")", "\n", "return", "d_logits", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.sigmoid_focal_loss.SigmoidFocalLoss.__init__": [[56, 60], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ",", "alpha", ")", ":", "\n", "        ", "super", "(", "SigmoidFocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.sigmoid_focal_loss.SigmoidFocalLoss.forward": [[61, 70], ["loss_func", "loss_func.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "targets", ")", ":", "\n", "        ", "device", "=", "logits", ".", "device", "\n", "if", "logits", ".", "is_cuda", ":", "\n", "            ", "loss_func", "=", "sigmoid_focal_loss_cuda", "\n", "", "else", ":", "\n", "            ", "loss_func", "=", "sigmoid_focal_loss_cpu", "\n", "\n", "", "loss", "=", "loss_func", "(", "logits", ",", "targets", ",", "self", ".", "gamma", ",", "self", ".", "alpha", ")", "\n", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.sigmoid_focal_loss.SigmoidFocalLoss.__repr__": [[71, 77], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "tmpstr", "+=", "\"gamma=\"", "+", "str", "(", "self", ".", "gamma", ")", "\n", "tmpstr", "+=", "\", alpha=\"", "+", "str", "(", "self", ".", "alpha", ")", "\n", "tmpstr", "+=", "\")\"", "\n", "return", "tmpstr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.sigmoid_focal_loss.sigmoid_focal_loss_cpu": [[40, 53], ["torch.arange().unsqueeze", "targets.unsqueeze", "torch.sigmoid", "torch.log", "torch.log", "torch.arange"], "function", ["None"], ["def", "sigmoid_focal_loss_cpu", "(", "logits", ",", "targets", ",", "gamma", ",", "alpha", ")", ":", "\n", "    ", "num_classes", "=", "logits", ".", "shape", "[", "1", "]", "\n", "gamma", "=", "gamma", "[", "0", "]", "\n", "alpha", "=", "alpha", "[", "0", "]", "\n", "dtype", "=", "targets", ".", "dtype", "\n", "device", "=", "targets", ".", "device", "\n", "class_range", "=", "torch", ".", "arange", "(", "1", ",", "num_classes", "+", "1", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "t", "=", "targets", ".", "unsqueeze", "(", "1", ")", "\n", "p", "=", "torch", ".", "sigmoid", "(", "logits", ")", "\n", "term1", "=", "(", "1", "-", "p", ")", "**", "gamma", "*", "torch", ".", "log", "(", "p", ")", "\n", "term2", "=", "p", "**", "gamma", "*", "torch", ".", "log", "(", "1", "-", "p", ")", "\n", "return", "-", "(", "t", "==", "class_range", ")", ".", "float", "(", ")", "*", "term1", "*", "alpha", "-", "(", "(", "t", "!=", "class_range", ")", "*", "(", "t", ">=", "0", ")", ")", ".", "float", "(", ")", "*", "term2", "*", "(", "1", "-", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.scale.Scale.__init__": [[6, 9], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "init_value", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "Scale", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "[", "init_value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.scale.Scale.forward": [[10, 12], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "*", "self", ".", "scale", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.roi_pool._ROIPool.forward": [[12, 22], ["torch.nn.modules.utils._pair", "input.size", "maskrcnn_benchmark._C.roi_pool_forward", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "roi", ",", "output_size", ",", "spatial_scale", ")", ":", "\n", "        ", "ctx", ".", "output_size", "=", "_pair", "(", "output_size", ")", "\n", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "output", ",", "argmax", "=", "_C", ".", "roi_pool_forward", "(", "\n", "input", ",", "roi", ",", "spatial_scale", ",", "output_size", "[", "0", "]", ",", "output_size", "[", "1", "]", "\n", ")", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "roi", ",", "argmax", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.roi_pool._ROIPool.backward": [[23, 44], ["maskrcnn_benchmark._C.roi_pool_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "rois", ",", "argmax", "=", "ctx", ".", "saved_tensors", "\n", "output_size", "=", "ctx", ".", "output_size", "\n", "spatial_scale", "=", "ctx", ".", "spatial_scale", "\n", "bs", ",", "ch", ",", "h", ",", "w", "=", "ctx", ".", "input_shape", "\n", "grad_input", "=", "_C", ".", "roi_pool_backward", "(", "\n", "grad_output", ",", "\n", "input", ",", "\n", "rois", ",", "\n", "argmax", ",", "\n", "spatial_scale", ",", "\n", "output_size", "[", "0", "]", ",", "\n", "output_size", "[", "1", "]", ",", "\n", "bs", ",", "\n", "ch", ",", "\n", "h", ",", "\n", "w", ",", "\n", ")", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.roi_pool.ROIPool.__init__": [[50, 54], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ",", "spatial_scale", ")", ":", "\n", "        ", "super", "(", "ROIPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.roi_pool.ROIPool.forward": [[55, 57], ["roi_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "rois", ")", ":", "\n", "        ", "return", "roi_pool", "(", "input", ",", "rois", ",", "self", ".", "output_size", ",", "self", ".", "spatial_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.roi_pool.ROIPool.__repr__": [[58, 64], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "tmpstr", "+=", "\"output_size=\"", "+", "str", "(", "self", ".", "output_size", ")", "\n", "tmpstr", "+=", "\", spatial_scale=\"", "+", "str", "(", "self", ".", "spatial_scale", ")", "\n", "tmpstr", "+=", "\")\"", "\n", "return", "tmpstr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.batch_norm.FrozenBatchNorm2d.__init__": [[12, 18], ["torch.nn.Module.__init__", "batch_norm.FrozenBatchNorm2d.register_buffer", "batch_norm.FrozenBatchNorm2d.register_buffer", "batch_norm.FrozenBatchNorm2d.register_buffer", "batch_norm.FrozenBatchNorm2d.register_buffer", "torch.ones", "torch.zeros", "torch.zeros", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "super", "(", "FrozenBatchNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "\"weight\"", ",", "torch", ".", "ones", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "zeros", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_mean\"", ",", "torch", ".", "zeros", "(", "n", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"running_var\"", ",", "torch", ".", "ones", "(", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.batch_norm.FrozenBatchNorm2d.forward": [[19, 25], ["scale.reshape.reshape.reshape", "bias.reshape.reshape.reshape", "batch_norm.FrozenBatchNorm2d.running_var.rsqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "scale", "=", "self", ".", "weight", "*", "self", ".", "running_var", ".", "rsqrt", "(", ")", "\n", "bias", "=", "self", ".", "bias", "-", "self", ".", "running_mean", "*", "scale", "\n", "scale", "=", "scale", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "bias", "=", "bias", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "scale", "+", "bias", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.deform_conv_v2._DCNv2.forward": [[16, 33], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "maskrcnn_benchmark.dcn_v2_forward", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "deformable_groups", ")", ":", "\n", "        ", "ctx", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "ctx", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "ctx", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "ctx", ".", "kernel_size", "=", "_pair", "(", "weight", ".", "shape", "[", "2", ":", "4", "]", ")", "\n", "ctx", ".", "deformable_groups", "=", "deformable_groups", "\n", "output", "=", "_backend", ".", "dcn_v2_forward", "(", "input", ",", "weight", ",", "bias", ",", "\n", "offset", ",", "mask", ",", "\n", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "\n", "ctx", ".", "stride", "[", "0", "]", ",", "ctx", ".", "stride", "[", "1", "]", ",", "\n", "ctx", ".", "padding", "[", "0", "]", ",", "ctx", ".", "padding", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "ctx", ".", "deformable_groups", ")", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.deform_conv_v2._DCNv2.backward": [[34, 51], ["maskrcnn_benchmark.dcn_v2_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", ",", "grad_offset", ",", "grad_mask", ",", "grad_weight", ",", "grad_bias", "=", "_backend", ".", "dcn_v2_backward", "(", "input", ",", "weight", ",", "\n", "bias", ",", "\n", "offset", ",", "mask", ",", "\n", "grad_output", ",", "\n", "ctx", ".", "kernel_size", "[", "0", "]", ",", "ctx", ".", "kernel_size", "[", "1", "]", ",", "\n", "ctx", ".", "stride", "[", "0", "]", ",", "ctx", ".", "stride", "[", "1", "]", ",", "\n", "ctx", ".", "padding", "[", "0", "]", ",", "ctx", ".", "padding", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "ctx", ".", "deformable_groups", ")", "\n", "\n", "return", "grad_input", ",", "grad_offset", ",", "grad_mask", ",", "grad_weight", ",", "grad_bias", ",", "None", ",", "None", ",", "None", ",", "None", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.deform_conv_v2.DCNv2.__init__": [[58, 73], ["torch.nn.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.Parameter", "torch.nn.Parameter", "deform_conv_v2.DCNv2.reset_parameters", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.deform_conv_v2.DCNv2.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", "=", "1", ",", "deformable_groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "DCNv2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "self", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "out_channels", ",", "in_channels", ",", "*", "self", ".", "kernel_size", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.deform_conv_v2.DCNv2.reset_parameters": [[74, 81], ["deform_conv_v2.DCNv2.weight.data.uniform_", "deform_conv_v2.DCNv2.bias.data.zero_", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.deform_conv_v2.DCNv2.forward": [[82, 94], ["dcn_v2_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "offset", ",", "mask", ")", ":", "\n", "        ", "assert", "2", "*", "self", ".", "deformable_groups", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", "==", "offset", ".", "shape", "[", "1", "]", "\n", "assert", "self", ".", "deformable_groups", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", "==", "mask", ".", "shape", "[", "1", "]", "\n", "return", "dcn_v2_conv", "(", "input", ",", "offset", ",", "mask", ",", "\n", "self", ".", "weight", ",", "\n", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "deformable_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.deform_conv_v2.DCN.__init__": [[98, 116], ["deform_conv_v2.DCNv2.__init__", "torch.nn.Conv2d", "deform_conv_v2.DCN.init_offset"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.deform_conv_v2.DCN.init_offset"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "deformable_groups", "=", "2", ",", "\n", "groups", "=", "None", ",", "bias", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        groups and bias are two dummy args which have no effect\n        \"\"\"", "\n", "super", "(", "DCN", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "deformable_groups", ")", "\n", "\n", "channels_", "=", "self", ".", "deformable_groups", "*", "3", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", "\n", "self", ".", "conv_offset_mask", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "\n", "channels_", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "stride", "=", "self", ".", "stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "init_offset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.deform_conv_v2.DCN.init_offset": [[117, 120], ["deform_conv_v2.DCN.conv_offset_mask.weight.data.zero_", "deform_conv_v2.DCN.conv_offset_mask.bias.data.zero_"], "methods", ["None"], ["", "def", "init_offset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_offset_mask", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "conv_offset_mask", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.deform_conv_v2.DCN.forward": [[121, 132], ["deform_conv_v2.DCN.conv_offset_mask", "torch.chunk", "torch.cat", "torch.sigmoid", "dcn_v2_conv"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv_offset_mask", "(", "input", ")", "\n", "o1", ",", "o2", ",", "mask", "=", "torch", ".", "chunk", "(", "out", ",", "3", ",", "dim", "=", "1", ")", "\n", "offset", "=", "torch", ".", "cat", "(", "(", "o1", ",", "o2", ")", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "sigmoid", "(", "mask", ")", "\n", "return", "dcn_v2_conv", "(", "input", ",", "offset", ",", "mask", ",", "\n", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "deformable_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.deform_conv_v2._DCNv2Pooling.forward": [[136, 163], ["int", "maskrcnn_benchmark.dcn_v2_psroi_pooling_forward", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "rois", ",", "offset", ",", "\n", "spatial_scale", ",", "\n", "pooled_size", ",", "\n", "output_dim", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ")", ":", "\n", "        ", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "no_trans", "=", "int", "(", "no_trans", ")", "\n", "ctx", ".", "output_dim", "=", "output_dim", "\n", "ctx", ".", "group_size", "=", "group_size", "\n", "ctx", ".", "pooled_size", "=", "pooled_size", "\n", "ctx", ".", "part_size", "=", "pooled_size", "if", "part_size", "is", "None", "else", "part_size", "\n", "ctx", ".", "sample_per_part", "=", "sample_per_part", "\n", "ctx", ".", "trans_std", "=", "trans_std", "\n", "\n", "output", ",", "output_count", "=", "_backend", ".", "dcn_v2_psroi_pooling_forward", "(", "input", ",", "rois", ",", "offset", ",", "\n", "ctx", ".", "no_trans", ",", "ctx", ".", "spatial_scale", ",", "\n", "ctx", ".", "output_dim", ",", "ctx", ".", "group_size", ",", "\n", "ctx", ".", "pooled_size", ",", "ctx", ".", "part_size", ",", "\n", "ctx", ".", "sample_per_part", ",", "ctx", ".", "trans_std", ")", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "rois", ",", "offset", ",", "output_count", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.deform_conv_v2._DCNv2Pooling.backward": [[164, 185], ["maskrcnn_benchmark.dcn_v2_psroi_pooling_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "rois", ",", "offset", ",", "output_count", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", ",", "grad_offset", "=", "_backend", ".", "dcn_v2_psroi_pooling_backward", "(", "grad_output", ",", "\n", "input", ",", "\n", "rois", ",", "\n", "offset", ",", "\n", "output_count", ",", "\n", "ctx", ".", "no_trans", ",", "\n", "ctx", ".", "spatial_scale", ",", "\n", "ctx", ".", "output_dim", ",", "\n", "ctx", ".", "group_size", ",", "\n", "ctx", ".", "pooled_size", ",", "\n", "ctx", ".", "part_size", ",", "\n", "ctx", ".", "sample_per_part", ",", "\n", "ctx", ".", "trans_std", ")", "\n", "\n", "return", "grad_input", ",", "None", ",", "grad_offset", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.deform_conv_v2.DCNv2Pooling.__init__": [[192, 210], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_scale", ",", "\n", "pooled_size", ",", "\n", "output_dim", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ")", ":", "\n", "        ", "super", "(", "DCNv2Pooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "self", ".", "pooled_size", "=", "pooled_size", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "no_trans", "=", "no_trans", "\n", "self", ".", "group_size", "=", "group_size", "\n", "self", ".", "part_size", "=", "pooled_size", "if", "part_size", "is", "None", "else", "part_size", "\n", "self", ".", "sample_per_part", "=", "sample_per_part", "\n", "self", ".", "trans_std", "=", "trans_std", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.deform_conv_v2.DCNv2Pooling.forward": [[211, 224], ["dcn_v2_pooling", "input.new"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "rois", ",", "offset", ")", ":", "\n", "        ", "assert", "input", ".", "shape", "[", "1", "]", "==", "self", ".", "output_dim", "\n", "if", "self", ".", "no_trans", ":", "\n", "            ", "offset", "=", "input", ".", "new", "(", ")", "\n", "", "return", "dcn_v2_pooling", "(", "input", ",", "rois", ",", "offset", ",", "\n", "self", ".", "spatial_scale", ",", "\n", "self", ".", "pooled_size", ",", "\n", "self", ".", "output_dim", ",", "\n", "self", ".", "no_trans", ",", "\n", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.deform_conv_v2.DCNPooling.__init__": [[228, 263], ["deform_conv_v2.DCNv2Pooling.__init__", "torch.nn.Sequential", "deform_conv_v2.DCNPooling.offset_mask_fc[].weight.data.zero_", "deform_conv_v2.DCNPooling.offset_mask_fc[].bias.data.zero_", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_scale", ",", "\n", "pooled_size", ",", "\n", "output_dim", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ",", "\n", "deform_fc_dim", "=", "1024", ")", ":", "\n", "# don't support non square pooling", "\n", "        ", "pooled_size", "=", "pooled_size", "[", "0", "]", "\n", "super", "(", "DCNPooling", ",", "self", ")", ".", "__init__", "(", "spatial_scale", ",", "\n", "pooled_size", ",", "\n", "output_dim", ",", "\n", "no_trans", ",", "\n", "group_size", ",", "\n", "part_size", ",", "\n", "sample_per_part", ",", "\n", "trans_std", ")", "\n", "\n", "self", ".", "deform_fc_dim", "=", "deform_fc_dim", "\n", "\n", "if", "not", "no_trans", ":", "\n", "            ", "self", ".", "offset_mask_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "pooled_size", "*", "self", ".", "pooled_size", "*", "\n", "self", ".", "output_dim", ",", "self", ".", "deform_fc_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "deform_fc_dim", ",", "self", ".", "deform_fc_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "deform_fc_dim", ",", "self", ".", "pooled_size", "*", "\n", "self", ".", "pooled_size", "*", "3", ")", "\n", ")", "\n", "self", ".", "offset_mask_fc", "[", "4", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "offset_mask_fc", "[", "4", "]", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.deform_conv_v2.DCNPooling.forward": [[264, 309], ["input.new", "dcn_v2_pooling", "dcn_v2_pooling", "deform_conv_v2.DCNPooling.offset_mask_fc", "offset_mask.view.view.view", "torch.chunk", "torch.cat", "torch.sigmoid", "dcn_v2_pooling.view", "dcn_v2_pooling"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "rois", ",", "debug", "=", "False", ")", ":", "\n", "        ", "offset", "=", "input", ".", "new", "(", ")", "\n", "\n", "if", "not", "self", ".", "no_trans", ":", "\n", "\n", "# do roi_align first", "\n", "            ", "n", "=", "rois", ".", "shape", "[", "0", "]", "\n", "roi", "=", "dcn_v2_pooling", "(", "input", ",", "rois", ",", "offset", ",", "\n", "self", ".", "spatial_scale", ",", "\n", "self", ".", "pooled_size", ",", "\n", "self", ".", "output_dim", ",", "\n", "True", ",", "# no trans", "\n", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "\n", "# build mask and offset", "\n", "offset_mask", "=", "self", ".", "offset_mask_fc", "(", "roi", ".", "view", "(", "n", ",", "-", "1", ")", ")", "\n", "offset_mask", "=", "offset_mask", ".", "view", "(", "\n", "n", ",", "3", ",", "self", ".", "pooled_size", ",", "self", ".", "pooled_size", ")", "\n", "o1", ",", "o2", ",", "mask", "=", "torch", ".", "chunk", "(", "offset_mask", ",", "3", ",", "dim", "=", "1", ")", "\n", "offset", "=", "torch", ".", "cat", "(", "(", "o1", ",", "o2", ")", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "sigmoid", "(", "mask", ")", "\n", "\n", "# do pooling with offset and mask", "\n", "return", "dcn_v2_pooling", "(", "input", ",", "rois", ",", "offset", ",", "\n", "self", ".", "spatial_scale", ",", "\n", "self", ".", "pooled_size", ",", "\n", "self", ".", "output_dim", ",", "\n", "self", ".", "no_trans", ",", "\n", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "*", "mask", "\n", "# only roi_align", "\n", "", "return", "dcn_v2_pooling", "(", "input", ",", "rois", ",", "offset", ",", "\n", "self", ".", "spatial_scale", ",", "\n", "self", ".", "pooled_size", ",", "\n", "self", ".", "output_dim", ",", "\n", "self", ".", "no_trans", ",", "\n", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.roi_align._ROIAlign.forward": [[12, 23], ["ctx.save_for_backward", "torch.nn.modules.utils._pair", "input.size", "maskrcnn_benchmark._C.roi_align_forward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "roi", ",", "output_size", ",", "spatial_scale", ",", "sampling_ratio", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "roi", ")", "\n", "ctx", ".", "output_size", "=", "_pair", "(", "output_size", ")", "\n", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "sampling_ratio", "=", "sampling_ratio", "\n", "ctx", ".", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "output", "=", "_C", ".", "roi_align_forward", "(", "\n", "input", ",", "roi", ",", "spatial_scale", ",", "output_size", "[", "0", "]", ",", "output_size", "[", "1", "]", ",", "sampling_ratio", "\n", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.roi_align._ROIAlign.backward": [[24, 45], ["maskrcnn_benchmark._C.roi_align_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "rois", ",", "=", "ctx", ".", "saved_tensors", "\n", "output_size", "=", "ctx", ".", "output_size", "\n", "spatial_scale", "=", "ctx", ".", "spatial_scale", "\n", "sampling_ratio", "=", "ctx", ".", "sampling_ratio", "\n", "bs", ",", "ch", ",", "h", ",", "w", "=", "ctx", ".", "input_shape", "\n", "grad_input", "=", "_C", ".", "roi_align_backward", "(", "\n", "grad_output", ",", "\n", "rois", ",", "\n", "spatial_scale", ",", "\n", "output_size", "[", "0", "]", ",", "\n", "output_size", "[", "1", "]", ",", "\n", "bs", ",", "\n", "ch", ",", "\n", "h", ",", "\n", "w", ",", "\n", "sampling_ratio", ",", "\n", ")", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.roi_align.ROIAlign.__init__": [[51, 56], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ",", "spatial_scale", ",", "sampling_ratio", ")", ":", "\n", "        ", "super", "(", "ROIAlign", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "self", ".", "sampling_ratio", "=", "sampling_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.roi_align.ROIAlign.forward": [[57, 60], ["roi_align"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "rois", ")", ":", "\n", "        ", "return", "roi_align", "(", "\n", "input", ",", "rois", ",", "self", ".", "output_size", ",", "self", ".", "spatial_scale", ",", "self", ".", "sampling_ratio", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.roi_align.ROIAlign.__repr__": [[62, 69], ["str", "str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "tmpstr", "+=", "\"output_size=\"", "+", "str", "(", "self", ".", "output_size", ")", "\n", "tmpstr", "+=", "\", spatial_scale=\"", "+", "str", "(", "self", ".", "spatial_scale", ")", "\n", "tmpstr", "+=", "\", sampling_ratio=\"", "+", "str", "(", "self", ".", "sampling_ratio", ")", "\n", "tmpstr", "+=", "\")\"", "\n", "return", "tmpstr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc._NewEmptyTensorOp.forward": [[18, 22], ["x.new_empty"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "new_shape", ")", ":", "\n", "        ", "ctx", ".", "shape", "=", "x", ".", "shape", "\n", "return", "x", ".", "new_empty", "(", "new_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc._NewEmptyTensorOp.backward": [[23, 27], ["_NewEmptyTensorOp.apply"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad", ")", ":", "\n", "        ", "shape", "=", "ctx", ".", "shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "grad", ",", "shape", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc.Conv2d.forward": [[30, 43], ["_NewEmptyTensorOp.apply", "x.numel", "super().forward", "zip"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.iou_loss.IOULoss.forward"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "return", "super", "(", "Conv2d", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "# get output shape", "\n", "\n", "", "output_shape", "=", "[", "\n", "(", "i", "+", "2", "*", "p", "-", "(", "di", "*", "(", "k", "-", "1", ")", "+", "1", ")", ")", "//", "d", "+", "1", "\n", "for", "i", ",", "p", ",", "di", ",", "k", ",", "d", "in", "zip", "(", "\n", "x", ".", "shape", "[", "-", "2", ":", "]", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "kernel_size", ",", "self", ".", "stride", "\n", ")", "\n", "]", "\n", "output_shape", "=", "[", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "weight", ".", "shape", "[", "0", "]", "]", "+", "output_shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "x", ",", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc.ConvTranspose2d.forward": [[46, 64], ["_NewEmptyTensorOp.apply", "x.numel", "super().forward", "zip"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.iou_loss.IOULoss.forward"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "return", "super", "(", "ConvTranspose2d", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "# get output shape", "\n", "\n", "", "output_shape", "=", "[", "\n", "(", "i", "-", "1", ")", "*", "d", "-", "2", "*", "p", "+", "(", "di", "*", "(", "k", "-", "1", ")", "+", "1", ")", "+", "op", "\n", "for", "i", ",", "p", ",", "di", ",", "k", ",", "d", ",", "op", "in", "zip", "(", "\n", "x", ".", "shape", "[", "-", "2", ":", "]", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "kernel_size", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "output_padding", ",", "\n", ")", "\n", "]", "\n", "output_shape", "=", "[", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "bias", ".", "shape", "[", "0", "]", "]", "+", "output_shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "x", ",", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc.BatchNorm2d.forward": [[67, 73], ["_NewEmptyTensorOp.apply", "x.numel", "super().forward"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.iou_loss.IOULoss.forward"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "return", "super", "(", "BatchNorm2d", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "# get output shape", "\n", "", "output_shape", "=", "x", ".", "shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "x", ",", "output_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc.interpolate": [[75, 111], ["tuple", "_NewEmptyTensorOp.apply", "input.numel", "torch.nn.functional.interpolate", "misc.interpolate._check_size_scale_factor"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc.interpolate"], ["", "", "def", "interpolate", "(", "\n", "input", ",", "size", "=", "None", ",", "scale_factor", "=", "None", ",", "mode", "=", "\"nearest\"", ",", "align_corners", "=", "None", "\n", ")", ":", "\n", "    ", "if", "input", ".", "numel", "(", ")", ">", "0", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "input", ",", "size", ",", "scale_factor", ",", "mode", ",", "align_corners", "\n", ")", "\n", "\n", "", "def", "_check_size_scale_factor", "(", "dim", ")", ":", "\n", "        ", "if", "size", "is", "None", "and", "scale_factor", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"either size or scale_factor should be defined\"", ")", "\n", "", "if", "size", "is", "not", "None", "and", "scale_factor", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"only one of size or scale_factor should be defined\"", ")", "\n", "", "if", "(", "\n", "scale_factor", "is", "not", "None", "\n", "and", "isinstance", "(", "scale_factor", ",", "tuple", ")", "\n", "and", "len", "(", "scale_factor", ")", "!=", "dim", "\n", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"scale_factor shape must match input shape. \"", "\n", "\"Input is {}D, scale_factor size is {}\"", ".", "format", "(", "dim", ",", "len", "(", "scale_factor", ")", ")", "\n", ")", "\n", "\n", "", "", "def", "_output_size", "(", "dim", ")", ":", "\n", "        ", "_check_size_scale_factor", "(", "dim", ")", "\n", "if", "size", "is", "not", "None", ":", "\n", "            ", "return", "size", "\n", "", "scale_factors", "=", "_ntuple", "(", "dim", ")", "(", "scale_factor", ")", "\n", "# math.floor might return float in py2.7", "\n", "return", "[", "\n", "int", "(", "math", ".", "floor", "(", "input", ".", "size", "(", "i", "+", "2", ")", "*", "scale_factors", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "dim", ")", "\n", "]", "\n", "\n", "", "output_shape", "=", "tuple", "(", "_output_size", "(", "2", ")", ")", "\n", "output_shape", "=", "input", ".", "shape", "[", ":", "-", "2", "]", "+", "output_shape", "\n", "return", "_NewEmptyTensorOp", ".", "apply", "(", "input", ",", "output_shape", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.iou_loss.IOULoss.forward": [[6, 37], ["torch.min", "torch.min", "torch.min", "torch.min", "torch.log", "losses.mean", "weight.sum", "weight.sum", "losses.numel"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "weight", "=", "None", ")", ":", "\n", "        ", "pred_left", "=", "pred", "[", ":", ",", "0", "]", "\n", "pred_top", "=", "pred", "[", ":", ",", "1", "]", "\n", "pred_right", "=", "pred", "[", ":", ",", "2", "]", "\n", "pred_bottom", "=", "pred", "[", ":", ",", "3", "]", "\n", "\n", "target_left", "=", "target", "[", ":", ",", "0", "]", "\n", "target_top", "=", "target", "[", ":", ",", "1", "]", "\n", "target_right", "=", "target", "[", ":", ",", "2", "]", "\n", "target_bottom", "=", "target", "[", ":", ",", "3", "]", "\n", "\n", "target_aera", "=", "(", "target_left", "+", "target_right", ")", "*", "(", "target_top", "+", "target_bottom", ")", "\n", "pred_aera", "=", "(", "pred_left", "+", "pred_right", ")", "*", "(", "pred_top", "+", "pred_bottom", ")", "\n", "\n", "w_intersect", "=", "torch", ".", "min", "(", "pred_left", ",", "target_left", ")", "+", "torch", ".", "min", "(", "pred_right", ",", "target_right", ")", "\n", "h_intersect", "=", "torch", ".", "min", "(", "pred_bottom", ",", "target_bottom", ")", "+", "torch", ".", "min", "(", "pred_top", ",", "target_top", ")", "\n", "\n", "area_intersect", "=", "w_intersect", "*", "h_intersect", "\n", "area_union", "=", "target_aera", "+", "pred_aera", "-", "area_intersect", "\n", "\n", "losses", "=", "-", "torch", ".", "log", "(", "(", "area_intersect", "+", "1.0", ")", "/", "(", "area_union", "+", "1.0", ")", ")", "\n", "\n", "if", "weight", "is", "not", "None", "and", "weight", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "return", "(", "losses", "*", "weight", ")", ".", "sum", "(", ")", "/", "weight", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "losses", ".", "numel", "(", ")", "!=", "0", "\n", "return", "losses", ".", "mean", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.smooth_l1_loss.smooth_l1_loss": [[6, 17], ["torch.abs", "torch.where", "torch.where.sum", "torch.where.mean"], "function", ["None"], ["def", "smooth_l1_loss", "(", "input", ",", "target", ",", "beta", "=", "1.", "/", "9", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    very similar to the smooth_l1_loss from pytorch, but with\n    the extra beta parameter\n    \"\"\"", "\n", "n", "=", "torch", ".", "abs", "(", "input", "-", "target", ")", "\n", "cond", "=", "n", "<", "beta", "\n", "loss", "=", "torch", ".", "where", "(", "cond", ",", "0.5", "*", "n", "**", "2", "/", "beta", ",", "n", "-", "0.5", "*", "beta", ")", "\n", "if", "size_average", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "", "return", "loss", ".", "sum", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.engine.inference.compute_on_dataset": [[16, 35], ["model.eval", "torch.device", "enumerate", "tqdm.tqdm", "images.to.to", "results_dict.update", "torch.no_grad", "model", "timer.tic", "torch.cuda.synchronize", "timer.toc", "o.to", "zip"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.synchronize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "pre_nms_top_n", ",", "\n", "post_nms_top_n", ",", "\n", "nms_thresh", ",", "\n", "min_size", ",", "\n", "box_coder", "=", "None", ",", "\n", "fpn_post_nms_top_n", "=", "None", ",", "\n", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.engine.inference._accumulate_predictions_from_multiple_gpus": [[37, 57], ["utils.comm.all_gather", "list", "utils.comm.is_main_process", "predictions.update", "sorted", "len", "logging.getLogger", "logging.getLogger.warning", "predictions.keys"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.all_gather", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.is_main_process", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update"], ["super", "(", "RPNPostProcessor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_nms_top_n", "=", "pre_nms_top_n", "\n", "self", ".", "post_nms_top_n", "=", "post_nms_top_n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n", "if", "box_coder", "is", "None", ":", "\n", "            ", "box_coder", "=", "BoxCoder", "(", "weights", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", "\n", "", "self", ".", "box_coder", "=", "box_coder", "\n", "\n", "if", "fpn_post_nms_top_n", "is", "None", ":", "\n", "            ", "fpn_post_nms_top_n", "=", "post_nms_top_n", "\n", "", "self", ".", "fpn_post_nms_top_n", "=", "fpn_post_nms_top_n", "\n", "\n", "", "def", "add_gt_proposals", "(", "self", ",", "proposals", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            proposals: list[BoxList]\n            targets: list[BoxList]\n        \"\"\"", "\n", "# Get the device we're operating on", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.engine.inference.inference": [[59, 130], ["logging.getLogger", "logging.getLogger.info", "dict", "os.path.join", "os.path.isfile", "torch.device", "utils.comm.get_world_size", "utils.timer.Timer", "utils.timer.Timer", "utils.timer.Timer.tic", "inference.compute_on_dataset", "utils.comm.synchronize", "utils.timer.Timer.toc", "utils.timer.get_time_str", "logging.getLogger.info", "utils.timer.get_time_str", "logging.getLogger.info", "inference._accumulate_predictions_from_multiple_gpus", "maskrcnn_benchmark.data.datasets.evaluation.evaluate", "torch.load", "logging.getLogger.info", "maskrcnn_benchmark.data.datasets.evaluation.evaluate", "utils.comm.is_main_process", "torch.save", "len", "os.path.join", "len", "len"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_world_size", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.engine.inference.compute_on_dataset", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.synchronize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.timer.get_time_str", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.timer.get_time_str", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.engine.inference._accumulate_predictions_from_multiple_gpus", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.evaluation.__init__.evaluate", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.evaluation.__init__.evaluate", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.is_main_process", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.save"], ["\n", "gt_boxes", "=", "[", "target", ".", "copy_with_fields", "(", "[", "]", ")", "for", "target", "in", "targets", "]", "\n", "\n", "# later cat of bbox requires all fields to be present for all bbox", "\n", "# so we need to add a dummy for objectness that's missing", "\n", "for", "gt_box", "in", "gt_boxes", ":", "\n", "            ", "gt_box", ".", "add_field", "(", "\"objectness\"", ",", "torch", ".", "ones", "(", "len", "(", "gt_box", ")", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "proposals", "=", "[", "\n", "cat_boxlist", "(", "(", "proposal", ",", "gt_box", ")", ")", "\n", "for", "proposal", ",", "gt_box", "in", "zip", "(", "proposals", ",", "gt_boxes", ")", "\n", "]", "\n", "\n", "return", "proposals", "\n", "\n", "", "def", "forward_for_single_feature_map", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            anchors: list[BoxList]\n            objectness: tensor of size N, A, H, W\n            box_regression: tensor of size N, A * 4, H, W\n        \"\"\"", "\n", "device", "=", "objectness", ".", "device", "\n", "N", ",", "A", ",", "H", ",", "W", "=", "objectness", ".", "shape", "\n", "\n", "# put in the same format as anchors", "\n", "objectness", "=", "permute_and_flatten", "(", "objectness", ",", "N", ",", "A", ",", "1", ",", "H", ",", "W", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "objectness", "=", "objectness", ".", "sigmoid", "(", ")", "\n", "\n", "box_regression", "=", "permute_and_flatten", "(", "box_regression", ",", "N", ",", "A", ",", "4", ",", "H", ",", "W", ")", "\n", "\n", "num_anchors", "=", "A", "*", "H", "*", "W", "\n", "\n", "pre_nms_top_n", "=", "min", "(", "self", ".", "pre_nms_top_n", ",", "num_anchors", ")", "\n", "objectness", ",", "topk_idx", "=", "objectness", ".", "topk", "(", "pre_nms_top_n", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "\n", "batch_idx", "=", "torch", ".", "arange", "(", "N", ",", "device", "=", "device", ")", "[", ":", ",", "None", "]", "\n", "box_regression", "=", "box_regression", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "image_shapes", "=", "[", "box", ".", "size", "for", "box", "in", "anchors", "]", "\n", "concat_anchors", "=", "torch", ".", "cat", "(", "[", "a", ".", "bbox", "for", "a", "in", "anchors", "]", ",", "dim", "=", "0", ")", "\n", "concat_anchors", "=", "concat_anchors", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "[", "batch_idx", ",", "topk_idx", "]", "\n", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "\n", "box_regression", ".", "view", "(", "-", "1", ",", "4", ")", ",", "concat_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "proposals", "=", "proposals", ".", "view", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "result", "=", "[", "]", "\n", "for", "proposal", ",", "score", ",", "im_shape", "in", "zip", "(", "proposals", ",", "objectness", ",", "image_shapes", ")", ":", "\n", "            ", "boxlist", "=", "BoxList", "(", "proposal", ",", "im_shape", ",", "mode", "=", "\"xyxy\"", ")", "\n", "boxlist", ".", "add_field", "(", "\"objectness\"", ",", "score", ")", "\n", "boxlist", "=", "boxlist", ".", "clip_to_image", "(", "remove_empty", "=", "False", ")", "\n", "boxlist", "=", "remove_small_boxes", "(", "boxlist", ",", "self", ".", "min_size", ")", "\n", "boxlist", "=", "boxlist_nms", "(", "\n", "boxlist", ",", "\n", "self", ".", "nms_thresh", ",", "\n", "max_proposals", "=", "self", ".", "post_nms_top_n", ",", "\n", "score_field", "=", "\"objectness\"", ",", "\n", ")", "\n", "result", ".", "append", "(", "boxlist", ")", "\n", "", "return", "result", "\n", "\n", "", "def", "forward", "(", "self", ",", "anchors", ",", "objectness", ",", "box_regression", ",", "targets", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.engine.trainer.reduce_loss_dict": [[13, 36], ["maskrcnn_benchmark.utils.comm.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "loss_dict.keys", "loss_names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_world_size", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_rank"], ["def", "reduce_loss_dict", "(", "loss_dict", ")", ":", "\n", "    ", "\"\"\"\n    Reduce the loss dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    loss_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "loss_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "loss_names", "=", "[", "]", "\n", "all_losses", "=", "[", "]", "\n", "for", "k", "in", "sorted", "(", "loss_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "loss_names", ".", "append", "(", "k", ")", "\n", "all_losses", ".", "append", "(", "loss_dict", "[", "k", "]", ")", "\n", "", "all_losses", "=", "torch", ".", "stack", "(", "all_losses", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "all_losses", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "all_losses", "/=", "world_size", "\n", "", "reduced_losses", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "loss_names", ",", "all_losses", ")", "}", "\n", "", "return", "reduced_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.engine.trainer.do_train": [[38, 118], ["logging.getLogger", "logging.getLogger.info", "maskrcnn_benchmark.utils.metric_logger.MetricLogger", "len", "model.train", "time.time", "time.time", "enumerate", "str", "logging.getLogger.info", "scheduler.step", "images.to.to", "isinstance", "model", "sum", "trainer.reduce_loss_dict", "sum", "maskrcnn_benchmark.utils.metric_logger.MetricLogger.update", "optimizer.zero_grad", "sum.backward", "optimizer.step", "time.time", "maskrcnn_benchmark.utils.metric_logger.MetricLogger.update", "str", "time.time", "datetime.timedelta", "time.time", "time.time", "datetime.timedelta", "logging.getLogger.info", "checkpointer.save", "checkpointer.save", "target.to", "maskrcnn_benchmark.utils.metric_logger.MetricLogger.delimiter.join().format", "target[].to", "target[].to", "model.values", "reduce_loss_dict.values", "int", "maskrcnn_benchmark.utils.metric_logger.MetricLogger.delimiter.join", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.tools.train_net.train", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.engine.trainer.reduce_loss_dict", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.layers.misc._NewEmptyTensorOp.backward", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.to"], ["", "def", "do_train", "(", "\n", "model", ",", "\n", "data_loader", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "\n", "checkpointer", ",", "\n", "device", ",", "\n", "checkpoint_period", ",", "\n", "arguments", ",", "\n", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"maskrcnn_benchmark.trainer\"", ")", "\n", "logger", ".", "info", "(", "\"Start training\"", ")", "\n", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "max_iter", "=", "len", "(", "data_loader", ")", "\n", "start_iter", "=", "arguments", "[", "\"iteration\"", "]", "\n", "model", ".", "train", "(", ")", "\n", "start_training_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "iteration", ",", "(", "images", ",", "targets", ",", "_", ")", "in", "enumerate", "(", "data_loader", ",", "start_iter", ")", ":", "\n", "        ", "data_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "iteration", "=", "iteration", "+", "1", "\n", "arguments", "[", "\"iteration\"", "]", "=", "iteration", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "if", "isinstance", "(", "targets", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "targets", "=", "[", "[", "target", "[", "0", "]", ".", "to", "(", "device", ")", "for", "target", "in", "targets", "]", ",", "\n", "[", "target", "[", "1", "]", ".", "to", "(", "device", ")", "for", "target", "in", "targets", "]", "]", "\n", "", "else", ":", "\n", "            ", "targets", "=", "[", "target", ".", "to", "(", "device", ")", "for", "target", "in", "targets", "]", "\n", "\n", "", "loss_dict", "=", "model", "(", "images", ",", "targets", ")", "\n", "\n", "losses", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict", ".", "values", "(", ")", ")", "\n", "\n", "# reduce losses over all GPUs for logging purposes", "\n", "loss_dict_reduced", "=", "reduce_loss_dict", "(", "loss_dict", ")", "\n", "losses_reduced", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict_reduced", ".", "values", "(", ")", ")", "\n", "meters", ".", "update", "(", "loss", "=", "losses_reduced", ",", "**", "loss_dict_reduced", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "losses", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "batch_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "meters", ".", "update", "(", "time", "=", "batch_time", ",", "data", "=", "data_time", ")", "\n", "\n", "eta_seconds", "=", "meters", ".", "time", ".", "global_avg", "*", "(", "max_iter", "-", "iteration", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "\n", "if", "iteration", "%", "20", "==", "0", "or", "iteration", "==", "max_iter", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "meters", ".", "delimiter", ".", "join", "(", "\n", "[", "\n", "\"eta: {eta}\"", ",", "\n", "\"iter: {iter}\"", ",", "\n", "\"{meters}\"", ",", "\n", "\"lr: {lr:.6f}\"", ",", "\n", "\"max mem: {memory:.0f}\"", ",", "\n", "]", "\n", ")", ".", "format", "(", "\n", "eta", "=", "eta_string", ",", "\n", "iter", "=", "iteration", ",", "\n", "meters", "=", "str", "(", "meters", ")", ",", "\n", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "1024.0", "/", "1024.0", ",", "\n", ")", "\n", ")", "\n", "", "if", "iteration", "%", "checkpoint_period", "==", "0", ":", "\n", "            ", "checkpointer", ".", "save", "(", "\"model_{:07d}\"", ".", "format", "(", "iteration", ")", ",", "**", "arguments", ")", "\n", "", "if", "iteration", "==", "max_iter", ":", "\n", "            ", "checkpointer", ".", "save", "(", "\"model_final\"", ",", "**", "arguments", ")", "\n", "\n", "", "", "total_training_time", "=", "time", ".", "time", "(", ")", "-", "start_training_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "total_training_time", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"Total training time: {} ({:.4f} s / it)\"", ".", "format", "(", "\n", "total_time_str", ",", "total_training_time", "/", "(", "max_iter", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.data.build.build_dataset": [[17, 58], ["isinstance", "RuntimeError", "dataset_catalog.get", "getattr", "getattr.", "datasets.append", "len", "datasets.ConcatDataset"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.config.paths_catalog.ModelCatalog.get"], ["def", "build_dataset", "(", "dataset_list", ",", "transforms", ",", "dataset_catalog", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Arguments:\n        dataset_list (list[str]): Contains the names of the datasets, i.e.,\n            coco_2014_trian, coco_2014_val, etc\n        transforms (callable): transforms to apply to each (image, target) sample\n        dataset_catalog (DatasetCatalog): contains the information on how to\n            construct a dataset.\n        is_train (bool): whether to setup the dataset for training or testing\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "dataset_list", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"dataset_list should be a list of strings, got {}\"", ".", "format", "(", "dataset_list", ")", "\n", ")", "\n", "", "datasets", "=", "[", "]", "\n", "for", "dataset_name", "in", "dataset_list", ":", "\n", "        ", "data", "=", "dataset_catalog", ".", "get", "(", "dataset_name", ")", "\n", "factory", "=", "getattr", "(", "D", ",", "data", "[", "\"factory\"", "]", ")", "\n", "args", "=", "data", "[", "\"args\"", "]", "\n", "# for COCODataset, we want to remove images without annotations", "\n", "# during training", "\n", "if", "data", "[", "\"factory\"", "]", "in", "[", "\"COCODataset\"", ",", "\n", "\"WordDataset\"", "]", ":", "\n", "            ", "args", "[", "\"remove_images_without_annotations\"", "]", "=", "is_train", "\n", "", "if", "data", "[", "\"factory\"", "]", "==", "\"PascalVOCDataset\"", ":", "\n", "            ", "args", "[", "\"use_difficult\"", "]", "=", "not", "is_train", "\n", "", "args", "[", "\"transforms\"", "]", "=", "transforms", "\n", "# make dataset from factory", "\n", "dataset", "=", "factory", "(", "**", "args", ")", "\n", "datasets", ".", "append", "(", "dataset", ")", "\n", "\n", "# for testing, return a list of datasets", "\n", "", "if", "not", "is_train", ":", "\n", "        ", "return", "datasets", "\n", "\n", "# for training, concatenate all datasets into a single one", "\n", "", "dataset", "=", "datasets", "[", "0", "]", "\n", "if", "len", "(", "datasets", ")", ">", "1", ":", "\n", "        ", "dataset", "=", "D", ".", "ConcatDataset", "(", "datasets", ")", "\n", "\n", "", "return", "[", "dataset", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.data.build.make_data_sampler": [[60, 68], ["samplers.DistributedSampler", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.SequentialSampler"], "function", ["None"], ["", "def", "make_data_sampler", "(", "dataset", ",", "shuffle", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "return", "samplers", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "shuffle", ")", "\n", "", "if", "shuffle", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "RandomSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SequentialSampler", "(", "dataset", ")", "\n", "", "return", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.data.build._quantize": [[70, 75], ["copy.copy", "sorted", "list", "map", "bisect.bisect_right"], "function", ["None"], ["", "def", "_quantize", "(", "x", ",", "bins", ")", ":", "\n", "    ", "bins", "=", "copy", ".", "copy", "(", "bins", ")", "\n", "bins", "=", "sorted", "(", "bins", ")", "\n", "quantized", "=", "list", "(", "map", "(", "lambda", "y", ":", "bisect", ".", "bisect_right", "(", "bins", ",", "y", ")", ",", "x", ")", ")", "\n", "return", "quantized", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.data.build._compute_aspect_ratios": [[77, 84], ["range", "len", "dataset.get_img_info", "aspect_ratios.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset.get_img_info"], ["", "def", "_compute_aspect_ratios", "(", "dataset", ")", ":", "\n", "    ", "aspect_ratios", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "img_info", "=", "dataset", ".", "get_img_info", "(", "i", ")", "\n", "aspect_ratio", "=", "float", "(", "img_info", "[", "\"height\"", "]", ")", "/", "float", "(", "img_info", "[", "\"width\"", "]", ")", "\n", "aspect_ratios", ".", "append", "(", "aspect_ratio", ")", "\n", "", "return", "aspect_ratios", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.data.build.make_batch_data_sampler": [[86, 106], ["build._compute_aspect_ratios", "build._quantize", "samplers.GroupedBatchSampler", "torch.utils.data.sampler.BatchSampler", "samplers.IterationBasedBatchSampler", "isinstance"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.data.build._compute_aspect_ratios", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.data.build._quantize"], ["", "def", "make_batch_data_sampler", "(", "\n", "dataset", ",", "sampler", ",", "aspect_grouping", ",", "images_per_batch", ",", "num_iters", "=", "None", ",", "start_iter", "=", "0", "\n", ")", ":", "\n", "    ", "if", "aspect_grouping", ":", "\n", "        ", "if", "not", "isinstance", "(", "aspect_grouping", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "aspect_grouping", "=", "[", "aspect_grouping", "]", "\n", "", "aspect_ratios", "=", "_compute_aspect_ratios", "(", "dataset", ")", "\n", "group_ids", "=", "_quantize", "(", "aspect_ratios", ",", "aspect_grouping", ")", "\n", "batch_sampler", "=", "samplers", ".", "GroupedBatchSampler", "(", "\n", "sampler", ",", "group_ids", ",", "images_per_batch", ",", "drop_uneven", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "        ", "batch_sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "BatchSampler", "(", "\n", "sampler", ",", "images_per_batch", ",", "drop_last", "=", "False", "\n", ")", "\n", "", "if", "num_iters", "is", "not", "None", ":", "\n", "        ", "batch_sampler", "=", "samplers", ".", "IterationBasedBatchSampler", "(", "\n", "batch_sampler", ",", "num_iters", ",", "start_iter", "\n", ")", "\n", "", "return", "batch_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.data.build.make_data_loader": [[108, 177], ["maskrcnn_benchmark.utils.comm.get_world_size", "maskrcnn_benchmark.utils.imports.import_file", "transforms.build_transforms", "build.build_dataset", "logging.getLogger", "logging.getLogger.warning", "build.make_data_sampler", "build.make_batch_data_sampler", "collate_batch.BatchCollator", "torch.utils.data.DataLoader", "data_loaders.append", "len"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_world_size", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.build.build_transforms", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.data.build.build_dataset", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.data.build.make_data_sampler", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.data.build.make_batch_data_sampler"], ["", "def", "make_data_loader", "(", "cfg", ",", "is_train", "=", "True", ",", "is_distributed", "=", "False", ",", "start_iter", "=", "0", ")", ":", "\n", "    ", "num_gpus", "=", "get_world_size", "(", ")", "\n", "if", "is_train", ":", "\n", "        ", "images_per_batch", "=", "cfg", ".", "SOLVER", ".", "IMS_PER_BATCH", "\n", "assert", "(", "\n", "images_per_batch", "%", "num_gpus", "==", "0", "\n", ")", ",", "\"SOLVER.IMS_PER_BATCH ({}) must be divisible by the number \"", "\n", "\"of GPUs ({}) used.\"", ".", "format", "(", "images_per_batch", ",", "num_gpus", ")", "\n", "images_per_gpu", "=", "images_per_batch", "//", "num_gpus", "\n", "shuffle", "=", "True", "\n", "num_iters", "=", "cfg", ".", "SOLVER", ".", "MAX_ITER", "\n", "", "else", ":", "\n", "        ", "images_per_batch", "=", "cfg", ".", "TEST", ".", "IMS_PER_BATCH", "\n", "assert", "(", "\n", "images_per_batch", "%", "num_gpus", "==", "0", "\n", ")", ",", "\"TEST.IMS_PER_BATCH ({}) must be divisible by the number \"", "\n", "\"of GPUs ({}) used.\"", ".", "format", "(", "images_per_batch", ",", "num_gpus", ")", "\n", "images_per_gpu", "=", "images_per_batch", "//", "num_gpus", "\n", "shuffle", "=", "False", "if", "not", "is_distributed", "else", "True", "\n", "num_iters", "=", "None", "\n", "start_iter", "=", "0", "\n", "\n", "", "if", "images_per_gpu", ">", "1", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "warning", "(", "\n", "\"When using more than one image per GPU you may encounter \"", "\n", "\"an out-of-memory (OOM) error if your GPU does not have \"", "\n", "\"sufficient memory. If this happens, you can reduce \"", "\n", "\"SOLVER.IMS_PER_BATCH (for training) or \"", "\n", "\"TEST.IMS_PER_BATCH (for inference). For training, you must \"", "\n", "\"also adjust the learning rate and schedule length according \"", "\n", "\"to the linear scaling rule. See for example: \"", "\n", "\"https://github.com/facebookresearch/Detectron/blob/master/configs/getting_started/tutorial_1gpu_e2e_faster_rcnn_R-50-FPN.yaml#L14\"", "\n", ")", "\n", "\n", "# group images which have similar aspect ratio. In this case, we only", "\n", "# group in two cases: those with width / height > 1, and the other way around,", "\n", "# but the code supports more general grouping strategy", "\n", "", "aspect_grouping", "=", "[", "1", "]", "if", "cfg", ".", "DATALOADER", ".", "ASPECT_RATIO_GROUPING", "else", "[", "]", "\n", "\n", "paths_catalog", "=", "import_file", "(", "\n", "\"maskrcnn_benchmark.config.paths_catalog\"", ",", "cfg", ".", "PATHS_CATALOG", ",", "True", "\n", ")", "\n", "DatasetCatalog", "=", "paths_catalog", ".", "DatasetCatalog", "\n", "dataset_list", "=", "cfg", ".", "DATASETS", ".", "TRAIN", "if", "is_train", "else", "cfg", ".", "DATASETS", ".", "TEST", "\n", "\n", "transforms", "=", "build_transforms", "(", "cfg", ",", "is_train", ")", "\n", "datasets", "=", "build_dataset", "(", "dataset_list", ",", "transforms", ",", "DatasetCatalog", ",", "is_train", ")", "\n", "\n", "data_loaders", "=", "[", "]", "\n", "for", "dataset", "in", "datasets", ":", "\n", "        ", "sampler", "=", "make_data_sampler", "(", "dataset", ",", "shuffle", ",", "is_distributed", ")", "\n", "batch_sampler", "=", "make_batch_data_sampler", "(", "\n", "dataset", ",", "sampler", ",", "aspect_grouping", ",", "images_per_gpu", ",", "num_iters", ",", "start_iter", "\n", ")", "\n", "collator", "=", "BatchCollator", "(", "cfg", ".", "DATALOADER", ".", "SIZE_DIVISIBILITY", ")", "\n", "num_workers", "=", "cfg", ".", "DATALOADER", ".", "NUM_WORKERS", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_sampler", "=", "batch_sampler", ",", "\n", "collate_fn", "=", "collator", ",", "\n", ")", "\n", "data_loaders", ".", "append", "(", "data_loader", ")", "\n", "", "if", "is_train", ":", "\n", "# during training, a single (possibly concatenated) data_loader is returned", "\n", "        ", "assert", "len", "(", "data_loaders", ")", "==", "1", "\n", "return", "data_loaders", "[", "0", "]", "\n", "", "return", "data_loaders", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.data.collate_batch.BatchCollator.__init__": [[12, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size_divisible", "=", "0", ")", ":", "\n", "        ", "self", ".", "size_divisible", "=", "size_divisible", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.data.collate_batch.BatchCollator.__call__": [[15, 21], ["list", "maskrcnn_benchmark.structures.image_list.to_image_list", "zip"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.image_list.to_image_list"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "transposed_batch", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "images", "=", "to_image_list", "(", "transposed_batch", "[", "0", "]", ",", "self", ".", "size_divisible", ")", "\n", "targets", "=", "transposed_batch", "[", "1", "]", "\n", "img_ids", "=", "transposed_batch", "[", "2", "]", "\n", "return", "images", ",", "targets", ",", "img_ids", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.coco.COCODataset.__init__": [[40, 65], ["super().__init__", "sorted", "coco.COCODataset.coco.getAnnIds", "coco.COCODataset.coco.loadAnns", "coco.has_valid_annotation", "enumerate", "coco.COCODataset.json_category_id_to_contiguous_id.items", "enumerate", "ids.append", "coco.COCODataset.coco.getCatIds"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.coco.has_valid_annotation"], ["    ", "def", "__init__", "(", "\n", "self", ",", "ann_file", ",", "root", ",", "remove_images_without_annotations", ",", "transforms", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", "COCODataset", ",", "self", ")", ".", "__init__", "(", "root", ",", "ann_file", ")", "\n", "# sort indices for reproducible results", "\n", "self", ".", "ids", "=", "sorted", "(", "self", ".", "ids", ")", "\n", "\n", "# filter images without detection annotations", "\n", "if", "remove_images_without_annotations", ":", "\n", "            ", "ids", "=", "[", "]", "\n", "for", "img_id", "in", "self", ".", "ids", ":", "\n", "                ", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ",", "iscrowd", "=", "None", ")", "\n", "anno", "=", "self", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "if", "has_valid_annotation", "(", "anno", ")", ":", "\n", "                    ", "ids", ".", "append", "(", "img_id", ")", "\n", "", "", "self", ".", "ids", "=", "ids", "\n", "\n", "", "self", ".", "json_category_id_to_contiguous_id", "=", "{", "\n", "v", ":", "i", "+", "1", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "coco", ".", "getCatIds", "(", ")", ")", "\n", "}", "\n", "self", ".", "contiguous_category_id_to_json_id", "=", "{", "\n", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "json_category_id_to_contiguous_id", ".", "items", "(", ")", "\n", "}", "\n", "self", ".", "id_to_img_map", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "ids", ")", "}", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.coco.COCODataset.__getitem__": [[66, 97], ["super().__getitem__", "torch.as_tensor().reshape", "maskrcnn_benchmark.structures.bounding_box.BoxList().convert", "torch.tensor", "target.clip_to_image.clip_to_image.add_field", "maskrcnn_benchmark.structures.segmentation_mask.SegmentationMask", "target.clip_to_image.clip_to_image.add_field", "target.clip_to_image.clip_to_image.clip_to_image", "maskrcnn_benchmark.structures.keypoint.PersonKeypoints", "target.clip_to_image.clip_to_image.add_field", "coco.COCODataset.transforms", "torch.as_tensor", "maskrcnn_benchmark.structures.bounding_box.BoxList"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset.__getitem__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.clip_to_image", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", ",", "anno", "=", "super", "(", "COCODataset", ",", "self", ")", ".", "__getitem__", "(", "idx", ")", "\n", "\n", "# filter crowd annotations", "\n", "# TODO might be better to add an extra field", "\n", "anno", "=", "[", "obj", "for", "obj", "in", "anno", "if", "obj", "[", "\"iscrowd\"", "]", "==", "0", "]", "\n", "\n", "boxes", "=", "[", "obj", "[", "\"bbox\"", "]", "for", "obj", "in", "anno", "]", "\n", "boxes", "=", "torch", ".", "as_tensor", "(", "boxes", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "# guard against no boxes", "\n", "target", "=", "BoxList", "(", "boxes", ",", "img", ".", "size", ",", "mode", "=", "\"xywh\"", ")", ".", "convert", "(", "\"xyxy\"", ")", "\n", "\n", "classes", "=", "[", "obj", "[", "\"category_id\"", "]", "for", "obj", "in", "anno", "]", "\n", "classes", "=", "[", "self", ".", "json_category_id_to_contiguous_id", "[", "c", "]", "for", "c", "in", "classes", "]", "\n", "classes", "=", "torch", ".", "tensor", "(", "classes", ")", "\n", "target", ".", "add_field", "(", "\"labels\"", ",", "classes", ")", "\n", "\n", "masks", "=", "[", "obj", "[", "\"segmentation\"", "]", "for", "obj", "in", "anno", "]", "\n", "masks", "=", "SegmentationMask", "(", "masks", ",", "img", ".", "size", ",", "mode", "=", "'poly'", ")", "\n", "target", ".", "add_field", "(", "\"masks\"", ",", "masks", ")", "\n", "\n", "if", "anno", "and", "\"keypoints\"", "in", "anno", "[", "0", "]", ":", "\n", "            ", "keypoints", "=", "[", "obj", "[", "\"keypoints\"", "]", "for", "obj", "in", "anno", "]", "\n", "keypoints", "=", "PersonKeypoints", "(", "keypoints", ",", "img", ".", "size", ")", "\n", "target", ".", "add_field", "(", "\"keypoints\"", ",", "keypoints", ")", "\n", "\n", "", "target", "=", "target", ".", "clip_to_image", "(", "remove_empty", "=", "True", ")", "\n", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "transforms", "(", "img", ",", "target", ")", "\n", "\n", "", "return", "img", ",", "target", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.coco.COCODataset.get_img_info": [[98, 102], ["None"], "methods", ["None"], ["", "def", "get_img_info", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "id_to_img_map", "[", "index", "]", "\n", "img_data", "=", "self", ".", "coco", ".", "imgs", "[", "img_id", "]", "\n", "return", "img_data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.coco._count_visible_keypoints": [[13, 15], ["sum", "sum"], "function", ["None"], ["def", "_count_visible_keypoints", "(", "anno", ")", ":", "\n", "    ", "return", "sum", "(", "sum", "(", "1", "for", "v", "in", "ann", "[", "\"keypoints\"", "]", "[", "2", ":", ":", "3", "]", "if", "v", ">", "0", ")", "for", "ann", "in", "anno", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.coco._has_only_empty_bbox": [[17, 19], ["all", "any"], "function", ["None"], ["", "def", "_has_only_empty_bbox", "(", "anno", ")", ":", "\n", "    ", "return", "all", "(", "any", "(", "o", "<=", "1", "for", "o", "in", "obj", "[", "\"bbox\"", "]", "[", "2", ":", "]", ")", "for", "obj", "in", "anno", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.coco.has_valid_annotation": [[21, 37], ["coco._has_only_empty_bbox", "len", "coco._count_visible_keypoints"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.coco._has_only_empty_bbox", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.coco._count_visible_keypoints"], ["", "def", "has_valid_annotation", "(", "anno", ")", ":", "\n", "# if it's empty, there is no annotation", "\n", "    ", "if", "len", "(", "anno", ")", "==", "0", ":", "\n", "        ", "return", "False", "\n", "# if all boxes have close to zero area, there is no annotation", "\n", "", "if", "_has_only_empty_bbox", "(", "anno", ")", ":", "\n", "        ", "return", "False", "\n", "# keypoints task have a slight different critera for considering", "\n", "# if an annotation is valid", "\n", "", "if", "\"keypoints\"", "not", "in", "anno", "[", "0", "]", ":", "\n", "        ", "return", "True", "\n", "# for keypoint detection tasks, only consider valid images those", "\n", "# containing at least min_keypoints_per_image", "\n", "", "if", "_count_visible_keypoints", "(", "anno", ")", ">=", "min_keypoints_per_image", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.list_dataset.ListDataset.__init__": [[12, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_lists", ",", "transforms", "=", "None", ")", ":", "\n", "        ", "self", ".", "image_lists", "=", "image_lists", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.list_dataset.ListDataset.__getitem__": [[16, 27], ["PIL.Image.open().convert", "maskrcnn_benchmark.structures.bounding_box.BoxList", "list_dataset.ListDataset.transforms", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "image_lists", "[", "item", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "# dummy target", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "target", "=", "BoxList", "(", "[", "[", "0", ",", "0", ",", "w", ",", "h", "]", "]", ",", "img", ".", "size", ",", "mode", "=", "\"xyxy\"", ")", "\n", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "transforms", "(", "img", ",", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.list_dataset.ListDataset.__len__": [[28, 30], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_lists", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.list_dataset.ListDataset.get_img_info": [[31, 37], ["None"], "methods", ["None"], ["", "def", "get_img_info", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"\n        Return the image dimensions for the image, without\n        loading and pre-processing it\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.word_dataset.WordDataset.__init__": [[13, 36], ["super().__init__", "sorted", "enumerate", "word_dataset.WordDataset.json_category_id_to_contiguous_id.items", "enumerate", "word_dataset.WordDataset.coco.getCatIds", "len", "word_dataset.WordDataset.coco.getAnnIds"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "ann_file", ",", "root", ",", "remove_images_without_annotations", ",", "transforms", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", "WordDataset", ",", "self", ")", ".", "__init__", "(", "root", ",", "ann_file", ")", "\n", "# sort indices for reproducible results", "\n", "self", ".", "ids", "=", "sorted", "(", "self", ".", "ids", ")", "\n", "\n", "# filter images without detection annotations", "\n", "if", "remove_images_without_annotations", ":", "\n", "            ", "self", ".", "ids", "=", "[", "\n", "img_id", "\n", "for", "img_id", "in", "self", ".", "ids", "\n", "if", "len", "(", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ",", "iscrowd", "=", "None", ")", ")", ">", "0", "\n", "]", "\n", "\n", "", "self", ".", "json_category_id_to_contiguous_id", "=", "{", "\n", "v", ":", "i", "+", "1", "for", "i", ",", "v", "in", "enumerate", "(", "self", ".", "coco", ".", "getCatIds", "(", ")", ")", "\n", "}", "\n", "self", ".", "contiguous_category_id_to_json_id", "=", "{", "\n", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "json_category_id_to_contiguous_id", ".", "items", "(", ")", "\n", "}", "\n", "self", ".", "id_to_img_map", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "ids", ")", "}", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.word_dataset.WordDataset.kes_encode": [[37, 49], ["int", "range", "kes_encode.append", "len", "len"], "methods", ["None"], ["", "def", "kes_encode", "(", "self", ",", "kes", ")", ":", "\n", "        ", "kes_encode", "=", "[", "]", "\n", "for", "i", "in", "kes", ":", "\n", "            ", "mnx", "=", "i", "[", "0", "]", "\n", "mny", "=", "i", "[", "1", "]", "\n", "assert", "(", "len", "(", "i", ")", "%", "3", "==", "0", ")", "\n", "npts", "=", "int", "(", "len", "(", "i", ")", "/", "3", "-", "2", ")", "\n", "for", "index", "in", "range", "(", "npts", ")", ":", "\n", "                ", "i", "[", "3", "+", "index", "*", "3", "]", "=", "(", "i", "[", "3", "+", "index", "*", "3", "]", "+", "mnx", ")", "/", "2", "\n", "i", "[", "4", "+", "index", "*", "3", "]", "=", "(", "i", "[", "4", "+", "index", "*", "3", "]", "+", "mny", ")", "/", "2", "\n", "", "kes_encode", ".", "append", "(", "i", ")", "\n", "", "return", "kes_encode", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.word_dataset.WordDataset.kes_gen": [[50, 62], ["kes_gen_out.append", "len"], "methods", ["None"], ["", "def", "kes_gen", "(", "self", ",", "kes", ")", ":", "\n", "        ", "kes_gen_out", "=", "[", "]", "\n", "for", "i", "in", "kes", ":", "\n", "            ", "mnx", "=", "i", "[", "0", "]", "\n", "mny", "=", "i", "[", "1", "]", "\n", "cx", "=", "i", "[", "27", "]", "\n", "cy", "=", "i", "[", "28", "]", "\n", "assert", "(", "len", "(", "i", ")", "%", "3", "==", "0", ")", "\n", "ot", "=", "[", "mnx", ",", "i", "[", "3", "]", ",", "i", "[", "6", "]", ",", "i", "[", "9", "]", ",", "i", "[", "12", "]", ",", "cx", ",", "mny", ",", "i", "[", "16", "]", ",", "i", "[", "19", "]", ",", "i", "[", "22", "]", ",", "i", "[", "25", "]", ",", "cy", "]", "\n", "kes_gen_out", ".", "append", "(", "ot", ")", "\n", "", "return", "kes_gen_out", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.word_dataset.WordDataset.__getitem__": [[63, 104], ["super().__getitem__", "torch.as_tensor().reshape", "maskrcnn_benchmark.structures.bounding_box.BoxList().convert", "torch.tensor", "target.clip_to_image.clip_to_image.add_field", "maskrcnn_benchmark.structures.segmentation_mask.SegmentationMask", "target.clip_to_image.clip_to_image.add_field", "target.clip_to_image.clip_to_image.clip_to_image", "print", "print", "print", "word_dataset.WordDataset.kes_gen", "maskrcnn_benchmark.structures.ke.textKES", "target.clip_to_image.clip_to_image.add_field", "maskrcnn_benchmark.structures.mty.MTY", "target.clip_to_image.clip_to_image.add_field", "word_dataset.WordDataset.transforms", "len", "torch.as_tensor", "maskrcnn_benchmark.structures.bounding_box.BoxList", "len", "len", "print", "len"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset.__getitem__", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.clip_to_image", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.RandomRotation.kes_gen", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", ",", "anno", "=", "super", "(", "WordDataset", ",", "self", ")", ".", "__getitem__", "(", "idx", ")", "\n", "\n", "# filter crowd annotations", "\n", "# TODO might be better to add an extra field", "\n", "anno", "=", "[", "obj", "for", "obj", "in", "anno", "if", "obj", "[", "\"iscrowd\"", "]", "==", "0", "]", "\n", "\n", "boxes", "=", "[", "obj", "[", "\"bbox\"", "]", "for", "obj", "in", "anno", "]", "\n", "if", "DEBUG", ":", "print", "(", "'len(boxes)'", ",", "len", "(", "boxes", ")", ",", "boxes", "[", "0", "]", ")", "\n", "boxes", "=", "torch", ".", "as_tensor", "(", "boxes", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "# guard against no boxes", "\n", "target", "=", "BoxList", "(", "boxes", ",", "img", ".", "size", ",", "mode", "=", "\"xywh\"", ")", ".", "convert", "(", "\"xyxy\"", ")", "\n", "\n", "classes", "=", "[", "obj", "[", "\"category_id\"", "]", "for", "obj", "in", "anno", "]", "\n", "if", "DEBUG", ":", "print", "(", "'len(classes)'", ",", "len", "(", "classes", ")", ",", "classes", "[", "0", "]", ")", "\n", "classes", "=", "[", "self", ".", "json_category_id_to_contiguous_id", "[", "c", "]", "for", "c", "in", "classes", "]", "\n", "classes", "=", "torch", ".", "tensor", "(", "classes", ")", "\n", "target", ".", "add_field", "(", "\"labels\"", ",", "classes", ")", "\n", "\n", "masks", "=", "[", "obj", "[", "\"segmentation\"", "]", "for", "obj", "in", "anno", "]", "\n", "if", "DEBUG", ":", "print", "(", "'len(masks)'", ",", "len", "(", "masks", ")", ",", "masks", "[", "0", "]", ")", "\n", "masks", "=", "SegmentationMask", "(", "masks", ",", "img", ".", "size", ")", "\n", "target", ".", "add_field", "(", "\"masks\"", ",", "masks", ")", "\n", "\n", "if", "anno", "and", "'keypoints'", "in", "anno", "[", "0", "]", ":", "\n", "            ", "kes", "=", "[", "obj", "[", "\"keypoints\"", "]", "for", "obj", "in", "anno", "]", "\n", "kes", "=", "self", ".", "kes_gen", "(", "kes", ")", "\n", "if", "DEBUG", ":", "print", "(", "'len(kes)'", ",", "len", "(", "kes", ")", ",", "kes", "[", "0", "]", ")", "\n", "kes", "=", "textKES", "(", "kes", ",", "img", ".", "size", ")", "\n", "target", ".", "add_field", "(", "\"kes\"", ",", "kes", ")", "\n", "\n", "", "if", "anno", "and", "'match_type'", "in", "anno", "[", "0", "]", ":", "\n", "            ", "mty", "=", "[", "obj", "[", "\"match_type\"", "]", "for", "obj", "in", "anno", "]", "\n", "mty", "=", "MTY", "(", "mty", ",", "img", ".", "size", ")", "\n", "target", ".", "add_field", "(", "\"mty\"", ",", "mty", ")", "\n", "\n", "", "target", "=", "target", ".", "clip_to_image", "(", "remove_empty", "=", "True", ")", "\n", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "transforms", "(", "img", ",", "target", ")", "\n", "\n", "", "return", "img", ",", "target", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.word_dataset.WordDataset.get_img_info": [[105, 109], ["None"], "methods", ["None"], ["", "def", "get_img_info", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "id_to_img_map", "[", "index", "]", "\n", "img_data", "=", "self", ".", "coco", ".", "imgs", "[", "img_id", "]", "\n", "return", "img_data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.concat_dataset.ConcatDataset.get_idxs": [[13, 20], ["bisect.bisect_right"], "methods", ["None"], ["def", "get_idxs", "(", "self", ",", "idx", ")", ":", "\n", "        ", "dataset_idx", "=", "bisect", ".", "bisect_right", "(", "self", ".", "cumulative_sizes", ",", "idx", ")", "\n", "if", "dataset_idx", "==", "0", ":", "\n", "            ", "sample_idx", "=", "idx", "\n", "", "else", ":", "\n", "            ", "sample_idx", "=", "idx", "-", "self", ".", "cumulative_sizes", "[", "dataset_idx", "-", "1", "]", "\n", "", "return", "dataset_idx", ",", "sample_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.concat_dataset.ConcatDataset.get_img_info": [[21, 24], ["concat_dataset.ConcatDataset.get_idxs", "concat_dataset.ConcatDataset.datasets[].get_img_info"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.concat_dataset.ConcatDataset.get_idxs", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset.get_img_info"], ["", "def", "get_img_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "dataset_idx", ",", "sample_idx", "=", "self", ".", "get_idxs", "(", "idx", ")", "\n", "return", "self", ".", "datasets", "[", "dataset_idx", "]", ".", "get_img_info", "(", "sample_idx", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset.__init__": [[43, 60], ["os.path.join", "os.path.join", "os.path.join", "dict", "open", "f.readlines", "x.strip", "zip", "enumerate", "range", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_dir", ",", "split", ",", "use_difficult", "=", "False", ",", "transforms", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "data_dir", "\n", "self", ".", "image_set", "=", "split", "\n", "self", ".", "keep_difficult", "=", "use_difficult", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n", "self", ".", "_annopath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"Annotations\"", ",", "\"%s.xml\"", ")", "\n", "self", ".", "_imgpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"JPEGImages\"", ",", "\"%s.jpg\"", ")", "\n", "self", ".", "_imgsetpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"ImageSets\"", ",", "\"Main\"", ",", "\"%s.txt\"", ")", "\n", "\n", "with", "open", "(", "self", ".", "_imgsetpath", "%", "self", ".", "image_set", ")", "as", "f", ":", "\n", "            ", "self", ".", "ids", "=", "f", ".", "readlines", "(", ")", "\n", "", "self", ".", "ids", "=", "[", "x", ".", "strip", "(", "\"\\n\"", ")", "for", "x", "in", "self", ".", "ids", "]", "\n", "self", ".", "id_to_img_map", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "ids", ")", "}", "\n", "\n", "cls", "=", "PascalVOCDataset", ".", "CLASSES", "\n", "self", ".", "class_to_ind", "=", "dict", "(", "zip", "(", "cls", ",", "range", "(", "len", "(", "cls", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset.__getitem__": [[61, 72], ["PIL.Image.open().convert", "voc.PascalVOCDataset.get_groundtruth", "target.clip_to_image.clip_to_image.clip_to_image", "voc.PascalVOCDataset.transforms", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset.get_groundtruth", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.clip_to_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "ids", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "self", ".", "_imgpath", "%", "img_id", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "target", "=", "self", ".", "get_groundtruth", "(", "index", ")", "\n", "target", "=", "target", ".", "clip_to_image", "(", "remove_empty", "=", "True", ")", "\n", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "transforms", "(", "img", ",", "target", ")", "\n", "\n", "", "return", "img", ",", "target", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset.__len__": [[73, 75], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset.get_groundtruth": [[76, 86], ["ET.parse().getroot", "voc.PascalVOCDataset._preprocess_annotation", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "maskrcnn_benchmark.structures.bounding_box.BoxList.add_field", "ET.parse"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset._preprocess_annotation", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field"], ["", "def", "get_groundtruth", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "ids", "[", "index", "]", "\n", "anno", "=", "ET", ".", "parse", "(", "self", ".", "_annopath", "%", "img_id", ")", ".", "getroot", "(", ")", "\n", "anno", "=", "self", ".", "_preprocess_annotation", "(", "anno", ")", "\n", "\n", "height", ",", "width", "=", "anno", "[", "\"im_info\"", "]", "\n", "target", "=", "BoxList", "(", "anno", "[", "\"boxes\"", "]", ",", "(", "width", ",", "height", ")", ",", "mode", "=", "\"xyxy\"", ")", "\n", "target", ".", "add_field", "(", "\"labels\"", ",", "anno", "[", "\"labels\"", "]", ")", "\n", "target", ".", "add_field", "(", "\"difficult\"", ",", "anno", "[", "\"difficult\"", "]", ")", "\n", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset._preprocess_annotation": [[87, 125], ["target.iter", "target.find", "tuple", "obj.find().text.lower().strip", "obj.find", "tuple", "boxes.append", "gt_classes.append", "difficult_boxes.append", "map", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "int", "map", "obj.find().text.lower", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find", "list", "obj.find", "map", "target.find.find", "target.find.find", "obj.find"], "methods", ["None"], ["", "def", "_preprocess_annotation", "(", "self", ",", "target", ")", ":", "\n", "        ", "boxes", "=", "[", "]", "\n", "gt_classes", "=", "[", "]", "\n", "difficult_boxes", "=", "[", "]", "\n", "TO_REMOVE", "=", "1", "\n", "\n", "for", "obj", "in", "target", ".", "iter", "(", "\"object\"", ")", ":", "\n", "            ", "difficult", "=", "int", "(", "obj", ".", "find", "(", "\"difficult\"", ")", ".", "text", ")", "==", "1", "\n", "if", "not", "self", ".", "keep_difficult", "and", "difficult", ":", "\n", "                ", "continue", "\n", "", "name", "=", "obj", ".", "find", "(", "\"name\"", ")", ".", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "bb", "=", "obj", ".", "find", "(", "\"bndbox\"", ")", "\n", "# Make pixel indexes 0-based", "\n", "# Refer to \"https://github.com/rbgirshick/py-faster-rcnn/blob/master/lib/datasets/pascal_voc.py#L208-L211\"", "\n", "box", "=", "[", "\n", "bb", ".", "find", "(", "\"xmin\"", ")", ".", "text", ",", "\n", "bb", ".", "find", "(", "\"ymin\"", ")", ".", "text", ",", "\n", "bb", ".", "find", "(", "\"xmax\"", ")", ".", "text", ",", "\n", "bb", ".", "find", "(", "\"ymax\"", ")", ".", "text", ",", "\n", "]", "\n", "bndbox", "=", "tuple", "(", "\n", "map", "(", "lambda", "x", ":", "x", "-", "TO_REMOVE", ",", "list", "(", "map", "(", "int", ",", "box", ")", ")", ")", "\n", ")", "\n", "\n", "boxes", ".", "append", "(", "bndbox", ")", "\n", "gt_classes", ".", "append", "(", "self", ".", "class_to_ind", "[", "name", "]", ")", "\n", "difficult_boxes", ".", "append", "(", "difficult", ")", "\n", "\n", "", "size", "=", "target", ".", "find", "(", "\"size\"", ")", "\n", "im_info", "=", "tuple", "(", "map", "(", "int", ",", "(", "size", ".", "find", "(", "\"height\"", ")", ".", "text", ",", "size", ".", "find", "(", "\"width\"", ")", ".", "text", ")", ")", ")", "\n", "\n", "res", "=", "{", "\n", "\"boxes\"", ":", "torch", ".", "tensor", "(", "boxes", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "\"labels\"", ":", "torch", ".", "tensor", "(", "gt_classes", ")", ",", "\n", "\"difficult\"", ":", "torch", ".", "tensor", "(", "difficult_boxes", ")", ",", "\n", "\"im_info\"", ":", "im_info", ",", "\n", "}", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset.get_img_info": [[126, 132], ["ET.parse().getroot", "ET.parse().getroot.find", "tuple", "map", "ET.parse", "ET.parse().getroot.find.find", "ET.parse().getroot.find.find"], "methods", ["None"], ["", "def", "get_img_info", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "ids", "[", "index", "]", "\n", "anno", "=", "ET", ".", "parse", "(", "self", ".", "_annopath", "%", "img_id", ")", ".", "getroot", "(", ")", "\n", "size", "=", "anno", ".", "find", "(", "\"size\"", ")", "\n", "im_info", "=", "tuple", "(", "map", "(", "int", ",", "(", "size", ".", "find", "(", "\"height\"", ")", ".", "text", ",", "size", ".", "find", "(", "\"width\"", ")", ".", "text", ")", ")", ")", "\n", "return", "{", "\"height\"", ":", "im_info", "[", "0", "]", ",", "\"width\"", ":", "im_info", "[", "1", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset.map_class_id_to_class_name": [[133, 135], ["None"], "methods", ["None"], ["", "def", "map_class_id_to_class_name", "(", "self", ",", "class_id", ")", ":", "\n", "        ", "return", "PascalVOCDataset", ".", "CLASSES", "[", "class_id", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.evaluation.__init__.evaluate": [[8, 31], ["dict", "isinstance", "coco.coco_evaluation", "isinstance", "voc.voc_evaluation", "isinstance", "word.word_evaluation", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.coco.__init__.coco_evaluation", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.voc.__init__.voc_evaluation", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.__init__.word_evaluation"], []], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.coco.coco_eval.COCOResults.__init__": [[343, 352], ["all", "collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "iou_types", ")", ":", "\n", "        ", "allowed_types", "=", "(", "\"box_proposal\"", ",", "\"bbox\"", ",", "\"segm\"", ",", "\"keypoints\"", ")", "\n", "assert", "all", "(", "iou_type", "in", "allowed_types", "for", "iou_type", "in", "iou_types", ")", "\n", "results", "=", "OrderedDict", "(", ")", "\n", "for", "iou_type", "in", "iou_types", ":", "\n", "            ", "results", "[", "iou_type", "]", "=", "OrderedDict", "(", "\n", "[", "(", "metric", ",", "-", "1", ")", "for", "metric", "in", "COCOResults", ".", "METRICS", "[", "iou_type", "]", "]", "\n", ")", "\n", "", "self", ".", "results", "=", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.coco.coco_eval.COCOResults.update": [[353, 365], ["isinstance", "enumerate"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "coco_eval", ")", ":", "\n", "        ", "if", "coco_eval", "is", "None", ":", "\n", "            ", "return", "\n", "", "from", "pycocotools", ".", "cocoeval", "import", "COCOeval", "\n", "\n", "assert", "isinstance", "(", "coco_eval", ",", "COCOeval", ")", "\n", "s", "=", "coco_eval", ".", "stats", "\n", "iou_type", "=", "coco_eval", ".", "params", ".", "iouType", "\n", "res", "=", "self", ".", "results", "[", "iou_type", "]", "\n", "metrics", "=", "COCOResults", ".", "METRICS", "[", "iou_type", "]", "\n", "for", "idx", ",", "metric", "in", "enumerate", "(", "metrics", ")", ":", "\n", "            ", "res", "[", "metric", "]", "=", "s", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.coco.coco_eval.COCOResults.__repr__": [[366, 369], ["repr"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "# TODO make it pretty", "\n", "        ", "return", "repr", "(", "self", ".", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.coco.coco_eval.do_coco_evaluation": [[13, 68], ["logging.getLogger", "logging.getLogger.info", "coco_eval.COCOResults", "logging.getLogger.info", "logging.getLogger.info", "coco_eval.check_expected_results", "logging.getLogger.info", "coco_eval.COCOResults", "logging.getLogger.info", "coco_eval.check_expected_results", "logging.getLogger.info", "coco_eval.prepare_for_coco_detection", "logging.getLogger.info", "coco_eval.prepare_for_coco_segmentation", "logging.getLogger.info", "coco_eval.prepare_for_coco_keypoint", "torch.save", "areas.items", "torch.save", "tempfile.NamedTemporaryFile", "coco_eval.evaluate_predictions_on_coco", "coco_eval.COCOResults.update", "os.path.join", "coco_eval.evaluate_box_proposals", "stats[].item", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.check_expected_results", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.check_expected_results", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.prepare_for_coco_detection", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.prepare_for_coco_segmentation", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.coco.coco_eval.prepare_for_coco_keypoint", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.evaluate_predictions_on_coco", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.evaluate_box_proposals"], ["def", "do_coco_evaluation", "(", "\n", "dataset", ",", "\n", "predictions", ",", "\n", "box_only", ",", "\n", "output_folder", ",", "\n", "iou_types", ",", "\n", "expected_results", ",", "\n", "expected_results_sigma_tol", ",", "\n", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"maskrcnn_benchmark.inference\"", ")", "\n", "\n", "if", "box_only", ":", "\n", "        ", "logger", ".", "info", "(", "\"Evaluating bbox proposals\"", ")", "\n", "areas", "=", "{", "\"all\"", ":", "\"\"", ",", "\"small\"", ":", "\"s\"", ",", "\"medium\"", ":", "\"m\"", ",", "\"large\"", ":", "\"l\"", "}", "\n", "res", "=", "COCOResults", "(", "\"box_proposal\"", ")", "\n", "for", "limit", "in", "[", "100", ",", "1000", "]", ":", "\n", "            ", "for", "area", ",", "suffix", "in", "areas", ".", "items", "(", ")", ":", "\n", "                ", "stats", "=", "evaluate_box_proposals", "(", "\n", "predictions", ",", "dataset", ",", "area", "=", "area", ",", "limit", "=", "limit", "\n", ")", "\n", "key", "=", "\"AR{}@{:d}\"", ".", "format", "(", "suffix", ",", "limit", ")", "\n", "res", ".", "results", "[", "\"box_proposal\"", "]", "[", "key", "]", "=", "stats", "[", "\"ar\"", "]", ".", "item", "(", ")", "\n", "", "", "logger", ".", "info", "(", "res", ")", "\n", "check_expected_results", "(", "res", ",", "expected_results", ",", "expected_results_sigma_tol", ")", "\n", "if", "output_folder", ":", "\n", "            ", "torch", ".", "save", "(", "res", ",", "os", ".", "path", ".", "join", "(", "output_folder", ",", "\"box_proposals.pth\"", ")", ")", "\n", "", "return", "\n", "", "logger", ".", "info", "(", "\"Preparing results for COCO format\"", ")", "\n", "coco_results", "=", "{", "}", "\n", "if", "\"bbox\"", "in", "iou_types", ":", "\n", "        ", "logger", ".", "info", "(", "\"Preparing bbox results\"", ")", "\n", "coco_results", "[", "\"bbox\"", "]", "=", "prepare_for_coco_detection", "(", "predictions", ",", "dataset", ")", "\n", "", "if", "\"segm\"", "in", "iou_types", ":", "\n", "        ", "logger", ".", "info", "(", "\"Preparing segm results\"", ")", "\n", "coco_results", "[", "\"segm\"", "]", "=", "prepare_for_coco_segmentation", "(", "predictions", ",", "dataset", ")", "\n", "", "if", "'keypoints'", "in", "iou_types", ":", "\n", "        ", "logger", ".", "info", "(", "'Preparing keypoints results'", ")", "\n", "coco_results", "[", "'keypoints'", "]", "=", "prepare_for_coco_keypoint", "(", "predictions", ",", "dataset", ")", "\n", "\n", "", "results", "=", "COCOResults", "(", "*", "iou_types", ")", "\n", "logger", ".", "info", "(", "\"Evaluating predictions\"", ")", "\n", "for", "iou_type", "in", "iou_types", ":", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "f", ":", "\n", "            ", "file_path", "=", "f", ".", "name", "\n", "if", "output_folder", ":", "\n", "                ", "file_path", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "iou_type", "+", "\".json\"", ")", "\n", "", "res", "=", "evaluate_predictions_on_coco", "(", "\n", "dataset", ".", "coco", ",", "coco_results", "[", "iou_type", "]", ",", "file_path", ",", "iou_type", "\n", ")", "\n", "results", ".", "update", "(", "res", ")", "\n", "", "", "logger", ".", "info", "(", "results", ")", "\n", "check_expected_results", "(", "results", ",", "expected_results", ",", "expected_results_sigma_tol", ")", "\n", "if", "output_folder", ":", "\n", "        ", "torch", ".", "save", "(", "results", ",", "os", ".", "path", ".", "join", "(", "output_folder", ",", "\"coco_results.pth\"", ")", ")", "\n", "", "return", "results", ",", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.coco.coco_eval.prepare_for_coco_detection": [[70, 102], ["enumerate", "dataset.get_img_info", "prediction.convert.resize", "prediction.convert.convert", "prediction.convert.bbox.tolist", "prediction.convert.get_field().tolist", "prediction.convert.get_field().tolist", "coco_results.extend", "len", "prediction.convert.get_field", "prediction.convert.get_field", "enumerate"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset.get_img_info", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["", "def", "prepare_for_coco_detection", "(", "predictions", ",", "dataset", ")", ":", "\n", "# assert isinstance(dataset, COCODataset)", "\n", "    ", "coco_results", "=", "[", "]", "\n", "for", "image_id", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "        ", "original_id", "=", "dataset", ".", "id_to_img_map", "[", "image_id", "]", "\n", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "img_info", "=", "dataset", ".", "get_img_info", "(", "image_id", ")", "\n", "image_width", "=", "img_info", "[", "\"width\"", "]", "\n", "image_height", "=", "img_info", "[", "\"height\"", "]", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "prediction", "=", "prediction", ".", "convert", "(", "\"xywh\"", ")", "\n", "\n", "boxes", "=", "prediction", ".", "bbox", ".", "tolist", "(", ")", "\n", "scores", "=", "prediction", ".", "get_field", "(", "\"scores\"", ")", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", ".", "get_field", "(", "\"labels\"", ")", ".", "tolist", "(", ")", "\n", "\n", "mapped_labels", "=", "[", "dataset", ".", "contiguous_category_id_to_json_id", "[", "i", "]", "for", "i", "in", "labels", "]", "\n", "\n", "coco_results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "mapped_labels", "[", "k", "]", ",", "\n", "\"bbox\"", ":", "box", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", ",", "box", "in", "enumerate", "(", "boxes", ")", "\n", "]", "\n", ")", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.coco.coco_eval.prepare_for_coco_segmentation": [[104, 156], ["maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.Masker", "tqdm.tqdm", "enumerate", "dataset.get_img_info", "prediction.resize.resize", "prediction.resize.get_field", "prediction.resize.get_field().tolist", "prediction.resize.get_field().tolist", "coco_results.extend", "len", "list", "maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.Masker.", "rle[].decode", "masker.expand", "prediction.resize.get_field", "prediction.resize.get_field", "mask_util.encode", "np.array", "enumerate"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset.get_img_info", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.box_coder.BoxCoder.decode", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.box_coder.BoxCoder.encode"], ["", "def", "prepare_for_coco_segmentation", "(", "predictions", ",", "dataset", ")", ":", "\n", "    ", "import", "pycocotools", ".", "mask", "as", "mask_util", "\n", "import", "numpy", "as", "np", "\n", "\n", "masker", "=", "Masker", "(", "threshold", "=", "0.5", ",", "padding", "=", "1", ")", "\n", "# assert isinstance(dataset, COCODataset)", "\n", "coco_results", "=", "[", "]", "\n", "for", "image_id", ",", "prediction", "in", "tqdm", "(", "enumerate", "(", "predictions", ")", ")", ":", "\n", "        ", "original_id", "=", "dataset", ".", "id_to_img_map", "[", "image_id", "]", "\n", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "img_info", "=", "dataset", ".", "get_img_info", "(", "image_id", ")", "\n", "image_width", "=", "img_info", "[", "\"width\"", "]", "\n", "image_height", "=", "img_info", "[", "\"height\"", "]", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "masks", "=", "prediction", ".", "get_field", "(", "\"mask\"", ")", "\n", "# t = time.time()", "\n", "# Masker is necessary only if masks haven't been already resized.", "\n", "if", "list", "(", "masks", ".", "shape", "[", "-", "2", ":", "]", ")", "!=", "[", "image_height", ",", "image_width", "]", ":", "\n", "            ", "masks", "=", "masker", "(", "masks", ".", "expand", "(", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ",", "prediction", ")", "\n", "masks", "=", "masks", "[", "0", "]", "\n", "# logger.info('Time mask: {}'.format(time.time() - t))", "\n", "# prediction = prediction.convert('xywh')", "\n", "\n", "# boxes = prediction.bbox.tolist()", "\n", "", "scores", "=", "prediction", ".", "get_field", "(", "\"scores\"", ")", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", ".", "get_field", "(", "\"labels\"", ")", ".", "tolist", "(", ")", "\n", "\n", "# rles = prediction.get_field('mask')", "\n", "\n", "rles", "=", "[", "\n", "mask_util", ".", "encode", "(", "np", ".", "array", "(", "mask", "[", "0", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "order", "=", "\"F\"", ")", ")", "[", "0", "]", "\n", "for", "mask", "in", "masks", "\n", "]", "\n", "for", "rle", "in", "rles", ":", "\n", "            ", "rle", "[", "\"counts\"", "]", "=", "rle", "[", "\"counts\"", "]", ".", "decode", "(", "\"utf-8\"", ")", "\n", "\n", "", "mapped_labels", "=", "[", "dataset", ".", "contiguous_category_id_to_json_id", "[", "i", "]", "for", "i", "in", "labels", "]", "\n", "\n", "coco_results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "mapped_labels", "[", "k", "]", ",", "\n", "\"segmentation\"", ":", "rle", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", ",", "rle", "in", "enumerate", "(", "rles", ")", "\n", "]", "\n", ")", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.coco.coco_eval.prepare_for_coco_keypoint": [[158, 187], ["enumerate", "prediction.convert.resize", "prediction.convert.convert", "prediction.convert.bbox.tolist", "prediction.convert.get_field().tolist", "prediction.convert.get_field().tolist", "prediction.convert.get_field", "keypoints.keypoints.view().tolist.resize", "keypoints.keypoints.view().tolist.keypoints.view().tolist", "coco_results.extend", "len", "prediction.convert.get_field", "prediction.convert.get_field", "keypoints.keypoints.view().tolist.keypoints.view", "enumerate"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["", "def", "prepare_for_coco_keypoint", "(", "predictions", ",", "dataset", ")", ":", "\n", "# assert isinstance(dataset, COCODataset)", "\n", "    ", "coco_results", "=", "[", "]", "\n", "for", "image_id", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "        ", "original_id", "=", "dataset", ".", "id_to_img_map", "[", "image_id", "]", "\n", "if", "len", "(", "prediction", ".", "bbox", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "# TODO replace with get_img_info?", "\n", "", "image_width", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "'width'", "]", "\n", "image_height", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "'height'", "]", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "prediction", "=", "prediction", ".", "convert", "(", "'xywh'", ")", "\n", "\n", "boxes", "=", "prediction", ".", "bbox", ".", "tolist", "(", ")", "\n", "scores", "=", "prediction", ".", "get_field", "(", "'scores'", ")", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", ".", "get_field", "(", "'labels'", ")", ".", "tolist", "(", ")", "\n", "keypoints", "=", "prediction", ".", "get_field", "(", "'keypoints'", ")", "\n", "keypoints", "=", "keypoints", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "keypoints", "=", "keypoints", ".", "keypoints", ".", "view", "(", "keypoints", ".", "keypoints", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "mapped_labels", "=", "[", "dataset", ".", "contiguous_category_id_to_json_id", "[", "i", "]", "for", "i", "in", "labels", "]", "\n", "\n", "coco_results", ".", "extend", "(", "[", "{", "\n", "'image_id'", ":", "original_id", ",", "\n", "'category_id'", ":", "mapped_labels", "[", "k", "]", ",", "\n", "'keypoints'", ":", "keypoint", ",", "\n", "'score'", ":", "scores", "[", "k", "]", "}", "for", "k", ",", "keypoint", "in", "enumerate", "(", "keypoints", ")", "]", ")", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.coco.coco_eval.evaluate_box_proposals": [[189, 302], ["enumerate", "torch.cat", "torch.sort", "torch.zeros_like", "enumerate", "torch.zeros_like.mean", "dataset.get_img_info", "prediction.resize.resize", "dataset.coco.getAnnIds", "dataset.coco.loadAnns", "torch.as_tensor().reshape", "maskrcnn_benchmark.structures.bounding_box.BoxList().convert", "torch.as_tensor", "len", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "torch.zeros", "range", "torch.cat.append", "torch.arange", "prediction.resize.get_field().sort", "len", "len", "len", "len", "min", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou.max", "max_overlaps.max", "float", "torch.as_tensor", "maskrcnn_benchmark.structures.bounding_box.BoxList", "len", "len", "len", "prediction.resize.get_field"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset.get_img_info", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["", "def", "evaluate_box_proposals", "(", "\n", "predictions", ",", "dataset", ",", "thresholds", "=", "None", ",", "area", "=", "\"all\"", ",", "limit", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"Evaluate detection proposal recall metrics. This function is a much\n    faster alternative to the official COCO API recall evaluation code. However,\n    it produces slightly different results.\n    \"\"\"", "\n", "# Record max overlap value for each gt box", "\n", "# Return vector of overlap values", "\n", "areas", "=", "{", "\n", "\"all\"", ":", "0", ",", "\n", "\"small\"", ":", "1", ",", "\n", "\"medium\"", ":", "2", ",", "\n", "\"large\"", ":", "3", ",", "\n", "\"96-128\"", ":", "4", ",", "\n", "\"128-256\"", ":", "5", ",", "\n", "\"256-512\"", ":", "6", ",", "\n", "\"512-inf\"", ":", "7", ",", "\n", "}", "\n", "area_ranges", "=", "[", "\n", "[", "0", "**", "2", ",", "1e5", "**", "2", "]", ",", "# all", "\n", "[", "0", "**", "2", ",", "32", "**", "2", "]", ",", "# small", "\n", "[", "32", "**", "2", ",", "96", "**", "2", "]", ",", "# medium", "\n", "[", "96", "**", "2", ",", "1e5", "**", "2", "]", ",", "# large", "\n", "[", "96", "**", "2", ",", "128", "**", "2", "]", ",", "# 96-128", "\n", "[", "128", "**", "2", ",", "256", "**", "2", "]", ",", "# 128-256", "\n", "[", "256", "**", "2", ",", "512", "**", "2", "]", ",", "# 256-512", "\n", "[", "512", "**", "2", ",", "1e5", "**", "2", "]", ",", "\n", "]", "# 512-inf", "\n", "assert", "area", "in", "areas", ",", "\"Unknown area range: {}\"", ".", "format", "(", "area", ")", "\n", "area_range", "=", "area_ranges", "[", "areas", "[", "area", "]", "]", "\n", "gt_overlaps", "=", "[", "]", "\n", "num_pos", "=", "0", "\n", "\n", "for", "image_id", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "        ", "original_id", "=", "dataset", ".", "id_to_img_map", "[", "image_id", "]", "\n", "\n", "img_info", "=", "dataset", ".", "get_img_info", "(", "image_id", ")", "\n", "image_width", "=", "img_info", "[", "\"width\"", "]", "\n", "image_height", "=", "img_info", "[", "\"height\"", "]", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "\n", "# sort predictions in descending order", "\n", "# TODO maybe remove this and make it explicit in the documentation", "\n", "inds", "=", "prediction", ".", "get_field", "(", "\"objectness\"", ")", ".", "sort", "(", "descending", "=", "True", ")", "[", "1", "]", "\n", "prediction", "=", "prediction", "[", "inds", "]", "\n", "\n", "ann_ids", "=", "dataset", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "original_id", ")", "\n", "anno", "=", "dataset", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "gt_boxes", "=", "[", "obj", "[", "\"bbox\"", "]", "for", "obj", "in", "anno", "if", "obj", "[", "\"iscrowd\"", "]", "==", "0", "]", "\n", "gt_boxes", "=", "torch", ".", "as_tensor", "(", "gt_boxes", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "# guard against no boxes", "\n", "gt_boxes", "=", "BoxList", "(", "gt_boxes", ",", "(", "image_width", ",", "image_height", ")", ",", "mode", "=", "\"xywh\"", ")", ".", "convert", "(", "\n", "\"xyxy\"", "\n", ")", "\n", "gt_areas", "=", "torch", ".", "as_tensor", "(", "[", "obj", "[", "\"area\"", "]", "for", "obj", "in", "anno", "if", "obj", "[", "\"iscrowd\"", "]", "==", "0", "]", ")", "\n", "\n", "if", "len", "(", "gt_boxes", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "valid_gt_inds", "=", "(", "gt_areas", ">=", "area_range", "[", "0", "]", ")", "&", "(", "gt_areas", "<=", "area_range", "[", "1", "]", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", "valid_gt_inds", "]", "\n", "\n", "num_pos", "+=", "len", "(", "gt_boxes", ")", "\n", "\n", "if", "len", "(", "gt_boxes", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "limit", "is", "not", "None", "and", "len", "(", "prediction", ")", ">", "limit", ":", "\n", "            ", "prediction", "=", "prediction", "[", ":", "limit", "]", "\n", "\n", "", "overlaps", "=", "boxlist_iou", "(", "prediction", ",", "gt_boxes", ")", "\n", "\n", "_gt_overlaps", "=", "torch", ".", "zeros", "(", "len", "(", "gt_boxes", ")", ")", "\n", "for", "j", "in", "range", "(", "min", "(", "len", "(", "prediction", ")", ",", "len", "(", "gt_boxes", ")", ")", ")", ":", "\n", "# find which proposal box maximally covers each gt box", "\n", "# and get the iou amount of coverage for each gt box", "\n", "            ", "max_overlaps", ",", "argmax_overlaps", "=", "overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "\n", "# find which gt box is 'best' covered (i.e. 'best' = most iou)", "\n", "gt_ovr", ",", "gt_ind", "=", "max_overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "assert", "gt_ovr", ">=", "0", "\n", "# find the proposal box that covers the best covered gt box", "\n", "box_ind", "=", "argmax_overlaps", "[", "gt_ind", "]", "\n", "# record the iou coverage of this gt box", "\n", "_gt_overlaps", "[", "j", "]", "=", "overlaps", "[", "box_ind", ",", "gt_ind", "]", "\n", "assert", "_gt_overlaps", "[", "j", "]", "==", "gt_ovr", "\n", "# mark the proposal box and the gt box as used", "\n", "overlaps", "[", "box_ind", ",", ":", "]", "=", "-", "1", "\n", "overlaps", "[", ":", ",", "gt_ind", "]", "=", "-", "1", "\n", "\n", "# append recorded iou coverage level", "\n", "", "gt_overlaps", ".", "append", "(", "_gt_overlaps", ")", "\n", "", "gt_overlaps", "=", "torch", ".", "cat", "(", "gt_overlaps", ",", "dim", "=", "0", ")", "\n", "gt_overlaps", ",", "_", "=", "torch", ".", "sort", "(", "gt_overlaps", ")", "\n", "\n", "if", "thresholds", "is", "None", ":", "\n", "        ", "step", "=", "0.05", "\n", "thresholds", "=", "torch", ".", "arange", "(", "0.5", ",", "0.95", "+", "1e-5", ",", "step", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "recalls", "=", "torch", ".", "zeros_like", "(", "thresholds", ")", "\n", "# compute recall for each iou threshold", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "recalls", "[", "i", "]", "=", "(", "gt_overlaps", ">=", "t", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "/", "float", "(", "num_pos", ")", "\n", "# ar = 2 * np.trapz(recalls, thresholds)", "\n", "", "ar", "=", "recalls", ".", "mean", "(", ")", "\n", "return", "{", "\n", "\"ar\"", ":", "ar", ",", "\n", "\"recalls\"", ":", "recalls", ",", "\n", "\"thresholds\"", ":", "thresholds", ",", "\n", "\"gt_overlaps\"", ":", "gt_overlaps", ",", "\n", "\"num_pos\"", ":", "num_pos", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.coco.coco_eval.evaluate_predictions_on_coco": [[305, 324], ["COCOeval", "COCOeval.evaluate", "COCOeval.accumulate", "COCOeval.summarize", "open", "json.dump", "coco_gt.loadRes", "COCO", "str"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.evaluation.__init__.evaluate"], ["", "def", "evaluate_predictions_on_coco", "(", "\n", "coco_gt", ",", "coco_results", ",", "json_result_file", ",", "iou_type", "=", "\"bbox\"", "\n", ")", ":", "\n", "    ", "import", "json", "\n", "\n", "with", "open", "(", "json_result_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "coco_results", ",", "f", ")", "\n", "\n", "", "from", "pycocotools", ".", "coco", "import", "COCO", "\n", "from", "pycocotools", ".", "cocoeval", "import", "COCOeval", "\n", "\n", "coco_dt", "=", "coco_gt", ".", "loadRes", "(", "str", "(", "json_result_file", ")", ")", "if", "coco_results", "else", "COCO", "(", ")", "\n", "\n", "# coco_dt = coco_gt.loadRes(coco_results)", "\n", "coco_eval", "=", "COCOeval", "(", "coco_gt", ",", "coco_dt", ",", "iou_type", ")", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "return", "coco_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.coco.coco_eval.check_expected_results": [[371, 391], ["logging.getLogger", "logging.getLogger.error", "logging.getLogger.info"], "function", ["None"], ["", "", "def", "check_expected_results", "(", "results", ",", "expected_results", ",", "sigma_tol", ")", ":", "\n", "    ", "if", "not", "expected_results", ":", "\n", "        ", "return", "\n", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", "\"maskrcnn_benchmark.inference\"", ")", "\n", "for", "task", ",", "metric", ",", "(", "mean", ",", "std", ")", "in", "expected_results", ":", "\n", "        ", "actual_val", "=", "results", ".", "results", "[", "task", "]", "[", "metric", "]", "\n", "lo", "=", "mean", "-", "sigma_tol", "*", "std", "\n", "hi", "=", "mean", "+", "sigma_tol", "*", "std", "\n", "ok", "=", "(", "lo", "<", "actual_val", ")", "and", "(", "actual_val", "<", "hi", ")", "\n", "msg", "=", "(", "\n", "\"{} > {} sanity check (actual vs. expected): \"", "\n", "\"{:.3f} vs. mean={:.4f}, std={:.4}, range=({:.4f}, {:.4f})\"", "\n", ")", ".", "format", "(", "task", ",", "metric", ",", "actual_val", ",", "mean", ",", "std", ",", "lo", ",", "hi", ")", "\n", "if", "not", "ok", ":", "\n", "            ", "msg", "=", "\"FAIL: \"", "+", "msg", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"PASS: \"", "+", "msg", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.coco.__init__.coco_evaluation": [[4, 21], ["coco_eval.do_coco_evaluation"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.do_coco_evaluation"], []], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.voc.voc_eval.do_voc_evaluation": [[12, 44], ["enumerate", "voc_eval.eval_detection_voc", "enumerate", "logger.info", "dataset.get_img_info", "prediction.resize.resize", "pred_boxlists.append", "dataset.get_groundtruth", "gt_boxlists.append", "dataset.map_class_id_to_class_name", "open", "fid.write", "os.path.join"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.voc.voc_eval.eval_detection_voc", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset.get_img_info", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset.get_groundtruth", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.datasets.voc.PascalVOCDataset.map_class_id_to_class_name"], ["def", "do_voc_evaluation", "(", "dataset", ",", "predictions", ",", "output_folder", ",", "logger", ")", ":", "\n", "# TODO need to make the use_07_metric format available", "\n", "# for the user to choose", "\n", "    ", "pred_boxlists", "=", "[", "]", "\n", "gt_boxlists", "=", "[", "]", "\n", "for", "image_id", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "        ", "img_info", "=", "dataset", ".", "get_img_info", "(", "image_id", ")", "\n", "image_width", "=", "img_info", "[", "\"width\"", "]", "\n", "image_height", "=", "img_info", "[", "\"height\"", "]", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "pred_boxlists", ".", "append", "(", "prediction", ")", "\n", "\n", "gt_boxlist", "=", "dataset", ".", "get_groundtruth", "(", "image_id", ")", "\n", "gt_boxlists", ".", "append", "(", "gt_boxlist", ")", "\n", "", "result", "=", "eval_detection_voc", "(", "\n", "pred_boxlists", "=", "pred_boxlists", ",", "\n", "gt_boxlists", "=", "gt_boxlists", ",", "\n", "iou_thresh", "=", "0.5", ",", "\n", "use_07_metric", "=", "True", ",", "\n", ")", "\n", "result_str", "=", "\"mAP: {:.4f}\\n\"", ".", "format", "(", "result", "[", "\"map\"", "]", ")", "\n", "for", "i", ",", "ap", "in", "enumerate", "(", "result", "[", "\"ap\"", "]", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "# skip background", "\n", "            ", "continue", "\n", "", "result_str", "+=", "\"{:<16}: {:.4f}\\n\"", ".", "format", "(", "\n", "dataset", ".", "map_class_id_to_class_name", "(", "i", ")", ",", "ap", "\n", ")", "\n", "", "logger", ".", "info", "(", "result_str", ")", "\n", "if", "output_folder", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_folder", ",", "\"result.txt\"", ")", ",", "\"w\"", ")", "as", "fid", ":", "\n", "            ", "fid", ".", "write", "(", "result_str", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.voc.voc_eval.eval_detection_voc": [[46, 64], ["voc_eval.calc_detection_voc_prec_rec", "voc_eval.calc_detection_voc_ap", "len", "len", "numpy.nanmean"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.voc.voc_eval.calc_detection_voc_prec_rec", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.voc.voc_eval.calc_detection_voc_ap"], ["", "def", "eval_detection_voc", "(", "pred_boxlists", ",", "gt_boxlists", ",", "iou_thresh", "=", "0.5", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\"Evaluate on voc dataset.\n    Args:\n        pred_boxlists(list[BoxList]): pred boxlist, has labels and scores fields.\n        gt_boxlists(list[BoxList]): ground truth boxlist, has labels field.\n        iou_thresh: iou thresh\n        use_07_metric: boolean\n    Returns:\n        dict represents the results\n    \"\"\"", "\n", "assert", "len", "(", "gt_boxlists", ")", "==", "len", "(", "\n", "pred_boxlists", "\n", ")", ",", "\"Length of gt and pred lists need to be same.\"", "\n", "prec", ",", "rec", "=", "calc_detection_voc_prec_rec", "(", "\n", "pred_boxlists", "=", "pred_boxlists", ",", "gt_boxlists", "=", "gt_boxlists", ",", "iou_thresh", "=", "iou_thresh", "\n", ")", "\n", "ap", "=", "calc_detection_voc_ap", "(", "prec", ",", "rec", ",", "use_07_metric", "=", "use_07_metric", ")", "\n", "return", "{", "\"ap\"", ":", "ap", ",", "\"map\"", ":", "np", ".", "nanmean", "(", "ap", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.voc.voc_eval.calc_detection_voc_prec_rec": [[66, 156], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "zip", "collections.defaultdict.keys", "pred_boxlist.bbox.numpy", "pred_boxlist.get_field().numpy", "pred_boxlist.get_field().numpy", "gt_boxlist.bbox.numpy", "gt_boxlist.get_field().numpy", "gt_boxlist.get_field().numpy", "numpy.unique", "max", "numpy.array", "numpy.array", "numpy.cumsum", "numpy.cumsum", "numpy.concatenate().astype", "numpy.logical_not().sum", "score[].extend", "pred_bbox_l.copy.copy", "gt_bbox_l.copy.copy", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou().numpy", "boxlist_iou().numpy.argmax", "numpy.zeros", "collections.defaultdict.keys", "np.array.argsort", "pred_boxlist.get_field", "pred_boxlist.get_field", "gt_boxlist.get_field", "gt_boxlist.get_field", "pred_score_l.argsort", "len", "len", "match[].extend", "numpy.concatenate", "numpy.logical_not", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "match[].append", "maskrcnn_benchmark.structures.bounding_box.BoxList", "maskrcnn_benchmark.structures.bounding_box.BoxList", "boxlist_iou().numpy.max", "match[].append", "match[].append", "match[].append"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.boxlist_iou"], ["", "def", "calc_detection_voc_prec_rec", "(", "gt_boxlists", ",", "pred_boxlists", ",", "iou_thresh", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"Calculate precision and recall based on evaluation code of PASCAL VOC.\n    This function calculates precision and recall of\n    predicted bounding boxes obtained from a dataset which has :math:`N`\n    images.\n    The code is based on the evaluation code used in PASCAL VOC Challenge.\n   \"\"\"", "\n", "n_pos", "=", "defaultdict", "(", "int", ")", "\n", "score", "=", "defaultdict", "(", "list", ")", "\n", "match", "=", "defaultdict", "(", "list", ")", "\n", "for", "gt_boxlist", ",", "pred_boxlist", "in", "zip", "(", "gt_boxlists", ",", "pred_boxlists", ")", ":", "\n", "        ", "pred_bbox", "=", "pred_boxlist", ".", "bbox", ".", "numpy", "(", ")", "\n", "pred_label", "=", "pred_boxlist", ".", "get_field", "(", "\"labels\"", ")", ".", "numpy", "(", ")", "\n", "pred_score", "=", "pred_boxlist", ".", "get_field", "(", "\"scores\"", ")", ".", "numpy", "(", ")", "\n", "gt_bbox", "=", "gt_boxlist", ".", "bbox", ".", "numpy", "(", ")", "\n", "gt_label", "=", "gt_boxlist", ".", "get_field", "(", "\"labels\"", ")", ".", "numpy", "(", ")", "\n", "gt_difficult", "=", "gt_boxlist", ".", "get_field", "(", "\"difficult\"", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "l", "in", "np", ".", "unique", "(", "np", ".", "concatenate", "(", "(", "pred_label", ",", "gt_label", ")", ")", ".", "astype", "(", "int", ")", ")", ":", "\n", "            ", "pred_mask_l", "=", "pred_label", "==", "l", "\n", "pred_bbox_l", "=", "pred_bbox", "[", "pred_mask_l", "]", "\n", "pred_score_l", "=", "pred_score", "[", "pred_mask_l", "]", "\n", "# sort by score", "\n", "order", "=", "pred_score_l", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "pred_bbox_l", "=", "pred_bbox_l", "[", "order", "]", "\n", "pred_score_l", "=", "pred_score_l", "[", "order", "]", "\n", "\n", "gt_mask_l", "=", "gt_label", "==", "l", "\n", "gt_bbox_l", "=", "gt_bbox", "[", "gt_mask_l", "]", "\n", "gt_difficult_l", "=", "gt_difficult", "[", "gt_mask_l", "]", "\n", "\n", "n_pos", "[", "l", "]", "+=", "np", ".", "logical_not", "(", "gt_difficult_l", ")", ".", "sum", "(", ")", "\n", "score", "[", "l", "]", ".", "extend", "(", "pred_score_l", ")", "\n", "\n", "if", "len", "(", "pred_bbox_l", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "len", "(", "gt_bbox_l", ")", "==", "0", ":", "\n", "                ", "match", "[", "l", "]", ".", "extend", "(", "(", "0", ",", ")", "*", "pred_bbox_l", ".", "shape", "[", "0", "]", ")", "\n", "continue", "\n", "\n", "# VOC evaluation follows integer typed bounding boxes.", "\n", "", "pred_bbox_l", "=", "pred_bbox_l", ".", "copy", "(", ")", "\n", "pred_bbox_l", "[", ":", ",", "2", ":", "]", "+=", "1", "\n", "gt_bbox_l", "=", "gt_bbox_l", ".", "copy", "(", ")", "\n", "gt_bbox_l", "[", ":", ",", "2", ":", "]", "+=", "1", "\n", "iou", "=", "boxlist_iou", "(", "\n", "BoxList", "(", "pred_bbox_l", ",", "gt_boxlist", ".", "size", ")", ",", "\n", "BoxList", "(", "gt_bbox_l", ",", "gt_boxlist", ".", "size", ")", ",", "\n", ")", ".", "numpy", "(", ")", "\n", "gt_index", "=", "iou", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "# set -1 if there is no matching ground truth", "\n", "gt_index", "[", "iou", ".", "max", "(", "axis", "=", "1", ")", "<", "iou_thresh", "]", "=", "-", "1", "\n", "del", "iou", "\n", "\n", "selec", "=", "np", ".", "zeros", "(", "gt_bbox_l", ".", "shape", "[", "0", "]", ",", "dtype", "=", "bool", ")", "\n", "for", "gt_idx", "in", "gt_index", ":", "\n", "                ", "if", "gt_idx", ">=", "0", ":", "\n", "                    ", "if", "gt_difficult_l", "[", "gt_idx", "]", ":", "\n", "                        ", "match", "[", "l", "]", ".", "append", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                        ", "if", "not", "selec", "[", "gt_idx", "]", ":", "\n", "                            ", "match", "[", "l", "]", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                            ", "match", "[", "l", "]", ".", "append", "(", "0", ")", "\n", "", "", "selec", "[", "gt_idx", "]", "=", "True", "\n", "", "else", ":", "\n", "                    ", "match", "[", "l", "]", ".", "append", "(", "0", ")", "\n", "\n", "", "", "", "", "n_fg_class", "=", "max", "(", "n_pos", ".", "keys", "(", ")", ")", "+", "1", "\n", "prec", "=", "[", "None", "]", "*", "n_fg_class", "\n", "rec", "=", "[", "None", "]", "*", "n_fg_class", "\n", "\n", "for", "l", "in", "n_pos", ".", "keys", "(", ")", ":", "\n", "        ", "score_l", "=", "np", ".", "array", "(", "score", "[", "l", "]", ")", "\n", "match_l", "=", "np", ".", "array", "(", "match", "[", "l", "]", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "\n", "order", "=", "score_l", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "match_l", "=", "match_l", "[", "order", "]", "\n", "\n", "tp", "=", "np", ".", "cumsum", "(", "match_l", "==", "1", ")", "\n", "fp", "=", "np", ".", "cumsum", "(", "match_l", "==", "0", ")", "\n", "\n", "# If an element of fp + tp is 0,", "\n", "# the corresponding element of prec[l] is nan.", "\n", "prec", "[", "l", "]", "=", "tp", "/", "(", "fp", "+", "tp", ")", "\n", "# If n_pos[l] is 0, rec[l] is None.", "\n", "if", "n_pos", "[", "l", "]", ">", "0", ":", "\n", "            ", "rec", "[", "l", "]", "=", "tp", "/", "n_pos", "[", "l", "]", "\n", "\n", "", "", "return", "prec", ",", "rec", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.voc.voc_eval.calc_detection_voc_ap": [[158, 215], ["len", "numpy.empty", "range", "numpy.arange", "numpy.concatenate", "numpy.concatenate", "numpy.sum", "numpy.maximum.accumulate", "numpy.where", "numpy.sum", "numpy.max", "numpy.nan_to_num", "numpy.nan_to_num"], "function", ["None"], ["", "def", "calc_detection_voc_ap", "(", "prec", ",", "rec", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculate average precisions based on evaluation code of PASCAL VOC.\n    This function calculates average precisions\n    from given precisions and recalls.\n    The code is based on the evaluation code used in PASCAL VOC Challenge.\n    Args:\n        prec (list of numpy.array): A list of arrays.\n            :obj:`prec[l]` indicates precision for class :math:`l`.\n            If :obj:`prec[l]` is :obj:`None`, this function returns\n            :obj:`numpy.nan` for class :math:`l`.\n        rec (list of numpy.array): A list of arrays.\n            :obj:`rec[l]` indicates recall for class :math:`l`.\n            If :obj:`rec[l]` is :obj:`None`, this function returns\n            :obj:`numpy.nan` for class :math:`l`.\n        use_07_metric (bool): Whether to use PASCAL VOC 2007 evaluation metric\n            for calculating average precision. The default value is\n            :obj:`False`.\n    Returns:\n        ~numpy.ndarray:\n        This function returns an array of average precisions.\n        The :math:`l`-th value corresponds to the average precision\n        for class :math:`l`. If :obj:`prec[l]` or :obj:`rec[l]` is\n        :obj:`None`, the corresponding value is set to :obj:`numpy.nan`.\n    \"\"\"", "\n", "\n", "n_fg_class", "=", "len", "(", "prec", ")", "\n", "ap", "=", "np", ".", "empty", "(", "n_fg_class", ")", "\n", "for", "l", "in", "range", "(", "n_fg_class", ")", ":", "\n", "        ", "if", "prec", "[", "l", "]", "is", "None", "or", "rec", "[", "l", "]", "is", "None", ":", "\n", "            ", "ap", "[", "l", "]", "=", "np", ".", "nan", "\n", "continue", "\n", "\n", "", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "            ", "ap", "[", "l", "]", "=", "0", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.0", ",", "1.1", ",", "0.1", ")", ":", "\n", "                ", "if", "np", ".", "sum", "(", "rec", "[", "l", "]", ">=", "t", ")", "==", "0", ":", "\n", "                    ", "p", "=", "0", "\n", "", "else", ":", "\n", "                    ", "p", "=", "np", ".", "max", "(", "np", ".", "nan_to_num", "(", "prec", "[", "l", "]", ")", "[", "rec", "[", "l", "]", ">=", "t", "]", ")", "\n", "", "ap", "[", "l", "]", "+=", "p", "/", "11", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "            ", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0", "]", ",", "np", ".", "nan_to_num", "(", "prec", "[", "l", "]", ")", ",", "[", "0", "]", ")", ")", "\n", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0", "]", ",", "rec", "[", "l", "]", ",", "[", "1", "]", ")", ")", "\n", "\n", "mpre", "=", "np", ".", "maximum", ".", "accumulate", "(", "mpre", "[", ":", ":", "-", "1", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "[", "l", "]", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "\n", "", "", "return", "ap", "\n", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.voc.__init__.voc_evaluation": [[6, 16], ["logging.getLogger", "logging.getLogger.info", "voc_eval.do_voc_evaluation", "logging.getLogger.warning"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.voc.voc_eval.do_voc_evaluation"], []], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.__init__.word_evaluation": [[4, 21], ["word_eval.do_coco_evaluation"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.do_coco_evaluation"], []], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.__init__": [[454, 463], ["all", "collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "iou_types", ")", ":", "\n", "        ", "allowed_types", "=", "(", "\"box_proposal\"", ",", "\"bbox\"", ",", "\"segm\"", ")", "\n", "assert", "all", "(", "iou_type", "in", "allowed_types", "for", "iou_type", "in", "iou_types", ")", "\n", "results", "=", "OrderedDict", "(", ")", "\n", "for", "iou_type", "in", "iou_types", ":", "\n", "            ", "results", "[", "iou_type", "]", "=", "OrderedDict", "(", "\n", "[", "(", "metric", ",", "-", "1", ")", "for", "metric", "in", "COCOResults", ".", "METRICS", "[", "iou_type", "]", "]", "\n", ")", "\n", "", "self", ".", "results", "=", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.update": [[464, 476], ["isinstance", "enumerate"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "coco_eval", ")", ":", "\n", "        ", "if", "coco_eval", "is", "None", ":", "\n", "            ", "return", "\n", "", "from", "pycocotools", ".", "cocoeval", "import", "COCOeval", "\n", "\n", "assert", "isinstance", "(", "coco_eval", ",", "COCOeval", ")", "\n", "s", "=", "coco_eval", ".", "stats", "\n", "iou_type", "=", "coco_eval", ".", "params", ".", "iouType", "\n", "res", "=", "self", ".", "results", "[", "iou_type", "]", "\n", "metrics", "=", "COCOResults", ".", "METRICS", "[", "iou_type", "]", "\n", "for", "idx", ",", "metric", "in", "enumerate", "(", "metrics", ")", ":", "\n", "            ", "res", "[", "metric", "]", "=", "s", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.COCOResults.__repr__": [[477, 480], ["repr"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "# TODO make it pretty", "\n", "        ", "return", "repr", "(", "self", ".", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.do_coco_evaluation": [[20, 73], ["logging.getLogger", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "word_eval.COCOResults", "logging.getLogger.info", "word_eval.check_expected_results", "logging.getLogger.info", "word_eval.prepare_for_coco_detection", "logging.getLogger.info", "word_eval.prepare_for_coco_segmentation", "logging.getLogger.info", "word_eval.prepare_for_kes", "areas.items", "torch.save", "tempfile.NamedTemporaryFile", "word_eval.evaluate_predictions_on_coco", "word_eval.evaluate_box_proposals", "stats[].item", "os.path.join", "os.path.join", "os.path.isdir", "print", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.check_expected_results", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.prepare_for_coco_detection", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.prepare_for_coco_segmentation", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.prepare_for_kes", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.evaluate_predictions_on_coco", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.evaluate_box_proposals", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.miscellaneous.mkdir"], ["def", "do_coco_evaluation", "(", "\n", "dataset", ",", "\n", "predictions", ",", "\n", "box_only", ",", "\n", "output_folder", ",", "\n", "iou_types", ",", "\n", "expected_results", ",", "\n", "expected_results_sigma_tol", ",", "\n", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"maskrcnn_benchmark.inference\"", ")", "\n", "\n", "if", "box_only", ":", "\n", "        ", "logger", ".", "info", "(", "\"Evaluating bbox proposals\"", ")", "\n", "areas", "=", "{", "\"all\"", ":", "\"\"", ",", "\"small\"", ":", "\"s\"", ",", "\"medium\"", ":", "\"m\"", ",", "\"large\"", ":", "\"l\"", "}", "\n", "res", "=", "COCOResults", "(", "\"box_proposal\"", ")", "\n", "for", "limit", "in", "[", "100", ",", "1000", "]", ":", "\n", "            ", "for", "area", ",", "suffix", "in", "areas", ".", "items", "(", ")", ":", "\n", "                ", "stats", "=", "evaluate_box_proposals", "(", "\n", "predictions", ",", "dataset", ",", "area", "=", "area", ",", "limit", "=", "limit", "\n", ")", "\n", "key", "=", "\"AR{}@{:d}\"", ".", "format", "(", "suffix", ",", "limit", ")", "\n", "res", ".", "results", "[", "\"box_proposal\"", "]", "[", "key", "]", "=", "stats", "[", "\"ar\"", "]", ".", "item", "(", ")", "\n", "", "", "logger", ".", "info", "(", "res", ")", "\n", "check_expected_results", "(", "res", ",", "expected_results", ",", "expected_results_sigma_tol", ")", "\n", "if", "output_folder", ":", "\n", "            ", "torch", ".", "save", "(", "res", ",", "os", ".", "path", ".", "join", "(", "output_folder", ",", "\"box_proposals.pth\"", ")", ")", "\n", "", "return", "\n", "", "logger", ".", "info", "(", "\"Preparing results for COCO format\"", ")", "\n", "coco_results", "=", "{", "}", "\n", "if", "\"bbox\"", "in", "iou_types", ":", "\n", "        ", "logger", ".", "info", "(", "\"Preparing bbox results\"", ")", "\n", "coco_results", "[", "\"bbox\"", "]", "=", "prepare_for_coco_detection", "(", "predictions", ",", "dataset", ")", "\n", "", "if", "\"segm\"", "in", "iou_types", ":", "\n", "        ", "logger", ".", "info", "(", "\"Preparing segm results\"", ")", "\n", "coco_results", "[", "\"segm\"", "]", "=", "prepare_for_coco_segmentation", "(", "predictions", ",", "dataset", ")", "\n", "", "if", "\"kes\"", "in", "iou_types", ":", "\n", "        ", "logger", ".", "info", "(", "\"Preparing kes results\"", ")", "\n", "coco_results", "[", "\"kes\"", "]", "=", "prepare_for_kes", "(", "predictions", ",", "dataset", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Do not apply evaluating predictions\"", ")", "\n", "for", "iou_type", "in", "iou_types", ":", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "f", ":", "\n", "            ", "file_path", "=", "f", ".", "name", "\n", "if", "output_folder", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_folder", ")", ":", "\n", "                    ", "print", "(", "'creating dir: '", "+", "output_folder", ")", "\n", "os", ".", "mkdir", "(", "output_folder", ")", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "iou_type", "+", "\".json\"", ")", "\n", "", "res", "=", "evaluate_predictions_on_coco", "(", "\n", "dataset", ".", "coco", ",", "coco_results", "[", "iou_type", "]", ",", "file_path", ",", "iou_type", "\n", ")", "\n", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.prepare_for_coco_detection": [[75, 107], ["enumerate", "prediction.convert.resize", "prediction.convert.convert", "prediction.convert.bbox.tolist", "prediction.convert.get_field().tolist", "prediction.convert.get_field().tolist", "coco_results.extend", "len", "prediction.convert.get_field", "prediction.convert.get_field", "enumerate"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["", "def", "prepare_for_coco_detection", "(", "predictions", ",", "dataset", ")", ":", "\n", "# assert isinstance(dataset, COCODataset)", "\n", "    ", "coco_results", "=", "[", "]", "\n", "for", "image_id", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "        ", "original_id", "=", "dataset", ".", "id_to_img_map", "[", "image_id", "]", "\n", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "# TODO replace with get_img_info?", "\n", "", "image_width", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"width\"", "]", "\n", "image_height", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"height\"", "]", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "prediction", "=", "prediction", ".", "convert", "(", "\"xywh\"", ")", "\n", "\n", "boxes", "=", "prediction", ".", "bbox", ".", "tolist", "(", ")", "\n", "scores", "=", "prediction", ".", "get_field", "(", "\"scores\"", ")", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", ".", "get_field", "(", "\"labels\"", ")", ".", "tolist", "(", ")", "\n", "\n", "mapped_labels", "=", "[", "dataset", ".", "contiguous_category_id_to_json_id", "[", "i", "]", "for", "i", "in", "labels", "]", "\n", "\n", "coco_results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "mapped_labels", "[", "k", "]", ",", "\n", "\"bbox\"", ":", "box", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", ",", "box", "in", "enumerate", "(", "boxes", ")", "\n", "]", "\n", ")", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.contour_to_xys": [[108, 136], ["cv2.minAreaRect", "cv2.boxPoints", "numpy.int0", "enumerate", "numpy.reshape", "word_eval.contour_to_xys.get_valid_x"], "function", ["None"], ["", "def", "contour_to_xys", "(", "cnt", ",", "image_shape", ")", ":", "\n", "    ", "\"\"\"Convert rect to xys, i.e., eight points\n    The `image_shape` is used to to make sure all points return are valid, i.e., within image area\n    \"\"\"", "\n", "rect", "=", "cv2", ".", "minAreaRect", "(", "cnt", ")", "\n", "h", ",", "w", "=", "image_shape", "[", "0", ":", "2", "]", "\n", "def", "get_valid_x", "(", "x", ")", ":", "\n", "        ", "if", "x", "<", "0", ":", "\n", "            ", "return", "0", "\n", "", "if", "x", ">=", "w", ":", "\n", "            ", "return", "w", "-", "1", "\n", "", "return", "x", "\n", "\n", "", "def", "get_valid_y", "(", "y", ")", ":", "\n", "        ", "if", "y", "<", "0", ":", "\n", "            ", "return", "0", "\n", "", "if", "y", ">=", "h", ":", "\n", "            ", "return", "h", "-", "1", "\n", "", "return", "y", "\n", "\n", "", "points", "=", "cv2", ".", "boxPoints", "(", "rect", ")", "\n", "points", "=", "np", ".", "int0", "(", "points", ")", "\n", "for", "i_xy", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "points", ")", ":", "\n", "        ", "x", "=", "get_valid_x", "(", "x", ")", "\n", "y", "=", "get_valid_y", "(", "y", ")", "\n", "points", "[", "i_xy", ",", ":", "]", "=", "[", "x", ",", "y", "]", "\n", "", "points", "=", "np", ".", "reshape", "(", "points", ",", "-", "1", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.mask_to_roRect": [[137, 148], ["cv2.findContours", "countours[].copy", "word_eval.contour_to_xys", "e.clone().numpy", "len", "numpy.zeros", "e.clone"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.cv2_util.findContours", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.contour_to_xys"], ["", "def", "mask_to_roRect", "(", "mask", ",", "img_shape", ")", ":", "\n", "## convert mask into rotated rect", "\n", "    ", "e", "=", "mask", "[", "0", ",", ":", ",", ":", "]", "\n", "_", ",", "countours", ",", "hier", "=", "cv2", ".", "findContours", "(", "e", ".", "clone", "(", ")", ".", "numpy", "(", ")", ",", "cv2", ".", "RETR_CCOMP", ",", "cv2", ".", "CHAIN_APPROX_NONE", ")", "# Aarlog", "\n", "\n", "if", "len", "(", "countours", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "1", ",", "8", ")", ")", "\n", "", "t_c", "=", "countours", "[", "0", "]", ".", "copy", "(", ")", "\n", "\n", "quad", "=", "contour_to_xys", "(", "t_c", ",", "img_shape", ")", "\n", "return", "quad", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.prepare_for_coco_segmentation": [[150, 196], ["maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.Masker", "tqdm.tqdm", "enumerate", "prediction.resize.resize", "prediction.resize.get_field", "prediction.resize.get_field().tolist", "prediction.resize.get_field().tolist", "enumerate", "coco_results.extend", "len", "list", "maskrcnn_benchmark.modeling.roi_heads.mask_head.inference.Masker.", "word_eval.mask_to_roRect", "masker.expand", "prediction.resize.get_field", "prediction.resize.get_field", "rect.all", "esd.append", "rect.tolist"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.mask_to_roRect", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["", "def", "prepare_for_coco_segmentation", "(", "predictions", ",", "dataset", ")", ":", "\n", "    ", "import", "pycocotools", ".", "mask", "as", "mask_util", "\n", "import", "numpy", "as", "np", "\n", "\n", "masker", "=", "Masker", "(", "threshold", "=", "0.5", ",", "padding", "=", "1", ")", "\n", "# assert isinstance(dataset, COCODataset)", "\n", "coco_results", "=", "[", "]", "\n", "for", "image_id", ",", "prediction", "in", "tqdm", "(", "enumerate", "(", "predictions", ")", ")", ":", "\n", "        ", "original_id", "=", "dataset", ".", "id_to_img_map", "[", "image_id", "]", "\n", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "# TODO replace with get_img_info?", "\n", "", "image_width", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"width\"", "]", "\n", "image_height", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"height\"", "]", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "masks", "=", "prediction", ".", "get_field", "(", "\"mask\"", ")", "\n", "\n", "# Masker is necessary only if masks haven't been already resized.", "\n", "if", "list", "(", "masks", ".", "shape", "[", "-", "2", ":", "]", ")", "!=", "[", "image_height", ",", "image_width", "]", ":", "\n", "            ", "masks", "=", "masker", "(", "masks", ".", "expand", "(", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ",", "prediction", ")", "\n", "masks", "=", "masks", "[", "0", "]", "\n", "\n", "", "scores", "=", "prediction", ".", "get_field", "(", "\"scores\"", ")", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", ".", "get_field", "(", "\"labels\"", ")", ".", "tolist", "(", ")", "\n", "\n", "rects", "=", "[", "mask_to_roRect", "(", "mask", ",", "[", "image_height", ",", "image_width", "]", ")", "for", "mask", "in", "masks", "]", "\n", "\n", "mapped_labels", "=", "[", "dataset", ".", "contiguous_category_id_to_json_id", "[", "i", "]", "for", "i", "in", "labels", "]", "\n", "\n", "esd", "=", "[", "]", "\n", "for", "k", ",", "rect", "in", "enumerate", "(", "rects", ")", ":", "\n", "            ", "if", "rect", ".", "all", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "esd", ".", "append", "(", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "mapped_labels", "[", "k", "]", ",", "\n", "\"seg_rorect\"", ":", "rect", ".", "tolist", "(", ")", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", ")", "\n", "", "", "coco_results", ".", "extend", "(", "esd", ")", "\n", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.ke_to_quad": [[197, 201], ["mty[].argmax", "word_eval.paraToQuad_v3"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.paraToQuad_v3"], ["", "def", "ke_to_quad", "(", "ke", ",", "mty", ",", "img_shape", ")", ":", "\n", "    ", "mt", "=", "mty", "[", ":", "]", ".", "argmax", "(", ")", "\n", "quad", "=", "paraToQuad_v3", "(", "ke", ",", "mt", ")", "\n", "return", "quad", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.py_cpu_pnms": [[203, 231], ["numpy.zeros", "numpy.zeros", "range", "pts.append", "scores.argsort", "scores.argsort", "len", "Polygon", "range", "keep.append", "len", "Polygon", "numpy.where", "Polygon.intersection", "range", "print", "len"], "function", ["None"], ["", "def", "py_cpu_pnms", "(", "dets", ",", "scores", ",", "thresh", ")", ":", "\n", "    ", "pts", "=", "[", "]", "\n", "for", "det", "in", "dets", ":", "\n", "        ", "pts", ".", "append", "(", "[", "[", "det", "[", "i", "]", "[", "0", "]", ",", "det", "[", "i", "]", "[", "1", "]", "]", "for", "i", "in", "range", "(", "len", "(", "det", ")", ")", "]", ")", "\n", "", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "areas", "=", "np", ".", "zeros", "(", "scores", ".", "shape", ")", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "inter_areas", "=", "np", ".", "zeros", "(", "(", "scores", ".", "shape", "[", "0", "]", ",", "scores", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "il", "in", "range", "(", "len", "(", "pts", ")", ")", ":", "\n", "        ", "poly", "=", "Polygon", "(", "pts", "[", "il", "]", ")", "\n", "areas", "[", "il", "]", "=", "poly", ".", "area", "\n", "for", "jl", "in", "range", "(", "il", ",", "len", "(", "pts", ")", ")", ":", "\n", "            ", "polyj", "=", "Polygon", "(", "pts", "[", "jl", "]", ")", "\n", "try", ":", "\n", "                ", "inS", "=", "poly", ".", "intersection", "(", "polyj", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "poly", ",", "polyj", ")", "\n", "", "inter_areas", "[", "il", "]", "[", "jl", "]", "=", "inS", ".", "area", "\n", "inter_areas", "[", "jl", "]", "[", "il", "]", "=", "inS", ".", "area", "\n", "\n", "", "", "keep", "=", "[", "]", "\n", "while", "order", ".", "size", ">", "0", ":", "\n", "        ", "i", "=", "order", "[", "0", "]", "\n", "keep", ".", "append", "(", "i", ")", "\n", "ovr", "=", "inter_areas", "[", "i", "]", "[", "order", "[", "1", ":", "]", "]", "/", "(", "areas", "[", "i", "]", "+", "areas", "[", "order", "[", "1", ":", "]", "]", "-", "inter_areas", "[", "i", "]", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "inds", "=", "np", ".", "where", "(", "ovr", "<=", "thresh", ")", "[", "0", "]", "\n", "order", "=", "order", "[", "inds", "+", "1", "]", "\n", "", "return", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.esd_pnms": [[232, 245], ["numpy.array", "numpy.array", "word_eval.py_cpu_pnms", "numpy.array", "np.array.append", "np.array.append"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.py_cpu_pnms"], ["", "def", "esd_pnms", "(", "esd", ",", "pnms_thresh", ")", ":", "\n", "    ", "scores", "=", "[", "]", "\n", "dets", "=", "[", "]", "\n", "for", "ele", "in", "esd", ":", "\n", "        ", "score", "=", "ele", "[", "'score'", "]", "\n", "quad", "=", "ele", "[", "'ke_quad'", "]", "\n", "det", "=", "np", ".", "array", "(", "[", "[", "quad", "[", "0", "]", "[", "0", "]", ",", "quad", "[", "0", "]", "[", "1", "]", "]", ",", "[", "quad", "[", "1", "]", "[", "0", "]", ",", "quad", "[", "1", "]", "[", "1", "]", "]", ",", "[", "quad", "[", "2", "]", "[", "0", "]", ",", "quad", "[", "2", "]", "[", "1", "]", "]", ",", "[", "quad", "[", "3", "]", "[", "0", "]", ",", "quad", "[", "3", "]", "[", "1", "]", "]", "]", ")", "\n", "scores", ".", "append", "(", "score", ")", "\n", "dets", ".", "append", "(", "det", ")", "\n", "", "scores", "=", "np", ".", "array", "(", "scores", ")", "\n", "dets", "=", "np", ".", "array", "(", "dets", ")", "\n", "keep", "=", "py_cpu_pnms", "(", "dets", ",", "scores", ",", "pnms_thresh", ")", "\n", "return", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.prepare_for_kes": [[246, 298], ["maskrcnn_benchmark.modeling.roi_heads.ke_head.inference.KEer", "tqdm.tqdm", "enumerate", "prediction.resize.resize", "prediction.resize.get_field", "kes.kes.numpy.kes.numpy", "prediction.resize.get_field().tolist", "prediction.resize.get_field().tolist", "prediction.resize.get_field().view().numpy", "enumerate", "enumerate", "len", "quads.append", "word_eval.esd_pnms", "coco_results.extend", "coco_results.extend", "prediction.resize.get_field", "prediction.resize.get_field", "prediction.resize.get_field().view", "word_eval.ke_to_quad", "esd.append", "new_esd.append", "prediction.resize.get_field"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.esd_pnms", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.rpn.anchor_generator.BufferList.extend", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.ke_to_quad", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["", "def", "prepare_for_kes", "(", "predictions", ",", "dataset", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "\n", "masker", "=", "KEer", "(", ")", "\n", "coco_results", "=", "[", "]", "\n", "for", "image_id", ",", "prediction", "in", "tqdm", "(", "enumerate", "(", "predictions", ")", ")", ":", "\n", "        ", "original_id", "=", "dataset", ".", "id_to_img_map", "[", "image_id", "]", "\n", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "# TODO replace with get_img_info?", "\n", "", "image_width", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"width\"", "]", "\n", "image_height", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"height\"", "]", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "kes", "=", "prediction", ".", "get_field", "(", "\"ke\"", ")", "\n", "kes", "=", "kes", ".", "kes", ".", "numpy", "(", ")", "\n", "\n", "scores", "=", "prediction", ".", "get_field", "(", "\"scores\"", ")", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", ".", "get_field", "(", "\"labels\"", ")", ".", "tolist", "(", ")", "\n", "mtys", "=", "prediction", ".", "get_field", "(", "\"mty\"", ")", ".", "view", "(", "-", "1", ",", "24", ")", ".", "numpy", "(", ")", "\n", "quads", "=", "[", "]", "\n", "for", "ik", ",", "ke", "in", "enumerate", "(", "kes", ")", ":", "\n", "            ", "quads", ".", "append", "(", "ke_to_quad", "(", "ke", ",", "mtys", "[", "ik", "]", ",", "[", "image_height", ",", "image_width", "]", ")", ")", "\n", "\n", "", "mapped_labels", "=", "[", "dataset", ".", "contiguous_category_id_to_json_id", "[", "i", "]", "for", "i", "in", "labels", "]", "\n", "\n", "esd", "=", "[", "]", "\n", "for", "k", ",", "quad", "in", "enumerate", "(", "quads", ")", ":", "\n", "            ", "if", "not", "quad", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "esd", ".", "append", "(", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "mapped_labels", "[", "k", "]", ",", "\n", "# \"segmentation\": rle,", "\n", "\"ke_quad\"", ":", "quad", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", ")", "\n", "# chan 2019/4/11", "\n", "", "", "if", "cfg", ".", "PROCESS", ".", "PNMS", ":", "\n", "            ", "pnms_thresh", "=", "cfg", ".", "PROCESS", ".", "NMS_THRESH", "\n", "keep", "=", "esd_pnms", "(", "esd", ",", "pnms_thresh", ")", "\n", "new_esd", "=", "[", "]", "\n", "for", "i", "in", "keep", ":", "\n", "                ", "new_esd", ".", "append", "(", "esd", "[", "i", "]", ")", "\n", "", "coco_results", ".", "extend", "(", "new_esd", ")", "\n", "", "else", ":", "\n", "            ", "coco_results", ".", "extend", "(", "esd", ")", "\n", "\n", "", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.evaluate_box_proposals": [[300, 413], ["enumerate", "torch.cat", "torch.sort", "torch.zeros_like", "enumerate", "torch.zeros_like.mean", "prediction.resize.resize", "dataset.coco.getAnnIds", "dataset.coco.loadAnns", "torch.as_tensor().reshape", "maskrcnn_benchmark.structures.bounding_box.BoxList().convert", "torch.as_tensor", "len", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou", "torch.zeros", "range", "torch.cat.append", "torch.arange", "prediction.resize.get_field().sort", "len", "len", "len", "len", "min", "maskrcnn_benchmark.structures.boxlist_ops.boxlist_iou.max", "max_overlaps.max", "float", "torch.as_tensor", "maskrcnn_benchmark.structures.bounding_box.BoxList", "len", "len", "len", "prediction.resize.get_field"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.modeling.utils.cat", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.boxlist_ops.boxlist_iou", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.get_field"], ["", "def", "evaluate_box_proposals", "(", "\n", "predictions", ",", "dataset", ",", "thresholds", "=", "None", ",", "area", "=", "\"all\"", ",", "limit", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"Evaluate detection proposal recall metrics. This function is a much\n    faster alternative to the official COCO API recall evaluation code. However,\n    it produces slightly different results.\n    \"\"\"", "\n", "# Record max overlap value for each gt box", "\n", "# Return vector of overlap values", "\n", "areas", "=", "{", "\n", "\"all\"", ":", "0", ",", "\n", "\"small\"", ":", "1", ",", "\n", "\"medium\"", ":", "2", ",", "\n", "\"large\"", ":", "3", ",", "\n", "\"96-128\"", ":", "4", ",", "\n", "\"128-256\"", ":", "5", ",", "\n", "\"256-512\"", ":", "6", ",", "\n", "\"512-inf\"", ":", "7", ",", "\n", "}", "\n", "area_ranges", "=", "[", "\n", "[", "0", "**", "2", ",", "1e5", "**", "2", "]", ",", "# all", "\n", "[", "0", "**", "2", ",", "32", "**", "2", "]", ",", "# small", "\n", "[", "32", "**", "2", ",", "96", "**", "2", "]", ",", "# medium", "\n", "[", "96", "**", "2", ",", "1e5", "**", "2", "]", ",", "# large", "\n", "[", "96", "**", "2", ",", "128", "**", "2", "]", ",", "# 96-128", "\n", "[", "128", "**", "2", ",", "256", "**", "2", "]", ",", "# 128-256", "\n", "[", "256", "**", "2", ",", "512", "**", "2", "]", ",", "# 256-512", "\n", "[", "512", "**", "2", ",", "1e5", "**", "2", "]", ",", "\n", "]", "# 512-inf", "\n", "assert", "area", "in", "areas", ",", "\"Unknown area range: {}\"", ".", "format", "(", "area", ")", "\n", "area_range", "=", "area_ranges", "[", "areas", "[", "area", "]", "]", "\n", "gt_overlaps", "=", "[", "]", "\n", "num_pos", "=", "0", "\n", "\n", "for", "image_id", ",", "prediction", "in", "enumerate", "(", "predictions", ")", ":", "\n", "        ", "original_id", "=", "dataset", ".", "id_to_img_map", "[", "image_id", "]", "\n", "\n", "# TODO replace with get_img_info?", "\n", "image_width", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"width\"", "]", "\n", "image_height", "=", "dataset", ".", "coco", ".", "imgs", "[", "original_id", "]", "[", "\"height\"", "]", "\n", "prediction", "=", "prediction", ".", "resize", "(", "(", "image_width", ",", "image_height", ")", ")", "\n", "\n", "# sort predictions in descending order", "\n", "# TODO maybe remove this and make it explicit in the documentation", "\n", "inds", "=", "prediction", ".", "get_field", "(", "\"objectness\"", ")", ".", "sort", "(", "descending", "=", "True", ")", "[", "1", "]", "\n", "prediction", "=", "prediction", "[", "inds", "]", "\n", "\n", "ann_ids", "=", "dataset", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "original_id", ")", "\n", "anno", "=", "dataset", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "gt_boxes", "=", "[", "obj", "[", "\"bbox\"", "]", "for", "obj", "in", "anno", "if", "obj", "[", "\"iscrowd\"", "]", "==", "0", "]", "\n", "gt_boxes", "=", "torch", ".", "as_tensor", "(", "gt_boxes", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "# guard against no boxes", "\n", "gt_boxes", "=", "BoxList", "(", "gt_boxes", ",", "(", "image_width", ",", "image_height", ")", ",", "mode", "=", "\"xywh\"", ")", ".", "convert", "(", "\n", "\"xyxy\"", "\n", ")", "\n", "gt_areas", "=", "torch", ".", "as_tensor", "(", "[", "obj", "[", "\"area\"", "]", "for", "obj", "in", "anno", "if", "obj", "[", "\"iscrowd\"", "]", "==", "0", "]", ")", "\n", "\n", "if", "len", "(", "gt_boxes", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "valid_gt_inds", "=", "(", "gt_areas", ">=", "area_range", "[", "0", "]", ")", "&", "(", "gt_areas", "<=", "area_range", "[", "1", "]", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", "valid_gt_inds", "]", "\n", "\n", "num_pos", "+=", "len", "(", "gt_boxes", ")", "\n", "\n", "if", "len", "(", "gt_boxes", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "limit", "is", "not", "None", "and", "len", "(", "prediction", ")", ">", "limit", ":", "\n", "            ", "prediction", "=", "prediction", "[", ":", "limit", "]", "\n", "\n", "", "overlaps", "=", "boxlist_iou", "(", "prediction", ",", "gt_boxes", ")", "\n", "\n", "_gt_overlaps", "=", "torch", ".", "zeros", "(", "len", "(", "gt_boxes", ")", ")", "\n", "for", "j", "in", "range", "(", "min", "(", "len", "(", "prediction", ")", ",", "len", "(", "gt_boxes", ")", ")", ")", ":", "\n", "# find which proposal box maximally covers each gt box", "\n", "# and get the iou amount of coverage for each gt box", "\n", "            ", "max_overlaps", ",", "argmax_overlaps", "=", "overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "\n", "# find which gt box is 'best' covered (i.e. 'best' = most iou)", "\n", "gt_ovr", ",", "gt_ind", "=", "max_overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "assert", "gt_ovr", ">=", "0", "\n", "# find the proposal box that covers the best covered gt box", "\n", "box_ind", "=", "argmax_overlaps", "[", "gt_ind", "]", "\n", "# record the iou coverage of this gt box", "\n", "_gt_overlaps", "[", "j", "]", "=", "overlaps", "[", "box_ind", ",", "gt_ind", "]", "\n", "assert", "_gt_overlaps", "[", "j", "]", "==", "gt_ovr", "\n", "# mark the proposal box and the gt box as used", "\n", "overlaps", "[", "box_ind", ",", ":", "]", "=", "-", "1", "\n", "overlaps", "[", ":", ",", "gt_ind", "]", "=", "-", "1", "\n", "\n", "# append recorded iou coverage level", "\n", "", "gt_overlaps", ".", "append", "(", "_gt_overlaps", ")", "\n", "", "gt_overlaps", "=", "torch", ".", "cat", "(", "gt_overlaps", ",", "dim", "=", "0", ")", "\n", "gt_overlaps", ",", "_", "=", "torch", ".", "sort", "(", "gt_overlaps", ")", "\n", "\n", "if", "thresholds", "is", "None", ":", "\n", "        ", "step", "=", "0.05", "\n", "thresholds", "=", "torch", ".", "arange", "(", "0.5", ",", "0.95", "+", "1e-5", ",", "step", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "recalls", "=", "torch", ".", "zeros_like", "(", "thresholds", ")", "\n", "# compute recall for each iou threshold", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "recalls", "[", "i", "]", "=", "(", "gt_overlaps", ">=", "t", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "/", "float", "(", "num_pos", ")", "\n", "# ar = 2 * np.trapz(recalls, thresholds)", "\n", "", "ar", "=", "recalls", ".", "mean", "(", ")", "\n", "return", "{", "\n", "\"ar\"", ":", "ar", ",", "\n", "\"recalls\"", ":", "recalls", ",", "\n", "\"thresholds\"", ":", "thresholds", ",", "\n", "\"gt_overlaps\"", ":", "gt_overlaps", ",", "\n", "\"num_pos\"", ":", "num_pos", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.evaluate_predictions_on_coco": [[416, 435], ["print", "open", "json.dump"], "function", ["None"], ["", "def", "evaluate_predictions_on_coco", "(", "\n", "coco_gt", ",", "coco_results", ",", "json_result_file", ",", "iou_type", "=", "\"bbox\"", "\n", ")", ":", "\n", "    ", "import", "json", "\n", "\n", "print", "(", "'writing results to '", "+", "json_result_file", ")", "\n", "with", "open", "(", "json_result_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "coco_results", ",", "f", ")", "\n", "\n", "# from pycocotools.cocoeval import COCOeval", "\n", "\n", "# coco_dt = coco_gt.loadRes(str(json_result_file))", "\n", "# # coco_dt = coco_gt.loadRes(coco_results)", "\n", "# coco_eval = COCOeval(coco_gt, coco_dt, iou_type)", "\n", "# coco_eval.evaluate()", "\n", "# coco_eval.accumulate()", "\n", "# coco_eval.summarize()", "\n", "# return coco_eval", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.check_expected_results": [[482, 502], ["logging.getLogger", "logging.getLogger.error", "logging.getLogger.info"], "function", ["None"], ["", "", "def", "check_expected_results", "(", "results", ",", "expected_results", ",", "sigma_tol", ")", ":", "\n", "    ", "if", "not", "expected_results", ":", "\n", "        ", "return", "\n", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", "\"maskrcnn_benchmark.inference\"", ")", "\n", "for", "task", ",", "metric", ",", "(", "mean", ",", "std", ")", "in", "expected_results", ":", "\n", "        ", "actual_val", "=", "results", ".", "results", "[", "task", "]", "[", "metric", "]", "\n", "lo", "=", "mean", "-", "sigma_tol", "*", "std", "\n", "hi", "=", "mean", "+", "sigma_tol", "*", "std", "\n", "ok", "=", "(", "lo", "<", "actual_val", ")", "and", "(", "actual_val", "<", "hi", ")", "\n", "msg", "=", "(", "\n", "\"{} > {} sanity check (actual vs. expected): \"", "\n", "\"{:.3f} vs. mean={:.4f}, std={:.4}, range=({:.4f}, {:.4f})\"", "\n", ")", ".", "format", "(", "task", ",", "metric", ",", "actual_val", ",", "mean", ",", "std", ",", "lo", ",", "hi", ")", "\n", "if", "not", "ok", ":", "\n", "            ", "msg", "=", "\"FAIL: \"", "+", "msg", "\n", "logger", ".", "error", "(", "msg", ")", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"PASS: \"", "+", "msg", "\n", "logger", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.word.word_eval.paraToQuad_v3": [[504, 541], ["Point", "Point", "Point", "Point", "Point", "Point", "itertools.permutations", "Polygon", "range", "range", "range", "Point.within", "Point.within", "LinearRing", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "", "", "def", "paraToQuad_v3", "(", "kes", ",", "mt", ")", ":", "\n", "    ", "ms", "=", "(", "kes", "[", "0", ",", "0", "]", ",", "kes", "[", "6", ",", "0", "]", ")", "\n", "xs", "=", "[", "kes", "[", "i", ",", "0", "]", "for", "i", "in", "range", "(", "1", ",", "5", ")", "]", "\n", "ys", "=", "[", "kes", "[", "i", ",", "0", "]", "for", "i", "in", "range", "(", "7", ",", "11", ")", "]", "\n", "crs", "=", "(", "kes", "[", "5", ",", "0", "]", ",", "kes", "[", "11", ",", "0", "]", ")", "\n", "ms", "=", "Point", "(", "ms", ")", "\n", "crs", "=", "Point", "(", "crs", ")", "\n", "vp", "=", "[", "]", "\n", "all_types", "=", "[", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "[", "1", ",", "2", ",", "4", ",", "3", "]", ",", "[", "1", ",", "3", ",", "2", ",", "4", "]", ",", "[", "1", ",", "3", ",", "4", ",", "2", "]", ",", "[", "1", ",", "4", ",", "2", ",", "3", "]", ",", "[", "1", ",", "4", ",", "3", ",", "2", "]", ",", "[", "2", ",", "1", ",", "3", ",", "4", "]", ",", "[", "2", ",", "1", ",", "4", ",", "3", "]", ",", "[", "2", ",", "3", ",", "1", ",", "4", "]", ",", "[", "2", ",", "3", ",", "4", ",", "1", "]", ",", "[", "2", ",", "4", ",", "1", ",", "3", "]", ",", "[", "2", ",", "4", ",", "3", ",", "1", "]", ",", "[", "3", ",", "1", ",", "2", ",", "4", "]", ",", "[", "3", ",", "1", ",", "4", ",", "2", "]", ",", "[", "3", ",", "2", ",", "1", ",", "4", "]", ",", "[", "3", ",", "2", ",", "4", ",", "1", "]", ",", "[", "3", ",", "4", ",", "1", ",", "2", "]", ",", "[", "3", ",", "4", ",", "2", ",", "1", "]", ",", "[", "4", ",", "1", ",", "2", ",", "3", "]", ",", "[", "4", ",", "1", ",", "3", ",", "2", "]", ",", "[", "4", ",", "2", ",", "1", ",", "3", "]", ",", "[", "4", ",", "2", ",", "3", ",", "1", "]", ",", "[", "4", ",", "3", ",", "1", ",", "2", "]", ",", "[", "4", ",", "3", ",", "2", ",", "1", "]", "]", "\n", "all_types", "=", "[", "[", "all_types", "[", "iat", "]", "[", "0", "]", "-", "1", ",", "all_types", "[", "iat", "]", "[", "1", "]", "-", "1", ",", "all_types", "[", "iat", "]", "[", "2", "]", "-", "1", ",", "all_types", "[", "iat", "]", "[", "3", "]", "-", "1", "]", "for", "iat", "in", "range", "(", "24", ")", "]", "\n", "\n", "tpe", "=", "all_types", "[", "mt", "]", "\n", "p1", "=", "Point", "(", "(", "xs", "[", "0", "]", ",", "ys", "[", "tpe", "[", "0", "]", "]", ")", ")", "\n", "p2", "=", "Point", "(", "(", "xs", "[", "1", "]", ",", "ys", "[", "tpe", "[", "1", "]", "]", ")", ")", "\n", "p3", "=", "Point", "(", "(", "xs", "[", "2", "]", ",", "ys", "[", "tpe", "[", "2", "]", "]", ")", ")", "\n", "p4", "=", "Point", "(", "(", "xs", "[", "3", "]", ",", "ys", "[", "tpe", "[", "3", "]", "]", ")", ")", "\n", "pts", "=", "[", "p1", ",", "p2", ",", "p3", ",", "p4", "]", "\n", "scs", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", "\n", "for", "it", "in", "itertools", ".", "permutations", "(", "scs", ",", "4", ")", ":", "\n", "        ", "poly", "=", "Polygon", "(", "[", "(", "pts", "[", "it", "[", "0", "]", "]", ".", "x", ",", "pts", "[", "it", "[", "0", "]", "]", ".", "y", ")", ",", "(", "pts", "[", "it", "[", "1", "]", "]", ".", "x", ",", "pts", "[", "it", "[", "1", "]", "]", ".", "y", ")", ",", "(", "pts", "[", "it", "[", "2", "]", "]", ".", "x", ",", "pts", "[", "it", "[", "2", "]", "]", ".", "y", ")", ",", "(", "pts", "[", "it", "[", "3", "]", "]", ".", "x", ",", "pts", "[", "it", "[", "3", "]", "]", ".", "y", ")", "]", ")", "\n", "if", "poly", ".", "is_valid", "and", "ms", ".", "within", "(", "poly", ")", "and", "crs", ".", "within", "(", "poly", ")", ":", "\n", "            ", "quad", "=", "[", "(", "pts", "[", "it", "[", "0", "]", "]", ".", "x", ",", "pts", "[", "it", "[", "0", "]", "]", ".", "y", ")", ",", "(", "pts", "[", "it", "[", "1", "]", "]", ".", "x", ",", "pts", "[", "it", "[", "1", "]", "]", ".", "y", ")", ",", "(", "pts", "[", "it", "[", "2", "]", "]", ".", "x", ",", "pts", "[", "it", "[", "2", "]", "]", ".", "y", ")", ",", "(", "pts", "[", "it", "[", "3", "]", "]", ".", "x", ",", "pts", "[", "it", "[", "3", "]", "]", ".", "y", ")", "]", "\n", "lr", "=", "LinearRing", "(", "quad", ")", "\n", "if", "lr", ".", "is_ccw", ":", "\n", "                ", "return", "[", "(", "int", "(", "iq", "[", "0", "]", ")", ",", "int", "(", "iq", "[", "1", "]", ")", ")", "for", "iq", "in", "quad", "]", "\n", "", "else", ":", "\n", "                ", "quad", "=", "[", "quad", "[", "0", "]", ",", "quad", "[", "3", "]", ",", "quad", "[", "2", "]", ",", "quad", "[", "1", "]", "]", "\n", "return", "[", "(", "int", "(", "iq", "[", "0", "]", ")", ",", "int", "(", "iq", "[", "1", "]", ")", ")", "for", "iq", "in", "quad", "]", "\n", "\n", "", "return", "[", "(", "int", "(", "iq", "[", "0", "]", ")", ",", "int", "(", "iq", "[", "1", "]", ")", ")", "for", "iq", "in", "quad", "]", "\n", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.samplers.distributed.DistributedSampler.__init__": [[25, 41], ["int", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "math.ceil", "torch.is_available", "torch.is_available", "RuntimeError", "torch.is_available", "torch.is_available", "RuntimeError", "len"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_world_size", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_world_size", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_rank", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.utils.comm.get_rank"], ["def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.samplers.distributed.DistributedSampler.__iter__": [[42, 61], ["iter", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "# deterministically shuffle based on epoch", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.samplers.distributed.DistributedSampler.__len__": [[62, 64], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.samplers.distributed.DistributedSampler.set_epoch": [[65, 67], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.samplers.grouped_batch_sampler.GroupedBatchSampler.__init__": [[24, 39], ["torch.as_tensor", "isinstance", "ValueError", "grouped_batch_sampler.GroupedBatchSampler.group_ids.dim", "torch.unique().sort", "torch.unique"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", "=", "False", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "sampler", ",", "Sampler", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"sampler should be an instance of \"", "\n", "\"torch.utils.data.Sampler, but got sampler={}\"", ".", "format", "(", "sampler", ")", "\n", ")", "\n", "", "self", ".", "sampler", "=", "sampler", "\n", "self", ".", "group_ids", "=", "torch", ".", "as_tensor", "(", "group_ids", ")", "\n", "assert", "self", ".", "group_ids", ".", "dim", "(", ")", "==", "1", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "drop_uneven", "=", "drop_uneven", "\n", "\n", "self", ".", "groups", "=", "torch", ".", "unique", "(", "self", ".", "group_ids", ")", ".", "sort", "(", "0", ")", "[", "0", "]", "\n", "\n", "self", ".", "_can_reuse_batches", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.samplers.grouped_batch_sampler.GroupedBatchSampler._prepare_batches": [[40, 101], ["len", "torch.as_tensor", "torch.full", "torch.arange", "tuple", "torch.as_tensor", "[].tolist", "list", "len", "c.split", "itertools.chain.from_iterable", "t[].item", "merged[].tolist", "enumerate", "t.numel", "torch.as_tensor.tolist", "torch.as_tensor.sort", "len", "kept.append", "s.sort"], "methods", ["None"], ["", "def", "_prepare_batches", "(", "self", ")", ":", "\n", "        ", "dataset_size", "=", "len", "(", "self", ".", "group_ids", ")", "\n", "# get the sampled indices from the sampler", "\n", "sampled_ids", "=", "torch", ".", "as_tensor", "(", "list", "(", "self", ".", "sampler", ")", ")", "\n", "# potentially not all elements of the dataset were sampled", "\n", "# by the sampler (e.g., DistributedSampler).", "\n", "# construct a tensor which contains -1 if the element was", "\n", "# not sampled, and a non-negative number indicating the", "\n", "# order where the element was sampled.", "\n", "# for example. if sampled_ids = [3, 1] and dataset_size = 5,", "\n", "# the order is [-1, 1, -1, 0, -1]", "\n", "order", "=", "torch", ".", "full", "(", "(", "dataset_size", ",", ")", ",", "-", "1", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "order", "[", "sampled_ids", "]", "=", "torch", ".", "arange", "(", "len", "(", "sampled_ids", ")", ")", "\n", "\n", "# get a mask with the elements that were sampled", "\n", "mask", "=", "order", ">=", "0", "\n", "\n", "# find the elements that belong to each individual cluster", "\n", "clusters", "=", "[", "(", "self", ".", "group_ids", "==", "i", ")", "&", "mask", "for", "i", "in", "self", ".", "groups", "]", "\n", "# get relative order of the elements inside each cluster", "\n", "# that follows the order from the sampler", "\n", "relative_order", "=", "[", "order", "[", "cluster", "]", "for", "cluster", "in", "clusters", "]", "\n", "# with the relative order, find the absolute order in the", "\n", "# sampled space", "\n", "permutation_ids", "=", "[", "s", "[", "s", ".", "sort", "(", ")", "[", "1", "]", "]", "for", "s", "in", "relative_order", "]", "\n", "# permute each cluster so that they follow the order from", "\n", "# the sampler", "\n", "permuted_clusters", "=", "[", "sampled_ids", "[", "idx", "]", "for", "idx", "in", "permutation_ids", "]", "\n", "\n", "# splits each cluster in batch_size, and merge as a list of tensors", "\n", "splits", "=", "[", "c", ".", "split", "(", "self", ".", "batch_size", ")", "for", "c", "in", "permuted_clusters", "]", "\n", "merged", "=", "tuple", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "splits", ")", ")", "\n", "\n", "# now each batch internally has the right order, but", "\n", "# they are grouped by clusters. Find the permutation between", "\n", "# different batches that brings them as close as possible to", "\n", "# the order that we have in the sampler. For that, we will consider the", "\n", "# ordering as coming from the first element of each batch, and sort", "\n", "# correspondingly", "\n", "first_element_of_batch", "=", "[", "t", "[", "0", "]", ".", "item", "(", ")", "for", "t", "in", "merged", "if", "t", ".", "numel", "(", ")", ">", "0", "]", "\n", "# get and inverse mapping from sampled indices and the position where", "\n", "# they occur (as returned by the sampler)", "\n", "inv_sampled_ids_map", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "enumerate", "(", "sampled_ids", ".", "tolist", "(", ")", ")", "}", "\n", "# from the first element in each batch, get a relative ordering", "\n", "first_index_of_batch", "=", "torch", ".", "as_tensor", "(", "\n", "[", "inv_sampled_ids_map", "[", "s", "]", "for", "s", "in", "first_element_of_batch", "]", "\n", ")", "\n", "\n", "# permute the batches so that they approximately follow the order", "\n", "# from the sampler", "\n", "permutation_order", "=", "first_index_of_batch", ".", "sort", "(", "0", ")", "[", "1", "]", ".", "tolist", "(", ")", "\n", "# finally, permute the batches", "\n", "batches", "=", "[", "merged", "[", "i", "]", ".", "tolist", "(", ")", "for", "i", "in", "permutation_order", "]", "\n", "\n", "if", "self", ".", "drop_uneven", ":", "\n", "            ", "kept", "=", "[", "]", "\n", "for", "batch", "in", "batches", ":", "\n", "                ", "if", "len", "(", "batch", ")", "==", "self", ".", "batch_size", ":", "\n", "                    ", "kept", ".", "append", "(", "batch", ")", "\n", "", "", "batches", "=", "kept", "\n", "", "return", "batches", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.samplers.grouped_batch_sampler.GroupedBatchSampler.__iter__": [[102, 110], ["iter", "grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.samplers.grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_can_reuse_batches", ":", "\n", "            ", "batches", "=", "self", ".", "_batches", "\n", "self", ".", "_can_reuse_batches", "=", "False", "\n", "", "else", ":", "\n", "            ", "batches", "=", "self", ".", "_prepare_batches", "(", ")", "\n", "", "self", ".", "_batches", "=", "batches", "\n", "return", "iter", "(", "batches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.samplers.grouped_batch_sampler.GroupedBatchSampler.__len__": [[111, 116], ["len", "hasattr", "grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.samplers.grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"_batches\"", ")", ":", "\n", "            ", "self", ".", "_batches", "=", "self", ".", "_prepare_batches", "(", ")", "\n", "self", ".", "_can_reuse_batches", "=", "True", "\n", "", "return", "len", "(", "self", ".", "_batches", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.samplers.iteration_based_batch_sampler.IterationBasedBatchSampler.__init__": [[11, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "batch_sampler", ",", "num_iterations", ",", "start_iter", "=", "0", ")", ":", "\n", "        ", "self", ".", "batch_sampler", "=", "batch_sampler", "\n", "self", ".", "num_iterations", "=", "num_iterations", "\n", "self", ".", "start_iter", "=", "start_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.samplers.iteration_based_batch_sampler.IterationBasedBatchSampler.__iter__": [[16, 29], ["hasattr", "iteration_based_batch_sampler.IterationBasedBatchSampler.batch_sampler.sampler.set_epoch"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.samplers.distributed.DistributedSampler.set_epoch"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "iteration", "=", "self", ".", "start_iter", "\n", "while", "iteration", "<=", "self", ".", "num_iterations", ":", "\n", "# if the underlying sampler has a set_epoch method, like", "\n", "# DistributedSampler, used for making each process see", "\n", "# a different split of the dataset, then set it", "\n", "            ", "if", "hasattr", "(", "self", ".", "batch_sampler", ".", "sampler", ",", "\"set_epoch\"", ")", ":", "\n", "                ", "self", ".", "batch_sampler", ".", "sampler", ".", "set_epoch", "(", "iteration", ")", "\n", "", "for", "batch", "in", "self", ".", "batch_sampler", ":", "\n", "                ", "iteration", "+=", "1", "\n", "if", "iteration", ">", "self", ".", "num_iterations", ":", "\n", "                    ", "break", "\n", "", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.samplers.iteration_based_batch_sampler.IterationBasedBatchSampler.__len__": [[30, 32], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_iterations", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.Compose.__init__": [[19, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.Compose.__call__": [[22, 26], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "image", ",", "target", "=", "t", "(", "image", ",", "target", ")", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.Compose.__repr__": [[27, 34], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "\"\\n\"", "\n", "format_string", "+=", "\"    {0}\"", ".", "format", "(", "t", ")", "\n", "", "format_string", "+=", "\"\\n)\"", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.Resize.__init__": [[37, 42], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_size", ",", "max_size", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "min_size", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "min_size", "=", "(", "min_size", ",", ")", "\n", "", "self", ".", "min_size", "=", "min_size", "\n", "self", ".", "max_size", "=", "max_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.Resize.get_size": [[44, 65], ["random.choice", "float", "float", "int", "int", "min", "max", "int", "round"], "methods", ["None"], ["", "def", "get_size", "(", "self", ",", "image_size", ")", ":", "\n", "        ", "w", ",", "h", "=", "image_size", "\n", "size", "=", "random", ".", "choice", "(", "self", ".", "min_size", ")", "\n", "max_size", "=", "self", ".", "max_size", "\n", "if", "max_size", "is", "not", "None", ":", "\n", "            ", "min_original_size", "=", "float", "(", "min", "(", "(", "w", ",", "h", ")", ")", ")", "\n", "max_original_size", "=", "float", "(", "max", "(", "(", "w", ",", "h", ")", ")", ")", "\n", "if", "max_original_size", "/", "min_original_size", "*", "size", ">", "max_size", ":", "\n", "                ", "size", "=", "int", "(", "round", "(", "max_size", "*", "min_original_size", "/", "max_original_size", ")", ")", "\n", "\n", "", "", "if", "(", "w", "<=", "h", "and", "w", "==", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "size", ")", ":", "\n", "            ", "return", "(", "h", ",", "w", ")", "\n", "\n", "", "if", "w", "<", "h", ":", "\n", "            ", "ow", "=", "size", "\n", "oh", "=", "int", "(", "size", "*", "h", "/", "w", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "size", "\n", "ow", "=", "int", "(", "size", "*", "w", "/", "h", ")", "\n", "\n", "", "return", "(", "oh", ",", "ow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.Resize.__call__": [[66, 74], ["transforms.Resize.get_size", "torchvision.transforms.functional.resize", "isinstance", "target.resize.resize.resize", "t.resize"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.Resize.get_size", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.resize"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "size", "=", "self", ".", "get_size", "(", "image", ".", "size", ")", "\n", "image", "=", "F", ".", "resize", "(", "image", ",", "size", ")", "\n", "if", "isinstance", "(", "target", ",", "list", ")", ":", "\n", "            ", "target", "=", "[", "t", ".", "resize", "(", "image", ".", "size", ")", "for", "t", "in", "target", "]", "\n", "", "else", ":", "\n", "            ", "target", "=", "target", ".", "resize", "(", "image", ".", "size", ")", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.RandomHorizontalFlip.__init__": [[77, 79], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.RandomHorizontalFlip.__call__": [[80, 88], ["random.random", "torchvision.transforms.functional.hflip", "isinstance", "target.transpose.transpose.transpose", "t.transpose"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.transpose", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.transpose"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "image", "=", "F", ".", "hflip", "(", "image", ")", "\n", "if", "isinstance", "(", "target", ",", "list", ")", ":", "\n", "                ", "target", "=", "[", "t", ".", "transpose", "(", "0", ")", "for", "t", "in", "target", "]", "\n", "", "else", ":", "\n", "                ", "target", "=", "target", ".", "transpose", "(", "0", ")", "\n", "", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.ToTensor.__call__": [[91, 93], ["torchvision.transforms.functional.to_tensor"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "return", "F", ".", "to_tensor", "(", "image", ")", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.Normalize.__init__": [[96, 100], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "to_bgr255", "=", "True", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "to_bgr255", "=", "to_bgr255", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.Normalize.__call__": [[101, 106], ["torchvision.transforms.functional.normalize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "to_bgr255", ":", "\n", "            ", "image", "=", "image", "[", "[", "2", ",", "1", ",", "0", "]", "]", "*", "255", "\n", "", "image", "=", "F", ".", "normalize", "(", "image", ",", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.RandomCrop.__init__": [[110, 120], ["ValueError", "isinstance", "isinstance", "len", "ValueError", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", ",", "init_crop_size", "=", "(", "0.5", ",", "1.0", ")", ")", ":", "\n", "\n", "        ", "if", "(", "not", "isinstance", "(", "init_crop_size", ",", "list", ")", ")", "and", "(", "not", "isinstance", "(", "init_crop_size", ",", "tuple", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Paremeter init_crop_size should be a list or tuple!'", ")", "\n", "", "elif", "len", "(", "init_crop_size", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "'Length of init_crop_size should be 2!'", ")", "\n", "", "elif", "not", "(", "init_crop_size", "[", "0", "]", "<=", "1", "and", "init_crop_size", "[", "0", "]", ">=", "0", "and", "init_crop_size", "[", "1", "]", "<=", "1", "and", "init_crop_size", "[", "1", "]", ">=", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Elements of init_crop_size should be within [0, 1]!'", ")", "\n", "", "self", ".", "prob", "=", "prob", "\n", "self", ".", "init_crop_size", "=", "init_crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.RandomCrop.__call__": [[121, 152], ["isinstance", "random.random", "transforms.RandomCrop.initial_crop_region", "transforms.RandomCrop.adjust_crop_region", "isinstance", "image.crop.crop.crop", "isinstance", "target[].crop", "transforms.RandomCrop.numpy", "keep_target.crop", "keep_target.crop", "len", "t.crop"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.RandomCrop.initial_crop_region", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.RandomCrop.adjust_crop_region", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.crop", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.crop", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.crop", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.crop", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.crop"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">=", "self", ".", "prob", ":", "\n", "            ", "return", "image", ",", "target", "\n", "\n", "", "if", "isinstance", "(", "target", ",", "list", ")", ":", "\n", "            ", "target0", "=", "target", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "target0", "=", "target", "\n", "", "while", "True", ":", "\n", "# Initial Crop Region", "\n", "            ", "crop_region", "=", "self", ".", "initial_crop_region", "(", "image", ")", "\n", "\n", "# Adjust Crop Region", "\n", "crop_region", ",", "keep_target", "=", "self", ".", "adjust_crop_region", "(", "crop_region", ",", "target0", ")", "\n", "if", "crop_region", "is", "None", "and", "keep_target", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "isinstance", "(", "target", ",", "list", ")", ":", "\n", "# check empty char", "\n", "                ", "new_t1", "=", "target", "[", "1", "]", ".", "crop", "(", "crop_region", ")", "\n", "if", "len", "(", "new_t1", ")", "<", "1", ":", "return", "image", ",", "target", "\n", "\n", "", "image", "=", "image", ".", "crop", "(", "crop_region", ".", "numpy", "(", ")", ")", "\n", "if", "isinstance", "(", "target", ",", "list", ")", ":", "\n", "                ", "target0", "=", "keep_target", ".", "crop", "(", "crop_region", ")", "\n", "others", "=", "[", "t", ".", "crop", "(", "crop_region", ",", "remove_empty", "=", "True", ")", "for", "t", "in", "target", "[", "1", ":", "]", "]", "\n", "target", "=", "[", "target0", "]", "+", "others", "\n", "", "else", ":", "\n", "                ", "target", "=", "keep_target", ".", "crop", "(", "crop_region", ")", "\n", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.RandomCrop.initial_crop_region": [[153, 163], ["torch.empty().uniform_", "torch.randint", "torch.randint", "torch.Tensor", "int", "int", "torch.empty"], "methods", ["None"], ["", "", "def", "initial_crop_region", "(", "self", ",", "image", ")", ":", "\n", "        ", "width", ",", "height", "=", "image", ".", "size", "\n", "ratio_w", ",", "ratio_h", "=", "torch", ".", "empty", "(", "2", ")", ".", "uniform_", "(", "self", ".", "init_crop_size", "[", "0", "]", ",", "self", ".", "init_crop_size", "[", "1", "]", ")", "\n", "crop_width", ",", "crop_height", "=", "int", "(", "width", "*", "ratio_w", ")", ",", "int", "(", "height", "*", "ratio_h", ")", "\n", "crop_xmin", "=", "torch", ".", "randint", "(", "width", "-", "crop_width", ",", "(", "1", ",", ")", ")", "\n", "crop_ymin", "=", "torch", ".", "randint", "(", "height", "-", "crop_height", ",", "(", "1", ",", ")", ")", "\n", "crop_xmax", "=", "crop_xmin", "+", "crop_width", "\n", "crop_ymax", "=", "crop_ymin", "+", "crop_height", "\n", "crop_region", "=", "torch", ".", "Tensor", "(", "[", "crop_xmin", ",", "crop_ymin", ",", "crop_xmax", ",", "crop_ymax", "]", ")", "\n", "return", "crop_region", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.RandomCrop.intersect_area": [[164, 172], ["torch.max", "torch.max", "torch.min", "torch.min", "torch.max", "torch.max", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "intersect_area", "(", "self", ",", "bbox", ",", "bboxes", ")", ":", "\n", "        ", "inter_xmin", "=", "torch", ".", "max", "(", "bbox", "[", "0", "]", ",", "bboxes", "[", ":", ",", "0", "]", ")", "\n", "inter_ymin", "=", "torch", ".", "max", "(", "bbox", "[", "1", "]", ",", "bboxes", "[", ":", ",", "1", "]", ")", "\n", "inter_xmax", "=", "torch", ".", "min", "(", "bbox", "[", "2", "]", ",", "bboxes", "[", ":", ",", "2", "]", ")", "\n", "inter_ymax", "=", "torch", ".", "min", "(", "bbox", "[", "3", "]", ",", "bboxes", "[", ":", ",", "3", "]", ")", "\n", "inter_width", "=", "torch", ".", "max", "(", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ",", "inter_xmax", "-", "inter_xmin", ")", "\n", "inter_height", "=", "torch", ".", "max", "(", "torch", ".", "Tensor", "(", "[", "0", "]", ")", ",", "inter_ymax", "-", "inter_ymin", ")", "\n", "return", "inter_width", "*", "inter_height", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.RandomCrop.adjust_crop_region": [[173, 190], ["torch.zeros", "len", "transforms.RandomCrop.intersect_area", "keep_indies.equal", "torch.min", "torch.min", "torch.max", "torch.max", "torch.Tensor", "torch.sum", "torch.min", "torch.min", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.RandomCrop.intersect_area"], ["", "def", "adjust_crop_region", "(", "self", ",", "crop_region", ",", "target", ")", ":", "\n", "        ", "keep_indies_", "=", "torch", ".", "zeros", "(", "(", "len", "(", "target", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "while", "True", ":", "\n", "            ", "inter_area", "=", "self", ".", "intersect_area", "(", "crop_region", ",", "target", ".", "bbox", ")", "\n", "keep_indies", "=", "(", "inter_area", ">", "0", ")", "\n", "if", "torch", ".", "sum", "(", "keep_indies", ")", "==", "0", ":", "\n", "                ", "return", "None", ",", "None", "\n", "", "keep_target", "=", "target", "[", "keep_indies", "]", "\n", "if", "keep_indies", ".", "equal", "(", "keep_indies_", ")", ":", "\n", "                ", "return", "crop_region", ",", "keep_target", "\n", "", "keep_bbox", "=", "keep_target", ".", "bbox", "\n", "crop_xmin", "=", "torch", ".", "min", "(", "crop_region", "[", "0", "]", ",", "torch", ".", "min", "(", "keep_bbox", "[", ":", ",", "0", "]", ")", ")", "\n", "crop_ymin", "=", "torch", ".", "min", "(", "crop_region", "[", "1", "]", ",", "torch", ".", "min", "(", "keep_bbox", "[", ":", ",", "1", "]", ")", ")", "\n", "crop_xmax", "=", "torch", ".", "max", "(", "crop_region", "[", "2", "]", ",", "torch", ".", "max", "(", "keep_bbox", "[", ":", ",", "2", "]", ")", ")", "\n", "crop_ymax", "=", "torch", ".", "max", "(", "crop_region", "[", "3", "]", ",", "torch", ".", "max", "(", "keep_bbox", "[", ":", ",", "3", "]", ")", ")", "\n", "crop_region", "=", "torch", ".", "Tensor", "(", "[", "crop_xmin", ",", "crop_ymin", ",", "crop_xmax", ",", "crop_ymax", "]", ")", "\n", "keep_indies_", "=", "keep_indies", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.RandomRotation.__init__": [[193, 196], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.3", ",", "degree", "=", "5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "degree", "=", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.RandomRotation.kes_encode": [[197, 209], ["int", "range", "kes_encode.append", "len", "len"], "methods", ["None"], ["", "def", "kes_encode", "(", "self", ",", "kes", ")", ":", "\n", "        ", "kes_encode", "=", "[", "]", "\n", "for", "i", "in", "kes", ":", "\n", "            ", "mnx", "=", "i", "[", "0", "]", "\n", "mny", "=", "i", "[", "1", "]", "\n", "assert", "(", "len", "(", "i", ")", "%", "3", "==", "0", ")", "\n", "npts", "=", "int", "(", "len", "(", "i", ")", "/", "3", "-", "2", ")", "\n", "for", "index", "in", "range", "(", "npts", ")", ":", "\n", "                ", "i", "[", "3", "+", "index", "*", "3", "]", "=", "(", "i", "[", "3", "+", "index", "*", "3", "]", "+", "mnx", ")", "/", "2", "\n", "i", "[", "4", "+", "index", "*", "3", "]", "=", "(", "i", "[", "4", "+", "index", "*", "3", "]", "+", "mny", ")", "/", "2", "\n", "", "kes_encode", ".", "append", "(", "i", ")", "\n", "", "return", "kes_encode", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.RandomRotation.kes_gen": [[210, 222], ["kes_gen_out.append", "len"], "methods", ["None"], ["", "def", "kes_gen", "(", "self", ",", "kes", ")", ":", "\n", "        ", "kes_gen_out", "=", "[", "]", "\n", "for", "i", "in", "kes", ":", "\n", "            ", "mnx", "=", "i", "[", "0", "]", "\n", "mny", "=", "i", "[", "1", "]", "\n", "cx", "=", "i", "[", "27", "]", "\n", "cy", "=", "i", "[", "28", "]", "\n", "assert", "(", "len", "(", "i", ")", "%", "3", "==", "0", ")", "\n", "ot", "=", "[", "mnx", ",", "i", "[", "3", "]", ",", "i", "[", "6", "]", ",", "i", "[", "9", "]", ",", "i", "[", "12", "]", ",", "cx", ",", "mny", ",", "i", "[", "16", "]", ",", "i", "[", "19", "]", ",", "i", "[", "22", "]", ",", "i", "[", "25", "]", ",", "cy", "]", "\n", "kes_gen_out", ".", "append", "(", "ot", ")", "\n", "", "return", "kes_gen_out", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.RandomRotation.__call__": [[223, 411], ["random.random", "numpy.array", "range", "cv2.getRotationMatrix2D", "numpy.abs", "numpy.abs", "int", "int", "cv2.warpAffine", "range", "PIL.Image.fromarray", "len", "range", "numpy.array().reshape", "range", "max", "min", "max", "min", "range", "image.crop.crop.crop", "numpy.array", "numpy.array", "range", "range", "torch.tensor", "torch.as_tensor().reshape", "maskrcnn_benchmark.structures.bounding_box.BoxList().convert", "maskrcnn_benchmark.structures.bounding_box.BoxList().convert.add_field", "maskrcnn_benchmark.structures.segmentation_mask.SegmentationMask", "maskrcnn_benchmark.structures.bounding_box.BoxList().convert.add_field", "transforms.RandomRotation.kes_gen", "maskrcnn_benchmark.structures.ke.textKES", "maskrcnn_benchmark.structures.bounding_box.BoxList().convert.add_field", "maskrcnn_benchmark.structures.mty.MTY", "maskrcnn_benchmark.structures.bounding_box.BoxList().convert.add_field", "len", "numpy.array", "numpy.array", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "pri_points.append", "pri_points.append", "pri_points.append", "pri_points.append", "random.uniform", "int", "cv2.transform().squeeze", "change_points.append", "int", "numpy.array().reshape.append", "len", "numpy.array.append", "numpy.array.append", "len", "int", "LineString", "LineString", "LineString.intersection", "Polygon", "min", "max", "min", "max", "max", "max", "torch.as_tensor().reshape.append", "maskrcnn_benchmark.structures.segmentation_mask.SegmentationMask.append", "numpy.mean", "numpy.mean", "numpy.sort", "numpy.sort", "list", "list", "range", "all_types.index", "maskrcnn_benchmark.structures.mty.MTY.append", "keypoints.append", "keypoints.append", "keypoints.append", "range", "range", "maskrcnn_benchmark.structures.ke.textKES.append", "len", "torch.tensor.append", "len", "len", "numpy.array", "int", "int", "LineString.intersection.within", "numpy.argsort", "numpy.argsort", "ldx.append", "keypoints.append", "keypoints.append", "keypoints.append", "keypoints.append", "keypoints.append", "keypoints.append", "keypoints.append", "keypoints.append", "keypoints.append", "torch.as_tensor", "maskrcnn_benchmark.structures.bounding_box.BoxList", "int", "int", "int", "int", "int", "int", "int", "int", "cv2.transform", "list.index", "range", "int", "int", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.crop", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.convert", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.transforms.RandomRotation.kes_gen", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.keypoint.Keypoints.add_field"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "image1", "=", "image", "\n", "target1", "=", "target", "\n", "img", "=", "np", ".", "array", "(", "image", ")", "\n", "w", "=", "image", ".", "size", "[", "0", "]", "\n", "h", "=", "image", ".", "size", "[", "1", "]", "\n", "pri_points", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "target", ".", "extra_fields", "[", "'masks'", "]", ".", "instances", ")", ")", ":", "\n", "                ", "assert", "(", "len", "(", "target", ".", "extra_fields", "[", "'masks'", "]", ".", "instances", "[", "i", "]", ".", "polygons", ")", "==", "1", ")", ",", "'one text instance should have only one polygon.'", "\n", "tensor_box", "=", "target", ".", "extra_fields", "[", "'masks'", "]", ".", "instances", "[", "i", "]", ".", "polygons", "[", "0", "]", ".", "polygons", "\n", "\n", "points_x", "=", "np", ".", "array", "(", "[", "tensor_box", "[", "0", "]", "[", "0", "]", ",", "tensor_box", "[", "0", "]", "[", "2", "]", ",", "tensor_box", "[", "0", "]", "[", "4", "]", ",", "tensor_box", "[", "0", "]", "[", "6", "]", "]", ")", "\n", "points_y", "=", "np", ".", "array", "(", "[", "tensor_box", "[", "0", "]", "[", "1", "]", ",", "tensor_box", "[", "0", "]", "[", "3", "]", ",", "tensor_box", "[", "0", "]", "[", "5", "]", ",", "tensor_box", "[", "0", "]", "[", "7", "]", "]", ")", "\n", "smaller_x", "=", "np", ".", "where", "(", "points_x", "<=", "0", ")", "\n", "larger_x", "=", "np", ".", "where", "(", "points_x", ">=", "w", ")", "\n", "smaller_y", "=", "np", ".", "where", "(", "points_y", "<=", "0", ")", "\n", "larger_y", "=", "np", ".", "where", "(", "points_y", ">=", "h", ")", "\n", "points_x", "[", "smaller_x", "]", "=", "1", "\n", "points_x", "[", "larger_x", "]", "=", "w", "-", "1", "\n", "points_y", "[", "smaller_y", "]", "=", "1", "\n", "points_y", "[", "larger_y", "]", "=", "h", "-", "1", "\n", "pri_points", ".", "append", "(", "(", "int", "(", "points_x", "[", "0", "]", ")", ",", "int", "(", "points_y", "[", "0", "]", ")", ")", ")", "\n", "pri_points", ".", "append", "(", "(", "int", "(", "points_x", "[", "1", "]", ")", ",", "int", "(", "points_y", "[", "1", "]", ")", ")", ")", "\n", "pri_points", ".", "append", "(", "(", "int", "(", "points_x", "[", "2", "]", ")", ",", "int", "(", "points_y", "[", "2", "]", ")", ")", ")", "\n", "pri_points", ".", "append", "(", "(", "int", "(", "points_x", "[", "3", "]", ")", ",", "int", "(", "points_y", "[", "3", "]", ")", ")", ")", "\n", "\n", "#get the transform image and points  ", "\n", "", "height", ",", "width", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "matrix", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "width", "/", "2", ",", "height", "/", "2", ")", ",", "random", ".", "uniform", "(", "-", "self", ".", "degree", ",", "self", ".", "degree", ")", ",", "1.0", ")", "\n", "cos", "=", "np", ".", "abs", "(", "matrix", "[", "0", ",", "0", "]", ")", "\n", "sin", "=", "np", ".", "abs", "(", "matrix", "[", "0", ",", "1", "]", ")", "\n", "new_W", "=", "int", "(", "(", "height", "*", "sin", ")", "+", "(", "width", "*", "cos", ")", ")", "\n", "new_H", "=", "int", "(", "(", "height", "*", "cos", ")", "+", "(", "width", "*", "sin", ")", ")", "\n", "matrix", "[", "0", ",", "2", "]", "+=", "(", "new_W", "/", "2", ")", "-", "width", "/", "2", "\n", "matrix", "[", "1", ",", "2", "]", "+=", "(", "(", "new_H", "/", "2", ")", ")", "-", "height", "/", "2", "\n", "img", "=", "cv2", ".", "warpAffine", "(", "img", ",", "matrix", ",", "(", "new_W", ",", "new_H", ")", ")", "\n", "\n", "change_points", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "len", "(", "pri_points", ")", ")", ")", ":", "\n", "                ", "x_r", ",", "y_r", "=", "cv2", ".", "transform", "(", "np", ".", "array", "(", "[", "[", "pri_points", "[", "i", "]", "]", "]", ")", ",", "matrix", ")", ".", "squeeze", "(", ")", "\n", "change_points", ".", "append", "(", "[", "x_r", ",", "y_r", "]", ")", "\n", "\n", "", "image", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "keypoints_len", "=", "len", "(", "change_points", ")", "\n", "tran_boxes", "=", "[", "]", "\n", "n", "=", "keypoints_len", "/", "4", "\n", "\n", "for", "i", "in", "range", "(", "int", "(", "n", ")", ")", ":", "\n", "                ", "tran_boxes", ".", "append", "(", "change_points", "[", "0", "+", "i", "*", "4", ":", "4", "+", "i", "*", "4", "]", ")", "\n", "\n", "", "tran_boxes", "=", "np", ".", "array", "(", "tran_boxes", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "tran_x", "=", "[", "]", "\n", "tran_y", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "tran_boxes", ")", ")", ":", "\n", "                ", "tran_x", ".", "append", "(", "int", "(", "tran_boxes", "[", "k", "]", "[", "0", "]", ")", ")", "\n", "tran_y", ".", "append", "(", "int", "(", "tran_boxes", "[", "k", "]", "[", "1", "]", ")", ")", "\n", "", "max_x", "=", "max", "(", "tran_x", ")", "\n", "min_x", "=", "min", "(", "tran_x", ")", "\n", "max_y", "=", "max", "(", "tran_y", ")", "\n", "min_y", "=", "min", "(", "tran_x", ")", "\n", "ctr_x", "=", "new_W", "/", "2", "\n", "ctr_y", "=", "new_H", "/", "2", "\n", "origin_xmin", "=", "ctr_x", "-", "width", "/", "2", "\n", "origin_xmax", "=", "ctr_x", "+", "width", "/", "2", "\n", "origin_ymin", "=", "ctr_y", "-", "height", "/", "2", "\n", "origin_ymax", "=", "ctr_y", "+", "height", "/", "2", "\n", "cut_xmax", "=", "origin_xmax", "\n", "cut_xmin", "=", "origin_xmin", "\n", "cut_ymax", "=", "origin_ymax", "\n", "cut_ymin", "=", "origin_ymin", "\n", "if", "max_x", ">=", "origin_xmax", ":", "\n", "                ", "cut_xmax", "=", "max_x", "\n", "", "if", "min_x", "<=", "origin_xmin", ":", "\n", "                ", "cut_xmin", "=", "min_x", "\n", "", "if", "max_y", ">=", "origin_ymax", ":", "\n", "                ", "cut_ymax", "=", "max_y", "\n", "", "if", "min_y", "<=", "origin_ymin", ":", "\n", "                ", "cut_ymin", "=", "min_y", "\n", "", "for", "i", "in", "range", "(", "len", "(", "tran_boxes", ")", ")", ":", "\n", "                ", "tran_x", "[", "i", "]", "=", "tran_x", "[", "i", "]", "-", "cut_xmin", "\n", "tran_y", "[", "i", "]", "=", "tran_y", "[", "i", "]", "-", "cut_ymin", "\n", "", "image", "=", "image", ".", "crop", "(", "(", "cut_xmin", ",", "cut_ymin", ",", "cut_xmax", ",", "cut_ymax", ")", ")", "\n", "tran_x", "=", "np", ".", "array", "(", "tran_x", ")", "\n", "tran_y", "=", "np", ".", "array", "(", "tran_y", ")", "\n", "\n", "boxes", "=", "[", "]", "\n", "masks", "=", "[", "]", "\n", "mty", "=", "[", "]", "\n", "kes", "=", "[", "]", "\n", "#GET FORMAT OF BOXES,MASKS,MTY,KES", "\n", "for", "idx", "in", "range", "(", "int", "(", "tran_x", ".", "size", "/", "4", ")", ")", ":", "\n", "                ", "x_points", "=", "[", "tran_x", "[", "4", "*", "idx", "]", ",", "tran_x", "[", "4", "*", "idx", "+", "1", "]", ",", "tran_x", "[", "4", "*", "idx", "+", "2", "]", ",", "tran_x", "[", "4", "*", "idx", "+", "3", "]", "]", "\n", "y_points", "=", "[", "tran_y", "[", "4", "*", "idx", "]", ",", "tran_y", "[", "4", "*", "idx", "+", "1", "]", ",", "tran_y", "[", "4", "*", "idx", "+", "2", "]", ",", "tran_y", "[", "4", "*", "idx", "+", "3", "]", "]", "\n", "\n", "l1", "=", "LineString", "(", "[", "(", "x_points", "[", "0", "]", ",", "y_points", "[", "0", "]", ")", ",", "(", "x_points", "[", "2", "]", ",", "y_points", "[", "2", "]", ")", "]", ")", "\n", "l2", "=", "LineString", "(", "[", "(", "x_points", "[", "1", "]", ",", "y_points", "[", "1", "]", ")", ",", "(", "x_points", "[", "3", "]", ",", "y_points", "[", "3", "]", ")", "]", ")", "\n", "p_l1l2", "=", "l1", ".", "intersection", "(", "l2", ")", "\n", "poly1", "=", "Polygon", "(", "[", "(", "x_points", "[", "0", "]", ",", "y_points", "[", "0", "]", ")", ",", "(", "x_points", "[", "1", "]", ",", "y_points", "[", "1", "]", ")", ",", "\n", "(", "x_points", "[", "2", "]", ",", "y_points", "[", "2", "]", ")", ",", "(", "x_points", "[", "3", "]", ",", "y_points", "[", "3", "]", ")", "]", ")", "\n", "if", "not", "poly1", ".", "is_valid", ":", "\n", "                    ", "continue", "\n", "", "if", "not", "p_l1l2", ".", "within", "(", "poly1", ")", ":", "\n", "                    ", "continue", "\n", "", "if", "poly1", ".", "area", "<=", "10", ":", "\n", "                    ", "continue", "\n", "", "x_min", "=", "min", "(", "x_points", ")", "\n", "x_max", "=", "max", "(", "x_points", ")", "\n", "y_min", "=", "min", "(", "y_points", ")", "\n", "y_max", "=", "max", "(", "y_points", ")", "\n", "width", "=", "max", "(", "0", ",", "x_max", "-", "x_min", "+", "1", ")", "\n", "height", "=", "max", "(", "0", ",", "y_max", "-", "y_min", "+", "1", ")", "\n", "if", "width", "==", "0", "or", "height", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "boxes", ".", "append", "(", "[", "x_min", ",", "y_min", ",", "width", ",", "height", "]", ")", "\n", "\n", "#get mask format", "\n", "one_point", "=", "[", "[", "tran_x", "[", "4", "*", "idx", "]", ",", "tran_y", "[", "4", "*", "idx", "]", ",", "tran_x", "[", "4", "*", "idx", "+", "1", "]", ",", "tran_y", "[", "4", "*", "idx", "+", "1", "]", ",", "tran_x", "[", "4", "*", "idx", "+", "2", "]", ",", "tran_y", "[", "4", "*", "idx", "+", "2", "]", ",", "tran_x", "[", "4", "*", "idx", "+", "3", "]", ",", "tran_y", "[", "4", "*", "idx", "+", "3", "]", "]", "]", "\n", "masks", ".", "append", "(", "one_point", ")", "\n", "\n", "#get matchtype format", "\n", "mean_x", "=", "np", ".", "mean", "(", "x_points", ")", "\n", "mean_y", "=", "np", ".", "mean", "(", "y_points", ")", "\n", "xt_sort", "=", "np", ".", "sort", "(", "x_points", ")", "\n", "yt_sort", "=", "np", ".", "sort", "(", "y_points", ")", "\n", "xt_argsort", "=", "list", "(", "np", ".", "argsort", "(", "x_points", ")", ")", "\n", "yt_argsort", "=", "list", "(", "np", ".", "argsort", "(", "y_points", ")", ")", "\n", "ldx", "=", "[", "]", "\n", "for", "ildx", "in", "range", "(", "4", ")", ":", "\n", "                    ", "ldx", ".", "append", "(", "yt_argsort", ".", "index", "(", "xt_argsort", "[", "ildx", "]", ")", ")", "\n", "", "all_types", "=", "[", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "[", "1", ",", "2", ",", "4", ",", "3", "]", ",", "[", "1", ",", "3", ",", "2", ",", "4", "]", ",", "[", "1", ",", "3", ",", "4", ",", "2", "]", ",", "[", "1", ",", "4", ",", "2", ",", "3", "]", ",", "[", "1", ",", "4", ",", "3", ",", "2", "]", ",", "[", "2", ",", "1", ",", "3", ",", "4", "]", ",", "[", "2", ",", "1", ",", "4", ",", "3", "]", ",", "[", "2", ",", "3", ",", "1", ",", "4", "]", ",", "[", "2", ",", "3", ",", "4", ",", "1", "]", ",", "[", "2", ",", "4", ",", "1", ",", "3", "]", ",", "[", "2", ",", "4", ",", "3", ",", "1", "]", ",", "[", "3", ",", "1", ",", "2", ",", "4", "]", ",", "[", "3", ",", "1", ",", "4", ",", "2", "]", ",", "[", "3", ",", "2", ",", "1", ",", "4", "]", ",", "[", "3", ",", "2", ",", "4", ",", "1", "]", ",", "[", "3", ",", "4", ",", "1", ",", "2", "]", ",", "[", "3", ",", "4", ",", "2", ",", "1", "]", ",", "[", "4", ",", "1", ",", "2", ",", "3", "]", ",", "[", "4", ",", "1", ",", "3", ",", "2", "]", ",", "[", "4", ",", "2", ",", "1", ",", "3", "]", ",", "[", "4", ",", "2", ",", "3", ",", "1", "]", ",", "[", "4", ",", "3", ",", "1", ",", "2", "]", ",", "[", "4", ",", "3", ",", "2", ",", "1", "]", "]", "\n", "all_types", "=", "[", "[", "all_types", "[", "iat", "]", "[", "0", "]", "-", "1", ",", "all_types", "[", "iat", "]", "[", "1", "]", "-", "1", ",", "all_types", "[", "iat", "]", "[", "2", "]", "-", "1", ",", "all_types", "[", "iat", "]", "[", "3", "]", "-", "1", "]", "for", "iat", "in", "range", "(", "24", ")", "]", "\n", "match_type", "=", "all_types", ".", "index", "(", "ldx", ")", "\n", "mty", ".", "append", "(", "match_type", ")", "\n", "\n", "half_x", "=", "(", "xt_sort", "+", "mean_x", ")", "/", "2", "\n", "half_y", "=", "(", "yt_sort", "+", "mean_y", ")", "/", "2", "\n", "\n", "keypoints", "=", "[", "]", "\n", "keypoints", ".", "append", "(", "mean_x", ")", "\n", "keypoints", ".", "append", "(", "mean_y", ")", "\n", "keypoints", ".", "append", "(", "2", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                    ", "keypoints", ".", "append", "(", "half_x", "[", "i", "]", ")", "\n", "keypoints", ".", "append", "(", "mean_y", ")", "\n", "keypoints", ".", "append", "(", "2", ")", "\n", "", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                    ", "keypoints", ".", "append", "(", "mean_x", ")", "\n", "keypoints", ".", "append", "(", "half_y", "[", "i", "]", ")", "\n", "keypoints", ".", "append", "(", "2", ")", "\n", "", "try", ":", "\n", "                    ", "keypoints", ".", "append", "(", "int", "(", "p_l1l2", ".", "x", ")", ")", "\n", "keypoints", ".", "append", "(", "int", "(", "p_l1l2", ".", "y", ")", ")", "\n", "keypoints", ".", "append", "(", "2", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "continue", "\n", "", "kes", ".", "append", "(", "keypoints", ")", "\n", "\n", "#IF ENCOUNTER THAT NO BOX IN A TRANSFORMED IMAGE, RETURN PRIMARY IMAGE AND TARGET", "\n", "", "if", "kes", "==", "[", "]", ":", "\n", "                ", "image", "=", "image1", "\n", "target", "=", "target1", "\n", "return", "image", ",", "target", "\n", "", "classes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "boxes", ")", ")", ":", "\n", "                ", "classes", ".", "append", "(", "1", ")", "\n", "", "classes", "=", "torch", ".", "tensor", "(", "classes", ")", "\n", "#GET NEW TARGET", "\n", "boxes", "=", "torch", ".", "as_tensor", "(", "boxes", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "target", "=", "BoxList", "(", "boxes", ",", "image", ".", "size", ",", "mode", "=", "\"xywh\"", ")", ".", "convert", "(", "\"xyxy\"", ")", "\n", "\n", "target", ".", "add_field", "(", "\"labels\"", ",", "classes", ")", "\n", "\n", "masks", "=", "SegmentationMask", "(", "masks", ",", "image", ".", "size", ")", "\n", "target", ".", "add_field", "(", "\"masks\"", ",", "masks", ")", "\n", "\n", "kes", "=", "self", ".", "kes_gen", "(", "kes", ")", "\n", "kes", "=", "textKES", "(", "kes", ",", "image", ".", "size", ")", "\n", "target", ".", "add_field", "(", "\"kes\"", ",", "kes", ")", "\n", "\n", "mty", "=", "MTY", "(", "mty", ",", "image", ".", "size", ")", "\n", "target", ".", "add_field", "(", "\"mty\"", ",", "mty", ")", "\n", "\n", "", "return", "image", ",", "target", "", "", "", ""]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.transforms.build.build_transforms": [[5, 45], ["transforms.Normalize", "transforms.Compose", "range", "transforms.RandomCrop", "transforms.Resize", "transforms.RandomHorizontalFlip", "transforms.RandomRotation", "transforms.ToTensor", "len"], "function", ["None"], ["\n", "import", "torch", ".", "utils", ".", "data", "\n", "from", "maskrcnn_benchmark", ".", "utils", ".", "comm", "import", "get_world_size", "\n", "from", "maskrcnn_benchmark", ".", "utils", ".", "imports", "import", "import_file", "\n", "\n", "from", ".", "import", "datasets", "as", "D", "\n", "from", ".", "import", "samplers", "\n", "\n", "from", ".", "collate_batch", "import", "BatchCollator", "\n", "from", ".", "transforms", "import", "build_transforms", "\n", "\n", "\n", "def", "build_dataset", "(", "dataset_list", ",", "transforms", ",", "dataset_catalog", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Arguments:\n        dataset_list (list[str]): Contains the names of the datasets, i.e.,\n            coco_2014_trian, coco_2014_val, etc\n        transforms (callable): transforms to apply to each (image, target) sample\n        dataset_catalog (DatasetCatalog): contains the information on how to\n            construct a dataset.\n        is_train (bool): whether to setup the dataset for training or testing\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "dataset_list", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"dataset_list should be a list of strings, got {}\"", ".", "format", "(", "dataset_list", ")", "\n", ")", "\n", "", "datasets", "=", "[", "]", "\n", "for", "dataset_name", "in", "dataset_list", ":", "\n", "        ", "data", "=", "dataset_catalog", ".", "get", "(", "dataset_name", ")", "\n", "factory", "=", "getattr", "(", "D", ",", "data", "[", "\"factory\"", "]", ")", "\n", "args", "=", "data", "[", "\"args\"", "]", "\n", "# for COCODataset, we want to remove images without annotations", "\n", "# during training", "\n", "if", "data", "[", "\"factory\"", "]", "in", "[", "\"COCODataset\"", ",", "\n", "\"WordDataset\"", "]", ":", "\n", "            ", "args", "[", "\"remove_images_without_annotations\"", "]", "=", "is_train", "\n", "", "if", "data", "[", "\"factory\"", "]", "==", "\"PascalVOCDataset\"", ":", "\n", "            ", "args", "[", "\"use_difficult\"", "]", "=", "not", "is_train", "\n", "", "args", "[", "\"transforms\"", "]", "=", "transforms", "\n", "# make dataset from factory", "\n", "dataset", "=", "factory", "(", "**", "args", ")", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.build.make_optimizer": [[7, 21], ["model.named_parameters", "torch.optim.SGD"], "function", ["None"], ["from", "maskrcnn_benchmark", ".", "utils", ".", "comm", "import", "get_world_size", "\n", "from", "maskrcnn_benchmark", ".", "utils", ".", "imports", "import", "import_file", "\n", "\n", "from", ".", "import", "datasets", "as", "D", "\n", "from", ".", "import", "samplers", "\n", "\n", "from", ".", "collate_batch", "import", "BatchCollator", "\n", "from", ".", "transforms", "import", "build_transforms", "\n", "\n", "\n", "def", "build_dataset", "(", "dataset_list", ",", "transforms", ",", "dataset_catalog", ",", "is_train", "=", "True", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.build.make_lr_scheduler": [[23, 31], ["lr_scheduler.WarmupMultiStepLR"], "function", ["None"], ["\n", "if", "not", "isinstance", "(", "dataset_list", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"dataset_list should be a list of strings, got {}\"", ".", "format", "(", "dataset_list", ")", "\n", ")", "\n", "", "datasets", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__": [[11, 38], ["super().__init__", "ValueError", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "milestones", ",", "\n", "gamma", "=", "0.1", ",", "\n", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_iters", "=", "500", ",", "\n", "warmup_method", "=", "\"linear\"", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Milestones should be a list of\"", "\" increasing integers. Got {}\"", ",", "\n", "milestones", ",", "\n", ")", "\n", "\n", "", "if", "warmup_method", "not", "in", "(", "\"constant\"", ",", "\"linear\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Only 'constant' or 'linear' warmup_method accepted\"", "\n", "\"got {}\"", ".", "format", "(", "warmup_method", ")", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", "WarmupMultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.solver.lr_scheduler.WarmupMultiStepLR.get_lr": [[39, 52], ["bisect.bisect_right", "float"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "warmup_factor", "=", "1", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_iters", ":", "\n", "            ", "if", "self", ".", "warmup_method", "==", "\"constant\"", ":", "\n", "                ", "warmup_factor", "=", "self", ".", "warmup_factor", "\n", "", "elif", "self", ".", "warmup_method", "==", "\"linear\"", ":", "\n", "                ", "alpha", "=", "float", "(", "self", ".", "last_epoch", ")", "/", "self", ".", "warmup_iters", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ic15_TIoU_metric.script.evaluation_imports": [[9, 16], ["None"], "function", ["None"], ["def", "evaluation_imports", "(", ")", ":", "\n", "    ", "\"\"\"\n    evaluation_imports: Dictionary ( key = module name , value = alias  )  with python modules used in the evaluation. \n    \"\"\"", "\n", "return", "{", "\n", "'Polygon'", ":", "'plg'", ",", "\n", "'numpy'", ":", "'np'", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ic15_TIoU_metric.script.default_evaluation_params": [[18, 31], ["None"], "function", ["None"], ["", "def", "default_evaluation_params", "(", ")", ":", "\n", "    ", "\"\"\"\n    default_evaluation_params: Default parameters to use for the validation and evaluation.\n    \"\"\"", "\n", "return", "{", "\n", "'IOU_CONSTRAINT'", ":", "0.5", ",", "\n", "'AREA_PRECISION_CONSTRAINT'", ":", "0.5", ",", "\n", "'GT_SAMPLE_NAME_2_ID'", ":", "'([0-9]+).txt'", ",", "\n", "'DET_SAMPLE_NAME_2_ID'", ":", "'([0-9]+).txt'", ",", "\n", "'LTRB'", ":", "False", ",", "#LTRB:2points(left,top,right,bottom) or 4 points(x1,y1,x2,y2,x3,y3,x4,y4)", "\n", "'CRLF'", ":", "False", ",", "# Lines are delimited by Windows CRLF format", "\n", "'CONFIDENCES'", ":", "False", ",", "#Detections must include confidence value. AP will be calculated", "\n", "'PER_SAMPLE_RESULTS'", ":", "True", "#Generate per sample results and produce data for visualization", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ic15_TIoU_metric.script.validate_data": [[33, 53], ["rrc_evaluation_funcs.load_zip_file", "rrc_evaluation_funcs.load_zip_file", "rrc_evaluation_funcs.validate_lines_in_file", "rrc_evaluation_funcs.validate_lines_in_file", "Exception"], "function", ["None"], ["", "def", "validate_data", "(", "gtFilePath", ",", "submFilePath", ",", "evaluationParams", ")", ":", "\n", "    ", "\"\"\"\n    Method validate_data: validates that all files in the results folder are correct (have the correct name contents).\n                            Validates also that there are no missing files in the folder.\n                            If some error detected, the method raises the error\n    \"\"\"", "\n", "gt", "=", "rrc_evaluation_funcs", ".", "load_zip_file", "(", "gtFilePath", ",", "evaluationParams", "[", "'GT_SAMPLE_NAME_2_ID'", "]", ")", "\n", "\n", "subm", "=", "rrc_evaluation_funcs", ".", "load_zip_file", "(", "submFilePath", ",", "evaluationParams", "[", "'DET_SAMPLE_NAME_2_ID'", "]", ",", "True", ")", "\n", "\n", "#Validate format of GroundTruth", "\n", "for", "k", "in", "gt", ":", "\n", "        ", "rrc_evaluation_funcs", ".", "validate_lines_in_file", "(", "k", ",", "gt", "[", "k", "]", ",", "evaluationParams", "[", "'CRLF'", "]", ",", "evaluationParams", "[", "'LTRB'", "]", ",", "True", ")", "\n", "\n", "#Validate format of results", "\n", "", "for", "k", "in", "subm", ":", "\n", "        ", "if", "(", "k", "in", "gt", ")", "==", "False", ":", "\n", "            ", "raise", "Exception", "(", "\"The sample %s not present in GT\"", "%", "k", ")", "\n", "\n", "", "rrc_evaluation_funcs", ".", "validate_lines_in_file", "(", "k", ",", "subm", "[", "k", "]", ",", "evaluationParams", "[", "'CRLF'", "]", ",", "evaluationParams", "[", "'LTRB'", "]", ",", "False", ",", "evaluationParams", "[", "'CONFIDENCES'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.ic15_TIoU_metric.script.evaluate_method": [[55, 452], ["evaluation_imports().iteritems", "collections.namedtuple", "rrc_evaluation_funcs.load_zip_file", "rrc_evaluation_funcs.load_zip_file", "print", "print", "print", "importlib.import_module", "np.empty", "int", "int", "int", "int", "int", "int", "int", "int", "plg.Polygon", "np.empty", "int", "int", "int", "int", "int", "int", "int", "int", "plg.Polygon", "pD.area", "pG.area", "pInt.area", "pInt_3.area", "rrc_evaluation_funcs.decode_utf8", "np.empty", "rrc_evaluation_funcs.get_tl_line_values_from_file_contents", "range", "script.evaluate_method.compute_ap"], "function", ["home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.area", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.area", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.area", "home.repos.pwc.inspect_result.Yuliang-Liu_Box_Discretization_Network.structures.bounding_box.BoxList.area"], ["", "", "def", "evaluate_method", "(", "gtFilePath", ",", "submFilePath", ",", "evaluationParams", ")", ":", "\n", "    ", "\"\"\"\n    Method evaluate_method: evaluate method and returns the results\n        Results. Dictionary with the following values:\n        - method (required)  Global method metrics. Ex: { 'Precision':0.8,'Recall':0.9 }\n        - samples (optional) Per sample metrics. Ex: {'sample1' : { 'Precision':0.8,'Recall':0.9 } , 'sample2' : { 'Precision':0.8,'Recall':0.9 }\n    \"\"\"", "\n", "\n", "for", "module", ",", "alias", "in", "evaluation_imports", "(", ")", ".", "iteritems", "(", ")", ":", "\n", "        ", "globals", "(", ")", "[", "alias", "]", "=", "importlib", ".", "import_module", "(", "module", ")", "\n", "\n", "", "def", "polygon_from_points", "(", "points", ")", ":", "\n", "        ", "\"\"\"\n        Returns a Polygon object to use with the Polygon2 class from a list of 8 points: x1,y1,x2,y2,x3,y3,x4,y4\n        \"\"\"", "\n", "resBoxes", "=", "np", ".", "empty", "(", "[", "1", ",", "8", "]", ",", "dtype", "=", "'int32'", ")", "\n", "resBoxes", "[", "0", ",", "0", "]", "=", "int", "(", "points", "[", "0", "]", ")", "\n", "resBoxes", "[", "0", ",", "4", "]", "=", "int", "(", "points", "[", "1", "]", ")", "\n", "resBoxes", "[", "0", ",", "1", "]", "=", "int", "(", "points", "[", "2", "]", ")", "\n", "resBoxes", "[", "0", ",", "5", "]", "=", "int", "(", "points", "[", "3", "]", ")", "\n", "resBoxes", "[", "0", ",", "2", "]", "=", "int", "(", "points", "[", "4", "]", ")", "\n", "resBoxes", "[", "0", ",", "6", "]", "=", "int", "(", "points", "[", "5", "]", ")", "\n", "resBoxes", "[", "0", ",", "3", "]", "=", "int", "(", "points", "[", "6", "]", ")", "\n", "resBoxes", "[", "0", ",", "7", "]", "=", "int", "(", "points", "[", "7", "]", ")", "\n", "pointMat", "=", "resBoxes", "[", "0", "]", ".", "reshape", "(", "[", "2", ",", "4", "]", ")", ".", "T", "\n", "return", "plg", ".", "Polygon", "(", "pointMat", ")", "\n", "\n", "", "def", "rectangle_to_polygon", "(", "rect", ")", ":", "\n", "        ", "resBoxes", "=", "np", ".", "empty", "(", "[", "1", ",", "8", "]", ",", "dtype", "=", "'int32'", ")", "\n", "resBoxes", "[", "0", ",", "0", "]", "=", "int", "(", "rect", ".", "xmin", ")", "\n", "resBoxes", "[", "0", ",", "4", "]", "=", "int", "(", "rect", ".", "ymax", ")", "\n", "resBoxes", "[", "0", ",", "1", "]", "=", "int", "(", "rect", ".", "xmin", ")", "\n", "resBoxes", "[", "0", ",", "5", "]", "=", "int", "(", "rect", ".", "ymin", ")", "\n", "resBoxes", "[", "0", ",", "2", "]", "=", "int", "(", "rect", ".", "xmax", ")", "\n", "resBoxes", "[", "0", ",", "6", "]", "=", "int", "(", "rect", ".", "ymin", ")", "\n", "resBoxes", "[", "0", ",", "3", "]", "=", "int", "(", "rect", ".", "xmax", ")", "\n", "resBoxes", "[", "0", ",", "7", "]", "=", "int", "(", "rect", ".", "ymax", ")", "\n", "\n", "pointMat", "=", "resBoxes", "[", "0", "]", ".", "reshape", "(", "[", "2", ",", "4", "]", ")", ".", "T", "\n", "\n", "return", "plg", ".", "Polygon", "(", "pointMat", ")", "\n", "\n", "", "def", "rectangle_to_points", "(", "rect", ")", ":", "\n", "        ", "points", "=", "[", "int", "(", "rect", ".", "xmin", ")", ",", "int", "(", "rect", ".", "ymax", ")", ",", "int", "(", "rect", ".", "xmax", ")", ",", "int", "(", "rect", ".", "ymax", ")", ",", "int", "(", "rect", ".", "xmax", ")", ",", "int", "(", "rect", ".", "ymin", ")", ",", "int", "(", "rect", ".", "xmin", ")", ",", "int", "(", "rect", ".", "ymin", ")", "]", "\n", "return", "points", "\n", "\n", "", "def", "get_union", "(", "pD", ",", "pG", ")", ":", "\n", "        ", "areaA", "=", "pD", ".", "area", "(", ")", ";", "\n", "areaB", "=", "pG", ".", "area", "(", ")", ";", "\n", "return", "areaA", "+", "areaB", "-", "get_intersection", "(", "pD", ",", "pG", ")", ";", "\n", "\n", "", "def", "get_intersection_over_union", "(", "pD", ",", "pG", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "get_intersection", "(", "pD", ",", "pG", ")", "/", "get_union", "(", "pD", ",", "pG", ")", ";", "\n", "", "except", ":", "\n", "            ", "return", "0", "\n", "\n", "", "", "def", "funcCt", "(", "x", ")", ":", "\n", "        ", "if", "x", "<=", "0.01", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "1", "-", "x", "\n", "\n", "", "", "def", "get_text_intersection_over_union_recall", "(", "pD", ",", "pG", ")", ":", "\n", "        ", "'''\n        Ct (cut): Area of ground truth that is not covered by detection bounding box.\n        '''", "\n", "try", ":", "\n", "            ", "Ct", "=", "pG", ".", "area", "(", ")", "-", "get_intersection", "(", "pD", ",", "pG", ")", "\n", "assert", "(", "Ct", ">=", "0", "and", "Ct", "<=", "pG", ".", "area", "(", ")", ")", ",", "'Invalid Ct value'", "\n", "assert", "(", "pG", ".", "area", "(", ")", ">", "0", ")", ",", "'Invalid Gt'", "\n", "return", "(", "get_intersection", "(", "pD", ",", "pG", ")", "*", "funcCt", "(", "Ct", "*", "1.0", "/", "pG", ".", "area", "(", ")", ")", ")", "/", "get_union", "(", "pD", ",", "pG", ")", ";", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "return", "0", "\n", "\n", "\n", "", "", "def", "funcOt", "(", "x", ")", ":", "\n", "        ", "if", "x", "<=", "0.01", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "1", "-", "x", "\n", "\n", "\n", "", "", "def", "get_text_intersection_over_union_precision", "(", "pD", ",", "pG", ",", "gtNum", ",", "gtPolys", ",", "gtDontCarePolsNum", ")", ":", "\n", "        ", "'''\n        Ot: Outlier gt area\n        '''", "\n", "Ot", "=", "0", "\n", "try", ":", "\n", "            ", "inside_pG", "=", "pD", "&", "pG", "\n", "gt_union_inside_pD", "=", "None", "\n", "gt_union_inside_pD_and_pG", "=", "None", "\n", "count_initial", "=", "0", "\n", "for", "i", "in", "xrange", "(", "len", "(", "gtPolys", ")", ")", ":", "\n", "                ", "if", "i", "!=", "gtNum", "and", "gtNum", "not", "in", "gtDontCarePolsNum", ":", "# ignore don't care regions", "\n", "                    ", "if", "not", "get_intersection", "(", "pD", ",", "gtPolys", "[", "i", "]", ")", "==", "0", ":", "\n", "                        ", "if", "count_initial", "==", "0", ":", "\n", "# initial ", "\n", "                            ", "gt_union_inside_pD", "=", "gtPolys", "[", "i", "]", "\n", "gt_union_inside_pD_and_pG", "=", "inside_pG", "&", "gtPolys", "[", "i", "]", "\n", "count_initial", "=", "1", "\n", "continue", "\n", "", "gt_union_inside_pD", "=", "gt_union_inside_pD", "|", "gtPolys", "[", "i", "]", "\n", "inside_pG_i", "=", "inside_pG", "&", "gtPolys", "[", "i", "]", "\n", "gt_union_inside_pD_and_pG", "=", "gt_union_inside_pD_and_pG", "|", "inside_pG_i", "\n", "\n", "", "", "", "if", "not", "gt_union_inside_pD", "==", "None", ":", "\n", "                ", "pD_union_with_other_gt", "=", "pD", "&", "gt_union_inside_pD", "\n", "Ot", "=", "pD_union_with_other_gt", ".", "area", "(", ")", "-", "gt_union_inside_pD_and_pG", ".", "area", "(", ")", "\n", "if", "Ot", "<=", "1.0e-10", ":", "\n", "                    ", "Ot", "=", "0", "\n", "", "", "else", ":", "\n", "                ", "Ot", "=", "0", "\n", "", "assert", "(", "Ot", ">=", "0", "and", "Ot", "<=", "pD", ".", "area", "(", ")", "+", "1", ")", ",", "' Invalid Ot value: '", "+", "str", "(", "Ot", ")", "+", "' '", "+", "str", "(", "pD", ".", "area", "(", ")", ")", "\n", "assert", "(", "pD", ".", "area", "(", ")", ">", "0", ")", ",", "' Invalid pD area: '", "+", "str", "(", "pD", ".", "area", "(", ")", ")", "\n", "return", "(", "get_intersection", "(", "pD", ",", "pG", ")", "*", "funcOt", "(", "Ot", "*", "1.0", "/", "pD", ".", "area", "(", ")", ")", ")", "/", "get_union", "(", "pD", ",", "pG", ")", ";", "\n", "", "except", "Exception", "as", "e", ":", "\n", "# print(e)", "\n", "            ", "return", "0", "\n", "\n", "\n", "", "", "def", "get_intersection", "(", "pD", ",", "pG", ")", ":", "\n", "        ", "pInt", "=", "pD", "&", "pG", "\n", "if", "len", "(", "pInt", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "return", "pInt", ".", "area", "(", ")", "\n", "\n", "\n", "", "def", "get_intersection_three", "(", "pD", ",", "pG", ",", "pGi", ")", ":", "\n", "        ", "pInt", "=", "pD", "&", "pG", "\n", "pInt_3", "=", "pInt", "&", "pGi", "\n", "if", "len", "(", "pInt_3", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "return", "pInt_3", ".", "area", "(", ")", "\n", "\n", "", "def", "compute_ap", "(", "confList", ",", "matchList", ",", "numGtCare", ")", ":", "\n", "        ", "correct", "=", "0", "\n", "AP", "=", "0", "\n", "if", "len", "(", "confList", ")", ">", "0", ":", "\n", "            ", "confList", "=", "np", ".", "array", "(", "confList", ")", "\n", "matchList", "=", "np", ".", "array", "(", "matchList", ")", "\n", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "confList", ")", "\n", "confList", "=", "confList", "[", "sorted_ind", "]", "\n", "matchList", "=", "matchList", "[", "sorted_ind", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "confList", ")", ")", ":", "\n", "                ", "match", "=", "matchList", "[", "n", "]", "\n", "if", "match", ":", "\n", "                    ", "correct", "+=", "1", "\n", "AP", "+=", "float", "(", "correct", ")", "/", "(", "n", "+", "1", ")", "\n", "\n", "", "", "if", "numGtCare", ">", "0", ":", "\n", "                ", "AP", "/=", "numGtCare", "\n", "\n", "", "", "return", "AP", "\n", "\n", "", "perSampleMetrics", "=", "{", "}", "\n", "\n", "matchedSum", "=", "0", "\n", "matchedSum_iou", "=", "0", "\n", "matchedSum_tiouGt", "=", "0", "\n", "matchedSum_tiouDt", "=", "0", "\n", "matchedSum_cutGt", "=", "0", "\n", "matchedSum_coverOtherGt", "=", "0", "\n", "\n", "Rectangle", "=", "namedtuple", "(", "'Rectangle'", ",", "'xmin ymin xmax ymax'", ")", "\n", "\n", "gt", "=", "rrc_evaluation_funcs", ".", "load_zip_file", "(", "gtFilePath", ",", "evaluationParams", "[", "'GT_SAMPLE_NAME_2_ID'", "]", ")", "\n", "subm", "=", "rrc_evaluation_funcs", ".", "load_zip_file", "(", "submFilePath", ",", "evaluationParams", "[", "'DET_SAMPLE_NAME_2_ID'", "]", ",", "True", ")", "\n", "\n", "numGlobalCareGt", "=", "0", ";", "\n", "numGlobalCareDet", "=", "0", ";", "\n", "\n", "arrGlobalConfidences", "=", "[", "]", ";", "\n", "arrGlobalMatches", "=", "[", "]", ";", "\n", "\n", "totalNumGtPols", "=", "0", "\n", "totalNumDetPols", "=", "0", "\n", "\n", "# fper_ = open('per_samle_result.txt', 'w')", "\n", "\n", "for", "resFile", "in", "gt", ":", "\n", "        ", "gtFile", "=", "rrc_evaluation_funcs", ".", "decode_utf8", "(", "gt", "[", "resFile", "]", ")", "\n", "recall", "=", "0", "\n", "precision", "=", "0", "\n", "hmean", "=", "0", "\n", "\n", "detMatched", "=", "0", "\n", "detMatched_iou", "=", "0", "\n", "detMatched_tiouGt", "=", "0", "\n", "detMatched_tiouDt", "=", "0", "\n", "detMatched_cutGt", "=", "0", "\n", "detMatched_coverOtherGt", "=", "0", "\n", "\n", "iouMat", "=", "np", ".", "empty", "(", "[", "1", ",", "1", "]", ")", "\n", "\n", "gtPols", "=", "[", "]", "\n", "detPols", "=", "[", "]", "\n", "\n", "gtPolPoints", "=", "[", "]", "\n", "detPolPoints", "=", "[", "]", "\n", "\n", "#Array of Ground Truth Polygons' keys marked as don't Care", "\n", "gtDontCarePolsNum", "=", "[", "]", "\n", "#Array of Detected Polygons' matched with a don't Care GT", "\n", "detDontCarePolsNum", "=", "[", "]", "\n", "\n", "pairs", "=", "[", "]", "\n", "detMatchedNums", "=", "[", "]", "\n", "\n", "arrSampleConfidences", "=", "[", "]", ";", "\n", "arrSampleMatch", "=", "[", "]", ";", "\n", "sampleAP", "=", "0", ";", "\n", "\n", "evaluationLog", "=", "\"\"", "\n", "\n", "pointsList", ",", "_", ",", "transcriptionsList", "=", "rrc_evaluation_funcs", ".", "get_tl_line_values_from_file_contents", "(", "gtFile", ",", "evaluationParams", "[", "'CRLF'", "]", ",", "evaluationParams", "[", "'LTRB'", "]", ",", "True", ",", "False", ")", "\n", "for", "n", "in", "range", "(", "len", "(", "pointsList", ")", ")", ":", "\n", "            ", "points", "=", "pointsList", "[", "n", "]", "\n", "transcription", "=", "transcriptionsList", "[", "n", "]", "\n", "dontCare", "=", "transcription", "==", "\"###\"", "\n", "if", "evaluationParams", "[", "'LTRB'", "]", ":", "\n", "                ", "gtRect", "=", "Rectangle", "(", "*", "points", ")", "\n", "gtPol", "=", "rectangle_to_polygon", "(", "gtRect", ")", "\n", "", "else", ":", "\n", "                ", "gtPol", "=", "polygon_from_points", "(", "points", ")", "\n", "", "gtPols", ".", "append", "(", "gtPol", ")", "\n", "gtPolPoints", ".", "append", "(", "points", ")", "\n", "if", "dontCare", ":", "\n", "                ", "gtDontCarePolsNum", ".", "append", "(", "len", "(", "gtPols", ")", "-", "1", ")", "\n", "\n", "", "", "evaluationLog", "+=", "\"GT polygons: \"", "+", "str", "(", "len", "(", "gtPols", ")", ")", "+", "(", "\" (\"", "+", "str", "(", "len", "(", "gtDontCarePolsNum", ")", ")", "+", "\" don't care)\\n\"", "if", "len", "(", "gtDontCarePolsNum", ")", ">", "0", "else", "\"\\n\"", ")", "\n", "\n", "if", "resFile", "in", "subm", ":", "\n", "\n", "            ", "detFile", "=", "rrc_evaluation_funcs", ".", "decode_utf8", "(", "subm", "[", "resFile", "]", ")", "\n", "\n", "pointsList", ",", "confidencesList", ",", "_", "=", "rrc_evaluation_funcs", ".", "get_tl_line_values_from_file_contents", "(", "detFile", ",", "evaluationParams", "[", "'CRLF'", "]", ",", "evaluationParams", "[", "'LTRB'", "]", ",", "False", ",", "evaluationParams", "[", "'CONFIDENCES'", "]", ")", "\n", "for", "n", "in", "range", "(", "len", "(", "pointsList", ")", ")", ":", "\n", "                ", "points", "=", "pointsList", "[", "n", "]", "\n", "\n", "if", "evaluationParams", "[", "'LTRB'", "]", ":", "\n", "                    ", "detRect", "=", "Rectangle", "(", "*", "points", ")", "\n", "detPol", "=", "rectangle_to_polygon", "(", "detRect", ")", "\n", "", "else", ":", "\n", "                    ", "detPol", "=", "polygon_from_points", "(", "points", ")", "\n", "", "detPols", ".", "append", "(", "detPol", ")", "\n", "detPolPoints", ".", "append", "(", "points", ")", "\n", "if", "len", "(", "gtDontCarePolsNum", ")", ">", "0", ":", "\n", "                    ", "for", "dontCarePol", "in", "gtDontCarePolsNum", ":", "\n", "                        ", "dontCarePol", "=", "gtPols", "[", "dontCarePol", "]", "\n", "intersected_area", "=", "get_intersection", "(", "dontCarePol", ",", "detPol", ")", "\n", "pdDimensions", "=", "detPol", ".", "area", "(", ")", "\n", "precision", "=", "0", "if", "pdDimensions", "==", "0", "else", "intersected_area", "/", "pdDimensions", "\n", "if", "(", "precision", ">", "evaluationParams", "[", "'AREA_PRECISION_CONSTRAINT'", "]", ")", ":", "\n", "                            ", "detDontCarePolsNum", ".", "append", "(", "len", "(", "detPols", ")", "-", "1", ")", "\n", "break", "\n", "\n", "", "", "", "", "evaluationLog", "+=", "\"DET polygons: \"", "+", "str", "(", "len", "(", "detPols", ")", ")", "+", "(", "\" (\"", "+", "str", "(", "len", "(", "detDontCarePolsNum", ")", ")", "+", "\" don't care)\\n\"", "if", "len", "(", "detDontCarePolsNum", ")", ">", "0", "else", "\"\\n\"", ")", "\n", "\n", "if", "len", "(", "gtPols", ")", ">", "0", "and", "len", "(", "detPols", ")", ">", "0", ":", "\n", "#Calculate IoU and precision matrixs", "\n", "                ", "outputShape", "=", "[", "len", "(", "gtPols", ")", ",", "len", "(", "detPols", ")", "]", "\n", "iouMat", "=", "np", ".", "empty", "(", "outputShape", ")", "\n", "gtRectMat", "=", "np", ".", "zeros", "(", "len", "(", "gtPols", ")", ",", "np", ".", "int8", ")", "\n", "detRectMat", "=", "np", ".", "zeros", "(", "len", "(", "detPols", ")", ",", "np", ".", "int8", ")", "\n", "tiouRecallMat", "=", "np", ".", "empty", "(", "outputShape", ")", "\n", "tiouPrecisionMat", "=", "np", ".", "empty", "(", "outputShape", ")", "\n", "tiouGtRectMat", "=", "np", ".", "zeros", "(", "len", "(", "gtPols", ")", ",", "np", ".", "int8", ")", "\n", "tiouDetRectMat", "=", "np", ".", "zeros", "(", "len", "(", "detPols", ")", ",", "np", ".", "int8", ")", "\n", "for", "gtNum", "in", "range", "(", "len", "(", "gtPols", ")", ")", ":", "\n", "                    ", "for", "detNum", "in", "range", "(", "len", "(", "detPols", ")", ")", ":", "\n", "                        ", "pG", "=", "gtPols", "[", "gtNum", "]", "\n", "pD", "=", "detPols", "[", "detNum", "]", "\n", "iouMat", "[", "gtNum", ",", "detNum", "]", "=", "get_intersection_over_union", "(", "pD", ",", "pG", ")", "\n", "tiouRecallMat", "[", "gtNum", ",", "detNum", "]", "=", "get_text_intersection_over_union_recall", "(", "pD", ",", "pG", ")", "\n", "tiouPrecisionMat", "[", "gtNum", ",", "detNum", "]", "=", "get_text_intersection_over_union_precision", "(", "pD", ",", "pG", ",", "gtNum", ",", "gtPols", ",", "gtDontCarePolsNum", ")", "\n", "\n", "", "", "for", "gtNum", "in", "range", "(", "len", "(", "gtPols", ")", ")", ":", "\n", "                    ", "for", "detNum", "in", "range", "(", "len", "(", "detPols", ")", ")", ":", "\n", "                        ", "if", "gtRectMat", "[", "gtNum", "]", "==", "0", "and", "detRectMat", "[", "detNum", "]", "==", "0", "and", "gtNum", "not", "in", "gtDontCarePolsNum", "and", "detNum", "not", "in", "detDontCarePolsNum", ":", "\n", "                            ", "if", "iouMat", "[", "gtNum", ",", "detNum", "]", ">", "evaluationParams", "[", "'IOU_CONSTRAINT'", "]", ":", "\n", "                                ", "gtRectMat", "[", "gtNum", "]", "=", "1", "\n", "detRectMat", "[", "detNum", "]", "=", "1", "\n", "detMatched", "+=", "1", "\n", "detMatched_iou", "+=", "iouMat", "[", "gtNum", ",", "detNum", "]", "\n", "detMatched_tiouGt", "+=", "tiouRecallMat", "[", "gtNum", ",", "detNum", "]", "\n", "detMatched_tiouDt", "+=", "tiouPrecisionMat", "[", "gtNum", ",", "detNum", "]", "\n", "if", "iouMat", "[", "gtNum", ",", "detNum", "]", "!=", "tiouRecallMat", "[", "gtNum", ",", "detNum", "]", ":", "\n", "                                    ", "detMatched_cutGt", "+=", "1", "\n", "", "if", "iouMat", "[", "gtNum", ",", "detNum", "]", "!=", "tiouPrecisionMat", "[", "gtNum", ",", "detNum", "]", ":", "\n", "                                    ", "detMatched_coverOtherGt", "+=", "1", "\n", "", "pairs", ".", "append", "(", "{", "'gt'", ":", "gtNum", ",", "'det'", ":", "detNum", "}", ")", "\n", "detMatchedNums", ".", "append", "(", "detNum", ")", "\n", "evaluationLog", "+=", "\"Match GT #\"", "+", "str", "(", "gtNum", ")", "+", "\" with Det #\"", "+", "str", "(", "detNum", ")", "+", "\"\\n\"", "\n", "\n", "", "", "", "", "", "if", "evaluationParams", "[", "'CONFIDENCES'", "]", ":", "\n", "                ", "for", "detNum", "in", "range", "(", "len", "(", "detPols", ")", ")", ":", "\n", "                    ", "if", "detNum", "not", "in", "detDontCarePolsNum", ":", "\n", "#we exclude the don't care detections", "\n", "                        ", "match", "=", "detNum", "in", "detMatchedNums", "\n", "\n", "arrSampleConfidences", ".", "append", "(", "confidencesList", "[", "detNum", "]", ")", "\n", "arrSampleMatch", ".", "append", "(", "match", ")", "\n", "\n", "arrGlobalConfidences", ".", "append", "(", "confidencesList", "[", "detNum", "]", ")", ";", "\n", "arrGlobalMatches", ".", "append", "(", "match", ")", ";", "\n", "\n", "", "", "", "", "numGtCare", "=", "(", "len", "(", "gtPols", ")", "-", "len", "(", "gtDontCarePolsNum", ")", ")", "\n", "numDetCare", "=", "(", "len", "(", "detPols", ")", "-", "len", "(", "detDontCarePolsNum", ")", ")", "\n", "if", "numGtCare", "==", "0", ":", "\n", "            ", "recall", "=", "float", "(", "1", ")", "\n", "precision", "=", "float", "(", "0", ")", "if", "numDetCare", ">", "0", "else", "float", "(", "1", ")", "\n", "sampleAP", "=", "precision", "\n", "tiouRecall", "=", "float", "(", "1", ")", "\n", "tiouPrecision", "=", "float", "(", "0", ")", "if", "numDetCare", ">", "0", "else", "float", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "recall", "=", "float", "(", "detMatched", ")", "/", "numGtCare", "\n", "precision", "=", "0", "if", "numDetCare", "==", "0", "else", "float", "(", "detMatched", ")", "/", "numDetCare", "\n", "iouRecall", "=", "float", "(", "detMatched_iou", ")", "/", "numGtCare", "\n", "iouPrecision", "=", "0", "if", "numDetCare", "==", "0", "else", "float", "(", "detMatched_iou", ")", "/", "numDetCare", "\n", "tiouRecall", "=", "float", "(", "detMatched_tiouGt", ")", "/", "numGtCare", "\n", "tiouPrecision", "=", "0", "if", "numDetCare", "==", "0", "else", "float", "(", "detMatched_tiouDt", ")", "/", "numDetCare", "\n", "\n", "if", "evaluationParams", "[", "'CONFIDENCES'", "]", "and", "evaluationParams", "[", "'PER_SAMPLE_RESULTS'", "]", ":", "\n", "                ", "sampleAP", "=", "compute_ap", "(", "arrSampleConfidences", ",", "arrSampleMatch", ",", "numGtCare", ")", "\n", "\n", "", "", "hmean", "=", "0", "if", "(", "precision", "+", "recall", ")", "==", "0", "else", "2.0", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "tiouHmean", "=", "0", "if", "(", "tiouPrecision", "+", "tiouRecall", ")", "==", "0", "else", "2.0", "*", "tiouPrecision", "*", "tiouRecall", "/", "(", "tiouPrecision", "+", "tiouRecall", ")", "\n", "iouHmean", "=", "0", "if", "(", "iouPrecision", "+", "iouRecall", ")", "==", "0", "else", "2.0", "*", "iouPrecision", "*", "iouRecall", "/", "(", "iouPrecision", "+", "iouRecall", ")", "\n", "\n", "matchedSum", "+=", "detMatched", "\n", "matchedSum_iou", "+=", "detMatched_iou", "\n", "matchedSum_tiouGt", "+=", "detMatched_tiouGt", "\n", "matchedSum_tiouDt", "+=", "detMatched_tiouDt", "\n", "matchedSum_cutGt", "+=", "detMatched_cutGt", "\n", "matchedSum_coverOtherGt", "+=", "detMatched_coverOtherGt", "\n", "numGlobalCareGt", "+=", "numGtCare", "\n", "numGlobalCareDet", "+=", "numDetCare", "\n", "\n", "if", "evaluationParams", "[", "'PER_SAMPLE_RESULTS'", "]", ":", "\n", "            ", "perSampleMetrics", "[", "resFile", "]", "=", "{", "\n", "'precision'", ":", "precision", ",", "\n", "'recall'", ":", "recall", ",", "\n", "'hmean'", ":", "hmean", ",", "\n", "'iouPrecision'", ":", "iouPrecision", ",", "\n", "'iouRecall'", ":", "iouRecall", ",", "\n", "'iouHmean'", ":", "iouHmean", ",", "\n", "'tiouPrecision'", ":", "tiouPrecision", ",", "\n", "'tiouRecall'", ":", "tiouRecall", ",", "\n", "'tiouHmean'", ":", "tiouHmean", ",", "\n", "'pairs'", ":", "pairs", ",", "\n", "'AP'", ":", "sampleAP", ",", "\n", "'iouMat'", ":", "[", "]", "if", "len", "(", "detPols", ")", ">", "100", "else", "iouMat", ".", "tolist", "(", ")", ",", "\n", "'gtPolPoints'", ":", "gtPolPoints", ",", "\n", "'detPolPoints'", ":", "detPolPoints", ",", "\n", "'gtDontCare'", ":", "gtDontCarePolsNum", ",", "\n", "'detDontCare'", ":", "detDontCarePolsNum", ",", "\n", "'evaluationParams'", ":", "evaluationParams", ",", "\n", "'evaluationLog'", ":", "evaluationLog", "\n", "}", "\n", "# fper_.writelines(resFile+'\\t\"IoU: (P: {:.3f}. R: {:.3f}. F: {:.3f})\",\\t\"TIoU: (P: {:.3f}. R: {:.3f}. F: {:.3f})\".\\n'.format(precision, recall, hmean, tiouPrecision, tiouRecall, tiouHmean))", "\n", "", "try", ":", "\n", "            ", "totalNumGtPols", "+=", "len", "(", "gtPols", ")", "\n", "totalNumDetPols", "+=", "len", "(", "detPols", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "raise", "e", "\n", "# fper_.close()", "\n", "\n", "# Compute MAP and MAR", "\n", "", "", "AP", "=", "0", "\n", "if", "evaluationParams", "[", "'CONFIDENCES'", "]", ":", "\n", "        ", "AP", "=", "compute_ap", "(", "arrGlobalConfidences", ",", "arrGlobalMatches", ",", "numGlobalCareGt", ")", "\n", "\n", "", "print", "(", "'num_gt, num_det: '", ",", "numGlobalCareGt", ",", "totalNumDetPols", ")", "\n", "methodRecall", "=", "0", "if", "numGlobalCareGt", "==", "0", "else", "float", "(", "matchedSum", ")", "/", "numGlobalCareGt", "\n", "methodPrecision", "=", "0", "if", "numGlobalCareDet", "==", "0", "else", "float", "(", "matchedSum", ")", "/", "numGlobalCareDet", "\n", "methodHmean", "=", "0", "if", "methodRecall", "+", "methodPrecision", "==", "0", "else", "2", "*", "methodRecall", "*", "methodPrecision", "/", "(", "methodRecall", "+", "methodPrecision", ")", "\n", "\n", "\n", "methodRecall_iou", "=", "0", "if", "numGlobalCareGt", "==", "0", "else", "float", "(", "matchedSum_iou", ")", "/", "numGlobalCareGt", "\n", "methodPrecision_iou", "=", "0", "if", "numGlobalCareDet", "==", "0", "else", "float", "(", "matchedSum_iou", ")", "/", "numGlobalCareDet", "\n", "iouMethodHmean", "=", "0", "if", "methodRecall_iou", "+", "methodPrecision_iou", "==", "0", "else", "2", "*", "methodRecall_iou", "*", "methodPrecision_iou", "/", "(", "methodRecall_iou", "+", "methodPrecision_iou", ")", "\n", "\n", "methodRecall_tiouGt", "=", "0", "if", "numGlobalCareGt", "==", "0", "else", "float", "(", "matchedSum_tiouGt", ")", "/", "numGlobalCareGt", "\n", "methodPrecision_tiouDt", "=", "0", "if", "numGlobalCareDet", "==", "0", "else", "float", "(", "matchedSum_tiouDt", ")", "/", "numGlobalCareDet", "\n", "tiouMethodHmean", "=", "0", "if", "methodRecall_tiouGt", "+", "methodPrecision_tiouDt", "==", "0", "else", "2", "*", "methodRecall_tiouGt", "*", "methodPrecision_tiouDt", "/", "(", "methodRecall_tiouGt", "+", "methodPrecision_tiouDt", ")", "\n", "\n", "methodMetrics", "=", "{", "'precision'", ":", "methodPrecision", ",", "'recall'", ":", "methodRecall", ",", "'hmean'", ":", "methodHmean", "}", "\n", "iouMethodMetrics", "=", "{", "'iouPrecision'", ":", "methodPrecision_iou", ",", "'iouRecall'", ":", "methodRecall_iou", ",", "'iouHmean'", ":", "iouMethodHmean", "}", "\n", "tiouMethodMetrics", "=", "{", "'tiouPrecision'", ":", "methodPrecision_tiouDt", ",", "'tiouRecall'", ":", "methodRecall_tiouGt", ",", "'tiouHmean'", ":", "tiouMethodHmean", "}", "\n", "print", "(", "\"recall: \"", ",", "round", "(", "methodRecall", ",", "3", ")", ",", "\"precision: \"", ",", "round", "(", "methodPrecision", ",", "3", ")", ",", "\"hmean: \"", ",", "round", "(", "methodHmean", ",", "3", ")", ")", "\n", "print", "(", "\"tiouRecall:\"", ",", "round", "(", "methodRecall_tiouGt", ",", "3", ")", ",", "\"tiouPrecision:\"", ",", "round", "(", "methodPrecision_tiouDt", ",", "3", ")", ",", "\"tiouHmean:\"", ",", "round", "(", "tiouMethodHmean", ",", "3", ")", ")", "\n", "\n", "resDict", "=", "{", "'calculated'", ":", "True", ",", "'Message'", ":", "''", ",", "'method'", ":", "methodMetrics", ",", "'per_sample'", ":", "perSampleMetrics", ",", "'iouMethod'", ":", "iouMethodMetrics", ",", "'tiouMethod'", ":", "tiouMethodMetrics", "}", "\n", "\n", "\n", "return", "resDict", ";", "\n", "\n"]]}