{"home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou.fast_hist": [[8, 11], ["numpy.bincount().reshape", "numpy.bincount", "a[].astype"], "function", ["None"], ["def", "fast_hist", "(", "a", ",", "b", ",", "n", ")", ":", "\n", "    ", "k", "=", "(", "a", ">=", "0", ")", "&", "(", "a", "<", "n", ")", "\n", "return", "np", ".", "bincount", "(", "n", "*", "a", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "b", "[", "k", "]", ",", "minlength", "=", "n", "**", "2", ")", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou.per_class_iu": [[13, 15], ["numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "per_class_iu", "(", "hist", ")", ":", "\n", "    ", "return", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou.label_mapping": [[17, 22], ["numpy.copy", "range", "numpy.array", "len"], "function", ["None"], ["", "def", "label_mapping", "(", "input", ",", "mapping", ")", ":", "\n", "    ", "output", "=", "np", ".", "copy", "(", "input", ")", "\n", "for", "ind", "in", "range", "(", "len", "(", "mapping", ")", ")", ":", "\n", "        ", "output", "[", "input", "==", "mapping", "[", "ind", "]", "[", "0", "]", "]", "=", "mapping", "[", "ind", "]", "[", "1", "]", "\n", "", "return", "np", ".", "array", "(", "output", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou.compute_mIoU": [[24, 59], ["numpy.int", "print", "numpy.array", "numpy.array", "numpy.zeros", "os.path.join", "os.path.join", "open().read().splitlines", "open().read().splitlines", "range", "CLAN_iou.per_class_iu", "range", "print", "open", "json.load", "os.path.join", "os.path.join", "len", "numpy.array", "numpy.array", "CLAN_iou.label_mapping", "CLAN_iou.fast_hist", "print", "os.path.join", "open().read", "open().read", "PIL.Image.open", "PIL.Image.open", "len", "len", "print", "label_mapping.flatten", "np.array.flatten", "print", "str", "x.split", "label_mapping.flatten", "np.array.flatten", "str", "round", "open", "open", "len", "len", "len", "round", "label_mapping.flatten", "np.array.flatten", "numpy.mean", "numpy.nanmean", "CLAN_iou.per_class_iu"], "function", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou_bulk.per_class_iu", "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou_bulk.label_mapping", "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou_bulk.fast_hist", "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou_bulk.per_class_iu"], ["", "def", "compute_mIoU", "(", "gt_dir", ",", "pred_dir", ",", "devkit_dir", "=", "''", ")", ":", "\n", "    ", "\"\"\"\n    Compute IoU given the predicted colorized images and \n    \"\"\"", "\n", "with", "open", "(", "join", "(", "devkit_dir", ",", "'info.json'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "      ", "info", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "num_classes", "=", "np", ".", "int", "(", "info", "[", "'classes'", "]", ")", "\n", "print", "(", "'Num classes'", ",", "num_classes", ")", "\n", "name_classes", "=", "np", ".", "array", "(", "info", "[", "'label'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "mapping", "=", "np", ".", "array", "(", "info", "[", "'label2train'", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "\n", "image_path_list", "=", "join", "(", "devkit_dir", ",", "'val.txt'", ")", "\n", "label_path_list", "=", "join", "(", "devkit_dir", ",", "'label.txt'", ")", "\n", "gt_imgs", "=", "open", "(", "label_path_list", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "gt_imgs", "=", "[", "join", "(", "gt_dir", ",", "x", ")", "for", "x", "in", "gt_imgs", "]", "\n", "pred_imgs", "=", "open", "(", "image_path_list", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "pred_imgs", "=", "[", "join", "(", "pred_dir", ",", "x", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "for", "x", "in", "pred_imgs", "]", "\n", "\n", "for", "ind", "in", "range", "(", "len", "(", "gt_imgs", ")", ")", ":", "\n", "        ", "pred", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "pred_imgs", "[", "ind", "]", ")", ")", "\n", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_imgs", "[", "ind", "]", ")", ")", "\n", "label", "=", "label_mapping", "(", "label", ",", "mapping", ")", "\n", "if", "len", "(", "label", ".", "flatten", "(", ")", ")", "!=", "len", "(", "pred", ".", "flatten", "(", ")", ")", ":", "\n", "            ", "print", "(", "'Skipping: len(gt) = {:d}, len(pred) = {:d}, {:s}, {:s}'", ".", "format", "(", "len", "(", "label", ".", "flatten", "(", ")", ")", ",", "len", "(", "pred", ".", "flatten", "(", ")", ")", ",", "gt_imgs", "[", "ind", "]", ",", "pred_imgs", "[", "ind", "]", ")", ")", "\n", "continue", "\n", "", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "pred", ".", "flatten", "(", ")", ",", "num_classes", ")", "\n", "if", "ind", ">", "0", "and", "ind", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'{:d} / {:d}: {:0.2f}'", ".", "format", "(", "ind", ",", "len", "(", "gt_imgs", ")", ",", "100", "*", "np", ".", "mean", "(", "per_class_iu", "(", "hist", ")", ")", ")", ")", "\n", "\n", "", "", "mIoUs", "=", "per_class_iu", "(", "hist", ")", "\n", "for", "ind_class", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "print", "(", "'===>'", "+", "name_classes", "[", "ind_class", "]", "+", "':\\t'", "+", "str", "(", "round", "(", "mIoUs", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", ")", "\n", "", "print", "(", "'===> mIoU: '", "+", "str", "(", "round", "(", "np", ".", "nanmean", "(", "mIoUs", ")", "*", "100", ",", "2", ")", ")", ")", "\n", "return", "mIoUs", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou.main": [[61, 63], ["CLAN_iou.compute_mIoU"], "function", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou_bulk.compute_mIoU"], ["", "def", "main", "(", "args", ")", ":", "\n", "   ", "compute_mIoU", "(", "args", ".", "gt_dir", ",", "args", ".", "pred_dir", ",", "args", ".", "devkit_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou_bulk.fast_hist": [[9, 12], ["numpy.bincount().reshape", "numpy.bincount", "a[].astype"], "function", ["None"], ["def", "fast_hist", "(", "a", ",", "b", ",", "n", ")", ":", "\n", "    ", "k", "=", "(", "a", ">=", "0", ")", "&", "(", "a", "<", "n", ")", "\n", "return", "np", ".", "bincount", "(", "n", "*", "a", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "b", "[", "k", "]", ",", "minlength", "=", "n", "**", "2", ")", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou_bulk.per_class_iu": [[14, 16], ["numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "per_class_iu", "(", "hist", ")", ":", "\n", "    ", "return", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou_bulk.label_mapping": [[18, 23], ["numpy.copy", "range", "numpy.array", "len"], "function", ["None"], ["", "def", "label_mapping", "(", "input", ",", "mapping", ")", ":", "\n", "    ", "output", "=", "np", ".", "copy", "(", "input", ")", "\n", "for", "ind", "in", "range", "(", "len", "(", "mapping", ")", ")", ":", "\n", "        ", "output", "[", "input", "==", "mapping", "[", "ind", "]", "[", "0", "]", "]", "=", "mapping", "[", "ind", "]", "[", "1", "]", "\n", "", "return", "np", ".", "array", "(", "output", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou_bulk.compute_mIoU": [[25, 60], ["numpy.int", "print", "numpy.array", "numpy.array", "numpy.zeros", "os.path.join", "os.path.join", "open().read().splitlines", "open().read().splitlines", "range", "CLAN_iou_bulk.per_class_iu", "range", "print", "str", "open", "json.load", "os.path.join", "os.path.join", "len", "numpy.array", "numpy.array", "CLAN_iou_bulk.label_mapping", "CLAN_iou_bulk.fast_hist", "print", "round", "os.path.join", "open().read", "open().read", "PIL.Image.open", "PIL.Image.open", "len", "len", "print", "label_mapping.flatten", "np.array.flatten", "print", "str", "x.split", "label_mapping.flatten", "np.array.flatten", "str", "round", "numpy.nanmean", "open", "open", "len", "len", "len", "round", "label_mapping.flatten", "np.array.flatten", "numpy.mean", "numpy.nanmean", "CLAN_iou_bulk.per_class_iu"], "function", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou_bulk.per_class_iu", "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou_bulk.label_mapping", "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou_bulk.fast_hist", "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou_bulk.per_class_iu"], ["", "def", "compute_mIoU", "(", "gt_dir", ",", "pred_dir", ",", "devkit_dir", "=", "''", ")", ":", "\n", "    ", "\"\"\"\n    Compute IoU given the predicted colorized images and \n    \"\"\"", "\n", "with", "open", "(", "join", "(", "devkit_dir", ",", "'info.json'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "      ", "info", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "num_classes", "=", "np", ".", "int", "(", "info", "[", "'classes'", "]", ")", "\n", "print", "(", "'Num classes'", ",", "num_classes", ")", "\n", "name_classes", "=", "np", ".", "array", "(", "info", "[", "'label'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "mapping", "=", "np", ".", "array", "(", "info", "[", "'label2train'", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "\n", "image_path_list", "=", "join", "(", "devkit_dir", ",", "'val.txt'", ")", "\n", "label_path_list", "=", "join", "(", "devkit_dir", ",", "'label.txt'", ")", "\n", "gt_imgs", "=", "open", "(", "label_path_list", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "gt_imgs", "=", "[", "join", "(", "gt_dir", ",", "x", ")", "for", "x", "in", "gt_imgs", "]", "\n", "pred_imgs", "=", "open", "(", "image_path_list", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "pred_imgs", "=", "[", "join", "(", "pred_dir", ",", "x", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "for", "x", "in", "pred_imgs", "]", "\n", "\n", "for", "ind", "in", "range", "(", "len", "(", "gt_imgs", ")", ")", ":", "\n", "        ", "pred", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "pred_imgs", "[", "ind", "]", ")", ")", "\n", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_imgs", "[", "ind", "]", ")", ")", "\n", "label", "=", "label_mapping", "(", "label", ",", "mapping", ")", "\n", "if", "len", "(", "label", ".", "flatten", "(", ")", ")", "!=", "len", "(", "pred", ".", "flatten", "(", ")", ")", ":", "\n", "            ", "print", "(", "'Skipping: len(gt) = {:d}, len(pred) = {:d}, {:s}, {:s}'", ".", "format", "(", "len", "(", "label", ".", "flatten", "(", ")", ")", ",", "len", "(", "pred", ".", "flatten", "(", ")", ")", ",", "gt_imgs", "[", "ind", "]", ",", "pred_imgs", "[", "ind", "]", ")", ")", "\n", "continue", "\n", "", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "pred", ".", "flatten", "(", ")", ",", "num_classes", ")", "\n", "if", "ind", ">", "0", "and", "ind", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'{:d} / {:d}: {:0.2f}'", ".", "format", "(", "ind", ",", "len", "(", "gt_imgs", ")", ",", "100", "*", "np", ".", "mean", "(", "per_class_iu", "(", "hist", ")", ")", ")", ")", "\n", "\n", "", "", "mIoUs", "=", "per_class_iu", "(", "hist", ")", "\n", "for", "ind_class", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "print", "(", "'===>'", "+", "name_classes", "[", "ind_class", "]", "+", "':\\t'", "+", "str", "(", "round", "(", "mIoUs", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", ")", "\n", "", "print", "(", "'===> mIoU: '", "+", "str", "(", "round", "(", "np", ".", "nanmean", "(", "mIoUs", ")", "*", "100", ",", "2", ")", ")", ")", "\n", "return", "str", "(", "round", "(", "np", ".", "nanmean", "(", "mIoUs", ")", "*", "100", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou_bulk.main": [[62, 64], ["CLAN_iou_bulk.compute_mIoU"], "function", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_iou_bulk.compute_mIoU"], ["", "def", "main", "(", "gt_dir", ",", "pred_dir", ",", "devkit_dir", ")", ":", "\n", "   ", "return", "compute_mIoU", "(", "gt_dir", ",", "pred_dir", ",", "devkit_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_evaluate_bulk.colorize_mask": [[31, 37], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ")", ":", "\n", "# mask: numpy array of the mask", "\n", "    ", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_evaluate_bulk.create_map": [[39, 56], ["torch.cat.view", "torch.arange", "torch.arange", "T_base.view.view", "range", "torch.div", "torch.div", "torch.arange", "torch.arange", "T_base.view.view", "range", "torch.div", "torch.div", "torch.cat.size", "torch.cat.size", "float", "torch.cat", "torch.cat", "float", "float", "torch.cat", "torch.cat", "float"], "function", ["None"], ["", "def", "create_map", "(", "input_size", ",", "mode", ")", ":", "\n", "    ", "if", "mode", "==", "'h'", ":", "\n", "        ", "T_base", "=", "torch", ".", "arange", "(", "0", ",", "float", "(", "input_size", "[", "1", "]", ")", ")", "\n", "T_base", "=", "T_base", ".", "view", "(", "input_size", "[", "1", "]", ",", "1", ")", "\n", "T", "=", "T_base", "\n", "for", "i", "in", "range", "(", "input_size", "[", "0", "]", "-", "1", ")", ":", "\n", "            ", "T", "=", "torch", ".", "cat", "(", "(", "T", ",", "T_base", ")", ",", "1", ")", "\n", "", "T", "=", "torch", ".", "div", "(", "T", ",", "float", "(", "input_size", "[", "1", "]", ")", ")", "\n", "", "if", "mode", "==", "'w'", ":", "\n", "        ", "T_base", "=", "torch", ".", "arange", "(", "0", ",", "float", "(", "input_size", "[", "0", "]", ")", ")", "\n", "T_base", "=", "T_base", ".", "view", "(", "1", ",", "input_size", "[", "0", "]", ")", "\n", "T", "=", "T_base", "\n", "for", "i", "in", "range", "(", "input_size", "[", "1", "]", "-", "1", ")", ":", "\n", "            ", "T", "=", "torch", ".", "cat", "(", "(", "T", ",", "T_base", ")", ",", "0", ")", "\n", "", "T", "=", "torch", ".", "div", "(", "T", ",", "float", "(", "input_size", "[", "0", "]", ")", ")", "\n", "", "T", "=", "T", ".", "view", "(", "1", ",", "1", ",", "T", ".", "size", "(", "0", ")", ",", "T", ".", "size", "(", "1", ")", ")", "\n", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_evaluate_bulk.get_arguments": [[58, 82], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the Cityscapes dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "type", "=", "str", ",", "default", "=", "SET", ",", "\n", "help", "=", "\"choose evaluation set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save\"", ",", "type", "=", "str", ",", "default", "=", "SAVE_PATH", ",", "\n", "help", "=", "\"Path to save result.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_evaluate_bulk.main": [[84, 131], ["range", "CLAN_evaluate_bulk.get_arguments", "model.CLAN_G.Res_Deeplab", "torch.load", "torch.load", "model.CLAN_G.Res_Deeplab.load_state_dict", "model.CLAN_G.Res_Deeplab.eval", "model.CLAN_G.Res_Deeplab.cuda", "torch.utils.data.DataLoader", "torch.Upsample", "print", "os.path.exists", "os.makedirs", "dataset.cityscapes_dataset.cityscapesDataSet", "torch.no_grad", "torch.no_grad", "enumerate", "model.CLAN_G.Res_Deeplab.", "nn.Upsample.cpu().data[].numpy", "Image.fromarray.transpose", "numpy.asarray", "CLAN_evaluate_bulk.colorize_mask", "PIL.Image.fromarray", "Image.fromarray.save", "colorize_mask.save", "print", "torch.autograd.Variable().cuda", "numpy.argmax", "name[].split", "torch.autograd.Variable", "nn.Upsample.cpu", "name.split", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_evaluate.get_arguments", "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.Res_Deeplab", "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_evaluate.colorize_mask"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the evaluation process.\"\"\"", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "50", ")", ":", "\n", "        ", "model_path", "=", "'./snapshots/GTA2Cityscapes/GTA5_{0:d}.pth'", ".", "format", "(", "i", "*", "2000", ")", "\n", "save_path", "=", "'./result/GTA2Cityscapes_{0:d}'", ".", "format", "(", "i", "*", "2000", ")", "\n", "args", "=", "get_arguments", "(", ")", "\n", "\n", "gpu0", "=", "args", ".", "gpu", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "model", "=", "Res_Deeplab", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "\n", "saved_state_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", "gpu0", ")", "\n", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "crop_size", "=", "(", "1024", ",", "512", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "args", ".", "set", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "index", ",", "batch", "in", "enumerate", "(", "testloader", ")", ":", "\n", "                ", "if", "index", "%", "100", "==", "0", ":", "\n", "                    ", "print", "(", "'%d processd'", "%", "index", ")", "\n", "", "image", ",", "_", ",", "_", ",", "name", "=", "batch", "\n", "output1", ",", "output2", "=", "model", "(", "Variable", "(", "image", ")", ".", "cuda", "(", "gpu0", ")", ")", "\n", "\n", "output", "=", "interp", "(", "output1", "+", "output2", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "output_col", "=", "colorize_mask", "(", "output", ")", "\n", "output", "=", "Image", ".", "fromarray", "(", "output", ")", "\n", "\n", "name", "=", "name", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "output", ".", "save", "(", "'%s/%s'", "%", "(", "save_path", ",", "name", ")", ")", "\n", "\n", "output_col", ".", "save", "(", "'%s/%s_color.png'", "%", "(", "save_path", ",", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "\n", "", "", "print", "(", "save_path", ")", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_train.get_arguments": [[78, 150], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "MODEL", ",", "\n", "help", "=", "\"available options : ResNet\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--source\"", ",", "type", "=", "str", ",", "default", "=", "SOURCE", ",", "\n", "help", "=", "\"available options : GTA5, SYNTHIA\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--target\"", ",", "type", "=", "str", ",", "default", "=", "TARGET", ",", "\n", "help", "=", "\"available options : cityscapes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "BATCH_SIZE", ",", "\n", "help", "=", "\"Number of images sent to the network in one step.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--iter-size\"", ",", "type", "=", "int", ",", "default", "=", "ITER_SIZE", ",", "\n", "help", "=", "\"Accumulate gradients for ITER_SIZE iterations.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-workers\"", ",", "type", "=", "int", ",", "default", "=", "NUM_WORKERS", ",", "\n", "help", "=", "\"number of workers for multithread dataloading.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size-source\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE_SOURCE", ",", "\n", "help", "=", "\"Comma-separated string with height and width of source images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir-target\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY_TARGET", ",", "\n", "help", "=", "\"Path to the directory containing the target dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list-target\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH_TARGET", ",", "\n", "help", "=", "\"Path to the file listing the images in the target dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size-target\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE_TARGET", ",", "\n", "help", "=", "\"Comma-separated string with height and width of target images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--is-training\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to updates the running means and variances during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE", ",", "\n", "help", "=", "\"Base learning rate for training with polynomial decay.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate-D\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE_D", ",", "\n", "help", "=", "\"Base learning rate for discriminator.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--momentum\"", ",", "type", "=", "float", ",", "default", "=", "MOMENTUM", ",", "\n", "help", "=", "\"Momentum component of the optimiser.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--not-restore-last\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to not restore last (FC) layers.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS", ",", "\n", "help", "=", "\"Number of training steps.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps-stop\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS_STOP", ",", "\n", "help", "=", "\"Number of training steps for early stopping.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--power\"", ",", "type", "=", "float", ",", "default", "=", "POWER", ",", "\n", "help", "=", "\"Decay parameter to compute the learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-mirror\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly mirror the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-scale\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly scale the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-seed\"", ",", "type", "=", "int", ",", "default", "=", "RANDOM_SEED", ",", "\n", "help", "=", "\"Random seed to have reproducible results.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-num-images\"", ",", "type", "=", "int", ",", "default", "=", "SAVE_NUM_IMAGES", ",", "\n", "help", "=", "\"How many images to save.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-pred-every\"", ",", "type", "=", "int", ",", "default", "=", "SAVE_PRED_EVERY", ",", "\n", "help", "=", "\"Save summaries and checkpoint every often.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--snapshot-dir\"", ",", "type", "=", "str", ",", "default", "=", "SNAPSHOT_DIR", ",", "\n", "help", "=", "\"Where to save snapshots of the model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight-decay\"", ",", "type", "=", "float", ",", "default", "=", "WEIGHT_DECAY", ",", "\n", "help", "=", "\"Regularisation parameter for L2-loss.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "type", "=", "str", ",", "default", "=", "SET", ",", "\n", "help", "=", "\"choose adaptation set.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_train.loss_calc": [[155, 164], ["torch.autograd.Variable().cuda", "utils.loss.CrossEntropy2d().cuda", "CrossEntropy2d().cuda.", "torch.autograd.Variable", "utils.loss.CrossEntropy2d", "Variable().cuda.long"], "function", ["None"], ["def", "loss_calc", "(", "pred", ",", "label", ",", "gpu", ")", ":", "\n", "    ", "\"\"\"\n    This function returns cross entropy loss for semantic segmentation\n    \"\"\"", "\n", "# out shape batch_size x channels x h x w -> batch_size x channels x h x w", "\n", "# label shape h x w x 1 x batch_size  -> batch_size x 1 x h x w", "\n", "label", "=", "Variable", "(", "label", ".", "long", "(", ")", ")", ".", "cuda", "(", "gpu", ")", "\n", "criterion", "=", "CrossEntropy2d", "(", "NUM_CLASSES", ")", ".", "cuda", "(", "gpu", ")", "\n", "return", "criterion", "(", "pred", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_train.lr_poly": [[166, 168], ["float"], "function", ["None"], ["", "def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "max_iter", ")", "**", "(", "power", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_train.lr_warmup": [[170, 172], ["float"], "function", ["None"], ["", "def", "lr_warmup", "(", "base_lr", ",", "iter", ",", "warmup_iter", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "float", "(", "iter", ")", "/", "warmup_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_train.adjust_learning_rate": [[174, 182], ["CLAN_train.lr_warmup", "CLAN_train.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_train.lr_warmup", "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_train.lr_poly"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", ":", "\n", "    ", "if", "i_iter", "<", "PREHEAT_STEPS", ":", "\n", "        ", "lr", "=", "lr_warmup", "(", "args", ".", "learning_rate", ",", "i_iter", ",", "PREHEAT_STEPS", ")", "\n", "", "else", ":", "\n", "        ", "lr", "=", "lr_poly", "(", "args", ".", "learning_rate", ",", "i_iter", ",", "args", ".", "num_steps", ",", "args", ".", "power", ")", "\n", "", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_train.adjust_learning_rate_D": [[184, 192], ["CLAN_train.lr_warmup", "CLAN_train.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_train.lr_warmup", "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_train.lr_poly"], ["", "", "def", "adjust_learning_rate_D", "(", "optimizer", ",", "i_iter", ")", ":", "\n", "    ", "if", "i_iter", "<", "PREHEAT_STEPS", ":", "\n", "        ", "lr", "=", "lr_warmup", "(", "args", ".", "learning_rate_D", ",", "i_iter", ",", "PREHEAT_STEPS", ")", "\n", "", "else", ":", "\n", "        ", "lr", "=", "lr_poly", "(", "args", ".", "learning_rate_D", ",", "i_iter", ",", "args", ".", "num_steps", ",", "args", ".", "power", ")", "\n", "", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_train.weightmap": [[194, 198], ["torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "pred1.size", "pred1.size", "pred1.size", "pred1.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "function", ["None"], ["", "", "def", "weightmap", "(", "pred1", ",", "pred2", ")", ":", "\n", "    ", "output", "=", "1.0", "-", "torch", ".", "sum", "(", "(", "pred1", "*", "pred2", ")", ",", "1", ")", ".", "view", "(", "1", ",", "1", ",", "pred1", ".", "size", "(", "2", ")", ",", "pred1", ".", "size", "(", "3", ")", ")", "/", "(", "torch", ".", "norm", "(", "pred1", ",", "2", ",", "1", ")", "*", "torch", ".", "norm", "(", "pred2", ",", "2", ",", "1", ")", ")", ".", "view", "(", "1", ",", "1", ",", "pred1", ".", "size", "(", "2", ")", ",", "pred1", ".", "size", "(", "3", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_train.main": [[200, 422], ["map", "map", "model.CLAN_G.Res_Deeplab", "model.CLAN_G.Res_Deeplab.state_dict().copy", "model.CLAN_G.Res_Deeplab.train", "model.CLAN_G.Res_Deeplab.cuda", "model.CLAN_D.FCDiscriminator", "model.CLAN_D.FCDiscriminator.train", "model.CLAN_D.FCDiscriminator.cuda", "enumerate", "torch.utils.data.DataLoader", "enumerate", "torch.SGD", "optim.SGD.zero_grad", "torch.Adam", "optim.Adam.zero_grad", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "utils.loss.WeightedBCEWithLogitsLoss", "torch.Upsample", "torch.Upsample", "range", "args.input_size_source.split", "args.input_size_target.split", "torch.utils.model_zoo.load_url", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "i.split", "model.CLAN_G.Res_Deeplab.load_state_dict", "model.CLAN_G.Res_Deeplab.load_state_dict", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset.cityscapes_dataset.cityscapesDataSet", "model.CLAN_G.Res_Deeplab.optim_parameters", "model.CLAN_D.FCDiscriminator.parameters", "optim.SGD.zero_grad", "CLAN_train.adjust_learning_rate", "optim.Adam.zero_grad", "CLAN_train.adjust_learning_rate_D", "model.CLAN_D.FCDiscriminator.parameters", "next", "torch.autograd.Variable().cuda", "model.CLAN_G.Res_Deeplab.", "nn.Upsample.", "nn.Upsample.", "loss_seg.backward", "next", "torch.autograd.Variable().cuda", "model.CLAN_G.Res_Deeplab.", "nn.Upsample.", "nn.Upsample.", "CLAN_train.weightmap", "nn.Upsample.", "bce_loss.backward", "loss_weight.backward", "model.CLAN_D.FCDiscriminator.parameters", "pred_source1.detach.detach", "pred_source2.detach.detach", "nn.Upsample.", "torch.nn.BCEWithLogitsLoss.", "bce_loss.backward", "pred_target1.detach.detach", "pred_target2.detach.detach", "weight_map.detach.detach", "nn.Upsample.", "bce_loss.backward", "optim.SGD.step", "optim.Adam.step", "print", "print", "open", "open.write", "open.close", "model.CLAN_G.Res_Deeplab.state_dict", "dataset.gta5_dataset.GTA5DataSet", "dataset.synthia_dataset.SYNTHIADataSet", "CLAN_train.loss_calc", "CLAN_train.loss_calc", "torch.softmax", "torch.softmax", "model.CLAN_D.FCDiscriminator.", "utils.loss.WeightedBCEWithLogitsLoss.", "torch.nn.BCEWithLogitsLoss.", "zip", "model.CLAN_D.FCDiscriminator.", "torch.autograd.Variable().cuda", "model.CLAN_D.FCDiscriminator.", "utils.loss.WeightedBCEWithLogitsLoss.", "torch.nn.BCEWithLogitsLoss.", "os.join", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.autograd.Variable", "torch.autograd.Variable", "torch.softmax", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "model.CLAN_G.Res_Deeplab.layer5.parameters", "model.CLAN_G.Res_Deeplab.layer6.parameters", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "model.CLAN_G.Res_Deeplab.state_dict", "os.join", "model.CLAN_D.FCDiscriminator.state_dict", "os.join", "model.CLAN_G.Res_Deeplab.state_dict", "os.join", "model.CLAN_D.FCDiscriminator.state_dict", "os.join", "w5.view", "w6.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "w5.view", "w6.view", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "str", "str", "str", "str", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "interp_source.data.size", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "interp_target.data.size", "interp_target.data.size", "interp_target.data.size", "interp_target.data.size"], "function", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.Res_Deeplab", "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.ResNet.optim_parameters", "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_train.adjust_learning_rate", "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_train.adjust_learning_rate_D", "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_train.weightmap", "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_train.loss_calc", "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_train.loss_calc"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the training.\"\"\"", "\n", "\n", "h", ",", "w", "=", "map", "(", "int", ",", "args", ".", "input_size_source", ".", "split", "(", "','", ")", ")", "\n", "input_size_source", "=", "(", "h", ",", "w", ")", "\n", "\n", "h", ",", "w", "=", "map", "(", "int", ",", "args", ".", "input_size_target", ".", "split", "(", "','", ")", ")", "\n", "input_size_target", "=", "(", "h", ",", "w", ")", "\n", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "# Create Network", "\n", "model", "=", "Res_Deeplab", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "if", "args", ".", "restore_from", "[", ":", "4", "]", "==", "'http'", ":", "\n", "        ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "args", ".", "restore_from", ")", "\n", "", "else", ":", "\n", "        ", "saved_state_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", ")", "\n", "", "new_params", "=", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "i", "in", "saved_state_dict", ":", "\n", "        ", "i_parts", "=", "i", ".", "split", "(", "'.'", ")", "\n", "if", "not", "args", ".", "num_classes", "==", "19", "or", "not", "i_parts", "[", "1", "]", "==", "'layer5'", ":", "\n", "            ", "new_params", "[", "'.'", ".", "join", "(", "i_parts", "[", "1", ":", "]", ")", "]", "=", "saved_state_dict", "[", "i", "]", "\n", "\n", "", "", "if", "args", ".", "restore_from", "[", ":", "4", "]", "==", "'./mo'", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "new_params", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Init D", "\n", "model_D", "=", "FCDiscriminator", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "# =============================================================================", "\n", "#    #for retrain     ", "\n", "#    saved_state_dict_D = torch.load(RESTORE_FROM_D)", "\n", "#    model_D.load_state_dict(saved_state_dict_D)", "\n", "# =============================================================================", "\n", "\n", "model_D", ".", "train", "(", ")", "\n", "model_D", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "snapshot_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "snapshot_dir", ")", "\n", "\n", "", "if", "args", ".", "source", "==", "'GTA5'", ":", "\n", "        ", "trainloader", "=", "data", ".", "DataLoader", "(", "\n", "GTA5DataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "max_iters", "=", "args", ".", "num_steps", "*", "args", ".", "iter_size", "*", "args", ".", "batch_size", ",", "\n", "crop_size", "=", "input_size_source", ",", "\n", "scale", "=", "True", ",", "mirror", "=", "True", ",", "mean", "=", "IMG_MEAN", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "trainloader", "=", "data", ".", "DataLoader", "(", "\n", "SYNTHIADataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "max_iters", "=", "args", ".", "num_steps", "*", "args", ".", "iter_size", "*", "args", ".", "batch_size", ",", "\n", "crop_size", "=", "input_size_source", ",", "\n", "scale", "=", "True", ",", "mirror", "=", "True", ",", "mean", "=", "IMG_MEAN", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "", "trainloader_iter", "=", "enumerate", "(", "trainloader", ")", "\n", "\n", "targetloader", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir_target", ",", "args", ".", "data_list_target", ",", "\n", "max_iters", "=", "args", ".", "num_steps", "*", "args", ".", "iter_size", "*", "args", ".", "batch_size", ",", "\n", "crop_size", "=", "input_size_target", ",", "\n", "scale", "=", "True", ",", "mirror", "=", "True", ",", "mean", "=", "IMG_MEAN", ",", "\n", "set", "=", "args", ".", "set", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "\n", "targetloader_iter", "=", "enumerate", "(", "targetloader", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "args", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "optimizer_D", "=", "optim", ".", "Adam", "(", "model_D", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate_D", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "\n", "bce_loss", "=", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "weighted_bce_loss", "=", "WeightedBCEWithLogitsLoss", "(", ")", "\n", "\n", "interp_source", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_source", "[", "1", "]", ",", "input_size_source", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_target", "[", "1", "]", ",", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "# Labels for Adversarial Training", "\n", "source_label", "=", "0", "\n", "target_label", "=", "1", "\n", "\n", "for", "i_iter", "in", "range", "(", "args", ".", "num_steps", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", "\n", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "adjust_learning_rate_D", "(", "optimizer_D", ",", "i_iter", ")", "\n", "\n", "damping", "=", "(", "1", "-", "i_iter", "/", "NUM_STEPS", ")", "\n", "\n", "#======================================================================================", "\n", "# train G", "\n", "#======================================================================================", "\n", "\n", "#Remove Grads in D", "\n", "for", "param", "in", "model_D", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "# Train with Source", "\n", "", "_", ",", "batch", "=", "next", "(", "trainloader_iter", ")", "\n", "images_s", ",", "labels_s", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "images_s", "=", "Variable", "(", "images_s", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "pred_source1", ",", "pred_source2", "=", "model", "(", "images_s", ")", "\n", "pred_source1", "=", "interp_source", "(", "pred_source1", ")", "\n", "pred_source2", "=", "interp_source", "(", "pred_source2", ")", "\n", "\n", "#Segmentation Loss", "\n", "loss_seg", "=", "(", "loss_calc", "(", "pred_source1", ",", "labels_s", ",", "args", ".", "gpu", ")", "+", "loss_calc", "(", "pred_source2", ",", "labels_s", ",", "args", ".", "gpu", ")", ")", "\n", "loss_seg", ".", "backward", "(", ")", "\n", "\n", "# Train with Target", "\n", "_", ",", "batch", "=", "next", "(", "targetloader_iter", ")", "\n", "images_t", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "images_t", "=", "Variable", "(", "images_t", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "pred_target1", ",", "pred_target2", "=", "model", "(", "images_t", ")", "\n", "pred_target1", "=", "interp_target", "(", "pred_target1", ")", "\n", "pred_target2", "=", "interp_target", "(", "pred_target2", ")", "\n", "\n", "weight_map", "=", "weightmap", "(", "F", ".", "softmax", "(", "pred_target1", ",", "dim", "=", "1", ")", ",", "F", ".", "softmax", "(", "pred_target2", ",", "dim", "=", "1", ")", ")", "\n", "\n", "D_out", "=", "interp_target", "(", "model_D", "(", "F", ".", "softmax", "(", "pred_target1", "+", "pred_target2", ",", "dim", "=", "1", ")", ")", ")", "\n", "\n", "#Adaptive Adversarial Loss", "\n", "if", "(", "i_iter", ">", "PREHEAT_STEPS", ")", ":", "\n", "            ", "loss_adv", "=", "weighted_bce_loss", "(", "D_out", ",", "\n", "Variable", "(", "torch", ".", "FloatTensor", "(", "D_out", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "source_label", ")", ")", ".", "cuda", "(", "\n", "args", ".", "gpu", ")", ",", "weight_map", ",", "Epsilon", ",", "Lambda_local", ")", "\n", "", "else", ":", "\n", "            ", "loss_adv", "=", "bce_loss", "(", "D_out", ",", "\n", "Variable", "(", "torch", ".", "FloatTensor", "(", "D_out", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "source_label", ")", ")", ".", "cuda", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "loss_adv", "=", "loss_adv", "*", "Lambda_adv", "*", "damping", "\n", "loss_adv", ".", "backward", "(", ")", "\n", "\n", "#Weight Discrepancy Loss", "\n", "W5", "=", "None", "\n", "W6", "=", "None", "\n", "if", "args", ".", "model", "==", "'ResNet'", ":", "\n", "\n", "            ", "for", "(", "w5", ",", "w6", ")", "in", "zip", "(", "model", ".", "layer5", ".", "parameters", "(", ")", ",", "model", ".", "layer6", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "if", "W5", "is", "None", "and", "W6", "is", "None", ":", "\n", "                    ", "W5", "=", "w5", ".", "view", "(", "-", "1", ")", "\n", "W6", "=", "w6", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                    ", "W5", "=", "torch", ".", "cat", "(", "(", "W5", ",", "w5", ".", "view", "(", "-", "1", ")", ")", ",", "0", ")", "\n", "W6", "=", "torch", ".", "cat", "(", "(", "W6", ",", "w6", ".", "view", "(", "-", "1", ")", ")", ",", "0", ")", "\n", "\n", "", "", "", "loss_weight", "=", "(", "torch", ".", "matmul", "(", "W5", ",", "W6", ")", "/", "(", "torch", ".", "norm", "(", "W5", ")", "*", "torch", ".", "norm", "(", "W6", ")", ")", "+", "1", ")", "# +1 is for a positive loss", "\n", "loss_weight", "=", "loss_weight", "*", "Lambda_weight", "*", "damping", "*", "2", "\n", "loss_weight", ".", "backward", "(", ")", "\n", "\n", "#======================================================================================", "\n", "# train D", "\n", "#======================================================================================", "\n", "\n", "# Bring back Grads in D", "\n", "for", "param", "in", "model_D", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "\n", "# Train with Source", "\n", "", "pred_source1", "=", "pred_source1", ".", "detach", "(", ")", "\n", "pred_source2", "=", "pred_source2", ".", "detach", "(", ")", "\n", "\n", "D_out_s", "=", "interp_source", "(", "model_D", "(", "F", ".", "softmax", "(", "pred_source1", "+", "pred_source2", ",", "dim", "=", "1", ")", ")", ")", "\n", "\n", "loss_D_s", "=", "bce_loss", "(", "D_out_s", ",", "\n", "Variable", "(", "torch", ".", "FloatTensor", "(", "D_out_s", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "source_label", ")", ")", ".", "cuda", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "loss_D_s", ".", "backward", "(", ")", "\n", "\n", "# Train with Target", "\n", "pred_target1", "=", "pred_target1", ".", "detach", "(", ")", "\n", "pred_target2", "=", "pred_target2", ".", "detach", "(", ")", "\n", "weight_map", "=", "weight_map", ".", "detach", "(", ")", "\n", "\n", "D_out_t", "=", "interp_target", "(", "model_D", "(", "F", ".", "softmax", "(", "pred_target1", "+", "pred_target2", ",", "dim", "=", "1", ")", ")", ")", "\n", "\n", "#Adaptive Adversarial Loss", "\n", "if", "(", "i_iter", ">", "PREHEAT_STEPS", ")", ":", "\n", "            ", "loss_D_t", "=", "weighted_bce_loss", "(", "D_out_t", ",", "\n", "Variable", "(", "torch", ".", "FloatTensor", "(", "D_out_t", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "target_label", ")", ")", ".", "cuda", "(", "\n", "args", ".", "gpu", ")", ",", "weight_map", ",", "Epsilon", ",", "Lambda_local", ")", "\n", "", "else", ":", "\n", "            ", "loss_D_t", "=", "bce_loss", "(", "D_out_t", ",", "\n", "Variable", "(", "torch", ".", "FloatTensor", "(", "D_out_t", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "target_label", ")", ")", ".", "cuda", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "loss_D_t", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "print", "(", "'exp = {}'", ".", "format", "(", "args", ".", "snapshot_dir", ")", ")", "\n", "print", "(", "\n", "'iter = {0:6d}/{1:6d}, loss_seg = {2:.4f} loss_adv = {3:.4f}, loss_weight = {4:.4f}, loss_D_s = {5:.4f} loss_D_t = {6:.4f}'", ".", "format", "(", "\n", "i_iter", ",", "args", ".", "num_steps", ",", "loss_seg", ",", "loss_adv", ",", "loss_weight", ",", "loss_D_s", ",", "loss_D_t", ")", ")", "\n", "\n", "f_loss", "=", "open", "(", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'loss.txt'", ")", ",", "'a'", ")", "\n", "f_loss", ".", "write", "(", "'{0:.4f} {1:.4f} {2:.4f} {3:.4f} {4:.4f}\\n'", ".", "format", "(", "\n", "loss_seg", ",", "loss_adv", ",", "loss_weight", ",", "loss_D_s", ",", "loss_D_t", ")", ")", "\n", "f_loss", ".", "close", "(", ")", "\n", "\n", "if", "i_iter", ">=", "args", ".", "num_steps_stop", "-", "1", ":", "\n", "            ", "print", "(", "'save model ...'", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "args", ".", "num_steps", ")", "+", "'.pth'", ")", ")", "\n", "torch", ".", "save", "(", "model_D", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "args", ".", "num_steps", ")", "+", "'_D.pth'", ")", ")", "\n", "break", "\n", "\n", "", "if", "i_iter", "%", "args", ".", "save_pred_every", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'taking snapshot ...'", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "i_iter", ")", "+", "'.pth'", ")", ")", "\n", "torch", ".", "save", "(", "model_D", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "i_iter", ")", "+", "'_D.pth'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_evaluate.colorize_mask": [[33, 39], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ")", ":", "\n", "# mask: numpy array of the mask", "\n", "    ", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_evaluate.get_arguments": [[41, 67], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "MODEL", ",", "\n", "help", "=", "\"available options : ResNet, Vgg\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the Cityscapes dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "type", "=", "str", ",", "default", "=", "SET", ",", "\n", "help", "=", "\"choose evaluation set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save\"", ",", "type", "=", "str", ",", "default", "=", "SAVE_PATH", ",", "\n", "help", "=", "\"Path to save result.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_evaluate.main": [[69, 115], ["CLAN_evaluate.get_arguments", "model.CLAN_G.Res_Deeplab.load_state_dict", "model.CLAN_G.Res_Deeplab.eval", "model.CLAN_G.Res_Deeplab.cuda", "torch.utils.data.DataLoader", "torch.Upsample", "os.path.exists", "os.makedirs", "model.CLAN_G.Res_Deeplab", "torch.utils.model_zoo.load_url", "torch.load", "torch.load", "dataset.cityscapes_dataset.cityscapesDataSet", "torch.no_grad", "torch.no_grad", "enumerate", "model.CLAN_G.Res_Deeplab.", "nn.Upsample.cpu().data[].numpy", "Image.fromarray.transpose", "numpy.asarray", "CLAN_evaluate.colorize_mask", "PIL.Image.fromarray", "Image.fromarray.save", "colorize_mask.save", "print", "torch.autograd.Variable().cuda", "numpy.argmax", "name[].split", "torch.autograd.Variable", "nn.Upsample.cpu", "name.split", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_evaluate.get_arguments", "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.Res_Deeplab", "home.repos.pwc.inspect_result.RoyalVane_CLAN.None.CLAN_evaluate.colorize_mask"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the evaluation process.\"\"\"", "\n", "\n", "args", "=", "get_arguments", "(", ")", "\n", "\n", "gpu0", "=", "args", ".", "gpu", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save", ")", "\n", "\n", "", "if", "args", ".", "model", "==", "'ResNet'", ":", "\n", "        ", "model", "=", "Res_Deeplab", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "\n", "", "if", "args", ".", "restore_from", "[", ":", "4", "]", "==", "'http'", ":", "\n", "        ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "args", ".", "restore_from", ")", "\n", "", "else", ":", "\n", "        ", "saved_state_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", ")", "\n", "", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", "gpu0", ")", "\n", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "crop_size", "=", "(", "1024", ",", "512", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "args", ".", "set", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "index", ",", "batch", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "if", "index", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "'%d processd'", "%", "index", ")", "\n", "", "image", ",", "_", ",", "_", ",", "name", "=", "batch", "\n", "output1", ",", "output2", "=", "model", "(", "Variable", "(", "image", ")", ".", "cuda", "(", "gpu0", ")", ")", "\n", "\n", "output", "=", "interp", "(", "output1", "+", "output2", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "output_col", "=", "colorize_mask", "(", "output", ")", "\n", "output", "=", "Image", ".", "fromarray", "(", "output", ")", "\n", "\n", "name", "=", "name", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "output", ".", "save", "(", "'%s/%s'", "%", "(", "args", ".", "save", ",", "name", ")", ")", "\n", "\n", "output_col", ".", "save", "(", "'%s/%s_color.png'", "%", "(", "args", ".", "save", ",", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.utils.loss.WeightedBCEWithLogitsLoss.__init__": [[21, 24], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_D.FCDiscriminator_Local.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "WeightedBCEWithLogitsLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.utils.loss.WeightedBCEWithLogitsLoss.weighted": [[25, 39], ["ValueError", "loss.mean", "loss.sum", "target.size", "input.size", "target.size", "input.size"], "methods", ["None"], ["", "def", "weighted", "(", "self", ",", "input", ",", "target", ",", "weight", ",", "alpha", ",", "beta", ")", ":", "\n", "        ", "if", "not", "(", "target", ".", "size", "(", ")", "==", "input", ".", "size", "(", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Target size ({}) must be the same as input size ({})\"", ".", "format", "(", "target", ".", "size", "(", ")", ",", "input", ".", "size", "(", ")", ")", ")", "\n", "\n", "", "max_val", "=", "(", "-", "input", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "loss", "=", "input", "-", "input", "*", "target", "+", "max_val", "+", "(", "(", "-", "max_val", ")", ".", "exp", "(", ")", "+", "(", "-", "input", "-", "max_val", ")", ".", "exp", "(", ")", ")", ".", "log", "(", ")", "\n", "\n", "if", "weight", "is", "not", "None", ":", "\n", "            ", "loss", "=", "alpha", "*", "loss", "+", "beta", "*", "loss", "*", "weight", "\n", "\n", "", "if", "self", ".", "size_average", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.utils.loss.WeightedBCEWithLogitsLoss.forward": [[40, 45], ["loss.WeightedBCEWithLogitsLoss.weighted", "loss.WeightedBCEWithLogitsLoss.weighted"], "methods", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.utils.loss.WeightedBCEWithLogitsLoss.weighted", "home.repos.pwc.inspect_result.RoyalVane_CLAN.utils.loss.WeightedBCEWithLogitsLoss.weighted"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "weight", ",", "alpha", ",", "beta", ")", ":", "\n", "        ", "if", "weight", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "weighted", "(", "input", ",", "target", ",", "weight", ",", "alpha", ",", "beta", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "weighted", "(", "input", ",", "target", ",", "None", ",", "alpha", ",", "beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.utils.loss.CrossEntropy2d.__init__": [[49, 62], ["torch.Module.__init__", "torch.autograd.Variable", "torch.autograd.Variable", "isinstance", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_D.FCDiscriminator_Local.__init__"], ["    ", "def", "__init__", "(", "self", ",", "class_num", ",", "alpha", "=", "None", ",", "gamma", "=", "2", ",", "size_average", "=", "True", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "super", "(", "CrossEntropy2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "alpha", "is", "None", ":", "\n", "            ", "self", ".", "alpha", "=", "Variable", "(", "torch", ".", "ones", "(", "class_num", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "alpha", ",", "Variable", ")", ":", "\n", "                ", "self", ".", "alpha", "=", "alpha", "\n", "", "else", ":", "\n", "                ", "self", ".", "alpha", "=", "Variable", "(", "alpha", ")", "\n", "", "", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "class_num", "=", "class_num", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.utils.loss.CrossEntropy2d.forward": [[63, 83], ["P[].view.size", "torch.Softmax2d", "torch.Softmax2d", "torch.Softmax2d.", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "target[].view", "P[].view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.log", "torch.gather.log", "batch_loss.mean", "batch_loss.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "target_mask.view().repeat", "target_mask.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "predict", ",", "target", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "predict", ".", "size", "(", ")", "\n", "sm", "=", "nn", ".", "Softmax2d", "(", ")", "\n", "\n", "P", "=", "sm", "(", "predict", ")", "\n", "P", "=", "torch", ".", "clamp", "(", "P", ",", "min", "=", "1e-9", ",", "max", "=", "1", "-", "(", "1e-9", ")", ")", "\n", "\n", "target_mask", "=", "(", "target", ">=", "0", ")", "*", "(", "target", "!=", "self", ".", "ignore_label", ")", "\n", "target", "=", "target", "[", "target_mask", "]", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "predict", "=", "P", "[", "target_mask", ".", "view", "(", "N", ",", "1", ",", "H", ",", "W", ")", ".", "repeat", "(", "1", ",", "C", ",", "1", ",", "1", ")", "]", ".", "view", "(", "C", ",", "-", "1", ")", "\n", "probs", "=", "torch", ".", "gather", "(", "predict", ",", "dim", "=", "0", ",", "index", "=", "target", ")", "\n", "log_p", "=", "probs", ".", "log", "(", ")", "\n", "batch_loss", "=", "-", "(", "torch", ".", "pow", "(", "(", "1", "-", "probs", ")", ",", "self", ".", "gamma", ")", ")", "*", "log_p", "\n", "\n", "if", "self", ".", "size_average", ":", "\n", "            ", "loss", "=", "batch_loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "\n", "            ", "loss", "=", "batch_loss", ".", "sum", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.utils.loss.channel_1toN": [[9, 17], ["torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "range", "torch.LongTensor().zero_.float", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.logical_not().astype", "numpy.logical_not", "numpy.logical_xor", "layer.numpy", "torch.LongTensor().zero_.numpy"], "function", ["None"], ["def", "channel_1toN", "(", "img", ",", "num_channel", ")", ":", "\n", "    ", "T", "=", "torch", ".", "LongTensor", "(", "num_channel", ",", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", ")", ".", "zero_", "(", ")", "\n", "mask", "=", "torch", ".", "LongTensor", "(", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", ")", ".", "zero_", "(", ")", "\n", "for", "i", "in", "range", "(", "num_channel", ")", ":", "\n", "        ", "T", "[", "i", "]", "=", "T", "[", "i", "]", "+", "i", "\n", "layer", "=", "T", "[", "i", "]", "-", "img", "\n", "T", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "np", ".", "logical_not", "(", "np", ".", "logical_xor", "(", "layer", ".", "numpy", "(", ")", ",", "mask", ".", "numpy", "(", ")", ")", ")", ".", "astype", "(", "int", ")", ")", "\n", "", "return", "T", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.utils.visual.tensor2im": [[7, 18], ["image_tensor[].cpu().float().numpy", "numpy.transpose", "np.tile.astype", "numpy.tile", "image_tensor[].cpu().float", "image_tensor[].cpu"], "function", ["None"], ["def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "#print(image_tensor)", "\n", "    ", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "if", "image_numpy", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "image_numpy", "=", "np", ".", "tile", "(", "image_numpy", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "#    mean = np.array([0.485, 0.456, 0.406])", "\n", "#    std = np.array([0.229, 0.224, 0.225])", "\n", "#    image_numpy = (std * image_numpy + mean) * 255", "\n", "image_numpy", "=", "image_numpy", "+", "IMG_MEAN", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.utils.visual.onedim_tensor2im": [[19, 40], ["numpy.zeros", "range", "np.zeros.astype", "numpy.array", "image_tensor.size", "range", "image_tensor.size", "image_tensor.size", "image_tensor.size"], "function", ["None"], ["", "def", "onedim_tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ",", "dataset", "=", "'Pascal'", ")", ":", "\n", "    ", "if", "dataset", "==", "'Pascal'", ":", "\n", "        ", "palette_idx", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "255", ",", "0", ",", "0", "]", ",", "[", "155", ",", "100", ",", "0", "]", ",", "[", "128", ",", "128", ",", "0", "]", ",", "[", "0", ",", "128", ",", "128", "]", ",", "[", "0", ",", "100", ",", "155", "]", ",", "[", "0", ",", "0", ",", "255", "]", "]", ")", "#Pascal", "\n", "", "result", "=", "np", ".", "zeros", "(", "shape", "=", "(", "image_tensor", ".", "size", "(", "2", ")", ",", "image_tensor", ".", "size", "(", "3", ")", ",", "3", ")", ")", "\n", "#image_numpy = image_tensor[0].cpu().float().numpy()", "\n", "for", "i", "in", "range", "(", "image_tensor", ".", "size", "(", "2", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "image_tensor", ".", "size", "(", "3", ")", ")", ":", "\n", "#result[i][j] = palette_idx[np.argmax(image_numpy[:,i,j]) + 1]", "\n", "            ", "if", "image_tensor", ".", "data", "[", "0", "]", "[", "0", "]", "[", "i", "]", "[", "j", "]", ">", "0.8", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "1", "]", "\n", "", "elif", "0.65", "<", "image_tensor", ".", "data", "[", "0", "]", "[", "0", "]", "[", "i", "]", "[", "j", "]", "<", "0.8", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "2", "]", "\n", "", "elif", "0.5", "<", "image_tensor", ".", "data", "[", "0", "]", "[", "0", "]", "[", "i", "]", "[", "j", "]", "<", "0.65", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "3", "]", "\n", "", "elif", "0.35", "<", "image_tensor", ".", "data", "[", "0", "]", "[", "0", "]", "[", "i", "]", "[", "j", "]", "<", "0.5", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "4", "]", "\n", "", "elif", "0.2", "<", "image_tensor", ".", "data", "[", "0", "]", "[", "0", "]", "[", "i", "]", "[", "j", "]", "<", "0.35", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "5", "]", "\n", "", "else", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "6", "]", "\n", "", "", "", "return", "result", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.utils.visual.onedim_superpixel2im": [[41, 63], ["numpy.zeros", "torch.div", "range", "np.zeros.astype", "numpy.array", "torch.div.size", "range", "torch.div.size", "torch.div.size", "torch.div.size"], "function", ["None"], ["", "def", "onedim_superpixel2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ",", "dataset", "=", "'Pascal'", ")", ":", "\n", "    ", "if", "dataset", "==", "'Pascal'", ":", "\n", "        ", "palette_idx", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "255", ",", "0", ",", "0", "]", ",", "[", "155", ",", "100", ",", "0", "]", ",", "[", "128", ",", "128", ",", "0", "]", ",", "[", "0", ",", "128", ",", "128", "]", ",", "[", "0", ",", "100", ",", "155", "]", ",", "[", "0", ",", "0", ",", "255", "]", "]", ")", "#Pascal", "\n", "", "result", "=", "np", ".", "zeros", "(", "shape", "=", "(", "image_tensor", ".", "size", "(", "1", ")", ",", "image_tensor", ".", "size", "(", "2", ")", ",", "3", ")", ")", "\n", "image_tensor", "=", "torch", ".", "div", "(", "image_tensor", ",", "100", ")", "\n", "#image_numpy = image_tensor[0].cpu().float().numpy()", "\n", "for", "i", "in", "range", "(", "image_tensor", ".", "size", "(", "1", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "image_tensor", ".", "size", "(", "2", ")", ")", ":", "\n", "#result[i][j] = palette_idx[np.argmax(image_numpy[:,i,j]) + 1]", "\n", "            ", "if", "image_tensor", "[", "0", "]", "[", "i", "]", "[", "j", "]", ">", "0.8", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "1", "]", "\n", "", "elif", "0.65", "<", "image_tensor", "[", "0", "]", "[", "i", "]", "[", "j", "]", "<", "0.8", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "2", "]", "\n", "", "elif", "0.5", "<", "image_tensor", "[", "0", "]", "[", "i", "]", "[", "j", "]", "<", "0.65", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "3", "]", "\n", "", "elif", "0.35", "<", "image_tensor", "[", "0", "]", "[", "i", "]", "[", "j", "]", "<", "0.5", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "4", "]", "\n", "", "elif", "0.2", "<", "image_tensor", "[", "0", "]", "[", "i", "]", "[", "j", "]", "<", "0.35", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "5", "]", "\n", "", "else", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "6", "]", "\n", "", "", "", "return", "result", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.utils.visual.save_image": [[65, 68], ["PIL.Image.fromarray", "Image.fromarray.save"], "function", ["None"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ")", ":", "\n", "    ", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.dataset.synthia_dataset.SYNTHIADataSet.__init__": [[13, 40], ["imageio.plugins.freeimage.download", "i_id.strip", "os.join", "os.join", "synthia_dataset.SYNTHIADataSet.files.append", "open", "int", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "max_iters", "=", "None", ",", "crop_size", "=", "(", "321", ",", "321", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "True", ",", "mirror", "=", "True", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "imageio", ".", "plugins", ".", "freeimage", ".", "download", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "# self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "\n", "self", ".", "id_to_trainid", "=", "{", "3", ":", "0", ",", "4", ":", "1", ",", "2", ":", "2", ",", "21", ":", "3", ",", "5", ":", "4", ",", "7", ":", "5", ",", "\n", "15", ":", "6", ",", "9", ":", "7", ",", "6", ":", "8", ",", "16", ":", "9", ",", "1", ":", "10", ",", "10", ":", "11", ",", "17", ":", "12", ",", "\n", "8", ":", "13", ",", "18", ":", "14", ",", "19", ":", "15", ",", "20", ":", "16", ",", "12", ":", "17", ",", "11", ":", "18", "}", "\n", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"RGB/%s\"", "%", "name", ")", "\n", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"GT/LABELS/%s\"", "%", "name", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.dataset.synthia_dataset.SYNTHIADataSet.__len__": [[42, 44], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.dataset.synthia_dataset.SYNTHIADataSet.__scale__": [[45, 55], ["random.random", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "__scale__", "(", "self", ")", ":", "\n", "        ", "cropsize", "=", "self", ".", "crop_size", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "r", "=", "random", ".", "random", "(", ")", "\n", "if", "r", ">", "0.7", ":", "\n", "                ", "cropsize", "=", "(", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "1.1", ")", ",", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "1.1", ")", ")", "\n", "", "elif", "r", "<", "0.3", ":", "\n", "                ", "cropsize", "=", "(", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "0.8", ")", ",", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "0.8", ")", ")", "\n", "\n", "", "", "return", "cropsize", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.dataset.synthia_dataset.SYNTHIADataSet.__getitem__": [[56, 96], ["synthia_dataset.SYNTHIADataSet.__scale__", "PIL.Image.open().convert", "PIL.Image.fromarray", "numpy.take.resize", "numpy.asarray.resize", "numpy.asarray", "numpy.asarray", "synthia_dataset.SYNTHIADataSet.id_to_trainid.items", "numpy.asarray", "numpy.take.transpose", "numpy.take.copy", "numpy.take.copy", "numpy.array", "numpy.array", "numpy.asarray", "numpy.ones", "numpy.take", "numpy.take", "print", "synthia_dataset.SYNTHIADataSet.__getitem__", "PIL.Image.open", "imageio.imread", "random.random", "range", "range"], "methods", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.dataset.cityscapes_dataset.cityscapesDataSet.__scale__", "home.repos.pwc.inspect_result.RoyalVane_CLAN.dataset.cityscapes_dataset.cityscapesDataSet.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "cropsize", "=", "self", ".", "__scale__", "(", ")", "\n", "try", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "label", "=", "np", ".", "asarray", "(", "imageio", ".", "imread", "(", "datafiles", "[", "\"label\"", "]", ",", "format", "=", "'PNG-FI'", ")", ")", "[", ":", ",", ":", ",", "0", "]", "# uint16", "\n", "label", "=", "Image", ".", "fromarray", "(", "label", ")", "\n", "#label = Image.open(datafiles[\"label\"])", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "cropsize", ",", "Image", ".", "BICUBIC", ")", "\n", "label", "=", "label", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label", ",", "np", ".", "float32", ")", "\n", "\n", "# re-assign labels to match the format of Cityscapes", "\n", "label_copy", "=", "255", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "                ", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "", "label_copy", "=", "np", ".", "asarray", "(", "label_copy", ",", "np", ".", "float32", ")", "\n", "size", "=", "image", ".", "shape", "\n", "size_l", "=", "label", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "#randomly mirror the images", "\n", "if", "self", ".", "is_mirror", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "idx", "=", "[", "i", "for", "i", "in", "range", "(", "size", "[", "1", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "idx_l", "=", "[", "i", "for", "i", "in", "range", "(", "size_l", "[", "1", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "image", "=", "np", ".", "take", "(", "image", ",", "idx", ",", "axis", "=", "2", ")", "\n", "label_copy", "=", "np", ".", "take", "(", "label_copy", ",", "idx_l", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "'error'", ")", "\n", "index", "=", "index", "-", "1", "if", "index", ">", "0", "else", "index", "+", "1", "\n", "return", "self", ".", "__getitem__", "(", "index", ")", "\n", "", "return", "image", ".", "copy", "(", ")", ",", "label_copy", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.dataset.gta5_dataset.GTA5DataSet.__init__": [[11, 37], ["i_id.strip", "os.join", "os.join", "gta5_dataset.GTA5DataSet.files.append", "open", "int", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "max_iters", "=", "None", ",", "crop_size", "=", "(", "321", ",", "321", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "True", ",", "mirror", "=", "True", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "#self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"images/%s\"", "%", "name", ")", "\n", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"labels/%s\"", "%", "name", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.dataset.gta5_dataset.GTA5DataSet.__len__": [[39, 41], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.dataset.gta5_dataset.GTA5DataSet.__scale__": [[42, 52], ["random.random", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "__scale__", "(", "self", ")", ":", "\n", "        ", "cropsize", "=", "self", ".", "crop_size", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "r", "=", "random", ".", "random", "(", ")", "\n", "if", "r", ">", "0.7", ":", "\n", "                ", "cropsize", "=", "(", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "1.1", ")", ",", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "1.1", ")", ")", "\n", "", "elif", "r", "<", "0.3", ":", "\n", "                ", "cropsize", "=", "(", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "0.8", ")", ",", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "0.8", ")", ")", "\n", "\n", "", "", "return", "cropsize", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.dataset.gta5_dataset.GTA5DataSet.__getitem__": [[53, 92], ["gta5_dataset.GTA5DataSet.__scale__", "PIL.Image.open().convert", "PIL.Image.open", "numpy.take.resize", "numpy.asarray.resize", "numpy.asarray", "numpy.asarray", "gta5_dataset.GTA5DataSet.id_to_trainid.items", "numpy.asarray", "numpy.take.transpose", "numpy.take.copy", "numpy.take.copy", "numpy.array", "numpy.array", "numpy.ones", "numpy.take", "numpy.take", "gta5_dataset.GTA5DataSet.__getitem__", "PIL.Image.open", "random.random", "range", "range"], "methods", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.dataset.cityscapes_dataset.cityscapesDataSet.__scale__", "home.repos.pwc.inspect_result.RoyalVane_CLAN.dataset.cityscapes_dataset.cityscapesDataSet.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "cropsize", "=", "self", ".", "__scale__", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "label", "=", "Image", ".", "open", "(", "datafiles", "[", "\"label\"", "]", ")", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "cropsize", ",", "Image", ".", "BICUBIC", ")", "\n", "label", "=", "label", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label", ",", "np", ".", "float32", ")", "\n", "# re-assign labels to match the format of Cityscapes", "\n", "label_copy", "=", "255", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "                ", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "\n", "", "label_copy", "=", "np", ".", "asarray", "(", "label_copy", ",", "np", ".", "float32", ")", "\n", "\n", "size", "=", "image", ".", "shape", "\n", "size_l", "=", "label", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "if", "self", ".", "is_mirror", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "idx", "=", "[", "i", "for", "i", "in", "range", "(", "size", "[", "1", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "idx_l", "=", "[", "i", "for", "i", "in", "range", "(", "size_l", "[", "1", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "image", "=", "np", ".", "take", "(", "image", ",", "idx", ",", "axis", "=", "2", ")", "\n", "label_copy", "=", "np", ".", "take", "(", "label_copy", ",", "idx_l", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "index", "=", "index", "-", "1", "if", "index", ">", "0", "else", "index", "+", "1", "\n", "return", "self", ".", "__getitem__", "(", "index", ")", "\n", "\n", "", "return", "image", ".", "copy", "(", ")", ",", "label_copy", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.dataset.cityscapes_dataset.cityscapesDataSet.__init__": [[11, 31], ["i_id.strip", "os.join", "cityscapes_dataset.cityscapesDataSet.files.append", "open", "int", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "max_iters", "=", "None", ",", "crop_size", "=", "(", "321", ",", "321", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "False", ",", "mirror", "=", "True", ",", "ignore_label", "=", "255", ",", "set", "=", "'val'", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "#self.mean_bgr = np.array([72.30608881, 82.09696889, 71.60167789])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "set", "=", "set", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"leftImg8bit/%s/%s\"", "%", "(", "self", ".", "set", ",", "name", ")", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.dataset.cityscapes_dataset.cityscapesDataSet.__scale__": [[33, 43], ["random.random", "int", "int", "int", "int"], "methods", ["None"], ["", "", "def", "__scale__", "(", "self", ")", ":", "\n", "        ", "cropsize", "=", "self", ".", "crop_size", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "r", "=", "random", ".", "random", "(", ")", "\n", "if", "r", ">", "0.7", ":", "\n", "                ", "cropsize", "=", "(", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "1.1", ")", ",", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "1.1", ")", ")", "\n", "", "elif", "r", "<", "0.3", ":", "\n", "                ", "cropsize", "=", "(", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "0.8", ")", ",", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "0.8", ")", ")", "\n", "\n", "", "", "return", "cropsize", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.dataset.cityscapes_dataset.cityscapesDataSet.__len__": [[44, 46], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.dataset.cityscapes_dataset.cityscapesDataSet.__getitem__": [[47, 73], ["cityscapes_dataset.cityscapesDataSet.__scale__", "PIL.Image.open().convert", "numpy.take.resize", "numpy.asarray", "numpy.take.transpose", "numpy.take.copy", "numpy.array", "numpy.array", "numpy.take", "cityscapes_dataset.cityscapesDataSet.__getitem__", "PIL.Image.open", "random.random", "range"], "methods", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.dataset.cityscapes_dataset.cityscapesDataSet.__scale__", "home.repos.pwc.inspect_result.RoyalVane_CLAN.dataset.cityscapes_dataset.cityscapesDataSet.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "cropsize", "=", "self", ".", "__scale__", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "cropsize", ",", "Image", ".", "BICUBIC", ")", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "size", "=", "image", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "\n", "if", "self", ".", "is_mirror", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "idx", "=", "[", "i", "for", "i", "in", "range", "(", "size", "[", "1", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "image", "=", "np", ".", "take", "(", "image", ",", "idx", ",", "axis", "=", "2", ")", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "index", "=", "index", "-", "1", "if", "index", ">", "0", "else", "index", "+", "1", "\n", "return", "self", ".", "__getitem__", "(", "index", ")", "\n", "\n", "", "return", "image", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.BasicBlock.__init__": [[24, 33], ["torch.Module.__init__", "CLAN_G.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "CLAN_G.conv3x3", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_D.FCDiscriminator_Local.__init__", "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.conv3x3", "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.BasicBlock.forward": [[34, 51], ["CLAN_G.BasicBlock.conv1", "CLAN_G.BasicBlock.bn1", "CLAN_G.BasicBlock.relu", "CLAN_G.BasicBlock.conv2", "CLAN_G.BasicBlock.bn2", "CLAN_G.BasicBlock.relu", "CLAN_G.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.Bottleneck.__init__": [[56, 76], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "CLAN_G.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.BatchNorm2d", "CLAN_G.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.BatchNorm2d", "CLAN_G.Bottleneck.bn3.parameters", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_D.FCDiscriminator_Local.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "\n", "", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.Bottleneck.forward": [[77, 98], ["CLAN_G.Bottleneck.conv1", "CLAN_G.Bottleneck.bn1", "CLAN_G.Bottleneck.relu", "CLAN_G.Bottleneck.conv2", "CLAN_G.Bottleneck.bn2", "CLAN_G.Bottleneck.relu", "CLAN_G.Bottleneck.conv3", "CLAN_G.Bottleneck.bn3", "CLAN_G.Bottleneck.relu", "CLAN_G.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.Classifier_Module.__init__": [[101, 110], ["torch.Module.__init__", "torch.ModuleList", "zip", "CLAN_G.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_D.FCDiscriminator_Local.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.Classifier_Module.forward": [[111, 116], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.ResNet.__init__": [[119, 143], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "CLAN_G.ResNet.bn1.parameters", "torch.ReLU", "torch.MaxPool2d", "CLAN_G.ResNet._make_layer", "CLAN_G.ResNet._make_layer", "CLAN_G.ResNet._make_layer", "CLAN_G.ResNet._make_layer", "CLAN_G.ResNet._make_pred_layer", "CLAN_G.ResNet._make_pred_layer", "CLAN_G.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_D.FCDiscriminator_Local.__init__", "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.ResNet._make_layer", "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.ResNet._make_layer", "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.ResNet._make_layer", "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.ResNet._make_layer", "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.ResNet._make_pred_layer", "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.ResNet._make_pred_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "self", ".", "layer6", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "#        for i in m.parameters():", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.ResNet._make_layer": [[146, 162], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.ResNet._make_pred_layer": [[163, 165], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "return", "block", "(", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.ResNet.forward": [[166, 178], ["CLAN_G.ResNet.conv1", "CLAN_G.ResNet.bn1", "CLAN_G.ResNet.relu", "CLAN_G.ResNet.maxpool", "CLAN_G.ResNet.layer1", "CLAN_G.ResNet.layer2", "CLAN_G.ResNet.layer3", "CLAN_G.ResNet.layer4", "CLAN_G.ResNet.layer5", "CLAN_G.ResNet.layer6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x1", "=", "self", ".", "layer5", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer6", "(", "x", ")", "\n", "return", "x1", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.ResNet.get_1x_lr_params_NOscale": [[179, 202], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_NOscale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.ResNet.get_10x_lr_params": [[203, 216], ["b.append", "b.append", "range", "CLAN_G.ResNet.layer5.parameters", "CLAN_G.ResNet.layer6.parameters", "len"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "b", ".", "append", "(", "self", ".", "layer6", ".", "parameters", "(", ")", ")", "\n", "#b.append(self.layer7.parameters())", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.ResNet.optim_parameters": [[217, 220], ["CLAN_G.ResNet.get_1x_lr_params_NOscale", "CLAN_G.ResNet.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.ResNet.get_1x_lr_params_NOscale", "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.ResNet.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_NOscale", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.outS": [[7, 13], ["int", "int", "numpy.ceil"], "function", ["None"], ["def", "outS", "(", "i", ")", ":", "\n", "    ", "i", "=", "int", "(", "i", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "i", "=", "int", "(", "np", ".", "ceil", "(", "(", "i", "+", "1", ")", "/", "2.0", ")", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.conv3x3": [[15, 19], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_G.Res_Deeplab": [[222, 225], ["CLAN_G.ResNet"], "function", ["None"], ["", "", "def", "Res_Deeplab", "(", "num_classes", "=", "21", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_D.FCDiscriminator.__init__": [[6, 16], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_D.FCDiscriminator_Local.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "ndf", "=", "64", ")", ":", "\n", "        ", "super", "(", "FCDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_classes", ",", "ndf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_D.FCDiscriminator.forward": [[17, 29], ["CLAN_D.FCDiscriminator.conv1", "CLAN_D.FCDiscriminator.leaky_relu", "CLAN_D.FCDiscriminator.conv2", "CLAN_D.FCDiscriminator.leaky_relu", "CLAN_D.FCDiscriminator.conv3", "CLAN_D.FCDiscriminator.leaky_relu", "CLAN_D.FCDiscriminator.conv4", "CLAN_D.FCDiscriminator.leaky_relu", "CLAN_D.FCDiscriminator.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_D.FCDiscriminator_Local.__init__": [[33, 43], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.Upsample"], "methods", ["home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_D.FCDiscriminator_Local.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "ndf", "=", "64", ")", ":", "\n", "        ", "super", "(", "FCDiscriminator_Local", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_classes", "+", "2048", ",", "ndf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "up_sample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "32", ",", "mode", "=", "'bilinear'", ")", "\n", "#self.sigmoid = nn.Sigmoid()", "\n"]], "home.repos.pwc.inspect_result.RoyalVane_CLAN.model.CLAN_D.FCDiscriminator_Local.forward": [[46, 58], ["CLAN_D.FCDiscriminator_Local.conv1", "CLAN_D.FCDiscriminator_Local.leaky_relu", "CLAN_D.FCDiscriminator_Local.conv2", "CLAN_D.FCDiscriminator_Local.leaky_relu", "CLAN_D.FCDiscriminator_Local.conv3", "CLAN_D.FCDiscriminator_Local.leaky_relu", "CLAN_D.FCDiscriminator_Local.classifier", "CLAN_D.FCDiscriminator_Local.up_sample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "x", "=", "self", ".", "up_sample", "(", "x", ")", "\n", "#x = self.sigmoid(x) ", "\n", "\n", "return", "x", "", "", "", ""]]}