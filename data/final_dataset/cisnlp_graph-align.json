{"home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.MyWG.__init__": [[12, 16], ["collections.defaultdict", "enumerate"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "nodes", "=", "[", "]", ")", ":", "\n", "\t\t", "self", ".", "nodes", "=", "nodes", "\n", "self", ".", "node_map", "=", "{", "x", ":", "i", "for", "i", ",", "x", "in", "enumerate", "(", "nodes", ")", "}", "\n", "self", ".", "es", "=", "defaultdict", "(", "dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.MyWG.add_nodes": [[17, 23], ["induce_alignments_AdAd.MyWG.nodes.extend", "print", "enumerate"], "methods", ["None"], ["", "def", "add_nodes", "(", "self", ",", "nodes", ")", ":", "\n", "\t\t", "for", "n", "in", "nodes", ":", "\n", "\t\t\t", "if", "n", "in", "self", ".", "node_map", ":", "\n", "\t\t\t\t", "print", "(", "\"Node already exist!\"", ",", "n", ")", "\n", "", "", "self", ".", "nodes", ".", "extend", "(", "nodes", ")", "\n", "self", ".", "node_map", "=", "{", "x", ":", "i", "for", "i", ",", "x", "in", "enumerate", "(", "nodes", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.MyWG.add_edges": [[24, 31], ["print", "exit"], "methods", ["None"], ["", "def", "add_edges", "(", "self", ",", "new_edges", ")", ":", "\n", "\t\t", "for", "p", "in", "new_edges", ":", "\n", "\t\t\t", "if", "p", "[", "0", "]", "in", "self", ".", "nodes", ":", "\n", "\t\t\t\t", "self", ".", "es", "[", "self", ".", "node_map", "[", "p", "[", "0", "]", "]", "]", "[", "self", ".", "node_map", "[", "p", "[", "1", "]", "]", "]", "=", "p", "[", "2", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "print", "(", "\"-------------\\n\\n no such nodes!!! \\n\\n\\n\"", ",", "p", ")", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.MyWG.check_edges": [[32, 38], ["float"], "methods", ["None"], ["", "", "", "def", "check_edges", "(", "self", ")", ":", "\n", "\t\t", "base_nodes", "=", "[", "n", "for", "n", "in", "self", ".", "es", "]", "\n", "for", "n1", "in", "base_nodes", ":", "\n", "\t\t\t", "for", "n2", "in", "self", ".", "es", "[", "n1", "]", ":", "\n", "\t\t\t\t", "if", "n2", "not", "in", "self", ".", "es", "or", "n1", "not", "in", "self", ".", "es", "[", "n2", "]", ":", "\n", "\t\t\t\t\t", "self", ".", "es", "[", "n2", "]", "[", "n1", "]", "=", "float", "(", "self", ".", "es", "[", "n1", "]", "[", "n2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.MyWG.calc_adar": [[39, 52], ["induce_alignments_AdAd.MyWG.check_edges", "tqdm.tqdm.tqdm", "scores.append", "set", "set", "math.log", "len"], "methods", ["home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.MyWG.check_edges"], ["", "", "", "", "def", "calc_adar", "(", "self", ",", "edges", ",", "verbose", "=", "False", ")", ":", "\n", "\t\t", "self", ".", "check_edges", "(", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "for", "e", "in", "tqdm", "(", "edges", ",", "disable", "=", "not", "verbose", ")", ":", "\n", "\t\t\t", "if", "e", "[", "0", "]", "in", "self", ".", "node_map", ":", "\n", "\t\t\t\t", "e", "=", "(", "self", ".", "node_map", "[", "e", "[", "0", "]", "]", ",", "self", ".", "node_map", "[", "e", "[", "1", "]", "]", ")", "\n", "\n", "", "score", "=", "0.0", "\n", "for", "neib", "in", "set", "(", "self", ".", "es", "[", "e", "[", "0", "]", "]", ")", "&", "set", "(", "self", ".", "es", "[", "e", "[", "1", "]", "]", ")", ":", "\n", "\t\t\t\t", "score", "+=", "1", "/", "(", "math", ".", "log", "(", "len", "(", "self", ".", "es", "[", "neib", "]", ")", ")", ")", "\n", "", "scores", ".", "append", "(", "score", ")", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.MyWG.calc_wadar": [[53, 66], ["induce_alignments_AdAd.MyWG.check_edges", "tqdm.tqdm.tqdm", "scores.append", "set", "set", "math.log", "sum"], "methods", ["home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.MyWG.check_edges"], ["", "def", "calc_wadar", "(", "self", ",", "edges", ",", "verbose", "=", "False", ")", ":", "\n", "\t\t", "self", ".", "check_edges", "(", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "for", "e", "in", "tqdm", "(", "edges", ",", "disable", "=", "not", "verbose", ")", ":", "\n", "\t\t\t", "if", "e", "[", "0", "]", "in", "self", ".", "node_map", ":", "\n", "\t\t\t\t", "e", "=", "(", "self", ".", "node_map", "[", "e", "[", "0", "]", "]", ",", "self", ".", "node_map", "[", "e", "[", "1", "]", "]", ")", "\n", "\n", "", "score", "=", "0.0", "\n", "for", "neib", "in", "set", "(", "self", ".", "es", "[", "e", "[", "0", "]", "]", ")", "&", "set", "(", "self", ".", "es", "[", "e", "[", "1", "]", "]", ")", ":", "\n", "\t\t\t\t", "score", "+=", "(", "self", ".", "es", "[", "e", "[", "0", "]", "]", "[", "neib", "]", "+", "self", ".", "es", "[", "e", "[", "1", "]", "]", "[", "neib", "]", ")", "/", "(", "math", ".", "log", "(", "1", "+", "sum", "(", "[", "self", ".", "es", "[", "neib", "]", "[", "x", "]", "for", "x", "in", "self", ".", "es", "[", "neib", "]", "]", ")", ")", ")", "\n", "", "scores", ".", "append", "(", "score", ")", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.load_texts_and_alignments": [[68, 116], ["utils.load_editions", "collections.defaultdict", "tqdm.tqdm", "os.path.join", "set", "enumerate", "enumerate", "codecs.open", "list", "os.path.exists", "utils.LOG.info", "utils.LOG.info", "open", "l.split.split", "texts[].keys", "vl.split.split", "len", "len", "enumerate", "l[].strip", "l[].split", "int", "int", "vl[].strip().split", "int", "int", "vl[].strip().split", "alp.split", "alp.split", "vl[].strip", "alp.split", "alp.split", "vl[].strip"], "function", ["home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.load_editions"], ["", "", "def", "load_texts_and_alignments", "(", "editions_file", ",", "lang_files_path", ",", "verse_alignments_path", ",", "aligner", "=", "\"inter\"", ",", "golds", "=", "None", ")", ":", "\n", "# Get languages and editions", "\n", "\t", "editions", ",", "langs", "=", "load_editions", "(", "editions_file", ")", "\n", "all_editions", "=", "[", "editions", "[", "lang", "]", "for", "lang", "in", "langs", "]", "\n", "lang_pairs", "=", "[", "(", "l1", ",", "l2", ")", "for", "i", ",", "l1", "in", "enumerate", "(", "langs", ")", "for", "j", ",", "l2", "in", "enumerate", "(", "langs", "[", "i", "+", "1", ":", "]", ")", "]", "\n", "lang_code_map", "=", "{", "editions", "[", "lang", "]", ":", "lang", "for", "lang", "in", "editions", "}", "\n", "\n", "texts", "=", "{", "}", "\n", "for", "langl", "in", "langs", ":", "\n", "\t\t", "verses", "=", "{", "}", "\n", "lang_path", "=", "os", ".", "path", ".", "join", "(", "lang_files_path", ",", "editions", "[", "langl", "]", "+", "\".txt\"", ")", "\n", "with", "codecs", ".", "open", "(", "lang_path", ",", "\"r\"", ",", "\"utf-8\"", ")", "as", "fi", ":", "\n", "\t\t\t", "for", "l", "in", "fi", ":", "\n", "\t\t\t\t", "if", "l", "[", "0", "]", "==", "\"#\"", ":", "continue", "\n", "l", "=", "l", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "len", "(", "l", ")", "!=", "2", "or", "len", "(", "l", "[", "1", "]", ".", "strip", "(", ")", ")", "==", "0", ":", "continue", "\n", "if", "golds", "!=", "None", "and", "l", "[", "0", "]", "not", "in", "golds", ":", "continue", "\n", "\n", "verses", "[", "l", "[", "0", "]", "]", "=", "[", "F\"{langl}:{i}:{w}\"", "for", "i", ",", "w", "in", "enumerate", "(", "l", "[", "1", "]", ".", "split", "(", ")", ")", "]", "\n", "", "", "texts", "[", "langl", "]", "=", "verses", "\n", "\n", "", "if", "golds", "==", "None", ":", "\n", "\t\t", "golds", "=", "set", "(", "list", "(", "texts", "[", "langs", "[", "0", "]", "]", ".", "keys", "(", ")", ")", ")", "\n", "\n", "", "init_aligns", "=", "defaultdict", "(", "dict", ")", "\n", "for", "verse", "in", "tqdm", "(", "golds", ")", ":", "\n", "\t\t", "v_path", "=", "F\"{verse_alignments_path}/{verse}_{aligner}.txt\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "v_path", ")", ":", "\n", "\t\t\t", "LOG", ".", "info", "(", "v_path", ")", "\n", "LOG", ".", "info", "(", "f\"================================== does not exist ==================================\"", ")", "\n", "return", "None", "\n", "", "with", "open", "(", "v_path", ",", "\"r\"", ")", "as", "f_al", ":", "\n", "\t\t\t", "for", "vl", "in", "f_al", ":", "\n", "\t\t\t\t", "vl", "=", "vl", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "vl", "[", "0", "]", "not", "in", "all_editions", "or", "vl", "[", "1", "]", "not", "in", "all_editions", ":", "\n", "\t\t\t\t\t", "continue", "\n", "", "l1", ",", "l2", "=", "lang_code_map", "[", "vl", "[", "0", "]", "]", ",", "lang_code_map", "[", "vl", "[", "1", "]", "]", "\n", "is_reverse", "=", "False", "\n", "if", "(", "l1", ",", "l2", ")", "not", "in", "lang_pairs", ":", "\n", "\t\t\t\t\t", "l1", ",", "l2", "=", "l2", ",", "l1", "\n", "is_reverse", "=", "True", "\n", "\n", "", "if", "not", "is_reverse", ":", "\n", "\t\t\t\t\t", "init_aligns", "[", "(", "l1", ",", "l2", ")", "]", "[", "verse", "]", "=", "[", "[", "int", "(", "alp", ".", "split", "(", "\"-\"", ")", "[", "0", "]", ")", ",", "int", "(", "alp", ".", "split", "(", "\"-\"", ")", "[", "1", "]", ")", ",", "1.0", "]", "for", "alp", "in", "vl", "[", "2", "]", ".", "strip", "(", ")", ".", "split", "(", ")", "]", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "init_aligns", "[", "(", "l1", ",", "l2", ")", "]", "[", "verse", "]", "=", "[", "[", "int", "(", "alp", ".", "split", "(", "\"-\"", ")", "[", "1", "]", ")", ",", "int", "(", "alp", ".", "split", "(", "\"-\"", ")", "[", "0", "]", ")", ",", "1.0", "]", "for", "alp", "in", "vl", "[", "2", "]", ".", "strip", "(", ")", ".", "split", "(", ")", "]", "\n", "\n", "", "", "", "", "return", "lang_code_map", ",", "langs", ",", "texts", ",", "lang_pairs", ",", "init_aligns", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.get_alignment_matrix": [[117, 122], ["numpy.eye", "numpy.eye", "backward.transpose", "sim_matrix.argmax", "sim_matrix.argmax"], "function", ["None"], ["", "def", "get_alignment_matrix", "(", "sim_matrix", ")", ":", "\n", "\t", "m", ",", "n", "=", "sim_matrix", ".", "shape", "\n", "forward", "=", "np", ".", "eye", "(", "n", ")", "[", "sim_matrix", ".", "argmax", "(", "axis", "=", "1", ")", "]", "# m x n", "\n", "backward", "=", "np", ".", "eye", "(", "m", ")", "[", "sim_matrix", ".", "argmax", "(", "axis", "=", "0", ")", "]", "# n x m", "\n", "return", "forward", ",", "backward", ".", "transpose", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.calc_adars": [[123, 190], ["tqdm.tqdm", "induce_alignments_AdAd.MyWG", "induce_alignments_AdAd.MyWG.calc_adar", "zip", "induce_alignments_AdAd.MyWG.calc_wadar", "zip", "induce_alignments_AdAd.MyWG.calc_adar", "zip", "induce_alignments_AdAd.MyWG.calc_wadar", "zip", "cur_e_scores[].sort", "cur_e_wscores[].sort", "new_e_scores[].sort", "new_e_wscores[].sort", "all_nodes.extend", "set", "enumerate", "new_e_scores[].append", "new_e_wscores[].append", "cur_e_scores[].append", "cur_e_wscores[].append", "len", "set.add", "induce_alignments_AdAd.MyWG.add_edges", "pdb.set_trace", "enumerate", "round", "round", "round", "round", "missed_edges.append", "thresh_edges.append"], "function", ["home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.MyWG.calc_adar", "home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.MyWG.calc_wadar", "home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.MyWG.calc_adar", "home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.MyWG.calc_wadar", "home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.MyWG.add_edges"], ["", "def", "calc_adars", "(", "texts", ",", "lang_pairs", ",", "waligns", ",", "target_pair", "=", "(", "\"eng\"", ",", "\"fra\"", ")", ")", ":", "\n", "\t", "cur_e_scores", "=", "{", "}", "\n", "cur_e_wscores", "=", "{", "}", "\n", "new_e_scores", "=", "{", "}", "\n", "new_e_wscores", "=", "{", "}", "\n", "\n", "for", "verse", "in", "tqdm", "(", "texts", "[", "target_pair", "[", "0", "]", "]", ")", ":", "\n", "\t\t", "all_nodes", "=", "[", "]", "\n", "for", "lang", "in", "texts", ":", "\n", "\t\t\t", "if", "verse", "in", "texts", "[", "lang", "]", ":", "\n", "\t\t\t\t", "all_nodes", ".", "extend", "(", "texts", "[", "lang", "]", "[", "verse", "]", ")", "\n", "", "", "G", "=", "MyWG", "(", "all_nodes", ")", "\n", "\n", "missed_edges", "=", "[", "]", "\n", "thresh_edges", "=", "[", "]", "\n", "for", "lp", "in", "waligns", ":", "\n", "\t\t\t", "if", "lp", "not", "in", "lang_pairs", ":", "continue", "\n", "if", "verse", "not", "in", "waligns", "[", "lp", "]", "or", "len", "(", "waligns", "[", "lp", "]", "[", "verse", "]", ")", "==", "0", ":", "continue", "\n", "l1", ",", "l2", "=", "lp", "[", "0", "]", ",", "lp", "[", "1", "]", "\n", "\n", "try", ":", "\n", "\t\t\t\t", "edge_cover", "=", "set", "(", ")", "\n", "for", "alp", "in", "waligns", "[", "lp", "]", "[", "verse", "]", ":", "\n", "\t\t\t\t\t", "edge_cover", ".", "add", "(", "(", "alp", "[", "0", "]", ",", "alp", "[", "1", "]", ")", ")", "\n", "G", ".", "add_edges", "(", "[", "[", "texts", "[", "l1", "]", "[", "verse", "]", "[", "alp", "[", "0", "]", "]", ",", "texts", "[", "l2", "]", "[", "verse", "]", "[", "alp", "[", "1", "]", "]", ",", "alp", "[", "2", "]", "]", "]", ")", "\n", "", "", "except", ":", "\n", "\t\t\t\t", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "# calc score for missed_edges", "\n", "", "if", "lp", "==", "target_pair", ":", "\n", "\t\t\t\t", "for", "i", ",", "w1", "in", "enumerate", "(", "texts", "[", "l1", "]", "[", "verse", "]", ")", ":", "\n", "\t\t\t\t\t", "for", "j", ",", "w2", "in", "enumerate", "(", "texts", "[", "l2", "]", "[", "verse", "]", ")", ":", "\n", "\t\t\t\t\t\t", "if", "(", "i", ",", "j", ")", "not", "in", "edge_cover", ":", "\n", "\t\t\t\t\t\t\t", "missed_edges", ".", "append", "(", "(", "w1", ",", "w2", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t\t", "thresh_edges", ".", "append", "(", "(", "w1", ",", "w2", ")", ")", "\n", "\n", "", "", "", "", "", "cur_e_scores", "[", "verse", "]", "=", "[", "]", "\n", "cur_e_wscores", "[", "verse", "]", "=", "[", "]", "\n", "new_e_scores", "[", "verse", "]", "=", "[", "]", "\n", "new_e_wscores", "[", "verse", "]", "=", "[", "]", "\n", "\n", "adar_scores", "=", "G", ".", "calc_adar", "(", "missed_edges", ")", "\n", "for", "sc", ",", "p", "in", "zip", "(", "adar_scores", ",", "missed_edges", ")", ":", "\n", "\t\t\t", "if", "sc", ">", "0", ":", "\n", "\t\t\t\t", "new_e_scores", "[", "verse", "]", ".", "append", "(", "[", "round", "(", "sc", ",", "3", ")", ",", "p", "]", ")", "\n", "", "", "wadar_scores", "=", "G", ".", "calc_wadar", "(", "missed_edges", ")", "\n", "for", "sc", ",", "p", "in", "zip", "(", "wadar_scores", ",", "missed_edges", ")", ":", "\n", "\t\t\t", "if", "sc", ">", "0", ":", "\n", "\t\t\t\t", "new_e_wscores", "[", "verse", "]", ".", "append", "(", "[", "round", "(", "sc", ",", "3", ")", ",", "p", "]", ")", "\n", "\n", "", "", "th_adar_scores", "=", "G", ".", "calc_adar", "(", "thresh_edges", ")", "\n", "for", "sc", ",", "p", "in", "zip", "(", "th_adar_scores", ",", "thresh_edges", ")", ":", "\n", "\t\t\t", "if", "sc", ">", "0", ":", "\n", "\t\t\t\t", "cur_e_scores", "[", "verse", "]", ".", "append", "(", "[", "round", "(", "sc", ",", "3", ")", ",", "p", "]", ")", "\n", "\n", "", "", "th_wadar_scores", "=", "G", ".", "calc_wadar", "(", "thresh_edges", ")", "\n", "for", "sc", ",", "p", "in", "zip", "(", "th_wadar_scores", ",", "thresh_edges", ")", ":", "\n", "\t\t\t", "if", "sc", ">", "0", ":", "\n", "\t\t\t\t", "cur_e_wscores", "[", "verse", "]", ".", "append", "(", "[", "round", "(", "sc", ",", "3", ")", ",", "p", "]", ")", "\n", "\n", "", "", "cur_e_scores", "[", "verse", "]", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "cur_e_wscores", "[", "verse", "]", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "new_e_scores", "[", "verse", "]", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "new_e_wscores", "[", "verse", "]", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "\n", "", "return", "new_e_scores", ",", "new_e_wscores", ",", "cur_e_scores", ",", "cur_e_wscores", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.add_edges_to_align_argmax": [[191, 225], ["open", "numpy.zeros", "set", "len", "induce_alignments_AdAd.get_alignment_matrix", "range", "len", "f_new_al.write", "len", "len", "f_new_al.write", "range", "sorted", "len", "len", "sorted", "len", "len", "int", "int", "list", "list", "set.add", "[].find", "[].find"], "function", ["home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.get_alignment_matrix"], ["", "def", "add_edges_to_align_argmax", "(", "texts", ",", "waligns", ",", "out_path", "=", "\"\"", ",", "target_pair", "=", "(", "\"eng\"", ",", "\"fra\"", ")", ",", "cur_edges", "=", "None", ",", "new_edges", "=", "None", ")", ":", "\n", "\t", "all_cnt", "=", "[", "0", ",", "0", "]", "\n", "with", "open", "(", "out_path", ",", "\"w\"", ")", "as", "f_new_al", ":", "\n", "\t\t", "for", "verse", "in", "texts", "[", "target_pair", "[", "0", "]", "]", ":", "\n", "\t\t\t", "if", "verse", "not", "in", "texts", "[", "target_pair", "[", "1", "]", "]", ":", "continue", "\n", "\n", "sim", "=", "np", ".", "zeros", "(", "(", "len", "(", "texts", "[", "target_pair", "[", "0", "]", "]", "[", "verse", "]", ")", ",", "len", "(", "texts", "[", "target_pair", "[", "1", "]", "]", "[", "verse", "]", ")", ")", ")", "\n", "\n", "final_aligns", "=", "set", "(", "[", "F\"{p[0]}-{p[1]}\"", "for", "p", "in", "waligns", "[", "target_pair", "]", "[", "verse", "]", "]", ")", "\n", "all_cnt", "[", "0", "]", "+=", "len", "(", "final_aligns", ")", "\n", "\n", "if", "len", "(", "new_edges", "[", "verse", "]", ")", "==", "0", ":", "\n", "\t\t\t\t", "all_cnt", "[", "1", "]", "+=", "len", "(", "final_aligns", ")", "\n", "final_aligns", "=", "\" \"", ".", "join", "(", "sorted", "(", "list", "(", "final_aligns", ")", ")", ")", "\n", "f_new_al", ".", "write", "(", "F\"{verse}\\t{final_aligns}\\n\"", ")", "\n", "continue", "\n", "\n", "", "lens", "=", "[", "len", "(", "target_pair", "[", "0", "]", ")", "+", "1", ",", "len", "(", "target_pair", "[", "1", "]", ")", "+", "1", "]", "\n", "for", "p", "in", "cur_edges", "[", "verse", "]", "+", "new_edges", "[", "verse", "]", ":", "\n", "\t\t\t\t", "e", "=", "(", "int", "(", "p", "[", "1", "]", "[", "0", "]", "[", "lens", "[", "0", "]", ":", "p", "[", "1", "]", "[", "0", "]", "[", "lens", "[", "0", "]", ":", "]", ".", "find", "(", "\":\"", ")", "+", "lens", "[", "0", "]", "]", ")", ",", "int", "(", "p", "[", "1", "]", "[", "1", "]", "[", "lens", "[", "1", "]", ":", "p", "[", "1", "]", "[", "1", "]", "[", "lens", "[", "1", "]", ":", "]", ".", "find", "(", "\":\"", ")", "+", "lens", "[", "1", "]", "]", ")", ")", "\n", "sim", "[", "e", "[", "0", "]", ",", "e", "[", "1", "]", "]", "=", "p", "[", "0", "]", "\n", "\n", "", "fwd", ",", "rev", "=", "get_alignment_matrix", "(", "sim", ")", "\n", "sargmax", "=", "fwd", "*", "rev", "\n", "for", "i", "in", "range", "(", "sim", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t\t\t", "for", "j", "in", "range", "(", "sim", ".", "shape", "[", "1", "]", ")", ":", "\n", "\t\t\t\t\t", "if", "sargmax", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "\t\t\t\t\t\t", "final_aligns", ".", "add", "(", "F\"{i}-{j}\"", ")", "\n", "\n", "", "", "", "all_cnt", "[", "1", "]", "+=", "len", "(", "final_aligns", ")", "\n", "final_aligns", "=", "\" \"", ".", "join", "(", "sorted", "(", "list", "(", "final_aligns", ")", ")", ")", "\n", "f_new_al", ".", "write", "(", "F\"{verse}\\t{final_aligns}\\n\"", ")", "\n", "\n", "", "", "return", "all_cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.main": [[226, 249], ["induce_alignments_AdAd.load_texts_and_alignments", "utils.LOG.info", "utils.LOG.info", "utils.LOG.info", "induce_alignments_AdAd.calc_adars", "os.path.join", "induce_alignments_AdAd.add_edges_to_align_argmax", "os.path.join", "induce_alignments_AdAd.add_edges_to_align_argmax", "utils.load_gold", "list", "pros.keys", "len", "len"], "function", ["home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.load_texts_and_alignments", "home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.calc_adars", "home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.add_edges_to_align_argmax", "home.repos.pwc.inspect_result.cisnlp_graph-align.None.induce_alignments_AdAd.add_edges_to_align_argmax", "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.load_gold"], ["", "def", "main", "(", "args", ")", ":", "\n", "\t", "if", "args", ".", "gold_file", "!=", "\"\"", ":", "\n", "\t\t", "pros", ",", "surs", "=", "load_gold", "(", "args", ".", "gold_file", ")", "\n", "all_verses", "=", "list", "(", "pros", ".", "keys", "(", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "all_verses", "=", "None", "\n", "\n", "# Get languages and initial alignments", "\n", "", "lang_code_map", ",", "langs", ",", "texts", ",", "lang_pairs", ",", "init_aligns", "=", "load_texts_and_alignments", "(", "args", ".", "editions_file", ",", "args", ".", "lang_files_path", ",", "args", ".", "verse_alignments_path", ",", "args", ".", "aligner", ",", "golds", "=", "all_verses", ")", "\n", "target_pair", "=", "(", "lang_code_map", "[", "args", ".", "source_edition", "]", ",", "lang_code_map", "[", "args", ".", "target_edition", "]", ")", "\n", "\n", "# print some info", "\n", "LOG", ".", "info", "(", "f\"Inferring alignments from {args.source_edition} to {args.target_edition}\"", ")", "\n", "LOG", ".", "info", "(", "f\"Number of verses whose alignments will be inferred: {len(all_verses)}\"", ")", "\n", "LOG", ".", "info", "(", "f\"Number of editions to use for the graph algorithms: {len(langs)}\"", ")", "\n", "\n", "new_e_scores", ",", "new_e_wscores", ",", "cur_e_scores", ",", "cur_e_wscores", "=", "calc_adars", "(", "texts", ",", "lang_pairs", ",", "init_aligns", ",", "target_pair", "=", "target_pair", ")", "\n", "\n", "out_adad_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "F\"{target_pair[0]}-{target_pair[1]}_adar.{args.aligner}\"", ")", "\n", "add_edges_to_align_argmax", "(", "texts", ",", "init_aligns", ",", "out_path", "=", "out_adad_file", ",", "target_pair", "=", "target_pair", ",", "cur_edges", "=", "cur_e_scores", ",", "new_edges", "=", "new_e_scores", ")", "\n", "\n", "out_wadad_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "F\"{target_pair[0]}-{target_pair[1]}_wadar.{args.aligner}\"", ")", "\n", "add_edges_to_align_argmax", "(", "texts", ",", "init_aligns", ",", "out_path", "=", "out_wadad_file", ",", "target_pair", "=", "target_pair", ",", "cur_edges", "=", "cur_e_wscores", ",", "new_edges", "=", "new_e_wscores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.get_row_col_editions": [[11, 23], ["row_editions.append", "col_editions.append", "row_editions.append", "col_editions.append"], "function", ["None"], ["def", "get_row_col_editions", "(", "source_edition", ",", "target_edition", ",", "all_editions", "=", "None", ")", ":", "\n", "    ", "row_editions", "=", "[", "]", "\n", "col_editions", "=", "[", "]", "\n", "for", "edition", "in", "all_editions", ":", "\n", "        ", "if", "edition", "!=", "source_edition", "and", "edition", "!=", "target_edition", ":", "\n", "            ", "row_editions", ".", "append", "(", "edition", ")", "\n", "col_editions", ".", "append", "(", "edition", ")", "\n", "\n", "", "", "row_editions", ".", "append", "(", "source_edition", ")", "\n", "col_editions", ".", "append", "(", "target_edition", ")", "\n", "\n", "return", "row_editions", ",", "col_editions", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.get_aligns": [[24, 60], ["x.split", "res.append", "raw_align.split", "x.split", "res.append", "list", "range", "int", "int", "raw_align.split", "alignments[].keys", "align.split", "x.split", "res.append", "int", "int", "int", "raw_align.split", "int", "int", "x.split"], "function", ["None"], ["", "def", "get_aligns", "(", "rf", ",", "cf", ",", "alignments", ")", ":", "\n", "    ", "raw_align", "=", "''", "\n", "\n", "if", "rf", "in", "alignments", "and", "cf", "in", "alignments", "[", "rf", "]", ":", "\n", "        ", "raw_align", "=", "alignments", "[", "rf", "]", "[", "cf", "]", "\n", "alignment_line", "=", "[", "x", ".", "split", "(", "'-'", ")", "for", "x", "in", "raw_align", ".", "split", "(", ")", "]", "\n", "res", "=", "[", "]", "\n", "for", "x", "in", "alignment_line", ":", "\n", "            ", "res", ".", "append", "(", "(", "int", "(", "x", "[", "0", "]", ")", ",", "int", "(", "x", "[", "1", "]", ")", ")", ")", "\n", "", "", "elif", "cf", "in", "alignments", "and", "rf", "in", "alignments", "[", "cf", "]", ":", "# re: aak, ce: aai, ", "\n", "        ", "raw_align", "=", "alignments", "[", "cf", "]", "[", "rf", "]", "\n", "alignment_line", "=", "[", "x", ".", "split", "(", "'-'", ")", "for", "x", "in", "raw_align", ".", "split", "(", ")", "]", "\n", "res", "=", "[", "]", "\n", "for", "x", "in", "alignment_line", ":", "\n", "            ", "res", ".", "append", "(", "(", "int", "(", "x", "[", "1", "]", ")", ",", "int", "(", "x", "[", "0", "]", ")", ")", ")", "\n", "", "", "elif", "rf", "in", "alignments", "and", "rf", "==", "cf", ":", "# if source and target are the same", "\n", "        ", "keys", "=", "list", "(", "alignments", "[", "rf", "]", ".", "keys", "(", ")", ")", "\n", "max_count", "=", "0", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "align", "=", "alignments", "[", "rf", "]", "[", "key", "]", "\n", "for", "x", "in", "align", ".", "split", "(", ")", ":", "\n", "                ", "count", "=", "int", "(", "x", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", "\n", "if", "count", ">", "max_count", ":", "\n", "                    ", "max_count", "=", "count", "\n", "", "", "", "raw_align", "=", "\"0-0\"", "\n", "for", "i", "in", "range", "(", "1", ",", "max_count", ")", ":", "\n", "            ", "raw_align", "+=", "f\" {i}-{i}\"", "\n", "\n", "", "alignment_line", "=", "[", "x", ".", "split", "(", "'-'", ")", "for", "x", "in", "raw_align", ".", "split", "(", ")", "]", "\n", "res", "=", "[", "]", "\n", "for", "x", "in", "alignment_line", ":", "\n", "            ", "res", ".", "append", "(", "(", "int", "(", "x", "[", "0", "]", ")", ",", "int", "(", "x", "[", "1", "]", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.add_aligns": [[61, 74], ["aligns_dict[].append", "aligns_dict[].append", "aligns_dict[].append", "[].append", "str", "str"], "function", ["None"], ["", "def", "add_aligns", "(", "aligns", ",", "aligns_dict", ",", "token_counts", ",", "re", ",", "ce", ",", "existing_items", ")", ":", "\n", "    ", "for", "align", "in", "aligns", ":", "\n", "\n", "        ", "aligns_dict", "[", "'userID'", "]", ".", "append", "(", "re", "+", "str", "(", "align", "[", "0", "]", ")", ")", "\n", "aligns_dict", "[", "'itemID'", "]", ".", "append", "(", "ce", "+", "str", "(", "align", "[", "1", "]", ")", ")", "\n", "aligns_dict", "[", "'rating'", "]", ".", "append", "(", "3", ")", "\n", "\n", "if", "align", "[", "0", "]", ">", "token_counts", "[", "re", "]", ":", "\n", "            ", "token_counts", "[", "re", "]", "=", "align", "[", "0", "]", "\n", "", "if", "align", "[", "1", "]", ">", "token_counts", "[", "ce", "]", ":", "\n", "            ", "token_counts", "[", "ce", "]", "=", "align", "[", "1", "]", "\n", "\n", "", "existing_items", "[", "re", "]", "[", "ce", "]", ".", "append", "(", "f\"{align[0]},{align[1]}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.add_negative_samples": [[75, 97], ["tuple", "random.randint", "random.randint", "aligns_dict[].append", "aligns_dict[].append", "aligns_dict[].append", "aligns_dict[].append", "aligns_dict[].append", "aligns_dict[].append", "item.split", "int", "int", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "str", "str", "str", "str"], "function", ["None"], ["", "", "def", "add_negative_samples", "(", "aligns_dict", ",", "existing_items", ",", "token_counts", ",", "verse_id", ")", ":", "\n", "    ", "for", "re", "in", "existing_items", ":", "\n", "        ", "if", "token_counts", "[", "re", "]", "<", "2", ":", "\n", "            ", "continue", "\n", "", "for", "ce", "in", "existing_items", "[", "re", "]", ":", "\n", "            ", "if", "token_counts", "[", "ce", "]", "<", "2", ":", "\n", "                ", "continue", "\n", "", "for", "item", "in", "existing_items", "[", "re", "]", "[", "ce", "]", ":", "\n", "                ", "i", ",", "j", "=", "tuple", "(", "item", ".", "split", "(", "\",\"", ")", ")", "\n", "i", ",", "j", "=", "(", "int", "(", "i", ")", ",", "int", "(", "j", ")", ")", "\n", "jp", "=", "random", ".", "randint", "(", "math", ".", "ceil", "(", "j", "+", "1", ")", ",", "math", ".", "ceil", "(", "j", "+", "token_counts", "[", "ce", "]", ")", ")", "\n", "ip", "=", "random", ".", "randint", "(", "math", ".", "ceil", "(", "i", "+", "1", ")", ",", "math", ".", "ceil", "(", "i", "+", "token_counts", "[", "re", "]", ")", ")", "\n", "\n", "jp", "%=", "(", "token_counts", "[", "ce", "]", "+", "1", ")", "\n", "aligns_dict", "[", "'userID'", "]", ".", "append", "(", "re", "+", "str", "(", "i", ")", ")", "\n", "aligns_dict", "[", "'itemID'", "]", ".", "append", "(", "ce", "+", "str", "(", "jp", ")", ")", "\n", "aligns_dict", "[", "'rating'", "]", ".", "append", "(", "1", ")", "\n", "\n", "ip", "%=", "(", "token_counts", "[", "re", "]", "+", "1", ")", "\n", "aligns_dict", "[", "'userID'", "]", ".", "append", "(", "re", "+", "str", "(", "ip", ")", ")", "\n", "aligns_dict", "[", "'itemID'", "]", ".", "append", "(", "ce", "+", "str", "(", "j", ")", ")", "\n", "aligns_dict", "[", "'rating'", "]", ".", "append", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.get_alignments_df": [[98, 119], ["enumerate", "induce_alignments_NMF.add_negative_samples", "pandas.DataFrame", "utils.setup_dict_entry", "induce_alignments_NMF.get_aligns", "induce_alignments_NMF.add_aligns"], "function", ["home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.add_negative_samples", "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.setup_dict_entry", "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.get_aligns", "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.add_aligns"], ["", "", "", "", "def", "get_alignments_df", "(", "row_editions", ",", "col_editions", ",", "verse_alignments", ",", "\n", "source_edition", ",", "target_edition", ",", "verse_id", ")", ":", "#TODO can be improved a lot", "\n", "    ", "token_counts", "=", "{", "}", "\n", "existing_items", "=", "{", "}", "\n", "aligns_dict", "=", "{", "'itemID'", ":", "[", "]", ",", "'userID'", ":", "[", "]", ",", "'rating'", ":", "[", "]", "}", "\n", "for", "no", ",", "re", "in", "enumerate", "(", "row_editions", ")", ":", "\n", "        ", "token_counts", "[", "re", "]", "=", "0", "\n", "existing_items", "[", "re", "]", "=", "{", "}", "\n", "\n", "for", "ce", "in", "col_editions", ":", "\n", "\n", "            ", "setup_dict_entry", "(", "token_counts", ",", "ce", ",", "0", ")", "\n", "existing_items", "[", "re", "]", "[", "ce", "]", "=", "[", "]", "\n", "aligns", "=", "get_aligns", "(", "re", ",", "ce", ",", "verse_alignments", ")", "\n", "\n", "if", "not", "aligns", "is", "None", ":", "\n", "                ", "add_aligns", "(", "aligns", ",", "aligns_dict", ",", "token_counts", ",", "re", ",", "ce", ",", "existing_items", ")", "\n", "\n", "", "", "", "add_negative_samples", "(", "aligns_dict", ",", "existing_items", ",", "token_counts", ",", "verse_id", ")", "\n", "\n", "return", "pd", ".", "DataFrame", "(", "aligns_dict", ")", ",", "token_counts", "[", "source_edition", "]", ",", "token_counts", "[", "target_edition", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.iter_max": [[120, 150], ["numpy.zeros", "numpy.eye", "numpy.eye", "backward.transpose", "min", "numpy.array_equal", "sim_matrix.argmax", "sim_matrix.argmax", "numpy.tile().clip", "numpy.tile().clip", "[].transpose", "mask_x.sum", "mask_y.sum", "numpy.eye", "numpy.tile", "numpy.tile", "new_sim.argmax", "numpy.eye", "inter.sum", "inter.sum", "new_sim.argmax"], "function", ["None"], ["", "def", "iter_max", "(", "sim_matrix", ":", "np", ".", "ndarray", ",", "max_count", ":", "int", "=", "2", ",", "alpha_ratio", "=", "0.7", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "m", ",", "n", "=", "sim_matrix", ".", "shape", "\n", "forward", "=", "np", ".", "eye", "(", "n", ")", "[", "sim_matrix", ".", "argmax", "(", "axis", "=", "1", ")", "]", "# m x n", "\n", "backward", "=", "np", ".", "eye", "(", "m", ")", "[", "sim_matrix", ".", "argmax", "(", "axis", "=", "0", ")", "]", "# n x m", "\n", "inter", "=", "forward", "*", "backward", ".", "transpose", "(", ")", "\n", "\n", "if", "min", "(", "m", ",", "n", ")", "<=", "2", ":", "\n", "        ", "return", "inter", "\n", "\n", "", "new_inter", "=", "np", ".", "zeros", "(", "(", "m", ",", "n", ")", ")", "\n", "count", "=", "1", "\n", "while", "count", "<", "max_count", ":", "\n", "        ", "mask_x", "=", "1.0", "-", "np", ".", "tile", "(", "inter", ".", "sum", "(", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", ",", "(", "1", ",", "n", ")", ")", ".", "clip", "(", "0.0", ",", "1.0", ")", "\n", "mask_y", "=", "1.0", "-", "np", ".", "tile", "(", "inter", ".", "sum", "(", "0", ")", "[", "np", ".", "newaxis", ",", ":", "]", ",", "(", "m", ",", "1", ")", ")", ".", "clip", "(", "0.0", ",", "1.0", ")", "\n", "mask", "=", "(", "(", "alpha_ratio", "*", "mask_x", ")", "+", "(", "alpha_ratio", "*", "mask_y", ")", ")", ".", "clip", "(", "0.0", ",", "1.0", ")", "\n", "mask_zeros", "=", "1.0", "-", "(", "(", "1.0", "-", "mask_x", ")", "*", "(", "1.0", "-", "mask_y", ")", ")", "\n", "if", "mask_x", ".", "sum", "(", ")", "<", "1.0", "or", "mask_y", ".", "sum", "(", ")", "<", "1.0", ":", "\n", "            ", "mask", "*=", "0.0", "\n", "mask_zeros", "*=", "0.0", "\n", "\n", "", "new_sim", "=", "sim_matrix", "*", "mask", "\n", "fwd", "=", "np", ".", "eye", "(", "n", ")", "[", "new_sim", ".", "argmax", "(", "axis", "=", "1", ")", "]", "*", "mask_zeros", "\n", "bac", "=", "np", ".", "eye", "(", "m", ")", "[", "new_sim", ".", "argmax", "(", "axis", "=", "0", ")", "]", ".", "transpose", "(", ")", "*", "mask_zeros", "\n", "new_inter", "=", "fwd", "*", "bac", "\n", "\n", "if", "np", ".", "array_equal", "(", "inter", "+", "new_inter", ",", "inter", ")", ":", "\n", "            ", "break", "\n", "", "inter", "=", "inter", "+", "new_inter", "\n", "count", "+=", "1", "\n", "", "return", "inter", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.get_itermax_predictions": [[151, 168], ["len", "len", "numpy.ndarray", "induce_alignments_NMF.iter_max", "range", "range", "res.append"], "function", ["home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.iter_max"], ["", "def", "get_itermax_predictions", "(", "raw_s_predictions", ",", "max_count", "=", "2", ",", "alpha_ratio", "=", "0.9", ")", ":", "\n", "    ", "rows", "=", "len", "(", "raw_s_predictions", ")", "\n", "cols", "=", "len", "(", "raw_s_predictions", "[", "0", "]", ")", "\n", "matrix", "=", "np", ".", "ndarray", "(", "shape", "=", "(", "rows", ",", "cols", ")", ",", "dtype", "=", "float", ")", "\n", "\n", "for", "i", "in", "raw_s_predictions", ":", "\n", "        ", "for", "j", ",", "s", "in", "raw_s_predictions", "[", "i", "]", ":", "\n", "            ", "matrix", "[", "i", ",", "j", "]", "=", "s", "\n", "\n", "", "", "itermax_res", "=", "iter_max", "(", "matrix", ",", "max_count", ",", "alpha_ratio", ")", "\n", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "rows", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "cols", ")", ":", "\n", "            ", "if", "itermax_res", "[", "i", ",", "j", "]", "!=", "0", ":", "\n", "                ", "res", ".", "append", "(", "(", "i", ",", "j", ")", ")", "\n", "\n", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.predict_alignments": [[169, 187], ["range", "induce_alignments_NMF.get_itermax_predictions", "range", "algo.predict", "utils.setup_dict_entry", "utils.setup_dict_entry", "raw_s_predictions[].append", "raw_t_predictions[].append", "str", "str"], "function", ["home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.get_itermax_predictions", "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.setup_dict_entry", "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.setup_dict_entry"], ["", "def", "predict_alignments", "(", "algo", ",", "source_edition", ",", "target_edition", ")", ":", "\n", "    ", "raw_s_predictions", "=", "{", "}", "\n", "raw_t_predictions", "=", "{", "}", "\n", "\n", "for", "i", "in", "range", "(", "algo", ".", "s_tok_count", "+", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "algo", ".", "t_tok_count", "+", "1", ")", ":", "\n", "            ", "pred", "=", "algo", ".", "predict", "(", "source_edition", "+", "str", "(", "i", ")", ",", "target_edition", "+", "str", "(", "j", ")", ")", "\n", "\n", "setup_dict_entry", "(", "raw_s_predictions", ",", "i", ",", "[", "]", ")", "\n", "setup_dict_entry", "(", "raw_t_predictions", ",", "j", ",", "[", "]", ")", "\n", "\n", "raw_s_predictions", "[", "i", "]", ".", "append", "(", "(", "j", ",", "pred", ".", "est", ")", ")", "\n", "raw_t_predictions", "[", "j", "]", ".", "append", "(", "(", "i", ",", "pred", ".", "est", ")", ")", "\n", "\n", "# get predicted alignments from argmax (max_count=1 means argmax)", "\n", "", "", "res", "=", "get_itermax_predictions", "(", "raw_s_predictions", ",", "max_count", "=", "1", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.train_model": [[188, 202], ["surprise.NMF", "surprise.Reader", "surprise.Dataset.load_from_df", "Dataset.load_from_df.build_full_trainset", "surprise.NMF.fit"], "function", ["None"], ["", "def", "train_model", "(", "df", ",", "s_tok_count", ",", "t_tok_count", ",", "row_editions", ",", "col_editions", ")", ":", "\n", "    ", "algo", "=", "NMF", "(", ")", "\n", "reader", "=", "Reader", "(", "rating_scale", "=", "(", "1", ",", "3", ")", ")", "\n", "data", "=", "Dataset", ".", "load_from_df", "(", "df", "[", "[", "'userID'", ",", "'itemID'", ",", "'rating'", "]", "]", ",", "reader", ")", "\n", "trainset", "=", "data", ".", "build_full_trainset", "(", ")", "\n", "algo", ".", "fit", "(", "trainset", ")", "\n", "\n", "algo", ".", "s_tok_count", "=", "s_tok_count", "\n", "algo", ".", "t_tok_count", "=", "t_tok_count", "\n", "algo", ".", "row_editions", "=", "row_editions", "\n", "algo", ".", "col_editions", "=", "col_editions", "\n", "algo", ".", "df", "=", "df", "\n", "\n", "return", "algo", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.get_induced_alignments": [[203, 227], ["utils.get_verse_alignments", "utils.get_verse_alignments", "induce_alignments_NMF.get_row_col_editions", "induce_alignments_NMF.get_alignments_df", "induce_alignments_NMF.train_model", "induce_alignments_NMF.predict_alignments", "cnt.get_lock", "utils.LOG.info", "len"], "function", ["home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.get_verse_alignments", "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.get_verse_alignments", "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.get_row_col_editions", "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.get_alignments_df", "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.train_model", "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.predict_alignments"], ["", "def", "get_induced_alignments", "(", "source_edition", ",", "target_edition", ",", "verse_alignments_path", ",", "verse_id", ",", "all_editions", ")", ":", "\n", "\n", "    ", "verse_alignments", "=", "get_verse_alignments", "(", "verse_alignments_path", ",", "verse_id", ",", "editions", "=", "all_editions", ")", "\n", "\n", "# this is only for saving the gdfa alignments from source to target for the evauation", "\n", "verse_alignments_gdfa", "=", "get_verse_alignments", "(", "verse_alignments_path", ",", "verse_id", ",", "editions", "=", "[", "source_edition", ",", "target_edition", "]", ",", "gdfa", "=", "True", ")", "\n", "\n", "###  source -> row, target-> col###", "\n", "row_editions", ",", "col_editions", "=", "get_row_col_editions", "(", "source_edition", ",", "target_edition", ",", "all_editions", ")", "\n", "#itemid -> col, user -> row", "\n", "df", ",", "s_tok_count", ",", "t_tok_count", "=", "get_alignments_df", "(", "row_editions", ",", "col_editions", ",", "verse_alignments", ",", "source_edition", ",", "target_edition", ",", "verse_id", ")", "\n", "\n", "algo", "=", "train_model", "(", "df", ",", "s_tok_count", ",", "t_tok_count", ",", "row_editions", ",", "col_editions", ")", "\n", "\n", "predicted_alignments", "=", "predict_alignments", "(", "algo", ",", "source_edition", ",", "target_edition", ")", "\n", "base_inter_alignments", "=", "verse_alignments", "[", "source_edition", "]", "[", "target_edition", "]", "\n", "base_gdfa_alignments", "=", "verse_alignments_gdfa", "[", "source_edition", "]", "[", "target_edition", "]", "\n", "\n", "with", "cnt", ".", "get_lock", "(", ")", ":", "\n", "        ", "cnt", ".", "value", "+=", "1", "\n", "if", "cnt", ".", "value", "%", "20", "==", "0", ":", "\n", "            ", "LOG", ".", "info", "(", "f\"Done inferring alignments for {cnt.value} verses\"", ")", "\n", "\n", "", "", "return", "predicted_alignments", ",", "base_inter_alignments", ",", "base_gdfa_alignments", ",", "len", "(", "algo", ".", "col_editions", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.init_globals": [[229, 232], ["None"], "function", ["None"], ["", "def", "init_globals", "(", "counter", ")", ":", "\n", "    ", "global", "cnt", "\n", "cnt", "=", "counter", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.induce_alignments_NMF.main": [[233, 281], ["random.seed", "utils.load_gold", "list", "utils.load_editions", "utils.LOG.info", "utils.LOG.info", "utils.LOG.info", "utils.LOG.info", "multiprocessing.Value", "open", "open", "open", "enumerate", "open.close", "open.close", "open.close", "pros.keys", "starmap_args.append", "multiprocessing.Pool", "p.starmap", "os.path.join", "os.path.join", "os.path.join", "open.write", "open.write", "open.write", "args.source_edition.replace", "args.target_edition.replace", "len", "len", "args.source_edition.replace", "args.target_edition.replace", "len", "args.source_edition.replace", "args.target_edition.replace", "len", "len", "len", "inter_aligns.strip", "gdfa_aligns.strip"], "function", ["home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.load_gold", "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.load_editions"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Get verse_ids", "\n", "pros", ",", "surs", "=", "load_gold", "(", "args", ".", "gold_file", ")", "\n", "all_verses", "=", "list", "(", "pros", ".", "keys", "(", ")", ")", "\n", "all_verses", "=", "all_verses", "\n", "\n", "# Get languages and editions", "\n", "editions", ",", "langs", "=", "load_editions", "(", "args", ".", "editions_file", ")", "\n", "all_editions", "=", "[", "editions", "[", "lang", "]", "for", "lang", "in", "langs", "]", "\n", "\n", "# print some info", "\n", "LOG", ".", "info", "(", "f\"Inferring alignments from {args.source_edition} to {args.target_edition}\"", ")", "\n", "LOG", ".", "info", "(", "f\"Number of verses whose alignments will be inferred: {len(all_verses)}\"", ")", "\n", "LOG", ".", "info", "(", "f\"Number of editions to use for the graph algorithms: {len(all_editions)}\"", ")", "\n", "LOG", ".", "info", "(", "f\"Number of cores to be used for processing: {args.core_count}\"", ")", "\n", "\n", "# Prepare arguments for parallel processing", "\n", "starmap_args", "=", "[", "]", "\n", "for", "verse_id", "in", "all_verses", ":", "\n", "# aligns_predicted, used_edition_count = get_induced_alignments(args.source_edition, args.target_edition, args.verse_alignments, verse_id, all_editions)", "\n", "        ", "starmap_args", ".", "append", "(", "(", "args", ".", "source_edition", ",", "args", ".", "target_edition", ",", "args", ".", "verse_alignments_path", ",", "verse_id", ",", "all_editions", ")", ")", "\n", "\n", "# get predicted alignments using parallel processing", "\n", "", "cnt", "=", "Value", "(", "'i'", ",", "0", ")", "\n", "with", "Pool", "(", "processes", "=", "args", ".", "core_count", ",", "initializer", "=", "init_globals", ",", "initargs", "=", "(", "cnt", ",", ")", ")", "as", "p", ":", "\n", "        ", "all_alignments", "=", "p", ".", "starmap", "(", "get_induced_alignments", ",", "starmap_args", ")", "\n", "\n", "", "out_NMF_f_name", "=", "f\"predicted_alignments_from_{args.source_edition.replace('-x-bible','')}_to_{args.target_edition.replace('-x-bible','')}_with_max_{len(all_editions)}_editions_for_{len(all_verses)}_verses_NMF.txt\"", "\n", "out_NMF_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "out_NMF_f_name", ")", ",", "'w'", ")", "\n", "out_inter_f_name", "=", "f\"intersection_alignments_from_{args.source_edition.replace('-x-bible','')}_to_{args.target_edition.replace('-x-bible','')}_for_{len(all_verses)}_verses.txt\"", "\n", "out_inter_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "out_inter_f_name", ")", ",", "'w'", ")", "\n", "out_gdfa_f_name", "=", "f\"gdfa_alignments_from_{args.source_edition.replace('-x-bible','')}_to_{args.target_edition.replace('-x-bible','')}_for_{len(all_verses)}_verses.txt\"", "\n", "out_gdfa_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "out_gdfa_f_name", ")", ",", "'w'", ")", "\n", "\n", "for", "id", ",", "verse_id", "in", "enumerate", "(", "all_verses", ")", ":", "\n", "        ", "aligns_predicted", ",", "inter_aligns", ",", "gdfa_aligns", ",", "used_edition_count", "=", "all_alignments", "[", "id", "]", "\n", "\n", "# convert predicted alignments to string and write to a file", "\n", "aligns_predicted", "=", "' '", ".", "join", "(", "[", "f\"{align[0]}-{align[1]}\"", "for", "align", "in", "aligns_predicted", "]", ")", "\n", "out_NMF_file", ".", "write", "(", "f\"{verse_id}\\t{aligns_predicted}\\n\"", ")", "\n", "out_inter_file", ".", "write", "(", "f\"{verse_id}\\t{inter_aligns.strip()}\\n\"", ")", "\n", "out_gdfa_file", ".", "write", "(", "f\"{verse_id}\\t{gdfa_aligns.strip()}\\n\"", ")", "\n", "\n", "", "out_NMF_file", ".", "close", "(", ")", "\n", "out_inter_file", ".", "close", "(", ")", "\n", "out_gdfa_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.evaluate_induced_alignments.main": [[5, 56], ["utils.load_gold", "os.path.basename", "utils.setup_dict_entry", "open", "open", "open", "f_pred.read().splitlines", "f_inter.read().splitlines", "f_gdfa.read().splitlines", "enumerate", "open", "zip", "line_pred.split", "line_inter.split", "line_gdfa.split", "set", "set", "set", "set.union", "set.union", "utils.calc_and_update_score", "utils.calc_and_update_score", "utils.calc_and_update_score", "utils.calc_and_update_score", "utils.calc_and_update_score", "os.path.join", "f_out.write", "print", "f_pred.read", "f_inter.read", "f_gdfa.read", "set.split", "set.split", "set.split"], "function", ["home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.load_gold", "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.setup_dict_entry", "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.calc_and_update_score", "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.calc_and_update_score", "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.calc_and_update_score", "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.calc_and_update_score", "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.calc_and_update_score"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "pros", ",", "surs", "=", "load_gold", "(", "args", ".", "gold_file", ")", "\n", "\n", "save_name", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "predicted_alignments_file", ")", "\n", "save_name", "=", "save_name", "[", ":", "-", "4", "]", "+", "\"_results.txt\"", "\n", "\n", "result_names", "=", "[", "\n", "\"base_intersection\"", ",", "\n", "\"base_gdfa\"", ",", "\n", "\"NMF\"", ",", "\n", "\"NMF + intersection\"", ",", "\n", "\"NMF + gdfa\"", "\n", "]", "\n", "\n", "results_all", "=", "{", "}", "\n", "for", "name", "in", "result_names", ":", "\n", "        ", "setup_dict_entry", "(", "results_all", ",", "name", ",", "{", "\"p_hit_count\"", ":", "0", ",", "\"s_hit_count\"", ":", "0", ",", "\"total_hit_count\"", ":", "0", ",", "\"gold_s_hit_count\"", ":", "0", ",", "\"prec\"", ":", "0", ",", "\"rec\"", ":", "0", ",", "\"f1\"", ":", "0", ",", "\"aer\"", ":", "0", "}", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "predicted_alignments_file", ",", "'r'", ")", "as", "f_pred", ",", "open", "(", "args", ".", "intersection_alignments_file", ",", "'r'", ")", "as", "f_inter", ",", "open", "(", "args", ".", "gdfa_alignments_file", ",", "'r'", ")", "as", "f_gdfa", ":", "\n", "\n", "        ", "lines_predicted", "=", "f_pred", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "lines_intersection", "=", "f_inter", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "lines_gdfa", "=", "f_gdfa", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "for", "no", ",", "(", "line_pred", ",", "line_inter", ",", "line_gdfa", ")", "in", "enumerate", "(", "zip", "(", "lines_predicted", ",", "lines_intersection", ",", "lines_gdfa", ")", ")", ":", "\n", "            ", "verse_id", ",", "aligns_predicted", "=", "line_pred", ".", "split", "(", "'\\t'", ")", "\n", "_", ",", "aligns_intersection", "=", "line_inter", ".", "split", "(", "'\\t'", ")", "\n", "_", ",", "aligns_gdfa", "=", "line_gdfa", ".", "split", "(", "'\\t'", ")", "\n", "\n", "# Convert string alignments to set", "\n", "aligns_predicted", "=", "set", "(", "aligns_predicted", ".", "split", "(", "' '", ")", ")", "\n", "aligns_intersection", "=", "set", "(", "aligns_intersection", ".", "split", "(", "' '", ")", ")", "\n", "aligns_gdfa", "=", "set", "(", "aligns_gdfa", ".", "split", "(", "' '", ")", ")", "\n", "\n", "# combine base alignments with predictions", "\n", "aligns_NMF_plus_intersection", "=", "aligns_predicted", ".", "union", "(", "aligns_intersection", ")", "\n", "aligns_NMF_plus_gdfa", "=", "aligns_predicted", ".", "union", "(", "aligns_gdfa", ")", "\n", "\n", "# update results for all alignments", "\n", "calc_and_update_score", "(", "aligns_intersection", ",", "pros", "[", "verse_id", "]", ",", "surs", "[", "verse_id", "]", ",", "results_all", "[", "\"base_intersection\"", "]", ")", "\n", "calc_and_update_score", "(", "aligns_gdfa", ",", "pros", "[", "verse_id", "]", ",", "surs", "[", "verse_id", "]", ",", "results_all", "[", "\"base_gdfa\"", "]", ")", "\n", "calc_and_update_score", "(", "aligns_predicted", ",", "pros", "[", "verse_id", "]", ",", "surs", "[", "verse_id", "]", ",", "results_all", "[", "\"NMF\"", "]", ")", "\n", "calc_and_update_score", "(", "aligns_NMF_plus_intersection", ",", "pros", "[", "verse_id", "]", ",", "surs", "[", "verse_id", "]", ",", "results_all", "[", "\"NMF + intersection\"", "]", ")", "\n", "calc_and_update_score", "(", "aligns_NMF_plus_gdfa", ",", "pros", "[", "verse_id", "]", ",", "surs", "[", "verse_id", "]", ",", "results_all", "[", "\"NMF + gdfa\"", "]", ")", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "save_name", ")", ",", "'w'", ")", "as", "f_out", ":", "\n", "        ", "for", "i", "in", "results_all", ":", "\n", "            ", "f_out", ".", "write", "(", "f'----{i}----\\nPrecision: {results_all[i][\"prec\"]}\\nRecall: {results_all[i][\"rec\"]}\\nF1: {results_all[i][\"f1\"]}\\nAER: {results_all[i][\"aer\"]}\\nHits: {results_all[i][\"total_hit_count\"]}\\n\\n'", ")", "\n", "print", "(", "f'----{i}----\\nPrecision: {results_all[i][\"prec\"]}\\nRecall: {results_all[i][\"rec\"]}\\nF1: {results_all[i][\"f1\"]}\\nAER: {results_all[i][\"aer\"]}\\nHits: {results_all[i][\"total_hit_count\"]}\\n\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.get_verse_alignments": [[4, 25], ["os.path.exists", "LOG.info", "LOG.info", "open", "tuple", "line.split", "utils.setup_dict_entry"], "function", ["home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.setup_dict_entry"], ["def", "get_verse_alignments", "(", "verse_alignments_path", ",", "verse_id", ",", "editions", "=", "None", ",", "gdfa", "=", "False", ")", ":", "\n", "\n", "    ", "f_path", "=", "verse_alignments_path", "+", "f\"/{verse_id}\"", "\n", "if", "gdfa", ":", "\n", "        ", "f_path", "+=", "\"_gdfa.txt\"", "\n", "", "else", ":", "\n", "        ", "f_path", "+=", "\"_inter.txt\"", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "f_path", ")", ":", "\n", "        ", "LOG", ".", "info", "(", "f_path", ")", "\n", "LOG", ".", "info", "(", "f\"=================================={verse_id} dos not exist==================================\"", ")", "\n", "return", "None", "\n", "\n", "", "res", "=", "{", "}", "\n", "with", "open", "(", "f_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "s_file", ",", "t_file", ",", "aligns", "=", "tuple", "(", "line", ".", "split", "(", "'\\t'", ")", ")", "\n", "if", "(", "editions", "==", "None", ")", "or", "(", "s_file", "in", "editions", "and", "t_file", "in", "editions", ")", ":", "\n", "            \t", "setup_dict_entry", "(", "res", ",", "s_file", ",", "{", "}", ")", "\n", "res", "[", "s_file", "]", "[", "t_file", "]", "=", "aligns", "\n", "", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.calc_and_update_score": [[26, 68], ["len", "len", "len", "len", "round", "round", "round", "round", "len", "type", "set", "set.split", "max", "max"], "function", ["None"], ["", "def", "calc_and_update_score", "(", "aligns", ",", "pros", ",", "surs", ",", "results", ")", ":", "\n", "    ", "'''\n    aligns: predicted alignments to be evaluated, can be:\n        - string, eg \"1-2 3-7 5-3\"\n        - set or list of strings, eg {'1-2', '3-7', '5-3'}\n    pros: porbable alignments from gold alignments file (shown with 'p' instead of '-' in the gold file)\n        - set of strings, eg {'1-2', '3-7', '5-3'}\n    surs: sure alignments from the fold file \n        - set of strings, eg {'1-2', '3-7', '5-3'}\n    results: a dictinary to be updated that contains the following keys:\n        - p_hit_count\n        - s_hit_count\n        - total_hit_count\n        - gold_s_hit_count\n        - prec\n        - rec\n        - f1\n        - aer\n    '''", "\n", "\n", "if", "len", "(", "aligns", ")", "==", "0", ":", "return", "None", "\n", "\n", "# match the type of 'aligns' to gold alignments, i.e. set of strings", "\n", "if", "type", "(", "aligns", ")", "==", "str", ":", "\n", "        ", "aligns", "=", "set", "(", "aligns", ".", "split", "(", "' '", ")", ")", "\n", "\n", "# calculate # of hits", "\n", "", "p_hit", "=", "len", "(", "aligns", "&", "pros", ")", "\n", "s_hit", "=", "len", "(", "aligns", "&", "surs", ")", "\n", "total_hit", "=", "len", "(", "aligns", ")", "\n", "\n", "# Update hit counts", "\n", "results", "[", "\"p_hit_count\"", "]", "+=", "p_hit", "\n", "results", "[", "\"s_hit_count\"", "]", "+=", "s_hit", "\n", "results", "[", "\"total_hit_count\"", "]", "+=", "total_hit", "\n", "results", "[", "\"gold_s_hit_count\"", "]", "+=", "len", "(", "surs", ")", "\n", "\n", "# Update metrics", "\n", "results", "[", "\"prec\"", "]", "=", "round", "(", "results", "[", "\"p_hit_count\"", "]", "/", "max", "(", "results", "[", "\"total_hit_count\"", "]", ",", "0.01", ")", ",", "3", ")", "\n", "results", "[", "\"rec\"", "]", "=", "round", "(", "results", "[", "\"s_hit_count\"", "]", "/", "results", "[", "\"gold_s_hit_count\"", "]", ",", "3", ")", "\n", "results", "[", "\"f1\"", "]", "=", "round", "(", "2.", "*", "results", "[", "\"prec\"", "]", "*", "results", "[", "\"rec\"", "]", "/", "max", "(", "(", "results", "[", "\"prec\"", "]", "+", "results", "[", "\"rec\"", "]", ")", ",", "0.01", ")", ",", "3", ")", "\n", "results", "[", "\"aer\"", "]", "=", "round", "(", "1", "-", "(", "results", "[", "\"s_hit_count\"", "]", "+", "results", "[", "\"p_hit_count\"", "]", ")", "/", "(", "results", "[", "\"total_hit_count\"", "]", "+", "results", "[", "\"gold_s_hit_count\"", "]", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.load_editions": [[69, 87], ["open", "f_lang_list.read().splitlines", "line.split", "langs.append", "f_lang_list.read"], "function", ["None"], ["", "def", "load_editions", "(", "editions_file", ")", ":", "\n", "    ", "'''\n    'editions_file' is a .txt file. Each line contains one language code (e.g. spa3)\n    and name of the edition (e.g. spa-x-bible-newworld) separated by tab. \n    Language codes are unique for each edition so that different editions from one language\n    can be used if desired.\n    Other columns are discarded if there are any.\n    '''", "\n", "\n", "editions", "=", "{", "}", "\n", "langs", "=", "[", "]", "\n", "with", "open", "(", "editions_file", ")", "as", "f_lang_list", ":", "\n", "        ", "lines", "=", "f_lang_list", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "comps", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "editions", "[", "comps", "[", "0", "]", "]", "=", "comps", "[", "1", "]", "\n", "langs", ".", "append", "(", "comps", "[", "0", "]", ")", "\n", "", "", "return", "editions", ",", "langs", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.load_gold": [[88, 106], ["open", "line.strip().split.strip().split", "line[].split", "set", "set", "line.strip().split.strip", "x.replace"], "function", ["None"], ["", "def", "load_gold", "(", "g_path", ")", ":", "\n", "    ", "'''\n    loads gold alignments from the specified file as a dictionary.\n    keys are the verse ids and values are alignments stored as sets of strings.\n    '''", "\n", "\n", "gold_f", "=", "open", "(", "g_path", ",", "\"r\"", ")", "\n", "pros", "=", "{", "}", "\n", "surs", "=", "{", "}", "\n", "\n", "for", "line", "in", "gold_f", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "line", "[", "1", "]", "=", "line", "[", "1", "]", ".", "split", "(", ")", "\n", "\n", "pros", "[", "line", "[", "0", "]", "]", "=", "set", "(", "[", "x", ".", "replace", "(", "\"p\"", ",", "\"-\"", ")", "for", "x", "in", "line", "[", "1", "]", "]", ")", "\n", "surs", "[", "line", "[", "0", "]", "]", "=", "set", "(", "[", "x", "for", "x", "in", "line", "[", "1", "]", "if", "\"p\"", "not", "in", "x", "]", ")", "\n", "\n", "", "return", "pros", ",", "surs", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.setup_dict_entry": [[107, 110], ["None"], "function", ["None"], ["", "def", "setup_dict_entry", "(", "_dict", ",", "entry", ",", "val", ")", ":", "\n", "\t", "if", "entry", "not", "in", "_dict", ":", "\n", "\t\t", "_dict", "[", "entry", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.cisnlp_graph-align.NMF.utils.get_logger": [[111, 129], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["", "", "def", "get_logger", "(", "name", ",", "filename", ",", "level", "=", "logging", ".", "DEBUG", ")", ":", "\n", "\t", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "level", ")", "\n", "\n", "# fh = logging.FileHandler(filename)", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "\n", "# fh.setLevel(level)", "\n", "ch", ".", "setLevel", "(", "level", ")", "\n", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "# fh.setFormatter(formatter)", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "# logger.addHandler(fh)", "\n", "\n", "return", "logger", "\n", "\n"]]}