{"home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.SumTree.SumTree.__init__": [[6, 11], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "tree", "=", "numpy", ".", "zeros", "(", "2", "*", "capacity", "-", "1", ")", "\n", "self", ".", "data", "=", "numpy", ".", "zeros", "(", "capacity", ",", "dtype", "=", "object", ")", "\n", "self", ".", "n_entries", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.SumTree.SumTree._propagate": [[13, 20], ["SumTree.SumTree._propagate"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.SumTree.SumTree._propagate"], ["", "def", "_propagate", "(", "self", ",", "idx", ",", "change", ")", ":", "\n", "        ", "parent", "=", "(", "idx", "-", "1", ")", "//", "2", "\n", "\n", "self", ".", "tree", "[", "parent", "]", "+=", "change", "\n", "\n", "if", "parent", "!=", "0", ":", "\n", "            ", "self", ".", "_propagate", "(", "parent", ",", "change", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.SumTree.SumTree._retrieve": [[22, 33], ["len", "SumTree.SumTree._retrieve", "SumTree.SumTree._retrieve"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.SumTree.SumTree._retrieve", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.SumTree.SumTree._retrieve"], ["", "", "def", "_retrieve", "(", "self", ",", "idx", ",", "s", ")", ":", "\n", "        ", "left", "=", "2", "*", "idx", "+", "1", "\n", "right", "=", "left", "+", "1", "\n", "\n", "if", "left", ">=", "len", "(", "self", ".", "tree", ")", ":", "\n", "            ", "return", "idx", "\n", "\n", "", "if", "s", "<=", "self", ".", "tree", "[", "left", "]", ":", "\n", "            ", "return", "self", ".", "_retrieve", "(", "left", ",", "s", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_retrieve", "(", "right", ",", "s", "-", "self", ".", "tree", "[", "left", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.SumTree.SumTree.total": [[34, 36], ["None"], "methods", ["None"], ["", "", "def", "total", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tree", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.SumTree.SumTree.add": [[38, 50], ["SumTree.SumTree.update"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.PER.Memory.update"], ["", "def", "add", "(", "self", ",", "p", ",", "data", ")", ":", "\n", "        ", "idx", "=", "self", ".", "pointer", "+", "self", ".", "capacity", "-", "1", "\n", "\n", "self", ".", "data", "[", "self", ".", "pointer", "]", "=", "data", "\n", "self", ".", "update", "(", "idx", ",", "p", ")", "\n", "\n", "self", ".", "pointer", "+=", "1", "\n", "if", "self", ".", "pointer", ">=", "self", ".", "capacity", ":", "\n", "            ", "self", ".", "pointer", "=", "0", "\n", "\n", "", "if", "self", ".", "n_entries", "<", "self", ".", "capacity", ":", "\n", "            ", "self", ".", "n_entries", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.SumTree.SumTree.update": [[52, 57], ["SumTree.SumTree._propagate"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.SumTree.SumTree._propagate"], ["", "", "def", "update", "(", "self", ",", "idx", ",", "p", ")", ":", "\n", "        ", "change", "=", "p", "-", "self", ".", "tree", "[", "idx", "]", "\n", "\n", "self", ".", "tree", "[", "idx", "]", "=", "p", "\n", "self", ".", "_propagate", "(", "idx", ",", "change", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.SumTree.SumTree.get": [[59, 64], ["SumTree.SumTree._retrieve"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.SumTree.SumTree._retrieve"], ["", "def", "get", "(", "self", ",", "s", ")", ":", "\n", "        ", "idx", "=", "self", ".", "_retrieve", "(", "0", ",", "s", ")", "\n", "dataIdx", "=", "idx", "-", "self", ".", "capacity", "+", "1", "\n", "\n", "return", "(", "idx", ",", "self", ".", "tree", "[", "idx", "]", ",", "self", ".", "data", "[", "dataIdx", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.NEC_runMe.find_plot_avg_param": [[78, 82], ["math.exp"], "function", ["None"], ["def", "find_plot_avg_param", "(", "steps_done", ")", ":", "\n", "    ", "\"\"\" function to plot the weighted average - beta = decaying parameter \"\"\"", "\n", "beta", "=", "beta_final", "+", "(", "beta_init", "-", "beta_final", ")", "*", "math", ".", "exp", "(", "-", "1", "*", "steps_done", "/", "beta_decay", ")", "\n", "return", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.NEC_runMe.calculate_epsilon": [[83, 87], ["math.exp"], "function", ["None"], ["", "def", "calculate_epsilon", "(", "steps_done", ")", ":", "\n", "    ", "\"\"\" e-greedy exploration decay equation \"\"\"", "\n", "eps", "=", "egreedy_final", "+", "(", "egreedy_init", "-", "egreedy_final", ")", "*", "math", ".", "exp", "(", "-", "1", "*", "steps_done", "/", "egreedy_decay", ")", "\n", "return", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.NEC_runMe.save_plot_info": [[88, 127], ["reward_record.append", "flicker_record.append", "queue_record.append", "traffic_record.append", "reward_average_plot.append", "flicker_average_plot.append", "wait_average_plot.append", "all", "open", "pickle.dump", "any", "list().index", "list"], "function", ["None"], ["", "def", "save_plot_info", "(", ")", ":", "\n", "    ", "\"\"\" function to save trajectory data \"\"\"", "\n", "reward_record", ".", "append", "(", "cum_reward", ")", "\n", "flicker_record", ".", "append", "(", "info", "[", "1", "]", ")", "\n", "queue_record", ".", "append", "(", "info", "[", "2", "]", "[", "0", "]", "+", "info", "[", "2", "]", "[", "1", "]", ")", "\n", "traffic_record", ".", "append", "(", "info", "[", "3", "]", "[", "0", "]", "+", "info", "[", "3", "]", "[", "1", "]", ")", "\n", "\n", "r1", "=", "reward_average_plot", "[", "-", "1", "]", "*", "beta", "\n", "r1", "+=", "(", "1", "-", "beta", ")", "*", "cum_reward", "\n", "reward_average_plot", ".", "append", "(", "r1", ")", "\n", "\n", "r2", "=", "flicker_average_plot", "[", "-", "1", "]", "*", "beta", "\n", "r2", "+=", "(", "1", "-", "beta", ")", "*", "info", "[", "1", "]", "\n", "flicker_average_plot", ".", "append", "(", "r2", ")", "\n", "\n", "r3", "=", "wait_average_plot", "[", "-", "1", "]", "*", "beta", "\n", "r3", "+=", "(", "1", "-", "beta", ")", "*", "(", "info", "[", "2", "]", "[", "0", "]", "+", "info", "[", "2", "]", "[", "1", "]", ")", "\n", "wait_average_plot", ".", "append", "(", "r3", ")", "\n", "\n", "list_to_save", "=", "[", "\n", "[", "reward_record", ",", "reward_average_plot", "]", ",", "\n", "[", "flicker_record", ",", "flicker_average_plot", "]", ",", "\n", "[", "queue_record", ",", "wait_average_plot", "]", ",", "\n", "[", "traffic_record", ",", "traffic_plot", "]", "\n", "]", "\n", "\n", "if", "folder", "==", "\"RL\"", ":", "\n", "        ", "if", "all", "(", "options", ")", ":", "\n", "            ", "PATH", "=", "\"Plots/\"", "+", "folder", "+", "\"/all/data_all.txt\"", "\n", "", "elif", "not", "any", "(", "options", ")", ":", "\n", "            ", "PATH", "=", "\"Plots/\"", "+", "folder", "+", "\"/vanilla_dqn/data_vanilla_dqn.txt\"", "\n", "", "else", ":", "\n", "            ", "zero_idx", "=", "list", "(", "options", ")", ".", "index", "(", "0", ")", "\n", "PATH", "=", "\"Plots/\"", "+", "folder", "+", "\"/no_\"", "+", "options_list", "[", "zero_idx", "]", "+", "\"_dqn/data_no_\"", "+", "options_list", "[", "zero_idx", "]", "+", "\"_dqn.txt\"", "\n", "", "", "else", ":", "\n", "        ", "PATH", "=", "\"Plots/\"", "+", "folder", "+", "\"/data_{}\"", ".", "format", "(", "folder", ")", "+", "\".txt\"", "\n", "\n", "", "with", "open", "(", "PATH", ",", "\"wb\"", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "list_to_save", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.NEC_runMe.plot_snapshot": [[128, 166], ["matplotlib.figure", "matplotlib.subplot", "matplotlib.ylabel", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.subplot", "matplotlib.ylabel", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.subplot", "matplotlib.ylabel", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.savefig", "matplotlib.close", "all", "any", "list().index", "list"], "function", ["None"], ["", "", "def", "plot_snapshot", "(", ")", ":", "\n", "    ", "\"\"\" function to draw plots in the corresponding folders \"\"\"", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "15", ")", ")", "\n", "\n", "plt", ".", "subplot", "(", "311", ")", "\n", "plt", ".", "ylabel", "(", "'Rewards'", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "plot", "(", "reward_record", ",", "alpha", "=", "0.15", ",", "color", "=", "'red'", ")", "\n", "plt", ".", "plot", "(", "reward_average_plot", ",", "alpha", "=", "0.9", ",", "color", "=", "'red'", ",", "linewidth", "=", "3.0", ")", "\n", "plt", ".", "xlim", "(", "-", "0.5", ",", "i_episode", ")", "\n", "plt", ".", "ylim", "(", "-", "10", ",", "3", ")", "\n", "\n", "plt", ".", "subplot", "(", "312", ")", "\n", "plt", ".", "ylabel", "(", "'Number of Flickers'", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "plot", "(", "flicker_record", ",", "alpha", "=", "0.15", ",", "color", "=", "'green'", ")", "\n", "plt", ".", "plot", "(", "flicker_average_plot", ",", "alpha", "=", "0.9", ",", "color", "=", "'green'", ",", "linewidth", "=", "3.0", ")", "\n", "plt", ".", "xlim", "(", "-", "0.5", ",", "i_episode", ")", "\n", "plt", ".", "ylim", "(", "-", "0.2", ",", "25", ")", "\n", "\n", "plt", ".", "subplot", "(", "313", ")", "\n", "plt", ".", "ylabel", "(", "'Wait Time'", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "plot", "(", "queue_record", ",", "alpha", "=", "0.15", ",", "color", "=", "'blue'", ")", "\n", "plt", ".", "plot", "(", "wait_average_plot", ",", "alpha", "=", "0.9", ",", "color", "=", "'blue'", ",", "linewidth", "=", "3.0", ")", "\n", "plt", ".", "xlim", "(", "-", "0.5", ",", "i_episode", ")", "\n", "plt", ".", "ylim", "(", "-", "0.5", ",", "9000", ")", "\n", "\n", "if", "folder", "==", "\"RL\"", ":", "\n", "        ", "if", "all", "(", "options", ")", ":", "\n", "            ", "PATH", "=", "\"Plots/\"", "+", "folder", "+", "\"/all\"", "+", "\"/{}.png\"", ".", "format", "(", "'plot_all'", ")", "\n", "", "elif", "not", "any", "(", "options", ")", ":", "\n", "            ", "PATH", "=", "\"Plots/\"", "+", "folder", "+", "\"/vanilla_dqn\"", "+", "\"/{}.png\"", ".", "format", "(", "'plot_vanilla_dqn'", ")", "\n", "", "else", ":", "\n", "            ", "zero_idx", "=", "list", "(", "options", ")", ".", "index", "(", "0", ")", "\n", "PATH", "=", "\"Plots/\"", "+", "folder", "+", "\"/no_\"", "+", "options_list", "[", "zero_idx", "]", "+", "\"_dqn/plot_no_\"", "+", "options_list", "[", "zero_idx", "]", "+", "\"_dqn.png\"", "\n", "", "", "else", ":", "\n", "        ", "PATH", "=", "\"Plots/\"", "+", "folder", "+", "\"/plot_{}\"", ".", "format", "(", "folder", ")", "+", "\".png\"", "\n", "\n", "", "plt", ".", "savefig", "(", "PATH", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.ExperienceReplay.__init__": [[88, 92], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "memory", "=", "[", "]", "\n", "self", ".", "position", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.ExperienceReplay.push": [[93, 99], ["len", "DQNAgent.ExperienceReplay.memory.append"], "methods", ["None"], ["", "def", "push", "(", "self", ",", "experience", ")", ":", "\n", "        ", "if", "self", ".", "position", ">=", "len", "(", "self", ".", "memory", ")", ":", "\n", "            ", "self", ".", "memory", ".", "append", "(", "experience", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "memory", "[", "self", ".", "position", "]", "=", "experience", "\n", "", "self", ".", "position", "=", "(", "self", ".", "position", "+", "1", ")", "%", "self", ".", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.ExperienceReplay.sample": [[100, 102], ["zip", "random.sample"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.PER.Memory.sample"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "return", "zip", "(", "*", "random", ".", "sample", "(", "self", ".", "memory", ",", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.ExperienceReplay.__len__": [[103, 105], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.NoisyLinear.__init__": [[109, 126], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "DQNAgent.NoisyLinear.register_buffer", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "DQNAgent.NoisyLinear.register_buffer", "DQNAgent.NoisyLinear.reset_parameters", "DQNAgent.NoisyLinear.reset_noise", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.__init__", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.NoisyLinear.reset_parameters", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.FinalDQN.reset_noise"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "std_init", "=", "0.4", ")", ":", "\n", "        ", "super", "(", "NoisyLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "std_init", "=", "std_init", "\n", "\n", "self", ".", "weight_mu", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "self", ".", "weight_sigma", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'weight_epsilon'", ",", "torch", ".", "FloatTensor", "(", "out_features", ",", "in_features", ")", ")", "\n", "\n", "self", ".", "bias_mu", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "self", ".", "bias_sigma", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'bias_epsilon'", ",", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "self", ".", "reset_noise", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.NoisyLinear.forward": [[127, 132], ["torch.linear", "torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "weight", "=", "self", ".", "weight_mu", "\n", "bias", "=", "self", ".", "bias_mu", "\n", "\n", "return", "F", ".", "linear", "(", "x", ",", "weight", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.NoisyLinear.reset_parameters": [[133, 141], ["DQNAgent.NoisyLinear.weight_mu.data.uniform_", "DQNAgent.NoisyLinear.weight_sigma.data.fill_", "DQNAgent.NoisyLinear.bias_mu.data.uniform_", "DQNAgent.NoisyLinear.bias_sigma.data.fill_", "math.sqrt", "DQNAgent.NoisyLinear.weight_mu.size", "math.sqrt", "math.sqrt", "DQNAgent.NoisyLinear.weight_sigma.size", "DQNAgent.NoisyLinear.bias_sigma.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "mu_range", "=", "1", "/", "math", ".", "sqrt", "(", "self", ".", "weight_mu", ".", "size", "(", "1", ")", ")", "\n", "\n", "self", ".", "weight_mu", ".", "data", ".", "uniform_", "(", "-", "mu_range", ",", "mu_range", ")", "\n", "self", ".", "weight_sigma", ".", "data", ".", "fill_", "(", "self", ".", "std_init", "/", "math", ".", "sqrt", "(", "self", ".", "weight_sigma", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "self", ".", "bias_mu", ".", "data", ".", "uniform_", "(", "-", "mu_range", ",", "mu_range", ")", "\n", "self", ".", "bias_sigma", ".", "data", ".", "fill_", "(", "self", ".", "std_init", "/", "math", ".", "sqrt", "(", "self", ".", "bias_sigma", ".", "size", "(", "0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.NoisyLinear.reset_noise": [[142, 148], ["DQNAgent.NoisyLinear._scale_noise", "DQNAgent.NoisyLinear._scale_noise", "DQNAgent.NoisyLinear.weight_epsilon.copy_", "DQNAgent.NoisyLinear.bias_epsilon.copy_", "DQNAgent.NoisyLinear.ger", "DQNAgent.NoisyLinear._scale_noise"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.NoisyLinear._scale_noise", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.NoisyLinear._scale_noise", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.NoisyLinear._scale_noise"], ["", "def", "reset_noise", "(", "self", ")", ":", "\n", "        ", "epsilon_in", "=", "self", ".", "_scale_noise", "(", "self", ".", "in_features", ")", "\n", "epsilon_out", "=", "self", ".", "_scale_noise", "(", "self", ".", "out_features", ")", "\n", "\n", "self", ".", "weight_epsilon", ".", "copy_", "(", "epsilon_out", ".", "ger", "(", "epsilon_in", ")", ")", "\n", "self", ".", "bias_epsilon", ".", "copy_", "(", "self", ".", "_scale_noise", "(", "self", ".", "out_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.NoisyLinear._scale_noise": [[149, 153], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "x.sign().mul.sign().mul.sign().mul", "x.sign().mul.sign().mul.abs().sqrt", "x.sign().mul.sign().mul.sign", "x.sign().mul.sign().mul.abs"], "methods", ["None"], ["", "def", "_scale_noise", "(", "self", ",", "size", ")", ":", "\n", "        ", "x", "=", "torch", ".", "randn", "(", "size", ")", "\n", "x", "=", "x", ".", "sign", "(", ")", ".", "mul", "(", "x", ".", "abs", "(", ")", ".", "sqrt", "(", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.FinalDQN.__init__": [[158, 192], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "DQNAgent.NoisyLinear", "DQNAgent.NoisyLinear", "DQNAgent.NoisyLinear", "DQNAgent.NoisyLinear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "DQNAgent.NoisyLinear", "DQNAgent.NoisyLinear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.__init__"], ["    ", "def", "__init__", "(", "self", ",", "options", ")", ":", "\n", "        ", "super", "(", "FinalDQN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "double_dqn", ",", "self", ".", "dueling_dqn", ",", "self", ".", "per", ",", "self", ".", "noisy_dqn", ",", "self", ".", "dist_dqn", "=", "options", "\n", "\n", "self", ".", "NUM_ATOM_KEY", "=", "1", "+", "(", "num_of_atoms", "-", "1", ")", "*", "self", ".", "dist_dqn", "\n", "\n", "if", "self", ".", "dueling_dqn", ":", "\n", "            ", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "num_of_inputs", ",", "hidden_1", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "hidden_1", ",", "hidden_2", ")", "\n", "\n", "if", "self", ".", "noisy_dqn", ":", "\n", "                ", "self", ".", "noisy_advantage1", "=", "NoisyLinear", "(", "hidden_2", ",", "hidden_3", ")", "\n", "self", ".", "noisy_advantage2", "=", "NoisyLinear", "(", "hidden_3", ",", "self", ".", "NUM_ATOM_KEY", "*", "num_of_outputs", ")", "\n", "\n", "self", ".", "noisy_value1", "=", "NoisyLinear", "(", "hidden_2", ",", "hidden_3", ")", "\n", "self", ".", "noisy_value2", "=", "NoisyLinear", "(", "hidden_3", ",", "self", ".", "NUM_ATOM_KEY", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "advantage1", "=", "nn", ".", "Linear", "(", "hidden_2", ",", "hidden_3", ")", "\n", "self", ".", "advantage2", "=", "nn", ".", "Linear", "(", "hidden_3", ",", "(", "self", ".", "NUM_ATOM_KEY", "*", "num_of_outputs", ")", ")", "\n", "\n", "self", ".", "value1", "=", "nn", ".", "Linear", "(", "hidden_2", ",", "hidden_3", ")", "\n", "self", ".", "value2", "=", "nn", ".", "Linear", "(", "hidden_3", ",", "self", ".", "NUM_ATOM_KEY", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "noisy_dqn", ":", "\n", "                ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_of_inputs", ",", "hidden_1", ")", "\n", "self", ".", "noisy1", "=", "NoisyLinear", "(", "hidden_1", ",", "hidden_2", ")", "\n", "self", ".", "noisy2", "=", "NoisyLinear", "(", "hidden_2", ",", "self", ".", "NUM_ATOM_KEY", "*", "num_of_outputs", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_of_inputs", ",", "hidden_1", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "hidden_1", ",", "hidden_2", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "hidden_2", ",", "self", ".", "NUM_ATOM_KEY", "*", "num_of_outputs", ")", "\n", "\n", "", "", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.FinalDQN.forward": [[193, 246], ["x.size", "DQNAgent.FinalDQN.linear1", "DQNAgent.FinalDQN.activation", "DQNAgent.FinalDQN.linear2", "DQNAgent.FinalDQN.activation", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "DQNAgent.FinalDQN.noisy_advantage1", "DQNAgent.FinalDQN.activation", "DQNAgent.FinalDQN.noisy_advantage2", "DQNAgent.FinalDQN.noisy_value1", "DQNAgent.FinalDQN.activation", "DQNAgent.FinalDQN.noisy_value2", "DQNAgent.FinalDQN.advantage1", "DQNAgent.FinalDQN.activation", "DQNAgent.FinalDQN.advantage2", "DQNAgent.FinalDQN.value1", "DQNAgent.FinalDQN.activation", "DQNAgent.FinalDQN.value2", "output_value.view.view.view", "output_advantage.view.view.view", "output_advantage.view.view.mean", "DQNAgent.FinalDQN.linear", "DQNAgent.FinalDQN.activation", "DQNAgent.FinalDQN.noisy1", "DQNAgent.FinalDQN.activation", "DQNAgent.FinalDQN.noisy2", "DQNAgent.FinalDQN.linear", "DQNAgent.FinalDQN.activation", "DQNAgent.FinalDQN.linear1", "DQNAgent.FinalDQN.activation", "DQNAgent.FinalDQN.linear2", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "DQNAgent.FinalDQN.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "if", "self", ".", "dueling_dqn", ":", "\n", "            ", "output1", "=", "self", ".", "linear1", "(", "x", ")", "\n", "output1", "=", "self", ".", "activation", "(", "output1", ")", "\n", "output2", "=", "self", ".", "linear2", "(", "output1", ")", "\n", "output2", "=", "self", ".", "activation", "(", "output2", ")", "\n", "\n", "if", "self", ".", "noisy_dqn", ":", "\n", "                ", "output_advantage", "=", "self", ".", "noisy_advantage1", "(", "output2", ")", "\n", "output_advantage", "=", "self", ".", "activation", "(", "output_advantage", ")", "\n", "output_advantage", "=", "self", ".", "noisy_advantage2", "(", "output_advantage", ")", "\n", "\n", "output_value", "=", "self", ".", "noisy_value1", "(", "output2", ")", "\n", "output_value", "=", "self", ".", "activation", "(", "output_value", ")", "\n", "output_value", "=", "self", ".", "noisy_value2", "(", "output_value", ")", "\n", "", "else", ":", "\n", "                ", "output_advantage", "=", "self", ".", "advantage1", "(", "output2", ")", "\n", "output_advantage", "=", "self", ".", "activation", "(", "output_advantage", ")", "\n", "output_advantage", "=", "self", ".", "advantage2", "(", "output_advantage", ")", "\n", "\n", "output_value", "=", "self", ".", "value1", "(", "output2", ")", "\n", "output_value", "=", "self", ".", "activation", "(", "output_value", ")", "\n", "output_value", "=", "self", ".", "value2", "(", "output_value", ")", "\n", "\n", "", "if", "self", ".", "dist_dqn", ":", "\n", "                ", "output_value", "=", "output_value", ".", "view", "(", "batch_size", ",", "1", ",", "self", ".", "NUM_ATOM_KEY", ")", "\n", "output_advantage", "=", "output_advantage", ".", "view", "(", "batch_size", ",", "num_of_outputs", ",", "self", ".", "NUM_ATOM_KEY", ")", "\n", "\n", "", "output_final", "=", "output_value", "+", "output_advantage", "-", "output_advantage", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "noisy_dqn", ":", "\n", "                ", "output1", "=", "self", ".", "linear", "(", "x", ")", "\n", "output1", "=", "self", ".", "activation", "(", "output1", ")", "\n", "\n", "output2", "=", "self", ".", "noisy1", "(", "output1", ")", "\n", "output2", "=", "self", ".", "activation", "(", "output2", ")", "\n", "\n", "output_final", "=", "self", ".", "noisy2", "(", "output2", ")", "\n", "", "else", ":", "\n", "                ", "output1", "=", "self", ".", "linear", "(", "x", ")", "\n", "output1", "=", "self", ".", "activation", "(", "output1", ")", "\n", "\n", "output2", "=", "self", ".", "linear1", "(", "output1", ")", "\n", "output2", "=", "self", ".", "activation", "(", "output2", ")", "\n", "\n", "output_final", "=", "self", ".", "linear2", "(", "output2", ")", "\n", "\n", "", "", "if", "self", ".", "dist_dqn", ":", "\n", "            ", "output_final", "=", "F", ".", "softmax", "(", "output_final", ".", "view", "(", "-", "1", ",", "self", ".", "NUM_ATOM_KEY", ")", ")", ".", "view", "(", "-", "1", ",", "num_of_outputs", ",", "self", ".", "NUM_ATOM_KEY", ")", "\n", "\n", "", "return", "output_final", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.FinalDQN.reset_noise": [[247, 263], ["DQNAgent.FinalDQN.noisy_advantage1.reset_noise", "DQNAgent.FinalDQN.noisy_advantage2.reset_noise", "DQNAgent.FinalDQN.noisy_value1.reset_noise", "DQNAgent.FinalDQN.noisy_value2.reset_noise", "DQNAgent.FinalDQN.noisy1.reset_noise", "DQNAgent.FinalDQN.noisy2.reset_noise"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.FinalDQN.reset_noise", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.FinalDQN.reset_noise", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.FinalDQN.reset_noise", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.FinalDQN.reset_noise", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.FinalDQN.reset_noise", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.FinalDQN.reset_noise"], ["", "def", "reset_noise", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "dueling_dqn", ":", "\n", "            ", "if", "self", ".", "noisy_dqn", ":", "\n", "                ", "self", ".", "noisy_advantage1", ".", "reset_noise", "(", ")", "\n", "self", ".", "noisy_advantage2", ".", "reset_noise", "(", ")", "\n", "\n", "self", ".", "noisy_value1", ".", "reset_noise", "(", ")", "\n", "self", ".", "noisy_value2", ".", "reset_noise", "(", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "noisy_dqn", ":", "\n", "                ", "self", ".", "noisy1", ".", "reset_noise", "(", ")", "\n", "self", ".", "noisy2", ".", "reset_noise", "(", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.DQN.__init__": [[268, 295], ["FinalDQN().to", "FinalDQN().to", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "all", "PER.Memory", "DQNAgent.ExperienceReplay", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "print", "DQNAgent.DQN.model.load_state_dict", "DQNAgent.FinalDQN", "DQNAgent.FinalDQN", "DQNAgent.DQN.model.parameters", "any", "list().index", "DQNAgent.load_model", "list"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.load_model"], ["    ", "def", "__init__", "(", "self", ",", "options", ",", "resume_previous_train", ")", ":", "\n", "        ", "self", ".", "model", "=", "FinalDQN", "(", "options", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "target", "=", "FinalDQN", "(", "options", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "double_dqn", ",", "self", ".", "dueling_dqn", ",", "self", ".", "per", ",", "self", ".", "noisy_dqn", ",", "self", ".", "dist_dqn", "=", "options", "\n", "options_list", "=", "[", "\"double\"", ",", "\"dueling\"", ",", "\"per\"", ",", "\"noisy\"", ",", "\"dist\"", "]", "\n", "\n", "if", "self", ".", "per", ":", "\n", "            ", "self", ".", "memory", "=", "Memory", "(", "memory_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "memory", "=", "ExperienceReplay", "(", "memory_size", ")", "\n", "\n", "", "self", ".", "loss_func", "=", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "params", "=", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "learning_rate", ")", "\n", "self", ".", "num_updates", "=", "0", "\n", "\n", "if", "all", "(", "options", ")", ":", "\n", "            ", "self", ".", "PATH", "=", "\"Plots/RL/all/network_all.pth\"", "\n", "", "elif", "not", "any", "(", "options", ")", ":", "\n", "            ", "self", ".", "PATH", "=", "\"Plots/RL/vanilla_dqn/network_vanilla_dqn.pth\"", "\n", "", "else", ":", "\n", "            ", "zero_idx", "=", "list", "(", "options", ")", ".", "index", "(", "0", ")", "\n", "self", ".", "PATH", "=", "\"Plots/RL/no_\"", "+", "options_list", "[", "zero_idx", "]", "+", "\"_dqn/network_no_\"", "+", "options_list", "[", "zero_idx", "]", "+", "\"_dqn.pth\"", "\n", "\n", "", "if", "resume_previous_train", "and", "os", ".", "path", ".", "exists", "(", "self", ".", "PATH", ")", ":", "\n", "            ", "print", "(", "\"Loading previously saved model ... \"", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "load_model", "(", "self", ".", "PATH", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.DQN.act": [[298, 334], ["torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "DQNAgent.DQN.model.forward().data.cpu", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "[].numpy", "FloatTensor().unsqueeze().to", "DQNAgent.DQN.model.forward", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "DQNAgent.DQN.model.forward", "FloatTensor().unsqueeze", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "random.randint", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "random.randint", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "DQNAgent.DQN.sum().max", "DQNAgent.DQN.max", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "torch.FloatTensor().unsqueeze().to", "DQNAgent.DQN.model.forward().data.cpu", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Tensor().to", "DQNAgent.DQN.model", "action.item.item.item", "FloatTensor", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "[].numpy", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "DQNAgent.DQN.sum", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "Tensor", "DQNAgent.DQN.model.forward", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "DQNAgent.DQN.sum().max", "DQNAgent.DQN.sum"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.FinalDQN.forward", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.FinalDQN.forward", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.FinalDQN.forward"], ["", "", "def", "act", "(", "self", ",", "state", ",", "epsilon", ")", ":", "\n", "\n", "        ", "if", "self", ".", "noisy_dqn", "and", "self", ".", "dist_dqn", ":", "\n", "            ", "state", "=", "torch", ".", "FloatTensor", "(", "state", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "dist", "=", "self", ".", "model", ".", "forward", "(", "state", ")", ".", "data", ".", "cpu", "(", ")", "\n", "dist", "=", "dist", "*", "torch", ".", "linspace", "(", "Vmin", ",", "Vmax", ",", "num_of_atoms", ")", "\n", "action", "=", "dist", ".", "sum", "(", "2", ")", ".", "max", "(", "1", ")", "[", "1", "]", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n", "", "elif", "self", ".", "noisy_dqn", ":", "\n", "            ", "state", "=", "FloatTensor", "(", "state", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "q_values", "=", "self", ".", "model", ".", "forward", "(", "state", ")", "\n", "action", "=", "q_values", ".", "max", "(", "1", ")", "[", "1", "]", ".", "data", "[", "0", "]", "\n", "\n", "", "elif", "self", ".", "dist_dqn", ":", "\n", "            ", "random_for_egreedy", "=", "torch", ".", "rand", "(", "1", ")", "[", "0", "]", "\n", "if", "random_for_egreedy", ">", "epsilon", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "state", "=", "torch", ".", "FloatTensor", "(", "state", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "dist", "=", "self", ".", "model", ".", "forward", "(", "state", ")", ".", "data", ".", "cpu", "(", ")", "\n", "dist", "=", "dist", "*", "torch", ".", "linspace", "(", "Vmin", ",", "Vmax", ",", "num_of_atoms", ")", "\n", "action", "=", "dist", ".", "sum", "(", "2", ")", ".", "max", "(", "1", ")", "[", "1", "]", ".", "numpy", "(", ")", "[", "0", "]", "\n", "", "", "else", ":", "\n", "                ", "action", "=", "random", ".", "randint", "(", "0", ",", "3", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "random_for_egreedy", "=", "torch", ".", "rand", "(", "1", ")", "[", "0", "]", "\n", "if", "random_for_egreedy", ">", "epsilon", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "state", "=", "Tensor", "(", "state", ")", ".", "to", "(", "device", ")", "\n", "action_from_nn", "=", "self", ".", "model", "(", "state", ")", "\n", "action", "=", "torch", ".", "max", "(", "action_from_nn", ",", "0", ")", "[", "1", "]", "\n", "action", "=", "action", ".", "item", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "action", "=", "random", ".", "randint", "(", "0", ",", "3", ")", "\n", "\n", "", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.DQN.optimize": [[337, 419], ["DQNAgent.DQN.optimizer.zero_grad", "DQNAgent.DQN.backward", "DQNAgent.DQN.optimizer.step", "DQNAgent.DQN.memory.add", "DQNAgent.DQN.memory.sample", "Tensor().to", "LongTensor().to", "Tensor().to", "Tensor().to", "Tensor().to", "DQNAgent.DQN.memory.push", "DQNAgent.DQN.memory.sample", "Tensor().to", "Tensor().to", "Tensor().to", "LongTensor().to", "Tensor().to", "DQNAgent.projection_distribution", "action.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand", "DQNAgent.DQN.gather().squeeze", "DQNAgent.DQN.data.clamp_", "DQNAgent.DQN.mean", "DQNAgent.DQN.model().gather().squeeze", "DQNAgent.DQN.target.load_state_dict", "DQNAgent.save_model", "DQNAgent.DQN.model.reset_noise", "DQNAgent.DQN.target.reset_noise", "len", "DQNAgent.DQN.model", "DQNAgent.DQN.target", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "DQNAgent.DQN.model().detach", "DQNAgent.DQN.target().detach", "DQNAgent.DQN.gather().squeeze", "DQNAgent.DQN.target().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "DQNAgent.DQN.memory.update", "DQNAgent.DQN.loss_func().mean", "DQNAgent.DQN.model.state_dict", "Tensor", "LongTensor", "Tensor", "Tensor", "Tensor", "Tensor", "Tensor", "Tensor", "LongTensor", "Tensor", "action.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze", "DQNAgent.DQN.gather", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "DQNAgent.DQN.model().gather", "torch.abs().detach.numpy", "torch.abs().detach.numpy", "torch.abs().detach.numpy", "torch.abs().detach.numpy", "DQNAgent.DQN.model", "DQNAgent.DQN.target", "DQNAgent.DQN.gather", "DQNAgent.DQN.target", "action.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand.unsqueeze", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "DQNAgent.DQN.loss_func", "action.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand.unsqueeze", "DQNAgent.DQN.log", "max_new_state_indices.unsqueeze", "DQNAgent.DQN.model", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "DQNAgent.DQN.loss_func"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.step", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.PER.Memory.add", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.PER.Memory.sample", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.ExperienceReplay.push", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.PER.Memory.sample", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.projection_distribution", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.save_model", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.FinalDQN.reset_noise", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.FinalDQN.reset_noise", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.PER.Memory.update"], ["", "def", "optimize", "(", "self", ",", "experience", ")", ":", "\n", "\n", "################################# Add/Take Experience #################################", "\n", "\n", "        ", "if", "self", ".", "per", ":", "\n", "            ", "self", ".", "memory", ".", "add", "(", "experience", ")", "\n", "\n", "if", "self", ".", "memory", ".", "tree", ".", "n_entries", "<", "batch_size", ":", "\n", "                ", "return", "\n", "\n", "", "batch", ",", "idxs", ",", "is_weights", "=", "self", ".", "memory", ".", "sample", "(", "batch_size", ")", "\n", "\n", "state", "=", "Tensor", "(", "[", "info", "[", "0", "]", "for", "info", "in", "batch", "]", ")", ".", "to", "(", "device", ")", "\n", "action", "=", "LongTensor", "(", "[", "info", "[", "1", "]", "for", "info", "in", "batch", "]", ")", ".", "to", "(", "device", ")", "\n", "new_state", "=", "Tensor", "(", "[", "info", "[", "2", "]", "for", "info", "in", "batch", "]", ")", ".", "to", "(", "device", ")", "\n", "reward", "=", "Tensor", "(", "[", "info", "[", "3", "]", "for", "info", "in", "batch", "]", ")", ".", "to", "(", "device", ")", "\n", "done", "=", "Tensor", "(", "[", "info", "[", "4", "]", "for", "info", "in", "batch", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "memory", ".", "push", "(", "experience", ")", "\n", "\n", "if", "len", "(", "self", ".", "memory", ")", "<", "batch_size", ":", "\n", "                ", "return", "\n", "\n", "", "state", ",", "action", ",", "new_state", ",", "reward", ",", "done", "=", "self", ".", "memory", ".", "sample", "(", "batch_size", ")", "\n", "\n", "state", "=", "Tensor", "(", "state", ")", ".", "to", "(", "device", ")", "\n", "new_state", "=", "Tensor", "(", "new_state", ")", ".", "to", "(", "device", ")", "\n", "reward", "=", "Tensor", "(", "reward", ")", ".", "to", "(", "device", ")", "\n", "action", "=", "LongTensor", "(", "action", ")", ".", "to", "(", "device", ")", "\n", "done", "=", "Tensor", "(", "done", ")", ".", "to", "(", "device", ")", "\n", "\n", "################################# Find Loss #################################", "\n", "\n", "", "if", "self", ".", "dist_dqn", ":", "\n", "            ", "proj_dist", "=", "projection_distribution", "(", "new_state", ",", "reward", ",", "done", ",", "self", ".", "target", ")", "\n", "if", "self", ".", "double_dqn", ":", "\n", "                ", "dist", "=", "self", ".", "model", "(", "state", ")", "\n", "", "else", ":", "\n", "                ", "dist", "=", "self", ".", "target", "(", "state", ")", "\n", "", "action", "=", "action", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "batch_size", ",", "1", ",", "num_of_atoms", ")", "\n", "dist", "=", "dist", ".", "gather", "(", "1", ",", "action", ")", ".", "squeeze", "(", "1", ")", "\n", "dist", ".", "data", ".", "clamp_", "(", "0.01", ",", "0.99", ")", "\n", "loss", "=", "-", "(", "proj_dist", "*", "dist", ".", "log", "(", ")", ")", ".", "sum", "(", "1", ")", "\n", "if", "self", ".", "per", ":", "\n", "                ", "weights", "=", "torch", ".", "FloatTensor", "(", "is_weights", ")", "\n", "loss", "=", "loss", "*", "weights", "\n", "", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "double_dqn", ":", "\n", "                ", "new_state_indices", "=", "self", ".", "model", "(", "new_state", ")", ".", "detach", "(", ")", "\n", "max_new_state_indices", "=", "torch", ".", "max", "(", "new_state_indices", ",", "1", ")", "[", "1", "]", "\n", "\n", "new_state_values", "=", "self", ".", "target", "(", "new_state", ")", ".", "detach", "(", ")", "\n", "max_new_state_values", "=", "new_state_values", ".", "gather", "(", "1", ",", "max_new_state_indices", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "new_state_values", "=", "self", ".", "target", "(", "new_state", ")", ".", "detach", "(", ")", "\n", "max_new_state_values", "=", "torch", ".", "max", "(", "new_state_values", ",", "1", ")", "[", "0", "]", "\n", "", "target_value", "=", "reward", "+", "(", "1", "-", "done", ")", "*", "gamma", "*", "max_new_state_values", "\n", "predicted_value", "=", "self", ".", "model", "(", "state", ")", ".", "gather", "(", "1", ",", "action", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "if", "self", ".", "per", ":", "\n", "                ", "abs_error", "=", "torch", ".", "abs", "(", "target_value", "-", "predicted_value", ")", ".", "detach", "(", ")", "\n", "self", ".", "memory", ".", "update", "(", "idxs", ",", "abs_error", ".", "numpy", "(", ")", ")", "\n", "loss", "=", "(", "torch", ".", "FloatTensor", "(", "is_weights", ")", "*", "self", ".", "loss_func", "(", "predicted_value", ",", "target_value", ")", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "self", ".", "loss_func", "(", "predicted_value", ",", "target_value", ")", ".", "mean", "(", ")", "\n", "\n", "", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "num_updates", "%", "update_target_freq", "==", "0", ":", "\n", "            ", "self", ".", "target", ".", "load_state_dict", "(", "self", ".", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "num_updates", "%", "save_model_frequency", "==", "0", ":", "\n", "            ", "save_model", "(", "self", ".", "model", ",", "self", ".", "PATH", ")", "\n", "\n", "", "if", "self", ".", "noisy_dqn", ":", "\n", "            ", "self", ".", "model", ".", "reset_noise", "(", ")", "\n", "self", ".", "target", ".", "reset_noise", "(", ")", "\n", "\n", "", "self", ".", "num_updates", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.save_model": [[44, 46], ["torch.save", "torch.save", "torch.save", "torch.save", "model.state_dict"], "function", ["None"], ["def", "save_model", "(", "model", ",", "path", ")", ":", "\n", "    ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.load_model": [[47, 49], ["torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "def", "load_model", "(", "path", ")", ":", "\n", "    ", "return", "torch", ".", "load", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.init_weights": [[50, 54], ["type", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "m.bias.data.fill_"], "function", ["None"], ["", "def", "init_weights", "(", "m", ")", ":", "\n", "    ", "if", "type", "(", "m", ")", "==", "nn", ".", "Linear", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.DQNAgent.projection_distribution": [[55, 83], ["torch.linspace().to", "torch.linspace().to", "torch.linspace().to", "torch.linspace().to", "next_action.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze().expand", "next_dist.gather().squeeze.gather().squeeze", "reward.unsqueeze().expand_as.unsqueeze().expand_as", "done.unsqueeze().expand_as.unsqueeze().expand_as", "support.unsqueeze().expand_as.unsqueeze().expand_as", "Tz.clamp.clamp", "b.floor().long", "b.ceil().long", "torch.linspace().long().unsqueeze().expand().to", "torch.linspace().long().unsqueeze().expand().to", "torch.linspace().long().unsqueeze().expand().to", "torch.linspace().long().unsqueeze().expand().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to.view().index_add_", "torch.zeros().to.view().index_add_", "float", "next_dist.gather().squeeze.sum().max", "next_dist.gather().squeeze.size", "next_dist.gather().squeeze.size", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "target_model", "next_action.unsqueeze().unsqueeze().expand.unsqueeze().unsqueeze", "next_dist.gather().squeeze.gather", "reward.unsqueeze().expand_as.unsqueeze", "done.unsqueeze().expand_as.unsqueeze", "support.unsqueeze().expand_as.unsqueeze", "b.floor", "b.ceil", "torch.linspace().long().unsqueeze().expand", "torch.linspace().long().unsqueeze().expand", "torch.linspace().long().unsqueeze().expand", "torch.linspace().long().unsqueeze().expand", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().to.view", "torch.zeros().to.view", "next_dist.gather().squeeze.sum", "next_dist.gather().squeeze.size", "next_action.unsqueeze().unsqueeze().expand.unsqueeze", "torch.linspace().long().unsqueeze", "torch.linspace().long().unsqueeze", "torch.linspace().long().unsqueeze", "torch.linspace().long().unsqueeze", "b.ceil().long.float", "b.floor().long.float", "torch.linspace().long", "torch.linspace().long", "torch.linspace().long", "torch.linspace().long", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "function", ["None"], ["", "", "def", "projection_distribution", "(", "next_state", ",", "reward", ",", "done", ",", "target_model", ")", ":", "\n", "\n", "    ", "delta_z", "=", "float", "(", "Vmax", "-", "Vmin", ")", "/", "(", "num_of_atoms", "-", "1", ")", "\n", "support", "=", "torch", ".", "linspace", "(", "Vmin", ",", "Vmax", ",", "num_of_atoms", ")", ".", "to", "(", "device", ")", "\n", "\n", "next_dist", "=", "target_model", "(", "next_state", ")", ".", "data", "*", "support", "\n", "next_action", "=", "next_dist", ".", "sum", "(", "2", ")", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "next_action", "=", "next_action", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "next_dist", ".", "size", "(", "0", ")", ",", "1", ",", "next_dist", ".", "size", "(", "2", ")", ")", "\n", "next_dist", "=", "next_dist", ".", "gather", "(", "1", ",", "next_action", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "reward", "=", "reward", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "next_dist", ")", "\n", "done", "=", "done", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "next_dist", ")", "\n", "support", "=", "support", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "next_dist", ")", "\n", "\n", "Tz", "=", "reward", "+", "(", "1", "-", "done", ")", "*", "gamma", "*", "support", "\n", "Tz", "=", "Tz", ".", "clamp", "(", "min", "=", "Vmin", ",", "max", "=", "Vmax", ")", "\n", "b", "=", "(", "Tz", "-", "Vmin", ")", "/", "delta_z", "\n", "l", "=", "b", ".", "floor", "(", ")", ".", "long", "(", ")", "\n", "u", "=", "b", ".", "ceil", "(", ")", ".", "long", "(", ")", "\n", "\n", "offset", "=", "torch", ".", "linspace", "(", "0", ",", "(", "batch_size", "-", "1", ")", "*", "num_of_atoms", ",", "batch_size", ")", ".", "long", "(", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "batch_size", ",", "num_of_atoms", ")", ".", "to", "(", "device", ")", "\n", "\n", "proj_dist", "=", "torch", ".", "zeros", "(", "next_dist", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "proj_dist", ".", "view", "(", "-", "1", ")", ".", "index_add_", "(", "0", ",", "(", "l", "+", "offset", ")", ".", "view", "(", "-", "1", ")", ",", "(", "next_dist", "*", "(", "u", ".", "float", "(", ")", "-", "b", ")", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "proj_dist", ".", "view", "(", "-", "1", ")", ".", "index_add_", "(", "0", ",", "(", "u", "+", "offset", ")", ".", "view", "(", "-", "1", ")", ",", "(", "next_dist", "*", "(", "b", "-", "l", ".", "float", "(", ")", ")", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "return", "proj_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.PER.Memory.__init__": [[12, 14], ["SumTree.SumTree.SumTree"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "self", ".", "tree", "=", "SumTree", "(", "capacity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.PER.Memory.add": [[15, 23], ["numpy.max", "PER.Memory.tree.add"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.PER.Memory.add"], ["", "def", "add", "(", "self", ",", "experience", ")", ":", "\n", "\n", "        ", "max_priority", "=", "np", ".", "max", "(", "self", ".", "tree", ".", "tree", "[", "-", "self", ".", "tree", ".", "capacity", ":", "]", ")", "\n", "\n", "if", "max_priority", "==", "0", ":", "\n", "            ", "max_priority", "=", "self", ".", "absolute_error_upper", "\n", "\n", "", "self", ".", "tree", ".", "add", "(", "max_priority", ",", "experience", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.PER.Memory.sample": [[24, 48], ["numpy.min", "range", "numpy.power", "numpy.power.max", "PER.Memory.tree.total", "random.uniform", "PER.Memory.tree.get", "priorities.append", "data_batch.append", "idxs.append", "PER.Memory.tree.total"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.SumTree.SumTree.total", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.SumTree.SumTree.get", "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.SumTree.SumTree.total"], ["", "def", "sample", "(", "self", ",", "n", ")", ":", "\n", "\n", "        ", "data_batch", "=", "[", "]", "\n", "idxs", "=", "[", "]", "\n", "priorities", "=", "[", "]", "\n", "segment", "=", "self", ".", "tree", ".", "total", "(", ")", "/", "n", "\n", "self", ".", "beta", "=", "np", ".", "min", "(", "[", "1.", ",", "self", ".", "beta", "+", "self", ".", "beta_increment_per_sampling", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "\n", "            ", "a", "=", "segment", "*", "i", "\n", "b", "=", "segment", "*", "(", "i", "+", "1", ")", "\n", "value", "=", "random", ".", "uniform", "(", "a", ",", "b", ")", "\n", "\n", "(", "idx", ",", "p", ",", "data", ")", "=", "self", ".", "tree", ".", "get", "(", "value", ")", "\n", "priorities", ".", "append", "(", "p", ")", "\n", "data_batch", ".", "append", "(", "data", ")", "\n", "idxs", ".", "append", "(", "idx", ")", "\n", "\n", "", "sampling_probabilities", "=", "priorities", "/", "self", ".", "tree", ".", "total", "(", ")", "\n", "is_weight", "=", "np", ".", "power", "(", "n", "*", "sampling_probabilities", ",", "-", "self", ".", "beta", ")", "\n", "is_weight", "/=", "is_weight", ".", "max", "(", ")", "\n", "\n", "return", "data_batch", ",", "idxs", ",", "is_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.PER.Memory.update": [[49, 56], ["numpy.minimum", "numpy.power", "zip", "PER.Memory.tree.update"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.Example.PER.Memory.update"], ["", "def", "update", "(", "self", ",", "idx", ",", "errors", ")", ":", "\n", "        ", "errors", "+=", "self", ".", "eps", "\n", "clipped_errors", "=", "np", ".", "minimum", "(", "errors", ",", "self", ".", "absolute_error_upper", ")", "\n", "priorities", "=", "np", ".", "power", "(", "clipped_errors", ",", "self", ".", "alpha", ")", "\n", "\n", "for", "ti", ",", "p", "in", "zip", "(", "idx", ",", "priorities", ")", ":", "\n", "            ", "self", ".", "tree", ".", "update", "(", "ti", ",", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.TrafficLight.__init__": [[41, 61], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "states", "=", "{", "\n", "0", ":", "\"grrrrgGGGrgrrrrgGGGrrGrGr\"", ",", "\n", "1", ":", "\"grrrrgyyyrgrrrrgyyyrrrrrr\"", ",", "\n", "2", ":", "\"grrrrgrrrrgrrrrgrrrrrrrrr\"", ",", "\n", "\n", "3", ":", "\"grrrrgrrrGgrrrrgrrrGGrrrr\"", ",", "\n", "4", ":", "\"grrrrgrrrygrrrrgrrryyrrrr\"", ",", "\n", "5", ":", "\"grrrrgrrrrgrrrrgrrrrrrrrr\"", ",", "\n", "\n", "6", ":", "\"gGGGrgrrrrgGGrrgrrrrrrGrG\"", ",", "\n", "7", ":", "\"gyyyrgrrrrgyyrrgrrrrrrrrr\"", ",", "\n", "8", ":", "\"grrrrgrrrrgrrrrgrrrrrrrrr\"", ",", "\n", "\n", "9", ":", "\"grrrGgrrrrgrrGGgrrrrrrrrr\"", ",", "\n", "10", ":", "\"grrrygrrrrgrryygrrrrrrrrr\"", ",", "\n", "11", ":", "\"grrrrgrrrrgrrrrgrrrrrrrrr\"", "\n", "}", "\n", "self", ".", "phase", "=", "0", "\n", "self", ".", "signal", "=", "\"grrrrgGGGrgrrrrgGGGrrGrGr\"", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.TrafficLight.next_phase": [[62, 66], ["None"], "methods", ["None"], ["", "def", "next_phase", "(", "self", ",", "phase", ")", ":", "\n", "        ", "self", ".", "phase", "=", "phase", "\n", "self", ".", "signal", "=", "self", ".", "states", "[", "self", ".", "phase", "]", "\n", "return", "self", ".", "phase", ",", "self", ".", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.TrafficLight.terminate_green": [[67, 71], ["numpy.mod", "len"], "methods", ["None"], ["", "def", "terminate_green", "(", "self", ")", ":", "\n", "        ", "self", ".", "phase", "=", "np", ".", "mod", "(", "self", ".", "phase", "+", "1", ",", "len", "(", "self", ".", "states", ")", ")", "\n", "self", ".", "signal", "=", "self", ".", "states", "[", "self", ".", "phase", "]", "\n", "return", "self", ".", "phase", ",", "self", ".", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.__init__": [[84, 112], ["gym.spaces.Discrete", "necTraffic_env.TrafficLight", "necTraffic_env.NECTraffic.seed"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.seed"], ["def", "__init__", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "simulation_end", "=", "400", "\n", "self", ".", "time_step", "=", "0", "\n", "self", ".", "sumo_step", "=", "0", "\n", "self", ".", "green_time", "=", "10", "\n", "self", ".", "yellow_time", "=", "3", "\n", "self", ".", "red_time", "=", "2", "\n", "self", ".", "num_flicker", "=", "None", "\n", "self", ".", "restart_delay", "=", "0", "\n", "self", ".", "np_random", "=", "None", "\n", "self", ".", "route_info", "=", "None", "\n", "self", ".", "folder", "=", "None", "\n", "self", ".", "action_taken", "=", "False", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "4", ")", "\n", "self", ".", "light", "=", "TrafficLight", "(", ")", "\n", "\n", "self", ".", "det_light_n", "=", "[", "\"detL_N_1\"", ",", "\"detL_N_2\"", ",", "\"detL_N_3\"", ",", "\"detL_N_4\"", "]", "# Sensors on N", "\n", "self", ".", "det_light_e", "=", "[", "\"detL_E_1\"", ",", "\"detL_E_2\"", ",", "\"detL_E_3\"", ",", "\"detL_E_4\"", "]", "# Sensors on E", "\n", "self", ".", "det_light_s", "=", "[", "\"detL_S_1\"", ",", "\"detL_S_2\"", ",", "\"detL_S_3\"", ",", "\"detL_S_4\"", ",", "\"detL_S_5\"", "]", "# Sensors on S", "\n", "self", ".", "det_light_w", "=", "[", "\"detL_W_1\"", ",", "\"detL_W_2\"", ",", "\"detL_W_3\"", ",", "\"detL_W_4\"", ",", "\"detL_W_5\"", "]", "# Sensors on W", "\n", "\n", "self", ".", "det_count_n", "=", "[", "\"detC_N_1\"", ",", "\"detC_N_2\"", ",", "\"detC_N_3\"", ",", "\"detC_N_4\"", "]", "# Toral num of vehicles on N", "\n", "self", ".", "det_count_e", "=", "[", "\"detC_E_1\"", ",", "\"detC_E_2\"", ",", "\"detC_E_3\"", ",", "\"detC_E_4\"", "]", "# Total num of vehicles on E", "\n", "self", ".", "det_count_s", "=", "[", "\"detC_S_1\"", ",", "\"detC_S_2\"", ",", "\"detC_S_3\"", ",", "\"detC_S_4\"", ",", "\"detC_S_5\"", "]", "# Total num of vehicles on S", "\n", "self", ".", "det_count_w", "=", "[", "\"detC_W_1\"", ",", "\"detC_W_2\"", ",", "\"detC_W_3\"", ",", "\"detC_W_4\"", ",", "\"detC_W_5\"", "]", "# Total num of vehicles on W", "\n", "\n", "self", ".", "seed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.reset": [[115, 178], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "necTraffic_env.NECTraffic.write_routes", "traci.start", "traci.close", "time.sleep", "os.path.dirname", "all", "open", "f.read", "any", "list().index", "list"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.write_routes"], ["", "def", "reset", "(", "self", ",", "gui", ",", "folder", ",", "options", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "            ", "traci", ".", "close", "(", ")", "\n", "", "except", "errors", ":", "\n", "            ", "pass", "\n", "\n", "", "if", "self", ".", "restart_delay", ">", "0", ":", "\n", "            ", "time", ".", "sleep", "(", "self", ".", "restart_delay", ")", "\n", "\n", "", "basepath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"config\"", ")", "\n", "netfile", "=", "os", ".", "path", ".", "join", "(", "basepath", ",", "\"traffic.net.xml\"", ")", "\n", "routefile", "=", "os", ".", "path", ".", "join", "(", "basepath", ",", "\"traffic.rou.xml\"", ")", "\n", "guifile", "=", "os", ".", "path", ".", "join", "(", "basepath", ",", "\"view.settings.xml\"", ")", "\n", "addfile", "=", "os", ".", "path", ".", "join", "(", "basepath", ",", "\"traffic.add.xml\"", ")", "\n", "\n", "self", ".", "folder", "=", "folder", "\n", "\n", "if", "self", ".", "folder", "==", "\"RL\"", ":", "\n", "            ", "if", "all", "(", "options", ")", ":", "\n", "                ", "tmpfile", "=", "\"Plots/\"", "+", "self", ".", "folder", "+", "\"/all/tmp_all.rou.xml\"", "\n", "", "elif", "not", "any", "(", "options", ")", ":", "\n", "                ", "tmpfile", "=", "\"Plots/\"", "+", "self", ".", "folder", "+", "\"/vanilla_dqn/tmp_vanilla_dqn.rou.xml\"", "\n", "", "else", ":", "\n", "                ", "options_list", "=", "[", "\"double\"", ",", "\"dueling\"", ",", "\"per\"", ",", "\"noisy\"", ",", "\"dist\"", "]", "\n", "zero_idx", "=", "list", "(", "options", ")", ".", "index", "(", "0", ")", "\n", "tmpfile", "=", "\"Plots/\"", "+", "self", ".", "folder", "+", "\"/no_\"", "+", "options_list", "[", "zero_idx", "]", "+", "\"_dqn/tmp_no_\"", "+", "options_list", "[", "zero_idx", "]", "+", "\"_dqn.rou.xml\"", "\n", "", "", "else", ":", "\n", "            ", "tmpfile", "=", "\"Plots/\"", "+", "self", ".", "folder", "+", "\"/tmp_{}\"", ".", "format", "(", "self", ".", "folder", ")", "+", "\".rou.xml\"", "\n", "\n", "", "self", ".", "args", "=", "[", "\"--net-file\"", ",", "netfile", ",", "\"--route-files\"", ",", "tmpfile", ",", "\"--additional-files\"", ",", "addfile", "]", "\n", "self", ".", "args", "+=", "[", "\"-S\"", ",", "\"-Q\"", ",", "\"--gui-settings-file\"", ",", "guifile", "]", "\n", "self", ".", "tmpfile", "=", "tmpfile", "\n", "\n", "with", "open", "(", "routefile", ")", "as", "f", ":", "\n", "            ", "self", ".", "route", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "self", ".", "write_routes", "(", ")", "\n", "\n", "if", "gui", ":", "\n", "            ", "sumo_cmd", "=", "[", "\"sumo-gui\"", "]", "+", "self", ".", "args", "\n", "self", ".", "mode", "=", "\"gui\"", "\n", "", "else", ":", "\n", "            ", "sumo_cmd", "=", "[", "\"sumo\"", "]", "+", "self", ".", "args", "\n", "self", ".", "mode", "=", "\"non-gui\"", "\n", "\n", "", "traci", ".", "start", "(", "sumo_cmd", ")", "\n", "\n", "self", ".", "sumo_step", "=", "0", "\n", "self", ".", "num_flicker", "=", "0", "\n", "self", ".", "sumo_running", "=", "True", "\n", "\n", "self", ".", "total_num_n", ",", "self", ".", "num_n_s", ",", "self", ".", "num_n_e", "=", "0", ",", "0", ",", "0", "\n", "self", ".", "total_num_e", ",", "self", ".", "num_e_w", ",", "self", ".", "num_e_s", "=", "0", ",", "0", ",", "0", "\n", "self", ".", "total_num_s", ",", "self", ".", "num_s_n", ",", "self", ".", "num_s_w", "=", "0", ",", "0", ",", "0", "\n", "self", ".", "total_num_w", ",", "self", ".", "num_w_e", ",", "self", ".", "num_w_n", "=", "0", ",", "0", ",", "0", "\n", "\n", "self", ".", "queue_NS", "=", "0", "\n", "self", ".", "queue_EW", "=", "0", "\n", "\n", "state", "=", "[", "0", "]", "*", "(", "4", "*", "self", ".", "green_time", "+", "1", ")", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.run_simulation": [[179, 216], ["sum", "sum", "sum", "sum", "sum", "traci_count", "sum", "traci_count", "sum", "sum", "sum", "sum", "traci.simulationStep", "time.sleep", "sum", "sum", "sum", "sum", "traci_count", "traci_count", "traci_count", "traci_count", "traci_count", "traci_count", "traci_count", "traci_count", "traci_count", "traci_count", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "traci_jam", "traci_jam", "traci_jam", "traci_jam", "range", "range", "range", "range"], "methods", ["None"], ["", "def", "run_simulation", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "total_num_n", "+=", "sum", "(", "[", "traci_count", "(", "self", ".", "det_count_n", "[", "i", "]", ")", "for", "i", "in", "range", "(", "4", ")", "]", ")", "\n", "self", ".", "total_num_e", "+=", "sum", "(", "[", "traci_count", "(", "self", ".", "det_count_e", "[", "i", "]", ")", "for", "i", "in", "range", "(", "4", ")", "]", ")", "\n", "self", ".", "total_num_s", "+=", "sum", "(", "[", "traci_count", "(", "self", ".", "det_count_s", "[", "i", "]", ")", "for", "i", "in", "range", "(", "5", ")", "]", ")", "\n", "self", ".", "total_num_w", "+=", "sum", "(", "[", "traci_count", "(", "self", ".", "det_count_w", "[", "i", "]", ")", "for", "i", "in", "range", "(", "5", ")", "]", ")", "\n", "\n", "self", ".", "num_n_s", "=", "sum", "(", "[", "traci_count", "(", "self", ".", "det_light_n", "[", "i", "]", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "self", ".", "num_n_e", "=", "traci_count", "(", "self", ".", "det_light_n", "[", "3", "]", ")", "\n", "\n", "self", ".", "num_e_w", "=", "sum", "(", "[", "traci_count", "(", "self", ".", "det_light_e", "[", "i", "]", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "self", ".", "num_e_s", "=", "traci_count", "(", "self", ".", "det_light_e", "[", "3", "]", ")", "\n", "\n", "self", ".", "num_s_n", "=", "sum", "(", "[", "traci_count", "(", "self", ".", "det_light_s", "[", "i", "]", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "self", ".", "num_s_w", "=", "sum", "(", "[", "traci_count", "(", "self", ".", "det_light_s", "[", "i", "]", ")", "for", "i", "in", "range", "(", "3", ",", "5", ")", "]", ")", "\n", "\n", "self", ".", "num_w_e", "=", "sum", "(", "[", "traci_count", "(", "self", ".", "det_light_w", "[", "i", "]", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "self", ".", "num_w_n", "=", "sum", "(", "[", "traci_count", "(", "self", ".", "det_light_w", "[", "i", "]", ")", "for", "i", "in", "range", "(", "3", ",", "5", ")", "]", ")", "\n", "\n", "if", "self", ".", "sumo_step", "<", "3", ":", "\n", "            ", "self", ".", "queue_n", ",", "self", ".", "queue_e", ",", "self", ".", "queue_s", ",", "self", ".", "queue_w", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "queue_n", "=", "sum", "(", "[", "traci_jam", "(", "self", ".", "det_light_n", "[", "i", "]", ")", "for", "i", "in", "range", "(", "4", ")", "]", ")", "\n", "self", ".", "queue_e", "=", "sum", "(", "[", "traci_jam", "(", "self", ".", "det_light_e", "[", "i", "]", ")", "for", "i", "in", "range", "(", "4", ")", "]", ")", "\n", "self", ".", "queue_s", "=", "sum", "(", "[", "traci_jam", "(", "self", ".", "det_light_s", "[", "i", "]", ")", "for", "i", "in", "range", "(", "5", ")", "]", ")", "\n", "self", ".", "queue_w", "=", "sum", "(", "[", "traci_jam", "(", "self", ".", "det_light_w", "[", "i", "]", ")", "for", "i", "in", "range", "(", "5", ")", "]", ")", "\n", "\n", "", "self", ".", "queue_NS", "+=", "self", ".", "queue_n", "+", "self", ".", "queue_s", "\n", "self", ".", "queue_EW", "+=", "self", ".", "queue_e", "+", "self", ".", "queue_w", "\n", "\n", "# if self.mode == \"gui\" and self.sumo_step % 1 == 0:", "\n", "#     traci.gui.screenshot('View #0', \"Frames/\" + self.folder + \"/Screenshot_{}.png\".format(self.sumo_step))", "\n", "#     time.sleep(0.01)", "\n", "\n", "traci", ".", "simulationStep", "(", ")", "\n", "self", ".", "sumo_step", "+=", "1", "\n", "time", ".", "sleep", "(", "self", ".", "time_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.route_sample": [[217, 284], ["random.seed", "random.uniform", "random.uniform", "random.uniform", "random.uniform"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.seed"], ["", "def", "route_sample", "(", "self", ")", ":", "\n", "# random.seed(random.randint(0, 100000000))", "\n", "        ", "random", ".", "seed", "(", "4", ")", "\n", "\n", "self", ".", "prob", "=", "{", "\n", "# Traffic from east", "\n", "'ew'", ":", "0.008", ",", "\n", "'es'", ":", "0.005", ",", "\n", "'en'", ":", "0.005", ",", "\n", "\n", "# Traffic from north", "\n", "'nw'", ":", "0.03", ",", "\n", "'ne'", ":", "0.03", ",", "\n", "'ns'", ":", "0.2", ",", "\n", "\n", "# Traffic from west", "\n", "'we'", ":", "0.008", ",", "\n", "'wn'", ":", "0.005", ",", "\n", "'ws'", ":", "0.005", ",", "\n", "\n", "# Traffic from south", "\n", "'se'", ":", "0.03", ",", "\n", "'sw'", ":", "0.03", ",", "\n", "'sn'", ":", "0.2", ",", "\n", "\n", "# Pedestrian generator", "\n", "'pn'", ":", "random", ".", "uniform", "(", "0.005", ",", "0.03", ")", ",", "\n", "'pe'", ":", "random", ".", "uniform", "(", "0.005", ",", "0.03", ")", ",", "\n", "'ps'", ":", "random", ".", "uniform", "(", "0.005", ",", "0.03", ")", ",", "\n", "'pw'", ":", "random", ".", "uniform", "(", "0.005", ",", "0.03", ")", "\n", "}", "\n", "\n", "# self.prob = {", "\n", "#     # Traffic from east", "\n", "#     'ew': random.uniform(0.005, 0.08),", "\n", "#     'es': random.uniform(0.005, 0.04),", "\n", "#     'en': random.uniform(0.005, 0.04),", "\n", "#", "\n", "#     # Traffic from north", "\n", "#     'nw': random.uniform(0.005, 0.02),", "\n", "#     'ne': random.uniform(0.005, 0.02),", "\n", "#     'ns': random.uniform(0.005, 0.04),", "\n", "#", "\n", "#     # Traffic from west", "\n", "#     'we': random.uniform(0.005, 0.08),", "\n", "#     'wn': random.uniform(0.005, 0.04),", "\n", "#     'ws': random.uniform(0.005, 0.04),", "\n", "#", "\n", "#     # Traffic from south", "\n", "#     'se': random.uniform(0.005, 0.02),", "\n", "#     'sw': random.uniform(0.005, 0.02),", "\n", "#     'sn': random.uniform(0.005, 0.04),", "\n", "#", "\n", "#     # Pedestrian generator", "\n", "#     'pn': random.uniform(0.005, 0.02),", "\n", "#     'pe': random.uniform(0.005, 0.02),", "\n", "#     'ps': random.uniform(0.005, 0.02),", "\n", "#     'pw': random.uniform(0.005, 0.02)", "\n", "# }", "\n", "\n", "return", "{", "\n", "\"en\"", ":", "self", ".", "prob", "[", "'en'", "]", ",", "\"ew\"", ":", "self", ".", "prob", "[", "'ew'", "]", ",", "\"es\"", ":", "self", ".", "prob", "[", "'es'", "]", ",", "\n", "\"nw\"", ":", "self", ".", "prob", "[", "'nw'", "]", ",", "\"ns\"", ":", "self", ".", "prob", "[", "'ns'", "]", ",", "\"ne\"", ":", "self", ".", "prob", "[", "'ne'", "]", ",", "\n", "\"ws\"", ":", "self", ".", "prob", "[", "'ws'", "]", ",", "\"we\"", ":", "self", ".", "prob", "[", "'we'", "]", ",", "\"wn\"", ":", "self", ".", "prob", "[", "'wn'", "]", ",", "\n", "\"se\"", ":", "self", ".", "prob", "[", "'se'", "]", ",", "\"sn\"", ":", "self", ".", "prob", "[", "'sn'", "]", ",", "\"sw\"", ":", "self", ".", "prob", "[", "'sw'", "]", ",", "\n", "\"pn\"", ":", "self", ".", "prob", "[", "'pn'", "]", ",", "\"pe\"", ":", "self", ".", "prob", "[", "'pe'", "]", ",", "\"ps\"", ":", "self", ".", "prob", "[", "'ps'", "]", ",", "\n", "\"pw\"", ":", "self", ".", "prob", "[", "'pw'", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.write_routes": [[286, 290], ["necTraffic_env.NECTraffic.route_sample", "open", "f.write", "string.Template().substitute", "string.Template"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.route_sample"], ["", "def", "write_routes", "(", "self", ")", ":", "\n", "        ", "self", ".", "route_info", "=", "self", ".", "route_sample", "(", ")", "\n", "with", "open", "(", "self", ".", "tmpfile", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "Template", "(", "self", ".", "route", ")", ".", "substitute", "(", "self", ".", "route_info", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.seed": [[291, 294], ["gym.utils.seeding.np_random"], "methods", ["None"], ["", "", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.get_state": [[301, 309], ["None"], "methods", ["None"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "\n", "        ", "state", "=", "[", "\n", "(", "self", ".", "num_n_s", "+", "self", ".", "num_s_n", ")", "/", "10", ",", "(", "self", ".", "num_n_e", "+", "self", ".", "num_s_w", ")", "/", "10", ",", "\n", "(", "self", ".", "num_e_w", "+", "self", ".", "num_w_e", ")", "/", "10", ",", "(", "self", ".", "num_e_s", "+", "self", ".", "num_w_n", ")", "/", "10", "\n", "]", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.get_reward": [[312, 337], ["sum", "sum", "necTraffic_env.NECTraffic.get_state", "necTraffic_env.NECTraffic.prob.values", "necTraffic_env.sigmoid"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.get_state", "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.sigmoid"], ["", "def", "get_reward", "(", "self", ")", ":", "\n", "\n", "        ", "reward", "=", "0.0", "\n", "\n", "num_of_vehicles", "=", "sum", "(", "self", ".", "get_state", "(", ")", ")", "\n", "queue", "=", "self", ".", "queue_n", "+", "self", ".", "queue_e", "+", "self", ".", "queue_s", "+", "self", ".", "queue_w", "\n", "flicker", "=", "self", ".", "action_taken", "\n", "sum_of_prob", "=", "sum", "(", "self", ".", "prob", ".", "values", "(", ")", ")", "\n", "\n", "# Main reward definition", "\n", "reward", "-=", "(", "(", "1", "/", "sum_of_prob", ")", "*", "queue", ")", "/", "5000", "\n", "reward", "-=", "0.01", "*", "flicker", "\n", "\n", "# Facilitating rewards", "\n", "if", "num_of_vehicles", "==", "0", "and", "flicker", ":", "\n", "            ", "reward", "-=", "0.2", "\n", "\n", "# End of episode bonus rewards", "\n", "", "done", "=", "self", ".", "sumo_step", ">", "self", ".", "simulation_end", "\n", "total_wait", "=", "self", ".", "queue_NS", "+", "self", ".", "queue_EW", "\n", "\n", "if", "done", ":", "\n", "            ", "reward", "=", "sigmoid", "(", "total_wait", ")", "\n", "\n", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.get_info": [[340, 351], ["None"], "methods", ["None"], ["", "def", "get_info", "(", "self", ")", ":", "\n", "\n", "        ", "total_num_NS", "=", "self", ".", "total_num_n", "+", "self", ".", "total_num_s", "\n", "total_num_EW", "=", "self", ".", "total_num_e", "+", "self", ".", "total_num_w", "\n", "\n", "return", "[", "\n", "self", ".", "sumo_step", ",", "self", ".", "num_flicker", ",", "\n", "(", "self", ".", "queue_NS", ",", "self", ".", "queue_EW", ")", ",", "\n", "(", "total_num_NS", ",", "total_num_EW", ")", ",", "\n", "(", "[", "self", ".", "num_n_s", ",", "self", ".", "num_n_e", "]", ",", "[", "self", ".", "num_e_w", ",", "self", ".", "num_e_s", "]", ",", "\n", "[", "self", ".", "num_s_n", ",", "self", ".", "num_s_w", "]", ",", "[", "self", ".", "num_w_e", ",", "self", ".", "num_w_n", "]", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.step": [[355, 416], ["necTraffic_env.NECTraffic.get_info", "next_state.append", "range", "Light.terminate_green", "traci.trafficlight.setRedYellowGreenState", "range", "Light.terminate_green", "traci.trafficlight.setRedYellowGreenState", "range", "Light.next_phase", "traci.trafficlight.setRedYellowGreenState", "range", "necTraffic_env.NECTraffic.run_simulation", "next_state.extend", "necTraffic_env.NECTraffic.run_simulation", "necTraffic_env.NECTraffic.run_simulation", "necTraffic_env.NECTraffic.run_simulation", "next_state.extend", "necTraffic_env.NECTraffic.get_state", "necTraffic_env.NECTraffic.get_reward", "necTraffic_env.NECTraffic.get_reward", "necTraffic_env.NECTraffic.get_reward", "necTraffic_env.NECTraffic.get_state", "necTraffic_env.NECTraffic.get_reward"], "methods", ["home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.get_info", "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.TrafficLight.terminate_green", "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.TrafficLight.terminate_green", "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.TrafficLight.next_phase", "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.run_simulation", "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.run_simulation", "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.run_simulation", "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.run_simulation", "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.get_state", "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.get_reward", "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.get_reward", "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.get_reward", "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.get_state", "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.NECTraffic.get_reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "\n", "        ", "Light", "=", "self", ".", "light", "\n", "phase", "=", "3", "*", "action", "\n", "next_state", "=", "[", "]", "\n", "reward", "=", "0.0", "\n", "\n", "# Similar action (traffic light remains the same)", "\n", "if", "phase", "==", "Light", ".", "phase", ":", "\n", "\n", "            ", "self", ".", "action_taken", "=", "False", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "green_time", ")", ":", "\n", "                ", "self", ".", "run_simulation", "(", ")", "\n", "# time.sleep(0.03)", "\n", "next_state", ".", "extend", "(", "self", ".", "get_state", "(", ")", ")", "\n", "if", "not", "self", ".", "sumo_step", ">", "self", ".", "simulation_end", "+", "1", ":", "\n", "                    ", "reward", "+=", "self", ".", "get_reward", "(", ")", "\n", "\n", "# Different action (traffic light switches)", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "num_flicker", "+=", "1", "\n", "self", ".", "action_taken", "=", "True", "\n", "\n", "Light", ".", "phase", ",", "Light", ".", "signal", "=", "Light", ".", "terminate_green", "(", ")", "\n", "traci", ".", "trafficlight", ".", "setRedYellowGreenState", "(", "\"0\"", ",", "Light", ".", "signal", ")", "\n", "\n", "# Yellow Phase", "\n", "for", "i", "in", "range", "(", "self", ".", "yellow_time", ")", ":", "\n", "                ", "self", ".", "run_simulation", "(", ")", "\n", "# time.sleep(0.03)", "\n", "if", "not", "self", ".", "sumo_step", ">", "self", ".", "simulation_end", "+", "1", ":", "\n", "                    ", "reward", "+=", "self", ".", "get_reward", "(", ")", "\n", "", "self", ".", "action_taken", "=", "False", "\n", "\n", "", "Light", ".", "phase", ",", "Light", ".", "signal", "=", "Light", ".", "terminate_green", "(", ")", "\n", "traci", ".", "trafficlight", ".", "setRedYellowGreenState", "(", "\"0\"", ",", "Light", ".", "signal", ")", "\n", "\n", "# All Red Phase", "\n", "for", "i", "in", "range", "(", "self", ".", "red_time", ")", ":", "\n", "                ", "self", ".", "run_simulation", "(", ")", "\n", "# time.sleep(0.03)", "\n", "if", "not", "self", ".", "sumo_step", ">", "self", ".", "simulation_end", "+", "1", ":", "\n", "                    ", "reward", "+=", "self", ".", "get_reward", "(", ")", "\n", "\n", "", "", "Light", ".", "phase", ",", "Light", ".", "signal", "=", "Light", ".", "next_phase", "(", "phase", ")", "\n", "traci", ".", "trafficlight", ".", "setRedYellowGreenState", "(", "\"0\"", ",", "Light", ".", "signal", ")", "\n", "\n", "# Next Green-Red Phase", "\n", "for", "i", "in", "range", "(", "self", ".", "green_time", ")", ":", "\n", "                ", "self", ".", "run_simulation", "(", ")", "\n", "# time.sleep(0.03)", "\n", "next_state", ".", "extend", "(", "self", ".", "get_state", "(", ")", ")", "\n", "if", "not", "self", ".", "sumo_step", ">", "self", ".", "simulation_end", "+", "1", ":", "\n", "                    ", "reward", "+=", "self", ".", "get_reward", "(", ")", "\n", "\n", "", "", "", "info", "=", "self", ".", "get_info", "(", ")", "\n", "next_state", ".", "append", "(", "Light", ".", "phase", ")", "\n", "done", "=", "self", ".", "sumo_step", ">", "self", ".", "simulation_end", "\n", "\n", "return", "next_state", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.siavash91_TC-DQN.envs.necTraffic_env.sigmoid": [[28, 31], ["numpy.exp"], "function", ["None"], ["def", "sigmoid", "(", "x", ")", ":", "\n", "    ", "sig", "=", "4.5", "*", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "0.004", "*", "(", "x", "-", "1500", ")", ")", ")", "-", "0.5", "\n", "return", "sig", "\n", "\n"]]}