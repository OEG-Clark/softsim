{"home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning.LightningCPC.__init__": [[62, 94], ["pytorch_lightning.LightningModule.__init__", "clinical_ts.cpc.CPCModel", "print", "eval"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "LightningCPC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "hparams", "=", "hparams", "\n", "self", ".", "lr", "=", "self", ".", "hparams", ".", "lr", "\n", "\n", "#these coincide with the adapted wav2vec2 params", "\n", "if", "(", "self", ".", "hparams", ".", "fc_encoder", ")", ":", "\n", "            ", "strides", "=", "[", "1", "]", "*", "4", "\n", "kss", "=", "[", "1", "]", "*", "4", "\n", "features", "=", "[", "512", "]", "*", "4", "\n", "", "else", ":", "#strided conv encoder", "\n", "            ", "strides", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "#original wav2vec2 [5,2,2,2,2,2] original cpc [5,4,2,2,2]", "\n", "kss", "=", "[", "10", ",", "4", ",", "4", ",", "4", "]", "#original wav2vec2 [10,3,3,3,3,2] original cpc [18,8,4,4,4]", "\n", "features", "=", "[", "512", "]", "*", "4", "#wav2vec2 [512]*6 original cpc [512]*5", "\n", "\n", "", "if", "(", "self", ".", "hparams", ".", "finetune", ")", ":", "\n", "            ", "self", ".", "criterion", "=", "F", ".", "cross_entropy", "if", "self", ".", "hparams", ".", "finetune_dataset", "==", "\"thew\"", "else", "F", ".", "binary_cross_entropy_with_logits", "\n", "if", "(", "self", ".", "hparams", ".", "finetune_dataset", "==", "\"thew\"", ")", ":", "\n", "                ", "num_classes", "=", "5", "\n", "", "elif", "(", "self", ".", "hparams", ".", "finetune_dataset", "==", "\"ptbxl_super\"", ")", ":", "\n", "                ", "num_classes", "=", "5", "\n", "", "if", "(", "self", ".", "hparams", ".", "finetune_dataset", "==", "\"ptbxl_all\"", ")", ":", "\n", "                ", "num_classes", "=", "71", "\n", "", "", "else", ":", "\n", "            ", "num_classes", "=", "None", "\n", "\n", "", "self", ".", "model_cpc", "=", "CPCModel", "(", "input_channels", "=", "self", ".", "hparams", ".", "input_channels", ",", "strides", "=", "strides", ",", "kss", "=", "kss", ",", "features", "=", "features", ",", "n_hidden", "=", "self", ".", "hparams", ".", "n_hidden", ",", "n_layers", "=", "self", ".", "hparams", ".", "n_layers", ",", "mlp", "=", "self", ".", "hparams", ".", "mlp", ",", "lstm", "=", "not", "(", "self", ".", "hparams", ".", "gru", ")", ",", "bias_proj", "=", "self", ".", "hparams", ".", "bias", ",", "num_classes", "=", "num_classes", ",", "skip_encoder", "=", "self", ".", "hparams", ".", "skip_encoder", ",", "bn_encoder", "=", "not", "(", "self", ".", "hparams", ".", "no_bn_encoder", ")", ",", "lin_ftrs_head", "=", "[", "]", "if", "self", ".", "hparams", ".", "linear_eval", "else", "eval", "(", "self", ".", "hparams", ".", "lin_ftrs_head", ")", ",", "ps_head", "=", "0", "if", "self", ".", "hparams", ".", "linear_eval", "else", "self", ".", "hparams", ".", "dropout_head", ",", "bn_head", "=", "False", "if", "self", ".", "hparams", ".", "linear_eval", "else", "not", "(", "self", ".", "hparams", ".", "no_bn_head", ")", ")", "\n", "\n", "target_fs", "=", "100", "\n", "if", "(", "not", "(", "self", ".", "hparams", ".", "finetune", ")", ")", ":", "\n", "            ", "print", "(", "\"CPC pretraining:\\ndownsampling factor:\"", ",", "self", ".", "model_cpc", ".", "encoder_downsampling_factor", ",", "\"\\nchunk length(s)\"", ",", "self", ".", "model_cpc", ".", "encoder_downsampling_factor", "/", "target_fs", ",", "\"\\npixels predicted ahead:\"", ",", "self", ".", "model_cpc", ".", "encoder_downsampling_factor", "*", "self", ".", "hparams", ".", "steps_predicted", ",", "\"\\nseconds predicted ahead:\"", ",", "self", ".", "model_cpc", ".", "encoder_downsampling_factor", "*", "self", ".", "hparams", ".", "steps_predicted", "/", "target_fs", ",", "\"\\nRNN input size:\"", ",", "self", ".", "hparams", ".", "input_size", "//", "self", ".", "model_cpc", ".", "encoder_downsampling_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning.LightningCPC.forward": [[95, 97], ["main_cpc_lightning.LightningCPC.model_cpc"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model_cpc", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning.LightningCPC._step": [[98, 109], ["main_cpc_lightning.LightningCPC.forward", "main_cpc_lightning.LightningCPC.criterion", "main_cpc_lightning.LightningCPC.log", "main_cpc_lightning.LightningCPC.model_cpc.cpc_loss", "main_cpc_lightning.LightningCPC.log", "main_cpc_lightning.LightningCPC.log", "main_cpc_lightning.LightningCPC.detach"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.ResBlock.forward", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.cpc.CPCModel.cpc_loss"], ["", "def", "_step", "(", "self", ",", "data_batch", ",", "batch_idx", ",", "train", ")", ":", "\n", "        ", "if", "(", "self", ".", "hparams", ".", "finetune", ")", ":", "\n", "            ", "preds", "=", "self", ".", "forward", "(", "data_batch", "[", "0", "]", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "preds", ",", "data_batch", "[", "1", "]", ")", "\n", "self", ".", "log", "(", "\"train_loss\"", "if", "train", "else", "\"val_loss\"", ",", "loss", ")", "\n", "return", "{", "'loss'", ":", "loss", ",", "\"preds\"", ":", "preds", ".", "detach", "(", ")", ",", "\"targs\"", ":", "data_batch", "[", "1", "]", "}", "\n", "", "else", ":", "\n", "            ", "loss", ",", "acc", "=", "self", ".", "model_cpc", ".", "cpc_loss", "(", "data_batch", "[", "0", "]", ",", "steps_predicted", "=", "self", ".", "hparams", ".", "steps_predicted", ",", "n_false_negatives", "=", "self", ".", "hparams", ".", "n_false_negatives", ",", "negatives_from_same_seq_only", "=", "self", ".", "hparams", ".", "negatives_from_same_seq_only", ",", "eval_acc", "=", "True", ")", "\n", "self", ".", "log", "(", "\"loss\"", "if", "train", "else", "\"val_loss\"", ",", "loss", ")", "\n", "self", ".", "log", "(", "\"acc\"", "if", "train", "else", "\"val_acc\"", ",", "acc", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning.LightningCPC.training_step": [[110, 114], ["main_cpc_lightning.LightningCPC._step", "main_cpc_lightning._freeze_bn_stats"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning.LightningCPC._step", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning._freeze_bn_stats"], ["", "", "def", "training_step", "(", "self", ",", "train_batch", ",", "batch_idx", ")", ":", "\n", "        ", "if", "(", "self", ".", "hparams", ".", "linear_eval", ")", ":", "\n", "            ", "_freeze_bn_stats", "(", "self", ")", "\n", "", "return", "self", ".", "_step", "(", "train_batch", ",", "batch_idx", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning.LightningCPC.validation_step": [[115, 117], ["main_cpc_lightning.LightningCPC._step"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning.LightningCPC._step"], ["", "def", "validation_step", "(", "self", ",", "val_batch", ",", "batch_idx", ",", "dataloader_idx", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "_step", "(", "val_batch", ",", "batch_idx", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning.LightningCPC.validation_epoch_end": [[118, 138], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid.cpu().numpy", "torch.sigmoid.cpu().numpy", "[].to.cpu().numpy", "clinical_ts.eval_utils_cafa.eval_scores", "main_cpc_lightning.LightningCPC.val_dataset.get_id_mapping", "clinical_ts.timeseries_utils.aggregate_predictions", "clinical_ts.eval_utils_cafa.eval_scores", "main_cpc_lightning.LightningCPC.log_dict", "print", "torch.softmax", "torch.softmax", "[].to", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid.cpu", "torch.sigmoid.cpu", "[].to.cpu", "str", "str", "str", "str", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "len"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.eval_utils_cafa.eval_scores", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.TimeseriesDatasetCrops.get_id_mapping", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.aggregate_predictions", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.eval_utils_cafa.eval_scores"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs_all", ")", ":", "\n", "        ", "if", "(", "self", ".", "hparams", ".", "finetune", ")", ":", "\n", "            ", "for", "dataloader_idx", ",", "outputs", "in", "enumerate", "(", "outputs_all", ")", ":", "#multiple val dataloaders", "\n", "                ", "preds_all", "=", "torch", ".", "cat", "(", "[", "x", "[", "'preds'", "]", "for", "x", "in", "outputs", "]", ")", "\n", "targs_all", "=", "torch", ".", "cat", "(", "[", "x", "[", "'targs'", "]", "for", "x", "in", "outputs", "]", ")", "\n", "if", "(", "self", ".", "hparams", ".", "finetune_dataset", "==", "\"thew\"", ")", ":", "\n", "                    ", "preds_all", "=", "F", ".", "softmax", "(", "preds_all", ",", "dim", "=", "-", "1", ")", "\n", "targs_all", "=", "torch", ".", "eye", "(", "len", "(", "self", ".", "lbl_itos", ")", ")", "[", "targs_all", "]", ".", "to", "(", "preds", ".", "device", ")", "\n", "", "else", ":", "\n", "                    ", "preds_all", "=", "torch", ".", "sigmoid", "(", "preds_all", ")", "\n", "", "preds_all", "=", "preds_all", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "targs_all", "=", "targs_all", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "#instance level score", "\n", "res", "=", "eval_scores", "(", "targs_all", ",", "preds_all", ",", "classes", "=", "self", ".", "lbl_itos", ")", "\n", "\n", "idmap", "=", "self", ".", "val_dataset", ".", "get_id_mapping", "(", ")", "\n", "preds_all_agg", ",", "targs_all_agg", "=", "aggregate_predictions", "(", "preds_all", ",", "targs_all", ",", "idmap", ",", "aggregate_fn", "=", "np", ".", "mean", ")", "\n", "res_agg", "=", "eval_scores", "(", "targs_all_agg", ",", "preds_all_agg", ",", "classes", "=", "self", ".", "lbl_itos", ")", "\n", "self", ".", "log_dict", "(", "{", "\"macro_auc_agg\"", "+", "str", "(", "dataloader_idx", ")", ":", "res_agg", "[", "\"label_AUC\"", "]", "[", "\"macro\"", "]", ",", "\"macro_auc_noagg\"", "+", "str", "(", "dataloader_idx", ")", ":", "res", "[", "\"label_AUC\"", "]", "[", "\"macro\"", "]", "}", ")", "\n", "print", "(", "\"epoch\"", ",", "self", ".", "current_epoch", ",", "\"macro_auc_agg\"", "+", "str", "(", "dataloader_idx", ")", "+", "\":\"", ",", "res_agg", "[", "\"label_AUC\"", "]", "[", "\"macro\"", "]", ",", "\"macro_auc_noagg\"", "+", "str", "(", "dataloader_idx", ")", "+", "\":\"", ",", "res", "[", "\"label_AUC\"", "]", "[", "\"macro\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning.LightningCPC.on_fit_start": [[140, 144], ["print", "copy.deepcopy", "main_cpc_lightning.LightningCPC.state_dict().copy", "main_cpc_lightning.LightningCPC.state_dict"], "methods", ["None"], ["", "", "", "def", "on_fit_start", "(", "self", ")", ":", "\n", "        ", "if", "(", "self", ".", "hparams", ".", "linear_eval", ")", ":", "\n", "            ", "print", "(", "\"copying state dict before training for sanity check after training\"", ")", "\n", "self", ".", "state_dict_pre", "=", "copy", ".", "deepcopy", "(", "self", ".", "state_dict", "(", ")", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning.LightningCPC.on_fit_end": [[146, 149], ["main_cpc_lightning.sanity_check"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.sanity_check"], ["", "", "def", "on_fit_end", "(", "self", ")", ":", "\n", "        ", "if", "(", "self", ".", "hparams", ".", "linear_eval", ")", ":", "\n", "            ", "sanity_check", "(", "self", ",", "self", ".", "state_dict_pre", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning.LightningCPC.setup": [[151, 224], ["enumerate", "pathlib.Path", "clinical_ts.timeseries_utils.load_dataset", "numpy.array", "numpy.array", "df_mapped.strat_fold.max", "train_datasets.append", "val_datasets.append", "print", "print", "print", "len", "print", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "print", "print", "main_cpc_lightning.LightningCPC.hparams.finetune_dataset.startswith", "numpy.array", "df_mapped[].apply", "clinical_ts.timeseries_utils.ToTensor", "torchvision.transforms.Compose", "clinical_ts.timeseries_utils.TimeseriesDatasetCrops", "clinical_ts.timeseries_utils.TimeseriesDatasetCrops", "test_datasets.append", "len", "len", "print", "len", "len", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "print", "numpy.zeros", "clinical_ts.timeseries_utils.TimeseriesDatasetCrops", "len", "len", "main_cpc_lightning.LightningCPC.setup.multihot_encode"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.load_dataset", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.multihot_encode"], ["", "", "def", "setup", "(", "self", ",", "stage", ")", ":", "\n", "# configure dataset params", "\n", "        ", "chunkify_train", "=", "False", "\n", "chunk_length_train", "=", "self", ".", "hparams", ".", "input_size", "if", "chunkify_train", "else", "0", "\n", "stride_train", "=", "self", ".", "hparams", ".", "input_size", "\n", "\n", "chunkify_valtest", "=", "True", "\n", "chunk_length_valtest", "=", "self", ".", "hparams", ".", "input_size", "if", "chunkify_valtest", "else", "0", "\n", "stride_valtest", "=", "self", ".", "hparams", ".", "input_size", "//", "2", "\n", "\n", "train_datasets", "=", "[", "]", "\n", "val_datasets", "=", "[", "]", "\n", "test_datasets", "=", "[", "]", "\n", "\n", "for", "i", ",", "target_folder", "in", "enumerate", "(", "self", ".", "hparams", ".", "data", ")", ":", "\n", "            ", "target_folder", "=", "Path", "(", "target_folder", ")", "\n", "\n", "df_mapped", ",", "lbl_itos", ",", "mean", ",", "std", "=", "load_dataset", "(", "target_folder", ")", "\n", "# always use PTB-XL stats", "\n", "mean", "=", "np", ".", "array", "(", "[", "-", "0.00184586", ",", "-", "0.00130277", ",", "0.00017031", ",", "-", "0.00091313", ",", "-", "0.00148835", ",", "-", "0.00174687", ",", "-", "0.00077071", ",", "-", "0.00207407", ",", "0.00054329", ",", "0.00155546", ",", "-", "0.00114379", ",", "-", "0.00035649", "]", ")", "\n", "std", "=", "np", ".", "array", "(", "[", "0.16401004", ",", "0.1647168", ",", "0.23374124", ",", "0.33767231", ",", "0.33362807", ",", "0.30583013", ",", "0.2731171", ",", "0.27554379", ",", "0.17128962", ",", "0.14030828", ",", "0.14606956", ",", "0.14656108", "]", ")", "\n", "\n", "#specific for PTB-XL", "\n", "if", "(", "self", ".", "hparams", ".", "finetune", "and", "self", ".", "hparams", ".", "finetune_dataset", ".", "startswith", "(", "\"ptbxl\"", ")", ")", ":", "\n", "                ", "if", "(", "self", ".", "hparams", ".", "finetune_dataset", "==", "\"ptbxl_super\"", ")", ":", "\n", "                    ", "ptb_xl_label", "=", "\"label_diag_superclass\"", "\n", "", "elif", "(", "self", ".", "hparams", ".", "finetune_dataset", "==", "\"ptbxl_all\"", ")", ":", "\n", "                    ", "ptb_xl_label", "=", "\"label_all\"", "\n", "\n", "", "lbl_itos", "=", "np", ".", "array", "(", "lbl_itos", "[", "ptb_xl_label", "]", ")", "\n", "\n", "def", "multihot_encode", "(", "x", ",", "num_classes", ")", ":", "\n", "                    ", "res", "=", "np", ".", "zeros", "(", "num_classes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "y", "in", "x", ":", "\n", "                        ", "res", "[", "y", "]", "=", "1", "\n", "", "return", "res", "\n", "\n", "", "df_mapped", "[", "\"label\"", "]", "=", "df_mapped", "[", "ptb_xl_label", "+", "\"_filtered_numeric\"", "]", ".", "apply", "(", "lambda", "x", ":", "multihot_encode", "(", "x", ",", "len", "(", "lbl_itos", ")", ")", ")", "\n", "\n", "\n", "", "self", ".", "lbl_itos", "=", "lbl_itos", "\n", "tfms_ptb_xl_cpc", "=", "ToTensor", "(", ")", "if", "self", ".", "hparams", ".", "normalize", "is", "False", "else", "transforms", ".", "Compose", "(", "[", "Normalize", "(", "mean", ",", "std", ")", ",", "ToTensor", "(", ")", "]", ")", "\n", "\n", "max_fold_id", "=", "df_mapped", ".", "strat_fold", ".", "max", "(", ")", "#unfortunately 1-based for PTB-XL; sometimes 100 (Ribeiro)", "\n", "df_train", "=", "df_mapped", "[", "df_mapped", ".", "strat_fold", "<", "(", "max_fold_id", "-", "1", "if", "self", ".", "hparams", ".", "finetune", "else", "max_fold_id", ")", "]", "\n", "df_val", "=", "df_mapped", "[", "df_mapped", ".", "strat_fold", "==", "(", "max_fold_id", "-", "1", "if", "self", ".", "hparams", ".", "finetune", "else", "max_fold_id", ")", "]", "\n", "if", "(", "self", ".", "hparams", ".", "finetune", ")", ":", "\n", "                ", "df_test", "=", "df_mapped", "[", "df_mapped", ".", "strat_fold", "==", "max_fold_id", "]", "\n", "", "train_datasets", ".", "append", "(", "TimeseriesDatasetCrops", "(", "df_train", ",", "self", ".", "hparams", ".", "input_size", ",", "num_classes", "=", "len", "(", "lbl_itos", ")", ",", "data_folder", "=", "target_folder", ",", "chunk_length", "=", "chunk_length_train", ",", "min_chunk_length", "=", "self", ".", "hparams", ".", "input_size", ",", "stride", "=", "stride_train", ",", "transforms", "=", "tfms_ptb_xl_cpc", ",", "annotation", "=", "False", ",", "col_lbl", "=", "\"label\"", "if", "self", ".", "hparams", ".", "finetune", "else", "None", ",", "memmap_filename", "=", "target_folder", "/", "(", "\"memmap.npy\"", ")", ")", ")", "\n", "val_datasets", ".", "append", "(", "TimeseriesDatasetCrops", "(", "df_val", ",", "self", ".", "hparams", ".", "input_size", ",", "num_classes", "=", "len", "(", "lbl_itos", ")", ",", "data_folder", "=", "target_folder", ",", "chunk_length", "=", "chunk_length_valtest", ",", "min_chunk_length", "=", "self", ".", "hparams", ".", "input_size", ",", "stride", "=", "stride_valtest", ",", "transforms", "=", "tfms_ptb_xl_cpc", ",", "annotation", "=", "False", ",", "col_lbl", "=", "\"label\"", "if", "self", ".", "hparams", ".", "finetune", "else", "None", ",", "memmap_filename", "=", "target_folder", "/", "(", "\"memmap.npy\"", ")", ")", ")", "\n", "if", "(", "self", ".", "hparams", ".", "finetune", ")", ":", "\n", "                ", "test_datasets", ".", "append", "(", "TimeseriesDatasetCrops", "(", "df_test", ",", "self", ".", "hparams", ".", "input_size", ",", "num_classes", "=", "len", "(", "lbl_itos", ")", ",", "data_folder", "=", "target_folder", ",", "chunk_length", "=", "chunk_length_valtest", ",", "min_chunk_length", "=", "self", ".", "hparams", ".", "input_size", ",", "stride", "=", "stride_valtest", ",", "transforms", "=", "tfms_ptb_xl_cpc", ",", "annotation", "=", "False", ",", "col_lbl", "=", "\"label\"", ",", "memmap_filename", "=", "target_folder", "/", "(", "\"memmap.npy\"", ")", ")", ")", "\n", "\n", "", "print", "(", "\"\\n\"", ",", "target_folder", ")", "\n", "print", "(", "\"train dataset:\"", ",", "len", "(", "train_datasets", "[", "-", "1", "]", ")", ",", "\"samples\"", ")", "\n", "print", "(", "\"val dataset:\"", ",", "len", "(", "val_datasets", "[", "-", "1", "]", ")", ",", "\"samples\"", ")", "\n", "if", "(", "self", ".", "hparams", ".", "finetune", ")", ":", "\n", "                ", "print", "(", "\"test dataset:\"", ",", "len", "(", "test_datasets", "[", "-", "1", "]", ")", ",", "\"samples\"", ")", "\n", "\n", "", "", "if", "(", "len", "(", "train_datasets", ")", ">", "1", ")", ":", "#multiple data folders", "\n", "            ", "print", "(", "\"\\nCombined:\"", ")", "\n", "self", ".", "train_dataset", "=", "ConcatDataset", "(", "train_datasets", ")", "\n", "self", ".", "val_dataset", "=", "ConcatDataset", "(", "val_datasets", ")", "\n", "print", "(", "\"train dataset:\"", ",", "len", "(", "self", ".", "train_dataset", ")", ",", "\"samples\"", ")", "\n", "print", "(", "\"val dataset:\"", ",", "len", "(", "self", ".", "val_dataset", ")", ",", "\"samples\"", ")", "\n", "if", "(", "self", ".", "hparams", ".", "finetune", ")", ":", "\n", "                ", "self", ".", "test_dataset", "=", "ConcatDataset", "(", "test_datasets", ")", "\n", "print", "(", "\"test dataset:\"", ",", "len", "(", "self", ".", "test_dataset", ")", ",", "\"samples\"", ")", "\n", "", "", "else", ":", "#just a single data folder", "\n", "            ", "self", ".", "train_dataset", "=", "train_datasets", "[", "0", "]", "\n", "self", ".", "val_dataset", "=", "val_datasets", "[", "0", "]", "\n", "if", "(", "self", ".", "hparams", ".", "finetune", ")", ":", "\n", "                ", "self", ".", "test_dataset", "=", "test_datasets", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning.LightningCPC.train_dataloader": [[225, 227], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "", "", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "DataLoader", "(", "self", ".", "train_dataset", ",", "batch_size", "=", "self", ".", "hparams", ".", "batch_size", ",", "num_workers", "=", "4", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning.LightningCPC.val_dataloader": [[228, 233], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "if", "(", "self", ".", "hparams", ".", "finetune", ")", ":", "#multiple val dataloaders", "\n", "            ", "return", "[", "DataLoader", "(", "self", ".", "val_dataset", ",", "batch_size", "=", "self", ".", "hparams", ".", "batch_size", ",", "num_workers", "=", "4", ")", ",", "DataLoader", "(", "self", ".", "test_dataset", ",", "batch_size", "=", "self", ".", "hparams", ".", "batch_size", ",", "num_workers", "=", "4", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "DataLoader", "(", "self", ".", "val_dataset", ",", "batch_size", "=", "self", ".", "hparams", ".", "batch_size", ",", "num_workers", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning.LightningCPC.configure_optimizers": [[234, 250], ["opt", "NotImplementedError", "main_cpc_lightning.LightningCPC.model_cpc.head.parameters", "opt", "opt", "main_cpc_lightning.LightningCPC.parameters", "main_cpc_lightning.LightningCPC.model_cpc.encoder.parameters", "main_cpc_lightning.LightningCPC.model_cpc.rnn.parameters", "main_cpc_lightning.LightningCPC.model_cpc.head.parameters"], "methods", ["None"], ["", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "if", "(", "self", ".", "hparams", ".", "optimizer", "==", "\"sgd\"", ")", ":", "\n", "            ", "opt", "=", "torch", ".", "optim", ".", "SGD", "\n", "", "elif", "(", "self", ".", "hparams", ".", "optimizer", "==", "\"adam\"", ")", ":", "\n", "            ", "opt", "=", "torch", ".", "optim", ".", "AdamW", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unknown Optimizer.\"", ")", "\n", "\n", "", "if", "(", "self", ".", "hparams", ".", "finetune", "and", "(", "self", ".", "hparams", ".", "linear_eval", "or", "self", ".", "hparams", ".", "train_head_only", ")", ")", ":", "\n", "            ", "optimizer", "=", "opt", "(", "self", ".", "model_cpc", ".", "head", ".", "parameters", "(", ")", ",", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "hparams", ".", "weight_decay", ")", "\n", "", "elif", "(", "self", ".", "hparams", ".", "finetune", "and", "self", ".", "hparams", ".", "discriminative_lr_factor", "!=", "1.", ")", ":", "#discrimative lrs", "\n", "            ", "optimizer", "=", "opt", "(", "[", "{", "\"params\"", ":", "self", ".", "model_cpc", ".", "encoder", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "self", ".", "lr", "*", "self", ".", "hparams", ".", "discriminative_lr_factor", "*", "self", ".", "hparams", ".", "discriminative_lr_factor", "}", ",", "{", "\"params\"", ":", "self", ".", "model_cpc", ".", "rnn", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "self", ".", "lr", "*", "self", ".", "hparams", ".", "discriminative_lr_factor", "}", ",", "{", "\"params\"", ":", "self", ".", "model_cpc", ".", "head", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "self", ".", "lr", "}", "]", ",", "self", ".", "hparams", ".", "lr", ",", "weight_decay", "=", "self", ".", "hparams", ".", "weight_decay", ")", "\n", "", "else", ":", "\n", "            ", "optimizer", "=", "opt", "(", "self", ".", "parameters", "(", ")", ",", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "hparams", ".", "weight_decay", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning.LightningCPC.load_weights_from_checkpoint": [[251, 262], ["torch.load", "torch.load", "torch.load", "torch.load", "main_cpc_lightning.LightningCPC.state_dict", "main_cpc_lightning.LightningCPC.update", "main_cpc_lightning.LightningCPC.load_state_dict", "pretrained_dict.items"], "methods", ["None"], ["", "def", "load_weights_from_checkpoint", "(", "self", ",", "checkpoint", ")", ":", "\n", "        ", "\"\"\" Function that loads the weights from a given checkpoint file. \n        based on https://github.com/PyTorchLightning/pytorch-lightning/issues/525\n        \"\"\"", "\n", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ",", ")", "\n", "pretrained_dict", "=", "checkpoint", "[", "\"state_dict\"", "]", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning._freeze_bn_stats": [[32, 39], ["model.modules", "isinstance", "m.eval", "m.train"], "function", ["None"], ["def", "_freeze_bn_stats", "(", "model", ",", "freeze", "=", "True", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "(", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ")", ":", "\n", "            ", "if", "(", "freeze", ")", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "                ", "m", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning.sanity_check": [[40, 59], ["print", "model.state_dict", "list", "print", "model.state_dict.keys", "print", "state_dict[].cpu", "state_dict_pre[].cpu"], "function", ["None"], ["", "", "", "", "def", "sanity_check", "(", "model", ",", "state_dict_pre", ")", ":", "\n", "    ", "\"\"\"\n    Linear classifier should not change any weights other than the linear layer.\n    This sanity check asserts nothing wrong happens (e.g., BN stats updated).\n    \"\"\"", "\n", "print", "(", "\"=> loading state dict for sanity check\"", ")", "\n", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "print", "(", "k", ")", "\n", "# only ignore fc layer", "\n", "if", "'head.1.weight'", "in", "k", "or", "'head.1.bias'", "in", "k", ":", "\n", "            ", "continue", "\n", "\n", "\n", "", "assert", "(", "(", "state_dict", "[", "k", "]", ".", "cpu", "(", ")", "==", "state_dict_pre", "[", "k", "]", ".", "cpu", "(", ")", ")", ".", "all", "(", ")", ")", ",", "'{} is changed in linear classifier training.'", ".", "format", "(", "k", ")", "\n", "\n", "", "print", "(", "\"=> sanity check passed.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning.add_model_specific_args": [[266, 285], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["", "", "def", "add_model_specific_args", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "\"--input-channels\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--normalize\"", ",", "action", "=", "'store_true'", ",", "help", "=", "'Normalize input using PTB-XL stats'", ")", "\n", "parser", ".", "add_argument", "(", "'--mlp'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"False: original CPC True: as in SimCLR\"", ")", "\n", "parser", ".", "add_argument", "(", "'--bias'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"original CPC: no bias\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--n-hidden\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--gru\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--n-layers\"", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "\"--steps-predicted\"", ",", "dest", "=", "\"steps_predicted\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--n-false-negatives\"", ",", "dest", "=", "\"n_false_negatives\"", ",", "type", "=", "int", ",", "default", "=", "128", ")", "\n", "parser", ".", "add_argument", "(", "\"--skip-encoder\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"disable the convolutional encoder i.e. just RNN; for testing\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--fc-encoder\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"use a fully connected encoder (as opposed to an encoder with strided convs)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--negatives-from-same-seq-only\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"only draw false negatives from same sequence (as opposed to drawing from everywhere)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no-bn-encoder\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"switch off batch normalization in encoder\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dropout-head\"", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "\"--train-head-only\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"freeze everything except classification head (note: --linear-eval defaults to no hidden layer in classification head)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lin-ftrs-head\"", ",", "type", "=", "str", ",", "default", "=", "\"[512]\"", ",", "help", "=", "\"hidden layers in the classification head\"", ")", "\n", "parser", ".", "add_argument", "(", "'--no-bn-head'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"use no batch normalization in classification head\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.main_cpc_lightning.add_default_args": [[286, 348], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "add_default_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PyTorch Lightning CPC Training'", ")", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "metavar", "=", "'DIR'", ",", "type", "=", "str", ",", "\n", "help", "=", "'path(s) to dataset'", ",", "action", "=", "'append'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "30", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of total epochs to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "64", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'mini-batch size (default: 256), this is the total '", "\n", "'batch size of all GPUs on the current node when '", "\n", "'using Data Parallel or Distributed Data Parallel'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "'--learning-rate'", ",", "default", "=", "1e-3", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'LR'", ",", "help", "=", "'initial learning rate'", ",", "dest", "=", "'lr'", ")", "\n", "parser", ".", "add_argument", "(", "'--wd'", ",", "'--weight-decay'", ",", "default", "=", "1e-3", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'W'", ",", "help", "=", "'weight decay (default: 0.)'", ",", "\n", "dest", "=", "'weight_decay'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'path to latest checkpoint (default: none)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--pretrained'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'path to pretrained checkpoint (default: none)'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "default", "=", "'adam'", ",", "help", "=", "'sgd/adam'", ")", "#was sgd", "\n", "parser", ".", "add_argument", "(", "'--output-path'", ",", "default", "=", "'.'", ",", "type", "=", "str", ",", "dest", "=", "\"output_path\"", ",", "\n", "help", "=", "'output path'", ")", "\n", "parser", ".", "add_argument", "(", "'--metadata'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "\n", "help", "=", "'metadata for output'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--gpus\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"number of gpus\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-nodes\"", ",", "dest", "=", "\"num_nodes\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"number of compute nodes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--precision\"", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "\"16/32\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--distributed-backend\"", ",", "dest", "=", "\"distributed_backend\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"None/ddp\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--accumulate\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"accumulate grad batches (total-bs=accumulate-batches*bs)\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--input-size\"", ",", "dest", "=", "\"input_size\"", ",", "type", "=", "int", ",", "default", "=", "16000", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--finetune\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"finetuning (downstream classification task)\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--linear-eval\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"linear evaluation instead of full finetuning\"", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--finetune-dataset\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"thew/ptbxl_super/ptbxl_all\"", ",", "\n", "default", "=", "\"thew\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--discriminative-lr-factor\"", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"factor by which the lr decreases per layer group during finetuning\"", ",", "\n", "default", "=", "0.1", "\n", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr-find\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"run lr finder before training run\"", ",", "\n", "default", "=", "False", "\n", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.parse_args": [[29, 62], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"Finetuning tests\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--method\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "nargs", "=", "\"+\"", ",", "default", "=", "\"./data/ptb_xl_fs100\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--discriminative_lr\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_workers\"", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "\"--hidden\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_schedule\"", ",", "default", "=", "\"{}\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--use_pretrained\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--linear_evaluation\"", ",", "\n", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"use linear evaluation\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_noised\"", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"validate also on a noisy dataset\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--noise_level\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "\"level of noise induced to the second validations set\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--folds\"", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "\"number of folds used in finetuning (between 1-8)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tag\"", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval_only\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"only evaluate mode\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--load_finetuned\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--test\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--verbose\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--cpc\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_location\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--l_epochs\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"number of head-only epochs (these are performed first)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--f_epochs\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"number of finetuning epochs (these are perfomed after head-only training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--normalize\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"normalize dataset with ptbxl mean and std\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--bn_head\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--ps_head\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--conv_encoder\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--base_model\"", ",", "default", "=", "\"xresnet1d50\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--widen\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "\"use wide xresnet1d50\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.get_new_state_dict": [[64, 110], ["OrderedDict", "init_state_dict.keys", "len", "len", "lightning_state_dict.keys", "lightning_state_dict.keys", "key.replace", "lightning_state_dict.keys", "key.replace", "lightning_state_dict.keys", "lightning_state_dict.keys"], "function", ["None"], ["", "def", "get_new_state_dict", "(", "init_state_dict", ",", "lightning_state_dict", ",", "method", "=", "\"simclr\"", ")", ":", "\n", "# in case of moco model", "\n", "    ", "from", "collections", "import", "OrderedDict", "\n", "# lightning_state_dict = lightning_state_dict[\"state_dict\"]", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "if", "method", "!=", "\"cpc\"", ":", "\n", "        ", "if", "method", "==", "\"moco\"", ":", "\n", "            ", "for", "key", "in", "init_state_dict", ":", "\n", "                ", "l_key", "=", "\"encoder_q.\"", "+", "key", "\n", "if", "l_key", "in", "lightning_state_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "new_state_dict", "[", "key", "]", "=", "lightning_state_dict", "[", "l_key", "]", "\n", "", "", "", "elif", "method", "==", "\"simclr\"", ":", "\n", "            ", "for", "key", "in", "init_state_dict", ":", "\n", "                ", "if", "\"features\"", "in", "key", ":", "\n", "                    ", "l_key", "=", "key", ".", "replace", "(", "\"features\"", ",", "\"encoder.features\"", ")", "\n", "", "if", "l_key", "in", "lightning_state_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "new_state_dict", "[", "key", "]", "=", "lightning_state_dict", "[", "l_key", "]", "\n", "", "", "", "elif", "method", "==", "\"swav\"", ":", "\n", "\n", "            ", "for", "key", "in", "init_state_dict", ":", "\n", "                ", "if", "\"features\"", "in", "key", ":", "\n", "                    ", "l_key", "=", "key", ".", "replace", "(", "\"features\"", ",", "\"model.features\"", ")", "\n", "", "if", "l_key", "in", "lightning_state_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "new_state_dict", "[", "key", "]", "=", "lightning_state_dict", "[", "l_key", "]", "\n", "", "", "", "elif", "method", "==", "\"byol\"", ":", "\n", "            ", "for", "key", "in", "init_state_dict", ":", "\n", "                ", "l_key", "=", "\"online_network.encoder.\"", "+", "key", "\n", "if", "l_key", "in", "lightning_state_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "new_state_dict", "[", "key", "]", "=", "lightning_state_dict", "[", "l_key", "]", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "(", "\"method unknown\"", ")", "\n", "", "new_state_dict", "[", "\"l1.weight\"", "]", "=", "init_state_dict", "[", "\"l1.weight\"", "]", "\n", "new_state_dict", "[", "\"l1.bias\"", "]", "=", "init_state_dict", "[", "\"l1.bias\"", "]", "\n", "if", "\"l2.weight\"", "in", "init_state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "new_state_dict", "[", "\"l2.weight\"", "]", "=", "init_state_dict", "[", "\"l2.weight\"", "]", "\n", "new_state_dict", "[", "\"l2.bias\"", "]", "=", "init_state_dict", "[", "\"l2.bias\"", "]", "\n", "\n", "", "assert", "(", "len", "(", "init_state_dict", ")", "==", "len", "(", "new_state_dict", ")", ")", "\n", "", "else", ":", "\n", "        ", "for", "key", "in", "init_state_dict", ":", "\n", "            ", "l_key", "=", "\"model_cpc.\"", "+", "key", "\n", "if", "l_key", "in", "lightning_state_dict", ".", "keys", "(", ")", ":", "\n", "                ", "new_state_dict", "[", "key", "]", "=", "lightning_state_dict", "[", "l_key", "]", "\n", "", "if", "\"head\"", "in", "key", ":", "\n", "                ", "new_state_dict", "[", "key", "]", "=", "init_state_dict", "[", "key", "]", "\n", "", "", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.adjust": [[112, 136], ["torch.nn.modules.linear.Linear().to", "torch.nn.modules.linear.Linear().to", "eval.adjust.def_forward"], "function", ["None"], ["", "def", "adjust", "(", "model", ",", "num_classes", ",", "hidden", "=", "False", ")", ":", "\n", "    ", "in_features", "=", "model", ".", "l1", ".", "in_features", "\n", "last_layer", "=", "torch", ".", "nn", ".", "modules", ".", "linear", ".", "Linear", "(", "\n", "in_features", ",", "num_classes", ")", ".", "to", "(", "device", ")", "\n", "if", "hidden", ":", "\n", "        ", "model", ".", "l1", "=", "torch", ".", "nn", ".", "modules", ".", "linear", ".", "Linear", "(", "\n", "in_features", ",", "in_features", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "l2", "=", "last_layer", "\n", "", "else", ":", "\n", "        ", "model", ".", "l1", "=", "last_layer", "\n", "\n", "", "def", "def_forward", "(", "self", ")", ":", "\n", "        ", "def", "new_forward", "(", "x", ")", ":", "\n", "            ", "h", "=", "self", ".", "features", "(", "x", ")", "\n", "h", "=", "h", ".", "squeeze", "(", ")", "\n", "\n", "x", "=", "self", ".", "l1", "(", "h", ")", "\n", "if", "hidden", ":", "\n", "                ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "", "return", "x", "\n", "", "return", "new_forward", "\n", "\n", "", "model", ".", "forward", "=", "def_forward", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.configure_optimizer": [[138, 214], ["print", "print", "print", "torch.optim.AdamW", "torch.optim.AdamW", "model.l1.parameters", "torch.optim.AdamW", "torch.optim.AdamW", "dict", "dict.keys", "set", "sorted", "list", "torch.optim.AdamW", "torch.optim.AdamW", "print", "opt", "model.parameters", "model.named_parameters", "len", "filter", "optimizer_param_list.append", "NotImplementedError", "model.head.parameters", "opt", "print", "print", "print", "opt", "sorted.add", "len", "features_groups.append", "features_groups.append", "model.parameters", "list", "list", "filter", "filter", "model.encoder.parameters", "model.rnn.parameters", "model.head.parameters"], "function", ["None"], ["", "def", "configure_optimizer", "(", "model", ",", "batch_size", ",", "head_only", "=", "False", ",", "discriminative_lr", "=", "False", ",", "base_model", "=", "\"xresnet1d\"", ",", "optimizer", "=", "\"adam\"", ",", "discriminative_lr_factor", "=", "1", ")", ":", "\n", "    ", "loss_fn", "=", "F", ".", "binary_cross_entropy_with_logits", "\n", "if", "base_model", "==", "\"xresnet1d\"", ":", "\n", "        ", "wd", "=", "1e-1", "\n", "if", "head_only", ":", "\n", "            ", "lr", "=", "(", "8e-3", "*", "(", "batch_size", "/", "256", ")", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "\n", "model", ".", "l1", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "wd", ")", "\n", "", "else", ":", "\n", "            ", "lr", "=", "0.01", "\n", "if", "not", "discriminative_lr", ":", "\n", "                ", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "\n", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "wd", ")", "\n", "", "else", ":", "\n", "                ", "param_dict", "=", "dict", "(", "model", ".", "named_parameters", "(", ")", ")", "\n", "keys", "=", "param_dict", ".", "keys", "(", ")", "\n", "weight_layer_nrs", "=", "set", "(", ")", "\n", "for", "key", "in", "keys", ":", "\n", "                    ", "if", "\"features\"", "in", "key", ":", "\n", "# parameter names have the form features.x", "\n", "                        ", "weight_layer_nrs", ".", "add", "(", "key", "[", "9", "]", ")", "\n", "", "", "weight_layer_nrs", "=", "sorted", "(", "weight_layer_nrs", ",", "reverse", "=", "True", ")", "\n", "features_groups", "=", "[", "]", "\n", "while", "len", "(", "weight_layer_nrs", ")", ">", "0", ":", "\n", "                    ", "if", "len", "(", "weight_layer_nrs", ")", ">", "1", ":", "\n", "                        ", "features_groups", ".", "append", "(", "list", "(", "filter", "(", "\n", "lambda", "x", ":", "\"features.\"", "+", "weight_layer_nrs", "[", "0", "]", "in", "x", "or", "\"features.\"", "+", "weight_layer_nrs", "[", "1", "]", "in", "x", ",", "keys", ")", ")", ")", "\n", "del", "weight_layer_nrs", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "                        ", "features_groups", ".", "append", "(", "\n", "list", "(", "filter", "(", "lambda", "x", ":", "\"features.\"", "+", "weight_layer_nrs", "[", "0", "]", "in", "x", ",", "keys", ")", ")", ")", "\n", "del", "weight_layer_nrs", "[", "0", "]", "\n", "# filter linear layers", "\n", "", "", "linears", "=", "list", "(", "filter", "(", "lambda", "x", ":", "\"l\"", "in", "x", ",", "keys", ")", ")", "\n", "groups", "=", "[", "linears", "]", "+", "features_groups", "\n", "optimizer_param_list", "=", "[", "]", "\n", "tmp_lr", "=", "lr", "\n", "\n", "for", "layers", "in", "groups", ":", "\n", "                    ", "layer_params", "=", "[", "param_dict", "[", "param_name", "]", "\n", "for", "param_name", "in", "layers", "]", "\n", "optimizer_param_list", ".", "append", "(", "\n", "{", "\"params\"", ":", "layer_params", ",", "\"lr\"", ":", "tmp_lr", "}", ")", "\n", "tmp_lr", "/=", "4", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "\n", "optimizer_param_list", ",", "lr", "=", "lr", ",", "weight_decay", "=", "wd", ")", "\n", "\n", "", "", "print", "(", "\"lr\"", ",", "lr", ")", "\n", "print", "(", "\"wd\"", ",", "wd", ")", "\n", "print", "(", "\"batch size\"", ",", "batch_size", ")", "\n", "\n", "", "elif", "base_model", "==", "\"cpc\"", ":", "\n", "        ", "if", "(", "optimizer", "==", "\"sgd\"", ")", ":", "\n", "            ", "opt", "=", "torch", ".", "optim", ".", "SGD", "\n", "", "elif", "(", "optimizer", "==", "\"adam\"", ")", ":", "\n", "            ", "opt", "=", "torch", ".", "optim", ".", "AdamW", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unknown Optimizer.\"", ")", "\n", "", "lr", "=", "1e-4", "\n", "wd", "=", "1e-3", "\n", "if", "(", "head_only", ")", ":", "\n", "            ", "lr", "=", "1e-3", "\n", "print", "(", "\"Linear eval: model head\"", ",", "model", ".", "head", ")", "\n", "optimizer", "=", "opt", "(", "model", ".", "head", ".", "parameters", "(", ")", ",", "lr", ",", "weight_decay", "=", "wd", ")", "\n", "", "elif", "(", "discriminative_lr_factor", "!=", "1.", ")", ":", "# discrimative lrs", "\n", "            ", "optimizer", "=", "opt", "(", "[", "{", "\"params\"", ":", "model", ".", "encoder", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "lr", "*", "discriminative_lr_factor", "*", "discriminative_lr_factor", "}", ",", "{", "\n", "\"params\"", ":", "model", ".", "rnn", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "lr", "*", "discriminative_lr_factor", "}", ",", "{", "\"params\"", ":", "model", ".", "head", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "lr", "}", "]", ",", "lr", ",", "weight_decay", "=", "wd", ")", "\n", "print", "(", "\"Finetuning: model head\"", ",", "model", ".", "head", ")", "\n", "print", "(", "\"discriminative lr: \"", ",", "discriminative_lr_factor", ")", "\n", "", "else", ":", "\n", "            ", "lr", "=", "1e-3", "\n", "print", "(", "\"normal supervised training\"", ")", "\n", "optimizer", "=", "opt", "(", "model", ".", "parameters", "(", ")", ",", "lr", ",", "weight_decay", "=", "wd", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "(", "\"model unknown\"", ")", "\n", "", "return", "loss_fn", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.load_model": [[216, 304], ["print", "torch.load", "torch.load", "clinical_ts.cpc.CPCModel().to", "CPCModel().to.load_state_dict", "models.resnet_simclr.ResNetSimCLR().to", "torch.load", "torch.load", "models.resnet_simclr.ResNetSimCLR().to", "eval.adjust", "torch.load.keys", "print", "eval.get_new_state_dict", "print", "get_new_state_dict.keys", "get_new_state_dict.keys", "eval.adjust", "CPCModel().to.load_state_dict", "CPCModel().to.state_dict", "eval.get_new_state_dict", "CPCModel().to.load_state_dict", "eval.adjust", "clinical_ts.cpc.CPCModel().to", "Exception", "clinical_ts.cpc.CPCModel", "CPCModel().to.state_dict", "models.resnet_simclr.ResNetSimCLR", "Exception", "models.resnet_simclr.ResNetSimCLR", "clinical_ts.cpc.CPCModel"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.adjust", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.get_new_state_dict", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.adjust", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.get_new_state_dict", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.adjust"], ["", "def", "load_model", "(", "linear_evaluation", ",", "num_classes", ",", "use_pretrained", ",", "discriminative_lr", "=", "False", ",", "hidden", "=", "False", ",", "conv_encoder", "=", "False", ",", "bn_head", "=", "False", ",", "ps_head", "=", "0.5", ",", "location", "=", "\"./checkpoints/moco_baselinewonder200.ckpt\"", ",", "method", "=", "\"simclr\"", ",", "base_model", "=", "\"xresnet1d50\"", ",", "out_dim", "=", "16", ",", "widen", "=", "1", ")", ":", "\n", "    ", "discriminative_lr_factor", "=", "1", "\n", "if", "use_pretrained", ":", "\n", "        ", "print", "(", "\"load model from \"", "+", "location", ")", "\n", "discriminative_lr_factor", "=", "0.1", "\n", "if", "base_model", "==", "\"cpc\"", ":", "\n", "            ", "lightning_state_dict", "=", "torch", ".", "load", "(", "location", ",", "map_location", "=", "device", ")", "\n", "\n", "# num_head = np.sum([1 if 'proj' in f else 0 for f in lightning_state_dict.keys()])", "\n", "if", "linear_evaluation", ":", "\n", "                ", "lin_ftrs_head", "=", "[", "]", "\n", "bn_head", "=", "False", "\n", "ps_head", "=", "0.0", "\n", "", "else", ":", "\n", "                ", "if", "hidden", ":", "\n", "                    ", "lin_ftrs_head", "=", "[", "512", "]", "\n", "", "else", ":", "\n", "                    ", "lin_ftrs_head", "=", "[", "]", "\n", "\n", "", "", "if", "conv_encoder", ":", "\n", "                ", "strides", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "kss", "=", "[", "10", ",", "4", ",", "4", ",", "4", "]", "\n", "", "else", ":", "\n", "                ", "strides", "=", "[", "1", "]", "*", "4", "\n", "kss", "=", "[", "1", "]", "*", "4", "\n", "\n", "", "model", "=", "CPCModel", "(", "input_channels", "=", "12", ",", "strides", "=", "strides", ",", "kss", "=", "kss", ",", "features", "=", "[", "512", "]", "*", "4", ",", "n_hidden", "=", "512", ",", "n_layers", "=", "2", ",", "mlp", "=", "False", ",", "lstm", "=", "True", ",", "bias_proj", "=", "False", ",", "\n", "num_classes", "=", "num_classes", ",", "skip_encoder", "=", "False", ",", "bn_encoder", "=", "True", ",", "lin_ftrs_head", "=", "lin_ftrs_head", ",", "ps_head", "=", "ps_head", ",", "bn_head", "=", "bn_head", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "\"state_dict\"", "in", "lightning_state_dict", ".", "keys", "(", ")", ":", "\n", "                ", "print", "(", "\"load pretrained model\"", ")", "\n", "model_state_dict", "=", "get_new_state_dict", "(", "\n", "model", ".", "state_dict", "(", ")", ",", "lightning_state_dict", "[", "\"state_dict\"", "]", ",", "method", "=", "\"cpc\"", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"load already finetuned model\"", ")", "\n", "model_state_dict", "=", "lightning_state_dict", "\n", "", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "ResNetSimCLR", "(", "base_model", ",", "out_dim", ",", "hidden", "=", "hidden", ",", "widen", "=", "widen", ")", ".", "to", "(", "device", ")", "\n", "model_state_dict", "=", "torch", ".", "load", "(", "location", ",", "map_location", "=", "device", ")", "\n", "if", "\"state_dict\"", "in", "model_state_dict", ".", "keys", "(", ")", ":", "\n", "                ", "model_state_dict", "=", "model_state_dict", "[", "\"state_dict\"", "]", "\n", "", "if", "\"l1.weight\"", "in", "model_state_dict", ".", "keys", "(", ")", ":", "# load already fine-tuned model", "\n", "                ", "model_classes", "=", "model_state_dict", "[", "\"l1.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "if", "model_classes", "!=", "num_classes", ":", "\n", "                    ", "raise", "Exception", "(", "\"Loaded model has different output dim ({}) than needed ({})\"", ".", "format", "(", "\n", "model_classes", ",", "num_classes", ")", ")", "\n", "", "adjust", "(", "model", ",", "num_classes", ",", "hidden", "=", "hidden", ")", "\n", "if", "not", "hidden", "and", "\"l2.weight\"", "in", "model_state_dict", ":", "\n", "                    ", "del", "model_state_dict", "[", "\"l2.weight\"", "]", "\n", "del", "model_state_dict", "[", "\"l2.bias\"", "]", "\n", "", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "", "else", ":", "# load pretrained model", "\n", "                ", "base_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "model_state_dict", "=", "get_new_state_dict", "(", "\n", "base_dict", ",", "model_state_dict", ",", "method", "=", "method", ")", "\n", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "adjust", "(", "model", ",", "num_classes", ",", "hidden", "=", "hidden", ")", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "if", "\"xresnet1d\"", "in", "base_model", ":", "\n", "            ", "model", "=", "ResNetSimCLR", "(", "base_model", ",", "out_dim", ",", "hidden", "=", "hidden", ",", "widen", "=", "widen", ")", ".", "to", "(", "device", ")", "\n", "adjust", "(", "model", ",", "num_classes", ",", "hidden", "=", "hidden", ")", "\n", "", "elif", "base_model", "==", "\"cpc\"", ":", "\n", "            ", "if", "linear_evaluation", ":", "\n", "                ", "lin_ftrs_head", "=", "[", "]", "\n", "bn_head", "=", "False", "\n", "ps_head", "=", "0.0", "\n", "", "else", ":", "\n", "                ", "if", "hidden", ":", "\n", "                    ", "lin_ftrs_head", "=", "[", "512", "]", "\n", "", "else", ":", "\n", "                    ", "lin_ftrs_head", "=", "[", "]", "\n", "\n", "", "", "if", "conv_encoder", ":", "\n", "                ", "strides", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "kss", "=", "[", "10", ",", "4", ",", "4", ",", "4", "]", "\n", "", "else", ":", "\n", "                ", "strides", "=", "[", "1", "]", "*", "4", "\n", "kss", "=", "[", "1", "]", "*", "4", "\n", "\n", "", "model", "=", "CPCModel", "(", "input_channels", "=", "12", ",", "strides", "=", "strides", ",", "kss", "=", "kss", ",", "features", "=", "[", "512", "]", "*", "4", ",", "n_hidden", "=", "512", ",", "n_layers", "=", "2", ",", "mlp", "=", "False", ",", "lstm", "=", "True", ",", "bias_proj", "=", "False", ",", "\n", "num_classes", "=", "num_classes", ",", "skip_encoder", "=", "False", ",", "bn_encoder", "=", "True", ",", "lin_ftrs_head", "=", "lin_ftrs_head", ",", "ps_head", "=", "ps_head", ",", "bn_head", "=", "bn_head", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"model unknown\"", ")", "\n", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.evaluate": [[306, 315], ["eval.eval_model", "clinical_ts.eval_utils_cafa.eval_scores", "clinical_ts.timeseries_utils.aggregate_predictions", "clinical_ts.eval_utils_cafa.eval_scores"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.eval_model", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.eval_utils_cafa.eval_scores", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.aggregate_predictions", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.eval_utils_cafa.eval_scores"], ["", "def", "evaluate", "(", "model", ",", "dataloader", ",", "idmap", ",", "lbl_itos", ",", "cpc", "=", "False", ")", ":", "\n", "    ", "preds", ",", "targs", "=", "eval_model", "(", "model", ",", "dataloader", ",", "cpc", "=", "cpc", ")", "\n", "scores", "=", "eval_scores", "(", "targs", ",", "preds", ",", "classes", "=", "lbl_itos", ",", "parallel", "=", "True", ")", "\n", "preds_agg", ",", "targs_agg", "=", "aggregate_predictions", "(", "preds", ",", "targs", ",", "idmap", ")", "\n", "scores_agg", "=", "eval_scores", "(", "targs_agg", ",", "preds_agg", ",", "\n", "classes", "=", "lbl_itos", ",", "parallel", "=", "True", ")", "\n", "macro", "=", "scores", "[", "\"label_AUC\"", "]", "[", "\"macro\"", "]", "\n", "macro_agg", "=", "scores_agg", "[", "\"label_AUC\"", "]", "[", "\"macro\"", "]", "\n", "return", "preds", ",", "macro", ",", "macro_agg", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.set_train_eval": [[317, 325], ["model.train", "model.encoder.eval", "model.features.eval"], "function", ["None"], ["", "def", "set_train_eval", "(", "model", ",", "cpc", ",", "linear_evaluation", ")", ":", "\n", "    ", "if", "linear_evaluation", ":", "\n", "        ", "if", "cpc", ":", "\n", "            ", "model", ".", "encoder", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "features", ".", "eval", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.train_model": [[327, 405], ["eval.set_train_eval", "copy.deepcopy", "print", "len", "int", "tqdm.tqdm", "print", "model.named_parameters", "print", "model.parameters", "[].weight.type", "[].weight.type", "model.state_dict", "range", "enumerate", "loss_per_epoch.append", "eval.evaluate", "macro_agg_per_epoch.append", "print", "print", "eval.set_train_eval", "eval.sanity_check", "print", "print", "type", "samples[].to().type", "samples[].to().type", "optimizer.zero_grad", "model", "loss_fn", "loss_fn.backward", "optimizer.step", "loss_fn.item", "torch.save", "torch.save", "eval.evaluate", "lr_schedule.keys", "print", "print", "model.state_dict", "samples[].to", "samples[].to", "loss_fn.item"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.set_train_eval", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.evaluate", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.set_train_eval", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.sanity_check", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.SyncFunction.backward", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.evaluate"], ["", "", "def", "train_model", "(", "model", ",", "train_loader", ",", "valid_loader", ",", "test_loader", ",", "epochs", ",", "loss_fn", ",", "optimizer", ",", "head_only", "=", "True", ",", "linear_evaluation", "=", "False", ",", "percentage", "=", "1", ",", "lr_schedule", "=", "None", ",", "save_model_at", "=", "None", ",", "val_idmap", "=", "None", ",", "test_idmap", "=", "None", ",", "lbl_itos", "=", "None", ",", "cpc", "=", "False", ")", ":", "\n", "    ", "if", "head_only", ":", "\n", "        ", "if", "linear_evaluation", ":", "\n", "            ", "print", "(", "\"linear evaluation for {} epochs\"", ".", "format", "(", "epochs", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"head-only for {} epochs\"", ".", "format", "(", "epochs", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "\"fine tuning for {} epochs\"", ".", "format", "(", "epochs", ")", ")", "\n", "\n", "", "if", "head_only", ":", "\n", "        ", "for", "key", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"l1.\"", "not", "in", "key", "and", "\"head.\"", "not", "in", "key", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "print", "(", "\"copying state dict before training for sanity check after training\"", ")", "\n", "\n", "", "else", ":", "\n", "        ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "", "if", "cpc", ":", "\n", "        ", "data_type", "=", "model", ".", "encoder", "[", "0", "]", "[", "0", "]", ".", "weight", ".", "type", "(", ")", "\n", "", "else", ":", "\n", "        ", "data_type", "=", "model", ".", "features", "[", "0", "]", "[", "0", "]", ".", "weight", ".", "type", "(", ")", "\n", "\n", "", "set_train_eval", "(", "model", ",", "cpc", ",", "linear_evaluation", ")", "\n", "state_dict_pre", "=", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "print", "(", "\"epoch\"", ",", "\"batch\"", ",", "\"loss\\n========================\"", ")", "\n", "loss_per_epoch", "=", "[", "]", "\n", "macro_agg_per_epoch", "=", "[", "]", "\n", "max_batches", "=", "len", "(", "train_loader", ")", "\n", "break_point", "=", "int", "(", "percentage", "*", "max_batches", ")", "\n", "best_macro", "=", "0", "\n", "best_macro_agg", "=", "0", "\n", "best_epoch", "=", "0", "\n", "best_preds", "=", "None", "\n", "test_macro", "=", "0", "\n", "test_macro_agg", "=", "0", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "epochs", ")", ")", ":", "\n", "        ", "if", "type", "(", "lr_schedule", ")", "==", "dict", ":", "\n", "            ", "if", "epoch", "in", "lr_schedule", ".", "keys", "(", ")", ":", "\n", "                ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "param_group", "[", "'lr'", "]", "/=", "lr_schedule", "[", "epoch", "]", "\n", "", "", "", "total_loss_one_epoch", "=", "0", "\n", "for", "batch_idx", ",", "samples", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "if", "batch_idx", "==", "break_point", ":", "\n", "                ", "print", "(", "\"break at batch nr.\"", ",", "batch_idx", ")", "\n", "break", "\n", "", "data", "=", "samples", "[", "0", "]", ".", "to", "(", "device", ")", ".", "type", "(", "data_type", ")", "\n", "labels", "=", "samples", "[", "1", "]", ".", "to", "(", "device", ")", ".", "type", "(", "data_type", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "preds", "=", "model", "(", "data", ")", "\n", "loss", "=", "loss_fn", "(", "preds", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "total_loss_one_epoch", "+=", "loss", ".", "item", "(", ")", "\n", "if", "(", "batch_idx", "%", "100", "==", "0", ")", ":", "\n", "                ", "print", "(", "epoch", ",", "batch_idx", ",", "loss", ".", "item", "(", ")", ")", "\n", "", "", "loss_per_epoch", ".", "append", "(", "total_loss_one_epoch", ")", "\n", "\n", "preds", ",", "macro", ",", "macro_agg", "=", "evaluate", "(", "\n", "model", ",", "valid_loader", ",", "val_idmap", ",", "lbl_itos", ",", "cpc", "=", "cpc", ")", "\n", "macro_agg_per_epoch", ".", "append", "(", "macro_agg", ")", "\n", "\n", "print", "(", "\"loss:\"", ",", "total_loss_one_epoch", ")", "\n", "print", "(", "\"aggregated macro:\"", ",", "macro_agg", ")", "\n", "if", "macro_agg", ">", "best_macro_agg", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "save_model_at", ")", "\n", "best_macro_agg", "=", "macro_agg", "\n", "best_macro", "=", "macro", "\n", "best_epoch", "=", "epoch", "\n", "best_preds", "=", "preds", "\n", "_", ",", "test_macro", ",", "test_macro_agg", "=", "evaluate", "(", "\n", "model", ",", "test_loader", ",", "test_idmap", ",", "lbl_itos", ",", "cpc", "=", "cpc", ")", "\n", "\n", "", "set_train_eval", "(", "model", ",", "cpc", ",", "linear_evaluation", ")", "\n", "\n", "", "if", "epochs", ">", "0", ":", "\n", "        ", "sanity_check", "(", "model", ",", "state_dict_pre", ",", "linear_evaluation", ",", "head_only", ")", "\n", "", "return", "loss_per_epoch", ",", "macro_agg_per_epoch", ",", "best_macro", ",", "best_macro_agg", ",", "test_macro", ",", "test_macro_agg", ",", "best_epoch", ",", "best_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.sanity_check": [[407, 442], ["print", "model.state_dict", "print", "list", "model.state_dict.keys", "list", "Exception", "model.state_dict.keys", "Exception", "state_dict[].cpu", "state_dict_pre[].cpu", "state_dict[].cpu", "state_dict_pre[].cpu"], "function", ["None"], ["", "def", "sanity_check", "(", "model", ",", "state_dict_pre", ",", "linear_evaluation", ",", "head_only", ")", ":", "\n", "    ", "\"\"\"\n    Linear classifier should not change any weights other than the linear layer.\n    This sanity check asserts nothing wrong happens (e.g., BN stats updated).\n    \"\"\"", "\n", "print", "(", "\"=> loading state dict for sanity check\"", ")", "\n", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "if", "linear_evaluation", ":", "\n", "        ", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# only ignore fc layer", "\n", "            ", "if", "'fc.'", "in", "k", "or", "'head.'", "in", "k", "or", "'l1.'", "in", "k", ":", "\n", "                ", "continue", "\n", "\n", "", "equals", "=", "(", "state_dict", "[", "k", "]", ".", "cpu", "(", ")", "==", "state_dict_pre", "[", "k", "]", ".", "cpu", "(", ")", ")", ".", "all", "(", ")", "\n", "if", "(", "linear_evaluation", "!=", "equals", ")", ":", "\n", "                ", "raise", "Exception", "(", "\n", "'=> failed sanity check in {}'", ".", "format", "(", "\"linear_evaluation\"", ")", ")", "\n", "", "", "", "elif", "head_only", ":", "\n", "        ", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# only ignore fc layer", "\n", "            ", "if", "'fc.'", "in", "k", "or", "'head.'", "in", "k", ":", "\n", "                ", "continue", "\n", "\n", "", "equals", "=", "(", "state_dict", "[", "k", "]", ".", "cpu", "(", ")", "==", "state_dict_pre", "[", "k", "]", ".", "cpu", "(", ")", ")", ".", "all", "(", ")", "\n", "if", "(", "equals", "and", "\"running_mean\"", "in", "k", ")", ":", "\n", "                ", "raise", "Exception", "(", "\n", "'=> failed sanity check in {}'", ".", "format", "(", "\"head-only\"", ")", ")", "\n", "# else:", "\n", "#     for k in list(state_dict.keys()):", "\n", "#         equals=(state_dict[k].cpu() == state_dict_pre[k].cpu()).all()", "\n", "#         if equals:", "\n", "#             pdb.set_trace()", "\n", "#             raise Exception('=> failed sanity check in {}'.format(\"fine_tuning\"))", "\n", "\n", "", "", "", "print", "(", "\"=> sanity check passed.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.eval_model": [[444, 462], ["model.eval", "[].weight.type", "[].weight.type", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "enumerate", "samples[].to().type", "torch.sigmoid", "torch.sigmoid", "torch.cat().numpy.append", "torch.cat().numpy.append", "model", "torch.sigmoid.cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "samples[].to"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type"], ["", "def", "eval_model", "(", "model", ",", "valid_loader", ",", "cpc", "=", "False", ")", ":", "\n", "    ", "if", "cpc", ":", "\n", "        ", "data_type", "=", "model", ".", "encoder", "[", "0", "]", "[", "0", "]", ".", "weight", ".", "type", "(", ")", "\n", "", "else", ":", "\n", "        ", "data_type", "=", "model", ".", "features", "[", "0", "]", "[", "0", "]", ".", "weight", ".", "type", "(", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "preds", "=", "[", "]", "\n", "targs", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "samples", "in", "tqdm", "(", "enumerate", "(", "valid_loader", ")", ")", ":", "\n", "            ", "data", "=", "samples", "[", "0", "]", ".", "to", "(", "device", ")", ".", "type", "(", "data_type", ")", "\n", "preds_tmp", "=", "torch", ".", "sigmoid", "(", "model", "(", "data", ")", ")", "\n", "targs", ".", "append", "(", "samples", "[", "1", "]", ")", "\n", "preds", ".", "append", "(", "preds_tmp", ".", "cpu", "(", ")", ")", "\n", "", "preds", "=", "torch", ".", "cat", "(", "preds", ")", ".", "numpy", "(", ")", "\n", "targs", "=", "torch", ".", "cat", "(", "targs", ")", ".", "numpy", "(", ")", "\n", "\n", "", "return", "preds", ",", "targs", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.eval.get_dataset": [[464, 484], ["clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper.get_data_loaders", "clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper", "transformations.append", "clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper", "clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper.get_data_loaders"], ["", "def", "get_dataset", "(", "batch_size", ",", "num_workers", ",", "target_folder", ",", "apply_noise", "=", "False", ",", "percentage", "=", "1.0", ",", "folds", "=", "8", ",", "t_params", "=", "None", ",", "test", "=", "False", ",", "normalize", "=", "False", ")", ":", "\n", "    ", "if", "apply_noise", ":", "\n", "        ", "transformations", "=", "[", "\"BaselineWander\"", ",", "\n", "\"PowerlineNoise\"", ",", "\"EMNoise\"", ",", "\"BaselineShift\"", "]", "\n", "if", "normalize", ":", "\n", "            ", "transformations", ".", "append", "(", "\"Normalize\"", ")", "\n", "", "dataset", "=", "SimCLRDataSetWrapper", "(", "batch_size", ",", "num_workers", ",", "None", ",", "\"(12, 250)\"", ",", "None", ",", "target_folder", ",", "[", "target_folder", "]", ",", "None", ",", "None", ",", "\n", "mode", "=", "\"linear_evaluation\"", ",", "transformations", "=", "transformations", ",", "percentage", "=", "percentage", ",", "folds", "=", "folds", ",", "t_params", "=", "t_params", ",", "test", "=", "test", ",", "ptb_xl_label", "=", "\"label_all\"", ")", "\n", "", "else", ":", "\n", "        ", "if", "normalize", ":", "\n", "# always use PTB-XL stats", "\n", "            ", "transformations", "=", "[", "\"Normalize\"", "]", "\n", "dataset", "=", "SimCLRDataSetWrapper", "(", "batch_size", ",", "num_workers", ",", "None", ",", "\"(12, 250)\"", ",", "None", ",", "target_folder", ",", "[", "target_folder", "]", ",", "None", ",", "None", ",", "\n", "mode", "=", "\"linear_evaluation\"", ",", "percentage", "=", "percentage", ",", "folds", "=", "folds", ",", "test", "=", "test", ",", "transformations", "=", "transformations", ",", "ptb_xl_label", "=", "\"label_all\"", ")", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "SimCLRDataSetWrapper", "(", "batch_size", ",", "num_workers", ",", "None", ",", "\"(12, 250)\"", ",", "None", ",", "target_folder", ",", "[", "target_folder", "]", ",", "None", ",", "None", ",", "\n", "mode", "=", "\"linear_evaluation\"", ",", "percentage", "=", "percentage", ",", "folds", "=", "folds", ",", "test", "=", "test", ",", "ptb_xl_label", "=", "\"label_all\"", ")", "\n", "\n", "", "", "train_loader", ",", "valid_loader", "=", "dataset", ".", "get_data_loaders", "(", ")", "\n", "return", "dataset", ",", "train_loader", ",", "valid_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo.__init__": [[76, 131], ["pytorch_lightning.LightningModule.__init__", "custom_moco_bolts.CustomMoCo.init_encoders", "zip", "custom_moco_bolts.CustomMoCo.register_buffer", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "custom_moco_bolts.CustomMoCo.register_buffer", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "custom_moco_bolts.CustomMoCo.encoder_q.parameters", "custom_moco_bolts.CustomMoCo.encoder_k.parameters", "param_k.data.copy_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo.init_encoders"], ["    ", "def", "__init__", "(", "self", ",", "\n", "base_encoder", ",", "\n", "emb_dim", ":", "int", "=", "128", ",", "\n", "num_negatives", ":", "int", "=", "65536", ",", "\n", "encoder_momentum", ":", "float", "=", "0.999", ",", "\n", "softmax_temperature", ":", "float", "=", "0.07", ",", "\n", "learning_rate", ":", "float", "=", "0.03", ",", "\n", "momentum", ":", "float", "=", "0.9", ",", "\n", "weight_decay", ":", "float", "=", "1e-6", ",", "\n", "datamodule", ":", "pl", ".", "LightningDataModule", "=", "None", ",", "\n", "data_dir", ":", "str", "=", "'./'", ",", "\n", "batch_size", ":", "int", "=", "256", ",", "\n", "use_mlp", ":", "bool", "=", "False", ",", "\n", "num_workers", ":", "int", "=", "8", ",", "\n", "config", "=", "None", ",", "\n", "transformations", "=", "None", ",", "\n", "warmup_epochs", "=", "10", ",", "\n", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "CustomMoCo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_encoder", "=", "base_encoder", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "num_negatives", "=", "num_negatives", "\n", "self", ".", "encoder_momentum", "=", "encoder_momentum", "\n", "self", ".", "softmax_temperature", "=", "softmax_temperature", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "datamodule", "=", "datamodule", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "use_mlp", "=", "use_mlp", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "warmup_epochs", "=", "warmup_epochs", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "transformations", "=", "transformations", "\n", "self", ".", "epoch", "=", "0", "\n", "# create the encoders", "\n", "# num_classes is the output fc dimension", "\n", "self", ".", "encoder_q", ",", "self", ".", "encoder_k", "=", "self", ".", "init_encoders", "(", "base_encoder", ")", "\n", "\n", "if", "use_mlp", ":", "# hack: brute-force replacement", "\n", "            ", "dim_mlp", "=", "self", ".", "encoder_q", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "self", ".", "encoder_q", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "encoder_q", ".", "fc", ")", "\n", "self", ".", "encoder_k", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "encoder_k", ".", "fc", ")", "\n", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "# create the queue", "\n", "", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "emb_dim", ",", "num_negatives", ")", ")", "\n", "self", ".", "queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "# self.warmup_epochs = config[\"warm_up\"]", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo.exclude_from_wt_decay": [[133, 148], ["any", "excluded_params.append", "params.append"], "methods", ["None"], ["", "def", "exclude_from_wt_decay", "(", "self", ",", "named_params", ",", "weight_decay", ",", "skip_list", "=", "[", "'bias'", ",", "'bn'", "]", ")", ":", "\n", "        ", "params", "=", "[", "]", "\n", "excluded_params", "=", "[", "]", "\n", "\n", "for", "name", ",", "param", "in", "named_params", ":", "\n", "            ", "if", "not", "param", ".", "requires_grad", ":", "\n", "                ", "continue", "\n", "", "elif", "any", "(", "layer_name", "in", "name", "for", "layer_name", "in", "skip_list", ")", ":", "\n", "                ", "excluded_params", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "                ", "params", ".", "append", "(", "param", ")", "\n", "\n", "", "", "return", "[", "\n", "{", "'params'", ":", "params", ",", "'weight_decay'", ":", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "excluded_params", ",", "'weight_decay'", ":", "0.", "}", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo.setup": [[150, 153], ["None"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "stage", ")", ":", "\n", "        ", "global_batch_size", "=", "self", ".", "trainer", ".", "world_size", "*", "self", ".", "batch_size", "\n", "self", ".", "train_iters_per_epoch", "=", "self", ".", "datamodule", ".", "num_samples", "//", "global_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo.configure_optimizers": [[155, 193], ["logger.debug", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "custom_moco_bolts.CustomMoCo.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "# global_batch_size = self.trainer.world_size * self.batch_size", "\n", "# self.train_iters_per_epoch = self.datamodule.num_samples // global_batch_size", "\n", "# # TRICK 1 (Use lars + filter weights)", "\n", "# # exclude certain parameters", "\n", "# parameters = self.exclude_from_wt_decay(", "\n", "#     self.named_parameters(),", "\n", "#     weight_decay=self.weight_decay", "\n", "# )", "\n", "\n", "# optimizer = LARSWrapper(Adam(parameters, lr=self.learning_rate))", "\n", "\n", "# # Trick 2 (after each step)", "\n", "# self.warmup_epochs = self.warmup_epochs * self.train_iters_per_epoch", "\n", "# max_epochs = self.trainer.max_epochs * self.train_iters_per_epoch", "\n", "\n", "# linear_warmup_cosine_decay = LinearWarmupCosineAnnealingLR(", "\n", "#     optimizer,", "\n", "#     warmup_epochs=self.warmup_epochs,", "\n", "#     max_epochs=max_epochs,", "\n", "#     warmup_start_lr=0,", "\n", "#     eta_min=0", "\n", "# )", "\n", "\n", "# scheduler = {", "\n", "#     'scheduler': linear_warmup_cosine_decay,", "\n", "#     'interval': 'step',", "\n", "#     'frequency': 1", "\n", "# }", "\n", "\n", "# self.scheduler = linear_warmup_cosine_decay", "\n", "\n", "        ", "logger", ".", "debug", "(", "\"configure_optimizers\"", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", "\n", ")", ",", "self", ".", "learning_rate", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "self", ".", "config", "[", "\"epochs\"", "]", ",", "eta_min", "=", "0", ",", "\n", "last_epoch", "=", "-", "1", ")", "\n", "return", "[", "optimizer", "]", ",", "[", "self", ".", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo.init_encoders": [[194, 203], ["base_encoder", "base_encoder"], "methods", ["None"], ["", "def", "init_encoders", "(", "self", ",", "base_encoder", ")", ":", "\n", "        ", "\"\"\"\n        Override to add your own encoders\n        \"\"\"", "\n", "\n", "encoder_q", "=", "base_encoder", "(", ")", "\n", "encoder_k", "=", "base_encoder", "(", ")", "\n", "\n", "return", "encoder_q", ",", "encoder_k", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo.forward": [[204, 258], ["img_q.type_as.type_as.type_as", "img_k.type_as.type_as.type_as", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "labels.type_as.type_as.type_as", "custom_moco_bolts.CustomMoCo._dequeue_and_enqueue", "custom_moco_bolts.CustomMoCo.encoder_q", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "custom_moco_bolts.CustomMoCo._momentum_update_key_encoder", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "custom_moco_bolts.CustomMoCo._batch_shuffle_ddp", "custom_moco_bolts.CustomMoCo.encoder_k", "custom_moco_bolts.CustomMoCo._batch_unshuffle_ddp", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "custom_moco_bolts.CustomMoCo.queue.clone().detach", "custom_moco_bolts.CustomMoCo.queue.clone"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo._dequeue_and_enqueue", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo._momentum_update_key_encoder", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo._batch_shuffle_ddp", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo._batch_unshuffle_ddp"], ["", "def", "forward", "(", "self", ",", "img_q", ",", "img_k", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            im_q: a batch of query images\n            im_k: a batch of key images\n        Output:\n            logits, targets\n        \"\"\"", "\n", "\n", "# ugly fix", "\n", "img_q", "=", "img_q", ".", "type_as", "(", "self", ".", "encoder_q", ".", "features", "[", "0", "]", "[", "0", "]", ".", "weight", ".", "data", ")", "\n", "img_k", "=", "img_k", ".", "type_as", "(", "self", ".", "encoder_q", ".", "features", "[", "0", "]", "[", "0", "]", ".", "weight", ".", "data", ")", "\n", "\n", "# compute query features", "\n", "q", "=", "self", ".", "encoder_q", "(", "img_q", ")", "[", "1", "]", "# queries: NxC", "\n", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "if", "self", ".", "use_ddp", "or", "self", ".", "use_ddp2", ":", "\n", "                ", "img_k", ",", "idx_unshuffle", "=", "self", ".", "_batch_shuffle_ddp", "(", "img_k", ")", "\n", "\n", "", "k", "=", "self", ".", "encoder_k", "(", "img_k", ")", "[", "1", "]", "# keys: NxC", "\n", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# undo shuffle", "\n", "if", "self", ".", "use_ddp", "or", "self", ".", "use_ddp2", ":", "\n", "                ", "k", "=", "self", ".", "_batch_unshuffle_ddp", "(", "k", ",", "idx_unshuffle", ")", "\n", "\n", "# compute logits", "\n", "# Einstein sum is more intuitive", "\n", "# positive logits: Nx1", "\n", "\n", "", "", "l_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q", ",", "k", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# negative logits: NxK", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "\n", "\n", "# logits: Nx(1+K)", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# apply temperature", "\n", "logits", "/=", "self", ".", "softmax_temperature", "\n", "\n", "# labels: positive key indicators", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "labels", "=", "labels", ".", "type_as", "(", "logits", ")", "\n", "\n", "# dequeue and enqueue", "\n", "self", ".", "_dequeue_and_enqueue", "(", "k", ")", "\n", "\n", "return", "logits", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo.training_step": [[259, 270], ["custom_moco_bolts.CustomMoCo.", "torch.cross_entropy", "torch.cross_entropy", "output.float", "target.long", "pl_bolts.metrics.precision_at_k", "img_1.float", "img_2.float"], "methods", ["None"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "(", "img_1", ",", "_", ")", ",", "(", "img_2", ",", "_", ")", "=", "batch", "\n", "output", ",", "target", "=", "self", "(", "img_q", "=", "img_1", ".", "float", "(", ")", ",", "img_k", "=", "img_2", ".", "float", "(", ")", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ".", "float", "(", ")", ",", "target", ".", "long", "(", ")", ")", "\n", "acc", "=", "precision_at_k", "(", "output", ",", "target", ",", "top_k", "=", "(", "1", ",", ")", ")", "[", "0", "]", "\n", "\n", "log", "=", "{", "\n", "'train_loss'", ":", "loss", ",", "\n", "'train_acc'", ":", "acc", "\n", "}", "\n", "return", "{", "'loss'", ":", "loss", ",", "'log'", ":", "log", ",", "'progress_bar'", ":", "log", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo.validation_step": [[271, 286], ["custom_moco_bolts.CustomMoCo.", "torch.cross_entropy", "torch.cross_entropy", "target.long", "pl_bolts.metrics.precision_at_k"], "methods", ["None"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", ")", ":", "\n", "        ", "if", "dataloader_idx", "!=", "0", ":", "\n", "            ", "return", "{", "}", "\n", "\n", "", "(", "img_1", ",", "_", ")", ",", "(", "img_2", ",", "_", ")", "=", "batch", "\n", "\n", "output", ",", "target", "=", "self", "(", "img_q", "=", "img_1", ",", "img_k", "=", "img_2", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ".", "long", "(", ")", ")", "\n", "\n", "acc", "=", "precision_at_k", "(", "output", ",", "target", ",", "top_k", "=", "(", "1", ",", ")", ")", "[", "0", "]", "\n", "results", "=", "{", "\n", "'val_loss'", ":", "loss", ",", "\n", "'val_acc'", ":", "acc", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo.training_epoch_end": [[287, 296], ["custom_moco_bolts.mean", "custom_moco_bolts.mean"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean"], ["", "def", "training_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "train_loss", "=", "mean", "(", "outputs", ",", "'log'", ",", "'train_loss'", ")", "\n", "train_acc", "=", "mean", "(", "outputs", ",", "'log'", ",", "'train_acc'", ")", "\n", "\n", "log", "=", "{", "\n", "'train/train_loss'", ":", "train_loss", ",", "\n", "'train/train_acc'", ":", "train_acc", "\n", "}", "\n", "return", "{", "'train_loss'", ":", "train_loss", ",", "'log'", ":", "log", ",", "'progress_bar'", ":", "log", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo.validation_epoch_end": [[297, 307], ["custom_moco_bolts.mean", "custom_moco_bolts.mean"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "# outputs[0] because we are using multiple datasets!", "\n", "        ", "val_loss", "=", "mean", "(", "outputs", "[", "0", "]", ",", "'val_loss'", ")", "\n", "val_acc", "=", "mean", "(", "outputs", "[", "0", "]", ",", "'val_acc'", ")", "\n", "\n", "log", "=", "{", "\n", "'val/val_loss'", ":", "val_loss", ",", "\n", "'val/val_acc'", ":", "val_acc", "\n", "}", "\n", "return", "{", "'val_loss'", ":", "val_loss", ",", "'log'", ":", "log", ",", "'progress_bar'", ":", "log", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo.on_train_start": [[308, 320], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "custom_moco_bolts.CustomMoCo.logger.experiment.add_text", "custom_moco_bolts.CustomMoCo.logger.experiment.add_text", "str", "str", "str", "str", "str", "t.get_params", "str"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Transformation.get_params"], ["", "def", "on_train_start", "(", "self", ")", ":", "\n", "# log configuration", "\n", "        ", "config_str", "=", "re", ".", "sub", "(", "r\"[,\\}\\{]\"", ",", "\"<br/>\"", ",", "str", "(", "self", ".", "config", ")", ")", "\n", "config_str", "=", "re", ".", "sub", "(", "r\"[\\[\\]\\']\"", ",", "\"\"", ",", "config_str", ")", "\n", "transformation_str", "=", "re", ".", "sub", "(", "r\"[\\}]\"", ",", "\"<br/>\"", ",", "str", "(", "[", "\"<br>\"", "+", "str", "(", "\n", "t", ")", "+", "\":<br/>\"", "+", "str", "(", "t", ".", "get_params", "(", ")", ")", "for", "t", "in", "self", ".", "transformations", "]", ")", ")", "\n", "transformation_str", "=", "re", ".", "sub", "(", "r\"[,\\\"\\{\\'\\[\\]]\"", ",", "\"\"", ",", "transformation_str", ")", "\n", "self", ".", "logger", ".", "experiment", ".", "add_text", "(", "\n", "\"configuration\"", ",", "str", "(", "config_str", ")", ",", "global_step", "=", "0", ")", "\n", "self", ".", "logger", ".", "experiment", ".", "add_text", "(", "\"transformations\"", ",", "str", "(", "\n", "transformation_str", ")", ",", "global_step", "=", "0", ")", "\n", "self", ".", "epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo.on_epoch_end": [[321, 329], ["custom_moco_bolts.CustomMoCo.logger.experiment.add_scalar", "custom_moco_bolts.CustomMoCo.scheduler.step", "custom_moco_bolts.CustomMoCo.scheduler.get_lr"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "        ", "self", ".", "logger", ".", "experiment", ".", "add_scalar", "(", "'cosine_lr_decay'", ",", "self", ".", "scheduler", ".", "get_lr", "(", ")", "[", "\n", "0", "]", ",", "global_step", "=", "self", ".", "epoch", ")", "\n", "self", ".", "epoch", "+=", "1", "\n", "if", "self", ".", "epoch", ">=", "10", ":", "\n", "            ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo._dequeue_and_enqueue": [[330, 352], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int", "custom_moco_bolts.concat_all_gather"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.concat_all_gather"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "# gather keys before updating queue", "\n", "        ", "if", "self", ".", "use_ddp", "or", "self", ".", "use_ddp2", ":", "\n", "            ", "keys", "=", "concat_all_gather", "(", "keys", ")", "\n", "\n", "", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "remainder", "=", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", ".", "shape", "[", "1", "]", "\n", "if", "remainder", "<", "batch_size", ":", "\n", "            ", "self", ".", "queue", "[", ":", ",", "-", "remainder", ":", "]", "=", "keys", ".", "T", "[", ":", ",", ":", "remainder", "]", "\n", "self", ".", "queue", "[", ":", ",", ":", "batch_size", "-", "remainder", "]", "=", "keys", ".", "T", "[", ":", ",", "remainder", ":", "]", "\n", "ptr", "=", "batch_size", "-", "remainder", "\n", "", "else", ":", "\n", "            ", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "num_negatives", "# move pointer", "\n", "\n", "", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo._batch_shuffle_ddp": [[353, 380], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "custom_moco_bolts.concat_all_gather", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_shuffle_ddp", "(", "self", ",", "x", ")", ":", "# pragma: no-cover", "\n", "        ", "\"\"\"\n        Batch shuffle, for making use of BatchNorm.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# random shuffle index", "\n", "idx_shuffle", "=", "torch", ".", "randperm", "(", "batch_size_all", ")", ".", "cuda", "(", ")", "\n", "\n", "# broadcast to all gpus", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "idx_shuffle", ",", "src", "=", "0", ")", "\n", "\n", "# index for restoring", "\n", "idx_unshuffle", "=", "torch", ".", "argsort", "(", "idx_shuffle", ")", "\n", "\n", "# shuffled index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_shuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", ",", "idx_unshuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo._batch_unshuffle_ddp": [[381, 399], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "custom_moco_bolts.concat_all_gather", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "idx_unshuffle.view"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_unshuffle_ddp", "(", "self", ",", "x", ",", "idx_unshuffle", ")", ":", "# pragma: no-cover", "\n", "        ", "\"\"\"\n        Undo batch shuffle.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# restored index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_unshuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo._momentum_update_key_encoder": [[400, 408], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "custom_moco_bolts.CustomMoCo.encoder_q.parameters", "custom_moco_bolts.CustomMoCo.encoder_k.parameters"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "em", "=", "self", ".", "encoder_momentum", "\n", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "em", "+", "param_q", ".", "data", "*", "(", "1.", "-", "em", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo.type": [[409, 411], ["[].weight.type"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type"], ["", "", "def", "type", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "encoder_k", ".", "features", "[", "0", "]", "[", "0", "]", ".", "weight", ".", "type", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo.get_representations": [[412, 414], ["custom_moco_bolts.CustomMoCo.encoder_q.features"], "methods", ["None"], ["", "def", "get_representations", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "encoder_q", ".", "features", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo.get_model": [[415, 417], ["None"], "methods", ["None"], ["", "def", "get_model", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "encoder_q", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.CustomMoCo.get_device": [[418, 420], ["None"], "methods", ["None"], ["", "def", "get_device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "encoder_k", ".", "features", "[", "0", "]", "[", "0", "]", ".", "weight", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts._accuracy": [[37, 50], ["torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.mm", "torch.mm", "torch.max", "torch.max", "correct_preds.float", "torch.cat.t().contiguous", "torch.eye().type_as", "torch.eye().type_as", "torch.arange", "torch.arange", "torch.cat.t", "torch.eye", "torch.eye", "correct_indices.type_as"], "function", ["None"], ["def", "_accuracy", "(", "zis", ",", "zjs", ",", "batch_size", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "representations", "=", "torch", ".", "cat", "(", "[", "zjs", ",", "zis", "]", ",", "dim", "=", "0", ")", "\n", "similarity_matrix", "=", "torch", ".", "mm", "(", "\n", "representations", ",", "representations", ".", "t", "(", ")", ".", "contiguous", "(", ")", ")", "\n", "corrected_similarity_matrix", "=", "similarity_matrix", "-", "torch", ".", "eye", "(", "2", "*", "batch_size", ")", ".", "type_as", "(", "similarity_matrix", ")", "\n", "pred_similarities", ",", "pred_indices", "=", "torch", ".", "max", "(", "\n", "corrected_similarity_matrix", "[", ":", "batch_size", "]", ",", "dim", "=", "1", ")", "\n", "correct_indices", "=", "torch", ".", "arange", "(", "batch_size", ")", "+", "batch_size", "\n", "correct_preds", "=", "(", "\n", "pred_indices", "==", "correct_indices", ".", "type_as", "(", "pred_indices", ")", ")", ".", "sum", "(", ")", "\n", "", "return", "correct_preds", ".", "float", "(", ")", "/", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.mean": [[52, 56], ["torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "type", "x.keys"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type"], ["", "def", "mean", "(", "res", ",", "key1", ",", "key2", "=", "None", ")", ":", "\n", "    ", "if", "key2", "is", "not", "None", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "[", "x", "[", "key1", "]", "[", "key2", "]", "for", "x", "in", "res", "]", ")", ".", "mean", "(", ")", "\n", "", "return", "torch", ".", "stack", "(", "[", "x", "[", "key1", "]", "for", "x", "in", "res", "if", "type", "(", "x", ")", "==", "dict", "and", "key1", "in", "x", ".", "keys", "(", ")", "]", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.concat_all_gather": [[60, 72], ["torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.parse_args": [[421, 477], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "", "def", "parse_args", "(", "parent_parser", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "parents", "=", "[", "parent_parser", "]", ",", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--trafos'", ",", "nargs", "=", "'+'", ",", "help", "=", "'add transformation to data augmentation pipeline'", ",", "\n", "default", "=", "[", "\"GaussianNoise\"", ",", "\"ChannelResize\"", ",", "\"RandomResizedCrop\"", "]", ")", "\n", "# GaussianNoise", "\n", "parser", ".", "add_argument", "(", "\n", "'--gaussian_scale'", ",", "help", "=", "'std param for gaussian noise transformation'", ",", "default", "=", "0.005", ",", "type", "=", "float", ")", "\n", "# RandomResizedCrop", "\n", "parser", ".", "add_argument", "(", "'--rr_crop_ratio_range'", ",", "\n", "help", "=", "'ratio range for random resized crop transformation'", ",", "default", "=", "[", "0.5", ",", "1.0", "]", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output_size'", ",", "help", "=", "'output size for random resized crop transformation'", ",", "default", "=", "250", ",", "type", "=", "int", ")", "\n", "# DynamicTimeWarp", "\n", "parser", ".", "add_argument", "(", "\n", "'--warps'", ",", "help", "=", "'number of warps for dynamic time warp transformation'", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--radius'", ",", "help", "=", "'radius of warps of dynamic time warp transformation'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "# TimeWarp", "\n", "parser", ".", "add_argument", "(", "\n", "'--epsilon'", ",", "help", "=", "'epsilon param for time warp'", ",", "default", "=", "10", ",", "type", "=", "float", ")", "\n", "# ChannelResize", "\n", "parser", ".", "add_argument", "(", "'--magnitude_range'", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'range for scale param for ChannelResize transformation'", ",", "default", "=", "[", "0.5", ",", "2", "]", ",", "type", "=", "float", ")", "\n", "# Downsample", "\n", "parser", ".", "add_argument", "(", "\n", "'--downsample_ratio'", ",", "help", "=", "'downsample ratio for Downsample transformation'", ",", "default", "=", "0.2", ",", "type", "=", "float", ")", "\n", "# TimeOut", "\n", "parser", ".", "add_argument", "(", "'--to_crop_ratio_range'", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'ratio range for timeout transformation'", ",", "default", "=", "[", "0.2", ",", "0.4", "]", ",", "type", "=", "float", ")", "\n", "# resume training", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "help", "=", "'number of gpus to use; use cpu if gpu=0'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num_nodes'", ",", "default", "=", "1", ",", "help", "=", "'number of cluster nodes'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--distributed_backend'", ",", "help", "=", "'sets backend type'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--warm_up'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--precision'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--datasets'", ",", "dest", "=", "\"target_folders\"", ",", "\n", "nargs", "=", "'+'", ",", "help", "=", "'used datasets for pretraining'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "default", "=", "\"./experiment_logs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_path'", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--percentage'", ",", "help", "=", "'determines how much of the dataset shall be used during the pretraining'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "help", "=", "\"learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "'--out_dim'", ",", "type", "=", "int", ",", "help", "=", "\"output dimension of model\"", ")", "\n", "parser", ".", "add_argument", "(", "'--filter_cinc'", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"only valid if cinc is selected: filter out the ptb data\"", ")", "\n", "parser", ".", "add_argument", "(", "'--base_model'", ")", "\n", "parser", ".", "add_argument", "(", "'--widen'", ",", "type", "=", "int", ",", "help", "=", "\"use wide xresnet1d50\"", ")", "\n", "parser", ".", "add_argument", "(", "'--run_callbacks'", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"run callbacks which asses linear evaluaton and finetuning metrics during pretraining\"", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.init_logger": [[478, 492], ["logging.basicConfig", "logging.getLogger", "logging.root.removeHandler", "os.path.isdir", "os.mkdir", "os.path.join"], "function", ["None"], ["", "def", "init_logger", "(", "config", ")", ":", "\n", "    ", "level", "=", "logging", ".", "INFO", "\n", "\n", "if", "config", "[", "'debug'", "]", ":", "\n", "        ", "level", "=", "logging", ".", "DEBUG", "\n", "\n", "# remove all handlers to change basic configuration", "\n", "", "for", "handler", "in", "logging", ".", "root", ".", "handlers", "[", ":", "]", ":", "\n", "        ", "logging", ".", "root", ".", "removeHandler", "(", "handler", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "config", "[", "'log_dir'", "]", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "config", "[", "'log_dir'", "]", ")", "\n", "", "logging", ".", "basicConfig", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'log_dir'", "]", ",", "'info.log'", ")", ",", "level", "=", "level", ",", "\n", "format", "=", "'%(asctime)s %(name)s:%(lineno)s %(levelname)s:  %(message)s  '", ")", "\n", "return", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.pretrain_routine": [[493, 535], ["os.path.join", "yaml.load", "vars", "set().union", "custom_moco_bolts.init_logger", "clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper", "enumerate", "time.asctime", "re.sub", "re.sub", "pytorch_lightning.loggers.TensorBoardLogger", "os.path.join", "print", "open", "set", "logger.info", "str", "os.path.isfile", "set", "vars.keys", "yaml.load.keys", "str", "vars.keys", "t.get_params", "str", "vars.keys", "yaml.load.keys", "str", "time.time_ns", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.init_logger", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Transformation.get_params"], ["", "def", "pretrain_routine", "(", "args", ")", ":", "\n", "    ", "t_params", "=", "{", "\"gaussian_scale\"", ":", "args", ".", "gaussian_scale", ",", "\"rr_crop_ratio_range\"", ":", "args", ".", "rr_crop_ratio_range", ",", "\"output_size\"", ":", "args", ".", "output_size", ",", "\"warps\"", ":", "args", ".", "warps", ",", "\"radius\"", ":", "args", ".", "radius", ",", "\n", "\"epsilon\"", ":", "args", ".", "epsilon", ",", "\"magnitude_range\"", ":", "args", ".", "magnitude_range", ",", "\"downsample_ratio\"", ":", "args", ".", "downsample_ratio", ",", "\"to_crop_ratio_range\"", ":", "args", ".", "to_crop_ratio_range", ",", "\n", "\"bw_cmax\"", ":", "0.1", ",", "\"em_cmax\"", ":", "0.5", ",", "\"pl_cmax\"", ":", "0.2", ",", "\"bs_cmax\"", ":", "1", "}", "\n", "transformations", "=", "args", ".", "trafos", "\n", "checkpoint_config", "=", "os", ".", "path", ".", "join", "(", "\"checkpoints\"", ",", "\"bolts_config.yaml\"", ")", "\n", "config_file", "=", "checkpoint_config", "if", "args", ".", "resume", "and", "os", ".", "path", ".", "isfile", "(", "\n", "checkpoint_config", ")", "else", "\"bolts_config.yaml\"", "\n", "config", "=", "yaml", ".", "load", "(", "open", "(", "config_file", ",", "\"r\"", ")", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "args_dict", "=", "vars", "(", "args", ")", "\n", "for", "key", "in", "set", "(", "config", ".", "keys", "(", ")", ")", ".", "union", "(", "set", "(", "args_dict", ".", "keys", "(", ")", ")", ")", ":", "\n", "        ", "config", "[", "key", "]", "=", "config", "[", "key", "]", "if", "(", "key", "not", "in", "args_dict", ".", "keys", "(", ")", "or", "key", "in", "args_dict", ".", "keys", "(", "\n", ")", "and", "key", "in", "config", ".", "keys", "(", ")", "and", "args_dict", "[", "key", "]", "is", "None", ")", "else", "args_dict", "[", "key", "]", "\n", "", "if", "args", ".", "target_folders", "is", "not", "None", ":", "\n", "        ", "config", "[", "\"dataset\"", "]", "[", "\"target_folders\"", "]", "=", "args", ".", "target_folders", "\n", "", "config", "[", "\"dataset\"", "]", "[", "\"percentage\"", "]", "=", "args", ".", "percentage", "if", "args", ".", "percentage", "is", "not", "None", "else", "config", "[", "\"dataset\"", "]", "[", "\"percentage\"", "]", "\n", "config", "[", "\"dataset\"", "]", "[", "\"filter_cinc\"", "]", "=", "args", ".", "filter_cinc", "if", "args", ".", "filter_cinc", "is", "not", "None", "else", "config", "[", "\"dataset\"", "]", "[", "\"filter_cinc\"", "]", "\n", "config", "[", "\"model\"", "]", "[", "\"base_model\"", "]", "=", "args", ".", "base_model", "if", "args", ".", "base_model", "is", "not", "None", "else", "config", "[", "\"model\"", "]", "[", "\"base_model\"", "]", "\n", "config", "[", "\"model\"", "]", "[", "\"widen\"", "]", "=", "args", ".", "widen", "if", "args", ".", "widen", "is", "not", "None", "else", "config", "[", "\"model\"", "]", "[", "\"widen\"", "]", "\n", "if", "args", ".", "out_dim", "is", "not", "None", ":", "\n", "        ", "config", "[", "\"model\"", "]", "[", "\"out_dim\"", "]", "=", "args", ".", "out_dim", "\n", "", "init_logger", "(", "config", ")", "\n", "dataset", "=", "SimCLRDataSetWrapper", "(", "\n", "config", "[", "'batch_size'", "]", ",", "**", "config", "[", "'dataset'", "]", ",", "transformations", "=", "transformations", ",", "t_params", "=", "t_params", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "dataset", ".", "transformations", ")", ":", "\n", "        ", "logger", ".", "info", "(", "str", "(", "i", ")", "+", "\". Transformation: \"", "+", "\n", "str", "(", "t", ")", "+", "\": \"", "+", "str", "(", "t", ".", "get_params", "(", ")", ")", ")", "\n", "", "date", "=", "time", ".", "asctime", "(", ")", "\n", "label_to_num_classes", "=", "{", "\"label_all\"", ":", "71", ",", "\"label_diag\"", ":", "44", ",", "\"label_form\"", ":", "19", ",", "\n", "\"label_rhythm\"", ":", "12", ",", "\"label_diag_subclass\"", ":", "23", ",", "\"label_diag_superclass\"", ":", "5", "}", "\n", "ptb_num_classes", "=", "label_to_num_classes", "[", "config", "[", "\"eval_dataset\"", "]", "\n", "[", "\"ptb_xl_label\"", "]", "]", "\n", "abr", "=", "{", "\"Transpose\"", ":", "\"Tr\"", ",", "\"TimeOut\"", ":", "\"TO\"", ",", "\"DynamicTimeWarp\"", ":", "\"DTW\"", ",", "\"RandomResizedCrop\"", ":", "\"RRC\"", ",", "\"ChannelResize\"", ":", "\"ChR\"", ",", "\"GaussianNoise\"", ":", "\"GN\"", ",", "\n", "\"TimeWarp\"", ":", "\"TW\"", ",", "\"ToTensor\"", ":", "\"TT\"", ",", "\"GaussianBlur\"", ":", "\"GB\"", ",", "\"BaselineWander\"", ":", "\"BlW\"", ",", "\"PowerlineNoise\"", ":", "\"PlN\"", ",", "\"EMNoise\"", ":", "\"EM\"", ",", "\"BaselineShift\"", ":", "\"BlS\"", "}", "\n", "trs", "=", "re", ".", "sub", "(", "r\"[,'\\]\\[]\"", ",", "\"\"", ",", "str", "(", "[", "abr", "[", "str", "(", "tr", ")", "]", "if", "abr", "[", "str", "(", "tr", ")", "]", "not", "in", "[", "\n", "\"TT\"", ",", "\"Tr\"", "]", "else", "''", "for", "tr", "in", "dataset", ".", "transformations", "]", ")", ")", "\n", "name", "=", "str", "(", "date", ")", "+", "\"_\"", "+", "method", "+", "\"_\"", "+", "str", "(", "\n", "time", ".", "time_ns", "(", ")", ")", "[", "-", "3", ":", "]", "+", "\"_\"", "+", "trs", "[", "1", ":", "]", "\n", "tb_logger", "=", "TensorBoardLogger", "(", "args", ".", "log_dir", ",", "name", "=", "name", ",", "version", "=", "''", ")", "\n", "config", "[", "\"log_dir\"", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "name", ")", "\n", "print", "(", "config", ")", "\n", "return", "config", ",", "dataset", ",", "date", ",", "transformations", ",", "t_params", ",", "ptb_num_classes", ",", "tb_logger", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.aftertrain_routine": [[536, 550], ["trainer.save_checkpoint", "isinstance", "open", "pickle.dump", "pickle.dump", "os.path.join", "open", "print", "os.path.join", "os.path.join", "str"], "function", ["None"], ["", "def", "aftertrain_routine", "(", "config", ",", "args", ",", "trainer", ",", "pl_model", ",", "datamodule", ",", "callbacks", ")", ":", "\n", "    ", "scores", "=", "{", "}", "\n", "for", "ca", "in", "callbacks", ":", "\n", "        ", "if", "isinstance", "(", "ca", ",", "SSLOnlineEvaluator", ")", ":", "\n", "            ", "scores", "[", "str", "(", "ca", ")", "]", "=", "{", "\"macro\"", ":", "ca", ".", "best_macro", "}", "\n", "\n", "", "", "results", "=", "{", "\"config\"", ":", "config", ",", "\"trafos\"", ":", "args", ".", "trafos", ",", "\"scores\"", ":", "scores", "}", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config", "[", "\"log_dir\"", "]", ",", "\"results.pkl\"", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "results", ",", "handle", ")", "\n", "\n", "", "trainer", ".", "save_checkpoint", "(", "os", ".", "path", ".", "join", "(", "config", "[", "\"log_dir\"", "]", ",", "\"checkpoints\"", ",", "\"model.ckpt\"", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config", "[", "\"log_dir\"", "]", ",", "\"config.txt\"", ")", ",", "\"w\"", ")", "as", "text_file", ":", "\n", "        ", "print", "(", "config", ",", "file", "=", "text_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_moco_bolts.cli_main": [[551, 601], ["argparse.ArgumentParser", "custom_moco_bolts.parse_args", "logger.info", "parse_args.parse_args", "custom_moco_bolts.pretrain_routine", "ECGDataModule", "pytorch_lightning.Trainer", "custom_moco_bolts.CustomMoCo", "pytorch_lightning.Trainer.fit", "custom_moco_bolts.aftertrain_routine", "SSLOnlineEvaluator", "SSLOnlineEvaluator", "callbacks.append", "callbacks.append", "models.resnet_simclr.ResNetSimCLR", "exists", "eval", "logger.info", "CustomMoCo.load_from_checkpoint"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.parse_args", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.parse_args", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.pretrain_routine", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.aftertrain_routine"], ["", "", "def", "cli_main", "(", ")", ":", "\n", "    ", "from", "pytorch_lightning", "import", "Trainer", "\n", "from", "online_evaluator", "import", "SSLOnlineEvaluator", "\n", "from", "ecg_datamodule", "import", "ECGDataModule", "\n", "from", "clinical_ts", ".", "create_logger", "import", "create_logger", "\n", "from", "os", ".", "path", "import", "exists", "\n", "\n", "parser", "=", "ArgumentParser", "(", ")", "\n", "parser", "=", "parse_args", "(", "parser", ")", "\n", "logger", ".", "info", "(", "\"parse arguments\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "config", ",", "dataset", ",", "date", ",", "transformations", ",", "t_params", ",", "ptb_num_classes", ",", "tb_logger", "=", "pretrain_routine", "(", "args", ")", "\n", "\n", "# data", "\n", "ecg_datamodule", "=", "ECGDataModule", "(", "config", ",", "transformations", ",", "t_params", ")", "\n", "\n", "callbacks", "=", "[", "]", "\n", "if", "args", ".", "run_callbacks", ":", "\n", "# callback for online linear evaluation/fine-tuning", "\n", "        ", "linear_evaluator", "=", "SSLOnlineEvaluator", "(", "drop_p", "=", "0", ",", "\n", "z_dim", "=", "512", ",", "num_classes", "=", "ptb_num_classes", ",", "hidden_dim", "=", "None", ",", "lin_eval_epochs", "=", "config", "[", "\"eval_epochs\"", "]", ",", "eval_every", "=", "config", "[", "\"eval_every\"", "]", ",", "mode", "=", "\"linear_evaluation\"", ",", "verbose", "=", "False", ")", "\n", "\n", "fine_tuner", "=", "SSLOnlineEvaluator", "(", "drop_p", "=", "0", ",", "\n", "z_dim", "=", "512", ",", "num_classes", "=", "ptb_num_classes", ",", "hidden_dim", "=", "None", ",", "lin_eval_epochs", "=", "config", "[", "\"eval_epochs\"", "]", ",", "eval_every", "=", "config", "[", "\"eval_every\"", "]", ",", "mode", "=", "\"fine_tuning\"", ",", "verbose", "=", "False", ")", "\n", "\n", "callbacks", ".", "append", "(", "linear_evaluator", ")", "\n", "callbacks", ".", "append", "(", "fine_tuner", ")", "\n", "\n", "# configure trainer", "\n", "", "trainer", "=", "Trainer", "(", "logger", "=", "tb_logger", ",", "max_epochs", "=", "config", "[", "\"epochs\"", "]", ",", "gpus", "=", "args", ".", "gpus", ",", "\n", "distributed_backend", "=", "args", ".", "distributed_backend", ",", "auto_lr_find", "=", "False", ",", "num_nodes", "=", "args", ".", "num_nodes", ",", "precision", "=", "config", "[", "\"precision\"", "]", ",", "callbacks", "=", "callbacks", ")", "\n", "\n", "# pytorch lightning module", "\n", "def", "create_encoder", "(", ")", ":", "return", "ResNetSimCLR", "(", "**", "config", "[", "\"model\"", "]", ")", "\n", "pl_model", "=", "CustomMoCo", "(", "create_encoder", ",", "datamodule", "=", "ecg_datamodule", ",", "num_negatives", "=", "ecg_datamodule", ".", "num_samples", ",", "\n", "emb_dim", "=", "config", "[", "\"model\"", "]", "[", "\"out_dim\"", "]", ",", "config", "=", "config", ",", "transformations", "=", "ecg_datamodule", ".", "transformations", ",", "\n", "batch_size", "=", "config", "[", "\"batch_size\"", "]", ",", "learning_rate", "=", "config", "[", "\"lr\"", "]", ",", "softmax_temperature", "=", "config", "[", "\"lr\"", "]", ",", "\n", "warmup_epochs", "=", "config", "[", "\"warm_up\"", "]", ",", "weight_decay", "=", "eval", "(", "config", "[", "\"weight_decay\"", "]", ")", ")", "\n", "# load checkpoint", "\n", "if", "args", ".", "checkpoint_path", "!=", "\"\"", ":", "\n", "        ", "if", "exists", "(", "args", ".", "checkpoint_path", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Retrieve checkpoint from \"", "+", "args", ".", "checkpoint_path", ")", "\n", "pl_model", ".", "load_from_checkpoint", "(", "args", ".", "checkpoint_path", ")", "\n", "", "else", ":", "\n", "            ", "raise", "(", "\"checkpoint does not exist\"", ")", "\n", "\n", "# start training", "\n", "", "", "trainer", ".", "fit", "(", "pl_model", ",", "ecg_datamodule", ")", "\n", "\n", "aftertrain_routine", "(", "config", ",", "args", ",", "trainer", ",", "pl_model", ",", "ecg_datamodule", ",", "callbacks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.__init__": [[20, 51], ["pytorch_lightning.Callback.__init__", "str"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["    ", "def", "__init__", "(", "self", ",", "drop_p", ":", "float", "=", "0.0", ",", "hidden_dim", ":", "int", "=", "1024", ",", "z_dim", ":", "int", "=", "None", ",", "num_classes", ":", "int", "=", "None", ",", "lin_eval_epochs", "=", "5", ",", "eval_every", "=", "10", ",", "mode", "=", "\"linear_evaluation\"", ",", "discriminative", "=", "True", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Attaches a MLP for finetuning using the standard self-supervised protocol.\n        Example::\n            from pl_bolts.callbacks.self_supervised import SSLOnlineEvaluator\n            # your model must have 2 attributes\n            model = Model()\n            model.z_dim = ... # the representation dim\n            model.num_classes = ... # the num of classes in the model\n        Args:\n            drop_p: (0.2) dropout probability\n            hidden_dim: (1024) the hidden dimension for the finetune MLP\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "drop_p", "=", "drop_p", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "macro", "=", "0", "\n", "self", ".", "best_macro", "=", "0", "\n", "self", ".", "lin_eval_epochs", "=", "lin_eval_epochs", "\n", "self", ".", "eval_every", "=", "eval_every", "\n", "self", ".", "discriminative", "=", "discriminative", "\n", "self", ".", "verbose", "=", "verbose", "\n", "if", "mode", "==", "\"linear_evaluation\"", ":", "\n", "            ", "self", ".", "mode", "=", "mode", "\n", "", "elif", "mode", "==", "\"fine_tuning\"", ":", "\n", "            ", "self", ".", "mode", "=", "mode", "\n", "", "else", ":", "\n", "            ", "raise", "(", "\"mode \"", "+", "str", "(", "mode", ")", "+", "\" unknown\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.get_representations": [[52, 69], ["features", "representations.reshape.reshape.reshape", "isinstance", "isinstance", "isinstance", "representations.reshape.reshape.size", "len"], "methods", ["None"], ["", "", "def", "get_representations", "(", "self", ",", "features", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Override this to customize for the particular model\n        Args:\n            pl_module:\n            x:\n        \"\"\"", "\n", "if", "len", "(", "x", ")", "==", "2", "and", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "            ", "x", "=", "x", "[", "0", "]", "\n", "\n", "", "representations", "=", "features", "(", "x", ")", "\n", "\n", "if", "(", "isinstance", "(", "representations", ",", "list", ")", "or", "isinstance", "(", "representations", ",", "tuple", ")", ")", ":", "\n", "            ", "representations", "=", "representations", "[", "0", "]", "\n", "\n", "", "representations", "=", "representations", ".", "reshape", "(", "representations", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "representations", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.to_device": [[70, 73], ["None"], "methods", ["None"], ["", "def", "to_device", "(", "self", ",", "batch", ",", "device", ")", ":", "\n", "        ", "x", ",", "y", "=", "batch", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.put_on_device": [[74, 79], ["x.type().to.type().to.type().to", "y.type().to.type().to.type().to", "x.type().to.type().to.type", "y.type().to.type().to.type"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type"], ["", "def", "put_on_device", "(", "self", ",", "batch", ",", "device", ",", "new_type", ")", ":", "\n", "        ", "x", ",", "y", "=", "batch", "\n", "x", "=", "x", ".", "type", "(", "new_type", ")", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "type", "(", "new_type", ")", ".", "to", "(", "device", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.on_sanity_check_start": [[80, 83], ["len", "len"], "methods", ["None"], ["", "def", "on_sanity_check_start", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "self", ".", "val_ds_size", "=", "len", "(", "trainer", ".", "val_dataloaders", "[", "0", "]", ".", "dataset", ")", "\n", "self", ".", "last_batch_id", "=", "len", "(", "trainer", ".", "val_dataloaders", "[", "0", "]", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.on_sanity_check_end": [[84, 86], ["None"], "methods", ["None"], ["", "def", "on_sanity_check_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "self", ".", "macro", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.on_validation_batch_end": [[87, 113], ["online_evaluator.SSLOnlineEvaluator.online_train_setup", "copy.deepcopy", "tqdm.tqdm.tqdm", "online_evaluator.SSLOnlineEvaluator.eval_model", "online_evaluator.SSLOnlineEvaluator.log_values", "range", "online_evaluator.SSLOnlineEvaluator.train_one_epoch", "loss_per_epoch.append", "online_evaluator.SSLOnlineEvaluator.eval_model", "macro_per_epoch.append", "logger.info", "logger.info", "logger.info", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.online_train_setup", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.eval_model", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.log_values", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.train_one_epoch", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.eval_model"], ["", "def", "on_validation_batch_end", "(", "self", ",", "trainer", ",", "pl_module", ",", "outputs", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", ")", ":", "\n", "#def on_validation_batch_end(self, trainer, pl_module, batch, batch_idx, dataloader_idx):", "\n", "# reset mlp after each epoch to get fresh linear evaluation values at every epoch", "\n", "        ", "if", "pl_module", ".", "epoch", "%", "self", ".", "eval_every", "==", "0", "and", "batch_idx", "==", "0", "and", "dataloader_idx", "==", "0", ":", "\n", "            ", "new_type", ",", "device", ",", "valid_loader", ",", "features", ",", "linear_head", ",", "optimizer", "=", "self", ".", "online_train_setup", "(", "\n", "pl_module", ",", "trainer", ")", "\n", "\n", "loss_per_epoch", "=", "[", "]", "\n", "macro_per_epoch", "=", "[", "]", "\n", "linear_head2", "=", "deepcopy", "(", "linear_head", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "self", ".", "lin_eval_epochs", ")", ")", ":", "\n", "\n", "                ", "total_loss_one_epoch", ",", "linear_head", "=", "self", ".", "train_one_epoch", "(", "\n", "valid_loader", ",", "features", ",", "linear_head", ",", "optimizer", ",", "device", ",", "new_type", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "                    ", "loss_per_epoch", ".", "append", "(", "total_loss_one_epoch", ")", "\n", "macro", ",", "total_loss", "=", "self", ".", "eval_model", "(", "\n", "trainer", ",", "features", ",", "linear_head", ",", "device", ",", "new_type", ")", "\n", "macro_per_epoch", ".", "append", "(", "macro", ")", "\n", "logger", ".", "info", "(", "\"macro at epoch \"", "+", "str", "(", "epoch", ")", "+", "\": \"", "+", "str", "(", "macro", ")", ")", "\n", "logger", ".", "info", "(", "\"train loss at epoch \"", "+", "str", "(", "epoch", ")", "+", "\": \"", "+", "str", "(", "total_loss_one_epoch", ")", ")", "\n", "logger", ".", "info", "(", "\"test loss at epoch \"", "+", "str", "(", "epoch", ")", "+", "\": \"", "+", "str", "(", "total_loss", ")", ")", "\n", "\n", "", "", "macro", ",", "total_loss", "=", "self", ".", "eval_model", "(", "trainer", ",", "features", ",", "linear_head", ",", "device", ",", "new_type", ")", "\n", "self", ".", "log_values", "(", "trainer", ",", "pl_module", ",", "macro", ",", "total_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.online_train_setup": [[114, 171], ["pl_module.type", "pl_module.get_device", "copy.deepcopy", "torch.nn.modules.linear.Linear().type", "pl_module.get_model", "torch.optim.AdamW", "torch.nn.modules.linear.Linear", "torch.nn.modules.linear.Linear().type.parameters", "torch.optim.AdamW", "dict", "dict.keys", "set", "sorted", "optimizer_param_list.append", "torch.optim.AdamW", "copy.deepcopy.named_parameters", "len", "optimizer_param_list.append", "sorted.add", "len", "features_groups.append", "features_groups.append", "torch.nn.modules.linear.Linear().type.parameters", "copy.deepcopy.parameters", "torch.nn.modules.linear.Linear().type.parameters", "list", "list", "filter", "filter"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.get_device", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.get_model"], ["", "", "def", "online_train_setup", "(", "self", ",", "pl_module", ",", "trainer", ")", ":", "\n", "        ", "new_type", "=", "pl_module", ".", "type", "(", ")", "\n", "device", "=", "pl_module", ".", "get_device", "(", ")", "\n", "valid_loader", "=", "trainer", ".", "val_dataloaders", "[", "1", "]", "\n", "if", "self", ".", "mode", "==", "\"linear_evaluation\"", ":", "\n", "            ", "lr", "=", "8e-3", "*", "(", "valid_loader", ".", "batch_size", "/", "256", ")", "\n", "", "else", ":", "\n", "            ", "lr", "=", "8e-5", "*", "(", "valid_loader", ".", "batch_size", "/", "256", ")", "\n", "# print(\"using lr:\", lr)", "\n", "# print(\"using batch size: \", valid_loader.batch_size)", "\n", "", "wd", "=", "1e-1", "\n", "features", "=", "deepcopy", "(", "pl_module", ".", "get_model", "(", ")", ")", "\n", "linear_head", "=", "Linear", "(", "\n", "features", ".", "l1", ".", "in_features", ",", "self", ".", "num_classes", ",", "bias", "=", "True", ")", ".", "type", "(", "new_type", ")", "\n", "if", "self", ".", "mode", "==", "\"linear_evaluation\"", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "\n", "linear_head", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "wd", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "self", ".", "discriminative", ":", "\n", "                ", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "[", "\n", "{", "\"params\"", ":", "features", ".", "parameters", "(", ")", "}", ",", "{", "\"params\"", ":", "linear_head", ".", "parameters", "(", ")", "}", "]", ",", "lr", "=", "lr", ",", "weight_decay", "=", "wd", ")", "\n", "", "else", ":", "\n", "                ", "lr", "=", "(", "8e-3", "*", "(", "valid_loader", ".", "batch_size", "/", "256", ")", ")", "\n", "param_dict", "=", "dict", "(", "features", ".", "named_parameters", "(", ")", ")", "\n", "keys", "=", "param_dict", ".", "keys", "(", ")", "\n", "weight_layer_nrs", "=", "set", "(", ")", "\n", "for", "key", "in", "keys", ":", "\n", "                    ", "if", "\"features\"", "in", "key", ":", "\n", "# parameter names have the form features.x", "\n", "                        ", "weight_layer_nrs", ".", "add", "(", "key", "[", "9", "]", ")", "\n", "", "", "weight_layer_nrs", "=", "sorted", "(", "weight_layer_nrs", ",", "reverse", "=", "True", ")", "\n", "features_groups", "=", "[", "]", "\n", "while", "len", "(", "weight_layer_nrs", ")", ">", "0", ":", "\n", "                    ", "if", "len", "(", "weight_layer_nrs", ")", ">", "1", ":", "\n", "                        ", "features_groups", ".", "append", "(", "list", "(", "filter", "(", "\n", "lambda", "x", ":", "\"features.\"", "+", "weight_layer_nrs", "[", "0", "]", "in", "x", "or", "\"features.\"", "+", "weight_layer_nrs", "[", "1", "]", "in", "x", ",", "keys", ")", ")", ")", "\n", "del", "weight_layer_nrs", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "                        ", "features_groups", ".", "append", "(", "\n", "list", "(", "filter", "(", "lambda", "x", ":", "\"features.\"", "+", "weight_layer_nrs", "[", "0", "]", "in", "x", ",", "keys", ")", ")", ")", "\n", "del", "weight_layer_nrs", "[", "0", "]", "\n", "# linears = list(filter(lambda x: \"l\" in x, keys)) # filter linear layers", "\n", "# groups = [linears] + features_groups", "\n", "", "", "optimizer_param_list", "=", "[", "]", "\n", "tmp_lr", "=", "lr", "\n", "optimizer_param_list", ".", "append", "(", "\n", "{", "\"params\"", ":", "linear_head", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "tmp_lr", "}", ")", "\n", "tmp_lr", "/=", "4", "\n", "for", "layers", "in", "features_groups", ":", "\n", "                    ", "layer_params", "=", "[", "param_dict", "[", "param_name", "]", "\n", "for", "param_name", "in", "layers", "]", "\n", "optimizer_param_list", ".", "append", "(", "\n", "{", "\"params\"", ":", "layer_params", ",", "\"lr\"", ":", "tmp_lr", "}", ")", "\n", "tmp_lr", "/=", "4", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "optimizer_param_list", ",", "lr", "=", "lr", ",", "weight_decay", "=", "wd", ")", "\n", "\n", "", "", "return", "new_type", ",", "device", ",", "valid_loader", ",", "features", ",", "linear_head", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.train_one_epoch": [[172, 202], ["linear_head.train", "features.eval", "features.train", "online_evaluator.SSLOnlineEvaluator.put_on_device", "torch.nn.functional.binary_cross_entropy_with_logits.item", "torch.enable_grad", "linear_head", "torch.nn.functional.binary_cross_entropy_with_logits", "optimizer.zero_grad", "torch.nn.functional.binary_cross_entropy_with_logits.backward", "optimizer.step", "torch.no_grad", "online_evaluator.SSLOnlineEvaluator.get_representations", "torch.enable_grad", "online_evaluator.SSLOnlineEvaluator.get_representations"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.put_on_device", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.SyncFunction.backward", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.get_representations", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.get_representations"], ["", "def", "train_one_epoch", "(", "self", ",", "valid_loader", ",", "features", ",", "linear_head", ",", "optimizer", ",", "device", ",", "new_type", ")", ":", "\n", "        ", "linear_head", ".", "train", "(", ")", "\n", "if", "self", ".", "mode", "==", "\"linear_evaluation\"", ":", "\n", "# we dont want to update things like batchnorm statistics in linear evaluation", "\n", "            ", "features", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "features", ".", "train", "(", ")", "\n", "", "total_loss_one_epoch", "=", "0", "\n", "for", "cur_batch", "in", "valid_loader", ":", "\n", "            ", "x", ",", "y", "=", "self", ".", "put_on_device", "(", "\n", "cur_batch", ",", "device", ",", "new_type", ")", "\n", "if", "self", ".", "mode", "==", "\"linear_evaluation\"", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "representations", "=", "self", ".", "get_representations", "(", "\n", "features", ",", "x", ")", "\n", "", "", "else", ":", "\n", "                ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                    ", "representations", "=", "self", ".", "get_representations", "(", "\n", "features", ",", "x", ")", "\n", "# forward pass", "\n", "", "", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "mlp_preds", "=", "linear_head", "(", "representations", ")", "\n", "mlp_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "mlp_preds", ",", "y", ")", "\n", "# update finetune weights", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "mlp_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "total_loss_one_epoch", "+=", "mlp_loss", ".", "item", "(", ")", "\n", "", "return", "total_loss_one_epoch", ",", "linear_head", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.eval_model": [[203, 224], ["features.eval", "torch.cat().numpy", "torch.cat().numpy", "sklearn.metrics.roc_auc_score", "online_evaluator.SSLOnlineEvaluator.put_on_device", "torch.no_grad", "online_evaluator.SSLOnlineEvaluator.get_representations", "torch.sigmoid", "torch.cat().numpy.append", "torch.cat().numpy.append", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.cat", "torch.cat", "linear_head", "torch.sigmoid.cpu", "y.cpu"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.put_on_device", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.get_representations"], ["", "def", "eval_model", "(", "self", ",", "trainer", ",", "features", ",", "linear_head", ",", "device", ",", "new_type", ")", ":", "\n", "        ", "features", ".", "eval", "(", ")", "\n", "preds", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "total_loss", "=", "0", "\n", "test_loader", "=", "trainer", ".", "val_dataloaders", "[", "2", "]", "\n", "for", "cur_batch", "in", "test_loader", ":", "\n", "            ", "x", ",", "y", "=", "self", ".", "put_on_device", "(", "\n", "cur_batch", ",", "device", ",", "new_type", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "representations", "=", "self", ".", "get_representations", "(", "features", ",", "x", ")", "\n", "mlp_preds", "=", "torch", ".", "sigmoid", "(", "\n", "linear_head", "(", "representations", ")", ")", "\n", "preds", ".", "append", "(", "mlp_preds", ".", "cpu", "(", ")", ")", "\n", "labels", ".", "append", "(", "y", ".", "cpu", "(", ")", ")", "\n", "total_loss", "+=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "mlp_preds", ",", "y", ")", "\n", "", "", "preds", "=", "torch", ".", "cat", "(", "preds", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ")", ".", "numpy", "(", ")", "\n", "macro", "=", "roc_auc_score", "(", "labels", ",", "preds", ")", "\n", "return", "macro", ",", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.log_values": [[225, 234], ["pl_module.logger.log_metrics"], "methods", ["None"], ["", "def", "log_values", "(", "self", ",", "trainer", ",", "pl_module", ",", "macro", ",", "total_loss", ")", ":", "\n", "        ", "self", ".", "best_macro", "=", "macro", "if", "macro", ">", "self", ".", "best_macro", "else", "self", ".", "best_macro", "\n", "if", "self", ".", "mode", "==", "\"linear_evaluation\"", ":", "\n", "            ", "log_key", "=", "\"le\"", "\n", "", "else", ":", "\n", "            ", "log_key", "=", "\"ft\"", "\n", "", "metrics", "=", "{", "log_key", "+", "'_mlp/loss'", ":", "total_loss", ",", "\n", "log_key", "+", "'_mlp/macro'", ":", "macro", ",", "log_key", "+", "'_mlp/best_macro'", ":", "self", ".", "best_macro", "}", "\n", "pl_module", ".", "logger", ".", "log_metrics", "(", "metrics", ",", "step", "=", "trainer", ".", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.online_evaluator.SSLOnlineEvaluator.__str__": [[235, 237], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mode", "+", "\"_callback\"", "", "", "", ""]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.SwAVTrainDataTransform.__init__": [[46, 121], ["torchvision.ColorJitter", "torchvision.Compose", "range", "torchvision.Compose", "custom_swav_bolts.SwAVTrainDataTransform.transform.append", "len", "len", "len", "len", "len", "len", "torchvision.RandomApply", "torchvision.RandomGrayscale", "int", "color_transform.append", "torchvision.ToTensor", "torchvision.Compose", "len", "torchvision.RandomResizedCrop", "transform.extend", "GaussianBlur", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Compose", "torchvision.RandomHorizontalFlip"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "normalize", "=", "None", ",", "\n", "size_crops", ":", "List", "[", "int", "]", "=", "[", "96", ",", "36", "]", ",", "\n", "nmb_crops", ":", "List", "[", "int", "]", "=", "[", "2", ",", "4", "]", ",", "\n", "min_scale_crops", ":", "List", "[", "float", "]", "=", "[", "0.33", ",", "0.10", "]", ",", "\n", "max_scale_crops", ":", "List", "[", "float", "]", "=", "[", "1", ",", "0.33", "]", ",", "\n", "gaussian_blur", ":", "bool", "=", "True", ",", "\n", "jitter_strength", ":", "float", "=", "1.", "\n", ")", ":", "\n", "        ", "self", ".", "jitter_strength", "=", "jitter_strength", "\n", "self", ".", "gaussian_blur", "=", "gaussian_blur", "\n", "\n", "assert", "len", "(", "size_crops", ")", "==", "len", "(", "nmb_crops", ")", "\n", "assert", "len", "(", "min_scale_crops", ")", "==", "len", "(", "nmb_crops", ")", "\n", "assert", "len", "(", "max_scale_crops", ")", "==", "len", "(", "nmb_crops", ")", "\n", "\n", "self", ".", "size_crops", "=", "size_crops", "\n", "self", ".", "nmb_crops", "=", "nmb_crops", "\n", "self", ".", "min_scale_crops", "=", "min_scale_crops", "\n", "self", ".", "max_scale_crops", "=", "max_scale_crops", "\n", "\n", "self", ".", "color_jitter", "=", "transforms", ".", "ColorJitter", "(", "\n", "0.8", "*", "self", ".", "jitter_strength", ",", "\n", "0.8", "*", "self", ".", "jitter_strength", ",", "\n", "0.8", "*", "self", ".", "jitter_strength", ",", "\n", "0.2", "*", "self", ".", "jitter_strength", "\n", ")", "\n", "\n", "transform", "=", "[", "]", "\n", "color_transform", "=", "[", "\n", "transforms", ".", "RandomApply", "(", "[", "self", ".", "color_jitter", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", "\n", "]", "\n", "\n", "if", "self", ".", "gaussian_blur", ":", "\n", "            ", "kernel_size", "=", "int", "(", "0.1", "*", "self", ".", "size_crops", "[", "0", "]", ")", "\n", "if", "kernel_size", "%", "2", "==", "0", ":", "\n", "                ", "kernel_size", "+=", "1", "\n", "\n", "", "color_transform", ".", "append", "(", "\n", "GaussianBlur", "(", "kernel_size", "=", "kernel_size", ",", "p", "=", "0.5", ")", "\n", ")", "\n", "\n", "", "self", ".", "color_transform", "=", "transforms", ".", "Compose", "(", "color_transform", ")", "\n", "\n", "if", "normalize", "is", "None", ":", "\n", "            ", "self", ".", "final_transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "size_crops", ")", ")", ":", "\n", "            ", "random_resized_crop", "=", "transforms", ".", "RandomResizedCrop", "(", "\n", "self", ".", "size_crops", "[", "i", "]", ",", "\n", "scale", "=", "(", "self", ".", "min_scale_crops", "[", "i", "]", ",", "self", ".", "max_scale_crops", "[", "i", "]", ")", ",", "\n", ")", "\n", "\n", "transform", ".", "extend", "(", "[", "transforms", ".", "Compose", "(", "[", "\n", "random_resized_crop", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "self", ".", "color_transform", ",", "\n", "self", ".", "final_transform", "]", ")", "\n", "]", "*", "self", ".", "nmb_crops", "[", "i", "]", ")", "\n", "\n", "", "self", ".", "transform", "=", "transform", "\n", "\n", "# add online train transform of the size of global view", "\n", "online_train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "self", ".", "size_crops", "[", "0", "]", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "self", ".", "final_transform", "\n", "]", ")", "\n", "\n", "self", ".", "transform", ".", "append", "(", "online_train_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.SwAVTrainDataTransform.__call__": [[122, 127], ["list", "map", "transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "multi_crops", "=", "list", "(", "\n", "map", "(", "lambda", "transform", ":", "transform", "(", "sample", ")", ",", "self", ".", "transform", ")", "\n", ")", "\n", "return", "multi_crops", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.SwAVEvalDataTransform.__init__": [[130, 159], ["custom_swav_bolts.SwAVTrainDataTransform.__init__", "torchvision.Compose", "torchvision.Resize", "torchvision.CenterCrop", "int"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "normalize", "=", "None", ",", "\n", "size_crops", ":", "List", "[", "int", "]", "=", "[", "96", ",", "36", "]", ",", "\n", "nmb_crops", ":", "List", "[", "int", "]", "=", "[", "2", ",", "4", "]", ",", "\n", "min_scale_crops", ":", "List", "[", "float", "]", "=", "[", "0.33", ",", "0.10", "]", ",", "\n", "max_scale_crops", ":", "List", "[", "float", "]", "=", "[", "1", ",", "0.33", "]", ",", "\n", "gaussian_blur", ":", "bool", "=", "True", ",", "\n", "jitter_strength", ":", "float", "=", "1.", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "normalize", "=", "normalize", ",", "\n", "size_crops", "=", "size_crops", ",", "\n", "nmb_crops", "=", "nmb_crops", ",", "\n", "min_scale_crops", "=", "min_scale_crops", ",", "\n", "max_scale_crops", "=", "max_scale_crops", ",", "\n", "gaussian_blur", "=", "gaussian_blur", ",", "\n", "jitter_strength", "=", "jitter_strength", "\n", ")", "\n", "\n", "input_height", "=", "self", ".", "size_crops", "[", "0", "]", "# get global view crop", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "int", "(", "input_height", "+", "0.1", "*", "input_height", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "input_height", ")", ",", "\n", "self", ".", "final_transform", ",", "\n", "]", ")", "\n", "\n", "# replace last transform to eval transform in self.transform list", "\n", "self", ".", "transform", "[", "-", "1", "]", "=", "test_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.SwAVFinetuneTransform.__init__": [[162, 203], ["torchvision.ColorJitter", "data_transforms.append", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Compose", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomApply", "torchvision.RandomGrayscale", "torchvision.Resize", "torchvision.CenterCrop", "int", "torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_height", ":", "int", "=", "224", ",", "\n", "jitter_strength", ":", "float", "=", "1.", ",", "\n", "normalize", "=", "None", ",", "\n", "eval_transform", ":", "bool", "=", "False", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "self", ".", "jitter_strength", "=", "jitter_strength", "\n", "self", ".", "input_height", "=", "input_height", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n", "self", ".", "color_jitter", "=", "transforms", ".", "ColorJitter", "(", "\n", "0.8", "*", "self", ".", "jitter_strength", ",", "\n", "0.8", "*", "self", ".", "jitter_strength", ",", "\n", "0.8", "*", "self", ".", "jitter_strength", ",", "\n", "0.2", "*", "self", ".", "jitter_strength", "\n", ")", "\n", "\n", "if", "not", "eval_transform", ":", "\n", "            ", "data_transforms", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "size", "=", "self", ".", "input_height", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "self", ".", "color_jitter", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", "\n", "]", "\n", "", "else", ":", "\n", "            ", "data_transforms", "=", "[", "\n", "transforms", ".", "Resize", "(", "\n", "int", "(", "self", ".", "input_height", "+", "0.1", "*", "self", ".", "input_height", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "self", ".", "input_height", ")", "\n", "]", "\n", "\n", "", "if", "normalize", "is", "None", ":", "\n", "            ", "final_transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "", "else", ":", "\n", "            ", "final_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", "\n", "\n", "", "data_transforms", ".", "append", "(", "final_transform", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "data_transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.SwAVFinetuneTransform.__call__": [[204, 206], ["custom_swav_bolts.SwAVFinetuneTransform.transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "self", ".", "transform", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomResNet.__init__": [[209, 256], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "isinstance", "custom_swav_bolts.CustomResNet.modules", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "custom_swav_bolts.MultiPrototypes", "isinstance", "custom_swav_bolts.CustomResNet.modules", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "zero_init_residual", "=", "False", ",", "\n", "output_dim", "=", "16", ",", "\n", "hidden_mlp", "=", "512", ",", "\n", "nmb_prototypes", "=", "8", ",", "\n", "eval_mode", "=", "False", ",", "\n", "first_conv", "=", "True", ",", "\n", "maxpool1", "=", "True", ",", "\n", "l2norm", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", "CustomResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "l2norm", "=", "l2norm", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "features", "=", "self", ".", "model", ".", "features", "\n", "self", ".", "projection_head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", ",", "hidden_mlp", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "hidden_mlp", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_mlp", ",", "output_dim", ")", ",", "\n", ")", "\n", "\n", "# prototype layer", "\n", "self", ".", "prototypes", "=", "None", "\n", "if", "isinstance", "(", "nmb_prototypes", ",", "list", ")", ":", "\n", "            ", "self", ".", "prototypes", "=", "MultiPrototypes", "(", "output_dim", ",", "nmb_prototypes", ")", "\n", "", "elif", "nmb_prototypes", ">", "0", ":", "\n", "            ", "self", ".", "prototypes", "=", "nn", ".", "Linear", "(", "output_dim", ",", "nmb_prototypes", ",", "bias", "=", "False", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomResNet.forward_backbone": [[257, 262], ["x.type.type.type", "custom_swav_bolts.CustomResNet.features", "h.squeeze.squeeze.squeeze", "[].weight.type"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.squeeze", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type"], ["", "", "", "", "def", "forward_backbone", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "type", "(", "self", ".", "features", "[", "0", "]", "[", "0", "]", ".", "weight", ".", "type", "(", ")", ")", "\n", "h", "=", "self", ".", "features", "(", "x", ")", "\n", "h", "=", "h", ".", "squeeze", "(", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomResNet.forward_head": [[263, 273], ["custom_swav_bolts.CustomResNet.projection_head", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "custom_swav_bolts.CustomResNet.prototypes"], "methods", ["None"], ["", "def", "forward_head", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "projection_head", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "projection_head", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "l2norm", ":", "\n", "            ", "x", "=", "nn", ".", "functional", ".", "normalize", "(", "x", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "\n", "", "if", "self", ".", "prototypes", "is", "not", "None", ":", "\n", "            ", "return", "x", ",", "self", ".", "prototypes", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomResNet.forward": [[274, 296], ["torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "custom_swav_bolts.CustomResNet.forward_head", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "str", "custom_swav_bolts.CustomResNet.forward_backbone", "custom_swav_bolts.CustomResNet.forward_backbone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "custom_swav_bolts.CustomResNet.cuda"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomResNet.forward_head", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomResNet.forward_backbone", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomResNet.forward_backbone"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "inputs", ",", "list", ")", ":", "\n", "            ", "inputs", "=", "[", "inputs", "]", "\n", "", "idx_crops", "=", "torch", ".", "cumsum", "(", "torch", ".", "unique_consecutive", "(", "\n", "torch", ".", "tensor", "(", "[", "inp", ".", "shape", "[", "-", "1", "]", "for", "inp", "in", "inputs", "]", ")", ",", "\n", "return_counts", "=", "True", ",", "\n", ")", "[", "1", "]", ",", "0", ")", "\n", "start_idx", "=", "0", "\n", "for", "end_idx", "in", "idx_crops", ":", "\n", "            ", "_out", "=", "torch", ".", "cat", "(", "inputs", "[", "start_idx", ":", "end_idx", "]", ")", "\n", "\n", "if", "'cuda'", "in", "str", "(", "self", ".", "features", "[", "0", "]", "[", "0", "]", ".", "weight", ".", "device", ")", ":", "\n", "                ", "_out", "=", "self", ".", "forward_backbone", "(", "_out", ".", "cuda", "(", "non_blocking", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "_out", "=", "self", ".", "forward_backbone", "(", "_out", ")", "\n", "\n", "", "if", "start_idx", "==", "0", ":", "\n", "                ", "output", "=", "_out", "\n", "", "else", ":", "\n", "                ", "output", "=", "torch", ".", "cat", "(", "(", "output", ",", "_out", ")", ")", "\n", "", "start_idx", "=", "end_idx", "\n", "", "return", "self", ".", "forward_head", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.MultiPrototypes.__init__": [[299, 305], ["torch.nn.Module.__init__", "len", "enumerate", "custom_swav_bolts.MultiPrototypes.add_module", "torch.nn.Linear", "torch.nn.Linear", "str"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_dim", ",", "nmb_prototypes", ")", ":", "\n", "        ", "super", "(", "MultiPrototypes", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nmb_heads", "=", "len", "(", "nmb_prototypes", ")", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "nmb_prototypes", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\"prototypes\"", "+", "str", "(", "i", ")", ",", "\n", "nn", ".", "Linear", "(", "output_dim", ",", "k", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.MultiPrototypes.forward": [[306, 311], ["range", "out.append", "getattr", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nmb_heads", ")", ":", "\n", "            ", "out", ".", "append", "(", "getattr", "(", "self", ",", "\"prototypes\"", "+", "str", "(", "i", ")", ")", "(", "x", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.__init__": [[314, 457], ["pytorch_lightning.LightningModule.__init__", "numpy.linspace", "numpy.arange", "numpy.array", "numpy.concatenate", "custom_swav_bolts.CustomSwAV.init_model", "torch.nn.Softmax", "torch.nn.Softmax", "math.cos"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.init_model"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "gpus", ":", "int", ",", "\n", "num_samples", ":", "int", ",", "\n", "batch_size", ":", "int", ",", "\n", "config", "=", "None", ",", "\n", "transformations", "=", "None", ",", "\n", "nodes", ":", "int", "=", "1", ",", "\n", "arch", ":", "str", "=", "'resnet50'", ",", "\n", "hidden_mlp", ":", "int", "=", "2048", ",", "\n", "feat_dim", ":", "int", "=", "128", ",", "\n", "warmup_epochs", ":", "int", "=", "10", ",", "\n", "max_epochs", ":", "int", "=", "100", ",", "\n", "nmb_prototypes", ":", "int", "=", "3000", ",", "\n", "freeze_prototypes_epochs", ":", "int", "=", "1", ",", "\n", "temperature", ":", "float", "=", "0.1", ",", "\n", "sinkhorn_iterations", ":", "int", "=", "3", ",", "\n", "# queue_length: int = 512,  # must be divisible by total batch-size", "\n", "queue_path", ":", "str", "=", "\"queue\"", ",", "\n", "epoch_queue_starts", ":", "int", "=", "15", ",", "\n", "crops_for_assign", ":", "list", "=", "[", "0", ",", "1", "]", ",", "\n", "nmb_crops", ":", "list", "=", "[", "2", ",", "6", "]", ",", "\n", "first_conv", ":", "bool", "=", "True", ",", "\n", "maxpool1", ":", "bool", "=", "True", ",", "\n", "optimizer", ":", "str", "=", "'adam'", ",", "\n", "lars_wrapper", ":", "bool", "=", "False", ",", "\n", "exclude_bn_bias", ":", "bool", "=", "False", ",", "\n", "start_lr", ":", "float", "=", "0.", ",", "\n", "learning_rate", ":", "float", "=", "1e-3", ",", "\n", "final_lr", ":", "float", "=", "0.", ",", "\n", "weight_decay", ":", "float", "=", "1e-6", ",", "\n", "epsilon", ":", "float", "=", "0.05", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            gpus: number of gpus per node used in training, passed to SwAV module\n                to manage the queue and select distributed sinkhorn\n            nodes: number of nodes to train on\n            num_samples: number of image samples used for training\n            batch_size: batch size per GPU in ddp\n            dataset: dataset being used for train/val\n            arch: encoder architecture used for pre-training\n            hidden_mlp: hidden layer of non-linear projection head, set to 0\n                to use a linear projection head\n            feat_dim: output dim of the projection head\n            warmup_epochs: apply linear warmup for this many epochs\n            max_epochs: epoch count for pre-training\n            nmb_prototypes: count of prototype vectors\n            freeze_prototypes_epochs: epoch till which gradients of prototype layer\n                are frozen\n            temperature: loss temperature\n            sinkhorn_iterations: iterations for sinkhorn normalization\n            queue_length: set queue when batch size is small,\n                must be divisible by total batch-size (i.e. total_gpus * batch_size),\n                set to 0 to remove the queue\n            queue_path: folder within the logs directory\n            epoch_queue_starts: start uing the queue after this epoch\n            crops_for_assign: list of crop ids for computing assignment\n            nmb_crops: number of global and local crops, ex: [2, 6]\n            first_conv: keep first conv same as the original resnet architecture,\n                if set to false it is replace by a kernel 3, stride 1 conv (cifar-10)\n            maxpool1: keep first maxpool layer same as the original resnet architecture,\n                if set to false, first maxpool is turned off (cifar10, maybe stl10)\n            optimizer: optimizer to use\n            lars_wrapper: use LARS wrapper over the optimizer\n            exclude_bn_bias: exclude batchnorm and bias layers from weight decay in optimizers\n            start_lr: starting lr for linear warmup\n            learning_rate: learning rate\n            final_lr: float = final learning rate for cosine weight decay\n            weight_decay: weight decay for optimizer\n            epsilon: epsilon val for swav assignments\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# self.save_hyperparameters()", "\n", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "transformations", "=", "transformations", "\n", "self", ".", "gpus", "=", "gpus", "\n", "self", ".", "nodes", "=", "nodes", "\n", "self", ".", "arch", "=", "arch", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "queue_length", "=", "8", "*", "batch_size", "\n", "\n", "self", ".", "hidden_mlp", "=", "hidden_mlp", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "nmb_prototypes", "=", "nmb_prototypes", "\n", "self", ".", "freeze_prototypes_epochs", "=", "freeze_prototypes_epochs", "\n", "self", ".", "sinkhorn_iterations", "=", "sinkhorn_iterations", "\n", "\n", "#self.queue_length = queue_length", "\n", "self", ".", "queue_path", "=", "queue_path", "\n", "self", ".", "epoch_queue_starts", "=", "epoch_queue_starts", "\n", "self", ".", "crops_for_assign", "=", "crops_for_assign", "\n", "self", ".", "nmb_crops", "=", "nmb_crops", "\n", "\n", "self", ".", "first_conv", "=", "first_conv", "\n", "self", ".", "maxpool1", "=", "maxpool1", "\n", "\n", "self", ".", "optim", "=", "optimizer", "\n", "self", ".", "lars_wrapper", "=", "lars_wrapper", "\n", "self", ".", "exclude_bn_bias", "=", "exclude_bn_bias", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n", "self", ".", "start_lr", "=", "start_lr", "\n", "self", ".", "final_lr", "=", "final_lr", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "warmup_epochs", "=", "warmup_epochs", "\n", "self", ".", "max_epochs", "=", "config", "[", "\"epochs\"", "]", "\n", "\n", "if", "self", ".", "gpus", "*", "self", ".", "nodes", ">", "1", ":", "\n", "            ", "self", ".", "get_assignments", "=", "self", ".", "distributed_sinkhorn", "\n", "", "else", ":", "\n", "            ", "self", ".", "get_assignments", "=", "self", ".", "sinkhorn", "\n", "\n", "\n", "\n", "# compute iters per epoch", "\n", "", "global_batch_size", "=", "self", ".", "nodes", "*", "self", ".", "gpus", "*", "self", ".", "batch_size", "if", "self", ".", "gpus", ">", "0", "else", "self", ".", "batch_size", "\n", "self", ".", "train_iters_per_epoch", "=", "(", "self", ".", "num_samples", "//", "global_batch_size", ")", "+", "1", "\n", "\n", "# define LR schedule", "\n", "warmup_lr_schedule", "=", "np", ".", "linspace", "(", "\n", "self", ".", "start_lr", ",", "self", ".", "learning_rate", ",", "self", ".", "train_iters_per_epoch", "*", "self", ".", "warmup_epochs", "\n", ")", "\n", "iters", "=", "np", ".", "arange", "(", "self", ".", "train_iters_per_epoch", "*", "\n", "(", "self", ".", "max_epochs", "-", "self", ".", "warmup_epochs", ")", ")", "\n", "cosine_lr_schedule", "=", "np", ".", "array", "(", "[", "self", ".", "final_lr", "+", "0.5", "*", "(", "self", ".", "learning_rate", "-", "self", ".", "final_lr", ")", "*", "(", "\n", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "t", "/", "(", "self", ".", "train_iters_per_epoch", "*", "\n", "(", "self", ".", "max_epochs", "-", "self", ".", "warmup_epochs", ")", ")", ")", "\n", ")", "for", "t", "in", "iters", "]", ")", "\n", "\n", "self", ".", "lr_schedule", "=", "np", ".", "concatenate", "(", "\n", "(", "warmup_lr_schedule", ",", "cosine_lr_schedule", ")", ")", "\n", "self", ".", "queue", "=", "None", "\n", "self", ".", "model", "=", "self", ".", "init_model", "(", "model", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.setup": [[459, 471], ["os.path.join", "os.path.join", "os.path.isfile", "os.path.exists", "os.makedirs", "torch.load", "torch.load", "torch.load", "torch.load", "str"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "stage", ")", ":", "\n", "        ", "queue_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", "[", "\"log_dir\"", "]", ",", "self", ".", "queue_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "queue_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "queue_folder", ")", "\n", "\n", "", "self", ".", "queue_path", "=", "os", ".", "path", ".", "join", "(", "\n", "queue_folder", ",", "\n", "\"queue\"", "+", "str", "(", "self", ".", "trainer", ".", "global_rank", ")", "+", "\".pth\"", "\n", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "queue_path", ")", ":", "\n", "            ", "self", ".", "queue", "=", "torch", ".", "load", "(", "self", ".", "queue_path", ")", "[", "\"queue\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.init_model": [[472, 478], ["custom_swav_bolts.CustomResNet"], "methods", ["None"], ["", "", "def", "init_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "return", "CustomResNet", "(", "model", ",", "hidden_mlp", "=", "self", ".", "hidden_mlp", ",", "\n", "output_dim", "=", "self", ".", "feat_dim", ",", "\n", "nmb_prototypes", "=", "self", ".", "nmb_prototypes", ",", "\n", "first_conv", "=", "self", ".", "first_conv", ",", "\n", "maxpool1", "=", "self", ".", "maxpool1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.forward": [[479, 482], ["custom_swav_bolts.CustomSwAV.model.forward_backbone"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomResNet.forward_backbone"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# pass single batch from the resnet backbone", "\n", "        ", "return", "self", ".", "model", ".", "forward_backbone", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.on_train_start": [[483, 495], ["None"], "methods", ["None"], ["", "def", "on_train_start", "(", "self", ")", ":", "\n", "# # log configuration", "\n", "# config_str = re.sub(r\"[,\\}\\{]\", \"<br/>\", str(self.config))", "\n", "# config_str = re.sub(r\"[\\[\\]\\']\", \"\", config_str)", "\n", "# transformation_str = re.sub(r\"[\\}]\", \"<br/>\", str([\"<br>\" + str(", "\n", "#     t) + \":<br/>\" + str(t.get_params()) for t in self.transformations]))", "\n", "# transformation_str = re.sub(r\"[,\\\"\\{\\'\\[\\]]\", \"\", transformation_str)", "\n", "# self.logger.experiment.add_text(", "\n", "#     \"configuration\", str(config_str), global_step=0)", "\n", "# self.logger.experiment.add_text(\"transformations\", str(", "\n", "#     transformation_str), global_step=0)", "\n", "        ", "self", ".", "epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.on_train_epoch_start": [[496, 509], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "custom_swav_bolts.CustomSwAV.queue.cuda"], "methods", ["None"], ["", "def", "on_train_epoch_start", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "queue_length", ">", "0", ":", "\n", "            ", "if", "self", ".", "trainer", ".", "current_epoch", ">=", "self", ".", "epoch_queue_starts", "and", "self", ".", "queue", "is", "None", ":", "\n", "                ", "self", ".", "queue", "=", "torch", ".", "zeros", "(", "\n", "len", "(", "self", ".", "crops_for_assign", ")", ",", "\n", "self", ".", "queue_length", "//", "self", ".", "gpus", ",", "# change to nodes * gpus once multi-node", "\n", "self", ".", "feat_dim", ",", "\n", ")", "\n", "\n", "if", "self", ".", "gpus", ">", "0", ":", "\n", "                    ", "self", ".", "queue", "=", "self", ".", "queue", ".", "cuda", "(", ")", "\n", "\n", "", "", "", "self", ".", "use_the_queue", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.on_train_epoch_end": [[510, 513], ["torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "def", "on_train_epoch_end", "(", "self", ",", "outputs", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "queue", "is", "not", "None", ":", "\n", "            ", "torch", ".", "save", "(", "{", "\"queue\"", ":", "self", ".", "queue", "}", ",", "self", ".", "queue_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.on_epoch_end": [[514, 516], ["None"], "methods", ["None"], ["", "", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "self", ".", "epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.on_after_backward": [[517, 522], ["custom_swav_bolts.CustomSwAV.model.named_parameters"], "methods", ["None"], ["", "def", "on_after_backward", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "current_epoch", "<", "self", ".", "freeze_prototypes_epochs", ":", "\n", "            ", "for", "name", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "\"prototypes\"", "in", "name", ":", "\n", "                    ", "p", ".", "grad", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.shared_step": [[523, 578], ["custom_swav_bolts.CustomSwAV.model", "embedding.detach.detach.detach", "inputs[].size", "enumerate", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "custom_swav_bolts.CustomSwAV.model.prototypes.weight.data.clone", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "custom_swav_bolts.CustomSwAV.model.prototypes.weight.copy_", "numpy.delete", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.exp().t", "torch.exp().t", "torch.exp().t", "torch.exp().t", "numpy.arange", "custom_swav_bolts.CustomSwAV.softmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "custom_swav_bolts.CustomSwAV.queue[].clone", "custom_swav_bolts.CustomSwAV.get_assignments", "numpy.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "numpy.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.all", "torch.all", "torch.all", "torch.all", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "custom_swav_bolts.CustomSwAV.model.prototypes.weight.t"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean"], ["", "", "", "", "def", "shared_step", "(", "self", ",", "batch", ")", ":", "\n", "# if self.dataset == 'stl10':", "\n", "#     unlabeled_batch = batch[0]", "\n", "#     batch = unlabeled_batch", "\n", "\n", "\n", "        ", "inputs", ",", "y", "=", "batch", "\n", "# remove online train/eval transforms at this point", "\n", "inputs", "=", "inputs", "[", ":", "-", "1", "]", "\n", "\n", "# 1. normalize the prototypes", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "w", "=", "self", ".", "model", ".", "prototypes", ".", "weight", ".", "data", ".", "clone", "(", ")", "\n", "w", "=", "nn", ".", "functional", ".", "normalize", "(", "w", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "self", ".", "model", ".", "prototypes", ".", "weight", ".", "copy_", "(", "w", ")", "\n", "\n", "# 2. multi-res forward passes", "\n", "", "embedding", ",", "output", "=", "self", ".", "model", "(", "inputs", ")", "\n", "embedding", "=", "embedding", ".", "detach", "(", ")", "\n", "bs", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "\n", "# 3. swav loss computation", "\n", "loss", "=", "0", "\n", "for", "i", ",", "crop_id", "in", "enumerate", "(", "self", ".", "crops_for_assign", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "out", "=", "output", "[", "bs", "*", "crop_id", ":", "bs", "*", "(", "crop_id", "+", "1", ")", "]", "\n", "\n", "# 4. time to use the queue", "\n", "if", "self", ".", "queue", "is", "not", "None", ":", "\n", "                    ", "if", "self", ".", "use_the_queue", "or", "not", "torch", ".", "all", "(", "self", ".", "queue", "[", "i", ",", "-", "1", ",", ":", "]", "==", "0", ")", ":", "\n", "                        ", "self", ".", "use_the_queue", "=", "True", "\n", "out", "=", "torch", ".", "cat", "(", "(", "torch", ".", "mm", "(", "\n", "self", ".", "queue", "[", "i", "]", ",", "\n", "self", ".", "model", ".", "prototypes", ".", "weight", ".", "t", "(", ")", "\n", ")", ",", "out", ")", ")", "\n", "# fill the queue", "\n", "", "self", ".", "queue", "[", "i", ",", "bs", ":", "]", "=", "self", ".", "queue", "[", "i", ",", ":", "-", "bs", "]", ".", "clone", "(", ")", "\n", "self", ".", "queue", "[", "i", ",", ":", "bs", "]", "=", "embedding", "[", "crop_id", "*", "\n", "bs", ":", "(", "crop_id", "+", "1", ")", "*", "bs", "]", "\n", "\n", "# 5. get assignments", "\n", "", "q", "=", "torch", ".", "exp", "(", "out", "/", "self", ".", "epsilon", ")", ".", "t", "(", ")", "\n", "q", "=", "self", ".", "get_assignments", "(", "q", ",", "self", ".", "sinkhorn_iterations", ")", "[", "-", "bs", ":", "]", "\n", "\n", "# cluster assignment prediction", "\n", "", "subloss", "=", "0", "\n", "for", "v", "in", "np", ".", "delete", "(", "np", ".", "arange", "(", "np", ".", "sum", "(", "self", ".", "nmb_crops", "-", "1", ")", ")", ",", "crop_id", ")", ":", "\n", "                ", "p", "=", "self", ".", "softmax", "(", "\n", "output", "[", "bs", "*", "v", ":", "bs", "*", "(", "v", "+", "1", ")", "]", "/", "self", ".", "temperature", ")", "\n", "loss_value", "=", "q", "*", "torch", ".", "log", "(", "p", ")", "\n", "subloss", "-=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "loss_value", ",", "dim", "=", "1", ")", ")", "\n", "", "loss", "+=", "subloss", "/", "(", "np", ".", "sum", "(", "self", ".", "nmb_crops", ")", "-", "1", ")", "\n", "", "loss", "/=", "len", "(", "self", ".", "crops_for_assign", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.training_step": [[579, 585], ["custom_swav_bolts.CustomSwAV.shared_step"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.shared_step"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "\n", "        ", "loss", "=", "self", ".", "shared_step", "(", "batch", ")", "\n", "\n", "# self.log('train_loss', loss, on_step=True, on_epoch=False)", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.validation_step": [[586, 597], ["custom_swav_bolts.CustomSwAV.shared_step"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.shared_step"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", ")", ":", "\n", "\n", "        ", "if", "dataloader_idx", "!=", "0", ":", "\n", "            ", "return", "{", "}", "\n", "", "loss", "=", "self", ".", "shared_step", "(", "batch", ")", "\n", "\n", "# self.log('val_loss', loss, on_step=False, on_epoch=True)", "\n", "results", "=", "{", "\n", "'val_loss'", ":", "loss", ",", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.validation_epoch_end": [[598, 606], ["custom_swav_bolts.mean"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "# outputs[0] because we are using multiple datasets!", "\n", "        ", "val_loss", "=", "mean", "(", "outputs", "[", "0", "]", ",", "'val_loss'", ")", "\n", "\n", "log", "=", "{", "\n", "'val/val_loss'", ":", "val_loss", ",", "\n", "}", "\n", "return", "{", "'val_loss'", ":", "val_loss", ",", "'log'", ":", "log", ",", "'progress_bar'", ":", "log", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.exclude_from_wt_decay": [[607, 622], ["any", "excluded_params.append", "params.append"], "methods", ["None"], ["", "def", "exclude_from_wt_decay", "(", "self", ",", "named_params", ",", "weight_decay", ",", "skip_list", "=", "[", "'bias'", ",", "'bn'", "]", ")", ":", "\n", "        ", "params", "=", "[", "]", "\n", "excluded_params", "=", "[", "]", "\n", "\n", "for", "name", ",", "param", "in", "named_params", ":", "\n", "            ", "if", "not", "param", ".", "requires_grad", ":", "\n", "                ", "continue", "\n", "", "elif", "any", "(", "layer_name", "in", "name", "for", "layer_name", "in", "skip_list", ")", ":", "\n", "                ", "excluded_params", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "                ", "params", ".", "append", "(", "param", ")", "\n", "\n", "", "", "return", "[", "\n", "{", "'params'", ":", "params", ",", "'weight_decay'", ":", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "excluded_params", ",", "'weight_decay'", ":", "0.", "}", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.configure_optimizers": [[624, 655], ["custom_swav_bolts.CustomSwAV.exclude_from_wt_decay", "custom_swav_bolts.CustomSwAV.parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "pl_bolts.optimizers.lars_scheduling.LARSWrapper", "custom_swav_bolts.CustomSwAV.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.exclude_from_wt_decay"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "exclude_bn_bias", ":", "\n", "            ", "params", "=", "self", ".", "exclude_from_wt_decay", "(", "\n", "self", ".", "named_parameters", "(", ")", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", "\n", ")", "\n", "", "else", ":", "\n", "            ", "params", "=", "self", ".", "parameters", "(", ")", "\n", "\n", "", "if", "self", ".", "optim", "==", "'sgd'", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "params", ",", "\n", "lr", "=", "self", ".", "learning_rate", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", "\n", ")", "\n", "", "elif", "self", ".", "optim", "==", "'adam'", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "params", ",", "\n", "lr", "=", "self", ".", "learning_rate", ",", "\n", "weight_decay", "=", "self", ".", "weight_decay", "\n", ")", "\n", "\n", "", "if", "self", ".", "lars_wrapper", ":", "\n", "            ", "optimizer", "=", "LARSWrapper", "(", "\n", "optimizer", ",", "\n", "eta", "=", "0.001", ",", "# trust coefficient", "\n", "clip", "=", "False", "\n", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.optimizer_step": [[656, 677], ["pytorch_lightning.core.optimizer.LightningOptimizer.to_lightning_optimizer.step", "isinstance", "pytorch_lightning.core.optimizer.LightningOptimizer.to_lightning_optimizer"], "methods", ["None"], ["", "def", "optimizer_step", "(", "\n", "self", ",", "\n", "epoch", ":", "int", "=", "None", ",", "\n", "batch_idx", ":", "int", "=", "None", ",", "\n", "optimizer", ":", "Optimizer", "=", "None", ",", "\n", "optimizer_idx", ":", "int", "=", "None", ",", "\n", "optimizer_closure", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "on_tpu", ":", "bool", "=", "None", ",", "\n", "using_native_amp", ":", "bool", "=", "None", ",", "\n", "using_lbfgs", ":", "bool", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "# warm-up + decay schedule placed here since LARSWrapper is not optimizer class", "\n", "# adjust LR of optim contained within LARSWrapper", "\n", "        ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "\"lr\"", "]", "=", "self", ".", "lr_schedule", "[", "self", ".", "trainer", ".", "global_step", "]", "\n", "\n", "# from lightning", "\n", "", "if", "not", "isinstance", "(", "optimizer", ",", "LightningOptimizer", ")", ":", "\n", "# wraps into LightingOptimizer only for running step", "\n", "            ", "optimizer", "=", "LightningOptimizer", ".", "to_lightning_optimizer", "(", "optimizer", ",", "self", ".", "trainer", ")", "\n", "", "optimizer", ".", "step", "(", "closure", "=", "optimizer_closure", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.sinkhorn": [[678, 701], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "range", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "sinkhorn", "(", "self", ",", "Q", ",", "nmb_iters", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "sum_Q", "=", "torch", ".", "sum", "(", "Q", ")", "\n", "Q", "/=", "sum_Q", "\n", "\n", "K", ",", "B", "=", "Q", ".", "shape", "\n", "\n", "if", "self", ".", "gpus", ">", "0", ":", "\n", "                ", "u", "=", "torch", ".", "zeros", "(", "K", ")", ".", "cuda", "(", ")", "\n", "r", "=", "torch", ".", "ones", "(", "K", ")", ".", "cuda", "(", ")", "/", "K", "\n", "c", "=", "torch", ".", "ones", "(", "B", ")", ".", "cuda", "(", ")", "/", "B", "\n", "", "else", ":", "\n", "                ", "u", "=", "torch", ".", "zeros", "(", "K", ")", "\n", "r", "=", "torch", ".", "ones", "(", "K", ")", "/", "K", "\n", "c", "=", "torch", ".", "ones", "(", "B", ")", "/", "B", "\n", "\n", "", "for", "_", "in", "range", "(", "nmb_iters", ")", ":", "\n", "                ", "u", "=", "torch", ".", "sum", "(", "Q", ",", "dim", "=", "1", ")", "\n", "\n", "Q", "*=", "(", "r", "/", "u", ")", ".", "unsqueeze", "(", "1", ")", "\n", "Q", "*=", "(", "c", "/", "torch", ".", "sum", "(", "Q", ",", "dim", "=", "0", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "return", "(", "Q", "/", "torch", ".", "sum", "(", "Q", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ")", ".", "t", "(", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.distributed_sinkhorn": [[702, 728], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.all_reduce", "torch.all_reduce", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.all_reduce", "torch.all_reduce", "range", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.all_reduce", "torch.all_reduce", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "", "def", "distributed_sinkhorn", "(", "self", ",", "Q", ",", "nmb_iters", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "sum_Q", "=", "torch", ".", "sum", "(", "Q", ")", "\n", "dist", ".", "all_reduce", "(", "sum_Q", ")", "\n", "Q", "/=", "sum_Q", "\n", "\n", "if", "self", ".", "gpus", ">", "0", ":", "\n", "                ", "u", "=", "torch", ".", "zeros", "(", "Q", ".", "shape", "[", "0", "]", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "r", "=", "torch", ".", "ones", "(", "Q", ".", "shape", "[", "0", "]", ")", ".", "cuda", "(", "non_blocking", "=", "True", ")", "/", "Q", ".", "shape", "[", "0", "]", "\n", "c", "=", "torch", ".", "ones", "(", "Q", ".", "shape", "[", "1", "]", ")", ".", "cuda", "(", "\n", "non_blocking", "=", "True", ")", "/", "(", "self", ".", "gpus", "*", "Q", ".", "shape", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "u", "=", "torch", ".", "zeros", "(", "Q", ".", "shape", "[", "0", "]", ")", "\n", "r", "=", "torch", ".", "ones", "(", "Q", ".", "shape", "[", "0", "]", ")", "/", "Q", ".", "shape", "[", "0", "]", "\n", "c", "=", "torch", ".", "ones", "(", "Q", ".", "shape", "[", "1", "]", ")", "/", "(", "self", ".", "gpus", "*", "Q", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "curr_sum", "=", "torch", ".", "sum", "(", "Q", ",", "dim", "=", "1", ")", "\n", "dist", ".", "all_reduce", "(", "curr_sum", ")", "\n", "\n", "for", "it", "in", "range", "(", "nmb_iters", ")", ":", "\n", "                ", "u", "=", "curr_sum", "\n", "Q", "*=", "(", "r", "/", "u", ")", ".", "unsqueeze", "(", "1", ")", "\n", "Q", "*=", "(", "c", "/", "torch", ".", "sum", "(", "Q", ",", "dim", "=", "0", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "curr_sum", "=", "torch", ".", "sum", "(", "Q", ",", "dim", "=", "1", ")", "\n", "dist", ".", "all_reduce", "(", "curr_sum", ")", "\n", "", "return", "(", "Q", "/", "torch", ".", "sum", "(", "Q", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ")", ".", "t", "(", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.type": [[729, 731], ["[].weight.type"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type"], ["", "", "def", "type", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "features", "[", "0", "]", "[", "0", "]", ".", "weight", ".", "type", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.get_representations": [[732, 734], ["custom_swav_bolts.CustomSwAV.model.features"], "methods", ["None"], ["", "def", "get_representations", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "features", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.get_model": [[735, 737], ["None"], "methods", ["None"], ["", "def", "get_model", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.get_device": [[738, 740], ["None"], "methods", ["None"], ["", "def", "get_device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "features", "[", "0", "]", "[", "0", "]", ".", "weight", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.CustomSwAV.add_model_specific_args": [[741, 830], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_model_specific_args", "(", "parent_parser", ")", ":", "\n", "        ", "parser", "=", "ArgumentParser", "(", "parents", "=", "[", "parent_parser", "]", ",", "add_help", "=", "False", ")", "\n", "\n", "# model params", "\n", "parser", ".", "add_argument", "(", "\"--arch\"", ",", "default", "=", "\"resnet50\"", ",", "\n", "type", "=", "str", ",", "help", "=", "\"convnet architecture\"", ")", "\n", "# specify flags to store false", "\n", "parser", ".", "add_argument", "(", "\"--first_conv\"", ",", "action", "=", "'store_false'", ")", "\n", "parser", ".", "add_argument", "(", "\"--maxpool1\"", ",", "action", "=", "'store_false'", ")", "\n", "parser", ".", "add_argument", "(", "\"--hidden_mlp\"", ",", "default", "=", "2048", ",", "type", "=", "int", ",", "\n", "help", "=", "\"hidden layer dimension in projection head\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--feat_dim\"", ",", "default", "=", "128", ",", "\n", "type", "=", "int", ",", "help", "=", "\"feature dimension\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--online_ft\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--fp32\"", ",", "action", "=", "'store_true'", ")", "\n", "\n", "# transform params", "\n", "parser", ".", "add_argument", "(", "\"--gaussian_blur\"", ",", "\n", "action", "=", "\"store_true\"", ",", "help", "=", "\"add gaussian blur\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--jitter_strength\"", ",", "type", "=", "float", ",", "\n", "default", "=", "1.0", ",", "help", "=", "\"jitter strength\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"stl10\"", ",", "help", "=", "\"stl10, cifar10\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\".\"", ",", "help", "=", "\"path to download data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--queue_path\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"queue\"", ",", "help", "=", "\"path for queue\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--nmb_crops\"", ",", "type", "=", "int", ",", "default", "=", "[", "2", ",", "4", "]", ",", "nargs", "=", "\"+\"", ",", "\n", "help", "=", "\"list of number of crops (example: [2, 6])\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--size_crops\"", ",", "type", "=", "int", ",", "default", "=", "[", "96", ",", "36", "]", ",", "nargs", "=", "\"+\"", ",", "\n", "help", "=", "\"crops resolutions (example: [224, 96])\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--min_scale_crops\"", ",", "type", "=", "float", ",", "default", "=", "[", "0.33", ",", "0.10", "]", ",", "nargs", "=", "\"+\"", ",", "\n", "help", "=", "\"argument in RandomResizedCrop (example: [0.14, 0.05])\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_scale_crops\"", ",", "type", "=", "float", ",", "default", "=", "[", "1", ",", "0.33", "]", ",", "nargs", "=", "\"+\"", ",", "\n", "help", "=", "\"argument in RandomResizedCrop (example: [1., 0.14])\"", ")", "\n", "\n", "# training params", "\n", "parser", ".", "add_argument", "(", "\"--fast_dev_run\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--nodes\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"number of nodes for training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpus\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"number of gpus to train on\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_workers\"", ",", "default", "=", "8", ",", "\n", "type", "=", "int", ",", "help", "=", "\"num of workers per GPU\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--optimizer\"", ",", "default", "=", "\"adam\"", ",", "\n", "type", "=", "str", ",", "help", "=", "\"choose between adam/sgd\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lars_wrapper\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"apple lars wrapper over optimizer used\"", ")", "\n", "parser", ".", "add_argument", "(", "'--exclude_bn_bias'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"exclude bn/bias from weight decay\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_epochs\"", ",", "default", "=", "100", ",", "\n", "type", "=", "int", ",", "help", "=", "\"number of total epochs to run\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_steps\"", ",", "default", "=", "-", "1", ",", "\n", "type", "=", "int", ",", "help", "=", "\"max steps\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--warmup_epochs\"", ",", "default", "=", "10", ",", "\n", "type", "=", "int", ",", "help", "=", "\"number of warmup epochs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "default", "=", "128", ",", "\n", "type", "=", "int", ",", "help", "=", "\"batch size per gpu\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--weight_decay\"", ",", "default", "=", "1e-6", ",", "\n", "type", "=", "float", ",", "help", "=", "\"weight decay\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning_rate\"", ",", "default", "=", "1e-3", ",", "\n", "type", "=", "float", ",", "help", "=", "\"base learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--start_lr\"", ",", "default", "=", "0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"initial warmup learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--final_lr\"", ",", "type", "=", "float", ",", "\n", "default", "=", "1e-6", ",", "help", "=", "\"final learning rate\"", ")", "\n", "\n", "# swav params", "\n", "parser", ".", "add_argument", "(", "\"--crops_for_assign\"", ",", "type", "=", "int", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "0", ",", "1", "]", ",", "\n", "help", "=", "\"list of crops id used for computing assignments\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--temperature\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "\"temperature parameter in training loss\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--epsilon\"", ",", "default", "=", "0.05", ",", "type", "=", "float", ",", "\n", "help", "=", "\"regularization parameter for Sinkhorn-Knopp algorithm\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--sinkhorn_iterations\"", ",", "default", "=", "3", ",", "type", "=", "int", ",", "\n", "help", "=", "\"number of iterations in Sinkhorn-Knopp algorithm\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--nmb_prototypes\"", ",", "default", "=", "512", ",", "\n", "type", "=", "int", ",", "help", "=", "\"number of prototypes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--queue_length\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"length of the queue (0 for no queue); must be divisible by total batch size\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--epoch_queue_starts\"", ",", "type", "=", "int", ",", "default", "=", "15", ",", "\n", "help", "=", "\"from this epoch, we start using a queue\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--freeze_prototypes_epochs\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"freeze the prototypes during this many epochs from the start\"", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.mean": [[832, 836], ["torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "type", "x.keys"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type"], ["", "", "def", "mean", "(", "res", ",", "key1", ",", "key2", "=", "None", ")", ":", "\n", "    ", "if", "key2", "is", "not", "None", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "[", "x", "[", "key1", "]", "[", "key2", "]", "for", "x", "in", "res", "]", ")", ".", "mean", "(", ")", "\n", "", "return", "torch", ".", "stack", "(", "[", "x", "[", "key1", "]", "for", "x", "in", "res", "if", "type", "(", "x", ")", "==", "dict", "and", "key1", "in", "x", ".", "keys", "(", ")", "]", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.parse_args": [[837, 893], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "parse_args", "(", "parent_parser", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "parents", "=", "[", "parent_parser", "]", ",", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--trafos'", ",", "nargs", "=", "'+'", ",", "help", "=", "'add transformation to data augmentation pipeline'", ",", "\n", "default", "=", "[", "\"GaussianNoise\"", ",", "\"ChannelResize\"", ",", "\"RandomResizedCrop\"", "]", ")", "\n", "# GaussianNoise", "\n", "parser", ".", "add_argument", "(", "\n", "'--gaussian_scale'", ",", "help", "=", "'std param for gaussian noise transformation'", ",", "default", "=", "0.005", ",", "type", "=", "float", ")", "\n", "# RandomResizedCrop", "\n", "parser", ".", "add_argument", "(", "'--rr_crop_ratio_range'", ",", "\n", "help", "=", "'ratio range for random resized crop transformation'", ",", "default", "=", "[", "0.5", ",", "1.0", "]", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output_size'", ",", "help", "=", "'output size for random resized crop transformation'", ",", "default", "=", "250", ",", "type", "=", "int", ")", "\n", "# DynamicTimeWarp", "\n", "parser", ".", "add_argument", "(", "\n", "'--warps'", ",", "help", "=", "'number of warps for dynamic time warp transformation'", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--radius'", ",", "help", "=", "'radius of warps of dynamic time warp transformation'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "# TimeWarp", "\n", "parser", ".", "add_argument", "(", "\n", "'--epsilon'", ",", "help", "=", "'epsilon param for time warp'", ",", "default", "=", "10", ",", "type", "=", "float", ")", "\n", "# ChannelResize", "\n", "parser", ".", "add_argument", "(", "'--magnitude_range'", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'range for scale param for ChannelResize transformation'", ",", "default", "=", "[", "0.5", ",", "2", "]", ",", "type", "=", "float", ")", "\n", "# Downsample", "\n", "parser", ".", "add_argument", "(", "\n", "'--downsample_ratio'", ",", "help", "=", "'downsample ratio for Downsample transformation'", ",", "default", "=", "0.2", ",", "type", "=", "float", ")", "\n", "# TimeOut", "\n", "parser", ".", "add_argument", "(", "'--to_crop_ratio_range'", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'ratio range for timeout transformation'", ",", "default", "=", "[", "0.2", ",", "0.4", "]", ",", "type", "=", "float", ")", "\n", "# resume training", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "help", "=", "'number of gpus to use; use cpu if gpu=0'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num_nodes'", ",", "default", "=", "1", ",", "help", "=", "'number of cluster nodes'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--distributed_backend'", ",", "help", "=", "'sets backend type'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--warm_up'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--precision'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--datasets'", ",", "dest", "=", "\"target_folders\"", ",", "\n", "nargs", "=", "'+'", ",", "help", "=", "'used datasets for pretraining'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "default", "=", "\"./experiment_logs\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--percentage'", ",", "help", "=", "'determines how much of the dataset shall be used during the pretraining'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "help", "=", "\"learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "'--out_dim'", ",", "type", "=", "int", ",", "help", "=", "\"output dimension of model\"", ")", "\n", "parser", ".", "add_argument", "(", "'--filter_cinc'", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"only valid if cinc is selected: filter out the ptb data\"", ")", "\n", "parser", ".", "add_argument", "(", "'--base_model'", ")", "\n", "parser", ".", "add_argument", "(", "'--widen'", ",", "type", "=", "int", ",", "help", "=", "\"use wide xresnet1d50\"", ")", "\n", "parser", ".", "add_argument", "(", "'--run_callbacks'", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"run callbacks which asses linear evaluaton and finetuning metrics during pretraining\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_path'", ",", "default", "=", "\"\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.init_logger": [[894, 908], ["logging.basicConfig", "logging.getLogger", "logging.root.removeHandler", "os.path.isdir", "os.mkdir", "os.path.join"], "function", ["None"], ["", "def", "init_logger", "(", "config", ")", ":", "\n", "    ", "level", "=", "logging", ".", "INFO", "\n", "\n", "if", "config", "[", "'debug'", "]", ":", "\n", "        ", "level", "=", "logging", ".", "DEBUG", "\n", "\n", "# remove all handlers to change basic configuration", "\n", "", "for", "handler", "in", "logging", ".", "root", ".", "handlers", "[", ":", "]", ":", "\n", "        ", "logging", ".", "root", ".", "removeHandler", "(", "handler", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "config", "[", "'log_dir'", "]", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "config", "[", "'log_dir'", "]", ")", "\n", "", "logging", ".", "basicConfig", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'log_dir'", "]", ",", "'info.log'", ")", ",", "level", "=", "level", ",", "\n", "format", "=", "'%(asctime)s %(name)s:%(lineno)s %(levelname)s:  %(message)s  '", ")", "\n", "return", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.pretrain_routine": [[909, 955], ["os.path.join", "yaml.load", "vars", "set().union", "custom_swav_bolts.init_logger", "clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper", "enumerate", "time.asctime", "re.sub", "pytorch_lightning.loggers.TensorBoardLogger", "os.path.join", "print", "open", "set", "logger.info", "str", "os.path.isfile", "set", "vars.keys", "yaml.load.keys", "str", "vars.keys", "t.get_params", "str", "vars.keys", "yaml.load.keys", "str", "time.time_ns", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.init_logger", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Transformation.get_params"], ["", "def", "pretrain_routine", "(", "args", ")", ":", "\n", "    ", "t_params", "=", "{", "\"gaussian_scale\"", ":", "args", ".", "gaussian_scale", ",", "\"rr_crop_ratio_range\"", ":", "args", ".", "rr_crop_ratio_range", ",", "\"output_size\"", ":", "args", ".", "output_size", ",", "\"warps\"", ":", "args", ".", "warps", ",", "\"radius\"", ":", "args", ".", "radius", ",", "\n", "\"epsilon\"", ":", "args", ".", "epsilon", ",", "\"magnitude_range\"", ":", "args", ".", "magnitude_range", ",", "\"downsample_ratio\"", ":", "args", ".", "downsample_ratio", ",", "\"to_crop_ratio_range\"", ":", "args", ".", "to_crop_ratio_range", ",", "\n", "\"bw_cmax\"", ":", "0.1", ",", "\"em_cmax\"", ":", "0.5", ",", "\"pl_cmax\"", ":", "0.2", ",", "\"bs_cmax\"", ":", "1", "}", "\n", "transformations", "=", "args", ".", "trafos", "\n", "checkpoint_config", "=", "os", ".", "path", ".", "join", "(", "\"checkpoints\"", ",", "\"bolts_config.yaml\"", ")", "\n", "config_file", "=", "checkpoint_config", "if", "args", ".", "resume", "and", "os", ".", "path", ".", "isfile", "(", "\n", "checkpoint_config", ")", "else", "\"bolts_config.yaml\"", "\n", "config", "=", "yaml", ".", "load", "(", "open", "(", "config_file", ",", "\"r\"", ")", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "args_dict", "=", "vars", "(", "args", ")", "\n", "for", "key", "in", "set", "(", "config", ".", "keys", "(", ")", ")", ".", "union", "(", "set", "(", "args_dict", ".", "keys", "(", ")", ")", ")", ":", "\n", "        ", "config", "[", "key", "]", "=", "config", "[", "key", "]", "if", "(", "key", "not", "in", "args_dict", ".", "keys", "(", ")", "or", "key", "in", "args_dict", ".", "keys", "(", "\n", ")", "and", "key", "in", "config", ".", "keys", "(", ")", "and", "args_dict", "[", "key", "]", "is", "None", ")", "else", "args_dict", "[", "key", "]", "\n", "", "if", "args", ".", "target_folders", "is", "not", "None", ":", "\n", "        ", "config", "[", "\"dataset\"", "]", "[", "\"target_folders\"", "]", "=", "args", ".", "target_folders", "\n", "", "config", "[", "\"dataset\"", "]", "[", "\"percentage\"", "]", "=", "args", ".", "percentage", "if", "args", ".", "percentage", "is", "not", "None", "else", "config", "[", "\"dataset\"", "]", "[", "\"percentage\"", "]", "\n", "config", "[", "\"dataset\"", "]", "[", "\"filter_cinc\"", "]", "=", "args", ".", "filter_cinc", "if", "args", ".", "filter_cinc", "is", "not", "None", "else", "config", "[", "\"dataset\"", "]", "[", "\"filter_cinc\"", "]", "\n", "config", "[", "\"model\"", "]", "[", "\"base_model\"", "]", "=", "args", ".", "base_model", "if", "args", ".", "base_model", "is", "not", "None", "else", "config", "[", "\"model\"", "]", "[", "\"base_model\"", "]", "\n", "config", "[", "\"model\"", "]", "[", "\"widen\"", "]", "=", "args", ".", "widen", "if", "args", ".", "widen", "is", "not", "None", "else", "config", "[", "\"model\"", "]", "[", "\"widen\"", "]", "\n", "config", "[", "\"dataset\"", "]", "[", "\"swav\"", "]", "=", "True", "\n", "config", "[", "\"dataset\"", "]", "[", "\"nmb_crops\"", "]", "=", "7", "\n", "config", "[", "\"eval_dataset\"", "]", "[", "\"swav\"", "]", "=", "True", "\n", "config", "[", "\"eval_dataset\"", "]", "[", "\"nmb_crops\"", "]", "=", "7", "\n", "if", "args", ".", "out_dim", "is", "not", "None", ":", "\n", "        ", "config", "[", "\"model\"", "]", "[", "\"out_dim\"", "]", "=", "args", ".", "out_dim", "\n", "", "init_logger", "(", "config", ")", "\n", "dataset", "=", "SimCLRDataSetWrapper", "(", "\n", "config", "[", "'batch_size'", "]", ",", "**", "config", "[", "'dataset'", "]", ",", "transformations", "=", "transformations", ",", "t_params", "=", "t_params", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "dataset", ".", "transformations", ")", ":", "\n", "        ", "logger", ".", "info", "(", "str", "(", "i", ")", "+", "\". Transformation: \"", "+", "\n", "str", "(", "t", ")", "+", "\": \"", "+", "str", "(", "t", ".", "get_params", "(", ")", ")", ")", "\n", "", "date", "=", "time", ".", "asctime", "(", ")", "\n", "label_to_num_classes", "=", "{", "\"label_all\"", ":", "71", ",", "\"label_diag\"", ":", "44", ",", "\"label_form\"", ":", "19", ",", "\n", "\"label_rhythm\"", ":", "12", ",", "\"label_diag_subclass\"", ":", "23", ",", "\"label_diag_superclass\"", ":", "5", "}", "\n", "ptb_num_classes", "=", "label_to_num_classes", "[", "config", "[", "\"eval_dataset\"", "]", "\n", "[", "\"ptb_xl_label\"", "]", "]", "\n", "abr", "=", "{", "\"Transpose\"", ":", "\"Tr\"", ",", "\"TimeOut\"", ":", "\"TO\"", ",", "\"DynamicTimeWarp\"", ":", "\"DTW\"", ",", "\"RandomResizedCrop\"", ":", "\"RRC\"", ",", "\"ChannelResize\"", ":", "\"ChR\"", ",", "\"GaussianNoise\"", ":", "\"GN\"", ",", "\n", "\"TimeWarp\"", ":", "\"TW\"", ",", "\"ToTensor\"", ":", "\"TT\"", ",", "\"GaussianBlur\"", ":", "\"GB\"", ",", "\"BaselineWander\"", ":", "\"BlW\"", ",", "\"PowerlineNoise\"", ":", "\"PlN\"", ",", "\"EMNoise\"", ":", "\"EM\"", ",", "\"BaselineShift\"", ":", "\"BlS\"", "}", "\n", "trs", "=", "re", ".", "sub", "(", "r\"[,'\\]\\[]\"", ",", "\"\"", ",", "str", "(", "[", "abr", "[", "str", "(", "tr", ")", "]", "if", "abr", "[", "str", "(", "tr", ")", "]", "not", "in", "[", "\n", "\"TT\"", ",", "\"Tr\"", "]", "else", "''", "for", "tr", "in", "dataset", ".", "transformations", "]", ")", ")", "\n", "name", "=", "str", "(", "date", ")", "+", "\"_\"", "+", "method", "+", "\"_\"", "+", "str", "(", "\n", "time", ".", "time_ns", "(", ")", ")", "[", "-", "3", ":", "]", "+", "\"_\"", "+", "trs", "[", "1", ":", "]", "\n", "tb_logger", "=", "TensorBoardLogger", "(", "args", ".", "log_dir", ",", "name", "=", "name", ",", "version", "=", "''", ")", "\n", "config", "[", "\"log_dir\"", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "name", ")", "\n", "print", "(", "config", ")", "\n", "return", "config", ",", "dataset", ",", "date", ",", "transformations", ",", "t_params", ",", "ptb_num_classes", ",", "tb_logger", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.aftertrain_routine": [[956, 970], ["trainer.save_checkpoint", "isinstance", "open", "pickle.dump", "os.path.join", "open", "print", "os.path.join", "os.path.join", "str"], "function", ["None"], ["", "def", "aftertrain_routine", "(", "config", ",", "args", ",", "trainer", ",", "pl_model", ",", "datamodule", ",", "callbacks", ")", ":", "\n", "    ", "scores", "=", "{", "}", "\n", "for", "ca", "in", "callbacks", ":", "\n", "        ", "if", "isinstance", "(", "ca", ",", "SSLOnlineEvaluator", ")", ":", "\n", "            ", "scores", "[", "str", "(", "ca", ")", "]", "=", "{", "\"macro\"", ":", "ca", ".", "best_macro", "}", "\n", "\n", "", "", "results", "=", "{", "\"config\"", ":", "config", ",", "\"trafos\"", ":", "args", ".", "trafos", ",", "\"scores\"", ":", "scores", "}", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config", "[", "\"log_dir\"", "]", ",", "\"results.pkl\"", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "results", ",", "handle", ")", "\n", "\n", "", "trainer", ".", "save_checkpoint", "(", "os", ".", "path", ".", "join", "(", "config", "[", "\"log_dir\"", "]", ",", "\"checkpoints\"", ",", "\"model.ckpt\"", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config", "[", "\"log_dir\"", "]", ",", "\"config.txt\"", ")", ",", "\"w\"", ")", "as", "text_file", ":", "\n", "        ", "print", "(", "config", ",", "file", "=", "text_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_swav_bolts.cli_main": [[971, 1019], ["argparse.ArgumentParser", "custom_swav_bolts.parse_args", "logger.info", "parse_args.parse_args", "custom_swav_bolts.pretrain_routine", "ecg_datamodule.ECGDataModule", "Trainer", "models.resnet_simclr.ResNetSimCLR", "custom_swav_bolts.CustomSwAV", "Trainer.fit", "custom_swav_bolts.aftertrain_routine", "online_evaluator.SSLOnlineEvaluator", "online_evaluator.SSLOnlineEvaluator", "callbacks.append", "callbacks.append", "exists", "logger.info", "CustomSwAV.load_from_checkpoint"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.parse_args", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.parse_args", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.pretrain_routine", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.aftertrain_routine"], ["", "", "def", "cli_main", "(", ")", ":", "\n", "    ", "from", "pytorch_lightning", "import", "Trainer", "\n", "from", "online_evaluator", "import", "SSLOnlineEvaluator", "\n", "from", "ecg_datamodule", "import", "ECGDataModule", "\n", "from", "clinical_ts", ".", "create_logger", "import", "create_logger", "\n", "from", "os", ".", "path", "import", "exists", "\n", "\n", "parser", "=", "ArgumentParser", "(", ")", "\n", "parser", "=", "parse_args", "(", "parser", ")", "\n", "logger", ".", "info", "(", "\"parse arguments\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "config", ",", "dataset", ",", "date", ",", "transformations", ",", "t_params", ",", "ptb_num_classes", ",", "tb_logger", "=", "pretrain_routine", "(", "args", ")", "\n", "\n", "# data", "\n", "ecg_datamodule", "=", "ECGDataModule", "(", "config", ",", "transformations", ",", "t_params", ")", "\n", "\n", "callbacks", "=", "[", "]", "\n", "if", "args", ".", "run_callbacks", ":", "\n", "# callback for online linear evaluation/fine-tuning", "\n", "        ", "linear_evaluator", "=", "SSLOnlineEvaluator", "(", "drop_p", "=", "0", ",", "\n", "z_dim", "=", "512", ",", "num_classes", "=", "ptb_num_classes", ",", "hidden_dim", "=", "None", ",", "lin_eval_epochs", "=", "config", "[", "\"eval_epochs\"", "]", ",", "eval_every", "=", "config", "[", "\"eval_every\"", "]", ",", "mode", "=", "\"linear_evaluation\"", ",", "verbose", "=", "False", ")", "\n", "\n", "fine_tuner", "=", "SSLOnlineEvaluator", "(", "drop_p", "=", "0", ",", "\n", "z_dim", "=", "512", ",", "num_classes", "=", "ptb_num_classes", ",", "hidden_dim", "=", "None", ",", "lin_eval_epochs", "=", "config", "[", "\"eval_epochs\"", "]", ",", "eval_every", "=", "config", "[", "\"eval_every\"", "]", ",", "mode", "=", "\"fine_tuning\"", ",", "verbose", "=", "False", ")", "\n", "\n", "callbacks", ".", "append", "(", "linear_evaluator", ")", "\n", "callbacks", ".", "append", "(", "fine_tuner", ")", "\n", "\n", "# configure trainer", "\n", "", "trainer", "=", "Trainer", "(", "logger", "=", "tb_logger", ",", "max_epochs", "=", "config", "[", "\"epochs\"", "]", ",", "gpus", "=", "args", ".", "gpus", ",", "\n", "distributed_backend", "=", "args", ".", "distributed_backend", ",", "auto_lr_find", "=", "False", ",", "num_nodes", "=", "args", ".", "num_nodes", ",", "precision", "=", "config", "[", "\"precision\"", "]", ",", "callbacks", "=", "callbacks", ")", "\n", "\n", "# pytorch lightning module", "\n", "model", "=", "ResNetSimCLR", "(", "**", "config", "[", "\"model\"", "]", ")", "\n", "pl_model", "=", "CustomSwAV", "(", "model", ",", "config", "[", "\"gpus\"", "]", ",", "ecg_datamodule", ".", "num_samples", ",", "config", "[", "\"batch_size\"", "]", ",", "config", "=", "config", ",", "\n", "transformations", "=", "ecg_datamodule", ".", "transformations", ",", "nmb_crops", "=", "config", "[", "\"dataset\"", "]", "[", "\"nmb_crops\"", "]", ")", "\n", "# load checkpoint", "\n", "if", "args", ".", "checkpoint_path", "!=", "\"\"", ":", "\n", "        ", "if", "exists", "(", "args", ".", "checkpoint_path", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Retrieve checkpoint from \"", "+", "args", ".", "checkpoint_path", ")", "\n", "pl_model", ".", "load_from_checkpoint", "(", "args", ".", "checkpoint_path", ")", "\n", "", "else", ":", "\n", "            ", "raise", "(", "\"checkpoint does not exist\"", ")", "\n", "\n", "# start training", "\n", "", "", "trainer", ".", "fit", "(", "pl_model", ",", "ecg_datamodule", ")", "\n", "\n", "aftertrain_routine", "(", "config", ",", "args", ",", "trainer", ",", "pl_model", ",", "ecg_datamodule", ",", "callbacks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.MLP.__init__": [[46, 55], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "512", ",", "hidden_size", "=", "4096", ",", "output_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_size", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "output_dim", ",", "bias", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.MLP.forward": [[56, 59], ["custom_byol_bolts.MLP.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.SiameseArm.__init__": [[62, 78], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "custom_byol_bolts.MLP", "custom_byol_bolts.MLP", "torchvision_ssl_encoder"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", "=", "None", ",", "out_dim", "=", "128", ",", "hidden_size", "=", "512", ",", "projector_dim", "=", "512", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "encoder", "is", "None", ":", "\n", "            ", "encoder", "=", "torchvision_ssl_encoder", "(", "'resnet50'", ")", "\n", "# Encoder", "\n", "", "self", ".", "encoder", "=", "encoder", "\n", "# Pooler", "\n", "self", ".", "pooler", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "# Projector", "\n", "projector_dim", "=", "encoder", ".", "l1", ".", "in_features", "\n", "self", ".", "projector", "=", "MLP", "(", "\n", "input_dim", "=", "projector_dim", ",", "hidden_size", "=", "hidden_size", ",", "output_dim", "=", "out_dim", ")", "\n", "# Predictor", "\n", "self", ".", "predictor", "=", "MLP", "(", "\n", "input_dim", "=", "out_dim", ",", "hidden_size", "=", "hidden_size", ",", "output_dim", "=", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.SiameseArm.forward": [[79, 85], ["y.view.view.view", "custom_byol_bolts.SiameseArm.projector", "custom_byol_bolts.SiameseArm.predictor", "custom_byol_bolts.SiameseArm.encoder", "y.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "encoder", "(", "x", ")", "[", "0", "]", "\n", "y", "=", "y", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "z", "=", "self", ".", "projector", "(", "y", ")", "\n", "h", "=", "self", ".", "predictor", "(", "z", ")", "\n", "return", "y", ",", "z", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.BYOLMAWeightUpdate.__init__": [[88, 96], ["pytorch_lightning.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["    ", "def", "__init__", "(", "self", ",", "initial_tau", "=", "0.996", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            initial_tau: starting tau. Auto-updates with every training step\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "initial_tau", "=", "initial_tau", "\n", "self", ".", "current_tau", "=", "initial_tau", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.BYOLMAWeightUpdate.on_train_batch_end": [[97, 107], ["custom_byol_bolts.BYOLMAWeightUpdate.update_weights", "custom_byol_bolts.BYOLMAWeightUpdate.update_tau"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.BYOLMAWeightUpdate.update_weights", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.BYOLMAWeightUpdate.update_tau"], ["", "def", "on_train_batch_end", "(", "self", ",", "trainer", ",", "pl_module", ",", "outputs", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", ")", ":", "\n", "# get networks", "\n", "        ", "online_net", "=", "pl_module", ".", "online_network", "\n", "target_net", "=", "pl_module", ".", "target_network", "\n", "\n", "# update weights", "\n", "self", ".", "update_weights", "(", "online_net", ",", "target_net", ")", "\n", "\n", "# update tau after", "\n", "self", ".", "current_tau", "=", "self", ".", "update_tau", "(", "pl_module", ",", "trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.BYOLMAWeightUpdate.update_tau": [[108, 113], ["len", "math.cos"], "methods", ["None"], ["", "def", "update_tau", "(", "self", ",", "pl_module", ",", "trainer", ")", ":", "\n", "        ", "max_steps", "=", "len", "(", "trainer", ".", "train_dataloader", ")", "*", "trainer", ".", "max_epochs", "\n", "tau", "=", "1", "-", "(", "1", "-", "self", ".", "initial_tau", ")", "*", "(", "math", ".", "cos", "(", "math", ".", "pi", "*", "\n", "pl_module", ".", "global_step", "/", "max_steps", ")", "+", "1", ")", "/", "2", "\n", "return", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.BYOLMAWeightUpdate.update_weights": [[114, 120], ["zip", "online_net.named_parameters", "target_net.named_parameters"], "methods", ["None"], ["", "def", "update_weights", "(", "self", ",", "online_net", ",", "target_net", ")", ":", "\n", "# apply MA weight update", "\n", "        ", "for", "(", "name", ",", "online_p", ")", ",", "(", "_", ",", "target_p", ")", "in", "zip", "(", "online_net", ".", "named_parameters", "(", ")", ",", "target_net", ".", "named_parameters", "(", ")", ")", ":", "\n", "            ", "if", "'weight'", "in", "name", ":", "\n", "                ", "target_p", ".", "data", "=", "self", ".", "current_tau", "*", "target_p", ".", "data", "+", "(", "1", "-", "self", ".", "current_tau", ")", "*", "online_p", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.__init__": [[123, 157], ["pytorch_lightning.LightningModule.__init__", "custom_byol_bolts.CustomBYOL.save_hyperparameters", "custom_byol_bolts.SiameseArm", "copy.deepcopy", "custom_byol_bolts.BYOLMAWeightUpdate", "custom_byol_bolts.CustomBYOL.init_model"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.init_model"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_classes", "=", "5", ",", "\n", "learning_rate", ":", "float", "=", "0.2", ",", "\n", "weight_decay", ":", "float", "=", "1.5e-6", ",", "\n", "input_height", ":", "int", "=", "32", ",", "\n", "batch_size", ":", "int", "=", "32", ",", "\n", "num_workers", ":", "int", "=", "0", ",", "\n", "warmup_epochs", ":", "int", "=", "10", ",", "\n", "max_epochs", ":", "int", "=", "1000", ",", "\n", "config", "=", "None", ",", "\n", "transformations", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            datamodule: The datamodule\n            learning_rate: the learning rate\n            weight_decay: optimizer weight decay\n            input_height: image input height\n            batch_size: the batch size\n            num_workers: number of workers\n            warmup_epochs: num of epochs for scheduler warm up\n            max_epochs: max epochs for scheduler\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "transformations", "=", "transformations", "\n", "self", ".", "online_network", "=", "SiameseArm", "(", "\n", "encoder", "=", "self", ".", "init_model", "(", ")", ",", "out_dim", "=", "config", "[", "\"model\"", "]", "[", "\"out_dim\"", "]", ")", "\n", "self", ".", "target_network", "=", "deepcopy", "(", "self", ".", "online_network", ")", "\n", "self", ".", "weight_callback", "=", "BYOLMAWeightUpdate", "(", ")", "\n", "self", ".", "log_dict", "=", "{", "}", "\n", "self", ".", "epoch", "=", "0", "\n", "# self.model_device = self.online_network.encoder.features[0][0].weight.device", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.init_model": [[159, 163], ["models.resnet_simclr.ResNetSimCLR"], "methods", ["None"], ["", "def", "init_model", "(", "self", ")", ":", "\n", "        ", "model", "=", "ResNetSimCLR", "(", "**", "self", ".", "config", "[", "\"model\"", "]", ")", "\n", "# return model.features", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.on_train_batch_end": [[165, 169], ["custom_byol_bolts.CustomBYOL.weight_callback.on_train_batch_end"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.on_train_batch_end"], ["", "def", "on_train_batch_end", "(", "self", ",", "outputs", ",", "batch", ":", "Any", ",", "batch_idx", ":", "int", ",", "dataloader_idx", ":", "int", ")", "->", "None", ":", "\n", "# Add callback for user automatically since it's key to BYOL weight update", "\n", "        ", "self", ".", "weight_callback", ".", "on_train_batch_end", "(", "\n", "self", ".", "trainer", ",", "self", ",", "outputs", ",", "batch", ",", "batch_idx", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.forward": [[170, 173], ["custom_byol_bolts.CustomBYOL.online_network"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", ",", "_", ",", "_", "=", "self", ".", "online_network", "(", "x", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.cosine_similarity": [[174, 179], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "cosine_similarity", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "a", "=", "F", ".", "normalize", "(", "a", ",", "dim", "=", "-", "1", ")", "\n", "b", "=", "F", ".", "normalize", "(", "b", ",", "dim", "=", "-", "1", ")", "\n", "sim", "=", "(", "a", "*", "b", ")", ".", "sum", "(", "-", "1", ")", ".", "mean", "(", ")", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.shared_step": [[180, 204], ["custom_byol_bolts.CustomBYOL.to_device", "custom_byol_bolts.CustomBYOL.to_device", "custom_byol_bolts.CustomBYOL.online_network", "custom_byol_bolts.CustomBYOL.online_network", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "custom_byol_bolts.CustomBYOL.target_network", "custom_byol_bolts.CustomBYOL.cosine_similarity", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "custom_byol_bolts.CustomBYOL.target_network", "custom_byol_bolts.CustomBYOL.cosine_similarity"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.to_device", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.to_device", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.cosine_similarity", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.cosine_similarity"], ["", "def", "shared_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "# (img_1, img_2), y = batch", "\n", "        ", "(", "img_1", ",", "y1", ")", ",", "(", "img_2", ",", "y2", ")", "=", "batch", "\n", "\n", "img_1", "=", "self", ".", "to_device", "(", "img_1", ")", "\n", "img_2", "=", "self", ".", "to_device", "(", "img_2", ")", "\n", "\n", "# Image 1 to image 2 loss", "\n", "y1", ",", "z1", ",", "h1", "=", "self", ".", "online_network", "(", "img_1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "y2", ",", "z2", ",", "h2", "=", "self", ".", "target_network", "(", "img_2", ")", "\n", "", "loss_a", "=", "-", "2", "*", "self", ".", "cosine_similarity", "(", "h1", ",", "z2", ")", "\n", "\n", "# Image 2 to image 1 loss", "\n", "y1", ",", "z1", ",", "h1", "=", "self", ".", "online_network", "(", "img_2", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "y2", ",", "z2", ",", "h2", "=", "self", ".", "target_network", "(", "img_1", ")", "\n", "# L2 normalize", "\n", "", "loss_b", "=", "-", "2", "*", "self", ".", "cosine_similarity", "(", "h1", ",", "z2", ")", "\n", "\n", "# Final loss", "\n", "total_loss", "=", "loss_a", "+", "loss_b", "\n", "\n", "return", "loss_a", ",", "loss_b", ",", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.training_step": [[205, 219], ["custom_byol_bolts.CustomBYOL.shared_step"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.shared_step"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "loss_a", ",", "loss_b", ",", "total_loss", "=", "self", ".", "shared_step", "(", "batch", ",", "batch_idx", ")", "\n", "\n", "# log results", "\n", "# result = pl.TrainResult(minimize=total_loss)", "\n", "# result.log('train_loss/1_2_loss', loss_a, on_epoch=True)", "\n", "# result.log('train_loss/2_1_loss', loss_b, on_epoch=True)", "\n", "# result.log('train_loss/total_loss', total_loss, on_epoch=True)", "\n", "\n", "# # log results", "\n", "# self.log_dict({'1_2_loss': loss_a, '2_1_loss': loss_b,", "\n", "#               'train_loss': total_loss})", "\n", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.validation_step": [[220, 240], ["custom_byol_bolts.CustomBYOL.shared_step"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.shared_step"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", ")", ":", "\n", "        ", "if", "dataloader_idx", "!=", "0", ":", "\n", "            ", "return", "{", "}", "\n", "\n", "", "loss_a", ",", "loss_b", ",", "total_loss", "=", "self", ".", "shared_step", "(", "batch", ",", "batch_idx", ")", "\n", "\n", "# # log results", "\n", "# result = pl.EvalResult()", "\n", "# result.log('val_loss/1_2_loss', loss_a, on_epoch=True)", "\n", "# result.log('val_loss/2_1_loss', loss_b, on_epoch=True)", "\n", "# result.log('val_loss/total_loss', total_loss, on_epoch=True)", "\n", "\n", "# self.log_dict({'1_2_loss': loss_a, '2_1_loss': loss_b,", "\n", "#               'train_loss': total_loss})", "\n", "results", "=", "{", "\n", "'val_loss'", ":", "total_loss", ",", "\n", "'val_1_2_loss'", ":", "loss_a", ",", "\n", "'val_2_1_loss'", ":", "loss_b", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.validation_epoch_end": [[241, 254], ["custom_byol_bolts.mean", "custom_byol_bolts.mean", "custom_byol_bolts.mean"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "# outputs[0] because we are using multiple datasets!", "\n", "        ", "val_loss", "=", "mean", "(", "outputs", "[", "0", "]", ",", "'val_loss'", ")", "\n", "loss_a", "=", "mean", "(", "outputs", "[", "0", "]", ",", "'val_1_2_loss'", ")", "\n", "loss_b", "=", "mean", "(", "outputs", "[", "0", "]", ",", "'val_2_1_loss'", ")", "\n", "\n", "log", "=", "{", "\n", "'val_loss'", ":", "val_loss", ",", "\n", "'val_1_2_loss'", ":", "loss_a", ",", "\n", "'val_2_1_loss'", ":", "loss_b", "\n", "}", "\n", "\n", "return", "{", "'val_loss'", ":", "val_loss", ",", "'log'", ":", "log", ",", "'progress_bar'", ":", "log", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.configure_optimizers": [[255, 266], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "pl_bolts.optimizers.lr_scheduler.LinearWarmupCosineAnnealingLR", "custom_byol_bolts.CustomBYOL.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optimizer", "=", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "hparams", ".", "learning_rate", ",", "\n", "weight_decay", "=", "self", ".", "hparams", ".", "weight_decay", ")", "\n", "# optimizer = LARSWrapper(optimizer)", "\n", "optimizer", "=", "optimizer", "\n", "scheduler", "=", "LinearWarmupCosineAnnealingLR", "(", "\n", "optimizer", ",", "\n", "warmup_epochs", "=", "self", ".", "hparams", ".", "warmup_epochs", ",", "\n", "max_epochs", "=", "self", ".", "hparams", ".", "max_epochs", "\n", ")", "\n", "return", "[", "optimizer", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.on_train_start": [[267, 279], ["re.sub", "re.sub", "re.sub", "re.sub", "custom_byol_bolts.CustomBYOL.logger.experiment.add_text", "custom_byol_bolts.CustomBYOL.logger.experiment.add_text", "str", "str", "str", "str", "str", "t.get_params", "str"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Transformation.get_params"], ["", "def", "on_train_start", "(", "self", ")", ":", "\n", "# log configuration", "\n", "        ", "config_str", "=", "re", ".", "sub", "(", "r\"[,\\}\\{]\"", ",", "\"<br/>\"", ",", "str", "(", "self", ".", "config", ")", ")", "\n", "config_str", "=", "re", ".", "sub", "(", "r\"[\\[\\]\\']\"", ",", "\"\"", ",", "config_str", ")", "\n", "transformation_str", "=", "re", ".", "sub", "(", "r\"[\\}]\"", ",", "\"<br/>\"", ",", "str", "(", "[", "\"<br>\"", "+", "str", "(", "\n", "t", ")", "+", "\":<br/>\"", "+", "str", "(", "t", ".", "get_params", "(", ")", ")", "for", "t", "in", "self", ".", "transformations", "]", ")", ")", "\n", "transformation_str", "=", "re", ".", "sub", "(", "r\"[,\\\"\\{\\'\\[\\]]\"", ",", "\"\"", ",", "transformation_str", ")", "\n", "self", ".", "logger", ".", "experiment", ".", "add_text", "(", "\n", "\"configuration\"", ",", "str", "(", "config_str", ")", ",", "global_step", "=", "0", ")", "\n", "self", ".", "logger", ".", "experiment", ".", "add_text", "(", "\"transformations\"", ",", "str", "(", "\n", "transformation_str", ")", ",", "global_step", "=", "0", ")", "\n", "self", ".", "epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.on_epoch_end": [[280, 282], ["None"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "self", ".", "epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.get_representations": [[283, 285], ["custom_byol_bolts.CustomBYOL.online_network"], "methods", ["None"], ["", "def", "get_representations", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "online_network", "(", "x", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.get_model": [[286, 288], ["None"], "methods", ["None"], ["", "def", "get_model", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "online_network", ".", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.get_device": [[289, 291], ["None"], "methods", ["None"], ["", "def", "get_device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "online_network", ".", "encoder", ".", "features", "[", "0", "]", "[", "0", "]", ".", "weight", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.to_device": [[292, 294], ["x.type().to", "custom_byol_bolts.CustomBYOL.get_device", "x.type", "custom_byol_bolts.CustomBYOL.type"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.get_device", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type"], ["", "def", "to_device", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "type", "(", "self", ".", "type", "(", ")", ")", ".", "to", "(", "self", ".", "get_device", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.CustomBYOL.type": [[295, 297], ["[].weight.type"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type"], ["", "def", "type", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "online_network", ".", "encoder", ".", "features", "[", "0", "]", "[", "0", "]", ".", "weight", ".", "type", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.mean": [[40, 44], ["torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "type", "x.keys"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type"], ["def", "mean", "(", "res", ",", "key1", ",", "key2", "=", "None", ")", ":", "\n", "    ", "if", "key2", "is", "not", "None", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "[", "x", "[", "key1", "]", "[", "key2", "]", "for", "x", "in", "res", "]", ")", ".", "mean", "(", ")", "\n", "", "return", "torch", ".", "stack", "(", "[", "x", "[", "key1", "]", "for", "x", "in", "res", "if", "type", "(", "x", ")", "==", "dict", "and", "key1", "in", "x", ".", "keys", "(", ")", "]", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.parse_args": [[298, 354], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "", "def", "parse_args", "(", "parent_parser", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "parents", "=", "[", "parent_parser", "]", ",", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--trafos'", ",", "nargs", "=", "'+'", ",", "help", "=", "'add transformation to data augmentation pipeline'", ",", "\n", "default", "=", "[", "\"GaussianNoise\"", ",", "\"ChannelResize\"", ",", "\"RandomResizedCrop\"", "]", ")", "\n", "# GaussianNoise", "\n", "parser", ".", "add_argument", "(", "\n", "'--gaussian_scale'", ",", "help", "=", "'std param for gaussian noise transformation'", ",", "default", "=", "0.005", ",", "type", "=", "float", ")", "\n", "# RandomResizedCrop", "\n", "parser", ".", "add_argument", "(", "'--rr_crop_ratio_range'", ",", "\n", "help", "=", "'ratio range for random resized crop transformation'", ",", "default", "=", "[", "0.5", ",", "1.0", "]", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output_size'", ",", "help", "=", "'output size for random resized crop transformation'", ",", "default", "=", "250", ",", "type", "=", "int", ")", "\n", "# DynamicTimeWarp", "\n", "parser", ".", "add_argument", "(", "\n", "'--warps'", ",", "help", "=", "'number of warps for dynamic time warp transformation'", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--radius'", ",", "help", "=", "'radius of warps of dynamic time warp transformation'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "# TimeWarp", "\n", "parser", ".", "add_argument", "(", "\n", "'--epsilon'", ",", "help", "=", "'epsilon param for time warp'", ",", "default", "=", "10", ",", "type", "=", "float", ")", "\n", "# ChannelResize", "\n", "parser", ".", "add_argument", "(", "'--magnitude_range'", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'range for scale param for ChannelResize transformation'", ",", "default", "=", "[", "0.5", ",", "2", "]", ",", "type", "=", "float", ")", "\n", "# Downsample", "\n", "parser", ".", "add_argument", "(", "\n", "'--downsample_ratio'", ",", "help", "=", "'downsample ratio for Downsample transformation'", ",", "default", "=", "0.2", ",", "type", "=", "float", ")", "\n", "# TimeOut", "\n", "parser", ".", "add_argument", "(", "'--to_crop_ratio_range'", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'ratio range for timeout transformation'", ",", "default", "=", "[", "0.2", ",", "0.4", "]", ",", "type", "=", "float", ")", "\n", "# resume training", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "help", "=", "'number of gpus to use; use cpu if gpu=0'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num_nodes'", ",", "default", "=", "1", ",", "help", "=", "'number of cluster nodes'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--distributed_backend'", ",", "help", "=", "'sets backend type'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--warm_up'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--precision'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--datasets'", ",", "dest", "=", "\"target_folders\"", ",", "\n", "nargs", "=", "'+'", ",", "help", "=", "'used datasets for pretraining'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "default", "=", "\"./experiment_logs\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--percentage'", ",", "help", "=", "'determines how much of the dataset shall be used during the pretraining'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "help", "=", "\"learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "'--out_dim'", ",", "type", "=", "int", ",", "help", "=", "\"output dimension of model\"", ")", "\n", "parser", ".", "add_argument", "(", "'--filter_cinc'", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"only valid if cinc is selected: filter out the ptb data\"", ")", "\n", "parser", ".", "add_argument", "(", "'--base_model'", ")", "\n", "parser", ".", "add_argument", "(", "'--widen'", ",", "type", "=", "int", ",", "help", "=", "\"use wide xresnet1d50\"", ")", "\n", "parser", ".", "add_argument", "(", "'--run_callbacks'", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"run callbacks which asses linear evaluaton and finetuning metrics during pretraining\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_path'", ",", "default", "=", "\"\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.init_logger": [[355, 369], ["logging.basicConfig", "logging.getLogger", "logging.root.removeHandler", "os.path.isdir", "os.mkdir", "os.path.join"], "function", ["None"], ["", "def", "init_logger", "(", "config", ")", ":", "\n", "    ", "level", "=", "logging", ".", "INFO", "\n", "\n", "if", "config", "[", "'debug'", "]", ":", "\n", "        ", "level", "=", "logging", ".", "DEBUG", "\n", "\n", "# remove all handlers to change basic configuration", "\n", "", "for", "handler", "in", "logging", ".", "root", ".", "handlers", "[", ":", "]", ":", "\n", "        ", "logging", ".", "root", ".", "removeHandler", "(", "handler", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "config", "[", "'log_dir'", "]", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "config", "[", "'log_dir'", "]", ")", "\n", "", "logging", ".", "basicConfig", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'log_dir'", "]", ",", "'info.log'", ")", ",", "level", "=", "level", ",", "\n", "format", "=", "'%(asctime)s %(name)s:%(lineno)s %(levelname)s:  %(message)s  '", ")", "\n", "return", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.pretrain_routine": [[370, 412], ["os.path.join", "yaml.load", "vars", "set().union", "custom_byol_bolts.init_logger", "clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper", "enumerate", "time.asctime", "re.sub", "pytorch_lightning.loggers.TensorBoardLogger", "os.path.join", "print", "open", "set", "logger.info", "str", "os.path.isfile", "set", "vars.keys", "yaml.load.keys", "str", "vars.keys", "t.get_params", "str", "vars.keys", "yaml.load.keys", "str", "time.time_ns", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.init_logger", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Transformation.get_params"], ["", "def", "pretrain_routine", "(", "args", ")", ":", "\n", "    ", "t_params", "=", "{", "\"gaussian_scale\"", ":", "args", ".", "gaussian_scale", ",", "\"rr_crop_ratio_range\"", ":", "args", ".", "rr_crop_ratio_range", ",", "\"output_size\"", ":", "args", ".", "output_size", ",", "\"warps\"", ":", "args", ".", "warps", ",", "\"radius\"", ":", "args", ".", "radius", ",", "\n", "\"epsilon\"", ":", "args", ".", "epsilon", ",", "\"magnitude_range\"", ":", "args", ".", "magnitude_range", ",", "\"downsample_ratio\"", ":", "args", ".", "downsample_ratio", ",", "\"to_crop_ratio_range\"", ":", "args", ".", "to_crop_ratio_range", ",", "\n", "\"bw_cmax\"", ":", "0.1", ",", "\"em_cmax\"", ":", "0.5", ",", "\"pl_cmax\"", ":", "0.2", ",", "\"bs_cmax\"", ":", "1", "}", "\n", "transformations", "=", "args", ".", "trafos", "\n", "checkpoint_config", "=", "os", ".", "path", ".", "join", "(", "\"checkpoints\"", ",", "\"bolts_config.yaml\"", ")", "\n", "config_file", "=", "checkpoint_config", "if", "args", ".", "resume", "and", "os", ".", "path", ".", "isfile", "(", "\n", "checkpoint_config", ")", "else", "\"bolts_config.yaml\"", "\n", "config", "=", "yaml", ".", "load", "(", "open", "(", "config_file", ",", "\"r\"", ")", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "args_dict", "=", "vars", "(", "args", ")", "\n", "for", "key", "in", "set", "(", "config", ".", "keys", "(", ")", ")", ".", "union", "(", "set", "(", "args_dict", ".", "keys", "(", ")", ")", ")", ":", "\n", "        ", "config", "[", "key", "]", "=", "config", "[", "key", "]", "if", "(", "key", "not", "in", "args_dict", ".", "keys", "(", ")", "or", "key", "in", "args_dict", ".", "keys", "(", "\n", ")", "and", "key", "in", "config", ".", "keys", "(", ")", "and", "args_dict", "[", "key", "]", "is", "None", ")", "else", "args_dict", "[", "key", "]", "\n", "", "if", "args", ".", "target_folders", "is", "not", "None", ":", "\n", "        ", "config", "[", "\"dataset\"", "]", "[", "\"target_folders\"", "]", "=", "args", ".", "target_folders", "\n", "", "config", "[", "\"dataset\"", "]", "[", "\"percentage\"", "]", "=", "args", ".", "percentage", "if", "args", ".", "percentage", "is", "not", "None", "else", "config", "[", "\"dataset\"", "]", "[", "\"percentage\"", "]", "\n", "config", "[", "\"dataset\"", "]", "[", "\"filter_cinc\"", "]", "=", "args", ".", "filter_cinc", "if", "args", ".", "filter_cinc", "is", "not", "None", "else", "config", "[", "\"dataset\"", "]", "[", "\"filter_cinc\"", "]", "\n", "config", "[", "\"model\"", "]", "[", "\"base_model\"", "]", "=", "args", ".", "base_model", "if", "args", ".", "base_model", "is", "not", "None", "else", "config", "[", "\"model\"", "]", "[", "\"base_model\"", "]", "\n", "config", "[", "\"model\"", "]", "[", "\"widen\"", "]", "=", "args", ".", "widen", "if", "args", ".", "widen", "is", "not", "None", "else", "config", "[", "\"model\"", "]", "[", "\"widen\"", "]", "\n", "if", "args", ".", "out_dim", "is", "not", "None", ":", "\n", "        ", "config", "[", "\"model\"", "]", "[", "\"out_dim\"", "]", "=", "args", ".", "out_dim", "\n", "", "init_logger", "(", "config", ")", "\n", "dataset", "=", "SimCLRDataSetWrapper", "(", "\n", "config", "[", "'batch_size'", "]", ",", "**", "config", "[", "'dataset'", "]", ",", "transformations", "=", "transformations", ",", "t_params", "=", "t_params", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "dataset", ".", "transformations", ")", ":", "\n", "        ", "logger", ".", "info", "(", "str", "(", "i", ")", "+", "\". Transformation: \"", "+", "\n", "str", "(", "t", ")", "+", "\": \"", "+", "str", "(", "t", ".", "get_params", "(", ")", ")", ")", "\n", "", "date", "=", "time", ".", "asctime", "(", ")", "\n", "label_to_num_classes", "=", "{", "\"label_all\"", ":", "71", ",", "\"label_diag\"", ":", "44", ",", "\"label_form\"", ":", "19", ",", "\n", "\"label_rhythm\"", ":", "12", ",", "\"label_diag_subclass\"", ":", "23", ",", "\"label_diag_superclass\"", ":", "5", "}", "\n", "ptb_num_classes", "=", "label_to_num_classes", "[", "config", "[", "\"eval_dataset\"", "]", "\n", "[", "\"ptb_xl_label\"", "]", "]", "\n", "abr", "=", "{", "\"Transpose\"", ":", "\"Tr\"", ",", "\"TimeOut\"", ":", "\"TO\"", ",", "\"DynamicTimeWarp\"", ":", "\"DTW\"", ",", "\"RandomResizedCrop\"", ":", "\"RRC\"", ",", "\"ChannelResize\"", ":", "\"ChR\"", ",", "\"GaussianNoise\"", ":", "\"GN\"", ",", "\n", "\"TimeWarp\"", ":", "\"TW\"", ",", "\"ToTensor\"", ":", "\"TT\"", ",", "\"GaussianBlur\"", ":", "\"GB\"", ",", "\"BaselineWander\"", ":", "\"BlW\"", ",", "\"PowerlineNoise\"", ":", "\"PlN\"", ",", "\"EMNoise\"", ":", "\"EM\"", ",", "\"BaselineShift\"", ":", "\"BlS\"", "}", "\n", "trs", "=", "re", ".", "sub", "(", "r\"[,'\\]\\[]\"", ",", "\"\"", ",", "str", "(", "[", "abr", "[", "str", "(", "tr", ")", "]", "if", "abr", "[", "str", "(", "tr", ")", "]", "not", "in", "[", "\n", "\"TT\"", ",", "\"Tr\"", "]", "else", "''", "for", "tr", "in", "dataset", ".", "transformations", "]", ")", ")", "\n", "name", "=", "str", "(", "date", ")", "+", "\"_\"", "+", "method", "+", "\"_\"", "+", "str", "(", "\n", "time", ".", "time_ns", "(", ")", ")", "[", "-", "3", ":", "]", "+", "\"_\"", "+", "trs", "[", "1", ":", "]", "\n", "tb_logger", "=", "TensorBoardLogger", "(", "args", ".", "log_dir", ",", "name", "=", "name", ",", "version", "=", "''", ")", "\n", "config", "[", "\"log_dir\"", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "name", ")", "\n", "print", "(", "config", ")", "\n", "return", "config", ",", "dataset", ",", "date", ",", "transformations", ",", "t_params", ",", "ptb_num_classes", ",", "tb_logger", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.aftertrain_routine": [[413, 427], ["trainer.save_checkpoint", "isinstance", "open", "pickle.dump", "os.path.join", "open", "print", "os.path.join", "os.path.join", "str"], "function", ["None"], ["", "def", "aftertrain_routine", "(", "config", ",", "args", ",", "trainer", ",", "pl_model", ",", "datamodule", ",", "callbacks", ")", ":", "\n", "    ", "scores", "=", "{", "}", "\n", "for", "ca", "in", "callbacks", ":", "\n", "        ", "if", "isinstance", "(", "ca", ",", "SSLOnlineEvaluator", ")", ":", "\n", "            ", "scores", "[", "str", "(", "ca", ")", "]", "=", "{", "\"macro\"", ":", "ca", ".", "best_macro", "}", "\n", "\n", "", "", "results", "=", "{", "\"config\"", ":", "config", ",", "\"trafos\"", ":", "args", ".", "trafos", ",", "\"scores\"", ":", "scores", "}", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config", "[", "\"log_dir\"", "]", ",", "\"results.pkl\"", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "results", ",", "handle", ")", "\n", "\n", "", "trainer", ".", "save_checkpoint", "(", "os", ".", "path", ".", "join", "(", "config", "[", "\"log_dir\"", "]", ",", "\"checkpoints\"", ",", "\"model.ckpt\"", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config", "[", "\"log_dir\"", "]", ",", "\"config.txt\"", ")", ",", "\"w\"", ")", "as", "text_file", ":", "\n", "        ", "print", "(", "config", ",", "file", "=", "text_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_byol_bolts.cli_main": [[428, 479], ["argparse.ArgumentParser", "custom_byol_bolts.parse_args", "logger.info", "parse_args.parse_args", "custom_byol_bolts.pretrain_routine", "ecg_datamodule.ECGDataModule", "pytorch_lightning.Trainer", "custom_byol_bolts.CustomBYOL", "pytorch_lightning.Trainer.fit", "custom_byol_bolts.aftertrain_routine", "online_evaluator.SSLOnlineEvaluator", "online_evaluator.SSLOnlineEvaluator", "callbacks.append", "callbacks.append", "exists", "eval", "logger.info", "CustomBYOL.load_from_checkpoint"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.parse_args", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.parse_args", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.pretrain_routine", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.aftertrain_routine"], ["", "", "def", "cli_main", "(", ")", ":", "\n", "    ", "from", "pytorch_lightning", "import", "Trainer", "\n", "from", "online_evaluator", "import", "SSLOnlineEvaluator", "\n", "from", "ecg_datamodule", "import", "ECGDataModule", "\n", "from", "clinical_ts", ".", "create_logger", "import", "create_logger", "\n", "from", "os", ".", "path", "import", "exists", "\n", "\n", "parser", "=", "ArgumentParser", "(", ")", "\n", "parser", "=", "parse_args", "(", "parser", ")", "\n", "logger", ".", "info", "(", "\"parse arguments\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "config", ",", "dataset", ",", "date", ",", "transformations", ",", "t_params", ",", "ptb_num_classes", ",", "tb_logger", "=", "pretrain_routine", "(", "args", ")", "\n", "\n", "# data", "\n", "ecg_datamodule", "=", "ECGDataModule", "(", "config", ",", "transformations", ",", "t_params", ")", "\n", "\n", "callbacks", "=", "[", "]", "\n", "if", "args", ".", "run_callbacks", ":", "\n", "# callback for online linear evaluation/fine-tuning", "\n", "        ", "linear_evaluator", "=", "SSLOnlineEvaluator", "(", "drop_p", "=", "0", ",", "\n", "z_dim", "=", "512", ",", "num_classes", "=", "ptb_num_classes", ",", "hidden_dim", "=", "None", ",", "lin_eval_epochs", "=", "config", "[", "\"eval_epochs\"", "]", ",", "eval_every", "=", "config", "[", "\"eval_every\"", "]", ",", "mode", "=", "\"linear_evaluation\"", ",", "verbose", "=", "False", ")", "\n", "\n", "fine_tuner", "=", "SSLOnlineEvaluator", "(", "drop_p", "=", "0", ",", "\n", "z_dim", "=", "512", ",", "num_classes", "=", "ptb_num_classes", ",", "hidden_dim", "=", "None", ",", "lin_eval_epochs", "=", "config", "[", "\"eval_epochs\"", "]", ",", "eval_every", "=", "config", "[", "\"eval_every\"", "]", ",", "mode", "=", "\"fine_tuning\"", ",", "verbose", "=", "False", ")", "\n", "\n", "callbacks", ".", "append", "(", "linear_evaluator", ")", "\n", "callbacks", ".", "append", "(", "fine_tuner", ")", "\n", "\n", "# configure trainer", "\n", "", "trainer", "=", "Trainer", "(", "logger", "=", "tb_logger", ",", "max_epochs", "=", "config", "[", "\"epochs\"", "]", ",", "gpus", "=", "args", ".", "gpus", ",", "\n", "distributed_backend", "=", "args", ".", "distributed_backend", ",", "auto_lr_find", "=", "False", ",", "num_nodes", "=", "args", ".", "num_nodes", ",", "precision", "=", "config", "[", "\"precision\"", "]", ",", "callbacks", "=", "callbacks", ")", "\n", "\n", "# pytorch lightning module", "\n", "pl_model", "=", "CustomBYOL", "(", "5", ",", "learning_rate", "=", "config", "[", "\"lr\"", "]", ",", "weight_decay", "=", "eval", "(", "config", "[", "\"weight_decay\"", "]", ")", ",", "\n", "warm_up_epochs", "=", "config", "[", "\"warm_up\"", "]", ",", "max_epochs", "=", "config", "[", "\n", "\"epochs\"", "]", ",", "num_workers", "=", "config", "[", "\"dataset\"", "]", "[", "\"num_workers\"", "]", ",", "\n", "batch_size", "=", "config", "[", "\"batch_size\"", "]", ",", "config", "=", "config", ",", "transformations", "=", "ecg_datamodule", ".", "transformations", ")", "\n", "\n", "\n", "# load checkpoint", "\n", "if", "args", ".", "checkpoint_path", "!=", "\"\"", ":", "\n", "        ", "if", "exists", "(", "args", ".", "checkpoint_path", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Retrieve checkpoint from \"", "+", "args", ".", "checkpoint_path", ")", "\n", "pl_model", ".", "load_from_checkpoint", "(", "args", ".", "checkpoint_path", ")", "\n", "", "else", ":", "\n", "            ", "raise", "(", "\"checkpoint does not exist\"", ")", "\n", "\n", "# start training", "\n", "", "", "trainer", ".", "fit", "(", "pl_model", ",", "ecg_datamodule", ")", "\n", "\n", "aftertrain_routine", "(", "config", ",", "args", ",", "trainer", ",", "pl_model", ",", "ecg_datamodule", ",", "callbacks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.ecg_datamodule.ECGDataModule.__init__": [[17, 47], ["pytorch_lightning.LightningDataModule.__init__", "ecg_datamodule.ECGDataModule.set_params", "os.getcwd"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.ecg_datamodule.ECGDataModule.set_params"], ["def", "__init__", "(", "\n", "self", ",", "\n", "config", ",", "\n", "transformations_str", ",", "\n", "t_params", ",", "\n", "data_dir", ":", "str", "=", "None", ",", "\n", "val_split", ":", "int", "=", "5000", ",", "\n", "num_workers", ":", "int", "=", "16", ",", "\n", "batch_size", ":", "int", "=", "32", ",", "\n", "seed", ":", "int", "=", "42", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "dims", "=", "(", "12", ",", "250", ")", "\n", "# self.val_split = val_split", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "data_dir", "=", "data_dir", "if", "data_dir", "is", "not", "None", "else", "os", ".", "getcwd", "(", ")", "\n", "# self.num_samples = 60000 - val_split", "\n", "\n", "# self.DATASET = SimCLRDataSetWrapper(", "\n", "#    config['eval_batch_size'], **config['eval_dataset'])", "\n", "# self.train_loader, self.valid_loader = self.DATASET.get_data_loaders()", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "transformations_str", "=", "transformations_str", "\n", "self", ".", "t_params", "=", "t_params", "\n", "self", ".", "set_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.ecg_datamodule.ECGDataModule.set_params": [[48, 54], ["clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper", "clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper.get_data_loaders"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper.get_data_loaders"], ["", "def", "set_params", "(", "self", ")", ":", "\n", "        ", "dataset", "=", "SimCLRDataSetWrapper", "(", "\n", "self", ".", "config", "[", "'batch_size'", "]", ",", "**", "self", ".", "config", "[", "'dataset'", "]", ",", "transformations", "=", "self", ".", "transformations_str", ",", "t_params", "=", "self", ".", "t_params", ")", "\n", "train_loader", ",", "valid_loader", "=", "dataset", ".", "get_data_loaders", "(", ")", "\n", "self", ".", "num_samples", "=", "dataset", ".", "train_ds_size", "\n", "self", ".", "transformations", "=", "dataset", ".", "transformations", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.ecg_datamodule.ECGDataModule.num_classes": [[54, 61], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return:\n            10\n        \"\"\"", "\n", "return", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.ecg_datamodule.ECGDataModule.prepare_data": [[62, 64], ["None"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.ecg_datamodule.ECGDataModule.train_dataloader": [[65, 70], ["clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper", "clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper.get_data_loaders"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper.get_data_loaders"], ["", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "dataset", "=", "SimCLRDataSetWrapper", "(", "\n", "self", ".", "config", "[", "'batch_size'", "]", ",", "**", "self", ".", "config", "[", "'dataset'", "]", ",", "transformations", "=", "self", ".", "transformations_str", ",", "t_params", "=", "self", ".", "t_params", ")", "\n", "train_loader", ",", "_", "=", "dataset", ".", "get_data_loaders", "(", ")", "\n", "return", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.ecg_datamodule.ECGDataModule.val_dataloader": [[71, 80], ["clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper", "clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper.get_data_loaders", "clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper", "clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper.get_data_loaders"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper.get_data_loaders", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper.get_data_loaders"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "dataset", "=", "SimCLRDataSetWrapper", "(", "\n", "self", ".", "config", "[", "'eval_batch_size'", "]", ",", "**", "self", ".", "config", "[", "'eval_dataset'", "]", ",", "transformations", "=", "self", ".", "transformations_str", ",", "t_params", "=", "self", ".", "t_params", ")", "\n", "_", ",", "valid_loader_self", "=", "dataset", ".", "get_data_loaders", "(", ")", "\n", "dataset", "=", "SimCLRDataSetWrapper", "(", "\n", "self", ".", "config", "[", "'eval_batch_size'", "]", ",", "**", "self", ".", "config", "[", "'eval_dataset'", "]", ",", "transformations", "=", "self", ".", "transformations_str", ",", "t_params", "=", "self", ".", "t_params", ",", "mode", "=", "\"linear_evaluation\"", ")", "\n", "valid_loader_sup", ",", "test_loader_sup", "=", "dataset", ".", "get_data_loaders", "(", ")", "\n", "# return valid_loader", "\n", "return", "[", "valid_loader_self", ",", "valid_loader_sup", ",", "test_loader_sup", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.ecg_datamodule.ECGDataModule.test_dataloader": [[82, 84], ["None"], "methods", ["None"], ["", "def", "test_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "valid_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.ecg_datamodule.ECGDataModule.default_transforms": [[85, 87], ["None"], "methods", ["None"], ["", "def", "default_transforms", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.Projection.__init__": [[65, 77], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "pl_bolts.models.self_supervised.evaluator.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "2048", ",", "hidden_dim", "=", "2048", ",", "output_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "# nn.AdaptiveAvgPool2d((1, 1)),", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "hidden_dim", ",", "bias", "=", "True", ")", ",", "\n", "# nn.BatchNorm1d(self.hidden_dim),", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "output_dim", ",", "bias", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.Projection.forward": [[78, 81], ["custom_simclr_bolts.Projection.model", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "return", "F", ".", "normalize", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.SyncFunction.forward": [[85, 95], ["torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "tensor", ")", ":", "\n", "        ", "ctx", ".", "batch_size", "=", "tensor", ".", "shape", "[", "0", "]", "\n", "\n", "gathered_tensor", "=", "[", "torch", ".", "zeros_like", "(", "tensor", ")", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "gathered_tensor", ",", "tensor", ")", "\n", "gathered_tensor", "=", "torch", ".", "cat", "(", "gathered_tensor", ",", "0", ")", "\n", "\n", "return", "gathered_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.SyncFunction.backward": [[96, 103], ["grad_output.clone", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.all_reduce", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "grad_input", "=", "grad_output", ".", "clone", "(", ")", "\n", "torch", ".", "distributed", ".", "all_reduce", "(", "grad_input", ",", "op", "=", "torch", ".", "distributed", ".", "ReduceOp", ".", "SUM", ",", "async_op", "=", "False", ")", "\n", "\n", "return", "grad_input", "[", "torch", ".", "distributed", ".", "get_rank", "(", ")", "*", "ctx", ".", "batch_size", ":", "(", "torch", ".", "distributed", ".", "get_rank", "(", ")", "+", "1", ")", "*", "\n", "ctx", ".", "batch_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.__init__": [[107, 134], ["pytorch_lightning.LightningModule.__init__", "custom_simclr_bolts.CustomSimCLR.save_hyperparameters"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "batch_size", ",", "\n", "num_samples", ",", "\n", "warmup_epochs", "=", "10", ",", "\n", "lr", "=", "1e-4", ",", "\n", "opt_weight_decay", "=", "1e-6", ",", "\n", "loss_temperature", "=", "0.5", ",", "\n", "config", "=", "None", ",", "\n", "transformations", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_size: the batch size\n            num_samples: num samples in the dataset\n            warmup_epochs: epochs to warmup the lr for\n            lr: the optimizer learning rate\n            opt_weight_decay: the optimizer weight decay\n            loss_temperature: the loss temperature\n        \"\"\"", "\n", "\n", "super", "(", "CustomSimCLR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "transformations", "=", "transformations", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "# pdb.set_trace()", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.configure_optimizers": [[136, 169], ["custom_simclr_bolts.CustomSimCLR.exclude_from_wt_decay", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "pl_bolts.optimizers.lr_scheduler.LinearWarmupCosineAnnealingLR", "custom_simclr_bolts.CustomSimCLR.named_parameters"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.exclude_from_wt_decay"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "global_batch_size", "=", "self", ".", "trainer", ".", "world_size", "*", "self", ".", "hparams", ".", "batch_size", "\n", "self", ".", "train_iters_per_epoch", "=", "self", ".", "hparams", ".", "num_samples", "//", "global_batch_size", "\n", "# TRICK 1 (Use lars + filter weights)", "\n", "# exclude certain parameters", "\n", "parameters", "=", "self", ".", "exclude_from_wt_decay", "(", "\n", "self", ".", "named_parameters", "(", ")", ",", "\n", "weight_decay", "=", "self", ".", "hparams", ".", "opt_weight_decay", "\n", ")", "\n", "\n", "\n", "# optimizer = LARSWrapper(Adam(parameters, lr=self.hparams.lr))", "\n", "optimizer", "=", "Adam", "(", "parameters", ",", "lr", "=", "self", ".", "hparams", ".", "lr", ")", "\n", "\n", "# Trick 2 (after each step)", "\n", "self", ".", "hparams", ".", "warmup_epochs", "=", "self", ".", "hparams", ".", "warmup_epochs", "*", "self", ".", "train_iters_per_epoch", "\n", "max_epochs", "=", "self", ".", "trainer", ".", "max_epochs", "*", "self", ".", "train_iters_per_epoch", "\n", "\n", "linear_warmup_cosine_decay", "=", "LinearWarmupCosineAnnealingLR", "(", "\n", "optimizer", ",", "\n", "warmup_epochs", "=", "self", ".", "hparams", ".", "warmup_epochs", ",", "\n", "max_epochs", "=", "max_epochs", ",", "\n", "warmup_start_lr", "=", "0", ",", "\n", "eta_min", "=", "0", "\n", ")", "\n", "\n", "scheduler", "=", "{", "\n", "'scheduler'", ":", "linear_warmup_cosine_decay", ",", "\n", "'interval'", ":", "'step'", ",", "\n", "'frequency'", ":", "1", "\n", "}", "\n", "\n", "return", "[", "optimizer", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.exclude_from_wt_decay": [[170, 185], ["any", "excluded_params.append", "params.append"], "methods", ["None"], ["", "def", "exclude_from_wt_decay", "(", "self", ",", "named_params", ",", "weight_decay", ",", "skip_list", "=", "[", "'bias'", ",", "'bn'", "]", ")", ":", "\n", "        ", "params", "=", "[", "]", "\n", "excluded_params", "=", "[", "]", "\n", "\n", "for", "name", ",", "param", "in", "named_params", ":", "\n", "            ", "if", "not", "param", ".", "requires_grad", ":", "\n", "                ", "continue", "\n", "", "elif", "any", "(", "layer_name", "in", "name", "for", "layer_name", "in", "skip_list", ")", ":", "\n", "                ", "excluded_params", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "                ", "params", ".", "append", "(", "param", ")", "\n", "\n", "", "", "return", "[", "\n", "{", "'params'", ":", "params", ",", "'weight_decay'", ":", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "excluded_params", ",", "'weight_decay'", ":", "0.", "}", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.shared_forward": [[187, 210], ["custom_simclr_bolts.CustomSimCLR.to_device", "custom_simclr_bolts.CustomSimCLR.to_device", "isinstance", "custom_simclr_bolts.CustomSimCLR.projection", "custom_simclr_bolts.CustomSimCLR.projection", "custom_simclr_bolts.CustomSimCLR.encoder", "custom_simclr_bolts.CustomSimCLR.encoder", "h1.squeeze", "h2.squeeze"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.to_device", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.to_device", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.squeeze", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.squeeze"], ["", "def", "shared_forward", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", "=", "batch", "\n", "# ENCODE", "\n", "# encode -> representations", "\n", "# (b, 3, 32, 32) -> (b, 2048, 2, 2)", "\n", "x1", "=", "self", ".", "to_device", "(", "x1", ")", "\n", "x2", "=", "self", ".", "to_device", "(", "x2", ")", "\n", "\n", "h1", "=", "self", ".", "encoder", "(", "x1", ")", "[", "0", "]", "\n", "h2", "=", "self", ".", "encoder", "(", "x2", ")", "[", "0", "]", "\n", "\n", "# the bolts resnets return a list of feature maps", "\n", "if", "isinstance", "(", "h1", ",", "list", ")", ":", "\n", "            ", "h1", "=", "h1", "[", "-", "1", "]", "\n", "h2", "=", "h2", "[", "-", "1", "]", "\n", "\n", "# PROJECT", "\n", "# img -> E -> h -> || -> z", "\n", "# (b, 2048, 2, 2) -> (b, 128)", "\n", "", "z1", "=", "self", ".", "projection", "(", "h1", ".", "squeeze", "(", ")", ")", "\n", "z2", "=", "self", ".", "projection", "(", "h2", ".", "squeeze", "(", ")", ")", "\n", "\n", "return", "z1", ",", "z2", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.nt_xent_loss": [[211, 250], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp.sum", "torch.exp.sum", "torch.exp.sum", "torch.exp.sum", "torch.Tensor().fill_().to", "torch.Tensor().fill_().to", "torch.Tensor().fill_().to", "torch.Tensor().fill_().to", "torch.Tensor().fill_().to", "torch.Tensor().fill_().to", "torch.Tensor().fill_().to", "torch.Tensor().fill_().to", "torch.Tensor().fill_().to", "torch.Tensor().fill_().to", "torch.Tensor().fill_().to", "torch.Tensor().fill_().to", "torch.Tensor().fill_().to", "torch.Tensor().fill_().to", "torch.Tensor().fill_().to", "torch.Tensor().fill_().to", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.distributed.is_available", "torch.distributed.is_available", "torch.distributed.is_available", "torch.distributed.is_available", "torch.distributed.is_available", "torch.distributed.is_available", "torch.distributed.is_available", "torch.distributed.is_available", "torch.distributed.is_available", "torch.distributed.is_available", "torch.distributed.is_available", "torch.distributed.is_available", "torch.distributed.is_available", "torch.distributed.is_available", "torch.distributed.is_available", "torch.distributed.is_available", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "SyncFunction.apply", "SyncFunction.apply", "print", "torch.cat.t().contiguous", "torch.cat.t().contiguous", "torch.cat.t().contiguous", "torch.cat.t().contiguous", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean"], ["", "def", "nt_xent_loss", "(", "self", ",", "out_1", ",", "out_2", ",", "temperature", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "\"\"\"\n            assume out_1 and out_2 are normalized\n            out_1: [batch_size, dim]\n            out_2: [batch_size, dim]\n        \"\"\"", "\n", "# gather representations in case of distributed training", "\n", "# out_1_dist: [batch_size * world_size, dim]", "\n", "# out_2_dist: [batch_size * world_size, dim]", "\n", "if", "torch", ".", "distributed", ".", "is_available", "(", ")", "and", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "            ", "out_1_dist", "=", "SyncFunction", ".", "apply", "(", "out_1", ")", "\n", "out_2_dist", "=", "SyncFunction", ".", "apply", "(", "out_2", ")", "\n", "print", "(", "\"out dist shape: \"", ",", "out_1_dist", ".", "shape", ")", "\n", "", "else", ":", "\n", "            ", "out_1_dist", "=", "out_1", "\n", "out_2_dist", "=", "out_2", "\n", "\n", "# out: [2 * batch_size, dim]", "\n", "# out_dist: [2 * batch_size * world_size, dim]", "\n", "", "out", "=", "torch", ".", "cat", "(", "[", "out_1", ",", "out_2", "]", ",", "dim", "=", "0", ")", "\n", "out_dist", "=", "torch", ".", "cat", "(", "[", "out_1_dist", ",", "out_2_dist", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# cov and sim: [2 * batch_size, 2 * batch_size * world_size]", "\n", "# neg: [2 * batch_size]", "\n", "cov", "=", "torch", ".", "mm", "(", "out", ",", "out_dist", ".", "t", "(", ")", ".", "contiguous", "(", ")", ")", "\n", "sim", "=", "torch", ".", "exp", "(", "cov", "/", "temperature", ")", "\n", "neg", "=", "sim", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n", "# from each row, subtract e^1 to remove similarity measure for x1.x1", "\n", "row_sub", "=", "torch", ".", "Tensor", "(", "neg", ".", "shape", ")", ".", "fill_", "(", "math", ".", "e", ")", ".", "to", "(", "neg", ".", "device", ")", "\n", "neg", "=", "torch", ".", "clamp", "(", "neg", "-", "row_sub", ",", "min", "=", "eps", ")", "# clamp for numerical stability", "\n", "\n", "# Positive similarity, pos becomes [2 * batch_size]", "\n", "pos", "=", "torch", ".", "exp", "(", "torch", ".", "sum", "(", "out_1", "*", "out_2", ",", "dim", "=", "-", "1", ")", "/", "temperature", ")", "\n", "pos", "=", "torch", ".", "cat", "(", "[", "pos", ",", "pos", "]", ",", "dim", "=", "0", ")", "\n", "\n", "loss", "=", "-", "torch", ".", "log", "(", "pos", "/", "(", "neg", "+", "eps", ")", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.training_step": [[251, 265], ["custom_simclr_bolts.CustomSimCLR.shared_forward", "custom_simclr_bolts.CustomSimCLR.nt_xent_loss", "custom_simclr_bolts._accuracy"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.shared_forward", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.nt_xent_loss", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts._accuracy"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "z1", ",", "z2", "=", "self", ".", "shared_forward", "(", "batch", ",", "batch_idx", ")", "\n", "loss", "=", "self", ".", "nt_xent_loss", "(", "z1", ",", "z2", ",", "self", ".", "hparams", ".", "loss_temperature", ")", "\n", "# result = pl.TrainResult(minimize=loss)", "\n", "# result.log('train/train_loss', loss, on_epoch=True)", "\n", "\n", "acc", "=", "_accuracy", "(", "z1", ",", "z2", ",", "z1", ".", "shape", "[", "0", "]", ")", "\n", "# result.log('train/train_acc', acc, on_epoch=True)", "\n", "result", "=", "{", "\n", "\"train/train_loss\"", ":", "loss", ",", "\n", "\"minimize\"", ":", "loss", ",", "\n", "\"train/train_acc\"", ":", "acc", ",", "\n", "}", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.validation_step": [[266, 278], ["custom_simclr_bolts.CustomSimCLR.shared_forward", "custom_simclr_bolts.CustomSimCLR.nt_xent_loss", "custom_simclr_bolts._accuracy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.shared_forward", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.nt_xent_loss", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts._accuracy"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", ")", ":", "\n", "        ", "if", "dataloader_idx", "!=", "0", ":", "\n", "            ", "return", "{", "}", "\n", "", "z1", ",", "z2", "=", "self", ".", "shared_forward", "(", "batch", ",", "batch_idx", ")", "\n", "loss", "=", "self", ".", "nt_xent_loss", "(", "z1", ",", "z2", ",", "self", ".", "hparams", ".", "loss_temperature", ")", "\n", "\n", "acc", "=", "_accuracy", "(", "z1", ",", "z2", ",", "z1", ".", "shape", "[", "0", "]", ")", "\n", "results", "=", "{", "\n", "'val_loss'", ":", "loss", ",", "\n", "'val_acc'", ":", "torch", ".", "tensor", "(", "acc", ")", "\n", "}", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.validation_epoch_end": [[279, 289], ["custom_simclr_bolts.mean", "custom_simclr_bolts.mean"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "# outputs[0] because we are using multiple datasets!", "\n", "        ", "val_loss", "=", "mean", "(", "outputs", "[", "0", "]", ",", "'val_loss'", ")", "\n", "val_acc", "=", "mean", "(", "outputs", "[", "0", "]", ",", "'val_acc'", ")", "\n", "\n", "log", "=", "{", "\n", "'val/val_loss'", ":", "val_loss", ",", "\n", "'val/val_acc'", ":", "val_acc", "\n", "}", "\n", "return", "{", "'val_loss'", ":", "val_loss", ",", "'log'", ":", "log", ",", "'progress_bar'", ":", "log", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.on_train_start": [[290, 302], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "custom_simclr_bolts.CustomSimCLR.logger.experiment.add_text", "custom_simclr_bolts.CustomSimCLR.logger.experiment.add_text", "str", "str", "str", "str", "str", "t.get_params", "str"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Transformation.get_params"], ["", "def", "on_train_start", "(", "self", ")", ":", "\n", "# log configuration", "\n", "        ", "config_str", "=", "re", ".", "sub", "(", "r\"[,\\}\\{]\"", ",", "\"<br/>\"", ",", "str", "(", "self", ".", "config", ")", ")", "\n", "config_str", "=", "re", ".", "sub", "(", "r\"[\\[\\]\\']\"", ",", "\"\"", ",", "config_str", ")", "\n", "transformation_str", "=", "re", ".", "sub", "(", "r\"[\\}]\"", ",", "\"<br/>\"", ",", "str", "(", "[", "\"<br>\"", "+", "str", "(", "\n", "t", ")", "+", "\":<br/>\"", "+", "str", "(", "t", ".", "get_params", "(", ")", ")", "for", "t", "in", "self", ".", "transformations", "]", ")", ")", "\n", "transformation_str", "=", "re", ".", "sub", "(", "r\"[,\\\"\\{\\'\\[\\]]\"", ",", "\"\"", ",", "transformation_str", ")", "\n", "self", ".", "logger", ".", "experiment", ".", "add_text", "(", "\n", "\"configuration\"", ",", "str", "(", "config_str", ")", ",", "global_step", "=", "0", ")", "\n", "self", ".", "logger", ".", "experiment", ".", "add_text", "(", "\"transformations\"", ",", "str", "(", "\n", "transformation_str", ")", ",", "global_step", "=", "0", ")", "\n", "self", ".", "epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.on_epoch_end": [[303, 305], ["None"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ")", ":", "\n", "        ", "self", ".", "epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type": [[306, 308], ["[].weight.type"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type"], ["", "def", "type", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "encoder", ".", "features", "[", "0", "]", "[", "0", "]", ".", "weight", ".", "type", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.get_representations": [[309, 311], ["custom_simclr_bolts.CustomSimCLR.encoder"], "methods", ["None"], ["", "def", "get_representations", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "encoder", "(", "x", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.get_model": [[312, 314], ["None"], "methods", ["None"], ["", "def", "get_model", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.get_device": [[315, 317], ["None"], "methods", ["None"], ["", "def", "get_device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "encoder", ".", "features", "[", "0", "]", "[", "0", "]", ".", "weight", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.to_device": [[318, 320], ["x.type().to", "custom_simclr_bolts.CustomSimCLR.get_device", "x.type", "custom_simclr_bolts.CustomSimCLR.type"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.get_device", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type"], ["", "def", "to_device", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "type", "(", "self", ".", "type", "(", ")", ")", ".", "to", "(", "self", ".", "get_device", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts._accuracy": [[45, 58], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.max", "torch.max", "torch.max", "torch.max", "correct_preds.float", "torch.cat.t().contiguous", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.eye().type_as", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat.t", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "correct_indices.type_as"], "function", ["None"], ["def", "_accuracy", "(", "zis", ",", "zjs", ",", "batch_size", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "representations", "=", "torch", ".", "cat", "(", "[", "zjs", ",", "zis", "]", ",", "dim", "=", "0", ")", "\n", "similarity_matrix", "=", "torch", ".", "mm", "(", "\n", "representations", ",", "representations", ".", "t", "(", ")", ".", "contiguous", "(", ")", ")", "\n", "corrected_similarity_matrix", "=", "similarity_matrix", "-", "torch", ".", "eye", "(", "2", "*", "batch_size", ")", ".", "type_as", "(", "similarity_matrix", ")", "\n", "pred_similarities", ",", "pred_indices", "=", "torch", ".", "max", "(", "\n", "corrected_similarity_matrix", "[", ":", "batch_size", "]", ",", "dim", "=", "1", ")", "\n", "correct_indices", "=", "torch", ".", "arange", "(", "batch_size", ")", "+", "batch_size", "\n", "correct_preds", "=", "(", "\n", "pred_indices", "==", "correct_indices", ".", "type_as", "(", "pred_indices", ")", ")", ".", "sum", "(", ")", "\n", "", "return", "correct_preds", ".", "float", "(", ")", "/", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean": [[59, 63], ["torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "type", "x.keys"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type"], ["", "def", "mean", "(", "res", ",", "key1", ",", "key2", "=", "None", ")", ":", "\n", "    ", "if", "key2", "is", "not", "None", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "[", "x", "[", "key1", "]", "[", "key2", "]", "for", "x", "in", "res", "]", ")", ".", "mean", "(", ")", "\n", "", "return", "torch", ".", "stack", "(", "[", "x", "[", "key1", "]", "for", "x", "in", "res", "if", "type", "(", "x", ")", "==", "dict", "and", "key1", "in", "x", ".", "keys", "(", ")", "]", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.parse_args": [[322, 377], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "", "def", "parse_args", "(", "parent_parser", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "parents", "=", "[", "parent_parser", "]", ",", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--trafos'", ",", "nargs", "=", "'+'", ",", "help", "=", "'add transformation to data augmentation pipeline'", ",", "\n", "default", "=", "[", "\"GaussianNoise\"", ",", "\"ChannelResize\"", ",", "\"RandomResizedCrop\"", "]", ")", "\n", "# GaussianNoise", "\n", "parser", ".", "add_argument", "(", "\n", "'--gaussian_scale'", ",", "help", "=", "'std param for gaussian noise transformation'", ",", "default", "=", "0.005", ",", "type", "=", "float", ")", "\n", "# RandomResizedCrop", "\n", "parser", ".", "add_argument", "(", "'--rr_crop_ratio_range'", ",", "\n", "help", "=", "'ratio range for random resized crop transformation'", ",", "default", "=", "[", "0.5", ",", "1.0", "]", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output_size'", ",", "help", "=", "'output size for random resized crop transformation'", ",", "default", "=", "250", ",", "type", "=", "int", ")", "\n", "# DynamicTimeWarp", "\n", "parser", ".", "add_argument", "(", "\n", "'--warps'", ",", "help", "=", "'number of warps for dynamic time warp transformation'", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--radius'", ",", "help", "=", "'radius of warps of dynamic time warp transformation'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "# TimeWarp", "\n", "parser", ".", "add_argument", "(", "\n", "'--epsilon'", ",", "help", "=", "'epsilon param for time warp'", ",", "default", "=", "10", ",", "type", "=", "float", ")", "\n", "# ChannelResize", "\n", "parser", ".", "add_argument", "(", "'--magnitude_range'", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'range for scale param for ChannelResize transformation'", ",", "default", "=", "[", "0.5", ",", "2", "]", ",", "type", "=", "float", ")", "\n", "# Downsample", "\n", "parser", ".", "add_argument", "(", "\n", "'--downsample_ratio'", ",", "help", "=", "'downsample ratio for Downsample transformation'", ",", "default", "=", "0.2", ",", "type", "=", "float", ")", "\n", "# TimeOut", "\n", "parser", ".", "add_argument", "(", "'--to_crop_ratio_range'", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'ratio range for timeout transformation'", ",", "default", "=", "[", "0.2", ",", "0.4", "]", ",", "type", "=", "float", ")", "\n", "# resume training", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "help", "=", "'number of gpus to use; use cpu if gpu=0'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num_nodes'", ",", "default", "=", "1", ",", "help", "=", "'number of cluster nodes'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--distributed_backend'", ",", "help", "=", "'sets backend type'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--warm_up'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "\"number of warm up epochs\"", ")", "\n", "parser", ".", "add_argument", "(", "'--precision'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--datasets'", ",", "dest", "=", "\"target_folders\"", ",", "\n", "nargs", "=", "'+'", ",", "help", "=", "'used datasets for pretraining'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "default", "=", "\"./experiment_logs\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--percentage'", ",", "help", "=", "'determines how much of the dataset shall be used during the pretraining'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "help", "=", "\"learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "'--out_dim'", ",", "type", "=", "int", ",", "help", "=", "\"output dimension of model\"", ")", "\n", "parser", ".", "add_argument", "(", "'--filter_cinc'", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"only valid if cinc is selected: filter out the ptb data\"", ")", "\n", "parser", ".", "add_argument", "(", "'--base_model'", ")", "\n", "parser", ".", "add_argument", "(", "'--widen'", ",", "type", "=", "int", ",", "help", "=", "\"use wide xresnet1d50\"", ")", "\n", "parser", ".", "add_argument", "(", "'--run_callbacks'", ",", "default", "=", "False", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"run callbacks which asses linear evaluaton and finetuning metrics during pretraining\"", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_path'", ",", "default", "=", "\"\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.init_logger": [[378, 392], ["logging.basicConfig", "logging.getLogger", "logging.root.removeHandler", "os.path.isdir", "os.mkdir", "os.path.join"], "function", ["None"], ["", "def", "init_logger", "(", "config", ")", ":", "\n", "    ", "level", "=", "logging", ".", "INFO", "\n", "\n", "if", "config", "[", "'debug'", "]", ":", "\n", "        ", "level", "=", "logging", ".", "DEBUG", "\n", "\n", "# remove all handlers to change basic configuration", "\n", "", "for", "handler", "in", "logging", ".", "root", ".", "handlers", "[", ":", "]", ":", "\n", "        ", "logging", ".", "root", ".", "removeHandler", "(", "handler", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "config", "[", "'log_dir'", "]", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "config", "[", "'log_dir'", "]", ")", "\n", "", "logging", ".", "basicConfig", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'log_dir'", "]", ",", "'info.log'", ")", ",", "level", "=", "level", ",", "\n", "format", "=", "'%(asctime)s %(name)s:%(lineno)s %(levelname)s:  %(message)s  '", ")", "\n", "return", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.pretrain_routine": [[393, 435], ["os.path.join", "yaml.load", "vars", "set().union", "custom_simclr_bolts.init_logger", "clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper", "enumerate", "time.asctime", "re.sub", "re.sub", "pytorch_lightning.loggers.TensorBoardLogger", "os.path.join", "print", "open", "set", "logger.info", "str", "os.path.isfile", "set", "vars.keys", "yaml.load.keys", "str", "vars.keys", "t.get_params", "str", "vars.keys", "yaml.load.keys", "str", "time.time_ns", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.init_logger", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Transformation.get_params"], ["", "def", "pretrain_routine", "(", "args", ")", ":", "\n", "    ", "t_params", "=", "{", "\"gaussian_scale\"", ":", "args", ".", "gaussian_scale", ",", "\"rr_crop_ratio_range\"", ":", "args", ".", "rr_crop_ratio_range", ",", "\"output_size\"", ":", "args", ".", "output_size", ",", "\"warps\"", ":", "args", ".", "warps", ",", "\"radius\"", ":", "args", ".", "radius", ",", "\n", "\"epsilon\"", ":", "args", ".", "epsilon", ",", "\"magnitude_range\"", ":", "args", ".", "magnitude_range", ",", "\"downsample_ratio\"", ":", "args", ".", "downsample_ratio", ",", "\"to_crop_ratio_range\"", ":", "args", ".", "to_crop_ratio_range", ",", "\n", "\"bw_cmax\"", ":", "0.1", ",", "\"em_cmax\"", ":", "0.5", ",", "\"pl_cmax\"", ":", "0.2", ",", "\"bs_cmax\"", ":", "1", "}", "\n", "transformations", "=", "args", ".", "trafos", "\n", "checkpoint_config", "=", "os", ".", "path", ".", "join", "(", "\"checkpoints\"", ",", "\"bolts_config.yaml\"", ")", "\n", "config_file", "=", "checkpoint_config", "if", "args", ".", "resume", "and", "os", ".", "path", ".", "isfile", "(", "\n", "checkpoint_config", ")", "else", "\"bolts_config.yaml\"", "\n", "config", "=", "yaml", ".", "load", "(", "open", "(", "config_file", ",", "\"r\"", ")", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "args_dict", "=", "vars", "(", "args", ")", "\n", "for", "key", "in", "set", "(", "config", ".", "keys", "(", ")", ")", ".", "union", "(", "set", "(", "args_dict", ".", "keys", "(", ")", ")", ")", ":", "\n", "        ", "config", "[", "key", "]", "=", "config", "[", "key", "]", "if", "(", "key", "not", "in", "args_dict", ".", "keys", "(", ")", "or", "key", "in", "args_dict", ".", "keys", "(", "\n", ")", "and", "key", "in", "config", ".", "keys", "(", ")", "and", "args_dict", "[", "key", "]", "is", "None", ")", "else", "args_dict", "[", "key", "]", "\n", "", "if", "args", ".", "target_folders", "is", "not", "None", ":", "\n", "        ", "config", "[", "\"dataset\"", "]", "[", "\"target_folders\"", "]", "=", "args", ".", "target_folders", "\n", "", "config", "[", "\"dataset\"", "]", "[", "\"percentage\"", "]", "=", "args", ".", "percentage", "if", "args", ".", "percentage", "is", "not", "None", "else", "config", "[", "\"dataset\"", "]", "[", "\"percentage\"", "]", "\n", "config", "[", "\"dataset\"", "]", "[", "\"filter_cinc\"", "]", "=", "args", ".", "filter_cinc", "if", "args", ".", "filter_cinc", "is", "not", "None", "else", "config", "[", "\"dataset\"", "]", "[", "\"filter_cinc\"", "]", "\n", "config", "[", "\"model\"", "]", "[", "\"base_model\"", "]", "=", "args", ".", "base_model", "if", "args", ".", "base_model", "is", "not", "None", "else", "config", "[", "\"model\"", "]", "[", "\"base_model\"", "]", "\n", "config", "[", "\"model\"", "]", "[", "\"widen\"", "]", "=", "args", ".", "widen", "if", "args", ".", "widen", "is", "not", "None", "else", "config", "[", "\"model\"", "]", "[", "\"widen\"", "]", "\n", "if", "args", ".", "out_dim", "is", "not", "None", ":", "\n", "        ", "config", "[", "\"model\"", "]", "[", "\"out_dim\"", "]", "=", "args", ".", "out_dim", "\n", "", "init_logger", "(", "config", ")", "\n", "dataset", "=", "SimCLRDataSetWrapper", "(", "\n", "config", "[", "'batch_size'", "]", ",", "**", "config", "[", "'dataset'", "]", ",", "transformations", "=", "transformations", ",", "t_params", "=", "t_params", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "dataset", ".", "transformations", ")", ":", "\n", "        ", "logger", ".", "info", "(", "str", "(", "i", ")", "+", "\". Transformation: \"", "+", "\n", "str", "(", "t", ")", "+", "\": \"", "+", "str", "(", "t", ".", "get_params", "(", ")", ")", ")", "\n", "", "date", "=", "time", ".", "asctime", "(", ")", "\n", "label_to_num_classes", "=", "{", "\"label_all\"", ":", "71", ",", "\"label_diag\"", ":", "44", ",", "\"label_form\"", ":", "19", ",", "\n", "\"label_rhythm\"", ":", "12", ",", "\"label_diag_subclass\"", ":", "23", ",", "\"label_diag_superclass\"", ":", "5", "}", "\n", "ptb_num_classes", "=", "label_to_num_classes", "[", "config", "[", "\"eval_dataset\"", "]", "\n", "[", "\"ptb_xl_label\"", "]", "]", "\n", "abr", "=", "{", "\"Transpose\"", ":", "\"Tr\"", ",", "\"TimeOut\"", ":", "\"TO\"", ",", "\"DynamicTimeWarp\"", ":", "\"DTW\"", ",", "\"RandomResizedCrop\"", ":", "\"RRC\"", ",", "\"ChannelResize\"", ":", "\"ChR\"", ",", "\"GaussianNoise\"", ":", "\"GN\"", ",", "\n", "\"TimeWarp\"", ":", "\"TW\"", ",", "\"ToTensor\"", ":", "\"TT\"", ",", "\"GaussianBlur\"", ":", "\"GB\"", ",", "\"BaselineWander\"", ":", "\"BlW\"", ",", "\"PowerlineNoise\"", ":", "\"PlN\"", ",", "\"EMNoise\"", ":", "\"EM\"", ",", "\"BaselineShift\"", ":", "\"BlS\"", "}", "\n", "trs", "=", "re", ".", "sub", "(", "r\"[,'\\]\\[]\"", ",", "\"\"", ",", "str", "(", "[", "abr", "[", "str", "(", "tr", ")", "]", "if", "abr", "[", "str", "(", "tr", ")", "]", "not", "in", "[", "\n", "\"TT\"", ",", "\"Tr\"", "]", "else", "''", "for", "tr", "in", "dataset", ".", "transformations", "]", ")", ")", "\n", "name", "=", "str", "(", "date", ")", "+", "\"_\"", "+", "method", "+", "\"_\"", "+", "str", "(", "\n", "time", ".", "time_ns", "(", ")", ")", "[", "-", "3", ":", "]", "+", "\"_\"", "+", "trs", "[", "1", ":", "]", "\n", "tb_logger", "=", "TensorBoardLogger", "(", "args", ".", "log_dir", ",", "name", "=", "name", ",", "version", "=", "''", ")", "\n", "config", "[", "\"log_dir\"", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "name", ")", "\n", "print", "(", "config", ")", "\n", "return", "config", ",", "dataset", ",", "date", ",", "transformations", ",", "t_params", ",", "ptb_num_classes", ",", "tb_logger", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.aftertrain_routine": [[436, 450], ["trainer.save_checkpoint", "isinstance", "open", "pickle.dump", "pickle.dump", "os.path.join", "open", "print", "os.path.join", "os.path.join", "str"], "function", ["None"], ["", "def", "aftertrain_routine", "(", "config", ",", "args", ",", "trainer", ",", "pl_model", ",", "datamodule", ",", "callbacks", ")", ":", "\n", "    ", "scores", "=", "{", "}", "\n", "for", "ca", "in", "callbacks", ":", "\n", "        ", "if", "isinstance", "(", "ca", ",", "SSLOnlineEvaluator", ")", ":", "\n", "            ", "scores", "[", "str", "(", "ca", ")", "]", "=", "{", "\"macro\"", ":", "ca", ".", "best_macro", "}", "\n", "\n", "", "", "results", "=", "{", "\"config\"", ":", "config", ",", "\"trafos\"", ":", "args", ".", "trafos", ",", "\"scores\"", ":", "scores", "}", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config", "[", "\"log_dir\"", "]", ",", "\"results.pkl\"", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "results", ",", "handle", ")", "\n", "\n", "", "trainer", ".", "save_checkpoint", "(", "os", ".", "path", ".", "join", "(", "config", "[", "\"log_dir\"", "]", ",", "\"checkpoints\"", ",", "\"model.ckpt\"", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "config", "[", "\"log_dir\"", "]", ",", "\"config.txt\"", ")", ",", "\"w\"", ")", "as", "text_file", ":", "\n", "        ", "print", "(", "config", ",", "file", "=", "text_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.cli_main": [[451, 505], ["argparse.ArgumentParser", "custom_simclr_bolts.parse_args", "logger.info", "parse_args.parse_args", "custom_simclr_bolts.pretrain_routine", "ecg_datamodule.ECGDataModule", "pytorch_lightning.Trainer", "models.resnet_simclr.ResNetSimCLR", "custom_simclr_bolts.CustomSimCLR", "custom_simclr_bolts.Projection", "pytorch_lightning.Trainer.fit", "custom_simclr_bolts.aftertrain_routine", "online_evaluator.SSLOnlineEvaluator", "online_evaluator.SSLOnlineEvaluator", "callbacks.append", "callbacks.append", "exists", "eval", "logger.info", "CustomSimCLR.load_from_checkpoint"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.parse_args", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.parse_args", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.pretrain_routine", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.aftertrain_routine"], ["", "", "def", "cli_main", "(", ")", ":", "\n", "    ", "from", "pytorch_lightning", "import", "Trainer", "\n", "from", "online_evaluator", "import", "SSLOnlineEvaluator", "\n", "from", "ecg_datamodule", "import", "ECGDataModule", "\n", "from", "clinical_ts", ".", "create_logger", "import", "create_logger", "\n", "from", "os", ".", "path", "import", "exists", "\n", "\n", "parser", "=", "ArgumentParser", "(", ")", "\n", "parser", "=", "parse_args", "(", "parser", ")", "\n", "logger", ".", "info", "(", "\"parse arguments\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "config", ",", "dataset", ",", "date", ",", "transformations", ",", "t_params", ",", "ptb_num_classes", ",", "tb_logger", "=", "pretrain_routine", "(", "args", ")", "\n", "\n", "# data", "\n", "ecg_datamodule", "=", "ECGDataModule", "(", "config", ",", "transformations", ",", "t_params", ")", "\n", "\n", "callbacks", "=", "[", "]", "\n", "if", "args", ".", "run_callbacks", ":", "\n", "# callback for online linear evaluation/fine-tuning", "\n", "        ", "linear_evaluator", "=", "SSLOnlineEvaluator", "(", "drop_p", "=", "0", ",", "\n", "z_dim", "=", "512", ",", "num_classes", "=", "ptb_num_classes", ",", "hidden_dim", "=", "None", ",", "lin_eval_epochs", "=", "config", "[", "\"eval_epochs\"", "]", ",", "eval_every", "=", "config", "[", "\"eval_every\"", "]", ",", "mode", "=", "\"linear_evaluation\"", ",", "verbose", "=", "False", ")", "\n", "\n", "fine_tuner", "=", "SSLOnlineEvaluator", "(", "drop_p", "=", "0", ",", "\n", "z_dim", "=", "512", ",", "num_classes", "=", "ptb_num_classes", ",", "hidden_dim", "=", "None", ",", "lin_eval_epochs", "=", "config", "[", "\"eval_epochs\"", "]", ",", "eval_every", "=", "config", "[", "\"eval_every\"", "]", ",", "mode", "=", "\"fine_tuning\"", ",", "verbose", "=", "False", ")", "\n", "\n", "callbacks", ".", "append", "(", "linear_evaluator", ")", "\n", "callbacks", ".", "append", "(", "fine_tuner", ")", "\n", "\n", "# configure trainer", "\n", "", "trainer", "=", "Trainer", "(", "logger", "=", "tb_logger", ",", "max_epochs", "=", "config", "[", "\"epochs\"", "]", ",", "gpus", "=", "args", ".", "gpus", ",", "\n", "distributed_backend", "=", "args", ".", "distributed_backend", ",", "auto_lr_find", "=", "False", ",", "num_nodes", "=", "args", ".", "num_nodes", ",", "precision", "=", "config", "[", "\"precision\"", "]", ",", "callbacks", "=", "callbacks", ")", "\n", "\n", "# pytorch lightning module", "\n", "model", "=", "ResNetSimCLR", "(", "**", "config", "[", "\"model\"", "]", ")", "\n", "pl_model", "=", "CustomSimCLR", "(", "\n", "config", "[", "\"batch_size\"", "]", ",", "ecg_datamodule", ".", "num_samples", ",", "warmup_epochs", "=", "config", "[", "\"warm_up\"", "]", ",", "lr", "=", "config", "[", "\"lr\"", "]", ",", "\n", "out_dim", "=", "config", "[", "\"model\"", "]", "[", "\"out_dim\"", "]", ",", "config", "=", "config", ",", "\n", "transformations", "=", "ecg_datamodule", ".", "transformations", ",", "loss_temperature", "=", "config", "[", "\"loss\"", "]", "[", "\"temperature\"", "]", ",", "weight_decay", "=", "eval", "(", "config", "[", "\"weight_decay\"", "]", ")", ")", "\n", "pl_model", ".", "encoder", "=", "model", "\n", "pl_model", ".", "projection", "=", "Projection", "(", "\n", "input_dim", "=", "model", ".", "l1", ".", "in_features", ",", "hidden_dim", "=", "512", ",", "output_dim", "=", "config", "[", "\"model\"", "]", "[", "\"out_dim\"", "]", ")", "\n", "\n", "# load checkpoint", "\n", "if", "args", ".", "checkpoint_path", "!=", "\"\"", ":", "\n", "        ", "if", "exists", "(", "args", ".", "checkpoint_path", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Retrieve checkpoint from \"", "+", "args", ".", "checkpoint_path", ")", "\n", "pl_model", ".", "load_from_checkpoint", "(", "args", ".", "checkpoint_path", ")", "\n", "", "else", ":", "\n", "            ", "raise", "(", "\"checkpoint does not exist\"", ")", "\n", "\n", "# start training", "\n", "", "", "trainer", ".", "fit", "(", "pl_model", ",", "ecg_datamodule", ")", "\n", "\n", "aftertrain_routine", "(", "config", ",", "args", ",", "trainer", ",", "pl_model", ",", "ecg_datamodule", ",", "callbacks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.Flatten.__init__": [[18, 21], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "full", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "full", "=", "full", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "return", "x", ".", "view", "(", "-", "1", ")", "if", "self", ".", "full", "else", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.Flatten.forward": [[21, 22], ["x.view", "x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "return", "x", ".", "view", "(", "-", "1", ")", "if", "self", ".", "full", "else", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.AdaptiveConcatPool1d.__init__": [[77, 82], ["torch.Module.__init__", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveMaxPool1d", "torch.AdaptiveMaxPool1d", "torch.AdaptiveMaxPool1d"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "sz", "=", "None", ")", ":", "\n", "        ", "\"Output will be 2*sz or 2 if sz is None\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "sz", "=", "sz", "or", "1", "\n", "self", ".", "ap", ",", "self", ".", "mp", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "sz", ")", ",", "nn", ".", "AdaptiveMaxPool1d", "(", "sz", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "return", "torch", ".", "cat", "(", "[", "self", ".", "mp", "(", "x", ")", ",", "self", ".", "ap", "(", "x", ")", "]", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.AdaptiveConcatPool1d.forward": [[82, 83], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "basic_conv1d.AdaptiveConcatPool1d.mp", "basic_conv1d.AdaptiveConcatPool1d.ap"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "return", "torch", ".", "cat", "(", "[", "self", ".", "mp", "(", "x", ")", ",", "self", ".", "ap", "(", "x", ")", "]", ",", "1", ")", "\n", "def", "attrib", "(", "self", ",", "relevant", ",", "irrelevant", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.AdaptiveConcatPool1d.attrib": [[83, 85], ["attrib_adaptiveconcatpool"], "methods", ["None"], ["def", "attrib", "(", "self", ",", "relevant", ",", "irrelevant", ")", ":", "\n", "        ", "return", "attrib_adaptiveconcatpool", "(", "self", ",", "relevant", ",", "irrelevant", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.SqueezeExcite1d.__init__": [[90, 95], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "channels_reduced", "=", "channels", "//", "reduction", "\n", "self", ".", "w1", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "channels_reduced", ",", "channels", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "self", ".", "w2", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "channels", ",", "channels_reduced", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.SqueezeExcite1d.forward": [[96, 102], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#input is bs,ch,seq", "\n", "        ", "z", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "#bs,ch", "\n", "intermed", "=", "F", ".", "relu", "(", "torch", ".", "matmul", "(", "self", ".", "w1", ",", "z", ")", ")", "#(1,ch_red,ch * bs,ch,1) = (bs, ch_red, 1)", "\n", "s", "=", "F", ".", "sigmoid", "(", "torch", ".", "matmul", "(", "self", ".", "w2", ",", "intermed", ")", ")", "#(1,ch,ch_red * bs, ch_red, 1=bs, ch, 1", "\n", "return", "s", "*", "x", "#bs,ch,seq * bs, ch,1 = bs,ch,seq", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.basic_conv1d.__init__": [[135, 165], ["isinstance", "range", "layers.append", "torch.Sequential.__init__", "len", "layers_tmp.append", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "basic_conv1d.create_head1d", "len", "basic_conv1d._conv1d", "layers_tmp.append", "layers_tmp.append", "layers_tmp.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "basic_conv1d.Flatten", "basic_conv1d._conv1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "basic_conv1d.SqueezeExcite1d", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.create_head1d", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d._conv1d", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d._conv1d"], ["def", "__init__", "(", "self", ",", "filters", "=", "[", "128", ",", "128", ",", "128", ",", "128", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "dilation", "=", "1", ",", "pool", "=", "0", ",", "pool_stride", "=", "1", ",", "squeeze_excite_reduction", "=", "0", ",", "num_classes", "=", "2", ",", "input_channels", "=", "8", ",", "act", "=", "\"relu\"", ",", "bn", "=", "True", ",", "headless", "=", "False", ",", "split_first_layer", "=", "False", ",", "drop_p", "=", "0.", ",", "lin_ftrs_head", "=", "None", ",", "ps_head", "=", "0.5", ",", "bn_final_head", "=", "False", ",", "bn_head", "=", "True", ",", "act_head", "=", "\"relu\"", ",", "concat_pooling", "=", "True", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "if", "(", "isinstance", "(", "kernel_size", ",", "int", ")", ")", ":", "\n", "            ", "kernel_size", "=", "[", "kernel_size", "]", "*", "len", "(", "filters", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "filters", ")", ")", ":", "\n", "            ", "layers_tmp", "=", "[", "]", "\n", "\n", "layers_tmp", ".", "append", "(", "_conv1d", "(", "input_channels", "if", "i", "==", "0", "else", "filters", "[", "i", "-", "1", "]", ",", "filters", "[", "i", "]", ",", "kernel_size", "=", "kernel_size", "[", "i", "]", ",", "stride", "=", "(", "1", "if", "(", "split_first_layer", "is", "True", "and", "i", "==", "0", ")", "else", "stride", ")", ",", "dilation", "=", "dilation", ",", "act", "=", "\"none\"", "if", "(", "(", "headless", "is", "True", "and", "i", "==", "len", "(", "filters", ")", "-", "1", ")", "or", "(", "split_first_layer", "is", "True", "and", "i", "==", "0", ")", ")", "else", "act", ",", "bn", "=", "False", "if", "(", "headless", "is", "True", "and", "i", "==", "len", "(", "filters", ")", "-", "1", ")", "else", "bn", ",", "drop_p", "=", "(", "0.", "if", "i", "==", "0", "else", "drop_p", ")", ")", ")", "\n", "if", "(", "(", "split_first_layer", "is", "True", "and", "i", "==", "0", ")", ")", ":", "\n", "                ", "layers_tmp", ".", "append", "(", "_conv1d", "(", "filters", "[", "0", "]", ",", "filters", "[", "0", "]", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "act", "=", "act", ",", "bn", "=", "bn", ",", "drop_p", "=", "0.", ")", ")", "\n", "#layers_tmp.append(nn.Linear(filters[0],filters[0],bias=not(bn)))", "\n", "#layers_tmp.append(_fc(filters[0],filters[0],act=act,bn=bn))", "\n", "", "if", "(", "pool", ">", "0", "and", "i", "<", "len", "(", "filters", ")", "-", "1", ")", ":", "\n", "                ", "layers_tmp", ".", "append", "(", "nn", ".", "MaxPool1d", "(", "pool", ",", "stride", "=", "pool_stride", ",", "padding", "=", "(", "pool", "-", "1", ")", "//", "2", ")", ")", "\n", "", "if", "(", "squeeze_excite_reduction", ">", "0", ")", ":", "\n", "                ", "layers_tmp", ".", "append", "(", "SqueezeExcite1d", "(", "filters", "[", "i", "]", ",", "squeeze_excite_reduction", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "layers_tmp", ")", ")", "\n", "\n", "#head", "\n", "#layers.append(nn.AdaptiveAvgPool1d(1))", "\n", "#layers.append(nn.Linear(filters[-1],num_classes))", "\n", "#head #inplace=True leads to a runtime error see ReLU+ dropout https://discuss.pytorch.org/t/relu-dropout-inplace/13467/5", "\n", "", "self", ".", "headless", "=", "headless", "\n", "if", "(", "headless", "is", "True", ")", ":", "\n", "            ", "head", "=", "nn", ".", "Sequential", "(", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", ",", "Flatten", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "head", "=", "create_head1d", "(", "filters", "[", "-", "1", "]", ",", "nc", "=", "num_classes", ",", "lin_ftrs", "=", "lin_ftrs_head", ",", "ps", "=", "ps_head", ",", "bn_final", "=", "bn_final_head", ",", "bn", "=", "bn_head", ",", "act", "=", "act_head", ",", "concat_pooling", "=", "concat_pooling", ")", "\n", "", "layers", ".", "append", "(", "head", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.basic_conv1d.get_layer_groups": [[166, 168], ["None"], "methods", ["None"], ["", "def", "get_layer_groups", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", "[", "2", "]", ",", "self", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.basic_conv1d.get_output_layer": [[169, 174], ["None"], "methods", ["None"], ["", "def", "get_output_layer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "headless", "is", "False", ":", "\n", "            ", "return", "self", "[", "-", "1", "]", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.basic_conv1d.set_output_layer": [[175, 178], ["None"], "methods", ["None"], ["", "", "def", "set_output_layer", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "headless", "is", "False", ":", "\n", "            ", "self", "[", "-", "1", "]", "[", "-", "1", "]", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.listify": [[24, 37], ["list", "isinstance", "len", "len", "type", "len", "len", "len", "isinstance", "len"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type"], ["", "def", "listify", "(", "p", "=", "None", ",", "q", "=", "None", ")", ":", "\n", "    ", "\"Make `p` listy and the same length as `q`.\"", "\n", "if", "p", "is", "None", ":", "p", "=", "[", "]", "\n", "elif", "isinstance", "(", "p", ",", "str", ")", ":", "p", "=", "[", "p", "]", "\n", "elif", "not", "isinstance", "(", "p", ",", "Iterable", ")", ":", "p", "=", "[", "p", "]", "\n", "#Rank 0 tensors in PyTorch are Iterable but don't have a length.", "\n", "else", ":", "\n", "        ", "try", ":", "a", "=", "len", "(", "p", ")", "\n", "except", ":", "p", "=", "[", "p", "]", "\n", "", "n", "=", "q", "if", "type", "(", "q", ")", "==", "int", "else", "len", "(", "p", ")", "if", "q", "is", "None", "else", "len", "(", "q", ")", "\n", "if", "len", "(", "p", ")", "==", "1", ":", "p", "=", "p", "*", "n", "\n", "assert", "len", "(", "p", ")", "==", "n", ",", "f'List len mismatch ({len(p)} vs {n})'", "\n", "return", "list", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.bn_drop_lin": [[39, 46], ["layers.append", "layers.append", "torch.Linear", "layers.append", "torch.BatchNorm1d", "torch.Dropout"], "function", ["None"], ["", "def", "bn_drop_lin", "(", "n_in", ",", "n_out", ",", "bn", "=", "True", ",", "p", "=", "0.", ",", "actn", "=", "None", ")", ":", "\n", "    ", "\"Sequence of batchnorm (if `bn`), dropout (with `p`) and linear (`n_in`,`n_out`) layers followed by `actn`.\"", "\n", "layers", "=", "[", "nn", ".", "BatchNorm1d", "(", "n_in", ")", "]", "if", "bn", "else", "[", "]", "\n", "if", "p", "!=", "0", ":", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "p", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "n_in", ",", "n_out", ")", ")", "\n", "if", "actn", "is", "not", "None", ":", "layers", ".", "append", "(", "actn", ")", "\n", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d._conv1d": [[48, 62], ["lst.append", "torch.Sequential", "lst.append", "torch.Conv1d", "lst.append", "lst.append", "lst.append", "lst.append", "torch.Dropout", "torch.BatchNorm1d", "torch.ReLU", "torch.ELU", "torch.PReLU"], "function", ["None"], ["", "def", "_conv1d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "act", "=", "\"relu\"", ",", "bn", "=", "True", ",", "drop_p", "=", "0", ")", ":", "\n", "    ", "lst", "=", "[", "]", "\n", "if", "(", "drop_p", ">", "0", ")", ":", "\n", "        ", "lst", ".", "append", "(", "nn", ".", "Dropout", "(", "drop_p", ")", ")", "\n", "", "lst", ".", "append", "(", "nn", ".", "Conv1d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "dilation", "=", "dilation", ",", "bias", "=", "not", "(", "bn", ")", ")", ")", "\n", "if", "(", "bn", ")", ":", "\n", "        ", "lst", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "out_planes", ")", ")", "\n", "", "if", "(", "act", "==", "\"relu\"", ")", ":", "\n", "        ", "lst", ".", "append", "(", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "", "if", "(", "act", "==", "\"elu\"", ")", ":", "\n", "        ", "lst", ".", "append", "(", "nn", ".", "ELU", "(", "True", ")", ")", "\n", "", "if", "(", "act", "==", "\"prelu\"", ")", ":", "\n", "        ", "lst", ".", "append", "(", "nn", ".", "PReLU", "(", "True", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d._fc": [[63, 74], ["torch.Sequential", "torch.Linear", "lst.append", "lst.append", "lst.append", "lst.append", "torch.BatchNorm1d", "torch.ReLU", "torch.ELU", "torch.PReLU"], "function", ["None"], ["", "def", "_fc", "(", "in_planes", ",", "out_planes", ",", "act", "=", "\"relu\"", ",", "bn", "=", "True", ")", ":", "\n", "    ", "lst", "=", "[", "nn", ".", "Linear", "(", "in_planes", ",", "out_planes", ",", "bias", "=", "not", "(", "bn", ")", ")", "]", "\n", "if", "(", "bn", ")", ":", "\n", "        ", "lst", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "out_planes", ")", ")", "\n", "", "if", "(", "act", "==", "\"relu\"", ")", ":", "\n", "        ", "lst", ".", "append", "(", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "", "if", "(", "act", "==", "\"elu\"", ")", ":", "\n", "        ", "lst", ".", "append", "(", "nn", ".", "ELU", "(", "True", ")", ")", "\n", "", "if", "(", "act", "==", "\"prelu\"", ")", ":", "\n", "        ", "lst", ".", "append", "(", "nn", ".", "PReLU", "(", "True", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.weight_init": [[104, 118], ["isinstance", "isinstance", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "math.sqrt", "torch.init.normal_", "math.sqrt", "torch.init.normal_", "torch.init.zeros_"], "function", ["None"], ["", "", "def", "weight_init", "(", "m", ")", ":", "\n", "    ", "'''call weight initialization for model n via n.appy(weight_init)'''", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "if", "isinstance", "(", "m", ",", "SqueezeExcite1d", ")", ":", "\n", "        ", "stdv1", "=", "math", ".", "sqrt", "(", "2.", "/", "m", ".", "w1", ".", "size", "[", "0", "]", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "w1", ",", "0.", ",", "stdv1", ")", "\n", "stdv2", "=", "math", ".", "sqrt", "(", "1.", "/", "m", ".", "w2", ".", "size", "[", "1", "]", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "w2", ",", "0.", ",", "stdv2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.create_head1d": [[120, 131], ["basic_conv1d.listify", "zip", "torch.Sequential", "len", "basic_conv1d.Flatten", "basic_conv1d.bn_drop_lin", "layers.append", "basic_conv1d.AdaptiveConcatPool1d", "torch.MaxPool1d", "torch.BatchNorm1d", "len", "len", "torch.ReLU", "torch.ELU"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.listify", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.bn_drop_lin"], ["", "", "def", "create_head1d", "(", "nf", ",", "nc", ",", "lin_ftrs", "=", "None", ",", "ps", "=", "0.5", ",", "bn_final", ":", "bool", "=", "False", ",", "bn", ":", "bool", "=", "True", ",", "act", "=", "\"relu\"", ",", "concat_pooling", "=", "True", ")", ":", "\n", "    ", "\"Model head that takes `nf` features, runs through `lin_ftrs`, and about `nc` classes; added bn and act here\"", "\n", "lin_ftrs", "=", "[", "2", "*", "nf", "if", "concat_pooling", "else", "nf", ",", "nc", "]", "if", "lin_ftrs", "is", "None", "else", "[", "2", "*", "nf", "if", "concat_pooling", "else", "nf", "]", "+", "lin_ftrs", "+", "[", "nc", "]", "#was [nf, 512,nc]", "\n", "ps", "=", "listify", "(", "ps", ")", "\n", "if", "len", "(", "ps", ")", "==", "1", ":", "ps", "=", "[", "ps", "[", "0", "]", "/", "2", "]", "*", "(", "len", "(", "lin_ftrs", ")", "-", "2", ")", "+", "ps", "\n", "actns", "=", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "if", "act", "==", "\"relu\"", "else", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "]", "*", "(", "len", "(", "lin_ftrs", ")", "-", "2", ")", "+", "[", "None", "]", "\n", "layers", "=", "[", "AdaptiveConcatPool1d", "(", ")", "if", "concat_pooling", "else", "nn", ".", "MaxPool1d", "(", "2", ")", ",", "Flatten", "(", ")", "]", "\n", "for", "ni", ",", "no", ",", "p", ",", "actn", "in", "zip", "(", "lin_ftrs", "[", ":", "-", "1", "]", ",", "lin_ftrs", "[", "1", ":", "]", ",", "ps", ",", "actns", ")", ":", "\n", "        ", "layers", "+=", "bn_drop_lin", "(", "ni", ",", "no", ",", "bn", ",", "p", ",", "actn", ")", "\n", "", "if", "bn_final", ":", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "lin_ftrs", "[", "-", "1", "]", ",", "momentum", "=", "0.01", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.fcn": [[181, 184], ["basic_conv1d.basic_conv1d"], "function", ["None"], ["", "", "", "def", "fcn", "(", "filters", "=", "[", "128", "]", "*", "5", ",", "num_classes", "=", "2", ",", "input_channels", "=", "8", ",", "**", "kwargs", ")", ":", "\n", "    ", "filters_in", "=", "filters", "+", "[", "num_classes", "]", "\n", "return", "basic_conv1d", "(", "filters", "=", "filters_in", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "pool", "=", "2", ",", "pool_stride", "=", "2", ",", "input_channels", "=", "input_channels", ",", "act", "=", "\"relu\"", ",", "bn", "=", "True", ",", "headless", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.fcn_wang": [[185, 187], ["basic_conv1d.basic_conv1d"], "function", ["None"], ["", "def", "fcn_wang", "(", "num_classes", "=", "2", ",", "input_channels", "=", "8", ",", "lin_ftrs_head", "=", "None", ",", "ps_head", "=", "0.5", ",", "bn_final_head", "=", "False", ",", "bn_head", "=", "True", ",", "act_head", "=", "\"relu\"", ",", "concat_pooling", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "basic_conv1d", "(", "filters", "=", "[", "128", ",", "256", ",", "128", "]", ",", "kernel_size", "=", "[", "8", ",", "5", ",", "3", "]", ",", "stride", "=", "1", ",", "pool", "=", "0", ",", "pool_stride", "=", "2", ",", "num_classes", "=", "num_classes", ",", "input_channels", "=", "input_channels", ",", "act", "=", "\"relu\"", ",", "bn", "=", "True", ",", "lin_ftrs_head", "=", "lin_ftrs_head", ",", "ps_head", "=", "ps_head", ",", "bn_final_head", "=", "bn_final_head", ",", "bn_head", "=", "bn_head", ",", "act_head", "=", "act_head", ",", "concat_pooling", "=", "concat_pooling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.schirrmeister": [[188, 190], ["basic_conv1d.basic_conv1d"], "function", ["None"], ["", "def", "schirrmeister", "(", "num_classes", "=", "2", ",", "input_channels", "=", "8", ",", "kernel_size", "=", "10", ",", "lin_ftrs_head", "=", "None", ",", "ps_head", "=", "0.5", ",", "bn_final_head", "=", "False", ",", "bn_head", "=", "True", ",", "act_head", "=", "\"relu\"", ",", "concat_pooling", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "basic_conv1d", "(", "filters", "=", "[", "25", ",", "50", ",", "100", ",", "200", "]", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "3", ",", "pool", "=", "3", ",", "pool_stride", "=", "1", ",", "num_classes", "=", "num_classes", ",", "input_channels", "=", "input_channels", ",", "act", "=", "\"relu\"", ",", "bn", "=", "True", ",", "headless", "=", "False", ",", "split_first_layer", "=", "True", ",", "drop_p", "=", "0.5", ",", "lin_ftrs_head", "=", "lin_ftrs_head", ",", "ps_head", "=", "ps_head", ",", "bn_final_head", "=", "bn_final_head", ",", "bn_head", "=", "bn_head", ",", "act_head", "=", "act_head", ",", "concat_pooling", "=", "concat_pooling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.sen": [[191, 193], ["basic_conv1d.basic_conv1d"], "function", ["None"], ["", "def", "sen", "(", "filters", "=", "[", "128", "]", "*", "5", ",", "num_classes", "=", "2", ",", "input_channels", "=", "8", ",", "kernel_size", "=", "3", ",", "squeeze_excite_reduction", "=", "16", ",", "drop_p", "=", "0.", ",", "lin_ftrs_head", "=", "None", ",", "ps_head", "=", "0.5", ",", "bn_final_head", "=", "False", ",", "bn_head", "=", "True", ",", "act_head", "=", "\"relu\"", ",", "concat_pooling", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "basic_conv1d", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "2", ",", "pool", "=", "0", ",", "pool_stride", "=", "0", ",", "input_channels", "=", "input_channels", ",", "act", "=", "\"relu\"", ",", "bn", "=", "True", ",", "num_classes", "=", "num_classes", ",", "squeeze_excite_reduction", "=", "squeeze_excite_reduction", ",", "drop_p", "=", "drop_p", ",", "lin_ftrs_head", "=", "lin_ftrs_head", ",", "ps_head", "=", "ps_head", ",", "bn_final_head", "=", "bn_final_head", ",", "bn_head", "=", "bn_head", ",", "act_head", "=", "act_head", ",", "concat_pooling", "=", "concat_pooling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.basic_conv1d.basic1d": [[194, 196], ["basic_conv1d.basic_conv1d"], "function", ["None"], ["", "def", "basic1d", "(", "filters", "=", "[", "128", "]", "*", "5", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "dilation", "=", "1", ",", "pool", "=", "0", ",", "pool_stride", "=", "1", ",", "squeeze_excite_reduction", "=", "0", ",", "num_classes", "=", "2", ",", "input_channels", "=", "8", ",", "act", "=", "\"relu\"", ",", "bn", "=", "True", ",", "headless", "=", "False", ",", "drop_p", "=", "0.", ",", "lin_ftrs_head", "=", "None", ",", "ps_head", "=", "0.5", ",", "bn_final_head", "=", "False", ",", "bn_head", "=", "True", ",", "act_head", "=", "\"relu\"", ",", "concat_pooling", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "basic_conv1d", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "pool", "=", "pool", ",", "pool_stride", "=", "pool_stride", ",", "squeeze_excite_reduction", "=", "squeeze_excite_reduction", ",", "num_classes", "=", "num_classes", ",", "input_channels", "=", "input_channels", ",", "act", "=", "act", ",", "bn", "=", "bn", ",", "headless", "=", "headless", ",", "drop_p", "=", "drop_p", ",", "lin_ftrs_head", "=", "lin_ftrs_head", ",", "ps_head", "=", "ps_head", ",", "bn_final_head", "=", "bn_final_head", ",", "bn_head", "=", "bn_head", ",", "act_head", "=", "act_head", ",", "concat_pooling", "=", "concat_pooling", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.baseline_encoder.Encoder.__init__": [[8, 19], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "\n", "# projection MLP", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "64", ",", "64", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "64", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.baseline_encoder.Encoder.forward": [[20, 44], ["baseline_encoder.Encoder.conv1", "torch.relu", "torch.relu", "torch.relu", "baseline_encoder.Encoder.pool", "baseline_encoder.Encoder.conv2", "torch.relu", "torch.relu", "torch.relu", "baseline_encoder.Encoder.pool", "baseline_encoder.Encoder.conv3", "torch.relu", "torch.relu", "torch.relu", "baseline_encoder.Encoder.pool", "baseline_encoder.Encoder.conv4", "torch.relu", "torch.relu", "torch.relu", "baseline_encoder.Encoder.pool", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "baseline_encoder.Encoder.l1", "torch.relu", "torch.relu", "torch.relu", "baseline_encoder.Encoder.l2"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "\n", "h", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "x", "=", "self", ".", "l1", "(", "h", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "\n", "return", "h", ",", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.resnet_simclr.ResNetSimCLR.__init__": [[9, 34], ["torch.Module.__init__", "resnet_simclr.ResNetSimCLR._get_basemodel", "list", "torchvision.resnet18", "torchvision.resnet50", "xresnet1d.xresnet1d50", "xresnet1d.xresnet1d101", "resnet_simclr.ResNetSimCLR.children", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.resnet_simclr.ResNetSimCLR._get_basemodel", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.xresnet1d50", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.xresnet1d101"], ["    ", "def", "__init__", "(", "self", ",", "base_model", ",", "out_dim", ",", "widen", "=", "1.0", ",", "hidden", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNetSimCLR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resnet_dict", "=", "{", "\"resnet18\"", ":", "models", ".", "resnet18", "(", "pretrained", "=", "False", ")", ",", "\n", "\"resnet50\"", ":", "models", ".", "resnet50", "(", "pretrained", "=", "False", ")", ",", "\n", "\"xresnet1d50\"", ":", "xresnet1d50", "(", "widen", "=", "widen", ")", ",", "\n", "\"xresnet1d101\"", ":", "xresnet1d101", "(", "widen", "=", "widen", ")", "}", "\n", "\n", "resnet", "=", "self", ".", "_get_basemodel", "(", "base_model", ")", "\n", "self", ".", "base_model", "=", "base_model", "\n", "\n", "list_of_modules", "=", "list", "(", "resnet", ".", "children", "(", ")", ")", "\n", "if", "\"xresnet\"", "in", "base_model", ":", "\n", "            ", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "list_of_modules", "[", ":", "-", "1", "]", ",", "list_of_modules", "[", "-", "1", "]", "[", "0", "]", ")", "\n", "num_ftrs", "=", "resnet", "[", "-", "1", "]", "[", "-", "1", "]", ".", "in_features", "\n", "resnet", "[", "0", "]", "[", "0", "]", "=", "nn", ".", "Conv1d", "(", "12", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "list_of_modules", "[", ":", "-", "1", "]", ")", "\n", "num_ftrs", "=", "resnet", ".", "fc", ".", "in_features", "\n", "\n", "# projection MLP", "\n", "", "if", "hidden", ":", "\n", "            ", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "num_ftrs", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "out_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.resnet_simclr.ResNetSimCLR._get_basemodel": [[35, 41], ["None"], "methods", ["None"], ["", "", "def", "_get_basemodel", "(", "self", ",", "model_name", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "model", "=", "self", ".", "resnet_dict", "[", "model_name", "]", "\n", "return", "model", "\n", "", "except", ":", "\n", "            ", "raise", "(", "\"Invalid model name. Check the config file and pass one of: resnet18 or resnet50\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.resnet_simclr.ResNetSimCLR.forward": [[42, 50], ["resnet_simclr.ResNetSimCLR.features", "h.squeeze.squeeze.squeeze", "resnet_simclr.ResNetSimCLR.l1", "torch.relu", "torch.relu", "resnet_simclr.ResNetSimCLR.l2"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.squeeze"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "features", "(", "x", ")", "\n", "h", "=", "h", ".", "squeeze", "(", ")", "\n", "\n", "x", "=", "self", ".", "l1", "(", "h", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "return", "h", ",", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.ConvLayer.__init__": [[73, 92], ["xresnet1d._conv_func", "xresnet1d.init_default", "torch.Sequential.__init__", "_conv_func.", "weight_norm", "act_bn.append", "act_bn.append", "act_bn.append", "act_bn.reverse", "layers.append", "spectral_norm", "act_cls", "xresnet1d.BatchNorm", "InstanceNorm"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._conv_func", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.init_default", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.BatchNorm"], ["def", "__init__", "(", "self", ",", "ni", ",", "nf", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "None", ",", "bias", "=", "None", ",", "ndim", "=", "2", ",", "norm_type", "=", "NormType", ".", "Batch", ",", "bn_1st", "=", "True", ",", "\n", "act_cls", "=", "nn", ".", "ReLU", ",", "transpose", "=", "False", ",", "init", "=", "nn", ".", "init", ".", "kaiming_normal_", ",", "xtra", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "padding", "is", "None", ":", "padding", "=", "(", "(", "ks", "-", "1", ")", "//", "2", "if", "not", "transpose", "else", "0", ")", "\n", "bn", "=", "norm_type", "in", "(", "NormType", ".", "Batch", ",", "NormType", ".", "BatchZero", ")", "\n", "inn", "=", "norm_type", "in", "(", "NormType", ".", "Instance", ",", "NormType", ".", "InstanceZero", ")", "\n", "if", "bias", "is", "None", ":", "bias", "=", "not", "(", "bn", "or", "inn", ")", "\n", "conv_func", "=", "_conv_func", "(", "ndim", ",", "transpose", "=", "transpose", ")", "\n", "conv", "=", "init_default", "(", "conv_func", "(", "ni", ",", "nf", ",", "kernel_size", "=", "ks", ",", "bias", "=", "bias", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "**", "kwargs", ")", ",", "init", ")", "\n", "if", "norm_type", "==", "NormType", ".", "Weight", ":", "conv", "=", "weight_norm", "(", "conv", ")", "\n", "elif", "norm_type", "==", "NormType", ".", "Spectral", ":", "conv", "=", "spectral_norm", "(", "conv", ")", "\n", "layers", "=", "[", "conv", "]", "\n", "act_bn", "=", "[", "]", "\n", "if", "act_cls", "is", "not", "None", ":", "act_bn", ".", "append", "(", "act_cls", "(", ")", ")", "\n", "if", "bn", ":", "act_bn", ".", "append", "(", "BatchNorm", "(", "nf", ",", "norm_type", "=", "norm_type", ",", "ndim", "=", "ndim", ")", ")", "\n", "if", "inn", ":", "act_bn", ".", "append", "(", "InstanceNorm", "(", "nf", ",", "norm_type", "=", "norm_type", ",", "ndim", "=", "ndim", ")", ")", "\n", "if", "bn_1st", ":", "act_bn", ".", "reverse", "(", ")", "\n", "layers", "+=", "act_bn", "\n", "if", "xtra", ":", "layers", ".", "append", "(", "xtra", ")", "\n", "super", "(", ")", ".", "__init__", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.ResBlock.__init__": [[112, 140], ["xresnet1d.delegates", "torch.Module.__init__", "dict", "dict", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "convpath.append", "convpath.append", "idpath.append", "idpath.insert", "torch.ReLU", "torch.ReLU", "torch.ReLU", "act_cls", "xresnet1d.ConvLayer", "xresnet1d.ConvLayer", "xresnet1d.ConvLayer", "xresnet1d.ConvLayer", "xresnet1d.ConvLayer", "SEModule", "SimpleSelfAttention", "xresnet1d.ConvLayer", "pool"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.delegates", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["@", "delegates", "(", "ConvLayer", ".", "__init__", ")", "\n", "def", "__init__", "(", "self", ",", "expansion", ",", "ni", ",", "nf", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "groups", "=", "1", ",", "reduction", "=", "None", ",", "nh1", "=", "None", ",", "nh2", "=", "None", ",", "dw", "=", "False", ",", "g2", "=", "1", ",", "\n", "sa", "=", "False", ",", "sym", "=", "False", ",", "norm_type", "=", "NormType", ".", "Batch", ",", "act_cls", "=", "nn", ".", "ReLU", ",", "ndim", "=", "2", ",", "\n", "pool", "=", "AvgPool", ",", "pool_first", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "norm2", "=", "(", "NormType", ".", "BatchZero", "if", "norm_type", "==", "NormType", ".", "Batch", "else", "\n", "NormType", ".", "InstanceZero", "if", "norm_type", "==", "NormType", ".", "Instance", "else", "norm_type", ")", "\n", "if", "nh2", "is", "None", ":", "nh2", "=", "nf", "\n", "if", "nh1", "is", "None", ":", "nh1", "=", "nh2", "\n", "nf", ",", "ni", "=", "nf", "*", "expansion", ",", "ni", "*", "expansion", "\n", "k0", "=", "dict", "(", "norm_type", "=", "norm_type", ",", "act_cls", "=", "act_cls", ",", "ndim", "=", "ndim", ",", "**", "kwargs", ")", "\n", "k1", "=", "dict", "(", "norm_type", "=", "norm2", ",", "act_cls", "=", "None", ",", "ndim", "=", "ndim", ",", "**", "kwargs", ")", "\n", "layers", "=", "[", "ConvLayer", "(", "ni", ",", "nh2", ",", "kernel_size", ",", "stride", "=", "stride", ",", "groups", "=", "ni", "if", "dw", "else", "groups", ",", "**", "k0", ")", ",", "\n", "ConvLayer", "(", "nh2", ",", "nf", ",", "kernel_size", ",", "groups", "=", "g2", ",", "**", "k1", ")", "\n", "]", "if", "expansion", "==", "1", "else", "[", "\n", "ConvLayer", "(", "ni", ",", "nh1", ",", "1", ",", "**", "k0", ")", ",", "\n", "ConvLayer", "(", "nh1", ",", "nh2", ",", "kernel_size", ",", "stride", "=", "stride", ",", "groups", "=", "nh1", "if", "dw", "else", "groups", ",", "**", "k0", ")", ",", "\n", "ConvLayer", "(", "nh2", ",", "nf", ",", "1", ",", "groups", "=", "g2", ",", "**", "k1", ")", "]", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "convpath", "=", "[", "self", ".", "convs", "]", "\n", "if", "reduction", ":", "convpath", ".", "append", "(", "SEModule", "(", "nf", ",", "reduction", "=", "reduction", ",", "act_cls", "=", "act_cls", ")", ")", "\n", "if", "sa", ":", "convpath", ".", "append", "(", "SimpleSelfAttention", "(", "nf", ",", "ks", "=", "1", ",", "sym", "=", "sym", ")", ")", "\n", "self", ".", "convpath", "=", "nn", ".", "Sequential", "(", "*", "convpath", ")", "\n", "idpath", "=", "[", "]", "\n", "if", "ni", "!=", "nf", ":", "idpath", ".", "append", "(", "ConvLayer", "(", "ni", ",", "nf", ",", "1", ",", "act_cls", "=", "None", ",", "ndim", "=", "ndim", ",", "**", "kwargs", ")", ")", "\n", "if", "stride", "!=", "1", ":", "idpath", ".", "insert", "(", "(", "1", ",", "0", ")", "[", "pool_first", "]", ",", "pool", "(", "2", ",", "ndim", "=", "ndim", ",", "ceil_mode", "=", "True", ")", ")", "\n", "self", ".", "idpath", "=", "nn", ".", "Sequential", "(", "*", "idpath", ")", "\n", "self", ".", "act", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "if", "act_cls", "is", "nn", ".", "ReLU", "else", "act_cls", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.ResBlock.forward": [[141, 142], ["xresnet1d.ResBlock.act", "xresnet1d.ResBlock.convpath", "xresnet1d.ResBlock.idpath"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "return", "self", ".", "act", "(", "self", ".", "convpath", "(", "x", ")", "+", "self", ".", "idpath", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.XResNet1d.__init__": [[153, 176], ["xresnet1d.delegates", "xresnet1d.store_attr", "basic_conv1d.create_head1d", "torch.Sequential.__init__", "xresnet1d.init_cnn", "xresnet1d.ConvLayer", "int", "xresnet1d.XResNet1d._make_layer", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "range", "enumerate", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.delegates", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.store_attr", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.create_head1d", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.init_cnn", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d._make_layer"], ["    ", "@", "delegates", "(", "ResBlock", ")", "\n", "def", "__init__", "(", "self", ",", "block", ",", "expansion", ",", "layers", ",", "p", "=", "0.0", ",", "input_channels", "=", "3", ",", "num_classes", "=", "1000", ",", "stem_szs", "=", "(", "32", ",", "32", ",", "64", ")", ",", "kernel_size", "=", "5", ",", "kernel_size_stem", "=", "5", ",", "\n", "widen", "=", "1.0", ",", "sa", "=", "False", ",", "act_cls", "=", "nn", ".", "ReLU", ",", "lin_ftrs_head", "=", "None", ",", "ps_head", "=", "0.5", ",", "bn_final_head", "=", "False", ",", "bn_head", "=", "True", ",", "act_head", "=", "\"relu\"", ",", "concat_pooling", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "store_attr", "(", "self", ",", "'block,expansion,act_cls'", ")", "\n", "stem_szs", "=", "[", "input_channels", ",", "*", "stem_szs", "]", "\n", "stem", "=", "[", "ConvLayer", "(", "stem_szs", "[", "i", "]", ",", "stem_szs", "[", "i", "+", "1", "]", ",", "ks", "=", "kernel_size_stem", ",", "stride", "=", "2", "if", "i", "==", "0", "else", "1", ",", "act_cls", "=", "act_cls", ",", "ndim", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "\n", "#block_szs = [int(o*widen) for o in [64,128,256,512] +[256]*(len(layers)-4)]", "\n", "block_szs", "=", "[", "int", "(", "o", "*", "widen", ")", "for", "o", "in", "[", "64", ",", "64", ",", "64", ",", "64", "]", "+", "[", "32", "]", "*", "(", "len", "(", "layers", ")", "-", "4", ")", "]", "\n", "block_szs", "=", "[", "64", "//", "expansion", "]", "+", "block_szs", "\n", "blocks", "=", "[", "self", ".", "_make_layer", "(", "ni", "=", "block_szs", "[", "i", "]", ",", "nf", "=", "block_szs", "[", "i", "+", "1", "]", ",", "blocks", "=", "l", ",", "\n", "stride", "=", "1", "if", "i", "==", "0", "else", "2", ",", "kernel_size", "=", "kernel_size", ",", "sa", "=", "sa", "and", "i", "==", "len", "(", "layers", ")", "-", "4", ",", "ndim", "=", "1", ",", "**", "kwargs", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "layers", ")", "]", "\n", "\n", "head", "=", "create_head1d", "(", "block_szs", "[", "-", "1", "]", "*", "expansion", ",", "nc", "=", "num_classes", ",", "lin_ftrs", "=", "lin_ftrs_head", ",", "ps", "=", "ps_head", ",", "bn_final", "=", "bn_final_head", ",", "bn", "=", "bn_head", ",", "act", "=", "act_head", ",", "concat_pooling", "=", "concat_pooling", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "*", "stem", ",", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "*", "blocks", ",", "\n", "head", ",", "\n", ")", "\n", "init_cnn", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.XResNet1d._make_layer": [[177, 182], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "xresnet1d.XResNet1d.block", "range"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "ni", ",", "nf", ",", "blocks", ",", "stride", ",", "kernel_size", ",", "sa", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "*", "[", "self", ".", "block", "(", "self", ".", "expansion", ",", "ni", "if", "i", "==", "0", "else", "nf", ",", "nf", ",", "stride", "=", "stride", "if", "i", "==", "0", "else", "1", ",", "\n", "kernel_size", "=", "kernel_size", ",", "sa", "=", "sa", "and", "i", "==", "(", "blocks", "-", "1", ")", ",", "act_cls", "=", "self", ".", "act_cls", ",", "**", "kwargs", ")", "\n", "for", "i", "in", "range", "(", "blocks", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.XResNet1d.get_layer_groups": [[183, 185], ["None"], "methods", ["None"], ["", "def", "get_layer_groups", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", "[", "3", "]", ",", "self", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.XResNet1d.get_output_layer": [[186, 188], ["None"], "methods", ["None"], ["", "def", "get_output_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", "[", "-", "1", "]", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.XResNet1d.set_output_layer": [[189, 191], ["None"], "methods", ["None"], ["", "def", "set_output_layer", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", "[", "-", "1", "]", "[", "-", "1", "]", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.delegates": [[21, 36], ["inspect.signature", "dict", "dict.pop", "dict.update", "inspect.signature.replace", "inspect.signature().parameters.items", "dict.values", "inspect.signature", "xresnet1d.ConvLayer.__init__"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "delegates", "(", "to", "=", "None", ",", "keep", "=", "False", ")", ":", "\n", "    ", "\"Decorator: replace `**kwargs` in signature with params from `to`\"", "\n", "def", "_f", "(", "f", ")", ":", "\n", "        ", "if", "to", "is", "None", ":", "to_f", ",", "from_f", "=", "f", ".", "__base__", ".", "__init__", ",", "f", ".", "__init__", "\n", "else", ":", "to_f", ",", "from_f", "=", "to", ",", "f", "\n", "sig", "=", "inspect", ".", "signature", "(", "from_f", ")", "\n", "sigd", "=", "dict", "(", "sig", ".", "parameters", ")", "\n", "k", "=", "sigd", ".", "pop", "(", "'kwargs'", ")", "\n", "s2", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "inspect", ".", "signature", "(", "to_f", ")", ".", "parameters", ".", "items", "(", ")", "\n", "if", "v", ".", "default", "!=", "inspect", ".", "Parameter", ".", "empty", "and", "k", "not", "in", "sigd", "}", "\n", "sigd", ".", "update", "(", "s2", ")", "\n", "if", "keep", ":", "sigd", "[", "'kwargs'", "]", "=", "k", "\n", "from_f", ".", "__signature__", "=", "sig", ".", "replace", "(", "parameters", "=", "sigd", ".", "values", "(", ")", ")", "\n", "return", "f", "\n", "", "return", "_f", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.store_attr": [[37, 41], ["re.split", "setattr", "inspect.currentframe"], "function", ["None"], ["", "def", "store_attr", "(", "self", ",", "nms", ")", ":", "\n", "    ", "\"Store params named in comma-separated `nms` from calling context into attrs in `self`\"", "\n", "mod", "=", "inspect", ".", "currentframe", "(", ")", ".", "f_back", ".", "f_locals", "\n", "for", "n", "in", "re", ".", "split", "(", "', *'", ",", "nms", ")", ":", "setattr", "(", "self", ",", "n", ",", "mod", "[", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d._conv_func": [[45, 49], ["getattr"], "function", ["None"], ["def", "_conv_func", "(", "ndim", "=", "2", ",", "transpose", "=", "False", ")", ":", "\n", "    ", "\"Return the proper conv `ndim` function, potentially `transposed`.\"", "\n", "assert", "1", "<=", "ndim", "<=", "3", "\n", "return", "getattr", "(", "nn", ",", "f'Conv{\"Transpose\" if transpose else \"\"}{ndim}d'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.init_default": [[50, 56], ["hasattr", "func", "torch.no_grad", "torch.no_grad", "torch.no_grad", "getattr", "m.bias.fill_"], "function", ["None"], ["", "def", "init_default", "(", "m", ",", "func", "=", "nn", ".", "init", ".", "kaiming_normal_", ")", ":", "\n", "    ", "\"Initialize `m` weights with `func` and set `bias` to 0.\"", "\n", "if", "func", "and", "hasattr", "(", "m", ",", "'weight'", ")", ":", "func", "(", "m", ".", "weight", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "getattr", "(", "m", ",", "'bias'", ",", "None", ")", "is", "not", "None", ":", "m", ".", "bias", ".", "fill_", "(", "0.", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d._get_norm": [[57, 65], ["getattr", "bn.bias.data.fill_", "bn.weight.data.fill_"], "function", ["None"], ["", "def", "_get_norm", "(", "prefix", ",", "nf", ",", "ndim", "=", "2", ",", "zero", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"Norm layer with `nf` features and `ndim` initialized depending on `norm_type`.\"", "\n", "assert", "1", "<=", "ndim", "<=", "3", "\n", "bn", "=", "getattr", "(", "nn", ",", "f\"{prefix}{ndim}d\"", ")", "(", "nf", ",", "**", "kwargs", ")", "\n", "if", "bn", ".", "affine", ":", "\n", "        ", "bn", ".", "bias", ".", "data", ".", "fill_", "(", "1e-3", ")", "\n", "bn", ".", "weight", ".", "data", ".", "fill_", "(", "0.", "if", "zero", "else", "1.", ")", "\n", "", "return", "bn", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.BatchNorm": [[66, 69], ["xresnet1d._get_norm"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._get_norm"], ["", "def", "BatchNorm", "(", "nf", ",", "ndim", "=", "2", ",", "norm_type", "=", "NormType", ".", "Batch", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"BatchNorm layer with `nf` features and `ndim` initialized depending on `norm_type`.\"", "\n", "return", "_get_norm", "(", "'BatchNorm'", ",", "nf", ",", "ndim", ",", "zero", "=", "norm_type", "==", "NormType", ".", "BatchZero", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.AdaptiveAvgPool": [[94, 98], ["getattr"], "function", ["None"], ["", "", "def", "AdaptiveAvgPool", "(", "sz", "=", "1", ",", "ndim", "=", "2", ")", ":", "\n", "    ", "\"nn.AdaptiveAvgPool layer for `ndim`\"", "\n", "assert", "1", "<=", "ndim", "<=", "3", "\n", "return", "getattr", "(", "nn", ",", "f\"AdaptiveAvgPool{ndim}d\"", ")", "(", "sz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.MaxPool": [[99, 103], ["getattr"], "function", ["None"], ["", "def", "MaxPool", "(", "ks", "=", "2", ",", "stride", "=", "None", ",", "padding", "=", "0", ",", "ndim", "=", "2", ",", "ceil_mode", "=", "False", ")", ":", "\n", "    ", "\"nn.MaxPool layer for `ndim`\"", "\n", "assert", "1", "<=", "ndim", "<=", "3", "\n", "return", "getattr", "(", "nn", ",", "f\"MaxPool{ndim}d\"", ")", "(", "ks", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.AvgPool": [[104, 108], ["getattr"], "function", ["None"], ["", "def", "AvgPool", "(", "ks", "=", "2", ",", "stride", "=", "None", ",", "padding", "=", "0", ",", "ndim", "=", "2", ",", "ceil_mode", "=", "False", ")", ":", "\n", "    ", "\"nn.AvgPool layer for `ndim`\"", "\n", "assert", "1", "<=", "ndim", "<=", "3", "\n", "return", "getattr", "(", "nn", ",", "f\"AvgPool{ndim}d\"", ")", "(", "ks", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "ceil_mode", "=", "ceil_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.init_cnn": [[146, 150], ["isinstance", "m.children", "getattr", "torch.init.constant_", "torch.init.kaiming_normal_", "xresnet1d.init_cnn"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.init_cnn"], ["", "def", "init_cnn", "(", "m", ")", ":", "\n", "    ", "if", "getattr", "(", "m", ",", "'bias'", ",", "None", ")", "is", "not", "None", ":", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv1d", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "for", "l", "in", "m", ".", "children", "(", ")", ":", "init_cnn", "(", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d._xresnet1d": [[193, 195], ["xresnet1d.XResNet1d"], "function", ["None"], ["", "", "def", "_xresnet1d", "(", "expansion", ",", "layers", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "XResNet1d", "(", "ResBlock", ",", "expansion", ",", "layers", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.xresnet1d18": [[196, 197], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["", "def", "xresnet1d18", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d34", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.xresnet1d34": [[197, 198], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d34", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d50", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.xresnet1d50": [[198, 199], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d50", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d101", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.xresnet1d101": [[199, 200], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d101", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d152", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.xresnet1d152": [[200, 201], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d152", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d18_deep", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "2", ",", "2", ",", "2", ",", "2", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.xresnet1d18_deep": [[201, 202], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d18_deep", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "2", ",", "2", ",", "2", ",", "2", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d34_deep", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.xresnet1d34_deep": [[202, 203], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d34_deep", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d50_deep", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.xresnet1d50_deep": [[203, 204], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d50_deep", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d18_deeper", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "2", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.xresnet1d18_deeper": [[204, 205], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d18_deeper", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "2", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d34_deeper", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.xresnet1d34_deeper": [[205, 206], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d34_deeper", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d50_deeper", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", ""]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.models.xresnet1d.xresnet1d50_deeper": [[206, 207], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d50_deeper", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "", ""]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.ecg_utils.get_available_channels": [[27, 32], ["range", "sorted", "len", "channel_stoi.keys"], "function", ["None"], ["def", "get_available_channels", "(", "channel_labels", ",", "channel_stoi", ")", ":", "\n", "    ", "if", "(", "channel_stoi", "is", "None", ")", ":", "\n", "        ", "return", "range", "(", "len", "(", "channel_labels", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "sorted", "(", "[", "channel_stoi", "[", "c", "]", "for", "c", "in", "channel_labels", "if", "c", "in", "channel_stoi", ".", "keys", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.ecg_utils.resample_data": [[33, 52], ["int", "c.lower", "numpy.zeros", "enumerate", "len", "skimage.transform.resize().astype", "scipy.ndimage.zoom().astype", "channel_stoi.keys", "skimage.transform.resize().astype", "scipy.ndimage.zoom().astype", "skimage.transform.resize", "scipy.ndimage.zoom", "skimage.transform.resize", "scipy.ndimage.zoom", "len", "len"], "function", ["None"], ["", "", "def", "resample_data", "(", "sigbufs", ",", "channel_labels", ",", "fs", ",", "target_fs", ",", "channels", "=", "8", ",", "channel_stoi", "=", "None", ",", "skimage_transform", "=", "True", ",", "interpolation_order", "=", "3", ")", ":", "\n", "    ", "channel_labels", "=", "[", "c", ".", "lower", "(", ")", "for", "c", "in", "channel_labels", "]", "\n", "#https://github.com/scipy/scipy/issues/7324 zoom issues", "\n", "factor", "=", "target_fs", "/", "fs", "\n", "timesteps_new", "=", "int", "(", "len", "(", "sigbufs", ")", "*", "factor", ")", "\n", "if", "(", "channel_stoi", "is", "not", "None", ")", ":", "\n", "        ", "data", "=", "np", ".", "zeros", "(", "(", "timesteps_new", ",", "channels", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", ",", "cl", "in", "enumerate", "(", "channel_labels", ")", ":", "\n", "            ", "if", "(", "cl", "in", "channel_stoi", ".", "keys", "(", ")", "and", "channel_stoi", "[", "cl", "]", "<", "channels", ")", ":", "\n", "                ", "if", "(", "skimage_transform", ")", ":", "\n", "                    ", "data", "[", ":", ",", "channel_stoi", "[", "cl", "]", "]", "=", "transform", ".", "resize", "(", "sigbufs", "[", ":", ",", "i", "]", ",", "(", "timesteps_new", ",", ")", ",", "order", "=", "interpolation_order", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                    ", "data", "[", ":", ",", "channel_stoi", "[", "cl", "]", "]", "=", "zoom", "(", "sigbufs", "[", ":", ",", "i", "]", ",", "timesteps_new", "/", "len", "(", "sigbufs", ")", ",", "order", "=", "interpolation_order", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "", "", "", "else", ":", "\n", "        ", "if", "(", "skimage_transform", ")", ":", "\n", "            ", "data", "=", "transform", ".", "resize", "(", "sigbufs", ",", "(", "timesteps_new", ",", "channels", ")", ",", "order", "=", "interpolation_order", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "zoom", "(", "sigbufs", ",", "(", "timesteps_new", "/", "len", "(", "sigbufs", ")", ",", "1", ")", ",", "order", "=", "interpolation_order", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.ecg_utils.get_filename_out": [[53, 76], ["filename_out.relative_to", "target_folder_train.mkdir", "filename_out.relative_to", "target_folder_valid.mkdir", "filename_out.relative_to", "target_folder.mkdir"], "function", ["None"], ["", "def", "get_filename_out", "(", "filename_in", ",", "target_folder", "=", "None", ",", "suffix", "=", "\"\"", ")", ":", "\n", "    ", "if", "target_folder", "is", "None", ":", "\n", "#absolute path here", "\n", "        ", "filename_out", "=", "filename_in", ".", "parent", "/", "(", "filename_in", ".", "stem", "+", "suffix", "+", "\".npy\"", ")", "\n", "filename_out_relative", "=", "filename_out", "\n", "", "else", ":", "\n", "        ", "if", "(", "\"train\"", "in", "filename_in", ".", "parts", ")", ":", "\n", "            ", "target_folder_train", "=", "target_folder", "/", "\"train\"", "\n", "# relative path here", "\n", "filename_out", "=", "target_folder_train", "/", "(", "filename_in", ".", "stem", "+", "suffix", "+", "\".npy\"", ")", "\n", "filename_out_relative", "=", "filename_out", ".", "relative_to", "(", "target_folder", ")", "\n", "\n", "target_folder_train", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "", "elif", "(", "\"eval\"", "in", "filename_in", ".", "parts", "or", "\"dev_test\"", "in", "filename_in", ".", "parts", "or", "\"valid\"", "in", "filename_in", ".", "parts", "or", "\"valtest\"", "in", "filename_in", ".", "parts", ")", ":", "\n", "            ", "target_folder_valid", "=", "target_folder", "/", "\"valid\"", "\n", "filename_out", "=", "target_folder_valid", "/", "(", "filename_in", ".", "stem", "+", "suffix", "+", "\".npy\"", ")", "\n", "filename_out_relative", "=", "filename_out", ".", "relative_to", "(", "target_folder", ")", "\n", "target_folder_valid", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "filename_out", "=", "target_folder", "/", "(", "filename_in", ".", "stem", "+", "suffix", "+", "\".npy\"", ")", "\n", "filename_out_relative", "=", "filename_out", ".", "relative_to", "(", "target_folder", ")", "\n", "target_folder", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "", "", "return", "filename_out", ",", "filename_out_relative", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.ecg_utils.prepare_data_ptb_xl": [[77, 142], ["target_root_ptb_xl.mkdir", "pathlib.Path", "pandas.read_csv", "pd.read_csv.scp_codes.apply", "pandas.read_csv", "ptb_xl_label_df.set_index.set_index", "ptb_xl_label_diag.iterrows", "pd.read_csv.scp_codes.apply", "pd.read_csv.scp_codes.apply", "pd.read_csv.scp_codes.apply", "pd.read_csv.scp_codes.apply", "pd.read_csv.label_diag.apply", "pd.read_csv.label_diag.apply", "ecg_utils.filter_ptb_xl", "tqdm.auto.tqdm", "timeseries_utils.dataset_add_mean_col", "timeseries_utils.dataset_add_std_col", "timeseries_utils.dataset_add_length_col", "timeseries_utils.dataset_get_stats", "timeseries_utils.save_dataset", "timeseries_utils.load_dataset", "isinstance", "isinstance", "list", "wfdb.rdsamp", "ecg_utils.resample_data", "numpy.save", "filenames.append", "eval", "pd.read_csv.iterrows", "str", "pathlib.Path", "x.replace", "x.keys", "x.keys", "x.keys", "x.keys"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.ecg_utils.filter_ptb_xl", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_add_mean_col", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_add_std_col", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_add_length_col", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_get_stats", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.save_dataset", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.load_dataset", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.ecg_utils.resample_data"], ["", "def", "prepare_data_ptb_xl", "(", "data_path", ",", "min_cnt", "=", "50", ",", "target_fs", "=", "100", ",", "channels", "=", "8", ",", "channel_stoi", "=", "channel_stoi_default", ",", "target_folder", "=", "None", ",", "skimage_transform", "=", "True", ",", "recreate_data", "=", "True", ")", ":", "\n", "    ", "target_root_ptb_xl", "=", "Path", "(", "\".\"", ")", "if", "target_folder", "is", "None", "else", "target_folder", "\n", "#print(target_root_ptb_xl)", "\n", "target_root_ptb_xl", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "(", "recreate_data", "is", "True", ")", ":", "\n", "# reading df", "\n", "        ", "ptb_xl_csv", "=", "data_path", "/", "\"ptbxl_database.csv\"", "\n", "df_ptb_xl", "=", "pd", ".", "read_csv", "(", "ptb_xl_csv", ",", "index_col", "=", "\"ecg_id\"", ")", "\n", "#print(df_ptb_xl.columns)", "\n", "df_ptb_xl", ".", "scp_codes", "=", "df_ptb_xl", ".", "scp_codes", ".", "apply", "(", "lambda", "x", ":", "eval", "(", "x", ".", "replace", "(", "\"nan\"", ",", "\"np.nan\"", ")", ")", ")", "\n", "\n", "# preparing labels", "\n", "ptb_xl_label_df", "=", "pd", ".", "read_csv", "(", "data_path", "/", "\"scp_statements.csv\"", ")", "\n", "ptb_xl_label_df", "=", "ptb_xl_label_df", ".", "set_index", "(", "ptb_xl_label_df", ".", "columns", "[", "0", "]", ")", "\n", "\n", "ptb_xl_label_diag", "=", "ptb_xl_label_df", "[", "ptb_xl_label_df", ".", "diagnostic", ">", "0", "]", "\n", "ptb_xl_label_form", "=", "ptb_xl_label_df", "[", "ptb_xl_label_df", ".", "form", ">", "0", "]", "\n", "ptb_xl_label_rhythm", "=", "ptb_xl_label_df", "[", "ptb_xl_label_df", ".", "rhythm", ">", "0", "]", "\n", "\n", "diag_class_mapping", "=", "{", "}", "\n", "diag_subclass_mapping", "=", "{", "}", "\n", "for", "id", ",", "row", "in", "ptb_xl_label_diag", ".", "iterrows", "(", ")", ":", "\n", "            ", "if", "(", "isinstance", "(", "row", "[", "\"diagnostic_class\"", "]", ",", "str", ")", ")", ":", "\n", "                ", "diag_class_mapping", "[", "id", "]", "=", "row", "[", "\"diagnostic_class\"", "]", "\n", "", "if", "(", "isinstance", "(", "row", "[", "\"diagnostic_subclass\"", "]", ",", "str", ")", ")", ":", "\n", "                ", "diag_subclass_mapping", "[", "id", "]", "=", "row", "[", "\"diagnostic_subclass\"", "]", "\n", "\n", "", "", "df_ptb_xl", "[", "\"label_all\"", "]", "=", "df_ptb_xl", ".", "scp_codes", ".", "apply", "(", "lambda", "x", ":", "[", "y", "for", "y", "in", "x", ".", "keys", "(", ")", "]", ")", "\n", "df_ptb_xl", "[", "\"label_diag\"", "]", "=", "df_ptb_xl", ".", "scp_codes", ".", "apply", "(", "lambda", "x", ":", "[", "y", "for", "y", "in", "x", ".", "keys", "(", ")", "if", "y", "in", "ptb_xl_label_diag", ".", "index", "]", ")", "\n", "df_ptb_xl", "[", "\"label_form\"", "]", "=", "df_ptb_xl", ".", "scp_codes", ".", "apply", "(", "lambda", "x", ":", "[", "y", "for", "y", "in", "x", ".", "keys", "(", ")", "if", "y", "in", "ptb_xl_label_form", ".", "index", "]", ")", "\n", "df_ptb_xl", "[", "\"label_rhythm\"", "]", "=", "df_ptb_xl", ".", "scp_codes", ".", "apply", "(", "lambda", "x", ":", "[", "y", "for", "y", "in", "x", ".", "keys", "(", ")", "if", "y", "in", "ptb_xl_label_rhythm", ".", "index", "]", ")", "\n", "\n", "df_ptb_xl", "[", "\"label_diag_subclass\"", "]", "=", "df_ptb_xl", ".", "label_diag", ".", "apply", "(", "lambda", "x", ":", "[", "diag_subclass_mapping", "[", "y", "]", "for", "y", "in", "x", "if", "y", "in", "diag_subclass_mapping", "]", ")", "\n", "df_ptb_xl", "[", "\"label_diag_superclass\"", "]", "=", "df_ptb_xl", ".", "label_diag", ".", "apply", "(", "lambda", "x", ":", "[", "diag_class_mapping", "[", "y", "]", "for", "y", "in", "x", "if", "y", "in", "diag_class_mapping", "]", ")", "\n", "\n", "df_ptb_xl", "[", "\"dataset\"", "]", "=", "\"ptb_xl\"", "\n", "#filter (can be reapplied at any time)", "\n", "df_ptb_xl", ",", "lbl_itos_ptb_xl", "=", "filter_ptb_xl", "(", "df_ptb_xl", ",", "min_cnt", "=", "min_cnt", ")", "\n", "\n", "filenames", "=", "[", "]", "\n", "for", "id", ",", "row", "in", "tqdm", "(", "list", "(", "df_ptb_xl", ".", "iterrows", "(", ")", ")", ")", ":", "\n", "            ", "filename", "=", "data_path", "/", "row", "[", "\"filename_lr\"", "]", "if", "target_fs", "<=", "100", "else", "data_path", "/", "row", "[", "\"filename_hr\"", "]", "\n", "sigbufs", ",", "header", "=", "wfdb", ".", "rdsamp", "(", "str", "(", "filename", ")", ")", "\n", "data", "=", "resample_data", "(", "sigbufs", "=", "sigbufs", ",", "channel_stoi", "=", "channel_stoi", ",", "channel_labels", "=", "header", "[", "'sig_name'", "]", ",", "fs", "=", "header", "[", "'fs'", "]", ",", "target_fs", "=", "target_fs", ",", "channels", "=", "channels", ",", "skimage_transform", "=", "skimage_transform", ")", "\n", "assert", "(", "target_fs", "<=", "header", "[", "'fs'", "]", ")", "\n", "np", ".", "save", "(", "target_root_ptb_xl", "/", "(", "filename", ".", "stem", "+", "\".npy\"", ")", ",", "data", ")", "\n", "filenames", ".", "append", "(", "Path", "(", "filename", ".", "stem", "+", "\".npy\"", ")", ")", "\n", "", "df_ptb_xl", "[", "\"data\"", "]", "=", "filenames", "\n", "\n", "#add means and std", "\n", "dataset_add_mean_col", "(", "df_ptb_xl", ",", "data_folder", "=", "target_root_ptb_xl", ")", "\n", "dataset_add_std_col", "(", "df_ptb_xl", ",", "data_folder", "=", "target_root_ptb_xl", ")", "\n", "dataset_add_length_col", "(", "df_ptb_xl", ",", "data_folder", "=", "target_root_ptb_xl", ")", "\n", "#dataset_add_median_col(df_ptb_xl,data_folder=target_root_ptb_xl)", "\n", "#dataset_add_iqr_col(df_ptb_xl,data_folder=target_root_ptb_xl)", "\n", "\n", "#save means and stds", "\n", "mean_ptb_xl", ",", "std_ptb_xl", "=", "dataset_get_stats", "(", "df_ptb_xl", ")", "\n", "\n", "#save", "\n", "save_dataset", "(", "df_ptb_xl", ",", "lbl_itos_ptb_xl", ",", "mean_ptb_xl", ",", "std_ptb_xl", ",", "target_root_ptb_xl", ")", "\n", "", "else", ":", "\n", "        ", "df_ptb_xl", ",", "lbl_itos_ptb_xl", ",", "mean_ptb_xl", ",", "std_ptb_xl", "=", "load_dataset", "(", "target_root_ptb_xl", ",", "df_mapped", "=", "False", ")", "\n", "", "return", "df_ptb_xl", ",", "lbl_itos_ptb_xl", ",", "mean_ptb_xl", ",", "std_ptb_xl", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.ecg_utils.filter_ptb_xl": [[143, 157], ["df.copy", "numpy.unique", "list", "ecg_utils.filter_ptb_xl.select_labels"], "function", ["None"], ["", "def", "filter_ptb_xl", "(", "df", ",", "min_cnt", "=", "10", ",", "categories", "=", "[", "\"label_all\"", ",", "\"label_diag\"", ",", "\"label_form\"", ",", "\"label_rhythm\"", ",", "\"label_diag_subclass\"", ",", "\"label_diag_superclass\"", "]", ")", ":", "\n", "#filter labels", "\n", "    ", "def", "select_labels", "(", "labels", ",", "min_cnt", "=", "10", ")", ":", "\n", "        ", "lbl", ",", "cnt", "=", "np", ".", "unique", "(", "[", "item", "for", "sublist", "in", "list", "(", "labels", ")", "for", "item", "in", "sublist", "]", ",", "return_counts", "=", "True", ")", "\n", "return", "list", "(", "lbl", "[", "np", ".", "where", "(", "cnt", ">=", "min_cnt", ")", "[", "0", "]", "]", ")", "\n", "", "df_ptb_xl", "=", "df", ".", "copy", "(", ")", "\n", "lbl_itos_ptb_xl", "=", "{", "}", "\n", "for", "selection", "in", "categories", ":", "\n", "        ", "label_selected", "=", "select_labels", "(", "df_ptb_xl", "[", "selection", "]", ",", "min_cnt", "=", "min_cnt", ")", "\n", "df_ptb_xl", "[", "selection", "+", "\"_filtered\"", "]", "=", "df_ptb_xl", "[", "selection", "]", ".", "apply", "(", "lambda", "x", ":", "[", "y", "for", "y", "in", "x", "if", "y", "in", "label_selected", "]", ")", "\n", "lbl_itos_ptb_xl", "[", "selection", "]", "=", "np", ".", "array", "(", "list", "(", "set", "(", "[", "x", "for", "sublist", "in", "df_ptb_xl", "[", "selection", "+", "\"_filtered\"", "]", "for", "x", "in", "sublist", "]", ")", ")", ")", "\n", "lbl_stoi", "=", "{", "s", ":", "i", "for", "i", ",", "s", "in", "enumerate", "(", "lbl_itos_ptb_xl", "[", "selection", "]", ")", "}", "\n", "df_ptb_xl", "[", "selection", "+", "\"_filtered_numeric\"", "]", "=", "df_ptb_xl", "[", "selection", "+", "\"_filtered\"", "]", ".", "apply", "(", "lambda", "x", ":", "[", "lbl_stoi", "[", "y", "]", "for", "y", "in", "x", "]", ")", "\n", "", "return", "df_ptb_xl", ",", "lbl_itos_ptb_xl", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.ecg_utils.prepare_data_cinc": [[160, 231], ["target_root.mkdir", "pathlib.Path", "pandas.concat", "tqdm.auto.tqdm", "pandas.DataFrame", "numpy.unique", "df[].apply", "numpy.unique", "timeseries_utils.dataset_add_mean_col", "timeseries_utils.dataset_add_std_col", "timeseries_utils.dataset_add_length_col", "timeseries_utils.dataset_get_stats", "timeseries_utils.save_dataset", "timeseries_utils.load_dataset", "list", "wfdb.rdsamp", "numpy.any", "ecg_utils.resample_data", "numpy.save", "metadata.append", "print", "numpy.array", "numpy.unique", "stratify.stratify", "enumerate", "pandas.read_csv", "pandas.read_csv", "list", "data_path.glob", "numpy.isnan", "print", "l.strip().split", "l.startswith", "enumerate", "list", "pd.concat.apply", "str", "str", "l.startswith", "pathlib.Path", "list", "l.strip", "l.startswith", "list", "arrs[].split", "int", "arrs[].strip().lower", "int", "arrs[].strip"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_add_mean_col", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_add_std_col", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_add_length_col", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_get_stats", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.save_dataset", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.load_dataset", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.ecg_utils.resample_data", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.stratify.stratify"], ["", "def", "prepare_data_cinc", "(", "data_path", ",", "datasets", "=", "[", "\"ICBEB2018\"", ",", "\"ICBEB2018_2\"", ",", "\"INCART\"", ",", "\"PTB\"", ",", "\"PTB-XL\"", ",", "\"Georgia\"", "]", ",", "target_fs", "=", "100", ",", "strat_folds", "=", "10", ",", "channels", "=", "8", ",", "channel_stoi", "=", "channel_stoi_default", ",", "target_folder", "=", "None", ",", "skimage_transform", "=", "True", ",", "recreate_data", "=", "True", ")", ":", "\n", "    ", "'''unzip archives into separate folders with dataset names from above'''", "\n", "target_root", "=", "Path", "(", "\".\"", ")", "if", "target_folder", "is", "None", "else", "target_folder", "\n", "target_root", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "(", "recreate_data", "is", "True", ")", ":", "\n", "        ", "dx_meta", "=", "pd", ".", "concat", "(", "[", "pd", ".", "read_csv", "(", "data_path", "/", "\"dx_mapping_scored.csv\"", ")", ",", "pd", ".", "read_csv", "(", "data_path", "/", "\"dx_mapping_unscored.csv\"", ")", "]", ",", "sort", "=", "True", ")", "\n", "dx_mapping_snomed_abbrev", "=", "{", "a", ":", "b", "for", "[", "a", ",", "b", "]", "in", "list", "(", "dx_meta", ".", "apply", "(", "lambda", "row", ":", "[", "row", "[", "\"SNOMED CT Code\"", "]", ",", "row", "[", "\"Abbreviation\"", "]", "]", ",", "axis", "=", "1", ")", ")", "}", "\n", "\n", "metadata", "=", "[", "]", "\n", "for", "filename", "in", "tqdm", "(", "list", "(", "data_path", ".", "glob", "(", "'**/*.hea'", ")", ")", ")", ":", "\n", "            ", "if", "(", "not", "(", "filename", ".", "parts", "[", "-", "2", "]", "in", "datasets", ")", ")", ":", "\n", "                ", "continue", "\n", "", "sigbufs", ",", "header", "=", "wfdb", ".", "rdsamp", "(", "str", "(", "filename", ")", "[", ":", "-", "4", "]", ")", "\n", "#print(filename,sigbufs.shape,np.min(sigbufs,axis=0),np.any(np.isnan(sigbufs)))", "\n", "if", "(", "np", ".", "any", "(", "np", ".", "isnan", "(", "sigbufs", ")", ")", ")", ":", "\n", "                ", "print", "(", "\"Warning:\"", ",", "str", "(", "filename", ")", ",", "\"is corrupt. Skipping.\"", ")", "\n", "continue", "\n", "", "data", "=", "resample_data", "(", "sigbufs", "=", "sigbufs", ",", "channel_stoi", "=", "channel_stoi", ",", "channel_labels", "=", "header", "[", "'sig_name'", "]", ",", "fs", "=", "header", "[", "'fs'", "]", ",", "target_fs", "=", "target_fs", ",", "channels", "=", "channels", ",", "skimage_transform", "=", "skimage_transform", ")", "\n", "assert", "(", "target_fs", "<=", "header", "[", "'fs'", "]", ")", "\n", "np", ".", "save", "(", "target_root", "/", "(", "filename", ".", "stem", "+", "\".npy\"", ")", ",", "data", ")", "\n", "labels", "=", "[", "]", "\n", "age", "=", "np", ".", "nan", "\n", "sex", "=", "\"nan\"", "\n", "for", "l", "in", "header", "[", "\"comments\"", "]", ":", "\n", "                ", "arrs", "=", "l", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "if", "l", ".", "startswith", "(", "'Dx:'", ")", ":", "\n", "                    ", "labels", "=", "[", "dx_mapping_snomed_abbrev", "[", "int", "(", "x", ")", "]", "for", "x", "in", "arrs", "[", "1", "]", ".", "split", "(", "','", ")", "]", "\n", "", "elif", "l", ".", "startswith", "(", "'Age:'", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "age", "=", "int", "(", "arrs", "[", "1", "]", ")", "\n", "", "except", ":", "\n", "                        ", "age", "=", "np", ".", "nan", "\n", "", "", "elif", "l", ".", "startswith", "(", "'Sex:'", ")", ":", "\n", "                    ", "sex", "=", "arrs", "[", "1", "]", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "if", "(", "sex", "==", "\"m\"", ")", ":", "\n", "                        ", "sex", "=", "\"male\"", "\n", "", "elif", "(", "sex", "==", "\"f\"", ")", ":", "\n", "                        ", "sex", "=", "\"female\"", "\n", "\n", "", "", "", "metadata", ".", "append", "(", "{", "\"data\"", ":", "Path", "(", "filename", ".", "stem", "+", "\".npy\"", ")", ",", "\"label\"", ":", "labels", ",", "\"sex\"", ":", "sex", ",", "\"age\"", ":", "age", ",", "\"dataset\"", ":", "\"cinc_\"", "+", "filename", ".", "parts", "[", "-", "2", "]", "}", ")", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "metadata", ")", "\n", "lbl_itos", "=", "np", ".", "unique", "(", "[", "item", "for", "sublist", "in", "list", "(", "df", ".", "label", ")", "for", "item", "in", "sublist", "]", ")", "\n", "lbl_stoi", "=", "{", "s", ":", "i", "for", "i", ",", "s", "in", "enumerate", "(", "lbl_itos", ")", "}", "\n", "df", "[", "\"label\"", "]", "=", "df", "[", "\"label\"", "]", ".", "apply", "(", "lambda", "x", ":", "[", "lbl_stoi", "[", "y", "]", "for", "y", "in", "x", "]", ")", "\n", "\n", "#does not incorporate patient-level split", "\n", "df", "[", "\"strat_fold\"", "]", "=", "-", "1", "\n", "for", "ds", "in", "np", ".", "unique", "(", "df", "[", "\"dataset\"", "]", ")", ":", "\n", "            ", "print", "(", "\"Creating CV folds:\"", ",", "ds", ")", "\n", "dfx", "=", "df", "[", "df", ".", "dataset", "==", "ds", "]", "\n", "idxs", "=", "np", ".", "array", "(", "dfx", ".", "index", ".", "values", ")", "\n", "lbl_itosx", "=", "np", ".", "unique", "(", "[", "item", "for", "sublist", "in", "list", "(", "dfx", ".", "label", ")", "for", "item", "in", "sublist", "]", ")", "\n", "stratified_ids", "=", "stratify", "(", "list", "(", "dfx", "[", "\"label\"", "]", ")", ",", "lbl_itosx", ",", "[", "1.", "/", "strat_folds", "]", "*", "strat_folds", ")", "\n", "\n", "for", "i", ",", "split", "in", "enumerate", "(", "stratified_ids", ")", ":", "\n", "                ", "df", ".", "loc", "[", "idxs", "[", "split", "]", ",", "\"strat_fold\"", "]", "=", "i", "\n", "\n", "#add means and std", "\n", "", "", "dataset_add_mean_col", "(", "df", ",", "data_folder", "=", "target_root", ")", "\n", "dataset_add_std_col", "(", "df", ",", "data_folder", "=", "target_root", ")", "\n", "dataset_add_length_col", "(", "df", ",", "data_folder", "=", "target_root", ")", "\n", "\n", "#save means and stds", "\n", "mean", ",", "std", "=", "dataset_get_stats", "(", "df", ")", "\n", "\n", "#save", "\n", "save_dataset", "(", "df", ",", "lbl_itos", ",", "mean", ",", "std", ",", "target_root", ")", "\n", "", "else", ":", "\n", "        ", "df", ",", "lbl_itos", ",", "mean", ",", "std", "=", "load_dataset", "(", "target_root", ",", "df_mapped", "=", "False", ")", "\n", "", "return", "df", ",", "lbl_itos", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.ecg_utils.prepare_data_zheng": [[232, 295], ["target_root.mkdir", "pathlib.Path", "pandas.read_excel", "pd.read_excel.FileName.apply", "pd.read_excel.Beat.apply", "pd.read_excel.Rhythm.apply", "pd.read_excel.apply", "pd.read_excel.Gender.apply", "pd.read_excel.drop", "numpy.unique", "df[].apply", "numpy.unique", "df[].apply", "numpy.unique", "df[].apply", "tqdm.auto.tqdm", "stratify.stratify", "numpy.array", "enumerate", "timeseries_utils.dataset_add_mean_col", "timeseries_utils.dataset_add_std_col", "timeseries_utils.dataset_add_length_col", "timeseries_utils.dataset_get_stats", "timeseries_utils.save_dataset", "timeseries_utils.load_dataset", "list", "pandas.read_csv", "list", "ecg_utils.resample_data", "numpy.save", "list", "x.split", "x.lower", "enumerate", "enumerate", "enumerate", "pd.read_excel.iterrows", "numpy.array", "list", "list", "list", "x.split"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.stratify.stratify", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_add_mean_col", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_add_std_col", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_add_length_col", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_get_stats", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.save_dataset", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.load_dataset", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.ecg_utils.resample_data"], ["", "def", "prepare_data_zheng", "(", "data_path", ",", "denoised", "=", "False", ",", "target_fs", "=", "100", ",", "strat_folds", "=", "10", ",", "channels", "=", "8", ",", "channel_stoi", "=", "channel_stoi_default", ",", "target_folder", "=", "None", ",", "skimage_transform", "=", "True", ",", "recreate_data", "=", "True", ")", ":", "\n", "    ", "'''prepares the Zheng et al 2020 dataset'''", "\n", "target_root", "=", "Path", "(", "\".\"", ")", "if", "target_folder", "is", "None", "else", "target_folder", "\n", "target_root", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "(", "recreate_data", "is", "True", ")", ":", "\n", "#df_attributes = pd.read_excel(\"./AttributesDictionary.xlsx\")", "\n", "#df_conditions = pd.read_excel(\"./ConditionNames.xlsx\")", "\n", "#df_rhythm = pd.read_excel(\"./RhythmNames.xlsx\")", "\n", "        ", "df", "=", "pd", ".", "read_excel", "(", "data_path", "/", "\"Diagnostics.xlsx\"", ")", "\n", "df", "[", "\"id\"", "]", "=", "df", ".", "FileName", "\n", "df", "[", "\"data\"", "]", "=", "df", ".", "FileName", ".", "apply", "(", "lambda", "x", ":", "x", "+", "\".npy\"", ")", "\n", "df", "[", "\"label_condition_txt\"", "]", "=", "df", ".", "Beat", ".", "apply", "(", "lambda", "x", ":", "[", "y", "for", "y", "in", "x", ".", "split", "(", "\" \"", ")", "if", "x", "!=", "\"NONE\"", "]", ")", "\n", "df", "[", "\"label_rhythm_txt\"", "]", "=", "df", ".", "Rhythm", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", "\" \"", ")", ")", "\n", "df", "[", "\"label_txt\"", "]", "=", "df", ".", "apply", "(", "lambda", "row", ":", "row", "[", "\"label_condition_txt\"", "]", "+", "row", "[", "\"label_rhythm_txt\"", "]", ",", "axis", "=", "1", ")", "\n", "df", "[", "\"sex\"", "]", "=", "df", ".", "Gender", ".", "apply", "(", "lambda", "x", ":", "x", ".", "lower", "(", ")", ")", "\n", "df", "[", "\"age\"", "]", "=", "df", ".", "PatientAge", "\n", "df", ".", "drop", "(", "[", "\"Gender\"", ",", "\"PatientAge\"", ",", "\"Rhythm\"", ",", "\"Beat\"", ",", "\"FileName\"", "]", ",", "inplace", "=", "True", ",", "axis", "=", "1", ")", "\n", "\n", "#map to numerical indices", "\n", "lbl_itos", "=", "{", "}", "\n", "lbl_stoi", "=", "{", "}", "\n", "lbl_itos", "[", "\"all\"", "]", "=", "np", ".", "unique", "(", "[", "item", "for", "sublist", "in", "list", "(", "df", ".", "label_txt", ")", "for", "item", "in", "sublist", "]", ")", "\n", "lbl_stoi", "[", "\"all\"", "]", "=", "{", "s", ":", "i", "for", "i", ",", "s", "in", "enumerate", "(", "lbl_itos", "[", "\"all\"", "]", ")", "}", "\n", "df", "[", "\"label\"", "]", "=", "df", "[", "\"label_txt\"", "]", ".", "apply", "(", "lambda", "x", ":", "[", "lbl_stoi", "[", "\"all\"", "]", "[", "y", "]", "for", "y", "in", "x", "]", ")", "\n", "lbl_itos", "[", "\"condition\"", "]", "=", "np", ".", "unique", "(", "[", "item", "for", "sublist", "in", "list", "(", "df", ".", "label_condition_txt", ")", "for", "item", "in", "sublist", "]", ")", "\n", "lbl_stoi", "[", "\"condition\"", "]", "=", "{", "s", ":", "i", "for", "i", ",", "s", "in", "enumerate", "(", "lbl_itos", "[", "\"condition\"", "]", ")", "}", "\n", "df", "[", "\"label_condition\"", "]", "=", "df", "[", "\"label_condition_txt\"", "]", ".", "apply", "(", "lambda", "x", ":", "[", "lbl_stoi", "[", "\"condition\"", "]", "[", "y", "]", "for", "y", "in", "x", "]", ")", "\n", "lbl_itos", "[", "\"rhythm\"", "]", "=", "np", ".", "unique", "(", "[", "item", "for", "sublist", "in", "list", "(", "df", ".", "label_rhythm_txt", ")", "for", "item", "in", "sublist", "]", ")", "\n", "lbl_stoi", "[", "\"rhythm\"", "]", "=", "{", "s", ":", "i", "for", "i", ",", "s", "in", "enumerate", "(", "lbl_itos", "[", "\"rhythm\"", "]", ")", "}", "\n", "df", "[", "\"label_rhythm\"", "]", "=", "df", "[", "\"label_rhythm_txt\"", "]", ".", "apply", "(", "lambda", "x", ":", "[", "lbl_stoi", "[", "\"rhythm\"", "]", "[", "y", "]", "for", "y", "in", "x", "]", ")", "\n", "df", "[", "\"dataset\"", "]", "=", "\"Zheng2020\"", "\n", "\n", "for", "id", ",", "row", "in", "tqdm", "(", "list", "(", "df", ".", "iterrows", "(", ")", ")", ")", ":", "\n", "            ", "fs", "=", "500.", "\n", "\n", "df_tmp", "=", "pd", ".", "read_csv", "(", "data_path", "/", "(", "\"ECGDataDenoised\"", "if", "denoised", "else", "\"ECGData\"", ")", "/", "(", "row", "[", "\"id\"", "]", "+", "\".csv\"", ")", ")", "\n", "channel_labels", "=", "list", "(", "df_tmp", ".", "columns", ")", "\n", "sigbufs", "=", "np", ".", "array", "(", "df_tmp", ")", "*", "0.001", "#assuming data is given in muV", "\n", "\n", "data", "=", "resample_data", "(", "sigbufs", "=", "sigbufs", ",", "channel_stoi", "=", "channel_stoi", ",", "channel_labels", "=", "channel_labels", ",", "fs", "=", "fs", ",", "target_fs", "=", "target_fs", ",", "channels", "=", "channels", ",", "skimage_transform", "=", "skimage_transform", ")", "\n", "assert", "(", "target_fs", "<=", "fs", ")", "\n", "np", ".", "save", "(", "target_root", "/", "(", "row", "[", "\"id\"", "]", "+", "\".npy\"", ")", ",", "data", ")", "\n", "\n", "", "stratified_ids", "=", "stratify", "(", "list", "(", "df", "[", "\"label_txt\"", "]", ")", ",", "lbl_itos", "[", "\"all\"", "]", ",", "[", "1.", "/", "strat_folds", "]", "*", "strat_folds", ")", "\n", "df", "[", "\"strat_fold\"", "]", "=", "-", "1", "\n", "idxs", "=", "np", ".", "array", "(", "df", ".", "index", ".", "values", ")", "\n", "for", "i", ",", "split", "in", "enumerate", "(", "stratified_ids", ")", ":", "\n", "            ", "df", ".", "loc", "[", "idxs", "[", "split", "]", ",", "\"strat_fold\"", "]", "=", "i", "\n", "\n", "#add means and std", "\n", "", "dataset_add_mean_col", "(", "df", ",", "data_folder", "=", "target_root", ")", "\n", "dataset_add_std_col", "(", "df", ",", "data_folder", "=", "target_root", ")", "\n", "dataset_add_length_col", "(", "df", ",", "data_folder", "=", "target_root", ")", "\n", "\n", "#save means and stds", "\n", "mean", ",", "std", "=", "dataset_get_stats", "(", "df", ")", "\n", "\n", "#save", "\n", "save_dataset", "(", "df", ",", "lbl_itos", ",", "mean", ",", "std", ",", "target_root", ")", "\n", "", "else", ":", "\n", "        ", "df", ",", "lbl_itos", ",", "mean", ",", "std", "=", "load_dataset", "(", "target_root", ",", "df_mapped", "=", "False", ")", "\n", "", "return", "df", ",", "lbl_itos", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.ecg_utils.prepare_data_ribeiro_test": [[296, 367], ["pathlib.Path", "target_root.mkdir", "pathlib.Path", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pd.read_csv.sex.apply", "ecg_utils.prepare_data_ribeiro_test.reformat_predictions"], "function", ["None"], ["", "def", "prepare_data_ribeiro_test", "(", "data_path", ",", "denoised", "=", "False", ",", "target_fs", "=", "100", ",", "strat_folds", "=", "10", ",", "channels", "=", "8", ",", "channel_stoi", "=", "channel_stoi_default", ",", "target_folder", "=", "None", ",", "skimage_transform", "=", "True", ",", "recreate_data", "=", "True", ")", ":", "\n", "    ", "'''prepares test set of Ribeiro et al Nat Comm 2020'''", "\n", "data_path", "=", "Path", "(", "data_path", ")", "\n", "target_root", "=", "Path", "(", "\".\"", ")", "if", "target_folder", "is", "None", "else", "target_folder", "\n", "target_root", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "(", "recreate_data", "is", "True", ")", ":", "\n", "        ", "lbl_itos", "=", "[", "\"1AVB\"", ",", "\"RBBB\"", ",", "\"LBBB\"", ",", "\"SBRAD\"", ",", "\"AFIB\"", ",", "\"STACH\"", "]", "\n", "channel_labels", "=", "[", "\"i\"", ",", "\"ii\"", ",", "\"iii\"", ",", "\"avr\"", ",", "\"avl\"", ",", "\"avf\"", ",", "\"v1\"", ",", "\"v2\"", ",", "\"v3\"", ",", "\"v4\"", ",", "\"v5\"", ",", "\"v6\"", "]", "\n", "fs", "=", "400.", "\n", "#prepare df", "\n", "df_cardiologist1", "=", "pd", ".", "read_csv", "(", "data_path", "/", "\"annotations\"", "/", "\"cardiologist1.csv\"", ")", "\n", "df_cardiologist2", "=", "pd", ".", "read_csv", "(", "data_path", "/", "\"annotations\"", "/", "\"cardiologist2.csv\"", ")", "\n", "df_gold", "=", "pd", ".", "read_csv", "(", "data_path", "/", "\"annotations\"", "/", "\"gold_standard.csv\"", ")", "\n", "df_cardiology_residents", "=", "pd", ".", "read_csv", "(", "data_path", "/", "\"annotations\"", "/", "\"cardiology_residents.csv\"", ")", "\n", "df_dnn", "=", "pd", ".", "read_csv", "(", "data_path", "/", "\"annotations\"", "/", "\"dnn.csv\"", ")", "\n", "df_emergency_residents", "=", "pd", ".", "read_csv", "(", "data_path", "/", "\"annotations\"", "/", "\"emergency_residents.csv\"", ")", "\n", "df_medical_students", "=", "pd", ".", "read_csv", "(", "data_path", "/", "\"annotations\"", "/", "\"medical_students.csv\"", ")", "\n", "df_attributes", "=", "pd", ".", "read_csv", "(", "data_path", "/", "\"attributes.csv\"", ")", "\n", "sex_map", "=", "{", "\"M\"", ":", "\"male\"", ",", "\"F\"", ":", "\"female\"", "}", "\n", "df_attributes", ".", "sex", "=", "df_attributes", ".", "sex", ".", "apply", "(", "lambda", "x", ":", "sex_map", "[", "x", "]", ")", "\n", "\n", "def", "reformat_predictions", "(", "df", ",", "colname_txt", "=", "\"label_txt\"", ",", "colname_num", "=", "\"label\"", ",", "lbl_itos", "=", "[", "\"1AVB\"", ",", "\"RBBB\"", ",", "\"LBBB\"", ",", "\"SBRAD\"", ",", "\"AFIB\"", ",", "\"STACH\"", "]", ")", ":", "\n", "            ", "lbl_stoi", "=", "{", "s", ":", "i", "for", "i", ",", "s", "in", "enumerate", "(", "lbl_itos", ")", "}", "\n", "df", "[", "colname_txt", "]", "=", "df", ".", "apply", "(", "lambda", "row", ":", "(", "\"1AVB \"", "if", "row", "[", "\"1dAVb\"", "]", "else", "\"\"", ")", "+", "(", "\"RBBB \"", "if", "row", "[", "\"RBBB\"", "]", "else", "\"\"", ")", "+", "(", "\"LBBB \"", "if", "row", "[", "\"LBBB\"", "]", "else", "\"\"", ")", "+", "(", "\"SBRAD \"", "if", "row", "[", "\"SB\"", "]", "else", "\"\"", ")", "+", "(", "\"AFIB \"", "if", "row", "[", "\"AF\"", "]", "else", "\"\"", ")", "+", "(", "\"STACH \"", "if", "row", "[", "\"ST\"", "]", "else", "\"\"", ")", ",", "axis", "=", "1", ")", "\n", "df", "[", "colname_txt", "]", "=", "df", "[", "colname_txt", "]", ".", "apply", "(", "lambda", "x", ":", "[", "y", "for", "y", "in", "x", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "if", "y", "!=", "\"\"", "]", ")", "\n", "df", "[", "colname_num", "]", "=", "df", "[", "colname_txt", "]", ".", "apply", "(", "lambda", "x", ":", "[", "lbl_stoi", "[", "y", "]", "for", "y", "in", "x", "if", "y", "in", "lbl_stoi", ".", "keys", "(", ")", "]", ")", "\n", "df", ".", "drop", "(", "[", "\"1dAVb\"", ",", "\"RBBB\"", ",", "\"LBBB\"", ",", "\"SB\"", ",", "\"AF\"", ",", "\"ST\"", "]", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "\n", "", "reformat_predictions", "(", "df_cardiologist1", ",", "\"label_cardiologist1_txt\"", ",", "\"label_cardiologist1\"", ")", "\n", "reformat_predictions", "(", "df_cardiologist2", ",", "\"label_cardiologist2_txt\"", ",", "\"label_cardiologist2\"", ")", "\n", "reformat_predictions", "(", "df_gold", ",", "\"label_txt\"", ",", "\"label\"", ")", "\n", "reformat_predictions", "(", "df_cardiology_residents", ",", "\"label_cardiology_residents_txt\"", ",", "\"label_cardiology_residents\"", ")", "\n", "reformat_predictions", "(", "df_emergency_residents", ",", "\"label_emergency_residents_txt\"", ",", "\"label_emergency_residents\"", ")", "\n", "reformat_predictions", "(", "df_medical_students", ",", "\"label_medical_students_txt\"", ",", "\"label_medical_students\"", ")", "\n", "reformat_predictions", "(", "df_dnn", ",", "\"label_dnn_txt\"", ",", "\"label_dnn\"", ")", "\n", "\n", "df", "=", "df_gold", ".", "join", "(", "[", "df_cardiologist1", ",", "df_cardiologist2", ",", "df_cardiology_residents", ",", "df_emergency_residents", ",", "df_medical_students", ",", "df_dnn", ",", "df_attributes", "]", ")", "\n", "df", "[", "\"data\"", "]", "=", "[", "Path", "(", "\"Ribeiro_test_\"", "+", "str", "(", "i", ")", "+", "\".npy\"", ")", "for", "i", "in", "range", "(", "len", "(", "df", ")", ")", "]", "\n", "df", "[", "\"dataset\"", "]", "=", "\"Ribeiro_test\"", "\n", "#prepare raw data", "\n", "with", "h5py", ".", "File", "(", "data_path", "/", "\"ecg_tracings.hdf5\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "sigbufs", "=", "np", ".", "array", "(", "f", "[", "'tracings'", "]", ")", "\n", "", "start_idxs", "=", "[", "np", ".", "where", "(", "np", ".", "sum", "(", "np", ".", "abs", "(", "sigbufs", "[", "i", "]", ")", ",", "axis", "=", "1", ")", "==", "0.", ")", "[", "0", "]", "for", "i", "in", "range", "(", "len", "(", "sigbufs", ")", ")", "]", "#discard zeros at beginning/end", "\n", "start_idxs", "=", "[", "len", "(", "a", ")", "//", "2", "for", "a", "in", "start_idxs", "]", "\n", "\n", "\n", "for", "id", ",", "row", "in", "tqdm", "(", "list", "(", "df", ".", "iterrows", "(", ")", ")", ")", ":", "\n", "            ", "data", "=", "resample_data", "(", "sigbufs", "=", "sigbufs", "[", "id", "]", "[", "start_idxs", "[", "id", "]", ":", "-", "start_idxs", "[", "id", "]", "or", "None", "]", ",", "channel_stoi", "=", "channel_stoi", ",", "channel_labels", "=", "channel_labels", ",", "fs", "=", "fs", ",", "target_fs", "=", "target_fs", ",", "channels", "=", "channels", ",", "skimage_transform", "=", "skimage_transform", ")", "\n", "assert", "(", "target_fs", "<=", "fs", ")", "\n", "np", ".", "save", "(", "target_root", "/", "(", "row", "[", "\"data\"", "]", ")", ",", "data", ")", "\n", "\n", "", "stratified_ids", "=", "stratify", "(", "list", "(", "df", ".", "apply", "(", "lambda", "row", ":", "row", "[", "\"label_txt\"", "]", "+", "[", "row", "[", "\"sex\"", "]", "]", ",", "axis", "=", "1", ")", ")", ",", "lbl_itos", "+", "[", "\"male\"", ",", "\"female\"", "]", ",", "[", "1.", "/", "strat_folds", "]", "*", "strat_folds", ")", "\n", "df", "[", "\"strat_fold\"", "]", "=", "-", "1", "\n", "idxs", "=", "np", ".", "array", "(", "df", ".", "index", ".", "values", ")", "\n", "for", "i", ",", "split", "in", "enumerate", "(", "stratified_ids", ")", ":", "\n", "            ", "df", ".", "loc", "[", "idxs", "[", "split", "]", ",", "\"strat_fold\"", "]", "=", "i", "\n", "\n", "#add means and std", "\n", "", "dataset_add_mean_col", "(", "df", ",", "data_folder", "=", "target_root", ")", "\n", "dataset_add_std_col", "(", "df", ",", "data_folder", "=", "target_root", ")", "\n", "dataset_add_length_col", "(", "df", ",", "data_folder", "=", "target_root", ")", "\n", "\n", "#save means and stds", "\n", "mean", ",", "std", "=", "dataset_get_stats", "(", "df", ")", "\n", "\n", "#save", "\n", "save_dataset", "(", "df", ",", "lbl_itos", ",", "mean", ",", "std", ",", "target_root", ")", "\n", "", "else", ":", "\n", "        ", "df", ",", "lbl_itos", ",", "mean", ",", "std", "=", "load_dataset", "(", "target_root", ",", "df_mapped", "=", "False", ")", "\n", "", "return", "df", ",", "lbl_itos", ",", "mean", ",", "std", "\n", "", ""]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.Flatten.__init__": [[18, 21], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "full", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "full", "=", "full", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "return", "x", ".", "view", "(", "-", "1", ")", "if", "self", ".", "full", "else", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.Flatten.forward": [[21, 22], ["x.view", "x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "return", "x", ".", "view", "(", "-", "1", ")", "if", "self", ".", "full", "else", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.AdaptiveConcatPool1d.__init__": [[77, 82], ["torch.Module.__init__", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveMaxPool1d", "torch.AdaptiveMaxPool1d", "torch.AdaptiveMaxPool1d"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "sz", "=", "None", ")", ":", "\n", "        ", "\"Output will be 2*sz or 2 if sz is None\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "sz", "=", "sz", "or", "1", "\n", "self", ".", "ap", ",", "self", ".", "mp", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "sz", ")", ",", "nn", ".", "AdaptiveMaxPool1d", "(", "sz", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "return", "torch", ".", "cat", "(", "[", "self", ".", "mp", "(", "x", ")", ",", "self", ".", "ap", "(", "x", ")", "]", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.AdaptiveConcatPool1d.forward": [[82, 83], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "basic_conv1d.AdaptiveConcatPool1d.mp", "basic_conv1d.AdaptiveConcatPool1d.ap"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "return", "torch", ".", "cat", "(", "[", "self", ".", "mp", "(", "x", ")", ",", "self", ".", "ap", "(", "x", ")", "]", ",", "1", ")", "\n", "def", "attrib", "(", "self", ",", "relevant", ",", "irrelevant", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.AdaptiveConcatPool1d.attrib": [[83, 85], ["attrib_adaptiveconcatpool"], "methods", ["None"], ["def", "attrib", "(", "self", ",", "relevant", ",", "irrelevant", ")", ":", "\n", "        ", "return", "attrib_adaptiveconcatpool", "(", "self", ",", "relevant", ",", "irrelevant", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.SqueezeExcite1d.__init__": [[90, 95], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn().unsqueeze", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "channels_reduced", "=", "channels", "//", "reduction", "\n", "self", ".", "w1", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "channels_reduced", ",", "channels", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "self", ".", "w2", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "channels", ",", "channels_reduced", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.SqueezeExcite1d.forward": [[96, 102], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#input is bs,ch,seq", "\n", "        ", "z", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "#bs,ch", "\n", "intermed", "=", "F", ".", "relu", "(", "torch", ".", "matmul", "(", "self", ".", "w1", ",", "z", ")", ")", "#(1,ch_red,ch * bs,ch,1) = (bs, ch_red, 1)", "\n", "s", "=", "F", ".", "sigmoid", "(", "torch", ".", "matmul", "(", "self", ".", "w2", ",", "intermed", ")", ")", "#(1,ch,ch_red * bs, ch_red, 1=bs, ch, 1", "\n", "return", "s", "*", "x", "#bs,ch,seq * bs, ch,1 = bs,ch,seq", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.basic_conv1d.__init__": [[135, 165], ["isinstance", "range", "layers.append", "torch.Sequential.__init__", "len", "layers_tmp.append", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "basic_conv1d.create_head1d", "len", "basic_conv1d._conv1d", "layers_tmp.append", "layers_tmp.append", "layers_tmp.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "basic_conv1d.Flatten", "basic_conv1d._conv1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "basic_conv1d.SqueezeExcite1d", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.create_head1d", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d._conv1d", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d._conv1d"], ["def", "__init__", "(", "self", ",", "filters", "=", "[", "128", ",", "128", ",", "128", ",", "128", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "dilation", "=", "1", ",", "pool", "=", "0", ",", "pool_stride", "=", "1", ",", "squeeze_excite_reduction", "=", "0", ",", "num_classes", "=", "2", ",", "input_channels", "=", "8", ",", "act", "=", "\"relu\"", ",", "bn", "=", "True", ",", "headless", "=", "False", ",", "split_first_layer", "=", "False", ",", "drop_p", "=", "0.", ",", "lin_ftrs_head", "=", "None", ",", "ps_head", "=", "0.5", ",", "bn_final_head", "=", "False", ",", "bn_head", "=", "True", ",", "act_head", "=", "\"relu\"", ",", "concat_pooling", "=", "True", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "if", "(", "isinstance", "(", "kernel_size", ",", "int", ")", ")", ":", "\n", "            ", "kernel_size", "=", "[", "kernel_size", "]", "*", "len", "(", "filters", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "filters", ")", ")", ":", "\n", "            ", "layers_tmp", "=", "[", "]", "\n", "\n", "layers_tmp", ".", "append", "(", "_conv1d", "(", "input_channels", "if", "i", "==", "0", "else", "filters", "[", "i", "-", "1", "]", ",", "filters", "[", "i", "]", ",", "kernel_size", "=", "kernel_size", "[", "i", "]", ",", "stride", "=", "(", "1", "if", "(", "split_first_layer", "is", "True", "and", "i", "==", "0", ")", "else", "stride", ")", ",", "dilation", "=", "dilation", ",", "act", "=", "\"none\"", "if", "(", "(", "headless", "is", "True", "and", "i", "==", "len", "(", "filters", ")", "-", "1", ")", "or", "(", "split_first_layer", "is", "True", "and", "i", "==", "0", ")", ")", "else", "act", ",", "bn", "=", "False", "if", "(", "headless", "is", "True", "and", "i", "==", "len", "(", "filters", ")", "-", "1", ")", "else", "bn", ",", "drop_p", "=", "(", "0.", "if", "i", "==", "0", "else", "drop_p", ")", ")", ")", "\n", "if", "(", "(", "split_first_layer", "is", "True", "and", "i", "==", "0", ")", ")", ":", "\n", "                ", "layers_tmp", ".", "append", "(", "_conv1d", "(", "filters", "[", "0", "]", ",", "filters", "[", "0", "]", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "act", "=", "act", ",", "bn", "=", "bn", ",", "drop_p", "=", "0.", ")", ")", "\n", "#layers_tmp.append(nn.Linear(filters[0],filters[0],bias=not(bn)))", "\n", "#layers_tmp.append(_fc(filters[0],filters[0],act=act,bn=bn))", "\n", "", "if", "(", "pool", ">", "0", "and", "i", "<", "len", "(", "filters", ")", "-", "1", ")", ":", "\n", "                ", "layers_tmp", ".", "append", "(", "nn", ".", "MaxPool1d", "(", "pool", ",", "stride", "=", "pool_stride", ",", "padding", "=", "(", "pool", "-", "1", ")", "//", "2", ")", ")", "\n", "", "if", "(", "squeeze_excite_reduction", ">", "0", ")", ":", "\n", "                ", "layers_tmp", ".", "append", "(", "SqueezeExcite1d", "(", "filters", "[", "i", "]", ",", "squeeze_excite_reduction", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "layers_tmp", ")", ")", "\n", "\n", "#head", "\n", "#layers.append(nn.AdaptiveAvgPool1d(1))", "\n", "#layers.append(nn.Linear(filters[-1],num_classes))", "\n", "#head #inplace=True leads to a runtime error see ReLU+ dropout https://discuss.pytorch.org/t/relu-dropout-inplace/13467/5", "\n", "", "self", ".", "headless", "=", "headless", "\n", "if", "(", "headless", "is", "True", ")", ":", "\n", "            ", "head", "=", "nn", ".", "Sequential", "(", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", ",", "Flatten", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "head", "=", "create_head1d", "(", "filters", "[", "-", "1", "]", ",", "nc", "=", "num_classes", ",", "lin_ftrs", "=", "lin_ftrs_head", ",", "ps", "=", "ps_head", ",", "bn_final", "=", "bn_final_head", ",", "bn", "=", "bn_head", ",", "act", "=", "act_head", ",", "concat_pooling", "=", "concat_pooling", ")", "\n", "", "layers", ".", "append", "(", "head", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.basic_conv1d.get_layer_groups": [[166, 168], ["None"], "methods", ["None"], ["", "def", "get_layer_groups", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", "[", "2", "]", ",", "self", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.basic_conv1d.get_output_layer": [[169, 174], ["None"], "methods", ["None"], ["", "def", "get_output_layer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "headless", "is", "False", ":", "\n", "            ", "return", "self", "[", "-", "1", "]", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.basic_conv1d.set_output_layer": [[175, 178], ["None"], "methods", ["None"], ["", "", "def", "set_output_layer", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "headless", "is", "False", ":", "\n", "            ", "self", "[", "-", "1", "]", "[", "-", "1", "]", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.listify": [[24, 37], ["list", "isinstance", "len", "len", "type", "len", "len", "len", "isinstance", "len"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type"], ["", "def", "listify", "(", "p", "=", "None", ",", "q", "=", "None", ")", ":", "\n", "    ", "\"Make `p` listy and the same length as `q`.\"", "\n", "if", "p", "is", "None", ":", "p", "=", "[", "]", "\n", "elif", "isinstance", "(", "p", ",", "str", ")", ":", "p", "=", "[", "p", "]", "\n", "elif", "not", "isinstance", "(", "p", ",", "Iterable", ")", ":", "p", "=", "[", "p", "]", "\n", "#Rank 0 tensors in PyTorch are Iterable but don't have a length.", "\n", "else", ":", "\n", "        ", "try", ":", "a", "=", "len", "(", "p", ")", "\n", "except", ":", "p", "=", "[", "p", "]", "\n", "", "n", "=", "q", "if", "type", "(", "q", ")", "==", "int", "else", "len", "(", "p", ")", "if", "q", "is", "None", "else", "len", "(", "q", ")", "\n", "if", "len", "(", "p", ")", "==", "1", ":", "p", "=", "p", "*", "n", "\n", "assert", "len", "(", "p", ")", "==", "n", ",", "f'List len mismatch ({len(p)} vs {n})'", "\n", "return", "list", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.bn_drop_lin": [[39, 46], ["layers.append", "layers.append", "torch.Linear", "layers.append", "torch.BatchNorm1d", "torch.Dropout"], "function", ["None"], ["", "def", "bn_drop_lin", "(", "n_in", ",", "n_out", ",", "bn", "=", "True", ",", "p", "=", "0.", ",", "actn", "=", "None", ")", ":", "\n", "    ", "\"Sequence of batchnorm (if `bn`), dropout (with `p`) and linear (`n_in`,`n_out`) layers followed by `actn`.\"", "\n", "layers", "=", "[", "nn", ".", "BatchNorm1d", "(", "n_in", ")", "]", "if", "bn", "else", "[", "]", "\n", "if", "p", "!=", "0", ":", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "p", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "n_in", ",", "n_out", ")", ")", "\n", "if", "actn", "is", "not", "None", ":", "layers", ".", "append", "(", "actn", ")", "\n", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d._conv1d": [[48, 62], ["lst.append", "torch.Sequential", "lst.append", "torch.Conv1d", "lst.append", "lst.append", "lst.append", "lst.append", "torch.Dropout", "torch.BatchNorm1d", "torch.ReLU", "torch.ELU", "torch.PReLU"], "function", ["None"], ["", "def", "_conv1d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "act", "=", "\"relu\"", ",", "bn", "=", "True", ",", "drop_p", "=", "0", ")", ":", "\n", "    ", "lst", "=", "[", "]", "\n", "if", "(", "drop_p", ">", "0", ")", ":", "\n", "        ", "lst", ".", "append", "(", "nn", ".", "Dropout", "(", "drop_p", ")", ")", "\n", "", "lst", ".", "append", "(", "nn", ".", "Conv1d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "dilation", "=", "dilation", ",", "bias", "=", "not", "(", "bn", ")", ")", ")", "\n", "if", "(", "bn", ")", ":", "\n", "        ", "lst", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "out_planes", ")", ")", "\n", "", "if", "(", "act", "==", "\"relu\"", ")", ":", "\n", "        ", "lst", ".", "append", "(", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "", "if", "(", "act", "==", "\"elu\"", ")", ":", "\n", "        ", "lst", ".", "append", "(", "nn", ".", "ELU", "(", "True", ")", ")", "\n", "", "if", "(", "act", "==", "\"prelu\"", ")", ":", "\n", "        ", "lst", ".", "append", "(", "nn", ".", "PReLU", "(", "True", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d._fc": [[63, 74], ["torch.Sequential", "torch.Linear", "lst.append", "lst.append", "lst.append", "lst.append", "torch.BatchNorm1d", "torch.ReLU", "torch.ELU", "torch.PReLU"], "function", ["None"], ["", "def", "_fc", "(", "in_planes", ",", "out_planes", ",", "act", "=", "\"relu\"", ",", "bn", "=", "True", ")", ":", "\n", "    ", "lst", "=", "[", "nn", ".", "Linear", "(", "in_planes", ",", "out_planes", ",", "bias", "=", "not", "(", "bn", ")", ")", "]", "\n", "if", "(", "bn", ")", ":", "\n", "        ", "lst", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "out_planes", ")", ")", "\n", "", "if", "(", "act", "==", "\"relu\"", ")", ":", "\n", "        ", "lst", ".", "append", "(", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "", "if", "(", "act", "==", "\"elu\"", ")", ":", "\n", "        ", "lst", ".", "append", "(", "nn", ".", "ELU", "(", "True", ")", ")", "\n", "", "if", "(", "act", "==", "\"prelu\"", ")", ":", "\n", "        ", "lst", ".", "append", "(", "nn", ".", "PReLU", "(", "True", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.weight_init": [[104, 118], ["isinstance", "isinstance", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "math.sqrt", "torch.init.normal_", "math.sqrt", "torch.init.normal_", "torch.init.zeros_"], "function", ["None"], ["", "", "def", "weight_init", "(", "m", ")", ":", "\n", "    ", "'''call weight initialization for model n via n.appy(weight_init)'''", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "if", "isinstance", "(", "m", ",", "SqueezeExcite1d", ")", ":", "\n", "        ", "stdv1", "=", "math", ".", "sqrt", "(", "2.", "/", "m", ".", "w1", ".", "size", "[", "0", "]", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "w1", ",", "0.", ",", "stdv1", ")", "\n", "stdv2", "=", "math", ".", "sqrt", "(", "1.", "/", "m", ".", "w2", ".", "size", "[", "1", "]", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "w2", ",", "0.", ",", "stdv2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.create_head1d": [[120, 131], ["basic_conv1d.listify", "zip", "torch.Sequential", "len", "basic_conv1d.Flatten", "basic_conv1d.bn_drop_lin", "layers.append", "basic_conv1d.AdaptiveConcatPool1d", "torch.MaxPool1d", "torch.BatchNorm1d", "len", "len", "torch.ReLU", "torch.ELU"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.listify", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.bn_drop_lin"], ["", "", "def", "create_head1d", "(", "nf", ",", "nc", ",", "lin_ftrs", "=", "None", ",", "ps", "=", "0.5", ",", "bn_final", ":", "bool", "=", "False", ",", "bn", ":", "bool", "=", "True", ",", "act", "=", "\"relu\"", ",", "concat_pooling", "=", "True", ")", ":", "\n", "    ", "\"Model head that takes `nf` features, runs through `lin_ftrs`, and about `nc` classes; added bn and act here\"", "\n", "lin_ftrs", "=", "[", "2", "*", "nf", "if", "concat_pooling", "else", "nf", ",", "nc", "]", "if", "lin_ftrs", "is", "None", "else", "[", "2", "*", "nf", "if", "concat_pooling", "else", "nf", "]", "+", "lin_ftrs", "+", "[", "nc", "]", "#was [nf, 512,nc]", "\n", "ps", "=", "listify", "(", "ps", ")", "\n", "if", "len", "(", "ps", ")", "==", "1", ":", "ps", "=", "[", "ps", "[", "0", "]", "/", "2", "]", "*", "(", "len", "(", "lin_ftrs", ")", "-", "2", ")", "+", "ps", "\n", "actns", "=", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "if", "act", "==", "\"relu\"", "else", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "]", "*", "(", "len", "(", "lin_ftrs", ")", "-", "2", ")", "+", "[", "None", "]", "\n", "layers", "=", "[", "AdaptiveConcatPool1d", "(", ")", "if", "concat_pooling", "else", "nn", ".", "MaxPool1d", "(", "2", ")", ",", "Flatten", "(", ")", "]", "\n", "for", "ni", ",", "no", ",", "p", ",", "actn", "in", "zip", "(", "lin_ftrs", "[", ":", "-", "1", "]", ",", "lin_ftrs", "[", "1", ":", "]", ",", "ps", ",", "actns", ")", ":", "\n", "        ", "layers", "+=", "bn_drop_lin", "(", "ni", ",", "no", ",", "bn", ",", "p", ",", "actn", ")", "\n", "", "if", "bn_final", ":", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "lin_ftrs", "[", "-", "1", "]", ",", "momentum", "=", "0.01", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.fcn": [[181, 184], ["basic_conv1d.basic_conv1d"], "function", ["None"], ["", "", "", "def", "fcn", "(", "filters", "=", "[", "128", "]", "*", "5", ",", "num_classes", "=", "2", ",", "input_channels", "=", "8", ",", "**", "kwargs", ")", ":", "\n", "    ", "filters_in", "=", "filters", "+", "[", "num_classes", "]", "\n", "return", "basic_conv1d", "(", "filters", "=", "filters_in", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "pool", "=", "2", ",", "pool_stride", "=", "2", ",", "input_channels", "=", "input_channels", ",", "act", "=", "\"relu\"", ",", "bn", "=", "True", ",", "headless", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.fcn_wang": [[185, 187], ["basic_conv1d.basic_conv1d"], "function", ["None"], ["", "def", "fcn_wang", "(", "num_classes", "=", "2", ",", "input_channels", "=", "8", ",", "lin_ftrs_head", "=", "None", ",", "ps_head", "=", "0.5", ",", "bn_final_head", "=", "False", ",", "bn_head", "=", "True", ",", "act_head", "=", "\"relu\"", ",", "concat_pooling", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "basic_conv1d", "(", "filters", "=", "[", "128", ",", "256", ",", "128", "]", ",", "kernel_size", "=", "[", "8", ",", "5", ",", "3", "]", ",", "stride", "=", "1", ",", "pool", "=", "0", ",", "pool_stride", "=", "2", ",", "num_classes", "=", "num_classes", ",", "input_channels", "=", "input_channels", ",", "act", "=", "\"relu\"", ",", "bn", "=", "True", ",", "lin_ftrs_head", "=", "lin_ftrs_head", ",", "ps_head", "=", "ps_head", ",", "bn_final_head", "=", "bn_final_head", ",", "bn_head", "=", "bn_head", ",", "act_head", "=", "act_head", ",", "concat_pooling", "=", "concat_pooling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.schirrmeister": [[188, 190], ["basic_conv1d.basic_conv1d"], "function", ["None"], ["", "def", "schirrmeister", "(", "num_classes", "=", "2", ",", "input_channels", "=", "8", ",", "kernel_size", "=", "10", ",", "lin_ftrs_head", "=", "None", ",", "ps_head", "=", "0.5", ",", "bn_final_head", "=", "False", ",", "bn_head", "=", "True", ",", "act_head", "=", "\"relu\"", ",", "concat_pooling", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "basic_conv1d", "(", "filters", "=", "[", "25", ",", "50", ",", "100", ",", "200", "]", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "3", ",", "pool", "=", "3", ",", "pool_stride", "=", "1", ",", "num_classes", "=", "num_classes", ",", "input_channels", "=", "input_channels", ",", "act", "=", "\"relu\"", ",", "bn", "=", "True", ",", "headless", "=", "False", ",", "split_first_layer", "=", "True", ",", "drop_p", "=", "0.5", ",", "lin_ftrs_head", "=", "lin_ftrs_head", ",", "ps_head", "=", "ps_head", ",", "bn_final_head", "=", "bn_final_head", ",", "bn_head", "=", "bn_head", ",", "act_head", "=", "act_head", ",", "concat_pooling", "=", "concat_pooling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.sen": [[191, 193], ["basic_conv1d.basic_conv1d"], "function", ["None"], ["", "def", "sen", "(", "filters", "=", "[", "128", "]", "*", "5", ",", "num_classes", "=", "2", ",", "input_channels", "=", "8", ",", "kernel_size", "=", "3", ",", "squeeze_excite_reduction", "=", "16", ",", "drop_p", "=", "0.", ",", "lin_ftrs_head", "=", "None", ",", "ps_head", "=", "0.5", ",", "bn_final_head", "=", "False", ",", "bn_head", "=", "True", ",", "act_head", "=", "\"relu\"", ",", "concat_pooling", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "basic_conv1d", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "2", ",", "pool", "=", "0", ",", "pool_stride", "=", "0", ",", "input_channels", "=", "input_channels", ",", "act", "=", "\"relu\"", ",", "bn", "=", "True", ",", "num_classes", "=", "num_classes", ",", "squeeze_excite_reduction", "=", "squeeze_excite_reduction", ",", "drop_p", "=", "drop_p", ",", "lin_ftrs_head", "=", "lin_ftrs_head", ",", "ps_head", "=", "ps_head", ",", "bn_final_head", "=", "bn_final_head", ",", "bn_head", "=", "bn_head", ",", "act_head", "=", "act_head", ",", "concat_pooling", "=", "concat_pooling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.basic1d": [[194, 196], ["basic_conv1d.basic_conv1d"], "function", ["None"], ["", "def", "basic1d", "(", "filters", "=", "[", "128", "]", "*", "5", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "dilation", "=", "1", ",", "pool", "=", "0", ",", "pool_stride", "=", "1", ",", "squeeze_excite_reduction", "=", "0", ",", "num_classes", "=", "2", ",", "input_channels", "=", "8", ",", "act", "=", "\"relu\"", ",", "bn", "=", "True", ",", "headless", "=", "False", ",", "drop_p", "=", "0.", ",", "lin_ftrs_head", "=", "None", ",", "ps_head", "=", "0.5", ",", "bn_final_head", "=", "False", ",", "bn_head", "=", "True", ",", "act_head", "=", "\"relu\"", ",", "concat_pooling", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "basic_conv1d", "(", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "dilation", "=", "dilation", ",", "pool", "=", "pool", ",", "pool_stride", "=", "pool_stride", ",", "squeeze_excite_reduction", "=", "squeeze_excite_reduction", ",", "num_classes", "=", "num_classes", ",", "input_channels", "=", "input_channels", ",", "act", "=", "act", ",", "bn", "=", "bn", ",", "headless", "=", "headless", ",", "drop_p", "=", "drop_p", ",", "lin_ftrs_head", "=", "lin_ftrs_head", ",", "ps_head", "=", "ps_head", ",", "bn_final_head", "=", "bn_final_head", ",", "bn_head", "=", "bn_head", ",", "act_head", "=", "act_head", ",", "concat_pooling", "=", "concat_pooling", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.stratify.stratify": [[3, 110], ["numpy.random.seed", "numpy.sum", "enumerate", "print", "numpy.ones", "set", "numpy.unique", "zip", "sorted", "len", "per_label_data[].append", "range", "int", "int", "print", "len", "min", "numpy.argsort", "numpy.argwhere().flatten", "stratified_data_ids[].add", "per_label_data.keys", "len", "len", "numpy.sum", "per_label_data.items", "len", "numpy.argwhere().flatten", "numpy.argwhere", "lengths.items", "numpy.argwhere", "numpy.random.choice", "per_label_data.items", "numpy.amax", "len", "numpy.amax", "numpy.array", "numpy.array"], "function", ["None"], ["def", "stratify", "(", "data", ",", "classes", ",", "ratios", ",", "samples_per_group", "=", "None", ")", ":", "\n", "    ", "\"\"\"Stratifying procedure. Modified from https://vict0rs.ch/2018/05/24/sample-multilabel-dataset/ (based on Sechidis 2011)\n\n    data is a list of lists: a list of labels, for each sample (possibly containing duplicates not multi-hot encoded).\n    \n    classes is the list of classes each label can take\n\n    ratios is a list, summing to 1, of how the dataset should be split\n\n    samples_per_group: list with number of samples per patient/group\n\n    \"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "# fix the random seed", "\n", "\n", "# data is now always a list of lists; len(data) is the number of patients; data[i] is the list of all labels for patient i (possibly multiple identical entries)", "\n", "\n", "if", "(", "samples_per_group", "is", "None", ")", ":", "\n", "        ", "samples_per_group", "=", "np", ".", "ones", "(", "len", "(", "data", ")", ")", "\n", "\n", "#size is the number of ecgs", "\n", "", "size", "=", "np", ".", "sum", "(", "samples_per_group", ")", "\n", "\n", "# Organize data per label: for each label l, per_label_data[l] contains the list of patients", "\n", "# in data which have this label (potentially multiple identical entries)", "\n", "per_label_data", "=", "{", "c", ":", "[", "]", "for", "c", "in", "classes", "}", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "data", ")", ":", "\n", "        ", "for", "l", "in", "d", ":", "\n", "            ", "per_label_data", "[", "l", "]", ".", "append", "(", "i", ")", "\n", "\n", "# In order not to compute lengths each time, they are tracked here.", "\n", "", "", "subset_sizes", "=", "[", "r", "*", "size", "for", "r", "in", "ratios", "]", "#list of subset_sizes in terms of ecgs", "\n", "per_label_subset_sizes", "=", "{", "c", ":", "[", "r", "*", "len", "(", "per_label_data", "[", "c", "]", ")", "for", "r", "in", "ratios", "]", "for", "c", "in", "classes", "}", "#dictionary with label: list of subset sizes in terms of patients", "\n", "\n", "# For each subset we want, the set of sample-ids which should end up in it", "\n", "stratified_data_ids", "=", "[", "set", "(", ")", "for", "_", "in", "range", "(", "len", "(", "ratios", ")", ")", "]", "#initialize empty", "\n", "\n", "# For each sample in the data set", "\n", "print", "(", "\"Starting fold distribution...\"", ")", "\n", "size_prev", "=", "size", "+", "1", "#just for output", "\n", "while", "size", ">", "0", ":", "\n", "        ", "if", "(", "int", "(", "size_prev", "/", "1000", ")", ">", "int", "(", "size", "/", "1000", ")", ")", ":", "\n", "            ", "print", "(", "\"Remaining entries to distribute:\"", ",", "size", ",", "\"non-empty labels:\"", ",", "np", ".", "sum", "(", "[", "1", "for", "l", ",", "label_data", "in", "per_label_data", ".", "items", "(", ")", "if", "len", "(", "label_data", ")", ">", "0", "]", ")", ")", "\n", "", "size_prev", "=", "size", "\n", "# Compute |Di| ", "\n", "lengths", "=", "{", "\n", "l", ":", "len", "(", "label_data", ")", "\n", "for", "l", ",", "label_data", "in", "per_label_data", ".", "items", "(", ")", "\n", "}", "#dictionary label: number of ecgs with this label that have not been assigned to a fold yet", "\n", "try", ":", "\n", "# Find label of smallest |Di|", "\n", "            ", "label", "=", "min", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "lengths", ".", "items", "(", ")", "if", "v", ">", "0", "}", ",", "key", "=", "lengths", ".", "get", ")", "\n", "", "except", "ValueError", ":", "\n", "# If the dictionary in `min` is empty we get a Value Error. ", "\n", "# This can happen if there are unlabeled samples.", "\n", "# In this case, `size` would be > 0 but only samples without label would remain.", "\n", "# \"No label\" could be a class in itself: it's up to you to format your data accordingly.", "\n", "            ", "break", "\n", "# For each patient with label `label` get patient and corresponding counts", "\n", "", "unique_samples", ",", "unique_counts", "=", "np", ".", "unique", "(", "per_label_data", "[", "label", "]", ",", "return_counts", "=", "True", ")", "\n", "idxs_sorted", "=", "np", ".", "argsort", "(", "unique_counts", ",", "kind", "=", "'stable'", ")", "[", ":", ":", "-", "1", "]", "\n", "unique_samples", "=", "unique_samples", "[", "idxs_sorted", "]", "# this is a list of all patient ids with this label sort by size descending", "\n", "unique_counts", "=", "unique_counts", "[", "idxs_sorted", "]", "# these are the corresponding counts", "\n", "\n", "# loop through all patient ids with this label", "\n", "for", "current_id", ",", "current_count", "in", "zip", "(", "unique_samples", ",", "unique_counts", ")", ":", "\n", "\n", "            ", "subset_sizes_for_label", "=", "per_label_subset_sizes", "[", "label", "]", "#current subset sizes for the chosen label", "\n", "\n", "# Find argmax clj i.e. subset in greatest need of the current label", "\n", "largest_subsets", "=", "np", ".", "argwhere", "(", "subset_sizes_for_label", "==", "np", ".", "amax", "(", "subset_sizes_for_label", ")", ")", ".", "flatten", "(", ")", "\n", "\n", "# if there is a single best choice: assign it", "\n", "if", "len", "(", "largest_subsets", ")", "==", "1", ":", "\n", "                ", "subset", "=", "largest_subsets", "[", "0", "]", "\n", "# If there is more than one such subset, find the one in greatest need of any label", "\n", "", "else", ":", "\n", "                ", "largest_subsets2", "=", "np", ".", "argwhere", "(", "np", ".", "array", "(", "subset_sizes", ")", "[", "largest_subsets", "]", "==", "np", ".", "amax", "(", "np", ".", "array", "(", "subset_sizes", ")", "[", "largest_subsets", "]", ")", ")", ".", "flatten", "(", ")", "\n", "subset", "=", "largest_subsets", "[", "np", ".", "random", ".", "choice", "(", "largest_subsets2", ")", "]", "\n", "\n", "# Store the sample's id in the selected subset", "\n", "", "stratified_data_ids", "[", "subset", "]", ".", "add", "(", "current_id", ")", "\n", "\n", "# There is current_count fewer samples to distribute", "\n", "size", "-=", "samples_per_group", "[", "current_id", "]", "\n", "# The selected subset needs current_count fewer samples", "\n", "subset_sizes", "[", "subset", "]", "-=", "samples_per_group", "[", "current_id", "]", "\n", "\n", "# In the selected subset, there is one more example for each label", "\n", "# the current sample has", "\n", "for", "l", "in", "data", "[", "current_id", "]", ":", "\n", "                ", "per_label_subset_sizes", "[", "l", "]", "[", "subset", "]", "-=", "1", "\n", "\n", "# Remove the sample from the dataset, meaning from all per_label dataset created", "\n", "", "for", "x", "in", "per_label_data", ".", "keys", "(", ")", ":", "\n", "                ", "per_label_data", "[", "x", "]", "=", "[", "y", "for", "y", "in", "per_label_data", "[", "x", "]", "if", "y", "!=", "current_id", "]", "\n", "\n", "# Create the stratified dataset as a list of subsets, each containing the orginal labels", "\n", "", "", "", "stratified_data_ids", "=", "[", "sorted", "(", "strat", ")", "for", "strat", "in", "stratified_data_ids", "]", "\n", "#stratified_data = [", "\n", "#    [data[i] for i in strat] for strat in stratified_data_ids", "\n", "#]", "\n", "\n", "# Return both the stratified indexes, to be used to sample the `features` associated with your labels", "\n", "# And the stratified labels dataset", "\n", "\n", "#return stratified_data_ids, stratified_data", "\n", "return", "stratified_data_ids", "\n", "", ""]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.cpc.CPCEncoder.__init__": [[17, 25], ["enumerate", "torch.Sequential.__init__", "numpy.prod", "zip", "lst.append", "len", "len", "len", "len", "clinical_ts.basic_conv1d._conv1d"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d._conv1d"], ["def", "__init__", "(", "self", ",", "input_channels", ",", "strides", "=", "[", "5", ",", "4", ",", "2", ",", "2", ",", "2", "]", ",", "kss", "=", "[", "10", ",", "8", ",", "4", ",", "4", ",", "4", "]", ",", "features", "=", "[", "512", ",", "512", ",", "512", ",", "512", "]", ",", "bn", "=", "False", ")", ":", "\n", "        ", "assert", "(", "len", "(", "strides", ")", "==", "len", "(", "kss", ")", "and", "len", "(", "strides", ")", "==", "len", "(", "features", ")", ")", "\n", "lst", "=", "[", "]", "\n", "for", "i", ",", "(", "s", ",", "k", ",", "f", ")", "in", "enumerate", "(", "zip", "(", "strides", ",", "kss", ",", "features", ")", ")", ":", "\n", "            ", "lst", ".", "append", "(", "_conv1d", "(", "input_channels", "if", "i", "==", "0", "else", "features", "[", "i", "-", "1", "]", ",", "f", ",", "kernel_size", "=", "k", ",", "stride", "=", "s", ",", "bn", "=", "bn", ")", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "*", "lst", ")", "\n", "self", ".", "downsampling_factor", "=", "np", ".", "prod", "(", "strides", ")", "\n", "self", ".", "output_dim", "=", "features", "[", "-", "1", "]", "\n", "# output: bs, output_dim, seq//downsampling_factor", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.cpc.CPCEncoder.encode": [[26, 34], ["cpc.CPCEncoder.forward().transpose", "cpc.CPCEncoder.forward"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.ResBlock.forward"], ["", "def", "encode", "(", "self", ",", "input", ")", ":", "\n", "#bs = input.size()[0]", "\n", "#ch = input.size()[1]", "\n", "#seq = input.size()[2]", "\n", "#segments = seq//self.downsampling_factor", "\n", "#input_encoded = self.forward(input[:,:,:segments*self.downsampling_factor]).transpose(1,2) #bs, seq//downsampling, encoder_output_dim (standard ordering for batch_first RNNs)", "\n", "        ", "input_encoded", "=", "self", ".", "forward", "(", "input", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "input_encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.cpc.CPCModel.__init__": [[38, 75], ["torch.Module.__init__", "cpc.CPCEncoder", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.GRU", "torch.GRU", "torch.GRU", "basic_conv1d.listify", "zip", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "layers_head.append", "len", "basic_conv1d.bn_drop_lin", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "cpc.AdaptiveConcatPoolRNN", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.listify", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.bn_drop_lin"], ["def", "__init__", "(", "self", ",", "input_channels", ",", "strides", "=", "[", "5", ",", "4", ",", "2", ",", "2", ",", "2", "]", ",", "kss", "=", "[", "10", ",", "8", ",", "4", ",", "4", ",", "4", "]", ",", "features", "=", "[", "512", ",", "512", ",", "512", ",", "512", "]", ",", "bn_encoder", "=", "False", ",", "n_hidden", "=", "512", ",", "n_layers", "=", "2", ",", "mlp", "=", "False", ",", "lstm", "=", "True", ",", "bias_proj", "=", "False", ",", "num_classes", "=", "None", ",", "concat_pooling", "=", "True", ",", "ps_head", "=", "0.5", ",", "lin_ftrs_head", "=", "[", "512", "]", ",", "bn_head", "=", "True", ",", "skip_encoder", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "skip_encoder", "is", "False", "or", "num_classes", "is", "not", "None", ")", "#pretraining only with encoder", "\n", "self", ".", "encoder", "=", "CPCEncoder", "(", "input_channels", ",", "strides", "=", "strides", ",", "kss", "=", "kss", ",", "features", "=", "features", ",", "bn", "=", "bn_encoder", ")", "if", "skip_encoder", "is", "False", "else", "None", "\n", "self", ".", "encoder_output_dim", "=", "self", ".", "encoder", ".", "output_dim", "if", "skip_encoder", "is", "False", "else", "None", "\n", "self", ".", "encoder_downsampling_factor", "=", "self", ".", "encoder", ".", "downsampling_factor", "if", "skip_encoder", "is", "False", "else", "None", "\n", "self", ".", "n_hidden", "=", "n_hidden", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "mlp", "=", "mlp", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "concat_pooling", "=", "concat_pooling", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "self", ".", "encoder_output_dim", "if", "skip_encoder", "is", "False", "else", "input_channels", ",", "n_hidden", ",", "num_layers", "=", "n_layers", ",", "batch_first", "=", "True", ")", "if", "lstm", "is", "True", "else", "nn", ".", "GRU", "(", "self", ".", "encoder", ".", "output_dim", ",", "n_hidden", ",", "num_layers", "=", "n_layers", ",", "batch_first", "=", "True", ")", "\n", "\n", "if", "(", "num_classes", "is", "None", ")", ":", "#pretraining", "\n", "            ", "if", "(", "mlp", ")", ":", "# additional hidden layer as in simclr", "\n", "                ", "self", ".", "proj", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "n_hidden", ",", "n_hidden", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Linear", "(", "n_hidden", ",", "self", ".", "encoder_output_dim", ",", "bias", "=", "bias_proj", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "n_hidden", ",", "self", ".", "encoder_output_dim", ",", "bias", "=", "bias_proj", ")", "\n", "", "", "else", ":", "#classifier", "\n", "#slightly adapted from RNN1d", "\n", "            ", "layers_head", "=", "[", "]", "\n", "if", "(", "self", ".", "concat_pooling", ")", ":", "\n", "                ", "layers_head", ".", "append", "(", "AdaptiveConcatPoolRNN", "(", ")", ")", "\n", "\n", "#classifier", "\n", "", "nf", "=", "3", "*", "n_hidden", "if", "concat_pooling", "else", "n_hidden", "\n", "lin_ftrs_head", "=", "[", "nf", ",", "num_classes", "]", "if", "lin_ftrs_head", "is", "None", "else", "[", "nf", "]", "+", "lin_ftrs_head", "+", "[", "num_classes", "]", "\n", "ps_head", "=", "listify", "(", "ps_head", ")", "\n", "if", "len", "(", "ps_head", ")", "==", "1", ":", "\n", "                ", "ps_head", "=", "[", "ps_head", "[", "0", "]", "/", "2", "]", "*", "(", "len", "(", "lin_ftrs_head", ")", "-", "2", ")", "+", "ps_head", "\n", "", "actns", "=", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "*", "(", "len", "(", "lin_ftrs_head", ")", "-", "2", ")", "+", "[", "None", "]", "\n", "\n", "for", "ni", ",", "no", ",", "p", ",", "actn", "in", "zip", "(", "lin_ftrs_head", "[", ":", "-", "1", "]", ",", "lin_ftrs_head", "[", "1", ":", "]", ",", "ps_head", ",", "actns", ")", ":", "\n", "                ", "layers_head", "+=", "bn_drop_lin", "(", "ni", ",", "no", ",", "bn_head", ",", "p", ",", "actn", ")", "\n", "", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "*", "layers_head", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.cpc.CPCModel.forward": [[77, 91], ["cpc.CPCModel.rnn", "cpc.CPCModel.encoder.encode", "input.transpose", "output_rnn.transpose", "cpc.CPCModel.head", "cpc.CPCModel.proj"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.cpc.CPCEncoder.encode"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# input shape bs,ch,seq", "\n", "        ", "if", "(", "self", ".", "encoder", "is", "not", "None", ")", ":", "\n", "            ", "input_encoded", "=", "self", ".", "encoder", ".", "encode", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "input_encoded", "=", "input", ".", "transpose", "(", "1", ",", "2", ")", "#bs, seq, channels", "\n", "", "output_rnn", ",", "_", "=", "self", ".", "rnn", "(", "input_encoded", ")", "#output_rnn: bs, seq, n_hidden", "\n", "if", "(", "self", ".", "num_classes", "is", "None", ")", ":", "#pretraining", "\n", "            ", "return", "input_encoded", ",", "self", ".", "proj", "(", "output_rnn", ")", "\n", "", "else", ":", "#classifier", "\n", "            ", "output", "=", "output_rnn", ".", "transpose", "(", "1", ",", "2", ")", "#bs,n_hidden,seq (i.e. standard CNN channel ordering)", "\n", "if", "(", "self", ".", "concat_pooling", "is", "False", ")", ":", "\n", "                ", "output", "=", "output", "[", ":", ",", ":", ",", "-", "1", "]", "\n", "", "return", "self", ".", "head", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.cpc.CPCModel.get_layer_groups": [[92, 94], ["None"], "methods", ["None"], ["", "", "def", "get_layer_groups", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "encoder", ",", "self", ".", "rnn", ",", "self", ".", "head", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.cpc.CPCModel.get_output_layer": [[95, 97], ["None"], "methods", ["None"], ["", "def", "get_output_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "head", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.cpc.CPCModel.set_output_layer": [[98, 100], ["None"], "methods", ["None"], ["", "def", "set_output_layer", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "head", "[", "-", "1", "]", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.cpc.CPCModel.cpc_loss": [[101, 141], ["cpc.CPCModel.forward", "input_encoded.reshape", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "range", "input_encoded.size", "input_encoded.size", "input_encoded.size", "input_encoded[].unsqueeze", "torch.remainder", "torch.remainder", "torch.remainder", "torch.remainder", "torch.remainder", "torch.remainder", "torch.remainder", "torch.remainder", "torch.remainder", "input_encoded_flat[].view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.arange().repeat_interleave().to", "torch.arange().repeat_interleave().to", "torch.arange().repeat_interleave().to", "torch.arange().repeat_interleave().to", "torch.arange().repeat_interleave().to", "torch.arange().repeat_interleave().to", "torch.arange().repeat_interleave().to", "torch.arange().repeat_interleave().to", "torch.arange().repeat_interleave().to", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "input_encoded.size", "output[].unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.tensor().to.float", "torch.tensor().to.float", "torch.tensor().to.float", "input_encoded.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.ResBlock.forward"], ["", "def", "cpc_loss", "(", "self", ",", "input", ",", "target", "=", "None", ",", "steps_predicted", "=", "5", ",", "n_false_negatives", "=", "9", ",", "negatives_from_same_seq_only", "=", "False", ",", "eval_acc", "=", "False", ")", ":", "\n", "        ", "assert", "(", "self", ".", "num_classes", "is", "None", ")", "\n", "\n", "input_encoded", ",", "output", "=", "self", ".", "forward", "(", "input", ")", "#input_encoded: bs, seq, features; output: bs,seq,features", "\n", "input_encoded_flat", "=", "input_encoded", ".", "reshape", "(", "-", "1", ",", "input_encoded", ".", "size", "(", "2", ")", ")", "#for negatives below: -1, features", "\n", "\n", "bs", "=", "input_encoded", ".", "size", "(", ")", "[", "0", "]", "\n", "seq", "=", "input_encoded", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "loss", "=", "torch", ".", "tensor", "(", "0", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "tp_cnt", "=", "torch", ".", "tensor", "(", "0", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "\n", "for", "i", "in", "range", "(", "input_encoded", ".", "size", "(", ")", "[", "1", "]", "-", "steps_predicted", ")", ":", "\n", "            ", "positives", "=", "input_encoded", "[", ":", ",", "i", "+", "steps_predicted", "]", ".", "unsqueeze", "(", "1", ")", "#bs,1,encoder_output_dim", "\n", "if", "(", "negatives_from_same_seq_only", ")", ":", "\n", "                ", "idxs", "=", "torch", ".", "randint", "(", "0", ",", "(", "seq", "-", "1", ")", ",", "(", "bs", "*", "n_false_negatives", ",", ")", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "", "else", ":", "#negative from everywhere", "\n", "                ", "idxs", "=", "torch", ".", "randint", "(", "0", ",", "bs", "*", "(", "seq", "-", "1", ")", ",", "(", "bs", "*", "n_false_negatives", ",", ")", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "", "idxs_seq", "=", "torch", ".", "remainder", "(", "idxs", ",", "seq", "-", "1", ")", "#bs*false_neg", "\n", "idxs_seq2", "=", "idxs_seq", "*", "(", "idxs_seq", "<", "(", "i", "+", "steps_predicted", ")", ")", ".", "long", "(", ")", "+", "(", "idxs_seq", "+", "1", ")", "*", "(", "idxs_seq", ">=", "(", "i", "+", "steps_predicted", ")", ")", ".", "long", "(", ")", "#bs*false_neg", "\n", "if", "(", "negatives_from_same_seq_only", ")", ":", "\n", "                ", "idxs_batch", "=", "torch", ".", "arange", "(", "0", ",", "bs", ")", ".", "repeat_interleave", "(", "n_false_negatives", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "idxs_batch", "=", "idxs", "//", "(", "seq", "-", "1", ")", "\n", "", "idxs2_flat", "=", "idxs_batch", "*", "seq", "+", "idxs_seq2", "#for negatives from everywhere: this skips step i+steps_predicted from the other sequences as well for simplicity", "\n", "\n", "negatives", "=", "input_encoded_flat", "[", "idxs2_flat", "]", ".", "view", "(", "bs", ",", "n_false_negatives", ",", "-", "1", ")", "#bs*false_neg, encoder_output_dim", "\n", "candidates", "=", "torch", ".", "cat", "(", "[", "positives", ",", "negatives", "]", ",", "dim", "=", "1", ")", "#bs,false_neg+1,encoder_output_dim", "\n", "preds", "=", "torch", ".", "sum", "(", "output", "[", ":", ",", "i", "]", ".", "unsqueeze", "(", "1", ")", "*", "candidates", ",", "dim", "=", "-", "1", ")", "#bs,(false_neg+1)", "\n", "targs", "=", "torch", ".", "zeros", "(", "bs", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "\n", "if", "(", "eval_acc", ")", ":", "\n", "                ", "preds_argmax", "=", "torch", ".", "argmax", "(", "preds", ",", "dim", "=", "-", "1", ")", "\n", "tp_cnt", "+=", "torch", ".", "sum", "(", "preds_argmax", "==", "targs", ")", "\n", "\n", "", "loss", "+=", "F", ".", "cross_entropy", "(", "preds", ",", "targs", ")", "\n", "", "if", "(", "eval_acc", ")", ":", "\n", "            ", "return", "loss", ",", "tp_cnt", ".", "float", "(", ")", "/", "bs", "/", "(", "input_encoded", ".", "size", "(", ")", "[", "1", "]", "-", "steps_predicted", ")", "\n", "", "else", ":", "\n", "            ", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.cpc.AdaptiveConcatPoolRNN.__init__": [[144, 147], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bidirectional", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.cpc.AdaptiveConcatPoolRNN.forward": [[147, 159], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveMaxPool1d", "torch.AdaptiveMaxPool1d", "torch.AdaptiveMaxPool1d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.size", "t1.squeeze", "t2.squeeze"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.squeeze", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.squeeze"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#input shape bs, ch, ts", "\n", "        ", "t1", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", "(", "x", ")", "\n", "t2", "=", "nn", ".", "AdaptiveMaxPool1d", "(", "1", ")", "(", "x", ")", "\n", "\n", "if", "(", "self", ".", "bidirectional", "is", "False", ")", ":", "\n", "            ", "t3", "=", "x", "[", ":", ",", ":", ",", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "channels", "=", "x", ".", "size", "(", ")", "[", "1", "]", "\n", "t3", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", "channels", ",", "-", "1", "]", ",", "x", "[", ":", ",", "channels", ":", ",", "0", "]", "]", ",", "1", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "[", "t1", ".", "squeeze", "(", "-", "1", ")", ",", "t2", ".", "squeeze", "(", "-", "1", ")", ",", "t3", "]", ",", "1", ")", "#output shape bs, 3*ch", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.eval_utils_cafa.auc_prrc_uninterpolated": [[19, 23], ["numpy.sum", "numpy.diff", "numpy.array"], "function", ["None"], ["def", "auc_prrc_uninterpolated", "(", "recall", ",", "precision", ")", ":", "\n", "    ", "'''uninterpolated auc as used by sklearn https://github.com/scikit-learn/scikit-learn/blob/1495f6924/sklearn/metrics/ranking.py see also the discussion at https://github.com/scikit-learn/scikit-learn/pull/9583'''", "\n", "#print(-np.sum(np.diff(recall) * np.array(precision)[:-1]),auc(recall,precision))", "\n", "return", "-", "np", ".", "sum", "(", "np", ".", "diff", "(", "recall", ")", "*", "np", ".", "array", "(", "precision", ")", "[", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.eval_utils_cafa.multiclass_roc_curve": [[26, 96], ["dict", "dict", "dict", "len", "enumerate", "sklearn.metrics.precision_recall_curve", "eval_utils_cafa.auc_prrc_uninterpolated", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "numpy.unique", "numpy.isnan", "str", "sklearn.metrics.precision_recall_curve", "eval_utils_cafa.auc_prrc_uninterpolated", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "y_true.ravel", "y_pred.ravel", "y_true.ravel", "y_pred.ravel", "numpy.concatenate", "scipy.interpolate.interp1d", "range", "scipy.interpolate.interp1d.", "scipy.interpolate.interp1d."], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.eval_utils_cafa.auc_prrc_uninterpolated", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.eval_utils_cafa.auc_prrc_uninterpolated"], ["", "def", "multiclass_roc_curve", "(", "y_true", ",", "y_pred", ",", "classes", "=", "None", ",", "precision_recall", "=", "False", ")", ":", "\n", "    ", "'''Compute ROC curve and ROC area for each class \"0\"...\"n_classes - 1\" (or classnames passed via classes), \"micro\", \"macro\"\n    returns fpr,tpr,roc (dictionaries) for ROC\n    returns recall,precision,average_precision for precision_recall\n    '''", "\n", "\n", "fpr", "=", "dict", "(", ")", "\n", "tpr", "=", "dict", "(", ")", "\n", "roc_auc", "=", "dict", "(", ")", "\n", "n_classes", "=", "len", "(", "y_pred", "[", "0", "]", ")", "\n", "if", "(", "classes", "is", "None", ")", ":", "\n", "        ", "classes", "=", "[", "str", "(", "i", ")", "for", "i", "in", "range", "(", "n_classes", ")", "]", "\n", "\n", "", "for", "i", ",", "c", "in", "enumerate", "(", "classes", ")", ":", "\n", "        ", "if", "(", "precision_recall", ")", ":", "\n", "            ", "tpr", "[", "c", "]", ",", "fpr", "[", "c", "]", ",", "_", "=", "precision_recall_curve", "(", "y_true", "[", ":", ",", "i", "]", ",", "y_pred", "[", ":", ",", "i", "]", ")", "\n", "roc_auc", "[", "c", "]", "=", "auc_prrc_uninterpolated", "(", "fpr", "[", "c", "]", ",", "tpr", "[", "c", "]", ")", "\n", "", "else", ":", "\n", "            ", "fpr", "[", "c", "]", ",", "tpr", "[", "c", "]", ",", "_", "=", "roc_curve", "(", "y_true", "[", ":", ",", "i", "]", ",", "y_pred", "[", ":", ",", "i", "]", ")", "\n", "roc_auc", "[", "c", "]", "=", "auc", "(", "fpr", "[", "c", "]", ",", "tpr", "[", "c", "]", ")", "\n", "\n", "# Compute micro-average curve and area", "\n", "", "", "if", "(", "precision_recall", ")", ":", "\n", "        ", "tpr", "[", "\"micro\"", "]", ",", "fpr", "[", "\"micro\"", "]", ",", "_", "=", "precision_recall_curve", "(", "y_true", ".", "ravel", "(", ")", ",", "y_pred", ".", "ravel", "(", ")", ")", "\n", "roc_auc", "[", "\"micro\"", "]", "=", "auc_prrc_uninterpolated", "(", "fpr", "[", "\"micro\"", "]", ",", "tpr", "[", "\"micro\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "fpr", "[", "\"micro\"", "]", ",", "tpr", "[", "\"micro\"", "]", ",", "_", "=", "roc_curve", "(", "y_true", ".", "ravel", "(", ")", ",", "y_pred", ".", "ravel", "(", ")", ")", "\n", "roc_auc", "[", "\"micro\"", "]", "=", "auc", "(", "fpr", "[", "\"micro\"", "]", ",", "tpr", "[", "\"micro\"", "]", ")", "\n", "\n", "# Compute macro-average curve and area (linear interpolation is incorrect for PRRC- therefore just for ROC)", "\n", "", "if", "(", "precision_recall", "is", "False", ")", ":", "\n", "# 1. First aggregate all unique x values (false positive rates for ROC)", "\n", "        ", "all_fpr", "=", "np", ".", "unique", "(", "np", ".", "concatenate", "(", "[", "fpr", "[", "c", "]", "for", "c", "in", "classes", "]", ")", ")", "\n", "\n", "# 2. Then interpolate all curves at this points", "\n", "mean_tpr", "=", "None", "\n", "for", "c", "in", "classes", ":", "\n", "            ", "f", "=", "interp1d", "(", "fpr", "[", "c", "]", ",", "tpr", "[", "c", "]", ")", "\n", "if", "(", "mean_tpr", "is", "None", ")", ":", "\n", "                ", "mean_tpr", "=", "f", "(", "all_fpr", ")", "\n", "", "else", ":", "\n", "                ", "mean_tpr", "+=", "f", "(", "all_fpr", ")", "\n", "\n", "# 3. Finally average it and compute area", "\n", "", "", "mean_tpr", "/=", "n_classes", "\n", "\n", "fpr", "[", "\"macro\"", "]", "=", "all_fpr", "\n", "tpr", "[", "\"macro\"", "]", "=", "mean_tpr", "\n", "#macro2 differs slightly from macro due to interpolation effects", "\n", "#roc_auc[\"macro2\"] = auc(fpr[\"macro\"], tpr[\"macro\"])", "\n", "\n", "#calculate macro auc directly by summing", "\n", "", "roc_auc_macro", "=", "0", "\n", "for", "c", "in", "classes", ":", "\n", "        ", "roc_auc_macro", "+=", "roc_auc", "[", "c", "]", "\n", "", "roc_auc", "[", "\"macro\"", "]", "=", "roc_auc_macro", "/", "n_classes", "\n", "\n", "#calculate macro auc directly by summing", "\n", "roc_auc_macro", "=", "0", "\n", "macro_auc_nans", "=", "0", "#due to an insufficient amount of pos/neg labels", "\n", "for", "c", "in", "classes", ":", "\n", "        ", "if", "(", "np", ".", "isnan", "(", "roc_auc", "[", "c", "]", ")", ")", ":", "#conservative choice: replace auc by 0.5 if it could not be calculated", "\n", "            ", "roc_auc_macro", "+=", "0.5", "\n", "macro_auc_nans", "+=", "1", "\n", "", "else", ":", "\n", "            ", "roc_auc_macro", "+=", "roc_auc", "[", "c", "]", "\n", "", "", "roc_auc", "[", "\"macro\"", "]", "=", "roc_auc_macro", "/", "n_classes", "\n", "roc_auc", "[", "\"macro_nans\"", "]", "=", "macro_auc_nans", "\n", "\n", "return", "fpr", ",", "tpr", ",", "roc_auc", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.eval_utils_cafa.single_eval_prrc": [[98, 112], ["numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.sum", "numpy.logical_and", "numpy.sum"], "function", ["None"], ["", "def", "single_eval_prrc", "(", "y_true", ",", "y_pred", ",", "threshold", ")", ":", "\n", "    ", "'''evaluate instance-wise scores for a single sample and a single threshold'''", "\n", "y_pred_bin", "=", "(", "y_pred", ">=", "threshold", ")", "\n", "TP", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "y_true", "==", "y_pred_bin", ",", "y_true", ">", "0", ")", ")", "\n", "count", "=", "np", ".", "sum", "(", "y_pred_bin", ")", "#TP+FP", "\n", "\n", "# Find precision: TP / (TP + FP)", "\n", "precision", "=", "TP", "/", "count", "if", "count", ">", "0", "else", "np", ".", "nan", "\n", "# Find recall/TPR/sensitivity: TP / (TP + FN)", "\n", "recall", "=", "TP", "/", "np", ".", "sum", "(", "y_true", ">", "0", ")", "\n", "# Find FPR/specificity: FP/ (FP + TN)=FP/N", "\n", "FP", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "y_true", "!=", "y_pred_bin", ",", "y_pred_bin", ">", "0", ")", ")", "\n", "specificity", "=", "FP", "/", "np", ".", "sum", "(", "y_true", "==", "0", ")", "\n", "return", "precision", ",", "recall", ",", "specificity", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.eval_utils_cafa.eval_prrc": [[114, 141], ["range", "len", "eval_utils_cafa.single_eval_prrc", "len", "len", "print", "len"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.eval_utils_cafa.single_eval_prrc"], ["", "def", "eval_prrc", "(", "y_true", ",", "y_pred", ",", "threshold", ")", ":", "\n", "    ", "'''eval instance-wise scores across all samples for a single threshold'''", "\n", "# Initialize Variables", "\n", "PR", "=", "0.0", "\n", "RC", "=", "0.0", "\n", "SP", "=", "0.0", "\n", "\n", "counts_above_threshold", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "y_true", ")", ")", ":", "\n", "        ", "pr", ",", "rc", ",", "sp", "=", "single_eval_prrc", "(", "y_true", "[", "i", "]", ",", "y_pred", "[", "i", "]", ",", "threshold", ")", "\n", "if", "pr", "is", "not", "np", ".", "nan", ":", "\n", "            ", "PR", "+=", "pr", "\n", "counts_above_threshold", "+=", "1", "\n", "", "RC", "+=", "rc", "\n", "SP", "+=", "sp", "\n", "\n", "", "recall", "=", "RC", "/", "len", "(", "y_true", ")", "\n", "specificity", "=", "SP", "/", "len", "(", "y_true", ")", "\n", "\n", "if", "counts_above_threshold", ">", "0", ":", "\n", "        ", "precision", "=", "PR", "/", "counts_above_threshold", "\n", "", "else", ":", "\n", "        ", "precision", "=", "np", ".", "nan", "\n", "if", "(", "threshold", "<", "1.0", ")", ":", "\n", "            ", "print", "(", "\"No prediction is made above the %.2f threshold\\n\"", "%", "threshold", ")", "\n", "", "", "return", "precision", ",", "recall", ",", "specificity", ",", "counts_above_threshold", "/", "len", "(", "y_true", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.eval_utils_cafa.eval_prrc_parallel": [[143, 167], ["numpy.sum", "numpy.sum", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.repeat", "numpy.logical_and", "numpy.errstate", "numpy.sum", "numpy.logical_and", "numpy.sum", "warnings.catch_warnings", "warnings.simplefilter", "numpy.nanmean", "len", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean"], ["", "def", "eval_prrc_parallel", "(", "y_true", ",", "y_pred", ",", "thresholds", ")", ":", "\n", "\n", "    ", "y_pred_bin", "=", "np", ".", "repeat", "(", "y_pred", "[", "None", ",", ":", ",", ":", "]", ",", "len", "(", "thresholds", ")", ",", "axis", "=", "0", ")", ">=", "thresholds", "[", ":", ",", "None", ",", "None", "]", "#thresholds, samples, classes", "\n", "TP", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "y_true", "==", "True", ",", "y_pred_bin", "==", "True", ")", ",", "axis", "=", "2", ")", "#threshold, samples", "\n", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "        ", "den", "=", "np", ".", "sum", "(", "y_pred_bin", ",", "axis", "=", "2", ")", ">", "0", "\n", "precision", "=", "TP", "/", "np", ".", "sum", "(", "y_pred_bin", ",", "axis", "=", "2", ")", "\n", "precision", "[", "den", "==", "0", "]", "=", "np", ".", "nan", "\n", "\n", "", "recall", "=", "TP", "/", "np", ".", "sum", "(", "y_true", "==", "True", ",", "axis", "=", "1", ")", "#threshold,samples/samples=threshold,samples", "\n", "\n", "FP", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "(", "y_true", "==", "False", ")", ",", "(", "y_pred_bin", "==", "True", ")", ")", ",", "axis", "=", "2", ")", "\n", "specificity", "=", "FP", "/", "np", ".", "sum", "(", "y_true", "==", "False", ",", "axis", "=", "1", ")", "\n", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "#for nan slices", "\n", "        ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ",", "category", "=", "RuntimeWarning", ")", "\n", "av_precision", "=", "np", ".", "nanmean", "(", "precision", ",", "axis", "=", "1", ")", "\n", "\n", "", "av_recall", "=", "np", ".", "mean", "(", "recall", ",", "axis", "=", "1", ")", "\n", "av_specificity", "=", "np", ".", "mean", "(", "specificity", ",", "axis", "=", "1", ")", "\n", "av_coverage", "=", "np", ".", "mean", "(", "den", ",", "axis", "=", "1", ")", "\n", "\n", "return", "av_precision", ",", "av_recall", ",", "av_specificity", ",", "av_coverage", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.eval_utils_cafa.eval_scores": [[170, 235], ["eval_utils_cafa.multiclass_roc_curve"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.eval_utils_cafa.multiclass_roc_curve"], ["", "def", "eval_scores", "(", "y_true", ",", "y_pred", ",", "classes", "=", "None", ",", "num_thresholds", "=", "100", ",", "full_output", "=", "False", ",", "parallel", "=", "True", ")", ":", "\n", "    ", "'''returns a dictionary of performance metrics:\n    sample centric c.f. https://github.com/ashleyzhou972/CAFA_assessment_tool/blob/master/precrec/precRec.py\n    https://www.nature.com/articles/nmeth.2340 vs https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3694662/ and https://arxiv.org/pdf/1601.00891\n    * Fmax, sample AUC, sample Average Precision (as in sklearn)\n\n    label-centric: micro,macro,individual AUC and Average Precision\n    '''", "\n", "results", "=", "{", "}", "\n", "\n", "# thresholds = np.arange(0.00, 1.01, 1./num_thresholds, float)", "\n", "# if(parallel is False):", "\n", "#     PR = np.zeros(len(thresholds))", "\n", "#     RC = np.zeros(len(thresholds))", "\n", "#     SP = np.zeros(len(thresholds))", "\n", "#     COV = np.zeros(len(thresholds))", "\n", "\n", "#     for i,t in enumerate(thresholds):", "\n", "#         PR[i],RC[i],SP[i],COV[i] = eval_prrc(y_true,y_pred,t)", "\n", "#     F =  (2*PR*RC)/(PR+RC)", "\n", "# else:", "\n", "#     PR,RC,SP,COV = eval_prrc_parallel(y_true,y_pred,thresholds)", "\n", "#     F = (2*PR*RC)/(PR+RC)", "\n", "\n", "# if(full_output is True):", "\n", "#     results[\"PR\"] = PR", "\n", "#     results[\"RC\"] = RC", "\n", "#     results[\"SP\"] = SP", "\n", "#     results[\"F\"] = F", "\n", "#     results[\"COV\"] = COV", "\n", "\n", "# if np.isnan(F).sum() == len(F):", "\n", "#     results[\"Fmax\"] = 0", "\n", "#     results[\"precision_at_Fmax\"] = 0", "\n", "#     results[\"recall_at_Fmax\"] = 0", "\n", "#     results[\"threshold_at_Fmax\"] = 0", "\n", "#     results[\"coverage_at_Fmax\"]= 0", "\n", "# else:", "\n", "#     imax = np.nanargmax(F)", "\n", "#     results[\"Fmax\"] = F[imax]", "\n", "#     results[\"precision_at_Fmax\"] = PR[imax]", "\n", "#     results[\"recall_at_Fmax\"] = RC[imax]", "\n", "#     results[\"threshold_at_Fmax\"] = thresholds[imax]", "\n", "#     results[\"coverage_at_Fmax\"]=COV[imax]", "\n", "\n", "# results[\"sample_AUC\"]=auc(1-SP,RC)", "\n", "# #https://github.com/scikit-learn/scikit-learn/blob/1495f6924/sklearn/metrics/ranking.py set final PR value to 1", "\n", "# PR[-1]=1", "\n", "# results[\"sample_APR\"]=auc_prrc_uninterpolated(RC,PR)#skip last point with undefined precision", "\n", "###########################################################", "\n", "#label-centric", "\n", "#\"micro\",\"macro\",i=0...n_classes-1", "\n", "fpr", ",", "tpr", ",", "roc_auc", "=", "multiclass_roc_curve", "(", "y_true", ",", "y_pred", ",", "classes", "=", "classes", ",", "precision_recall", "=", "False", ")", "\n", "if", "(", "full_output", "is", "True", ")", ":", "\n", "        ", "results", "[", "\"fpr\"", "]", "=", "fpr", "\n", "results", "[", "\"tpr\"", "]", "=", "tpr", "\n", "", "results", "[", "\"label_AUC\"", "]", "=", "roc_auc", "\n", "\n", "# rc, pr, prrc_auc = multiclass_roc_curve(y_true, y_pred,classes=classes,precision_recall=True)", "\n", "# if(full_output is True):", "\n", "#     results[\"pr\"]=pr", "\n", "#     results[\"rc\"]=rc", "\n", "# results[\"label_APR\"]=prrc_auc", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.eval_utils_cafa.eval_scores_bootstrap": [[237, 279], ["eval_utils_cafa.eval_scores", "numpy.array", "numpy.array", "tqdm.tqdm", "list", "list", "range", "sklearn.utils.resample", "eval_utils_cafa.eval_scores", "Fmax_diff.append", "sample_AUC_diff.append", "sample_APR_diff.append", "list", "label_AUC_diff.append", "label_APR_diff.append", "numpy.percentile", "numpy.percentile", "numpy.percentile", "numpy.percentile", "numpy.percentile", "numpy.percentile", "numpy.percentile", "numpy.percentile", "numpy.percentile", "numpy.percentile", "res_point[].values", "res_point[].values", "range", "res[].keys", "len", "len", "numpy.array", "numpy.array", "zip", "zip", "list", "list", "res[].values", "res[].values"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.eval_utils_cafa.eval_scores", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.eval_utils_cafa.eval_scores"], ["", "def", "eval_scores_bootstrap", "(", "y_true", ",", "y_pred", ",", "classes", "=", "None", ",", "n_iterations", "=", "10000", ",", "alpha", "=", "0.95", ")", ":", "\n", "#https://ocw.mit.edu/courses/mathematics/18-05-introduction-to-probability-and-statistics-spring-2014/readings/MIT18_05S14_Reading24.pdf empirical bootstrap rather than bootstrap percentiles", "\n", "    ", "Fmax_diff", "=", "[", "]", "\n", "sample_AUC_diff", "=", "[", "]", "\n", "sample_APR_diff", "=", "[", "]", "\n", "label_AUC_diff", "=", "[", "]", "\n", "label_APR_diff", "=", "[", "]", "\n", "label_AUC_keys", "=", "None", "\n", "\n", "#point estimate", "\n", "res_point", "=", "eval_scores", "(", "y_true", ",", "y_pred", ",", "classes", "=", "classes", ")", "\n", "Fmax_point", "=", "res_point", "[", "\"Fmax\"", "]", "\n", "sample_AUC_point", "=", "res_point", "[", "\"sample_AUC\"", "]", "\n", "sample_APR_point", "=", "res_point", "[", "\"sample_APR\"", "]", "\n", "label_AUC_point", "=", "np", ".", "array", "(", "list", "(", "res_point", "[", "\"label_AUC\"", "]", ".", "values", "(", ")", ")", ")", "\n", "label_APR_point", "=", "np", ".", "array", "(", "list", "(", "res_point", "[", "\"label_APR\"", "]", ".", "values", "(", ")", ")", ")", "\n", "\n", "#bootstrap", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "n_iterations", ")", ")", ":", "\n", "        ", "ids", "=", "resample", "(", "range", "(", "len", "(", "y_true", ")", ")", ",", "n_samples", "=", "len", "(", "y_true", ")", ")", "\n", "res", "=", "eval_scores", "(", "y_true", "[", "ids", "]", ",", "y_pred", "[", "ids", "]", ",", "classes", "=", "classes", ")", "\n", "Fmax_diff", ".", "append", "(", "res", "[", "\"Fmax\"", "]", "-", "Fmax_point", ")", "\n", "sample_AUC_diff", ".", "append", "(", "res", "[", "\"sample_AUC\"", "]", "-", "sample_AUC_point", ")", "\n", "sample_APR_diff", ".", "append", "(", "res", "[", "\"sample_APR\"", "]", "-", "sample_APR_point", ")", "\n", "label_AUC_keys", "=", "list", "(", "res", "[", "\"label_AUC\"", "]", ".", "keys", "(", ")", ")", "\n", "label_AUC_diff", ".", "append", "(", "np", ".", "array", "(", "list", "(", "res", "[", "\"label_AUC\"", "]", ".", "values", "(", ")", ")", ")", "-", "label_AUC_point", ")", "\n", "label_APR_diff", ".", "append", "(", "np", ".", "array", "(", "list", "(", "res", "[", "\"label_APR\"", "]", ".", "values", "(", ")", ")", ")", "-", "label_APR_point", ")", "\n", "\n", "", "p", "=", "(", "(", "1.0", "-", "alpha", ")", "/", "2.0", ")", "*", "100", "\n", "Fmax_low", "=", "Fmax_point", "+", "np", ".", "percentile", "(", "Fmax_diff", ",", "p", ")", "\n", "sample_AUC_low", "=", "sample_AUC_point", "+", "np", ".", "percentile", "(", "sample_AUC_diff", ",", "p", ")", "\n", "sample_APR_low", "=", "sample_APR_point", "+", "np", ".", "percentile", "(", "sample_APR_diff", ",", "p", ")", "\n", "label_AUC_low", "=", "label_AUC_point", "+", "np", ".", "percentile", "(", "label_AUC_diff", ",", "p", ",", "axis", "=", "0", ")", "\n", "label_APR_low", "=", "label_APR_point", "+", "np", ".", "percentile", "(", "label_APR_diff", ",", "p", ",", "axis", "=", "0", ")", "\n", "p", "=", "(", "alpha", "+", "(", "(", "1.0", "-", "alpha", ")", "/", "2.0", ")", ")", "*", "100", "\n", "Fmax_high", "=", "Fmax_point", "+", "np", ".", "percentile", "(", "Fmax_diff", ",", "p", ")", "\n", "sample_AUC_high", "=", "sample_AUC_point", "+", "np", ".", "percentile", "(", "sample_AUC_diff", ",", "p", ")", "\n", "sample_APR_high", "=", "sample_APR_point", "+", "np", ".", "percentile", "(", "sample_APR_diff", ",", "p", ")", "\n", "label_AUC_high", "=", "label_AUC_point", "+", "np", ".", "percentile", "(", "label_AUC_diff", ",", "p", ",", "axis", "=", "0", ")", "\n", "label_APR_high", "=", "label_APR_point", "+", "np", ".", "percentile", "(", "label_APR_diff", ",", "p", ",", "axis", "=", "0", ")", "\n", "\n", "return", "{", "\"Fmax\"", ":", "[", "Fmax_low", ",", "Fmax_point", ",", "Fmax_high", "]", ",", "\"sample_AUC\"", ":", "[", "sample_AUC_low", ",", "sample_AUC_point", ",", "sample_AUC_high", "]", ",", "\"sample_APR\"", ":", "[", "sample_APR_low", ",", "sample_APR_point", ",", "sample_APR_high", "]", ",", "\"label_AUC\"", ":", "{", "k", ":", "[", "v1", ",", "v2", ",", "v3", "]", "for", "k", ",", "v1", ",", "v2", ",", "v3", "in", "zip", "(", "label_AUC_keys", ",", "label_AUC_low", ",", "label_AUC_point", ",", "label_AUC_high", ")", "}", ",", "\"label_APR\"", ":", "{", "k", ":", "[", "v1", ",", "v2", ",", "v3", "]", "for", "k", ",", "v1", ",", "v2", ",", "v3", "in", "zip", "(", "label_AUC_keys", ",", "label_APR_low", ",", "label_APR_point", ",", "label_APR_high", ")", "}", "}", "", "", ""]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.TimeseriesDatasetCrops.__init__": [[304, 411], ["numpy.array", "enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.array().astype", "numpy.zeros", "isinstance", "isinstance", "print", "numpy.load", "numpy.dtype", "numpy.array().astype", "df.iterrows", "range", "range", "len", "isinstance", "isinstance", "numpy.stack", "numpy.array", "numpy.array().astype", "str", "numpy.load", "numpy.array().astype", "numpy.dtype", "list", "len", "zip", "numpy.array", "numpy.array", "str", "isinstance", "isinstance", "numpy.array", "numpy.load", "numpy.load", "len", "range", "min", "timeseries_utils.TimeseriesDatasetCrops.df_idx_mapping.append", "timeseries_utils.TimeseriesDatasetCrops.start_idx_mapping.append", "timeseries_utils.TimeseriesDatasetCrops.end_idx_mapping.append", "df[].astype", "numpy.array", "numpy.array", "df[].apply", "str", "timeseries_utils.TimeseriesDatasetCrops.memmap_meta_filename.stem.split"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "df", ",", "output_size", ",", "chunk_length", ",", "min_chunk_length", ",", "memmap_filename", "=", "None", ",", "npy_data", "=", "None", ",", "random_crop", "=", "True", ",", "data_folder", "=", "None", ",", "num_classes", "=", "2", ",", "copies", "=", "0", ",", "col_lbl", "=", "\"label\"", ",", "stride", "=", "None", ",", "start_idx", "=", "0", ",", "annotation", "=", "False", ",", "transforms", "=", "None", ",", "sample_items_per_record", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        accepts three kinds of input:\n        1) filenames pointing to aligned numpy arrays [timesteps,channels,...] for data and either integer labels or filename pointing to numpy arrays[timesteps,...] e.g. for annotations\n        2) memmap_filename to memmap file (same argument that was passed to reformat_as_memmap) for data [concatenated,...] and labels- label column in df corresponds to index in this memmap\n        3) npy_data [samples,ts,...] (either path or np.array directly- also supporting variable length input) - label column in df corresponds to sampleid\n\n        transforms: list of callables (transformations) or (preferred) single instance e.g. from torchvision.transforms.Compose (applied in the specified order i.e. leftmost element first)\n        \n        col_lbl = None: return dummy label 0 (e.g. for unsupervised pretraining)\n        \"\"\"", "\n", "assert", "not", "(", "(", "memmap_filename", "is", "not", "None", ")", "and", "(", "npy_data", "is", "not", "None", ")", ")", "\n", "# require integer entries if using memmap or npy", "\n", "assert", "(", "memmap_filename", "is", "None", "and", "npy_data", "is", "None", ")", "or", "df", ".", "data", ".", "dtype", "==", "np", ".", "int64", "\n", "\n", "self", ".", "timeseries_df_data", "=", "np", ".", "array", "(", "df", "[", "\"data\"", "]", ")", "\n", "if", "(", "self", ".", "timeseries_df_data", ".", "dtype", "not", "in", "[", "np", ".", "int16", ",", "np", ".", "int32", ",", "np", ".", "int64", "]", ")", ":", "\n", "            ", "assert", "(", "memmap_filename", "is", "None", "and", "npy_data", "is", "None", ")", "#only for filenames in mode files", "\n", "self", ".", "timeseries_df_data", "=", "np", ".", "array", "(", "df", "[", "\"data\"", "]", ".", "astype", "(", "str", ")", ")", ".", "astype", "(", "np", ".", "string_", ")", "\n", "\n", "", "if", "(", "col_lbl", "is", "None", ")", ":", "# use dummy labels", "\n", "            ", "self", ".", "timeseries_df_label", "=", "np", ".", "zeros", "(", "len", "(", "df", ")", ")", "\n", "", "else", ":", "# use actual labels", "\n", "            ", "if", "(", "isinstance", "(", "df", "[", "col_lbl", "]", ".", "iloc", "[", "0", "]", ",", "list", ")", "or", "isinstance", "(", "df", "[", "col_lbl", "]", ".", "iloc", "[", "0", "]", ",", "np", ".", "ndarray", ")", ")", ":", "#stack arrays/lists for proper batching", "\n", "                ", "self", ".", "timeseries_df_label", "=", "np", ".", "stack", "(", "df", "[", "col_lbl", "]", ")", "\n", "", "else", ":", "# single integers/floats", "\n", "                ", "self", ".", "timeseries_df_label", "=", "np", ".", "array", "(", "df", "[", "col_lbl", "]", ")", "\n", "\n", "", "if", "(", "self", ".", "timeseries_df_label", ".", "dtype", "not", "in", "[", "np", ".", "int16", ",", "np", ".", "int32", ",", "np", ".", "int64", ",", "np", ".", "float32", ",", "np", ".", "float64", "]", ")", ":", "#everything else cannot be batched anyway mp.Manager().list(self.timeseries_df_label)", "\n", "                ", "assert", "(", "annotation", "and", "memmap_filename", "is", "None", "and", "npy_data", "is", "None", ")", "#only for filenames in mode files", "\n", "self", ".", "timeseries_df_label", "=", "np", ".", "array", "(", "df", "[", "col_lbl", "]", ".", "apply", "(", "lambda", "x", ":", "str", "(", "x", ")", ")", ")", ".", "astype", "(", "np", ".", "string_", ")", "\n", "\n", "", "", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "data_folder", "=", "data_folder", "\n", "self", ".", "transforms", "=", "transforms", "\n", "if", "(", "isinstance", "(", "self", ".", "transforms", ",", "list", ")", "or", "isinstance", "(", "self", ".", "transforms", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "            ", "print", "(", "\"Warning: the use of list as arguments for transforms is dicouraged\"", ")", "\n", "", "self", ".", "annotation", "=", "annotation", "\n", "self", ".", "col_lbl", "=", "col_lbl", "\n", "\n", "self", ".", "c", "=", "num_classes", "\n", "\n", "self", ".", "mode", "=", "\"files\"", "\n", "\n", "if", "(", "memmap_filename", "is", "not", "None", ")", ":", "\n", "            ", "self", ".", "memmap_meta_filename", "=", "memmap_filename", ".", "parent", "/", "(", "memmap_filename", ".", "stem", "+", "\"_meta.npz\"", ")", "\n", "self", ".", "mode", "=", "\"memmap\"", "\n", "memmap_meta", "=", "np", ".", "load", "(", "self", ".", "memmap_meta_filename", ",", "allow_pickle", "=", "True", ")", "\n", "self", ".", "memmap_start", "=", "memmap_meta", "[", "\"start\"", "]", "\n", "self", ".", "memmap_shape", "=", "memmap_meta", "[", "\"shape\"", "]", "\n", "self", ".", "memmap_length", "=", "memmap_meta", "[", "\"length\"", "]", "\n", "self", ".", "memmap_file_idx", "=", "memmap_meta", "[", "\"file_idx\"", "]", "\n", "self", ".", "memmap_dtype", "=", "np", ".", "dtype", "(", "str", "(", "memmap_meta", "[", "\"dtype\"", "]", ")", ")", "\n", "self", ".", "memmap_filenames", "=", "np", ".", "array", "(", "memmap_meta", "[", "\"filenames\"", "]", ")", ".", "astype", "(", "np", ".", "string_", ")", "#save as byte to avoid issue with mp", "\n", "if", "(", "annotation", ")", ":", "\n", "                ", "memmap_meta_label", "=", "np", ".", "load", "(", "self", ".", "memmap_meta_filename", ".", "parent", "/", "(", "\"_\"", ".", "join", "(", "self", ".", "memmap_meta_filename", ".", "stem", ".", "split", "(", "\"_\"", ")", "[", ":", "-", "1", "]", ")", "+", "\"_label_meta.npz\"", ")", ",", "allow_pickle", "=", "True", ")", "\n", "self", ".", "memmap_shape_label", "=", "memmap_meta_label", "[", "\"shape\"", "]", "\n", "self", ".", "memmap_filenames_label", "=", "np", ".", "array", "(", "memmap_meta_label", "[", "\"filenames\"", "]", ")", ".", "astype", "(", "np", ".", "string_", ")", "\n", "self", ".", "memmap_dtype_label", "=", "np", ".", "dtype", "(", "str", "(", "memmap_meta_label", "[", "\"dtype\"", "]", ")", ")", "\n", "", "", "elif", "(", "npy_data", "is", "not", "None", ")", ":", "\n", "            ", "self", ".", "mode", "=", "\"npy\"", "\n", "if", "(", "isinstance", "(", "npy_data", ",", "np", ".", "ndarray", ")", "or", "isinstance", "(", "npy_data", ",", "list", ")", ")", ":", "\n", "                ", "self", ".", "npy_data", "=", "np", ".", "array", "(", "npy_data", ")", "\n", "assert", "(", "annotation", "is", "False", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "npy_data", "=", "np", ".", "load", "(", "npy_data", ",", "allow_pickle", "=", "True", ")", "\n", "", "if", "(", "annotation", ")", ":", "\n", "                ", "self", ".", "npy_data_label", "=", "np", ".", "load", "(", "npy_data", ".", "parent", "/", "(", "npy_data", ".", "stem", "+", "\"_label.npy\"", ")", ",", "allow_pickle", "=", "True", ")", "\n", "\n", "", "", "self", ".", "random_crop", "=", "random_crop", "\n", "self", ".", "sample_items_per_record", "=", "sample_items_per_record", "\n", "\n", "self", ".", "df_idx_mapping", "=", "[", "]", "\n", "self", ".", "start_idx_mapping", "=", "[", "]", "\n", "self", ".", "end_idx_mapping", "=", "[", "]", "\n", "\n", "for", "df_idx", ",", "(", "id", ",", "row", ")", "in", "enumerate", "(", "df", ".", "iterrows", "(", ")", ")", ":", "\n", "            ", "if", "(", "self", ".", "mode", "==", "\"files\"", ")", ":", "\n", "                ", "data_length", "=", "row", "[", "\"data_length\"", "]", "\n", "", "elif", "(", "self", ".", "mode", "==", "\"memmap\"", ")", ":", "\n", "                ", "data_length", "=", "self", ".", "memmap_length", "[", "row", "[", "\"data\"", "]", "]", "\n", "", "else", ":", "#npy", "\n", "                ", "data_length", "=", "len", "(", "self", ".", "npy_data", "[", "row", "[", "\"data\"", "]", "]", ")", "\n", "\n", "", "if", "(", "chunk_length", "==", "0", ")", ":", "#do not split", "\n", "                ", "idx_start", "=", "[", "start_idx", "]", "\n", "idx_end", "=", "[", "data_length", "]", "\n", "", "else", ":", "\n", "                ", "idx_start", "=", "list", "(", "range", "(", "start_idx", ",", "data_length", ",", "chunk_length", "if", "stride", "is", "None", "else", "stride", ")", ")", "\n", "idx_end", "=", "[", "min", "(", "l", "+", "chunk_length", ",", "data_length", ")", "for", "l", "in", "idx_start", "]", "\n", "\n", "#remove final chunk(s) if too short", "\n", "", "for", "i", "in", "range", "(", "len", "(", "idx_start", ")", ")", ":", "\n", "                ", "if", "(", "idx_end", "[", "i", "]", "-", "idx_start", "[", "i", "]", "<", "min_chunk_length", ")", ":", "\n", "                    ", "del", "idx_start", "[", "i", ":", "]", "\n", "del", "idx_end", "[", "i", ":", "]", "\n", "break", "\n", "#append to lists", "\n", "", "", "for", "_", "in", "range", "(", "copies", "+", "1", ")", ":", "\n", "                ", "for", "i_s", ",", "i_e", "in", "zip", "(", "idx_start", ",", "idx_end", ")", ":", "\n", "                    ", "self", ".", "df_idx_mapping", ".", "append", "(", "df_idx", ")", "\n", "self", ".", "start_idx_mapping", ".", "append", "(", "i_s", ")", "\n", "self", ".", "end_idx_mapping", ".", "append", "(", "i_e", ")", "\n", "#convert to np.array to avoid mp issues with python lists", "\n", "", "", "", "self", ".", "df_idx_mapping", "=", "np", ".", "array", "(", "self", ".", "df_idx_mapping", ")", "\n", "self", ".", "start_idx_mapping", "=", "np", ".", "array", "(", "self", ".", "start_idx_mapping", ")", "\n", "self", ".", "end_idx_mapping", "=", "np", ".", "array", "(", "self", ".", "end_idx_mapping", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.TimeseriesDatasetCrops.__len__": [[412, 414], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "df_idx_mapping", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.TimeseriesDatasetCrops.is_empty": [[415, 418], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_empty", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "df_idx_mapping", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.TimeseriesDatasetCrops.__getitem__": [[419, 437], ["range", "tuple", "timeseries_utils.TimeseriesDatasetCrops.get_sample_length", "timeseries_utils.TimeseriesDatasetCrops._getitem", "lst.append", "random.randint", "timeseries_utils.TimeseriesDatasetCrops._getitem"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.TimeseriesDatasetCrops.get_sample_length", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.TimeseriesDatasetCrops._getitem", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.TimeseriesDatasetCrops._getitem"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "lst", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "sample_items_per_record", ")", ":", "\n", "#determine crop idxs", "\n", "            ", "timesteps", "=", "self", ".", "get_sample_length", "(", "idx", ")", "\n", "\n", "if", "(", "self", ".", "random_crop", ")", ":", "#random crop", "\n", "                ", "if", "(", "timesteps", "==", "self", ".", "output_size", ")", ":", "\n", "                    ", "start_idx_rel", "=", "0", "\n", "", "else", ":", "\n", "                    ", "start_idx_rel", "=", "random", ".", "randint", "(", "0", ",", "timesteps", "-", "self", ".", "output_size", "-", "1", ")", "#np.random.randint(0, timesteps - self.output_size)", "\n", "", "", "else", ":", "\n", "                ", "start_idx_rel", "=", "(", "timesteps", "-", "self", ".", "output_size", ")", "//", "2", "\n", "", "if", "(", "self", ".", "sample_items_per_record", "==", "1", ")", ":", "\n", "                ", "return", "self", ".", "_getitem", "(", "idx", ",", "start_idx_rel", ")", "\n", "", "else", ":", "\n", "                ", "lst", ".", "append", "(", "self", ".", "_getitem", "(", "idx", ",", "start_idx_rel", ")", ")", "\n", "", "", "return", "tuple", "(", "lst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.TimeseriesDatasetCrops._getitem": [[438, 506], ["isinstance", "str", "numpy.load", "str", "str", "numpy.memmap", "numpy.copy", "t", "timeseries_utils.TimeseriesDatasetCrops.transforms", "numpy.load", "str", "numpy.memmap", "numpy.copy", "tuple", "tuple"], "methods", ["None"], ["", "def", "_getitem", "(", "self", ",", "idx", ",", "start_idx_rel", ")", ":", "\n", "#low-level function that actually fetches the data", "\n", "        ", "df_idx", "=", "self", ".", "df_idx_mapping", "[", "idx", "]", "\n", "start_idx", "=", "self", ".", "start_idx_mapping", "[", "idx", "]", "\n", "end_idx", "=", "self", ".", "end_idx_mapping", "[", "idx", "]", "\n", "#determine crop idxs", "\n", "timesteps", "=", "end_idx", "-", "start_idx", "\n", "assert", "(", "timesteps", ">=", "self", ".", "output_size", ")", "\n", "start_idx_crop", "=", "start_idx", "+", "start_idx_rel", "\n", "end_idx_crop", "=", "start_idx_crop", "+", "self", ".", "output_size", "\n", "\n", "#print(idx,start_idx,end_idx,start_idx_crop,end_idx_crop)", "\n", "#load the actual data", "\n", "if", "(", "self", ".", "mode", "==", "\"files\"", ")", ":", "#from separate files", "\n", "            ", "data_filename", "=", "str", "(", "self", ".", "timeseries_df_data", "[", "df_idx", "]", ",", "encoding", "=", "'utf-8'", ")", "#todo: fix potential issues here", "\n", "if", "self", ".", "data_folder", "is", "not", "None", ":", "\n", "                ", "data_filename", "=", "self", ".", "data_folder", "/", "data_filename", "\n", "", "data", "=", "np", ".", "load", "(", "data_filename", ",", "allow_pickle", "=", "True", ")", "[", "start_idx_crop", ":", "end_idx_crop", "]", "#data type has to be adjusted when saving to npy", "\n", "\n", "ID", "=", "data_filename", ".", "stem", "\n", "\n", "if", "(", "self", ".", "annotation", "is", "True", ")", ":", "\n", "                ", "label_filename", "=", "str", "(", "self", ".", "timeseries_df_label", "[", "df_idx", "]", ",", "encoding", "=", "'utf-8'", ")", "\n", "if", "self", ".", "data_folder", "is", "not", "None", ":", "\n", "                    ", "label_filename", "=", "self", ".", "data_folder", "/", "label_filename", "\n", "", "label", "=", "np", ".", "load", "(", "label_filename", ",", "allow_pickle", "=", "True", ")", "[", "start_idx_crop", ":", "end_idx_crop", "]", "#data type has to be adjusted when saving to npy", "\n", "", "else", ":", "\n", "                ", "label", "=", "self", ".", "timeseries_df_label", "[", "df_idx", "]", "#input type has to be adjusted in the dataframe", "\n", "", "", "elif", "(", "self", ".", "mode", "==", "\"memmap\"", ")", ":", "#from one memmap file", "\n", "            ", "memmap_idx", "=", "self", ".", "timeseries_df_data", "[", "df_idx", "]", "#grab the actual index (Note the df to create the ds might be a subset of the original df used to create the memmap)", "\n", "memmap_file_idx", "=", "self", ".", "memmap_file_idx", "[", "memmap_idx", "]", "\n", "idx_offset", "=", "self", ".", "memmap_start", "[", "memmap_idx", "]", "\n", "\n", "#wi = torch.utils.data.get_worker_info()", "\n", "#pid = 0 if wi is None else wi.id#os.getpid()", "\n", "#print(\"idx\",idx,\"ID\",ID,\"idx_offset\",idx_offset,\"start_idx_crop\",start_idx_crop,\"df_idx\", self.df_idx_mapping[idx],\"pid\",pid)", "\n", "mem_filename", "=", "str", "(", "self", ".", "memmap_filenames", "[", "memmap_file_idx", "]", ",", "encoding", "=", "'utf-8'", ")", "\n", "mem_file", "=", "np", ".", "memmap", "(", "self", ".", "memmap_meta_filename", ".", "parent", "/", "mem_filename", ",", "self", ".", "memmap_dtype", ",", "mode", "=", "'r'", ",", "shape", "=", "tuple", "(", "self", ".", "memmap_shape", "[", "memmap_file_idx", "]", ")", ")", "\n", "data", "=", "np", ".", "copy", "(", "mem_file", "[", "idx_offset", "+", "start_idx_crop", ":", "idx_offset", "+", "end_idx_crop", "]", ")", "\n", "del", "mem_file", "\n", "#print(mem_file[idx_offset + start_idx_crop: idx_offset + end_idx_crop])", "\n", "if", "(", "self", ".", "annotation", ")", ":", "\n", "                ", "mem_filename_label", "=", "str", "(", "self", ".", "memmap_filenames_label", "[", "memmap_file_idx", "]", ",", "encoding", "=", "'utf-8'", ")", "\n", "mem_file_label", "=", "np", ".", "memmap", "(", "self", ".", "memmap_meta_filename", ".", "parent", "/", "mem_filename_label", ",", "self", ".", "memmap_dtype_label", ",", "mode", "=", "'r'", ",", "shape", "=", "tuple", "(", "self", ".", "memmap_shape_label", "[", "memmap_file_idx", "]", ")", ")", "\n", "\n", "label", "=", "np", ".", "copy", "(", "mem_file_label", "[", "idx_offset", "+", "start_idx_crop", ":", "idx_offset", "+", "end_idx_crop", "]", ")", "\n", "del", "mem_file_label", "\n", "", "else", ":", "\n", "                ", "label", "=", "self", ".", "timeseries_df_label", "[", "df_idx", "]", "\n", "", "", "else", ":", "#single npy array", "\n", "            ", "ID", "=", "self", ".", "timeseries_df_data", "[", "df_idx", "]", "\n", "\n", "data", "=", "self", ".", "npy_data", "[", "ID", "]", "[", "start_idx_crop", ":", "end_idx_crop", "]", "\n", "\n", "if", "(", "self", ".", "annotation", ")", ":", "\n", "                ", "label", "=", "self", ".", "npy_data_label", "[", "ID", "]", "[", "start_idx_crop", ":", "end_idx_crop", "]", "\n", "", "else", ":", "\n", "                ", "label", "=", "self", ".", "timeseries_df_label", "[", "df_idx", "]", "\n", "\n", "", "", "sample", "=", "(", "data", ",", "label", ")", "\n", "\n", "if", "(", "isinstance", "(", "self", ".", "transforms", ",", "list", ")", ")", ":", "#transforms passed as list", "\n", "            ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "                ", "sample", "=", "t", "(", "sample", ")", "\n", "", "", "elif", "(", "self", ".", "transforms", "is", "not", "None", ")", ":", "#single transform e.g. from torchvision.transforms.Compose", "\n", "            ", "sample", "=", "self", ".", "transforms", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.TimeseriesDatasetCrops.get_sampling_weights": [[507, 544], ["numpy.zeros", "enumerate", "len", "zip", "enumerate", "enumerate", "numpy.min", "zip", "zip", "length_per_class.keys", "length_per_group.keys"], "methods", ["None"], ["", "def", "get_sampling_weights", "(", "self", ",", "class_weight_dict", ",", "length_weighting", "=", "False", ",", "timeseries_df_group_by_col", "=", "None", ")", ":", "\n", "        ", "'''\n        class_weight_dict: dictionary of class weights\n        length_weighting: weigh samples by length\n        timeseries_df_group_by_col: column of the pandas df used to create the object'''", "\n", "assert", "(", "self", ".", "annotation", "is", "False", ")", "\n", "assert", "(", "length_weighting", "is", "False", "or", "timeseries_df_group_by_col", "is", "None", ")", "\n", "weights", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "df_idx_mapping", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "length_per_class", "=", "{", "}", "\n", "length_per_group", "=", "{", "}", "\n", "for", "iw", ",", "(", "i", ",", "s", ",", "e", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "df_idx_mapping", ",", "self", ".", "start_idx_mapping", ",", "self", ".", "end_idx_mapping", ")", ")", ":", "\n", "            ", "label", "=", "self", ".", "timeseries_df_label", "[", "i", "]", "\n", "weight", "=", "class_weight_dict", "[", "label", "]", "\n", "if", "(", "length_weighting", ")", ":", "\n", "                ", "if", "label", "in", "length_per_class", ".", "keys", "(", ")", ":", "\n", "                    ", "length_per_class", "[", "label", "]", "+=", "e", "-", "s", "\n", "", "else", ":", "\n", "                    ", "length_per_class", "[", "label", "]", "=", "e", "-", "s", "\n", "", "", "if", "(", "timeseries_df_group_by_col", "is", "not", "None", ")", ":", "\n", "                ", "group", "=", "timeseries_df_group_by_col", "[", "i", "]", "\n", "if", "group", "in", "length_per_group", ".", "keys", "(", ")", ":", "\n", "                    ", "length_per_group", "[", "group", "]", "+=", "e", "-", "s", "\n", "", "else", ":", "\n", "                    ", "length_per_group", "[", "group", "]", "=", "e", "-", "s", "\n", "", "", "weights", "[", "iw", "]", "=", "weight", "\n", "\n", "", "if", "(", "length_weighting", ")", ":", "#need second pass to properly take into account the total length per class", "\n", "            ", "for", "iw", ",", "(", "i", ",", "s", ",", "e", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "df_idx_mapping", ",", "self", ".", "start_idx_mapping", ",", "self", ".", "end_idx_mapping", ")", ")", ":", "\n", "                ", "label", "=", "self", ".", "timeseries_df_label", "[", "i", "]", "\n", "weights", "[", "iw", "]", "=", "(", "e", "-", "s", ")", "/", "length_per_class", "[", "label", "]", "*", "weights", "[", "iw", "]", "\n", "", "", "if", "(", "timeseries_df_group_by_col", "is", "not", "None", ")", ":", "\n", "            ", "for", "iw", ",", "(", "i", ",", "s", ",", "e", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "df_idx_mapping", ",", "self", ".", "start_idx_mapping", ",", "self", ".", "end_idx_mapping", ")", ")", ":", "\n", "                ", "group", "=", "timeseries_df_group_by_col", "[", "i", "]", "\n", "weights", "[", "iw", "]", "=", "(", "e", "-", "s", ")", "/", "length_per_group", "[", "group", "]", "*", "weights", "[", "iw", "]", "\n", "\n", "", "", "weights", "=", "weights", "/", "np", ".", "min", "(", "weights", ")", "#normalize smallest weight to 1", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.TimeseriesDatasetCrops.get_id_mapping": [[545, 547], ["None"], "methods", ["None"], ["", "def", "get_id_mapping", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "df_idx_mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.TimeseriesDatasetCrops.get_sample_id": [[548, 550], ["None"], "methods", ["None"], ["", "def", "get_sample_id", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "df_idx_mapping", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.TimeseriesDatasetCrops.get_sample_length": [[551, 553], ["None"], "methods", ["None"], ["", "def", "get_sample_length", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "end_idx_mapping", "[", "idx", "]", "-", "self", ".", "start_idx_mapping", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.TimeseriesDatasetCrops.get_sample_start": [[554, 556], ["None"], "methods", ["None"], ["", "def", "get_sample_start", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "start_idx_mapping", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.RandomCrop.__init__": [[562, 565], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_size", ",", "annotation", "=", "False", ")", ":", "\n", "        ", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "annotation", "=", "annotation", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.RandomCrop.__call__": [[566, 581], ["len", "random.randint"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "\n", "timesteps", "=", "len", "(", "data", ")", "\n", "assert", "(", "timesteps", ">=", "self", ".", "output_size", ")", "\n", "if", "(", "timesteps", "==", "self", ".", "output_size", ")", ":", "\n", "            ", "start", "=", "0", "\n", "", "else", ":", "\n", "            ", "start", "=", "random", ".", "randint", "(", "0", ",", "timesteps", "-", "self", ".", "output_size", "-", "1", ")", "#np.random.randint(0, timesteps - self.output_size)", "\n", "\n", "", "data", "=", "data", "[", "start", ":", "start", "+", "self", ".", "output_size", "]", "\n", "if", "(", "self", ".", "annotation", ")", ":", "\n", "            ", "label", "=", "label", "[", "start", ":", "start", "+", "self", ".", "output_size", "]", "\n", "\n", "", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.CenterCrop.__init__": [[587, 590], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_size", ",", "annotation", "=", "False", ")", ":", "\n", "        ", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "annotation", "=", "annotation", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.CenterCrop.__call__": [[591, 602], ["len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "\n", "timesteps", "=", "len", "(", "data", ")", "\n", "start", "=", "(", "timesteps", "-", "self", ".", "output_size", ")", "//", "2", "\n", "\n", "data", "=", "data", "[", "start", ":", "start", "+", "self", ".", "output_size", "]", "\n", "if", "(", "self", ".", "annotation", ")", ":", "\n", "            ", "label", "=", "label", "[", "start", ":", "start", "+", "self", ".", "output_size", "]", "\n", "\n", "", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.GaussianNoise.__init__": [[608, 610], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale", "=", "0.1", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.GaussianNoise.__call__": [[611, 618], ["numpy.reshape", "numpy.array", "random.gauss", "range", "numpy.prod"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "self", ".", "scale", "==", "0", ":", "\n", "            ", "return", "sample", "\n", "", "else", ":", "\n", "            ", "data", ",", "label", "=", "sample", "\n", "data", "=", "data", "+", "np", ".", "reshape", "(", "np", ".", "array", "(", "[", "random", ".", "gauss", "(", "0", ",", "self", ".", "scale", ")", "for", "_", "in", "range", "(", "np", ".", "prod", "(", "data", ".", "shape", ")", ")", "]", ")", ",", "data", ".", "shape", ")", "#np.random.normal(scale=self.scale,size=data.shape).astype(np.float32)", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.Rescale.__init__": [[624, 627], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale", "=", "0.5", ",", "interpolation_order", "=", "3", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "self", ".", "interpolation_order", "=", "interpolation_order", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.Rescale.__call__": [[628, 636], ["int", "skimage.transform.resize().astype", "len", "skimage.transform.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "self", ".", "scale", "==", "1", ":", "\n", "            ", "return", "sample", "\n", "", "else", ":", "\n", "            ", "data", ",", "label", "=", "sample", "\n", "timesteps_new", "=", "int", "(", "self", ".", "scale", "*", "len", "(", "data", ")", ")", "\n", "data", "=", "transform", ".", "resize", "(", "data", ",", "(", "timesteps_new", ",", "data", ".", "shape", "[", "1", "]", ")", ",", "order", "=", "interpolation_order", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.ToTensor.__init__": [[640, 644], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transpose_data", "=", "True", ",", "transpose_label", "=", "False", ")", ":", "\n", "#swap channel and time axis for direct application of pytorch's convs", "\n", "        ", "self", ".", "transpose_data", "=", "transpose_data", "\n", "self", ".", "transpose_label", "=", "transpose_label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.ToTensor.__call__": [[645, 669], ["isinstance", "isinstance", "timeseries_utils.ToTensor.__call__._to_tensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "def", "_to_tensor", "(", "data", ",", "transpose", "=", "False", ")", ":", "\n", "            ", "if", "(", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "                ", "if", "(", "transpose", ")", ":", "#seq,[x,y,]ch", "\n", "                    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "moveaxis", "(", "data", ",", "-", "1", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "                    ", "return", "torch", ".", "from_numpy", "(", "data", ")", "\n", "", "", "else", ":", "#default_collate will take care of it", "\n", "                ", "return", "data", "\n", "\n", "", "", "data", ",", "label", "=", "sample", "\n", "\n", "if", "not", "isinstance", "(", "data", ",", "tuple", ")", ":", "\n", "            ", "data", "=", "_to_tensor", "(", "data", ",", "self", ".", "transpose_data", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "tuple", "(", "_to_tensor", "(", "x", ",", "self", ".", "transpose_data", ")", "for", "x", "in", "data", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "label", ",", "tuple", ")", ":", "\n", "            ", "label", "=", "_to_tensor", "(", "label", ",", "self", ".", "transpose_label", ")", "\n", "", "else", ":", "\n", "            ", "label", "=", "tuple", "(", "_to_tensor", "(", "x", ",", "self", ".", "transpose_label", ")", "for", "x", "in", "label", ")", "\n", "\n", "", "return", "data", ",", "label", "#returning as a tuple (potentially of lists)", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.Normalize.__init__": [[674, 683], ["stats_mean.astype", "len", "range", "stats_std.astype", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "stats_mean", ",", "stats_std", ",", "input", "=", "True", ",", "channels", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "stats_mean", "=", "stats_mean", ".", "astype", "(", "np", ".", "float32", ")", "if", "stats_mean", "is", "not", "None", "else", "None", "\n", "self", ".", "stats_std", "=", "stats_std", ".", "astype", "(", "np", ".", "float32", ")", "+", "1e-8", "if", "stats_std", "is", "not", "None", "else", "None", "\n", "self", ".", "input", "=", "input", "\n", "if", "(", "len", "(", "channels", ")", ">", "0", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "stats_mean", ")", ")", ":", "\n", "                ", "if", "(", "not", "(", "i", "in", "channels", ")", ")", ":", "\n", "                    ", "self", ".", "stats_mean", "[", ":", ",", "i", "]", "=", "0", "\n", "self", ".", "stats_std", "[", ":", ",", "i", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.Normalize.__call__": [[684, 697], ["None"], "methods", ["None"], ["", "", "", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "datax", ",", "labelx", "=", "sample", "\n", "data", "=", "datax", "if", "self", ".", "input", "else", "labelx", "\n", "#assuming channel last", "\n", "if", "(", "self", ".", "stats_mean", "is", "not", "None", ")", ":", "\n", "            ", "data", "=", "data", "-", "self", ".", "stats_mean", "\n", "", "if", "(", "self", ".", "stats_std", "is", "not", "None", ")", ":", "\n", "            ", "data", "=", "data", "/", "self", ".", "stats_std", "\n", "\n", "", "if", "(", "self", ".", "input", ")", ":", "\n", "            ", "return", "(", "data", ",", "labelx", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "datax", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.NormalizeBatch.__init__": [[703, 708], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "input", "=", "True", ",", "channels", "=", "[", "]", ",", "axis", "=", "None", ")", ":", "\n", "        ", "self", ".", "channels", "=", "channels", "\n", "self", ".", "channels_keep", "=", "None", "\n", "self", ".", "input", "=", "input", "\n", "self", ".", "axis", "=", "axis", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.NormalizeBatch.__call__": [[709, 731], ["numpy.mean", "numpy.std", "len", "numpy.setdiff", "tuple", "range", "range", "tuple", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "datax", ",", "labelx", "=", "sample", "\n", "data", "=", "datax", "if", "self", ".", "input", "else", "labelx", "\n", "#assuming channel last", "\n", "#batch_mean = np.mean(data,axis=tuple(range(0,len(data)-1)))", "\n", "#batch_std = np.std(data,axis=tuple(range(0,len(data)-1)))+1e-8", "\n", "batch_mean", "=", "np", ".", "mean", "(", "data", ",", "axis", "=", "self", ".", "axis", "if", "self", ".", "axis", "is", "not", "None", "else", "tuple", "(", "range", "(", "0", ",", "len", "(", "data", ".", "shape", ")", "-", "1", ")", ")", ")", "\n", "batch_std", "=", "np", ".", "std", "(", "data", ",", "axis", "=", "self", ".", "axis", "if", "self", ".", "axis", "is", "not", "None", "else", "tuple", "(", "range", "(", "0", ",", "len", "(", "data", ".", "shape", ")", "-", "1", ")", ")", ")", "+", "1e-8", "\n", "\n", "if", "(", "len", "(", "self", ".", "channels", ")", ">", "0", ")", ":", "\n", "            ", "if", "(", "self", ".", "channels_keep", "is", "None", ")", ":", "\n", "                ", "self", ".", "channels_keep", "=", "np", ".", "setdiff", "(", "range", "(", "data", ".", "shape", "[", "-", "1", "]", ")", ",", "self", ".", "channels", ")", "\n", "\n", "", "batch_mean", "[", "self", ".", "channels_keep", "]", "=", "0", "\n", "batch_std", "[", "self", ".", "channels_keep", "]", "=", "1", "\n", "\n", "", "data", "=", "(", "data", "-", "batch_mean", ")", "/", "batch_std", "\n", "\n", "if", "(", "self", ".", "input", ")", ":", "\n", "            ", "return", "(", "data", ",", "labelx", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "datax", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.ButterFilter.__init__": [[737, 741], ["timeseries_utils.butter_filter"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.butter_filter"], ["def", "__init__", "(", "self", ",", "lowcut", "=", "50", ",", "highcut", "=", "50", ",", "fs", "=", "100", ",", "order", "=", "5", ",", "btype", "=", "'band'", ",", "forwardbackward", "=", "True", ",", "input", "=", "True", ")", ":", "\n", "        ", "self", ".", "filter", "=", "butter_filter", "(", "lowcut", ",", "highcut", ",", "fs", ",", "order", ",", "btype", ")", "\n", "self", ".", "input", "=", "input", "\n", "self", ".", "forwardbackward", "=", "forwardbackward", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.ButterFilter.__call__": [[742, 755], ["scipy.signal.sosfiltfilt", "scipy.signal.sosfilt"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "datax", ",", "labelx", "=", "sample", "\n", "data", "=", "datax", "if", "self", ".", "input", "else", "labelx", "\n", "\n", "if", "(", "self", ".", "forwardbackward", ")", ":", "\n", "            ", "data", "=", "sosfiltfilt", "(", "self", ".", "filter", ",", "data", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "sosfilt", "(", "self", ".", "filter", ",", "data", ",", "axis", "=", "0", ")", "\n", "\n", "", "if", "(", "self", ".", "input", ")", ":", "\n", "            ", "return", "(", "data", ",", "labelx", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "datax", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.ChannelFilter.__init__": [[761, 764], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "channels", "=", "[", "0", "]", ",", "input", "=", "True", ")", ":", "\n", "        ", "self", ".", "channels", "=", "channels", "\n", "self", ".", "input", "=", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.ChannelFilter.__call__": [[765, 771], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "if", "(", "self", ".", "input", ")", ":", "\n", "            ", "return", "(", "data", "[", "...", ",", "self", ".", "channels", "]", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "data", ",", "label", "[", "...", ",", "self", ".", "channels", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.Transform.__init__": [[777, 780], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "func", ",", "input", "=", "False", ")", ":", "\n", "        ", "self", ".", "func", "=", "func", "\n", "self", ".", "input", "=", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.Transform.__call__": [[781, 787], ["timeseries_utils.Transform.func", "timeseries_utils.Transform.func"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "if", "(", "self", ".", "input", ")", ":", "\n", "            ", "return", "(", "self", ".", "func", "(", "data", ")", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "data", ",", "self", ".", "func", "(", "label", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.TupleTransform.__init__": [[793, 795], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "func", ",", "input", "=", "False", ")", ":", "\n", "        ", "self", ".", "func", "=", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.TupleTransform.__call__": [[796, 799], ["timeseries_utils.TupleTransform.func"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "return", "self", ".", "func", "(", "data", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.butter_filter": [[41, 49], ["scipy.signal.butter"], "function", ["None"], ["def", "butter_filter", "(", "lowcut", "=", "10", ",", "highcut", "=", "20", ",", "fs", "=", "50", ",", "order", "=", "5", ",", "btype", "=", "'band'", ")", ":", "\n", "    ", "'''returns butterworth filter with given specifications'''", "\n", "nyq", "=", "0.5", "*", "fs", "\n", "low", "=", "lowcut", "/", "nyq", "\n", "high", "=", "highcut", "/", "nyq", "\n", "\n", "sos", "=", "butter", "(", "order", ",", "[", "low", ",", "high", "]", "if", "btype", "==", "\"band\"", "else", "(", "low", "if", "btype", "==", "\"low\"", "else", "high", ")", ",", "analog", "=", "False", ",", "btype", "=", "btype", ",", "output", "=", "'sos'", ")", "\n", "return", "sos", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.butter_filter_frequency_response": [[50, 56], ["scipy.signal.sosfreqz"], "function", ["None"], ["", "def", "butter_filter_frequency_response", "(", "filter", ")", ":", "\n", "    ", "'''returns frequency response of a given filter (result of call of butter_filter)'''", "\n", "w", ",", "h", "=", "sosfreqz", "(", "filter", ")", "\n", "#gain vs. freq(Hz)", "\n", "#plt.plot((fs * 0.5 / np.pi) * w, abs(h))", "\n", "return", "w", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.apply_butter_filter": [[57, 63], ["scipy.signal.sosfiltfilt", "scipy.signal.sosfilt"], "function", ["None"], ["", "def", "apply_butter_filter", "(", "data", ",", "filter", ",", "forwardbackward", "=", "True", ")", ":", "\n", "    ", "'''pass filter from call of butter_filter to data (assuming time axis at dimension 0)'''", "\n", "if", "(", "forwardbackward", ")", ":", "\n", "        ", "return", "sosfiltfilt", "(", "filter", ",", "data", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "data", "=", "sosfilt", "(", "filter", ",", "data", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.save_dataset": [[65, 78], ["pathlib.Path", "df.to_pickle", "isinstance", "numpy.save", "numpy.save", "open", "pickle.dump", "open.close", "numpy.save"], "function", ["None"], ["", "", "def", "save_dataset", "(", "df", ",", "lbl_itos", ",", "mean", ",", "std", ",", "target_root", ",", "filename_postfix", "=", "\"\"", ",", "protocol", "=", "4", ")", ":", "\n", "    ", "target_root", "=", "Path", "(", "target_root", ")", "\n", "df", ".", "to_pickle", "(", "target_root", "/", "(", "\"df\"", "+", "filename_postfix", "+", "\".pkl\"", ")", ",", "protocol", "=", "protocol", ")", "\n", "\n", "if", "(", "isinstance", "(", "lbl_itos", ",", "dict", ")", ")", ":", "#dict as pickle", "\n", "        ", "outfile", "=", "open", "(", "target_root", "/", "(", "\"lbl_itos\"", "+", "filename_postfix", "+", "\".pkl\"", ")", ",", "\"wb\"", ")", "\n", "pickle", ".", "dump", "(", "lbl_itos", ",", "outfile", ",", "protocol", "=", "protocol", ")", "\n", "outfile", ".", "close", "(", ")", "\n", "", "else", ":", "#array", "\n", "        ", "np", ".", "save", "(", "target_root", "/", "(", "\"lbl_itos\"", "+", "filename_postfix", "+", "\".npy\"", ")", ",", "lbl_itos", ")", "\n", "\n", "", "np", ".", "save", "(", "target_root", "/", "(", "\"mean\"", "+", "filename_postfix", "+", "\".npy\"", ")", ",", "mean", ")", "\n", "np", ".", "save", "(", "target_root", "/", "(", "\"std\"", "+", "filename_postfix", "+", "\".npy\"", ")", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.load_dataset": [[79, 105], ["pathlib.Path", "numpy.load", "numpy.load", "pickle.load", "pickle.load", "open", "pickle.load", "open.close", "numpy.load", "open", "open"], "function", ["None"], ["", "def", "load_dataset", "(", "target_root", ",", "filename_postfix", "=", "\"\"", ",", "df_mapped", "=", "True", ")", ":", "\n", "    ", "target_root", "=", "Path", "(", "target_root", ")", "\n", "# if(df_mapped):", "\n", "#     df = pd.read_pickle(target_root/(\"df_memmap\"+filename_postfix+\".pkl\"))", "\n", "# else:", "\n", "#     df = pd.read_pickle(target_root/(\"df\"+filename_postfix+\".pkl\")", "\n", "\n", "### due to pickle 5 protocol error", "\n", "\n", "if", "(", "df_mapped", ")", ":", "\n", "        ", "df", "=", "pickle", ".", "load", "(", "open", "(", "target_root", "/", "(", "\"df_memmap\"", "+", "filename_postfix", "+", "\".pkl\"", ")", ",", "\"rb\"", ")", ")", "\n", "", "else", ":", "\n", "        ", "df", "=", "pickle", ".", "load", "(", "open", "(", "target_root", "/", "(", "\"df\"", "+", "filename_postfix", "+", "\".pkl\"", ")", ",", "\"rb\"", ")", ")", "\n", "\n", "\n", "", "if", "(", "(", "target_root", "/", "(", "\"lbl_itos\"", "+", "filename_postfix", "+", "\".pkl\"", ")", ")", ".", "exists", "(", ")", ")", ":", "#dict as pickle", "\n", "        ", "infile", "=", "open", "(", "target_root", "/", "(", "\"lbl_itos\"", "+", "filename_postfix", "+", "\".pkl\"", ")", ",", "\"rb\"", ")", "\n", "lbl_itos", "=", "pickle", ".", "load", "(", "infile", ")", "\n", "infile", ".", "close", "(", ")", "\n", "", "else", ":", "#array", "\n", "        ", "lbl_itos", "=", "np", ".", "load", "(", "target_root", "/", "(", "\"lbl_itos\"", "+", "filename_postfix", "+", "\".npy\"", ")", ")", "\n", "\n", "\n", "", "mean", "=", "np", ".", "load", "(", "target_root", "/", "(", "\"mean\"", "+", "filename_postfix", "+", "\".npy\"", ")", ")", "\n", "std", "=", "np", ".", "load", "(", "target_root", "/", "(", "\"std\"", "+", "filename_postfix", "+", "\".npy\"", ")", ")", "\n", "return", "df", ",", "lbl_itos", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_add_chunk_col": [[107, 110], ["df.groupby().cumcount", "df.groupby"], "function", ["None"], ["", "def", "dataset_add_chunk_col", "(", "df", ",", "col", "=", "\"data\"", ")", ":", "\n", "    ", "'''add a chunk column to the dataset df'''", "\n", "df", "[", "\"chunk\"", "]", "=", "df", ".", "groupby", "(", "col", ")", ".", "cumcount", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_add_length_col": [[111, 114], ["df[].apply", "len", "numpy.load"], "function", ["None"], ["", "def", "dataset_add_length_col", "(", "df", ",", "col", "=", "\"data\"", ",", "data_folder", "=", "None", ")", ":", "\n", "    ", "'''add a length column to the dataset df'''", "\n", "df", "[", "col", "+", "\"_length\"", "]", "=", "df", "[", "col", "]", ".", "apply", "(", "lambda", "x", ":", "len", "(", "np", ".", "load", "(", "x", "if", "data_folder", "is", "None", "else", "data_folder", "/", "x", ",", "allow_pickle", "=", "True", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_add_labels_col": [[115, 118], ["df[].apply", "list", "numpy.unique", "numpy.load"], "function", ["None"], ["", "def", "dataset_add_labels_col", "(", "df", ",", "col", "=", "\"label\"", ",", "data_folder", "=", "None", ")", ":", "\n", "    ", "'''add a column with unique labels in column col'''", "\n", "df", "[", "col", "+", "\"_labels\"", "]", "=", "df", "[", "col", "]", ".", "apply", "(", "lambda", "x", ":", "list", "(", "np", ".", "unique", "(", "np", ".", "load", "(", "x", "if", "data_folder", "is", "None", "else", "data_folder", "/", "x", ",", "allow_pickle", "=", "True", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_add_mean_col": [[119, 122], ["df[].apply", "numpy.mean", "numpy.load"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean"], ["", "def", "dataset_add_mean_col", "(", "df", ",", "col", "=", "\"data\"", ",", "axis", "=", "(", "0", ")", ",", "data_folder", "=", "None", ")", ":", "\n", "    ", "'''adds a column with mean'''", "\n", "df", "[", "col", "+", "\"_mean\"", "]", "=", "df", "[", "col", "]", ".", "apply", "(", "lambda", "x", ":", "np", ".", "mean", "(", "np", ".", "load", "(", "x", "if", "data_folder", "is", "None", "else", "data_folder", "/", "x", ",", "allow_pickle", "=", "True", ")", ",", "axis", "=", "axis", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_add_median_col": [[123, 126], ["df[].apply", "numpy.median", "numpy.load"], "function", ["None"], ["", "def", "dataset_add_median_col", "(", "df", ",", "col", "=", "\"data\"", ",", "axis", "=", "(", "0", ")", ",", "data_folder", "=", "None", ")", ":", "\n", "    ", "'''adds a column with median'''", "\n", "df", "[", "col", "+", "\"_median\"", "]", "=", "df", "[", "col", "]", ".", "apply", "(", "lambda", "x", ":", "np", ".", "median", "(", "np", ".", "load", "(", "x", "if", "data_folder", "is", "None", "else", "data_folder", "/", "x", ",", "allow_pickle", "=", "True", ")", ",", "axis", "=", "axis", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_add_std_col": [[127, 130], ["df[].apply", "numpy.std", "numpy.load"], "function", ["None"], ["", "def", "dataset_add_std_col", "(", "df", ",", "col", "=", "\"data\"", ",", "axis", "=", "(", "0", ")", ",", "data_folder", "=", "None", ")", ":", "\n", "    ", "'''adds a column with mean'''", "\n", "df", "[", "col", "+", "\"_std\"", "]", "=", "df", "[", "col", "]", ".", "apply", "(", "lambda", "x", ":", "np", ".", "std", "(", "np", ".", "load", "(", "x", "if", "data_folder", "is", "None", "else", "data_folder", "/", "x", ",", "allow_pickle", "=", "True", ")", ",", "axis", "=", "axis", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_add_iqr_col": [[131, 134], ["df[].apply", "scipy.stats.iqr", "numpy.load"], "function", ["None"], ["", "def", "dataset_add_iqr_col", "(", "df", ",", "col", "=", "\"data\"", ",", "axis", "=", "(", "0", ")", ",", "data_folder", "=", "None", ")", ":", "\n", "    ", "'''adds a column with mean'''", "\n", "df", "[", "col", "+", "\"_iqr\"", "]", "=", "df", "[", "col", "]", ".", "apply", "(", "lambda", "x", ":", "iqr", "(", "np", ".", "load", "(", "x", "if", "data_folder", "is", "None", "else", "data_folder", "/", "x", ",", "allow_pickle", "=", "True", ")", ",", "axis", "=", "axis", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.dataset_get_stats": [[135, 162], ["list", "numpy.power", "list", "timeseries_utils.dataset_get_stats.combine_all_means_vars"], "function", ["None"], ["", "def", "dataset_get_stats", "(", "df", ",", "col", "=", "\"data\"", ",", "simple", "=", "True", ")", ":", "\n", "    ", "'''creates (weighted) means and stds from mean, std and length cols of the df'''", "\n", "if", "(", "simple", ")", ":", "\n", "        ", "return", "df", "[", "col", "+", "\"_mean\"", "]", ".", "mean", "(", ")", ",", "df", "[", "col", "+", "\"_std\"", "]", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "#https://notmatthancock.github.io/2017/03/23/simple-batch-stat-updates.html", "\n", "#or https://gist.github.com/thomasbrandon/ad5b1218fc573c10ea4e1f0c63658469", "\n", "        ", "def", "combine_two_means_vars", "(", "x1", ",", "x2", ")", ":", "\n", "            ", "(", "mean1", ",", "var1", ",", "n1", ")", "=", "x1", "\n", "(", "mean2", ",", "var2", ",", "n2", ")", "=", "x2", "\n", "mean", "=", "mean1", "*", "n1", "/", "(", "n1", "+", "n2", ")", "+", "mean2", "*", "n2", "/", "(", "n1", "+", "n2", ")", "\n", "var", "=", "var1", "*", "n1", "/", "(", "n1", "+", "n2", ")", "+", "var2", "*", "n2", "/", "(", "n1", "+", "n2", ")", "+", "n1", "*", "n2", "/", "(", "n1", "+", "n2", ")", "/", "(", "n1", "+", "n2", ")", "*", "np", ".", "power", "(", "mean1", "-", "mean2", ",", "2", ")", "\n", "return", "(", "mean", ",", "var", ",", "(", "n1", "+", "n2", ")", ")", "\n", "\n", "", "def", "combine_all_means_vars", "(", "means", ",", "vars", ",", "lengths", ")", ":", "\n", "            ", "inputs", "=", "list", "(", "zip", "(", "means", ",", "vars", ",", "lengths", ")", ")", "\n", "result", "=", "inputs", "[", "0", "]", "\n", "\n", "for", "inputs2", "in", "inputs", "[", "1", ":", "]", ":", "\n", "                ", "result", "=", "combine_two_means_vars", "(", "result", ",", "inputs2", ")", "\n", "", "return", "result", "\n", "\n", "", "means", "=", "list", "(", "df", "[", "col", "+", "\"_mean\"", "]", ")", "\n", "vars", "=", "np", ".", "power", "(", "list", "(", "df", "[", "col", "+", "\"_std\"", "]", ")", ",", "2", ")", "\n", "lengths", "=", "list", "(", "df", "[", "col", "+", "\"_length\"", "]", ")", "\n", "mean", ",", "var", ",", "length", "=", "combine_all_means_vars", "(", "means", ",", "vars", ",", "lengths", ")", "\n", "return", "mean", ",", "np", ".", "sqrt", "(", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.npys_to_memmap_batched": [[164, 226], ["numpy.array", "tqdm.auto.tqdm", "numpy.savez", "list", "np.concatenate.append", "data_lengths.append", "enumerate", "numpy.load", "len", "numpy.concatenate", "numpy.concatenate", "np.memmap.flush", "npy.unlink", "numpy.sum", "shape.append", "numpy.concatenate", "numpy.concatenate", "numpy.memmap", "numpy.concatenate", "numpy.concatenate", "numpy.memmap", "len", "filenames.append", "filenames.append", "numpy.cumsum", "tuple", "len", "len", "numpy.sum", "numpy.cumsum", "len", "str", "len", "len", "len"], "function", ["None"], ["", "", "def", "npys_to_memmap_batched", "(", "npys", ",", "target_filename", ",", "max_len", "=", "0", ",", "delete_npys", "=", "True", ",", "batch_length", "=", "900000", ")", ":", "\n", "    ", "memmap", "=", "None", "\n", "start", "=", "np", ".", "array", "(", "[", "0", "]", ")", "#start_idx in current memmap file (always already the next start- delete last token in the end)", "\n", "length", "=", "[", "]", "#length of segment", "\n", "filenames", "=", "[", "]", "#memmap files", "\n", "file_idx", "=", "[", "]", "#corresponding memmap file for sample", "\n", "shape", "=", "[", "]", "#shapes of all memmap files", "\n", "\n", "data", "=", "[", "]", "\n", "data_lengths", "=", "[", "]", "\n", "dtype", "=", "None", "\n", "\n", "for", "idx", ",", "npy", "in", "tqdm", "(", "list", "(", "enumerate", "(", "npys", ")", ")", ")", ":", "\n", "\n", "        ", "data", ".", "append", "(", "np", ".", "load", "(", "npy", ",", "allow_pickle", "=", "True", ")", ")", "\n", "data_lengths", ".", "append", "(", "len", "(", "data", "[", "-", "1", "]", ")", ")", "\n", "\n", "if", "(", "idx", "==", "len", "(", "npys", ")", "-", "1", "or", "np", ".", "sum", "(", "data_lengths", ")", ">", "batch_length", ")", ":", "#flush", "\n", "            ", "data", "=", "np", ".", "concatenate", "(", "data", ")", "\n", "if", "(", "memmap", "is", "None", "or", "(", "max_len", ">", "0", "and", "start", "[", "-", "1", "]", ">", "max_len", ")", ")", ":", "#new memmap file has to be created", "\n", "                ", "if", "(", "max_len", ">", "0", ")", ":", "\n", "                    ", "filenames", ".", "append", "(", "target_filename", ".", "parent", "/", "(", "target_filename", ".", "stem", "+", "\"_\"", "+", "str", "(", "len", "(", "filenames", ")", ")", "+", "\".npy\"", ")", ")", "\n", "", "else", ":", "\n", "                    ", "filenames", ".", "append", "(", "target_filename", ")", "\n", "\n", "", "shape", ".", "append", "(", "[", "np", ".", "sum", "(", "data_lengths", ")", "]", "+", "[", "l", "for", "l", "in", "data", ".", "shape", "[", "1", ":", "]", "]", ")", "#insert present shape", "\n", "\n", "if", "(", "memmap", "is", "not", "None", ")", ":", "#an existing memmap exceeded max_len", "\n", "                    ", "del", "memmap", "\n", "#create new memmap", "\n", "", "start", "[", "-", "1", "]", "=", "0", "\n", "start", "=", "np", ".", "concatenate", "(", "[", "start", ",", "np", ".", "cumsum", "(", "data_lengths", ")", "]", ")", "\n", "length", "=", "np", ".", "concatenate", "(", "[", "length", ",", "data_lengths", "]", ")", "\n", "\n", "memmap", "=", "np", ".", "memmap", "(", "filenames", "[", "-", "1", "]", ",", "dtype", "=", "data", ".", "dtype", ",", "mode", "=", "'w+'", ",", "shape", "=", "data", ".", "shape", ")", "\n", "", "else", ":", "\n", "#append to existing memmap", "\n", "                ", "start", "=", "np", ".", "concatenate", "(", "[", "start", ",", "start", "[", "-", "1", "]", "+", "np", ".", "cumsum", "(", "data_lengths", ")", "]", ")", "\n", "length", "=", "np", ".", "concatenate", "(", "[", "length", ",", "data_lengths", "]", ")", "\n", "shape", "[", "-", "1", "]", "=", "[", "start", "[", "-", "1", "]", "]", "+", "[", "l", "for", "l", "in", "data", ".", "shape", "[", "1", ":", "]", "]", "\n", "memmap", "=", "np", ".", "memmap", "(", "filenames", "[", "-", "1", "]", ",", "dtype", "=", "data", ".", "dtype", ",", "mode", "=", "'r+'", ",", "shape", "=", "tuple", "(", "shape", "[", "-", "1", "]", ")", ")", "\n", "\n", "#store mapping memmap_id to memmap_file_id", "\n", "", "file_idx", "=", "np", ".", "concatenate", "(", "[", "file_idx", ",", "[", "(", "len", "(", "filenames", ")", "-", "1", ")", "]", "*", "len", "(", "data_lengths", ")", "]", ")", "\n", "#insert the actual data", "\n", "memmap", "[", "start", "[", "-", "len", "(", "data_lengths", ")", "-", "1", "]", ":", "start", "[", "-", "len", "(", "data_lengths", ")", "-", "1", "]", "+", "len", "(", "data", ")", "]", "=", "data", "[", ":", "]", "\n", "memmap", ".", "flush", "(", ")", "\n", "dtype", "=", "data", ".", "dtype", "\n", "data", "=", "[", "]", "#reset data storage", "\n", "data_lengths", "=", "[", "]", "\n", "\n", "", "", "start", "=", "start", "[", ":", "-", "1", "]", "#remove the last element", "\n", "#cleanup", "\n", "for", "npy", "in", "npys", ":", "\n", "        ", "if", "(", "delete_npys", "is", "True", ")", ":", "\n", "            ", "npy", ".", "unlink", "(", ")", "\n", "", "", "del", "memmap", "\n", "\n", "#convert everything to relative paths", "\n", "filenames", "=", "[", "f", ".", "name", "for", "f", "in", "filenames", "]", "\n", "#save metadata", "\n", "np", ".", "savez", "(", "target_filename", ".", "parent", "/", "(", "target_filename", ".", "stem", "+", "\"_meta.npz\"", ")", ",", "start", "=", "start", ",", "length", "=", "length", ",", "shape", "=", "shape", ",", "file_idx", "=", "file_idx", ",", "dtype", "=", "dtype", ",", "filenames", "=", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.npys_to_memmap": [[228, 273], ["tqdm.auto.tqdm", "numpy.savez", "list", "numpy.load", "file_idx.append", "np.memmap.flush", "len", "len", "shape.append", "enumerate", "start.append", "length.append", "numpy.memmap", "start.append", "length.append", "numpy.memmap", "npy.unlink", "filenames.append", "filenames.append", "shape.append", "len", "tuple", "str", "len"], "function", ["None"], ["", "def", "npys_to_memmap", "(", "npys", ",", "target_filename", ",", "max_len", "=", "0", ",", "delete_npys", "=", "True", ")", ":", "\n", "    ", "memmap", "=", "None", "\n", "start", "=", "[", "]", "#start_idx in current memmap file", "\n", "length", "=", "[", "]", "#length of segment", "\n", "filenames", "=", "[", "]", "#memmap files", "\n", "file_idx", "=", "[", "]", "#corresponding memmap file for sample", "\n", "shape", "=", "[", "]", "\n", "\n", "for", "idx", ",", "npy", "in", "tqdm", "(", "list", "(", "enumerate", "(", "npys", ")", ")", ")", ":", "\n", "        ", "data", "=", "np", ".", "load", "(", "npy", ",", "allow_pickle", "=", "True", ")", "\n", "if", "(", "memmap", "is", "None", "or", "(", "max_len", ">", "0", "and", "start", "[", "-", "1", "]", "+", "length", "[", "-", "1", "]", ">", "max_len", ")", ")", ":", "\n", "            ", "if", "(", "max_len", ">", "0", ")", ":", "\n", "                ", "filenames", ".", "append", "(", "target_filename", ".", "parent", "/", "(", "target_filename", ".", "stem", "+", "\"_\"", "+", "str", "(", "len", "(", "filenames", ")", "+", "\".npy\"", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "filenames", ".", "append", "(", "target_filename", ")", "\n", "\n", "", "if", "(", "memmap", "is", "not", "None", ")", ":", "#an existing memmap exceeded max_len", "\n", "                ", "shape", ".", "append", "(", "[", "start", "[", "-", "1", "]", "+", "length", "[", "-", "1", "]", "]", "+", "[", "l", "for", "l", "in", "data", ".", "shape", "[", "1", ":", "]", "]", ")", "\n", "del", "memmap", "\n", "#create new memmap", "\n", "", "start", ".", "append", "(", "0", ")", "\n", "length", ".", "append", "(", "data", ".", "shape", "[", "0", "]", ")", "\n", "memmap", "=", "np", ".", "memmap", "(", "filenames", "[", "-", "1", "]", ",", "dtype", "=", "data", ".", "dtype", ",", "mode", "=", "'w+'", ",", "shape", "=", "data", ".", "shape", ")", "\n", "", "else", ":", "\n", "#append to existing memmap", "\n", "            ", "start", ".", "append", "(", "start", "[", "-", "1", "]", "+", "length", "[", "-", "1", "]", ")", "\n", "length", ".", "append", "(", "data", ".", "shape", "[", "0", "]", ")", "\n", "memmap", "=", "np", ".", "memmap", "(", "filenames", "[", "-", "1", "]", ",", "dtype", "=", "data", ".", "dtype", ",", "mode", "=", "'r+'", ",", "shape", "=", "tuple", "(", "[", "start", "[", "-", "1", "]", "+", "length", "[", "-", "1", "]", "]", "+", "[", "l", "for", "l", "in", "data", ".", "shape", "[", "1", ":", "]", "]", ")", ")", "\n", "\n", "#store mapping memmap_id to memmap_file_id", "\n", "", "file_idx", ".", "append", "(", "len", "(", "filenames", ")", "-", "1", ")", "\n", "#insert the actual data", "\n", "memmap", "[", "start", "[", "-", "1", "]", ":", "start", "[", "-", "1", "]", "+", "length", "[", "-", "1", "]", "]", "=", "data", "[", ":", "]", "\n", "memmap", ".", "flush", "(", ")", "\n", "if", "(", "delete_npys", "is", "True", ")", ":", "\n", "            ", "npy", ".", "unlink", "(", ")", "\n", "", "", "del", "memmap", "\n", "\n", "#append final shape if necessary", "\n", "if", "(", "len", "(", "shape", ")", "<", "len", "(", "filenames", ")", ")", ":", "\n", "        ", "shape", ".", "append", "(", "[", "start", "[", "-", "1", "]", "+", "length", "[", "-", "1", "]", "]", "+", "[", "l", "for", "l", "in", "data", ".", "shape", "[", "1", ":", "]", "]", ")", "\n", "#convert everything to relative paths", "\n", "", "filenames", "=", "[", "f", ".", "name", "for", "f", "in", "filenames", "]", "\n", "#save metadata", "\n", "np", ".", "savez", "(", "target_filename", ".", "parent", "/", "(", "target_filename", ".", "stem", "+", "\"_meta.npz\"", ")", ",", "start", "=", "start", ",", "length", "=", "length", ",", "shape", "=", "shape", ",", "file_idx", "=", "file_idx", ",", "dtype", "=", "data", ".", "dtype", ",", "filenames", "=", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.reformat_as_memmap": [[274, 299], ["df.iterrows", "df.copy", "numpy.arange", "df.copy.to_pickle", "npys_data.append", "timeseries_utils.npys_to_memmap", "timeseries_utils.npys_to_memmap_batched", "len", "npys_label.append", "timeseries_utils.npys_to_memmap", "timeseries_utils.npys_to_memmap_batched"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.npys_to_memmap", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.npys_to_memmap_batched", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.npys_to_memmap", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.npys_to_memmap_batched"], ["", "def", "reformat_as_memmap", "(", "df", ",", "target_filename", ",", "data_folder", "=", "None", ",", "annotation", "=", "False", ",", "max_len", "=", "0", ",", "delete_npys", "=", "True", ",", "col_data", "=", "\"data\"", ",", "col_label", "=", "\"label\"", ",", "batch_length", "=", "0", ")", ":", "\n", "    ", "npys_data", "=", "[", "]", "\n", "npys_label", "=", "[", "]", "\n", "\n", "for", "id", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "        ", "npys_data", ".", "append", "(", "data_folder", "/", "row", "[", "col_data", "]", "if", "data_folder", "is", "not", "None", "else", "row", "[", "col_data", "]", ")", "\n", "if", "(", "annotation", ")", ":", "\n", "            ", "npys_label", ".", "append", "(", "data_folder", "/", "row", "[", "col_label", "]", "if", "data_folder", "is", "not", "None", "else", "row", "[", "col_label", "]", ")", "\n", "", "", "if", "(", "batch_length", "==", "0", ")", ":", "\n", "        ", "npys_to_memmap", "(", "npys_data", ",", "target_filename", ",", "max_len", "=", "max_len", ",", "delete_npys", "=", "delete_npys", ")", "\n", "", "else", ":", "\n", "        ", "npys_to_memmap_batched", "(", "npys_data", ",", "target_filename", ",", "max_len", "=", "max_len", ",", "delete_npys", "=", "delete_npys", ",", "batch_length", "=", "batch_length", ")", "\n", "", "if", "(", "annotation", ")", ":", "\n", "        ", "if", "(", "batch_length", "==", "0", ")", ":", "\n", "            ", "npys_to_memmap", "(", "npys_label", ",", "target_filename", ".", "parent", "/", "(", "target_filename", ".", "stem", "+", "\"_label.npy\"", ")", ",", "max_len", "=", "max_len", ",", "delete_npys", "=", "delete_npys", ")", "\n", "", "else", ":", "\n", "            ", "npys_to_memmap_batched", "(", "npys_label", ",", "target_filename", ".", "parent", "/", "(", "target_filename", ".", "stem", "+", "\"_label.npy\"", ")", ",", "max_len", "=", "max_len", ",", "delete_npys", "=", "delete_npys", ",", "batch_length", "=", "batch_length", ")", "\n", "\n", "#replace data(filename) by integer", "\n", "", "", "df_mapped", "=", "df", ".", "copy", "(", ")", "\n", "df_mapped", "[", "\"data_original\"", "]", "=", "df_mapped", ".", "data", "\n", "df_mapped", "[", "\"data\"", "]", "=", "np", ".", "arange", "(", "len", "(", "df_mapped", ")", ")", "\n", "\n", "df_mapped", ".", "to_pickle", "(", "target_filename", ".", "parent", "/", "(", "\"df_\"", "+", "target_filename", ".", "stem", "+", "\".pkl\"", ")", ")", "\n", "return", "df_mapped", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.aggregate_predictions": [[801, 829], ["numpy.unique", "len", "len", "print", "preds_aggregated.append", "numpy.array", "numpy.unique", "aggregate_fn", "numpy.all", "targs_aggregated.append", "numpy.array", "numpy.array", "numpy.where", "numpy.where"], "function", ["None"], ["", "", "def", "aggregate_predictions", "(", "preds", ",", "targs", "=", "None", ",", "idmap", "=", "None", ",", "aggregate_fn", "=", "np", ".", "mean", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "'''\n    aggregates potentially multiple predictions per sample (can also pass targs for convenience)\n    idmap: idmap as returned by TimeSeriesCropsDataset's get_id_mapping\n    preds: ordered predictions as returned by learn.get_preds()\n    aggregate_fn: function that is used to aggregate multiple predictions per sample (most commonly np.amax or np.mean)\n    '''", "\n", "if", "(", "idmap", "is", "not", "None", "and", "len", "(", "idmap", ")", "!=", "len", "(", "np", ".", "unique", "(", "idmap", ")", ")", ")", ":", "\n", "        ", "if", "(", "verbose", ")", ":", "\n", "            ", "print", "(", "\"aggregating predictions...\"", ")", "\n", "", "preds_aggregated", "=", "[", "]", "\n", "targs_aggregated", "=", "[", "]", "\n", "for", "i", "in", "np", ".", "unique", "(", "idmap", ")", ":", "\n", "            ", "preds_local", "=", "preds", "[", "np", ".", "where", "(", "idmap", "==", "i", ")", "[", "0", "]", "]", "\n", "preds_aggregated", ".", "append", "(", "aggregate_fn", "(", "preds_local", ",", "axis", "=", "0", ")", ")", "\n", "if", "targs", "is", "not", "None", ":", "\n", "                ", "targs_local", "=", "targs", "[", "np", ".", "where", "(", "idmap", "==", "i", ")", "[", "0", "]", "]", "\n", "assert", "(", "np", ".", "all", "(", "targs_local", "==", "targs_local", "[", "0", "]", ")", ")", "#all labels have to agree", "\n", "targs_aggregated", ".", "append", "(", "targs_local", "[", "0", "]", ")", "\n", "", "", "if", "(", "targs", "is", "None", ")", ":", "\n", "            ", "return", "np", ".", "array", "(", "preds_aggregated", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "array", "(", "preds_aggregated", ")", ",", "np", ".", "array", "(", "targs_aggregated", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "(", "targs", "is", "None", ")", ":", "\n", "            ", "return", "preds", "\n", "", "else", ":", "\n", "            ", "return", "preds", ",", "targs", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Transformation.__init__": [[70, 72], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "params", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Transformation.get_params": [[73, 75], ["None"], "methods", ["None"], ["", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.GaussianNoise.__init__": [[81, 84], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "scale", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "GaussianNoise", ",", "self", ")", ".", "__init__", "(", "scale", "=", "scale", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.GaussianNoise.__call__": [[85, 94], ["numpy.reshape", "numpy.array", "random.gauss", "range", "numpy.prod"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "self", ".", "scale", "==", "0", ":", "\n", "            ", "return", "sample", "\n", "", "else", ":", "\n", "            ", "data", ",", "label", "=", "sample", "\n", "# np.random.normal(scale=self.scale,size=data.shape).astype(np.float32)", "\n", "data", "=", "data", "+", "np", ".", "reshape", "(", "np", ".", "array", "(", "[", "random", ".", "gauss", "(", "0", ",", "self", ".", "scale", ")", "\n", "for", "_", "in", "range", "(", "np", ".", "prod", "(", "data", ".", "shape", ")", ")", "]", ")", ",", "data", ".", "shape", ")", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.GaussianNoise.__str__": [[95, 97], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"GaussianNoise\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TGaussianNoise.__init__": [[102, 105], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "scale", "=", "0.01", ")", ":", "\n", "        ", "super", "(", "TGaussianNoise", ",", "self", ")", ".", "__init__", "(", "scale", "=", "scale", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TGaussianNoise.__call__": [[106, 113], ["torch.randn"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "self", ".", "scale", "==", "0", ":", "\n", "            ", "return", "sample", "\n", "", "else", ":", "\n", "            ", "data", ",", "label", "=", "sample", "\n", "data", "=", "data", "+", "self", ".", "scale", "*", "torch", ".", "randn", "(", "data", ".", "shape", ")", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TGaussianNoise.__str__": [[114, 116], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"GaussianNoise\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.RandomResizedCrop.__init__": [[121, 126], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "crop_ratio_range", "=", "[", "0.5", ",", "1.0", "]", ",", "output_size", "=", "250", ")", ":", "\n", "        ", "super", "(", "RandomResizedCrop", ",", "self", ")", ".", "__init__", "(", "\n", "crop_ratio_range", "=", "crop_ratio_range", ",", "output_size", "=", "output_size", ")", "\n", "self", ".", "crop_ratio_range", "=", "crop_ratio_range", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.RandomResizedCrop.__call__": [[127, 151], ["numpy.full", "random.uniform", "timeseries_utils.RandomCrop", "numpy.sort", "numpy.concatenate", "timeseries_transformations.interpolate", "numpy.sort", "int", "numpy.random.choice", "numpy.random.choice", "numpy.array", "numpy.array", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.interpolate"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "timesteps", ",", "channels", "=", "data", ".", "shape", "\n", "output", "=", "np", ".", "full", "(", "(", "self", ".", "output_size", ",", "channels", ")", ",", "np", ".", "inf", ")", "\n", "output_timesteps", ",", "channels", "=", "output", ".", "shape", "\n", "crop_ratio", "=", "random", ".", "uniform", "(", "*", "self", ".", "crop_ratio_range", ")", "\n", "data", ",", "label", "=", "RandomCrop", "(", "\n", "int", "(", "crop_ratio", "*", "timesteps", ")", ")", "(", "sample", ")", "# apply random crop", "\n", "cropped_timesteps", "=", "data", ".", "shape", "[", "0", "]", "\n", "if", "output_timesteps", ">=", "cropped_timesteps", ":", "\n", "            ", "indices", "=", "np", ".", "sort", "(", "np", ".", "random", ".", "choice", "(", "\n", "np", ".", "arange", "(", "output_timesteps", "-", "2", ")", "+", "1", ",", "size", "=", "cropped_timesteps", "-", "2", ",", "replace", "=", "False", ")", ")", "\n", "indices", "=", "np", ".", "concatenate", "(", "\n", "[", "np", ".", "array", "(", "[", "0", "]", ")", ",", "indices", ",", "np", ".", "array", "(", "[", "output_timesteps", "-", "1", "]", ")", "]", ")", "\n", "# fill output array randomly (but in right order) with values from random crop", "\n", "output", "[", "indices", ",", ":", "]", "=", "data", "\n", "\n", "# use interpolation to resize random crop", "\n", "output", "=", "interpolate", "(", "output", ",", "np", ".", "inf", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "np", ".", "sort", "(", "np", ".", "random", ".", "choice", "(", "\n", "np", ".", "arange", "(", "cropped_timesteps", ")", ",", "size", "=", "output_timesteps", ",", "replace", "=", "False", ")", ")", "\n", "output", "=", "data", "[", "indices", "]", "\n", "", "return", "output", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.RandomResizedCrop.__str__": [[152, 154], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"RandomResizedCrop\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TRandomResizedCrop.__init__": [[159, 163], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "crop_ratio_range", "=", "[", "0.5", ",", "1.0", "]", ",", "output_size", "=", "250", ")", ":", "\n", "        ", "super", "(", "TRandomResizedCrop", ",", "self", ")", ".", "__init__", "(", "\n", "crop_ratio_range", "=", "crop_ratio_range", ",", "output_size", "=", "output_size", ")", "\n", "self", ".", "crop_ratio_range", "=", "crop_ratio_range", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TRandomResizedCrop.__call__": [[165, 178], ["torch.full().type", "random.uniform", "torch.cat", "timeseries_transformations.Tinterpolate", "sample[].type", "timeseries_transformations.TRandomCrop", "torch.sort", "float", "torch.full", "int", "torch.tensor", "torch.tensor", "float", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Tinterpolate", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "output", "=", "torch", ".", "full", "(", "sample", "[", "0", "]", ".", "shape", ",", "float", "(", "\"inf\"", ")", ")", ".", "type", "(", "sample", "[", "0", "]", ".", "type", "(", ")", ")", "\n", "timesteps", ",", "channels", "=", "output", ".", "shape", "\n", "crop_ratio", "=", "random", ".", "uniform", "(", "*", "self", ".", "crop_ratio_range", ")", "\n", "data", ",", "label", "=", "TRandomCrop", "(", "int", "(", "crop_ratio", "*", "timesteps", ")", ")", "(", "sample", ")", "# apply random crop", "\n", "cropped_timesteps", "=", "data", ".", "shape", "[", "0", "]", "\n", "indices", "=", "torch", ".", "sort", "(", "(", "torch", ".", "randperm", "(", "timesteps", "-", "2", ")", "+", "1", ")", "[", ":", "cropped_timesteps", "-", "2", "]", ")", "[", "0", "]", "\n", "indices", "=", "torch", ".", "cat", "(", "[", "torch", ".", "tensor", "(", "[", "0", "]", ")", ",", "indices", ",", "torch", ".", "tensor", "(", "[", "timesteps", "-", "1", "]", ")", "]", ")", "\n", "output", "[", "indices", ",", ":", "]", "=", "data", "# fill output array randomly (but in right order) with values from random crop", "\n", "\n", "# use interpolation to resize random crop", "\n", "output", "=", "Tinterpolate", "(", "output", ",", "float", "(", "\"inf\"", ")", ")", "\n", "return", "output", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TRandomResizedCrop.__str__": [[179, 181], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"RandomResizedCrop\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TRandomCrop.__init__": [[186, 189], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_size", ",", "annotation", "=", "False", ")", ":", "\n", "        ", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "annotation", "=", "annotation", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TRandomCrop.__call__": [[190, 203], ["random.randint"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "\n", "timesteps", ",", "_", "=", "data", ".", "shape", "\n", "assert", "(", "timesteps", ">=", "self", ".", "output_size", ")", "\n", "if", "(", "timesteps", "==", "self", ".", "output_size", ")", ":", "\n", "            ", "start", "=", "0", "\n", "", "else", ":", "\n", "            ", "start", "=", "random", ".", "randint", "(", "0", ",", "timesteps", "-", "self", ".", "output_size", "-", "1", ")", "#np.random.randint(0, timesteps - self.output_size)", "\n", "\n", "", "data", "=", "data", "[", "start", ":", "start", "+", "self", ".", "output_size", ",", ":", "]", "\n", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TRandomCrop.__str__": [[204, 206], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"RandomCrop\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.OldDynamicTimeWarp.__init__": [[210, 212], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.OldDynamicTimeWarp.__call__": [[213, 220], ["data.copy.copy.copy", "numpy.sort", "numpy.random.choice"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "data", "=", "data", ".", "copy", "(", ")", "\n", "timesteps", ",", "channels", "=", "data", ".", "shape", "\n", "warp_indices", "=", "np", ".", "sort", "(", "np", ".", "random", ".", "choice", "(", "timesteps", ",", "size", "=", "timesteps", ")", ")", "\n", "data", "=", "data", "[", "warp_indices", ",", ":", "]", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.OldDynamicTimeWarp.__str__": [[221, 223], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"OldDynamicTimeWarp\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.DynamicTimeWarp.__init__": [[227, 234], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "warps", "=", "3", ",", "radius", "=", "10", ",", "step", "=", "2", ")", ":", "\n", "        ", "super", "(", "DynamicTimeWarp", ",", "self", ")", ".", "__init__", "(", "\n", "warps", "=", "warps", ",", "radius", "=", "radius", ",", "step", "=", "step", ")", "\n", "self", ".", "warps", "=", "warps", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "min_center", "=", "self", ".", "radius", "*", "(", "self", ".", "step", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.DynamicTimeWarp.__call__": [[235, 246], ["interpolate.copy", "range", "numpy.random.randint", "timeseries_transformations.squeeze", "timeseries_transformations.refill", "timeseries_transformations.interpolate"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.squeeze", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.refill", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.interpolate"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "data", "=", "data", ".", "copy", "(", ")", "\n", "timesteps", ",", "channels", "=", "data", ".", "shape", "\n", "for", "_", "in", "range", "(", "self", ".", "warps", ")", ":", "\n", "            ", "center", "=", "np", ".", "random", ".", "randint", "(", "\n", "self", ".", "min_center", ",", "timesteps", "-", "self", ".", "min_center", "-", "self", ".", "step", ")", "\n", "data", "=", "squeeze", "(", "data", ",", "center", ",", "self", ".", "radius", ",", "self", ".", "step", ")", "\n", "data", "=", "refill", "(", "data", ",", "center", ",", "self", ".", "radius", ",", "self", ".", "step", ")", "\n", "data", "=", "interpolate", "(", "data", ",", "np", ".", "inf", ")", "\n", "", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.DynamicTimeWarp.__str__": [[247, 249], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"DynamicTimeWarp\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TDynamicTimeWarp.__init__": [[253, 260], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "warps", "=", "3", ",", "radius", "=", "10", ",", "step", "=", "2", ")", ":", "\n", "        ", "super", "(", "TDynamicTimeWarp", ",", "self", ")", ".", "__init__", "(", "\n", "warps", "=", "warps", ",", "radius", "=", "radius", ",", "step", "=", "step", ")", "\n", "self", ".", "warps", "=", "warps", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "min_center", "=", "self", ".", "radius", "*", "(", "self", ".", "step", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TDynamicTimeWarp.__call__": [[262, 271], ["range", "random.randint", "timeseries_transformations.Tsqueeze", "timeseries_transformations.Trefill", "timeseries_transformations.Tinterpolate", "float"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Tsqueeze", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Trefill", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Tinterpolate"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "timesteps", ",", "channels", "=", "data", ".", "shape", "\n", "for", "_", "in", "range", "(", "self", ".", "warps", ")", ":", "\n", "            ", "center", "=", "random", ".", "randint", "(", "self", ".", "min_center", ",", "timesteps", "-", "self", ".", "min_center", "-", "self", ".", "step", "-", "1", ")", "\n", "data", "=", "Tsqueeze", "(", "data", ",", "center", ",", "self", ".", "radius", ",", "self", ".", "step", ")", "\n", "data", "=", "Trefill", "(", "data", ",", "center", ",", "self", ".", "radius", ",", "self", ".", "step", ")", "\n", "data", "=", "Tinterpolate", "(", "data", ",", "float", "(", "\"inf\"", ")", ")", "\n", "", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TDynamicTimeWarp.__str__": [[272, 274], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"DynamicTimeWarp\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TimeWarp.__init__": [[278, 286], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "epsilon", "=", "10", ",", "interpolation_kind", "=", "\"linear\"", ",", "annotation", "=", "False", ")", ":", "\n", "        ", "super", "(", "TimeWarp", ",", "self", ")", ".", "__init__", "(", "epsilon", "=", "epsilon", ",", "\n", "interpolation_kind", "=", "interpolation_kind", ",", "annotation", "=", "annotation", ")", "\n", "self", ".", "scale", "=", "1.", "\n", "self", ".", "loc", "=", "0.", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "annotation", "=", "annotation", "\n", "self", ".", "interpolation_kind", "=", "interpolation_kind", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TimeWarp.__call__": [[287, 310], ["data.copy.copy.copy", "numpy.random.normal", "numpy.cumsum", "numpy.cumsum", "numpy.arange", "range", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d.", "range", "numpy.min", "len", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d."], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "data", "=", "data", ".", "copy", "(", ")", "\n", "timesteps", ",", "channels", "=", "data", ".", "shape", "\n", "\n", "pmf", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "self", ".", "loc", ",", "scale", "=", "self", ".", "scale", ",", "size", "=", "timesteps", ")", "\n", "pmf", "=", "np", ".", "cumsum", "(", "pmf", ")", "# random walk", "\n", "pmf", "=", "pmf", "-", "np", ".", "min", "(", "pmf", ")", "+", "self", ".", "epsilon", "# make it positive", "\n", "\n", "cdf", "=", "np", ".", "cumsum", "(", "pmf", ")", "# by definition monotonically increasing", "\n", "tnew", "=", "(", "cdf", "-", "cdf", "[", "0", "]", ")", "/", "(", "cdf", "[", "-", "1", "]", "-", "cdf", "[", "0", "]", ")", "*", "(", "len", "(", "cdf", ")", "-", "1", ")", "# correct normalization", "\n", "told", "=", "np", ".", "arange", "(", "timesteps", ")", "\n", "\n", "for", "c", "in", "range", "(", "channels", ")", ":", "\n", "            ", "f", "=", "interp1d", "(", "tnew", ",", "data", "[", ":", ",", "c", "]", ",", "kind", "=", "self", ".", "interpolation_kind", ")", "\n", "data", "[", ":", ",", "c", "]", "=", "f", "(", "told", ")", "\n", "", "if", "(", "self", ".", "annotation", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "label", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "f", "=", "interp1d", "(", "tnew", ",", "label", "[", ":", ",", "c", "]", ",", "kind", "=", "self", ".", "interpolation_kind", ")", "\n", "label", "[", ":", ",", "c", "]", "=", "f", "(", "told", ")", "\n", "\n", "", "", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TimeWarp.__str__": [[311, 313], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"TimeWarp\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.ChannelResize.__init__": [[317, 320], ["timeseries_transformations.Transformation.__init__", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "magnitude_range", "=", "(", "0.5", ",", "2", ")", ")", ":", "\n", "        ", "super", "(", "ChannelResize", ",", "self", ")", ".", "__init__", "(", "magnitude_range", "=", "magnitude_range", ")", "\n", "self", ".", "log_magnitude_range", "=", "np", ".", "log", "(", "magnitude_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.ChannelResize.__call__": [[321, 330], ["numpy.exp", "numpy.tile().reshape", "numpy.multiply", "numpy.random.uniform", "numpy.tile"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "timesteps", ",", "channels", "=", "data", ".", "shape", "\n", "resize_factors", "=", "np", ".", "exp", "(", "np", ".", "random", ".", "uniform", "(", "\n", "*", "self", ".", "log_magnitude_range", ",", "size", "=", "channels", ")", ")", "\n", "resize_factors_same_shape", "=", "np", ".", "tile", "(", "\n", "resize_factors", ",", "timesteps", ")", ".", "reshape", "(", "data", ".", "shape", ")", "\n", "data", "=", "np", ".", "multiply", "(", "resize_factors_same_shape", ",", "data", ")", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.ChannelResize.__str__": [[331, 333], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"ChannelResize\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TChannelResize.__init__": [[337, 340], ["timeseries_transformations.Transformation.__init__", "torch.log", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "magnitude_range", "=", "(", "0.33", ",", "3", ")", ")", ":", "\n", "        ", "super", "(", "TChannelResize", ",", "self", ")", ".", "__init__", "(", "magnitude_range", "=", "magnitude_range", ")", "\n", "self", ".", "log_magnitude_range", "=", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "magnitude_range", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TChannelResize.__call__": [[342, 349], ["torch.exp", "torch.exp.repeat().reshape", "torch.empty().uniform_", "torch.exp.repeat", "torch.empty"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "timesteps", ",", "channels", "=", "data", ".", "shape", "\n", "resize_factors", "=", "torch", ".", "exp", "(", "torch", ".", "empty", "(", "channels", ")", ".", "uniform_", "(", "*", "self", ".", "log_magnitude_range", ")", ")", "\n", "resize_factors_same_shape", "=", "resize_factors", ".", "repeat", "(", "timesteps", ")", ".", "reshape", "(", "data", ".", "shape", ")", "\n", "data", "=", "resize_factors_same_shape", "*", "data", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TChannelResize.__str__": [[350, 352], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"ChannelResize\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Negation.__init__": [[356, 359], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Negation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Negation.__call__": [[360, 363], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "return", "-", "1", "*", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Negation.__str__": [[364, 366], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Negation\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TNegation.__init__": [[370, 372], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TNegation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TNegation.__call__": [[374, 377], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "return", "-", "1", "*", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TNegation.__str__": [[378, 380], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Negation\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.DownSample.__init__": [[384, 387], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "downsample_ratio", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "DownSample", ",", "self", ")", ".", "__init__", "(", "downsample_ratio", "=", "downsample_ratio", ")", "\n", "self", ".", "downsample_ratio", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.DownSample.__call__": [[388, 397], ["interpolate.copy", "numpy.random.choice", "timeseries_transformations.interpolate", "numpy.arange", "int"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.interpolate"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "data", "=", "data", ".", "copy", "(", ")", "\n", "timesteps", ",", "channels", "=", "data", ".", "shape", "\n", "inpt_indices", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "\n", "timesteps", "-", "2", ")", "+", "1", ",", "size", "=", "int", "(", "self", ".", "downsample_ratio", "*", "timesteps", ")", ",", "replace", "=", "False", ")", "\n", "data", "[", "inpt_indices", ",", ":", "]", "=", "np", ".", "inf", "\n", "data", "=", "interpolate", "(", "data", ",", "np", ".", "inf", ")", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.DownSample.__str__": [[398, 400], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"DownSample\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TDownSample.__init__": [[404, 407], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "downsample_ratio", "=", "0.8", ")", ":", "\n", "        ", "super", "(", "TDownSample", ",", "self", ")", ".", "__init__", "(", "downsample_ratio", "=", "downsample_ratio", ")", "\n", "self", ".", "downsample_ratio", "=", "downsample_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TDownSample.__call__": [[409, 417], ["data.clone", "float", "timeseries_transformations.Tinterpolate", "float", "torch.randperm", "int"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Tinterpolate"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "timesteps", ",", "channels", "=", "data", ".", "shape", "\n", "inpt_indices", "=", "(", "torch", ".", "randperm", "(", "timesteps", "-", "2", ")", "+", "1", ")", "[", ":", "int", "(", "1", "-", "self", ".", "downsample_ratio", "*", "timesteps", ")", "]", "\n", "output", "=", "data", ".", "clone", "(", ")", "\n", "output", "[", "inpt_indices", ",", ":", "]", "=", "float", "(", "\"inf\"", ")", "\n", "output", "=", "Tinterpolate", "(", "output", ",", "float", "(", "\"inf\"", ")", ")", "\n", "return", "output", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TDownSample.__str__": [[418, 420], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"DownSample\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TimeOut.__init__": [[425, 428], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "crop_ratio_range", "=", "[", "0.0", ",", "0.5", "]", ")", ":", "\n", "        ", "super", "(", "TimeOut", ",", "self", ")", ".", "__init__", "(", "crop_ratio_range", "=", "crop_ratio_range", ")", "\n", "self", ".", "crop_ratio_range", "=", "crop_ratio_range", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TimeOut.__call__": [[429, 438], ["data.copy.copy.copy", "random.uniform", "int", "random.randint"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "data", "=", "data", ".", "copy", "(", ")", "\n", "timesteps", ",", "channels", "=", "data", ".", "shape", "\n", "crop_ratio", "=", "random", ".", "uniform", "(", "*", "self", ".", "crop_ratio_range", ")", "\n", "crop_timesteps", "=", "int", "(", "crop_ratio", "*", "timesteps", ")", "\n", "start_idx", "=", "random", ".", "randint", "(", "0", ",", "timesteps", "-", "crop_timesteps", "-", "1", ")", "\n", "data", "[", "start_idx", ":", "start_idx", "+", "crop_timesteps", ",", ":", "]", "=", "0", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TTimeOut.__init__": [[443, 446], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "crop_ratio_range", "=", "[", "0.0", ",", "0.5", "]", ")", ":", "\n", "        ", "super", "(", "TTimeOut", ",", "self", ")", ".", "__init__", "(", "crop_ratio_range", "=", "crop_ratio_range", ")", "\n", "self", ".", "crop_ratio_range", "=", "crop_ratio_range", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TTimeOut.__call__": [[447, 456], ["data.clone.clone.clone", "random.uniform", "int", "random.randint"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "data", "=", "data", ".", "clone", "(", ")", "\n", "timesteps", ",", "channels", "=", "data", ".", "shape", "\n", "crop_ratio", "=", "random", ".", "uniform", "(", "*", "self", ".", "crop_ratio_range", ")", "\n", "crop_timesteps", "=", "int", "(", "crop_ratio", "*", "timesteps", ")", "\n", "start_idx", "=", "random", ".", "randint", "(", "0", ",", "timesteps", "-", "crop_timesteps", "-", "1", ")", "\n", "data", "[", "start_idx", ":", "start_idx", "+", "crop_timesteps", ",", ":", "]", "=", "0", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TTimeOut.__str__": [[457, 459], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"TimeOut\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TGaussianBlur1d.__init__": [[461, 466], ["timeseries_transformations.Transformation.__init__", "torch.nn.modules.conv.Conv1d", "torch.nn.Parameter", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TGaussianBlur1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "Conv1d", "(", "1", ",", "1", ",", "5", ",", "1", ",", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv", ".", "weight", ".", "data", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "[", "[", "0.1", ",", "0.2", ",", "0.4", ",", "0.2", ",", "0.1", "]", "]", "]", ")", ")", "\n", "self", ".", "conv", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TGaussianBlur1d.__call__": [[467, 473], ["torch.unsqueeze", "timeseries_transformations.TGaussianBlur1d.conv", "timeseries_transformations.TGaussianBlur1d.reshape"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "transposed", "=", "data", ".", "T", "\n", "transposed", "=", "torch", ".", "unsqueeze", "(", "transposed", ",", "1", ")", "\n", "blurred", "=", "self", ".", "conv", "(", "transposed", ")", "\n", "return", "blurred", ".", "reshape", "(", "data", ".", "T", ".", "shape", ")", ".", "T", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TGaussianBlur1d.__str__": [[474, 476], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"GaussianBlur\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.ToTensor.__init__": [[480, 486], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "transpose_data", "=", "True", ",", "transpose_label", "=", "False", ")", ":", "\n", "        ", "super", "(", "ToTensor", ",", "self", ")", ".", "__init__", "(", "\n", "transpose_data", "=", "transpose_data", ",", "transpose_label", "=", "transpose_label", ")", "\n", "# swap channel and time axis for direct application of pytorch's convs", "\n", "self", ".", "transpose_data", "=", "transpose_data", "\n", "self", ".", "transpose_label", "=", "transpose_label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.ToTensor.__call__": [[487, 511], ["isinstance", "isinstance", "timeseries_transformations.ToTensor.__call__._to_tensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "\n", "        ", "def", "_to_tensor", "(", "data", ",", "transpose", "=", "False", ")", ":", "\n", "            ", "if", "(", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "                ", "if", "(", "transpose", ")", ":", "# seq,[x,y,]ch", "\n", "                    ", "return", "torch", ".", "from_numpy", "(", "np", ".", "moveaxis", "(", "data", ",", "-", "1", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "                    ", "return", "torch", ".", "from_numpy", "(", "data", ")", "\n", "", "", "else", ":", "# default_collate will take care of it", "\n", "                ", "return", "data", "\n", "\n", "", "", "data", ",", "label", "=", "sample", "\n", "\n", "if", "not", "isinstance", "(", "data", ",", "tuple", ")", ":", "\n", "            ", "data", "=", "_to_tensor", "(", "data", ",", "self", ".", "transpose_data", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "tuple", "(", "_to_tensor", "(", "x", ",", "self", ".", "transpose_data", ")", "for", "x", "in", "data", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "label", ",", "tuple", ")", ":", "\n", "            ", "label", "=", "_to_tensor", "(", "label", ",", "self", ".", "transpose_label", ")", "\n", "", "else", ":", "\n", "            ", "label", "=", "tuple", "(", "_to_tensor", "(", "x", ",", "self", ".", "transpose_label", ")", "for", "x", "in", "label", ")", "\n", "\n", "", "return", "data", ",", "label", "# returning as a tuple (potentially of lists)", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.ToTensor.__str__": [[512, 514], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"ToTensor\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TNormalize.__init__": [[518, 531], ["timeseries_transformations.Transformation.__init__", "torch.tensor", "torch.tensor", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "stats_mean", "=", "None", ",", "stats_std", "=", "None", ",", "input", "=", "True", ",", "channels", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "TNormalize", ",", "self", ")", ".", "__init__", "(", "\n", "stats_mean", "=", "stats_mean", ",", "stats_std", "=", "stats_std", ",", "input", "=", "input", ",", "channels", "=", "channels", ")", "\n", "self", ".", "stats_mean", "=", "torch", ".", "tensor", "(", "[", "-", "0.00184586", ",", "-", "0.00130277", ",", "0.00017031", ",", "-", "0.00091313", ",", "-", "0.00148835", ",", "-", "0.00174687", ",", "-", "0.00077071", ",", "-", "0.00207407", ",", "0.00054329", ",", "0.00155546", ",", "-", "0.00114379", ",", "-", "0.00035649", "]", ")", "\n", "self", ".", "stats_std", "=", "torch", ".", "tensor", "(", "[", "0.16401004", ",", "0.1647168", ",", "0.23374124", ",", "0.33767231", ",", "0.33362807", ",", "0.30583013", ",", "0.2731171", ",", "0.27554379", ",", "0.17128962", ",", "0.14030828", ",", "0.14606956", ",", "0.14656108", "]", ")", "\n", "self", ".", "stats_mean", "=", "self", ".", "stats_mean", "if", "stats_mean", "is", "None", "else", "stats_mean", "\n", "self", ".", "stats_std", "=", "self", ".", "stats_std", "if", "stats_std", "is", "None", "else", "stats_std", "\n", "self", ".", "input", "=", "input", "\n", "if", "(", "len", "(", "channels", ")", ">", "0", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "stats_mean", ")", ")", ":", "\n", "                ", "if", "(", "not", "(", "i", "in", "channels", ")", ")", ":", "\n", "                    ", "self", ".", "stats_mean", "[", ":", ",", "i", "]", "=", "0", "\n", "self", ".", "stats_std", "[", ":", ",", "i", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TNormalize.__call__": [[532, 545], ["None"], "methods", ["None"], ["", "", "", "", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "datax", ",", "labelx", "=", "sample", "\n", "data", "=", "datax", "if", "self", ".", "input", "else", "labelx", "\n", "#assuming channel last", "\n", "if", "(", "self", ".", "stats_mean", "is", "not", "None", ")", ":", "\n", "            ", "data", "=", "data", "-", "self", ".", "stats_mean", "\n", "", "if", "(", "self", ".", "stats_std", "is", "not", "None", ")", ":", "\n", "            ", "data", "=", "data", "/", "self", ".", "stats_std", "\n", "\n", "", "if", "(", "self", ".", "input", ")", ":", "\n", "            ", "return", "(", "data", ",", "labelx", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "datax", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Transpose.__init__": [[549, 551], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Transpose", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Transpose.__call__": [[552, 556], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "data", "=", "data", ".", "T", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Transpose.__str__": [[557, 559], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Transpose\"", "\n", "###########################################################", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.BaselineWander.__init__": [[809, 811], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "fs", "=", "100", ",", "Cmax", "=", "0.3", ",", "fc", "=", "0.5", ",", "fdelta", "=", "0.01", ",", "independent_channels", "=", "False", ")", ":", "\n", "        ", "super", "(", "BaselineWander", ",", "self", ")", ".", "__init__", "(", "fs", "=", "fs", ",", "Cmax", "=", "Cmax", ",", "fc", "=", "fc", ",", "fdelta", "=", "fdelta", ",", "independent_channels", "=", "independent_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.BaselineWander.__call__": [[812, 818], ["random.uniform", "timeseries_transformations.noise_baseline_wander", "len"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.noise_baseline_wander"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "timesteps", ",", "channels", "=", "data", ".", "shape", "\n", "C", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "params", "[", "\"Cmax\"", "]", ")", "\n", "data", "=", "data", "+", "noise_baseline_wander", "(", "fs", "=", "self", ".", "params", "[", "\"fs\"", "]", ",", "N", "=", "len", "(", "data", ")", ",", "C", "=", "0.05", ",", "fc", "=", "self", ".", "params", "[", "\"fc\"", "]", ",", "fdelta", "=", "self", ".", "params", "[", "\"fdelta\"", "]", ",", "channels", "=", "channels", ",", "independent_channels", "=", "self", ".", "params", "[", "\"independent_channels\"", "]", ")", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.BaselineWander.__str__": [[819, 821], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"BaselineWander\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TBaselineWander.__init__": [[826, 828], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "fs", "=", "100", ",", "Cmax", "=", "0.1", ",", "fc", "=", "0.5", ",", "fdelta", "=", "0.01", ",", "independent_channels", "=", "False", ")", ":", "\n", "        ", "super", "(", "TBaselineWander", ",", "self", ")", ".", "__init__", "(", "fs", "=", "fs", ",", "Cmax", "=", "Cmax", ",", "fc", "=", "fc", ",", "fdelta", "=", "fdelta", ",", "independent_channels", "=", "independent_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TBaselineWander.__call__": [[829, 836], ["random.uniform", "timeseries_transformations.Tnoise_baseline_wander", "Tnoise_baseline_wander.repeat().reshape", "len", "Tnoise_baseline_wander.repeat"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Tnoise_baseline_wander"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "timesteps", ",", "channels", "=", "data", ".", "shape", "\n", "C", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "params", "[", "\"Cmax\"", "]", ")", "\n", "noise", "=", "Tnoise_baseline_wander", "(", "fs", "=", "self", ".", "params", "[", "\"fs\"", "]", ",", "N", "=", "len", "(", "data", ")", ",", "C", "=", "C", ",", "fc", "=", "self", ".", "params", "[", "\"fc\"", "]", ",", "fdelta", "=", "self", ".", "params", "[", "\"fdelta\"", "]", ",", "channels", "=", "channels", ",", "independent_channels", "=", "self", ".", "params", "[", "\"independent_channels\"", "]", ")", "\n", "data", "+=", "noise", ".", "repeat", "(", "channels", ")", ".", "reshape", "(", "channels", ",", "timesteps", ")", ".", "T", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TBaselineWander.__str__": [[837, 839], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"BaselineWander\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.PowerlineNoise.__init__": [[844, 846], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "fs", "=", "100", ",", "Cmax", "=", "2", ",", "K", "=", "3", ")", ":", "\n", "        ", "super", "(", "PowerlineNoise", ",", "self", ")", ".", "__init__", "(", "fs", "=", "fs", ",", "Cmax", "=", "Cmax", ",", "K", "=", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.PowerlineNoise.__call__": [[847, 853], ["random.uniform", "timeseries_transformations.noise_powerline", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.noise_powerline"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "C", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "params", "[", "\"Cmax\"", "]", ")", "\n", "data", "=", "data", "+", "noise_powerline", "(", "fs", "=", "self", ".", "params", "[", "\"fs\"", "]", ",", "N", "=", "len", "(", "\n", "data", ")", ",", "C", "=", "C", ",", "K", "=", "self", ".", "params", "[", "\"K\"", "]", ",", "channels", "=", "len", "(", "data", "[", "0", "]", ")", ")", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.PowerlineNoise.__str__": [[854, 856], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"PowerlineNoise\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TPowerlineNoise.__init__": [[861, 863], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "fs", "=", "100", ",", "Cmax", "=", "1.0", ",", "K", "=", "3", ")", ":", "\n", "        ", "super", "(", "TPowerlineNoise", ",", "self", ")", ".", "__init__", "(", "fs", "=", "fs", ",", "Cmax", "=", "Cmax", ",", "K", "=", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TPowerlineNoise.__call__": [[864, 869], ["random.uniform", "timeseries_transformations.noise_powerline", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.noise_powerline"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "C", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "params", "[", "\"Cmax\"", "]", ")", "\n", "data", "=", "data", "+", "noise_powerline", "(", "fs", "=", "self", ".", "params", "[", "\"fs\"", "]", ",", "N", "=", "len", "(", "data", ")", ",", "C", "=", "C", ",", "K", "=", "self", ".", "params", "[", "\"K\"", "]", ",", "channels", "=", "len", "(", "data", "[", "0", "]", ")", ")", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TPowerlineNoise.__str__": [[870, 872], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"PowerlineNoise\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.EMNoise.__init__": [[877, 879], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "Cmax", "=", "0.5", ",", "K", "=", "3", ")", ":", "\n", "        ", "super", "(", "EMNoise", ",", "self", ")", ".", "__init__", "(", "Cmax", "=", "Cmax", ",", "K", "=", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.EMNoise.__call__": [[880, 886], ["random.uniform", "timeseries_transformations.noise_electromyographic", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.noise_electromyographic"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "C", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "params", "[", "\"Cmax\"", "]", ")", "\n", "data", "=", "data", "+", "noise_electromyographic", "(", "N", "=", "len", "(", "data", ")", ",", "C", "=", "C", ",", "channels", "=", "len", "(", "data", "[", "0", "]", ")", ")", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.EMNoise.__str__": [[887, 889], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"EMNoise\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TEMNoise.__init__": [[894, 896], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "Cmax", "=", "0.1", ",", "K", "=", "3", ")", ":", "\n", "        ", "super", "(", "TEMNoise", ",", "self", ")", ".", "__init__", "(", "Cmax", "=", "Cmax", ",", "K", "=", "K", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TEMNoise.__call__": [[897, 902], ["random.uniform", "timeseries_transformations.Tnoise_electromyographic", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Tnoise_electromyographic"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "C", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "params", "[", "\"Cmax\"", "]", ")", "\n", "data", "=", "data", "+", "Tnoise_electromyographic", "(", "N", "=", "len", "(", "data", ")", ",", "C", "=", "C", ",", "channels", "=", "len", "(", "data", "[", "0", "]", ")", ")", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TEMNoise.__str__": [[903, 905], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"EMNoise\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.BaselineShift.__init__": [[910, 913], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "fs", "=", "100", ",", "Cmax", "=", "3", ",", "mean_segment_length", "=", "3", ",", "max_segments_per_second", "=", "0.3", ")", ":", "\n", "        ", "super", "(", "BaselineShift", ",", "self", ")", ".", "__init__", "(", "fs", "=", "fs", ",", "Cmax", "=", "Cmax", ",", "\n", "mean_segment_length", "=", "mean_segment_length", ",", "max_segments_per_second", "=", "max_segments_per_second", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.BaselineShift.__call__": [[914, 920], ["random.uniform", "timeseries_transformations.noise_baseline_shift", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.noise_baseline_shift"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "C", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "params", "[", "\"Cmax\"", "]", ")", "\n", "data", "=", "data", "+", "noise_baseline_shift", "(", "fs", "=", "self", ".", "params", "[", "\"fs\"", "]", ",", "N", "=", "len", "(", "data", ")", ",", "C", "=", "C", ",", "mean_segment_length", "=", "self", ".", "params", "[", "\"mean_segment_length\"", "]", ",", "\n", "max_segments_per_second", "=", "self", ".", "params", "[", "\"max_segments_per_second\"", "]", ",", "channels", "=", "len", "(", "data", "[", "0", "]", ")", ")", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.BaselineShift.__str__": [[921, 923], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"BaselineShift\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TBaselineShift.__init__": [[927, 929], ["timeseries_transformations.Transformation.__init__"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "__init__", "(", "self", ",", "fs", "=", "100", ",", "Cmax", "=", "1.0", ",", "mean_segment_length", "=", "3", ",", "max_segments_per_second", "=", "0.3", ")", ":", "\n", "        ", "super", "(", "TBaselineShift", ",", "self", ")", ".", "__init__", "(", "fs", "=", "fs", ",", "Cmax", "=", "Cmax", ",", "mean_segment_length", "=", "mean_segment_length", ",", "max_segments_per_second", "=", "max_segments_per_second", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TBaselineShift.__call__": [[930, 935], ["random.uniform", "timeseries_transformations.Tnoise_baseline_shift", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Tnoise_baseline_shift"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data", ",", "label", "=", "sample", "\n", "C", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "params", "[", "\"Cmax\"", "]", ")", "\n", "data", "=", "data", "+", "Tnoise_baseline_shift", "(", "fs", "=", "self", ".", "params", "[", "\"fs\"", "]", ",", "N", "=", "len", "(", "data", ")", ",", "C", "=", "C", ",", "mean_segment_length", "=", "self", ".", "params", "[", "\"mean_segment_length\"", "]", ",", "max_segments_per_second", "=", "self", ".", "params", "[", "\"max_segments_per_second\"", "]", ",", "channels", "=", "len", "(", "data", "[", "0", "]", ")", ")", "\n", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.TBaselineShift.__str__": [[936, 938], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"BaselineShift\"", "", "", "", ""]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.interpolate": [[14, 21], ["data.reshape.flatten", "numpy.interp", "data.reshape.reshape", "numpy.where", "numpy.where", "numpy.np.inf", "numpy.np.inf", "numpy.np.inf"], "function", ["None"], ["def", "interpolate", "(", "data", ",", "marker", ")", ":", "\n", "    ", "timesteps", ",", "channels", "=", "data", ".", "shape", "\n", "data", "=", "data", ".", "flatten", "(", "order", "=", "\"F\"", ")", "\n", "data", "[", "data", "==", "marker", "]", "=", "np", ".", "interp", "(", "np", ".", "where", "(", "data", "==", "marker", ")", "[", "0", "]", ",", "np", ".", "where", "(", "\n", "data", "!=", "marker", ")", "[", "0", "]", ",", "data", "[", "data", "!=", "marker", "]", ")", "\n", "data", "=", "data", ".", "reshape", "(", "timesteps", ",", "channels", ",", "order", "=", "\"F\"", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Tinterpolate": [[22, 30], ["data.transpose().flatten.transpose().flatten", "data.transpose().flatten.numpy", "torch.from_numpy", "torch.from_numpy.type", "numpy.interp", "data.transpose().flatten.type", "data.transpose().flatten.reshape", "data.transpose().flatten.transpose", "numpy.where", "numpy.where"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.CustomSimCLR.type"], ["", "def", "Tinterpolate", "(", "data", ",", "marker", ")", ":", "\n", "    ", "timesteps", ",", "channels", "=", "data", ".", "shape", "\n", "data", "=", "data", ".", "transpose", "(", "0", ",", "1", ")", ".", "flatten", "(", ")", "\n", "ndata", "=", "data", ".", "numpy", "(", ")", "\n", "interpolation", "=", "torch", ".", "from_numpy", "(", "np", ".", "interp", "(", "np", ".", "where", "(", "ndata", "==", "marker", ")", "[", "0", "]", ",", "np", ".", "where", "(", "ndata", "!=", "marker", ")", "[", "0", "]", ",", "ndata", "[", "ndata", "!=", "marker", "]", ")", ")", "\n", "data", "[", "data", "==", "marker", "]", "=", "interpolation", ".", "type", "(", "data", ".", "type", "(", ")", ")", "\n", "data", "=", "data", ".", "reshape", "(", "channels", ",", "timesteps", ")", ".", "T", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.squeeze": [[31, 36], ["arr[].copy"], "function", ["None"], ["", "def", "squeeze", "(", "arr", ",", "center", ",", "radius", ",", "step", ")", ":", "\n", "    ", "squeezed", "=", "arr", "[", "center", "-", "step", "*", "radius", ":", "center", "+", "step", "*", "radius", "+", "1", ":", "step", ",", ":", "]", ".", "copy", "(", ")", "\n", "arr", "[", "center", "-", "step", "*", "radius", ":", "center", "+", "step", "*", "radius", "+", "1", ",", ":", "]", "=", "np", ".", "inf", "\n", "arr", "[", "center", "-", "radius", ":", "center", "+", "radius", "+", "1", ",", ":", "]", "=", "squeezed", "\n", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Tsqueeze": [[37, 42], ["arr[].clone", "float"], "function", ["None"], ["", "def", "Tsqueeze", "(", "arr", ",", "center", ",", "radius", ",", "step", ")", ":", "\n", "    ", "squeezed", "=", "arr", "[", "center", "-", "step", "*", "radius", ":", "center", "+", "step", "*", "radius", "+", "1", ":", "step", ",", ":", "]", ".", "clone", "(", ")", "\n", "arr", "[", "center", "-", "step", "*", "radius", ":", "center", "+", "step", "*", "radius", "+", "1", ",", ":", "]", "=", "float", "(", "\"inf\"", ")", "\n", "arr", "[", "center", "-", "radius", ":", "center", "+", "radius", "+", "1", ",", ":", "]", "=", "squeezed", "\n", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.refill": [[43, 54], ["arr[].copy", "arr[].copy"], "function", ["None"], ["", "def", "refill", "(", "arr", ",", "center", ",", "radius", ",", "step", ")", ":", "\n", "    ", "left_fill_values", "=", "arr", "[", "center", "-", "radius", "*", "step", "-", "\n", "radius", ":", "center", "-", "radius", "*", "step", ",", ":", "]", ".", "copy", "(", ")", "\n", "right_fill_values", "=", "arr", "[", "center", "+", "radius", "*", "step", "+", "\n", "1", ":", "center", "+", "radius", "*", "step", "+", "radius", "+", "1", ",", ":", "]", ".", "copy", "(", ")", "\n", "arr", "[", "center", "-", "radius", "*", "step", "-", "radius", ":", "center", "-", "radius", "*", "step", ",", ":", "]", "=", "arr", "[", "center", "+", "\n", "radius", "*", "step", "+", "1", ":", "center", "+", "radius", "*", "step", "+", "radius", "+", "1", ",", ":", "]", "=", "np", ".", "inf", "\n", "arr", "[", "center", "-", "radius", "*", "step", "-", "radius", ":", "center", "-", "radius", ":", "step", ",", ":", "]", "=", "left_fill_values", "\n", "arr", "[", "center", "+", "radius", "+", "step", ":", "center", "+", "radius", "*", "step", "+", "\n", "radius", "+", "step", ":", "step", ",", ":", "]", "=", "right_fill_values", "\n", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Trefill": [[55, 62], ["arr[].clone", "arr[].clone", "float"], "function", ["None"], ["", "def", "Trefill", "(", "arr", ",", "center", ",", "radius", ",", "step", ")", ":", "\n", "    ", "left_fill_values", "=", "arr", "[", "center", "-", "radius", "*", "step", "-", "radius", ":", "center", "-", "radius", "*", "step", ",", ":", "]", ".", "clone", "(", ")", "\n", "right_fill_values", "=", "arr", "[", "center", "+", "radius", "*", "step", "+", "1", ":", "center", "+", "radius", "*", "step", "+", "radius", "+", "1", ",", ":", "]", ".", "clone", "(", ")", "\n", "arr", "[", "center", "-", "radius", "*", "step", "-", "radius", ":", "center", "-", "radius", "*", "step", ",", ":", "]", "=", "arr", "[", "center", "+", "radius", "*", "step", "+", "1", ":", "center", "+", "radius", "*", "step", "+", "radius", "+", "1", ",", ":", "]", "=", "float", "(", "\"inf\"", ")", "\n", "arr", "[", "center", "-", "radius", "*", "step", "-", "radius", ":", "center", "-", "radius", ":", "step", ",", ":", "]", "=", "left_fill_values", "\n", "arr", "[", "center", "+", "radius", "+", "step", ":", "center", "+", "radius", "*", "step", "+", "radius", "+", "step", ":", "step", ",", ":", "]", "=", "right_fill_values", "\n", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.signal_power": [[563, 565], ["numpy.mean"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.None.custom_simclr_bolts.mean"], ["", "", "def", "signal_power", "(", "s", ")", ":", "\n", "    ", "return", "np", ".", "mean", "(", "s", "*", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.snr": [[567, 569], ["numpy.log10", "timeseries_transformations.signal_power", "timeseries_transformations.signal_power"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.signal_power", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.signal_power"], ["", "def", "snr", "(", "s1", ",", "s2", ")", ":", "\n", "    ", "return", "10", "*", "np", ".", "log10", "(", "signal_power", "(", "s1", ")", "/", "signal_power", "(", "s2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.baseline_wonder": [[782, 803], ["int", "numpy.tile().reshape", "numpy.tile().reshape", "numpy.random.uniform", "numpy.tile().reshape", "numpy.tile().reshape", "numpy.cos", "weighted_cos.sum", "numpy.round", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.arange", "numpy.arange", "numpy.random.uniform"], "function", ["None"], ["", "def", "baseline_wonder", "(", "N", "=", "250", ",", "fs", "=", "100", ",", "C", "=", "1", ",", "fc", "=", "0.5", ",", "df", "=", "0.01", ")", ":", "\n", "    ", "\"\"\"\n        Args:\n            ss_length: sample size length in steps, default 250\n            st_length: sample time legnth in secondes, default 10\n            C:         scaling factor of baseline wonder, default 1\n            K:         number of sinusoidal functions, default 50\n            df:        f_s/ss_length with f_s beeing the sampling frequency, default 0.01\n    \"\"\"", "\n", "K", "=", "int", "(", "np", ".", "round", "(", "fc", "/", "df", ")", ")", "\n", "t", "=", "np", ".", "tile", "(", "np", ".", "arange", "(", "0", ",", "N", "/", "fs", ",", "1.", "/", "fs", ")", ",", "K", ")", ".", "reshape", "(", "K", ",", "N", ")", "\n", "k", "=", "np", ".", "tile", "(", "np", ".", "arange", "(", "K", ")", ",", "N", ")", ".", "reshape", "(", "K", ",", "N", ",", "order", "=", "\"F\"", ")", "\n", "phase_k", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "size", "=", "K", ")", "\n", "phase_k", "=", "np", ".", "tile", "(", "phase_k", ",", "N", ")", ".", "reshape", "(", "K", ",", "N", ",", "order", "=", "\"F\"", ")", "\n", "a_k", "=", "np", ".", "tile", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "size", "=", "K", ")", ",", "N", ")", ".", "reshape", "(", "K", ",", "N", ",", "order", "=", "\"F\"", ")", "\n", "\n", "pre_cos", "=", "2", "*", "np", ".", "pi", "*", "k", "*", "df", "*", "t", "+", "phase_k", "\n", "cos", "=", "np", ".", "cos", "(", "pre_cos", ")", "\n", "weighted_cos", "=", "a_k", "*", "cos", "\n", "res", "=", "weighted_cos", ".", "sum", "(", "axis", "=", "0", ")", "\n", "return", "C", "*", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.noise_baseline_wander": [[594, 624], ["numpy.arange", "int", "numpy.zeros", "range", "numpy.round", "random.uniform", "random.uniform", "range", "numpy.array", "numpy.cos", "random.uniform", "random.gauss", "range", "random.randint", "random.randint"], "function", ["None"], ["", "def", "noise_baseline_wander", "(", "fs", "=", "100", ",", "N", "=", "1000", ",", "C", "=", "1.0", ",", "fc", "=", "0.5", ",", "fdelta", "=", "0.01", ",", "channels", "=", "1", ",", "independent_channels", "=", "False", ")", ":", "\n", "    ", "'''baseline wander as in https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5361052/\n    fs: sampling frequency (Hz)\n    N: lenght of the signal (timesteps)\n    C: relative scaling factor (default scale : 1)\n    fc: cutoff frequency for the baseline wander (Hz)\n    fdelta: lowest resolvable frequency (defaults to fs/N if None is passed)\n    channels: number of output channels\n    independent_channels: different channels with genuinely different outputs (but all components in phase) instead of just a global channel-wise rescaling\n    '''", "\n", "if", "(", "fdelta", "is", "None", ")", ":", "# 0.1", "\n", "        ", "fdelta", "=", "fs", "/", "N", "\n", "\n", "", "t", "=", "np", ".", "arange", "(", "0", ",", "N", "/", "fs", ",", "1.", "/", "fs", ")", "\n", "K", "=", "int", "(", "np", ".", "round", "(", "fc", "/", "fdelta", ")", ")", "\n", "\n", "signal", "=", "np", ".", "zeros", "(", "(", "N", ",", "channels", ")", ")", "\n", "for", "k", "in", "range", "(", "1", ",", "K", "+", "1", ")", ":", "\n", "        ", "phik", "=", "random", ".", "uniform", "(", "0", ",", "2", "*", "math", ".", "pi", ")", "\n", "ak", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "for", "c", "in", "range", "(", "channels", ")", ":", "\n", "            ", "if", "(", "independent_channels", "and", "c", ">", "0", ")", ":", "# different amplitude but same phase", "\n", "                ", "ak", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "*", "(", "2", "*", "random", ".", "randint", "(", "0", ",", "1", ")", "-", "1", ")", "\n", "", "signal", "[", ":", ",", "c", "]", "+=", "C", "*", "ak", "*", "np", ".", "cos", "(", "2", "*", "math", ".", "pi", "*", "k", "*", "fdelta", "*", "t", "+", "phik", ")", "\n", "\n", "", "", "if", "(", "not", "(", "independent_channels", ")", "and", "channels", ">", "1", ")", ":", "# just rescale channels by global factor", "\n", "        ", "channel_gains", "=", "np", ".", "array", "(", "\n", "[", "(", "2", "*", "random", ".", "randint", "(", "0", ",", "1", ")", "-", "1", ")", "*", "random", ".", "gauss", "(", "1", ",", "1", ")", "for", "_", "in", "range", "(", "channels", ")", "]", ")", "\n", "signal", "=", "signal", "*", "channel_gains", "[", "None", "]", "\n", "", "return", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Tnoise_baseline_wander": [[625, 648], ["int", "torch.arange().repeat().reshape", "torch.cos", "weighted_cos.sum", "torch.arange().repeat().reshape", "torch.empty().uniform_().repeat().reshape", "torch.empty().uniform_().repeat().reshape", "torch.arange().repeat", "torch.arange().repeat", "torch.empty().uniform_().repeat", "torch.empty().uniform_().repeat", "torch.arange", "torch.arange", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty", "torch.empty"], "function", ["None"], ["", "def", "Tnoise_baseline_wander", "(", "fs", "=", "100", ",", "N", "=", "1000", ",", "C", "=", "1.0", ",", "fc", "=", "0.5", ",", "fdelta", "=", "0.01", ",", "channels", "=", "1", ",", "independent_channels", "=", "False", ")", ":", "\n", "    ", "'''baseline wander as in https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5361052/\n    fs: sampling frequency (Hz)\n    N: lenght of the signal (timesteps)\n    C: relative scaling factor (default scale : 1)\n    fc: cutoff frequency for the baseline wander (Hz)\n    fdelta: lowest resolvable frequency (defaults to fs/N if None is passed)\n    channels: number of output channels\n    independent_channels: different channels with genuinely different outputs (but all components in phase) instead of just a global channel-wise rescaling\n    '''", "\n", "if", "(", "fdelta", "is", "None", ")", ":", "# 0.1", "\n", "        ", "fdelta", "=", "fs", "/", "N", "\n", "\n", "", "K", "=", "int", "(", "(", "fc", "/", "fdelta", ")", "+", "0.5", ")", "\n", "t", "=", "torch", ".", "arange", "(", "0", ",", "N", "/", "fs", ",", "1.", "/", "fs", ")", ".", "repeat", "(", "K", ")", ".", "reshape", "(", "K", ",", "N", ")", "\n", "k", "=", "torch", ".", "arange", "(", "K", ")", ".", "repeat", "(", "N", ")", ".", "reshape", "(", "N", ",", "K", ")", ".", "T", "\n", "phase_k", "=", "torch", ".", "empty", "(", "K", ")", ".", "uniform_", "(", "0", ",", "2", "*", "math", ".", "pi", ")", ".", "repeat", "(", "N", ")", ".", "reshape", "(", "N", ",", "K", ")", ".", "T", "\n", "a_k", "=", "torch", ".", "empty", "(", "K", ")", ".", "uniform_", "(", "0", ",", "1", ")", ".", "repeat", "(", "N", ")", ".", "reshape", "(", "N", ",", "K", ")", ".", "T", "\n", "pre_cos", "=", "2", "*", "math", ".", "pi", "*", "k", "*", "fdelta", "*", "t", "+", "phase_k", "\n", "cos", "=", "torch", ".", "cos", "(", "pre_cos", ")", "\n", "weighted_cos", "=", "a_k", "*", "cos", "\n", "res", "=", "weighted_cos", ".", "sum", "(", "dim", "=", "0", ")", "\n", "return", "C", "*", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.noise_electromyographic": [[654, 667], ["range", "numpy.stack", "signal.append", "numpy.array", "random.gauss", "range"], "function", ["None"], ["", "def", "noise_electromyographic", "(", "N", "=", "1000", ",", "C", "=", "1", ",", "channels", "=", "1", ")", ":", "\n", "    ", "'''electromyographic (hf) noise inspired by https://ieeexplore.ieee.org/document/43620\n    N: lenght of the signal (timesteps)\n    C: relative scaling factor (default scale: 1)\n    channels: number of output channels\n    '''", "\n", "# C *=0.3 #adjust default scale", "\n", "\n", "signal", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "channels", ")", ":", "\n", "        ", "signal", ".", "append", "(", "np", ".", "array", "(", "[", "random", ".", "gauss", "(", "0.0", ",", "C", ")", "for", "i", "in", "range", "(", "N", ")", "]", ")", ")", "\n", "\n", "", "return", "np", ".", "stack", "(", "signal", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Tnoise_electromyographic": [[668, 679], ["torch.empty().normal_", "torch.empty"], "function", ["None"], ["", "def", "Tnoise_electromyographic", "(", "N", "=", "1000", ",", "C", "=", "1", ",", "channels", "=", "1", ")", ":", "\n", "    ", "'''electromyographic (hf) noise inspired by https://ieeexplore.ieee.org/document/43620\n    N: lenght of the signal (timesteps)\n    C: relative scaling factor (default scale: 1)\n    channels: number of output channels\n    '''", "\n", "#C *=0.3 #adjust default scale", "\n", "\n", "signal", "=", "torch", ".", "empty", "(", "(", "N", ",", "channels", ")", ")", ".", "normal_", "(", "0.0", ",", "C", ")", "\n", "\n", "return", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.noise_powerline": [[680, 703], ["numpy.arange", "numpy.zeros", "random.uniform", "range", "random.uniform", "numpy.array", "numpy.cos", "random.uniform", "range"], "function", ["None"], ["", "def", "noise_powerline", "(", "fs", "=", "100", ",", "N", "=", "1000", ",", "C", "=", "1", ",", "fn", "=", "50.", ",", "K", "=", "3", ",", "channels", "=", "1", ")", ":", "\n", "    ", "'''powerline noise inspired by https://ieeexplore.ieee.org/document/43620\n    fs: sampling frequency (Hz)\n    N: lenght of the signal (timesteps)\n    C: relative scaling factor (default scale: 1)\n    fn: base frequency of powerline noise (Hz)\n    K: number of higher harmonics to be considered\n    channels: number of output channels (just rescaled by a global channel-dependent factor)\n    '''", "\n", "# C *= 0.333 #adjust default scale", "\n", "t", "=", "np", ".", "arange", "(", "0", ",", "N", "/", "fs", ",", "1.", "/", "fs", ")", "\n", "\n", "signal", "=", "np", ".", "zeros", "(", "N", ")", "\n", "phi1", "=", "random", ".", "uniform", "(", "0", ",", "2", "*", "math", ".", "pi", ")", "\n", "for", "k", "in", "range", "(", "1", ",", "K", "+", "1", ")", ":", "\n", "        ", "ak", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "signal", "+=", "C", "*", "ak", "*", "np", ".", "cos", "(", "2", "*", "math", ".", "pi", "*", "k", "*", "fn", "*", "t", "+", "phi1", ")", "\n", "", "signal", "=", "C", "*", "signal", "[", ":", ",", "None", "]", "\n", "if", "(", "channels", ">", "1", ")", ":", "\n", "        ", "channel_gains", "=", "np", ".", "array", "(", "[", "random", ".", "uniform", "(", "-", "1", ",", "1", ")", "\n", "for", "_", "in", "range", "(", "channels", ")", "]", ")", "\n", "signal", "=", "signal", "*", "channel_gains", "[", "None", "]", "\n", "", "return", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Tnoise_powerline": [[704, 726], ["torch.arange", "torch.zeros", "random.uniform", "range", "random.uniform", "torch.empty().uniform_", "torch.cos", "torch.empty"], "function", ["None"], ["", "def", "Tnoise_powerline", "(", "fs", "=", "100", ",", "N", "=", "1000", ",", "C", "=", "1", ",", "fn", "=", "50.", ",", "K", "=", "3", ",", "channels", "=", "1", ")", ":", "\n", "    ", "'''powerline noise inspired by https://ieeexplore.ieee.org/document/43620\n    fs: sampling frequency (Hz)\n    N: lenght of the signal (timesteps)\n    C: relative scaling factor (default scale: 1)\n    fn: base frequency of powerline noise (Hz)\n    K: number of higher harmonics to be considered\n    channels: number of output channels (just rescaled by a global channel-dependent factor)\n    '''", "\n", "#C *= 0.333 #adjust default scale", "\n", "t", "=", "torch", ".", "arange", "(", "0", ",", "N", "/", "fs", ",", "1.", "/", "fs", ")", "\n", "\n", "signal", "=", "torch", ".", "zeros", "(", "N", ")", "\n", "phi1", "=", "random", ".", "uniform", "(", "0", ",", "2", "*", "math", ".", "pi", ")", "\n", "for", "k", "in", "range", "(", "1", ",", "K", "+", "1", ")", ":", "\n", "        ", "ak", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "signal", "+=", "C", "*", "ak", "*", "torch", ".", "cos", "(", "2", "*", "math", ".", "pi", "*", "k", "*", "fn", "*", "t", "+", "phi1", ")", "\n", "", "signal", "=", "C", "*", "signal", "[", ":", ",", "None", "]", "\n", "if", "(", "channels", ">", "1", ")", ":", "\n", "        ", "channel_gains", "=", "torch", ".", "empty", "(", "channels", ")", ".", "uniform_", "(", "-", "1", ",", "1", ")", "\n", "signal", "=", "signal", "*", "channel_gains", "[", "None", "]", "\n", "", "return", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.noise_baseline_shift": [[727, 754], ["numpy.zeros", "int", "range", "numpy.ceil", "random.randint", "random.randint", "random.gauss", "max", "min", "random.uniform", "numpy.array", "int", "int", "random.gauss", "range", "random.randint"], "function", ["None"], ["", "def", "noise_baseline_shift", "(", "fs", "=", "100", ",", "N", "=", "1000", ",", "C", "=", "1.0", ",", "mean_segment_length", "=", "3", ",", "max_segments_per_second", "=", "0.3", ",", "channels", "=", "1", ")", ":", "\n", "    ", "'''baseline shifts inspired by https://ieeexplore.ieee.org/document/43620\n    fs: sampling frequency (Hz)\n    N: lenght of the signal (timesteps)\n    C: relative scaling factor (default scale: 1)\n    mean_segment_length: mean length of a shifted baseline segment (seconds)\n    max_segments_per_second: maximum number of baseline shifts per second (to be multiplied with the length of the signal in seconds)\n    '''", "\n", "# C *=0.5 #adjust default scale", "\n", "signal", "=", "np", ".", "zeros", "(", "N", ")", "\n", "\n", "maxsegs", "=", "int", "(", "np", ".", "ceil", "(", "max_segments_per_second", "*", "N", "/", "fs", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "random", ".", "randint", "(", "0", ",", "maxsegs", ")", ")", ":", "\n", "        ", "mid", "=", "random", ".", "randint", "(", "0", ",", "N", "-", "1", ")", "\n", "seglen", "=", "random", ".", "gauss", "(", "mean_segment_length", ",", "0.2", "*", "mean_segment_length", ")", "\n", "left", "=", "max", "(", "0", ",", "int", "(", "mid", "-", "0.5", "*", "fs", "*", "seglen", ")", ")", "\n", "right", "=", "min", "(", "N", "-", "1", ",", "int", "(", "mid", "+", "0.5", "*", "fs", "*", "seglen", ")", ")", "\n", "ak", "=", "random", ".", "uniform", "(", "-", "1", ",", "1", ")", "\n", "signal", "[", "left", ":", "right", "+", "1", "]", "=", "ak", "\n", "", "signal", "=", "C", "*", "signal", "[", ":", ",", "None", "]", "\n", "\n", "if", "(", "channels", ">", "1", ")", ":", "\n", "        ", "channel_gains", "=", "np", ".", "array", "(", "\n", "[", "(", "2", "*", "random", ".", "randint", "(", "0", ",", "1", ")", "-", "1", ")", "*", "random", ".", "gauss", "(", "1", ",", "1", ")", "for", "_", "in", "range", "(", "channels", ")", "]", ")", "\n", "signal", "=", "signal", "*", "channel_gains", "[", "None", "]", "\n", "", "return", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_transformations.Tnoise_baseline_shift": [[755, 781], ["torch.zeros", "int", "range", "random.randint", "random.randint", "random.gauss", "max", "min", "random.uniform", "int", "int", "torch.randint", "torch.empty().normal_", "torch.empty"], "function", ["None"], ["", "def", "Tnoise_baseline_shift", "(", "fs", "=", "100", ",", "N", "=", "1000", ",", "C", "=", "1.0", ",", "mean_segment_length", "=", "3", ",", "max_segments_per_second", "=", "0.3", ",", "channels", "=", "1", ")", ":", "\n", "    ", "'''baseline shifts inspired by https://ieeexplore.ieee.org/document/43620\n    fs: sampling frequency (Hz)\n    N: lenght of the signal (timesteps)\n    C: relative scaling factor (default scale: 1)\n    mean_segment_length: mean length of a shifted baseline segment (seconds)\n    max_segments_per_second: maximum number of baseline shifts per second (to be multiplied with the length of the signal in seconds)\n    '''", "\n", "#C *=0.5 #adjust default scale", "\n", "signal", "=", "torch", ".", "zeros", "(", "N", ")", "\n", "\n", "maxsegs", "=", "int", "(", "(", "max_segments_per_second", "*", "N", "/", "fs", ")", "+", "0.5", ")", "\n", "\n", "for", "i", "in", "range", "(", "random", ".", "randint", "(", "0", ",", "maxsegs", ")", ")", ":", "\n", "        ", "mid", "=", "random", ".", "randint", "(", "0", ",", "N", "-", "1", ")", "\n", "seglen", "=", "random", ".", "gauss", "(", "mean_segment_length", ",", "0.2", "*", "mean_segment_length", ")", "\n", "left", "=", "max", "(", "0", ",", "int", "(", "mid", "-", "0.5", "*", "fs", "*", "seglen", ")", ")", "\n", "right", "=", "min", "(", "N", "-", "1", ",", "int", "(", "mid", "+", "0.5", "*", "fs", "*", "seglen", ")", ")", "\n", "ak", "=", "random", ".", "uniform", "(", "-", "1", ",", "1", ")", "\n", "signal", "[", "left", ":", "right", "+", "1", "]", "=", "ak", "\n", "", "signal", "=", "C", "*", "signal", "[", ":", ",", "None", "]", "\n", "\n", "if", "(", "channels", ">", "1", ")", ":", "\n", "        ", "channel_gains", "=", "2", "*", "torch", ".", "randint", "(", "2", ",", "(", "channels", ",", ")", ")", "-", "1", "*", "torch", ".", "empty", "(", "channels", ")", ".", "normal_", "(", "1", ",", "1", ")", "\n", "signal", "=", "signal", "*", "channel_gains", "[", "None", "]", "\n", "", "return", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.create_logger.create_logger": [[4, 14], ["logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger", "logging.getLogger.addHandler", "logging.Formatter"], "function", ["None"], ["def", "create_logger", "(", "name", ")", ":", "\n", "    ", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "BEIGE", ",", "VIOLET", ",", "OKBLUE", ",", "ANTHRAZIT", ",", "ENDC", "=", "[", "\n", "'\\033[32m'", ",", "'\\033[35m'", ",", "'\\033[94m'", ",", "'\\033[90m'", ",", "'\\033[0m'", "]", "\n", "\n", "ch", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "BEIGE", "+", "'%(asctime)s '", "+", "VIOLET", "+", "'%(name)s:'", "+", "\n", "OKBLUE", "+", "'%(lineno)s '", "+", "ANTHRAZIT", "+", "'%(levelname)s: '", "+", "ENDC", "+", "' %(message)s'", ")", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper.__init__": [[73, 104], ["eval", "pathlib.Path", "simclr_dataset_wrapper.transformations_from_strings", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.transformations_from_strings"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "num_workers", ",", "valid_size", ",", "input_shape", ",", "s", ",", "data_folder", ",", "target_folders", ",", "target_fs", ",", "recreate_data_ptb_xl", ",", "\n", "mode", "=", "\"pretraining\"", ",", "transformations", "=", "None", ",", "t_params", "=", "None", ",", "ptb_xl_label", "=", "\"label_diag_superclass\"", ",", "filter_cinc", "=", "False", ",", "\n", "percentage", "=", "1.0", ",", "swav", "=", "False", ",", "nmb_crops", "=", "7", ",", "folds", "=", "8", ",", "test", "=", "False", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "valid_size", "=", "valid_size", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "input_shape", "=", "eval", "(", "input_shape", ")", "\n", "self", ".", "data_folder", "=", "Path", "(", "data_folder", ")", "\n", "# Path(target_folder+str(target_fs))", "\n", "self", ".", "target_folders", "=", "[", "Path", "(", "target_folder", ")", "\n", "for", "target_folder", "in", "target_folders", "]", "\n", "self", ".", "target_fs", "=", "target_fs", "\n", "self", ".", "recreate_data_ptb_xl", "=", "recreate_data_ptb_xl", "\n", "self", ".", "val_ds_idmap", "=", "None", "\n", "self", ".", "lbl_itos", "=", "None", "\n", "self", ".", "transformations", "=", "transformations_from_strings", "(", "\n", "transformations", ",", "t_params", ")", "\n", "self", ".", "train_ds_size", "=", "0", "\n", "self", ".", "val_ds_size", "=", "0", "\n", "self", ".", "ptb_xl_label", "=", "ptb_xl_label", "\n", "self", ".", "filter_cinc", "=", "filter_cinc", "\n", "self", ".", "percentage", "=", "percentage", "\n", "self", ".", "swav", "=", "swav", "\n", "self", ".", "nmb_crops", "=", "nmb_crops", "\n", "self", ".", "folds", "=", "folds", "\n", "self", ".", "test", "=", "test", "\n", "if", "mode", "in", "[", "\"linear_evaluation\"", ",", "\"pretraining\"", "]", ":", "\n", "            ", "self", ".", "mode", "=", "mode", "\n", "", "else", ":", "\n", "            ", "raise", "(", "\"mode unkown\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper.get_data_loaders": [[105, 134], ["simclr_dataset_wrapper.SimCLRDataSetWrapper._get_simclr_pipeline_transform", "simclr_dataset_wrapper.SimCLRDataSetWrapper.get_train_validation_data_loaders", "len", "len", "simclr_dataset_wrapper.SimCLRDataSetWrapper._get_datasets", "torch.utils.data.ConcatDataset.get_id_mapping", "list", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "simclr_dataset_wrapper.SwAVDataTransform", "simclr_dataset_wrapper.SimCLRDataTransform", "simclr_dataset_wrapper.SimCLRDataSetWrapper._get_datasets", "zip", "list", "list"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper._get_simclr_pipeline_transform", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper.get_train_validation_data_loaders", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper._get_datasets", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.TimeseriesDatasetCrops.get_id_mapping", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper._get_datasets"], ["", "", "def", "get_data_loaders", "(", "self", ")", ":", "\n", "        ", "data_augment", "=", "self", ".", "_get_simclr_pipeline_transform", "(", ")", "\n", "\n", "# train_dataset = datasets.STL10('./data', split='train+unlabeled', download=True,", "\n", "#                                transform=SimCLRDataTransform(data_augment))", "\n", "\n", "if", "self", ".", "mode", "==", "\"linear_evaluation\"", ":", "\n", "# transformations = transforms.Compose([RandomResizedCrop(crop_ratio_range=[0.5, 1.0]),", "\n", "#                                  ToTensor()])", "\n", "# transformations = data_augment", "\n", "# transformations = ToTensor()", "\n", "            ", "train_ds", ",", "val_ds", "=", "self", ".", "_get_datasets", "(", "\n", "self", ".", "target_folders", "[", "0", "]", ",", "transforms", "=", "data_augment", ")", "\n", "self", ".", "val_ds_idmap", "=", "val_ds", ".", "get_id_mapping", "(", ")", "\n", "", "else", ":", "\n", "\n", "            ", "wrapper_transform", "=", "SwAVDataTransform", "(", "data_augment", ",", "num_crops", "=", "self", ".", "nmb_crops", ")", "if", "self", ".", "swav", "else", "SimCLRDataTransform", "(", "data_augment", ")", "\n", "datasets", "=", "[", "self", ".", "_get_datasets", "(", "target_folder", ",", "transforms", "=", "wrapper_transform", ")", "for", "target_folder", "in", "self", ".", "target_folders", "]", "\n", "train_datasets", ",", "valid_datasets", "=", "list", "(", "zip", "(", "*", "datasets", ")", ")", "\n", "\n", "train_ds", "=", "ConcatDataset", "(", "list", "(", "train_datasets", ")", ")", "\n", "val_ds", "=", "ConcatDataset", "(", "list", "(", "valid_datasets", ")", ")", "\n", "\n", "", "train_loader", ",", "valid_loader", "=", "self", ".", "get_train_validation_data_loaders", "(", "\n", "train_ds", ",", "val_ds", ")", "\n", "\n", "self", ".", "train_ds_size", "=", "len", "(", "train_ds", ")", "\n", "self", ".", "val_ds_size", "=", "len", "(", "val_ds", ")", "\n", "return", "train_loader", ",", "valid_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper._get_datasets": [[135, 240], ["logger.info", "list", "numpy.array.remove", "numpy.array.remove", "numpy.array", "timeseries_utils.load_dataset", "len", "df_mapped[].copy", "timeseries_utils.TimeseriesDatasetCrops", "timeseries_utils.TimeseriesDatasetCrops", "range", "timeseries_utils.reformat_as_memmap", "pickle.load", "str", "numpy.array", "logger.debug", "df_mapped[].apply", "logger.debug", "df_mapped[].apply", "simclr_dataset_wrapper.filter_out_datasets", "simclr_dataset_wrapper.filter_out_datasets", "simclr_dataset_wrapper.filter_out_datasets", "str", "open", "str", "logger.info", "len", "int", "numpy.sort", "str", "len", "len", "simclr_dataset_wrapper.multihot_encode", "numpy.array", "numpy.random.choice", "pickle.load.label.apply", "pickle.load.label.apply", "len", "numpy.arange", "pickle.load.label.apply", "pickle.load.strat_fold.apply", "pickle.load.label.apply", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "range"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.load_dataset", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.timeseries_utils.reformat_as_memmap", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.filter_out_datasets", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.filter_out_datasets", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.filter_out_datasets", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.multihot_encode"], ["", "def", "_get_datasets", "(", "self", ",", "target_folder", ",", "transforms", "=", "None", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"get dataset from \"", "+", "str", "(", "target_folder", ")", ")", "\n", "# Dataset parameters", "\n", "input_channels", "=", "12", "\n", "target_fs", "=", "100", "\n", "# Training setting", "\n", "input_size", "=", "250", "# originally 600", "\n", "chunkify_train", "=", "False", "\n", "chunkify_valid", "=", "self", ".", "mode", "!=", "\"pretraining\"", "\n", "chunk_length_train", "=", "input_size", "# target_fs*6", "\n", "chunk_length_valid", "=", "input_size", "\n", "min_chunk_length", "=", "input_size", "# chunk_length", "\n", "stride_length_train", "=", "chunk_length_train", "//", "4", "# chunk_length_train//8", "\n", "stride_length_valid", "=", "input_size", "//", "2", "# chunk_length_valid", "\n", "\n", "copies_valid", "=", "0", "# >0 should only be used with chunkify_valid=False", "\n", "if", "self", ".", "test", ":", "\n", "            ", "valid_fold", "=", "10", "\n", "test_fold", "=", "9", "\n", "", "else", ":", "\n", "            ", "valid_fold", "=", "9", "\n", "test_fold", "=", "10", "\n", "\n", "", "train_folds", "=", "[", "]", "\n", "train_folds", "=", "list", "(", "range", "(", "1", ",", "11", ")", ")", "\n", "train_folds", ".", "remove", "(", "test_fold", ")", "\n", "train_folds", ".", "remove", "(", "valid_fold", ")", "\n", "train_folds", "=", "np", ".", "array", "(", "train_folds", ")", "\n", "\n", "df_memmap_filename", "=", "\"df_memmap.pkl\"", "\n", "memmap_filename", "=", "\"memmap.npy\"", "\n", "\n", "# df, lbl_itos,  mean, std = prepare_data_ptb_xl(self.data_folder, min_cnt=50, target_fs=self.target_fs,", "\n", "#                                                                        channels=input_channels, channel_stoi=channel_stoi_default, target_folder=self.target_folder, recreate_data=self.recreate_data_ptb_xl)", "\n", "df_mapped", ",", "lbl_itos", ",", "mean", ",", "std", "=", "load_dataset", "(", "target_folder", ")", "\n", "\n", "\n", "if", "(", "self", ".", "recreate_data_ptb_xl", ")", ":", "\n", "            ", "df_mapped", "=", "reformat_as_memmap", "(", "\n", "df", ",", "target_folder", "/", "(", "memmap_filename", ")", ",", "data_folder", "=", "target_folder", ")", "\n", "", "else", ":", "\n", "# df_mapped = pd.read_pickle(", "\n", "#     target_folder/(df_memmap_filename))", "\n", "            ", "df_mapped", "=", "pickle", ".", "load", "(", "open", "(", "target_folder", "/", "(", "df_memmap_filename", ")", ",", "\"rb\"", ")", ")", "\n", "#self.lbl_itos = np.array(lbl_itos[label])", "\n", "\n", "", "self", ".", "lbl_itos", "=", "lbl_itos", "\n", "self", ".", "num_classes", "=", "len", "(", "lbl_itos", ")", "\n", "# print(\"num classes:\", self.num_classes)", "\n", "\n", "if", "\"ptb\"", "in", "str", "(", "target_folder", ")", ":", "\n", "            ", "label", "=", "self", ".", "ptb_xl_label", "# just possible for ptb xl", "\n", "self", ".", "lbl_itos", "=", "np", ".", "array", "(", "lbl_itos", "[", "label", "]", ")", "\n", "label", "=", "label", "+", "\"_filtered_numeric\"", "\n", "", "else", ":", "\n", "            ", "label", "=", "\"label\"", "\n", "self", ".", "lbl_itos", "=", "lbl_itos", "\n", "\n", "", "df_mapped", "[", "\"diag_label\"", "]", "=", "df_mapped", "[", "label", "]", ".", "copy", "(", ")", "\n", "if", "\"ptb\"", "in", "str", "(", "target_folder", ")", "or", "self", ".", "mode", "==", "\"linear_evaluation\"", ":", "\n", "            ", "logger", ".", "debug", "(", "\"get labels for linear evaluation on ptb\"", ")", "\n", "df_mapped", "[", "\"label\"", "]", "=", "df_mapped", "[", "label", "]", ".", "apply", "(", "\n", "lambda", "x", ":", "multihot_encode", "(", "x", ",", "len", "(", "self", ".", "lbl_itos", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "debug", "(", "\"insert artifical labels to non-ptb dataset\"", ")", "\n", "df_mapped", "[", "\"label\"", "]", "=", "df_mapped", "[", "label", "]", ".", "apply", "(", "\n", "lambda", "x", ":", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", ")", "\n", "\n", "# logger.info(\"labels: \" + str(self.lbl_itos))", "\n", "# df_mapped[\"label\"] = df_mapped[\"label\"].apply(lambda x: onehot_encode(x, len(self.lbl_itos)))", "\n", "\n", "\n", "", "if", "self", ".", "mode", "==", "\"pretraining\"", ":", "\n", "            ", "valid_fold", "=", "test_fold", "=", "9", "\n", "if", "self", ".", "percentage", "<", "1.0", ":", "\n", "                ", "logger", ".", "info", "(", "\"reduce dataset to {}%\"", ".", "format", "(", "self", ".", "percentage", "*", "100", ")", ")", "\n", "total_samples", "=", "len", "(", "df_mapped", ")", "\n", "num_samples", "=", "int", "(", "self", ".", "percentage", "*", "total_samples", ")", "\n", "sample_indices", "=", "np", ".", "sort", "(", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "total_samples", ")", ",", "size", "=", "num_samples", ",", "replace", "=", "False", ")", ")", "\n", "df_mapped", "=", "df_mapped", ".", "loc", "[", "sample_indices", "]", "\n", "\n", "", "df_train", "=", "df_mapped", "[", "(", "df_mapped", ".", "strat_fold", "!=", "test_fold", ")", "&", "(", "\n", "df_mapped", ".", "strat_fold", "!=", "valid_fold", ")", "&", "(", "df_mapped", ".", "label", ".", "apply", "(", "lambda", "x", ":", "np", ".", "sum", "(", "x", ")", ">", "0", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "assert", "(", "self", ".", "folds", "<", "9", ")", "\n", "df_train", "=", "df_mapped", "[", "(", "df_mapped", ".", "strat_fold", ".", "apply", "(", "lambda", "x", ":", "x", "in", "train_folds", "[", "range", "(", "self", ".", "folds", ")", "]", ")", "&", "(", "df_mapped", ".", "label", ".", "apply", "(", "lambda", "x", ":", "np", ".", "sum", "(", "x", ")", ">", "0", ")", ")", ")", "]", "\n", "\n", "", "df_valid", "=", "df_mapped", "[", "(", "df_mapped", ".", "strat_fold", "==", "valid_fold", ")", "&", "(", "\n", "df_mapped", ".", "label", ".", "apply", "(", "lambda", "x", ":", "np", ".", "sum", "(", "x", ")", ">", "0", ")", ")", "]", "\n", "df_test", "=", "df_mapped", "[", "(", "df_mapped", ".", "strat_fold", "==", "test_fold", ")", "&", "(", "\n", "df_mapped", ".", "label", ".", "apply", "(", "lambda", "x", ":", "np", ".", "sum", "(", "x", ")", ">", "0", ")", ")", "]", "\n", "\n", "if", "self", ".", "filter_cinc", "and", "\"cinc\"", "in", "str", "(", "target_folder", ")", ":", "\n", "            ", "df_train", "=", "filter_out_datasets", "(", "df_train", ")", "\n", "df_valid", "=", "filter_out_datasets", "(", "df_valid", ")", "\n", "df_test", "=", "filter_out_datasets", "(", "df_test", ")", "\n", "\n", "", "train_ds", "=", "TimeseriesDatasetCrops", "(", "df_train", ",", "input_size", ",", "num_classes", "=", "len", "(", "self", ".", "lbl_itos", ")", ",", "data_folder", "=", "target_folder", ",", "chunk_length", "=", "chunk_length_train", "if", "chunkify_train", "else", "0", ",", "\n", "min_chunk_length", "=", "min_chunk_length", ",", "stride", "=", "stride_length_train", ",", "transforms", "=", "transforms", ",", "annotation", "=", "False", ",", "col_lbl", "=", "\"label\"", ",", "memmap_filename", "=", "target_folder", "/", "(", "memmap_filename", ")", ")", "\n", "val_ds", "=", "TimeseriesDatasetCrops", "(", "df_valid", ",", "input_size", ",", "num_classes", "=", "len", "(", "self", ".", "lbl_itos", ")", ",", "data_folder", "=", "target_folder", ",", "chunk_length", "=", "chunk_length_valid", "if", "chunkify_valid", "else", "0", ",", "\n", "min_chunk_length", "=", "min_chunk_length", ",", "stride", "=", "stride_length_valid", ",", "transforms", "=", "transforms", ",", "annotation", "=", "False", ",", "col_lbl", "=", "\"label\"", ",", "memmap_filename", "=", "target_folder", "/", "(", "memmap_filename", ")", ")", "\n", "self", ".", "df_train", "=", "df_train", "\n", "self", ".", "df_valid", "=", "df_valid", "\n", "self", ".", "df_test", "=", "df_test", "\n", "return", "train_ds", ",", "val_ds", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper._get_simclr_pipeline_transform": [[241, 251], ["torchvision.Compose"], "methods", ["None"], ["", "def", "_get_simclr_pipeline_transform", "(", "self", ")", ":", "\n", "# get a set of data augmentation transformations as described in the SimCLR paper.", "\n", "# find transformations in ecg_transformations.py file", "\n", "# data_transforms = transforms.Compose([RandomResizedCrop(crop_ratio_range=[0.5, 1.0]),", "\n", "#                                      ChannelResize(magnitude_range=[0.33, 3]),", "\n", "#                                      DynamicTimeWarp(),", "\n", "#                                      ToTensor()])", "\n", "# data_transforms = [RandomResizedCrop(), ChannelResize(), ToTensor()]", "\n", "        ", "data_transforms", "=", "transforms", ".", "Compose", "(", "self", ".", "transformations", ")", "\n", "return", "data_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.SimCLRDataSetWrapper.get_train_validation_data_loaders": [[252, 260], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "get_train_validation_data_loaders", "(", "self", ",", "train_ds", ",", "val_ds", ")", ":", "\n", "\n", "        ", "train_loader", "=", "DataLoader", "(", "train_ds", ",", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_ds", ",", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "self", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.SimCLRDataTransform.__init__": [[262, 266], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transform", ")", ":", "\n", "        ", "if", "transform", "is", "None", ":", "\n", "            ", "self", ".", "transform", "=", "lambda", "x", ":", "x", "\n", "", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.SimCLRDataTransform.__call__": [[267, 271], ["simclr_dataset_wrapper.SimCLRDataTransform.transform", "simclr_dataset_wrapper.SimCLRDataTransform.transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "xi", "=", "self", ".", "transform", "(", "sample", ")", "\n", "xj", "=", "self", ".", "transform", "(", "sample", ")", "\n", "return", "xi", ",", "xj", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.SwAVDataTransform.__init__": [[273, 278], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transform", ",", "num_crops", "=", "7", ")", ":", "\n", "        ", "if", "transform", "is", "None", ":", "\n", "            ", "self", ".", "transform", "=", "lambda", "x", ":", "x", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "num_crops", "=", "num_crops", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.SwAVDataTransform.__call__": [[279, 284], ["range", "transformed.append", "simclr_dataset_wrapper.SwAVDataTransform.transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "transformed", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "num_crops", ")", ":", "\n", "            ", "transformed", ".", "append", "(", "self", ".", "transform", "(", "sample", ")", "[", "0", "]", ")", "\n", "", "return", "transformed", ",", "sample", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.transformations_from_strings": [[25, 69], ["timeseries_transformations.ToTensor", "timeseries_transformations.TRandomResizedCrop", "timeseries_transformations.Transpose", "timeseries_transformations.TChannelResize", "timeseries_transformations.ToTensor", "simclr_dataset_wrapper.transformations_from_strings.str_to_trafo"], "function", ["None"], ["def", "transformations_from_strings", "(", "transformations", ",", "t_params", ")", ":", "\n", "    ", "if", "transformations", "is", "None", ":", "\n", "        ", "return", "[", "ToTensor", "(", ")", "]", "\n", "\n", "", "def", "str_to_trafo", "(", "trafo", ")", ":", "\n", "        ", "if", "trafo", "==", "\"RandomResizedCrop\"", ":", "\n", "            ", "return", "TRandomResizedCrop", "(", "crop_ratio_range", "=", "t_params", "[", "\"rr_crop_ratio_range\"", "]", ",", "output_size", "=", "t_params", "[", "\"output_size\"", "]", ")", "\n", "", "elif", "trafo", "==", "\"ChannelResize\"", ":", "\n", "            ", "return", "TChannelResize", "(", "magnitude_range", "=", "t_params", "[", "\"magnitude_range\"", "]", ")", "\n", "", "elif", "trafo", "==", "\"Negation\"", ":", "\n", "            ", "return", "TNegation", "(", ")", "\n", "", "elif", "trafo", "==", "\"DynamicTimeWarp\"", ":", "\n", "            ", "return", "TDynamicTimeWarp", "(", "warps", "=", "t_params", "[", "\"warps\"", "]", ",", "radius", "=", "t_params", "[", "\"radius\"", "]", ")", "\n", "", "elif", "trafo", "==", "\"DownSample\"", ":", "\n", "            ", "return", "TDownSample", "(", "downsample_ratio", "=", "t_params", "[", "\"downsample_ratio\"", "]", ")", "\n", "", "elif", "trafo", "==", "\"TimeWarp\"", ":", "\n", "            ", "return", "TimeWarp", "(", "epsilon", "=", "t_params", "[", "\"epsilon\"", "]", ")", "\n", "", "elif", "trafo", "==", "\"TimeOut\"", ":", "\n", "            ", "return", "TTimeOut", "(", "crop_ratio_range", "=", "t_params", "[", "\"to_crop_ratio_range\"", "]", ")", "\n", "", "elif", "trafo", "==", "\"GaussianNoise\"", ":", "\n", "            ", "return", "TGaussianNoise", "(", "scale", "=", "t_params", "[", "\"gaussian_scale\"", "]", ")", "\n", "", "elif", "trafo", "==", "\"BaselineWander\"", ":", "\n", "            ", "return", "TBaselineWander", "(", "Cmax", "=", "t_params", "[", "\"bw_cmax\"", "]", ")", "\n", "", "elif", "trafo", "==", "\"PowerlineNoise\"", ":", "\n", "            ", "return", "TPowerlineNoise", "(", "Cmax", "=", "t_params", "[", "\"pl_cmax\"", "]", ")", "\n", "", "elif", "trafo", "==", "\"EMNoise\"", ":", "\n", "            ", "return", "TEMNoise", "(", "Cmax", "=", "t_params", "[", "\"em_cmax\"", "]", ")", "\n", "", "elif", "trafo", "==", "\"BaselineShift\"", ":", "\n", "            ", "return", "TBaselineShift", "(", "Cmax", "=", "t_params", "[", "\"bs_cmax\"", "]", ")", "\n", "", "elif", "trafo", "==", "\"GaussianBlur\"", ":", "\n", "            ", "return", "TGaussianBlur1d", "(", ")", "\n", "", "elif", "trafo", "==", "\"Normalize\"", ":", "\n", "            ", "return", "TNormalize", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "str", "(", "trafo", ")", "+", "\" is not a valid transformation\"", ")", "\n", "\n", "# for numpy transformations", "\n", "# trafo_list = [str_to_trafo(trafo)", "\n", "#               for trafo in transformations] + [ToTensor()]", "\n", "\n", "# for torch transformations", "\n", "", "", "trafo_list", "=", "[", "ToTensor", "(", "transpose_data", "=", "False", ")", "]", "+", "[", "str_to_trafo", "(", "trafo", ")", "\n", "for", "trafo", "in", "transformations", "]", "+", "[", "Transpose", "(", ")", "]", "\n", "return", "trafo_list", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.multihot_encode": [[286, 290], ["numpy.zeros"], "function", ["None"], ["", "", "def", "multihot_encode", "(", "x", ",", "num_classes", ")", ":", "\n", "    ", "res", "=", "np", ".", "zeros", "(", "num_classes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "res", "[", "x", "]", "=", "1", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.simclr_dataset_wrapper.filter_out_datasets": [[292, 299], ["set"], "function", ["None"], ["", "def", "filter_out_datasets", "(", "df", ",", "negative_datasets", "=", "{", "\"PTB\"", ",", "\"PTB-XL\"", "}", ")", ":", "\n", "    ", "datasets", "=", "set", "(", "df", "[", "\"dataset\"", "]", ")", "\n", "positive_datasets", "=", "[", "\n", "dataset", "for", "dataset", "in", "datasets", "if", "dataset", "not", "in", "negative_datasets", "]", "\n", "positive_df_ids", "=", "[", "row", "in", "positive_datasets", "for", "row", "in", "df", "[", "\"dataset\"", "]", "]", "\n", "filtered_df", "=", "df", ".", "loc", "[", "positive_df_ids", "]", "\n", "return", "filtered_df", "\n", "", ""]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.ConvLayer.__init__": [[73, 92], ["xresnet1d._conv_func", "xresnet1d.init_default", "torch.Sequential.__init__", "_conv_func.", "weight_norm", "act_bn.append", "act_bn.append", "act_bn.append", "act_bn.reverse", "layers.append", "spectral_norm", "act_cls", "xresnet1d.BatchNorm", "InstanceNorm"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._conv_func", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.init_default", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.BatchNorm"], ["def", "__init__", "(", "self", ",", "ni", ",", "nf", ",", "ks", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "None", ",", "bias", "=", "None", ",", "ndim", "=", "2", ",", "norm_type", "=", "NormType", ".", "Batch", ",", "bn_1st", "=", "True", ",", "\n", "act_cls", "=", "nn", ".", "ReLU", ",", "transpose", "=", "False", ",", "init", "=", "nn", ".", "init", ".", "kaiming_normal_", ",", "xtra", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "padding", "is", "None", ":", "padding", "=", "(", "(", "ks", "-", "1", ")", "//", "2", "if", "not", "transpose", "else", "0", ")", "\n", "bn", "=", "norm_type", "in", "(", "NormType", ".", "Batch", ",", "NormType", ".", "BatchZero", ")", "\n", "inn", "=", "norm_type", "in", "(", "NormType", ".", "Instance", ",", "NormType", ".", "InstanceZero", ")", "\n", "if", "bias", "is", "None", ":", "bias", "=", "not", "(", "bn", "or", "inn", ")", "\n", "conv_func", "=", "_conv_func", "(", "ndim", ",", "transpose", "=", "transpose", ")", "\n", "conv", "=", "init_default", "(", "conv_func", "(", "ni", ",", "nf", ",", "kernel_size", "=", "ks", ",", "bias", "=", "bias", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "**", "kwargs", ")", ",", "init", ")", "\n", "if", "norm_type", "==", "NormType", ".", "Weight", ":", "conv", "=", "weight_norm", "(", "conv", ")", "\n", "elif", "norm_type", "==", "NormType", ".", "Spectral", ":", "conv", "=", "spectral_norm", "(", "conv", ")", "\n", "layers", "=", "[", "conv", "]", "\n", "act_bn", "=", "[", "]", "\n", "if", "act_cls", "is", "not", "None", ":", "act_bn", ".", "append", "(", "act_cls", "(", ")", ")", "\n", "if", "bn", ":", "act_bn", ".", "append", "(", "BatchNorm", "(", "nf", ",", "norm_type", "=", "norm_type", ",", "ndim", "=", "ndim", ")", ")", "\n", "if", "inn", ":", "act_bn", ".", "append", "(", "InstanceNorm", "(", "nf", ",", "norm_type", "=", "norm_type", ",", "ndim", "=", "ndim", ")", ")", "\n", "if", "bn_1st", ":", "act_bn", ".", "reverse", "(", ")", "\n", "layers", "+=", "act_bn", "\n", "if", "xtra", ":", "layers", ".", "append", "(", "xtra", ")", "\n", "super", "(", ")", ".", "__init__", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.ResBlock.__init__": [[112, 140], ["xresnet1d.delegates", "torch.Module.__init__", "dict", "dict", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "convpath.append", "convpath.append", "idpath.append", "idpath.insert", "torch.ReLU", "torch.ReLU", "torch.ReLU", "act_cls", "xresnet1d.ConvLayer", "xresnet1d.ConvLayer", "xresnet1d.ConvLayer", "xresnet1d.ConvLayer", "xresnet1d.ConvLayer", "SEModule", "SimpleSelfAttention", "xresnet1d.ConvLayer", "pool"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.delegates", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["@", "delegates", "(", "ConvLayer", ".", "__init__", ")", "\n", "def", "__init__", "(", "self", ",", "expansion", ",", "ni", ",", "nf", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "groups", "=", "1", ",", "reduction", "=", "None", ",", "nh1", "=", "None", ",", "nh2", "=", "None", ",", "dw", "=", "False", ",", "g2", "=", "1", ",", "\n", "sa", "=", "False", ",", "sym", "=", "False", ",", "norm_type", "=", "NormType", ".", "Batch", ",", "act_cls", "=", "nn", ".", "ReLU", ",", "ndim", "=", "2", ",", "\n", "pool", "=", "AvgPool", ",", "pool_first", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "norm2", "=", "(", "NormType", ".", "BatchZero", "if", "norm_type", "==", "NormType", ".", "Batch", "else", "\n", "NormType", ".", "InstanceZero", "if", "norm_type", "==", "NormType", ".", "Instance", "else", "norm_type", ")", "\n", "if", "nh2", "is", "None", ":", "nh2", "=", "nf", "\n", "if", "nh1", "is", "None", ":", "nh1", "=", "nh2", "\n", "nf", ",", "ni", "=", "nf", "*", "expansion", ",", "ni", "*", "expansion", "\n", "k0", "=", "dict", "(", "norm_type", "=", "norm_type", ",", "act_cls", "=", "act_cls", ",", "ndim", "=", "ndim", ",", "**", "kwargs", ")", "\n", "k1", "=", "dict", "(", "norm_type", "=", "norm2", ",", "act_cls", "=", "None", ",", "ndim", "=", "ndim", ",", "**", "kwargs", ")", "\n", "layers", "=", "[", "ConvLayer", "(", "ni", ",", "nh2", ",", "kernel_size", ",", "stride", "=", "stride", ",", "groups", "=", "ni", "if", "dw", "else", "groups", ",", "**", "k0", ")", ",", "\n", "ConvLayer", "(", "nh2", ",", "nf", ",", "kernel_size", ",", "groups", "=", "g2", ",", "**", "k1", ")", "\n", "]", "if", "expansion", "==", "1", "else", "[", "\n", "ConvLayer", "(", "ni", ",", "nh1", ",", "1", ",", "**", "k0", ")", ",", "\n", "ConvLayer", "(", "nh1", ",", "nh2", ",", "kernel_size", ",", "stride", "=", "stride", ",", "groups", "=", "nh1", "if", "dw", "else", "groups", ",", "**", "k0", ")", ",", "\n", "ConvLayer", "(", "nh2", ",", "nf", ",", "1", ",", "groups", "=", "g2", ",", "**", "k1", ")", "]", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "convpath", "=", "[", "self", ".", "convs", "]", "\n", "if", "reduction", ":", "convpath", ".", "append", "(", "SEModule", "(", "nf", ",", "reduction", "=", "reduction", ",", "act_cls", "=", "act_cls", ")", ")", "\n", "if", "sa", ":", "convpath", ".", "append", "(", "SimpleSelfAttention", "(", "nf", ",", "ks", "=", "1", ",", "sym", "=", "sym", ")", ")", "\n", "self", ".", "convpath", "=", "nn", ".", "Sequential", "(", "*", "convpath", ")", "\n", "idpath", "=", "[", "]", "\n", "if", "ni", "!=", "nf", ":", "idpath", ".", "append", "(", "ConvLayer", "(", "ni", ",", "nf", ",", "1", ",", "act_cls", "=", "None", ",", "ndim", "=", "ndim", ",", "**", "kwargs", ")", ")", "\n", "if", "stride", "!=", "1", ":", "idpath", ".", "insert", "(", "(", "1", ",", "0", ")", "[", "pool_first", "]", ",", "pool", "(", "2", ",", "ndim", "=", "ndim", ",", "ceil_mode", "=", "True", ")", ")", "\n", "self", ".", "idpath", "=", "nn", ".", "Sequential", "(", "*", "idpath", ")", "\n", "self", ".", "act", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "if", "act_cls", "is", "nn", ".", "ReLU", "else", "act_cls", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.ResBlock.forward": [[141, 142], ["xresnet1d.ResBlock.act", "xresnet1d.ResBlock.convpath", "xresnet1d.ResBlock.idpath"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "return", "self", ".", "act", "(", "self", ".", "convpath", "(", "x", ")", "+", "self", ".", "idpath", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__": [[153, 176], ["xresnet1d.delegates", "xresnet1d.store_attr", "basic_conv1d.create_head1d", "torch.Sequential.__init__", "xresnet1d.init_cnn", "xresnet1d.ConvLayer", "int", "xresnet1d.XResNet1d._make_layer", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "range", "enumerate", "len", "len"], "methods", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.delegates", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.store_attr", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.basic_conv1d.create_head1d", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.init_cnn", "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d._make_layer"], ["    ", "@", "delegates", "(", "ResBlock", ")", "\n", "def", "__init__", "(", "self", ",", "block", ",", "expansion", ",", "layers", ",", "p", "=", "0.0", ",", "input_channels", "=", "3", ",", "num_classes", "=", "1000", ",", "stem_szs", "=", "(", "32", ",", "32", ",", "64", ")", ",", "kernel_size", "=", "5", ",", "kernel_size_stem", "=", "5", ",", "\n", "widen", "=", "1.0", ",", "sa", "=", "False", ",", "act_cls", "=", "nn", ".", "ReLU", ",", "lin_ftrs_head", "=", "None", ",", "ps_head", "=", "0.5", ",", "bn_final_head", "=", "False", ",", "bn_head", "=", "True", ",", "act_head", "=", "\"relu\"", ",", "concat_pooling", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "store_attr", "(", "self", ",", "'block,expansion,act_cls'", ")", "\n", "stem_szs", "=", "[", "input_channels", ",", "*", "stem_szs", "]", "\n", "stem", "=", "[", "ConvLayer", "(", "stem_szs", "[", "i", "]", ",", "stem_szs", "[", "i", "+", "1", "]", ",", "ks", "=", "kernel_size_stem", ",", "stride", "=", "2", "if", "i", "==", "0", "else", "1", ",", "act_cls", "=", "act_cls", ",", "ndim", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "\n", "#block_szs = [int(o*widen) for o in [64,128,256,512] +[256]*(len(layers)-4)]", "\n", "block_szs", "=", "[", "int", "(", "o", "*", "widen", ")", "for", "o", "in", "[", "64", ",", "64", ",", "64", ",", "64", "]", "+", "[", "32", "]", "*", "(", "len", "(", "layers", ")", "-", "4", ")", "]", "\n", "block_szs", "=", "[", "64", "//", "expansion", "]", "+", "block_szs", "\n", "blocks", "=", "[", "self", ".", "_make_layer", "(", "ni", "=", "block_szs", "[", "i", "]", ",", "nf", "=", "block_szs", "[", "i", "+", "1", "]", ",", "blocks", "=", "l", ",", "\n", "stride", "=", "1", "if", "i", "==", "0", "else", "2", ",", "kernel_size", "=", "kernel_size", ",", "sa", "=", "sa", "and", "i", "==", "len", "(", "layers", ")", "-", "4", ",", "ndim", "=", "1", ",", "**", "kwargs", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "layers", ")", "]", "\n", "\n", "head", "=", "create_head1d", "(", "block_szs", "[", "-", "1", "]", "*", "expansion", ",", "nc", "=", "num_classes", ",", "lin_ftrs", "=", "lin_ftrs_head", ",", "ps", "=", "ps_head", ",", "bn_final", "=", "bn_final_head", ",", "bn", "=", "bn_head", ",", "act", "=", "act_head", ",", "concat_pooling", "=", "concat_pooling", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "*", "stem", ",", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "*", "blocks", ",", "\n", "head", ",", "\n", ")", "\n", "init_cnn", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d._make_layer": [[177, 182], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "xresnet1d.XResNet1d.block", "range"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "ni", ",", "nf", ",", "blocks", ",", "stride", ",", "kernel_size", ",", "sa", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "*", "[", "self", ".", "block", "(", "self", ".", "expansion", ",", "ni", "if", "i", "==", "0", "else", "nf", ",", "nf", ",", "stride", "=", "stride", "if", "i", "==", "0", "else", "1", ",", "\n", "kernel_size", "=", "kernel_size", ",", "sa", "=", "sa", "and", "i", "==", "(", "blocks", "-", "1", ")", ",", "act_cls", "=", "self", ".", "act_cls", ",", "**", "kwargs", ")", "\n", "for", "i", "in", "range", "(", "blocks", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.get_layer_groups": [[183, 185], ["None"], "methods", ["None"], ["", "def", "get_layer_groups", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", "[", "3", "]", ",", "self", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.get_output_layer": [[186, 188], ["None"], "methods", ["None"], ["", "def", "get_output_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", "[", "-", "1", "]", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.set_output_layer": [[189, 191], ["None"], "methods", ["None"], ["", "def", "set_output_layer", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", "[", "-", "1", "]", "[", "-", "1", "]", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.delegates": [[21, 36], ["inspect.signature", "dict", "dict.pop", "dict.update", "inspect.signature.replace", "inspect.signature().parameters.items", "dict.values", "inspect.signature", "xresnet1d.ConvLayer.__init__"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.XResNet1d.__init__"], ["def", "delegates", "(", "to", "=", "None", ",", "keep", "=", "False", ")", ":", "\n", "    ", "\"Decorator: replace `**kwargs` in signature with params from `to`\"", "\n", "def", "_f", "(", "f", ")", ":", "\n", "        ", "if", "to", "is", "None", ":", "to_f", ",", "from_f", "=", "f", ".", "__base__", ".", "__init__", ",", "f", ".", "__init__", "\n", "else", ":", "to_f", ",", "from_f", "=", "to", ",", "f", "\n", "sig", "=", "inspect", ".", "signature", "(", "from_f", ")", "\n", "sigd", "=", "dict", "(", "sig", ".", "parameters", ")", "\n", "k", "=", "sigd", ".", "pop", "(", "'kwargs'", ")", "\n", "s2", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "inspect", ".", "signature", "(", "to_f", ")", ".", "parameters", ".", "items", "(", ")", "\n", "if", "v", ".", "default", "!=", "inspect", ".", "Parameter", ".", "empty", "and", "k", "not", "in", "sigd", "}", "\n", "sigd", ".", "update", "(", "s2", ")", "\n", "if", "keep", ":", "sigd", "[", "'kwargs'", "]", "=", "k", "\n", "from_f", ".", "__signature__", "=", "sig", ".", "replace", "(", "parameters", "=", "sigd", ".", "values", "(", ")", ")", "\n", "return", "f", "\n", "", "return", "_f", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.store_attr": [[37, 41], ["re.split", "setattr", "inspect.currentframe"], "function", ["None"], ["", "def", "store_attr", "(", "self", ",", "nms", ")", ":", "\n", "    ", "\"Store params named in comma-separated `nms` from calling context into attrs in `self`\"", "\n", "mod", "=", "inspect", ".", "currentframe", "(", ")", ".", "f_back", ".", "f_locals", "\n", "for", "n", "in", "re", ".", "split", "(", "', *'", ",", "nms", ")", ":", "setattr", "(", "self", ",", "n", ",", "mod", "[", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._conv_func": [[45, 49], ["getattr"], "function", ["None"], ["def", "_conv_func", "(", "ndim", "=", "2", ",", "transpose", "=", "False", ")", ":", "\n", "    ", "\"Return the proper conv `ndim` function, potentially `transposed`.\"", "\n", "assert", "1", "<=", "ndim", "<=", "3", "\n", "return", "getattr", "(", "nn", ",", "f'Conv{\"Transpose\" if transpose else \"\"}{ndim}d'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.init_default": [[50, 56], ["hasattr", "func", "torch.no_grad", "torch.no_grad", "torch.no_grad", "getattr", "m.bias.fill_"], "function", ["None"], ["", "def", "init_default", "(", "m", ",", "func", "=", "nn", ".", "init", ".", "kaiming_normal_", ")", ":", "\n", "    ", "\"Initialize `m` weights with `func` and set `bias` to 0.\"", "\n", "if", "func", "and", "hasattr", "(", "m", ",", "'weight'", ")", ":", "func", "(", "m", ".", "weight", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "getattr", "(", "m", ",", "'bias'", ",", "None", ")", "is", "not", "None", ":", "m", ".", "bias", ".", "fill_", "(", "0.", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._get_norm": [[57, 65], ["getattr", "bn.bias.data.fill_", "bn.weight.data.fill_"], "function", ["None"], ["", "def", "_get_norm", "(", "prefix", ",", "nf", ",", "ndim", "=", "2", ",", "zero", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"Norm layer with `nf` features and `ndim` initialized depending on `norm_type`.\"", "\n", "assert", "1", "<=", "ndim", "<=", "3", "\n", "bn", "=", "getattr", "(", "nn", ",", "f\"{prefix}{ndim}d\"", ")", "(", "nf", ",", "**", "kwargs", ")", "\n", "if", "bn", ".", "affine", ":", "\n", "        ", "bn", ".", "bias", ".", "data", ".", "fill_", "(", "1e-3", ")", "\n", "bn", ".", "weight", ".", "data", ".", "fill_", "(", "0.", "if", "zero", "else", "1.", ")", "\n", "", "return", "bn", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.BatchNorm": [[66, 69], ["xresnet1d._get_norm"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._get_norm"], ["", "def", "BatchNorm", "(", "nf", ",", "ndim", "=", "2", ",", "norm_type", "=", "NormType", ".", "Batch", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"BatchNorm layer with `nf` features and `ndim` initialized depending on `norm_type`.\"", "\n", "return", "_get_norm", "(", "'BatchNorm'", ",", "nf", ",", "ndim", ",", "zero", "=", "norm_type", "==", "NormType", ".", "BatchZero", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.AdaptiveAvgPool": [[94, 98], ["getattr"], "function", ["None"], ["", "", "def", "AdaptiveAvgPool", "(", "sz", "=", "1", ",", "ndim", "=", "2", ")", ":", "\n", "    ", "\"nn.AdaptiveAvgPool layer for `ndim`\"", "\n", "assert", "1", "<=", "ndim", "<=", "3", "\n", "return", "getattr", "(", "nn", ",", "f\"AdaptiveAvgPool{ndim}d\"", ")", "(", "sz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.MaxPool": [[99, 103], ["getattr"], "function", ["None"], ["", "def", "MaxPool", "(", "ks", "=", "2", ",", "stride", "=", "None", ",", "padding", "=", "0", ",", "ndim", "=", "2", ",", "ceil_mode", "=", "False", ")", ":", "\n", "    ", "\"nn.MaxPool layer for `ndim`\"", "\n", "assert", "1", "<=", "ndim", "<=", "3", "\n", "return", "getattr", "(", "nn", ",", "f\"MaxPool{ndim}d\"", ")", "(", "ks", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.AvgPool": [[104, 108], ["getattr"], "function", ["None"], ["", "def", "AvgPool", "(", "ks", "=", "2", ",", "stride", "=", "None", ",", "padding", "=", "0", ",", "ndim", "=", "2", ",", "ceil_mode", "=", "False", ")", ":", "\n", "    ", "\"nn.AvgPool layer for `ndim`\"", "\n", "assert", "1", "<=", "ndim", "<=", "3", "\n", "return", "getattr", "(", "nn", ",", "f\"AvgPool{ndim}d\"", ")", "(", "ks", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "ceil_mode", "=", "ceil_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.init_cnn": [[146, 150], ["isinstance", "m.children", "getattr", "torch.init.constant_", "torch.init.kaiming_normal_", "xresnet1d.init_cnn"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.init_cnn"], ["", "def", "init_cnn", "(", "m", ")", ":", "\n", "    ", "if", "getattr", "(", "m", ",", "'bias'", ",", "None", ")", "is", "not", "None", ":", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv1d", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "for", "l", "in", "m", ".", "children", "(", ")", ":", "init_cnn", "(", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d": [[193, 195], ["xresnet1d.XResNet1d"], "function", ["None"], ["", "", "def", "_xresnet1d", "(", "expansion", ",", "layers", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "XResNet1d", "(", "ResBlock", ",", "expansion", ",", "layers", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.xresnet1d18": [[196, 197], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["", "def", "xresnet1d18", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d34", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.xresnet1d34": [[197, 198], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d34", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d50", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.xresnet1d50": [[198, 199], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d50", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d101", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.xresnet1d101": [[199, 200], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d101", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d152", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.xresnet1d152": [[200, 201], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d152", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d18_deep", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "2", ",", "2", ",", "2", ",", "2", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.xresnet1d18_deep": [[201, 202], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d18_deep", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "2", ",", "2", ",", "2", ",", "2", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d34_deep", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.xresnet1d34_deep": [[202, 203], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d34_deep", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d50_deep", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.xresnet1d50_deep": [[203, 204], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d50_deep", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d18_deeper", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "2", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.xresnet1d18_deeper": [[204, 205], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d18_deeper", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "2", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d34_deeper", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.xresnet1d34_deeper": [[205, 206], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d34_deeper", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "1", ",", "[", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "def", "xresnet1d50_deeper", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", ""]], "home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d.xresnet1d50_deeper": [[206, 207], ["xresnet1d._xresnet1d"], "function", ["home.repos.pwc.inspect_result.hhi-aml_ecg-selfsupervised.clinical_ts.xresnet1d._xresnet1d"], ["def", "xresnet1d50_deeper", "(", "**", "kwargs", ")", ":", "return", "_xresnet1d", "(", "4", ",", "[", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "", ""]]}