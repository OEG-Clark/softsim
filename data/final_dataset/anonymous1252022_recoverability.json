{"home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.train_gnn.GNN.__init__": [[16, 59], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "train_gnn.GNN.classifier.append", "train_gnn.GNN.classifier.append", "train_gnn.GNN.classifier.append", "train_gnn.GNN.classifier.append", "train_gnn.GNN.classifier.append", "train_gnn.GNN.classifier.append", "train_gnn.GNN.embedding.append", "range", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch_geometric.nn.GraphConv", "train_gnn.GNN.embedding.append", "train_gnn.GNN.embedding.append", "range", "type", "torch_geometric.nn.GraphConv", "torch_geometric.nn.SAGEConv", "train_gnn.GNN.embedding.append", "train_gnn.GNN.embedding.append", "range", "ValueError", "torch_geometric.nn.SAGEConv", "torch_geometric.nn.GINConv", "train_gnn.GNN.embedding.append", "train_gnn.GNN.embedding.append", "range", "torch_geometric.nn.GINConv", "torch_geometric.nn.GATv2Conv", "train_gnn.GNN.embedding.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch_geometric.nn.GATv2Conv", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.GNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "hidden_channels", ":", "int", ",", "out_channels", ":", "int", ",", "num_embedding_layers", ":", "int", ",", "dropout", ":", "float", ",", "\n", "type", ":", "str", "=", "'GraphConv'", ",", "heads", ":", "int", "=", "1", ",", "eps", ":", "float", "=", "10.0", ",", "norm_factor", ":", "Union", "[", "torch", ".", "Tensor", ",", "type", "(", "None", ")", "]", "=", "None", ",", "task_type", ":", "str", "=", "'s'", ")", ":", "\n", "        ", "super", "(", "GNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_embedding_layers", "=", "num_embedding_layers", "\n", "self", ".", "embedding", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "if", "(", "type", "==", "'GraphConv'", ")", "or", "(", "type", "==", "'GCNConv'", ")", ":", "\n", "            ", "if", "num_embedding_layers", ">=", "1", ":", "\n", "                ", "self", ".", "embedding", ".", "append", "(", "GraphConv", "(", "in_channels", ",", "hidden_channels", ",", "aggr", "=", "'add'", ")", ")", "\n", "for", "_", "in", "range", "(", "num_embedding_layers", "-", "1", ")", ":", "\n", "                    ", "self", ".", "embedding", ".", "append", "(", "GraphConv", "(", "hidden_channels", ",", "hidden_channels", ",", "aggr", "=", "'add'", ")", ")", "\n", "", "", "", "elif", "type", "==", "'SAGEConv'", ":", "\n", "            ", "if", "num_embedding_layers", ">=", "1", ":", "\n", "                ", "self", ".", "embedding", ".", "append", "(", "SAGEConv", "(", "in_channels", ",", "hidden_channels", ")", ")", "\n", "for", "_", "in", "range", "(", "num_embedding_layers", "-", "1", ")", ":", "\n", "                    ", "self", ".", "embedding", ".", "append", "(", "SAGEConv", "(", "hidden_channels", ",", "hidden_channels", ")", ")", "\n", "", "", "", "elif", "type", "==", "'GINConv'", ":", "\n", "            ", "if", "num_embedding_layers", ">=", "1", ":", "\n", "                ", "self", ".", "embedding", ".", "append", "(", "GINConv", "(", "nn", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "hidden_channels", ")", ",", "eps", "=", "eps", ")", ")", "\n", "for", "_", "in", "range", "(", "num_embedding_layers", "-", "1", ")", ":", "\n", "                    ", "self", ".", "embedding", ".", "append", "(", "GINConv", "(", "nn", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "hidden_channels", ")", ",", "eps", "=", "eps", ")", ")", "\n", "", "", "", "elif", "type", "==", "'GATv2Conv'", ":", "\n", "            ", "if", "num_embedding_layers", ">=", "1", ":", "\n", "                ", "self", ".", "embedding", ".", "append", "(", "GATv2Conv", "(", "in_channels", ",", "hidden_channels", "//", "heads", ",", "heads", "=", "heads", ")", ")", "\n", "for", "_", "in", "range", "(", "num_embedding_layers", "-", "1", ")", ":", "\n", "                    ", "self", ".", "embedding", ".", "append", "(", "GATv2Conv", "(", "hidden_channels", ",", "hidden_channels", "//", "heads", ",", "heads", "=", "heads", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Incorrect embedding type: '", "+", "type", ")", "\n", "\n", "", "self", ".", "classifier", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "if", "num_embedding_layers", "<=", "0", ":", "\n", "            ", "self", ".", "classifier", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "hidden_channels", ")", ")", "\n", "self", ".", "classifier", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "hidden_channels", ")", ")", "\n", "self", ".", "classifier", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "hidden_channels", ")", ")", "\n", "self", ".", "classifier", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "hidden_channels", ")", ")", "\n", "self", ".", "classifier", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "out_channels", ")", ")", "\n", "\n", "", "self", ".", "type", "=", "type", "\n", "self", ".", "norm_factor", "=", "norm_factor", "\n", "self", ".", "dropout", "=", "dropout", "\n", "assert", "task_type", "in", "[", "'s'", ",", "'m'", "]", ",", "\"task_type should be one of {'s', 'm'}\"", "\n", "self", ".", "task_type", "=", "task_type", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.train_gnn.GNN.forward": [[60, 90], ["enumerate", "range", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "len", "torch.dropout.log_softmax", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_all", ":", "torch", ".", "Tensor", ",", "n_id", ":", "torch", ".", "Tensor", ",", "adjs", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "# Embedding part:", "\n", "        ", "x", "=", "x_all", "[", "n_id", "]", "\n", "if", "self", ".", "type", "==", "'GCNConv'", ":", "\n", "            ", "norm_factor", "=", "self", ".", "norm_factor", "[", "n_id", "]", "\n", "x", "=", "x", "*", "norm_factor", "\n", "\n", "", "for", "i", ",", "(", "edge_index", ",", "_", ",", "size", ")", "in", "enumerate", "(", "adjs", ")", ":", "\n", "            ", "x_target", "=", "x", "[", ":", "size", "[", "1", "]", "]", "\n", "x", "=", "self", ".", "embedding", "[", "i", "]", "(", "(", "x", ",", "x_target", ")", ",", "edge_index", ")", "\n", "\n", "if", "self", ".", "type", "==", "'GCNConv'", ":", "\n", "                ", "norm_factor", "=", "norm_factor", "[", ":", "size", "[", "1", "]", "]", "\n", "x", "=", "x", "*", "norm_factor", "\n", "\n", "", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# Classifier part:", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "classifier", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "classifier", "[", "i", "]", "(", "x", ")", "\n", "\n", "if", "i", "!=", "len", "(", "self", ".", "classifier", ")", "-", "1", ":", "\n", "                ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "", "if", "self", ".", "task_type", "==", "'s'", ":", "\n", "            ", "return", "x", ".", "log_softmax", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "# (m)", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.train_gnn.GNN.inference": [[91, 133], ["tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.set_description", "range", "tqdm.tqdm.tqdm.close", "torch.cat.to", "torch.cat.to", "range", "torch.relu.cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "adj.to", "x_all[].to", "torch.relu", "torch.relu", "xs.append", "tqdm.tqdm.tqdm.update", "torch.relu", "torch.relu", "torch.cat.size", "torch.cat.size", "torch.relu.cpu", "len"], "methods", ["None"], ["", "", "def", "inference", "(", "self", ",", "x_all", ":", "torch", ".", "Tensor", ",", "subgraph_loader", ":", "NeighborSampler", ",", "device", ":", "torch", ".", "device", ")", "->", "torch", ".", "Tensor", ":", "\n", "# Embedding part:", "\n", "        ", "pbar", "=", "tqdm", "(", "total", "=", "x_all", ".", "size", "(", "0", ")", "*", "self", ".", "num_embedding_layers", ")", "\n", "pbar", ".", "set_description", "(", "'Evaluating'", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_embedding_layers", ")", ":", "\n", "            ", "xs", "=", "[", "]", "\n", "for", "batch_size", ",", "n_id", ",", "adj", "in", "subgraph_loader", ":", "\n", "                ", "edge_index", ",", "original_edges", ",", "size", "=", "adj", ".", "to", "(", "device", ")", "\n", "x", "=", "x_all", "[", "n_id", "]", ".", "to", "(", "device", ")", "\n", "\n", "if", "self", ".", "type", "==", "'GCNConv'", ":", "\n", "                    ", "norm_factor", "=", "self", ".", "norm_factor", "[", "n_id", "]", "\n", "x", "=", "x", "*", "norm_factor", "\n", "\n", "", "x_target", "=", "x", "[", ":", "size", "[", "1", "]", "]", "\n", "x", "=", "self", ".", "embedding", "[", "i", "]", "(", "(", "x", ",", "x_target", ")", ",", "edge_index", ")", "\n", "\n", "if", "self", ".", "type", "==", "'GCNConv'", ":", "\n", "                    ", "norm_factor", "=", "norm_factor", "[", ":", "size", "[", "1", "]", "]", "\n", "x", "=", "x", "*", "norm_factor", "\n", "\n", "", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "xs", ".", "append", "(", "x", ".", "cpu", "(", ")", ")", "\n", "\n", "pbar", ".", "update", "(", "batch_size", ")", "\n", "\n", "", "x_all", "=", "torch", ".", "cat", "(", "xs", ",", "dim", "=", "0", ")", "\n", "\n", "", "pbar", ".", "close", "(", ")", "\n", "\n", "# Classifier part:", "\n", "x", "=", "x_all", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "classifier", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "classifier", "[", "i", "]", "(", "x", ")", "\n", "\n", "if", "i", "!=", "len", "(", "self", ".", "classifier", ")", "-", "1", ":", "\n", "                ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "", "", "x_all", "=", "x", ".", "cpu", "(", ")", "\n", "\n", "return", "x_all", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.train_gnn.train": [[135, 165], ["model.train", "tqdm.tqdm", "tqdm.tqdm.set_description", "data.x.to", "data.y.to", "tqdm.tqdm.close", "optimizer.zero_grad", "model", "F.binary_cross_entropy_with_logits.backward", "optimizer.step", "float", "tqdm.tqdm.update", "len", "int", "isinstance", "adj.to", "torch.nll_loss", "torch.binary_cross_entropy_with_logits", "data.train_mask.sum"], "function", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.train", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho.ED.backward"], ["", "", "def", "train", "(", "model", ":", "GNN", ",", "optimizer", ":", "torch", ".", "optim", ".", "Adam", ",", "data", ":", "Data", ",", "train_loader", ":", "NeighborSampler", ",", "epoch", ":", "int", ",", "device", ":", "torch", ".", "device", ")", "->", "float", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "int", "(", "data", ".", "train_mask", ".", "sum", "(", ")", ")", ")", "\n", "pbar", ".", "set_description", "(", "f'Epoch {epoch:02d}'", ")", "\n", "x", "=", "data", ".", "x", ".", "to", "(", "device", ")", "\n", "y", "=", "data", ".", "y", ".", "to", "(", "device", ")", "\n", "total_loss", "=", "0", "\n", "\n", "for", "batch_size", ",", "n_id", ",", "adjs", "in", "train_loader", ":", "\n", "        ", "if", "not", "isinstance", "(", "adjs", ",", "list", ")", ":", "\n", "            ", "adjs", "=", "[", "adjs", "]", "\n", "", "adjs", "=", "[", "adj", ".", "to", "(", "device", ")", "for", "adj", "in", "adjs", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "out", "=", "model", "(", "x", ",", "n_id", ",", "adjs", ")", "\n", "if", "model", ".", "task_type", "==", "'s'", ":", "\n", "            ", "loss", "=", "F", ".", "nll_loss", "(", "out", ",", "y", "[", "n_id", "[", ":", "batch_size", "]", "]", ")", "\n", "", "else", ":", "# (m)", "\n", "            ", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "out", ",", "y", "[", "n_id", "[", ":", "batch_size", "]", "]", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "total_loss", "+=", "float", "(", "loss", ")", "\n", "pbar", ".", "update", "(", "batch_size", ")", "\n", "\n", "", "pbar", ".", "close", "(", ")", "\n", "\n", "loss", "=", "total_loss", "/", "len", "(", "train_loader", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.train_gnn.test": [[167, 189], ["torch.no_grad", "torch.no_grad", "model.eval", "model.inference", "y.cpu().unsqueeze", "model.inference.argmax", "y.cpu", "y.cpu", "sklearn.metrics.f1_score", "int", "int", "y_pred[].eq().sum", "mask.sum", "y_pred[].eq"], "function", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.GNN.inference"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test", "(", "model", ":", "GNN", ",", "data", ":", "Data", ",", "subgraph_loader", ":", "NeighborSampler", ",", "device", ":", "torch", ".", "device", ")", "->", "List", "[", "float", "]", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "x", "=", "data", ".", "x", "\n", "y", "=", "data", ".", "y", "\n", "\n", "out", "=", "model", ".", "inference", "(", "x", ",", "subgraph_loader", ",", "device", ")", "\n", "\n", "results", "=", "[", "]", "\n", "if", "model", ".", "task_type", "==", "'s'", ":", "\n", "        ", "y_true", "=", "y", ".", "cpu", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "y_pred", "=", "out", ".", "argmax", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "for", "mask", "in", "[", "data", ".", "train_mask", ",", "data", ".", "val_mask", ",", "data", ".", "test_mask", "]", ":", "\n", "            ", "results", "+=", "[", "int", "(", "y_pred", "[", "mask", "]", ".", "eq", "(", "y_true", "[", "mask", "]", ")", ".", "sum", "(", ")", ")", "/", "int", "(", "mask", ".", "sum", "(", ")", ")", "]", "\n", "", "", "else", ":", "# (m)", "\n", "        ", "y_true", "=", "y", ".", "cpu", "(", ")", "\n", "y_pred", "=", "(", "out", ">", "0", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "for", "mask", "in", "[", "data", ".", "train_mask", ",", "data", ".", "val_mask", ",", "data", ".", "test_mask", "]", ":", "\n", "            ", "results", "+=", "[", "f1_score", "(", "y_true", "[", "mask", "]", ",", "y_pred", "[", "mask", "]", ",", "average", "=", "'micro'", ")", "]", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.extract_features.GNN.__init__": [[14, 41], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "extract_features.GNN.classifier.append", "extract_features.GNN.classifier.append", "extract_features.GNN.classifier.append", "extract_features.GNN.classifier.append", "extract_features.GNN.classifier.append", "extract_features.GNN.classifier.append", "extract_features.GNN.embedding.append", "range", "ValueError", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch_geometric.nn.SAGEConv", "extract_features.GNN.embedding.append", "extract_features.GNN.embedding.append", "range", "torch_geometric.nn.SAGEConv", "torch_geometric.nn.GATv2Conv", "extract_features.GNN.embedding.append", "torch_geometric.nn.GATv2Conv"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.GNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "hidden_channels", ":", "int", ",", "out_channels", ":", "int", ",", "num_embedding_layers", ":", "int", ",", "type", ":", "str", "=", "'SAGEConv'", ",", "heads", ":", "int", "=", "1", ")", ":", "\n", "        ", "super", "(", "GNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_embedding_layers", "=", "num_embedding_layers", "\n", "self", ".", "embedding", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "if", "type", "==", "'SAGEConv'", ":", "\n", "            ", "if", "num_embedding_layers", ">=", "1", ":", "\n", "                ", "self", ".", "embedding", ".", "append", "(", "SAGEConv", "(", "in_channels", ",", "hidden_channels", ")", ")", "\n", "for", "_", "in", "range", "(", "num_embedding_layers", "-", "1", ")", ":", "\n", "                    ", "self", ".", "embedding", ".", "append", "(", "SAGEConv", "(", "hidden_channels", ",", "hidden_channels", ")", ")", "\n", "", "", "", "elif", "type", "==", "'GATv2Conv'", ":", "\n", "            ", "if", "num_embedding_layers", ">=", "1", ":", "\n", "                ", "self", ".", "embedding", ".", "append", "(", "GATv2Conv", "(", "in_channels", ",", "hidden_channels", "//", "heads", ",", "heads", "=", "heads", ")", ")", "\n", "for", "_", "in", "range", "(", "num_embedding_layers", "-", "1", ")", ":", "\n", "                    ", "self", ".", "embedding", ".", "append", "(", "GATv2Conv", "(", "hidden_channels", ",", "hidden_channels", "//", "heads", ",", "heads", "=", "heads", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Incorrect embedding type: '", "+", "type", ")", "\n", "\n", "", "self", ".", "classifier", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "if", "num_embedding_layers", "<=", "0", ":", "\n", "            ", "self", ".", "classifier", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "hidden_channels", ")", ")", "\n", "self", ".", "classifier", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "hidden_channels", ")", ")", "\n", "self", ".", "classifier", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "hidden_channels", ")", ")", "\n", "self", ".", "classifier", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "hidden_channels", ")", ")", "\n", "self", ".", "classifier", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.extract_features.GNN.inference": [[42, 65], ["tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.set_description", "range", "tqdm.tqdm.tqdm.close", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "features.append", "adj.to", "x_all[].to", "torch.relu", "torch.relu", "xs.append", "tqdm.tqdm.tqdm.update", "torch.cat.size", "torch.cat.size", "torch.relu.cpu"], "methods", ["None"], ["", "", "def", "inference", "(", "self", ",", "x_all", ":", "torch", ".", "Tensor", ",", "subgraph_loader", ":", "NeighborSampler", ",", "device", ":", "torch", ".", "device", ")", "->", "List", "[", "torch", ".", "Tensor", "]", ":", "\n", "# Embedding part:", "\n", "        ", "pbar", "=", "tqdm", "(", "total", "=", "x_all", ".", "size", "(", "0", ")", "*", "self", ".", "num_embedding_layers", ")", "\n", "pbar", ".", "set_description", "(", "'Feature extraction'", ")", "\n", "features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_embedding_layers", ")", ":", "\n", "            ", "xs", "=", "[", "]", "\n", "for", "batch_size", ",", "n_id", ",", "adj", "in", "subgraph_loader", ":", "\n", "                ", "edge_index", ",", "original_edges", ",", "size", "=", "adj", ".", "to", "(", "device", ")", "\n", "x", "=", "x_all", "[", "n_id", "]", ".", "to", "(", "device", ")", "\n", "\n", "x_target", "=", "x", "[", ":", "size", "[", "1", "]", "]", "\n", "x", "=", "self", ".", "embedding", "[", "i", "]", "(", "(", "x", ",", "x_target", ")", ",", "edge_index", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "xs", ".", "append", "(", "x", ".", "cpu", "(", ")", ")", "\n", "\n", "pbar", ".", "update", "(", "batch_size", ")", "\n", "\n", "", "x_all", "=", "torch", ".", "cat", "(", "xs", ",", "dim", "=", "0", ")", "\n", "features", ".", "append", "(", "x_all", ")", "\n", "\n", "", "pbar", ".", "close", "(", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.test_rho.test_1": [[28, 53], ["tqdm.tqdm", "pandas.DataFrame", "pandas.DataFrame", "print", "range", "torch.tensor", "rho_list.append", "rho_list.append", "rho_list.append", "rho_list.append", "data.append", "pd.DataFrame.mean", "pd.DataFrame.std", "numpy.random.normal().astype", "torch.sign", "rho.compute_rho", "rho.compute_rho", "rho.compute_rho", "rho.compute_rho", "numpy.array", "numpy.random.normal"], "function", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho.compute_rho", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho.compute_rho", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho.compute_rho", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho.compute_rho"], ["def", "test_1", "(", ")", ":", "\n", "    ", "columns", "=", "[", "'Recover X from Z:'", ",", "'Recover X from W:'", ",", "'Recover Z from X:'", ",", "'Recover W from X:'", "]", "\n", "\n", "data", "=", "[", "]", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "100", ")", ")", ":", "\n", "        ", "num_samples", "=", "1000", "\n", "dim", "=", "1", "\n", "X", "=", "torch", ".", "tensor", "(", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "num_samples", ",", "dim", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "# normally distributed r.v.", "\n", "Z", "=", "torch", ".", "sign", "(", "X", ")", "*", "(", "X", "**", "2", ")", "# full information", "\n", "W", "=", "X", "**", "2", "# partial information", "\n", "\n", "rho_list", "=", "[", "]", "\n", "rho_list", ".", "append", "(", "compute_rho", "(", "Z", ",", "X", ")", ")", "# Recover X from Z", "\n", "rho_list", ".", "append", "(", "compute_rho", "(", "W", ",", "X", ")", ")", "# Recover X from W", "\n", "rho_list", ".", "append", "(", "compute_rho", "(", "X", ",", "Z", ")", ")", "# Recover Z from X", "\n", "rho_list", ".", "append", "(", "compute_rho", "(", "X", ",", "W", ")", ")", "# Recover W from X", "\n", "data", ".", "append", "(", "rho_list", ")", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "np", ".", "array", "(", "data", ")", ",", "columns", "=", "columns", ")", "\n", "\n", "df2", "=", "pd", ".", "DataFrame", "(", ")", "\n", "df2", "[", "'test'", "]", "=", "columns", "\n", "df2", "[", "'mean'", "]", "=", "df", ".", "mean", "(", ")", ".", "values", "\n", "df2", "[", "'std'", "]", "=", "df", ".", "std", "(", ")", ".", "values", "\n", "df2", "[", "'theoretical value'", "]", "=", "[", "0", ",", "1", ",", "0", ",", "0", "]", "\n", "print", "(", "df2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.test_rho.test_2": [[54, 82], ["pandas.DataFrame", "numpy.linspace().astype", "torch.tensor", "torch.tensor", "tqdm.tqdm", "numpy.array().astype", "matplotlib.plot", "line.set_label", "matplotlib.plot", "line.set_label", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "numpy.random.normal().astype", "numpy.random.normal().astype", "rho_list.append", "numpy.abs", "numpy.sqrt", "os.path.join", "numpy.linspace", "rho.compute_rho", "numpy.array", "os.path.dirname", "numpy.random.normal", "numpy.random.normal", "os.path.realpath"], "function", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho.compute_rho"], ["", "def", "test_2", "(", ")", ":", "\n", "    ", "dim", "=", "100", "\n", "\n", "dt_df", "=", "pd", ".", "DataFrame", "(", ")", "\n", "steps", "=", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "200", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "dt_df", "[", "'steps'", "]", "=", "steps", "\n", "X", "=", "torch", ".", "tensor", "(", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "1000", ",", "dim", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "N", "=", "torch", ".", "tensor", "(", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "1000", ",", "dim", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "rho_list", "=", "[", "]", "\n", "for", "alpha", "in", "tqdm", "(", "steps", ")", ":", "\n", "        ", "Y", "=", "(", "X", "+", "alpha", "*", "N", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "rho_list", ".", "append", "(", "compute_rho", "(", "X", ",", "Y", ",", "lambda_", "=", "5.0", ")", ")", "\n", "", "dt_df", "[", "'Theoretical'", "]", "=", "np", ".", "abs", "(", "steps", ")", "*", "np", ".", "sqrt", "(", "dim", ")", "\n", "dt_df", "[", "'Estimated'", "]", "=", "np", ".", "array", "(", "rho_list", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "x", "=", "dt_df", "[", "'steps'", "]", ".", "values", "\n", "y", "=", "dt_df", "[", "'Theoretical'", "]", ".", "values", "\n", "line", ",", "=", "plt", ".", "plot", "(", "x", ",", "y", ",", "linewidth", "=", "5", ")", "\n", "line", ".", "set_label", "(", "'Theoretical'", ")", "\n", "x", "=", "dt_df", "[", "'steps'", "]", ".", "values", "\n", "y", "=", "dt_df", "[", "'Estimated'", "]", ".", "values", "\n", "line", ",", "=", "plt", ".", "plot", "(", "x", ",", "y", ",", "linewidth", "=", "5", ")", "\n", "line", ".", "set_label", "(", "'Estimated'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "xlabel", "(", "r'$\\alpha$'", ",", "fontsize", "=", "30", ")", "\n", "plt", ".", "ylabel", "(", "r'$\\rho^*(Y|X)$'", ",", "fontsize", "=", "30", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'results'", ",", "'rho_test'", ",", "'test_2.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.dataset.Dataset.__init__": [[6, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_list", ":", "List", "[", "Data", "]", ",", "num_features", ":", "int", ",", "num_classes", ":", "int", ",", "task_type", ":", "str", ")", ":", "\n", "        ", "self", ".", "__list", "=", "data_list", "\n", "self", ".", "__num_features", "=", "num_features", "\n", "self", ".", "__num_classes", "=", "num_classes", "\n", "assert", "task_type", "in", "[", "'s'", ",", "'m'", "]", ",", "\"task_type should be one of {'s', 'm'}\"", "\n", "self", ".", "__task_type", "=", "task_type", "# {s or m}", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.dataset.Dataset.__len__": [[13, 15], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "__list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.dataset.Dataset.__getitem__": [[16, 18], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ":", "int", ")", "->", "Data", ":", "\n", "        ", "return", "self", ".", "__list", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.dataset.Dataset.num_features": [[19, 22], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_features", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "__num_features", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.dataset.Dataset.num_node_features": [[23, 26], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_node_features", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "__num_features", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.dataset.Dataset.num_classes": [[27, 30], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "__num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.dataset.Dataset.task_type": [[31, 34], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "task_type", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "__task_type", "", "", "", ""]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.prepare_datasets.load_data": [[9, 86], ["os.path.join", "os.path.dirname", "torch_geometric.datasets.Reddit2", "os.path.realpath", "ogb.nodeproppred.PygNodePropPredDataset", "ogb.nodeproppred.PygNodePropPredDataset.get_idx_split", "torch.zeros", "torch.zeros", "torch.zeros", "torch_geometric.data.data.Data.y.flatten", "torch.cat", "numpy.unique", "torch.tensor", "torch.cat", "os.path.join", "torch_geometric.datasets.Flickr", "os.path.join", "torch.cat.std", "os.path.join", "[].sum", "[].sum", "range", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch_geometric.data.data.Data", "os.path.join", "torch.cat.mean", "len", "ogb.nodeproppred.PygNodePropPredDataset", "ogb.nodeproppred.PygNodePropPredDataset.get_idx_split", "torch.zeros", "torch.zeros", "torch.zeros", "torch_geometric.data.data.Data.y.flatten", "ValueError", "torch_geometric.datasets.PPI", "torch_geometric.datasets.PPI", "torch_geometric.datasets.PPI", "list", "numpy.array().cumsum", "numpy.array", "numpy.array", "os.path.join", "torch.cat.max", "numpy.array"], "function", ["None"], ["def", "load_data", "(", "name", ":", "str", ")", "->", "Data", ":", "\n", "    ", "'''\n    :param name: {Reddit2, ogbn-arxiv, Flickr, PPI, ogbn-products}\n    :return: Data\n    '''", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ",", "'data'", ")", "\n", "if", "name", "==", "'Reddit2'", ":", "\n", "        ", "dataset", "=", "Reddit2", "(", "root", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'Reddit2'", ")", ")", "\n", "data", "=", "dataset", "[", "0", "]", "\n", "data", ".", "x", "=", "data", ".", "x", "[", ":", ",", "2", ":", "]", "# remove first two features, they have different scale", "\n", "return", "data", "\n", "", "elif", "name", "==", "'ogbn-arxiv'", ":", "\n", "        ", "dataset", "=", "PygNodePropPredDataset", "(", "name", "=", "name", ",", "root", "=", "os", ".", "path", ".", "join", "(", "path", ",", "name", ")", ")", "\n", "data", "=", "dataset", "[", "0", "]", "\n", "idx_split", "=", "dataset", ".", "get_idx_split", "(", ")", "\n", "data", ".", "train_mask", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "data", ".", "train_mask", "[", "idx_split", "[", "'train'", "]", "]", "=", "1", "\n", "data", ".", "val_mask", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "data", ".", "val_mask", "[", "idx_split", "[", "'valid'", "]", "]", "=", "1", "\n", "data", ".", "test_mask", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "data", ".", "test_mask", "[", "idx_split", "[", "'test'", "]", "]", "=", "1", "\n", "data", ".", "y", "=", "data", ".", "y", ".", "flatten", "(", ")", "\n", "# Make ogbn-arxiv undirected.", "\n", "edge_index", "=", "data", ".", "edge_index", "\n", "tail_head", "=", "edge_index", "[", ":", ",", "edge_index", "[", "0", "]", "<", "edge_index", "[", "1", "]", "]", "\n", "head_tail", "=", "edge_index", "[", ":", ",", "edge_index", "[", "1", "]", "<", "edge_index", "[", "0", "]", "]", "[", "[", "1", ",", "0", "]", "]", "\n", "edges", "=", "torch", ".", "cat", "(", "(", "tail_head", ",", "head_tail", ")", ",", "dim", "=", "1", ")", "\n", "_", ",", "unique_indices", "=", "np", ".", "unique", "(", "(", "edges", "[", "1", "]", "*", "(", "edges", ".", "max", "(", ")", "+", "1", ")", "+", "edges", "[", "0", "]", ")", ".", "numpy", "(", ")", ",", "return_index", "=", "True", ")", "\n", "unique_indices", "=", "torch", ".", "tensor", "(", "unique_indices", ")", "\n", "new_edges", "=", "edges", "[", ":", ",", "unique_indices", "]", "\n", "new_edge_index", "=", "torch", ".", "cat", "(", "(", "new_edges", ",", "new_edges", "[", "[", "1", ",", "0", "]", "]", ")", ",", "dim", "=", "1", ")", "\n", "data", ".", "edge_index", "=", "new_edge_index", "\n", "return", "data", "\n", "", "elif", "name", "==", "'Flickr'", ":", "\n", "        ", "dataset", "=", "Flickr", "(", "root", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'Flickr'", ")", ")", "\n", "data", "=", "dataset", "[", "0", "]", "\n", "x", "=", "data", ".", "x", "\n", "data", ".", "x", "=", "(", "x", "-", "x", ".", "mean", "(", "0", ")", ")", "/", "x", ".", "std", "(", "0", ")", "\n", "return", "data", "\n", "", "elif", "name", "==", "'PPI'", ":", "\n", "        ", "root", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'PPI'", ")", "\n", "dataset", "=", "[", "*", "PPI", "(", "root", "=", "root", ",", "split", "=", "'train'", ")", ",", "*", "PPI", "(", "root", "=", "root", ",", "split", "=", "'val'", ")", ",", "*", "PPI", "(", "root", "=", "root", ",", "split", "=", "'test'", ")", "]", "\n", "offsets", "=", "[", "0", "]", "+", "list", "(", "np", ".", "array", "(", "[", "data", ".", "x", ".", "shape", "[", "0", "]", "for", "data", "in", "dataset", "]", ")", ".", "cumsum", "(", ")", ")", "[", ":", "-", "1", "]", "\n", "num_train_nodes", "=", "np", ".", "array", "(", "[", "data", ".", "x", ".", "shape", "[", "0", "]", "for", "data", "in", "dataset", "]", ")", "[", "0", ":", "20", "]", ".", "sum", "(", ")", "\n", "num_val_nodes", "=", "np", ".", "array", "(", "[", "data", ".", "x", ".", "shape", "[", "0", "]", "for", "data", "in", "dataset", "]", ")", "[", "20", ":", "22", "]", ".", "sum", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "offsets", ")", ")", ":", "dataset", "[", "i", "]", ".", "edge_index", "+=", "offsets", "[", "i", "]", "\n", "x", "=", "[", "data", ".", "x", "for", "data", "in", "dataset", "]", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "0", ")", "\n", "y", "=", "[", "data", ".", "y", "for", "data", "in", "dataset", "]", "\n", "y", "=", "torch", ".", "cat", "(", "y", ",", "dim", "=", "0", ")", "\n", "edge_index", "=", "[", "data", ".", "edge_index", "for", "data", "in", "dataset", "]", "\n", "edge_index", "=", "torch", ".", "cat", "(", "edge_index", ",", "dim", "=", "1", ")", "\n", "train_mask", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "train_mask", "[", ":", "num_train_nodes", "]", "=", "1", "\n", "val_mask", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "val_mask", "[", "num_train_nodes", ":", "num_train_nodes", "+", "num_val_nodes", "]", "=", "1", "\n", "test_mask", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "test_mask", "[", "num_train_nodes", "+", "num_val_nodes", ":", "]", "=", "1", "\n", "data", "=", "Data", "(", "x", "=", "x", ",", "edge_index", "=", "edge_index", ",", "y", "=", "y", ")", "\n", "data", ".", "train_mask", "=", "train_mask", "\n", "data", ".", "val_mask", "=", "val_mask", "\n", "data", ".", "test_mask", "=", "test_mask", "\n", "return", "data", "\n", "", "elif", "name", "==", "'ogbn-products'", ":", "\n", "        ", "dataset", "=", "PygNodePropPredDataset", "(", "name", "=", "name", ",", "root", "=", "os", ".", "path", ".", "join", "(", "path", ",", "name", ")", ")", "\n", "data", "=", "dataset", "[", "0", "]", "\n", "idx_split", "=", "dataset", ".", "get_idx_split", "(", ")", "\n", "data", ".", "train_mask", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "data", ".", "train_mask", "[", "idx_split", "[", "'train'", "]", "]", "=", "1", "\n", "data", ".", "val_mask", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "data", ".", "val_mask", "[", "idx_split", "[", "'valid'", "]", "]", "=", "1", "\n", "data", ".", "test_mask", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "data", ".", "test_mask", "[", "idx_split", "[", "'test'", "]", "]", "=", "1", "\n", "data", ".", "y", "=", "data", ".", "y", ".", "flatten", "(", ")", "\n", "return", "data", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Incorrect dataset: '", "+", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.sparsify_dataset.empty": [[16, 21], ["type", "print", "torch.load", "torch.save", "os.path.join", "os.path.join"], "function", ["None"], ["def", "empty", "(", "path", ":", "str", ")", "->", "type", "(", "None", ")", ":", "\n", "    ", "print", "(", "'Drop all edges.'", ")", "\n", "dataset", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'ref.pt'", ")", ")", "\n", "dataset", "[", "0", "]", ".", "edge_index", "=", "dataset", "[", "0", "]", ".", "edge_index", ".", "T", "[", "[", "]", "]", ".", "T", "\n", "torch", ".", "save", "(", "dataset", ",", "os", ".", "path", ".", "join", "(", "path", ",", "'empty.pt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.sparsify_dataset.rand": [[22, 40], ["type", "torch.load", "os.path.join", "print", "torch.tensor().type", "torch_geometric.data.data.Data", "dataset.Dataset", "torch.save", "os.path.join", "torch.tensor", "str", "numpy.random.binomial", "str().replace().replace().replace", "str().replace().replace", "str().replace", "str"], "function", ["None"], ["", "def", "rand", "(", "path", ":", "str", ",", "drop_edge_portions", ":", "List", "[", "float", "]", ")", "->", "type", "(", "None", ")", ":", "\n", "    ", "'''\n        Input should be undirected graph.\n    '''", "\n", "dataset", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'ref.pt'", ")", ")", "\n", "data", "=", "dataset", "[", "0", "]", "\n", "edge_index", "=", "data", ".", "edge_index", "\n", "\n", "for", "drop_edge_portion", "in", "drop_edge_portions", ":", "\n", "        ", "print", "(", "'Random drop: '", "+", "str", "(", "drop_edge_portion", "*", "100", ")", "+", "'%'", ")", "\n", "edge_selection", "=", "torch", ".", "tensor", "(", "np", ".", "random", ".", "binomial", "(", "1", ",", "1.0", "-", "drop_edge_portion", ",", "size", "=", "edge_index", ".", "shape", "[", "1", "]", ")", ")", ".", "type", "(", "torch", ".", "bool", ")", "\n", "new_edge_index", "=", "edge_index", "[", ":", ",", "edge_selection", "]", "\n", "new_data", "=", "Data", "(", "x", "=", "data", ".", "x", ",", "edge_index", "=", "new_edge_index", ",", "y", "=", "data", ".", "y", ")", "\n", "new_data", ".", "train_mask", "=", "data", ".", "train_mask", "\n", "new_data", ".", "val_mask", "=", "data", ".", "val_mask", "\n", "new_data", ".", "test_mask", "=", "data", ".", "test_mask", "\n", "new_dataset", "=", "Dataset", "(", "[", "new_data", "]", ",", "num_features", "=", "dataset", ".", "num_features", ",", "num_classes", "=", "dataset", ".", "num_classes", ",", "task_type", "=", "dataset", ".", "task_type", ")", "\n", "torch", ".", "save", "(", "new_dataset", ",", "os", ".", "path", ".", "join", "(", "path", ",", "'rand_p'", "+", "str", "(", "drop_edge_portion", ")", ".", "replace", "(", "'.'", ",", "''", ")", ".", "replace", "(", "'10'", ",", "'1'", ")", ".", "replace", "(", "'00'", ",", "'0'", ")", "+", "'.pt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.sparsify_dataset.graph_forward": [[41, 52], ["edge_weights.reshape", "torch_scatter.scatter", "torch_scatter.scatter", "type"], "function", ["None"], ["", "", "def", "graph_forward", "(", "x", ":", "torch", ".", "Tensor", ",", "edge_index", ":", "torch", ".", "Tensor", ",", "edge_weights", ":", "Union", "[", "torch", ".", "Tensor", ",", "type", "(", "None", ")", "]", "=", "None", ",", "reduce", ":", "str", "=", "'sum'", ",", "keep_x_dim", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "src", "=", "x", "[", "edge_index", "[", "0", "]", "]", "# Input nodes.", "\n", "\n", "if", "edge_weights", "is", "not", "None", ":", "\n", "        ", "src", "=", "src", "*", "edge_weights", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "index", "=", "edge_index", "[", "1", "]", "# Output node indices.", "\n", "if", "keep_x_dim", ":", "\n", "        ", "return", "scatter", "(", "src", ".", "T", ",", "index", ",", "reduce", "=", "reduce", ",", "dim_size", "=", "x", ".", "shape", "[", "0", "]", ")", ".", "T", "\n", "", "else", ":", "\n", "        ", "return", "scatter", "(", "src", ".", "T", ",", "index", ",", "reduce", "=", "reduce", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.sparsify_dataset.get_t": [[53, 68], ["d_in.max", "range", "int", "numpy.round", "d_in.sum", "d_in[].sum"], "function", ["None"], ["", "", "def", "get_t", "(", "d_in", ":", "np", ".", "ndarray", ",", "p", ":", "float", ")", "->", "int", ":", "\n", "    ", "d_max", "=", "d_in", ".", "max", "(", ")", "\n", "t_left", "=", "0", "\n", "t_right", "=", "d_max", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "        ", "t", "=", "t_left", "+", "(", "t_right", "-", "t_left", ")", "/", "2", "\n", "p_tild", "=", "(", "d_in", "[", "d_in", "<", "t", "]", ".", "sum", "(", ")", "+", "(", "d_in", ">=", "t", ")", ".", "sum", "(", ")", "*", "t", ")", "/", "d_in", ".", "sum", "(", ")", "\n", "if", "p_tild", "<", "p", ":", "\n", "            ", "t_left", "=", "t", "\n", "", "elif", "p_tild", ">", "p", ":", "\n", "            ", "t_right", "=", "t", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "int", "(", "np", ".", "round", "(", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.sparsify_dataset.max_d": [[69, 101], ["type", "torch.load", "torch.ones", "graph_forward().numpy().astype", "list", "numpy.array", "os.path.join", "torch.stack().T.numpy", "sorted", "print", "sparsify_dataset.get_t", "tqdm.tqdm", "numpy.concatenate().astype", "torch.tensor", "torch.zeros_like", "torch_geometric.data.data.Data", "dataset.Dataset", "torch.save", "graph_forward().numpy", "torch.tensor", "range", "os.path.join", "torch.tensor.append", "torch.tensor.append", "numpy.concatenate", "sparsify_dataset.graph_forward", "torch.stack", "str", "numpy.random.choice", "numpy.array", "str().replace().replace().replace", "torch.arange", "str().replace().replace", "str().replace", "str"], "function", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.sparsify_dataset.get_t", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.sparsify_dataset.graph_forward"], ["", "def", "max_d", "(", "path", ":", "str", ",", "drop_edge_portions", ":", "List", "[", "float", "]", ")", "->", "type", "(", "None", ")", ":", "\n", "    ", "dataset", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'ref.pt'", ")", ")", "\n", "data", "=", "dataset", "[", "0", "]", "\n", "x", "=", "torch", ".", "ones", "(", "data", ".", "x", ".", "shape", "[", "0", "]", ")", "\n", "d_in", "=", "graph_forward", "(", "x", ",", "data", ".", "edge_index", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "heads", "=", "data", ".", "edge_index", "[", "1", "]", "\n", "tmp", "=", "list", "(", "torch", ".", "stack", "(", "(", "heads", ",", "torch", ".", "arange", "(", "heads", ".", "shape", "[", "0", "]", ")", ")", ")", ".", "T", ".", "numpy", "(", ")", ")", "\n", "tmp", "=", "np", ".", "array", "(", "sorted", "(", "tmp", ",", "key", "=", "lambda", "e", ":", "e", "[", "0", "]", ")", ")", "\n", "indices", "=", "torch", ".", "tensor", "(", "tmp", ")", ".", "T", "[", "1", "]", "\n", "\n", "\n", "for", "drop_edge_portion", "in", "drop_edge_portions", ":", "\n", "        ", "print", "(", "'Maximal input degree drop: '", "+", "str", "(", "drop_edge_portion", "*", "100", ")", "+", "'%'", ")", "\n", "t", "=", "get_t", "(", "d_in", ",", "p", "=", "1.0", "-", "drop_edge_portion", ")", "\n", "selector", "=", "[", "]", "\n", "for", "node_id", "in", "tqdm", "(", "range", "(", "d_in", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "            ", "if", "d_in", "[", "node_id", "]", ">", "t", ":", "\n", "                ", "selector", ".", "append", "(", "np", ".", "random", ".", "choice", "(", "a", "=", "t", "*", "[", "True", "]", "+", "(", "d_in", "[", "node_id", "]", "-", "t", ")", "*", "[", "False", "]", ",", "size", "=", "d_in", "[", "node_id", "]", ",", "replace", "=", "False", ")", ")", "# select only t", "\n", "", "else", ":", "\n", "                ", "selector", ".", "append", "(", "np", ".", "array", "(", "d_in", "[", "node_id", "]", "*", "[", "True", "]", ")", ")", "# select all", "\n", "", "", "selector", "=", "np", ".", "concatenate", "(", "selector", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "selector", "=", "torch", ".", "tensor", "(", "selector", ")", "\n", "new_selector", "=", "torch", ".", "zeros_like", "(", "selector", ")", "\n", "new_selector", "[", "indices", "]", "=", "selector", "\n", "new_edge_index", "=", "data", ".", "edge_index", "[", ":", ",", "new_selector", "]", "\n", "new_data", "=", "Data", "(", "x", "=", "data", ".", "x", ",", "edge_index", "=", "new_edge_index", ",", "y", "=", "data", ".", "y", ")", "\n", "new_data", ".", "train_mask", "=", "data", ".", "train_mask", "\n", "new_data", ".", "val_mask", "=", "data", ".", "val_mask", "\n", "new_data", ".", "test_mask", "=", "data", ".", "test_mask", "\n", "new_dataset", "=", "Dataset", "(", "[", "new_data", "]", ",", "num_features", "=", "dataset", ".", "num_features", ",", "num_classes", "=", "dataset", ".", "num_classes", ",", "task_type", "=", "dataset", ".", "task_type", ")", "\n", "torch", ".", "save", "(", "new_dataset", ",", "os", ".", "path", ".", "join", "(", "path", ",", "'max_d_p'", "+", "str", "(", "drop_edge_portion", ")", ".", "replace", "(", "'.'", ",", "''", ")", ".", "replace", "(", "'10'", ",", "'1'", ")", ".", "replace", "(", "'00'", ",", "'0'", ")", "+", "'.pt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.rho.ED.forward": [[13, 18], ["torch.linalg.eigh", "ctx.save_for_backward"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "K", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "lambda_", ",", "U", "=", "torch", ".", "linalg", ".", "eigh", "(", "K", ")", "\n", "ctx", ".", "save_for_backward", "(", "lambda_", ",", "U", ")", "\n", "return", "lambda_", ",", "U", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.rho.ED.backward": [[19, 28], ["torch.eye", "lambda_.reshape", "lambda_.reshape", "torch.diag"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "lambda_grad", ":", "torch", ".", "Tensor", ",", "U_grad", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "lambda_", ",", "U", "=", "ctx", ".", "saved_tensors", "\n", "I", "=", "torch", ".", "eye", "(", "lambda_", ".", "shape", "[", "0", "]", ",", "device", "=", "lambda_", ".", "device", ")", "\n", "tmp", "=", "lambda_", ".", "reshape", "(", "-", "1", ",", "1", ")", "-", "lambda_", ".", "reshape", "(", "1", ",", "-", "1", ")", "+", "I", "\n", "eps", "=", "1e-5", "\n", "tmp", "=", "tmp", "+", "(", "tmp", "==", "0", ")", "*", "eps", "# prevents nans", "\n", "K_tilde", "=", "1", "/", "tmp", "-", "I", "\n", "return", "U", "@", "(", "K_tilde", ".", "T", "*", "(", "U", ".", "T", "@", "U_grad", ")", "+", "torch", ".", "diag", "(", "lambda_grad", ")", ")", "@", "U", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.rho.kernel": [[30, 43], ["torch.exp", "N.mean"], "function", ["None"], ["", "", "def", "kernel", "(", "A", ":", "torch", ".", "Tensor", ",", "B", ":", "torch", ".", "Tensor", ",", "lambda_", ":", "float", "=", "1.0", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "'''\n        Gaussian kernel, which is universal according:\n            https://jmlr.csail.mit.edu/papers/volume7/micchelli06a/micchelli06a.pdf\n\n        A: tensor of shape (num_samples, dim)\n        B: tensor of shape (num_samples, dim)\n    '''", "\n", "A_reduced", "=", "(", "A", "*", "A", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "# column vector (num_samples, 1)", "\n", "B_reduced", "=", "(", "B", "*", "B", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "# row vector (1, num_samples)", "\n", "AB", "=", "A", "@", "B", ".", "T", "# (num_samples, num_samples)", "\n", "N", "=", "A_reduced", "+", "B_reduced", "-", "2", "*", "AB", "\n", "return", "torch", ".", "exp", "(", "-", "N", "/", "(", "N", ".", "mean", "(", ")", "*", "lambda_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.rho.compute_rho": [[45, 58], ["rho.kernel", "ED.apply", "rho.item", "torch.diag", "l.clamp"], "function", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho.kernel"], ["", "def", "compute_rho", "(", "X", ":", "torch", ".", "Tensor", ",", "Y", ":", "torch", ".", "Tensor", ",", "lambda_", ":", "float", "=", "1.0", ")", "->", "float", ":", "\n", "    ", "'''\n        Check if Y could be learned from X.\n\n        X: tensor of shape (num_samples, dim_1)\n        Y: tensor of shape (num_samples, dim_2)\n    '''", "\n", "K", "=", "kernel", "(", "X", ",", "X", ",", "lambda_", ")", "\n", "l", ",", "U", "=", "ED", ".", "apply", "(", "K", ")", "\n", "P", "=", "U", "@", "torch", ".", "diag", "(", "l", ".", "clamp", "(", "min", "=", "0.0", ",", "max", "=", "1.0", ")", ")", "@", "U", ".", "T", "\n", "Y_perp", "=", "Y", "-", "P", "@", "Y", "\n", "rho", "=", "(", "(", "Y_perp", "**", "2", ")", ".", "mean", "(", "0", ")", "**", "0.5", ")", ".", "mean", "(", ")", "\n", "return", "rho", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.apply_embedding.Embedding.__init__": [[11, 42], ["super().__init__", "torch_geometric.nn.GraphConv", "list", "torch.eye", "parameters[].data.zero_", "torch.eye", "torch_geometric.nn.GraphConv", "list", "torch.eye", "parameters[].data.zero_", "torch.eye", "torch_geometric.nn.SAGEConv", "apply_embedding.Embedding.layer.parameters", "apply_embedding.Embedding.aux.parameters", "torch_geometric.nn.GINConv", "ValueError"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.GNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ":", "int", ",", "type", ":", "str", "=", "'GraphConv'", ",", "eps", ":", "float", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "Embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "in", "[", "'GraphConv'", ",", "'GCNConv'", "]", ":", "\n", "            ", "self", ".", "layer", "=", "GraphConv", "(", "num_features", ",", "num_features", ",", "aggr", "=", "'add'", ")", "\n", "", "elif", "type", "==", "'SAGEConv'", ":", "\n", "            ", "self", ".", "layer", "=", "SAGEConv", "(", "num_features", ",", "num_features", ")", "\n", "", "elif", "type", "==", "'GINConv'", ":", "\n", "            ", "self", ".", "layer", "=", "GINConv", "(", "nn", "=", "lambda", "x", ":", "x", ",", "eps", "=", "eps", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Incorrect embedding type: '", "+", "type", ")", "\n", "\n", "", "if", "type", "in", "[", "'GraphConv'", ",", "'GCNConv'", ",", "'SAGEConv'", "]", ":", "\n", "            ", "parameters", "=", "list", "(", "self", ".", "layer", ".", "parameters", "(", ")", ")", "\n", "parameters", "[", "0", "]", ".", "requires_grad", "=", "False", "\n", "parameters", "[", "0", "]", ".", "data", "=", "torch", ".", "eye", "(", "num_features", ")", "\n", "parameters", "[", "1", "]", ".", "requires_grad", "=", "False", "\n", "parameters", "[", "1", "]", ".", "data", ".", "zero_", "(", ")", "\n", "parameters", "[", "2", "]", ".", "requires_grad", "=", "False", "\n", "parameters", "[", "2", "]", ".", "data", "=", "torch", ".", "eye", "(", "num_features", ")", "\n", "\n", "", "if", "type", "==", "'GCNConv'", ":", "\n", "            ", "self", ".", "aux", "=", "GraphConv", "(", "1", ",", "1", ",", "aggr", "=", "'add'", ")", "\n", "parameters", "=", "list", "(", "self", ".", "aux", ".", "parameters", "(", ")", ")", "\n", "parameters", "[", "0", "]", ".", "requires_grad", "=", "False", "\n", "parameters", "[", "0", "]", ".", "data", "=", "torch", ".", "eye", "(", "1", ")", "\n", "parameters", "[", "1", "]", ".", "requires_grad", "=", "False", "\n", "parameters", "[", "1", "]", ".", "data", ".", "zero_", "(", ")", "\n", "parameters", "[", "2", "]", ".", "requires_grad", "=", "False", "\n", "parameters", "[", "2", "]", ".", "data", "=", "torch", ".", "eye", "(", "1", ")", "\n", "\n", "", "self", ".", "type", "=", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.None.apply_embedding.Embedding.forward": [[43, 66], ["tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.set_description", "torch.cat", "tqdm.tqdm.tqdm.close", "torch.ones().to", "adj.to", "x[].to", "apply_embedding.Embedding.layer().cpu", "xs.append", "tqdm.tqdm.tqdm.update", "str", "torch.ones", "apply_embedding.Embedding.layer", "torch.sqrt", "apply_embedding.Embedding.aux", "orig_edge_index.to"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "orig_edge_index", ":", "torch", ".", "Tensor", ",", "sampler", ":", "NeighborSampler", ",", "device", ":", "torch", ".", "device", ",", "depth", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "self", ".", "type", "==", "'GCNConv'", ":", "\n", "            ", "ones", "=", "torch", ".", "ones", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "norm_factor", "=", "(", "1.", "/", "torch", ".", "sqrt", "(", "self", ".", "aux", "(", "ones", ",", "orig_edge_index", ".", "to", "(", "device", ")", ")", ")", ")", ".", "cpu", "(", ")", "\n", "x", "=", "x", "*", "norm_factor", "\n", "\n", "", "pbar", "=", "tqdm", "(", "total", "=", "x", ".", "shape", "[", "0", "]", ")", "\n", "pbar", ".", "set_description", "(", "self", ".", "type", "+", "' embedding depth='", "+", "str", "(", "depth", ")", ")", "\n", "xs", "=", "[", "]", "\n", "for", "batch_size", ",", "n_id", ",", "adj", "in", "sampler", ":", "\n", "            ", "edge_index", ",", "original_edges", ",", "size", "=", "adj", ".", "to", "(", "device", ")", "\n", "x_", "=", "x", "[", "n_id", "]", ".", "to", "(", "device", ")", "\n", "x_target", "=", "x_", "[", ":", "size", "[", "1", "]", "]", "\n", "x_", "=", "self", ".", "layer", "(", "(", "x_", ",", "x_target", ")", ",", "edge_index", ")", ".", "cpu", "(", ")", "\n", "\n", "if", "self", ".", "type", "==", "'GCNConv'", ":", "\n", "                ", "x_", "=", "x_", "*", "norm_factor", "[", "n_id", "]", "[", ":", "size", "[", "1", "]", "]", "\n", "\n", "", "xs", ".", "append", "(", "x_", ")", "\n", "pbar", ".", "update", "(", "batch_size", ")", "\n", "", "x", "=", "torch", ".", "cat", "(", "xs", ",", "dim", "=", "0", ")", "\n", "pbar", ".", "close", "(", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.gaussian_kernel.EigenDecompositionV2.forward": [[5, 11], ["torch.svd", "torch.clamp", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "M", ")", ":", "\n", "        ", "ut", ",", "s", ",", "u", "=", "torch", ".", "svd", "(", "M", ")", "# s in a descending sequence.", "\n", "s", "=", "torch", ".", "clamp", "(", "s", ",", "min", "=", "1e-5", ")", "\n", "ctx", ".", "save_for_backward", "(", "M", ",", "u", ",", "s", ")", "\n", "return", "s", ",", "u", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.gaussian_kernel.EigenDecompositionV2.backward": [[12, 19], ["EigenDecompositionV2.geometric_approximation().t", "u.t", "u.mm().mm", "gaussian_kernel.EigenDecompositionV2.geometric_approximation", "u.mm", "torch.diag", "u.t.mm"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.gaussian_kernel.EigenDecompositionV2.geometric_approximation"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "dL_ds", ",", "dL_du", ")", ":", "\n", "        ", "M", ",", "u", ",", "s", "=", "ctx", ".", "saved_tensors", "\n", "K_t", "=", "EigenDecompositionV2", ".", "geometric_approximation", "(", "s", ")", ".", "t", "(", ")", "\n", "u_t", "=", "u", ".", "t", "(", ")", "\n", "dL_dM", "=", "u", ".", "mm", "(", "K_t", "*", "u_t", ".", "mm", "(", "dL_du", ")", "+", "torch", ".", "diag", "(", "dL_ds", ")", ")", ".", "mm", "(", "u_t", ")", "\n", "return", "dL_dM", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.gaussian_kernel.EigenDecompositionV2.geometric_approximation": [[20, 37], ["torch.eye().type", "torch.where", "s.repeat().t", "s.repeat().t.t", "torch.ones_like", "torch.ones_like", "range", "torch.where", "torch.ones().type", "torch.eye", "s.unsqueeze", "s.unsqueeze", "s.repeat", "torch.ones"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "geometric_approximation", "(", "s", ")", ":", "\n", "        ", "dtype", "=", "s", ".", "dtype", "\n", "I", "=", "torch", ".", "eye", "(", "s", ".", "shape", "[", "0", "]", ",", "device", "=", "s", ".", "device", ")", ".", "type", "(", "dtype", ")", "\n", "p", "=", "s", ".", "unsqueeze", "(", "-", "1", ")", "/", "s", ".", "unsqueeze", "(", "-", "2", ")", "-", "I", "\n", "p", "=", "torch", ".", "where", "(", "p", "<", "1.", ",", "p", ",", "1.", "/", "p", ")", "\n", "a1", "=", "s", ".", "repeat", "(", "s", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "t", "(", ")", "\n", "a1_t", "=", "a1", ".", "t", "(", ")", "\n", "a1", "=", "1.", "/", "torch", ".", "where", "(", "a1", ">=", "a1_t", ",", "a1", ",", "-", "a1_t", ")", "\n", "a1", "*=", "torch", ".", "ones", "(", "s", ".", "shape", "[", "0", "]", ",", "s", ".", "shape", "[", "0", "]", ",", "device", "=", "s", ".", "device", ")", ".", "type", "(", "dtype", ")", "-", "I", "\n", "p_app", "=", "torch", ".", "ones_like", "(", "p", ")", "\n", "p_hat", "=", "torch", ".", "ones_like", "(", "p", ")", "\n", "for", "i", "in", "range", "(", "9", ")", ":", "\n", "            ", "p_hat", "=", "p_hat", "*", "p", "\n", "p_app", "+=", "p_hat", "\n", "", "a1", "=", "a1", "*", "p_app", "\n", "return", "a1", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.gaussian_kernel.GaussianKernel.__init__": [[41, 45], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_samples", ":", "int", "=", "-", "1", ",", "kernel_lambda", ":", "float", "=", "1.0", ",", "add_regularization", ":", "bool", "=", "False", ")", ":", "\n", "        ", "self", ".", "_max_samples", "=", "max_samples", "\n", "self", ".", "_kernel_lambda", "=", "kernel_lambda", "\n", "self", ".", "_add_regularization", "=", "add_regularization", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.gaussian_kernel.GaussianKernel.compute_kernel": [[46, 52], ["torch.exp", "N.mean"], "methods", ["None"], ["", "def", "compute_kernel", "(", "self", ",", "A", ":", "torch", ".", "Tensor", ",", "B", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "A_reduced", "=", "(", "A", "*", "A", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "# column vector (num_samples, 1)", "\n", "B_reduced", "=", "(", "B", "*", "B", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "# row vector (1, num_samples)", "\n", "AB", "=", "A", "@", "B", ".", "T", "# (num_samples, num_samples)", "\n", "N", "=", "A_reduced", "+", "B_reduced", "-", "2", "*", "AB", "\n", "return", "torch", ".", "exp", "(", "-", "N", "/", "(", "N", ".", "mean", "(", ")", "*", "self", ".", "_kernel_lambda", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.gaussian_kernel.GaussianKernel.compute_d": [[53, 69], ["gaussian_kernel.GaussianKernel.compute_kernel", "EigenDecompositionV2.apply", "x.size", "torch.randperm", "torch.diag", "P.to", "x.size", "lambda_.clamp", "gaussian_kernel.GaussianKernel.mean"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.gaussian_kernel.GaussianKernel.compute_kernel"], ["", "def", "compute_d", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "y", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "self", ".", "_max_samples", ">", "0", "and", "x", ".", "size", "(", "0", ")", ">", "self", ".", "_max_samples", ":", "\n", "            ", "samples_to_take", "=", "torch", ".", "randperm", "(", "x", ".", "size", "(", "0", ")", ")", "[", ":", "self", ".", "_max_samples", "]", "\n", "x", "=", "x", "[", "samples_to_take", "]", "\n", "y", "=", "y", "[", "samples_to_take", "]", "\n", "\n", "", "K", "=", "self", ".", "compute_kernel", "(", "x", ",", "x", ")", "\n", "lambda_", ",", "U", "=", "EigenDecompositionV2", ".", "apply", "(", "K", ")", "\n", "P", "=", "U", "@", "torch", ".", "diag", "(", "\n", "lambda_", ".", "clamp", "(", "min", "=", "0.0", ",", "max", "=", "1.0", ")", ")", "@", "U", ".", "T", "# Projection matrix, approximation due to numeric instabilities", "\n", "y_perp", "=", "y", "-", "P", ".", "to", "(", "y", ".", "device", ")", "@", "y", "\n", "d_", "=", "(", "(", "y_perp", "**", "2", "+", "1e-5", ")", ".", "mean", "(", "0", ")", "**", "0.5", ")", ".", "mean", "(", ")", "\n", "if", "self", ".", "_add_regularization", ":", "\n", "            ", "d_", "+=", "(", "0.5", "-", "K", ".", "mean", "(", ")", ")", "**", "2", "# Keep the K with 0.5 average", "\n", "\n", "", "return", "d_", "\n", "", "", ""]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp.AddMaskTransform.__init__": [[61, 64], ["torch_geometric.transforms.BaseTransform.__init__"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.GNN.__init__"], ["def", "__init__", "(", "self", ",", "target_mask", ":", "str", "=", "\"root_nodes\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "target_mask", "=", "target_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp.AddMaskTransform.__call__": [[65, 70], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "setattr"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ":", "Any", ")", "->", "Any", ":", "\n", "        ", "new_mask", "=", "torch", ".", "zeros_like", "(", "data", ".", "train_mask", ")", "\n", "new_mask", "[", ":", "data", ".", "batch_size", "]", "=", "True", "\n", "setattr", "(", "data", ",", "self", ".", "target_mask", ",", "new_mask", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp.get_free_gpu": [[31, 41], ["subprocess.check_output", "pandas.read_csv", "print", "gpu_df[].map", "gpu_df[].idxmax", "print", "io.StringIO", "subprocess.check_output.decode", "int", "x.rstrip"], "function", ["None"], ["def", "get_free_gpu", "(", ")", ":", "\n", "    ", "gpu_stats", "=", "subprocess", ".", "check_output", "(", "[", "\"nvidia-smi\"", ",", "\"--format=csv\"", ",", "\"--query-gpu=memory.used,memory.free\"", "]", ")", "\n", "gpu_df", "=", "pd", ".", "read_csv", "(", "StringIO", "(", "gpu_stats", ".", "decode", "(", ")", ")", ",", "\n", "names", "=", "[", "'memory.used'", ",", "'memory.free'", "]", ",", "\n", "skiprows", "=", "1", ")", "\n", "print", "(", "'GPU usage:\\n{}'", ".", "format", "(", "gpu_df", ")", ")", "\n", "gpu_df", "[", "'memory.free'", "]", "=", "gpu_df", "[", "'memory.free'", "]", ".", "map", "(", "lambda", "x", ":", "int", "(", "x", ".", "rstrip", "(", "' [MiB]'", ")", ")", ")", "\n", "idx", "=", "gpu_df", "[", "'memory.free'", "]", ".", "idxmax", "(", ")", "\n", "print", "(", "'The most free is GPU={} with {} free MiB'", ".", "format", "(", "idx", ",", "gpu_df", ".", "iloc", "[", "idx", "]", "[", "'memory.free'", "]", ")", ")", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp.cfg2dict": [[43, 54], ["cfg.items", "type", "run_exp.cfg2dict"], "function", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.cfg2dict"], ["", "def", "cfg2dict", "(", "cfg", ":", "DictConfig", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "    ", "\"\"\"\n    Recursively convert OmegaConf to vanilla dict\n    \"\"\"", "\n", "cfg_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "cfg", ".", "items", "(", ")", ":", "\n", "        ", "if", "type", "(", "v", ")", "==", "DictConfig", ":", "\n", "            ", "cfg_dict", "[", "k", "]", "=", "cfg2dict", "(", "v", ")", "\n", "", "else", ":", "\n", "            ", "cfg_dict", "[", "k", "]", "=", "v", "\n", "", "", "return", "cfg_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp.train_step": [[72, 252], ["int", "model.to.set_phase", "pytorch_lightning.callbacks.ModelCheckpoint", "pytorch_lightning.Trainer", "pl.Trainer.fit", "torch.load", "torch.load", "model.to.load_state_dict", "cfg.enviroment.device.split", "list", "len", "torch_geometric.loader.GraphSAINTEdgeSampler", "torch_geometric.loader.GraphSAINTEdgeSampler", "torch_geometric.loader.GraphSAINTEdgeSampler", "torch_geometric.loader.GraphSAINTEdgeSampler", "torch_geometric.loader.NeighborLoader", "torch_geometric.loader.NeighborLoader", "torch_geometric.loader.NeighborLoader", "torch_geometric.loader.NeighborLoader", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch_geometric.data.DataLoader", "torch_geometric.data.DataLoader", "torch_geometric.data.DataLoader", "model.to.cpu", "RuntimeError", "datetime.timedelta", "pl.Trainer.validate", "torch.no_grad", "torch.no_grad", "model.to.to", "range", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "pytorch_lightning.callbacks.LearningRateMonitor", "pytorch_lightning.callbacks.EarlyStopping", "run_exp.AddMaskTransform", "run_exp.AddMaskTransform", "run_exp.AddMaskTransform", "run_exp.AddMaskTransform", "torch.arange", "torch.arange", "torch_geometric.loader.NeighborLoader", "tqdm.tqdm", "torch.cat", "torch.cat", "torch.cat().flatten", "torch.cat().flatten", "torch.cat().flatten", "torch.cat().flatten", "torch.cat().flatten", "torch.cat().flatten", "torch.cat().flatten", "torch.cat().flatten", "torch_geometric.data.Data", "torch_geometric.data.Data.x.size", "curr_data.to.to", "[].cpu", "curr_data.to.y[].cpu", "curr_data.to.train_mask[].cpu", "curr_data.to.val_mask[].cpu", "curr_data.to.test_mask[].cpu", "torch.cat().flatten.append", "torch.cat.append", "torch.cat().flatten.append", "torch.cat().flatten.append", "torch.cat().flatten.append", "torch.cat().flatten.append", "torch.cat", "torch.cat", "torch.cat().flatten", "torch.cat().flatten", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.to.forward_single_conv"], "function", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.set_phase", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.forward_single_conv"], ["", "", "def", "train_step", "(", "cfg", ":", "DictConfig", ",", "\n", "data", ":", "Data", ",", "\n", "model", ":", "ExpModel", ",", "\n", "step", ":", "EModelPhase", ",", "\n", "logger", ",", "\n", "exp_name", ")", ":", "\n", "    ", "device_idx", "=", "int", "(", "cfg", ".", "enviroment", ".", "device", ".", "split", "(", "\"cuda:\"", ")", "[", "1", "]", ")", "\n", "model", ".", "set_phase", "(", "phase", "=", "step", ")", "\n", "\n", "if", "step", "==", "EModelPhase", ".", "TRAIN_EMBEDDING", "or", "(", "not", "cfg", ".", "dataset", ".", "pre_calculate_embeddings", ")", ":", "\n", "        ", "assert", "cfg", ".", "training", ".", "batch_size", ">", "0", "\n", "if", "cfg", ".", "layer", ".", "name", "==", "\"graphsage\"", ":", "\n", "            ", "num_neighbors", "=", "list", "(", "cfg", ".", "layer", ".", "num_neighbors", ")", "\n", "", "else", ":", "\n", "            ", "num_neighbors", "=", "[", "cfg", ".", "training", ".", "num_neighbours", "]", "*", "cfg", ".", "model", ".", "depth", "\n", "\n", "", "assert", "len", "(", "num_neighbors", ")", "==", "cfg", ".", "model", ".", "depth", "\n", "\n", "batch_size", "=", "cfg", ".", "training", ".", "batch_size", "\n", "if", "cfg", ".", "dataset", ".", "use_saint", "and", "cfg", ".", "layer", ".", "name", "!=", "\"graphsage\"", ":", "\n", "            ", "full_loader", "=", "GraphSAINTEdgeSampler", "(", "data", "=", "data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "enviroment", ".", "num_workers", ",", "\n", "prefetch_factor", "=", "5", "if", "cfg", ".", "enviroment", ".", "num_workers", ">", "0", "else", "2", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "train_loader", "=", "GraphSAINTEdgeSampler", "(", "data", "=", "data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "enviroment", ".", "num_workers", ",", "\n", "prefetch_factor", "=", "5", "if", "cfg", ".", "enviroment", ".", "num_workers", ">", "0", "else", "2", ",", "\n", "pin_memory", "=", "True", ")", "\n", "val_loader", "=", "GraphSAINTEdgeSampler", "(", "data", "=", "data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "enviroment", ".", "num_workers", ",", "\n", "prefetch_factor", "=", "5", "if", "cfg", ".", "enviroment", ".", "num_workers", ">", "0", "else", "2", ",", "\n", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "GraphSAINTEdgeSampler", "(", "data", "=", "data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "enviroment", ".", "num_workers", ",", "\n", "prefetch_factor", "=", "5", "if", "cfg", ".", "enviroment", ".", "num_workers", ">", "0", "else", "2", ",", "\n", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "full_loader", "=", "torch_geometric", ".", "loader", ".", "NeighborLoader", "(", "data", "=", "data", ",", "\n", "num_neighbors", "=", "num_neighbors", ",", "\n", "input_nodes", "=", "None", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "enviroment", ".", "num_workers", ",", "\n", "prefetch_factor", "=", "5", "if", "cfg", ".", "enviroment", ".", "num_workers", ">", "0", "else", "2", ",", "\n", "pin_memory", "=", "True", ",", "\n", "transform", "=", "AddMaskTransform", "(", ")", ")", "\n", "train_loader", "=", "torch_geometric", ".", "loader", ".", "NeighborLoader", "(", "data", "=", "data", ",", "\n", "num_neighbors", "=", "num_neighbors", ",", "\n", "input_nodes", "=", "data", ".", "train_mask", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "enviroment", ".", "num_workers", ",", "\n", "prefetch_factor", "=", "5", "if", "cfg", ".", "enviroment", ".", "num_workers", ">", "0", "else", "2", ",", "\n", "pin_memory", "=", "True", ",", "\n", "transform", "=", "AddMaskTransform", "(", ")", ")", "\n", "val_loader", "=", "torch_geometric", ".", "loader", ".", "NeighborLoader", "(", "data", "=", "data", ",", "\n", "num_neighbors", "=", "num_neighbors", ",", "\n", "input_nodes", "=", "data", ".", "val_mask", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "enviroment", ".", "num_workers", ",", "\n", "prefetch_factor", "=", "5", "if", "cfg", ".", "enviroment", ".", "num_workers", ">", "0", "else", "2", ",", "\n", "pin_memory", "=", "True", ",", "\n", "transform", "=", "AddMaskTransform", "(", ")", ")", "\n", "test_loader", "=", "torch_geometric", ".", "loader", ".", "NeighborLoader", "(", "data", "=", "data", ",", "\n", "num_neighbors", "=", "num_neighbors", ",", "\n", "input_nodes", "=", "data", ".", "test_mask", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "enviroment", ".", "num_workers", ",", "\n", "transform", "=", "AddMaskTransform", "(", ")", ")", "\n", "", "", "elif", "step", "==", "EModelPhase", ".", "TRAIN_CLASSIFIER", "and", "cfg", ".", "dataset", ".", "pre_calculate_embeddings", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", ".", "training", "=", "False", "\n", "model", "=", "model", ".", "to", "(", "cfg", ".", "enviroment", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "cfg", ".", "model", ".", "depth", ")", ":", "\n", "# Get all nodes", "\n", "                ", "agg_x", "=", "[", "]", "\n", "agg_y", "=", "[", "]", "\n", "agg_node_idx", "=", "[", "]", "\n", "agg_train_mask", "=", "[", "]", "\n", "agg_val_mask", "=", "[", "]", "\n", "agg_test_mask", "=", "[", "]", "\n", "data", ".", "node_idx", "=", "torch", ".", "arange", "(", "data", ".", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "full_loader", "=", "torch_geometric", ".", "loader", ".", "NeighborLoader", "(", "data", "=", "data", ",", "\n", "num_neighbors", "=", "[", "-", "1", "]", "*", "cfg", ".", "model", ".", "depth", ",", "\n", "input_nodes", "=", "None", ",", "\n", "batch_size", "=", "32", ",", "\n", "num_workers", "=", "cfg", ".", "enviroment", ".", "num_workers", ",", "\n", "prefetch_factor", "=", "5", "if", "cfg", ".", "enviroment", ".", "num_workers", ">", "0", "else", "2", ",", "\n", "pin_memory", "=", "True", ")", "\n", "for", "curr_data", "in", "tqdm", "(", "full_loader", ",", "f\"Calculating embeddings, level: {i+1}/{cfg.model.depth}\"", ")", ":", "\n", "                    ", "curr_data", "=", "curr_data", ".", "to", "(", "cfg", ".", "enviroment", ".", "device", ")", "\n", "embeddings", "=", "model", ".", "forward_single_conv", "(", "layer_idx", "=", "i", ",", "x", "=", "curr_data", ".", "x", ",", "edge_index", "=", "curr_data", ".", "edge_index", ")", "[", ":", "curr_data", ".", "batch_size", "]", ".", "cpu", "(", ")", "\n", "y", "=", "curr_data", ".", "y", "[", ":", "curr_data", ".", "batch_size", "]", ".", "cpu", "(", ")", "\n", "train_mask", "=", "curr_data", ".", "train_mask", "[", ":", "curr_data", ".", "batch_size", "]", ".", "cpu", "(", ")", "\n", "val_mask", "=", "curr_data", ".", "val_mask", "[", ":", "curr_data", ".", "batch_size", "]", ".", "cpu", "(", ")", "\n", "test_mask", "=", "curr_data", ".", "test_mask", "[", ":", "curr_data", ".", "batch_size", "]", ".", "cpu", "(", ")", "\n", "\n", "agg_node_idx", ".", "append", "(", "curr_data", ".", "node_idx", "[", ":", "curr_data", ".", "batch_size", "]", ")", "\n", "agg_x", ".", "append", "(", "embeddings", ")", "\n", "agg_y", ".", "append", "(", "y", ")", "\n", "agg_train_mask", ".", "append", "(", "train_mask", ")", "\n", "agg_val_mask", ".", "append", "(", "val_mask", ")", "\n", "agg_test_mask", ".", "append", "(", "test_mask", ")", "\n", "\n", "", "agg_x", "=", "torch", ".", "cat", "(", "agg_x", ")", "\n", "if", "cfg", ".", "dataset", ".", "multi_label_ds", ":", "\n", "                    ", "agg_y", "=", "torch", ".", "cat", "(", "agg_y", ")", "\n", "", "else", ":", "\n", "                    ", "agg_y", "=", "torch", ".", "cat", "(", "agg_y", ")", ".", "flatten", "(", ")", "\n", "", "agg_train_mask", "=", "torch", ".", "cat", "(", "agg_train_mask", ")", ".", "flatten", "(", ")", "\n", "agg_val_mask", "=", "torch", ".", "cat", "(", "agg_val_mask", ")", ".", "flatten", "(", ")", "\n", "agg_test_mask", "=", "torch", ".", "cat", "(", "agg_test_mask", ")", ".", "flatten", "(", ")", "\n", "agg_node_idx", "=", "torch", ".", "cat", "(", "agg_node_idx", ")", ".", "flatten", "(", ")", "\n", "\n", "data", "=", "torch_geometric", ".", "data", ".", "Data", "(", "x", "=", "agg_x", "[", "agg_node_idx", "]", ",", "\n", "edge_index", "=", "data", ".", "edge_index", ",", "\n", "edge_attr", "=", "data", ".", "edge_attr", ",", "\n", "y", "=", "agg_y", "[", "agg_node_idx", "]", ",", "\n", "train_mask", "=", "agg_train_mask", "[", "agg_node_idx", "]", ",", "\n", "val_mask", "=", "agg_val_mask", "[", "agg_node_idx", "]", ",", "\n", "test_mask", "=", "agg_test_mask", "[", "agg_node_idx", "]", ")", "\n", "\n", "", "", "train_dataset", "=", "TensorDataset", "(", "torch", ".", "clone", "(", "agg_x", "[", "agg_train_mask", ",", ":", "]", ")", ",", "torch", ".", "clone", "(", "agg_y", "[", "agg_train_mask", "]", ")", ")", "\n", "val_dataset", "=", "TensorDataset", "(", "torch", ".", "clone", "(", "agg_x", "[", "agg_val_mask", ",", ":", "]", ")", ",", "torch", ".", "clone", "(", "agg_y", "[", "agg_val_mask", "]", ")", ")", "\n", "test_dataset", "=", "TensorDataset", "(", "torch", ".", "clone", "(", "agg_x", "[", "agg_test_mask", ",", ":", "]", ")", ",", "torch", ".", "clone", "(", "agg_y", "[", "agg_test_mask", "]", ")", ")", "\n", "\n", "del", "agg_x", "\n", "del", "agg_y", "\n", "del", "agg_train_mask", "\n", "del", "agg_val_mask", "\n", "del", "agg_test_mask", "\n", "\n", "train_loader", "=", "DataLoader", "(", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "cfg", ".", "training", ".", "classifier_batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "enviroment", ".", "num_workers", ")", "\n", "\n", "val_loader", "=", "DataLoader", "(", "dataset", "=", "val_dataset", ",", "\n", "batch_size", "=", "cfg", ".", "training", ".", "classifier_batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "enviroment", ".", "num_workers", ")", "\n", "\n", "test_loader", "=", "DataLoader", "(", "dataset", "=", "test_dataset", ",", "\n", "batch_size", "=", "cfg", ".", "training", ".", "classifier_batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "enviroment", ".", "num_workers", ")", "\n", "\n", "model", ".", "training", "=", "True", "\n", "model", "=", "model", ".", "cpu", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Unsupported step\"", ")", "\n", "\n", "", "checkpoint_callback", "=", "ModelCheckpoint", "(", "save_top_k", "=", "1", ",", "monitor", "=", "\"val_loss/loss\"", ")", "\n", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "\n", "log_every_n_steps", "=", "1", ",", "\n", "max_epochs", "=", "cfg", ".", "optimization", ".", "epochs", ",", "\n", "detect_anomaly", "=", "True", ",", "\n", "max_time", "=", "datetime", ".", "timedelta", "(", "hours", "=", "12", ")", ",", "\n", "devices", "=", "[", "device_idx", "]", ",", "\n", "accelerator", "=", "\"auto\"", ",", "\n", "logger", "=", "logger", ",", "\n", "callbacks", "=", "[", "LearningRateMonitor", "(", "logging_interval", "=", "'step'", ")", ",", "\n", "EarlyStopping", "(", "monitor", "=", "f\"val_loss/loss\"", ",", "min_delta", "=", "0.01", ",", "\n", "patience", "=", "cfg", ".", "optimization", ".", "early_stopping_tolerance", ",", "verbose", "=", "True", ",", "mode", "=", "\"min\"", ",", "\n", "strict", "=", "False", ")", ",", "\n", "checkpoint_callback", ",", "\n", "]", ")", "\n", "trainer", ".", "fit", "(", "model", ",", "full_loader", "if", "step", "==", "EModelPhase", ".", "TRAIN_EMBEDDING", "else", "train_loader", ",", "\n", "(", "train_loader", ",", "val_loader", ",", "test_loader", ")", ")", "\n", "try", ":", "\n", "# Get best", "\n", "        ", "best_ckpt_path", "=", "checkpoint_callback", ".", "best_model_path", "\n", "loaded_ckpt", "=", "torch", ".", "load", "(", "best_ckpt_path", ")", "\n", "model", ".", "load_state_dict", "(", "loaded_ckpt", "[", "\"state_dict\"", "]", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "trainer", ".", "validate", "(", "model", "=", "model", ",", "\n", "dataloaders", "=", "(", "train_loader", ",", "val_loader", ",", "test_loader", ")", ")", "# Always gurantee that we have result", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp.main": [[254, 320], ["os.path.join", "os.path.join", "os.makedirs", "print", "unsupervised.dataset.get_dataset", "pytorch_lightning.loggers.TensorBoardLogger", "pytorch_lightning.loggers.TensorBoardLogger.log_hyperparams", "unsupervised.model.ExpModel", "wandb.init", "wandb.config.update", "hydra.utils.get_original_cwd", "hydra.utils.get_original_cwd", "open", "omegaconf.OmegaConf.save", "run_exp.cfg2dict", "isinstance", "int", "unsupervised.dataset.get_dataset.x.size", "tempfile.TemporaryDirectory", "wandb.finish", "run_exp.get_free_gpu", "RuntimeError", "run_exp.cfg2dict", "random.choices", "os.path.join", "unsupervised.dataset.get_dataset.y.size", "unsupervised.dataset.get_dataset.x.size", "[].y.size", "[].x.size", "print", "print", "print", "run_exp.train_step", "len", "torch.max().item", "torch.max().item", "os.path.join", "torch.save", "torch.save", "wandb.Artifact", "wandb.Artifact.add_file", "wandb.run.log_artifact", "train_step.state_dict", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.dataset.get_dataset", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.cfg2dict", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.get_free_gpu", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.cfg2dict", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.train_step"], ["", "def", "main", "(", "cfg", ":", "DictConfig", ")", ":", "\n", "    ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "cfg", ".", "enviroment", ".", "device", "=", "f\"cuda:{get_free_gpu()}\"", "\n", "\n", "if", "cfg", ".", "enviroment", ".", "use_wandb", ":", "\n", "        ", "if", "cfg", ".", "enviroment", ".", "wandb_project_name", "==", "\"\"", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"You must give a project name when using logging results to wandb\"", ")", "\n", "", "wandb", ".", "init", "(", "project", "=", "cfg", ".", "enviroment", ".", "wandb_project_name", ",", "sync_tensorboard", "=", "True", ")", "\n", "wandb", ".", "config", ".", "update", "(", "cfg2dict", "(", "cfg", ")", ")", "\n", "exp_name", "=", "wandb", ".", "run", ".", "name", "\n", "", "else", ":", "\n", "        ", "exp_name", "=", "''", ".", "join", "(", "random", ".", "choices", "(", "string", ".", "ascii_uppercase", "+", "string", ".", "digits", ",", "k", "=", "10", ")", ")", "\n", "\n", "", "cfg", ".", "enviroment", ".", "output_dir", "=", "os", ".", "path", ".", "join", "(", "get_original_cwd", "(", ")", ",", "cfg", ".", "enviroment", ".", "output_dir", ",", "exp_name", ")", "\n", "cfg", ".", "enviroment", ".", "data_dir", "=", "os", ".", "path", ".", "join", "(", "get_original_cwd", "(", ")", ",", "cfg", ".", "enviroment", ".", "data_dir", ")", "\n", "\n", "os", ".", "makedirs", "(", "cfg", ".", "enviroment", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "print", "(", "f\"Using output dir: {cfg.enviroment.output_dir}\"", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "enviroment", ".", "output_dir", ",", "\"config.yaml\"", ")", ",", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "OmegaConf", ".", "save", "(", "config", "=", "cfg", ",", "f", "=", "fp", ")", "\n", "\n", "", "data", "=", "get_dataset", "(", "cfg", ")", "\n", "\n", "logger", "=", "TensorBoardLogger", "(", "save_dir", "=", "cfg", ".", "enviroment", ".", "output_dir", ",", "log_graph", "=", "True", ")", "\n", "logger", ".", "log_hyperparams", "(", "cfg2dict", "(", "cfg", ")", ")", "\n", "\n", "if", "cfg", ".", "dataset", ".", "multi_label_ds", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "Data", ")", ":", "\n", "            ", "num_classes", "=", "data", ".", "y", ".", "size", "(", "1", ")", "\n", "num_features", "=", "data", ".", "x", ".", "size", "(", "1", ")", "\n", "", "else", ":", "# Tuple of 3 datasets", "\n", "            ", "assert", "len", "(", "data", ")", "==", "3", "\n", "num_classes", "=", "data", "[", "0", "]", "[", "0", "]", ".", "y", ".", "size", "(", "1", ")", "# Suited for PPI", "\n", "num_features", "=", "data", "[", "0", "]", "[", "0", "]", ".", "x", ".", "size", "(", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "num_classes", "=", "int", "(", "torch", ".", "max", "(", "data", ".", "y", ")", ".", "item", "(", ")", "+", "1", ")", "\n", "num_features", "=", "data", ".", "x", ".", "size", "(", "1", ")", "\n", "", "model", "=", "ExpModel", "(", "cfg", "=", "cfg", ",", "in_channels", "=", "num_features", ",", "out_classes", "=", "num_classes", ")", "\n", "\n", "steps", "=", "[", "EModelPhase", ".", "TRAIN_EMBEDDING", ",", "EModelPhase", ".", "TRAIN_CLASSIFIER", "]", "\n", "\n", "if", "cfg", ".", "model", ".", "depth", "==", "0", ":", "\n", "        ", "steps", "=", "[", "EModelPhase", ".", "TRAIN_CLASSIFIER", "]", "\n", "\n", "", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmp_dir", ":", "\n", "        ", "for", "curr_step", "in", "steps", ":", "\n", "            ", "print", "(", "\"##########################################################\"", ")", "\n", "print", "(", "f\"Training step: {curr_step.value}\"", ")", "\n", "print", "(", "\"##########################################################\"", ")", "\n", "model", "=", "train_step", "(", "cfg", "=", "cfg", ",", "\n", "data", "=", "data", ",", "\n", "model", "=", "model", ",", "\n", "step", "=", "curr_step", ",", "\n", "logger", "=", "logger", ",", "\n", "exp_name", "=", "exp_name", ")", "\n", "\n", "if", "cfg", ".", "enviroment", ".", "use_wandb", "and", "cfg", ".", "enviroment", ".", "upload_artifacts", ":", "\n", "# Save model artifact", "\n", "                ", "model_dst", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "f\"{exp_name}_model_{curr_step}.pth\"", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_dst", ")", "\n", "artifact", "=", "wandb", ".", "Artifact", "(", "f\"{exp_name}_model_{curr_step}\"", ",", "type", "=", "\"model\"", ")", "\n", "artifact", ".", "add_file", "(", "model_dst", ")", "\n", "wandb", ".", "run", ".", "log_artifact", "(", "artifact_or_path", "=", "artifact", ")", "\n", "\n", "", "", "wandb", ".", "finish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp.launcher": [[322, 339], ["hydra.main", "cfg.is_empty", "print", "print", "omegaconf.OmegaConf.to_yaml", "run_exp.main", "print", "wandb.alert", "wandb.finish", "str"], "function", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.main", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.main"], ["", "", "@", "hydra", ".", "main", "(", "config_path", "=", "\"configs\"", ",", "config_name", "=", "\"reconstruction_agg\"", ")", "# Config name will be given via command line", "\n", "def", "launcher", "(", "cfg", ":", "DictConfig", ")", ":", "\n", "    ", "if", "cfg", ".", "is_empty", "(", ")", ":", "\n", "        ", "print", "(", "\"Nothing to do, no config given\"", ")", "\n", "return", "\n", "", "print", "(", "OmegaConf", ".", "to_yaml", "(", "cfg", ")", ")", "\n", "try", ":", "\n", "        ", "main", "(", "cfg", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "if", "cfg", ".", "enviroment", ".", "use_wandb", ":", "\n", "            ", "wandb", ".", "alert", "(", "\n", "title", "=", "\"Got exception while running\"", ",", "\n", "text", "=", "str", "(", "e", ")", "\n", ")", "\n", "wandb", ".", "finish", "(", "exit_code", "=", "1", ")", "\n", "", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.fetch_results.make_hyperlink": [[7, 9], ["None"], "function", ["None"], ["def", "make_hyperlink", "(", "url", ",", "value", ")", ":", "\n", "    ", "return", "'=HYPERLINK(\"%s\", \"%s\")'", "%", "(", "url", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.fetch_results.build_skeleton": [[11, 27], ["range"], "function", ["None"], ["", "def", "build_skeleton", "(", ")", ":", "\n", "    ", "DEPTHS", "=", "range", "(", "0", ",", "6", ")", "\n", "DATASETS", "=", "[", "\"reddit2\"", ",", "\"ogbn-arxiv\"", ",", "\"ogbn-products\"", ",", "\"flickr\"", ",", "\"ppi\"", ",", "\"pubmed\"", ",", "\"reddit\"", "]", "\n", "LAYERS", "=", "[", "\"gcn\"", ",", "\"graphconv\"", ",", "\"gat\"", ",", "\"graphsage\"", "]", "\n", "\n", "ans", "=", "{", "}", "\n", "for", "depth", "in", "DEPTHS", ":", "\n", "        ", "for", "ds", "in", "DATASETS", ":", "\n", "            ", "for", "layer", "in", "LAYERS", ":", "\n", "                ", "for", "method", "in", "(", "\"reconstruction\"", ",", "\"supervised\"", ")", ":", "\n", "                    ", "key", "=", "(", "layer", ",", "ds", ",", "depth", ",", "method", ")", "\n", "ans", "[", "key", "]", "=", "{", "\"Status\"", ":", "\"pending\"", ",", "\n", "\"Depth\"", ":", "depth", ",", "\n", "\"Layer\"", ":", "layer", ",", "\n", "\"Dataset\"", ":", "ds", "}", "\n", "", "", "", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model_reg.ExpModelReg.__init__": [[18, 46], ["pytorch_lightning.LightningModule.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "model_reg.ExpModelReg.get_activation_func", "model_reg.ExpModelReg.set_criterion", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "model_reg.ExpModelReg.conv_layers.append", "model_reg.ExpModelReg.conv_layers.append", "model_reg.ExpModelReg.get_layer", "model_reg.ExpModelReg.bn.append", "model_reg.ExpModelReg.get_layer", "model_reg.ExpModelReg.bn.append", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.GNN.__init__", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.get_activation_func", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.set_criterion", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.get_layer", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.get_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ":", "DictConfig", ",", "in_channels", ",", "out_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "out_classes", "=", "out_classes", "\n", "self", ".", "out_channels", "=", "out_classes", "\n", "\n", "last_layer_input_dim", "=", "cfg", ".", "model", ".", "hidden_dim", "if", "cfg", ".", "model", ".", "depth", ">", "0", "else", "in_channels", "\n", "self", ".", "last_layer", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "last_layer_input_dim", ",", "cfg", ".", "model", ".", "hidden_dim", ")", ",", "\n", "torch", ".", "nn", ".", "ELU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "cfg", ".", "model", ".", "hidden_dim", ",", "out_classes", ")", ")", "\n", "\n", "self", ".", "conv_layers", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "bn", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "if", "cfg", ".", "model", ".", "depth", ">", "0", ":", "\n", "            ", "self", ".", "conv_layers", ".", "append", "(", "\n", "self", ".", "get_layer", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "cfg", ".", "model", ".", "hidden_dim", ")", ")", "\n", "if", "self", ".", "cfg", ".", "model", ".", "use_bn", ":", "\n", "                ", "self", ".", "bn", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "cfg", ".", "model", ".", "hidden_dim", ")", ")", "\n", "", "", "for", "i", "in", "range", "(", "cfg", ".", "model", ".", "depth", "-", "1", ")", ":", "\n", "            ", "self", ".", "conv_layers", ".", "append", "(", "\n", "self", ".", "get_layer", "(", "in_channels", "=", "cfg", ".", "model", ".", "hidden_dim", ",", "out_channels", "=", "cfg", ".", "model", ".", "hidden_dim", ")", ")", "\n", "if", "self", ".", "cfg", ".", "model", ".", "use_bn", ":", "\n", "                ", "self", ".", "bn", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "cfg", ".", "model", ".", "hidden_dim", ")", ")", "\n", "\n", "", "", "self", ".", "activation", "=", "self", ".", "get_activation_func", "(", ")", "\n", "self", ".", "criterion", "=", "None", "\n", "self", ".", "set_criterion", "(", ")", "\n", "self", ".", "_best_metrics_cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model_reg.ExpModelReg.log": [[47, 50], ["print", "super().log"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log"], ["", "def", "log", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "print", "(", "f\"{args[0]}: {args[1]:.2f}\"", ")", "\n", "super", "(", ")", ".", "log", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model_reg.ExpModelReg.get_layer": [[51, 71], ["torch_geometric.nn.GCNConv", "layer_params.get", "torch_geometric.nn.GATConv", "layer_params.get", "torch_geometric.nn.GATv2Conv", "torch_geometric.nn.SAGEConv", "torch_geometric.nn.GraphConv", "RuntimeError"], "methods", ["None"], ["", "def", "get_layer", "(", "self", ",", "in_channels", ":", "int", ",", "out_channels", ":", "int", ")", "->", "torch", ".", "nn", ".", "Module", ":", "\n", "        ", "layer_name", "=", "self", ".", "cfg", ".", "layer", ".", "name", "\n", "layer_params", "=", "self", ".", "cfg", ".", "layer", ".", "params", "\n", "if", "layer_name", "==", "\"gcn\"", ":", "\n", "            ", "return", "GCNConv", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "**", "layer_params", ")", "\n", "", "elif", "layer_name", "==", "\"gat\"", ":", "\n", "            ", "heads", "=", "layer_params", ".", "get", "(", "\"heads\"", ",", "1", ")", "\n", "return", "GATConv", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", "//", "heads", ",", "**", "layer_params", ")", "\n", "", "elif", "layer_name", "==", "\"gatv2\"", ":", "\n", "            ", "heads", "=", "layer_params", ".", "get", "(", "\"heads\"", ",", "1", ")", "\n", "return", "GATv2Conv", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", "//", "heads", ",", "**", "layer_params", ")", "\n", "", "elif", "layer_name", "==", "\"graphsage\"", ":", "\n", "            ", "return", "SAGEConv", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "**", "layer_params", ")", "\n", "", "elif", "layer_name", "==", "\"graphconv\"", ":", "\n", "            ", "return", "GraphConv", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "**", "layer_params", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "f\"Invalid GNN layer got: {layer_name}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model_reg.ExpModelReg.get_activation_func": [[72, 81], ["torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "RuntimeError", "list", "activation_map.keys"], "methods", ["None"], ["", "", "def", "get_activation_func", "(", "self", ")", "->", "torch", ".", "nn", ".", "Module", ":", "\n", "        ", "activation_name", "=", "self", ".", "cfg", ".", "model", ".", "activation", "\n", "activation_map", "=", "{", "\"elu\"", ":", "torch", ".", "nn", ".", "ELU", "(", ")", ",", "\n", "\"leaky_relu\"", ":", "torch", ".", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\"relu\"", ":", "torch", ".", "nn", ".", "ReLU", "(", ")", "}", "\n", "try", ":", "\n", "            ", "return", "activation_map", "[", "activation_name", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"Invalid activation func, got: {activation_name}, available: {list(activation_map.keys())}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model_reg.ExpModelReg._update_best_metric": [[82, 98], ["model_reg.ExpModelReg.log"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log"], ["", "", "def", "_update_best_metric", "(", "self", ",", "metric", ",", "value", ",", "type", ":", "str", ",", "force", ":", "bool", "=", "False", ")", "->", "bool", ":", "\n", "        ", "assert", "type", "in", "(", "\"min\"", ",", "\"max\"", ")", "\n", "updated_metric", "=", "False", "\n", "if", "metric", "in", "self", ".", "_best_metrics_cache", "and", "not", "force", ":", "\n", "            ", "if", "type", "==", "\"min\"", "and", "value", "<", "self", ".", "_best_metrics_cache", "[", "metric", "]", ":", "\n", "                ", "self", ".", "_best_metrics_cache", "[", "metric", "]", "=", "value", "\n", "updated_metric", "=", "True", "\n", "", "if", "type", "==", "\"max\"", "and", "value", ">", "self", ".", "_best_metrics_cache", "[", "metric", "]", ":", "\n", "                ", "self", ".", "_best_metrics_cache", "[", "metric", "]", "=", "value", "\n", "updated_metric", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_best_metrics_cache", "[", "metric", "]", "=", "value", "\n", "updated_metric", "=", "True", "\n", "\n", "", "self", ".", "log", "(", "f\"best_{metric}\"", ",", "self", ".", "_best_metrics_cache", "[", "metric", "]", ")", "\n", "return", "updated_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model_reg.ExpModelReg.configure_optimizers": [[99, 111], ["torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "getattr", "model_reg.ExpModelReg.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optimization_cfg", "=", "self", ".", "cfg", ".", "optimization", ".", "optimizer", "\n", "ans", "=", "[", "]", "\n", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "optimization_cfg", ".", "name", ")", "(", "self", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "optimization_cfg", ".", "initial_lr", ",", "\n", "weight_decay", "=", "optimization_cfg", ".", "weight_decay", ")", "\n", "sched", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "\"min\"", ",", "\n", "factor", "=", "optimization_cfg", ".", "lr_sched_factor", ",", "\n", "patience", "=", "optimization_cfg", ".", "lr_sched_patience", ",", "\n", "verbose", "=", "True", ",", "min_lr", "=", "optimization_cfg", ".", "lr_sched_minimal_lr", ")", "\n", "\n", "return", "{", "\"optimizer\"", ":", "optimizer", ",", "\"lr_scheduler\"", ":", "sched", ",", "\"monitor\"", ":", "\"val_loss/loss\"", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model_reg.ExpModelReg.set_criterion": [[112, 119], ["torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["None"], ["", "def", "set_criterion", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "cfg", ".", "dataset", ".", "multi_label_ds", ":", "\n", "            ", "criterion", "=", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "", "self", ".", "criterion", "=", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model_reg.ExpModelReg.forward": [[120, 141], ["enumerate", "model_reg.ExpModelReg.last_layer", "curr_l", "model_reg.ExpModelReg.activation", "model_reg.ExpModelReg.logger.experiment.add_histogram", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch.nn.functional.dropout.detach().cpu", "torch.nn.functional.dropout.detach().cpu", "torch.nn.functional.dropout.detach", "torch.nn.functional.dropout.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ":", "torch_geometric", ".", "data", ".", "Data", ")", ":", "\n", "        ", "x", "=", "data", ".", "x", "\n", "edge_index", "=", "data", ".", "edge_index", "\n", "\n", "for", "i", ",", "curr_l", "in", "enumerate", "(", "self", ".", "conv_layers", ")", ":", "\n", "            ", "x", "=", "curr_l", "(", "x", ",", "edge_index", ")", "\n", "\n", "if", "self", ".", "cfg", ".", "model", ".", "use_bn", ":", "\n", "                ", "x", "=", "self", ".", "bn", "[", "i", "]", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "self", ".", "logger", ".", "experiment", ".", "add_histogram", "(", "f'embedding_histogram/conv_{i}'", ",", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "self", ".", "global_step", ")", "\n", "\n", "", "if", "self", ".", "training", "and", "self", ".", "cfg", ".", "optimization", ".", "dropout_rate", ">", "0", ":", "\n", "                ", "x", "=", "torch", ".", "nn", ".", "functional", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "cfg", ".", "optimization", ".", "dropout_rate", ")", "\n", "\n", "", "", "x", "=", "self", ".", "last_layer", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model_reg.ExpModelReg.training_step": [[142, 153], ["hasattr", "model_reg.ExpModelReg.forward", "model_reg.ExpModelReg.criterion"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.GNN.forward"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_index", ")", ":", "\n", "        ", "if", "hasattr", "(", "batch", ",", "\"root_nodes\"", ")", ":", "\n", "            ", "criterion_mask", "=", "batch", ".", "root_nodes", "\n", "", "else", ":", "\n", "            ", "criterion_mask", "=", "batch", ".", "train_mask", "\n", "", "out", "=", "self", ".", "forward", "(", "batch", ")", "\n", "out", "=", "out", "[", "criterion_mask", "]", "\n", "y", "=", "batch", ".", "y", "[", "criterion_mask", "]", "\n", "loss", "=", "self", ".", "criterion", "(", "input", "=", "out", ",", "target", "=", "y", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model_reg.ExpModelReg.validation_step": [[154, 164], ["hasattr", "model_reg.ExpModelReg.forward", "model_reg.ExpModelReg.criterion", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.GNN.forward"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", ")", ":", "\n", "        ", "if", "hasattr", "(", "batch", ",", "\"root_nodes\"", ")", ":", "\n", "            ", "criterion_mask", "=", "batch", ".", "root_nodes", "\n", "", "else", ":", "\n", "            ", "criterion_mask", "=", "torch", ".", "ones_like", "(", "batch", ".", "train_mask", ")", "\n", "", "out", "=", "self", ".", "forward", "(", "batch", ")", "\n", "out", "=", "out", "[", "criterion_mask", "]", "\n", "y", "=", "batch", ".", "y", "[", "criterion_mask", "]", "\n", "loss", "=", "self", ".", "criterion", "(", "input", "=", "out", ",", "target", "=", "y", ")", "\n", "return", "out", ",", "y", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model_reg.ExpModelReg.validation_epoch_end": [[165, 234], ["zip", "conc_val_outputs.append", "numpy.mean", "model_reg.ExpModelReg.log", "model_reg.ExpModelReg.log", "model_reg.ExpModelReg.logger.experiment.add_histogram", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "numpy.argmax", "numpy.mean", "sklearn.metrics.f1_score", "model_reg.ExpModelReg.log", "model_reg.ExpModelReg._update_best_metric", "model_reg.ExpModelReg._update_best_metric", "model_reg.ExpModelReg._update_best_metric", "model_reg.ExpModelReg._update_best_metric", "torch.cat.cpu().numpy", "torch.cat.cpu().numpy", "torch.cat.cpu().numpy", "torch.cat.cpu().numpy", "torch.stack.cpu().numpy", "torch.stack.cpu().numpy", "model_reg.ExpModelReg._update_best_metric", "model_reg.ExpModelReg.log", "model_reg.ExpModelReg._update_best_metric", "numpy.argmax.flatten", "split_y.flatten", "numpy.reshape", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu", "torch.stack.cpu", "torch.stack.cpu"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel._update_best_metric", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel._update_best_metric", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel._update_best_metric", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel._update_best_metric", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel._update_best_metric", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel._update_best_metric"], ["", "def", "validation_epoch_end", "(", "self", ",", "validation_step_outputs", ")", ":", "\n", "        ", "lvl_name", "=", "\"final\"", "\n", "conc_val_outputs", "=", "[", "]", "\n", "for", "curr_outputs", "in", "validation_step_outputs", ":", "\n", "            ", "out", ",", "y", ",", "loss", "=", "zip", "(", "*", "curr_outputs", ")", "\n", "if", "len", "(", "out", ")", "==", "1", ":", "\n", "                ", "out", "=", "out", "[", "0", "]", "\n", "y", "=", "y", "[", "0", "]", "\n", "loss", "=", "loss", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "out", "=", "torch", ".", "cat", "(", "out", ")", "\n", "y", "=", "torch", ".", "cat", "(", "y", ")", "\n", "loss", "=", "torch", ".", "stack", "(", "loss", ")", "\n", "", "conc_val_outputs", ".", "append", "(", "(", "out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "loss", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "", "new_best_val", "=", "False", "\n", "\n", "for", "split_name", ",", "split_res", "in", "(", "(", "\"train\"", ",", "conc_val_outputs", "[", "0", "]", ")", ",", "(", "\"val\"", ",", "conc_val_outputs", "[", "1", "]", ")", ",", "(", "\"test\"", ",", "conc_val_outputs", "[", "2", "]", ")", ")", ":", "\n", "            ", "split_out", ",", "split_y", ",", "split_loss", "=", "split_res", "\n", "split_loss", "=", "np", ".", "mean", "(", "split_loss", ")", "\n", "self", ".", "log", "(", "f\"{split_name}_loss/loss\"", ",", "split_loss", ")", "\n", "\n", "if", "self", ".", "cfg", ".", "dataset", ".", "multi_label_ds", ":", "\n", "                ", "preds", "=", "(", "split_out", ">", "0", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "", "else", ":", "\n", "                ", "preds", "=", "np", ".", "argmax", "(", "split_out", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "split_acc", "=", "np", ".", "mean", "(", "preds", ".", "flatten", "(", ")", "==", "split_y", ".", "flatten", "(", ")", ")", "*", "100", "\n", "self", ".", "log", "(", "f\"accuracy_{split_name}/lvl_{lvl_name}\"", ",", "split_acc", ")", "\n", "f1s", "=", "None", "\n", "if", "self", ".", "out_classes", "==", "2", "or", "self", ".", "cfg", ".", "dataset", ".", "multi_label_ds", ":", "\n", "# Compute F1 score", "\n", "                ", "f1s", "=", "f1_score", "(", "y_true", "=", "split_y", ",", "y_pred", "=", "np", ".", "reshape", "(", "preds", ",", "split_y", ".", "shape", ")", ",", "average", "=", "\"micro\"", ")", "\n", "self", ".", "log", "(", "f\"f1_score_{split_name}/lvl_{lvl_name}\"", ",", "f1s", ")", "\n", "\n", "", "self", ".", "logger", ".", "experiment", ".", "add_histogram", "(", "f'class_prediction_histogram/lvl_{lvl_name}'", ",", "preds", ",", "\n", "self", ".", "current_epoch", ")", "\n", "\n", "if", "split_name", "==", "\"test\"", "and", "new_best_val", ":", "\n", "# Assumption that test is running after val", "\n", "                ", "self", ".", "_update_best_metric", "(", "metric", "=", "f\"accuracy_{split_name}/lvl_{lvl_name}\"", ",", "\n", "value", "=", "split_acc", ",", "\n", "type", "=", "\"max\"", ",", "\n", "force", "=", "True", ")", "\n", "self", ".", "_update_best_metric", "(", "metric", "=", "f\"loss_{split_name}/lvl_{lvl_name}\"", ",", "\n", "value", "=", "split_loss", ",", "\n", "type", "=", "\"min\"", ",", "\n", "force", "=", "True", ")", "\n", "\n", "if", "f1s", "is", "not", "None", ":", "\n", "                    ", "self", ".", "_update_best_metric", "(", "metric", "=", "f\"f1_score_{split_name}/lvl_{lvl_name}\"", ",", "\n", "value", "=", "f1s", ",", "\n", "type", "=", "\"max\"", ",", "\n", "force", "=", "True", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "_update_best_metric", "(", "metric", "=", "f\"loss_{split_name}/lvl_{lvl_name}\"", ",", "\n", "value", "=", "split_loss", ",", "\n", "type", "=", "\"min\"", ")", "\n", "updated_acc", "=", "self", ".", "_update_best_metric", "(", "metric", "=", "f\"accuracy_{split_name}/lvl_{lvl_name}\"", ",", "\n", "value", "=", "split_acc", ",", "\n", "type", "=", "\"max\"", ")", "\n", "if", "split_name", "==", "\"val\"", "and", "updated_acc", ":", "\n", "                    ", "new_best_val", "=", "True", "\n", "self", ".", "log", "(", "f\"best_epoch/lvl_{lvl_name}\"", ",", "self", ".", "current_epoch", ")", "\n", "\n", "", "if", "f1s", "is", "not", "None", ":", "\n", "                    ", "self", ".", "_update_best_metric", "(", "metric", "=", "f\"f1_score_{split_name}/lvl_{lvl_name}\"", ",", "\n", "value", "=", "f1s", ",", "\n", "type", "=", "\"max\"", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.dataset.load_cora": [[10, 14], ["torch_geometric.datasets.Planetoid", "os.path.join"], "function", ["None"], ["assert", "task_type", "in", "[", "'s'", ",", "'m'", "]", ",", "\"task_type should be one of {'s', 'm'}\"", "\n", "self", ".", "__task_type", "=", "task_type", "# {s or m}", "\n", "\n", "", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "__list", ")", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.dataset.load_citeseer": [[16, 20], ["torch_geometric.datasets.Planetoid", "os.path.join"], "function", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ":", "int", ")", "->", "Data", ":", "\n", "        ", "return", "self", ".", "__list", "[", "idx", "]", "\n", "\n", "", "@", "property", "\n", "def", "num_features", "(", "self", ")", "->", "int", ":", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.dataset.load_pubmed": [[22, 26], ["torch_geometric.datasets.Planetoid", "os.path.join"], "function", ["None"], ["\n", "", "@", "property", "\n", "def", "num_node_features", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "__num_features", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.dataset.load_reddit": [[28, 32], ["torch_geometric.datasets.Reddit", "os.path.join"], "function", ["None"], ["def", "num_classes", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "__num_classes", "\n", "\n", "", "@", "property", "\n", "def", "task_type", "(", "self", ")", "->", "str", ":", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.dataset.load_reddit2": [[34, 38], ["torch_geometric.datasets.Reddit2", "os.path.join"], "function", ["None"], ["", "", ""]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.dataset.load_ppi": [[40, 63], ["os.path.join", "torch_geometric.datasets.PPI", "torch_geometric.datasets.PPI", "torch_geometric.datasets.PPI", "torch_geometric.data.Batch.from_data_list", "torch.zeros", "torch.zeros", "torch.zeros", "setattr", "data_map[].append", "torch.ones", "torch_geometric.data.Batch.from_data_list.x.size", "torch_geometric.data.Batch.from_data_list.x.size", "torch_geometric.data.Batch.from_data_list.x.size", "torch_geometric.data.Batch.from_data_list.x.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.dataset.load_ogb_dataset": [[64, 78], ["ogb.nodeproppred.PygNodePropPredDataset", "ogb.nodeproppred.PygNodePropPredDataset.get_idx_split", "torch.zeros", "torch.zeros", "torch.zeros", "data.y.flatten", "data.x.size", "data.x.size", "data.x.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.dataset.load_ogbn_arxiv": [[80, 86], ["dataset.load_ogb_dataset", "torch_geometric.utils.to_undirected", "load_ogb_dataset.x.size"], "function", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.dataset.load_ogb_dataset"], []], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.dataset.load_ogbn_products": [[88, 94], ["dataset.load_ogb_dataset", "torch_geometric.utils.to_undirected", "load_ogb_dataset.x.size"], "function", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.dataset.load_ogb_dataset"], []], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.dataset.load_flickr": [[96, 101], ["torch_geometric.datasets.Flickr", "os.path.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.dataset.get_dataset": [[102, 136], ["isinstance", "torch.mean().unsqueeze", "torch.std().unsqueeze", "torch_geometric.utils.remove_self_loops", "RuntimeError", "torch.mean", "torch.std", "torch.abs", "list", "dataset_map.keys"], "function", ["None"], []], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_many_exp_reg.run_job": [[14, 16], ["subprocess.call"], "function", ["None"], ["def", "run_job", "(", "job", ":", "str", ")", "->", "None", ":", "\n", "    ", "subprocess", ".", "call", "(", "job", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_many_exp_reg.get_jobs": [[18, 40], ["jobs.append", "str().replace", "str"], "function", ["None"], ["", "def", "get_jobs", "(", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "jobs", "=", "[", "]", "\n", "for", "ds", "in", "(", "\"ogbn-products\"", ",", "\"ogbn-arxiv\"", ",", "\"reddit\"", ",", "\"reddit2\"", ",", "\"ppi\"", ",", "\"flickr\"", ",", "\"pubmed\"", ")", ":", "\n", "        ", "for", "layer", "in", "(", "\"gcn\"", ",", "\"graphconv\"", ",", "\"gat\"", ",", "\"graphsage\"", ")", ":", "\n", "            ", "for", "depth", "in", "(", "1", ",", "2", ",", "3", ",", "4", ",", "5", ")", ":", "\n", "                ", "curr_job", "=", "f\"{sys.executable} run_exp_reg.py -cn default layer={layer} dataset={ds} enviroment.use_wandb={LOG_WANDB} model.depth={depth}\"", "\n", "\n", "if", "layer", "==", "\"graphsage\"", ":", "\n", "                    ", "num_neighbours", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", "[", ":", "depth", "]", "\n", "curr_job", "+=", "f' layer.num_neighbors={str(num_neighbours).replace(\" \", \"\")}'", "\n", "\n", "", "if", "ds", "in", "(", "\"ogbn-products\"", ",", "\"reddit\"", ",", "\"reddit2\"", ")", ":", "\n", "                    ", "curr_job", "+=", "\" training.num_neighbours=2\"", "\n", "\n", "", "if", "ds", "==", "\"ppi\"", ":", "\n", "                    ", "curr_job", "+=", "f\" model.hidden_dim=1024\"", "\n", "\n", "", "jobs", ".", "append", "(", "curr_job", ")", "\n", "\n", "#jobs = sorted(jobs, key=lambda x: int(x.split(\"model.depth=\")[1].split(\" \")[0]), reverse=True)", "\n", "\n", "", "", "", "return", "jobs", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.AddMaskTransform.__init__": [[61, 64], ["torch_geometric.transforms.BaseTransform.__init__"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.GNN.__init__"], ["def", "__init__", "(", "self", ",", "target_mask", ":", "str", "=", "\"root_nodes\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "target_mask", "=", "target_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.AddMaskTransform.__call__": [[65, 70], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "setattr"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ":", "Any", ")", "->", "Any", ":", "\n", "        ", "new_mask", "=", "torch", ".", "zeros_like", "(", "data", ".", "train_mask", ")", "\n", "new_mask", "[", ":", "data", ".", "batch_size", "]", "=", "True", "\n", "setattr", "(", "data", ",", "self", ".", "target_mask", ",", "new_mask", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.get_free_gpu": [[31, 41], ["subprocess.check_output", "pandas.read_csv", "print", "gpu_df[].map", "gpu_df[].idxmax", "print", "io.StringIO", "subprocess.check_output.decode", "int", "x.rstrip"], "function", ["None"], ["def", "get_free_gpu", "(", ")", ":", "\n", "    ", "gpu_stats", "=", "subprocess", ".", "check_output", "(", "[", "\"nvidia-smi\"", ",", "\"--format=csv\"", ",", "\"--query-gpu=memory.used,memory.free\"", "]", ")", "\n", "gpu_df", "=", "pd", ".", "read_csv", "(", "StringIO", "(", "gpu_stats", ".", "decode", "(", ")", ")", ",", "\n", "names", "=", "[", "'memory.used'", ",", "'memory.free'", "]", ",", "\n", "skiprows", "=", "1", ")", "\n", "print", "(", "'GPU usage:\\n{}'", ".", "format", "(", "gpu_df", ")", ")", "\n", "gpu_df", "[", "'memory.free'", "]", "=", "gpu_df", "[", "'memory.free'", "]", ".", "map", "(", "lambda", "x", ":", "int", "(", "x", ".", "rstrip", "(", "' [MiB]'", ")", ")", ")", "\n", "idx", "=", "gpu_df", "[", "'memory.free'", "]", ".", "idxmax", "(", ")", "\n", "print", "(", "'The most free is GPU={} with {} free MiB'", ".", "format", "(", "idx", ",", "gpu_df", ".", "iloc", "[", "idx", "]", "[", "'memory.free'", "]", ")", ")", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.cfg2dict": [[43, 54], ["cfg.items", "type", "run_exp_reg.cfg2dict"], "function", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.cfg2dict"], ["", "def", "cfg2dict", "(", "cfg", ":", "DictConfig", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "    ", "\"\"\"\n    Recursively convert OmegaConf to vanilla dict\n    \"\"\"", "\n", "cfg_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "cfg", ".", "items", "(", ")", ":", "\n", "        ", "if", "type", "(", "v", ")", "==", "DictConfig", ":", "\n", "            ", "cfg_dict", "[", "k", "]", "=", "cfg2dict", "(", "v", ")", "\n", "", "else", ":", "\n", "            ", "cfg_dict", "[", "k", "]", "=", "v", "\n", "", "", "return", "cfg_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.train_step": [[72, 153], ["int", "pytorch_lightning.callbacks.ModelCheckpoint", "pytorch_lightning.Trainer", "pl.Trainer.fit", "list", "len", "torch_geometric.data.GraphSAINTEdgeSampler", "torch_geometric.data.GraphSAINTEdgeSampler", "torch_geometric.data.GraphSAINTEdgeSampler", "torch_geometric.loader.NeighborLoader", "torch_geometric.loader.NeighborLoader", "torch_geometric.loader.NeighborLoader", "torch.load", "torch.load", "model.load_state_dict", "cfg.enviroment.device.split", "datetime.timedelta", "pl.Trainer.validate", "run_exp_reg.AddMaskTransform", "run_exp_reg.AddMaskTransform", "run_exp_reg.AddMaskTransform", "pytorch_lightning.callbacks.LearningRateMonitor", "pytorch_lightning.callbacks.EarlyStopping"], "function", ["None"], ["", "", "def", "train_step", "(", "cfg", ":", "DictConfig", ",", "\n", "data", ":", "Union", "[", "Data", ",", "Tuple", "[", "Data", ",", "Data", ",", "Data", "]", "]", ",", "\n", "model", ":", "ExpModelReg", ",", "\n", "logger", ")", ":", "\n", "    ", "device_idx", "=", "int", "(", "cfg", ".", "enviroment", ".", "device", ".", "split", "(", "\"cuda:\"", ")", "[", "1", "]", ")", "\n", "\n", "assert", "cfg", ".", "training", ".", "batch_size", ">", "0", "\n", "if", "cfg", ".", "layer", ".", "name", "==", "\"graphsage\"", ":", "\n", "        ", "num_neighbors", "=", "list", "(", "cfg", ".", "layer", ".", "num_neighbors", ")", "\n", "", "else", ":", "\n", "        ", "num_neighbors", "=", "[", "cfg", ".", "training", ".", "num_neighbours", "]", "*", "cfg", ".", "model", ".", "depth", "\n", "\n", "", "assert", "len", "(", "num_neighbors", ")", "==", "cfg", ".", "model", ".", "depth", "\n", "\n", "batch_size", "=", "cfg", ".", "training", ".", "batch_size", "\n", "if", "cfg", ".", "dataset", ".", "use_saint", "and", "cfg", ".", "layer", ".", "name", "!=", "\"graphsage\"", ":", "\n", "        ", "train_loader", "=", "GraphSAINTEdgeSampler", "(", "data", "=", "data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "enviroment", ".", "num_workers", ",", "\n", "prefetch_factor", "=", "5", "if", "cfg", ".", "enviroment", ".", "num_workers", ">", "0", "else", "2", ",", "\n", "pin_memory", "=", "True", ")", "\n", "val_loader", "=", "GraphSAINTEdgeSampler", "(", "data", "=", "data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "enviroment", ".", "num_workers", ",", "\n", "prefetch_factor", "=", "5", "if", "cfg", ".", "enviroment", ".", "num_workers", ">", "0", "else", "2", ",", "\n", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "GraphSAINTEdgeSampler", "(", "data", "=", "data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "enviroment", ".", "num_workers", ",", "\n", "prefetch_factor", "=", "5", "if", "cfg", ".", "enviroment", ".", "num_workers", ">", "0", "else", "2", ",", "\n", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "train_loader", "=", "torch_geometric", ".", "loader", ".", "NeighborLoader", "(", "data", "=", "data", ",", "\n", "num_neighbors", "=", "num_neighbors", ",", "\n", "input_nodes", "=", "data", ".", "train_mask", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "enviroment", ".", "num_workers", ",", "\n", "prefetch_factor", "=", "5", "if", "cfg", ".", "enviroment", ".", "num_workers", ">", "0", "else", "2", ",", "\n", "pin_memory", "=", "True", ",", "\n", "transform", "=", "AddMaskTransform", "(", ")", ")", "\n", "val_loader", "=", "torch_geometric", ".", "loader", ".", "NeighborLoader", "(", "data", "=", "data", ",", "\n", "num_neighbors", "=", "num_neighbors", ",", "\n", "input_nodes", "=", "data", ".", "val_mask", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "enviroment", ".", "num_workers", ",", "\n", "prefetch_factor", "=", "5", "if", "cfg", ".", "enviroment", ".", "num_workers", ">", "0", "else", "2", ",", "\n", "pin_memory", "=", "True", ",", "\n", "transform", "=", "AddMaskTransform", "(", ")", ")", "\n", "test_loader", "=", "torch_geometric", ".", "loader", ".", "NeighborLoader", "(", "data", "=", "data", ",", "\n", "num_neighbors", "=", "num_neighbors", ",", "\n", "input_nodes", "=", "data", ".", "test_mask", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "enviroment", ".", "num_workers", ",", "\n", "transform", "=", "AddMaskTransform", "(", ")", ")", "\n", "\n", "\n", "", "checkpoint_callback", "=", "ModelCheckpoint", "(", "save_top_k", "=", "1", ",", "monitor", "=", "\"val_loss/loss\"", ")", "\n", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "\n", "log_every_n_steps", "=", "1", ",", "\n", "max_epochs", "=", "cfg", ".", "optimization", ".", "epochs", ",", "\n", "detect_anomaly", "=", "True", ",", "\n", "max_time", "=", "datetime", ".", "timedelta", "(", "hours", "=", "8", ")", ",", "\n", "devices", "=", "[", "device_idx", "]", ",", "\n", "accelerator", "=", "\"auto\"", ",", "\n", "logger", "=", "logger", ",", "\n", "callbacks", "=", "[", "LearningRateMonitor", "(", "logging_interval", "=", "'step'", ")", ",", "\n", "EarlyStopping", "(", "monitor", "=", "f\"val_loss/loss\"", ",", "min_delta", "=", "0.01", ",", "\n", "patience", "=", "cfg", ".", "optimization", ".", "early_stopping_tolerance", ",", "verbose", "=", "True", ",", "mode", "=", "\"min\"", ",", "\n", "strict", "=", "False", ")", ",", "\n", "checkpoint_callback", ",", "\n", "]", ")", "\n", "trainer", ".", "fit", "(", "model", ",", "train_loader", ",", "(", "train_loader", ",", "val_loader", ",", "test_loader", ")", ")", "\n", "try", ":", "\n", "# Get best", "\n", "        ", "best_ckpt_path", "=", "checkpoint_callback", ".", "best_model_path", "\n", "loaded_ckpt", "=", "torch", ".", "load", "(", "best_ckpt_path", ")", "\n", "model", ".", "load_state_dict", "(", "loaded_ckpt", "[", "\"state_dict\"", "]", ")", "\n", "", "except", "Exception", ":", "# If we did not complete one epoch", "\n", "        ", "trainer", ".", "validate", "(", "model", "=", "model", ",", "dataloaders", "=", "(", "train_loader", ",", "val_loader", ",", "test_loader", ")", ")", "# Always gurantee that we have result", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.main": [[155, 213], ["os.path.join", "os.path.join", "os.makedirs", "print", "unsupervised.dataset.get_dataset", "pytorch_lightning.loggers.TensorBoardLogger", "pytorch_lightning.loggers.TensorBoardLogger.log_hyperparams", "unsupervised.model_reg.ExpModelReg", "wandb.init", "wandb.config.update", "hydra.utils.get_original_cwd", "hydra.utils.get_original_cwd", "open", "omegaconf.OmegaConf.save", "run_exp_reg.cfg2dict", "isinstance", "int", "unsupervised.dataset.get_dataset.x.size", "tempfile.TemporaryDirectory", "print", "print", "print", "run_exp_reg.train_step", "wandb.finish", "run_exp_reg.get_free_gpu", "RuntimeError", "run_exp_reg.cfg2dict", "random.choices", "os.path.join", "unsupervised.dataset.get_dataset.y.size", "unsupervised.dataset.get_dataset.x.size", "[].y.size", "[].x.size", "os.path.join", "torch.save", "torch.save", "wandb.Artifact", "wandb.Artifact.add_file", "wandb.run.log_artifact", "len", "torch.max().item", "torch.max().item", "train_step.state_dict", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.dataset.get_dataset", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.cfg2dict", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.train_step", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.get_free_gpu", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.cfg2dict"], ["", "def", "main", "(", "cfg", ":", "DictConfig", ")", ":", "\n", "    ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "cfg", ".", "enviroment", ".", "device", "=", "f\"cuda:{get_free_gpu()}\"", "\n", "\n", "if", "cfg", ".", "enviroment", ".", "use_wandb", ":", "\n", "        ", "if", "cfg", ".", "enviroment", ".", "wandb_project_name", "==", "\"\"", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"You must give a project name when using logging results to wandb\"", ")", "\n", "", "wandb", ".", "init", "(", "project", "=", "cfg", ".", "enviroment", ".", "wandb_project_name", ",", "sync_tensorboard", "=", "True", ")", "\n", "wandb", ".", "config", ".", "update", "(", "cfg2dict", "(", "cfg", ")", ")", "\n", "exp_name", "=", "wandb", ".", "run", ".", "name", "\n", "", "else", ":", "\n", "        ", "exp_name", "=", "''", ".", "join", "(", "random", ".", "choices", "(", "string", ".", "ascii_uppercase", "+", "string", ".", "digits", ",", "k", "=", "10", ")", ")", "\n", "\n", "", "cfg", ".", "enviroment", ".", "output_dir", "=", "os", ".", "path", ".", "join", "(", "get_original_cwd", "(", ")", ",", "cfg", ".", "enviroment", ".", "output_dir", ",", "exp_name", ")", "\n", "cfg", ".", "enviroment", ".", "data_dir", "=", "os", ".", "path", ".", "join", "(", "get_original_cwd", "(", ")", ",", "cfg", ".", "enviroment", ".", "data_dir", ")", "\n", "\n", "os", ".", "makedirs", "(", "cfg", ".", "enviroment", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "print", "(", "f\"Using output dir: {cfg.enviroment.output_dir}\"", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "enviroment", ".", "output_dir", ",", "\"config.yaml\"", ")", ",", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "OmegaConf", ".", "save", "(", "config", "=", "cfg", ",", "f", "=", "fp", ")", "\n", "\n", "", "data", "=", "get_dataset", "(", "cfg", ")", "\n", "\n", "logger", "=", "TensorBoardLogger", "(", "save_dir", "=", "cfg", ".", "enviroment", ".", "output_dir", ",", "log_graph", "=", "True", ")", "\n", "logger", ".", "log_hyperparams", "(", "cfg2dict", "(", "cfg", ")", ")", "\n", "\n", "if", "cfg", ".", "dataset", ".", "multi_label_ds", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "Data", ")", ":", "\n", "            ", "num_classes", "=", "data", ".", "y", ".", "size", "(", "1", ")", "\n", "num_features", "=", "data", ".", "x", ".", "size", "(", "1", ")", "\n", "", "else", ":", "# Tuple of 3 datasets", "\n", "            ", "assert", "len", "(", "data", ")", "==", "3", "\n", "num_classes", "=", "data", "[", "0", "]", "[", "0", "]", ".", "y", ".", "size", "(", "1", ")", "# Suited for PPI", "\n", "num_features", "=", "data", "[", "0", "]", "[", "0", "]", ".", "x", ".", "size", "(", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "num_classes", "=", "int", "(", "torch", ".", "max", "(", "data", ".", "y", ")", ".", "item", "(", ")", "+", "1", ")", "\n", "num_features", "=", "data", ".", "x", ".", "size", "(", "1", ")", "\n", "", "model", "=", "ExpModelReg", "(", "cfg", "=", "cfg", ",", "in_channels", "=", "num_features", ",", "out_classes", "=", "num_classes", ")", "\n", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmp_dir", ":", "\n", "        ", "print", "(", "\"##########################################################\"", ")", "\n", "print", "(", "f\"Training\"", ")", "\n", "print", "(", "\"##########################################################\"", ")", "\n", "model", "=", "train_step", "(", "cfg", "=", "cfg", ",", "\n", "data", "=", "data", ",", "\n", "model", "=", "model", ",", "\n", "logger", "=", "logger", ")", "\n", "\n", "if", "cfg", ".", "enviroment", ".", "use_wandb", "and", "cfg", ".", "enviroment", ".", "upload_artifacts", ":", "\n", "# Save model artifact", "\n", "            ", "model_dst", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "f\"{exp_name}_model.pth\"", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_dst", ")", "\n", "artifact", "=", "wandb", ".", "Artifact", "(", "f\"{exp_name}_model\"", ",", "type", "=", "\"model\"", ")", "\n", "artifact", ".", "add_file", "(", "model_dst", ")", "\n", "wandb", ".", "run", ".", "log_artifact", "(", "artifact_or_path", "=", "artifact", ")", "\n", "\n", "", "wandb", ".", "finish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.launcher": [[214, 231], ["hydra.main", "cfg.is_empty", "print", "print", "omegaconf.OmegaConf.to_yaml", "run_exp_reg.main", "print", "wandb.alert", "wandb.finish", "str"], "function", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.main", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_exp_reg.main"], ["", "", "@", "hydra", ".", "main", "(", "config_path", "=", "\"configs\"", ",", "config_name", "=", "\"default\"", ")", "# Config name will be given via command line", "\n", "def", "launcher", "(", "cfg", ":", "DictConfig", ")", ":", "\n", "    ", "if", "cfg", ".", "is_empty", "(", ")", ":", "\n", "        ", "print", "(", "\"Nothing to do, no config given\"", ")", "\n", "return", "\n", "", "print", "(", "OmegaConf", ".", "to_yaml", "(", "cfg", ")", ")", "\n", "try", ":", "\n", "        ", "main", "(", "cfg", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "if", "cfg", ".", "enviroment", ".", "use_wandb", ":", "\n", "            ", "wandb", ".", "alert", "(", "\n", "title", "=", "\"Got exception while running\"", ",", "\n", "text", "=", "str", "(", "e", ")", "\n", ")", "\n", "wandb", ".", "finish", "(", "exit_code", "=", "1", ")", "\n", "", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.__init__": [[29, 60], ["pytorch_lightning.LightningModule.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "model.ExpModel.get_activation_func", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "model.ExpModel.conv_layers.append", "model.ExpModel.conv_layers.append", "model.ExpModel.get_layer", "model.ExpModel.bn.append", "model.ExpModel.get_layer", "model.ExpModel.bn.append", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.GNN.__init__", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.get_activation_func", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.get_layer", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.get_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ":", "DictConfig", ",", "in_channels", ",", "out_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "out_classes", "=", "out_classes", "\n", "self", ".", "out_channels", "=", "out_classes", "\n", "\n", "last_layer_input_dim", "=", "cfg", ".", "model", ".", "hidden_dim", "if", "cfg", ".", "model", ".", "depth", ">", "0", "else", "in_channels", "\n", "self", ".", "last_layer", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "last_layer_input_dim", ",", "cfg", ".", "model", ".", "hidden_dim", ")", ",", "\n", "torch", ".", "nn", ".", "ELU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "cfg", ".", "model", ".", "hidden_dim", ",", "out_classes", ")", ")", "\n", "\n", "self", ".", "conv_layers", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "bn", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "if", "cfg", ".", "model", ".", "depth", ">", "0", ":", "\n", "            ", "self", ".", "conv_layers", ".", "append", "(", "\n", "self", ".", "get_layer", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "cfg", ".", "model", ".", "hidden_dim", ")", ")", "\n", "if", "self", ".", "cfg", ".", "model", ".", "use_bn", ":", "\n", "                ", "self", ".", "bn", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "cfg", ".", "model", ".", "hidden_dim", ")", ")", "\n", "", "", "for", "i", "in", "range", "(", "cfg", ".", "model", ".", "depth", "-", "1", ")", ":", "\n", "            ", "self", ".", "conv_layers", ".", "append", "(", "\n", "self", ".", "get_layer", "(", "in_channels", "=", "cfg", ".", "model", ".", "hidden_dim", ",", "out_channels", "=", "cfg", ".", "model", ".", "hidden_dim", ")", ")", "\n", "if", "self", ".", "cfg", ".", "model", ".", "use_bn", ":", "\n", "                ", "self", ".", "bn", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "cfg", ".", "model", ".", "hidden_dim", ")", ")", "\n", "\n", "", "", "self", ".", "activation", "=", "self", ".", "get_activation_func", "(", ")", "\n", "self", ".", "is_last_step", "=", "None", "\n", "self", ".", "criterion", "=", "None", "\n", "self", ".", "phase", "=", "None", "\n", "self", ".", "_best_metrics_cache", "=", "{", "}", "\n", "\n", "self", ".", "automatic_optimization", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log": [[61, 64], ["print", "super().log"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log"], ["", "def", "log", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "print", "(", "f\"{args[0]}: {args[1]:.2f}\"", ")", "\n", "super", "(", ")", ".", "log", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.set_phase": [[65, 68], ["model.ExpModel.set_criterion"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.set_criterion"], ["", "def", "set_phase", "(", "self", ",", "phase", ":", "EModelPhase", ")", "->", "None", ":", "\n", "        ", "self", ".", "phase", "=", "phase", "\n", "self", ".", "set_criterion", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.get_layer": [[69, 89], ["torch_geometric.nn.GCNConv", "layer_params.get", "torch_geometric.nn.GATConv", "layer_params.get", "torch_geometric.nn.GATv2Conv", "torch_geometric.nn.SAGEConv", "torch_geometric.nn.GraphConv", "RuntimeError"], "methods", ["None"], ["", "def", "get_layer", "(", "self", ",", "in_channels", ":", "int", ",", "out_channels", ":", "int", ")", "->", "torch", ".", "nn", ".", "Module", ":", "\n", "        ", "layer_name", "=", "self", ".", "cfg", ".", "layer", ".", "name", "\n", "layer_params", "=", "self", ".", "cfg", ".", "layer", ".", "params", "\n", "if", "layer_name", "==", "\"gcn\"", ":", "\n", "            ", "return", "GCNConv", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "**", "layer_params", ")", "\n", "", "elif", "layer_name", "==", "\"gat\"", ":", "\n", "            ", "heads", "=", "layer_params", ".", "get", "(", "\"heads\"", ",", "1", ")", "\n", "return", "GATConv", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", "//", "heads", ",", "**", "layer_params", ")", "\n", "", "elif", "layer_name", "==", "\"gatv2\"", ":", "\n", "            ", "heads", "=", "layer_params", ".", "get", "(", "\"heads\"", ",", "1", ")", "\n", "return", "GATv2Conv", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", "//", "heads", ",", "**", "layer_params", ")", "\n", "", "elif", "layer_name", "==", "\"graphsage\"", ":", "\n", "            ", "return", "SAGEConv", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "**", "layer_params", ")", "\n", "", "elif", "layer_name", "==", "\"graphconv\"", ":", "\n", "            ", "return", "GraphConv", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "**", "layer_params", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "f\"Invalid GNN layer got: {layer_name}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.get_activation_func": [[90, 99], ["torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "RuntimeError", "list", "activation_map.keys"], "methods", ["None"], ["", "", "def", "get_activation_func", "(", "self", ")", "->", "torch", ".", "nn", ".", "Module", ":", "\n", "        ", "activation_name", "=", "self", ".", "cfg", ".", "model", ".", "activation", "\n", "activation_map", "=", "{", "\"elu\"", ":", "torch", ".", "nn", ".", "ELU", "(", ")", ",", "\n", "\"leaky_relu\"", ":", "torch", ".", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "\"relu\"", ":", "torch", ".", "nn", ".", "ReLU", "(", ")", "}", "\n", "try", ":", "\n", "            ", "return", "activation_map", "[", "activation_name", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"Invalid activation func, got: {activation_name}, available: {list(activation_map.keys())}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel._update_best_metric": [[100, 116], ["model.ExpModel.log"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log"], ["", "", "def", "_update_best_metric", "(", "self", ",", "metric", ",", "value", ",", "type", ":", "str", ",", "force", ":", "bool", "=", "False", ")", "->", "bool", ":", "\n", "        ", "assert", "type", "in", "(", "\"min\"", ",", "\"max\"", ")", "\n", "updated_metric", "=", "False", "\n", "if", "metric", "in", "self", ".", "_best_metrics_cache", "and", "not", "force", ":", "\n", "            ", "if", "type", "==", "\"min\"", "and", "value", "<", "self", ".", "_best_metrics_cache", "[", "metric", "]", ":", "\n", "                ", "self", ".", "_best_metrics_cache", "[", "metric", "]", "=", "value", "\n", "updated_metric", "=", "True", "\n", "", "if", "type", "==", "\"max\"", "and", "value", ">", "self", ".", "_best_metrics_cache", "[", "metric", "]", ":", "\n", "                ", "self", ".", "_best_metrics_cache", "[", "metric", "]", "=", "value", "\n", "updated_metric", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_best_metrics_cache", "[", "metric", "]", "=", "value", "\n", "updated_metric", "=", "True", "\n", "\n", "", "self", ".", "log", "(", "f\"best_{metric}\"", ",", "self", ".", "_best_metrics_cache", "[", "metric", "]", ")", "\n", "return", "updated_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.configure_optimizers": [[117, 146], ["range", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "ans.append", "len", "parameters.append", "RuntimeError", "getattr", "model.ExpModel.conv_layers[].parameters", "curr_params.append", "itertools.chain", "model.ExpModel.last_layer.parameters", "model.ExpModel.bn[].parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "phase", "==", "EModelPhase", ".", "TRAIN_EMBEDDING", ":", "# All except the classifier", "\n", "            ", "parameters", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv_layers", ")", ")", ":", "\n", "                ", "curr_params", "=", "[", "self", ".", "conv_layers", "[", "i", "]", ".", "parameters", "(", ")", "]", "\n", "if", "self", ".", "cfg", ".", "model", ".", "use_bn", ":", "\n", "                    ", "curr_params", ".", "append", "(", "self", ".", "bn", "[", "i", "]", ".", "parameters", "(", ")", ")", "\n", "\n", "", "parameters", ".", "append", "(", "itertools", ".", "chain", "(", "*", "curr_params", ")", ")", "\n", "", "", "elif", "self", ".", "phase", "==", "EModelPhase", ".", "TRAIN_CLASSIFIER", ":", "# Only the classifier", "\n", "            ", "parameters", "=", "[", "self", ".", "last_layer", ".", "parameters", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"Invalid model phase: {self.phase}\"", ")", "\n", "\n", "", "optimization_cfg", "=", "self", ".", "cfg", ".", "optimization", ".", "optimizer", "\n", "ans", "=", "[", "]", "\n", "for", "curr_params", "in", "parameters", ":", "\n", "            ", "curr_params", "=", "[", "p", "for", "p", "in", "curr_params", "]", "\n", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "optimization_cfg", ".", "name", ")", "(", "curr_params", ",", "\n", "lr", "=", "optimization_cfg", ".", "initial_lr", ",", "\n", "weight_decay", "=", "optimization_cfg", ".", "weight_decay", ")", "\n", "sched", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "\"min\"", ",", "\n", "factor", "=", "optimization_cfg", ".", "lr_sched_factor", ",", "\n", "patience", "=", "optimization_cfg", ".", "lr_sched_patience", ",", "\n", "verbose", "=", "True", ",", "min_lr", "=", "optimization_cfg", ".", "lr_sched_minimal_lr", ")", "\n", "\n", "ans", ".", "append", "(", "{", "\"optimizer\"", ":", "optimizer", ",", "\"lr_scheduler\"", ":", "sched", ",", "\"monitor\"", ":", "\"val_loss/loss\"", "}", ")", "\n", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.set_criterion": [[147, 160], ["unsupervised.gaussian_kernel.GaussianKernel", "unsupervised.gaussian_kernel.GaussianKernel.compute_d", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.gaussian_kernel.GaussianKernel.compute_d"], ["", "def", "set_criterion", "(", "self", ")", ":", "\n", "        ", "unsupervised_training", "=", "self", ".", "phase", "==", "EModelPhase", ".", "TRAIN_EMBEDDING", "\n", "\n", "if", "unsupervised_training", ":", "\n", "            ", "kernel", "=", "GaussianKernel", "(", "max_samples", "=", "4096", ",", "add_regularization", "=", "self", ".", "cfg", ".", "training", ".", "add_regularization", ")", "\n", "criterion", "=", "lambda", "x", ",", "y", ":", "kernel", ".", "compute_d", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "cfg", ".", "dataset", ".", "multi_label_ds", ":", "\n", "                ", "criterion", "=", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "else", ":", "\n", "                ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "", "", "self", ".", "criterion", "=", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.forward": [[161, 191], ["model.ExpModel._internal_forward", "sum().bool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "model.ExpModel._calculate_loss", "torch.where", "torch.where", "torch.where", "torch.where", "len", "print", "torch_geometric.utils.subgraph", "model.ExpModel._calculate_loss", "sum", "print", "data.x.size"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel._internal_forward", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel._calculate_loss", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel._calculate_loss"], ["", "def", "forward", "(", "self", ",", "data", ":", "torch_geometric", ".", "data", ".", "Data", ",", "criterion_mask", ":", "torch", ".", "Tensor", ",", "compute_loss", ":", "bool", "=", "True", ")", ":", "\n", "        ", "y", "=", "data", ".", "y", "\n", "edge_index", "=", "data", ".", "edge_index", "\n", "\n", "out", "=", "self", ".", "_internal_forward", "(", "data", ")", "\n", "\n", "lvl_loss", "=", "global_loss", "=", "None", "\n", "\n", "if", "compute_loss", ":", "\n", "            ", "if", "self", ".", "phase", "==", "EModelPhase", ".", "TRAIN_EMBEDDING", ":", "# We take only the edges which connect to the root nodes", "\n", "                ", "root_nodes_idx", "=", "torch", ".", "where", "(", "criterion_mask", ")", "[", "0", "]", "\n", "relevant_edges", "=", "sum", "(", "data", ".", "edge_index", "[", "1", "]", "==", "i", "for", "i", "in", "root_nodes_idx", ")", ".", "bool", "(", ")", "\n", "if", "len", "(", "relevant_edges", ")", "==", "0", ":", "\n", "                    ", "print", "(", "\"Warning got graph without edges in embedding phase\"", ")", "\n", "return", "None", ",", "None", ",", "out", ",", "y", "\n", "", "relevant_nodes", "=", "torch", ".", "cat", "(", "[", "data", ".", "edge_index", "[", "0", "]", "[", "relevant_edges", "]", ",", "root_nodes_idx", "]", ",", "dim", "=", "0", ")", "\n", "relevant_nodes", "=", "torch", ".", "unique", "(", "relevant_nodes", ")", "\n", "edge_index", "=", "torch_geometric", ".", "utils", ".", "subgraph", "(", "relevant_nodes", ",", "data", ".", "edge_index", ",", "num_nodes", "=", "data", ".", "x", ".", "size", "(", "0", ")", ")", "[", "0", "]", "\n", "try", ":", "\n", "                    ", "lvl_loss", ",", "global_loss", "=", "self", ".", "_calculate_loss", "(", "edge_index", "=", "edge_index", ",", "out", "=", "out", ",", "y", "=", "y", ")", "\n", "", "except", "RuntimeError", "as", "re", ":", "\n", "                    ", "print", "(", "f\"Got runtime error when calculating loss, probably SVD problem: {re}\"", ")", "\n", "return", "None", ",", "None", ",", "out", ",", "y", "\n", "", "out", "=", "[", "o", "[", "criterion_mask", "]", "for", "o", "in", "out", "]", "# Just to keep the function consistent", "\n", "y", "=", "data", ".", "y", "[", "criterion_mask", "]", "\n", "", "else", ":", "\n", "                ", "out", "=", "[", "o", "[", "criterion_mask", "]", "for", "o", "in", "out", "]", "\n", "y", "=", "data", ".", "y", "[", "criterion_mask", "]", "\n", "lvl_loss", ",", "global_loss", "=", "self", ".", "_calculate_loss", "(", "edge_index", "=", "edge_index", ",", "out", "=", "out", ",", "y", "=", "y", ")", "\n", "", "", "return", "lvl_loss", ",", "global_loss", ",", "out", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel._internal_forward": [[192, 223], ["enumerate", "model.ExpModel.last_layer", "out.append", "curr_l", "model.ExpModel.activation", "out.append", "model.ExpModel.logger.experiment.add_histogram", "torch.nn.functional.dropout.clone", "torch.nn.functional.dropout.clone", "torch.nn.functional.dropout.register_hook", "torch.nn.functional.dropout.register_hook", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch.nn.functional.dropout.detach().cpu", "torch.nn.functional.dropout.detach().cpu", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.nn.functional.dropout.detach", "torch.nn.functional.dropout.detach"], "methods", ["None"], ["", "def", "_internal_forward", "(", "self", ",", "data", ":", "torch_geometric", ".", "data", ".", "Data", ")", ":", "\n", "        ", "add_stop_gradients_lvl", "=", "self", ".", "phase", "==", "EModelPhase", ".", "TRAIN_EMBEDDING", "\n", "\n", "x", "=", "data", ".", "x", "\n", "edge_index", "=", "data", ".", "edge_index", "\n", "\n", "out", "=", "[", "x", "]", "\n", "for", "i", ",", "curr_l", "in", "enumerate", "(", "self", ".", "conv_layers", ")", ":", "\n", "            ", "x", "=", "curr_l", "(", "x", ",", "edge_index", ")", "\n", "\n", "if", "self", ".", "cfg", ".", "model", ".", "use_bn", ":", "\n", "                ", "x", "=", "self", ".", "bn", "[", "i", "]", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "self", ".", "logger", ".", "experiment", ".", "add_histogram", "(", "f'embedding_histogram/conv_{i}'", ",", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "\n", "self", ".", "global_step", ")", "\n", "\n", "", "out", ".", "append", "(", "x", ")", "\n", "\n", "if", "add_stop_gradients_lvl", "and", "self", ".", "training", ":", "\n", "                ", "x", "=", "x", ".", "clone", "(", ")", "\n", "x", ".", "register_hook", "(", "lambda", "grad", ":", "torch", ".", "zeros_like", "(", "grad", ")", ")", "\n", "\n", "", "if", "self", ".", "training", "and", "self", ".", "cfg", ".", "optimization", ".", "dropout_rate", ">", "0", ":", "\n", "                ", "x", "=", "torch", ".", "nn", ".", "functional", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "cfg", ".", "optimization", ".", "dropout_rate", ")", "\n", "\n", "", "", "x", "=", "self", ".", "last_layer", "(", "x", ")", "\n", "out", ".", "append", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel._calculate_loss": [[224, 266], ["len", "range", "model.ExpModel.criterion", "torch.split", "torch.split", "torch.split", "torch.split", "source_nodes.flatten.flatten.flatten", "target_nodes.flatten.flatten.flatten", "neighbours_emb.clone.clone.clone", "model.ExpModel.criterion", "torch.any().item", "torch.any().item", "torch.any().item", "torch.any().item", "len", "neighbours_emb.clone.clone.register_hook", "model.ExpModel.criterion", "print", "torch.any", "torch.any", "torch.any", "torch.any", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan"], "methods", ["None"], ["", "def", "_calculate_loss", "(", "self", ",", "edge_index", ":", "torch", ".", "Tensor", ",", "out", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "y", ":", "Optional", "[", "torch", ".", "Tensor", "]", ")", "->", "Tuple", "[", "List", "[", "torch", ".", "Tensor", "]", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "loss", "=", "[", "None", "]", "*", "len", "(", "out", ")", "\n", "if", "self", ".", "phase", "==", "EModelPhase", ".", "TRAIN_EMBEDDING", ":", "\n", "            ", "global_loss", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "out", ")", "-", "1", ")", ":", "# We don't care about the classifier and the first embedding", "\n", "                ", "relevant_edges", "=", "edge_index", ".", "T", "\n", "if", "relevant_edges", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                    ", "loss", "[", "i", "]", "=", "None", "\n", "continue", "\n", "", "elif", "relevant_edges", ".", "shape", "[", "0", "]", ">", "self", ".", "cfg", ".", "training", ".", "max_edges_for_loss", ":", "\n", "                    ", "idx_to_take", "=", "torch", ".", "randperm", "(", "relevant_edges", ".", "shape", "[", "0", "]", ")", "[", ":", "self", ".", "cfg", ".", "training", ".", "max_edges_for_loss", "]", "\n", "relevant_edges", "=", "relevant_edges", "[", "idx_to_take", "]", "\n", "", "neighbours_emb", "=", "out", "[", "i", "-", "1", "]", "# We want to be able to reproduce the neighbours from the agg nodes", "\n", "target_emb", "=", "out", "[", "i", "]", "\n", "source_nodes", ",", "target_nodes", "=", "torch", ".", "split", "(", "relevant_edges", ",", "1", ",", "dim", "=", "1", ")", "\n", "source_nodes", "=", "source_nodes", ".", "flatten", "(", ")", "\n", "target_nodes", "=", "target_nodes", ".", "flatten", "(", ")", "\n", "\n", "# Need to detach the neighbours from the loss calculation", "\n", "neighbours_emb", "=", "neighbours_emb", ".", "clone", "(", ")", "\n", "\n", "if", "neighbours_emb", ".", "requires_grad", ":", "\n", "                    ", "neighbours_emb", ".", "register_hook", "(", "lambda", "grad", ":", "torch", ".", "zeros_like", "(", "grad", ")", ")", "\n", "", "selected_neighbours", "=", "neighbours_emb", "[", "source_nodes", "]", "\n", "\n", "selected_targets", "=", "target_emb", "[", "target_nodes", "]", "\n", "\n", "lvl_loss", "=", "self", ".", "criterion", "(", "x", "=", "selected_targets", ",", "y", "=", "selected_neighbours", ")", "\n", "if", "self", ".", "cfg", ".", "training", ".", "use_self_in_loss", ":", "\n", "                    ", "lvl_loss", "+=", "self", ".", "criterion", "(", "x", "=", "selected_targets", ",", "y", "=", "neighbours_emb", "[", "target_nodes", "]", ")", "\n", "", "if", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "lvl_loss", ")", ")", ".", "item", "(", ")", ":", "\n", "                    ", "print", "(", "\"Warning: got nan in loss computation\"", ")", "\n", "loss", "[", "i", "]", "=", "None", "\n", "continue", "\n", "\n", "", "loss", "[", "i", "]", "=", "lvl_loss", "\n", "global_loss", "+=", "lvl_loss", "\n", "", "", "else", ":", "\n", "            ", "last_layer_loss", "=", "self", ".", "criterion", "(", "out", "[", "-", "1", "]", ",", "y", ")", "\n", "loss", "[", "-", "1", "]", "=", "last_layer_loss", "\n", "global_loss", "=", "last_layer_loss", "\n", "", "return", "loss", ",", "global_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.forward_single_conv": [[267, 273], ["model.ExpModel.activation"], "methods", ["None"], ["", "def", "forward_single_conv", "(", "self", ",", "layer_idx", ":", "int", ",", "x", ":", "torch", ".", "Tensor", ",", "edge_index", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "x", "=", "self", ".", "conv_layers", "[", "layer_idx", "]", "(", "x", ",", "edge_index", ")", "\n", "if", "self", ".", "cfg", ".", "model", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn", "[", "layer_idx", "]", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.forward_only_classifier": [[274, 284], ["model.ExpModel.last_layer", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "torch.nn.functional.dropout", "isinstance", "model.ExpModel.criterion", "y.type.type.type"], "methods", ["None"], ["", "def", "forward_only_classifier", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "y", ":", "torch", ".", "Tensor", ",", "compute_loss", ":", "bool", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "training", "and", "self", ".", "cfg", ".", "optimization", ".", "dropout_rate", ">", "0", ":", "\n", "            ", "x", "=", "torch", ".", "nn", ".", "functional", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "cfg", ".", "optimization", ".", "dropout_rate", ")", "\n", "", "x", "=", "self", ".", "last_layer", "(", "x", ")", "\n", "loss", "=", "None", "\n", "if", "compute_loss", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "criterion", ",", "torch", ".", "nn", ".", "BCEWithLogitsLoss", ")", ":", "\n", "                ", "y", "=", "y", ".", "type", "(", "torch", ".", "float32", ")", "\n", "", "loss", "=", "self", ".", "criterion", "(", "x", ",", "y", ")", "\n", "", "return", "[", "loss", "]", ",", "loss", ",", "[", "x", "]", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.training_step": [[285, 312], ["model.ExpModel.optimizers", "isinstance", "isinstance", "hasattr", "model.ExpModel.forward", "o.zero_grad", "model.ExpModel.manual_backward", "model.ExpModel.log", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "model.ExpModel.forward_only_classifier", "RuntimeError", "o.step", "global_loss.cpu().item", "enumerate", "model.ExpModel.log", "global_loss.cpu().item", "global_loss.cpu", "model.ExpModel.log", "curr_lvl_loss.cpu().item", "global_loss.cpu", "curr_lvl_loss.cpu"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.GNN.forward", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.forward_only_classifier", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_index", ")", ":", "\n", "        ", "optimizers", "=", "self", ".", "optimizers", "(", ")", "\n", "if", "not", "isinstance", "(", "optimizers", ",", "list", ")", ":", "\n", "            ", "optimizers", "=", "[", "optimizers", "]", "\n", "\n", "", "if", "self", ".", "phase", "==", "EModelPhase", ".", "TRAIN_EMBEDDING", "or", "(", "not", "self", ".", "cfg", ".", "dataset", ".", "pre_calculate_embeddings", ")", ":", "\n", "            ", "if", "hasattr", "(", "batch", ",", "\"root_nodes\"", ")", ":", "\n", "                ", "criterion_mask", "=", "batch", ".", "root_nodes", "\n", "", "else", ":", "\n", "                ", "criterion_mask", "=", "torch", ".", "ones_like", "(", "batch", ".", "train_mask", ")", "\n", "", "lvl_loss", ",", "global_loss", ",", "out", ",", "y", "=", "self", ".", "forward", "(", "data", "=", "batch", ",", "criterion_mask", "=", "criterion_mask", ")", "\n", "", "elif", "self", ".", "phase", "==", "EModelPhase", ".", "TRAIN_CLASSIFIER", ":", "\n", "            ", "lvl_loss", ",", "global_loss", ",", "out", ",", "y", "=", "self", ".", "forward_only_classifier", "(", "x", "=", "batch", "[", "0", "]", ",", "y", "=", "batch", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Invalid phase\"", ")", "\n", "\n", "", "[", "o", ".", "zero_grad", "(", ")", "for", "o", "in", "optimizers", "]", "\n", "if", "isinstance", "(", "global_loss", ",", "torch", ".", "Tensor", ")", ":", "# If no edges, this will be an int if we are in embedding training", "\n", "            ", "self", ".", "manual_backward", "(", "global_loss", ",", "retain_graph", "=", "True", ")", "\n", "[", "o", ".", "step", "(", ")", "for", "o", "in", "optimizers", "]", "\n", "self", ".", "log", "(", "\"loss_train/global\"", ",", "global_loss", ".", "cpu", "(", ")", ".", "item", "(", ")", ")", "\n", "if", "self", ".", "phase", "==", "EModelPhase", ".", "TRAIN_EMBEDDING", ":", "\n", "                ", "for", "i", ",", "curr_lvl_loss", "in", "enumerate", "(", "lvl_loss", ")", ":", "\n", "                    ", "if", "curr_lvl_loss", "is", "not", "None", ":", "\n", "                        ", "self", ".", "log", "(", "f\"loss_train/lvl_{i}\"", ",", "curr_lvl_loss", ".", "cpu", "(", ")", ".", "item", "(", ")", ")", "\n", "", "", "", "else", ":", "\n", "                ", "self", ".", "log", "(", "f\"loss_train/final\"", ",", "global_loss", ".", "cpu", "(", ")", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.validation_step": [[313, 324], ["model.ExpModel.forward_only_classifier", "hasattr", "model.ExpModel.forward", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.forward_only_classifier", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.GNN.forward"], ["", "", "", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", ")", ":", "\n", "        ", "if", "self", ".", "phase", "==", "EModelPhase", ".", "TRAIN_CLASSIFIER", "and", "self", ".", "cfg", ".", "dataset", ".", "pre_calculate_embeddings", ":", "\n", "            ", "lvl_loss", ",", "global_loss", ",", "out", ",", "y", "=", "self", ".", "forward_only_classifier", "(", "x", "=", "batch", "[", "0", "]", ",", "y", "=", "batch", "[", "1", "]", ")", "\n", "return", "out", ",", "y", ",", "lvl_loss", ",", "global_loss", "\n", "", "else", ":", "\n", "            ", "if", "hasattr", "(", "batch", ",", "\"root_nodes\"", ")", ":", "\n", "                ", "criterion_mask", "=", "batch", ".", "root_nodes", "\n", "", "else", ":", "\n", "                ", "criterion_mask", "=", "torch", ".", "ones_like", "(", "batch", ".", "train_mask", ")", "\n", "", "lvl_loss", ",", "global_loss", ",", "out", ",", "y", "=", "self", ".", "forward", "(", "data", "=", "batch", ",", "criterion_mask", "=", "criterion_mask", ",", "compute_loss", "=", "True", ")", "\n", "return", "out", ",", "y", ",", "lvl_loss", ",", "global_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log_confusion_matrix": [[326, 337], ["sklearn.metrics.confusion_matrix", "matplotlib.figure", "matplotlib.backends.backend_agg.FigureCanvasAgg", "seaborn.heatmap", "matplotlib.backends.backend_agg.FigureCanvasAgg.draw", "numpy.frombuffer().reshape", "model.ExpModel.logger.experiment.add_image", "matplotlib.close", "pred.flatten", "target.flatten", "matplotlib.figure.get_size_inches", "matplotlib.figure.get_dpi", "numpy.frombuffer", "int", "int", "matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb", "range"], "methods", ["None"], ["", "", "def", "log_confusion_matrix", "(", "self", ",", "pred", ",", "target", ",", "split_name", ",", "lvl", ")", ":", "\n", "        ", "conf_mat", "=", "confusion_matrix", "(", "pred", ".", "flatten", "(", ")", ",", "target", ".", "flatten", "(", ")", ",", "labels", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "out_classes", ")", "]", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "14", ")", ")", "\n", "canvas", "=", "FigureCanvasAgg", "(", "fig", ")", "\n", "sns", ".", "heatmap", "(", "conf_mat", ",", "annot", "=", "True", ")", "\n", "canvas", ".", "draw", "(", ")", "\n", "width", ",", "height", "=", "fig", ".", "get_size_inches", "(", ")", "*", "fig", ".", "get_dpi", "(", ")", "\n", "image", "=", "np", ".", "frombuffer", "(", "canvas", ".", "tostring_rgb", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "reshape", "(", "(", "int", "(", "height", ")", ",", "int", "(", "width", ")", ",", "3", ")", ")", "\n", "self", ".", "logger", ".", "experiment", ".", "add_image", "(", "f\"confusion_matrix_{split_name}/lvl_{lvl}\"", ",", "image", ",", "\n", "dataformats", "=", "\"HWC\"", ",", "global_step", "=", "self", ".", "current_epoch", ")", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log_roc_auc": [[338, 354], ["pred.flatten.flatten.flatten", "target.flatten.flatten.flatten", "sklearn.metrics.roc_auc_score", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "sklearn.metrics.RocCurveDisplay", "sklearn.metrics.RocCurveDisplay.plot", "matplotlib.backends.backend_agg.FigureCanvasAgg", "matplotlib.backends.backend_agg.FigureCanvasAgg.draw", "numpy.frombuffer().reshape", "model.ExpModel.logger.experiment.add_image", "model.ExpModel.log", "matplotlib.close", "sklearn.metrics.RocCurveDisplay.figure_.get_size_inches", "sklearn.metrics.RocCurveDisplay.figure_.get_dpi", "numpy.frombuffer", "int", "int", "matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log"], ["", "def", "log_roc_auc", "(", "self", ",", "pred", ",", "target", ",", "split_name", ",", "lvl", ")", "->", "None", ":", "\n", "        ", "pred", "=", "pred", ".", "flatten", "(", ")", "\n", "target", "=", "target", ".", "flatten", "(", ")", "\n", "score", "=", "roc_auc_score", "(", "y_true", "=", "target", ",", "y_score", "=", "pred", ")", "\n", "fpr", ",", "tpr", ",", "thresholds", "=", "roc_curve", "(", "target", ",", "pred", ")", "\n", "roc_auc", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "display", "=", "RocCurveDisplay", "(", "fpr", "=", "fpr", ",", "tpr", "=", "tpr", ",", "roc_auc", "=", "roc_auc", ")", "\n", "display", ".", "plot", "(", ")", "\n", "canvas", "=", "FigureCanvasAgg", "(", "display", ".", "figure_", ")", "\n", "canvas", ".", "draw", "(", ")", "\n", "width", ",", "height", "=", "display", ".", "figure_", ".", "get_size_inches", "(", ")", "*", "display", ".", "figure_", ".", "get_dpi", "(", ")", "\n", "image", "=", "np", ".", "frombuffer", "(", "canvas", ".", "tostring_rgb", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "reshape", "(", "(", "int", "(", "height", ")", ",", "int", "(", "width", ")", ",", "3", ")", ")", "\n", "self", ".", "logger", ".", "experiment", ".", "add_image", "(", "f\"ROC_AUC_{split_name}/lvl_{lvl}\"", ",", "image", ",", "dataformats", "=", "\"HWC\"", ",", "\n", "global_step", "=", "self", ".", "current_epoch", ")", "\n", "self", ".", "log", "(", "f\"roc_score_{split_name}/lvl_{lvl}\"", ",", "score", ")", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.validation_epoch_end": [[355, 473], ["zip", "range", "torch.concat().cpu().numpy", "torch.concat().cpu().numpy", "torch.concat().cpu().numpy", "torch.concat().cpu().numpy", "float", "conc_val_outputs.append", "model.ExpModel.log", "enumerate", "enumerate", "len", "out_conc.append", "lvl_loss_conc.append", "torch.mean().cpu().numpy", "torch.mean().cpu().numpy", "torch.mean().cpu().numpy", "torch.mean().cpu().numpy", "len", "enumerate", "len", "len", "zip", "len", "zip", "torch.concat().cpu().numpy", "torch.concat().cpu().numpy", "torch.concat().cpu().numpy", "torch.concat().cpu().numpy", "float", "torch.concat().cpu", "torch.concat().cpu", "torch.concat().cpu", "torch.concat().cpu", "isinstance", "int", "model.ExpModel._knn_classifier[].predict", "numpy.argmax", "model.ExpModel.log", "model.ExpModel.log", "model.ExpModel.logger.experiment.add_histogram", "torch.mean().cpu().numpy", "torch.mean().cpu().numpy", "torch.mean().cpu().numpy", "torch.mean().cpu().numpy", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "unsupervised.knn.KNNFaiss", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "model.ExpModel._knn_classifier[].fitModel", "numpy.mean", "sklearn.metrics.f1_score", "model.ExpModel.log", "model.ExpModel._update_best_metric", "model.ExpModel._update_best_metric", "model.ExpModel._update_best_metric", "model.ExpModel._update_best_metric", "model.ExpModel._update_best_metric", "model.ExpModel._update_best_metric", "torch.concat().cpu", "torch.concat().cpu", "torch.concat().cpu", "torch.concat().cpu", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "model.ExpModel.cfg.enviroment.device.split", "range", "numpy.equal", "model.ExpModel.log", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "lvl_pred.flatten", "split_y.flatten", "numpy.reshape", "torch.concat", "torch.concat", "torch.concat", "torch.concat", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.knn.KNNFaiss.predict", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.knn.KNNFaiss.fitModel", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel._update_best_metric", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel._update_best_metric", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel._update_best_metric", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel._update_best_metric", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel._update_best_metric", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel._update_best_metric", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.model.ExpModel.log"], ["", "def", "validation_epoch_end", "(", "self", ",", "validation_step_outputs", ")", ":", "\n", "        ", "self", ".", "_knn_classifier", "=", "None", "\n", "conc_val_outputs", "=", "[", "]", "\n", "for", "curr_outputs", "in", "validation_step_outputs", ":", "\n", "            ", "out", ",", "y", ",", "lvl_loss", ",", "global_loss", "=", "zip", "(", "*", "curr_outputs", ")", "\n", "out_conc", "=", "[", "]", "\n", "lvl_loss_conc", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "out", "[", "0", "]", ")", ")", ":", "\n", "                ", "out_conc", ".", "append", "(", "torch", ".", "concat", "(", "[", "o", "[", "i", "]", "for", "o", "in", "out", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "curr_lvl_loss", "=", "[", "l", "[", "i", "]", "for", "l", "in", "lvl_loss", "if", "l", "is", "not", "None", "]", "\n", "if", "curr_lvl_loss", "[", "0", "]", "is", "None", ":", "\n", "                    ", "curr_lvl_loss", "=", "None", "\n", "", "else", ":", "\n", "                    ", "curr_lvl_loss", "=", "[", "cll", "for", "cll", "in", "curr_lvl_loss", "if", "cll", "is", "not", "None", "]", "\n", "curr_lvl_loss", "=", "float", "(", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "curr_lvl_loss", ")", ".", "flatten", "(", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "lvl_loss_conc", ".", "append", "(", "curr_lvl_loss", ")", "\n", "", "out", "=", "out_conc", "\n", "lvl_loss", "=", "lvl_loss_conc", "\n", "y", "=", "torch", ".", "concat", "(", "y", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "global_loss", "=", "[", "g", "for", "g", "in", "global_loss", "if", "isinstance", "(", "g", ",", "torch", ".", "Tensor", ")", "]", "\n", "global_loss", "=", "float", "(", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "global_loss", ")", ".", "flatten", "(", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "conc_val_outputs", ".", "append", "(", "(", "out", ",", "y", ",", "lvl_loss", ",", "global_loss", ")", ")", "\n", "\n", "", "for", "split_name", ",", "split_res", "in", "(", "(", "\"train\"", ",", "conc_val_outputs", "[", "0", "]", ")", ",", "(", "\"val\"", ",", "conc_val_outputs", "[", "1", "]", ")", ",", "(", "\"test\"", ",", "conc_val_outputs", "[", "2", "]", ")", ")", ":", "\n", "            ", "split_out", ",", "split_y", ",", "split_lvl_loss", ",", "split_global_loss", "=", "split_res", "\n", "self", ".", "log", "(", "f\"{split_name}_loss/loss\"", ",", "split_global_loss", ")", "\n", "preds", "=", "[", "None", "]", "*", "len", "(", "split_lvl_loss", ")", "\n", "if", "self", ".", "phase", "==", "EModelPhase", ".", "TRAIN_EMBEDDING", ":", "\n", "                ", "if", "split_name", "==", "\"train\"", ":", "\n", "                    ", "gpu_idx", "=", "int", "(", "self", ".", "cfg", ".", "enviroment", ".", "device", ".", "split", "(", "\"cuda:\"", ")", "[", "1", "]", ")", "\n", "self", ".", "_knn_classifier", "=", "[", "KNNFaiss", "(", "k", "=", "5", ",", "gpu_idx", "=", "gpu_idx", ")", "for", "i", "in", "range", "(", "len", "(", "split_out", ")", ")", "]", "\n", "", "idx_to_take", "=", "None", "\n", "if", "split_out", "[", "0", "]", ".", "shape", "[", "0", "]", ">", "self", ".", "cfg", ".", "training", ".", "max_samples_for_evaluation", ":", "\n", "                    ", "idx_to_take", "=", "torch", ".", "randperm", "(", "split_out", "[", "0", "]", ".", "shape", "[", "0", "]", ")", "[", ":", "self", ".", "cfg", ".", "training", ".", "max_samples_for_evaluation", "]", "\n", "split_y", "=", "split_y", "[", "idx_to_take", "]", "\n", "", "for", "i", ",", "lvl_out", "in", "enumerate", "(", "split_out", ")", ":", "\n", "                    ", "if", "idx_to_take", "is", "not", "None", ":", "\n", "                        ", "lvl_out", "=", "lvl_out", "[", "idx_to_take", "]", "\n", "\n", "", "if", "split_name", "==", "\"train\"", ":", "\n", "                        ", "self", ".", "_knn_classifier", "[", "i", "]", ".", "fitModel", "(", "train_features", "=", "lvl_out", ",", "train_labels", "=", "split_y", ")", "\n", "", "preds", "[", "i", "]", "=", "self", ".", "_knn_classifier", "[", "i", "]", ".", "predict", "(", "test_features", "=", "lvl_out", ")", "\n", "", "", "else", ":", "# Final classification, the output is logits", "\n", "                ", "if", "self", ".", "cfg", ".", "dataset", ".", "multi_label_ds", ":", "\n", "                    ", "preds", "[", "-", "1", "]", "=", "(", "split_out", "[", "-", "1", "]", ">", "0", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "", "else", ":", "\n", "                    ", "preds", "[", "-", "1", "]", "=", "np", ".", "argmax", "(", "split_out", "[", "-", "1", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "", "split_acc", "=", "[", "None", "]", "*", "len", "(", "preds", ")", "\n", "split_f1", "=", "[", "None", "]", "*", "len", "(", "preds", ")", "\n", "for", "i", ",", "(", "lvl_loss", ",", "lvl_pred", ")", "in", "enumerate", "(", "zip", "(", "split_lvl_loss", ",", "preds", ")", ")", ":", "\n", "\n", "                ", "if", "lvl_loss", "is", "not", "None", "and", "lvl_pred", "is", "not", "None", ":", "\n", "                    ", "lvl_acc", "=", "np", ".", "mean", "(", "np", ".", "equal", "(", "lvl_pred", ".", "flatten", "(", ")", ",", "split_y", ".", "flatten", "(", ")", ")", ")", "*", "100", "\n", "split_acc", "[", "i", "]", "=", "lvl_acc", "\n", "if", "self", ".", "phase", "==", "EModelPhase", ".", "TRAIN_CLASSIFIER", ":", "\n", "                        ", "lvl_name", "=", "\"final\"", "\n", "", "else", ":", "\n", "                        ", "lvl_name", "=", "i", "\n", "", "self", ".", "log", "(", "f\"loss_{split_name}/lvl_{lvl_name}\"", ",", "lvl_loss", ")", "\n", "self", ".", "log", "(", "f\"accuracy_{split_name}/lvl_{lvl_name}\"", ",", "lvl_acc", ")", "\n", "\n", "if", "self", ".", "out_classes", "==", "2", "or", "self", ".", "cfg", ".", "dataset", ".", "multi_label_ds", ":", "\n", "# Compute F1 score", "\n", "                        ", "f1s", "=", "f1_score", "(", "y_true", "=", "split_y", ",", "y_pred", "=", "np", ".", "reshape", "(", "lvl_pred", ",", "split_y", ".", "shape", ")", ",", "average", "=", "\"micro\"", ")", "\n", "self", ".", "log", "(", "f\"f1_score_{split_name}/lvl_{lvl_name}\"", ",", "f1s", ")", "\n", "split_f1", "[", "i", "]", "=", "f1s", "\n", "\n", "# self.log_confusion_matrix(pred=lvl_pred, target=split_y, split_name=split_name, lvl=i)", "\n", "\n", "# if self.out_classes == 2:", "\n", "#     self.log_roc_auc(pred=lvl_pred, target=split_y, split_name=split_name, lvl=i)", "\n", "\n", "", "self", ".", "logger", ".", "experiment", ".", "add_histogram", "(", "f'class_prediction_histogram/lvl_{i}'", ",", "lvl_pred", ",", "\n", "self", ".", "current_epoch", ")", "\n", "", "", "new_best_val", "=", "[", "False", "]", "*", "len", "(", "split_acc", ")", "\n", "for", "i", ",", "(", "lvl_acc", ",", "lvl_loss", ",", "f1s", ")", "in", "enumerate", "(", "zip", "(", "split_acc", ",", "split_lvl_loss", ",", "split_f1", ")", ")", ":", "\n", "                ", "if", "lvl_loss", "is", "None", "and", "lvl_acc", "is", "None", "and", "f1s", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "if", "self", ".", "phase", "==", "EModelPhase", ".", "TRAIN_CLASSIFIER", ":", "\n", "                    ", "lvl_name", "=", "\"final\"", "\n", "", "else", ":", "\n", "                    ", "lvl_name", "=", "f\"{i}\"", "\n", "", "if", "split_name", "==", "\"test\"", "and", "new_best_val", "[", "i", "]", ":", "\n", "# Assumption that test is running after val", "\n", "                        ", "if", "lvl_acc", "is", "not", "None", ":", "\n", "                            ", "self", ".", "_update_best_metric", "(", "metric", "=", "f\"accuracy_{split_name}/lvl_{lvl_name}\"", ",", "\n", "value", "=", "lvl_acc", ",", "\n", "type", "=", "\"max\"", ",", "\n", "force", "=", "True", ")", "\n", "", "if", "lvl_loss", "is", "not", "None", ":", "\n", "                            ", "self", ".", "_update_best_metric", "(", "metric", "=", "f\"loss_{split_name}/lvl_{lvl_name}\"", ",", "\n", "value", "=", "lvl_loss", ",", "\n", "type", "=", "\"min\"", ",", "\n", "force", "=", "True", ")", "\n", "\n", "", "if", "f1s", "is", "not", "None", ":", "\n", "                            ", "self", ".", "_update_best_metric", "(", "metric", "=", "f\"f1_score_{split_name}/lvl_{lvl_name}\"", ",", "\n", "value", "=", "f1s", ",", "\n", "type", "=", "\"max\"", ",", "\n", "force", "=", "True", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "lvl_loss", ":", "\n", "                        ", "self", ".", "_update_best_metric", "(", "metric", "=", "f\"loss_{split_name}/lvl_{lvl_name}\"", ",", "\n", "value", "=", "lvl_loss", ",", "\n", "type", "=", "\"min\"", ")", "\n", "", "if", "lvl_acc", "is", "not", "None", ":", "\n", "                        ", "updated_acc", "=", "self", ".", "_update_best_metric", "(", "metric", "=", "f\"accuracy_{split_name}/lvl_{lvl_name}\"", ",", "\n", "value", "=", "lvl_acc", ",", "\n", "type", "=", "\"max\"", ")", "\n", "if", "split_name", "==", "\"val\"", "and", "updated_acc", ":", "\n", "                            ", "new_best_val", "[", "i", "]", "=", "True", "\n", "self", ".", "log", "(", "f\"best_epoch/lvl_{lvl_name}\"", ",", "self", ".", "current_epoch", ")", "\n", "\n", "", "", "if", "f1s", "is", "not", "None", ":", "\n", "                        ", "self", ".", "_update_best_metric", "(", "metric", "=", "f\"f1_score_{split_name}/lvl_{lvl_name}\"", ",", "\n", "value", "=", "f1s", ",", "\n", "type", "=", "\"max\"", ")", "\n", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_many_exp.run_job": [[13, 15], ["subprocess.call"], "function", ["None"], ["def", "run_job", "(", "job", ":", "str", ")", "->", "None", ":", "\n", "    ", "subprocess", ".", "call", "(", "job", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.run_many_exp.get_jobs": [[17, 37], ["jobs.append", "str().replace", "str"], "function", ["None"], ["", "def", "get_jobs", "(", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "jobs", "=", "[", "]", "\n", "for", "ds", "in", "(", "\"ogbn-products\"", ",", "\"ogbn-arxiv\"", ",", "\"reddit\"", ",", "\"reddit2\"", ",", "\"ppi\"", ",", "\"flickr\"", ",", "\"pubmed\"", ")", ":", "\n", "        ", "for", "layer", "in", "(", "\"gcn\"", ",", "\"graphconv\"", ",", "\"gat\"", ",", "\"graphsage\"", ")", ":", "\n", "            ", "for", "depth", "in", "(", "1", ",", "2", ",", "3", ",", "4", ",", "5", ")", ":", "\n", "                ", "for", "add_regularization", "in", "(", "\"false\"", ",", ")", ":", "\n", "                    ", "curr_job", "=", "f\"{sys.executable} run_exp.py -cn reconstruction_agg layer={layer} dataset={ds} enviroment.use_wandb={LOG_WANDB} model.depth={depth} training.use_self_in_loss=true training.add_regularization={add_regularization}\"", "\n", "if", "layer", "==", "\"graphsage\"", ":", "\n", "                        ", "num_neighbours", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", "[", ":", "depth", "]", "\n", "curr_job", "+=", "f' layer.num_neighbors={str(num_neighbours).replace(\" \", \"\")}'", "\n", "", "if", "ds", "in", "(", "\"ogbn-products\"", ",", "\"reddit\"", ",", "\"reddit2\"", ")", ":", "\n", "                        ", "curr_job", "+=", "f\" training.num_neighbours=2\"", "\n", "\n", "", "if", "ds", "==", "\"ppi\"", ":", "\n", "                        ", "curr_job", "+=", "f\" model.hidden_dim=1024 training.max_edges_for_loss=512\"", "\n", "", "jobs", ".", "append", "(", "curr_job", ")", "\n", "\n", "#jobs = sorted(jobs, key=lambda x: int(x.split(\"model.depth=\")[1].split(\" \")[0]), reverse=True)", "\n", "\n", "", "", "", "", "return", "jobs", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.knn.KNNFaiss.__init__": [[12, 18], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "k", ",", "gpu_idx", ":", "int", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "# k nearest neighbor value", "\n", "self", ".", "index", "=", "0", "\n", "self", ".", "gpu_idx", "=", "gpu_idx", "# Which GPU index to use", "\n", "self", ".", "train_labels", "=", "[", "]", "\n", "self", ".", "test_label_faiss_output", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.knn.KNNFaiss.fitModel": [[19, 28], ["faiss.IndexFlatL2", "knn.KNNFaiss.gpu_index_flat.add", "faiss.StandardGpuResources", "faiss.index_cpu_to_gpu"], "methods", ["None"], ["", "def", "fitModel", "(", "self", ",", "train_features", ",", "train_labels", ")", ":", "\n", "        ", "self", ".", "gpu_index_flat", "=", "self", ".", "index", "=", "faiss", ".", "IndexFlatL2", "(", "train_features", ".", "shape", "[", "1", "]", ")", "# build the index", "\n", "try", ":", "\n", "            ", "res", "=", "faiss", ".", "StandardGpuResources", "(", ")", "\n", "self", ".", "gpu_index_flat", "=", "faiss", ".", "index_cpu_to_gpu", "(", "res", ",", "self", ".", "gpu_idx", ",", "self", ".", "gpu_index_flat", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "res", "=", "None", "\n", "", "self", ".", "train_labels", "=", "train_labels", "\n", "self", ".", "gpu_index_flat", ".", "add", "(", "train_features", ")", "# add vectors to the index", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.unsupervised.knn.KNNFaiss.predict": [[29, 34], ["knn.KNNFaiss.gpu_index_flat.search", "numpy.array", "scipy.stats.mode", "knn.KNNFaiss.test_label_faiss_output.ravel"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "test_features", ")", ":", "\n", "        ", "distance", ",", "test_features_faiss_Index", "=", "self", ".", "gpu_index_flat", ".", "search", "(", "test_features", ",", "self", ".", "k", ")", "\n", "self", ".", "test_label_faiss_output", "=", "stats", ".", "mode", "(", "self", ".", "train_labels", "[", "test_features_faiss_Index", "]", ",", "axis", "=", "1", ")", "[", "0", "]", "\n", "self", ".", "test_label_faiss_output", "=", "np", ".", "array", "(", "self", ".", "test_label_faiss_output", ".", "ravel", "(", ")", ")", "\n", "return", "self", ".", "test_label_faiss_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho_estimator.RhoEstimator.__init__": [[10, 46], ["rho_estimator.RhoEstimator._get_all_modules", "pandas.DataFrame().to_csv", "curr_module.register_forward_hook", "tuple", "pandas.DataFrame", "rho_estimator.RhoEstimator._rho_list.append", "range", "regularization.rho.compute_rho", "[].sum", "str", "len", "rho.item", "pandas.DataFrame().to_csv", "torch.stack", "pandas.DataFrame"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho_estimator.RhoEstimator._get_all_modules", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho.compute_rho"], ["def", "__init__", "(", "self", ",", "path", ":", "str", ",", "model", ":", "torch", ".", "nn", ".", "Module", ",", "layers_type", ":", "List", "[", "Type", "[", "torch", ".", "nn", ".", "Module", "]", "]", ",", "rho_reg", ":", "float", ",", "lambda_", ":", "float", ",", "task_type", ":", "str", ")", ":", "\n", "        ", "self", ".", "_all_modules", "=", "self", ".", "_get_all_modules", "(", "model", ",", "layers_type", "=", "tuple", "(", "layers_type", ")", ")", "\n", "self", ".", "_path", "=", "path", "# path to .csv file", "\n", "if", "self", ".", "_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "_columns", "=", "[", "'iter'", "]", "+", "[", "'layer_'", "+", "str", "(", "i", ")", "+", "'_rho'", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_all_modules", ")", ")", "]", "\n", "pd", ".", "DataFrame", "(", "columns", "=", "self", ".", "_columns", ")", ".", "to_csv", "(", "self", ".", "_path", ",", "index", "=", "False", ")", "\n", "\n", "", "self", ".", "_rho_list", "=", "[", "]", "\n", "\n", "self", ".", "_last_layer", "=", "self", ".", "_all_modules", "[", "-", "1", "]", "\n", "self", ".", "_iter", "=", "0", "\n", "self", ".", "_y", "=", "None", "\n", "self", ".", "_rho", "=", "None", "\n", "self", ".", "_batch_size", "=", "None", "\n", "self", ".", "_rho_reg", "=", "rho_reg", "\n", "self", ".", "_lambda", "=", "lambda_", "\n", "self", ".", "_task_type", "=", "task_type", "\n", "\n", "for", "curr_module", "in", "self", ".", "_all_modules", ":", "\n", "            ", "def", "forward_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "                ", "if", "module", ".", "training", "==", "True", ":", "\n", "                    ", "self", ".", "_rho_list", ".", "append", "(", "compute_rho", "(", "output", "[", ":", "self", ".", "_batch_size", "]", ",", "self", ".", "_y", ",", "lambda_", "=", "self", ".", "_lambda", ")", ")", "\n", "\n", "if", "module", "==", "self", ".", "_last_layer", ":", "\n", "                        ", "self", ".", "_rho", "=", "torch", ".", "stack", "(", "self", ".", "_rho_list", ")", "[", ":", "-", "1", "]", ".", "sum", "(", ")", "\n", "rho_list", "=", "[", "rho", ".", "item", "(", ")", "for", "rho", "in", "self", ".", "_rho_list", "]", "\n", "data", "=", "[", "self", ".", "_iter", "]", "+", "rho_list", "\n", "if", "self", ".", "_path", "is", "not", "None", ":", "\n", "                            ", "pd", ".", "DataFrame", "(", "data", "=", "[", "data", "]", ",", "columns", "=", "self", ".", "_columns", ")", ".", "to_csv", "(", "\n", "self", ".", "_path", ",", "mode", "=", "'a'", ",", "index", "=", "False", ",", "header", "=", "False", "\n", ")", "\n", "\n", "", "self", ".", "_iter", "+=", "1", "\n", "self", ".", "_rho_list", "=", "[", "]", "\n", "\n", "", "", "", "curr_module", ".", "register_forward_hook", "(", "hook", "=", "forward_hook", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho_estimator.RhoEstimator._get_all_modules": [[47, 60], ["isinstance", "list", "ans.append", "module.children", "len", "rho_estimator.RhoEstimator._get_all_modules"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho_estimator.RhoEstimator._get_all_modules"], ["", "", "@", "staticmethod", "\n", "def", "_get_all_modules", "(", "module", ":", "torch", ".", "nn", ".", "Module", ",", "layers_type", ":", "Tuple", "[", "Type", "[", "torch", ".", "nn", ".", "Module", "]", "]", ")", ":", "\n", "        ", "ans", "=", "[", "]", "\n", "if", "isinstance", "(", "module", ",", "layers_type", ")", ":", "\n", "            ", "ans", ".", "append", "(", "module", ")", "\n", "\n", "", "m_childrens", "=", "list", "(", "module", ".", "children", "(", ")", ")", "\n", "if", "len", "(", "m_childrens", ")", "==", "0", ":", "\n", "            ", "return", "ans", "\n", "", "else", ":", "\n", "            ", "for", "curr_children", "in", "m_childrens", ":", "\n", "                ", "ans", "+=", "RhoEstimator", ".", "_get_all_modules", "(", "curr_children", ",", "layers_type", ")", "\n", "", "return", "ans", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho_estimator.RhoEstimator.set_y": [[61, 67], ["torch.nn.functional.one_hot().type", "y.type", "torch.nn.functional.one_hot", "y.flatten", "rho_estimator.RhoEstimator._y.sum"], "methods", ["None"], ["", "", "def", "set_y", "(", "self", ",", "y", ")", ":", "\n", "        ", "if", "self", ".", "_task_type", "==", "'s'", ":", "\n", "            ", "self", ".", "_y", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "y", ".", "flatten", "(", ")", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "self", ".", "_y", "=", "self", ".", "_y", "[", ":", ",", "self", ".", "_y", ".", "sum", "(", "0", ")", "!=", "0", "]", "# prevents nans in back propagation", "\n", "", "else", ":", "# (m)", "\n", "            ", "self", ".", "_y", "=", "y", ".", "type", "(", "torch", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho_estimator.RhoEstimator.set_batch_size": [[68, 70], ["None"], "methods", ["None"], ["", "", "def", "set_batch_size", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "_batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho_estimator.RhoEstimator.get_rho": [[71, 73], ["None"], "methods", ["None"], ["", "def", "get_rho", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_rho", "*", "self", ".", "_rho_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho.ED.forward": [[13, 18], ["torch.linalg.eigh", "ctx.save_for_backward"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "K", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "lambda_", ",", "U", "=", "torch", ".", "linalg", ".", "eigh", "(", "K", ")", "\n", "ctx", ".", "save_for_backward", "(", "lambda_", ",", "U", ")", "\n", "return", "lambda_", ",", "U", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho.ED.backward": [[19, 28], ["torch.eye", "lambda_.reshape", "lambda_.reshape", "torch.diag"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "lambda_grad", ":", "torch", ".", "Tensor", ",", "U_grad", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "lambda_", ",", "U", "=", "ctx", ".", "saved_tensors", "\n", "I", "=", "torch", ".", "eye", "(", "lambda_", ".", "shape", "[", "0", "]", ",", "device", "=", "lambda_", ".", "device", ")", "\n", "tmp", "=", "lambda_", ".", "reshape", "(", "-", "1", ",", "1", ")", "-", "lambda_", ".", "reshape", "(", "1", ",", "-", "1", ")", "+", "I", "\n", "eps", "=", "1e-5", "\n", "tmp", "=", "tmp", "+", "(", "tmp", "==", "0", ")", "*", "eps", "# prevents nans", "\n", "K_tilde", "=", "1", "/", "tmp", "-", "I", "\n", "return", "U", "@", "(", "K_tilde", ".", "T", "*", "(", "U", ".", "T", "@", "U_grad", ")", "+", "torch", ".", "diag", "(", "lambda_grad", ")", ")", "@", "U", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho.kernel": [[30, 43], ["torch.exp", "N.mean"], "function", ["None"], ["", "", "def", "kernel", "(", "A", ":", "torch", ".", "Tensor", ",", "B", ":", "torch", ".", "Tensor", ",", "lambda_", ":", "float", "=", "1.0", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "'''\n        Gaussian kernel, which is universal according:\n            https://jmlr.csail.mit.edu/papers/volume7/micchelli06a/micchelli06a.pdf\n\n        A: tensor of shape (num_samples, dim)\n        B: tensor of shape (num_samples, dim)\n    '''", "\n", "A_reduced", "=", "(", "A", "*", "A", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "# column vector (num_samples, 1)", "\n", "B_reduced", "=", "(", "B", "*", "B", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "# row vector (1, num_samples)", "\n", "AB", "=", "A", "@", "B", ".", "T", "# (num_samples, num_samples)", "\n", "N", "=", "A_reduced", "+", "B_reduced", "-", "2", "*", "AB", "\n", "return", "torch", ".", "exp", "(", "-", "N", "/", "(", "N", ".", "mean", "(", ")", "*", "lambda_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho.compute_rho": [[45, 60], ["rho.kernel", "ED.apply", "torch.diag", "l.clamp"], "function", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho.kernel"], ["", "def", "compute_rho", "(", "X", ":", "torch", ".", "Tensor", ",", "Y", ":", "torch", ".", "Tensor", ",", "lambda_", ":", "float", "=", "1.0", ")", "->", "float", ":", "\n", "    ", "'''\n        Check if Y could be learned from X.\n\n        X: tensor of shape (num_samples, dim_1)\n        Y: tensor of shape (num_samples, dim_2)\n    '''", "\n", "K", "=", "kernel", "(", "X", ",", "X", ",", "lambda_", ")", "\n", "l", ",", "U", "=", "ED", ".", "apply", "(", "K", ")", "\n", "P", "=", "U", "@", "torch", ".", "diag", "(", "l", ".", "clamp", "(", "min", "=", "0.0", ",", "max", "=", "1.0", ")", ")", "@", "U", ".", "T", "\n", "Y_perp", "=", "Y", "-", "P", "@", "Y", "\n", "rho", "=", "(", "(", "Y_perp", "**", "2", ")", ".", "mean", "(", "0", ")", "**", "0.5", ")", ".", "mean", "(", ")", "\n", "return", "rho", ".", "item", "(", ")", "\n", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.GNN.__init__": [[21, 64], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "train_gnn_reg.GNN.classifier.append", "train_gnn_reg.GNN.classifier.append", "train_gnn_reg.GNN.classifier.append", "train_gnn_reg.GNN.classifier.append", "train_gnn_reg.GNN.classifier.append", "train_gnn_reg.GNN.classifier.append", "train_gnn_reg.GNN.embedding.append", "range", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch_geometric.nn.GraphConv", "train_gnn_reg.GNN.embedding.append", "train_gnn_reg.GNN.embedding.append", "range", "type", "torch_geometric.nn.GraphConv", "torch_geometric.nn.SAGEConv", "train_gnn_reg.GNN.embedding.append", "train_gnn_reg.GNN.embedding.append", "range", "ValueError", "torch_geometric.nn.SAGEConv", "torch_geometric.nn.GINConv", "train_gnn_reg.GNN.embedding.append", "train_gnn_reg.GNN.embedding.append", "range", "torch_geometric.nn.GINConv", "torch_geometric.nn.GATv2Conv", "train_gnn_reg.GNN.embedding.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch_geometric.nn.GATv2Conv", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.GNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "hidden_channels", ":", "int", ",", "out_channels", ":", "int", ",", "num_embedding_layers", ":", "int", ",", "dropout", ":", "float", ",", "\n", "type", ":", "str", "=", "'GraphConv'", ",", "heads", ":", "int", "=", "1", ",", "eps", ":", "float", "=", "10.0", ",", "norm_factor", ":", "Union", "[", "torch", ".", "Tensor", ",", "type", "(", "None", ")", "]", "=", "None", ",", "task_type", ":", "str", "=", "'s'", ")", ":", "\n", "        ", "super", "(", "GNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_embedding_layers", "=", "num_embedding_layers", "\n", "self", ".", "embedding", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "if", "(", "type", "==", "'GraphConv'", ")", "or", "(", "type", "==", "'GCNConv'", ")", ":", "\n", "            ", "if", "num_embedding_layers", ">=", "1", ":", "\n", "                ", "self", ".", "embedding", ".", "append", "(", "GraphConv", "(", "in_channels", ",", "hidden_channels", ",", "aggr", "=", "'add'", ")", ")", "\n", "for", "_", "in", "range", "(", "num_embedding_layers", "-", "1", ")", ":", "\n", "                    ", "self", ".", "embedding", ".", "append", "(", "GraphConv", "(", "hidden_channels", ",", "hidden_channels", ",", "aggr", "=", "'add'", ")", ")", "\n", "", "", "", "elif", "type", "==", "'SAGEConv'", ":", "\n", "            ", "if", "num_embedding_layers", ">=", "1", ":", "\n", "                ", "self", ".", "embedding", ".", "append", "(", "SAGEConv", "(", "in_channels", ",", "hidden_channels", ")", ")", "\n", "for", "_", "in", "range", "(", "num_embedding_layers", "-", "1", ")", ":", "\n", "                    ", "self", ".", "embedding", ".", "append", "(", "SAGEConv", "(", "hidden_channels", ",", "hidden_channels", ")", ")", "\n", "", "", "", "elif", "type", "==", "'GINConv'", ":", "\n", "            ", "if", "num_embedding_layers", ">=", "1", ":", "\n", "                ", "self", ".", "embedding", ".", "append", "(", "GINConv", "(", "nn", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "hidden_channels", ")", ",", "eps", "=", "eps", ")", ")", "\n", "for", "_", "in", "range", "(", "num_embedding_layers", "-", "1", ")", ":", "\n", "                    ", "self", ".", "embedding", ".", "append", "(", "GINConv", "(", "nn", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "hidden_channels", ")", ",", "eps", "=", "eps", ")", ")", "\n", "", "", "", "elif", "type", "==", "'GATv2Conv'", ":", "\n", "            ", "if", "num_embedding_layers", ">=", "1", ":", "\n", "                ", "self", ".", "embedding", ".", "append", "(", "GATv2Conv", "(", "in_channels", ",", "hidden_channels", "//", "heads", ",", "heads", "=", "heads", ")", ")", "\n", "for", "_", "in", "range", "(", "num_embedding_layers", "-", "1", ")", ":", "\n", "                    ", "self", ".", "embedding", ".", "append", "(", "GATv2Conv", "(", "hidden_channels", ",", "hidden_channels", "//", "heads", ",", "heads", "=", "heads", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Incorrect embedding type: '", "+", "type", ")", "\n", "\n", "", "self", ".", "classifier", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "if", "num_embedding_layers", "<=", "0", ":", "\n", "            ", "self", ".", "classifier", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "hidden_channels", ")", ")", "\n", "self", ".", "classifier", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "hidden_channels", ")", ")", "\n", "self", ".", "classifier", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "hidden_channels", ")", ")", "\n", "self", ".", "classifier", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "hidden_channels", ")", ")", "\n", "self", ".", "classifier", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "out_channels", ")", ")", "\n", "\n", "", "self", ".", "type", "=", "type", "\n", "self", ".", "norm_factor", "=", "norm_factor", "\n", "self", ".", "dropout", "=", "dropout", "\n", "assert", "task_type", "in", "[", "'s'", ",", "'m'", "]", ",", "\"task_type should be one of {'s', 'm'}\"", "\n", "self", ".", "task_type", "=", "task_type", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.GNN.forward": [[65, 95], ["enumerate", "range", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "len", "torch.dropout.log_softmax", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_all", ":", "torch", ".", "Tensor", ",", "n_id", ":", "torch", ".", "Tensor", ",", "adjs", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "# Embedding part:", "\n", "        ", "x", "=", "x_all", "[", "n_id", "]", "\n", "if", "self", ".", "type", "==", "'GCNConv'", ":", "\n", "            ", "norm_factor", "=", "self", ".", "norm_factor", "[", "n_id", "]", "\n", "x", "=", "x", "*", "norm_factor", "\n", "\n", "", "for", "i", ",", "(", "edge_index", ",", "_", ",", "size", ")", "in", "enumerate", "(", "adjs", ")", ":", "\n", "            ", "x_target", "=", "x", "[", ":", "size", "[", "1", "]", "]", "\n", "x", "=", "self", ".", "embedding", "[", "i", "]", "(", "(", "x", ",", "x_target", ")", ",", "edge_index", ")", "\n", "\n", "if", "self", ".", "type", "==", "'GCNConv'", ":", "\n", "                ", "norm_factor", "=", "norm_factor", "[", ":", "size", "[", "1", "]", "]", "\n", "x", "=", "x", "*", "norm_factor", "\n", "\n", "", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# Classifier part:", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "classifier", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "classifier", "[", "i", "]", "(", "x", ")", "\n", "\n", "if", "i", "!=", "len", "(", "self", ".", "classifier", ")", "-", "1", ":", "\n", "                ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "", "if", "self", ".", "task_type", "==", "'s'", ":", "\n", "            ", "return", "x", ".", "log_softmax", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "# (m)", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.GNN.inference": [[96, 138], ["tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.set_description", "range", "tqdm.tqdm.tqdm.close", "torch.cat.to", "torch.cat.to", "range", "torch.relu.cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "adj.to", "x_all[].to", "torch.relu", "torch.relu", "xs.append", "tqdm.tqdm.tqdm.update", "torch.relu", "torch.relu", "torch.cat.size", "torch.cat.size", "torch.relu.cpu", "len"], "methods", ["None"], ["", "", "def", "inference", "(", "self", ",", "x_all", ":", "torch", ".", "Tensor", ",", "subgraph_loader", ":", "NeighborSampler", ",", "device", ":", "torch", ".", "device", ")", "->", "torch", ".", "Tensor", ":", "\n", "# Embedding part:", "\n", "        ", "pbar", "=", "tqdm", "(", "total", "=", "x_all", ".", "size", "(", "0", ")", "*", "self", ".", "num_embedding_layers", ")", "\n", "pbar", ".", "set_description", "(", "'Evaluating'", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_embedding_layers", ")", ":", "\n", "            ", "xs", "=", "[", "]", "\n", "for", "batch_size", ",", "n_id", ",", "adj", "in", "subgraph_loader", ":", "\n", "                ", "edge_index", ",", "original_edges", ",", "size", "=", "adj", ".", "to", "(", "device", ")", "\n", "x", "=", "x_all", "[", "n_id", "]", ".", "to", "(", "device", ")", "\n", "\n", "if", "self", ".", "type", "==", "'GCNConv'", ":", "\n", "                    ", "norm_factor", "=", "self", ".", "norm_factor", "[", "n_id", "]", "\n", "x", "=", "x", "*", "norm_factor", "\n", "\n", "", "x_target", "=", "x", "[", ":", "size", "[", "1", "]", "]", "\n", "x", "=", "self", ".", "embedding", "[", "i", "]", "(", "(", "x", ",", "x_target", ")", ",", "edge_index", ")", "\n", "\n", "if", "self", ".", "type", "==", "'GCNConv'", ":", "\n", "                    ", "norm_factor", "=", "norm_factor", "[", ":", "size", "[", "1", "]", "]", "\n", "x", "=", "x", "*", "norm_factor", "\n", "\n", "", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "xs", ".", "append", "(", "x", ".", "cpu", "(", ")", ")", "\n", "\n", "pbar", ".", "update", "(", "batch_size", ")", "\n", "\n", "", "x_all", "=", "torch", ".", "cat", "(", "xs", ",", "dim", "=", "0", ")", "\n", "\n", "", "pbar", ".", "close", "(", ")", "\n", "\n", "# Classifier part:", "\n", "x", "=", "x_all", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "classifier", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "classifier", "[", "i", "]", "(", "x", ")", "\n", "\n", "if", "i", "!=", "len", "(", "self", ".", "classifier", ")", "-", "1", ":", "\n", "                ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "", "", "x_all", "=", "x", ".", "cpu", "(", ")", "\n", "\n", "return", "x_all", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.train": [[140, 177], ["model.train", "tqdm.tqdm", "tqdm.tqdm.set_description", "data.x.to", "data.y.to", "tqdm.tqdm.close", "optimizer.zero_grad", "rho_estimator.set_y", "rho_estimator.set_batch_size", "model", "rho_estimator.get_rho", "F.binary_cross_entropy_with_logits.backward", "optimizer.step", "float", "tqdm.tqdm.update", "len", "int", "isinstance", "adj.to", "torch.nll_loss", "torch.binary_cross_entropy_with_logits", "data.train_mask.sum"], "function", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.train", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho_estimator.RhoEstimator.set_y", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho_estimator.RhoEstimator.set_batch_size", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho_estimator.RhoEstimator.get_rho", "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.rho.ED.backward"], ["", "", "def", "train", "(", "model", ":", "GNN", ",", "rho_estimator", ":", "RhoEstimator", ",", "optimizer", ":", "torch", ".", "optim", ".", "Adam", ",", "data", ":", "Data", ",", "train_loader", ":", "NeighborSampler", ",", "epoch", ":", "int", ",", "device", ":", "torch", ".", "device", ")", "->", "float", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "int", "(", "data", ".", "train_mask", ".", "sum", "(", ")", ")", ")", "\n", "pbar", ".", "set_description", "(", "f'Epoch {epoch:02d}'", ")", "\n", "x", "=", "data", ".", "x", ".", "to", "(", "device", ")", "\n", "y", "=", "data", ".", "y", ".", "to", "(", "device", ")", "\n", "total_loss", "=", "0", "\n", "\n", "for", "batch_size", ",", "n_id", ",", "adjs", "in", "train_loader", ":", "\n", "        ", "if", "not", "isinstance", "(", "adjs", ",", "list", ")", ":", "\n", "            ", "adjs", "=", "[", "adjs", "]", "\n", "", "adjs", "=", "[", "adj", ".", "to", "(", "device", ")", "for", "adj", "in", "adjs", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "rho_estimator", ".", "set_y", "(", "y", "[", "n_id", "[", ":", "batch_size", "]", "]", ")", "\n", "rho_estimator", ".", "set_batch_size", "(", "batch_size", ")", "\n", "\n", "out", "=", "model", "(", "x", ",", "n_id", ",", "adjs", ")", "\n", "if", "model", ".", "task_type", "==", "'s'", ":", "\n", "            ", "loss", "=", "F", ".", "nll_loss", "(", "out", ",", "y", "[", "n_id", "[", ":", "batch_size", "]", "]", ")", "\n", "", "else", ":", "# (m)", "\n", "            ", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "out", ",", "y", "[", "n_id", "[", ":", "batch_size", "]", "]", ")", "\n", "\n", "", "rho", "=", "rho_estimator", ".", "get_rho", "(", ")", "\n", "loss", "=", "loss", "+", "rho", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "total_loss", "+=", "float", "(", "loss", ")", "\n", "pbar", ".", "update", "(", "batch_size", ")", "\n", "\n", "", "pbar", ".", "close", "(", ")", "\n", "\n", "loss", "=", "total_loss", "/", "len", "(", "train_loader", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.test": [[179, 201], ["torch.no_grad", "torch.no_grad", "model.eval", "model.inference", "y.cpu().unsqueeze", "model.inference.argmax", "y.cpu", "y.cpu", "sklearn.metrics.f1_score", "int", "int", "y_pred[].eq().sum", "mask.sum", "y_pred[].eq"], "function", ["home.repos.pwc.inspect_result.anonymous1252022_recoverability.regularization.train_gnn_reg.GNN.inference"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test", "(", "model", ":", "GNN", ",", "data", ":", "Data", ",", "subgraph_loader", ":", "NeighborSampler", ",", "device", ":", "torch", ".", "device", ")", "->", "List", "[", "float", "]", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "x", "=", "data", ".", "x", "\n", "y", "=", "data", ".", "y", "\n", "\n", "out", "=", "model", ".", "inference", "(", "x", ",", "subgraph_loader", ",", "device", ")", "\n", "\n", "results", "=", "[", "]", "\n", "if", "model", ".", "task_type", "==", "'s'", ":", "\n", "        ", "y_true", "=", "y", ".", "cpu", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "y_pred", "=", "out", ".", "argmax", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "for", "mask", "in", "[", "data", ".", "train_mask", ",", "data", ".", "val_mask", ",", "data", ".", "test_mask", "]", ":", "\n", "            ", "results", "+=", "[", "int", "(", "y_pred", "[", "mask", "]", ".", "eq", "(", "y_true", "[", "mask", "]", ")", ".", "sum", "(", ")", ")", "/", "int", "(", "mask", ".", "sum", "(", ")", ")", "]", "\n", "", "", "else", ":", "# (m)", "\n", "        ", "y_true", "=", "y", ".", "cpu", "(", ")", "\n", "y_pred", "=", "(", "out", ">", "0", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "for", "mask", "in", "[", "data", ".", "train_mask", ",", "data", ".", "val_mask", ",", "data", ".", "test_mask", "]", ":", "\n", "            ", "results", "+=", "[", "f1_score", "(", "y_true", "[", "mask", "]", ",", "y_pred", "[", "mask", "]", ",", "average", "=", "'micro'", ")", "]", "\n", "\n", "", "", "return", "results", "\n", "\n"]]}