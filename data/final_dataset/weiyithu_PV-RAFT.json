{"home.repos.pwc.inspect_result.weiyithu_PV-RAFT.None.train.parse_args": [[8, 72], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.None.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Training Argument'", ")", "\n", "parser", ".", "add_argument", "(", "'--root'", ",", "\n", "help", "=", "'workspace path'", ",", "\n", "default", "=", "''", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_path'", ",", "\n", "help", "=", "'specified experiment log path'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "\n", "help", "=", "\"choose dataset from 'FT3D' and 'KITTI'\"", ",", "\n", "default", "=", "'FT3D'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--max_points'", ",", "\n", "help", "=", "'maximum number of points sampled from a point cloud'", ",", "\n", "default", "=", "8192", ",", "\n", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--corr_levels'", ",", "\n", "help", "=", "'number of correlation pyramid levels'", ",", "\n", "default", "=", "3", ",", "\n", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--base_scales'", ",", "\n", "help", "=", "'voxelize base scale'", ",", "\n", "default", "=", "0.25", ",", "\n", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--truncate_k'", ",", "\n", "help", "=", "'value of truncate_k in corr block'", ",", "\n", "default", "=", "512", ",", "\n", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--iters'", ",", "\n", "help", "=", "'number of iterations in GRU module'", ",", "\n", "default", "=", "8", ",", "\n", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "\n", "help", "=", "'exponential weights'", ",", "\n", "default", "=", "0.8", ",", "\n", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "\n", "help", "=", "'number of samples in a mini-batch'", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--gpus'", ",", "\n", "help", "=", "'gpus that used for training'", ",", "\n", "default", "=", "'0'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--num_epochs'", ",", "\n", "help", "=", "'number of epochs for training'", ",", "\n", "default", "=", "20", ",", "\n", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--weights'", ",", "\n", "help", "=", "'checkpoint weights to be loaded'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_interval'", ",", "\n", "help", "=", "'save checkpoint every N epoch'", ",", "\n", "default", "=", "5", ",", "\n", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--refine'", ",", "\n", "help", "=", "'refine mode'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.None.train.main": [[74, 85], ["print", "range", "tools.engine_refine.RefineTrainer.val_test", "tools.engine.Trainer", "tools.engine_refine.RefineTrainer", "tools.engine_refine.RefineTrainer.training", "tools.engine_refine.RefineTrainer.val_test"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.engine_refine.RefineTrainer.val_test", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.engine_refine.RefineTrainer.training", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.engine_refine.RefineTrainer.val_test"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "print", "(", "args", ")", "\n", "if", "not", "args", ".", "refine", ":", "\n", "        ", "trainer", "=", "Trainer", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "trainer", "=", "RefineTrainer", "(", "args", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "trainer", ".", "begin_epoch", ",", "args", ".", "num_epochs", "+", "1", ")", ":", "\n", "        ", "trainer", ".", "training", "(", "epoch", ")", "\n", "trainer", ".", "val_test", "(", "epoch", ",", "mode", "=", "'val'", ")", "\n", "", "trainer", ".", "val_test", "(", "mode", "=", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.None.test.parse_args": [[20, 68], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.None.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Testing Argument'", ")", "\n", "parser", ".", "add_argument", "(", "'--root'", ",", "\n", "help", "=", "'workspace path'", ",", "\n", "default", "=", "''", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_path'", ",", "\n", "help", "=", "'specified experiment log path'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "\n", "help", "=", "\"choose dataset from 'FT3D' and 'KITTI'\"", ",", "\n", "default", "=", "'FT3D'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--max_points'", ",", "\n", "help", "=", "'maximum number of points sampled from a point cloud'", ",", "\n", "default", "=", "8192", ",", "\n", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--corr_levels'", ",", "\n", "help", "=", "'number of correlation pyramid levels'", ",", "\n", "default", "=", "3", ",", "\n", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--base_scales'", ",", "\n", "help", "=", "'voxelize base scale'", ",", "\n", "default", "=", "0.25", ",", "\n", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--truncate_k'", ",", "\n", "help", "=", "'value of truncate_k in corr block'", ",", "\n", "default", "=", "512", ",", "\n", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--iters'", ",", "\n", "help", "=", "'number of iterations in GRU module'", ",", "\n", "default", "=", "8", ",", "\n", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--gpus'", ",", "\n", "help", "=", "'gpus that used for training'", ",", "\n", "default", "=", "'0'", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--weights'", ",", "\n", "help", "=", "'checkpoint weights to be loaded'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--refine'", ",", "\n", "help", "=", "'refine mode'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.None.test.testing": [[70, 156], ["os.path.join", "logging.basicConfig", "warnings.filterwarnings", "logging.info", "torch.utils.data.DataLoader", "os.path.exists", "RSF_refine().to.eval", "tqdm.tqdm", "enumerate", "print", "logging.info", "os.path.join", "datasets.flyingthings3d_hplflownet.FT3D", "model.RAFTSceneFlow.RSF().to", "model.RAFTSceneFlowRefine.RSF_refine().to", "torch.load", "RSF_refine().to.load_state_dict", "print", "print", "logging.info", "logging.info", "RuntimeError", "batch_data.to.to", "loss_test.append", "epe_test.append", "outlier_test.append", "acc3dRelax_test.append", "acc3dStrict_test.append", "tqdm.tqdm.set_description", "os.path.join", "os.path.join", "datasets.kitti_hplflownet.Kitti", "torch.no_grad", "RSF_refine().to.", "tools.loss.sequence_loss", "tools.metric.compute_epe", "tools.loss.compute_loss", "tools.metric.compute_epe", "tools.loss.compute_loss.cpu", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "model.RAFTSceneFlow.RSF", "model.RAFTSceneFlowRefine.RSF_refine", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.Batch.to", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.Batch.to", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.Batch.to", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.loss.sequence_loss", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.metric.compute_epe", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.loss.compute_loss", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.metric.compute_epe"], ["", "def", "testing", "(", "args", ")", ":", "\n", "    ", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root", ",", "'experiments'", ",", "args", ".", "exp_path", ",", "'logs'", ")", "\n", "log_name", "=", "'TestAlone_'", "+", "args", ".", "dataset", "+", "'.log'", "\n", "logging", ".", "basicConfig", "(", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "log_name", ")", ",", "\n", "filemode", "=", "'w'", ",", "\n", "format", "=", "'%(asctime)s: %(levelname)s: [%(filename)s:%(lineno)d]: %(message)s'", ",", "\n", "level", "=", "logging", ".", "INFO", "\n", ")", "\n", "warnings", ".", "filterwarnings", "(", "'ignore'", ")", "\n", "logging", ".", "info", "(", "args", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'FT3D'", ":", "\n", "        ", "folder", "=", "'FlyingThings3D_subset_processed_35m'", "\n", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root", ",", "'data'", ",", "folder", ")", "\n", "test_dataset", "=", "FT3D", "(", "root_dir", "=", "dataset_path", ",", "nb_points", "=", "args", ".", "max_points", ",", "mode", "=", "'test'", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'KITTI'", ":", "\n", "        ", "folder", "=", "'kitti_processed'", "\n", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root", ",", "'data'", ",", "folder", ")", "\n", "test_dataset", "=", "Kitti", "(", "root_dir", "=", "dataset_path", ",", "nb_points", "=", "args", ".", "max_points", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "test_dataloader", "=", "DataLoader", "(", "test_dataset", ",", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "8", ",", "\n", "collate_fn", "=", "Batch", ",", "drop_last", "=", "False", ")", "\n", "\n", "if", "not", "args", ".", "refine", ":", "\n", "        ", "model", "=", "RSF", "(", "args", ")", ".", "to", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "RSF_refine", "(", "args", ")", ".", "to", "(", "'cuda'", ")", "\n", "", "weight_path", "=", "args", ".", "weights", "\n", "if", "os", ".", "path", ".", "exists", "(", "weight_path", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "weight_path", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "'Load checkpoint from {}'", ".", "format", "(", "weight_path", ")", ")", "\n", "print", "(", "'Checkpoint epoch {}'", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "logging", ".", "info", "(", "'Load checkpoint from {}'", ".", "format", "(", "weight_path", ")", ")", "\n", "logging", ".", "info", "(", "'Checkpoint epoch {}'", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"=> No checkpoint found at '{weight_path}\"", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "loss_test", "=", "[", "]", "\n", "epe_test", "=", "[", "]", "\n", "outlier_test", "=", "[", "]", "\n", "acc3dRelax_test", "=", "[", "]", "\n", "acc3dStrict_test", "=", "[", "]", "\n", "test_progress", "=", "tqdm", "(", "test_dataloader", ",", "ncols", "=", "150", ")", "\n", "for", "i", ",", "batch_data", "in", "enumerate", "(", "test_progress", ")", ":", "\n", "        ", "batch_data", "=", "batch_data", ".", "to", "(", "'cuda'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "est_flow", "=", "model", "(", "batch_data", "[", "'sequence'", "]", ",", "32", ")", "\n", "", "if", "not", "args", ".", "refine", ":", "\n", "            ", "loss", "=", "sequence_loss", "(", "est_flow", ",", "batch_data", ")", "\n", "epe", ",", "acc3d_strict", ",", "acc3d_relax", ",", "outlier", "=", "compute_epe", "(", "est_flow", "[", "-", "1", "]", ",", "batch_data", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "compute_loss", "(", "est_flow", ",", "batch_data", ")", "\n", "epe", ",", "acc3d_strict", ",", "acc3d_relax", ",", "outlier", "=", "compute_epe", "(", "est_flow", ",", "batch_data", ")", "\n", "\n", "", "loss_test", ".", "append", "(", "loss", ".", "cpu", "(", ")", ")", "\n", "epe_test", ".", "append", "(", "epe", ")", "\n", "outlier_test", ".", "append", "(", "outlier", ")", "\n", "acc3dRelax_test", ".", "append", "(", "acc3d_relax", ")", "\n", "acc3dStrict_test", ".", "append", "(", "acc3d_strict", ")", "\n", "\n", "test_progress", ".", "set_description", "(", "\n", "'Testing: Loss: {:.5f} EPE: {:.5f} Outlier: {:.5f} Acc3dRelax: {:.5f} Acc3dStrict: {:.5f}'", ".", "format", "(", "\n", "np", ".", "array", "(", "loss_test", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "epe_test", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "outlier_test", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dRelax_test", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dStrict_test", ")", ".", "mean", "(", ")", "\n", ")", "\n", ")", "\n", "\n", "", "print", "(", "'Test Result: EPE: {:.5f} Outlier: {:.5f} Acc3dRelax: {:.5f} Acc3dStrict: {:.5f}'", ".", "format", "(", "\n", "np", ".", "array", "(", "epe_test", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "outlier_test", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dRelax_test", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dStrict_test", ")", ".", "mean", "(", ")", "\n", ")", ")", "\n", "logging", ".", "info", "(", "\n", "'Test Result: EPE: {:.5f} Outlier: {:.5f} Acc3dRelax: {:.5f} Acc3dStrict: {:.5f}'", ".", "format", "(", "\n", "np", ".", "array", "(", "epe_test", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "outlier_test", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dRelax_test", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dStrict_test", ")", ".", "mean", "(", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.kitti_hplflownet.Kitti.__init__": [[7, 27], ["generic.SceneFlowDataset.__init__", "kitti_hplflownet.Kitti.make_dataset"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.flot.graph.Graph.__init__", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.kitti_hplflownet.Kitti.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "nb_points", ")", ":", "\n", "        ", "\"\"\"\n        Construct the KITTI scene flow datatset as in:\n        Gu, X., Wang, Y., Wu, C., Lee, Y.J., Wang, P., HPLFlowNet: Hierarchical\n        Permutohedral Lattice FlowNet for scene \ufb02ow estimation on large-scale\n        point clouds. IEEE Conf. Computer Vision and Pattern Recognition\n        (CVPR). pp. 3254\u20133263 (2019)\n\n        Parameters\n        ----------\n        root_dir : str\n            Path to root directory containing the datasets.\n        nb_points : int\n            Maximum number of points in point clouds.\n\n        \"\"\"", "\n", "\n", "super", "(", "Kitti", ",", "self", ")", ".", "__init__", "(", "nb_points", ")", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "paths", "=", "self", ".", "make_dataset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.kitti_hplflownet.Kitti.__len__": [[28, 30], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.kitti_hplflownet.Kitti.make_dataset": [[31, 53], ["os.path.realpath", "sorted", "os.path.join", "os.path.expanduser", "os.walk", "len", "os.path.dirname", "open", "fd.readlines", "line.strip", "len", "int", "os.path.split"], "methods", ["None"], ["", "def", "make_dataset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Find and filter out paths to all examples in the dataset.\n\n        \"\"\"", "\n", "\n", "#", "\n", "root", "=", "os", ".", "path", ".", "realpath", "(", "os", ".", "path", ".", "expanduser", "(", "self", ".", "root_dir", ")", ")", "\n", "all_paths", "=", "sorted", "(", "os", ".", "walk", "(", "root", ")", ")", "\n", "useful_paths", "=", "[", "item", "[", "0", "]", "for", "item", "in", "all_paths", "if", "len", "(", "item", "[", "1", "]", ")", "==", "0", "]", "\n", "assert", "len", "(", "useful_paths", ")", "==", "200", ",", "\"Problem with size of kitti dataset\"", "\n", "\n", "# Mapping / Filtering of scans as in HPLFlowNet code", "\n", "mapping_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"KITTI_mapping.txt\"", ")", "\n", "with", "open", "(", "mapping_path", ")", "as", "fd", ":", "\n", "            ", "lines", "=", "fd", ".", "readlines", "(", ")", "\n", "lines", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "lines", "]", "\n", "", "useful_paths", "=", "[", "\n", "path", "for", "path", "in", "useful_paths", "if", "lines", "[", "int", "(", "os", ".", "path", ".", "split", "(", "path", ")", "[", "-", "1", "]", ")", "]", "!=", "\"\"", "\n", "]", "\n", "\n", "return", "useful_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.kitti_hplflownet.Kitti.load_sequence": [[54, 96], ["sequence.append", "numpy.logical_and", "numpy.logical_not", "numpy.logical_and", "numpy.load", "numpy.load", "numpy.ones_like", "os.path.join", "os.path.join", "range", "range"], "methods", ["None"], ["", "def", "load_sequence", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Load a sequence of point clouds.\n\n        Parameters\n        ----------\n        idx : int\n            Index of the sequence to load.\n\n        Returns\n        -------\n        sequence : list(np.array, np.array)\n            List [pc1, pc2] of point clouds between which to estimate scene\n            flow. pc1 has size n x 3 and pc2 has size m x 3.\n\n        ground_truth : list(np.array, np.array)\n            List [mask, flow]. mask has size n x 1 and pc1 has size n x 3.\n            flow is the ground truth scene flow between pc1 and pc2. mask is\n            binary with zeros indicating where the flow is not valid/occluded.\n\n        \"\"\"", "\n", "\n", "# Load data", "\n", "sequence", "=", "[", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "paths", "[", "idx", "]", ",", "\"pc1.npy\"", ")", ")", "]", "\n", "sequence", ".", "append", "(", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "paths", "[", "idx", "]", ",", "\"pc2.npy\"", ")", ")", ")", "\n", "\n", "# Remove ground points", "\n", "is_ground", "=", "np", ".", "logical_and", "(", "sequence", "[", "0", "]", "[", ":", ",", "1", "]", "<", "-", "1.4", ",", "sequence", "[", "1", "]", "[", ":", ",", "1", "]", "<", "-", "1.4", ")", "\n", "not_ground", "=", "np", ".", "logical_not", "(", "is_ground", ")", "\n", "sequence", "=", "[", "sequence", "[", "i", "]", "[", "not_ground", "]", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "\n", "# Remove points further than 35 meter away as in HPLFlowNet code", "\n", "is_close", "=", "np", ".", "logical_and", "(", "sequence", "[", "0", "]", "[", ":", ",", "2", "]", "<", "35", ",", "sequence", "[", "1", "]", "[", ":", ",", "2", "]", "<", "35", ")", "\n", "sequence", "=", "[", "sequence", "[", "i", "]", "[", "is_close", "]", "for", "i", "in", "range", "(", "2", ")", "]", "\n", "\n", "# Scene flow", "\n", "ground_truth", "=", "[", "\n", "np", ".", "ones_like", "(", "sequence", "[", "0", "]", "[", ":", ",", "0", ":", "1", "]", ")", ",", "\n", "sequence", "[", "1", "]", "-", "sequence", "[", "0", "]", ",", "\n", "]", "# [Occlusion mask, scene flow]", "\n", "\n", "return", "sequence", ",", "ground_truth", "\n", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.Batch.__init__": [[7, 28], ["len", "range", "range", "generic.Batch.data[].append", "tmp.append", "torch.cat"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        Concatenate list of dataset.generic.SceneFlowDataset's item in batch\n        dimension.\n\n        Parameters\n        ----------\n        batch : list\n            list of dataset.generic.SceneFlowDataset's item.\n\n        \"\"\"", "\n", "\n", "self", ".", "data", "=", "{", "}", "\n", "batch_size", "=", "len", "(", "batch", ")", "\n", "for", "key", "in", "[", "\"sequence\"", ",", "\"ground_truth\"", "]", ":", "\n", "            ", "self", ".", "data", "[", "key", "]", "=", "[", "]", "\n", "for", "ind_seq", "in", "range", "(", "2", ")", ":", "\n", "                ", "tmp", "=", "[", "]", "\n", "for", "ind_batch", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "tmp", ".", "append", "(", "batch", "[", "ind_batch", "]", "[", "key", "]", "[", "ind_seq", "]", ")", "\n", "", "self", ".", "data", "[", "key", "]", ".", "append", "(", "torch", ".", "cat", "(", "tmp", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.Batch.__getitem__": [[29, 53], ["None"], "methods", ["None"], ["", "", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"\n        Get 'sequence' or 'ground_thruth' from the batch.\n\n        Parameters\n        ----------\n        item : str\n            Accept two keys 'sequence' or 'ground_truth'.\n\n        Returns\n        -------\n        list(torch.Tensor, torch.Tensor)\n            item='sequence': returns a list [pc1, pc2] of point clouds between\n            which to estimate scene flow. pc1 has size B x n x 3 and pc2 has\n            size B x m x 3.\n\n            item='ground_truth': returns a list [mask, flow]. mask has size\n            B x n x 1 and flow has size B x n x 3. flow is the ground truth\n            scene flow between pc1 and pc2. flow is the ground truth scene\n            flow. mask is binary with zeros indicating where the flow is not\n            valid or occluded.\n\n        \"\"\"", "\n", "return", "self", ".", "data", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.Batch.to": [[54, 60], ["generic.Batch.data.keys", "d.to"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.Batch.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "for", "key", "in", "self", ".", "data", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "data", "[", "key", "]", "=", "[", "d", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "for", "d", "in", "self", ".", "data", "[", "key", "]", "]", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.Batch.pin_memory": [[61, 67], ["generic.Batch.data.keys", "d.pin_memory"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.Batch.pin_memory"], ["", "def", "pin_memory", "(", "self", ")", ":", "\n", "\n", "        ", "for", "key", "in", "self", ".", "data", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "data", "[", "key", "]", "=", "[", "d", ".", "pin_memory", "(", ")", "for", "d", "in", "self", ".", "data", "[", "key", "]", "]", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.SceneFlowDataset.__init__": [[70, 94], ["torch.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.flot.graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nb_points", ")", ":", "\n", "        ", "\"\"\"\n        Abstract constructor for scene flow datasets.\n\n        Each item of the dataset is returned in a dictionary with two keys:\n            (key = 'sequence', value=list(torch.Tensor, torch.Tensor)):\n            list [pc1, pc2] of point clouds between which to estimate scene\n            flow. pc1 has size 1 x n x 3 and pc2 has size 1 x m x 3.\n\n            (key = 'ground_truth', value = list(torch.Tensor, torch.Tensor)):\n            list [mask, flow]. mask has size 1 x n x 1 and pc1 has size\n            1 x n x 3. flow is the ground truth scene flow between pc1 and pc2.\n            mask is binary with zeros indicating where the flow is not\n            valid/occluded.\n\n        Parameters\n        ----------\n        nb_points : int\n            Maximum number of points in point clouds: m, n <= self.nb_points.\n\n        \"\"\"", "\n", "\n", "super", "(", "SceneFlowDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nb_points", "=", "nb_points", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.SceneFlowDataset.__getitem__": [[95, 111], ["generic.SceneFlowDataset.to_torch", "generic.SceneFlowDataset.subsample_points", "generic.SceneFlowDataset.to_torch", "generic.SceneFlowDataset.load_sequence", "generic.SceneFlowDataset.subsample_points", "generic.SceneFlowDataset.load_sequence"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.SceneFlowDataset.to_torch", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.SceneFlowDataset.subsample_points", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.SceneFlowDataset.to_torch", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.flyingthings3d_hplflownet.FT3D.load_sequence", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.SceneFlowDataset.subsample_points", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.flyingthings3d_hplflownet.FT3D.load_sequence"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sequence", ",", "ground_truth", "=", "self", ".", "to_torch", "(", "\n", "*", "self", ".", "subsample_points", "(", "*", "self", ".", "load_sequence", "(", "idx", ")", ")", "\n", ")", "\n", "data", "=", "{", "\"sequence\"", ":", "sequence", ",", "\"ground_truth\"", ":", "ground_truth", "}", "\n", "\n", "if", "data", "[", "'sequence'", "]", "[", "0", "]", ".", "shape", "[", "1", "]", "!=", "self", ".", "nb_points", "or", "data", "[", "'sequence'", "]", "[", "1", "]", ".", "shape", "[", "1", "]", "!=", "self", ".", "nb_points", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "idx", "=", "idx", "+", "1", "\n", "sequence", ",", "ground_truth", "=", "self", ".", "to_torch", "(", "\n", "*", "self", ".", "subsample_points", "(", "*", "self", ".", "load_sequence", "(", "idx", ")", ")", "\n", ")", "\n", "data", "=", "{", "\"sequence\"", ":", "sequence", ",", "\"ground_truth\"", ":", "ground_truth", "}", "\n", "if", "data", "[", "'sequence'", "]", "[", "0", "]", ".", "shape", "[", "1", "]", "==", "self", ".", "nb_points", "and", "data", "[", "'sequence'", "]", "[", "1", "]", ".", "shape", "[", "1", "]", "==", "self", ".", "nb_points", ":", "\n", "                    ", "break", "\n", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.SceneFlowDataset.to_torch": [[112, 147], ["torch.unsqueeze().float", "torch.unsqueeze().float", "torch.unsqueeze", "torch.unsqueeze", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "to_torch", "(", "self", ",", "sequence", ",", "ground_truth", ")", ":", "\n", "        ", "\"\"\"\n        Convert numpy array and torch.Tensor.\n\n        Parameters\n        ----------\n        sequence : list(np.array, np.array)\n            List [pc1, pc2] of point clouds between which to estimate scene\n            flow. pc1 has size n x 3 and pc2 has size m x 3.\n\n        ground_truth : list(np.array, np.array)\n            List [mask, flow]. mask has size n x 1 and pc1 has size n x 3.\n            flow is the ground truth scene flow between pc1 and pc2. mask is\n            binary with zeros indicating where the flow is not valid/occluded.\n\n        Returns\n        -------\n        sequence : list(torch.Tensor, torch.Tensor)\n            List [pc1, pc2] of point clouds between which to estimate scene\n            flow. pc1 has size 1 x n x 3 and pc2 has size 1 x m x 3.\n\n        ground_truth : list(torch.Tensor, torch.Tensor)\n            List [mask, flow]. mask has size 1 x n x 1 and pc1 has size\n            1 x n x 3. flow is the ground truth scene flow between pc1 and pc2.\n            mask is binary with zeros indicating where the flow is not\n            valid/occluded.\n\n        \"\"\"", "\n", "\n", "sequence", "=", "[", "torch", ".", "unsqueeze", "(", "torch", ".", "from_numpy", "(", "s", ")", ",", "0", ")", ".", "float", "(", ")", "for", "s", "in", "sequence", "]", "\n", "ground_truth", "=", "[", "\n", "torch", ".", "unsqueeze", "(", "torch", ".", "from_numpy", "(", "gt", ")", ",", "0", ")", ".", "float", "(", ")", "for", "gt", "in", "ground_truth", "\n", "]", "\n", "\n", "return", "sequence", ",", "ground_truth", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.SceneFlowDataset.subsample_points": [[148, 192], ["numpy.random.permutation", "numpy.random.permutation"], "methods", ["None"], ["", "def", "subsample_points", "(", "self", ",", "sequence", ",", "ground_truth", ")", ":", "\n", "        ", "\"\"\"\n        Subsample point clouds randomly.\n\n        Parameters\n        ----------\n        sequence : list(np.array, np.array)\n            List [pc1, pc2] of point clouds between which to estimate scene\n            flow. pc1 has size 1 x N x 3 and pc2 has size 1 x M x 3.\n\n        ground_truth : list(np.array, np.array)\n            List [mask, flow]. mask has size 1 x N x 1 and pc1 has size\n            1 x N x 3. flow is the ground truth scene flow between pc1 and pc2.\n            mask is binary with zeros indicating where the flow is not\n            valid/occluded.\n\n        Returns\n        -------\n        sequence : list(np.array, np.array)\n            List [pc1, pc2] of point clouds between which to estimate scene\n            flow. pc1 has size 1 x n x 3 and pc2 has size 1 x m x 3. The n\n            points are chosen randomly among the N available ones. The m points\n            are chosen randomly among the M available ones. If N, M >=\n            self.nb_point then n, m = self.nb_points. If N, M <\n            self.nb_point then n, m = N, M.\n\n        ground_truth : list(np.array, np.array)\n            List [mask, flow]. mask has size 1 x n x 1 and pc1 has size\n            1 x n x 3. flow is the ground truth scene flow between pc1 and pc2.\n            mask is binary with zeros indicating where the flow is not\n            valid/occluded.\n\n        \"\"\"", "\n", "\n", "# Choose points in first scan", "\n", "ind1", "=", "np", ".", "random", ".", "permutation", "(", "sequence", "[", "0", "]", ".", "shape", "[", "0", "]", ")", "[", ":", "self", ".", "nb_points", "]", "\n", "sequence", "[", "0", "]", "=", "sequence", "[", "0", "]", "[", "ind1", "]", "\n", "ground_truth", "=", "[", "g", "[", "ind1", "]", "for", "g", "in", "ground_truth", "]", "\n", "\n", "# Choose point in second scan", "\n", "ind2", "=", "np", ".", "random", ".", "permutation", "(", "sequence", "[", "1", "]", ".", "shape", "[", "0", "]", ")", "[", ":", "self", ".", "nb_points", "]", "\n", "sequence", "[", "1", "]", "=", "sequence", "[", "1", "]", "[", "ind2", "]", "\n", "\n", "return", "sequence", ",", "ground_truth", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.SceneFlowDataset.load_sequence": [[193, 216], ["None"], "methods", ["None"], ["", "def", "load_sequence", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Abstract function to be implemented to load a sequence of point clouds.\n\n        Parameters\n        ----------\n        idx : int\n            Index of the sequence to load.\n\n        Must return:\n        -------\n        sequence : list(np.array, np.array)\n            List [pc1, pc2] of point clouds between which to estimate scene\n            flow. pc1 has size N x 3 and pc2 has size M x 3.\n\n        ground_truth : list(np.array, np.array)\n            List [mask, flow]. mask has size N x 1 and pc1 has size N x 3.\n            flow is the ground truth scene flow between pc1 and pc2. mask is\n            binary with zeros indicating where the flow is not valid/occluded.\n\n        \"\"\"", "\n", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.flyingthings3d_hplflownet.FT3D.__init__": [[8, 36], ["generic.SceneFlowDataset.__init__", "flyingthings3d_hplflownet.FT3D.get_file_list"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.flot.graph.Graph.__init__", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.flyingthings3d_hplflownet.FT3D.get_file_list"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "nb_points", ",", "mode", ")", ":", "\n", "        ", "\"\"\"\n        Construct the FlyingThing3D datatset as in:\n        Gu, X., Wang, Y., Wu, C., Lee, Y.J., Wang, P., HPLFlowNet: Hierarchical\n        Permutohedral Lattice FlowNet for scene \ufb02ow estimation on large-scale\n        point clouds. IEEE Conf. Computer Vision and Pattern Recognition\n        (CVPR). pp. 3254\u20133263 (2019)\n\n        Parameters\n        ----------\n        root_dir : str\n            Path to root directory containing the datasets.\n        nb_points : int\n            Maximum number of points in point clouds.\n        mode : str\n            'train': training dataset.\n\n            'val': validation dataset.\n\n            'test': test dataset\n\n        \"\"\"", "\n", "\n", "super", "(", "FT3D", ",", "self", ")", ".", "__init__", "(", "nb_points", ")", "\n", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "filenames", "=", "self", ".", "get_file_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.flyingthings3d_hplflownet.FT3D.__len__": [[37, 40], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.flyingthings3d_hplflownet.FT3D.get_file_list": [[41, 74], ["glob.glob", "list", "os.path.join", "set", "set", "numpy.sort", "ValueError", "len", "numpy.linspace().astype", "numpy.arange().astype", "len", "len", "ind_train.intersection", "numpy.linspace", "numpy.arange", "list", "str", "list"], "methods", ["None"], ["", "def", "get_file_list", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Find and filter out paths to all examples in the dataset.\n\n        \"\"\"", "\n", "\n", "# Get list of filenames / directories", "\n", "if", "self", ".", "mode", "==", "\"train\"", "or", "self", ".", "mode", "==", "\"val\"", ":", "\n", "            ", "pattern", "=", "\"train/0*\"", "\n", "", "elif", "self", ".", "mode", "==", "\"test\"", ":", "\n", "            ", "pattern", "=", "\"val/0*\"", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Mode \"", "+", "str", "(", "self", ".", "mode", ")", "+", "\" unknown.\"", ")", "\n", "", "filenames", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "pattern", ")", ")", "\n", "\n", "# Train / val / test split", "\n", "if", "self", ".", "mode", "==", "\"train\"", "or", "self", ".", "mode", "==", "\"val\"", ":", "\n", "            ", "assert", "len", "(", "filenames", ")", "==", "19640", ",", "\"Problem with size of training set\"", "\n", "ind_val", "=", "set", "(", "np", ".", "linspace", "(", "0", ",", "19639", ",", "2000", ")", ".", "astype", "(", "\"int\"", ")", ")", "\n", "ind_all", "=", "set", "(", "np", ".", "arange", "(", "19640", ")", ".", "astype", "(", "\"int\"", ")", ")", "\n", "ind_train", "=", "ind_all", "-", "ind_val", "\n", "assert", "(", "\n", "len", "(", "ind_train", ".", "intersection", "(", "ind_val", ")", ")", "==", "0", "\n", ")", ",", "\"Train / Val not split properly\"", "\n", "filenames", "=", "np", ".", "sort", "(", "filenames", ")", "\n", "if", "self", ".", "mode", "==", "\"train\"", ":", "\n", "                ", "filenames", "=", "filenames", "[", "list", "(", "ind_train", ")", "]", "\n", "", "elif", "self", ".", "mode", "==", "\"val\"", ":", "\n", "                ", "filenames", "=", "filenames", "[", "list", "(", "ind_val", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "assert", "len", "(", "filenames", ")", "==", "3824", ",", "\"Problem with size of test set\"", "\n", "\n", "", "return", "list", "(", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.flyingthings3d_hplflownet.FT3D.load_sequence": [[75, 110], ["numpy.load", "sequence.append", "numpy.ones_like", "os.path.join"], "methods", ["None"], ["", "def", "load_sequence", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Load a sequence of point clouds.\n\n        Parameters\n        ----------\n        idx : int\n            Index of the sequence to load.\n\n        Returns\n        -------\n        sequence : list(np.array, np.array)\n            List [pc1, pc2] of point clouds between which to estimate scene\n            flow. pc1 has size n x 3 and pc2 has size m x 3.\n\n        ground_truth : list(np.array, np.array)\n            List [mask, flow]. mask has size n x 1 and pc1 has size n x 3.\n            flow is the ground truth scene flow between pc1 and pc2. mask is\n            binary with zeros indicating where the flow is not valid/occluded.\n\n        \"\"\"", "\n", "\n", "# Load data", "\n", "sequence", "=", "[", "]", "# [Point cloud 1, Point cloud 2]", "\n", "for", "fname", "in", "[", "\"pc1.npy\"", ",", "\"pc2.npy\"", "]", ":", "\n", "            ", "pc", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "filenames", "[", "idx", "]", ",", "fname", ")", ")", "\n", "pc", "[", "...", ",", "0", "]", "*=", "-", "1", "\n", "pc", "[", "...", ",", "-", "1", "]", "*=", "-", "1", "\n", "sequence", ".", "append", "(", "pc", ")", "\n", "", "ground_truth", "=", "[", "\n", "np", ".", "ones_like", "(", "sequence", "[", "0", "]", "[", ":", ",", "0", ":", "1", "]", ")", ",", "\n", "sequence", "[", "1", "]", "-", "sequence", "[", "0", "]", ",", "\n", "]", "# [Occlusion mask, flow]", "\n", "\n", "return", "sequence", ",", "ground_truth", "\n", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.engine.Trainer.__init__": [[24, 71], ["engine.Trainer._log_init", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model.RAFTSceneFlow.RSF.RAFTSceneFlow.RSF", "model.RAFTSceneFlow.RSF.RAFTSceneFlow.RSF.to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "engine.Trainer._load_weights", "os.path.join", "datasets.flyingthings3d_hplflownet.FT3D", "datasets.flyingthings3d_hplflownet.FT3D", "datasets.flyingthings3d_hplflownet.FT3D", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "list", "engine.Trainer.model.parameters", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "torch.DataParallel", "range", "range", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "engine.Trainer.lr_scheduler.step", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "len"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.engine_refine.RefineTrainer._log_init", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.Batch.to", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.engine_refine.RefineTrainer._load_weights"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "mode", "=", "'Train'", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "root", "=", "args", ".", "root", "\n", "self", ".", "exp_path", "=", "args", ".", "exp_path", "\n", "self", ".", "dataset", "=", "args", ".", "dataset", "\n", "self", ".", "log_dir", "=", "None", "\n", "self", ".", "summary_writer", "=", "None", "\n", "\n", "self", ".", "_log_init", "(", "mode", ")", "\n", "\n", "if", "self", ".", "dataset", "==", "'FT3D'", ":", "\n", "            ", "folder", "=", "'FlyingThings3D_subset_processed_35m'", "\n", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'data'", ",", "folder", ")", "\n", "self", ".", "train_dataset", "=", "FT3D", "(", "root_dir", "=", "dataset_path", ",", "nb_points", "=", "args", ".", "max_points", ",", "mode", "=", "'train'", ")", "\n", "self", ".", "val_dataset", "=", "FT3D", "(", "root_dir", "=", "dataset_path", ",", "nb_points", "=", "args", ".", "max_points", ",", "mode", "=", "'val'", ")", "\n", "self", ".", "test_dataset", "=", "FT3D", "(", "root_dir", "=", "dataset_path", ",", "nb_points", "=", "args", ".", "max_points", ",", "mode", "=", "'test'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "train_dataloader", "=", "DataLoader", "(", "self", ".", "train_dataset", ",", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "8", ",", "collate_fn", "=", "Batch", ",", "drop_last", "=", "True", ")", "\n", "self", ".", "val_dataloader", "=", "DataLoader", "(", "self", ".", "val_dataset", ",", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "8", ",", "\n", "collate_fn", "=", "Batch", ",", "drop_last", "=", "False", ")", "\n", "self", ".", "test_dataloader", "=", "DataLoader", "(", "self", ".", "test_dataset", ",", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "8", ",", "\n", "collate_fn", "=", "Batch", ",", "drop_last", "=", "False", ")", "\n", "\n", "model", "=", "RSF", "(", "args", ")", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "self", ".", "device", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "[", "'cuda'", "]", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "[", "'cpu'", "]", "\n", "", "self", ".", "model", "=", "model", ".", "to", "(", "self", ".", "device", "[", "0", "]", ")", "\n", "\n", "self", ".", "optimizer", "=", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", "\n", "self", ".", "lr_scheduler", "=", "CosineAnnealingLR", "(", "self", ".", "optimizer", ",", "T_max", "=", "args", ".", "num_epochs", "*", "len", "(", "self", ".", "train_dataset", ")", ")", "\n", "\n", "self", ".", "begin_epoch", "=", "1", "\n", "self", ".", "_load_weights", "(", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "DataParallel", "(", "self", ".", "model", ",", "device_ids", "=", "self", ".", "device", ")", "\n", "\n", "", "if", "self", ".", "begin_epoch", ">", "0", ":", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "begin_epoch", ")", ":", "\n", "                ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "self", ".", "best_val_epe", "=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.engine.Trainer._log_init": [[72, 99], ["os.path.join", "os.path.join", "logging.basicConfig", "warnings.filterwarnings", "os.path.join", "logging.info", "logging.info", "datetime.datetime.datetime.now().strftime", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.join", "datetime.datetime.datetime.now"], "methods", ["None"], ["", "def", "_log_init", "(", "self", ",", "mode", "=", "'Train'", ")", ":", "\n", "        ", "if", "self", ".", "exp_path", "is", "None", ":", "\n", "            ", "self", ".", "exp_path", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"exp-%y_%m_%d-%H_%M_%S_%f\"", ")", "\n", "self", ".", "args", ".", "exp_path", "=", "self", ".", "exp_path", "\n", "", "self", ".", "exp_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'experiments'", ",", "self", ".", "exp_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "exp_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "exp_path", ")", "\n", "\n", "", "log_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "exp_path", ",", "'logs'", ")", "\n", "self", ".", "log_dir", "=", "log_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "log_dir", ")", "\n", "", "log_name", "=", "mode", "+", "'_'", "+", "self", ".", "dataset", "+", "'.log'", "\n", "logging", ".", "basicConfig", "(", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "log_name", ")", ",", "\n", "filemode", "=", "'w'", ",", "\n", "format", "=", "'%(asctime)s: %(levelname)s: [%(filename)s:%(lineno)d]: %(message)s'", ",", "\n", "level", "=", "logging", ".", "INFO", "\n", ")", "\n", "warnings", ".", "filterwarnings", "(", "'ignore'", ")", "\n", "\n", "ckpt_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "exp_path", ",", "'checkpoints'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "ckpt_dir", ")", "\n", "\n", "", "logging", ".", "info", "(", "self", ".", "args", ")", "\n", "logging", ".", "info", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.engine.Trainer._load_weights": [[100, 121], ["os.path.exists", "os.path.join", "os.path.exists", "torch.load", "torch.load", "torch.load", "torch.load", "engine.Trainer.model.load_state_dict", "print", "RuntimeError", "torch.load", "torch.load", "torch.load", "torch.load", "print", "RuntimeError", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "engine.Trainer.model.module.load_state_dict", "engine.Trainer.model.load_state_dict"], "methods", ["None"], ["", "def", "_load_weights", "(", "self", ",", "test_best", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "weights", "is", "not", "None", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "args", ".", "weights", ")", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "args", ".", "weights", ")", "\n", "self", ".", "begin_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "\"Load checkpoint from {}\"", ".", "format", "(", "weight_path", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"=> No checkpoint found at '{self.args.weights}\"", ")", "\n", "", "", "if", "test_best", ":", "\n", "            ", "weight_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'experiments'", ",", "self", ".", "args", ".", "exp_path", ",", "'checkpoints'", ",", "\n", "'best_checkpoint.params'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "weight_path", ")", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "weight_path", ")", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "                    ", "self", ".", "model", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "print", "(", "\"Load checkpoint from {}\"", ".", "format", "(", "weight_path", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"=> No checkpoint found at '{weight_path}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.engine.Trainer.training": [[122, 174], ["engine.Trainer.model.train", "tqdm.tqdm.tqdm", "enumerate", "engine.Trainer.lr_scheduler.step", "tools.utils.save_checkpoint", "logging.info", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "batch_data.to.to.to", "engine.Trainer.optimizer.zero_grad", "engine.Trainer.model", "tools.loss.sequence_loss", "tools.loss.sequence_loss.backward", "engine.Trainer.optimizer.step", "tools.metric.compute_epe_train", "loss_train.append", "epe_train.append", "engine.Trainer.summary_writer.add_scalar", "engine.Trainer.summary_writer.add_scalar", "tqdm.tqdm.tqdm.set_description", "tools.loss.sequence_loss.detach().cpu", "tools.metric.compute_epe_train.detach().cpu", "numpy.array().mean", "numpy.array().mean", "len", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "tools.loss.sequence_loss.detach", "tools.metric.compute_epe_train.detach", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.utils.save_checkpoint", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.Batch.to", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.loss.sequence_loss", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.metric.compute_epe_train"], ["", "", "", "def", "training", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "self", ".", "summary_writer", "is", "None", ":", "\n", "            ", "self", ".", "summary_writer", "=", "SummaryWriter", "(", "log_dir", "=", "self", ".", "log_dir", ",", "flush_secs", "=", "10", ")", "\n", "\n", "", "loss_train", "=", "[", "]", "\n", "epe_train", "=", "[", "]", "\n", "\n", "train_progress", "=", "tqdm", "(", "self", ".", "train_dataloader", ",", "ncols", "=", "150", ")", "\n", "for", "i", ",", "batch_data", "in", "enumerate", "(", "train_progress", ")", ":", "\n", "            ", "global_step", "=", "epoch", "*", "len", "(", "self", ".", "train_dataloader", ")", "+", "i", "\n", "batch_data", "=", "batch_data", ".", "to", "(", "self", ".", "device", "[", "0", "]", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "# with torch.autograd.profiler.profile(enabled=True, use_cuda=True) as prof:", "\n", "#     est_flow = self.model(batch_data[\"sequence\"], num_iters=self.args.iters)", "\n", "# print(prof.key_averages().table(sort_by=\"self_cuda_time_total\"))", "\n", "# exit(0)", "\n", "est_flow", "=", "self", ".", "model", "(", "batch_data", "[", "\"sequence\"", "]", ",", "num_iters", "=", "self", ".", "args", ".", "iters", ")", "\n", "loss", "=", "sequence_loss", "(", "est_flow", ",", "batch_data", ",", "gamma", "=", "self", ".", "args", ".", "gamma", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "epe", "=", "compute_epe_train", "(", "est_flow", "[", "-", "1", "]", ",", "batch_data", ")", "\n", "loss_train", ".", "append", "(", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "epe_train", ".", "append", "(", "epe", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\n", "tag", "=", "'Train/Loss'", ",", "\n", "scalar_value", "=", "np", ".", "array", "(", "loss_train", ")", ".", "mean", "(", ")", ",", "\n", "global_step", "=", "global_step", "\n", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\n", "tag", "=", "'Train/EPE'", ",", "\n", "scalar_value", "=", "np", ".", "array", "(", "epe_train", ")", ".", "mean", "(", ")", ",", "\n", "global_step", "=", "global_step", "\n", ")", "\n", "\n", "train_progress", ".", "set_description", "(", "\n", "'Train Epoch {}: Loss: {:.5f} EPE: {:.5f}'", ".", "format", "(", "\n", "epoch", ",", "\n", "np", ".", "array", "(", "loss_train", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "epe_train", ")", ".", "mean", "(", ")", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "save_checkpoint", "(", "self", ".", "model", ",", "self", ".", "args", ",", "epoch", ",", "'train'", ")", "\n", "logging", ".", "info", "(", "'Train Epoch {}: Loss: {:.5f} EPE: {:.5f}'", ".", "format", "(", "\n", "epoch", ",", "\n", "np", ".", "array", "(", "loss_train", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "epe_train", ")", ".", "mean", "(", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.engine.Trainer.val_test": [[176, 274], ["engine.Trainer.model.eval", "tqdm.tqdm.tqdm", "enumerate", "engine.Trainer._load_weights", "batch_data.to.to.to", "tools.loss.sequence_loss", "tools.metric.compute_epe", "loss_run.append", "epe_run.append", "outlier_run.append", "acc3dRelax_run.append", "acc3dStrict_run.append", "tqdm.tqdm.tqdm.set_description", "logging.info", "logging.info", "print", "logging.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "engine.Trainer.model", "tools.loss.sequence_loss.cpu", "engine.Trainer.summary_writer.add_scalar", "engine.Trainer.summary_writer.add_scalar", "engine.Trainer.summary_writer.add_scalar", "engine.Trainer.summary_writer.add_scalar", "engine.Trainer.summary_writer.add_scalar", "numpy.array().mean", "numpy.array().mean", "tools.utils.save_checkpoint", "len", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.engine_refine.RefineTrainer._load_weights", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.Batch.to", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.loss.sequence_loss", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.metric.compute_epe", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.utils.save_checkpoint"], ["", "def", "val_test", "(", "self", ",", "epoch", "=", "0", ",", "mode", "=", "'val'", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "loss_run", "=", "[", "]", "\n", "epe_run", "=", "[", "]", "\n", "outlier_run", "=", "[", "]", "\n", "acc3dRelax_run", "=", "[", "]", "\n", "acc3dStrict_run", "=", "[", "]", "\n", "\n", "if", "mode", "==", "'val'", ":", "\n", "            ", "run_dataloader", "=", "self", ".", "val_dataloader", "\n", "run_logstr", "=", "'Val'", "\n", "", "else", ":", "\n", "            ", "run_dataloader", "=", "self", ".", "test_dataloader", "\n", "run_logstr", "=", "'Test'", "\n", "self", ".", "_load_weights", "(", "test_best", "=", "True", ")", "\n", "", "run_progress", "=", "tqdm", "(", "run_dataloader", ",", "ncols", "=", "150", ")", "\n", "for", "i", ",", "batch_data", "in", "enumerate", "(", "run_progress", ")", ":", "\n", "            ", "global_step", "=", "epoch", "*", "len", "(", "run_dataloader", ")", "+", "i", "\n", "batch_data", "=", "batch_data", ".", "to", "(", "self", ".", "device", "[", "0", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "est_flow", "=", "self", ".", "model", "(", "batch_data", "[", "\"sequence\"", "]", ",", "32", ")", "\n", "\n", "", "loss", "=", "sequence_loss", "(", "est_flow", ",", "batch_data", ",", "gamma", "=", "self", ".", "args", ".", "gamma", ")", "\n", "epe", ",", "acc3d_strict", ",", "acc3d_relax", ",", "outlier", "=", "compute_epe", "(", "est_flow", "[", "-", "1", "]", ",", "batch_data", ")", "\n", "loss_run", ".", "append", "(", "loss", ".", "cpu", "(", ")", ")", "\n", "epe_run", ".", "append", "(", "epe", ")", "\n", "outlier_run", ".", "append", "(", "outlier", ")", "\n", "acc3dRelax_run", ".", "append", "(", "acc3d_relax", ")", "\n", "acc3dStrict_run", ".", "append", "(", "acc3d_strict", ")", "\n", "\n", "if", "mode", "==", "'val'", ":", "\n", "                ", "self", ".", "summary_writer", ".", "add_scalar", "(", "\n", "tag", "=", "'Val/Loss'", ",", "\n", "scalar_value", "=", "np", ".", "array", "(", "loss_run", ")", ".", "mean", "(", ")", ",", "\n", "global_step", "=", "global_step", "\n", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\n", "tag", "=", "'Val/EPE'", ",", "\n", "scalar_value", "=", "np", ".", "array", "(", "epe_run", ")", ".", "mean", "(", ")", ",", "\n", "global_step", "=", "global_step", "\n", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\n", "tag", "=", "'Val/Outlier'", ",", "\n", "scalar_value", "=", "np", ".", "array", "(", "outlier_run", ")", ".", "mean", "(", ")", ",", "\n", "global_step", "=", "global_step", "\n", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\n", "tag", "=", "'Val/Acc3dRelax'", ",", "\n", "scalar_value", "=", "np", ".", "array", "(", "acc3dRelax_run", ")", ".", "mean", "(", ")", ",", "\n", "global_step", "=", "global_step", "\n", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\n", "tag", "=", "'Val/Acc3dStrict'", ",", "\n", "scalar_value", "=", "np", ".", "array", "(", "acc3dStrict_run", ")", ".", "mean", "(", ")", ",", "\n", "global_step", "=", "global_step", "\n", ")", "\n", "\n", "", "run_progress", ".", "set_description", "(", "\n", "run_logstr", "+", "\n", "' Epoch {}: Loss: {:.5f} EPE: {:.5f} Outlier: {:.5f} Acc3dRelax: {:.5f} Acc3dStrict: {:.5f}'", ".", "format", "(", "\n", "epoch", ",", "\n", "np", ".", "array", "(", "loss_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "epe_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "outlier_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dRelax_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dStrict_run", ")", ".", "mean", "(", ")", "\n", ")", "\n", ")", "\n", "\n", "", "if", "mode", "==", "'val'", ":", "\n", "            ", "if", "np", ".", "array", "(", "epe_run", ")", ".", "mean", "(", ")", "<", "self", ".", "best_val_epe", ":", "\n", "                ", "self", ".", "best_val_epe", "=", "np", ".", "array", "(", "epe_run", ")", ".", "mean", "(", ")", "\n", "save_checkpoint", "(", "self", ".", "model", ",", "self", ".", "args", ",", "epoch", ",", "'val'", ")", "\n", "", "logging", ".", "info", "(", "\n", "'Val Epoch {}: Loss: {:.5f} EPE: {:.5f} Outlier: {:.5f} Acc3dRelax: {:.5f} Acc3dStrict: {:.5f}'", ".", "format", "(", "\n", "epoch", ",", "\n", "np", ".", "array", "(", "loss_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "epe_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "outlier_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dRelax_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dStrict_run", ")", ".", "mean", "(", ")", "\n", ")", ")", "\n", "logging", ".", "info", "(", "'Best EPE: {:.5f}'", ".", "format", "(", "self", ".", "best_val_epe", ")", ")", "\n", "", "if", "mode", "==", "'test'", ":", "\n", "            ", "print", "(", "'Test Result: EPE: {:.5f} Outlier: {:.5f} Acc3dRelax: {:.5f} Acc3dStrict: {:.5f}'", ".", "format", "(", "\n", "np", ".", "array", "(", "epe_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "outlier_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dRelax_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dStrict_run", ")", ".", "mean", "(", ")", "\n", ")", ")", "\n", "logging", ".", "info", "(", "\n", "'Test Result: EPE: {:.5f} Outlier: {:.5f} Acc3dRelax: {:.5f} Acc3dStrict: {:.5f}'", ".", "format", "(", "\n", "np", ".", "array", "(", "epe_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "outlier_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dRelax_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dStrict_run", ")", ".", "mean", "(", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.loss.sequence_loss": [[4, 14], ["len", "range", "loss.compute_loss"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.loss.compute_loss"], ["def", "sequence_loss", "(", "est_flow", ",", "batch", ",", "gamma", "=", "0.8", ")", ":", "\n", "    ", "n_predictions", "=", "len", "(", "est_flow", ")", "\n", "flow_loss", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "n_predictions", ")", ":", "\n", "        ", "i_weight", "=", "gamma", "**", "(", "n_predictions", "-", "i", "-", "1", ")", "\n", "i_loss", "=", "compute_loss", "(", "est_flow", "[", "i", "]", ",", "batch", ")", "\n", "flow_loss", "+=", "i_weight", "*", "i_loss", "\n", "\n", "", "return", "flow_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.loss.compute_loss": [[16, 41], ["torch.mean", "torch.abs"], "function", ["None"], ["", "def", "compute_loss", "(", "est_flow", ",", "batch", ")", ":", "\n", "    ", "\"\"\"\n    Compute training loss.\n\n    Parameters\n    ----------\n    est_flow : torch.Tensor\n        Estimated flow.\n    batch : flot.datasets.generic.Batch\n        Contains ground truth flow and mask.\n\n    Returns\n    -------\n    loss : torch.Tensor\n        Training loss for current batch.\n\n    \"\"\"", "\n", "\n", "mask", "=", "batch", "[", "\"ground_truth\"", "]", "[", "0", "]", "[", "...", ",", "0", "]", "\n", "true_flow", "=", "batch", "[", "\"ground_truth\"", "]", "[", "1", "]", "\n", "error", "=", "est_flow", "-", "true_flow", "\n", "error", "=", "error", "[", "mask", ">", "0", "]", "\n", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "error", ")", ")", "\n", "\n", "return", "loss", "\n", "", ""]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.engine_refine.RefineTrainer.__init__": [[24, 76], ["engine_refine.RefineTrainer._log_init", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model.RAFTSceneFlowRefine.RSF_refine.RAFTSceneFlowRefine.RSF_refine", "model.RAFTSceneFlowRefine.RSF_refine.RAFTSceneFlowRefine.RSF_refine.to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "engine_refine.RefineTrainer._load_weights", "os.path.join", "datasets.flyingthings3d_hplflownet.FT3D", "datasets.flyingthings3d_hplflownet.FT3D", "datasets.flyingthings3d_hplflownet.FT3D", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "list", "filter", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "torch.DataParallel", "range", "range", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "engine_refine.RefineTrainer.model.parameters", "engine_refine.RefineTrainer.lr_scheduler.step", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "len"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.engine_refine.RefineTrainer._log_init", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.Batch.to", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.engine_refine.RefineTrainer._load_weights"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "mode", "=", "'Train'", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "root", "=", "args", ".", "root", "\n", "self", ".", "exp_path", "=", "args", ".", "exp_path", "\n", "self", ".", "dataset", "=", "args", ".", "dataset", "\n", "self", ".", "log_dir", "=", "None", "\n", "self", ".", "summary_writer", "=", "None", "\n", "\n", "self", ".", "_log_init", "(", "mode", ")", "\n", "\n", "if", "self", ".", "dataset", "==", "'FT3D'", ":", "\n", "            ", "folder", "=", "'FlyingThings3D_subset_processed_35m'", "\n", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'data'", ",", "folder", ")", "\n", "self", ".", "train_dataset", "=", "FT3D", "(", "root_dir", "=", "dataset_path", ",", "nb_points", "=", "args", ".", "max_points", ",", "mode", "=", "'train'", ")", "\n", "self", ".", "val_dataset", "=", "FT3D", "(", "root_dir", "=", "dataset_path", ",", "nb_points", "=", "args", ".", "max_points", ",", "mode", "=", "'val'", ")", "\n", "self", ".", "test_dataset", "=", "FT3D", "(", "root_dir", "=", "dataset_path", ",", "nb_points", "=", "args", ".", "max_points", ",", "mode", "=", "'test'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "train_dataloader", "=", "DataLoader", "(", "self", ".", "train_dataset", ",", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "8", ",", "collate_fn", "=", "Batch", ",", "drop_last", "=", "True", ")", "\n", "self", ".", "val_dataloader", "=", "DataLoader", "(", "self", ".", "val_dataset", ",", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "8", ",", "\n", "collate_fn", "=", "Batch", ",", "drop_last", "=", "False", ")", "\n", "self", ".", "test_dataloader", "=", "DataLoader", "(", "self", ".", "test_dataset", ",", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "8", ",", "\n", "collate_fn", "=", "Batch", ",", "drop_last", "=", "False", ")", "\n", "\n", "model", "=", "RSF_refine", "(", "args", ")", "\n", "model", ".", "feature_extractor", ".", "requires_grad", "=", "False", "\n", "model", ".", "context_extractor", ".", "requires_grad", "=", "False", "\n", "model", ".", "corr_block", ".", "requires_grad", "=", "False", "\n", "model", ".", "update_block", ".", "requires_grad", "=", "False", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "self", ".", "device", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "[", "'cuda'", "]", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "[", "'cpu'", "]", "\n", "", "self", ".", "model", "=", "model", ".", "to", "(", "self", ".", "device", "[", "0", "]", ")", "\n", "\n", "self", ".", "optimizer", "=", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "1e-3", ")", "\n", "self", ".", "lr_scheduler", "=", "CosineAnnealingLR", "(", "self", ".", "optimizer", ",", "T_max", "=", "args", ".", "num_epochs", "*", "len", "(", "self", ".", "train_dataset", ")", ")", "\n", "\n", "self", ".", "begin_epoch", "=", "1", "\n", "self", ".", "_load_weights", "(", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "DataParallel", "(", "self", ".", "model", ",", "device_ids", "=", "self", ".", "device", ")", "\n", "\n", "", "if", "self", ".", "begin_epoch", ">", "0", ":", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "begin_epoch", ")", ":", "\n", "                ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "self", ".", "best_val_epe", "=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.engine_refine.RefineTrainer._log_init": [[77, 104], ["os.path.join", "os.path.join", "logging.basicConfig", "warnings.filterwarnings", "os.path.join", "logging.info", "logging.info", "datetime.datetime.datetime.now().strftime", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.join", "datetime.datetime.datetime.now"], "methods", ["None"], ["", "def", "_log_init", "(", "self", ",", "mode", "=", "'Train'", ")", ":", "\n", "        ", "if", "self", ".", "exp_path", "is", "None", ":", "\n", "            ", "self", ".", "exp_path", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"exp-%y_%m_%d-%H_%M_%S_%f\"", ")", "\n", "self", ".", "args", ".", "exp_path", "=", "self", ".", "exp_path", "\n", "", "self", ".", "exp_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'experiments'", ",", "self", ".", "exp_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "exp_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "exp_path", ")", "\n", "\n", "", "log_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "exp_path", ",", "'logs'", ")", "\n", "self", ".", "log_dir", "=", "log_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "log_dir", ")", "\n", "", "log_name", "=", "mode", "+", "'_'", "+", "self", ".", "dataset", "+", "'.log'", "\n", "logging", ".", "basicConfig", "(", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "log_name", ")", ",", "\n", "filemode", "=", "'w'", ",", "\n", "format", "=", "'%(asctime)s: %(levelname)s: [%(filename)s:%(lineno)d]: %(message)s'", ",", "\n", "level", "=", "logging", ".", "INFO", "\n", ")", "\n", "warnings", ".", "filterwarnings", "(", "'ignore'", ")", "\n", "\n", "ckpt_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "exp_path", ",", "'checkpoints'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "ckpt_dir", ")", "\n", "\n", "", "logging", ".", "info", "(", "self", ".", "args", ")", "\n", "logging", ".", "info", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.engine_refine.RefineTrainer._load_weights": [[105, 126], ["os.path.exists", "os.path.join", "os.path.exists", "torch.load", "torch.load", "torch.load", "torch.load", "engine_refine.RefineTrainer.model.load_state_dict", "print", "RuntimeError", "torch.load", "torch.load", "torch.load", "torch.load", "print", "RuntimeError", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "engine_refine.RefineTrainer.model.module.load_state_dict", "engine_refine.RefineTrainer.model.load_state_dict"], "methods", ["None"], ["", "def", "_load_weights", "(", "self", ",", "test_best", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "weights", "is", "not", "None", ":", "\n", "            ", "weight_path", "=", "self", ".", "args", ".", "weights", "\n", "if", "os", ".", "path", ".", "exists", "(", "weight_path", ")", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "weight_path", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"Load checkpoint from {}\"", ".", "format", "(", "weight_path", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"=> No checkpoint found at '{self.args.weights}\"", ")", "\n", "", "", "if", "test_best", ":", "\n", "            ", "weight_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'experiments'", ",", "self", ".", "args", ".", "exp_path", ",", "'checkpoints'", ",", "\n", "'best_checkpoint.params'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "weight_path", ")", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "weight_path", ")", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "                    ", "self", ".", "model", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "", "print", "(", "\"Load checkpoint from {}\"", ".", "format", "(", "weight_path", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"=> No checkpoint found at '{weight_path}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.engine_refine.RefineTrainer.training": [[127, 175], ["engine_refine.RefineTrainer.model.train", "tqdm.tqdm.tqdm", "enumerate", "engine_refine.RefineTrainer.lr_scheduler.step", "tools.utils.save_checkpoint", "logging.info", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "batch_data.to.to.to", "engine_refine.RefineTrainer.optimizer.zero_grad", "engine_refine.RefineTrainer.model", "tools.loss.compute_loss", "tools.loss.compute_loss.backward", "engine_refine.RefineTrainer.optimizer.step", "tools.metric.compute_epe_train", "loss_train.append", "epe_train.append", "engine_refine.RefineTrainer.summary_writer.add_scalar", "engine_refine.RefineTrainer.summary_writer.add_scalar", "tqdm.tqdm.tqdm.set_description", "tools.loss.compute_loss.detach().cpu", "tools.metric.compute_epe_train.detach().cpu", "numpy.array().mean", "numpy.array().mean", "len", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "tools.loss.compute_loss.detach", "tools.metric.compute_epe_train.detach", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.utils.save_checkpoint", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.Batch.to", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.loss.compute_loss", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.metric.compute_epe_train"], ["", "", "", "def", "training", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "self", ".", "summary_writer", "is", "None", ":", "\n", "            ", "self", ".", "summary_writer", "=", "SummaryWriter", "(", "log_dir", "=", "self", ".", "log_dir", ",", "flush_secs", "=", "10", ")", "\n", "\n", "", "loss_train", "=", "[", "]", "\n", "epe_train", "=", "[", "]", "\n", "\n", "train_progress", "=", "tqdm", "(", "self", ".", "train_dataloader", ",", "ncols", "=", "150", ")", "\n", "for", "i", ",", "batch_data", "in", "enumerate", "(", "train_progress", ")", ":", "\n", "            ", "global_step", "=", "epoch", "*", "len", "(", "self", ".", "train_dataloader", ")", "+", "i", "\n", "batch_data", "=", "batch_data", ".", "to", "(", "self", ".", "device", "[", "0", "]", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "est_flow", "=", "self", ".", "model", "(", "batch_data", "[", "\"sequence\"", "]", ",", "num_iters", "=", "self", ".", "args", ".", "iters", ")", "\n", "loss", "=", "compute_loss", "(", "est_flow", ",", "batch_data", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "epe", "=", "compute_epe_train", "(", "est_flow", ",", "batch_data", ")", "\n", "loss_train", ".", "append", "(", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "epe_train", ".", "append", "(", "epe", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\n", "tag", "=", "'Train/Loss'", ",", "\n", "scalar_value", "=", "np", ".", "array", "(", "loss_train", ")", ".", "mean", "(", ")", ",", "\n", "global_step", "=", "global_step", "\n", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\n", "tag", "=", "'Train/EPE'", ",", "\n", "scalar_value", "=", "np", ".", "array", "(", "epe_train", ")", ".", "mean", "(", ")", ",", "\n", "global_step", "=", "global_step", "\n", ")", "\n", "\n", "train_progress", ".", "set_description", "(", "\n", "'Train Epoch {}: Loss: {:.5f} EPE: {:.5f}'", ".", "format", "(", "\n", "epoch", ",", "\n", "np", ".", "array", "(", "loss_train", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "epe_train", ")", ".", "mean", "(", ")", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "save_checkpoint", "(", "self", ".", "model", ",", "self", ".", "args", ",", "epoch", ",", "'train'", ")", "\n", "logging", ".", "info", "(", "'Train Epoch {}: Loss: {:.5f} EPE: {:.5f}'", ".", "format", "(", "\n", "epoch", ",", "\n", "np", ".", "array", "(", "loss_train", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "epe_train", ")", ".", "mean", "(", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.engine_refine.RefineTrainer.val_test": [[177, 275], ["engine_refine.RefineTrainer.model.eval", "tqdm.tqdm.tqdm", "enumerate", "engine_refine.RefineTrainer._load_weights", "batch_data.to.to.to", "tools.loss.compute_loss", "tools.metric.compute_epe", "loss_run.append", "epe_run.append", "outlier_run.append", "acc3dRelax_run.append", "acc3dStrict_run.append", "tqdm.tqdm.tqdm.set_description", "logging.info", "logging.info", "print", "logging.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "engine_refine.RefineTrainer.model", "tools.loss.compute_loss.cpu", "engine_refine.RefineTrainer.summary_writer.add_scalar", "engine_refine.RefineTrainer.summary_writer.add_scalar", "engine_refine.RefineTrainer.summary_writer.add_scalar", "engine_refine.RefineTrainer.summary_writer.add_scalar", "engine_refine.RefineTrainer.summary_writer.add_scalar", "numpy.array().mean", "numpy.array().mean", "tools.utils.save_checkpoint", "len", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array().mean", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.engine_refine.RefineTrainer._load_weights", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.datasets.generic.Batch.to", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.loss.compute_loss", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.metric.compute_epe", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.utils.save_checkpoint"], ["", "def", "val_test", "(", "self", ",", "epoch", "=", "0", ",", "mode", "=", "'val'", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "loss_run", "=", "[", "]", "\n", "epe_run", "=", "[", "]", "\n", "outlier_run", "=", "[", "]", "\n", "acc3dRelax_run", "=", "[", "]", "\n", "acc3dStrict_run", "=", "[", "]", "\n", "\n", "if", "mode", "==", "'val'", ":", "\n", "            ", "run_dataloader", "=", "self", ".", "val_dataloader", "\n", "run_logstr", "=", "'Val'", "\n", "", "else", ":", "\n", "            ", "run_dataloader", "=", "self", ".", "test_dataloader", "\n", "run_logstr", "=", "'Test'", "\n", "self", ".", "_load_weights", "(", "test_best", "=", "True", ")", "\n", "", "run_progress", "=", "tqdm", "(", "run_dataloader", ",", "ncols", "=", "150", ")", "\n", "for", "i", ",", "batch_data", "in", "enumerate", "(", "run_progress", ")", ":", "\n", "            ", "global_step", "=", "epoch", "*", "len", "(", "run_dataloader", ")", "+", "i", "\n", "batch_data", "=", "batch_data", ".", "to", "(", "self", ".", "device", "[", "0", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "est_flow", "=", "self", ".", "model", "(", "batch_data", "[", "\"sequence\"", "]", ",", "self", ".", "args", ".", "iters", ")", "\n", "\n", "", "loss", "=", "compute_loss", "(", "est_flow", ",", "batch_data", ")", "\n", "epe", ",", "acc3d_strict", ",", "acc3d_relax", ",", "outlier", "=", "compute_epe", "(", "est_flow", ",", "batch_data", ")", "\n", "loss_run", ".", "append", "(", "loss", ".", "cpu", "(", ")", ")", "\n", "epe_run", ".", "append", "(", "epe", ")", "\n", "outlier_run", ".", "append", "(", "outlier", ")", "\n", "acc3dRelax_run", ".", "append", "(", "acc3d_relax", ")", "\n", "acc3dStrict_run", ".", "append", "(", "acc3d_strict", ")", "\n", "\n", "if", "mode", "==", "'val'", ":", "\n", "                ", "self", ".", "summary_writer", ".", "add_scalar", "(", "\n", "tag", "=", "'Val/Loss'", ",", "\n", "scalar_value", "=", "np", ".", "array", "(", "loss_run", ")", ".", "mean", "(", ")", ",", "\n", "global_step", "=", "global_step", "\n", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\n", "tag", "=", "'Val/EPE'", ",", "\n", "scalar_value", "=", "np", ".", "array", "(", "epe_run", ")", ".", "mean", "(", ")", ",", "\n", "global_step", "=", "global_step", "\n", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\n", "tag", "=", "'Val/Outlier'", ",", "\n", "scalar_value", "=", "np", ".", "array", "(", "outlier_run", ")", ".", "mean", "(", ")", ",", "\n", "global_step", "=", "global_step", "\n", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\n", "tag", "=", "'Val/Acc3dRelax'", ",", "\n", "scalar_value", "=", "np", ".", "array", "(", "acc3dRelax_run", ")", ".", "mean", "(", ")", ",", "\n", "global_step", "=", "global_step", "\n", ")", "\n", "self", ".", "summary_writer", ".", "add_scalar", "(", "\n", "tag", "=", "'Val/Acc3dStrict'", ",", "\n", "scalar_value", "=", "np", ".", "array", "(", "acc3dStrict_run", ")", ".", "mean", "(", ")", ",", "\n", "global_step", "=", "global_step", "\n", ")", "\n", "\n", "", "run_progress", ".", "set_description", "(", "\n", "run_logstr", "+", "\n", "' Epoch {}: Loss: {:.5f} EPE: {:.5f} Outlier: {:.5f} Acc3dRelax: {:.5f} Acc3dStrict: {:.5f}'", ".", "format", "(", "\n", "epoch", ",", "\n", "np", ".", "array", "(", "loss_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "epe_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "outlier_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dRelax_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dStrict_run", ")", ".", "mean", "(", ")", "\n", ")", "\n", ")", "\n", "\n", "", "if", "mode", "==", "'val'", ":", "\n", "            ", "if", "np", ".", "array", "(", "epe_run", ")", ".", "mean", "(", ")", "<", "self", ".", "best_val_epe", ":", "\n", "                ", "self", ".", "best_val_epe", "=", "np", ".", "array", "(", "epe_run", ")", ".", "mean", "(", ")", "\n", "save_checkpoint", "(", "self", ".", "model", ",", "self", ".", "args", ",", "epoch", ",", "'val'", ")", "\n", "", "logging", ".", "info", "(", "\n", "'Val Epoch {}: Loss: {:.5f} EPE: {:.5f} Outlier: {:.5f} Acc3dRelax: {:.5f} Acc3dStrict: {:.5f}'", ".", "format", "(", "\n", "epoch", ",", "\n", "np", ".", "array", "(", "loss_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "epe_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "outlier_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dRelax_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dStrict_run", ")", ".", "mean", "(", ")", "\n", ")", ")", "\n", "logging", ".", "info", "(", "'Best EPE: {:.5f}'", ".", "format", "(", "self", ".", "best_val_epe", ")", ")", "\n", "", "if", "mode", "==", "'test'", ":", "\n", "            ", "print", "(", "'Test Result: EPE: {:.5f} Outlier: {:.5f} Acc3dRelax: {:.5f} Acc3dStrict: {:.5f}'", ".", "format", "(", "\n", "np", ".", "array", "(", "epe_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "outlier_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dRelax_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dStrict_run", ")", ".", "mean", "(", ")", "\n", ")", ")", "\n", "logging", ".", "info", "(", "\n", "'Test Result: EPE: {:.5f} Outlier: {:.5f} Acc3dRelax: {:.5f} Acc3dStrict: {:.5f}'", ".", "format", "(", "\n", "np", ".", "array", "(", "epe_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "outlier_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dRelax_run", ")", ".", "mean", "(", ")", ",", "\n", "np", ".", "array", "(", "acc3dStrict_run", ")", ".", "mean", "(", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.metric.compute_epe_train": [[6, 32], ["torch.sqrt", "torch.sqrt.mean", "torch.sum", "torch.pow"], "function", ["None"], ["def", "compute_epe_train", "(", "est_flow", ",", "batch", ")", ":", "\n", "    ", "\"\"\"\n    Compute EPE during training.\n\n    Parameters\n    ----------\n    est_flow : torch.Tensor\n        Estimated flow.\n    batch : flot.datasets.generic.Batch\n        Contains ground truth flow and mask.\n\n    Returns\n    -------\n    epe : torch.Tensor\n        Mean EPE for current batch.\n\n    \"\"\"", "\n", "\n", "mask", "=", "batch", "[", "\"ground_truth\"", "]", "[", "0", "]", "[", "...", ",", "0", "]", "\n", "true_flow", "=", "batch", "[", "\"ground_truth\"", "]", "[", "1", "]", "\n", "error", "=", "est_flow", "-", "true_flow", "\n", "error", "=", "error", "[", "mask", ">", "0", "]", "\n", "epe_per_point", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "error", ",", "2.0", ")", ",", "-", "1", ")", ")", "\n", "epe", "=", "epe_per_point", ".", "mean", "(", ")", "\n", "\n", "return", "epe", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.metric.compute_epe": [[34, 81], ["numpy.linalg.norm", "np.linalg.norm.mean", "numpy.linalg.norm", "numpy.logical_or().astype().mean", "numpy.logical_or().astype().mean", "numpy.logical_or().astype().mean", "[].cpu().numpy", "[].cpu().numpy", "est_flow.cpu().numpy", "numpy.logical_or().astype", "numpy.logical_or().astype", "numpy.logical_or().astype", "[].cpu", "[].cpu", "est_flow.cpu", "numpy.logical_or", "numpy.logical_or", "numpy.logical_or"], "function", ["None"], ["", "def", "compute_epe", "(", "est_flow", ",", "batch", ")", ":", "\n", "    ", "\"\"\"\n    Compute EPE, accuracy and number of outliers.\n\n    Parameters\n    ----------\n    est_flow : torch.Tensor\n        Estimated flow.\n    batch : flot.datasets.generic.Batch\n        Contains ground truth flow and mask.\n\n    Returns\n    -------\n    EPE3D : float\n        End point error.\n    acc3d_strict : float\n        Strict accuracy.\n    acc3d_relax : float\n        Relax accuracy.\n    outlier : float\n        Percentage of outliers.\n\n    \"\"\"", "\n", "\n", "# Extract occlusion mask", "\n", "mask", "=", "batch", "[", "\"ground_truth\"", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "...", ",", "0", "]", "\n", "\n", "# Flow", "\n", "sf_gt", "=", "batch", "[", "\"ground_truth\"", "]", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "mask", ">", "0", "]", "\n", "sf_pred", "=", "est_flow", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "mask", ">", "0", "]", "\n", "\n", "#", "\n", "l2_norm", "=", "np", ".", "linalg", ".", "norm", "(", "sf_gt", "-", "sf_pred", ",", "axis", "=", "-", "1", ")", "\n", "EPE3D", "=", "l2_norm", ".", "mean", "(", ")", "\n", "\n", "#", "\n", "sf_norm", "=", "np", ".", "linalg", ".", "norm", "(", "sf_gt", ",", "axis", "=", "-", "1", ")", "\n", "relative_err", "=", "l2_norm", "/", "(", "sf_norm", "+", "1e-4", ")", "\n", "acc3d_strict", "=", "(", "\n", "(", "np", ".", "logical_or", "(", "l2_norm", "<", "0.05", ",", "relative_err", "<", "0.05", ")", ")", ".", "astype", "(", "np", ".", "float", ")", ".", "mean", "(", ")", "\n", ")", "\n", "acc3d_relax", "=", "(", "\n", "(", "np", ".", "logical_or", "(", "l2_norm", "<", "0.1", ",", "relative_err", "<", "0.1", ")", ")", ".", "astype", "(", "np", ".", "float", ")", ".", "mean", "(", ")", "\n", ")", "\n", "outlier", "=", "(", "np", ".", "logical_or", "(", "l2_norm", ">", "0.3", ",", "relative_err", ">", "0.1", ")", ")", ".", "astype", "(", "np", ".", "float", ")", ".", "mean", "(", ")", "\n", "\n", "return", "EPE3D", ",", "acc3d_strict", ",", "acc3d_relax", ",", "outlier", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.tools.utils.save_checkpoint": [[6, 30], ["os.path.join", "os.path.join", "torch.save", "os.path.exists", "os.mkdir", "torch.cuda.device_count", "model.module.state_dict", "model.state_dict"], "function", ["None"], ["def", "save_checkpoint", "(", "model", ",", "args", ",", "epoch", ",", "mode", "=", "'train'", ")", ":", "\n", "    ", "if", "mode", "==", "'train'", ":", "\n", "        ", "if", "epoch", "%", "args", ".", "checkpoint_interval", "!=", "0", ":", "\n", "            ", "checkpoint_name", "=", "'last_checkpoint.params'", "\n", "", "else", ":", "\n", "            ", "checkpoint_name", "=", "f'{epoch:03d}.params'", "\n", "", "", "else", ":", "\n", "        ", "checkpoint_name", "=", "'best_checkpoint.params'", "\n", "", "ckpt_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "root", ",", "'experiments'", ",", "args", ".", "exp_path", ",", "'checkpoints'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "ckpt_dir", ")", "\n", "", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "checkpoint_name", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "states", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "", "else", ":", "\n", "        ", "states", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "", "torch", ".", "save", "(", "states", ",", "checkpoint_path", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.RAFTSceneFlow.RSF.__init__": [[11, 20], ["torch.Module.__init__", "model.extractor.FlotEncoder", "model.extractor.FlotEncoder", "model.corr.CorrBlock", "model.update.UpdateBlock"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.flot.graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "RSF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "64", "\n", "self", ".", "context_dim", "=", "64", "\n", "self", ".", "feature_extractor", "=", "FlotEncoder", "(", ")", "\n", "self", ".", "context_extractor", "=", "FlotEncoder", "(", ")", "\n", "self", ".", "corr_block", "=", "CorrBlock", "(", "num_levels", "=", "args", ".", "corr_levels", ",", "base_scale", "=", "args", ".", "base_scales", ",", "\n", "resolution", "=", "3", ",", "truncate_k", "=", "args", ".", "truncate_k", ")", "\n", "self", ".", "update_block", "=", "UpdateBlock", "(", "hidden_dim", "=", "self", ".", "hidden_dim", ")", "\n", "# self.refine_block = FlotRefine()", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.RAFTSceneFlow.RSF.forward": [[22, 51], ["RAFTSceneFlow.RSF.feature_extractor", "RAFTSceneFlow.RSF.feature_extractor", "RAFTSceneFlow.RSF.corr_block.init_module", "RAFTSceneFlow.RSF.context_extractor", "torch.split", "torch.split", "torch.split", "torch.split", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "range", "coords2.detach.detach.detach", "RAFTSceneFlow.RSF.corr_block", "RAFTSceneFlow.RSF.update_block", "flow_predictions.append"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.corr.CorrBlock.init_module"], ["", "def", "forward", "(", "self", ",", "p", ",", "num_iters", "=", "12", ")", ":", "\n", "# feature extraction", "\n", "        ", "[", "xyz1", ",", "xyz2", "]", "=", "p", "\n", "fmap1", ",", "graph", "=", "self", ".", "feature_extractor", "(", "p", "[", "0", "]", ")", "\n", "fmap2", ",", "_", "=", "self", ".", "feature_extractor", "(", "p", "[", "1", "]", ")", "\n", "\n", "# correlation matrix", "\n", "self", ".", "corr_block", ".", "init_module", "(", "fmap1", ",", "fmap2", ",", "xyz2", ")", "\n", "\n", "fct1", ",", "graph_context", "=", "self", ".", "context_extractor", "(", "p", "[", "0", "]", ")", "\n", "\n", "net", ",", "inp", "=", "torch", ".", "split", "(", "fct1", ",", "[", "self", ".", "hidden_dim", ",", "self", ".", "context_dim", "]", ",", "dim", "=", "1", ")", "\n", "net", "=", "torch", ".", "tanh", "(", "net", ")", "\n", "inp", "=", "torch", ".", "relu", "(", "inp", ")", "\n", "\n", "coords1", ",", "coords2", "=", "xyz1", ",", "xyz1", "\n", "flow_predictions", "=", "[", "]", "\n", "\n", "for", "itr", "in", "range", "(", "num_iters", ")", ":", "\n", "            ", "coords2", "=", "coords2", ".", "detach", "(", ")", "\n", "corr", "=", "self", ".", "corr_block", "(", "coords", "=", "coords2", ")", "\n", "flow", "=", "coords2", "-", "coords1", "\n", "net", ",", "delta_flow", "=", "self", ".", "update_block", "(", "net", ",", "inp", ",", "corr", ",", "flow", ",", "graph_context", ")", "\n", "coords2", "=", "coords2", "+", "delta_flow", "\n", "flow_predictions", ".", "append", "(", "coords2", "-", "coords1", ")", "\n", "# refined_flow = self.refine_block(coords2 - coords1, graph)", "\n", "# flow_predictions.append(refined_flow)", "\n", "\n", "", "return", "flow_predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.RAFTSceneFlowRefine.RSF_refine.__init__": [[11, 21], ["torch.Module.__init__", "model.extractor.FlotEncoder", "model.extractor.FlotEncoder", "model.corr.CorrBlock", "model.update.UpdateBlock", "model.refine.FlotRefine"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.flot.graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "RSF_refine", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "64", "\n", "self", ".", "context_dim", "=", "64", "\n", "self", ".", "feature_extractor", "=", "FlotEncoder", "(", ")", "\n", "self", ".", "context_extractor", "=", "FlotEncoder", "(", ")", "\n", "self", ".", "corr_block", "=", "CorrBlock", "(", "num_levels", "=", "args", ".", "corr_levels", ",", "base_scale", "=", "args", ".", "base_scales", ",", "\n", "resolution", "=", "3", ",", "truncate_k", "=", "args", ".", "truncate_k", ")", "\n", "self", ".", "update_block", "=", "UpdateBlock", "(", "hidden_dim", "=", "self", ".", "hidden_dim", ")", "\n", "self", ".", "refine_block", "=", "FlotRefine", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.RAFTSceneFlowRefine.RSF_refine.forward": [[22, 49], ["RAFTSceneFlowRefine.RSF_refine.refine_block", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "RAFTSceneFlowRefine.RSF_refine.feature_extractor", "RAFTSceneFlowRefine.RSF_refine.feature_extractor", "RAFTSceneFlowRefine.RSF_refine.corr_block.init_module", "RAFTSceneFlowRefine.RSF_refine.context_extractor", "torch.split", "torch.split", "torch.split", "torch.split", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "range", "coords2.detach.detach.detach", "RAFTSceneFlowRefine.RSF_refine.corr_block", "RAFTSceneFlowRefine.RSF_refine.update_block"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.corr.CorrBlock.init_module"], ["", "def", "forward", "(", "self", ",", "p", ",", "num_iters", "=", "12", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# feature extraction", "\n", "            ", "[", "xyz1", ",", "xyz2", "]", "=", "p", "\n", "fmap1", ",", "graph", "=", "self", ".", "feature_extractor", "(", "p", "[", "0", "]", ")", "\n", "fmap2", ",", "_", "=", "self", ".", "feature_extractor", "(", "p", "[", "1", "]", ")", "\n", "\n", "# correlation matrix", "\n", "self", ".", "corr_block", ".", "init_module", "(", "fmap1", ",", "fmap2", ",", "xyz2", ")", "\n", "\n", "fct1", ",", "graph_context", "=", "self", ".", "context_extractor", "(", "p", "[", "0", "]", ")", "\n", "\n", "net", ",", "inp", "=", "torch", ".", "split", "(", "fct1", ",", "[", "self", ".", "hidden_dim", ",", "self", ".", "context_dim", "]", ",", "dim", "=", "1", ")", "\n", "net", "=", "torch", ".", "tanh", "(", "net", ")", "\n", "inp", "=", "torch", ".", "relu", "(", "inp", ")", "\n", "\n", "coords1", ",", "coords2", "=", "xyz1", ",", "xyz1", "\n", "\n", "for", "itr", "in", "range", "(", "num_iters", ")", ":", "\n", "                ", "coords2", "=", "coords2", ".", "detach", "(", ")", "\n", "corr", "=", "self", ".", "corr_block", "(", "coords", "=", "coords2", ")", "\n", "flow", "=", "coords2", "-", "coords1", "\n", "net", ",", "delta_flow", "=", "self", ".", "update_block", "(", "net", ",", "inp", ",", "corr", ",", "flow", ",", "graph_context", ")", "\n", "coords2", "=", "coords2", "+", "delta_flow", "\n", "", "", "refined_flow", "=", "self", ".", "refine_block", "(", "coords2", "-", "coords1", ",", "graph", ")", "\n", "\n", "return", "refined_flow", "\n", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.update.MotionEncoder.__init__": [[9, 14], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.flot.graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MotionEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_corr", "=", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "1", ")", "\n", "self", ".", "conv_flow", "=", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "1", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "64", "+", "64", ",", "64", "-", "3", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.update.MotionEncoder.forward": [[15, 22], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "update.MotionEncoder.conv_corr", "update.MotionEncoder.conv_flow", "update.MotionEncoder.conv", "flow.transpose().contiguous", "flow.transpose().contiguous", "flow.transpose", "flow.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "flow", ",", "corr", ")", ":", "\n", "        ", "cor", "=", "F", ".", "relu", "(", "self", ".", "conv_corr", "(", "corr", ")", ")", "\n", "flo", "=", "F", ".", "relu", "(", "self", ".", "conv_flow", "(", "flow", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ")", ")", "\n", "cor_flo", "=", "torch", ".", "cat", "(", "[", "cor", ",", "flo", "]", ",", "dim", "=", "1", ")", "\n", "out_conv", "=", "F", ".", "relu", "(", "self", ".", "conv", "(", "cor_flo", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out_conv", ",", "flow", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "]", ",", "dim", "=", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.update.ConvGRU.__init__": [[25, 30], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.flot.graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "128", ",", "hidden_dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "ConvGRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convz", "=", "nn", ".", "Conv1d", "(", "input_dim", "+", "hidden_dim", ",", "hidden_dim", ",", "1", ")", "\n", "self", ".", "convr", "=", "nn", ".", "Conv1d", "(", "input_dim", "+", "hidden_dim", ",", "hidden_dim", ",", "1", ")", "\n", "self", ".", "convq", "=", "nn", ".", "Conv1d", "(", "input_dim", "+", "hidden_dim", ",", "hidden_dim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.update.ConvGRU.forward": [[31, 41], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "update.ConvGRU.convz", "update.ConvGRU.convr", "update.ConvGRU.convq"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "x", ")", ":", "\n", "        ", "hx", "=", "torch", ".", "cat", "(", "[", "h", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "\n", "z", "=", "torch", ".", "sigmoid", "(", "self", ".", "convz", "(", "hx", ")", ")", "\n", "r", "=", "torch", ".", "sigmoid", "(", "self", ".", "convr", "(", "hx", ")", ")", "\n", "rh_x", "=", "torch", ".", "cat", "(", "[", "r", "*", "h", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "q", "=", "torch", ".", "tanh", "(", "self", ".", "convq", "(", "rh_x", ")", ")", "\n", "\n", "h", "=", "(", "1", "-", "z", ")", "*", "h", "+", "z", "*", "q", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.update.ConvRNN.__init__": [[44, 48], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.flot.graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "128", ",", "hidden_dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "ConvRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convx", "=", "nn", ".", "Conv1d", "(", "input_dim", ",", "hidden_dim", ",", "1", ")", "\n", "self", ".", "convh", "=", "nn", ".", "Conv1d", "(", "hidden_dim", ",", "hidden_dim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.update.ConvRNN.forward": [[49, 55], ["update.ConvRNN.convx", "update.ConvRNN.convh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "x", ")", ":", "\n", "        ", "xt", "=", "self", ".", "convx", "(", "x", ")", "\n", "ht", "=", "self", ".", "convh", "(", "h", ")", "\n", "\n", "h", "=", "torch", ".", "tanh", "(", "xt", "+", "ht", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.update.FlowHead.__init__": [[58, 66], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "model.flot.gconv.SetConv", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.flot.graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "FlowHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "input_dim", ",", "64", ",", "1", ")", "\n", "self", ".", "setconv", "=", "SetConv", "(", "64", ",", "64", ")", "\n", "self", ".", "out_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "128", ",", "64", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "64", ",", "3", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.update.FlowHead.forward": [[68, 73], ["update.FlowHead.conv1", "update.FlowHead.setconv().transpose().contiguous", "update.FlowHead.out_conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "update.FlowHead.setconv().transpose", "update.FlowHead.setconv", "x.transpose().contiguous", "x.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "graph", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out_setconv", "=", "self", ".", "setconv", "(", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ",", "graph", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "out", "=", "self", ".", "out_conv", "(", "torch", ".", "cat", "(", "[", "out_setconv", ",", "out", "]", ",", "dim", "=", "1", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.update.UpdateBlock.__init__": [[76, 81], ["torch.Module.__init__", "update.MotionEncoder", "update.ConvGRU", "update.FlowHead"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.flot.graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "128", ",", "hidden_dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "UpdateBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "motion_encoder", "=", "MotionEncoder", "(", ")", "\n", "self", ".", "gru", "=", "ConvGRU", "(", "input_dim", "=", "input_dim", ",", "hidden_dim", "=", "hidden_dim", ")", "\n", "self", ".", "flow_head", "=", "FlowHead", "(", "input_dim", "=", "hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.update.UpdateBlock.forward": [[82, 88], ["update.UpdateBlock.motion_encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "update.UpdateBlock.gru", "update.UpdateBlock.flow_head().transpose().contiguous", "update.UpdateBlock.flow_head().transpose", "update.UpdateBlock.flow_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "net", ",", "inp", ",", "corr", ",", "flow", ",", "graph", ")", ":", "\n", "        ", "motion_features", "=", "self", ".", "motion_encoder", "(", "flow", ",", "corr", ")", "\n", "inp", "=", "torch", ".", "cat", "(", "[", "inp", ",", "motion_features", "]", ",", "dim", "=", "1", ")", "# 128d", "\n", "net", "=", "self", ".", "gru", "(", "net", ",", "inp", ")", "\n", "delta_flow", "=", "self", ".", "flow_head", "(", "net", ",", "graph", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "net", ",", "delta_flow", "\n", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.corr.CorrBlock.__init__": [[9, 30], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.PReLU", "torch.PReLU", "torch.PReLU"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.flot.graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_levels", "=", "3", ",", "base_scale", "=", "0.25", ",", "resolution", "=", "3", ",", "truncate_k", "=", "128", ",", "knn", "=", "32", ")", ":", "\n", "        ", "super", "(", "CorrBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "truncate_k", "=", "truncate_k", "\n", "self", ".", "num_levels", "=", "num_levels", "\n", "self", ".", "resolution", "=", "resolution", "# local resolution", "\n", "self", ".", "base_scale", "=", "base_scale", "# search (base_sclae * resolution)^3 cube", "\n", "self", ".", "out_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "(", "self", ".", "resolution", "**", "3", ")", "*", "self", ".", "num_levels", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "8", ",", "128", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "128", ",", "64", ",", "1", ")", "\n", ")", "\n", "self", ".", "knn", "=", "knn", "\n", "\n", "self", ".", "knn_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "4", ",", "64", ",", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "8", ",", "64", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", ")", "\n", "\n", "self", ".", "knn_out", "=", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.corr.CorrBlock.init_module": [[31, 43], ["xyz2.view().expand.view().expand.size", "xyz2.view().expand.view().expand.view().expand", "corr.CorrBlock.CorrBlock.calculate_corr", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk.indices.reshape().expand", "torch.topk.indices.reshape().expand", "torch.topk.indices.reshape().expand", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "corr.CorrBlock.CorrBlock.clone", "xyz2.view().expand.view().expand.view", "torch.topk.indices.reshape", "torch.topk.indices.reshape", "torch.topk.indices.reshape"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.corr.CorrBlock.calculate_corr"], ["", "def", "init_module", "(", "self", ",", "fmap1", ",", "fmap2", ",", "xyz2", ")", ":", "\n", "        ", "b", ",", "n_p", ",", "_", "=", "xyz2", ".", "size", "(", ")", "\n", "xyz2", "=", "xyz2", ".", "view", "(", "b", ",", "1", ",", "n_p", ",", "3", ")", ".", "expand", "(", "b", ",", "n_p", ",", "n_p", ",", "3", ")", "\n", "\n", "corr", "=", "self", ".", "calculate_corr", "(", "fmap1", ",", "fmap2", ")", "\n", "\n", "corr_topk", "=", "torch", ".", "topk", "(", "corr", ".", "clone", "(", ")", ",", "k", "=", "self", ".", "truncate_k", ",", "dim", "=", "2", ",", "sorted", "=", "True", ")", "\n", "self", ".", "truncated_corr", "=", "corr_topk", ".", "values", "\n", "indx", "=", "corr_topk", ".", "indices", ".", "reshape", "(", "b", ",", "n_p", ",", "self", ".", "truncate_k", ",", "1", ")", ".", "expand", "(", "b", ",", "n_p", ",", "self", ".", "truncate_k", ",", "3", ")", "\n", "self", ".", "ones_matrix", "=", "torch", ".", "ones_like", "(", "self", ".", "truncated_corr", ")", "\n", "\n", "self", ".", "truncate_xyz2", "=", "torch", ".", "gather", "(", "xyz2", ",", "dim", "=", "2", ",", "index", "=", "indx", ")", "# b, n_p1, k, 3", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.corr.CorrBlock.__call__": [[44, 46], ["corr.CorrBlock.get_voxel_feature", "corr.CorrBlock.get_knn_feature"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.corr.CorrBlock.get_voxel_feature", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.corr.CorrBlock.get_knn_feature"], ["", "def", "__call__", "(", "self", ",", "coords", ")", ":", "\n", "        ", "return", "self", ".", "get_voxel_feature", "(", "coords", ")", "+", "self", ".", "get_knn_feature", "(", "coords", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.corr.CorrBlock.get_voxel_feature": [[47, 74], ["coords.size", "range", "torch.cat.CorrBlock.out_conv", "scatter_add", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "corr_feature.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "valid_scatter.detach.detach.detach", "cube_idx_scatter.detach.detach.detach", "scatter_add", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.transpose().contiguous", "torch.cat.transpose().contiguous", "torch.cat.transpose().contiguous", "cube_idx.type", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "coords.unsqueeze", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "numpy.floor"], "methods", ["None"], ["", "def", "get_voxel_feature", "(", "self", ",", "coords", ")", ":", "\n", "        ", "b", ",", "n_p", ",", "_", "=", "coords", ".", "size", "(", ")", "\n", "corr_feature", "=", "[", "]", "\n", "from", "torch_scatter", "import", "scatter_add", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "r", "=", "self", ".", "base_scale", "*", "(", "2", "**", "i", ")", "\n", "dis_voxel", "=", "torch", ".", "round", "(", "(", "self", ".", "truncate_xyz2", "-", "coords", ".", "unsqueeze", "(", "dim", "=", "-", "2", ")", ")", "/", "r", ")", "\n", "valid_scatter", "=", "(", "torch", ".", "abs", "(", "dis_voxel", ")", "<=", "np", ".", "floor", "(", "self", ".", "resolution", "/", "2", ")", ")", ".", "all", "(", "dim", "=", "-", "1", ")", "\n", "dis_voxel", "=", "dis_voxel", "-", "(", "-", "1", ")", "\n", "cube_idx", "=", "dis_voxel", "[", ":", ",", ":", ",", ":", ",", "0", "]", "*", "(", "self", ".", "resolution", "**", "2", ")", "+", "dis_voxel", "[", ":", ",", ":", ",", ":", ",", "1", "]", "*", "self", ".", "resolution", "+", "dis_voxel", "[", ":", ",", ":", ",", ":", ",", "2", "]", "\n", "cube_idx_scatter", "=", "cube_idx", ".", "type", "(", "torch", ".", "int64", ")", "*", "valid_scatter", "\n", "\n", "valid_scatter", "=", "valid_scatter", ".", "detach", "(", ")", "\n", "cube_idx_scatter", "=", "cube_idx_scatter", ".", "detach", "(", ")", "\n", "\n", "", "corr_add", "=", "scatter_add", "(", "self", ".", "truncated_corr", "*", "valid_scatter", ",", "cube_idx_scatter", ")", "\n", "corr_cnt", "=", "torch", ".", "clamp", "(", "scatter_add", "(", "self", ".", "ones_matrix", "*", "valid_scatter", ",", "cube_idx_scatter", ")", ",", "1", ",", "n_p", ")", "\n", "corr", "=", "corr_add", "/", "corr_cnt", "\n", "if", "corr", ".", "shape", "[", "-", "1", "]", "!=", "self", ".", "resolution", "**", "3", ":", "\n", "                ", "repair", "=", "torch", ".", "zeros", "(", "[", "b", ",", "n_p", ",", "self", ".", "resolution", "**", "3", "-", "corr", ".", "shape", "[", "-", "1", "]", "]", ",", "device", "=", "coords", ".", "device", ")", "\n", "corr", "=", "torch", ".", "cat", "(", "[", "corr", ",", "repair", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "corr_feature", ".", "append", "(", "corr", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "", "return", "self", ".", "out_conv", "(", "torch", ".", "cat", "(", "corr_feature", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.corr.CorrBlock.get_knn_feature": [[75, 94], ["coords.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "coords.size", "torch.gather().reshape", "torch.gather().reshape", "torch.gather().reshape", "torch.gather().reshape", "torch.gather().reshape", "torch.gather().reshape", "torch.gather().reshape", "torch.gather().reshape", "torch.gather().reshape", "neighbors.view().expand.view().expand.view().expand", "torch.gather().permute().contiguous", "torch.gather().permute().contiguous", "torch.gather().permute().contiguous", "torch.gather().permute().contiguous", "torch.gather().permute().contiguous", "torch.gather().permute().contiguous", "torch.gather().permute().contiguous", "torch.gather().permute().contiguous", "torch.gather().permute().contiguous", "corr.CorrBlock.knn_conv", "corr.CorrBlock.knn_out", "coords.view", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "coords.transpose().reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "neighbors.view().expand.view().expand.view", "torch.gather().permute", "torch.gather().permute", "torch.gather().permute", "torch.gather().permute", "torch.gather().permute", "torch.gather().permute", "torch.gather().permute", "torch.gather().permute", "torch.gather().permute", "corr.CorrBlock.truncated_corr.view", "coords.transpose", "neighbors.view().expand.view().expand.reshape", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather"], "methods", ["None"], ["", "def", "get_knn_feature", "(", "self", ",", "coords", ")", ":", "\n", "        ", "b", ",", "n_p", ",", "_", "=", "coords", ".", "size", "(", ")", "\n", "\n", "dist", "=", "self", ".", "truncate_xyz2", "-", "coords", ".", "view", "(", "b", ",", "n_p", ",", "1", ",", "3", ")", "\n", "dist", "=", "torch", ".", "sum", "(", "dist", "**", "2", ",", "dim", "=", "-", "1", ")", "# b, 8192, 512", "\n", "\n", "neighbors", "=", "torch", ".", "topk", "(", "-", "dist", ",", "k", "=", "self", ".", "knn", ",", "dim", "=", "2", ")", ".", "indices", "\n", "\n", "b", ",", "n_p", ",", "_", "=", "coords", ".", "size", "(", ")", "\n", "knn_corr", "=", "torch", ".", "gather", "(", "self", ".", "truncated_corr", ".", "view", "(", "b", "*", "n_p", ",", "self", ".", "truncate_k", ")", ",", "dim", "=", "1", ",", "\n", "index", "=", "neighbors", ".", "reshape", "(", "b", "*", "n_p", ",", "self", ".", "knn", ")", ")", ".", "reshape", "(", "b", ",", "1", ",", "n_p", ",", "self", ".", "knn", ")", "\n", "\n", "neighbors", "=", "neighbors", ".", "view", "(", "b", ",", "n_p", ",", "self", ".", "knn", ",", "1", ")", ".", "expand", "(", "b", ",", "n_p", ",", "self", ".", "knn", ",", "3", ")", "\n", "knn_xyz", "=", "torch", ".", "gather", "(", "self", ".", "truncate_xyz2", ",", "dim", "=", "2", ",", "index", "=", "neighbors", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "knn_xyz", "=", "knn_xyz", "-", "coords", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "b", ",", "3", ",", "n_p", ",", "1", ")", "\n", "\n", "knn_feature", "=", "self", ".", "knn_conv", "(", "torch", ".", "cat", "(", "[", "knn_corr", ",", "knn_xyz", "]", ",", "dim", "=", "1", ")", ")", "\n", "knn_feature", "=", "torch", ".", "max", "(", "knn_feature", ",", "dim", "=", "3", ")", "[", "0", "]", "\n", "return", "self", ".", "knn_out", "(", "knn_feature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.corr.CorrBlock.calculate_corr": [[95, 101], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "fmap1.transpose", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "calculate_corr", "(", "fmap1", ",", "fmap2", ")", ":", "\n", "        ", "batch", ",", "dim", ",", "num_points", "=", "fmap1", ".", "shape", "\n", "corr", "=", "torch", ".", "matmul", "(", "fmap1", ".", "transpose", "(", "1", ",", "2", ")", ",", "fmap2", ")", "\n", "corr", "=", "corr", "/", "torch", ".", "sqrt", "(", "torch", ".", "tensor", "(", "dim", ")", ".", "float", "(", ")", ")", "\n", "return", "corr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.extractor.FlotEncoder.__init__": [[8, 16], ["torch.Module.__init__", "model.flot.gconv.SetConv", "model.flot.gconv.SetConv", "model.flot.gconv.SetConv"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.flot.graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_neighbors", "=", "32", ")", ":", "\n", "        ", "super", "(", "FlotEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "n", "=", "32", "\n", "self", ".", "num_neighbors", "=", "num_neighbors", "\n", "\n", "self", ".", "feat_conv1", "=", "SetConv", "(", "3", ",", "n", ")", "\n", "self", ".", "feat_conv2", "=", "SetConv", "(", "n", ",", "2", "*", "n", ")", "\n", "self", ".", "feat_conv3", "=", "SetConv", "(", "2", "*", "n", ",", "4", "*", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.extractor.FlotEncoder.forward": [[17, 25], ["model.flot.graph.Graph.construct_graph", "extractor.FlotEncoder.feat_conv1", "extractor.FlotEncoder.feat_conv2", "extractor.FlotEncoder.feat_conv3", "x.transpose().contiguous.transpose().contiguous.transpose().contiguous", "x.transpose().contiguous.transpose().contiguous.transpose"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.flot.graph.Graph.construct_graph"], ["", "def", "forward", "(", "self", ",", "pc", ")", ":", "\n", "        ", "graph", "=", "Graph", ".", "construct_graph", "(", "pc", ",", "self", ".", "num_neighbors", ")", "\n", "x", "=", "self", ".", "feat_conv1", "(", "pc", ",", "graph", ")", "\n", "x", "=", "self", ".", "feat_conv2", "(", "x", ",", "graph", ")", "\n", "x", "=", "self", ".", "feat_conv3", "(", "x", ",", "graph", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "x", ",", "graph", "", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.pointconv.square_distance": [[4, 26], ["torch.sum().view", "torch.sum().view", "torch.matmul", "dst.permute", "torch.sum", "torch.sum"], "function", ["None"], ["def", "square_distance", "(", "src", ",", "dst", ")", ":", "\n", "    ", "\"\"\"\n    Calculate Euclid distance between each two points.\n\n    src^T * dst = xn * xm + yn * ym + zn * zm\uff1b\n    sum(src^2, dim=-1) = xn*xn + yn*yn + zn*zn;\n    sum(dst^2, dim=-1) = xm*xm + ym*ym + zm*zm;\n    dist = (xn - xm)^2 + (yn - ym)^2 + (zn - zm)^2\n         = sum(src**2,dim=-1)+sum(dst**2,dim=-1)-2*src^T*dst\n\n    Input:\n        src: source points, [B, N, C]\n        dst: target points, [B, M, C]\n    Output:\n        dist: per-point square distance, [B, N, M]\n    \"\"\"", "\n", "B", ",", "N", ",", "_", "=", "src", ".", "shape", "\n", "_", ",", "M", ",", "_", "=", "dst", ".", "shape", "\n", "dist", "=", "-", "2", "*", "torch", ".", "matmul", "(", "src", ",", "dst", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "src", "**", "2", ",", "-", "1", ")", ".", "view", "(", "B", ",", "N", ",", "1", ")", "\n", "dist", "+=", "torch", ".", "sum", "(", "dst", "**", "2", ",", "-", "1", ")", ".", "view", "(", "B", ",", "1", ",", "M", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.pointconv.knn_point": [[28, 40], ["pointconv.square_distance", "torch.topk"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.pointconv.square_distance"], ["", "def", "knn_point", "(", "nsample", ",", "xyz", ",", "new_xyz", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        nsample: max sample number in local region\n        xyz: all points, [B, N, C]\n        new_xyz: query points, [B, S, C]\n    Return:\n        group_idx: grouped points index, [B, S, nsample]\n    \"\"\"", "\n", "sqrdists", "=", "square_distance", "(", "new_xyz", ",", "xyz", ")", "\n", "_", ",", "group_idx", "=", "torch", ".", "topk", "(", "sqrdists", ",", "nsample", ",", "dim", "=", "-", "1", ",", "largest", "=", "False", ",", "sorted", "=", "False", ")", "\n", "return", "group_idx", "\n", "", ""]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.refine.FlotRefine.__init__": [[7, 15], ["torch.Module.__init__", "model.flot.gconv.SetConv", "model.flot.gconv.SetConv", "model.flot.gconv.SetConv", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.flot.graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FlotRefine", ",", "self", ")", ".", "__init__", "(", ")", "\n", "n", "=", "32", "\n", "\n", "self", ".", "ref_conv1", "=", "SetConv", "(", "3", ",", "n", ")", "\n", "self", ".", "ref_conv2", "=", "SetConv", "(", "n", ",", "2", "*", "n", ")", "\n", "self", ".", "ref_conv3", "=", "SetConv", "(", "2", "*", "n", ",", "4", "*", "n", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "4", "*", "n", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.model.refine.FlotRefine.forward": [[16, 23], ["refine.FlotRefine.ref_conv1", "refine.FlotRefine.ref_conv2", "refine.FlotRefine.ref_conv3", "refine.FlotRefine.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "flow", ",", "graph", ")", ":", "\n", "        ", "x", "=", "self", ".", "ref_conv1", "(", "flow", ",", "graph", ")", "\n", "x", "=", "self", ".", "ref_conv2", "(", "x", ",", "graph", ")", "\n", "x", "=", "self", ".", "ref_conv3", "(", "x", ",", "graph", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "flow", "+", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.flot.gconv.SetConv.__init__": [[5, 37], ["super().__init__", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.Conv1d", "torch.nn.GroupNorm", "torch.nn.Conv1d", "torch.nn.GroupNorm", "torch.nn.LeakyReLU", "torch.max"], "methods", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.flot.graph.Graph.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nb_feat_in", ",", "nb_feat_out", ")", ":", "\n", "        ", "\"\"\"\n        Module that performs DGCNN-like convolution on point clouds.\n        Parameters\n        ----------\n        nb_feat_in : int\n            Number of input channels.\n        nb_feat_out : int\n            Number of ouput channels.\n        Returns\n        -------\n        None.\n        \"\"\"", "\n", "\n", "super", "(", "SetConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "nb_feat_in", "%", "2", "!=", "0", ":", "\n", "            ", "mid_feature", "=", "nb_feat_out", "//", "2", "\n", "", "else", ":", "\n", "            ", "mid_feature", "=", "(", "nb_feat_out", "+", "nb_feat_in", ")", "//", "2", "\n", "\n", "", "self", ".", "fc1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "nb_feat_in", "+", "3", ",", "mid_feature", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "gn1", "=", "torch", ".", "nn", ".", "GroupNorm", "(", "8", ",", "mid_feature", ",", "affine", "=", "True", ")", "\n", "\n", "self", ".", "fc2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "mid_feature", ",", "nb_feat_out", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "gn2", "=", "torch", ".", "nn", ".", "GroupNorm", "(", "8", ",", "nb_feat_out", ",", "affine", "=", "True", ")", "\n", "\n", "self", ".", "fc3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "nb_feat_out", ",", "nb_feat_out", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "gn3", "=", "torch", ".", "nn", ".", "GroupNorm", "(", "8", ",", "nb_feat_out", ",", "affine", "=", "True", ")", "\n", "\n", "self", ".", "pool", "=", "lambda", "x", ":", "torch", ".", "max", "(", "x", ",", "2", ")", "[", "0", "]", "\n", "self", ".", "lrelu", "=", "torch", ".", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.flot.gconv.SetConv.forward": [[38, 86], ["func.reshape", "torch.cat", "func.view", "func.transpose", "func.transpose", "signal[].reshape", "func.view", "func", "edge_feature.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "signal", ",", "graph", ")", ":", "\n", "        ", "\"\"\"\n        Performs PointNet++-like convolution\n        Parameters\n        ----------\n        signal : torch.Tensor\n            Input features of size B x N x nb_feat_in.\n        graph : flot.models.graph.Graph\n            Graph build on the input point cloud on with the input features\n            live. The graph contains the list of nearest neighbors (NN) for\n            each point and all edge features (relative point coordinates with\n            NN).\n\n        Returns\n        -------\n        torch.Tensor\n            Ouput features of size B x N x nb_feat_out.\n        \"\"\"", "\n", "\n", "# Input features dimension", "\n", "b", ",", "n", ",", "c", "=", "signal", ".", "shape", "\n", "n_out", "=", "graph", ".", "size", "[", "0", "]", "//", "b", "\n", "\n", "assert", "n_out", "==", "n", "\n", "\n", "# Concatenate input features with edge features", "\n", "signal", "=", "signal", ".", "reshape", "(", "b", "*", "n", ",", "c", ")", "\n", "edge_feature", "=", "signal", "[", "graph", ".", "edges", "]", ".", "reshape", "(", "-", "1", ",", "graph", ".", "k_neighbors", ",", "c", ")", "-", "signal", ".", "view", "(", "b", "*", "n", ",", "1", ",", "c", ")", "\n", "signal", "=", "torch", ".", "cat", "(", "(", "edge_feature", ".", "view", "(", "-", "1", ",", "c", ")", ",", "graph", ".", "edge_feats", ")", ",", "-", "1", ")", "\n", "signal", "=", "signal", ".", "view", "(", "b", ",", "n_out", ",", "graph", ".", "k_neighbors", ",", "c", "+", "3", ")", "\n", "signal", "=", "signal", ".", "transpose", "(", "1", ",", "-", "1", ")", "\n", "\n", "# Pointnet++-like convolution", "\n", "for", "func", "in", "[", "\n", "self", ".", "fc1", ",", "\n", "self", ".", "gn1", ",", "\n", "self", ".", "lrelu", ",", "\n", "self", ".", "pool", ",", "\n", "self", ".", "fc2", ",", "\n", "self", ".", "gn2", ",", "\n", "self", ".", "lrelu", ",", "\n", "self", ".", "fc3", ",", "\n", "self", ".", "gn3", ",", "\n", "self", ".", "lrelu", ",", "\n", "]", ":", "\n", "            ", "signal", "=", "func", "(", "signal", ")", "\n", "\n", "", "return", "signal", ".", "transpose", "(", "1", ",", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.flot.graph.Graph.__init__": [[5, 26], ["tuple"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "edges", ",", "edge_feats", ",", "k_neighbors", ",", "size", ")", ":", "\n", "        ", "\"\"\"\n        Directed nearest neighbor graph constructed on a point cloud.\n\n        Parameters\n        ----------\n        edges : torch.Tensor\n            Contains list with nearest neighbor indices.\n        edge_feats : torch.Tensor\n            Contains edge features: relative point coordinates.\n        k_neighbors : int\n            Number of nearest neighbors.\n        size : tuple(int, int)\n            Number of points.\n\n        \"\"\"", "\n", "\n", "self", ".", "edges", "=", "edges", "\n", "self", ".", "size", "=", "tuple", "(", "size", ")", "\n", "self", ".", "edge_feats", "=", "edge_feats", "\n", "self", ".", "k_neighbors", "=", "k_neighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.flot.graph.Graph.construct_graph": [[27, 90], ["torch.sum", "neighbors.view.view.reshape", "torch.arange().long", "torch.repeat_interleave", "range", "torch.cat", "range", "neighbors.view.view.view", "Graph.Graph", "torch.sum.transpose", "torch.argsort", "torch.cat.append", "torch.bmm", "torch.arange", "pcloud.transpose"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "construct_graph", "(", "pcloud", ",", "nb_neighbors", ")", ":", "\n", "        ", "\"\"\"\n        Construct a directed nearest neighbor graph on the input point cloud.\n\n        Parameters\n        ----------\n        pcloud : torch.Tensor\n            Input point cloud. Size B x N x 3.\n        nb_neighbors : int\n            Number of nearest neighbors per point.\n\n        Returns\n        -------\n        graph : flot.models.graph.Graph\n            Graph build on input point cloud containing the list of nearest \n            neighbors (NN) for each point and all edge features (relative \n            coordinates with NN).\n            \n        \"\"\"", "\n", "\n", "# Size", "\n", "nb_points", "=", "pcloud", ".", "shape", "[", "1", "]", "\n", "size_batch", "=", "pcloud", ".", "shape", "[", "0", "]", "\n", "\n", "# Distance between points", "\n", "distance_matrix", "=", "torch", ".", "sum", "(", "pcloud", "**", "2", ",", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "distance_matrix", "=", "distance_matrix", "+", "distance_matrix", ".", "transpose", "(", "1", ",", "2", ")", "\n", "distance_matrix", "=", "distance_matrix", "-", "2", "*", "torch", ".", "bmm", "(", "\n", "pcloud", ",", "pcloud", ".", "transpose", "(", "1", ",", "2", ")", "\n", ")", "\n", "\n", "# Find nearest neighbors", "\n", "neighbors", "=", "torch", ".", "argsort", "(", "distance_matrix", ",", "-", "1", ")", "[", "...", ",", ":", "nb_neighbors", "]", "\n", "effective_nb_neighbors", "=", "neighbors", ".", "shape", "[", "-", "1", "]", "\n", "neighbors", "=", "neighbors", ".", "reshape", "(", "size_batch", ",", "-", "1", ")", "\n", "\n", "# Edge origin", "\n", "idx", "=", "torch", ".", "arange", "(", "nb_points", ",", "device", "=", "distance_matrix", ".", "device", ")", ".", "long", "(", ")", "\n", "idx", "=", "torch", ".", "repeat_interleave", "(", "idx", ",", "effective_nb_neighbors", ")", "\n", "\n", "# Edge features", "\n", "edge_feats", "=", "[", "]", "\n", "for", "ind_batch", "in", "range", "(", "size_batch", ")", ":", "\n", "            ", "edge_feats", ".", "append", "(", "\n", "pcloud", "[", "ind_batch", ",", "neighbors", "[", "ind_batch", "]", "]", "-", "pcloud", "[", "ind_batch", ",", "idx", "]", "\n", ")", "\n", "", "edge_feats", "=", "torch", ".", "cat", "(", "edge_feats", ",", "0", ")", "\n", "\n", "# Handle batch dimension to get indices of nearest neighbors", "\n", "for", "ind_batch", "in", "range", "(", "1", ",", "size_batch", ")", ":", "\n", "            ", "neighbors", "[", "ind_batch", "]", "=", "neighbors", "[", "ind_batch", "]", "+", "ind_batch", "*", "nb_points", "\n", "", "neighbors", "=", "neighbors", ".", "view", "(", "-", "1", ")", "\n", "\n", "# Create graph", "\n", "graph", "=", "Graph", "(", "\n", "neighbors", ",", "\n", "edge_feats", ",", "\n", "effective_nb_neighbors", ",", "\n", "[", "size_batch", "*", "nb_points", ",", "size_batch", "*", "nb_points", "]", ",", "\n", ")", "\n", "\n", "return", "graph", "\n", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.process_flyingthings3d_subset.process_one_file": [[24, 64], ["os.join", "os.makedirs", "os.makedirs", "IO.read", "imageio.imread", "IO.read", "IO.read", "imageio.imread", "flyingthings3d_utils.pixel2pc", "flyingthings3d_utils.next_pixel2pc", "numpy.logical_and", "os.join", "os.join", "os.join", "os.join", "os.join", "print", "numpy.save", "numpy.save", "numpy.logical_and", "numpy.save", "numpy.save", "print", "print", "sys.stdout.flush", "pc1[].max", "pc2[].max", "pc1[].max", "pc1[].min", "pc2[].max", "pc2[].min", "os.join", "os.join", "os.join", "os.join"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.read", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.read", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.read", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.flyingthings3d_utils.pixel2pc", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.flyingthings3d_utils.next_pixel2pc"], ["def", "process_one_file", "(", "params", ")", ":", "\n", "    ", "try", ":", "\n", "#import ipdb; ipdb.set_trace()", "\n", "        ", "train_val", ",", "fname", "=", "params", "\n", "\n", "save_folder_path", "=", "osp", ".", "join", "(", "save_path", ",", "train_val", ",", "fname", ")", "\n", "os", ".", "makedirs", "(", "save_folder_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "disp1", "=", "IO", ".", "read", "(", "osp", ".", "join", "(", "root_path", ",", "train_val", ",", "'disparity'", ",", "'left'", ",", "fname", "+", "'.pfm'", ")", ")", "\n", "disp1_occ", "=", "imageio", ".", "imread", "(", "osp", ".", "join", "(", "root_path", ",", "train_val", ",", "'disparity_occlusions'", ",", "'left'", ",", "fname", "+", "'.png'", ")", ")", "\n", "disp1_change", "=", "IO", ".", "read", "(", "\n", "osp", ".", "join", "(", "root_path", ",", "train_val", ",", "'disparity_change'", ",", "'left'", ",", "'into_future'", ",", "fname", "+", "'.pfm'", ")", ")", "\n", "flow", "=", "IO", ".", "read", "(", "osp", ".", "join", "(", "root_path", ",", "train_val", ",", "'flow'", ",", "'left'", ",", "'into_future'", ",", "fname", "+", "'.flo'", ")", ")", "\n", "flow_occ", "=", "imageio", ".", "imread", "(", "osp", ".", "join", "(", "root_path", ",", "train_val", ",", "'flow_occlusions'", ",", "'left'", ",", "'into_future'", ",", "fname", "+", "'.png'", ")", ")", "\n", "\n", "pc1", "=", "pixel2pc", "(", "disp1", ")", "\n", "pc2", "=", "next_pixel2pc", "(", "flow", ",", "disp1", "+", "disp1_change", ")", "\n", "\n", "if", "pc1", "[", "...", ",", "-", "1", "]", ".", "max", "(", ")", ">", "0", "or", "pc2", "[", "...", ",", "-", "1", "]", ".", "max", "(", ")", ">", "0", ":", "\n", "            ", "print", "(", "'z > 0'", ",", "train_val", ",", "fname", ",", "pc1", "[", "...", ",", "-", "1", "]", ".", "max", "(", ")", ",", "pc1", "[", "...", ",", "-", "1", "]", ".", "min", "(", ")", ",", "pc2", "[", "...", ",", "-", "1", "]", ".", "max", "(", ")", ",", "\n", "pc2", "[", "...", ",", "-", "1", "]", ".", "min", "(", ")", ")", "\n", "\n", "", "valid_mask", "=", "np", ".", "logical_and", "(", "disp1_occ", "==", "0", ",", "flow_occ", "==", "0", ")", "\n", "\n", "pc1", "=", "pc1", "[", "valid_mask", "]", "\n", "pc2", "=", "pc2", "[", "valid_mask", "]", "\n", "\n", "if", "not", "args", ".", "save_near", ":", "\n", "            ", "np", ".", "save", "(", "osp", ".", "join", "(", "save_folder_path", ",", "'pc1.npy'", ")", ",", "pc1", ")", "\n", "np", ".", "save", "(", "osp", ".", "join", "(", "save_folder_path", ",", "'pc2.npy'", ")", ",", "pc2", ")", "\n", "", "else", ":", "\n", "            ", "near_mask", "=", "np", ".", "logical_and", "(", "pc1", "[", "...", ",", "-", "1", "]", ">", "-", "35.", ",", "pc2", "[", "...", ",", "-", "1", "]", ">", "-", "35.", ")", "\n", "np", ".", "save", "(", "osp", ".", "join", "(", "save_folder_path", ",", "'pc1.npy'", ")", ",", "pc1", "[", "near_mask", "]", ")", "\n", "np", ".", "save", "(", "osp", ".", "join", "(", "save_folder_path", ",", "'pc2.npy'", ")", ",", "pc2", "[", "near_mask", "]", ")", "\n", "\n", "", "", "except", "Exception", "as", "ex", ":", "\n", "        ", "print", "(", "'error in addressing params'", ",", "params", ",", "'see exception:'", ")", "\n", "print", "(", "ex", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.kitti_utils.pixel2xyz": [[5, 27], ["numpy.concatenate", "numpy.tile", "numpy.tile", "numpy.arange", "numpy.arange"], "function", ["None"], ["def", "pixel2xyz", "(", "depth", ",", "P_rect", ",", "px", "=", "None", ",", "py", "=", "None", ")", ":", "\n", "    ", "assert", "P_rect", "[", "0", ",", "1", "]", "==", "0", "\n", "assert", "P_rect", "[", "1", ",", "0", "]", "==", "0", "\n", "assert", "P_rect", "[", "2", ",", "0", "]", "==", "0", "\n", "assert", "P_rect", "[", "2", ",", "1", "]", "==", "0", "\n", "assert", "P_rect", "[", "0", ",", "0", "]", "==", "P_rect", "[", "1", ",", "1", "]", "\n", "focal_length_pixel", "=", "P_rect", "[", "0", ",", "0", "]", "\n", "\n", "height", ",", "width", "=", "depth", ".", "shape", "[", ":", "2", "]", "\n", "if", "px", "is", "None", ":", "\n", "        ", "px", "=", "np", ".", "tile", "(", "np", ".", "arange", "(", "width", ",", "dtype", "=", "np", ".", "float32", ")", "[", "None", ",", ":", "]", ",", "(", "height", ",", "1", ")", ")", "\n", "", "if", "py", "is", "None", ":", "\n", "        ", "py", "=", "np", ".", "tile", "(", "np", ".", "arange", "(", "height", ",", "dtype", "=", "np", ".", "float32", ")", "[", ":", ",", "None", "]", ",", "(", "1", ",", "width", ")", ")", "\n", "", "const_x", "=", "P_rect", "[", "0", ",", "2", "]", "*", "depth", "+", "P_rect", "[", "0", ",", "3", "]", "\n", "const_y", "=", "P_rect", "[", "1", ",", "2", "]", "*", "depth", "+", "P_rect", "[", "1", ",", "3", "]", "\n", "\n", "x", "=", "(", "(", "px", "*", "(", "depth", "+", "P_rect", "[", "2", ",", "3", "]", ")", "-", "const_x", ")", "/", "focal_length_pixel", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "y", "=", "(", "(", "py", "*", "(", "depth", "+", "P_rect", "[", "2", ",", "3", "]", ")", "-", "const_y", ")", "/", "focal_length_pixel", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "pc", "=", "np", ".", "concatenate", "(", "(", "x", ",", "y", ",", "depth", "[", ":", ",", ":", ",", "None", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "pc", "[", "...", ",", ":", "2", "]", "*=", "-", "1.", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.kitti_utils.load_uint16PNG": [[29, 37], ["png.Reader", "png.Reader.read", "numpy.vstack", "map", "px_array.reshape.reshape", "numpy.np.float32"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.read"], ["", "def", "load_uint16PNG", "(", "fpath", ")", ":", "\n", "    ", "reader", "=", "png", ".", "Reader", "(", "fpath", ")", "\n", "pngdata", "=", "reader", ".", "read", "(", ")", "\n", "px_array", "=", "np", ".", "vstack", "(", "map", "(", "np", ".", "uint16", ",", "pngdata", "[", "2", "]", ")", ")", "\n", "if", "pngdata", "[", "3", "]", "[", "'planes'", "]", "==", "3", ":", "\n", "        ", "width", ",", "height", "=", "pngdata", "[", ":", "2", "]", "\n", "px_array", "=", "px_array", ".", "reshape", "(", "height", ",", "width", ",", "3", ")", "\n", "", "return", "px_array", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.kitti_utils.load_disp": [[39, 48], ["kitti_utils.load_uint16PNG", "load_uint16PNG.astype", "numpy.logical_not"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.kitti_utils.load_uint16PNG"], ["", "def", "load_disp", "(", "fpath", ")", ":", "\n", "# A 0 value indicates an invalid pixel (ie, no", "\n", "# ground truth exists, or the estimation algorithm didn't produce an estimate", "\n", "# for that pixel).", "\n", "    ", "array", "=", "load_uint16PNG", "(", "fpath", ")", "\n", "valid", "=", "array", ">", "0", "\n", "disp", "=", "array", ".", "astype", "(", "np", ".", "float32", ")", "/", "256.0", "\n", "disp", "[", "np", ".", "logical_not", "(", "valid", ")", "]", "=", "-", "1.", "\n", "return", "disp", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.kitti_utils.load_op_flow": [[50, 56], ["kitti_utils.load_uint16PNG", "array.astype.astype"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.kitti_utils.load_uint16PNG"], ["", "def", "load_op_flow", "(", "fpath", ")", ":", "\n", "    ", "array", "=", "load_uint16PNG", "(", "fpath", ")", "\n", "valid", "=", "array", "[", "...", ",", "-", "1", "]", "==", "1", "\n", "array", "=", "array", ".", "astype", "(", "np", ".", "float32", ")", "\n", "flow", "=", "(", "array", "[", "...", ",", ":", "-", "1", "]", "-", "2", "**", "15", ")", "/", "64.", "\n", "return", "flow", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.kitti_utils.disp_2_depth": [[58, 63], ["numpy.logical_not"], "function", ["None"], ["", "def", "disp_2_depth", "(", "disparity", ",", "valid_disp", ",", "FOCAL_LENGTH_PIXEL", ")", ":", "\n", "    ", "BASELINE", "=", "0.54", "\n", "depth", "=", "FOCAL_LENGTH_PIXEL", "*", "BASELINE", "/", "(", "disparity", "+", "1e-5", ")", "\n", "depth", "[", "np", ".", "logical_not", "(", "valid_disp", ")", "]", "=", "-", "1.", "\n", "return", "depth", "\n", "", ""]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.flyingthings3d_utils.next_pixel2pc": [[4, 19], ["numpy.concatenate", "numpy.save", "numpy.tile", "numpy.tile", "numpy.arange", "numpy.arange"], "function", ["None"], ["def", "next_pixel2pc", "(", "flow", ",", "disparity", ",", "save_path", "=", "None", ",", "f", "=", "-", "1050.", ",", "cx", "=", "479.5", ",", "cy", "=", "269.5", ")", ":", "\n", "    ", "height", ",", "width", "=", "disparity", ".", "shape", "\n", "\n", "BASELINE", "=", "1.0", "\n", "depth", "=", "-", "1.", "*", "f", "*", "BASELINE", "/", "disparity", "\n", "\n", "x", "=", "(", "(", "np", ".", "tile", "(", "np", ".", "arange", "(", "width", ",", "dtype", "=", "np", ".", "float32", ")", "[", "None", ",", ":", "]", ",", "(", "height", ",", "1", ")", ")", "-", "cx", "+", "flow", "[", "...", ",", "0", "]", ")", "*", "-", "1.", "/", "disparity", ")", "[", ":", ",", "\n", ":", ",", "None", "]", "\n", "y", "=", "(", "(", "np", ".", "tile", "(", "np", ".", "arange", "(", "height", ",", "dtype", "=", "np", ".", "float32", ")", "[", ":", ",", "None", "]", ",", "(", "1", ",", "width", ")", ")", "-", "cy", "+", "flow", "[", "...", ",", "1", "]", ")", "*", "1.", "/", "disparity", ")", "[", ":", ",", "\n", ":", ",", "None", "]", "\n", "pc", "=", "np", ".", "concatenate", "(", "(", "x", ",", "y", ",", "depth", "[", ":", ",", ":", ",", "None", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "save_path", ",", "pc", ")", "\n", "", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.flyingthings3d_utils.pixel2pc": [[21, 34], ["numpy.concatenate", "numpy.save", "numpy.tile", "numpy.tile", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "pixel2pc", "(", "disparity", ",", "save_path", "=", "None", ",", "f", "=", "-", "1050.", ",", "cx", "=", "479.5", ",", "cy", "=", "269.5", ")", ":", "\n", "    ", "height", ",", "width", "=", "disparity", ".", "shape", "\n", "\n", "BASELINE", "=", "1.0", "\n", "depth", "=", "-", "1.", "*", "f", "*", "BASELINE", "/", "disparity", "\n", "\n", "x", "=", "(", "(", "np", ".", "tile", "(", "np", ".", "arange", "(", "width", ",", "dtype", "=", "np", ".", "float32", ")", "[", "None", ",", ":", "]", ",", "(", "height", ",", "1", ")", ")", "-", "cx", ")", "*", "-", "1.", "/", "disparity", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "y", "=", "(", "(", "np", ".", "tile", "(", "np", ".", "arange", "(", "height", ",", "dtype", "=", "np", ".", "float32", ")", "[", ":", ",", "None", "]", ",", "(", "1", ",", "width", ")", ")", "-", "cy", ")", "*", "1.", "/", "disparity", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "pc", "=", "np", ".", "concatenate", "(", "(", "x", ",", "y", ",", "depth", "[", ":", ",", ":", ",", "None", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "save_path", ",", "pc", ")", "\n", "", "return", "pc", "", "", ""]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.read": [[13, 22], ["file.endswith", "IO.readFloat", "file.endswith", "IO.readFlow", "file.endswith", "IO.readImage", "file.endswith", "IO.readImage", "file.endswith", "IO.readImage", "file.endswith", "IO.readImage", "file.endswith", "Exception", "IO.readPFM"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.readFloat", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.readFlow", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.readImage", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.readImage", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.readImage", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.readImage", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.python_pfm.readPFM"], ["def", "read", "(", "file", ")", ":", "\n", "    ", "if", "file", ".", "endswith", "(", "'.float3'", ")", ":", "return", "readFloat", "(", "file", ")", "\n", "elif", "file", ".", "endswith", "(", "'.flo'", ")", ":", "return", "readFlow", "(", "file", ")", "\n", "elif", "file", ".", "endswith", "(", "'.ppm'", ")", ":", "return", "readImage", "(", "file", ")", "\n", "elif", "file", ".", "endswith", "(", "'.pgm'", ")", ":", "return", "readImage", "(", "file", ")", "\n", "elif", "file", ".", "endswith", "(", "'.png'", ")", ":", "return", "readImage", "(", "file", ")", "\n", "elif", "file", ".", "endswith", "(", "'.jpg'", ")", ":", "return", "readImage", "(", "file", ")", "\n", "elif", "file", ".", "endswith", "(", "'.pfm'", ")", ":", "return", "readPFM", "(", "file", ")", "[", "0", "]", "\n", "else", ":", "raise", "Exception", "(", "'don\\'t know how to read %s'", "%", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.write": [[23, 32], ["file.endswith", "IO.writeFloat", "file.endswith", "IO.writeFlow", "file.endswith", "IO.writeImage", "file.endswith", "IO.writeImage", "file.endswith", "IO.writeImage", "file.endswith", "IO.writeImage", "file.endswith", "IO.writePFM", "Exception"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.writeFloat", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.writeFlow", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.writeImage", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.writeImage", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.writeImage", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.writeImage", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.python_pfm.writePFM"], ["", "def", "write", "(", "file", ",", "data", ")", ":", "\n", "    ", "if", "file", ".", "endswith", "(", "'.float3'", ")", ":", "return", "writeFloat", "(", "file", ",", "data", ")", "\n", "elif", "file", ".", "endswith", "(", "'.flo'", ")", ":", "return", "writeFlow", "(", "file", ",", "data", ")", "\n", "elif", "file", ".", "endswith", "(", "'.ppm'", ")", ":", "return", "writeImage", "(", "file", ",", "data", ")", "\n", "elif", "file", ".", "endswith", "(", "'.pgm'", ")", ":", "return", "writeImage", "(", "file", ",", "data", ")", "\n", "elif", "file", ".", "endswith", "(", "'.png'", ")", ":", "return", "writeImage", "(", "file", ",", "data", ")", "\n", "elif", "file", ".", "endswith", "(", "'.jpg'", ")", ":", "return", "writeImage", "(", "file", ",", "data", ")", "\n", "elif", "file", ".", "endswith", "(", "'.pfm'", ")", ":", "return", "writePFM", "(", "file", ",", "data", ")", "\n", "else", ":", "raise", "Exception", "(", "'don\\'t know how to write %s'", "%", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.readPFM": [[33, 69], ["open", "open.readline().rstrip", "re.match", "float", "numpy.fromfile", "numpy.reshape", "numpy.flipud", "file.readline().rstrip.decode", "open.readline().decode", "list", "Exception", "open.readline().decode().rstrip", "open.readline", "file.readline().rstrip.decode", "Exception", "map", "open.readline", "re.match.groups", "open.readline().decode", "open.readline"], "function", ["None"], ["", "def", "readPFM", "(", "file", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "\n", "color", "=", "None", "\n", "width", "=", "None", "\n", "height", "=", "None", "\n", "scale", "=", "None", "\n", "endian", "=", "None", "\n", "\n", "header", "=", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", "\n", "if", "header", ".", "decode", "(", "\"ascii\"", ")", "==", "'PF'", ":", "\n", "        ", "color", "=", "True", "\n", "", "elif", "header", ".", "decode", "(", "\"ascii\"", ")", "==", "'Pf'", ":", "\n", "        ", "color", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Not a PFM file.'", ")", "\n", "\n", "", "dim_match", "=", "re", ".", "match", "(", "r'^(\\d+)\\s(\\d+)\\s$'", ",", "file", ".", "readline", "(", ")", ".", "decode", "(", "\"ascii\"", ")", ")", "\n", "if", "dim_match", ":", "\n", "        ", "width", ",", "height", "=", "list", "(", "map", "(", "int", ",", "dim_match", ".", "groups", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Malformed PFM header.'", ")", "\n", "\n", "", "scale", "=", "float", "(", "file", ".", "readline", "(", ")", ".", "decode", "(", "\"ascii\"", ")", ".", "rstrip", "(", ")", ")", "\n", "if", "scale", "<", "0", ":", "# little-endian", "\n", "        ", "endian", "=", "'<'", "\n", "scale", "=", "-", "scale", "\n", "", "else", ":", "\n", "        ", "endian", "=", "'>'", "# big-endian", "\n", "\n", "", "data", "=", "np", ".", "fromfile", "(", "file", ",", "endian", "+", "'f'", ")", "\n", "shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "data", "=", "np", ".", "flipud", "(", "data", ")", "\n", "return", "data", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.writePFM": [[70, 98], ["open", "numpy.flipud", "open.write", "open.write", "open.write", "np.flipud.tofile", "Exception", "len", "Exception", "len", "len"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.write", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.write", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.write"], ["", "def", "writePFM", "(", "file", ",", "image", ",", "scale", "=", "1", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "'wb'", ")", "\n", "\n", "color", "=", "None", "\n", "\n", "if", "image", ".", "dtype", ".", "name", "!=", "'float32'", ":", "\n", "        ", "raise", "Exception", "(", "'Image dtype must be float32.'", ")", "\n", "\n", "", "image", "=", "np", ".", "flipud", "(", "image", ")", "\n", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "==", "3", ":", "# color image", "\n", "        ", "color", "=", "True", "\n", "", "elif", "len", "(", "image", ".", "shape", ")", "==", "2", "or", "len", "(", "image", ".", "shape", ")", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "==", "1", ":", "# greyscale", "\n", "        ", "color", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Image must have H x W x 3, H x W x 1 or H x W dimensions.'", ")", "\n", "\n", "", "file", ".", "write", "(", "'PF\\n'", "if", "color", "else", "'Pf\\n'", ".", "encode", "(", ")", ")", "\n", "file", ".", "write", "(", "'%d %d\\n'", ".", "encode", "(", ")", "%", "(", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "endian", "=", "image", ".", "dtype", ".", "byteorder", "\n", "\n", "if", "endian", "==", "'<'", "or", "endian", "==", "'='", "and", "sys", ".", "byteorder", "==", "'little'", ":", "\n", "        ", "scale", "=", "-", "scale", "\n", "\n", "", "file", ".", "write", "(", "'%f\\n'", ".", "encode", "(", ")", "%", "scale", ")", "\n", "\n", "image", ".", "tofile", "(", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.readFlow": [[99, 115], ["open", "open.read", "numpy.fromfile().squeeze", "numpy.fromfile().squeeze", "numpy.fromfile().reshape", "np.fromfile().reshape.astype", "name.endswith", "name.endswith", "f.read.decode", "Exception", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "IO.readPFM"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.read", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.python_pfm.readPFM"], ["", "def", "readFlow", "(", "name", ")", ":", "\n", "    ", "if", "name", ".", "endswith", "(", "'.pfm'", ")", "or", "name", ".", "endswith", "(", "'.PFM'", ")", ":", "\n", "        ", "return", "readPFM", "(", "name", ")", "[", "0", "]", "[", ":", ",", ":", ",", "0", ":", "2", "]", "\n", "\n", "", "f", "=", "open", "(", "name", ",", "'rb'", ")", "\n", "\n", "header", "=", "f", ".", "read", "(", "4", ")", "\n", "if", "header", ".", "decode", "(", "\"utf-8\"", ")", "!=", "'PIEH'", ":", "\n", "        ", "raise", "Exception", "(", "'Flow file header does not contain PIEH'", ")", "\n", "\n", "", "width", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "1", ")", ".", "squeeze", "(", ")", "\n", "height", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "1", ")", ".", "squeeze", "(", ")", "\n", "\n", "flow", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "width", "*", "height", "*", "2", ")", ".", "reshape", "(", "(", "height", ",", "width", ",", "2", ")", ")", "\n", "\n", "return", "flow", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.readImage": [[116, 125], ["scipy.misc.imread", "name.endswith", "name.endswith", "IO.readPFM", "len"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.python_pfm.readPFM"], ["", "def", "readImage", "(", "name", ")", ":", "\n", "    ", "if", "name", ".", "endswith", "(", "'.pfm'", ")", "or", "name", ".", "endswith", "(", "'.PFM'", ")", ":", "\n", "        ", "data", "=", "readPFM", "(", "name", ")", "[", "0", "]", "\n", "if", "len", "(", "data", ".", "shape", ")", "==", "3", ":", "\n", "            ", "return", "data", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "", "else", ":", "\n", "            ", "return", "data", "\n", "\n", "", "", "return", "misc", ".", "imread", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.writeImage": [[126, 131], ["scipy.misc.imsave", "name.endswith", "name.endswith", "IO.writePFM"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.python_pfm.writePFM"], ["", "def", "writeImage", "(", "name", ",", "data", ")", ":", "\n", "    ", "if", "name", ".", "endswith", "(", "'.pfm'", ")", "or", "name", ".", "endswith", "(", "'.PFM'", ")", ":", "\n", "        ", "return", "writePFM", "(", "name", ",", "data", ",", "1", ")", "\n", "\n", "", "return", "misc", ".", "imsave", "(", "name", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.writeFlow": [[132, 138], ["open", "open.write", "numpy.array().tofile", "flow.astype.astype", "flow.astype.tofile", "numpy.array"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.write"], ["", "def", "writeFlow", "(", "name", ",", "flow", ")", ":", "\n", "    ", "f", "=", "open", "(", "name", ",", "'wb'", ")", "\n", "f", ".", "write", "(", "'PIEH'", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "np", ".", "array", "(", "[", "flow", ".", "shape", "[", "1", "]", ",", "flow", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", ".", "tofile", "(", "f", ")", "\n", "flow", "=", "flow", ".", "astype", "(", "np", ".", "float32", ")", "\n", "flow", ".", "tofile", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.readFloat": [[139, 162], ["open", "int", "range", "list", "numpy.fromfile().reshape", "open.readline().decode", "Exception", "open.readline", "int", "list.append", "reversed", "numpy.transpose", "numpy.transpose", "open.readline", "numpy.fromfile", "open.readline"], "function", ["None"], ["", "def", "readFloat", "(", "name", ")", ":", "\n", "    ", "f", "=", "open", "(", "name", ",", "'rb'", ")", "\n", "\n", "if", "(", "f", ".", "readline", "(", ")", ".", "decode", "(", "\"utf-8\"", ")", ")", "!=", "'float\\n'", ":", "\n", "        ", "raise", "Exception", "(", "'float file %s did not contain <float> keyword'", "%", "name", ")", "\n", "\n", "", "dim", "=", "int", "(", "f", ".", "readline", "(", ")", ")", "\n", "\n", "dims", "=", "[", "]", "\n", "count", "=", "1", "\n", "for", "i", "in", "range", "(", "0", ",", "dim", ")", ":", "\n", "        ", "d", "=", "int", "(", "f", ".", "readline", "(", ")", ")", "\n", "dims", ".", "append", "(", "d", ")", "\n", "count", "*=", "d", "\n", "\n", "", "dims", "=", "list", "(", "reversed", "(", "dims", ")", ")", "\n", "\n", "data", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", ")", ".", "reshape", "(", "dims", ")", "\n", "if", "dim", ">", "2", ":", "\n", "        ", "data", "=", "np", ".", "transpose", "(", "data", ",", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "data", "=", "np", ".", "transpose", "(", "data", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.writeFloat": [[163, 187], ["open", "len", "open.write", "open.write", "data.astype.astype", "Exception", "open.write", "open.write", "open.write", "range", "data.astype.tofile", "numpy.transpose().tofile", "open.write", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.write", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.write", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.write", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.write", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.write", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.write"], ["", "def", "writeFloat", "(", "name", ",", "data", ")", ":", "\n", "    ", "f", "=", "open", "(", "name", ",", "'wb'", ")", "\n", "\n", "dim", "=", "len", "(", "data", ".", "shape", ")", "\n", "if", "dim", ">", "3", ":", "\n", "        ", "raise", "Exception", "(", "'bad float file dimension: %d'", "%", "dim", ")", "\n", "\n", "", "f", ".", "write", "(", "(", "'float\\n'", ")", ".", "encode", "(", "'ascii'", ")", ")", "\n", "f", ".", "write", "(", "(", "'%d\\n'", "%", "dim", ")", ".", "encode", "(", "'ascii'", ")", ")", "\n", "\n", "if", "dim", "==", "1", ":", "\n", "        ", "f", ".", "write", "(", "(", "'%d\\n'", "%", "data", ".", "shape", "[", "0", "]", ")", ".", "encode", "(", "'ascii'", ")", ")", "\n", "", "else", ":", "\n", "        ", "f", ".", "write", "(", "(", "'%d\\n'", "%", "data", ".", "shape", "[", "1", "]", ")", ".", "encode", "(", "'ascii'", ")", ")", "\n", "f", ".", "write", "(", "(", "'%d\\n'", "%", "data", ".", "shape", "[", "0", "]", ")", ".", "encode", "(", "'ascii'", ")", ")", "\n", "for", "i", "in", "range", "(", "2", ",", "dim", ")", ":", "\n", "            ", "f", ".", "write", "(", "(", "'%d\\n'", "%", "data", ".", "shape", "[", "i", "]", ")", ".", "encode", "(", "'ascii'", ")", ")", "\n", "\n", "", "", "data", "=", "data", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "dim", "==", "2", ":", "\n", "        ", "data", ".", "tofile", "(", "f", ")", "\n", "\n", "", "else", ":", "\n", "        ", "np", ".", "transpose", "(", "data", ",", "(", "2", ",", "0", ",", "1", ")", ")", ".", "tofile", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.python_pfm.readPFM": [[6, 42], ["open", "open.readline().rstrip", "re.match", "float", "numpy.fromfile", "numpy.reshape", "numpy.flipud", "open.readline", "map", "Exception", "open.readline().rstrip", "open.readline", "Exception", "re.match.groups", "open.readline"], "function", ["None"], ["def", "readPFM", "(", "file", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "\n", "color", "=", "None", "\n", "width", "=", "None", "\n", "height", "=", "None", "\n", "scale", "=", "None", "\n", "endian", "=", "None", "\n", "\n", "header", "=", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", "\n", "if", "header", "==", "'PF'", ":", "\n", "        ", "color", "=", "True", "\n", "", "elif", "header", "==", "'Pf'", ":", "\n", "        ", "color", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Not a PFM file.'", ")", "\n", "\n", "", "dim_match", "=", "re", ".", "match", "(", "r'^(\\d+)\\s(\\d+)\\s$'", ",", "file", ".", "readline", "(", ")", ")", "\n", "if", "dim_match", ":", "\n", "        ", "width", ",", "height", "=", "map", "(", "int", ",", "dim_match", ".", "groups", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Malformed PFM header.'", ")", "\n", "\n", "", "scale", "=", "float", "(", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", ")", "\n", "if", "scale", "<", "0", ":", "# little-endian", "\n", "        ", "endian", "=", "'<'", "\n", "scale", "=", "-", "scale", "\n", "", "else", ":", "\n", "        ", "endian", "=", "'>'", "# big-endian", "\n", "\n", "", "data", "=", "np", ".", "fromfile", "(", "file", ",", "endian", "+", "'f'", ")", "\n", "shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "data", "=", "np", ".", "flipud", "(", "data", ")", "\n", "return", "data", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.python_pfm.writePFM": [[43, 71], ["open", "numpy.flipud", "open.write", "open.write", "open.write", "np.flipud.tofile", "Exception", "len", "Exception", "len", "len"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.write", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.write", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.IO.write"], ["", "def", "writePFM", "(", "file", ",", "image", ",", "scale", "=", "1", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "'wb'", ")", "\n", "\n", "color", "=", "None", "\n", "\n", "if", "image", ".", "dtype", ".", "name", "!=", "'float32'", ":", "\n", "        ", "raise", "Exception", "(", "'Image dtype must be float32.'", ")", "\n", "\n", "", "image", "=", "np", ".", "flipud", "(", "image", ")", "\n", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "==", "3", ":", "# color image", "\n", "        ", "color", "=", "True", "\n", "", "elif", "len", "(", "image", ".", "shape", ")", "==", "2", "or", "len", "(", "image", ".", "shape", ")", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "==", "1", ":", "# greyscale", "\n", "        ", "color", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Image must have H x W x 3, H x W x 1 or H x W dimensions.'", ")", "\n", "\n", "", "file", ".", "write", "(", "'PF\\n'", "if", "color", "else", "'Pf\\n'", ")", "\n", "file", ".", "write", "(", "'%d %d\\n'", "%", "(", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "endian", "=", "image", ".", "dtype", ".", "byteorder", "\n", "\n", "if", "endian", "==", "'<'", "or", "endian", "==", "'='", "and", "sys", ".", "byteorder", "==", "'little'", ":", "\n", "        ", "scale", "=", "-", "scale", "\n", "\n", "", "file", ".", "write", "(", "'%f\\n'", "%", "scale", ")", "\n", "\n", "image", ".", "tofile", "(", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.process_kitti.process_one_frame": [[25, 83], ["os.join", "os.join", "kitti_utils.load_disp", "kitti_utils.disp_2_depth", "kitti_utils.pixel2xyz", "os.join", "kitti_utils.load_disp", "kitti_utils.disp_2_depth", "numpy.logical_and", "kitti_utils.load_op_flow", "numpy.zeros", "numpy.zeros", "range", "kitti_utils.pixel2xyz", "numpy.logical_and", "os.join", "os.makedirs", "os.makedirs", "numpy.save", "numpy.save", "open", "fd.readlines", "numpy.array().reshape", "os.join", "range", "os.join", "os.join", "len", "numpy.array", "line.startswith", "float", "print", "[].split", "line.startswith"], "function", ["home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.kitti_utils.load_disp", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.kitti_utils.disp_2_depth", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.kitti_utils.pixel2xyz", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.kitti_utils.load_disp", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.kitti_utils.disp_2_depth", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.kitti_utils.load_op_flow", "home.repos.pwc.inspect_result.weiyithu_PV-RAFT.data_preprocess.kitti_utils.pixel2xyz"], ["def", "process_one_frame", "(", "idx", ")", ":", "\n", "    ", "sidx", "=", "'{:06d}'", ".", "format", "(", "idx", ")", "\n", "\n", "calib_path", "=", "osp", ".", "join", "(", "calib_root", ",", "sidx", "+", "'.txt'", ")", "\n", "with", "open", "(", "calib_path", ")", "as", "fd", ":", "\n", "        ", "lines", "=", "fd", ".", "readlines", "(", ")", "\n", "assert", "len", "(", "[", "line", "for", "line", "in", "lines", "if", "line", ".", "startswith", "(", "'P_rect_02'", ")", "]", ")", "==", "1", "\n", "P_rect_left", "=", "np", ".", "array", "(", "[", "float", "(", "item", ")", "for", "item", "in", "\n", "[", "line", "for", "line", "in", "lines", "if", "line", ".", "startswith", "(", "'P_rect_02'", ")", "]", "[", "0", "]", ".", "split", "(", ")", "[", "1", ":", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "3", ",", "4", ")", "\n", "\n", "", "assert", "P_rect_left", "[", "0", ",", "0", "]", "==", "P_rect_left", "[", "1", ",", "1", "]", "\n", "focal_length_pixel", "=", "P_rect_left", "[", "0", ",", "0", "]", "\n", "\n", "disp1_path", "=", "osp", ".", "join", "(", "disp1_root", ",", "sidx", "+", "'_10.png'", ")", "\n", "disp1", ",", "valid_disp1", "=", "load_disp", "(", "disp1_path", ")", "\n", "depth1", "=", "disp_2_depth", "(", "disp1", ",", "valid_disp1", ",", "focal_length_pixel", ")", "\n", "pc1", "=", "pixel2xyz", "(", "depth1", ",", "P_rect_left", ")", "\n", "\n", "disp2_path", "=", "osp", ".", "join", "(", "disp2_root", ",", "sidx", "+", "'_10.png'", ")", "\n", "disp2", ",", "valid_disp2", "=", "load_disp", "(", "disp2_path", ")", "\n", "depth2", "=", "disp_2_depth", "(", "disp2", ",", "valid_disp2", ",", "focal_length_pixel", ")", "\n", "\n", "valid_disp", "=", "np", ".", "logical_and", "(", "valid_disp1", ",", "valid_disp2", ")", "\n", "\n", "op_flow", ",", "valid_op_flow", "=", "load_op_flow", "(", "osp", ".", "join", "(", "op_flow_root", ",", "'{:06d}_10.png'", ".", "format", "(", "idx", ")", ")", ")", "\n", "vertical", "=", "op_flow", "[", "...", ",", "1", "]", "\n", "horizontal", "=", "op_flow", "[", "...", ",", "0", "]", "\n", "height", ",", "width", "=", "op_flow", ".", "shape", "[", ":", "2", "]", "\n", "\n", "px2", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "py2", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "height", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "width", ")", ":", "\n", "            ", "if", "valid_op_flow", "[", "i", ",", "j", "]", "and", "valid_disp", "[", "i", ",", "j", "]", ":", "\n", "                ", "try", ":", "\n", "                    ", "dx", "=", "horizontal", "[", "i", ",", "j", "]", "\n", "dy", "=", "vertical", "[", "i", ",", "j", "]", "\n", "", "except", ":", "\n", "                    ", "print", "(", "'error, i,j:'", ",", "i", ",", "j", ",", "'hor and ver:'", ",", "horizontal", "[", "i", ",", "j", "]", ",", "vertical", "[", "i", ",", "j", "]", ")", "\n", "continue", "\n", "\n", "", "px2", "[", "i", ",", "j", "]", "=", "j", "+", "dx", "\n", "py2", "[", "i", ",", "j", "]", "=", "i", "+", "dy", "\n", "\n", "", "", "", "pc2", "=", "pixel2xyz", "(", "depth2", ",", "P_rect_left", ",", "px", "=", "px2", ",", "py", "=", "py2", ")", "\n", "\n", "final_mask", "=", "np", ".", "logical_and", "(", "valid_disp", ",", "valid_op_flow", ")", "\n", "\n", "valid_pc1", "=", "pc1", "[", "final_mask", "]", "\n", "valid_pc2", "=", "pc2", "[", "final_mask", "]", "\n", "\n", "truenas_path", "=", "osp", ".", "join", "(", "save_path", ",", "'{:06d}'", ".", "format", "(", "idx", ")", ")", "\n", "os", ".", "makedirs", "(", "truenas_path", ",", "exist_ok", "=", "True", ")", "\n", "np", ".", "save", "(", "osp", ".", "join", "(", "truenas_path", ",", "'pc1.npy'", ")", ",", "valid_pc1", ")", "\n", "np", ".", "save", "(", "osp", ".", "join", "(", "truenas_path", ",", "'pc2.npy'", ")", ",", "valid_pc2", ")", "\n", "\n"]]}