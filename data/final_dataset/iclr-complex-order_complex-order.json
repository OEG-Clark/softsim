{"home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.train.log_time_delta": [[41, 51], ["functools.wraps", "time.time", "func", "time.time", "print"], "function", ["None"], ["def", "log_time_delta", "(", "func", ")", ":", "\n", "    ", "@", "wraps", "(", "func", ")", "\n", "def", "_deco", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "ret", "=", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "delta", "=", "end", "-", "start", "\n", "print", "(", "\"%s runed %.2f seconds\"", "%", "(", "func", ".", "__name__", ",", "delta", ")", ")", "\n", "return", "ret", "\n", "", "return", "_deco", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.train.predict": [[53, 64], ["helper.batch_gen_with_single", "numpy.array", "sess.run", "scores.extend", "len"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.batch_gen_with_single"], ["", "def", "predict", "(", "sess", ",", "cnn", ",", "dev", ",", "alphabet", ",", "batch_size", ",", "q_len", ")", ":", "\n", "    ", "scores", "=", "[", "]", "\n", "for", "data", "in", "batch_gen_with_single", "(", "dev", ",", "alphabet", ",", "batch_size", ",", "q_len", ")", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "cnn", ".", "question", ":", "data", "[", "0", "]", ",", "\n", "cnn", ".", "q_position", ":", "data", "[", "1", "]", ",", "\n", "cnn", ".", "dropout_keep_prob", ":", "1.0", "\n", "}", "\n", "score", "=", "sess", ".", "run", "(", "cnn", ".", "scores", ",", "feed_dict", ")", "\n", "scores", ".", "extend", "(", "score", ")", "\n", "", "return", "np", ".", "array", "(", "scores", "[", ":", "len", "(", "dev", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.train.dev_point_wise": [[66, 152], ["max", "print", "print", "print", "print", "print", "print", "helper.load_trec_sst2", "helper.load", "map", "len", "len", "len", "helper.prepare", "helper.prepare", "len", "tensorflow.Graph().as_default", "tensorflow.Session", "int", "time.localtime", "time.strftime", "time.strftime", "print", "train[].str.split", "len", "tensorflow.device", "tensorflow.ConfigProto", "time.time", "tf.Session.as_default", "open", "log.write", "model_LSTM.Complex_order.LSTM", "model_LSTM.Complex_order.LSTM.build_graph", "tensorflow.Variable", "tensorflow.train.AdamOptimizer", "tf.train.AdamOptimizer.compute_gradients", "tf.train.AdamOptimizer.apply_gradients", "tf.Session.run", "range", "acc_flod.append", "log.close", "len", "train[].unique", "tensorflow.Graph", "tensorflow.global_variables_initializer", "helper.batch_gen_with_point_wise", "train.predict", "numpy.argmax", "sklearn.metrics.accuracy_score", "train.predict", "numpy.argmax", "sklearn.metrics.accuracy_score", "print", "print", "log.write", "log.flush", "str", "len", "tf.Session.run", "datetime.datetime.now().isoformat", "print", "tensorflow.train.Saver().save", "datetime.datetime.now", "tensorflow.train.Saver"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load_trec_sst2", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.prepare", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.prepare", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.build_graph", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.batch_gen_with_point_wise", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.train.predict", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.train.predict"], ["", "@", "log_time_delta", "\n", "def", "dev_point_wise", "(", ")", ":", "\n", "    ", "if", "FLAGS", ".", "data", "==", "'TREC'", "or", "FLAGS", ".", "data", "==", "'sst2'", ":", "\n", "        ", "train", ",", "dev", ",", "test", "=", "load_trec_sst2", "(", "FLAGS", ".", "data", ")", "\n", "", "else", ":", "\n", "        ", "train", ",", "dev", "=", "load", "(", "FLAGS", ".", "data", ")", "\n", "", "q_max_sent_length", "=", "max", "(", "\n", "map", "(", "lambda", "x", ":", "len", "(", "x", ")", ",", "train", "[", "'question'", "]", ".", "str", ".", "split", "(", ")", ")", ")", "\n", "print", "(", "q_max_sent_length", ")", "\n", "print", "(", "len", "(", "train", ")", ")", "\n", "print", "(", "'train question unique:{}'", ".", "format", "(", "len", "(", "train", "[", "'question'", "]", ".", "unique", "(", ")", ")", ")", ")", "\n", "print", "(", "'train length'", ",", "len", "(", "train", ")", ")", "\n", "print", "(", "'dev length'", ",", "len", "(", "dev", ")", ")", "\n", "if", "FLAGS", ".", "data", "==", "'TREC'", "or", "FLAGS", ".", "data", "==", "'sst2'", ":", "\n", "        ", "alphabet", ",", "embeddings", "=", "prepare", "(", "[", "train", ",", "dev", ",", "test", "]", ",", "max_sent_length", "=", "q_max_sent_length", ",", "dim", "=", "FLAGS", ".", "embedding_dim", ",", "is_embedding_needed", "=", "True", ",", "fresh", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "alphabet", ",", "embeddings", "=", "prepare", "(", "[", "train", ",", "dev", "]", ",", "max_sent_length", "=", "q_max_sent_length", ",", "dim", "=", "FLAGS", ".", "embedding_dim", ",", "is_embedding_needed", "=", "True", ",", "fresh", "=", "True", ")", "\n", "", "print", "(", "'alphabet:'", ",", "len", "(", "alphabet", ")", ")", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "\"/gpu:0\"", ")", ":", "\n", "            ", "session_conf", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "session_conf", ".", "allow_soft_placement", "=", "FLAGS", ".", "allow_soft_placement", "\n", "session_conf", ".", "log_device_placement", "=", "FLAGS", ".", "log_device_placement", "\n", "session_conf", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "", "sess", "=", "tf", ".", "Session", "(", "config", "=", "session_conf", ")", "\n", "now", "=", "int", "(", "time", ".", "time", "(", ")", ")", "\n", "timeArray", "=", "time", ".", "localtime", "(", "now", ")", "\n", "timeStamp1", "=", "time", ".", "strftime", "(", "\"%Y%m%d%H%M%S\"", ",", "timeArray", ")", "\n", "timeDay", "=", "time", ".", "strftime", "(", "\"%Y%m%d\"", ",", "timeArray", ")", "\n", "print", "(", "timeStamp1", ")", "\n", "with", "sess", ".", "as_default", "(", ")", ",", "open", "(", "precision", ",", "\"w\"", ")", "as", "log", ":", "\n", "            ", "log", ".", "write", "(", "str", "(", "FLAGS", ".", "__flags", ")", "+", "'\\n'", ")", "\n", "cnn", "=", "LSTM", "(", "\n", "max_input_left", "=", "q_max_sent_length", ",", "\n", "vocab_size", "=", "len", "(", "alphabet", ")", ",", "\n", "embeddings", "=", "embeddings", ",", "\n", "embedding_size", "=", "FLAGS", ".", "embedding_dim", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "\n", "l2_reg_lambda", "=", "FLAGS", ".", "l2_reg_lambda", ",", "\n", "is_Embedding_Needed", "=", "True", ",", "\n", "hidden_num", "=", "FLAGS", ".", "hidden_num", ",", "\n", "trainable", "=", "FLAGS", ".", "trainable", ",", "\n", "dataset", "=", "FLAGS", ".", "data", ",", "\n", "extend_feature_dim", "=", "FLAGS", ".", "extend_feature_dim", ")", "\n", "cnn", ".", "build_graph", "(", ")", "\n", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "\"global_step\"", ",", "trainable", "=", "False", ")", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "FLAGS", ".", "learning_rate", ")", "\n", "grads_and_vars", "=", "optimizer", ".", "compute_gradients", "(", "cnn", ".", "loss", ")", "\n", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "\n", "grads_and_vars", ",", "global_step", "=", "global_step", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "acc_max", "=", "0.0000", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "num_epochs", ")", ":", "\n", "                ", "datas", "=", "batch_gen_with_point_wise", "(", "\n", "train", ",", "alphabet", ",", "FLAGS", ".", "batch_size", ",", "q_len", "=", "q_max_sent_length", ")", "\n", "for", "data", "in", "datas", ":", "\n", "                    ", "feed_dict", "=", "{", "\n", "cnn", ".", "question", ":", "data", "[", "0", "]", ",", "\n", "cnn", ".", "input_y", ":", "data", "[", "1", "]", ",", "\n", "cnn", ".", "q_position", ":", "data", "[", "2", "]", ",", "\n", "cnn", ".", "dropout_keep_prob", ":", "FLAGS", ".", "dropout_keep_prob", "\n", "}", "\n", "_", ",", "step", ",", "loss", ",", "accuracy", "=", "sess", ".", "run", "(", "\n", "[", "train_op", ",", "global_step", ",", "cnn", ".", "loss", ",", "cnn", ".", "accuracy", "]", ",", "feed_dict", ")", "\n", "time_str", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "isoformat", "(", ")", "\n", "print", "(", "\"{}: step {}, loss {:g}, acc {:g}  \"", ".", "format", "(", "time_str", ",", "step", ",", "loss", ",", "accuracy", ")", ")", "\n", "", "predicted", "=", "predict", "(", "\n", "sess", ",", "cnn", ",", "train", ",", "alphabet", ",", "FLAGS", ".", "batch_size", ",", "q_max_sent_length", ")", "\n", "predicted_label", "=", "np", ".", "argmax", "(", "predicted", ",", "1", ")", "\n", "acc_train", "=", "accuracy_score", "(", "\n", "train", "[", "'flag'", "]", ",", "predicted_label", ")", "\n", "predicted_dev", "=", "predict", "(", "\n", "sess", ",", "cnn", ",", "dev", ",", "alphabet", ",", "FLAGS", ".", "batch_size", ",", "q_max_sent_length", ")", "\n", "predicted_label", "=", "np", ".", "argmax", "(", "predicted_dev", ",", "1", ")", "\n", "acc_dev", "=", "accuracy_score", "(", "\n", "dev", "[", "'flag'", "]", ",", "predicted_label", ")", "\n", "if", "acc_dev", ">", "acc_max", ":", "\n", "                    ", "tf", ".", "train", ".", "Saver", "(", ")", ".", "save", "(", "sess", ",", "\"model_save/model\"", ",", "write_meta_graph", "=", "True", ")", "\n", "acc_max", "=", "acc_dev", "\n", "", "print", "(", "\"{}:train epoch:acc {}\"", ".", "format", "(", "i", ",", "acc_train", ")", ")", "\n", "print", "(", "\"{}:dev epoch:acc {}\"", ".", "format", "(", "i", ",", "acc_dev", ")", ")", "\n", "line2", "=", "\" {}:epoch: acc{}\"", ".", "format", "(", "i", ",", "acc_dev", ")", "\n", "log", ".", "write", "(", "line2", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "", "acc_flod", ".", "append", "(", "acc_max", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.Alphabet.__init__": [[104, 106], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "start_feature_id", "=", "1", ")", ":", "\n", "        ", "self", ".", "fid", "=", "start_feature_id", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.Alphabet.add": [[107, 114], ["helper.Alphabet.get"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "item", ")", ":", "\n", "        ", "idx", "=", "self", ".", "get", "(", "item", ",", "None", ")", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "idx", "=", "self", ".", "fid", "\n", "self", "[", "item", "]", "=", "idx", "\n", "self", ".", "fid", "+=", "1", "\n", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.Alphabet.dump": [[115, 119], ["open", "sorted", "helper.Alphabet.keys", "out.write"], "methods", ["None"], ["", "def", "dump", "(", "self", ",", "fname", ")", ":", "\n", "        ", "with", "open", "(", "fname", ",", "\"w\"", ")", "as", "out", ":", "\n", "            ", "for", "k", "in", "sorted", "(", "self", ".", "keys", "(", ")", ")", ":", "\n", "                ", "out", ".", "write", "(", "\"{}\\t{}\\n\"", ".", "format", "(", "k", ",", "self", "[", "k", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.clean_str_sst": [[37, 41], ["re.sub", "re.sub", "re.sub.strip().lower", "re.sub.strip"], "function", ["None"], ["def", "clean_str_sst", "(", "string", ")", ":", "\n", "    ", "string", "=", "re", ".", "sub", "(", "r\"[^A-Za-z0-9(),!?\\'\\`]\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\s{2,}\"", ",", "\" \"", ",", "string", ")", "\n", "return", "string", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "", "def", "clean_str", "(", "string", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.clean_str": [[41, 56], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.strip().lower", "re.sub.strip"], "function", ["None"], ["", "def", "clean_str", "(", "string", ")", ":", "\n", "    ", "string", "=", "re", ".", "sub", "(", "r\"[^A-Za-z0-9(),!?\\'\\`]\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'s\"", ",", "\" \\'s\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ve\"", ",", "\" \\'ve\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"n\\'t\"", ",", "\" n\\'t\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'re\"", ",", "\" \\'re\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'d\"", ",", "\" \\'d\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ll\"", ",", "\" \\'ll\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\",\"", ",", "\" , \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"!\"", ",", "\" ! \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\(\"", ",", "\" \\( \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\)\"", ",", "\" \\) \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\?\"", ",", "\" \\? \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\s{2,}\"", ",", "\" \"", ",", "string", ")", "\n", "return", "string", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "", "def", "process", "(", "dataset", "=", "dataset", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.process": [[56, 81], ["os.path.join", "pandas.concat", "shuffle().reset_index", "os.path.join", "os.path.join", "train[].to_csv", "dev[].to_csv", "print", "os.path.exists", "os.makedirs", "os.path.join", "datas.append", "open", "enumerate", "pandas.DataFrame", "shuffle", "int", "records.append", "len", "int", "numpy.array", "len", "clean_str().strip", "len", "helper.clean_str"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.clean_str"], ["", "def", "process", "(", "dataset", "=", "dataset", ")", ":", "\n", "    ", "data_dir", "=", "\"../data/\"", "+", "dataset", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"rt-polaritydata\"", ")", "\n", "saved_path", "=", "data_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "saved_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "saved_path", ")", "\n", "", "datas", "=", "[", "]", "\n", "for", "polarity", "in", "(", "\"neg\"", ",", "\"pos\"", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "root", ",", "polarity", ")", "\n", "records", "=", "[", "]", "\n", "with", "open", "(", "filename", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"replace\"", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "records", ".", "append", "(", "{", "\"text\"", ":", "clean_str", "(", "line", ")", ".", "strip", "(", ")", ",", "\"label\"", ":", "0", "if", "polarity", "==", "\"pos\"", "else", "1", "}", ")", "\n", "", "", "datas", ".", "append", "(", "pd", ".", "DataFrame", "(", "records", ")", ")", "\n", "", "df", "=", "pd", ".", "concat", "(", "datas", ")", "\n", "from", "sklearn", ".", "utils", "import", "shuffle", "\n", "df", "=", "shuffle", "(", "df", ")", ".", "reset_index", "(", ")", "\n", "split_index", "=", "[", "True", "]", "*", "int", "(", "len", "(", "df", ")", "*", "0.9", ")", "+", "[", "False", "]", "*", "(", "len", "(", "df", ")", "-", "int", "(", "len", "(", "df", ")", "*", "0.9", ")", ")", "\n", "train", "=", "df", "[", "split_index", "]", "\n", "dev", "=", "df", "[", "~", "np", ".", "array", "(", "split_index", ")", "]", "\n", "train_filename", "=", "os", ".", "path", ".", "join", "(", "saved_path", ",", "\"train.csv\"", ")", "\n", "test_filename", "=", "os", ".", "path", ".", "join", "(", "saved_path", ",", "\"dev.csv\"", ")", "\n", "train", "[", "[", "\"text\"", ",", "\"label\"", "]", "]", ".", "to_csv", "(", "train_filename", ",", "encoding", "=", "\"utf-8\"", ",", "sep", "=", "\"\\t\"", ",", "index", "=", "False", ",", "header", "=", "None", ")", "\n", "dev", "[", "[", "\"text\"", ",", "\"label\"", "]", "]", ".", "to_csv", "(", "test_filename", ",", "encoding", "=", "\"utf-8\"", ",", "sep", "=", "\"\\t\"", ",", "index", "=", "False", ",", "header", "=", "None", ")", "\n", "print", "(", "\"processing into formated files over\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.cut": [[83, 89], ["sentence.lower().split", "sentence.lower", "sentence.split"], "function", ["None"], ["", "def", "cut", "(", "sentence", ",", "isEnglish", "=", "isEnglish", ")", ":", "\n", "    ", "if", "isEnglish", ":", "\n", "        ", "tokens", "=", "sentence", ".", "lower", "(", ")", ".", "split", "(", ")", "\n", "", "else", ":", "\n", "        ", "tokens", "=", "[", "word", "for", "word", "in", "sentence", ".", "split", "(", ")", "if", "word", "not", "in", "stopwords", "]", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.log_time_delta": [[91, 101], ["functools.wraps", "time.time", "func", "time.time", "print"], "function", ["None"], ["", "def", "log_time_delta", "(", "func", ")", ":", "\n", "    ", "@", "wraps", "(", "func", ")", "\n", "def", "_deco", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "ret", "=", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "delta", "=", "end", "-", "start", "\n", "print", "(", "\"%s runed %.2f seconds\"", "%", "(", "func", ".", "__name__", ",", "delta", ")", ")", "\n", "return", "ret", "\n", "", "return", "_deco", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.prepare": [[121, 171], ["os.path.exists", "pickle.load", "helper.Alphabet", "helper.Alphabet.add", "helper.Alphabet.add", "print", "helper.Alphabet.dump", "open", "len", "os.path.exists", "pickle.load", "pickle.dump", "corpus[].unique", "tqdm.tqdm", "Alphabet.keys", "open", "helper.load_text_vec", "helper.getSubVectorsFromDict", "open", "helper.cut", "set", "gensim.models.keyedvectors.KeyedVectors.load_word2vec_format", "helper.getSubVectors", "helper.getSubVectors_complex_random", "gensim.models.keyedvectors.KeyedVectors.load_word2vec_format", "helper.getSubVectors", "print", "print", "helper.Alphabet.add"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.add", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.add", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.dump", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.dump", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load_text_vec", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectorsFromDict", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.cut", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectors", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectors_complex_random", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectors", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.add"], ["", "", "", "", "@", "log_time_delta", "\n", "def", "prepare", "(", "cropuses", ",", "max_sent_length", "=", "31", ",", "is_embedding_needed", "=", "False", ",", "dim", "=", "50", ",", "fresh", "=", "False", ")", ":", "\n", "    ", "vocab_file", "=", "'model/voc'", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "vocab_file", ")", "and", "not", "fresh", ":", "\n", "        ", "alphabet", "=", "pickle", ".", "load", "(", "open", "(", "vocab_file", ",", "'r'", ")", ")", "\n", "", "else", ":", "\n", "        ", "alphabet", "=", "Alphabet", "(", "start_feature_id", "=", "0", ")", "\n", "alphabet", ".", "add", "(", "'[UNKNOW]'", ")", "\n", "alphabet", ".", "add", "(", "'END'", ")", "\n", "count", "=", "0", "\n", "for", "corpus", "in", "cropuses", ":", "\n", "            ", "for", "texts", "in", "[", "corpus", "[", "\"question\"", "]", ".", "unique", "(", ")", "]", ":", "\n", "                ", "for", "sentence", "in", "tqdm", "(", "texts", ")", ":", "\n", "                    ", "count", "+=", "1", "\n", "if", "count", "%", "10000", "==", "0", ":", "\n", "                        ", "print", "(", "count", ")", "\n", "", "tokens", "=", "cut", "(", "sentence", ")", "\n", "for", "token", "in", "set", "(", "tokens", ")", ":", "\n", "                        ", "alphabet", ".", "add", "(", "token", ")", "\n", "", "", "", "", "print", "(", "len", "(", "alphabet", ".", "keys", "(", ")", ")", ")", "\n", "alphabet", ".", "dump", "(", "'alphabet_clean.txt'", ")", "\n", "", "if", "is_embedding_needed", ":", "\n", "        ", "sub_vec_file", "=", "'../embedding/sub_vector'", "\n", "if", "os", ".", "path", ".", "exists", "(", "sub_vec_file", ")", "and", "not", "fresh", ":", "\n", "            ", "sub_embeddings", "=", "pickle", ".", "load", "(", "open", "(", "sub_vec_file", ",", "'r'", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "isEnglish", ":", "\n", "                ", "if", "dim", "==", "50", ":", "\n", "                    ", "fname", "=", "\"../embedding/aquaint+wiki.txt.gz.ndim=50.bin\"", "\n", "embeddings_1", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "\n", "fname", ",", "binary", "=", "True", ")", "\n", "sub_embeddings", "=", "getSubVectors", "(", "embeddings_1", ",", "alphabet", ",", "dim", ")", "\n", "embedding_complex", "=", "getSubVectors_complex_random", "(", "\n", "alphabet", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "fname", "=", "\"../embedding/GoogleNews-vectors-negative300.bin\"", "\n", "embeddings_1", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "\n", "fname", ",", "binary", "=", "True", ")", "\n", "sub_embeddings", "=", "getSubVectors", "(", "embeddings_1", ",", "alphabet", ",", "dim", ")", "\n", "print", "(", "\"yes\"", ")", "\n", "", "", "else", ":", "\n", "                ", "fname", "=", "'model/wiki.ch.text.vector'", "\n", "embeddings", "=", "load_text_vec", "(", "alphabet", ",", "fname", ",", "embedding_size", "=", "dim", ")", "\n", "sub_embeddings", "=", "getSubVectorsFromDict", "(", "\n", "embeddings", ",", "alphabet", ",", "dim", ")", "\n", "", "pickle", ".", "dump", "(", "sub_embeddings", ",", "open", "(", "sub_vec_file", ",", "'wb'", ")", ")", "\n", "", "return", "alphabet", ",", "sub_embeddings", "\n", "", "else", ":", "\n", "        ", "return", "alphabet", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.load_text_vec_complex": [[173, 184], ["pandas.read_csv", "numpy.load", "range", "len", "file2[].astype", "embedding_alphabet.append"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load"], ["", "", "def", "load_text_vec_complex", "(", "alphabet", ",", "filename", "=", "\"\"", ",", "datafile", "=", "''", ",", "embedding_size", "=", "100", ")", ":", "\n", "    ", "vectors", "=", "{", "}", "\n", "embedding_alphabet", "=", "[", "]", "\n", "file1", "=", "pd", ".", "read_csv", "(", "filename", ",", "sep", "=", "'\\t'", ",", "names", "=", "[", "\"word\"", ",", "\"id\"", "]", ")", "\n", "file2", "=", "np", ".", "load", "(", "datafile", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "file1", ")", ")", ":", "\n", "        ", "word", "=", "file1", "[", "'word'", "]", "[", "i", "]", "\n", "if", "word", "in", "alphabet", ":", "\n", "            ", "vectors", "[", "word", "]", "=", "file2", "[", "i", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "embedding_alphabet", ".", "append", "(", "word", ")", "\n", "", "", "return", "vectors", ",", "embedding_alphabet", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.getSubVectors_complex": [[186, 196], ["embeddings.append", "embeddings.append", "numpy.random.uniform", "eval"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.eval"], ["", "def", "getSubVectors_complex", "(", "vectors", ",", "vocab", ",", "embedding_alphabet", ",", "dim", "=", "100", ")", ":", "\n", "\n", "    ", "temp_vec", "=", "0", "\n", "embeddings", "=", "[", "]", "\n", "for", "word", "in", "vocab", ":", "\n", "        ", "if", "word", "in", "embedding_alphabet", ":", "\n", "            ", "embeddings", ".", "append", "(", "vectors", "[", "eval", "(", "'word'", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "embeddings", ".", "append", "(", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "+", "0.25", ",", "100", ")", ")", "\n", "", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.get_lookup_table": [[198, 215], ["np.asarray.append", "range", "numpy.asarray", "len", "np.asarray.append"], "function", ["None"], ["", "def", "get_lookup_table", "(", "embedding_params", ")", ":", "\n", "    ", "id2word", "=", "embedding_params", "[", "'id2word'", "]", "\n", "word_vec", "=", "embedding_params", "[", "'word_vec'", "]", "\n", "lookup_table", "=", "[", "]", "\n", "\n", "# Index 0 corresponds to nothing", "\n", "lookup_table", ".", "append", "(", "[", "0", "]", "*", "embedding_params", "[", "'wvec_dim'", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "id2word", ")", ")", ":", "\n", "        ", "word", "=", "id2word", "[", "i", "]", "\n", "wvec", "=", "[", "0", "]", "*", "embedding_params", "[", "'wvec_dim'", "]", "\n", "if", "word", "in", "word_vec", ":", "\n", "            ", "wvec", "=", "word_vec", "[", "word", "]", "\n", "# print(wvec)", "\n", "", "lookup_table", ".", "append", "(", "wvec", ")", "\n", "\n", "", "lookup_table", "=", "np", ".", "asarray", "(", "lookup_table", ")", "\n", "return", "(", "lookup_table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.getSubVectors": [[217, 227], ["numpy.zeros", "len", "vectors.word_vec", "numpy.random.uniform"], "function", ["None"], ["", "def", "getSubVectors", "(", "vectors", ",", "vocab", ",", "word_embe", ",", "dim", "=", "300", ")", ":", "\n", "    ", "embedding", "=", "np", ".", "zeros", "(", "(", "len", "(", "vocab", ")", ",", "dim", ")", ")", "\n", "temp_vec", "=", "0", "\n", "for", "word", "in", "vocab", ":", "\n", "        ", "if", "word", "in", "vectors", ".", "vocab", ":", "\n", "            ", "embedding", "[", "vocab", "[", "word", "]", "]", "=", "vectors", ".", "word_vec", "(", "word", ")", "\n", "", "else", ":", "\n", "            ", "embedding", "[", "vocab", "[", "word", "]", "\n", "]", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "+", "0.5", ",", "vectors", ".", "syn0", ".", "shape", "[", "1", "]", ")", "\n", "", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.getSubVectors_complex_random": [[249, 254], ["numpy.zeros", "numpy.ones", "len"], "function", ["None"], ["", "", "", "def", "getSubVectors_complex_random", "(", "vocab", ",", "dim", "=", "1", ")", ":", "\n", "    ", "embedding", "=", "np", ".", "zeros", "(", "(", "len", "(", "vocab", ")", ",", "1", ")", ")", "\n", "for", "word", "in", "vocab", ":", "\n", "        ", "embedding", "[", "vocab", "[", "word", "]", "]", "=", "np", ".", "ones", "(", "1", ")", "\n", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.getSubVectors_complex_uniform": [[256, 262], ["numpy.zeros", "range", "numpy.random.uniform"], "function", ["None"], ["", "def", "getSubVectors_complex_uniform", "(", "max_sentence", ",", "dim", "=", "50", ")", ":", "\n", "    ", "embedding", "=", "np", ".", "zeros", "(", "(", "max_sentence", ",", "dim", ")", ")", "\n", "for", "i", "in", "range", "(", "max_sentence", ")", ":", "\n", "        ", "embedding", "[", "i", "]", "=", "np", ".", "random", ".", "uniform", "(", "+", "(", "(", "2", "*", "math", ".", "pi", ")", "/", "30", ")", "\n", "*", "i", ",", "+", "(", "(", "2", "*", "math", ".", "pi", ")", "/", "30", ")", "*", "(", "i", "+", "1", ")", ",", "dim", ")", "\n", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.load_text_vec": [[264, 284], ["print", "print", "print", "open", "len", "line.strip().split", "vectors.keys", "print", "len", "print", "line.strip"], "function", ["None"], ["", "def", "load_text_vec", "(", "alphabet", ",", "filename", "=", "\"\"", ",", "embedding_size", "=", "100", ")", ":", "\n", "    ", "vectors", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "i", "=", "0", "\n", "for", "line", "in", "f", ":", "\n", "            ", "i", "+=", "1", "\n", "if", "i", "%", "100000", "==", "0", ":", "\n", "                ", "print", "(", "'epch %d'", "%", "i", ")", "\n", "", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "items", ")", "==", "2", ":", "\n", "                ", "vocab_size", ",", "embedding_size", "=", "items", "[", "0", "]", ",", "items", "[", "1", "]", "\n", "print", "(", "vocab_size", ",", "embedding_size", ")", "\n", "", "else", ":", "\n", "                ", "word", "=", "items", "[", "0", "]", "\n", "if", "word", "in", "alphabet", ":", "\n", "                    ", "vectors", "[", "word", "]", "=", "items", "[", "1", ":", "]", "\n", "", "", "", "", "print", "(", "'embedding_size'", ",", "embedding_size", ")", "\n", "print", "(", "'done'", ")", "\n", "print", "(", "'words found in wor2vec embedding '", ",", "len", "(", "vectors", ".", "keys", "(", ")", ")", ")", "\n", "return", "vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.getSubVectorsFromDict": [[286, 301], ["open", "numpy.zeros", "open.close", "print", "len", "open.write", "numpy.random.uniform"], "function", ["None"], ["", "def", "getSubVectorsFromDict", "(", "vectors", ",", "vocab", ",", "dim", "=", "300", ")", ":", "\n", "    ", "file", "=", "open", "(", "'missword'", ",", "'w'", ")", "\n", "embedding", "=", "np", ".", "zeros", "(", "(", "len", "(", "vocab", ")", ",", "dim", ")", ")", "\n", "count", "=", "1", "\n", "for", "word", "in", "vocab", ":", "\n", "\n", "        ", "if", "word", "in", "vectors", ":", "\n", "            ", "count", "+=", "1", "\n", "embedding", "[", "vocab", "[", "word", "]", "]", "=", "vectors", "[", "word", "]", "\n", "", "else", ":", "\n", "            ", "file", ".", "write", "(", "word", "+", "'\\n'", ")", "\n", "embedding", "[", "vocab", "[", "word", "]", "]", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "+", "0.5", ",", "dim", ")", "\n", "", "", "file", ".", "close", "(", ")", "\n", "print", "(", "'word in embedding'", ",", "count", ")", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.position_index": [[303, 308], ["numpy.zeros", "len", "range", "helper.cut", "min", "min"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.cut"], ["", "def", "position_index", "(", "sentence", ",", "length", ")", ":", "\n", "    ", "index", "=", "np", ".", "zeros", "(", "length", ")", "\n", "raw_len", "=", "len", "(", "cut", "(", "sentence", ")", ")", "\n", "index", "[", ":", "min", "(", "raw_len", ",", "length", ")", "]", "=", "range", "(", "1", ",", "min", "(", "raw_len", "+", "1", ",", "length", "+", "1", ")", ")", "\n", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.encode_to_split": [[310, 318], ["helper.cut", "indices.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.cut"], ["", "def", "encode_to_split", "(", "sentence", ",", "alphabet", ",", "max_sentence", "=", "40", ")", ":", "\n", "    ", "indices", "=", "[", "]", "\n", "tokens", "=", "cut", "(", "sentence", ")", "\n", "for", "word", "in", "tokens", ":", "\n", "        ", "indices", ".", "append", "(", "alphabet", "[", "word", "]", ")", "\n", "", "while", "(", "len", "(", "indices", ")", "<", "max_sentence", ")", ":", "\n", "        ", "indices", "+=", "indices", "[", ":", "(", "max_sentence", "-", "len", "(", "indices", ")", ")", "]", "\n", "", "return", "indices", "[", ":", "max_sentence", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.load": [[320, 337], ["helper.process", "tuple", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "pandas.read_csv().fillna", "datas.append", "pandas.read_csv", "pandas.read_csv"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.process"], ["", "def", "load", "(", "dataset", "=", "dataset", ")", ":", "\n", "    ", "process", "(", "dataset", ")", "\n", "data_dir", "=", "\"../data/\"", "+", "dataset", "\n", "datas", "=", "[", "]", "\n", "for", "data_name", "in", "[", "'train.csv'", ",", "'dev.csv'", "]", ":", "\n", "        ", "if", "data_name", "==", "'train.csv'", ":", "\n", "            ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'dev.csv'", ":", "\n", "            ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "\n", "", "", "return", "tuple", "(", "datas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.load_trec_sst2": [[338, 377], ["tuple", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "pandas.read_csv().fillna", "datas.append", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv"], "function", ["None"], ["", "def", "load_trec_sst2", "(", "dataset", "=", "dataset", ")", ":", "\n", "    ", "data_dir", "=", "\"../data/\"", "+", "dataset", "\n", "datas", "=", "[", "]", "\n", "if", "dataset", "==", "'sst2'", ":", "\n", "        ", "for", "data_name", "in", "[", "'train.csv'", ",", "'dev.csv'", ",", "'test.csv'", "]", ":", "\n", "            ", "if", "data_name", "==", "'train.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'dev.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'test.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "data_name", "in", "[", "'train.csv'", ",", "'dev.csv'", ",", "'test.csv'", "]", ":", "\n", "            ", "if", "data_name", "==", "'train.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"flag\"", ",", "\"question\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'dev.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"flag\"", ",", "\"question\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'test.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"flag\"", ",", "\"question\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "\n", "", "", "", "return", "tuple", "(", "datas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.batch_gen_with_single": [[379, 396], ["df.iterrows", "int", "range", "helper.encode_to_split", "helper.position_index", "pairs.append", "len", "range", "range", "len"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.encode_to_split", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.position_index"], ["", "@", "log_time_delta", "\n", "def", "batch_gen_with_single", "(", "df", ",", "alphabet", ",", "batch_size", "=", "10", ",", "q_len", "=", "33", ")", ":", "\n", "    ", "pairs", "=", "[", "]", "\n", "input_num", "=", "2", "\n", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "        ", "quetion", "=", "encode_to_split", "(", "\n", "row", "[", "\"question\"", "]", ",", "alphabet", ",", "max_sentence", "=", "q_len", ")", "\n", "q_position", "=", "position_index", "(", "row", "[", "'question'", "]", ",", "q_len", ")", "\n", "pairs", ".", "append", "(", "(", "quetion", ",", "q_position", ")", ")", "\n", "", "n_batches", "=", "int", "(", "len", "(", "pairs", ")", "*", "1.0", "/", "batch_size", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n_batches", ")", ":", "\n", "        ", "batch", "=", "pairs", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "\n", "yield", "[", "[", "pair", "[", "j", "]", "for", "pair", "in", "batch", "]", "for", "j", "in", "range", "(", "input_num", ")", "]", "\n", "", "batch", "=", "pairs", "[", "n_batches", "*", "batch_size", ":", "]", "+", "[", "pairs", "[", "n_batches", "*", "\n", "batch_size", "-", "1", "]", "]", "*", "(", "batch_size", "-", "len", "(", "pairs", ")", "+", "n_batches", "*", "batch_size", ")", "\n", "yield", "[", "[", "pair", "[", "i", "]", "for", "pair", "in", "batch", "]", "for", "i", "in", "range", "(", "input_num", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.helper.batch_gen_with_point_wise": [[398, 416], ["df.iterrows", "int", "sklearn.utils.shuffle", "range", "helper.encode_to_split", "helper.position_index", "transform", "sklearn.utils.shuffle.append", "numpy.array", "len", "numpy.array", "range", "range", "len"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.encode_to_split", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.position_index"], ["", "def", "batch_gen_with_point_wise", "(", "df", ",", "alphabet", ",", "batch_size", "=", "10", ",", "q_len", "=", "33", ")", ":", "\n", "    ", "input_num", "=", "3", "\n", "pairs", "=", "[", "]", "\n", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "        ", "question", "=", "encode_to_split", "(", "\n", "row", "[", "\"question\"", "]", ",", "alphabet", ",", "max_sentence", "=", "q_len", ")", "\n", "q_position", "=", "position_index", "(", "row", "[", "'question'", "]", ",", "q_len", ")", "\n", "label", "=", "transform", "(", "row", "[", "\"flag\"", "]", ")", "\n", "pairs", ".", "append", "(", "(", "question", ",", "label", ",", "q_position", ")", ")", "\n", "", "n_batches", "=", "int", "(", "len", "(", "pairs", ")", "*", "1.0", "/", "batch_size", ")", "\n", "pairs", "=", "sklearn", ".", "utils", ".", "shuffle", "(", "pairs", ",", "random_state", "=", "121", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "n_batches", ")", ":", "\n", "        ", "batch", "=", "pairs", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "yield", "[", "np", ".", "array", "(", "[", "pair", "[", "i", "]", "for", "pair", "in", "batch", "]", ")", "for", "i", "in", "range", "(", "input_num", ")", "]", "\n", "", "batch", "=", "pairs", "[", "n_batches", "*", "batch_size", ":", "]", "+", "[", "pairs", "[", "n_batches", "*", "\n", "batch_size", "-", "1", "]", "]", "*", "(", "batch_size", "-", "len", "(", "pairs", ")", "+", "n_batches", "*", "batch_size", ")", "\n", "yield", "[", "np", ".", "array", "(", "[", "pair", "[", "i", "]", "for", "pair", "in", "batch", "]", ")", "for", "i", "in", "range", "(", "input_num", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.DiagonalMatrix.__init__": [[7, 11], ["tensorflow.random_uniform", "tensorflow.Variable", "tensorflow.complex", "tensorflow.cos", "tensorflow.sin"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "num_units", ")", ":", "\n", "        ", "init_w", "=", "tf", ".", "random_uniform", "(", "[", "num_units", "]", ",", "minval", "=", "-", "np", ".", "pi", ",", "maxval", "=", "np", ".", "pi", ")", "\n", "self", ".", "w", "=", "tf", ".", "Variable", "(", "init_w", ",", "name", "=", "name", ")", "\n", "self", ".", "vec", "=", "tf", ".", "complex", "(", "tf", ".", "cos", "(", "self", ".", "w", ")", ",", "tf", ".", "sin", "(", "self", ".", "w", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.DiagonalMatrix.mul": [[13, 16], ["None"], "methods", ["None"], ["", "def", "mul", "(", "self", ",", "z", ")", ":", "\n", "# [num_units] * [batch_sz, num_units] -> [batch_sz, num_units]", "\n", "        ", "return", "self", ".", "vec", "*", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.ReflectionMatrix.__init__": [[19, 27], ["tensorflow.Variable", "tensorflow.Variable", "tensorflow.complex", "tensorflow.conj", "tensorflow.random_uniform", "tensorflow.random_uniform"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "num_units", ")", ":", "\n", "        ", "self", ".", "num_units", "=", "num_units", "\n", "\n", "self", ".", "re", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "num_units", "]", ",", "minval", "=", "-", "1", ",", "maxval", "=", "1", ")", ",", "name", "=", "name", "+", "\"_re\"", ")", "\n", "self", ".", "im", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "num_units", "]", ",", "minval", "=", "-", "1", ",", "maxval", "=", "1", ")", ",", "name", "=", "name", "+", "\"_im\"", ")", "\n", "self", ".", "v", "=", "tf", ".", "complex", "(", "self", ".", "re", ",", "self", ".", "im", ")", "# [num_units]", "\n", "# self.v = normalize(self.v)", "\n", "self", ".", "vstar", "=", "tf", ".", "conj", "(", "self", ".", "v", ")", "# [num_units]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.ReflectionMatrix.mul": [[29, 36], ["tensorflow.expand_dims", "tensorflow.conj", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.complex", "tensorflow.abs", "tensorflow.matmul", "tensorflow.transpose"], "methods", ["None"], ["", "def", "mul", "(", "self", ",", "z", ")", ":", "\n", "        ", "v", "=", "tf", ".", "expand_dims", "(", "self", ".", "v", ",", "1", ")", "# [num_units, 1]", "\n", "vstar", "=", "tf", ".", "conj", "(", "v", ")", "# [num_units, 1]", "\n", "vstar_z", "=", "tf", ".", "matmul", "(", "z", ",", "vstar", ")", "#[batch_size, 1]", "\n", "sq_norm", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "self", ".", "v", ")", "**", "2", ")", "# [1]", "\n", "factor", "=", "(", "2", "/", "tf", ".", "complex", "(", "sq_norm", ",", "0.0", ")", ")", "\n", "return", "z", "-", "factor", "*", "tf", ".", "matmul", "(", "vstar_z", ",", "tf", ".", "transpose", "(", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.__init__": [[39, 43], ["numpy.random.permutation", "tensorflow.constant"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "num_units", ")", ":", "\n", "        ", "self", ".", "num_units", "=", "num_units", "\n", "perm", "=", "np", ".", "random", ".", "permutation", "(", "num_units", ")", "\n", "self", ".", "P", "=", "tf", ".", "constant", "(", "perm", ",", "tf", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul": [[45, 47], ["tensorflow.transpose", "tensorflow.gather", "tensorflow.transpose"], "methods", ["None"], ["", "def", "mul", "(", "self", ",", "z", ")", ":", "\n", "        ", "return", "tf", ".", "transpose", "(", "tf", ".", "gather", "(", "tf", ".", "transpose", "(", "z", ")", ",", "self", ".", "P", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.URNNCell.__init__": [[80, 101], ["super().__init__", "tensorflow.get_variable", "tensorflow.Variable", "urnn_cell.DiagonalMatrix", "urnn_cell.ReflectionMatrix", "urnn_cell.DiagonalMatrix", "urnn_cell.ReflectionMatrix", "urnn_cell.DiagonalMatrix", "urnn_cell.PermutationMatrix", "tensorflow.zeros", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["def", "__init__", "(", "self", ",", "num_units", ",", "num_in", ",", "reuse", "=", "None", ")", ":", "\n", "        ", "super", "(", "URNNCell", ",", "self", ")", ".", "__init__", "(", "_reuse", "=", "reuse", ")", "\n", "# save class variables", "\n", "self", ".", "_num_in", "=", "num_in", "\n", "self", ".", "_num_units", "=", "num_units", "\n", "self", ".", "_state_size", "=", "num_units", "*", "2", "\n", "self", ".", "_output_size", "=", "num_units", "*", "2", "\n", "\n", "# set up input -> hidden connection", "\n", "self", ".", "w_ih", "=", "tf", ".", "get_variable", "(", "\"w_ih\"", ",", "shape", "=", "[", "2", "*", "num_units", ",", "num_in", "]", ",", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "self", ".", "b_h", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "num_units", ")", ",", "# state size actually", "\n", "name", "=", "\"b_h\"", ")", "\n", "\n", "# elementary unitary matrices to get the big one", "\n", "self", ".", "D1", "=", "DiagonalMatrix", "(", "\"D1\"", ",", "num_units", ")", "\n", "self", ".", "R1", "=", "ReflectionMatrix", "(", "\"R1\"", ",", "num_units", ")", "\n", "self", ".", "D2", "=", "DiagonalMatrix", "(", "\"D2\"", ",", "num_units", ")", "\n", "self", ".", "R2", "=", "ReflectionMatrix", "(", "\"R2\"", ",", "num_units", ")", "\n", "self", ".", "D3", "=", "DiagonalMatrix", "(", "\"D3\"", ",", "num_units", ")", "\n", "self", ".", "P", "=", "PermutationMatrix", "(", "\"P\"", ",", "num_units", ")", "\n", "# needed properties", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.URNNCell.input_size": [[103, 106], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_in", "# real", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.URNNCell.state_size": [[107, 110], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_state_size", "# real", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.URNNCell.output_size": [[111, 114], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_output_size", "# real", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.URNNCell.call": [[115, 160], ["tensorflow.matmul", "tensorflow.complex", "tensorflow.complex", "urnn_cell.URNNCell.D1.mul", "urnn_cell.URNNCell.R1.mul", "urnn_cell.URNNCell.P.mul", "urnn_cell.URNNCell.D2.mul", "urnn_cell.URNNCell.R2.mul", "urnn_cell.URNNCell.D3.mul", "urnn_cell.modReLU", "tensorflow.concat", "tensorflow.transpose", "tensorflow.real", "tensorflow.imag"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.modReLU"], ["", "def", "call", "(", "self", ",", "inputs", ",", "state", ")", ":", "\n", "        ", "\"\"\"The most basic URNN cell.\n        Args:\n            inputs (Tensor - batch_sz x num_in): One batch of cell input.\n            state (Tensor - batch_sz x num_units): Previous cell state: COMPLEX\n        Returns:\n        A tuple (outputs, state):\n            outputs (Tensor - batch_sz x num_units*2): Cell outputs on the whole batch.\n            state (Tensor - batch_sz x num_units): New state of the cell.\n        \"\"\"", "\n", "#print(\"cell.call inputs:\", inputs.shape, inputs.dtype)", "\n", "#print(\"cell.call state:\", state.shape, state.dtype)", "\n", "\n", "# prepare input linear combination", "\n", "inputs_mul", "=", "tf", ".", "matmul", "(", "inputs", ",", "tf", ".", "transpose", "(", "self", ".", "w_ih", ")", ")", "# [batch_sz, 2*num_units]", "\n", "inputs_mul_c", "=", "tf", ".", "complex", "(", "inputs_mul", "[", ":", ",", ":", "self", ".", "_num_units", "]", ",", "\n", "inputs_mul", "[", ":", ",", "self", ".", "_num_units", ":", "]", ")", "\n", "# [batch_sz, num_units]", "\n", "\n", "# prepare state linear combination (always complex!)", "\n", "state_c", "=", "tf", ".", "complex", "(", "state", "[", ":", ",", ":", "self", ".", "_num_units", "]", ",", "\n", "state", "[", ":", ",", "self", ".", "_num_units", ":", "]", ")", "\n", "\n", "state_mul", "=", "self", ".", "D1", ".", "mul", "(", "state_c", ")", "\n", "# state_mul = FFT(state_mul)", "\n", "state_mul", "=", "self", ".", "R1", ".", "mul", "(", "state_mul", ")", "\n", "state_mul", "=", "self", ".", "P", ".", "mul", "(", "state_mul", ")", "\n", "state_mul", "=", "self", ".", "D2", ".", "mul", "(", "state_mul", ")", "\n", "# state_mul = IFFT(state_mul)", "\n", "state_mul", "=", "self", ".", "R2", ".", "mul", "(", "state_mul", ")", "\n", "state_mul", "=", "self", ".", "D3", ".", "mul", "(", "state_mul", ")", "\n", "# [batch_sz, num_units]", "\n", "\n", "# calculate preactivation", "\n", "preact", "=", "inputs_mul_c", "+", "state_mul", "\n", "# [batch_sz, num_units]", "\n", "\n", "new_state_c", "=", "modReLU", "(", "preact", ",", "self", ".", "b_h", ")", "# [batch_sz, num_units] C", "\n", "new_state", "=", "tf", ".", "concat", "(", "[", "tf", ".", "real", "(", "new_state_c", ")", ",", "tf", ".", "imag", "(", "new_state_c", ")", "]", ",", "1", ")", "# [batch_sz, 2*num_units] R", "\n", "# outside network (last dense layer) is ready for 2*num_units -> num_out", "\n", "output", "=", "new_state", "\n", "# print(\"cell.call output:\", output.shape, output.dtype)", "\n", "# print(\"cell.call new_state:\", new_state.shape, new_state.dtype)", "\n", "\n", "return", "output", ",", "new_state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.FFT": [[51, 53], ["tensorflow.fft"], "function", ["None"], ["", "", "def", "FFT", "(", "z", ")", ":", "\n", "    ", "return", "tf", ".", "fft", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.IFFT": [[54, 56], ["tensorflow.ifft"], "function", ["None"], ["", "def", "IFFT", "(", "z", ")", ":", "\n", "    ", "return", "tf", ".", "ifft", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.normalize": [[57, 61], ["tensorflow.sqrt", "tensorflow.complex", "tensorflow.reduce_sum", "tensorflow.real", "tensorflow.imag", "tensorflow.abs"], "function", ["None"], ["", "def", "normalize", "(", "z", ")", ":", "\n", "    ", "norm", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "z", ")", "**", "2", ")", ")", "\n", "factor", "=", "(", "norm", "+", "1e-6", ")", "\n", "return", "tf", ".", "complex", "(", "tf", ".", "real", "(", "z", ")", "/", "factor", ",", "tf", ".", "imag", "(", "z", ")", "/", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.modReLU": [[64, 69], ["tensorflow.abs", "tensorflow.complex", "tensorflow.nn.relu", "tensorflow.real", "tensorflow.imag"], "function", ["None"], ["", "def", "modReLU", "(", "z", ",", "bias", ")", ":", "# relu(|z|+b) * (z / |z|)", "\n", "    ", "norm", "=", "tf", ".", "abs", "(", "z", ")", "\n", "scale", "=", "tf", ".", "nn", ".", "relu", "(", "norm", "+", "bias", ")", "/", "(", "norm", "+", "1e-6", ")", "\n", "scaled", "=", "tf", ".", "complex", "(", "tf", ".", "real", "(", "z", ")", "*", "scale", ",", "tf", ".", "imag", "(", "z", ")", "*", "scale", ")", "\n", "return", "scaled", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.multiply.ComplexMultiply.__init__": [[14, 18], ["keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "# self.output_dim = output_dim", "\n", "        ", "self", ".", "trainable", "=", "False", "\n", "super", "(", "ComplexMultiply", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.multiply.ComplexMultiply.get_config": [[19, 23], ["super().get_config", "dict", "list", "list", "super().get_config.items", "config.items"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.multiply.ComplexMultiply.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "'trainable'", ":", "self", ".", "trainable", "}", "\n", "base_config", "=", "super", "(", "ComplexMultiply", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "dict", "(", "list", "(", "base_config", ".", "items", "(", ")", ")", "+", "list", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.multiply.ComplexMultiply.build": [[24, 42], ["super().build", "isinstance", "ValueError", "len", "ValueError", "str", "len"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.multiply.ComplexMultiply.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "\n", "# Create a trainable weight variable for this layer.", "\n", "        ", "if", "not", "isinstance", "(", "input_shape", ",", "list", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'This layer should be called '", "\n", "'on a list of 2 inputs.'", ")", "\n", "\n", "", "if", "len", "(", "input_shape", ")", "!=", "2", ":", "\n", "             ", "raise", "ValueError", "(", "'This layer should be called '", "\n", "'on a list of 2 inputs.'", "\n", "'Got '", "+", "str", "(", "len", "(", "input_shape", ")", ")", "+", "' inputs.'", ")", "\n", "\n", "\n", "# self.kernel = self.add_weight(name='kernel',", "\n", "#                               shape=(input_shape[1], self.output_dim),", "\n", "#                               initializer='uniform',", "\n", "#                               trainable=True)", "\n", "", "super", "(", "ComplexMultiply", ",", "self", ")", ".", "build", "(", "input_shape", ")", "# Be sure to call this somewhere!", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.multiply.ComplexMultiply.call": [[43, 79], ["isinstance", "ValueError", "len", "ValueError", "len", "keras.backend.repeat_elements", "keras.backend.repeat_elements", "keras.backend.cos", "keras.backend.sin", "len", "keras.backend.cos", "keras.backend.sin", "ValueError", "str", "len", "str", "len"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "if", "not", "isinstance", "(", "inputs", ",", "list", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'This layer should be called '", "\n", "'on a list of 2 inputs.'", ")", "\n", "\n", "", "if", "len", "(", "inputs", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "'This layer should be called '", "\n", "'on a list of 2 inputs.'", "\n", "'Got '", "+", "str", "(", "len", "(", "inputs", ")", ")", "+", "' inputs.'", ")", "\n", "\n", "", "phase", "=", "inputs", "[", "0", "]", "\n", "amplitude", "=", "inputs", "[", "1", "]", "\n", "\n", "\n", "sentence_length", "=", "amplitude", ".", "shape", "[", "1", "]", "# ?,56,100", "\n", "embedding_dim", "=", "amplitude", ".", "shape", "[", "2", "]", "#100", "\n", "if", "(", "len", "(", "phase", ".", "shape", ")", "==", "2", ")", ":", "\n", "            ", "cos", "=", "K", ".", "repeat_elements", "(", "K", ".", "cos", "(", "phase", ")", ",", "embedding_dim", ",", "axis", "=", "2", ")", "\n", "sin", "=", "K", ".", "repeat_elements", "(", "K", ".", "sin", "(", "phase", ")", ",", "embedding_dim", ",", "axis", "=", "2", ")", "\n", "", "elif", "(", "len", "(", "phase", ".", "shape", ")", "==", "3", ")", ":", "\n", "            ", "cos", "=", "K", ".", "cos", "(", "phase", ")", "\n", "sin", "=", "K", ".", "sin", "(", "phase", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Each input should be of dimension 2 or 3.'", "\n", "'Got '", "+", "str", "(", "len", "(", "phase", ".", "shape", ")", ")", "+", "' dimension.'", ")", "\n", "\n", "#        print(cos.shape)", "\n", "#        print(sin.shape)", "\n", "\n", "", "real_part", "=", "cos", "*", "amplitude", "\n", "imag_part", "=", "sin", "*", "amplitude", "\n", "# print(real_part.shape)", "\n", "# print(imag_part.shape)", "\n", "\n", "return", "[", "real_part", ",", "imag_part", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.multiply.ComplexMultiply.compute_output_shape": [[80, 84], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "# print(type(input_shape[1]))", "\n", "\n", "        ", "return", "[", "input_shape", "[", "1", "]", ",", "input_shape", "[", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.multiply.main": [[86, 108], ["keras.models.Input", "keras.models.Input", "keras.models.Model", "keras.models.Model.compile", "keras.models.Model.summary", "numpy.random.random", "numpy.random.random", "keras.models.Model.predict", "print", "multiply.ComplexMultiply"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.train.predict"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "\n", "    ", "input_2", "=", "Input", "(", "shape", "=", "(", "3", ",", "5", ")", ",", "dtype", "=", "'float'", ")", "\n", "input_1", "=", "Input", "(", "shape", "=", "(", "3", ",", "1", ")", ",", "dtype", "=", "'float'", ")", "\n", "[", "output_1", ",", "output_2", "]", "=", "ComplexMultiply", "(", ")", "(", "[", "input_1", ",", "input_2", "]", ")", "\n", "\n", "\n", "model", "=", "Model", "(", "[", "input_1", ",", "input_2", "]", ",", "[", "output_1", ",", "output_2", "]", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'binary_crossentropy'", ",", "\n", "optimizer", "=", "'rmsprop'", ",", "\n", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "x", "=", "np", ".", "random", ".", "random", "(", "(", "3", ",", "3", ",", "1", ")", ")", "\n", "x_2", "=", "np", ".", "random", ".", "random", "(", "(", "3", ",", "3", ",", "5", ")", ")", "\n", "\n", "\n", "# print(x)", "\n", "# print(x_2)", "\n", "output", "=", "model", ".", "predict", "(", "[", "x", ",", "x_2", "]", ")", "\n", "print", "(", "output", "[", "0", "]", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.evaluation.evaluationBypandas_f1_acc": [[8, 37], ["range", "len"], "function", ["None"], ["def", "evaluationBypandas_f1_acc", "(", "df", ",", "predicted_label", ")", ":", "\n", "\t", "df", "[", "'predicted_label'", "]", "=", "predicted_label", "\n", "tp", "=", "0", "\n", "fp", "=", "0", "\n", "tn", "=", "0", "\n", "fn", "=", "0", "\n", "m", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "df", "[", "'predicted_label'", "]", ")", ")", ":", "\n", "\t\t", "if", "df", "[", "'predicted_label'", "]", "[", "i", "]", "==", "df", "[", "'flag'", "]", "[", "i", "]", "and", "df", "[", "'flag'", "]", "[", "i", "]", "==", "1", ":", "\n", "\t\t\t", "tp", "=", "tp", "+", "1", "\n", "", "if", "df", "[", "'predicted_label'", "]", "[", "i", "]", "==", "df", "[", "'flag'", "]", "[", "i", "]", "and", "df", "[", "'flag'", "]", "[", "i", "]", "==", "0", ":", "\n", "\t\t\t", "tn", "=", "tn", "+", "1", "\n", "", "if", "df", "[", "'predicted_label'", "]", "[", "i", "]", "!=", "df", "[", "'flag'", "]", "[", "i", "]", "and", "df", "[", "'flag'", "]", "[", "i", "]", "==", "1", ":", "\n", "\t\t\t", "fp", "=", "fp", "+", "1", "\n", "", "if", "df", "[", "'predicted_label'", "]", "[", "i", "]", "!=", "df", "[", "'flag'", "]", "[", "i", "]", "and", "df", "[", "'flag'", "]", "[", "i", "]", "==", "0", ":", "\n", "\t\t\t", "fn", "=", "fn", "+", "1", "\n", "", "", "if", "tp", "==", "0", "and", "fn", "==", "0", ":", "\n", "\t\t", "recall_rate", "=", "0", "\n", "", "else", ":", "\n", "\t\t", "recall_rate", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "", "precision_rate", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "if", "tp", "==", "0", "and", "fp", "==", "0", ":", "\n", "\t\t", "precision_rate", "=", "0", "\n", "", "accuracy", "=", "(", "tp", "+", "tn", ")", "/", "(", "tp", "+", "fp", "+", "tn", "+", "fn", ")", "\n", "if", "precision_rate", "==", "0", "and", "recall_rate", "==", "0", ":", "\n", "\t\t", "f1_score", "=", "0", "\n", "", "else", ":", "\n", "\t\t", "f1_score", "=", "2", "*", "precision_rate", "*", "recall_rate", "/", "(", "precision_rate", "+", "recall_rate", ")", "\n", "", "return", "accuracy", ",", "f1_score", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.TPE_reduce.LSTM.__init__": [[16, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "max_input_left", ",", "embeddings", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "dataset", ",", "hidden_num", ",", "l2_reg_lambda", "=", "0.0", ",", "is_Embedding_Needed", "=", "False", ",", "trainable", "=", "True", ",", "extend_feature_dim", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "hidden_num", "=", "hidden_num", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "para", "=", "[", "]", "\n", "self", ".", "max_input_left", "=", "max_input_left", "\n", "self", ".", "extend_feature_dim", "=", "extend_feature_dim", "\n", "self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n", "self", ".", "rng", "=", "23455", "\n", "", "def", "create_placeholder", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.TPE_reduce.LSTM.create_placeholder": [[32, 40], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "create_placeholder", "(", "self", ")", ":", "\n", "        ", "self", ".", "question", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'input_question'", ")", "\n", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "6", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "", "def", "Position_Embedding", "(", "self", ",", "position_size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.TPE_reduce.LSTM.Position_Embedding": [[40, 51], ["tensorflow.expand_dims", "tensorflow.range", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.concat", "tensorflow.pow", "tensorflow.cast", "tensorflow.cos", "tensorflow.sin", "tensorflow.range"], "methods", ["None"], ["", "def", "Position_Embedding", "(", "self", ",", "position_size", ")", ":", "\n", "        ", "batch_size", "=", "self", ".", "batch_size", "\n", "seq_len", "=", "500", "\n", "position_j", "=", "1.", "/", "tf", ".", "pow", "(", "10000.", ",", "2", "*", "tf", ".", "range", "(", "position_size", "/", "2", ",", "dtype", "=", "tf", ".", "float32", ")", "/", "position_size", ")", "\n", "position_j", "=", "tf", ".", "expand_dims", "(", "position_j", ",", "0", ")", "\n", "position_i", "=", "tf", ".", "range", "(", "tf", ".", "cast", "(", "seq_len", ",", "tf", ".", "float32", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "position_i", "=", "tf", ".", "expand_dims", "(", "position_i", ",", "1", ")", "\n", "position_ij", "=", "tf", ".", "matmul", "(", "position_i", ",", "position_j", ")", "\n", "position_embedding", "=", "tf", ".", "concat", "(", "[", "math", ".", "pi", "*", "tf", ".", "cos", "(", "position_ij", ")", ",", "math", ".", "pi", "*", "tf", ".", "sin", "(", "position_ij", ")", "]", ",", "1", ")", "\n", "\n", "return", "position_embedding", "\n", "", "def", "add_embeddings", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.TPE_reduce.LSTM.add_embeddings": [[51, 62], ["TPE_reduce.LSTM.concat_embedding", "tensorflow.reduce_sum", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "numpy.array", "TPE_reduce.LSTM.Position_Embedding", "tensorflow.random_uniform"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.concat_embedding", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.Position_Embedding"], ["", "def", "add_embeddings", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "embeddings", ")", ",", "name", "=", "\"W\"", ",", "dtype", "=", "\"float32\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "W_pos", "=", "tf", ".", "Variable", "(", "self", ".", "Position_Embedding", "(", "self", ".", "embedding_size", ")", ",", "name", "=", "'W'", ",", "trainable", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "self", ".", "embedding_W", "=", "W", "\n", "self", ".", "embedding_W_pos", "=", "W_pos", "\n", "", "self", ".", "embedded_chars_q", ",", "self", ".", "embedded_chars_q_pos", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n", "self", ".", "embedded_chars_q", "=", "tf", ".", "reduce_sum", "(", "[", "self", ".", "embedded_chars_q", ",", "self", ".", "embedded_chars_q_pos", "]", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.TPE_reduce.LSTM.feed_neural_work": [[63, 96], ["print", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.nn.dynamic_rnn", "tensorflow.constant", "print", "tensorflow.layers.dense", "tensorflow.nn.relu", "tensorflow.name_scope", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.argmax", "tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.cast", "tensorflow.constant", "tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["", "def", "feed_neural_work", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ".", "embedded_chars_q", ")", "\n", "fw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "\n", "num_units", "=", "self", ".", "hidden_num", ",", "state_is_tuple", "=", "True", ")", "\n", "outputs", ",", "last_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", "=", "fw_cell", ",", "inputs", "=", "self", ".", "embedded_chars_q", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "last", "=", "outputs", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "print", "(", "last", ")", "\n", "fc", "=", "tf", ".", "layers", ".", "dense", "(", "last", ",", "self", ".", "hidden_num", "/", "2", ",", "name", "=", "\"1\"", ")", "\n", "fc", "=", "tf", ".", "nn", ".", "relu", "(", "fc", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "6", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "fc", ",", "W", ",", "b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "#0.754", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "l2_loss", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "\n", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.TPE_reduce.LSTM.concat_embedding": [[96, 100], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n", "        ", "embedded_chars_q", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W", ",", "words_indice", ")", "\n", "embedding_chars_q_pos", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W_pos", ",", "position_indice", ")", "\n", "return", "embedded_chars_q", ",", "embedding_chars_q_pos", "\n", "", "def", "build_graph", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.TPE_reduce.LSTM.build_graph": [[100, 104], ["TPE_reduce.LSTM.create_placeholder", "TPE_reduce.LSTM.add_embeddings", "TPE_reduce.LSTM.feed_neural_work"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_placeholder", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.add_embeddings", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.feed_neural_work"], ["", "def", "build_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_placeholder", "(", ")", "\n", "self", ".", "add_embeddings", "(", ")", "\n", "self", ".", "feed_neural_work", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.PE_reduce.LSTM.__init__": [[16, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "max_input_left", ",", "embeddings", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "dataset", ",", "hidden_num", ",", "l2_reg_lambda", "=", "0.0", ",", "is_Embedding_Needed", "=", "False", ",", "trainable", "=", "True", ",", "extend_feature_dim", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "hidden_num", "=", "hidden_num", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "para", "=", "[", "]", "\n", "self", ".", "max_input_left", "=", "max_input_left", "\n", "self", ".", "extend_feature_dim", "=", "extend_feature_dim", "\n", "self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n", "self", ".", "rng", "=", "23455", "\n", "", "def", "create_placeholder", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.PE_reduce.LSTM.create_placeholder": [[32, 40], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "create_placeholder", "(", "self", ")", ":", "\n", "        ", "self", ".", "question", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'input_question'", ")", "\n", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "6", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "", "def", "add_embeddings", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.PE_reduce.LSTM.add_embeddings": [[40, 51], ["PE_reduce.LSTM.concat_embedding", "tensorflow.reduce_sum", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "numpy.array", "tensorflow.random_uniform", "tensorflow.random_uniform"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.concat_embedding"], ["", "def", "add_embeddings", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "embeddings", ")", ",", "name", "=", "\"W\"", ",", "dtype", "=", "\"float32\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "W_pos", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "500", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "self", ".", "embedding_W", "=", "W", "\n", "self", ".", "embedding_W_pos", "=", "W_pos", "\n", "", "self", ".", "embedded_chars_q", ",", "self", ".", "embedded_chars_q_pos", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n", "self", ".", "embedded_chars_q", "=", "tf", ".", "reduce_sum", "(", "[", "self", ".", "embedded_chars_q", ",", "self", ".", "embedded_chars_q_pos", "]", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.PE_reduce.LSTM.feed_neural_work": [[52, 84], ["print", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.nn.dynamic_rnn", "tensorflow.constant", "print", "tensorflow.layers.dense", "tensorflow.nn.relu", "tensorflow.name_scope", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.argmax", "tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.cast", "tensorflow.constant", "tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["", "def", "feed_neural_work", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ".", "embedded_chars_q", ")", "\n", "fw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "\n", "num_units", "=", "self", ".", "hidden_num", ",", "state_is_tuple", "=", "True", ")", "\n", "outputs", ",", "last_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", "=", "fw_cell", ",", "inputs", "=", "self", ".", "embedded_chars_q", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "last", "=", "outputs", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "print", "(", "last", ")", "\n", "fc", "=", "tf", ".", "layers", ".", "dense", "(", "last", ",", "self", ".", "hidden_num", "/", "2", ",", "name", "=", "\"1\"", ")", "\n", "fc", "=", "tf", ".", "nn", ".", "relu", "(", "fc", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "6", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "fc", ",", "W", ",", "b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "#0.754", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "l2_loss", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "\n", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.PE_reduce.LSTM.concat_embedding": [[84, 88], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n", "        ", "embedded_chars_q", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W", ",", "words_indice", ")", "\n", "embedding_chars_q_pos", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W_pos", ",", "position_indice", ")", "\n", "return", "embedded_chars_q", ",", "embedding_chars_q_pos", "\n", "", "def", "build_graph", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.PE_reduce.LSTM.build_graph": [[88, 92], ["PE_reduce.LSTM.create_placeholder", "PE_reduce.LSTM.add_embeddings", "PE_reduce.LSTM.feed_neural_work"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_placeholder", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.add_embeddings", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.feed_neural_work"], ["", "def", "build_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_placeholder", "(", ")", "\n", "self", ".", "add_embeddings", "(", ")", "\n", "self", ".", "feed_neural_work", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.LSTM_origin.LSTM.__init__": [[16, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "max_input_left", ",", "embeddings", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "dataset", ",", "hidden_num", ",", "l2_reg_lambda", "=", "0.0", ",", "is_Embedding_Needed", "=", "False", ",", "trainable", "=", "True", ",", "extend_feature_dim", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "hidden_num", "=", "hidden_num", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "para", "=", "[", "]", "\n", "self", ".", "max_input_left", "=", "max_input_left", "\n", "self", ".", "extend_feature_dim", "=", "extend_feature_dim", "\n", "self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n", "self", ".", "rng", "=", "23455", "\n", "", "def", "create_placeholder", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.LSTM_origin.LSTM.create_placeholder": [[32, 40], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "create_placeholder", "(", "self", ")", ":", "\n", "        ", "self", ".", "question", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'input_question'", ")", "\n", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "6", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "", "def", "add_embeddings", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.LSTM_origin.LSTM.add_embeddings": [[40, 50], ["LSTM_origin.LSTM.concat_embedding", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "numpy.array", "tensorflow.random_uniform", "tensorflow.random_uniform"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.concat_embedding"], ["", "def", "add_embeddings", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "embeddings", ")", ",", "name", "=", "\"W\"", ",", "dtype", "=", "\"float32\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "W_pos", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "500", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "self", ".", "embedding_W", "=", "W", "\n", "self", ".", "embedding_W_pos", "=", "W_pos", "\n", "", "self", ".", "embedded_chars_q", ",", "self", ".", "embedded_chars_q_pos", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n", "# self.embedded_chars_q=tf.reduce_sum([self.embedded_chars_q,self.embedded_chars_q_pos],0)", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.LSTM_origin.LSTM.feed_neural_work": [[52, 85], ["print", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.nn.dynamic_rnn", "tensorflow.constant", "print", "tensorflow.layers.dense", "tensorflow.nn.relu", "tensorflow.name_scope", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.argmax", "tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.cast", "tensorflow.constant", "tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["", "def", "feed_neural_work", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ".", "embedded_chars_q", ")", "\n", "fw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "\n", "num_units", "=", "self", ".", "hidden_num", ",", "state_is_tuple", "=", "True", ")", "\n", "outputs", ",", "last_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", "=", "fw_cell", ",", "inputs", "=", "self", ".", "embedded_chars_q", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "# outputs=tf.nn.dropout(outputs, self.dropout_keep_prob, name=\"hidden_output_drop\")", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "last", "=", "outputs", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "print", "(", "last", ")", "\n", "fc", "=", "tf", ".", "layers", ".", "dense", "(", "last", ",", "self", ".", "hidden_num", "/", "2", ",", "name", "=", "\"1\"", ")", "\n", "fc", "=", "tf", ".", "nn", ".", "relu", "(", "fc", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "6", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "fc", ",", "W", ",", "b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "#0.754", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "l2_loss", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "\n", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.LSTM_origin.LSTM.concat_embedding": [[85, 89], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n", "        ", "embedded_chars_q", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W", ",", "words_indice", ")", "\n", "embedding_chars_q_pos", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W_pos", ",", "position_indice", ")", "\n", "return", "embedded_chars_q", ",", "embedding_chars_q_pos", "\n", "", "def", "build_graph", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.LSTM_origin.LSTM.build_graph": [[89, 93], ["LSTM_origin.LSTM.create_placeholder", "LSTM_origin.LSTM.add_embeddings", "LSTM_origin.LSTM.feed_neural_work"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_placeholder", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.add_embeddings", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.feed_neural_work"], ["", "def", "build_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_placeholder", "(", ")", "\n", "self", ".", "add_embeddings", "(", ")", "\n", "self", ".", "feed_neural_work", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.Complex_vanilla.LSTM.__init__": [[18, 34], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "max_input_left", ",", "embeddings", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "dataset", ",", "hidden_num", ",", "l2_reg_lambda", "=", "0.0", ",", "is_Embedding_Needed", "=", "False", ",", "trainable", "=", "True", ",", "extend_feature_dim", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "hidden_num", "=", "hidden_num", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "para", "=", "[", "]", "\n", "self", ".", "max_input_left", "=", "max_input_left", "\n", "self", ".", "extend_feature_dim", "=", "extend_feature_dim", "\n", "self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n", "self", ".", "rng", "=", "23455", "\n", "", "def", "create_placeholder", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.Complex_vanilla.LSTM.create_placeholder": [[34, 42], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "create_placeholder", "(", "self", ")", ":", "\n", "        ", "self", ".", "question", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'input_question'", ")", "\n", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "6", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "", "def", "add_embeddings", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.Complex_vanilla.LSTM.add_embeddings": [[42, 52], ["Complex_vanilla.LSTM.concat_embedding", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "numpy.array", "tensorflow.random_uniform", "tensorflow.random_uniform"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.concat_embedding"], ["", "def", "add_embeddings", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "embeddings", ")", ",", "name", "=", "\"W\"", ",", "dtype", "=", "\"float32\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "W_pos", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "0", ",", "2", "*", "math", ".", "pi", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "self", ".", "embedding_W", "=", "W", "\n", "self", ".", "embedding_W_pos", "=", "W_pos", "\n", "", "self", ".", "embedded_chars_q", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.Complex_vanilla.LSTM.concat_embedding": [[52, 58], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.concat", "multiply.ComplexMultiply"], "methods", ["None"], ["", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n", "        ", "embedded_chars_q", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W", ",", "words_indice", ")", "\n", "embedding_chars_q_phase", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W_pos", ",", "words_indice", ")", "\n", "[", "embedded_chars_q", ",", "embedding_chars_q_phase", "]", "=", "ComplexMultiply", "(", ")", "(", "[", "embedding_chars_q_phase", ",", "embedded_chars_q", "]", ")", "\n", "embedded_chars_q", "=", "tf", ".", "concat", "(", "[", "embedded_chars_q", ",", "embedding_chars_q_phase", "]", ",", "1", ")", "\n", "return", "embedded_chars_q", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.Complex_vanilla.LSTM.feed_neural_work": [[59, 88], ["urnn_cell.URNNCell", "tensorflow.constant", "tensorflow.nn.dynamic_rnn", "tensorflow.nn.dropout", "tensorflow.layers.dense", "tensorflow.nn.relu", "tensorflow.name_scope", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.argmax", "tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.cast", "tensorflow.constant", "tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["", "def", "feed_neural_work", "(", "self", ")", ":", "\n", "        ", "self", ".", "cell", "=", "URNNCell", "(", "num_units", "=", "self", ".", "max_input_left", ",", "num_in", "=", "self", ".", "embedding_size", ")", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "outputs", ",", "final_state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "self", ".", "cell", ",", "self", ".", "embedded_chars_q", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "dropout", "(", "outputs", ",", "self", ".", "dropout_keep_prob", ",", "name", "=", "\"hidden_output_drop\"", ")", "\n", "last", "=", "outputs", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "fc", "=", "tf", ".", "layers", ".", "dense", "(", "last", ",", "self", ".", "hidden_num", "/", "2", ",", "name", "=", "\"1\"", ")", "\n", "fc", "=", "tf", ".", "nn", ".", "relu", "(", "fc", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "6", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "fc", ",", "W", ",", "b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "#0.754", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "l2_loss", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "\n", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.Complex_vanilla.LSTM.build_graph": [[89, 93], ["Complex_vanilla.LSTM.create_placeholder", "Complex_vanilla.LSTM.add_embeddings", "Complex_vanilla.LSTM.feed_neural_work"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_placeholder", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.add_embeddings", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.feed_neural_work"], ["", "", "def", "build_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_placeholder", "(", ")", "\n", "self", ".", "add_embeddings", "(", ")", "\n", "self", ".", "feed_neural_work", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.Complex_order.LSTM.__init__": [[18, 34], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "max_input_left", ",", "embeddings", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "dataset", ",", "hidden_num", ",", "l2_reg_lambda", "=", "0.0", ",", "is_Embedding_Needed", "=", "False", ",", "trainable", "=", "True", ",", "extend_feature_dim", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "hidden_num", "=", "hidden_num", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "para", "=", "[", "]", "\n", "self", ".", "max_input_left", "=", "max_input_left", "\n", "self", ".", "extend_feature_dim", "=", "extend_feature_dim", "\n", "self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n", "self", ".", "rng", "=", "23455", "\n", "", "def", "create_placeholder", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.Complex_order.LSTM.create_placeholder": [[34, 42], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "create_placeholder", "(", "self", ")", ":", "\n", "        ", "self", ".", "question", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'input_question'", ")", "\n", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "6", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "", "def", "Position_Embedding", "(", "self", ",", "position_size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.Complex_order.LSTM.Position_Embedding": [[42, 54], ["tensorflow.expand_dims", "tensorflow.range", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.pow", "tensorflow.cast", "tensorflow.range"], "methods", ["None"], ["", "def", "Position_Embedding", "(", "self", ",", "position_size", ")", ":", "\n", "        ", "batch_size", "=", "self", ".", "batch_size", "\n", "seq_len", "=", "self", ".", "vocab_size", "\n", "position_j", "=", "1.", "/", "tf", ".", "pow", "(", "10000.", ",", "2", "*", "tf", ".", "range", "(", "position_size", ",", "dtype", "=", "tf", ".", "float32", ")", "/", "position_size", ")", "\n", "position_j", "=", "tf", ".", "expand_dims", "(", "position_j", ",", "0", ")", "\n", "\n", "position_i", "=", "tf", ".", "range", "(", "tf", ".", "cast", "(", "seq_len", ",", "tf", ".", "float32", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "position_i", "=", "tf", ".", "expand_dims", "(", "position_i", ",", "1", ")", "\n", "position_ij", "=", "tf", ".", "matmul", "(", "position_i", ",", "position_j", ")", "\n", "position_embedding", "=", "position_ij", "\n", "\n", "return", "position_embedding", "\n", "", "def", "add_embeddings", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.Complex_order.LSTM.add_embeddings": [[54, 64], ["Complex_order.LSTM.concat_embedding", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "numpy.array", "Complex_order.LSTM.Position_Embedding", "tensorflow.random_uniform"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.concat_embedding", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.Position_Embedding"], ["", "def", "add_embeddings", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "embeddings", ")", ",", "name", "=", "\"W\"", ",", "dtype", "=", "\"float32\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "W_pos", "=", "tf", ".", "Variable", "(", "self", ".", "Position_Embedding", "(", "self", ".", "embedding_size", ")", ",", "name", "=", "'W'", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "self", ".", "embedding_W", "=", "W", "\n", "self", ".", "embedding_W_pos", "=", "W_pos", "\n", "", "self", ".", "embedded_chars_q", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n", "", "def", "feed_neural_work", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.Complex_order.LSTM.feed_neural_work": [[64, 93], ["urnn_cell.URNNCell", "tensorflow.constant", "tensorflow.nn.dynamic_rnn", "tensorflow.nn.dropout", "tensorflow.layers.dense", "tensorflow.nn.relu", "tensorflow.name_scope", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.argmax", "tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.cast", "tensorflow.constant", "tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["", "def", "feed_neural_work", "(", "self", ")", ":", "\n", "        ", "self", ".", "cell", "=", "URNNCell", "(", "num_units", "=", "self", ".", "max_input_left", ",", "num_in", "=", "self", ".", "embedding_size", ")", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "\n", "outputs", ",", "final_state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "self", ".", "cell", ",", "self", ".", "embedded_chars_q", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "dropout", "(", "outputs", ",", "self", ".", "dropout_keep_prob", ",", "name", "=", "\"hidden_output_drop\"", ")", "\n", "last", "=", "outputs", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "fc", "=", "tf", ".", "layers", ".", "dense", "(", "last", ",", "self", ".", "hidden_num", "/", "2", ",", "name", "=", "\"1\"", ")", "\n", "fc", "=", "tf", ".", "nn", ".", "relu", "(", "fc", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "6", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "fc", ",", "W", ",", "b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "#0.754", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "l2_loss", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.Complex_order.LSTM.concat_embedding": [[93, 102], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.expand_dims", "tensorflow.cast", "tensorflow.multiply", "tensorflow.concat", "multiply.ComplexMultiply"], "methods", ["None"], ["", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n", "        ", "embedded_chars_q", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W", ",", "words_indice", ")", "\n", "embedding_chars_q_phase", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W_pos", ",", "words_indice", ")", "\n", "pos", "=", "tf", ".", "expand_dims", "(", "position_indice", ",", "2", ")", "\n", "pos", "=", "tf", ".", "cast", "(", "pos", ",", "tf", ".", "float32", ")", "\n", "embedding_chars_q_phase", "=", "tf", ".", "multiply", "(", "pos", ",", "embedding_chars_q_phase", ")", "\n", "[", "embedded_chars_q", ",", "embedding_chars_q_phase", "]", "=", "ComplexMultiply", "(", ")", "(", "[", "embedding_chars_q_phase", ",", "embedded_chars_q", "]", ")", "\n", "embedded_chars_q", "=", "tf", ".", "concat", "(", "[", "embedded_chars_q", ",", "embedding_chars_q_phase", "]", ",", "1", ")", "\n", "return", "embedded_chars_q", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_LSTM.Complex_order.LSTM.build_graph": [[103, 107], ["Complex_order.LSTM.create_placeholder", "Complex_order.LSTM.add_embeddings", "Complex_order.LSTM.feed_neural_work"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_placeholder", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.add_embeddings", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.feed_neural_work"], ["", "def", "build_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_placeholder", "(", ")", "\n", "self", ".", "add_embeddings", "(", ")", "\n", "self", ".", "feed_neural_work", "(", ")", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.train.log_time_delta": [[40, 50], ["functools.wraps", "time.time", "func", "time.time", "print"], "function", ["None"], ["\n", "def", "log_time_delta", "(", "func", ")", ":", "\n", "    ", "@", "wraps", "(", "func", ")", "\n", "def", "_deco", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "ret", "=", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "delta", "=", "end", "-", "start", "\n", "print", "(", "\"%s runed %.2f seconds\"", "%", "(", "func", ".", "__name__", ",", "delta", ")", ")", "\n", "return", "ret", "\n", "", "return", "_deco", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.train.predict": [[52, 63], ["helper.batch_gen_with_single", "numpy.array", "sess.run", "scores.extend", "len"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.batch_gen_with_single"], ["\n", "", "def", "predict", "(", "sess", ",", "cnn", ",", "dev", ",", "alphabet", ",", "batch_size", ",", "q_len", ")", ":", "\n", "    ", "scores", "=", "[", "]", "\n", "for", "data", "in", "batch_gen_with_single", "(", "dev", ",", "alphabet", ",", "batch_size", ",", "q_len", ")", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "cnn", ".", "question", ":", "data", "[", "0", "]", ",", "\n", "cnn", ".", "q_position", ":", "data", "[", "1", "]", ",", "\n", "cnn", ".", "dropout_keep_prob", ":", "1.0", "\n", "}", "\n", "score", "=", "sess", ".", "run", "(", "cnn", ".", "scores", ",", "feed_dict", ")", "\n", "scores", ".", "extend", "(", "score", ")", "\n", "", "return", "np", ".", "array", "(", "scores", "[", ":", "len", "(", "dev", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.train.dev_point_wise": [[65, 148], ["max", "print", "print", "print", "print", "print", "print", "helper.load_trec_sst2", "helper.load", "map", "len", "len", "len", "helper.prepare", "helper.prepare", "len", "tensorflow.Graph().as_default", "tensorflow.Session", "int", "time.localtime", "time.strftime", "time.strftime", "print", "train[].str.split", "len", "tensorflow.device", "tensorflow.ConfigProto", "time.time", "tf.Session.as_default", "open", "log.write", "model_cnn.Complex_order.CNN", "model_cnn.Complex_order.CNN.build_graph", "tensorflow.Variable", "tensorflow.train.AdamOptimizer", "tf.train.AdamOptimizer.compute_gradients", "tf.train.AdamOptimizer.apply_gradients", "tf.Session.run", "range", "acc_flod.append", "log.close", "len", "train[].unique", "tensorflow.Graph", "tensorflow.global_variables_initializer", "helper.batch_gen_with_point_wise", "train.predict", "numpy.argmax", "sklearn.metrics.accuracy_score", "train.predict", "numpy.argmax", "sklearn.metrics.accuracy_score", "print", "print", "log.write", "log.flush", "str", "len", "list", "tf.Session.run", "datetime.datetime.now().isoformat", "print", "tensorflow.train.Saver().save", "map", "FLAGS.filter_sizes.split", "datetime.datetime.now", "tensorflow.train.Saver"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load_trec_sst2", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.prepare", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.prepare", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.build_graph", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.batch_gen_with_point_wise", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.train.predict", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.train.predict"], ["\n", "", "@", "log_time_delta", "\n", "def", "dev_point_wise", "(", ")", ":", "\n", "    ", "if", "FLAGS", ".", "data", "==", "'TREC'", "or", "FLAGS", ".", "data", "==", "'sst2'", ":", "\n", "        ", "train", ",", "dev", ",", "test", "=", "load_trec_sst2", "(", "FLAGS", ".", "data", ")", "\n", "", "else", ":", "\n", "        ", "train", ",", "dev", "=", "load", "(", "FLAGS", ".", "data", ")", "\n", "", "q_max_sent_length", "=", "max", "(", "\n", "map", "(", "lambda", "x", ":", "len", "(", "x", ")", ",", "train", "[", "'question'", "]", ".", "str", ".", "split", "(", ")", ")", ")", "\n", "print", "(", "q_max_sent_length", ")", "\n", "print", "(", "len", "(", "train", ")", ")", "\n", "print", "(", "'train question unique:{}'", ".", "format", "(", "len", "(", "train", "[", "'question'", "]", ".", "unique", "(", ")", ")", ")", ")", "\n", "print", "(", "'train length'", ",", "len", "(", "train", ")", ")", "\n", "print", "(", "'dev length'", ",", "len", "(", "dev", ")", ")", "\n", "if", "FLAGS", ".", "data", "==", "'TREC'", "or", "FLAGS", ".", "data", "==", "'sst2'", ":", "\n", "        ", "alphabet", ",", "embeddings", "=", "prepare", "(", "[", "train", ",", "dev", ",", "test", "]", ",", "max_sent_length", "=", "q_max_sent_length", ",", "dim", "=", "FLAGS", ".", "embedding_dim", ",", "is_embedding_needed", "=", "True", ",", "fresh", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "alphabet", ",", "embeddings", "=", "prepare", "(", "[", "train", ",", "dev", "]", ",", "max_sent_length", "=", "q_max_sent_length", ",", "dim", "=", "FLAGS", ".", "embedding_dim", ",", "is_embedding_needed", "=", "True", ",", "fresh", "=", "True", ")", "\n", "", "print", "(", "'alphabet:'", ",", "len", "(", "alphabet", ")", ")", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "\"/gpu:0\"", ")", ":", "\n", "            ", "session_conf", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "session_conf", ".", "allow_soft_placement", "=", "FLAGS", ".", "allow_soft_placement", "\n", "session_conf", ".", "log_device_placement", "=", "FLAGS", ".", "log_device_placement", "\n", "session_conf", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "", "sess", "=", "tf", ".", "Session", "(", "config", "=", "session_conf", ")", "\n", "now", "=", "int", "(", "time", ".", "time", "(", ")", ")", "\n", "timeArray", "=", "time", ".", "localtime", "(", "now", ")", "\n", "timeStamp1", "=", "time", ".", "strftime", "(", "\"%Y%m%d%H%M%S\"", ",", "timeArray", ")", "\n", "timeDay", "=", "time", ".", "strftime", "(", "\"%Y%m%d\"", ",", "timeArray", ")", "\n", "print", "(", "timeStamp1", ")", "\n", "with", "sess", ".", "as_default", "(", ")", ",", "open", "(", "precision", ",", "\"w\"", ")", "as", "log", ":", "\n", "            ", "log", ".", "write", "(", "str", "(", "FLAGS", ".", "__flags", ")", "+", "'\\n'", ")", "\n", "cnn", "=", "LSTM", "(", "\n", "max_input_left", "=", "q_max_sent_length", ",", "\n", "vocab_size", "=", "len", "(", "alphabet", ")", ",", "\n", "embeddings", "=", "embeddings", ",", "\n", "embedding_size", "=", "FLAGS", ".", "embedding_dim", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "\n", "l2_reg_lambda", "=", "FLAGS", ".", "l2_reg_lambda", ",", "\n", "is_Embedding_Needed", "=", "True", ",", "\n", "hidden_num", "=", "FLAGS", ".", "hidden_num", ",", "\n", "trainable", "=", "FLAGS", ".", "trainable", ",", "\n", "dataset", "=", "FLAGS", ".", "data", ",", "\n", "extend_feature_dim", "=", "FLAGS", ".", "extend_feature_dim", ")", "\n", "cnn", ".", "build_graph", "(", ")", "\n", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "\"global_step\"", ",", "trainable", "=", "False", ")", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "FLAGS", ".", "learning_rate", ")", "\n", "grads_and_vars", "=", "optimizer", ".", "compute_gradients", "(", "cnn", ".", "loss", ")", "\n", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "\n", "grads_and_vars", ",", "global_step", "=", "global_step", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "acc_max", "=", "0.0000", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "num_epochs", ")", ":", "\n", "                ", "datas", "=", "batch_gen_with_point_wise", "(", "\n", "train", ",", "alphabet", ",", "FLAGS", ".", "batch_size", ",", "q_len", "=", "q_max_sent_length", ")", "\n", "for", "data", "in", "datas", ":", "\n", "                    ", "feed_dict", "=", "{", "\n", "cnn", ".", "question", ":", "data", "[", "0", "]", ",", "\n", "cnn", ".", "input_y", ":", "data", "[", "1", "]", ",", "\n", "cnn", ".", "q_position", ":", "data", "[", "2", "]", ",", "\n", "cnn", ".", "dropout_keep_prob", ":", "FLAGS", ".", "dropout_keep_prob", "\n", "}", "\n", "_", ",", "step", ",", "loss", ",", "accuracy", "=", "sess", ".", "run", "(", "\n", "[", "train_op", ",", "global_step", ",", "cnn", ".", "loss", ",", "cnn", ".", "accuracy", "]", ",", "feed_dict", ")", "\n", "time_str", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "isoformat", "(", ")", "\n", "print", "(", "\"{}: step {}, loss {:g}, acc {:g}  \"", ".", "format", "(", "time_str", ",", "step", ",", "loss", ",", "accuracy", ")", ")", "\n", "", "predicted", "=", "predict", "(", "\n", "sess", ",", "cnn", ",", "train", ",", "alphabet", ",", "FLAGS", ".", "batch_size", ",", "q_max_sent_length", ")", "\n", "predicted_label", "=", "np", ".", "argmax", "(", "predicted", ",", "1", ")", "\n", "acc_train", "=", "accuracy_score", "(", "\n", "train", "[", "'flag'", "]", ",", "predicted_label", ")", "\n", "predicted_dev", "=", "predict", "(", "\n", "sess", ",", "cnn", ",", "dev", ",", "alphabet", ",", "FLAGS", ".", "batch_size", ",", "q_max_sent_length", ")", "\n", "predicted_label", "=", "np", ".", "argmax", "(", "predicted_dev", ",", "1", ")", "\n", "acc_dev", "=", "accuracy_score", "(", "\n", "dev", "[", "'flag'", "]", ",", "predicted_label", ")", "\n", "if", "acc_dev", ">", "acc_max", ":", "\n", "                    ", "tf", ".", "train", ".", "Saver", "(", ")", ".", "save", "(", "sess", ",", "\"model_save/model\"", ",", "write_meta_graph", "=", "True", ")", "\n", "acc_max", "=", "acc_dev", "\n", "", "print", "(", "\"{}:train epoch:acc {}\"", ".", "format", "(", "i", ",", "acc_train", ")", ")", "\n", "print", "(", "\"{}:dev epoch:acc {}\"", ".", "format", "(", "i", ",", "acc_dev", ")", ")", "\n", "line2", "=", "\" {}:epoch: acc{}\"", ".", "format", "(", "i", ",", "acc_dev", ")", "\n", "log", ".", "write", "(", "line2", "+", "'\\n'", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.Alphabet.__init__": [[104, 106], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "start_feature_id", "=", "1", ")", ":", "\n", "        ", "self", ".", "fid", "=", "start_feature_id", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.Alphabet.add": [[107, 114], ["helper.Alphabet.get"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "item", ")", ":", "\n", "        ", "idx", "=", "self", ".", "get", "(", "item", ",", "None", ")", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "idx", "=", "self", ".", "fid", "\n", "self", "[", "item", "]", "=", "idx", "\n", "self", ".", "fid", "+=", "1", "\n", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.Alphabet.dump": [[115, 119], ["open", "sorted", "helper.Alphabet.keys", "out.write"], "methods", ["None"], ["", "def", "dump", "(", "self", ",", "fname", ")", ":", "\n", "        ", "with", "open", "(", "fname", ",", "\"w\"", ")", "as", "out", ":", "\n", "            ", "for", "k", "in", "sorted", "(", "self", ".", "keys", "(", ")", ")", ":", "\n", "                ", "out", ".", "write", "(", "\"{}\\t{}\\n\"", ".", "format", "(", "k", ",", "self", "[", "k", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.clean_str_sst": [[37, 41], ["re.sub", "re.sub", "re.sub.strip().lower", "re.sub.strip"], "function", ["None"], ["def", "clean_str_sst", "(", "string", ")", ":", "\n", "    ", "string", "=", "re", ".", "sub", "(", "r\"[^A-Za-z0-9(),!?\\'\\`]\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\s{2,}\"", ",", "\" \"", ",", "string", ")", "\n", "return", "string", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "", "def", "clean_str", "(", "string", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.clean_str": [[41, 56], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.strip().lower", "re.sub.strip"], "function", ["None"], ["", "def", "clean_str", "(", "string", ")", ":", "\n", "    ", "string", "=", "re", ".", "sub", "(", "r\"[^A-Za-z0-9(),!?\\'\\`]\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'s\"", ",", "\" \\'s\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ve\"", ",", "\" \\'ve\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"n\\'t\"", ",", "\" n\\'t\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'re\"", ",", "\" \\'re\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'d\"", ",", "\" \\'d\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ll\"", ",", "\" \\'ll\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\",\"", ",", "\" , \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"!\"", ",", "\" ! \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\(\"", ",", "\" \\( \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\)\"", ",", "\" \\) \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\?\"", ",", "\" \\? \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\s{2,}\"", ",", "\" \"", ",", "string", ")", "\n", "return", "string", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "", "def", "process", "(", "dataset", "=", "dataset", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.process": [[56, 81], ["os.path.join", "pandas.concat", "shuffle().reset_index", "os.path.join", "os.path.join", "train[].to_csv", "dev[].to_csv", "print", "os.path.exists", "os.makedirs", "os.path.join", "datas.append", "open", "enumerate", "pandas.DataFrame", "shuffle", "int", "records.append", "len", "int", "numpy.array", "len", "clean_str().strip", "len", "helper.clean_str"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.clean_str"], ["", "def", "process", "(", "dataset", "=", "dataset", ")", ":", "\n", "    ", "data_dir", "=", "\"../data/\"", "+", "dataset", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"rt-polaritydata\"", ")", "\n", "saved_path", "=", "data_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "saved_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "saved_path", ")", "\n", "", "datas", "=", "[", "]", "\n", "for", "polarity", "in", "(", "\"neg\"", ",", "\"pos\"", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "root", ",", "polarity", ")", "\n", "records", "=", "[", "]", "\n", "with", "open", "(", "filename", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"replace\"", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "records", ".", "append", "(", "{", "\"text\"", ":", "clean_str", "(", "line", ")", ".", "strip", "(", ")", ",", "\"label\"", ":", "0", "if", "polarity", "==", "\"pos\"", "else", "1", "}", ")", "\n", "", "", "datas", ".", "append", "(", "pd", ".", "DataFrame", "(", "records", ")", ")", "\n", "", "df", "=", "pd", ".", "concat", "(", "datas", ")", "\n", "from", "sklearn", ".", "utils", "import", "shuffle", "\n", "df", "=", "shuffle", "(", "df", ")", ".", "reset_index", "(", ")", "\n", "split_index", "=", "[", "True", "]", "*", "int", "(", "len", "(", "df", ")", "*", "0.9", ")", "+", "[", "False", "]", "*", "(", "len", "(", "df", ")", "-", "int", "(", "len", "(", "df", ")", "*", "0.9", ")", ")", "\n", "train", "=", "df", "[", "split_index", "]", "\n", "dev", "=", "df", "[", "~", "np", ".", "array", "(", "split_index", ")", "]", "\n", "train_filename", "=", "os", ".", "path", ".", "join", "(", "saved_path", ",", "\"train.csv\"", ")", "\n", "test_filename", "=", "os", ".", "path", ".", "join", "(", "saved_path", ",", "\"dev.csv\"", ")", "\n", "train", "[", "[", "\"text\"", ",", "\"label\"", "]", "]", ".", "to_csv", "(", "train_filename", ",", "encoding", "=", "\"utf-8\"", ",", "sep", "=", "\"\\t\"", ",", "index", "=", "False", ",", "header", "=", "None", ")", "\n", "dev", "[", "[", "\"text\"", ",", "\"label\"", "]", "]", ".", "to_csv", "(", "test_filename", ",", "encoding", "=", "\"utf-8\"", ",", "sep", "=", "\"\\t\"", ",", "index", "=", "False", ",", "header", "=", "None", ")", "\n", "print", "(", "\"processing into formated files over\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.cut": [[83, 89], ["sentence.lower().split", "sentence.lower", "sentence.split"], "function", ["None"], ["", "def", "cut", "(", "sentence", ",", "isEnglish", "=", "isEnglish", ")", ":", "\n", "    ", "if", "isEnglish", ":", "\n", "        ", "tokens", "=", "sentence", ".", "lower", "(", ")", ".", "split", "(", ")", "\n", "", "else", ":", "\n", "        ", "tokens", "=", "[", "word", "for", "word", "in", "sentence", ".", "split", "(", ")", "if", "word", "not", "in", "stopwords", "]", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.log_time_delta": [[91, 101], ["functools.wraps", "time.time", "func", "time.time", "print"], "function", ["None"], ["", "def", "log_time_delta", "(", "func", ")", ":", "\n", "    ", "@", "wraps", "(", "func", ")", "\n", "def", "_deco", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "ret", "=", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "delta", "=", "end", "-", "start", "\n", "print", "(", "\"%s runed %.2f seconds\"", "%", "(", "func", ".", "__name__", ",", "delta", ")", ")", "\n", "return", "ret", "\n", "", "return", "_deco", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.prepare": [[121, 171], ["os.path.exists", "pickle.load", "helper.Alphabet", "helper.Alphabet.add", "helper.Alphabet.add", "print", "helper.Alphabet.dump", "open", "len", "os.path.exists", "pickle.load", "pickle.dump", "corpus[].unique", "tqdm.tqdm", "Alphabet.keys", "open", "helper.load_text_vec", "helper.getSubVectorsFromDict", "open", "helper.cut", "set", "gensim.models.keyedvectors.KeyedVectors.load_word2vec_format", "helper.getSubVectors", "helper.getSubVectors_complex_random", "gensim.models.keyedvectors.KeyedVectors.load_word2vec_format", "helper.getSubVectors", "print", "print", "helper.Alphabet.add"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.add", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.add", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.dump", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.dump", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load_text_vec", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectorsFromDict", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.cut", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectors", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectors_complex_random", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectors", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.add"], ["", "", "", "", "@", "log_time_delta", "\n", "def", "prepare", "(", "cropuses", ",", "max_sent_length", "=", "31", ",", "is_embedding_needed", "=", "False", ",", "dim", "=", "50", ",", "fresh", "=", "False", ")", ":", "\n", "    ", "vocab_file", "=", "'model/voc'", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "vocab_file", ")", "and", "not", "fresh", ":", "\n", "        ", "alphabet", "=", "pickle", ".", "load", "(", "open", "(", "vocab_file", ",", "'r'", ")", ")", "\n", "", "else", ":", "\n", "        ", "alphabet", "=", "Alphabet", "(", "start_feature_id", "=", "0", ")", "\n", "alphabet", ".", "add", "(", "'[UNKNOW]'", ")", "\n", "alphabet", ".", "add", "(", "'END'", ")", "\n", "count", "=", "0", "\n", "for", "corpus", "in", "cropuses", ":", "\n", "            ", "for", "texts", "in", "[", "corpus", "[", "\"question\"", "]", ".", "unique", "(", ")", "]", ":", "\n", "                ", "for", "sentence", "in", "tqdm", "(", "texts", ")", ":", "\n", "                    ", "count", "+=", "1", "\n", "if", "count", "%", "10000", "==", "0", ":", "\n", "                        ", "print", "(", "count", ")", "\n", "", "tokens", "=", "cut", "(", "sentence", ")", "\n", "for", "token", "in", "set", "(", "tokens", ")", ":", "\n", "                        ", "alphabet", ".", "add", "(", "token", ")", "\n", "", "", "", "", "print", "(", "len", "(", "alphabet", ".", "keys", "(", ")", ")", ")", "\n", "alphabet", ".", "dump", "(", "'alphabet_clean.txt'", ")", "\n", "", "if", "is_embedding_needed", ":", "\n", "        ", "sub_vec_file", "=", "'../embedding/sub_vector'", "\n", "if", "os", ".", "path", ".", "exists", "(", "sub_vec_file", ")", "and", "not", "fresh", ":", "\n", "            ", "sub_embeddings", "=", "pickle", ".", "load", "(", "open", "(", "sub_vec_file", ",", "'r'", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "isEnglish", ":", "\n", "                ", "if", "dim", "==", "50", ":", "\n", "                    ", "fname", "=", "\"../embedding/aquaint+wiki.txt.gz.ndim=50.bin\"", "\n", "embeddings_1", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "\n", "fname", ",", "binary", "=", "True", ")", "\n", "sub_embeddings", "=", "getSubVectors", "(", "embeddings_1", ",", "alphabet", ",", "dim", ")", "\n", "embedding_complex", "=", "getSubVectors_complex_random", "(", "\n", "alphabet", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "fname", "=", "\"../embedding/GoogleNews-vectors-negative300.bin\"", "\n", "embeddings_1", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "\n", "fname", ",", "binary", "=", "True", ")", "\n", "sub_embeddings", "=", "getSubVectors", "(", "embeddings_1", ",", "alphabet", ",", "dim", ")", "\n", "print", "(", "\"yes\"", ")", "\n", "", "", "else", ":", "\n", "                ", "fname", "=", "'model/wiki.ch.text.vector'", "\n", "embeddings", "=", "load_text_vec", "(", "alphabet", ",", "fname", ",", "embedding_size", "=", "dim", ")", "\n", "sub_embeddings", "=", "getSubVectorsFromDict", "(", "\n", "embeddings", ",", "alphabet", ",", "dim", ")", "\n", "", "pickle", ".", "dump", "(", "sub_embeddings", ",", "open", "(", "sub_vec_file", ",", "'wb'", ")", ")", "\n", "", "return", "alphabet", ",", "sub_embeddings", "\n", "", "else", ":", "\n", "        ", "return", "alphabet", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.load_text_vec_complex": [[173, 184], ["pandas.read_csv", "numpy.load", "range", "len", "file2[].astype", "embedding_alphabet.append"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load"], ["", "", "def", "load_text_vec_complex", "(", "alphabet", ",", "filename", "=", "\"\"", ",", "datafile", "=", "''", ",", "embedding_size", "=", "100", ")", ":", "\n", "    ", "vectors", "=", "{", "}", "\n", "embedding_alphabet", "=", "[", "]", "\n", "file1", "=", "pd", ".", "read_csv", "(", "filename", ",", "sep", "=", "'\\t'", ",", "names", "=", "[", "\"word\"", ",", "\"id\"", "]", ")", "\n", "file2", "=", "np", ".", "load", "(", "datafile", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "file1", ")", ")", ":", "\n", "        ", "word", "=", "file1", "[", "'word'", "]", "[", "i", "]", "\n", "if", "word", "in", "alphabet", ":", "\n", "            ", "vectors", "[", "word", "]", "=", "file2", "[", "i", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "embedding_alphabet", ".", "append", "(", "word", ")", "\n", "", "", "return", "vectors", ",", "embedding_alphabet", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.getSubVectors_complex": [[186, 196], ["embeddings.append", "embeddings.append", "numpy.random.uniform", "eval"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.eval"], ["", "def", "getSubVectors_complex", "(", "vectors", ",", "vocab", ",", "embedding_alphabet", ",", "dim", "=", "100", ")", ":", "\n", "\n", "    ", "temp_vec", "=", "0", "\n", "embeddings", "=", "[", "]", "\n", "for", "word", "in", "vocab", ":", "\n", "        ", "if", "word", "in", "embedding_alphabet", ":", "\n", "            ", "embeddings", ".", "append", "(", "vectors", "[", "eval", "(", "'word'", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "embeddings", ".", "append", "(", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "+", "0.25", ",", "100", ")", ")", "\n", "", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.get_lookup_table": [[198, 215], ["np.asarray.append", "range", "numpy.asarray", "len", "np.asarray.append"], "function", ["None"], ["", "def", "get_lookup_table", "(", "embedding_params", ")", ":", "\n", "    ", "id2word", "=", "embedding_params", "[", "'id2word'", "]", "\n", "word_vec", "=", "embedding_params", "[", "'word_vec'", "]", "\n", "lookup_table", "=", "[", "]", "\n", "\n", "# Index 0 corresponds to nothing", "\n", "lookup_table", ".", "append", "(", "[", "0", "]", "*", "embedding_params", "[", "'wvec_dim'", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "id2word", ")", ")", ":", "\n", "        ", "word", "=", "id2word", "[", "i", "]", "\n", "wvec", "=", "[", "0", "]", "*", "embedding_params", "[", "'wvec_dim'", "]", "\n", "if", "word", "in", "word_vec", ":", "\n", "            ", "wvec", "=", "word_vec", "[", "word", "]", "\n", "# print(wvec)", "\n", "", "lookup_table", ".", "append", "(", "wvec", ")", "\n", "\n", "", "lookup_table", "=", "np", ".", "asarray", "(", "lookup_table", ")", "\n", "return", "(", "lookup_table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.getSubVectors": [[217, 227], ["numpy.zeros", "len", "vectors.word_vec", "numpy.random.uniform"], "function", ["None"], ["", "def", "getSubVectors", "(", "vectors", ",", "vocab", ",", "word_embe", ",", "dim", "=", "300", ")", ":", "\n", "    ", "embedding", "=", "np", ".", "zeros", "(", "(", "len", "(", "vocab", ")", ",", "dim", ")", ")", "\n", "temp_vec", "=", "0", "\n", "for", "word", "in", "vocab", ":", "\n", "        ", "if", "word", "in", "vectors", ".", "vocab", ":", "\n", "            ", "embedding", "[", "vocab", "[", "word", "]", "]", "=", "vectors", ".", "word_vec", "(", "word", ")", "\n", "", "else", ":", "\n", "            ", "embedding", "[", "vocab", "[", "word", "]", "\n", "]", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "+", "0.5", ",", "vectors", ".", "syn0", ".", "shape", "[", "1", "]", ")", "\n", "", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.getSubVectors_complex_random": [[249, 254], ["numpy.zeros", "numpy.ones", "len"], "function", ["None"], ["", "", "", "def", "getSubVectors_complex_random", "(", "vocab", ",", "dim", "=", "1", ")", ":", "\n", "    ", "embedding", "=", "np", ".", "zeros", "(", "(", "len", "(", "vocab", ")", ",", "1", ")", ")", "\n", "for", "word", "in", "vocab", ":", "\n", "        ", "embedding", "[", "vocab", "[", "word", "]", "]", "=", "np", ".", "ones", "(", "1", ")", "\n", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.getSubVectors_complex_uniform": [[256, 262], ["numpy.zeros", "range", "numpy.random.uniform"], "function", ["None"], ["", "def", "getSubVectors_complex_uniform", "(", "max_sentence", ",", "dim", "=", "50", ")", ":", "\n", "    ", "embedding", "=", "np", ".", "zeros", "(", "(", "max_sentence", ",", "dim", ")", ")", "\n", "for", "i", "in", "range", "(", "max_sentence", ")", ":", "\n", "        ", "embedding", "[", "i", "]", "=", "np", ".", "random", ".", "uniform", "(", "+", "(", "(", "2", "*", "math", ".", "pi", ")", "/", "30", ")", "\n", "*", "i", ",", "+", "(", "(", "2", "*", "math", ".", "pi", ")", "/", "30", ")", "*", "(", "i", "+", "1", ")", ",", "dim", ")", "\n", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.load_text_vec": [[264, 284], ["print", "print", "print", "open", "len", "line.strip().split", "vectors.keys", "print", "len", "print", "line.strip"], "function", ["None"], ["", "def", "load_text_vec", "(", "alphabet", ",", "filename", "=", "\"\"", ",", "embedding_size", "=", "100", ")", ":", "\n", "    ", "vectors", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "i", "=", "0", "\n", "for", "line", "in", "f", ":", "\n", "            ", "i", "+=", "1", "\n", "if", "i", "%", "100000", "==", "0", ":", "\n", "                ", "print", "(", "'epch %d'", "%", "i", ")", "\n", "", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "items", ")", "==", "2", ":", "\n", "                ", "vocab_size", ",", "embedding_size", "=", "items", "[", "0", "]", ",", "items", "[", "1", "]", "\n", "print", "(", "vocab_size", ",", "embedding_size", ")", "\n", "", "else", ":", "\n", "                ", "word", "=", "items", "[", "0", "]", "\n", "if", "word", "in", "alphabet", ":", "\n", "                    ", "vectors", "[", "word", "]", "=", "items", "[", "1", ":", "]", "\n", "", "", "", "", "print", "(", "'embedding_size'", ",", "embedding_size", ")", "\n", "print", "(", "'done'", ")", "\n", "print", "(", "'words found in wor2vec embedding '", ",", "len", "(", "vectors", ".", "keys", "(", ")", ")", ")", "\n", "return", "vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.getSubVectorsFromDict": [[286, 301], ["open", "numpy.zeros", "open.close", "print", "len", "open.write", "numpy.random.uniform"], "function", ["None"], ["", "def", "getSubVectorsFromDict", "(", "vectors", ",", "vocab", ",", "dim", "=", "300", ")", ":", "\n", "    ", "file", "=", "open", "(", "'missword'", ",", "'w'", ")", "\n", "embedding", "=", "np", ".", "zeros", "(", "(", "len", "(", "vocab", ")", ",", "dim", ")", ")", "\n", "count", "=", "1", "\n", "for", "word", "in", "vocab", ":", "\n", "\n", "        ", "if", "word", "in", "vectors", ":", "\n", "            ", "count", "+=", "1", "\n", "embedding", "[", "vocab", "[", "word", "]", "]", "=", "vectors", "[", "word", "]", "\n", "", "else", ":", "\n", "            ", "file", ".", "write", "(", "word", "+", "'\\n'", ")", "\n", "embedding", "[", "vocab", "[", "word", "]", "]", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "+", "0.5", ",", "dim", ")", "\n", "", "", "file", ".", "close", "(", ")", "\n", "print", "(", "'word in embedding'", ",", "count", ")", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.position_index": [[303, 308], ["numpy.zeros", "len", "range", "helper.cut", "min", "min"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.cut"], ["", "def", "position_index", "(", "sentence", ",", "length", ")", ":", "\n", "    ", "index", "=", "np", ".", "zeros", "(", "length", ")", "\n", "raw_len", "=", "len", "(", "cut", "(", "sentence", ")", ")", "\n", "index", "[", ":", "min", "(", "raw_len", ",", "length", ")", "]", "=", "range", "(", "1", ",", "min", "(", "raw_len", "+", "1", ",", "length", "+", "1", ")", ")", "\n", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.encode_to_split": [[310, 318], ["helper.cut", "indices.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.cut"], ["", "def", "encode_to_split", "(", "sentence", ",", "alphabet", ",", "max_sentence", "=", "40", ")", ":", "\n", "    ", "indices", "=", "[", "]", "\n", "tokens", "=", "cut", "(", "sentence", ")", "\n", "for", "word", "in", "tokens", ":", "\n", "        ", "indices", ".", "append", "(", "alphabet", "[", "word", "]", ")", "\n", "", "while", "(", "len", "(", "indices", ")", "<", "max_sentence", ")", ":", "\n", "        ", "indices", "+=", "indices", "[", ":", "(", "max_sentence", "-", "len", "(", "indices", ")", ")", "]", "\n", "", "return", "indices", "[", ":", "max_sentence", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.load": [[320, 337], ["helper.process", "tuple", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "pandas.read_csv().fillna", "datas.append", "pandas.read_csv", "pandas.read_csv"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.process"], ["", "def", "load", "(", "dataset", "=", "dataset", ")", ":", "\n", "    ", "process", "(", "dataset", ")", "\n", "data_dir", "=", "\"../data/\"", "+", "dataset", "\n", "datas", "=", "[", "]", "\n", "for", "data_name", "in", "[", "'train.csv'", ",", "'dev.csv'", "]", ":", "\n", "        ", "if", "data_name", "==", "'train.csv'", ":", "\n", "            ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'dev.csv'", ":", "\n", "            ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "\n", "", "", "return", "tuple", "(", "datas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.load_trec_sst2": [[338, 377], ["tuple", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "pandas.read_csv().fillna", "datas.append", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv"], "function", ["None"], ["", "def", "load_trec_sst2", "(", "dataset", "=", "dataset", ")", ":", "\n", "    ", "data_dir", "=", "\"../data/\"", "+", "dataset", "\n", "datas", "=", "[", "]", "\n", "if", "dataset", "==", "'sst2'", ":", "\n", "        ", "for", "data_name", "in", "[", "'train.csv'", ",", "'dev.csv'", ",", "'test.csv'", "]", ":", "\n", "            ", "if", "data_name", "==", "'train.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'dev.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'test.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "data_name", "in", "[", "'train.csv'", ",", "'dev.csv'", ",", "'test.csv'", "]", ":", "\n", "            ", "if", "data_name", "==", "'train.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"flag\"", ",", "\"question\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'dev.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"flag\"", ",", "\"question\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'test.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"flag\"", ",", "\"question\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "\n", "", "", "", "return", "tuple", "(", "datas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.batch_gen_with_single": [[379, 396], ["df.iterrows", "int", "range", "helper.encode_to_split", "helper.position_index", "pairs.append", "len", "range", "range", "len"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.encode_to_split", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.position_index"], ["", "@", "log_time_delta", "\n", "def", "batch_gen_with_single", "(", "df", ",", "alphabet", ",", "batch_size", "=", "10", ",", "q_len", "=", "33", ")", ":", "\n", "    ", "pairs", "=", "[", "]", "\n", "input_num", "=", "2", "\n", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "        ", "quetion", "=", "encode_to_split", "(", "\n", "row", "[", "\"question\"", "]", ",", "alphabet", ",", "max_sentence", "=", "q_len", ")", "\n", "q_position", "=", "position_index", "(", "row", "[", "'question'", "]", ",", "q_len", ")", "\n", "pairs", ".", "append", "(", "(", "quetion", ",", "q_position", ")", ")", "\n", "", "n_batches", "=", "int", "(", "len", "(", "pairs", ")", "*", "1.0", "/", "batch_size", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n_batches", ")", ":", "\n", "        ", "batch", "=", "pairs", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "\n", "yield", "[", "[", "pair", "[", "j", "]", "for", "pair", "in", "batch", "]", "for", "j", "in", "range", "(", "input_num", ")", "]", "\n", "", "batch", "=", "pairs", "[", "n_batches", "*", "batch_size", ":", "]", "+", "[", "pairs", "[", "n_batches", "*", "\n", "batch_size", "-", "1", "]", "]", "*", "(", "batch_size", "-", "len", "(", "pairs", ")", "+", "n_batches", "*", "batch_size", ")", "\n", "yield", "[", "[", "pair", "[", "i", "]", "for", "pair", "in", "batch", "]", "for", "i", "in", "range", "(", "input_num", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.helper.batch_gen_with_point_wise": [[398, 416], ["df.iterrows", "int", "sklearn.utils.shuffle", "range", "helper.encode_to_split", "helper.position_index", "transform", "sklearn.utils.shuffle.append", "numpy.array", "len", "numpy.array", "range", "range", "len"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.encode_to_split", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.position_index"], ["", "def", "batch_gen_with_point_wise", "(", "df", ",", "alphabet", ",", "batch_size", "=", "10", ",", "q_len", "=", "33", ")", ":", "\n", "    ", "input_num", "=", "3", "\n", "pairs", "=", "[", "]", "\n", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "        ", "question", "=", "encode_to_split", "(", "\n", "row", "[", "\"question\"", "]", ",", "alphabet", ",", "max_sentence", "=", "q_len", ")", "\n", "q_position", "=", "position_index", "(", "row", "[", "'question'", "]", ",", "q_len", ")", "\n", "label", "=", "transform", "(", "row", "[", "\"flag\"", "]", ")", "\n", "pairs", ".", "append", "(", "(", "question", ",", "label", ",", "q_position", ")", ")", "\n", "", "n_batches", "=", "int", "(", "len", "(", "pairs", ")", "*", "1.0", "/", "batch_size", ")", "\n", "pairs", "=", "sklearn", ".", "utils", ".", "shuffle", "(", "pairs", ",", "random_state", "=", "121", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "n_batches", ")", ":", "\n", "        ", "batch", "=", "pairs", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "yield", "[", "np", ".", "array", "(", "[", "pair", "[", "i", "]", "for", "pair", "in", "batch", "]", ")", "for", "i", "in", "range", "(", "input_num", ")", "]", "\n", "", "batch", "=", "pairs", "[", "n_batches", "*", "batch_size", ":", "]", "+", "[", "pairs", "[", "n_batches", "*", "\n", "batch_size", "-", "1", "]", "]", "*", "(", "batch_size", "-", "len", "(", "pairs", ")", "+", "n_batches", "*", "batch_size", ")", "\n", "yield", "[", "np", ".", "array", "(", "[", "pair", "[", "i", "]", "for", "pair", "in", "batch", "]", ")", "for", "i", "in", "range", "(", "input_num", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.multiply.ComplexMultiply.__init__": [[14, 18], ["keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "# self.output_dim = output_dim", "\n", "        ", "self", ".", "trainable", "=", "False", "\n", "super", "(", "ComplexMultiply", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.multiply.ComplexMultiply.get_config": [[19, 23], ["super().get_config", "dict", "list", "list", "super().get_config.items", "config.items"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.multiply.ComplexMultiply.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "'trainable'", ":", "self", ".", "trainable", "}", "\n", "base_config", "=", "super", "(", "ComplexMultiply", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "dict", "(", "list", "(", "base_config", ".", "items", "(", ")", ")", "+", "list", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.multiply.ComplexMultiply.build": [[24, 42], ["super().build", "isinstance", "ValueError", "len", "ValueError", "str", "len"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.multiply.ComplexMultiply.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "\n", "# Create a trainable weight variable for this layer.", "\n", "        ", "if", "not", "isinstance", "(", "input_shape", ",", "list", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'This layer should be called '", "\n", "'on a list of 2 inputs.'", ")", "\n", "\n", "", "if", "len", "(", "input_shape", ")", "!=", "2", ":", "\n", "             ", "raise", "ValueError", "(", "'This layer should be called '", "\n", "'on a list of 2 inputs.'", "\n", "'Got '", "+", "str", "(", "len", "(", "input_shape", ")", ")", "+", "' inputs.'", ")", "\n", "\n", "\n", "# self.kernel = self.add_weight(name='kernel',", "\n", "#                               shape=(input_shape[1], self.output_dim),", "\n", "#                               initializer='uniform',", "\n", "#                               trainable=True)", "\n", "", "super", "(", "ComplexMultiply", ",", "self", ")", ".", "build", "(", "input_shape", ")", "# Be sure to call this somewhere!", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.multiply.ComplexMultiply.call": [[43, 79], ["isinstance", "ValueError", "len", "ValueError", "len", "keras.backend.repeat_elements", "keras.backend.repeat_elements", "keras.backend.cos", "keras.backend.sin", "len", "keras.backend.cos", "keras.backend.sin", "ValueError", "str", "len", "str", "len"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "if", "not", "isinstance", "(", "inputs", ",", "list", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'This layer should be called '", "\n", "'on a list of 2 inputs.'", ")", "\n", "\n", "", "if", "len", "(", "inputs", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "'This layer should be called '", "\n", "'on a list of 2 inputs.'", "\n", "'Got '", "+", "str", "(", "len", "(", "inputs", ")", ")", "+", "' inputs.'", ")", "\n", "\n", "", "phase", "=", "inputs", "[", "0", "]", "\n", "amplitude", "=", "inputs", "[", "1", "]", "\n", "\n", "\n", "sentence_length", "=", "amplitude", ".", "shape", "[", "1", "]", "# ?,56,100", "\n", "embedding_dim", "=", "amplitude", ".", "shape", "[", "2", "]", "#100", "\n", "if", "(", "len", "(", "phase", ".", "shape", ")", "==", "2", ")", ":", "\n", "            ", "cos", "=", "K", ".", "repeat_elements", "(", "K", ".", "cos", "(", "phase", ")", ",", "embedding_dim", ",", "axis", "=", "2", ")", "\n", "sin", "=", "K", ".", "repeat_elements", "(", "K", ".", "sin", "(", "phase", ")", ",", "embedding_dim", ",", "axis", "=", "2", ")", "\n", "", "elif", "(", "len", "(", "phase", ".", "shape", ")", "==", "3", ")", ":", "\n", "            ", "cos", "=", "K", ".", "cos", "(", "phase", ")", "\n", "sin", "=", "K", ".", "sin", "(", "phase", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Each input should be of dimension 2 or 3.'", "\n", "'Got '", "+", "str", "(", "len", "(", "phase", ".", "shape", ")", ")", "+", "' dimension.'", ")", "\n", "\n", "#        print(cos.shape)", "\n", "#        print(sin.shape)", "\n", "\n", "", "real_part", "=", "cos", "*", "amplitude", "\n", "imag_part", "=", "sin", "*", "amplitude", "\n", "# print(real_part.shape)", "\n", "# print(imag_part.shape)", "\n", "\n", "return", "[", "real_part", ",", "imag_part", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.multiply.ComplexMultiply.compute_output_shape": [[80, 84], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "# print(type(input_shape[1]))", "\n", "\n", "        ", "return", "[", "input_shape", "[", "1", "]", ",", "input_shape", "[", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.multiply.main": [[86, 108], ["keras.models.Input", "keras.models.Input", "keras.models.Model", "keras.models.Model.compile", "keras.models.Model.summary", "numpy.random.random", "numpy.random.random", "keras.models.Model.predict", "print", "multiply.ComplexMultiply"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.train.predict"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "\n", "    ", "input_2", "=", "Input", "(", "shape", "=", "(", "3", ",", "5", ")", ",", "dtype", "=", "'float'", ")", "\n", "input_1", "=", "Input", "(", "shape", "=", "(", "3", ",", "1", ")", ",", "dtype", "=", "'float'", ")", "\n", "[", "output_1", ",", "output_2", "]", "=", "ComplexMultiply", "(", ")", "(", "[", "input_1", ",", "input_2", "]", ")", "\n", "\n", "\n", "model", "=", "Model", "(", "[", "input_1", ",", "input_2", "]", ",", "[", "output_1", ",", "output_2", "]", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'binary_crossentropy'", ",", "\n", "optimizer", "=", "'rmsprop'", ",", "\n", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "x", "=", "np", ".", "random", ".", "random", "(", "(", "3", ",", "3", ",", "1", ")", ")", "\n", "x_2", "=", "np", ".", "random", ".", "random", "(", "(", "3", ",", "3", ",", "5", ")", ")", "\n", "\n", "\n", "# print(x)", "\n", "# print(x_2)", "\n", "output", "=", "model", ".", "predict", "(", "[", "x", ",", "x_2", "]", ")", "\n", "print", "(", "output", "[", "0", "]", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.mrr_metric": [[10, 17], ["sklearn.utils.shuffle", "sklearn.utils.shuffle.sort_values().reset_index", "candidates[].index.min", "sklearn.utils.shuffle.sort_values"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle"], ["tp", "=", "0", "\n", "fp", "=", "0", "\n", "tn", "=", "0", "\n", "fn", "=", "0", "\n", "m", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "df", "[", "'predicted_label'", "]", ")", ")", ":", "\n", "\t\t", "if", "df", "[", "'predicted_label'", "]", "[", "i", "]", "==", "df", "[", "'flag'", "]", "[", "i", "]", "and", "df", "[", "'flag'", "]", "[", "i", "]", "==", "1", ":", "\n", "\t\t\t", "tp", "=", "tp", "+", "1", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.map_metric": [[17, 28], ["sklearn.utils.shuffle", "sklearn.utils.shuffle.sort_values().reset_index", "enumerate", "len", "len", "sklearn.utils.shuffle.sort_values"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle"], ["\t\t\t", "tp", "=", "tp", "+", "1", "\n", "", "if", "df", "[", "'predicted_label'", "]", "[", "i", "]", "==", "df", "[", "'flag'", "]", "[", "i", "]", "and", "df", "[", "'flag'", "]", "[", "i", "]", "==", "0", ":", "\n", "\t\t\t", "tn", "=", "tn", "+", "1", "\n", "", "if", "df", "[", "'predicted_label'", "]", "[", "i", "]", "!=", "df", "[", "'flag'", "]", "[", "i", "]", "and", "df", "[", "'flag'", "]", "[", "i", "]", "==", "1", ":", "\n", "\t\t\t", "fp", "=", "fp", "+", "1", "\n", "", "if", "df", "[", "'predicted_label'", "]", "[", "i", "]", "!=", "df", "[", "'flag'", "]", "[", "i", "]", "and", "df", "[", "'flag'", "]", "[", "i", "]", "==", "0", ":", "\n", "\t\t\t", "fn", "=", "fn", "+", "1", "\n", "", "", "if", "tp", "==", "0", "and", "fn", "==", "0", ":", "\n", "\t\t", "recall_rate", "=", "0", "\n", "", "else", ":", "\n", "\t\t", "recall_rate", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "", "precision_rate", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.evaluation_plus": [[29, 34], ["pandas.read_csv", "pandas.read_csv", "print", "print", "pd.read_csv.groupby().apply().mean", "pd.read_csv.groupby().apply().mean", "pd.read_csv.groupby().apply", "pd.read_csv.groupby().apply", "pd.read_csv.groupby", "pd.read_csv.groupby"], "function", ["None"], ["if", "tp", "==", "0", "and", "fp", "==", "0", ":", "\n", "\t\t", "precision_rate", "=", "0", "\n", "", "accuracy", "=", "(", "tp", "+", "tn", ")", "/", "(", "tp", "+", "fp", "+", "tn", "+", "fn", ")", "\n", "if", "precision_rate", "==", "0", "and", "recall_rate", "==", "0", ":", "\n", "\t\t", "f1_score", "=", "0", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.my_f1_score": [[34, 37], ["sklearn.metrics.f1_score"], "function", ["None"], ["", "else", ":", "\n", "\t\t", "f1_score", "=", "2", "*", "precision_rate", "*", "recall_rate", "/", "(", "precision_rate", "+", "recall_rate", ")", "\n", "", "return", "accuracy", ",", "f1_score", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.precision_recall_f1": [[37, 47], ["sum", "print", "numpy.equal().astype", "len", "len", "numpy.equal"], "function", ["None"], ["", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.evaluationBypandas_f1_acc": [[47, 75], ["range", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.eval": [[76, 90], ["pd.read_csv.groupby().apply().mean", "pd.read_csv.groupby().apply().mean", "evaluation.write2file", "evaluation.evaluationbyFile", "type", "pandas.read_csv", "platform.system", "pd.read_csv.groupby().apply", "pd.read_csv.groupby().apply", "pd.read_csv.groupby", "pd.read_csv.groupby"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.write2file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.evaluationbyFile"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.evaluate": [[90, 93], ["evaluation.write2file", "evaluation.evaluationbyFile"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.write2file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.evaluationbyFile"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.write2file": [[93, 98], ["open", "f.write"], "function", ["None"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.evaluationbyFile": [[100, 104], ["print", "subprocess.call"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.multiply.ComplexMultiply.call"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.evaluationBypandas": [[104, 109], ["df.groupby().apply().mean", "df.groupby().apply().mean", "df.groupby().apply", "df.groupby().apply", "df.groupby", "df.groupby"], "function", ["None"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.precision_per": [[109, 116], ["sklearn.utils.shuffle", "sklearn.utils.shuffle.sort_values().reset_index", "candidates[].index.min", "sklearn.utils.shuffle.sort_values"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.precision": [[116, 120], ["df.groupby().apply().mean", "df.groupby().apply", "df.groupby"], "function", ["None"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.briany_test_file": [[121, 149], ["len", "dict", "enumerate", "pandas.DataFrame", "df_test.apply", "numpy.arange", "pd.DataFrame.to_csv", "pandas.DataFrame", "df_test.apply", "numpy.arange", "pd.DataFrame.to_csv", "os.path.exists", "os.makedirs", "df_test[].unique", "os.path.join", "os.path.join", "numpy.arange", "numpy.arange"], "function", ["None"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.CNN_origin.CNN.__init__": [[16, 34], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "max_input_left", ",", "embeddings", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "filter_sizes", ",", "\n", "num_filters", ",", "dataset", ",", "l2_reg_lambda", "=", "0.0", ",", "is_Embedding_Needed", "=", "False", ",", "trainable", "=", "True", ",", "extend_feature_dim", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "num_filters", "=", "num_filters", "\n", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "filter_sizes", "=", "filter_sizes", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "para", "=", "[", "]", "\n", "self", ".", "max_input_left", "=", "max_input_left", "\n", "self", ".", "extend_feature_dim", "=", "extend_feature_dim", "\n", "self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n", "self", ".", "rng", "=", "23455", "\n", "", "def", "create_placeholder", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.CNN_origin.CNN.create_placeholder": [[34, 42], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "create_placeholder", "(", "self", ")", ":", "\n", "        ", "self", ".", "question", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'input_question'", ")", "\n", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "6", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "", "def", "add_embeddings", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.CNN_origin.CNN.add_embeddings": [[42, 53], ["CNN_origin.CNN.concat_embedding", "tensorflow.expand_dims", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "numpy.array", "tensorflow.random_uniform", "tensorflow.random_uniform"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.concat_embedding"], ["", "def", "add_embeddings", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "embeddings", ")", ",", "name", "=", "\"W\"", ",", "dtype", "=", "\"float32\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "W_pos", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "500", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "self", ".", "embedding_W", "=", "W", "\n", "self", ".", "embedding_W_pos", "=", "W_pos", "\n", "", "self", ".", "embedded_chars_q", ",", "self", ".", "embedded_chars_q_pos", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n", "self", ".", "embedded_chars_expanded", "=", "tf", ".", "expand_dims", "(", "self", ".", "embedded_chars_q", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.CNN_origin.CNN.feed_neural_work": [[54, 110], ["tensorflow.constant", "enumerate", "tensorflow.concat", "tensorflow.reshape", "len", "tensorflow.name_scope", "tensorflow.nn.dropout", "tensorflow.name_scope", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.argmax", "tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.nn.relu", "tensorflow.nn.max_pool", "pooled_outputs.append", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.cast", "tensorflow.truncated_normal", "tensorflow.constant", "tensorflow.nn.bias_add", "tensorflow.constant", "tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["", "def", "feed_neural_work", "(", "self", ")", ":", "\n", "        ", "pooled_outputs", "=", "[", "]", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "for", "i", ",", "filter_size", "in", "enumerate", "(", "self", ".", "filter_sizes", ")", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "\"conv-maxpool-%s\"", "%", "filter_size", ")", ":", "\n", "                ", "filter_shape", "=", "[", "filter_size", ",", "\n", "self", ".", "embedding_size", ",", "1", ",", "self", ".", "num_filters", "]", "\n", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "\n", "filter_shape", ",", "stddev", "=", "0.1", ")", ",", "name", "=", "\"W\"", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "\n", "0.1", ",", "shape", "=", "[", "self", ".", "num_filters", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "\n", "self", ".", "embedded_chars_expanded", ",", "\n", "W", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "\"VALID\"", ",", "\n", "name", "=", "\"conv\"", ")", "\n", "h", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "b", ")", ",", "name", "=", "\"relu\"", ")", "\n", "pooled", "=", "tf", ".", "nn", ".", "max_pool", "(", "\n", "h", ",", "\n", "ksize", "=", "[", "1", ",", "self", ".", "max_input_left", "-", "filter_size", "+", "1", ",", "1", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "\n", "name", "=", "\"pool\"", ")", "\n", "pooled_outputs", ".", "append", "(", "pooled", ")", "\n", "\n", "", "", "num_filters_total", "=", "self", ".", "num_filters", "*", "len", "(", "self", ".", "filter_sizes", ")", "\n", "self", ".", "h_pool", "=", "tf", ".", "concat", "(", "pooled_outputs", ",", "3", ")", "\n", "self", ".", "h_pool_flat", "=", "tf", ".", "reshape", "(", "self", ".", "h_pool", ",", "[", "-", "1", ",", "num_filters_total", "]", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"dropout\"", ")", ":", "\n", "            ", "self", ".", "h_drop", "=", "tf", ".", "nn", ".", "dropout", "(", "\n", "self", ".", "h_pool_flat", ",", "self", ".", "dropout_keep_prob", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "num_filters_total", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "6", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "num_filters_total", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "self", ".", "h_drop", ",", "W", ",", "b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "l2_loss", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "\n", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.CNN_origin.CNN.concat_embedding": [[110, 114], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n", "        ", "embedded_chars_q", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W", ",", "words_indice", ")", "\n", "embedding_chars_q_pos", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W_pos", ",", "position_indice", ")", "\n", "return", "embedded_chars_q", ",", "embedding_chars_q_pos", "\n", "", "def", "build_graph", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.CNN_origin.CNN.build_graph": [[114, 118], ["CNN_origin.CNN.create_placeholder", "CNN_origin.CNN.add_embeddings", "CNN_origin.CNN.feed_neural_work"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_placeholder", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.add_embeddings", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.feed_neural_work"], ["", "def", "build_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_placeholder", "(", ")", "\n", "self", ".", "add_embeddings", "(", ")", "\n", "self", ".", "feed_neural_work", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.TPE_reduce.CNN.__init__": [[16, 34], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "max_input_left", ",", "embeddings", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "dataset", ",", "hidden_num", ",", "l2_reg_lambda", "=", "0.0", ",", "is_Embedding_Needed", "=", "False", ",", "trainable", "=", "True", ",", "extend_feature_dim", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "hidden_num", "=", "hidden_num", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "para", "=", "[", "]", "\n", "self", ".", "max_input_left", "=", "max_input_left", "\n", "self", ".", "extend_feature_dim", "=", "extend_feature_dim", "\n", "self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n", "self", ".", "rng", "=", "23455", "\n", "", "def", "create_placeholder", "(", "self", ")", ":", "\n", "        ", "self", ".", "question", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'input_question'", ")", "\n", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.TPE_reduce.CNN.create_placeholder": [[34, 42], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "6", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "", "def", "Position_Embedding", "(", "self", ",", "position_size", ")", ":", "\n", "        ", "batch_size", "=", "self", ".", "batch_size", "\n", "seq_len", "=", "500", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.TPE_reduce.CNN.Position_Embedding": [[42, 53], ["tensorflow.expand_dims", "tensorflow.range", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.concat", "tensorflow.pow", "tensorflow.cast", "tensorflow.cos", "tensorflow.sin", "tensorflow.range"], "methods", ["None"], ["seq_len", "=", "500", "\n", "position_j", "=", "1.", "/", "tf", ".", "pow", "(", "10000.", ",", "2", "*", "tf", ".", "range", "(", "position_size", "/", "2", ",", "dtype", "=", "tf", ".", "float32", ")", "/", "position_size", ")", "\n", "position_j", "=", "tf", ".", "expand_dims", "(", "position_j", ",", "0", ")", "\n", "position_i", "=", "tf", ".", "range", "(", "tf", ".", "cast", "(", "seq_len", ",", "tf", ".", "float32", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "position_i", "=", "tf", ".", "expand_dims", "(", "position_i", ",", "1", ")", "\n", "position_ij", "=", "tf", ".", "matmul", "(", "position_i", ",", "position_j", ")", "\n", "position_embedding", "=", "tf", ".", "concat", "(", "[", "math", ".", "pi", "*", "tf", ".", "cos", "(", "position_ij", ")", ",", "math", ".", "pi", "*", "tf", ".", "sin", "(", "position_ij", ")", "]", ",", "1", ")", "\n", "\n", "return", "position_embedding", "\n", "", "def", "add_embeddings", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.TPE_reduce.CNN.add_embeddings": [[53, 65], ["TPE_reduce.CNN.concat_embedding", "tensorflow.reduce_sum", "tensorflow.expand_dims", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "numpy.array", "TPE_reduce.CNN.Position_Embedding", "tensorflow.random_uniform"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.concat_embedding", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.Position_Embedding"], ["            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "embeddings", ")", ",", "name", "=", "\"W\"", ",", "dtype", "=", "\"float32\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "W_pos", "=", "tf", ".", "Variable", "(", "self", ".", "Position_Embedding", "(", "self", ".", "embedding_size", ")", ",", "name", "=", "'W'", ",", "trainable", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "self", ".", "embedding_W", "=", "W", "\n", "self", ".", "embedding_W_pos", "=", "W_pos", "\n", "", "self", ".", "embedded_chars_q", ",", "self", ".", "embedded_chars_q_pos", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n", "self", ".", "embedded_chars_q", "=", "tf", ".", "reduce_sum", "(", "[", "self", ".", "embedded_chars_q", ",", "self", ".", "embedded_chars_q_pos", "]", ",", "0", ")", "\n", "\n", "", "def", "feed_neural_work", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ".", "embedded_chars_q", ")", "\n", "fw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.TPE_reduce.CNN.feed_neural_work": [[66, 123], ["tensorflow.constant", "enumerate", "tensorflow.concat", "tensorflow.reshape", "len", "tensorflow.name_scope", "tensorflow.nn.dropout", "tensorflow.name_scope", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.argmax", "tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.nn.relu", "tensorflow.nn.max_pool", "pooled_outputs.append", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.cast", "tensorflow.truncated_normal", "tensorflow.constant", "tensorflow.nn.bias_add", "tensorflow.constant", "tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["num_units", "=", "self", ".", "hidden_num", ",", "state_is_tuple", "=", "True", ")", "\n", "outputs", ",", "last_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", "=", "fw_cell", ",", "inputs", "=", "self", ".", "embedded_chars_q", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "last", "=", "outputs", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "print", "(", "last", ")", "\n", "fc", "=", "tf", ".", "layers", ".", "dense", "(", "last", ",", "self", ".", "hidden_num", "/", "2", ",", "name", "=", "\"1\"", ")", "\n", "fc", "=", "tf", ".", "nn", ".", "relu", "(", "fc", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "6", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "fc", ",", "W", ",", "b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "#0.754", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "l2_loss", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "\n", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n", "        ", "embedded_chars_q", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W", ",", "words_indice", ")", "\n", "embedding_chars_q_pos", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W_pos", ",", "position_indice", ")", "\n", "return", "embedded_chars_q", ",", "embedding_chars_q_pos", "\n", "", "def", "build_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_placeholder", "(", ")", "\n", "self", ".", "add_embeddings", "(", ")", "\n", "self", ".", "feed_neural_work", "(", ")", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "cnn", "=", "Fasttext", "(", "max_input_left", "=", "33", ",", "\n", "max_input_right", "=", "40", ",", "\n", "vocab_size", "=", "5000", ",", "\n", "embedding_size", "=", "50", ",", "\n", "batch_size", "=", "3", ",", "\n", "embeddings", "=", "None", ",", "\n", "embeddings_complex", "=", "None", ",", "\n", "dropout_keep_prob", "=", "1", ",", "\n", "filter_sizes", "=", "[", "40", "]", ",", "\n", "num_filters", "=", "65", ",", "\n", "l2_reg_lambda", "=", "0.0", ",", "\n", "is_Embedding_Needed", "=", "False", ",", "\n", "trainable", "=", "True", ",", "\n", "overlap_needed", "=", "False", ",", "\n", "pooling", "=", "'max'", ",", "\n", "position_needed", "=", "False", ")", "\n", "cnn", ".", "build_graph", "(", ")", "\n", "input_x_1", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "3", "*", "33", ")", ",", "[", "3", ",", "33", "]", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.TPE_reduce.CNN.concat_embedding": [[123, 127], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["input_x_1", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "3", "*", "33", ")", ",", "[", "3", ",", "33", "]", ")", "\n", "input_x_2", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "3", "*", "40", ")", ",", "[", "3", ",", "40", "]", ")", "\n", "input_y", "=", "np", ".", "ones", "(", "(", "3", ",", "2", ")", ")", "\n", "\n", "input_overlap_q", "=", "np", ".", "ones", "(", "(", "3", ",", "33", ")", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.TPE_reduce.CNN.build_graph": [[127, 131], ["TPE_reduce.CNN.create_placeholder", "TPE_reduce.CNN.add_embeddings", "TPE_reduce.CNN.feed_neural_work"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_placeholder", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.add_embeddings", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.feed_neural_work"], ["input_overlap_q", "=", "np", ".", "ones", "(", "(", "3", ",", "33", ")", ")", "\n", "input_overlap_a", "=", "np", ".", "ones", "(", "(", "3", ",", "40", ")", ")", "\n", "q_posi", "=", "np", ".", "ones", "(", "(", "3", ",", "33", ")", ")", "\n", "a_posi", "=", "np", ".", "ones", "(", "(", "3", ",", "40", ")", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.PE_reduce.CNN.__init__": [[16, 34], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "max_input_left", ",", "embeddings", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "dataset", ",", "hidden_num", ",", "l2_reg_lambda", "=", "0.0", ",", "is_Embedding_Needed", "=", "False", ",", "trainable", "=", "True", ",", "extend_feature_dim", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "hidden_num", "=", "hidden_num", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "para", "=", "[", "]", "\n", "self", ".", "max_input_left", "=", "max_input_left", "\n", "self", ".", "extend_feature_dim", "=", "extend_feature_dim", "\n", "self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n", "self", ".", "rng", "=", "23455", "\n", "", "def", "create_placeholder", "(", "self", ")", ":", "\n", "        ", "self", ".", "question", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'input_question'", ")", "\n", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.PE_reduce.CNN.create_placeholder": [[34, 42], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "6", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "", "def", "add_embeddings", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.PE_reduce.CNN.add_embeddings": [[42, 54], ["PE_reduce.CNN.concat_embedding", "tensorflow.reduce_sum", "tensorflow.expand_dims", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "numpy.array", "tensorflow.random_uniform", "tensorflow.random_uniform"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.concat_embedding"], ["            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "embeddings", ")", ",", "name", "=", "\"W\"", ",", "dtype", "=", "\"float32\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "W_pos", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "500", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "self", ".", "embedding_W", "=", "W", "\n", "self", ".", "embedding_W_pos", "=", "W_pos", "\n", "", "self", ".", "embedded_chars_q", ",", "self", ".", "embedded_chars_q_pos", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n", "self", ".", "embedded_chars_q", "=", "tf", ".", "reduce_sum", "(", "[", "self", ".", "embedded_chars_q", ",", "self", ".", "embedded_chars_q_pos", "]", ",", "0", ")", "\n", "\n", "", "def", "feed_neural_work", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ".", "embedded_chars_q", ")", "\n", "fw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.PE_reduce.CNN.feed_neural_work": [[55, 111], ["tensorflow.constant", "enumerate", "tensorflow.concat", "tensorflow.reshape", "len", "tensorflow.name_scope", "tensorflow.nn.dropout", "tensorflow.name_scope", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.argmax", "tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.nn.relu", "tensorflow.nn.max_pool", "pooled_outputs.append", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.cast", "tensorflow.truncated_normal", "tensorflow.constant", "tensorflow.nn.bias_add", "tensorflow.constant", "tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["num_units", "=", "self", ".", "hidden_num", ",", "state_is_tuple", "=", "True", ")", "\n", "outputs", ",", "last_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", "=", "fw_cell", ",", "inputs", "=", "self", ".", "embedded_chars_q", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "last", "=", "outputs", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "print", "(", "last", ")", "\n", "fc", "=", "tf", ".", "layers", ".", "dense", "(", "last", ",", "self", ".", "hidden_num", "/", "2", ",", "name", "=", "\"1\"", ")", "\n", "fc", "=", "tf", ".", "nn", ".", "relu", "(", "fc", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "6", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "fc", ",", "W", ",", "b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "#0.754", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "l2_loss", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "\n", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n", "        ", "embedded_chars_q", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W", ",", "words_indice", ")", "\n", "embedding_chars_q_pos", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W_pos", ",", "position_indice", ")", "\n", "return", "embedded_chars_q", ",", "embedding_chars_q_pos", "\n", "", "def", "build_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_placeholder", "(", ")", "\n", "self", ".", "add_embeddings", "(", ")", "\n", "self", ".", "feed_neural_work", "(", ")", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "cnn", "=", "Fasttext", "(", "max_input_left", "=", "33", ",", "\n", "max_input_right", "=", "40", ",", "\n", "vocab_size", "=", "5000", ",", "\n", "embedding_size", "=", "50", ",", "\n", "batch_size", "=", "3", ",", "\n", "embeddings", "=", "None", ",", "\n", "embeddings_complex", "=", "None", ",", "\n", "dropout_keep_prob", "=", "1", ",", "\n", "filter_sizes", "=", "[", "40", "]", ",", "\n", "num_filters", "=", "65", ",", "\n", "l2_reg_lambda", "=", "0.0", ",", "\n", "is_Embedding_Needed", "=", "False", ",", "\n", "trainable", "=", "True", ",", "\n", "overlap_needed", "=", "False", ",", "\n", "pooling", "=", "'max'", ",", "\n", "position_needed", "=", "False", ")", "\n", "cnn", ".", "build_graph", "(", ")", "\n", "input_x_1", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "3", "*", "33", ")", ",", "[", "3", ",", "33", "]", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.PE_reduce.CNN.concat_embedding": [[111, 115], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["input_x_1", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "3", "*", "33", ")", ",", "[", "3", ",", "33", "]", ")", "\n", "input_x_2", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "3", "*", "40", ")", ",", "[", "3", ",", "40", "]", ")", "\n", "input_y", "=", "np", ".", "ones", "(", "(", "3", ",", "2", ")", ")", "\n", "\n", "input_overlap_q", "=", "np", ".", "ones", "(", "(", "3", ",", "33", ")", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.PE_reduce.CNN.build_graph": [[115, 119], ["PE_reduce.CNN.create_placeholder", "PE_reduce.CNN.add_embeddings", "PE_reduce.CNN.feed_neural_work"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_placeholder", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.add_embeddings", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.feed_neural_work"], ["input_overlap_q", "=", "np", ".", "ones", "(", "(", "3", ",", "33", ")", ")", "\n", "input_overlap_a", "=", "np", ".", "ones", "(", "(", "3", ",", "40", ")", ")", "\n", "q_posi", "=", "np", ".", "ones", "(", "(", "3", ",", "33", ")", ")", "\n", "a_posi", "=", "np", ".", "ones", "(", "(", "3", ",", "40", ")", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.Complex_vanilla.CNN.__init__": [[16, 34], ["None"], "methods", ["None"], ["\n", "class", "LSTM", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "max_input_left", ",", "embeddings", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "dataset", ",", "hidden_num", ",", "l2_reg_lambda", "=", "0.0", ",", "is_Embedding_Needed", "=", "False", ",", "trainable", "=", "True", ",", "extend_feature_dim", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "hidden_num", "=", "hidden_num", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "para", "=", "[", "]", "\n", "self", ".", "max_input_left", "=", "max_input_left", "\n", "self", ".", "extend_feature_dim", "=", "extend_feature_dim", "\n", "self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n", "self", ".", "rng", "=", "23455", "\n", "", "def", "create_placeholder", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.Complex_vanilla.CNN.create_placeholder": [[34, 42], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "create_placeholder", "(", "self", ")", ":", "\n", "        ", "self", ".", "question", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'input_question'", ")", "\n", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "6", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "", "def", "add_embeddings", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.Complex_vanilla.CNN.add_embeddings": [[42, 52], ["Complex_vanilla.CNN.concat_embedding", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "numpy.array", "tensorflow.random_uniform", "tensorflow.random_uniform"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.concat_embedding"], ["", "def", "add_embeddings", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "embeddings", ")", ",", "name", "=", "\"W\"", ",", "dtype", "=", "\"float32\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "W_pos", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "0", ",", "2", "*", "math", ".", "pi", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "self", ".", "embedding_W", "=", "W", "\n", "self", ".", "embedding_W_pos", "=", "W_pos", "\n", "", "self", ".", "embedded_chars_q", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.Complex_vanilla.CNN.feed_neural_work": [[53, 76], ["Complex_vanilla.CNN.narrow_convolutionandpool_real_imag", "tensorflow.constant", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.name_scope", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.argmax", "tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.cast", "tensorflow.constant", "tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.Complex_order.CNN.narrow_convolutionandpool_real_imag"], ["        ", "embedded_chars_q", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W", ",", "words_indice", ")", "\n", "embedding_chars_q_phase", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W_pos", ",", "words_indice", ")", "\n", "[", "embedded_chars_q", ",", "embedding_chars_q_phase", "]", "=", "ComplexMultiply", "(", ")", "(", "[", "embedding_chars_q_phase", ",", "embedded_chars_q", "]", ")", "\n", "embedded_chars_q", "=", "tf", ".", "concat", "(", "[", "embedded_chars_q", ",", "embedding_chars_q_phase", "]", ",", "1", ")", "\n", "return", "embedded_chars_q", "\n", "\n", "", "def", "feed_neural_work", "(", "self", ")", ":", "\n", "        ", "self", ".", "cell", "=", "URNNCell", "(", "num_units", "=", "self", ".", "max_input_left", ",", "num_in", "=", "self", ".", "embedding_size", ")", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "outputs", ",", "final_state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "self", ".", "cell", ",", "self", ".", "embedded_chars_q", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "dropout", "(", "outputs", ",", "self", ".", "dropout_keep_prob", ",", "name", "=", "\"hidden_output_drop\"", ")", "\n", "last", "=", "outputs", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "fc", "=", "tf", ".", "layers", ".", "dense", "(", "last", ",", "self", ".", "hidden_num", "/", "2", ",", "name", "=", "\"1\"", ")", "\n", "fc", "=", "tf", ".", "nn", ".", "relu", "(", "fc", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "6", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "fc", ",", "W", ",", "b", ",", "name", "=", "\"scores\"", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.Complex_vanilla.CNN.concat_embedding": [[79, 84], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "multiply.ComplexMultiply"], "methods", ["None"], ["", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "#0.754", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "l2_loss", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.Complex_vanilla.CNN.narrow_convolutionandpool_real_imag": [[85, 133], ["enumerate", "tensorflow.concat", "tensorflow.concat", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.concat", "numpy.prod", "numpy.random.RandomState", "tensorflow.Variable", "numpy.random.RandomState.rayleigh", "numpy.random.RandomState.uniform", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.nn.conv2d", "tensorflow.nn.conv2d", "tensorflow.nn.conv2d", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.max_pool", "tensorflow.nn.max_pool", "pooled_outputs_real.append", "pooled_outputs_imag.append", "len", "numpy.prod", "tensorflow.constant", "numpy.cos", "numpy.sin", "tensorflow.nn.bias_add", "tensorflow.nn.bias_add"], "methods", ["None"], ["self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "\n", "", "", "def", "build_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_placeholder", "(", ")", "\n", "self", ".", "add_embeddings", "(", ")", "\n", "self", ".", "feed_neural_work", "(", ")", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "cnn", "=", "Fasttext", "(", "max_input_left", "=", "33", ",", "\n", "max_input_right", "=", "40", ",", "\n", "vocab_size", "=", "5000", ",", "\n", "embedding_size", "=", "50", ",", "\n", "batch_size", "=", "3", ",", "\n", "embeddings", "=", "None", ",", "\n", "embeddings_complex", "=", "None", ",", "\n", "dropout_keep_prob", "=", "1", ",", "\n", "filter_sizes", "=", "[", "40", "]", ",", "\n", "num_filters", "=", "65", ",", "\n", "l2_reg_lambda", "=", "0.0", ",", "\n", "is_Embedding_Needed", "=", "False", ",", "\n", "trainable", "=", "True", ",", "\n", "overlap_needed", "=", "False", ",", "\n", "pooling", "=", "'max'", ",", "\n", "position_needed", "=", "False", ")", "\n", "cnn", ".", "build_graph", "(", ")", "\n", "input_x_1", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "3", "*", "33", ")", ",", "[", "3", ",", "33", "]", ")", "\n", "input_x_2", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "3", "*", "40", ")", ",", "[", "3", ",", "40", "]", ")", "\n", "input_y", "=", "np", ".", "ones", "(", "(", "3", ",", "2", ")", ")", "\n", "\n", "input_overlap_q", "=", "np", ".", "ones", "(", "(", "3", ",", "33", ")", ")", "\n", "input_overlap_a", "=", "np", ".", "ones", "(", "(", "3", ",", "40", ")", ")", "\n", "q_posi", "=", "np", ".", "ones", "(", "(", "3", ",", "33", ")", ")", "\n", "a_posi", "=", "np", ".", "ones", "(", "(", "3", ",", "40", ")", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "feed_dict", "=", "{", "\n", "cnn", ".", "question", ":", "input_x_1", ",", "\n", "cnn", ".", "input_y", ":", "input_y", ",", "\n", "cnn", ".", "q_position", ":", "q_posi", ",", "\n", "}", "\n", "\n", "see", ",", "question", ",", "scores", "=", "sess", ".", "run", "(", "[", "cnn", ".", "embedded_chars_q", ",", "cnn", ".", "question", ",", "cnn", ".", "scores", "]", ",", "feed_dict", ")", "\n", "print", "(", "see", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.Complex_vanilla.CNN.build_graph": [[134, 138], ["Complex_vanilla.CNN.create_placeholder", "Complex_vanilla.CNN.add_embeddings", "Complex_vanilla.CNN.feed_neural_work"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_placeholder", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.add_embeddings", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.feed_neural_work"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.Complex_order.CNN.__init__": [[16, 34], ["None"], "methods", ["None"], ["\n", "class", "LSTM", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "max_input_left", ",", "embeddings", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "dataset", ",", "hidden_num", ",", "l2_reg_lambda", "=", "0.0", ",", "is_Embedding_Needed", "=", "False", ",", "trainable", "=", "True", ",", "extend_feature_dim", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "hidden_num", "=", "hidden_num", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "para", "=", "[", "]", "\n", "self", ".", "max_input_left", "=", "max_input_left", "\n", "self", ".", "extend_feature_dim", "=", "extend_feature_dim", "\n", "self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n", "self", ".", "rng", "=", "23455", "\n", "", "def", "create_placeholder", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.Complex_order.CNN.create_placeholder": [[34, 42], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "create_placeholder", "(", "self", ")", ":", "\n", "        ", "self", ".", "question", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'input_question'", ")", "\n", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "6", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "", "def", "Position_Embedding", "(", "self", ",", "position_size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.Complex_order.CNN.Position_Embedding": [[42, 53], ["tensorflow.expand_dims", "tensorflow.range", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.pow", "tensorflow.cast", "tensorflow.range"], "methods", ["None"], ["", "def", "Position_Embedding", "(", "self", ",", "position_size", ")", ":", "\n", "        ", "batch_size", "=", "self", ".", "batch_size", "\n", "seq_len", "=", "self", ".", "vocab_size", "\n", "position_j", "=", "1.", "/", "tf", ".", "pow", "(", "10000.", ",", "2", "*", "tf", ".", "range", "(", "position_size", ",", "dtype", "=", "tf", ".", "float32", ")", "/", "position_size", ")", "\n", "position_j", "=", "tf", ".", "expand_dims", "(", "position_j", ",", "0", ")", "\n", "\n", "position_i", "=", "tf", ".", "range", "(", "tf", ".", "cast", "(", "seq_len", ",", "tf", ".", "float32", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "position_i", "=", "tf", ".", "expand_dims", "(", "position_i", ",", "1", ")", "\n", "position_ij", "=", "tf", ".", "matmul", "(", "position_i", ",", "position_j", ")", "\n", "position_embedding", "=", "position_ij", "\n", "\n", "return", "position_embedding", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.Complex_order.CNN.add_embeddings": [[53, 63], ["Complex_order.CNN.concat_embedding", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "numpy.array", "Complex_order.CNN.Position_Embedding", "tensorflow.random_uniform"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.concat_embedding", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.Position_Embedding"], ["return", "position_embedding", "\n", "", "def", "add_embeddings", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "embeddings", ")", ",", "name", "=", "\"W\"", ",", "dtype", "=", "\"float32\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "W_pos", "=", "tf", ".", "Variable", "(", "self", ".", "Position_Embedding", "(", "self", ".", "embedding_size", ")", ",", "name", "=", "'W'", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "self", ".", "embedding_W", "=", "W", "\n", "self", ".", "embedding_W_pos", "=", "W_pos", "\n", "", "self", ".", "embedded_chars_q", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.Complex_order.CNN.feed_neural_work": [[63, 86], ["Complex_order.CNN.narrow_convolutionandpool_real_imag", "tensorflow.constant", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.name_scope", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.argmax", "tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.cast", "tensorflow.constant", "tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.Complex_order.CNN.narrow_convolutionandpool_real_imag"], ["", "self", ".", "embedded_chars_q", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n", "", "def", "feed_neural_work", "(", "self", ")", ":", "\n", "        ", "self", ".", "cell", "=", "URNNCell", "(", "num_units", "=", "self", ".", "max_input_left", ",", "num_in", "=", "self", ".", "embedding_size", ")", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "\n", "outputs", ",", "final_state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "self", ".", "cell", ",", "self", ".", "embedded_chars_q", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "dropout", "(", "outputs", ",", "self", ".", "dropout_keep_prob", ",", "name", "=", "\"hidden_output_drop\"", ")", "\n", "last", "=", "outputs", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "fc", "=", "tf", ".", "layers", ".", "dense", "(", "last", ",", "self", ".", "hidden_num", "/", "2", ",", "name", "=", "\"1\"", ")", "\n", "fc", "=", "tf", ".", "nn", ".", "relu", "(", "fc", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "6", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "fc", ",", "W", ",", "b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "#0.754", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.Complex_order.CNN.concat_embedding": [[86, 94], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.expand_dims", "tensorflow.cast", "tensorflow.multiply", "multiply.ComplexMultiply"], "methods", ["None"], ["            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "#0.754", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "l2_loss", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n", "        ", "embedded_chars_q", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W", ",", "words_indice", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.Complex_order.CNN.narrow_convolutionandpool_real_imag": [[94, 142], ["enumerate", "tensorflow.concat", "tensorflow.concat", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.concat", "numpy.prod", "numpy.random.RandomState", "tensorflow.Variable", "numpy.random.RandomState.rayleigh", "numpy.random.RandomState.uniform", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.conv2d", "tensorflow.nn.conv2d", "tensorflow.nn.conv2d", "tensorflow.nn.conv2d", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.max_pool", "tensorflow.nn.max_pool", "pooled_outputs_real.append", "pooled_outputs_imag.append", "len", "numpy.prod", "tensorflow.constant", "numpy.cos", "numpy.sin", "tensorflow.nn.bias_add", "tensorflow.nn.bias_add"], "methods", ["None"], ["        ", "embedded_chars_q", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W", ",", "words_indice", ")", "\n", "embedding_chars_q_phase", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W_pos", ",", "words_indice", ")", "\n", "pos", "=", "tf", ".", "expand_dims", "(", "position_indice", ",", "2", ")", "\n", "pos", "=", "tf", ".", "cast", "(", "pos", ",", "tf", ".", "float32", ")", "\n", "embedding_chars_q_phase", "=", "tf", ".", "multiply", "(", "pos", ",", "embedding_chars_q_phase", ")", "\n", "[", "embedded_chars_q", ",", "embedding_chars_q_phase", "]", "=", "ComplexMultiply", "(", ")", "(", "[", "embedding_chars_q_phase", ",", "embedded_chars_q", "]", ")", "\n", "embedded_chars_q", "=", "tf", ".", "concat", "(", "[", "embedded_chars_q", ",", "embedding_chars_q_phase", "]", ",", "1", ")", "\n", "return", "embedded_chars_q", "\n", "\n", "", "def", "build_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_placeholder", "(", ")", "\n", "self", ".", "add_embeddings", "(", ")", "\n", "self", ".", "feed_neural_work", "(", ")", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "cnn", "=", "Fasttext", "(", "max_input_left", "=", "33", ",", "\n", "max_input_right", "=", "40", ",", "\n", "vocab_size", "=", "5000", ",", "\n", "embedding_size", "=", "50", ",", "\n", "batch_size", "=", "3", ",", "\n", "embeddings", "=", "None", ",", "\n", "embeddings_complex", "=", "None", ",", "\n", "dropout_keep_prob", "=", "1", ",", "\n", "filter_sizes", "=", "[", "40", "]", ",", "\n", "num_filters", "=", "65", ",", "\n", "l2_reg_lambda", "=", "0.0", ",", "\n", "is_Embedding_Needed", "=", "False", ",", "\n", "trainable", "=", "True", ",", "\n", "overlap_needed", "=", "False", ",", "\n", "pooling", "=", "'max'", ",", "\n", "position_needed", "=", "False", ")", "\n", "cnn", ".", "build_graph", "(", ")", "\n", "input_x_1", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "3", "*", "33", ")", ",", "[", "3", ",", "33", "]", ")", "\n", "input_x_2", "=", "np", ".", "reshape", "(", "np", ".", "arange", "(", "3", "*", "40", ")", ",", "[", "3", ",", "40", "]", ")", "\n", "input_y", "=", "np", ".", "ones", "(", "(", "3", ",", "2", ")", ")", "\n", "\n", "input_overlap_q", "=", "np", ".", "ones", "(", "(", "3", ",", "33", ")", ")", "\n", "input_overlap_a", "=", "np", ".", "ones", "(", "(", "3", ",", "40", ")", ")", "\n", "q_posi", "=", "np", ".", "ones", "(", "(", "3", ",", "33", ")", ")", "\n", "a_posi", "=", "np", ".", "ones", "(", "(", "3", ",", "40", ")", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "feed_dict", "=", "{", "\n", "cnn", ".", "question", ":", "input_x_1", ",", "\n", "cnn", ".", "input_y", ":", "input_y", ",", "\n", "cnn", ".", "q_position", ":", "q_posi", ",", "\n", "}", "\n", "\n", "see", ",", "question", ",", "scores", "=", "sess", ".", "run", "(", "[", "cnn", ".", "embedded_chars_q", ",", "cnn", ".", "question", ",", "cnn", ".", "scores", "]", ",", "feed_dict", ")", "\n", "print", "(", "see", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_cnn.Complex_order.CNN.build_graph": [[143, 147], ["Complex_order.CNN.create_placeholder", "Complex_order.CNN.add_embeddings", "Complex_order.CNN.feed_neural_work"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_placeholder", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.add_embeddings", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.feed_neural_work"], ["\n", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.train.log_time_delta": [[40, 50], ["functools.wraps", "time.time", "func", "time.time", "print"], "function", ["None"], ["\n", "def", "log_time_delta", "(", "func", ")", ":", "\n", "    ", "@", "wraps", "(", "func", ")", "\n", "def", "_deco", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "ret", "=", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "delta", "=", "end", "-", "start", "\n", "print", "(", "\"%s runed %.2f seconds\"", "%", "(", "func", ".", "__name__", ",", "delta", ")", ")", "\n", "return", "ret", "\n", "", "return", "_deco", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.train.predict": [[52, 63], ["helper.batch_gen_with_single", "numpy.array", "sess.run", "scores.extend", "len"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.batch_gen_with_single"], ["\n", "", "def", "predict", "(", "sess", ",", "cnn", ",", "dev", ",", "alphabet", ",", "batch_size", ",", "q_len", ")", ":", "\n", "    ", "scores", "=", "[", "]", "\n", "for", "data", "in", "batch_gen_with_single", "(", "dev", ",", "alphabet", ",", "batch_size", ",", "q_len", ")", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "cnn", ".", "question", ":", "data", "[", "0", "]", ",", "\n", "cnn", ".", "q_position", ":", "data", "[", "1", "]", ",", "\n", "cnn", ".", "dropout_keep_prob", ":", "1.0", "\n", "}", "\n", "score", "=", "sess", ".", "run", "(", "cnn", ".", "scores", ",", "feed_dict", ")", "\n", "scores", ".", "extend", "(", "score", ")", "\n", "", "return", "np", ".", "array", "(", "scores", "[", ":", "len", "(", "dev", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.train.dev_point_wise": [[65, 149], ["max", "print", "print", "print", "print", "print", "print", "helper.load_trec_sst2", "helper.load", "map", "len", "len", "len", "helper.prepare", "helper.prepare", "len", "tensorflow.Graph().as_default", "tensorflow.Session", "int", "time.localtime", "time.strftime", "time.strftime", "print", "train[].str.split", "len", "tensorflow.device", "tensorflow.ConfigProto", "time.time", "tf.Session.as_default", "open", "log.write", "model_fasttext.Complex_order.Fasttext", "model_fasttext.Complex_order.Fasttext.build_graph", "tensorflow.Variable", "tensorflow.train.AdamOptimizer", "tf.train.AdamOptimizer.compute_gradients", "tf.train.AdamOptimizer.apply_gradients", "tf.Session.run", "range", "acc_flod.append", "log.close", "len", "train[].unique", "tensorflow.Graph", "tensorflow.global_variables_initializer", "helper.batch_gen_with_point_wise", "train.predict", "numpy.argmax", "sklearn.metrics.accuracy_score", "train.predict", "numpy.argmax", "sklearn.metrics.accuracy_score", "print", "print", "log.write", "log.flush", "str", "len", "tf.Session.run", "datetime.datetime.now().isoformat", "print", "tensorflow.train.Saver().save", "datetime.datetime.now", "tensorflow.train.Saver"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load_trec_sst2", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.prepare", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.prepare", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.build_graph", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.batch_gen_with_point_wise", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.train.predict", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.train.predict"], ["\n", "", "@", "log_time_delta", "\n", "def", "dev_point_wise", "(", ")", ":", "\n", "    ", "if", "FLAGS", ".", "data", "==", "'TREC'", "or", "FLAGS", ".", "data", "==", "'sst2'", ":", "\n", "        ", "train", ",", "dev", ",", "test", "=", "load_trec_sst2", "(", "FLAGS", ".", "data", ")", "\n", "", "else", ":", "\n", "        ", "train", ",", "dev", "=", "load", "(", "FLAGS", ".", "data", ")", "\n", "", "q_max_sent_length", "=", "max", "(", "\n", "map", "(", "lambda", "x", ":", "len", "(", "x", ")", ",", "train", "[", "'question'", "]", ".", "str", ".", "split", "(", ")", ")", ")", "\n", "print", "(", "q_max_sent_length", ")", "\n", "print", "(", "len", "(", "train", ")", ")", "\n", "print", "(", "'train question unique:{}'", ".", "format", "(", "len", "(", "train", "[", "'question'", "]", ".", "unique", "(", ")", ")", ")", ")", "\n", "print", "(", "'train length'", ",", "len", "(", "train", ")", ")", "\n", "print", "(", "'dev length'", ",", "len", "(", "dev", ")", ")", "\n", "if", "FLAGS", ".", "data", "==", "'TREC'", "or", "FLAGS", ".", "data", "==", "'sst2'", ":", "\n", "        ", "alphabet", ",", "embeddings", "=", "prepare", "(", "[", "train", ",", "dev", ",", "test", "]", ",", "max_sent_length", "=", "q_max_sent_length", ",", "dim", "=", "FLAGS", ".", "embedding_dim", ",", "is_embedding_needed", "=", "True", ",", "fresh", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "alphabet", ",", "embeddings", "=", "prepare", "(", "[", "train", ",", "dev", "]", ",", "max_sent_length", "=", "q_max_sent_length", ",", "dim", "=", "FLAGS", ".", "embedding_dim", ",", "is_embedding_needed", "=", "True", ",", "fresh", "=", "True", ")", "\n", "", "print", "(", "'alphabet:'", ",", "len", "(", "alphabet", ")", ")", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "\"/gpu:0\"", ")", ":", "\n", "            ", "session_conf", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "session_conf", ".", "allow_soft_placement", "=", "FLAGS", ".", "allow_soft_placement", "\n", "session_conf", ".", "log_device_placement", "=", "FLAGS", ".", "log_device_placement", "\n", "session_conf", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "", "sess", "=", "tf", ".", "Session", "(", "config", "=", "session_conf", ")", "\n", "now", "=", "int", "(", "time", ".", "time", "(", ")", ")", "\n", "timeArray", "=", "time", ".", "localtime", "(", "now", ")", "\n", "timeStamp1", "=", "time", ".", "strftime", "(", "\"%Y%m%d%H%M%S\"", ",", "timeArray", ")", "\n", "timeDay", "=", "time", ".", "strftime", "(", "\"%Y%m%d\"", ",", "timeArray", ")", "\n", "print", "(", "timeStamp1", ")", "\n", "with", "sess", ".", "as_default", "(", ")", ",", "open", "(", "precision", ",", "\"w\"", ")", "as", "log", ":", "\n", "            ", "log", ".", "write", "(", "str", "(", "FLAGS", ".", "__flags", ")", "+", "'\\n'", ")", "\n", "cnn", "=", "LSTM", "(", "\n", "max_input_left", "=", "q_max_sent_length", ",", "\n", "vocab_size", "=", "len", "(", "alphabet", ")", ",", "\n", "embeddings", "=", "embeddings", ",", "\n", "embedding_size", "=", "FLAGS", ".", "embedding_dim", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "\n", "l2_reg_lambda", "=", "FLAGS", ".", "l2_reg_lambda", ",", "\n", "is_Embedding_Needed", "=", "True", ",", "\n", "hidden_num", "=", "FLAGS", ".", "hidden_num", ",", "\n", "trainable", "=", "FLAGS", ".", "trainable", ",", "\n", "dataset", "=", "FLAGS", ".", "data", ",", "\n", "extend_feature_dim", "=", "FLAGS", ".", "extend_feature_dim", ")", "\n", "cnn", ".", "build_graph", "(", ")", "\n", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "\"global_step\"", ",", "trainable", "=", "False", ")", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "FLAGS", ".", "learning_rate", ")", "\n", "grads_and_vars", "=", "optimizer", ".", "compute_gradients", "(", "cnn", ".", "loss", ")", "\n", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "\n", "grads_and_vars", ",", "global_step", "=", "global_step", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "acc_max", "=", "0.0000", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "num_epochs", ")", ":", "\n", "                ", "datas", "=", "batch_gen_with_point_wise", "(", "\n", "train", ",", "alphabet", ",", "FLAGS", ".", "batch_size", ",", "q_len", "=", "q_max_sent_length", ")", "\n", "for", "data", "in", "datas", ":", "\n", "                    ", "feed_dict", "=", "{", "\n", "cnn", ".", "question", ":", "data", "[", "0", "]", ",", "\n", "cnn", ".", "input_y", ":", "data", "[", "1", "]", ",", "\n", "cnn", ".", "q_position", ":", "data", "[", "2", "]", ",", "\n", "cnn", ".", "dropout_keep_prob", ":", "FLAGS", ".", "dropout_keep_prob", "\n", "}", "\n", "_", ",", "step", ",", "loss", ",", "accuracy", "=", "sess", ".", "run", "(", "\n", "[", "train_op", ",", "global_step", ",", "cnn", ".", "loss", ",", "cnn", ".", "accuracy", "]", ",", "feed_dict", ")", "\n", "time_str", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "isoformat", "(", ")", "\n", "print", "(", "\"{}: step {}, loss {:g}, acc {:g}  \"", ".", "format", "(", "time_str", ",", "step", ",", "loss", ",", "accuracy", ")", ")", "\n", "", "predicted", "=", "predict", "(", "\n", "sess", ",", "cnn", ",", "train", ",", "alphabet", ",", "FLAGS", ".", "batch_size", ",", "q_max_sent_length", ")", "\n", "predicted_label", "=", "np", ".", "argmax", "(", "predicted", ",", "1", ")", "\n", "acc_train", "=", "accuracy_score", "(", "\n", "train", "[", "'flag'", "]", ",", "predicted_label", ")", "\n", "predicted_dev", "=", "predict", "(", "\n", "sess", ",", "cnn", ",", "dev", ",", "alphabet", ",", "FLAGS", ".", "batch_size", ",", "q_max_sent_length", ")", "\n", "predicted_label", "=", "np", ".", "argmax", "(", "predicted_dev", ",", "1", ")", "\n", "acc_dev", "=", "accuracy_score", "(", "\n", "dev", "[", "'flag'", "]", ",", "predicted_label", ")", "\n", "if", "acc_dev", ">", "acc_max", ":", "\n", "                    ", "tf", ".", "train", ".", "Saver", "(", ")", ".", "save", "(", "sess", ",", "\"model_save/model\"", ",", "write_meta_graph", "=", "True", ")", "\n", "acc_max", "=", "acc_dev", "\n", "", "print", "(", "\"{}:train epoch:acc {}\"", ".", "format", "(", "i", ",", "acc_train", ")", ")", "\n", "print", "(", "\"{}:dev epoch:acc {}\"", ".", "format", "(", "i", ",", "acc_dev", ")", ")", "\n", "line2", "=", "\" {}:epoch: acc{}\"", ".", "format", "(", "i", ",", "acc_dev", ")", "\n", "log", ".", "write", "(", "line2", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.Alphabet.__init__": [[104, 106], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "start_feature_id", "=", "1", ")", ":", "\n", "        ", "self", ".", "fid", "=", "start_feature_id", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.Alphabet.add": [[107, 114], ["helper.Alphabet.get"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "item", ")", ":", "\n", "        ", "idx", "=", "self", ".", "get", "(", "item", ",", "None", ")", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "idx", "=", "self", ".", "fid", "\n", "self", "[", "item", "]", "=", "idx", "\n", "self", ".", "fid", "+=", "1", "\n", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.Alphabet.dump": [[115, 119], ["open", "sorted", "helper.Alphabet.keys", "out.write"], "methods", ["None"], ["", "def", "dump", "(", "self", ",", "fname", ")", ":", "\n", "        ", "with", "open", "(", "fname", ",", "\"w\"", ")", "as", "out", ":", "\n", "            ", "for", "k", "in", "sorted", "(", "self", ".", "keys", "(", ")", ")", ":", "\n", "                ", "out", ".", "write", "(", "\"{}\\t{}\\n\"", ".", "format", "(", "k", ",", "self", "[", "k", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.clean_str_sst": [[37, 41], ["re.sub", "re.sub", "re.sub.strip().lower", "re.sub.strip"], "function", ["None"], ["def", "clean_str_sst", "(", "string", ")", ":", "\n", "    ", "string", "=", "re", ".", "sub", "(", "r\"[^A-Za-z0-9(),!?\\'\\`]\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\s{2,}\"", ",", "\" \"", ",", "string", ")", "\n", "return", "string", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "", "def", "clean_str", "(", "string", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.clean_str": [[41, 56], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.strip().lower", "re.sub.strip"], "function", ["None"], ["", "def", "clean_str", "(", "string", ")", ":", "\n", "    ", "string", "=", "re", ".", "sub", "(", "r\"[^A-Za-z0-9(),!?\\'\\`]\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'s\"", ",", "\" \\'s\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ve\"", ",", "\" \\'ve\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"n\\'t\"", ",", "\" n\\'t\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'re\"", ",", "\" \\'re\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'d\"", ",", "\" \\'d\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ll\"", ",", "\" \\'ll\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\",\"", ",", "\" , \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"!\"", ",", "\" ! \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\(\"", ",", "\" \\( \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\)\"", ",", "\" \\) \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\?\"", ",", "\" \\? \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\s{2,}\"", ",", "\" \"", ",", "string", ")", "\n", "return", "string", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "", "def", "process", "(", "dataset", "=", "dataset", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.process": [[56, 81], ["os.path.join", "pandas.concat", "shuffle().reset_index", "os.path.join", "os.path.join", "train[].to_csv", "dev[].to_csv", "print", "os.path.exists", "os.makedirs", "os.path.join", "datas.append", "open", "enumerate", "pandas.DataFrame", "shuffle", "int", "records.append", "len", "int", "numpy.array", "len", "clean_str().strip", "len", "helper.clean_str"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.clean_str"], ["", "def", "process", "(", "dataset", "=", "dataset", ")", ":", "\n", "    ", "data_dir", "=", "\"../data/\"", "+", "dataset", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"rt-polaritydata\"", ")", "\n", "saved_path", "=", "data_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "saved_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "saved_path", ")", "\n", "", "datas", "=", "[", "]", "\n", "for", "polarity", "in", "(", "\"neg\"", ",", "\"pos\"", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "root", ",", "polarity", ")", "\n", "records", "=", "[", "]", "\n", "with", "open", "(", "filename", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"replace\"", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "records", ".", "append", "(", "{", "\"text\"", ":", "clean_str", "(", "line", ")", ".", "strip", "(", ")", ",", "\"label\"", ":", "0", "if", "polarity", "==", "\"pos\"", "else", "1", "}", ")", "\n", "", "", "datas", ".", "append", "(", "pd", ".", "DataFrame", "(", "records", ")", ")", "\n", "", "df", "=", "pd", ".", "concat", "(", "datas", ")", "\n", "from", "sklearn", ".", "utils", "import", "shuffle", "\n", "df", "=", "shuffle", "(", "df", ")", ".", "reset_index", "(", ")", "\n", "split_index", "=", "[", "True", "]", "*", "int", "(", "len", "(", "df", ")", "*", "0.9", ")", "+", "[", "False", "]", "*", "(", "len", "(", "df", ")", "-", "int", "(", "len", "(", "df", ")", "*", "0.9", ")", ")", "\n", "train", "=", "df", "[", "split_index", "]", "\n", "dev", "=", "df", "[", "~", "np", ".", "array", "(", "split_index", ")", "]", "\n", "train_filename", "=", "os", ".", "path", ".", "join", "(", "saved_path", ",", "\"train.csv\"", ")", "\n", "test_filename", "=", "os", ".", "path", ".", "join", "(", "saved_path", ",", "\"dev.csv\"", ")", "\n", "train", "[", "[", "\"text\"", ",", "\"label\"", "]", "]", ".", "to_csv", "(", "train_filename", ",", "encoding", "=", "\"utf-8\"", ",", "sep", "=", "\"\\t\"", ",", "index", "=", "False", ",", "header", "=", "None", ")", "\n", "dev", "[", "[", "\"text\"", ",", "\"label\"", "]", "]", ".", "to_csv", "(", "test_filename", ",", "encoding", "=", "\"utf-8\"", ",", "sep", "=", "\"\\t\"", ",", "index", "=", "False", ",", "header", "=", "None", ")", "\n", "print", "(", "\"processing into formated files over\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.cut": [[83, 89], ["sentence.lower().split", "sentence.lower", "sentence.split"], "function", ["None"], ["", "def", "cut", "(", "sentence", ",", "isEnglish", "=", "isEnglish", ")", ":", "\n", "    ", "if", "isEnglish", ":", "\n", "        ", "tokens", "=", "sentence", ".", "lower", "(", ")", ".", "split", "(", ")", "\n", "", "else", ":", "\n", "        ", "tokens", "=", "[", "word", "for", "word", "in", "sentence", ".", "split", "(", ")", "if", "word", "not", "in", "stopwords", "]", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.log_time_delta": [[91, 101], ["functools.wraps", "time.time", "func", "time.time", "print"], "function", ["None"], ["", "def", "log_time_delta", "(", "func", ")", ":", "\n", "    ", "@", "wraps", "(", "func", ")", "\n", "def", "_deco", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "ret", "=", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "delta", "=", "end", "-", "start", "\n", "print", "(", "\"%s runed %.2f seconds\"", "%", "(", "func", ".", "__name__", ",", "delta", ")", ")", "\n", "return", "ret", "\n", "", "return", "_deco", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.prepare": [[121, 171], ["os.path.exists", "pickle.load", "helper.Alphabet", "helper.Alphabet.add", "helper.Alphabet.add", "print", "helper.Alphabet.dump", "open", "len", "os.path.exists", "pickle.load", "pickle.dump", "corpus[].unique", "tqdm.tqdm", "Alphabet.keys", "open", "helper.load_text_vec", "helper.getSubVectorsFromDict", "open", "helper.cut", "set", "gensim.models.keyedvectors.KeyedVectors.load_word2vec_format", "helper.getSubVectors", "helper.getSubVectors_complex_random", "gensim.models.keyedvectors.KeyedVectors.load_word2vec_format", "helper.getSubVectors", "print", "print", "helper.Alphabet.add"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.add", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.add", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.dump", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.dump", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load_text_vec", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectorsFromDict", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.cut", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectors", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectors_complex_random", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectors", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.add"], ["", "", "", "", "@", "log_time_delta", "\n", "def", "prepare", "(", "cropuses", ",", "max_sent_length", "=", "31", ",", "is_embedding_needed", "=", "False", ",", "dim", "=", "50", ",", "fresh", "=", "False", ")", ":", "\n", "    ", "vocab_file", "=", "'model/voc'", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "vocab_file", ")", "and", "not", "fresh", ":", "\n", "        ", "alphabet", "=", "pickle", ".", "load", "(", "open", "(", "vocab_file", ",", "'r'", ")", ")", "\n", "", "else", ":", "\n", "        ", "alphabet", "=", "Alphabet", "(", "start_feature_id", "=", "0", ")", "\n", "alphabet", ".", "add", "(", "'[UNKNOW]'", ")", "\n", "alphabet", ".", "add", "(", "'END'", ")", "\n", "count", "=", "0", "\n", "for", "corpus", "in", "cropuses", ":", "\n", "            ", "for", "texts", "in", "[", "corpus", "[", "\"question\"", "]", ".", "unique", "(", ")", "]", ":", "\n", "                ", "for", "sentence", "in", "tqdm", "(", "texts", ")", ":", "\n", "                    ", "count", "+=", "1", "\n", "if", "count", "%", "10000", "==", "0", ":", "\n", "                        ", "print", "(", "count", ")", "\n", "", "tokens", "=", "cut", "(", "sentence", ")", "\n", "for", "token", "in", "set", "(", "tokens", ")", ":", "\n", "                        ", "alphabet", ".", "add", "(", "token", ")", "\n", "", "", "", "", "print", "(", "len", "(", "alphabet", ".", "keys", "(", ")", ")", ")", "\n", "alphabet", ".", "dump", "(", "'alphabet_clean.txt'", ")", "\n", "", "if", "is_embedding_needed", ":", "\n", "        ", "sub_vec_file", "=", "'../embedding/sub_vector'", "\n", "if", "os", ".", "path", ".", "exists", "(", "sub_vec_file", ")", "and", "not", "fresh", ":", "\n", "            ", "sub_embeddings", "=", "pickle", ".", "load", "(", "open", "(", "sub_vec_file", ",", "'r'", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "isEnglish", ":", "\n", "                ", "if", "dim", "==", "50", ":", "\n", "                    ", "fname", "=", "\"../embedding/aquaint+wiki.txt.gz.ndim=50.bin\"", "\n", "embeddings_1", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "\n", "fname", ",", "binary", "=", "True", ")", "\n", "sub_embeddings", "=", "getSubVectors", "(", "embeddings_1", ",", "alphabet", ",", "dim", ")", "\n", "embedding_complex", "=", "getSubVectors_complex_random", "(", "\n", "alphabet", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "fname", "=", "\"../embedding/GoogleNews-vectors-negative300.bin\"", "\n", "embeddings_1", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "\n", "fname", ",", "binary", "=", "True", ")", "\n", "sub_embeddings", "=", "getSubVectors", "(", "embeddings_1", ",", "alphabet", ",", "dim", ")", "\n", "print", "(", "\"yes\"", ")", "\n", "", "", "else", ":", "\n", "                ", "fname", "=", "'model/wiki.ch.text.vector'", "\n", "embeddings", "=", "load_text_vec", "(", "alphabet", ",", "fname", ",", "embedding_size", "=", "dim", ")", "\n", "sub_embeddings", "=", "getSubVectorsFromDict", "(", "\n", "embeddings", ",", "alphabet", ",", "dim", ")", "\n", "", "pickle", ".", "dump", "(", "sub_embeddings", ",", "open", "(", "sub_vec_file", ",", "'wb'", ")", ")", "\n", "", "return", "alphabet", ",", "sub_embeddings", "\n", "", "else", ":", "\n", "        ", "return", "alphabet", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.load_text_vec_complex": [[173, 184], ["pandas.read_csv", "numpy.load", "range", "len", "file2[].astype", "embedding_alphabet.append"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load"], ["", "", "def", "load_text_vec_complex", "(", "alphabet", ",", "filename", "=", "\"\"", ",", "datafile", "=", "''", ",", "embedding_size", "=", "100", ")", ":", "\n", "    ", "vectors", "=", "{", "}", "\n", "embedding_alphabet", "=", "[", "]", "\n", "file1", "=", "pd", ".", "read_csv", "(", "filename", ",", "sep", "=", "'\\t'", ",", "names", "=", "[", "\"word\"", ",", "\"id\"", "]", ")", "\n", "file2", "=", "np", ".", "load", "(", "datafile", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "file1", ")", ")", ":", "\n", "        ", "word", "=", "file1", "[", "'word'", "]", "[", "i", "]", "\n", "if", "word", "in", "alphabet", ":", "\n", "            ", "vectors", "[", "word", "]", "=", "file2", "[", "i", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "embedding_alphabet", ".", "append", "(", "word", ")", "\n", "", "", "return", "vectors", ",", "embedding_alphabet", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.getSubVectors_complex": [[186, 196], ["embeddings.append", "embeddings.append", "numpy.random.uniform", "eval"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.eval"], ["", "def", "getSubVectors_complex", "(", "vectors", ",", "vocab", ",", "embedding_alphabet", ",", "dim", "=", "100", ")", ":", "\n", "\n", "    ", "temp_vec", "=", "0", "\n", "embeddings", "=", "[", "]", "\n", "for", "word", "in", "vocab", ":", "\n", "        ", "if", "word", "in", "embedding_alphabet", ":", "\n", "            ", "embeddings", ".", "append", "(", "vectors", "[", "eval", "(", "'word'", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "embeddings", ".", "append", "(", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "+", "0.25", ",", "100", ")", ")", "\n", "", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.get_lookup_table": [[198, 215], ["np.asarray.append", "range", "numpy.asarray", "len", "np.asarray.append"], "function", ["None"], ["", "def", "get_lookup_table", "(", "embedding_params", ")", ":", "\n", "    ", "id2word", "=", "embedding_params", "[", "'id2word'", "]", "\n", "word_vec", "=", "embedding_params", "[", "'word_vec'", "]", "\n", "lookup_table", "=", "[", "]", "\n", "\n", "# Index 0 corresponds to nothing", "\n", "lookup_table", ".", "append", "(", "[", "0", "]", "*", "embedding_params", "[", "'wvec_dim'", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "id2word", ")", ")", ":", "\n", "        ", "word", "=", "id2word", "[", "i", "]", "\n", "wvec", "=", "[", "0", "]", "*", "embedding_params", "[", "'wvec_dim'", "]", "\n", "if", "word", "in", "word_vec", ":", "\n", "            ", "wvec", "=", "word_vec", "[", "word", "]", "\n", "# print(wvec)", "\n", "", "lookup_table", ".", "append", "(", "wvec", ")", "\n", "\n", "", "lookup_table", "=", "np", ".", "asarray", "(", "lookup_table", ")", "\n", "return", "(", "lookup_table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.getSubVectors": [[217, 227], ["numpy.zeros", "len", "vectors.word_vec", "numpy.random.uniform"], "function", ["None"], ["", "def", "getSubVectors", "(", "vectors", ",", "vocab", ",", "word_embe", ",", "dim", "=", "300", ")", ":", "\n", "    ", "embedding", "=", "np", ".", "zeros", "(", "(", "len", "(", "vocab", ")", ",", "dim", ")", ")", "\n", "temp_vec", "=", "0", "\n", "for", "word", "in", "vocab", ":", "\n", "        ", "if", "word", "in", "vectors", ".", "vocab", ":", "\n", "            ", "embedding", "[", "vocab", "[", "word", "]", "]", "=", "vectors", ".", "word_vec", "(", "word", ")", "\n", "", "else", ":", "\n", "            ", "embedding", "[", "vocab", "[", "word", "]", "\n", "]", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "+", "0.5", ",", "vectors", ".", "syn0", ".", "shape", "[", "1", "]", ")", "\n", "", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.getSubVectors_complex_random": [[249, 254], ["numpy.zeros", "numpy.ones", "len"], "function", ["None"], ["", "", "", "def", "getSubVectors_complex_random", "(", "vocab", ",", "dim", "=", "1", ")", ":", "\n", "    ", "embedding", "=", "np", ".", "zeros", "(", "(", "len", "(", "vocab", ")", ",", "1", ")", ")", "\n", "for", "word", "in", "vocab", ":", "\n", "        ", "embedding", "[", "vocab", "[", "word", "]", "]", "=", "np", ".", "ones", "(", "1", ")", "\n", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.getSubVectors_complex_uniform": [[256, 262], ["numpy.zeros", "range", "numpy.random.uniform"], "function", ["None"], ["", "def", "getSubVectors_complex_uniform", "(", "max_sentence", ",", "dim", "=", "50", ")", ":", "\n", "    ", "embedding", "=", "np", ".", "zeros", "(", "(", "max_sentence", ",", "dim", ")", ")", "\n", "for", "i", "in", "range", "(", "max_sentence", ")", ":", "\n", "        ", "embedding", "[", "i", "]", "=", "np", ".", "random", ".", "uniform", "(", "+", "(", "(", "2", "*", "math", ".", "pi", ")", "/", "30", ")", "\n", "*", "i", ",", "+", "(", "(", "2", "*", "math", ".", "pi", ")", "/", "30", ")", "*", "(", "i", "+", "1", ")", ",", "dim", ")", "\n", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.load_text_vec": [[264, 284], ["print", "print", "print", "open", "len", "line.strip().split", "vectors.keys", "print", "len", "print", "line.strip"], "function", ["None"], ["", "def", "load_text_vec", "(", "alphabet", ",", "filename", "=", "\"\"", ",", "embedding_size", "=", "100", ")", ":", "\n", "    ", "vectors", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "i", "=", "0", "\n", "for", "line", "in", "f", ":", "\n", "            ", "i", "+=", "1", "\n", "if", "i", "%", "100000", "==", "0", ":", "\n", "                ", "print", "(", "'epch %d'", "%", "i", ")", "\n", "", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "items", ")", "==", "2", ":", "\n", "                ", "vocab_size", ",", "embedding_size", "=", "items", "[", "0", "]", ",", "items", "[", "1", "]", "\n", "print", "(", "vocab_size", ",", "embedding_size", ")", "\n", "", "else", ":", "\n", "                ", "word", "=", "items", "[", "0", "]", "\n", "if", "word", "in", "alphabet", ":", "\n", "                    ", "vectors", "[", "word", "]", "=", "items", "[", "1", ":", "]", "\n", "", "", "", "", "print", "(", "'embedding_size'", ",", "embedding_size", ")", "\n", "print", "(", "'done'", ")", "\n", "print", "(", "'words found in wor2vec embedding '", ",", "len", "(", "vectors", ".", "keys", "(", ")", ")", ")", "\n", "return", "vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.getSubVectorsFromDict": [[286, 301], ["open", "numpy.zeros", "open.close", "print", "len", "open.write", "numpy.random.uniform"], "function", ["None"], ["", "def", "getSubVectorsFromDict", "(", "vectors", ",", "vocab", ",", "dim", "=", "300", ")", ":", "\n", "    ", "file", "=", "open", "(", "'missword'", ",", "'w'", ")", "\n", "embedding", "=", "np", ".", "zeros", "(", "(", "len", "(", "vocab", ")", ",", "dim", ")", ")", "\n", "count", "=", "1", "\n", "for", "word", "in", "vocab", ":", "\n", "\n", "        ", "if", "word", "in", "vectors", ":", "\n", "            ", "count", "+=", "1", "\n", "embedding", "[", "vocab", "[", "word", "]", "]", "=", "vectors", "[", "word", "]", "\n", "", "else", ":", "\n", "            ", "file", ".", "write", "(", "word", "+", "'\\n'", ")", "\n", "embedding", "[", "vocab", "[", "word", "]", "]", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "+", "0.5", ",", "dim", ")", "\n", "", "", "file", ".", "close", "(", ")", "\n", "print", "(", "'word in embedding'", ",", "count", ")", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.position_index": [[303, 308], ["numpy.zeros", "len", "range", "helper.cut", "min", "min"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.cut"], ["", "def", "position_index", "(", "sentence", ",", "length", ")", ":", "\n", "    ", "index", "=", "np", ".", "zeros", "(", "length", ")", "\n", "raw_len", "=", "len", "(", "cut", "(", "sentence", ")", ")", "\n", "index", "[", ":", "min", "(", "raw_len", ",", "length", ")", "]", "=", "range", "(", "1", ",", "min", "(", "raw_len", "+", "1", ",", "length", "+", "1", ")", ")", "\n", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.encode_to_split": [[310, 318], ["helper.cut", "indices.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.cut"], ["", "def", "encode_to_split", "(", "sentence", ",", "alphabet", ",", "max_sentence", "=", "40", ")", ":", "\n", "    ", "indices", "=", "[", "]", "\n", "tokens", "=", "cut", "(", "sentence", ")", "\n", "for", "word", "in", "tokens", ":", "\n", "        ", "indices", ".", "append", "(", "alphabet", "[", "word", "]", ")", "\n", "", "while", "(", "len", "(", "indices", ")", "<", "max_sentence", ")", ":", "\n", "        ", "indices", "+=", "indices", "[", ":", "(", "max_sentence", "-", "len", "(", "indices", ")", ")", "]", "\n", "", "return", "indices", "[", ":", "max_sentence", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.load": [[320, 337], ["helper.process", "tuple", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "pandas.read_csv().fillna", "datas.append", "pandas.read_csv", "pandas.read_csv"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.process"], ["", "def", "load", "(", "dataset", "=", "dataset", ")", ":", "\n", "    ", "process", "(", "dataset", ")", "\n", "data_dir", "=", "\"../data/\"", "+", "dataset", "\n", "datas", "=", "[", "]", "\n", "for", "data_name", "in", "[", "'train.csv'", ",", "'dev.csv'", "]", ":", "\n", "        ", "if", "data_name", "==", "'train.csv'", ":", "\n", "            ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'dev.csv'", ":", "\n", "            ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "\n", "", "", "return", "tuple", "(", "datas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.load_trec_sst2": [[338, 377], ["tuple", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "pandas.read_csv().fillna", "datas.append", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv"], "function", ["None"], ["", "def", "load_trec_sst2", "(", "dataset", "=", "dataset", ")", ":", "\n", "    ", "data_dir", "=", "\"../data/\"", "+", "dataset", "\n", "datas", "=", "[", "]", "\n", "if", "dataset", "==", "'sst2'", ":", "\n", "        ", "for", "data_name", "in", "[", "'train.csv'", ",", "'dev.csv'", ",", "'test.csv'", "]", ":", "\n", "            ", "if", "data_name", "==", "'train.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'dev.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'test.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "data_name", "in", "[", "'train.csv'", ",", "'dev.csv'", ",", "'test.csv'", "]", ":", "\n", "            ", "if", "data_name", "==", "'train.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"flag\"", ",", "\"question\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'dev.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"flag\"", ",", "\"question\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'test.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"flag\"", ",", "\"question\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "\n", "", "", "", "return", "tuple", "(", "datas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.batch_gen_with_single": [[379, 396], ["df.iterrows", "int", "range", "helper.encode_to_split", "helper.position_index", "pairs.append", "len", "range", "range", "len"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.encode_to_split", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.position_index"], ["", "@", "log_time_delta", "\n", "def", "batch_gen_with_single", "(", "df", ",", "alphabet", ",", "batch_size", "=", "10", ",", "q_len", "=", "33", ")", ":", "\n", "    ", "pairs", "=", "[", "]", "\n", "input_num", "=", "2", "\n", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "        ", "quetion", "=", "encode_to_split", "(", "\n", "row", "[", "\"question\"", "]", ",", "alphabet", ",", "max_sentence", "=", "q_len", ")", "\n", "q_position", "=", "position_index", "(", "row", "[", "'question'", "]", ",", "q_len", ")", "\n", "pairs", ".", "append", "(", "(", "quetion", ",", "q_position", ")", ")", "\n", "", "n_batches", "=", "int", "(", "len", "(", "pairs", ")", "*", "1.0", "/", "batch_size", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n_batches", ")", ":", "\n", "        ", "batch", "=", "pairs", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "\n", "yield", "[", "[", "pair", "[", "j", "]", "for", "pair", "in", "batch", "]", "for", "j", "in", "range", "(", "input_num", ")", "]", "\n", "", "batch", "=", "pairs", "[", "n_batches", "*", "batch_size", ":", "]", "+", "[", "pairs", "[", "n_batches", "*", "\n", "batch_size", "-", "1", "]", "]", "*", "(", "batch_size", "-", "len", "(", "pairs", ")", "+", "n_batches", "*", "batch_size", ")", "\n", "yield", "[", "[", "pair", "[", "i", "]", "for", "pair", "in", "batch", "]", "for", "i", "in", "range", "(", "input_num", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.helper.batch_gen_with_point_wise": [[398, 416], ["df.iterrows", "int", "sklearn.utils.shuffle", "range", "helper.encode_to_split", "helper.position_index", "transform", "sklearn.utils.shuffle.append", "numpy.array", "len", "numpy.array", "range", "range", "len"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.encode_to_split", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.position_index"], ["", "def", "batch_gen_with_point_wise", "(", "df", ",", "alphabet", ",", "batch_size", "=", "10", ",", "q_len", "=", "33", ")", ":", "\n", "    ", "input_num", "=", "3", "\n", "pairs", "=", "[", "]", "\n", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "        ", "question", "=", "encode_to_split", "(", "\n", "row", "[", "\"question\"", "]", ",", "alphabet", ",", "max_sentence", "=", "q_len", ")", "\n", "q_position", "=", "position_index", "(", "row", "[", "'question'", "]", ",", "q_len", ")", "\n", "label", "=", "transform", "(", "row", "[", "\"flag\"", "]", ")", "\n", "pairs", ".", "append", "(", "(", "question", ",", "label", ",", "q_position", ")", ")", "\n", "", "n_batches", "=", "int", "(", "len", "(", "pairs", ")", "*", "1.0", "/", "batch_size", ")", "\n", "pairs", "=", "sklearn", ".", "utils", ".", "shuffle", "(", "pairs", ",", "random_state", "=", "121", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "n_batches", ")", ":", "\n", "        ", "batch", "=", "pairs", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "yield", "[", "np", ".", "array", "(", "[", "pair", "[", "i", "]", "for", "pair", "in", "batch", "]", ")", "for", "i", "in", "range", "(", "input_num", ")", "]", "\n", "", "batch", "=", "pairs", "[", "n_batches", "*", "batch_size", ":", "]", "+", "[", "pairs", "[", "n_batches", "*", "\n", "batch_size", "-", "1", "]", "]", "*", "(", "batch_size", "-", "len", "(", "pairs", ")", "+", "n_batches", "*", "batch_size", ")", "\n", "yield", "[", "np", ".", "array", "(", "[", "pair", "[", "i", "]", "for", "pair", "in", "batch", "]", ")", "for", "i", "in", "range", "(", "input_num", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.multiply.ComplexMultiply.__init__": [[14, 18], ["keras.layers.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "# self.output_dim = output_dim", "\n", "        ", "self", ".", "trainable", "=", "False", "\n", "super", "(", "ComplexMultiply", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.multiply.ComplexMultiply.get_config": [[19, 23], ["super().get_config", "dict", "list", "list", "super().get_config.items", "config.items"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.multiply.ComplexMultiply.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "'trainable'", ":", "self", ".", "trainable", "}", "\n", "base_config", "=", "super", "(", "ComplexMultiply", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "dict", "(", "list", "(", "base_config", ".", "items", "(", ")", ")", "+", "list", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.multiply.ComplexMultiply.build": [[24, 42], ["super().build", "isinstance", "ValueError", "len", "ValueError", "str", "len"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.multiply.ComplexMultiply.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "\n", "# Create a trainable weight variable for this layer.", "\n", "        ", "if", "not", "isinstance", "(", "input_shape", ",", "list", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'This layer should be called '", "\n", "'on a list of 2 inputs.'", ")", "\n", "\n", "", "if", "len", "(", "input_shape", ")", "!=", "2", ":", "\n", "             ", "raise", "ValueError", "(", "'This layer should be called '", "\n", "'on a list of 2 inputs.'", "\n", "'Got '", "+", "str", "(", "len", "(", "input_shape", ")", ")", "+", "' inputs.'", ")", "\n", "\n", "\n", "# self.kernel = self.add_weight(name='kernel',", "\n", "#                               shape=(input_shape[1], self.output_dim),", "\n", "#                               initializer='uniform',", "\n", "#                               trainable=True)", "\n", "", "super", "(", "ComplexMultiply", ",", "self", ")", ".", "build", "(", "input_shape", ")", "# Be sure to call this somewhere!", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.multiply.ComplexMultiply.call": [[43, 79], ["isinstance", "ValueError", "len", "ValueError", "len", "keras.backend.repeat_elements", "keras.backend.repeat_elements", "keras.backend.cos", "keras.backend.sin", "len", "keras.backend.cos", "keras.backend.sin", "ValueError", "str", "len", "str", "len"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "if", "not", "isinstance", "(", "inputs", ",", "list", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'This layer should be called '", "\n", "'on a list of 2 inputs.'", ")", "\n", "\n", "", "if", "len", "(", "inputs", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "'This layer should be called '", "\n", "'on a list of 2 inputs.'", "\n", "'Got '", "+", "str", "(", "len", "(", "inputs", ")", ")", "+", "' inputs.'", ")", "\n", "\n", "", "phase", "=", "inputs", "[", "0", "]", "\n", "amplitude", "=", "inputs", "[", "1", "]", "\n", "\n", "\n", "sentence_length", "=", "amplitude", ".", "shape", "[", "1", "]", "# ?,56,100", "\n", "embedding_dim", "=", "amplitude", ".", "shape", "[", "2", "]", "#100", "\n", "if", "(", "len", "(", "phase", ".", "shape", ")", "==", "2", ")", ":", "\n", "            ", "cos", "=", "K", ".", "repeat_elements", "(", "K", ".", "cos", "(", "phase", ")", ",", "embedding_dim", ",", "axis", "=", "2", ")", "\n", "sin", "=", "K", ".", "repeat_elements", "(", "K", ".", "sin", "(", "phase", ")", ",", "embedding_dim", ",", "axis", "=", "2", ")", "\n", "", "elif", "(", "len", "(", "phase", ".", "shape", ")", "==", "3", ")", ":", "\n", "            ", "cos", "=", "K", ".", "cos", "(", "phase", ")", "\n", "sin", "=", "K", ".", "sin", "(", "phase", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Each input should be of dimension 2 or 3.'", "\n", "'Got '", "+", "str", "(", "len", "(", "phase", ".", "shape", ")", ")", "+", "' dimension.'", ")", "\n", "\n", "#        print(cos.shape)", "\n", "#        print(sin.shape)", "\n", "\n", "", "real_part", "=", "cos", "*", "amplitude", "\n", "imag_part", "=", "sin", "*", "amplitude", "\n", "# print(real_part.shape)", "\n", "# print(imag_part.shape)", "\n", "\n", "return", "[", "real_part", ",", "imag_part", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.multiply.ComplexMultiply.compute_output_shape": [[80, 84], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "# print(type(input_shape[1]))", "\n", "\n", "        ", "return", "[", "input_shape", "[", "1", "]", ",", "input_shape", "[", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.multiply.main": [[86, 108], ["keras.models.Input", "keras.models.Input", "keras.models.Model", "keras.models.Model.compile", "keras.models.Model.summary", "numpy.random.random", "numpy.random.random", "keras.models.Model.predict", "print", "multiply.ComplexMultiply"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.train.predict"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "\n", "    ", "input_2", "=", "Input", "(", "shape", "=", "(", "3", ",", "5", ")", ",", "dtype", "=", "'float'", ")", "\n", "input_1", "=", "Input", "(", "shape", "=", "(", "3", ",", "1", ")", ",", "dtype", "=", "'float'", ")", "\n", "[", "output_1", ",", "output_2", "]", "=", "ComplexMultiply", "(", ")", "(", "[", "input_1", ",", "input_2", "]", ")", "\n", "\n", "\n", "model", "=", "Model", "(", "[", "input_1", ",", "input_2", "]", ",", "[", "output_1", ",", "output_2", "]", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'binary_crossentropy'", ",", "\n", "optimizer", "=", "'rmsprop'", ",", "\n", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "x", "=", "np", ".", "random", ".", "random", "(", "(", "3", ",", "3", ",", "1", ")", ")", "\n", "x_2", "=", "np", ".", "random", ".", "random", "(", "(", "3", ",", "3", ",", "5", ")", ")", "\n", "\n", "\n", "# print(x)", "\n", "# print(x_2)", "\n", "output", "=", "model", ".", "predict", "(", "[", "x", ",", "x_2", "]", ")", "\n", "print", "(", "output", "[", "0", "]", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Fasttext.evaluation.evaluationBypandas_f1_acc": [[8, 37], ["range", "len"], "function", ["None"], ["def", "evaluationBypandas_f1_acc", "(", "df", ",", "predicted_label", ")", ":", "\n", "\t", "df", "[", "'predicted_label'", "]", "=", "predicted_label", "\n", "tp", "=", "0", "\n", "fp", "=", "0", "\n", "tn", "=", "0", "\n", "fn", "=", "0", "\n", "m", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "df", "[", "'predicted_label'", "]", ")", ")", ":", "\n", "\t\t", "if", "df", "[", "'predicted_label'", "]", "[", "i", "]", "==", "df", "[", "'flag'", "]", "[", "i", "]", "and", "df", "[", "'flag'", "]", "[", "i", "]", "==", "1", ":", "\n", "\t\t\t", "tp", "=", "tp", "+", "1", "\n", "", "if", "df", "[", "'predicted_label'", "]", "[", "i", "]", "==", "df", "[", "'flag'", "]", "[", "i", "]", "and", "df", "[", "'flag'", "]", "[", "i", "]", "==", "0", ":", "\n", "\t\t\t", "tn", "=", "tn", "+", "1", "\n", "", "if", "df", "[", "'predicted_label'", "]", "[", "i", "]", "!=", "df", "[", "'flag'", "]", "[", "i", "]", "and", "df", "[", "'flag'", "]", "[", "i", "]", "==", "1", ":", "\n", "\t\t\t", "fp", "=", "fp", "+", "1", "\n", "", "if", "df", "[", "'predicted_label'", "]", "[", "i", "]", "!=", "df", "[", "'flag'", "]", "[", "i", "]", "and", "df", "[", "'flag'", "]", "[", "i", "]", "==", "0", ":", "\n", "\t\t\t", "fn", "=", "fn", "+", "1", "\n", "", "", "if", "tp", "==", "0", "and", "fn", "==", "0", ":", "\n", "\t\t", "recall_rate", "=", "0", "\n", "", "else", ":", "\n", "\t\t", "recall_rate", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "", "precision_rate", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "if", "tp", "==", "0", "and", "fp", "==", "0", ":", "\n", "\t\t", "precision_rate", "=", "0", "\n", "", "accuracy", "=", "(", "tp", "+", "tn", ")", "/", "(", "tp", "+", "fp", "+", "tn", "+", "fn", ")", "\n", "if", "precision_rate", "==", "0", "and", "recall_rate", "==", "0", ":", "\n", "\t\t", "f1_score", "=", "0", "\n", "", "else", ":", "\n", "\t\t", "f1_score", "=", "2", "*", "precision_rate", "*", "recall_rate", "/", "(", "precision_rate", "+", "recall_rate", ")", "\n", "", "return", "accuracy", ",", "f1_score", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Fasttext_origin.Fasttext.__init__": [[16, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "max_input_left", ",", "embeddings", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "dataset", ",", "hidden_num", ",", "l2_reg_lambda", "=", "0.0", ",", "is_Embedding_Needed", "=", "False", ",", "trainable", "=", "True", ",", "extend_feature_dim", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "hidden_num", "=", "hidden_num", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "para", "=", "[", "]", "\n", "self", ".", "max_input_left", "=", "max_input_left", "\n", "self", ".", "extend_feature_dim", "=", "extend_feature_dim", "\n", "self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n", "self", ".", "rng", "=", "23455", "\n", "", "def", "create_placeholder", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Fasttext_origin.Fasttext.create_placeholder": [[32, 40], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "create_placeholder", "(", "self", ")", ":", "\n", "        ", "self", ".", "question", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'input_question'", ")", "\n", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "6", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "", "def", "add_embeddings", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Fasttext_origin.Fasttext.add_embeddings": [[40, 51], ["Fasttext_origin.Fasttext.concat_embedding", "tensorflow.reduce_mean", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "numpy.array", "tensorflow.random_uniform", "tensorflow.random_uniform"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.concat_embedding"], ["", "def", "add_embeddings", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "embeddings", ")", ",", "name", "=", "\"W\"", ",", "dtype", "=", "\"float32\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "W_pos", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "500", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "self", ".", "embedding_W", "=", "W", "\n", "self", ".", "embedding_W_pos", "=", "W_pos", "\n", "", "self", ".", "embedded_chars_q", ",", "self", ".", "embedded_chars_q_pos", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n", "self", ".", "represent", "=", "tf", ".", "reduce_mean", "(", "self", ".", "embedded_chars_q", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Fasttext_origin.Fasttext.feed_neural_work": [[52, 66], ["tensorflow.constant", "tensorflow.name_scope", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.constant", "tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["", "def", "feed_neural_work", "(", "self", ")", ":", "\n", "        ", "self", ".", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "embedding_size", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "6", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "embedding_size", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "self", ".", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "\n", "self", ".", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "self", ".", "logits", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "self", ".", "represent", ",", "W", ",", "b", ",", "name", "=", "\"logits\"", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "logits", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "", "", "def", "create_loss", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Fasttext_origin.Fasttext.create_loss": [[66, 74], ["tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.cast"], "methods", ["None"], ["", "", "def", "create_loss", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "logits", ",", "labels", "=", "self", ".", "input_y", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "self", ".", "l2_loss", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Fasttext_origin.Fasttext.concat_embedding": [[74, 78], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n", "        ", "embedded_chars_q", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W", ",", "words_indice", ")", "\n", "embedding_chars_q_pos", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W_pos", ",", "position_indice", ")", "\n", "return", "embedded_chars_q", ",", "embedding_chars_q_pos", "\n", "", "def", "build_graph", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Fasttext_origin.Fasttext.build_graph": [[78, 83], ["Fasttext_origin.Fasttext.create_placeholder", "Fasttext_origin.Fasttext.add_embeddings", "Fasttext_origin.Fasttext.feed_neural_work", "Fasttext_origin.Fasttext.create_loss"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_placeholder", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.add_embeddings", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.feed_neural_work", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_loss"], ["", "def", "build_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_placeholder", "(", ")", "\n", "self", ".", "add_embeddings", "(", ")", "\n", "self", ".", "feed_neural_work", "(", ")", "\n", "self", ".", "create_loss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.TPE_reduce.Fasttext.__init__": [[16, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "max_input_left", ",", "embeddings", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "dataset", ",", "hidden_num", ",", "l2_reg_lambda", "=", "0.0", ",", "is_Embedding_Needed", "=", "False", ",", "trainable", "=", "True", ",", "extend_feature_dim", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "hidden_num", "=", "hidden_num", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "para", "=", "[", "]", "\n", "self", ".", "max_input_left", "=", "max_input_left", "\n", "self", ".", "extend_feature_dim", "=", "extend_feature_dim", "\n", "self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n", "self", ".", "rng", "=", "23455", "\n", "", "def", "create_placeholder", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.TPE_reduce.Fasttext.create_placeholder": [[32, 40], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "create_placeholder", "(", "self", ")", ":", "\n", "        ", "self", ".", "question", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'input_question'", ")", "\n", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "6", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "", "def", "Position_Embedding", "(", "self", ",", "position_size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.TPE_reduce.Fasttext.Position_Embedding": [[40, 51], ["tensorflow.expand_dims", "tensorflow.range", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.concat", "tensorflow.pow", "tensorflow.cast", "tensorflow.cos", "tensorflow.sin", "tensorflow.range"], "methods", ["None"], ["", "def", "Position_Embedding", "(", "self", ",", "position_size", ")", ":", "\n", "        ", "batch_size", "=", "self", ".", "batch_size", "\n", "seq_len", "=", "500", "\n", "position_j", "=", "1.", "/", "tf", ".", "pow", "(", "10000.", ",", "2", "*", "tf", ".", "range", "(", "position_size", "/", "2", ",", "dtype", "=", "tf", ".", "float32", ")", "/", "position_size", ")", "\n", "position_j", "=", "tf", ".", "expand_dims", "(", "position_j", ",", "0", ")", "\n", "position_i", "=", "tf", ".", "range", "(", "tf", ".", "cast", "(", "seq_len", ",", "tf", ".", "float32", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "position_i", "=", "tf", ".", "expand_dims", "(", "position_i", ",", "1", ")", "\n", "position_ij", "=", "tf", ".", "matmul", "(", "position_i", ",", "position_j", ")", "\n", "position_embedding", "=", "tf", ".", "concat", "(", "[", "math", ".", "pi", "*", "tf", ".", "cos", "(", "position_ij", ")", ",", "math", ".", "pi", "*", "tf", ".", "sin", "(", "position_ij", ")", "]", ",", "1", ")", "\n", "\n", "return", "position_embedding", "\n", "", "def", "add_embeddings", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.TPE_reduce.Fasttext.add_embeddings": [[51, 65], ["TPE_reduce.Fasttext.concat_embedding", "tensorflow.reduce_sum", "print", "tensorflow.reduce_mean", "print", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "numpy.array", "TPE_reduce.Fasttext.Position_Embedding", "tensorflow.random_uniform"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.concat_embedding", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.Position_Embedding"], ["", "def", "add_embeddings", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "embeddings", ")", ",", "name", "=", "\"W\"", ",", "dtype", "=", "\"float32\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "W_pos", "=", "tf", ".", "Variable", "(", "self", ".", "Position_Embedding", "(", "self", ".", "embedding_size", ")", ",", "name", "=", "'W'", ",", "trainable", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "self", ".", "embedding_W", "=", "W", "\n", "self", ".", "embedding_W_pos", "=", "W_pos", "\n", "", "self", ".", "embedded_chars_q", ",", "self", ".", "embedded_chars_q_pos", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n", "self", ".", "embedded_chars_q", "=", "tf", ".", "reduce_sum", "(", "[", "self", ".", "embedded_chars_q", ",", "self", ".", "embedded_chars_q_pos", "]", ",", "0", ")", "\n", "\n", "", "def", "feed_neural_work", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ".", "embedded_chars_q", ")", "\n", "fw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.TPE_reduce.Fasttext.feed_neural_work": [[65, 79], ["tensorflow.constant", "tensorflow.name_scope", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.constant", "tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["fw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "\n", "num_units", "=", "self", ".", "hidden_num", ",", "state_is_tuple", "=", "True", ")", "\n", "outputs", ",", "last_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", "=", "fw_cell", ",", "inputs", "=", "self", ".", "embedded_chars_q", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "last", "=", "outputs", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "print", "(", "last", ")", "\n", "fc", "=", "tf", ".", "layers", ".", "dense", "(", "last", ",", "self", ".", "hidden_num", "/", "2", ",", "name", "=", "\"1\"", ")", "\n", "fc", "=", "tf", ".", "nn", ".", "relu", "(", "fc", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "6", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.TPE_reduce.Fasttext.create_loss": [[79, 87], ["tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.cast"], "methods", ["None"], ["", "else", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "fc", ",", "W", ",", "b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.TPE_reduce.Fasttext.concat_embedding": [[87, 91], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "#0.754", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "l2_loss", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.TPE_reduce.Fasttext.build_graph": [[91, 96], ["TPE_reduce.Fasttext.create_placeholder", "TPE_reduce.Fasttext.add_embeddings", "TPE_reduce.Fasttext.feed_neural_work", "TPE_reduce.Fasttext.create_loss"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_placeholder", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.add_embeddings", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.feed_neural_work", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_loss"], ["", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "\n", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.PE_reduce.Fasttext.__init__": [[16, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "max_input_left", ",", "embeddings", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "dataset", ",", "hidden_num", ",", "l2_reg_lambda", "=", "0.0", ",", "is_Embedding_Needed", "=", "False", ",", "trainable", "=", "True", ",", "extend_feature_dim", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "hidden_num", "=", "hidden_num", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "para", "=", "[", "]", "\n", "self", ".", "max_input_left", "=", "max_input_left", "\n", "self", ".", "extend_feature_dim", "=", "extend_feature_dim", "\n", "self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n", "self", ".", "rng", "=", "23455", "\n", "", "def", "create_placeholder", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.PE_reduce.Fasttext.create_placeholder": [[32, 40], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "create_placeholder", "(", "self", ")", ":", "\n", "        ", "self", ".", "question", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'input_question'", ")", "\n", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "6", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "", "def", "add_embeddings", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.PE_reduce.Fasttext.add_embeddings": [[40, 54], ["PE_reduce.Fasttext.concat_embedding", "tensorflow.reduce_sum", "print", "tensorflow.reduce_mean", "print", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "numpy.array", "tensorflow.random_uniform", "tensorflow.random_uniform"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.concat_embedding"], ["", "def", "add_embeddings", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "embeddings", ")", ",", "name", "=", "\"W\"", ",", "dtype", "=", "\"float32\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "W_pos", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "500", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "self", ".", "embedding_W", "=", "W", "\n", "self", ".", "embedding_W_pos", "=", "W_pos", "\n", "", "self", ".", "embedded_chars_q", ",", "self", ".", "embedded_chars_q_pos", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n", "self", ".", "embedded_chars_q", "=", "tf", ".", "reduce_sum", "(", "[", "self", ".", "embedded_chars_q", ",", "self", ".", "embedded_chars_q_pos", "]", ",", "0", ")", "\n", "\n", "", "def", "feed_neural_work", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ".", "embedded_chars_q", ")", "\n", "fw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.PE_reduce.Fasttext.feed_neural_work": [[55, 69], ["tensorflow.constant", "tensorflow.name_scope", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.constant", "tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["num_units", "=", "self", ".", "hidden_num", ",", "state_is_tuple", "=", "True", ")", "\n", "outputs", ",", "last_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", "=", "fw_cell", ",", "inputs", "=", "self", ".", "embedded_chars_q", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "last", "=", "outputs", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "print", "(", "last", ")", "\n", "fc", "=", "tf", ".", "layers", ".", "dense", "(", "last", ",", "self", ".", "hidden_num", "/", "2", ",", "name", "=", "\"1\"", ")", "\n", "fc", "=", "tf", ".", "nn", ".", "relu", "(", "fc", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "6", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.PE_reduce.Fasttext.create_loss": [[69, 77], ["tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.cast"], "methods", ["None"], ["                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "fc", ",", "W", ",", "b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "#0.754", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.PE_reduce.Fasttext.concat_embedding": [[77, 81], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup"], "methods", ["None"], ["            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "#0.754", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "l2_loss", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "\n", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.PE_reduce.Fasttext.build_graph": [[81, 86], ["PE_reduce.Fasttext.create_placeholder", "PE_reduce.Fasttext.add_embeddings", "PE_reduce.Fasttext.feed_neural_work", "PE_reduce.Fasttext.create_loss"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_placeholder", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.add_embeddings", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.feed_neural_work", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_loss"], ["self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n", "        ", "embedded_chars_q", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W", ",", "words_indice", ")", "\n", "embedding_chars_q_pos", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W_pos", ",", "position_indice", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_vanilla.Fasttext.__init__": [[16, 32], ["None"], "methods", ["None"], ["\n", "class", "LSTM", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "max_input_left", ",", "embeddings", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "dataset", ",", "hidden_num", ",", "l2_reg_lambda", "=", "0.0", ",", "is_Embedding_Needed", "=", "False", ",", "trainable", "=", "True", ",", "extend_feature_dim", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "hidden_num", "=", "hidden_num", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "para", "=", "[", "]", "\n", "self", ".", "max_input_left", "=", "max_input_left", "\n", "self", ".", "extend_feature_dim", "=", "extend_feature_dim", "\n", "self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_vanilla.Fasttext.create_placeholder": [[32, 40], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n", "self", ".", "rng", "=", "23455", "\n", "", "def", "create_placeholder", "(", "self", ")", ":", "\n", "        ", "self", ".", "question", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'input_question'", ")", "\n", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "6", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_vanilla.Fasttext.add_embeddings": [[40, 54], ["Complex_vanilla.Fasttext.concat_embedding", "tensorflow.reduce_sum", "print", "tensorflow.reduce_mean", "print", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "numpy.array", "tensorflow.random_uniform", "tensorflow.random_uniform"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.concat_embedding"], ["", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "", "def", "add_embeddings", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "embeddings", ")", ",", "name", "=", "\"W\"", ",", "dtype", "=", "\"float32\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "W_pos", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "0", ",", "2", "*", "math", ".", "pi", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "self", ".", "embedding_W", "=", "W", "\n", "self", ".", "embedding_W_pos", "=", "W_pos", "\n", "", "self", ".", "embedded_chars_q", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n", "        ", "embedded_chars_q", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W", ",", "words_indice", ")", "\n", "embedding_chars_q_phase", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W_pos", ",", "words_indice", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_vanilla.Fasttext.feed_neural_work": [[55, 69], ["tensorflow.constant", "tensorflow.name_scope", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.constant", "tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["[", "embedded_chars_q", ",", "embedding_chars_q_phase", "]", "=", "ComplexMultiply", "(", ")", "(", "[", "embedding_chars_q_phase", ",", "embedded_chars_q", "]", ")", "\n", "embedded_chars_q", "=", "tf", ".", "concat", "(", "[", "embedded_chars_q", ",", "embedding_chars_q_phase", "]", ",", "1", ")", "\n", "return", "embedded_chars_q", "\n", "\n", "", "def", "feed_neural_work", "(", "self", ")", ":", "\n", "        ", "self", ".", "cell", "=", "URNNCell", "(", "num_units", "=", "self", ".", "max_input_left", ",", "num_in", "=", "self", ".", "embedding_size", ")", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "outputs", ",", "final_state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "self", ".", "cell", ",", "self", ".", "embedded_chars_q", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "dropout", "(", "outputs", ",", "self", ".", "dropout_keep_prob", ",", "name", "=", "\"hidden_output_drop\"", ")", "\n", "last", "=", "outputs", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "fc", "=", "tf", ".", "layers", ".", "dense", "(", "last", ",", "self", ".", "hidden_num", "/", "2", ",", "name", "=", "\"1\"", ")", "\n", "fc", "=", "tf", ".", "nn", ".", "relu", "(", "fc", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_vanilla.Fasttext.create_loss": [[69, 77], ["tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.cast"], "methods", ["None"], ["                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "6", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "fc", ",", "W", ",", "b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_vanilla.Fasttext.concat_embedding": [[77, 82], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "multiply.ComplexMultiply"], "methods", ["None"], ["self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "#0.754", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "l2_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_vanilla.Fasttext.build_graph": [[82, 87], ["Complex_vanilla.Fasttext.create_placeholder", "Complex_vanilla.Fasttext.add_embeddings", "Complex_vanilla.Fasttext.feed_neural_work", "Complex_vanilla.Fasttext.create_loss"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_placeholder", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.add_embeddings", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.feed_neural_work", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_loss"], ["\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "\n", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.__init__": [[16, 32], ["None"], "methods", ["None"], ["\n", "class", "LSTM", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "max_input_left", ",", "embeddings", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "dataset", ",", "hidden_num", ",", "l2_reg_lambda", "=", "0.0", ",", "is_Embedding_Needed", "=", "False", ",", "trainable", "=", "True", ",", "extend_feature_dim", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "hidden_num", "=", "hidden_num", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "para", "=", "[", "]", "\n", "self", ".", "max_input_left", "=", "max_input_left", "\n", "self", ".", "extend_feature_dim", "=", "extend_feature_dim", "\n", "self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_placeholder": [[32, 40], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n", "self", ".", "rng", "=", "23455", "\n", "", "def", "create_placeholder", "(", "self", ")", ":", "\n", "        ", "self", ".", "question", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'input_question'", ")", "\n", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "6", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.Position_Embedding": [[40, 52], ["tensorflow.expand_dims", "tensorflow.range", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.pow", "tensorflow.cast", "tensorflow.range"], "methods", ["None"], ["", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "", "def", "Position_Embedding", "(", "self", ",", "position_size", ")", ":", "\n", "        ", "batch_size", "=", "self", ".", "batch_size", "\n", "seq_len", "=", "self", ".", "vocab_size", "\n", "position_j", "=", "1.", "/", "tf", ".", "pow", "(", "10000.", ",", "2", "*", "tf", ".", "range", "(", "position_size", ",", "dtype", "=", "tf", ".", "float32", ")", "/", "position_size", ")", "\n", "position_j", "=", "tf", ".", "expand_dims", "(", "position_j", ",", "0", ")", "\n", "\n", "position_i", "=", "tf", ".", "range", "(", "tf", ".", "cast", "(", "seq_len", ",", "tf", ".", "float32", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "position_i", "=", "tf", ".", "expand_dims", "(", "position_i", ",", "1", ")", "\n", "position_ij", "=", "tf", ".", "matmul", "(", "position_i", ",", "position_j", ")", "\n", "position_embedding", "=", "position_ij", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.add_embeddings": [[52, 66], ["Complex_order.Fasttext.concat_embedding", "tensorflow.reduce_sum", "print", "tensorflow.reduce_mean", "print", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "numpy.array", "Complex_order.Fasttext.Position_Embedding", "tensorflow.random_uniform"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.concat_embedding", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.Position_Embedding"], ["\n", "return", "position_embedding", "\n", "", "def", "add_embeddings", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "embeddings", ")", ",", "name", "=", "\"W\"", ",", "dtype", "=", "\"float32\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "W_pos", "=", "tf", ".", "Variable", "(", "self", ".", "Position_Embedding", "(", "self", ".", "embedding_size", ")", ",", "name", "=", "'W'", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "self", ".", "embedding_W", "=", "W", "\n", "self", ".", "embedding_W_pos", "=", "W_pos", "\n", "", "self", ".", "embedded_chars_q", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n", "", "def", "feed_neural_work", "(", "self", ")", ":", "\n", "        ", "self", ".", "cell", "=", "URNNCell", "(", "num_units", "=", "self", ".", "max_input_left", ",", "num_in", "=", "self", ".", "embedding_size", ")", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.feed_neural_work": [[67, 81], ["tensorflow.constant", "tensorflow.name_scope", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.constant", "tensorflow.constant", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer"], "methods", ["None"], ["\n", "outputs", ",", "final_state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "self", ".", "cell", ",", "self", ".", "embedded_chars_q", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "dropout", "(", "outputs", ",", "self", ".", "dropout_keep_prob", ",", "name", "=", "\"hidden_output_drop\"", ")", "\n", "last", "=", "outputs", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "fc", "=", "tf", ".", "layers", ".", "dense", "(", "last", ",", "self", ".", "hidden_num", "/", "2", ",", "name", "=", "\"1\"", ")", "\n", "fc", "=", "tf", ".", "nn", ".", "relu", "(", "fc", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "6", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_loss": [[81, 89], ["tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.cast"], "methods", ["None"], ["l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "fc", ",", "W", ",", "b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "#0.754", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "l2_loss", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.concat_embedding": [[89, 97], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.expand_dims", "tensorflow.cast", "tensorflow.multiply", "multiply.ComplexMultiply"], "methods", ["None"], ["", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n", "        ", "embedded_chars_q", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W", ",", "words_indice", ")", "\n", "embedding_chars_q_phase", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W_pos", ",", "words_indice", ")", "\n", "pos", "=", "tf", ".", "expand_dims", "(", "position_indice", ",", "2", ")", "\n", "pos", "=", "tf", ".", "cast", "(", "pos", ",", "tf", ".", "float32", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.build_graph": [[97, 102], ["Complex_order.Fasttext.create_placeholder", "Complex_order.Fasttext.add_embeddings", "Complex_order.Fasttext.feed_neural_work", "Complex_order.Fasttext.create_loss"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_placeholder", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.add_embeddings", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.feed_neural_work", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_fasttext.Complex_order.Fasttext.create_loss"], ["pos", "=", "tf", ".", "cast", "(", "pos", ",", "tf", ".", "float32", ")", "\n", "embedding_chars_q_phase", "=", "tf", ".", "multiply", "(", "pos", ",", "embedding_chars_q_phase", ")", "\n", "[", "embedded_chars_q", ",", "embedding_chars_q_phase", "]", "=", "ComplexMultiply", "(", ")", "(", "[", "embedding_chars_q_phase", ",", "embedded_chars_q", "]", ")", "\n", "embedded_chars_q", "=", "tf", ".", "concat", "(", "[", "embedded_chars_q", ",", "embedding_chars_q_phase", "]", ",", "1", ")", "\n", "return", "embedded_chars_q", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.encoder_complex.Encoder.__init__": [[13, 17], ["torch.nn.Module.__init__", "train_utils.clones", "sublayer.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.train_utils.clones"], ["def", "__init__", "(", "self", ",", "layer", ",", "N", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "clones", "(", "layer", ",", "N", ")", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "layer", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.encoder_complex.Encoder.forward": [[18, 25], ["layer", "encoder_complex.Encoder.norm", "encoder_complex.Encoder.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_real", ",", "x_phase", ",", "mask", "=", "None", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "\n", "            ", "x_real", ",", "x_phase", "=", "layer", "(", "x_real", ",", "x_phase", ",", "mask", ")", "\n", "# x_phase = layer(, mask)", "\n", "\n", "", "return", "self", ".", "norm", "(", "x_real", ")", ",", "self", ".", "norm", "(", "x_phase", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.encoder_complex.EncoderLayer.__init__": [[33, 39], ["torch.nn.Module.__init__", "train_utils.clones", "sublayer.SublayerOutput"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.train_utils.clones"], ["def", "__init__", "(", "self", ",", "size", ",", "self_attn", ",", "feed_forward", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "EncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "self_attn", "\n", "self", ".", "feed_forward", "=", "feed_forward", "\n", "self", ".", "sublayer_output", "=", "clones", "(", "SublayerOutput", "(", "size", ",", "dropout", ")", ",", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.encoder_complex.EncoderLayer.forward": [[40, 47], ["encoder_complex.EncoderLayer.self_attn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"Transformer Encoder\"", "\n", "x", ",", "y", "=", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ",", "y", ",", "y", ",", "y", ",", "mask", ")", "# Encoder self-attention", "\n", "x", "=", "self", ".", "sublayer_output", "[", "0", "]", "(", "x", ",", "lambda", "x", ":", "x", ")", "\n", "y", "=", "self", ".", "sublayer_output", "[", "0", "]", "(", "y", ",", "lambda", "x", ":", "y", ")", "\n", "\n", "return", "self", ".", "sublayer_output", "[", "1", "]", "(", "x", ",", "self", ".", "feed_forward", ")", ",", "self", ".", "sublayer_output", "[", "1", "]", "(", "y", ",", "self", ".", "feed_forward", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.encoder.Encoder.__init__": [[13, 17], ["torch.nn.Module.__init__", "train_utils.clones", "sublayer.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.train_utils.clones"], ["def", "__init__", "(", "self", ",", "layer", ",", "N", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "clones", "(", "layer", ",", "N", ")", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "layer", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.encoder.Encoder.forward": [[18, 22], ["encoder.Encoder.norm", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "mask", ")", "\n", "", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.encoder.EncoderLayer.__init__": [[30, 36], ["torch.nn.Module.__init__", "train_utils.clones", "sublayer.SublayerOutput"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.train_utils.clones"], ["def", "__init__", "(", "self", ",", "size", ",", "self_attn", ",", "feed_forward", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "EncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "self_attn", "\n", "self", ".", "feed_forward", "=", "feed_forward", "\n", "self", ".", "sublayer_output", "=", "clones", "(", "SublayerOutput", "(", "size", ",", "dropout", ")", ",", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.encoder.EncoderLayer.forward": [[37, 41], ["encoder.EncoderLayer.self_attn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"Transformer Encoder\"", "\n", "x", "=", "self", ".", "sublayer_output", "[", "0", "]", "(", "x", ",", "lambda", "x", ":", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ",", "mask", ")", ")", "# Encoder self-attention", "\n", "return", "self", ".", "sublayer_output", "[", "1", "]", "(", "x", ",", "self", ".", "feed_forward", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.main.clip_gradient": [[13, 17], ["list", "filter", "p.grad.data.clamp_", "model.parameters"], "function", ["None"], ["def", "clip_gradient", "(", "model", ",", "clip_value", ")", ":", "\n", "    ", "params", "=", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "grad", "is", "not", "None", ",", "model", ".", "parameters", "(", ")", ")", ")", "\n", "for", "p", "in", "params", ":", "\n", "        ", "p", ".", "grad", ".", "data", ".", "clamp_", "(", "-", "clip_value", ",", "clip_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.main.train_model": [[19, 53], ["model.cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "model.train", "enumerate", "filter", "torch.autograd.Variable().long", "torch.autograd.Variable().long", "torch.autograd.Variable().long", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.optim.Adam.zero_grad", "model", "loss_fn", "loss_fn.backward", "main.clip_gradient", "torch.optim.Adam.step", "loss_fn.item", "acc.item", "model.parameters", "text.cuda.cuda", "target.cuda.cuda", "len", "print", "len", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "text.cuda.size", "loss_fn.item", "acc.item", "[].view", "target.cuda.size", "torch.max", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.train", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.main.clip_gradient"], ["", "", "def", "train_model", "(", "model", ",", "train_iter", ",", "epoch", ")", ":", "\n", "    ", "total_epoch_loss", "=", "0", "\n", "total_epoch_acc", "=", "0", "\n", "model", ".", "cuda", "(", ")", "\n", "optim", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ")", "\n", "steps", "=", "0", "\n", "model", ".", "train", "(", ")", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "train_iter", ")", ":", "\n", "        ", "text", "=", "batch", ".", "text", "[", "0", "]", "\n", "target", "=", "batch", ".", "label", "\n", "target", "=", "torch", ".", "autograd", ".", "Variable", "(", "target", ")", ".", "long", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "text", "=", "text", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "", "if", "(", "text", ".", "size", "(", ")", "[", "0", "]", "is", "not", "32", ")", ":", "# One of the batch returned by BucketIterator has length different than 32.", "\n", "            ", "continue", "\n", "", "optim", ".", "zero_grad", "(", ")", "\n", "prediction", "=", "model", "(", "text", ")", "\n", "loss", "=", "loss_fn", "(", "prediction", ",", "target", ")", "\n", "num_corrects", "=", "(", "torch", ".", "max", "(", "prediction", ",", "1", ")", "[", "1", "]", ".", "view", "(", "target", ".", "size", "(", ")", ")", ".", "data", "==", "target", ".", "data", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "acc", "=", "100.0", "*", "num_corrects", "/", "len", "(", "batch", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "clip_gradient", "(", "model", ",", "1e-1", ")", "\n", "optim", ".", "step", "(", ")", "\n", "steps", "+=", "1", "\n", "\n", "if", "steps", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "\n", "f'Epoch: {epoch + 1}, Idx: {idx + 1}, Training Loss: {loss.item():.4f}, Training Accuracy: {acc.item(): .2f}%'", ")", "\n", "\n", "", "total_epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "total_epoch_acc", "+=", "acc", ".", "item", "(", ")", "\n", "\n", "", "return", "total_epoch_loss", "/", "len", "(", "train_iter", ")", ",", "total_epoch_acc", "/", "len", "(", "train_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.main.eval_model": [[55, 77], ["model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.autograd.Variable().long", "torch.autograd.Variable().long", "torch.autograd.Variable().long", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "model", "loss_fn", "loss_fn.item", "acc.item", "len", "len", "text.cuda.cuda", "target.cuda.cuda", "len", "text.cuda.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "[].view", "target.cuda.size", "torch.max", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.eval"], ["", "def", "eval_model", "(", "model", ",", "val_iter", ")", ":", "\n", "    ", "total_epoch_loss", "=", "0", "\n", "total_epoch_acc", "=", "0", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "idx", ",", "batch", "in", "enumerate", "(", "val_iter", ")", ":", "\n", "            ", "text", "=", "batch", ".", "text", "[", "0", "]", "\n", "if", "(", "text", ".", "size", "(", ")", "[", "0", "]", "is", "not", "32", ")", ":", "\n", "                ", "continue", "\n", "", "target", "=", "batch", ".", "label", "\n", "target", "=", "torch", ".", "autograd", ".", "Variable", "(", "target", ")", ".", "long", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "text", "=", "text", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "", "prediction", "=", "model", "(", "text", ")", "\n", "loss", "=", "loss_fn", "(", "prediction", ",", "target", ")", "\n", "num_corrects", "=", "(", "torch", ".", "max", "(", "prediction", ",", "1", ")", "[", "1", "]", ".", "view", "(", "target", ".", "size", "(", ")", ")", ".", "data", "==", "target", ".", "data", ")", ".", "sum", "(", ")", "\n", "acc", "=", "100.0", "*", "num_corrects", "/", "len", "(", "batch", ")", "\n", "total_epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "total_epoch_acc", "+=", "acc", ".", "item", "(", ")", "\n", "\n", "", "", "return", "total_epoch_loss", "/", "len", "(", "val_iter", ")", ",", "total_epoch_acc", "/", "len", "(", "val_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.train.dev_point_wise": [[20, 54], ["utils.Dataset", "utils.Dataset.load_data", "model_transformer.Complex_order.Transformer", "sum", "print", "torch.cuda.is_available", "torch.cuda.is_available", "model_transformer.Complex_order.Transformer.train", "torch.Adam", "torch.nn.CrossEntropyLoss", "model_transformer.Complex_order.Transformer.add_optimizer", "model_transformer.Complex_order.Transformer.add_loss_op", "range", "acc_flod.append", "len", "model_transformer.Complex_order.Transformer.cuda", "model_transformer.Complex_order.Transformer.parameters", "print", "model_transformer.Complex_order.Transformer.run_epoch", "train_losses.append", "val_accuracies.append", "utils.evaluate_model", "utils.evaluate_model", "print", "print", "p.nelement", "torch.save", "torch.save", "model_transformer.Complex_order.Transformer.parameters"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.Dataset.load_data", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.train", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_order.Transformer.add_optimizer", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_order.Transformer.add_loss_op", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_order.Transformer.run_epoch", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.evaluate_model", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.evaluate_model"], ["from", "functools", "import", "wraps", "\n", "\n", "\n", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'3'", "\n", "now", "=", "int", "(", "time", ".", "time", "(", ")", ")", "\n", "timeArray", "=", "time", ".", "localtime", "(", "now", ")", "\n", "timeStamp", "=", "time", ".", "strftime", "(", "\"%Y%m%d%H%M%S\"", ",", "timeArray", ")", "\n", "timeDay", "=", "time", ".", "strftime", "(", "\"%Y%m%d\"", ",", "timeArray", ")", "\n", "print", "(", "timeStamp", ")", "\n", "FLAGS", "=", "config", ".", "flags", ".", "FLAGS", "\n", "FLAGS", ".", "_parse_flags", "(", ")", "\n", "log_dir", "=", "'wiki_log/'", "+", "timeDay", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "data_file", "=", "log_dir", "+", "'/dev_'", "+", "FLAGS", ".", "data", "+", "timeStamp", "\n", "para_file", "=", "log_dir", "+", "'/dev_'", "+", "FLAGS", ".", "data", "+", "timeStamp", "+", "'_para'", "\n", "precision", "=", "data_file", "+", "'precise'", "\n", "pickle", ".", "dump", "(", "FLAGS", ".", "__flags", ",", "open", "(", "para_file", ",", "'wb+'", ")", ")", "\n", "acc_flod", "=", "[", "]", "\n", "\n", "\n", "def", "log_time_delta", "(", "func", ")", ":", "\n", "    ", "@", "wraps", "(", "func", ")", "\n", "def", "_deco", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "ret", "=", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "delta", "=", "end", "-", "start", "\n", "print", "(", "\"%s runed %.2f seconds\"", "%", "(", "func", ".", "__name__", ",", "delta", ")", ")", "\n", "return", "ret", "\n", "", "return", "_deco", "\n", "\n", "\n", "", "def", "predict", "(", "sess", ",", "cnn", ",", "dev", ",", "alphabet", ",", "batch_size", ",", "q_len", ")", ":", "\n", "    ", "scores", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.__init__": [[104, 106], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "start_feature_id", "=", "1", ")", ":", "\n", "        ", "self", ".", "fid", "=", "start_feature_id", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.add": [[107, 114], ["helper.Alphabet.get"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "item", ")", ":", "\n", "        ", "idx", "=", "self", ".", "get", "(", "item", ",", "None", ")", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "idx", "=", "self", ".", "fid", "\n", "self", "[", "item", "]", "=", "idx", "\n", "self", ".", "fid", "+=", "1", "\n", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.dump": [[115, 119], ["open", "sorted", "helper.Alphabet.keys", "out.write"], "methods", ["None"], ["", "def", "dump", "(", "self", ",", "fname", ")", ":", "\n", "        ", "with", "open", "(", "fname", ",", "\"w\"", ")", "as", "out", ":", "\n", "            ", "for", "k", "in", "sorted", "(", "self", ".", "keys", "(", ")", ")", ":", "\n", "                ", "out", ".", "write", "(", "\"{}\\t{}\\n\"", ".", "format", "(", "k", ",", "self", "[", "k", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.clean_str_sst": [[37, 41], ["re.sub", "re.sub", "re.sub.strip().lower", "re.sub.strip"], "function", ["None"], ["def", "clean_str_sst", "(", "string", ")", ":", "\n", "    ", "string", "=", "re", ".", "sub", "(", "r\"[^A-Za-z0-9(),!?\\'\\`]\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\s{2,}\"", ",", "\" \"", ",", "string", ")", "\n", "return", "string", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "", "def", "clean_str", "(", "string", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.clean_str": [[41, 56], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.strip().lower", "re.sub.strip"], "function", ["None"], ["", "def", "clean_str", "(", "string", ")", ":", "\n", "    ", "string", "=", "re", ".", "sub", "(", "r\"[^A-Za-z0-9(),!?\\'\\`]\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'s\"", ",", "\" \\'s\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ve\"", ",", "\" \\'ve\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"n\\'t\"", ",", "\" n\\'t\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'re\"", ",", "\" \\'re\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'d\"", ",", "\" \\'d\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ll\"", ",", "\" \\'ll\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\",\"", ",", "\" , \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"!\"", ",", "\" ! \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\(\"", ",", "\" \\( \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\)\"", ",", "\" \\) \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\?\"", ",", "\" \\? \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\s{2,}\"", ",", "\" \"", ",", "string", ")", "\n", "return", "string", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "", "def", "process", "(", "dataset", "=", "dataset", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.process": [[56, 81], ["os.path.join", "os.path.join", "pandas.concat", "shuffle().reset_index", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "train[].to_csv", "dev[].to_csv", "print", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "datas.append", "open", "enumerate", "pandas.DataFrame", "shuffle", "int", "records.append", "len", "int", "numpy.array", "len", "clean_str().strip", "len", "helper.clean_str"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.clean_str"], ["", "def", "process", "(", "dataset", "=", "dataset", ")", ":", "\n", "    ", "data_dir", "=", "\"../data/\"", "+", "dataset", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"rt-polaritydata\"", ")", "\n", "saved_path", "=", "data_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "saved_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "saved_path", ")", "\n", "", "datas", "=", "[", "]", "\n", "for", "polarity", "in", "(", "\"neg\"", ",", "\"pos\"", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "root", ",", "polarity", ")", "\n", "records", "=", "[", "]", "\n", "with", "open", "(", "filename", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"replace\"", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "records", ".", "append", "(", "{", "\"text\"", ":", "clean_str", "(", "line", ")", ".", "strip", "(", ")", ",", "\"label\"", ":", "0", "if", "polarity", "==", "\"pos\"", "else", "1", "}", ")", "\n", "", "", "datas", ".", "append", "(", "pd", ".", "DataFrame", "(", "records", ")", ")", "\n", "", "df", "=", "pd", ".", "concat", "(", "datas", ")", "\n", "from", "sklearn", ".", "utils", "import", "shuffle", "\n", "df", "=", "shuffle", "(", "df", ")", ".", "reset_index", "(", ")", "\n", "split_index", "=", "[", "True", "]", "*", "int", "(", "len", "(", "df", ")", "*", "0.9", ")", "+", "[", "False", "]", "*", "(", "len", "(", "df", ")", "-", "int", "(", "len", "(", "df", ")", "*", "0.9", ")", ")", "\n", "train", "=", "df", "[", "split_index", "]", "\n", "dev", "=", "df", "[", "~", "np", ".", "array", "(", "split_index", ")", "]", "\n", "train_filename", "=", "os", ".", "path", ".", "join", "(", "saved_path", ",", "\"train.csv\"", ")", "\n", "test_filename", "=", "os", ".", "path", ".", "join", "(", "saved_path", ",", "\"dev.csv\"", ")", "\n", "train", "[", "[", "\"text\"", ",", "\"label\"", "]", "]", ".", "to_csv", "(", "train_filename", ",", "encoding", "=", "\"utf-8\"", ",", "sep", "=", "\"\\t\"", ",", "index", "=", "False", ",", "header", "=", "None", ")", "\n", "dev", "[", "[", "\"text\"", ",", "\"label\"", "]", "]", ".", "to_csv", "(", "test_filename", ",", "encoding", "=", "\"utf-8\"", ",", "sep", "=", "\"\\t\"", ",", "index", "=", "False", ",", "header", "=", "None", ")", "\n", "print", "(", "\"processing into formated files over\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.cut": [[83, 89], ["sentence.lower().split", "sentence.lower", "sentence.split"], "function", ["None"], ["", "def", "cut", "(", "sentence", ",", "isEnglish", "=", "isEnglish", ")", ":", "\n", "    ", "if", "isEnglish", ":", "\n", "        ", "tokens", "=", "sentence", ".", "lower", "(", ")", ".", "split", "(", ")", "\n", "", "else", ":", "\n", "        ", "tokens", "=", "[", "word", "for", "word", "in", "sentence", ".", "split", "(", ")", "if", "word", "not", "in", "stopwords", "]", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.log_time_delta": [[91, 101], ["functools.wraps", "time.time", "func", "time.time", "print"], "function", ["None"], ["", "def", "log_time_delta", "(", "func", ")", ":", "\n", "    ", "@", "wraps", "(", "func", ")", "\n", "def", "_deco", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "ret", "=", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "delta", "=", "end", "-", "start", "\n", "print", "(", "\"%s runed %.2f seconds\"", "%", "(", "func", ".", "__name__", ",", "delta", ")", ")", "\n", "return", "ret", "\n", "", "return", "_deco", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.prepare": [[121, 171], ["os.path.exists", "os.path.exists", "pickle.load", "helper.Alphabet", "helper.Alphabet.add", "helper.Alphabet.add", "print", "helper.Alphabet.dump", "open", "len", "os.path.exists", "os.path.exists", "pickle.load", "pickle.dump", "corpus[].unique", "tqdm.tqdm", "Alphabet.keys", "open", "helper.load_text_vec", "helper.getSubVectorsFromDict", "open", "helper.cut", "set", "gensim.models.keyedvectors.KeyedVectors.load_word2vec_format", "helper.getSubVectors", "helper.getSubVectors_complex_random", "gensim.models.keyedvectors.KeyedVectors.load_word2vec_format", "helper.getSubVectors", "print", "print", "helper.Alphabet.add"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.add", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.add", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.dump", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.dump", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load_text_vec", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectorsFromDict", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.cut", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectors", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectors_complex_random", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectors", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.Alphabet.add"], ["", "", "", "", "@", "log_time_delta", "\n", "def", "prepare", "(", "cropuses", ",", "max_sent_length", "=", "31", ",", "is_embedding_needed", "=", "False", ",", "dim", "=", "50", ",", "fresh", "=", "False", ")", ":", "\n", "    ", "vocab_file", "=", "'model/voc'", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "vocab_file", ")", "and", "not", "fresh", ":", "\n", "        ", "alphabet", "=", "pickle", ".", "load", "(", "open", "(", "vocab_file", ",", "'r'", ")", ")", "\n", "", "else", ":", "\n", "        ", "alphabet", "=", "Alphabet", "(", "start_feature_id", "=", "0", ")", "\n", "alphabet", ".", "add", "(", "'[UNKNOW]'", ")", "\n", "alphabet", ".", "add", "(", "'END'", ")", "\n", "count", "=", "0", "\n", "for", "corpus", "in", "cropuses", ":", "\n", "            ", "for", "texts", "in", "[", "corpus", "[", "\"question\"", "]", ".", "unique", "(", ")", "]", ":", "\n", "                ", "for", "sentence", "in", "tqdm", "(", "texts", ")", ":", "\n", "                    ", "count", "+=", "1", "\n", "if", "count", "%", "10000", "==", "0", ":", "\n", "                        ", "print", "(", "count", ")", "\n", "", "tokens", "=", "cut", "(", "sentence", ")", "\n", "for", "token", "in", "set", "(", "tokens", ")", ":", "\n", "                        ", "alphabet", ".", "add", "(", "token", ")", "\n", "", "", "", "", "print", "(", "len", "(", "alphabet", ".", "keys", "(", ")", ")", ")", "\n", "alphabet", ".", "dump", "(", "'alphabet_clean.txt'", ")", "\n", "", "if", "is_embedding_needed", ":", "\n", "        ", "sub_vec_file", "=", "'../embedding/sub_vector'", "\n", "if", "os", ".", "path", ".", "exists", "(", "sub_vec_file", ")", "and", "not", "fresh", ":", "\n", "            ", "sub_embeddings", "=", "pickle", ".", "load", "(", "open", "(", "sub_vec_file", ",", "'r'", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "isEnglish", ":", "\n", "                ", "if", "dim", "==", "50", ":", "\n", "                    ", "fname", "=", "\"../embedding/aquaint+wiki.txt.gz.ndim=50.bin\"", "\n", "embeddings_1", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "\n", "fname", ",", "binary", "=", "True", ")", "\n", "sub_embeddings", "=", "getSubVectors", "(", "embeddings_1", ",", "alphabet", ",", "dim", ")", "\n", "embedding_complex", "=", "getSubVectors_complex_random", "(", "\n", "alphabet", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "fname", "=", "\"../embedding/GoogleNews-vectors-negative300.bin\"", "\n", "embeddings_1", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "\n", "fname", ",", "binary", "=", "True", ")", "\n", "sub_embeddings", "=", "getSubVectors", "(", "embeddings_1", ",", "alphabet", ",", "dim", ")", "\n", "print", "(", "\"yes\"", ")", "\n", "", "", "else", ":", "\n", "                ", "fname", "=", "'model/wiki.ch.text.vector'", "\n", "embeddings", "=", "load_text_vec", "(", "alphabet", ",", "fname", ",", "embedding_size", "=", "dim", ")", "\n", "sub_embeddings", "=", "getSubVectorsFromDict", "(", "\n", "embeddings", ",", "alphabet", ",", "dim", ")", "\n", "", "pickle", ".", "dump", "(", "sub_embeddings", ",", "open", "(", "sub_vec_file", ",", "'wb'", ")", ")", "\n", "", "return", "alphabet", ",", "sub_embeddings", "\n", "", "else", ":", "\n", "        ", "return", "alphabet", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load_text_vec_complex": [[173, 184], ["pandas.read_csv", "numpy.load", "range", "len", "file2[].astype", "embedding_alphabet.append"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load"], ["", "", "def", "load_text_vec_complex", "(", "alphabet", ",", "filename", "=", "\"\"", ",", "datafile", "=", "''", ",", "embedding_size", "=", "100", ")", ":", "\n", "    ", "vectors", "=", "{", "}", "\n", "embedding_alphabet", "=", "[", "]", "\n", "file1", "=", "pd", ".", "read_csv", "(", "filename", ",", "sep", "=", "'\\t'", ",", "names", "=", "[", "\"word\"", ",", "\"id\"", "]", ")", "\n", "file2", "=", "np", ".", "load", "(", "datafile", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "file1", ")", ")", ":", "\n", "        ", "word", "=", "file1", "[", "'word'", "]", "[", "i", "]", "\n", "if", "word", "in", "alphabet", ":", "\n", "            ", "vectors", "[", "word", "]", "=", "file2", "[", "i", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "embedding_alphabet", ".", "append", "(", "word", ")", "\n", "", "", "return", "vectors", ",", "embedding_alphabet", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectors_complex": [[186, 196], ["embeddings.append", "embeddings.append", "numpy.random.uniform", "eval"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.eval"], ["", "def", "getSubVectors_complex", "(", "vectors", ",", "vocab", ",", "embedding_alphabet", ",", "dim", "=", "100", ")", ":", "\n", "\n", "    ", "temp_vec", "=", "0", "\n", "embeddings", "=", "[", "]", "\n", "for", "word", "in", "vocab", ":", "\n", "        ", "if", "word", "in", "embedding_alphabet", ":", "\n", "            ", "embeddings", ".", "append", "(", "vectors", "[", "eval", "(", "'word'", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "embeddings", ".", "append", "(", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "+", "0.25", ",", "100", ")", ")", "\n", "", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.get_lookup_table": [[198, 215], ["np.asarray.append", "range", "numpy.asarray", "len", "np.asarray.append"], "function", ["None"], ["", "def", "get_lookup_table", "(", "embedding_params", ")", ":", "\n", "    ", "id2word", "=", "embedding_params", "[", "'id2word'", "]", "\n", "word_vec", "=", "embedding_params", "[", "'word_vec'", "]", "\n", "lookup_table", "=", "[", "]", "\n", "\n", "# Index 0 corresponds to nothing", "\n", "lookup_table", ".", "append", "(", "[", "0", "]", "*", "embedding_params", "[", "'wvec_dim'", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "id2word", ")", ")", ":", "\n", "        ", "word", "=", "id2word", "[", "i", "]", "\n", "wvec", "=", "[", "0", "]", "*", "embedding_params", "[", "'wvec_dim'", "]", "\n", "if", "word", "in", "word_vec", ":", "\n", "            ", "wvec", "=", "word_vec", "[", "word", "]", "\n", "# print(wvec)", "\n", "", "lookup_table", ".", "append", "(", "wvec", ")", "\n", "\n", "", "lookup_table", "=", "np", ".", "asarray", "(", "lookup_table", ")", "\n", "return", "(", "lookup_table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectors": [[217, 227], ["numpy.zeros", "len", "vectors.word_vec", "numpy.random.uniform"], "function", ["None"], ["", "def", "getSubVectors", "(", "vectors", ",", "vocab", ",", "word_embe", ",", "dim", "=", "300", ")", ":", "\n", "    ", "embedding", "=", "np", ".", "zeros", "(", "(", "len", "(", "vocab", ")", ",", "dim", ")", ")", "\n", "temp_vec", "=", "0", "\n", "for", "word", "in", "vocab", ":", "\n", "        ", "if", "word", "in", "vectors", ".", "vocab", ":", "\n", "            ", "embedding", "[", "vocab", "[", "word", "]", "]", "=", "vectors", ".", "word_vec", "(", "word", ")", "\n", "", "else", ":", "\n", "            ", "embedding", "[", "vocab", "[", "word", "]", "\n", "]", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "+", "0.5", ",", "vectors", ".", "syn0", ".", "shape", "[", "1", "]", ")", "\n", "", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectors_complex_random": [[249, 254], ["numpy.zeros", "numpy.ones", "len"], "function", ["None"], ["", "", "", "def", "getSubVectors_complex_random", "(", "vocab", ",", "dim", "=", "1", ")", ":", "\n", "    ", "embedding", "=", "np", ".", "zeros", "(", "(", "len", "(", "vocab", ")", ",", "1", ")", ")", "\n", "for", "word", "in", "vocab", ":", "\n", "        ", "embedding", "[", "vocab", "[", "word", "]", "]", "=", "np", ".", "ones", "(", "1", ")", "\n", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectors_complex_uniform": [[256, 262], ["numpy.zeros", "range", "numpy.random.uniform"], "function", ["None"], ["", "def", "getSubVectors_complex_uniform", "(", "max_sentence", ",", "dim", "=", "50", ")", ":", "\n", "    ", "embedding", "=", "np", ".", "zeros", "(", "(", "max_sentence", ",", "dim", ")", ")", "\n", "for", "i", "in", "range", "(", "max_sentence", ")", ":", "\n", "        ", "embedding", "[", "i", "]", "=", "np", ".", "random", ".", "uniform", "(", "+", "(", "(", "2", "*", "math", ".", "pi", ")", "/", "30", ")", "\n", "*", "i", ",", "+", "(", "(", "2", "*", "math", ".", "pi", ")", "/", "30", ")", "*", "(", "i", "+", "1", ")", ",", "dim", ")", "\n", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load_text_vec": [[264, 284], ["print", "print", "print", "open", "len", "line.strip().split", "vectors.keys", "print", "len", "print", "line.strip"], "function", ["None"], ["", "def", "load_text_vec", "(", "alphabet", ",", "filename", "=", "\"\"", ",", "embedding_size", "=", "100", ")", ":", "\n", "    ", "vectors", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "i", "=", "0", "\n", "for", "line", "in", "f", ":", "\n", "            ", "i", "+=", "1", "\n", "if", "i", "%", "100000", "==", "0", ":", "\n", "                ", "print", "(", "'epch %d'", "%", "i", ")", "\n", "", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "items", ")", "==", "2", ":", "\n", "                ", "vocab_size", ",", "embedding_size", "=", "items", "[", "0", "]", ",", "items", "[", "1", "]", "\n", "print", "(", "vocab_size", ",", "embedding_size", ")", "\n", "", "else", ":", "\n", "                ", "word", "=", "items", "[", "0", "]", "\n", "if", "word", "in", "alphabet", ":", "\n", "                    ", "vectors", "[", "word", "]", "=", "items", "[", "1", ":", "]", "\n", "", "", "", "", "print", "(", "'embedding_size'", ",", "embedding_size", ")", "\n", "print", "(", "'done'", ")", "\n", "print", "(", "'words found in wor2vec embedding '", ",", "len", "(", "vectors", ".", "keys", "(", ")", ")", ")", "\n", "return", "vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.getSubVectorsFromDict": [[286, 301], ["open", "numpy.zeros", "open.close", "print", "len", "open.write", "numpy.random.uniform"], "function", ["None"], ["", "def", "getSubVectorsFromDict", "(", "vectors", ",", "vocab", ",", "dim", "=", "300", ")", ":", "\n", "    ", "file", "=", "open", "(", "'missword'", ",", "'w'", ")", "\n", "embedding", "=", "np", ".", "zeros", "(", "(", "len", "(", "vocab", ")", ",", "dim", ")", ")", "\n", "count", "=", "1", "\n", "for", "word", "in", "vocab", ":", "\n", "\n", "        ", "if", "word", "in", "vectors", ":", "\n", "            ", "count", "+=", "1", "\n", "embedding", "[", "vocab", "[", "word", "]", "]", "=", "vectors", "[", "word", "]", "\n", "", "else", ":", "\n", "            ", "file", ".", "write", "(", "word", "+", "'\\n'", ")", "\n", "embedding", "[", "vocab", "[", "word", "]", "]", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "+", "0.5", ",", "dim", ")", "\n", "", "", "file", ".", "close", "(", ")", "\n", "print", "(", "'word in embedding'", ",", "count", ")", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.position_index": [[303, 308], ["numpy.zeros", "len", "range", "helper.cut", "min", "min"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.cut"], ["", "def", "position_index", "(", "sentence", ",", "length", ")", ":", "\n", "    ", "index", "=", "np", ".", "zeros", "(", "length", ")", "\n", "raw_len", "=", "len", "(", "cut", "(", "sentence", ")", ")", "\n", "index", "[", ":", "min", "(", "raw_len", ",", "length", ")", "]", "=", "range", "(", "1", ",", "min", "(", "raw_len", "+", "1", ",", "length", "+", "1", ")", ")", "\n", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.encode_to_split": [[310, 318], ["helper.cut", "indices.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.cut"], ["", "def", "encode_to_split", "(", "sentence", ",", "alphabet", ",", "max_sentence", "=", "40", ")", ":", "\n", "    ", "indices", "=", "[", "]", "\n", "tokens", "=", "cut", "(", "sentence", ")", "\n", "for", "word", "in", "tokens", ":", "\n", "        ", "indices", ".", "append", "(", "alphabet", "[", "word", "]", ")", "\n", "", "while", "(", "len", "(", "indices", ")", "<", "max_sentence", ")", ":", "\n", "        ", "indices", "+=", "indices", "[", ":", "(", "max_sentence", "-", "len", "(", "indices", ")", ")", "]", "\n", "", "return", "indices", "[", ":", "max_sentence", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load": [[320, 337], ["helper.process", "tuple", "os.path.join", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "os.path.join", "pandas.read_csv().fillna", "datas.append", "pandas.read_csv", "pandas.read_csv"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.process"], ["", "def", "load", "(", "dataset", "=", "dataset", ")", ":", "\n", "    ", "process", "(", "dataset", ")", "\n", "data_dir", "=", "\"../data/\"", "+", "dataset", "\n", "datas", "=", "[", "]", "\n", "for", "data_name", "in", "[", "'train.csv'", ",", "'dev.csv'", "]", ":", "\n", "        ", "if", "data_name", "==", "'train.csv'", ":", "\n", "            ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'dev.csv'", ":", "\n", "            ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "\n", "", "", "return", "tuple", "(", "datas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load_trec_sst2": [[338, 377], ["tuple", "os.path.join", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "os.path.join", "pandas.read_csv().fillna", "datas.append", "os.path.join", "os.path.join", "pandas.read_csv().fillna", "datas.append", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv"], "function", ["None"], ["", "def", "load_trec_sst2", "(", "dataset", "=", "dataset", ")", ":", "\n", "    ", "data_dir", "=", "\"../data/\"", "+", "dataset", "\n", "datas", "=", "[", "]", "\n", "if", "dataset", "==", "'sst2'", ":", "\n", "        ", "for", "data_name", "in", "[", "'train.csv'", ",", "'dev.csv'", ",", "'test.csv'", "]", ":", "\n", "            ", "if", "data_name", "==", "'train.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'dev.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'test.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"question\"", ",", "\"flag\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "data_name", "in", "[", "'train.csv'", ",", "'dev.csv'", ",", "'test.csv'", "]", ":", "\n", "            ", "if", "data_name", "==", "'train.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"flag\"", ",", "\"question\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'dev.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"flag\"", ",", "\"question\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "", "if", "data_name", "==", "'test.csv'", ":", "\n", "                ", "data_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_name", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "data_file", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\n", "\"flag\"", ",", "\"question\"", "]", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "\"WASHINGTON\"", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "\n", "", "", "", "return", "tuple", "(", "datas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.batch_gen_with_single": [[379, 396], ["df.iterrows", "int", "range", "helper.encode_to_split", "helper.position_index", "pairs.append", "len", "range", "range", "len"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.encode_to_split", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.position_index"], ["", "@", "log_time_delta", "\n", "def", "batch_gen_with_single", "(", "df", ",", "alphabet", ",", "batch_size", "=", "10", ",", "q_len", "=", "33", ")", ":", "\n", "    ", "pairs", "=", "[", "]", "\n", "input_num", "=", "2", "\n", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "        ", "quetion", "=", "encode_to_split", "(", "\n", "row", "[", "\"question\"", "]", ",", "alphabet", ",", "max_sentence", "=", "q_len", ")", "\n", "q_position", "=", "position_index", "(", "row", "[", "'question'", "]", ",", "q_len", ")", "\n", "pairs", ".", "append", "(", "(", "quetion", ",", "q_position", ")", ")", "\n", "", "n_batches", "=", "int", "(", "len", "(", "pairs", ")", "*", "1.0", "/", "batch_size", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n_batches", ")", ":", "\n", "        ", "batch", "=", "pairs", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "\n", "yield", "[", "[", "pair", "[", "j", "]", "for", "pair", "in", "batch", "]", "for", "j", "in", "range", "(", "input_num", ")", "]", "\n", "", "batch", "=", "pairs", "[", "n_batches", "*", "batch_size", ":", "]", "+", "[", "pairs", "[", "n_batches", "*", "\n", "batch_size", "-", "1", "]", "]", "*", "(", "batch_size", "-", "len", "(", "pairs", ")", "+", "n_batches", "*", "batch_size", ")", "\n", "yield", "[", "[", "pair", "[", "i", "]", "for", "pair", "in", "batch", "]", "for", "i", "in", "range", "(", "input_num", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.batch_gen_with_point_wise": [[398, 416], ["df.iterrows", "int", "sklearn.utils.shuffle", "range", "helper.encode_to_split", "helper.position_index", "transform", "sklearn.utils.shuffle.append", "numpy.array", "len", "numpy.array", "range", "range", "len"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.encode_to_split", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.position_index"], ["", "def", "batch_gen_with_point_wise", "(", "df", ",", "alphabet", ",", "batch_size", "=", "10", ",", "q_len", "=", "33", ")", ":", "\n", "    ", "input_num", "=", "3", "\n", "pairs", "=", "[", "]", "\n", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "        ", "question", "=", "encode_to_split", "(", "\n", "row", "[", "\"question\"", "]", ",", "alphabet", ",", "max_sentence", "=", "q_len", ")", "\n", "q_position", "=", "position_index", "(", "row", "[", "'question'", "]", ",", "q_len", ")", "\n", "label", "=", "transform", "(", "row", "[", "\"flag\"", "]", ")", "\n", "pairs", ".", "append", "(", "(", "question", ",", "label", ",", "q_position", ")", ")", "\n", "", "n_batches", "=", "int", "(", "len", "(", "pairs", ")", "*", "1.0", "/", "batch_size", ")", "\n", "pairs", "=", "sklearn", ".", "utils", ".", "shuffle", "(", "pairs", ",", "random_state", "=", "121", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "n_batches", ")", ":", "\n", "        ", "batch", "=", "pairs", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "yield", "[", "np", ".", "array", "(", "[", "pair", "[", "i", "]", "for", "pair", "in", "batch", "]", ")", "for", "i", "in", "range", "(", "input_num", ")", "]", "\n", "", "batch", "=", "pairs", "[", "n_batches", "*", "batch_size", ":", "]", "+", "[", "pairs", "[", "n_batches", "*", "\n", "batch_size", "-", "1", "]", "]", "*", "(", "batch_size", "-", "len", "(", "pairs", ")", "+", "n_batches", "*", "batch_size", ")", "\n", "yield", "[", "np", ".", "array", "(", "[", "pair", "[", "i", "]", "for", "pair", "in", "batch", "]", ")", "for", "i", "in", "range", "(", "input_num", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load_dataset": [[430, 470], ["torchtext.data.Field", "torchtext.data.LabelField", "torchtext.datasets.IMDB.splits", "data.Field.build_vocab", "data.LabelField.build_vocab", "print", "print", "print", "train_data.split", "torchtext.data.BucketIterator.splits", "len", "x.split", "data.Field.vocab.vectors.size", "torchtext.vocab.GloVe", "str", "str", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.build_vocab", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.build_vocab"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.attention.MultiHeadedAttention.__init__": [[21, 31], ["torch.nn.Module.__init__", "train_utils.clones", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.train_utils.clones"], ["    ", "def", "__init__", "(", "self", ",", "h", ",", "d_model", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "\"Take in model size and number of heads.\"", "\n", "super", "(", "MultiHeadedAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "d_model", "%", "h", "==", "0", "\n", "# We assume d_v always equals d_k", "\n", "self", ".", "d_k", "=", "d_model", "//", "h", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "linears", "=", "clones", "(", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", ",", "4", ")", "\n", "self", ".", "attn", "=", "None", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.attention.MultiHeadedAttention.forward": [[32, 52], ["query.size", "attention.attention", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "mask.unsqueeze.unsqueeze.unsqueeze", "l().view().transpose", "zip", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "l().view", "x.transpose().contiguous().view.transpose().contiguous().view.transpose", "l"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.attention_complex.attention"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"Implements Multi-head attention\"", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# Same mask applied to all h heads.", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "nbatches", "=", "query", ".", "size", "(", "0", ")", "\n", "\n", "# 1) Do all the linear projections in batch from d_model => h x d_k ", "\n", "query", ",", "key", ",", "value", "=", "[", "l", "(", "x", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "l", ",", "x", "in", "zip", "(", "self", ".", "linears", ",", "(", "query", ",", "key", ",", "value", ")", ")", "]", "\n", "\n", "# 2) Apply attention on all the projected vectors in batch. ", "\n", "x", ",", "self", ".", "attn", "=", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "mask", ",", "\n", "dropout", "=", "self", ".", "dropout", ")", "\n", "\n", "# 3) \"Concat\" using a view and apply a final linear. ", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", "*", "self", ".", "d_k", ")", "\n", "return", "self", ".", "linears", "[", "-", "1", "]", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.attention.attention": [[9, 19], ["query.size", "torch.softmax", "torch.matmul", "torch.matmul", "math.sqrt", "scores.masked_fill.masked_fill", "dropout", "torch.matmul", "torch.matmul", "key.transpose"], "function", ["None"], ["def", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "dropout", "=", "None", ")", ":", "\n", "    ", "\"Implementation of Scaled dot product attention\"", "\n", "d_k", "=", "query", ".", "size", "(", "-", "1", ")", "\n", "scores", "=", "torch", ".", "matmul", "(", "query", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "", "p_attn", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "        ", "p_attn", "=", "dropout", "(", "p_attn", ")", "\n", "", "return", "torch", ".", "matmul", "(", "p_attn", ",", "value", ")", ",", "p_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.attention_complex.MultiHeadedAttention.__init__": [[29, 42], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "train_utils.clones"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.train_utils.clones"], ["    ", "def", "__init__", "(", "self", ",", "h", ",", "d_model", ",", "dropout", "=", "0.1", ",", "tgt_emb_prj_weight_sharing", "=", "True", ")", ":", "\n", "        ", "\"Take in model size and number of heads.\"", "\n", "super", "(", "MultiHeadedAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "d_model", "%", "h", "==", "0", "\n", "# We assume d_v always equals d_k", "\n", "self", ".", "d_k", "=", "d_model", "//", "h", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "real", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", "\n", "self", ".", "attn", "=", "None", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "self", ".", "linears_real", "=", "clones", "(", "self", ".", "real", ",", "4", ")", "\n", "self", ".", "linears_phase", "=", "self", ".", "linears_real", "\n", "# self.dropout = nn.Dropout(p=dropout)s", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.attention_complex.MultiHeadedAttention.forward": [[45, 73], ["query_real.size", "attention_complex.attention", "x_real.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "x_phase.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "mask.unsqueeze.unsqueeze.unsqueeze", "l().view().transpose", "l().view().transpose", "zip", "zip", "x_real.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "x_phase.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "l().view", "l().view", "x_real.transpose().contiguous().view.transpose().contiguous().view.transpose", "x_phase.transpose().contiguous().view.transpose().contiguous().view.transpose", "l", "l"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.attention_complex.attention"], ["", "def", "forward", "(", "self", ",", "query_real", ",", "key_real", ",", "value_real", ",", "query_phase", ",", "key_phase", ",", "value_phase", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"Implements Multi-head attention\"", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# Same mask applied to all h heads.", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "nbatches", "=", "query_real", ".", "size", "(", "0", ")", "\n", "\n", "# 1) Do all the linear projections in batch from d_model => h x d_k", "\n", "\n", "query_real", ",", "key_real", ",", "value_real", "=", "[", "l", "(", "x", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "l", ",", "x", "in", "zip", "(", "self", ".", "linears_real", ",", "(", "query_real", ",", "key_real", ",", "value_real", ")", ")", "]", "\n", "\n", "query_phase", ",", "key_phase", ",", "value_phase", "=", "[", "l", "(", "x", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "l", ",", "x", "in", "zip", "(", "self", ".", "linears_phase", ",", "(", "query_phase", ",", "key_phase", ",", "value_phase", ")", ")", "]", "\n", "\n", "\n", "# 2) Apply attention on all the projected vectors in batch. ", "\n", "x_real", ",", "x_phase", ",", "self", ".", "attn", "=", "attention", "(", "query_real", ",", "key_real", ",", "value_real", ",", "query_phase", ",", "key_phase", ",", "value_phase", ",", "mask", "=", "mask", ",", "\n", "dropout", "=", "self", ".", "dropout", ")", "\n", "\n", "# 3) \"Concat\" using a view and apply a final linear. ", "\n", "x_real", "=", "x_real", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", "*", "self", ".", "d_k", ")", "\n", "x_phase", "=", "x_phase", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", "*", "self", ".", "d_k", ")", "\n", "\n", "\n", "return", "self", ".", "linears_real", "[", "-", "1", "]", "(", "x_real", ")", ",", "self", ".", "linears_phase", "[", "-", "1", "]", "(", "x_phase", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.attention_complex.attention": [[9, 27], ["query_real.size", "torch.sqrt", "torch.sqrt", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "scores.masked_fill.masked_fill", "dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "key_real.transpose", "key_phase.transpose", "key_phase.transpose", "key_real.transpose"], "function", ["None"], ["def", "attention", "(", "query_real", ",", "key_real", ",", "value_real", ",", "query_phase", ",", "key_phase", ",", "value_phase", ",", "mask", "=", "None", ",", "dropout", "=", "None", ")", ":", "\n", "    ", "\"Implementation of Scaled dot product attention\"", "\n", "\n", "\n", "d_k", "=", "query_real", ".", "size", "(", "-", "1", ")", "\n", "scores_real", "=", "torch", ".", "matmul", "(", "query_real", ",", "key_real", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "-", "torch", ".", "matmul", "(", "query_phase", ",", "key_phase", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "scores_phase", "=", "torch", ".", "matmul", "(", "query_real", ",", "key_phase", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "+", "torch", ".", "matmul", "(", "query_phase", ",", "key_real", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "scores", "=", "scores_real", "*", "scores_real", "+", "scores_phase", "*", "scores_phase", "\n", "scores", "=", "torch", ".", "sqrt", "(", "scores", ")", "\n", "scores", "=", "scores", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "", "p_attn", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "        ", "p_attn", "=", "dropout", "(", "p_attn", ")", "\n", "", "return", "torch", ".", "matmul", "(", "p_attn", ",", "value_real", ")", ",", "torch", ".", "matmul", "(", "p_attn", ",", "value_phase", ")", ",", "p_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.train_utils.Embeddings.__init__": [[24, 28], ["torch.nn.Module.__init__", "torch.nn.Embedding"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "vocab", ")", ":", "\n", "        ", "super", "(", "Embeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lut", "=", "nn", ".", "Embedding", "(", "vocab", ",", "d_model", ")", "\n", "self", ".", "d_model", "=", "d_model", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.train_utils.Embeddings.forward": [[29, 31], ["train_utils.Embeddings.lut", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lut", "(", "x", ")", "*", "math", ".", "sqrt", "(", "self", ".", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.train_utils.PositionalEncoding.__init__": [[34, 47], ["torch.nn.Module.__init__", "torch.nn.Dropout", "torch.zeros", "torch.arange().unsqueeze", "torch.exp", "torch.sin", "torch.cos", "pe.unsqueeze.unsqueeze.unsqueeze", "train_utils.PositionalEncoding.register_buffer", "torch.as_tensor", "torch.as_tensor", "torch.arange", "torch.arange().float", "torch.arange().unsqueeze.numpy", "torch.exp.unsqueeze().numpy", "torch.arange().unsqueeze.numpy", "torch.exp.unsqueeze().numpy", "torch.arange", "math.log", "torch.exp.unsqueeze", "torch.exp.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "dropout", ",", "max_len", "=", "10000", ")", ":", "\n", "        ", "super", "(", "PositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "# Compute the positional encodings once in log space.", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "float", "(", ")", "*", "\n", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "torch", ".", "as_tensor", "(", "position", ".", "numpy", "(", ")", "*", "div_term", ".", "unsqueeze", "(", "0", ")", ".", "numpy", "(", ")", ")", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "torch", ".", "as_tensor", "(", "position", ".", "numpy", "(", ")", "*", "div_term", ".", "unsqueeze", "(", "0", ")", ".", "numpy", "(", ")", ")", ")", "#torch.cos(position * div_term)", "\n", "pe", "=", "pe", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "# self.pe = nn.Embedding(max_len, d_model)", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.train_utils.PositionalEncoding.forward": [[49, 56], ["train_utils.PositionalEncoding.dropout", "torch.autograd.Variable", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# print(x.size())", "\n", "# print(x.size(1))", "\n", "# print(self.pe[:, :x.size(1)].size())", "\n", "# exit()", "\n", "        ", "x", "=", "x", "+", "Variable", "(", "self", ".", "pe", "[", ":", ",", ":", "x", ".", "size", "(", "1", ")", "]", ",", "requires_grad", "=", "True", ")", "\n", "return", "self", ".", "dropout", "(", "x", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.train_utils.clones": [[13, 16], ["torch.nn.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["def", "clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "\"Produce N identical layers.\"", "\n", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "_", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.feed_forward_complex.PositionwiseFeedForward.__init__": [[8, 13], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_ff", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "PositionwiseFeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_ff", ")", "\n", "self", ".", "w_2", "=", "nn", ".", "Linear", "(", "d_ff", ",", "d_model", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.feed_forward_complex.PositionwiseFeedForward.forward": [[14, 17], ["feed_forward_complex.PositionwiseFeedForward.w_2", "feed_forward_complex.PositionwiseFeedForward.dropout", "torch.relu", "feed_forward_complex.PositionwiseFeedForward.w_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"Implements FFN equation.\"", "\n", "return", "self", ".", "w_2", "(", "self", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "w_1", "(", "x", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.dynamic_rnn.DynamicLSTM.__init__": [[7, 44], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.GRU", "torch.GRU", "torch.RNN", "torch.RNN"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "num_layers", "=", "1", ",", "bias", "=", "True", ",", "batch_first", "=", "True", ",", "dropout", "=", "0", ",", "\n", "bidirectional", "=", "False", ",", "only_use_last_hidden_state", "=", "False", ",", "rnn_type", "=", "'LSTM'", ")", ":", "\n", "        ", "\"\"\"\n        LSTM which can hold variable length sequence, use like TensorFlow's RNN(input, length...).\n\n        :param input_size:The number of expected features in the input x\n        :param hidden_size:The number of features in the hidden state h\n        :param num_layers:Number of recurrent layers.\n        :param bias:If False, then the layer does not use bias weights b_ih and b_hh. Default: True\n        :param batch_first:If True, then the input and output tensors are provided as (batch, seq, feature)\n        :param dropout:If non-zero, introduces a dropout layer on the outputs of each RNN layer except the last layer\n        :param bidirectional:If True, becomes a bidirectional RNN. Default: False\n        :param rnn_type: {LSTM, GRU, RNN}\n        \"\"\"", "\n", "super", "(", "DynamicLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "self", ".", "only_use_last_hidden_state", "=", "only_use_last_hidden_state", "\n", "self", ".", "rnn_type", "=", "rnn_type", "\n", "\n", "if", "self", ".", "rnn_type", "==", "'LSTM'", ":", "\n", "            ", "self", ".", "RNN", "=", "nn", ".", "LSTM", "(", "\n", "input_size", "=", "input_size", ",", "hidden_size", "=", "hidden_size", ",", "num_layers", "=", "num_layers", ",", "\n", "bias", "=", "bias", ",", "batch_first", "=", "batch_first", ",", "dropout", "=", "dropout", ",", "bidirectional", "=", "bidirectional", ")", "\n", "", "elif", "self", ".", "rnn_type", "==", "'GRU'", ":", "\n", "            ", "self", ".", "RNN", "=", "nn", ".", "GRU", "(", "\n", "input_size", "=", "input_size", ",", "hidden_size", "=", "hidden_size", ",", "num_layers", "=", "num_layers", ",", "\n", "bias", "=", "bias", ",", "batch_first", "=", "batch_first", ",", "dropout", "=", "dropout", ",", "bidirectional", "=", "bidirectional", ")", "\n", "", "elif", "self", ".", "rnn_type", "==", "'RNN'", ":", "\n", "            ", "self", ".", "RNN", "=", "nn", ".", "RNN", "(", "\n", "input_size", "=", "input_size", ",", "hidden_size", "=", "hidden_size", ",", "num_layers", "=", "num_layers", ",", "\n", "bias", "=", "bias", ",", "batch_first", "=", "batch_first", ",", "dropout", "=", "dropout", ",", "bidirectional", "=", "bidirectional", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.dynamic_rnn.DynamicLSTM.forward": [[45, 92], ["torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort().long", "torch.argsort().long", "torch.argsort().long", "torch.argsort().long", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort.long", "torch.argsort.long", "dynamic_rnn.DynamicLSTM.RNN", "dynamic_rnn.DynamicLSTM.RNN", "dynamic_rnn.DynamicLSTM.RNN", "dynamic_rnn.DynamicLSTM.RNN", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "x_len", ",", "h0", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        sequence -> sort -> pad and pack ->process using RNN -> unpack ->unsort\n\n        :param x: sequence embedding vectors\n        :param x_len: numpy/tensor list\n        :return:\n        \"\"\"", "\n", "\"\"\"sort\"\"\"", "\n", "x_sort_idx", "=", "torch", ".", "argsort", "(", "-", "x_len", ")", "\n", "x_unsort_idx", "=", "torch", ".", "argsort", "(", "x_sort_idx", ")", ".", "long", "(", ")", "\n", "x_len", "=", "x_len", "[", "x_sort_idx", "]", "\n", "x", "=", "x", "[", "x_sort_idx", ".", "long", "(", ")", "]", "\n", "\"\"\"pack\"\"\"", "\n", "x_emb_p", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "x", ",", "x_len", ",", "batch_first", "=", "self", ".", "batch_first", ")", "\n", "\n", "# process using the selected RNN", "\n", "if", "self", ".", "rnn_type", "==", "'LSTM'", ":", "\n", "            ", "if", "h0", "is", "None", ":", "\n", "                ", "out_pack", ",", "(", "ht", ",", "ct", ")", "=", "self", ".", "RNN", "(", "x_emb_p", ",", "None", ")", "\n", "", "else", ":", "\n", "                ", "out_pack", ",", "(", "ht", ",", "ct", ")", "=", "self", ".", "RNN", "(", "x_emb_p", ",", "(", "h0", ",", "h0", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "h0", "is", "None", ":", "\n", "                ", "out_pack", ",", "ht", "=", "self", ".", "RNN", "(", "x_emb_p", ",", "None", ")", "\n", "", "else", ":", "\n", "                ", "out_pack", ",", "ht", "=", "self", ".", "RNN", "(", "x_emb_p", ",", "h0", ")", "\n", "", "ct", "=", "None", "\n", "", "\"\"\"unsort: h\"\"\"", "\n", "ht", "=", "torch", ".", "transpose", "(", "ht", ",", "0", ",", "1", ")", "[", "\n", "x_unsort_idx", "]", "# (num_layers * num_directions, batch, hidden_size) -> (batch, ...)", "\n", "ht", "=", "torch", ".", "transpose", "(", "ht", ",", "0", ",", "1", ")", "\n", "\n", "if", "self", ".", "only_use_last_hidden_state", ":", "\n", "            ", "return", "ht", "\n", "", "else", ":", "\n", "            ", "\"\"\"unpack: out\"\"\"", "\n", "out", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "out_pack", ",", "batch_first", "=", "self", ".", "batch_first", ")", "# (sequence, lengths)", "\n", "out", "=", "out", "[", "0", "]", "#", "\n", "out", "=", "out", "[", "x_unsort_idx", "]", "\n", "\"\"\"unsort: out c\"\"\"", "\n", "if", "self", ".", "rnn_type", "==", "'LSTM'", ":", "\n", "                ", "ct", "=", "torch", ".", "transpose", "(", "ct", ",", "0", ",", "1", ")", "[", "\n", "x_unsort_idx", "]", "# (num_layers * num_directions, batch, hidden_size) -> (batch, ...)", "\n", "ct", "=", "torch", ".", "transpose", "(", "ct", ",", "0", ",", "1", ")", "\n", "\n", "", "return", "out", ",", "(", "ht", ",", "ct", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.sublayer.LayerNorm.__init__": [[8, 13], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.ones", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["def", "__init__", "(", "self", ",", "features", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "a_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "features", ")", ")", "\n", "self", ".", "b_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "features", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.sublayer.LayerNorm.forward": [[14, 18], ["x.mean", "x.std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "std", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "self", ".", "a_2", "*", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "eps", ")", "+", "self", ".", "b_2", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.sublayer.SublayerOutput.__init__": [[23, 27], ["torch.nn.Module.__init__", "sublayer.LayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["def", "__init__", "(", "self", ",", "size", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "SublayerOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.sublayer.SublayerOutput.forward": [[28, 31], ["sublayer.SublayerOutput.dropout", "sublayer", "sublayer.SublayerOutput.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "sublayer", ")", ":", "\n", "        ", "\"Apply residual connection to any sublayer with the same size.\"", "\n", "return", "x", "+", "self", ".", "dropout", "(", "sublayer", "(", "self", ".", "norm", "(", "x", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.Dataset.__init__": [[14, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "train_iterator", "=", "None", "\n", "self", ".", "test_iterator", "=", "None", "\n", "self", ".", "val_iterator", "=", "None", "\n", "self", ".", "vocab", "=", "[", "]", "\n", "self", ".", "word_embeddings", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.Dataset.parse_label": [[22, 25], ["int", "label.strip"], "methods", ["None"], ["", "def", "parse_label", "(", "self", ",", "label", ")", ":", "\n", "\n", "        ", "return", "int", "(", "label", ".", "strip", "(", ")", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.Dataset.get_pandas_df": [[26, 30], ["pandas.read_csv().fillna", "pandas.read_csv().fillna", "pandas.read_csv", "pandas.read_csv"], "methods", ["None"], ["", "def", "get_pandas_df", "(", "self", ",", "filename", ")", ":", "\n", "\n", "        ", "full_df", "=", "pd", ".", "read_csv", "(", "filename", ",", "header", "=", "None", ",", "sep", "=", "\"\\t\"", ",", "names", "=", "[", "\"text\"", ",", "\"label\"", "]", ",", "encoding", "=", "'gbk'", ",", "quoting", "=", "3", ")", ".", "fillna", "(", "'N'", ")", "\n", "return", "full_df", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.Dataset.load_data": [[31, 84], ["spacy.load", "torchtext.data.Field", "torchtext.data.Field", "utils.Dataset.get_pandas_df", "torchtext.data.Dataset", "utils.Dataset.get_pandas_df", "torchtext.data.Dataset", "torchtext.data.Field.build_vocab", "torchtext.data.BucketIterator", "torchtext.data.BucketIterator", "print", "print", "print", "utils.process", "torchtext.data.Example.fromlist", "torchtext.data.Example.fromlist", "utils.Dataset.get_pandas_df", "torchtext.data.Dataset", "torchtext.data.BucketIterator", "print", "utils.Dataset.values.tolist", "utils.Dataset.values.tolist", "torchtext.data.Example.fromlist", "len", "len", "spacy.load.tokenizer", "len", "len", "utils.Dataset.values.tolist", "len"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.Dataset.get_pandas_df", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.Dataset.get_pandas_df", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.build_vocab", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.process", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.Dataset.get_pandas_df"], ["", "def", "load_data", "(", "self", ",", "train_file", ",", "dataset", ",", "val_file", "=", "None", ")", ":", "\n", "\n", "        ", "if", "dataset", "==", "'sst2_transformer'", "or", "dataset", "==", "'TREC_transformer'", ":", "\n", "            ", "print", "(", "'no n fold cross validation'", ")", "\n", "", "else", ":", "\n", "            ", "process", "(", "train_file", ")", "\n", "\n", "", "NLP", "=", "spacy", ".", "load", "(", "'en'", ")", "\n", "tokenizer", "=", "lambda", "sent", ":", "[", "x", ".", "text", "for", "x", "in", "NLP", ".", "tokenizer", "(", "sent", ")", "if", "x", ".", "text", "!=", "\" \"", "]", "\n", "TEXT", "=", "data", ".", "Field", "(", "sequential", "=", "True", ",", "tokenize", "=", "tokenizer", ",", "lower", "=", "True", ",", "fix_length", "=", "self", ".", "config", ".", "max_sen_len", ")", "\n", "LABEL", "=", "data", ".", "Field", "(", "sequential", "=", "False", ",", "use_vocab", "=", "False", ")", "\n", "datafields", "=", "[", "(", "\"text\"", ",", "TEXT", ")", ",", "(", "\"label\"", ",", "LABEL", ")", "]", "\n", "\n", "train_df", "=", "self", ".", "get_pandas_df", "(", "train_file", "+", "'/train.csv'", ")", "\n", "train_examples", "=", "[", "data", ".", "Example", ".", "fromlist", "(", "i", ",", "datafields", ")", "for", "i", "in", "train_df", ".", "values", ".", "tolist", "(", ")", "]", "\n", "train_data", "=", "data", ".", "Dataset", "(", "train_examples", ",", "datafields", ")", "\n", "\n", "val_df", "=", "self", ".", "get_pandas_df", "(", "train_file", "+", "'/dev.csv'", ")", "\n", "val_examples", "=", "[", "data", ".", "Example", ".", "fromlist", "(", "i", ",", "datafields", ")", "for", "i", "in", "val_df", ".", "values", ".", "tolist", "(", ")", "]", "\n", "val_data", "=", "data", ".", "Dataset", "(", "val_examples", ",", "datafields", ")", "\n", "\n", "\n", "TEXT", ".", "build_vocab", "(", "train_data", ")", "\n", "self", ".", "vocab", "=", "TEXT", ".", "vocab", "\n", "\n", "self", ".", "train_iterator", "=", "data", ".", "BucketIterator", "(", "\n", "(", "train_data", ")", ",", "\n", "batch_size", "=", "self", ".", "config", ".", "batch_size", ",", "\n", "sort_key", "=", "lambda", "x", ":", "len", "(", "x", ".", "text", ")", ",", "\n", "repeat", "=", "False", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "self", ".", "val_iterator", "=", "data", ".", "BucketIterator", "(", "\n", "val_data", ",", "\n", "batch_size", "=", "self", ".", "config", ".", "batch_size", ",", "\n", "sort_key", "=", "lambda", "x", ":", "len", "(", "x", ".", "text", ")", ",", "\n", "repeat", "=", "False", ",", "\n", "shuffle", "=", "False", ")", "\n", "if", "dataset", "==", "'sst2_transformer'", "or", "dataset", "==", "'TREC_transformer'", ":", "\n", "            ", "test_df", "=", "self", ".", "get_pandas_df", "(", "train_file", "+", "'/test.csv'", ")", "\n", "test_examples", "=", "[", "data", ".", "Example", ".", "fromlist", "(", "i", ",", "datafields", ")", "for", "i", "in", "test_df", ".", "values", ".", "tolist", "(", ")", "]", "\n", "test_data", "=", "data", ".", "Dataset", "(", "test_examples", ",", "datafields", ")", "\n", "self", ".", "test_iterator", "=", "data", ".", "BucketIterator", "(", "\n", "test_data", ",", "\n", "batch_size", "=", "self", ".", "config", ".", "batch_size", ",", "\n", "sort_key", "=", "lambda", "x", ":", "len", "(", "x", ".", "text", ")", ",", "\n", "repeat", "=", "False", ",", "\n", "shuffle", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'no test'", ")", "\n", "\n", "", "print", "(", "\"Loaded {} training examples\"", ".", "format", "(", "len", "(", "train_data", ")", ")", ")", "\n", "print", "(", "\"Loaded {} val examples\"", ".", "format", "(", "len", "(", "val_data", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.clean_str_sst": [[85, 89], ["re.sub", "re.sub", "re.sub.strip().lower", "re.sub.strip"], "function", ["None"], ["", "", "def", "clean_str_sst", "(", "string", ")", ":", "\n", "    ", "string", "=", "re", ".", "sub", "(", "r\"[^A-Za-z0-9(),!?\\'\\`]\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\s{2,}\"", ",", "\" \"", ",", "string", ")", "\n", "return", "string", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "", "def", "clean_str", "(", "string", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.clean_str": [[89, 104], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.strip().lower", "re.sub.strip"], "function", ["None"], ["", "def", "clean_str", "(", "string", ")", ":", "\n", "    ", "string", "=", "re", ".", "sub", "(", "r\"[^A-Za-z0-9(),!?\\'\\`]\"", ",", "\" \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'s\"", ",", "\" \\'s\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ve\"", ",", "\" \\'ve\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"n\\'t\"", ",", "\" n\\'t\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'re\"", ",", "\" \\'re\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'d\"", ",", "\" \\'d\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\'ll\"", ",", "\" \\'ll\"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\",\"", ",", "\" , \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"!\"", ",", "\" ! \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\(\"", ",", "\" \\( \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\)\"", ",", "\" \\) \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\?\"", ",", "\" \\? \"", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r\"\\s{2,}\"", ",", "\" \"", ",", "string", ")", "\n", "return", "string", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "", "def", "process", "(", "dataset", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.process": [[104, 129], ["os.path.join", "pandas.concat", "shuffle().reset_index", "os.path.join", "os.path.join", "train[].to_csv", "dev[].to_csv", "print", "os.path.exists", "os.makedirs", "os.path.join", "datas.append", "open", "enumerate", "pandas.DataFrame", "shuffle", "int", "records.append", "len", "int", "numpy.array", "len", "clean_str().strip", "len", "utils.clean_str"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.clean_str"], ["", "def", "process", "(", "dataset", ")", ":", "\n", "    ", "data_dir", "=", "\"../data/\"", "+", "dataset", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"rt-polaritydata\"", ")", "\n", "saved_path", "=", "data_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "saved_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "saved_path", ")", "\n", "", "datas", "=", "[", "]", "\n", "for", "polarity", "in", "(", "\"neg\"", ",", "\"pos\"", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "root", ",", "polarity", ")", "\n", "records", "=", "[", "]", "\n", "with", "open", "(", "filename", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"replace\"", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "records", ".", "append", "(", "{", "\"text\"", ":", "clean_str", "(", "line", ")", ".", "strip", "(", ")", ",", "\"label\"", ":", "1", "if", "polarity", "==", "\"pos\"", "else", "2", "}", ")", "\n", "", "", "datas", ".", "append", "(", "pd", ".", "DataFrame", "(", "records", ")", ")", "\n", "", "df", "=", "pd", ".", "concat", "(", "datas", ")", "\n", "from", "sklearn", ".", "utils", "import", "shuffle", "\n", "df", "=", "shuffle", "(", "df", ")", ".", "reset_index", "(", ")", "\n", "split_index", "=", "[", "True", "]", "*", "int", "(", "len", "(", "df", ")", "*", "0.9", ")", "+", "[", "False", "]", "*", "(", "len", "(", "df", ")", "-", "int", "(", "len", "(", "df", ")", "*", "0.9", ")", ")", "\n", "train", "=", "df", "[", "split_index", "]", "\n", "dev", "=", "df", "[", "~", "np", ".", "array", "(", "split_index", ")", "]", "\n", "train_filename", "=", "os", ".", "path", ".", "join", "(", "saved_path", ",", "\"train.csv\"", ")", "\n", "test_filename", "=", "os", ".", "path", ".", "join", "(", "saved_path", ",", "\"dev.csv\"", ")", "\n", "train", "[", "[", "\"text\"", ",", "\"label\"", "]", "]", ".", "to_csv", "(", "train_filename", ",", "encoding", "=", "\"utf-8\"", ",", "sep", "=", "\"\\t\"", ",", "index", "=", "False", ",", "header", "=", "None", ")", "\n", "dev", "[", "[", "\"text\"", ",", "\"label\"", "]", "]", ".", "to_csv", "(", "test_filename", ",", "encoding", "=", "\"utf-8\"", ",", "sep", "=", "\"\\t\"", ",", "index", "=", "False", ",", "header", "=", "None", ")", "\n", "print", "(", "\"processing into formated files over\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.utils.evaluate_model": [[130, 144], ["enumerate", "sklearn.metrics.accuracy_score", "torch.cuda.is_available", "model", "all_preds.extend", "all_y.extend", "numpy.array().flatten", "batch.text.cuda", "predicted.numpy", "batch.label.numpy", "torch.max", "numpy.array", "model.cpu"], "function", ["None"], ["", "def", "evaluate_model", "(", "model", ",", "iterator", ")", ":", "\n", "    ", "all_preds", "=", "[", "]", "\n", "all_y", "=", "[", "]", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "iterator", ")", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "x", "=", "batch", ".", "text", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "batch", ".", "text", "\n", "", "y_pred", "=", "model", "(", "x", ")", "\n", "predicted", "=", "torch", ".", "max", "(", "y_pred", ".", "cpu", "(", ")", ".", "data", ",", "1", ")", "[", "1", "]", "+", "1", "\n", "all_preds", ".", "extend", "(", "predicted", ".", "numpy", "(", ")", ")", "\n", "all_y", ".", "extend", "(", "batch", ".", "label", ".", "numpy", "(", ")", ")", "\n", "", "score", "=", "accuracy_score", "(", "all_y", ",", "np", ".", "array", "(", "all_preds", ")", ".", "flatten", "(", ")", ")", "\n", "return", "score", "\n", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.feed_forward.PositionwiseFeedForward.__init__": [[8, 13], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_ff", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "PositionwiseFeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_ff", ")", "\n", "self", ".", "w_2", "=", "nn", ".", "Linear", "(", "d_ff", ",", "d_model", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.feed_forward.PositionwiseFeedForward.forward": [[14, 17], ["feed_forward.PositionwiseFeedForward.w_2", "feed_forward.PositionwiseFeedForward.dropout", "torch.relu", "feed_forward.PositionwiseFeedForward.w_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"Implements FFN equation.\"", "\n", "return", "self", ".", "w_2", "(", "self", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "w_1", "(", "x", ")", ")", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.TPE_reduce.PositionalEncoding.__init__": [[18, 29], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "pe.unsqueeze.unsqueeze.unsqueeze", "TPE_reduce.PositionalEncoding.register_buffer", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().unsqueeze.numpy", "torch.arange().unsqueeze.numpy", "torch.exp.unsqueeze().numpy", "torch.exp.unsqueeze().numpy", "torch.arange().unsqueeze.numpy", "torch.arange().unsqueeze.numpy", "torch.exp.unsqueeze().numpy", "torch.exp.unsqueeze().numpy", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log", "torch.exp.unsqueeze", "torch.exp.unsqueeze", "torch.exp.unsqueeze", "torch.exp.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["\n", "        ", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "hidden_num", "=", "hidden_num", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "para", "=", "[", "]", "\n", "self", ".", "max_input_left", "=", "max_input_left", "\n", "self", ".", "extend_feature_dim", "=", "extend_feature_dim", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.TPE_reduce.PositionalEncoding.forward": [[30, 33], ["TPE_reduce.PositionalEncoding.dropout", "torch.autograd.Variable", "torch.autograd.Variable", "x.size"], "methods", ["None"], ["self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n", "self", ".", "rng", "=", "23455", "\n", "", "def", "create_placeholder", "(", "self", ")", ":", "\n", "        ", "self", ".", "question", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'input_question'", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.TPE_reduce.Transformer.__init__": [[35, 55], ["torch.Module.__init__", "attention.MultiHeadedAttention", "feed_forward.PositionwiseFeedForward", "TPE_reduce.PositionalEncoding", "encoder.Encoder", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "encoder.EncoderLayer", "train_utils.Embeddings", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "6", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "", "def", "Position_Embedding", "(", "self", ",", "position_size", ")", ":", "\n", "        ", "batch_size", "=", "self", ".", "batch_size", "\n", "seq_len", "=", "500", "\n", "position_j", "=", "1.", "/", "tf", ".", "pow", "(", "10000.", ",", "2", "*", "tf", ".", "range", "(", "position_size", "/", "2", ",", "dtype", "=", "tf", ".", "float32", ")", "/", "position_size", ")", "\n", "position_j", "=", "tf", ".", "expand_dims", "(", "position_j", ",", "0", ")", "\n", "position_i", "=", "tf", ".", "range", "(", "tf", ".", "cast", "(", "seq_len", ",", "tf", ".", "float32", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "position_i", "=", "tf", ".", "expand_dims", "(", "position_i", ",", "1", ")", "\n", "position_ij", "=", "tf", ".", "matmul", "(", "position_i", ",", "position_j", ")", "\n", "position_embedding", "=", "tf", ".", "concat", "(", "[", "math", ".", "pi", "*", "tf", ".", "cos", "(", "position_ij", ")", ",", "math", ".", "pi", "*", "tf", ".", "sin", "(", "position_ij", ")", "]", ",", "1", ")", "\n", "\n", "return", "position_embedding", "\n", "", "def", "add_embeddings", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "embeddings", ")", ",", "name", "=", "\"W\"", ",", "dtype", "=", "\"float32\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "W_pos", "=", "tf", ".", "Variable", "(", "self", ".", "Position_Embedding", "(", "self", ".", "embedding_size", ")", ",", "name", "=", "'W'", ",", "trainable", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.TPE_reduce.Transformer.forward": [[56, 63], ["TPE_reduce.Transformer.src_embed", "TPE_reduce.Transformer.encoder", "TPE_reduce.Transformer.fc", "TPE_reduce.Transformer.softmax", "x.permute"], "methods", ["None"], ["", "else", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "self", ".", "embedding_W", "=", "W", "\n", "self", ".", "embedding_W_pos", "=", "W_pos", "\n", "", "self", ".", "embedded_chars_q", ",", "self", ".", "embedded_chars_q_pos", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n", "self", ".", "embedded_chars_q", "=", "tf", ".", "reduce_sum", "(", "[", "self", ".", "embedded_chars_q", ",", "self", ".", "embedded_chars_q_pos", "]", ",", "0", ")", "\n", "\n", "", "def", "feed_neural_work", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.TPE_reduce.Transformer.add_optimizer": [[64, 66], ["None"], "methods", ["None"], ["        ", "print", "(", "self", ".", "embedded_chars_q", ")", "\n", "fw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "\n", "num_units", "=", "self", ".", "hidden_num", ",", "state_is_tuple", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.TPE_reduce.Transformer.add_loss_op": [[67, 69], ["None"], "methods", ["None"], ["outputs", ",", "last_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", "=", "fw_cell", ",", "inputs", "=", "self", ".", "embedded_chars_q", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.TPE_reduce.Transformer.reduce_lr": [[70, 74], ["print"], "methods", ["None"], ["last", "=", "outputs", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "print", "(", "last", ")", "\n", "fc", "=", "tf", ".", "layers", ".", "dense", "(", "last", ",", "self", ".", "hidden_num", "/", "2", ",", "name", "=", "\"1\"", ")", "\n", "fc", "=", "tf", ".", "nn", ".", "relu", "(", "fc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.TPE_reduce.Transformer.run_epoch": [[75, 99], ["enumerate", "TPE_reduce.Transformer.reduce_lr", "TPE_reduce.Transformer.optimizer.zero_grad", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "TPE_reduce.Transformer.__call__", "TPE_reduce.Transformer.loss_op", "TPE_reduce.Transformer.backward", "losses.append", "TPE_reduce.Transformer.optimizer.step", "TPE_reduce.Transformer.train", "int", "int", "batch.text.cuda", "TPE_reduce.Transformer.data.cpu().numpy", "TPE_reduce.Transformer.data.cpu"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_order.Transformer.reduce_lr", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.train"], ["with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "6", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "fc", ",", "W", ",", "b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "#0.754", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "l2_loss", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "\n", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n", "        ", "embedded_chars_q", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W", ",", "words_indice", ")", "\n", "embedding_chars_q_pos", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W_pos", ",", "position_indice", ")", "\n", "return", "embedded_chars_q", ",", "embedding_chars_q_pos", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.PE_reduce.PositionalEncoding.__init__": [[17, 23], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "pe.unsqueeze.unsqueeze.unsqueeze", "PE_reduce.PositionalEncoding.register_buffer"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["self", ",", "max_input_left", ",", "embeddings", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "dataset", ",", "hidden_num", ",", "l2_reg_lambda", "=", "0.0", ",", "is_Embedding_Needed", "=", "False", ",", "trainable", "=", "True", ",", "extend_feature_dim", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "batch_size", "=", "batch_size", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.PE_reduce.PositionalEncoding.forward": [[24, 28], ["PE_reduce.PositionalEncoding.dropout", "torch.autograd.Variable", "torch.autograd.Variable", "x.size"], "methods", ["None"], ["self", ".", "dataset", "=", "dataset", "\n", "self", ".", "hidden_num", "=", "hidden_num", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "para", "=", "[", "]", "\n", "self", ".", "max_input_left", "=", "max_input_left", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.PE_reduce.Transformer.__init__": [[30, 50], ["torch.Module.__init__", "attention.MultiHeadedAttention", "feed_forward.PositionwiseFeedForward", "PE_reduce.PositionalEncoding", "encoder.Encoder", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "encoder.EncoderLayer", "train_utils.Embeddings", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n", "self", ".", "rng", "=", "23455", "\n", "", "def", "create_placeholder", "(", "self", ")", ":", "\n", "        ", "self", ".", "question", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'input_question'", ")", "\n", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "6", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "", "def", "add_embeddings", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "embeddings", ")", ",", "name", "=", "\"W\"", ",", "dtype", "=", "\"float32\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "W_pos", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "500", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "self", ".", "embedding_W", "=", "W", "\n", "self", ".", "embedding_W_pos", "=", "W_pos", "\n", "", "self", ".", "embedded_chars_q", ",", "self", ".", "embedded_chars_q_pos", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n", "self", ".", "embedded_chars_q", "=", "tf", ".", "reduce_sum", "(", "[", "self", ".", "embedded_chars_q", ",", "self", ".", "embedded_chars_q_pos", "]", ",", "0", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.PE_reduce.Transformer.forward": [[51, 58], ["PE_reduce.Transformer.src_embed", "PE_reduce.Transformer.encoder", "PE_reduce.Transformer.fc", "PE_reduce.Transformer.softmax", "x.permute"], "methods", ["None"], ["\n", "", "def", "feed_neural_work", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ".", "embedded_chars_q", ")", "\n", "fw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "\n", "num_units", "=", "self", ".", "hidden_num", ",", "state_is_tuple", "=", "True", ")", "\n", "outputs", ",", "last_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", "=", "fw_cell", ",", "inputs", "=", "self", ".", "embedded_chars_q", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.PE_reduce.Transformer.add_optimizer": [[59, 61], ["None"], "methods", ["None"], ["last", "=", "outputs", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "print", "(", "last", ")", "\n", "fc", "=", "tf", ".", "layers", ".", "dense", "(", "last", ",", "self", ".", "hidden_num", "/", "2", ",", "name", "=", "\"1\"", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.PE_reduce.Transformer.add_loss_op": [[62, 64], ["None"], "methods", ["None"], ["fc", "=", "tf", ".", "nn", ".", "relu", "(", "fc", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.PE_reduce.Transformer.reduce_lr": [[65, 69], ["print"], "methods", ["None"], ["            ", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "6", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.PE_reduce.Transformer.run_epoch": [[70, 94], ["enumerate", "PE_reduce.Transformer.reduce_lr", "PE_reduce.Transformer.optimizer.zero_grad", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "PE_reduce.Transformer.__call__", "PE_reduce.Transformer.loss_op", "PE_reduce.Transformer.backward", "losses.append", "PE_reduce.Transformer.optimizer.step", "PE_reduce.Transformer.train", "int", "int", "batch.text.cuda", "PE_reduce.Transformer.data.cpu().numpy", "PE_reduce.Transformer.data.cpu"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_order.Transformer.reduce_lr", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.train"], ["b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "fc", ",", "W", ",", "b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "#0.754", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "l2_loss", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "\n", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n", "        ", "embedded_chars_q", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W", ",", "words_indice", ")", "\n", "embedding_chars_q_pos", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W_pos", ",", "position_indice", ")", "\n", "return", "embedded_chars_q", ",", "embedding_chars_q_pos", "\n", "", "def", "build_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_placeholder", "(", ")", "\n", "self", ".", "add_embeddings", "(", ")", "\n", "self", ".", "feed_neural_work", "(", ")", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "cnn", "=", "Fasttext", "(", "max_input_left", "=", "33", ",", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_vanilla.Transformer.__init__": [[16, 37], ["torch.Module.__init__", "attention_complex.MultiHeadedAttention", "feed_forward_complex.PositionwiseFeedForward", "encoder_complex.EncoderLayer", "encoder_complex.Encoder", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["\n", "class", "LSTM", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "max_input_left", ",", "embeddings", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "dataset", ",", "hidden_num", ",", "l2_reg_lambda", "=", "0.0", ",", "is_Embedding_Needed", "=", "False", ",", "trainable", "=", "True", ",", "extend_feature_dim", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "hidden_num", "=", "hidden_num", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "para", "=", "[", "]", "\n", "self", ".", "max_input_left", "=", "max_input_left", "\n", "self", ".", "extend_feature_dim", "=", "extend_feature_dim", "\n", "self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n", "self", ".", "rng", "=", "23455", "\n", "", "def", "create_placeholder", "(", "self", ")", ":", "\n", "        ", "self", ".", "question", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'input_question'", ")", "\n", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "6", "]", ",", "name", "=", "\"input_y\"", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_vanilla.Transformer.forward": [[38, 67], ["Complex_vanilla.Transformer.src_word_emb", "Complex_vanilla.Transformer.position_enc", "Complex_vanilla.Transformer.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "Complex_vanilla.Transformer.drop", "Complex_vanilla.Transformer.drop", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "Complex_vanilla.Transformer.encoder_layer", "Complex_vanilla.Transformer.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Complex_vanilla.Transformer.fc", "Complex_vanilla.Transformer.softmax", "x.permute", "x.permute"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul"], ["", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "", "def", "add_embeddings", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "embeddings", ")", ",", "name", "=", "\"W\"", ",", "dtype", "=", "\"float32\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "W_pos", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "0", ",", "2", "*", "math", ".", "pi", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "self", ".", "embedding_W", "=", "W", "\n", "self", ".", "embedding_W_pos", "=", "W_pos", "\n", "", "self", ".", "embedded_chars_q", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n", "        ", "embedded_chars_q", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W", ",", "words_indice", ")", "\n", "embedding_chars_q_phase", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W_pos", ",", "words_indice", ")", "\n", "[", "embedded_chars_q", ",", "embedding_chars_q_phase", "]", "=", "ComplexMultiply", "(", ")", "(", "[", "embedding_chars_q_phase", ",", "embedded_chars_q", "]", ")", "\n", "embedded_chars_q", "=", "tf", ".", "concat", "(", "[", "embedded_chars_q", ",", "embedding_chars_q_phase", "]", ",", "1", ")", "\n", "return", "embedded_chars_q", "\n", "\n", "", "def", "feed_neural_work", "(", "self", ")", ":", "\n", "        ", "self", ".", "cell", "=", "URNNCell", "(", "num_units", "=", "self", ".", "max_input_left", ",", "num_in", "=", "self", ".", "embedding_size", ")", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "outputs", ",", "final_state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "self", ".", "cell", ",", "self", ".", "embedded_chars_q", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "dropout", "(", "outputs", ",", "self", ".", "dropout_keep_prob", ",", "name", "=", "\"hidden_output_drop\"", ")", "\n", "last", "=", "outputs", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "fc", "=", "tf", ".", "layers", ".", "dense", "(", "last", ",", "self", ".", "hidden_num", "/", "2", ",", "name", "=", "\"1\"", ")", "\n", "fc", "=", "tf", ".", "nn", ".", "relu", "(", "fc", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_vanilla.Transformer.add_optimizer": [[68, 70], ["None"], "methods", ["None"], ["            ", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "6", "]", ")", ",", "name", "=", "\"b\"", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_vanilla.Transformer.add_loss_op": [[71, 73], ["None"], "methods", ["None"], ["", "else", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_vanilla.Transformer.reduce_lr": [[74, 78], ["print"], "methods", ["None"], ["", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "fc", ",", "W", ",", "b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_vanilla.Transformer.run_epoch": [[79, 104], ["enumerate", "Complex_vanilla.Transformer.reduce_lr", "Complex_vanilla.Transformer.optimizer.zero_grad", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "Complex_vanilla.Transformer.__call__", "Complex_vanilla.Transformer.loss_op", "Complex_vanilla.Transformer.backward", "losses.append", "Complex_vanilla.Transformer.optimizer.step", "Complex_vanilla.Transformer.train", "int", "int", "batch.text.cuda", "Complex_vanilla.Transformer.data.cpu().numpy", "Complex_vanilla.Transformer.data.cpu"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_order.Transformer.reduce_lr", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.train"], ["", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "#0.754", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "l2_loss", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "\n", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "\n", "", "", "def", "build_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_placeholder", "(", ")", "\n", "self", ".", "add_embeddings", "(", ")", "\n", "self", ".", "feed_neural_work", "(", ")", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "cnn", "=", "Fasttext", "(", "max_input_left", "=", "33", ",", "\n", "max_input_right", "=", "40", ",", "\n", "vocab_size", "=", "5000", ",", "\n", "embedding_size", "=", "50", ",", "\n", "batch_size", "=", "3", ",", "\n", "embeddings", "=", "None", ",", "\n", "embeddings_complex", "=", "None", ",", "\n", "dropout_keep_prob", "=", "1", ",", "\n", "filter_sizes", "=", "[", "40", "]", ",", "\n", "num_filters", "=", "65", ",", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.transformer_wo.Transformer.__init__": [[15, 34], ["torch.Module.__init__", "attention.MultiHeadedAttention", "feed_forward.PositionwiseFeedForward", "encoder.Encoder", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "encoder.EncoderLayer", "train_utils.Embeddings", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "src_vocab", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "h", ",", "N", ",", "dropout", "=", "self", ".", "config", ".", "h", ",", "self", ".", "config", ".", "N", ",", "self", ".", "config", ".", "dropout", "\n", "d_model", ",", "d_ff", "=", "self", ".", "config", ".", "d_model", ",", "self", ".", "config", ".", "d_ff", "\n", "\n", "attn", "=", "MultiHeadedAttention", "(", "h", ",", "d_model", ")", "\n", "ff", "=", "PositionwiseFeedForward", "(", "d_model", ",", "d_ff", ",", "dropout", ")", "\n", "\n", "self", ".", "encoder", "=", "Encoder", "(", "EncoderLayer", "(", "config", ".", "d_model", ",", "deepcopy", "(", "attn", ")", ",", "deepcopy", "(", "ff", ")", ",", "dropout", ")", ",", "N", ")", "\n", "self", ".", "src_embed", "=", "nn", ".", "Sequential", "(", "Embeddings", "(", "config", ".", "d_model", ",", "src_vocab", ")", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "config", ".", "d_model", ",", "\n", "self", ".", "config", ".", "output_size", "\n", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.transformer_wo.Transformer.forward": [[35, 42], ["transformer_wo.Transformer.src_embed", "transformer_wo.Transformer.encoder", "transformer_wo.Transformer.fc", "transformer_wo.Transformer.softmax", "x.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "embedded_sents", "=", "self", ".", "src_embed", "(", "x", ".", "permute", "(", "1", ",", "0", ")", ")", "\n", "encoded_sents", "=", "self", ".", "encoder", "(", "embedded_sents", ")", "\n", "\n", "final_feature_map", "=", "encoded_sents", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "final_out", "=", "self", ".", "fc", "(", "final_feature_map", ")", "\n", "return", "self", ".", "softmax", "(", "final_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.transformer_wo.Transformer.add_optimizer": [[43, 45], ["None"], "methods", ["None"], ["", "def", "add_optimizer", "(", "self", ",", "optimizer", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.transformer_wo.Transformer.add_loss_op": [[46, 48], ["None"], "methods", ["None"], ["", "def", "add_loss_op", "(", "self", ",", "loss_op", ")", ":", "\n", "        ", "self", ".", "loss_op", "=", "loss_op", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.transformer_wo.Transformer.reduce_lr": [[49, 53], ["print"], "methods", ["None"], ["", "def", "reduce_lr", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Reducing LR\"", ")", "\n", "for", "g", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "g", "[", "'lr'", "]", "=", "g", "[", "'lr'", "]", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.transformer_wo.Transformer.run_epoch": [[54, 78], ["enumerate", "transformer_wo.Transformer.reduce_lr", "transformer_wo.Transformer.optimizer.zero_grad", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "transformer_wo.Transformer.__call__", "transformer_wo.Transformer.loss_op", "transformer_wo.Transformer.backward", "losses.append", "transformer_wo.Transformer.optimizer.step", "transformer_wo.Transformer.train", "int", "int", "batch.text.cuda", "transformer_wo.Transformer.data.cpu().numpy", "transformer_wo.Transformer.data.cpu"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_order.Transformer.reduce_lr", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.train"], ["", "", "def", "run_epoch", "(", "self", ",", "train_iterator", ",", "val_iterator", ",", "epoch", ")", ":", "\n", "        ", "train_losses", "=", "[", "]", "\n", "val_accuracies", "=", "[", "]", "\n", "losses", "=", "[", "]", "\n", "\n", "if", "(", "epoch", "==", "int", "(", "self", ".", "config", ".", "max_epochs", "/", "3", ")", ")", "or", "(", "epoch", "==", "int", "(", "2", "*", "self", ".", "config", ".", "max_epochs", "/", "3", ")", ")", ":", "\n", "            ", "self", ".", "reduce_lr", "(", ")", "\n", "\n", "", "for", "i", ",", "batch", "in", "enumerate", "(", "train_iterator", ")", ":", "\n", "            ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "x", "=", "batch", ".", "text", ".", "cuda", "(", ")", "\n", "y", "=", "(", "batch", ".", "label", "-", "1", ")", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "batch", ".", "text", "\n", "y", "=", "(", "batch", ".", "label", "-", "1", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "", "y_pred", "=", "self", ".", "__call__", "(", "x", ")", "\n", "loss", "=", "self", ".", "loss_op", "(", "y_pred", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "losses", ".", "append", "(", "loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "train", "(", ")", "\n", "\n", "", "return", "train_losses", ",", "val_accuracies", "", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_order.Transformer.__init__": [[32, 55], ["torch.Module.__init__", "attention_complex.MultiHeadedAttention", "feed_forward_complex.PositionwiseFeedForward", "encoder_complex.EncoderLayer", "encoder_complex.Encoder", "torch.Embedding", "torch.Embedding", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "copy.deepcopy", "copy.deepcopy", "Complex_order.get_sinusoid_encoding_table"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.get_sinusoid_encoding_table"], ["self", ".", "is_Embedding_Needed", "=", "is_Embedding_Needed", "\n", "self", ".", "rng", "=", "23455", "\n", "", "def", "create_placeholder", "(", "self", ")", ":", "\n", "        ", "self", ".", "question", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'input_question'", ")", "\n", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "6", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "self", ".", "batch_size", ",", "2", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "", "self", ".", "q_position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "self", ".", "batch_size", ",", "self", ".", "max_input_left", "]", ",", "name", "=", "'q_position'", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "", "def", "Position_Embedding", "(", "self", ",", "position_size", ")", ":", "\n", "        ", "batch_size", "=", "self", ".", "batch_size", "\n", "seq_len", "=", "self", ".", "vocab_size", "\n", "position_j", "=", "1.", "/", "tf", ".", "pow", "(", "10000.", ",", "2", "*", "tf", ".", "range", "(", "position_size", ",", "dtype", "=", "tf", ".", "float32", ")", "/", "position_size", ")", "\n", "position_j", "=", "tf", ".", "expand_dims", "(", "position_j", ",", "0", ")", "\n", "\n", "position_i", "=", "tf", ".", "range", "(", "tf", ".", "cast", "(", "seq_len", ",", "tf", ".", "float32", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "position_i", "=", "tf", ".", "expand_dims", "(", "position_i", ",", "1", ")", "\n", "position_ij", "=", "tf", ".", "matmul", "(", "position_i", ",", "position_j", ")", "\n", "position_embedding", "=", "position_ij", "\n", "\n", "return", "position_embedding", "\n", "", "def", "add_embeddings", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_order.Transformer.forward": [[56, 85], ["Complex_order.Transformer.src_word_emb", "Complex_order.Transformer.position_enc", "Complex_order.Transformer.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "Complex_order.Transformer.drop", "Complex_order.Transformer.drop", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "Complex_order.Transformer.encoder_layer", "Complex_order.Transformer.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Complex_order.Transformer.fc", "Complex_order.Transformer.softmax", "x.permute", "x.permute"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul"], ["            ", "if", "self", ".", "is_Embedding_Needed", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "np", ".", "array", "(", "self", ".", "embeddings", ")", ",", "name", "=", "\"W\"", ",", "dtype", "=", "\"float32\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "W_pos", "=", "tf", ".", "Variable", "(", "self", ".", "Position_Embedding", "(", "self", ".", "embedding_size", ")", ",", "name", "=", "'W'", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "Variable", "(", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", "]", ",", "-", "1.0", ",", "1.0", ")", ",", "name", "=", "\"W\"", ",", "trainable", "=", "self", ".", "trainable", ")", "\n", "", "self", ".", "embedding_W", "=", "W", "\n", "self", ".", "embedding_W_pos", "=", "W_pos", "\n", "", "self", ".", "embedded_chars_q", "=", "self", ".", "concat_embedding", "(", "self", ".", "question", ",", "self", ".", "q_position", ")", "\n", "", "def", "feed_neural_work", "(", "self", ")", ":", "\n", "        ", "self", ".", "cell", "=", "URNNCell", "(", "num_units", "=", "self", ".", "max_input_left", ",", "num_in", "=", "self", ".", "embedding_size", ")", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "\n", "outputs", ",", "final_state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "self", ".", "cell", ",", "self", ".", "embedded_chars_q", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "dropout", "(", "outputs", ",", "self", ".", "dropout_keep_prob", ",", "name", "=", "\"hidden_output_drop\"", ")", "\n", "last", "=", "outputs", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "fc", "=", "tf", ".", "layers", ".", "dense", "(", "last", ",", "self", ".", "hidden_num", "/", "2", ",", "name", "=", "\"1\"", ")", "\n", "fc", "=", "tf", ".", "nn", ".", "relu", "(", "fc", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"output\"", ")", ":", "\n", "            ", "if", "self", ".", "dataset", "==", "'TREC'", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "6", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "6", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "else", ":", "\n", "                ", "W", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "shape", "=", "[", "self", ".", "hidden_num", "/", "2", ",", "2", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", "\n", "l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "fc", ",", "W", ",", "b", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_order.Transformer.add_optimizer": [[86, 88], ["None"], "methods", ["None"], ["            ", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "scores", ",", "labels", "=", "self", ".", "input_y", ")", "#0.754", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "l2_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_order.Transformer.add_loss_op": [[89, 91], ["None"], "methods", ["None"], ["", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_predictions", "=", "tf", ".", "equal", "(", "self", ".", "predictions", ",", "tf", ".", "argmax", "(", "self", ".", "input_y", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_order.Transformer.reduce_lr": [[92, 96], ["print"], "methods", ["None"], ["tf", ".", "cast", "(", "correct_predictions", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "def", "concat_embedding", "(", "self", ",", "words_indice", ",", "position_indice", ")", ":", "\n", "        ", "embedded_chars_q", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W", ",", "words_indice", ")", "\n", "embedding_chars_q_phase", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding_W_pos", ",", "words_indice", ")", "\n", "pos", "=", "tf", ".", "expand_dims", "(", "position_indice", ",", "2", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_order.Transformer.run_epoch": [[97, 123], ["enumerate", "Complex_order.Transformer.reduce_lr", "Complex_order.Transformer.optimizer.zero_grad", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "Complex_order.Transformer.__call__", "Complex_order.Transformer.loss_op", "Complex_order.Transformer.backward", "losses.append", "Complex_order.Transformer.optimizer.step", "Complex_order.Transformer.train", "int", "int", "batch.text.cuda", "Complex_order.Transformer.data.cpu().numpy", "Complex_order.Transformer.data.cpu"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_order.Transformer.reduce_lr", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.train"], ["pos", "=", "tf", ".", "cast", "(", "pos", ",", "tf", ".", "float32", ")", "\n", "embedding_chars_q_phase", "=", "tf", ".", "multiply", "(", "pos", ",", "embedding_chars_q_phase", ")", "\n", "[", "embedded_chars_q", ",", "embedding_chars_q_phase", "]", "=", "ComplexMultiply", "(", ")", "(", "[", "embedding_chars_q_phase", ",", "embedded_chars_q", "]", ")", "\n", "embedded_chars_q", "=", "tf", ".", "concat", "(", "[", "embedded_chars_q", ",", "embedding_chars_q_phase", "]", ",", "1", ")", "\n", "return", "embedded_chars_q", "\n", "\n", "", "def", "build_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_placeholder", "(", ")", "\n", "self", ".", "add_embeddings", "(", ")", "\n", "self", ".", "feed_neural_work", "(", ")", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "cnn", "=", "Fasttext", "(", "max_input_left", "=", "33", ",", "\n", "max_input_right", "=", "40", ",", "\n", "vocab_size", "=", "5000", ",", "\n", "embedding_size", "=", "50", ",", "\n", "batch_size", "=", "3", ",", "\n", "embeddings", "=", "None", ",", "\n", "embeddings_complex", "=", "None", ",", "\n", "dropout_keep_prob", "=", "1", ",", "\n", "filter_sizes", "=", "[", "40", "]", ",", "\n", "num_filters", "=", "65", ",", "\n", "l2_reg_lambda", "=", "0.0", ",", "\n", "is_Embedding_Needed", "=", "False", ",", "\n", "trainable", "=", "True", ",", "\n", "overlap_needed", "=", "False", ",", "\n", "pooling", "=", "'max'", ",", "\n", "position_needed", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.model_transformer.Complex_order.get_sinusoid_encoding_table": [[15, 30], ["numpy.array", "torch.FloatTensor", "torch.FloatTensor", "numpy.power", "Complex_order.get_sinusoid_encoding_table.cal_angle"], "function", ["None"], ["import", "math", "\n", "\n", "class", "LSTM", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "max_input_left", ",", "embeddings", ",", "vocab_size", ",", "embedding_size", ",", "batch_size", ",", "dataset", ",", "hidden_num", ",", "l2_reg_lambda", "=", "0.0", ",", "is_Embedding_Needed", "=", "False", ",", "trainable", "=", "True", ",", "extend_feature_dim", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "embeddings", "=", "embeddings", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "hidden_num", "=", "hidden_num", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "para", "=", "[", "]", "\n", "self", ".", "max_input_left", "=", "max_input_left", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.translate.main": [[9, 85], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.load", "preprocess.read_instances_from_file", "preprocess.convert_instance_to_idx_seq", "DataLoader.DataLoader", "transformer.Translator.Translator", "transformer.Translator.Translator.model.eval", "print", "read_instances_from_file_ctx", "preprocess.convert_instance_to_idx_seq", "open", "tqdm.tqdm", "print", "transformer.Translator.Translator.translate_batch", "print", "print", "f.write", "int"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.preprocess.read_instances_from_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.preprocess.convert_instance_to_idx_seq", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.eval", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.preprocess.convert_instance_to_idx_seq", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Translator.Translator.translate_batch"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'translate.py'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-model'", ",", "default", "=", "'trained.chkpt'", ",", "\n", "help", "=", "'Path to model .pt file'", ")", "\n", "parser", ".", "add_argument", "(", "'-src'", ",", "default", "=", "'data/multi30k/test.en.atok'", ",", "\n", "help", "=", "'Source sequence to decode (one line per sequence)'", ")", "\n", "parser", ".", "add_argument", "(", "'-ctx'", ",", "required", "=", "False", ",", "default", "=", "\"\"", ",", "\n", "help", "=", "'Context sequence to decode (one line per sequence)'", ")", "\n", "parser", ".", "add_argument", "(", "'-vocab'", ",", "default", "=", "'data/multi30k.atok.low.pt'", ",", "\n", "help", "=", "'Data that contains the source vocabulary'", ")", "\n", "parser", ".", "add_argument", "(", "'-output'", ",", "default", "=", "'pred.txt'", ",", "\n", "help", "=", "\"\"\"Path to output the predictions (each line will\n                        be the decoded sequence\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'-beam_size'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'Beam size'", ")", "\n", "parser", ".", "add_argument", "(", "'-batch_size'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "\n", "help", "=", "'Batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'-n_best'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"\"\"If verbose is set, will output the n_best\n                        decoded sentences\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "'-no_cuda'", ",", "action", "=", "'store_false'", ")", "\n", "parser", ".", "add_argument", "(", "'-max_token_seq_len'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "opt", ".", "cuda", "=", "not", "opt", ".", "no_cuda", "\n", "\n", "# Prepare DataLoader", "\n", "preprocess_data", "=", "torch", ".", "load", "(", "opt", ".", "vocab", ")", "\n", "preprocess_settings", "=", "preprocess_data", "[", "'settings'", "]", "\n", "\n", "test_src_word_insts", "=", "read_instances_from_file", "(", "\n", "opt", ".", "src", ",", "\n", "opt", ".", "max_token_seq_len", ",", "\n", "preprocess_settings", ".", "keep_case", ")", "\n", "test_src_insts", "=", "convert_instance_to_idx_seq", "(", "\n", "test_src_word_insts", ",", "preprocess_data", "[", "'dict'", "]", "[", "'src'", "]", ")", "\n", "\n", "if", "opt", ".", "ctx", ":", "\n", "        ", "from", "preprocess_ctx", "import", "read_instances_from_file", "as", "read_instances_from_file_ctx", "\n", "test_ctx_word_insts", "=", "read_instances_from_file_ctx", "(", "\n", "opt", ".", "ctx", ",", "\n", "opt", ".", "max_token_seq_len", ",", "\n", "preprocess_settings", ".", "keep_case", ",", "\n", "is_ctx", "=", "True", ")", "\n", "test_ctx_insts", "=", "convert_instance_to_idx_seq", "(", "\n", "test_ctx_word_insts", ",", "preprocess_data", "[", "'dict'", "]", "[", "'src'", "]", ")", "\n", "\n", "", "test_data", "=", "DataLoader", "(", "\n", "preprocess_data", "[", "'dict'", "]", "[", "'src'", "]", ",", "\n", "preprocess_data", "[", "'dict'", "]", "[", "'tgt'", "]", ",", "\n", "src_insts", "=", "test_src_insts", ",", "\n", "ctx_insts", "=", "(", "test_ctx_insts", "if", "opt", ".", "ctx", "else", "None", ")", ",", "\n", "cuda", "=", "opt", ".", "cuda", ",", "\n", "shuffle", "=", "False", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "\n", "is_train", "=", "False", ")", "\n", "\n", "translator", "=", "Translator", "(", "opt", ")", "\n", "translator", ".", "model", ".", "eval", "(", ")", "\n", "\n", "with", "open", "(", "opt", ".", "output", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "batch", "in", "tqdm", "(", "test_data", ",", "mininterval", "=", "2", ",", "desc", "=", "'  - (Test)'", ",", "leave", "=", "False", ")", ":", "\n", "            ", "print", "(", "-", "-", "-", "-", "-", "-", "-", "-", "-", "1111111111", ")", "\n", "all_hyp", ",", "all_scores", "=", "translator", ".", "translate_batch", "(", "*", "batch", ")", "\n", "print", "(", "-", "-", "-", "-", "-", "-", "-", "-", "-", "2222222222", ")", "\n", "for", "idx_seqs", "in", "all_hyp", ":", "\n", "                ", "for", "idx_seq", "in", "idx_seqs", ":", "\n", "                    ", "if", "idx_seq", "[", "-", "1", "]", "==", "3", ":", "# if last word is EOS", "\n", "                        ", "idx_seq", "=", "idx_seq", "[", ":", "-", "1", "]", "\n", "", "pred_line", "=", "' '", ".", "join", "(", "[", "test_data", ".", "tgt_idx2word", "[", "int", "(", "idx", ")", "]", "for", "idx", "in", "idx_seq", "]", ")", "\n", "f", ".", "write", "(", "pred_line", "+", "'\\n'", ")", "\n", "", "", "print", "(", "\"end\"", ")", "\n", "\n", "", "", "print", "(", "'[Info] Finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.train.cal_performance": [[15, 26], ["train.cal_loss", "gold.contiguous().view.contiguous().view", "gold.contiguous().view.ne", "pred.eq", "n_correct.masked_select().sum().item.masked_select().sum().item", "pred.max", "gold.contiguous().view.contiguous", "n_correct.masked_select().sum().item.masked_select().sum", "n_correct.masked_select().sum().item.masked_select"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.train.cal_loss"], ["from", "model_LSTM", ".", "Complex_order", "import", "LSTM", "\n", "import", "random", "\n", "from", "sklearn", ".", "metrics", "import", "accuracy_score", "\n", "import", "pickle", "\n", "import", "config", "\n", "from", "functools", "import", "wraps", "\n", "\n", "\n", "os", ".", "environ", "[", "'TF_CPP_MIN_LOG_LEVEL'", "]", "=", "'3'", "\n", "now", "=", "int", "(", "time", ".", "time", "(", ")", ")", "\n", "timeArray", "=", "time", ".", "localtime", "(", "now", ")", "\n", "timeStamp", "=", "time", ".", "strftime", "(", "\"%Y%m%d%H%M%S\"", ",", "timeArray", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.train.cal_loss": [[28, 47], ["gold.contiguous().view.contiguous().view", "pred.size", "torch.zeros_like().scatter", "torch.zeros_like().scatter", "torch.zeros_like().scatter", "torch.zeros_like().scatter", "torch.log_softmax", "gold.contiguous().view.ne", "F.cross_entropy.masked_select().sum", "torch.cross_entropy", "gold.contiguous().view.contiguous", "gold.contiguous().view.view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "F.cross_entropy.masked_select"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.data_parallel.scatter", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.data_parallel.scatter", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.data_parallel.scatter", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.data_parallel.scatter"], ["print", "(", "timeStamp", ")", "\n", "FLAGS", "=", "config", ".", "flags", ".", "FLAGS", "\n", "FLAGS", ".", "_parse_flags", "(", ")", "\n", "log_dir", "=", "'wiki_log/'", "+", "timeDay", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "data_file", "=", "log_dir", "+", "'/dev_'", "+", "FLAGS", ".", "data", "+", "timeStamp", "\n", "para_file", "=", "log_dir", "+", "'/dev_'", "+", "FLAGS", ".", "data", "+", "timeStamp", "+", "'_para'", "\n", "precision", "=", "data_file", "+", "'precise'", "\n", "pickle", ".", "dump", "(", "FLAGS", ".", "__flags", ",", "open", "(", "para_file", ",", "'wb+'", ")", ")", "\n", "acc_flod", "=", "[", "]", "\n", "\n", "\n", "def", "log_time_delta", "(", "func", ")", ":", "\n", "    ", "@", "wraps", "(", "func", ")", "\n", "def", "_deco", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "ret", "=", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "delta", "=", "end", "-", "start", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.train.train_epoch": [[49, 88], ["model.train", "tqdm.tqdm", "map", "optimizer.zero_grad", "model", "train.cal_performance", "loss.backward", "optimizer.step_and_update_lr", "loss.item", "gold.ne", "gold.ne.sum().item", "x.to", "gold.ne.sum"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.train", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.train.cal_performance", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Optim.ScheduledOptim.step_and_update_lr"], ["return", "ret", "\n", "", "return", "_deco", "\n", "\n", "\n", "", "def", "predict", "(", "sess", ",", "cnn", ",", "dev", ",", "alphabet", ",", "batch_size", ",", "q_len", ")", ":", "\n", "    ", "scores", "=", "[", "]", "\n", "for", "data", "in", "batch_gen_with_single", "(", "dev", ",", "alphabet", ",", "batch_size", ",", "q_len", ")", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "cnn", ".", "question", ":", "data", "[", "0", "]", ",", "\n", "cnn", ".", "q_position", ":", "data", "[", "1", "]", ",", "\n", "cnn", ".", "dropout_keep_prob", ":", "1.0", "\n", "}", "\n", "score", "=", "sess", ".", "run", "(", "cnn", ".", "scores", ",", "feed_dict", ")", "\n", "scores", ".", "extend", "(", "score", ")", "\n", "", "return", "np", ".", "array", "(", "scores", "[", ":", "len", "(", "dev", ")", "]", ")", "\n", "\n", "\n", "", "@", "log_time_delta", "\n", "def", "dev_point_wise", "(", ")", ":", "\n", "    ", "if", "FLAGS", ".", "data", "==", "'TREC'", "or", "FLAGS", ".", "data", "==", "'sst2'", ":", "\n", "        ", "train", ",", "dev", ",", "test", "=", "load_trec_sst2", "(", "FLAGS", ".", "data", ")", "\n", "", "else", ":", "\n", "        ", "train", ",", "dev", "=", "load", "(", "FLAGS", ".", "data", ")", "\n", "", "q_max_sent_length", "=", "max", "(", "\n", "map", "(", "lambda", "x", ":", "len", "(", "x", ")", ",", "train", "[", "'question'", "]", ".", "str", ".", "split", "(", ")", ")", ")", "\n", "print", "(", "q_max_sent_length", ")", "\n", "print", "(", "len", "(", "train", ")", ")", "\n", "print", "(", "'train question unique:{}'", ".", "format", "(", "len", "(", "train", "[", "'question'", "]", ".", "unique", "(", ")", ")", ")", ")", "\n", "print", "(", "'train length'", ",", "len", "(", "train", ")", ")", "\n", "print", "(", "'dev length'", ",", "len", "(", "dev", ")", ")", "\n", "if", "FLAGS", ".", "data", "==", "'TREC'", "or", "FLAGS", ".", "data", "==", "'sst2'", ":", "\n", "        ", "alphabet", ",", "embeddings", "=", "prepare", "(", "[", "train", ",", "dev", ",", "test", "]", ",", "max_sent_length", "=", "q_max_sent_length", ",", "dim", "=", "FLAGS", ".", "embedding_dim", ",", "is_embedding_needed", "=", "True", ",", "fresh", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "alphabet", ",", "embeddings", "=", "prepare", "(", "[", "train", ",", "dev", "]", ",", "max_sent_length", "=", "q_max_sent_length", ",", "dim", "=", "FLAGS", ".", "embedding_dim", ",", "is_embedding_needed", "=", "True", ",", "fresh", "=", "True", ")", "\n", "", "print", "(", "'alphabet:'", ",", "len", "(", "alphabet", ")", ")", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "\"/gpu:0\"", ")", ":", "\n", "            ", "session_conf", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "session_conf", ".", "allow_soft_placement", "=", "FLAGS", ".", "allow_soft_placement", "\n", "session_conf", ".", "log_device_placement", "=", "FLAGS", ".", "log_device_placement", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.train.eval_epoch": [[89, 122], ["model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "map", "model", "train.cal_performance", "loss.item", "gold.ne", "gold.ne.sum().item", "x.to", "gold.ne.sum"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.eval", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.train.cal_performance"], ["session_conf", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "", "sess", "=", "tf", ".", "Session", "(", "config", "=", "session_conf", ")", "\n", "now", "=", "int", "(", "time", ".", "time", "(", ")", ")", "\n", "timeArray", "=", "time", ".", "localtime", "(", "now", ")", "\n", "timeStamp1", "=", "time", ".", "strftime", "(", "\"%Y%m%d%H%M%S\"", ",", "timeArray", ")", "\n", "timeDay", "=", "time", ".", "strftime", "(", "\"%Y%m%d\"", ",", "timeArray", ")", "\n", "print", "(", "timeStamp1", ")", "\n", "with", "sess", ".", "as_default", "(", ")", ",", "open", "(", "precision", ",", "\"w\"", ")", "as", "log", ":", "\n", "            ", "log", ".", "write", "(", "str", "(", "FLAGS", ".", "__flags", ")", "+", "'\\n'", ")", "\n", "cnn", "=", "LSTM", "(", "\n", "max_input_left", "=", "q_max_sent_length", ",", "\n", "vocab_size", "=", "len", "(", "alphabet", ")", ",", "\n", "embeddings", "=", "embeddings", ",", "\n", "embedding_size", "=", "FLAGS", ".", "embedding_dim", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "\n", "l2_reg_lambda", "=", "FLAGS", ".", "l2_reg_lambda", ",", "\n", "is_Embedding_Needed", "=", "True", ",", "\n", "hidden_num", "=", "FLAGS", ".", "hidden_num", ",", "\n", "trainable", "=", "FLAGS", ".", "trainable", ",", "\n", "dataset", "=", "FLAGS", ".", "data", ",", "\n", "extend_feature_dim", "=", "FLAGS", ".", "extend_feature_dim", ")", "\n", "cnn", ".", "build_graph", "(", ")", "\n", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "\"global_step\"", ",", "trainable", "=", "False", ")", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "FLAGS", ".", "learning_rate", ")", "\n", "grads_and_vars", "=", "optimizer", ".", "compute_gradients", "(", "cnn", ".", "loss", ")", "\n", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "\n", "grads_and_vars", ",", "global_step", "=", "global_step", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "acc_max", "=", "0.0000", "\n", "for", "i", "in", "range", "(", "FLAGS", ".", "num_epochs", ")", ":", "\n", "                ", "datas", "=", "batch_gen_with_point_wise", "(", "\n", "train", ",", "alphabet", ",", "FLAGS", ".", "batch_size", ",", "q_len", "=", "q_max_sent_length", ")", "\n", "for", "data", "in", "datas", ":", "\n", "                    ", "feed_dict", "=", "{", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.train.train": [[123, 185], ["range", "print", "print", "time.time", "train.train_epoch", "print", "time.time", "train.eval_epoch", "print", "model.state_dict", "open", "open", "log_tf.write", "log_vf.write", "torch.save", "torch.save", "torch.save", "torch.save", "open", "open", "log_tf.write", "log_vf.write", "math.exp", "math.exp", "min", "min", "max", "torch.save", "torch.save", "torch.save", "torch.save", "print", "time.time", "time.time", "math.exp", "math.exp", "min", "min", "transformer"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.train.train_epoch", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.train.eval_epoch"], ["cnn", ".", "question", ":", "data", "[", "0", "]", ",", "\n", "cnn", ".", "input_y", ":", "data", "[", "1", "]", ",", "\n", "cnn", ".", "q_position", ":", "data", "[", "2", "]", ",", "\n", "cnn", ".", "dropout_keep_prob", ":", "FLAGS", ".", "dropout_keep_prob", "\n", "}", "\n", "_", ",", "step", ",", "loss", ",", "accuracy", "=", "sess", ".", "run", "(", "\n", "[", "train_op", ",", "global_step", ",", "cnn", ".", "loss", ",", "cnn", ".", "accuracy", "]", ",", "feed_dict", ")", "\n", "time_str", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "isoformat", "(", ")", "\n", "print", "(", "\"{}: step {}, loss {:g}, acc {:g}  \"", ".", "format", "(", "time_str", ",", "step", ",", "loss", ",", "accuracy", ")", ")", "\n", "", "predicted", "=", "predict", "(", "\n", "sess", ",", "cnn", ",", "train", ",", "alphabet", ",", "FLAGS", ".", "batch_size", ",", "q_max_sent_length", ")", "\n", "predicted_label", "=", "np", ".", "argmax", "(", "predicted", ",", "1", ")", "\n", "acc_train", "=", "accuracy_score", "(", "\n", "train", "[", "'flag'", "]", ",", "predicted_label", ")", "\n", "predicted_dev", "=", "predict", "(", "\n", "sess", ",", "cnn", ",", "dev", ",", "alphabet", ",", "FLAGS", ".", "batch_size", ",", "q_max_sent_length", ")", "\n", "predicted_label", "=", "np", ".", "argmax", "(", "predicted_dev", ",", "1", ")", "\n", "acc_dev", "=", "accuracy_score", "(", "\n", "dev", "[", "'flag'", "]", ",", "predicted_label", ")", "\n", "if", "acc_dev", ">", "acc_max", ":", "\n", "                    ", "tf", ".", "train", ".", "Saver", "(", ")", ".", "save", "(", "sess", ",", "\"model_save/model\"", ",", "write_meta_graph", "=", "True", ")", "\n", "acc_max", "=", "acc_dev", "\n", "", "print", "(", "\"{}:train epoch:acc {}\"", ".", "format", "(", "i", ",", "acc_train", ")", ")", "\n", "print", "(", "\"{}:dev epoch:acc {}\"", ".", "format", "(", "i", ",", "acc_dev", ")", ")", "\n", "line2", "=", "\" {}:epoch: acc{}\"", ".", "format", "(", "i", ",", "acc_dev", ")", "\n", "log", ".", "write", "(", "line2", "+", "'\\n'", ")", "\n", "log", ".", "flush", "(", ")", "\n", "", "acc_flod", ".", "append", "(", "acc_max", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n", "", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "if", "FLAGS", ".", "data", "==", "'TREC'", "or", "FLAGS", ".", "data", "==", "'sst2'", ":", "\n", "        ", "for", "attr", ",", "value", "in", "sorted", "(", "FLAGS", ".", "__flags", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "(", "\"{}={}\"", ".", "format", "(", "attr", ".", "upper", "(", ")", ",", "value", ")", ")", ")", "\n", "", "dev_point_wise", "(", ")", "\n", "ckpt", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "\"model_save\"", "+", "'/'", ")", "\n", "saver", "=", "tf", ".", "train", ".", "import_meta_graph", "(", "ckpt", ".", "model_checkpoint_path", "+", "'.meta'", ")", "\n", "train", ",", "dev", ",", "test", "=", "load_trec_sst2", "(", "FLAGS", ".", "data", ")", "\n", "q_max_sent_length", "=", "max", "(", "map", "(", "lambda", "x", ":", "len", "(", "x", ")", ",", "train", "[", "'question'", "]", ".", "str", ".", "split", "(", ")", ")", ")", "\n", "alphabet", ",", "embeddings", "=", "prepare", "(", "[", "train", ",", "test", ",", "dev", "]", ",", "max_sent_length", "=", "q_max_sent_length", ",", "dim", "=", "FLAGS", ".", "embedding_dim", ",", "is_embedding_needed", "=", "True", ",", "fresh", "=", "True", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "saver", ".", "restore", "(", "sess", ",", "ckpt", ".", "model_checkpoint_path", ")", "\n", "graph", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "scores", "=", "[", "]", "\n", "question", "=", "graph", ".", "get_operation_by_name", "(", "'input_question'", ")", ".", "outputs", "[", "0", "]", "\n", "q_position", "=", "graph", ".", "get_operation_by_name", "(", "'q_position'", ")", ".", "outputs", "[", "0", "]", "\n", "dropout_keep_prob", "=", "graph", ".", "get_operation_by_name", "(", "'dropout_keep_prob'", ")", ".", "outputs", "[", "0", "]", "\n", "for", "data", "in", "batch_gen_with_single", "(", "test", ",", "alphabet", ",", "FLAGS", ".", "batch_size", ",", "q_max_sent_length", ")", ":", "\n", "                ", "feed_dict", "=", "{", "question", ".", "name", ":", "data", "[", "0", "]", ",", "q_position", ".", "name", ":", "data", "[", "1", "]", ",", "dropout_keep_prob", ".", "name", ":", "1.0", "}", "\n", "score", "=", "sess", ".", "run", "(", "\"output/scores:0\"", ",", "feed_dict", ")", "\n", "scores", ".", "extend", "(", "score", ")", "\n", "", "scores", "=", "np", ".", "array", "(", "scores", "[", ":", "len", "(", "test", ")", "]", ")", "\n", "predicted_label", "=", "np", ".", "argmax", "(", "scores", ",", "1", ")", "\n", "acc_test", "=", "accuracy_score", "(", "test", "[", "'flag'", "]", ",", "predicted_label", ")", "\n", "print", "(", "\"test epoch:acc {}\"", ".", "format", "(", "acc_test", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "FLAGS", ".", "n_fold", "+", "1", ")", ":", "\n", "            ", "print", "(", "\"{} cross validation \"", ".", "format", "(", "i", ")", ")", "\n", "for", "attr", ",", "value", "in", "sorted", "(", "FLAGS", ".", "__flags", ".", "items", "(", ")", ")", ":", "\n", "                ", "print", "(", "(", "\"{}={}\"", ".", "format", "(", "attr", ".", "upper", "(", ")", ",", "value", ")", ")", ")", "\n", "", "dev_point_wise", "(", ")", "\n", "", "print", "(", "\"the average acc {}\"", ".", "format", "(", "np", ".", "mean", "(", "acc_flod", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.train.main": [[186, 262], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.load", "torch.load", "torch.load", "torch.load", "train.prepare_dataloaders", "print", "torch.device", "torch.device", "torch.device", "torch.device", "transformer.Models.Transformer().to", "sum", "print", "transformer.Optim.ScheduledOptim", "train.train", "torch.Adam", "transformer.Models.Transformer", "p.nelement", "filter", "Transformer().to.parameters", "Transformer().to.parameters"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.train.prepare_dataloaders", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.train"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.train.prepare_dataloaders": [[264, 287], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset.TranslationDataset", "dataset.TranslationDataset"], "function", ["None"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.dataset.TranslationDataset.__init__": [[31, 47], ["len", "len", "src_word2idx.items", "tgt_word2idx.items"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "src_word2idx", ",", "tgt_word2idx", ",", "\n", "src_insts", "=", "None", ",", "tgt_insts", "=", "None", ")", ":", "\n", "\n", "        ", "assert", "src_insts", "\n", "assert", "not", "tgt_insts", "or", "(", "len", "(", "src_insts", ")", "==", "len", "(", "tgt_insts", ")", ")", "\n", "\n", "src_idx2word", "=", "{", "idx", ":", "word", "for", "word", ",", "idx", "in", "src_word2idx", ".", "items", "(", ")", "}", "\n", "self", ".", "_src_word2idx", "=", "src_word2idx", "\n", "self", ".", "_src_idx2word", "=", "src_idx2word", "\n", "self", ".", "_src_insts", "=", "src_insts", "\n", "\n", "tgt_idx2word", "=", "{", "idx", ":", "word", "for", "word", ",", "idx", "in", "tgt_word2idx", ".", "items", "(", ")", "}", "\n", "self", ".", "_tgt_word2idx", "=", "tgt_word2idx", "\n", "self", ".", "_tgt_idx2word", "=", "tgt_idx2word", "\n", "self", ".", "_tgt_insts", "=", "tgt_insts", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.dataset.TranslationDataset.n_insts": [[48, 52], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_insts", "(", "self", ")", ":", "\n", "        ", "''' Property for dataset size '''", "\n", "return", "len", "(", "self", ".", "_src_insts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.dataset.TranslationDataset.src_vocab_size": [[53, 57], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "src_vocab_size", "(", "self", ")", ":", "\n", "        ", "''' Property for vocab size '''", "\n", "return", "len", "(", "self", ".", "_src_word2idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.dataset.TranslationDataset.tgt_vocab_size": [[58, 62], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "tgt_vocab_size", "(", "self", ")", ":", "\n", "        ", "''' Property for vocab size '''", "\n", "return", "len", "(", "self", ".", "_tgt_word2idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.dataset.TranslationDataset.src_word2idx": [[63, 67], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "src_word2idx", "(", "self", ")", ":", "\n", "        ", "''' Property for word dictionary '''", "\n", "return", "self", ".", "_src_word2idx", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.dataset.TranslationDataset.tgt_word2idx": [[68, 72], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "tgt_word2idx", "(", "self", ")", ":", "\n", "        ", "''' Property for word dictionary '''", "\n", "return", "self", ".", "_tgt_word2idx", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.dataset.TranslationDataset.src_idx2word": [[73, 77], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "src_idx2word", "(", "self", ")", ":", "\n", "        ", "''' Property for index dictionary '''", "\n", "return", "self", ".", "_src_idx2word", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.dataset.TranslationDataset.tgt_idx2word": [[78, 82], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "tgt_idx2word", "(", "self", ")", ":", "\n", "        ", "''' Property for index dictionary '''", "\n", "return", "self", ".", "_tgt_idx2word", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.dataset.TranslationDataset.__len__": [[83, 85], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_insts", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.dataset.TranslationDataset.__getitem__": [[86, 90], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "_tgt_insts", ":", "\n", "            ", "return", "self", ".", "_src_insts", "[", "idx", "]", ",", "self", ".", "_tgt_insts", "[", "idx", "]", "\n", "", "return", "self", ".", "_src_insts", "[", "idx", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.dataset.paired_collate_fn": [[7, 12], ["list", "dataset.collate_fn", "dataset.collate_fn", "zip"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.dataset.collate_fn", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.dataset.collate_fn"], ["def", "paired_collate_fn", "(", "insts", ")", ":", "\n", "    ", "src_insts", ",", "tgt_insts", "=", "list", "(", "zip", "(", "*", "insts", ")", ")", "\n", "src_insts", "=", "collate_fn", "(", "src_insts", ")", "\n", "tgt_insts", "=", "collate_fn", "(", "tgt_insts", ")", "\n", "return", "(", "*", "src_insts", ",", "*", "tgt_insts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.dataset.collate_fn": [[13, 29], ["max", "numpy.array", "numpy.array", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "enumerate", "len"], "function", ["None"], ["", "def", "collate_fn", "(", "insts", ")", ":", "\n", "\n", "    ", "max_len", "=", "max", "(", "len", "(", "inst", ")", "for", "inst", "in", "insts", ")", "\n", "\n", "batch_seq", "=", "np", ".", "array", "(", "[", "\n", "inst", "+", "[", "Constants", ".", "PAD", "]", "*", "(", "max_len", "-", "len", "(", "inst", ")", ")", "\n", "for", "inst", "in", "insts", "]", ")", "\n", "\n", "batch_pos", "=", "np", ".", "array", "(", "[", "\n", "[", "pos_i", "+", "1", "if", "w_i", "!=", "Constants", ".", "PAD", "else", "0", "\n", "for", "pos_i", ",", "w_i", "in", "enumerate", "(", "inst", ")", "]", "for", "inst", "in", "batch_seq", "]", ")", "\n", "\n", "batch_seq", "=", "torch", ".", "LongTensor", "(", "batch_seq", ")", "\n", "batch_pos", "=", "torch", ".", "LongTensor", "(", "batch_pos", ")", "\n", "\n", "return", "batch_seq", ",", "batch_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.__init__": [[10, 53], ["int", "len", "numpy.ceil", "DataLoader.DataLoader.shuffle", "len", "len", "src_word2idx.items", "tgt_word2idx.items", "len"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle"], ["    ", "def", "__init__", "(", "\n", "self", ",", "src_word2idx", ",", "tgt_word2idx", ",", "\n", "src_insts", "=", "None", ",", "tgt_insts", "=", "None", ",", "ctx_insts", "=", "None", ",", "\n", "cuda", "=", "True", ",", "batch_size", "=", "64", ",", "shuffle", "=", "True", ",", "\n", "is_train", "=", "True", ",", "sort_by_length", "=", "False", ",", "\n", "maxibatch_size", "=", "20", ")", ":", "\n", "\n", "        ", "assert", "src_insts", "\n", "assert", "len", "(", "src_insts", ")", ">=", "batch_size", "\n", "\n", "if", "tgt_insts", ":", "\n", "            ", "assert", "len", "(", "src_insts", ")", "==", "len", "(", "tgt_insts", ")", "\n", "\n", "", "self", ".", "cuda", "=", "cuda", "\n", "self", ".", "_n_batch", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "src_insts", ")", "/", "batch_size", ")", ")", "\n", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "\n", "self", ".", "_src_insts", "=", "src_insts", "\n", "self", ".", "_tgt_insts", "=", "tgt_insts", "\n", "self", ".", "_ctx_insts", "=", "ctx_insts", "\n", "\n", "src_idx2word", "=", "{", "idx", ":", "word", "for", "word", ",", "idx", "in", "src_word2idx", ".", "items", "(", ")", "}", "\n", "tgt_idx2word", "=", "{", "idx", ":", "word", "for", "word", ",", "idx", "in", "tgt_word2idx", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "_src_word2idx", "=", "src_word2idx", "\n", "self", ".", "_src_idx2word", "=", "src_idx2word", "\n", "\n", "self", ".", "_tgt_word2idx", "=", "tgt_word2idx", "\n", "self", ".", "_tgt_idx2word", "=", "tgt_idx2word", "\n", "\n", "self", ".", "_iter_count", "=", "0", "\n", "\n", "self", ".", "_need_shuffle", "=", "shuffle", "\n", "\n", "self", ".", "is_train", "=", "is_train", "\n", "\n", "if", "self", ".", "_need_shuffle", ":", "\n", "            ", "self", ".", "shuffle", "(", ")", "\n", "\n", "", "self", ".", "_sort_by_length", "=", "sort_by_length", "\n", "\n", "self", ".", "_maxibatch_size", "=", "maxibatch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.n_insts": [[55, 59], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_insts", "(", "self", ")", ":", "\n", "        ", "''' Property for dataset size '''", "\n", "return", "len", "(", "self", ".", "_src_insts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.src_vocab_size": [[60, 64], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "src_vocab_size", "(", "self", ")", ":", "\n", "        ", "''' Property for vocab size '''", "\n", "return", "len", "(", "self", ".", "_src_word2idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.tgt_vocab_size": [[65, 69], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "tgt_vocab_size", "(", "self", ")", ":", "\n", "        ", "''' Property for vocab size '''", "\n", "return", "len", "(", "self", ".", "_tgt_word2idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.src_word2idx": [[70, 74], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "src_word2idx", "(", "self", ")", ":", "\n", "        ", "''' Property for word dictionary '''", "\n", "return", "self", ".", "_src_word2idx", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.tgt_word2idx": [[75, 79], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "tgt_word2idx", "(", "self", ")", ":", "\n", "        ", "''' Property for word dictionary '''", "\n", "return", "self", ".", "_tgt_word2idx", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.src_idx2word": [[80, 84], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "src_idx2word", "(", "self", ")", ":", "\n", "        ", "''' Property for index dictionary '''", "\n", "return", "self", ".", "_src_idx2word", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.tgt_idx2word": [[85, 89], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "tgt_idx2word", "(", "self", ")", ":", "\n", "        ", "''' Property for index dictionary '''", "\n", "return", "self", ".", "_tgt_idx2word", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle": [[90, 108], ["list", "random.shuffle", "zip", "list", "random.shuffle", "zip", "list", "random.shuffle", "zip", "random.shuffle", "zip", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "''' Shuffle data for a brand new start '''", "\n", "if", "self", ".", "_tgt_insts", ":", "\n", "            ", "if", "self", ".", "_ctx_insts", ":", "\n", "                ", "paired_insts", "=", "list", "(", "zip", "(", "self", ".", "_src_insts", ",", "self", ".", "_tgt_insts", ",", "self", ".", "_ctx_insts", ")", ")", "\n", "random", ".", "shuffle", "(", "paired_insts", ")", "\n", "self", ".", "_src_insts", ",", "self", ".", "_tgt_insts", ",", "self", ".", "_ctx_insts", "=", "zip", "(", "*", "paired_insts", ")", "\n", "", "else", ":", "\n", "                ", "paired_insts", "=", "list", "(", "zip", "(", "self", ".", "_src_insts", ",", "self", ".", "_tgt_insts", ")", ")", "\n", "random", ".", "shuffle", "(", "paired_insts", ")", "\n", "self", ".", "_src_insts", ",", "self", ".", "_tgt_insts", "=", "zip", "(", "*", "paired_insts", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "_ctx_insts", ":", "\n", "                ", "paired_insts", "=", "list", "(", "zip", "(", "self", ".", "_src_insts", ",", "self", ".", "_ctx_insts", ")", ")", "\n", "random", ".", "shuffle", "(", "paired_insts", ")", "\n", "self", ".", "_src_insts", ",", "self", ".", "_ctx_insts", "=", "zip", "(", "*", "paired_insts", ")", "\n", "", "else", ":", "\n", "                ", "random", ".", "shuffle", "(", "self", ".", "_src_insts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.__iter__": [[110, 112], ["None"], "methods", ["None"], ["", "", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.__next__": [[113, 115], ["DataLoader.DataLoader.next"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.next"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.__len__": [[116, 118], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.next": [[119, 221], ["max", "numpy.array", "numpy.array", "StopIteration", "torch.no_grad", "torch.autograd.Variable", "torch.autograd.Variable", "inst_data_tensor.cuda.cuda.cuda", "inst_position_tensor.cuda.cuda.cuda", "DataLoader.DataLoader.next.pad_to_longest"], "methods", ["None"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "''' Get the next batch '''", "\n", "\n", "def", "pad_to_longest", "(", "insts", ")", ":", "\n", "            ", "''' Pad the instance to the max seq length in batch '''", "\n", "\n", "max_len", "=", "max", "(", "len", "(", "inst", ")", "for", "inst", "in", "insts", ")", "\n", "\n", "inst_data", "=", "np", ".", "array", "(", "[", "\n", "inst", "+", "[", "Constants", ".", "PAD", "]", "*", "(", "max_len", "-", "len", "(", "inst", ")", ")", "\n", "for", "inst", "in", "insts", "]", ")", "\n", "\n", "inst_position", "=", "np", ".", "array", "(", "[", "\n", "[", "pos_i", "+", "1", "if", "w_i", "!=", "Constants", ".", "PAD", "else", "0", "for", "pos_i", ",", "w_i", "in", "enumerate", "(", "inst", ")", "]", "\n", "for", "inst", "in", "inst_data", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# inst_data_tensor = Variable(torch.LongTensor(inst_data), volatile=(not self.is_train))", "\n", "# inst_position_tensor = Variable(torch.LongTensor(inst_position), volatile=(not self.is_train))", "\n", "                ", "inst_data_tensor", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "inst_data", ")", ")", "\n", "inst_position_tensor", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "inst_position", ")", ")", "\n", "", "if", "self", ".", "cuda", ":", "\n", "                ", "inst_data_tensor", "=", "inst_data_tensor", ".", "cuda", "(", ")", "\n", "inst_position_tensor", "=", "inst_position_tensor", ".", "cuda", "(", ")", "\n", "", "return", "inst_data_tensor", ",", "inst_position_tensor", "\n", "\n", "", "if", "self", ".", "_iter_count", "<", "self", ".", "_n_batch", ":", "\n", "\n", "            ", "batch_idx", "=", "self", ".", "_iter_count", "\n", "self", ".", "_iter_count", "+=", "1", "\n", "\n", "\n", "if", "self", ".", "_sort_by_length", ":", "\n", "\n", "                ", "assert", "self", ".", "_tgt_insts", ",", "'Target must be provided to do sort_by_length'", "\n", "\n", "if", "batch_idx", "%", "self", ".", "_maxibatch_size", "==", "0", ":", "\n", "\n", "                    ", "start_idx", "=", "batch_idx", "*", "self", ".", "_batch_size", "\n", "end_idx", "=", "(", "batch_idx", "+", "self", ".", "_maxibatch_size", ")", "*", "self", ".", "_batch_size", "\n", "\n", "src_insts", "=", "self", ".", "_src_insts", "[", "start_idx", ":", "end_idx", "]", "\n", "tgt_insts", "=", "self", ".", "_tgt_insts", "[", "start_idx", ":", "end_idx", "]", "\n", "\n", "tlen", "=", "np", ".", "array", "(", "[", "len", "(", "t", ")", "for", "t", "in", "tgt_insts", "]", ")", "\n", "tidx", "=", "tlen", ".", "argsort", "(", ")", "\n", "\n", "self", ".", "_sbuf", "=", "[", "src_insts", "[", "i", "]", "for", "i", "in", "tidx", "]", "\n", "self", ".", "_tbuf", "=", "[", "tgt_insts", "[", "i", "]", "for", "i", "in", "tidx", "]", "\n", "\n", "if", "self", ".", "_ctx_insts", ":", "\n", "                        ", "ctx_insts", "=", "self", ".", "_ctx_insts", "[", "start_idx", ":", "end_idx", "]", "\n", "self", ".", "_cbuf", "=", "[", "ctx_insts", "[", "i", "]", "for", "i", "in", "tidx", "]", "\n", "\n", "", "", "cur_start", "=", "(", "batch_idx", "%", "self", ".", "_maxibatch_size", ")", "*", "self", ".", "_batch_size", "\n", "cur_end", "=", "(", "(", "batch_idx", "%", "self", ".", "_maxibatch_size", ")", "+", "1", ")", "*", "self", ".", "_batch_size", "\n", "\n", "cur_src_insts", "=", "self", ".", "_sbuf", "[", "cur_start", ":", "cur_end", "]", "\n", "src_data", ",", "src_pos", "=", "pad_to_longest", "(", "cur_src_insts", ")", "\n", "\n", "cur_tgt_insts", "=", "self", ".", "_tbuf", "[", "cur_start", ":", "cur_end", "]", "\n", "tgt_data", ",", "tgt_pos", "=", "pad_to_longest", "(", "cur_tgt_insts", ")", "\n", "\n", "if", "self", ".", "_ctx_insts", ":", "\n", "                    ", "cur_ctx_insts", "=", "self", ".", "_cbuf", "[", "cur_start", ":", "cur_end", "]", "\n", "ctx_data", ",", "ctx_pos", "=", "pad_to_longest", "(", "cur_ctx_insts", ")", "\n", "\n", "return", "(", "src_data", ",", "src_pos", ")", ",", "(", "tgt_data", ",", "tgt_pos", ")", ",", "(", "ctx_data", ",", "ctx_pos", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "return", "(", "src_data", ",", "src_pos", ")", ",", "(", "tgt_data", ",", "tgt_pos", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "start_idx", "=", "batch_idx", "*", "self", ".", "_batch_size", "\n", "end_idx", "=", "(", "batch_idx", "+", "1", ")", "*", "self", ".", "_batch_size", "\n", "\n", "src_insts", "=", "self", ".", "_src_insts", "[", "start_idx", ":", "end_idx", "]", "\n", "src_data", ",", "src_pos", "=", "pad_to_longest", "(", "src_insts", ")", "\n", "\n", "if", "self", ".", "_ctx_insts", ":", "\n", "                    ", "ctx_insts", "=", "self", ".", "_ctx_insts", "[", "start_idx", ":", "end_idx", "]", "\n", "ctx_data", ",", "ctx_pos", "=", "pad_to_longest", "(", "ctx_insts", ")", "\n", "\n", "", "if", "not", "self", ".", "_tgt_insts", ":", "\n", "                    ", "if", "self", ".", "_ctx_insts", ":", "\n", "                        ", "return", "(", "src_data", ",", "src_pos", ")", ",", "(", "ctx_data", ",", "ctx_pos", ")", "\n", "", "else", ":", "\n", "                        ", "return", "src_data", ",", "src_pos", "\n", "", "", "else", ":", "\n", "                    ", "tgt_insts", "=", "self", ".", "_tgt_insts", "[", "start_idx", ":", "end_idx", "]", "\n", "tgt_data", ",", "tgt_pos", "=", "pad_to_longest", "(", "tgt_insts", ")", "\n", "if", "self", ".", "_ctx_insts", ":", "\n", "                        ", "return", "(", "src_data", ",", "src_pos", ")", ",", "(", "tgt_data", ",", "tgt_pos", ")", ",", "(", "ctx_data", ",", "ctx_pos", ")", "\n", "", "else", ":", "\n", "                        ", "return", "(", "src_data", ",", "src_pos", ")", ",", "(", "tgt_data", ",", "tgt_pos", ")", "\n", "\n", "", "", "", "", "else", ":", "\n", "\n", "            ", "if", "self", ".", "_need_shuffle", ":", "\n", "                ", "self", ".", "shuffle", "(", ")", "\n", "\n", "", "self", ".", "_iter_count", "=", "0", "\n", "raise", "StopIteration", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.preprocess.read_instances_from_file": [[6, 32], ["print", "open", "print", "sent.lower.split", "len", "sent.lower.lower", "len"], "function", ["None"], ["def", "read_instances_from_file", "(", "inst_file", ",", "max_sent_len", ",", "keep_case", ")", ":", "\n", "    ", "''' Convert file into word seq lists and vocab '''", "\n", "\n", "word_insts", "=", "[", "]", "\n", "trimmed_sent_count", "=", "0", "\n", "with", "open", "(", "inst_file", ")", "as", "f", ":", "\n", "        ", "for", "sent", "in", "f", ":", "\n", "            ", "if", "not", "keep_case", ":", "\n", "                ", "sent", "=", "sent", ".", "lower", "(", ")", "\n", "", "words", "=", "sent", ".", "split", "(", ")", "\n", "if", "len", "(", "words", ")", ">", "max_sent_len", ":", "\n", "                ", "trimmed_sent_count", "+=", "1", "\n", "", "word_inst", "=", "words", "[", ":", "max_sent_len", "]", "\n", "\n", "if", "word_inst", ":", "\n", "                ", "word_insts", "+=", "[", "[", "Constants", ".", "BOS_WORD", "]", "+", "word_inst", "+", "[", "Constants", ".", "EOS_WORD", "]", "]", "\n", "", "else", ":", "\n", "                ", "word_insts", "+=", "[", "None", "]", "\n", "\n", "", "", "", "print", "(", "'[Info] Get {} instances from {}'", ".", "format", "(", "len", "(", "word_insts", ")", ",", "inst_file", ")", ")", "\n", "\n", "if", "trimmed_sent_count", ">", "0", ":", "\n", "        ", "print", "(", "'[Warning] {} instances are trimmed to the max sentence length {}.'", "\n", ".", "format", "(", "trimmed_sent_count", ",", "max_sent_len", ")", ")", "\n", "\n", "", "return", "word_insts", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.preprocess.build_vocab_idx": [[33, 63], ["set", "print", "word_count.items", "print", "print", "len", "len", "len"], "function", ["None"], ["", "def", "build_vocab_idx", "(", "word_insts", ",", "min_word_count", ")", ":", "\n", "    ", "''' Trim vocab by number of occurence '''", "\n", "\n", "full_vocab", "=", "set", "(", "w", "for", "sent", "in", "word_insts", "for", "w", "in", "sent", ")", "\n", "print", "(", "'[Info] Original Vocabulary size ='", ",", "len", "(", "full_vocab", ")", ")", "\n", "\n", "word2idx", "=", "{", "\n", "Constants", ".", "BOS_WORD", ":", "Constants", ".", "BOS", ",", "\n", "Constants", ".", "EOS_WORD", ":", "Constants", ".", "EOS", ",", "\n", "Constants", ".", "PAD_WORD", ":", "Constants", ".", "PAD", ",", "\n", "Constants", ".", "UNK_WORD", ":", "Constants", ".", "UNK", "}", "\n", "\n", "word_count", "=", "{", "w", ":", "0", "for", "w", "in", "full_vocab", "}", "\n", "\n", "for", "sent", "in", "word_insts", ":", "\n", "        ", "for", "word", "in", "sent", ":", "\n", "            ", "word_count", "[", "word", "]", "+=", "1", "\n", "\n", "", "", "ignored_word_count", "=", "0", "\n", "for", "word", ",", "count", "in", "word_count", ".", "items", "(", ")", ":", "\n", "        ", "if", "word", "not", "in", "word2idx", ":", "\n", "            ", "if", "count", ">", "min_word_count", ":", "\n", "                ", "word2idx", "[", "word", "]", "=", "len", "(", "word2idx", ")", "\n", "", "else", ":", "\n", "                ", "ignored_word_count", "+=", "1", "\n", "\n", "", "", "", "print", "(", "'[Info] Trimmed vocabulary size = {},'", ".", "format", "(", "len", "(", "word2idx", ")", ")", ",", "\n", "'each with minimum occurrence = {}'", ".", "format", "(", "min_word_count", ")", ")", "\n", "print", "(", "\"[Info] Ignored word count = {}\"", ".", "format", "(", "ignored_word_count", ")", ")", "\n", "return", "word2idx", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.preprocess.convert_instance_to_idx_seq": [[64, 67], ["word2idx.get"], "function", ["None"], ["", "def", "convert_instance_to_idx_seq", "(", "word_insts", ",", "word2idx", ")", ":", "\n", "    ", "''' Mapping words to idx sequence. '''", "\n", "return", "[", "[", "word2idx", ".", "get", "(", "w", ",", "Constants", ".", "UNK", ")", "for", "w", "in", "s", "]", "for", "s", "in", "word_insts", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.preprocess.main": [[68, 162], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "preprocess.read_instances_from_file", "preprocess.read_instances_from_file", "list", "preprocess.read_instances_from_file", "preprocess.read_instances_from_file", "list", "print", "preprocess.convert_instance_to_idx_seq", "preprocess.convert_instance_to_idx_seq", "print", "preprocess.convert_instance_to_idx_seq", "preprocess.convert_instance_to_idx_seq", "print", "torch.save", "print", "len", "len", "print", "min", "zip", "len", "len", "print", "min", "zip", "torch.load", "print", "len", "len", "len", "len", "print", "preprocess.build_vocab_idx", "print", "preprocess.build_vocab_idx", "print", "preprocess.build_vocab_idx", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.preprocess.read_instances_from_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.preprocess.read_instances_from_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.preprocess.read_instances_from_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.preprocess.read_instances_from_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.preprocess.convert_instance_to_idx_seq", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.preprocess.convert_instance_to_idx_seq", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.preprocess.convert_instance_to_idx_seq", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.preprocess.convert_instance_to_idx_seq", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.preprocess.build_vocab_idx", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.preprocess.build_vocab_idx", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.preprocess.build_vocab_idx"], ["", "def", "main", "(", ")", ":", "\n", "    ", "''' Main function '''", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-train_src'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-train_tgt'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-valid_src'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-valid_tgt'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-save_data'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-max_len'", ",", "'--max_word_seq_len'", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "'-min_word_count'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'-keep_case'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-share_vocab'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'-vocab'", ",", "default", "=", "None", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "opt", ".", "max_token_seq_len", "=", "opt", ".", "max_word_seq_len", "+", "2", "# include the <s> and </s>", "\n", "\n", "# Training set", "\n", "train_src_word_insts", "=", "read_instances_from_file", "(", "\n", "opt", ".", "train_src", ",", "opt", ".", "max_word_seq_len", ",", "opt", ".", "keep_case", ")", "\n", "train_tgt_word_insts", "=", "read_instances_from_file", "(", "\n", "opt", ".", "train_tgt", ",", "opt", ".", "max_word_seq_len", ",", "opt", ".", "keep_case", ")", "\n", "\n", "if", "len", "(", "train_src_word_insts", ")", "!=", "len", "(", "train_tgt_word_insts", ")", ":", "\n", "        ", "print", "(", "'[Warning] The training instance count is not equal.'", ")", "\n", "min_inst_count", "=", "min", "(", "len", "(", "train_src_word_insts", ")", ",", "len", "(", "train_tgt_word_insts", ")", ")", "\n", "train_src_word_insts", "=", "train_src_word_insts", "[", ":", "min_inst_count", "]", "\n", "train_tgt_word_insts", "=", "train_tgt_word_insts", "[", ":", "min_inst_count", "]", "\n", "\n", "#- Remove empty instances", "\n", "", "train_src_word_insts", ",", "train_tgt_word_insts", "=", "list", "(", "zip", "(", "*", "[", "\n", "(", "s", ",", "t", ")", "for", "s", ",", "t", "in", "zip", "(", "train_src_word_insts", ",", "train_tgt_word_insts", ")", "if", "s", "and", "t", "]", ")", ")", "\n", "\n", "# Validation set", "\n", "valid_src_word_insts", "=", "read_instances_from_file", "(", "\n", "opt", ".", "valid_src", ",", "opt", ".", "max_word_seq_len", ",", "opt", ".", "keep_case", ")", "\n", "valid_tgt_word_insts", "=", "read_instances_from_file", "(", "\n", "opt", ".", "valid_tgt", ",", "opt", ".", "max_word_seq_len", ",", "opt", ".", "keep_case", ")", "\n", "\n", "if", "len", "(", "valid_src_word_insts", ")", "!=", "len", "(", "valid_tgt_word_insts", ")", ":", "\n", "        ", "print", "(", "'[Warning] The validation instance count is not equal.'", ")", "\n", "min_inst_count", "=", "min", "(", "len", "(", "valid_src_word_insts", ")", ",", "len", "(", "valid_tgt_word_insts", ")", ")", "\n", "valid_src_word_insts", "=", "valid_src_word_insts", "[", ":", "min_inst_count", "]", "\n", "valid_tgt_word_insts", "=", "valid_tgt_word_insts", "[", ":", "min_inst_count", "]", "\n", "\n", "#- Remove empty instances", "\n", "", "valid_src_word_insts", ",", "valid_tgt_word_insts", "=", "list", "(", "zip", "(", "*", "[", "\n", "(", "s", ",", "t", ")", "for", "s", ",", "t", "in", "zip", "(", "valid_src_word_insts", ",", "valid_tgt_word_insts", ")", "if", "s", "and", "t", "]", ")", ")", "\n", "\n", "# Build vocabulary", "\n", "if", "opt", ".", "vocab", ":", "\n", "        ", "predefined_data", "=", "torch", ".", "load", "(", "opt", ".", "vocab", ")", "\n", "assert", "'dict'", "in", "predefined_data", "\n", "\n", "print", "(", "'[Info] Pre-defined vocabulary found.'", ")", "\n", "src_word2idx", "=", "predefined_data", "[", "'dict'", "]", "[", "'src'", "]", "\n", "tgt_word2idx", "=", "predefined_data", "[", "'dict'", "]", "[", "'tgt'", "]", "\n", "", "else", ":", "\n", "        ", "if", "opt", ".", "share_vocab", ":", "\n", "            ", "print", "(", "'[Info] Build shared vocabulary for source and target.'", ")", "\n", "word2idx", "=", "build_vocab_idx", "(", "\n", "train_src_word_insts", "+", "train_tgt_word_insts", ",", "opt", ".", "min_word_count", ")", "\n", "src_word2idx", "=", "tgt_word2idx", "=", "word2idx", "\n", "", "else", ":", "\n", "            ", "print", "(", "'[Info] Build vocabulary for source.'", ")", "\n", "src_word2idx", "=", "build_vocab_idx", "(", "train_src_word_insts", ",", "opt", ".", "min_word_count", ")", "\n", "print", "(", "'[Info] Build vocabulary for target.'", ")", "\n", "tgt_word2idx", "=", "build_vocab_idx", "(", "train_tgt_word_insts", ",", "opt", ".", "min_word_count", ")", "\n", "\n", "# word to index", "\n", "", "", "print", "(", "'[Info] Convert source word instances into sequences of word index.'", ")", "\n", "train_src_insts", "=", "convert_instance_to_idx_seq", "(", "train_src_word_insts", ",", "src_word2idx", ")", "\n", "valid_src_insts", "=", "convert_instance_to_idx_seq", "(", "valid_src_word_insts", ",", "src_word2idx", ")", "\n", "\n", "print", "(", "'[Info] Convert target word instances into sequences of word index.'", ")", "\n", "train_tgt_insts", "=", "convert_instance_to_idx_seq", "(", "train_tgt_word_insts", ",", "tgt_word2idx", ")", "\n", "valid_tgt_insts", "=", "convert_instance_to_idx_seq", "(", "valid_tgt_word_insts", ",", "tgt_word2idx", ")", "\n", "\n", "data", "=", "{", "\n", "'settings'", ":", "opt", ",", "\n", "'dict'", ":", "{", "\n", "'src'", ":", "src_word2idx", ",", "\n", "'tgt'", ":", "tgt_word2idx", "}", ",", "\n", "'train'", ":", "{", "\n", "'src'", ":", "train_src_insts", ",", "\n", "'tgt'", ":", "train_tgt_insts", "}", ",", "\n", "'valid'", ":", "{", "\n", "'src'", ":", "valid_src_insts", ",", "\n", "'tgt'", ":", "valid_tgt_insts", "}", "}", "\n", "\n", "print", "(", "'[Info] Dumping the processed data to pickle file'", ",", "opt", ".", "save_data", ")", "\n", "torch", ".", "save", "(", "data", ",", "opt", ".", "save_data", ")", "\n", "print", "(", "'[Info] Finish.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Modules.ScaledDotProductAttention.__init__": [[8, 13], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "temperature", ",", "attn_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Modules.ScaledDotProductAttention.forward": [[14, 58], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "Modules.ScaledDotProductAttention.softmax", "Modules.ScaledDotProductAttention.dropout", "Modules.ScaledDotProductAttention.softmax", "Modules.ScaledDotProductAttention.dropout", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "Modules.ScaledDotProductAttention.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "k_real.transpose", "k_phase.transpose", "k_phase.transpose", "k_real.transpose", "attn_real.masked_fill.masked_fill.masked_fill", "attn_phase.masked_fill.masked_fill.masked_fill", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "attn.masked_fill.masked_fill.masked_fill"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q_real", ",", "k_real", ",", "v_real", ",", "q_phase", ",", "k_phase", ",", "v_phase", ",", "mask", "=", "None", ",", "continue_complex", "=", "True", ")", ":", "\n", "\n", "        ", "attn_real", "=", "torch", ".", "bmm", "(", "q_real", ",", "k_real", ".", "transpose", "(", "1", ",", "2", ")", ")", "-", "torch", ".", "bmm", "(", "q_phase", ",", "k_phase", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "\n", "attn_phase", "=", "torch", ".", "bmm", "(", "q_real", ",", "k_phase", ".", "transpose", "(", "1", ",", "2", ")", ")", "+", "torch", ".", "bmm", "(", "q_phase", ",", "k_real", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "\n", "if", "(", "continue_complex", ")", ":", "\n", "            ", "attn_real", "=", "attn_real", "/", "self", ".", "temperature", "\n", "attn_phase", "=", "attn_phase", "/", "self", ".", "temperature", "\n", "if", "mask", "is", "not", "None", ":", "\n", "                ", "attn_real", "=", "attn_real", ".", "masked_fill", "(", "mask", ",", "-", "np", ".", "inf", ")", "\n", "attn_phase", "=", "attn_phase", ".", "masked_fill", "(", "mask", ",", "-", "np", ".", "inf", ")", "\n", "\n", "", "attn_real", "=", "self", ".", "softmax", "(", "attn_real", ")", "\n", "attn_real", "=", "self", ".", "dropout", "(", "attn_real", ")", "\n", "\n", "attn_phase", "=", "self", ".", "softmax", "(", "attn_phase", ")", "\n", "attn_phase", "=", "self", ".", "dropout", "(", "attn_phase", ")", "\n", "\n", "\n", "output_real", "=", "torch", ".", "bmm", "(", "attn_real", ",", "v_real", ")", "-", "torch", ".", "bmm", "(", "attn_phase", ",", "v_phase", ")", "\n", "\n", "output_phase", "=", "torch", ".", "bmm", "(", "attn_real", ",", "v_phase", ")", "+", "torch", ".", "bmm", "(", "attn_phase", ",", "v_real", ")", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "attn", "=", "attn_real", "*", "attn_real", "+", "attn_phase", "*", "attn_phase", "\n", "# attn=attn/self.temperature", "\n", "attn", "=", "torch", ".", "sqrt", "(", "attn", ")", "\n", "attn", "=", "attn", "/", "self", ".", "temperature", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "                ", "attn", "=", "attn", ".", "masked_fill", "(", "mask", ",", "-", "np", ".", "inf", ")", "\n", "\n", "", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "\n", "\n", "output_real", "=", "torch", ".", "bmm", "(", "attn", ",", "v_real", ")", "\n", "\n", "output_phase", "=", "torch", ".", "bmm", "(", "attn", ",", "v_phase", ")", "\n", "\n", "\n", "\n", "", "return", "output_real", ",", "output_phase", ",", "attn_real", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Layers.EncoderLayer.__init__": [[9, 14], ["torch.Module.__init__", "transformer.SubLayers.MultiHeadAttention", "transformer.SubLayers.PositionwiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "EncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "slf_attn", "=", "MultiHeadAttention", "(", "\n", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "pos_ffn", "=", "PositionwiseFeedForward", "(", "d_model", ",", "d_inner", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Layers.EncoderLayer.forward": [[15, 29], ["Layers.EncoderLayer.slf_attn", "Layers.EncoderLayer.pos_ffn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "enc_input_real", ",", "enc_input_phase", ",", "non_pad_mask", "=", "None", ",", "slf_attn_mask", "=", "None", ")", ":", "\n", "        ", "enc_output_real", ",", "enc_output_phase", ",", "enc_slf_attn", "=", "self", ".", "slf_attn", "(", "\n", "enc_input_real", ",", "enc_input_real", ",", "enc_input_real", ",", "enc_input_phase", ",", "enc_input_phase", ",", "enc_input_phase", ",", "mask", "=", "slf_attn_mask", ")", "\n", "\n", "enc_output_real", "*=", "non_pad_mask", "\n", "enc_output_phase", "*=", "non_pad_mask", "\n", "\n", "enc_output_real", ",", "enc_output_phase", "=", "self", ".", "pos_ffn", "(", "enc_output_real", ",", "enc_output_phase", ")", "\n", "\n", "enc_output_real", "*=", "non_pad_mask", "\n", "enc_output_phase", "*=", "non_pad_mask", "\n", "\n", "\n", "return", "enc_output_real", ",", "enc_output_phase", ",", "enc_slf_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Layers.DecoderLayer.__init__": [[34, 39], ["torch.Module.__init__", "transformer.SubLayers.MultiHeadAttention", "transformer.SubLayers.MultiHeadAttention", "transformer.SubLayers.PositionwiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "DecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "slf_attn", "=", "MultiHeadAttention", "(", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "enc_attn", "=", "MultiHeadAttention", "(", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "pos_ffn", "=", "PositionwiseFeedForward", "(", "d_model", ",", "d_inner", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Layers.DecoderLayer.forward": [[40, 57], ["Layers.DecoderLayer.slf_attn", "Layers.DecoderLayer.enc_attn", "Layers.DecoderLayer.pos_ffn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dec_input_real", ",", "dec_input_phase", ",", "enc_output_real", ",", "enc_output_phase", ",", "non_pad_mask", "=", "None", ",", "slf_attn_mask", "=", "None", ",", "dec_enc_attn_mask", "=", "None", ")", ":", "\n", "        ", "dec_output_real", ",", "dec_output_phase", ",", "dec_slf_attn", "=", "self", ".", "slf_attn", "(", "\n", "dec_input_real", ",", "dec_input_real", ",", "dec_input_real", ",", "dec_input_phase", ",", "dec_input_phase", ",", "dec_input_phase", ",", "mask", "=", "slf_attn_mask", ")", "\n", "\n", "dec_output_real", "*=", "non_pad_mask", "\n", "dec_output_phase", "*=", "non_pad_mask", "\n", "\n", "dec_output_real", ",", "dec_output_phase", ",", "dec_enc_attn", "=", "self", ".", "enc_attn", "(", "dec_output_real", ",", "enc_output_real", ",", "enc_output_real", ",", "dec_output_phase", ",", "enc_output_phase", ",", "enc_output_phase", ",", "mask", "=", "dec_enc_attn_mask", ")", "\n", "\n", "dec_output_real", "*=", "non_pad_mask", "\n", "dec_output_phase", "*=", "non_pad_mask", "\n", "\n", "dec_output_real", ",", "dec_output_phase", "=", "self", ".", "pos_ffn", "(", "dec_output_real", ",", "dec_output_phase", ")", "\n", "dec_output_real", "*=", "non_pad_mask", "\n", "dec_output_phase", "*=", "non_pad_mask", "\n", "\n", "return", "dec_output_real", ",", "dec_output_phase", ",", "dec_slf_attn", ",", "dec_enc_attn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Models.Encoder.__init__": [[45, 65], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.ModuleList", "torch.ModuleList", "Models.get_sinusoid_encoding_table", "transformer.Layers.EncoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.get_sinusoid_encoding_table"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "n_src_vocab", ",", "len_max_seq", ",", "d_word_vec", ",", "\n", "n_layers", ",", "n_head", ",", "d_k", ",", "d_v", ",", "\n", "d_model", ",", "d_inner", ",", "dropout", "=", "0.1", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "n_position", "=", "len_max_seq", "+", "1", "\n", "\n", "self", ".", "src_word_emb", "=", "nn", ".", "Embedding", "(", "\n", "n_src_vocab", ",", "d_word_vec", ",", "padding_idx", "=", "Constants", ".", "PAD", ")", "\n", "\n", "self", ".", "position_enc", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "\n", "get_sinusoid_encoding_table", "(", "n_src_vocab", ",", "d_word_vec", ",", "padding_idx", "=", "0", ")", ",", "\n", "freeze", "=", "True", ")", "\n", "\n", "self", ".", "layer_stack", "=", "nn", ".", "ModuleList", "(", "[", "\n", "EncoderLayer", "(", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "for", "_", "in", "range", "(", "n_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Models.Encoder.forward": [[66, 104], ["Models.get_attn_key_pad_mask", "Models.get_non_pad_mask", "Models.Encoder.src_word_emb", "Models.Encoder.position_enc", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.unsqueeze.float", "torch.unsqueeze.float", "enc_layer"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Models.get_attn_key_pad_mask", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Models.get_non_pad_mask", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul"], ["", "def", "forward", "(", "self", ",", "src_seq", ",", "src_pos", ",", "return_attns", "=", "False", ")", ":", "\n", "\n", "\n", "\n", "        ", "enc_slf_attn_list", "=", "[", "]", "\n", "\n", "# -- Prepare masks", "\n", "slf_attn_mask", "=", "get_attn_key_pad_mask", "(", "seq_k", "=", "src_seq", ",", "seq_q", "=", "src_seq", ")", "\n", "non_pad_mask", "=", "get_non_pad_mask", "(", "src_seq", ")", "\n", "\n", "# -- Forward", "\n", "enc_output_real_real", "=", "self", ".", "src_word_emb", "(", "src_seq", ")", "\n", "\n", "enc_output_phase", "=", "self", ".", "position_enc", "(", "src_seq", ")", "\n", "\n", "pos", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "cuda", ".", "LongTensor", "(", "src_pos", ")", ",", "2", ")", "\n", "\n", "\n", "enc_output_phase", "=", "torch", ".", "mul", "(", "pos", ".", "float", "(", ")", ",", "enc_output_phase", ")", "\n", "\n", "cos", "=", "torch", ".", "cos", "(", "enc_output_phase", ")", "\n", "sin", "=", "torch", ".", "sin", "(", "enc_output_phase", ")", "\n", "\n", "enc_output_real", "=", "enc_output_real_real", "*", "cos", "\n", "enc_output_phase", "=", "enc_output_real_real", "*", "sin", "\n", "\n", "\n", "for", "enc_layer", "in", "self", ".", "layer_stack", ":", "\n", "            ", "enc_output_real", ",", "enc_output_phase", ",", "enc_slf_attn", "=", "enc_layer", "(", "\n", "enc_output_real", ",", "\n", "enc_output_phase", ",", "\n", "non_pad_mask", "=", "non_pad_mask", ",", "\n", "slf_attn_mask", "=", "slf_attn_mask", ")", "\n", "if", "return_attns", ":", "\n", "                ", "enc_slf_attn_list", "+=", "[", "enc_slf_attn", "]", "\n", "", "", "if", "return_attns", ":", "\n", "            ", "return", "enc_output_real", ",", "enc_output_phase", ",", "enc_slf_attn_list", "\n", "", "return", "enc_output_real", ",", "enc_output_phase", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Models.Decoder.__init__": [[107, 126], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.ModuleList", "torch.ModuleList", "Models.get_sinusoid_encoding_table", "transformer.Layers.DecoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.get_sinusoid_encoding_table"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "n_tgt_vocab", ",", "len_max_seq", ",", "d_word_vec", ",", "\n", "n_layers", ",", "n_head", ",", "d_k", ",", "d_v", ",", "\n", "d_model", ",", "d_inner", ",", "dropout", "=", "0.1", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "n_position", "=", "len_max_seq", "+", "1", "\n", "\n", "self", ".", "tgt_word_emb", "=", "nn", ".", "Embedding", "(", "\n", "n_tgt_vocab", ",", "d_word_vec", ",", "padding_idx", "=", "Constants", ".", "PAD", ")", "\n", "\n", "self", ".", "position_enc", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "\n", "get_sinusoid_encoding_table", "(", "n_tgt_vocab", ",", "d_word_vec", ",", "padding_idx", "=", "0", ")", ",", "\n", "freeze", "=", "True", ")", "\n", "\n", "self", ".", "layer_stack", "=", "nn", ".", "ModuleList", "(", "[", "\n", "DecoderLayer", "(", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "for", "_", "in", "range", "(", "n_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Models.Decoder.forward": [[127, 170], ["Models.get_non_pad_mask", "Models.get_subsequent_mask", "Models.get_attn_key_pad_mask", "Models.get_attn_key_pad_mask", "Models.Decoder.tgt_word_emb", "Models.Decoder.position_enc", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.unsqueeze.float", "torch.unsqueeze.float", "dec_layer"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Models.get_non_pad_mask", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Models.get_subsequent_mask", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Models.get_attn_key_pad_mask", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Models.get_attn_key_pad_mask", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul"], ["", "def", "forward", "(", "self", ",", "tgt_seq", ",", "tgt_pos", ",", "src_seq", ",", "enc_output_real", ",", "enc_output_phase", ",", "return_attns", "=", "False", ")", ":", "\n", "\n", "        ", "dec_slf_attn_list", ",", "dec_enc_attn_list", "=", "[", "]", ",", "[", "]", "\n", "\n", "# -- Prepare masks", "\n", "non_pad_mask", "=", "get_non_pad_mask", "(", "tgt_seq", ")", "\n", "\n", "slf_attn_mask_subseq", "=", "get_subsequent_mask", "(", "tgt_seq", ")", "\n", "slf_attn_mask_keypad", "=", "get_attn_key_pad_mask", "(", "seq_k", "=", "tgt_seq", ",", "seq_q", "=", "tgt_seq", ")", "\n", "slf_attn_mask", "=", "(", "slf_attn_mask_keypad", "+", "slf_attn_mask_subseq", ")", ".", "gt", "(", "0", ")", "\n", "\n", "dec_enc_attn_mask", "=", "get_attn_key_pad_mask", "(", "seq_k", "=", "src_seq", ",", "seq_q", "=", "tgt_seq", ")", "\n", "\n", "dec_output_real_real", "=", "self", ".", "tgt_word_emb", "(", "tgt_seq", ")", "\n", "\n", "dec_output_phase", "=", "self", ".", "position_enc", "(", "tgt_seq", ")", "\n", "\n", "pos", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "cuda", ".", "LongTensor", "(", "tgt_pos", ")", ",", "2", ")", "\n", "\n", "\n", "dec_output_phase", "=", "torch", ".", "mul", "(", "pos", ".", "float", "(", ")", ",", "dec_output_phase", ")", "\n", "\n", "\n", "cos", "=", "torch", ".", "cos", "(", "dec_output_phase", ")", "\n", "sin", "=", "torch", ".", "sin", "(", "dec_output_phase", ")", "\n", "\n", "dec_output_real", "=", "dec_output_real_real", "*", "cos", "\n", "dec_output_phase", "=", "dec_output_real_real", "*", "sin", "\n", "\n", "for", "dec_layer", "in", "self", ".", "layer_stack", ":", "\n", "            ", "dec_output_real", ",", "dec_output_phase", ",", "dec_slf_attn", ",", "dec_enc_attn", "=", "dec_layer", "(", "\n", "dec_output_real", ",", "dec_output_phase", ",", "enc_output_real", ",", "enc_output_phase", ",", "\n", "non_pad_mask", "=", "non_pad_mask", ",", "\n", "slf_attn_mask", "=", "slf_attn_mask", ",", "\n", "dec_enc_attn_mask", "=", "dec_enc_attn_mask", ")", "\n", "\n", "if", "return_attns", ":", "\n", "                ", "dec_slf_attn_list", "+=", "[", "dec_slf_attn", "]", "\n", "dec_enc_attn_list", "+=", "[", "dec_enc_attn", "]", "\n", "\n", "", "", "if", "return_attns", ":", "\n", "            ", "return", "dec_output_real", ",", "dec_output_phase", ",", "dec_slf_attn_list", ",", "dec_enc_attn_list", "\n", "", "return", "dec_output_real", ",", "dec_output_phase", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Models.Transformer.__init__": [[173, 213], ["torch.Module.__init__", "Models.Encoder", "Models.Decoder", "torch.Linear", "torch.Linear", "torch.init.xavier_normal_", "torch.init.xavier_normal_"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "n_src_vocab", ",", "n_tgt_vocab", ",", "len_max_seq", ",", "\n", "d_word_vec", "=", "512", ",", "d_model", "=", "512", ",", "d_inner", "=", "2048", ",", "\n", "n_layers", "=", "6", ",", "n_head", "=", "8", ",", "d_k", "=", "64", ",", "d_v", "=", "64", ",", "dropout", "=", "0.1", ",", "\n", "tgt_emb_prj_weight_sharing", "=", "True", ",", "\n", "emb_src_tgt_weight_sharing", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "Encoder", "(", "\n", "n_src_vocab", "=", "n_src_vocab", ",", "len_max_seq", "=", "len_max_seq", ",", "\n", "d_word_vec", "=", "d_word_vec", ",", "d_model", "=", "d_model", ",", "d_inner", "=", "d_inner", ",", "\n", "n_layers", "=", "n_layers", ",", "n_head", "=", "n_head", ",", "d_k", "=", "d_k", ",", "d_v", "=", "d_v", ",", "\n", "dropout", "=", "dropout", ")", "\n", "\n", "self", ".", "decoder", "=", "Decoder", "(", "\n", "n_tgt_vocab", "=", "n_tgt_vocab", ",", "len_max_seq", "=", "len_max_seq", ",", "\n", "d_word_vec", "=", "d_word_vec", ",", "d_model", "=", "d_model", ",", "d_inner", "=", "d_inner", ",", "\n", "n_layers", "=", "n_layers", ",", "n_head", "=", "n_head", ",", "d_k", "=", "d_k", ",", "d_v", "=", "d_v", ",", "\n", "dropout", "=", "dropout", ")", "\n", "\n", "self", ".", "tgt_word_prj", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_tgt_vocab", ",", "bias", "=", "False", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "tgt_word_prj", ".", "weight", ")", "\n", "\n", "assert", "d_model", "==", "d_word_vec", ",", "'To facilitate the residual connections, \\\n         the dimensions of all module outputs shall be the same.'", "\n", "\n", "if", "tgt_emb_prj_weight_sharing", ":", "\n", "            ", "self", ".", "tgt_word_prj", ".", "weight", "=", "self", ".", "decoder", ".", "tgt_word_emb", ".", "weight", "\n", "self", ".", "x_logit_scale", "=", "(", "d_model", "**", "-", "0.5", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "x_logit_scale", "=", "1.", "\n", "\n", "", "if", "emb_src_tgt_weight_sharing", ":", "\n", "# Share the weight matrix between source & target word embeddings", "\n", "            ", "assert", "n_src_vocab", "==", "n_tgt_vocab", ",", "\"To share word embedding table, the vocabulary size of src/tgt shall be the same.\"", "\n", "self", ".", "encoder", ".", "src_word_emb", ".", "weight", "=", "self", ".", "decoder", ".", "tgt_word_emb", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Models.Transformer.forward": [[214, 227], ["Models.Transformer.encoder", "Models.Transformer.decoder", "seq_logit.view", "Models.Transformer.tgt_word_prj", "seq_logit.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "src_seq", ",", "src_pos", ",", "tgt_seq", ",", "tgt_pos", ")", ":", "\n", "\n", "        ", "tgt_seq", ",", "tgt_pos", "=", "tgt_seq", "[", ":", ",", ":", "-", "1", "]", ",", "tgt_pos", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "enc_output_real", ",", "enc_output_phase", ",", "*", "_", "=", "self", ".", "encoder", "(", "src_seq", ",", "src_pos", ")", "\n", "dec_output_real", ",", "dec_output_phase", ",", "*", "_", "=", "self", ".", "decoder", "(", "tgt_seq", ",", "tgt_pos", ",", "src_seq", ",", "enc_output_real", ",", "enc_output_phase", ")", "\n", "\n", "\n", "dec_output", "=", "dec_output_real", "*", "dec_output_real", "+", "dec_output_phase", "*", "dec_output_phase", "\n", "\n", "seq_logit", "=", "self", ".", "tgt_word_prj", "(", "dec_output", ")", "*", "self", ".", "x_logit_scale", "\n", "\n", "return", "seq_logit", ".", "view", "(", "-", "1", ",", "seq_logit", ".", "size", "(", "2", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Models.get_non_pad_mask": [[7, 10], ["seq.ne().type().unsqueeze", "seq.dim", "seq.ne().type", "seq.ne"], "function", ["None"], ["def", "get_non_pad_mask", "(", "seq", ")", ":", "\n", "    ", "assert", "seq", ".", "dim", "(", ")", "==", "2", "\n", "return", "seq", ".", "ne", "(", "Constants", ".", "PAD", ")", ".", "type", "(", "torch", ".", "float", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "def", "get_sinusoid_encoding_table", "(", "n_src_vocab", ",", "d_hid", ",", "padding_idx", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Models.get_sinusoid_encoding_table": [[10, 25], ["numpy.array", "torch.FloatTensor", "torch.FloatTensor", "numpy.power", "Models.get_sinusoid_encoding_table.cal_angle"], "function", ["None"], ["", "def", "get_sinusoid_encoding_table", "(", "n_src_vocab", ",", "d_hid", ",", "padding_idx", "=", "None", ")", ":", "\n", "\n", "    ", "def", "cal_angle", "(", "position", ",", "hid_idx", ")", ":", "\n", "        ", "return", "1", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "hid_idx", "//", "2", ")", "/", "d_hid", ")", "\n", "\n", "", "def", "get_posi_angle_vec", "(", "position", ")", ":", "\n", "        ", "return", "[", "cal_angle", "(", "position", ",", "hid_j", ")", "for", "hid_j", "in", "range", "(", "d_hid", ")", "]", "\n", "\n", "", "sinusoid_table", "=", "np", ".", "array", "(", "[", "get_posi_angle_vec", "(", "pos_i", ")", "for", "pos_i", "in", "range", "(", "n_src_vocab", ")", "]", ")", "\n", "\n", "\n", "if", "padding_idx", "is", "not", "None", ":", "\n", "        ", "sinusoid_table", "[", "padding_idx", "]", "=", "0.", "\n", "\n", "", "return", "torch", ".", "FloatTensor", "(", "sinusoid_table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Models.get_attn_key_pad_mask": [[26, 33], ["seq_q.size", "seq_k.eq", "padding_mask.unsqueeze().expand.unsqueeze().expand", "padding_mask.unsqueeze().expand.unsqueeze"], "function", ["None"], ["", "def", "get_attn_key_pad_mask", "(", "seq_k", ",", "seq_q", ")", ":", "\n", "\n", "    ", "len_q", "=", "seq_q", ".", "size", "(", "1", ")", "\n", "padding_mask", "=", "seq_k", ".", "eq", "(", "Constants", ".", "PAD", ")", "\n", "padding_mask", "=", "padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "len_q", ",", "-", "1", ")", "# b x lq x lk", "\n", "\n", "return", "padding_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Models.get_subsequent_mask": [[34, 42], ["seq.size", "torch.triu", "torch.triu", "subsequent_mask.unsqueeze().expand.unsqueeze().expand", "torch.ones", "torch.ones", "subsequent_mask.unsqueeze().expand.unsqueeze"], "function", ["None"], ["", "def", "get_subsequent_mask", "(", "seq", ")", ":", "\n", "\n", "    ", "sz_b", ",", "len_s", "=", "seq", ".", "size", "(", ")", "\n", "subsequent_mask", "=", "torch", ".", "triu", "(", "\n", "torch", ".", "ones", "(", "(", "len_s", ",", "len_s", ")", ",", "device", "=", "seq", ".", "device", ",", "dtype", "=", "torch", ".", "uint8", ")", ",", "diagonal", "=", "1", ")", "\n", "subsequent_mask", "=", "subsequent_mask", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "sz_b", ",", "-", "1", ",", "-", "1", ")", "# b x ls x ls", "\n", "\n", "return", "subsequent_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Translator.Translator.__init__": [[13, 46], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "transformer.Models.Transformer", "model.to.to.load_state_dict", "print", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "model.to.to.to", "Translator.Translator.model.eval"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.eval"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "opt", ".", "cuda", "else", "'cpu'", ")", "\n", "\n", "# checkpoint = torch.load(opt.model)", "\n", "checkpoint", "=", "torch", ".", "load", "(", "opt", ".", "model", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "model_opt", "=", "checkpoint", "[", "'settings'", "]", "\n", "self", ".", "model_opt", "=", "model_opt", "\n", "\n", "model", "=", "Transformer", "(", "\n", "model_opt", ".", "src_vocab_size", ",", "\n", "model_opt", ".", "tgt_vocab_size", ",", "\n", "model_opt", ".", "max_token_seq_len", ",", "\n", "tgt_emb_prj_weight_sharing", "=", "model_opt", ".", "proj_share_weight", ",", "\n", "emb_src_tgt_weight_sharing", "=", "model_opt", ".", "embs_share_weight", ",", "\n", "d_k", "=", "model_opt", ".", "d_k", ",", "\n", "d_v", "=", "model_opt", ".", "d_v", ",", "\n", "d_model", "=", "model_opt", ".", "d_model", ",", "\n", "d_word_vec", "=", "model_opt", ".", "d_word_vec", ",", "\n", "d_inner", "=", "model_opt", ".", "d_inner_hid", ",", "\n", "n_layers", "=", "model_opt", ".", "n_layers", ",", "\n", "n_head", "=", "model_opt", ".", "n_head", ",", "\n", "dropout", "=", "model_opt", ".", "dropout", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "print", "(", "'[Info] Trained model state loaded.'", ")", "\n", "\n", "model", ".", "word_prob_prj", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Translator.Translator.translate_batch": [[47, 173], ["Translator.Translator.translate_batch.collect_hypothesis_and_scores"], "methods", ["None"], ["", "def", "translate_batch", "(", "self", ",", "src_seq", ",", "src_pos", ")", ":", "\n", "        ", "''' Translation work in one batch '''", "\n", "\n", "def", "get_inst_idx_to_tensor_position_map", "(", "inst_idx_list", ")", ":", "\n", "            ", "''' Indicate the position of an instance in a tensor. '''", "\n", "return", "{", "inst_idx", ":", "tensor_position", "for", "tensor_position", ",", "inst_idx", "in", "enumerate", "(", "inst_idx_list", ")", "}", "\n", "\n", "", "def", "collect_active_part", "(", "beamed_tensor", ",", "curr_active_inst_idx", ",", "n_prev_active_inst", ",", "n_bm", ")", ":", "\n", "            ", "''' Collect tensor parts associated to active instances. '''", "\n", "\n", "_", ",", "*", "d_hs", "=", "beamed_tensor", ".", "size", "(", ")", "\n", "n_curr_active_inst", "=", "len", "(", "curr_active_inst_idx", ")", "\n", "new_shape", "=", "(", "n_curr_active_inst", "*", "n_bm", ",", "*", "d_hs", ")", "\n", "\n", "beamed_tensor", "=", "beamed_tensor", ".", "view", "(", "n_prev_active_inst", ",", "-", "1", ")", "\n", "beamed_tensor", "=", "beamed_tensor", ".", "index_select", "(", "0", ",", "curr_active_inst_idx", ")", "\n", "beamed_tensor", "=", "beamed_tensor", ".", "view", "(", "*", "new_shape", ")", "\n", "\n", "return", "beamed_tensor", "\n", "\n", "", "def", "collate_active_info", "(", "\n", "src_seq", ",", "src_enc_real", ",", "src_enc_phase", ",", "inst_idx_to_position_map", ",", "active_inst_idx_list", ")", ":", "\n", "# Sentences which are still active are collected,", "\n", "# so the decoder will not run on completed sentences.", "\n", "            ", "n_prev_active_inst", "=", "len", "(", "inst_idx_to_position_map", ")", "\n", "active_inst_idx", "=", "[", "inst_idx_to_position_map", "[", "k", "]", "for", "k", "in", "active_inst_idx_list", "]", "\n", "active_inst_idx", "=", "torch", ".", "LongTensor", "(", "active_inst_idx", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "active_src_seq", "=", "collect_active_part", "(", "src_seq", ",", "active_inst_idx", ",", "n_prev_active_inst", ",", "n_bm", ")", "\n", "active_src_enc_real", "=", "collect_active_part", "(", "src_enc_real", ",", "active_inst_idx", ",", "n_prev_active_inst", ",", "n_bm", ")", "\n", "active_src_enc_phase", "=", "collect_active_part", "(", "src_enc_phase", ",", "active_inst_idx", ",", "n_prev_active_inst", ",", "n_bm", ")", "\n", "active_inst_idx_to_position_map", "=", "get_inst_idx_to_tensor_position_map", "(", "active_inst_idx_list", ")", "\n", "\n", "return", "active_src_seq", ",", "active_src_enc_real", ",", "active_src_enc_phase", ",", "active_inst_idx_to_position_map", "\n", "\n", "", "def", "beam_decode_step", "(", "\n", "inst_dec_beams", ",", "len_dec_seq", ",", "src_seq", ",", "enc_output_real", ",", "enc_output_phase", ",", "inst_idx_to_position_map", ",", "n_bm", ")", ":", "\n", "            ", "''' Decode and update beam status, and then return active beam idx '''", "\n", "\n", "def", "prepare_beam_dec_seq", "(", "inst_dec_beams", ",", "len_dec_seq", ")", ":", "\n", "                ", "dec_partial_seq", "=", "[", "b", ".", "get_current_state", "(", ")", "for", "b", "in", "inst_dec_beams", "if", "not", "b", ".", "done", "]", "\n", "dec_partial_seq", "=", "torch", ".", "stack", "(", "dec_partial_seq", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "dec_partial_seq", "=", "dec_partial_seq", ".", "view", "(", "-", "1", ",", "len_dec_seq", ")", "\n", "return", "dec_partial_seq", "\n", "\n", "", "def", "prepare_beam_dec_pos", "(", "len_dec_seq", ",", "n_active_inst", ",", "n_bm", ")", ":", "\n", "                ", "dec_partial_pos", "=", "torch", ".", "arange", "(", "1", ",", "len_dec_seq", "+", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "device", ")", "\n", "dec_partial_pos", "=", "dec_partial_pos", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "n_active_inst", "*", "n_bm", ",", "1", ")", "\n", "return", "dec_partial_pos", "\n", "\n", "", "def", "predict_word", "(", "dec_seq", ",", "dec_pos", ",", "src_seq", ",", "enc_output_real", ",", "enc_output_phase", ",", "n_active_inst", ",", "n_bm", ")", ":", "\n", "                ", "dec_output_real", ",", "dec_output_phase", ",", "*", "_", "=", "self", ".", "model", ".", "decoder", "(", "dec_seq", ",", "dec_pos", ",", "src_seq", ",", "enc_output_real", ",", "enc_output_phase", ")", "\n", "dec_output", "=", "dec_output_real", "*", "dec_output_real", "+", "dec_output_phase", "*", "dec_output_phase", "\n", "\n", "\n", "dec_output", "=", "dec_output", "[", ":", ",", "-", "1", ",", ":", "]", "# Pick the last step: (bh * bm) * d_h", "\n", "word_prob", "=", "F", ".", "log_softmax", "(", "self", ".", "model", ".", "tgt_word_prj", "(", "dec_output", ")", ",", "dim", "=", "1", ")", "\n", "word_prob", "=", "word_prob", ".", "view", "(", "n_active_inst", ",", "n_bm", ",", "-", "1", ")", "\n", "\n", "return", "word_prob", "\n", "\n", "", "def", "collect_active_inst_idx_list", "(", "inst_beams", ",", "word_prob", ",", "inst_idx_to_position_map", ")", ":", "\n", "                ", "active_inst_idx_list", "=", "[", "]", "\n", "for", "inst_idx", ",", "inst_position", "in", "inst_idx_to_position_map", ".", "items", "(", ")", ":", "\n", "                    ", "is_inst_complete", "=", "inst_beams", "[", "inst_idx", "]", ".", "advance", "(", "word_prob", "[", "inst_position", "]", ")", "\n", "if", "not", "is_inst_complete", ":", "\n", "                        ", "active_inst_idx_list", "+=", "[", "inst_idx", "]", "\n", "\n", "", "", "return", "active_inst_idx_list", "\n", "\n", "", "n_active_inst", "=", "len", "(", "inst_idx_to_position_map", ")", "\n", "\n", "dec_seq", "=", "prepare_beam_dec_seq", "(", "inst_dec_beams", ",", "len_dec_seq", ")", "\n", "dec_pos", "=", "prepare_beam_dec_pos", "(", "len_dec_seq", ",", "n_active_inst", ",", "n_bm", ")", "\n", "word_prob", "=", "predict_word", "(", "dec_seq", ",", "dec_pos", ",", "src_seq", ",", "enc_output_real", ",", "enc_output_phase", ",", "n_active_inst", ",", "n_bm", ")", "\n", "\n", "# Update the beam with predicted word prob information and collect incomplete instances", "\n", "active_inst_idx_list", "=", "collect_active_inst_idx_list", "(", "\n", "inst_dec_beams", ",", "word_prob", ",", "inst_idx_to_position_map", ")", "\n", "\n", "return", "active_inst_idx_list", "\n", "\n", "", "def", "collect_hypothesis_and_scores", "(", "inst_dec_beams", ",", "n_best", ")", ":", "\n", "            ", "all_hyp", ",", "all_scores", "=", "[", "]", ",", "[", "]", "\n", "for", "inst_idx", "in", "range", "(", "len", "(", "inst_dec_beams", ")", ")", ":", "\n", "                ", "scores", ",", "tail_idxs", "=", "inst_dec_beams", "[", "inst_idx", "]", ".", "sort_scores", "(", ")", "\n", "all_scores", "+=", "[", "scores", "[", ":", "n_best", "]", "]", "\n", "\n", "hyps", "=", "[", "inst_dec_beams", "[", "inst_idx", "]", ".", "get_hypothesis", "(", "i", ")", "for", "i", "in", "tail_idxs", "[", ":", "n_best", "]", "]", "\n", "all_hyp", "+=", "[", "hyps", "]", "\n", "", "return", "all_hyp", ",", "all_scores", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "#-- Encode", "\n", "            ", "src_seq", ",", "src_pos", "=", "src_seq", ".", "to", "(", "self", ".", "device", ")", ",", "src_pos", ".", "to", "(", "self", ".", "device", ")", "\n", "src_enc_real", ",", "src_enc_phase", ",", "*", "_", "=", "self", ".", "model", ".", "encoder", "(", "src_seq", ",", "src_pos", ")", "\n", "\n", "#-- Repeat data for beam search", "\n", "n_bm", "=", "self", ".", "opt", ".", "beam_size", "\n", "n_inst", ",", "len_s", ",", "d_h", "=", "src_enc_real", ".", "size", "(", ")", "\n", "\n", "src_seq", "=", "src_seq", ".", "repeat", "(", "1", ",", "n_bm", ")", ".", "view", "(", "n_inst", "*", "n_bm", ",", "len_s", ")", "\n", "src_enc_real", "=", "src_enc_real", ".", "repeat", "(", "1", ",", "n_bm", ",", "1", ")", ".", "view", "(", "n_inst", "*", "n_bm", ",", "len_s", ",", "d_h", ")", "\n", "src_enc_phase", "=", "src_enc_phase", ".", "repeat", "(", "1", ",", "n_bm", ",", "1", ")", ".", "view", "(", "n_inst", "*", "n_bm", ",", "len_s", ",", "d_h", ")", "\n", "\n", "#-- Prepare beams", "\n", "inst_dec_beams", "=", "[", "Beam", "(", "n_bm", ",", "device", "=", "self", ".", "device", ")", "for", "_", "in", "range", "(", "n_inst", ")", "]", "\n", "\n", "#-- Bookkeeping for active or not", "\n", "active_inst_idx_list", "=", "list", "(", "range", "(", "n_inst", ")", ")", "\n", "inst_idx_to_position_map", "=", "get_inst_idx_to_tensor_position_map", "(", "active_inst_idx_list", ")", "\n", "print", "(", "self", ".", "model_opt", ".", "max_token_seq_len", ")", "\n", "#-- Decode", "\n", "for", "len_dec_seq", "in", "range", "(", "1", ",", "self", ".", "model_opt", ".", "max_token_seq_len", "+", "1", ")", ":", "\n", "\n", "                ", "active_inst_idx_list", "=", "beam_decode_step", "(", "\n", "inst_dec_beams", ",", "len_dec_seq", ",", "src_seq", ",", "src_enc_real", ",", "src_enc_phase", ",", "inst_idx_to_position_map", ",", "n_bm", ")", "\n", "if", "not", "active_inst_idx_list", ":", "\n", "                    ", "break", "# all instances have finished their path to <EOS>", "\n", "\n", "", "src_seq", ",", "src_enc_real", ",", "src_enc_phase", ",", "inst_idx_to_position_map", "=", "collate_active_info", "(", "\n", "src_seq", ",", "src_enc_real", ",", "src_enc_phase", ",", "inst_idx_to_position_map", ",", "active_inst_idx_list", ")", "\n", "\n", "", "", "batch_hyp", ",", "batch_scores", "=", "collect_hypothesis_and_scores", "(", "inst_dec_beams", ",", "self", ".", "opt", ".", "n_best", ")", "\n", "\n", "return", "batch_hyp", ",", "batch_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Optim.ScheduledOptim.__init__": [[5, 10], ["numpy.power"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "d_model", ",", "n_warmup_steps", ")", ":", "\n", "        ", "self", ".", "_optimizer", "=", "optimizer", "\n", "self", ".", "n_warmup_steps", "=", "n_warmup_steps", "\n", "self", ".", "n_current_steps", "=", "0", "\n", "self", ".", "init_lr", "=", "np", ".", "power", "(", "d_model", ",", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Optim.ScheduledOptim.step_and_update_lr": [[11, 15], ["Optim.ScheduledOptim._update_learning_rate", "Optim.ScheduledOptim._optimizer.step"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Optim.ScheduledOptim._update_learning_rate"], ["", "def", "step_and_update_lr", "(", "self", ")", ":", "\n", "        ", "\"Step with the inner optimizer\"", "\n", "self", ".", "_update_learning_rate", "(", ")", "\n", "self", ".", "_optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Optim.ScheduledOptim.zero_grad": [[16, 19], ["Optim.ScheduledOptim._optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Optim.ScheduledOptim.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "\"Zero out the gradients by the inner optimizer\"", "\n", "self", ".", "_optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Optim.ScheduledOptim._get_lr_scale": [[20, 24], ["numpy.min", "numpy.power", "numpy.power"], "methods", ["None"], ["", "def", "_get_lr_scale", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "min", "(", "[", "\n", "np", ".", "power", "(", "self", ".", "n_current_steps", ",", "-", "0.5", ")", ",", "\n", "np", ".", "power", "(", "self", ".", "n_warmup_steps", ",", "-", "1.5", ")", "*", "self", ".", "n_current_steps", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Optim.ScheduledOptim._update_learning_rate": [[25, 33], ["Optim.ScheduledOptim._get_lr_scale"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Optim.ScheduledOptim._get_lr_scale"], ["", "def", "_update_learning_rate", "(", "self", ")", ":", "\n", "        ", "''' Learning rate scheduling per step '''", "\n", "\n", "self", ".", "n_current_steps", "+=", "1", "\n", "lr", "=", "self", ".", "init_lr", "*", "self", ".", "_get_lr_scale", "(", ")", "\n", "\n", "for", "param_group", "in", "self", ".", "_optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Beam.Beam.__init__": [[9, 24], ["torch.zeros", "torch.full"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "device", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "_done", "=", "False", "\n", "\n", "# The score for each translation on the beam.", "\n", "self", ".", "scores", "=", "torch", ".", "zeros", "(", "(", "size", ",", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "self", ".", "all_scores", "=", "[", "]", "\n", "\n", "# The backpointers at each time-step.", "\n", "self", ".", "prev_ks", "=", "[", "]", "\n", "\n", "# The outputs at each time-step.", "\n", "self", ".", "next_ys", "=", "[", "torch", ".", "full", "(", "(", "size", ",", ")", ",", "Constants", ".", "PAD", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "]", "\n", "self", ".", "next_ys", "[", "0", "]", "[", "0", "]", "=", "Constants", ".", "BOS", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Beam.Beam.get_current_state": [[25, 28], ["Beam.Beam.get_tentative_hypothesis"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Beam.Beam.get_tentative_hypothesis"], ["", "def", "get_current_state", "(", "self", ")", ":", "\n", "        ", "\"Get the outputs for the current timestep.\"", "\n", "return", "self", ".", "get_tentative_hypothesis", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Beam.Beam.get_current_origin": [[29, 32], ["None"], "methods", ["None"], ["", "def", "get_current_origin", "(", "self", ")", ":", "\n", "        ", "\"Get the backpointers for the current timestep.\"", "\n", "return", "self", ".", "prev_ks", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Beam.Beam.done": [[33, 36], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "done", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_done", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Beam.Beam.advance": [[37, 67], ["word_prob.size", "beam_lk.view", "beam_lk.view.topk", "beam_lk.view.topk", "Beam.Beam.all_scores.append", "Beam.Beam.prev_ks.append", "Beam.Beam.next_ys.append", "len", "[].item", "Beam.Beam.all_scores.append", "Beam.Beam.scores.unsqueeze().expand_as", "Beam.Beam.scores.unsqueeze"], "methods", ["None"], ["", "def", "advance", "(", "self", ",", "word_prob", ")", ":", "\n", "        ", "\"Update beam status and check if finished or not.\"", "\n", "num_words", "=", "word_prob", ".", "size", "(", "1", ")", "\n", "\n", "# Sum the previous scores.", "\n", "if", "len", "(", "self", ".", "prev_ks", ")", ">", "0", ":", "\n", "            ", "beam_lk", "=", "word_prob", "+", "self", ".", "scores", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "word_prob", ")", "\n", "", "else", ":", "\n", "            ", "beam_lk", "=", "word_prob", "[", "0", "]", "\n", "\n", "", "flat_beam_lk", "=", "beam_lk", ".", "view", "(", "-", "1", ")", "\n", "\n", "best_scores", ",", "best_scores_id", "=", "flat_beam_lk", ".", "topk", "(", "self", ".", "size", ",", "0", ",", "True", ",", "True", ")", "# 1st sort", "\n", "best_scores", ",", "best_scores_id", "=", "flat_beam_lk", ".", "topk", "(", "self", ".", "size", ",", "0", ",", "True", ",", "True", ")", "# 2nd sort", "\n", "\n", "self", ".", "all_scores", ".", "append", "(", "self", ".", "scores", ")", "\n", "self", ".", "scores", "=", "best_scores", "\n", "\n", "# bestScoresId is flattened as a (beam x word) array,", "\n", "# so we need to calculate which word and beam each score came from", "\n", "prev_k", "=", "best_scores_id", "/", "num_words", "\n", "self", ".", "prev_ks", ".", "append", "(", "prev_k", ")", "\n", "self", ".", "next_ys", ".", "append", "(", "best_scores_id", "-", "prev_k", "*", "num_words", ")", "\n", "\n", "# End condition is when top-of-beam is EOS.", "\n", "if", "self", ".", "next_ys", "[", "-", "1", "]", "[", "0", "]", ".", "item", "(", ")", "==", "Constants", ".", "EOS", ":", "\n", "            ", "self", ".", "_done", "=", "True", "\n", "self", ".", "all_scores", ".", "append", "(", "self", ".", "scores", ")", "\n", "\n", "", "return", "self", ".", "_done", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Beam.Beam.sort_scores": [[68, 71], ["torch.sort"], "methods", ["None"], ["", "def", "sort_scores", "(", "self", ")", ":", "\n", "        ", "\"Sort the scores.\"", "\n", "return", "torch", ".", "sort", "(", "self", ".", "scores", ",", "0", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Beam.Beam.get_the_best_score_and_idx": [[72, 76], ["Beam.Beam.sort_scores"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Beam.Beam.sort_scores"], ["", "def", "get_the_best_score_and_idx", "(", "self", ")", ":", "\n", "        ", "\"Get the score of the best in the beam.\"", "\n", "scores", ",", "ids", "=", "self", ".", "sort_scores", "(", ")", "\n", "return", "scores", "[", "1", "]", ",", "ids", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Beam.Beam.get_tentative_hypothesis": [[77, 89], ["len", "Beam.Beam.next_ys[].unsqueeze", "Beam.Beam.sort_scores", "torch.LongTensor", "Beam.Beam.get_hypothesis"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Beam.Beam.sort_scores", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Beam.Beam.get_hypothesis"], ["", "def", "get_tentative_hypothesis", "(", "self", ")", ":", "\n", "        ", "\"Get the decoded sequence for the current timestep.\"", "\n", "\n", "if", "len", "(", "self", ".", "next_ys", ")", "==", "1", ":", "\n", "            ", "dec_seq", "=", "self", ".", "next_ys", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "keys", "=", "self", ".", "sort_scores", "(", ")", "\n", "hyps", "=", "[", "self", ".", "get_hypothesis", "(", "k", ")", "for", "k", "in", "keys", "]", "\n", "hyps", "=", "[", "[", "Constants", ".", "BOS", "]", "+", "h", "for", "h", "in", "hyps", "]", "\n", "dec_seq", "=", "torch", ".", "LongTensor", "(", "hyps", ")", "\n", "\n", "", "return", "dec_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Beam.Beam.get_hypothesis": [[90, 98], ["range", "list", "hyp.append", "map", "len", "x.item"], "methods", ["None"], ["", "def", "get_hypothesis", "(", "self", ",", "k", ")", ":", "\n", "        ", "\"\"\" Walk back to construct the full hypothesis. \"\"\"", "\n", "hyp", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "self", ".", "prev_ks", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "hyp", ".", "append", "(", "self", ".", "next_ys", "[", "j", "+", "1", "]", "[", "k", "]", ")", "\n", "k", "=", "self", ".", "prev_ks", "[", "j", "]", "[", "k", "]", "\n", "\n", "", "return", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "item", "(", ")", ",", "hyp", "[", ":", ":", "-", "1", "]", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.SubLayers.PositionwiseFeedForward.__init__": [[10, 21], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_in", ",", "d_hid", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1_real", "=", "nn", ".", "Conv1d", "(", "d_in", ",", "d_hid", ",", "1", ")", "# position-wise", "\n", "self", ".", "w_1_phase", "=", "nn", ".", "Conv1d", "(", "d_in", ",", "d_hid", ",", "1", ")", "# position-wise", "\n", "\n", "\n", "self", ".", "w_2_real", "=", "nn", ".", "Conv1d", "(", "d_hid", ",", "d_in", ",", "1", ")", "# position-wise", "\n", "self", ".", "w_2_phase", "=", "nn", ".", "Conv1d", "(", "d_hid", ",", "d_in", ",", "1", ")", "# position-wise", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_in", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.SubLayers.PositionwiseFeedForward.forward": [[22, 47], ["x_real.transpose", "x_phase.transpose", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "SubLayers.PositionwiseFeedForward.transpose", "SubLayers.PositionwiseFeedForward.transpose", "SubLayers.PositionwiseFeedForward.dropout", "SubLayers.PositionwiseFeedForward.dropout", "SubLayers.PositionwiseFeedForward.layer_norm", "SubLayers.PositionwiseFeedForward.layer_norm", "SubLayers.PositionwiseFeedForward.w_2_real", "SubLayers.PositionwiseFeedForward.w_2_phase", "SubLayers.PositionwiseFeedForward.w_2_real", "SubLayers.PositionwiseFeedForward.w_2_phase", "SubLayers.PositionwiseFeedForward.w_1_real", "SubLayers.PositionwiseFeedForward.w_1_phase", "SubLayers.PositionwiseFeedForward.w_1_real", "SubLayers.PositionwiseFeedForward.w_1_phase"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_real", ",", "x_phase", ")", ":", "\n", "        ", "residual_real", "=", "x_real", "\n", "residual_phase", "=", "x_phase", "\n", "cnn_real", "=", "x_real", ".", "transpose", "(", "1", ",", "2", ")", "\n", "cnn_phase", "=", "x_phase", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "\n", "w1_real", "=", "F", ".", "relu", "(", "self", ".", "w_1_real", "(", "cnn_real", ")", "-", "self", ".", "w_1_phase", "(", "cnn_phase", ")", ")", "\n", "w1_phase", "=", "F", ".", "relu", "(", "self", ".", "w_1_real", "(", "cnn_phase", ")", "+", "self", ".", "w_1_phase", "(", "cnn_real", ")", ")", "\n", "\n", "\n", "output_real", "=", "self", ".", "w_2_real", "(", "w1_real", ")", "-", "self", ".", "w_2_phase", "(", "w1_phase", ")", "\n", "output_phase", "=", "self", ".", "w_2_real", "(", "w1_phase", ")", "+", "self", ".", "w_2_phase", "(", "w1_real", ")", "\n", "\n", "\n", "output_real", "=", "output_real", ".", "transpose", "(", "1", ",", "2", ")", "\n", "output_phase", "=", "output_phase", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "output_real", "=", "self", ".", "dropout", "(", "output_real", ")", "\n", "output_phase", "=", "self", ".", "dropout", "(", "output_phase", ")", "\n", "\n", "\n", "output_real", "=", "self", ".", "layer_norm", "(", "output_real", "+", "residual_real", ")", "\n", "output_phase", "=", "self", ".", "layer_norm", "(", "output_phase", "+", "residual_phase", ")", "\n", "return", "output_real", ",", "output_phase", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.SubLayers.MultiHeadAttention.__init__": [[53, 75], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "transformer.Modules.ScaledDotProductAttention", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Dropout", "torch.Dropout", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "\n", "self", ".", "w_qs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ")", "\n", "self", ".", "w_ks", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ")", "\n", "self", ".", "w_vs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_v", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_qs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_ks", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "w_vs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_v", ")", ")", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "temperature", "=", "np", ".", "power", "(", "d_k", "*", "2", ",", "0.5", ")", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_v", ",", "d_model", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.SubLayers.MultiHeadAttention.forward": [[77, 132], ["q_real.permute().contiguous().view.permute().contiguous().view.size", "k_real.permute().contiguous().view.permute().contiguous().view.size", "v_real.permute().contiguous().view.permute().contiguous().view.size", "q_phase.permute().contiguous().view.permute().contiguous().view.size", "k_phase.permute().contiguous().view.permute().contiguous().view.size", "v_phase.permute().contiguous().view.permute().contiguous().view.size", "SubLayers.MultiHeadAttention.w_qs().view", "SubLayers.MultiHeadAttention.w_ks().view", "SubLayers.MultiHeadAttention.w_vs().view", "SubLayers.MultiHeadAttention.w_qs().view", "SubLayers.MultiHeadAttention.w_ks().view", "SubLayers.MultiHeadAttention.w_vs().view", "q_real.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "k_real.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "v_real.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "q_phase.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "k_phase.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "v_phase.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "mask.repeat.repeat.repeat", "SubLayers.MultiHeadAttention.attention", "SubLayers.MultiHeadAttention.view", "SubLayers.MultiHeadAttention.permute().contiguous().view", "SubLayers.MultiHeadAttention.view", "SubLayers.MultiHeadAttention.permute().contiguous().view", "SubLayers.MultiHeadAttention.dropout", "SubLayers.MultiHeadAttention.layer_norm", "SubLayers.MultiHeadAttention.dropout", "SubLayers.MultiHeadAttention.layer_norm", "SubLayers.MultiHeadAttention.fc", "SubLayers.MultiHeadAttention.fc", "SubLayers.MultiHeadAttention.w_qs", "SubLayers.MultiHeadAttention.w_ks", "SubLayers.MultiHeadAttention.w_vs", "SubLayers.MultiHeadAttention.w_qs", "SubLayers.MultiHeadAttention.w_ks", "SubLayers.MultiHeadAttention.w_vs", "q_real.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "k_real.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "v_real.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "q_phase.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "k_phase.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "v_phase.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "SubLayers.MultiHeadAttention.permute().contiguous", "SubLayers.MultiHeadAttention.permute().contiguous", "q_real.permute().contiguous().view.permute().contiguous().view.permute", "k_real.permute().contiguous().view.permute().contiguous().view.permute", "v_real.permute().contiguous().view.permute().contiguous().view.permute", "q_phase.permute().contiguous().view.permute().contiguous().view.permute", "k_phase.permute().contiguous().view.permute().contiguous().view.permute", "v_phase.permute().contiguous().view.permute().contiguous().view.permute", "SubLayers.MultiHeadAttention.permute", "SubLayers.MultiHeadAttention.permute"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.attention_complex.attention"], ["", "def", "forward", "(", "self", ",", "q_real", ",", "k_real", ",", "v_real", ",", "q_phase", ",", "k_phase", ",", "v_phase", ",", "mask", "=", "None", ")", ":", "\n", "\n", "        ", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "\n", "sz_b_real", ",", "len_q_real", ",", "_", "=", "q_real", ".", "size", "(", ")", "\n", "sz_b_real", ",", "len_k_real", ",", "_", "=", "k_real", ".", "size", "(", ")", "\n", "sz_b_real", ",", "len_v_real", ",", "_", "=", "v_real", ".", "size", "(", ")", "\n", "\n", "sz_b_phase", ",", "len_q_phase", ",", "_", "=", "q_phase", ".", "size", "(", ")", "\n", "sz_b_phase", ",", "len_k_phase", ",", "_", "=", "k_phase", ".", "size", "(", ")", "\n", "sz_b_phase", ",", "len_v_phase", ",", "_", "=", "v_phase", ".", "size", "(", ")", "\n", "\n", "residual_real", "=", "q_real", "\n", "residual_phase", "=", "q_phase", "\n", "\n", "q_real", "=", "self", ".", "w_qs", "(", "q_real", ")", ".", "view", "(", "sz_b_real", ",", "len_q_real", ",", "n_head", ",", "d_k", ")", "\n", "k_real", "=", "self", ".", "w_ks", "(", "k_real", ")", ".", "view", "(", "sz_b_real", ",", "len_k_real", ",", "n_head", ",", "d_k", ")", "\n", "v_real", "=", "self", ".", "w_vs", "(", "v_real", ")", ".", "view", "(", "sz_b_real", ",", "len_v_real", ",", "n_head", ",", "d_v", ")", "\n", "\n", "q_phase", "=", "self", ".", "w_qs", "(", "q_phase", ")", ".", "view", "(", "sz_b_phase", ",", "len_q_phase", ",", "n_head", ",", "d_k", ")", "\n", "k_phase", "=", "self", ".", "w_ks", "(", "k_phase", ")", ".", "view", "(", "sz_b_phase", ",", "len_k_phase", ",", "n_head", ",", "d_k", ")", "\n", "v_phase", "=", "self", ".", "w_vs", "(", "v_phase", ")", ".", "view", "(", "sz_b_phase", ",", "len_v_phase", ",", "n_head", ",", "d_v", ")", "\n", "\n", "\n", "\n", "q_real", "=", "q_real", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_q_real", ",", "d_k", ")", "# (n*b) x lq x dk", "\n", "k_real", "=", "k_real", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_k_real", ",", "d_k", ")", "# (n*b) x lk x dk", "\n", "v_real", "=", "v_real", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_v_real", ",", "d_v", ")", "# (n*b) x lv x dv", "\n", "\n", "\n", "q_phase", "=", "q_phase", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_q_phase", ",", "d_k", ")", "# (n*b) x lq x dk", "\n", "k_phase", "=", "k_phase", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_k_phase", ",", "d_k", ")", "# (n*b) x lk x dk", "\n", "v_phase", "=", "v_phase", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_v_phase", ",", "d_v", ")", "# (n*b) x lv x dv", "\n", "\n", "\n", "\n", "mask", "=", "mask", ".", "repeat", "(", "n_head", ",", "1", ",", "1", ")", "# (n*b) x .. x ..", "\n", "\n", "\n", "output_real", ",", "output_phase", ",", "attn", "=", "self", ".", "attention", "(", "q_real", ",", "k_real", ",", "v_real", ",", "q_phase", ",", "k_phase", ",", "v_phase", ",", "mask", "=", "mask", ",", "continue_complex", "=", "False", ")", "\n", "\n", "output_real", "=", "output_real", ".", "view", "(", "n_head", ",", "sz_b_real", ",", "len_q_real", ",", "d_v", ")", "\n", "output_real", "=", "output_real", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "sz_b_real", ",", "len_q_real", ",", "-", "1", ")", "# b x lq x (n*dv)", "\n", "\n", "\n", "output_phase", "=", "output_phase", ".", "view", "(", "n_head", ",", "sz_b_phase", ",", "len_q_phase", ",", "d_v", ")", "\n", "output_phase", "=", "output_phase", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "sz_b_phase", ",", "len_q_phase", ",", "-", "1", ")", "# b x lq x (n*dv)", "\n", "\n", "output_real", "=", "self", ".", "dropout", "(", "self", ".", "fc", "(", "output_real", ")", ")", "\n", "output_real", "=", "self", ".", "layer_norm", "(", "output_real", "+", "residual_real", ")", "\n", "\n", "output_phase", "=", "self", ".", "dropout", "(", "self", ".", "fc", "(", "output_phase", ")", ")", "\n", "output_phase", "=", "self", ".", "layer_norm", "(", "output_phase", "+", "residual_phase", ")", "\n", "\n", "return", "output_real", ",", "output_phase", ",", "attn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.PositionalEmbedding.__init__": [[16, 23], ["torch.Module.__init__", "mem_transformer.PositionalEmbedding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "demb", ")", ":", "\n", "        ", "super", "(", "PositionalEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "demb", "=", "demb", "\n", "\n", "inv_freq", "=", "1", "/", "(", "10000", "**", "(", "torch", ".", "arange", "(", "0.0", ",", "demb", ",", "2.0", ")", "/", "demb", ")", ")", "\n", "self", ".", "register_buffer", "(", "'inv_freq'", ",", "inv_freq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.PositionalEmbedding.forward": [[24, 32], ["torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pos_emb[].expand", "torch.ger.sin", "torch.ger.sin", "torch.ger.sin", "torch.ger.cos", "torch.ger.cos", "torch.ger.cos"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pos_seq", ",", "bsz", "=", "None", ")", ":", "\n", "        ", "sinusoid_inp", "=", "torch", ".", "ger", "(", "pos_seq", ",", "self", ".", "inv_freq", ")", "\n", "pos_emb", "=", "torch", ".", "cat", "(", "[", "sinusoid_inp", ".", "sin", "(", ")", ",", "sinusoid_inp", ".", "cos", "(", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "bsz", "is", "not", "None", ":", "\n", "            ", "return", "pos_emb", "[", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "-", "1", ",", "bsz", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "pos_emb", "[", ":", ",", "None", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.PositionwiseFF.__init__": [[35, 52], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "dropout", ",", "pre_lnorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "PositionwiseFF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_inner", "=", "d_inner", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "CoreNet", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "d_model", ",", "d_inner", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "d_inner", ",", "d_model", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", ")", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.PositionwiseFF.forward": [[53, 68], ["mem_transformer.PositionwiseFF.CoreNet", "mem_transformer.PositionwiseFF.CoreNet", "mem_transformer.PositionwiseFF.layer_norm", "mem_transformer.PositionwiseFF.layer_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization + positionwise feed-forward", "\n", "            ", "core_out", "=", "self", ".", "CoreNet", "(", "self", ".", "layer_norm", "(", "inp", ")", ")", "\n", "\n", "##### residual connection", "\n", "output", "=", "core_out", "+", "inp", "\n", "", "else", ":", "\n", "##### positionwise feed-forward", "\n", "            ", "core_out", "=", "self", ".", "CoreNet", "(", "inp", ")", "\n", "\n", "##### residual connection + layer normalization", "\n", "output", "=", "self", ".", "layer_norm", "(", "inp", "+", "core_out", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.MultiHeadAttn.__init__": [[71, 92], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "dropatt", "=", "0", ",", "\n", "pre_lnorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "q_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "self", ".", "kv_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "2", "*", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropatt", "=", "nn", ".", "Dropout", "(", "dropatt", ")", "\n", "self", ".", "o_net", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_head", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "scale", "=", "1", "/", "(", "d_head", "**", "0.5", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.MultiHeadAttn.forward": [[93, 143], ["mem_transformer.MultiHeadAttn.q_net", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "head_q.view.view.view", "head_k.view.view.view", "head_v.view.view.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.mul_", "torch.einsum.mul_", "torch.einsum.mul_", "torch.softmax", "torch.softmax", "torch.softmax", "mem_transformer.MultiHeadAttn.dropatt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec.contiguous().view.contiguous().view.contiguous().view", "mem_transformer.MultiHeadAttn.o_net", "mem_transformer.MultiHeadAttn.drop", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mem_transformer.MultiHeadAttn.layer_norm", "mem_transformer.MultiHeadAttn.kv_net", "h.size", "h.size", "mem_transformer.MultiHeadAttn.size", "mem_transformer.MultiHeadAttn.size", "mem_transformer.MultiHeadAttn.size", "mem_transformer.MultiHeadAttn.size", "attn_mask.any().item", "attn_vec.contiguous().view.contiguous().view.size", "attn_vec.contiguous().view.contiguous().view.size", "mem_transformer.MultiHeadAttn.layer_norm", "attn_mask.dim", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "attn_vec.contiguous().view.contiguous().view.contiguous", "attn_mask.any", "attn_mask.dim", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "float", "float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "##### multihead attention", "\n", "# [hlen x bsz x n_head x d_head]", "\n", "\n", "        ", "if", "mems", "is", "not", "None", ":", "\n", "            ", "c", "=", "torch", ".", "cat", "(", "[", "mems", ",", "h", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "c", "=", "h", "\n", "\n", "", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization", "\n", "            ", "c", "=", "self", ".", "layer_norm", "(", "c", ")", "\n", "\n", "", "head_q", "=", "self", ".", "q_net", "(", "h", ")", "\n", "head_k", ",", "head_v", "=", "torch", ".", "chunk", "(", "self", ".", "kv_net", "(", "c", ")", ",", "2", ",", "-", "1", ")", "\n", "\n", "head_q", "=", "head_q", ".", "view", "(", "h", ".", "size", "(", "0", ")", ",", "h", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "head_k", "=", "head_k", ".", "view", "(", "c", ".", "size", "(", "0", ")", ",", "c", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "head_v", "=", "head_v", ".", "view", "(", "c", ".", "size", "(", "0", ")", ",", "c", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "attn_score", "=", "torch", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "(", "head_q", ",", "head_k", ")", ")", "\n", "attn_score", ".", "mul_", "(", "self", ".", "scale", ")", "\n", "if", "attn_mask", "is", "not", "None", "and", "attn_mask", ".", "any", "(", ")", ".", "item", "(", ")", ":", "\n", "            ", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", "None", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "1", ")", "\n", "attn_prob", "=", "self", ".", "dropatt", "(", "attn_prob", ")", "\n", "\n", "# [qlen x klen x bsz x n_head] + [klen x bsz x n_head x d_head] -> [qlen x bsz x n_head x d_head]", "\n", "attn_vec", "=", "torch", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "(", "attn_prob", ",", "head_v", ")", ")", "\n", "attn_vec", "=", "attn_vec", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "attn_vec", ".", "size", "(", "0", ")", ",", "attn_vec", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### residual connection", "\n", "            ", "output", "=", "h", "+", "attn_out", "\n", "", "else", ":", "\n", "##### residual connection + layer normalization", "\n", "            ", "output", "=", "self", ".", "layer_norm", "(", "h", "+", "attn_out", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.RelMultiHeadAttn.__init__": [[146, 168], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "dropatt", "=", "0", ",", "\n", "tgt_len", "=", "None", ",", "ext_len", "=", "None", ",", "mem_len", "=", "None", ",", "pre_lnorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "RelMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "qkv_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "3", "*", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropatt", "=", "nn", ".", "Dropout", "(", "dropatt", ")", "\n", "\n", "self", ".", "o_net", "=", "nn", ".", "Linear", "(", "30", "*", "30", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "# self.o_net_1 = nn.Linear(13 * 13, d_model, bias=False)", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "scale", "=", "1", "/", "(", "d_head", "**", "0.5", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.RelMultiHeadAttn._parallelogram_mask": [[169, 179], ["torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "min", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.ones().byte.flip", "torch.ones().byte.flip", "torch.ones().byte.flip", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "_parallelogram_mask", "(", "self", ",", "h", ",", "w", ",", "left", "=", "False", ")", ":", "\n", "        ", "mask", "=", "torch", ".", "ones", "(", "(", "h", ",", "w", ")", ")", ".", "byte", "(", ")", "\n", "m", "=", "min", "(", "h", ",", "w", ")", "\n", "mask", "[", ":", "m", ",", ":", "m", "]", "=", "torch", ".", "triu", "(", "mask", "[", ":", "m", ",", ":", "m", "]", ")", "\n", "mask", "[", "-", "m", ":", ",", "-", "m", ":", "]", "=", "torch", ".", "tril", "(", "mask", "[", "-", "m", ":", ",", "-", "m", ":", "]", ")", "\n", "\n", "if", "left", ":", "\n", "            ", "return", "mask", "\n", "", "else", ":", "\n", "            ", "return", "mask", ".", "flip", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.RelMultiHeadAttn._shift": [[180, 197], ["torch.cat().expand.masked_select().view", "torch.cat().expand.masked_select().view", "torch.cat().expand.masked_select().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "mask.flip.flip.flip", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select", "torch.cat().expand.masked_select", "torch.cat().expand.masked_select", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select().view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "_shift", "(", "self", ",", "x", ",", "qlen", ",", "klen", ",", "mask", ",", "left", "=", "False", ")", ":", "\n", "        ", "if", "qlen", ">", "1", ":", "\n", "            ", "zero_pad", "=", "torch", ".", "zeros", "(", "(", "x", ".", "size", "(", "0", ")", ",", "qlen", "-", "1", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ",", "\n", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "zero_pad", "=", "torch", ".", "zeros", "(", "0", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "\n", "", "if", "left", ":", "\n", "            ", "mask", "=", "mask", ".", "flip", "(", "1", ")", "\n", "x_padded", "=", "torch", ".", "cat", "(", "[", "zero_pad", ",", "x", "]", ",", "dim", "=", "1", ")", ".", "expand", "(", "qlen", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x_padded", "=", "torch", ".", "cat", "(", "[", "x", ",", "zero_pad", "]", ",", "dim", "=", "1", ")", ".", "expand", "(", "qlen", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "", "x", "=", "x_padded", ".", "masked_select", "(", "mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", ")", ".", "view", "(", "qlen", ",", "klen", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.RelMultiHeadAttn._rel_shift": [[198, 212], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_padded.view.view.view", "x_padded[].view_as", "x_padded[].view_as.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size"], "methods", ["None"], ["", "def", "_rel_shift", "(", "self", ",", "x", ",", "zero_triu", "=", "False", ")", ":", "\n", "        ", "zero_pad", "=", "torch", ".", "zeros", "(", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ",", "\n", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "x_padded", "=", "torch", ".", "cat", "(", "[", "zero_pad", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x_padded", "=", "x_padded", ".", "view", "(", "x", ".", "size", "(", "1", ")", "+", "1", ",", "x", ".", "size", "(", "0", ")", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "x", "=", "x_padded", "[", "1", ":", "]", ".", "view_as", "(", "x", ")", "\n", "\n", "if", "zero_triu", ":", "\n", "            ", "ones", "=", "torch", ".", "ones", "(", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ")", ")", "\n", "x", "=", "x", "*", "torch", ".", "tril", "(", "ones", ",", "x", ".", "size", "(", "1", ")", "-", "x", ".", "size", "(", "0", ")", ")", "[", ":", ",", ":", ",", "None", ",", "None", "]", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.RelMultiHeadAttn.forward": [[213, 215], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "w", ",", "r", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.RelPartialLearnableMultiHeadAttn.__init__": [[218, 222], ["mem_transformer.RelMultiHeadAttn.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelPartialLearnableMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "r_net", "=", "nn", ".", "Linear", "(", "self", ".", "d_model", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.RelPartialLearnableMultiHeadAttn.forward": [[223, 367], ["w_head_k.view.view.size", "w_head_q.view.view.view", "w_head_k.view.view.view", "w_head_v.view.view.view", "mem_transformer.RelPartialLearnableMultiHeadAttn.view", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "mem_transformer.RelPartialLearnableMultiHeadAttn.view", "range", "torch.stack().permute().cuda().float", "torch.stack().permute().cuda().float", "torch.stack().permute().cuda().float", "torch.stack().permute().cuda().float", "torch.stack().permute().cuda().float", "torch.stack().permute().cuda().float", "torch.stack().permute().cuda().float", "torch.stack().permute().cuda().float", "torch.stack().permute().cuda().float", "torch.stack().permute().cuda().float.mul_", "torch.stack().permute().cuda().float.mul_", "torch.stack().permute().cuda().float.mul_", "mem_transformer.RelPartialLearnableMultiHeadAttn.o_net", "mem_transformer.RelPartialLearnableMultiHeadAttn.drop", "w.size", "r.size", "w.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mem_transformer.RelPartialLearnableMultiHeadAttn.r_net", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "mem_transformer.RelPartialLearnableMultiHeadAttn.r_net", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "rw_head_q[].view", "w_head_k[].view", "w_head_v[].view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "rr_head_q[].view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "torch.einsum().contiguous().view", "full_matrixs.append", "mem_transformer.RelPartialLearnableMultiHeadAttn.layer_norm", "mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net", "mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net", "mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net", "mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.stack().permute().cuda", "torch.stack().permute().cuda", "torch.stack().permute().cuda", "torch.stack().permute().cuda", "torch.stack().permute().cuda", "torch.stack().permute().cuda", "torch.stack().permute().cuda", "torch.stack().permute().cuda", "torch.stack().permute().cuda", "mem_transformer.RelPartialLearnableMultiHeadAttn.layer_norm", "mem_transformer.RelPartialLearnableMultiHeadAttn.layer_norm", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.einsum().contiguous", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "w", ",", "r", ",", "r_w_bias", ",", "r_r_bias", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "qlen", ",", "rlen", ",", "bsz", "=", "w", ".", "size", "(", "0", ")", ",", "r", ".", "size", "(", "0", ")", ",", "w", ".", "size", "(", "1", ")", "\n", "\n", "# print('qlen', qlen)", "\n", "# print('rlen', rlen)", "\n", "# print('mems.size():', mems.size())", "\n", "# # print('bsz', bsz)", "\n", "# # 30.60.410", "\n", "# print('W:', w.size())", "\n", "# # 30, 1,410", "\n", "# print('r:', r.size())", "\n", "\n", "if", "mems", "is", "not", "None", ":", "\n", "            ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", ",", "w", "]", ",", "0", ")", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "cat", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "cat", ")", "\n", "", "r_head_k", "=", "self", ".", "r_net", "(", "r", ")", "\n", "\n", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "w_head_q", "=", "w_head_q", "[", "-", "qlen", ":", "]", "\n", "w_head_k", "=", "w_head_k", "[", "-", "qlen", ":", "]", "\n", "w_head_v", "=", "w_head_v", "[", "-", "qlen", ":", "]", "\n", "r_head_k", "=", "r_head_k", "[", "-", "qlen", ":", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "w", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "w", ")", "\n", "", "r_head_k", "=", "self", ".", "r_net", "(", "r", ")", "\n", "# r_head_k = r_head_k[-qlen:]", "\n", "\n", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "klen", "=", "w_head_k", ".", "size", "(", "0", ")", "\n", "\n", "# print('klen', klen)", "\n", "# print('w_head:', w_heads.size())", "\n", "# # print(w_head_k.size())", "\n", "# print('r_head_k:', r_head_k.size())", "\n", "# print(\"___________________________________\")", "\n", "\n", "w_head_q", "=", "w_head_q", ".", "view", "(", "qlen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x bsz x n_head x d_head", "\n", "w_head_k", "=", "w_head_k", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# klen x bsz x n_head x d_head", "\n", "w_head_v", "=", "w_head_v", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# klen x bsz x n_head x d_head", "\n", "\n", "r_head_k", "=", "r_head_k", ".", "view", "(", "klen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x n_head x d_head", "\n", "\n", "rw_head_q", "=", "w_head_q", "+", "r_w_bias", "# qlen x bsz x n_head x d_head", "\n", "rr_head_q", "=", "w_head_q", "+", "r_r_bias", "\n", "\n", "# tucker decomposition", "\n", "cores_1", "=", "torch", ".", "zeros", "(", "[", "self", ".", "d_head", ",", "self", ".", "d_head", ",", "self", ".", "d_head", "]", ")", ".", "cuda", "(", ")", "\n", "cores_2", "=", "torch", ".", "zeros", "(", "[", "self", ".", "d_head", ",", "self", ".", "d_head", ",", "self", ".", "d_head", "]", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "d_head", ")", ":", "\n", "            ", "cores_1", "[", "i", "]", "[", "i", "]", "[", "i", "]", "=", "initCore", "[", "0", "]", "[", "i", "]", "\n", "cores_2", "[", "i", "]", "[", "i", "]", "[", "i", "]", "=", "initCore", "[", "1", "]", "[", "i", "]", "\n", "\n", "# cores_1[i][i][i] = initCore[0][i]", "\n", "\n", "# print(r_head_k.size())", "\n", "\n", "", "factor_k_2", "=", "r_head_k", ".", "view", "(", "qlen", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "full_matrixs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bsz", ")", ":", "\n", "            ", "factor_q_1", "=", "rw_head_q", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "view", "(", "qlen", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "factor_k", "=", "w_head_k", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "view", "(", "qlen", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "factor_v", "=", "w_head_v", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "view", "(", "qlen", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "full_matrix_1", "=", "torch", ".", "einsum", "(", "'pqr, ip,jq,kr->ijk'", ",", "\n", "[", "cores_1", ",", "factor_q_1", ",", "factor_k", ",", "factor_v", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "qlen", ",", "-", "1", ")", "\n", "\n", "factor_q_2", "=", "rr_head_q", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "view", "(", "qlen", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "full_matrix_2", "=", "torch", ".", "einsum", "(", "'pqr, ip,jq,kr->ijk'", ",", "\n", "[", "cores_1", ",", "factor_q_2", ",", "factor_k_2", ",", "factor_v", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "qlen", ",", "-", "1", ")", "\n", "# full_matrixs.append(full_matrix_1 + full_matrix_2)", "\n", "\n", "full_matrix_3", "=", "torch", ".", "einsum", "(", "'pqr, ip,jq,kr->ijk'", ",", "\n", "[", "cores_2", ",", "factor_q_1", ",", "factor_k", ",", "factor_v", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "qlen", ",", "-", "1", ")", "\n", "full_matrix_4", "=", "torch", ".", "einsum", "(", "'pqr, ip,jq,kr->ijk'", ",", "\n", "[", "cores_2", ",", "factor_q_2", ",", "factor_k_2", ",", "factor_v", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "qlen", ",", "-", "1", ")", "\n", "\n", "full_matrixs", ".", "append", "(", "full_matrix_1", "+", "full_matrix_2", "+", "full_matrix_3", "+", "full_matrix_4", ")", "\n", "\n", "\n", "# #### compute attention score", "\n", "# rw_head_q = w_head_q + r_w_bias  # qlen x bsz x n_head x d_head", "\n", "# AC = torch.einsum('ibnd,jbnd->ijbn', (rw_head_q, w_head_k))  # qlen x klen x bsz x n_head", "\n", "#", "\n", "# print('AC:', AC.size())", "\n", "#", "\n", "# rr_head_q = w_head_q + r_r_bias", "\n", "# BD = torch.einsum('ibnd,jnd->ijbn', (rr_head_q, r_head_k))  # qlen x rlen x bsz x n_head", "\n", "# print(BD.size)", "\n", "# BD = self._rel_shift(BD)", "\n", "#", "\n", "# print('BD:', BD.size())", "\n", "\n", "# # [qlen x klen x bsz x n_head]", "\n", "# attn_score = AC + BD", "\n", "# attn_score.mul_(self.scale)", "\n", "#", "\n", "# #### compute attention probability", "\n", "# if attn_mask is not None and attn_mask.any().item():", "\n", "#     if attn_mask.dim() == 2:", "\n", "#         attn_score = attn_score.float().masked_fill(", "\n", "#             attn_mask[None, :, :, None], -float('inf')).type_as(attn_score)", "\n", "#     elif attn_mask.dim() == 3:", "\n", "#         attn_score = attn_score.float().masked_fill(", "\n", "#             attn_mask[:, :, :, None], -float('inf')).type_as(attn_score)", "\n", "#", "\n", "# # [qlen x klen x bsz x n_head]", "\n", "# attn_prob = F.softmax(attn_score, dim=1)", "\n", "# attn_prob = self.dropatt(attn_prob)", "\n", "#", "\n", "# #### compute attention vector", "\n", "# attn_vec = torch.einsum('ijbn,jbnd->ibnd', (attn_prob, w_head_v))", "\n", "#", "\n", "# # [qlen x bsz x n_head x d_head]", "\n", "# attn_vec = attn_vec.contiguous().view(", "\n", "#     attn_vec.size(0), attn_vec.size(1), self.n_head * self.d_head)", "\n", "\n", "# linear projection", "\n", "", "attn_vec", "=", "torch", ".", "stack", "(", "full_matrixs", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "attn_vec", ".", "mul_", "(", "0.5", ")", "\n", "\n", "# if qlen == 30:", "\n", "#     attn_out = self.o_net(attn_vec)", "\n", "# else:", "\n", "#     attn_out = self.o_net_1(attn_vec)", "\n", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### residual connection", "\n", "            ", "output", "=", "w", "+", "attn_out", "\n", "", "else", ":", "\n", "##### residual connection + layer normalization", "\n", "            ", "output", "=", "self", ".", "layer_norm", "(", "w", "+", "attn_out", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.RelLearnableMultiHeadAttn.__init__": [[370, 372], ["mem_transformer.RelMultiHeadAttn.__init__"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelLearnableMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.RelLearnableMultiHeadAttn.forward": [[373, 453], ["w_head_k.view.view.size", "w_head_q.view.view.view", "w_head_k.view.view.view", "w_head_v.view.view.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "mem_transformer.RelLearnableMultiHeadAttn._rel_shift", "attn_score.mul_", "torch.softmax", "torch.softmax", "torch.softmax", "mem_transformer.RelLearnableMultiHeadAttn.dropatt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec.contiguous().view.contiguous().view.contiguous().view", "mem_transformer.RelLearnableMultiHeadAttn.o_net", "mem_transformer.RelLearnableMultiHeadAttn.drop", "w.size", "w.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat.size", "torch.cat.size", "torch.cat.size", "r_emb[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "r_bias[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attn_mask.any().item", "attn_vec.contiguous().view.contiguous().view.size", "attn_vec.contiguous().view.contiguous().view.size", "mem_transformer.RelLearnableMultiHeadAttn.layer_norm", "mem_transformer.RelLearnableMultiHeadAttn.qkv_net", "mem_transformer.RelLearnableMultiHeadAttn.qkv_net", "mem_transformer.RelLearnableMultiHeadAttn.qkv_net", "mem_transformer.RelLearnableMultiHeadAttn.qkv_net", "attn_mask.dim", "attn_score.masked_fill_", "attn_vec.contiguous().view.contiguous().view.contiguous", "mem_transformer.RelLearnableMultiHeadAttn.layer_norm", "mem_transformer.RelLearnableMultiHeadAttn.layer_norm", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "attn_mask.any", "attn_mask.dim", "attn_score.masked_fill_", "float", "float"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelMultiHeadAttn._rel_shift"], ["", "def", "forward", "(", "self", ",", "w", ",", "r_emb", ",", "r_w_bias", ",", "r_bias", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "# r_emb: [klen, n_head, d_head], used for term B", "\n", "# r_w_bias: [n_head, d_head], used for term C", "\n", "# r_bias: [klen, n_head], used for term D", "\n", "\n", "        ", "qlen", ",", "bsz", "=", "w", ".", "size", "(", "0", ")", ",", "w", ".", "size", "(", "1", ")", "\n", "\n", "if", "mems", "is", "not", "None", ":", "\n", "            ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", ",", "w", "]", ",", "0", ")", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "cat", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "cat", ")", "\n", "", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "w_head_q", "=", "w_head_q", "[", "-", "qlen", ":", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "w", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "w", ")", "\n", "", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "klen", "=", "w_head_k", ".", "size", "(", "0", ")", "\n", "\n", "w_head_q", "=", "w_head_q", ".", "view", "(", "qlen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "w_head_k", "=", "w_head_k", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "w_head_v", "=", "w_head_v", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "\n", "if", "klen", ">", "r_emb", ".", "size", "(", "0", ")", ":", "\n", "            ", "r_emb_pad", "=", "r_emb", "[", "0", ":", "1", "]", ".", "expand", "(", "klen", "-", "r_emb", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ")", "\n", "r_emb", "=", "torch", ".", "cat", "(", "[", "r_emb_pad", ",", "r_emb", "]", ",", "0", ")", "\n", "r_bias_pad", "=", "r_bias", "[", "0", ":", "1", "]", ".", "expand", "(", "klen", "-", "r_bias", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "r_bias", "=", "torch", ".", "cat", "(", "[", "r_bias_pad", ",", "r_bias", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "r_emb", "=", "r_emb", "[", "-", "klen", ":", "]", "\n", "r_bias", "=", "r_bias", "[", "-", "klen", ":", "]", "\n", "\n", "#### compute attention score", "\n", "", "rw_head_q", "=", "w_head_q", "+", "r_w_bias", "[", "None", "]", "# qlen x bsz x n_head x d_head", "\n", "\n", "AC", "=", "torch", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "(", "rw_head_q", ",", "w_head_k", ")", ")", "# qlen x klen x bsz x n_head", "\n", "B_", "=", "torch", ".", "einsum", "(", "'ibnd,jnd->ijbn'", ",", "(", "w_head_q", ",", "r_emb", ")", ")", "# qlen x klen x bsz x n_head", "\n", "D_", "=", "r_bias", "[", "None", ",", ":", ",", "None", "]", "# 1    x klen x 1   x n_head", "\n", "BD", "=", "self", ".", "_rel_shift", "(", "B_", "+", "D_", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "attn_score", "=", "AC", "+", "BD", "\n", "attn_score", ".", "mul_", "(", "self", ".", "scale", ")", "\n", "\n", "#### compute attention probability", "\n", "if", "attn_mask", "is", "not", "None", "and", "attn_mask", ".", "any", "(", ")", ".", "item", "(", ")", ":", "\n", "            ", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", "None", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "1", ")", "\n", "attn_prob", "=", "self", ".", "dropatt", "(", "attn_prob", ")", "\n", "\n", "#### compute attention vector", "\n", "attn_vec", "=", "torch", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "(", "attn_prob", ",", "w_head_v", ")", ")", "\n", "\n", "# [qlen x bsz x n_head x d_head]", "\n", "attn_vec", "=", "attn_vec", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "attn_vec", ".", "size", "(", "0", ")", ",", "attn_vec", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### residual connection", "\n", "            ", "output", "=", "w", "+", "attn_out", "\n", "", "else", ":", "\n", "##### residual connection + layer normalization", "\n", "            ", "output", "=", "self", ".", "layer_norm", "(", "w", "+", "attn_out", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.DecoderLayer.__init__": [[456, 462], ["torch.Module.__init__", "mem_transformer.MultiHeadAttn", "mem_transformer.PositionwiseFF", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "MultiHeadAttn", "(", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "**", "kwargs", ")", "\n", "self", ".", "pos_ff", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "kwargs", ".", "get", "(", "'pre_lnorm'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.DecoderLayer.forward": [[463, 469], ["mem_transformer.DecoderLayer.dec_attn", "mem_transformer.DecoderLayer.pos_ff"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dec_inp", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "output", "=", "self", ".", "dec_attn", "(", "dec_inp", ",", "attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems", ")", "\n", "output", "=", "self", ".", "pos_ff", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.RelLearnableDecoderLayer.__init__": [[472, 480], ["torch.Module.__init__", "mem_transformer.RelLearnableMultiHeadAttn", "mem_transformer.PositionwiseFF", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelLearnableDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "RelLearnableMultiHeadAttn", "(", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "\n", "**", "kwargs", ")", "\n", "self", ".", "pos_ff", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "kwargs", ".", "get", "(", "'pre_lnorm'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.RelLearnableDecoderLayer.forward": [[481, 488], ["mem_transformer.RelLearnableDecoderLayer.dec_attn", "mem_transformer.RelLearnableDecoderLayer.pos_ff"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dec_inp", ",", "r_emb", ",", "r_w_bias", ",", "r_bias", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "output", "=", "self", ".", "dec_attn", "(", "dec_inp", ",", "r_emb", ",", "r_w_bias", ",", "r_bias", ",", "\n", "attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems", ")", "\n", "output", "=", "self", ".", "pos_ff", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.RelPartialLearnableDecoderLayer.__init__": [[491, 499], ["torch.Module.__init__", "mem_transformer.RelPartialLearnableMultiHeadAttn", "mem_transformer.PositionwiseFF", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelPartialLearnableDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "RelPartialLearnableMultiHeadAttn", "(", "n_head", ",", "d_model", ",", "\n", "d_head", ",", "dropout", ",", "**", "kwargs", ")", "\n", "self", ".", "pos_ff", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "kwargs", ".", "get", "(", "'pre_lnorm'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.RelPartialLearnableDecoderLayer.forward": [[500, 507], ["mem_transformer.RelPartialLearnableDecoderLayer.dec_attn", "mem_transformer.RelPartialLearnableDecoderLayer.pos_ff"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dec_inp", ",", "r", ",", "r_w_bias", ",", "r_r_bias", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "output", "=", "self", ".", "dec_attn", "(", "dec_inp", ",", "r", ",", "r_w_bias", ",", "r_r_bias", ",", "\n", "attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems", ")", "\n", "output", "=", "self", ".", "pos_ff", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.AdaptiveEmbedding.__init__": [[510, 540], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "mem_transformer.AdaptiveEmbedding.emb_layers.append", "range", "torch.Embedding", "torch.Embedding", "torch.Embedding", "mem_transformer.AdaptiveEmbedding.emb_projs.append", "len", "mem_transformer.AdaptiveEmbedding.emb_layers.append", "mem_transformer.AdaptiveEmbedding.emb_projs.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_token", ",", "d_embed", ",", "d_proj", ",", "cutoffs", ",", "div_val", "=", "1", ",", "\n", "sample_softmax", "=", "False", ")", ":", "\n", "        ", "super", "(", "AdaptiveEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_token", "=", "n_token", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "\n", "self", ".", "cutoffs", "=", "cutoffs", "+", "[", "n_token", "]", "\n", "self", ".", "div_val", "=", "div_val", "\n", "self", ".", "d_proj", "=", "d_proj", "\n", "\n", "self", ".", "emb_scale", "=", "d_proj", "**", "0.5", "\n", "\n", "self", ".", "cutoff_ends", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "\n", "self", ".", "emb_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "emb_projs", "=", "nn", ".", "ParameterList", "(", ")", "\n", "if", "div_val", "==", "1", ":", "\n", "            ", "self", ".", "emb_layers", ".", "append", "(", "\n", "nn", ".", "Embedding", "(", "n_token", ",", "d_embed", ",", "sparse", "=", "sample_softmax", ">", "0", ")", "\n", ")", "\n", "if", "d_proj", "!=", "d_embed", ":", "\n", "# output:d_proj", "\n", "                ", "self", ".", "emb_projs", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "d_proj", ",", "d_embed", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "d_emb_i", "=", "d_embed", "//", "(", "div_val", "**", "i", ")", "\n", "self", ".", "emb_layers", ".", "append", "(", "nn", ".", "Embedding", "(", "r_idx", "-", "l_idx", ",", "d_emb_i", ")", ")", "\n", "self", ".", "emb_projs", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "d_proj", ",", "d_emb_i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.AdaptiveEmbedding.forward": [[541, 571], ["torch.linear.mul_", "next", "inp.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros.view", "torch.zeros.view", "torch.zeros.view", "torch.linear", "torch.linear", "torch.linear", "mem_transformer.AdaptiveEmbedding.parameters", "len", "mask_i.nonzero().squeeze", "torch.linear", "torch.linear", "torch.linear", "torch.zeros.index_copy_", "torch.zeros.index_copy_", "torch.zeros.index_copy_", "inp.view.size", "mask_i.nonzero().squeeze.numel", "inp.view.index_select", "inp.size", "mask_i.nonzero"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.next"], ["", "", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "div_val", "==", "1", ":", "\n", "            ", "embed", "=", "self", ".", "emb_layers", "[", "0", "]", "(", "inp", ")", "\n", "if", "self", ".", "d_proj", "!=", "self", ".", "d_embed", ":", "\n", "                ", "embed", "=", "F", ".", "linear", "(", "embed", ",", "self", ".", "emb_projs", "[", "0", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "param", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", "\n", "inp_flat", "=", "inp", ".", "view", "(", "-", "1", ")", "\n", "emb_flat", "=", "torch", ".", "zeros", "(", "[", "inp_flat", ".", "size", "(", "0", ")", ",", "self", ".", "d_proj", "]", ",", "\n", "dtype", "=", "param", ".", "dtype", ",", "device", "=", "param", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "\n", "mask_i", "=", "(", "inp_flat", ">=", "l_idx", ")", "&", "(", "inp_flat", "<", "r_idx", ")", "\n", "indices_i", "=", "mask_i", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "indices_i", ".", "numel", "(", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "inp_i", "=", "inp_flat", ".", "index_select", "(", "0", ",", "indices_i", ")", "-", "l_idx", "\n", "emb_i", "=", "self", ".", "emb_layers", "[", "i", "]", "(", "inp_i", ")", "\n", "emb_i", "=", "F", ".", "linear", "(", "emb_i", ",", "self", ".", "emb_projs", "[", "i", "]", ")", "\n", "\n", "emb_flat", ".", "index_copy_", "(", "0", ",", "indices_i", ",", "emb_i", ")", "\n", "\n", "", "embed", "=", "emb_flat", ".", "view", "(", "*", "inp", ".", "size", "(", ")", ",", "self", ".", "d_proj", ")", "\n", "\n", "", "embed", ".", "mul_", "(", "self", ".", "emb_scale", ")", "\n", "\n", "return", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.MemTransformerLM.__init__": [[574, 665], ["torch.Module.__init__", "torch.softmax", "torch.softmax", "torch.softmax", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mem_transformer.AdaptiveEmbedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "mem_transformer.MemTransformerLM._create_params", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "range", "torch.Linear", "torch.Linear", "torch.Linear", "log_uniform_sampler.LogUniformSampler", "proj_adaptive_softmax.ProjectedAdaptiveLogSoftmax", "mem_transformer.MemTransformerLM.layers.append", "range", "range", "enumerate", "mem_transformer.RelPartialLearnableDecoderLayer", "mem_transformer.MemTransformerLM.layers.append", "range", "len", "mem_transformer.RelLearnableDecoderLayer", "mem_transformer.MemTransformerLM.layers.append", "mem_transformer.DecoderLayer"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM._create_params"], ["    ", "def", "__init__", "(", "self", ",", "n_token", ",", "n_layer", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "\n", "dropout", ",", "dropatt", ",", "tie_weight", "=", "True", ",", "d_embed", "=", "None", ",", "\n", "div_val", "=", "1", ",", "tie_projs", "=", "[", "False", "]", ",", "pre_lnorm", "=", "False", ",", "\n", "tgt_len", "=", "None", ",", "ext_len", "=", "None", ",", "mem_len", "=", "None", ",", "\n", "cutoffs", "=", "[", "]", ",", "adapt_inp", "=", "False", ",", "\n", "same_length", "=", "False", ",", "attn_type", "=", "0", ",", "clamp_len", "=", "-", "1", ",", "\n", "sample_softmax", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "MemTransformerLM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_token", "=", "n_token", "\n", "\n", "global", "initCore", "\n", "# core_number = 2", "\n", "# initCore = torch.ones(1, 40)", "\n", "initCore1", "=", "F", ".", "softmax", "(", "torch", ".", "rand", "(", "1", ",", "40", ")", ",", "dim", "=", "1", ")", "\n", "initCore2", "=", "torch", ".", "rand", "(", "1", ",", "40", ")", "\n", "initCore", "=", "torch", ".", "cat", "(", "(", "initCore1", ",", "initCore2", ")", ",", "dim", "=", "0", ")", "\n", "\n", "d_embed", "=", "d_model", "if", "d_embed", "is", "None", "else", "d_embed", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_head", "=", "d_head", "\n", "\n", "self", ".", "word_emb", "=", "AdaptiveEmbedding", "(", "n_token", ",", "d_embed", ",", "d_model", ",", "cutoffs", ",", "\n", "div_val", "=", "div_val", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "n_layer", "=", "n_layer", "\n", "\n", "self", ".", "tgt_len", "=", "tgt_len", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "ext_len", "=", "ext_len", "\n", "self", ".", "max_klen", "=", "tgt_len", "+", "ext_len", "+", "mem_len", "\n", "\n", "self", ".", "attn_type", "=", "attn_type", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "attn_type", "==", "0", ":", "# the default attention", "\n", "            ", "for", "i", "in", "range", "(", "n_layer", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "RelPartialLearnableDecoderLayer", "(", "\n", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "tgt_len", "=", "tgt_len", ",", "ext_len", "=", "ext_len", ",", "mem_len", "=", "mem_len", ",", "\n", "dropatt", "=", "dropatt", ",", "pre_lnorm", "=", "pre_lnorm", ")", "\n", ")", "\n", "", "", "elif", "attn_type", "==", "1", ":", "# learnable embeddings", "\n", "            ", "for", "i", "in", "range", "(", "n_layer", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "RelLearnableDecoderLayer", "(", "\n", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "tgt_len", "=", "tgt_len", ",", "ext_len", "=", "ext_len", ",", "mem_len", "=", "mem_len", ",", "\n", "dropatt", "=", "dropatt", ",", "pre_lnorm", "=", "pre_lnorm", ")", "\n", ")", "\n", "", "", "elif", "attn_type", "in", "[", "2", ",", "3", "]", ":", "# absolute embeddings", "\n", "            ", "for", "i", "in", "range", "(", "n_layer", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "DecoderLayer", "(", "\n", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "dropatt", "=", "dropatt", ",", "pre_lnorm", "=", "pre_lnorm", ")", "\n", ")", "\n", "\n", "", "", "self", ".", "sample_softmax", "=", "sample_softmax", "\n", "# use sampled softmax", "\n", "if", "sample_softmax", ">", "0", ":", "\n", "            ", "self", ".", "out_layer", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_token", ")", "\n", "if", "tie_weight", ":", "\n", "                ", "self", ".", "out_layer", ".", "weight", "=", "self", ".", "word_emb", ".", "weight", "\n", "", "self", ".", "tie_weight", "=", "tie_weight", "\n", "self", ".", "sampler", "=", "LogUniformSampler", "(", "n_token", ",", "sample_softmax", ")", "\n", "\n", "# use adaptive softmax (including standard softmax)", "\n", "", "else", ":", "\n", "            ", "self", ".", "crit", "=", "ProjectedAdaptiveLogSoftmax", "(", "n_token", ",", "d_embed", ",", "d_model", ",", "\n", "cutoffs", ",", "div_val", "=", "div_val", ")", "\n", "\n", "if", "tie_weight", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "crit", ".", "out_layers", ")", ")", ":", "\n", "                    ", "self", ".", "crit", ".", "out_layers", "[", "i", "]", ".", "weight", "=", "self", ".", "word_emb", ".", "emb_layers", "[", "i", "]", ".", "weight", "\n", "\n", "", "", "if", "tie_projs", ":", "\n", "                ", "for", "i", ",", "tie_proj", "in", "enumerate", "(", "tie_projs", ")", ":", "\n", "                    ", "if", "tie_proj", "and", "div_val", "==", "1", "and", "d_model", "!=", "d_embed", ":", "\n", "                        ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "self", ".", "word_emb", ".", "emb_projs", "[", "0", "]", "\n", "", "elif", "tie_proj", "and", "div_val", "!=", "1", ":", "\n", "                        ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "self", ".", "word_emb", ".", "emb_projs", "[", "i", "]", "\n", "\n", "", "", "", "", "self", ".", "same_length", "=", "same_length", "\n", "self", ".", "clamp_len", "=", "clamp_len", "\n", "\n", "self", ".", "_create_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.MemTransformerLM.backward_compatible": [[666, 668], ["None"], "methods", ["None"], ["", "def", "backward_compatible", "(", "self", ")", ":", "\n", "        ", "self", ".", "sample_softmax", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.MemTransformerLM._create_params": [[669, 686], ["mem_transformer.PositionalEmbedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "mem_transformer.PositionalEmbedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "_create_params", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "attn_type", "==", "0", ":", "# default attention", "\n", "            ", "self", ".", "pos_emb", "=", "PositionalEmbedding", "(", "self", ".", "d_model", ")", "\n", "self", ".", "r_w_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_r_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "1", ":", "# learnable", "\n", "            ", "self", ".", "r_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "n_layer", ",", "self", ".", "max_klen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_w_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "n_layer", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "n_layer", ",", "self", ".", "max_klen", ",", "self", ".", "n_head", ")", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "2", ":", "# absolute standard", "\n", "            ", "self", ".", "pos_emb", "=", "PositionalEmbedding", "(", "self", ".", "d_model", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "3", ":", "# absolute deeper SA", "\n", "            ", "self", ".", "r_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "n_layer", ",", "self", ".", "max_klen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.MemTransformerLM.reset_length": [[687, 691], ["None"], "methods", ["None"], ["", "", "def", "reset_length", "(", "self", ",", "tgt_len", ",", "ext_len", ",", "mem_len", ")", ":", "\n", "        ", "self", ".", "tgt_len", "=", "tgt_len", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "ext_len", "=", "ext_len", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.MemTransformerLM.init_mems": [[692, 703], ["next", "range", "mem_transformer.MemTransformerLM.parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "mems.append"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.next"], ["", "def", "init_mems", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mem_len", ">", "0", ":", "\n", "            ", "mems", "=", "[", "]", "\n", "param", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layer", "+", "1", ")", ":", "\n", "                ", "empty", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "param", ".", "dtype", ",", "device", "=", "param", ".", "device", ")", "\n", "mems", ".", "append", "(", "empty", ")", "\n", "\n", "", "return", "mems", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.MemTransformerLM._update_mems": [[704, 725], ["len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "range", "max", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "new_mems.append", "cat[].detach"], "methods", ["None"], ["", "", "def", "_update_mems", "(", "self", ",", "hids", ",", "mems", ",", "qlen", ",", "mlen", ")", ":", "\n", "# does not deal with None", "\n", "        ", "if", "mems", "is", "None", ":", "return", "None", "\n", "\n", "# mems is not None", "\n", "assert", "len", "(", "hids", ")", "==", "len", "(", "mems", ")", ",", "'len(hids) != len(mems)'", "\n", "\n", "# There are `mlen + qlen` steps that can be cached into mems", "\n", "# For the next step, the last `ext_len` of the `qlen` tokens", "\n", "# will be used as the extended context. Hence, we only cache", "\n", "# the tokens from `mlen + qlen - self.ext_len - self.mem_len`", "\n", "# to `mlen + qlen - self.ext_len`.", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "new_mems", "=", "[", "]", "\n", "end_idx", "=", "mlen", "+", "max", "(", "0", ",", "qlen", "-", "0", "-", "self", ".", "ext_len", ")", "\n", "beg_idx", "=", "max", "(", "0", ",", "end_idx", "-", "self", ".", "mem_len", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "hids", ")", ")", ":", "\n", "                ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", "[", "i", "]", ",", "hids", "[", "i", "]", "]", ",", "dim", "=", "0", ")", "\n", "new_mems", ".", "append", "(", "cat", "[", "beg_idx", ":", "end_idx", "]", ".", "detach", "(", ")", ")", "\n", "\n", "", "", "return", "new_mems", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.MemTransformerLM._forward": [[726, 823], ["dec_inp.size", "mem_transformer.MemTransformerLM.word_emb", "mem_transformer.MemTransformerLM.drop", "mem_transformer.MemTransformerLM._update_mems", "mems[].size", "mem_transformer.MemTransformerLM.new_ones", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mem_transformer.MemTransformerLM.pos_emb", "mem_transformer.MemTransformerLM.drop", "mem_transformer.MemTransformerLM.drop", "hids.append", "enumerate", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.arange.clamp_", "torch.arange.clamp_", "torch.arange.clamp_", "layer", "hids.append", "mem_transformer.MemTransformerLM.drop", "hids.append", "enumerate", "layer", "hids.append", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mem_transformer.MemTransformerLM.pos_emb", "mem_transformer.MemTransformerLM.drop", "hids.append", "enumerate", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.arange.clamp_", "torch.arange.clamp_", "torch.arange.clamp_", "layer", "hids.append", "mem_transformer.MemTransformerLM.drop", "hids.append", "enumerate", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "mem_transformer.MemTransformerLM.new_ones", "[].view", "layer", "hids.append", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.view", "torch.cat.view", "torch.cat.view", "cur_emb[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM._update_mems"], ["", "def", "_forward", "(", "self", ",", "dec_inp", ",", "mems", "=", "None", ")", ":", "\n", "        ", "qlen", ",", "bsz", "=", "dec_inp", ".", "size", "(", ")", "\n", "word_emb", "=", "self", ".", "word_emb", "(", "dec_inp", ")", "\n", "\n", "mlen", "=", "mems", "[", "0", "]", ".", "size", "(", "0", ")", "if", "mems", "is", "not", "None", "else", "0", "\n", "\n", "# @@@@@@@@@@@@@@@@@@@@", "\n", "klen", "=", "mlen", "+", "qlen", "\n", "\n", "if", "self", ".", "same_length", ":", "\n", "            ", "all_ones", "=", "word_emb", ".", "new_ones", "(", "qlen", ",", "klen", ")", "\n", "mask_len", "=", "klen", "-", "self", ".", "mem_len", "\n", "if", "mask_len", ">", "0", ":", "\n", "                ", "mask_shift_len", "=", "qlen", "-", "mask_len", "\n", "", "else", ":", "\n", "                ", "mask_shift_len", "=", "qlen", "\n", "", "dec_attn_mask", "=", "(", "torch", ".", "triu", "(", "all_ones", ",", "1", "+", "mlen", ")", "\n", "+", "torch", ".", "tril", "(", "all_ones", ",", "-", "mask_shift_len", ")", ")", ".", "byte", "(", ")", "[", ":", ",", ":", ",", "None", "]", "# -1", "\n", "", "else", ":", "\n", "            ", "dec_attn_mask", "=", "torch", ".", "triu", "(", "\n", "word_emb", ".", "new_ones", "(", "qlen", ",", "klen", ")", ",", "diagonal", "=", "1", "+", "mlen", ")", ".", "byte", "(", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "\n", "", "hids", "=", "[", "]", "\n", "if", "self", ".", "attn_type", "==", "0", ":", "# default", "\n", "            ", "pos_seq", "=", "torch", ".", "arange", "(", "klen", "-", "1", ",", "-", "1", ",", "-", "1.0", ",", "device", "=", "word_emb", ".", "device", ",", "\n", "dtype", "=", "word_emb", ".", "dtype", ")", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "pos_seq", ".", "clamp_", "(", "max", "=", "self", ".", "clamp_len", ")", "\n", "", "pos_emb", "=", "self", ".", "pos_emb", "(", "pos_seq", ")", "\n", "\n", "\n", "core_out", "=", "self", ".", "drop", "(", "word_emb", ")", "\n", "pos_emb", "=", "self", ".", "drop", "(", "pos_emb", ")", "\n", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "                ", "mems_i", "=", "None", "if", "mems", "is", "None", "else", "mems", "[", "i", "]", "\n", "core_out", "=", "layer", "(", "core_out", ",", "pos_emb", ",", "self", ".", "r_w_bias", ",", "\n", "self", ".", "r_r_bias", ",", "dec_attn_mask", "=", "dec_attn_mask", ",", "mems", "=", "mems_i", ")", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "", "", "elif", "self", ".", "attn_type", "==", "1", ":", "# learnable", "\n", "            ", "core_out", "=", "self", ".", "drop", "(", "word_emb", ")", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "                ", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                    ", "r_emb", "=", "self", ".", "r_emb", "[", "i", "]", "[", "-", "self", ".", "clamp_len", ":", "]", "\n", "r_bias", "=", "self", ".", "r_bias", "[", "i", "]", "[", "-", "self", ".", "clamp_len", ":", "]", "\n", "", "else", ":", "\n", "                    ", "r_emb", ",", "r_bias", "=", "self", ".", "r_emb", "[", "i", "]", ",", "self", ".", "r_bias", "[", "i", "]", "\n", "\n", "", "mems_i", "=", "None", "if", "mems", "is", "None", "else", "mems", "[", "i", "]", "\n", "core_out", "=", "layer", "(", "core_out", ",", "r_emb", ",", "self", ".", "r_w_bias", "[", "i", "]", ",", "\n", "r_bias", ",", "dec_attn_mask", "=", "dec_attn_mask", ",", "mems", "=", "mems_i", ")", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "", "", "elif", "self", ".", "attn_type", "==", "2", ":", "# absolute", "\n", "            ", "pos_seq", "=", "torch", ".", "arange", "(", "klen", "-", "1", ",", "-", "1", ",", "-", "1.0", ",", "device", "=", "word_emb", ".", "device", ",", "\n", "dtype", "=", "word_emb", ".", "dtype", ")", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "pos_seq", ".", "clamp_", "(", "max", "=", "self", ".", "clamp_len", ")", "\n", "", "pos_emb", "=", "self", ".", "pos_emb", "(", "pos_seq", ")", "\n", "\n", "core_out", "=", "self", ".", "drop", "(", "word_emb", "+", "pos_emb", "[", "-", "qlen", ":", "]", ")", "\n", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "                ", "mems_i", "=", "None", "if", "mems", "is", "None", "else", "mems", "[", "i", "]", "\n", "if", "mems_i", "is", "not", "None", "and", "i", "==", "0", ":", "\n", "                    ", "mems_i", "+=", "pos_emb", "[", ":", "mlen", "]", "\n", "", "core_out", "=", "layer", "(", "core_out", ",", "dec_attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems_i", ")", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "", "", "elif", "self", ".", "attn_type", "==", "3", ":", "\n", "            ", "core_out", "=", "self", ".", "drop", "(", "word_emb", ")", "\n", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "                ", "mems_i", "=", "None", "if", "mems", "is", "None", "else", "mems", "[", "i", "]", "\n", "if", "mems_i", "is", "not", "None", "and", "mlen", ">", "0", ":", "\n", "                    ", "cur_emb", "=", "self", ".", "r_emb", "[", "i", "]", "[", ":", "-", "qlen", "]", "\n", "cur_size", "=", "cur_emb", ".", "size", "(", "0", ")", "\n", "if", "cur_size", "<", "mlen", ":", "\n", "                        ", "cur_emb_pad", "=", "cur_emb", "[", "0", ":", "1", "]", ".", "expand", "(", "mlen", "-", "cur_size", ",", "-", "1", ",", "-", "1", ")", "\n", "cur_emb", "=", "torch", ".", "cat", "(", "[", "cur_emb_pad", ",", "cur_emb", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "                        ", "cur_emb", "=", "cur_emb", "[", "-", "mlen", ":", "]", "\n", "", "mems_i", "+=", "cur_emb", ".", "view", "(", "mlen", ",", "1", ",", "-", "1", ")", "\n", "", "core_out", "+=", "self", ".", "r_emb", "[", "i", "]", "[", "-", "qlen", ":", "]", ".", "view", "(", "qlen", ",", "1", ",", "-", "1", ")", "\n", "\n", "core_out", "=", "layer", "(", "core_out", ",", "dec_attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems_i", ")", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "\n", "", "", "core_out", "=", "self", ".", "drop", "(", "core_out", ")", "\n", "\n", "new_mems", "=", "self", ".", "_update_mems", "(", "hids", ",", "mems", ",", "mlen", ",", "qlen", ")", "\n", "\n", "return", "core_out", ",", "new_mems", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LANGUAGE MODELING.mem_transformer.MemTransformerLM.forward": [[824, 848], ["target.size", "mem_transformer.MemTransformerLM._forward", "mem_transformer.MemTransformerLM.init_mems", "log_uniform_sampler.sample_logits", "mem_transformer.MemTransformerLM.crit", "loss.view.view.view", "pred_hid.view", "target.view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "pred_hid.size"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM._forward", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.init_mems", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.log_uniform_sampler.sample_logits"], ["", "def", "forward", "(", "self", ",", "data", ",", "target", ",", "*", "mems", ")", ":", "\n", "# nn.DataParallel does not allow size(0) tensors to be broadcasted.", "\n", "# So, have to initialize size(0) mems inside the model forward.", "\n", "# Moreover, have to return new_mems to allow nn.DataParallel to piece", "\n", "# them together.", "\n", "        ", "if", "not", "mems", ":", "mems", "=", "self", ".", "init_mems", "(", ")", "\n", "\n", "tgt_len", "=", "target", ".", "size", "(", "0", ")", "\n", "hidden", ",", "new_mems", "=", "self", ".", "_forward", "(", "data", ",", "mems", "=", "mems", ")", "\n", "\n", "pred_hid", "=", "hidden", "[", "-", "tgt_len", ":", "]", "\n", "if", "self", ".", "sample_softmax", ">", "0", "and", "self", ".", "training", ":", "\n", "            ", "assert", "self", ".", "tie_weight", "\n", "logit", "=", "sample_logits", "(", "self", ".", "word_emb", ",", "\n", "self", ".", "out_layer", ".", "bias", ",", "target", ",", "pred_hid", ",", "self", ".", "sampler", ")", "\n", "loss", "=", "-", "F", ".", "log_softmax", "(", "logit", ",", "-", "1", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "crit", "(", "pred_hid", ".", "view", "(", "-", "1", ",", "pred_hid", ".", "size", "(", "-", "1", ")", ")", ",", "target", ".", "view", "(", "-", "1", ")", ")", "\n", "loss", "=", "loss", ".", "view", "(", "tgt_len", ",", "-", "1", ")", "\n", "\n", "", "if", "new_mems", "is", "None", ":", "\n", "            ", "return", "[", "loss", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "loss", "]", "+", "new_mems", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.data_utils.LMOrderedIterator.__init__": [[11, 32], ["data.narrow.narrow.narrow", "data.narrow.narrow.view().t().contiguous().to", "data.narrow.narrow.size", "data.narrow.narrow.view().t().contiguous", "data.narrow.narrow.view().t", "data.narrow.narrow.view"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "bsz", ",", "bptt", ",", "device", "=", "'cpu'", ",", "ext_len", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            data -- LongTensor -- the LongTensor is strictly ordered\n        \"\"\"", "\n", "self", ".", "bsz", "=", "bsz", "\n", "self", ".", "bptt", "=", "bptt", "\n", "self", ".", "ext_len", "=", "ext_len", "if", "ext_len", "is", "not", "None", "else", "0", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "# Work out how cleanly we can divide the dataset into bsz parts.", "\n", "self", ".", "n_step", "=", "data", ".", "size", "(", "0", ")", "//", "bsz", "\n", "\n", "# Trim off any extra elements that wouldn't cleanly fit (remainders).", "\n", "data", "=", "data", ".", "narrow", "(", "0", ",", "0", ",", "self", ".", "n_step", "*", "bsz", ")", "\n", "\n", "# Evenly divide the data across the bsz batches.", "\n", "self", ".", "data", "=", "data", ".", "view", "(", "bsz", ",", "-", "1", ")", ".", "t", "(", ")", ".", "contiguous", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Number of mini-batches", "\n", "self", ".", "n_batch", "=", "(", "self", ".", "n_step", "+", "self", ".", "bptt", "-", "1", ")", "//", "self", ".", "bptt", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.data_utils.LMOrderedIterator.get_batch": [[33, 44], ["min", "max", "data_utils.LMOrderedIterator.data.size"], "methods", ["None"], ["", "def", "get_batch", "(", "self", ",", "i", ",", "bptt", "=", "None", ")", ":", "\n", "        ", "if", "bptt", "is", "None", ":", "bptt", "=", "self", ".", "bptt", "\n", "seq_len", "=", "min", "(", "bptt", ",", "self", ".", "data", ".", "size", "(", "0", ")", "-", "1", "-", "i", ")", "\n", "\n", "end_idx", "=", "i", "+", "seq_len", "\n", "beg_idx", "=", "max", "(", "0", ",", "i", "-", "self", ".", "ext_len", ")", "\n", "\n", "data", "=", "self", ".", "data", "[", "beg_idx", ":", "end_idx", "]", "\n", "target", "=", "self", ".", "data", "[", "i", "+", "1", ":", "i", "+", "1", "+", "seq_len", "]", "\n", "\n", "return", "data", ",", "target", ",", "seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.data_utils.LMOrderedIterator.get_fixlen_iter": [[45, 48], ["range", "data_utils.LMOrderedIterator.data.size", "data_utils.LMOrderedIterator.get_batch"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMOrderedIterator.get_batch"], ["", "def", "get_fixlen_iter", "(", "self", ",", "start", "=", "0", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "start", ",", "self", ".", "data", ".", "size", "(", "0", ")", "-", "1", ",", "self", ".", "bptt", ")", ":", "\n", "            ", "yield", "self", ".", "get_batch", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.data_utils.LMOrderedIterator.get_varlen_iter": [[49, 60], ["min", "data_utils.LMOrderedIterator.get_batch", "max", "numpy.random.random", "int", "data_utils.LMOrderedIterator.data.size", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMOrderedIterator.get_batch"], ["", "", "def", "get_varlen_iter", "(", "self", ",", "start", "=", "0", ",", "std", "=", "5", ",", "min_len", "=", "5", ",", "max_deviation", "=", "3", ")", ":", "\n", "        ", "max_len", "=", "self", ".", "bptt", "+", "max_deviation", "*", "std", "\n", "i", "=", "start", "\n", "while", "True", ":", "\n", "            ", "bptt", "=", "self", ".", "bptt", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.95", "else", "self", ".", "bptt", "/", "2.", "\n", "bptt", "=", "min", "(", "max_len", ",", "max", "(", "min_len", ",", "int", "(", "np", ".", "random", ".", "normal", "(", "bptt", ",", "std", ")", ")", ")", ")", "\n", "data", ",", "target", ",", "seq_len", "=", "self", ".", "get_batch", "(", "i", ",", "bptt", ")", "\n", "i", "+=", "seq_len", "\n", "yield", "data", ",", "target", ",", "seq_len", "\n", "if", "i", ">=", "self", ".", "data", ".", "size", "(", "0", ")", "-", "2", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.data_utils.LMOrderedIterator.__iter__": [[61, 63], ["data_utils.LMOrderedIterator.get_fixlen_iter"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMOrderedIterator.get_fixlen_iter"], ["", "", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_fixlen_iter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.data_utils.LMShuffledIterator.__init__": [[66, 78], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "bsz", ",", "bptt", ",", "device", "=", "'cpu'", ",", "ext_len", "=", "None", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n            data -- list[LongTensor] -- there is no order among the LongTensors\n        \"\"\"", "\n", "self", ".", "data", "=", "data", "\n", "\n", "self", ".", "bsz", "=", "bsz", "\n", "self", ".", "bptt", "=", "bptt", "\n", "self", ".", "ext_len", "=", "ext_len", "if", "ext_len", "is", "not", "None", "else", "0", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.data_utils.LMShuffledIterator.get_sent_stream": [[79, 87], ["numpy.random.permutation", "numpy.array", "len", "range", "len"], "methods", ["None"], ["", "def", "get_sent_stream", "(", "self", ")", ":", "\n", "# index iterator", "\n", "        ", "epoch_indices", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "data", ")", ")", "if", "self", ".", "shuffle", "else", "np", ".", "array", "(", "range", "(", "len", "(", "self", ".", "data", ")", ")", ")", "\n", "\n", "# sentence iterator", "\n", "for", "idx", "in", "epoch_indices", ":", "\n", "            ", "yield", "self", ".", "data", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.data_utils.LMShuffledIterator.stream_iterator": [[88, 136], ["torch.LongTensor", "torch.LongTensor", "data[].fill_", "target.to.to.fill_", "range", "data.to.to.to", "target.to.to.to", "min", "data.to.to.resize_", "data.to.to.size", "data.to.to.size", "min", "next", "len", "len"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.next"], ["", "", "def", "stream_iterator", "(", "self", ",", "sent_stream", ")", ":", "\n", "# streams for each data in the batch", "\n", "        ", "streams", "=", "[", "None", "]", "*", "self", ".", "bsz", "\n", "\n", "data", "=", "torch", ".", "LongTensor", "(", "self", ".", "bptt", ",", "self", ".", "bsz", ")", "\n", "target", "=", "torch", ".", "LongTensor", "(", "self", ".", "bptt", ",", "self", ".", "bsz", ")", "\n", "\n", "n_retain", "=", "0", "\n", "\n", "while", "True", ":", "\n", "# data   : [n_retain+bptt x bsz]", "\n", "# target : [bptt x bsz]", "\n", "            ", "data", "[", "n_retain", ":", "]", ".", "fill_", "(", "-", "1", ")", "\n", "target", ".", "fill_", "(", "-", "1", ")", "\n", "\n", "valid_batch", "=", "True", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "bsz", ")", ":", "\n", "                ", "n_filled", "=", "0", "\n", "try", ":", "\n", "                    ", "while", "n_filled", "<", "self", ".", "bptt", ":", "\n", "                        ", "if", "streams", "[", "i", "]", "is", "None", "or", "len", "(", "streams", "[", "i", "]", ")", "<=", "1", ":", "\n", "                            ", "streams", "[", "i", "]", "=", "next", "(", "sent_stream", ")", "\n", "# number of new tokens to fill in", "\n", "", "n_new", "=", "min", "(", "len", "(", "streams", "[", "i", "]", ")", "-", "1", ",", "self", ".", "bptt", "-", "n_filled", ")", "\n", "# first n_retain tokens are retained from last batch", "\n", "data", "[", "n_retain", "+", "n_filled", ":", "n_retain", "+", "n_filled", "+", "n_new", ",", "i", "]", "=", "streams", "[", "i", "]", "[", ":", "n_new", "]", "\n", "target", "[", "n_filled", ":", "n_filled", "+", "n_new", ",", "i", "]", "=", "streams", "[", "i", "]", "[", "1", ":", "n_new", "+", "1", "]", "\n", "streams", "[", "i", "]", "=", "streams", "[", "i", "]", "[", "n_new", ":", "]", "\n", "n_filled", "+=", "n_new", "\n", "", "", "except", "StopIteration", ":", "\n", "                    ", "valid_batch", "=", "False", "\n", "break", "\n", "\n", "", "", "if", "not", "valid_batch", ":", "\n", "                ", "return", "\n", "\n", "", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "yield", "data", ",", "target", ",", "self", ".", "bptt", "\n", "\n", "n_retain", "=", "min", "(", "data", ".", "size", "(", "0", ")", ",", "self", ".", "ext_len", ")", "\n", "if", "n_retain", ">", "0", ":", "\n", "                ", "data", "[", ":", "n_retain", "]", "=", "data", "[", "-", "n_retain", ":", "]", "\n", "", "data", ".", "resize_", "(", "n_retain", "+", "self", ".", "bptt", ",", "data", ".", "size", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.data_utils.LMShuffledIterator.__iter__": [[137, 143], ["data_utils.LMShuffledIterator.get_sent_stream", "data_utils.LMShuffledIterator.stream_iterator"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMMultiFileIterator.get_sent_stream", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMShuffledIterator.stream_iterator"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "# sent_stream is an iterator", "\n", "        ", "sent_stream", "=", "self", ".", "get_sent_stream", "(", ")", "\n", "\n", "for", "batch", "in", "self", ".", "stream_iterator", "(", "sent_stream", ")", ":", "\n", "            ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.data_utils.LMMultiFileIterator.__init__": [[146, 158], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "paths", ",", "vocab", ",", "bsz", ",", "bptt", ",", "device", "=", "'cpu'", ",", "ext_len", "=", "None", ",", "\n", "shuffle", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "paths", "=", "paths", "\n", "self", ".", "vocab", "=", "vocab", "\n", "\n", "self", ".", "bsz", "=", "bsz", "\n", "self", ".", "bptt", "=", "bptt", "\n", "self", ".", "ext_len", "=", "ext_len", "if", "ext_len", "is", "not", "None", "else", "0", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.data_utils.LMMultiFileIterator.get_sent_stream": [[159, 166], ["data_utils.LMMultiFileIterator.vocab.encode_file", "iter", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle"], ["", "def", "get_sent_stream", "(", "self", ",", "path", ")", ":", "\n", "        ", "sents", "=", "self", ".", "vocab", ".", "encode_file", "(", "path", ",", "add_double_eos", "=", "True", ")", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "sents", ")", "\n", "", "sent_stream", "=", "iter", "(", "sents", ")", "\n", "\n", "return", "sent_stream", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.data_utils.LMMultiFileIterator.__iter__": [[167, 176], ["numpy.random.shuffle", "data_utils.LMMultiFileIterator.get_sent_stream", "data_utils.LMMultiFileIterator.stream_iterator"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMMultiFileIterator.get_sent_stream", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMShuffledIterator.stream_iterator"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "paths", ")", "\n", "\n", "", "for", "path", "in", "self", ".", "paths", ":", "\n", "# sent_stream is an iterator", "\n", "            ", "sent_stream", "=", "self", ".", "get_sent_stream", "(", "path", ")", "\n", "for", "batch", "in", "self", ".", "stream_iterator", "(", "sent_stream", ")", ":", "\n", "                ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.data_utils.Corpus.__init__": [[179, 218], ["utils.vocabulary.Vocab", "data_utils.Corpus.vocab.build_vocab", "data_utils.Corpus.vocab.count_file", "data_utils.Corpus.vocab.count_file", "data_utils.Corpus.vocab.count_file", "data_utils.Corpus.vocab.encode_file", "data_utils.Corpus.vocab.encode_file", "data_utils.Corpus.vocab.encode_file", "os.path.join", "os.path.join", "os.path.join", "data_utils.Corpus.vocab.count_file", "os.path.join", "os.path.join", "os.path.join", "data_utils.Corpus.vocab.encode_file", "data_utils.Corpus.vocab.encode_file", "data_utils.Corpus.vocab.encode_file", "os.path.join", "os.path.join", "glob.glob", "os.path.join", "os.path.join", "os.path.join", "data_utils.Corpus.vocab.encode_file", "data_utils.Corpus.vocab.encode_file", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.build_vocab", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.count_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.count_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.count_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.count_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_file"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "dataset", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "vocab", "=", "Vocab", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'enwik8'", ",", "'text8'", "]", ":", "\n", "            ", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ")", "\n", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ")", "\n", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'wt103'", ":", "\n", "            ", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "            ", "train_path_pattern", "=", "os", ".", "path", ".", "join", "(", "\n", "path", ",", "'1-billion-word-language-modeling-benchmark-r13output'", ",", "\n", "'training-monolingual.tokenized.shuffled'", ",", "'news.en-*'", ")", "\n", "train_paths", "=", "glob", ".", "glob", "(", "train_path_pattern", ")", "\n", "# the vocab will load from file when build_vocab() is called", "\n", "\n", "", "self", ".", "vocab", ".", "build_vocab", "(", ")", "\n", "\n", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'wt103'", "]", ":", "\n", "            ", "self", ".", "train", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ",", "ordered", "=", "True", ")", "\n", "self", ".", "valid", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ",", "ordered", "=", "True", ")", "\n", "self", ".", "test", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ",", "ordered", "=", "True", ")", "\n", "", "elif", "self", ".", "dataset", "in", "[", "'enwik8'", ",", "'text8'", "]", ":", "\n", "            ", "self", ".", "train", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ",", "ordered", "=", "True", ",", "add_eos", "=", "False", ")", "\n", "self", ".", "valid", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ",", "ordered", "=", "True", ",", "add_eos", "=", "False", ")", "\n", "self", ".", "test", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ",", "ordered", "=", "True", ",", "add_eos", "=", "False", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "            ", "self", ".", "train", "=", "train_paths", "\n", "self", ".", "valid", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ",", "ordered", "=", "False", ",", "add_double_eos", "=", "True", ")", "\n", "self", ".", "test", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ",", "ordered", "=", "False", ",", "add_double_eos", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.data_utils.Corpus.get_iterator": [[219, 234], ["data_utils.LMOrderedIterator", "data_utils.LMMultiFileIterator", "data_utils.LMOrderedIterator", "data_utils.LMShuffledIterator"], "methods", ["None"], ["", "", "def", "get_iterator", "(", "self", ",", "split", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'wt103'", ",", "'enwik8'", ",", "'text8'", "]", ":", "\n", "                ", "data_iter", "=", "LMOrderedIterator", "(", "self", ".", "train", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "                ", "kwargs", "[", "'shuffle'", "]", "=", "True", "\n", "data_iter", "=", "LMMultiFileIterator", "(", "self", ".", "train", ",", "self", ".", "vocab", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "elif", "split", "in", "[", "'valid'", ",", "'test'", "]", ":", "\n", "            ", "data", "=", "self", ".", "valid", "if", "split", "==", "'valid'", "else", "self", ".", "test", "\n", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'wt103'", ",", "'enwik8'", ",", "'text8'", "]", ":", "\n", "                ", "data_iter", "=", "LMOrderedIterator", "(", "data", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "                ", "data_iter", "=", "LMShuffledIterator", "(", "data", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "return", "data_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.data_utils.get_lm_corpus": [[236, 261], ["os.path.join", "os.path.exists", "print", "torch.load", "print", "data_utils.Corpus", "torch.save", "os.path.join"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load"], ["", "", "def", "get_lm_corpus", "(", "datadir", ",", "dataset", ")", ":", "\n", "    ", "fn", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'cache.pt'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "fn", ")", ":", "\n", "        ", "print", "(", "'Loading cached dataset...'", ")", "\n", "corpus", "=", "torch", ".", "load", "(", "fn", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Producing dataset {}...'", ".", "format", "(", "dataset", ")", ")", "\n", "kwargs", "=", "{", "}", "\n", "if", "dataset", "in", "[", "'wt103'", ",", "'wt2'", "]", ":", "\n", "            ", "kwargs", "[", "'special'", "]", "=", "[", "'<eos>'", "]", "\n", "kwargs", "[", "'lower_case'", "]", "=", "False", "\n", "", "elif", "dataset", "==", "'ptb'", ":", "\n", "            ", "kwargs", "[", "'special'", "]", "=", "[", "'<eos>'", "]", "\n", "kwargs", "[", "'lower_case'", "]", "=", "True", "\n", "", "elif", "dataset", "==", "'lm1b'", ":", "\n", "            ", "kwargs", "[", "'special'", "]", "=", "[", "]", "\n", "kwargs", "[", "'lower_case'", "]", "=", "False", "\n", "kwargs", "[", "'vocab_file'", "]", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'1b_word_vocab.txt'", ")", "\n", "", "elif", "dataset", "in", "[", "'enwik8'", ",", "'text8'", "]", ":", "\n", "            ", "pass", "\n", "\n", "", "corpus", "=", "Corpus", "(", "datadir", ",", "dataset", ",", "**", "kwargs", ")", "\n", "torch", ".", "save", "(", "corpus", ",", "fn", ")", "\n", "\n", "", "return", "corpus", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.PositionalEmbedding.__init__": [[16, 23], ["torch.Module.__init__", "mem_transformer.PositionalEmbedding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "demb", ")", ":", "\n", "        ", "super", "(", "PositionalEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "demb", "=", "demb", "\n", "\n", "inv_freq", "=", "1", "/", "(", "10000", "**", "(", "torch", ".", "arange", "(", "0.0", ",", "demb", ",", "2.0", ")", "/", "demb", ")", ")", "\n", "self", ".", "register_buffer", "(", "'inv_freq'", ",", "inv_freq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.PositionalEmbedding.forward": [[24, 32], ["torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pos_emb[].expand", "torch.ger.sin", "torch.ger.sin", "torch.ger.sin", "torch.ger.cos", "torch.ger.cos", "torch.ger.cos"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pos_seq", ",", "bsz", "=", "None", ")", ":", "\n", "        ", "sinusoid_inp", "=", "torch", ".", "ger", "(", "pos_seq", ",", "self", ".", "inv_freq", ")", "\n", "pos_emb", "=", "torch", ".", "cat", "(", "[", "sinusoid_inp", ".", "sin", "(", ")", ",", "sinusoid_inp", ".", "cos", "(", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "bsz", "is", "not", "None", ":", "\n", "            ", "return", "pos_emb", "[", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "-", "1", ",", "bsz", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "pos_emb", "[", ":", ",", "None", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.PositionwiseFF.__init__": [[35, 52], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "dropout", ",", "pre_lnorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "PositionwiseFF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_inner", "=", "d_inner", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "CoreNet", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "d_model", ",", "d_inner", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "d_inner", ",", "d_model", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", ")", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.PositionwiseFF.forward": [[53, 68], ["mem_transformer.PositionwiseFF.CoreNet", "mem_transformer.PositionwiseFF.CoreNet", "mem_transformer.PositionwiseFF.layer_norm", "mem_transformer.PositionwiseFF.layer_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization + positionwise feed-forward", "\n", "            ", "core_out", "=", "self", ".", "CoreNet", "(", "self", ".", "layer_norm", "(", "inp", ")", ")", "\n", "\n", "##### residual connection", "\n", "output", "=", "core_out", "+", "inp", "\n", "", "else", ":", "\n", "##### positionwise feed-forward", "\n", "            ", "core_out", "=", "self", ".", "CoreNet", "(", "inp", ")", "\n", "\n", "##### residual connection + layer normalization", "\n", "output", "=", "self", ".", "layer_norm", "(", "inp", "+", "core_out", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.MultiHeadAttn.__init__": [[70, 91], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["", "", "class", "MultiHeadAttn", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "dropatt", "=", "0", ",", "\n", "pre_lnorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "q_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "self", ".", "kv_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "2", "*", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropatt", "=", "nn", ".", "Dropout", "(", "dropatt", ")", "\n", "self", ".", "o_net", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_head", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "scale", "=", "1", "/", "(", "d_head", "**", "0.5", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.MultiHeadAttn.forward": [[92, 142], ["mem_transformer.MultiHeadAttn.q_net", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "head_q.view.view.view", "head_k.view.view.view", "head_v.view.view.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.mul_", "torch.einsum.mul_", "torch.einsum.mul_", "torch.softmax", "torch.softmax", "torch.softmax", "mem_transformer.MultiHeadAttn.dropatt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec.contiguous().view.contiguous().view.contiguous().view", "mem_transformer.MultiHeadAttn.o_net", "mem_transformer.MultiHeadAttn.drop", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mem_transformer.MultiHeadAttn.layer_norm", "mem_transformer.MultiHeadAttn.kv_net", "h.size", "h.size", "mem_transformer.MultiHeadAttn.size", "mem_transformer.MultiHeadAttn.size", "mem_transformer.MultiHeadAttn.size", "mem_transformer.MultiHeadAttn.size", "attn_mask.any().item", "attn_vec.contiguous().view.contiguous().view.size", "attn_vec.contiguous().view.contiguous().view.size", "mem_transformer.MultiHeadAttn.layer_norm", "attn_mask.dim", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "attn_vec.contiguous().view.contiguous().view.contiguous", "attn_mask.any", "attn_mask.dim", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "float", "float"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "h", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "##### multihead attention", "\n", "# [hlen x bsz x n_head x d_head]", "\n", "\n", "        ", "if", "mems", "is", "not", "None", ":", "\n", "            ", "c", "=", "torch", ".", "cat", "(", "[", "mems", ",", "h", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "c", "=", "h", "\n", "\n", "", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization", "\n", "            ", "c", "=", "self", ".", "layer_norm", "(", "c", ")", "\n", "\n", "", "head_q", "=", "self", ".", "q_net", "(", "h", ")", "\n", "head_k", ",", "head_v", "=", "torch", ".", "chunk", "(", "self", ".", "kv_net", "(", "c", ")", ",", "2", ",", "-", "1", ")", "\n", "\n", "head_q", "=", "head_q", ".", "view", "(", "h", ".", "size", "(", "0", ")", ",", "h", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "head_k", "=", "head_k", ".", "view", "(", "c", ".", "size", "(", "0", ")", ",", "c", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "head_v", "=", "head_v", ".", "view", "(", "c", ".", "size", "(", "0", ")", ",", "c", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "attn_score", "=", "torch", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "(", "head_q", ",", "head_k", ")", ")", "\n", "attn_score", ".", "mul_", "(", "self", ".", "scale", ")", "\n", "if", "attn_mask", "is", "not", "None", "and", "attn_mask", ".", "any", "(", ")", ".", "item", "(", ")", ":", "\n", "            ", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", "None", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "1", ")", "\n", "attn_prob", "=", "self", ".", "dropatt", "(", "attn_prob", ")", "\n", "\n", "# [qlen x klen x bsz x n_head] + [klen x bsz x n_head x d_head] -> [qlen x bsz x n_head x d_head]", "\n", "attn_vec", "=", "torch", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "(", "attn_prob", ",", "head_v", ")", ")", "\n", "attn_vec", "=", "attn_vec", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "attn_vec", ".", "size", "(", "0", ")", ",", "attn_vec", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### residual connection", "\n", "            ", "output", "=", "h", "+", "attn_out", "\n", "", "else", ":", "\n", "##### residual connection + layer normalization", "\n", "            ", "output", "=", "self", ".", "layer_norm", "(", "h", "+", "attn_out", ")", "\n", "\n", "", "return", "output", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.RelMultiHeadAttn.__init__": [[144, 164], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["\n", "", "", "class", "RelMultiHeadAttn", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "dropatt", "=", "0", ",", "\n", "tgt_len", "=", "None", ",", "ext_len", "=", "None", ",", "mem_len", "=", "None", ",", "pre_lnorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "RelMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "qkv_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "3", "*", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropatt", "=", "nn", ".", "Dropout", "(", "dropatt", ")", "\n", "\n", "self", ".", "o_net", "=", "nn", ".", "Linear", "(", "30", "*", "30", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "# self.o_net_1 = nn.Linear(13 * 13, d_model, bias=False)", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.RelMultiHeadAttn._parallelogram_mask": [[165, 175], ["torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "min", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.ones().byte.flip", "torch.ones().byte.flip", "torch.ones().byte.flip", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["self", ".", "scale", "=", "1", "/", "(", "d_head", "**", "0.5", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n", "", "def", "_parallelogram_mask", "(", "self", ",", "h", ",", "w", ",", "left", "=", "False", ")", ":", "\n", "        ", "mask", "=", "torch", ".", "ones", "(", "(", "h", ",", "w", ")", ")", ".", "byte", "(", ")", "\n", "m", "=", "min", "(", "h", ",", "w", ")", "\n", "mask", "[", ":", "m", ",", ":", "m", "]", "=", "torch", ".", "triu", "(", "mask", "[", ":", "m", ",", ":", "m", "]", ")", "\n", "mask", "[", "-", "m", ":", ",", "-", "m", ":", "]", "=", "torch", ".", "tril", "(", "mask", "[", "-", "m", ":", ",", "-", "m", ":", "]", ")", "\n", "\n", "if", "left", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.RelMultiHeadAttn._shift": [[176, 193], ["torch.cat().expand.masked_select().view", "torch.cat().expand.masked_select().view", "torch.cat().expand.masked_select().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "mask.flip.flip.flip", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select", "torch.cat().expand.masked_select", "torch.cat().expand.masked_select", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select().view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["            ", "return", "mask", "\n", "", "else", ":", "\n", "            ", "return", "mask", ".", "flip", "(", "0", ")", "\n", "\n", "", "", "def", "_shift", "(", "self", ",", "x", ",", "qlen", ",", "klen", ",", "mask", ",", "left", "=", "False", ")", ":", "\n", "        ", "if", "qlen", ">", "1", ":", "\n", "            ", "zero_pad", "=", "torch", ".", "zeros", "(", "(", "x", ".", "size", "(", "0", ")", ",", "qlen", "-", "1", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ",", "\n", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "zero_pad", "=", "torch", ".", "zeros", "(", "0", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "\n", "", "if", "left", ":", "\n", "            ", "mask", "=", "mask", ".", "flip", "(", "1", ")", "\n", "x_padded", "=", "torch", ".", "cat", "(", "[", "zero_pad", ",", "x", "]", ",", "dim", "=", "1", ")", ".", "expand", "(", "qlen", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x_padded", "=", "torch", ".", "cat", "(", "[", "x", ",", "zero_pad", "]", ",", "dim", "=", "1", ")", ".", "expand", "(", "qlen", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "", "x", "=", "x_padded", ".", "masked_select", "(", "mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", ")"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.RelMultiHeadAttn._rel_shift": [[194, 208], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_padded.view.view.view", "x_padded[].view_as", "x_padded[].view_as.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size"], "methods", ["None"], [".", "view", "(", "qlen", ",", "klen", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "\n", "return", "x", "\n", "\n", "", "def", "_rel_shift", "(", "self", ",", "x", ",", "zero_triu", "=", "False", ")", ":", "\n", "        ", "zero_pad", "=", "torch", ".", "zeros", "(", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ",", "\n", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "x_padded", "=", "torch", ".", "cat", "(", "[", "zero_pad", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x_padded", "=", "x_padded", ".", "view", "(", "x", ".", "size", "(", "1", ")", "+", "1", ",", "x", ".", "size", "(", "0", ")", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "x", "=", "x_padded", "[", "1", ":", "]", ".", "view_as", "(", "x", ")", "\n", "\n", "if", "zero_triu", ":", "\n", "            ", "ones", "=", "torch", ".", "ones", "(", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.RelMultiHeadAttn.forward": [[209, 211], ["None"], "methods", ["None"], ["x", "=", "x", "*", "torch", ".", "tril", "(", "ones", ",", "x", ".", "size", "(", "1", ")", "-", "x", ".", "size", "(", "0", ")", ")", "[", ":", ",", ":", ",", "None", ",", "None", "]", "\n", "\n", "", "return", "x", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.RelPartialLearnableMultiHeadAttn.__init__": [[213, 217], ["mem_transformer.RelMultiHeadAttn.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["", "def", "forward", "(", "self", ",", "w", ",", "r", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "\n", "", "", "class", "RelPartialLearnableMultiHeadAttn", "(", "RelMultiHeadAttn", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.RelPartialLearnableMultiHeadAttn.forward": [[218, 293], ["w_head_k.view.view.size", "w_head_q.view.view.view", "w_head_k.view.view.view", "w_head_v.view.view.view", "mem_transformer.RelPartialLearnableMultiHeadAttn.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "mem_transformer.RelPartialLearnableMultiHeadAttn._rel_shift", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.mul_", "torch.softmax", "torch.softmax", "torch.softmax", "mem_transformer.RelPartialLearnableMultiHeadAttn.dropatt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec.contiguous().view.contiguous().view.contiguous().view", "mem_transformer.RelPartialLearnableMultiHeadAttn.o_net", "mem_transformer.RelPartialLearnableMultiHeadAttn.drop", "w.size", "r.size", "w.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mem_transformer.RelPartialLearnableMultiHeadAttn.r_net", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "mem_transformer.RelPartialLearnableMultiHeadAttn.r_net", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "attn_mask.any().item", "attn_vec.contiguous().view.contiguous().view.size", "attn_vec.contiguous().view.contiguous().view.size", "mem_transformer.RelPartialLearnableMultiHeadAttn.layer_norm", "mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net", "mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net", "mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net", "mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net", "attn_mask.dim", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill().type_as", "attn_vec.contiguous().view.contiguous().view.contiguous", "mem_transformer.RelPartialLearnableMultiHeadAttn.layer_norm", "mem_transformer.RelPartialLearnableMultiHeadAttn.layer_norm", "attn_mask.any", "attn_mask.dim", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill().type_as", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float", "float", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float", "float"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelMultiHeadAttn._rel_shift"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelPartialLearnableMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "r_net", "=", "nn", ".", "Linear", "(", "self", ".", "d_model", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ",", "bias", "=", "False", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "w", ",", "r", ",", "r_w_bias", ",", "r_r_bias", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "qlen", ",", "rlen", ",", "bsz", "=", "w", ".", "size", "(", "0", ")", ",", "r", ".", "size", "(", "0", ")", ",", "w", ".", "size", "(", "1", ")", "\n", "\n", "# print('qlen', qlen)", "\n", "# print('rlen', rlen)", "\n", "# print('mems.size():', mems.size())", "\n", "# # print('bsz', bsz)", "\n", "# # 30.60.410", "\n", "# print('W:', w.size())", "\n", "# # 30, 1,410", "\n", "# print('r:', r.size())", "\n", "\n", "if", "mems", "is", "not", "None", ":", "\n", "            ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", ",", "w", "]", ",", "0", ")", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "cat", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "cat", ")", "\n", "", "r_head_k", "=", "self", ".", "r_net", "(", "r", ")", "\n", "\n", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "w_head_q", "=", "w_head_q", "[", "-", "qlen", ":", "]", "\n", "w_head_k", "=", "w_head_k", "[", "-", "qlen", ":", "]", "\n", "w_head_v", "=", "w_head_v", "[", "-", "qlen", ":", "]", "\n", "r_head_k", "=", "r_head_k", "[", "-", "qlen", ":", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "w", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "w", ")", "\n", "", "r_head_k", "=", "self", ".", "r_net", "(", "r", ")", "\n", "# r_head_k = r_head_k[-qlen:]", "\n", "\n", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "klen", "=", "w_head_k", ".", "size", "(", "0", ")", "\n", "\n", "# print('klen', klen)", "\n", "# print('w_head:', w_heads.size())", "\n", "# # print(w_head_k.size())", "\n", "# print('r_head_k:', r_head_k.size())", "\n", "# print(\"___________________________________\")", "\n", "\n", "w_head_q", "=", "w_head_q", ".", "view", "(", "qlen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x bsz x n_head x d_head", "\n", "w_head_k", "=", "w_head_k", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# klen x bsz x n_head x d_head", "\n", "w_head_v", "=", "w_head_v", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# klen x bsz x n_head x d_head", "\n", "\n", "r_head_k", "=", "r_head_k", ".", "view", "(", "klen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x n_head x d_head", "\n", "\n", "rw_head_q", "=", "w_head_q", "+", "r_w_bias", "# qlen x bsz x n_head x d_head", "\n", "rr_head_q", "=", "w_head_q", "+", "r_r_bias", "\n", "\n", "# tucker decomposition", "\n", "cores_1", "=", "torch", ".", "zeros", "(", "[", "self", ".", "d_head", ",", "self", ".", "d_head", ",", "self", ".", "d_head", "]", ")", ".", "cuda", "(", ")", "\n", "cores_2", "=", "torch", ".", "zeros", "(", "[", "self", ".", "d_head", ",", "self", ".", "d_head", ",", "self", ".", "d_head", "]", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "d_head", ")", ":", "\n", "            ", "cores_1", "[", "i", "]", "[", "i", "]", "[", "i", "]", "=", "initCore", "[", "0", "]", "[", "i", "]", "\n", "cores_2", "[", "i", "]", "[", "i", "]", "[", "i", "]", "=", "initCore", "[", "1", "]", "[", "i", "]", "\n", "\n", "# cores_1[i][i][i] = initCore[0][i]", "\n", "\n", "# print(r_head_k.size())", "\n", "\n", "", "factor_k_2", "=", "r_head_k", ".", "view", "(", "qlen", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "full_matrixs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bsz", ")", ":", "\n", "            ", "factor_q_1", "=", "rw_head_q", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "view", "(", "qlen", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "factor_k", "=", "w_head_k", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "view", "(", "qlen", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "factor_v", "=", "w_head_v", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "view", "(", "qlen", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "full_matrix_1", "=", "torch", ".", "einsum", "(", "'pqr, ip,jq,kr->ijk'", ",", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.RelLearnableMultiHeadAttn.__init__": [[295, 297], ["mem_transformer.RelMultiHeadAttn.__init__"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["\n", "factor_q_2", "=", "rr_head_q", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "view", "(", "qlen", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "full_matrix_2", "=", "torch", ".", "einsum", "(", "'pqr, ip,jq,kr->ijk'", ",", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.RelLearnableMultiHeadAttn.forward": [[298, 378], ["w_head_k.view.view.size", "w_head_q.view.view.view", "w_head_k.view.view.view", "w_head_v.view.view.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "mem_transformer.RelLearnableMultiHeadAttn._rel_shift", "attn_score.mul_", "torch.softmax", "torch.softmax", "torch.softmax", "mem_transformer.RelLearnableMultiHeadAttn.dropatt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec.contiguous().view.contiguous().view.contiguous().view", "mem_transformer.RelLearnableMultiHeadAttn.o_net", "mem_transformer.RelLearnableMultiHeadAttn.drop", "w.size", "w.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat.size", "torch.cat.size", "torch.cat.size", "r_emb[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "r_bias[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attn_mask.any().item", "attn_vec.contiguous().view.contiguous().view.size", "attn_vec.contiguous().view.contiguous().view.size", "mem_transformer.RelLearnableMultiHeadAttn.layer_norm", "mem_transformer.RelLearnableMultiHeadAttn.qkv_net", "mem_transformer.RelLearnableMultiHeadAttn.qkv_net", "mem_transformer.RelLearnableMultiHeadAttn.qkv_net", "mem_transformer.RelLearnableMultiHeadAttn.qkv_net", "attn_mask.dim", "attn_score.masked_fill_", "attn_vec.contiguous().view.contiguous().view.contiguous", "mem_transformer.RelLearnableMultiHeadAttn.layer_norm", "mem_transformer.RelLearnableMultiHeadAttn.layer_norm", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "attn_mask.any", "attn_mask.dim", "attn_score.masked_fill_", "float", "float"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelMultiHeadAttn._rel_shift"], ["[", "cores_1", ",", "factor_q_2", ",", "factor_k_2", ",", "factor_v", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "qlen", ",", "-", "1", ")", "\n", "# full_matrixs.append(full_matrix_1 + full_matrix_2)", "\n", "\n", "full_matrix_3", "=", "torch", ".", "einsum", "(", "'pqr, ip,jq,kr->ijk'", ",", "\n", "[", "cores_2", ",", "factor_q_1", ",", "factor_k", ",", "factor_v", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "qlen", ",", "-", "1", ")", "\n", "full_matrix_4", "=", "torch", ".", "einsum", "(", "'pqr, ip,jq,kr->ijk'", ",", "\n", "[", "cores_2", ",", "factor_q_2", ",", "factor_k_2", ",", "factor_v", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "qlen", ",", "-", "1", ")", "\n", "\n", "full_matrixs", ".", "append", "(", "full_matrix_1", "+", "full_matrix_2", "+", "full_matrix_3", "+", "full_matrix_4", ")", "\n", "\n", "\n", "# #### compute attention score", "\n", "# rw_head_q = w_head_q + r_w_bias  # qlen x bsz x n_head x d_head", "\n", "# AC = torch.einsum('ibnd,jbnd->ijbn', (rw_head_q, w_head_k))  # qlen x klen x bsz x n_head", "\n", "#", "\n", "# print('AC:', AC.size())", "\n", "#", "\n", "# rr_head_q = w_head_q + r_r_bias", "\n", "# BD = torch.einsum('ibnd,jnd->ijbn', (rr_head_q, r_head_k))  # qlen x rlen x bsz x n_head", "\n", "# print(BD.size)", "\n", "# BD = self._rel_shift(BD)", "\n", "#", "\n", "# print('BD:', BD.size())", "\n", "\n", "# # [qlen x klen x bsz x n_head]", "\n", "# attn_score = AC + BD", "\n", "# attn_score.mul_(self.scale)", "\n", "#", "\n", "# #### compute attention probability", "\n", "# if attn_mask is not None and attn_mask.any().item():", "\n", "#     if attn_mask.dim() == 2:", "\n", "#         attn_score = attn_score.float().masked_fill(", "\n", "#             attn_mask[None, :, :, None], -float('inf')).type_as(attn_score)", "\n", "#     elif attn_mask.dim() == 3:", "\n", "#         attn_score = attn_score.float().masked_fill(", "\n", "#             attn_mask[:, :, :, None], -float('inf')).type_as(attn_score)", "\n", "#", "\n", "# # [qlen x klen x bsz x n_head]", "\n", "# attn_prob = F.softmax(attn_score, dim=1)", "\n", "# attn_prob = self.dropatt(attn_prob)", "\n", "#", "\n", "# #### compute attention vector", "\n", "# attn_vec = torch.einsum('ijbn,jbnd->ibnd', (attn_prob, w_head_v))", "\n", "#", "\n", "# # [qlen x bsz x n_head x d_head]", "\n", "# attn_vec = attn_vec.contiguous().view(", "\n", "#     attn_vec.size(0), attn_vec.size(1), self.n_head * self.d_head)", "\n", "\n", "# linear projection", "\n", "", "attn_vec", "=", "torch", ".", "stack", "(", "full_matrixs", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "attn_vec", ".", "mul_", "(", "0.5", ")", "\n", "\n", "# if qlen == 30:", "\n", "#     attn_out = self.o_net(attn_vec)", "\n", "# else:", "\n", "#     attn_out = self.o_net_1(attn_vec)", "\n", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### residual connection", "\n", "            ", "output", "=", "w", "+", "attn_out", "\n", "", "else", ":", "\n", "##### residual connection + layer normalization", "\n", "            ", "output", "=", "self", ".", "layer_norm", "(", "w", "+", "attn_out", ")", "\n", "\n", "", "return", "output", "\n", "\n", "\n", "", "", "class", "RelLearnableMultiHeadAttn", "(", "RelMultiHeadAttn", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelLearnableMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "w", ",", "r_emb", ",", "r_w_bias", ",", "r_bias", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "# r_emb: [klen, n_head, d_head], used for term B", "\n", "# r_w_bias: [n_head, d_head], used for term C", "\n", "# r_bias: [klen, n_head], used for term D", "\n", "\n", "        ", "qlen", ",", "bsz", "=", "w", ".", "size", "(", "0", ")", ",", "w", ".", "size", "(", "1", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.DecoderLayer.__init__": [[380, 386], ["torch.Module.__init__", "mem_transformer.MultiHeadAttn", "mem_transformer.PositionwiseFF", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["if", "mems", "is", "not", "None", ":", "\n", "            ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", ",", "w", "]", ",", "0", ")", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "cat", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "cat", ")", "\n", "", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.DecoderLayer.forward": [[387, 394], ["mem_transformer.DecoderLayer.dec_attn", "mem_transformer.DecoderLayer.pos_ff"], "methods", ["None"], ["\n", "w_head_q", "=", "w_head_q", "[", "-", "qlen", ":", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "w", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "w", ")", "\n", "", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.RelLearnableDecoderLayer.__init__": [[396, 404], ["torch.Module.__init__", "mem_transformer.RelLearnableMultiHeadAttn", "mem_transformer.PositionwiseFF", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["", "klen", "=", "w_head_k", ".", "size", "(", "0", ")", "\n", "\n", "w_head_q", "=", "w_head_q", ".", "view", "(", "qlen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "w_head_k", "=", "w_head_k", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "w_head_v", "=", "w_head_v", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "\n", "if", "klen", ">", "r_emb", ".", "size", "(", "0", ")", ":", "\n", "            ", "r_emb_pad", "=", "r_emb", "[", "0", ":", "1", "]", ".", "expand", "(", "klen", "-", "r_emb", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ")", "\n", "r_emb", "=", "torch", ".", "cat", "(", "[", "r_emb_pad", ",", "r_emb", "]", ",", "0", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.RelLearnableDecoderLayer.forward": [[405, 413], ["mem_transformer.RelLearnableDecoderLayer.dec_attn", "mem_transformer.RelLearnableDecoderLayer.pos_ff"], "methods", ["None"], ["r_bias_pad", "=", "r_bias", "[", "0", ":", "1", "]", ".", "expand", "(", "klen", "-", "r_bias", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "r_bias", "=", "torch", ".", "cat", "(", "[", "r_bias_pad", ",", "r_bias", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "r_emb", "=", "r_emb", "[", "-", "klen", ":", "]", "\n", "r_bias", "=", "r_bias", "[", "-", "klen", ":", "]", "\n", "\n", "#### compute attention score", "\n", "", "rw_head_q", "=", "w_head_q", "+", "r_w_bias", "[", "None", "]", "# qlen x bsz x n_head x d_head", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.RelPartialLearnableDecoderLayer.__init__": [[415, 423], ["torch.Module.__init__", "mem_transformer.RelPartialLearnableMultiHeadAttn", "mem_transformer.PositionwiseFF", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["B_", "=", "torch", ".", "einsum", "(", "'ibnd,jnd->ijbn'", ",", "(", "w_head_q", ",", "r_emb", ")", ")", "# qlen x klen x bsz x n_head", "\n", "D_", "=", "r_bias", "[", "None", ",", ":", ",", "None", "]", "# 1    x klen x 1   x n_head", "\n", "BD", "=", "self", ".", "_rel_shift", "(", "B_", "+", "D_", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "attn_score", "=", "AC", "+", "BD", "\n", "attn_score", ".", "mul_", "(", "self", ".", "scale", ")", "\n", "\n", "#### compute attention probability", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.RelPartialLearnableDecoderLayer.forward": [[424, 432], ["mem_transformer.RelPartialLearnableDecoderLayer.dec_attn", "mem_transformer.RelPartialLearnableDecoderLayer.pos_ff"], "methods", ["None"], ["if", "attn_mask", "is", "not", "None", "and", "attn_mask", ".", "any", "(", ")", ".", "item", "(", ")", ":", "\n", "            ", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", "None", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "1", ")", "\n", "attn_prob", "=", "self", ".", "dropatt", "(", "attn_prob", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.AdaptiveEmbedding.__init__": [[435, 464], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "mem_transformer.AdaptiveEmbedding.emb_layers.append", "range", "torch.Embedding", "torch.Embedding", "torch.Embedding", "mem_transformer.AdaptiveEmbedding.emb_projs.append", "len", "mem_transformer.AdaptiveEmbedding.emb_layers.append", "mem_transformer.AdaptiveEmbedding.emb_projs.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["attn_vec", "=", "torch", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "(", "attn_prob", ",", "w_head_v", ")", ")", "\n", "\n", "# [qlen x bsz x n_head x d_head]", "\n", "attn_vec", "=", "attn_vec", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "attn_vec", ".", "size", "(", "0", ")", ",", "attn_vec", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### residual connection", "\n", "            ", "output", "=", "w", "+", "attn_out", "\n", "", "else", ":", "\n", "##### residual connection + layer normalization", "\n", "            ", "output", "=", "self", ".", "layer_norm", "(", "w", "+", "attn_out", ")", "\n", "\n", "", "return", "output", "\n", "\n", "\n", "", "", "class", "DecoderLayer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "MultiHeadAttn", "(", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "**", "kwargs", ")", "\n", "self", ".", "pos_ff", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "kwargs", ".", "get", "(", "'pre_lnorm'", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "dec_inp", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "output", "=", "self", ".", "dec_attn", "(", "dec_inp", ",", "attn_mask", "=", "dec_attn_mask", ",", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.AdaptiveEmbedding.forward": [[465, 495], ["torch.linear.mul_", "next", "inp.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros.view", "torch.zeros.view", "torch.zeros.view", "torch.linear", "torch.linear", "torch.linear", "mem_transformer.AdaptiveEmbedding.parameters", "len", "mask_i.nonzero().squeeze", "torch.linear", "torch.linear", "torch.linear", "torch.zeros.index_copy_", "torch.zeros.index_copy_", "torch.zeros.index_copy_", "inp.view.size", "mask_i.nonzero().squeeze.numel", "inp.view.index_select", "inp.size", "mask_i.nonzero"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.next"], ["mems", "=", "mems", ")", "\n", "output", "=", "self", ".", "pos_ff", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n", "\n", "", "", "class", "RelLearnableDecoderLayer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelLearnableDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "RelLearnableMultiHeadAttn", "(", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "\n", "**", "kwargs", ")", "\n", "self", ".", "pos_ff", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "kwargs", ".", "get", "(", "'pre_lnorm'", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "dec_inp", ",", "r_emb", ",", "r_w_bias", ",", "r_bias", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "output", "=", "self", ".", "dec_attn", "(", "dec_inp", ",", "r_emb", ",", "r_w_bias", ",", "r_bias", ",", "\n", "attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems", ")", "\n", "output", "=", "self", ".", "pos_ff", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n", "\n", "", "", "class", "RelPartialLearnableDecoderLayer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelPartialLearnableDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "RelPartialLearnableMultiHeadAttn", "(", "n_head", ",", "d_model", ",", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.MemTransformerLM.__init__": [[497, 581], ["torch.Module.__init__", "mem_transformer.AdaptiveEmbedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "mem_transformer.MemTransformerLM._create_params", "range", "torch.Linear", "torch.Linear", "torch.Linear", "log_uniform_sampler.LogUniformSampler", "proj_adaptive_softmax.ProjectedAdaptiveLogSoftmax", "mem_transformer.MemTransformerLM.layers.append", "range", "range", "enumerate", "mem_transformer.RelPartialLearnableDecoderLayer", "mem_transformer.MemTransformerLM.layers.append", "range", "len", "mem_transformer.RelLearnableDecoderLayer", "mem_transformer.MemTransformerLM.layers.append", "mem_transformer.DecoderLayer"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM._create_params"], ["self", ".", "pos_ff", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "kwargs", ".", "get", "(", "'pre_lnorm'", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "dec_inp", ",", "r", ",", "r_w_bias", ",", "r_r_bias", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "output", "=", "self", ".", "dec_attn", "(", "dec_inp", ",", "r", ",", "r_w_bias", ",", "r_r_bias", ",", "\n", "attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems", ")", "\n", "output", "=", "self", ".", "pos_ff", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n", "\n", "", "", "class", "AdaptiveEmbedding", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n_token", ",", "d_embed", ",", "d_proj", ",", "cutoffs", ",", "div_val", "=", "1", ",", "\n", "sample_softmax", "=", "False", ")", ":", "\n", "        ", "super", "(", "AdaptiveEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_token", "=", "n_token", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "\n", "self", ".", "cutoffs", "=", "cutoffs", "+", "[", "n_token", "]", "\n", "self", ".", "div_val", "=", "div_val", "\n", "self", ".", "d_proj", "=", "d_proj", "\n", "\n", "self", ".", "emb_scale", "=", "d_proj", "**", "0.5", "\n", "\n", "self", ".", "cutoff_ends", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "\n", "self", ".", "emb_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "emb_projs", "=", "nn", ".", "ParameterList", "(", ")", "\n", "if", "div_val", "==", "1", ":", "\n", "            ", "self", ".", "emb_layers", ".", "append", "(", "\n", "nn", ".", "Embedding", "(", "n_token", ",", "d_embed", ",", "sparse", "=", "sample_softmax", ">", "0", ")", "\n", ")", "\n", "if", "d_proj", "!=", "d_embed", ":", "\n", "# output:d_proj", "\n", "                ", "self", ".", "emb_projs", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "d_proj", ",", "d_embed", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "d_emb_i", "=", "d_embed", "//", "(", "div_val", "**", "i", ")", "\n", "self", ".", "emb_layers", ".", "append", "(", "nn", ".", "Embedding", "(", "r_idx", "-", "l_idx", ",", "d_emb_i", ")", ")", "\n", "self", ".", "emb_projs", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "d_proj", ",", "d_emb_i", ")", ")", ")", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "div_val", "==", "1", ":", "\n", "            ", "embed", "=", "self", ".", "emb_layers", "[", "0", "]", "(", "inp", ")", "\n", "if", "self", ".", "d_proj", "!=", "self", ".", "d_embed", ":", "\n", "                ", "embed", "=", "F", ".", "linear", "(", "embed", ",", "self", ".", "emb_projs", "[", "0", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "param", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", "\n", "inp_flat", "=", "inp", ".", "view", "(", "-", "1", ")", "\n", "emb_flat", "=", "torch", ".", "zeros", "(", "[", "inp_flat", ".", "size", "(", "0", ")", ",", "self", ".", "d_proj", "]", ",", "\n", "dtype", "=", "param", ".", "dtype", ",", "device", "=", "param", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "\n", "mask_i", "=", "(", "inp_flat", ">=", "l_idx", ")", "&", "(", "inp_flat", "<", "r_idx", ")", "\n", "indices_i", "=", "mask_i", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "indices_i", ".", "numel", "(", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "inp_i", "=", "inp_flat", ".", "index_select", "(", "0", ",", "indices_i", ")", "-", "l_idx", "\n", "emb_i", "=", "self", ".", "emb_layers", "[", "i", "]", "(", "inp_i", ")", "\n", "emb_i", "=", "F", ".", "linear", "(", "emb_i", ",", "self", ".", "emb_projs", "[", "i", "]", ")", "\n", "\n", "emb_flat", ".", "index_copy_", "(", "0", ",", "indices_i", ",", "emb_i", ")", "\n", "\n", "", "embed", "=", "emb_flat", ".", "view", "(", "*", "inp", ".", "size", "(", ")", ",", "self", ".", "d_proj", ")", "\n", "\n", "", "embed", ".", "mul_", "(", "self", ".", "emb_scale", ")", "\n", "\n", "return", "embed", "\n", "\n", "\n", "", "", "class", "MemTransformerLM", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n_token", ",", "n_layer", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "\n", "dropout", ",", "dropatt", ",", "tie_weight", "=", "True", ",", "d_embed", "=", "None", ",", "\n", "div_val", "=", "1", ",", "tie_projs", "=", "[", "False", "]", ",", "pre_lnorm", "=", "False", ",", "\n", "tgt_len", "=", "None", ",", "ext_len", "=", "None", ",", "mem_len", "=", "None", ",", "\n", "cutoffs", "=", "[", "]", ",", "adapt_inp", "=", "False", ",", "\n", "same_length", "=", "False", ",", "attn_type", "=", "0", ",", "clamp_len", "=", "-", "1", ",", "\n", "sample_softmax", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "MemTransformerLM", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.MemTransformerLM.backward_compatible": [[582, 584], ["None"], "methods", ["None"], ["self", ".", "n_token", "=", "n_token", "\n", "\n", "global", "initCore", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.MemTransformerLM._create_params": [[585, 602], ["mem_transformer.PositionalEmbedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "mem_transformer.PositionalEmbedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["# core_number = 2", "\n", "# initCore = torch.ones(1, 40)", "\n", "initCore1", "=", "F", ".", "softmax", "(", "torch", ".", "rand", "(", "1", ",", "40", ")", ",", "dim", "=", "1", ")", "\n", "initCore2", "=", "torch", ".", "rand", "(", "1", ",", "40", ")", "\n", "initCore", "=", "torch", ".", "cat", "(", "(", "initCore1", ",", "initCore2", ")", ",", "dim", "=", "0", ")", "\n", "\n", "d_embed", "=", "d_model", "if", "d_embed", "is", "None", "else", "d_embed", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_head", "=", "d_head", "\n", "\n", "self", ".", "word_emb", "=", "AdaptiveEmbedding", "(", "n_token", ",", "d_embed", ",", "d_model", ",", "cutoffs", ",", "\n", "div_val", "=", "div_val", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "n_layer", "=", "n_layer", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.MemTransformerLM.reset_length": [[603, 607], ["None"], "methods", ["None"], ["\n", "self", ".", "tgt_len", "=", "tgt_len", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "ext_len", "=", "ext_len", "\n", "self", ".", "max_klen", "=", "tgt_len", "+", "ext_len", "+", "mem_len", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.MemTransformerLM.init_mems": [[608, 619], ["next", "range", "mem_transformer.MemTransformerLM.parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "mems.append"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.next"], ["\n", "self", ".", "attn_type", "=", "attn_type", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "attn_type", "==", "0", ":", "# the default attention", "\n", "            ", "for", "i", "in", "range", "(", "n_layer", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "RelPartialLearnableDecoderLayer", "(", "\n", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "tgt_len", "=", "tgt_len", ",", "ext_len", "=", "ext_len", ",", "mem_len", "=", "mem_len", ",", "\n", "dropatt", "=", "dropatt", ",", "pre_lnorm", "=", "pre_lnorm", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.MemTransformerLM._update_mems": [[620, 642], ["len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "range", "max", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "new_mems.append", "cat[].detach"], "methods", ["None"], ["", "", "elif", "attn_type", "==", "1", ":", "# learnable embeddings", "\n", "            ", "for", "i", "in", "range", "(", "n_layer", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "RelLearnableDecoderLayer", "(", "\n", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "tgt_len", "=", "tgt_len", ",", "ext_len", "=", "ext_len", ",", "mem_len", "=", "mem_len", ",", "\n", "dropatt", "=", "dropatt", ",", "pre_lnorm", "=", "pre_lnorm", ")", "\n", ")", "\n", "", "", "elif", "attn_type", "in", "[", "2", ",", "3", "]", ":", "# absolute embeddings", "\n", "            ", "for", "i", "in", "range", "(", "n_layer", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "DecoderLayer", "(", "\n", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "dropatt", "=", "dropatt", ",", "pre_lnorm", "=", "pre_lnorm", ")", "\n", ")", "\n", "\n", "", "", "self", ".", "sample_softmax", "=", "sample_softmax", "\n", "# use sampled softmax", "\n", "if", "sample_softmax", ">", "0", ":", "\n", "            ", "self", ".", "out_layer", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_token", ")", "\n", "if", "tie_weight", ":", "\n", "                ", "self", ".", "out_layer", ".", "weight", "=", "self", ".", "word_emb", ".", "weight", "\n", "", "self", ".", "tie_weight", "=", "tie_weight", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.MemTransformerLM._forward": [[643, 737], ["dec_inp.size", "mem_transformer.MemTransformerLM.word_emb", "mem_transformer.MemTransformerLM.drop", "mem_transformer.MemTransformerLM._update_mems", "mems[].size", "mem_transformer.MemTransformerLM.new_ones", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mem_transformer.MemTransformerLM.pos_emb", "mem_transformer.MemTransformerLM.drop", "mem_transformer.MemTransformerLM.drop", "hids.append", "enumerate", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.arange.clamp_", "torch.arange.clamp_", "torch.arange.clamp_", "layer", "hids.append", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "mem_transformer.MemTransformerLM.new_ones"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM._update_mems"], ["self", ".", "sampler", "=", "LogUniformSampler", "(", "n_token", ",", "sample_softmax", ")", "\n", "\n", "# use adaptive softmax (including standard softmax)", "\n", "", "else", ":", "\n", "            ", "self", ".", "crit", "=", "ProjectedAdaptiveLogSoftmax", "(", "n_token", ",", "d_embed", ",", "d_model", ",", "\n", "cutoffs", ",", "div_val", "=", "div_val", ")", "\n", "\n", "if", "tie_weight", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "crit", ".", "out_layers", ")", ")", ":", "\n", "                    ", "self", ".", "crit", ".", "out_layers", "[", "i", "]", ".", "weight", "=", "self", ".", "word_emb", ".", "emb_layers", "[", "i", "]", ".", "weight", "\n", "\n", "", "", "if", "tie_projs", ":", "\n", "                ", "for", "i", ",", "tie_proj", "in", "enumerate", "(", "tie_projs", ")", ":", "\n", "                    ", "if", "tie_proj", "and", "div_val", "==", "1", "and", "d_model", "!=", "d_embed", ":", "\n", "                        ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "self", ".", "word_emb", ".", "emb_projs", "[", "0", "]", "\n", "", "elif", "tie_proj", "and", "div_val", "!=", "1", ":", "\n", "                        ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "self", ".", "word_emb", ".", "emb_projs", "[", "i", "]", "\n", "\n", "", "", "", "", "self", ".", "same_length", "=", "same_length", "\n", "self", ".", "clamp_len", "=", "clamp_len", "\n", "\n", "self", ".", "_create_params", "(", ")", "\n", "\n", "", "def", "backward_compatible", "(", "self", ")", ":", "\n", "        ", "self", ".", "sample_softmax", "=", "-", "1", "\n", "\n", "", "def", "_create_params", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "attn_type", "==", "0", ":", "# default attention", "\n", "            ", "self", ".", "pos_emb", "=", "PositionalEmbedding", "(", "self", ".", "d_model", ")", "\n", "self", ".", "r_w_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_r_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "1", ":", "# learnable", "\n", "            ", "self", ".", "r_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "n_layer", ",", "self", ".", "max_klen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_w_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "n_layer", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "n_layer", ",", "self", ".", "max_klen", ",", "self", ".", "n_head", ")", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "2", ":", "# absolute standard", "\n", "            ", "self", ".", "pos_emb", "=", "PositionalEmbedding", "(", "self", ".", "d_model", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "3", ":", "# absolute deeper SA", "\n", "            ", "self", ".", "r_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "n_layer", ",", "self", ".", "max_klen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "\n", "", "", "def", "reset_length", "(", "self", ",", "tgt_len", ",", "ext_len", ",", "mem_len", ")", ":", "\n", "        ", "self", ".", "tgt_len", "=", "tgt_len", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "ext_len", "=", "ext_len", "\n", "\n", "", "def", "init_mems", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mem_len", ">", "0", ":", "\n", "            ", "mems", "=", "[", "]", "\n", "param", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layer", "+", "1", ")", ":", "\n", "                ", "empty", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "param", ".", "dtype", ",", "device", "=", "param", ".", "device", ")", "\n", "mems", ".", "append", "(", "empty", ")", "\n", "\n", "", "return", "mems", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "", "", "def", "_update_mems", "(", "self", ",", "hids", ",", "mems", ",", "qlen", ",", "mlen", ")", ":", "\n", "# does not deal with None", "\n", "        ", "if", "mems", "is", "None", ":", "return", "None", "\n", "\n", "# mems is not None", "\n", "assert", "len", "(", "hids", ")", "==", "len", "(", "mems", ")", ",", "'len(hids) != len(mems)'", "\n", "\n", "# There are `mlen + qlen` steps that can be cached into mems", "\n", "# For the next step, the last `ext_len` of the `qlen` tokens", "\n", "# will be used as the extended context. Hence, we only cache", "\n", "# the tokens from `mlen + qlen - self.ext_len - self.mem_len`", "\n", "# to `mlen + qlen - self.ext_len`.", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "new_mems", "=", "[", "]", "\n", "end_idx", "=", "mlen", "+", "max", "(", "0", ",", "qlen", "-", "0", "-", "self", ".", "ext_len", ")", "\n", "beg_idx", "=", "max", "(", "0", ",", "end_idx", "-", "self", ".", "mem_len", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "hids", ")", ")", ":", "\n", "                ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", "[", "i", "]", ",", "hids", "[", "i", "]", "]", ",", "dim", "=", "0", ")", "\n", "new_mems", ".", "append", "(", "cat", "[", "beg_idx", ":", "end_idx", "]", ".", "detach", "(", ")", ")", "\n", "\n", "", "", "return", "new_mems", "\n", "\n", "", "def", "_forward", "(", "self", ",", "dec_inp", ",", "mems", "=", "None", ")", ":", "\n", "        ", "qlen", ",", "bsz", "=", "dec_inp", ".", "size", "(", ")", "\n", "word_emb", "=", "self", ".", "word_emb", "(", "dec_inp", ")", "\n", "\n", "mlen", "=", "mems", "[", "0", "]", ".", "size", "(", "0", ")", "if", "mems", "is", "not", "None", "else", "0", "\n", "\n", "# @@@@@@@@@@@@@@@@@@@@", "\n", "klen", "=", "mlen", "+", "qlen", "\n", "\n", "if", "self", ".", "same_length", ":", "\n", "            ", "all_ones", "=", "word_emb", ".", "new_ones", "(", "qlen", ",", "klen", ")", "\n", "mask_len", "=", "klen", "-", "self", ".", "mem_len", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.mem_transformer.MemTransformerLM.forward": [[738, 762], ["target.size", "mem_transformer.MemTransformerLM._forward", "mem_transformer.MemTransformerLM.init_mems", "log_uniform_sampler.sample_logits", "mem_transformer.MemTransformerLM.crit", "loss.view.view.view", "pred_hid.view", "target.view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "pred_hid.size"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM._forward", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.init_mems", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.log_uniform_sampler.sample_logits"], ["if", "mask_len", ">", "0", ":", "\n", "                ", "mask_shift_len", "=", "qlen", "-", "mask_len", "\n", "", "else", ":", "\n", "                ", "mask_shift_len", "=", "qlen", "\n", "", "dec_attn_mask", "=", "(", "torch", ".", "triu", "(", "all_ones", ",", "1", "+", "mlen", ")", "\n", "+", "torch", ".", "tril", "(", "all_ones", ",", "-", "mask_shift_len", ")", ")", ".", "byte", "(", ")", "[", ":", ",", ":", ",", "None", "]", "# -1", "\n", "", "else", ":", "\n", "            ", "dec_attn_mask", "=", "torch", ".", "triu", "(", "\n", "word_emb", ".", "new_ones", "(", "qlen", ",", "klen", ")", ",", "diagonal", "=", "1", "+", "mlen", ")", ".", "byte", "(", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "\n", "", "hids", "=", "[", "]", "\n", "if", "self", ".", "attn_type", "==", "0", ":", "# default", "\n", "            ", "pos_seq", "=", "torch", ".", "arange", "(", "klen", "-", "1", ",", "-", "1", ",", "-", "1.0", ",", "device", "=", "word_emb", ".", "device", ",", "\n", "dtype", "=", "word_emb", ".", "dtype", ")", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "pos_seq", ".", "clamp_", "(", "max", "=", "self", ".", "clamp_len", ")", "\n", "", "pos_emb", "=", "self", ".", "pos_emb", "(", "pos_seq", ")", "\n", "\n", "\n", "core_out", "=", "self", ".", "drop", "(", "word_emb", ")", "\n", "pos_emb", "=", "self", ".", "drop", "(", "pos_emb", ")", "\n", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "                ", "mems_i", "=", "None", "if", "mems", "is", "None", "else", "mems", "[", "i", "]", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.eval.evaluate": [[76, 93], ["model.eval", "time.time", "logging", "torch.no_grad", "tuple", "enumerate", "model", "loss.mean.mean", "time.time", "loss.mean.item"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.eval", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.exp_utils.logging"], ["", "def", "evaluate", "(", "eval_iter", ")", ":", "\n", "# Turn on evaluation mode which disables dropout.", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "total_len", ",", "total_loss", "=", "0", ",", "0.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "mems", "=", "tuple", "(", ")", "\n", "for", "idx", ",", "(", "data", ",", "target", ",", "seq_len", ")", "in", "enumerate", "(", "eval_iter", ")", ":", "\n", "            ", "ret", "=", "model", "(", "data", ",", "target", ",", "*", "mems", ")", "\n", "loss", ",", "mems", "=", "ret", "[", "0", "]", ",", "ret", "[", "1", ":", "]", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "total_loss", "+=", "seq_len", "*", "loss", ".", "item", "(", ")", "\n", "total_len", "+=", "seq_len", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "", "logging", "(", "'Time : {:.2f}s, {:.2f}ms/segment'", ".", "format", "(", "\n", "total_time", ",", "1000", "*", "total_time", "/", "(", "idx", "+", "1", ")", ")", ")", "\n", "return", "total_loss", "/", "total_len", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.eval.format_log": [[105, 113], ["math.exp", "math.log"], "function", ["None"], ["", "def", "format_log", "(", "loss", ",", "split", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "in", "[", "'enwik8'", ",", "'text8'", "]", ":", "\n", "        ", "log_str", "=", "'| {0} loss {1:5.2f} | {0} bpc {2:9.5f} '", ".", "format", "(", "\n", "split", ",", "loss", ",", "loss", "/", "math", ".", "log", "(", "2", ")", ")", "\n", "", "else", ":", "\n", "        ", "log_str", "=", "'| {0} loss {1:5.2f} | {0} ppl {2:9.3f} '", ".", "format", "(", "\n", "split", ",", "loss", ",", "math", ".", "exp", "(", "loss", ")", ")", "\n", "", "return", "log_str", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.train.init_weight": [[210, 215], ["torch.init.uniform_", "torch.init.normal_"], "function", ["None"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.train.init_bias": [[216, 218], ["torch.init.constant_"], "function", ["None"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.train.weights_init": [[219, 257], ["classname.find", "hasattr", "train.init_weight", "hasattr", "train.init_bias", "classname.find", "hasattr", "range", "classname.find", "hasattr", "len", "train.init_weight", "classname.find", "hasattr", "torch.init.normal_", "hasattr", "train.init_weight", "hasattr", "train.init_bias", "range", "classname.find", "hasattr", "len", "torch.init.normal_", "hasattr", "train.init_bias", "classname.find", "hasattr", "hasattr", "hasattr", "hasattr", "torch.init.normal_", "train.init_weight", "train.init_weight", "train.init_weight", "train.init_bias"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_weight", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_bias", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_weight", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_weight", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_bias", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_bias", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_weight", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_weight", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_weight", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_bias"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.train.update_dropout": [[258, 263], ["classname.find", "hasattr"], "function", ["None"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.train.update_dropatt": [[264, 267], ["hasattr"], "function", ["None"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.train.evaluate": [[386, 417], ["model.eval", "model.reset_length", "model.train", "model.reset_length", "model.reset_length", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tuple", "enumerate", "model", "loss.mean.mean", "loss.mean.float().item", "loss.mean.float"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.eval", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.reset_length", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.train", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.reset_length", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.reset_length"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch.train.train": [[419, 527], ["model.train", "enumerate", "tuple", "tr_iter.get_varlen_iter", "model.zero_grad", "optimizer.step", "tuple", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "range", "para_model", "loss.float().mean().type_as.float().mean().type_as", "loss.float().mean().type_as.float().item", "optimizer.clip_master_grads", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer_sparse.step", "logging", "time.time", "train.evaluate", "logging", "logging", "logging", "time.time", "range", "data_chunks[].contiguous", "target_chunks[].contiguous", "para_model", "loss.float().mean().type_as.float().item", "optimizer.backward", "loss.float().mean().type_as.backward", "model.parameters", "scheduler.step", "time.time", "scheduler.step", "loss.float().mean().type_as.float().mean().type_as", "optimizer.backward", "loss.float().mean().type_as.backward", "loss.float().mean().type_as.float().mean", "loss.float().mean().type_as.float", "scheduler.step", "math.exp", "time.time", "math.exp", "scheduler_sparse.step", "loss.float().mean().type_as.float", "scheduler_sparse.step", "math.log", "math.log", "open", "torch.save", "torch.save", "torch.save", "open", "torch.save", "torch.save", "torch.save", "loss.float().mean().type_as.float().mean", "loss.float().mean().type_as.float", "os.path.join", "os.path.join", "optimizer.state_dict", "loss.float().mean().type_as.float"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.train", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMOrderedIterator.get_varlen_iter", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.exp_utils.logging", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.evaluate", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.exp_utils.logging", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.exp_utils.logging", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.exp_utils.logging"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.exp_utils.logging": [[9, 15], ["print", "open", "f_log.write"], "function", ["None"], ["def", "logging", "(", "s", ",", "log_path", ",", "print_", "=", "True", ",", "log_", "=", "True", ")", ":", "\n", "    ", "if", "print_", ":", "\n", "        ", "print", "(", "s", ")", "\n", "", "if", "log_", ":", "\n", "        ", "with", "open", "(", "log_path", ",", "'a+'", ")", "as", "f_log", ":", "\n", "            ", "f_log", ".", "write", "(", "s", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.exp_utils.get_logger": [[16, 18], ["functools.partial"], "function", ["None"], ["", "", "", "def", "get_logger", "(", "log_path", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "functools", ".", "partial", "(", "logging", ",", "log_path", "=", "log_path", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.exp_utils.create_exp_dir": [[19, 37], ["print", "exp_utils.get_logger", "print", "functools.partial", "os.path.exists", "os.makedirs", "os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "shutil.copyfile", "os.path.join", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.exp_utils.get_logger"], ["", "def", "create_exp_dir", "(", "dir_path", ",", "scripts_to_save", "=", "None", ",", "debug", "=", "False", ")", ":", "\n", "    ", "if", "debug", ":", "\n", "        ", "print", "(", "'Debug Mode : no experiment dir created'", ")", "\n", "return", "functools", ".", "partial", "(", "logging", ",", "log_path", "=", "None", ",", "log_", "=", "False", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "\n", "", "print", "(", "'Experiment dir : {}'", ".", "format", "(", "dir_path", ")", ")", "\n", "if", "scripts_to_save", "is", "not", "None", ":", "\n", "        ", "script_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'scripts'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "script_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "script_path", ")", "\n", "", "for", "script", "in", "scripts_to_save", ":", "\n", "            ", "dst_file", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'scripts'", ",", "os", ".", "path", ".", "basename", "(", "script", ")", ")", "\n", "shutil", ".", "copyfile", "(", "script", ",", "dst_file", ")", "\n", "\n", "", "", "return", "get_logger", "(", "log_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'log.txt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.exp_utils.save_checkpoint": [[38, 41], ["torch.save", "torch.save", "os.path.join", "optimizer.state_dict", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "model", ",", "optimizer", ",", "path", ",", "epoch", ")", ":", "\n", "    ", "torch", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "path", ",", "'model_{}.pt'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "path", ",", "'optimizer_{}.pt'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.__init__": [[7, 16], ["collections.Counter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "special", "=", "[", "]", ",", "min_freq", "=", "0", ",", "max_size", "=", "None", ",", "lower_case", "=", "True", ",", "\n", "delimiter", "=", "None", ",", "vocab_file", "=", "None", ")", ":", "\n", "        ", "self", ".", "counter", "=", "Counter", "(", ")", "\n", "self", ".", "special", "=", "special", "\n", "self", ".", "min_freq", "=", "min_freq", "\n", "self", ".", "max_size", "=", "max_size", "\n", "self", ".", "lower_case", "=", "lower_case", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "self", ".", "vocab_file", "=", "vocab_file", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.tokenize": [[17, 35], ["line.lower.lower.strip", "line.lower.lower.lower", "line.lower.lower.split"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "line", ",", "add_eos", "=", "False", ",", "add_double_eos", "=", "False", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "# convert to lower case", "\n", "if", "self", ".", "lower_case", ":", "\n", "            ", "line", "=", "line", ".", "lower", "(", ")", "\n", "\n", "# empty delimiter '' will evaluate False", "\n", "", "if", "self", ".", "delimiter", "==", "''", ":", "\n", "            ", "symbols", "=", "line", "\n", "", "else", ":", "\n", "            ", "symbols", "=", "line", ".", "split", "(", "self", ".", "delimiter", ")", "\n", "\n", "", "if", "add_double_eos", ":", "# lm1b", "\n", "            ", "return", "[", "'<S>'", "]", "+", "symbols", "+", "[", "'<S>'", "]", "\n", "", "elif", "add_eos", ":", "\n", "            ", "return", "symbols", "+", "[", "'<eos>'", "]", "\n", "", "else", ":", "\n", "            ", "return", "symbols", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.count_file": [[36, 50], ["os.path.exists", "print", "open", "enumerate", "vocabulary.Vocab.tokenize", "vocabulary.Vocab.counter.update", "sents.append", "print"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.tokenize"], ["", "", "def", "count_file", "(", "self", ",", "path", ",", "verbose", "=", "False", ",", "add_eos", "=", "False", ")", ":", "\n", "        ", "if", "verbose", ":", "print", "(", "'counting file {} ...'", ".", "format", "(", "path", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "\n", "sents", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "idx", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "if", "verbose", "and", "idx", ">", "0", "and", "idx", "%", "500000", "==", "0", ":", "\n", "                    ", "print", "(", "'    line {}'", ".", "format", "(", "idx", ")", ")", "\n", "", "symbols", "=", "self", ".", "tokenize", "(", "line", ",", "add_eos", "=", "add_eos", ")", "\n", "self", ".", "counter", ".", "update", "(", "symbols", ")", "\n", "sents", ".", "append", "(", "symbols", ")", "\n", "\n", "", "", "return", "sents", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.count_sents": [[51, 60], ["enumerate", "print", "vocabulary.Vocab.counter.update", "print", "len"], "methods", ["None"], ["", "def", "count_sents", "(", "self", ",", "sents", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n            sents : a list of sentences, each a list of tokenized symbols\n        \"\"\"", "\n", "if", "verbose", ":", "print", "(", "'counting {} sents ...'", ".", "format", "(", "len", "(", "sents", ")", ")", ")", "\n", "for", "idx", ",", "symbols", "in", "enumerate", "(", "sents", ")", ":", "\n", "            ", "if", "verbose", "and", "idx", ">", "0", "and", "idx", "%", "500000", "==", "0", ":", "\n", "                ", "print", "(", "'    line {}'", ".", "format", "(", "idx", ")", ")", "\n", "", "self", ".", "counter", ".", "update", "(", "symbols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab._build_from_file": [[61, 70], ["collections.OrderedDict", "open", "vocabulary.Vocab.add_symbol", "line.strip().split", "line.strip"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.add_symbol"], ["", "", "def", "_build_from_file", "(", "self", ",", "vocab_file", ")", ":", "\n", "        ", "self", ".", "idx2sym", "=", "[", "]", "\n", "self", ".", "sym2idx", "=", "OrderedDict", "(", ")", "\n", "\n", "with", "open", "(", "vocab_file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "symb", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "0", "]", "\n", "self", ".", "add_symbol", "(", "symb", ")", "\n", "", "", "self", ".", "unk_idx", "=", "self", ".", "sym2idx", "[", "'<UNK>'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.build_vocab": [[71, 91], ["print", "vocabulary.Vocab._build_from_file", "print", "print", "collections.OrderedDict", "vocabulary.Vocab.counter.most_common", "print", "vocabulary.Vocab.add_special", "vocabulary.Vocab.add_symbol", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab._build_from_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.add_special", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.add_symbol"], ["", "def", "build_vocab", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "vocab_file", ":", "\n", "            ", "print", "(", "'building vocab from {}'", ".", "format", "(", "self", ".", "vocab_file", ")", ")", "\n", "self", ".", "_build_from_file", "(", "self", ".", "vocab_file", ")", "\n", "print", "(", "'final vocab size {}'", ".", "format", "(", "len", "(", "self", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'building vocab with min_freq={}, max_size={}'", ".", "format", "(", "\n", "self", ".", "min_freq", ",", "self", ".", "max_size", ")", ")", "\n", "self", ".", "idx2sym", "=", "[", "]", "\n", "self", ".", "sym2idx", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "sym", "in", "self", ".", "special", ":", "\n", "                ", "self", ".", "add_special", "(", "sym", ")", "\n", "\n", "", "for", "sym", ",", "cnt", "in", "self", ".", "counter", ".", "most_common", "(", "self", ".", "max_size", ")", ":", "\n", "                ", "if", "cnt", "<", "self", ".", "min_freq", ":", "break", "\n", "self", ".", "add_symbol", "(", "sym", ")", "\n", "\n", "", "print", "(", "'final vocab size {} from {} unique tokens'", ".", "format", "(", "\n", "len", "(", "self", ")", ",", "len", "(", "self", ".", "counter", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_file": [[92, 109], ["os.path.exists", "print", "open", "enumerate", "torch.cat", "vocabulary.Vocab.tokenize", "torch.cat.append", "print", "vocabulary.Vocab.convert_to_tensor"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.tokenize", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.convert_to_tensor"], ["", "", "def", "encode_file", "(", "self", ",", "path", ",", "ordered", "=", "False", ",", "verbose", "=", "False", ",", "add_eos", "=", "True", ",", "\n", "add_double_eos", "=", "False", ")", ":", "\n", "        ", "if", "verbose", ":", "print", "(", "'encoding file {} ...'", ".", "format", "(", "path", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "encoded", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "idx", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "if", "verbose", "and", "idx", ">", "0", "and", "idx", "%", "500000", "==", "0", ":", "\n", "                    ", "print", "(", "'    line {}'", ".", "format", "(", "idx", ")", ")", "\n", "", "symbols", "=", "self", ".", "tokenize", "(", "line", ",", "add_eos", "=", "add_eos", ",", "\n", "add_double_eos", "=", "add_double_eos", ")", "\n", "encoded", ".", "append", "(", "self", ".", "convert_to_tensor", "(", "symbols", ")", ")", "\n", "\n", "", "", "if", "ordered", ":", "\n", "            ", "encoded", "=", "torch", ".", "cat", "(", "encoded", ")", "\n", "\n", "", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_sents": [[110, 122], ["enumerate", "print", "torch.cat.append", "torch.cat", "print", "vocabulary.Vocab.convert_to_tensor", "len"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.convert_to_tensor"], ["", "def", "encode_sents", "(", "self", ",", "sents", ",", "ordered", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "if", "verbose", ":", "print", "(", "'encoding {} sents ...'", ".", "format", "(", "len", "(", "sents", ")", ")", ")", "\n", "encoded", "=", "[", "]", "\n", "for", "idx", ",", "symbols", "in", "enumerate", "(", "sents", ")", ":", "\n", "            ", "if", "verbose", "and", "idx", ">", "0", "and", "idx", "%", "500000", "==", "0", ":", "\n", "                ", "print", "(", "'    line {}'", ".", "format", "(", "idx", ")", ")", "\n", "", "encoded", ".", "append", "(", "self", ".", "convert_to_tensor", "(", "symbols", ")", ")", "\n", "\n", "", "if", "ordered", ":", "\n", "            ", "encoded", "=", "torch", ".", "cat", "(", "encoded", ")", "\n", "\n", "", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.add_special": [[123, 128], ["vocabulary.Vocab.idx2sym.append", "setattr", "len", "sym.strip"], "methods", ["None"], ["", "def", "add_special", "(", "self", ",", "sym", ")", ":", "\n", "        ", "if", "sym", "not", "in", "self", ".", "sym2idx", ":", "\n", "            ", "self", ".", "idx2sym", ".", "append", "(", "sym", ")", "\n", "self", ".", "sym2idx", "[", "sym", "]", "=", "len", "(", "self", ".", "idx2sym", ")", "-", "1", "\n", "setattr", "(", "self", ",", "'{}_idx'", ".", "format", "(", "sym", ".", "strip", "(", "'<>'", ")", ")", ",", "self", ".", "sym2idx", "[", "sym", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.add_symbol": [[129, 133], ["vocabulary.Vocab.idx2sym.append", "len"], "methods", ["None"], ["", "", "def", "add_symbol", "(", "self", ",", "sym", ")", ":", "\n", "        ", "if", "sym", "not", "in", "self", ".", "sym2idx", ":", "\n", "            ", "self", ".", "idx2sym", ".", "append", "(", "sym", ")", "\n", "self", ".", "sym2idx", "[", "sym", "]", "=", "len", "(", "self", ".", "idx2sym", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.get_sym": [[134, 137], ["len"], "methods", ["None"], ["", "", "def", "get_sym", "(", "self", ",", "idx", ")", ":", "\n", "        ", "assert", "0", "<=", "idx", "<", "len", "(", "self", ")", ",", "'Index {} out of range'", ".", "format", "(", "idx", ")", "\n", "return", "self", ".", "idx2sym", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.get_idx": [[138, 146], ["hasattr", "vocabulary.Vocab.sym2idx.get"], "methods", ["None"], ["", "def", "get_idx", "(", "self", ",", "sym", ")", ":", "\n", "        ", "if", "sym", "in", "self", ".", "sym2idx", ":", "\n", "            ", "return", "self", ".", "sym2idx", "[", "sym", "]", "\n", "", "else", ":", "\n", "# print('encounter unk {}'.format(sym))", "\n", "            ", "assert", "'<eos>'", "not", "in", "sym", "\n", "assert", "hasattr", "(", "self", ",", "'unk_idx'", ")", "\n", "return", "self", ".", "sym2idx", ".", "get", "(", "sym", ",", "self", ".", "unk_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.get_symbols": [[147, 149], ["vocabulary.Vocab.get_sym"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.get_sym"], ["", "", "def", "get_symbols", "(", "self", ",", "indices", ")", ":", "\n", "        ", "return", "[", "self", ".", "get_sym", "(", "idx", ")", "for", "idx", "in", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.get_indices": [[150, 152], ["vocabulary.Vocab.get_idx"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.get_idx"], ["", "def", "get_indices", "(", "self", ",", "symbols", ")", ":", "\n", "        ", "return", "[", "self", ".", "get_idx", "(", "sym", ")", "for", "sym", "in", "symbols", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.convert_to_tensor": [[153, 155], ["torch.LongTensor", "vocabulary.Vocab.get_indices"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.get_indices"], ["", "def", "convert_to_tensor", "(", "self", ",", "symbols", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "self", ".", "get_indices", "(", "symbols", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.convert_to_sent": [[156, 161], ["vocabulary.Vocab.get_sym", "vocabulary.Vocab.get_sym"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.get_sym", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.get_sym"], ["", "def", "convert_to_sent", "(", "self", ",", "indices", ",", "exclude", "=", "None", ")", ":", "\n", "        ", "if", "exclude", "is", "None", ":", "\n", "            ", "return", "' '", ".", "join", "(", "[", "self", ".", "get_sym", "(", "idx", ")", "for", "idx", "in", "indices", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "' '", ".", "join", "(", "[", "self", ".", "get_sym", "(", "idx", ")", "for", "idx", "in", "indices", "if", "idx", "not", "in", "exclude", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.__len__": [[162, 164], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idx2sym", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.adaptive_softmax.AdaptiveLogSoftmax.__init__": [[10, 37], ["torch.Module.__init__", "list", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "any", "ValueError", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "sorted", "min", "max", "len", "len", "set", "int"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "n_classes", ",", "cutoffs", ",", "keep_order", "=", "False", ")", ":", "\n", "        ", "super", "(", "AdaptiveLogSoftmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "cutoffs", "=", "list", "(", "cutoffs", ")", "\n", "\n", "if", "(", "cutoffs", "!=", "sorted", "(", "cutoffs", ")", ")", "or", "(", "min", "(", "cutoffs", ")", "<=", "0", ")", "or", "(", "max", "(", "cutoffs", ")", ">=", "(", "n_classes", "-", "1", ")", ")", "or", "(", "len", "(", "set", "(", "cutoffs", ")", ")", "!=", "len", "(", "cutoffs", ")", ")", "or", "any", "(", "[", "int", "(", "c", ")", "!=", "c", "for", "c", "in", "cutoffs", "]", ")", ":", "\n", "\n", "            ", "raise", "ValueError", "(", "\"cutoffs should be a sequence of unique, positive \"", "\n", "\"integers sorted in an increasing order, where \"", "\n", "\"each value is between 1 and n_classes-1\"", ")", "\n", "\n", "", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "cutoffs", "=", "cutoffs", "+", "[", "n_classes", "]", "\n", "\n", "self", ".", "shortlist_size", "=", "self", ".", "cutoffs", "[", "0", "]", "\n", "self", ".", "n_clusters", "=", "len", "(", "self", ".", "cutoffs", ")", "-", "1", "\n", "self", ".", "head_size", "=", "self", ".", "shortlist_size", "+", "self", ".", "n_clusters", "\n", "\n", "self", ".", "cluster_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "n_clusters", ",", "self", ".", "in_features", ")", ")", "\n", "self", ".", "cluster_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "n_clusters", ")", ")", "\n", "\n", "self", ".", "keep_order", "=", "keep_order", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.adaptive_softmax.AdaptiveLogSoftmax.forward": [[39, 91], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.linear", "torch.linear", "torch.linear", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "hidden.size", "target.size", "RuntimeError", "mask_i.nonzero().squeeze", "torch.log_softmax.index_select", "head_logprob.index_select.gather().squeeze.size", "len", "mask_i.nonzero().squeeze.numel", "target.index_select", "F.log_softmax.index_select.gather().squeeze", "hidden.index_select", "torch.linear", "torch.linear", "torch.linear", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.zeros_like.index_copy_", "torch.zeros_like.index_copy_", "torch.zeros_like.index_copy_", "nll[].copy_", "mask_i.nonzero", "torch.log_softmax.gather().squeeze", "hasattr", "F.log_softmax.index_select.gather", "torch.log_softmax.gather", "head_logprob.index_select.gather().squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden", ",", "target", ",", "weight", ",", "bias", ",", "keep_order", "=", "False", ")", ":", "\n", "        ", "if", "hidden", ".", "size", "(", "0", ")", "!=", "target", ".", "size", "(", "0", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Input and target should have the same size '", "\n", "'in the batch dimension.'", ")", "\n", "\n", "", "head_weight", "=", "torch", ".", "cat", "(", "\n", "[", "weight", "[", ":", "self", ".", "shortlist_size", "]", ",", "self", ".", "cluster_weight", "]", ",", "dim", "=", "0", ")", "\n", "head_bias", "=", "torch", ".", "cat", "(", "\n", "[", "bias", "[", ":", "self", ".", "shortlist_size", "]", ",", "self", ".", "cluster_bias", "]", ",", "dim", "=", "0", ")", "\n", "\n", "head_logit", "=", "F", ".", "linear", "(", "hidden", ",", "head_weight", ",", "bias", "=", "head_bias", ")", "\n", "head_logprob", "=", "F", ".", "log_softmax", "(", "head_logit", ",", "dim", "=", "1", ")", "\n", "\n", "nll", "=", "torch", ".", "zeros_like", "(", "target", ",", "\n", "dtype", "=", "hidden", ".", "dtype", ",", "device", "=", "hidden", ".", "device", ")", "\n", "\n", "offset", "=", "0", "\n", "cutoff_values", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "for", "i", "in", "range", "(", "len", "(", "cutoff_values", ")", "-", "1", ")", ":", "\n", "            ", "l_idx", ",", "h_idx", "=", "cutoff_values", "[", "i", "]", ",", "cutoff_values", "[", "i", "+", "1", "]", "\n", "\n", "mask_i", "=", "(", "target", ">=", "l_idx", ")", "&", "(", "target", "<", "h_idx", ")", "\n", "indices_i", "=", "mask_i", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "indices_i", ".", "numel", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "target_i", "=", "target", ".", "index_select", "(", "0", ",", "indices_i", ")", "-", "l_idx", "\n", "head_logprob_i", "=", "head_logprob", ".", "index_select", "(", "0", ",", "indices_i", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                ", "logprob_i", "=", "head_logprob_i", ".", "gather", "(", "1", ",", "target_i", "[", ":", ",", "None", "]", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "weight_i", "=", "weight", "[", "l_idx", ":", "h_idx", "]", "\n", "bias_i", "=", "bias", "[", "l_idx", ":", "h_idx", "]", "\n", "\n", "hidden_i", "=", "hidden", ".", "index_select", "(", "0", ",", "indices_i", ")", "\n", "\n", "tail_logit_i", "=", "F", ".", "linear", "(", "hidden_i", ",", "weight_i", ",", "bias", "=", "bias_i", ")", "\n", "tail_logprob_i", "=", "F", ".", "log_softmax", "(", "tail_logit_i", ",", "dim", "=", "1", ")", "\n", "\n", "logprob_i", "=", "head_logprob_i", "[", ":", ",", "-", "i", "]", "+", "tail_logprob_i", ".", "gather", "(", "1", ",", "target_i", "[", ":", ",", "None", "]", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "if", "(", "hasattr", "(", "self", ",", "'keep_order'", ")", "and", "self", ".", "keep_order", ")", "or", "keep_order", ":", "\n", "                ", "nll", ".", "index_copy_", "(", "0", ",", "indices_i", ",", "-", "logprob_i", ")", "\n", "", "else", ":", "\n", "                ", "nll", "[", "offset", ":", "offset", "+", "logprob_i", ".", "size", "(", "0", ")", "]", ".", "copy_", "(", "-", "logprob_i", ")", "\n", "\n", "", "offset", "+=", "logprob_i", ".", "size", "(", "0", ")", "\n", "\n", "", "return", "nll", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.proj_adaptive_softmax.ProjectedAdaptiveLogSoftmax.__init__": [[13, 58], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "len", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "range", "proj_adaptive_softmax.ProjectedAdaptiveLogSoftmax.out_layers.append", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "torch.Linear", "torch.Linear", "torch.Linear", "len", "proj_adaptive_softmax.ProjectedAdaptiveLogSoftmax.out_projs.append", "proj_adaptive_softmax.ProjectedAdaptiveLogSoftmax.out_layers.append", "proj_adaptive_softmax.ProjectedAdaptiveLogSoftmax.out_projs.append", "proj_adaptive_softmax.ProjectedAdaptiveLogSoftmax.out_projs.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_token", ",", "d_embed", ",", "d_proj", ",", "cutoffs", ",", "div_val", "=", "1", ",", "\n", "keep_order", "=", "False", ")", ":", "\n", "        ", "super", "(", "ProjectedAdaptiveLogSoftmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_token", "=", "n_token", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "self", ".", "d_proj", "=", "d_proj", "\n", "\n", "self", ".", "cutoffs", "=", "cutoffs", "+", "[", "n_token", "]", "\n", "self", ".", "cutoff_ends", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "self", ".", "div_val", "=", "div_val", "\n", "\n", "self", ".", "shortlist_size", "=", "self", ".", "cutoffs", "[", "0", "]", "\n", "self", ".", "n_clusters", "=", "len", "(", "self", ".", "cutoffs", ")", "-", "1", "\n", "self", ".", "head_size", "=", "self", ".", "shortlist_size", "+", "self", ".", "n_clusters", "\n", "\n", "if", "self", ".", "n_clusters", ">", "0", ":", "\n", "            ", "self", ".", "cluster_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "n_clusters", ",", "self", ".", "d_embed", ")", ")", "\n", "self", ".", "cluster_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "n_clusters", ")", ")", "\n", "\n", "", "self", ".", "out_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "out_projs", "=", "nn", ".", "ParameterList", "(", ")", "\n", "\n", "if", "div_val", "==", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "if", "d_proj", "!=", "d_embed", ":", "\n", "                    ", "self", ".", "out_projs", ".", "append", "(", "\n", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "d_proj", ",", "d_embed", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "out_projs", ".", "append", "(", "None", ")", "\n", "\n", "", "", "self", ".", "out_layers", ".", "append", "(", "nn", ".", "Linear", "(", "d_embed", ",", "n_token", ")", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "d_emb_i", "=", "d_embed", "//", "(", "div_val", "**", "i", ")", "\n", "\n", "self", ".", "out_projs", ".", "append", "(", "\n", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "d_proj", ",", "d_emb_i", ")", ")", "\n", ")", "\n", "\n", "self", ".", "out_layers", ".", "append", "(", "nn", ".", "Linear", "(", "d_emb_i", ",", "r_idx", "-", "l_idx", ")", ")", "\n", "\n", "", "", "self", ".", "keep_order", "=", "keep_order", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.proj_adaptive_softmax.ProjectedAdaptiveLogSoftmax._compute_logit": [[59, 72], ["torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "proj.t().contiguous", "proj.t"], "methods", ["None"], ["", "def", "_compute_logit", "(", "self", ",", "hidden", ",", "weight", ",", "bias", ",", "proj", ")", ":", "\n", "        ", "if", "proj", "is", "None", ":", "\n", "            ", "logit", "=", "F", ".", "linear", "(", "hidden", ",", "weight", ",", "bias", "=", "bias", ")", "\n", "", "else", ":", "\n", "# if CUDA_MAJOR <= 9 and CUDA_MINOR <= 1:", "\n", "            ", "proj_hid", "=", "F", ".", "linear", "(", "hidden", ",", "proj", ".", "t", "(", ")", ".", "contiguous", "(", ")", ")", "\n", "logit", "=", "F", ".", "linear", "(", "proj_hid", ",", "weight", ",", "bias", "=", "bias", ")", "\n", "# else:", "\n", "#     logit = torch.einsum('bd,de,ev->bv', (hidden, proj, weight.t()))", "\n", "#     if bias is not None:", "\n", "#         logit = logit + bias", "\n", "\n", "", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.proj_adaptive_softmax.ProjectedAdaptiveLogSoftmax.forward": [[73, 152], ["hidden.size", "target.size", "RuntimeError", "proj_adaptive_softmax.ProjectedAdaptiveLogSoftmax._compute_logit", "range", "proj_adaptive_softmax.ProjectedAdaptiveLogSoftmax._compute_logit", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.log_softmax().gather().squeeze", "torch.log_softmax().gather().squeeze", "torch.log_softmax().gather().squeeze", "len", "weights.append", "biases.append", "mask_i.nonzero().squeeze", "torch.log_softmax.index_select", "head_logprob.index_select.gather().squeeze.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "mask_i.nonzero().squeeze.numel", "target.index_select", "F.log_softmax.index_select.gather().squeeze", "hidden.index_select", "proj_adaptive_softmax.ProjectedAdaptiveLogSoftmax._compute_logit", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.zeros_like.index_copy_", "torch.zeros_like.index_copy_", "torch.zeros_like.index_copy_", "nll[].copy_", "torch.log_softmax().gather", "torch.log_softmax().gather", "torch.log_softmax().gather", "mask_i.nonzero", "torch.log_softmax.gather().squeeze", "hasattr", "target.unsqueeze", "F.log_softmax.index_select.gather", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.gather", "head_logprob.index_select.gather().squeeze.size"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.proj_adaptive_softmax.ProjectedAdaptiveLogSoftmax._compute_logit", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.proj_adaptive_softmax.ProjectedAdaptiveLogSoftmax._compute_logit", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.proj_adaptive_softmax.ProjectedAdaptiveLogSoftmax._compute_logit"], ["", "def", "forward", "(", "self", ",", "hidden", ",", "target", ",", "keep_order", "=", "False", ")", ":", "\n", "        ", "'''\n            hidden :: [len*bsz x d_proj]\n            target :: [len*bsz]\n        '''", "\n", "\n", "if", "hidden", ".", "size", "(", "0", ")", "!=", "target", ".", "size", "(", "0", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Input and target should have the same size '", "\n", "'in the batch dimension.'", ")", "\n", "\n", "", "if", "self", ".", "n_clusters", "==", "0", ":", "\n", "            ", "logit", "=", "self", ".", "_compute_logit", "(", "hidden", ",", "self", ".", "out_layers", "[", "0", "]", ".", "weight", ",", "\n", "self", ".", "out_layers", "[", "0", "]", ".", "bias", ",", "self", ".", "out_projs", "[", "0", "]", ")", "\n", "nll", "=", "-", "F", ".", "log_softmax", "(", "logit", ",", "dim", "=", "-", "1", ")", ".", "gather", "(", "1", ",", "target", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "# construct weights and biases", "\n", "            ", "weights", ",", "biases", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "if", "self", ".", "div_val", "==", "1", ":", "\n", "                    ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "weight_i", "=", "self", ".", "out_layers", "[", "0", "]", ".", "weight", "[", "l_idx", ":", "r_idx", "]", "\n", "bias_i", "=", "self", ".", "out_layers", "[", "0", "]", ".", "bias", "[", "l_idx", ":", "r_idx", "]", "\n", "", "else", ":", "\n", "                    ", "weight_i", "=", "self", ".", "out_layers", "[", "i", "]", ".", "weight", "\n", "bias_i", "=", "self", ".", "out_layers", "[", "i", "]", ".", "bias", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "weight_i", "=", "torch", ".", "cat", "(", "\n", "[", "weight_i", ",", "self", ".", "cluster_weight", "]", ",", "dim", "=", "0", ")", "\n", "bias_i", "=", "torch", ".", "cat", "(", "\n", "[", "bias_i", ",", "self", ".", "cluster_bias", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "weights", ".", "append", "(", "weight_i", ")", "\n", "biases", ".", "append", "(", "bias_i", ")", "\n", "\n", "", "head_weight", ",", "head_bias", ",", "head_proj", "=", "weights", "[", "0", "]", ",", "biases", "[", "0", "]", ",", "self", ".", "out_projs", "[", "0", "]", "\n", "\n", "head_logit", "=", "self", ".", "_compute_logit", "(", "hidden", ",", "head_weight", ",", "head_bias", ",", "head_proj", ")", "\n", "head_logprob", "=", "F", ".", "log_softmax", "(", "head_logit", ",", "dim", "=", "1", ")", "\n", "\n", "nll", "=", "torch", ".", "zeros_like", "(", "target", ",", "\n", "dtype", "=", "hidden", ".", "dtype", ",", "device", "=", "hidden", ".", "device", ")", "\n", "\n", "offset", "=", "0", "\n", "cutoff_values", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "for", "i", "in", "range", "(", "len", "(", "cutoff_values", ")", "-", "1", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "cutoff_values", "[", "i", "]", ",", "cutoff_values", "[", "i", "+", "1", "]", "\n", "\n", "mask_i", "=", "(", "target", ">=", "l_idx", ")", "&", "(", "target", "<", "r_idx", ")", "\n", "indices_i", "=", "mask_i", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "indices_i", ".", "numel", "(", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "target_i", "=", "target", ".", "index_select", "(", "0", ",", "indices_i", ")", "-", "l_idx", "\n", "head_logprob_i", "=", "head_logprob", ".", "index_select", "(", "0", ",", "indices_i", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "logprob_i", "=", "head_logprob_i", ".", "gather", "(", "1", ",", "target_i", "[", ":", ",", "None", "]", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "weight_i", ",", "bias_i", ",", "proj_i", "=", "weights", "[", "i", "]", ",", "biases", "[", "i", "]", ",", "self", ".", "out_projs", "[", "i", "]", "\n", "\n", "hidden_i", "=", "hidden", ".", "index_select", "(", "0", ",", "indices_i", ")", "\n", "\n", "tail_logit_i", "=", "self", ".", "_compute_logit", "(", "hidden_i", ",", "weight_i", ",", "bias_i", ",", "proj_i", ")", "\n", "tail_logprob_i", "=", "F", ".", "log_softmax", "(", "tail_logit_i", ",", "dim", "=", "1", ")", "\n", "\n", "logprob_i", "=", "head_logprob_i", "[", ":", ",", "-", "i", "]", "+", "tail_logprob_i", ".", "gather", "(", "1", ",", "target_i", "[", ":", ",", "None", "]", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "if", "(", "hasattr", "(", "self", ",", "'keep_order'", ")", "and", "self", ".", "keep_order", ")", "or", "keep_order", ":", "\n", "                    ", "nll", ".", "index_copy_", "(", "0", ",", "indices_i", ",", "-", "logprob_i", ")", "\n", "", "else", ":", "\n", "                    ", "nll", "[", "offset", ":", "offset", "+", "logprob_i", ".", "size", "(", "0", ")", "]", ".", "copy_", "(", "-", "logprob_i", ")", "\n", "\n", "", "offset", "+=", "logprob_i", ".", "size", "(", "0", ")", "\n", "\n", "", "", "return", "nll", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.data_parallel.BalancedDataParallel.__init__": [[53, 56], ["torch.nn.parallel.DataParallel.__init__"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gpu0_bsz", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "gpu0_bsz", "=", "gpu0_bsz", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.data_parallel.BalancedDataParallel.forward": [[57, 72], ["data_parallel.BalancedDataParallel.scatter", "data_parallel.BalancedDataParallel.replicate", "data_parallel.BalancedDataParallel.parallel_apply", "data_parallel.BalancedDataParallel.gather", "data_parallel.BalancedDataParallel.module", "len", "data_parallel.BalancedDataParallel.module"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.data_parallel.scatter", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.data_parallel.BalancedDataParallel.parallel_apply"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "device_ids", ":", "\n", "            ", "return", "self", ".", "module", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "if", "self", ".", "gpu0_bsz", "==", "0", ":", "\n", "            ", "device_ids", "=", "self", ".", "device_ids", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "device_ids", "=", "self", ".", "device_ids", "\n", "", "inputs", ",", "kwargs", "=", "self", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "device_ids", ")", "\n", "if", "len", "(", "self", ".", "device_ids", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "module", "(", "*", "inputs", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "", "replicas", "=", "self", ".", "replicate", "(", "self", ".", "module", ",", "self", ".", "device_ids", ")", "\n", "if", "self", ".", "gpu0_bsz", "==", "0", ":", "\n", "            ", "replicas", "=", "replicas", "[", "1", ":", "]", "\n", "", "outputs", "=", "self", ".", "parallel_apply", "(", "replicas", ",", "device_ids", ",", "inputs", ",", "kwargs", ")", "\n", "return", "self", ".", "gather", "(", "outputs", ",", "self", ".", "output_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.data_parallel.BalancedDataParallel.parallel_apply": [[73, 75], ["torch.nn.parallel.parallel_apply.parallel_apply"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.data_parallel.BalancedDataParallel.parallel_apply"], ["", "def", "parallel_apply", "(", "self", ",", "replicas", ",", "device_ids", ",", "inputs", ",", "kwargs", ")", ":", "\n", "        ", "return", "parallel_apply", "(", "replicas", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.data_parallel.BalancedDataParallel.scatter": [[76, 91], ["inputs[].size", "len", "data_parallel.scatter_kwargs", "range", "super().scatter", "sum"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.data_parallel.scatter_kwargs", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.data_parallel.scatter"], ["", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", ":", "\n", "        ", "bsz", "=", "inputs", "[", "0", "]", ".", "size", "(", "self", ".", "dim", ")", "\n", "num_dev", "=", "len", "(", "self", ".", "device_ids", ")", "\n", "gpu0_bsz", "=", "self", ".", "gpu0_bsz", "\n", "bsz_unit", "=", "(", "bsz", "-", "gpu0_bsz", ")", "//", "(", "num_dev", "-", "1", ")", "\n", "if", "gpu0_bsz", "<", "bsz_unit", ":", "\n", "            ", "chunk_sizes", "=", "[", "gpu0_bsz", "]", "+", "[", "bsz_unit", "]", "*", "(", "num_dev", "-", "1", ")", "\n", "delta", "=", "bsz", "-", "sum", "(", "chunk_sizes", ")", "\n", "for", "i", "in", "range", "(", "delta", ")", ":", "\n", "                ", "chunk_sizes", "[", "i", "+", "1", "]", "+=", "1", "\n", "", "if", "gpu0_bsz", "==", "0", ":", "\n", "                ", "chunk_sizes", "=", "chunk_sizes", "[", "1", ":", "]", "\n", "", "", "else", ":", "\n", "            ", "return", "super", "(", ")", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "device_ids", ")", "\n", "", "return", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "device_ids", ",", "chunk_sizes", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.data_parallel.scatter": [[7, 39], ["isinstance", "data_parallel.scatter.scatter_map"], "function", ["None"], ["def", "scatter", "(", "inputs", ",", "target_gpus", ",", "chunk_sizes", ",", "dim", "=", "0", ")", ":", "\n", "    ", "r\"\"\"\n    Slices tensors into approximately equal chunks and\n    distributes them across given GPUs. Duplicates\n    references to objects that are not tensors.\n    \"\"\"", "\n", "def", "scatter_map", "(", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "return", "Scatter", ".", "apply", "(", "target_gpus", ",", "chunk_sizes", ",", "dim", ",", "obj", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "'obj'", ",", "obj", ".", "size", "(", ")", ")", "\n", "print", "(", "'dim'", ",", "dim", ")", "\n", "print", "(", "'chunk_sizes'", ",", "chunk_sizes", ")", "\n", "quit", "(", ")", "\n", "", "", "if", "isinstance", "(", "obj", ",", "tuple", ")", "and", "len", "(", "obj", ")", ">", "0", ":", "\n", "            ", "return", "list", "(", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ")", ")", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "list", ")", "and", "len", "(", "obj", ")", ">", "0", ":", "\n", "            ", "return", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ")", ")", ")", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "dict", ")", "and", "len", "(", "obj", ")", ">", "0", ":", "\n", "            ", "return", "list", "(", "map", "(", "type", "(", "obj", ")", ",", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ".", "items", "(", ")", ")", ")", ")", ")", "\n", "", "return", "[", "obj", "for", "targets", "in", "target_gpus", "]", "\n", "\n", "# After scatter_map is called, a scatter_map cell will exist. This cell", "\n", "# has a reference to the actual function scatter_map, which has references", "\n", "# to a closure that has a reference to the scatter_map cell (because the", "\n", "# fn is recursive). To avoid this reference cycle, we set the function to", "\n", "# None, clearing the cell", "\n", "", "try", ":", "\n", "        ", "return", "scatter_map", "(", "inputs", ")", "\n", "", "finally", ":", "\n", "        ", "scatter_map", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.data_parallel.scatter_kwargs": [[40, 51], ["tuple", "tuple", "data_parallel.scatter", "data_parallel.scatter", "len", "len", "tuple.extend", "len", "len", "tuple.extend", "range", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.data_parallel.scatter", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.data_parallel.scatter"], ["", "", "def", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "target_gpus", ",", "chunk_sizes", ",", "dim", "=", "0", ")", ":", "\n", "    ", "r\"\"\"Scatter with support for kwargs dictionary\"\"\"", "\n", "inputs", "=", "scatter", "(", "inputs", ",", "target_gpus", ",", "chunk_sizes", ",", "dim", ")", "if", "inputs", "else", "[", "]", "\n", "kwargs", "=", "scatter", "(", "kwargs", ",", "target_gpus", ",", "chunk_sizes", ",", "dim", ")", "if", "kwargs", "else", "[", "]", "\n", "if", "len", "(", "inputs", ")", "<", "len", "(", "kwargs", ")", ":", "\n", "        ", "inputs", ".", "extend", "(", "[", "(", ")", "for", "_", "in", "range", "(", "len", "(", "kwargs", ")", "-", "len", "(", "inputs", ")", ")", "]", ")", "\n", "", "elif", "len", "(", "kwargs", ")", "<", "len", "(", "inputs", ")", ":", "\n", "        ", "kwargs", ".", "extend", "(", "[", "{", "}", "for", "_", "in", "range", "(", "len", "(", "inputs", ")", "-", "len", "(", "kwargs", ")", ")", "]", ")", "\n", "", "inputs", "=", "tuple", "(", "inputs", ")", "\n", "kwargs", "=", "tuple", "(", "kwargs", ")", "\n", "return", "inputs", ",", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.log_uniform_sampler.LogUniformSampler.__init__": [[6, 25], ["torch.no_grad", "torch.arange().log_", "torch.arange", "log_uniform_sampler.LogUniformSampler.dist.double().log1p_", "log_uniform_sampler.LogUniformSampler.dist.double"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "range_max", ",", "n_sample", ")", ":", "\n", "        ", "\"\"\"\n        Reference : https://github.com/tensorflow/tensorflow/blob/r1.10/tensorflow/python/ops/candidate_sampling_ops.py\n            `P(class) = (log(class + 2) - log(class + 1)) / log(range_max + 1)`\n\n        expected count can be approximated by 1 - (1 - p)^n\n        and we use a numerically stable version -expm1(num_tries * log1p(-p))\n\n        Our implementation fixes num_tries at 2 * n_sample, and the actual #samples will vary from run to run\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "range_max", "=", "range_max", "\n", "log_indices", "=", "torch", ".", "arange", "(", "1.", ",", "range_max", "+", "2.", ",", "1.", ")", ".", "log_", "(", ")", "\n", "self", ".", "dist", "=", "(", "log_indices", "[", "1", ":", "]", "-", "log_indices", "[", ":", "-", "1", "]", ")", "/", "log_indices", "[", "-", "1", "]", "\n", "# print('P', self.dist.numpy().tolist()[-30:])", "\n", "\n", "self", ".", "log_q", "=", "(", "-", "(", "-", "self", ".", "dist", ".", "double", "(", ")", ".", "log1p_", "(", ")", "*", "2", "*", "n_sample", ")", ".", "expm1_", "(", ")", ")", ".", "log_", "(", ")", ".", "float", "(", ")", "\n", "\n", "", "self", ".", "n_sample", "=", "n_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.log_uniform_sampler.LogUniformSampler.sample": [[26, 46], ["torch.no_grad", "torch.multinomial().unique", "neg_samples.to.to.to", "log_uniform_sampler.LogUniformSampler.log_q[].to", "log_uniform_sampler.LogUniformSampler.log_q[].to", "torch.multinomial"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n            labels: [b1, b2]\n        Return\n            true_log_probs: [b1, b2]\n            samp_log_probs: [n_sample]\n            neg_samples: [n_sample]\n        \"\"\"", "\n", "\n", "# neg_samples = torch.empty(0).long()", "\n", "n_sample", "=", "self", ".", "n_sample", "\n", "n_tries", "=", "2", "*", "n_sample", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "neg_samples", "=", "torch", ".", "multinomial", "(", "self", ".", "dist", ",", "n_tries", ",", "replacement", "=", "True", ")", ".", "unique", "(", ")", "\n", "device", "=", "labels", ".", "device", "\n", "neg_samples", "=", "neg_samples", ".", "to", "(", "device", ")", "\n", "true_log_probs", "=", "self", ".", "log_q", "[", "labels", "]", ".", "to", "(", "device", ")", "\n", "samp_log_probs", "=", "self", ".", "log_q", "[", "neg_samples", "]", ".", "to", "(", "device", ")", "\n", "return", "true_log_probs", ",", "samp_log_probs", ",", "neg_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.log_uniform_sampler.sample_logits": [[47, 79], ["sampler.sample", "neg_samples.size", "torch.cat", "embedding", "all_w[].view", "all_w[].view", "all_b[].view", "sample_logits.masked_fill_", "torch.cat", "labels.size", "labels.size", "labels.view", "torch.einsum", "torch.einsum"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.log_uniform_sampler.LogUniformSampler.sample"], ["", "", "", "def", "sample_logits", "(", "embedding", ",", "bias", ",", "labels", ",", "inputs", ",", "sampler", ")", ":", "\n", "    ", "\"\"\"\n        embedding: an nn.Embedding layer\n        bias: [n_vocab]\n        labels: [b1, b2]\n        inputs: [b1, b2, n_emb]\n        sampler: you may use a LogUniformSampler\n    Return\n        logits: [b1, b2, 1 + n_sample]\n    \"\"\"", "\n", "true_log_probs", ",", "samp_log_probs", ",", "neg_samples", "=", "sampler", ".", "sample", "(", "labels", ")", "\n", "n_sample", "=", "neg_samples", ".", "size", "(", "0", ")", "\n", "b1", ",", "b2", "=", "labels", ".", "size", "(", "0", ")", ",", "labels", ".", "size", "(", "1", ")", "\n", "all_ids", "=", "torch", ".", "cat", "(", "[", "labels", ".", "view", "(", "-", "1", ")", ",", "neg_samples", "]", ")", "\n", "all_w", "=", "embedding", "(", "all_ids", ")", "\n", "true_w", "=", "all_w", "[", ":", "-", "n_sample", "]", ".", "view", "(", "b1", ",", "b2", ",", "-", "1", ")", "\n", "sample_w", "=", "all_w", "[", "-", "n_sample", ":", "]", ".", "view", "(", "n_sample", ",", "-", "1", ")", "\n", "\n", "all_b", "=", "bias", "[", "all_ids", "]", "\n", "true_b", "=", "all_b", "[", ":", "-", "n_sample", "]", ".", "view", "(", "b1", ",", "b2", ")", "\n", "sample_b", "=", "all_b", "[", "-", "n_sample", ":", "]", "\n", "\n", "hit", "=", "(", "labels", "[", ":", ",", ":", ",", "None", "]", "==", "neg_samples", ")", ".", "detach", "(", ")", "\n", "\n", "true_logits", "=", "torch", ".", "einsum", "(", "'ijk,ijk->ij'", ",", "\n", "[", "true_w", ",", "inputs", "]", ")", "+", "true_b", "-", "true_log_probs", "\n", "sample_logits", "=", "torch", ".", "einsum", "(", "'lk,ijk->ijl'", ",", "\n", "[", "sample_w", ",", "inputs", "]", ")", "+", "sample_b", "-", "samp_log_probs", "\n", "sample_logits", ".", "masked_fill_", "(", "hit", ",", "-", "1e30", ")", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "true_logits", "[", ":", ",", ":", ",", "None", "]", ",", "sample_logits", "]", ",", "-", "1", ")", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.PositionalEmbedding.__init__": [[38, 45], ["torch.Module.__init__", "complex_mem_transformer.PositionalEmbedding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "demb", ")", ":", "\n", "        ", "super", "(", "PositionalEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "demb", "=", "demb", "\n", "\n", "inv_freq", "=", "1", "/", "(", "10000", "**", "(", "torch", ".", "arange", "(", "0.0", ",", "demb", ",", "2.0", ")", "/", "demb", ")", ")", "\n", "self", ".", "register_buffer", "(", "'inv_freq'", ",", "inv_freq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.PositionalEmbedding.forward": [[46, 54], ["torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pos_emb[].expand", "torch.ger.sin", "torch.ger.sin", "torch.ger.sin", "torch.ger.cos", "torch.ger.cos", "torch.ger.cos"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pos_seq", ",", "bsz", "=", "None", ")", ":", "\n", "        ", "sinusoid_inp", "=", "torch", ".", "ger", "(", "pos_seq", ",", "self", ".", "inv_freq", ")", "\n", "pos_emb", "=", "torch", ".", "cat", "(", "[", "sinusoid_inp", ".", "sin", "(", ")", ",", "sinusoid_inp", ".", "cos", "(", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "bsz", "is", "not", "None", ":", "\n", "            ", "return", "pos_emb", "[", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "-", "1", ",", "bsz", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "pos_emb", "[", ":", ",", "None", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.PositionwiseFF.__init__": [[57, 74], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "dropout", ",", "pre_lnorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "PositionwiseFF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_inner", "=", "d_inner", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "CoreNet", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "d_model", ",", "d_inner", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "d_inner", ",", "d_model", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", ")", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.PositionwiseFF.forward": [[75, 90], ["complex_mem_transformer.PositionwiseFF.CoreNet", "complex_mem_transformer.PositionwiseFF.CoreNet", "complex_mem_transformer.PositionwiseFF.layer_norm", "complex_mem_transformer.PositionwiseFF.layer_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization + positionwise feed-forward", "\n", "            ", "core_out", "=", "self", ".", "CoreNet", "(", "self", ".", "layer_norm", "(", "inp", ")", ")", "\n", "\n", "##### residual connection", "\n", "output", "=", "core_out", "+", "inp", "\n", "", "else", ":", "\n", "##### positionwise feed-forward", "\n", "            ", "core_out", "=", "self", ".", "CoreNet", "(", "inp", ")", "\n", "\n", "##### residual connection + layer normalization", "\n", "output", "=", "self", ".", "layer_norm", "(", "inp", "+", "core_out", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.MultiHeadAttn.__init__": [[93, 114], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "dropatt", "=", "0", ",", "\n", "pre_lnorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "q_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "self", ".", "kv_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "2", "*", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropatt", "=", "nn", ".", "Dropout", "(", "dropatt", ")", "\n", "self", ".", "o_net", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_head", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "scale", "=", "1", "/", "(", "d_head", "**", "0.5", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.MultiHeadAttn.forward": [[115, 165], ["complex_mem_transformer.MultiHeadAttn.q_net", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "head_q.view.view.view", "head_k.view.view.view", "head_v.view.view.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.mul_", "torch.einsum.mul_", "torch.einsum.mul_", "torch.softmax", "torch.softmax", "torch.softmax", "complex_mem_transformer.MultiHeadAttn.dropatt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec.contiguous().view.contiguous().view.contiguous().view", "complex_mem_transformer.MultiHeadAttn.o_net", "complex_mem_transformer.MultiHeadAttn.drop", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "complex_mem_transformer.MultiHeadAttn.layer_norm", "complex_mem_transformer.MultiHeadAttn.kv_net", "h.size", "h.size", "complex_mem_transformer.MultiHeadAttn.size", "complex_mem_transformer.MultiHeadAttn.size", "complex_mem_transformer.MultiHeadAttn.size", "complex_mem_transformer.MultiHeadAttn.size", "attn_mask.any().item", "attn_vec.contiguous().view.contiguous().view.size", "attn_vec.contiguous().view.contiguous().view.size", "complex_mem_transformer.MultiHeadAttn.layer_norm", "attn_mask.dim", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "attn_vec.contiguous().view.contiguous().view.contiguous", "attn_mask.any", "attn_mask.dim", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "float", "float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "##### multihead attention", "\n", "# [hlen x bsz x n_head x d_head]", "\n", "\n", "        ", "if", "mems", "is", "not", "None", ":", "\n", "            ", "c", "=", "torch", ".", "cat", "(", "[", "mems", ",", "h", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "c", "=", "h", "\n", "\n", "", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization", "\n", "            ", "c", "=", "self", ".", "layer_norm", "(", "c", ")", "\n", "\n", "", "head_q", "=", "self", ".", "q_net", "(", "h", ")", "\n", "head_k", ",", "head_v", "=", "torch", ".", "chunk", "(", "self", ".", "kv_net", "(", "c", ")", ",", "2", ",", "-", "1", ")", "\n", "\n", "head_q", "=", "head_q", ".", "view", "(", "h", ".", "size", "(", "0", ")", ",", "h", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "head_k", "=", "head_k", ".", "view", "(", "c", ".", "size", "(", "0", ")", ",", "c", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "head_v", "=", "head_v", ".", "view", "(", "c", ".", "size", "(", "0", ")", ",", "c", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "attn_score", "=", "torch", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "(", "head_q", ",", "head_k", ")", ")", "\n", "attn_score", ".", "mul_", "(", "self", ".", "scale", ")", "\n", "if", "attn_mask", "is", "not", "None", "and", "attn_mask", ".", "any", "(", ")", ".", "item", "(", ")", ":", "\n", "            ", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", "None", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "1", ")", "\n", "attn_prob", "=", "self", ".", "dropatt", "(", "attn_prob", ")", "\n", "\n", "# [qlen x klen x bsz x n_head] + [klen x bsz x n_head x d_head] -> [qlen x bsz x n_head x d_head]", "\n", "attn_vec", "=", "torch", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "(", "attn_prob", ",", "head_v", ")", ")", "\n", "attn_vec", "=", "attn_vec", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "attn_vec", ".", "size", "(", "0", ")", ",", "attn_vec", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### residual connection", "\n", "            ", "output", "=", "h", "+", "attn_out", "\n", "", "else", ":", "\n", "##### residual connection + layer normalization", "\n", "            ", "output", "=", "self", ".", "layer_norm", "(", "h", "+", "attn_out", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.RelMultiHeadAttn.__init__": [[168, 190], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "sharing_phase_weight", ",", "dropatt", "=", "0", ",", "\n", "tgt_len", "=", "None", ",", "ext_len", "=", "None", ",", "mem_len", "=", "None", ",", "pre_lnorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "RelMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "qkv_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "3", "*", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "self", ".", "qkv_net1", "=", "self", ".", "qkv_net", "if", "sharing_phase_weight", "else", "nn", ".", "Linear", "(", "d_model", ",", "3", "*", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropatt", "=", "nn", ".", "Dropout", "(", "dropatt", ")", "\n", "self", ".", "o_net", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_head", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "self", ".", "o_net1", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_head", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "scale", "=", "1", "/", "(", "d_head", "**", "0.5", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.RelMultiHeadAttn._parallelogram_mask": [[191, 201], ["torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "min", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.ones().byte.flip", "torch.ones().byte.flip", "torch.ones().byte.flip", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "_parallelogram_mask", "(", "self", ",", "h", ",", "w", ",", "left", "=", "False", ")", ":", "\n", "        ", "mask", "=", "torch", ".", "ones", "(", "(", "h", ",", "w", ")", ")", ".", "byte", "(", ")", "\n", "m", "=", "min", "(", "h", ",", "w", ")", "\n", "mask", "[", ":", "m", ",", ":", "m", "]", "=", "torch", ".", "triu", "(", "mask", "[", ":", "m", ",", ":", "m", "]", ")", "\n", "mask", "[", "-", "m", ":", ",", "-", "m", ":", "]", "=", "torch", ".", "tril", "(", "mask", "[", "-", "m", ":", ",", "-", "m", ":", "]", ")", "\n", "\n", "if", "left", ":", "\n", "            ", "return", "mask", "\n", "", "else", ":", "\n", "            ", "return", "mask", ".", "flip", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.RelMultiHeadAttn._shift": [[202, 219], ["torch.cat().expand.masked_select().view", "torch.cat().expand.masked_select().view", "torch.cat().expand.masked_select().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "mask.flip.flip.flip", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select", "torch.cat().expand.masked_select", "torch.cat().expand.masked_select", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select().view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "_shift", "(", "self", ",", "x", ",", "qlen", ",", "klen", ",", "mask", ",", "left", "=", "False", ")", ":", "\n", "        ", "if", "qlen", ">", "1", ":", "\n", "            ", "zero_pad", "=", "torch", ".", "zeros", "(", "(", "x", ".", "size", "(", "0", ")", ",", "qlen", "-", "1", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ",", "\n", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "zero_pad", "=", "torch", ".", "zeros", "(", "0", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "\n", "", "if", "left", ":", "\n", "            ", "mask", "=", "mask", ".", "flip", "(", "1", ")", "\n", "x_padded", "=", "torch", ".", "cat", "(", "[", "zero_pad", ",", "x", "]", ",", "dim", "=", "1", ")", ".", "expand", "(", "qlen", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x_padded", "=", "torch", ".", "cat", "(", "[", "x", ",", "zero_pad", "]", ",", "dim", "=", "1", ")", ".", "expand", "(", "qlen", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "", "x", "=", "x_padded", ".", "masked_select", "(", "mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", ")", ".", "view", "(", "qlen", ",", "klen", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.RelMultiHeadAttn._rel_shift": [[220, 234], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_padded.view.view.view", "x_padded[].view_as", "x_padded[].view_as.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size"], "methods", ["None"], ["", "def", "_rel_shift", "(", "self", ",", "x", ",", "zero_triu", "=", "False", ")", ":", "\n", "        ", "zero_pad", "=", "torch", ".", "zeros", "(", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ",", "\n", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "x_padded", "=", "torch", ".", "cat", "(", "[", "zero_pad", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x_padded", "=", "x_padded", ".", "view", "(", "x", ".", "size", "(", "1", ")", "+", "1", ",", "x", ".", "size", "(", "0", ")", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "x", "=", "x_padded", "[", "1", ":", "]", ".", "view_as", "(", "x", ")", "\n", "\n", "if", "zero_triu", ":", "\n", "            ", "ones", "=", "torch", ".", "ones", "(", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ")", ")", "\n", "x", "=", "x", "*", "torch", ".", "tril", "(", "ones", ",", "x", ".", "size", "(", "1", ")", "-", "x", ".", "size", "(", "0", ")", ")", "[", ":", ",", ":", ",", "None", ",", "None", "]", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.RelMultiHeadAttn.forward": [[235, 237], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "w", ",", "r", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.RelPartialLearnableMultiHeadAttn.__init__": [[240, 245], ["complex_mem_transformer.RelMultiHeadAttn.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelPartialLearnableMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "r_net", "=", "nn", ".", "Linear", "(", "self", ".", "d_model", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ",", "bias", "=", "False", ")", "\n", "self", ".", "d_net", "=", "nn", ".", "Linear", "(", "self", ".", "d_model", "+", "self", ".", "d_model", ",", "self", ".", "d_model", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.RelPartialLearnableMultiHeadAttn.forward": [[246, 369], ["w_head_k_real.view.view.size", "w_head_q_real.view.view.view", "w_head_q_phase.view.view.view", "w_head_k_real.view.view.view", "w_head_k_phase.view.view.view", "w_head_v_real.view.view.view", "w_head_v_phase.view.view.view", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn._rel_shift", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn._rel_shift", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.mul_", "torch.softmax", "torch.softmax", "torch.softmax", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.dropatt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec_real.contiguous().view.contiguous().view.contiguous().view", "attn_vec_phase.contiguous().view.contiguous().view.contiguous().view", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.o_net", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.o_net1", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.drop", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.drop", "w_real.size", "r.size", "w_real.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.r_net", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.r_net", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_mask.any().item", "attn_vec_real.contiguous().view.contiguous().view.size", "attn_vec_real.contiguous().view.contiguous().view.size", "attn_vec_phase.contiguous().view.contiguous().view.size", "attn_vec_phase.contiguous().view.contiguous().view.size", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.layer_norm", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.layer_norm", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net1", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net1", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net1", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net1", "attn_mask.dim", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill().type_as", "attn_vec_real.contiguous().view.contiguous().view.contiguous", "attn_vec_phase.contiguous().view.contiguous().view.contiguous", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.layer_norm", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.layer_norm", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.layer_norm", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn.layer_norm", "attn_mask.any", "attn_mask.dim", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill().type_as", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float", "float", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float", "float"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelMultiHeadAttn._rel_shift", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelMultiHeadAttn._rel_shift"], ["", "def", "forward", "(", "self", ",", "w_real", ",", "w_phase", ",", "r", ",", "r_w_bias", ",", "r_r_bias", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ",", "mems_phase", "=", "None", ")", ":", "\n", "        ", "qlen", ",", "rlen", ",", "bsz", "=", "w_real", ".", "size", "(", "0", ")", ",", "r", ".", "size", "(", "0", ")", ",", "w_real", ".", "size", "(", "1", ")", "\n", "\n", "if", "mems", "is", "not", "None", ":", "\n", "            ", "cat_real", "=", "torch", ".", "cat", "(", "[", "mems", ",", "w_real", "]", ",", "0", ")", "\n", "cat_phase", "=", "torch", ".", "cat", "(", "[", "mems_phase", ",", "w_phase", "]", ",", "0", ")", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads_real", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "cat_real", ")", ")", "\n", "w_heads_phase", "=", "self", ".", "qkv_net1", "(", "self", ".", "layer_norm", "(", "cat_phase", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads_real", "=", "self", ".", "qkv_net", "(", "cat_real", ")", "\n", "w_heads_phase", "=", "self", ".", "qkv_net1", "(", "cat_phase", ")", "\n", "", "r_head_k", "=", "self", ".", "r_net", "(", "r", ")", "\n", "# print('ok')", "\n", "# exit()", "\n", "w_head_q_real", ",", "w_head_k_real", ",", "w_head_v_real", "=", "torch", ".", "chunk", "(", "w_heads_real", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "w_head_q_phase", ",", "w_head_k_phase", ",", "w_head_v_phase", "=", "torch", ".", "chunk", "(", "w_heads_phase", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "w_head_q_real", "=", "w_head_q_real", "[", "-", "qlen", ":", "]", "\n", "w_head_q_phase", "=", "w_head_q_phase", "[", "-", "qlen", ":", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads_real", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "w_real", ")", ")", "\n", "w_heads_phase", "=", "self", ".", "qkv_net1", "(", "self", ".", "layer_norm", "(", "w_phase", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads_real", "=", "self", ".", "qkv_net", "(", "w_real", ")", "\n", "w_heads_phase", "=", "self", ".", "qkv_net1", "(", "w_phase", ")", "\n", "", "r_head_k", "=", "self", ".", "r_net", "(", "r", ")", "\n", "w_head_q_real", ",", "w_head_k_real", ",", "w_head_v_real", "=", "torch", ".", "chunk", "(", "w_heads_real", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "w_head_q_phase", ",", "w_head_k_phase", ",", "w_head_v_phase", "=", "torch", ".", "chunk", "(", "w_heads_phase", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "klen", "=", "w_head_k_real", ".", "size", "(", "0", ")", "\n", "\n", "w_head_q_real", "=", "w_head_q_real", ".", "view", "(", "qlen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x bsz x n_head x d_head", "\n", "w_head_q_phase", "=", "w_head_q_phase", ".", "view", "(", "qlen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x bsz x n_head x d_head", "\n", "\n", "w_head_k_real", "=", "w_head_k_real", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x bsz x n_head x d_head", "\n", "w_head_k_phase", "=", "w_head_k_phase", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x bsz x n_head x d_head", "\n", "\n", "w_head_v_real", "=", "w_head_v_real", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x bsz x n_head x d_head", "\n", "w_head_v_phase", "=", "w_head_v_phase", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x bsz x n_head x d_head", "\n", "\n", "r_head_k", "=", "r_head_k", ".", "view", "(", "rlen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x n_head x d_head", "\n", "\n", "#### compute attention score", "\n", "rw_head_q_real", "=", "w_head_q_real", "+", "r_w_bias", "# qlen x bsz x n_head x d_head", "\n", "rw_head_q_phase", "=", "w_head_q_phase", "+", "r_w_bias", "# qlen x bsz x n_head x d_head", "\n", "\n", "AC_real", "=", "torch", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "(", "rw_head_q_real", ",", "w_head_k_real", ")", ")", "-", "torch", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "(", "\n", "rw_head_q_phase", ",", "w_head_k_phase", ")", ")", "# qlen x klen x bsz x n_head", "\n", "AC_phase", "=", "torch", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "(", "rw_head_q_real", ",", "w_head_k_phase", ")", ")", "+", "torch", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "(", "\n", "rw_head_q_real", ",", "w_head_k_phase", ")", ")", "# qlen x klen x bsz x n_head", "\n", "\n", "rr_head_q_real", "=", "w_head_q_real", "+", "r_r_bias", "\n", "rr_head_q_phase", "=", "w_head_q_phase", "+", "r_r_bias", "\n", "\n", "BD_real", "=", "torch", ".", "einsum", "(", "'ibnd,jnd->ijbn'", ",", "(", "rr_head_q_real", ",", "r_head_k", ")", ")", "# qlen x klen x bsz x n_head", "\n", "BD_phase", "=", "torch", ".", "einsum", "(", "'ibnd,jnd->ijbn'", ",", "(", "rr_head_q_phase", ",", "r_head_k", ")", ")", "# qlen x klen x bsz x n_head", "\n", "\n", "BD_real", "=", "self", ".", "_rel_shift", "(", "BD_real", ")", "\n", "BD_phase", "=", "self", ".", "_rel_shift", "(", "BD_phase", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "AC", "=", "AC_real", "*", "AC_real", "+", "AC_phase", "*", "AC_phase", "\n", "AC", "=", "torch", ".", "sqrt", "(", "AC", ")", "\n", "\n", "BD", "=", "BD_real", "*", "BD_real", "+", "BD_phase", "*", "BD_phase", "\n", "BD", "=", "torch", ".", "sqrt", "(", "BD", ")", "\n", "\n", "attn_score", "=", "AC", "+", "BD", "\n", "#", "\n", "\n", "# ACBD_real = AC_real + BD_real", "\n", "# ACBD_phase = AC_phase + BD_phase", "\n", "# ACBD_norm = ACBD_real * ACBD_real + ACBD_phase * ACBD_phase", "\n", "# attn_score = torch.sqrt(ACBD_norm)", "\n", "\n", "\n", "attn_score", ".", "mul_", "(", "self", ".", "scale", ")", "\n", "#### compute attention probability", "\n", "if", "attn_mask", "is", "not", "None", "and", "attn_mask", ".", "any", "(", ")", ".", "item", "(", ")", ":", "\n", "            ", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "attn_score", "=", "attn_score", ".", "float", "(", ")", ".", "masked_fill", "(", "\n", "attn_mask", "[", "None", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", ".", "type_as", "(", "attn_score", ")", "\n", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "attn_score", "=", "attn_score", ".", "float", "(", ")", ".", "masked_fill", "(", "\n", "attn_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", ".", "type_as", "(", "attn_score", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "1", ")", "\n", "attn_prob", "=", "self", ".", "dropatt", "(", "attn_prob", ")", "\n", "\n", "#### compute attention vector", "\n", "attn_vec_real", "=", "torch", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "(", "attn_prob", ",", "w_head_v_real", ")", ")", "\n", "attn_vec_phase", "=", "torch", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "(", "attn_prob", ",", "w_head_v_phase", ")", ")", "\n", "\n", "# [qlen x bsz x n_head x d_head]", "\n", "\n", "attn_vec_real", "=", "attn_vec_real", ".", "contiguous", "(", ")", ".", "view", "(", "attn_vec_real", ".", "size", "(", "0", ")", ",", "attn_vec_real", ".", "size", "(", "1", ")", ",", "\n", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "attn_vec_phase", "=", "attn_vec_phase", ".", "contiguous", "(", ")", ".", "view", "(", "attn_vec_phase", ".", "size", "(", "0", ")", ",", "attn_vec_phase", ".", "size", "(", "1", ")", ",", "\n", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "\n", "##### linear projection", "\n", "attn_out_real", "=", "self", ".", "o_net", "(", "attn_vec_real", ")", "\n", "attn_out_phase", "=", "self", ".", "o_net1", "(", "attn_vec_phase", ")", "\n", "attn_out_real", "=", "self", ".", "drop", "(", "attn_out_real", ")", "\n", "attn_out_phase", "=", "self", ".", "drop", "(", "attn_out_phase", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### residual connection", "\n", "            ", "output_real", "=", "attn_out_real", "\n", "output_phase", "=", "attn_out_phase", "\n", "", "else", ":", "\n", "##### residual connection + layer normalization", "\n", "# print(attn_out_real.size())", "\n", "            ", "output_real", "=", "self", ".", "layer_norm", "(", "w_real", "+", "attn_out_real", ")", "\n", "output_phase", "=", "self", ".", "layer_norm", "(", "w_phase", "+", "attn_out_phase", ")", "\n", "# output=torch.cat([output_real,output_phase],2)", "\n", "\n", "# output = torch.cat([output_real, output_phase], 2)", "\n", "# output = self.d_net(output)", "\n", "\n", "", "return", "output_real", ",", "output_phase", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.RelLearnableMultiHeadAttn.__init__": [[372, 374], ["complex_mem_transformer.RelMultiHeadAttn.__init__"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelLearnableMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.RelLearnableMultiHeadAttn.forward": [[375, 455], ["w_head_k.view.view.size", "w_head_q.view.view.view", "w_head_k.view.view.view", "w_head_v.view.view.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "complex_mem_transformer.RelLearnableMultiHeadAttn._rel_shift", "attn_score.mul_", "torch.softmax", "torch.softmax", "torch.softmax", "complex_mem_transformer.RelLearnableMultiHeadAttn.dropatt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec.contiguous().view.contiguous().view.contiguous().view", "complex_mem_transformer.RelLearnableMultiHeadAttn.o_net", "complex_mem_transformer.RelLearnableMultiHeadAttn.drop", "w.size", "w.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat.size", "torch.cat.size", "torch.cat.size", "r_emb[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "r_bias[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attn_mask.any().item", "attn_vec.contiguous().view.contiguous().view.size", "attn_vec.contiguous().view.contiguous().view.size", "complex_mem_transformer.RelLearnableMultiHeadAttn.layer_norm", "complex_mem_transformer.RelLearnableMultiHeadAttn.qkv_net", "complex_mem_transformer.RelLearnableMultiHeadAttn.qkv_net", "complex_mem_transformer.RelLearnableMultiHeadAttn.qkv_net", "complex_mem_transformer.RelLearnableMultiHeadAttn.qkv_net", "attn_mask.dim", "attn_score.masked_fill_", "attn_vec.contiguous().view.contiguous().view.contiguous", "complex_mem_transformer.RelLearnableMultiHeadAttn.layer_norm", "complex_mem_transformer.RelLearnableMultiHeadAttn.layer_norm", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "attn_mask.any", "attn_mask.dim", "attn_score.masked_fill_", "float", "float"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelMultiHeadAttn._rel_shift"], ["", "def", "forward", "(", "self", ",", "w", ",", "r_emb", ",", "r_w_bias", ",", "r_bias", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "# r_emb: [klen, n_head, d_head], used for term B", "\n", "# r_w_bias: [n_head, d_head], used for term C", "\n", "# r_bias: [klen, n_head], used for term D", "\n", "\n", "        ", "qlen", ",", "bsz", "=", "w", ".", "size", "(", "0", ")", ",", "w", ".", "size", "(", "1", ")", "\n", "\n", "if", "mems", "is", "not", "None", ":", "\n", "            ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", ",", "w", "]", ",", "0", ")", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "cat", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "cat", ")", "\n", "", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "w_head_q", "=", "w_head_q", "[", "-", "qlen", ":", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "w", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "w", ")", "\n", "", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "klen", "=", "w_head_k", ".", "size", "(", "0", ")", "\n", "\n", "w_head_q", "=", "w_head_q", ".", "view", "(", "qlen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "w_head_k", "=", "w_head_k", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "w_head_v", "=", "w_head_v", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "\n", "if", "klen", ">", "r_emb", ".", "size", "(", "0", ")", ":", "\n", "            ", "r_emb_pad", "=", "r_emb", "[", "0", ":", "1", "]", ".", "expand", "(", "klen", "-", "r_emb", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ")", "\n", "r_emb", "=", "torch", ".", "cat", "(", "[", "r_emb_pad", ",", "r_emb", "]", ",", "0", ")", "\n", "r_bias_pad", "=", "r_bias", "[", "0", ":", "1", "]", ".", "expand", "(", "klen", "-", "r_bias", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "r_bias", "=", "torch", ".", "cat", "(", "[", "r_bias_pad", ",", "r_bias", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "r_emb", "=", "r_emb", "[", "-", "klen", ":", "]", "\n", "r_bias", "=", "r_bias", "[", "-", "klen", ":", "]", "\n", "\n", "#### compute attention score", "\n", "", "rw_head_q", "=", "w_head_q", "+", "r_w_bias", "[", "None", "]", "# qlen x bsz x n_head x d_head", "\n", "\n", "AC", "=", "torch", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "(", "rw_head_q", ",", "w_head_k", ")", ")", "# qlen x klen x bsz x n_head", "\n", "B_", "=", "torch", ".", "einsum", "(", "'ibnd,jnd->ijbn'", ",", "(", "w_head_q", ",", "r_emb", ")", ")", "# qlen x klen x bsz x n_head", "\n", "D_", "=", "r_bias", "[", "None", ",", ":", ",", "None", "]", "# 1    x klen x 1   x n_head", "\n", "BD", "=", "self", ".", "_rel_shift", "(", "B_", "+", "D_", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "attn_score", "=", "AC", "+", "BD", "\n", "attn_score", ".", "mul_", "(", "self", ".", "scale", ")", "\n", "\n", "#### compute attention probability", "\n", "if", "attn_mask", "is", "not", "None", "and", "attn_mask", ".", "any", "(", ")", ".", "item", "(", ")", ":", "\n", "            ", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", "None", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "1", ")", "\n", "attn_prob", "=", "self", ".", "dropatt", "(", "attn_prob", ")", "\n", "\n", "#### compute attention vector", "\n", "attn_vec", "=", "torch", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "(", "attn_prob", ",", "w_head_v", ")", ")", "\n", "\n", "# [qlen x bsz x n_head x d_head]", "\n", "attn_vec", "=", "attn_vec", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "attn_vec", ".", "size", "(", "0", ")", ",", "attn_vec", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### residual connection", "\n", "            ", "output", "=", "w", "+", "attn_out", "\n", "", "else", ":", "\n", "##### residual connection + layer normalization", "\n", "            ", "output", "=", "self", ".", "layer_norm", "(", "w", "+", "attn_out", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.DecoderLayer.__init__": [[458, 464], ["torch.Module.__init__", "complex_mem_transformer.MultiHeadAttn", "complex_mem_transformer.PositionwiseFF", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "MultiHeadAttn", "(", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "**", "kwargs", ")", "\n", "self", ".", "pos_ff", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "kwargs", ".", "get", "(", "'pre_lnorm'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.DecoderLayer.forward": [[465, 471], ["complex_mem_transformer.DecoderLayer.dec_attn", "complex_mem_transformer.DecoderLayer.pos_ff"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dec_inp", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "output", "=", "self", ".", "dec_attn", "(", "dec_inp", ",", "attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems", ")", "\n", "output_real", "=", "self", ".", "pos_ff", "(", "output", ")", "\n", "\n", "return", "output_real", ",", "output_phase", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.RelLearnableDecoderLayer.__init__": [[474, 483], ["torch.Module.__init__", "complex_mem_transformer.RelLearnableMultiHeadAttn", "complex_mem_transformer.PositionwiseFF", "complex_mem_transformer.PositionwiseFF", "kwargs.get", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelLearnableDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "RelLearnableMultiHeadAttn", "(", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "\n", "**", "kwargs", ")", "\n", "self", ".", "pos_ff_real", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "kwargs", ".", "get", "(", "'pre_lnorm'", ")", ")", "\n", "self", ".", "pos_ff_imag", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "pre_lnorm", "=", "kwargs", ".", "get", "(", "'pre_lnorm'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.RelLearnableDecoderLayer.forward": [[484, 492], ["complex_mem_transformer.RelLearnableDecoderLayer.dec_attn", "complex_mem_transformer.RelLearnableDecoderLayer.pos_ff_real", "complex_mem_transformer.RelLearnableDecoderLayer.pos_ff_imag"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dec_inp", ",", "r_emb", ",", "r_w_bias", ",", "r_bias", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "output_real", ",", "output_phase", "=", "self", ".", "dec_attn", "(", "dec_inp", ",", "r_emb", ",", "r_w_bias", ",", "r_bias", ",", "\n", "attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems", ")", "\n", "output_real", "=", "self", ".", "pos_ff_real", "(", "output_real", ")", "\n", "output_phase", "=", "self", ".", "pos_ff_imag", "(", "output_phase", ")", "\n", "\n", "return", "output_real", ",", "output_phase", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.RelPartialLearnableDecoderLayer.__init__": [[495, 505], ["torch.Module.__init__", "complex_mem_transformer.RelPartialLearnableMultiHeadAttn", "complex_mem_transformer.PositionwiseFF", "complex_mem_transformer.PositionwiseFF", "kwargs.get", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "sharing_phase_weight", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelPartialLearnableDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "RelPartialLearnableMultiHeadAttn", "(", "n_head", ",", "d_model", ",", "\n", "d_head", ",", "dropout", ",", "sharing_phase_weight", ",", "**", "kwargs", ")", "\n", "self", ".", "pos_ff_real", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "kwargs", ".", "get", "(", "'pre_lnorm'", ")", ")", "\n", "self", ".", "pos_ff_imag", "=", "self", ".", "pos_ff_real", "if", "sharing_phase_weight", "else", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "kwargs", ".", "get", "(", "'pre_lnorm'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.RelPartialLearnableDecoderLayer.forward": [[506, 515], ["complex_mem_transformer.RelPartialLearnableDecoderLayer.dec_attn", "complex_mem_transformer.RelPartialLearnableDecoderLayer.pos_ff_real", "complex_mem_transformer.RelPartialLearnableDecoderLayer.pos_ff_imag"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dec_inp_real", ",", "dec_inp_phase", ",", "r", ",", "r_w_bias", ",", "r_r_bias", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ",", "mems_phase", "=", "None", ")", ":", "\n", "        ", "output_real", ",", "output_phase", "=", "self", ".", "dec_attn", "(", "dec_inp_real", ",", "dec_inp_phase", ",", "r", ",", "r_w_bias", ",", "r_r_bias", ",", "\n", "attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems", ",", "mems_phase", "=", "mems_phase", ")", "\n", "# output_real = self.pos_ff(output_real)", "\n", "output_real", "=", "self", ".", "pos_ff_real", "(", "output_real", ")", "\n", "output_phase", "=", "self", ".", "pos_ff_imag", "(", "output_phase", ")", "\n", "\n", "return", "output_real", ",", "output_phase", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.AdaptiveEmbedding.__init__": [[518, 547], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "complex_mem_transformer.AdaptiveEmbedding.emb_layers.append", "range", "torch.Embedding", "torch.Embedding", "torch.Embedding", "complex_mem_transformer.AdaptiveEmbedding.emb_projs.append", "len", "complex_mem_transformer.AdaptiveEmbedding.emb_layers.append", "complex_mem_transformer.AdaptiveEmbedding.emb_projs.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_token", ",", "d_embed", ",", "d_proj", ",", "cutoffs", ",", "div_val", "=", "1", ",", "\n", "sample_softmax", "=", "False", ")", ":", "\n", "        ", "super", "(", "AdaptiveEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_token", "=", "n_token", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "\n", "self", ".", "cutoffs", "=", "cutoffs", "+", "[", "n_token", "]", "\n", "self", ".", "div_val", "=", "div_val", "\n", "self", ".", "d_proj", "=", "d_proj", "\n", "\n", "self", ".", "emb_scale", "=", "d_proj", "**", "0.5", "\n", "\n", "self", ".", "cutoff_ends", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "\n", "self", ".", "emb_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "emb_projs", "=", "nn", ".", "ParameterList", "(", ")", "\n", "if", "div_val", "==", "1", ":", "\n", "            ", "self", ".", "emb_layers", ".", "append", "(", "\n", "nn", ".", "Embedding", "(", "n_token", ",", "d_embed", ",", "sparse", "=", "sample_softmax", ">", "0", ")", "\n", ")", "\n", "if", "d_proj", "!=", "d_embed", ":", "\n", "                ", "self", ".", "emb_projs", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "d_proj", ",", "d_embed", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "d_emb_i", "=", "d_embed", "//", "(", "div_val", "**", "i", ")", "\n", "self", ".", "emb_layers", ".", "append", "(", "nn", ".", "Embedding", "(", "r_idx", "-", "l_idx", ",", "d_emb_i", ")", ")", "\n", "self", ".", "emb_projs", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "d_proj", ",", "d_emb_i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.AdaptiveEmbedding.forward": [[548, 578], ["torch.linear.mul_", "next", "inp.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros.view", "torch.zeros.view", "torch.zeros.view", "torch.linear", "torch.linear", "torch.linear", "complex_mem_transformer.AdaptiveEmbedding.parameters", "len", "mask_i.nonzero().squeeze", "torch.linear", "torch.linear", "torch.linear", "torch.zeros.index_copy_", "torch.zeros.index_copy_", "torch.zeros.index_copy_", "inp.view.size", "mask_i.nonzero().squeeze.numel", "inp.view.index_select", "inp.size", "mask_i.nonzero"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.next"], ["", "", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "div_val", "==", "1", ":", "\n", "            ", "embed", "=", "self", ".", "emb_layers", "[", "0", "]", "(", "inp", ")", "\n", "if", "self", ".", "d_proj", "!=", "self", ".", "d_embed", ":", "\n", "                ", "embed", "=", "F", ".", "linear", "(", "embed", ",", "self", ".", "emb_projs", "[", "0", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "param", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", "\n", "inp_flat", "=", "inp", ".", "view", "(", "-", "1", ")", "\n", "emb_flat", "=", "torch", ".", "zeros", "(", "[", "inp_flat", ".", "size", "(", "0", ")", ",", "self", ".", "d_proj", "]", ",", "\n", "dtype", "=", "param", ".", "dtype", ",", "device", "=", "param", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "\n", "mask_i", "=", "(", "inp_flat", ">=", "l_idx", ")", "&", "(", "inp_flat", "<", "r_idx", ")", "\n", "indices_i", "=", "mask_i", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "indices_i", ".", "numel", "(", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "inp_i", "=", "inp_flat", ".", "index_select", "(", "0", ",", "indices_i", ")", "-", "l_idx", "\n", "emb_i", "=", "self", ".", "emb_layers", "[", "i", "]", "(", "inp_i", ")", "\n", "emb_i", "=", "F", ".", "linear", "(", "emb_i", ",", "self", ".", "emb_projs", "[", "i", "]", ")", "\n", "\n", "emb_flat", ".", "index_copy_", "(", "0", ",", "indices_i", ",", "emb_i", ")", "\n", "\n", "", "embed", "=", "emb_flat", ".", "view", "(", "*", "inp", ".", "size", "(", ")", ",", "self", ".", "d_proj", ")", "\n", "\n", "", "embed", ".", "mul_", "(", "self", ".", "emb_scale", ")", "\n", "\n", "return", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.MemTransformerLM.__init__": [[581, 666], ["torch.Module.__init__", "complex_mem_transformer.AdaptiveEmbedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "complex_mem_transformer.MemTransformerLM._create_params", "range", "torch.Linear", "torch.Linear", "torch.Linear", "log_uniform_sampler.LogUniformSampler", "proj_adaptive_softmax.ProjectedAdaptiveLogSoftmax", "complex_mem_transformer.MemTransformerLM.layers.append", "range", "range", "enumerate", "complex_mem_transformer.RelPartialLearnableDecoderLayer", "complex_mem_transformer.MemTransformerLM.layers.append", "range", "len", "complex_mem_transformer.RelLearnableDecoderLayer", "complex_mem_transformer.MemTransformerLM.layers.append", "complex_mem_transformer.DecoderLayer"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM._create_params"], ["    ", "def", "__init__", "(", "self", ",", "n_token", ",", "n_layer", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "\n", "dropout", ",", "dropatt", ",", "sharing_phase_weight", ",", "tie_weight", "=", "True", ",", "d_embed", "=", "None", ",", "\n", "div_val", "=", "1", ",", "tie_projs", "=", "[", "False", "]", ",", "pre_lnorm", "=", "False", ",", "\n", "tgt_len", "=", "None", ",", "ext_len", "=", "None", ",", "mem_len", "=", "None", ",", "\n", "cutoffs", "=", "[", "]", ",", "adapt_inp", "=", "False", ",", "\n", "same_length", "=", "False", ",", "attn_type", "=", "0", ",", "clamp_len", "=", "-", "1", ",", "\n", "sample_softmax", "=", "-", "1", ",", "schema", "=", "0", ")", ":", "\n", "        ", "super", "(", "MemTransformerLM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_token", "=", "n_token", "\n", "self", ".", "schema", "=", "schema", "\n", "\n", "d_embed", "=", "d_model", "if", "d_embed", "is", "None", "else", "d_embed", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "sharing_phase_weight", "=", "sharing_phase_weight", "\n", "self", ".", "word_emb", "=", "AdaptiveEmbedding", "(", "n_token", ",", "d_embed", ",", "d_model", ",", "cutoffs", ",", "\n", "div_val", "=", "div_val", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "n_layer", "=", "n_layer", "\n", "\n", "self", ".", "tgt_len", "=", "tgt_len", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "ext_len", "=", "ext_len", "\n", "self", ".", "max_klen", "=", "tgt_len", "+", "ext_len", "+", "mem_len", "\n", "\n", "self", ".", "attn_type", "=", "attn_type", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "attn_type", "==", "0", ":", "# the default attention", "\n", "\n", "            ", "for", "i", "in", "range", "(", "n_layer", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "RelPartialLearnableDecoderLayer", "(", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "self", ".", "sharing_phase_weight", ",", "tgt_len", "=", "tgt_len", ",", "\n", "ext_len", "=", "ext_len", ",", "mem_len", "=", "mem_len", ",", "dropatt", "=", "dropatt", ",", "\n", "pre_lnorm", "=", "pre_lnorm", ")", "\n", ")", "\n", "", "", "elif", "attn_type", "==", "1", ":", "# learnable embeddings", "\n", "            ", "for", "i", "in", "range", "(", "n_layer", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "RelLearnableDecoderLayer", "(", "\n", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "tgt_len", "=", "tgt_len", ",", "ext_len", "=", "ext_len", ",", "mem_len", "=", "mem_len", ",", "\n", "dropatt", "=", "dropatt", ",", "pre_lnorm", "=", "pre_lnorm", ")", "\n", ")", "\n", "", "", "elif", "attn_type", "in", "[", "2", ",", "3", "]", ":", "# absolute embeddings", "\n", "            ", "for", "i", "in", "range", "(", "n_layer", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "DecoderLayer", "(", "\n", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "dropatt", "=", "dropatt", ",", "pre_lnorm", "=", "pre_lnorm", ")", "\n", ")", "\n", "\n", "", "", "self", ".", "sample_softmax", "=", "sample_softmax", "\n", "# use sampled softmax", "\n", "if", "sample_softmax", ">", "0", ":", "\n", "            ", "self", ".", "out_layer", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_token", ")", "\n", "if", "tie_weight", ":", "\n", "                ", "self", ".", "out_layer", ".", "weight", "=", "self", ".", "word_emb", ".", "weight", "\n", "", "self", ".", "tie_weight", "=", "tie_weight", "\n", "self", ".", "sampler", "=", "LogUniformSampler", "(", "n_token", ",", "sample_softmax", ")", "\n", "\n", "# use adaptive softmax (including standard softmax)", "\n", "", "else", ":", "\n", "            ", "self", ".", "crit", "=", "ProjectedAdaptiveLogSoftmax", "(", "n_token", ",", "d_embed", ",", "d_model", ",", "\n", "cutoffs", ",", "div_val", "=", "div_val", ")", "\n", "\n", "if", "tie_weight", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "crit", ".", "out_layers", ")", ")", ":", "\n", "                    ", "self", ".", "crit", ".", "out_layers", "[", "i", "]", ".", "weight", "=", "self", ".", "word_emb", ".", "emb_layers", "[", "i", "]", ".", "weight", "\n", "\n", "", "", "if", "tie_projs", ":", "\n", "                ", "for", "i", ",", "tie_proj", "in", "enumerate", "(", "tie_projs", ")", ":", "\n", "                    ", "if", "tie_proj", "and", "div_val", "==", "1", "and", "d_model", "!=", "d_embed", ":", "\n", "                        ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "self", ".", "word_emb", ".", "emb_projs", "[", "0", "]", "\n", "", "elif", "tie_proj", "and", "div_val", "!=", "1", ":", "\n", "                        ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "self", ".", "word_emb", ".", "emb_projs", "[", "i", "]", "\n", "\n", "", "", "", "", "self", ".", "same_length", "=", "same_length", "\n", "self", ".", "clamp_len", "=", "clamp_len", "\n", "\n", "self", ".", "_create_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.MemTransformerLM.backward_compatible": [[667, 669], ["None"], "methods", ["None"], ["", "def", "backward_compatible", "(", "self", ")", ":", "\n", "        ", "self", ".", "sample_softmax", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.MemTransformerLM._create_params": [[670, 704], ["complex_mem_transformer.PositionalEmbedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "complex_mem_transformer.get_sinusoid_encoding_table", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "complex_mem_transformer.PositionalEmbedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "exit", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.get_sinusoid_encoding_table"], ["", "def", "_create_params", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "pos_emb", "=", "PositionalEmbedding", "(", "self", ".", "d_model", ")", "\n", "if", "self", ".", "attn_type", "==", "0", ":", "# default attention", "\n", "            ", "if", "self", ".", "schema", "==", "0", ":", "\n", "                ", "weight", "=", "get_sinusoid_encoding_table", "(", "self", ".", "n_token", ",", "self", ".", "d_model", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "pos_emb_phase", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "weight", ",", "freeze", "=", "False", ")", "# , freeze=True", "\n", "self", ".", "pos_emb_phase", ".", "weight", ".", "requires_grad", "=", "True", "\n", "", "elif", "self", ".", "schema", "==", "1", ":", "\n", "                ", "self", ".", "period", "=", "torch", ".", "nn", ".", "Embedding", "(", "self", ".", "n_token", ",", "1", ")", "\n", "\n", "", "elif", "self", ".", "schema", "==", "2", ":", "\n", "                ", "self", ".", "period", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "d_model", ")", ")", "# , freeze=True", "\n", "\n", "\n", "", "else", ":", "\n", "                ", "exit", "(", ")", "\n", "\n", "# self.pos_emb_phase.weight.requires_grad = True", "\n", "\n", "", "self", ".", "r_w_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_r_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "1", ":", "# learnable", "\n", "            ", "self", ".", "r_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "n_layer", ",", "self", ".", "max_klen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_w_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "n_layer", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "n_layer", ",", "self", ".", "max_klen", ",", "self", ".", "n_head", ")", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "2", ":", "# absolute standard", "\n", "            ", "self", ".", "pos_emb", "=", "PositionalEmbedding", "(", "self", ".", "d_model", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "3", ":", "# absolute deeper SA", "\n", "            ", "self", ".", "r_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "n_layer", ",", "self", ".", "max_klen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.MemTransformerLM.reset_length": [[705, 709], ["None"], "methods", ["None"], ["", "", "def", "reset_length", "(", "self", ",", "tgt_len", ",", "ext_len", ",", "mem_len", ")", ":", "\n", "        ", "self", ".", "tgt_len", "=", "tgt_len", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "ext_len", "=", "ext_len", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.MemTransformerLM.init_mems": [[710, 721], ["next", "range", "complex_mem_transformer.MemTransformerLM.parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "mems.append"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.next"], ["", "def", "init_mems", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mem_len", ">", "0", ":", "\n", "            ", "mems", "=", "[", "]", "\n", "param", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layer", "+", "1", ")", ":", "\n", "                ", "empty", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "param", ".", "dtype", ",", "device", "=", "param", ".", "device", ")", "\n", "mems", ".", "append", "(", "empty", ")", "\n", "\n", "", "return", "mems", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.MemTransformerLM._update_mems": [[722, 743], ["len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "range", "max", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "new_mems.append", "cat[].detach"], "methods", ["None"], ["", "", "def", "_update_mems", "(", "self", ",", "hids", ",", "mems", ",", "qlen", ",", "mlen", ")", ":", "\n", "# does not deal with None", "\n", "        ", "if", "mems", "is", "None", ":", "return", "None", "\n", "\n", "# mems is not None", "\n", "assert", "len", "(", "hids", ")", "==", "len", "(", "mems", ")", ",", "'len(hids) != len(mems)'", "\n", "\n", "# There are `mlen + qlen` steps that can be cached into mems", "\n", "# For the next step, the last `ext_len` of the `qlen` tokens", "\n", "# will be used as the extended context. Hence, we only cache", "\n", "# the tokens from `mlen + qlen - self.ext_len - self.mem_len`", "\n", "# to `mlen + qlen - self.ext_len`.", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "new_mems", "=", "[", "]", "\n", "end_idx", "=", "mlen", "+", "max", "(", "0", ",", "qlen", "-", "0", "-", "self", ".", "ext_len", ")", "\n", "beg_idx", "=", "max", "(", "0", ",", "end_idx", "-", "self", ".", "mem_len", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "hids", ")", ")", ":", "\n", "                ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", "[", "i", "]", ",", "hids", "[", "i", "]", "]", ",", "dim", "=", "0", ")", "\n", "new_mems", ".", "append", "(", "cat", "[", "beg_idx", ":", "end_idx", "]", ".", "detach", "(", ")", ")", "\n", "\n", "", "", "return", "new_mems", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.MemTransformerLM._forward": [[744, 888], ["dec_inp.size", "complex_mem_transformer.MemTransformerLM.word_emb", "complex_mem_transformer.MemTransformerLM._update_mems", "complex_mem_transformer.MemTransformerLM._update_mems", "mems[].size", "complex_mem_transformer.MemTransformerLM.new_ones", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "complex_mem_transformer.MemTransformerLM.pos_emb", "complex_mem_transformer.MemTransformerLM.drop", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "pos_seq.repeat.repeat.repeat", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "complex_mem_transformer.MemTransformerLM.drop", "complex_mem_transformer.MemTransformerLM.drop", "hids.append", "hids_phase.append", "enumerate", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "pos_seq.repeat.repeat.clamp_", "complex_mem_transformer.MemTransformerLM.pos_emb_phase", "layer", "hids.append", "hids_phase.append", "complex_mem_transformer.MemTransformerLM.period().repeat", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "complex_mem_transformer.MemTransformerLM.size", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze.repeat", "torch.unsqueeze.repeat", "torch.unsqueeze.repeat", "print", "exit", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "complex_mem_transformer.MemTransformerLM.new_ones", "complex_mem_transformer.MemTransformerLM.period", "complex_mem_transformer.MemTransformerLM.size"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM._update_mems", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM._update_mems", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul"], ["", "def", "_forward", "(", "self", ",", "dec_inp", ",", "mems", "=", "None", ",", "mems_phase", "=", "None", ")", ":", "\n", "        ", "qlen", ",", "bsz", "=", "dec_inp", ".", "size", "(", ")", "\n", "\n", "word_emb", "=", "self", ".", "word_emb", "(", "dec_inp", ")", "\n", "\n", "mlen", "=", "mems", "[", "0", "]", ".", "size", "(", "0", ")", "if", "mems", "is", "not", "None", "else", "0", "\n", "klen", "=", "mlen", "+", "qlen", "\n", "if", "self", ".", "same_length", ":", "\n", "            ", "all_ones", "=", "word_emb", ".", "new_ones", "(", "qlen", ",", "klen", ")", "\n", "mask_len", "=", "klen", "-", "self", ".", "mem_len", "\n", "if", "mask_len", ">", "0", ":", "\n", "                ", "mask_shift_len", "=", "qlen", "-", "mask_len", "\n", "", "else", ":", "\n", "                ", "mask_shift_len", "=", "qlen", "\n", "", "dec_attn_mask", "=", "(", "torch", ".", "triu", "(", "all_ones", ",", "1", "+", "mlen", ")", "+", "torch", ".", "tril", "(", "all_ones", ",", "-", "mask_shift_len", ")", ")", ".", "byte", "(", ")", "[", ":", ",", ":", ",", "\n", "None", "]", "# -1", "\n", "", "else", ":", "\n", "            ", "dec_attn_mask", "=", "torch", ".", "triu", "(", "\n", "word_emb", ".", "new_ones", "(", "qlen", ",", "klen", ")", ",", "diagonal", "=", "1", "+", "mlen", ")", ".", "byte", "(", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "\n", "", "hids", "=", "[", "]", "\n", "hids_phase", "=", "[", "]", "\n", "if", "self", ".", "attn_type", "==", "0", ":", "# default", "\n", "\n", "\n", "            ", "pos_seq", "=", "torch", ".", "arange", "(", "klen", "-", "1", ",", "-", "1", ",", "-", "1.0", ",", "device", "=", "word_emb", ".", "device", ",", "\n", "dtype", "=", "word_emb", ".", "dtype", ")", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "pos_seq", ".", "clamp_", "(", "max", "=", "self", ".", "clamp_len", ")", "\n", "\n", "", "pos_emb", "=", "self", ".", "pos_emb", "(", "pos_seq", ")", "\n", "\n", "\n", "pos_emb", "=", "self", ".", "drop", "(", "pos_emb", ")", "\n", "\n", "pos_seq", "=", "torch", ".", "arange", "(", "1", ",", "qlen", "+", "1", ",", "1.0", ",", "device", "=", "word_emb", ".", "device", ",", "dtype", "=", "word_emb", ".", "dtype", ")", "\n", "pos_seq", "=", "torch", ".", "unsqueeze", "(", "pos_seq", ",", "-", "1", ")", "\n", "pos_seq", "=", "torch", ".", "unsqueeze", "(", "pos_seq", ",", "-", "1", ")", "\n", "\n", "pos_seq", "=", "pos_seq", ".", "repeat", "(", "[", "1", ",", "bsz", ",", "word_emb", ".", "size", "(", ")", "[", "-", "1", "]", "]", ")", "# no neccesary to run this line", "\n", "\n", "if", "self", ".", "schema", "==", "0", ":", "\n", "                ", "emb_peroid", "=", "self", ".", "pos_emb_phase", "(", "dec_inp", ")", "\n", "\n", "", "elif", "self", ".", "schema", "==", "1", ":", "# vocab_size", "\n", "\n", "                ", "emb_peroid", "=", "self", ".", "period", "(", "dec_inp", ")", ".", "repeat", "(", "[", "1", ",", "1", ",", "word_emb", ".", "size", "(", ")", "[", "-", "1", "]", "]", ")", "\n", "\n", "", "elif", "self", ".", "schema", "==", "2", ":", "\n", "                ", "dimension_multiplier", "=", "torch", ".", "unsqueeze", "(", "self", ".", "period", ",", "-", "2", ")", "\n", "dimension_multiplier", "=", "torch", ".", "unsqueeze", "(", "dimension_multiplier", ",", "-", "2", ")", "\n", "emb_peroid", "=", "dimension_multiplier", ".", "repeat", "(", "[", "qlen", ",", "bsz", ",", "1", "]", ")", "\n", "\n", "\n", "\n", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"wrong schema\"", ")", "\n", "exit", "(", "1", ")", "\n", "", "emb_phase", "=", "torch", ".", "mul", "(", "pos_seq", ",", "emb_peroid", ")", "\n", "\n", "cos", "=", "torch", ".", "cos", "(", "emb_phase", ")", "\n", "sin", "=", "torch", ".", "sin", "(", "emb_phase", ")", "\n", "\n", "core_out", "=", "word_emb", "*", "cos", "\n", "pos_emb_phase", "=", "word_emb", "*", "sin", "\n", "\n", "core_out", "=", "self", ".", "drop", "(", "core_out", ")", "\n", "core_out_phase", "=", "self", ".", "drop", "(", "pos_emb_phase", ")", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "hids_phase", ".", "append", "(", "core_out_phase", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "                ", "mems_i", "=", "None", "if", "mems", "is", "None", "else", "mems", "[", "i", "]", "\n", "mems_phase_i", "=", "None", "if", "mems_phase", "is", "None", "else", "mems_phase", "[", "i", "]", "\n", "core_out", ",", "core_out_phase", "=", "layer", "(", "core_out", ",", "core_out_phase", ",", "pos_emb", ",", "self", ".", "r_w_bias", ",", "self", ".", "r_r_bias", ",", "\n", "dec_attn_mask", "=", "dec_attn_mask", ",", "mems", "=", "mems_i", ",", "mems_phase", "=", "mems_phase_i", ")", "\n", "\n", "# print(core_out.size())", "\n", "# exit()", "\n", "# core_out=(core_out+core_out_phase)/2", "\n", "\n", "# core_out=torch.sqrt(core_out)", "\n", "\n", "# core_out=torch.sqrt((1/2)*core_out)", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "hids_phase", ".", "append", "(", "core_out_phase", ")", "\n", "# elif self.attn_type == 1: # learnable", "\n", "#     core_out = self.drop(word_emb)", "\n", "#     hids.append(core_out)", "\n", "#     for i, layer in enumerate(self.layers):", "\n", "#         if self.clamp_len > 0:", "\n", "#             r_emb = self.r_emb[i][-self.clamp_len :]", "\n", "#             r_bias = self.r_bias[i][-self.clamp_len :]", "\n", "#         else:", "\n", "#             r_emb, r_bias = self.r_emb[i], self.r_bias[i]", "\n", "\n", "#         mems_i = None if mems is None else mems[i]", "\n", "#         core_out = layer(core_out, r_emb, self.r_w_bias[i],", "\n", "#                 r_bias, dec_attn_mask=dec_attn_mask, mems=mems_i)", "\n", "#         hids.append(core_out)", "\n", "# elif self.attn_type == 2: # absolute", "\n", "#     pos_seq = torch.arange(klen - 1, -1, -1.0, device=word_emb.device,", "\n", "#                            dtype=word_emb.dtype)", "\n", "#     if self.clamp_len > 0:", "\n", "#         pos_seq.clamp_(max=self.clamp_len)", "\n", "#     pos_emb = self.pos_emb(pos_seq)", "\n", "\n", "#     core_out = self.drop(word_emb + pos_emb[-qlen:])", "\n", "\n", "#     hids.append(core_out)", "\n", "#     for i, layer in enumerate(self.layers):", "\n", "#         mems_i = None if mems is None else mems[i]", "\n", "#         if mems_i is not None and i == 0:", "\n", "#             mems_i += pos_emb[:mlen]", "\n", "#         core_out = layer(core_out, dec_attn_mask=dec_attn_mask,", "\n", "#                          mems=mems_i)", "\n", "#         hids.append(core_out)", "\n", "# elif self.attn_type == 3:", "\n", "#     core_out = self.drop(word_emb)", "\n", "\n", "#     hids.append(core_out)", "\n", "#     for i, layer in enumerate(self.layers):", "\n", "#         mems_i = None if mems is None else mems[i]", "\n", "#         if mems_i is not None and mlen > 0:", "\n", "#             cur_emb = self.r_emb[i][:-qlen]", "\n", "#             cur_size = cur_emb.size(0)", "\n", "#             if cur_size < mlen:", "\n", "#                 cur_emb_pad = cur_emb[0:1].expand(mlen-cur_size, -1, -1)", "\n", "#                 cur_emb = torch.cat([cur_emb_pad, cur_emb], 0)", "\n", "#             else:", "\n", "#                 cur_emb = cur_emb[-mlen:]", "\n", "#             mems_i += cur_emb.view(mlen, 1, -1)", "\n", "#         core_out += self.r_emb[i][-qlen:].view(qlen, 1, -1)", "\n", "\n", "#         core_out = layer(core_out, dec_attn_mask=dec_attn_mask,", "\n", "#                          mems=mems_i)", "\n", "#         hids.append(core_out)", "\n", "\n", "\n", "\n", "", "", "new_mems", "=", "self", ".", "_update_mems", "(", "hids", ",", "mems", ",", "mlen", ",", "qlen", ")", "\n", "new_mems_phase", "=", "self", ".", "_update_mems", "(", "hids_phase", ",", "mems_phase", ",", "mlen", ",", "qlen", ")", "\n", "\n", "return", "core_out", ",", "core_out_phase", ",", "new_mems", ",", "new_mems_phase", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.MemTransformerLM.forward": [[889, 918], ["target.size", "complex_mem_transformer.MemTransformerLM._forward", "complex_mem_transformer.MemTransformerLM.init_mems", "complex_mem_transformer.MemTransformerLM.init_mems", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "log_uniform_sampler.sample_logits", "complex_mem_transformer.MemTransformerLM.crit", "loss.view.view.view", "pred_hid.view", "target.view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "pred_hid.size"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM._forward", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.init_mems", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.init_mems", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.log_uniform_sampler.sample_logits", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.LSTM.urnn_cell.PermutationMatrix.mul"], ["", "def", "forward", "(", "self", ",", "data", ",", "target", ",", "mems", ")", ":", "\n", "# nn.DataParallel does not allow size(0) tensors to be broadcasted.", "\n", "# So, have to initialize size(0) mems inside the model forward.", "\n", "# Moreover, have to return new_mems to allow nn.DataParallel to piece", "\n", "# them together.", "\n", "\n", "        ", "if", "mems", "[", "0", "]", "==", "(", ")", ":", "\n", "            ", "mems_real", "=", "self", ".", "init_mems", "(", ")", "\n", "mems_phase", "=", "self", ".", "init_mems", "(", ")", "\n", "", "else", ":", "\n", "            ", "mems_real", ",", "mems_phase", "=", "mems", "\n", "\n", "", "tgt_len", "=", "target", ".", "size", "(", "0", ")", "\n", "hidden", ",", "hidden_phase", ",", "new_mems", ",", "new_mems_phase", "=", "self", ".", "_forward", "(", "data", ",", "mems", "=", "mems_real", ",", "mems_phase", "=", "mems_phase", ")", "\n", "norms", "=", "(", "torch", ".", "sqrt", "(", "torch", ".", "mul", "(", "hidden", ",", "hidden", ")", "+", "torch", ".", "mul", "(", "hidden_phase", ",", "hidden_phase", ")", ")", ")", "/", "1.5", "\n", "pred_hid", "=", "norms", "[", "-", "tgt_len", ":", "]", "\n", "if", "self", ".", "sample_softmax", ">", "0", "and", "self", ".", "training", ":", "\n", "            ", "assert", "self", ".", "tie_weight", "\n", "logit", "=", "sample_logits", "(", "self", ".", "word_emb", ",", "\n", "self", ".", "out_layer", ".", "bias", ",", "target", ",", "pred_hid", ",", "self", ".", "sampler", ")", "\n", "loss", "=", "-", "F", ".", "log_softmax", "(", "logit", ",", "-", "1", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "loss", "=", "self", ".", "crit", "(", "pred_hid", ".", "view", "(", "-", "1", ",", "pred_hid", ".", "size", "(", "-", "1", ")", ")", ",", "target", ".", "view", "(", "-", "1", ")", ")", "\n", "loss", "=", "loss", ".", "view", "(", "tgt_len", ",", "-", "1", ")", "\n", "\n", "", "if", "new_mems", "is", "None", ":", "\n", "            ", "return", "[", "loss", "]", "\n", "", "else", ":", "\n", "            ", "return", "loss", ",", "new_mems", ",", "new_mems_phase", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.complex_mem_transformer.get_sinusoid_encoding_table": [[16, 35], ["numpy.array", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.power", "complex_mem_transformer.get_sinusoid_encoding_table.cal_angle"], "function", ["None"], ["def", "get_sinusoid_encoding_table", "(", "n_src_vocab", ",", "d_hid", ",", "padding_idx", "=", "None", ")", ":", "\n", "    ", "''' Sinusoid position encoding table '''", "\n", "\n", "def", "cal_angle", "(", "position", ",", "hid_idx", ")", ":", "\n", "        ", "return", "1", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "hid_idx", "//", "2", ")", "/", "d_hid", ")", "\n", "\n", "", "def", "get_posi_angle_vec", "(", "position", ")", ":", "\n", "        ", "return", "[", "cal_angle", "(", "position", ",", "hid_j", ")", "for", "hid_j", "in", "range", "(", "d_hid", ")", "]", "\n", "\n", "", "sinusoid_table", "=", "np", ".", "array", "(", "[", "get_posi_angle_vec", "(", "pos_i", ")", "for", "pos_i", "in", "range", "(", "n_src_vocab", ")", "]", ")", "\n", "\n", "# sinusoid_table[:, 0::2] = np.sin(sinusoid_table[:, 0::2])  # dim 2i", "\n", "# sinusoid_table[:, 1::2] = np.cos(sinusoid_table[:, 1::2])  # dim 2i+1", "\n", "\n", "if", "padding_idx", "is", "not", "None", ":", "\n", "# zero vector for padding dimension", "\n", "        ", "sinusoid_table", "[", "padding_idx", "]", "=", "0.", "\n", "\n", "", "return", "torch", ".", "FloatTensor", "(", "sinusoid_table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMOrderedIterator.__init__": [[11, 32], ["data.narrow.narrow.narrow", "data.narrow.narrow.view().t().contiguous().to", "data.narrow.narrow.size", "data.narrow.narrow.view().t().contiguous", "data.narrow.narrow.view().t", "data.narrow.narrow.view"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "bsz", ",", "bptt", ",", "device", "=", "'cpu'", ",", "ext_len", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            data -- LongTensor -- the LongTensor is strictly ordered\n        \"\"\"", "\n", "self", ".", "bsz", "=", "bsz", "\n", "self", ".", "bptt", "=", "bptt", "\n", "self", ".", "ext_len", "=", "ext_len", "if", "ext_len", "is", "not", "None", "else", "0", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "# Work out how cleanly we can divide the dataset into bsz parts.", "\n", "self", ".", "n_step", "=", "data", ".", "size", "(", "0", ")", "//", "bsz", "\n", "\n", "# Trim off any extra elements that wouldn't cleanly fit (remainders).", "\n", "data", "=", "data", ".", "narrow", "(", "0", ",", "0", ",", "self", ".", "n_step", "*", "bsz", ")", "\n", "\n", "# Evenly divide the data across the bsz batches.", "\n", "self", ".", "data", "=", "data", ".", "view", "(", "bsz", ",", "-", "1", ")", ".", "t", "(", ")", ".", "contiguous", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Number of mini-batches", "\n", "self", ".", "n_batch", "=", "(", "self", ".", "n_step", "+", "self", ".", "bptt", "-", "1", ")", "//", "self", ".", "bptt", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMOrderedIterator.get_batch": [[33, 44], ["min", "max", "data_utils.LMOrderedIterator.data.size"], "methods", ["None"], ["", "def", "get_batch", "(", "self", ",", "i", ",", "bptt", "=", "None", ")", ":", "\n", "        ", "if", "bptt", "is", "None", ":", "bptt", "=", "self", ".", "bptt", "\n", "seq_len", "=", "min", "(", "bptt", ",", "self", ".", "data", ".", "size", "(", "0", ")", "-", "1", "-", "i", ")", "\n", "\n", "end_idx", "=", "i", "+", "seq_len", "\n", "beg_idx", "=", "max", "(", "0", ",", "i", "-", "self", ".", "ext_len", ")", "\n", "\n", "data", "=", "self", ".", "data", "[", "beg_idx", ":", "end_idx", "]", "\n", "target", "=", "self", ".", "data", "[", "i", "+", "1", ":", "i", "+", "1", "+", "seq_len", "]", "\n", "\n", "return", "data", ",", "target", ",", "seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMOrderedIterator.get_fixlen_iter": [[45, 48], ["range", "data_utils.LMOrderedIterator.data.size", "data_utils.LMOrderedIterator.get_batch"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMOrderedIterator.get_batch"], ["", "def", "get_fixlen_iter", "(", "self", ",", "start", "=", "0", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "start", ",", "self", ".", "data", ".", "size", "(", "0", ")", "-", "1", ",", "self", ".", "bptt", ")", ":", "\n", "            ", "yield", "self", ".", "get_batch", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMOrderedIterator.get_varlen_iter": [[49, 60], ["min", "data_utils.LMOrderedIterator.get_batch", "max", "numpy.random.random", "int", "data_utils.LMOrderedIterator.data.size", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMOrderedIterator.get_batch"], ["", "", "def", "get_varlen_iter", "(", "self", ",", "start", "=", "0", ",", "std", "=", "5", ",", "min_len", "=", "5", ",", "max_deviation", "=", "3", ")", ":", "\n", "        ", "max_len", "=", "self", ".", "bptt", "+", "max_deviation", "*", "std", "\n", "i", "=", "start", "\n", "while", "True", ":", "\n", "            ", "bptt", "=", "self", ".", "bptt", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.95", "else", "self", ".", "bptt", "/", "2.", "\n", "bptt", "=", "min", "(", "max_len", ",", "max", "(", "min_len", ",", "int", "(", "np", ".", "random", ".", "normal", "(", "bptt", ",", "std", ")", ")", ")", ")", "\n", "data", ",", "target", ",", "seq_len", "=", "self", ".", "get_batch", "(", "i", ",", "bptt", ")", "\n", "i", "+=", "seq_len", "\n", "yield", "data", ",", "target", ",", "seq_len", "\n", "if", "i", ">=", "self", ".", "data", ".", "size", "(", "0", ")", "-", "2", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMOrderedIterator.__iter__": [[61, 63], ["data_utils.LMOrderedIterator.get_fixlen_iter"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMOrderedIterator.get_fixlen_iter"], ["", "", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_fixlen_iter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMShuffledIterator.__init__": [[66, 78], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "bsz", ",", "bptt", ",", "device", "=", "'cpu'", ",", "ext_len", "=", "None", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n            data -- list[LongTensor] -- there is no order among the LongTensors\n        \"\"\"", "\n", "self", ".", "data", "=", "data", "\n", "\n", "self", ".", "bsz", "=", "bsz", "\n", "self", ".", "bptt", "=", "bptt", "\n", "self", ".", "ext_len", "=", "ext_len", "if", "ext_len", "is", "not", "None", "else", "0", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMShuffledIterator.get_sent_stream": [[79, 87], ["numpy.random.permutation", "numpy.array", "len", "range", "len"], "methods", ["None"], ["", "def", "get_sent_stream", "(", "self", ")", ":", "\n", "# index iterator", "\n", "        ", "epoch_indices", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "data", ")", ")", "if", "self", ".", "shuffle", "else", "np", ".", "array", "(", "range", "(", "len", "(", "self", ".", "data", ")", ")", ")", "\n", "\n", "# sentence iterator", "\n", "for", "idx", "in", "epoch_indices", ":", "\n", "            ", "yield", "self", ".", "data", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMShuffledIterator.stream_iterator": [[88, 136], ["torch.LongTensor", "torch.LongTensor", "data[].fill_", "target.to.to.fill_", "range", "data.to.to.to", "target.to.to.to", "min", "data.to.to.resize_", "data.to.to.size", "data.to.to.size", "min", "next", "len", "len"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.next"], ["", "", "def", "stream_iterator", "(", "self", ",", "sent_stream", ")", ":", "\n", "# streams for each data in the batch", "\n", "        ", "streams", "=", "[", "None", "]", "*", "self", ".", "bsz", "\n", "\n", "data", "=", "torch", ".", "LongTensor", "(", "self", ".", "bptt", ",", "self", ".", "bsz", ")", "\n", "target", "=", "torch", ".", "LongTensor", "(", "self", ".", "bptt", ",", "self", ".", "bsz", ")", "\n", "\n", "n_retain", "=", "0", "\n", "\n", "while", "True", ":", "\n", "# data   : [n_retain+bptt x bsz]", "\n", "# target : [bptt x bsz]", "\n", "            ", "data", "[", "n_retain", ":", "]", ".", "fill_", "(", "-", "1", ")", "\n", "target", ".", "fill_", "(", "-", "1", ")", "\n", "\n", "valid_batch", "=", "True", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "bsz", ")", ":", "\n", "                ", "n_filled", "=", "0", "\n", "try", ":", "\n", "                    ", "while", "n_filled", "<", "self", ".", "bptt", ":", "\n", "                        ", "if", "streams", "[", "i", "]", "is", "None", "or", "len", "(", "streams", "[", "i", "]", ")", "<=", "1", ":", "\n", "                            ", "streams", "[", "i", "]", "=", "next", "(", "sent_stream", ")", "\n", "# number of new tokens to fill in", "\n", "", "n_new", "=", "min", "(", "len", "(", "streams", "[", "i", "]", ")", "-", "1", ",", "self", ".", "bptt", "-", "n_filled", ")", "\n", "# first n_retain tokens are retained from last batch", "\n", "data", "[", "n_retain", "+", "n_filled", ":", "n_retain", "+", "n_filled", "+", "n_new", ",", "i", "]", "=", "streams", "[", "i", "]", "[", ":", "n_new", "]", "\n", "target", "[", "n_filled", ":", "n_filled", "+", "n_new", ",", "i", "]", "=", "streams", "[", "i", "]", "[", "1", ":", "n_new", "+", "1", "]", "\n", "streams", "[", "i", "]", "=", "streams", "[", "i", "]", "[", "n_new", ":", "]", "\n", "n_filled", "+=", "n_new", "\n", "", "", "except", "StopIteration", ":", "\n", "                    ", "valid_batch", "=", "False", "\n", "break", "\n", "\n", "", "", "if", "not", "valid_batch", ":", "\n", "                ", "return", "\n", "\n", "", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "yield", "data", ",", "target", ",", "self", ".", "bptt", "\n", "\n", "n_retain", "=", "min", "(", "data", ".", "size", "(", "0", ")", ",", "self", ".", "ext_len", ")", "\n", "if", "n_retain", ">", "0", ":", "\n", "                ", "data", "[", ":", "n_retain", "]", "=", "data", "[", "-", "n_retain", ":", "]", "\n", "", "data", ".", "resize_", "(", "n_retain", "+", "self", ".", "bptt", ",", "data", ".", "size", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMShuffledIterator.__iter__": [[137, 143], ["data_utils.LMShuffledIterator.get_sent_stream", "data_utils.LMShuffledIterator.stream_iterator"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMMultiFileIterator.get_sent_stream", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMShuffledIterator.stream_iterator"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "# sent_stream is an iterator", "\n", "        ", "sent_stream", "=", "self", ".", "get_sent_stream", "(", ")", "\n", "\n", "for", "batch", "in", "self", ".", "stream_iterator", "(", "sent_stream", ")", ":", "\n", "            ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMMultiFileIterator.__init__": [[146, 158], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "paths", ",", "vocab", ",", "bsz", ",", "bptt", ",", "device", "=", "'cpu'", ",", "ext_len", "=", "None", ",", "\n", "shuffle", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "paths", "=", "paths", "\n", "self", ".", "vocab", "=", "vocab", "\n", "\n", "self", ".", "bsz", "=", "bsz", "\n", "self", ".", "bptt", "=", "bptt", "\n", "self", ".", "ext_len", "=", "ext_len", "if", "ext_len", "is", "not", "None", "else", "0", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMMultiFileIterator.get_sent_stream": [[159, 166], ["data_utils.LMMultiFileIterator.vocab.encode_file", "iter", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle"], ["", "def", "get_sent_stream", "(", "self", ",", "path", ")", ":", "\n", "        ", "sents", "=", "self", ".", "vocab", ".", "encode_file", "(", "path", ",", "add_double_eos", "=", "True", ")", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "sents", ")", "\n", "", "sent_stream", "=", "iter", "(", "sents", ")", "\n", "\n", "return", "sent_stream", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMMultiFileIterator.__iter__": [[167, 176], ["numpy.random.shuffle", "data_utils.LMMultiFileIterator.get_sent_stream", "data_utils.LMMultiFileIterator.stream_iterator"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.shuffle", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMMultiFileIterator.get_sent_stream", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMShuffledIterator.stream_iterator"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "paths", ")", "\n", "\n", "", "for", "path", "in", "self", ".", "paths", ":", "\n", "# sent_stream is an iterator", "\n", "            ", "sent_stream", "=", "self", ".", "get_sent_stream", "(", "path", ")", "\n", "for", "batch", "in", "self", ".", "stream_iterator", "(", "sent_stream", ")", ":", "\n", "                ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.Corpus.__init__": [[179, 218], ["utils.vocabulary.Vocab", "data_utils.Corpus.vocab.build_vocab", "data_utils.Corpus.vocab.count_file", "data_utils.Corpus.vocab.count_file", "data_utils.Corpus.vocab.count_file", "data_utils.Corpus.vocab.encode_file", "data_utils.Corpus.vocab.encode_file", "data_utils.Corpus.vocab.encode_file", "os.path.join", "os.path.join", "os.path.join", "data_utils.Corpus.vocab.count_file", "os.path.join", "os.path.join", "os.path.join", "data_utils.Corpus.vocab.encode_file", "data_utils.Corpus.vocab.encode_file", "data_utils.Corpus.vocab.encode_file", "os.path.join", "os.path.join", "glob.glob", "os.path.join", "os.path.join", "os.path.join", "data_utils.Corpus.vocab.encode_file", "data_utils.Corpus.vocab.encode_file", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.build_vocab", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.count_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.count_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.count_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.count_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_file", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.vocabulary.Vocab.encode_file"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "dataset", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "vocab", "=", "Vocab", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'enwik8'", ",", "'text8'", "]", ":", "\n", "            ", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ")", "\n", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ")", "\n", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'wt103'", ":", "\n", "            ", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "            ", "train_path_pattern", "=", "os", ".", "path", ".", "join", "(", "\n", "path", ",", "'1-billion-word-language-modeling-benchmark-r13output'", ",", "\n", "'training-monolingual.tokenized.shuffled'", ",", "'news.en-*'", ")", "\n", "train_paths", "=", "glob", ".", "glob", "(", "train_path_pattern", ")", "\n", "# the vocab will load from file when build_vocab() is called", "\n", "\n", "", "self", ".", "vocab", ".", "build_vocab", "(", ")", "\n", "\n", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'wt103'", "]", ":", "\n", "            ", "self", ".", "train", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ",", "ordered", "=", "True", ")", "\n", "self", ".", "valid", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ",", "ordered", "=", "True", ")", "\n", "self", ".", "test", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ",", "ordered", "=", "True", ")", "\n", "", "elif", "self", ".", "dataset", "in", "[", "'enwik8'", ",", "'text8'", "]", ":", "\n", "            ", "self", ".", "train", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ",", "ordered", "=", "True", ",", "add_eos", "=", "False", ")", "\n", "self", ".", "valid", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ",", "ordered", "=", "True", ",", "add_eos", "=", "False", ")", "\n", "self", ".", "test", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ",", "ordered", "=", "True", ",", "add_eos", "=", "False", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "            ", "self", ".", "train", "=", "train_paths", "\n", "self", ".", "valid", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ",", "ordered", "=", "False", ",", "add_double_eos", "=", "True", ")", "\n", "self", ".", "test", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ",", "ordered", "=", "False", ",", "add_double_eos", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.Corpus.get_iterator": [[219, 234], ["data_utils.LMOrderedIterator", "data_utils.LMMultiFileIterator", "data_utils.LMOrderedIterator", "data_utils.LMShuffledIterator"], "methods", ["None"], ["", "", "def", "get_iterator", "(", "self", ",", "split", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'wt103'", ",", "'enwik8'", ",", "'text8'", "]", ":", "\n", "                ", "data_iter", "=", "LMOrderedIterator", "(", "self", ".", "train", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "                ", "kwargs", "[", "'shuffle'", "]", "=", "True", "\n", "data_iter", "=", "LMMultiFileIterator", "(", "self", ".", "train", ",", "self", ".", "vocab", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "elif", "split", "in", "[", "'valid'", ",", "'test'", "]", ":", "\n", "            ", "data", "=", "self", ".", "valid", "if", "split", "==", "'valid'", "else", "self", ".", "test", "\n", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'wt103'", ",", "'enwik8'", ",", "'text8'", "]", ":", "\n", "                ", "data_iter", "=", "LMOrderedIterator", "(", "data", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "                ", "data_iter", "=", "LMShuffledIterator", "(", "data", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "return", "data_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.get_lm_corpus": [[236, 261], ["os.path.join", "os.path.exists", "print", "torch.load", "print", "data_utils.Corpus", "torch.save", "os.path.join"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.Transformer.helper.load"], ["", "", "def", "get_lm_corpus", "(", "datadir", ",", "dataset", ")", ":", "\n", "    ", "fn", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'cache.pt'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "fn", ")", ":", "\n", "        ", "print", "(", "'Loading cached dataset...'", ")", "\n", "corpus", "=", "torch", ".", "load", "(", "fn", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Producing dataset {}...'", ".", "format", "(", "dataset", ")", ")", "\n", "kwargs", "=", "{", "}", "\n", "if", "dataset", "in", "[", "'wt103'", ",", "'wt2'", "]", ":", "\n", "            ", "kwargs", "[", "'special'", "]", "=", "[", "'<eos>'", "]", "\n", "kwargs", "[", "'lower_case'", "]", "=", "False", "\n", "", "elif", "dataset", "==", "'ptb'", ":", "\n", "            ", "kwargs", "[", "'special'", "]", "=", "[", "'<eos>'", "]", "\n", "kwargs", "[", "'lower_case'", "]", "=", "True", "\n", "", "elif", "dataset", "==", "'lm1b'", ":", "\n", "            ", "kwargs", "[", "'special'", "]", "=", "[", "]", "\n", "kwargs", "[", "'lower_case'", "]", "=", "False", "\n", "kwargs", "[", "'vocab_file'", "]", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'1b_word_vocab.txt'", ")", "\n", "", "elif", "dataset", "in", "[", "'enwik8'", ",", "'text8'", "]", ":", "\n", "            ", "pass", "\n", "\n", "", "corpus", "=", "Corpus", "(", "datadir", ",", "dataset", ",", "**", "kwargs", ")", "\n", "torch", ".", "save", "(", "corpus", ",", "fn", ")", "\n", "\n", "", "return", "corpus", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.eval.evaluate": [[76, 94], ["model.eval", "time.time", "logging", "torch.no_grad", "enumerate", "tuple", "tuple", "model", "loss.mean.mean", "time.time", "loss.mean.item"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.eval", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.exp_utils.logging"], ["", "def", "evaluate", "(", "eval_iter", ")", ":", "\n", "# Turn on evaluation mode which disables dropout.", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "total_len", ",", "total_loss", "=", "0", ",", "0.", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "mems", "=", "tuple", "(", ")", "\n", "for", "idx", ",", "(", "data", ",", "target", ",", "seq_len", ")", "in", "enumerate", "(", "eval_iter", ")", ":", "\n", "            ", "ret", "=", "model", "(", "data", ",", "target", ",", "*", "mems", ")", "\n", "loss", ",", "mems", "=", "ret", "[", "0", "]", ",", "ret", "[", "1", ":", "]", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "total_loss", "+=", "seq_len", "*", "loss", ".", "item", "(", ")", "\n", "total_len", "+=", "seq_len", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "", "logging", "(", "'Time : {:.2f}s, {:.2f}ms/segment'", ".", "format", "(", "\n", "total_time", ",", "1000", "*", "total_time", "/", "(", "idx", "+", "1", ")", ")", ")", "\n", "return", "total_loss", "/", "total_len", "\n", "\n", "# Run on test data.", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.eval.format_log": [[106, 114], ["math.exp", "math.log"], "function", ["None"], ["    ", "if", "args", ".", "dataset", "in", "[", "'enwik8'", ",", "'text8'", "]", ":", "\n", "        ", "log_str", "=", "'| {0} loss {1:5.2f} | {0} bpc {2:9.5f} '", ".", "format", "(", "\n", "split", ",", "loss", ",", "loss", "/", "math", ".", "log", "(", "2", ")", ")", "\n", "", "else", ":", "\n", "        ", "log_str", "=", "'| {0} loss {1:5.2f} | {0} ppl {2:9.3f} '", ".", "format", "(", "\n", "split", ",", "loss", ",", "math", ".", "exp", "(", "loss", ")", ")", "\n", "", "return", "log_str", "\n", "\n", "", "log_str", "=", "''", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.train.init_weight": [[220, 225], ["torch.init.uniform_", "torch.init.normal_"], "function", ["None"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.train.init_bias": [[226, 228], ["torch.init.constant_"], "function", ["None"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.train.weights_init": [[229, 267], ["classname.find", "hasattr", "train.init_weight", "hasattr", "train.init_bias", "classname.find", "hasattr", "range", "classname.find", "hasattr", "len", "train.init_weight", "classname.find", "hasattr", "torch.init.normal_", "hasattr", "train.init_weight", "hasattr", "train.init_bias", "range", "classname.find", "hasattr", "len", "torch.init.normal_", "hasattr", "train.init_bias", "classname.find", "hasattr", "hasattr", "hasattr", "hasattr", "torch.init.normal_", "train.init_weight", "train.init_weight", "train.init_weight", "train.init_bias"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_weight", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_bias", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_weight", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_weight", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_bias", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_bias", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_weight", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_weight", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_weight", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_bias"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.train.update_dropout": [[268, 273], ["classname.find", "hasattr"], "function", ["None"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.train.update_dropatt": [[274, 277], ["hasattr"], "function", ["None"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.train.evaluate": [[396, 434], ["model.eval", "model.reset_length", "model.train", "model.reset_length", "model.reset_length", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "tuple", "model", "loss.mean.mean", "tuple", "tuple", "para_model", "para_model", "loss.mean.float().item", "loss.mean.float"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.eval", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.reset_length", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.train", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.reset_length", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.reset_length"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.train.train": [[436, 556], ["model.train", "enumerate", "tuple", "tuple", "tr_iter.get_varlen_iter", "model.zero_grad", "optimizer.step", "tuple", "tuple", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "range", "loss.float().mean().type_as.float().mean().type_as", "loss.float().mean().type_as.float().item", "optimizer.clip_master_grads", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer_sparse.step", "logging", "time.time", "train.evaluate", "logging", "logging", "logging", "time.time", "range", "range", "data_chunks[].contiguous", "target_chunks[].contiguous", "loss.float().mean().type_as.float().item", "para_model", "para_model", "optimizer.backward", "loss.float().mean().type_as.backward", "model.parameters", "scheduler.step", "time.time", "scheduler.step", "para_model", "para_model", "loss.float().mean().type_as.float().mean().type_as", "optimizer.backward", "loss.float().mean().type_as.backward", "loss.float().mean().type_as.float().mean", "loss.float().mean().type_as.float", "scheduler.step", "math.exp", "time.time", "math.exp", "scheduler_sparse.step", "loss.float().mean().type_as.float", "scheduler_sparse.step", "math.log", "math.log", "open", "torch.save", "torch.save", "torch.save", "open", "torch.save", "torch.save", "torch.save", "loss.float().mean().type_as.float().mean", "loss.float().mean().type_as.float", "os.path.join", "os.path.join", "optimizer.state_dict", "loss.float().mean().type_as.float"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.train", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMOrderedIterator.get_varlen_iter", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.exp_utils.logging", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.evaluate", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.exp_utils.logging", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.exp_utils.logging", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.exp_utils.logging"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.PositionalEmbedding.__init__": [[16, 23], ["torch.Module.__init__", "mem_transformer.PositionalEmbedding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "demb", ")", ":", "\n", "        ", "super", "(", "PositionalEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "demb", "=", "demb", "\n", "\n", "inv_freq", "=", "1", "/", "(", "10000", "**", "(", "torch", ".", "arange", "(", "0.0", ",", "demb", ",", "2.0", ")", "/", "demb", ")", ")", "\n", "self", ".", "register_buffer", "(", "'inv_freq'", ",", "inv_freq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.PositionalEmbedding.forward": [[24, 32], ["torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pos_emb[].expand", "torch.ger.sin", "torch.ger.sin", "torch.ger.sin", "torch.ger.cos", "torch.ger.cos", "torch.ger.cos"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pos_seq", ",", "bsz", "=", "None", ")", ":", "\n", "        ", "sinusoid_inp", "=", "torch", ".", "ger", "(", "pos_seq", ",", "self", ".", "inv_freq", ")", "\n", "pos_emb", "=", "torch", ".", "cat", "(", "[", "sinusoid_inp", ".", "sin", "(", ")", ",", "sinusoid_inp", ".", "cos", "(", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "bsz", "is", "not", "None", ":", "\n", "            ", "return", "pos_emb", "[", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "-", "1", ",", "bsz", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "pos_emb", "[", ":", ",", "None", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.PositionwiseFF.__init__": [[35, 52], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "dropout", ",", "pre_lnorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "PositionwiseFF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_inner", "=", "d_inner", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "CoreNet", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "d_model", ",", "d_inner", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "d_inner", ",", "d_model", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", ")", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.PositionwiseFF.forward": [[53, 68], ["mem_transformer.PositionwiseFF.CoreNet", "mem_transformer.PositionwiseFF.CoreNet", "mem_transformer.PositionwiseFF.layer_norm", "mem_transformer.PositionwiseFF.layer_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization + positionwise feed-forward", "\n", "            ", "core_out", "=", "self", ".", "CoreNet", "(", "self", ".", "layer_norm", "(", "inp", ")", ")", "\n", "\n", "##### residual connection", "\n", "output", "=", "core_out", "+", "inp", "\n", "", "else", ":", "\n", "##### positionwise feed-forward", "\n", "            ", "core_out", "=", "self", ".", "CoreNet", "(", "inp", ")", "\n", "\n", "##### residual connection + layer normalization", "\n", "output", "=", "self", ".", "layer_norm", "(", "inp", "+", "core_out", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MultiHeadAttn.__init__": [[70, 91], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["", "", "class", "MultiHeadAttn", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "dropatt", "=", "0", ",", "\n", "pre_lnorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "q_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "self", ".", "kv_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "2", "*", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropatt", "=", "nn", ".", "Dropout", "(", "dropatt", ")", "\n", "self", ".", "o_net", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_head", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "scale", "=", "1", "/", "(", "d_head", "**", "0.5", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MultiHeadAttn.forward": [[92, 142], ["mem_transformer.MultiHeadAttn.q_net", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "head_q.view.view.view", "head_k.view.view.view", "head_v.view.view.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.mul_", "torch.einsum.mul_", "torch.einsum.mul_", "torch.softmax", "torch.softmax", "torch.softmax", "mem_transformer.MultiHeadAttn.dropatt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec.contiguous().view.contiguous().view.contiguous().view", "mem_transformer.MultiHeadAttn.o_net", "mem_transformer.MultiHeadAttn.drop", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mem_transformer.MultiHeadAttn.layer_norm", "mem_transformer.MultiHeadAttn.kv_net", "h.size", "h.size", "mem_transformer.MultiHeadAttn.size", "mem_transformer.MultiHeadAttn.size", "mem_transformer.MultiHeadAttn.size", "mem_transformer.MultiHeadAttn.size", "attn_mask.any().item", "attn_vec.contiguous().view.contiguous().view.size", "attn_vec.contiguous().view.contiguous().view.size", "mem_transformer.MultiHeadAttn.layer_norm", "attn_mask.dim", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "attn_vec.contiguous().view.contiguous().view.contiguous", "attn_mask.any", "attn_mask.dim", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "float", "float"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "h", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "##### multihead attention", "\n", "# [hlen x bsz x n_head x d_head]", "\n", "\n", "        ", "if", "mems", "is", "not", "None", ":", "\n", "            ", "c", "=", "torch", ".", "cat", "(", "[", "mems", ",", "h", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "c", "=", "h", "\n", "\n", "", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization", "\n", "            ", "c", "=", "self", ".", "layer_norm", "(", "c", ")", "\n", "\n", "", "head_q", "=", "self", ".", "q_net", "(", "h", ")", "\n", "head_k", ",", "head_v", "=", "torch", ".", "chunk", "(", "self", ".", "kv_net", "(", "c", ")", ",", "2", ",", "-", "1", ")", "\n", "\n", "head_q", "=", "head_q", ".", "view", "(", "h", ".", "size", "(", "0", ")", ",", "h", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "head_k", "=", "head_k", ".", "view", "(", "c", ".", "size", "(", "0", ")", ",", "c", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "head_v", "=", "head_v", ".", "view", "(", "c", ".", "size", "(", "0", ")", ",", "c", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "attn_score", "=", "torch", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "(", "head_q", ",", "head_k", ")", ")", "\n", "attn_score", ".", "mul_", "(", "self", ".", "scale", ")", "\n", "if", "attn_mask", "is", "not", "None", "and", "attn_mask", ".", "any", "(", ")", ".", "item", "(", ")", ":", "\n", "            ", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", "None", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "1", ")", "\n", "attn_prob", "=", "self", ".", "dropatt", "(", "attn_prob", ")", "\n", "\n", "# [qlen x klen x bsz x n_head] + [klen x bsz x n_head x d_head] -> [qlen x bsz x n_head x d_head]", "\n", "attn_vec", "=", "torch", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "(", "attn_prob", ",", "head_v", ")", ")", "\n", "attn_vec", "=", "attn_vec", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "attn_vec", ".", "size", "(", "0", ")", ",", "attn_vec", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### residual connection", "\n", "            ", "output", "=", "h", "+", "attn_out", "\n", "", "else", ":", "\n", "##### residual connection + layer normalization", "\n", "            ", "output", "=", "self", ".", "layer_norm", "(", "h", "+", "attn_out", ")", "\n", "\n", "", "return", "output", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelMultiHeadAttn.__init__": [[144, 164], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["\n", "", "", "class", "RelMultiHeadAttn", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "dropatt", "=", "0", ",", "\n", "tgt_len", "=", "None", ",", "ext_len", "=", "None", ",", "mem_len", "=", "None", ",", "pre_lnorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "RelMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "qkv_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "3", "*", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropatt", "=", "nn", ".", "Dropout", "(", "dropatt", ")", "\n", "\n", "self", ".", "o_net", "=", "nn", ".", "Linear", "(", "30", "*", "30", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "# self.o_net_1 = nn.Linear(13 * 13, d_model, bias=False)", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelMultiHeadAttn._parallelogram_mask": [[165, 175], ["torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "min", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.ones().byte.flip", "torch.ones().byte.flip", "torch.ones().byte.flip", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["self", ".", "scale", "=", "1", "/", "(", "d_head", "**", "0.5", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n", "", "def", "_parallelogram_mask", "(", "self", ",", "h", ",", "w", ",", "left", "=", "False", ")", ":", "\n", "        ", "mask", "=", "torch", ".", "ones", "(", "(", "h", ",", "w", ")", ")", ".", "byte", "(", ")", "\n", "m", "=", "min", "(", "h", ",", "w", ")", "\n", "mask", "[", ":", "m", ",", ":", "m", "]", "=", "torch", ".", "triu", "(", "mask", "[", ":", "m", ",", ":", "m", "]", ")", "\n", "mask", "[", "-", "m", ":", ",", "-", "m", ":", "]", "=", "torch", ".", "tril", "(", "mask", "[", "-", "m", ":", ",", "-", "m", ":", "]", ")", "\n", "\n", "if", "left", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelMultiHeadAttn._shift": [[176, 193], ["torch.cat().expand.masked_select().view", "torch.cat().expand.masked_select().view", "torch.cat().expand.masked_select().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "mask.flip.flip.flip", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select", "torch.cat().expand.masked_select", "torch.cat().expand.masked_select", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select().view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["            ", "return", "mask", "\n", "", "else", ":", "\n", "            ", "return", "mask", ".", "flip", "(", "0", ")", "\n", "\n", "", "", "def", "_shift", "(", "self", ",", "x", ",", "qlen", ",", "klen", ",", "mask", ",", "left", "=", "False", ")", ":", "\n", "        ", "if", "qlen", ">", "1", ":", "\n", "            ", "zero_pad", "=", "torch", ".", "zeros", "(", "(", "x", ".", "size", "(", "0", ")", ",", "qlen", "-", "1", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ",", "\n", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "zero_pad", "=", "torch", ".", "zeros", "(", "0", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "\n", "", "if", "left", ":", "\n", "            ", "mask", "=", "mask", ".", "flip", "(", "1", ")", "\n", "x_padded", "=", "torch", ".", "cat", "(", "[", "zero_pad", ",", "x", "]", ",", "dim", "=", "1", ")", ".", "expand", "(", "qlen", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x_padded", "=", "torch", ".", "cat", "(", "[", "x", ",", "zero_pad", "]", ",", "dim", "=", "1", ")", ".", "expand", "(", "qlen", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "", "x", "=", "x_padded", ".", "masked_select", "(", "mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", ")"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelMultiHeadAttn._rel_shift": [[194, 208], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_padded.view.view.view", "x_padded[].view_as", "x_padded[].view_as.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size"], "methods", ["None"], [".", "view", "(", "qlen", ",", "klen", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "\n", "return", "x", "\n", "\n", "", "def", "_rel_shift", "(", "self", ",", "x", ",", "zero_triu", "=", "False", ")", ":", "\n", "        ", "zero_pad", "=", "torch", ".", "zeros", "(", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ",", "\n", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "x_padded", "=", "torch", ".", "cat", "(", "[", "zero_pad", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x_padded", "=", "x_padded", ".", "view", "(", "x", ".", "size", "(", "1", ")", "+", "1", ",", "x", ".", "size", "(", "0", ")", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "x", "=", "x_padded", "[", "1", ":", "]", ".", "view_as", "(", "x", ")", "\n", "\n", "if", "zero_triu", ":", "\n", "            ", "ones", "=", "torch", ".", "ones", "(", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelMultiHeadAttn.forward": [[209, 211], ["None"], "methods", ["None"], ["x", "=", "x", "*", "torch", ".", "tril", "(", "ones", ",", "x", ".", "size", "(", "1", ")", "-", "x", ".", "size", "(", "0", ")", ")", "[", ":", ",", ":", ",", "None", ",", "None", "]", "\n", "\n", "", "return", "x", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelPartialLearnableMultiHeadAttn.__init__": [[213, 217], ["mem_transformer.RelMultiHeadAttn.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["", "def", "forward", "(", "self", ",", "w", ",", "r", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "\n", "", "", "class", "RelPartialLearnableMultiHeadAttn", "(", "RelMultiHeadAttn", ")", ":", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelPartialLearnableMultiHeadAttn.forward": [[218, 293], ["w_head_k.view.view.size", "w_head_q.view.view.view", "w_head_k.view.view.view", "w_head_v.view.view.view", "mem_transformer.RelPartialLearnableMultiHeadAttn.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "mem_transformer.RelPartialLearnableMultiHeadAttn._rel_shift", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.mul_", "torch.softmax", "torch.softmax", "torch.softmax", "mem_transformer.RelPartialLearnableMultiHeadAttn.dropatt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec.contiguous().view.contiguous().view.contiguous().view", "mem_transformer.RelPartialLearnableMultiHeadAttn.o_net", "mem_transformer.RelPartialLearnableMultiHeadAttn.drop", "w.size", "r.size", "w.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mem_transformer.RelPartialLearnableMultiHeadAttn.r_net", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "mem_transformer.RelPartialLearnableMultiHeadAttn.r_net", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "attn_mask.any().item", "attn_vec.contiguous().view.contiguous().view.size", "attn_vec.contiguous().view.contiguous().view.size", "mem_transformer.RelPartialLearnableMultiHeadAttn.layer_norm", "mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net", "mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net", "mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net", "mem_transformer.RelPartialLearnableMultiHeadAttn.qkv_net", "attn_mask.dim", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill().type_as", "attn_vec.contiguous().view.contiguous().view.contiguous", "mem_transformer.RelPartialLearnableMultiHeadAttn.layer_norm", "mem_transformer.RelPartialLearnableMultiHeadAttn.layer_norm", "attn_mask.any", "attn_mask.dim", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill().type_as", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float", "float", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float", "float"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelMultiHeadAttn._rel_shift"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelPartialLearnableMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "r_net", "=", "nn", ".", "Linear", "(", "self", ".", "d_model", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ",", "bias", "=", "False", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "w", ",", "r", ",", "r_w_bias", ",", "r_r_bias", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "qlen", ",", "rlen", ",", "bsz", "=", "w", ".", "size", "(", "0", ")", ",", "r", ".", "size", "(", "0", ")", ",", "w", ".", "size", "(", "1", ")", "\n", "\n", "# print('qlen', qlen)", "\n", "# print('rlen', rlen)", "\n", "# print('mems.size():', mems.size())", "\n", "# # print('bsz', bsz)", "\n", "# # 30.60.410", "\n", "# print('W:', w.size())", "\n", "# # 30, 1,410", "\n", "# print('r:', r.size())", "\n", "\n", "if", "mems", "is", "not", "None", ":", "\n", "            ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", ",", "w", "]", ",", "0", ")", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "cat", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "cat", ")", "\n", "", "r_head_k", "=", "self", ".", "r_net", "(", "r", ")", "\n", "\n", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "w_head_q", "=", "w_head_q", "[", "-", "qlen", ":", "]", "\n", "w_head_k", "=", "w_head_k", "[", "-", "qlen", ":", "]", "\n", "w_head_v", "=", "w_head_v", "[", "-", "qlen", ":", "]", "\n", "r_head_k", "=", "r_head_k", "[", "-", "qlen", ":", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "w", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "w", ")", "\n", "", "r_head_k", "=", "self", ".", "r_net", "(", "r", ")", "\n", "# r_head_k = r_head_k[-qlen:]", "\n", "\n", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "klen", "=", "w_head_k", ".", "size", "(", "0", ")", "\n", "\n", "# print('klen', klen)", "\n", "# print('w_head:', w_heads.size())", "\n", "# # print(w_head_k.size())", "\n", "# print('r_head_k:', r_head_k.size())", "\n", "# print(\"___________________________________\")", "\n", "\n", "w_head_q", "=", "w_head_q", ".", "view", "(", "qlen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x bsz x n_head x d_head", "\n", "w_head_k", "=", "w_head_k", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# klen x bsz x n_head x d_head", "\n", "w_head_v", "=", "w_head_v", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# klen x bsz x n_head x d_head", "\n", "\n", "r_head_k", "=", "r_head_k", ".", "view", "(", "klen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x n_head x d_head", "\n", "\n", "rw_head_q", "=", "w_head_q", "+", "r_w_bias", "# qlen x bsz x n_head x d_head", "\n", "rr_head_q", "=", "w_head_q", "+", "r_r_bias", "\n", "\n", "# tucker decomposition", "\n", "cores_1", "=", "torch", ".", "zeros", "(", "[", "self", ".", "d_head", ",", "self", ".", "d_head", ",", "self", ".", "d_head", "]", ")", ".", "cuda", "(", ")", "\n", "cores_2", "=", "torch", ".", "zeros", "(", "[", "self", ".", "d_head", ",", "self", ".", "d_head", ",", "self", ".", "d_head", "]", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "d_head", ")", ":", "\n", "            ", "cores_1", "[", "i", "]", "[", "i", "]", "[", "i", "]", "=", "initCore", "[", "0", "]", "[", "i", "]", "\n", "cores_2", "[", "i", "]", "[", "i", "]", "[", "i", "]", "=", "initCore", "[", "1", "]", "[", "i", "]", "\n", "\n", "# cores_1[i][i][i] = initCore[0][i]", "\n", "\n", "# print(r_head_k.size())", "\n", "\n", "", "factor_k_2", "=", "r_head_k", ".", "view", "(", "qlen", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "full_matrixs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bsz", ")", ":", "\n", "            ", "factor_q_1", "=", "rw_head_q", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "view", "(", "qlen", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "factor_k", "=", "w_head_k", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "view", "(", "qlen", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "factor_v", "=", "w_head_v", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "view", "(", "qlen", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "full_matrix_1", "=", "torch", ".", "einsum", "(", "'pqr, ip,jq,kr->ijk'", ",", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelLearnableMultiHeadAttn.__init__": [[295, 297], ["mem_transformer.RelMultiHeadAttn.__init__"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["\n", "factor_q_2", "=", "rr_head_q", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "view", "(", "qlen", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "full_matrix_2", "=", "torch", ".", "einsum", "(", "'pqr, ip,jq,kr->ijk'", ",", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelLearnableMultiHeadAttn.forward": [[298, 378], ["w_head_k.view.view.size", "w_head_q.view.view.view", "w_head_k.view.view.view", "w_head_v.view.view.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "mem_transformer.RelLearnableMultiHeadAttn._rel_shift", "attn_score.mul_", "torch.softmax", "torch.softmax", "torch.softmax", "mem_transformer.RelLearnableMultiHeadAttn.dropatt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec.contiguous().view.contiguous().view.contiguous().view", "mem_transformer.RelLearnableMultiHeadAttn.o_net", "mem_transformer.RelLearnableMultiHeadAttn.drop", "w.size", "w.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat.size", "torch.cat.size", "torch.cat.size", "r_emb[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "r_bias[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attn_mask.any().item", "attn_vec.contiguous().view.contiguous().view.size", "attn_vec.contiguous().view.contiguous().view.size", "mem_transformer.RelLearnableMultiHeadAttn.layer_norm", "mem_transformer.RelLearnableMultiHeadAttn.qkv_net", "mem_transformer.RelLearnableMultiHeadAttn.qkv_net", "mem_transformer.RelLearnableMultiHeadAttn.qkv_net", "mem_transformer.RelLearnableMultiHeadAttn.qkv_net", "attn_mask.dim", "attn_score.masked_fill_", "attn_vec.contiguous().view.contiguous().view.contiguous", "mem_transformer.RelLearnableMultiHeadAttn.layer_norm", "mem_transformer.RelLearnableMultiHeadAttn.layer_norm", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "attn_mask.any", "attn_mask.dim", "attn_score.masked_fill_", "float", "float"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelMultiHeadAttn._rel_shift"], ["[", "cores_1", ",", "factor_q_2", ",", "factor_k_2", ",", "factor_v", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "qlen", ",", "-", "1", ")", "\n", "# full_matrixs.append(full_matrix_1 + full_matrix_2)", "\n", "\n", "full_matrix_3", "=", "torch", ".", "einsum", "(", "'pqr, ip,jq,kr->ijk'", ",", "\n", "[", "cores_2", ",", "factor_q_1", ",", "factor_k", ",", "factor_v", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "qlen", ",", "-", "1", ")", "\n", "full_matrix_4", "=", "torch", ".", "einsum", "(", "'pqr, ip,jq,kr->ijk'", ",", "\n", "[", "cores_2", ",", "factor_q_2", ",", "factor_k_2", ",", "factor_v", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "qlen", ",", "-", "1", ")", "\n", "\n", "full_matrixs", ".", "append", "(", "full_matrix_1", "+", "full_matrix_2", "+", "full_matrix_3", "+", "full_matrix_4", ")", "\n", "\n", "\n", "# #### compute attention score", "\n", "# rw_head_q = w_head_q + r_w_bias  # qlen x bsz x n_head x d_head", "\n", "# AC = torch.einsum('ibnd,jbnd->ijbn', (rw_head_q, w_head_k))  # qlen x klen x bsz x n_head", "\n", "#", "\n", "# print('AC:', AC.size())", "\n", "#", "\n", "# rr_head_q = w_head_q + r_r_bias", "\n", "# BD = torch.einsum('ibnd,jnd->ijbn', (rr_head_q, r_head_k))  # qlen x rlen x bsz x n_head", "\n", "# print(BD.size)", "\n", "# BD = self._rel_shift(BD)", "\n", "#", "\n", "# print('BD:', BD.size())", "\n", "\n", "# # [qlen x klen x bsz x n_head]", "\n", "# attn_score = AC + BD", "\n", "# attn_score.mul_(self.scale)", "\n", "#", "\n", "# #### compute attention probability", "\n", "# if attn_mask is not None and attn_mask.any().item():", "\n", "#     if attn_mask.dim() == 2:", "\n", "#         attn_score = attn_score.float().masked_fill(", "\n", "#             attn_mask[None, :, :, None], -float('inf')).type_as(attn_score)", "\n", "#     elif attn_mask.dim() == 3:", "\n", "#         attn_score = attn_score.float().masked_fill(", "\n", "#             attn_mask[:, :, :, None], -float('inf')).type_as(attn_score)", "\n", "#", "\n", "# # [qlen x klen x bsz x n_head]", "\n", "# attn_prob = F.softmax(attn_score, dim=1)", "\n", "# attn_prob = self.dropatt(attn_prob)", "\n", "#", "\n", "# #### compute attention vector", "\n", "# attn_vec = torch.einsum('ijbn,jbnd->ibnd', (attn_prob, w_head_v))", "\n", "#", "\n", "# # [qlen x bsz x n_head x d_head]", "\n", "# attn_vec = attn_vec.contiguous().view(", "\n", "#     attn_vec.size(0), attn_vec.size(1), self.n_head * self.d_head)", "\n", "\n", "# linear projection", "\n", "", "attn_vec", "=", "torch", ".", "stack", "(", "full_matrixs", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "attn_vec", ".", "mul_", "(", "0.5", ")", "\n", "\n", "# if qlen == 30:", "\n", "#     attn_out = self.o_net(attn_vec)", "\n", "# else:", "\n", "#     attn_out = self.o_net_1(attn_vec)", "\n", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### residual connection", "\n", "            ", "output", "=", "w", "+", "attn_out", "\n", "", "else", ":", "\n", "##### residual connection + layer normalization", "\n", "            ", "output", "=", "self", ".", "layer_norm", "(", "w", "+", "attn_out", ")", "\n", "\n", "", "return", "output", "\n", "\n", "\n", "", "", "class", "RelLearnableMultiHeadAttn", "(", "RelMultiHeadAttn", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelLearnableMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "w", ",", "r_emb", ",", "r_w_bias", ",", "r_bias", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "# r_emb: [klen, n_head, d_head], used for term B", "\n", "# r_w_bias: [n_head, d_head], used for term C", "\n", "# r_bias: [klen, n_head], used for term D", "\n", "\n", "        ", "qlen", ",", "bsz", "=", "w", ".", "size", "(", "0", ")", ",", "w", ".", "size", "(", "1", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.DecoderLayer.__init__": [[380, 386], ["torch.Module.__init__", "mem_transformer.MultiHeadAttn", "mem_transformer.PositionwiseFF", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["if", "mems", "is", "not", "None", ":", "\n", "            ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", ",", "w", "]", ",", "0", ")", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "cat", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "cat", ")", "\n", "", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.DecoderLayer.forward": [[387, 394], ["mem_transformer.DecoderLayer.dec_attn", "mem_transformer.DecoderLayer.pos_ff"], "methods", ["None"], ["\n", "w_head_q", "=", "w_head_q", "[", "-", "qlen", ":", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "w", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "w", ")", "\n", "", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelLearnableDecoderLayer.__init__": [[396, 404], ["torch.Module.__init__", "mem_transformer.RelLearnableMultiHeadAttn", "mem_transformer.PositionwiseFF", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["", "klen", "=", "w_head_k", ".", "size", "(", "0", ")", "\n", "\n", "w_head_q", "=", "w_head_q", ".", "view", "(", "qlen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "w_head_k", "=", "w_head_k", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "w_head_v", "=", "w_head_v", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "\n", "if", "klen", ">", "r_emb", ".", "size", "(", "0", ")", ":", "\n", "            ", "r_emb_pad", "=", "r_emb", "[", "0", ":", "1", "]", ".", "expand", "(", "klen", "-", "r_emb", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ")", "\n", "r_emb", "=", "torch", ".", "cat", "(", "[", "r_emb_pad", ",", "r_emb", "]", ",", "0", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelLearnableDecoderLayer.forward": [[405, 413], ["mem_transformer.RelLearnableDecoderLayer.dec_attn", "mem_transformer.RelLearnableDecoderLayer.pos_ff"], "methods", ["None"], ["r_bias_pad", "=", "r_bias", "[", "0", ":", "1", "]", ".", "expand", "(", "klen", "-", "r_bias", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "r_bias", "=", "torch", ".", "cat", "(", "[", "r_bias_pad", ",", "r_bias", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "r_emb", "=", "r_emb", "[", "-", "klen", ":", "]", "\n", "r_bias", "=", "r_bias", "[", "-", "klen", ":", "]", "\n", "\n", "#### compute attention score", "\n", "", "rw_head_q", "=", "w_head_q", "+", "r_w_bias", "[", "None", "]", "# qlen x bsz x n_head x d_head", "\n", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelPartialLearnableDecoderLayer.__init__": [[415, 423], ["torch.Module.__init__", "mem_transformer.RelPartialLearnableMultiHeadAttn", "mem_transformer.PositionwiseFF", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["B_", "=", "torch", ".", "einsum", "(", "'ibnd,jnd->ijbn'", ",", "(", "w_head_q", ",", "r_emb", ")", ")", "# qlen x klen x bsz x n_head", "\n", "D_", "=", "r_bias", "[", "None", ",", ":", ",", "None", "]", "# 1    x klen x 1   x n_head", "\n", "BD", "=", "self", ".", "_rel_shift", "(", "B_", "+", "D_", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "attn_score", "=", "AC", "+", "BD", "\n", "attn_score", ".", "mul_", "(", "self", ".", "scale", ")", "\n", "\n", "#### compute attention probability", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.RelPartialLearnableDecoderLayer.forward": [[424, 432], ["mem_transformer.RelPartialLearnableDecoderLayer.dec_attn", "mem_transformer.RelPartialLearnableDecoderLayer.pos_ff"], "methods", ["None"], ["if", "attn_mask", "is", "not", "None", "and", "attn_mask", ".", "any", "(", ")", ".", "item", "(", ")", ":", "\n", "            ", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", "None", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "1", ")", "\n", "attn_prob", "=", "self", ".", "dropatt", "(", "attn_prob", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.AdaptiveEmbedding.__init__": [[435, 464], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "mem_transformer.AdaptiveEmbedding.emb_layers.append", "range", "torch.Embedding", "torch.Embedding", "torch.Embedding", "mem_transformer.AdaptiveEmbedding.emb_projs.append", "len", "mem_transformer.AdaptiveEmbedding.emb_layers.append", "mem_transformer.AdaptiveEmbedding.emb_projs.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__"], ["attn_vec", "=", "torch", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "(", "attn_prob", ",", "w_head_v", ")", ")", "\n", "\n", "# [qlen x bsz x n_head x d_head]", "\n", "attn_vec", "=", "attn_vec", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "attn_vec", ".", "size", "(", "0", ")", ",", "attn_vec", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### residual connection", "\n", "            ", "output", "=", "w", "+", "attn_out", "\n", "", "else", ":", "\n", "##### residual connection + layer normalization", "\n", "            ", "output", "=", "self", ".", "layer_norm", "(", "w", "+", "attn_out", ")", "\n", "\n", "", "return", "output", "\n", "\n", "\n", "", "", "class", "DecoderLayer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "MultiHeadAttn", "(", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "**", "kwargs", ")", "\n", "self", ".", "pos_ff", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "kwargs", ".", "get", "(", "'pre_lnorm'", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "dec_inp", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "output", "=", "self", ".", "dec_attn", "(", "dec_inp", ",", "attn_mask", "=", "dec_attn_mask", ",", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.AdaptiveEmbedding.forward": [[465, 495], ["torch.linear.mul_", "next", "inp.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros.view", "torch.zeros.view", "torch.zeros.view", "torch.linear", "torch.linear", "torch.linear", "mem_transformer.AdaptiveEmbedding.parameters", "len", "mask_i.nonzero().squeeze", "torch.linear", "torch.linear", "torch.linear", "torch.zeros.index_copy_", "torch.zeros.index_copy_", "torch.zeros.index_copy_", "inp.view.size", "mask_i.nonzero().squeeze.numel", "inp.view.index_select", "inp.size", "mask_i.nonzero"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.next"], ["mems", "=", "mems", ")", "\n", "output", "=", "self", ".", "pos_ff", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n", "\n", "", "", "class", "RelLearnableDecoderLayer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelLearnableDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "RelLearnableMultiHeadAttn", "(", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "\n", "**", "kwargs", ")", "\n", "self", ".", "pos_ff", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "kwargs", ".", "get", "(", "'pre_lnorm'", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "dec_inp", ",", "r_emb", ",", "r_w_bias", ",", "r_bias", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "output", "=", "self", ".", "dec_attn", "(", "dec_inp", ",", "r_emb", ",", "r_w_bias", ",", "r_bias", ",", "\n", "attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems", ")", "\n", "output", "=", "self", ".", "pos_ff", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n", "\n", "", "", "class", "RelPartialLearnableDecoderLayer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelPartialLearnableDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "RelPartialLearnableMultiHeadAttn", "(", "n_head", ",", "d_model", ",", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__": [[497, 581], ["torch.Module.__init__", "mem_transformer.AdaptiveEmbedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "mem_transformer.MemTransformerLM._create_params", "range", "torch.Linear", "torch.Linear", "torch.Linear", "log_uniform_sampler.LogUniformSampler", "proj_adaptive_softmax.ProjectedAdaptiveLogSoftmax", "mem_transformer.MemTransformerLM.layers.append", "range", "range", "enumerate", "mem_transformer.RelPartialLearnableDecoderLayer", "mem_transformer.MemTransformerLM.layers.append", "range", "len", "mem_transformer.RelLearnableDecoderLayer", "mem_transformer.MemTransformerLM.layers.append", "mem_transformer.DecoderLayer"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.__init__", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM._create_params"], ["self", ".", "pos_ff", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "kwargs", ".", "get", "(", "'pre_lnorm'", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "dec_inp", ",", "r", ",", "r_w_bias", ",", "r_r_bias", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "output", "=", "self", ".", "dec_attn", "(", "dec_inp", ",", "r", ",", "r_w_bias", ",", "r_r_bias", ",", "\n", "attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems", ")", "\n", "output", "=", "self", ".", "pos_ff", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n", "\n", "", "", "class", "AdaptiveEmbedding", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n_token", ",", "d_embed", ",", "d_proj", ",", "cutoffs", ",", "div_val", "=", "1", ",", "\n", "sample_softmax", "=", "False", ")", ":", "\n", "        ", "super", "(", "AdaptiveEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_token", "=", "n_token", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "\n", "self", ".", "cutoffs", "=", "cutoffs", "+", "[", "n_token", "]", "\n", "self", ".", "div_val", "=", "div_val", "\n", "self", ".", "d_proj", "=", "d_proj", "\n", "\n", "self", ".", "emb_scale", "=", "d_proj", "**", "0.5", "\n", "\n", "self", ".", "cutoff_ends", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "\n", "self", ".", "emb_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "emb_projs", "=", "nn", ".", "ParameterList", "(", ")", "\n", "if", "div_val", "==", "1", ":", "\n", "            ", "self", ".", "emb_layers", ".", "append", "(", "\n", "nn", ".", "Embedding", "(", "n_token", ",", "d_embed", ",", "sparse", "=", "sample_softmax", ">", "0", ")", "\n", ")", "\n", "if", "d_proj", "!=", "d_embed", ":", "\n", "# output:d_proj", "\n", "                ", "self", ".", "emb_projs", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "d_proj", ",", "d_embed", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "d_emb_i", "=", "d_embed", "//", "(", "div_val", "**", "i", ")", "\n", "self", ".", "emb_layers", ".", "append", "(", "nn", ".", "Embedding", "(", "r_idx", "-", "l_idx", ",", "d_emb_i", ")", ")", "\n", "self", ".", "emb_projs", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "d_proj", ",", "d_emb_i", ")", ")", ")", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "div_val", "==", "1", ":", "\n", "            ", "embed", "=", "self", ".", "emb_layers", "[", "0", "]", "(", "inp", ")", "\n", "if", "self", ".", "d_proj", "!=", "self", ".", "d_embed", ":", "\n", "                ", "embed", "=", "F", ".", "linear", "(", "embed", ",", "self", ".", "emb_projs", "[", "0", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "param", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", "\n", "inp_flat", "=", "inp", ".", "view", "(", "-", "1", ")", "\n", "emb_flat", "=", "torch", ".", "zeros", "(", "[", "inp_flat", ".", "size", "(", "0", ")", ",", "self", ".", "d_proj", "]", ",", "\n", "dtype", "=", "param", ".", "dtype", ",", "device", "=", "param", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "\n", "mask_i", "=", "(", "inp_flat", ">=", "l_idx", ")", "&", "(", "inp_flat", "<", "r_idx", ")", "\n", "indices_i", "=", "mask_i", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "indices_i", ".", "numel", "(", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "inp_i", "=", "inp_flat", ".", "index_select", "(", "0", ",", "indices_i", ")", "-", "l_idx", "\n", "emb_i", "=", "self", ".", "emb_layers", "[", "i", "]", "(", "inp_i", ")", "\n", "emb_i", "=", "F", ".", "linear", "(", "emb_i", ",", "self", ".", "emb_projs", "[", "i", "]", ")", "\n", "\n", "emb_flat", ".", "index_copy_", "(", "0", ",", "indices_i", ",", "emb_i", ")", "\n", "\n", "", "embed", "=", "emb_flat", ".", "view", "(", "*", "inp", ".", "size", "(", ")", ",", "self", ".", "d_proj", ")", "\n", "\n", "", "embed", ".", "mul_", "(", "self", ".", "emb_scale", ")", "\n", "\n", "return", "embed", "\n", "\n", "\n", "", "", "class", "MemTransformerLM", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n_token", ",", "n_layer", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "\n", "dropout", ",", "dropatt", ",", "tie_weight", "=", "True", ",", "d_embed", "=", "None", ",", "\n", "div_val", "=", "1", ",", "tie_projs", "=", "[", "False", "]", ",", "pre_lnorm", "=", "False", ",", "\n", "tgt_len", "=", "None", ",", "ext_len", "=", "None", ",", "mem_len", "=", "None", ",", "\n", "cutoffs", "=", "[", "]", ",", "adapt_inp", "=", "False", ",", "\n", "same_length", "=", "False", ",", "attn_type", "=", "0", ",", "clamp_len", "=", "-", "1", ",", "\n", "sample_softmax", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "MemTransformerLM", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.backward_compatible": [[582, 584], ["None"], "methods", ["None"], ["self", ".", "n_token", "=", "n_token", "\n", "\n", "global", "initCore", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM._create_params": [[585, 602], ["mem_transformer.PositionalEmbedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "mem_transformer.PositionalEmbedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["# core_number = 2", "\n", "# initCore = torch.ones(1, 40)", "\n", "initCore1", "=", "F", ".", "softmax", "(", "torch", ".", "rand", "(", "1", ",", "40", ")", ",", "dim", "=", "1", ")", "\n", "initCore2", "=", "torch", ".", "rand", "(", "1", ",", "40", ")", "\n", "initCore", "=", "torch", ".", "cat", "(", "(", "initCore1", ",", "initCore2", ")", ",", "dim", "=", "0", ")", "\n", "\n", "d_embed", "=", "d_model", "if", "d_embed", "is", "None", "else", "d_embed", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_head", "=", "d_head", "\n", "\n", "self", ".", "word_emb", "=", "AdaptiveEmbedding", "(", "n_token", ",", "d_embed", ",", "d_model", ",", "cutoffs", ",", "\n", "div_val", "=", "div_val", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "n_layer", "=", "n_layer", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.reset_length": [[603, 607], ["None"], "methods", ["None"], ["\n", "self", ".", "tgt_len", "=", "tgt_len", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "ext_len", "=", "ext_len", "\n", "self", ".", "max_klen", "=", "tgt_len", "+", "ext_len", "+", "mem_len", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.init_mems": [[608, 619], ["next", "range", "mem_transformer.MemTransformerLM.parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "mems.append"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.TRANSLATION.DataLoader.DataLoader.next"], ["\n", "self", ".", "attn_type", "=", "attn_type", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "attn_type", "==", "0", ":", "# the default attention", "\n", "            ", "for", "i", "in", "range", "(", "n_layer", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "RelPartialLearnableDecoderLayer", "(", "\n", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "tgt_len", "=", "tgt_len", ",", "ext_len", "=", "ext_len", ",", "mem_len", "=", "mem_len", ",", "\n", "dropatt", "=", "dropatt", ",", "pre_lnorm", "=", "pre_lnorm", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM._update_mems": [[620, 642], ["len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "range", "max", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "new_mems.append", "cat[].detach"], "methods", ["None"], ["", "", "elif", "attn_type", "==", "1", ":", "# learnable embeddings", "\n", "            ", "for", "i", "in", "range", "(", "n_layer", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "RelLearnableDecoderLayer", "(", "\n", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "tgt_len", "=", "tgt_len", ",", "ext_len", "=", "ext_len", ",", "mem_len", "=", "mem_len", ",", "\n", "dropatt", "=", "dropatt", ",", "pre_lnorm", "=", "pre_lnorm", ")", "\n", ")", "\n", "", "", "elif", "attn_type", "in", "[", "2", ",", "3", "]", ":", "# absolute embeddings", "\n", "            ", "for", "i", "in", "range", "(", "n_layer", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "DecoderLayer", "(", "\n", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "dropatt", "=", "dropatt", ",", "pre_lnorm", "=", "pre_lnorm", ")", "\n", ")", "\n", "\n", "", "", "self", ".", "sample_softmax", "=", "sample_softmax", "\n", "# use sampled softmax", "\n", "if", "sample_softmax", ">", "0", ":", "\n", "            ", "self", ".", "out_layer", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_token", ")", "\n", "if", "tie_weight", ":", "\n", "                ", "self", ".", "out_layer", ".", "weight", "=", "self", ".", "word_emb", ".", "weight", "\n", "", "self", ".", "tie_weight", "=", "tie_weight", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM._forward": [[643, 737], ["dec_inp.size", "mem_transformer.MemTransformerLM.word_emb", "mem_transformer.MemTransformerLM.drop", "mem_transformer.MemTransformerLM._update_mems", "mems[].size", "mem_transformer.MemTransformerLM.new_ones", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mem_transformer.MemTransformerLM.pos_emb", "mem_transformer.MemTransformerLM.drop", "mem_transformer.MemTransformerLM.drop", "hids.append", "enumerate", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.triu().byte", "torch.arange.clamp_", "torch.arange.clamp_", "torch.arange.clamp_", "layer", "hids.append", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "mem_transformer.MemTransformerLM.new_ones"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM._update_mems"], ["self", ".", "sampler", "=", "LogUniformSampler", "(", "n_token", ",", "sample_softmax", ")", "\n", "\n", "# use adaptive softmax (including standard softmax)", "\n", "", "else", ":", "\n", "            ", "self", ".", "crit", "=", "ProjectedAdaptiveLogSoftmax", "(", "n_token", ",", "d_embed", ",", "d_model", ",", "\n", "cutoffs", ",", "div_val", "=", "div_val", ")", "\n", "\n", "if", "tie_weight", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "crit", ".", "out_layers", ")", ")", ":", "\n", "                    ", "self", ".", "crit", ".", "out_layers", "[", "i", "]", ".", "weight", "=", "self", ".", "word_emb", ".", "emb_layers", "[", "i", "]", ".", "weight", "\n", "\n", "", "", "if", "tie_projs", ":", "\n", "                ", "for", "i", ",", "tie_proj", "in", "enumerate", "(", "tie_projs", ")", ":", "\n", "                    ", "if", "tie_proj", "and", "div_val", "==", "1", "and", "d_model", "!=", "d_embed", ":", "\n", "                        ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "self", ".", "word_emb", ".", "emb_projs", "[", "0", "]", "\n", "", "elif", "tie_proj", "and", "div_val", "!=", "1", ":", "\n", "                        ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "self", ".", "word_emb", ".", "emb_projs", "[", "i", "]", "\n", "\n", "", "", "", "", "self", ".", "same_length", "=", "same_length", "\n", "self", ".", "clamp_len", "=", "clamp_len", "\n", "\n", "self", ".", "_create_params", "(", ")", "\n", "\n", "", "def", "backward_compatible", "(", "self", ")", ":", "\n", "        ", "self", ".", "sample_softmax", "=", "-", "1", "\n", "\n", "", "def", "_create_params", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "attn_type", "==", "0", ":", "# default attention", "\n", "            ", "self", ".", "pos_emb", "=", "PositionalEmbedding", "(", "self", ".", "d_model", ")", "\n", "self", ".", "r_w_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_r_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "1", ":", "# learnable", "\n", "            ", "self", ".", "r_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "n_layer", ",", "self", ".", "max_klen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_w_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "n_layer", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "n_layer", ",", "self", ".", "max_klen", ",", "self", ".", "n_head", ")", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "2", ":", "# absolute standard", "\n", "            ", "self", ".", "pos_emb", "=", "PositionalEmbedding", "(", "self", ".", "d_model", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "3", ":", "# absolute deeper SA", "\n", "            ", "self", ".", "r_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "n_layer", ",", "self", ".", "max_klen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "\n", "", "", "def", "reset_length", "(", "self", ",", "tgt_len", ",", "ext_len", ",", "mem_len", ")", ":", "\n", "        ", "self", ".", "tgt_len", "=", "tgt_len", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "ext_len", "=", "ext_len", "\n", "\n", "", "def", "init_mems", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mem_len", ">", "0", ":", "\n", "            ", "mems", "=", "[", "]", "\n", "param", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layer", "+", "1", ")", ":", "\n", "                ", "empty", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "param", ".", "dtype", ",", "device", "=", "param", ".", "device", ")", "\n", "mems", ".", "append", "(", "empty", ")", "\n", "\n", "", "return", "mems", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "", "", "def", "_update_mems", "(", "self", ",", "hids", ",", "mems", ",", "qlen", ",", "mlen", ")", ":", "\n", "# does not deal with None", "\n", "        ", "if", "mems", "is", "None", ":", "return", "None", "\n", "\n", "# mems is not None", "\n", "assert", "len", "(", "hids", ")", "==", "len", "(", "mems", ")", ",", "'len(hids) != len(mems)'", "\n", "\n", "# There are `mlen + qlen` steps that can be cached into mems", "\n", "# For the next step, the last `ext_len` of the `qlen` tokens", "\n", "# will be used as the extended context. Hence, we only cache", "\n", "# the tokens from `mlen + qlen - self.ext_len - self.mem_len`", "\n", "# to `mlen + qlen - self.ext_len`.", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "new_mems", "=", "[", "]", "\n", "end_idx", "=", "mlen", "+", "max", "(", "0", ",", "qlen", "-", "0", "-", "self", ".", "ext_len", ")", "\n", "beg_idx", "=", "max", "(", "0", ",", "end_idx", "-", "self", ".", "mem_len", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "hids", ")", ")", ":", "\n", "                ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", "[", "i", "]", ",", "hids", "[", "i", "]", "]", ",", "dim", "=", "0", ")", "\n", "new_mems", ".", "append", "(", "cat", "[", "beg_idx", ":", "end_idx", "]", ".", "detach", "(", ")", ")", "\n", "\n", "", "", "return", "new_mems", "\n", "\n", "", "def", "_forward", "(", "self", ",", "dec_inp", ",", "mems", "=", "None", ")", ":", "\n", "        ", "qlen", ",", "bsz", "=", "dec_inp", ".", "size", "(", ")", "\n", "word_emb", "=", "self", ".", "word_emb", "(", "dec_inp", ")", "\n", "\n", "mlen", "=", "mems", "[", "0", "]", ".", "size", "(", "0", ")", "if", "mems", "is", "not", "None", "else", "0", "\n", "\n", "# @@@@@@@@@@@@@@@@@@@@", "\n", "klen", "=", "mlen", "+", "qlen", "\n", "\n", "if", "self", ".", "same_length", ":", "\n", "            ", "all_ones", "=", "word_emb", ".", "new_ones", "(", "qlen", ",", "klen", ")", "\n", "mask_len", "=", "klen", "-", "self", ".", "mem_len", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.forward": [[738, 762], ["target.size", "mem_transformer.MemTransformerLM._forward", "mem_transformer.MemTransformerLM.init_mems", "log_uniform_sampler.sample_logits", "mem_transformer.MemTransformerLM.crit", "loss.view.view.view", "pred_hid.view", "target.view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "pred_hid.size"], "methods", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM._forward", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.init_mems", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.log_uniform_sampler.sample_logits"], ["if", "mask_len", ">", "0", ":", "\n", "                ", "mask_shift_len", "=", "qlen", "-", "mask_len", "\n", "", "else", ":", "\n", "                ", "mask_shift_len", "=", "qlen", "\n", "", "dec_attn_mask", "=", "(", "torch", ".", "triu", "(", "all_ones", ",", "1", "+", "mlen", ")", "\n", "+", "torch", ".", "tril", "(", "all_ones", ",", "-", "mask_shift_len", ")", ")", ".", "byte", "(", ")", "[", ":", ",", ":", ",", "None", "]", "# -1", "\n", "", "else", ":", "\n", "            ", "dec_attn_mask", "=", "torch", ".", "triu", "(", "\n", "word_emb", ".", "new_ones", "(", "qlen", ",", "klen", ")", ",", "diagonal", "=", "1", "+", "mlen", ")", ".", "byte", "(", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "\n", "", "hids", "=", "[", "]", "\n", "if", "self", ".", "attn_type", "==", "0", ":", "# default", "\n", "            ", "pos_seq", "=", "torch", ".", "arange", "(", "klen", "-", "1", ",", "-", "1", ",", "-", "1.0", ",", "device", "=", "word_emb", ".", "device", ",", "\n", "dtype", "=", "word_emb", ".", "dtype", ")", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "pos_seq", ".", "clamp_", "(", "max", "=", "self", ".", "clamp_len", ")", "\n", "", "pos_emb", "=", "self", ".", "pos_emb", "(", "pos_seq", ")", "\n", "\n", "\n", "core_out", "=", "self", ".", "drop", "(", "word_emb", ")", "\n", "pos_emb", "=", "self", ".", "drop", "(", "pos_emb", ")", "\n", "\n", "hids", ".", "append", "(", "core_out", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "                ", "mems_i", "=", "None", "if", "mems", "is", "None", "else", "mems", "[", "i", "]", "\n"]], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_weight": [[210, 215], ["torch.init.uniform_", "torch.init.normal_"], "function", ["None"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_bias": [[216, 218], ["torch.init.constant_"], "function", ["None"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.weights_init": [[219, 257], ["classname.find", "hasattr", "train.init_weight", "hasattr", "train.init_bias", "classname.find", "hasattr", "range", "classname.find", "hasattr", "len", "train.init_weight", "classname.find", "hasattr", "torch.init.normal_", "hasattr", "train.init_weight", "hasattr", "train.init_bias", "range", "classname.find", "hasattr", "len", "torch.init.normal_", "hasattr", "train.init_bias", "classname.find", "hasattr", "hasattr", "hasattr", "hasattr", "torch.init.normal_", "train.init_weight", "train.init_weight", "train.init_weight", "train.init_bias"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_weight", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_bias", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_weight", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_weight", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_bias", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_bias", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_weight", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_weight", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_weight", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.init_bias"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.update_dropout": [[258, 263], ["classname.find", "hasattr"], "function", ["None"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.update_dropatt": [[264, 267], ["hasattr"], "function", ["None"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.evaluate": [[386, 417], ["model.eval", "model.reset_length", "model.train", "model.reset_length", "model.reset_length", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tuple", "enumerate", "model", "loss.mean.mean", "loss.mean.float().item", "loss.mean.float"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.CNN.evaluation.eval", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.reset_length", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.train", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.reset_length", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.mem_transformer.MemTransformerLM.reset_length"], []], "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.train": [[419, 527], ["model.train", "enumerate", "tuple", "tr_iter.get_varlen_iter", "model.zero_grad", "optimizer.step", "tuple", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "range", "para_model", "loss.float().mean().type_as.float().mean().type_as", "loss.float().mean().type_as.float().item", "optimizer.clip_master_grads", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer_sparse.step", "logging", "time.time", "train.evaluate", "logging", "logging", "logging", "time.time", "range", "data_chunks[].contiguous", "target_chunks[].contiguous", "para_model", "loss.float().mean().type_as.float().item", "optimizer.backward", "loss.float().mean().type_as.backward", "model.parameters", "scheduler.step", "time.time", "scheduler.step", "loss.float().mean().type_as.float().mean().type_as", "optimizer.backward", "loss.float().mean().type_as.backward", "loss.float().mean().type_as.float().mean", "loss.float().mean().type_as.float", "scheduler.step", "math.exp", "time.time", "math.exp", "scheduler_sparse.step", "loss.float().mean().type_as.float", "scheduler_sparse.step", "math.log", "math.log", "open", "torch.save", "torch.save", "torch.save", "open", "torch.save", "torch.save", "torch.save", "loss.float().mean().type_as.float().mean", "loss.float().mean().type_as.float", "os.path.join", "os.path.join", "optimizer.state_dict", "loss.float().mean().type_as.float"], "function", ["home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.train", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.pytorch-complex.data_utils.LMOrderedIterator.get_varlen_iter", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.transformer.Optim.ScheduledOptim.zero_grad", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.exp_utils.logging", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.scripts.train.evaluate", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.exp_utils.logging", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.exp_utils.logging", "home.repos.pwc.inspect_result.iclr-complex-order_complex-order.utils.exp_utils.logging"], []]}