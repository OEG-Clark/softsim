{"home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.None.setup.readme": [[11, 15], ["open", "f.read"], "function", ["None"], ["def", "readme", "(", ")", ":", "\n", "    ", "with", "open", "(", "'README.md'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "content", "=", "f", ".", "read", "(", ")", "\n", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.None.setup.get_git_hash": [[29, 53], ["setup.get_git_hash._minimal_ext_cmd"], "function", ["None"], ["def", "get_git_hash", "(", ")", ":", "\n", "\n", "    ", "def", "_minimal_ext_cmd", "(", "cmd", ")", ":", "\n", "# construct minimal environment", "\n", "        ", "env", "=", "{", "}", "\n", "for", "k", "in", "[", "'SYSTEMROOT'", ",", "'PATH'", ",", "'HOME'", "]", ":", "\n", "            ", "v", "=", "os", ".", "environ", ".", "get", "(", "k", ")", "\n", "if", "v", "is", "not", "None", ":", "\n", "                ", "env", "[", "k", "]", "=", "v", "\n", "# LANGUAGE is used on win32", "\n", "", "", "env", "[", "'LANGUAGE'", "]", "=", "'C'", "\n", "env", "[", "'LANG'", "]", "=", "'C'", "\n", "env", "[", "'LC_ALL'", "]", "=", "'C'", "\n", "out", "=", "subprocess", ".", "Popen", "(", "\n", "cmd", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "env", "=", "env", ")", ".", "communicate", "(", ")", "[", "0", "]", "\n", "return", "out", "\n", "\n", "", "try", ":", "\n", "        ", "out", "=", "_minimal_ext_cmd", "(", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", ")", "\n", "sha", "=", "out", ".", "strip", "(", ")", ".", "decode", "(", "'ascii'", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "sha", "=", "'unknown'", "\n", "\n", "", "return", "sha", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.None.setup.get_hash": [[55, 68], ["os.path.exists", "os.path.exists", "setup.get_git_hash", "__version__.split", "ImportError"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.None.setup.get_git_hash"], ["", "def", "get_hash", "(", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "'.git'", ")", ":", "\n", "        ", "sha", "=", "get_git_hash", "(", ")", "[", ":", "7", "]", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "version_file", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "mmdet", ".", "version", "import", "__version__", "\n", "sha", "=", "__version__", ".", "split", "(", "'+'", ")", "[", "-", "1", "]", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Unable to get git version'", ")", "\n", "", "", "else", ":", "\n", "        ", "sha", "=", "'unknown'", "\n", "\n", "", "return", "sha", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.None.setup.write_version_py": [[70, 82], ["setup.get_hash", "open", "f.write", "content.format", "time.asctime"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.None.setup.get_hash"], ["", "def", "write_version_py", "(", ")", ":", "\n", "    ", "content", "=", "\"\"\"# GENERATED VERSION FILE\n# TIME: {}\n\n__version__ = '{}'\nshort_version = '{}'\n\"\"\"", "\n", "sha", "=", "get_hash", "(", ")", "\n", "VERSION", "=", "SHORT_VERSION", "+", "'+'", "+", "sha", "\n", "\n", "with", "open", "(", "version_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "content", ".", "format", "(", "time", ".", "asctime", "(", ")", ",", "VERSION", ",", "SHORT_VERSION", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.None.setup.get_version": [[84, 88], ["open", "exec", "locals", "compile", "f.read"], "function", ["None"], ["", "", "def", "get_version", "(", ")", ":", "\n", "    ", "with", "open", "(", "version_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "exec", "(", "compile", "(", "f", ".", "read", "(", ")", ",", "version_file", ",", "'exec'", ")", ")", "\n", "", "return", "locals", "(", ")", "[", "'__version__'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.None.setup.make_cuda_ext": [[90, 109], ["torch.utils.cpp_extension.CUDAExtension", "torch.cuda.is_available", "EnvironmentError", "os.getenv", "os.path.join", "module.split"], "function", ["None"], ["", "def", "make_cuda_ext", "(", "name", ",", "module", ",", "sources", ")", ":", "\n", "\n", "    ", "define_macros", "=", "[", "]", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "or", "os", ".", "getenv", "(", "'FORCE_CUDA'", ",", "'0'", ")", "==", "'1'", ":", "\n", "        ", "define_macros", "+=", "[", "(", "'WITH_CUDA'", ",", "None", ")", "]", "\n", "", "else", ":", "\n", "        ", "raise", "EnvironmentError", "(", "'CUDA is required to compile MMDetection!'", ")", "\n", "\n", "", "return", "CUDAExtension", "(", "\n", "name", "=", "'{}.{}'", ".", "format", "(", "module", ",", "name", ")", ",", "\n", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "*", "module", ".", "split", "(", "'.'", ")", ",", "p", ")", "for", "p", "in", "sources", "]", ",", "\n", "define_macros", "=", "define_macros", ",", "\n", "extra_compile_args", "=", "{", "\n", "'cxx'", ":", "[", "]", ",", "\n", "'nvcc'", ":", "[", "\n", "'-D__CUDA_NO_HALF_OPERATORS__'", ",", "\n", "'-D__CUDA_NO_HALF_CONVERSIONS__'", ",", "\n", "'-D__CUDA_NO_HALF2_OPERATORS__'", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.None.setup.parse_requirements": [[113, 190], ["list", "line.strip.startswith", "exists", "setup.parse_requirements.gen_packages_items"], "function", ["None"], ["", "def", "parse_requirements", "(", "fname", "=", "'requirements.txt'", ",", "with_version", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Parse the package dependencies listed in a requirements file but strips\n    specific versioning information.\n\n    Args:\n        fname (str): path to requirements file\n        with_version (bool, default=False): if True include version specs\n\n    Returns:\n        List[str]: list of requirements items\n\n    CommandLine:\n        python -c \"import setup; print(setup.parse_requirements())\"\n    \"\"\"", "\n", "import", "sys", "\n", "from", "os", ".", "path", "import", "exists", "\n", "import", "re", "\n", "require_fpath", "=", "fname", "\n", "\n", "def", "parse_line", "(", "line", ")", ":", "\n", "        ", "\"\"\"\n        Parse information from a line in a requirements text file\n        \"\"\"", "\n", "if", "line", ".", "startswith", "(", "'-r '", ")", ":", "\n", "# Allow specifying requirements in other files", "\n", "            ", "target", "=", "line", ".", "split", "(", "' '", ")", "[", "1", "]", "\n", "for", "info", "in", "parse_require_file", "(", "target", ")", ":", "\n", "                ", "yield", "info", "\n", "", "", "else", ":", "\n", "            ", "info", "=", "{", "'line'", ":", "line", "}", "\n", "if", "line", ".", "startswith", "(", "'-e '", ")", ":", "\n", "                ", "info", "[", "'package'", "]", "=", "line", ".", "split", "(", "'#egg='", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "# Remove versioning from the package", "\n", "                ", "pat", "=", "'('", "+", "'|'", ".", "join", "(", "[", "'>='", ",", "'=='", ",", "'>'", "]", ")", "+", "')'", "\n", "parts", "=", "re", ".", "split", "(", "pat", ",", "line", ",", "maxsplit", "=", "1", ")", "\n", "parts", "=", "[", "p", ".", "strip", "(", ")", "for", "p", "in", "parts", "]", "\n", "\n", "info", "[", "'package'", "]", "=", "parts", "[", "0", "]", "\n", "if", "len", "(", "parts", ")", ">", "1", ":", "\n", "                    ", "op", ",", "rest", "=", "parts", "[", "1", ":", "]", "\n", "if", "';'", "in", "rest", ":", "\n", "# Handle platform specific dependencies", "\n", "# http://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-platform-specific-dependencies", "\n", "                        ", "version", ",", "platform_deps", "=", "map", "(", "str", ".", "strip", ",", "\n", "rest", ".", "split", "(", "';'", ")", ")", "\n", "info", "[", "'platform_deps'", "]", "=", "platform_deps", "\n", "", "else", ":", "\n", "                        ", "version", "=", "rest", "# NOQA", "\n", "", "info", "[", "'version'", "]", "=", "(", "op", ",", "version", ")", "\n", "", "", "yield", "info", "\n", "\n", "", "", "def", "parse_require_file", "(", "fpath", ")", ":", "\n", "        ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "and", "not", "line", ".", "startswith", "(", "'#'", ")", ":", "\n", "                    ", "for", "info", "in", "parse_line", "(", "line", ")", ":", "\n", "                        ", "yield", "info", "\n", "\n", "", "", "", "", "", "def", "gen_packages_items", "(", ")", ":", "\n", "        ", "if", "exists", "(", "require_fpath", ")", ":", "\n", "            ", "for", "info", "in", "parse_require_file", "(", "require_fpath", ")", ":", "\n", "                ", "parts", "=", "[", "info", "[", "'package'", "]", "]", "\n", "if", "with_version", "and", "'version'", "in", "info", ":", "\n", "                    ", "parts", ".", "extend", "(", "info", "[", "'version'", "]", ")", "\n", "", "if", "not", "sys", ".", "version", ".", "startswith", "(", "'3.4'", ")", ":", "\n", "# apparently package_deps are broken in 3.4", "\n", "                    ", "platform_deps", "=", "info", ".", "get", "(", "'platform_deps'", ")", "\n", "if", "platform_deps", "is", "not", "None", ":", "\n", "                        ", "parts", ".", "append", "(", "';'", "+", "platform_deps", ")", "\n", "", "", "item", "=", "''", ".", "join", "(", "parts", ")", "\n", "yield", "item", "\n", "\n", "", "", "", "packages", "=", "list", "(", "gen_packages_items", "(", ")", ")", "\n", "return", "packages", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.util_mixins.NiceRepr.__nice__": [[78, 87], ["hasattr", "str", "NotImplementedError", "len"], "methods", ["None"], ["def", "__nice__", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'__len__'", ")", ":", "\n", "# It is a common pattern for objects to use __len__ in __nice__", "\n", "# As a convenience we define a default __nice__ for these objects", "\n", "            ", "return", "str", "(", "len", "(", "self", ")", ")", "\n", "", "else", ":", "\n", "# In all other cases force the subclass to overload __nice__", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'Define the __nice__ method for {!r}'", ".", "format", "(", "self", ".", "__class__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.util_mixins.NiceRepr.__repr__": [[88, 96], ["util_mixins.NiceRepr.__nice__", "hex", "warnings.warn", "object.__repr__", "id", "str"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.__nice__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_align.roi_align.RoIAlign.__repr__"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "nice", "=", "self", ".", "__nice__", "(", ")", "\n", "classname", "=", "self", ".", "__class__", ".", "__name__", "\n", "return", "'<{0}({1}) at {2}>'", ".", "format", "(", "classname", ",", "nice", ",", "hex", "(", "id", "(", "self", ")", ")", ")", "\n", "", "except", "NotImplementedError", "as", "ex", ":", "\n", "            ", "warnings", ".", "warn", "(", "str", "(", "ex", ")", ",", "category", "=", "RuntimeWarning", ")", "\n", "return", "object", ".", "__repr__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.util_mixins.NiceRepr.__str__": [[97, 105], ["util_mixins.NiceRepr.__nice__", "warnings.warn", "object.__repr__", "str"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.__nice__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_align.roi_align.RoIAlign.__repr__"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "classname", "=", "self", ".", "__class__", ".", "__name__", "\n", "nice", "=", "self", ".", "__nice__", "(", ")", "\n", "return", "'<{0}({1})>'", ".", "format", "(", "classname", ",", "nice", ")", "\n", "", "except", "NotImplementedError", "as", "ex", ":", "\n", "            ", "warnings", ".", "warn", "(", "str", "(", "ex", ")", ",", "category", "=", "RuntimeWarning", ")", "\n", "return", "object", ".", "__repr__", "(", "self", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.get_model_complexity_info": [[37, 67], ["flops_counter.add_flops_counting_methods", "add_flops_counting_methods.eval().start_flops_count", "add_flops_counting_methods.compute_average_flops_cost", "flops_counter.get_model_parameters_number", "add_flops_counting_methods.stop_flops_count", "type", "len", "input_constructor", "add_flops_counting_methods.", "torch.ones().new_empty", "torch.ones().new_empty", "add_flops_counting_methods.", "flops_counter.print_model_with_flops", "add_flops_counting_methods.eval", "flops_counter.flops_to_string", "flops_counter.params_to_string", "torch.ones", "torch.ones", "next", "next", "add_flops_counting_methods.parameters", "add_flops_counting_methods.parameters"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.add_flops_counting_methods", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.start_flops_count", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.compute_average_flops_cost", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.get_model_parameters_number", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.stop_flops_count", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.print_model_with_flops", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.flops_to_string", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.params_to_string"], ["def", "get_model_complexity_info", "(", "model", ",", "\n", "input_res", ",", "\n", "print_per_layer_stat", "=", "True", ",", "\n", "as_strings", "=", "True", ",", "\n", "input_constructor", "=", "None", ",", "\n", "ost", "=", "sys", ".", "stdout", ")", ":", "\n", "    ", "assert", "type", "(", "input_res", ")", "is", "tuple", "\n", "assert", "len", "(", "input_res", ")", ">=", "2", "\n", "flops_model", "=", "add_flops_counting_methods", "(", "model", ")", "\n", "flops_model", ".", "eval", "(", ")", ".", "start_flops_count", "(", ")", "\n", "if", "input_constructor", ":", "\n", "        ", "input", "=", "input_constructor", "(", "input_res", ")", "\n", "_", "=", "flops_model", "(", "**", "input", ")", "\n", "", "else", ":", "\n", "        ", "batch", "=", "torch", ".", "ones", "(", "(", ")", ")", ".", "new_empty", "(", "\n", "(", "1", ",", "*", "input_res", ")", ",", "\n", "dtype", "=", "next", "(", "flops_model", ".", "parameters", "(", ")", ")", ".", "dtype", ",", "\n", "device", "=", "next", "(", "flops_model", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "flops_model", "(", "batch", ")", "\n", "\n", "", "if", "print_per_layer_stat", ":", "\n", "        ", "print_model_with_flops", "(", "flops_model", ",", "ost", "=", "ost", ")", "\n", "", "flops_count", "=", "flops_model", ".", "compute_average_flops_cost", "(", ")", "\n", "params_count", "=", "get_model_parameters_number", "(", "flops_model", ")", "\n", "flops_model", ".", "stop_flops_count", "(", ")", "\n", "\n", "if", "as_strings", ":", "\n", "        ", "return", "flops_to_string", "(", "flops_count", ")", ",", "params_to_string", "(", "params_count", ")", "\n", "\n", "", "return", "flops_count", ",", "params_count", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.flops_to_string": [[69, 88], ["str", "round", "str", "str", "round", "str", "str", "round", "str", "str", "round", "round", "str", "round"], "function", ["None"], ["", "def", "flops_to_string", "(", "flops", ",", "units", "=", "'GMac'", ",", "precision", "=", "2", ")", ":", "\n", "    ", "if", "units", "is", "None", ":", "\n", "        ", "if", "flops", "//", "10", "**", "9", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "9", ",", "precision", ")", ")", "+", "' GMac'", "\n", "", "elif", "flops", "//", "10", "**", "6", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "6", ",", "precision", ")", ")", "+", "' MMac'", "\n", "", "elif", "flops", "//", "10", "**", "3", ">", "0", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "3", ",", "precision", ")", ")", "+", "' KMac'", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "flops", ")", "+", "' Mac'", "\n", "", "", "else", ":", "\n", "        ", "if", "units", "==", "'GMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "9", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'MMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "6", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'KMac'", ":", "\n", "            ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "3", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "else", ":", "\n", "            ", "return", "str", "(", "flops", ")", "+", "' Mac'", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.params_to_string": [[90, 109], ["str", "str", "round", "str", "round"], "function", ["None"], ["", "", "", "def", "params_to_string", "(", "params_num", ")", ":", "\n", "    ", "\"\"\"converting number to string\n\n    :param float params_num: number\n    :returns str: number\n\n    >>> params_to_string(1e9)\n    '1000.0 M'\n    >>> params_to_string(2e5)\n    '200.0 k'\n    >>> params_to_string(3e-9)\n    '3e-09'\n    \"\"\"", "\n", "if", "params_num", "//", "10", "**", "6", ">", "0", ":", "\n", "        ", "return", "str", "(", "round", "(", "params_num", "/", "10", "**", "6", ",", "2", ")", ")", "+", "' M'", "\n", "", "elif", "params_num", "//", "10", "**", "3", ":", "\n", "        ", "return", "str", "(", "round", "(", "params_num", "/", "10", "**", "3", ",", "2", ")", ")", "+", "' k'", "\n", "", "else", ":", "\n", "        ", "return", "str", "(", "params_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.print_model_with_flops": [[111, 150], ["model.compute_average_flops_cost", "model.apply", "print", "model.apply", "flops_counter.is_supported_instance", "flops_counter..accumulate_flops", "accumulate_flops.__get__", "flops_repr.__get__", "hasattr", "hasattr", "flops_counter..children", "m.accumulate_flops", "flops_counter.flops_to_string", "flops_counter..original_extra_repr"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.compute_average_flops_cost", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.is_supported_instance", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.flops_to_string"], ["", "", "def", "print_model_with_flops", "(", "model", ",", "units", "=", "'GMac'", ",", "precision", "=", "3", ",", "ost", "=", "sys", ".", "stdout", ")", ":", "\n", "    ", "total_flops", "=", "model", ".", "compute_average_flops_cost", "(", ")", "\n", "\n", "def", "accumulate_flops", "(", "self", ")", ":", "\n", "        ", "if", "is_supported_instance", "(", "self", ")", ":", "\n", "            ", "return", "self", ".", "__flops__", "/", "model", ".", "__batch_counter__", "\n", "", "else", ":", "\n", "            ", "sum", "=", "0", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "                ", "sum", "+=", "m", ".", "accumulate_flops", "(", ")", "\n", "", "return", "sum", "\n", "\n", "", "", "def", "flops_repr", "(", "self", ")", ":", "\n", "        ", "accumulated_flops_cost", "=", "self", ".", "accumulate_flops", "(", ")", "\n", "return", "', '", ".", "join", "(", "[", "\n", "flops_to_string", "(", "\n", "accumulated_flops_cost", ",", "units", "=", "units", ",", "precision", "=", "precision", ")", ",", "\n", "'{:.3%} MACs'", ".", "format", "(", "accumulated_flops_cost", "/", "total_flops", ")", ",", "\n", "self", ".", "original_extra_repr", "(", ")", "\n", "]", ")", "\n", "\n", "", "def", "add_extra_repr", "(", "m", ")", ":", "\n", "        ", "m", ".", "accumulate_flops", "=", "accumulate_flops", ".", "__get__", "(", "m", ")", "\n", "flops_extra_repr", "=", "flops_repr", ".", "__get__", "(", "m", ")", "\n", "if", "m", ".", "extra_repr", "!=", "flops_extra_repr", ":", "\n", "            ", "m", ".", "original_extra_repr", "=", "m", ".", "extra_repr", "\n", "m", ".", "extra_repr", "=", "flops_extra_repr", "\n", "assert", "m", ".", "extra_repr", "!=", "m", ".", "original_extra_repr", "\n", "\n", "", "", "def", "del_extra_repr", "(", "m", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "'original_extra_repr'", ")", ":", "\n", "            ", "m", ".", "extra_repr", "=", "m", ".", "original_extra_repr", "\n", "del", "m", ".", "original_extra_repr", "\n", "", "if", "hasattr", "(", "m", ",", "'accumulate_flops'", ")", ":", "\n", "            ", "del", "m", ".", "accumulate_flops", "\n", "\n", "", "", "model", ".", "apply", "(", "add_extra_repr", ")", "\n", "print", "(", "model", ",", "file", "=", "ost", ")", "\n", "model", ".", "apply", "(", "del_extra_repr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.get_model_parameters_number": [[152, 155], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "get_model_parameters_number", "(", "model", ")", ":", "\n", "    ", "params_num", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "return", "params_num", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.add_flops_counting_methods": [[157, 175], ["start_flops_count.__get__", "stop_flops_count.__get__", "reset_flops_count.__get__", "compute_average_flops_cost.__get__", "net_main_module.reset_flops_count", "net_main_module.apply"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.reset_flops_count"], ["", "def", "add_flops_counting_methods", "(", "net_main_module", ")", ":", "\n", "# adding additional methods to the existing module object,", "\n", "# this is done this way so that each function has access to self object", "\n", "    ", "net_main_module", ".", "start_flops_count", "=", "start_flops_count", ".", "__get__", "(", "\n", "net_main_module", ")", "\n", "net_main_module", ".", "stop_flops_count", "=", "stop_flops_count", ".", "__get__", "(", "\n", "net_main_module", ")", "\n", "net_main_module", ".", "reset_flops_count", "=", "reset_flops_count", ".", "__get__", "(", "\n", "net_main_module", ")", "\n", "net_main_module", ".", "compute_average_flops_cost", "=", "compute_average_flops_cost", ".", "__get__", "(", "net_main_module", ")", "\n", "\n", "net_main_module", ".", "reset_flops_count", "(", ")", "\n", "\n", "# Adding variables necessary for masked flops computation", "\n", "net_main_module", ".", "apply", "(", "add_flops_mask_variable_or_reset", ")", "\n", "\n", "return", "net_main_module", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.compute_average_flops_cost": [[177, 191], ["flops_counter..modules", "flops_counter.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.is_supported_instance"], ["", "def", "compute_average_flops_cost", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is\n    called on a desired net object.\n    Returns current mean flops consumption per image.\n    \"\"\"", "\n", "\n", "batches_count", "=", "self", ".", "__batch_counter__", "\n", "flops_sum", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "            ", "flops_sum", "+=", "module", ".", "__flops__", "\n", "\n", "", "", "return", "flops_sum", "/", "batches_count", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.start_flops_count": [[193, 202], ["flops_counter.add_batch_counter_hook_function", "flops_counter..apply"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.add_batch_counter_hook_function"], ["", "def", "start_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is\n    called on a desired net object.\n    Activates the computation of mean flops consumption per image.\n    Call it before you run the network.\n    \"\"\"", "\n", "add_batch_counter_hook_function", "(", "self", ")", "\n", "self", ".", "apply", "(", "add_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.stop_flops_count": [[204, 213], ["flops_counter.remove_batch_counter_hook_function", "flops_counter..apply"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.remove_batch_counter_hook_function"], ["", "def", "stop_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is\n    called on a desired net object.\n    Stops computing the mean flops consumption per image.\n    Call whenever you want to pause the computation.\n    \"\"\"", "\n", "remove_batch_counter_hook_function", "(", "self", ")", "\n", "self", ".", "apply", "(", "remove_flops_counter_hook_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.reset_flops_count": [[215, 223], ["flops_counter.add_batch_counter_variables_or_reset", "flops_counter..apply"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.add_batch_counter_variables_or_reset"], ["", "def", "reset_flops_count", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is\n    called on a desired net object.\n    Resets statistics computed so far.\n    \"\"\"", "\n", "add_batch_counter_variables_or_reset", "(", "self", ")", "\n", "self", ".", "apply", "(", "add_flops_counter_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.add_flops_mask": [[225, 232], ["module.apply", "isinstance"], "function", ["None"], ["", "def", "add_flops_mask", "(", "module", ",", "mask", ")", ":", "\n", "\n", "    ", "def", "add_flops_mask_func", "(", "module", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "module", ".", "__mask__", "=", "mask", "\n", "\n", "", "", "module", ".", "apply", "(", "add_flops_mask_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.remove_flops_mask": [[234, 236], ["module.apply"], "function", ["None"], ["", "def", "remove_flops_mask", "(", "module", ")", ":", "\n", "    ", "module", ".", "apply", "(", "add_flops_mask_variable_or_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.is_supported_instance": [[238, 243], ["issubclass", "type"], "function", ["None"], ["", "def", "is_supported_instance", "(", "module", ")", ":", "\n", "    ", "for", "mod", "in", "hook_mapping", ":", "\n", "        ", "if", "issubclass", "(", "type", "(", "module", ")", ",", "mod", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.empty_flops_counter_hook": [[245, 247], ["None"], "function", ["None"], ["", "def", "empty_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "module", ".", "__flops__", "+=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.upsample_flops_counter_hook": [[249, 256], ["int"], "function", ["None"], ["", "def", "upsample_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "output_size", "=", "output", "[", "0", "]", "\n", "batch_size", "=", "output_size", ".", "shape", "[", "0", "]", "\n", "output_elements_count", "=", "batch_size", "\n", "for", "val", "in", "output_size", ".", "shape", "[", "1", ":", "]", ":", "\n", "        ", "output_elements_count", "*=", "val", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "output_elements_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.relu_flops_counter_hook": [[258, 261], ["output.numel", "int"], "function", ["None"], ["", "def", "relu_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "active_elements_count", "=", "output", ".", "numel", "(", ")", "\n", "module", ".", "__flops__", "+=", "int", "(", "active_elements_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.linear_flops_counter_hook": [[263, 267], ["int"], "function", ["None"], ["", "def", "linear_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "module", ".", "__flops__", "+=", "int", "(", "batch_size", "*", "input", ".", "shape", "[", "1", "]", "*", "output", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.pool_flops_counter_hook": [[269, 272], ["int", "numpy.prod"], "function", ["None"], ["", "def", "pool_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "module", ".", "__flops__", "+=", "int", "(", "np", ".", "prod", "(", "input", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.bn_flops_counter_hook": [[274, 281], ["numpy.prod", "int"], "function", ["None"], ["", "def", "bn_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_flops", "=", "np", ".", "prod", "(", "input", ".", "shape", ")", "\n", "if", "module", ".", "affine", ":", "\n", "        ", "batch_flops", "*=", "2", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "batch_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.gn_flops_counter_hook": [[283, 292], ["numpy.prod", "int"], "function", ["None"], ["", "def", "gn_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "elems", "=", "np", ".", "prod", "(", "input", "[", "0", "]", ".", "shape", ")", "\n", "# there is no precise FLOPs estimation of computing mean and variance,", "\n", "# and we just set it 2 * elems: half muladds for computing", "\n", "# means and half for computing vars", "\n", "batch_flops", "=", "3", "*", "elems", "\n", "if", "module", ".", "affine", ":", "\n", "        ", "batch_flops", "+=", "elems", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "batch_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.deconv_flops_counter_hook": [[294, 319], ["int"], "function", ["None"], ["", "def", "deconv_flops_counter_hook", "(", "conv_module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "input_height", ",", "input_width", "=", "input", ".", "shape", "[", "2", ":", "]", "\n", "\n", "kernel_height", ",", "kernel_width", "=", "conv_module", ".", "kernel_size", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "\n", "filters_per_channel", "=", "out_channels", "//", "groups", "\n", "conv_per_position_flops", "=", "(", "\n", "kernel_height", "*", "kernel_width", "*", "in_channels", "*", "filters_per_channel", ")", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "input_height", "*", "input_width", "\n", "overall_conv_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "bias_flops", "=", "0", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "bias_flops", "=", "out_channels", "*", "batch_size", "*", "output_height", "*", "output_height", "\n", "", "overall_flops", "=", "overall_conv_flops", "+", "bias_flops", "\n", "\n", "conv_module", ".", "__flops__", "+=", "int", "(", "overall_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.conv_flops_counter_hook": [[321, 357], ["list", "list", "int", "numpy.prod", "conv_module.__mask__.expand", "conv_module.__mask__.expand.sum", "numpy.prod"], "function", ["None"], ["", "def", "conv_flops_counter_hook", "(", "conv_module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "output_dims", "=", "list", "(", "output", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "kernel_dims", "=", "list", "(", "conv_module", ".", "kernel_size", ")", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "\n", "filters_per_channel", "=", "out_channels", "//", "groups", "\n", "conv_per_position_flops", "=", "np", ".", "prod", "(", "\n", "kernel_dims", ")", "*", "in_channels", "*", "filters_per_channel", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "np", ".", "prod", "(", "output_dims", ")", "\n", "\n", "if", "conv_module", ".", "__mask__", "is", "not", "None", ":", "\n", "# (b, 1, h, w)", "\n", "        ", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "flops_mask", "=", "conv_module", ".", "__mask__", ".", "expand", "(", "batch_size", ",", "1", ",", "output_height", ",", "\n", "output_width", ")", "\n", "active_elements_count", "=", "flops_mask", ".", "sum", "(", ")", "\n", "\n", "", "overall_conv_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "bias_flops", "=", "0", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "\n", "        ", "bias_flops", "=", "out_channels", "*", "active_elements_count", "\n", "\n", "", "overall_flops", "=", "overall_conv_flops", "+", "bias_flops", "\n", "\n", "conv_module", ".", "__flops__", "+=", "int", "(", "overall_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.batch_counter_hook": [[385, 395], ["len", "len", "print"], "function", ["None"], ["def", "batch_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "if", "len", "(", "input", ")", ">", "0", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "        ", "input", "=", "input", "[", "0", "]", "\n", "batch_size", "=", "len", "(", "input", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Warning! No positional inputs found for a module, '", "\n", "'assuming batch size is 1.'", ")", "\n", "", "module", ".", "__batch_counter__", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.add_batch_counter_variables_or_reset": [[397, 399], ["None"], "function", ["None"], ["", "def", "add_batch_counter_variables_or_reset", "(", "module", ")", ":", "\n", "    ", "module", ".", "__batch_counter__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.add_batch_counter_hook_function": [[401, 407], ["hasattr", "module.register_forward_hook"], "function", ["None"], ["", "def", "add_batch_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "        ", "return", "\n", "\n", "", "handle", "=", "module", ".", "register_forward_hook", "(", "batch_counter_hook", ")", "\n", "module", ".", "__batch_counter_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.remove_batch_counter_hook_function": [[409, 413], ["hasattr", "module.__batch_counter_handle__.remove"], "function", ["None"], ["", "def", "remove_batch_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "        ", "module", ".", "__batch_counter_handle__", ".", "remove", "(", ")", "\n", "del", "module", ".", "__batch_counter_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.add_flops_counter_variable_or_reset": [[415, 418], ["flops_counter.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.is_supported_instance"], ["", "", "def", "add_flops_counter_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "module", ".", "__flops__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.add_flops_counter_hook_function": [[420, 431], ["flops_counter.is_supported_instance", "hasattr", "hook_mapping.items", "issubclass", "type", "module.register_forward_hook"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.is_supported_instance"], ["", "", "def", "add_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "return", "\n", "\n", "", "for", "mod_type", ",", "counter_hook", "in", "hook_mapping", ".", "items", "(", ")", ":", "\n", "            ", "if", "issubclass", "(", "type", "(", "module", ")", ",", "mod_type", ")", ":", "\n", "                ", "handle", "=", "module", ".", "register_forward_hook", "(", "counter_hook", ")", "\n", "break", "\n", "\n", "", "", "module", ".", "__flops_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.remove_flops_counter_hook_function": [[433, 438], ["flops_counter.is_supported_instance", "hasattr", "module.__flops_handle__.remove"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.is_supported_instance"], ["", "", "def", "remove_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "module", ".", "__flops_handle__", ".", "remove", "(", ")", "\n", "del", "module", ".", "__flops_handle__", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.add_flops_mask_variable_or_reset": [[442, 445], ["flops_counter.is_supported_instance"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.is_supported_instance"], ["", "", "", "def", "add_flops_mask_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "is_supported_instance", "(", "module", ")", ":", "\n", "        ", "module", ".", "__mask__", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.get_root_logger": [[6, 41], ["logging.getLogger", "logging.getLogger.hasHandlers", "logging.basicConfig", "mmcv.runner.get_dist_info", "logging.getLogger.setLevel", "__name__.split", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.FileHandler.setLevel", "logging.getLogger.addHandler", "logging.Formatter"], "function", ["None"], ["def", "get_root_logger", "(", "log_file", "=", "None", ",", "log_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "\"\"\"Get the root logger.\n\n    The logger will be initialized if it has not been initialized. By default a\n    StreamHandler will be added. If `log_file` is specified, a FileHandler will\n    also be added. The name of the root logger is the top-level package name,\n    e.g., \"mmdet\".\n\n    Args:\n        log_file (str | None): The log filename. If specified, a FileHandler\n            will be added to the root logger.\n        log_level (int): The root logger level. Note that only the process of\n            rank 0 is affected, while other processes will set the level to\n            \"Error\" and be silent most of the time.\n\n    Returns:\n        logging.Logger: The root logger.\n    \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "# i.e., mmdet", "\n", "# if the logger has been initialized, just return it", "\n", "if", "logger", ".", "hasHandlers", "(", ")", ":", "\n", "        ", "return", "logger", "\n", "\n", "", "format_str", "=", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", "\n", "logging", ".", "basicConfig", "(", "format", "=", "format_str", ",", "level", "=", "log_level", ")", "\n", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "logger", ".", "setLevel", "(", "'ERROR'", ")", "\n", "", "elif", "log_file", "is", "not", "None", ":", "\n", "        ", "file_handler", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "'w'", ")", "\n", "file_handler", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "format_str", ")", ")", "\n", "file_handler", ".", "setLevel", "(", "log_level", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.print_log": [[43, 67], ["print", "logger.get_root_logger", "get_root_logger.log", "isinstance", "logger.log", "TypeError"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.get_root_logger"], ["", "def", "print_log", "(", "msg", ",", "logger", "=", "None", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "\"\"\"Print a log message.\n\n    Args:\n        msg (str): The message to be logged.\n        logger (logging.Logger | str | None): The logger to be used. Some\n            special loggers are:\n            - \"root\": the root logger obtained with `get_root_logger()`.\n            - \"silent\": no message will be printed.\n            - None: The `print()` method will be used to print log messages.\n        level (int): Logging level. Only available when `logger` is a Logger\n            object or \"root\".\n    \"\"\"", "\n", "if", "logger", "is", "None", ":", "\n", "        ", "print", "(", "msg", ")", "\n", "", "elif", "logger", "==", "'root'", ":", "\n", "        ", "_logger", "=", "get_root_logger", "(", ")", "\n", "_logger", ".", "log", "(", "level", ",", "msg", ")", "\n", "", "elif", "isinstance", "(", "logger", ",", "logging", ".", "Logger", ")", ":", "\n", "        ", "logger", ".", "log", "(", "level", ",", "msg", ")", "\n", "", "elif", "logger", "!=", "'silent'", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'logger should be either a logging.Logger object, \"root\", '", "\n", "'\"silent\" or None, but got {}'", ".", "format", "(", "logger", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.__init__": [[9, 12], ["dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_module_dict", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.__repr__": [[13, 17], ["list", "registry.Registry._module_dict.keys"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_str", "=", "self", ".", "__class__", ".", "__name__", "+", "'(name={}, items={})'", ".", "format", "(", "\n", "self", ".", "_name", ",", "list", "(", "self", ".", "_module_dict", ".", "keys", "(", ")", ")", ")", "\n", "return", "format_str", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.name": [[18, 21], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.module_dict": [[22, 25], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "module_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_module_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get": [[26, 28], ["registry.Registry._module_dict.get"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "def", "get", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_module_dict", ".", "get", "(", "key", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry._register_module": [[29, 43], ["inspect.isclass", "TypeError", "KeyError", "type"], "methods", ["None"], ["", "def", "_register_module", "(", "self", ",", "module_class", ",", "force", "=", "False", ")", ":", "\n", "        ", "\"\"\"Register a module.\n\n        Args:\n            module (:obj:`nn.Module`): Module to be registered.\n        \"\"\"", "\n", "if", "not", "inspect", ".", "isclass", "(", "module_class", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'module must be a class, but got {}'", ".", "format", "(", "\n", "type", "(", "module_class", ")", ")", ")", "\n", "", "module_name", "=", "module_class", ".", "__name__", "\n", "if", "not", "force", "and", "module_name", "in", "self", ".", "_module_dict", ":", "\n", "            ", "raise", "KeyError", "(", "'{} is already registered in {}'", ".", "format", "(", "\n", "module_name", ",", "self", ".", "name", ")", ")", "\n", "", "self", ".", "_module_dict", "[", "module_name", "]", "=", "module_class", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.register_module": [[44, 49], ["registry.Registry._register_module", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry._register_module"], ["", "def", "register_module", "(", "self", ",", "cls", "=", "None", ",", "force", "=", "False", ")", ":", "\n", "        ", "if", "cls", "is", "None", ":", "\n", "            ", "return", "partial", "(", "self", ".", "register_module", ",", "force", "=", "force", ")", "\n", "", "self", ".", "_register_module", "(", "cls", ",", "force", "=", "force", ")", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.build_from_cfg": [[51, 80], ["cfg.copy", "cfg.copy.pop", "mmcv.is_str", "registry.get.", "isinstance", "isinstance", "registry.get", "inspect.isclass", "default_args.items", "KeyError", "TypeError", "cfg.copy.setdefault", "type"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "", "def", "build_from_cfg", "(", "cfg", ",", "registry", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build a module from config dict.\n\n    Args:\n        cfg (dict): Config dict. It should at least contain the key \"type\".\n        registry (:obj:`Registry`): The registry to search the type from.\n        default_args (dict, optional): Default initialization arguments.\n\n    Returns:\n        obj: The constructed object.\n    \"\"\"", "\n", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "assert", "isinstance", "(", "default_args", ",", "dict", ")", "or", "default_args", "is", "None", "\n", "args", "=", "cfg", ".", "copy", "(", ")", "\n", "obj_type", "=", "args", ".", "pop", "(", "'type'", ")", "\n", "if", "mmcv", ".", "is_str", "(", "obj_type", ")", ":", "\n", "        ", "obj_cls", "=", "registry", ".", "get", "(", "obj_type", ")", "\n", "if", "obj_cls", "is", "None", ":", "\n", "            ", "raise", "KeyError", "(", "'{} is not in the {} registry'", ".", "format", "(", "\n", "obj_type", ",", "registry", ".", "name", ")", ")", "\n", "", "", "elif", "inspect", ".", "isclass", "(", "obj_type", ")", ":", "\n", "        ", "obj_cls", "=", "obj_type", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'type must be a str or valid type, but got {}'", ".", "format", "(", "\n", "type", "(", "obj_type", ")", ")", ")", "\n", "", "if", "default_args", "is", "not", "None", ":", "\n", "        ", "for", "name", ",", "value", "in", "default_args", ".", "items", "(", ")", ":", "\n", "            ", "args", ".", "setdefault", "(", "name", ",", "value", ")", "\n", "", "", "return", "obj_cls", "(", "**", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.collect_env.collect_env": [[14, 59], ["sys.version.replace", "torch.cuda.is_available", "subprocess.check_output", "gcc.decode().strip.decode().strip", "torch.__config__.show", "get_compiler_version", "get_compiling_cuda_version", "collections.defaultdict", "range", "collections.defaultdict.items", "os.isdir", "torch.cuda.device_count", "devices[].append", "gcc.decode().strip.decode", "os.join", "subprocess.check_output", "nvcc.decode().strip.decode().strip", "str", "nvcc.decode().strip.decode", "torch.cuda.get_device_name"], "function", ["None"], ["def", "collect_env", "(", ")", ":", "\n", "    ", "env_info", "=", "{", "}", "\n", "env_info", "[", "'sys.platform'", "]", "=", "sys", ".", "platform", "\n", "env_info", "[", "'Python'", "]", "=", "sys", ".", "version", ".", "replace", "(", "'\\n'", ",", "''", ")", "\n", "\n", "cuda_available", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "env_info", "[", "'CUDA available'", "]", "=", "cuda_available", "\n", "\n", "if", "cuda_available", ":", "\n", "        ", "from", "torch", ".", "utils", ".", "cpp_extension", "import", "CUDA_HOME", "\n", "env_info", "[", "'CUDA_HOME'", "]", "=", "CUDA_HOME", "\n", "\n", "if", "CUDA_HOME", "is", "not", "None", "and", "osp", ".", "isdir", "(", "CUDA_HOME", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "nvcc", "=", "osp", ".", "join", "(", "CUDA_HOME", ",", "'bin/nvcc'", ")", "\n", "nvcc", "=", "subprocess", ".", "check_output", "(", "\n", "'\"{}\" -V | tail -n1'", ".", "format", "(", "nvcc", ")", ",", "shell", "=", "True", ")", "\n", "nvcc", "=", "nvcc", ".", "decode", "(", "'utf-8'", ")", ".", "strip", "(", ")", "\n", "", "except", "subprocess", ".", "SubprocessError", ":", "\n", "                ", "nvcc", "=", "'Not Available'", "\n", "", "env_info", "[", "'NVCC'", "]", "=", "nvcc", "\n", "\n", "", "devices", "=", "defaultdict", "(", "list", ")", "\n", "for", "k", "in", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ":", "\n", "            ", "devices", "[", "torch", ".", "cuda", ".", "get_device_name", "(", "k", ")", "]", ".", "append", "(", "str", "(", "k", ")", ")", "\n", "", "for", "name", ",", "devids", "in", "devices", ".", "items", "(", ")", ":", "\n", "            ", "env_info", "[", "'GPU '", "+", "','", ".", "join", "(", "devids", ")", "]", "=", "name", "\n", "\n", "", "", "gcc", "=", "subprocess", ".", "check_output", "(", "'gcc --version | head -n1'", ",", "shell", "=", "True", ")", "\n", "gcc", "=", "gcc", ".", "decode", "(", "'utf-8'", ")", ".", "strip", "(", ")", "\n", "env_info", "[", "'GCC'", "]", "=", "gcc", "\n", "\n", "env_info", "[", "'PyTorch'", "]", "=", "torch", ".", "__version__", "\n", "env_info", "[", "'PyTorch compiling details'", "]", "=", "torch", ".", "__config__", ".", "show", "(", ")", "\n", "\n", "env_info", "[", "'TorchVision'", "]", "=", "torchvision", ".", "__version__", "\n", "\n", "env_info", "[", "'OpenCV'", "]", "=", "cv2", ".", "__version__", "\n", "\n", "env_info", "[", "'MMCV'", "]", "=", "mmcv", ".", "__version__", "\n", "env_info", "[", "'MMDetection'", "]", "=", "mmdet", ".", "__version__", "\n", "from", "mmdet", ".", "ops", "import", "get_compiler_version", ",", "get_compiling_cuda_version", "\n", "env_info", "[", "'MMDetection Compiler'", "]", "=", "get_compiler_version", "(", ")", "\n", "env_info", "[", "'MMDetection CUDA Compiler'", "]", "=", "get_compiling_cuda_version", "(", ")", "\n", "return", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.weight_init.bias_init_with_prob": [[4, 8], ["float", "numpy.log"], "function", ["None"], ["def", "bias_init_with_prob", "(", "prior_prob", ")", ":", "\n", "    ", "\"\"\" initialize conv/fc bias value according to giving probablity\"\"\"", "\n", "bias_init", "=", "float", "(", "-", "np", ".", "log", "(", "(", "1", "-", "prior_prob", ")", "/", "prior_prob", ")", ")", "\n", "return", "bias_init", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.dist_utils.DistOptimizerHook.__init__": [[46, 50], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "grad_clip", "=", "None", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "grad_clip", "=", "grad_clip", "\n", "self", ".", "coalesce", "=", "coalesce", "\n", "self", ".", "bucket_size_mb", "=", "bucket_size_mb", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.dist_utils.DistOptimizerHook.after_train_iter": [[51, 57], ["runner.optimizer.zero_grad", "runner.outputs[].backward", "runner.optimizer.step", "dist_utils.DistOptimizerHook.clip_grads", "runner.model.parameters"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFEFunction.backward"], ["", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "runner", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "runner", ".", "outputs", "[", "'loss'", "]", ".", "backward", "(", ")", "\n", "if", "self", ".", "grad_clip", "is", "not", "None", ":", "\n", "            ", "self", ".", "clip_grads", "(", "runner", ".", "model", ".", "parameters", "(", ")", ")", "\n", "", "runner", ".", "optimizer", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.dist_utils._allreduce_coalesced": [[9, 29], ["torch._utils._take_tensors", "collections.OrderedDict", "buckets.values.values", "torch._utils._flatten_dense_tensors", "torch.all_reduce", "torch._utils._flatten_dense_tensors.div_", "zip", "tensor.type", "buckets[].append", "torch._utils._unflatten_dense_tensors", "tensor.copy_"], "function", ["None"], ["def", "_allreduce_coalesced", "(", "tensors", ",", "world_size", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "    ", "if", "bucket_size_mb", ">", "0", ":", "\n", "        ", "bucket_size_bytes", "=", "bucket_size_mb", "*", "1024", "*", "1024", "\n", "buckets", "=", "_take_tensors", "(", "tensors", ",", "bucket_size_bytes", ")", "\n", "", "else", ":", "\n", "        ", "buckets", "=", "OrderedDict", "(", ")", "\n", "for", "tensor", "in", "tensors", ":", "\n", "            ", "tp", "=", "tensor", ".", "type", "(", ")", "\n", "if", "tp", "not", "in", "buckets", ":", "\n", "                ", "buckets", "[", "tp", "]", "=", "[", "]", "\n", "", "buckets", "[", "tp", "]", ".", "append", "(", "tensor", ")", "\n", "", "buckets", "=", "buckets", ".", "values", "(", ")", "\n", "\n", "", "for", "bucket", "in", "buckets", ":", "\n", "        ", "flat_tensors", "=", "_flatten_dense_tensors", "(", "bucket", ")", "\n", "dist", ".", "all_reduce", "(", "flat_tensors", ")", "\n", "flat_tensors", ".", "div_", "(", "world_size", ")", "\n", "for", "tensor", ",", "synced", "in", "zip", "(", "\n", "bucket", ",", "_unflatten_dense_tensors", "(", "flat_tensors", ",", "bucket", ")", ")", ":", "\n", "            ", "tensor", ".", "copy_", "(", "synced", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.dist_utils.allreduce_grads": [[31, 42], ["torch.get_world_size", "dist_utils._allreduce_coalesced", "torch.all_reduce", "tensor.div_"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.dist_utils._allreduce_coalesced"], ["", "", "", "def", "allreduce_grads", "(", "params", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "    ", "grads", "=", "[", "\n", "param", ".", "grad", ".", "data", "for", "param", "in", "params", "\n", "if", "param", ".", "requires_grad", "and", "param", ".", "grad", "is", "not", "None", "\n", "]", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "coalesce", ":", "\n", "        ", "_allreduce_coalesced", "(", "grads", ",", "world_size", ",", "bucket_size_mb", ")", "\n", "", "else", ":", "\n", "        ", "for", "tensor", "in", "grads", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "tensor", ".", "div_", "(", "world_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.tensor2imgs": [[8, 19], ["tensor.size", "numpy.array", "numpy.array", "range", "tensor[].cpu().numpy().transpose", "mmcv.imdenormalize().astype", "imgs.append", "numpy.ascontiguousarray", "tensor[].cpu().numpy", "mmcv.imdenormalize", "tensor[].cpu"], "function", ["None"], ["def", "tensor2imgs", "(", "tensor", ",", "mean", "=", "(", "0", ",", "0", ",", "0", ")", ",", "std", "=", "(", "1", ",", "1", ",", "1", ")", ",", "to_rgb", "=", "True", ")", ":", "\n", "    ", "num_imgs", "=", "tensor", ".", "size", "(", "0", ")", "\n", "mean", "=", "np", ".", "array", "(", "mean", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "std", "=", "np", ".", "array", "(", "std", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "imgs", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "num_imgs", ")", ":", "\n", "        ", "img", "=", "tensor", "[", "img_id", ",", "...", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "img", "=", "mmcv", ".", "imdenormalize", "(", "\n", "img", ",", "mean", ",", "std", ",", "to_bgr", "=", "to_rgb", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imgs", ".", "append", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.multi_apply": [[21, 25], ["six.moves.map", "tuple", "functools.partial", "six.moves.map", "six.moves.zip"], "function", ["None"], ["", "def", "multi_apply", "(", "func", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "pfunc", "=", "partial", "(", "func", ",", "**", "kwargs", ")", "if", "kwargs", "else", "func", "\n", "map_results", "=", "map", "(", "pfunc", ",", "*", "args", ")", "\n", "return", "tuple", "(", "map", "(", "list", ",", "zip", "(", "*", "map_results", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.unmap": [[27, 38], ["data.dim", "data.new_full", "data.new_full", "data.size"], "function", ["None"], ["", "def", "unmap", "(", "data", ",", "count", ",", "inds", ",", "fill", "=", "0", ")", ":", "\n", "    ", "\"\"\" Unmap a subset of item (data) back to the original set of items (of\n    size count) \"\"\"", "\n", "if", "data", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "ret", "=", "data", ".", "new_full", "(", "(", "count", ",", ")", ",", "fill", ")", "\n", "ret", "[", "inds", "]", "=", "data", "\n", "", "else", ":", "\n", "        ", "new_size", "=", "(", "count", ",", ")", "+", "data", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "ret", "=", "data", ".", "new_full", "(", "new_size", ",", "fill", ")", "\n", "ret", "[", "inds", ",", ":", "]", "=", "data", "\n", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset.__init__": [[37, 83], ["custom.CustomDataset.load_annotations", "pipelines.Compose", "custom.CustomDataset.load_proposals", "custom.CustomDataset._filter_imgs", "custom.CustomDataset._set_group_flag", "os.isabs", "os.join", "os.join", "os.join", "os.join", "os.isabs", "os.isabs", "os.isabs"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.xml_style.XMLDataset.load_annotations", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset.load_proposals", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.cityscapes.CityscapesDataset._filter_imgs", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset._set_group_flag"], ["def", "__init__", "(", "self", ",", "\n", "ann_file", ",", "\n", "pipeline", ",", "\n", "data_root", "=", "None", ",", "\n", "img_prefix", "=", "''", ",", "\n", "seg_prefix", "=", "None", ",", "\n", "proposal_file", "=", "None", ",", "\n", "test_mode", "=", "False", ",", "\n", "filter_empty_gt", "=", "True", ")", ":", "\n", "        ", "self", ".", "ann_file", "=", "ann_file", "\n", "self", ".", "data_root", "=", "data_root", "\n", "self", ".", "img_prefix", "=", "img_prefix", "\n", "self", ".", "seg_prefix", "=", "seg_prefix", "\n", "self", ".", "proposal_file", "=", "proposal_file", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "self", ".", "filter_empty_gt", "=", "filter_empty_gt", "\n", "\n", "# join paths if data_root is specified", "\n", "if", "self", ".", "data_root", "is", "not", "None", ":", "\n", "            ", "if", "not", "osp", ".", "isabs", "(", "self", ".", "ann_file", ")", ":", "\n", "                ", "self", ".", "ann_file", "=", "osp", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "ann_file", ")", "\n", "", "if", "not", "(", "self", ".", "img_prefix", "is", "None", "or", "osp", ".", "isabs", "(", "self", ".", "img_prefix", ")", ")", ":", "\n", "                ", "self", ".", "img_prefix", "=", "osp", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "img_prefix", ")", "\n", "", "if", "not", "(", "self", ".", "seg_prefix", "is", "None", "or", "osp", ".", "isabs", "(", "self", ".", "seg_prefix", ")", ")", ":", "\n", "                ", "self", ".", "seg_prefix", "=", "osp", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "seg_prefix", ")", "\n", "", "if", "not", "(", "self", ".", "proposal_file", "is", "None", "\n", "or", "osp", ".", "isabs", "(", "self", ".", "proposal_file", ")", ")", ":", "\n", "                ", "self", ".", "proposal_file", "=", "osp", ".", "join", "(", "self", ".", "data_root", ",", "\n", "self", ".", "proposal_file", ")", "\n", "# load annotations (and proposals)", "\n", "", "", "self", ".", "img_infos", "=", "self", ".", "load_annotations", "(", "self", ".", "ann_file", ")", "\n", "if", "self", ".", "proposal_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "proposals", "=", "self", ".", "load_proposals", "(", "self", ".", "proposal_file", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "proposals", "=", "None", "\n", "# filter images too small", "\n", "", "if", "not", "test_mode", ":", "\n", "            ", "valid_inds", "=", "self", ".", "_filter_imgs", "(", ")", "\n", "self", ".", "img_infos", "=", "[", "self", ".", "img_infos", "[", "i", "]", "for", "i", "in", "valid_inds", "]", "\n", "if", "self", ".", "proposals", "is", "not", "None", ":", "\n", "                ", "self", ".", "proposals", "=", "[", "self", ".", "proposals", "[", "i", "]", "for", "i", "in", "valid_inds", "]", "\n", "# set group flag for the sampler", "\n", "", "", "if", "not", "self", ".", "test_mode", ":", "\n", "            ", "self", ".", "_set_group_flag", "(", ")", "\n", "# processing pipeline", "\n", "", "self", ".", "pipeline", "=", "Compose", "(", "pipeline", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset.__len__": [[84, 86], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset.load_annotations": [[87, 89], ["mmcv.load"], "methods", ["None"], ["", "def", "load_annotations", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "return", "mmcv", ".", "load", "(", "ann_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset.load_proposals": [[90, 92], ["mmcv.load"], "methods", ["None"], ["", "def", "load_proposals", "(", "self", ",", "proposal_file", ")", ":", "\n", "        ", "return", "mmcv", ".", "load", "(", "proposal_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset.get_ann_info": [[93, 95], ["None"], "methods", ["None"], ["", "def", "get_ann_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "img_infos", "[", "idx", "]", "[", "'ann'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset.pre_pipeline": [[96, 103], ["None"], "methods", ["None"], ["", "def", "pre_pipeline", "(", "self", ",", "results", ")", ":", "\n", "        ", "results", "[", "'img_prefix'", "]", "=", "self", ".", "img_prefix", "\n", "results", "[", "'seg_prefix'", "]", "=", "self", ".", "seg_prefix", "\n", "results", "[", "'proposal_file'", "]", "=", "self", ".", "proposal_file", "\n", "results", "[", "'bbox_fields'", "]", "=", "[", "]", "\n", "results", "[", "'mask_fields'", "]", "=", "[", "]", "\n", "results", "[", "'seg_fields'", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset._filter_imgs": [[104, 111], ["enumerate", "min", "valid_inds.append"], "methods", ["None"], ["", "def", "_filter_imgs", "(", "self", ",", "min_size", "=", "32", ")", ":", "\n", "        ", "\"\"\"Filter images too small.\"\"\"", "\n", "valid_inds", "=", "[", "]", "\n", "for", "i", ",", "img_info", "in", "enumerate", "(", "self", ".", "img_infos", ")", ":", "\n", "            ", "if", "min", "(", "img_info", "[", "'width'", "]", ",", "img_info", "[", "'height'", "]", ")", ">=", "min_size", ":", "\n", "                ", "valid_inds", ".", "append", "(", "i", ")", "\n", "", "", "return", "valid_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset._set_group_flag": [[112, 123], ["numpy.zeros", "range", "len", "len"], "methods", ["None"], ["", "def", "_set_group_flag", "(", "self", ")", ":", "\n", "        ", "\"\"\"Set flag according to image aspect ratio.\n\n        Images with aspect ratio greater than 1 will be set as group 1,\n        otherwise group 0.\n        \"\"\"", "\n", "self", ".", "flag", "=", "np", ".", "zeros", "(", "len", "(", "self", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "img_info", "=", "self", ".", "img_infos", "[", "i", "]", "\n", "if", "img_info", "[", "'width'", "]", "/", "img_info", "[", "'height'", "]", ">", "1", ":", "\n", "                ", "self", ".", "flag", "[", "i", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset._rand_another": [[124, 127], ["numpy.random.choice", "numpy.where"], "methods", ["None"], ["", "", "", "def", "_rand_another", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pool", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "self", ".", "flag", "[", "idx", "]", ")", "[", "0", "]", "\n", "return", "np", ".", "random", ".", "choice", "(", "pool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset.__getitem__": [[128, 137], ["custom.CustomDataset.prepare_test_img", "custom.CustomDataset.prepare_train_img", "custom.CustomDataset._rand_another"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset.prepare_test_img", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset.prepare_train_img", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset._rand_another"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "test_mode", ":", "\n", "            ", "return", "self", ".", "prepare_test_img", "(", "idx", ")", "\n", "", "while", "True", ":", "\n", "            ", "data", "=", "self", ".", "prepare_train_img", "(", "idx", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "idx", "=", "self", ".", "_rand_another", "(", "idx", ")", "\n", "continue", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset.prepare_train_img": [[138, 146], ["custom.CustomDataset.get_ann_info", "dict", "custom.CustomDataset.pre_pipeline", "custom.CustomDataset.pipeline"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.xml_style.XMLDataset.get_ann_info", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset.pre_pipeline"], ["", "", "def", "prepare_train_img", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_info", "=", "self", ".", "img_infos", "[", "idx", "]", "\n", "ann_info", "=", "self", ".", "get_ann_info", "(", "idx", ")", "\n", "results", "=", "dict", "(", "img_info", "=", "img_info", ",", "ann_info", "=", "ann_info", ")", "\n", "if", "self", ".", "proposals", "is", "not", "None", ":", "\n", "            ", "results", "[", "'proposals'", "]", "=", "self", ".", "proposals", "[", "idx", "]", "\n", "", "self", ".", "pre_pipeline", "(", "results", ")", "\n", "return", "self", ".", "pipeline", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset.prepare_test_img": [[147, 154], ["dict", "custom.CustomDataset.pre_pipeline", "custom.CustomDataset.pipeline"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset.pre_pipeline"], ["", "def", "prepare_test_img", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_info", "=", "self", ".", "img_infos", "[", "idx", "]", "\n", "results", "=", "dict", "(", "img_info", "=", "img_info", ")", "\n", "if", "self", ".", "proposals", "is", "not", "None", ":", "\n", "            ", "results", "[", "'proposals'", "]", "=", "self", ".", "proposals", "[", "idx", "]", "\n", "", "self", ".", "pre_pipeline", "(", "results", ")", "\n", "return", "self", ".", "pipeline", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset.format_results": [[155, 157], ["None"], "methods", ["None"], ["", "def", "format_results", "(", "self", ",", "results", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.custom.CustomDataset.evaluate": [[158, 214], ["isinstance", "KeyError", "custom.CustomDataset.get_ann_info", "isinstance", "mmdet.core.eval_map", "len", "range", "isinstance", "mmdet.core.eval_recalls", "enumerate", "len", "enumerate", "mmdet.core.eval_recalls.mean", "enumerate"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.xml_style.XMLDataset.get_ann_info", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.mean_ap.eval_map", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.recall.eval_recalls"], ["", "def", "evaluate", "(", "self", ",", "\n", "results", ",", "\n", "metric", "=", "'mAP'", ",", "\n", "logger", "=", "None", ",", "\n", "proposal_nums", "=", "(", "100", ",", "300", ",", "1000", ")", ",", "\n", "iou_thr", "=", "0.5", ",", "\n", "scale_ranges", "=", "None", ")", ":", "\n", "        ", "\"\"\"Evaluate the dataset.\n\n        Args:\n            results (list): Testing results of the dataset.\n            metric (str | list[str]): Metrics to be evaluated.\n            logger (logging.Logger | None | str): Logger used for printing\n                related information during evaluation. Default: None.\n            proposal_nums (Sequence[int]): Proposal number used for evaluating\n                recalls, such as recall@100, recall@1000.\n                Default: (100, 300, 1000).\n            iou_thr (float | list[float]): IoU threshold. It must be a float\n                when evaluating mAP, and can be a list when evaluating recall.\n                Default: 0.5.\n            scale_ranges (list[tuple] | None): Scale ranges for evaluating mAP.\n                Default: None.\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "metric", ",", "str", ")", ":", "\n", "            ", "assert", "len", "(", "metric", ")", "==", "1", "\n", "metric", "=", "metric", "[", "0", "]", "\n", "", "allowed_metrics", "=", "[", "'mAP'", ",", "'recall'", "]", "\n", "if", "metric", "not", "in", "allowed_metrics", ":", "\n", "            ", "raise", "KeyError", "(", "'metric {} is not supported'", ".", "format", "(", "metric", ")", ")", "\n", "", "annotations", "=", "[", "self", ".", "get_ann_info", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", "]", "\n", "eval_results", "=", "{", "}", "\n", "if", "metric", "==", "'mAP'", ":", "\n", "            ", "assert", "isinstance", "(", "iou_thr", ",", "float", ")", "\n", "mean_ap", ",", "_", "=", "eval_map", "(", "\n", "results", ",", "\n", "annotations", ",", "\n", "scale_ranges", "=", "scale_ranges", ",", "\n", "iou_thr", "=", "iou_thr", ",", "\n", "dataset", "=", "self", ".", "CLASSES", ",", "\n", "logger", "=", "logger", ")", "\n", "eval_results", "[", "'mAP'", "]", "=", "mean_ap", "\n", "", "elif", "metric", "==", "'recall'", ":", "\n", "            ", "gt_bboxes", "=", "[", "ann", "[", "'bboxes'", "]", "for", "ann", "in", "annotations", "]", "\n", "if", "isinstance", "(", "iou_thr", ",", "float", ")", ":", "\n", "                ", "iou_thr", "=", "[", "iou_thr", "]", "\n", "", "recalls", "=", "eval_recalls", "(", "\n", "gt_bboxes", ",", "results", ",", "proposal_nums", ",", "iou_thr", ",", "logger", "=", "logger", ")", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "proposal_nums", ")", ":", "\n", "                ", "for", "j", ",", "iou", "in", "enumerate", "(", "iou_thr", ")", ":", "\n", "                    ", "eval_results", "[", "'recall@{}@{}'", ".", "format", "(", "num", ",", "iou", ")", "]", "=", "recalls", "[", "i", ",", "\n", "j", "]", "\n", "", "", "if", "recalls", ".", "shape", "[", "1", "]", ">", "1", ":", "\n", "                ", "ar", "=", "recalls", ".", "mean", "(", "axis", "=", "1", ")", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "proposal_nums", ")", ":", "\n", "                    ", "eval_results", "[", "'AR@{}'", ".", "format", "(", "num", ")", "]", "=", "ar", "[", "i", "]", "\n", "", "", "", "return", "eval_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset.load_annotations": [[34, 48], ["pycocotools.coco.COCO", "coco.CocoDataset.coco.getCatIds", "coco.CocoDataset.coco.getImgIds", "img_infos.append", "enumerate", "coco.CocoDataset.coco.loadImgs"], "methods", ["None"], ["def", "load_annotations", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "self", ".", "coco", "=", "COCO", "(", "ann_file", ")", "\n", "self", ".", "cat_ids", "=", "self", ".", "coco", ".", "getCatIds", "(", ")", "\n", "self", ".", "cat2label", "=", "{", "\n", "cat_id", ":", "i", "+", "1", "\n", "for", "i", ",", "cat_id", "in", "enumerate", "(", "self", ".", "cat_ids", ")", "\n", "}", "\n", "self", ".", "img_ids", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "img_infos", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "img_ids", ":", "\n", "            ", "info", "=", "self", ".", "coco", ".", "loadImgs", "(", "[", "i", "]", ")", "[", "0", "]", "\n", "info", "[", "'filename'", "]", "=", "info", "[", "'file_name'", "]", "\n", "img_infos", ".", "append", "(", "info", ")", "\n", "", "return", "img_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset.get_ann_info": [[49, 54], ["coco.CocoDataset.coco.getAnnIds", "coco.CocoDataset.coco.loadAnns", "coco.CocoDataset._parse_ann_info"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.cityscapes.CityscapesDataset._parse_ann_info"], ["", "def", "get_ann_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "img_infos", "[", "idx", "]", "[", "'id'", "]", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "ann_info", "=", "self", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "return", "self", ".", "_parse_ann_info", "(", "self", ".", "img_infos", "[", "idx", "]", ",", "ann_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset._filter_imgs": [[55, 65], ["set", "enumerate", "min", "valid_inds.append", "coco.CocoDataset.coco.anns.values"], "methods", ["None"], ["", "def", "_filter_imgs", "(", "self", ",", "min_size", "=", "32", ")", ":", "\n", "        ", "\"\"\"Filter images too small or without ground truths.\"\"\"", "\n", "valid_inds", "=", "[", "]", "\n", "ids_with_ann", "=", "set", "(", "_", "[", "'image_id'", "]", "for", "_", "in", "self", ".", "coco", ".", "anns", ".", "values", "(", ")", ")", "\n", "for", "i", ",", "img_info", "in", "enumerate", "(", "self", ".", "img_infos", ")", ":", "\n", "            ", "if", "self", ".", "filter_empty_gt", "and", "self", ".", "img_ids", "[", "i", "]", "not", "in", "ids_with_ann", ":", "\n", "                ", "continue", "\n", "", "if", "min", "(", "img_info", "[", "'width'", "]", ",", "img_info", "[", "'height'", "]", ")", ">=", "min_size", ":", "\n", "                ", "valid_inds", ".", "append", "(", "i", ")", "\n", "", "", "return", "valid_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset._parse_ann_info": [[66, 119], ["enumerate", "img_info[].replace", "dict", "dict.get", "dict.get", "numpy.array", "numpy.array", "numpy.zeros", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros.append", "numpy.zeros.append", "numpy.array.append", "gt_masks_ann.append"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "def", "_parse_ann_info", "(", "self", ",", "img_info", ",", "ann_info", ")", ":", "\n", "        ", "\"\"\"Parse bbox and mask annotation.\n\n        Args:\n            ann_info (list[dict]): Annotation info of an image.\n            with_mask (bool): Whether to parse mask annotations.\n\n        Returns:\n            dict: A dict containing the following keys: bboxes, bboxes_ignore,\n                labels, masks, seg_map. \"masks\" are raw annotations and not\n                decoded into binary masks.\n        \"\"\"", "\n", "gt_bboxes", "=", "[", "]", "\n", "gt_labels", "=", "[", "]", "\n", "gt_bboxes_ignore", "=", "[", "]", "\n", "gt_masks_ann", "=", "[", "]", "\n", "\n", "for", "i", ",", "ann", "in", "enumerate", "(", "ann_info", ")", ":", "\n", "            ", "if", "ann", ".", "get", "(", "'ignore'", ",", "False", ")", ":", "\n", "                ", "continue", "\n", "", "x1", ",", "y1", ",", "w", ",", "h", "=", "ann", "[", "'bbox'", "]", "\n", "if", "ann", "[", "'area'", "]", "<=", "0", "or", "w", "<", "1", "or", "h", "<", "1", ":", "\n", "                ", "continue", "\n", "", "bbox", "=", "[", "x1", ",", "y1", ",", "x1", "+", "w", "-", "1", ",", "y1", "+", "h", "-", "1", "]", "\n", "if", "ann", ".", "get", "(", "'iscrowd'", ",", "False", ")", ":", "\n", "                ", "gt_bboxes_ignore", ".", "append", "(", "bbox", ")", "\n", "", "else", ":", "\n", "                ", "gt_bboxes", ".", "append", "(", "bbox", ")", "\n", "gt_labels", ".", "append", "(", "self", ".", "cat2label", "[", "ann", "[", "'category_id'", "]", "]", ")", "\n", "gt_masks_ann", ".", "append", "(", "ann", "[", "'segmentation'", "]", ")", "\n", "\n", "", "", "if", "gt_bboxes", ":", "\n", "            ", "gt_bboxes", "=", "np", ".", "array", "(", "gt_bboxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_labels", "=", "np", ".", "array", "(", "gt_labels", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "else", ":", "\n", "            ", "gt_bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_labels", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "", "if", "gt_bboxes_ignore", ":", "\n", "            ", "gt_bboxes_ignore", "=", "np", ".", "array", "(", "gt_bboxes_ignore", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "gt_bboxes_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "seg_map", "=", "img_info", "[", "'filename'", "]", ".", "replace", "(", "'jpg'", ",", "'png'", ")", "\n", "\n", "ann", "=", "dict", "(", "\n", "bboxes", "=", "gt_bboxes", ",", "\n", "labels", "=", "gt_labels", ",", "\n", "bboxes_ignore", "=", "gt_bboxes_ignore", ",", "\n", "masks", "=", "gt_masks_ann", ",", "\n", "seg_map", "=", "seg_map", ")", "\n", "\n", "return", "ann", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset.xyxy2xywh": [[120, 127], ["bbox.tolist"], "methods", ["None"], ["", "def", "xyxy2xywh", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "_bbox", "=", "bbox", ".", "tolist", "(", ")", "\n", "return", "[", "\n", "_bbox", "[", "0", "]", ",", "\n", "_bbox", "[", "1", "]", ",", "\n", "_bbox", "[", "2", "]", "-", "_bbox", "[", "0", "]", "+", "1", ",", "\n", "_bbox", "[", "3", "]", "-", "_bbox", "[", "1", "]", "+", "1", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset._proposal2json": [[129, 142], ["range", "len", "range", "dict", "coco.CocoDataset.xyxy2xywh", "float", "json_results.append"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset.xyxy2xywh"], ["", "def", "_proposal2json", "(", "self", ",", "results", ")", ":", "\n", "        ", "json_results", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "img_id", "=", "self", ".", "img_ids", "[", "idx", "]", "\n", "bboxes", "=", "results", "[", "idx", "]", "\n", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'image_id'", "]", "=", "img_id", "\n", "data", "[", "'bbox'", "]", "=", "self", ".", "xyxy2xywh", "(", "bboxes", "[", "i", "]", ")", "\n", "data", "[", "'score'", "]", "=", "float", "(", "bboxes", "[", "i", "]", "[", "4", "]", ")", "\n", "data", "[", "'category_id'", "]", "=", "1", "\n", "json_results", ".", "append", "(", "data", ")", "\n", "", "", "return", "json_results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset._det2json": [[143, 158], ["range", "len", "range", "len", "range", "dict", "coco.CocoDataset.xyxy2xywh", "float", "json_results.append"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset.xyxy2xywh"], ["", "def", "_det2json", "(", "self", ",", "results", ")", ":", "\n", "        ", "json_results", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "img_id", "=", "self", ".", "img_ids", "[", "idx", "]", "\n", "result", "=", "results", "[", "idx", "]", "\n", "for", "label", "in", "range", "(", "len", "(", "result", ")", ")", ":", "\n", "                ", "bboxes", "=", "result", "[", "label", "]", "\n", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'image_id'", "]", "=", "img_id", "\n", "data", "[", "'bbox'", "]", "=", "self", ".", "xyxy2xywh", "(", "bboxes", "[", "i", "]", ")", "\n", "data", "[", "'score'", "]", "=", "float", "(", "bboxes", "[", "i", "]", "[", "4", "]", ")", "\n", "data", "[", "'category_id'", "]", "=", "self", ".", "cat_ids", "[", "label", "]", "\n", "json_results", ".", "append", "(", "data", ")", "\n", "", "", "", "return", "json_results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset._segm2json": [[159, 195], ["range", "len", "range", "len", "range", "isinstance", "range", "dict", "coco.CocoDataset.xyxy2xywh", "float", "bbox_json_results.append", "dict", "coco.CocoDataset.xyxy2xywh", "float", "isinstance", "segm_json_results.append", "[].decode"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset.xyxy2xywh", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset.xyxy2xywh"], ["", "def", "_segm2json", "(", "self", ",", "results", ")", ":", "\n", "        ", "bbox_json_results", "=", "[", "]", "\n", "segm_json_results", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "img_id", "=", "self", ".", "img_ids", "[", "idx", "]", "\n", "det", ",", "seg", "=", "results", "[", "idx", "]", "\n", "for", "label", "in", "range", "(", "len", "(", "det", ")", ")", ":", "\n", "# bbox results", "\n", "                ", "bboxes", "=", "det", "[", "label", "]", "\n", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'image_id'", "]", "=", "img_id", "\n", "data", "[", "'bbox'", "]", "=", "self", ".", "xyxy2xywh", "(", "bboxes", "[", "i", "]", ")", "\n", "data", "[", "'score'", "]", "=", "float", "(", "bboxes", "[", "i", "]", "[", "4", "]", ")", "\n", "data", "[", "'category_id'", "]", "=", "self", ".", "cat_ids", "[", "label", "]", "\n", "bbox_json_results", ".", "append", "(", "data", ")", "\n", "\n", "# segm results", "\n", "# some detectors use different scores for bbox and mask", "\n", "", "if", "isinstance", "(", "seg", ",", "tuple", ")", ":", "\n", "                    ", "segms", "=", "seg", "[", "0", "]", "[", "label", "]", "\n", "mask_score", "=", "seg", "[", "1", "]", "[", "label", "]", "\n", "", "else", ":", "\n", "                    ", "segms", "=", "seg", "[", "label", "]", "\n", "mask_score", "=", "[", "bbox", "[", "4", "]", "for", "bbox", "in", "bboxes", "]", "\n", "", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'image_id'", "]", "=", "img_id", "\n", "data", "[", "'bbox'", "]", "=", "self", ".", "xyxy2xywh", "(", "bboxes", "[", "i", "]", ")", "\n", "data", "[", "'score'", "]", "=", "float", "(", "mask_score", "[", "i", "]", ")", "\n", "data", "[", "'category_id'", "]", "=", "self", ".", "cat_ids", "[", "label", "]", "\n", "if", "isinstance", "(", "segms", "[", "i", "]", "[", "'counts'", "]", ",", "bytes", ")", ":", "\n", "                        ", "segms", "[", "i", "]", "[", "'counts'", "]", "=", "segms", "[", "i", "]", "[", "'counts'", "]", ".", "decode", "(", ")", "\n", "", "data", "[", "'segmentation'", "]", "=", "segms", "[", "i", "]", "\n", "segm_json_results", ".", "append", "(", "data", ")", "\n", "", "", "", "return", "bbox_json_results", ",", "segm_json_results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset.results2json": [[196, 238], ["dict", "isinstance", "coco.CocoDataset._det2json", "mmcv.dump", "isinstance", "coco.CocoDataset._segm2json", "mmcv.dump", "mmcv.dump", "isinstance", "coco.CocoDataset._proposal2json", "mmcv.dump", "TypeError"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset._det2json", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset._segm2json", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset._proposal2json"], ["", "def", "results2json", "(", "self", ",", "results", ",", "outfile_prefix", ")", ":", "\n", "        ", "\"\"\"Dump the detection results to a json file.\n\n        There are 3 types of results: proposals, bbox predictions, mask\n        predictions, and they have different data types. This method will\n        automatically recognize the type, and dump them to json files.\n\n        Args:\n            results (list[list | tuple | ndarray]): Testing results of the\n                dataset.\n            outfile_prefix (str): The filename prefix of the json files. If the\n                prefix is \"somepath/xxx\", the json files will be named\n                \"somepath/xxx.bbox.json\", \"somepath/xxx.segm.json\",\n                \"somepath/xxx.proposal.json\".\n\n        Returns:\n            dict[str: str]: Possible keys are \"bbox\", \"segm\", \"proposal\", and\n                values are corresponding filenames.\n        \"\"\"", "\n", "result_files", "=", "dict", "(", ")", "\n", "if", "isinstance", "(", "results", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "json_results", "=", "self", ".", "_det2json", "(", "results", ")", "\n", "result_files", "[", "'bbox'", "]", "=", "'{}.{}.json'", ".", "format", "(", "outfile_prefix", ",", "'bbox'", ")", "\n", "result_files", "[", "'proposal'", "]", "=", "'{}.{}.json'", ".", "format", "(", "\n", "outfile_prefix", ",", "'bbox'", ")", "\n", "mmcv", ".", "dump", "(", "json_results", ",", "result_files", "[", "'bbox'", "]", ")", "\n", "", "elif", "isinstance", "(", "results", "[", "0", "]", ",", "tuple", ")", ":", "\n", "            ", "json_results", "=", "self", ".", "_segm2json", "(", "results", ")", "\n", "result_files", "[", "'bbox'", "]", "=", "'{}.{}.json'", ".", "format", "(", "outfile_prefix", ",", "'bbox'", ")", "\n", "result_files", "[", "'proposal'", "]", "=", "'{}.{}.json'", ".", "format", "(", "\n", "outfile_prefix", ",", "'bbox'", ")", "\n", "result_files", "[", "'segm'", "]", "=", "'{}.{}.json'", ".", "format", "(", "outfile_prefix", ",", "'segm'", ")", "\n", "mmcv", ".", "dump", "(", "json_results", "[", "0", "]", ",", "result_files", "[", "'bbox'", "]", ")", "\n", "mmcv", ".", "dump", "(", "json_results", "[", "1", "]", ",", "result_files", "[", "'segm'", "]", ")", "\n", "", "elif", "isinstance", "(", "results", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "json_results", "=", "self", ".", "_proposal2json", "(", "results", ")", "\n", "result_files", "[", "'proposal'", "]", "=", "'{}.{}.json'", ".", "format", "(", "\n", "outfile_prefix", ",", "'proposal'", ")", "\n", "mmcv", ".", "dump", "(", "json_results", ",", "result_files", "[", "'proposal'", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'invalid type of results'", ")", "\n", "", "return", "result_files", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset.fast_eval_recall": [[239, 262], ["range", "mmdet.core.eval_recalls", "mmdet.core.eval_recalls.mean", "len", "coco.CocoDataset.coco.getAnnIds", "coco.CocoDataset.coco.loadAnns", "numpy.array", "gt_bboxes.append", "len", "gt_bboxes.append", "numpy.zeros.append", "numpy.zeros", "numpy.zeros", "ann.get"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.recall.eval_recalls", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "def", "fast_eval_recall", "(", "self", ",", "results", ",", "proposal_nums", ",", "iou_thrs", ",", "logger", "=", "None", ")", ":", "\n", "        ", "gt_bboxes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "img_ids", ")", ")", ":", "\n", "            ", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "self", ".", "img_ids", "[", "i", "]", ")", "\n", "ann_info", "=", "self", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "if", "len", "(", "ann_info", ")", "==", "0", ":", "\n", "                ", "gt_bboxes", ".", "append", "(", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", ")", "\n", "continue", "\n", "", "bboxes", "=", "[", "]", "\n", "for", "ann", "in", "ann_info", ":", "\n", "                ", "if", "ann", ".", "get", "(", "'ignore'", ",", "False", ")", "or", "ann", "[", "'iscrowd'", "]", ":", "\n", "                    ", "continue", "\n", "", "x1", ",", "y1", ",", "w", ",", "h", "=", "ann", "[", "'bbox'", "]", "\n", "bboxes", ".", "append", "(", "[", "x1", ",", "y1", ",", "x1", "+", "w", "-", "1", ",", "y1", "+", "h", "-", "1", "]", ")", "\n", "", "bboxes", "=", "np", ".", "array", "(", "bboxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "", "gt_bboxes", ".", "append", "(", "bboxes", ")", "\n", "\n", "", "recalls", "=", "eval_recalls", "(", "\n", "gt_bboxes", ",", "results", ",", "proposal_nums", ",", "iou_thrs", ",", "logger", "=", "logger", ")", "\n", "ar", "=", "recalls", ".", "mean", "(", "axis", "=", "1", ")", "\n", "return", "ar", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset.format_results": [[263, 289], ["isinstance", "coco.CocoDataset.results2json", "len", "len", "len", "len", "tempfile.TemporaryDirectory", "os.join"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset.results2json"], ["", "def", "format_results", "(", "self", ",", "results", ",", "jsonfile_prefix", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Format the results to json (standard format for COCO evaluation).\n\n        Args:\n            results (list): Testing results of the dataset.\n            jsonfile_prefix (str | None): The prefix of json files. It includes\n                the file path and the prefix of filename, e.g., \"a/b/prefix\".\n                If not specified, a temp file will be created. Default: None.\n\n        Returns:\n            tuple: (result_files, tmp_dir), result_files is a dict containing\n                the json filepaths, tmp_dir is the temporal directory created\n                for saving json files when jsonfile_prefix is not specified.\n        \"\"\"", "\n", "assert", "isinstance", "(", "results", ",", "list", ")", ",", "'results must be a list'", "\n", "assert", "len", "(", "results", ")", "==", "len", "(", "self", ")", ",", "(", "\n", "'The length of results is not equal to the dataset len: {} != {}'", ".", "\n", "format", "(", "len", "(", "results", ")", ",", "len", "(", "self", ")", ")", ")", "\n", "\n", "if", "jsonfile_prefix", "is", "None", ":", "\n", "            ", "tmp_dir", "=", "tempfile", ".", "TemporaryDirectory", "(", ")", "\n", "jsonfile_prefix", "=", "osp", ".", "join", "(", "tmp_dir", ".", "name", ",", "'results'", ")", "\n", "", "else", ":", "\n", "            ", "tmp_dir", "=", "None", "\n", "", "result_files", "=", "self", ".", "results2json", "(", "results", ",", "jsonfile_prefix", ")", "\n", "return", "result_files", ",", "tmp_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset.evaluate": [[290, 393], ["numpy.arange", "coco.CocoDataset.format_results", "isinstance", "mmdet.utils.print_log", "pycocotools.cocoeval.COCOeval", "tmp_dir.cleanup", "KeyError", "coco.CocoDataset.fast_eval_recall", "enumerate", "mmdet.utils.print_log", "KeyError", "cocoGt.loadRes", "list", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "pycocotools.cocoeval.COCOeval.summarize", "enumerate", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "pycocotools.cocoeval.COCOeval.summarize", "range", "log_msg.append", "mmdet.utils.print_log", "float", "len", "float"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.cityscapes.CityscapesDataset.format_results", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.print_log", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset.fast_eval_recall", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.print_log", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.eval_hooks.EvalHook.evaluate", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.eval_hooks.EvalHook.evaluate", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.print_log"], ["", "def", "evaluate", "(", "self", ",", "\n", "results", ",", "\n", "metric", "=", "'bbox'", ",", "\n", "logger", "=", "None", ",", "\n", "jsonfile_prefix", "=", "None", ",", "\n", "classwise", "=", "False", ",", "\n", "proposal_nums", "=", "(", "100", ",", "300", ",", "1000", ")", ",", "\n", "iou_thrs", "=", "np", ".", "arange", "(", "0.5", ",", "0.96", ",", "0.05", ")", ")", ":", "\n", "        ", "\"\"\"Evaluation in COCO protocol.\n\n        Args:\n            results (list): Testing results of the dataset.\n            metric (str | list[str]): Metrics to be evaluated.\n            logger (logging.Logger | str | None): Logger used for printing\n                related information during evaluation. Default: None.\n            jsonfile_prefix (str | None): The prefix of json files. It includes\n                the file path and the prefix of filename, e.g., \"a/b/prefix\".\n                If not specified, a temp file will be created. Default: None.\n            classwise (bool): Whether to evaluating the AP for each class.\n            proposal_nums (Sequence[int]): Proposal number used for evaluating\n                recalls, such as recall@100, recall@1000.\n                Default: (100, 300, 1000).\n            iou_thrs (Sequence[float]): IoU threshold used for evaluating\n                recalls. If set to a list, the average recall of all IoUs will\n                also be computed. Default: 0.5.\n\n        Returns:\n            dict[str: float]\n        \"\"\"", "\n", "\n", "metrics", "=", "metric", "if", "isinstance", "(", "metric", ",", "list", ")", "else", "[", "metric", "]", "\n", "allowed_metrics", "=", "[", "'bbox'", ",", "'segm'", ",", "'proposal'", ",", "'proposal_fast'", "]", "\n", "for", "metric", "in", "metrics", ":", "\n", "            ", "if", "metric", "not", "in", "allowed_metrics", ":", "\n", "                ", "raise", "KeyError", "(", "'metric {} is not supported'", ".", "format", "(", "metric", ")", ")", "\n", "\n", "", "", "result_files", ",", "tmp_dir", "=", "self", ".", "format_results", "(", "results", ",", "jsonfile_prefix", ")", "\n", "\n", "eval_results", "=", "{", "}", "\n", "cocoGt", "=", "self", ".", "coco", "\n", "for", "metric", "in", "metrics", ":", "\n", "            ", "msg", "=", "'Evaluating {}...'", ".", "format", "(", "metric", ")", "\n", "if", "logger", "is", "None", ":", "\n", "                ", "msg", "=", "'\\n'", "+", "msg", "\n", "", "print_log", "(", "msg", ",", "logger", "=", "logger", ")", "\n", "\n", "if", "metric", "==", "'proposal_fast'", ":", "\n", "                ", "ar", "=", "self", ".", "fast_eval_recall", "(", "\n", "results", ",", "proposal_nums", ",", "iou_thrs", ",", "logger", "=", "'silent'", ")", "\n", "log_msg", "=", "[", "]", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "proposal_nums", ")", ":", "\n", "                    ", "eval_results", "[", "'AR@{}'", ".", "format", "(", "num", ")", "]", "=", "ar", "[", "i", "]", "\n", "log_msg", ".", "append", "(", "'\\nAR@{}\\t{:.4f}'", ".", "format", "(", "num", ",", "ar", "[", "i", "]", ")", ")", "\n", "", "log_msg", "=", "''", ".", "join", "(", "log_msg", ")", "\n", "print_log", "(", "log_msg", ",", "logger", "=", "logger", ")", "\n", "continue", "\n", "\n", "", "if", "metric", "not", "in", "result_files", ":", "\n", "                ", "raise", "KeyError", "(", "'{} is not in results'", ".", "format", "(", "metric", ")", ")", "\n", "", "try", ":", "\n", "                ", "cocoDt", "=", "cocoGt", ".", "loadRes", "(", "result_files", "[", "metric", "]", ")", "\n", "", "except", "IndexError", ":", "\n", "                ", "print_log", "(", "\n", "'The testing results of the whole dataset is empty.'", ",", "\n", "logger", "=", "logger", ",", "\n", "level", "=", "logging", ".", "ERROR", ")", "\n", "break", "\n", "\n", "", "iou_type", "=", "'bbox'", "if", "metric", "==", "'proposal'", "else", "metric", "\n", "cocoEval", "=", "COCOeval", "(", "cocoGt", ",", "cocoDt", ",", "iou_type", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "self", ".", "img_ids", "\n", "if", "metric", "==", "'proposal'", ":", "\n", "                ", "cocoEval", ".", "params", ".", "useCats", "=", "0", "\n", "cocoEval", ".", "params", ".", "maxDets", "=", "list", "(", "proposal_nums", ")", "\n", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "cocoEval", ".", "summarize", "(", ")", "\n", "metric_items", "=", "[", "\n", "'AR@100'", ",", "'AR@300'", ",", "'AR@1000'", ",", "'AR_s@1000'", ",", "'AR_m@1000'", ",", "\n", "'AR_l@1000'", "\n", "]", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "metric_items", ")", ":", "\n", "                    ", "val", "=", "float", "(", "'{:.3f}'", ".", "format", "(", "cocoEval", ".", "stats", "[", "i", "+", "6", "]", ")", ")", "\n", "eval_results", "[", "item", "]", "=", "val", "\n", "", "", "else", ":", "\n", "                ", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "cocoEval", ".", "summarize", "(", ")", "\n", "if", "classwise", ":", "# Compute per-category AP", "\n", "                    ", "pass", "# TODO", "\n", "", "metric_items", "=", "[", "\n", "'mAP'", ",", "'mAP_50'", ",", "'mAP_75'", ",", "'mAP_s'", ",", "'mAP_m'", ",", "'mAP_l'", "\n", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "metric_items", ")", ")", ":", "\n", "                    ", "key", "=", "'{}_{}'", ".", "format", "(", "metric", ",", "metric_items", "[", "i", "]", ")", "\n", "val", "=", "float", "(", "'{:.3f}'", ".", "format", "(", "cocoEval", ".", "stats", "[", "i", "]", ")", ")", "\n", "eval_results", "[", "key", "]", "=", "val", "\n", "", "eval_results", "[", "'{}_mAP_copypaste'", ".", "format", "(", "metric", ")", "]", "=", "(", "\n", "'{ap[0]:.3f} {ap[1]:.3f} {ap[2]:.3f} {ap[3]:.3f} '", "\n", "'{ap[4]:.3f} {ap[5]:.3f}'", ")", ".", "format", "(", "ap", "=", "cocoEval", ".", "stats", "[", ":", "6", "]", ")", "\n", "", "", "if", "tmp_dir", "is", "not", "None", ":", "\n", "            ", "tmp_dir", ".", "cleanup", "(", ")", "\n", "", "return", "eval_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.cityscapes.CityscapesDataset._filter_imgs": [[24, 39], ["set", "enumerate", "cityscapes.CityscapesDataset.coco.getAnnIds", "cityscapes.CityscapesDataset.coco.loadAnns", "all", "min", "valid_inds.append", "cityscapes.CityscapesDataset.coco.anns.values"], "methods", ["None"], ["def", "_filter_imgs", "(", "self", ",", "min_size", "=", "32", ")", ":", "\n", "        ", "\"\"\"Filter images too small or without ground truths.\"\"\"", "\n", "valid_inds", "=", "[", "]", "\n", "ids_with_ann", "=", "set", "(", "_", "[", "'image_id'", "]", "for", "_", "in", "self", ".", "coco", ".", "anns", ".", "values", "(", ")", ")", "\n", "for", "i", ",", "img_info", "in", "enumerate", "(", "self", ".", "img_infos", ")", ":", "\n", "            ", "img_id", "=", "img_info", "[", "'id'", "]", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "ann_info", "=", "self", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "all_iscrowd", "=", "all", "(", "[", "_", "[", "'iscrowd'", "]", "for", "_", "in", "ann_info", "]", ")", "\n", "if", "self", ".", "filter_empty_gt", "and", "(", "self", ".", "img_ids", "[", "i", "]", "not", "in", "ids_with_ann", "\n", "or", "all_iscrowd", ")", ":", "\n", "                ", "continue", "\n", "", "if", "min", "(", "img_info", "[", "'width'", "]", ",", "img_info", "[", "'height'", "]", ")", ">=", "min_size", ":", "\n", "                ", "valid_inds", ".", "append", "(", "i", ")", "\n", "", "", "return", "valid_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.cityscapes.CityscapesDataset._parse_ann_info": [[40, 91], ["enumerate", "dict", "dict.get", "dict.get", "numpy.array", "numpy.array", "numpy.zeros", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros.append", "numpy.zeros.append", "numpy.array.append", "gt_masks_ann.append"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "def", "_parse_ann_info", "(", "self", ",", "img_info", ",", "ann_info", ")", ":", "\n", "        ", "\"\"\"Parse bbox and mask annotation.\n\n        Args:\n            img_info (dict): Image info of an image.\n            ann_info (list[dict]): Annotation info of an image.\n\n        Returns:\n            dict: A dict containing the following keys: bboxes, bboxes_ignore,\n                labels, masks, seg_map.\n                \"masks\" are already decoded into binary masks.\n        \"\"\"", "\n", "gt_bboxes", "=", "[", "]", "\n", "gt_labels", "=", "[", "]", "\n", "gt_bboxes_ignore", "=", "[", "]", "\n", "gt_masks_ann", "=", "[", "]", "\n", "\n", "for", "i", ",", "ann", "in", "enumerate", "(", "ann_info", ")", ":", "\n", "            ", "if", "ann", ".", "get", "(", "'ignore'", ",", "False", ")", ":", "\n", "                ", "continue", "\n", "", "x1", ",", "y1", ",", "w", ",", "h", "=", "ann", "[", "'bbox'", "]", "\n", "if", "ann", "[", "'area'", "]", "<=", "0", "or", "w", "<", "1", "or", "h", "<", "1", ":", "\n", "                ", "continue", "\n", "", "bbox", "=", "[", "x1", ",", "y1", ",", "x1", "+", "w", "-", "1", ",", "y1", "+", "h", "-", "1", "]", "\n", "if", "ann", ".", "get", "(", "'iscrowd'", ",", "False", ")", ":", "\n", "                ", "gt_bboxes_ignore", ".", "append", "(", "bbox", ")", "\n", "", "else", ":", "\n", "                ", "gt_bboxes", ".", "append", "(", "bbox", ")", "\n", "gt_labels", ".", "append", "(", "self", ".", "cat2label", "[", "ann", "[", "'category_id'", "]", "]", ")", "\n", "gt_masks_ann", ".", "append", "(", "ann", "[", "'segmentation'", "]", ")", "\n", "\n", "", "", "if", "gt_bboxes", ":", "\n", "            ", "gt_bboxes", "=", "np", ".", "array", "(", "gt_bboxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_labels", "=", "np", ".", "array", "(", "gt_labels", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "else", ":", "\n", "            ", "gt_bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_labels", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "", "if", "gt_bboxes_ignore", ":", "\n", "            ", "gt_bboxes_ignore", "=", "np", ".", "array", "(", "gt_bboxes_ignore", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "gt_bboxes_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "ann", "=", "dict", "(", "\n", "bboxes", "=", "gt_bboxes", ",", "\n", "labels", "=", "gt_labels", ",", "\n", "bboxes_ignore", "=", "gt_bboxes_ignore", ",", "\n", "masks", "=", "gt_masks_ann", ",", "\n", "seg_map", "=", "img_info", "[", "'segm_file'", "]", ")", "\n", "\n", "return", "ann", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.cityscapes.CityscapesDataset.results2txt": [[92, 148], ["os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "mmcv.ProgressBar", "range", "len", "len", "os.join", "os.join", "numpy.vstack", "mmcv.concat_list", "numpy.concatenate", "len", "mmcv.ProgressBar.update", "result_files.append", "ImportError", "os.splitext", "os.splitext", "numpy.full", "len", "len", "len", "open", "range", "os.basename", "os.basename", "enumerate", "pycocotools.decode().astype", "os.join", "os.join", "mmcv.imwrite", "fout.write", "pycocotools.decode", "os.basename", "os.basename"], "methods", ["None"], ["", "def", "results2txt", "(", "self", ",", "results", ",", "outfile_prefix", ")", ":", "\n", "        ", "\"\"\"Dump the detection results to a txt file.\n\n        Args:\n            results (list[list | tuple | ndarray]): Testing results of the\n                dataset.\n            outfile_prefix (str): The filename prefix of the json files.\n                If the prefix is \"somepath/xxx\",\n                the txt files will be named \"somepath/xxx.txt\".\n\n        Returns:\n            list[str: str]: result txt files which contains corresponding\n            instance segmentation images.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "import", "cityscapesscripts", ".", "helpers", ".", "labels", "as", "CSLabels", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Please run \"pip install citscapesscripts\" to '", "\n", "'install cityscapesscripts first.'", ")", "\n", "", "result_files", "=", "[", "]", "\n", "os", ".", "makedirs", "(", "outfile_prefix", ",", "exist_ok", "=", "True", ")", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "self", ")", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "result", "=", "results", "[", "idx", "]", "\n", "filename", "=", "self", ".", "img_infos", "[", "idx", "]", "[", "'filename'", "]", "\n", "basename", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "filename", ")", ")", "[", "0", "]", "\n", "pred_txt", "=", "osp", ".", "join", "(", "outfile_prefix", ",", "basename", "+", "'_pred.txt'", ")", "\n", "\n", "bbox_result", ",", "segm_result", "=", "result", "\n", "bboxes", "=", "np", ".", "vstack", "(", "bbox_result", ")", "\n", "segms", "=", "mmcv", ".", "concat_list", "(", "segm_result", ")", "\n", "labels", "=", "[", "\n", "np", ".", "full", "(", "bbox", ".", "shape", "[", "0", "]", ",", "i", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", ",", "bbox", "in", "enumerate", "(", "bbox_result", ")", "\n", "]", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "\n", "assert", "len", "(", "bboxes", ")", "==", "len", "(", "segms", ")", "==", "len", "(", "labels", ")", "\n", "num_instances", "=", "len", "(", "bboxes", ")", "\n", "prog_bar", ".", "update", "(", ")", "\n", "with", "open", "(", "pred_txt", ",", "'w'", ")", "as", "fout", ":", "\n", "                ", "for", "i", "in", "range", "(", "num_instances", ")", ":", "\n", "                    ", "pred_class", "=", "labels", "[", "i", "]", "\n", "classes", "=", "self", ".", "CLASSES", "[", "pred_class", "]", "\n", "class_id", "=", "CSLabels", ".", "name2label", "[", "classes", "]", ".", "id", "\n", "score", "=", "bboxes", "[", "i", ",", "-", "1", "]", "\n", "mask", "=", "maskUtils", ".", "decode", "(", "segms", "[", "i", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "png_filename", "=", "osp", ".", "join", "(", "\n", "outfile_prefix", ",", "\n", "basename", "+", "'_{}_{}.png'", ".", "format", "(", "i", ",", "classes", ")", ")", "\n", "mmcv", ".", "imwrite", "(", "mask", ",", "png_filename", ")", "\n", "fout", ".", "write", "(", "'{} {} {}\\n'", ".", "format", "(", "\n", "osp", ".", "basename", "(", "png_filename", ")", ",", "class_id", ",", "score", ")", ")", "\n", "", "", "result_files", ".", "append", "(", "pred_txt", ")", "\n", "\n", "", "return", "result_files", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.cityscapes.CityscapesDataset.format_results": [[149, 181], ["isinstance", "isinstance", "cityscapes.CityscapesDataset.results2txt", "len", "len", "len", "len", "len", "len", "len", "len", "tempfile.TemporaryDirectory", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.cityscapes.CityscapesDataset.results2txt"], ["", "def", "format_results", "(", "self", ",", "results", ",", "txtfile_prefix", "=", "None", ")", ":", "\n", "        ", "\"\"\"Format the results to txt (standard format for Cityscapes evaluation).\n\n        Args:\n            results (list): Testing results of the dataset.\n            txtfile_prefix (str | None): The prefix of txt files. It includes\n                the file path and the prefix of filename, e.g., \"a/b/prefix\".\n                If not specified, a temp file will be created. Default: None.\n\n        Returns:\n            tuple: (result_files, tmp_dir), result_files is a dict containing\n                the json filepaths, tmp_dir is the temporal directory created\n                for saving txt/png files when txtfile_prefix is not specified.\n        \"\"\"", "\n", "assert", "isinstance", "(", "results", ",", "list", ")", ",", "'results must be a list'", "\n", "assert", "len", "(", "results", ")", "==", "len", "(", "self", ")", ",", "(", "\n", "'The length of results is not equal to the dataset len: {} != {}'", ".", "\n", "format", "(", "len", "(", "results", ")", ",", "len", "(", "self", ")", ")", ")", "\n", "\n", "assert", "isinstance", "(", "results", ",", "list", ")", ",", "'results must be a list'", "\n", "assert", "len", "(", "results", ")", "==", "len", "(", "self", ")", ",", "(", "\n", "'The length of results is not equal to the dataset len: {} != {}'", ".", "\n", "format", "(", "len", "(", "results", ")", ",", "len", "(", "self", ")", ")", ")", "\n", "\n", "if", "txtfile_prefix", "is", "None", ":", "\n", "            ", "tmp_dir", "=", "tempfile", ".", "TemporaryDirectory", "(", ")", "\n", "txtfile_prefix", "=", "osp", ".", "join", "(", "tmp_dir", ".", "name", ",", "'results'", ")", "\n", "", "else", ":", "\n", "            ", "tmp_dir", "=", "None", "\n", "", "result_files", "=", "self", ".", "results2txt", "(", "results", ",", "txtfile_prefix", ")", "\n", "\n", "return", "result_files", ",", "tmp_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.cityscapes.CityscapesDataset.evaluate": [[182, 230], ["numpy.arange", "dict", "isinstance", "metric.copy", "dict.update", "metrics.remove", "len", "coco.CocoDataset", "dict.update", "cityscapes.CityscapesDataset._evaluate_cityscapes", "coco.CocoDataset.evaluate"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.cityscapes.CityscapesDataset._evaluate_cityscapes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.eval_hooks.EvalHook.evaluate"], ["", "def", "evaluate", "(", "self", ",", "\n", "results", ",", "\n", "metric", "=", "'bbox'", ",", "\n", "logger", "=", "None", ",", "\n", "outfile_prefix", "=", "None", ",", "\n", "classwise", "=", "False", ",", "\n", "proposal_nums", "=", "(", "100", ",", "300", ",", "1000", ")", ",", "\n", "iou_thrs", "=", "np", ".", "arange", "(", "0.5", ",", "0.96", ",", "0.05", ")", ")", ":", "\n", "        ", "\"\"\"Evaluation in Cityscapes protocol.\n\n        Args:\n            results (list): Testing results of the dataset.\n            metric (str | list[str]): Metrics to be evaluated.\n            logger (logging.Logger | str | None): Logger used for printing\n                related information during evaluation. Default: None.\n            outfile_prefix (str | None):\n            classwise (bool): Whether to evaluating the AP for each class.\n            proposal_nums (Sequence[int]): Proposal number used for evaluating\n                recalls, such as recall@100, recall@1000.\n                Default: (100, 300, 1000).\n            iou_thrs (Sequence[float]): IoU threshold used for evaluating\n                recalls. If set to a list, the average recall of all IoUs will\n                also be computed. Default: 0.5.\n\n        Returns:\n            dict[str: float]\n        \"\"\"", "\n", "eval_results", "=", "dict", "(", ")", "\n", "\n", "metrics", "=", "metric", ".", "copy", "(", ")", "if", "isinstance", "(", "metric", ",", "list", ")", "else", "[", "metric", "]", "\n", "\n", "if", "'cityscapes'", "in", "metrics", ":", "\n", "            ", "eval_results", ".", "update", "(", "\n", "self", ".", "_evaluate_cityscapes", "(", "results", ",", "outfile_prefix", ",", "logger", ")", ")", "\n", "metrics", ".", "remove", "(", "'cityscapes'", ")", "\n", "\n", "# left metrics are all coco metric", "\n", "", "if", "len", "(", "metrics", ")", ">", "0", ":", "\n", "# create CocoDataset with CityscapesDataset annotation", "\n", "            ", "self_coco", "=", "CocoDataset", "(", "self", ".", "ann_file", ",", "self", ".", "pipeline", ".", "transforms", ",", "\n", "self", ".", "data_root", ",", "self", ".", "img_prefix", ",", "\n", "self", ".", "seg_prefix", ",", "self", ".", "proposal_file", ",", "\n", "self", ".", "test_mode", ",", "self", ".", "filter_empty_gt", ")", "\n", "eval_results", ".", "update", "(", "\n", "self_coco", ".", "evaluate", "(", "results", ",", "metrics", ",", "logger", ",", "outfile_prefix", ",", "\n", "classwise", ",", "proposal_nums", ",", "iou_thrs", ")", ")", "\n", "\n", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.cityscapes.CityscapesDataset._evaluate_cityscapes": [[231, 282], ["mmdet.utils.print_log", "cityscapes.CityscapesDataset.format_results", "mmdet.utils.print_log", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.abspath", "os.path.abspath", "os.path.abspath", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "glob.glob", "len", "os.join", "os.join", "os.join", "os.join", "cityscapes.CityscapesDataset.img_prefix.replace", "predictionImgList.append", "CSEval.evaluateImgLists", "tmp_dir.cleanup", "ImportError", "CSEval.getPrediction"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.print_log", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.cityscapes.CityscapesDataset.format_results", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.print_log"], ["", "def", "_evaluate_cityscapes", "(", "self", ",", "results", ",", "txtfile_prefix", ",", "logger", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "cityscapesscripts", ".", "evaluation", ".", "evalInstanceLevelSemanticLabeling", "as", "CSEval", "# noqa", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Please run \"pip install citscapesscripts\" to '", "\n", "'install cityscapesscripts first.'", ")", "\n", "", "msg", "=", "'Evaluating in Cityscapes style'", "\n", "if", "logger", "is", "None", ":", "\n", "            ", "msg", "=", "'\\n'", "+", "msg", "\n", "", "print_log", "(", "msg", ",", "logger", "=", "logger", ")", "\n", "\n", "result_files", ",", "tmp_dir", "=", "self", ".", "format_results", "(", "results", ",", "txtfile_prefix", ")", "\n", "\n", "if", "tmp_dir", "is", "None", ":", "\n", "            ", "result_dir", "=", "osp", ".", "join", "(", "txtfile_prefix", ",", "'results'", ")", "\n", "", "else", ":", "\n", "            ", "result_dir", "=", "osp", ".", "join", "(", "tmp_dir", ".", "name", ",", "'results'", ")", "\n", "\n", "", "eval_results", "=", "{", "}", "\n", "print_log", "(", "\n", "'Evaluating results under {} ...'", ".", "format", "(", "result_dir", ")", ",", "\n", "logger", "=", "logger", ")", "\n", "\n", "# set global states in cityscapes evaluation API", "\n", "CSEval", ".", "args", ".", "cityscapesPath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_prefix", ",", "'../..'", ")", "\n", "CSEval", ".", "args", ".", "predictionPath", "=", "os", ".", "path", ".", "abspath", "(", "result_dir", ")", "\n", "CSEval", ".", "args", ".", "predictionWalk", "=", "None", "\n", "CSEval", ".", "args", ".", "JSONOutput", "=", "False", "\n", "CSEval", ".", "args", ".", "colorized", "=", "False", "\n", "CSEval", ".", "args", ".", "gtInstancesFile", "=", "os", ".", "path", ".", "join", "(", "result_dir", ",", "\n", "'gtInstances.json'", ")", "\n", "CSEval", ".", "args", ".", "groundTruthSearch", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "img_prefix", ".", "replace", "(", "'leftImg8bit'", ",", "'gtFine'", ")", ",", "\n", "'*/*_gtFine_instanceIds.png'", ")", "\n", "\n", "groundTruthImgList", "=", "glob", ".", "glob", "(", "CSEval", ".", "args", ".", "groundTruthSearch", ")", "\n", "assert", "len", "(", "groundTruthImgList", ")", ",", "'Cannot find ground truth images in {}.'", ".", "format", "(", "\n", "CSEval", ".", "args", ".", "groundTruthSearch", ")", "\n", "predictionImgList", "=", "[", "]", "\n", "for", "gt", "in", "groundTruthImgList", ":", "\n", "            ", "predictionImgList", ".", "append", "(", "CSEval", ".", "getPrediction", "(", "gt", ",", "CSEval", ".", "args", ")", ")", "\n", "", "CSEval_results", "=", "CSEval", ".", "evaluateImgLists", "(", "predictionImgList", ",", "\n", "groundTruthImgList", ",", "\n", "CSEval", ".", "args", ")", "[", "'averages'", "]", "\n", "\n", "eval_results", "[", "'mAP'", "]", "=", "CSEval_results", "[", "'allAp'", "]", "\n", "eval_results", "[", "'AP@50'", "]", "=", "CSEval_results", "[", "'allAp50%'", "]", "\n", "if", "tmp_dir", "is", "not", "None", ":", "\n", "            ", "tmp_dir", ".", "cleanup", "(", ")", "\n", "", "return", "eval_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.wider_face.WIDERFaceDataset.__init__": [[19, 21], ["xml_style.XMLDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "WIDERFaceDataset", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.wider_face.WIDERFaceDataset.load_annotations": [[22, 43], ["mmcv.list_from_file", "os.join", "xml.parse", "xml.parse.getroot", "ET.parse.getroot.find", "int", "int", "img_infos.append", "ET.parse.getroot.find", "dict", "tree.getroot.find.find", "tree.getroot.find.find", "os.join"], "methods", ["None"], ["", "def", "load_annotations", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "img_infos", "=", "[", "]", "\n", "img_ids", "=", "mmcv", ".", "list_from_file", "(", "ann_file", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "            ", "filename", "=", "'{}.jpg'", ".", "format", "(", "img_id", ")", "\n", "xml_path", "=", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "'Annotations'", ",", "\n", "'{}.xml'", ".", "format", "(", "img_id", ")", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_path", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "size", "=", "root", ".", "find", "(", "'size'", ")", "\n", "width", "=", "int", "(", "size", ".", "find", "(", "'width'", ")", ".", "text", ")", "\n", "height", "=", "int", "(", "size", ".", "find", "(", "'height'", ")", ".", "text", ")", "\n", "folder", "=", "root", ".", "find", "(", "'folder'", ")", ".", "text", "\n", "img_infos", ".", "append", "(", "\n", "dict", "(", "\n", "id", "=", "img_id", ",", "\n", "filename", "=", "osp", ".", "join", "(", "folder", ",", "filename", ")", ",", "\n", "width", "=", "width", ",", "\n", "height", "=", "height", ")", ")", "\n", "\n", "", "return", "img_infos", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.xml_style.XMLDataset.__init__": [[14, 18], ["custom.CustomDataset.__init__", "enumerate"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "min_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "XMLDataset", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "cat2label", "=", "{", "cat", ":", "i", "+", "1", "for", "i", ",", "cat", "in", "enumerate", "(", "self", ".", "CLASSES", ")", "}", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.xml_style.XMLDataset.load_annotations": [[19, 34], ["mmcv.list_from_file", "os.join", "xml.parse", "xml.parse.getroot", "ET.parse.getroot.find", "int", "int", "img_infos.append", "dict", "tree.getroot.find.find", "tree.getroot.find.find"], "methods", ["None"], ["", "def", "load_annotations", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "img_infos", "=", "[", "]", "\n", "img_ids", "=", "mmcv", ".", "list_from_file", "(", "ann_file", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "            ", "filename", "=", "'JPEGImages/{}.jpg'", ".", "format", "(", "img_id", ")", "\n", "xml_path", "=", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "'Annotations'", ",", "\n", "'{}.xml'", ".", "format", "(", "img_id", ")", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_path", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "size", "=", "root", ".", "find", "(", "'size'", ")", "\n", "width", "=", "int", "(", "size", ".", "find", "(", "'width'", ")", ".", "text", ")", "\n", "height", "=", "int", "(", "size", ".", "find", "(", "'height'", ")", ".", "text", ")", "\n", "img_infos", ".", "append", "(", "\n", "dict", "(", "id", "=", "img_id", ",", "filename", "=", "filename", ",", "width", "=", "width", ",", "height", "=", "height", ")", ")", "\n", "", "return", "img_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.xml_style.XMLDataset.get_ann_info": [[35, 88], ["os.join", "xml.parse", "xml.parse.getroot", "ET.parse.getroot.findall", "dict", "int", "obj.find", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.array", "obj.find", "int", "int", "int", "int", "numpy.zeros.append", "numpy.array.append", "numpy.zeros.append", "numpy.array.append", "numpy.array", "numpy.array", "numpy.zeros.astype", "numpy.array.astype", "numpy.zeros.astype", "numpy.array.astype", "obj.find", "float", "float", "float", "float", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find"], "methods", ["None"], ["", "def", "get_ann_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "img_infos", "[", "idx", "]", "[", "'id'", "]", "\n", "xml_path", "=", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "'Annotations'", ",", "\n", "'{}.xml'", ".", "format", "(", "img_id", ")", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_path", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "bboxes", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "bboxes_ignore", "=", "[", "]", "\n", "labels_ignore", "=", "[", "]", "\n", "for", "obj", "in", "root", ".", "findall", "(", "'object'", ")", ":", "\n", "            ", "name", "=", "obj", ".", "find", "(", "'name'", ")", ".", "text", "\n", "label", "=", "self", ".", "cat2label", "[", "name", "]", "\n", "difficult", "=", "int", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", ")", "\n", "bnd_box", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "# Coordinates may be float type", "\n", "bbox", "=", "[", "\n", "int", "(", "float", "(", "bnd_box", ".", "find", "(", "'xmin'", ")", ".", "text", ")", ")", ",", "\n", "int", "(", "float", "(", "bnd_box", ".", "find", "(", "'ymin'", ")", ".", "text", ")", ")", ",", "\n", "int", "(", "float", "(", "bnd_box", ".", "find", "(", "'xmax'", ")", ".", "text", ")", ")", ",", "\n", "int", "(", "float", "(", "bnd_box", ".", "find", "(", "'ymax'", ")", ".", "text", ")", ")", "\n", "]", "\n", "ignore", "=", "False", "\n", "if", "self", ".", "min_size", ":", "\n", "                ", "assert", "not", "self", ".", "test_mode", "\n", "w", "=", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "\n", "h", "=", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "\n", "if", "w", "<", "self", ".", "min_size", "or", "h", "<", "self", ".", "min_size", ":", "\n", "                    ", "ignore", "=", "True", "\n", "", "", "if", "difficult", "or", "ignore", ":", "\n", "                ", "bboxes_ignore", ".", "append", "(", "bbox", ")", "\n", "labels_ignore", ".", "append", "(", "label", ")", "\n", "", "else", ":", "\n", "                ", "bboxes", ".", "append", "(", "bbox", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "", "", "if", "not", "bboxes", ":", "\n", "            ", "bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "0", ",", ")", ")", "\n", "", "else", ":", "\n", "            ", "bboxes", "=", "np", ".", "array", "(", "bboxes", ",", "ndmin", "=", "2", ")", "-", "1", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "", "if", "not", "bboxes_ignore", ":", "\n", "            ", "bboxes_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "labels_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", ")", ")", "\n", "", "else", ":", "\n", "            ", "bboxes_ignore", "=", "np", ".", "array", "(", "bboxes_ignore", ",", "ndmin", "=", "2", ")", "-", "1", "\n", "labels_ignore", "=", "np", ".", "array", "(", "labels_ignore", ")", "\n", "", "ann", "=", "dict", "(", "\n", "bboxes", "=", "bboxes", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "labels", "=", "labels", ".", "astype", "(", "np", ".", "int64", ")", ",", "\n", "bboxes_ignore", "=", "bboxes_ignore", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "labels_ignore", "=", "labels_ignore", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "return", "ann", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.builder._concat_dataset": [[8, 28], ["cfg.get", "cfg.get", "cfg.get", "len", "range", "dataset_wrappers.ConcatDataset", "copy.deepcopy", "isinstance", "isinstance", "isinstance", "datasets.append", "builder.build_dataset"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.builder.build_dataset"], ["def", "_concat_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "ann_files", "=", "cfg", "[", "'ann_file'", "]", "\n", "img_prefixes", "=", "cfg", ".", "get", "(", "'img_prefix'", ",", "None", ")", "\n", "seg_prefixes", "=", "cfg", ".", "get", "(", "'seg_prefix'", ",", "None", ")", "\n", "proposal_files", "=", "cfg", ".", "get", "(", "'proposal_file'", ",", "None", ")", "\n", "\n", "datasets", "=", "[", "]", "\n", "num_dset", "=", "len", "(", "ann_files", ")", "\n", "for", "i", "in", "range", "(", "num_dset", ")", ":", "\n", "        ", "data_cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n", "data_cfg", "[", "'ann_file'", "]", "=", "ann_files", "[", "i", "]", "\n", "if", "isinstance", "(", "img_prefixes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'img_prefix'", "]", "=", "img_prefixes", "[", "i", "]", "\n", "", "if", "isinstance", "(", "seg_prefixes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'seg_prefix'", "]", "=", "seg_prefixes", "[", "i", "]", "\n", "", "if", "isinstance", "(", "proposal_files", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'proposal_file'", "]", "=", "proposal_files", "[", "i", "]", "\n", "", "datasets", ".", "append", "(", "build_dataset", "(", "data_cfg", ",", "default_args", ")", ")", "\n", "\n", "", "return", "ConcatDataset", "(", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.builder.build_dataset": [[30, 42], ["isinstance", "dataset_wrappers.ConcatDataset", "dataset_wrappers.RepeatDataset", "isinstance", "builder.build_dataset", "builder.build_dataset", "cfg.get", "builder._concat_dataset", "mmdet.utils.build_from_cfg"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.builder._concat_dataset", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.build_from_cfg"], ["", "def", "build_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "if", "isinstance", "(", "cfg", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "dataset", "=", "ConcatDataset", "(", "[", "build_dataset", "(", "c", ",", "default_args", ")", "for", "c", "in", "cfg", "]", ")", "\n", "", "elif", "cfg", "[", "'type'", "]", "==", "'RepeatDataset'", ":", "\n", "        ", "dataset", "=", "RepeatDataset", "(", "\n", "build_dataset", "(", "cfg", "[", "'dataset'", "]", ",", "default_args", ")", ",", "cfg", "[", "'times'", "]", ")", "\n", "", "elif", "isinstance", "(", "cfg", ".", "get", "(", "'ann_file'", ")", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "dataset", "=", "_concat_dataset", "(", "cfg", ",", "default_args", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "build_from_cfg", "(", "cfg", ",", "DATASETS", ",", "default_args", ")", "\n", "\n", "", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.dataset_wrappers.ConcatDataset.__init__": [[18, 26], ["torch.utils.data.dataset.ConcatDataset.__init__", "hasattr", "range", "numpy.concatenate", "len", "flags.append"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "super", "(", "ConcatDataset", ",", "self", ")", ".", "__init__", "(", "datasets", ")", "\n", "self", ".", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", "\n", "if", "hasattr", "(", "datasets", "[", "0", "]", ",", "'flag'", ")", ":", "\n", "            ", "flags", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "datasets", ")", ")", ":", "\n", "                ", "flags", ".", "append", "(", "datasets", "[", "i", "]", ".", "flag", ")", "\n", "", "self", ".", "flag", "=", "np", ".", "concatenate", "(", "flags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.dataset_wrappers.RepeatDataset.__init__": [[42, 50], ["hasattr", "len", "numpy.tile"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "times", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "times", "=", "times", "\n", "self", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "if", "hasattr", "(", "self", ".", "dataset", ",", "'flag'", ")", ":", "\n", "            ", "self", ".", "flag", "=", "np", ".", "tile", "(", "self", ".", "dataset", ".", "flag", ",", "times", ")", "\n", "\n", "", "self", ".", "_ori_len", "=", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.dataset_wrappers.RepeatDataset.__getitem__": [[51, 53], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "idx", "%", "self", ".", "_ori_len", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.dataset_wrappers.RepeatDataset.__len__": [[54, 56], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "times", "*", "self", ".", "_ori_len", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.voc.VOCDataset.__init__": [[14, 22], ["xml_style.XMLDataset.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VOCDataset", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "'VOC2007'", "in", "self", ".", "img_prefix", ":", "\n", "            ", "self", ".", "year", "=", "2007", "\n", "", "elif", "'VOC2012'", "in", "self", ".", "img_prefix", ":", "\n", "            ", "self", ".", "year", "=", "2012", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot infer dataset year from img_prefix'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.voc.VOCDataset.evaluate": [[23, 67], ["isinstance", "KeyError", "voc.VOCDataset.get_ann_info", "isinstance", "mmdet.core.eval_map", "len", "range", "isinstance", "mmdet.core.eval_recalls", "enumerate", "len", "enumerate", "mmdet.core.eval_recalls.mean", "enumerate"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.xml_style.XMLDataset.get_ann_info", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.mean_ap.eval_map", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.recall.eval_recalls"], ["", "", "def", "evaluate", "(", "self", ",", "\n", "results", ",", "\n", "metric", "=", "'mAP'", ",", "\n", "logger", "=", "None", ",", "\n", "proposal_nums", "=", "(", "100", ",", "300", ",", "1000", ")", ",", "\n", "iou_thr", "=", "0.5", ",", "\n", "scale_ranges", "=", "None", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "metric", ",", "str", ")", ":", "\n", "            ", "assert", "len", "(", "metric", ")", "==", "1", "\n", "metric", "=", "metric", "[", "0", "]", "\n", "", "allowed_metrics", "=", "[", "'mAP'", ",", "'recall'", "]", "\n", "if", "metric", "not", "in", "allowed_metrics", ":", "\n", "            ", "raise", "KeyError", "(", "'metric {} is not supported'", ".", "format", "(", "metric", ")", ")", "\n", "", "annotations", "=", "[", "self", ".", "get_ann_info", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", "]", "\n", "eval_results", "=", "{", "}", "\n", "if", "metric", "==", "'mAP'", ":", "\n", "            ", "assert", "isinstance", "(", "iou_thr", ",", "float", ")", "\n", "if", "self", ".", "year", "==", "2007", ":", "\n", "                ", "ds_name", "=", "'voc07'", "\n", "", "else", ":", "\n", "                ", "ds_name", "=", "self", ".", "dataset", ".", "CLASSES", "\n", "", "mean_ap", ",", "_", "=", "eval_map", "(", "\n", "results", ",", "\n", "annotations", ",", "\n", "scale_ranges", "=", "None", ",", "\n", "iou_thr", "=", "iou_thr", ",", "\n", "dataset", "=", "ds_name", ",", "\n", "logger", "=", "logger", ")", "\n", "eval_results", "[", "'mAP'", "]", "=", "mean_ap", "\n", "", "elif", "metric", "==", "'recall'", ":", "\n", "            ", "gt_bboxes", "=", "[", "ann", "[", "'bboxes'", "]", "for", "ann", "in", "annotations", "]", "\n", "if", "isinstance", "(", "iou_thr", ",", "float", ")", ":", "\n", "                ", "iou_thr", "=", "[", "iou_thr", "]", "\n", "", "recalls", "=", "eval_recalls", "(", "\n", "gt_bboxes", ",", "results", ",", "proposal_nums", ",", "iou_thr", ",", "logger", "=", "logger", ")", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "proposal_nums", ")", ":", "\n", "                ", "for", "j", ",", "iou", "in", "enumerate", "(", "iou_thr", ")", ":", "\n", "                    ", "eval_results", "[", "'recall@{}@{}'", ".", "format", "(", "num", ",", "iou", ")", "]", "=", "recalls", "[", "i", ",", "\n", "j", "]", "\n", "", "", "if", "recalls", ".", "shape", "[", "1", "]", ">", "1", ":", "\n", "                ", "ar", "=", "recalls", ".", "mean", "(", "axis", "=", "1", ")", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "proposal_nums", ")", ":", "\n", "                    ", "eval_results", "[", "'AR@{}'", ".", "format", "(", "num", ")", "]", "=", "ar", "[", "i", "]", "\n", "", "", "", "return", "eval_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize.__init__": [[49, 73], ["isinstance", "mmcv.is_list_of", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "img_scale", "=", "None", ",", "\n", "multiscale_mode", "=", "'range'", ",", "\n", "ratio_range", "=", "None", ",", "\n", "keep_ratio", "=", "True", ")", ":", "\n", "        ", "if", "img_scale", "is", "None", ":", "\n", "            ", "self", ".", "img_scale", "=", "None", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "img_scale", ",", "list", ")", ":", "\n", "                ", "self", ".", "img_scale", "=", "img_scale", "\n", "", "else", ":", "\n", "                ", "self", ".", "img_scale", "=", "[", "img_scale", "]", "\n", "", "assert", "mmcv", ".", "is_list_of", "(", "self", ".", "img_scale", ",", "tuple", ")", "\n", "\n", "", "if", "ratio_range", "is", "not", "None", ":", "\n", "# mode 1: given a scale and a range of image ratio", "\n", "            ", "assert", "len", "(", "self", ".", "img_scale", ")", "==", "1", "\n", "", "else", ":", "\n", "# mode 2: given multiple scales or a range of scales", "\n", "            ", "assert", "multiscale_mode", "in", "[", "'value'", ",", "'range'", "]", "\n", "\n", "", "self", ".", "multiscale_mode", "=", "multiscale_mode", "\n", "self", ".", "ratio_range", "=", "ratio_range", "\n", "self", ".", "keep_ratio", "=", "keep_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize.random_select": [[74, 80], ["mmcv.is_list_of", "numpy.random.randint", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "random_select", "(", "img_scales", ")", ":", "\n", "        ", "assert", "mmcv", ".", "is_list_of", "(", "img_scales", ",", "tuple", ")", "\n", "scale_idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "img_scales", ")", ")", "\n", "img_scale", "=", "img_scales", "[", "scale_idx", "]", "\n", "return", "img_scale", ",", "scale_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize.random_sample": [[81, 94], ["numpy.random.randint", "numpy.random.randint", "mmcv.is_list_of", "max", "min", "min", "min", "len", "max", "max"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "random_sample", "(", "img_scales", ")", ":", "\n", "        ", "assert", "mmcv", ".", "is_list_of", "(", "img_scales", ",", "tuple", ")", "and", "len", "(", "img_scales", ")", "==", "2", "\n", "img_scale_long", "=", "[", "max", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "img_scale_short", "=", "[", "min", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "long_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_long", ")", ",", "\n", "max", "(", "img_scale_long", ")", "+", "1", ")", "\n", "short_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_short", ")", ",", "\n", "max", "(", "img_scale_short", ")", "+", "1", ")", "\n", "img_scale", "=", "(", "long_edge", ",", "short_edge", ")", "\n", "return", "img_scale", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize.random_sample_ratio": [[95, 103], ["isinstance", "int", "int", "len", "numpy.random.random_sample"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize.random_sample"], ["", "@", "staticmethod", "\n", "def", "random_sample_ratio", "(", "img_scale", ",", "ratio_range", ")", ":", "\n", "        ", "assert", "isinstance", "(", "img_scale", ",", "tuple", ")", "and", "len", "(", "img_scale", ")", "==", "2", "\n", "min_ratio", ",", "max_ratio", "=", "ratio_range", "\n", "assert", "min_ratio", "<=", "max_ratio", "\n", "ratio", "=", "np", ".", "random", ".", "random_sample", "(", ")", "*", "(", "max_ratio", "-", "min_ratio", ")", "+", "min_ratio", "\n", "scale", "=", "int", "(", "img_scale", "[", "0", "]", "*", "ratio", ")", ",", "int", "(", "img_scale", "[", "1", "]", "*", "ratio", ")", "\n", "return", "scale", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize._random_scale": [[104, 119], ["transforms.Resize.random_sample_ratio", "len", "transforms.Resize.random_sample", "transforms.Resize.random_select"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize.random_sample_ratio", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize.random_sample", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize.random_select"], ["", "def", "_random_scale", "(", "self", ",", "results", ")", ":", "\n", "        ", "if", "self", ".", "ratio_range", "is", "not", "None", ":", "\n", "            ", "scale", ",", "scale_idx", "=", "self", ".", "random_sample_ratio", "(", "\n", "self", ".", "img_scale", "[", "0", "]", ",", "self", ".", "ratio_range", ")", "\n", "", "elif", "len", "(", "self", ".", "img_scale", ")", "==", "1", ":", "\n", "            ", "scale", ",", "scale_idx", "=", "self", ".", "img_scale", "[", "0", "]", ",", "0", "\n", "", "elif", "self", ".", "multiscale_mode", "==", "'range'", ":", "\n", "            ", "scale", ",", "scale_idx", "=", "self", ".", "random_sample", "(", "self", ".", "img_scale", ")", "\n", "", "elif", "self", ".", "multiscale_mode", "==", "'value'", ":", "\n", "            ", "scale", ",", "scale_idx", "=", "self", ".", "random_select", "(", "self", ".", "img_scale", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "results", "[", "'scale'", "]", "=", "scale", "\n", "results", "[", "'scale_idx'", "]", "=", "scale_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize._resize_img": [[120, 134], ["mmcv.imrescale", "mmcv.imresize", "numpy.array"], "methods", ["None"], ["", "def", "_resize_img", "(", "self", ",", "results", ")", ":", "\n", "        ", "if", "self", ".", "keep_ratio", ":", "\n", "            ", "img", ",", "scale_factor", "=", "mmcv", ".", "imrescale", "(", "\n", "results", "[", "'img'", "]", ",", "results", "[", "'scale'", "]", ",", "return_scale", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "img", ",", "w_scale", ",", "h_scale", "=", "mmcv", ".", "imresize", "(", "\n", "results", "[", "'img'", "]", ",", "results", "[", "'scale'", "]", ",", "return_scale", "=", "True", ")", "\n", "scale_factor", "=", "np", ".", "array", "(", "[", "w_scale", ",", "h_scale", ",", "w_scale", ",", "h_scale", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "# in case that there is no padding", "\n", "results", "[", "'scale_factor'", "]", "=", "scale_factor", "\n", "results", "[", "'keep_ratio'", "]", "=", "self", ".", "keep_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize._resize_bboxes": [[135, 142], ["results.get", "numpy.clip", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "def", "_resize_bboxes", "(", "self", ",", "results", ")", ":", "\n", "        ", "img_shape", "=", "results", "[", "'img_shape'", "]", "\n", "for", "key", "in", "results", ".", "get", "(", "'bbox_fields'", ",", "[", "]", ")", ":", "\n", "            ", "bboxes", "=", "results", "[", "key", "]", "*", "results", "[", "'scale_factor'", "]", "\n", "bboxes", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "bboxes", "[", ":", ",", "0", ":", ":", "2", "]", ",", "0", ",", "img_shape", "[", "1", "]", "-", "1", ")", "\n", "bboxes", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "bboxes", "[", ":", ",", "1", ":", ":", "2", "]", ",", "0", ",", "img_shape", "[", "0", "]", "-", "1", ")", "\n", "results", "[", "key", "]", "=", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize._resize_masks": [[143, 164], ["results.get", "numpy.stack", "numpy.empty", "mmcv.imrescale", "mmcv.imresize"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "", "def", "_resize_masks", "(", "self", ",", "results", ")", ":", "\n", "        ", "for", "key", "in", "results", ".", "get", "(", "'mask_fields'", ",", "[", "]", ")", ":", "\n", "            ", "if", "results", "[", "key", "]", "is", "None", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "keep_ratio", ":", "\n", "                ", "masks", "=", "[", "\n", "mmcv", ".", "imrescale", "(", "\n", "mask", ",", "results", "[", "'scale_factor'", "]", ",", "interpolation", "=", "'nearest'", ")", "\n", "for", "mask", "in", "results", "[", "key", "]", "\n", "]", "\n", "", "else", ":", "\n", "                ", "mask_size", "=", "(", "results", "[", "'img_shape'", "]", "[", "1", "]", ",", "results", "[", "'img_shape'", "]", "[", "0", "]", ")", "\n", "masks", "=", "[", "\n", "mmcv", ".", "imresize", "(", "mask", ",", "mask_size", ",", "interpolation", "=", "'nearest'", ")", "\n", "for", "mask", "in", "results", "[", "key", "]", "\n", "]", "\n", "", "if", "masks", ":", "\n", "                ", "results", "[", "key", "]", "=", "np", ".", "stack", "(", "masks", ")", "\n", "", "else", ":", "\n", "                ", "results", "[", "key", "]", "=", "np", ".", "empty", "(", "\n", "(", "0", ",", ")", "+", "results", "[", "'img_shape'", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize._resize_seg": [[165, 174], ["results.get", "mmcv.imrescale", "mmcv.imresize"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "", "", "def", "_resize_seg", "(", "self", ",", "results", ")", ":", "\n", "        ", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "            ", "if", "self", ".", "keep_ratio", ":", "\n", "                ", "gt_seg", "=", "mmcv", ".", "imrescale", "(", "\n", "results", "[", "key", "]", ",", "results", "[", "'scale'", "]", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "else", ":", "\n", "                ", "gt_seg", "=", "mmcv", ".", "imresize", "(", "\n", "results", "[", "key", "]", ",", "results", "[", "'scale'", "]", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "results", "[", "'gt_semantic_seg'", "]", "=", "gt_seg", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize.__call__": [[175, 183], ["transforms.Resize._resize_img", "transforms.Resize._resize_bboxes", "transforms.Resize._resize_masks", "transforms.Resize._resize_seg", "transforms.Resize._random_scale"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize._resize_img", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize._resize_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize._resize_masks", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize._resize_seg", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize._random_scale"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "if", "'scale'", "not", "in", "results", ":", "\n", "            ", "self", ".", "_random_scale", "(", "results", ")", "\n", "", "self", ".", "_resize_img", "(", "results", ")", "\n", "self", ".", "_resize_bboxes", "(", "results", ")", "\n", "self", ".", "_resize_masks", "(", "results", ")", "\n", "self", ".", "_resize_seg", "(", "results", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Resize.__repr__": [[184, 192], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "(", "'(img_scale={}, multiscale_mode={}, ratio_range={}, '", "\n", "'keep_ratio={})'", ")", ".", "format", "(", "self", ".", "img_scale", ",", "\n", "self", ".", "multiscale_mode", ",", "\n", "self", ".", "ratio_range", ",", "\n", "self", ".", "keep_ratio", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.RandomFlip.__init__": [[206, 212], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "flip_ratio", "=", "None", ",", "direction", "=", "'horizontal'", ")", ":", "\n", "        ", "self", ".", "flip_ratio", "=", "flip_ratio", "\n", "self", ".", "direction", "=", "direction", "\n", "if", "flip_ratio", "is", "not", "None", ":", "\n", "            ", "assert", "flip_ratio", ">=", "0", "and", "flip_ratio", "<=", "1", "\n", "", "assert", "direction", "in", "[", "'horizontal'", ",", "'vertical'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.RandomFlip.bbox_flip": [[213, 234], ["bboxes.copy", "ValueError"], "methods", ["None"], ["", "def", "bbox_flip", "(", "self", ",", "bboxes", ",", "img_shape", ",", "direction", ")", ":", "\n", "        ", "\"\"\"Flip bboxes horizontally.\n\n        Args:\n            bboxes(ndarray): shape (..., 4*k)\n            img_shape(tuple): (height, width)\n        \"\"\"", "\n", "assert", "bboxes", ".", "shape", "[", "-", "1", "]", "%", "4", "==", "0", "\n", "flipped", "=", "bboxes", ".", "copy", "(", ")", "\n", "if", "direction", "==", "'horizontal'", ":", "\n", "            ", "w", "=", "img_shape", "[", "1", "]", "\n", "flipped", "[", "...", ",", "0", ":", ":", "4", "]", "=", "w", "-", "bboxes", "[", "...", ",", "2", ":", ":", "4", "]", "-", "1", "\n", "flipped", "[", "...", ",", "2", ":", ":", "4", "]", "=", "w", "-", "bboxes", "[", "...", ",", "0", ":", ":", "4", "]", "-", "1", "\n", "", "elif", "direction", "==", "'vertical'", ":", "\n", "            ", "h", "=", "img_shape", "[", "0", "]", "\n", "flipped", "[", "...", ",", "1", ":", ":", "4", "]", "=", "h", "-", "bboxes", "[", "...", ",", "3", ":", ":", "4", "]", "-", "1", "\n", "flipped", "[", "...", ",", "3", ":", ":", "4", "]", "=", "h", "-", "bboxes", "[", "...", ",", "1", ":", ":", "4", "]", "-", "1", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Invalid flipping direction \"{}\"'", ".", "format", "(", "direction", ")", ")", "\n", "", "return", "flipped", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.RandomFlip.__call__": [[235, 267], ["mmcv.imflip", "results.get", "results.get", "results.get", "transforms.RandomFlip.bbox_flip", "mmcv.imflip", "numpy.random.rand", "mmcv.imflip", "numpy.stack", "numpy.empty"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox_flip"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "if", "'flip'", "not", "in", "results", ":", "\n", "            ", "flip", "=", "True", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "flip_ratio", "else", "False", "\n", "results", "[", "'flip'", "]", "=", "flip", "\n", "", "if", "'flip_direction'", "not", "in", "results", ":", "\n", "            ", "results", "[", "'flip_direction'", "]", "=", "self", ".", "direction", "\n", "", "if", "results", "[", "'flip'", "]", ":", "\n", "# flip image", "\n", "            ", "results", "[", "'img'", "]", "=", "mmcv", ".", "imflip", "(", "\n", "results", "[", "'img'", "]", ",", "direction", "=", "results", "[", "'flip_direction'", "]", ")", "\n", "# flip bboxes", "\n", "for", "key", "in", "results", ".", "get", "(", "'bbox_fields'", ",", "[", "]", ")", ":", "\n", "                ", "results", "[", "key", "]", "=", "self", ".", "bbox_flip", "(", "results", "[", "key", "]", ",", "\n", "results", "[", "'img_shape'", "]", ",", "\n", "results", "[", "'flip_direction'", "]", ")", "\n", "# flip masks", "\n", "", "for", "key", "in", "results", ".", "get", "(", "'mask_fields'", ",", "[", "]", ")", ":", "\n", "                ", "masks", "=", "[", "\n", "mmcv", ".", "imflip", "(", "mask", ",", "direction", "=", "results", "[", "'flip_direction'", "]", ")", "\n", "for", "mask", "in", "results", "[", "key", "]", "\n", "]", "\n", "if", "masks", ":", "\n", "                    ", "results", "[", "key", "]", "=", "np", ".", "stack", "(", "masks", ")", "\n", "", "else", ":", "\n", "                    ", "results", "[", "key", "]", "=", "np", ".", "empty", "(", "\n", "(", "0", ",", ")", "+", "results", "[", "'img_shape'", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# flip segs", "\n", "", "", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "                ", "results", "[", "key", "]", "=", "mmcv", ".", "imflip", "(", "\n", "results", "[", "key", "]", ",", "direction", "=", "results", "[", "'flip_direction'", "]", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.RandomFlip.__repr__": [[268, 271], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(flip_ratio={})'", ".", "format", "(", "\n", "self", ".", "flip_ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Pad.__init__": [[286, 293], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", "=", "None", ",", "size_divisor", "=", "None", ",", "pad_val", "=", "0", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "size_divisor", "=", "size_divisor", "\n", "self", ".", "pad_val", "=", "pad_val", "\n", "# only one of size and size_divisor should be valid", "\n", "assert", "size", "is", "not", "None", "or", "size_divisor", "is", "not", "None", "\n", "assert", "size", "is", "None", "or", "size_divisor", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Pad._pad_img": [[294, 304], ["mmcv.impad", "mmcv.impad_to_multiple"], "methods", ["None"], ["", "def", "_pad_img", "(", "self", ",", "results", ")", ":", "\n", "        ", "if", "self", ".", "size", "is", "not", "None", ":", "\n", "            ", "padded_img", "=", "mmcv", ".", "impad", "(", "results", "[", "'img'", "]", ",", "self", ".", "size", ",", "self", ".", "pad_val", ")", "\n", "", "elif", "self", ".", "size_divisor", "is", "not", "None", ":", "\n", "            ", "padded_img", "=", "mmcv", ".", "impad_to_multiple", "(", "\n", "results", "[", "'img'", "]", ",", "self", ".", "size_divisor", ",", "pad_val", "=", "self", ".", "pad_val", ")", "\n", "", "results", "[", "'img'", "]", "=", "padded_img", "\n", "results", "[", "'pad_shape'", "]", "=", "padded_img", ".", "shape", "\n", "results", "[", "'pad_fixed_size'", "]", "=", "self", ".", "size", "\n", "results", "[", "'pad_size_divisor'", "]", "=", "self", ".", "size_divisor", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Pad._pad_masks": [[305, 316], ["results.get", "mmcv.impad", "numpy.stack", "numpy.empty"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "def", "_pad_masks", "(", "self", ",", "results", ")", ":", "\n", "        ", "pad_shape", "=", "results", "[", "'pad_shape'", "]", "[", ":", "2", "]", "\n", "for", "key", "in", "results", ".", "get", "(", "'mask_fields'", ",", "[", "]", ")", ":", "\n", "            ", "padded_masks", "=", "[", "\n", "mmcv", ".", "impad", "(", "mask", ",", "pad_shape", ",", "pad_val", "=", "self", ".", "pad_val", ")", "\n", "for", "mask", "in", "results", "[", "key", "]", "\n", "]", "\n", "if", "padded_masks", ":", "\n", "                ", "results", "[", "key", "]", "=", "np", ".", "stack", "(", "padded_masks", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "results", "[", "key", "]", "=", "np", ".", "empty", "(", "(", "0", ",", ")", "+", "pad_shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Pad._pad_seg": [[317, 320], ["results.get", "mmcv.impad"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "", "", "def", "_pad_seg", "(", "self", ",", "results", ")", ":", "\n", "        ", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "            ", "results", "[", "key", "]", "=", "mmcv", ".", "impad", "(", "results", "[", "key", "]", ",", "results", "[", "'pad_shape'", "]", "[", ":", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Pad.__call__": [[321, 326], ["transforms.Pad._pad_img", "transforms.Pad._pad_masks", "transforms.Pad._pad_seg"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Pad._pad_img", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Pad._pad_masks", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Pad._pad_seg"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "self", ".", "_pad_img", "(", "results", ")", "\n", "self", ".", "_pad_masks", "(", "results", ")", "\n", "self", ".", "_pad_seg", "(", "results", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Pad.__repr__": [[327, 332], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "'(size={}, size_divisor={}, pad_val={})'", ".", "format", "(", "\n", "self", ".", "size", ",", "self", ".", "size_divisor", ",", "self", ".", "pad_val", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Normalize.__init__": [[345, 349], ["numpy.array", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "to_rgb", "=", "True", ")", ":", "\n", "        ", "self", ".", "mean", "=", "np", ".", "array", "(", "mean", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "std", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "to_rgb", "=", "to_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Normalize.__call__": [[350, 356], ["mmcv.imnormalize", "dict"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "results", "[", "'img'", "]", "=", "mmcv", ".", "imnormalize", "(", "results", "[", "'img'", "]", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "\n", "self", ".", "to_rgb", ")", "\n", "results", "[", "'img_norm_cfg'", "]", "=", "dict", "(", "\n", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ",", "to_rgb", "=", "self", ".", "to_rgb", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Normalize.__repr__": [[357, 362], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "'(mean={}, std={}, to_rgb={})'", ".", "format", "(", "\n", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "to_rgb", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.RandomCrop.__init__": [[372, 374], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "crop_size", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.RandomCrop.__call__": [[375, 430], ["max", "max", "numpy.random.randint", "numpy.random.randint", "results.get", "results.get", "numpy.array", "numpy.clip", "numpy.clip", "numpy.any", "numpy.where", "valid_gt_masks.append", "numpy.stack", "numpy.empty"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "img", "=", "results", "[", "'img'", "]", "\n", "margin_h", "=", "max", "(", "img", ".", "shape", "[", "0", "]", "-", "self", ".", "crop_size", "[", "0", "]", ",", "0", ")", "\n", "margin_w", "=", "max", "(", "img", ".", "shape", "[", "1", "]", "-", "self", ".", "crop_size", "[", "1", "]", ",", "0", ")", "\n", "offset_h", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "margin_h", "+", "1", ")", "\n", "offset_w", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "margin_w", "+", "1", ")", "\n", "crop_y1", ",", "crop_y2", "=", "offset_h", ",", "offset_h", "+", "self", ".", "crop_size", "[", "0", "]", "\n", "crop_x1", ",", "crop_x2", "=", "offset_w", ",", "offset_w", "+", "self", ".", "crop_size", "[", "1", "]", "\n", "\n", "# crop the image", "\n", "img", "=", "img", "[", "crop_y1", ":", "crop_y2", ",", "crop_x1", ":", "crop_x2", ",", "...", "]", "\n", "img_shape", "=", "img", ".", "shape", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img_shape", "\n", "\n", "# crop bboxes accordingly and clip to the image boundary", "\n", "for", "key", "in", "results", ".", "get", "(", "'bbox_fields'", ",", "[", "]", ")", ":", "\n", "            ", "bbox_offset", "=", "np", ".", "array", "(", "[", "offset_w", ",", "offset_h", ",", "offset_w", ",", "offset_h", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "bboxes", "=", "results", "[", "key", "]", "-", "bbox_offset", "\n", "bboxes", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "bboxes", "[", ":", ",", "0", ":", ":", "2", "]", ",", "0", ",", "img_shape", "[", "1", "]", "-", "1", ")", "\n", "bboxes", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "bboxes", "[", ":", ",", "1", ":", ":", "2", "]", ",", "0", ",", "img_shape", "[", "0", "]", "-", "1", ")", "\n", "results", "[", "key", "]", "=", "bboxes", "\n", "\n", "# crop semantic seg", "\n", "", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "            ", "results", "[", "key", "]", "=", "results", "[", "key", "]", "[", "crop_y1", ":", "crop_y2", ",", "crop_x1", ":", "crop_x2", "]", "\n", "\n", "# filter out the gt bboxes that are completely cropped", "\n", "", "if", "'gt_bboxes'", "in", "results", ":", "\n", "            ", "gt_bboxes", "=", "results", "[", "'gt_bboxes'", "]", "\n", "valid_inds", "=", "(", "gt_bboxes", "[", ":", ",", "2", "]", ">", "gt_bboxes", "[", ":", ",", "0", "]", ")", "&", "(", "\n", "gt_bboxes", "[", ":", ",", "3", "]", ">", "gt_bboxes", "[", ":", ",", "1", "]", ")", "\n", "# if no gt bbox remains after cropping, just skip this image", "\n", "if", "not", "np", ".", "any", "(", "valid_inds", ")", ":", "\n", "                ", "return", "None", "\n", "", "results", "[", "'gt_bboxes'", "]", "=", "gt_bboxes", "[", "valid_inds", ",", ":", "]", "\n", "if", "'gt_labels'", "in", "results", ":", "\n", "                ", "results", "[", "'gt_labels'", "]", "=", "results", "[", "'gt_labels'", "]", "[", "valid_inds", "]", "\n", "\n", "# filter and crop the masks", "\n", "", "if", "'gt_masks'", "in", "results", ":", "\n", "                ", "valid_gt_masks", "=", "[", "]", "\n", "for", "i", "in", "np", ".", "where", "(", "valid_inds", ")", "[", "0", "]", ":", "\n", "                    ", "gt_mask", "=", "results", "[", "'gt_masks'", "]", "[", "i", "]", "[", "crop_y1", ":", "crop_y2", ",", "\n", "crop_x1", ":", "crop_x2", "]", "\n", "valid_gt_masks", ".", "append", "(", "gt_mask", ")", "\n", "\n", "", "if", "valid_gt_masks", ":", "\n", "                    ", "results", "[", "'gt_masks'", "]", "=", "np", ".", "stack", "(", "valid_gt_masks", ")", "\n", "", "else", ":", "\n", "                    ", "results", "[", "'gt_masks'", "]", "=", "np", ".", "empty", "(", "\n", "(", "0", ",", ")", "+", "results", "[", "'img_shape'", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.RandomCrop.__repr__": [[431, 434], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(crop_size={})'", ".", "format", "(", "\n", "self", ".", "crop_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.SegRescale.__init__": [[444, 446], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale_factor", "=", "1", ")", ":", "\n", "        ", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.SegRescale.__call__": [[447, 453], ["results.get", "mmcv.imrescale"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "            ", "if", "self", ".", "scale_factor", "!=", "1", ":", "\n", "                ", "results", "[", "key", "]", "=", "mmcv", ".", "imrescale", "(", "\n", "results", "[", "key", "]", ",", "self", ".", "scale_factor", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.SegRescale.__repr__": [[454, 457], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(scale_factor={})'", ".", "format", "(", "\n", "self", ".", "scale_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.PhotoMetricDistortion.__init__": [[481, 490], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "brightness_delta", "=", "32", ",", "\n", "contrast_range", "=", "(", "0.5", ",", "1.5", ")", ",", "\n", "saturation_range", "=", "(", "0.5", ",", "1.5", ")", ",", "\n", "hue_delta", "=", "18", ")", ":", "\n", "        ", "self", ".", "brightness_delta", "=", "brightness_delta", "\n", "self", ".", "contrast_lower", ",", "self", ".", "contrast_upper", "=", "contrast_range", "\n", "self", ".", "saturation_lower", ",", "self", ".", "saturation_upper", "=", "saturation_range", "\n", "self", ".", "hue_delta", "=", "hue_delta", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.PhotoMetricDistortion.__call__": [[491, 538], ["numpy.random.randint", "numpy.random.randint", "mmcv.bgr2hsv", "numpy.random.randint", "numpy.random.randint", "mmcv.hsv2bgr", "numpy.random.randint", "numpy.random.uniform", "numpy.random.randint", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.randint", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.permutation"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "img", "=", "results", "[", "'img'", "]", "\n", "# random brightness", "\n", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "delta", "=", "random", ".", "uniform", "(", "-", "self", ".", "brightness_delta", ",", "\n", "self", ".", "brightness_delta", ")", "\n", "img", "+=", "delta", "\n", "\n", "# mode == 0 --> do random contrast first", "\n", "# mode == 1 --> do random contrast last", "\n", "", "mode", "=", "random", ".", "randint", "(", "2", ")", "\n", "if", "mode", "==", "1", ":", "\n", "            ", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "                ", "alpha", "=", "random", ".", "uniform", "(", "self", ".", "contrast_lower", ",", "\n", "self", ".", "contrast_upper", ")", "\n", "img", "*=", "alpha", "\n", "\n", "# convert color from BGR to HSV", "\n", "", "", "img", "=", "mmcv", ".", "bgr2hsv", "(", "img", ")", "\n", "\n", "# random saturation", "\n", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "img", "[", "...", ",", "1", "]", "*=", "random", ".", "uniform", "(", "self", ".", "saturation_lower", ",", "\n", "self", ".", "saturation_upper", ")", "\n", "\n", "# random hue", "\n", "", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "img", "[", "...", ",", "0", "]", "+=", "random", ".", "uniform", "(", "-", "self", ".", "hue_delta", ",", "self", ".", "hue_delta", ")", "\n", "img", "[", "...", ",", "0", "]", "[", "img", "[", "...", ",", "0", "]", ">", "360", "]", "-=", "360", "\n", "img", "[", "...", ",", "0", "]", "[", "img", "[", "...", ",", "0", "]", "<", "0", "]", "+=", "360", "\n", "\n", "# convert color from HSV to BGR", "\n", "", "img", "=", "mmcv", ".", "hsv2bgr", "(", "img", ")", "\n", "\n", "# random contrast", "\n", "if", "mode", "==", "0", ":", "\n", "            ", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "                ", "alpha", "=", "random", ".", "uniform", "(", "self", ".", "contrast_lower", ",", "\n", "self", ".", "contrast_upper", ")", "\n", "img", "*=", "alpha", "\n", "\n", "# randomly swap channels", "\n", "", "", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "img", "=", "img", "[", "...", ",", "random", ".", "permutation", "(", "3", ")", "]", "\n", "\n", "", "results", "[", "'img'", "]", "=", "img", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.PhotoMetricDistortion.__repr__": [[539, 548], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "(", "'(brightness_delta={}, contrast_range={}, '", "\n", "'saturation_range={}, hue_delta={})'", ")", ".", "format", "(", "\n", "self", ".", "brightness_delta", ",", "\n", "(", "self", ".", "contrast_lower", ",", "self", ".", "contrast_upper", ")", ",", "\n", "(", "self", ".", "saturation_lower", ",", "self", ".", "saturation_upper", ")", ",", "\n", "self", ".", "hue_delta", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Expand.__init__": [[564, 579], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "mean", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "to_rgb", "=", "True", ",", "\n", "ratio_range", "=", "(", "1", ",", "4", ")", ",", "\n", "seg_ignore_label", "=", "None", ",", "\n", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "to_rgb", "=", "to_rgb", "\n", "self", ".", "ratio_range", "=", "ratio_range", "\n", "if", "to_rgb", ":", "\n", "            ", "self", ".", "mean", "=", "mean", "[", ":", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "mean", "=", "mean", "\n", "", "self", ".", "min_ratio", ",", "self", ".", "max_ratio", "=", "ratio_range", "\n", "self", ".", "seg_ignore_label", "=", "seg_ignore_label", "\n", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Expand.__call__": [[580, 621], ["numpy.random.uniform", "numpy.full().astype", "int", "int", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.tile().astype", "numpy.full().astype", "numpy.full", "numpy.full().astype", "expand_gt_masks.append", "numpy.stack", "numpy.empty", "numpy.tile", "numpy.full", "int", "int", "numpy.full", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "prob", ":", "\n", "            ", "return", "results", "\n", "\n", "", "img", ",", "boxes", "=", "[", "results", "[", "k", "]", "for", "k", "in", "(", "'img'", ",", "'gt_bboxes'", ")", "]", "\n", "\n", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "ratio", "=", "random", ".", "uniform", "(", "self", ".", "min_ratio", ",", "self", ".", "max_ratio", ")", "\n", "expand_img", "=", "np", ".", "full", "(", "(", "int", "(", "h", "*", "ratio", ")", ",", "int", "(", "w", "*", "ratio", ")", ",", "c", ")", ",", "\n", "self", ".", "mean", ")", ".", "astype", "(", "img", ".", "dtype", ")", "\n", "left", "=", "int", "(", "random", ".", "uniform", "(", "0", ",", "w", "*", "ratio", "-", "w", ")", ")", "\n", "top", "=", "int", "(", "random", ".", "uniform", "(", "0", ",", "h", "*", "ratio", "-", "h", ")", ")", "\n", "expand_img", "[", "top", ":", "top", "+", "h", ",", "left", ":", "left", "+", "w", "]", "=", "img", "\n", "boxes", "=", "boxes", "+", "np", ".", "tile", "(", "(", "left", ",", "top", ")", ",", "2", ")", ".", "astype", "(", "boxes", ".", "dtype", ")", "\n", "\n", "results", "[", "'img'", "]", "=", "expand_img", "\n", "results", "[", "'gt_bboxes'", "]", "=", "boxes", "\n", "\n", "if", "'gt_masks'", "in", "results", ":", "\n", "            ", "expand_gt_masks", "=", "[", "]", "\n", "for", "mask", "in", "results", "[", "'gt_masks'", "]", ":", "\n", "                ", "expand_mask", "=", "np", ".", "full", "(", "(", "int", "(", "h", "*", "ratio", ")", ",", "int", "(", "w", "*", "ratio", ")", ")", ",", "\n", "0", ")", ".", "astype", "(", "mask", ".", "dtype", ")", "\n", "expand_mask", "[", "top", ":", "top", "+", "h", ",", "left", ":", "left", "+", "w", "]", "=", "mask", "\n", "expand_gt_masks", ".", "append", "(", "expand_mask", ")", "\n", "\n", "", "if", "expand_gt_masks", ":", "\n", "                ", "results", "[", "'gt_masks'", "]", "=", "np", ".", "stack", "(", "expand_gt_masks", ")", "\n", "", "else", ":", "\n", "                ", "results", "[", "'gt_masks'", "]", "=", "np", ".", "empty", "(", "\n", "(", "0", ",", ")", "+", "results", "[", "'img_shape'", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# not tested", "\n", "", "", "if", "'gt_semantic_seg'", "in", "results", ":", "\n", "            ", "assert", "self", ".", "seg_ignore_label", "is", "not", "None", "\n", "gt_seg", "=", "results", "[", "'gt_semantic_seg'", "]", "\n", "expand_gt_seg", "=", "np", ".", "full", "(", "(", "int", "(", "h", "*", "ratio", ")", ",", "int", "(", "w", "*", "ratio", ")", ")", ",", "\n", "self", ".", "seg_ignore_label", ")", ".", "astype", "(", "gt_seg", ".", "dtype", ")", "\n", "expand_gt_seg", "[", "top", ":", "top", "+", "h", ",", "left", ":", "left", "+", "w", "]", "=", "gt_seg", "\n", "results", "[", "'gt_semantic_seg'", "]", "=", "expand_gt_seg", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Expand.__repr__": [[622, 629], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "'(mean={}, to_rgb={}, ratio_range={}, '", "'seg_ignore_label={})'", ".", "format", "(", "\n", "self", ".", "mean", ",", "self", ".", "to_rgb", ",", "self", ".", "ratio_range", ",", "\n", "self", ".", "seg_ignore_label", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.MinIoURandomCrop.__init__": [[644, 649], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "min_ious", "=", "(", "0.1", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", ")", ",", "min_crop_size", "=", "0.3", ")", ":", "\n", "# 1: return ori img", "\n", "        ", "self", ".", "min_ious", "=", "min_ious", "\n", "self", ".", "sample_mode", "=", "(", "1", ",", "*", "min_ious", ",", "0", ")", "\n", "self", ".", "min_crop_size", "=", "min_crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.MinIoURandomCrop.__call__": [[650, 721], ["numpy.random.choice", "range", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.array", "mmdet.core.evaluation.bbox_overlaps.bbox_overlaps().reshape", "len", "boxes[].clip", "boxes[].clip", "numpy.tile", "int", "int", "int", "int", "mmdet.core.evaluation.bbox_overlaps.bbox_overlaps", "len", "mmdet.core.evaluation.bbox_overlaps.bbox_overlaps().reshape.min", "mask.any", "numpy.stack", "numpy.array.reshape", "boxes.reshape", "range", "len"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.geometry.bbox_overlaps"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "img", ",", "boxes", ",", "labels", "=", "[", "\n", "results", "[", "k", "]", "for", "k", "in", "(", "'img'", ",", "'gt_bboxes'", ",", "'gt_labels'", ")", "\n", "]", "\n", "h", ",", "w", ",", "c", "=", "img", ".", "shape", "\n", "while", "True", ":", "\n", "            ", "mode", "=", "random", ".", "choice", "(", "self", ".", "sample_mode", ")", "\n", "if", "mode", "==", "1", ":", "\n", "                ", "return", "results", "\n", "\n", "", "min_iou", "=", "mode", "\n", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "                ", "new_w", "=", "random", ".", "uniform", "(", "self", ".", "min_crop_size", "*", "w", ",", "w", ")", "\n", "new_h", "=", "random", ".", "uniform", "(", "self", ".", "min_crop_size", "*", "h", ",", "h", ")", "\n", "\n", "# h / w in [0.5, 2]", "\n", "if", "new_h", "/", "new_w", "<", "0.5", "or", "new_h", "/", "new_w", ">", "2", ":", "\n", "                    ", "continue", "\n", "\n", "", "left", "=", "random", ".", "uniform", "(", "w", "-", "new_w", ")", "\n", "top", "=", "random", ".", "uniform", "(", "h", "-", "new_h", ")", "\n", "\n", "patch", "=", "np", ".", "array", "(", "\n", "(", "int", "(", "left", ")", ",", "int", "(", "top", ")", ",", "int", "(", "left", "+", "new_w", ")", ",", "int", "(", "top", "+", "new_h", ")", ")", ")", "\n", "overlaps", "=", "bbox_overlaps", "(", "\n", "patch", ".", "reshape", "(", "-", "1", ",", "4", ")", ",", "boxes", ".", "reshape", "(", "-", "1", ",", "4", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "if", "len", "(", "overlaps", ")", ">", "0", "and", "overlaps", ".", "min", "(", ")", "<", "min_iou", ":", "\n", "                    ", "continue", "\n", "\n", "# center of boxes should inside the crop img", "\n", "# only adjust boxes and instance masks when the gt is not empty", "\n", "", "if", "len", "(", "overlaps", ")", ">", "0", ":", "\n", "# adjust boxes", "\n", "                    ", "center", "=", "(", "boxes", "[", ":", ",", ":", "2", "]", "+", "boxes", "[", ":", ",", "2", ":", "]", ")", "/", "2", "\n", "mask", "=", "(", "(", "center", "[", ":", ",", "0", "]", ">", "patch", "[", "0", "]", ")", "*", "\n", "(", "center", "[", ":", ",", "1", "]", ">", "patch", "[", "1", "]", ")", "*", "\n", "(", "center", "[", ":", ",", "0", "]", "<", "patch", "[", "2", "]", ")", "*", "\n", "(", "center", "[", ":", ",", "1", "]", "<", "patch", "[", "3", "]", ")", ")", "\n", "if", "not", "mask", ".", "any", "(", ")", ":", "\n", "                        ", "continue", "\n", "\n", "", "boxes", "=", "boxes", "[", "mask", "]", "\n", "labels", "=", "labels", "[", "mask", "]", "\n", "\n", "boxes", "[", ":", ",", "2", ":", "]", "=", "boxes", "[", ":", ",", "2", ":", "]", ".", "clip", "(", "max", "=", "patch", "[", "2", ":", "]", ")", "\n", "boxes", "[", ":", ",", ":", "2", "]", "=", "boxes", "[", ":", ",", ":", "2", "]", ".", "clip", "(", "min", "=", "patch", "[", ":", "2", "]", ")", "\n", "boxes", "-=", "np", ".", "tile", "(", "patch", "[", ":", "2", "]", ",", "2", ")", "\n", "\n", "results", "[", "'gt_bboxes'", "]", "=", "boxes", "\n", "results", "[", "'gt_labels'", "]", "=", "labels", "\n", "\n", "if", "'gt_masks'", "in", "results", ":", "\n", "                        ", "valid_masks", "=", "[", "\n", "results", "[", "'gt_masks'", "]", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "mask", ")", ")", "\n", "if", "mask", "[", "i", "]", "\n", "]", "\n", "# here the valid_masks is not empty", "\n", "results", "[", "'gt_masks'", "]", "=", "np", ".", "stack", "(", "[", "\n", "gt_mask", "[", "patch", "[", "1", "]", ":", "patch", "[", "3", "]", ",", "patch", "[", "0", "]", ":", "patch", "[", "2", "]", "]", "\n", "for", "gt_mask", "in", "valid_masks", "\n", "]", ")", "\n", "\n", "# adjust the img no matter whether the gt is empty before crop", "\n", "", "", "img", "=", "img", "[", "patch", "[", "1", "]", ":", "patch", "[", "3", "]", ",", "patch", "[", "0", "]", ":", "patch", "[", "2", "]", "]", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "\n", "# not tested", "\n", "if", "'gt_semantic_seg'", "in", "results", ":", "\n", "                    ", "results", "[", "'gt_semantic_seg'", "]", "=", "results", "[", "'gt_semantic_seg'", "]", "[", "\n", "patch", "[", "1", "]", ":", "patch", "[", "3", "]", ",", "patch", "[", "0", "]", ":", "patch", "[", "2", "]", "]", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.MinIoURandomCrop.__repr__": [[722, 727], ["None"], "methods", ["None"], ["", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "'(min_ious={}, min_crop_size={})'", ".", "format", "(", "\n", "self", ".", "min_ious", ",", "self", ".", "min_crop_size", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Corrupt.__init__": [[732, 735], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "corruption", ",", "severity", "=", "1", ")", ":", "\n", "        ", "self", ".", "corruption", "=", "corruption", "\n", "self", ".", "severity", "=", "severity", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Corrupt.__call__": [[736, 744], ["corrupt", "RuntimeError", "results[].astype"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "if", "corrupt", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "'imagecorruptions is not installed'", ")", "\n", "", "results", "[", "'img'", "]", "=", "corrupt", "(", "\n", "results", "[", "'img'", "]", ".", "astype", "(", "np", ".", "uint8", ")", ",", "\n", "corruption_name", "=", "self", ".", "corruption", ",", "\n", "severity", "=", "self", ".", "severity", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Corrupt.__repr__": [[745, 750], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "'(corruption={}, severity={})'", ".", "format", "(", "\n", "self", ".", "corruption", ",", "self", ".", "severity", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Albu.__init__": [[755, 802], ["Compose", "RuntimeError", "isinstance", "transforms.Albu.albu_builder", "transforms.Albu.albu_builder", "transforms.Albu.keymap_to_albu.items"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Albu.albu_builder", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Albu.albu_builder"], ["    ", "def", "__init__", "(", "self", ",", "\n", "transforms", ",", "\n", "bbox_params", "=", "None", ",", "\n", "keymap", "=", "None", ",", "\n", "update_pad_shape", "=", "False", ",", "\n", "skip_img_without_anno", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Adds custom transformations from Albumentations lib.\n        Please, visit `https://albumentations.readthedocs.io`\n        to get more information.\n\n        transforms (list): list of albu transformations\n        bbox_params (dict): bbox_params for albumentation `Compose`\n        keymap (dict): contains {'input key':'albumentation-style key'}\n        skip_img_without_anno (bool): whether to skip the image\n                                      if no ann left after aug\n        \"\"\"", "\n", "if", "Compose", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "'albumentations is not installed'", ")", "\n", "\n", "", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "filter_lost_elements", "=", "False", "\n", "self", ".", "update_pad_shape", "=", "update_pad_shape", "\n", "self", ".", "skip_img_without_anno", "=", "skip_img_without_anno", "\n", "\n", "# A simple workaround to remove masks without boxes", "\n", "if", "(", "isinstance", "(", "bbox_params", ",", "dict", ")", "and", "'label_fields'", "in", "bbox_params", "\n", "and", "'filter_lost_elements'", "in", "bbox_params", ")", ":", "\n", "            ", "self", ".", "filter_lost_elements", "=", "True", "\n", "self", ".", "origin_label_fields", "=", "bbox_params", "[", "'label_fields'", "]", "\n", "bbox_params", "[", "'label_fields'", "]", "=", "[", "'idx_mapper'", "]", "\n", "del", "bbox_params", "[", "'filter_lost_elements'", "]", "\n", "\n", "", "self", ".", "bbox_params", "=", "(", "\n", "self", ".", "albu_builder", "(", "bbox_params", ")", "if", "bbox_params", "else", "None", ")", "\n", "self", ".", "aug", "=", "Compose", "(", "[", "self", ".", "albu_builder", "(", "t", ")", "for", "t", "in", "self", ".", "transforms", "]", ",", "\n", "bbox_params", "=", "self", ".", "bbox_params", ")", "\n", "\n", "if", "not", "keymap", ":", "\n", "            ", "self", ".", "keymap_to_albu", "=", "{", "\n", "'img'", ":", "'image'", ",", "\n", "'gt_masks'", ":", "'masks'", ",", "\n", "'gt_bboxes'", ":", "'bboxes'", "\n", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "keymap_to_albu", "=", "keymap", "\n", "", "self", ".", "keymap_back", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "keymap_to_albu", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Albu.albu_builder": [[803, 834], ["cfg.copy", "cfg.copy.pop", "mmcv.is_str", "getattr.", "isinstance", "getattr", "inspect.isclass", "RuntimeError", "TypeError", "transforms.Albu.albu_builder", "type"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Albu.albu_builder"], ["", "def", "albu_builder", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "\"\"\"Import a module from albumentations.\n        Inherits some of `build_from_cfg` logic.\n\n        Args:\n            cfg (dict): Config dict. It should at least contain the key \"type\".\n        Returns:\n            obj: The constructed object.\n        \"\"\"", "\n", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "args", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "obj_type", "=", "args", ".", "pop", "(", "'type'", ")", "\n", "if", "mmcv", ".", "is_str", "(", "obj_type", ")", ":", "\n", "            ", "if", "albumentations", "is", "None", ":", "\n", "                ", "raise", "RuntimeError", "(", "'albumentations is not installed'", ")", "\n", "", "obj_cls", "=", "getattr", "(", "albumentations", ",", "obj_type", ")", "\n", "", "elif", "inspect", ".", "isclass", "(", "obj_type", ")", ":", "\n", "            ", "obj_cls", "=", "obj_type", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'type must be a str or valid type, but got {}'", ".", "format", "(", "\n", "type", "(", "obj_type", ")", ")", ")", "\n", "\n", "", "if", "'transforms'", "in", "args", ":", "\n", "            ", "args", "[", "'transforms'", "]", "=", "[", "\n", "self", ".", "albu_builder", "(", "transform", ")", "\n", "for", "transform", "in", "args", "[", "'transforms'", "]", "\n", "]", "\n", "\n", "", "return", "obj_cls", "(", "**", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Albu.mapper": [[835, 852], ["zip", "d.keys", "d.values", "keymap.get"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "@", "staticmethod", "\n", "def", "mapper", "(", "d", ",", "keymap", ")", ":", "\n", "        ", "\"\"\"\n        Dictionary mapper.\n        Renames keys according to keymap provided.\n\n        Args:\n            d (dict): old dict\n            keymap (dict): {'old_key':'new_key'}\n        Returns:\n            dict: new dict.\n        \"\"\"", "\n", "updated_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "zip", "(", "d", ".", "keys", "(", ")", ",", "d", ".", "values", "(", ")", ")", ":", "\n", "            ", "new_k", "=", "keymap", ".", "get", "(", "k", ",", "k", ")", "\n", "updated_dict", "[", "new_k", "]", "=", "d", "[", "k", "]", "\n", "", "return", "updated_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Albu.__call__": [[853, 900], ["transforms.Albu.mapper", "transforms.Albu.aug", "transforms.Albu.mapper", "isinstance", "isinstance", "results[].reshape", "isinstance", "results[].astype", "numpy.arange", "numpy.array", "numpy.array", "len", "numpy.array", "numpy.array", "len"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Albu.mapper", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Albu.mapper"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "# dict to albumentations format", "\n", "        ", "results", "=", "self", ".", "mapper", "(", "results", ",", "self", ".", "keymap_to_albu", ")", "\n", "\n", "if", "'bboxes'", "in", "results", ":", "\n", "# to list of boxes", "\n", "            ", "if", "isinstance", "(", "results", "[", "'bboxes'", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "results", "[", "'bboxes'", "]", "=", "[", "x", "for", "x", "in", "results", "[", "'bboxes'", "]", "]", "\n", "# add pseudo-field for filtration", "\n", "", "if", "self", ".", "filter_lost_elements", ":", "\n", "                ", "results", "[", "'idx_mapper'", "]", "=", "np", ".", "arange", "(", "len", "(", "results", "[", "'bboxes'", "]", ")", ")", "\n", "\n", "", "", "results", "=", "self", ".", "aug", "(", "**", "results", ")", "\n", "\n", "if", "'bboxes'", "in", "results", ":", "\n", "            ", "if", "isinstance", "(", "results", "[", "'bboxes'", "]", ",", "list", ")", ":", "\n", "                ", "results", "[", "'bboxes'", "]", "=", "np", ".", "array", "(", "\n", "results", "[", "'bboxes'", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "results", "[", "'bboxes'", "]", "=", "results", "[", "'bboxes'", "]", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "\n", "# filter label_fields", "\n", "if", "self", ".", "filter_lost_elements", ":", "\n", "\n", "                ", "for", "label", "in", "self", ".", "origin_label_fields", ":", "\n", "                    ", "results", "[", "label", "]", "=", "np", ".", "array", "(", "\n", "[", "results", "[", "label", "]", "[", "i", "]", "for", "i", "in", "results", "[", "'idx_mapper'", "]", "]", ")", "\n", "", "if", "'masks'", "in", "results", ":", "\n", "                    ", "results", "[", "'masks'", "]", "=", "np", ".", "array", "(", "\n", "[", "results", "[", "'masks'", "]", "[", "i", "]", "for", "i", "in", "results", "[", "'idx_mapper'", "]", "]", ")", "\n", "\n", "", "if", "(", "not", "len", "(", "results", "[", "'idx_mapper'", "]", ")", "\n", "and", "self", ".", "skip_img_without_anno", ")", ":", "\n", "                    ", "return", "None", "\n", "\n", "", "", "", "if", "'gt_labels'", "in", "results", ":", "\n", "            ", "if", "isinstance", "(", "results", "[", "'gt_labels'", "]", ",", "list", ")", ":", "\n", "                ", "results", "[", "'gt_labels'", "]", "=", "np", ".", "array", "(", "results", "[", "'gt_labels'", "]", ")", "\n", "", "results", "[", "'gt_labels'", "]", "=", "results", "[", "'gt_labels'", "]", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "# back to the original format", "\n", "", "results", "=", "self", ".", "mapper", "(", "results", ",", "self", ".", "keymap_back", ")", "\n", "\n", "# update final shape", "\n", "if", "self", ".", "update_pad_shape", ":", "\n", "            ", "results", "[", "'pad_shape'", "]", "=", "results", "[", "'img'", "]", ".", "shape", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.transforms.Albu.__repr__": [[901, 905], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "'(transforms={})'", ".", "format", "(", "self", ".", "transforms", ")", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.instaboost.InstaBoost.__init__": [[14, 34], ["instaboost.InstaBoostConfig", "ImportError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "action_candidate", "=", "(", "'normal'", ",", "'horizontal'", ",", "'skip'", ")", ",", "\n", "action_prob", "=", "(", "1", ",", "0", ",", "0", ")", ",", "\n", "scale", "=", "(", "0.8", ",", "1.2", ")", ",", "\n", "dx", "=", "15", ",", "\n", "dy", "=", "15", ",", "\n", "theta", "=", "(", "-", "1", ",", "1", ")", ",", "\n", "color_prob", "=", "0.5", ",", "\n", "hflag", "=", "False", ",", "\n", "aug_ratio", "=", "0.5", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "instaboostfast", "as", "instaboost", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "\n", "'Please run \"pip install instaboostfast\" '", "\n", "'to install instaboostfast first for instaboost augmentation.'", ")", "\n", "", "self", ".", "cfg", "=", "instaboost", ".", "InstaBoostConfig", "(", "action_candidate", ",", "action_prob", ",", "\n", "scale", ",", "dx", ",", "dy", ",", "theta", ",", "\n", "color_prob", ",", "hflag", ")", "\n", "self", ".", "aug_ratio", "=", "aug_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.instaboost.InstaBoost._load_anns": [[35, 55], ["len", "range", "anns.append"], "methods", ["None"], ["", "def", "_load_anns", "(", "self", ",", "results", ")", ":", "\n", "        ", "labels", "=", "results", "[", "'ann_info'", "]", "[", "'labels'", "]", "\n", "masks", "=", "results", "[", "'ann_info'", "]", "[", "'masks'", "]", "\n", "bboxes", "=", "results", "[", "'ann_info'", "]", "[", "'bboxes'", "]", "\n", "n", "=", "len", "(", "labels", ")", "\n", "\n", "anns", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "label", "=", "labels", "[", "i", "]", "\n", "bbox", "=", "bboxes", "[", "i", "]", "\n", "mask", "=", "masks", "[", "i", "]", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bbox", "\n", "bbox", "=", "[", "x1", ",", "y1", ",", "x2", "-", "x1", "+", "1", ",", "y2", "-", "y1", "+", "1", "]", "\n", "anns", ".", "append", "(", "{", "\n", "'category_id'", ":", "label", ",", "\n", "'segmentation'", ":", "mask", ",", "\n", "'bbox'", ":", "bbox", "\n", "}", ")", "\n", "\n", "", "return", "anns", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.instaboost.InstaBoost._parse_anns": [[56, 73], ["numpy.array", "numpy.array", "numpy.array.append", "numpy.array.append", "gt_masks_ann.append"], "methods", ["None"], ["", "def", "_parse_anns", "(", "self", ",", "results", ",", "anns", ",", "img", ")", ":", "\n", "        ", "gt_bboxes", "=", "[", "]", "\n", "gt_labels", "=", "[", "]", "\n", "gt_masks_ann", "=", "[", "]", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "x1", ",", "y1", ",", "w", ",", "h", "=", "ann", "[", "'bbox'", "]", "\n", "bbox", "=", "[", "x1", ",", "y1", ",", "x1", "+", "w", "-", "1", ",", "y1", "+", "h", "-", "1", "]", "\n", "gt_bboxes", ".", "append", "(", "bbox", ")", "\n", "gt_labels", ".", "append", "(", "ann", "[", "'category_id'", "]", ")", "\n", "gt_masks_ann", ".", "append", "(", "ann", "[", "'segmentation'", "]", ")", "\n", "", "gt_bboxes", "=", "np", ".", "array", "(", "gt_bboxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_labels", "=", "np", ".", "array", "(", "gt_labels", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "results", "[", "'ann_info'", "]", "[", "'labels'", "]", "=", "gt_labels", "\n", "results", "[", "'ann_info'", "]", "[", "'bboxes'", "]", "=", "gt_bboxes", "\n", "results", "[", "'ann_info'", "]", "[", "'masks'", "]", "=", "gt_masks_ann", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.instaboost.InstaBoost.__call__": [[74, 87], ["instaboost.InstaBoost._load_anns", "numpy.random.choice", "instaboost.InstaBoost._parse_anns", "instaboost.get_new_data", "ImportError"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.instaboost.InstaBoost._load_anns", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.instaboost.InstaBoost._parse_anns"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "img", "=", "results", "[", "'img'", "]", "\n", "anns", "=", "self", ".", "_load_anns", "(", "results", ")", "\n", "if", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", "]", ",", "p", "=", "[", "1", "-", "self", ".", "aug_ratio", ",", "self", ".", "aug_ratio", "]", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "import", "instaboostfast", "as", "instaboost", "\n", "", "except", "ImportError", ":", "\n", "                ", "raise", "ImportError", "(", "'Please run \"pip install instaboostfast\" '", "\n", "'to install instaboostfast first.'", ")", "\n", "", "anns", ",", "img", "=", "instaboost", ".", "get_new_data", "(", "\n", "anns", ",", "img", ",", "self", ".", "cfg", ",", "background", "=", "None", ")", "\n", "", "results", "=", "self", ".", "_parse_anns", "(", "results", ",", "anns", ",", "img", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.instaboost.InstaBoost.__repr__": [[88, 92], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "(", "'(cfg={}, aug_ratio={})'", ")", ".", "format", "(", "self", ".", "cfg", ",", "self", ".", "aug_ratio", ")", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadImageFromFile.__init__": [[13, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "to_float32", "=", "False", ",", "color_type", "=", "'color'", ")", ":", "\n", "        ", "self", ".", "to_float32", "=", "to_float32", "\n", "self", ".", "color_type", "=", "color_type", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadImageFromFile.__call__": [[17, 39], ["mmcv.imread", "dict", "os.join", "img.astype.astype.astype", "len", "numpy.zeros", "numpy.ones"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "if", "results", "[", "'img_prefix'", "]", "is", "not", "None", ":", "\n", "            ", "filename", "=", "osp", ".", "join", "(", "results", "[", "'img_prefix'", "]", ",", "\n", "results", "[", "'img_info'", "]", "[", "'filename'", "]", ")", "\n", "", "else", ":", "\n", "            ", "filename", "=", "results", "[", "'img_info'", "]", "[", "'filename'", "]", "\n", "", "img", "=", "mmcv", ".", "imread", "(", "filename", ",", "self", ".", "color_type", ")", "\n", "if", "self", ".", "to_float32", ":", "\n", "            ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "results", "[", "'filename'", "]", "=", "filename", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "num_channels", "=", "1", "if", "len", "(", "img", ".", "shape", ")", "<", "3", "else", "img", ".", "shape", "[", "2", "]", "\n", "results", "[", "'img_norm_cfg'", "]", "=", "dict", "(", "\n", "mean", "=", "np", ".", "zeros", "(", "num_channels", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "std", "=", "np", ".", "ones", "(", "num_channels", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "to_rgb", "=", "False", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadImageFromFile.__repr__": [[40, 43], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{} (to_float32={}, color_type={})'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "to_float32", ",", "self", ".", "color_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadMultiChannelImageFromFiles.__init__": [[51, 54], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "to_float32", "=", "True", ",", "color_type", "=", "'unchanged'", ")", ":", "\n", "        ", "self", ".", "to_float32", "=", "to_float32", "\n", "self", ".", "color_type", "=", "color_type", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadMultiChannelImageFromFiles.__call__": [[55, 72], ["numpy.stack", "img.astype.astype.astype", "os.join", "mmcv.imread"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "if", "results", "[", "'img_prefix'", "]", "is", "not", "None", ":", "\n", "            ", "filename", "=", "[", "\n", "osp", ".", "join", "(", "results", "[", "'img_prefix'", "]", ",", "fname", ")", "\n", "for", "fname", "in", "results", "[", "'img_info'", "]", "[", "'filename'", "]", "\n", "]", "\n", "", "else", ":", "\n", "            ", "filename", "=", "results", "[", "'img_info'", "]", "[", "'filename'", "]", "\n", "", "img", "=", "np", ".", "stack", "(", "\n", "[", "mmcv", ".", "imread", "(", "name", ",", "self", ".", "color_type", ")", "for", "name", "in", "filename", "]", ",", "axis", "=", "-", "1", ")", "\n", "if", "self", ".", "to_float32", ":", "\n", "            ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "results", "[", "'filename'", "]", "=", "filename", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadMultiChannelImageFromFiles.__repr__": [[73, 76], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{} (to_float32={}, color_type={})'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "to_float32", ",", "self", ".", "color_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadAnnotations.__init__": [[81, 92], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "with_bbox", "=", "True", ",", "\n", "with_label", "=", "True", ",", "\n", "with_mask", "=", "False", ",", "\n", "with_seg", "=", "False", ",", "\n", "poly2mask", "=", "True", ")", ":", "\n", "        ", "self", ".", "with_bbox", "=", "with_bbox", "\n", "self", ".", "with_label", "=", "with_label", "\n", "self", ".", "with_mask", "=", "with_mask", "\n", "self", ".", "with_seg", "=", "with_seg", "\n", "self", ".", "poly2mask", "=", "poly2mask", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadAnnotations._load_bboxes": [[93, 103], ["ann_info.get", "results[].append", "results[].append"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "def", "_load_bboxes", "(", "self", ",", "results", ")", ":", "\n", "        ", "ann_info", "=", "results", "[", "'ann_info'", "]", "\n", "results", "[", "'gt_bboxes'", "]", "=", "ann_info", "[", "'bboxes'", "]", "\n", "\n", "gt_bboxes_ignore", "=", "ann_info", ".", "get", "(", "'bboxes_ignore'", ",", "None", ")", "\n", "if", "gt_bboxes_ignore", "is", "not", "None", ":", "\n", "            ", "results", "[", "'gt_bboxes_ignore'", "]", "=", "gt_bboxes_ignore", "\n", "results", "[", "'bbox_fields'", "]", ".", "append", "(", "'gt_bboxes_ignore'", ")", "\n", "", "results", "[", "'bbox_fields'", "]", ".", "append", "(", "'gt_bboxes'", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadAnnotations._load_labels": [[104, 107], ["None"], "methods", ["None"], ["", "def", "_load_labels", "(", "self", ",", "results", ")", ":", "\n", "        ", "results", "[", "'gt_labels'", "]", "=", "results", "[", "'ann_info'", "]", "[", "'labels'", "]", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadAnnotations._poly2mask": [[108, 122], ["isinstance", "pycocotools.decode", "pycocotools.frPyObjects", "pycocotools.merge", "isinstance", "pycocotools.frPyObjects"], "methods", ["None"], ["", "def", "_poly2mask", "(", "self", ",", "mask_ann", ",", "img_h", ",", "img_w", ")", ":", "\n", "        ", "if", "isinstance", "(", "mask_ann", ",", "list", ")", ":", "\n", "# polygon -- a single object might consist of multiple parts", "\n", "# we merge all parts into one mask rle code", "\n", "            ", "rles", "=", "maskUtils", ".", "frPyObjects", "(", "mask_ann", ",", "img_h", ",", "img_w", ")", "\n", "rle", "=", "maskUtils", ".", "merge", "(", "rles", ")", "\n", "", "elif", "isinstance", "(", "mask_ann", "[", "'counts'", "]", ",", "list", ")", ":", "\n", "# uncompressed RLE", "\n", "            ", "rle", "=", "maskUtils", ".", "frPyObjects", "(", "mask_ann", ",", "img_h", ",", "img_w", ")", "\n", "", "else", ":", "\n", "# rle", "\n", "            ", "rle", "=", "mask_ann", "\n", "", "mask", "=", "maskUtils", ".", "decode", "(", "rle", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadAnnotations._load_masks": [[123, 131], ["results[].append", "loading.LoadAnnotations._poly2mask"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadAnnotations._poly2mask"], ["", "def", "_load_masks", "(", "self", ",", "results", ")", ":", "\n", "        ", "h", ",", "w", "=", "results", "[", "'img_info'", "]", "[", "'height'", "]", ",", "results", "[", "'img_info'", "]", "[", "'width'", "]", "\n", "gt_masks", "=", "results", "[", "'ann_info'", "]", "[", "'masks'", "]", "\n", "if", "self", ".", "poly2mask", ":", "\n", "            ", "gt_masks", "=", "[", "self", ".", "_poly2mask", "(", "mask", ",", "h", ",", "w", ")", "for", "mask", "in", "gt_masks", "]", "\n", "", "results", "[", "'gt_masks'", "]", "=", "gt_masks", "\n", "results", "[", "'mask_fields'", "]", ".", "append", "(", "'gt_masks'", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadAnnotations._load_semantic_seg": [[132, 138], ["mmcv.imread().squeeze", "results[].append", "mmcv.imread", "os.join"], "methods", ["None"], ["", "def", "_load_semantic_seg", "(", "self", ",", "results", ")", ":", "\n", "        ", "results", "[", "'gt_semantic_seg'", "]", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "results", "[", "'seg_prefix'", "]", ",", "results", "[", "'ann_info'", "]", "[", "'seg_map'", "]", ")", ",", "\n", "flag", "=", "'unchanged'", ")", ".", "squeeze", "(", ")", "\n", "results", "[", "'seg_fields'", "]", ".", "append", "(", "'gt_semantic_seg'", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadAnnotations.__call__": [[139, 151], ["loading.LoadAnnotations._load_bboxes", "loading.LoadAnnotations._load_labels", "loading.LoadAnnotations._load_masks", "loading.LoadAnnotations._load_semantic_seg"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadAnnotations._load_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadAnnotations._load_labels", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadAnnotations._load_masks", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadAnnotations._load_semantic_seg"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "if", "self", ".", "with_bbox", ":", "\n", "            ", "results", "=", "self", ".", "_load_bboxes", "(", "results", ")", "\n", "if", "results", "is", "None", ":", "\n", "                ", "return", "None", "\n", "", "", "if", "self", ".", "with_label", ":", "\n", "            ", "results", "=", "self", ".", "_load_labels", "(", "results", ")", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "results", "=", "self", ".", "_load_masks", "(", "results", ")", "\n", "", "if", "self", ".", "with_seg", ":", "\n", "            ", "results", "=", "self", ".", "_load_semantic_seg", "(", "results", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadAnnotations.__repr__": [[152, 158], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "(", "'(with_bbox={}, with_label={}, with_mask={},'", "\n", "' with_seg={})'", ")", ".", "format", "(", "self", ".", "with_bbox", ",", "self", ".", "with_label", ",", "\n", "self", ".", "with_mask", ",", "self", ".", "with_seg", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadProposals.__init__": [[163, 165], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_max_proposals", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_max_proposals", "=", "num_max_proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadProposals.__call__": [[166, 182], ["results[].append", "AssertionError", "len", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "proposals", "=", "results", "[", "'proposals'", "]", "\n", "if", "proposals", ".", "shape", "[", "1", "]", "not", "in", "(", "4", ",", "5", ")", ":", "\n", "            ", "raise", "AssertionError", "(", "\n", "'proposals should have shapes (n, 4) or (n, 5), '", "\n", "'but found {}'", ".", "format", "(", "proposals", ".", "shape", ")", ")", "\n", "", "proposals", "=", "proposals", "[", ":", ",", ":", "4", "]", "\n", "\n", "if", "self", ".", "num_max_proposals", "is", "not", "None", ":", "\n", "            ", "proposals", "=", "proposals", "[", ":", "self", ".", "num_max_proposals", "]", "\n", "\n", "", "if", "len", "(", "proposals", ")", "==", "0", ":", "\n", "            ", "proposals", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "results", "[", "'proposals'", "]", "=", "proposals", "\n", "results", "[", "'bbox_fields'", "]", ".", "append", "(", "'proposals'", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.loading.LoadProposals.__repr__": [[183, 186], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(num_max_proposals={})'", ".", "format", "(", "\n", "self", ".", "num_max_proposals", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.ToTensor.__init__": [[35, 37], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "keys", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.ToTensor.__call__": [[38, 42], ["formating.to_tensor"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.to_tensor"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "results", "[", "key", "]", "=", "to_tensor", "(", "results", "[", "key", "]", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.ToTensor.__repr__": [[43, 45], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(keys={})'", ".", "format", "(", "self", ".", "keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.ImageToTensor.__init__": [[50, 52], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "keys", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.ImageToTensor.__call__": [[53, 60], ["formating.to_tensor", "len", "numpy.expand_dims", "numpy.expand_dims.transpose"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.to_tensor"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "img", "=", "results", "[", "key", "]", "\n", "if", "len", "(", "img", ".", "shape", ")", "<", "3", ":", "\n", "                ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "-", "1", ")", "\n", "", "results", "[", "key", "]", "=", "to_tensor", "(", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.ImageToTensor.__repr__": [[61, 63], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(keys={})'", ".", "format", "(", "self", ".", "keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.Transpose.__init__": [[68, 71], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "keys", ",", "order", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "self", ".", "order", "=", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.Transpose.__call__": [[72, 76], ["results[].transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "results", "[", "key", "]", "=", "results", "[", "key", "]", ".", "transpose", "(", "self", ".", "order", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.Transpose.__repr__": [[77, 80], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(keys={}, order={})'", ".", "format", "(", "\n", "self", ".", "keys", ",", "self", ".", "order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.ToDataContainer.__init__": [[85, 89], ["dict", "dict", "dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "fields", "=", "(", "dict", "(", "key", "=", "'img'", ",", "stack", "=", "True", ")", ",", "dict", "(", "key", "=", "'gt_bboxes'", ")", ",", "\n", "dict", "(", "key", "=", "'gt_labels'", ")", ")", ")", ":", "\n", "        ", "self", ".", "fields", "=", "fields", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.ToDataContainer.__call__": [[90, 96], ["field.copy.copy.copy", "field.copy.copy.pop", "mmcv.parallel.DataContainer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "for", "field", "in", "self", ".", "fields", ":", "\n", "            ", "field", "=", "field", ".", "copy", "(", ")", "\n", "key", "=", "field", ".", "pop", "(", "'key'", ")", "\n", "results", "[", "key", "]", "=", "DC", "(", "results", "[", "key", "]", ",", "**", "field", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.ToDataContainer.__repr__": [[97, 99], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(fields={})'", ".", "format", "(", "self", ".", "fields", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.DefaultFormatBundle.__call__": [[119, 136], ["numpy.ascontiguousarray", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "len", "numpy.expand_dims", "numpy.expand_dims.transpose", "formating.to_tensor", "formating.to_tensor", "formating.to_tensor"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.to_tensor", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.to_tensor", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.to_tensor"], ["def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "if", "'img'", "in", "results", ":", "\n", "            ", "img", "=", "results", "[", "'img'", "]", "\n", "if", "len", "(", "img", ".", "shape", ")", "<", "3", ":", "\n", "                ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "-", "1", ")", "\n", "", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "results", "[", "'img'", "]", "=", "DC", "(", "to_tensor", "(", "img", ")", ",", "stack", "=", "True", ")", "\n", "", "for", "key", "in", "[", "'proposals'", ",", "'gt_bboxes'", ",", "'gt_bboxes_ignore'", ",", "'gt_labels'", "]", ":", "\n", "            ", "if", "key", "not", "in", "results", ":", "\n", "                ", "continue", "\n", "", "results", "[", "key", "]", "=", "DC", "(", "to_tensor", "(", "results", "[", "key", "]", ")", ")", "\n", "", "if", "'gt_masks'", "in", "results", ":", "\n", "            ", "results", "[", "'gt_masks'", "]", "=", "DC", "(", "results", "[", "'gt_masks'", "]", ",", "cpu_only", "=", "True", ")", "\n", "", "if", "'gt_semantic_seg'", "in", "results", ":", "\n", "            ", "results", "[", "'gt_semantic_seg'", "]", "=", "DC", "(", "\n", "to_tensor", "(", "results", "[", "'gt_semantic_seg'", "]", "[", "None", ",", "...", "]", ")", ",", "stack", "=", "True", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.DefaultFormatBundle.__repr__": [[137, 139], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.Collect.__init__": [[173, 179], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "keys", ",", "\n", "meta_keys", "=", "(", "'filename'", ",", "'ori_shape'", ",", "'img_shape'", ",", "'pad_shape'", ",", "\n", "'scale_factor'", ",", "'flip'", ",", "'img_norm_cfg'", ")", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "self", ".", "meta_keys", "=", "meta_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.Collect.__call__": [[180, 189], ["mmcv.parallel.DataContainer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "data", "=", "{", "}", "\n", "img_meta", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "meta_keys", ":", "\n", "            ", "img_meta", "[", "key", "]", "=", "results", "[", "key", "]", "\n", "", "data", "[", "'img_metas'", "]", "=", "DC", "(", "img_meta", ",", "cpu_only", "=", "True", ")", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "data", "[", "key", "]", "=", "results", "[", "key", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.Collect.__repr__": [[190, 193], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(keys={}, meta_keys={})'", ".", "format", "(", "\n", "self", ".", "keys", ",", "self", ".", "meta_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.WrapFieldsToLists.__call__": [[217, 222], ["results.items"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "# Wrap dict fields into lists", "\n", "        ", "for", "key", ",", "val", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "results", "[", "key", "]", "=", "[", "val", "]", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.WrapFieldsToLists.__repr__": [[223, 225], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}()'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.formating.to_tensor": [[11, 30], ["isinstance", "isinstance", "torch.from_numpy", "isinstance", "torch.tensor", "isinstance", "mmcv.is_str", "torch.LongTensor", "isinstance", "torch.FloatTensor", "TypeError", "type"], "function", ["None"], ["def", "to_tensor", "(", "data", ")", ":", "\n", "    ", "\"\"\"Convert objects of various python types to :obj:`torch.Tensor`.\n\n    Supported types are: :class:`numpy.ndarray`, :class:`torch.Tensor`,\n    :class:`Sequence`, :class:`int` and :class:`float`.\n    \"\"\"", "\n", "if", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "Sequence", ")", "and", "not", "mmcv", ".", "is_str", "(", "data", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "int", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "data", "]", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "[", "data", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'type {} cannot be converted to tensor.'", ".", "format", "(", "\n", "type", "(", "data", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.test_aug.MultiScaleFlipAug.__init__": [[10, 16], ["compose.Compose", "mmcv.is_list_of", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ",", "img_scale", ",", "flip", "=", "False", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "Compose", "(", "transforms", ")", "\n", "self", ".", "img_scale", "=", "img_scale", "if", "isinstance", "(", "img_scale", ",", "\n", "list", ")", "else", "[", "img_scale", "]", "\n", "assert", "mmcv", ".", "is_list_of", "(", "self", ".", "img_scale", ",", "tuple", ")", "\n", "self", ".", "flip", "=", "flip", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.test_aug.MultiScaleFlipAug.__call__": [[17, 33], ["test_aug.MultiScaleFlipAug.items", "results.copy", "test_aug.MultiScaleFlipAug.transforms", "aug_data.append", "aug_data_dict[].append"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "aug_data", "=", "[", "]", "\n", "flip_aug", "=", "[", "False", ",", "True", "]", "if", "self", ".", "flip", "else", "[", "False", "]", "\n", "for", "scale", "in", "self", ".", "img_scale", ":", "\n", "            ", "for", "flip", "in", "flip_aug", ":", "\n", "                ", "_results", "=", "results", ".", "copy", "(", ")", "\n", "_results", "[", "'scale'", "]", "=", "scale", "\n", "_results", "[", "'flip'", "]", "=", "flip", "\n", "data", "=", "self", ".", "transforms", "(", "_results", ")", "\n", "aug_data", ".", "append", "(", "data", ")", "\n", "# list of dict to dict of list", "\n", "", "", "aug_data_dict", "=", "{", "key", ":", "[", "]", "for", "key", "in", "aug_data", "[", "0", "]", "}", "\n", "for", "data", "in", "aug_data", ":", "\n", "            ", "for", "key", ",", "val", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "aug_data_dict", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "", "", "return", "aug_data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.test_aug.MultiScaleFlipAug.__repr__": [[34, 39], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "'(transforms={}, img_scale={}, flip={})'", ".", "format", "(", "\n", "self", ".", "transforms", ",", "self", ".", "img_scale", ",", "self", ".", "flip", ")", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.compose.Compose.__init__": [[10, 21], ["isinstance", "isinstance", "mmdet.utils.build_from_cfg", "compose.Compose.transforms.append", "callable", "compose.Compose.transforms.append", "TypeError"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.build_from_cfg"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "assert", "isinstance", "(", "transforms", ",", "collections", ".", "abc", ".", "Sequence", ")", "\n", "self", ".", "transforms", "=", "[", "]", "\n", "for", "transform", "in", "transforms", ":", "\n", "            ", "if", "isinstance", "(", "transform", ",", "dict", ")", ":", "\n", "                ", "transform", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "self", ".", "transforms", ".", "append", "(", "transform", ")", "\n", "", "elif", "callable", "(", "transform", ")", ":", "\n", "                ", "self", ".", "transforms", ".", "append", "(", "transform", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "'transform must be callable or a dict'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.compose.Compose.__call__": [[22, 28], ["t"], "methods", ["None"], ["", "", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "data", "=", "t", "(", "data", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "return", "None", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.pipelines.compose.Compose.__repr__": [[29, 36], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "'\\n'", "\n", "format_string", "+=", "'    {0}'", ".", "format", "(", "t", ")", "\n", "", "format_string", "+=", "'\\n)'", "\n", "return", "format_string", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.loader.sampler.DistributedSampler.__init__": [[13, 16], ["torch.utils.data.DistributedSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ",", "num_replicas", "=", "num_replicas", ",", "rank", "=", "rank", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.loader.sampler.DistributedSampler.__iter__": [[17, 35], ["iter", "torch.Generator", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.loader.sampler.GroupSampler.__init__": [[39, 49], ["hasattr", "dataset.flag.astype", "numpy.bincount", "enumerate", "int", "numpy.ceil"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "samples_per_gpu", "=", "1", ")", ":", "\n", "        ", "assert", "hasattr", "(", "dataset", ",", "'flag'", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "flag", "=", "dataset", ".", "flag", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "int", "(", "np", ".", "ceil", "(", "\n", "size", "/", "self", ".", "samples_per_gpu", ")", ")", "*", "self", ".", "samples_per_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.loader.sampler.GroupSampler.__iter__": [[50, 73], ["enumerate", "numpy.concatenate", "numpy.concatenate", "indices.astype().tolist.astype().tolist.astype().tolist", "iter", "numpy.random.shuffle", "numpy.concatenate", "indices.astype().tolist.astype().tolist.append", "len", "numpy.where", "len", "len", "numpy.random.permutation", "indices.astype().tolist.astype().tolist.astype", "int", "numpy.random.choice", "range", "numpy.ceil", "len"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", "==", "0", ":", "\n", "                ", "continue", "\n", "", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "np", ".", "random", ".", "shuffle", "(", "indice", ")", "\n", "num_extra", "=", "int", "(", "np", ".", "ceil", "(", "size", "/", "self", ".", "samples_per_gpu", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "-", "len", "(", "indice", ")", "\n", "indice", "=", "np", ".", "concatenate", "(", "\n", "[", "indice", ",", "np", ".", "random", ".", "choice", "(", "indice", ",", "num_extra", ")", "]", ")", "\n", "indices", ".", "append", "(", "indice", ")", "\n", "", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "[", "\n", "indices", "[", "i", "*", "self", ".", "samples_per_gpu", ":", "(", "i", "+", "1", ")", "*", "self", ".", "samples_per_gpu", "]", "\n", "for", "i", "in", "np", ".", "random", ".", "permutation", "(", "\n", "range", "(", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ")", ")", "\n", "]", "\n", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "indices", ".", "astype", "(", "np", ".", "int64", ")", ".", "tolist", "(", ")", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.loader.sampler.GroupSampler.__len__": [[74, 76], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.loader.sampler.DistributedGroupSampler.__init__": [[93, 119], ["mmcv.runner.get_dist_info", "hasattr", "numpy.bincount", "enumerate", "int", "math.ceil"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ")", ":", "\n", "        ", "_rank", ",", "_num_replicas", "=", "get_dist_info", "(", ")", "\n", "if", "num_replicas", "is", "None", ":", "\n", "            ", "num_replicas", "=", "_num_replicas", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "rank", "=", "_rank", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "\n", "assert", "hasattr", "(", "self", ".", "dataset", ",", "'flag'", ")", "\n", "self", ".", "flag", "=", "self", ".", "dataset", ".", "flag", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "int", "(", "\n", "math", ".", "ceil", "(", "self", ".", "group_sizes", "[", "i", "]", "*", "1.0", "/", "self", ".", "samples_per_gpu", "/", "\n", "self", ".", "num_replicas", ")", ")", "*", "self", ".", "samples_per_gpu", "\n", "", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.loader.sampler.DistributedGroupSampler.__iter__": [[120, 159], ["torch.Generator", "torch.Generator.manual_seed", "enumerate", "iter", "len", "len", "indice[].tolist", "indice[].tolist.copy", "range", "indice[].tolist.extend", "indices.extend", "list", "range", "numpy.where", "len", "len", "indice[].tolist.extend", "torch.randperm", "int", "len", "list", "math.ceil", "torch.randperm", "int"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "\n", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", ">", "0", ":", "\n", "                ", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "indice", "=", "indice", "[", "list", "(", "torch", ".", "randperm", "(", "int", "(", "size", ")", ",", "\n", "generator", "=", "g", ")", ")", "]", ".", "tolist", "(", ")", "\n", "extra", "=", "int", "(", "\n", "math", ".", "ceil", "(", "\n", "size", "*", "1.0", "/", "self", ".", "samples_per_gpu", "/", "self", ".", "num_replicas", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "*", "self", ".", "num_replicas", "-", "len", "(", "indice", ")", "\n", "# pad indice", "\n", "tmp", "=", "indice", ".", "copy", "(", ")", "\n", "for", "_", "in", "range", "(", "extra", "//", "size", ")", ":", "\n", "                    ", "indice", ".", "extend", "(", "tmp", ")", "\n", "", "indice", ".", "extend", "(", "tmp", "[", ":", "extra", "%", "size", "]", ")", "\n", "indices", ".", "extend", "(", "indice", ")", "\n", "\n", "", "", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "indices", "=", "[", "\n", "indices", "[", "j", "]", "for", "i", "in", "list", "(", "\n", "torch", ".", "randperm", "(", "\n", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ",", "generator", "=", "g", ")", ")", "\n", "for", "j", "in", "range", "(", "i", "*", "self", ".", "samples_per_gpu", ",", "(", "i", "+", "1", ")", "*", "\n", "self", ".", "samples_per_gpu", ")", "\n", "]", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.loader.sampler.DistributedGroupSampler.__len__": [[160, 162], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.loader.sampler.DistributedGroupSampler.set_epoch": [[163, 165], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.loader.build_loader.build_dataloader": [[21, 81], ["mmcv.runner.get_dist_info", "torch.utils.data.DataLoader", "functools.partial", "sampler.DistributedGroupSampler", "sampler.DistributedSampler", "sampler.GroupSampler", "functools.partial"], "function", ["None"], ["", "def", "build_dataloader", "(", "dataset", ",", "\n", "imgs_per_gpu", ",", "\n", "workers_per_gpu", ",", "\n", "num_gpus", "=", "1", ",", "\n", "dist", "=", "True", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Build PyTorch DataLoader.\n\n    In distributed training, each GPU/process has a dataloader.\n    In non-distributed training, there is only one dataloader for all GPUs.\n\n    Args:\n        dataset (Dataset): A PyTorch dataset.\n        imgs_per_gpu (int): Number of images on each GPU, i.e., batch size of\n            each GPU.\n        workers_per_gpu (int): How many subprocesses to use for data loading\n            for each GPU.\n        num_gpus (int): Number of GPUs. Only used in non-distributed training.\n        dist (bool): Distributed training/test or not. Default: True.\n        shuffle (bool): Whether to shuffle the data at every epoch.\n            Default: True.\n        kwargs: any keyword argument to be used to initialize DataLoader\n\n    Returns:\n        DataLoader: A PyTorch dataloader.\n    \"\"\"", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "dist", ":", "\n", "# DistributedGroupSampler will definitely shuffle the data to satisfy", "\n", "# that images on each GPU are in the same group", "\n", "        ", "if", "shuffle", ":", "\n", "            ", "sampler", "=", "DistributedGroupSampler", "(", "dataset", ",", "imgs_per_gpu", ",", "\n", "world_size", ",", "rank", ")", "\n", "", "else", ":", "\n", "            ", "sampler", "=", "DistributedSampler", "(", "\n", "dataset", ",", "world_size", ",", "rank", ",", "shuffle", "=", "False", ")", "\n", "", "batch_size", "=", "imgs_per_gpu", "\n", "num_workers", "=", "workers_per_gpu", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "GroupSampler", "(", "dataset", ",", "imgs_per_gpu", ")", "if", "shuffle", "else", "None", "\n", "batch_size", "=", "num_gpus", "*", "imgs_per_gpu", "\n", "num_workers", "=", "num_gpus", "*", "workers_per_gpu", "\n", "\n", "", "init_fn", "=", "partial", "(", "\n", "worker_init_fn", ",", "num_workers", "=", "num_workers", ",", "rank", "=", "rank", ",", "\n", "seed", "=", "seed", ")", "if", "seed", "is", "not", "None", "else", "None", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "partial", "(", "collate", ",", "samples_per_gpu", "=", "imgs_per_gpu", ")", ",", "\n", "pin_memory", "=", "False", ",", "\n", "worker_init_fn", "=", "init_fn", ",", "\n", "**", "kwargs", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.loader.build_loader.worker_init_fn": [[83, 89], ["numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "worker_init_fn", "(", "worker_id", ",", "num_workers", ",", "rank", ",", "seed", ")", ":", "\n", "# The seed of each worker equals to", "\n", "# num_worker * rank + worker_id + user_seed", "\n", "    ", "worker_seed", "=", "num_workers", "*", "rank", "+", "worker_id", "+", "seed", "\n", "np", ".", "random", ".", "seed", "(", "worker_seed", ")", "\n", "random", ".", "seed", "(", "worker_seed", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.inference.LoadImage.__call__": [[51, 61], ["isinstance", "mmcv.imread"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "if", "isinstance", "(", "results", "[", "'img'", "]", ",", "str", ")", ":", "\n", "            ", "results", "[", "'filename'", "]", "=", "results", "[", "'img'", "]", "\n", "", "else", ":", "\n", "            ", "results", "[", "'filename'", "]", "=", "None", "\n", "", "img", "=", "mmcv", ".", "imread", "(", "results", "[", "'img'", "]", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.inference.init_detector": [[16, 47], ["isinstance", "mmdet.models.build_detector", "mmdet.models.build_detector.to", "mmdet.models.build_detector.eval", "mmcv.Config.fromfile", "mmcv.runner.load_checkpoint", "isinstance", "TypeError", "warnings.warn", "mmdet.core.get_classes", "type"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_detector", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.class_names.get_classes"], ["def", "init_detector", "(", "config", ",", "checkpoint", "=", "None", ",", "device", "=", "'cuda:0'", ")", ":", "\n", "    ", "\"\"\"Initialize a detector from config file.\n\n    Args:\n        config (str or :obj:`mmcv.Config`): Config file path or the config\n            object.\n        checkpoint (str, optional): Checkpoint path. If left as None, the model\n            will not load any weights.\n\n    Returns:\n        nn.Module: The constructed detector.\n    \"\"\"", "\n", "if", "isinstance", "(", "config", ",", "str", ")", ":", "\n", "        ", "config", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "config", ")", "\n", "", "elif", "not", "isinstance", "(", "config", ",", "mmcv", ".", "Config", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'config must be a filename or Config object, '", "\n", "'but got {}'", ".", "format", "(", "type", "(", "config", ")", ")", ")", "\n", "", "config", ".", "model", ".", "pretrained", "=", "None", "\n", "model", "=", "build_detector", "(", "config", ".", "model", ",", "test_cfg", "=", "config", ".", "test_cfg", ")", "\n", "if", "checkpoint", "is", "not", "None", ":", "\n", "        ", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "checkpoint", ")", "\n", "if", "'CLASSES'", "in", "checkpoint", "[", "'meta'", "]", ":", "\n", "            ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Class names are not saved in the checkpoint\\'s '", "\n", "'meta data, use COCO classes by default.'", ")", "\n", "model", ".", "CLASSES", "=", "get_classes", "(", "'coco'", ")", "\n", "", "", "model", ".", "cfg", "=", "config", "# save the config in the model for convenience", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.inference.inference_detector": [[63, 88], ["mmdet.datasets.pipelines.Compose", "dict", "mmdet.datasets.pipelines.Compose.", "next", "mmcv.parallel.scatter", "torch.no_grad", "model", "model.parameters", "inference.LoadImage", "mmcv.parallel.collate"], "function", ["None"], ["", "", "def", "inference_detector", "(", "model", ",", "img", ")", ":", "\n", "    ", "\"\"\"Inference image(s) with the detector.\n\n    Args:\n        model (nn.Module): The loaded detector.\n        imgs (str/ndarray or list[str/ndarray]): Either image files or loaded\n            images.\n\n    Returns:\n        If imgs is a str, a generator will be returned, otherwise return the\n        detection results directly.\n    \"\"\"", "\n", "cfg", "=", "model", ".", "cfg", "\n", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "# model device", "\n", "# build the data pipeline", "\n", "test_pipeline", "=", "[", "LoadImage", "(", ")", "]", "+", "cfg", ".", "data", ".", "test", ".", "pipeline", "[", "1", ":", "]", "\n", "test_pipeline", "=", "Compose", "(", "test_pipeline", ")", "\n", "# prepare data", "\n", "data", "=", "dict", "(", "img", "=", "img", ")", "\n", "data", "=", "test_pipeline", "(", "data", ")", "\n", "data", "=", "scatter", "(", "collate", "(", "[", "data", "]", ",", "samples_per_gpu", "=", "1", ")", ",", "[", "device", "]", ")", "[", "0", "]", "\n", "# forward the model", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.inference.show_result": [[119, 185], ["isinstance", "mmcv.imread", "img.copy.copy", "isinstance", "numpy.vstack", "numpy.concatenate", "mmcv.imshow_det_bboxes", "numpy.full", "mmcv.concat_list", "numpy.random.seed", "enumerate", "numpy.where", "numpy.random.randint", "int", "pycocotools.decode().astype", "range", "pycocotools.decode", "max"], "function", ["None"], ["", "def", "show_result", "(", "img", ",", "\n", "result", ",", "\n", "class_names", ",", "\n", "score_thr", "=", "0.3", ",", "\n", "wait_time", "=", "0", ",", "\n", "show", "=", "True", ",", "\n", "out_file", "=", "None", ")", ":", "\n", "    ", "\"\"\"Visualize the detection results on the image.\n\n    Args:\n        img (str or np.ndarray): Image filename or loaded image.\n        result (tuple[list] or list): The detection result, can be either\n            (bbox, segm) or just bbox.\n        class_names (list[str] or tuple[str]): A list of class names.\n        score_thr (float): The threshold to visualize the bboxes and masks.\n        wait_time (int): Value of waitKey param.\n        show (bool, optional): Whether to show the image with opencv or not.\n        out_file (str, optional): If specified, the visualization result will\n            be written to the out file instead of shown in a window.\n\n    Returns:\n        np.ndarray or None: If neither `show` nor `out_file` is specified, the\n            visualized image is returned, otherwise None is returned.\n    \"\"\"", "\n", "assert", "isinstance", "(", "class_names", ",", "(", "tuple", ",", "list", ")", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "img", ")", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "if", "isinstance", "(", "result", ",", "tuple", ")", ":", "\n", "        ", "bbox_result", ",", "segm_result", "=", "result", "\n", "", "else", ":", "\n", "        ", "bbox_result", ",", "segm_result", "=", "result", ",", "None", "\n", "", "bboxes", "=", "np", ".", "vstack", "(", "bbox_result", ")", "\n", "labels", "=", "[", "\n", "np", ".", "full", "(", "bbox", ".", "shape", "[", "0", "]", ",", "i", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", ",", "bbox", "in", "enumerate", "(", "bbox_result", ")", "\n", "]", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "# draw segmentation masks", "\n", "if", "segm_result", "is", "not", "None", ":", "\n", "        ", "segms", "=", "mmcv", ".", "concat_list", "(", "segm_result", ")", "\n", "inds", "=", "np", ".", "where", "(", "bboxes", "[", ":", ",", "-", "1", "]", ">", "score_thr", ")", "[", "0", "]", "\n", "np", ".", "random", ".", "seed", "(", "42", ")", "\n", "color_masks", "=", "[", "\n", "np", ".", "random", ".", "randint", "(", "0", ",", "256", ",", "(", "1", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "_", "in", "range", "(", "max", "(", "labels", ")", "+", "1", ")", "\n", "]", "\n", "for", "i", "in", "inds", ":", "\n", "            ", "i", "=", "int", "(", "i", ")", "\n", "color_mask", "=", "color_masks", "[", "labels", "[", "i", "]", "]", "\n", "mask", "=", "maskUtils", ".", "decode", "(", "segms", "[", "i", "]", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "img", "[", "mask", "]", "=", "img", "[", "mask", "]", "*", "0.5", "+", "color_mask", "*", "0.5", "\n", "# if out_file specified, do not show image in window", "\n", "", "", "if", "out_file", "is", "not", "None", ":", "\n", "        ", "show", "=", "False", "\n", "# draw bounding boxes", "\n", "", "mmcv", ".", "imshow_det_bboxes", "(", "\n", "img", ",", "\n", "bboxes", ",", "\n", "labels", ",", "\n", "class_names", "=", "class_names", ",", "\n", "score_thr", "=", "score_thr", ",", "\n", "show", "=", "show", ",", "\n", "wait_time", "=", "wait_time", ",", "\n", "out_file", "=", "out_file", ")", "\n", "if", "not", "(", "show", "or", "out_file", ")", ":", "\n", "        ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.inference.show_result_pyplot": [[187, 208], ["inference.show_result", "matplotlib.figure", "matplotlib.imshow", "mmcv.bgr2rgb"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.show_result"], ["", "", "def", "show_result_pyplot", "(", "img", ",", "\n", "result", ",", "\n", "class_names", ",", "\n", "score_thr", "=", "0.3", ",", "\n", "fig_size", "=", "(", "15", ",", "10", ")", ")", ":", "\n", "    ", "\"\"\"Visualize the detection results on the image.\n\n    Args:\n        img (str or np.ndarray): Image filename or loaded image.\n        result (tuple[list] or list): The detection result, can be either\n            (bbox, segm) or just bbox.\n        class_names (list[str] or tuple[str]): A list of class names.\n        score_thr (float): The threshold to visualize the bboxes and masks.\n        fig_size (tuple): Figure size of the pyplot figure.\n        out_file (str, optional): If specified, the visualization result will\n            be written to the out file instead of shown in a window.\n    \"\"\"", "\n", "img", "=", "show_result", "(", "\n", "img", ",", "result", ",", "class_names", ",", "score_thr", "=", "score_thr", ",", "show", "=", "False", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "fig_size", ")", "\n", "plt", ".", "imshow", "(", "mmcv", ".", "bgr2rgb", "(", "img", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.train.set_random_seed": [[16, 33], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "set_random_seed", "(", "seed", ",", "deterministic", "=", "False", ")", ":", "\n", "    ", "\"\"\"Set random seed.\n\n    Args:\n        seed (int): Seed to be used.\n        deterministic (bool): Whether to set the deterministic option for\n            CUDNN backend, i.e., set `torch.backends.cudnn.deterministic`\n            to True and `torch.backends.cudnn.benchmark` to False.\n            Default: False.\n    \"\"\"", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "if", "deterministic", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.train.parse_losses": [[35, 57], ["collections.OrderedDict", "losses.items", "sum", "collections.OrderedDict.items", "isinstance", "loss_value.data.clone.item", "loss_value.data.clone.mean", "isinstance", "torch.is_available", "torch.is_initialized", "loss_value.data.clone.data.clone", "torch.all_reduce", "sum", "TypeError", "collections.OrderedDict.items", "loss_value.data.clone.div_", "torch.get_world_size", "_loss.mean"], "function", ["None"], ["", "", "def", "parse_losses", "(", "losses", ")", ":", "\n", "    ", "log_vars", "=", "OrderedDict", "(", ")", "\n", "for", "loss_name", ",", "loss_value", "in", "losses", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "loss_value", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "log_vars", "[", "loss_name", "]", "=", "loss_value", ".", "mean", "(", ")", "\n", "", "elif", "isinstance", "(", "loss_value", ",", "list", ")", ":", "\n", "            ", "log_vars", "[", "loss_name", "]", "=", "sum", "(", "_loss", ".", "mean", "(", ")", "for", "_loss", "in", "loss_value", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'{} is not a tensor or list of tensors'", ".", "format", "(", "loss_name", ")", ")", "\n", "\n", "", "", "loss", "=", "sum", "(", "_value", "for", "_key", ",", "_value", "in", "log_vars", ".", "items", "(", ")", "if", "'loss'", "in", "_key", ")", "\n", "\n", "log_vars", "[", "'loss'", "]", "=", "loss", "\n", "for", "loss_name", ",", "loss_value", "in", "log_vars", ".", "items", "(", ")", ":", "\n", "# reduce loss when distributed training", "\n", "        ", "if", "dist", ".", "is_available", "(", ")", "and", "dist", ".", "is_initialized", "(", ")", ":", "\n", "            ", "loss_value", "=", "loss_value", ".", "data", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "loss_value", ".", "div_", "(", "dist", ".", "get_world_size", "(", ")", ")", ")", "\n", "", "log_vars", "[", "loss_name", "]", "=", "loss_value", ".", "item", "(", ")", "\n", "\n", "", "return", "loss", ",", "log_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.train.batch_processor": [[59, 82], ["model", "train.parse_losses", "dict", "len"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.train.parse_losses"], ["", "def", "batch_processor", "(", "model", ",", "data", ",", "train_mode", ")", ":", "\n", "    ", "\"\"\"Process a data batch.\n\n    This method is required as an argument of Runner, which defines how to\n    process a data batch and obtain proper outputs. The first 3 arguments of\n    batch_processor are fixed.\n\n    Args:\n        model (nn.Module): A PyTorch model.\n        data (dict): The data batch in a dict.\n        train_mode (bool): Training mode or not. It may be useless for some\n            models.\n\n    Returns:\n        dict: A dict containing losses and log vars.\n    \"\"\"", "\n", "losses", "=", "model", "(", "**", "data", ")", "\n", "loss", ",", "log_vars", "=", "parse_losses", "(", "losses", ")", "\n", "\n", "outputs", "=", "dict", "(", "\n", "loss", "=", "loss", ",", "log_vars", "=", "log_vars", ",", "num_samples", "=", "len", "(", "data", "[", "'img'", "]", ".", "data", ")", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.train.train_detector": [[84, 112], ["mmdet.utils.get_root_logger", "train._dist_train", "train._non_dist_train"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.train._dist_train", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.train._non_dist_train"], ["", "def", "train_detector", "(", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "distributed", "=", "False", ",", "\n", "validate", "=", "False", ",", "\n", "timestamp", "=", "None", ",", "\n", "meta", "=", "None", ")", ":", "\n", "    ", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "\n", "# start training", "\n", "if", "distributed", ":", "\n", "        ", "_dist_train", "(", "\n", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "validate", "=", "validate", ",", "\n", "logger", "=", "logger", ",", "\n", "timestamp", "=", "timestamp", ",", "\n", "meta", "=", "meta", ")", "\n", "", "else", ":", "\n", "        ", "_non_dist_train", "(", "\n", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "validate", "=", "validate", ",", "\n", "logger", "=", "logger", ",", "\n", "timestamp", "=", "timestamp", ",", "\n", "meta", "=", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.train._dist_train": [[114, 182], ["cfg.get", "mmcv.parallel.MMDistributedDataParallel", "mmdet.core.build_optimizer", "mmcv.runner.Runner", "cfg.get", "mmcv.runner.Runner.register_training_hooks", "mmcv.runner.Runner.register_hook", "mmcv.runner.Runner.run", "isinstance", "mmdet.datasets.build_dataloader", "mmcv.parallel.MMDistributedDataParallel.cuda", "mmdet.core.Fp16OptimizerHook", "mmdet.core.DistOptimizerHook", "mmcv.runner.DistSamplerSeedHook", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "cfg.get", "mmcv.runner.Runner.register_hook", "mmcv.runner.Runner.resume", "dict", "mmdet.core.DistEvalHook", "mmcv.runner.Runner.load_checkpoint", "torch.cuda.current_device", "torch.cuda.current_device"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.optimizer.builder.build_optimizer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "", "def", "_dist_train", "(", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "validate", "=", "False", ",", "\n", "logger", "=", "None", ",", "\n", "timestamp", "=", "None", ",", "\n", "meta", "=", "None", ")", ":", "\n", "# prepare data loaders", "\n", "    ", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "\n", "ds", ",", "\n", "cfg", ".", "data", ".", "imgs_per_gpu", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "True", ",", "\n", "seed", "=", "cfg", ".", "seed", ")", "for", "ds", "in", "dataset", "\n", "]", "\n", "# put model on gpus", "\n", "find_unused_parameters", "=", "cfg", ".", "get", "(", "'find_unused_parameters'", ",", "False", ")", "\n", "# Sets the `find_unused_parameters` parameter in", "\n", "# torch.nn.parallel.DistributedDataParallel", "\n", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "find_unused_parameters", "=", "find_unused_parameters", ")", "\n", "\n", "# build runner", "\n", "optimizer", "=", "build_optimizer", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n", "runner", "=", "Runner", "(", "\n", "model", ",", "\n", "batch_processor", ",", "\n", "optimizer", ",", "\n", "cfg", ".", "work_dir", ",", "\n", "logger", "=", "logger", ",", "\n", "meta", "=", "meta", ")", "\n", "# an ugly walkaround to make the .log and .log.json filenames the same", "\n", "runner", ".", "timestamp", "=", "timestamp", "\n", "\n", "# fp16 setting", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "optimizer_config", "=", "Fp16OptimizerHook", "(", "**", "cfg", ".", "optimizer_config", ",", "\n", "**", "fp16_cfg", ")", "\n", "", "else", ":", "\n", "        ", "optimizer_config", "=", "DistOptimizerHook", "(", "**", "cfg", ".", "optimizer_config", ")", "\n", "\n", "# register hooks", "\n", "", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "cfg", ".", "log_config", ")", "\n", "runner", ".", "register_hook", "(", "DistSamplerSeedHook", "(", ")", ")", "\n", "# register eval hooks", "\n", "if", "validate", ":", "\n", "        ", "val_dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "val", ",", "dict", "(", "test_mode", "=", "True", ")", ")", "\n", "val_dataloader", "=", "build_dataloader", "(", "\n", "val_dataset", ",", "\n", "imgs_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "True", ",", "\n", "shuffle", "=", "False", ")", "\n", "eval_cfg", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", "\n", "runner", ".", "register_hook", "(", "DistEvalHook", "(", "val_dataloader", ",", "**", "eval_cfg", ")", ")", "\n", "\n", "", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "runner", ".", "load_checkpoint", "(", "cfg", ".", "load_from", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ",", "cfg", ".", "total_epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.train._non_dist_train": [[184, 243], ["mmcv.parallel.MMDataParallel().cuda", "mmdet.core.build_optimizer", "mmcv.runner.Runner", "cfg.get", "mmcv.runner.Runner.register_training_hooks", "mmcv.runner.Runner.run", "isinstance", "mmdet.datasets.build_dataloader", "mmdet.core.Fp16OptimizerHook", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "cfg.get", "mmcv.runner.Runner.register_hook", "mmcv.runner.Runner.resume", "mmcv.parallel.MMDataParallel", "dict", "mmdet.core.EvalHook", "mmcv.runner.Runner.load_checkpoint", "range"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.optimizer.builder.build_optimizer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "def", "_non_dist_train", "(", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "validate", "=", "False", ",", "\n", "logger", "=", "None", ",", "\n", "timestamp", "=", "None", ",", "\n", "meta", "=", "None", ")", ":", "\n", "# prepare data loaders", "\n", "    ", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "\n", "ds", ",", "\n", "cfg", ".", "data", ".", "imgs_per_gpu", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "cfg", ".", "gpus", ",", "\n", "dist", "=", "False", ",", "\n", "seed", "=", "cfg", ".", "seed", ")", "for", "ds", "in", "dataset", "\n", "]", "\n", "# put model on gpus", "\n", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "range", "(", "cfg", ".", "gpus", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "# build runner", "\n", "optimizer", "=", "build_optimizer", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n", "runner", "=", "Runner", "(", "\n", "model", ",", "\n", "batch_processor", ",", "\n", "optimizer", ",", "\n", "cfg", ".", "work_dir", ",", "\n", "logger", "=", "logger", ",", "\n", "meta", "=", "meta", ")", "\n", "# an ugly walkaround to make the .log and .log.json filenames the same", "\n", "runner", ".", "timestamp", "=", "timestamp", "\n", "# fp16 setting", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "optimizer_config", "=", "Fp16OptimizerHook", "(", "\n", "**", "cfg", ".", "optimizer_config", ",", "**", "fp16_cfg", ",", "distributed", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "optimizer_config", "=", "cfg", ".", "optimizer_config", "\n", "", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "cfg", ".", "log_config", ")", "\n", "\n", "# register eval hooks", "\n", "if", "validate", ":", "\n", "        ", "val_dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "val", ",", "dict", "(", "test_mode", "=", "True", ")", ")", "\n", "val_dataloader", "=", "build_dataloader", "(", "\n", "val_dataset", ",", "\n", "imgs_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "False", ",", "\n", "shuffle", "=", "False", ")", "\n", "eval_cfg", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", "\n", "runner", ".", "register_hook", "(", "EvalHook", "(", "val_dataloader", ",", "**", "eval_cfg", ")", ")", "\n", "\n", "", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "runner", ".", "load_checkpoint", "(", "cfg", ".", "load_from", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ",", "cfg", ".", "total_epochs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.test.single_gpu_test": [[12, 29], ["model.eval", "mmcv.ProgressBar", "enumerate", "len", "results.append", "[].size", "range", "torch.no_grad", "torch.no_grad", "model", "model.module.show_result", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.show_result"], ["def", "single_gpu_test", "(", "model", ",", "data_loader", ",", "show", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "not", "show", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "show", ":", "\n", "            ", "model", ".", "module", ".", "show_result", "(", "data", ",", "result", ")", "\n", "\n", "", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.test.multi_gpu_test": [[31, 72], ["model.eval", "mmcv.runner.get_dist_info", "enumerate", "mmcv.ProgressBar", "collect_results_cpu.append", "test.collect_results_gpu", "test.collect_results_cpu", "len", "torch.no_grad", "torch.no_grad", "model", "[].size", "range", "len", "len", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.test.collect_results_gpu", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.test.collect_results_cpu"], ["", "def", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "tmpdir", "=", "None", ",", "gpu_collect", "=", "False", ")", ":", "\n", "    ", "\"\"\"Test model with multiple gpus.\n\n    This method tests model with multiple gpus and collects the results\n    under two different modes: gpu and cpu modes. By setting 'gpu_collect=True'\n    it encodes results to gpu tensors and use gpu communication for results\n    collection. On cpu mode it saves the results on different gpus to 'tmpdir'\n    and collects them by the rank 0 worker.\n\n    Args:\n        model (nn.Module): Model to be tested.\n        data_loader (nn.Dataloader): Pytorch data loader.\n        tmpdir (str): Path of directory to save the temporary results from\n            different gpus under cpu mode.\n        gpu_collect (bool): Option to use either gpu or cpu to collect results.\n\n    Returns:\n        list: The prediction results.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", "*", "world_size", ")", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "# collect results from all ranks", "\n", "", "", "", "if", "gpu_collect", ":", "\n", "        ", "results", "=", "collect_results_gpu", "(", "results", ",", "len", "(", "dataset", ")", ")", "\n", "", "else", ":", "\n", "        ", "results", "=", "collect_results_cpu", "(", "results", ",", "len", "(", "dataset", ")", ",", "tmpdir", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.test.collect_results_cpu": [[74, 114], ["mmcv.runner.get_dist_info", "mmcv.dump", "torch.barrier", "torch.full", "torch.full", "torch.broadcast", "torch.full.cpu().numpy().tobytes().decode().rstrip", "mmcv.mkdir_or_exist", "os.join", "range", "zip", "shutil.rmtree", "tempfile.mkdtemp", "torch.tensor", "torch.tensor", "os.join", "part_list.append", "ordered_results.extend", "bytearray", "torch.full.cpu().numpy().tobytes().decode", "mmcv.load", "list", "torch.tensor.encode", "len", "torch.full.cpu().numpy().tobytes", "torch.full.cpu().numpy", "torch.full.cpu"], "function", ["None"], ["", "def", "collect_results_cpu", "(", "result_part", ",", "size", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# create a tmp dir if it is not specified", "\n", "if", "tmpdir", "is", "None", ":", "\n", "        ", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "\n", "32", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "'cuda'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "tmpdir", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "dir_tensor", "[", ":", "len", "(", "tmpdir", ")", "]", "=", "tmpdir", "\n", "", "dist", ".", "broadcast", "(", "dir_tensor", ",", "0", ")", "\n", "tmpdir", "=", "dir_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "", "else", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "tmpdir", ")", "\n", "# dump the part result to the dir", "\n", "", "mmcv", ".", "dump", "(", "result_part", ",", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "rank", ")", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "# collect all parts", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "# load results of all parts from tmp dir", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "part_file", "=", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "part_list", ".", "append", "(", "mmcv", ".", "load", "(", "part_file", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "# remove tmp dir", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "return", "ordered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.test.collect_results_gpu": [[116, 147], ["mmcv.runner.get_dist_info", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.all_gather", "torch.tensor().max", "torch.tensor().max", "torch.zeros", "torch.zeros", "torch.all_gather", "bytearray", "torch.tensor.clone", "torch.tensor.new_zeros", "zip", "zip", "pickle.dumps", "range", "torch.tensor", "torch.tensor", "range", "part_list.append", "ordered_results.extend", "pickle.loads", "list", "recv[].cpu().numpy().tobytes", "recv[].cpu().numpy", "recv[].cpu"], "function", ["None"], ["", "", "def", "collect_results_gpu", "(", "result_part", ",", "size", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# dump result part to tensor with pickle", "\n", "part_tensor", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "pickle", ".", "dumps", "(", "result_part", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "# gather all result part tensor shape", "\n", "shape_tensor", "=", "torch", ".", "tensor", "(", "part_tensor", ".", "shape", ",", "device", "=", "'cuda'", ")", "\n", "shape_list", "=", "[", "shape_tensor", ".", "clone", "(", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "shape_list", ",", "shape_tensor", ")", "\n", "# padding result part tensor to max length", "\n", "shape_max", "=", "torch", ".", "tensor", "(", "shape_list", ")", ".", "max", "(", ")", "\n", "part_send", "=", "torch", ".", "zeros", "(", "shape_max", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "part_send", "[", ":", "shape_tensor", "[", "0", "]", "]", "=", "part_tensor", "\n", "part_recv_list", "=", "[", "\n", "part_tensor", ".", "new_zeros", "(", "shape_max", ")", "for", "_", "in", "range", "(", "world_size", ")", "\n", "]", "\n", "# gather all result part", "\n", "dist", ".", "all_gather", "(", "part_recv_list", ",", "part_send", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "recv", ",", "shape", "in", "zip", "(", "part_recv_list", ",", "shape_list", ")", ":", "\n", "            ", "part_list", ".", "append", "(", "\n", "pickle", ".", "loads", "(", "recv", "[", ":", "shape", "[", "0", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "return", "ordered_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.activation.build_activation_layer": [[15, 39], ["cfg.copy", "cfg.copy.pop", "activation", "isinstance", "KeyError"], "function", ["None"], ["def", "build_activation_layer", "(", "cfg", ")", ":", "\n", "    ", "\"\"\" Build activation layer\n\n    Args:\n        cfg (dict): cfg should contain:\n            type (str): Identify activation layer type.\n            layer args: args needed to instantiate a activation layer.\n\n    Returns:\n        layer (nn.Module): Created activation layer\n    \"\"\"", "\n", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "layer_type", "=", "cfg_", ".", "pop", "(", "'type'", ")", "\n", "if", "layer_type", "not", "in", "activation_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "'Unrecognized activation type {}'", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "activation", "=", "activation_cfg", "[", "layer_type", "]", "\n", "if", "activation", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "layer", "=", "activation", "(", "**", "cfg_", ")", "\n", "return", "layer", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.non_local.NonLocal2D.__init__": [[24, 56], ["torch.Module.__init__", "conv_module.ConvModule", "conv_module.ConvModule", "conv_module.ConvModule", "conv_module.ConvModule", "non_local.NonLocal2D.init_weights"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "reduction", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "mode", "=", "'embedded_gaussian'", ")", ":", "\n", "        ", "super", "(", "NonLocal2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "use_scale", "=", "use_scale", "\n", "self", ".", "inter_channels", "=", "in_channels", "//", "reduction", "\n", "self", ".", "mode", "=", "mode", "\n", "assert", "mode", "in", "[", "'embedded_gaussian'", ",", "'dot_product'", "]", "\n", "\n", "# g, theta, phi are actually `nn.Conv2d`. Here we use ConvModule for", "\n", "# potential usage.", "\n", "self", ".", "g", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "self", ".", "inter_channels", ",", "kernel_size", "=", "1", ",", "act_cfg", "=", "None", ")", "\n", "self", ".", "theta", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "self", ".", "inter_channels", ",", "kernel_size", "=", "1", ",", "act_cfg", "=", "None", ")", "\n", "self", ".", "phi", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "self", ".", "inter_channels", ",", "kernel_size", "=", "1", ",", "act_cfg", "=", "None", ")", "\n", "self", ".", "conv_out", "=", "ConvModule", "(", "\n", "self", ".", "inter_channels", ",", "\n", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.non_local.NonLocal2D.init_weights": [[57, 64], ["mmcv.cnn.normal_init", "mmcv.cnn.constant_init", "mmcv.cnn.normal_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "std", "=", "0.01", ",", "zeros_init", "=", "True", ")", ":", "\n", "        ", "for", "m", "in", "[", "self", ".", "g", ",", "self", ".", "theta", ",", "self", ".", "phi", "]", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "std", ")", "\n", "", "if", "zeros_init", ":", "\n", "            ", "constant_init", "(", "self", ".", "conv_out", ".", "conv", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "normal_init", "(", "self", ".", "conv_out", ".", "conv", ",", "std", "=", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.non_local.NonLocal2D.embedded_gaussian": [[65, 73], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "pairwise_weight.softmax.softmax.softmax"], "methods", ["None"], ["", "", "def", "embedded_gaussian", "(", "self", ",", "theta_x", ",", "phi_x", ")", ":", "\n", "# pairwise_weight: [N, HxW, HxW]", "\n", "        ", "pairwise_weight", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "if", "self", ".", "use_scale", ":", "\n", "# theta_x.shape[-1] is `self.inter_channels`", "\n", "            ", "pairwise_weight", "/=", "theta_x", ".", "shape", "[", "-", "1", "]", "**", "0.5", "\n", "", "pairwise_weight", "=", "pairwise_weight", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "return", "pairwise_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.non_local.NonLocal2D.dot_product": [[74, 79], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "dot_product", "(", "self", ",", "theta_x", ",", "phi_x", ")", ":", "\n", "# pairwise_weight: [N, HxW, HxW]", "\n", "        ", "pairwise_weight", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "pairwise_weight", "/=", "pairwise_weight", ".", "shape", "[", "-", "1", "]", "\n", "return", "pairwise_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.non_local.NonLocal2D.forward": [[80, 106], ["non_local.NonLocal2D.g().view", "g_x.permute.permute.permute", "non_local.NonLocal2D.theta().view", "theta_x.permute.permute.permute", "non_local.NonLocal2D.phi().view", "getattr", "getattr.", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "y.permute().reshape.permute().reshape.permute().reshape", "non_local.NonLocal2D.conv_out", "non_local.NonLocal2D.g", "non_local.NonLocal2D.theta", "non_local.NonLocal2D.phi", "y.permute().reshape.permute().reshape.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "n", ",", "_", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "\n", "# g_x: [N, HxW, C]", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "# theta_x: [N, HxW, C]", "\n", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "# phi_x: [N, C, HxW]", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "\n", "pairwise_func", "=", "getattr", "(", "self", ",", "self", ".", "mode", ")", "\n", "# pairwise_weight: [N, HxW, HxW]", "\n", "pairwise_weight", "=", "pairwise_func", "(", "theta_x", ",", "phi_x", ")", "\n", "\n", "# y: [N, HxW, C]", "\n", "y", "=", "torch", ".", "matmul", "(", "pairwise_weight", ",", "g_x", ")", "\n", "# y: [N, C, H, W]", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "n", ",", "self", ".", "inter_channels", ",", "h", ",", "w", ")", "\n", "\n", "output", "=", "x", "+", "self", ".", "conv_out", "(", "y", ")", "\n", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.generalized_attention.GeneralizedAttention.__init__": [[34, 151], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "generalized_attention.GeneralizedAttention.init_weights", "bool", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "int", "numpy.ones", "range", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "int", "math.sqrt", "math.sqrt", "range", "torch.from_numpy().byte", "torch.from_numpy().byte", "torch.from_numpy().byte", "torch.from_numpy().byte", "torch.from_numpy().byte", "torch.from_numpy().byte", "torch.from_numpy().byte", "torch.from_numpy().byte", "torch.from_numpy().byte", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "max", "min", "max", "min"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["def", "__init__", "(", "self", ",", "\n", "in_dim", ",", "\n", "spatial_range", "=", "-", "1", ",", "\n", "num_heads", "=", "9", ",", "\n", "position_embedding_dim", "=", "-", "1", ",", "\n", "position_magnitude", "=", "1", ",", "\n", "kv_stride", "=", "2", ",", "\n", "q_stride", "=", "1", ",", "\n", "attention_type", "=", "'1111'", ")", ":", "\n", "\n", "        ", "super", "(", "GeneralizedAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# hard range means local range for non-local operation", "\n", "self", ".", "position_embedding_dim", "=", "(", "\n", "position_embedding_dim", "if", "position_embedding_dim", ">", "0", "else", "in_dim", ")", "\n", "\n", "self", ".", "position_magnitude", "=", "position_magnitude", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "channel_in", "=", "in_dim", "\n", "self", ".", "spatial_range", "=", "spatial_range", "\n", "self", ".", "kv_stride", "=", "kv_stride", "\n", "self", ".", "q_stride", "=", "q_stride", "\n", "self", ".", "attention_type", "=", "[", "bool", "(", "int", "(", "_", ")", ")", "for", "_", "in", "attention_type", "]", "\n", "self", ".", "qk_embed_dim", "=", "in_dim", "//", "num_heads", "\n", "out_c", "=", "self", ".", "qk_embed_dim", "*", "num_heads", "\n", "\n", "if", "self", ".", "attention_type", "[", "0", "]", "or", "self", ".", "attention_type", "[", "1", "]", ":", "\n", "            ", "self", ".", "query_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_dim", ",", "\n", "out_channels", "=", "out_c", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "query_conv", ".", "kaiming_init", "=", "True", "\n", "\n", "", "if", "self", ".", "attention_type", "[", "0", "]", "or", "self", ".", "attention_type", "[", "2", "]", ":", "\n", "            ", "self", ".", "key_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_dim", ",", "\n", "out_channels", "=", "out_c", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "key_conv", ".", "kaiming_init", "=", "True", "\n", "\n", "", "self", ".", "v_dim", "=", "in_dim", "//", "num_heads", "\n", "self", ".", "value_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_dim", ",", "\n", "out_channels", "=", "self", ".", "v_dim", "*", "num_heads", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "value_conv", ".", "kaiming_init", "=", "True", "\n", "\n", "if", "self", ".", "attention_type", "[", "1", "]", "or", "self", ".", "attention_type", "[", "3", "]", ":", "\n", "            ", "self", ".", "appr_geom_fc_x", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "position_embedding_dim", "//", "2", ",", "out_c", ",", "bias", "=", "False", ")", "\n", "self", ".", "appr_geom_fc_x", ".", "kaiming_init", "=", "True", "\n", "\n", "self", ".", "appr_geom_fc_y", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "position_embedding_dim", "//", "2", ",", "out_c", ",", "bias", "=", "False", ")", "\n", "self", ".", "appr_geom_fc_y", ".", "kaiming_init", "=", "True", "\n", "\n", "", "if", "self", ".", "attention_type", "[", "2", "]", ":", "\n", "            ", "stdv", "=", "1.0", "/", "math", ".", "sqrt", "(", "self", ".", "qk_embed_dim", "*", "2", ")", "\n", "appr_bias_value", "=", "-", "2", "*", "stdv", "*", "torch", ".", "rand", "(", "out_c", ")", "+", "stdv", "\n", "self", ".", "appr_bias", "=", "nn", ".", "Parameter", "(", "appr_bias_value", ")", "\n", "\n", "", "if", "self", ".", "attention_type", "[", "3", "]", ":", "\n", "            ", "stdv", "=", "1.0", "/", "math", ".", "sqrt", "(", "self", ".", "qk_embed_dim", "*", "2", ")", "\n", "geom_bias_value", "=", "-", "2", "*", "stdv", "*", "torch", ".", "rand", "(", "out_c", ")", "+", "stdv", "\n", "self", ".", "geom_bias", "=", "nn", ".", "Parameter", "(", "geom_bias_value", ")", "\n", "\n", "", "self", ".", "proj_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "self", ".", "v_dim", "*", "num_heads", ",", "\n", "out_channels", "=", "in_dim", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "proj_conv", ".", "kaiming_init", "=", "True", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "if", "self", ".", "spatial_range", ">=", "0", ":", "\n", "# only works when non local is after 3*3 conv", "\n", "            ", "if", "in_dim", "==", "256", ":", "\n", "                ", "max_len", "=", "84", "\n", "", "elif", "in_dim", "==", "512", ":", "\n", "                ", "max_len", "=", "42", "\n", "\n", "", "max_len_kv", "=", "int", "(", "(", "max_len", "-", "1.0", ")", "/", "self", ".", "kv_stride", "+", "1", ")", "\n", "local_constraint_map", "=", "np", ".", "ones", "(", "\n", "(", "max_len", ",", "max_len", ",", "max_len_kv", ",", "max_len_kv", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "iy", "in", "range", "(", "max_len", ")", ":", "\n", "                ", "for", "ix", "in", "range", "(", "max_len", ")", ":", "\n", "                    ", "local_constraint_map", "[", "\n", "iy", ",", "ix", ",", "\n", "max", "(", "(", "iy", "-", "self", ".", "spatial_range", ")", "//", "\n", "self", ".", "kv_stride", ",", "0", ")", ":", "min", "(", "(", "iy", "+", "self", ".", "spatial_range", "+", "\n", "1", ")", "//", "self", ".", "kv_stride", "+", "\n", "1", ",", "max_len", ")", ",", "\n", "max", "(", "(", "ix", "-", "self", ".", "spatial_range", ")", "//", "\n", "self", ".", "kv_stride", ",", "0", ")", ":", "min", "(", "(", "ix", "+", "self", ".", "spatial_range", "+", "\n", "1", ")", "//", "self", ".", "kv_stride", "+", "\n", "1", ",", "max_len", ")", "]", "=", "0", "\n", "\n", "", "", "self", ".", "local_constraint_map", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "from_numpy", "(", "local_constraint_map", ")", ".", "byte", "(", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "q_stride", ">", "1", ":", "\n", "            ", "self", ".", "q_downsample", "=", "nn", ".", "AvgPool2d", "(", "\n", "kernel_size", "=", "1", ",", "stride", "=", "self", ".", "q_stride", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "q_downsample", "=", "None", "\n", "\n", "", "if", "self", ".", "kv_stride", ">", "1", ":", "\n", "            ", "self", ".", "kv_downsample", "=", "nn", ".", "AvgPool2d", "(", "\n", "kernel_size", "=", "1", ",", "stride", "=", "self", ".", "kv_stride", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "kv_downsample", "=", "None", "\n", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.generalized_attention.GeneralizedAttention.get_position_embedding": [[152, 195], ["torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.linspace().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "dim_mat.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.view", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace().cuda.unsqueeze", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "get_position_embedding", "(", "self", ",", "\n", "h", ",", "\n", "w", ",", "\n", "h_kv", ",", "\n", "w_kv", ",", "\n", "q_stride", ",", "\n", "kv_stride", ",", "\n", "device", ",", "\n", "feat_dim", ",", "\n", "wave_length", "=", "1000", ")", ":", "\n", "        ", "h_idxs", "=", "torch", ".", "linspace", "(", "0", ",", "h", "-", "1", ",", "h", ")", ".", "cuda", "(", "device", ")", "\n", "h_idxs", "=", "h_idxs", ".", "view", "(", "(", "h", ",", "1", ")", ")", "*", "q_stride", "\n", "\n", "w_idxs", "=", "torch", ".", "linspace", "(", "0", ",", "w", "-", "1", ",", "w", ")", ".", "cuda", "(", "device", ")", "\n", "w_idxs", "=", "w_idxs", ".", "view", "(", "(", "w", ",", "1", ")", ")", "*", "q_stride", "\n", "\n", "h_kv_idxs", "=", "torch", ".", "linspace", "(", "0", ",", "h_kv", "-", "1", ",", "h_kv", ")", ".", "cuda", "(", "device", ")", "\n", "h_kv_idxs", "=", "h_kv_idxs", ".", "view", "(", "(", "h_kv", ",", "1", ")", ")", "*", "kv_stride", "\n", "\n", "w_kv_idxs", "=", "torch", ".", "linspace", "(", "0", ",", "w_kv", "-", "1", ",", "w_kv", ")", ".", "cuda", "(", "device", ")", "\n", "w_kv_idxs", "=", "w_kv_idxs", ".", "view", "(", "(", "w_kv", ",", "1", ")", ")", "*", "kv_stride", "\n", "\n", "# (h, h_kv, 1)", "\n", "h_diff", "=", "h_idxs", ".", "unsqueeze", "(", "1", ")", "-", "h_kv_idxs", ".", "unsqueeze", "(", "0", ")", "\n", "h_diff", "*=", "self", ".", "position_magnitude", "\n", "\n", "# (w, w_kv, 1)", "\n", "w_diff", "=", "w_idxs", ".", "unsqueeze", "(", "1", ")", "-", "w_kv_idxs", ".", "unsqueeze", "(", "0", ")", "\n", "w_diff", "*=", "self", ".", "position_magnitude", "\n", "\n", "feat_range", "=", "torch", ".", "arange", "(", "0", ",", "feat_dim", "/", "4", ")", ".", "cuda", "(", "device", ")", "\n", "\n", "dim_mat", "=", "torch", ".", "Tensor", "(", "[", "wave_length", "]", ")", ".", "cuda", "(", "device", ")", "\n", "dim_mat", "=", "dim_mat", "**", "(", "(", "4.", "/", "feat_dim", ")", "*", "feat_range", ")", "\n", "dim_mat", "=", "dim_mat", ".", "view", "(", "(", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "\n", "embedding_x", "=", "torch", ".", "cat", "(", "\n", "(", "(", "w_diff", "/", "dim_mat", ")", ".", "sin", "(", ")", ",", "(", "w_diff", "/", "dim_mat", ")", ".", "cos", "(", ")", ")", ",", "dim", "=", "2", ")", "\n", "\n", "embedding_y", "=", "torch", ".", "cat", "(", "\n", "(", "(", "h_diff", "/", "dim_mat", ")", ".", "sin", "(", ")", ",", "(", "h_diff", "/", "dim_mat", ")", ".", "cos", "(", ")", ")", ",", "dim", "=", "2", ")", "\n", "\n", "return", "embedding_x", ",", "embedding_y", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.generalized_attention.GeneralizedAttention.forward": [[196, 373], ["torch.softmax", "torch.softmax", "torch.softmax", "generalized_attention.GeneralizedAttention.value_conv", "generalized_attention.GeneralizedAttention.view().permute", "torch.matmul().permute().contiguous().view", "torch.matmul().permute().contiguous().view", "torch.matmul().permute().contiguous().view", "torch.matmul().permute().contiguous().view", "torch.matmul().permute().contiguous().view", "torch.matmul().permute().contiguous().view", "torch.matmul().permute().contiguous().view", "torch.matmul().permute().contiguous().view", "torch.matmul().permute().contiguous().view", "generalized_attention.GeneralizedAttention.proj_conv", "generalized_attention.GeneralizedAttention.q_downsample", "generalized_attention.GeneralizedAttention.kv_downsample", "generalized_attention.GeneralizedAttention.query_conv().view", "proj_query.permute.permute.permute", "generalized_attention.GeneralizedAttention.key_conv().view", "generalized_attention.GeneralizedAttention.get_position_embedding", "generalized_attention.GeneralizedAttention.appr_geom_fc_x().view().permute().repeat", "generalized_attention.GeneralizedAttention.appr_geom_fc_y().view().permute().repeat", "math.sqrt", "math.sqrt", "generalized_attention.GeneralizedAttention.appr_bias.view().repeat", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view.view", "torch.matmul().view.view", "torch.matmul().view.view", "generalized_attention.GeneralizedAttention.local_constraint_map[].contiguous().view", "torch.matmul().view.masked_fill_", "torch.matmul().view.masked_fill_", "torch.matmul().view.masked_fill_", "numpy.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "float", "generalized_attention.GeneralizedAttention.view", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "generalized_attention.GeneralizedAttention.query_conv", "generalized_attention.GeneralizedAttention.key_conv", "generalized_attention.GeneralizedAttention.appr_geom_fc_x().view().permute", "generalized_attention.GeneralizedAttention.appr_geom_fc_y().view().permute", "generalized_attention.GeneralizedAttention.appr_bias.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "generalized_attention.GeneralizedAttention.appr_bias.view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "generalized_attention.GeneralizedAttention.geom_bias.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "energy_x.view.view.permute().unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "energy_y.view.view.unsqueeze", "generalized_attention.GeneralizedAttention.local_constraint_map[].contiguous", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "proj_query_reshape.permute.permute.permute", "generalized_attention.GeneralizedAttention.permute", "generalized_attention.GeneralizedAttention.permute", "proj_query.permute.permute.view", "proj_query_reshape.permute.permute.permute", "generalized_attention.GeneralizedAttention.permute", "generalized_attention.GeneralizedAttention.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "energy_x.view.view.permute().unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "energy_y.view.view.unsqueeze", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "generalized_attention.GeneralizedAttention.appr_geom_fc_x().view", "generalized_attention.GeneralizedAttention.appr_geom_fc_y().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "generalized_attention.GeneralizedAttention.appr_bias.view().repeat", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "energy_x.view.view.permute", "generalized_attention.GeneralizedAttention.geom_bias.view().repeat", "generalized_attention.GeneralizedAttention.view", "generalized_attention.GeneralizedAttention.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "energy_x.view.view.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "energy_y.view.view.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "energy_x.view.view.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "generalized_attention.GeneralizedAttention.appr_geom_fc_x", "generalized_attention.GeneralizedAttention.appr_geom_fc_y", "generalized_attention.GeneralizedAttention.appr_bias.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "generalized_attention.GeneralizedAttention.geom_bias.view"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.generalized_attention.GeneralizedAttention.get_position_embedding"], ["", "def", "forward", "(", "self", ",", "x_input", ")", ":", "\n", "        ", "num_heads", "=", "self", ".", "num_heads", "\n", "\n", "# use empirical_attention", "\n", "if", "self", ".", "q_downsample", "is", "not", "None", ":", "\n", "            ", "x_q", "=", "self", ".", "q_downsample", "(", "x_input", ")", "\n", "", "else", ":", "\n", "            ", "x_q", "=", "x_input", "\n", "", "n", ",", "_", ",", "h", ",", "w", "=", "x_q", ".", "shape", "\n", "\n", "if", "self", ".", "kv_downsample", "is", "not", "None", ":", "\n", "            ", "x_kv", "=", "self", ".", "kv_downsample", "(", "x_input", ")", "\n", "", "else", ":", "\n", "            ", "x_kv", "=", "x_input", "\n", "", "_", ",", "_", ",", "h_kv", ",", "w_kv", "=", "x_kv", ".", "shape", "\n", "\n", "if", "self", ".", "attention_type", "[", "0", "]", "or", "self", ".", "attention_type", "[", "1", "]", ":", "\n", "            ", "proj_query", "=", "self", ".", "query_conv", "(", "x_q", ")", ".", "view", "(", "\n", "(", "n", ",", "num_heads", ",", "self", ".", "qk_embed_dim", ",", "h", "*", "w", ")", ")", "\n", "proj_query", "=", "proj_query", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "\n", "", "if", "self", ".", "attention_type", "[", "0", "]", "or", "self", ".", "attention_type", "[", "2", "]", ":", "\n", "            ", "proj_key", "=", "self", ".", "key_conv", "(", "x_kv", ")", ".", "view", "(", "\n", "(", "n", ",", "num_heads", ",", "self", ".", "qk_embed_dim", ",", "h_kv", "*", "w_kv", ")", ")", "\n", "\n", "", "if", "self", ".", "attention_type", "[", "1", "]", "or", "self", ".", "attention_type", "[", "3", "]", ":", "\n", "            ", "position_embed_x", ",", "position_embed_y", "=", "self", ".", "get_position_embedding", "(", "\n", "h", ",", "w", ",", "h_kv", ",", "w_kv", ",", "self", ".", "q_stride", ",", "self", ".", "kv_stride", ",", "\n", "x_input", ".", "device", ",", "self", ".", "position_embedding_dim", ")", "\n", "# (n, num_heads, w, w_kv, dim)", "\n", "position_feat_x", "=", "self", ".", "appr_geom_fc_x", "(", "position_embed_x", ")", ".", "view", "(", "1", ",", "w", ",", "w_kv", ",", "num_heads", ",", "self", ".", "qk_embed_dim", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ",", "4", ")", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "# (n, num_heads, h, h_kv, dim)", "\n", "position_feat_y", "=", "self", ".", "appr_geom_fc_y", "(", "position_embed_y", ")", ".", "view", "(", "1", ",", "h", ",", "h_kv", ",", "num_heads", ",", "self", ".", "qk_embed_dim", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ",", "4", ")", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "position_feat_x", "/=", "math", ".", "sqrt", "(", "2", ")", "\n", "position_feat_y", "/=", "math", ".", "sqrt", "(", "2", ")", "\n", "\n", "# accelerate for saliency only", "\n", "", "if", "(", "np", ".", "sum", "(", "self", ".", "attention_type", ")", "==", "1", ")", "and", "self", ".", "attention_type", "[", "2", "]", ":", "\n", "            ", "appr_bias", "=", "self", ".", "appr_bias", ".", "view", "(", "1", ",", "num_heads", ",", "1", ",", "self", ".", "qk_embed_dim", ")", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "energy", "=", "torch", ".", "matmul", "(", "appr_bias", ",", "proj_key", ")", ".", "view", "(", "n", ",", "num_heads", ",", "1", ",", "h_kv", "*", "w_kv", ")", "\n", "\n", "h", "=", "1", "\n", "w", "=", "1", "\n", "", "else", ":", "\n", "# (n, num_heads, h*w, h_kv*w_kv), query before key, 540mb for", "\n", "            ", "if", "not", "self", ".", "attention_type", "[", "0", "]", ":", "\n", "                ", "energy", "=", "torch", ".", "zeros", "(", "\n", "n", ",", "\n", "num_heads", ",", "\n", "h", ",", "\n", "w", ",", "\n", "h_kv", ",", "\n", "w_kv", ",", "\n", "dtype", "=", "x_input", ".", "dtype", ",", "\n", "device", "=", "x_input", ".", "device", ")", "\n", "\n", "# attention_type[0]: appr - appr", "\n", "# attention_type[1]: appr - position", "\n", "# attention_type[2]: bias - appr", "\n", "# attention_type[3]: bias - position", "\n", "", "if", "self", ".", "attention_type", "[", "0", "]", "or", "self", ".", "attention_type", "[", "2", "]", ":", "\n", "                ", "if", "self", ".", "attention_type", "[", "0", "]", "and", "self", ".", "attention_type", "[", "2", "]", ":", "\n", "                    ", "appr_bias", "=", "self", ".", "appr_bias", ".", "view", "(", "1", ",", "num_heads", ",", "1", ",", "self", ".", "qk_embed_dim", ")", "\n", "energy", "=", "torch", ".", "matmul", "(", "proj_query", "+", "appr_bias", ",", "proj_key", ")", ".", "view", "(", "n", ",", "num_heads", ",", "h", ",", "w", ",", "h_kv", ",", "w_kv", ")", "\n", "\n", "", "elif", "self", ".", "attention_type", "[", "0", "]", ":", "\n", "                    ", "energy", "=", "torch", ".", "matmul", "(", "proj_query", ",", "proj_key", ")", ".", "view", "(", "n", ",", "num_heads", ",", "h", ",", "w", ",", "h_kv", ",", "w_kv", ")", "\n", "\n", "", "elif", "self", ".", "attention_type", "[", "2", "]", ":", "\n", "                    ", "appr_bias", "=", "self", ".", "appr_bias", ".", "view", "(", "1", ",", "num_heads", ",", "1", ",", "self", ".", "qk_embed_dim", ")", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "energy", "+=", "torch", ".", "matmul", "(", "appr_bias", ",", "proj_key", ")", ".", "view", "(", "n", ",", "num_heads", ",", "1", ",", "1", ",", "h_kv", ",", "w_kv", ")", "\n", "\n", "", "", "if", "self", ".", "attention_type", "[", "1", "]", "or", "self", ".", "attention_type", "[", "3", "]", ":", "\n", "                ", "if", "self", ".", "attention_type", "[", "1", "]", "and", "self", ".", "attention_type", "[", "3", "]", ":", "\n", "                    ", "geom_bias", "=", "self", ".", "geom_bias", ".", "view", "(", "1", ",", "num_heads", ",", "1", ",", "self", ".", "qk_embed_dim", ")", "\n", "\n", "proj_query_reshape", "=", "(", "proj_query", "+", "geom_bias", ")", ".", "view", "(", "n", ",", "num_heads", ",", "h", ",", "w", ",", "self", ".", "qk_embed_dim", ")", "\n", "\n", "energy_x", "=", "torch", ".", "matmul", "(", "\n", "proj_query_reshape", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ")", ",", "\n", "position_feat_x", ".", "permute", "(", "0", ",", "1", ",", "2", ",", "4", ",", "3", ")", ")", "\n", "energy_x", "=", "energy_x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ")", ".", "unsqueeze", "(", "4", ")", "\n", "\n", "energy_y", "=", "torch", ".", "matmul", "(", "\n", "proj_query_reshape", ",", "\n", "position_feat_y", ".", "permute", "(", "0", ",", "1", ",", "2", ",", "4", ",", "3", ")", ")", "\n", "energy_y", "=", "energy_y", ".", "unsqueeze", "(", "5", ")", "\n", "\n", "energy", "+=", "energy_x", "+", "energy_y", "\n", "\n", "", "elif", "self", ".", "attention_type", "[", "1", "]", ":", "\n", "                    ", "proj_query_reshape", "=", "proj_query", ".", "view", "(", "n", ",", "num_heads", ",", "h", ",", "w", ",", "self", ".", "qk_embed_dim", ")", "\n", "proj_query_reshape", "=", "proj_query_reshape", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ")", "\n", "position_feat_x_reshape", "=", "position_feat_x", ".", "permute", "(", "0", ",", "1", ",", "2", ",", "4", ",", "3", ")", "\n", "position_feat_y_reshape", "=", "position_feat_y", ".", "permute", "(", "0", ",", "1", ",", "2", ",", "4", ",", "3", ")", "\n", "\n", "energy_x", "=", "torch", ".", "matmul", "(", "proj_query_reshape", ",", "\n", "position_feat_x_reshape", ")", "\n", "energy_x", "=", "energy_x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ")", ".", "unsqueeze", "(", "4", ")", "\n", "\n", "energy_y", "=", "torch", ".", "matmul", "(", "proj_query_reshape", ",", "\n", "position_feat_y_reshape", ")", "\n", "energy_y", "=", "energy_y", ".", "unsqueeze", "(", "5", ")", "\n", "\n", "energy", "+=", "energy_x", "+", "energy_y", "\n", "\n", "", "elif", "self", ".", "attention_type", "[", "3", "]", ":", "\n", "                    ", "geom_bias", "=", "self", ".", "geom_bias", ".", "view", "(", "1", ",", "num_heads", ",", "self", ".", "qk_embed_dim", ",", "1", ")", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "position_feat_x_reshape", "=", "position_feat_x", ".", "view", "(", "n", ",", "num_heads", ",", "w", "*", "w_kv", ",", "self", ".", "qk_embed_dim", ")", "\n", "\n", "position_feat_y_reshape", "=", "position_feat_y", ".", "view", "(", "n", ",", "num_heads", ",", "h", "*", "h_kv", ",", "self", ".", "qk_embed_dim", ")", "\n", "\n", "energy_x", "=", "torch", ".", "matmul", "(", "position_feat_x_reshape", ",", "geom_bias", ")", "\n", "energy_x", "=", "energy_x", ".", "view", "(", "n", ",", "num_heads", ",", "1", ",", "w", ",", "1", ",", "w_kv", ")", "\n", "\n", "energy_y", "=", "torch", ".", "matmul", "(", "position_feat_y_reshape", ",", "geom_bias", ")", "\n", "energy_y", "=", "energy_y", ".", "view", "(", "n", ",", "num_heads", ",", "h", ",", "1", ",", "h_kv", ",", "1", ")", "\n", "\n", "energy", "+=", "energy_x", "+", "energy_y", "\n", "\n", "", "", "energy", "=", "energy", ".", "view", "(", "n", ",", "num_heads", ",", "h", "*", "w", ",", "h_kv", "*", "w_kv", ")", "\n", "\n", "", "if", "self", ".", "spatial_range", ">=", "0", ":", "\n", "            ", "cur_local_constraint_map", "=", "self", ".", "local_constraint_map", "[", ":", "h", ",", ":", "w", ",", ":", "h_kv", ",", ":", "w_kv", "]", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "1", ",", "h", "*", "w", ",", "h_kv", "*", "w_kv", ")", "\n", "\n", "energy", "=", "energy", ".", "masked_fill_", "(", "cur_local_constraint_map", ",", "\n", "float", "(", "'-inf'", ")", ")", "\n", "\n", "", "attention", "=", "F", ".", "softmax", "(", "energy", ",", "3", ")", "\n", "\n", "proj_value", "=", "self", ".", "value_conv", "(", "x_kv", ")", "\n", "proj_value_reshape", "=", "proj_value", ".", "view", "(", "(", "n", ",", "num_heads", ",", "self", ".", "v_dim", ",", "h_kv", "*", "w_kv", ")", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "\n", "out", "=", "torch", ".", "matmul", "(", "attention", ",", "proj_value_reshape", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "n", ",", "self", ".", "v_dim", "*", "self", ".", "num_heads", ",", "h", ",", "w", ")", "\n", "\n", "out", "=", "self", ".", "proj_conv", "(", "out", ")", "\n", "out", "=", "self", ".", "gamma", "*", "out", "+", "x_input", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.generalized_attention.GeneralizedAttention.init_weights": [[374, 384], ["generalized_attention.GeneralizedAttention.modules", "hasattr", "mmcv.cnn.kaiming_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'kaiming_init'", ")", "and", "m", ".", "kaiming_init", ":", "\n", "                ", "kaiming_init", "(", "\n", "m", ",", "\n", "mode", "=", "'fan_in'", ",", "\n", "nonlinearity", "=", "'leaky_relu'", ",", "\n", "bias", "=", "0", ",", "\n", "distribution", "=", "'uniform'", ",", "\n", "a", "=", "1", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer": [[12, 56], ["cfg.copy", "cfg.copy.pop", "isinstance", "cfg.copy.pop", "cfg.copy.setdefault", "norm_layer.parameters", "isinstance", "KeyError", "str", "norm_layer", "norm_layer", "norm_layer._specify_ddp_gpu_num"], "function", ["None"], ["def", "build_norm_layer", "(", "cfg", ",", "num_features", ",", "postfix", "=", "''", ")", ":", "\n", "    ", "\"\"\" Build normalization layer\n\n    Args:\n        cfg (dict): cfg should contain:\n            type (str): identify norm layer type.\n            layer args: args needed to instantiate a norm layer.\n            requires_grad (bool): [optional] whether stop gradient updates\n        num_features (int): number of channels from input.\n        postfix (int, str): appended into norm abbreviation to\n            create named layer.\n\n    Returns:\n        name (str): abbreviation + postfix\n        layer (nn.Module): created norm layer\n    \"\"\"", "\n", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "layer_type", "=", "cfg_", ".", "pop", "(", "'type'", ")", "\n", "if", "layer_type", "not", "in", "norm_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "'Unrecognized norm type {}'", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "abbr", ",", "norm_layer", "=", "norm_cfg", "[", "layer_type", "]", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "assert", "isinstance", "(", "postfix", ",", "(", "int", ",", "str", ")", ")", "\n", "name", "=", "abbr", "+", "str", "(", "postfix", ")", "\n", "\n", "requires_grad", "=", "cfg_", ".", "pop", "(", "'requires_grad'", ",", "True", ")", "\n", "cfg_", ".", "setdefault", "(", "'eps'", ",", "1e-5", ")", "\n", "if", "layer_type", "!=", "'GN'", ":", "\n", "        ", "layer", "=", "norm_layer", "(", "num_features", ",", "**", "cfg_", ")", "\n", "if", "layer_type", "==", "'SyncBN'", ":", "\n", "            ", "layer", ".", "_specify_ddp_gpu_num", "(", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "'num_groups'", "in", "cfg_", "\n", "layer", "=", "norm_layer", "(", "num_channels", "=", "num_features", ",", "**", "cfg_", ")", "\n", "\n", "", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n", "", "return", "name", ",", "layer", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.scale.Scale.__init__": [[10, 13], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "scale", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "Scale", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "scale", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.scale.Scale.forward": [[14, 16], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "scale", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer": [[18, 44], ["cfg.copy.pop", "conv_layer", "dict", "cfg.copy", "KeyError", "isinstance"], "function", ["None"], ["def", "build_conv_layer", "(", "cfg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Build convolution layer\n\n    Args:\n        cfg (None or dict): cfg should contain:\n            type (str): identify conv layer type.\n            layer args: args needed to instantiate a conv layer.\n\n    Returns:\n        layer (nn.Module): created conv layer\n    \"\"\"", "\n", "if", "cfg", "is", "None", ":", "\n", "        ", "cfg_", "=", "dict", "(", "type", "=", "'Conv'", ")", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "", "layer_type", "=", "cfg_", ".", "pop", "(", "'type'", ")", "\n", "if", "layer_type", "not", "in", "conv_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "'Unrecognized norm type {}'", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "conv_layer", "=", "conv_cfg", "[", "layer_type", "]", "\n", "\n", "", "layer", "=", "conv_layer", "(", "*", "args", ",", "**", "kwargs", ",", "**", "cfg_", ")", "\n", "\n", "return", "layer", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv_module.ConvModule.__init__": [[34, 110], ["dict", "torch.Module.__init__", "conv.build_conv_layer", "conv_module.ConvModule.init_weights", "isinstance", "isinstance", "isinstance", "isinstance", "set", "set", "warnings.warn", "norm.build_norm_layer", "conv_module.ConvModule.add_module", "act_cfg.copy", "act_cfg.copy.setdefault", "activation.build_activation_layer", "len", "order.index", "order.index"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.activation.build_activation_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "'auto'", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "inplace", "=", "True", ",", "\n", "order", "=", "(", "'conv'", ",", "'norm'", ",", "'act'", ")", ")", ":", "\n", "        ", "super", "(", "ConvModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "conv_cfg", "is", "None", "or", "isinstance", "(", "conv_cfg", ",", "dict", ")", "\n", "assert", "norm_cfg", "is", "None", "or", "isinstance", "(", "norm_cfg", ",", "dict", ")", "\n", "assert", "act_cfg", "is", "None", "or", "isinstance", "(", "act_cfg", ",", "dict", ")", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "inplace", "=", "inplace", "\n", "self", ".", "order", "=", "order", "\n", "assert", "isinstance", "(", "self", ".", "order", ",", "tuple", ")", "and", "len", "(", "self", ".", "order", ")", "==", "3", "\n", "assert", "set", "(", "order", ")", "==", "set", "(", "[", "'conv'", ",", "'norm'", ",", "'act'", "]", ")", "\n", "\n", "self", ".", "with_norm", "=", "norm_cfg", "is", "not", "None", "\n", "self", ".", "with_activation", "=", "act_cfg", "is", "not", "None", "\n", "# if the conv layer is before a norm layer, bias is unnecessary.", "\n", "if", "bias", "==", "'auto'", ":", "\n", "            ", "bias", "=", "False", "if", "self", ".", "with_norm", "else", "True", "\n", "", "self", ".", "with_bias", "=", "bias", "\n", "\n", "if", "self", ".", "with_norm", "and", "self", ".", "with_bias", ":", "\n", "            ", "warnings", ".", "warn", "(", "'ConvModule has norm and bias at the same time'", ")", "\n", "\n", "# build convolution layer", "\n", "", "self", ".", "conv", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "# export the attributes of self.conv to a higher level for convenience", "\n", "self", ".", "in_channels", "=", "self", ".", "conv", ".", "in_channels", "\n", "self", ".", "out_channels", "=", "self", ".", "conv", ".", "out_channels", "\n", "self", ".", "kernel_size", "=", "self", ".", "conv", ".", "kernel_size", "\n", "self", ".", "stride", "=", "self", ".", "conv", ".", "stride", "\n", "self", ".", "padding", "=", "self", ".", "conv", ".", "padding", "\n", "self", ".", "dilation", "=", "self", ".", "conv", ".", "dilation", "\n", "self", ".", "transposed", "=", "self", ".", "conv", ".", "transposed", "\n", "self", ".", "output_padding", "=", "self", ".", "conv", ".", "output_padding", "\n", "self", ".", "groups", "=", "self", ".", "conv", ".", "groups", "\n", "\n", "# build normalization layers", "\n", "if", "self", ".", "with_norm", ":", "\n", "# norm layer is after conv layer", "\n", "            ", "if", "order", ".", "index", "(", "'norm'", ")", ">", "order", ".", "index", "(", "'conv'", ")", ":", "\n", "                ", "norm_channels", "=", "out_channels", "\n", "", "else", ":", "\n", "                ", "norm_channels", "=", "in_channels", "\n", "", "self", ".", "norm_name", ",", "norm", "=", "build_norm_layer", "(", "norm_cfg", ",", "norm_channels", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm_name", ",", "norm", ")", "\n", "\n", "# build activation layer", "\n", "", "if", "self", ".", "with_activation", ":", "\n", "            ", "act_cfg_", "=", "act_cfg", ".", "copy", "(", ")", "\n", "act_cfg_", ".", "setdefault", "(", "'inplace'", ",", "inplace", ")", "\n", "self", ".", "activate", "=", "build_activation_layer", "(", "act_cfg_", ")", "\n", "\n", "# Use msra init by default", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv_module.ConvModule.norm": [[111, 114], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv_module.ConvModule.init_weights": [[115, 123], ["mmcv.cnn.kaiming_init", "mmcv.cnn.constant_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "with_activation", "and", "self", ".", "act_cfg", "[", "'type'", "]", "==", "'LeakyReLU'", ":", "\n", "            ", "nonlinearity", "=", "'leaky_relu'", "\n", "", "else", ":", "\n", "            ", "nonlinearity", "=", "'relu'", "\n", "", "kaiming_init", "(", "self", ".", "conv", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "if", "self", ".", "with_norm", ":", "\n", "            ", "constant_init", "(", "self", ".", "norm", ",", "1", ",", "bias", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv_module.ConvModule.forward": [[124, 133], ["conv_module.ConvModule.conv", "conv_module.ConvModule.norm", "conv_module.ConvModule.activate"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv_module.ConvModule.norm"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "activate", "=", "True", ",", "norm", "=", "True", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "order", ":", "\n", "            ", "if", "layer", "==", "'conv'", ":", "\n", "                ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "elif", "layer", "==", "'norm'", "and", "norm", "and", "self", ".", "with_norm", ":", "\n", "                ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "elif", "layer", "==", "'act'", "and", "activate", "and", "self", ".", "with_activation", ":", "\n", "                ", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.saconv.SAConv2d.__init__": [[9, 72], ["conv_ws.ConvAWS2d.__init__", "torch.nn.Conv2d", "saconv.SAConv2d.switch.weight.data.fill_", "saconv.SAConv2d.switch.bias.data.fill_", "torch.nn.Parameter", "saconv.SAConv2d.weight_diff.data.zero_", "torch.nn.Conv2d", "saconv.SAConv2d.pre_context.weight.data.fill_", "saconv.SAConv2d.pre_context.bias.data.fill_", "torch.nn.Conv2d", "saconv.SAConv2d.post_context.weight.data.fill_", "saconv.SAConv2d.post_context.bias.data.fill_", "torch.Tensor", "torch.nn.Conv2d", "torch.nn.Conv2d", "saconv.SAConv2d.offset_s.weight.data.fill_", "saconv.SAConv2d.offset_s.bias.data.fill_", "saconv.SAConv2d.offset_l.weight.data.fill_", "saconv.SAConv2d.offset_l.bias.data.fill_", "saconv.SAConv2d.weight.size"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "use_deform", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "self", ".", "use_deform", "=", "use_deform", "\n", "self", ".", "switch", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "1", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "switch", ".", "weight", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "switch", ".", "bias", ".", "data", ".", "fill_", "(", "1", ")", "\n", "self", ".", "weight_diff", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "weight", ".", "size", "(", ")", ")", ")", "\n", "self", ".", "weight_diff", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "pre_context", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "pre_context", ".", "weight", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "pre_context", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "post_context", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "self", ".", "out_channels", ",", "\n", "self", ".", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "post_context", ".", "weight", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "post_context", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "if", "self", ".", "use_deform", ":", "\n", "            ", "self", ".", "offset_s", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "18", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "offset_l", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "18", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "offset_s", ".", "weight", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "offset_s", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "offset_l", ".", "weight", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "offset_l", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.saconv.SAConv2d.forward": [[73, 125], ["torch.nn.functional.adaptive_avg_pool2d", "saconv.SAConv2d.pre_context", "avg_x.expand_as.expand_as.expand_as", "torch.nn.functional.pad", "torch.nn.functional.avg_pool2d", "saconv.SAConv2d.switch", "saconv.SAConv2d._get_weight", "tuple", "tuple", "torch.nn.functional.adaptive_avg_pool2d", "saconv.SAConv2d.post_context", "avg_x.expand_as.expand_as.expand_as", "saconv.SAConv2d.offset_s", "dcn.deform_conv", "super().conv2d_forward", "saconv.SAConv2d.offset_l", "dcn.deform_conv", "super().conv2d_forward"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv_ws.ConvAWS2d._get_weight"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# pre-context", "\n", "        ", "avg_x", "=", "torch", ".", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "x", ",", "output_size", "=", "1", ")", "\n", "avg_x", "=", "self", ".", "pre_context", "(", "avg_x", ")", "\n", "avg_x", "=", "avg_x", ".", "expand_as", "(", "x", ")", "\n", "x", "=", "x", "+", "avg_x", "\n", "# switch", "\n", "avg_x", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "x", ",", "pad", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "mode", "=", "\"reflect\"", ")", "\n", "avg_x", "=", "torch", ".", "nn", ".", "functional", ".", "avg_pool2d", "(", "avg_x", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "switch", "=", "self", ".", "switch", "(", "avg_x", ")", "\n", "# sac", "\n", "weight", "=", "self", ".", "_get_weight", "(", "self", ".", "weight", ")", "\n", "if", "self", ".", "use_deform", ":", "\n", "            ", "offset", "=", "self", ".", "offset_s", "(", "avg_x", ")", "\n", "out_s", "=", "deform_conv", "(", "\n", "x", ",", "\n", "offset", ",", "\n", "weight", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "\n", "1", ")", "\n", "", "else", ":", "\n", "            ", "out_s", "=", "super", "(", ")", ".", "conv2d_forward", "(", "x", ",", "weight", ")", "\n", "", "ori_p", "=", "self", ".", "padding", "\n", "ori_d", "=", "self", ".", "dilation", "\n", "self", ".", "padding", "=", "tuple", "(", "3", "*", "p", "for", "p", "in", "self", ".", "padding", ")", "\n", "self", ".", "dilation", "=", "tuple", "(", "3", "*", "d", "for", "d", "in", "self", ".", "dilation", ")", "\n", "weight", "=", "weight", "+", "self", ".", "weight_diff", "\n", "if", "self", ".", "use_deform", ":", "\n", "            ", "offset", "=", "self", ".", "offset_l", "(", "avg_x", ")", "\n", "out_l", "=", "deform_conv", "(", "\n", "x", ",", "\n", "offset", ",", "\n", "weight", ",", "\n", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "\n", "1", ")", "\n", "", "else", ":", "\n", "            ", "out_l", "=", "super", "(", ")", ".", "conv2d_forward", "(", "x", ",", "weight", ")", "\n", "", "out", "=", "switch", "*", "out_s", "+", "(", "1", "-", "switch", ")", "*", "out_l", "\n", "self", ".", "padding", "=", "ori_p", "\n", "self", ".", "dilation", "=", "ori_d", "\n", "# post-context", "\n", "avg_x", "=", "torch", ".", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "out", ",", "output_size", "=", "1", ")", "\n", "avg_x", "=", "self", ".", "post_context", "(", "avg_x", ")", "\n", "avg_x", "=", "avg_x", ".", "expand_as", "(", "out", ")", "\n", "out", "=", "out", "+", "avg_x", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.context_block.ContextBlock.__init__": [[15, 53], ["torch.nn.Module.__init__", "isinstance", "all", "int", "context_block.ContextBlock.reset_parameters", "len", "torch.nn.Conv2d", "torch.nn.Softmax", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.LayerNorm", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LayerNorm", "torch.nn.ReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.ModulatedDeformConv.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "ratio", ",", "\n", "pooling_type", "=", "'att'", ",", "\n", "fusion_types", "=", "(", "'channel_add'", ",", ")", ")", ":", "\n", "        ", "super", "(", "ContextBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "pooling_type", "in", "[", "'avg'", ",", "'att'", "]", "\n", "assert", "isinstance", "(", "fusion_types", ",", "(", "list", ",", "tuple", ")", ")", "\n", "valid_fusion_types", "=", "[", "'channel_add'", ",", "'channel_mul'", "]", "\n", "assert", "all", "(", "[", "f", "in", "valid_fusion_types", "for", "f", "in", "fusion_types", "]", ")", "\n", "assert", "len", "(", "fusion_types", ")", ">", "0", ",", "'at least one fusion should be used'", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "planes", "=", "int", "(", "inplanes", "*", "ratio", ")", "\n", "self", ".", "pooling_type", "=", "pooling_type", "\n", "self", ".", "fusion_types", "=", "fusion_types", "\n", "if", "pooling_type", "==", "'att'", ":", "\n", "            ", "self", ".", "conv_mask", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "", "if", "'channel_add'", "in", "fusion_types", ":", "\n", "            ", "self", ".", "channel_add_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "self", ".", "planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "self", ".", "planes", ",", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# yapf: disable", "\n", "nn", ".", "Conv2d", "(", "self", ".", "planes", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "channel_add_conv", "=", "None", "\n", "", "if", "'channel_mul'", "in", "fusion_types", ":", "\n", "            ", "self", ".", "channel_mul_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "self", ".", "planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "self", ".", "planes", ",", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# yapf: disable", "\n", "nn", ".", "Conv2d", "(", "self", ".", "planes", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "channel_mul_conv", "=", "None", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.context_block.ContextBlock.reset_parameters": [[54, 63], ["mmcv.cnn.kaiming_init", "context_block.last_zero_init", "context_block.last_zero_init"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.context_block.last_zero_init", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.context_block.last_zero_init"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "pooling_type", "==", "'att'", ":", "\n", "            ", "kaiming_init", "(", "self", ".", "conv_mask", ",", "mode", "=", "'fan_in'", ")", "\n", "self", ".", "conv_mask", ".", "inited", "=", "True", "\n", "\n", "", "if", "self", ".", "channel_add_conv", "is", "not", "None", ":", "\n", "            ", "last_zero_init", "(", "self", ".", "channel_add_conv", ")", "\n", "", "if", "self", ".", "channel_mul_conv", "is", "not", "None", ":", "\n", "            ", "last_zero_init", "(", "self", ".", "channel_mul_conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.context_block.ContextBlock.spatial_pool": [[64, 89], ["x.size", "input_x.unsqueeze.unsqueeze.view", "input_x.unsqueeze.unsqueeze.unsqueeze", "context_block.ContextBlock.conv_mask", "context_mask.unsqueeze.unsqueeze.view", "context_block.ContextBlock.softmax", "context_mask.unsqueeze.unsqueeze.unsqueeze", "torch.matmul", "context_block.ContextBlock.view", "context_block.ContextBlock.avg_pool"], "methods", ["None"], ["", "", "def", "spatial_pool", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", ",", "channel", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "if", "self", ".", "pooling_type", "==", "'att'", ":", "\n", "            ", "input_x", "=", "x", "\n", "# [N, C, H * W]", "\n", "input_x", "=", "input_x", ".", "view", "(", "batch", ",", "channel", ",", "height", "*", "width", ")", "\n", "# [N, 1, C, H * W]", "\n", "input_x", "=", "input_x", ".", "unsqueeze", "(", "1", ")", "\n", "# [N, 1, H, W]", "\n", "context_mask", "=", "self", ".", "conv_mask", "(", "x", ")", "\n", "# [N, 1, H * W]", "\n", "context_mask", "=", "context_mask", ".", "view", "(", "batch", ",", "1", ",", "height", "*", "width", ")", "\n", "# [N, 1, H * W]", "\n", "context_mask", "=", "self", ".", "softmax", "(", "context_mask", ")", "\n", "# [N, 1, H * W, 1]", "\n", "context_mask", "=", "context_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# [N, 1, C, 1]", "\n", "context", "=", "torch", ".", "matmul", "(", "input_x", ",", "context_mask", ")", "\n", "# [N, C, 1, 1]", "\n", "context", "=", "context", ".", "view", "(", "batch", ",", "channel", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "# [N, C, 1, 1]", "\n", "            ", "context", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "\n", "", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.context_block.ContextBlock.forward": [[90, 105], ["context_block.ContextBlock.spatial_pool", "torch.sigmoid", "context_block.ContextBlock.channel_add_conv", "context_block.ContextBlock.channel_mul_conv"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.context_block.ContextBlock.spatial_pool"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# [N, C, 1, 1]", "\n", "        ", "context", "=", "self", ".", "spatial_pool", "(", "x", ")", "\n", "\n", "out", "=", "x", "\n", "if", "self", ".", "channel_mul_conv", "is", "not", "None", ":", "\n", "# [N, C, 1, 1]", "\n", "            ", "channel_mul_term", "=", "torch", ".", "sigmoid", "(", "self", ".", "channel_mul_conv", "(", "context", ")", ")", "\n", "out", "=", "out", "*", "channel_mul_term", "\n", "", "if", "self", ".", "channel_add_conv", "is", "not", "None", ":", "\n", "# [N, C, 1, 1]", "\n", "            ", "channel_add_term", "=", "self", ".", "channel_add_conv", "(", "context", ")", "\n", "out", "=", "out", "+", "channel_add_term", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.context_block.last_zero_init": [[6, 11], ["isinstance", "mmcv.cnn.constant_init", "mmcv.cnn.constant_init"], "function", ["None"], ["def", "last_zero_init", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", ":", "\n", "        ", "constant_init", "(", "m", "[", "-", "1", "]", ",", "val", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "constant_init", "(", "m", ",", "val", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.upsample.PixelShufflePack.__init__": [[21, 34], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "upsample.PixelShufflePack.init_weights"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "scale_factor", ",", "\n", "upsample_kernel", ")", ":", "\n", "        ", "super", "(", "PixelShufflePack", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "upsample_kernel", "=", "upsample_kernel", "\n", "self", ".", "upsample_conv", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", "*", "scale_factor", "*", "scale_factor", ",", "\n", "self", ".", "upsample_kernel", ",", "\n", "padding", "=", "(", "self", ".", "upsample_kernel", "-", "1", ")", "//", "2", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.upsample.PixelShufflePack.init_weights": [[35, 37], ["mmcv.cnn.xavier_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "xavier_init", "(", "self", ".", "upsample_conv", ",", "distribution", "=", "'uniform'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.upsample.PixelShufflePack.forward": [[38, 42], ["upsample.PixelShufflePack.upsample_conv", "torch.pixel_shuffle", "torch.pixel_shuffle"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "upsample_conv", "(", "x", ")", "\n", "x", "=", "F", ".", "pixel_shuffle", "(", "x", ",", "self", ".", "scale_factor", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.upsample.build_upsample_layer": [[54, 79], ["cfg.copy", "cfg.copy.pop", "upsample", "isinstance", "KeyError"], "function", ["None"], ["def", "build_upsample_layer", "(", "cfg", ")", ":", "\n", "    ", "\"\"\" Build upsample layer\n\n    Args:\n        cfg (dict): cfg should contain:\n            type (str): Identify upsample layer type.\n            upsample ratio (int): Upsample ratio\n            layer args: args needed to instantiate a upsample layer.\n\n    Returns:\n        layer (nn.Module): Created upsample layer\n    \"\"\"", "\n", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "layer_type", "=", "cfg_", ".", "pop", "(", "'type'", ")", "\n", "if", "layer_type", "not", "in", "upsample_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "'Unrecognized upsample type {}'", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "upsample", "=", "upsample_cfg", "[", "layer_type", "]", "\n", "if", "upsample", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "layer", "=", "upsample", "(", "**", "cfg_", ")", "\n", "return", "layer", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv_ws.ConvWS2d.__init__": [[24, 44], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "ConvWS2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv_ws.ConvWS2d.forward": [[45, 48], ["conv_ws.conv_ws_2d"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv_ws.conv_ws_2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "conv_ws_2d", "(", "x", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv_ws.ConvAWS2d.__init__": [[52, 72], ["torch.Conv2d.__init__", "conv_ws.ConvAWS2d.register_buffer", "conv_ws.ConvAWS2d.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "self", ".", "register_buffer", "(", "'weight_gamma'", ",", "torch", ".", "ones", "(", "self", ".", "out_channels", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "register_buffer", "(", "'weight_beta'", ",", "torch", ".", "zeros", "(", "self", ".", "out_channels", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv_ws.ConvAWS2d._get_weight": [[73, 81], ["weight.mean().mean().mean", "torch.sqrt().view", "torch.sqrt().view", "torch.sqrt().view", "torch.sqrt().view", "torch.sqrt().view", "torch.sqrt().view", "torch.sqrt().view", "torch.sqrt().view", "torch.sqrt().view", "weight.mean().mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "weight.mean", "weight.view().var", "weight.view", "weight.size"], "methods", ["None"], ["", "def", "_get_weight", "(", "self", ",", "weight", ")", ":", "\n", "        ", "weight_mean", "=", "weight", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "mean", "(", "dim", "=", "2", ",", "\n", "keepdim", "=", "True", ")", ".", "mean", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "\n", "weight", "=", "weight", "-", "weight_mean", "\n", "std", "=", "torch", ".", "sqrt", "(", "weight", ".", "view", "(", "weight", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "var", "(", "dim", "=", "1", ")", "+", "1e-5", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "weight", "=", "weight", "/", "std", "\n", "weight", "=", "self", ".", "weight_gamma", "*", "weight", "+", "self", ".", "weight_beta", "\n", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv_ws.ConvAWS2d.forward": [[82, 85], ["conv_ws.ConvAWS2d._get_weight", "super().conv2d_forward"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv_ws.ConvAWS2d._get_weight"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "weight", "=", "self", ".", "_get_weight", "(", "self", ".", "weight", ")", "\n", "return", "super", "(", ")", ".", "conv2d_forward", "(", "x", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv_ws.ConvAWS2d._load_from_state_dict": [[86, 99], ["conv_ws.ConvAWS2d.weight_gamma.data.fill_", "super()._load_from_state_dict", "weight.data.mean().mean().mean", "conv_ws.ConvAWS2d.weight_beta.data.copy_", "torch.sqrt().view", "torch.sqrt().view", "torch.sqrt().view", "torch.sqrt().view", "torch.sqrt().view", "torch.sqrt().view", "torch.sqrt().view", "torch.sqrt().view", "torch.sqrt().view", "conv_ws.ConvAWS2d.weight_gamma.data.copy_", "conv_ws.ConvAWS2d.weight_gamma.data.mean", "weight.data.mean().mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "weight.data.mean", "weight.view().var", "weight.view", "weight.size"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.ModulatedDeformConvPack._load_from_state_dict"], ["", "def", "_load_from_state_dict", "(", "self", ",", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", ":", "\n", "        ", "self", ".", "weight_gamma", ".", "data", ".", "fill_", "(", "-", "1", ")", "\n", "super", "(", ")", ".", "_load_from_state_dict", "(", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "if", "self", ".", "weight_gamma", ".", "data", ".", "mean", "(", ")", ">", "0", ":", "\n", "            ", "return", "\n", "", "weight", "=", "self", ".", "weight", ".", "data", "\n", "weight_mean", "=", "weight", ".", "data", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "mean", "(", "dim", "=", "2", ",", "\n", "keepdim", "=", "True", ")", ".", "mean", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "\n", "self", ".", "weight_beta", ".", "data", ".", "copy_", "(", "weight_mean", ")", "\n", "std", "=", "torch", ".", "sqrt", "(", "weight", ".", "view", "(", "weight", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "var", "(", "dim", "=", "1", ")", "+", "1e-5", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "weight_gamma", ".", "data", ".", "copy_", "(", "std", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv_ws.conv_ws_2d": [[6, 20], ["weight.size", "weight.view", "weight.view.mean().view", "weight.view.std().view", "torch.conv2d", "weight.view.mean", "weight.view.std"], "function", ["None"], ["def", "conv_ws_2d", "(", "input", ",", "\n", "weight", ",", "\n", "bias", "=", "None", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "eps", "=", "1e-5", ")", ":", "\n", "    ", "c_in", "=", "weight", ".", "size", "(", "0", ")", "\n", "weight_flat", "=", "weight", ".", "view", "(", "c_in", ",", "-", "1", ")", "\n", "mean", "=", "weight_flat", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "c_in", ",", "1", ",", "1", ",", "1", ")", "\n", "std", "=", "weight_flat", ".", "std", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "c_in", ",", "1", ",", "1", ",", "1", ")", "\n", "weight", "=", "(", "weight", "-", "mean", ")", "/", "(", "std", "+", "eps", ")", "\n", "return", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "bias", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.affine_grid.affine_grid._AffineGridGenerator.forward": [[11, 23], ["ctx.save_for_backward", "func"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "theta", ",", "size", ",", "align_corners", ")", ":", "\n", "\n", "        ", "ctx", ".", "save_for_backward", "(", "theta", ")", "\n", "ctx", ".", "size", "=", "size", "\n", "ctx", ".", "align_corners", "=", "align_corners", "\n", "\n", "func", "=", "affine_grid_cuda", ".", "affine_grid_generator_forward", "\n", "\n", "output", "=", "func", "(", "theta", ",", "size", ",", "align_corners", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.affine_grid.affine_grid._AffineGridGenerator.backward": [[24, 36], ["func"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "theta", "=", "ctx", ".", "saved_tensors", "\n", "size", "=", "ctx", ".", "size", "\n", "align_corners", "=", "ctx", ".", "align_corners", "\n", "\n", "func", "=", "affine_grid_cuda", ".", "affine_grid_generator_backward", "\n", "\n", "grad_input", "=", "func", "(", "grad_output", ",", "theta", ",", "size", ",", "align_corners", ")", "\n", "\n", "return", "grad_input", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.affine_grid.affine_grid.affine_grid": [[38, 69], ["torch.affine_grid", "torch.affine_grid", "_AffineGridGenerator.apply", "theta.is_floating_point", "ValueError", "len", "min", "ValueError", "ValueError", "len", "NotImplementedError", "theta.dim", "theta.size", "theta.size", "ValueError", "theta.dim", "theta.size", "theta.size"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.affine_grid.affine_grid.affine_grid", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.affine_grid.affine_grid.affine_grid"], ["", "", "def", "affine_grid", "(", "theta", ",", "size", ",", "align_corners", "=", "False", ")", ":", "\n", "    ", "if", "torch", ".", "__version__", ">=", "'1.3'", ":", "\n", "        ", "return", "F", ".", "affine_grid", "(", "theta", ",", "size", ",", "align_corners", ")", "\n", "", "elif", "align_corners", ":", "\n", "        ", "return", "F", ".", "affine_grid", "(", "theta", ",", "size", ")", "\n", "", "else", ":", "\n", "# enforce floating point dtype on theta", "\n", "        ", "if", "not", "theta", ".", "is_floating_point", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Expected theta to have floating point type, but got {}'", ".", "\n", "format", "(", "theta", ".", "dtype", ")", ")", "\n", "# check that shapes and sizes match", "\n", "", "if", "len", "(", "size", ")", "==", "4", ":", "\n", "            ", "if", "theta", ".", "dim", "(", ")", "!=", "3", "or", "theta", ".", "size", "(", "-", "2", ")", "!=", "2", "or", "theta", ".", "size", "(", "-", "1", ")", "!=", "3", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'Expected a batch of 2D affine matrices of shape Nx2x3 '", "\n", "'for size {}. Got {}.'", ".", "format", "(", "size", ",", "theta", ".", "shape", ")", ")", "\n", "", "", "elif", "len", "(", "size", ")", "==", "5", ":", "\n", "            ", "if", "theta", ".", "dim", "(", ")", "!=", "3", "or", "theta", ".", "size", "(", "-", "2", ")", "!=", "3", "or", "theta", ".", "size", "(", "-", "1", ")", "!=", "4", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'Expected a batch of 3D affine matrices of shape Nx3x4 '", "\n", "'for size {}. Got {}.'", ".", "format", "(", "size", ",", "theta", ".", "shape", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'affine_grid only supports 4D and 5D sizes, '", "\n", "'for 2D and 3D affine transforms, respectively. '", "\n", "'Got size {}.'", ".", "format", "(", "size", ")", ")", "\n", "", "if", "min", "(", "size", ")", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Expected non-zero, positive output size. Got {}'", ".", "format", "(", "size", ")", ")", "\n", "", "return", "_AffineGridGenerator", ".", "apply", "(", "theta", ",", "size", ",", "align_corners", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.masked_conv.masked_conv.MaskedConv2dFunction.forward": [[14, 54], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "weight.size", "features.size", "int", "int", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "features.new_zeros", "ValueError", "math.floor", "math.floor", "torch.nonzero.numel", "torch.nonzero.numel", "mask_inds[].contiguous", "mask_inds[].contiguous", "features.new_zeros", "masked_conv2d_cuda.masked_im2col_forward", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "masked_conv2d_cuda.masked_col2im_forward", "mask.dim", "mask.size", "features.dim", "features.size", "features.size", "mask.size", "torch.nonzero.size", "torch.nonzero.size", "weight.view", "features.size", "features.size"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "mask", ",", "weight", ",", "bias", ",", "padding", "=", "0", ",", "stride", "=", "1", ")", ":", "\n", "        ", "assert", "mask", ".", "dim", "(", ")", "==", "3", "and", "mask", ".", "size", "(", "0", ")", "==", "1", "\n", "assert", "features", ".", "dim", "(", ")", "==", "4", "and", "features", ".", "size", "(", "0", ")", "==", "1", "\n", "assert", "features", ".", "size", "(", ")", "[", "2", ":", "]", "==", "mask", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "pad_h", ",", "pad_w", "=", "_pair", "(", "padding", ")", "\n", "stride_h", ",", "stride_w", "=", "_pair", "(", "stride", ")", "\n", "if", "stride_h", "!=", "1", "or", "stride_w", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Stride could not only be 1 in masked_conv2d currently.'", ")", "\n", "", "if", "not", "features", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "out_channel", ",", "in_channel", ",", "kernel_h", ",", "kernel_w", "=", "weight", ".", "size", "(", ")", "\n", "\n", "batch_size", "=", "features", ".", "size", "(", "0", ")", "\n", "out_h", "=", "int", "(", "\n", "math", ".", "floor", "(", "(", "features", ".", "size", "(", "2", ")", "+", "2", "*", "pad_h", "-", "\n", "(", "kernel_h", "-", "1", ")", "-", "1", ")", "/", "stride_h", "+", "1", ")", ")", "\n", "out_w", "=", "int", "(", "\n", "math", ".", "floor", "(", "(", "features", ".", "size", "(", "3", ")", "+", "2", "*", "pad_w", "-", "\n", "(", "kernel_h", "-", "1", ")", "-", "1", ")", "/", "stride_w", "+", "1", ")", ")", "\n", "mask_inds", "=", "torch", ".", "nonzero", "(", "mask", "[", "0", "]", ">", "0", ")", "\n", "output", "=", "features", ".", "new_zeros", "(", "batch_size", ",", "out_channel", ",", "out_h", ",", "out_w", ")", "\n", "if", "mask_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "mask_h_idx", "=", "mask_inds", "[", ":", ",", "0", "]", ".", "contiguous", "(", ")", "\n", "mask_w_idx", "=", "mask_inds", "[", ":", ",", "1", "]", ".", "contiguous", "(", ")", "\n", "data_col", "=", "features", ".", "new_zeros", "(", "in_channel", "*", "kernel_h", "*", "kernel_w", ",", "\n", "mask_inds", ".", "size", "(", "0", ")", ")", "\n", "masked_conv2d_cuda", ".", "masked_im2col_forward", "(", "features", ",", "mask_h_idx", ",", "\n", "mask_w_idx", ",", "kernel_h", ",", "\n", "kernel_w", ",", "pad_h", ",", "pad_w", ",", "\n", "data_col", ")", "\n", "\n", "masked_output", "=", "torch", ".", "addmm", "(", "1", ",", "bias", "[", ":", ",", "None", "]", ",", "1", ",", "\n", "weight", ".", "view", "(", "out_channel", ",", "-", "1", ")", ",", "data_col", ")", "\n", "masked_conv2d_cuda", ".", "masked_col2im_forward", "(", "masked_output", ",", "mask_h_idx", ",", "\n", "mask_w_idx", ",", "out_h", ",", "out_w", ",", "\n", "out_channel", ",", "output", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.masked_conv.masked_conv.MaskedConv2dFunction.backward": [[55, 59], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "return", "(", "None", ",", ")", "*", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.masked_conv.masked_conv.MaskedConv2d.__init__": [[71, 83], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "MaskedConv2d", ",", "\n", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "\n", "padding", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.masked_conv.masked_conv.MaskedConv2d.forward": [[84, 90], ["super().forward", "masked_conv2d"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward"], ["", "def", "forward", "(", "self", ",", "input", ",", "mask", "=", "None", ")", ":", "\n", "        ", "if", "mask", "is", "None", ":", "# fallback to the normal Conv2d", "\n", "            ", "return", "super", "(", "MaskedConv2d", ",", "self", ")", ".", "forward", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "return", "masked_conv2d", "(", "input", ",", "mask", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "padding", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_pool.roi_pool.RoIPoolFunction.forward": [[12, 30], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "ctx.save_for_backward", "features.size", "rois.size", "features.new_zeros", "features.new_zeros", "roi_pool_cuda.forward", "features.size", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "rois", ",", "out_size", ",", "spatial_scale", ")", ":", "\n", "        ", "assert", "features", ".", "is_cuda", "\n", "out_h", ",", "out_w", "=", "_pair", "(", "out_size", ")", "\n", "assert", "isinstance", "(", "out_h", ",", "int", ")", "and", "isinstance", "(", "out_w", ",", "int", ")", "\n", "ctx", ".", "save_for_backward", "(", "rois", ")", "\n", "num_channels", "=", "features", ".", "size", "(", "1", ")", "\n", "num_rois", "=", "rois", ".", "size", "(", "0", ")", "\n", "out_size", "=", "(", "num_rois", ",", "num_channels", ",", "out_h", ",", "out_w", ")", "\n", "output", "=", "features", ".", "new_zeros", "(", "out_size", ")", "\n", "argmax", "=", "features", ".", "new_zeros", "(", "out_size", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "roi_pool_cuda", ".", "forward", "(", "features", ",", "rois", ",", "out_h", ",", "out_w", ",", "spatial_scale", ",", "\n", "output", ",", "argmax", ")", "\n", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "feature_size", "=", "features", ".", "size", "(", ")", "\n", "ctx", ".", "argmax", "=", "argmax", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_pool.roi_pool.RoIPoolFunction.backward": [[31, 48], ["grad_output.new_zeros", "roi_pool_cuda.backward", "grad_output.contiguous"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFEFunction.backward"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "assert", "grad_output", ".", "is_cuda", "\n", "spatial_scale", "=", "ctx", ".", "spatial_scale", "\n", "feature_size", "=", "ctx", ".", "feature_size", "\n", "argmax", "=", "ctx", ".", "argmax", "\n", "rois", "=", "ctx", ".", "saved_tensors", "[", "0", "]", "\n", "assert", "feature_size", "is", "not", "None", "\n", "\n", "grad_input", "=", "grad_rois", "=", "None", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_input", "=", "grad_output", ".", "new_zeros", "(", "feature_size", ")", "\n", "roi_pool_cuda", ".", "backward", "(", "grad_output", ".", "contiguous", "(", ")", ",", "rois", ",", "argmax", ",", "\n", "spatial_scale", ",", "grad_input", ")", "\n", "\n", "", "return", "grad_input", ",", "grad_rois", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_pool.roi_pool.RoIPool.__init__": [[55, 61], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "float"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_size", ",", "spatial_scale", ",", "use_torchvision", "=", "False", ")", ":", "\n", "        ", "super", "(", "RoIPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "out_size", "=", "_pair", "(", "out_size", ")", "\n", "self", ".", "spatial_scale", "=", "float", "(", "spatial_scale", ")", "\n", "self", ".", "use_torchvision", "=", "use_torchvision", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_pool.roi_pool.RoIPool.forward": [[62, 69], ["tv_roi_pool", "roi_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "rois", ")", ":", "\n", "        ", "if", "self", ".", "use_torchvision", ":", "\n", "            ", "from", "torchvision", ".", "ops", "import", "roi_pool", "as", "tv_roi_pool", "\n", "return", "tv_roi_pool", "(", "features", ",", "rois", ",", "self", ".", "out_size", ",", "\n", "self", ".", "spatial_scale", ")", "\n", "", "else", ":", "\n", "            ", "return", "roi_pool", "(", "features", ",", "rois", ",", "self", ".", "out_size", ",", "self", ".", "spatial_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_pool.roi_pool.RoIPool.__repr__": [[70, 76], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "format_str", "+=", "'(out_size={}, spatial_scale={}'", ".", "format", "(", "\n", "self", ".", "out_size", ",", "self", ".", "spatial_scale", ")", "\n", "format_str", "+=", "', use_torchvision={})'", ".", "format", "(", "self", ".", "use_torchvision", ")", "\n", "return", "format_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.DeformConvFunction.forward": [[16, 59], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "ctx.save_for_backward", "input.new_empty", "ValueError", "deform_conv.DeformConvFunction._output_size", "input.new_empty", "input.new_empty", "min", "deform_conv_cuda.deform_conv_forward_cuda", "input.dim", "weight.size", "weight.size", "input.dim"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.DeformConvFunction._output_size"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "\n", "input", ",", "\n", "offset", ",", "\n", "weight", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "deformable_groups", "=", "1", ",", "\n", "im2col_step", "=", "64", ")", ":", "\n", "        ", "if", "input", "is", "not", "None", "and", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Expected 4D tensor as input, got {}D tensor instead.'", ".", "format", "(", "\n", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "ctx", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "ctx", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "ctx", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "ctx", ".", "groups", "=", "groups", "\n", "ctx", ".", "deformable_groups", "=", "deformable_groups", "\n", "ctx", ".", "im2col_step", "=", "im2col_step", "\n", "\n", "ctx", ".", "save_for_backward", "(", "input", ",", "offset", ",", "weight", ")", "\n", "\n", "output", "=", "input", ".", "new_empty", "(", "\n", "DeformConvFunction", ".", "_output_size", "(", "input", ",", "weight", ",", "ctx", ".", "padding", ",", "\n", "ctx", ".", "dilation", ",", "ctx", ".", "stride", ")", ")", "\n", "\n", "ctx", ".", "bufs_", "=", "[", "input", ".", "new_empty", "(", "0", ")", ",", "input", ".", "new_empty", "(", "0", ")", "]", "# columns, ones", "\n", "\n", "if", "not", "input", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "cur_im2col_step", "=", "min", "(", "ctx", ".", "im2col_step", ",", "input", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "input", ".", "shape", "[", "0", "]", "%", "\n", "cur_im2col_step", ")", "==", "0", ",", "'im2col step must divide batchsize'", "\n", "deform_conv_cuda", ".", "deform_conv_forward_cuda", "(", "\n", "input", ",", "weight", ",", "offset", ",", "output", ",", "ctx", ".", "bufs_", "[", "0", "]", ",", "ctx", ".", "bufs_", "[", "1", "]", ",", "\n", "weight", ".", "size", "(", "3", ")", ",", "weight", ".", "size", "(", "2", ")", ",", "ctx", ".", "stride", "[", "1", "]", ",", "ctx", ".", "stride", "[", "0", "]", ",", "\n", "ctx", ".", "padding", "[", "1", "]", ",", "ctx", ".", "padding", "[", "0", "]", ",", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "groups", ",", "ctx", ".", "deformable_groups", ",", "\n", "cur_im2col_step", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.DeformConvFunction.backward": [[60, 97], ["min", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "deform_conv_cuda.deform_conv_backward_input_cuda", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "deform_conv_cuda.deform_conv_backward_parameters_cuda", "weight.size", "weight.size", "weight.size", "weight.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "offset", ",", "weight", "=", "ctx", ".", "saved_tensors", "\n", "\n", "grad_input", "=", "grad_offset", "=", "grad_weight", "=", "None", "\n", "\n", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "cur_im2col_step", "=", "min", "(", "ctx", ".", "im2col_step", ",", "input", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "input", ".", "shape", "[", "0", "]", "%", "\n", "cur_im2col_step", ")", "==", "0", ",", "'im2col step must divide batchsize'", "\n", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", "or", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "                ", "grad_input", "=", "torch", ".", "zeros_like", "(", "input", ")", "\n", "grad_offset", "=", "torch", ".", "zeros_like", "(", "offset", ")", "\n", "deform_conv_cuda", ".", "deform_conv_backward_input_cuda", "(", "\n", "input", ",", "offset", ",", "grad_output", ",", "grad_input", ",", "\n", "grad_offset", ",", "weight", ",", "ctx", ".", "bufs_", "[", "0", "]", ",", "weight", ".", "size", "(", "3", ")", ",", "\n", "weight", ".", "size", "(", "2", ")", ",", "ctx", ".", "stride", "[", "1", "]", ",", "ctx", ".", "stride", "[", "0", "]", ",", "\n", "ctx", ".", "padding", "[", "1", "]", ",", "ctx", ".", "padding", "[", "0", "]", ",", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "groups", ",", "ctx", ".", "deformable_groups", ",", "\n", "cur_im2col_step", ")", "\n", "\n", "", "if", "ctx", ".", "needs_input_grad", "[", "2", "]", ":", "\n", "                ", "grad_weight", "=", "torch", ".", "zeros_like", "(", "weight", ")", "\n", "deform_conv_cuda", ".", "deform_conv_backward_parameters_cuda", "(", "\n", "input", ",", "offset", ",", "grad_output", ",", "\n", "grad_weight", ",", "ctx", ".", "bufs_", "[", "0", "]", ",", "ctx", ".", "bufs_", "[", "1", "]", ",", "weight", ".", "size", "(", "3", ")", ",", "\n", "weight", ".", "size", "(", "2", ")", ",", "ctx", ".", "stride", "[", "1", "]", ",", "ctx", ".", "stride", "[", "0", "]", ",", "\n", "ctx", ".", "padding", "[", "1", "]", ",", "ctx", ".", "padding", "[", "0", "]", ",", "ctx", ".", "dilation", "[", "1", "]", ",", "\n", "ctx", ".", "dilation", "[", "0", "]", ",", "ctx", ".", "groups", ",", "ctx", ".", "deformable_groups", ",", "1", ",", "\n", "cur_im2col_step", ")", "\n", "\n", "", "", "return", "(", "grad_input", ",", "grad_offset", ",", "grad_weight", ",", "None", ",", "None", ",", "None", ",", "None", ",", "\n", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.DeformConvFunction._output_size": [[98, 113], ["weight.size", "range", "input.size", "input.size", "all", "ValueError", "input.dim", "map", "weight.size", "map"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_output_size", "(", "input", ",", "weight", ",", "padding", ",", "dilation", ",", "stride", ")", ":", "\n", "        ", "channels", "=", "weight", ".", "size", "(", "0", ")", "\n", "output_size", "=", "(", "input", ".", "size", "(", "0", ")", ",", "channels", ")", "\n", "for", "d", "in", "range", "(", "input", ".", "dim", "(", ")", "-", "2", ")", ":", "\n", "            ", "in_size", "=", "input", ".", "size", "(", "d", "+", "2", ")", "\n", "pad", "=", "padding", "[", "d", "]", "\n", "kernel", "=", "dilation", "[", "d", "]", "*", "(", "weight", ".", "size", "(", "d", "+", "2", ")", "-", "1", ")", "+", "1", "\n", "stride_", "=", "stride", "[", "d", "]", "\n", "output_size", "+=", "(", "(", "in_size", "+", "(", "2", "*", "pad", ")", "-", "kernel", ")", "//", "stride_", "+", "1", ",", ")", "\n", "", "if", "not", "all", "(", "map", "(", "lambda", "s", ":", "s", ">", "0", ",", "output_size", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'convolution input is too small (output would be {})'", ".", "format", "(", "\n", "'x'", ".", "join", "(", "map", "(", "str", ",", "output_size", ")", ")", ")", ")", "\n", "", "return", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.ModulatedDeformConvFunction.forward": [[117, 151], ["input.new_empty", "deform_conv_cuda.modulated_deform_conv_cuda_forward", "input.new_empty", "ctx.save_for_backward", "deform_conv.ModulatedDeformConvFunction._infer_shape", "input.new_empty", "input.new_empty"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.ModulatedDeformConvFunction._infer_shape"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "\n", "input", ",", "\n", "offset", ",", "\n", "mask", ",", "\n", "weight", ",", "\n", "bias", "=", "None", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "deformable_groups", "=", "1", ")", ":", "\n", "        ", "ctx", ".", "stride", "=", "stride", "\n", "ctx", ".", "padding", "=", "padding", "\n", "ctx", ".", "dilation", "=", "dilation", "\n", "ctx", ".", "groups", "=", "groups", "\n", "ctx", ".", "deformable_groups", "=", "deformable_groups", "\n", "ctx", ".", "with_bias", "=", "bias", "is", "not", "None", "\n", "if", "not", "ctx", ".", "with_bias", ":", "\n", "            ", "bias", "=", "input", ".", "new_empty", "(", "1", ")", "# fake tensor", "\n", "", "if", "not", "input", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "weight", ".", "requires_grad", "or", "mask", ".", "requires_grad", "or", "offset", ".", "requires_grad", "or", "input", ".", "requires_grad", ":", "\n", "            ", "ctx", ".", "save_for_backward", "(", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", ")", "\n", "", "output", "=", "input", ".", "new_empty", "(", "\n", "ModulatedDeformConvFunction", ".", "_infer_shape", "(", "ctx", ",", "input", ",", "weight", ")", ")", "\n", "ctx", ".", "_bufs", "=", "[", "input", ".", "new_empty", "(", "0", ")", ",", "input", ".", "new_empty", "(", "0", ")", "]", "\n", "deform_conv_cuda", ".", "modulated_deform_conv_cuda_forward", "(", "\n", "input", ",", "weight", ",", "bias", ",", "ctx", ".", "_bufs", "[", "0", "]", ",", "offset", ",", "mask", ",", "output", ",", "\n", "ctx", ".", "_bufs", "[", "1", "]", ",", "weight", ".", "shape", "[", "2", "]", ",", "weight", ".", "shape", "[", "3", "]", ",", "ctx", ".", "stride", ",", "\n", "ctx", ".", "stride", ",", "ctx", ".", "padding", ",", "ctx", ".", "padding", ",", "ctx", ".", "dilation", ",", "ctx", ".", "dilation", ",", "\n", "ctx", ".", "groups", ",", "ctx", ".", "deformable_groups", ",", "ctx", ".", "with_bias", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.ModulatedDeformConvFunction.backward": [[152, 174], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "deform_conv_cuda.modulated_deform_conv_cuda_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "input", ",", "offset", ",", "mask", ",", "weight", ",", "bias", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", "=", "torch", ".", "zeros_like", "(", "input", ")", "\n", "grad_offset", "=", "torch", ".", "zeros_like", "(", "offset", ")", "\n", "grad_mask", "=", "torch", ".", "zeros_like", "(", "mask", ")", "\n", "grad_weight", "=", "torch", ".", "zeros_like", "(", "weight", ")", "\n", "grad_bias", "=", "torch", ".", "zeros_like", "(", "bias", ")", "\n", "deform_conv_cuda", ".", "modulated_deform_conv_cuda_backward", "(", "\n", "input", ",", "weight", ",", "bias", ",", "ctx", ".", "_bufs", "[", "0", "]", ",", "offset", ",", "mask", ",", "ctx", ".", "_bufs", "[", "1", "]", ",", "\n", "grad_input", ",", "grad_weight", ",", "grad_bias", ",", "grad_offset", ",", "grad_mask", ",", "\n", "grad_output", ",", "weight", ".", "shape", "[", "2", "]", ",", "weight", ".", "shape", "[", "3", "]", ",", "ctx", ".", "stride", ",", "\n", "ctx", ".", "stride", ",", "ctx", ".", "padding", ",", "ctx", ".", "padding", ",", "ctx", ".", "dilation", ",", "ctx", ".", "dilation", ",", "\n", "ctx", ".", "groups", ",", "ctx", ".", "deformable_groups", ",", "ctx", ".", "with_bias", ")", "\n", "if", "not", "ctx", ".", "with_bias", ":", "\n", "            ", "grad_bias", "=", "None", "\n", "\n", "", "return", "(", "grad_input", ",", "grad_offset", ",", "grad_mask", ",", "grad_weight", ",", "grad_bias", ",", "\n", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.ModulatedDeformConvFunction._infer_shape": [[175, 186], ["input.size", "weight.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_infer_shape", "(", "ctx", ",", "input", ",", "weight", ")", ":", "\n", "        ", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "channels_out", "=", "weight", ".", "size", "(", "0", ")", "\n", "height", ",", "width", "=", "input", ".", "shape", "[", "2", ":", "4", "]", "\n", "kernel_h", ",", "kernel_w", "=", "weight", ".", "shape", "[", "2", ":", "4", "]", "\n", "height_out", "=", "(", "height", "+", "2", "*", "ctx", ".", "padding", "-", "\n", "(", "ctx", ".", "dilation", "*", "(", "kernel_h", "-", "1", ")", "+", "1", ")", ")", "//", "ctx", ".", "stride", "+", "1", "\n", "width_out", "=", "(", "width", "+", "2", "*", "ctx", ".", "padding", "-", "\n", "(", "ctx", ".", "dilation", "*", "(", "kernel_w", "-", "1", ")", "+", "1", ")", ")", "//", "ctx", ".", "stride", "+", "1", "\n", "return", "n", ",", "channels_out", ",", "height_out", ",", "width_out", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.DeformConv.__init__": [[194, 231], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._single", "torch.nn.modules.utils._single", "torch.nn.modules.utils._single", "torch.Parameter", "torch.Parameter", "torch.Parameter", "deform_conv.DeformConv.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.ModulatedDeformConv.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "deformable_groups", "=", "1", ",", "\n", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "DeformConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "not", "bias", "\n", "assert", "in_channels", "%", "groups", "==", "0", ",", "'in_channels {} cannot be divisible by groups {}'", ".", "format", "(", "\n", "in_channels", ",", "groups", ")", "\n", "assert", "out_channels", "%", "groups", "==", "0", ",", "'out_channels {} cannot be divisible by groups {}'", ".", "format", "(", "\n", "out_channels", ",", "groups", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "_pair", "(", "stride", ")", "\n", "self", ".", "padding", "=", "_pair", "(", "padding", ")", "\n", "self", ".", "dilation", "=", "_pair", "(", "dilation", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "# enable compatibility with nn.Conv2d", "\n", "self", ".", "transposed", "=", "False", "\n", "self", ".", "output_padding", "=", "_single", "(", "0", ")", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", "//", "self", ".", "groups", ",", "\n", "*", "self", ".", "kernel_size", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.DeformConv.reset_parameters": [[232, 238], ["deform_conv.DeformConv.weight.data.uniform_", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.DeformConv.forward": [[239, 256], ["deform_conv", "max", "max", "torch.pad().contiguous", "torch.pad().contiguous", "torch.pad().contiguous", "torch.pad().contiguous", "torch.pad().contiguous", "torch.pad().contiguous", "out[].contiguous", "torch.pad().contiguous.size", "torch.pad().contiguous.size", "torch.pad().contiguous.size", "torch.pad().contiguous.size", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "out[].contiguous.size", "out[].contiguous.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "offset", ")", ":", "\n", "# To fix an assert error in deform_conv_cuda.cpp:128", "\n", "# input image is smaller than kernel", "\n", "        ", "input_pad", "=", "(", "\n", "x", ".", "size", "(", "2", ")", "<", "self", ".", "kernel_size", "[", "0", "]", "or", "x", ".", "size", "(", "3", ")", "<", "self", ".", "kernel_size", "[", "1", "]", ")", "\n", "if", "input_pad", ":", "\n", "            ", "pad_h", "=", "max", "(", "self", ".", "kernel_size", "[", "0", "]", "-", "x", ".", "size", "(", "2", ")", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "self", ".", "kernel_size", "[", "1", "]", "-", "x", ".", "size", "(", "3", ")", ",", "0", ")", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "pad_w", ",", "0", ",", "pad_h", ")", ",", "'constant'", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "offset", "=", "F", ".", "pad", "(", "offset", ",", "(", "0", ",", "pad_w", ",", "0", ",", "pad_h", ")", ",", "'constant'", ",", "\n", "0", ")", ".", "contiguous", "(", ")", "\n", "", "out", "=", "deform_conv", "(", "x", ",", "offset", ",", "self", ".", "weight", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "deformable_groups", ")", "\n", "if", "input_pad", ":", "\n", "            ", "out", "=", "out", "[", ":", ",", ":", ",", ":", "out", ".", "size", "(", "2", ")", "-", "pad_h", ",", ":", "out", ".", "size", "(", "3", ")", "-", "\n", "pad_w", "]", ".", "contiguous", "(", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.DeformConvPack.__init__": [[276, 288], ["deform_conv.DeformConv.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "deform_conv.DeformConvPack.init_offset", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.ModulatedDeformConvPack.init_offset"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DeformConvPack", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "conv_offset", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "deformable_groups", "*", "2", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "\n", "self", ".", "kernel_size", "[", "1", "]", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "stride", "=", "_pair", "(", "self", ".", "stride", ")", ",", "\n", "padding", "=", "_pair", "(", "self", ".", "padding", ")", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "init_offset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.DeformConvPack.init_offset": [[289, 292], ["deform_conv.DeformConvPack.conv_offset.weight.data.zero_", "deform_conv.DeformConvPack.conv_offset.bias.data.zero_"], "methods", ["None"], ["", "def", "init_offset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_offset", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "conv_offset", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.DeformConvPack.forward": [[293, 297], ["deform_conv.DeformConvPack.conv_offset", "deform_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "offset", "=", "self", ".", "conv_offset", "(", "x", ")", "\n", "return", "deform_conv", "(", "x", ",", "offset", ",", "self", ".", "weight", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "groups", ",", "self", ".", "deformable_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.DeformConvPack._load_from_state_dict": [[298, 324], ["local_metadata.get", "super()._load_from_state_dict", "mmdet.utils.print_log", "state_dict.pop", "state_dict.pop", "prefix.rstrip"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.ModulatedDeformConvPack._load_from_state_dict", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.print_log"], ["", "def", "_load_from_state_dict", "(", "self", ",", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", ":", "\n", "        ", "version", "=", "local_metadata", ".", "get", "(", "'version'", ",", "None", ")", "\n", "\n", "if", "version", "is", "None", "or", "version", "<", "2", ":", "\n", "# the key is different in early versions", "\n", "# In version < 2, DeformConvPack loads previous benchmark models.", "\n", "            ", "if", "(", "prefix", "+", "'conv_offset.weight'", "not", "in", "state_dict", "\n", "and", "prefix", "[", ":", "-", "1", "]", "+", "'_offset.weight'", "in", "state_dict", ")", ":", "\n", "                ", "state_dict", "[", "prefix", "+", "'conv_offset.weight'", "]", "=", "state_dict", ".", "pop", "(", "\n", "prefix", "[", ":", "-", "1", "]", "+", "'_offset.weight'", ")", "\n", "", "if", "(", "prefix", "+", "'conv_offset.bias'", "not", "in", "state_dict", "\n", "and", "prefix", "[", ":", "-", "1", "]", "+", "'_offset.bias'", "in", "state_dict", ")", ":", "\n", "                ", "state_dict", "[", "prefix", "+", "\n", "'conv_offset.bias'", "]", "=", "state_dict", ".", "pop", "(", "prefix", "[", ":", "-", "1", "]", "+", "\n", "'_offset.bias'", ")", "\n", "\n", "", "", "if", "version", "is", "not", "None", "and", "version", ">", "1", ":", "\n", "            ", "print_log", "(", "\n", "'DeformConvPack {} is upgraded to version 2.'", ".", "format", "(", "\n", "prefix", ".", "rstrip", "(", "'.'", ")", ")", ",", "\n", "logger", "=", "'root'", ")", "\n", "\n", "", "super", "(", ")", ".", "_load_from_state_dict", "(", "state_dict", ",", "prefix", ",", "local_metadata", ",", "\n", "strict", ",", "missing_keys", ",", "unexpected_keys", ",", "\n", "error_msgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.ModulatedDeformConv.__init__": [[328, 360], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._single", "torch.nn.modules.utils._single", "torch.nn.modules.utils._single", "torch.Parameter", "torch.Parameter", "torch.Parameter", "deform_conv.ModulatedDeformConv.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "deform_conv.ModulatedDeformConv.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.ModulatedDeformConv.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "deformable_groups", "=", "1", ",", "\n", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "_pair", "(", "kernel_size", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "self", ".", "with_bias", "=", "bias", "\n", "# enable compatibility with nn.Conv2d", "\n", "self", ".", "transposed", "=", "False", "\n", "self", ".", "output_padding", "=", "_single", "(", "0", ")", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", "//", "groups", ",", "\n", "*", "self", ".", "kernel_size", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.ModulatedDeformConv.reset_parameters": [[361, 369], ["deform_conv.ModulatedDeformConv.weight.data.uniform_", "math.sqrt", "deform_conv.ModulatedDeformConv.bias.data.zero_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "for", "k", "in", "self", ".", "kernel_size", ":", "\n", "            ", "n", "*=", "k", "\n", "", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.ModulatedDeformConv.forward": [[370, 374], ["modulated_deform_conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "offset", ",", "mask", ")", ":", "\n", "        ", "return", "modulated_deform_conv", "(", "x", ",", "offset", ",", "mask", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "self", ".", "deformable_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.ModulatedDeformConvPack.__init__": [[394, 406], ["deform_conv.ModulatedDeformConv.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "deform_conv.ModulatedDeformConvPack.init_offset", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.ModulatedDeformConvPack.init_offset"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformConvPack", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "conv_offset", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "deformable_groups", "*", "3", "*", "self", ".", "kernel_size", "[", "0", "]", "*", "\n", "self", ".", "kernel_size", "[", "1", "]", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "stride", "=", "_pair", "(", "self", ".", "stride", ")", ",", "\n", "padding", "=", "_pair", "(", "self", ".", "padding", ")", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "init_offset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.ModulatedDeformConvPack.init_offset": [[407, 410], ["deform_conv.ModulatedDeformConvPack.conv_offset.weight.data.zero_", "deform_conv.ModulatedDeformConvPack.conv_offset.bias.data.zero_"], "methods", ["None"], ["", "def", "init_offset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_offset", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "conv_offset", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.ModulatedDeformConvPack.forward": [[411, 419], ["deform_conv.ModulatedDeformConvPack.conv_offset", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "modulated_deform_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv_offset", "(", "x", ")", "\n", "o1", ",", "o2", ",", "mask", "=", "torch", ".", "chunk", "(", "out", ",", "3", ",", "dim", "=", "1", ")", "\n", "offset", "=", "torch", ".", "cat", "(", "(", "o1", ",", "o2", ")", ",", "dim", "=", "1", ")", "\n", "mask", "=", "torch", ".", "sigmoid", "(", "mask", ")", "\n", "return", "modulated_deform_conv", "(", "x", ",", "offset", ",", "mask", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "self", ".", "deformable_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.ModulatedDeformConvPack._load_from_state_dict": [[420, 447], ["local_metadata.get", "super()._load_from_state_dict", "mmdet.utils.print_log", "state_dict.pop", "state_dict.pop", "prefix.rstrip"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_conv.ModulatedDeformConvPack._load_from_state_dict", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.print_log"], ["", "def", "_load_from_state_dict", "(", "self", ",", "state_dict", ",", "prefix", ",", "local_metadata", ",", "strict", ",", "\n", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", ":", "\n", "        ", "version", "=", "local_metadata", ".", "get", "(", "'version'", ",", "None", ")", "\n", "\n", "if", "version", "is", "None", "or", "version", "<", "2", ":", "\n", "# the key is different in early versions", "\n", "# In version < 2, ModulatedDeformConvPack", "\n", "# loads previous benchmark models.", "\n", "            ", "if", "(", "prefix", "+", "'conv_offset.weight'", "not", "in", "state_dict", "\n", "and", "prefix", "[", ":", "-", "1", "]", "+", "'_offset.weight'", "in", "state_dict", ")", ":", "\n", "                ", "state_dict", "[", "prefix", "+", "'conv_offset.weight'", "]", "=", "state_dict", ".", "pop", "(", "\n", "prefix", "[", ":", "-", "1", "]", "+", "'_offset.weight'", ")", "\n", "", "if", "(", "prefix", "+", "'conv_offset.bias'", "not", "in", "state_dict", "\n", "and", "prefix", "[", ":", "-", "1", "]", "+", "'_offset.bias'", "in", "state_dict", ")", ":", "\n", "                ", "state_dict", "[", "prefix", "+", "\n", "'conv_offset.bias'", "]", "=", "state_dict", ".", "pop", "(", "prefix", "[", ":", "-", "1", "]", "+", "\n", "'_offset.bias'", ")", "\n", "\n", "", "", "if", "version", "is", "not", "None", "and", "version", ">", "1", ":", "\n", "            ", "print_log", "(", "\n", "'ModulatedDeformConvPack {} is upgraded to version 2.'", ".", "format", "(", "\n", "prefix", ".", "rstrip", "(", "'.'", ")", ")", ",", "\n", "logger", "=", "'root'", ")", "\n", "\n", "", "super", "(", ")", ".", "_load_from_state_dict", "(", "state_dict", ",", "prefix", ",", "local_metadata", ",", "\n", "strict", ",", "missing_keys", ",", "unexpected_keys", ",", "\n", "error_msgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_pool.DeformRoIPoolingFunction.forward": [[12, 57], ["torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "data.new_empty", "data.new_empty", "deform_pool_cuda.deform_psroi_pooling_cuda_forward", "isinstance", "isinstance", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "\n", "data", ",", "\n", "rois", ",", "\n", "offset", ",", "\n", "spatial_scale", ",", "\n", "out_size", ",", "\n", "out_channels", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ")", ":", "\n", "# TODO: support unsquare RoIs", "\n", "        ", "out_h", ",", "out_w", "=", "_pair", "(", "out_size", ")", "\n", "assert", "isinstance", "(", "out_h", ",", "int", ")", "and", "isinstance", "(", "out_w", ",", "int", ")", "\n", "assert", "out_h", "==", "out_w", "\n", "out_size", "=", "out_h", "# out_h and out_w must be equal", "\n", "\n", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "out_size", "=", "out_size", "\n", "ctx", ".", "out_channels", "=", "out_channels", "\n", "ctx", ".", "no_trans", "=", "no_trans", "\n", "ctx", ".", "group_size", "=", "group_size", "\n", "ctx", ".", "part_size", "=", "out_size", "if", "part_size", "is", "None", "else", "part_size", "\n", "ctx", ".", "sample_per_part", "=", "sample_per_part", "\n", "ctx", ".", "trans_std", "=", "trans_std", "\n", "\n", "assert", "0.0", "<=", "ctx", ".", "trans_std", "<=", "1.0", "\n", "if", "not", "data", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "n", "=", "rois", ".", "shape", "[", "0", "]", "\n", "output", "=", "data", ".", "new_empty", "(", "n", ",", "out_channels", ",", "out_size", ",", "out_size", ")", "\n", "output_count", "=", "data", ".", "new_empty", "(", "n", ",", "out_channels", ",", "out_size", ",", "out_size", ")", "\n", "deform_pool_cuda", ".", "deform_psroi_pooling_cuda_forward", "(", "\n", "data", ",", "rois", ",", "offset", ",", "output", ",", "output_count", ",", "ctx", ".", "no_trans", ",", "\n", "ctx", ".", "spatial_scale", ",", "ctx", ".", "out_channels", ",", "ctx", ".", "group_size", ",", "ctx", ".", "out_size", ",", "\n", "ctx", ".", "part_size", ",", "ctx", ".", "sample_per_part", ",", "ctx", ".", "trans_std", ")", "\n", "\n", "if", "data", ".", "requires_grad", "or", "rois", ".", "requires_grad", "or", "offset", ".", "requires_grad", ":", "\n", "            ", "ctx", ".", "save_for_backward", "(", "data", ",", "rois", ",", "offset", ")", "\n", "", "ctx", ".", "output_count", "=", "output_count", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_pool.DeformRoIPoolingFunction.backward": [[58, 77], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "deform_pool_cuda.deform_psroi_pooling_cuda_backward"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "if", "not", "grad_output", ".", "is_cuda", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "data", ",", "rois", ",", "offset", "=", "ctx", ".", "saved_tensors", "\n", "output_count", "=", "ctx", ".", "output_count", "\n", "grad_input", "=", "torch", ".", "zeros_like", "(", "data", ")", "\n", "grad_rois", "=", "None", "\n", "grad_offset", "=", "torch", ".", "zeros_like", "(", "offset", ")", "\n", "\n", "deform_pool_cuda", ".", "deform_psroi_pooling_cuda_backward", "(", "\n", "grad_output", ",", "data", ",", "rois", ",", "offset", ",", "output_count", ",", "grad_input", ",", "\n", "grad_offset", ",", "ctx", ".", "no_trans", ",", "ctx", ".", "spatial_scale", ",", "ctx", ".", "out_channels", ",", "\n", "ctx", ".", "group_size", ",", "ctx", ".", "out_size", ",", "ctx", ".", "part_size", ",", "ctx", ".", "sample_per_part", ",", "\n", "ctx", ".", "trans_std", ")", "\n", "return", "(", "grad_input", ",", "grad_rois", ",", "grad_offset", ",", "None", ",", "None", ",", "None", ",", "None", ",", "\n", "None", ",", "None", ",", "None", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_pool.DeformRoIPooling.__init__": [[84, 102], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_scale", ",", "\n", "out_size", ",", "\n", "out_channels", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ")", ":", "\n", "        ", "super", "(", "DeformRoIPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "spatial_scale", "=", "spatial_scale", "\n", "self", ".", "out_size", "=", "_pair", "(", "out_size", ")", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "no_trans", "=", "no_trans", "\n", "self", ".", "group_size", "=", "group_size", "\n", "self", ".", "part_size", "=", "out_size", "if", "part_size", "is", "None", "else", "part_size", "\n", "self", ".", "sample_per_part", "=", "sample_per_part", "\n", "self", ".", "trans_std", "=", "trans_std", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_pool.DeformRoIPooling.forward": [[103, 111], ["deform_roi_pooling", "data.new_empty"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ",", "rois", ",", "offset", ")", ":", "\n", "        ", "if", "self", ".", "no_trans", ":", "\n", "            ", "offset", "=", "data", ".", "new_empty", "(", "0", ")", "\n", "", "return", "deform_roi_pooling", "(", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "\n", "self", ".", "out_size", ",", "self", ".", "out_channels", ",", "\n", "self", ".", "no_trans", ",", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_pool.DeformRoIPoolingPack.__init__": [[115, 148], ["deform_pool.DeformRoIPooling.__init__", "range", "torch.Sequential", "torch.Sequential", "deform_pool.DeformRoIPoolingPack.offset_fc[].weight.data.zero_", "deform_pool.DeformRoIPoolingPack.offset_fc[].bias.data.zero_", "seq.append", "torch.Linear", "torch.Linear", "seq.append", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_scale", ",", "\n", "out_size", ",", "\n", "out_channels", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ",", "\n", "num_offset_fcs", "=", "3", ",", "\n", "deform_fc_channels", "=", "1024", ")", ":", "\n", "        ", "super", "(", "DeformRoIPoolingPack", ",", "\n", "self", ")", ".", "__init__", "(", "spatial_scale", ",", "out_size", ",", "out_channels", ",", "no_trans", ",", "\n", "group_size", ",", "part_size", ",", "sample_per_part", ",", "trans_std", ")", "\n", "\n", "self", ".", "num_offset_fcs", "=", "num_offset_fcs", "\n", "self", ".", "deform_fc_channels", "=", "deform_fc_channels", "\n", "\n", "if", "not", "no_trans", ":", "\n", "            ", "seq", "=", "[", "]", "\n", "ic", "=", "self", ".", "out_size", "[", "0", "]", "*", "self", ".", "out_size", "[", "1", "]", "*", "self", ".", "out_channels", "\n", "for", "i", "in", "range", "(", "self", ".", "num_offset_fcs", ")", ":", "\n", "                ", "if", "i", "<", "self", ".", "num_offset_fcs", "-", "1", ":", "\n", "                    ", "oc", "=", "self", ".", "deform_fc_channels", "\n", "", "else", ":", "\n", "                    ", "oc", "=", "self", ".", "out_size", "[", "0", "]", "*", "self", ".", "out_size", "[", "1", "]", "*", "2", "\n", "", "seq", ".", "append", "(", "nn", ".", "Linear", "(", "ic", ",", "oc", ")", ")", "\n", "ic", "=", "oc", "\n", "if", "i", "<", "self", ".", "num_offset_fcs", "-", "1", ":", "\n", "                    ", "seq", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "", "self", ".", "offset_fc", "=", "nn", ".", "Sequential", "(", "*", "seq", ")", "\n", "self", ".", "offset_fc", "[", "-", "1", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "offset_fc", "[", "-", "1", "]", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_pool.DeformRoIPoolingPack.forward": [[149, 175], ["data.size", "data.new_empty", "data.new_empty", "deform_roi_pooling", "data.new_empty", "deform_roi_pooling", "deform_pool.DeformRoIPoolingPack.offset_fc", "offset.view.view.view", "deform_roi_pooling", "deform_roi_pooling.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "data", ",", "rois", ")", ":", "\n", "        ", "assert", "data", ".", "size", "(", "1", ")", "==", "self", ".", "out_channels", "\n", "n", "=", "rois", ".", "shape", "[", "0", "]", "\n", "if", "n", "==", "0", ":", "\n", "            ", "return", "data", ".", "new_empty", "(", "n", ",", "self", ".", "out_channels", ",", "self", ".", "out_size", "[", "0", "]", ",", "\n", "self", ".", "out_size", "[", "1", "]", ")", "\n", "", "if", "self", ".", "no_trans", ":", "\n", "            ", "offset", "=", "data", ".", "new_empty", "(", "0", ")", "\n", "return", "deform_roi_pooling", "(", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "\n", "self", ".", "out_size", ",", "self", ".", "out_channels", ",", "\n", "self", ".", "no_trans", ",", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "", "else", ":", "\n", "            ", "offset", "=", "data", ".", "new_empty", "(", "0", ")", "\n", "x", "=", "deform_roi_pooling", "(", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "\n", "self", ".", "out_size", ",", "self", ".", "out_channels", ",", "True", ",", "\n", "self", ".", "group_size", ",", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "self", ".", "trans_std", ")", "\n", "offset", "=", "self", ".", "offset_fc", "(", "x", ".", "view", "(", "n", ",", "-", "1", ")", ")", "\n", "offset", "=", "offset", ".", "view", "(", "n", ",", "2", ",", "self", ".", "out_size", "[", "0", "]", ",", "self", ".", "out_size", "[", "1", "]", ")", "\n", "return", "deform_roi_pooling", "(", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "\n", "self", ".", "out_size", ",", "self", ".", "out_channels", ",", "\n", "self", ".", "no_trans", ",", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_pool.ModulatedDeformRoIPoolingPack.__init__": [[179, 231], ["deform_pool.DeformRoIPooling.__init__", "range", "torch.Sequential", "torch.Sequential", "deform_pool.ModulatedDeformRoIPoolingPack.offset_fc[].weight.data.zero_", "deform_pool.ModulatedDeformRoIPoolingPack.offset_fc[].bias.data.zero_", "range", "torch.Sequential", "torch.Sequential", "deform_pool.ModulatedDeformRoIPoolingPack.mask_fc[].weight.data.zero_", "deform_pool.ModulatedDeformRoIPoolingPack.mask_fc[].bias.data.zero_", "offset_fc_seq.append", "mask_fc_seq.append", "torch.Linear", "torch.Linear", "offset_fc_seq.append", "torch.Linear", "torch.Linear", "mask_fc_seq.append", "mask_fc_seq.append", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_scale", ",", "\n", "out_size", ",", "\n", "out_channels", ",", "\n", "no_trans", ",", "\n", "group_size", "=", "1", ",", "\n", "part_size", "=", "None", ",", "\n", "sample_per_part", "=", "4", ",", "\n", "trans_std", "=", ".0", ",", "\n", "num_offset_fcs", "=", "3", ",", "\n", "num_mask_fcs", "=", "2", ",", "\n", "deform_fc_channels", "=", "1024", ")", ":", "\n", "        ", "super", "(", "ModulatedDeformRoIPoolingPack", ",", "\n", "self", ")", ".", "__init__", "(", "spatial_scale", ",", "out_size", ",", "out_channels", ",", "no_trans", ",", "\n", "group_size", ",", "part_size", ",", "sample_per_part", ",", "trans_std", ")", "\n", "\n", "self", ".", "num_offset_fcs", "=", "num_offset_fcs", "\n", "self", ".", "num_mask_fcs", "=", "num_mask_fcs", "\n", "self", ".", "deform_fc_channels", "=", "deform_fc_channels", "\n", "\n", "if", "not", "no_trans", ":", "\n", "            ", "offset_fc_seq", "=", "[", "]", "\n", "ic", "=", "self", ".", "out_size", "[", "0", "]", "*", "self", ".", "out_size", "[", "1", "]", "*", "self", ".", "out_channels", "\n", "for", "i", "in", "range", "(", "self", ".", "num_offset_fcs", ")", ":", "\n", "                ", "if", "i", "<", "self", ".", "num_offset_fcs", "-", "1", ":", "\n", "                    ", "oc", "=", "self", ".", "deform_fc_channels", "\n", "", "else", ":", "\n", "                    ", "oc", "=", "self", ".", "out_size", "[", "0", "]", "*", "self", ".", "out_size", "[", "1", "]", "*", "2", "\n", "", "offset_fc_seq", ".", "append", "(", "nn", ".", "Linear", "(", "ic", ",", "oc", ")", ")", "\n", "ic", "=", "oc", "\n", "if", "i", "<", "self", ".", "num_offset_fcs", "-", "1", ":", "\n", "                    ", "offset_fc_seq", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "", "self", ".", "offset_fc", "=", "nn", ".", "Sequential", "(", "*", "offset_fc_seq", ")", "\n", "self", ".", "offset_fc", "[", "-", "1", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "offset_fc", "[", "-", "1", "]", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "mask_fc_seq", "=", "[", "]", "\n", "ic", "=", "self", ".", "out_size", "[", "0", "]", "*", "self", ".", "out_size", "[", "1", "]", "*", "self", ".", "out_channels", "\n", "for", "i", "in", "range", "(", "self", ".", "num_mask_fcs", ")", ":", "\n", "                ", "if", "i", "<", "self", ".", "num_mask_fcs", "-", "1", ":", "\n", "                    ", "oc", "=", "self", ".", "deform_fc_channels", "\n", "", "else", ":", "\n", "                    ", "oc", "=", "self", ".", "out_size", "[", "0", "]", "*", "self", ".", "out_size", "[", "1", "]", "\n", "", "mask_fc_seq", ".", "append", "(", "nn", ".", "Linear", "(", "ic", ",", "oc", ")", ")", "\n", "ic", "=", "oc", "\n", "if", "i", "<", "self", ".", "num_mask_fcs", "-", "1", ":", "\n", "                    ", "mask_fc_seq", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                    ", "mask_fc_seq", ".", "append", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "", "", "self", ".", "mask_fc", "=", "nn", ".", "Sequential", "(", "*", "mask_fc_seq", ")", "\n", "self", ".", "mask_fc", "[", "-", "2", "]", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "mask_fc", "[", "-", "2", "]", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.dcn.deform_pool.ModulatedDeformRoIPoolingPack.forward": [[232, 259], ["data.size", "data.new_empty", "data.new_empty", "deform_roi_pooling", "data.new_empty", "deform_roi_pooling", "deform_pool.ModulatedDeformRoIPoolingPack.offset_fc", "offset.view.view.view", "deform_pool.ModulatedDeformRoIPoolingPack.mask_fc", "mask.view.view.view", "deform_roi_pooling.view", "deform_roi_pooling.view", "deform_roi_pooling"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "data", ",", "rois", ")", ":", "\n", "        ", "assert", "data", ".", "size", "(", "1", ")", "==", "self", ".", "out_channels", "\n", "n", "=", "rois", ".", "shape", "[", "0", "]", "\n", "if", "n", "==", "0", ":", "\n", "            ", "return", "data", ".", "new_empty", "(", "n", ",", "self", ".", "out_channels", ",", "self", ".", "out_size", "[", "0", "]", ",", "\n", "self", ".", "out_size", "[", "1", "]", ")", "\n", "", "if", "self", ".", "no_trans", ":", "\n", "            ", "offset", "=", "data", ".", "new_empty", "(", "0", ")", "\n", "return", "deform_roi_pooling", "(", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "\n", "self", ".", "out_size", ",", "self", ".", "out_channels", ",", "\n", "self", ".", "no_trans", ",", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "self", ".", "sample_per_part", ",", "\n", "self", ".", "trans_std", ")", "\n", "", "else", ":", "\n", "            ", "offset", "=", "data", ".", "new_empty", "(", "0", ")", "\n", "x", "=", "deform_roi_pooling", "(", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "\n", "self", ".", "out_size", ",", "self", ".", "out_channels", ",", "True", ",", "\n", "self", ".", "group_size", ",", "self", ".", "part_size", ",", "\n", "self", ".", "sample_per_part", ",", "self", ".", "trans_std", ")", "\n", "offset", "=", "self", ".", "offset_fc", "(", "x", ".", "view", "(", "n", ",", "-", "1", ")", ")", "\n", "offset", "=", "offset", ".", "view", "(", "n", ",", "2", ",", "self", ".", "out_size", "[", "0", "]", ",", "self", ".", "out_size", "[", "1", "]", ")", "\n", "mask", "=", "self", ".", "mask_fc", "(", "x", ".", "view", "(", "n", ",", "-", "1", ")", ")", "\n", "mask", "=", "mask", ".", "view", "(", "n", ",", "1", ",", "self", ".", "out_size", "[", "0", "]", ",", "self", ".", "out_size", "[", "1", "]", ")", "\n", "return", "deform_roi_pooling", "(", "\n", "data", ",", "rois", ",", "offset", ",", "self", ".", "spatial_scale", ",", "self", ".", "out_size", ",", "\n", "self", ".", "out_channels", ",", "self", ".", "no_trans", ",", "self", ".", "group_size", ",", "\n", "self", ".", "part_size", ",", "self", ".", "sample_per_part", ",", "self", ".", "trans_std", ")", "*", "mask", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.nms": [[7, 61], ["isinstance", "isinstance", "torch.from_numpy().to.new_zeros", "nms_cpu.nms.cpu().numpy", "torch.from_numpy().to", "TypeError", "nms_cuda.nms", "nms_cpu.nms", "nms_cpu.nms.cpu", "torch.from_numpy", "type"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.nms"], ["def", "nms", "(", "dets", ",", "iou_thr", ",", "device_id", "=", "None", ")", ":", "\n", "    ", "\"\"\"Dispatch to either CPU or GPU NMS implementations.\n\n    The input can be either a torch tensor or numpy array. GPU NMS will be used\n    if the input is a gpu tensor or device_id is specified, otherwise CPU NMS\n    will be used. The returned type will always be the same as inputs.\n\n    Arguments:\n        dets (torch.Tensor or np.ndarray): bboxes with scores.\n        iou_thr (float): IoU threshold for NMS.\n        device_id (int, optional): when `dets` is a numpy array, if `device_id`\n            is None, then cpu nms is used, otherwise gpu_nms will be used.\n\n    Returns:\n        tuple: kept bboxes and indice, which is always the same data type as\n            the input.\n\n    Example:\n        >>> dets = np.array([[49.1, 32.4, 51.0, 35.9, 0.9],\n        >>>                  [49.3, 32.9, 51.0, 35.3, 0.9],\n        >>>                  [49.2, 31.8, 51.0, 35.4, 0.5],\n        >>>                  [35.1, 11.5, 39.1, 15.7, 0.5],\n        >>>                  [35.6, 11.8, 39.3, 14.2, 0.5],\n        >>>                  [35.3, 11.5, 39.9, 14.5, 0.4],\n        >>>                  [35.2, 11.7, 39.7, 15.7, 0.3]], dtype=np.float32)\n        >>> iou_thr = 0.7\n        >>> suppressed, inds = nms(dets, iou_thr)\n        >>> assert len(inds) == len(suppressed) == 3\n    \"\"\"", "\n", "# convert dets (tensor or numpy array) to tensor", "\n", "if", "isinstance", "(", "dets", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "is_numpy", "=", "False", "\n", "dets_th", "=", "dets", "\n", "", "elif", "isinstance", "(", "dets", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "is_numpy", "=", "True", "\n", "device", "=", "'cpu'", "if", "device_id", "is", "None", "else", "'cuda:{}'", ".", "format", "(", "device_id", ")", "\n", "dets_th", "=", "torch", ".", "from_numpy", "(", "dets", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'dets must be either a Tensor or numpy array, but got {}'", ".", "format", "(", "\n", "type", "(", "dets", ")", ")", ")", "\n", "\n", "# execute cpu or cuda nms", "\n", "", "if", "dets_th", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "inds", "=", "dets_th", ".", "new_zeros", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "else", ":", "\n", "        ", "if", "dets_th", ".", "is_cuda", ":", "\n", "            ", "inds", "=", "nms_cuda", ".", "nms", "(", "dets_th", ",", "iou_thr", ")", "\n", "", "else", ":", "\n", "            ", "inds", "=", "nms_cpu", ".", "nms", "(", "dets_th", ",", "iou_thr", ")", "\n", "\n", "", "", "if", "is_numpy", ":", "\n", "        ", "inds", "=", "inds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "dets", "[", "inds", ",", ":", "]", ",", "inds", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.soft_nms": [[63, 119], ["isinstance", "nms_cpu.soft_nms", "dets.detach().cpu", "isinstance", "ValueError", "torch.from_numpy", "TypeError", "new_dets.to", "inds.to", "new_dets.numpy().astype", "inds.numpy().astype", "dets.detach", "type", "new_dets.numpy", "inds.numpy"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.soft_nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to"], ["", "def", "soft_nms", "(", "dets", ",", "iou_thr", ",", "method", "=", "'linear'", ",", "sigma", "=", "0.5", ",", "min_score", "=", "1e-3", ")", ":", "\n", "    ", "\"\"\"Dispatch to only CPU Soft NMS implementations.\n\n    The input can be either a torch tensor or numpy array.\n    The returned type will always be the same as inputs.\n\n    Arguments:\n        dets (torch.Tensor or np.ndarray): bboxes with scores.\n        iou_thr (float): IoU threshold for Soft NMS.\n        method (str): either 'linear' or 'gaussian'\n        sigma (float): hyperparameter for gaussian method\n        min_score (float): score filter threshold\n\n    Returns:\n        tuple: new det bboxes and indice, which is always the same\n        data type as the input.\n\n    Example:\n        >>> dets = np.array([[4., 3., 5., 3., 0.9],\n        >>>                  [4., 3., 5., 4., 0.9],\n        >>>                  [3., 1., 3., 1., 0.5],\n        >>>                  [3., 1., 3., 1., 0.5],\n        >>>                  [3., 1., 3., 1., 0.4],\n        >>>                  [3., 1., 3., 1., 0.0]], dtype=np.float32)\n        >>> iou_thr = 0.7\n        >>> new_dets, inds = soft_nms(dets, iou_thr, sigma=0.5)\n        >>> assert len(inds) == len(new_dets) == 3\n    \"\"\"", "\n", "# convert dets (tensor or numpy array) to tensor", "\n", "if", "isinstance", "(", "dets", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "is_tensor", "=", "True", "\n", "dets_t", "=", "dets", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "elif", "isinstance", "(", "dets", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "is_tensor", "=", "False", "\n", "dets_t", "=", "torch", ".", "from_numpy", "(", "dets", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'dets must be either a Tensor or numpy array, but got {}'", ".", "format", "(", "\n", "type", "(", "dets", ")", ")", ")", "\n", "\n", "", "method_codes", "=", "{", "'linear'", ":", "1", ",", "'gaussian'", ":", "2", "}", "\n", "if", "method", "not", "in", "method_codes", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid method for SoftNMS: {}'", ".", "format", "(", "method", ")", ")", "\n", "", "results", "=", "nms_cpu", ".", "soft_nms", "(", "dets_t", ",", "iou_thr", ",", "method_codes", "[", "method", "]", ",", "sigma", ",", "\n", "min_score", ")", "\n", "\n", "new_dets", "=", "results", "[", ":", ",", ":", "5", "]", "\n", "inds", "=", "results", "[", ":", ",", "5", "]", "\n", "\n", "if", "is_tensor", ":", "\n", "        ", "return", "new_dets", ".", "to", "(", "\n", "device", "=", "dets", ".", "device", ",", "dtype", "=", "dets", ".", "dtype", ")", ",", "inds", ".", "to", "(", "\n", "device", "=", "dets", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "else", ":", "\n", "        ", "return", "new_dets", ".", "numpy", "(", ")", ".", "astype", "(", "dets", ".", "dtype", ")", ",", "inds", ".", "numpy", "(", ")", ".", "astype", "(", "\n", "np", ".", "int64", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.sigmoid_focal_loss.sigmoid_focal_loss.SigmoidFocalLossFunction.forward": [[10, 21], ["ctx.save_for_backward", "sigmoid_focal_loss_cuda.forward"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "target", ",", "gamma", "=", "2.0", ",", "alpha", "=", "0.25", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "input", ",", "target", ")", "\n", "num_classes", "=", "input", ".", "shape", "[", "1", "]", "\n", "ctx", ".", "num_classes", "=", "num_classes", "\n", "ctx", ".", "gamma", "=", "gamma", "\n", "ctx", ".", "alpha", "=", "alpha", "\n", "\n", "loss", "=", "sigmoid_focal_loss_cuda", ".", "forward", "(", "input", ",", "target", ",", "num_classes", ",", "\n", "gamma", ",", "alpha", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.sigmoid_focal_loss.sigmoid_focal_loss.SigmoidFocalLossFunction.backward": [[22, 33], ["d_loss.contiguous.contiguous.contiguous", "sigmoid_focal_loss_cuda.backward"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFEFunction.backward"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "d_loss", ")", ":", "\n", "        ", "input", ",", "target", "=", "ctx", ".", "saved_tensors", "\n", "num_classes", "=", "ctx", ".", "num_classes", "\n", "gamma", "=", "ctx", ".", "gamma", "\n", "alpha", "=", "ctx", ".", "alpha", "\n", "d_loss", "=", "d_loss", ".", "contiguous", "(", ")", "\n", "d_input", "=", "sigmoid_focal_loss_cuda", ".", "backward", "(", "input", ",", "target", ",", "d_loss", ",", "\n", "num_classes", ",", "gamma", ",", "alpha", ")", "\n", "return", "d_input", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.sigmoid_focal_loss.sigmoid_focal_loss.SigmoidFocalLoss.__init__": [[41, 45], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ",", "alpha", ")", ":", "\n", "        ", "super", "(", "SigmoidFocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.sigmoid_focal_loss.sigmoid_focal_loss.SigmoidFocalLoss.forward": [[46, 50], ["sigmoid_focal_loss", "sigmoid_focal_loss.sum"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.focal_loss.sigmoid_focal_loss"], ["", "def", "forward", "(", "self", ",", "logits", ",", "targets", ")", ":", "\n", "        ", "assert", "logits", ".", "is_cuda", "\n", "loss", "=", "sigmoid_focal_loss", "(", "logits", ",", "targets", ",", "self", ".", "gamma", ",", "self", ".", "alpha", ")", "\n", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.sigmoid_focal_loss.sigmoid_focal_loss.SigmoidFocalLoss.__repr__": [[51, 55], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tmpstr", "=", "self", ".", "__class__", ".", "__name__", "+", "'(gamma={}, alpha={})'", ".", "format", "(", "\n", "self", ".", "gamma", ",", "self", ".", "alpha", ")", "\n", "return", "tmpstr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.grid_sampler.grid_sampler._GridSampler.forward": [[11, 33], ["ctx.save_for_backward", "func", "input.dim", "input.dim"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "grid", ",", "mode_enum", ",", "padding_mode_enum", ",", "align_corners", ")", ":", "\n", "\n", "        ", "ctx", ".", "save_for_backward", "(", "input", ",", "grid", ")", "\n", "ctx", ".", "mode_enum", "=", "mode_enum", "\n", "ctx", ".", "padding_mode_enum", "=", "padding_mode_enum", "\n", "ctx", ".", "align_corners", "=", "align_corners", "\n", "\n", "if", "input", ".", "is_cuda", ":", "\n", "            ", "if", "input", ".", "dim", "(", ")", "==", "4", ":", "\n", "                ", "func", "=", "grid_sampler_cuda", ".", "grid_sampler_2d_forward_cuda", "\n", "", "else", ":", "\n", "                ", "func", "=", "grid_sampler_cuda", ".", "grid_sampler_3d_forward_cuda", "\n", "", "", "else", ":", "\n", "            ", "if", "input", ".", "dim", "(", ")", "==", "4", ":", "\n", "                ", "func", "=", "grid_sampler_cuda", ".", "grid_sampler_2d_forward_cpu", "\n", "", "else", ":", "\n", "                ", "func", "=", "grid_sampler_cuda", ".", "grid_sampler_3d_forward_cpu", "\n", "\n", "", "", "output", "=", "func", "(", "input", ",", "grid", ",", "mode_enum", ",", "padding_mode_enum", ",", "align_corners", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.grid_sampler.grid_sampler._GridSampler.backward": [[34, 57], ["func", "input.dim", "input.dim"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input", ",", "grid", "=", "ctx", ".", "saved_tensors", "\n", "mode_enum", "=", "ctx", ".", "mode_enum", "\n", "padding_mode_enum", "=", "ctx", ".", "padding_mode_enum", "\n", "align_corners", "=", "ctx", ".", "align_corners", "\n", "\n", "if", "input", ".", "is_cuda", ":", "\n", "            ", "if", "input", ".", "dim", "(", ")", "==", "4", ":", "\n", "                ", "func", "=", "grid_sampler_cuda", ".", "grid_sampler_2d_backward_cuda", "\n", "", "else", ":", "\n", "                ", "func", "=", "grid_sampler_cuda", ".", "grid_sampler_3d_backward_cuda", "\n", "", "", "else", ":", "\n", "            ", "if", "input", ".", "dim", "(", ")", "==", "4", ":", "\n", "                ", "func", "=", "grid_sampler_cuda", ".", "grid_sampler_2d_backward_cpu", "\n", "", "else", ":", "\n", "                ", "func", "=", "grid_sampler_cuda", ".", "grid_sampler_3d_backward_cpu", "\n", "\n", "", "", "grad_input", ",", "grad_grid", "=", "func", "(", "grad_output", ",", "input", ",", "grid", ",", "mode_enum", ",", "\n", "padding_mode_enum", ",", "align_corners", ")", "\n", "\n", "return", "grad_input", ",", "grad_grid", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.grid_sampler.grid_sampler.grid_sample": [[59, 120], ["torch.grid_sample", "torch.grid_sample", "range", "_GridSampler.apply", "input.size", "grid.size", "input.size", "grid.size", "input.size", "grid.size", "grid.size", "grid.size", "input.dim", "input.dim", "input.dim", "input.dim", "input.dim", "input.size", "input.sizes"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.grid_sampler.grid_sampler.grid_sample", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.grid_sampler.grid_sampler.grid_sample"], ["", "", "def", "grid_sample", "(", "input", ",", "\n", "grid", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "padding_mode", "=", "'zeros'", ",", "\n", "align_corners", "=", "False", ")", ":", "\n", "    ", "if", "torch", ".", "__version__", ">=", "'1.3'", ":", "\n", "        ", "return", "F", ".", "grid_sample", "(", "input", ",", "grid", ",", "mode", ",", "padding_mode", ",", "align_corners", ")", "\n", "", "elif", "align_corners", ":", "\n", "        ", "return", "F", ".", "grid_sample", "(", "input", ",", "grid", ",", "mode", ",", "padding_mode", ")", "\n", "", "else", ":", "\n", "\n", "# use self-compiled grid_sampler to support align_corners=False", "\n", "\n", "        ", "assert", "mode", "in", "[", "'bilinear'", ",", "'nearest'", "]", ",", "'expected mode to be bilinear or nearest, but got: {}'", ".", "format", "(", "mode", ")", "\n", "\n", "assert", "padding_mode", "in", "[", "'zeros'", ",", "'border'", ",", "'reflection'", "]", ",", "'expected padding_mode to be zeros, border, or reflection, '", "'but got: {}'", ".", "format", "(", "padding_mode", ")", "\n", "\n", "if", "mode", "==", "'bilinear'", ":", "\n", "            ", "mode_enum", "=", "0", "\n", "", "else", ":", "\n", "            ", "mode_enum", "=", "1", "\n", "\n", "", "if", "padding_mode", "==", "'zeros'", ":", "\n", "            ", "padding_mode_enum", "=", "0", "\n", "", "elif", "padding_mode", "==", "'border'", ":", "\n", "            ", "padding_mode_enum", "=", "1", "\n", "", "else", ":", "\n", "            ", "padding_mode_enum", "=", "2", "\n", "\n", "# shape check", "\n", "", "assert", "input", ".", "device", "==", "grid", ".", "device", ",", "'expected input and grid to be on same device, '", "'but input is on {} and grid is on {}'", ".", "format", "(", "\n", "input", ".", "device", ",", "grid", ".", "device", ")", "\n", "assert", "input", ".", "dtype", "==", "grid", ".", "dtype", ",", "'expected input and grid to have the same dtype, '", "'but input has {} and grid has {}'", ".", "format", "(", "\n", "input", ".", "dtype", ",", "grid", ".", "dtype", ")", "\n", "assert", "input", ".", "dim", "(", ")", "==", "4", "or", "input", ".", "dim", "(", ")", "==", "5", ",", "'expected 4D or 5D input and grid with same number of dimensions'", "'but got input with sizes {} and grid with sizes {}'", ".", "format", "(", "\n", "input", ".", "size", "(", ")", ",", "grid", ".", "size", "(", ")", ")", "\n", "assert", "input", ".", "size", "(", "0", ")", "==", "grid", ".", "size", "(", "0", ")", ",", "'expected input and grid to have the same batch size, '", "'but got input with sizes {} and grid with sizes {}'", ".", "format", "(", "\n", "input", ".", "size", "(", ")", ",", "grid", ".", "size", "(", ")", ")", "\n", "assert", "grid", ".", "size", "(", "-", "1", ")", "==", "input", ".", "dim", "(", ")", "-", "2", ",", "'expected grid to have size {} in last {} dimension, '", "'but got grid with sizes '", ".", "format", "(", "\n", "input", ".", "dim", "(", ")", "-", "2", ",", "grid", ".", "size", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "2", ",", "input", ".", "dim", "(", ")", ")", ":", "\n", "            ", "assert", "input", ".", "size", "(", "i", ")", ">", "0", ",", "'expected input to have non-empty spatial dimensions, '", "'but input has sizes {} with dimension {} being empty'", ".", "format", "(", "\n", "input", ".", "sizes", "(", ")", ",", "i", ")", "\n", "\n", "", "return", "_GridSampler", ".", "apply", "(", "input", ",", "grid", ",", "mode_enum", ",", "padding_mode_enum", ",", "\n", "align_corners", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_align.roi_align.RoIAlignFunction.forward": [[11, 45], ["torch.nn.modules.utils._pair", "ctx.save_for_backward", "features.size", "isinstance", "isinstance", "features.size", "rois.size", "features.new_zeros", "roi_align_cuda.forward_v1", "roi_align_cuda.forward_v2"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "\n", "features", ",", "\n", "rois", ",", "\n", "out_size", ",", "\n", "spatial_scale", ",", "\n", "sample_num", "=", "0", ",", "\n", "aligned", "=", "True", ")", ":", "\n", "        ", "out_h", ",", "out_w", "=", "_pair", "(", "out_size", ")", "\n", "assert", "isinstance", "(", "out_h", ",", "int", ")", "and", "isinstance", "(", "out_w", ",", "int", ")", "\n", "ctx", ".", "spatial_scale", "=", "spatial_scale", "\n", "ctx", ".", "sample_num", "=", "sample_num", "\n", "ctx", ".", "save_for_backward", "(", "rois", ")", "\n", "ctx", ".", "feature_size", "=", "features", ".", "size", "(", ")", "\n", "ctx", ".", "aligned", "=", "aligned", "\n", "\n", "if", "features", ".", "is_cuda", ":", "\n", "            ", "if", "not", "aligned", ":", "\n", "                ", "(", "batch_size", ",", "num_channels", ",", "data_height", ",", "\n", "data_width", ")", "=", "features", ".", "size", "(", ")", "\n", "num_rois", "=", "rois", ".", "size", "(", "0", ")", "\n", "\n", "output", "=", "features", ".", "new_zeros", "(", "num_rois", ",", "num_channels", ",", "out_h", ",", "\n", "out_w", ")", "\n", "roi_align_cuda", ".", "forward_v1", "(", "features", ",", "rois", ",", "out_h", ",", "out_w", ",", "\n", "spatial_scale", ",", "sample_num", ",", "output", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "roi_align_cuda", ".", "forward_v2", "(", "features", ",", "rois", ",", "\n", "spatial_scale", ",", "out_h", ",", "out_w", ",", "\n", "sample_num", ",", "aligned", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_align.roi_align.RoIAlignFunction.backward": [[46, 74], ["grad_output.size", "grad_output.size", "roi_align_cuda.backward_v2", "rois.new_zeros", "roi_align_cuda.backward_v1", "grad_output.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "once_differentiable", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "feature_size", "=", "ctx", ".", "feature_size", "\n", "spatial_scale", "=", "ctx", ".", "spatial_scale", "\n", "sample_num", "=", "ctx", ".", "sample_num", "\n", "rois", "=", "ctx", ".", "saved_tensors", "[", "0", "]", "\n", "aligned", "=", "ctx", ".", "aligned", "\n", "assert", "(", "feature_size", "is", "not", "None", "and", "grad_output", ".", "is_cuda", ")", "\n", "\n", "batch_size", ",", "num_channels", ",", "data_height", ",", "data_width", "=", "feature_size", "\n", "out_w", "=", "grad_output", ".", "size", "(", "3", ")", "\n", "out_h", "=", "grad_output", ".", "size", "(", "2", ")", "\n", "\n", "grad_input", "=", "grad_rois", "=", "None", "\n", "if", "not", "aligned", ":", "\n", "            ", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "                ", "grad_input", "=", "rois", ".", "new_zeros", "(", "batch_size", ",", "num_channels", ",", "\n", "data_height", ",", "data_width", ")", "\n", "roi_align_cuda", ".", "backward_v1", "(", "grad_output", ".", "contiguous", "(", ")", ",", "rois", ",", "\n", "out_h", ",", "out_w", ",", "spatial_scale", ",", "\n", "sample_num", ",", "grad_input", ")", "\n", "", "", "else", ":", "\n", "            ", "grad_input", "=", "roi_align_cuda", ".", "backward_v2", "(", "\n", "grad_output", ",", "rois", ",", "spatial_scale", ",", "out_h", ",", "out_w", ",", "batch_size", ",", "\n", "num_channels", ",", "data_height", ",", "data_width", ",", "sample_num", ",", "aligned", ")", "\n", "\n", "", "return", "grad_input", ",", "grad_rois", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_align.roi_align.RoIAlign.__init__": [[81, 128], ["torch.nn.Module.__init__", "torch.nn.modules.utils._pair", "float", "int"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "out_size", ",", "\n", "spatial_scale", ",", "\n", "sample_num", "=", "0", ",", "\n", "use_torchvision", "=", "False", ",", "\n", "aligned", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            out_size (tuple): h, w\n            spatial_scale (float): scale the input boxes by this number\n            sample_num (int): number of inputs samples to take for each\n                output sample. 2 to take samples densely for current models.\n            use_torchvision (bool): whether to use roi_align from torchvision\n            aligned (bool): if False, use the legacy implementation in\n                MMDetection. If True, align the results more perfectly.\n\n        Note:\n            The implementation of RoIAlign when aligned=True is modified from\n            https://github.com/facebookresearch/detectron2/\n\n            The meaning of aligned=True:\n\n            Given a continuous coordinate c, its two neighboring pixel\n            indices (in our pixel model) are computed by floor(c - 0.5) and\n            ceil(c - 0.5). For example, c=1.3 has pixel neighbors with discrete\n            indices [0] and [1] (which are sampled from the underlying signal\n            at continuous coordinates 0.5 and 1.5). But the original roi_align\n            (aligned=False) does not subtract the 0.5 when computing\n            neighboring pixel indices and therefore it uses pixels with a\n            slightly incorrect alignment (relative to our pixel model) when\n            performing bilinear interpolation.\n\n            With `aligned=True`,\n            we first appropriately scale the ROI and then shift it by -0.5\n            prior to calling roi_align. This produces the correct neighbors;\n\n            The difference does not make a difference to the model's\n            performance if ROIAlign is used together with conv layers.\n        \"\"\"", "\n", "super", "(", "RoIAlign", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_size", "=", "_pair", "(", "out_size", ")", "\n", "self", ".", "spatial_scale", "=", "float", "(", "spatial_scale", ")", "\n", "self", ".", "aligned", "=", "aligned", "\n", "self", ".", "sample_num", "=", "int", "(", "sample_num", ")", "\n", "self", ".", "use_torchvision", "=", "use_torchvision", "\n", "assert", "not", "(", "use_torchvision", "and", "\n", "aligned", ")", ",", "'Torchvision does not support aligned RoIAlgin'", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_align.roi_align.RoIAlign.forward": [[129, 145], ["tv_roi_align", "roi_align", "rois.dim", "rois.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "rois", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            features: NCHW images\n            rois: Bx5 boxes. First column is the index into N. The other 4\n            columns are xyxy.\n        \"\"\"", "\n", "assert", "rois", ".", "dim", "(", ")", "==", "2", "and", "rois", ".", "size", "(", "1", ")", "==", "5", "\n", "\n", "if", "self", ".", "use_torchvision", ":", "\n", "            ", "from", "torchvision", ".", "ops", "import", "roi_align", "as", "tv_roi_align", "\n", "return", "tv_roi_align", "(", "features", ",", "rois", ",", "self", ".", "out_size", ",", "\n", "self", ".", "spatial_scale", ",", "self", ".", "sample_num", ")", "\n", "", "else", ":", "\n", "            ", "return", "roi_align", "(", "features", ",", "rois", ",", "self", ".", "out_size", ",", "self", ".", "spatial_scale", ",", "\n", "self", ".", "sample_num", ",", "self", ".", "aligned", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_align.roi_align.RoIAlign.__repr__": [[146, 153], ["None"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "format_str", "+=", "'(out_size={}, spatial_scale={}, sample_num={}'", ".", "format", "(", "\n", "self", ".", "out_size", ",", "self", ".", "spatial_scale", ",", "self", ".", "sample_num", ")", "\n", "format_str", "+=", "', use_torchvision={}, aligned={})'", ".", "format", "(", "\n", "self", ".", "use_torchvision", ",", "self", ".", "aligned", ")", "\n", "return", "format_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFENaiveFunction.forward": [[13, 38], ["features.size", "masks.size", "features.size", "features.new_zeros", "masks.size", "masks.size", "masks.size", "carafe_naive_cuda.forward", "ctx.save_for_backward", "features.size", "features.size", "features.size"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "masks", ",", "kernel_size", ",", "group_size", ",", "scale_factor", ")", ":", "\n", "        ", "assert", "scale_factor", ">=", "1", "\n", "assert", "masks", ".", "size", "(", "1", ")", "==", "kernel_size", "*", "kernel_size", "*", "group_size", "\n", "assert", "masks", ".", "size", "(", "-", "1", ")", "==", "features", ".", "size", "(", "-", "1", ")", "*", "scale_factor", "\n", "assert", "masks", ".", "size", "(", "-", "2", ")", "==", "features", ".", "size", "(", "-", "2", ")", "*", "scale_factor", "\n", "assert", "features", ".", "size", "(", "1", ")", "%", "group_size", "==", "0", "\n", "assert", "(", "kernel_size", "-", "1", ")", "%", "2", "==", "0", "and", "kernel_size", ">=", "1", "\n", "ctx", ".", "kernel_size", "=", "kernel_size", "\n", "ctx", ".", "group_size", "=", "group_size", "\n", "ctx", ".", "scale_factor", "=", "scale_factor", "\n", "ctx", ".", "feature_size", "=", "features", ".", "size", "(", ")", "\n", "ctx", ".", "mask_size", "=", "masks", ".", "size", "(", ")", "\n", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "features", ".", "size", "(", ")", "\n", "output", "=", "features", ".", "new_zeros", "(", "(", "n", ",", "c", ",", "h", "*", "scale_factor", ",", "w", "*", "scale_factor", ")", ")", "\n", "if", "features", ".", "is_cuda", ":", "\n", "            ", "carafe_naive_cuda", ".", "forward", "(", "features", ",", "masks", ",", "kernel_size", ",", "group_size", ",", "\n", "scale_factor", ",", "output", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "features", ".", "requires_grad", "or", "masks", ".", "requires_grad", ":", "\n", "            ", "ctx", ".", "save_for_backward", "(", "features", ",", "masks", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFENaiveFunction.backward": [[39, 55], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "carafe_naive_cuda.backward", "grad_output.contiguous"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFEFunction.backward"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "assert", "grad_output", ".", "is_cuda", "\n", "\n", "features", ",", "masks", "=", "ctx", ".", "saved_tensors", "\n", "kernel_size", "=", "ctx", ".", "kernel_size", "\n", "group_size", "=", "ctx", ".", "group_size", "\n", "scale_factor", "=", "ctx", ".", "scale_factor", "\n", "\n", "grad_input", "=", "torch", ".", "zeros_like", "(", "features", ")", "\n", "grad_masks", "=", "torch", ".", "zeros_like", "(", "masks", ")", "\n", "carafe_naive_cuda", ".", "backward", "(", "grad_output", ".", "contiguous", "(", ")", ",", "features", ",", "masks", ",", "\n", "kernel_size", ",", "group_size", ",", "scale_factor", ",", "\n", "grad_input", ",", "grad_masks", ")", "\n", "\n", "return", "grad_input", ",", "grad_masks", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFENaive.__init__": [[62, 70], ["torch.nn.modules.module.Module.__init__", "isinstance", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ",", "group_size", ",", "scale_factor", ")", ":", "\n", "        ", "super", "(", "CARAFENaive", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "isinstance", "(", "kernel_size", ",", "int", ")", "and", "isinstance", "(", "\n", "group_size", ",", "int", ")", "and", "isinstance", "(", "scale_factor", ",", "int", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "group_size", "=", "group_size", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFENaive.forward": [[71, 74], ["CARAFENaiveFunction.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "masks", ")", ":", "\n", "        ", "return", "CARAFENaiveFunction", ".", "apply", "(", "features", ",", "masks", ",", "self", ".", "kernel_size", ",", "\n", "self", ".", "group_size", ",", "self", ".", "scale_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFEFunction.forward": [[78, 107], ["features.size", "masks.size", "features.size", "features.new_zeros", "features.new_zeros", "features.new_zeros", "masks.new_zeros", "masks.size", "masks.size", "masks.size", "features.new_zeros.size", "features.size", "masks.size", "carafe_cuda.forward", "ctx.save_for_backward", "features.size", "features.size", "features.size"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "masks", ",", "kernel_size", ",", "group_size", ",", "scale_factor", ")", ":", "\n", "        ", "assert", "scale_factor", ">=", "1", "\n", "assert", "masks", ".", "size", "(", "1", ")", "==", "kernel_size", "*", "kernel_size", "*", "group_size", "\n", "assert", "masks", ".", "size", "(", "-", "1", ")", "==", "features", ".", "size", "(", "-", "1", ")", "*", "scale_factor", "\n", "assert", "masks", ".", "size", "(", "-", "2", ")", "==", "features", ".", "size", "(", "-", "2", ")", "*", "scale_factor", "\n", "assert", "features", ".", "size", "(", "1", ")", "%", "group_size", "==", "0", "\n", "assert", "(", "kernel_size", "-", "1", ")", "%", "2", "==", "0", "and", "kernel_size", ">=", "1", "\n", "ctx", ".", "kernel_size", "=", "kernel_size", "\n", "ctx", ".", "group_size", "=", "group_size", "\n", "ctx", ".", "scale_factor", "=", "scale_factor", "\n", "ctx", ".", "feature_size", "=", "features", ".", "size", "(", ")", "\n", "ctx", ".", "mask_size", "=", "masks", ".", "size", "(", ")", "\n", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "features", ".", "size", "(", ")", "\n", "output", "=", "features", ".", "new_zeros", "(", "(", "n", ",", "c", ",", "h", "*", "scale_factor", ",", "w", "*", "scale_factor", ")", ")", "\n", "routput", "=", "features", ".", "new_zeros", "(", "output", ".", "size", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "rfeatures", "=", "features", ".", "new_zeros", "(", "features", ".", "size", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "rmasks", "=", "masks", ".", "new_zeros", "(", "masks", ".", "size", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "if", "features", ".", "is_cuda", ":", "\n", "            ", "carafe_cuda", ".", "forward", "(", "features", ",", "rfeatures", ",", "masks", ",", "rmasks", ",", "\n", "kernel_size", ",", "group_size", ",", "scale_factor", ",", "routput", ",", "\n", "output", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "features", ".", "requires_grad", "or", "masks", ".", "requires_grad", ":", "\n", "            ", "ctx", ".", "save_for_backward", "(", "features", ",", "masks", ",", "rfeatures", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFEFunction.backward": [[108, 128], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "carafe_cuda.backward", "grad_output.contiguous"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFEFunction.backward"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "assert", "grad_output", ".", "is_cuda", "\n", "\n", "features", ",", "masks", ",", "rfeatures", "=", "ctx", ".", "saved_tensors", "\n", "kernel_size", "=", "ctx", ".", "kernel_size", "\n", "group_size", "=", "ctx", ".", "group_size", "\n", "scale_factor", "=", "ctx", ".", "scale_factor", "\n", "\n", "rgrad_output", "=", "torch", ".", "zeros_like", "(", "grad_output", ",", "requires_grad", "=", "False", ")", "\n", "rgrad_input_hs", "=", "torch", ".", "zeros_like", "(", "grad_output", ",", "requires_grad", "=", "False", ")", "\n", "rgrad_input", "=", "torch", ".", "zeros_like", "(", "features", ",", "requires_grad", "=", "False", ")", "\n", "rgrad_masks", "=", "torch", ".", "zeros_like", "(", "masks", ",", "requires_grad", "=", "False", ")", "\n", "grad_input", "=", "torch", ".", "zeros_like", "(", "features", ",", "requires_grad", "=", "False", ")", "\n", "grad_masks", "=", "torch", ".", "zeros_like", "(", "masks", ",", "requires_grad", "=", "False", ")", "\n", "carafe_cuda", ".", "backward", "(", "grad_output", ".", "contiguous", "(", ")", ",", "rfeatures", ",", "masks", ",", "\n", "kernel_size", ",", "group_size", ",", "scale_factor", ",", "\n", "rgrad_output", ",", "rgrad_input_hs", ",", "rgrad_input", ",", "\n", "rgrad_masks", ",", "grad_input", ",", "grad_masks", ")", "\n", "return", "grad_input", ",", "grad_masks", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFE.__init__": [[147, 155], ["torch.nn.modules.module.Module.__init__", "isinstance", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "kernel_size", ",", "group_size", ",", "scale_factor", ")", ":", "\n", "        ", "super", "(", "CARAFE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "isinstance", "(", "kernel_size", ",", "int", ")", "and", "isinstance", "(", "\n", "group_size", ",", "int", ")", "and", "isinstance", "(", "scale_factor", ",", "int", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "group_size", "=", "group_size", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFE.forward": [[156, 159], ["CARAFEFunction.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "masks", ")", ":", "\n", "        ", "return", "CARAFEFunction", ".", "apply", "(", "features", ",", "masks", ",", "self", ".", "kernel_size", ",", "\n", "self", ".", "group_size", ",", "self", ".", "scale_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFEPack.__init__": [[182, 209], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "carafe.CARAFEPack.init_weights", "int"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["def", "__init__", "(", "self", ",", "\n", "channels", ",", "\n", "scale_factor", ",", "\n", "up_kernel", "=", "5", ",", "\n", "up_group", "=", "1", ",", "\n", "encoder_kernel", "=", "3", ",", "\n", "encoder_dilation", "=", "1", ",", "\n", "compressed_channels", "=", "64", ")", ":", "\n", "        ", "super", "(", "CARAFEPack", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "up_kernel", "=", "up_kernel", "\n", "self", ".", "up_group", "=", "up_group", "\n", "self", ".", "encoder_kernel", "=", "encoder_kernel", "\n", "self", ".", "encoder_dilation", "=", "encoder_dilation", "\n", "self", ".", "compressed_channels", "=", "compressed_channels", "\n", "self", ".", "channel_compressor", "=", "nn", ".", "Conv2d", "(", "channels", ",", "self", ".", "compressed_channels", ",", "\n", "1", ")", "\n", "self", ".", "content_encoder", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "compressed_channels", ",", "\n", "self", ".", "up_kernel", "*", "self", ".", "up_kernel", "*", "self", ".", "up_group", "*", "\n", "self", ".", "scale_factor", "*", "self", ".", "scale_factor", ",", "\n", "self", ".", "encoder_kernel", ",", "\n", "padding", "=", "int", "(", "(", "self", ".", "encoder_kernel", "-", "1", ")", "*", "self", ".", "encoder_dilation", "/", "2", ")", ",", "\n", "dilation", "=", "self", ".", "encoder_dilation", ",", "\n", "groups", "=", "1", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFEPack.init_weights": [[210, 215], ["carafe.CARAFEPack.modules", "mmcv.cnn.normal_init", "isinstance", "mmcv.cnn.xavier_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "xavier_init", "(", "m", ",", "distribution", "=", "'uniform'", ")", "\n", "", "", "normal_init", "(", "self", ".", "content_encoder", ",", "std", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFEPack.kernel_normalizer": [[216, 226], ["torch.pixel_shuffle", "torch.pixel_shuffle", "torch.pixel_shuffle", "mask.view().contiguous.view().contiguous.size", "int", "mask.view().contiguous.view().contiguous.view", "torch.softmax", "torch.softmax", "torch.softmax", "mask.view().contiguous.view().contiguous.view().contiguous", "mask.view().contiguous.view().contiguous.view"], "methods", ["None"], ["", "def", "kernel_normalizer", "(", "self", ",", "mask", ")", ":", "\n", "        ", "mask", "=", "F", ".", "pixel_shuffle", "(", "mask", ",", "self", ".", "scale_factor", ")", "\n", "n", ",", "mask_c", ",", "h", ",", "w", "=", "mask", ".", "size", "(", ")", "\n", "mask_channel", "=", "int", "(", "mask_c", "/", "(", "self", ".", "up_kernel", "*", "self", ".", "up_kernel", ")", ")", "\n", "mask", "=", "mask", ".", "view", "(", "n", ",", "mask_channel", ",", "-", "1", ",", "h", ",", "w", ")", "\n", "\n", "mask", "=", "F", ".", "softmax", "(", "mask", ",", "dim", "=", "2", ")", "\n", "mask", "=", "mask", ".", "view", "(", "n", ",", "mask_c", ",", "h", ",", "w", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFEPack.feature_reassemble": [[227, 230], ["carafe"], "methods", ["None"], ["", "def", "feature_reassemble", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "x", "=", "carafe", "(", "x", ",", "mask", ",", "self", ".", "up_kernel", ",", "self", ".", "up_group", ",", "self", ".", "scale_factor", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFEPack.forward": [[231, 238], ["carafe.CARAFEPack.channel_compressor", "carafe.CARAFEPack.content_encoder", "carafe.CARAFEPack.kernel_normalizer", "carafe.CARAFEPack.feature_reassemble"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFEPack.kernel_normalizer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFEPack.feature_reassemble"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "compressed_x", "=", "self", ".", "channel_compressor", "(", "x", ")", "\n", "mask", "=", "self", ".", "content_encoder", "(", "compressed_x", ")", "\n", "mask", "=", "self", ".", "kernel_normalizer", "(", "mask", ")", "\n", "\n", "x", "=", "self", ".", "feature_reassemble", "(", "x", ",", "mask", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build": [[8, 16], ["isinstance", "torch.nn.Sequential", "mmdet.utils.build_from_cfg", "mmdet.utils.build_from_cfg", "registry.BACKBONES", "registry.NECKS", "registry.ROI_EXTRACTORS", "registry.SHARED_HEADS", "registry.HEADS", "registry.LOSSES", "registry.DETECTORS"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.build_from_cfg", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.build_from_cfg"], ["def", "_concat_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "ann_files", "=", "cfg", "[", "'ann_file'", "]", "\n", "img_prefixes", "=", "cfg", ".", "get", "(", "'img_prefix'", ",", "None", ")", "\n", "seg_prefixes", "=", "cfg", ".", "get", "(", "'seg_prefix'", ",", "None", ")", "\n", "proposal_files", "=", "cfg", ".", "get", "(", "'proposal_file'", ",", "None", ")", "\n", "\n", "datasets", "=", "[", "]", "\n", "num_dset", "=", "len", "(", "ann_files", ")", "\n", "for", "i", "in", "range", "(", "num_dset", ")", ":", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_backbone": [[18, 20], ["builder.build"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build"], ["data_cfg", "[", "'ann_file'", "]", "=", "ann_files", "[", "i", "]", "\n", "if", "isinstance", "(", "img_prefixes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'img_prefix'", "]", "=", "img_prefixes", "[", "i", "]", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_neck": [[22, 24], ["builder.build"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build"], ["            ", "data_cfg", "[", "'seg_prefix'", "]", "=", "seg_prefixes", "[", "i", "]", "\n", "", "if", "isinstance", "(", "proposal_files", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'proposal_file'", "]", "=", "proposal_files", "[", "i", "]", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_roi_extractor": [[26, 28], ["builder.build"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build"], ["\n", "", "return", "ConcatDataset", "(", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_shared_head": [[30, 32], ["builder.build"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build"], ["", "def", "build_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "if", "isinstance", "(", "cfg", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "dataset", "=", "ConcatDataset", "(", "[", "build_dataset", "(", "c", ",", "default_args", ")", "for", "c", "in", "cfg", "]", ")", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_head": [[34, 36], ["builder.build"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build"], ["        ", "dataset", "=", "RepeatDataset", "(", "\n", "build_dataset", "(", "cfg", "[", "'dataset'", "]", ",", "default_args", ")", ",", "cfg", "[", "'times'", "]", ")", "\n", "", "elif", "isinstance", "(", "cfg", ".", "get", "(", "'ann_file'", ")", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss": [[38, 40], ["builder.build"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build"], ["", "else", ":", "\n", "        ", "dataset", "=", "build_from_cfg", "(", "cfg", ",", "DATASETS", ",", "default_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_detector": [[42, 44], ["builder.build", "dict"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build"], ["", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.fpn.FPN.__init__": [[50, 130], ["torch.Module.__init__", "isinstance", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "mmdet.ops.ConvModule", "mmdet.ops.ConvModule", "fpn.FPN.lateral_convs.append", "fpn.FPN.fpn_convs.append", "range", "len", "mmdet.ops.ConvModule", "fpn.FPN.fpn_convs.append"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "num_outs", ",", "\n", "start_level", "=", "0", ",", "\n", "end_level", "=", "-", "1", ",", "\n", "add_extra_convs", "=", "False", ",", "\n", "extra_convs_on_inputs", "=", "True", ",", "\n", "relu_before_extra_convs", "=", "False", ",", "\n", "no_norm_on_lateral", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "act_cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "FPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "in_channels", ",", "list", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_ins", "=", "len", "(", "in_channels", ")", "\n", "self", ".", "num_outs", "=", "num_outs", "\n", "self", ".", "relu_before_extra_convs", "=", "relu_before_extra_convs", "\n", "self", ".", "no_norm_on_lateral", "=", "no_norm_on_lateral", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n", "if", "end_level", "==", "-", "1", ":", "\n", "            ", "self", ".", "backbone_end_level", "=", "self", ".", "num_ins", "\n", "assert", "num_outs", ">=", "self", ".", "num_ins", "-", "start_level", "\n", "", "else", ":", "\n", "# if end_level < inputs, no extra level is allowed", "\n", "            ", "self", ".", "backbone_end_level", "=", "end_level", "\n", "assert", "end_level", "<=", "len", "(", "in_channels", ")", "\n", "assert", "num_outs", "==", "end_level", "-", "start_level", "\n", "", "self", ".", "start_level", "=", "start_level", "\n", "self", ".", "end_level", "=", "end_level", "\n", "self", ".", "add_extra_convs", "=", "add_extra_convs", "\n", "self", ".", "extra_convs_on_inputs", "=", "extra_convs_on_inputs", "\n", "\n", "self", ".", "lateral_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "fpn_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "start_level", ",", "self", ".", "backbone_end_level", ")", ":", "\n", "            ", "l_conv", "=", "ConvModule", "(", "\n", "in_channels", "[", "i", "]", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", "if", "not", "self", ".", "no_norm_on_lateral", "else", "None", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "inplace", "=", "False", ")", "\n", "fpn_conv", "=", "ConvModule", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "lateral_convs", ".", "append", "(", "l_conv", ")", "\n", "self", ".", "fpn_convs", ".", "append", "(", "fpn_conv", ")", "\n", "\n", "# add extra conv layers (e.g., RetinaNet)", "\n", "", "extra_levels", "=", "num_outs", "-", "self", ".", "backbone_end_level", "+", "self", ".", "start_level", "\n", "if", "add_extra_convs", "and", "extra_levels", ">=", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "extra_levels", ")", ":", "\n", "                ", "if", "i", "==", "0", "and", "self", ".", "extra_convs_on_inputs", ":", "\n", "                    ", "in_channels", "=", "self", ".", "in_channels", "[", "self", ".", "backbone_end_level", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "in_channels", "=", "out_channels", "\n", "", "extra_fpn_conv", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "inplace", "=", "False", ")", "\n", "self", ".", "fpn_convs", ".", "append", "(", "extra_fpn_conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.fpn.FPN.init_weights": [[132, 136], ["fpn.FPN.modules", "isinstance", "mmcv.cnn.xavier_init"], "methods", ["None"], ["", "", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "xavier_init", "(", "m", ",", "distribution", "=", "'uniform'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.fpn.FPN.forward": [[137, 179], ["mmdet.core.auto_fp16", "len", "range", "tuple", "len", "len", "lateral_conv", "torch.interpolate", "torch.interpolate", "len", "enumerate", "range", "range", "range", "outs.append", "outs.append", "outs.append", "torch.max_pool2d", "torch.max_pool2d", "outs.append", "outs.append", "torch.relu", "torch.relu"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.auto_fp16"], ["", "", "", "@", "auto_fp16", "(", ")", "\n", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "assert", "len", "(", "inputs", ")", "==", "len", "(", "self", ".", "in_channels", ")", "\n", "\n", "# build laterals", "\n", "laterals", "=", "[", "\n", "lateral_conv", "(", "inputs", "[", "i", "+", "self", ".", "start_level", "]", ")", "\n", "for", "i", ",", "lateral_conv", "in", "enumerate", "(", "self", ".", "lateral_convs", ")", "\n", "]", "\n", "\n", "# build top-down path", "\n", "used_backbone_levels", "=", "len", "(", "laterals", ")", "\n", "for", "i", "in", "range", "(", "used_backbone_levels", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "prev_shape", "=", "laterals", "[", "i", "-", "1", "]", ".", "shape", "[", "2", ":", "]", "\n", "laterals", "[", "i", "-", "1", "]", "+=", "F", ".", "interpolate", "(", "\n", "laterals", "[", "i", "]", ",", "size", "=", "prev_shape", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "# build outputs", "\n", "# part 1: from original levels", "\n", "", "outs", "=", "[", "\n", "self", ".", "fpn_convs", "[", "i", "]", "(", "laterals", "[", "i", "]", ")", "for", "i", "in", "range", "(", "used_backbone_levels", ")", "\n", "]", "\n", "# part 2: add extra levels", "\n", "if", "self", ".", "num_outs", ">", "len", "(", "outs", ")", ":", "\n", "# use max pool to get more levels on top of outputs", "\n", "# (e.g., Faster R-CNN, Mask R-CNN)", "\n", "            ", "if", "not", "self", ".", "add_extra_convs", ":", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "num_outs", "-", "used_backbone_levels", ")", ":", "\n", "                    ", "outs", ".", "append", "(", "F", ".", "max_pool2d", "(", "outs", "[", "-", "1", "]", ",", "1", ",", "stride", "=", "2", ")", ")", "\n", "# add conv layers on top of original feature maps (RetinaNet)", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "extra_convs_on_inputs", ":", "\n", "                    ", "orig", "=", "inputs", "[", "self", ".", "backbone_end_level", "-", "1", "]", "\n", "outs", ".", "append", "(", "self", ".", "fpn_convs", "[", "used_backbone_levels", "]", "(", "orig", ")", ")", "\n", "", "else", ":", "\n", "                    ", "outs", ".", "append", "(", "self", ".", "fpn_convs", "[", "used_backbone_levels", "]", "(", "outs", "[", "-", "1", "]", ")", ")", "\n", "", "for", "i", "in", "range", "(", "used_backbone_levels", "+", "1", ",", "self", ".", "num_outs", ")", ":", "\n", "                    ", "if", "self", ".", "relu_before_extra_convs", ":", "\n", "                        ", "outs", ".", "append", "(", "self", ".", "fpn_convs", "[", "i", "]", "(", "F", ".", "relu", "(", "outs", "[", "-", "1", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "outs", ".", "append", "(", "self", ".", "fpn_convs", "[", "i", "]", "(", "outs", "[", "-", "1", "]", ")", ")", "\n", "", "", "", "", "return", "tuple", "(", "outs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.hrfpn.HRFPN.__init__": [[30, 72], ["torch.Module.__init__", "isinstance", "len", "mmdet.ops.ConvModule", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "sum", "hrfpn.HRFPN.fpn_convs.append", "mmdet.ops.ConvModule"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "num_outs", "=", "5", ",", "\n", "pooling_type", "=", "'AVG'", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "with_cp", "=", "False", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "HRFPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "in_channels", ",", "list", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_ins", "=", "len", "(", "in_channels", ")", "\n", "self", ".", "num_outs", "=", "num_outs", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "\n", "self", ".", "reduction_conv", "=", "ConvModule", "(", "\n", "sum", "(", "in_channels", ")", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n", "self", ".", "fpn_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_outs", ")", ":", "\n", "            ", "self", ".", "fpn_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "act_cfg", "=", "None", ")", ")", "\n", "\n", "", "if", "pooling_type", "==", "'MAX'", ":", "\n", "            ", "self", ".", "pooling", "=", "F", ".", "max_pool2d", "\n", "", "else", ":", "\n", "            ", "self", ".", "pooling", "=", "F", ".", "avg_pool2d", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.hrfpn.HRFPN.init_weights": [[73, 77], ["hrfpn.HRFPN.modules", "isinstance", "mmcv.cnn.weight_init.caffe2_xavier_init"], "methods", ["None"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "caffe2_xavier_init", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.hrfpn.HRFPN.forward": [[78, 101], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "tuple", "len", "outs.append", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint", "hrfpn.HRFPN.reduction_conv", "outs.append", "outputs.append", "torch.interpolate", "torch.interpolate", "torch.interpolate", "hrfpn.HRFPN.pooling", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "assert", "len", "(", "inputs", ")", "==", "self", ".", "num_ins", "\n", "outs", "=", "[", "inputs", "[", "0", "]", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_ins", ")", ":", "\n", "            ", "outs", ".", "append", "(", "\n", "F", ".", "interpolate", "(", "inputs", "[", "i", "]", ",", "scale_factor", "=", "2", "**", "i", ",", "mode", "=", "'bilinear'", ")", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "outs", ",", "dim", "=", "1", ")", "\n", "if", "out", ".", "requires_grad", "and", "self", ".", "with_cp", ":", "\n", "            ", "out", "=", "checkpoint", "(", "self", ".", "reduction_conv", ",", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "reduction_conv", "(", "out", ")", "\n", "", "outs", "=", "[", "out", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_outs", ")", ":", "\n", "            ", "outs", ".", "append", "(", "self", ".", "pooling", "(", "out", ",", "kernel_size", "=", "2", "**", "i", ",", "stride", "=", "2", "**", "i", ")", ")", "\n", "", "outputs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_outs", ")", ":", "\n", "            ", "if", "outs", "[", "i", "]", ".", "requires_grad", "and", "self", ".", "with_cp", ":", "\n", "                ", "tmp_out", "=", "checkpoint", "(", "self", ".", "fpn_convs", "[", "i", "]", ",", "outs", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "tmp_out", "=", "self", ".", "fpn_convs", "[", "i", "]", "(", "outs", "[", "i", "]", ")", "\n", "", "outputs", ".", "append", "(", "tmp_out", ")", "\n", "", "return", "tuple", "(", "outputs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.fpn_carafe.FPN_CARAFE.__init__": [[34, 201], ["dict", "torch.Module.__init__", "isinstance", "len", "upsample_cfg.copy", "fpn_carafe.FPN_CARAFE.upsample_cfg.get", "torch.ReLU", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "fpn_carafe.FPN_CARAFE.upsample_cfg.pop", "mmdet.ops.ConvModule", "mmdet.ops.ConvModule", "fpn_carafe.FPN_CARAFE.lateral_convs.append", "fpn_carafe.FPN_CARAFE.fpn_convs.append", "range", "hasattr", "len", "fpn_carafe.FPN_CARAFE.upsample_cfg.copy", "mmdet.ops.build_upsample_layer", "fpn_carafe.FPN_CARAFE.upsample_modules.append", "mmdet.ops.ConvModule", "mmdet.ops.build_upsample_layer", "mmdet.ops.ConvModule", "fpn_carafe.FPN_CARAFE.upsample_modules.append", "fpn_carafe.FPN_CARAFE.fpn_convs.append", "fpn_carafe.FPN_CARAFE.lateral_convs.append", "fpn_carafe.FPN_CARAFE.update", "dict", "fpn_carafe.FPN_CARAFE.update", "dict", "fpn_carafe.FPN_CARAFE.update", "fpn_carafe.FPN_CARAFE.update", "dict", "dict"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.upsample.build_upsample_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.upsample.build_upsample_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "num_outs", ",", "\n", "start_level", "=", "0", ",", "\n", "end_level", "=", "-", "1", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "act_cfg", "=", "None", ",", "\n", "order", "=", "(", "'conv'", ",", "'norm'", ",", "'act'", ")", ",", "\n", "upsample_cfg", "=", "dict", "(", "\n", "type", "=", "'carafe'", ",", "\n", "up_kernel", "=", "5", ",", "\n", "up_group", "=", "1", ",", "\n", "encoder_kernel", "=", "3", ",", "\n", "encoder_dilation", "=", "1", ")", ")", ":", "\n", "        ", "super", "(", "FPN_CARAFE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "in_channels", ",", "list", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_ins", "=", "len", "(", "in_channels", ")", "\n", "self", ".", "num_outs", "=", "num_outs", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "with_bias", "=", "norm_cfg", "is", "None", "\n", "self", ".", "upsample_cfg", "=", "upsample_cfg", ".", "copy", "(", ")", "\n", "self", ".", "upsample", "=", "self", ".", "upsample_cfg", ".", "get", "(", "'type'", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "order", "=", "order", "\n", "assert", "order", "in", "[", "(", "'conv'", ",", "'norm'", ",", "'act'", ")", ",", "(", "'act'", ",", "'conv'", ",", "'norm'", ")", "]", "\n", "\n", "assert", "self", ".", "upsample", "in", "[", "\n", "'nearest'", ",", "'bilinear'", ",", "'deconv'", ",", "'pixel_shuffle'", ",", "'carafe'", ",", "None", "\n", "]", "\n", "if", "self", ".", "upsample", "in", "[", "'deconv'", ",", "'pixel_shuffle'", "]", ":", "\n", "            ", "assert", "hasattr", "(", "\n", "self", ".", "upsample_cfg", ",", "\n", "'upsample_kernel'", ")", "and", "self", ".", "upsample_cfg", ".", "upsample_kernel", ">", "0", "\n", "self", ".", "upsample_kernel", "=", "self", ".", "upsample_cfg", ".", "pop", "(", "'upsample_kernel'", ")", "\n", "\n", "", "if", "end_level", "==", "-", "1", ":", "\n", "            ", "self", ".", "backbone_end_level", "=", "self", ".", "num_ins", "\n", "assert", "num_outs", ">=", "self", ".", "num_ins", "-", "start_level", "\n", "", "else", ":", "\n", "# if end_level < inputs, no extra level is allowed", "\n", "            ", "self", ".", "backbone_end_level", "=", "end_level", "\n", "assert", "end_level", "<=", "len", "(", "in_channels", ")", "\n", "assert", "num_outs", "==", "end_level", "-", "start_level", "\n", "", "self", ".", "start_level", "=", "start_level", "\n", "self", ".", "end_level", "=", "end_level", "\n", "\n", "self", ".", "lateral_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "fpn_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "upsample_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "start_level", ",", "self", ".", "backbone_end_level", ")", ":", "\n", "            ", "l_conv", "=", "ConvModule", "(", "\n", "in_channels", "[", "i", "]", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "bias", "=", "self", ".", "with_bias", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "inplace", "=", "False", ",", "\n", "order", "=", "self", ".", "order", ")", "\n", "fpn_conv", "=", "ConvModule", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "bias", "=", "self", ".", "with_bias", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "inplace", "=", "False", ",", "\n", "order", "=", "self", ".", "order", ")", "\n", "if", "i", "!=", "self", ".", "backbone_end_level", "-", "1", ":", "\n", "                ", "upsample_cfg_", "=", "self", ".", "upsample_cfg", ".", "copy", "(", ")", "\n", "if", "self", ".", "upsample", "==", "'deconv'", ":", "\n", "                    ", "upsample_cfg_", ".", "update", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "self", ".", "upsample_kernel", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "(", "self", ".", "upsample_kernel", "-", "1", ")", "//", "2", ",", "\n", "output_padding", "=", "(", "self", ".", "upsample_kernel", "-", "1", ")", "//", "2", ")", "\n", "", "elif", "self", ".", "upsample", "==", "'pixel_shuffle'", ":", "\n", "                    ", "upsample_cfg_", ".", "update", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "scale_factor", "=", "2", ",", "\n", "upsample_kernel", "=", "self", ".", "upsample_kernel", ")", "\n", "", "elif", "self", ".", "upsample", "==", "'carafe'", ":", "\n", "                    ", "upsample_cfg_", ".", "update", "(", "channels", "=", "out_channels", ",", "scale_factor", "=", "2", ")", "\n", "", "else", ":", "\n", "# suppress warnings", "\n", "                    ", "align_corners", "=", "(", "None", "\n", "if", "self", ".", "upsample", "==", "'nearest'", "else", "False", ")", "\n", "upsample_cfg_", ".", "update", "(", "\n", "scale_factor", "=", "2", ",", "\n", "mode", "=", "self", ".", "upsample", ",", "\n", "align_corners", "=", "align_corners", ")", "\n", "", "upsample_module", "=", "build_upsample_layer", "(", "upsample_cfg_", ")", "\n", "self", ".", "upsample_modules", ".", "append", "(", "upsample_module", ")", "\n", "", "self", ".", "lateral_convs", ".", "append", "(", "l_conv", ")", "\n", "self", ".", "fpn_convs", ".", "append", "(", "fpn_conv", ")", "\n", "\n", "# add extra conv layers (e.g., RetinaNet)", "\n", "", "extra_out_levels", "=", "(", "\n", "num_outs", "-", "self", ".", "backbone_end_level", "+", "self", ".", "start_level", ")", "\n", "if", "extra_out_levels", ">=", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "extra_out_levels", ")", ":", "\n", "                ", "in_channels", "=", "(", "\n", "self", ".", "in_channels", "[", "self", ".", "backbone_end_level", "-", "\n", "1", "]", "if", "i", "==", "0", "else", "out_channels", ")", "\n", "extra_l_conv", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "bias", "=", "self", ".", "with_bias", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "inplace", "=", "False", ",", "\n", "order", "=", "self", ".", "order", ")", "\n", "if", "self", ".", "upsample", "==", "'deconv'", ":", "\n", "                    ", "upsampler_cfg_", "=", "dict", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "self", ".", "upsample_kernel", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "(", "self", ".", "upsample_kernel", "-", "1", ")", "//", "2", ",", "\n", "output_padding", "=", "(", "self", ".", "upsample_kernel", "-", "1", ")", "//", "2", ")", "\n", "", "elif", "self", ".", "upsample", "==", "'pixel_shuffle'", ":", "\n", "                    ", "upsampler_cfg_", "=", "dict", "(", "\n", "in_channels", "=", "out_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "scale_factor", "=", "2", ",", "\n", "upsample_kernel", "=", "self", ".", "upsample_kernel", ")", "\n", "", "elif", "self", ".", "upsample", "==", "'carafe'", ":", "\n", "                    ", "upsampler_cfg_", "=", "dict", "(", "\n", "channels", "=", "out_channels", ",", "\n", "scale_factor", "=", "2", ",", "\n", "**", "self", ".", "upsample_cfg", ")", "\n", "", "else", ":", "\n", "# suppress warnings", "\n", "                    ", "align_corners", "=", "(", "None", "\n", "if", "self", ".", "upsample", "==", "'nearest'", "else", "False", ")", "\n", "upsampler_cfg_", "=", "dict", "(", "\n", "scale_factor", "=", "2", ",", "\n", "mode", "=", "self", ".", "upsample", ",", "\n", "align_corners", "=", "align_corners", ")", "\n", "", "upsampler_cfg_", "[", "'type'", "]", "=", "self", ".", "upsample", "\n", "upsample_module", "=", "build_upsample_layer", "(", "upsampler_cfg_", ")", "\n", "extra_fpn_conv", "=", "ConvModule", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "bias", "=", "self", ".", "with_bias", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "inplace", "=", "False", ",", "\n", "order", "=", "self", ".", "order", ")", "\n", "self", ".", "upsample_modules", ".", "append", "(", "upsample_module", ")", "\n", "self", ".", "fpn_convs", ".", "append", "(", "extra_fpn_conv", ")", "\n", "self", ".", "lateral_convs", ".", "append", "(", "extra_l_conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.fpn_carafe.FPN_CARAFE.init_weights": [[203, 210], ["fpn_carafe.FPN_CARAFE.modules", "fpn_carafe.FPN_CARAFE.modules", "isinstance", "isinstance", "mmcv.cnn.xavier_init", "m.init_weights"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["", "", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "ConvTranspose2d", ")", ")", ":", "\n", "                ", "xavier_init", "(", "m", ",", "distribution", "=", "'uniform'", ")", "\n", "", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "CARAFEPack", ")", ":", "\n", "                ", "m", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.fpn_carafe.FPN_CARAFE.slice_as": [[211, 219], ["src.size", "dst.size", "src.size", "dst.size", "src.size", "dst.size", "src.size", "dst.size", "dst.size", "dst.size"], "methods", ["None"], ["", "", "", "def", "slice_as", "(", "self", ",", "src", ",", "dst", ")", ":", "\n", "# slice src as dst", "\n", "# src should have the same or larger size than dst", "\n", "        ", "assert", "(", "src", ".", "size", "(", "2", ")", ">=", "dst", ".", "size", "(", "2", ")", ")", "and", "(", "src", ".", "size", "(", "3", ")", ">=", "dst", ".", "size", "(", "3", ")", ")", "\n", "if", "src", ".", "size", "(", "2", ")", "==", "dst", ".", "size", "(", "2", ")", "and", "src", ".", "size", "(", "3", ")", "==", "dst", ".", "size", "(", "3", ")", ":", "\n", "            ", "return", "src", "\n", "", "else", ":", "\n", "            ", "return", "src", "[", ":", ",", ":", ",", ":", "dst", ".", "size", "(", "2", ")", ",", ":", "dst", ".", "size", "(", "3", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.fpn_carafe.FPN_CARAFE.tensor_add": [[220, 226], ["a.size", "b.size", "fpn_carafe.FPN_CARAFE.slice_as"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.fpn_carafe.FPN_CARAFE.slice_as"], ["", "", "def", "tensor_add", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "if", "a", ".", "size", "(", ")", "==", "b", ".", "size", "(", ")", ":", "\n", "            ", "c", "=", "a", "+", "b", "\n", "", "else", ":", "\n", "            ", "c", "=", "a", "+", "self", ".", "slice_as", "(", "b", ",", "a", ")", "\n", "", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.fpn_carafe.FPN_CARAFE.forward": [[227, 255], ["enumerate", "range", "len", "range", "tuple", "len", "len", "lateral_conv", "laterals.append", "fpn_carafe.FPN_CARAFE.tensor_add", "outs.append", "len", "min", "len"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.fpn_carafe.FPN_CARAFE.tensor_add"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "assert", "len", "(", "inputs", ")", "==", "len", "(", "self", ".", "in_channels", ")", "\n", "\n", "# build laterals", "\n", "laterals", "=", "[", "]", "\n", "for", "i", ",", "lateral_conv", "in", "enumerate", "(", "self", ".", "lateral_convs", ")", ":", "\n", "            ", "if", "i", "<=", "self", ".", "backbone_end_level", "-", "self", ".", "start_level", ":", "\n", "                ", "input", "=", "inputs", "[", "min", "(", "i", "+", "self", ".", "start_level", ",", "len", "(", "inputs", ")", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "                ", "input", "=", "laterals", "[", "-", "1", "]", "\n", "", "lateral", "=", "lateral_conv", "(", "input", ")", "\n", "laterals", ".", "append", "(", "lateral", ")", "\n", "\n", "# build top-down path", "\n", "", "for", "i", "in", "range", "(", "len", "(", "laterals", ")", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "if", "self", ".", "upsample", "is", "not", "None", ":", "\n", "                ", "upsample_feat", "=", "self", ".", "upsample_modules", "[", "i", "-", "1", "]", "(", "laterals", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "upsample_feat", "=", "laterals", "[", "i", "]", "\n", "", "laterals", "[", "i", "-", "1", "]", "=", "self", ".", "tensor_add", "(", "laterals", "[", "i", "-", "1", "]", ",", "upsample_feat", ")", "\n", "\n", "# build outputs", "\n", "", "num_conv_outs", "=", "len", "(", "self", ".", "fpn_convs", ")", "\n", "outs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_conv_outs", ")", ":", "\n", "            ", "out", "=", "self", ".", "fpn_convs", "[", "i", "]", "(", "laterals", "[", "i", "]", ")", "\n", "outs", ".", "append", "(", "out", ")", "\n", "", "return", "tuple", "(", "outs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.nas_fpn.MergingCell.__init__": [[11, 22], ["torch.Module.__init__", "mmdet.ops.ConvModule"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", "=", "256", ",", "with_conv", "=", "True", ",", "norm_cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "MergingCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_conv", "=", "with_conv", "\n", "if", "self", ".", "with_conv", ":", "\n", "            ", "self", ".", "conv_out", "=", "ConvModule", "(", "\n", "channels", ",", "\n", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "order", "=", "(", "'act'", ",", "'conv'", ",", "'norm'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.nas_fpn.MergingCell._binary_op": [[23, 25], ["None"], "methods", ["None"], ["", "", "def", "_binary_op", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.nas_fpn.MergingCell._resize": [[26, 36], ["torch.interpolate", "torch.interpolate", "torch.max_pool2d", "torch.max_pool2d"], "methods", ["None"], ["", "def", "_resize", "(", "self", ",", "x", ",", "size", ")", ":", "\n", "        ", "if", "x", ".", "shape", "[", "-", "2", ":", "]", "==", "size", ":", "\n", "            ", "return", "x", "\n", "", "elif", "x", ".", "shape", "[", "-", "2", ":", "]", "<", "size", ":", "\n", "            ", "return", "F", ".", "interpolate", "(", "x", ",", "size", "=", "size", ",", "mode", "=", "'nearest'", ")", "\n", "", "else", ":", "\n", "            ", "assert", "x", ".", "shape", "[", "-", "2", "]", "%", "size", "[", "-", "2", "]", "==", "0", "and", "x", ".", "shape", "[", "-", "1", "]", "%", "size", "[", "-", "1", "]", "==", "0", "\n", "kernel_size", "=", "x", ".", "shape", "[", "-", "1", "]", "//", "size", "[", "-", "1", "]", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "kernel_size", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.nas_fpn.MergingCell.forward": [[37, 48], ["nas_fpn.MergingCell._resize", "nas_fpn.MergingCell._resize", "nas_fpn.MergingCell._binary_op", "len", "nas_fpn.MergingCell.conv_out"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.nas_fpn.MergingCell._resize", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.nas_fpn.MergingCell._resize", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.nas_fpn.GPCell._binary_op"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "out_size", ")", ":", "\n", "        ", "assert", "x1", ".", "shape", "[", ":", "2", "]", "==", "x2", ".", "shape", "[", ":", "2", "]", "\n", "assert", "len", "(", "out_size", ")", "==", "2", "\n", "\n", "x1", "=", "self", ".", "_resize", "(", "x1", ",", "out_size", ")", "\n", "x2", "=", "self", ".", "_resize", "(", "x2", ",", "out_size", ")", "\n", "\n", "x", "=", "self", ".", "_binary_op", "(", "x1", ",", "x2", ")", "\n", "if", "self", ".", "with_conv", ":", "\n", "            ", "x", "=", "self", ".", "conv_out", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.nas_fpn.SumCell._binary_op": [[52, 54], ["None"], "methods", ["None"], ["    ", "def", "_binary_op", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "return", "x1", "+", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.nas_fpn.GPCell.__init__": [[58, 61], ["nas_fpn.MergingCell.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "global_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.nas_fpn.GPCell._binary_op": [[62, 65], ["nas_fpn.GPCell.global_pool().sigmoid", "nas_fpn.GPCell.global_pool"], "methods", ["None"], ["", "def", "_binary_op", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x2_att", "=", "self", ".", "global_pool", "(", "x2", ")", ".", "sigmoid", "(", ")", "\n", "return", "x2", "+", "x2_att", "*", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.nas_fpn.NASFPN.__init__": [[75, 146], ["torch.Module.__init__", "isinstance", "len", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "range", "mmdet.ops.ConvModule", "nas_fpn.NASFPN.lateral_convs.append", "mmdet.ops.ConvModule", "nas_fpn.NASFPN.extra_downsamples.append", "torch.ModuleDict", "torch.ModuleDict", "nas_fpn.GPCell", "nas_fpn.SumCell", "nas_fpn.SumCell", "nas_fpn.SumCell", "nas_fpn.GPCell", "nas_fpn.SumCell", "nas_fpn.GPCell", "nas_fpn.SumCell", "nas_fpn.GPCell", "nas_fpn.NASFPN.fpn_stages.append", "len", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "num_outs", ",", "\n", "stack_times", ",", "\n", "start_level", "=", "0", ",", "\n", "end_level", "=", "-", "1", ",", "\n", "add_extra_convs", "=", "False", ",", "\n", "norm_cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "NASFPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "in_channels", ",", "list", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_ins", "=", "len", "(", "in_channels", ")", "# num of input feature levels", "\n", "self", ".", "num_outs", "=", "num_outs", "# num of output feature levels", "\n", "self", ".", "stack_times", "=", "stack_times", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "\n", "if", "end_level", "==", "-", "1", ":", "\n", "            ", "self", ".", "backbone_end_level", "=", "self", ".", "num_ins", "\n", "assert", "num_outs", ">=", "self", ".", "num_ins", "-", "start_level", "\n", "", "else", ":", "\n", "# if end_level < inputs, no extra level is allowed", "\n", "            ", "self", ".", "backbone_end_level", "=", "end_level", "\n", "assert", "end_level", "<=", "len", "(", "in_channels", ")", "\n", "assert", "num_outs", "==", "end_level", "-", "start_level", "\n", "", "self", ".", "start_level", "=", "start_level", "\n", "self", ".", "end_level", "=", "end_level", "\n", "self", ".", "add_extra_convs", "=", "add_extra_convs", "\n", "\n", "# add lateral connections", "\n", "self", ".", "lateral_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "start_level", ",", "self", ".", "backbone_end_level", ")", ":", "\n", "            ", "l_conv", "=", "ConvModule", "(", "\n", "in_channels", "[", "i", "]", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "self", ".", "lateral_convs", ".", "append", "(", "l_conv", ")", "\n", "\n", "# add extra downsample layers (stride-2 pooling or conv)", "\n", "", "extra_levels", "=", "num_outs", "-", "self", ".", "backbone_end_level", "+", "self", ".", "start_level", "\n", "self", ".", "extra_downsamples", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "extra_levels", ")", ":", "\n", "            ", "extra_conv", "=", "ConvModule", "(", "\n", "out_channels", ",", "out_channels", ",", "1", ",", "norm_cfg", "=", "norm_cfg", ",", "act_cfg", "=", "None", ")", "\n", "self", ".", "extra_downsamples", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "extra_conv", ",", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ")", ")", "\n", "\n", "# add NAS FPN connections", "\n", "", "self", ".", "fpn_stages", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "stack_times", ")", ":", "\n", "            ", "stage", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "# gp(p6, p4) -> p4_1", "\n", "stage", "[", "'gp_64_4'", "]", "=", "GPCell", "(", "out_channels", ",", "norm_cfg", "=", "norm_cfg", ")", "\n", "# sum(p4_1, p4) -> p4_2", "\n", "stage", "[", "'sum_44_4'", "]", "=", "SumCell", "(", "out_channels", ",", "norm_cfg", "=", "norm_cfg", ")", "\n", "# sum(p4_2, p3) -> p3_out", "\n", "stage", "[", "'sum_43_3'", "]", "=", "SumCell", "(", "out_channels", ",", "norm_cfg", "=", "norm_cfg", ")", "\n", "# sum(p3_out, p4_2) -> p4_out", "\n", "stage", "[", "'sum_34_4'", "]", "=", "SumCell", "(", "out_channels", ",", "norm_cfg", "=", "norm_cfg", ")", "\n", "# sum(p5, gp(p4_out, p3_out)) -> p5_out", "\n", "stage", "[", "'gp_43_5'", "]", "=", "GPCell", "(", "with_conv", "=", "False", ")", "\n", "stage", "[", "'sum_55_5'", "]", "=", "SumCell", "(", "out_channels", ",", "norm_cfg", "=", "norm_cfg", ")", "\n", "# sum(p7, gp(p5_out, p4_2)) -> p7_out", "\n", "stage", "[", "'gp_54_7'", "]", "=", "GPCell", "(", "with_conv", "=", "False", ")", "\n", "stage", "[", "'sum_77_7'", "]", "=", "SumCell", "(", "out_channels", ",", "norm_cfg", "=", "norm_cfg", ")", "\n", "# gp(p7_out, p5_out) -> p6_out", "\n", "stage", "[", "'gp_75_6'", "]", "=", "GPCell", "(", "out_channels", ",", "norm_cfg", "=", "norm_cfg", ")", "\n", "self", ".", "fpn_stages", ".", "append", "(", "stage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.nas_fpn.NASFPN.init_weights": [[147, 151], ["nas_fpn.NASFPN.modules", "isinstance", "mmcv.cnn.caffe2_xavier_init"], "methods", ["None"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "caffe2_xavier_init", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.nas_fpn.NASFPN.forward": [[152, 183], ["lateral_conv", "feats.append", "enumerate", "downsample"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# build P3-P5", "\n", "        ", "feats", "=", "[", "\n", "lateral_conv", "(", "inputs", "[", "i", "+", "self", ".", "start_level", "]", ")", "\n", "for", "i", ",", "lateral_conv", "in", "enumerate", "(", "self", ".", "lateral_convs", ")", "\n", "]", "\n", "# build P6-P7 on top of P5", "\n", "for", "downsample", "in", "self", ".", "extra_downsamples", ":", "\n", "            ", "feats", ".", "append", "(", "downsample", "(", "feats", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "p3", ",", "p4", ",", "p5", ",", "p6", ",", "p7", "=", "feats", "\n", "\n", "for", "stage", "in", "self", ".", "fpn_stages", ":", "\n", "# gp(p6, p4) -> p4_1", "\n", "            ", "p4_1", "=", "stage", "[", "'gp_64_4'", "]", "(", "p6", ",", "p4", ",", "out_size", "=", "p4", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "# sum(p4_1, p4) -> p4_2", "\n", "p4_2", "=", "stage", "[", "'sum_44_4'", "]", "(", "p4_1", ",", "p4", ",", "out_size", "=", "p4", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "# sum(p4_2, p3) -> p3_out", "\n", "p3", "=", "stage", "[", "'sum_43_3'", "]", "(", "p4_2", ",", "p3", ",", "out_size", "=", "p3", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "# sum(p3_out, p4_2) -> p4_out", "\n", "p4", "=", "stage", "[", "'sum_34_4'", "]", "(", "p3", ",", "p4_2", ",", "out_size", "=", "p4", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "# sum(p5, gp(p4_out, p3_out)) -> p5_out", "\n", "p5_tmp", "=", "stage", "[", "'gp_43_5'", "]", "(", "p4", ",", "p3", ",", "out_size", "=", "p5", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "p5", "=", "stage", "[", "'sum_55_5'", "]", "(", "p5", ",", "p5_tmp", ",", "out_size", "=", "p5", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "# sum(p7, gp(p5_out, p4_2)) -> p7_out", "\n", "p7_tmp", "=", "stage", "[", "'gp_54_7'", "]", "(", "p5", ",", "p4_2", ",", "out_size", "=", "p7", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "p7", "=", "stage", "[", "'sum_77_7'", "]", "(", "p7", ",", "p7_tmp", ",", "out_size", "=", "p7", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "# gp(p7_out, p5_out) -> p6_out", "\n", "p6", "=", "stage", "[", "'gp_75_6'", "]", "(", "p7", ",", "p5", ",", "out_size", "=", "p6", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "\n", "", "return", "p3", ",", "p4", ",", "p5", ",", "p6", ",", "p7", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.bfp.BFP.__init__": [[30, 64], ["torch.Module.__init__", "mmdet.ops.ConvModule", "mmdet.ops.NonLocal2D"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "num_levels", ",", "\n", "refine_level", "=", "2", ",", "\n", "refine_type", "=", "None", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "BFP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "refine_type", "in", "[", "None", ",", "'conv'", ",", "'non_local'", "]", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_levels", "=", "num_levels", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "\n", "self", ".", "refine_level", "=", "refine_level", "\n", "self", ".", "refine_type", "=", "refine_type", "\n", "assert", "0", "<=", "self", ".", "refine_level", "<", "self", ".", "num_levels", "\n", "\n", "if", "self", ".", "refine_type", "==", "'conv'", ":", "\n", "            ", "self", ".", "refine", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "in_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "", "elif", "self", ".", "refine_type", "==", "'non_local'", ":", "\n", "            ", "self", ".", "refine", "=", "NonLocal2D", "(", "\n", "self", ".", "in_channels", ",", "\n", "reduction", "=", "1", ",", "\n", "use_scale", "=", "False", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.bfp.BFP.init_weights": [[65, 69], ["bfp.BFP.modules", "isinstance", "mmcv.cnn.xavier_init"], "methods", ["None"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "xavier_init", "(", "m", ",", "distribution", "=", "'uniform'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.necks.bfp.BFP.forward": [[70, 102], ["range", "range", "tuple", "len", "inputs[].size", "feats.append", "sum", "len", "bfp.BFP.refine", "outs.append", "torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d", "torch.interpolate", "torch.interpolate", "inputs[].size", "torch.interpolate", "torch.interpolate", "torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "assert", "len", "(", "inputs", ")", "==", "self", ".", "num_levels", "\n", "\n", "# step 1: gather multi-level features by resize and average", "\n", "feats", "=", "[", "]", "\n", "gather_size", "=", "inputs", "[", "self", ".", "refine_level", "]", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "if", "i", "<", "self", ".", "refine_level", ":", "\n", "                ", "gathered", "=", "F", ".", "adaptive_max_pool2d", "(", "\n", "inputs", "[", "i", "]", ",", "output_size", "=", "gather_size", ")", "\n", "", "else", ":", "\n", "                ", "gathered", "=", "F", ".", "interpolate", "(", "\n", "inputs", "[", "i", "]", ",", "size", "=", "gather_size", ",", "mode", "=", "'nearest'", ")", "\n", "", "feats", ".", "append", "(", "gathered", ")", "\n", "\n", "", "bsf", "=", "sum", "(", "feats", ")", "/", "len", "(", "feats", ")", "\n", "\n", "# step 2: refine gathered features", "\n", "if", "self", ".", "refine_type", "is", "not", "None", ":", "\n", "            ", "bsf", "=", "self", ".", "refine", "(", "bsf", ")", "\n", "\n", "# step 3: scatter refined features to multi-levels by a residual path", "\n", "", "outs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "out_size", "=", "inputs", "[", "i", "]", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "if", "i", "<", "self", ".", "refine_level", ":", "\n", "                ", "residual", "=", "F", ".", "interpolate", "(", "bsf", ",", "size", "=", "out_size", ",", "mode", "=", "'nearest'", ")", "\n", "", "else", ":", "\n", "                ", "residual", "=", "F", ".", "adaptive_max_pool2d", "(", "bsf", ",", "output_size", "=", "out_size", ")", "\n", "", "outs", ".", "append", "(", "residual", "+", "inputs", "[", "i", "]", ")", "\n", "\n", "", "return", "tuple", "(", "outs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.maskiou_head.MaskIoUHead.__init__": [[19, 64], ["dict", "torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "builder.build_loss", "maskiou_head.MaskIoUHead.convs.append", "maskiou_head.MaskIoUHead.fcs.append", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss"], ["def", "__init__", "(", "self", ",", "\n", "num_convs", "=", "4", ",", "\n", "num_fcs", "=", "2", ",", "\n", "roi_feat_size", "=", "14", ",", "\n", "in_channels", "=", "256", ",", "\n", "conv_out_channels", "=", "256", ",", "\n", "fc_out_channels", "=", "1024", ",", "\n", "num_classes", "=", "81", ",", "\n", "loss_iou", "=", "dict", "(", "type", "=", "'MSELoss'", ",", "loss_weight", "=", "0.5", ")", ")", ":", "\n", "        ", "super", "(", "MaskIoUHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "conv_out_channels", "=", "conv_out_channels", "\n", "self", ".", "fc_out_channels", "=", "fc_out_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_convs", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "# concatenation of mask feature and mask prediction", "\n", "                ", "in_channels", "=", "self", ".", "in_channels", "+", "1", "\n", "", "else", ":", "\n", "                ", "in_channels", "=", "self", ".", "conv_out_channels", "\n", "", "stride", "=", "2", "if", "i", "==", "num_convs", "-", "1", "else", "1", "\n", "self", ".", "convs", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "self", ".", "conv_out_channels", ",", "\n", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ")", ")", "\n", "\n", "", "roi_feat_size", "=", "_pair", "(", "roi_feat_size", ")", "\n", "pooled_area", "=", "(", "roi_feat_size", "[", "0", "]", "//", "2", ")", "*", "(", "roi_feat_size", "[", "1", "]", "//", "2", ")", "\n", "self", ".", "fcs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_fcs", ")", ":", "\n", "            ", "in_channels", "=", "(", "\n", "self", ".", "conv_out_channels", "*", "\n", "pooled_area", "if", "i", "==", "0", "else", "self", ".", "fc_out_channels", ")", "\n", "self", ".", "fcs", ".", "append", "(", "nn", ".", "Linear", "(", "in_channels", ",", "self", ".", "fc_out_channels", ")", ")", "\n", "\n", "", "self", ".", "fc_mask_iou", "=", "nn", ".", "Linear", "(", "self", ".", "fc_out_channels", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "loss_iou", "=", "build_loss", "(", "loss_iou", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.maskiou_head.MaskIoUHead.init_weights": [[65, 76], ["mmcv.cnn.normal_init", "mmcv.cnn.kaiming_init", "mmcv.cnn.kaiming_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "kaiming_init", "(", "conv", ")", "\n", "", "for", "fc", "in", "self", ".", "fcs", ":", "\n", "            ", "kaiming_init", "(", "\n", "fc", ",", "\n", "a", "=", "1", ",", "\n", "mode", "=", "'fan_in'", ",", "\n", "nonlinearity", "=", "'leaky_relu'", ",", "\n", "distribution", "=", "'uniform'", ")", "\n", "", "normal_init", "(", "self", ".", "fc_mask_iou", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.maskiou_head.MaskIoUHead.forward": [[77, 90], ["mask_pred.sigmoid.sigmoid.sigmoid", "maskiou_head.MaskIoUHead.max_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "maskiou_head.MaskIoUHead.view", "maskiou_head.MaskIoUHead.fc_mask_iou", "mask_pred.sigmoid.sigmoid.unsqueeze", "maskiou_head.MaskIoUHead.relu", "maskiou_head.MaskIoUHead.size", "maskiou_head.MaskIoUHead.relu", "conv", "fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mask_feat", ",", "mask_pred", ")", ":", "\n", "        ", "mask_pred", "=", "mask_pred", ".", "sigmoid", "(", ")", "\n", "mask_pred_pooled", "=", "self", ".", "max_pool", "(", "mask_pred", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "mask_feat", ",", "mask_pred_pooled", ")", ",", "1", ")", "\n", "\n", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "conv", "(", "x", ")", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "for", "fc", "in", "self", ".", "fcs", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "fc", "(", "x", ")", ")", "\n", "", "mask_iou", "=", "self", ".", "fc_mask_iou", "(", "x", ")", "\n", "return", "mask_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.maskiou_head.MaskIoUHead.loss": [[91, 100], ["mmdet.core.force_fp32", "dict", "pos_inds.sum", "maskiou_head.MaskIoUHead.loss_iou"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.force_fp32"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'mask_iou_pred'", ",", ")", ")", "\n", "def", "loss", "(", "self", ",", "mask_iou_pred", ",", "mask_iou_targets", ")", ":", "\n", "        ", "pos_inds", "=", "mask_iou_targets", ">", "0", "\n", "if", "pos_inds", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "loss_mask_iou", "=", "self", ".", "loss_iou", "(", "mask_iou_pred", "[", "pos_inds", "]", ",", "\n", "mask_iou_targets", "[", "pos_inds", "]", ")", "\n", "", "else", ":", "\n", "            ", "loss_mask_iou", "=", "mask_iou_pred", "*", "0", "\n", "", "return", "dict", "(", "loss_mask_iou", "=", "loss_mask_iou", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.maskiou_head.MaskIoUHead.get_target": [[101, 150], ["mmdet.core.force_fp32", "map", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mask_pred.sum", "list", "mask_targets.size", "torch.cat.size", "torch.cat.size", "mask_targets.sum"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.force_fp32"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'mask_pred'", ",", ")", ")", "\n", "def", "get_target", "(", "self", ",", "sampling_results", ",", "gt_masks", ",", "mask_pred", ",", "mask_targets", ",", "\n", "rcnn_train_cfg", ")", ":", "\n", "        ", "\"\"\"Compute target of mask IoU.\n\n        Mask IoU target is the IoU of the predicted mask (inside a bbox) and\n        the gt mask of corresponding gt mask (the whole instance).\n        The intersection area is computed inside the bbox, and the gt mask area\n        is computed with two steps, firstly we compute the gt area inside the\n        bbox, then divide it by the area ratio of gt area inside the bbox and\n        the gt area of the whole instance.\n\n        Args:\n            sampling_results (list[:obj:`SamplingResult`]): sampling results.\n            gt_masks (list[ndarray]): Gt masks (the whole instance) of each\n                image, binary maps with the same shape of the input image.\n            mask_pred (Tensor): Predicted masks of each positive proposal,\n                shape (num_pos, h, w).\n            mask_targets (Tensor): Gt mask of each positive proposal,\n                binary map of the shape (num_pos, h, w).\n            rcnn_train_cfg (dict): Training config for R-CNN part.\n\n        Returns:\n            Tensor: mask iou target (length == num positive).\n        \"\"\"", "\n", "pos_proposals", "=", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", "\n", "pos_assigned_gt_inds", "=", "[", "\n", "res", ".", "pos_assigned_gt_inds", "for", "res", "in", "sampling_results", "\n", "]", "\n", "\n", "# compute the area ratio of gt areas inside the proposals and", "\n", "# the whole instance", "\n", "area_ratios", "=", "map", "(", "self", ".", "_get_area_ratio", ",", "pos_proposals", ",", "\n", "pos_assigned_gt_inds", ",", "gt_masks", ")", "\n", "area_ratios", "=", "torch", ".", "cat", "(", "list", "(", "area_ratios", ")", ")", "\n", "assert", "mask_targets", ".", "size", "(", "0", ")", "==", "area_ratios", ".", "size", "(", "0", ")", "\n", "\n", "mask_pred", "=", "(", "mask_pred", ">", "rcnn_train_cfg", ".", "mask_thr_binary", ")", ".", "float", "(", ")", "\n", "mask_pred_areas", "=", "mask_pred", ".", "sum", "(", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "\n", "# mask_pred and mask_targets are binary maps", "\n", "overlap_areas", "=", "(", "mask_pred", "*", "mask_targets", ")", ".", "sum", "(", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "\n", "# compute the mask area of the whole instance", "\n", "gt_full_areas", "=", "mask_targets", ".", "sum", "(", "(", "-", "1", ",", "-", "2", ")", ")", "/", "(", "area_ratios", "+", "1e-7", ")", "\n", "\n", "mask_iou_targets", "=", "overlap_areas", "/", "(", "\n", "mask_pred_areas", "+", "gt_full_areas", "-", "overlap_areas", ")", "\n", "return", "mask_iou_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.maskiou_head.MaskIoUHead._get_area_ratio": [[151, 176], ["pos_proposals.size", "pos_proposals.cpu().numpy", "pos_assigned_gt_inds.cpu().numpy.cpu().numpy.cpu().numpy", "gt_masks.sum", "range", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "pos_proposals.new_zeros", "proposals_np[].astype", "pos_proposals.new_zeros.append", "pos_proposals.cpu", "pos_assigned_gt_inds.cpu().numpy.cpu().numpy.cpu", "gt_mask_in_proposal.sum", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to"], ["", "def", "_get_area_ratio", "(", "self", ",", "pos_proposals", ",", "pos_assigned_gt_inds", ",", "gt_masks", ")", ":", "\n", "        ", "\"\"\"Compute area ratio of the gt mask inside the proposal and the gt\n        mask of the corresponding instance\"\"\"", "\n", "num_pos", "=", "pos_proposals", ".", "size", "(", "0", ")", "\n", "if", "num_pos", ">", "0", ":", "\n", "            ", "area_ratios", "=", "[", "]", "\n", "proposals_np", "=", "pos_proposals", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pos_assigned_gt_inds", "=", "pos_assigned_gt_inds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# compute mask areas of gt instances (batch processing for speedup)", "\n", "gt_instance_mask_area", "=", "gt_masks", ".", "sum", "(", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "num_pos", ")", ":", "\n", "                ", "gt_mask", "=", "gt_masks", "[", "pos_assigned_gt_inds", "[", "i", "]", "]", "\n", "\n", "# crop the gt mask inside the proposal", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "proposals_np", "[", "i", ",", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "gt_mask_in_proposal", "=", "gt_mask", "[", "y1", ":", "y2", "+", "1", ",", "x1", ":", "x2", "+", "1", "]", "\n", "\n", "ratio", "=", "gt_mask_in_proposal", ".", "sum", "(", ")", "/", "(", "\n", "gt_instance_mask_area", "[", "pos_assigned_gt_inds", "[", "i", "]", "]", "+", "1e-7", ")", "\n", "area_ratios", ".", "append", "(", "ratio", ")", "\n", "", "area_ratios", "=", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "area_ratios", ")", ")", ".", "float", "(", ")", ".", "to", "(", "\n", "pos_proposals", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "area_ratios", "=", "pos_proposals", ".", "new_zeros", "(", "(", "0", ",", ")", ")", "\n", "", "return", "area_ratios", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.maskiou_head.MaskIoUHead.get_mask_scores": [[177, 190], ["mmdet.core.force_fp32", "range", "mask_scores.cpu().numpy.cpu().numpy.cpu().numpy", "det_labels.cpu().numpy.cpu().numpy.cpu().numpy", "det_labels.cpu().numpy.cpu().numpy.size", "mask_scores.cpu().numpy.cpu().numpy.cpu", "det_labels.cpu().numpy.cpu().numpy.cpu", "range"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.force_fp32"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'mask_iou_pred'", ",", ")", ")", "\n", "def", "get_mask_scores", "(", "self", ",", "mask_iou_pred", ",", "det_bboxes", ",", "det_labels", ")", ":", "\n", "        ", "\"\"\"Get the mask scores.\n\n        mask_score = bbox_score * mask_iou\n        \"\"\"", "\n", "inds", "=", "range", "(", "det_labels", ".", "size", "(", "0", ")", ")", "\n", "mask_scores", "=", "mask_iou_pred", "[", "inds", ",", "det_labels", "+", "1", "]", "*", "det_bboxes", "[", "inds", ",", "\n", "-", "1", "]", "\n", "mask_scores", "=", "mask_scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "det_labels", "=", "det_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "[", "\n", "mask_scores", "[", "det_labels", "==", "i", "]", "for", "i", "in", "range", "(", "self", ".", "num_classes", "-", "1", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.grid_head.GridHead.__init__": [[15, 142], ["dict", "dict", "torch.Module.__init__", "int", "grid_head.GridHead.calc_sub_regions", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "range", "sum", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "builder.build_loss", "isinstance", "numpy.sqrt", "ValueError", "isinstance", "ValueError", "grid_head.GridHead.convs.append", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "grid_head.GridHead.forder_trans.append", "grid_head.GridHead.sorder_trans.append", "mmdet.ops.ConvModule", "grid_head.GridHead.neighbor_points.append", "len", "len", "torch.ModuleList.append", "torch.ModuleList.append", "neighbors.append", "neighbors.append", "neighbors.append", "neighbors.append", "tuple", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.grid_head.GridHead.calc_sub_regions", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss"], ["    ", "def", "__init__", "(", "self", ",", "\n", "grid_points", "=", "9", ",", "\n", "num_convs", "=", "8", ",", "\n", "roi_feat_size", "=", "14", ",", "\n", "in_channels", "=", "256", ",", "\n", "conv_kernel_size", "=", "3", ",", "\n", "point_feat_channels", "=", "64", ",", "\n", "deconv_kernel_size", "=", "4", ",", "\n", "class_agnostic", "=", "False", ",", "\n", "loss_grid", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "use_sigmoid", "=", "True", ",", "\n", "loss_weight", "=", "15", ")", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'GN'", ",", "num_groups", "=", "36", ")", ")", ":", "\n", "        ", "super", "(", "GridHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "grid_points", "=", "grid_points", "\n", "self", ".", "num_convs", "=", "num_convs", "\n", "self", ".", "roi_feat_size", "=", "roi_feat_size", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "conv_kernel_size", "=", "conv_kernel_size", "\n", "self", ".", "point_feat_channels", "=", "point_feat_channels", "\n", "self", ".", "conv_out_channels", "=", "self", ".", "point_feat_channels", "*", "self", ".", "grid_points", "\n", "self", ".", "class_agnostic", "=", "class_agnostic", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "if", "isinstance", "(", "norm_cfg", ",", "dict", ")", "and", "norm_cfg", "[", "'type'", "]", "==", "'GN'", ":", "\n", "            ", "assert", "self", ".", "conv_out_channels", "%", "norm_cfg", "[", "'num_groups'", "]", "==", "0", "\n", "\n", "", "assert", "self", ".", "grid_points", ">=", "4", "\n", "self", ".", "grid_size", "=", "int", "(", "np", ".", "sqrt", "(", "self", ".", "grid_points", ")", ")", "\n", "if", "self", ".", "grid_size", "*", "self", ".", "grid_size", "!=", "self", ".", "grid_points", ":", "\n", "            ", "raise", "ValueError", "(", "'grid_points must be a square number'", ")", "\n", "\n", "# the predicted heatmap is half of whole_map_size", "\n", "", "if", "not", "isinstance", "(", "self", ".", "roi_feat_size", ",", "int", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Only square RoIs are supporeted in Grid R-CNN'", ")", "\n", "", "self", ".", "whole_map_size", "=", "self", ".", "roi_feat_size", "*", "4", "\n", "\n", "# compute point-wise sub-regions", "\n", "self", ".", "sub_regions", "=", "self", ".", "calc_sub_regions", "(", ")", "\n", "\n", "self", ".", "convs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_convs", ")", ":", "\n", "            ", "in_channels", "=", "(", "\n", "self", ".", "in_channels", "if", "i", "==", "0", "else", "self", ".", "conv_out_channels", ")", "\n", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "padding", "=", "(", "self", ".", "conv_kernel_size", "-", "1", ")", "//", "2", "\n", "self", ".", "convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "in_channels", ",", "\n", "self", ".", "conv_out_channels", ",", "\n", "self", ".", "conv_kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "bias", "=", "True", ")", ")", "\n", "", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "convs", ")", "\n", "\n", "self", ".", "deconv1", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "self", ".", "conv_out_channels", ",", "\n", "self", ".", "conv_out_channels", ",", "\n", "kernel_size", "=", "deconv_kernel_size", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "(", "deconv_kernel_size", "-", "2", ")", "//", "2", ",", "\n", "groups", "=", "grid_points", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "GroupNorm", "(", "grid_points", ",", "self", ".", "conv_out_channels", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "self", ".", "conv_out_channels", ",", "\n", "grid_points", ",", "\n", "kernel_size", "=", "deconv_kernel_size", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "(", "deconv_kernel_size", "-", "2", ")", "//", "2", ",", "\n", "groups", "=", "grid_points", ")", "\n", "\n", "# find the 4-neighbor of each grid point", "\n", "self", ".", "neighbor_points", "=", "[", "]", "\n", "grid_size", "=", "self", ".", "grid_size", "\n", "for", "i", "in", "range", "(", "grid_size", ")", ":", "# i-th column", "\n", "            ", "for", "j", "in", "range", "(", "grid_size", ")", ":", "# j-th row", "\n", "                ", "neighbors", "=", "[", "]", "\n", "if", "i", ">", "0", ":", "# left: (i - 1, j)", "\n", "                    ", "neighbors", ".", "append", "(", "(", "i", "-", "1", ")", "*", "grid_size", "+", "j", ")", "\n", "", "if", "j", ">", "0", ":", "# up: (i, j - 1)", "\n", "                    ", "neighbors", ".", "append", "(", "i", "*", "grid_size", "+", "j", "-", "1", ")", "\n", "", "if", "j", "<", "grid_size", "-", "1", ":", "# down: (i, j + 1)", "\n", "                    ", "neighbors", ".", "append", "(", "i", "*", "grid_size", "+", "j", "+", "1", ")", "\n", "", "if", "i", "<", "grid_size", "-", "1", ":", "# right: (i + 1, j)", "\n", "                    ", "neighbors", ".", "append", "(", "(", "i", "+", "1", ")", "*", "grid_size", "+", "j", ")", "\n", "", "self", ".", "neighbor_points", ".", "append", "(", "tuple", "(", "neighbors", ")", ")", "\n", "# total edges in the grid", "\n", "", "", "self", ".", "num_edges", "=", "sum", "(", "[", "len", "(", "p", ")", "for", "p", "in", "self", ".", "neighbor_points", "]", ")", "\n", "\n", "self", ".", "forder_trans", "=", "nn", ".", "ModuleList", "(", ")", "# first-order feature transition", "\n", "self", ".", "sorder_trans", "=", "nn", ".", "ModuleList", "(", ")", "# second-order feature transition", "\n", "for", "neighbors", "in", "self", ".", "neighbor_points", ":", "\n", "            ", "fo_trans", "=", "nn", ".", "ModuleList", "(", ")", "\n", "so_trans", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "len", "(", "neighbors", ")", ")", ":", "\n", "# each transition module consists of a 5x5 depth-wise conv and", "\n", "# 1x1 conv.", "\n", "                ", "fo_trans", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "point_feat_channels", ",", "\n", "self", ".", "point_feat_channels", ",", "\n", "5", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "2", ",", "\n", "groups", "=", "self", ".", "point_feat_channels", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "point_feat_channels", ",", "\n", "self", ".", "point_feat_channels", ",", "1", ")", ")", ")", "\n", "so_trans", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "point_feat_channels", ",", "\n", "self", ".", "point_feat_channels", ",", "\n", "5", ",", "\n", "1", ",", "\n", "2", ",", "\n", "groups", "=", "self", ".", "point_feat_channels", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "point_feat_channels", ",", "\n", "self", ".", "point_feat_channels", ",", "1", ")", ")", ")", "\n", "", "self", ".", "forder_trans", ".", "append", "(", "fo_trans", ")", "\n", "self", ".", "sorder_trans", ".", "append", "(", "so_trans", ")", "\n", "\n", "", "self", ".", "loss_grid", "=", "build_loss", "(", "loss_grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.grid_head.GridHead.init_weights": [[143, 152], ["grid_head.GridHead.modules", "grid_head.GridHead.modules", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "isinstance", "isinstance", "mmcv.cnn.kaiming_init", "mmcv.cnn.normal_init", "numpy.log"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "# TODO: compare mode = \"fan_in\" or \"fan_out\"", "\n", "                ", "kaiming_init", "(", "m", ")", "\n", "", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "normal_init", "(", "m", ",", "std", "=", "0.001", ")", "\n", "", "", "nn", ".", "init", ".", "constant_", "(", "self", ".", "deconv2", ".", "bias", ",", "-", "np", ".", "log", "(", "0.99", "/", "0.01", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.grid_head.GridHead.forward": [[153, 190], ["grid_head.GridHead.convs", "enumerate", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grid_head.GridHead.deconv1", "torch.relu", "torch.relu", "torch.relu", "grid_head.GridHead.deconv2", "dict", "enumerate", "enumerate", "grid_head.GridHead.norm1", "grid_head.GridHead.deconv1", "torch.relu", "torch.relu", "torch.relu", "grid_head.GridHead.deconv2", "range", "range", "grid_head.GridHead.norm1"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.norm1"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "shape", "[", "-", "1", "]", "==", "x", ".", "shape", "[", "-", "2", "]", "==", "self", ".", "roi_feat_size", "\n", "# RoI feature transformation, downsample 2x", "\n", "x", "=", "self", ".", "convs", "(", "x", ")", "\n", "\n", "c", "=", "self", ".", "point_feat_channels", "\n", "# first-order fusion", "\n", "x_fo", "=", "[", "None", "for", "_", "in", "range", "(", "self", ".", "grid_points", ")", "]", "\n", "for", "i", ",", "points", "in", "enumerate", "(", "self", ".", "neighbor_points", ")", ":", "\n", "            ", "x_fo", "[", "i", "]", "=", "x", "[", ":", ",", "i", "*", "c", ":", "(", "i", "+", "1", ")", "*", "c", "]", "\n", "for", "j", ",", "point_idx", "in", "enumerate", "(", "points", ")", ":", "\n", "                ", "x_fo", "[", "i", "]", "=", "x_fo", "[", "i", "]", "+", "self", ".", "forder_trans", "[", "i", "]", "[", "j", "]", "(", "\n", "x", "[", ":", ",", "point_idx", "*", "c", ":", "(", "point_idx", "+", "1", ")", "*", "c", "]", ")", "\n", "\n", "# second-order fusion", "\n", "", "", "x_so", "=", "[", "None", "for", "_", "in", "range", "(", "self", ".", "grid_points", ")", "]", "\n", "for", "i", ",", "points", "in", "enumerate", "(", "self", ".", "neighbor_points", ")", ":", "\n", "            ", "x_so", "[", "i", "]", "=", "x", "[", ":", ",", "i", "*", "c", ":", "(", "i", "+", "1", ")", "*", "c", "]", "\n", "for", "j", ",", "point_idx", "in", "enumerate", "(", "points", ")", ":", "\n", "                ", "x_so", "[", "i", "]", "=", "x_so", "[", "i", "]", "+", "self", ".", "sorder_trans", "[", "i", "]", "[", "j", "]", "(", "x_fo", "[", "point_idx", "]", ")", "\n", "\n", "# predicted heatmap with fused features", "\n", "", "", "x2", "=", "torch", ".", "cat", "(", "x_so", ",", "dim", "=", "1", ")", "\n", "x2", "=", "self", ".", "deconv1", "(", "x2", ")", "\n", "x2", "=", "F", ".", "relu", "(", "self", ".", "norm1", "(", "x2", ")", ",", "inplace", "=", "True", ")", "\n", "heatmap", "=", "self", ".", "deconv2", "(", "x2", ")", "\n", "\n", "# predicted heatmap with original features (applicable during training)", "\n", "if", "self", ".", "training", ":", "\n", "            ", "x1", "=", "x", "\n", "x1", "=", "self", ".", "deconv1", "(", "x1", ")", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "norm1", "(", "x1", ")", ",", "inplace", "=", "True", ")", "\n", "heatmap_unfused", "=", "self", ".", "deconv2", "(", "x1", ")", "\n", "", "else", ":", "\n", "            ", "heatmap_unfused", "=", "heatmap", "\n", "\n", "", "return", "dict", "(", "fused", "=", "heatmap", ",", "unfused", "=", "heatmap_unfused", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.grid_head.GridHead.calc_sub_regions": [[191, 221], ["range", "sub_regions.append", "max", "max", "int", "int"], "methods", ["None"], ["", "def", "calc_sub_regions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Compute point specific representation regions.\n\n        See Grid R-CNN Plus (https://arxiv.org/abs/1906.05688) for details.\n        \"\"\"", "\n", "# to make it consistent with the original implementation, half_size", "\n", "# is computed as 2 * quarter_size, which is smaller", "\n", "half_size", "=", "self", ".", "whole_map_size", "//", "4", "*", "2", "\n", "sub_regions", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "grid_points", ")", ":", "\n", "            ", "x_idx", "=", "i", "//", "self", ".", "grid_size", "\n", "y_idx", "=", "i", "%", "self", ".", "grid_size", "\n", "if", "x_idx", "==", "0", ":", "\n", "                ", "sub_x1", "=", "0", "\n", "", "elif", "x_idx", "==", "self", ".", "grid_size", "-", "1", ":", "\n", "                ", "sub_x1", "=", "half_size", "\n", "", "else", ":", "\n", "                ", "ratio", "=", "x_idx", "/", "(", "self", ".", "grid_size", "-", "1", ")", "-", "0.25", "\n", "sub_x1", "=", "max", "(", "int", "(", "ratio", "*", "self", ".", "whole_map_size", ")", ",", "0", ")", "\n", "\n", "", "if", "y_idx", "==", "0", ":", "\n", "                ", "sub_y1", "=", "0", "\n", "", "elif", "y_idx", "==", "self", ".", "grid_size", "-", "1", ":", "\n", "                ", "sub_y1", "=", "half_size", "\n", "", "else", ":", "\n", "                ", "ratio", "=", "y_idx", "/", "(", "self", ".", "grid_size", "-", "1", ")", "-", "0.25", "\n", "sub_y1", "=", "max", "(", "int", "(", "ratio", "*", "self", ".", "whole_map_size", ")", ",", "0", ")", "\n", "", "sub_regions", ".", "append", "(", "\n", "(", "sub_x1", ",", "sub_y1", ",", "sub_x1", "+", "half_size", ",", "sub_y1", "+", "half_size", ")", ")", "\n", "", "return", "sub_regions", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.grid_head.GridHead.get_target": [[222, 289], ["torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sub_targets.cuda.cuda.cuda", "factors.append", "range", "sub_targets.cuda.cuda.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "int", "range", "range"], "methods", ["None"], ["", "def", "get_target", "(", "self", ",", "sampling_results", ",", "rcnn_train_cfg", ")", ":", "\n", "# mix all samples (across images) together.", "\n", "        ", "pos_bboxes", "=", "torch", ".", "cat", "(", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", ",", "\n", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "pos_gt_bboxes", "=", "torch", ".", "cat", "(", "\n", "[", "res", ".", "pos_gt_bboxes", "for", "res", "in", "sampling_results", "]", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "assert", "pos_bboxes", ".", "shape", "==", "pos_gt_bboxes", ".", "shape", "\n", "\n", "# expand pos_bboxes to 2x of original size", "\n", "x1", "=", "pos_bboxes", "[", ":", ",", "0", "]", "-", "(", "pos_bboxes", "[", ":", ",", "2", "]", "-", "pos_bboxes", "[", ":", ",", "0", "]", ")", "/", "2", "\n", "y1", "=", "pos_bboxes", "[", ":", ",", "1", "]", "-", "(", "pos_bboxes", "[", ":", ",", "3", "]", "-", "pos_bboxes", "[", ":", ",", "1", "]", ")", "/", "2", "\n", "x2", "=", "pos_bboxes", "[", ":", ",", "2", "]", "+", "(", "pos_bboxes", "[", ":", ",", "2", "]", "-", "pos_bboxes", "[", ":", ",", "0", "]", ")", "/", "2", "\n", "y2", "=", "pos_bboxes", "[", ":", ",", "3", "]", "+", "(", "pos_bboxes", "[", ":", ",", "3", "]", "-", "pos_bboxes", "[", ":", ",", "1", "]", ")", "/", "2", "\n", "pos_bboxes", "=", "torch", ".", "stack", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "dim", "=", "-", "1", ")", "\n", "pos_bbox_ws", "=", "(", "pos_bboxes", "[", ":", ",", "2", "]", "-", "pos_bboxes", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "pos_bbox_hs", "=", "(", "pos_bboxes", "[", ":", ",", "3", "]", "-", "pos_bboxes", "[", ":", ",", "1", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "num_rois", "=", "pos_bboxes", ".", "shape", "[", "0", "]", "\n", "map_size", "=", "self", ".", "whole_map_size", "\n", "# this is not the final target shape", "\n", "targets", "=", "torch", ".", "zeros", "(", "(", "num_rois", ",", "self", ".", "grid_points", ",", "map_size", ",", "map_size", ")", ",", "\n", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "# pre-compute interpolation factors for all grid points.", "\n", "# the first item is the factor of x-dim, and the second is y-dim.", "\n", "# for a 9-point grid, factors are like (1, 0), (0.5, 0.5), (0, 1)", "\n", "factors", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "grid_points", ")", ":", "\n", "            ", "x_idx", "=", "j", "//", "self", ".", "grid_size", "\n", "y_idx", "=", "j", "%", "self", ".", "grid_size", "\n", "factors", ".", "append", "(", "(", "1", "-", "x_idx", "/", "(", "self", ".", "grid_size", "-", "1", ")", ",", "\n", "1", "-", "y_idx", "/", "(", "self", ".", "grid_size", "-", "1", ")", ")", ")", "\n", "\n", "", "radius", "=", "rcnn_train_cfg", ".", "pos_radius", "\n", "radius2", "=", "radius", "**", "2", "\n", "for", "i", "in", "range", "(", "num_rois", ")", ":", "\n", "# ignore small bboxes", "\n", "            ", "if", "(", "pos_bbox_ws", "[", "i", "]", "<=", "self", ".", "grid_size", "\n", "or", "pos_bbox_hs", "[", "i", "]", "<=", "self", ".", "grid_size", ")", ":", "\n", "                ", "continue", "\n", "# for each grid point, mark a small circle as positive", "\n", "", "for", "j", "in", "range", "(", "self", ".", "grid_points", ")", ":", "\n", "                ", "factor_x", ",", "factor_y", "=", "factors", "[", "j", "]", "\n", "gridpoint_x", "=", "factor_x", "*", "pos_gt_bboxes", "[", "i", ",", "0", "]", "+", "(", "\n", "1", "-", "factor_x", ")", "*", "pos_gt_bboxes", "[", "i", ",", "2", "]", "\n", "gridpoint_y", "=", "factor_y", "*", "pos_gt_bboxes", "[", "i", ",", "1", "]", "+", "(", "\n", "1", "-", "factor_y", ")", "*", "pos_gt_bboxes", "[", "i", ",", "3", "]", "\n", "\n", "cx", "=", "int", "(", "(", "gridpoint_x", "-", "pos_bboxes", "[", "i", ",", "0", "]", ")", "/", "pos_bbox_ws", "[", "i", "]", "*", "\n", "map_size", ")", "\n", "cy", "=", "int", "(", "(", "gridpoint_y", "-", "pos_bboxes", "[", "i", ",", "1", "]", ")", "/", "pos_bbox_hs", "[", "i", "]", "*", "\n", "map_size", ")", "\n", "\n", "for", "x", "in", "range", "(", "cx", "-", "radius", ",", "cx", "+", "radius", "+", "1", ")", ":", "\n", "                    ", "for", "y", "in", "range", "(", "cy", "-", "radius", ",", "cy", "+", "radius", "+", "1", ")", ":", "\n", "                        ", "if", "x", ">=", "0", "and", "x", "<", "map_size", "and", "y", ">=", "0", "and", "y", "<", "map_size", ":", "\n", "                            ", "if", "(", "x", "-", "cx", ")", "**", "2", "+", "(", "y", "-", "cy", ")", "**", "2", "<=", "radius2", ":", "\n", "                                ", "targets", "[", "i", ",", "j", ",", "y", ",", "x", "]", "=", "1", "\n", "# reduce the target heatmap size by a half", "\n", "# proposed in Grid R-CNN Plus (https://arxiv.org/abs/1906.05688).", "\n", "", "", "", "", "", "", "sub_targets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "grid_points", ")", ":", "\n", "            ", "sub_x1", ",", "sub_y1", ",", "sub_x2", ",", "sub_y2", "=", "self", ".", "sub_regions", "[", "i", "]", "\n", "sub_targets", ".", "append", "(", "targets", "[", ":", ",", "[", "i", "]", ",", "sub_y1", ":", "sub_y2", ",", "sub_x1", ":", "sub_x2", "]", ")", "\n", "", "sub_targets", "=", "torch", ".", "cat", "(", "sub_targets", ",", "dim", "=", "1", ")", "\n", "sub_targets", "=", "sub_targets", ".", "cuda", "(", ")", "\n", "return", "sub_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.grid_head.GridHead.loss": [[290, 295], ["grid_head.GridHead.loss_grid", "grid_head.GridHead.loss_grid", "dict"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "grid_pred", ",", "grid_targets", ")", ":", "\n", "        ", "loss_fused", "=", "self", ".", "loss_grid", "(", "grid_pred", "[", "'fused'", "]", ",", "grid_targets", ")", "\n", "loss_unfused", "=", "self", ".", "loss_grid", "(", "grid_pred", "[", "'unfused'", "]", ",", "grid_targets", ")", "\n", "loss_grid", "=", "loss_fused", "+", "loss_unfused", "\n", "return", "dict", "(", "loss_grid", "=", "loss_grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.grid_head.GridHead.get_bboxes": [[296, 362], ["det_bboxes.cpu.cpu.cpu", "grid_pred.view.view.sigmoid().cpu", "grid_pred.view.view.view", "grid_pred.view.view.max", "range", "tuple", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "bbox_res[].clamp_", "bbox_res[].clamp_", "map", "pred_scores[].sum", "pred_scores[].sum", "pred_scores[].sum", "pred_scores[].sum", "grid_pred.view.view.sigmoid", "range", "range", "range", "range", "x.view", "xs.float", "ys.float"], "methods", ["None"], ["", "def", "get_bboxes", "(", "self", ",", "det_bboxes", ",", "grid_pred", ",", "img_metas", ")", ":", "\n", "# TODO: refactoring", "\n", "        ", "assert", "det_bboxes", ".", "shape", "[", "0", "]", "==", "grid_pred", ".", "shape", "[", "0", "]", "\n", "det_bboxes", "=", "det_bboxes", ".", "cpu", "(", ")", "\n", "cls_scores", "=", "det_bboxes", "[", ":", ",", "[", "4", "]", "]", "\n", "det_bboxes", "=", "det_bboxes", "[", ":", ",", ":", "4", "]", "\n", "grid_pred", "=", "grid_pred", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "R", ",", "c", ",", "h", ",", "w", "=", "grid_pred", ".", "shape", "\n", "half_size", "=", "self", ".", "whole_map_size", "//", "4", "*", "2", "\n", "assert", "h", "==", "w", "==", "half_size", "\n", "assert", "c", "==", "self", ".", "grid_points", "\n", "\n", "# find the point with max scores in the half-sized heatmap", "\n", "grid_pred", "=", "grid_pred", ".", "view", "(", "R", "*", "c", ",", "h", "*", "w", ")", "\n", "pred_scores", ",", "pred_position", "=", "grid_pred", ".", "max", "(", "dim", "=", "1", ")", "\n", "xs", "=", "pred_position", "%", "w", "\n", "ys", "=", "pred_position", "//", "w", "\n", "\n", "# get the position in the whole heatmap instead of half-sized heatmap", "\n", "for", "i", "in", "range", "(", "self", ".", "grid_points", ")", ":", "\n", "            ", "xs", "[", "i", ":", ":", "self", ".", "grid_points", "]", "+=", "self", ".", "sub_regions", "[", "i", "]", "[", "0", "]", "\n", "ys", "[", "i", ":", ":", "self", ".", "grid_points", "]", "+=", "self", ".", "sub_regions", "[", "i", "]", "[", "1", "]", "\n", "\n", "# reshape to (num_rois, grid_points)", "\n", "", "pred_scores", ",", "xs", ",", "ys", "=", "tuple", "(", "\n", "map", "(", "lambda", "x", ":", "x", ".", "view", "(", "R", ",", "c", ")", ",", "[", "pred_scores", ",", "xs", ",", "ys", "]", ")", ")", "\n", "\n", "# get expanded pos_bboxes", "\n", "widths", "=", "(", "det_bboxes", "[", ":", ",", "2", "]", "-", "det_bboxes", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "heights", "=", "(", "det_bboxes", "[", ":", ",", "3", "]", "-", "det_bboxes", "[", ":", ",", "1", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "x1", "=", "(", "det_bboxes", "[", ":", ",", "0", ",", "None", "]", "-", "widths", "/", "2", ")", "\n", "y1", "=", "(", "det_bboxes", "[", ":", ",", "1", ",", "None", "]", "-", "heights", "/", "2", ")", "\n", "# map the grid point to the absolute coordinates", "\n", "abs_xs", "=", "(", "xs", ".", "float", "(", ")", "+", "0.5", ")", "/", "w", "*", "widths", "+", "x1", "\n", "abs_ys", "=", "(", "ys", ".", "float", "(", ")", "+", "0.5", ")", "/", "h", "*", "heights", "+", "y1", "\n", "\n", "# get the grid points indices that fall on the bbox boundaries", "\n", "x1_inds", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "grid_size", ")", "]", "\n", "y1_inds", "=", "[", "i", "*", "self", ".", "grid_size", "for", "i", "in", "range", "(", "self", ".", "grid_size", ")", "]", "\n", "x2_inds", "=", "[", "\n", "self", ".", "grid_points", "-", "self", ".", "grid_size", "+", "i", "\n", "for", "i", "in", "range", "(", "self", ".", "grid_size", ")", "\n", "]", "\n", "y2_inds", "=", "[", "(", "i", "+", "1", ")", "*", "self", ".", "grid_size", "-", "1", "for", "i", "in", "range", "(", "self", ".", "grid_size", ")", "]", "\n", "\n", "# voting of all grid points on some boundary", "\n", "bboxes_x1", "=", "(", "abs_xs", "[", ":", ",", "x1_inds", "]", "*", "pred_scores", "[", ":", ",", "x1_inds", "]", ")", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "(", "\n", "pred_scores", "[", ":", ",", "x1_inds", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "bboxes_y1", "=", "(", "abs_ys", "[", ":", ",", "y1_inds", "]", "*", "pred_scores", "[", ":", ",", "y1_inds", "]", ")", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "(", "\n", "pred_scores", "[", ":", ",", "y1_inds", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "bboxes_x2", "=", "(", "abs_xs", "[", ":", ",", "x2_inds", "]", "*", "pred_scores", "[", ":", ",", "x2_inds", "]", ")", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "(", "\n", "pred_scores", "[", ":", ",", "x2_inds", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "bboxes_y2", "=", "(", "abs_ys", "[", ":", ",", "y2_inds", "]", "*", "pred_scores", "[", ":", ",", "y2_inds", "]", ")", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "(", "\n", "pred_scores", "[", ":", ",", "y2_inds", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "\n", "bbox_res", "=", "torch", ".", "cat", "(", "\n", "[", "bboxes_x1", ",", "bboxes_y1", ",", "bboxes_x2", ",", "bboxes_y2", ",", "cls_scores", "]", ",", "dim", "=", "1", ")", "\n", "bbox_res", "[", ":", ",", "[", "0", ",", "2", "]", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "img_metas", "[", "0", "]", "[", "'img_shape'", "]", "[", "1", "]", "-", "1", ")", "\n", "bbox_res", "[", ":", ",", "[", "1", ",", "3", "]", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "img_metas", "[", "0", "]", "[", "'img_shape'", "]", "[", "0", "]", "-", "1", ")", "\n", "\n", "return", "bbox_res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.fused_semantic_head.FusedSemanticHead.__init__": [[25, 80], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "range", "mmdet.ops.ConvModule", "torch.Conv2d", "torch.Conv2d", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "fused_semantic_head.FusedSemanticHead.lateral_convs.append", "fused_semantic_head.FusedSemanticHead.convs.append", "mmdet.ops.ConvModule", "mmdet.ops.ConvModule"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_ins", ",", "\n", "fusion_level", ",", "\n", "num_convs", "=", "4", ",", "\n", "in_channels", "=", "256", ",", "\n", "conv_out_channels", "=", "256", ",", "\n", "num_classes", "=", "183", ",", "\n", "ignore_label", "=", "255", ",", "\n", "loss_weight", "=", "0.2", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "FusedSemanticHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_ins", "=", "num_ins", "\n", "self", ".", "fusion_level", "=", "fusion_level", "\n", "self", ".", "num_convs", "=", "num_convs", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "conv_out_channels", "=", "conv_out_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n", "self", ".", "lateral_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_ins", ")", ":", "\n", "            ", "self", ".", "lateral_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "in_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "inplace", "=", "False", ")", ")", "\n", "\n", "", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_convs", ")", ":", "\n", "            ", "in_channels", "=", "self", ".", "in_channels", "if", "i", "==", "0", "else", "conv_out_channels", "\n", "self", ".", "convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "in_channels", ",", "\n", "conv_out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "", "self", ".", "conv_embedding", "=", "ConvModule", "(", "\n", "conv_out_channels", ",", "\n", "conv_out_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "self", ".", "conv_logits", "=", "nn", ".", "Conv2d", "(", "conv_out_channels", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "ignore_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.fused_semantic_head.FusedSemanticHead.init_weights": [[81, 83], ["mmcv.cnn.kaiming_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "kaiming_init", "(", "self", ".", "conv_logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.fused_semantic_head.FusedSemanticHead.forward": [[84, 100], ["mmdet.core.auto_fp16", "tuple", "enumerate", "range", "fused_semantic_head.FusedSemanticHead.conv_logits", "fused_semantic_head.FusedSemanticHead.conv_embedding", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.auto_fp16"], ["", "@", "auto_fp16", "(", ")", "\n", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "x", "=", "self", ".", "lateral_convs", "[", "self", ".", "fusion_level", "]", "(", "feats", "[", "self", ".", "fusion_level", "]", ")", "\n", "fused_size", "=", "tuple", "(", "x", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "for", "i", ",", "feat", "in", "enumerate", "(", "feats", ")", ":", "\n", "            ", "if", "i", "!=", "self", ".", "fusion_level", ":", "\n", "                ", "feat", "=", "F", ".", "interpolate", "(", "\n", "feat", ",", "size", "=", "fused_size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "x", "+=", "self", ".", "lateral_convs", "[", "i", "]", "(", "feat", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "num_convs", ")", ":", "\n", "            ", "x", "=", "self", ".", "convs", "[", "i", "]", "(", "x", ")", "\n", "\n", "", "mask_pred", "=", "self", ".", "conv_logits", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_embedding", "(", "x", ")", "\n", "return", "mask_pred", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.fused_semantic_head.FusedSemanticHead.loss": [[101, 107], ["mmdet.core.force_fp32", "labels.squeeze().long.squeeze().long.squeeze().long", "fused_semantic_head.FusedSemanticHead.criterion", "labels.squeeze().long.squeeze().long.squeeze"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.force_fp32"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'mask_pred'", ",", ")", ")", "\n", "def", "loss", "(", "self", ",", "mask_pred", ",", "labels", ")", ":", "\n", "        ", "labels", "=", "labels", ".", "squeeze", "(", "1", ")", ".", "long", "(", ")", "\n", "loss_semantic_seg", "=", "self", ".", "criterion", "(", "mask_pred", ",", "labels", ")", "\n", "loss_semantic_seg", "*=", "self", ".", "loss_weight", "\n", "return", "loss_semantic_seg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.fcn_mask_head.FCNMaskHead.__init__": [[18, 99], ["dict", "dict", "torch.Module.__init__", "upsample_cfg.copy", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "fcn_mask_head.FCNMaskHead.upsample_cfg.get", "fcn_mask_head.FCNMaskHead.upsample_cfg.pop", "builder.build_loss", "torch.ModuleList", "torch.ModuleList", "range", "fcn_mask_head.FCNMaskHead.upsample_cfg.copy", "mmdet.ops.build_upsample_layer", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "ValueError", "fcn_mask_head.FCNMaskHead.convs.append", "mmdet.ops.ConvModule", "fcn_mask_head.FCNMaskHead.update", "fcn_mask_head.FCNMaskHead.update", "fcn_mask_head.FCNMaskHead.update"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.upsample.build_upsample_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_convs", "=", "4", ",", "\n", "roi_feat_size", "=", "14", ",", "\n", "in_channels", "=", "256", ",", "\n", "conv_kernel_size", "=", "3", ",", "\n", "conv_out_channels", "=", "256", ",", "\n", "num_classes", "=", "81", ",", "\n", "class_agnostic", "=", "False", ",", "\n", "upsample_cfg", "=", "dict", "(", "type", "=", "'deconv'", ",", "scale_factor", "=", "2", ")", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "loss_mask", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "use_mask", "=", "True", ",", "loss_weight", "=", "1.0", ")", ")", ":", "\n", "        ", "super", "(", "FCNMaskHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "upsample_cfg", "=", "upsample_cfg", ".", "copy", "(", ")", "\n", "if", "self", ".", "upsample_cfg", "[", "'type'", "]", "not", "in", "[", "\n", "None", ",", "'deconv'", ",", "'nearest'", ",", "'bilinear'", ",", "'carafe'", "\n", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Invalid upsample method {}, accepted methods '", "\n", "'are \"deconv\", \"nearest\", \"bilinear\", \"carafe\"'", ".", "format", "(", "\n", "self", ".", "upsample_cfg", "[", "'type'", "]", ")", ")", "\n", "", "self", ".", "num_convs", "=", "num_convs", "\n", "# WARN: roi_feat_size is reserved and not used", "\n", "self", ".", "roi_feat_size", "=", "_pair", "(", "roi_feat_size", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "conv_kernel_size", "=", "conv_kernel_size", "\n", "self", ".", "conv_out_channels", "=", "conv_out_channels", "\n", "self", ".", "upsample_method", "=", "self", ".", "upsample_cfg", ".", "get", "(", "'type'", ")", "\n", "self", ".", "scale_factor", "=", "self", ".", "upsample_cfg", ".", "pop", "(", "'scale_factor'", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "class_agnostic", "=", "class_agnostic", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "self", ".", "loss_mask", "=", "build_loss", "(", "loss_mask", ")", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_convs", ")", ":", "\n", "            ", "in_channels", "=", "(", "\n", "self", ".", "in_channels", "if", "i", "==", "0", "else", "self", ".", "conv_out_channels", ")", "\n", "padding", "=", "(", "self", ".", "conv_kernel_size", "-", "1", ")", "//", "2", "\n", "self", ".", "convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "in_channels", ",", "\n", "self", ".", "conv_out_channels", ",", "\n", "self", ".", "conv_kernel_size", ",", "\n", "padding", "=", "padding", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ")", ")", "\n", "", "upsample_in_channels", "=", "(", "\n", "self", ".", "conv_out_channels", "if", "self", ".", "num_convs", ">", "0", "else", "in_channels", ")", "\n", "upsample_cfg_", "=", "self", ".", "upsample_cfg", ".", "copy", "(", ")", "\n", "if", "self", ".", "upsample_method", "is", "None", ":", "\n", "            ", "self", ".", "upsample", "=", "None", "\n", "", "elif", "self", ".", "upsample_method", "==", "'deconv'", ":", "\n", "            ", "upsample_cfg_", ".", "update", "(", "\n", "in_channels", "=", "upsample_in_channels", ",", "\n", "out_channels", "=", "self", ".", "conv_out_channels", ",", "\n", "kernel_size", "=", "self", ".", "scale_factor", ",", "\n", "stride", "=", "self", ".", "scale_factor", ")", "\n", "", "elif", "self", ".", "upsample_method", "==", "'carafe'", ":", "\n", "            ", "upsample_cfg_", ".", "update", "(", "\n", "channels", "=", "upsample_in_channels", ",", "scale_factor", "=", "self", ".", "scale_factor", ")", "\n", "", "else", ":", "\n", "# suppress warnings", "\n", "            ", "align_corners", "=", "(", "None", "\n", "if", "self", ".", "upsample_method", "==", "'nearest'", "else", "False", ")", "\n", "upsample_cfg_", ".", "update", "(", "\n", "scale_factor", "=", "self", ".", "scale_factor", ",", "\n", "mode", "=", "self", ".", "upsample_method", ",", "\n", "align_corners", "=", "align_corners", ")", "\n", "", "self", ".", "upsample", "=", "build_upsample_layer", "(", "upsample_cfg_", ")", "\n", "\n", "out_channels", "=", "1", "if", "self", ".", "class_agnostic", "else", "self", ".", "num_classes", "\n", "logits_in_channel", "=", "(", "\n", "self", ".", "conv_out_channels", "\n", "if", "self", ".", "upsample_method", "==", "'deconv'", "else", "upsample_in_channels", ")", "\n", "self", ".", "conv_logits", "=", "nn", ".", "Conv2d", "(", "logits_in_channel", ",", "out_channels", ",", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "debug_imgs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.fcn_mask_head.FCNMaskHead.init_weights": [[100, 110], ["isinstance", "m.init_weights", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "[", "self", ".", "upsample", ",", "self", ".", "conv_logits", "]", ":", "\n", "            ", "if", "m", "is", "None", ":", "\n", "                ", "continue", "\n", "", "elif", "isinstance", "(", "m", ",", "CARAFEPack", ")", ":", "\n", "                ", "m", ".", "init_weights", "(", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.fcn_mask_head.FCNMaskHead.forward": [[111, 121], ["mmdet.core.auto_fp16", "fcn_mask_head.FCNMaskHead.conv_logits", "conv", "fcn_mask_head.FCNMaskHead.upsample", "fcn_mask_head.FCNMaskHead.relu"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.auto_fp16"], ["", "", "", "@", "auto_fp16", "(", ")", "\n", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "x", "=", "conv", "(", "x", ")", "\n", "", "if", "self", ".", "upsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "if", "self", ".", "upsample_method", "==", "'deconv'", ":", "\n", "                ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "", "mask_pred", "=", "self", ".", "conv_logits", "(", "x", ")", "\n", "return", "mask_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.fcn_mask_head.FCNMaskHead.get_target": [[122, 130], ["mmdet.core.mask_target"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask.mask_target.mask_target"], ["", "def", "get_target", "(", "self", ",", "sampling_results", ",", "gt_masks", ",", "rcnn_train_cfg", ")", ":", "\n", "        ", "pos_proposals", "=", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", "\n", "pos_assigned_gt_inds", "=", "[", "\n", "res", ".", "pos_assigned_gt_inds", "for", "res", "in", "sampling_results", "\n", "]", "\n", "mask_targets", "=", "mask_target", "(", "pos_proposals", ",", "pos_assigned_gt_inds", ",", "\n", "gt_masks", ",", "rcnn_train_cfg", ")", "\n", "return", "mask_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.fcn_mask_head.FCNMaskHead.loss": [[131, 141], ["mmdet.core.force_fp32", "dict", "fcn_mask_head.FCNMaskHead.loss_mask", "fcn_mask_head.FCNMaskHead.loss_mask", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.force_fp32"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'mask_pred'", ",", ")", ")", "\n", "def", "loss", "(", "self", ",", "mask_pred", ",", "mask_targets", ",", "labels", ")", ":", "\n", "        ", "loss", "=", "dict", "(", ")", "\n", "if", "self", ".", "class_agnostic", ":", "\n", "            ", "loss_mask", "=", "self", ".", "loss_mask", "(", "mask_pred", ",", "mask_targets", ",", "\n", "torch", ".", "zeros_like", "(", "labels", ")", ")", "\n", "", "else", ":", "\n", "            ", "loss_mask", "=", "self", ".", "loss_mask", "(", "mask_pred", ",", "mask_targets", ",", "labels", ")", "\n", "", "loss", "[", "'loss_mask'", "]", "=", "loss_mask", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.fcn_mask_head.FCNMaskHead.get_seg_masks": [[142, 209], ["isinstance", "isinstance", "mask_pred.sigmoid().cpu().numpy.sigmoid().cpu().numpy.astype", "range", "mask_pred.sigmoid().cpu().numpy.sigmoid().cpu().numpy.sigmoid().cpu().numpy", "det_bboxes.cpu().numpy", "det_labels.cpu().numpy", "numpy.round().astype", "numpy.round().astype", "max", "max", "mmcv.imresize", "rcnn_test_cfg.get", "rcnn_test_cfg.get", "range", "isinstance", "scale_factor.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.zeros", "cls_segms[].append", "cls_segms[].append", "mask_pred.sigmoid().cpu().numpy.sigmoid().cpu().numpy.sigmoid().cpu", "det_bboxes.cpu", "det_labels.cpu", "numpy.round", "numpy.round", "pycocotools.encode", "scale_factor.cpu().numpy.cpu().numpy.cpu", "numpy.array", "mask_pred.sigmoid().cpu().numpy.sigmoid().cpu().numpy.sigmoid"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "def", "get_seg_masks", "(", "self", ",", "mask_pred", ",", "det_bboxes", ",", "det_labels", ",", "rcnn_test_cfg", ",", "\n", "ori_shape", ",", "scale_factor", ",", "rescale", ")", ":", "\n", "        ", "\"\"\"Get segmentation masks from mask_pred and bboxes.\n\n        Args:\n            mask_pred (Tensor or ndarray): shape (n, #class+1, h, w).\n                For single-scale testing, mask_pred is the direct output of\n                model, whose type is Tensor, while for multi-scale testing,\n                it will be converted to numpy array outside of this method.\n            det_bboxes (Tensor): shape (n, 4/5)\n            det_labels (Tensor): shape (n, )\n            img_shape (Tensor): shape (3, )\n            rcnn_test_cfg (dict): rcnn testing config\n            ori_shape: original image size\n\n        Returns:\n            list[list]: encoded masks\n        \"\"\"", "\n", "if", "isinstance", "(", "mask_pred", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "mask_pred", "=", "mask_pred", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "assert", "isinstance", "(", "mask_pred", ",", "np", ".", "ndarray", ")", "\n", "# when enabling mixed precision training, mask_pred may be float16", "\n", "# numpy array", "\n", "mask_pred", "=", "mask_pred", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "cls_segms", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_classes", "-", "1", ")", "]", "\n", "bboxes", "=", "det_bboxes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", ":", "4", "]", "\n", "labels", "=", "det_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "+", "1", "\n", "\n", "if", "rescale", ":", "\n", "            ", "img_h", ",", "img_w", "=", "ori_shape", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "            ", "img_h", "=", "np", ".", "round", "(", "ori_shape", "[", "0", "]", "*", "scale_factor", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "img_w", "=", "np", ".", "round", "(", "ori_shape", "[", "1", "]", "*", "scale_factor", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "scale_factor", "=", "1.0", "\n", "\n", "", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "scale_factor", ",", "(", "float", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "                ", "scale_factor", "=", "scale_factor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "bbox", "=", "(", "bboxes", "[", "i", ",", ":", "]", "/", "scale_factor", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "label", "=", "labels", "[", "i", "]", "\n", "w", "=", "max", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "+", "1", ",", "1", ")", "\n", "h", "=", "max", "(", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "+", "1", ",", "1", ")", "\n", "\n", "if", "not", "self", ".", "class_agnostic", ":", "\n", "                ", "mask_pred_", "=", "mask_pred", "[", "i", ",", "label", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "mask_pred_", "=", "mask_pred", "[", "i", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "", "bbox_mask", "=", "mmcv", ".", "imresize", "(", "mask_pred_", ",", "(", "w", ",", "h", ")", ")", "\n", "bbox_mask", "=", "(", "bbox_mask", ">", "rcnn_test_cfg", ".", "mask_thr_binary", ")", ".", "astype", "(", "\n", "np", ".", "uint8", ")", "\n", "\n", "if", "rcnn_test_cfg", ".", "get", "(", "'crop_mask'", ",", "False", ")", ":", "\n", "                ", "im_mask", "=", "bbox_mask", "\n", "", "else", ":", "\n", "                ", "im_mask", "=", "np", ".", "zeros", "(", "(", "img_h", ",", "img_w", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "im_mask", "[", "bbox", "[", "1", "]", ":", "bbox", "[", "1", "]", "+", "h", ",", "bbox", "[", "0", "]", ":", "bbox", "[", "0", "]", "+", "w", "]", "=", "bbox_mask", "\n", "\n", "", "if", "rcnn_test_cfg", ".", "get", "(", "'rle_mask_encode'", ",", "True", ")", ":", "\n", "                ", "rle", "=", "mask_util", ".", "encode", "(", "\n", "np", ".", "array", "(", "im_mask", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "order", "=", "'F'", ")", ")", "[", "0", "]", "\n", "cls_segms", "[", "label", "-", "1", "]", ".", "append", "(", "rle", ")", "\n", "", "else", ":", "\n", "                ", "cls_segms", "[", "label", "-", "1", "]", ".", "append", "(", "im_mask", ")", "\n", "\n", "", "", "return", "cls_segms", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.htc_mask_head.HTCMaskHead.__init__": [[9, 19], ["fcn_mask_head.FCNMaskHead.__init__", "mmdet.ops.ConvModule"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "with_conv_res", "=", "True", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "HTCMaskHead", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "with_conv_res", "=", "with_conv_res", "\n", "if", "self", ".", "with_conv_res", ":", "\n", "            ", "self", ".", "conv_res", "=", "ConvModule", "(", "\n", "self", ".", "conv_out_channels", ",", "\n", "self", ".", "conv_out_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.htc_mask_head.HTCMaskHead.init_weights": [[20, 24], ["super().init_weights", "htc_mask_head.HTCMaskHead.conv_res.init_weights"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "super", "(", "HTCMaskHead", ",", "self", ")", ".", "init_weights", "(", ")", "\n", "if", "self", ".", "with_conv_res", ":", "\n", "            ", "self", ".", "conv_res", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.htc_mask_head.HTCMaskHead.forward": [[25, 43], ["htc_mask_head.HTCMaskHead.conv_res", "conv", "htc_mask_head.HTCMaskHead.upsample", "htc_mask_head.HTCMaskHead.conv_logits", "outs.append", "outs.append", "htc_mask_head.HTCMaskHead.relu", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "res_feat", "=", "None", ",", "return_logits", "=", "True", ",", "return_feat", "=", "True", ")", ":", "\n", "        ", "if", "res_feat", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "with_conv_res", "\n", "res_feat", "=", "self", ".", "conv_res", "(", "res_feat", ")", "\n", "x", "=", "x", "+", "res_feat", "\n", "", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "x", "=", "conv", "(", "x", ")", "\n", "", "res_feat", "=", "x", "\n", "outs", "=", "[", "]", "\n", "if", "return_logits", ":", "\n", "            ", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "if", "self", ".", "upsample_method", "==", "'deconv'", ":", "\n", "                ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "mask_pred", "=", "self", ".", "conv_logits", "(", "x", ")", "\n", "outs", ".", "append", "(", "mask_pred", ")", "\n", "", "if", "return_feat", ":", "\n", "            ", "outs", ".", "append", "(", "res_feat", ")", "\n", "", "return", "outs", "if", "len", "(", "outs", ")", ">", "1", "else", "outs", "[", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.shared_heads.res_layer.ResLayer.__init__": [[14, 46], ["dict", "torch.Module.__init__", "backbones.make_res_layer", "backbones.make_res_layer.ResLayer.add_module"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnext.make_res_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "depth", ",", "\n", "stage", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "dilation", "=", "1", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ")", ",", "\n", "norm_eval", "=", "True", ",", "\n", "with_cp", "=", "False", ",", "\n", "dcn", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "stage", "=", "stage", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "block", ",", "stage_blocks", "=", "ResNet", ".", "arch_settings", "[", "depth", "]", "\n", "stage_block", "=", "stage_blocks", "[", "stage", "]", "\n", "planes", "=", "64", "*", "2", "**", "stage", "\n", "inplanes", "=", "64", "*", "2", "**", "(", "stage", "-", "1", ")", "*", "block", ".", "expansion", "\n", "\n", "res_layer", "=", "make_res_layer", "(", "\n", "block", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stage_block", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "style", "=", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "dcn", "=", "dcn", ")", "\n", "self", ".", "add_module", "(", "'layer{}'", ".", "format", "(", "stage", "+", "1", ")", ",", "res_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.shared_heads.res_layer.ResLayer.init_weights": [[47, 59], ["isinstance", "mmdet.utils.get_root_logger", "mmcv.runner.load_checkpoint", "res_layer.ResLayer.modules", "TypeError", "isinstance", "mmcv.cnn.kaiming_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.get_root_logger"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.shared_heads.res_layer.ResLayer.forward": [[60, 65], ["mmdet.core.auto_fp16", "getattr", "getattr."], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.auto_fp16"], ["", "", "@", "auto_fp16", "(", ")", "\n", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res_layer", "=", "getattr", "(", "self", ",", "'layer{}'", ".", "format", "(", "self", ".", "stage", "+", "1", ")", ")", "\n", "out", "=", "res_layer", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.shared_heads.res_layer.ResLayer.train": [[66, 72], ["super().train", "res_layer.ResLayer.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResLayer", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "if", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.ga_retina_head.GARetinaHead.__init__": [[14, 25], ["guided_anchor_head.GuidedAnchorHead.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "in_channels", ",", "\n", "stacked_convs", "=", "4", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "stacked_convs", "=", "stacked_convs", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "super", "(", "GARetinaHead", ",", "self", ")", ".", "__init__", "(", "num_classes", ",", "in_channels", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.ga_retina_head.GARetinaHead._init_layers": [[26, 71], ["torch.ReLU", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv2d", "torch.Conv2d", "guided_anchor_head.FeatureAdaption", "guided_anchor_head.FeatureAdaption", "mmdet.ops.MaskedConv2d", "mmdet.ops.MaskedConv2d", "ga_retina_head.GARetinaHead.cls_convs.append", "ga_retina_head.GARetinaHead.reg_convs.append", "mmdet.ops.ConvModule", "mmdet.ops.ConvModule"], "methods", ["None"], ["", "def", "_init_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "cls_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "reg_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "stacked_convs", ")", ":", "\n", "            ", "chn", "=", "self", ".", "in_channels", "if", "i", "==", "0", "else", "self", ".", "feat_channels", "\n", "self", ".", "cls_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "self", ".", "reg_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "\n", "", "self", ".", "conv_loc", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "1", ",", "1", ")", "\n", "self", ".", "conv_shape", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "self", ".", "num_anchors", "*", "2", ",", "\n", "1", ")", "\n", "self", ".", "feature_adaption_cls", "=", "FeatureAdaption", "(", "\n", "self", ".", "feat_channels", ",", "\n", "self", ".", "feat_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "deformable_groups", "=", "self", ".", "deformable_groups", ")", "\n", "self", ".", "feature_adaption_reg", "=", "FeatureAdaption", "(", "\n", "self", ".", "feat_channels", ",", "\n", "self", ".", "feat_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "deformable_groups", "=", "self", ".", "deformable_groups", ")", "\n", "self", ".", "retina_cls", "=", "MaskedConv2d", "(", "\n", "self", ".", "feat_channels", ",", "\n", "self", ".", "num_anchors", "*", "self", ".", "cls_out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "retina_reg", "=", "MaskedConv2d", "(", "\n", "self", ".", "feat_channels", ",", "self", ".", "num_anchors", "*", "4", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.ga_retina_head.GARetinaHead.init_weights": [[72, 86], ["ga_retina_head.GARetinaHead.feature_adaption_cls.init_weights", "ga_retina_head.GARetinaHead.feature_adaption_reg.init_weights", "utils.bias_init_with_prob", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.weight_init.bias_init_with_prob"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "cls_convs", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "for", "m", "in", "self", ".", "reg_convs", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "\n", "", "self", ".", "feature_adaption_cls", ".", "init_weights", "(", ")", "\n", "self", ".", "feature_adaption_reg", ".", "init_weights", "(", ")", "\n", "\n", "bias_cls", "=", "bias_init_with_prob", "(", "0.01", ")", "\n", "normal_init", "(", "self", ".", "conv_loc", ",", "std", "=", "0.01", ",", "bias", "=", "bias_cls", ")", "\n", "normal_init", "(", "self", ".", "conv_shape", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "retina_cls", ",", "std", "=", "0.01", ",", "bias", "=", "bias_cls", ")", "\n", "normal_init", "(", "self", ".", "retina_reg", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.ga_retina_head.GARetinaHead.forward_single": [[87, 108], ["ga_retina_head.GARetinaHead.conv_loc", "ga_retina_head.GARetinaHead.conv_shape", "ga_retina_head.GARetinaHead.feature_adaption_cls", "ga_retina_head.GARetinaHead.feature_adaption_reg", "ga_retina_head.GARetinaHead.retina_cls", "ga_retina_head.GARetinaHead.retina_reg", "cls_conv", "reg_conv", "ga_retina_head.GARetinaHead.sigmoid"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "cls_feat", "=", "x", "\n", "reg_feat", "=", "x", "\n", "for", "cls_conv", "in", "self", ".", "cls_convs", ":", "\n", "            ", "cls_feat", "=", "cls_conv", "(", "cls_feat", ")", "\n", "", "for", "reg_conv", "in", "self", ".", "reg_convs", ":", "\n", "            ", "reg_feat", "=", "reg_conv", "(", "reg_feat", ")", "\n", "\n", "", "loc_pred", "=", "self", ".", "conv_loc", "(", "cls_feat", ")", "\n", "shape_pred", "=", "self", ".", "conv_shape", "(", "reg_feat", ")", "\n", "\n", "cls_feat", "=", "self", ".", "feature_adaption_cls", "(", "cls_feat", ",", "shape_pred", ")", "\n", "reg_feat", "=", "self", ".", "feature_adaption_reg", "(", "reg_feat", ",", "shape_pred", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "mask", "=", "loc_pred", ".", "sigmoid", "(", ")", "[", "0", "]", ">=", "self", ".", "loc_filter_thr", "\n", "", "else", ":", "\n", "            ", "mask", "=", "None", "\n", "", "cls_score", "=", "self", ".", "retina_cls", "(", "cls_feat", ",", "mask", ")", "\n", "bbox_pred", "=", "self", ".", "retina_reg", "(", "reg_feat", ",", "mask", ")", "\n", "return", "cls_score", ",", "bbox_pred", ",", "shape_pred", ",", "loc_pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fovea_head.FeatureAlign.__init__": [[16, 32], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "mmdet.ops.DeformConv", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "deformable_groups", "=", "4", ")", ":", "\n", "        ", "super", "(", "FeatureAlign", ",", "self", ")", ".", "__init__", "(", ")", "\n", "offset_channels", "=", "kernel_size", "*", "kernel_size", "*", "2", "\n", "self", ".", "conv_offset", "=", "nn", ".", "Conv2d", "(", "\n", "4", ",", "deformable_groups", "*", "offset_channels", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_adaption", "=", "DeformConv", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "deformable_groups", "=", "deformable_groups", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fovea_head.FeatureAlign.init_weights": [[33, 36], ["mmcv.cnn.normal_init", "mmcv.cnn.normal_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "normal_init", "(", "self", ".", "conv_offset", ",", "std", "=", "0.1", ")", "\n", "normal_init", "(", "self", ".", "conv_adaption", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fovea_head.FeatureAlign.forward": [[37, 41], ["fovea_head.FeatureAlign.conv_offset", "fovea_head.FeatureAlign.relu", "fovea_head.FeatureAlign.conv_adaption"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "shape", ")", ":", "\n", "        ", "offset", "=", "self", ".", "conv_offset", "(", "shape", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv_adaption", "(", "x", ",", "offset", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fovea_head.FoveaHead.__init__": [[49, 82], ["torch.Module.__init__", "builder.build_loss", "builder.build_loss", "fovea_head.FoveaHead._init_layers"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead._init_layers"], ["def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "in_channels", ",", "\n", "feat_channels", "=", "256", ",", "\n", "stacked_convs", "=", "4", ",", "\n", "strides", "=", "(", "4", ",", "8", ",", "16", ",", "32", ",", "64", ")", ",", "\n", "base_edge_list", "=", "(", "16", ",", "32", ",", "64", ",", "128", ",", "256", ")", ",", "\n", "scale_ranges", "=", "(", "(", "8", ",", "32", ")", ",", "(", "16", ",", "64", ")", ",", "(", "32", ",", "128", ")", ",", "(", "64", ",", "256", ")", ",", "(", "128", ",", "\n", "512", ")", ")", ",", "\n", "sigma", "=", "0.4", ",", "\n", "with_deform", "=", "False", ",", "\n", "deformable_groups", "=", "4", ",", "\n", "loss_cls", "=", "None", ",", "\n", "loss_bbox", "=", "None", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "FoveaHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "cls_out_channels", "=", "num_classes", "-", "1", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "feat_channels", "=", "feat_channels", "\n", "self", ".", "stacked_convs", "=", "stacked_convs", "\n", "self", ".", "strides", "=", "strides", "\n", "self", ".", "base_edge_list", "=", "base_edge_list", "\n", "self", ".", "scale_ranges", "=", "scale_ranges", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "with_deform", "=", "with_deform", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "self", ".", "loss_cls", "=", "build_loss", "(", "loss_cls", ")", "\n", "self", ".", "loss_bbox", "=", "build_loss", "(", "loss_bbox", ")", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "_init_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fovea_head.FoveaHead._init_layers": [[83, 144], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv2d", "torch.Conv2d", "fovea_head.FoveaHead.reg_convs.append", "range", "torch.Conv2d", "torch.Conv2d", "fovea_head.FoveaHead.cls_convs.append", "fovea_head.FoveaHead.cls_convs.append", "fovea_head.FeatureAlign", "torch.Conv2d", "torch.Conv2d", "mmdet.ops.ConvModule", "fovea_head.FoveaHead.cls_convs.append", "mmdet.ops.ConvModule", "mmdet.ops.ConvModule", "int", "mmdet.ops.ConvModule"], "methods", ["None"], ["", "def", "_init_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "cls_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "reg_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "# box branch", "\n", "for", "i", "in", "range", "(", "self", ".", "stacked_convs", ")", ":", "\n", "            ", "chn", "=", "self", ".", "in_channels", "if", "i", "==", "0", "else", "self", ".", "feat_channels", "\n", "self", ".", "reg_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "bias", "=", "self", ".", "norm_cfg", "is", "None", ")", ")", "\n", "", "self", ".", "fovea_reg", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "4", ",", "3", ",", "padding", "=", "1", ")", "\n", "# cls branch", "\n", "if", "not", "self", ".", "with_deform", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "stacked_convs", ")", ":", "\n", "                ", "chn", "=", "self", ".", "in_channels", "if", "i", "==", "0", "else", "self", ".", "feat_channels", "\n", "self", ".", "cls_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "bias", "=", "self", ".", "norm_cfg", "is", "None", ")", ")", "\n", "", "self", ".", "fovea_cls", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "feat_channels", ",", "self", ".", "cls_out_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cls_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "self", ".", "feat_channels", ",", "(", "self", ".", "feat_channels", "*", "4", ")", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "bias", "=", "self", ".", "norm_cfg", "is", "None", ")", ")", "\n", "self", ".", "cls_convs", ".", "append", "(", "\n", "ConvModule", "(", "(", "self", ".", "feat_channels", "*", "4", ")", ",", "(", "self", ".", "feat_channels", "*", "4", ")", ",", "\n", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "bias", "=", "self", ".", "norm_cfg", "is", "None", ")", ")", "\n", "self", ".", "feature_adaption", "=", "FeatureAlign", "(", "\n", "self", ".", "feat_channels", ",", "\n", "self", ".", "feat_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "deformable_groups", "=", "self", ".", "deformable_groups", ")", "\n", "self", ".", "fovea_cls", "=", "nn", ".", "Conv2d", "(", "\n", "int", "(", "self", ".", "feat_channels", "*", "4", ")", ",", "\n", "self", ".", "cls_out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fovea_head.FoveaHead.init_weights": [[145, 155], ["utils.bias_init_with_prob", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "fovea_head.FoveaHead.feature_adaption.init_weights"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.weight_init.bias_init_with_prob", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "cls_convs", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "for", "m", "in", "self", ".", "reg_convs", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "bias_cls", "=", "bias_init_with_prob", "(", "0.01", ")", "\n", "normal_init", "(", "self", ".", "fovea_cls", ",", "std", "=", "0.01", ",", "bias", "=", "bias_cls", ")", "\n", "normal_init", "(", "self", ".", "fovea_reg", ",", "std", "=", "0.01", ")", "\n", "if", "self", ".", "with_deform", ":", "\n", "            ", "self", ".", "feature_adaption", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fovea_head.FoveaHead.forward": [[156, 158], ["mmdet.core.multi_apply"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.multi_apply"], ["", "", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "return", "multi_apply", "(", "self", ".", "forward_single", ",", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fovea_head.FoveaHead.forward_single": [[159, 171], ["fovea_head.FoveaHead.fovea_reg", "fovea_head.FoveaHead.fovea_cls", "reg_layer", "fovea_head.FoveaHead.feature_adaption", "cls_layer", "fovea_head.FoveaHead.exp"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "cls_feat", "=", "x", "\n", "reg_feat", "=", "x", "\n", "for", "reg_layer", "in", "self", ".", "reg_convs", ":", "\n", "            ", "reg_feat", "=", "reg_layer", "(", "reg_feat", ")", "\n", "", "bbox_pred", "=", "self", ".", "fovea_reg", "(", "reg_feat", ")", "\n", "if", "self", ".", "with_deform", ":", "\n", "            ", "cls_feat", "=", "self", ".", "feature_adaption", "(", "cls_feat", ",", "bbox_pred", ".", "exp", "(", ")", ")", "\n", "", "for", "cls_layer", "in", "self", ".", "cls_convs", ":", "\n", "            ", "cls_feat", "=", "cls_layer", "(", "cls_feat", ")", "\n", "", "cls_score", "=", "self", ".", "fovea_cls", "(", "cls_feat", ")", "\n", "return", "cls_score", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fovea_head.FoveaHead.get_points": [[172, 185], ["torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "points.append", "points.append", "y.flatten", "x.flatten"], "methods", ["None"], ["", "def", "get_points", "(", "self", ",", "featmap_sizes", ",", "dtype", ",", "device", ",", "flatten", "=", "False", ")", ":", "\n", "        ", "points", "=", "[", "]", "\n", "for", "featmap_size", "in", "featmap_sizes", ":", "\n", "            ", "x_range", "=", "torch", ".", "arange", "(", "\n", "featmap_size", "[", "1", "]", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "+", "0.5", "\n", "y_range", "=", "torch", ".", "arange", "(", "\n", "featmap_size", "[", "0", "]", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "+", "0.5", "\n", "y", ",", "x", "=", "torch", ".", "meshgrid", "(", "y_range", ",", "x_range", ")", "\n", "if", "flatten", ":", "\n", "                ", "points", ".", "append", "(", "(", "y", ".", "flatten", "(", ")", ",", "x", ".", "flatten", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "points", ".", "append", "(", "(", "y", ",", "x", ")", ")", "\n", "", "", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fovea_head.FoveaHead.loss": [[186, 231], ["fovea_head.FoveaHead.get_points", "cls_scores[].size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fovea_head.FoveaHead.fovea_target", "len", "fovea_head.FoveaHead.loss_cls", "dict", "len", "len", "cls_score.permute().reshape", "bbox_pred.permute().reshape", "fovea_head.FoveaHead.loss_bbox", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "featmap.size", "pos_bbox_targets.new_zeros", "cls_score.permute", "bbox_pred.permute", "pos_bbox_targets.size"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_points", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fovea_head.FoveaHead.fovea_target"], ["", "def", "loss", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "gt_bbox_list", ",", "\n", "gt_label_list", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "\n", "\n", "featmap_sizes", "=", "[", "featmap", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "featmap", "in", "cls_scores", "]", "\n", "points", "=", "self", ".", "get_points", "(", "featmap_sizes", ",", "bbox_preds", "[", "0", "]", ".", "dtype", ",", "\n", "bbox_preds", "[", "0", "]", ".", "device", ")", "\n", "num_imgs", "=", "cls_scores", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "flatten_cls_scores", "=", "[", "\n", "cls_score", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "cls_out_channels", ")", "\n", "for", "cls_score", "in", "cls_scores", "\n", "]", "\n", "flatten_bbox_preds", "=", "[", "\n", "bbox_pred", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "for", "bbox_pred", "in", "bbox_preds", "\n", "]", "\n", "flatten_cls_scores", "=", "torch", ".", "cat", "(", "flatten_cls_scores", ")", "\n", "flatten_bbox_preds", "=", "torch", ".", "cat", "(", "flatten_bbox_preds", ")", "\n", "flatten_labels", ",", "flatten_bbox_targets", "=", "self", ".", "fovea_target", "(", "\n", "gt_bbox_list", ",", "gt_label_list", ",", "featmap_sizes", ",", "points", ")", "\n", "pos_inds", "=", "(", "flatten_labels", ">", "0", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "num_pos", "=", "len", "(", "pos_inds", ")", "\n", "loss_cls", "=", "self", ".", "loss_cls", "(", "\n", "flatten_cls_scores", ",", "flatten_labels", ",", "avg_factor", "=", "num_pos", "+", "num_imgs", ")", "\n", "if", "num_pos", ">", "0", ":", "\n", "            ", "pos_bbox_preds", "=", "flatten_bbox_preds", "[", "pos_inds", "]", "\n", "pos_bbox_targets", "=", "flatten_bbox_targets", "[", "pos_inds", "]", "\n", "pos_weights", "=", "pos_bbox_targets", ".", "new_zeros", "(", "\n", "pos_bbox_targets", ".", "size", "(", ")", ")", "+", "1.0", "\n", "loss_bbox", "=", "self", ".", "loss_bbox", "(", "\n", "pos_bbox_preds", ",", "\n", "pos_bbox_targets", ",", "\n", "pos_weights", ",", "\n", "avg_factor", "=", "num_pos", ")", "\n", "", "else", ":", "\n", "            ", "loss_bbox", "=", "torch", ".", "tensor", "(", "[", "0", "]", ",", "\n", "dtype", "=", "flatten_bbox_preds", ".", "dtype", ",", "\n", "device", "=", "flatten_bbox_preds", ".", "device", ")", "\n", "", "return", "dict", "(", "loss_cls", "=", "loss_cls", ",", "loss_bbox", "=", "loss_bbox", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fovea_head.FoveaHead.fovea_target": [[232, 253], ["mmdet.core.multi_apply", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "zip", "zip", "labels_level_img.flatten", "bbox_targets_level_img.reshape"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.multi_apply"], ["", "def", "fovea_target", "(", "self", ",", "gt_bbox_list", ",", "gt_label_list", ",", "featmap_sizes", ",", "points", ")", ":", "\n", "        ", "label_list", ",", "bbox_target_list", "=", "multi_apply", "(", "\n", "self", ".", "fovea_target_single", ",", "\n", "gt_bbox_list", ",", "\n", "gt_label_list", ",", "\n", "featmap_size_list", "=", "featmap_sizes", ",", "\n", "point_list", "=", "points", ")", "\n", "flatten_labels", "=", "[", "\n", "torch", ".", "cat", "(", "[", "\n", "labels_level_img", ".", "flatten", "(", ")", "for", "labels_level_img", "in", "labels_level", "\n", "]", ")", "for", "labels_level", "in", "zip", "(", "*", "label_list", ")", "\n", "]", "\n", "flatten_bbox_targets", "=", "[", "\n", "torch", ".", "cat", "(", "[", "\n", "bbox_targets_level_img", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "for", "bbox_targets_level_img", "in", "bbox_targets_level", "\n", "]", ")", "for", "bbox_targets_level", "in", "zip", "(", "*", "bbox_target_list", ")", "\n", "]", "\n", "flatten_labels", "=", "torch", ".", "cat", "(", "flatten_labels", ")", "\n", "flatten_bbox_targets", "=", "torch", ".", "cat", "(", "flatten_bbox_targets", ")", "\n", "return", "flatten_labels", ",", "flatten_bbox_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fovea_head.FoveaHead.fovea_target_single": [[254, 313], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "zip", "gt_labels_raw.new_zeros", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.ceil().long().clamp", "torch.ceil().long().clamp", "torch.ceil().long().clamp", "torch.ceil().long().clamp", "torch.floor().long().clamp", "torch.floor().long().clamp", "torch.floor().long().clamp", "torch.floor().long().clamp", "torch.ceil().long().clamp", "torch.ceil().long().clamp", "torch.ceil().long().clamp", "torch.ceil().long().clamp", "torch.floor().long().clamp", "torch.floor().long().clamp", "torch.floor().long().clamp", "torch.floor().long().clamp", "zip", "bbox_targets.clamp.clamp.clamp", "label_list.append", "bbox_target_list.append", "gt_bboxes_raw.new", "len", "label_list.append", "bbox_target_list.append", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.ceil().long", "torch.ceil().long", "torch.ceil().long", "torch.ceil().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.ceil().long", "torch.ceil().long", "torch.ceil().long", "torch.ceil().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.floor", "torch.floor", "torch.floor", "torch.floor"], "methods", ["None"], ["", "def", "fovea_target_single", "(", "self", ",", "\n", "gt_bboxes_raw", ",", "\n", "gt_labels_raw", ",", "\n", "featmap_size_list", "=", "None", ",", "\n", "point_list", "=", "None", ")", ":", "\n", "\n", "        ", "gt_areas", "=", "torch", ".", "sqrt", "(", "(", "gt_bboxes_raw", "[", ":", ",", "2", "]", "-", "gt_bboxes_raw", "[", ":", ",", "0", "]", ")", "*", "\n", "(", "gt_bboxes_raw", "[", ":", ",", "3", "]", "-", "gt_bboxes_raw", "[", ":", ",", "1", "]", ")", ")", "\n", "label_list", "=", "[", "]", "\n", "bbox_target_list", "=", "[", "]", "\n", "# for each pyramid, find the cls and box target", "\n", "for", "base_len", ",", "(", "lower_bound", ",", "upper_bound", ")", ",", "stride", ",", "featmap_size", ",", "(", "y", ",", "x", ")", "in", "zip", "(", "self", ".", "base_edge_list", ",", "self", ".", "scale_ranges", ",", "\n", "self", ".", "strides", ",", "featmap_size_list", ",", "point_list", ")", ":", "\n", "            ", "labels", "=", "gt_labels_raw", ".", "new_zeros", "(", "featmap_size", ")", "\n", "bbox_targets", "=", "gt_bboxes_raw", ".", "new", "(", "featmap_size", "[", "0", "]", ",", "featmap_size", "[", "1", "]", ",", "\n", "4", ")", "+", "1", "\n", "# scale assignment", "\n", "hit_indices", "=", "(", "(", "gt_areas", ">=", "lower_bound", ")", "&", "\n", "(", "gt_areas", "<=", "upper_bound", ")", ")", ".", "nonzero", "(", ")", ".", "flatten", "(", ")", "\n", "if", "len", "(", "hit_indices", ")", "==", "0", ":", "\n", "                ", "label_list", ".", "append", "(", "labels", ")", "\n", "bbox_target_list", ".", "append", "(", "torch", ".", "log", "(", "bbox_targets", ")", ")", "\n", "continue", "\n", "", "_", ",", "hit_index_order", "=", "torch", ".", "sort", "(", "-", "gt_areas", "[", "hit_indices", "]", ")", "\n", "hit_indices", "=", "hit_indices", "[", "hit_index_order", "]", "\n", "gt_bboxes", "=", "gt_bboxes_raw", "[", "hit_indices", ",", ":", "]", "/", "stride", "\n", "gt_labels", "=", "gt_labels_raw", "[", "hit_indices", "]", "\n", "half_w", "=", "0.5", "*", "(", "gt_bboxes", "[", ":", ",", "2", "]", "-", "gt_bboxes", "[", ":", ",", "0", "]", ")", "\n", "half_h", "=", "0.5", "*", "(", "gt_bboxes", "[", ":", ",", "3", "]", "-", "gt_bboxes", "[", ":", ",", "1", "]", ")", "\n", "# valid fovea area: left, right, top, down", "\n", "pos_left", "=", "torch", ".", "ceil", "(", "\n", "gt_bboxes", "[", ":", ",", "0", "]", "+", "(", "1", "-", "self", ".", "sigma", ")", "*", "half_w", "-", "0.5", ")", ".", "long", "(", ")", ".", "clamp", "(", "0", ",", "featmap_size", "[", "1", "]", "-", "1", ")", "\n", "pos_right", "=", "torch", ".", "floor", "(", "\n", "gt_bboxes", "[", ":", ",", "0", "]", "+", "(", "1", "+", "self", ".", "sigma", ")", "*", "half_w", "-", "0.5", ")", ".", "long", "(", ")", ".", "clamp", "(", "0", ",", "featmap_size", "[", "1", "]", "-", "1", ")", "\n", "pos_top", "=", "torch", ".", "ceil", "(", "\n", "gt_bboxes", "[", ":", ",", "1", "]", "+", "(", "1", "-", "self", ".", "sigma", ")", "*", "half_h", "-", "0.5", ")", ".", "long", "(", ")", ".", "clamp", "(", "0", ",", "featmap_size", "[", "0", "]", "-", "1", ")", "\n", "pos_down", "=", "torch", ".", "floor", "(", "\n", "gt_bboxes", "[", ":", ",", "1", "]", "+", "(", "1", "+", "self", ".", "sigma", ")", "*", "half_h", "-", "0.5", ")", ".", "long", "(", ")", ".", "clamp", "(", "0", ",", "featmap_size", "[", "0", "]", "-", "1", ")", "\n", "for", "px1", ",", "py1", ",", "px2", ",", "py2", ",", "label", ",", "(", "gt_x1", ",", "gt_y1", ",", "gt_x2", ",", "gt_y2", ")", "in", "zip", "(", "pos_left", ",", "pos_top", ",", "pos_right", ",", "pos_down", ",", "gt_labels", ",", "\n", "gt_bboxes_raw", "[", "hit_indices", ",", ":", "]", ")", ":", "\n", "                ", "labels", "[", "py1", ":", "py2", "+", "1", ",", "px1", ":", "px2", "+", "1", "]", "=", "label", "\n", "bbox_targets", "[", "py1", ":", "py2", "+", "1", ",", "px1", ":", "px2", "+", "1", ",", "0", "]", "=", "(", "stride", "*", "x", "[", "py1", ":", "py2", "+", "1", ",", "px1", ":", "px2", "+", "1", "]", "-", "gt_x1", ")", "/", "base_len", "\n", "bbox_targets", "[", "py1", ":", "py2", "+", "1", ",", "px1", ":", "px2", "+", "1", ",", "1", "]", "=", "(", "stride", "*", "y", "[", "py1", ":", "py2", "+", "1", ",", "px1", ":", "px2", "+", "1", "]", "-", "gt_y1", ")", "/", "base_len", "\n", "bbox_targets", "[", "py1", ":", "py2", "+", "1", ",", "px1", ":", "px2", "+", "1", ",", "2", "]", "=", "(", "gt_x2", "-", "stride", "*", "x", "[", "py1", ":", "py2", "+", "1", ",", "px1", ":", "px2", "+", "1", "]", ")", "/", "base_len", "\n", "bbox_targets", "[", "py1", ":", "py2", "+", "1", ",", "px1", ":", "px2", "+", "1", ",", "3", "]", "=", "(", "gt_y2", "-", "stride", "*", "y", "[", "py1", ":", "py2", "+", "1", ",", "px1", ":", "px2", "+", "1", "]", ")", "/", "base_len", "\n", "", "bbox_targets", "=", "bbox_targets", ".", "clamp", "(", "min", "=", "1.", "/", "16", ",", "max", "=", "16.", ")", "\n", "label_list", ".", "append", "(", "labels", ")", "\n", "bbox_target_list", ".", "append", "(", "torch", ".", "log", "(", "bbox_targets", ")", ")", "\n", "", "return", "label_list", ",", "bbox_target_list", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fovea_head.FoveaHead.get_bboxes": [[314, 339], ["len", "fovea_head.FoveaHead.get_points", "range", "len", "len", "len", "fovea_head.FoveaHead.get_bboxes_single", "result_list.append", "featmap.size", "[].detach", "[].detach", "range", "range"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_points", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_bboxes_single"], ["", "def", "get_bboxes", "(", "self", ",", "cls_scores", ",", "bbox_preds", ",", "img_metas", ",", "cfg", ",", "rescale", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "\n", "num_levels", "=", "len", "(", "cls_scores", ")", "\n", "featmap_sizes", "=", "[", "featmap", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "featmap", "in", "cls_scores", "]", "\n", "points", "=", "self", ".", "get_points", "(", "\n", "featmap_sizes", ",", "\n", "bbox_preds", "[", "0", "]", ".", "dtype", ",", "\n", "bbox_preds", "[", "0", "]", ".", "device", ",", "\n", "flatten", "=", "True", ")", "\n", "result_list", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "len", "(", "img_metas", ")", ")", ":", "\n", "            ", "cls_score_list", "=", "[", "\n", "cls_scores", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "bbox_pred_list", "=", "[", "\n", "bbox_preds", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "img_shape", "=", "img_metas", "[", "img_id", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_metas", "[", "img_id", "]", "[", "'scale_factor'", "]", "\n", "det_bboxes", "=", "self", ".", "get_bboxes_single", "(", "cls_score_list", ",", "bbox_pred_list", ",", "\n", "featmap_sizes", ",", "points", ",", "\n", "img_shape", ",", "scale_factor", ",", "cfg", ",", "\n", "rescale", ")", "\n", "result_list", ".", "append", "(", "det_bboxes", ")", "\n", "", "return", "result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fovea_head.FoveaHead.get_bboxes_single": [[340, 388], ["zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmdet.core.multiclass_nms", "len", "len", "len", "cls_score.permute().reshape().sigmoid", "bbox_pred.permute().reshape().exp.permute().reshape().exp.permute().reshape().exp", "cfg.get", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.new_tensor", "torch.cat.new_tensor", "cls_score.permute().reshape().sigmoid.max", "max_scores.topk", "cls_score.size", "bbox_pred.permute().reshape().exp.permute().reshape().exp.size", "cls_score.permute().reshape", "bbox_pred.permute().reshape().exp.permute().reshape().exp.permute().reshape", "cls_score.permute", "bbox_pred.permute().reshape().exp.permute().reshape().exp.permute"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.bbox_nms.multiclass_nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "def", "get_bboxes_single", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "featmap_sizes", ",", "\n", "point_list", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "==", "len", "(", "point_list", ")", "\n", "det_bboxes", "=", "[", "]", "\n", "det_scores", "=", "[", "]", "\n", "for", "cls_score", ",", "bbox_pred", ",", "featmap_size", ",", "stride", ",", "base_len", ",", "(", "y", ",", "x", ")", "in", "zip", "(", "cls_scores", ",", "bbox_preds", ",", "featmap_sizes", ",", "self", ".", "strides", ",", "\n", "self", ".", "base_edge_list", ",", "point_list", ")", ":", "\n", "            ", "assert", "cls_score", ".", "size", "(", ")", "[", "-", "2", ":", "]", "==", "bbox_pred", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "scores", "=", "cls_score", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "\n", "-", "1", ",", "self", ".", "cls_out_channels", ")", ".", "sigmoid", "(", ")", "\n", "bbox_pred", "=", "bbox_pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", ".", "exp", "(", ")", "\n", "nms_pre", "=", "cfg", ".", "get", "(", "'nms_pre'", ",", "-", "1", ")", "\n", "if", "(", "nms_pre", ">", "0", ")", "and", "(", "scores", ".", "shape", "[", "0", "]", ">", "nms_pre", ")", ":", "\n", "                ", "max_scores", ",", "_", "=", "scores", ".", "max", "(", "dim", "=", "1", ")", "\n", "_", ",", "topk_inds", "=", "max_scores", ".", "topk", "(", "nms_pre", ")", "\n", "bbox_pred", "=", "bbox_pred", "[", "topk_inds", ",", ":", "]", "\n", "scores", "=", "scores", "[", "topk_inds", ",", ":", "]", "\n", "y", "=", "y", "[", "topk_inds", "]", "\n", "x", "=", "x", "[", "topk_inds", "]", "\n", "", "x1", "=", "(", "stride", "*", "x", "-", "base_len", "*", "bbox_pred", "[", ":", ",", "0", "]", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "img_shape", "[", "1", "]", "-", "1", ")", "\n", "y1", "=", "(", "stride", "*", "y", "-", "base_len", "*", "bbox_pred", "[", ":", ",", "1", "]", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "img_shape", "[", "0", "]", "-", "1", ")", "\n", "x2", "=", "(", "stride", "*", "x", "+", "base_len", "*", "bbox_pred", "[", ":", ",", "2", "]", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "img_shape", "[", "1", "]", "-", "1", ")", "\n", "y2", "=", "(", "stride", "*", "y", "+", "base_len", "*", "bbox_pred", "[", ":", ",", "3", "]", ")", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "img_shape", "[", "0", "]", "-", "1", ")", "\n", "bboxes", "=", "torch", ".", "stack", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "-", "1", ")", "\n", "det_bboxes", ".", "append", "(", "bboxes", ")", "\n", "det_scores", ".", "append", "(", "scores", ")", "\n", "", "det_bboxes", "=", "torch", ".", "cat", "(", "det_bboxes", ")", "\n", "if", "rescale", ":", "\n", "            ", "det_bboxes", "/=", "det_bboxes", ".", "new_tensor", "(", "scale_factor", ")", "\n", "", "det_scores", "=", "torch", ".", "cat", "(", "det_scores", ")", "\n", "padding", "=", "det_scores", ".", "new_zeros", "(", "det_scores", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "det_scores", "=", "torch", ".", "cat", "(", "[", "padding", ",", "det_scores", "]", ",", "dim", "=", "1", ")", "\n", "det_bboxes", ",", "det_labels", "=", "multiclass_nms", "(", "det_bboxes", ",", "det_scores", ",", "\n", "cfg", ".", "score_thr", ",", "cfg", ".", "nms", ",", "\n", "cfg", ".", "max_per_img", ")", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.ssd_head.SSDHead.__init__": [[17, 96], ["anchor_head.AnchorHead.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "int", "int", "int", "range", "range", "len", "reg_convs.append", "cls_convs.append", "int", "min_sizes.append", "max_sizes.append", "len", "mmdet.core.AnchorGenerator", "list", "list.insert", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "ssd_head.SSDHead.anchor_generators.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "numpy.floor", "int", "int", "int", "min_sizes.insert", "max_sizes.insert", "numpy.sqrt", "range", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "len", "int", "int", "min_sizes.insert", "max_sizes.insert", "min_sizes.insert", "max_sizes.insert", "len", "int", "int", "int", "int", "min_sizes.insert", "max_sizes.insert", "int", "int"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_size", "=", "300", ",", "\n", "num_classes", "=", "81", ",", "\n", "in_channels", "=", "(", "512", ",", "1024", ",", "512", ",", "256", ",", "256", ",", "256", ")", ",", "\n", "anchor_strides", "=", "(", "8", ",", "16", ",", "32", ",", "64", ",", "100", ",", "300", ")", ",", "\n", "basesize_ratio_range", "=", "(", "0.1", ",", "0.9", ")", ",", "\n", "anchor_ratios", "=", "(", "[", "2", "]", ",", "[", "2", ",", "3", "]", ",", "[", "2", ",", "3", "]", ",", "[", "2", ",", "3", "]", ",", "[", "2", "]", ",", "[", "2", "]", ")", ",", "\n", "target_means", "=", "(", ".0", ",", ".0", ",", ".0", ",", ".0", ")", ",", "\n", "target_stds", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", ":", "\n", "        ", "super", "(", "AnchorHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "cls_out_channels", "=", "num_classes", "\n", "num_anchors", "=", "[", "len", "(", "ratios", ")", "*", "2", "+", "2", "for", "ratios", "in", "anchor_ratios", "]", "\n", "reg_convs", "=", "[", "]", "\n", "cls_convs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "in_channels", ")", ")", ":", "\n", "            ", "reg_convs", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "[", "i", "]", ",", "\n", "num_anchors", "[", "i", "]", "*", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ")", ")", "\n", "cls_convs", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "[", "i", "]", ",", "\n", "num_anchors", "[", "i", "]", "*", "num_classes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ")", ")", "\n", "", "self", ".", "reg_convs", "=", "nn", ".", "ModuleList", "(", "reg_convs", ")", "\n", "self", ".", "cls_convs", "=", "nn", ".", "ModuleList", "(", "cls_convs", ")", "\n", "\n", "min_ratio", ",", "max_ratio", "=", "basesize_ratio_range", "\n", "min_ratio", "=", "int", "(", "min_ratio", "*", "100", ")", "\n", "max_ratio", "=", "int", "(", "max_ratio", "*", "100", ")", "\n", "step", "=", "int", "(", "np", ".", "floor", "(", "max_ratio", "-", "min_ratio", ")", "/", "(", "len", "(", "in_channels", ")", "-", "2", ")", ")", "\n", "min_sizes", "=", "[", "]", "\n", "max_sizes", "=", "[", "]", "\n", "for", "r", "in", "range", "(", "int", "(", "min_ratio", ")", ",", "int", "(", "max_ratio", ")", "+", "1", ",", "step", ")", ":", "\n", "            ", "min_sizes", ".", "append", "(", "int", "(", "input_size", "*", "r", "/", "100", ")", ")", "\n", "max_sizes", ".", "append", "(", "int", "(", "input_size", "*", "(", "r", "+", "step", ")", "/", "100", ")", ")", "\n", "", "if", "input_size", "==", "300", ":", "\n", "            ", "if", "basesize_ratio_range", "[", "0", "]", "==", "0.15", ":", "# SSD300 COCO", "\n", "                ", "min_sizes", ".", "insert", "(", "0", ",", "int", "(", "input_size", "*", "7", "/", "100", ")", ")", "\n", "max_sizes", ".", "insert", "(", "0", ",", "int", "(", "input_size", "*", "15", "/", "100", ")", ")", "\n", "", "elif", "basesize_ratio_range", "[", "0", "]", "==", "0.2", ":", "# SSD300 VOC", "\n", "                ", "min_sizes", ".", "insert", "(", "0", ",", "int", "(", "input_size", "*", "10", "/", "100", ")", ")", "\n", "max_sizes", ".", "insert", "(", "0", ",", "int", "(", "input_size", "*", "20", "/", "100", ")", ")", "\n", "", "", "elif", "input_size", "==", "512", ":", "\n", "            ", "if", "basesize_ratio_range", "[", "0", "]", "==", "0.1", ":", "# SSD512 COCO", "\n", "                ", "min_sizes", ".", "insert", "(", "0", ",", "int", "(", "input_size", "*", "4", "/", "100", ")", ")", "\n", "max_sizes", ".", "insert", "(", "0", ",", "int", "(", "input_size", "*", "10", "/", "100", ")", ")", "\n", "", "elif", "basesize_ratio_range", "[", "0", "]", "==", "0.15", ":", "# SSD512 VOC", "\n", "                ", "min_sizes", ".", "insert", "(", "0", ",", "int", "(", "input_size", "*", "7", "/", "100", ")", ")", "\n", "max_sizes", ".", "insert", "(", "0", ",", "int", "(", "input_size", "*", "15", "/", "100", ")", ")", "\n", "", "", "self", ".", "anchor_generators", "=", "[", "]", "\n", "self", ".", "anchor_strides", "=", "anchor_strides", "\n", "for", "k", "in", "range", "(", "len", "(", "anchor_strides", ")", ")", ":", "\n", "            ", "base_size", "=", "min_sizes", "[", "k", "]", "\n", "stride", "=", "anchor_strides", "[", "k", "]", "\n", "ctr", "=", "(", "(", "stride", "-", "1", ")", "/", "2.", ",", "(", "stride", "-", "1", ")", "/", "2.", ")", "\n", "scales", "=", "[", "1.", ",", "np", ".", "sqrt", "(", "max_sizes", "[", "k", "]", "/", "min_sizes", "[", "k", "]", ")", "]", "\n", "ratios", "=", "[", "1.", "]", "\n", "for", "r", "in", "anchor_ratios", "[", "k", "]", ":", "\n", "                ", "ratios", "+=", "[", "1", "/", "r", ",", "r", "]", "# 4 or 6 ratio", "\n", "", "anchor_generator", "=", "AnchorGenerator", "(", "\n", "base_size", ",", "scales", ",", "ratios", ",", "scale_major", "=", "False", ",", "ctr", "=", "ctr", ")", "\n", "indices", "=", "list", "(", "range", "(", "len", "(", "ratios", ")", ")", ")", "\n", "indices", ".", "insert", "(", "1", ",", "len", "(", "indices", ")", ")", "\n", "anchor_generator", ".", "base_anchors", "=", "torch", ".", "index_select", "(", "\n", "anchor_generator", ".", "base_anchors", ",", "0", ",", "torch", ".", "LongTensor", "(", "indices", ")", ")", "\n", "self", ".", "anchor_generators", ".", "append", "(", "anchor_generator", ")", "\n", "\n", "", "self", ".", "target_means", "=", "target_means", "\n", "self", ".", "target_stds", "=", "target_stds", "\n", "self", ".", "use_sigmoid_cls", "=", "False", "\n", "self", ".", "cls_focal_loss", "=", "False", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.ssd_head.SSDHead.init_weights": [[97, 101], ["ssd_head.SSDHead.modules", "isinstance", "mmcv.cnn.xavier_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "xavier_init", "(", "m", ",", "distribution", "=", "'uniform'", ",", "bias", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.ssd_head.SSDHead.forward": [[102, 110], ["zip", "cls_scores.append", "bbox_preds.append", "cls_conv", "reg_conv"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "cls_scores", "=", "[", "]", "\n", "bbox_preds", "=", "[", "]", "\n", "for", "feat", ",", "reg_conv", ",", "cls_conv", "in", "zip", "(", "feats", ",", "self", ".", "reg_convs", ",", "\n", "self", ".", "cls_convs", ")", ":", "\n", "            ", "cls_scores", ".", "append", "(", "cls_conv", "(", "feat", ")", ")", "\n", "bbox_preds", ".", "append", "(", "reg_conv", "(", "feat", ")", ")", "\n", "", "return", "cls_scores", ",", "bbox_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.ssd_head.SSDHead.loss_single": [[111, 134], ["pos_inds.size", "loss_cls_all[].topk", "loss_cls_all[].sum", "topk_loss_cls_neg.sum", "losses.smooth_l1_loss", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "neg_inds.size", "neg_inds.size"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.smooth_l1_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.cross_entropy_loss.cross_entropy", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.cross_entropy_loss.cross_entropy", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.cross_entropy_loss.cross_entropy"], ["", "def", "loss_single", "(", "self", ",", "cls_score", ",", "bbox_pred", ",", "labels", ",", "label_weights", ",", "\n", "bbox_targets", ",", "bbox_weights", ",", "num_total_samples", ",", "cfg", ")", ":", "\n", "        ", "loss_cls_all", "=", "F", ".", "cross_entropy", "(", "\n", "cls_score", ",", "labels", ",", "reduction", "=", "'none'", ")", "*", "label_weights", "\n", "pos_inds", "=", "(", "labels", ">", "0", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "neg_inds", "=", "(", "labels", "==", "0", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "num_pos_samples", "=", "pos_inds", ".", "size", "(", "0", ")", "\n", "num_neg_samples", "=", "cfg", ".", "neg_pos_ratio", "*", "num_pos_samples", "\n", "if", "num_neg_samples", ">", "neg_inds", ".", "size", "(", "0", ")", ":", "\n", "            ", "num_neg_samples", "=", "neg_inds", ".", "size", "(", "0", ")", "\n", "", "topk_loss_cls_neg", ",", "_", "=", "loss_cls_all", "[", "neg_inds", "]", ".", "topk", "(", "num_neg_samples", ")", "\n", "loss_cls_pos", "=", "loss_cls_all", "[", "pos_inds", "]", ".", "sum", "(", ")", "\n", "loss_cls_neg", "=", "topk_loss_cls_neg", ".", "sum", "(", ")", "\n", "loss_cls", "=", "(", "loss_cls_pos", "+", "loss_cls_neg", ")", "/", "num_total_samples", "\n", "\n", "loss_bbox", "=", "smooth_l1_loss", "(", "\n", "bbox_pred", ",", "\n", "bbox_targets", ",", "\n", "bbox_weights", ",", "\n", "beta", "=", "cfg", ".", "smoothl1_beta", ",", "\n", "avg_factor", "=", "num_total_samples", ")", "\n", "return", "loss_cls", "[", "None", "]", ",", "loss_bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.ssd_head.SSDHead.loss": [[135, 202], ["ssd_head.SSDHead.get_anchors", "mmdet.core.anchor_target", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.isfinite().all().item", "torch.isfinite().all().item", "torch.isfinite().all().item", "torch.isfinite().all().item", "torch.isfinite().all().item", "torch.isfinite().all().item", "torch.isfinite().all().item", "torch.isfinite().all().item", "torch.isfinite().all().item", "torch.isfinite().all().item", "torch.isfinite().all().item", "torch.isfinite().all().item", "torch.isfinite().all().item", "torch.isfinite().all().item", "torch.isfinite().all().item", "torch.isfinite().all().item", "torch.isfinite().all().item", "torch.isfinite().all().item", "mmdet.core.multi_apply", "dict", "len", "len", "featmap.size", "s.permute().reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "b.permute().reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "s.permute", "b.permute", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.anchor_head.AnchorHead.get_anchors", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_target.anchor_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.multi_apply"], ["", "def", "loss", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "        ", "featmap_sizes", "=", "[", "featmap", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "featmap", "in", "cls_scores", "]", "\n", "assert", "len", "(", "featmap_sizes", ")", "==", "len", "(", "self", ".", "anchor_generators", ")", "\n", "\n", "device", "=", "cls_scores", "[", "0", "]", ".", "device", "\n", "\n", "anchor_list", ",", "valid_flag_list", "=", "self", ".", "get_anchors", "(", "\n", "featmap_sizes", ",", "img_metas", ",", "device", "=", "device", ")", "\n", "cls_reg_targets", "=", "anchor_target", "(", "\n", "anchor_list", ",", "\n", "valid_flag_list", ",", "\n", "gt_bboxes", ",", "\n", "img_metas", ",", "\n", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore_list", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels_list", "=", "gt_labels", ",", "\n", "label_channels", "=", "1", ",", "\n", "sampling", "=", "False", ",", "\n", "unmap_outputs", "=", "False", ")", "\n", "if", "cls_reg_targets", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "(", "labels_list", ",", "label_weights_list", ",", "bbox_targets_list", ",", "bbox_weights_list", ",", "\n", "num_total_pos", ",", "num_total_neg", ")", "=", "cls_reg_targets", "\n", "\n", "num_images", "=", "len", "(", "img_metas", ")", "\n", "all_cls_scores", "=", "torch", ".", "cat", "(", "[", "\n", "s", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "\n", "num_images", ",", "-", "1", ",", "self", ".", "cls_out_channels", ")", "for", "s", "in", "cls_scores", "\n", "]", ",", "1", ")", "\n", "all_labels", "=", "torch", ".", "cat", "(", "labels_list", ",", "-", "1", ")", ".", "view", "(", "num_images", ",", "-", "1", ")", "\n", "all_label_weights", "=", "torch", ".", "cat", "(", "label_weights_list", ",", "\n", "-", "1", ")", ".", "view", "(", "num_images", ",", "-", "1", ")", "\n", "all_bbox_preds", "=", "torch", ".", "cat", "(", "[", "\n", "b", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "num_images", ",", "-", "1", ",", "4", ")", "\n", "for", "b", "in", "bbox_preds", "\n", "]", ",", "-", "2", ")", "\n", "all_bbox_targets", "=", "torch", ".", "cat", "(", "bbox_targets_list", ",", "\n", "-", "2", ")", ".", "view", "(", "num_images", ",", "-", "1", ",", "4", ")", "\n", "all_bbox_weights", "=", "torch", ".", "cat", "(", "bbox_weights_list", ",", "\n", "-", "2", ")", ".", "view", "(", "num_images", ",", "-", "1", ",", "4", ")", "\n", "\n", "# check NaN and Inf", "\n", "assert", "torch", ".", "isfinite", "(", "all_cls_scores", ")", ".", "all", "(", ")", ".", "item", "(", ")", ",", "'classification scores become infinite or NaN!'", "\n", "assert", "torch", ".", "isfinite", "(", "all_bbox_preds", ")", ".", "all", "(", ")", ".", "item", "(", ")", ",", "'bbox predications become infinite or NaN!'", "\n", "\n", "losses_cls", ",", "losses_bbox", "=", "multi_apply", "(", "\n", "self", ".", "loss_single", ",", "\n", "all_cls_scores", ",", "\n", "all_bbox_preds", ",", "\n", "all_labels", ",", "\n", "all_label_weights", ",", "\n", "all_bbox_targets", ",", "\n", "all_bbox_weights", ",", "\n", "num_total_samples", "=", "num_total_pos", ",", "\n", "cfg", "=", "cfg", ")", "\n", "return", "dict", "(", "loss_cls", "=", "losses_cls", ",", "loss_bbox", "=", "losses_bbox", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.FeatureAdaption.__init__": [[32, 48], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "mmdet.ops.DeformConv", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "deformable_groups", "=", "4", ")", ":", "\n", "        ", "super", "(", "FeatureAdaption", ",", "self", ")", ".", "__init__", "(", ")", "\n", "offset_channels", "=", "kernel_size", "*", "kernel_size", "*", "2", "\n", "self", ".", "conv_offset", "=", "nn", ".", "Conv2d", "(", "\n", "2", ",", "deformable_groups", "*", "offset_channels", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_adaption", "=", "DeformConv", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "deformable_groups", "=", "deformable_groups", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.FeatureAdaption.init_weights": [[49, 52], ["mmcv.cnn.normal_init", "mmcv.cnn.normal_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "normal_init", "(", "self", ".", "conv_offset", ",", "std", "=", "0.1", ")", "\n", "normal_init", "(", "self", ".", "conv_adaption", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.FeatureAdaption.forward": [[53, 57], ["guided_anchor_head.FeatureAdaption.conv_offset", "guided_anchor_head.FeatureAdaption.relu", "shape.detach", "guided_anchor_head.FeatureAdaption.conv_adaption"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "shape", ")", ":", "\n", "        ", "offset", "=", "self", ".", "conv_offset", "(", "shape", ".", "detach", "(", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv_adaption", "(", "x", ",", "offset", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.GuidedAnchorHead.__init__": [[96, 171], ["dict", "dict", "dict", "dict", "anchor_head.AnchorHead.__init__", "loss_cls.get", "builder.build_loss", "builder.build_loss", "builder.build_loss", "builder.build_loss", "guided_anchor_head.GuidedAnchorHead._init_layers", "numpy.array", "len", "len", "list", "guided_anchor_head.GuidedAnchorHead.approx_generators.append", "guided_anchor_head.GuidedAnchorHead.square_generators.append", "mmdet.core.AnchorGenerator", "mmdet.core.AnchorGenerator", "range"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead._init_layers"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", ",", "\n", "in_channels", ",", "\n", "feat_channels", "=", "256", ",", "\n", "octave_base_scale", "=", "8", ",", "\n", "scales_per_octave", "=", "3", ",", "\n", "octave_ratios", "=", "[", "0.5", ",", "1.0", ",", "2.0", "]", ",", "\n", "anchor_strides", "=", "[", "4", ",", "8", ",", "16", ",", "32", ",", "64", "]", ",", "\n", "anchor_base_sizes", "=", "None", ",", "\n", "anchoring_means", "=", "(", ".0", ",", ".0", ",", ".0", ",", ".0", ")", ",", "\n", "anchoring_stds", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ",", "\n", "target_means", "=", "(", ".0", ",", ".0", ",", ".0", ",", ".0", ")", ",", "\n", "target_stds", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ",", "\n", "deformable_groups", "=", "4", ",", "\n", "loc_filter_thr", "=", "0.01", ",", "\n", "loss_loc", "=", "dict", "(", "\n", "type", "=", "'FocalLoss'", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "gamma", "=", "2.0", ",", "\n", "alpha", "=", "0.25", ",", "\n", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_shape", "=", "dict", "(", "type", "=", "'BoundedIoULoss'", ",", "beta", "=", "0.2", ",", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_cls", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "use_sigmoid", "=", "True", ",", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_bbox", "=", "dict", "(", "type", "=", "'SmoothL1Loss'", ",", "beta", "=", "1.0", ",", "\n", "loss_weight", "=", "1.0", ")", ")", ":", "# yapf: disable", "\n", "        ", "super", "(", "AnchorHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "feat_channels", "=", "feat_channels", "\n", "self", ".", "octave_base_scale", "=", "octave_base_scale", "\n", "self", ".", "scales_per_octave", "=", "scales_per_octave", "\n", "self", ".", "octave_scales", "=", "octave_base_scale", "*", "np", ".", "array", "(", "\n", "[", "2", "**", "(", "i", "/", "scales_per_octave", ")", "for", "i", "in", "range", "(", "scales_per_octave", ")", "]", ")", "\n", "self", ".", "approxs_per_octave", "=", "len", "(", "self", ".", "octave_scales", ")", "*", "len", "(", "octave_ratios", ")", "\n", "self", ".", "octave_ratios", "=", "octave_ratios", "\n", "self", ".", "anchor_strides", "=", "anchor_strides", "\n", "self", ".", "anchor_base_sizes", "=", "list", "(", "\n", "anchor_strides", ")", "if", "anchor_base_sizes", "is", "None", "else", "anchor_base_sizes", "\n", "self", ".", "anchoring_means", "=", "anchoring_means", "\n", "self", ".", "anchoring_stds", "=", "anchoring_stds", "\n", "self", ".", "target_means", "=", "target_means", "\n", "self", ".", "target_stds", "=", "target_stds", "\n", "self", ".", "deformable_groups", "=", "deformable_groups", "\n", "self", ".", "loc_filter_thr", "=", "loc_filter_thr", "\n", "self", ".", "approx_generators", "=", "[", "]", "\n", "self", ".", "square_generators", "=", "[", "]", "\n", "for", "anchor_base", "in", "self", ".", "anchor_base_sizes", ":", "\n", "# Generators for approxs", "\n", "            ", "self", ".", "approx_generators", ".", "append", "(", "\n", "AnchorGenerator", "(", "anchor_base", ",", "self", ".", "octave_scales", ",", "\n", "self", ".", "octave_ratios", ")", ")", "\n", "# Generators for squares", "\n", "self", ".", "square_generators", ".", "append", "(", "\n", "AnchorGenerator", "(", "anchor_base", ",", "[", "self", ".", "octave_base_scale", "]", ",", "[", "1.0", "]", ")", ")", "\n", "# one anchor per location", "\n", "", "self", ".", "num_anchors", "=", "1", "\n", "self", ".", "use_sigmoid_cls", "=", "loss_cls", ".", "get", "(", "'use_sigmoid'", ",", "False", ")", "\n", "self", ".", "cls_focal_loss", "=", "loss_cls", "[", "'type'", "]", "in", "[", "'FocalLoss'", "]", "\n", "self", ".", "loc_focal_loss", "=", "loss_loc", "[", "'type'", "]", "in", "[", "'FocalLoss'", "]", "\n", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "            ", "self", ".", "cls_out_channels", "=", "self", ".", "num_classes", "-", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "cls_out_channels", "=", "self", ".", "num_classes", "\n", "\n", "# build losses", "\n", "", "self", ".", "loss_loc", "=", "build_loss", "(", "loss_loc", ")", "\n", "self", ".", "loss_shape", "=", "build_loss", "(", "loss_shape", ")", "\n", "self", ".", "loss_cls", "=", "build_loss", "(", "loss_cls", ")", "\n", "self", ".", "loss_bbox", "=", "build_loss", "(", "loss_bbox", ")", "\n", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n", "self", ".", "_init_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.GuidedAnchorHead._init_layers": [[172, 186], ["torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "guided_anchor_head.FeatureAdaption", "mmdet.ops.MaskedConv2d", "mmdet.ops.MaskedConv2d"], "methods", ["None"], ["", "def", "_init_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv_loc", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "1", ",", "1", ")", "\n", "self", ".", "conv_shape", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "num_anchors", "*", "2", ",", "1", ")", "\n", "self", ".", "feature_adaption", "=", "FeatureAdaption", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "feat_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "deformable_groups", "=", "self", ".", "deformable_groups", ")", "\n", "self", ".", "conv_cls", "=", "MaskedConv2d", "(", "self", ".", "feat_channels", ",", "\n", "self", ".", "num_anchors", "*", "self", ".", "cls_out_channels", ",", "\n", "1", ")", "\n", "self", ".", "conv_reg", "=", "MaskedConv2d", "(", "self", ".", "feat_channels", ",", "self", ".", "num_anchors", "*", "4", ",", "\n", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.GuidedAnchorHead.init_weights": [[187, 196], ["mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "utils.bias_init_with_prob", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "guided_anchor_head.GuidedAnchorHead.feature_adaption.init_weights"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.weight_init.bias_init_with_prob", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "normal_init", "(", "self", ".", "conv_cls", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "conv_reg", ",", "std", "=", "0.01", ")", "\n", "\n", "bias_cls", "=", "bias_init_with_prob", "(", "0.01", ")", "\n", "normal_init", "(", "self", ".", "conv_loc", ",", "std", "=", "0.01", ",", "bias", "=", "bias_cls", ")", "\n", "normal_init", "(", "self", ".", "conv_shape", ",", "std", "=", "0.01", ")", "\n", "\n", "self", ".", "feature_adaption", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.GuidedAnchorHead.forward_single": [[197, 209], ["guided_anchor_head.GuidedAnchorHead.conv_loc", "guided_anchor_head.GuidedAnchorHead.conv_shape", "guided_anchor_head.GuidedAnchorHead.feature_adaption", "guided_anchor_head.GuidedAnchorHead.conv_cls", "guided_anchor_head.GuidedAnchorHead.conv_reg", "guided_anchor_head.GuidedAnchorHead.sigmoid"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "loc_pred", "=", "self", ".", "conv_loc", "(", "x", ")", "\n", "shape_pred", "=", "self", ".", "conv_shape", "(", "x", ")", "\n", "x", "=", "self", ".", "feature_adaption", "(", "x", ",", "shape_pred", ")", "\n", "# masked conv is only used during inference for speed-up", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "mask", "=", "loc_pred", ".", "sigmoid", "(", ")", "[", "0", "]", ">=", "self", ".", "loc_filter_thr", "\n", "", "else", ":", "\n", "            ", "mask", "=", "None", "\n", "", "cls_score", "=", "self", ".", "conv_cls", "(", "x", ",", "mask", ")", "\n", "bbox_pred", "=", "self", ".", "conv_reg", "(", "x", ",", "mask", ")", "\n", "return", "cls_score", ",", "bbox_pred", ",", "shape_pred", ",", "loc_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.GuidedAnchorHead.forward": [[210, 212], ["mmdet.core.multi_apply"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.multi_apply"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "return", "multi_apply", "(", "self", ".", "forward_single", ",", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.GuidedAnchorHead.get_sampled_approxs": [[213, 270], ["len", "len", "range", "enumerate", "guided_anchor_head.GuidedAnchorHead.approx_generators[].grid_anchors", "multi_level_approxs.append", "range", "inside_flag_list.append", "range", "min", "min", "guided_anchor_head.GuidedAnchorHead.approx_generators[].valid_flags", "range", "multi_level_flags.append", "int", "int", "mmdet.core.anchor_inside_flags", "inside_flags_list.append", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "numpy.ceil", "numpy.ceil", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_generator.AnchorGenerator.grid_anchors", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_generator.PointGenerator.valid_flags", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_target.anchor_inside_flags"], ["", "def", "get_sampled_approxs", "(", "self", ",", "\n", "featmap_sizes", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "device", "=", "'cuda'", ")", ":", "\n", "        ", "\"\"\"Get sampled approxs and inside flags according to feature map sizes.\n\n        Args:\n            featmap_sizes (list[tuple]): Multi-level feature map sizes.\n            img_metas (list[dict]): Image meta info.\n            device (torch.device | str): device for returned tensors\n\n        Returns:\n            tuple: approxes of each image, inside flags of each image\n        \"\"\"", "\n", "num_imgs", "=", "len", "(", "img_metas", ")", "\n", "num_levels", "=", "len", "(", "featmap_sizes", ")", "\n", "\n", "# since feature map sizes of all images are the same, we only compute", "\n", "# approxes for one time", "\n", "multi_level_approxs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "approxs", "=", "self", ".", "approx_generators", "[", "i", "]", ".", "grid_anchors", "(", "\n", "featmap_sizes", "[", "i", "]", ",", "self", ".", "anchor_strides", "[", "i", "]", ",", "device", "=", "device", ")", "\n", "multi_level_approxs", ".", "append", "(", "approxs", ")", "\n", "", "approxs_list", "=", "[", "multi_level_approxs", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "\n", "# for each image, we compute inside flags of multi level approxes", "\n", "inside_flag_list", "=", "[", "]", "\n", "for", "img_id", ",", "img_meta", "in", "enumerate", "(", "img_metas", ")", ":", "\n", "            ", "multi_level_flags", "=", "[", "]", "\n", "multi_level_approxs", "=", "approxs_list", "[", "img_id", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "                ", "approxs", "=", "multi_level_approxs", "[", "i", "]", "\n", "anchor_stride", "=", "self", ".", "anchor_strides", "[", "i", "]", "\n", "feat_h", ",", "feat_w", "=", "featmap_sizes", "[", "i", "]", "\n", "h", ",", "w", "=", "img_meta", "[", "'pad_shape'", "]", "[", ":", "2", "]", "\n", "valid_feat_h", "=", "min", "(", "int", "(", "np", ".", "ceil", "(", "h", "/", "anchor_stride", ")", ")", ",", "feat_h", ")", "\n", "valid_feat_w", "=", "min", "(", "int", "(", "np", ".", "ceil", "(", "w", "/", "anchor_stride", ")", ")", ",", "feat_w", ")", "\n", "flags", "=", "self", ".", "approx_generators", "[", "i", "]", ".", "valid_flags", "(", "\n", "(", "feat_h", ",", "feat_w", ")", ",", "(", "valid_feat_h", ",", "valid_feat_w", ")", ",", "\n", "device", "=", "device", ")", "\n", "inside_flags_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "approxs_per_octave", ")", ":", "\n", "                    ", "split_valid_flags", "=", "flags", "[", "i", ":", ":", "self", ".", "approxs_per_octave", "]", "\n", "split_approxs", "=", "approxs", "[", "i", ":", ":", "self", ".", "approxs_per_octave", ",", ":", "]", "\n", "inside_flags", "=", "anchor_inside_flags", "(", "\n", "split_approxs", ",", "split_valid_flags", ",", "\n", "img_meta", "[", "'img_shape'", "]", "[", ":", "2", "]", ",", "cfg", ".", "allowed_border", ")", "\n", "inside_flags_list", ".", "append", "(", "inside_flags", ")", "\n", "# inside_flag for a position is true if any anchor in this", "\n", "# position is true", "\n", "", "inside_flags", "=", "(", "\n", "torch", ".", "stack", "(", "inside_flags_list", ",", "0", ")", ".", "sum", "(", "dim", "=", "0", ")", ">", "0", ")", "\n", "multi_level_flags", ".", "append", "(", "inside_flags", ")", "\n", "", "inside_flag_list", ".", "append", "(", "multi_level_flags", ")", "\n", "", "return", "approxs_list", ",", "inside_flag_list", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.GuidedAnchorHead.get_anchors": [[271, 325], ["len", "len", "range", "enumerate", "guided_anchor_head.GuidedAnchorHead.square_generators[].grid_anchors", "multi_level_squares.append", "range", "guided_anchors_list.append", "loc_mask_list.append", "range", "guided_anchor_head.GuidedAnchorHead.get_guided_anchors_single", "multi_level_guided_anchors.append", "multi_level_loc_mask.append"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_generator.AnchorGenerator.grid_anchors", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.GuidedAnchorHead.get_guided_anchors_single"], ["", "def", "get_anchors", "(", "self", ",", "\n", "featmap_sizes", ",", "\n", "shape_preds", ",", "\n", "loc_preds", ",", "\n", "img_metas", ",", "\n", "use_loc_filter", "=", "False", ",", "\n", "device", "=", "'cuda'", ")", ":", "\n", "        ", "\"\"\"Get squares according to feature map sizes and guided\n        anchors.\n\n        Args:\n            featmap_sizes (list[tuple]): Multi-level feature map sizes.\n            shape_preds (list[tensor]): Multi-level shape predictions.\n            loc_preds (list[tensor]): Multi-level location predictions.\n            img_metas (list[dict]): Image meta info.\n            use_loc_filter (bool): Use loc filter or not.\n            device (torch.device | str): device for returned tensors\n\n        Returns:\n            tuple: square approxs of each image, guided anchors of each image,\n                loc masks of each image\n        \"\"\"", "\n", "num_imgs", "=", "len", "(", "img_metas", ")", "\n", "num_levels", "=", "len", "(", "featmap_sizes", ")", "\n", "\n", "# since feature map sizes of all images are the same, we only compute", "\n", "# squares for one time", "\n", "multi_level_squares", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "squares", "=", "self", ".", "square_generators", "[", "i", "]", ".", "grid_anchors", "(", "\n", "featmap_sizes", "[", "i", "]", ",", "self", ".", "anchor_strides", "[", "i", "]", ",", "device", "=", "device", ")", "\n", "multi_level_squares", ".", "append", "(", "squares", ")", "\n", "", "squares_list", "=", "[", "multi_level_squares", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "\n", "# for each image, we compute multi level guided anchors", "\n", "guided_anchors_list", "=", "[", "]", "\n", "loc_mask_list", "=", "[", "]", "\n", "for", "img_id", ",", "img_meta", "in", "enumerate", "(", "img_metas", ")", ":", "\n", "            ", "multi_level_guided_anchors", "=", "[", "]", "\n", "multi_level_loc_mask", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "                ", "squares", "=", "squares_list", "[", "img_id", "]", "[", "i", "]", "\n", "shape_pred", "=", "shape_preds", "[", "i", "]", "[", "img_id", "]", "\n", "loc_pred", "=", "loc_preds", "[", "i", "]", "[", "img_id", "]", "\n", "guided_anchors", ",", "loc_mask", "=", "self", ".", "get_guided_anchors_single", "(", "\n", "squares", ",", "\n", "shape_pred", ",", "\n", "loc_pred", ",", "\n", "use_loc_filter", "=", "use_loc_filter", ")", "\n", "multi_level_guided_anchors", ".", "append", "(", "guided_anchors", ")", "\n", "multi_level_loc_mask", ".", "append", "(", "loc_mask", ")", "\n", "", "guided_anchors_list", ".", "append", "(", "multi_level_guided_anchors", ")", "\n", "loc_mask_list", ".", "append", "(", "multi_level_loc_mask", ")", "\n", "", "return", "squares_list", ",", "guided_anchors_list", ",", "loc_mask_list", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.GuidedAnchorHead.get_guided_anchors_single": [[326, 363], ["loc_pred.sigmoid().detach.sigmoid().detach.sigmoid().detach", "loc_mask.permute().expand", "mask.contiguous().view.contiguous().view.contiguous().view", "anchor_deltas.new_full", "mmdet.core.delta2bbox", "shape_pred.permute().contiguous().view().detach", "squares.size", "loc_pred.sigmoid().detach.sigmoid().detach.sigmoid", "loc_mask.permute", "mask.contiguous().view.contiguous().view.contiguous", "shape_pred.permute().contiguous().view", "shape_pred.permute().contiguous", "shape_pred.permute"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.delta2bbox"], ["", "def", "get_guided_anchors_single", "(", "self", ",", "\n", "squares", ",", "\n", "shape_pred", ",", "\n", "loc_pred", ",", "\n", "use_loc_filter", "=", "False", ")", ":", "\n", "        ", "\"\"\"Get guided anchors and loc masks for a single level.\n\n        Args:\n            square (tensor): Squares of a single level.\n            shape_pred (tensor): Shape predections of a single level.\n            loc_pred (tensor): Loc predections of a single level.\n            use_loc_filter (list[tensor]): Use loc filter or not.\n\n        Returns:\n            tuple: guided anchors, location masks\n        \"\"\"", "\n", "# calculate location filtering mask", "\n", "loc_pred", "=", "loc_pred", ".", "sigmoid", "(", ")", ".", "detach", "(", ")", "\n", "if", "use_loc_filter", ":", "\n", "            ", "loc_mask", "=", "loc_pred", ">=", "self", ".", "loc_filter_thr", "\n", "", "else", ":", "\n", "            ", "loc_mask", "=", "loc_pred", ">=", "0.0", "\n", "", "mask", "=", "loc_mask", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "num_anchors", ")", "\n", "mask", "=", "mask", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "# calculate guided anchors", "\n", "squares", "=", "squares", "[", "mask", "]", "\n", "anchor_deltas", "=", "shape_pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "2", ")", ".", "detach", "(", ")", "[", "mask", "]", "\n", "bbox_deltas", "=", "anchor_deltas", ".", "new_full", "(", "squares", ".", "size", "(", ")", ",", "0", ")", "\n", "bbox_deltas", "[", ":", ",", "2", ":", "]", "=", "anchor_deltas", "\n", "guided_anchors", "=", "delta2bbox", "(", "\n", "squares", ",", "\n", "bbox_deltas", ",", "\n", "self", ".", "anchoring_means", ",", "\n", "self", ".", "anchoring_stds", ",", "\n", "wh_ratio_clip", "=", "1e-6", ")", "\n", "return", "guided_anchors", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.GuidedAnchorHead.loss_shape_single": [[364, 390], ["shape_pred.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "bbox_anchors.contiguous().view.contiguous().view.contiguous().view", "bbox_gts.contiguous().view.contiguous().view.contiguous().view", "anchor_weights.contiguous().view.contiguous().view.contiguous().view", "bbox_anchors.contiguous().view.contiguous().view.new_full", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "mmdet.core.delta2bbox", "guided_anchor_head.GuidedAnchorHead.loss_shape", "bbox_anchors.contiguous().view.contiguous().view.size", "shape_pred.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "bbox_anchors.contiguous().view.contiguous().view.contiguous", "bbox_gts.contiguous().view.contiguous().view.contiguous", "anchor_weights.contiguous().view.contiguous().view.contiguous", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "shape_pred.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.delta2bbox"], ["", "def", "loss_shape_single", "(", "self", ",", "shape_pred", ",", "bbox_anchors", ",", "bbox_gts", ",", "\n", "anchor_weights", ",", "anchor_total_num", ")", ":", "\n", "        ", "shape_pred", "=", "shape_pred", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "bbox_anchors", "=", "bbox_anchors", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "bbox_gts", "=", "bbox_gts", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "anchor_weights", "=", "anchor_weights", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "bbox_deltas", "=", "bbox_anchors", ".", "new_full", "(", "bbox_anchors", ".", "size", "(", ")", ",", "0", ")", "\n", "bbox_deltas", "[", ":", ",", "2", ":", "]", "+=", "shape_pred", "\n", "# filter out negative samples to speed-up weighted_bounded_iou_loss", "\n", "inds", "=", "torch", ".", "nonzero", "(", "anchor_weights", "[", ":", ",", "0", "]", ">", "0", ")", ".", "squeeze", "(", "1", ")", "\n", "bbox_deltas_", "=", "bbox_deltas", "[", "inds", "]", "\n", "bbox_anchors_", "=", "bbox_anchors", "[", "inds", "]", "\n", "bbox_gts_", "=", "bbox_gts", "[", "inds", "]", "\n", "anchor_weights_", "=", "anchor_weights", "[", "inds", "]", "\n", "pred_anchors_", "=", "delta2bbox", "(", "\n", "bbox_anchors_", ",", "\n", "bbox_deltas_", ",", "\n", "self", ".", "anchoring_means", ",", "\n", "self", ".", "anchoring_stds", ",", "\n", "wh_ratio_clip", "=", "1e-6", ")", "\n", "loss_shape", "=", "self", ".", "loss_shape", "(", "\n", "pred_anchors_", ",", "\n", "bbox_gts_", ",", "\n", "anchor_weights_", ",", "\n", "avg_factor", "=", "anchor_total_num", ")", "\n", "return", "loss_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.GuidedAnchorHead.loss_loc_single": [[391, 399], ["guided_anchor_head.GuidedAnchorHead.loss_loc", "loc_pred.reshape", "loc_target.reshape().long", "loc_weight.reshape", "loc_target.reshape"], "methods", ["None"], ["", "def", "loss_loc_single", "(", "self", ",", "loc_pred", ",", "loc_target", ",", "loc_weight", ",", "loc_avg_factor", ",", "\n", "cfg", ")", ":", "\n", "        ", "loss_loc", "=", "self", ".", "loss_loc", "(", "\n", "loc_pred", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", "loc_target", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", ",", "\n", "loc_weight", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", "avg_factor", "=", "loc_avg_factor", ")", "\n", "return", "loss_loc", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.GuidedAnchorHead.loss": [[400, 513], ["mmdet.core.force_fp32", "mmdet.core.ga_loc_target", "guided_anchor_head.GuidedAnchorHead.get_sampled_approxs", "guided_anchor_head.GuidedAnchorHead.get_anchors", "mmdet.core.ga_shape_target", "mmdet.core.anchor_target", "mmdet.core.multi_apply", "range", "range", "dict", "len", "len", "len", "guided_anchor_head.GuidedAnchorHead.loss_loc_single", "losses_loc.append", "len", "guided_anchor_head.GuidedAnchorHead.loss_shape_single", "losses_shape.append", "featmap.size", "hasattr"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.guided_anchor_target.ga_loc_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.GuidedAnchorHead.get_sampled_approxs", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.anchor_head.AnchorHead.get_anchors", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.guided_anchor_target.ga_shape_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_target.anchor_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.multi_apply", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.GuidedAnchorHead.loss_loc_single", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.GuidedAnchorHead.loss_shape_single"], ["", "@", "force_fp32", "(", "\n", "apply_to", "=", "(", "'cls_scores'", ",", "'bbox_preds'", ",", "'shape_preds'", ",", "'loc_preds'", ")", ")", "\n", "def", "loss", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "shape_preds", ",", "\n", "loc_preds", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "        ", "featmap_sizes", "=", "[", "featmap", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "featmap", "in", "cls_scores", "]", "\n", "assert", "len", "(", "featmap_sizes", ")", "==", "len", "(", "self", ".", "approx_generators", ")", "\n", "\n", "device", "=", "cls_scores", "[", "0", "]", ".", "device", "\n", "\n", "# get loc targets", "\n", "loc_targets", ",", "loc_weights", ",", "loc_avg_factor", "=", "ga_loc_target", "(", "\n", "gt_bboxes", ",", "\n", "featmap_sizes", ",", "\n", "self", ".", "octave_base_scale", ",", "\n", "self", ".", "anchor_strides", ",", "\n", "center_ratio", "=", "cfg", ".", "center_ratio", ",", "\n", "ignore_ratio", "=", "cfg", ".", "ignore_ratio", ")", "\n", "\n", "# get sampled approxes", "\n", "approxs_list", ",", "inside_flag_list", "=", "self", ".", "get_sampled_approxs", "(", "\n", "featmap_sizes", ",", "img_metas", ",", "cfg", ",", "device", "=", "device", ")", "\n", "# get squares and guided anchors", "\n", "squares_list", ",", "guided_anchors_list", ",", "_", "=", "self", ".", "get_anchors", "(", "\n", "featmap_sizes", ",", "shape_preds", ",", "loc_preds", ",", "img_metas", ",", "device", "=", "device", ")", "\n", "\n", "# get shape targets", "\n", "sampling", "=", "False", "if", "not", "hasattr", "(", "cfg", ",", "'ga_sampler'", ")", "else", "True", "\n", "shape_targets", "=", "ga_shape_target", "(", "\n", "approxs_list", ",", "\n", "inside_flag_list", ",", "\n", "squares_list", ",", "\n", "gt_bboxes", ",", "\n", "img_metas", ",", "\n", "self", ".", "approxs_per_octave", ",", "\n", "cfg", ",", "\n", "sampling", "=", "sampling", ")", "\n", "if", "shape_targets", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "(", "bbox_anchors_list", ",", "bbox_gts_list", ",", "anchor_weights_list", ",", "anchor_fg_num", ",", "\n", "anchor_bg_num", ")", "=", "shape_targets", "\n", "anchor_total_num", "=", "(", "\n", "anchor_fg_num", "if", "not", "sampling", "else", "anchor_fg_num", "+", "anchor_bg_num", ")", "\n", "\n", "# get anchor targets", "\n", "sampling", "=", "False", "if", "self", ".", "cls_focal_loss", "else", "True", "\n", "label_channels", "=", "self", ".", "cls_out_channels", "if", "self", ".", "use_sigmoid_cls", "else", "1", "\n", "cls_reg_targets", "=", "anchor_target", "(", "\n", "guided_anchors_list", ",", "\n", "inside_flag_list", ",", "\n", "gt_bboxes", ",", "\n", "img_metas", ",", "\n", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore_list", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels_list", "=", "gt_labels", ",", "\n", "label_channels", "=", "label_channels", ",", "\n", "sampling", "=", "sampling", ")", "\n", "if", "cls_reg_targets", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "(", "labels_list", ",", "label_weights_list", ",", "bbox_targets_list", ",", "bbox_weights_list", ",", "\n", "num_total_pos", ",", "num_total_neg", ")", "=", "cls_reg_targets", "\n", "num_total_samples", "=", "(", "\n", "num_total_pos", "if", "self", ".", "cls_focal_loss", "else", "num_total_pos", "+", "\n", "num_total_neg", ")", "\n", "\n", "# get classification and bbox regression losses", "\n", "losses_cls", ",", "losses_bbox", "=", "multi_apply", "(", "\n", "self", ".", "loss_single", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "labels_list", ",", "\n", "label_weights_list", ",", "\n", "bbox_targets_list", ",", "\n", "bbox_weights_list", ",", "\n", "num_total_samples", "=", "num_total_samples", ",", "\n", "cfg", "=", "cfg", ")", "\n", "\n", "# get anchor location loss", "\n", "losses_loc", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "loc_preds", ")", ")", ":", "\n", "            ", "loss_loc", "=", "self", ".", "loss_loc_single", "(", "\n", "loc_preds", "[", "i", "]", ",", "\n", "loc_targets", "[", "i", "]", ",", "\n", "loc_weights", "[", "i", "]", ",", "\n", "loc_avg_factor", "=", "loc_avg_factor", ",", "\n", "cfg", "=", "cfg", ")", "\n", "losses_loc", ".", "append", "(", "loss_loc", ")", "\n", "\n", "# get anchor shape loss", "\n", "", "losses_shape", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "shape_preds", ")", ")", ":", "\n", "            ", "loss_shape", "=", "self", ".", "loss_shape_single", "(", "\n", "shape_preds", "[", "i", "]", ",", "\n", "bbox_anchors_list", "[", "i", "]", ",", "\n", "bbox_gts_list", "[", "i", "]", ",", "\n", "anchor_weights_list", "[", "i", "]", ",", "\n", "anchor_total_num", "=", "anchor_total_num", ")", "\n", "losses_shape", ".", "append", "(", "loss_shape", ")", "\n", "\n", "", "return", "dict", "(", "\n", "loss_cls", "=", "losses_cls", ",", "\n", "loss_bbox", "=", "losses_bbox", ",", "\n", "loss_shape", "=", "losses_shape", ",", "\n", "loss_loc", "=", "losses_loc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.GuidedAnchorHead.get_bboxes": [[514, 559], ["mmdet.core.force_fp32", "len", "guided_anchor_head.GuidedAnchorHead.get_anchors", "range", "len", "len", "len", "len", "len", "guided_anchor_head.GuidedAnchorHead.get_bboxes_single", "result_list.append", "featmap.size", "[].detach", "[].detach", "[].detach", "[].detach", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.anchor_head.AnchorHead.get_anchors", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_bboxes_single"], ["", "@", "force_fp32", "(", "\n", "apply_to", "=", "(", "'cls_scores'", ",", "'bbox_preds'", ",", "'shape_preds'", ",", "'loc_preds'", ")", ")", "\n", "def", "get_bboxes", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "shape_preds", ",", "\n", "loc_preds", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "==", "len", "(", "shape_preds", ")", "==", "len", "(", "\n", "loc_preds", ")", "\n", "num_levels", "=", "len", "(", "cls_scores", ")", "\n", "featmap_sizes", "=", "[", "featmap", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "featmap", "in", "cls_scores", "]", "\n", "device", "=", "cls_scores", "[", "0", "]", ".", "device", "\n", "# get guided anchors", "\n", "_", ",", "guided_anchors", ",", "loc_masks", "=", "self", ".", "get_anchors", "(", "\n", "featmap_sizes", ",", "\n", "shape_preds", ",", "\n", "loc_preds", ",", "\n", "img_metas", ",", "\n", "use_loc_filter", "=", "not", "self", ".", "training", ",", "\n", "device", "=", "device", ")", "\n", "result_list", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "len", "(", "img_metas", ")", ")", ":", "\n", "            ", "cls_score_list", "=", "[", "\n", "cls_scores", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "bbox_pred_list", "=", "[", "\n", "bbox_preds", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "guided_anchor_list", "=", "[", "\n", "guided_anchors", "[", "img_id", "]", "[", "i", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "loc_mask_list", "=", "[", "\n", "loc_masks", "[", "img_id", "]", "[", "i", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "img_shape", "=", "img_metas", "[", "img_id", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_metas", "[", "img_id", "]", "[", "'scale_factor'", "]", "\n", "proposals", "=", "self", ".", "get_bboxes_single", "(", "cls_score_list", ",", "bbox_pred_list", ",", "\n", "guided_anchor_list", ",", "\n", "loc_mask_list", ",", "img_shape", ",", "\n", "scale_factor", ",", "cfg", ",", "rescale", ")", "\n", "result_list", ".", "append", "(", "proposals", ")", "\n", "", "return", "result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.guided_anchor_head.GuidedAnchorHead.get_bboxes_single": [[560, 622], ["zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmdet.core.multiclass_nms", "len", "len", "len", "cls_score.permute().reshape.permute().reshape.permute().reshape", "bbox_pred.unsqueeze.unsqueeze.permute().reshape", "cfg.get", "mmdet.core.delta2bbox", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mask.sum", "cls_score.permute().reshape.permute().reshape.sigmoid", "cls_score.permute().reshape.permute().reshape.softmax", "scores.unsqueeze.unsqueeze.dim", "anchors.unsqueeze.unsqueeze.unsqueeze", "scores.unsqueeze.unsqueeze.unsqueeze", "bbox_pred.unsqueeze.unsqueeze.unsqueeze", "max_scores.topk", "cls_score.permute().reshape.permute().reshape.size", "bbox_pred.unsqueeze.unsqueeze.size", "cls_score.permute().reshape.permute().reshape.permute", "bbox_pred.unsqueeze.unsqueeze.permute", "scores.unsqueeze.unsqueeze.max", "scores[].max"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.bbox_nms.multiclass_nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.delta2bbox"], ["", "def", "get_bboxes_single", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "mlvl_anchors", ",", "\n", "mlvl_masks", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "==", "len", "(", "mlvl_anchors", ")", "\n", "mlvl_bboxes", "=", "[", "]", "\n", "mlvl_scores", "=", "[", "]", "\n", "for", "cls_score", ",", "bbox_pred", ",", "anchors", ",", "mask", "in", "zip", "(", "cls_scores", ",", "bbox_preds", ",", "\n", "mlvl_anchors", ",", "\n", "mlvl_masks", ")", ":", "\n", "            ", "assert", "cls_score", ".", "size", "(", ")", "[", "-", "2", ":", "]", "==", "bbox_pred", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "# if no location is kept, end.", "\n", "if", "mask", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "# reshape scores and bbox_pred", "\n", "", "cls_score", "=", "cls_score", ".", "permute", "(", "1", ",", "2", ",", "\n", "0", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "cls_out_channels", ")", "\n", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "                ", "scores", "=", "cls_score", ".", "sigmoid", "(", ")", "\n", "", "else", ":", "\n", "                ", "scores", "=", "cls_score", ".", "softmax", "(", "-", "1", ")", "\n", "", "bbox_pred", "=", "bbox_pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "# filter scores, bbox_pred w.r.t. mask.", "\n", "# anchors are filtered in get_anchors() beforehand.", "\n", "scores", "=", "scores", "[", "mask", ",", ":", "]", "\n", "bbox_pred", "=", "bbox_pred", "[", "mask", ",", ":", "]", "\n", "if", "scores", ".", "dim", "(", ")", "==", "0", ":", "\n", "                ", "anchors", "=", "anchors", ".", "unsqueeze", "(", "0", ")", "\n", "scores", "=", "scores", ".", "unsqueeze", "(", "0", ")", "\n", "bbox_pred", "=", "bbox_pred", ".", "unsqueeze", "(", "0", ")", "\n", "# filter anchors, bbox_pred, scores w.r.t. scores", "\n", "", "nms_pre", "=", "cfg", ".", "get", "(", "'nms_pre'", ",", "-", "1", ")", "\n", "if", "nms_pre", ">", "0", "and", "scores", ".", "shape", "[", "0", "]", ">", "nms_pre", ":", "\n", "                ", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "                    ", "max_scores", ",", "_", "=", "scores", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "max_scores", ",", "_", "=", "scores", "[", ":", ",", "1", ":", "]", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "_", ",", "topk_inds", "=", "max_scores", ".", "topk", "(", "nms_pre", ")", "\n", "anchors", "=", "anchors", "[", "topk_inds", ",", ":", "]", "\n", "bbox_pred", "=", "bbox_pred", "[", "topk_inds", ",", ":", "]", "\n", "scores", "=", "scores", "[", "topk_inds", ",", ":", "]", "\n", "", "bboxes", "=", "delta2bbox", "(", "anchors", ",", "bbox_pred", ",", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "img_shape", ")", "\n", "mlvl_bboxes", ".", "append", "(", "bboxes", ")", "\n", "mlvl_scores", ".", "append", "(", "scores", ")", "\n", "", "mlvl_bboxes", "=", "torch", ".", "cat", "(", "mlvl_bboxes", ")", "\n", "if", "rescale", ":", "\n", "            ", "mlvl_bboxes", "/=", "mlvl_bboxes", ".", "new_tensor", "(", "scale_factor", ")", "\n", "", "mlvl_scores", "=", "torch", ".", "cat", "(", "mlvl_scores", ")", "\n", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "            ", "padding", "=", "mlvl_scores", ".", "new_zeros", "(", "mlvl_scores", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "mlvl_scores", "=", "torch", ".", "cat", "(", "[", "padding", ",", "mlvl_scores", "]", ",", "dim", "=", "1", ")", "\n", "# multi class NMS", "\n", "", "det_bboxes", ",", "det_labels", "=", "multiclass_nms", "(", "mlvl_bboxes", ",", "mlvl_scores", ",", "\n", "cfg", ".", "score_thr", ",", "cfg", ".", "nms", ",", "\n", "cfg", ".", "max_per_img", ")", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.retina_sepbn_head.RetinaSepBNHead.__init__": [[20, 41], ["numpy.array", "anchor_head.AnchorHead.__init__", "range"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "num_ins", ",", "\n", "in_channels", ",", "\n", "stacked_convs", "=", "4", ",", "\n", "octave_base_scale", "=", "4", ",", "\n", "scales_per_octave", "=", "3", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "stacked_convs", "=", "stacked_convs", "\n", "self", ".", "octave_base_scale", "=", "octave_base_scale", "\n", "self", ".", "scales_per_octave", "=", "scales_per_octave", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "num_ins", "=", "num_ins", "\n", "octave_scales", "=", "np", ".", "array", "(", "\n", "[", "2", "**", "(", "i", "/", "scales_per_octave", ")", "for", "i", "in", "range", "(", "scales_per_octave", ")", "]", ")", "\n", "anchor_scales", "=", "octave_scales", "*", "octave_base_scale", "\n", "super", "(", "RetinaSepBNHead", ",", "self", ")", ".", "__init__", "(", "\n", "num_classes", ",", "in_channels", ",", "anchor_scales", "=", "anchor_scales", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.retina_sepbn_head.RetinaSepBNHead._init_layers": [[42, 82], ["torch.ReLU", "torch.ModuleList", "torch.ModuleList", "range", "range", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "range", "retina_sepbn_head.RetinaSepBNHead.cls_convs.append", "retina_sepbn_head.RetinaSepBNHead.reg_convs.append", "range", "torch.ModuleList.append", "torch.ModuleList.append", "mmdet.ops.ConvModule", "mmdet.ops.ConvModule"], "methods", ["None"], ["", "def", "_init_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "cls_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "reg_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_ins", ")", ":", "\n", "            ", "cls_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reg_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "stacked_convs", ")", ":", "\n", "                ", "chn", "=", "self", ".", "in_channels", "if", "i", "==", "0", "else", "self", ".", "feat_channels", "\n", "cls_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "reg_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "", "self", ".", "cls_convs", ".", "append", "(", "cls_convs", ")", "\n", "self", ".", "reg_convs", ".", "append", "(", "reg_convs", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "stacked_convs", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_ins", ")", ":", "\n", "                ", "self", ".", "cls_convs", "[", "j", "]", "[", "i", "]", ".", "conv", "=", "self", ".", "cls_convs", "[", "0", "]", "[", "i", "]", ".", "conv", "\n", "self", ".", "reg_convs", "[", "j", "]", "[", "i", "]", ".", "conv", "=", "self", ".", "reg_convs", "[", "0", "]", "[", "i", "]", ".", "conv", "\n", "", "", "self", ".", "retina_cls", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "feat_channels", ",", "\n", "self", ".", "num_anchors", "*", "self", ".", "cls_out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "retina_reg", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "feat_channels", ",", "self", ".", "num_anchors", "*", "4", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.retina_sepbn_head.RetinaSepBNHead.init_weights": [[83, 91], ["utils.bias_init_with_prob", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.weight_init.bias_init_with_prob"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "cls_convs", "[", "0", "]", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "for", "m", "in", "self", ".", "reg_convs", "[", "0", "]", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "bias_cls", "=", "bias_init_with_prob", "(", "0.01", ")", "\n", "normal_init", "(", "self", ".", "retina_cls", ",", "std", "=", "0.01", ",", "bias", "=", "bias_cls", ")", "\n", "normal_init", "(", "self", ".", "retina_reg", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.retina_sepbn_head.RetinaSepBNHead.forward": [[92, 107], ["enumerate", "retina_sepbn_head.RetinaSepBNHead.retina_cls", "retina_sepbn_head.RetinaSepBNHead.retina_reg", "cls_scores.append", "bbox_preds.append", "cls_conv", "reg_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "cls_scores", "=", "[", "]", "\n", "bbox_preds", "=", "[", "]", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "feats", ")", ":", "\n", "            ", "cls_feat", "=", "feats", "[", "i", "]", "\n", "reg_feat", "=", "feats", "[", "i", "]", "\n", "for", "cls_conv", "in", "self", ".", "cls_convs", "[", "i", "]", ":", "\n", "                ", "cls_feat", "=", "cls_conv", "(", "cls_feat", ")", "\n", "", "for", "reg_conv", "in", "self", ".", "reg_convs", "[", "i", "]", ":", "\n", "                ", "reg_feat", "=", "reg_conv", "(", "reg_feat", ")", "\n", "", "cls_score", "=", "self", ".", "retina_cls", "(", "cls_feat", ")", "\n", "bbox_pred", "=", "self", ".", "retina_reg", "(", "reg_feat", ")", "\n", "cls_scores", ".", "append", "(", "cls_score", ")", "\n", "bbox_preds", ".", "append", "(", "bbox_pred", ")", "\n", "", "return", "cls_scores", ",", "bbox_preds", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fcos_head.FCOSHead.__init__": [[33, 75], ["dict", "dict", "dict", "dict", "torch.Module.__init__", "builder.build_loss", "builder.build_loss", "builder.build_loss", "fcos_head.FCOSHead._init_layers"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead._init_layers"], ["def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "in_channels", ",", "\n", "feat_channels", "=", "256", ",", "\n", "stacked_convs", "=", "4", ",", "\n", "strides", "=", "(", "4", ",", "8", ",", "16", ",", "32", ",", "64", ")", ",", "\n", "regress_ranges", "=", "(", "(", "-", "1", ",", "64", ")", ",", "(", "64", ",", "128", ")", ",", "(", "128", ",", "256", ")", ",", "(", "256", ",", "512", ")", ",", "\n", "(", "512", ",", "INF", ")", ")", ",", "\n", "center_sampling", "=", "False", ",", "\n", "center_sample_radius", "=", "1.5", ",", "\n", "loss_cls", "=", "dict", "(", "\n", "type", "=", "'FocalLoss'", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "gamma", "=", "2.0", ",", "\n", "alpha", "=", "0.25", ",", "\n", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_bbox", "=", "dict", "(", "type", "=", "'IoULoss'", ",", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_centerness", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "loss_weight", "=", "1.0", ")", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'GN'", ",", "num_groups", "=", "32", ",", "requires_grad", "=", "True", ")", ")", ":", "\n", "        ", "super", "(", "FCOSHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "cls_out_channels", "=", "num_classes", "-", "1", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "feat_channels", "=", "feat_channels", "\n", "self", ".", "stacked_convs", "=", "stacked_convs", "\n", "self", ".", "strides", "=", "strides", "\n", "self", ".", "regress_ranges", "=", "regress_ranges", "\n", "self", ".", "loss_cls", "=", "build_loss", "(", "loss_cls", ")", "\n", "self", ".", "loss_bbox", "=", "build_loss", "(", "loss_bbox", ")", "\n", "self", ".", "loss_centerness", "=", "build_loss", "(", "loss_centerness", ")", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "self", ".", "center_sampling", "=", "center_sampling", "\n", "self", ".", "center_sample_radius", "=", "center_sample_radius", "\n", "\n", "self", ".", "_init_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fcos_head.FCOSHead._init_layers": [[76, 107], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "fcos_head.FCOSHead.cls_convs.append", "fcos_head.FCOSHead.reg_convs.append", "mmdet.ops.ConvModule", "mmdet.ops.ConvModule", "mmdet.ops.Scale"], "methods", ["None"], ["", "def", "_init_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "cls_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "reg_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "stacked_convs", ")", ":", "\n", "            ", "chn", "=", "self", ".", "in_channels", "if", "i", "==", "0", "else", "self", ".", "feat_channels", "\n", "self", ".", "cls_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "bias", "=", "self", ".", "norm_cfg", "is", "None", ")", ")", "\n", "self", ".", "reg_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "bias", "=", "self", ".", "norm_cfg", "is", "None", ")", ")", "\n", "", "self", ".", "fcos_cls", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "feat_channels", ",", "self", ".", "cls_out_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "fcos_reg", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "4", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "fcos_centerness", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "1", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "scales", "=", "nn", ".", "ModuleList", "(", "[", "Scale", "(", "1.0", ")", "for", "_", "in", "self", ".", "strides", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fcos_head.FCOSHead.init_weights": [[108, 117], ["utils.bias_init_with_prob", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.weight_init.bias_init_with_prob"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "cls_convs", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "for", "m", "in", "self", ".", "reg_convs", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "bias_cls", "=", "bias_init_with_prob", "(", "0.01", ")", "\n", "normal_init", "(", "self", ".", "fcos_cls", ",", "std", "=", "0.01", ",", "bias", "=", "bias_cls", ")", "\n", "normal_init", "(", "self", ".", "fcos_reg", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "fcos_centerness", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fcos_head.FCOSHead.forward": [[118, 120], ["mmdet.core.multi_apply"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.multi_apply"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "return", "multi_apply", "(", "self", ".", "forward_single", ",", "feats", ",", "self", ".", "scales", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fcos_head.FCOSHead.forward_single": [[121, 136], ["fcos_head.FCOSHead.fcos_cls", "fcos_head.FCOSHead.fcos_centerness", "scale().float().exp", "cls_layer", "reg_layer", "scale().float", "scale", "fcos_head.FCOSHead.fcos_reg"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ",", "scale", ")", ":", "\n", "        ", "cls_feat", "=", "x", "\n", "reg_feat", "=", "x", "\n", "\n", "for", "cls_layer", "in", "self", ".", "cls_convs", ":", "\n", "            ", "cls_feat", "=", "cls_layer", "(", "cls_feat", ")", "\n", "", "cls_score", "=", "self", ".", "fcos_cls", "(", "cls_feat", ")", "\n", "centerness", "=", "self", ".", "fcos_centerness", "(", "cls_feat", ")", "\n", "\n", "for", "reg_layer", "in", "self", ".", "reg_convs", ":", "\n", "            ", "reg_feat", "=", "reg_layer", "(", "reg_feat", ")", "\n", "# scale the bbox_pred of different level", "\n", "# float to avoid overflow when enabling FP16", "\n", "", "bbox_pred", "=", "scale", "(", "self", ".", "fcos_reg", "(", "reg_feat", ")", ")", ".", "float", "(", ")", ".", "exp", "(", ")", "\n", "return", "cls_score", ",", "bbox_pred", ",", "centerness", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fcos_head.FCOSHead.loss": [[137, 209], ["mmdet.core.force_fp32", "fcos_head.FCOSHead.get_points", "fcos_head.FCOSHead.fcos_target", "cls_scores[].size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.nonzero().reshape", "torch.cat.nonzero().reshape", "len", "fcos_head.FCOSHead.loss_cls", "dict", "len", "len", "len", "cls_score.permute().reshape", "bbox_pred.permute().reshape", "centerness.permute().reshape", "fcos_head.FCOSHead.centerness_target", "mmdet.core.distance2bbox", "mmdet.core.distance2bbox", "fcos_head.FCOSHead.loss_bbox", "fcos_head.FCOSHead.loss_centerness", "pos_bbox_preds.sum", "pos_centerness.sum", "featmap.size", "points.repeat", "torch.cat.nonzero", "torch.cat.nonzero", "cls_score.permute", "bbox_pred.permute", "centerness.permute", "fcos_head.FCOSHead.sum"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_points", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fcos_head.FCOSHead.fcos_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.ATSSHead.centerness_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.distance2bbox", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.distance2bbox"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'cls_scores'", ",", "'bbox_preds'", ",", "'centernesses'", ")", ")", "\n", "def", "loss", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "centernesses", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "==", "len", "(", "centernesses", ")", "\n", "featmap_sizes", "=", "[", "featmap", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "featmap", "in", "cls_scores", "]", "\n", "all_level_points", "=", "self", ".", "get_points", "(", "featmap_sizes", ",", "bbox_preds", "[", "0", "]", ".", "dtype", ",", "\n", "bbox_preds", "[", "0", "]", ".", "device", ")", "\n", "labels", ",", "bbox_targets", "=", "self", ".", "fcos_target", "(", "all_level_points", ",", "gt_bboxes", ",", "\n", "gt_labels", ")", "\n", "\n", "num_imgs", "=", "cls_scores", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "# flatten cls_scores, bbox_preds and centerness", "\n", "flatten_cls_scores", "=", "[", "\n", "cls_score", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "cls_out_channels", ")", "\n", "for", "cls_score", "in", "cls_scores", "\n", "]", "\n", "flatten_bbox_preds", "=", "[", "\n", "bbox_pred", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "for", "bbox_pred", "in", "bbox_preds", "\n", "]", "\n", "flatten_centerness", "=", "[", "\n", "centerness", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "for", "centerness", "in", "centernesses", "\n", "]", "\n", "flatten_cls_scores", "=", "torch", ".", "cat", "(", "flatten_cls_scores", ")", "\n", "flatten_bbox_preds", "=", "torch", ".", "cat", "(", "flatten_bbox_preds", ")", "\n", "flatten_centerness", "=", "torch", ".", "cat", "(", "flatten_centerness", ")", "\n", "flatten_labels", "=", "torch", ".", "cat", "(", "labels", ")", "\n", "flatten_bbox_targets", "=", "torch", ".", "cat", "(", "bbox_targets", ")", "\n", "# repeat points to align with bbox_preds", "\n", "flatten_points", "=", "torch", ".", "cat", "(", "\n", "[", "points", ".", "repeat", "(", "num_imgs", ",", "1", ")", "for", "points", "in", "all_level_points", "]", ")", "\n", "\n", "pos_inds", "=", "flatten_labels", ".", "nonzero", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "num_pos", "=", "len", "(", "pos_inds", ")", "\n", "loss_cls", "=", "self", ".", "loss_cls", "(", "\n", "flatten_cls_scores", ",", "flatten_labels", ",", "\n", "avg_factor", "=", "num_pos", "+", "num_imgs", ")", "# avoid num_pos is 0", "\n", "\n", "pos_bbox_preds", "=", "flatten_bbox_preds", "[", "pos_inds", "]", "\n", "pos_centerness", "=", "flatten_centerness", "[", "pos_inds", "]", "\n", "\n", "if", "num_pos", ">", "0", ":", "\n", "            ", "pos_bbox_targets", "=", "flatten_bbox_targets", "[", "pos_inds", "]", "\n", "pos_centerness_targets", "=", "self", ".", "centerness_target", "(", "pos_bbox_targets", ")", "\n", "pos_points", "=", "flatten_points", "[", "pos_inds", "]", "\n", "pos_decoded_bbox_preds", "=", "distance2bbox", "(", "pos_points", ",", "pos_bbox_preds", ")", "\n", "pos_decoded_target_preds", "=", "distance2bbox", "(", "pos_points", ",", "\n", "pos_bbox_targets", ")", "\n", "# centerness weighted iou loss", "\n", "loss_bbox", "=", "self", ".", "loss_bbox", "(", "\n", "pos_decoded_bbox_preds", ",", "\n", "pos_decoded_target_preds", ",", "\n", "weight", "=", "pos_centerness_targets", ",", "\n", "avg_factor", "=", "pos_centerness_targets", ".", "sum", "(", ")", ")", "\n", "loss_centerness", "=", "self", ".", "loss_centerness", "(", "pos_centerness", ",", "\n", "pos_centerness_targets", ")", "\n", "", "else", ":", "\n", "            ", "loss_bbox", "=", "pos_bbox_preds", ".", "sum", "(", ")", "\n", "loss_centerness", "=", "pos_centerness", ".", "sum", "(", ")", "\n", "\n", "", "return", "dict", "(", "\n", "loss_cls", "=", "loss_cls", ",", "\n", "loss_bbox", "=", "loss_bbox", ",", "\n", "loss_centerness", "=", "loss_centerness", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fcos_head.FCOSHead.get_bboxes": [[210, 243], ["mmdet.core.force_fp32", "len", "fcos_head.FCOSHead.get_points", "range", "len", "len", "len", "fcos_head.FCOSHead.get_bboxes_single", "result_list.append", "featmap.size", "[].detach", "[].detach", "[].detach", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_points", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_bboxes_single"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'cls_scores'", ",", "'bbox_preds'", ",", "'centernesses'", ")", ")", "\n", "def", "get_bboxes", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "centernesses", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "rescale", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "\n", "num_levels", "=", "len", "(", "cls_scores", ")", "\n", "\n", "featmap_sizes", "=", "[", "featmap", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "featmap", "in", "cls_scores", "]", "\n", "mlvl_points", "=", "self", ".", "get_points", "(", "featmap_sizes", ",", "bbox_preds", "[", "0", "]", ".", "dtype", ",", "\n", "bbox_preds", "[", "0", "]", ".", "device", ")", "\n", "result_list", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "len", "(", "img_metas", ")", ")", ":", "\n", "            ", "cls_score_list", "=", "[", "\n", "cls_scores", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "bbox_pred_list", "=", "[", "\n", "bbox_preds", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "centerness_pred_list", "=", "[", "\n", "centernesses", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "img_shape", "=", "img_metas", "[", "img_id", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_metas", "[", "img_id", "]", "[", "'scale_factor'", "]", "\n", "det_bboxes", "=", "self", ".", "get_bboxes_single", "(", "cls_score_list", ",", "bbox_pred_list", ",", "\n", "centerness_pred_list", ",", "\n", "mlvl_points", ",", "img_shape", ",", "\n", "scale_factor", ",", "cfg", ",", "rescale", ")", "\n", "result_list", ".", "append", "(", "det_bboxes", ")", "\n", "", "return", "result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fcos_head.FCOSHead.get_bboxes_single": [[244, 292], ["zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmdet.core.multiclass_nms", "len", "len", "len", "cls_score.permute().reshape().sigmoid", "centerness.permute().reshape().sigmoid.permute().reshape().sigmoid.permute().reshape().sigmoid", "bbox_pred.permute().reshape.permute().reshape.permute().reshape", "cfg.get", "mmdet.core.distance2bbox", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.new_tensor", "torch.cat.new_tensor", "max_scores.topk", "cls_score.size", "bbox_pred.permute().reshape.permute().reshape.size", "cls_score.permute().reshape", "centerness.permute().reshape().sigmoid.permute().reshape().sigmoid.permute().reshape", "bbox_pred.permute().reshape.permute().reshape.permute", "cls_score.permute", "centerness.permute().reshape().sigmoid.permute().reshape().sigmoid.permute"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.bbox_nms.multiclass_nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.distance2bbox"], ["", "def", "get_bboxes_single", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "centernesses", ",", "\n", "mlvl_points", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "==", "len", "(", "mlvl_points", ")", "\n", "mlvl_bboxes", "=", "[", "]", "\n", "mlvl_scores", "=", "[", "]", "\n", "mlvl_centerness", "=", "[", "]", "\n", "for", "cls_score", ",", "bbox_pred", ",", "centerness", ",", "points", "in", "zip", "(", "\n", "cls_scores", ",", "bbox_preds", ",", "centernesses", ",", "mlvl_points", ")", ":", "\n", "            ", "assert", "cls_score", ".", "size", "(", ")", "[", "-", "2", ":", "]", "==", "bbox_pred", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "scores", "=", "cls_score", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "\n", "-", "1", ",", "self", ".", "cls_out_channels", ")", ".", "sigmoid", "(", ")", "\n", "centerness", "=", "centerness", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ")", ".", "sigmoid", "(", ")", "\n", "\n", "bbox_pred", "=", "bbox_pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "nms_pre", "=", "cfg", ".", "get", "(", "'nms_pre'", ",", "-", "1", ")", "\n", "if", "nms_pre", ">", "0", "and", "scores", ".", "shape", "[", "0", "]", ">", "nms_pre", ":", "\n", "                ", "max_scores", ",", "_", "=", "(", "scores", "*", "centerness", "[", ":", ",", "None", "]", ")", ".", "max", "(", "dim", "=", "1", ")", "\n", "_", ",", "topk_inds", "=", "max_scores", ".", "topk", "(", "nms_pre", ")", "\n", "points", "=", "points", "[", "topk_inds", ",", ":", "]", "\n", "bbox_pred", "=", "bbox_pred", "[", "topk_inds", ",", ":", "]", "\n", "scores", "=", "scores", "[", "topk_inds", ",", ":", "]", "\n", "centerness", "=", "centerness", "[", "topk_inds", "]", "\n", "", "bboxes", "=", "distance2bbox", "(", "points", ",", "bbox_pred", ",", "max_shape", "=", "img_shape", ")", "\n", "mlvl_bboxes", ".", "append", "(", "bboxes", ")", "\n", "mlvl_scores", ".", "append", "(", "scores", ")", "\n", "mlvl_centerness", ".", "append", "(", "centerness", ")", "\n", "", "mlvl_bboxes", "=", "torch", ".", "cat", "(", "mlvl_bboxes", ")", "\n", "if", "rescale", ":", "\n", "            ", "mlvl_bboxes", "/=", "mlvl_bboxes", ".", "new_tensor", "(", "scale_factor", ")", "\n", "", "mlvl_scores", "=", "torch", ".", "cat", "(", "mlvl_scores", ")", "\n", "padding", "=", "mlvl_scores", ".", "new_zeros", "(", "mlvl_scores", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "mlvl_scores", "=", "torch", ".", "cat", "(", "[", "padding", ",", "mlvl_scores", "]", ",", "dim", "=", "1", ")", "\n", "mlvl_centerness", "=", "torch", ".", "cat", "(", "mlvl_centerness", ")", "\n", "det_bboxes", ",", "det_labels", "=", "multiclass_nms", "(", "\n", "mlvl_bboxes", ",", "\n", "mlvl_scores", ",", "\n", "cfg", ".", "score_thr", ",", "\n", "cfg", ".", "nms", ",", "\n", "cfg", ".", "max_per_img", ",", "\n", "score_factors", "=", "mlvl_centerness", ")", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fcos_head.FCOSHead.get_points": [[293, 310], ["range", "len", "mlvl_points.append", "fcos_head.FCOSHead.get_points_single"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fcos_head.FCOSHead.get_points_single"], ["", "def", "get_points", "(", "self", ",", "featmap_sizes", ",", "dtype", ",", "device", ")", ":", "\n", "        ", "\"\"\"Get points according to feature map sizes.\n\n        Args:\n            featmap_sizes (list[tuple]): Multi-level feature map sizes.\n            dtype (torch.dtype): Type of points.\n            device (torch.device): Device of points.\n\n        Returns:\n            tuple: points of each image.\n        \"\"\"", "\n", "mlvl_points", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "featmap_sizes", ")", ")", ":", "\n", "            ", "mlvl_points", ".", "append", "(", "\n", "self", ".", "get_points_single", "(", "featmap_sizes", "[", "i", "]", ",", "self", ".", "strides", "[", "i", "]", ",", "\n", "dtype", ",", "device", ")", ")", "\n", "", "return", "mlvl_points", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fcos_head.FCOSHead.get_points_single": [[311, 321], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "x.reshape", "y.reshape"], "methods", ["None"], ["", "def", "get_points_single", "(", "self", ",", "featmap_size", ",", "stride", ",", "dtype", ",", "device", ")", ":", "\n", "        ", "h", ",", "w", "=", "featmap_size", "\n", "x_range", "=", "torch", ".", "arange", "(", "\n", "0", ",", "w", "*", "stride", ",", "stride", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "y_range", "=", "torch", ".", "arange", "(", "\n", "0", ",", "h", "*", "stride", ",", "stride", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "y", ",", "x", "=", "torch", ".", "meshgrid", "(", "y_range", ",", "x_range", ")", "\n", "points", "=", "torch", ".", "stack", "(", "\n", "(", "x", ".", "reshape", "(", "-", "1", ")", ",", "y", ".", "reshape", "(", "-", "1", ")", ")", ",", "dim", "=", "-", "1", ")", "+", "stride", "//", "2", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fcos_head.FCOSHead.fcos_target": [[322, 363], ["len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmdet.core.multi_apply", "range", "len", "len", "[].expand_as", "center.size", "labels.split", "bbox_targets.split", "concat_lvl_labels.append", "concat_lvl_bbox_targets.append", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "points[].new_tensor"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.multi_apply"], ["", "def", "fcos_target", "(", "self", ",", "points", ",", "gt_bboxes_list", ",", "gt_labels_list", ")", ":", "\n", "        ", "assert", "len", "(", "points", ")", "==", "len", "(", "self", ".", "regress_ranges", ")", "\n", "num_levels", "=", "len", "(", "points", ")", "\n", "# expand regress ranges to align with points", "\n", "expanded_regress_ranges", "=", "[", "\n", "points", "[", "i", "]", ".", "new_tensor", "(", "self", ".", "regress_ranges", "[", "i", "]", ")", "[", "None", "]", ".", "expand_as", "(", "\n", "points", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "# concat all levels points and regress ranges", "\n", "concat_regress_ranges", "=", "torch", ".", "cat", "(", "expanded_regress_ranges", ",", "dim", "=", "0", ")", "\n", "concat_points", "=", "torch", ".", "cat", "(", "points", ",", "dim", "=", "0", ")", "\n", "\n", "# the number of points per img, per lvl", "\n", "num_points", "=", "[", "center", ".", "size", "(", "0", ")", "for", "center", "in", "points", "]", "\n", "\n", "# get labels and bbox_targets of each image", "\n", "labels_list", ",", "bbox_targets_list", "=", "multi_apply", "(", "\n", "self", ".", "fcos_target_single", ",", "\n", "gt_bboxes_list", ",", "\n", "gt_labels_list", ",", "\n", "points", "=", "concat_points", ",", "\n", "regress_ranges", "=", "concat_regress_ranges", ",", "\n", "num_points_per_lvl", "=", "num_points", ")", "\n", "\n", "# split to per img, per level", "\n", "labels_list", "=", "[", "labels", ".", "split", "(", "num_points", ",", "0", ")", "for", "labels", "in", "labels_list", "]", "\n", "bbox_targets_list", "=", "[", "\n", "bbox_targets", ".", "split", "(", "num_points", ",", "0", ")", "\n", "for", "bbox_targets", "in", "bbox_targets_list", "\n", "]", "\n", "\n", "# concat per level image", "\n", "concat_lvl_labels", "=", "[", "]", "\n", "concat_lvl_bbox_targets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "concat_lvl_labels", ".", "append", "(", "\n", "torch", ".", "cat", "(", "[", "labels", "[", "i", "]", "for", "labels", "in", "labels_list", "]", ")", ")", "\n", "concat_lvl_bbox_targets", ".", "append", "(", "\n", "torch", ".", "cat", "(", "\n", "[", "bbox_targets", "[", "i", "]", "for", "bbox_targets", "in", "bbox_targets_list", "]", ")", ")", "\n", "", "return", "concat_lvl_labels", ",", "concat_lvl_bbox_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fcos_head.FCOSHead.fcos_target_single": [[364, 446], ["points.size", "gt_labels.size", "areas[].repeat", "regress_ranges[].expand", "gt_bboxes[].expand", "xs[].expand", "ys[].expand", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "areas[].repeat.min", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "center_xs.new_zeros", "enumerate", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.max", "torch.stack.max", "gt_labels.new_zeros", "gt_bboxes[].expand.new_zeros", "torch.stack.min", "torch.stack.min", "torch.stack.min", "torch.stack.min", "range"], "methods", ["None"], ["", "def", "fcos_target_single", "(", "self", ",", "gt_bboxes", ",", "gt_labels", ",", "points", ",", "regress_ranges", ",", "\n", "num_points_per_lvl", ")", ":", "\n", "        ", "num_points", "=", "points", ".", "size", "(", "0", ")", "\n", "num_gts", "=", "gt_labels", ".", "size", "(", "0", ")", "\n", "if", "num_gts", "==", "0", ":", "\n", "            ", "return", "gt_labels", ".", "new_zeros", "(", "num_points", ")", ",", "gt_bboxes", ".", "new_zeros", "(", "(", "num_points", ",", "4", ")", ")", "\n", "\n", "", "areas", "=", "(", "gt_bboxes", "[", ":", ",", "2", "]", "-", "gt_bboxes", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "gt_bboxes", "[", ":", ",", "3", "]", "-", "gt_bboxes", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "# TODO: figure out why these two are different", "\n", "# areas = areas[None].expand(num_points, num_gts)", "\n", "areas", "=", "areas", "[", "None", "]", ".", "repeat", "(", "num_points", ",", "1", ")", "\n", "regress_ranges", "=", "regress_ranges", "[", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "\n", "num_points", ",", "num_gts", ",", "2", ")", "\n", "gt_bboxes", "=", "gt_bboxes", "[", "None", "]", ".", "expand", "(", "num_points", ",", "num_gts", ",", "4", ")", "\n", "xs", ",", "ys", "=", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", "\n", "xs", "=", "xs", "[", ":", ",", "None", "]", ".", "expand", "(", "num_points", ",", "num_gts", ")", "\n", "ys", "=", "ys", "[", ":", ",", "None", "]", ".", "expand", "(", "num_points", ",", "num_gts", ")", "\n", "\n", "left", "=", "xs", "-", "gt_bboxes", "[", "...", ",", "0", "]", "\n", "right", "=", "gt_bboxes", "[", "...", ",", "2", "]", "-", "xs", "\n", "top", "=", "ys", "-", "gt_bboxes", "[", "...", ",", "1", "]", "\n", "bottom", "=", "gt_bboxes", "[", "...", ",", "3", "]", "-", "ys", "\n", "bbox_targets", "=", "torch", ".", "stack", "(", "(", "left", ",", "top", ",", "right", ",", "bottom", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "center_sampling", ":", "\n", "# condition1: inside a `center bbox`", "\n", "            ", "radius", "=", "self", ".", "center_sample_radius", "\n", "center_xs", "=", "(", "gt_bboxes", "[", "...", ",", "0", "]", "+", "gt_bboxes", "[", "...", ",", "2", "]", ")", "/", "2", "\n", "center_ys", "=", "(", "gt_bboxes", "[", "...", ",", "1", "]", "+", "gt_bboxes", "[", "...", ",", "3", "]", ")", "/", "2", "\n", "center_gts", "=", "torch", ".", "zeros_like", "(", "gt_bboxes", ")", "\n", "stride", "=", "center_xs", ".", "new_zeros", "(", "center_xs", ".", "shape", ")", "\n", "\n", "# project the points on current lvl back to the `original` sizes", "\n", "lvl_begin", "=", "0", "\n", "for", "lvl_idx", ",", "num_points_lvl", "in", "enumerate", "(", "num_points_per_lvl", ")", ":", "\n", "                ", "lvl_end", "=", "lvl_begin", "+", "num_points_lvl", "\n", "stride", "[", "lvl_begin", ":", "lvl_end", "]", "=", "self", ".", "strides", "[", "lvl_idx", "]", "*", "radius", "\n", "lvl_begin", "=", "lvl_end", "\n", "\n", "", "x_mins", "=", "center_xs", "-", "stride", "\n", "y_mins", "=", "center_ys", "-", "stride", "\n", "x_maxs", "=", "center_xs", "+", "stride", "\n", "y_maxs", "=", "center_ys", "+", "stride", "\n", "center_gts", "[", "...", ",", "0", "]", "=", "torch", ".", "where", "(", "x_mins", ">", "gt_bboxes", "[", "...", ",", "0", "]", ",", "\n", "x_mins", ",", "gt_bboxes", "[", "...", ",", "0", "]", ")", "\n", "center_gts", "[", "...", ",", "1", "]", "=", "torch", ".", "where", "(", "y_mins", ">", "gt_bboxes", "[", "...", ",", "1", "]", ",", "\n", "y_mins", ",", "gt_bboxes", "[", "...", ",", "1", "]", ")", "\n", "center_gts", "[", "...", ",", "2", "]", "=", "torch", ".", "where", "(", "x_maxs", ">", "gt_bboxes", "[", "...", ",", "2", "]", ",", "\n", "gt_bboxes", "[", "...", ",", "2", "]", ",", "x_maxs", ")", "\n", "center_gts", "[", "...", ",", "3", "]", "=", "torch", ".", "where", "(", "y_maxs", ">", "gt_bboxes", "[", "...", ",", "3", "]", ",", "\n", "gt_bboxes", "[", "...", ",", "3", "]", ",", "y_maxs", ")", "\n", "\n", "cb_dist_left", "=", "xs", "-", "center_gts", "[", "...", ",", "0", "]", "\n", "cb_dist_right", "=", "center_gts", "[", "...", ",", "2", "]", "-", "xs", "\n", "cb_dist_top", "=", "ys", "-", "center_gts", "[", "...", ",", "1", "]", "\n", "cb_dist_bottom", "=", "center_gts", "[", "...", ",", "3", "]", "-", "ys", "\n", "center_bbox", "=", "torch", ".", "stack", "(", "\n", "(", "cb_dist_left", ",", "cb_dist_top", ",", "cb_dist_right", ",", "cb_dist_bottom", ")", ",", "-", "1", ")", "\n", "inside_gt_bbox_mask", "=", "center_bbox", ".", "min", "(", "-", "1", ")", "[", "0", "]", ">", "0", "\n", "", "else", ":", "\n", "# condition1: inside a gt bbox", "\n", "            ", "inside_gt_bbox_mask", "=", "bbox_targets", ".", "min", "(", "-", "1", ")", "[", "0", "]", ">", "0", "\n", "\n", "# condition2: limit the regression range for each location", "\n", "", "max_regress_distance", "=", "bbox_targets", ".", "max", "(", "-", "1", ")", "[", "0", "]", "\n", "inside_regress_range", "=", "(", "\n", "max_regress_distance", ">=", "regress_ranges", "[", "...", ",", "0", "]", ")", "&", "(", "\n", "max_regress_distance", "<=", "regress_ranges", "[", "...", ",", "1", "]", ")", "\n", "\n", "# if there are still more than one objects for a location,", "\n", "# we choose the one with minimal area", "\n", "areas", "[", "inside_gt_bbox_mask", "==", "0", "]", "=", "INF", "\n", "areas", "[", "inside_regress_range", "==", "0", "]", "=", "INF", "\n", "min_area", ",", "min_area_inds", "=", "areas", ".", "min", "(", "dim", "=", "1", ")", "\n", "\n", "labels", "=", "gt_labels", "[", "min_area_inds", "]", "\n", "labels", "[", "min_area", "==", "INF", "]", "=", "0", "\n", "bbox_targets", "=", "bbox_targets", "[", "range", "(", "num_points", ")", ",", "min_area_inds", "]", "\n", "\n", "return", "labels", ",", "bbox_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.fcos_head.FCOSHead.centerness_target": [[447, 455], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "left_right.min", "left_right.max", "top_bottom.min", "top_bottom.max"], "methods", ["None"], ["", "def", "centerness_target", "(", "self", ",", "pos_bbox_targets", ")", ":", "\n", "# only calculate pos centerness targets, otherwise there may be nan", "\n", "        ", "left_right", "=", "pos_bbox_targets", "[", ":", ",", "[", "0", ",", "2", "]", "]", "\n", "top_bottom", "=", "pos_bbox_targets", "[", ":", ",", "[", "1", ",", "3", "]", "]", "\n", "centerness_targets", "=", "(", "\n", "left_right", ".", "min", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "/", "left_right", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ")", "*", "(", "\n", "top_bottom", ".", "min", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "/", "top_bottom", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ")", "\n", "return", "torch", ".", "sqrt", "(", "centerness_targets", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.ATSSHead.__init__": [[37, 63], ["dict", "dict", "numpy.array", "anchor_head.AnchorHead.__init__", "builder.build_loss", "range"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss"], ["def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "in_channels", ",", "\n", "stacked_convs", "=", "4", ",", "\n", "octave_base_scale", "=", "4", ",", "\n", "scales_per_octave", "=", "1", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'GN'", ",", "num_groups", "=", "32", ",", "requires_grad", "=", "True", ")", ",", "\n", "loss_centerness", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "loss_weight", "=", "1.0", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "stacked_convs", "=", "stacked_convs", "\n", "self", ".", "octave_base_scale", "=", "octave_base_scale", "\n", "self", ".", "scales_per_octave", "=", "scales_per_octave", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "\n", "octave_scales", "=", "np", ".", "array", "(", "\n", "[", "2", "**", "(", "i", "/", "scales_per_octave", ")", "for", "i", "in", "range", "(", "scales_per_octave", ")", "]", ")", "\n", "anchor_scales", "=", "octave_scales", "*", "octave_base_scale", "\n", "super", "(", "ATSSHead", ",", "self", ")", ".", "__init__", "(", "\n", "num_classes", ",", "in_channels", ",", "anchor_scales", "=", "anchor_scales", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "loss_centerness", "=", "build_loss", "(", "loss_centerness", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.ATSSHead._init_layers": [[64, 98], ["torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "atss_head.ATSSHead.cls_convs.append", "atss_head.ATSSHead.reg_convs.append", "mmdet.ops.ConvModule", "mmdet.ops.ConvModule", "mmdet.ops.Scale"], "methods", ["None"], ["", "def", "_init_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "cls_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "reg_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "stacked_convs", ")", ":", "\n", "            ", "chn", "=", "self", ".", "in_channels", "if", "i", "==", "0", "else", "self", ".", "feat_channels", "\n", "self", ".", "cls_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "self", ".", "reg_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "", "self", ".", "atss_cls", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "feat_channels", ",", "\n", "self", ".", "num_anchors", "*", "self", ".", "cls_out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "atss_reg", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "feat_channels", ",", "self", ".", "num_anchors", "*", "4", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "atss_centerness", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "feat_channels", ",", "self", ".", "num_anchors", "*", "1", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "scales", "=", "nn", ".", "ModuleList", "(", "[", "Scale", "(", "1.0", ")", "for", "_", "in", "self", ".", "anchor_strides", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.ATSSHead.init_weights": [[99, 108], ["utils.bias_init_with_prob", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.weight_init.bias_init_with_prob"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "cls_convs", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "for", "m", "in", "self", ".", "reg_convs", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "bias_cls", "=", "bias_init_with_prob", "(", "0.01", ")", "\n", "normal_init", "(", "self", ".", "atss_cls", ",", "std", "=", "0.01", ",", "bias", "=", "bias_cls", ")", "\n", "normal_init", "(", "self", ".", "atss_reg", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "atss_centerness", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.ATSSHead.forward": [[109, 111], ["mmdet.core.multi_apply"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.multi_apply"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "return", "multi_apply", "(", "self", ".", "forward_single", ",", "feats", ",", "self", ".", "scales", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.ATSSHead.forward_single": [[112, 124], ["atss_head.ATSSHead.atss_cls", "scale().float", "atss_head.ATSSHead.atss_centerness", "cls_conv", "reg_conv", "scale", "atss_head.ATSSHead.atss_reg"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ",", "scale", ")", ":", "\n", "        ", "cls_feat", "=", "x", "\n", "reg_feat", "=", "x", "\n", "for", "cls_conv", "in", "self", ".", "cls_convs", ":", "\n", "            ", "cls_feat", "=", "cls_conv", "(", "cls_feat", ")", "\n", "", "for", "reg_conv", "in", "self", ".", "reg_convs", ":", "\n", "            ", "reg_feat", "=", "reg_conv", "(", "reg_feat", ")", "\n", "", "cls_score", "=", "self", ".", "atss_cls", "(", "cls_feat", ")", "\n", "# we just follow atss, not apply exp in bbox_pred", "\n", "bbox_pred", "=", "scale", "(", "self", ".", "atss_reg", "(", "reg_feat", ")", ")", ".", "float", "(", ")", "\n", "centerness", "=", "self", ".", "atss_centerness", "(", "reg_feat", ")", "\n", "return", "cls_score", ",", "bbox_pred", ",", "centerness", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.ATSSHead.loss_single": [[125, 177], ["anchors.reshape.reshape.reshape", "cls_score.permute().reshape.permute().reshape.permute().reshape", "bbox_pred.permute().reshape.permute().reshape.permute().reshape", "centerness.permute().reshape.permute().reshape.permute().reshape", "bbox_targets.reshape.reshape.reshape", "labels.reshape.reshape.reshape", "label_weights.reshape.reshape.reshape", "atss_head.ATSSHead.loss_cls", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "len", "atss_head.ATSSHead.centerness_target", "mmdet.core.delta2bbox", "mmdet.core.delta2bbox", "atss_head.ATSSHead.loss_bbox", "atss_head.ATSSHead.loss_centerness", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda.sum", "torch.tensor().cuda.sum", "torch.tensor().cuda.sum", "cls_score.permute().reshape.permute().reshape.permute", "bbox_pred.permute().reshape.permute().reshape.permute", "centerness.permute().reshape.permute().reshape.permute", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "bbox_pred.permute().reshape.permute().reshape.sum", "centerness.permute().reshape.permute().reshape.sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.ATSSHead.centerness_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.delta2bbox", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.delta2bbox"], ["", "def", "loss_single", "(", "self", ",", "anchors", ",", "cls_score", ",", "bbox_pred", ",", "centerness", ",", "labels", ",", "\n", "label_weights", ",", "bbox_targets", ",", "num_total_samples", ",", "cfg", ")", ":", "\n", "\n", "        ", "anchors", "=", "anchors", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "cls_score", "=", "cls_score", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "\n", "1", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "cls_out_channels", ")", "\n", "bbox_pred", "=", "bbox_pred", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "centerness", "=", "centerness", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "bbox_targets", "=", "bbox_targets", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "labels", "=", "labels", ".", "reshape", "(", "-", "1", ")", "\n", "label_weights", "=", "label_weights", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "# classification loss", "\n", "loss_cls", "=", "self", ".", "loss_cls", "(", "\n", "cls_score", ",", "labels", ",", "label_weights", ",", "avg_factor", "=", "num_total_samples", ")", "\n", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "labels", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "if", "len", "(", "pos_inds", ")", ">", "0", ":", "\n", "            ", "pos_bbox_targets", "=", "bbox_targets", "[", "pos_inds", "]", "\n", "pos_bbox_pred", "=", "bbox_pred", "[", "pos_inds", "]", "\n", "pos_anchors", "=", "anchors", "[", "pos_inds", "]", "\n", "pos_centerness", "=", "centerness", "[", "pos_inds", "]", "\n", "\n", "centerness_targets", "=", "self", ".", "centerness_target", "(", "\n", "pos_anchors", ",", "pos_bbox_targets", ")", "\n", "pos_decode_bbox_pred", "=", "delta2bbox", "(", "pos_anchors", ",", "pos_bbox_pred", ",", "\n", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ")", "\n", "pos_decode_bbox_targets", "=", "delta2bbox", "(", "pos_anchors", ",", "pos_bbox_targets", ",", "\n", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ")", "\n", "\n", "# regression loss", "\n", "loss_bbox", "=", "self", ".", "loss_bbox", "(", "\n", "pos_decode_bbox_pred", ",", "\n", "pos_decode_bbox_targets", ",", "\n", "weight", "=", "centerness_targets", ",", "\n", "avg_factor", "=", "1.0", ")", "\n", "\n", "# centerness loss", "\n", "loss_centerness", "=", "self", ".", "loss_centerness", "(", "\n", "pos_centerness", ",", "\n", "centerness_targets", ",", "\n", "avg_factor", "=", "num_total_samples", ")", "\n", "\n", "", "else", ":", "\n", "            ", "loss_bbox", "=", "bbox_pred", ".", "sum", "(", ")", "*", "0", "\n", "loss_centerness", "=", "centerness", ".", "sum", "(", ")", "*", "0", "\n", "centerness_targets", "=", "torch", ".", "tensor", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "", "return", "loss_cls", ",", "loss_bbox", ",", "loss_centerness", ",", "centerness_targets", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.ATSSHead.loss": [[178, 236], ["mmdet.core.force_fp32", "atss_head.ATSSHead.get_anchors", "atss_head.ATSSHead.atss_target", "reduce_mean().item", "max", "mmdet.core.multi_apply", "sum", "reduce_mean().item", "list", "dict", "len", "len", "map", "featmap.size", "atss_head.reduce_mean", "atss_head.reduce_mean", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.anchor_head.AnchorHead.get_anchors", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.ATSSHead.atss_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.multi_apply", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.reduce_mean", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.reduce_mean"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'cls_scores'", ",", "'bbox_preds'", ",", "'centernesses'", ")", ")", "\n", "def", "loss", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "centernesses", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "\n", "        ", "featmap_sizes", "=", "[", "featmap", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "featmap", "in", "cls_scores", "]", "\n", "assert", "len", "(", "featmap_sizes", ")", "==", "len", "(", "self", ".", "anchor_generators", ")", "\n", "\n", "device", "=", "cls_scores", "[", "0", "]", ".", "device", "\n", "anchor_list", ",", "valid_flag_list", "=", "self", ".", "get_anchors", "(", "\n", "featmap_sizes", ",", "img_metas", ",", "device", "=", "device", ")", "\n", "label_channels", "=", "self", ".", "cls_out_channels", "if", "self", ".", "use_sigmoid_cls", "else", "1", "\n", "\n", "cls_reg_targets", "=", "self", ".", "atss_target", "(", "\n", "anchor_list", ",", "\n", "valid_flag_list", ",", "\n", "gt_bboxes", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore_list", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels_list", "=", "gt_labels", ",", "\n", "label_channels", "=", "label_channels", ")", "\n", "if", "cls_reg_targets", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "(", "anchor_list", ",", "labels_list", ",", "label_weights_list", ",", "bbox_targets_list", ",", "\n", "bbox_weights_list", ",", "num_total_pos", ",", "num_total_neg", ")", "=", "cls_reg_targets", "\n", "\n", "num_total_samples", "=", "reduce_mean", "(", "\n", "torch", ".", "tensor", "(", "num_total_pos", ")", ".", "cuda", "(", ")", ")", ".", "item", "(", ")", "\n", "num_total_samples", "=", "max", "(", "num_total_samples", ",", "1.0", ")", "\n", "\n", "losses_cls", ",", "losses_bbox", ",", "loss_centerness", ",", "bbox_avg_factor", "=", "multi_apply", "(", "\n", "self", ".", "loss_single", ",", "\n", "anchor_list", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "centernesses", ",", "\n", "labels_list", ",", "\n", "label_weights_list", ",", "\n", "bbox_targets_list", ",", "\n", "num_total_samples", "=", "num_total_samples", ",", "\n", "cfg", "=", "cfg", ")", "\n", "\n", "bbox_avg_factor", "=", "sum", "(", "bbox_avg_factor", ")", "\n", "bbox_avg_factor", "=", "reduce_mean", "(", "bbox_avg_factor", ")", ".", "item", "(", ")", "\n", "losses_bbox", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "/", "bbox_avg_factor", ",", "losses_bbox", ")", ")", "\n", "return", "dict", "(", "\n", "loss_cls", "=", "losses_cls", ",", "\n", "loss_bbox", "=", "losses_bbox", ",", "\n", "loss_centerness", "=", "loss_centerness", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.ATSSHead.centerness_target": [[237, 255], ["mmdet.core.delta2bbox", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.stack.min", "torch.stack.min", "torch.stack.min", "torch.stack.max", "torch.stack.max", "torch.stack.max", "torch.stack.min", "torch.stack.min", "torch.stack.min", "torch.stack.max", "torch.stack.max", "torch.stack.max"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.delta2bbox"], ["", "def", "centerness_target", "(", "self", ",", "anchors", ",", "bbox_targets", ")", ":", "\n", "# only calculate pos centerness targets, otherwise there may be nan", "\n", "        ", "gts", "=", "delta2bbox", "(", "anchors", ",", "bbox_targets", ",", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ")", "\n", "anchors_cx", "=", "(", "anchors", "[", ":", ",", "2", "]", "+", "anchors", "[", ":", ",", "0", "]", ")", "/", "2", "\n", "anchors_cy", "=", "(", "anchors", "[", ":", ",", "3", "]", "+", "anchors", "[", ":", ",", "1", "]", ")", "/", "2", "\n", "l_", "=", "anchors_cx", "-", "gts", "[", ":", ",", "0", "]", "\n", "t_", "=", "anchors_cy", "-", "gts", "[", ":", ",", "1", "]", "\n", "r_", "=", "gts", "[", ":", ",", "2", "]", "-", "anchors_cx", "\n", "b_", "=", "gts", "[", ":", ",", "3", "]", "-", "anchors_cy", "\n", "\n", "left_right", "=", "torch", ".", "stack", "(", "[", "l_", ",", "r_", "]", ",", "dim", "=", "1", ")", "\n", "top_bottom", "=", "torch", ".", "stack", "(", "[", "t_", ",", "b_", "]", ",", "dim", "=", "1", ")", "\n", "centerness", "=", "torch", ".", "sqrt", "(", "\n", "(", "left_right", ".", "min", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "/", "left_right", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ")", "*", "\n", "(", "top_bottom", ".", "min", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "/", "top_bottom", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ")", ")", "\n", "assert", "not", "torch", ".", "isnan", "(", "centerness", ")", ".", "any", "(", ")", "\n", "return", "centerness", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.ATSSHead.get_bboxes": [[256, 294], ["mmdet.core.force_fp32", "len", "range", "len", "len", "atss_head.ATSSHead.anchor_generators[].grid_anchors", "len", "atss_head.ATSSHead.get_bboxes_single", "result_list.append", "range", "[].detach", "[].detach", "[].detach", "cls_scores[].size", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_generator.AnchorGenerator.grid_anchors", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_bboxes_single"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'cls_scores'", ",", "'bbox_preds'", ",", "'centernesses'", ")", ")", "\n", "def", "get_bboxes", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "centernesses", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "\n", "num_levels", "=", "len", "(", "cls_scores", ")", "\n", "device", "=", "cls_scores", "[", "0", "]", ".", "device", "\n", "mlvl_anchors", "=", "[", "\n", "self", ".", "anchor_generators", "[", "i", "]", ".", "grid_anchors", "(", "\n", "cls_scores", "[", "i", "]", ".", "size", "(", ")", "[", "-", "2", ":", "]", ",", "\n", "self", ".", "anchor_strides", "[", "i", "]", ",", "\n", "device", "=", "device", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "\n", "result_list", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "len", "(", "img_metas", ")", ")", ":", "\n", "            ", "cls_score_list", "=", "[", "\n", "cls_scores", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "bbox_pred_list", "=", "[", "\n", "bbox_preds", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "centerness_pred_list", "=", "[", "\n", "centernesses", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "img_shape", "=", "img_metas", "[", "img_id", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_metas", "[", "img_id", "]", "[", "'scale_factor'", "]", "\n", "proposals", "=", "self", ".", "get_bboxes_single", "(", "cls_score_list", ",", "bbox_pred_list", ",", "\n", "centerness_pred_list", ",", "\n", "mlvl_anchors", ",", "img_shape", ",", "\n", "scale_factor", ",", "cfg", ",", "rescale", ")", "\n", "result_list", ".", "append", "(", "proposals", ")", "\n", "", "return", "result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.ATSSHead.get_bboxes_single": [[295, 349], ["zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmdet.core.multiclass_nms", "len", "len", "len", "cls_score.permute().reshape().sigmoid", "bbox_pred.permute().reshape.permute().reshape.permute().reshape", "centerness.permute().reshape().sigmoid.permute().reshape().sigmoid.permute().reshape().sigmoid", "cfg.get", "mmdet.core.delta2bbox", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_tensor", "max_scores.topk", "cls_score.size", "bbox_pred.permute().reshape.permute().reshape.size", "cls_score.permute().reshape", "bbox_pred.permute().reshape.permute().reshape.permute", "centerness.permute().reshape().sigmoid.permute().reshape().sigmoid.permute().reshape", "cls_score.permute", "centerness.permute().reshape().sigmoid.permute().reshape().sigmoid.permute"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.bbox_nms.multiclass_nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.delta2bbox"], ["", "def", "get_bboxes_single", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "centernesses", ",", "\n", "mlvl_anchors", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "==", "len", "(", "mlvl_anchors", ")", "\n", "mlvl_bboxes", "=", "[", "]", "\n", "mlvl_scores", "=", "[", "]", "\n", "mlvl_centerness", "=", "[", "]", "\n", "for", "cls_score", ",", "bbox_pred", ",", "centerness", ",", "anchors", "in", "zip", "(", "\n", "cls_scores", ",", "bbox_preds", ",", "centernesses", ",", "mlvl_anchors", ")", ":", "\n", "            ", "assert", "cls_score", ".", "size", "(", ")", "[", "-", "2", ":", "]", "==", "bbox_pred", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "\n", "scores", "=", "cls_score", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "\n", "-", "1", ",", "self", ".", "cls_out_channels", ")", ".", "sigmoid", "(", ")", "\n", "bbox_pred", "=", "bbox_pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "centerness", "=", "centerness", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ")", ".", "sigmoid", "(", ")", "\n", "\n", "nms_pre", "=", "cfg", ".", "get", "(", "'nms_pre'", ",", "-", "1", ")", "\n", "if", "nms_pre", ">", "0", "and", "scores", ".", "shape", "[", "0", "]", ">", "nms_pre", ":", "\n", "                ", "max_scores", ",", "_", "=", "(", "scores", "*", "centerness", "[", ":", ",", "None", "]", ")", ".", "max", "(", "dim", "=", "1", ")", "\n", "_", ",", "topk_inds", "=", "max_scores", ".", "topk", "(", "nms_pre", ")", "\n", "anchors", "=", "anchors", "[", "topk_inds", ",", ":", "]", "\n", "bbox_pred", "=", "bbox_pred", "[", "topk_inds", ",", ":", "]", "\n", "scores", "=", "scores", "[", "topk_inds", ",", ":", "]", "\n", "centerness", "=", "centerness", "[", "topk_inds", "]", "\n", "\n", "", "bboxes", "=", "delta2bbox", "(", "anchors", ",", "bbox_pred", ",", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "img_shape", ")", "\n", "mlvl_bboxes", ".", "append", "(", "bboxes", ")", "\n", "mlvl_scores", ".", "append", "(", "scores", ")", "\n", "mlvl_centerness", ".", "append", "(", "centerness", ")", "\n", "\n", "", "mlvl_bboxes", "=", "torch", ".", "cat", "(", "mlvl_bboxes", ")", "\n", "if", "rescale", ":", "\n", "            ", "mlvl_bboxes", "/=", "mlvl_bboxes", ".", "new_tensor", "(", "scale_factor", ")", "\n", "\n", "", "mlvl_scores", "=", "torch", ".", "cat", "(", "mlvl_scores", ")", "\n", "padding", "=", "mlvl_scores", ".", "new_zeros", "(", "mlvl_scores", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "mlvl_scores", "=", "torch", ".", "cat", "(", "[", "padding", ",", "mlvl_scores", "]", ",", "dim", "=", "1", ")", "\n", "mlvl_centerness", "=", "torch", ".", "cat", "(", "mlvl_centerness", ")", "\n", "\n", "det_bboxes", ",", "det_labels", "=", "multiclass_nms", "(", "\n", "mlvl_bboxes", ",", "\n", "mlvl_scores", ",", "\n", "cfg", ".", "score_thr", ",", "\n", "cfg", ".", "nms", ",", "\n", "cfg", ".", "max_per_img", ",", "\n", "score_factors", "=", "mlvl_centerness", ")", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.ATSSHead.atss_target": [[350, 413], ["len", "range", "mmdet.core.multi_apply", "any", "sum", "sum", "mmdet.core.images_to_levels", "mmdet.core.images_to_levels", "mmdet.core.images_to_levels", "mmdet.core.images_to_levels", "mmdet.core.images_to_levels", "len", "len", "anchors.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len", "max", "max", "range", "range", "inds.numel", "inds.numel"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.multi_apply", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.images_to_levels", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.images_to_levels", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.images_to_levels", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.images_to_levels", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.images_to_levels"], ["", "def", "atss_target", "(", "self", ",", "\n", "anchor_list", ",", "\n", "valid_flag_list", ",", "\n", "gt_bboxes_list", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore_list", "=", "None", ",", "\n", "gt_labels_list", "=", "None", ",", "\n", "label_channels", "=", "1", ",", "\n", "unmap_outputs", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        almost the same with anchor_target, with a little modification,\n        here we need return the anchor\n        \"\"\"", "\n", "num_imgs", "=", "len", "(", "img_metas", ")", "\n", "assert", "len", "(", "anchor_list", ")", "==", "len", "(", "valid_flag_list", ")", "==", "num_imgs", "\n", "\n", "# anchor number of multi levels", "\n", "num_level_anchors", "=", "[", "anchors", ".", "size", "(", "0", ")", "for", "anchors", "in", "anchor_list", "[", "0", "]", "]", "\n", "num_level_anchors_list", "=", "[", "num_level_anchors", "]", "*", "num_imgs", "\n", "\n", "# concat all level anchors and flags to a single tensor", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "            ", "assert", "len", "(", "anchor_list", "[", "i", "]", ")", "==", "len", "(", "valid_flag_list", "[", "i", "]", ")", "\n", "anchor_list", "[", "i", "]", "=", "torch", ".", "cat", "(", "anchor_list", "[", "i", "]", ")", "\n", "valid_flag_list", "[", "i", "]", "=", "torch", ".", "cat", "(", "valid_flag_list", "[", "i", "]", ")", "\n", "\n", "# compute targets for each image", "\n", "", "if", "gt_bboxes_ignore_list", "is", "None", ":", "\n", "            ", "gt_bboxes_ignore_list", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "", "if", "gt_labels_list", "is", "None", ":", "\n", "            ", "gt_labels_list", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "", "(", "all_anchors", ",", "all_labels", ",", "all_label_weights", ",", "all_bbox_targets", ",", "\n", "all_bbox_weights", ",", "pos_inds_list", ",", "neg_inds_list", ")", "=", "multi_apply", "(", "\n", "self", ".", "atss_target_single", ",", "\n", "anchor_list", ",", "\n", "valid_flag_list", ",", "\n", "num_level_anchors_list", ",", "\n", "gt_bboxes_list", ",", "\n", "gt_bboxes_ignore_list", ",", "\n", "gt_labels_list", ",", "\n", "img_metas", ",", "\n", "cfg", "=", "cfg", ",", "\n", "label_channels", "=", "label_channels", ",", "\n", "unmap_outputs", "=", "unmap_outputs", ")", "\n", "# no valid anchors", "\n", "if", "any", "(", "[", "labels", "is", "None", "for", "labels", "in", "all_labels", "]", ")", ":", "\n", "            ", "return", "None", "\n", "# sampled anchors of all images", "\n", "", "num_total_pos", "=", "sum", "(", "[", "max", "(", "inds", ".", "numel", "(", ")", ",", "1", ")", "for", "inds", "in", "pos_inds_list", "]", ")", "\n", "num_total_neg", "=", "sum", "(", "[", "max", "(", "inds", ".", "numel", "(", ")", ",", "1", ")", "for", "inds", "in", "neg_inds_list", "]", ")", "\n", "# split targets to a list w.r.t. multiple levels", "\n", "anchors_list", "=", "images_to_levels", "(", "all_anchors", ",", "num_level_anchors", ")", "\n", "labels_list", "=", "images_to_levels", "(", "all_labels", ",", "num_level_anchors", ")", "\n", "label_weights_list", "=", "images_to_levels", "(", "all_label_weights", ",", "\n", "num_level_anchors", ")", "\n", "bbox_targets_list", "=", "images_to_levels", "(", "all_bbox_targets", ",", "\n", "num_level_anchors", ")", "\n", "bbox_weights_list", "=", "images_to_levels", "(", "all_bbox_weights", ",", "\n", "num_level_anchors", ")", "\n", "return", "(", "anchors_list", ",", "labels_list", ",", "label_weights_list", ",", "\n", "bbox_targets_list", ",", "bbox_weights_list", ",", "num_total_pos", ",", "\n", "num_total_neg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.ATSSHead.atss_target_single": [[414, 483], ["mmdet.core.anchor_inside_flags", "atss_head.ATSSHead.get_num_level_anchors_inside", "mmdet.core.build_assigner", "mmdet.core.build_assigner.assign", "mmdet.core.PseudoSampler", "mmdet.core.PseudoSampler.sample", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "mmdet.core.unmap.new_zeros", "mmdet.core.unmap.new_zeros", "inside_flags.type.type.any", "len", "mmdet.core.bbox2delta", "len", "inside_flags.type.type.type", "flat_anchors.size", "mmdet.core.unmap", "mmdet.core.unmap", "mmdet.core.unmap", "mmdet.core.unmap", "mmdet.core.unmap", "inside_flags.type.type.type"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_target.anchor_inside_flags", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.ATSSHead.get_num_level_anchors_inside", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2delta", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.unmap", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.unmap", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.unmap", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.unmap", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.unmap"], ["", "def", "atss_target_single", "(", "self", ",", "\n", "flat_anchors", ",", "\n", "valid_flags", ",", "\n", "num_level_anchors", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", ",", "\n", "gt_labels", ",", "\n", "img_meta", ",", "\n", "cfg", ",", "\n", "label_channels", "=", "1", ",", "\n", "unmap_outputs", "=", "True", ")", ":", "\n", "        ", "inside_flags", "=", "anchor_inside_flags", "(", "flat_anchors", ",", "valid_flags", ",", "\n", "img_meta", "[", "'img_shape'", "]", "[", ":", "2", "]", ",", "\n", "cfg", ".", "allowed_border", ")", "\n", "if", "not", "inside_flags", ".", "any", "(", ")", ":", "\n", "            ", "return", "(", "None", ",", ")", "*", "6", "\n", "# assign gt and sample anchors", "\n", "", "anchors", "=", "flat_anchors", "[", "inside_flags", ".", "type", "(", "torch", ".", "bool", ")", ",", ":", "]", "\n", "\n", "num_level_anchors_inside", "=", "self", ".", "get_num_level_anchors_inside", "(", "\n", "num_level_anchors", ",", "inside_flags", ")", "\n", "bbox_assigner", "=", "build_assigner", "(", "cfg", ".", "assigner", ")", "\n", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "anchors", ",", "num_level_anchors_inside", ",", "\n", "gt_bboxes", ",", "gt_bboxes_ignore", ",", "\n", "gt_labels", ")", "\n", "\n", "bbox_sampler", "=", "PseudoSampler", "(", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "assign_result", ",", "anchors", ",", "\n", "gt_bboxes", ")", "\n", "\n", "num_valid_anchors", "=", "anchors", ".", "shape", "[", "0", "]", "\n", "bbox_targets", "=", "torch", ".", "zeros_like", "(", "anchors", ")", "\n", "bbox_weights", "=", "torch", ".", "zeros_like", "(", "anchors", ")", "\n", "labels", "=", "anchors", ".", "new_zeros", "(", "num_valid_anchors", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "label_weights", "=", "anchors", ".", "new_zeros", "(", "num_valid_anchors", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "pos_inds", "=", "sampling_result", ".", "pos_inds", "\n", "neg_inds", "=", "sampling_result", ".", "neg_inds", "\n", "if", "len", "(", "pos_inds", ")", ">", "0", ":", "\n", "            ", "pos_bbox_targets", "=", "bbox2delta", "(", "sampling_result", ".", "pos_bboxes", ",", "\n", "sampling_result", ".", "pos_gt_bboxes", ",", "\n", "self", ".", "target_means", ",", "self", ".", "target_stds", ")", "\n", "bbox_targets", "[", "pos_inds", ",", ":", "]", "=", "pos_bbox_targets", "\n", "bbox_weights", "[", "pos_inds", ",", ":", "]", "=", "1.0", "\n", "if", "gt_labels", "is", "None", ":", "\n", "                ", "labels", "[", "pos_inds", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "labels", "[", "pos_inds", "]", "=", "gt_labels", "[", "\n", "sampling_result", ".", "pos_assigned_gt_inds", "]", "\n", "", "if", "cfg", ".", "pos_weight", "<=", "0", ":", "\n", "                ", "label_weights", "[", "pos_inds", "]", "=", "1.0", "\n", "", "else", ":", "\n", "                ", "label_weights", "[", "pos_inds", "]", "=", "cfg", ".", "pos_weight", "\n", "", "", "if", "len", "(", "neg_inds", ")", ">", "0", ":", "\n", "            ", "label_weights", "[", "neg_inds", "]", "=", "1.0", "\n", "\n", "# map up to original set of anchors", "\n", "", "if", "unmap_outputs", ":", "\n", "            ", "inside_flags", "=", "inside_flags", ".", "type", "(", "torch", ".", "bool", ")", "\n", "num_total_anchors", "=", "flat_anchors", ".", "size", "(", "0", ")", "\n", "anchors", "=", "unmap", "(", "anchors", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "labels", "=", "unmap", "(", "labels", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "label_weights", "=", "unmap", "(", "label_weights", ",", "num_total_anchors", ",", "\n", "inside_flags", ")", "\n", "bbox_targets", "=", "unmap", "(", "bbox_targets", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "bbox_weights", "=", "unmap", "(", "bbox_weights", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "\n", "", "return", "(", "anchors", ",", "labels", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", ",", "\n", "pos_inds", ",", "neg_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.ATSSHead.get_num_level_anchors_inside": [[484, 490], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "int", "flags.sum"], "methods", ["None"], ["", "def", "get_num_level_anchors_inside", "(", "self", ",", "num_level_anchors", ",", "inside_flags", ")", ":", "\n", "        ", "split_inside_flags", "=", "torch", ".", "split", "(", "inside_flags", ",", "num_level_anchors", ")", "\n", "num_level_anchors_inside", "=", "[", "\n", "int", "(", "flags", ".", "sum", "(", ")", ")", "for", "flags", "in", "split_inside_flags", "\n", "]", "\n", "return", "num_level_anchors_inside", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.atss_head.reduce_mean": [[17, 23], ["tensor.clone.clone", "torch.all_reduce", "tensor.clone.div_", "torch.is_available", "torch.is_initialized", "torch.get_world_size"], "function", ["None"], ["def", "reduce_mean", "(", "tensor", ")", ":", "\n", "    ", "if", "not", "(", "dist", ".", "is_available", "(", ")", "and", "dist", ".", "is_initialized", "(", ")", ")", ":", "\n", "        ", "return", "tensor", "\n", "", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "tensor", ".", "div_", "(", "dist", ".", "get_world_size", "(", ")", ")", ",", "op", "=", "dist", ".", "reduce_op", ".", "SUM", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.retina_head.RetinaHead.__init__": [[34, 53], ["numpy.array", "anchor_head.AnchorHead.__init__", "range"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "in_channels", ",", "\n", "stacked_convs", "=", "4", ",", "\n", "octave_base_scale", "=", "4", ",", "\n", "scales_per_octave", "=", "3", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "stacked_convs", "=", "stacked_convs", "\n", "self", ".", "octave_base_scale", "=", "octave_base_scale", "\n", "self", ".", "scales_per_octave", "=", "scales_per_octave", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "octave_scales", "=", "np", ".", "array", "(", "\n", "[", "2", "**", "(", "i", "/", "scales_per_octave", ")", "for", "i", "in", "range", "(", "scales_per_octave", ")", "]", ")", "\n", "anchor_scales", "=", "octave_scales", "*", "octave_base_scale", "\n", "super", "(", "RetinaHead", ",", "self", ")", ".", "__init__", "(", "\n", "num_classes", ",", "in_channels", ",", "anchor_scales", "=", "anchor_scales", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.retina_head.RetinaHead._init_layers": [[54, 85], ["torch.ReLU", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv2d", "torch.Conv2d", "retina_head.RetinaHead.cls_convs.append", "retina_head.RetinaHead.reg_convs.append", "mmdet.ops.ConvModule", "mmdet.ops.ConvModule"], "methods", ["None"], ["", "def", "_init_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "cls_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "reg_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "stacked_convs", ")", ":", "\n", "            ", "chn", "=", "self", ".", "in_channels", "if", "i", "==", "0", "else", "self", ".", "feat_channels", "\n", "self", ".", "cls_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "self", ".", "reg_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "", "self", ".", "retina_cls", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "feat_channels", ",", "\n", "self", ".", "num_anchors", "*", "self", ".", "cls_out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "retina_reg", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "feat_channels", ",", "self", ".", "num_anchors", "*", "4", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.retina_head.RetinaHead.init_weights": [[86, 94], ["utils.bias_init_with_prob", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.weight_init.bias_init_with_prob"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "cls_convs", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "for", "m", "in", "self", ".", "reg_convs", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "bias_cls", "=", "bias_init_with_prob", "(", "0.01", ")", "\n", "normal_init", "(", "self", ".", "retina_cls", ",", "std", "=", "0.01", ",", "bias", "=", "bias_cls", ")", "\n", "normal_init", "(", "self", ".", "retina_reg", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.retina_head.RetinaHead.forward_single": [[95, 105], ["retina_head.RetinaHead.retina_cls", "retina_head.RetinaHead.retina_reg", "cls_conv", "reg_conv"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "cls_feat", "=", "x", "\n", "reg_feat", "=", "x", "\n", "for", "cls_conv", "in", "self", ".", "cls_convs", ":", "\n", "            ", "cls_feat", "=", "cls_conv", "(", "cls_feat", ")", "\n", "", "for", "reg_conv", "in", "self", ".", "reg_convs", ":", "\n", "            ", "reg_feat", "=", "reg_conv", "(", "reg_feat", ")", "\n", "", "cls_score", "=", "self", ".", "retina_cls", "(", "cls_feat", ")", "\n", "bbox_pred", "=", "self", ".", "retina_reg", "(", "reg_feat", ")", "\n", "return", "cls_score", ",", "bbox_pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.rpn_head.RPNHead.__init__": [[15, 17], ["anchor_head.AnchorHead.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RPNHead", ",", "self", ")", ".", "__init__", "(", "2", ",", "in_channels", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.rpn_head.RPNHead._init_layers": [[18, 24], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "_init_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "rpn_conv", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "self", ".", "feat_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "rpn_cls", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "\n", "self", ".", "num_anchors", "*", "self", ".", "cls_out_channels", ",", "1", ")", "\n", "self", ".", "rpn_reg", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "self", ".", "num_anchors", "*", "4", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.rpn_head.RPNHead.init_weights": [[25, 29], ["mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "normal_init", "(", "self", ".", "rpn_conv", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "rpn_cls", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "rpn_reg", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.rpn_head.RPNHead.forward_single": [[30, 36], ["rpn_head.RPNHead.rpn_conv", "torch.relu", "torch.relu", "torch.relu", "rpn_head.RPNHead.rpn_cls", "rpn_head.RPNHead.rpn_reg"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "rpn_conv", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "rpn_cls_score", "=", "self", ".", "rpn_cls", "(", "x", ")", "\n", "rpn_bbox_pred", "=", "self", ".", "rpn_reg", "(", "x", ")", "\n", "return", "rpn_cls_score", ",", "rpn_bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.rpn_head.RPNHead.loss": [[37, 54], ["super().loss", "dict"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss"], ["", "def", "loss", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "gt_bboxes", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "        ", "losses", "=", "super", "(", "RPNHead", ",", "self", ")", ".", "loss", "(", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "gt_bboxes", ",", "\n", "None", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "return", "dict", "(", "\n", "loss_rpn_cls", "=", "losses", "[", "'loss_cls'", "]", ",", "loss_rpn_bbox", "=", "losses", "[", "'loss_bbox'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.rpn_head.RPNHead.get_bboxes_single": [[55, 105], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "rpn_cls_score.reshape.reshape.permute", "rpn_bbox_pred.permute().reshape.permute().reshape.permute().reshape", "mmdet.core.delta2bbox", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmdet.ops.nms", "mlvl_proposals.append", "mmdet.ops.nms", "min", "rpn_cls_score.reshape.sigmoid.topk", "rpn_cls_score.reshape.reshape.reshape", "rpn_cls_score.reshape.reshape.sigmoid", "rpn_cls_score.reshape.reshape.reshape", "rpn_cls_score.reshape.sigmoid.topk", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "rpn_cls_score.reshape.reshape.size", "rpn_bbox_pred.permute().reshape.permute().reshape.size", "rpn_cls_score.reshape.reshape.softmax", "rpn_bbox_pred.permute().reshape.permute().reshape.permute", "rpn_cls_score.reshape.sigmoid.unsqueeze", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.delta2bbox", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.nms"], ["", "def", "get_bboxes_single", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "mlvl_anchors", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "mlvl_proposals", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "cls_scores", ")", ")", ":", "\n", "            ", "rpn_cls_score", "=", "cls_scores", "[", "idx", "]", "\n", "rpn_bbox_pred", "=", "bbox_preds", "[", "idx", "]", "\n", "assert", "rpn_cls_score", ".", "size", "(", ")", "[", "-", "2", ":", "]", "==", "rpn_bbox_pred", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "rpn_cls_score", "=", "rpn_cls_score", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "                ", "rpn_cls_score", "=", "rpn_cls_score", ".", "reshape", "(", "-", "1", ")", "\n", "scores", "=", "rpn_cls_score", ".", "sigmoid", "(", ")", "\n", "", "else", ":", "\n", "                ", "rpn_cls_score", "=", "rpn_cls_score", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "scores", "=", "rpn_cls_score", ".", "softmax", "(", "dim", "=", "1", ")", "[", ":", ",", "1", "]", "\n", "", "rpn_bbox_pred", "=", "rpn_bbox_pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "anchors", "=", "mlvl_anchors", "[", "idx", "]", "\n", "if", "cfg", ".", "nms_pre", ">", "0", "and", "scores", ".", "shape", "[", "0", "]", ">", "cfg", ".", "nms_pre", ":", "\n", "                ", "_", ",", "topk_inds", "=", "scores", ".", "topk", "(", "cfg", ".", "nms_pre", ")", "\n", "rpn_bbox_pred", "=", "rpn_bbox_pred", "[", "topk_inds", ",", ":", "]", "\n", "anchors", "=", "anchors", "[", "topk_inds", ",", ":", "]", "\n", "scores", "=", "scores", "[", "topk_inds", "]", "\n", "", "proposals", "=", "delta2bbox", "(", "anchors", ",", "rpn_bbox_pred", ",", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "img_shape", ")", "\n", "if", "cfg", ".", "min_bbox_size", ">", "0", ":", "\n", "                ", "w", "=", "proposals", "[", ":", ",", "2", "]", "-", "proposals", "[", ":", ",", "0", "]", "+", "1", "\n", "h", "=", "proposals", "[", ":", ",", "3", "]", "-", "proposals", "[", ":", ",", "1", "]", "+", "1", "\n", "valid_inds", "=", "torch", ".", "nonzero", "(", "(", "w", ">=", "cfg", ".", "min_bbox_size", ")", "&", "\n", "(", "h", ">=", "cfg", ".", "min_bbox_size", ")", ")", ".", "squeeze", "(", ")", "\n", "proposals", "=", "proposals", "[", "valid_inds", ",", ":", "]", "\n", "scores", "=", "scores", "[", "valid_inds", "]", "\n", "", "proposals", "=", "torch", ".", "cat", "(", "[", "proposals", ",", "scores", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "proposals", ",", "_", "=", "nms", "(", "proposals", ",", "cfg", ".", "nms_thr", ")", "\n", "proposals", "=", "proposals", "[", ":", "cfg", ".", "nms_post", ",", ":", "]", "\n", "mlvl_proposals", ".", "append", "(", "proposals", ")", "\n", "", "proposals", "=", "torch", ".", "cat", "(", "mlvl_proposals", ",", "0", ")", "\n", "if", "cfg", ".", "nms_across_levels", ":", "\n", "            ", "proposals", ",", "_", "=", "nms", "(", "proposals", ",", "cfg", ".", "nms_thr", ")", "\n", "proposals", "=", "proposals", "[", ":", "cfg", ".", "max_num", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "scores", "=", "proposals", "[", ":", ",", "4", "]", "\n", "num", "=", "min", "(", "cfg", ".", "max_num", ",", "proposals", ".", "shape", "[", "0", "]", ")", "\n", "_", ",", "topk_inds", "=", "scores", ".", "topk", "(", "num", ")", "\n", "proposals", "=", "proposals", "[", "topk_inds", ",", ":", "]", "\n", "", "return", "proposals", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.ga_rpn_head.GARPNHead.__init__": [[16, 18], ["guided_anchor_head.GuidedAnchorHead.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GARPNHead", ",", "self", ")", ".", "__init__", "(", "2", ",", "in_channels", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.ga_rpn_head.GARPNHead._init_layers": [[19, 23], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "super()._init_layers"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead._init_layers"], ["", "def", "_init_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "rpn_conv", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", ",", "self", ".", "feat_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", "super", "(", "GARPNHead", ",", "self", ")", ".", "_init_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.ga_rpn_head.GARPNHead.init_weights": [[24, 27], ["mmcv.cnn.normal_init", "super().init_weights"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "normal_init", "(", "self", ".", "rpn_conv", ",", "std", "=", "0.01", ")", "\n", "super", "(", "GARPNHead", ",", "self", ")", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.ga_rpn_head.GARPNHead.forward_single": [[28, 34], ["ga_rpn_head.GARPNHead.rpn_conv", "torch.relu", "torch.relu", "torch.relu", "super().forward_single"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.forward_single"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "rpn_conv", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "(", "cls_score", ",", "bbox_pred", ",", "shape_pred", ",", "\n", "loc_pred", ")", "=", "super", "(", "GARPNHead", ",", "self", ")", ".", "forward_single", "(", "x", ")", "\n", "return", "cls_score", ",", "bbox_pred", ",", "shape_pred", ",", "loc_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.ga_rpn_head.GARPNHead.loss": [[35, 59], ["super().loss", "dict"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss"], ["", "def", "loss", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "shape_preds", ",", "\n", "loc_preds", ",", "\n", "gt_bboxes", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "        ", "losses", "=", "super", "(", "GARPNHead", ",", "self", ")", ".", "loss", "(", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "shape_preds", ",", "\n", "loc_preds", ",", "\n", "gt_bboxes", ",", "\n", "None", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "return", "dict", "(", "\n", "loss_rpn_cls", "=", "losses", "[", "'loss_cls'", "]", ",", "\n", "loss_rpn_bbox", "=", "losses", "[", "'loss_bbox'", "]", ",", "\n", "loss_anchor_shape", "=", "losses", "[", "'loss_shape'", "]", ",", "\n", "loss_anchor_loc", "=", "losses", "[", "'loss_loc'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.ga_rpn_head.GARPNHead.get_bboxes_single": [[60, 128], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "rpn_cls_score.reshape.reshape.permute", "mmdet.core.delta2bbox", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmdet.ops.nms", "mlvl_proposals.append", "mmdet.ops.nms", "min", "scores.unsqueeze.unsqueeze.topk", "mask.sum", "rpn_cls_score.reshape.reshape.reshape", "rpn_cls_score.reshape.reshape.sigmoid", "rpn_cls_score.reshape.reshape.reshape", "rpn_bbox_pred.unsqueeze.unsqueeze.permute().reshape", "scores.unsqueeze.unsqueeze.dim", "rpn_bbox_pred.unsqueeze.unsqueeze.unsqueeze", "anchors.unsqueeze.unsqueeze.unsqueeze", "scores.unsqueeze.unsqueeze.unsqueeze", "scores.unsqueeze.unsqueeze.topk", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "rpn_cls_score.reshape.reshape.size", "rpn_bbox_pred.unsqueeze.unsqueeze.size", "rpn_cls_score.reshape.reshape.softmax", "scores.unsqueeze.unsqueeze.unsqueeze", "rpn_bbox_pred.unsqueeze.unsqueeze.permute", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.delta2bbox", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.nms"], ["", "def", "get_bboxes_single", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "mlvl_anchors", ",", "\n", "mlvl_masks", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "mlvl_proposals", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "cls_scores", ")", ")", ":", "\n", "            ", "rpn_cls_score", "=", "cls_scores", "[", "idx", "]", "\n", "rpn_bbox_pred", "=", "bbox_preds", "[", "idx", "]", "\n", "anchors", "=", "mlvl_anchors", "[", "idx", "]", "\n", "mask", "=", "mlvl_masks", "[", "idx", "]", "\n", "assert", "rpn_cls_score", ".", "size", "(", ")", "[", "-", "2", ":", "]", "==", "rpn_bbox_pred", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "# if no location is kept, end.", "\n", "if", "mask", ".", "sum", "(", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "rpn_cls_score", "=", "rpn_cls_score", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "                ", "rpn_cls_score", "=", "rpn_cls_score", ".", "reshape", "(", "-", "1", ")", "\n", "scores", "=", "rpn_cls_score", ".", "sigmoid", "(", ")", "\n", "", "else", ":", "\n", "                ", "rpn_cls_score", "=", "rpn_cls_score", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "scores", "=", "rpn_cls_score", ".", "softmax", "(", "dim", "=", "1", ")", "[", ":", ",", "1", "]", "\n", "# filter scores, bbox_pred w.r.t. mask.", "\n", "# anchors are filtered in get_anchors() beforehand.", "\n", "", "scores", "=", "scores", "[", "mask", "]", "\n", "rpn_bbox_pred", "=", "rpn_bbox_pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "\n", "4", ")", "[", "mask", ",", ":", "]", "\n", "if", "scores", ".", "dim", "(", ")", "==", "0", ":", "\n", "                ", "rpn_bbox_pred", "=", "rpn_bbox_pred", ".", "unsqueeze", "(", "0", ")", "\n", "anchors", "=", "anchors", ".", "unsqueeze", "(", "0", ")", "\n", "scores", "=", "scores", ".", "unsqueeze", "(", "0", ")", "\n", "# filter anchors, bbox_pred, scores w.r.t. scores", "\n", "", "if", "cfg", ".", "nms_pre", ">", "0", "and", "scores", ".", "shape", "[", "0", "]", ">", "cfg", ".", "nms_pre", ":", "\n", "                ", "_", ",", "topk_inds", "=", "scores", ".", "topk", "(", "cfg", ".", "nms_pre", ")", "\n", "rpn_bbox_pred", "=", "rpn_bbox_pred", "[", "topk_inds", ",", ":", "]", "\n", "anchors", "=", "anchors", "[", "topk_inds", ",", ":", "]", "\n", "scores", "=", "scores", "[", "topk_inds", "]", "\n", "# get proposals w.r.t. anchors and rpn_bbox_pred", "\n", "", "proposals", "=", "delta2bbox", "(", "anchors", ",", "rpn_bbox_pred", ",", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "img_shape", ")", "\n", "# filter out too small bboxes", "\n", "if", "cfg", ".", "min_bbox_size", ">", "0", ":", "\n", "                ", "w", "=", "proposals", "[", ":", ",", "2", "]", "-", "proposals", "[", ":", ",", "0", "]", "+", "1", "\n", "h", "=", "proposals", "[", ":", ",", "3", "]", "-", "proposals", "[", ":", ",", "1", "]", "+", "1", "\n", "valid_inds", "=", "torch", ".", "nonzero", "(", "(", "w", ">=", "cfg", ".", "min_bbox_size", ")", "&", "\n", "(", "h", ">=", "cfg", ".", "min_bbox_size", ")", ")", ".", "squeeze", "(", ")", "\n", "proposals", "=", "proposals", "[", "valid_inds", ",", ":", "]", "\n", "scores", "=", "scores", "[", "valid_inds", "]", "\n", "", "proposals", "=", "torch", ".", "cat", "(", "[", "proposals", ",", "scores", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "# NMS in current level", "\n", "proposals", ",", "_", "=", "nms", "(", "proposals", ",", "cfg", ".", "nms_thr", ")", "\n", "proposals", "=", "proposals", "[", ":", "cfg", ".", "nms_post", ",", ":", "]", "\n", "mlvl_proposals", ".", "append", "(", "proposals", ")", "\n", "", "proposals", "=", "torch", ".", "cat", "(", "mlvl_proposals", ",", "0", ")", "\n", "if", "cfg", ".", "nms_across_levels", ":", "\n", "# NMS across multi levels", "\n", "            ", "proposals", ",", "_", "=", "nms", "(", "proposals", ",", "cfg", ".", "nms_thr", ")", "\n", "proposals", "=", "proposals", "[", ":", "cfg", ".", "max_num", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "scores", "=", "proposals", "[", ":", ",", "4", "]", "\n", "num", "=", "min", "(", "cfg", ".", "max_num", ",", "proposals", ".", "shape", "[", "0", "]", ")", "\n", "_", ",", "topk_inds", "=", "scores", ".", "topk", "(", "num", ")", "\n", "proposals", "=", "proposals", "[", "topk_inds", ",", ":", "]", "\n", "", "return", "proposals", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.free_anchor_retina_head.FreeAnchorRetinaHead.__init__": [[12, 34], ["retina_head.RetinaHead.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "in_channels", ",", "\n", "stacked_convs", "=", "4", ",", "\n", "octave_base_scale", "=", "4", ",", "\n", "scales_per_octave", "=", "3", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "pre_anchor_topk", "=", "50", ",", "\n", "bbox_thr", "=", "0.6", ",", "\n", "gamma", "=", "2.0", ",", "\n", "alpha", "=", "0.5", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FreeAnchorRetinaHead", ",", "\n", "self", ")", ".", "__init__", "(", "num_classes", ",", "in_channels", ",", "stacked_convs", ",", "\n", "octave_base_scale", ",", "scales_per_octave", ",", "conv_cfg", ",", "\n", "norm_cfg", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "pre_anchor_topk", "=", "pre_anchor_topk", "\n", "self", ".", "bbox_thr", "=", "bbox_thr", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.free_anchor_retina_head.FreeAnchorRetinaHead.loss": [[35, 173], ["free_anchor_retina_head.FreeAnchorRetinaHead.get_anchors", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cls.permute().reshape", "bbox_pred.permute().reshape", "zip", "mmdet.core.bbox_overlaps", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "mmdet.core.bbox2delta", "free_anchor_retina_head.FreeAnchorRetinaHead.loss_bbox().sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "len", "positive_losses.append", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "torch.cat().sum", "max", "free_anchor_retina_head.FreeAnchorRetinaHead.negative_bag_loss().sum", "max", "featmap.size", "cls.size", "bbox_pred.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "mmdet.core.delta2bbox", "mmdet.core.bbox_overlaps", "mmdet.core.bbox_overlaps.max().values.clamp", "gt_labels_.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse.sum().to_dense", "torch.sparse.sum().to_dense", "torch.sparse.sum().to_dense", "torch.sparse.sum().to_dense", "torch.nonzero().t_", "torch.nonzero().t_", "torch.nonzero().t_", "torch.nonzero().t_", "torch.stack.append", "torch.stack.append", "gt_bboxes_.unsqueeze().expand_as", "free_anchor_retina_head.FreeAnchorRetinaHead.positive_bag_loss", "cls.permute", "bbox_pred.permute", "torch.nonzero().t_.numel", "torch.nonzero().t_.numel", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.sparse_coo_tensor().to_dense", "torch.sparse_coo_tensor().to_dense", "torch.sparse_coo_tensor().to_dense", "torch.sparse_coo_tensor().to_dense", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "free_anchor_retina_head.FreeAnchorRetinaHead.loss_bbox", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "free_anchor_retina_head.FreeAnchorRetinaHead.negative_bag_loss", "torch.arange().type_as", "torch.arange().type_as", "torch.arange().type_as", "torch.arange().type_as", "torch.sparse.sum", "torch.sparse.sum", "torch.sparse.sum", "torch.sparse.sum", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.where().max", "torch.where().max", "torch.where().max", "torch.where().max", "gt_labels_.view().repeat", "gt_bboxes_.unsqueeze", "mmdet.core.bbox_overlaps.max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "anchors_.size", "torch.where", "torch.where", "torch.where", "torch.where", "torch.nonzero().t_.flip", "torch.nonzero().t_.flip", "gt_labels_.view", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "torch.tensor().type_as", "gt_labels_.unsqueeze", "anchors_.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.anchor_head.AnchorHead.get_anchors", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.geometry.bbox_overlaps", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2delta", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.delta2bbox", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.geometry.bbox_overlaps", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.free_anchor_retina_head.FreeAnchorRetinaHead.positive_bag_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.free_anchor_retina_head.FreeAnchorRetinaHead.negative_bag_loss"], ["", "def", "loss", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "        ", "featmap_sizes", "=", "[", "featmap", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "featmap", "in", "cls_scores", "]", "\n", "assert", "len", "(", "featmap_sizes", ")", "==", "len", "(", "self", ".", "anchor_generators", ")", "\n", "\n", "anchor_list", ",", "_", "=", "self", ".", "get_anchors", "(", "featmap_sizes", ",", "img_metas", ")", "\n", "anchors", "=", "[", "torch", ".", "cat", "(", "anchor", ")", "for", "anchor", "in", "anchor_list", "]", "\n", "\n", "# concatenate each level", "\n", "cls_scores", "=", "[", "\n", "cls", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "\n", "1", ")", ".", "reshape", "(", "cls", ".", "size", "(", "0", ")", ",", "-", "1", ",", "self", ".", "cls_out_channels", ")", "\n", "for", "cls", "in", "cls_scores", "\n", "]", "\n", "bbox_preds", "=", "[", "\n", "bbox_pred", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "bbox_pred", ".", "size", "(", "0", ")", ",", "-", "1", ",", "4", ")", "\n", "for", "bbox_pred", "in", "bbox_preds", "\n", "]", "\n", "cls_scores", "=", "torch", ".", "cat", "(", "cls_scores", ",", "dim", "=", "1", ")", "\n", "bbox_preds", "=", "torch", ".", "cat", "(", "bbox_preds", ",", "dim", "=", "1", ")", "\n", "\n", "cls_prob", "=", "torch", ".", "sigmoid", "(", "cls_scores", ")", "\n", "box_prob", "=", "[", "]", "\n", "num_pos", "=", "0", "\n", "positive_losses", "=", "[", "]", "\n", "for", "_", ",", "(", "anchors_", ",", "gt_labels_", ",", "gt_bboxes_", ",", "cls_prob_", ",", "\n", "bbox_preds_", ")", "in", "enumerate", "(", "\n", "zip", "(", "anchors", ",", "gt_labels", ",", "gt_bboxes", ",", "cls_prob", ",", "bbox_preds", ")", ")", ":", "\n", "            ", "gt_labels_", "-=", "1", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# box_localization: a_{j}^{loc}, shape: [j, 4]", "\n", "                ", "pred_boxes", "=", "delta2bbox", "(", "anchors_", ",", "bbox_preds_", ",", "\n", "self", ".", "target_means", ",", "self", ".", "target_stds", ")", "\n", "\n", "# object_box_iou: IoU_{ij}^{loc}, shape: [i, j]", "\n", "object_box_iou", "=", "bbox_overlaps", "(", "gt_bboxes_", ",", "pred_boxes", ")", "\n", "\n", "# object_box_prob: P{a_{j} -> b_{i}}, shape: [i, j]", "\n", "t1", "=", "self", ".", "bbox_thr", "\n", "t2", "=", "object_box_iou", ".", "max", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "values", ".", "clamp", "(", "min", "=", "t1", "+", "1e-12", ")", "\n", "object_box_prob", "=", "(", "(", "object_box_iou", "-", "t1", ")", "/", "(", "t2", "-", "t1", ")", ")", ".", "clamp", "(", "\n", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "\n", "# object_cls_box_prob: P{a_{j} -> b_{i}}, shape: [i, c, j]", "\n", "num_obj", "=", "gt_labels_", ".", "size", "(", "0", ")", "\n", "indices", "=", "torch", ".", "stack", "(", "\n", "[", "torch", ".", "arange", "(", "num_obj", ")", ".", "type_as", "(", "gt_labels_", ")", ",", "gt_labels_", "]", ",", "\n", "dim", "=", "0", ")", "\n", "object_cls_box_prob", "=", "torch", ".", "sparse_coo_tensor", "(", "\n", "indices", ",", "object_box_prob", ")", "\n", "\n", "# image_box_iou: P{a_{j} \\in A_{+}}, shape: [c, j]", "\n", "\"\"\"\n                from \"start\" to \"end\" implement:\n                image_box_iou = torch.sparse.max(object_cls_box_prob,\n                                                 dim=0).t()\n\n                \"\"\"", "\n", "# start", "\n", "box_cls_prob", "=", "torch", ".", "sparse", ".", "sum", "(", "\n", "object_cls_box_prob", ",", "dim", "=", "0", ")", ".", "to_dense", "(", ")", "\n", "\n", "indices", "=", "torch", ".", "nonzero", "(", "box_cls_prob", ")", ".", "t_", "(", ")", "\n", "if", "indices", ".", "numel", "(", ")", "==", "0", ":", "\n", "                    ", "image_box_prob", "=", "torch", ".", "zeros", "(", "\n", "anchors_", ".", "size", "(", "0", ")", ",", "\n", "self", ".", "cls_out_channels", ")", ".", "type_as", "(", "object_box_prob", ")", "\n", "", "else", ":", "\n", "                    ", "nonzero_box_prob", "=", "torch", ".", "where", "(", "\n", "(", "gt_labels_", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "==", "indices", "[", "0", "]", ")", ",", "\n", "object_box_prob", "[", ":", ",", "indices", "[", "1", "]", "]", ",", "\n", "torch", ".", "tensor", "(", "\n", "[", "0", "]", ")", ".", "type_as", "(", "object_box_prob", ")", ")", ".", "max", "(", "dim", "=", "0", ")", ".", "values", "\n", "\n", "# upmap to shape [j, c]", "\n", "image_box_prob", "=", "torch", ".", "sparse_coo_tensor", "(", "\n", "indices", ".", "flip", "(", "[", "0", "]", ")", ",", "\n", "nonzero_box_prob", ",", "\n", "size", "=", "(", "anchors_", ".", "size", "(", "0", ")", ",", "\n", "self", ".", "cls_out_channels", ")", ")", ".", "to_dense", "(", ")", "\n", "# end", "\n", "\n", "", "box_prob", ".", "append", "(", "image_box_prob", ")", "\n", "\n", "# construct bags for objects", "\n", "", "match_quality_matrix", "=", "bbox_overlaps", "(", "gt_bboxes_", ",", "anchors_", ")", "\n", "_", ",", "matched", "=", "torch", ".", "topk", "(", "\n", "match_quality_matrix", ",", "\n", "self", ".", "pre_anchor_topk", ",", "\n", "dim", "=", "1", ",", "\n", "sorted", "=", "False", ")", "\n", "del", "match_quality_matrix", "\n", "\n", "# matched_cls_prob: P_{ij}^{cls}", "\n", "matched_cls_prob", "=", "torch", ".", "gather", "(", "\n", "cls_prob_", "[", "matched", "]", ",", "2", ",", "\n", "gt_labels_", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "pre_anchor_topk", ",", "\n", "1", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "\n", "# matched_box_prob: P_{ij}^{loc}", "\n", "matched_anchors", "=", "anchors_", "[", "matched", "]", "\n", "matched_object_targets", "=", "bbox2delta", "(", "\n", "matched_anchors", ",", "\n", "gt_bboxes_", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "expand_as", "(", "matched_anchors", ")", ",", "\n", "self", ".", "target_means", ",", "self", ".", "target_stds", ")", "\n", "loss_bbox", "=", "self", ".", "loss_bbox", "(", "\n", "bbox_preds_", "[", "matched", "]", ",", "\n", "matched_object_targets", ",", "\n", "reduction_override", "=", "'none'", ")", ".", "sum", "(", "-", "1", ")", "\n", "matched_box_prob", "=", "torch", ".", "exp", "(", "-", "loss_bbox", ")", "\n", "\n", "# positive_losses: {-log( Mean-max(P_{ij}^{cls} * P_{ij}^{loc}) )}", "\n", "num_pos", "+=", "len", "(", "gt_bboxes_", ")", "\n", "positive_losses", ".", "append", "(", "\n", "self", ".", "positive_bag_loss", "(", "matched_cls_prob", ",", "matched_box_prob", ")", ")", "\n", "", "positive_loss", "=", "torch", ".", "cat", "(", "positive_losses", ")", ".", "sum", "(", ")", "/", "max", "(", "1", ",", "num_pos", ")", "\n", "\n", "# box_prob: P{a_{j} \\in A_{+}}", "\n", "box_prob", "=", "torch", ".", "stack", "(", "box_prob", ",", "dim", "=", "0", ")", "\n", "\n", "# negative_loss:", "\n", "# \\sum_{j}{ FL((1 - P{a_{j} \\in A_{+}}) * (1 - P_{j}^{bg})) } / n||B||", "\n", "negative_loss", "=", "self", ".", "negative_bag_loss", "(", "cls_prob", ",", "box_prob", ")", ".", "sum", "(", ")", "/", "max", "(", "\n", "1", ",", "num_pos", "*", "self", ".", "pre_anchor_topk", ")", "\n", "\n", "losses", "=", "{", "\n", "'positive_bag_loss'", ":", "positive_loss", ",", "\n", "'negative_bag_loss'", ":", "negative_loss", "\n", "}", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.free_anchor_retina_head.FreeAnchorRetinaHead.positive_bag_loss": [[174, 183], ["weight.sum().unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "weight.sum", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.cross_entropy_loss.binary_cross_entropy", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.cross_entropy_loss.binary_cross_entropy"], ["", "def", "positive_bag_loss", "(", "self", ",", "matched_cls_prob", ",", "matched_box_prob", ")", ":", "\n", "# bag_prob = Mean-max(matched_prob)", "\n", "        ", "matched_prob", "=", "matched_cls_prob", "*", "matched_box_prob", "\n", "weight", "=", "1", "/", "torch", ".", "clamp", "(", "1", "-", "matched_prob", ",", "1e-12", ",", "None", ")", "\n", "weight", "/=", "weight", ".", "sum", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "bag_prob", "=", "(", "weight", "*", "matched_prob", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "# positive_bag_loss = -self.alpha * log(bag_prob)", "\n", "return", "self", ".", "alpha", "*", "F", ".", "binary_cross_entropy", "(", "\n", "bag_prob", ",", "torch", ".", "ones_like", "(", "bag_prob", ")", ",", "reduction", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.free_anchor_retina_head.FreeAnchorRetinaHead.negative_bag_loss": [[184, 189], ["torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.cross_entropy_loss.binary_cross_entropy", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.cross_entropy_loss.binary_cross_entropy"], ["", "def", "negative_bag_loss", "(", "self", ",", "cls_prob", ",", "box_prob", ")", ":", "\n", "        ", "prob", "=", "cls_prob", "*", "(", "1", "-", "box_prob", ")", "\n", "negative_bag_loss", "=", "prob", "**", "self", ".", "gamma", "*", "F", ".", "binary_cross_entropy", "(", "\n", "prob", ",", "torch", ".", "zeros_like", "(", "prob", ")", ",", "reduction", "=", "'none'", ")", "\n", "return", "(", "1", "-", "self", ".", "alpha", ")", "*", "negative_bag_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.anchor_head.AnchorHead.__init__": [[33, 82], ["dict", "dict", "torch.Module.__init__", "loss_cls.get", "builder.build_loss", "builder.build_loss", "anchor_head.AnchorHead._init_layers", "list", "ValueError", "anchor_head.AnchorHead.anchor_generators.append", "len", "len", "mmdet.core.AnchorGenerator"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead._init_layers"], ["def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "in_channels", ",", "\n", "feat_channels", "=", "256", ",", "\n", "anchor_scales", "=", "[", "8", ",", "16", ",", "32", "]", ",", "\n", "anchor_ratios", "=", "[", "0.5", ",", "1.0", ",", "2.0", "]", ",", "\n", "anchor_strides", "=", "[", "4", ",", "8", ",", "16", ",", "32", ",", "64", "]", ",", "\n", "anchor_base_sizes", "=", "None", ",", "\n", "target_means", "=", "(", ".0", ",", ".0", ",", ".0", ",", ".0", ")", ",", "\n", "target_stds", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ",", "\n", "loss_cls", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_bbox", "=", "dict", "(", "\n", "type", "=", "'SmoothL1Loss'", ",", "beta", "=", "1.0", "/", "9.0", ",", "loss_weight", "=", "1.0", ")", ")", ":", "\n", "        ", "super", "(", "AnchorHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "feat_channels", "=", "feat_channels", "\n", "self", ".", "anchor_scales", "=", "anchor_scales", "\n", "self", ".", "anchor_ratios", "=", "anchor_ratios", "\n", "self", ".", "anchor_strides", "=", "anchor_strides", "\n", "self", ".", "anchor_base_sizes", "=", "list", "(", "\n", "anchor_strides", ")", "if", "anchor_base_sizes", "is", "None", "else", "anchor_base_sizes", "\n", "self", ".", "target_means", "=", "target_means", "\n", "self", ".", "target_stds", "=", "target_stds", "\n", "\n", "self", ".", "use_sigmoid_cls", "=", "loss_cls", ".", "get", "(", "'use_sigmoid'", ",", "False", ")", "\n", "self", ".", "sampling", "=", "loss_cls", "[", "'type'", "]", "not", "in", "[", "'FocalLoss'", ",", "'GHMC'", "]", "\n", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "            ", "self", ".", "cls_out_channels", "=", "num_classes", "-", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "cls_out_channels", "=", "num_classes", "\n", "\n", "", "if", "self", ".", "cls_out_channels", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'num_classes={} is too small'", ".", "format", "(", "num_classes", ")", ")", "\n", "\n", "", "self", ".", "loss_cls", "=", "build_loss", "(", "loss_cls", ")", "\n", "self", ".", "loss_bbox", "=", "build_loss", "(", "loss_bbox", ")", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n", "self", ".", "anchor_generators", "=", "[", "]", "\n", "for", "anchor_base", "in", "self", ".", "anchor_base_sizes", ":", "\n", "            ", "self", ".", "anchor_generators", ".", "append", "(", "\n", "AnchorGenerator", "(", "anchor_base", ",", "anchor_scales", ",", "anchor_ratios", ")", ")", "\n", "\n", "", "self", ".", "num_anchors", "=", "len", "(", "self", ".", "anchor_ratios", ")", "*", "len", "(", "self", ".", "anchor_scales", ")", "\n", "self", ".", "_init_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.anchor_head.AnchorHead._init_layers": [[83, 87], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "_init_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_cls", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "\n", "self", ".", "num_anchors", "*", "self", ".", "cls_out_channels", ",", "1", ")", "\n", "self", ".", "conv_reg", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "num_anchors", "*", "4", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.anchor_head.AnchorHead.init_weights": [[88, 91], ["mmcv.cnn.normal_init", "mmcv.cnn.normal_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "normal_init", "(", "self", ".", "conv_cls", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "conv_reg", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.anchor_head.AnchorHead.forward_single": [[92, 96], ["anchor_head.AnchorHead.conv_cls", "anchor_head.AnchorHead.conv_reg"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "cls_score", "=", "self", ".", "conv_cls", "(", "x", ")", "\n", "bbox_pred", "=", "self", ".", "conv_reg", "(", "x", ")", "\n", "return", "cls_score", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.anchor_head.AnchorHead.forward": [[97, 99], ["mmdet.core.multi_apply"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.multi_apply"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "return", "multi_apply", "(", "self", ".", "forward_single", ",", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.anchor_head.AnchorHead.get_anchors": [[100, 140], ["len", "len", "range", "enumerate", "anchor_head.AnchorHead.anchor_generators[].grid_anchors", "multi_level_anchors.append", "range", "valid_flag_list.append", "range", "min", "min", "anchor_head.AnchorHead.anchor_generators[].valid_flags", "multi_level_flags.append", "int", "int", "numpy.ceil", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_generator.AnchorGenerator.grid_anchors", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_generator.PointGenerator.valid_flags"], ["", "def", "get_anchors", "(", "self", ",", "featmap_sizes", ",", "img_metas", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "\"\"\"Get anchors according to feature map sizes.\n\n        Args:\n            featmap_sizes (list[tuple]): Multi-level feature map sizes.\n            img_metas (list[dict]): Image meta info.\n            device (torch.device | str): device for returned tensors\n\n        Returns:\n            tuple: anchors of each image, valid flags of each image\n        \"\"\"", "\n", "num_imgs", "=", "len", "(", "img_metas", ")", "\n", "num_levels", "=", "len", "(", "featmap_sizes", ")", "\n", "\n", "# since feature map sizes of all images are the same, we only compute", "\n", "# anchors for one time", "\n", "multi_level_anchors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "anchors", "=", "self", ".", "anchor_generators", "[", "i", "]", ".", "grid_anchors", "(", "\n", "featmap_sizes", "[", "i", "]", ",", "self", ".", "anchor_strides", "[", "i", "]", ",", "device", "=", "device", ")", "\n", "multi_level_anchors", ".", "append", "(", "anchors", ")", "\n", "", "anchor_list", "=", "[", "multi_level_anchors", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "\n", "# for each image, we compute valid flags of multi level anchors", "\n", "valid_flag_list", "=", "[", "]", "\n", "for", "img_id", ",", "img_meta", "in", "enumerate", "(", "img_metas", ")", ":", "\n", "            ", "multi_level_flags", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "                ", "anchor_stride", "=", "self", ".", "anchor_strides", "[", "i", "]", "\n", "feat_h", ",", "feat_w", "=", "featmap_sizes", "[", "i", "]", "\n", "h", ",", "w", "=", "img_meta", "[", "'pad_shape'", "]", "[", ":", "2", "]", "\n", "valid_feat_h", "=", "min", "(", "int", "(", "np", ".", "ceil", "(", "h", "/", "anchor_stride", ")", ")", ",", "feat_h", ")", "\n", "valid_feat_w", "=", "min", "(", "int", "(", "np", ".", "ceil", "(", "w", "/", "anchor_stride", ")", ")", ",", "feat_w", ")", "\n", "flags", "=", "self", ".", "anchor_generators", "[", "i", "]", ".", "valid_flags", "(", "\n", "(", "feat_h", ",", "feat_w", ")", ",", "(", "valid_feat_h", ",", "valid_feat_w", ")", ",", "\n", "device", "=", "device", ")", "\n", "multi_level_flags", ".", "append", "(", "flags", ")", "\n", "", "valid_flag_list", ".", "append", "(", "multi_level_flags", ")", "\n", "\n", "", "return", "anchor_list", ",", "valid_flag_list", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.anchor_head.AnchorHead.loss_single": [[141, 160], ["labels.reshape.reshape.reshape", "label_weights.reshape.reshape.reshape", "cls_score.permute().reshape.permute().reshape.permute().reshape", "anchor_head.AnchorHead.loss_cls", "bbox_targets.reshape.reshape.reshape", "bbox_weights.reshape.reshape.reshape", "bbox_pred.permute().reshape.permute().reshape.permute().reshape", "anchor_head.AnchorHead.loss_bbox", "cls_score.permute().reshape.permute().reshape.permute", "bbox_pred.permute().reshape.permute().reshape.permute"], "methods", ["None"], ["", "def", "loss_single", "(", "self", ",", "cls_score", ",", "bbox_pred", ",", "labels", ",", "label_weights", ",", "\n", "bbox_targets", ",", "bbox_weights", ",", "num_total_samples", ",", "cfg", ")", ":", "\n", "# classification loss", "\n", "        ", "labels", "=", "labels", ".", "reshape", "(", "-", "1", ")", "\n", "label_weights", "=", "label_weights", ".", "reshape", "(", "-", "1", ")", "\n", "cls_score", "=", "cls_score", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "\n", "1", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "cls_out_channels", ")", "\n", "loss_cls", "=", "self", ".", "loss_cls", "(", "\n", "cls_score", ",", "labels", ",", "label_weights", ",", "avg_factor", "=", "num_total_samples", ")", "\n", "# regression loss", "\n", "bbox_targets", "=", "bbox_targets", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "bbox_weights", "=", "bbox_weights", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "bbox_pred", "=", "bbox_pred", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "loss_bbox", "=", "self", ".", "loss_bbox", "(", "\n", "bbox_pred", ",", "\n", "bbox_targets", ",", "\n", "bbox_weights", ",", "\n", "avg_factor", "=", "num_total_samples", ")", "\n", "return", "loss_cls", ",", "loss_bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.anchor_head.AnchorHead.loss": [[161, 207], ["mmdet.core.force_fp32", "anchor_head.AnchorHead.get_anchors", "mmdet.core.anchor_target", "mmdet.core.multi_apply", "dict", "len", "len", "featmap.size"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.anchor_head.AnchorHead.get_anchors", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_target.anchor_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.multi_apply"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'cls_scores'", ",", "'bbox_preds'", ")", ")", "\n", "def", "loss", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "        ", "featmap_sizes", "=", "[", "featmap", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "featmap", "in", "cls_scores", "]", "\n", "assert", "len", "(", "featmap_sizes", ")", "==", "len", "(", "self", ".", "anchor_generators", ")", "\n", "\n", "device", "=", "cls_scores", "[", "0", "]", ".", "device", "\n", "\n", "anchor_list", ",", "valid_flag_list", "=", "self", ".", "get_anchors", "(", "\n", "featmap_sizes", ",", "img_metas", ",", "device", "=", "device", ")", "\n", "label_channels", "=", "self", ".", "cls_out_channels", "if", "self", ".", "use_sigmoid_cls", "else", "1", "\n", "cls_reg_targets", "=", "anchor_target", "(", "\n", "anchor_list", ",", "\n", "valid_flag_list", ",", "\n", "gt_bboxes", ",", "\n", "img_metas", ",", "\n", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore_list", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels_list", "=", "gt_labels", ",", "\n", "label_channels", "=", "label_channels", ",", "\n", "sampling", "=", "self", ".", "sampling", ")", "\n", "if", "cls_reg_targets", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "(", "labels_list", ",", "label_weights_list", ",", "bbox_targets_list", ",", "bbox_weights_list", ",", "\n", "num_total_pos", ",", "num_total_neg", ")", "=", "cls_reg_targets", "\n", "num_total_samples", "=", "(", "\n", "num_total_pos", "+", "num_total_neg", "if", "self", ".", "sampling", "else", "num_total_pos", ")", "\n", "losses_cls", ",", "losses_bbox", "=", "multi_apply", "(", "\n", "self", ".", "loss_single", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "labels_list", ",", "\n", "label_weights_list", ",", "\n", "bbox_targets_list", ",", "\n", "bbox_weights_list", ",", "\n", "num_total_samples", "=", "num_total_samples", ",", "\n", "cfg", "=", "cfg", ")", "\n", "return", "dict", "(", "loss_cls", "=", "losses_cls", ",", "loss_bbox", "=", "losses_bbox", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.anchor_head.AnchorHead.get_bboxes": [[208, 279], ["mmdet.core.force_fp32", "len", "range", "len", "len", "anchor_head.AnchorHead.anchor_generators[].grid_anchors", "len", "anchor_head.AnchorHead.get_bboxes_single", "result_list.append", "range", "[].detach", "[].detach", "cls_scores[].size", "range", "range"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_generator.AnchorGenerator.grid_anchors", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_bboxes_single"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'cls_scores'", ",", "'bbox_preds'", ")", ")", "\n", "def", "get_bboxes", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Transform network output for a batch into labeled boxes.\n\n        Args:\n            cls_scores (list[Tensor]): Box scores for each scale level\n                Has shape (N, num_anchors * num_classes, H, W)\n            bbox_preds (list[Tensor]): Box energies / deltas for each scale\n                level with shape (N, num_anchors * 4, H, W)\n            img_metas (list[dict]): size / scale info for each image\n            cfg (mmcv.Config): test / postprocessing configuration\n            rescale (bool): if True, return boxes in original image space\n\n        Returns:\n            list[tuple[Tensor, Tensor]]: each item in result_list is 2-tuple.\n                The first item is an (n, 5) tensor, where the first 4 columns\n                are bounding box positions (tl_x, tl_y, br_x, br_y) and the\n                5-th column is a score between 0 and 1. The second item is a\n                (n,) tensor where each item is the class index of the\n                corresponding box.\n\n        Example:\n            >>> import mmcv\n            >>> self = AnchorHead(num_classes=9, in_channels=1)\n            >>> img_metas = [{'img_shape': (32, 32, 3), 'scale_factor': 1}]\n            >>> cfg = mmcv.Config(dict(\n            >>>     score_thr=0.00,\n            >>>     nms=dict(type='nms', iou_thr=1.0),\n            >>>     max_per_img=10))\n            >>> feat = torch.rand(1, 1, 3, 3)\n            >>> cls_score, bbox_pred = self.forward_single(feat)\n            >>> # note the input lists are over different levels, not images\n            >>> cls_scores, bbox_preds = [cls_score], [bbox_pred]\n            >>> result_list = self.get_bboxes(cls_scores, bbox_preds,\n            >>>                               img_metas, cfg)\n            >>> det_bboxes, det_labels = result_list[0]\n            >>> assert len(result_list) == 1\n            >>> assert det_bboxes.shape[1] == 5\n            >>> assert len(det_bboxes) == len(det_labels) == cfg.max_per_img\n        \"\"\"", "\n", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "\n", "num_levels", "=", "len", "(", "cls_scores", ")", "\n", "\n", "device", "=", "cls_scores", "[", "0", "]", ".", "device", "\n", "mlvl_anchors", "=", "[", "\n", "self", ".", "anchor_generators", "[", "i", "]", ".", "grid_anchors", "(", "\n", "cls_scores", "[", "i", "]", ".", "size", "(", ")", "[", "-", "2", ":", "]", ",", "\n", "self", ".", "anchor_strides", "[", "i", "]", ",", "\n", "device", "=", "device", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "result_list", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "len", "(", "img_metas", ")", ")", ":", "\n", "            ", "cls_score_list", "=", "[", "\n", "cls_scores", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "bbox_pred_list", "=", "[", "\n", "bbox_preds", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "img_shape", "=", "img_metas", "[", "img_id", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_metas", "[", "img_id", "]", "[", "'scale_factor'", "]", "\n", "proposals", "=", "self", ".", "get_bboxes_single", "(", "cls_score_list", ",", "bbox_pred_list", ",", "\n", "mlvl_anchors", ",", "img_shape", ",", "\n", "scale_factor", ",", "cfg", ",", "rescale", ")", "\n", "result_list", ".", "append", "(", "proposals", ")", "\n", "", "return", "result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.anchor_head.AnchorHead.get_bboxes_single": [[280, 331], ["zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmdet.core.multiclass_nms", "len", "len", "len", "cls_score.permute().reshape.permute().reshape.permute().reshape", "bbox_pred.permute().reshape.permute().reshape.permute().reshape", "cfg.get", "mmdet.core.delta2bbox", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cls_score.permute().reshape.permute().reshape.sigmoid", "cls_score.permute().reshape.permute().reshape.softmax", "max_scores.topk", "cls_score.permute().reshape.permute().reshape.size", "bbox_pred.permute().reshape.permute().reshape.size", "cls_score.permute().reshape.permute().reshape.permute", "bbox_pred.permute().reshape.permute().reshape.permute", "cls_score.permute().reshape.softmax.max", "scores[].max"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.bbox_nms.multiclass_nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.delta2bbox"], ["", "def", "get_bboxes_single", "(", "self", ",", "\n", "cls_score_list", ",", "\n", "bbox_pred_list", ",", "\n", "mlvl_anchors", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Transform outputs for a single batch item into labeled boxes.\n        \"\"\"", "\n", "assert", "len", "(", "cls_score_list", ")", "==", "len", "(", "bbox_pred_list", ")", "==", "len", "(", "mlvl_anchors", ")", "\n", "mlvl_bboxes", "=", "[", "]", "\n", "mlvl_scores", "=", "[", "]", "\n", "for", "cls_score", ",", "bbox_pred", ",", "anchors", "in", "zip", "(", "cls_score_list", ",", "\n", "bbox_pred_list", ",", "mlvl_anchors", ")", ":", "\n", "            ", "assert", "cls_score", ".", "size", "(", ")", "[", "-", "2", ":", "]", "==", "bbox_pred", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "cls_score", "=", "cls_score", ".", "permute", "(", "1", ",", "2", ",", "\n", "0", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "cls_out_channels", ")", "\n", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "                ", "scores", "=", "cls_score", ".", "sigmoid", "(", ")", "\n", "", "else", ":", "\n", "                ", "scores", "=", "cls_score", ".", "softmax", "(", "-", "1", ")", "\n", "", "bbox_pred", "=", "bbox_pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "nms_pre", "=", "cfg", ".", "get", "(", "'nms_pre'", ",", "-", "1", ")", "\n", "if", "nms_pre", ">", "0", "and", "scores", ".", "shape", "[", "0", "]", ">", "nms_pre", ":", "\n", "# Get maximum scores for foreground classes.", "\n", "                ", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "                    ", "max_scores", ",", "_", "=", "scores", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "max_scores", ",", "_", "=", "scores", "[", ":", ",", "1", ":", "]", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "_", ",", "topk_inds", "=", "max_scores", ".", "topk", "(", "nms_pre", ")", "\n", "anchors", "=", "anchors", "[", "topk_inds", ",", ":", "]", "\n", "bbox_pred", "=", "bbox_pred", "[", "topk_inds", ",", ":", "]", "\n", "scores", "=", "scores", "[", "topk_inds", ",", ":", "]", "\n", "", "bboxes", "=", "delta2bbox", "(", "anchors", ",", "bbox_pred", ",", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "img_shape", ")", "\n", "mlvl_bboxes", ".", "append", "(", "bboxes", ")", "\n", "mlvl_scores", ".", "append", "(", "scores", ")", "\n", "", "mlvl_bboxes", "=", "torch", ".", "cat", "(", "mlvl_bboxes", ")", "\n", "if", "rescale", ":", "\n", "            ", "mlvl_bboxes", "/=", "mlvl_bboxes", ".", "new_tensor", "(", "scale_factor", ")", "\n", "", "mlvl_scores", "=", "torch", ".", "cat", "(", "mlvl_scores", ")", "\n", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "# Add a dummy background class to the front when using sigmoid", "\n", "            ", "padding", "=", "mlvl_scores", ".", "new_zeros", "(", "mlvl_scores", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "mlvl_scores", "=", "torch", ".", "cat", "(", "[", "padding", ",", "mlvl_scores", "]", ",", "dim", "=", "1", ")", "\n", "", "det_bboxes", ",", "det_labels", "=", "multiclass_nms", "(", "mlvl_bboxes", ",", "mlvl_scores", ",", "\n", "cfg", ".", "score_thr", ",", "cfg", ".", "nms", ",", "\n", "cfg", ".", "max_per_img", ")", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.__init__": [[38, 108], ["dict", "dict", "dict", "torch.Module.__init__", "loss_cls.get", "builder.build_loss", "builder.build_loss", "builder.build_loss", "int", "int", "numpy.arange().astype", "numpy.repeat", "numpy.tile", "numpy.stack().reshape", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "reppoints_head.RepPointsHead._init_layers", "torch.Parameter", "torch.Parameter", "mmdet.core.PointGenerator", "numpy.sqrt", "numpy.arange", "numpy.stack", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead._init_layers"], ["def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "in_channels", ",", "\n", "feat_channels", "=", "256", ",", "\n", "point_feat_channels", "=", "256", ",", "\n", "stacked_convs", "=", "3", ",", "\n", "num_points", "=", "9", ",", "\n", "gradient_mul", "=", "0.1", ",", "\n", "point_strides", "=", "[", "8", ",", "16", ",", "32", ",", "64", ",", "128", "]", ",", "\n", "point_base_scale", "=", "4", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "loss_cls", "=", "dict", "(", "\n", "type", "=", "'FocalLoss'", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "gamma", "=", "2.0", ",", "\n", "alpha", "=", "0.25", ",", "\n", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_bbox_init", "=", "dict", "(", "\n", "type", "=", "'SmoothL1Loss'", ",", "beta", "=", "1.0", "/", "9.0", ",", "loss_weight", "=", "0.5", ")", ",", "\n", "loss_bbox_refine", "=", "dict", "(", "\n", "type", "=", "'SmoothL1Loss'", ",", "beta", "=", "1.0", "/", "9.0", ",", "loss_weight", "=", "1.0", ")", ",", "\n", "use_grid_points", "=", "False", ",", "\n", "center_init", "=", "True", ",", "\n", "transform_method", "=", "'moment'", ",", "\n", "moment_mul", "=", "0.01", ")", ":", "\n", "        ", "super", "(", "RepPointsHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "feat_channels", "=", "feat_channels", "\n", "self", ".", "point_feat_channels", "=", "point_feat_channels", "\n", "self", ".", "stacked_convs", "=", "stacked_convs", "\n", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "gradient_mul", "=", "gradient_mul", "\n", "self", ".", "point_base_scale", "=", "point_base_scale", "\n", "self", ".", "point_strides", "=", "point_strides", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "use_sigmoid_cls", "=", "loss_cls", ".", "get", "(", "'use_sigmoid'", ",", "False", ")", "\n", "self", ".", "sampling", "=", "loss_cls", "[", "'type'", "]", "not", "in", "[", "'FocalLoss'", "]", "\n", "self", ".", "loss_cls", "=", "build_loss", "(", "loss_cls", ")", "\n", "self", ".", "loss_bbox_init", "=", "build_loss", "(", "loss_bbox_init", ")", "\n", "self", ".", "loss_bbox_refine", "=", "build_loss", "(", "loss_bbox_refine", ")", "\n", "self", ".", "use_grid_points", "=", "use_grid_points", "\n", "self", ".", "center_init", "=", "center_init", "\n", "self", ".", "transform_method", "=", "transform_method", "\n", "if", "self", ".", "transform_method", "==", "'moment'", ":", "\n", "            ", "self", ".", "moment_transfer", "=", "nn", ".", "Parameter", "(", "\n", "data", "=", "torch", ".", "zeros", "(", "2", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "moment_mul", "=", "moment_mul", "\n", "", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "            ", "self", ".", "cls_out_channels", "=", "self", ".", "num_classes", "-", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "cls_out_channels", "=", "self", ".", "num_classes", "\n", "", "self", ".", "point_generators", "=", "[", "PointGenerator", "(", ")", "for", "_", "in", "self", ".", "point_strides", "]", "\n", "# we use deformable conv to extract points features", "\n", "self", ".", "dcn_kernel", "=", "int", "(", "np", ".", "sqrt", "(", "num_points", ")", ")", "\n", "self", ".", "dcn_pad", "=", "int", "(", "(", "self", ".", "dcn_kernel", "-", "1", ")", "/", "2", ")", "\n", "assert", "self", ".", "dcn_kernel", "*", "self", ".", "dcn_kernel", "==", "num_points", ",", "'The points number should be a square number.'", "\n", "assert", "self", ".", "dcn_kernel", "%", "2", "==", "1", ",", "'The points number should be an odd square number.'", "\n", "dcn_base", "=", "np", ".", "arange", "(", "-", "self", ".", "dcn_pad", ",", "\n", "self", ".", "dcn_pad", "+", "1", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "dcn_base_y", "=", "np", ".", "repeat", "(", "dcn_base", ",", "self", ".", "dcn_kernel", ")", "\n", "dcn_base_x", "=", "np", ".", "tile", "(", "dcn_base", ",", "self", ".", "dcn_kernel", ")", "\n", "dcn_base_offset", "=", "np", ".", "stack", "(", "[", "dcn_base_y", ",", "dcn_base_x", "]", ",", "axis", "=", "1", ")", ".", "reshape", "(", "\n", "(", "-", "1", ")", ")", "\n", "self", ".", "dcn_base_offset", "=", "torch", ".", "tensor", "(", "dcn_base_offset", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "_init_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead._init_layers": [[109, 150], ["torch.ReLU", "torch.ReLU", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "mmdet.ops.DeformConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mmdet.ops.DeformConv", "torch.Conv2d", "torch.Conv2d", "reppoints_head.RepPointsHead.cls_convs.append", "reppoints_head.RepPointsHead.reg_convs.append", "mmdet.ops.ConvModule", "mmdet.ops.ConvModule"], "methods", ["None"], ["", "def", "_init_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "cls_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "reg_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "stacked_convs", ")", ":", "\n", "            ", "chn", "=", "self", ".", "in_channels", "if", "i", "==", "0", "else", "self", ".", "feat_channels", "\n", "self", ".", "cls_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "self", ".", "reg_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "", "pts_out_dim", "=", "4", "if", "self", ".", "use_grid_points", "else", "2", "*", "self", ".", "num_points", "\n", "self", ".", "reppoints_cls_conv", "=", "DeformConv", "(", "self", ".", "feat_channels", ",", "\n", "self", ".", "point_feat_channels", ",", "\n", "self", ".", "dcn_kernel", ",", "1", ",", "self", ".", "dcn_pad", ")", "\n", "self", ".", "reppoints_cls_out", "=", "nn", ".", "Conv2d", "(", "self", ".", "point_feat_channels", ",", "\n", "self", ".", "cls_out_channels", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "reppoints_pts_init_conv", "=", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "\n", "self", ".", "point_feat_channels", ",", "3", ",", "\n", "1", ",", "1", ")", "\n", "self", ".", "reppoints_pts_init_out", "=", "nn", ".", "Conv2d", "(", "self", ".", "point_feat_channels", ",", "\n", "pts_out_dim", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "reppoints_pts_refine_conv", "=", "DeformConv", "(", "self", ".", "feat_channels", ",", "\n", "self", ".", "point_feat_channels", ",", "\n", "self", ".", "dcn_kernel", ",", "1", ",", "\n", "self", ".", "dcn_pad", ")", "\n", "self", ".", "reppoints_pts_refine_out", "=", "nn", ".", "Conv2d", "(", "self", ".", "point_feat_channels", ",", "\n", "pts_out_dim", ",", "1", ",", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.init_weights": [[151, 163], ["utils.bias_init_with_prob", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.weight_init.bias_init_with_prob"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "cls_convs", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "for", "m", "in", "self", ".", "reg_convs", ":", "\n", "            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "bias_cls", "=", "bias_init_with_prob", "(", "0.01", ")", "\n", "normal_init", "(", "self", ".", "reppoints_cls_conv", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "reppoints_cls_out", ",", "std", "=", "0.01", ",", "bias", "=", "bias_cls", ")", "\n", "normal_init", "(", "self", ".", "reppoints_pts_init_conv", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "reppoints_pts_init_out", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "reppoints_pts_refine_conv", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "reppoints_pts_refine_out", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.points2bbox": [[164, 214], ["pts.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pts_x.min", "pts_x.max", "pts_y.min", "pts_y.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pts_x.min", "pts_x.max", "pts_y.min", "pts_y.max", "pts_y.mean", "pts_x.mean", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "reppoints_head.RepPointsHead.moment_transfer.detach"], "methods", ["None"], ["", "def", "points2bbox", "(", "self", ",", "pts", ",", "y_first", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Converting the points set into bounding box.\n        :param pts: the input points sets (fields), each points\n            set (fields) is represented as 2n scalar.\n        :param y_first: if y_fisrt=True, the point set is represented as\n            [y1, x1, y2, x2 ... yn, xn], otherwise the point set is\n            represented as [x1, y1, x2, y2 ... xn, yn].\n        :return: each points set is converting to a bbox [x1, y1, x2, y2].\n        \"\"\"", "\n", "pts_reshape", "=", "pts", ".", "view", "(", "pts", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "2", ",", "*", "pts", ".", "shape", "[", "2", ":", "]", ")", "\n", "pts_y", "=", "pts_reshape", "[", ":", ",", ":", ",", "0", ",", "...", "]", "if", "y_first", "else", "pts_reshape", "[", ":", ",", ":", ",", "1", ",", "\n", "...", "]", "\n", "pts_x", "=", "pts_reshape", "[", ":", ",", ":", ",", "1", ",", "...", "]", "if", "y_first", "else", "pts_reshape", "[", ":", ",", ":", ",", "0", ",", "\n", "...", "]", "\n", "if", "self", ".", "transform_method", "==", "'minmax'", ":", "\n", "            ", "bbox_left", "=", "pts_x", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "bbox_right", "=", "pts_x", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "bbox_up", "=", "pts_y", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "bbox_bottom", "=", "pts_y", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "bbox", "=", "torch", ".", "cat", "(", "[", "bbox_left", ",", "bbox_up", ",", "bbox_right", ",", "bbox_bottom", "]", ",", "\n", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "transform_method", "==", "'partial_minmax'", ":", "\n", "            ", "pts_y", "=", "pts_y", "[", ":", ",", ":", "4", ",", "...", "]", "\n", "pts_x", "=", "pts_x", "[", ":", ",", ":", "4", ",", "...", "]", "\n", "bbox_left", "=", "pts_x", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "bbox_right", "=", "pts_x", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "bbox_up", "=", "pts_y", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "bbox_bottom", "=", "pts_y", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "bbox", "=", "torch", ".", "cat", "(", "[", "bbox_left", ",", "bbox_up", ",", "bbox_right", ",", "bbox_bottom", "]", ",", "\n", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "transform_method", "==", "'moment'", ":", "\n", "            ", "pts_y_mean", "=", "pts_y", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "pts_x_mean", "=", "pts_x", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "pts_y_std", "=", "torch", ".", "std", "(", "pts_y", "-", "pts_y_mean", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "pts_x_std", "=", "torch", ".", "std", "(", "pts_x", "-", "pts_x_mean", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "moment_transfer", "=", "(", "self", ".", "moment_transfer", "*", "self", ".", "moment_mul", ")", "+", "(", "\n", "self", ".", "moment_transfer", ".", "detach", "(", ")", "*", "(", "1", "-", "self", ".", "moment_mul", ")", ")", "\n", "moment_width_transfer", "=", "moment_transfer", "[", "0", "]", "\n", "moment_height_transfer", "=", "moment_transfer", "[", "1", "]", "\n", "half_width", "=", "pts_x_std", "*", "torch", ".", "exp", "(", "moment_width_transfer", ")", "\n", "half_height", "=", "pts_y_std", "*", "torch", ".", "exp", "(", "moment_height_transfer", ")", "\n", "bbox", "=", "torch", ".", "cat", "(", "[", "\n", "pts_x_mean", "-", "half_width", ",", "pts_y_mean", "-", "half_height", ",", "\n", "pts_x_mean", "+", "half_width", ",", "pts_y_mean", "+", "half_height", "\n", "]", ",", "\n", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.gen_grid_from_reg": [[215, 248], ["torch.linspace().view().type_as", "torch.linspace().view().type_as", "torch.linspace().view().type_as", "torch.linspace().view().type_as", "grid_x.view.view.unsqueeze().repeat", "grid_x.view.view.view", "grid_y.view.view.unsqueeze().repeat", "grid_y.view.view.view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "grid_yx.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "grid_x.view.view.unsqueeze", "grid_y.view.view.unsqueeze", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["None"], ["", "def", "gen_grid_from_reg", "(", "self", ",", "reg", ",", "previous_boxes", ")", ":", "\n", "        ", "\"\"\"\n        Base on the previous bboxes and regression values, we compute the\n            regressed bboxes and generate the grids on the bboxes.\n        :param reg: the regression value to previous bboxes.\n        :param previous_boxes: previous bboxes.\n        :return: generate grids on the regressed bboxes.\n        \"\"\"", "\n", "b", ",", "_", ",", "h", ",", "w", "=", "reg", ".", "shape", "\n", "bxy", "=", "(", "previous_boxes", "[", ":", ",", ":", "2", ",", "...", "]", "+", "previous_boxes", "[", ":", ",", "2", ":", ",", "...", "]", ")", "/", "2.", "\n", "bwh", "=", "(", "previous_boxes", "[", ":", ",", "2", ":", ",", "...", "]", "-", "\n", "previous_boxes", "[", ":", ",", ":", "2", ",", "...", "]", ")", ".", "clamp", "(", "min", "=", "1e-6", ")", "\n", "grid_topleft", "=", "bxy", "+", "bwh", "*", "reg", "[", ":", ",", ":", "2", ",", "...", "]", "-", "0.5", "*", "bwh", "*", "torch", ".", "exp", "(", "\n", "reg", "[", ":", ",", "2", ":", ",", "...", "]", ")", "\n", "grid_wh", "=", "bwh", "*", "torch", ".", "exp", "(", "reg", "[", ":", ",", "2", ":", ",", "...", "]", ")", "\n", "grid_left", "=", "grid_topleft", "[", ":", ",", "[", "0", "]", ",", "...", "]", "\n", "grid_top", "=", "grid_topleft", "[", ":", ",", "[", "1", "]", ",", "...", "]", "\n", "grid_width", "=", "grid_wh", "[", ":", ",", "[", "0", "]", ",", "...", "]", "\n", "grid_height", "=", "grid_wh", "[", ":", ",", "[", "1", "]", ",", "...", "]", "\n", "intervel", "=", "torch", ".", "linspace", "(", "0.", ",", "1.", ",", "self", ".", "dcn_kernel", ")", ".", "view", "(", "\n", "1", ",", "self", ".", "dcn_kernel", ",", "1", ",", "1", ")", ".", "type_as", "(", "reg", ")", "\n", "grid_x", "=", "grid_left", "+", "grid_width", "*", "intervel", "\n", "grid_x", "=", "grid_x", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "dcn_kernel", ",", "1", ",", "1", ",", "1", ")", "\n", "grid_x", "=", "grid_x", ".", "view", "(", "b", ",", "-", "1", ",", "h", ",", "w", ")", "\n", "grid_y", "=", "grid_top", "+", "grid_height", "*", "intervel", "\n", "grid_y", "=", "grid_y", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "dcn_kernel", ",", "1", ",", "1", ")", "\n", "grid_y", "=", "grid_y", ".", "view", "(", "b", ",", "-", "1", ",", "h", ",", "w", ")", "\n", "grid_yx", "=", "torch", ".", "stack", "(", "[", "grid_y", ",", "grid_x", "]", ",", "dim", "=", "2", ")", "\n", "grid_yx", "=", "grid_yx", ".", "view", "(", "b", ",", "-", "1", ",", "h", ",", "w", ")", "\n", "regressed_bbox", "=", "torch", ".", "cat", "(", "[", "\n", "grid_left", ",", "grid_top", ",", "grid_left", "+", "grid_width", ",", "grid_top", "+", "grid_height", "\n", "]", ",", "1", ")", "\n", "return", "grid_yx", ",", "regressed_bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.forward_single": [[249, 289], ["reppoints_head.RepPointsHead.dcn_base_offset.type_as", "reppoints_head.RepPointsHead.reppoints_pts_init_out", "reppoints_head.RepPointsHead.reppoints_cls_out", "reppoints_head.RepPointsHead.reppoints_pts_refine_out", "x.new_tensor().view", "cls_conv", "reg_conv", "reppoints_head.RepPointsHead.relu", "reppoints_head.RepPointsHead.gen_grid_from_reg", "reppoints_head.RepPointsHead.relu", "reppoints_head.RepPointsHead.relu", "reppoints_head.RepPointsHead.gen_grid_from_reg", "reppoints_head.RepPointsHead.reppoints_pts_init_conv", "x.new_tensor().view.detach", "reppoints_head.RepPointsHead.detach", "reppoints_head.RepPointsHead.reppoints_cls_conv", "reppoints_head.RepPointsHead.reppoints_pts_refine_conv", "bbox_out_init.detach", "reppoints_head.RepPointsHead.detach", "reppoints_head.RepPointsHead.max", "x.new_tensor"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.gen_grid_from_reg", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.gen_grid_from_reg"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "dcn_base_offset", "=", "self", ".", "dcn_base_offset", ".", "type_as", "(", "x", ")", "\n", "# If we use center_init, the initial reppoints is from center points.", "\n", "# If we use bounding bbox representation, the initial reppoints is", "\n", "#   from regular grid placed on a pre-defined bbox.", "\n", "if", "self", ".", "use_grid_points", "or", "not", "self", ".", "center_init", ":", "\n", "            ", "scale", "=", "self", ".", "point_base_scale", "/", "2", "\n", "points_init", "=", "dcn_base_offset", "/", "dcn_base_offset", ".", "max", "(", ")", "*", "scale", "\n", "bbox_init", "=", "x", ".", "new_tensor", "(", "[", "-", "scale", ",", "-", "scale", ",", "scale", ",", "\n", "scale", "]", ")", ".", "view", "(", "1", ",", "4", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "points_init", "=", "0", "\n", "", "cls_feat", "=", "x", "\n", "pts_feat", "=", "x", "\n", "for", "cls_conv", "in", "self", ".", "cls_convs", ":", "\n", "            ", "cls_feat", "=", "cls_conv", "(", "cls_feat", ")", "\n", "", "for", "reg_conv", "in", "self", ".", "reg_convs", ":", "\n", "            ", "pts_feat", "=", "reg_conv", "(", "pts_feat", ")", "\n", "# initialize reppoints", "\n", "", "pts_out_init", "=", "self", ".", "reppoints_pts_init_out", "(", "\n", "self", ".", "relu", "(", "self", ".", "reppoints_pts_init_conv", "(", "pts_feat", ")", ")", ")", "\n", "if", "self", ".", "use_grid_points", ":", "\n", "            ", "pts_out_init", ",", "bbox_out_init", "=", "self", ".", "gen_grid_from_reg", "(", "\n", "pts_out_init", ",", "bbox_init", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "pts_out_init", "=", "pts_out_init", "+", "points_init", "\n", "# refine and classify reppoints", "\n", "", "pts_out_init_grad_mul", "=", "(", "1", "-", "self", ".", "gradient_mul", ")", "*", "pts_out_init", ".", "detach", "(", "\n", ")", "+", "self", ".", "gradient_mul", "*", "pts_out_init", "\n", "dcn_offset", "=", "pts_out_init_grad_mul", "-", "dcn_base_offset", "\n", "cls_out", "=", "self", ".", "reppoints_cls_out", "(", "\n", "self", ".", "relu", "(", "self", ".", "reppoints_cls_conv", "(", "cls_feat", ",", "dcn_offset", ")", ")", ")", "\n", "pts_out_refine", "=", "self", ".", "reppoints_pts_refine_out", "(", "\n", "self", ".", "relu", "(", "self", ".", "reppoints_pts_refine_conv", "(", "pts_feat", ",", "dcn_offset", ")", ")", ")", "\n", "if", "self", ".", "use_grid_points", ":", "\n", "            ", "pts_out_refine", ",", "bbox_out_refine", "=", "self", ".", "gen_grid_from_reg", "(", "\n", "pts_out_refine", ",", "bbox_out_init", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "pts_out_refine", "=", "pts_out_refine", "+", "pts_out_init", ".", "detach", "(", ")", "\n", "", "return", "cls_out", ",", "pts_out_init", ",", "pts_out_refine", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.forward": [[290, 292], ["mmdet.core.multi_apply"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.multi_apply"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "return", "multi_apply", "(", "self", ".", "forward_single", ",", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_points": [[293, 332], ["len", "len", "range", "enumerate", "reppoints_head.RepPointsHead.point_generators[].grid_points", "multi_level_points.append", "range", "valid_flag_list.append", "point.clone", "range", "min", "min", "reppoints_head.RepPointsHead.point_generators[].valid_flags", "multi_level_flags.append", "int", "int", "numpy.ceil", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_generator.PointGenerator.grid_points", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_generator.PointGenerator.valid_flags"], ["", "def", "get_points", "(", "self", ",", "featmap_sizes", ",", "img_metas", ")", ":", "\n", "        ", "\"\"\"Get points according to feature map sizes.\n\n        Args:\n            featmap_sizes (list[tuple]): Multi-level feature map sizes.\n            img_metas (list[dict]): Image meta info.\n\n        Returns:\n            tuple: points of each image, valid flags of each image\n        \"\"\"", "\n", "num_imgs", "=", "len", "(", "img_metas", ")", "\n", "num_levels", "=", "len", "(", "featmap_sizes", ")", "\n", "\n", "# since feature map sizes of all images are the same, we only compute", "\n", "# points center for one time", "\n", "multi_level_points", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "points", "=", "self", ".", "point_generators", "[", "i", "]", ".", "grid_points", "(", "\n", "featmap_sizes", "[", "i", "]", ",", "self", ".", "point_strides", "[", "i", "]", ")", "\n", "multi_level_points", ".", "append", "(", "points", ")", "\n", "", "points_list", "=", "[", "[", "point", ".", "clone", "(", ")", "for", "point", "in", "multi_level_points", "]", "\n", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "\n", "# for each image, we compute valid flags of multi level grids", "\n", "valid_flag_list", "=", "[", "]", "\n", "for", "img_id", ",", "img_meta", "in", "enumerate", "(", "img_metas", ")", ":", "\n", "            ", "multi_level_flags", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "                ", "point_stride", "=", "self", ".", "point_strides", "[", "i", "]", "\n", "feat_h", ",", "feat_w", "=", "featmap_sizes", "[", "i", "]", "\n", "h", ",", "w", "=", "img_meta", "[", "'pad_shape'", "]", "[", ":", "2", "]", "\n", "valid_feat_h", "=", "min", "(", "int", "(", "np", ".", "ceil", "(", "h", "/", "point_stride", ")", ")", ",", "feat_h", ")", "\n", "valid_feat_w", "=", "min", "(", "int", "(", "np", ".", "ceil", "(", "w", "/", "point_stride", ")", ")", ",", "feat_w", ")", "\n", "flags", "=", "self", ".", "point_generators", "[", "i", "]", ".", "valid_flags", "(", "\n", "(", "feat_h", ",", "feat_w", ")", ",", "(", "valid_feat_h", ",", "valid_feat_w", ")", ")", "\n", "multi_level_flags", ".", "append", "(", "flags", ")", "\n", "", "valid_flag_list", ".", "append", "(", "multi_level_flags", ")", "\n", "\n", "", "return", "points_list", ",", "valid_flag_list", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.centers_to_bboxes": [[333, 348], ["enumerate", "range", "bbox_list.append", "len", "torch.Tensor().view().type_as", "torch.Tensor().view().type_as", "torch.Tensor().view().type_as", "torch.Tensor().view().type_as", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "bbox.append", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "centers_to_bboxes", "(", "self", ",", "point_list", ")", ":", "\n", "        ", "\"\"\"Get bboxes according to center points. Only used in MaxIOUAssigner.\n        \"\"\"", "\n", "bbox_list", "=", "[", "]", "\n", "for", "i_img", ",", "point", "in", "enumerate", "(", "point_list", ")", ":", "\n", "            ", "bbox", "=", "[", "]", "\n", "for", "i_lvl", "in", "range", "(", "len", "(", "self", ".", "point_strides", ")", ")", ":", "\n", "                ", "scale", "=", "self", ".", "point_base_scale", "*", "self", ".", "point_strides", "[", "i_lvl", "]", "*", "0.5", "\n", "bbox_shift", "=", "torch", ".", "Tensor", "(", "[", "-", "scale", ",", "-", "scale", ",", "scale", ",", "\n", "scale", "]", ")", ".", "view", "(", "1", ",", "4", ")", ".", "type_as", "(", "point", "[", "0", "]", ")", "\n", "bbox_center", "=", "torch", ".", "cat", "(", "\n", "[", "point", "[", "i_lvl", "]", "[", ":", ",", ":", "2", "]", ",", "point", "[", "i_lvl", "]", "[", ":", ",", ":", "2", "]", "]", ",", "dim", "=", "1", ")", "\n", "bbox", ".", "append", "(", "bbox_center", "+", "bbox_shift", ")", "\n", "", "bbox_list", ".", "append", "(", "bbox", ")", "\n", "", "return", "bbox_list", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.offset_to_pts": [[349, 370], ["range", "len", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "pts_list.append", "len", "[].repeat", "pts_shift.permute().view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "xy_pts_shift.view.view.view", "torch.stack.append", "torch.stack.append", "pts_shift.permute"], "methods", ["None"], ["", "def", "offset_to_pts", "(", "self", ",", "center_list", ",", "pred_list", ")", ":", "\n", "        ", "\"\"\"Change from point offset to point coordinate.\n        \"\"\"", "\n", "pts_list", "=", "[", "]", "\n", "for", "i_lvl", "in", "range", "(", "len", "(", "self", ".", "point_strides", ")", ")", ":", "\n", "            ", "pts_lvl", "=", "[", "]", "\n", "for", "i_img", "in", "range", "(", "len", "(", "center_list", ")", ")", ":", "\n", "                ", "pts_center", "=", "center_list", "[", "i_img", "]", "[", "i_lvl", "]", "[", ":", ",", ":", "2", "]", ".", "repeat", "(", "\n", "1", ",", "self", ".", "num_points", ")", "\n", "pts_shift", "=", "pred_list", "[", "i_lvl", "]", "[", "i_img", "]", "\n", "yx_pts_shift", "=", "pts_shift", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "view", "(", "\n", "-", "1", ",", "2", "*", "self", ".", "num_points", ")", "\n", "y_pts_shift", "=", "yx_pts_shift", "[", "...", ",", "0", ":", ":", "2", "]", "\n", "x_pts_shift", "=", "yx_pts_shift", "[", "...", ",", "1", ":", ":", "2", "]", "\n", "xy_pts_shift", "=", "torch", ".", "stack", "(", "[", "x_pts_shift", ",", "y_pts_shift", "]", ",", "-", "1", ")", "\n", "xy_pts_shift", "=", "xy_pts_shift", ".", "view", "(", "*", "yx_pts_shift", ".", "shape", "[", ":", "-", "1", "]", ",", "-", "1", ")", "\n", "pts", "=", "xy_pts_shift", "*", "self", ".", "point_strides", "[", "i_lvl", "]", "+", "pts_center", "\n", "pts_lvl", ".", "append", "(", "pts", ")", "\n", "", "pts_lvl", "=", "torch", ".", "stack", "(", "pts_lvl", ",", "0", ")", "\n", "pts_list", ".", "append", "(", "pts_lvl", ")", "\n", "", "return", "pts_list", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.loss_single": [[371, 407], ["labels.reshape.reshape.reshape", "label_weights.reshape.reshape.reshape", "cls_score.permute().reshape.permute().reshape.permute().reshape", "reppoints_head.RepPointsHead.loss_cls", "bbox_gt_init.reshape.reshape.reshape", "bbox_weights_init.reshape.reshape.reshape", "reppoints_head.RepPointsHead.points2bbox", "bbox_gt_refine.reshape.reshape.reshape", "bbox_weights_refine.reshape.reshape.reshape", "reppoints_head.RepPointsHead.points2bbox", "reppoints_head.RepPointsHead.loss_bbox_init", "reppoints_head.RepPointsHead.loss_bbox_refine", "pts_pred_init.reshape", "pts_pred_refine.reshape", "cls_score.permute().reshape.permute().reshape.permute"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.points2bbox", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.points2bbox"], ["", "def", "loss_single", "(", "self", ",", "cls_score", ",", "pts_pred_init", ",", "pts_pred_refine", ",", "labels", ",", "\n", "label_weights", ",", "bbox_gt_init", ",", "bbox_weights_init", ",", "\n", "bbox_gt_refine", ",", "bbox_weights_refine", ",", "stride", ",", "\n", "num_total_samples_init", ",", "num_total_samples_refine", ")", ":", "\n", "# classification loss", "\n", "        ", "labels", "=", "labels", ".", "reshape", "(", "-", "1", ")", "\n", "label_weights", "=", "label_weights", ".", "reshape", "(", "-", "1", ")", "\n", "cls_score", "=", "cls_score", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "\n", "1", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "cls_out_channels", ")", "\n", "loss_cls", "=", "self", ".", "loss_cls", "(", "\n", "cls_score", ",", "\n", "labels", ",", "\n", "label_weights", ",", "\n", "avg_factor", "=", "num_total_samples_refine", ")", "\n", "\n", "# points loss", "\n", "bbox_gt_init", "=", "bbox_gt_init", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "bbox_weights_init", "=", "bbox_weights_init", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "bbox_pred_init", "=", "self", ".", "points2bbox", "(", "\n", "pts_pred_init", ".", "reshape", "(", "-", "1", ",", "2", "*", "self", ".", "num_points", ")", ",", "y_first", "=", "False", ")", "\n", "bbox_gt_refine", "=", "bbox_gt_refine", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "bbox_weights_refine", "=", "bbox_weights_refine", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "bbox_pred_refine", "=", "self", ".", "points2bbox", "(", "\n", "pts_pred_refine", ".", "reshape", "(", "-", "1", ",", "2", "*", "self", ".", "num_points", ")", ",", "y_first", "=", "False", ")", "\n", "normalize_term", "=", "self", ".", "point_base_scale", "*", "stride", "\n", "loss_pts_init", "=", "self", ".", "loss_bbox_init", "(", "\n", "bbox_pred_init", "/", "normalize_term", ",", "\n", "bbox_gt_init", "/", "normalize_term", ",", "\n", "bbox_weights_init", ",", "\n", "avg_factor", "=", "num_total_samples_init", ")", "\n", "loss_pts_refine", "=", "self", ".", "loss_bbox_refine", "(", "\n", "bbox_pred_refine", "/", "normalize_term", ",", "\n", "bbox_gt_refine", "/", "normalize_term", ",", "\n", "bbox_weights_refine", ",", "\n", "avg_factor", "=", "num_total_samples_refine", ")", "\n", "return", "loss_cls", ",", "loss_pts_init", ",", "loss_pts_refine", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.loss": [[408, 505], ["reppoints_head.RepPointsHead.get_points", "reppoints_head.RepPointsHead.offset_to_pts", "mmdet.core.point_target", "reppoints_head.RepPointsHead.get_points", "reppoints_head.RepPointsHead.offset_to_pts", "enumerate", "mmdet.core.point_target", "mmdet.core.multi_apply", "len", "len", "reppoints_head.RepPointsHead.centers_to_bboxes", "range", "reppoints_head.RepPointsHead.append", "featmap.size", "len", "reppoints_head.RepPointsHead.points2bbox", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "bbox.append", "pts_preds_init[].detach", "bbox_shift[].permute().reshape", "bbox_shift[].permute"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_points", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.offset_to_pts", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.point_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_points", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.offset_to_pts", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.point_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.multi_apply", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.centers_to_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.points2bbox"], ["", "def", "loss", "(", "self", ",", "\n", "cls_scores", ",", "\n", "pts_preds_init", ",", "\n", "pts_preds_refine", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "        ", "featmap_sizes", "=", "[", "featmap", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "featmap", "in", "cls_scores", "]", "\n", "assert", "len", "(", "featmap_sizes", ")", "==", "len", "(", "self", ".", "point_generators", ")", "\n", "label_channels", "=", "self", ".", "cls_out_channels", "if", "self", ".", "use_sigmoid_cls", "else", "1", "\n", "\n", "# target for initial stage", "\n", "center_list", ",", "valid_flag_list", "=", "self", ".", "get_points", "(", "featmap_sizes", ",", "\n", "img_metas", ")", "\n", "pts_coordinate_preds_init", "=", "self", ".", "offset_to_pts", "(", "center_list", ",", "\n", "pts_preds_init", ")", "\n", "if", "cfg", ".", "init", ".", "assigner", "[", "'type'", "]", "==", "'PointAssigner'", ":", "\n", "# Assign target for center list", "\n", "            ", "candidate_list", "=", "center_list", "\n", "", "else", ":", "\n", "# transform center list to bbox list and", "\n", "#   assign target for bbox list", "\n", "            ", "bbox_list", "=", "self", ".", "centers_to_bboxes", "(", "center_list", ")", "\n", "candidate_list", "=", "bbox_list", "\n", "", "cls_reg_targets_init", "=", "point_target", "(", "\n", "candidate_list", ",", "\n", "valid_flag_list", ",", "\n", "gt_bboxes", ",", "\n", "img_metas", ",", "\n", "cfg", ".", "init", ",", "\n", "gt_bboxes_ignore_list", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels_list", "=", "gt_labels", ",", "\n", "label_channels", "=", "label_channels", ",", "\n", "sampling", "=", "self", ".", "sampling", ")", "\n", "(", "*", "_", ",", "bbox_gt_list_init", ",", "candidate_list_init", ",", "bbox_weights_list_init", ",", "\n", "num_total_pos_init", ",", "num_total_neg_init", ")", "=", "cls_reg_targets_init", "\n", "num_total_samples_init", "=", "(", "\n", "num_total_pos_init", "+", "\n", "num_total_neg_init", "if", "self", ".", "sampling", "else", "num_total_pos_init", ")", "\n", "\n", "# target for refinement stage", "\n", "center_list", ",", "valid_flag_list", "=", "self", ".", "get_points", "(", "featmap_sizes", ",", "\n", "img_metas", ")", "\n", "pts_coordinate_preds_refine", "=", "self", ".", "offset_to_pts", "(", "\n", "center_list", ",", "pts_preds_refine", ")", "\n", "bbox_list", "=", "[", "]", "\n", "for", "i_img", ",", "center", "in", "enumerate", "(", "center_list", ")", ":", "\n", "            ", "bbox", "=", "[", "]", "\n", "for", "i_lvl", "in", "range", "(", "len", "(", "pts_preds_refine", ")", ")", ":", "\n", "                ", "bbox_preds_init", "=", "self", ".", "points2bbox", "(", "\n", "pts_preds_init", "[", "i_lvl", "]", ".", "detach", "(", ")", ")", "\n", "bbox_shift", "=", "bbox_preds_init", "*", "self", ".", "point_strides", "[", "i_lvl", "]", "\n", "bbox_center", "=", "torch", ".", "cat", "(", "\n", "[", "center", "[", "i_lvl", "]", "[", ":", ",", ":", "2", "]", ",", "center", "[", "i_lvl", "]", "[", ":", ",", ":", "2", "]", "]", ",", "dim", "=", "1", ")", "\n", "bbox", ".", "append", "(", "bbox_center", "+", "\n", "bbox_shift", "[", "i_img", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", ")", "\n", "", "bbox_list", ".", "append", "(", "bbox", ")", "\n", "", "cls_reg_targets_refine", "=", "point_target", "(", "\n", "bbox_list", ",", "\n", "valid_flag_list", ",", "\n", "gt_bboxes", ",", "\n", "img_metas", ",", "\n", "cfg", ".", "refine", ",", "\n", "gt_bboxes_ignore_list", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels_list", "=", "gt_labels", ",", "\n", "label_channels", "=", "label_channels", ",", "\n", "sampling", "=", "self", ".", "sampling", ")", "\n", "(", "labels_list", ",", "label_weights_list", ",", "bbox_gt_list_refine", ",", "\n", "candidate_list_refine", ",", "bbox_weights_list_refine", ",", "num_total_pos_refine", ",", "\n", "num_total_neg_refine", ")", "=", "cls_reg_targets_refine", "\n", "num_total_samples_refine", "=", "(", "\n", "num_total_pos_refine", "+", "\n", "num_total_neg_refine", "if", "self", ".", "sampling", "else", "num_total_pos_refine", ")", "\n", "\n", "# compute loss", "\n", "losses_cls", ",", "losses_pts_init", ",", "losses_pts_refine", "=", "multi_apply", "(", "\n", "self", ".", "loss_single", ",", "\n", "cls_scores", ",", "\n", "pts_coordinate_preds_init", ",", "\n", "pts_coordinate_preds_refine", ",", "\n", "labels_list", ",", "\n", "label_weights_list", ",", "\n", "bbox_gt_list_init", ",", "\n", "bbox_weights_list_init", ",", "\n", "bbox_gt_list_refine", ",", "\n", "bbox_weights_list_refine", ",", "\n", "self", ".", "point_strides", ",", "\n", "num_total_samples_init", "=", "num_total_samples_init", ",", "\n", "num_total_samples_refine", "=", "num_total_samples_refine", ")", "\n", "loss_dict_all", "=", "{", "\n", "'loss_cls'", ":", "losses_cls", ",", "\n", "'loss_pts_init'", ":", "losses_pts_init", ",", "\n", "'loss_pts_refine'", ":", "losses_pts_refine", "\n", "}", "\n", "return", "loss_dict_all", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_bboxes": [[506, 541], ["len", "range", "len", "len", "reppoints_head.RepPointsHead.points2bbox", "reppoints_head.RepPointsHead.point_generators[].grid_points", "len", "reppoints_head.RepPointsHead.get_bboxes_single", "result_list.append", "range", "[].detach", "[].detach", "cls_scores[].size", "range", "range"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.points2bbox", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_generator.PointGenerator.grid_points", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_bboxes_single"], ["", "def", "get_bboxes", "(", "self", ",", "\n", "cls_scores", ",", "\n", "pts_preds_init", ",", "\n", "pts_preds_refine", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ",", "\n", "nms", "=", "True", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "pts_preds_refine", ")", "\n", "bbox_preds_refine", "=", "[", "\n", "self", ".", "points2bbox", "(", "pts_pred_refine", ")", "\n", "for", "pts_pred_refine", "in", "pts_preds_refine", "\n", "]", "\n", "num_levels", "=", "len", "(", "cls_scores", ")", "\n", "mlvl_points", "=", "[", "\n", "self", ".", "point_generators", "[", "i", "]", ".", "grid_points", "(", "cls_scores", "[", "i", "]", ".", "size", "(", ")", "[", "-", "2", ":", "]", ",", "\n", "self", ".", "point_strides", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "result_list", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "len", "(", "img_metas", ")", ")", ":", "\n", "            ", "cls_score_list", "=", "[", "\n", "cls_scores", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "bbox_pred_list", "=", "[", "\n", "bbox_preds_refine", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "\n", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "img_shape", "=", "img_metas", "[", "img_id", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_metas", "[", "img_id", "]", "[", "'scale_factor'", "]", "\n", "proposals", "=", "self", ".", "get_bboxes_single", "(", "cls_score_list", ",", "bbox_pred_list", ",", "\n", "mlvl_points", ",", "img_shape", ",", "\n", "scale_factor", ",", "cfg", ",", "rescale", ",", "nms", ")", "\n", "result_list", ".", "append", "(", "proposals", ")", "\n", "", "return", "result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_bboxes_single": [[542, 597], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len", "len", "zip", "cls_score.permute().reshape.permute().reshape.permute().reshape", "bbox_pred.permute().reshape.permute().reshape.permute().reshape", "cfg.get", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "bboxes[].clamp", "bboxes[].clamp", "bboxes[].clamp", "bboxes[].clamp", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.new_tensor", "torch.cat.new_tensor", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmdet.core.multiclass_nms", "cls_score.permute().reshape.permute().reshape.sigmoid", "cls_score.permute().reshape.permute().reshape.softmax", "max_scores.topk", "cls_score.permute().reshape.permute().reshape.size", "bbox_pred.permute().reshape.permute().reshape.size", "cls_score.permute().reshape.permute().reshape.permute", "bbox_pred.permute().reshape.permute().reshape.permute", "cls_score.permute().reshape.softmax.max", "scores[].max"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.bbox_nms.multiclass_nms"], ["", "def", "get_bboxes_single", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "mlvl_points", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ",", "\n", "nms", "=", "True", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "==", "len", "(", "mlvl_points", ")", "\n", "mlvl_bboxes", "=", "[", "]", "\n", "mlvl_scores", "=", "[", "]", "\n", "for", "i_lvl", ",", "(", "cls_score", ",", "bbox_pred", ",", "points", ")", "in", "enumerate", "(", "\n", "zip", "(", "cls_scores", ",", "bbox_preds", ",", "mlvl_points", ")", ")", ":", "\n", "            ", "assert", "cls_score", ".", "size", "(", ")", "[", "-", "2", ":", "]", "==", "bbox_pred", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "cls_score", "=", "cls_score", ".", "permute", "(", "1", ",", "2", ",", "\n", "0", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "cls_out_channels", ")", "\n", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "                ", "scores", "=", "cls_score", ".", "sigmoid", "(", ")", "\n", "", "else", ":", "\n", "                ", "scores", "=", "cls_score", ".", "softmax", "(", "-", "1", ")", "\n", "", "bbox_pred", "=", "bbox_pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "nms_pre", "=", "cfg", ".", "get", "(", "'nms_pre'", ",", "-", "1", ")", "\n", "if", "nms_pre", ">", "0", "and", "scores", ".", "shape", "[", "0", "]", ">", "nms_pre", ":", "\n", "                ", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "                    ", "max_scores", ",", "_", "=", "scores", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "max_scores", ",", "_", "=", "scores", "[", ":", ",", "1", ":", "]", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "_", ",", "topk_inds", "=", "max_scores", ".", "topk", "(", "nms_pre", ")", "\n", "points", "=", "points", "[", "topk_inds", ",", ":", "]", "\n", "bbox_pred", "=", "bbox_pred", "[", "topk_inds", ",", ":", "]", "\n", "scores", "=", "scores", "[", "topk_inds", ",", ":", "]", "\n", "", "bbox_pos_center", "=", "torch", ".", "cat", "(", "[", "points", "[", ":", ",", ":", "2", "]", ",", "points", "[", ":", ",", ":", "2", "]", "]", ",", "dim", "=", "1", ")", "\n", "bboxes", "=", "bbox_pred", "*", "self", ".", "point_strides", "[", "i_lvl", "]", "+", "bbox_pos_center", "\n", "x1", "=", "bboxes", "[", ":", ",", "0", "]", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "img_shape", "[", "1", "]", ")", "\n", "y1", "=", "bboxes", "[", ":", ",", "1", "]", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "img_shape", "[", "0", "]", ")", "\n", "x2", "=", "bboxes", "[", ":", ",", "2", "]", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "img_shape", "[", "1", "]", ")", "\n", "y2", "=", "bboxes", "[", ":", ",", "3", "]", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "img_shape", "[", "0", "]", ")", "\n", "bboxes", "=", "torch", ".", "stack", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "dim", "=", "-", "1", ")", "\n", "mlvl_bboxes", ".", "append", "(", "bboxes", ")", "\n", "mlvl_scores", ".", "append", "(", "scores", ")", "\n", "", "mlvl_bboxes", "=", "torch", ".", "cat", "(", "mlvl_bboxes", ")", "\n", "if", "rescale", ":", "\n", "            ", "mlvl_bboxes", "/=", "mlvl_bboxes", ".", "new_tensor", "(", "scale_factor", ")", "\n", "", "mlvl_scores", "=", "torch", ".", "cat", "(", "mlvl_scores", ")", "\n", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "            ", "padding", "=", "mlvl_scores", ".", "new_zeros", "(", "mlvl_scores", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "mlvl_scores", "=", "torch", ".", "cat", "(", "[", "padding", ",", "mlvl_scores", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "nms", ":", "\n", "            ", "det_bboxes", ",", "det_labels", "=", "multiclass_nms", "(", "mlvl_bboxes", ",", "mlvl_scores", ",", "\n", "cfg", ".", "score_thr", ",", "cfg", ".", "nms", ",", "\n", "cfg", ".", "max_per_img", ")", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "", "else", ":", "\n", "            ", "return", "mlvl_bboxes", ",", "mlvl_scores", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.double_head_rcnn.DoubleHeadRCNN.__init__": [[11, 14], ["two_stage.TwoStageDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reg_roi_scale_factor", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "reg_roi_scale_factor", "=", "reg_roi_scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.double_head_rcnn.DoubleHeadRCNN.forward_dummy": [[15, 38], ["double_head_rcnn.DoubleHeadRCNN.extract_feat", "torch.randn().to", "mmdet.core.bbox2roi", "double_head_rcnn.DoubleHeadRCNN.bbox_roi_extractor", "double_head_rcnn.DoubleHeadRCNN.bbox_roi_extractor", "double_head_rcnn.DoubleHeadRCNN.bbox_head", "double_head_rcnn.DoubleHeadRCNN.rpn_head", "double_head_rcnn.DoubleHeadRCNN.shared_head", "double_head_rcnn.DoubleHeadRCNN.shared_head", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi"], ["", "def", "forward_dummy", "(", "self", ",", "img", ")", ":", "\n", "        ", "outs", "=", "(", ")", "\n", "# backbone", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "# rpn", "\n", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "outs", "=", "outs", "+", "(", "rpn_outs", ",", ")", "\n", "", "proposals", "=", "torch", ".", "randn", "(", "1000", ",", "4", ")", ".", "to", "(", "device", "=", "img", ".", "device", ")", "\n", "# bbox head", "\n", "rois", "=", "bbox2roi", "(", "[", "proposals", "]", ")", "\n", "bbox_cls_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "rois", ")", "\n", "bbox_reg_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "\n", "rois", ",", "\n", "roi_scale_factor", "=", "self", ".", "reg_roi_scale_factor", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "            ", "bbox_cls_feats", "=", "self", ".", "shared_head", "(", "bbox_cls_feats", ")", "\n", "bbox_reg_feats", "=", "self", ".", "shared_head", "(", "bbox_reg_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "bbox_cls_feats", ",", "bbox_reg_feats", ")", "\n", "outs", "+=", "(", "cls_score", ",", "bbox_pred", ")", "\n", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.double_head_rcnn.DoubleHeadRCNN.forward_train": [[39, 149], ["double_head_rcnn.DoubleHeadRCNN.extract_feat", "dict", "double_head_rcnn.DoubleHeadRCNN.rpn_head", "double_head_rcnn.DoubleHeadRCNN.rpn_head.loss", "dict.update", "double_head_rcnn.DoubleHeadRCNN.train_cfg.get", "double_head_rcnn.DoubleHeadRCNN.rpn_head.get_bboxes", "mmdet.core.build_assigner", "mmdet.core.build_sampler", "img.size", "range", "mmdet.core.bbox2roi", "double_head_rcnn.DoubleHeadRCNN.bbox_roi_extractor", "double_head_rcnn.DoubleHeadRCNN.bbox_roi_extractor", "double_head_rcnn.DoubleHeadRCNN.bbox_head", "double_head_rcnn.DoubleHeadRCNN.bbox_head.get_target", "double_head_rcnn.DoubleHeadRCNN.bbox_head.loss", "dict.update", "double_head_rcnn.DoubleHeadRCNN.mask_head", "double_head_rcnn.DoubleHeadRCNN.mask_head.get_target", "torch.cat", "double_head_rcnn.DoubleHeadRCNN.mask_head.loss", "dict.update", "mmdet.core.build_assigner.assign", "mmdet.core.build_sampler.sample", "sampling_results.append", "double_head_rcnn.DoubleHeadRCNN.shared_head", "double_head_rcnn.DoubleHeadRCNN.shared_head", "mmdet.core.bbox2roi", "double_head_rcnn.DoubleHeadRCNN.mask_roi_extractor", "torch.cat", "double_head_rcnn.DoubleHeadRCNN.shared_head", "torch.cat.append", "torch.cat.append", "range", "torch.ones", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_sampler", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi"], ["", "def", "forward_train", "(", "self", ",", "\n", "img", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "gt_masks", "=", "None", ",", "\n", "proposals", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "# RPN forward and loss", "\n", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "rpn_loss_inputs", "=", "rpn_outs", "+", "(", "gt_bboxes", ",", "img_metas", ",", "\n", "self", ".", "train_cfg", ".", "rpn", ")", "\n", "rpn_losses", "=", "self", ".", "rpn_head", ".", "loss", "(", "\n", "*", "rpn_loss_inputs", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "losses", ".", "update", "(", "rpn_losses", ")", "\n", "\n", "proposal_cfg", "=", "self", ".", "train_cfg", ".", "get", "(", "'rpn_proposal'", ",", "\n", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "proposal_inputs", "=", "rpn_outs", "+", "(", "img_metas", ",", "proposal_cfg", ")", "\n", "proposal_list", "=", "self", ".", "rpn_head", ".", "get_bboxes", "(", "*", "proposal_inputs", ")", "\n", "", "else", ":", "\n", "            ", "proposal_list", "=", "proposals", "\n", "\n", "# assign gts and sample proposals", "\n", "", "if", "self", ".", "with_bbox", "or", "self", ".", "with_mask", ":", "\n", "            ", "bbox_assigner", "=", "build_assigner", "(", "self", ".", "train_cfg", ".", "rcnn", ".", "assigner", ")", "\n", "bbox_sampler", "=", "build_sampler", "(", "\n", "self", ".", "train_cfg", ".", "rcnn", ".", "sampler", ",", "context", "=", "self", ")", "\n", "num_imgs", "=", "img", ".", "size", "(", "0", ")", "\n", "if", "gt_bboxes_ignore", "is", "None", ":", "\n", "                ", "gt_bboxes_ignore", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "", "sampling_results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "                ", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_bboxes_ignore", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "\n", "assign_result", ",", "\n", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ",", "\n", "feats", "=", "[", "lvl_feat", "[", "i", "]", "[", "None", "]", "for", "lvl_feat", "in", "x", "]", ")", "\n", "sampling_results", ".", "append", "(", "sampling_result", ")", "\n", "\n", "# bbox head forward and loss", "\n", "", "", "if", "self", ".", "with_bbox", ":", "\n", "            ", "rois", "=", "bbox2roi", "(", "[", "res", ".", "bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "# TODO: a more flexible way to decide which feature maps to use", "\n", "bbox_cls_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "rois", ")", "\n", "bbox_reg_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "\n", "rois", ",", "\n", "roi_scale_factor", "=", "self", ".", "reg_roi_scale_factor", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "bbox_cls_feats", "=", "self", ".", "shared_head", "(", "bbox_cls_feats", ")", "\n", "bbox_reg_feats", "=", "self", ".", "shared_head", "(", "bbox_reg_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "bbox_cls_feats", ",", "\n", "bbox_reg_feats", ")", "\n", "\n", "bbox_targets", "=", "self", ".", "bbox_head", ".", "get_target", "(", "sampling_results", ",", "\n", "gt_bboxes", ",", "gt_labels", ",", "\n", "self", ".", "train_cfg", ".", "rcnn", ")", "\n", "loss_bbox", "=", "self", ".", "bbox_head", ".", "loss", "(", "cls_score", ",", "bbox_pred", ",", "\n", "*", "bbox_targets", ")", "\n", "losses", ".", "update", "(", "loss_bbox", ")", "\n", "\n", "# mask head forward and loss", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "if", "not", "self", ".", "share_roi_extractor", ":", "\n", "                ", "pos_rois", "=", "bbox2roi", "(", "\n", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "mask_feats", "=", "self", ".", "mask_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "mask_roi_extractor", ".", "num_inputs", "]", ",", "pos_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                    ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ")", "\n", "", "", "else", ":", "\n", "                ", "pos_inds", "=", "[", "]", "\n", "device", "=", "bbox_cls_feats", ".", "device", "\n", "for", "res", "in", "sampling_results", ":", "\n", "                    ", "pos_inds", ".", "append", "(", "\n", "torch", ".", "ones", "(", "\n", "res", ".", "pos_bboxes", ".", "shape", "[", "0", "]", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "torch", ".", "uint8", ")", ")", "\n", "pos_inds", ".", "append", "(", "\n", "torch", ".", "zeros", "(", "\n", "res", ".", "neg_bboxes", ".", "shape", "[", "0", "]", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "torch", ".", "uint8", ")", ")", "\n", "", "pos_inds", "=", "torch", ".", "cat", "(", "pos_inds", ")", "\n", "mask_feats", "=", "bbox_cls_feats", "[", "pos_inds", "]", "\n", "", "mask_pred", "=", "self", ".", "mask_head", "(", "mask_feats", ")", "\n", "\n", "mask_targets", "=", "self", ".", "mask_head", ".", "get_target", "(", "sampling_results", ",", "\n", "gt_masks", ",", "\n", "self", ".", "train_cfg", ".", "rcnn", ")", "\n", "pos_labels", "=", "torch", ".", "cat", "(", "\n", "[", "res", ".", "pos_gt_labels", "for", "res", "in", "sampling_results", "]", ")", "\n", "loss_mask", "=", "self", ".", "mask_head", ".", "loss", "(", "mask_pred", ",", "mask_targets", ",", "\n", "pos_labels", ")", "\n", "losses", ".", "update", "(", "loss_mask", ")", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.double_head_rcnn.DoubleHeadRCNN.simple_test_bboxes": [[150, 179], ["mmdet.core.bbox2roi", "double_head_rcnn.DoubleHeadRCNN.bbox_roi_extractor", "double_head_rcnn.DoubleHeadRCNN.bbox_roi_extractor", "double_head_rcnn.DoubleHeadRCNN.bbox_head", "double_head_rcnn.DoubleHeadRCNN.bbox_head.get_det_bboxes", "double_head_rcnn.DoubleHeadRCNN.shared_head", "double_head_rcnn.DoubleHeadRCNN.shared_head"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_det_bboxes"], ["", "def", "simple_test_bboxes", "(", "self", ",", "\n", "x", ",", "\n", "img_metas", ",", "\n", "proposals", ",", "\n", "rcnn_test_cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\"Test only det bboxes without augmentation.\"\"\"", "\n", "rois", "=", "bbox2roi", "(", "proposals", ")", "\n", "bbox_cls_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "rois", ")", "\n", "bbox_reg_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "\n", "rois", ",", "\n", "roi_scale_factor", "=", "self", ".", "reg_roi_scale_factor", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "            ", "bbox_cls_feats", "=", "self", ".", "shared_head", "(", "bbox_cls_feats", ")", "\n", "bbox_reg_feats", "=", "self", ".", "shared_head", "(", "bbox_reg_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "bbox_cls_feats", ",", "bbox_reg_feats", ")", "\n", "img_shape", "=", "img_metas", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_metas", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "det_bboxes", ",", "det_labels", "=", "self", ".", "bbox_head", ".", "get_det_bboxes", "(", "\n", "rois", ",", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "rescale", "=", "rescale", ",", "\n", "cfg", "=", "rcnn_test_cfg", ")", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.__init__": [[15, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDetector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.with_neck": [[19, 22], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_neck", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'neck'", ")", "and", "self", ".", "neck", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.with_shared_head": [[23, 26], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_shared_head", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'shared_head'", ")", "and", "self", ".", "shared_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.with_bbox": [[27, 30], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_bbox", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'bbox_head'", ")", "and", "self", ".", "bbox_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.with_mask": [[31, 34], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_mask", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'mask_head'", ")", "and", "self", ".", "mask_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.extract_feat": [[35, 38], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "extract_feat", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.extract_feats": [[39, 43], ["isinstance", "base.BaseDetector.extract_feat"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat"], ["", "def", "extract_feats", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "imgs", ",", "list", ")", "\n", "for", "img", "in", "imgs", ":", "\n", "            ", "yield", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.forward_train": [[44, 61], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "forward_train", "(", "self", ",", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (list[Tensor]): list of tensors of shape (1, C, H, W).\n                Typically these should be mean centered and std scaled.\n\n            img_metas (list[dict]): list of image info dict where each dict\n                has:\n                'img_shape', 'scale_factor', 'flip', and my also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                `mmdet/datasets/pipelines/formatting.py:Collect`.\n\n             **kwargs: specific to concrete implementation\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.simple_test": [[65, 68], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "simple_test", "(", "self", ",", "img", ",", "img_metas", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.aug_test": [[69, 72], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "aug_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.init_weights": [[73, 76], ["mmdet.utils.print_log"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.print_log"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "pretrained", "is", "not", "None", ":", "\n", "            ", "print_log", "(", "'load model from: {}'", ".", "format", "(", "pretrained", ")", ",", "logger", "=", "'root'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.forward_test": [[97, 135], ["len", "imgs[].size", "len", "ValueError", "base.BaseDetector.simple_test", "base.BaseDetector.aug_test", "isinstance", "TypeError", "len", "len", "type"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.simple_test", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.aug_test"], ["", "", "def", "forward_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            imgs (List[Tensor]): the outer list indicates test-time\n                augmentations and inner Tensor should have a shape NxCxHxW,\n                which contains all images in the batch.\n            img_metas (List[List[dict]]): the outer list indicates test-time\n                augs (multiscale, flip, etc.) and the inner list indicates\n                images in a batch.\n        \"\"\"", "\n", "for", "var", ",", "name", "in", "[", "(", "imgs", ",", "'imgs'", ")", ",", "(", "img_metas", ",", "'img_metas'", ")", "]", ":", "\n", "            ", "if", "not", "isinstance", "(", "var", ",", "list", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'{} must be a list, but got {}'", ".", "format", "(", "\n", "name", ",", "type", "(", "var", ")", ")", ")", "\n", "\n", "", "", "num_augs", "=", "len", "(", "imgs", ")", "\n", "if", "num_augs", "!=", "len", "(", "img_metas", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'num of augmentations ({}) != num of image meta ({})'", ".", "format", "(", "\n", "len", "(", "imgs", ")", ",", "len", "(", "img_metas", ")", ")", ")", "\n", "# TODO: remove the restriction of imgs_per_gpu == 1 when prepared", "\n", "", "imgs_per_gpu", "=", "imgs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "assert", "imgs_per_gpu", "==", "1", "\n", "\n", "if", "num_augs", "==", "1", ":", "\n", "            ", "\"\"\"\n            proposals (List[List[Tensor]]): the outer list indicates test-time\n                augs (multiscale, flip, etc.) and the inner list indicates\n                images in a batch. The Tensor should have a shape Px4, where\n                P is the number of proposals.\n            \"\"\"", "\n", "if", "'proposals'", "in", "kwargs", ":", "\n", "                ", "kwargs", "[", "'proposals'", "]", "=", "kwargs", "[", "'proposals'", "]", "[", "0", "]", "\n", "", "return", "self", ".", "simple_test", "(", "imgs", "[", "0", "]", ",", "img_metas", "[", "0", "]", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "# TODO: support test augmentation for predefined proposals", "\n", "            ", "assert", "'proposals'", "not", "in", "kwargs", "\n", "return", "self", ".", "aug_test", "(", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.forward": [[136, 150], ["mmdet.core.auto_fp16", "base.BaseDetector.forward_train", "base.BaseDetector.forward_test"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.auto_fp16", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.forward_train", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.fast_rcnn.FastRCNN.forward_test"], ["", "", "@", "auto_fp16", "(", "apply_to", "=", "(", "'img'", ",", ")", ")", "\n", "def", "forward", "(", "self", ",", "img", ",", "img_metas", ",", "return_loss", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Calls either forward_train or forward_test depending on whether\n        return_loss=True. Note this setting will change the expected inputs.\n        When `return_loss=True`, img and img_meta are single-nested (i.e.\n        Tensor and List[dict]), and when `resturn_loss=False`, img and img_meta\n        should be double nested (i.e.  List[Tensor], List[List[dict]]), with\n        the outer list indicating test time augmentations.\n        \"\"\"", "\n", "if", "return_loss", ":", "\n", "            ", "return", "self", ".", "forward_train", "(", "img", ",", "img_metas", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "forward_test", "(", "img", ",", "img_metas", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.show_result": [[151, 199], ["isinstance", "mmdet.core.tensor2imgs", "zip", "len", "len", "isinstance", "numpy.vstack", "numpy.concatenate", "mmcv.imshow_det_bboxes", "mmdet.core.get_classes", "isinstance", "mmcv.concat_list", "numpy.full", "TypeError", "numpy.where", "numpy.random.randint", "pycocotools.decode().astype", "enumerate", "type", "pycocotools.decode"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.tensor2imgs", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.class_names.get_classes"], ["", "", "def", "show_result", "(", "self", ",", "data", ",", "result", ",", "dataset", "=", "None", ",", "score_thr", "=", "0.3", ")", ":", "\n", "        ", "if", "isinstance", "(", "result", ",", "tuple", ")", ":", "\n", "            ", "bbox_result", ",", "segm_result", "=", "result", "\n", "", "else", ":", "\n", "            ", "bbox_result", ",", "segm_result", "=", "result", ",", "None", "\n", "\n", "", "img_tensor", "=", "data", "[", "'img'", "]", "[", "0", "]", "\n", "img_metas", "=", "data", "[", "'img_metas'", "]", "[", "0", "]", ".", "data", "[", "0", "]", "\n", "imgs", "=", "tensor2imgs", "(", "img_tensor", ",", "**", "img_metas", "[", "0", "]", "[", "'img_norm_cfg'", "]", ")", "\n", "assert", "len", "(", "imgs", ")", "==", "len", "(", "img_metas", ")", "\n", "\n", "if", "dataset", "is", "None", ":", "\n", "            ", "class_names", "=", "self", ".", "CLASSES", "\n", "", "elif", "isinstance", "(", "dataset", ",", "str", ")", ":", "\n", "            ", "class_names", "=", "get_classes", "(", "dataset", ")", "\n", "", "elif", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "class_names", "=", "dataset", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'dataset must be a valid dataset name or a sequence'", "\n", "' of class names, not {}'", ".", "format", "(", "type", "(", "dataset", ")", ")", ")", "\n", "\n", "", "for", "img", ",", "img_meta", "in", "zip", "(", "imgs", ",", "img_metas", ")", ":", "\n", "            ", "h", ",", "w", ",", "_", "=", "img_meta", "[", "'img_shape'", "]", "\n", "img_show", "=", "img", "[", ":", "h", ",", ":", "w", ",", ":", "]", "\n", "\n", "bboxes", "=", "np", ".", "vstack", "(", "bbox_result", ")", "\n", "# draw segmentation masks", "\n", "if", "segm_result", "is", "not", "None", ":", "\n", "                ", "segms", "=", "mmcv", ".", "concat_list", "(", "segm_result", ")", "\n", "inds", "=", "np", ".", "where", "(", "bboxes", "[", ":", ",", "-", "1", "]", ">", "score_thr", ")", "[", "0", "]", "\n", "for", "i", "in", "inds", ":", "\n", "                    ", "color_mask", "=", "np", ".", "random", ".", "randint", "(", "\n", "0", ",", "256", ",", "(", "1", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "mask", "=", "maskUtils", ".", "decode", "(", "segms", "[", "i", "]", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "img_show", "[", "mask", "]", "=", "img_show", "[", "mask", "]", "*", "0.5", "+", "color_mask", "*", "0.5", "\n", "# draw bounding boxes", "\n", "", "", "labels", "=", "[", "\n", "np", ".", "full", "(", "bbox", ".", "shape", "[", "0", "]", ",", "i", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", ",", "bbox", "in", "enumerate", "(", "bbox_result", ")", "\n", "]", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "mmcv", ".", "imshow_det_bboxes", "(", "\n", "img_show", ",", "\n", "bboxes", ",", "\n", "labels", ",", "\n", "class_names", "=", "class_names", ",", "\n", "score_thr", "=", "score_thr", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.rpn.RPN.__init__": [[13, 27], ["base.BaseDetector.__init__", "builder.build_backbone", "builder.build_head", "rpn.RPN.init_weights", "builder.build_neck"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_backbone", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_head", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_neck"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "neck", ",", "\n", "rpn_head", ",", "\n", "train_cfg", ",", "\n", "test_cfg", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "RPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "builder", ".", "build_backbone", "(", "backbone", ")", "\n", "self", ".", "neck", "=", "builder", ".", "build_neck", "(", "neck", ")", "if", "neck", "is", "not", "None", "else", "None", "\n", "self", ".", "rpn_head", "=", "builder", ".", "build_head", "(", "rpn_head", ")", "\n", "self", ".", "train_cfg", "=", "train_cfg", "\n", "self", ".", "test_cfg", "=", "test_cfg", "\n", "self", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.rpn.RPN.init_weights": [[28, 34], ["super().init_weights", "rpn.RPN.backbone.init_weights", "rpn.RPN.rpn_head.init_weights", "rpn.RPN.neck.init_weights"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "RPN", ",", "self", ")", ".", "init_weights", "(", "pretrained", ")", "\n", "self", ".", "backbone", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "self", ".", "neck", ".", "init_weights", "(", ")", "\n", "", "self", ".", "rpn_head", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.rpn.RPN.extract_feat": [[35, 40], ["rpn.RPN.backbone", "rpn.RPN.neck"], "methods", ["None"], ["", "def", "extract_feat", "(", "self", ",", "img", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "img", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "x", "=", "self", ".", "neck", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.rpn.RPN.forward_dummy": [[41, 45], ["rpn.RPN.extract_feat", "rpn.RPN.rpn_head"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat"], ["", "def", "forward_dummy", "(", "self", ",", "img", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "return", "rpn_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.rpn.RPN.forward_train": [[46, 61], ["rpn.RPN.train_cfg.rpn.get", "rpn.RPN.extract_feat", "rpn.RPN.rpn_head", "rpn.RPN.rpn_head.loss", "mmdet.core.tensor2imgs"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.tensor2imgs"], ["", "def", "forward_train", "(", "self", ",", "\n", "img", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "None", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "train_cfg", ".", "rpn", ".", "get", "(", "'debug'", ",", "False", ")", ":", "\n", "            ", "self", ".", "rpn_head", ".", "debug_imgs", "=", "tensor2imgs", "(", "img", ")", "\n", "\n", "", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "\n", "rpn_loss_inputs", "=", "rpn_outs", "+", "(", "gt_bboxes", ",", "img_metas", ",", "self", ".", "train_cfg", ".", "rpn", ")", "\n", "losses", "=", "self", ".", "rpn_head", ".", "loss", "(", "\n", "*", "rpn_loss_inputs", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.rpn.RPN.simple_test": [[62, 70], ["rpn.RPN.extract_feat", "rpn.RPN.simple_test_rpn", "proposal_list[].cpu().numpy", "zip", "proposal_list[].cpu"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.RPNTestMixin.simple_test_rpn"], ["", "def", "simple_test", "(", "self", ",", "img", ",", "img_metas", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "proposal_list", "=", "self", ".", "simple_test_rpn", "(", "x", ",", "img_metas", ",", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "if", "rescale", ":", "\n", "            ", "for", "proposals", ",", "meta", "in", "zip", "(", "proposal_list", ",", "img_metas", ")", ":", "\n", "                ", "proposals", "[", ":", ",", ":", "4", "]", "/=", "meta", "[", "'scale_factor'", "]", "\n", "# TODO: remove this restriction", "\n", "", "", "return", "proposal_list", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.rpn.RPN.aug_test": [[71, 83], ["rpn.RPN.aug_test_rpn", "proposal_list[].cpu().numpy", "rpn.RPN.extract_feats", "zip", "mmdet.core.bbox_mapping", "proposal_list[].cpu"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.RPNTestMixin.aug_test_rpn", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.extract_feats", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox_mapping"], ["", "def", "aug_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "proposal_list", "=", "self", ".", "aug_test_rpn", "(", "\n", "self", ".", "extract_feats", "(", "imgs", ")", ",", "img_metas", ",", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "if", "not", "rescale", ":", "\n", "            ", "for", "proposals", ",", "img_meta", "in", "zip", "(", "proposal_list", ",", "img_metas", "[", "0", "]", ")", ":", "\n", "                ", "img_shape", "=", "img_meta", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_meta", "[", "'flip'", "]", "\n", "proposals", "[", ":", ",", ":", "4", "]", "=", "bbox_mapping", "(", "proposals", "[", ":", ",", ":", "4", "]", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "# TODO: remove this restriction", "\n", "", "", "return", "proposal_list", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.rpn.RPN.show_result": [[84, 98], ["mmdet.core.tensor2imgs", "zip", "len", "len", "mmcv.imshow_bboxes"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.tensor2imgs"], ["", "def", "show_result", "(", "self", ",", "data", ",", "result", ",", "dataset", "=", "None", ",", "top_k", "=", "20", ")", ":", "\n", "        ", "\"\"\"Show RPN proposals on the image.\n\n        Although we assume batch size is 1, this method supports arbitrary\n        batch size.\n        \"\"\"", "\n", "img_tensor", "=", "data", "[", "'img'", "]", "[", "0", "]", "\n", "img_metas", "=", "data", "[", "'img_metas'", "]", "[", "0", "]", ".", "data", "[", "0", "]", "\n", "imgs", "=", "tensor2imgs", "(", "img_tensor", ",", "**", "img_metas", "[", "0", "]", "[", "'img_norm_cfg'", "]", ")", "\n", "assert", "len", "(", "imgs", ")", "==", "len", "(", "img_metas", ")", "\n", "for", "img", ",", "img_meta", "in", "zip", "(", "imgs", ",", "img_metas", ")", ":", "\n", "            ", "h", ",", "w", ",", "_", "=", "img_meta", "[", "'img_shape'", "]", "\n", "img_show", "=", "img", "[", ":", "h", ",", ":", "w", ",", ":", "]", "\n", "mmcv", ".", "imshow_bboxes", "(", "img_show", ",", "result", ",", "top_k", "=", "top_k", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.retinanet.RetinaNet.__init__": [[8, 17], ["single_stage.SingleStageDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "neck", ",", "\n", "bbox_head", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "RetinaNet", ",", "self", ")", ".", "__init__", "(", "backbone", ",", "neck", ",", "bbox_head", ",", "train_cfg", ",", "\n", "test_cfg", ",", "pretrained", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.fast_rcnn.FastRCNN.__init__": [[8, 30], ["two_stage.TwoStageDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "bbox_roi_extractor", ",", "\n", "bbox_head", ",", "\n", "train_cfg", ",", "\n", "test_cfg", ",", "\n", "neck", "=", "None", ",", "\n", "shared_head", "=", "None", ",", "\n", "mask_roi_extractor", "=", "None", ",", "\n", "mask_head", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "FastRCNN", ",", "self", ")", ".", "__init__", "(", "\n", "backbone", "=", "backbone", ",", "\n", "neck", "=", "neck", ",", "\n", "shared_head", "=", "shared_head", ",", "\n", "bbox_roi_extractor", "=", "bbox_roi_extractor", ",", "\n", "bbox_head", "=", "bbox_head", ",", "\n", "train_cfg", "=", "train_cfg", ",", "\n", "test_cfg", "=", "test_cfg", ",", "\n", "mask_roi_extractor", "=", "mask_roi_extractor", ",", "\n", "mask_head", "=", "mask_head", ",", "\n", "pretrained", "=", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.fast_rcnn.FastRCNN.forward_test": [[31, 65], ["len", "imgs[].size", "len", "ValueError", "fast_rcnn.FastRCNN.simple_test", "isinstance", "TypeError", "len", "len", "type"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.simple_test"], ["", "def", "forward_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "proposals", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            imgs (List[Tensor]): the outer list indicates test-time\n                augmentations and inner Tensor should have a shape NxCxHxW,\n                which contains all images in the batch.\n            img_metas (List[List[dict]]): the outer list indicates test-time\n                augs (multiscale, flip, etc.) and the inner list indicates\n                images in a batch.\n            proposals (List[List[Tensor]]): the outer list indicates test-time\n                augs (multiscale, flip, etc.) and the inner list indicates\n                images in a batch. The Tensor should have a shape Px4, where\n                P is the number of proposals.\n        \"\"\"", "\n", "for", "var", ",", "name", "in", "[", "(", "imgs", ",", "'imgs'", ")", ",", "(", "img_metas", ",", "'img_metas'", ")", "]", ":", "\n", "            ", "if", "not", "isinstance", "(", "var", ",", "list", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'{} must be a list, but got {}'", ".", "format", "(", "\n", "name", ",", "type", "(", "var", ")", ")", ")", "\n", "\n", "", "", "num_augs", "=", "len", "(", "imgs", ")", "\n", "if", "num_augs", "!=", "len", "(", "img_metas", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'num of augmentations ({}) != num of image meta ({})'", ".", "format", "(", "\n", "len", "(", "imgs", ")", ",", "len", "(", "img_metas", ")", ")", ")", "\n", "# TODO: remove the restriction of imgs_per_gpu == 1 when prepared", "\n", "", "imgs_per_gpu", "=", "imgs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "assert", "imgs_per_gpu", "==", "1", "\n", "\n", "if", "num_augs", "==", "1", ":", "\n", "            ", "return", "self", ".", "simple_test", "(", "imgs", "[", "0", "]", ",", "img_metas", "[", "0", "]", ",", "proposals", "[", "0", "]", ",", "\n", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "# TODO: support test-time augmentation", "\n", "            ", "assert", "NotImplementedError", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.fovea.FOVEA.__init__": [[8, 17], ["single_stage.SingleStageDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "neck", ",", "\n", "bbox_head", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "FOVEA", ",", "self", ")", ".", "__init__", "(", "backbone", ",", "neck", ",", "bbox_head", ",", "train_cfg", ",", "\n", "test_cfg", ",", "pretrained", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.atss.ATSS.__init__": [[8, 17], ["single_stage.SingleStageDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "neck", ",", "\n", "bbox_head", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "ATSS", ",", "self", ")", ".", "__init__", "(", "backbone", ",", "neck", ",", "bbox_head", ",", "train_cfg", ",", "\n", "test_cfg", ",", "pretrained", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.htc.HybridTaskCascade.__init__": [[15, 35], ["cascade_rcnn.CascadeRCNN.__init__", "builder.build_roi_extractor", "builder.build_head"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_roi_extractor", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_head"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_stages", ",", "\n", "backbone", ",", "\n", "semantic_roi_extractor", "=", "None", ",", "\n", "semantic_head", "=", "None", ",", "\n", "semantic_fusion", "=", "(", "'bbox'", ",", "'mask'", ")", ",", "\n", "interleaved", "=", "True", ",", "\n", "mask_info_flow", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "HybridTaskCascade", ",", "self", ")", ".", "__init__", "(", "num_stages", ",", "backbone", ",", "**", "kwargs", ")", "\n", "assert", "self", ".", "with_bbox", "and", "self", ".", "with_mask", "\n", "assert", "not", "self", ".", "with_shared_head", "# shared head not supported", "\n", "if", "semantic_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "semantic_roi_extractor", "=", "builder", ".", "build_roi_extractor", "(", "\n", "semantic_roi_extractor", ")", "\n", "self", ".", "semantic_head", "=", "builder", ".", "build_head", "(", "semantic_head", ")", "\n", "\n", "", "self", ".", "semantic_fusion", "=", "semantic_fusion", "\n", "self", ".", "interleaved", "=", "interleaved", "\n", "self", ".", "mask_info_flow", "=", "mask_info_flow", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.htc.HybridTaskCascade.with_semantic": [[36, 42], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_semantic", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'semantic_head'", ")", "and", "self", ".", "semantic_head", "is", "not", "None", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.htc.HybridTaskCascade._bbox_forward_train": [[43, 72], ["mmdet.core.bbox2roi", "bbox_roi_extractor", "bbox_head", "bbox_head.get_target", "bbox_head.loss", "htc.HybridTaskCascade.semantic_roi_extractor", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss"], ["", "", "def", "_bbox_forward_train", "(", "self", ",", "\n", "stage", ",", "\n", "x", ",", "\n", "sampling_results", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "rcnn_train_cfg", ",", "\n", "semantic_feat", "=", "None", ")", ":", "\n", "        ", "rois", "=", "bbox2roi", "(", "[", "res", ".", "bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "bbox_roi_extractor", "=", "self", ".", "bbox_roi_extractor", "[", "stage", "]", "\n", "bbox_head", "=", "self", ".", "bbox_head", "[", "stage", "]", "\n", "bbox_feats", "=", "bbox_roi_extractor", "(", "x", "[", ":", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "\n", "rois", ")", "\n", "# semantic feature fusion", "\n", "# element-wise sum for original features and pooled semantic features", "\n", "if", "self", ".", "with_semantic", "and", "'bbox'", "in", "self", ".", "semantic_fusion", ":", "\n", "            ", "bbox_semantic_feat", "=", "self", ".", "semantic_roi_extractor", "(", "[", "semantic_feat", "]", ",", "\n", "rois", ")", "\n", "if", "bbox_semantic_feat", ".", "shape", "[", "-", "2", ":", "]", "!=", "bbox_feats", ".", "shape", "[", "-", "2", ":", "]", ":", "\n", "                ", "bbox_semantic_feat", "=", "F", ".", "adaptive_avg_pool2d", "(", "\n", "bbox_semantic_feat", ",", "bbox_feats", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "", "bbox_feats", "+=", "bbox_semantic_feat", "\n", "\n", "", "cls_score", ",", "bbox_pred", "=", "bbox_head", "(", "bbox_feats", ")", "\n", "\n", "bbox_targets", "=", "bbox_head", ".", "get_target", "(", "sampling_results", ",", "gt_bboxes", ",", "\n", "gt_labels", ",", "rcnn_train_cfg", ")", "\n", "loss_bbox", "=", "bbox_head", ".", "loss", "(", "cls_score", ",", "bbox_pred", ",", "*", "bbox_targets", ")", "\n", "return", "loss_bbox", ",", "rois", ",", "bbox_targets", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.htc.HybridTaskCascade._mask_forward_train": [[73, 113], ["mmdet.core.bbox2roi", "mask_roi_extractor", "mask_head.get_target", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mask_head.loss", "htc.HybridTaskCascade.semantic_roi_extractor", "range", "mask_head", "mask_head", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss"], ["", "def", "_mask_forward_train", "(", "self", ",", "\n", "stage", ",", "\n", "x", ",", "\n", "sampling_results", ",", "\n", "gt_masks", ",", "\n", "rcnn_train_cfg", ",", "\n", "semantic_feat", "=", "None", ")", ":", "\n", "        ", "mask_roi_extractor", "=", "self", ".", "mask_roi_extractor", "[", "stage", "]", "\n", "mask_head", "=", "self", ".", "mask_head", "[", "stage", "]", "\n", "pos_rois", "=", "bbox2roi", "(", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "mask_feats", "=", "mask_roi_extractor", "(", "x", "[", ":", "mask_roi_extractor", ".", "num_inputs", "]", ",", "\n", "pos_rois", ")", "\n", "\n", "# semantic feature fusion", "\n", "# element-wise sum for original features and pooled semantic features", "\n", "if", "self", ".", "with_semantic", "and", "'mask'", "in", "self", ".", "semantic_fusion", ":", "\n", "            ", "mask_semantic_feat", "=", "self", ".", "semantic_roi_extractor", "(", "[", "semantic_feat", "]", ",", "\n", "pos_rois", ")", "\n", "if", "mask_semantic_feat", ".", "shape", "[", "-", "2", ":", "]", "!=", "mask_feats", ".", "shape", "[", "-", "2", ":", "]", ":", "\n", "                ", "mask_semantic_feat", "=", "F", ".", "adaptive_avg_pool2d", "(", "\n", "mask_semantic_feat", ",", "mask_feats", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "", "mask_feats", "+=", "mask_semantic_feat", "\n", "\n", "# mask information flow", "\n", "# forward all previous mask heads to obtain last_feat, and fuse it", "\n", "# with the normal mask feature", "\n", "", "if", "self", ".", "mask_info_flow", ":", "\n", "            ", "last_feat", "=", "None", "\n", "for", "i", "in", "range", "(", "stage", ")", ":", "\n", "                ", "last_feat", "=", "self", ".", "mask_head", "[", "i", "]", "(", "\n", "mask_feats", ",", "last_feat", ",", "return_logits", "=", "False", ")", "\n", "", "mask_pred", "=", "mask_head", "(", "mask_feats", ",", "last_feat", ",", "return_feat", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "mask_pred", "=", "mask_head", "(", "mask_feats", ",", "return_feat", "=", "False", ")", "\n", "\n", "", "mask_targets", "=", "mask_head", ".", "get_target", "(", "sampling_results", ",", "gt_masks", ",", "\n", "rcnn_train_cfg", ")", "\n", "pos_labels", "=", "torch", ".", "cat", "(", "[", "res", ".", "pos_gt_labels", "for", "res", "in", "sampling_results", "]", ")", "\n", "loss_mask", "=", "mask_head", ".", "loss", "(", "mask_pred", ",", "mask_targets", ",", "pos_labels", ")", "\n", "return", "loss_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.htc.HybridTaskCascade._bbox_forward_test": [[114, 128], ["bbox_roi_extractor", "bbox_head", "htc.HybridTaskCascade.semantic_roi_extractor", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "len"], "methods", ["None"], ["", "def", "_bbox_forward_test", "(", "self", ",", "stage", ",", "x", ",", "rois", ",", "semantic_feat", "=", "None", ")", ":", "\n", "        ", "bbox_roi_extractor", "=", "self", ".", "bbox_roi_extractor", "[", "stage", "]", "\n", "bbox_head", "=", "self", ".", "bbox_head", "[", "stage", "]", "\n", "bbox_feats", "=", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "bbox_roi_extractor", ".", "featmap_strides", ")", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_semantic", "and", "'bbox'", "in", "self", ".", "semantic_fusion", ":", "\n", "            ", "bbox_semantic_feat", "=", "self", ".", "semantic_roi_extractor", "(", "[", "semantic_feat", "]", ",", "\n", "rois", ")", "\n", "if", "bbox_semantic_feat", ".", "shape", "[", "-", "2", ":", "]", "!=", "bbox_feats", ".", "shape", "[", "-", "2", ":", "]", ":", "\n", "                ", "bbox_semantic_feat", "=", "F", ".", "adaptive_avg_pool2d", "(", "\n", "bbox_semantic_feat", ",", "bbox_feats", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "", "bbox_feats", "+=", "bbox_semantic_feat", "\n", "", "cls_score", ",", "bbox_pred", "=", "bbox_head", "(", "bbox_feats", ")", "\n", "return", "cls_score", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.htc.HybridTaskCascade._mask_forward_test": [[129, 156], ["mmdet.core.bbox2roi", "mask_roi_extractor", "htc.HybridTaskCascade.semantic_roi_extractor", "range", "mask_head", "mask_head", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "len"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi"], ["", "def", "_mask_forward_test", "(", "self", ",", "stage", ",", "x", ",", "bboxes", ",", "semantic_feat", "=", "None", ")", ":", "\n", "        ", "mask_roi_extractor", "=", "self", ".", "mask_roi_extractor", "[", "stage", "]", "\n", "mask_head", "=", "self", ".", "mask_head", "[", "stage", "]", "\n", "mask_rois", "=", "bbox2roi", "(", "[", "bboxes", "]", ")", "\n", "mask_feats", "=", "mask_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "mask_roi_extractor", ".", "featmap_strides", ")", "]", ",", "mask_rois", ")", "\n", "if", "self", ".", "with_semantic", "and", "'mask'", "in", "self", ".", "semantic_fusion", ":", "\n", "            ", "mask_semantic_feat", "=", "self", ".", "semantic_roi_extractor", "(", "[", "semantic_feat", "]", ",", "\n", "mask_rois", ")", "\n", "if", "mask_semantic_feat", ".", "shape", "[", "-", "2", ":", "]", "!=", "mask_feats", ".", "shape", "[", "-", "2", ":", "]", ":", "\n", "                ", "mask_semantic_feat", "=", "F", ".", "adaptive_avg_pool2d", "(", "\n", "mask_semantic_feat", ",", "mask_feats", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "", "mask_feats", "+=", "mask_semantic_feat", "\n", "", "if", "self", ".", "mask_info_flow", ":", "\n", "            ", "last_feat", "=", "None", "\n", "last_pred", "=", "None", "\n", "for", "i", "in", "range", "(", "stage", ")", ":", "\n", "                ", "mask_pred", ",", "last_feat", "=", "self", ".", "mask_head", "[", "i", "]", "(", "mask_feats", ",", "last_feat", ")", "\n", "if", "last_pred", "is", "not", "None", ":", "\n", "                    ", "mask_pred", "=", "mask_pred", "+", "last_pred", "\n", "", "last_pred", "=", "mask_pred", "\n", "", "mask_pred", "=", "mask_head", "(", "mask_feats", ",", "last_feat", ",", "return_feat", "=", "False", ")", "\n", "if", "last_pred", "is", "not", "None", ":", "\n", "                ", "mask_pred", "=", "mask_pred", "+", "last_pred", "\n", "", "", "else", ":", "\n", "            ", "mask_pred", "=", "mask_head", "(", "mask_feats", ")", "\n", "", "return", "mask_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.htc.HybridTaskCascade.forward_dummy": [[157, 196], ["htc.HybridTaskCascade.extract_feat", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "mmdet.core.bbox2roi", "range", "htc.HybridTaskCascade.rpn_head", "htc.HybridTaskCascade.semantic_head", "htc.HybridTaskCascade._bbox_forward_test", "mask_roi_extractor", "range", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "htc.HybridTaskCascade.semantic_roi_extractor", "mask_head", "mask_head", "len"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.htc.HybridTaskCascade._bbox_forward_test"], ["", "def", "forward_dummy", "(", "self", ",", "img", ")", ":", "\n", "        ", "outs", "=", "(", ")", "\n", "# backbone", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "# rpn", "\n", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "outs", "=", "outs", "+", "(", "rpn_outs", ",", ")", "\n", "", "proposals", "=", "torch", ".", "randn", "(", "1000", ",", "4", ")", ".", "to", "(", "device", "=", "img", ".", "device", ")", "\n", "# semantic head", "\n", "if", "self", ".", "with_semantic", ":", "\n", "            ", "_", ",", "semantic_feat", "=", "self", ".", "semantic_head", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "semantic_feat", "=", "None", "\n", "# bbox heads", "\n", "", "rois", "=", "bbox2roi", "(", "[", "proposals", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "cls_score", ",", "bbox_pred", "=", "self", ".", "_bbox_forward_test", "(", "\n", "i", ",", "x", ",", "rois", ",", "semantic_feat", "=", "semantic_feat", ")", "\n", "outs", "=", "outs", "+", "(", "cls_score", ",", "bbox_pred", ")", "\n", "# mask heads", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "mask_rois", "=", "rois", "[", ":", "100", "]", "\n", "mask_roi_extractor", "=", "self", ".", "mask_roi_extractor", "[", "-", "1", "]", "\n", "mask_feats", "=", "mask_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "mask_roi_extractor", ".", "featmap_strides", ")", "]", ",", "mask_rois", ")", "\n", "if", "self", ".", "with_semantic", "and", "'mask'", "in", "self", ".", "semantic_fusion", ":", "\n", "                ", "mask_semantic_feat", "=", "self", ".", "semantic_roi_extractor", "(", "\n", "[", "semantic_feat", "]", ",", "mask_rois", ")", "\n", "mask_feats", "+=", "mask_semantic_feat", "\n", "", "last_feat", "=", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "                ", "mask_head", "=", "self", ".", "mask_head", "[", "i", "]", "\n", "if", "self", ".", "mask_info_flow", ":", "\n", "                    ", "mask_pred", ",", "last_feat", "=", "mask_head", "(", "mask_feats", ",", "last_feat", ")", "\n", "", "else", ":", "\n", "                    ", "mask_pred", "=", "mask_head", "(", "mask_feats", ")", "\n", "", "outs", "=", "outs", "+", "(", "mask_pred", ",", ")", "\n", "", "", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.htc.HybridTaskCascade.forward_train": [[197, 309], ["htc.HybridTaskCascade.extract_feat", "dict", "range", "htc.HybridTaskCascade.rpn_head", "htc.HybridTaskCascade.rpn_head.loss", "dict.update", "htc.HybridTaskCascade.train_cfg.get", "htc.HybridTaskCascade.rpn_head.get_bboxes", "htc.HybridTaskCascade.semantic_head", "htc.HybridTaskCascade.semantic_head.loss", "mmdet.core.build_assigner", "mmdet.core.build_sampler", "img.size", "range", "htc.HybridTaskCascade._bbox_forward_train", "loss_bbox.items", "mmdet.core.build_assigner.assign", "mmdet.core.build_sampler.sample", "sampling_results.append", "htc.HybridTaskCascade._mask_forward_train", "htc.HybridTaskCascade.items", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "htc.HybridTaskCascade.bbox_head[].refine_bboxes", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "htc.HybridTaskCascade.bbox_head[].refine_bboxes", "range", "mmdet.core.build_assigner.assign", "mmdet.core.build_sampler.sample", "sampling_results.append"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_sampler", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.htc.HybridTaskCascade._bbox_forward_train", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.htc.HybridTaskCascade._mask_forward_train", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.refine_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.refine_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "def", "forward_train", "(", "self", ",", "\n", "img", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "gt_masks", "=", "None", ",", "\n", "gt_semantic_seg", "=", "None", ",", "\n", "proposals", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "# RPN part, the same as normal two-stage detectors", "\n", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "rpn_loss_inputs", "=", "rpn_outs", "+", "(", "gt_bboxes", ",", "img_metas", ",", "\n", "self", ".", "train_cfg", ".", "rpn", ")", "\n", "rpn_losses", "=", "self", ".", "rpn_head", ".", "loss", "(", "\n", "*", "rpn_loss_inputs", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "losses", ".", "update", "(", "rpn_losses", ")", "\n", "\n", "proposal_cfg", "=", "self", ".", "train_cfg", ".", "get", "(", "'rpn_proposal'", ",", "\n", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "proposal_inputs", "=", "rpn_outs", "+", "(", "img_metas", ",", "proposal_cfg", ")", "\n", "proposal_list", "=", "self", ".", "rpn_head", ".", "get_bboxes", "(", "*", "proposal_inputs", ")", "\n", "", "else", ":", "\n", "            ", "proposal_list", "=", "proposals", "\n", "\n", "# semantic segmentation part", "\n", "# 2 outputs: segmentation prediction and embedded features", "\n", "", "if", "self", ".", "with_semantic", ":", "\n", "            ", "semantic_pred", ",", "semantic_feat", "=", "self", ".", "semantic_head", "(", "x", ")", "\n", "loss_seg", "=", "self", ".", "semantic_head", ".", "loss", "(", "semantic_pred", ",", "gt_semantic_seg", ")", "\n", "losses", "[", "'loss_semantic_seg'", "]", "=", "loss_seg", "\n", "", "else", ":", "\n", "            ", "semantic_feat", "=", "None", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "self", ".", "current_stage", "=", "i", "\n", "rcnn_train_cfg", "=", "self", ".", "train_cfg", ".", "rcnn", "[", "i", "]", "\n", "lw", "=", "self", ".", "train_cfg", ".", "stage_loss_weights", "[", "i", "]", "\n", "\n", "# assign gts and sample proposals", "\n", "sampling_results", "=", "[", "]", "\n", "bbox_assigner", "=", "build_assigner", "(", "rcnn_train_cfg", ".", "assigner", ")", "\n", "bbox_sampler", "=", "build_sampler", "(", "rcnn_train_cfg", ".", "sampler", ",", "context", "=", "self", ")", "\n", "num_imgs", "=", "img", ".", "size", "(", "0", ")", "\n", "if", "gt_bboxes_ignore", "is", "None", ":", "\n", "                ", "gt_bboxes_ignore", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "\n", "", "for", "j", "in", "range", "(", "num_imgs", ")", ":", "\n", "                ", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "proposal_list", "[", "j", "]", ",", "\n", "gt_bboxes", "[", "j", "]", ",", "\n", "gt_bboxes_ignore", "[", "j", "]", ",", "\n", "gt_labels", "[", "j", "]", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "\n", "assign_result", ",", "\n", "proposal_list", "[", "j", "]", ",", "\n", "gt_bboxes", "[", "j", "]", ",", "\n", "gt_labels", "[", "j", "]", ",", "\n", "feats", "=", "[", "lvl_feat", "[", "j", "]", "[", "None", "]", "for", "lvl_feat", "in", "x", "]", ")", "\n", "sampling_results", ".", "append", "(", "sampling_result", ")", "\n", "\n", "# bbox head forward and loss", "\n", "", "loss_bbox", ",", "rois", ",", "bbox_targets", ",", "bbox_pred", "=", "self", ".", "_bbox_forward_train", "(", "\n", "i", ",", "x", ",", "sampling_results", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "rcnn_train_cfg", ",", "semantic_feat", ")", "\n", "roi_labels", "=", "bbox_targets", "[", "0", "]", "\n", "\n", "for", "name", ",", "value", "in", "loss_bbox", ".", "items", "(", ")", ":", "\n", "                ", "losses", "[", "'s{}.{}'", ".", "format", "(", "i", ",", "name", ")", "]", "=", "(", "\n", "value", "*", "lw", "if", "'loss'", "in", "name", "else", "value", ")", "\n", "\n", "# mask head forward and loss", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "# interleaved execution: use regressed bboxes by the box branch", "\n", "# to train the mask branch", "\n", "                ", "if", "self", ".", "interleaved", ":", "\n", "                    ", "pos_is_gts", "=", "[", "res", ".", "pos_is_gt", "for", "res", "in", "sampling_results", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "proposal_list", "=", "self", ".", "bbox_head", "[", "i", "]", ".", "refine_bboxes", "(", "\n", "rois", ",", "roi_labels", ",", "bbox_pred", ",", "pos_is_gts", ",", "img_metas", ")", "\n", "# re-assign and sample 512 RoIs from 512 RoIs", "\n", "sampling_results", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_imgs", ")", ":", "\n", "                            ", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "\n", "proposal_list", "[", "j", "]", ",", "gt_bboxes", "[", "j", "]", ",", "\n", "gt_bboxes_ignore", "[", "j", "]", ",", "gt_labels", "[", "j", "]", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "\n", "assign_result", ",", "\n", "proposal_list", "[", "j", "]", ",", "\n", "gt_bboxes", "[", "j", "]", ",", "\n", "gt_labels", "[", "j", "]", ",", "\n", "feats", "=", "[", "lvl_feat", "[", "j", "]", "[", "None", "]", "for", "lvl_feat", "in", "x", "]", ")", "\n", "sampling_results", ".", "append", "(", "sampling_result", ")", "\n", "", "", "", "loss_mask", "=", "self", ".", "_mask_forward_train", "(", "i", ",", "x", ",", "sampling_results", ",", "\n", "gt_masks", ",", "rcnn_train_cfg", ",", "\n", "semantic_feat", ")", "\n", "for", "name", ",", "value", "in", "loss_mask", ".", "items", "(", ")", ":", "\n", "                    ", "losses", "[", "'s{}.{}'", ".", "format", "(", "i", ",", "name", ")", "]", "=", "(", "\n", "value", "*", "lw", "if", "'loss'", "in", "name", "else", "value", ")", "\n", "\n", "# refine bboxes (same as Cascade R-CNN)", "\n", "", "", "if", "i", "<", "self", ".", "num_stages", "-", "1", "and", "not", "self", ".", "interleaved", ":", "\n", "                ", "pos_is_gts", "=", "[", "res", ".", "pos_is_gt", "for", "res", "in", "sampling_results", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "proposal_list", "=", "self", ".", "bbox_head", "[", "i", "]", ".", "refine_bboxes", "(", "\n", "rois", ",", "roi_labels", ",", "bbox_pred", ",", "pos_is_gts", ",", "img_metas", ")", "\n", "\n", "", "", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.htc.HybridTaskCascade.simple_test": [[310, 396], ["htc.HybridTaskCascade.extract_feat", "mmdet.core.bbox2roi", "range", "htc.HybridTaskCascade.bbox_head[].get_det_bboxes", "mmdet.core.bbox2result", "htc.HybridTaskCascade.simple_test_rpn", "htc.HybridTaskCascade.semantic_head", "htc.HybridTaskCascade._bbox_forward_test", "ms_scores.append", "sum", "float", "cls_score.argmax", "bbox_head.regress_by_class", "len", "mmdet.core.bbox2roi", "mask_roi_extractor", "range", "mmdet.core.merge_aug_masks", "htc.HybridTaskCascade.mask_head[].get_seg_masks", "htc.HybridTaskCascade.semantic_roi_extractor", "aug_masks.append", "range", "mask_head", "mask_head", "mask_head.sigmoid().cpu().numpy", "len", "mask_head.sigmoid().cpu", "mask_head.sigmoid"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_det_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2result", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.RPNTestMixin.simple_test_rpn", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.htc.HybridTaskCascade._bbox_forward_test", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.regress_by_class", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.merge_augs.merge_aug_masks", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.fcn_mask_head.FCNMaskHead.get_seg_masks"], ["", "def", "simple_test", "(", "self", ",", "img", ",", "img_metas", ",", "proposals", "=", "None", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "proposal_list", "=", "self", ".", "simple_test_rpn", "(", "\n", "x", ",", "img_metas", ",", "\n", "self", ".", "test_cfg", ".", "rpn", ")", "if", "proposals", "is", "None", "else", "proposals", "\n", "\n", "if", "self", ".", "with_semantic", ":", "\n", "            ", "_", ",", "semantic_feat", "=", "self", ".", "semantic_head", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "semantic_feat", "=", "None", "\n", "\n", "", "img_shape", "=", "img_metas", "[", "0", "]", "[", "'img_shape'", "]", "\n", "ori_shape", "=", "img_metas", "[", "0", "]", "[", "'ori_shape'", "]", "\n", "scale_factor", "=", "img_metas", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "\n", "# \"ms\" in variable names means multi-stage", "\n", "ms_bbox_result", "=", "{", "}", "\n", "ms_segm_result", "=", "{", "}", "\n", "ms_scores", "=", "[", "]", "\n", "rcnn_test_cfg", "=", "self", ".", "test_cfg", ".", "rcnn", "\n", "\n", "rois", "=", "bbox2roi", "(", "proposal_list", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "bbox_head", "=", "self", ".", "bbox_head", "[", "i", "]", "\n", "cls_score", ",", "bbox_pred", "=", "self", ".", "_bbox_forward_test", "(", "\n", "i", ",", "x", ",", "rois", ",", "semantic_feat", "=", "semantic_feat", ")", "\n", "ms_scores", ".", "append", "(", "cls_score", ")", "\n", "\n", "if", "i", "<", "self", ".", "num_stages", "-", "1", ":", "\n", "                ", "bbox_label", "=", "cls_score", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "rois", "=", "bbox_head", ".", "regress_by_class", "(", "rois", ",", "bbox_label", ",", "bbox_pred", ",", "\n", "img_metas", "[", "0", "]", ")", "\n", "\n", "", "", "cls_score", "=", "sum", "(", "ms_scores", ")", "/", "float", "(", "len", "(", "ms_scores", ")", ")", "\n", "det_bboxes", ",", "det_labels", "=", "self", ".", "bbox_head", "[", "-", "1", "]", ".", "get_det_bboxes", "(", "\n", "rois", ",", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "rescale", "=", "rescale", ",", "\n", "cfg", "=", "rcnn_test_cfg", ")", "\n", "bbox_result", "=", "bbox2result", "(", "det_bboxes", ",", "det_labels", ",", "\n", "self", ".", "bbox_head", "[", "-", "1", "]", ".", "num_classes", ")", "\n", "ms_bbox_result", "[", "'ensemble'", "]", "=", "bbox_result", "\n", "\n", "if", "self", ".", "with_mask", ":", "\n", "            ", "if", "det_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "mask_classes", "=", "self", ".", "mask_head", "[", "-", "1", "]", ".", "num_classes", "-", "1", "\n", "segm_result", "=", "[", "[", "]", "for", "_", "in", "range", "(", "mask_classes", ")", "]", "\n", "", "else", ":", "\n", "                ", "_bboxes", "=", "(", "\n", "det_bboxes", "[", ":", ",", ":", "4", "]", "*", "\n", "scale_factor", "if", "rescale", "else", "det_bboxes", ")", "\n", "\n", "mask_rois", "=", "bbox2roi", "(", "[", "_bboxes", "]", ")", "\n", "aug_masks", "=", "[", "]", "\n", "mask_roi_extractor", "=", "self", ".", "mask_roi_extractor", "[", "-", "1", "]", "\n", "mask_feats", "=", "mask_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "mask_roi_extractor", ".", "featmap_strides", ")", "]", ",", "mask_rois", ")", "\n", "if", "self", ".", "with_semantic", "and", "'mask'", "in", "self", ".", "semantic_fusion", ":", "\n", "                    ", "mask_semantic_feat", "=", "self", ".", "semantic_roi_extractor", "(", "\n", "[", "semantic_feat", "]", ",", "mask_rois", ")", "\n", "mask_feats", "+=", "mask_semantic_feat", "\n", "", "last_feat", "=", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "                    ", "mask_head", "=", "self", ".", "mask_head", "[", "i", "]", "\n", "if", "self", ".", "mask_info_flow", ":", "\n", "                        ", "mask_pred", ",", "last_feat", "=", "mask_head", "(", "mask_feats", ",", "last_feat", ")", "\n", "", "else", ":", "\n", "                        ", "mask_pred", "=", "mask_head", "(", "mask_feats", ")", "\n", "", "aug_masks", ".", "append", "(", "mask_pred", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "merged_masks", "=", "merge_aug_masks", "(", "aug_masks", ",", "\n", "[", "img_metas", "]", "*", "self", ".", "num_stages", ",", "\n", "self", ".", "test_cfg", ".", "rcnn", ")", "\n", "segm_result", "=", "self", ".", "mask_head", "[", "-", "1", "]", ".", "get_seg_masks", "(", "\n", "merged_masks", ",", "_bboxes", ",", "det_labels", ",", "rcnn_test_cfg", ",", "\n", "ori_shape", ",", "scale_factor", ",", "rescale", ")", "\n", "", "ms_segm_result", "[", "'ensemble'", "]", "=", "segm_result", "\n", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "results", "=", "(", "ms_bbox_result", "[", "'ensemble'", "]", ",", "ms_segm_result", "[", "'ensemble'", "]", ")", "\n", "", "else", ":", "\n", "            ", "results", "=", "ms_bbox_result", "[", "'ensemble'", "]", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.htc.HybridTaskCascade.aug_test": [[397, 518], ["htc.HybridTaskCascade.aug_test_rpn", "zip", "mmdet.core.merge_aug_bboxes", "mmdet.core.multiclass_nms", "mmdet.core.bbox2result", "htc.HybridTaskCascade.extract_feats", "htc.HybridTaskCascade.extract_feats", "mmdet.core.bbox_mapping", "mmdet.core.bbox2roi", "range", "htc.HybridTaskCascade.bbox_head[].get_det_bboxes", "aug_bboxes.append", "aug_scores.append", "len", "htc.HybridTaskCascade._bbox_forward_test", "ms_scores.append", "sum", "float", "zip", "mmdet.core.merge_aug_masks", "htc.HybridTaskCascade.mask_head[].get_seg_masks", "htc.HybridTaskCascade.semantic_head", "htc.HybridTaskCascade.extract_feats", "cls_score.argmax", "bbox_head.regress_by_class", "len", "htc.HybridTaskCascade.extract_feats", "mmdet.core.bbox_mapping", "mmdet.core.bbox2roi", "range", "range", "htc.HybridTaskCascade.semantic_roi_extractor", "aug_masks.append", "aug_img_metas.append", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "mask_head", "mask_head", "mask_head.sigmoid().cpu().numpy", "len", "mask_head.sigmoid().cpu", "mask_head.sigmoid"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.RPNTestMixin.aug_test_rpn", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.merge_augs.merge_aug_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.bbox_nms.multiclass_nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2result", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.extract_feats", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.extract_feats", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox_mapping", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_det_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.htc.HybridTaskCascade._bbox_forward_test", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.merge_augs.merge_aug_masks", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.fcn_mask_head.FCNMaskHead.get_seg_masks", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.extract_feats", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.regress_by_class", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.extract_feats", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox_mapping", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi"], ["", "def", "aug_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "proposals", "=", "None", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\"Test with augmentations.\n\n        If rescale is False, then returned bboxes and masks will fit the scale\n        of imgs[0].\n        \"\"\"", "\n", "if", "self", ".", "with_semantic", ":", "\n", "            ", "semantic_feats", "=", "[", "\n", "self", ".", "semantic_head", "(", "feat", ")", "[", "1", "]", "\n", "for", "feat", "in", "self", ".", "extract_feats", "(", "imgs", ")", "\n", "]", "\n", "", "else", ":", "\n", "            ", "semantic_feats", "=", "[", "None", "]", "*", "len", "(", "img_metas", ")", "\n", "\n", "# recompute feats to save memory", "\n", "", "proposal_list", "=", "self", ".", "aug_test_rpn", "(", "\n", "self", ".", "extract_feats", "(", "imgs", ")", ",", "img_metas", ",", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "\n", "rcnn_test_cfg", "=", "self", ".", "test_cfg", ".", "rcnn", "\n", "aug_bboxes", "=", "[", "]", "\n", "aug_scores", "=", "[", "]", "\n", "for", "x", ",", "img_meta", ",", "semantic", "in", "zip", "(", "\n", "self", ".", "extract_feats", "(", "imgs", ")", ",", "img_metas", ",", "semantic_feats", ")", ":", "\n", "# only one image in the batch", "\n", "            ", "img_shape", "=", "img_meta", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_meta", "[", "0", "]", "[", "'flip'", "]", "\n", "\n", "proposals", "=", "bbox_mapping", "(", "proposal_list", "[", "0", "]", "[", ":", ",", ":", "4", "]", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "# \"ms\" in variable names means multi-stage", "\n", "ms_scores", "=", "[", "]", "\n", "\n", "rois", "=", "bbox2roi", "(", "[", "proposals", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "                ", "bbox_head", "=", "self", ".", "bbox_head", "[", "i", "]", "\n", "cls_score", ",", "bbox_pred", "=", "self", ".", "_bbox_forward_test", "(", "\n", "i", ",", "x", ",", "rois", ",", "semantic_feat", "=", "semantic", ")", "\n", "ms_scores", ".", "append", "(", "cls_score", ")", "\n", "\n", "if", "i", "<", "self", ".", "num_stages", "-", "1", ":", "\n", "                    ", "bbox_label", "=", "cls_score", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "rois", "=", "bbox_head", ".", "regress_by_class", "(", "rois", ",", "bbox_label", ",", "\n", "bbox_pred", ",", "img_meta", "[", "0", "]", ")", "\n", "\n", "", "", "cls_score", "=", "sum", "(", "ms_scores", ")", "/", "float", "(", "len", "(", "ms_scores", ")", ")", "\n", "bboxes", ",", "scores", "=", "self", ".", "bbox_head", "[", "-", "1", "]", ".", "get_det_bboxes", "(", "\n", "rois", ",", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "rescale", "=", "False", ",", "\n", "cfg", "=", "None", ")", "\n", "aug_bboxes", ".", "append", "(", "bboxes", ")", "\n", "aug_scores", ".", "append", "(", "scores", ")", "\n", "\n", "# after merging, bboxes will be rescaled to the original image size", "\n", "", "merged_bboxes", ",", "merged_scores", "=", "merge_aug_bboxes", "(", "\n", "aug_bboxes", ",", "aug_scores", ",", "img_metas", ",", "rcnn_test_cfg", ")", "\n", "det_bboxes", ",", "det_labels", "=", "multiclass_nms", "(", "merged_bboxes", ",", "merged_scores", ",", "\n", "rcnn_test_cfg", ".", "score_thr", ",", "\n", "rcnn_test_cfg", ".", "nms", ",", "\n", "rcnn_test_cfg", ".", "max_per_img", ")", "\n", "\n", "bbox_result", "=", "bbox2result", "(", "det_bboxes", ",", "det_labels", ",", "\n", "self", ".", "bbox_head", "[", "-", "1", "]", ".", "num_classes", ")", "\n", "\n", "if", "self", ".", "with_mask", ":", "\n", "            ", "if", "det_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "segm_result", "=", "[", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "mask_head", "[", "-", "1", "]", ".", "num_classes", "-", "\n", "1", ")", "]", "\n", "", "else", ":", "\n", "                ", "aug_masks", "=", "[", "]", "\n", "aug_img_metas", "=", "[", "]", "\n", "for", "x", ",", "img_meta", ",", "semantic", "in", "zip", "(", "\n", "self", ".", "extract_feats", "(", "imgs", ")", ",", "img_metas", ",", "semantic_feats", ")", ":", "\n", "                    ", "img_shape", "=", "img_meta", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_meta", "[", "0", "]", "[", "'flip'", "]", "\n", "_bboxes", "=", "bbox_mapping", "(", "det_bboxes", "[", ":", ",", ":", "4", "]", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "mask_rois", "=", "bbox2roi", "(", "[", "_bboxes", "]", ")", "\n", "mask_feats", "=", "self", ".", "mask_roi_extractor", "[", "-", "1", "]", "(", "\n", "x", "[", ":", "len", "(", "self", ".", "mask_roi_extractor", "[", "-", "1", "]", ".", "featmap_strides", ")", "]", ",", "\n", "mask_rois", ")", "\n", "if", "self", ".", "with_semantic", ":", "\n", "                        ", "semantic_feat", "=", "semantic", "\n", "mask_semantic_feat", "=", "self", ".", "semantic_roi_extractor", "(", "\n", "[", "semantic_feat", "]", ",", "mask_rois", ")", "\n", "if", "mask_semantic_feat", ".", "shape", "[", "-", "2", ":", "]", "!=", "mask_feats", ".", "shape", "[", "\n", "-", "2", ":", "]", ":", "\n", "                            ", "mask_semantic_feat", "=", "F", ".", "adaptive_avg_pool2d", "(", "\n", "mask_semantic_feat", ",", "mask_feats", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "", "mask_feats", "+=", "mask_semantic_feat", "\n", "", "last_feat", "=", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "                        ", "mask_head", "=", "self", ".", "mask_head", "[", "i", "]", "\n", "if", "self", ".", "mask_info_flow", ":", "\n", "                            ", "mask_pred", ",", "last_feat", "=", "mask_head", "(", "\n", "mask_feats", ",", "last_feat", ")", "\n", "", "else", ":", "\n", "                            ", "mask_pred", "=", "mask_head", "(", "mask_feats", ")", "\n", "", "aug_masks", ".", "append", "(", "mask_pred", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "aug_img_metas", ".", "append", "(", "img_meta", ")", "\n", "", "", "merged_masks", "=", "merge_aug_masks", "(", "aug_masks", ",", "aug_img_metas", ",", "\n", "self", ".", "test_cfg", ".", "rcnn", ")", "\n", "\n", "ori_shape", "=", "img_metas", "[", "0", "]", "[", "0", "]", "[", "'ori_shape'", "]", "\n", "segm_result", "=", "self", ".", "mask_head", "[", "-", "1", "]", ".", "get_seg_masks", "(", "\n", "merged_masks", ",", "\n", "det_bboxes", ",", "\n", "det_labels", ",", "\n", "rcnn_test_cfg", ",", "\n", "ori_shape", ",", "\n", "scale_factor", "=", "1.0", ",", "\n", "rescale", "=", "False", ")", "\n", "", "return", "bbox_result", ",", "segm_result", "\n", "", "else", ":", "\n", "            ", "return", "bbox_result", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.two_stage.TwoStageDetector.__init__": [[20, 63], ["base.BaseDetector.__init__", "builder.build_backbone", "two_stage.TwoStageDetector.init_weights", "builder.build_neck", "builder.build_shared_head", "builder.build_head", "builder.build_roi_extractor", "builder.build_head", "builder.build_head", "builder.build_roi_extractor"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_backbone", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_neck", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_shared_head", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_head", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_roi_extractor", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_head", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_head", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_roi_extractor"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "neck", "=", "None", ",", "\n", "shared_head", "=", "None", ",", "\n", "rpn_head", "=", "None", ",", "\n", "bbox_roi_extractor", "=", "None", ",", "\n", "bbox_head", "=", "None", ",", "\n", "mask_roi_extractor", "=", "None", ",", "\n", "mask_head", "=", "None", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "TwoStageDetector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "builder", ".", "build_backbone", "(", "backbone", ")", "\n", "\n", "if", "neck", "is", "not", "None", ":", "\n", "            ", "self", ".", "neck", "=", "builder", ".", "build_neck", "(", "neck", ")", "\n", "\n", "", "if", "shared_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "shared_head", "=", "builder", ".", "build_shared_head", "(", "shared_head", ")", "\n", "\n", "", "if", "rpn_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "rpn_head", "=", "builder", ".", "build_head", "(", "rpn_head", ")", "\n", "\n", "", "if", "bbox_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "bbox_roi_extractor", "=", "builder", ".", "build_roi_extractor", "(", "\n", "bbox_roi_extractor", ")", "\n", "self", ".", "bbox_head", "=", "builder", ".", "build_head", "(", "bbox_head", ")", "\n", "\n", "", "if", "mask_head", "is", "not", "None", ":", "\n", "            ", "if", "mask_roi_extractor", "is", "not", "None", ":", "\n", "                ", "self", ".", "mask_roi_extractor", "=", "builder", ".", "build_roi_extractor", "(", "\n", "mask_roi_extractor", ")", "\n", "self", ".", "share_roi_extractor", "=", "False", "\n", "", "else", ":", "\n", "                ", "self", ".", "share_roi_extractor", "=", "True", "\n", "self", ".", "mask_roi_extractor", "=", "self", ".", "bbox_roi_extractor", "\n", "", "self", ".", "mask_head", "=", "builder", ".", "build_head", "(", "mask_head", ")", "\n", "\n", "", "self", ".", "train_cfg", "=", "train_cfg", "\n", "self", ".", "test_cfg", "=", "test_cfg", "\n", "\n", "self", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.two_stage.TwoStageDetector.with_rpn": [[64, 67], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_rpn", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'rpn_head'", ")", "and", "self", ".", "rpn_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.two_stage.TwoStageDetector.init_weights": [[68, 88], ["super().init_weights", "two_stage.TwoStageDetector.backbone.init_weights", "isinstance", "two_stage.TwoStageDetector.shared_head.init_weights", "two_stage.TwoStageDetector.rpn_head.init_weights", "two_stage.TwoStageDetector.bbox_roi_extractor.init_weights", "two_stage.TwoStageDetector.bbox_head.init_weights", "two_stage.TwoStageDetector.mask_head.init_weights", "two_stage.TwoStageDetector.neck.init_weights", "two_stage.TwoStageDetector.mask_roi_extractor.init_weights", "m.init_weights"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "TwoStageDetector", ",", "self", ")", ".", "init_weights", "(", "pretrained", ")", "\n", "self", ".", "backbone", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "neck", ",", "nn", ".", "Sequential", ")", ":", "\n", "                ", "for", "m", "in", "self", ".", "neck", ":", "\n", "                    ", "m", ".", "init_weights", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "neck", ".", "init_weights", "(", ")", "\n", "", "", "if", "self", ".", "with_shared_head", ":", "\n", "            ", "self", ".", "shared_head", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "", "if", "self", ".", "with_rpn", ":", "\n", "            ", "self", ".", "rpn_head", ".", "init_weights", "(", ")", "\n", "", "if", "self", ".", "with_bbox", ":", "\n", "            ", "self", ".", "bbox_roi_extractor", ".", "init_weights", "(", ")", "\n", "self", ".", "bbox_head", ".", "init_weights", "(", ")", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "self", ".", "mask_head", ".", "init_weights", "(", ")", "\n", "if", "not", "self", ".", "share_roi_extractor", ":", "\n", "                ", "self", ".", "mask_roi_extractor", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.two_stage.TwoStageDetector.extract_feat": [[89, 96], ["two_stage.TwoStageDetector.backbone", "two_stage.TwoStageDetector.neck"], "methods", ["None"], ["", "", "", "def", "extract_feat", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Directly extract features from the backbone+neck\n        \"\"\"", "\n", "x", "=", "self", ".", "backbone", "(", "img", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "x", "=", "self", ".", "neck", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.two_stage.TwoStageDetector.forward_dummy": [[97, 129], ["two_stage.TwoStageDetector.extract_feat", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "mmdet.core.bbox2roi", "two_stage.TwoStageDetector.rpn_head", "two_stage.TwoStageDetector.bbox_roi_extractor", "two_stage.TwoStageDetector.bbox_head", "two_stage.TwoStageDetector.mask_roi_extractor", "two_stage.TwoStageDetector.mask_head", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "two_stage.TwoStageDetector.shared_head", "two_stage.TwoStageDetector.shared_head"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi"], ["", "def", "forward_dummy", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Used for computing network flops.\n\n        See `mmdetection/tools/get_flops.py`\n        \"\"\"", "\n", "outs", "=", "(", ")", "\n", "# backbone", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "# rpn", "\n", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "outs", "=", "outs", "+", "(", "rpn_outs", ",", ")", "\n", "", "proposals", "=", "torch", ".", "randn", "(", "1000", ",", "4", ")", ".", "to", "(", "device", "=", "img", ".", "device", ")", "\n", "# bbox head", "\n", "rois", "=", "bbox2roi", "(", "[", "proposals", "]", ")", "\n", "if", "self", ".", "with_bbox", ":", "\n", "            ", "bbox_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "bbox_feats", "=", "self", ".", "shared_head", "(", "bbox_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "bbox_feats", ")", "\n", "outs", "=", "outs", "+", "(", "cls_score", ",", "bbox_pred", ")", "\n", "# mask head", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "mask_rois", "=", "rois", "[", ":", "100", "]", "\n", "mask_feats", "=", "self", ".", "mask_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "mask_roi_extractor", ".", "num_inputs", "]", ",", "mask_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ")", "\n", "", "mask_pred", "=", "self", ".", "mask_head", "(", "mask_feats", ")", "\n", "outs", "=", "outs", "+", "(", "mask_pred", ",", ")", "\n", "", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.two_stage.TwoStageDetector.forward_train": [[130, 262], ["two_stage.TwoStageDetector.extract_feat", "dict", "two_stage.TwoStageDetector.rpn_head", "two_stage.TwoStageDetector.rpn_head.loss", "dict.update", "two_stage.TwoStageDetector.train_cfg.get", "two_stage.TwoStageDetector.rpn_head.get_bboxes", "mmdet.core.build_assigner", "mmdet.core.build_sampler", "img.size", "range", "mmdet.core.bbox2roi", "two_stage.TwoStageDetector.bbox_roi_extractor", "two_stage.TwoStageDetector.bbox_head", "two_stage.TwoStageDetector.bbox_head.get_target", "two_stage.TwoStageDetector.bbox_head.loss", "dict.update", "mmdet.core.build_assigner.assign", "mmdet.core.build_sampler.sample", "sampling_results.append", "two_stage.TwoStageDetector.shared_head", "mmdet.core.bbox2roi", "two_stage.TwoStageDetector.mask_roi_extractor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "two_stage.TwoStageDetector.mask_head", "two_stage.TwoStageDetector.mask_head.get_target", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "two_stage.TwoStageDetector.mask_head.loss", "dict.update", "two_stage.TwoStageDetector.shared_head", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "range", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_sampler", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss"], ["", "def", "forward_train", "(", "self", ",", "\n", "img", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "gt_masks", "=", "None", ",", "\n", "proposals", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (Tensor): of shape (N, C, H, W) encoding input images.\n                Typically these should be mean centered and std scaled.\n\n            img_metas (list[dict]): list of image info dict where each dict\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                `mmdet/datasets/pipelines/formatting.py:Collect`.\n\n            gt_bboxes (list[Tensor]): each item are the truth boxes for each\n                image in [tl_x, tl_y, br_x, br_y] format.\n\n            gt_labels (list[Tensor]): class indices corresponding to each box\n\n            gt_bboxes_ignore (None | list[Tensor]): specify which bounding\n                boxes can be ignored when computing the loss.\n\n            gt_masks (None | Tensor) : true segmentation masks for each box\n                used if the architecture supports a segmentation task.\n\n            proposals : override rpn proposals with custom proposals. Use when\n                `with_rpn` is False.\n\n        Returns:\n            dict[str, Tensor]: a dictionary of loss components\n        \"\"\"", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "# RPN forward and loss", "\n", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "rpn_loss_inputs", "=", "rpn_outs", "+", "(", "gt_bboxes", ",", "img_metas", ",", "\n", "self", ".", "train_cfg", ".", "rpn", ")", "\n", "rpn_losses", "=", "self", ".", "rpn_head", ".", "loss", "(", "\n", "*", "rpn_loss_inputs", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "losses", ".", "update", "(", "rpn_losses", ")", "\n", "\n", "proposal_cfg", "=", "self", ".", "train_cfg", ".", "get", "(", "'rpn_proposal'", ",", "\n", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "proposal_inputs", "=", "rpn_outs", "+", "(", "img_metas", ",", "proposal_cfg", ")", "\n", "proposal_list", "=", "self", ".", "rpn_head", ".", "get_bboxes", "(", "*", "proposal_inputs", ")", "\n", "", "else", ":", "\n", "            ", "proposal_list", "=", "proposals", "\n", "\n", "# assign gts and sample proposals", "\n", "", "if", "self", ".", "with_bbox", "or", "self", ".", "with_mask", ":", "\n", "            ", "bbox_assigner", "=", "build_assigner", "(", "self", ".", "train_cfg", ".", "rcnn", ".", "assigner", ")", "\n", "bbox_sampler", "=", "build_sampler", "(", "\n", "self", ".", "train_cfg", ".", "rcnn", ".", "sampler", ",", "context", "=", "self", ")", "\n", "num_imgs", "=", "img", ".", "size", "(", "0", ")", "\n", "if", "gt_bboxes_ignore", "is", "None", ":", "\n", "                ", "gt_bboxes_ignore", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "", "sampling_results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "                ", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_bboxes_ignore", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "\n", "assign_result", ",", "\n", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ",", "\n", "feats", "=", "[", "lvl_feat", "[", "i", "]", "[", "None", "]", "for", "lvl_feat", "in", "x", "]", ")", "\n", "sampling_results", ".", "append", "(", "sampling_result", ")", "\n", "\n", "# bbox head forward and loss", "\n", "", "", "if", "self", ".", "with_bbox", ":", "\n", "            ", "rois", "=", "bbox2roi", "(", "[", "res", ".", "bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "# TODO: a more flexible way to decide which feature maps to use", "\n", "bbox_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "bbox_feats", "=", "self", ".", "shared_head", "(", "bbox_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "bbox_feats", ")", "\n", "\n", "bbox_targets", "=", "self", ".", "bbox_head", ".", "get_target", "(", "sampling_results", ",", "\n", "gt_bboxes", ",", "gt_labels", ",", "\n", "self", ".", "train_cfg", ".", "rcnn", ")", "\n", "loss_bbox", "=", "self", ".", "bbox_head", ".", "loss", "(", "cls_score", ",", "bbox_pred", ",", "\n", "*", "bbox_targets", ")", "\n", "losses", ".", "update", "(", "loss_bbox", ")", "\n", "\n", "# mask head forward and loss", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "if", "not", "self", ".", "share_roi_extractor", ":", "\n", "                ", "pos_rois", "=", "bbox2roi", "(", "\n", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "mask_feats", "=", "self", ".", "mask_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "mask_roi_extractor", ".", "num_inputs", "]", ",", "pos_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                    ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ")", "\n", "", "", "else", ":", "\n", "                ", "pos_inds", "=", "[", "]", "\n", "device", "=", "bbox_feats", ".", "device", "\n", "for", "res", "in", "sampling_results", ":", "\n", "                    ", "pos_inds", ".", "append", "(", "\n", "torch", ".", "ones", "(", "\n", "res", ".", "pos_bboxes", ".", "shape", "[", "0", "]", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "torch", ".", "uint8", ")", ")", "\n", "pos_inds", ".", "append", "(", "\n", "torch", ".", "zeros", "(", "\n", "res", ".", "neg_bboxes", ".", "shape", "[", "0", "]", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "torch", ".", "uint8", ")", ")", "\n", "", "pos_inds", "=", "torch", ".", "cat", "(", "pos_inds", ")", "\n", "mask_feats", "=", "bbox_feats", "[", "pos_inds", "]", "\n", "\n", "", "if", "mask_feats", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "mask_pred", "=", "self", ".", "mask_head", "(", "mask_feats", ")", "\n", "mask_targets", "=", "self", ".", "mask_head", ".", "get_target", "(", "\n", "sampling_results", ",", "gt_masks", ",", "self", ".", "train_cfg", ".", "rcnn", ")", "\n", "pos_labels", "=", "torch", ".", "cat", "(", "\n", "[", "res", ".", "pos_gt_labels", "for", "res", "in", "sampling_results", "]", ")", "\n", "loss_mask", "=", "self", ".", "mask_head", ".", "loss", "(", "mask_pred", ",", "mask_targets", ",", "\n", "pos_labels", ")", "\n", "losses", ".", "update", "(", "loss_mask", ")", "\n", "\n", "", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.two_stage.TwoStageDetector.simple_test": [[295, 318], ["two_stage.TwoStageDetector.extract_feat", "two_stage.TwoStageDetector.simple_test_bboxes", "mmdet.core.bbox2result", "two_stage.TwoStageDetector.simple_test_rpn", "two_stage.TwoStageDetector.simple_test_mask"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.BBoxTestMixin.simple_test_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2result", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.RPNTestMixin.simple_test_rpn", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.MaskTestMixin.simple_test_mask"], ["", "", "def", "simple_test", "(", "self", ",", "img", ",", "img_metas", ",", "proposals", "=", "None", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\"Test without augmentation.\"\"\"", "\n", "assert", "self", ".", "with_bbox", ",", "'Bbox head must be implemented.'", "\n", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "if", "proposals", "is", "None", ":", "\n", "            ", "proposal_list", "=", "self", ".", "simple_test_rpn", "(", "x", ",", "img_metas", ",", "\n", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "", "else", ":", "\n", "            ", "proposal_list", "=", "proposals", "\n", "\n", "", "det_bboxes", ",", "det_labels", "=", "self", ".", "simple_test_bboxes", "(", "\n", "x", ",", "img_metas", ",", "proposal_list", ",", "self", ".", "test_cfg", ".", "rcnn", ",", "rescale", "=", "rescale", ")", "\n", "bbox_results", "=", "bbox2result", "(", "det_bboxes", ",", "det_labels", ",", "\n", "self", ".", "bbox_head", ".", "num_classes", ")", "\n", "\n", "if", "not", "self", ".", "with_mask", ":", "\n", "            ", "return", "bbox_results", "\n", "", "else", ":", "\n", "            ", "segm_results", "=", "self", ".", "simple_test_mask", "(", "\n", "x", ",", "img_metas", ",", "det_bboxes", ",", "det_labels", ",", "rescale", "=", "rescale", ")", "\n", "return", "bbox_results", ",", "segm_results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.two_stage.TwoStageDetector.aug_test": [[319, 347], ["two_stage.TwoStageDetector.aug_test_rpn", "two_stage.TwoStageDetector.aug_test_bboxes", "mmdet.core.bbox2result", "two_stage.TwoStageDetector.extract_feats", "two_stage.TwoStageDetector.extract_feats", "det_bboxes.clone", "two_stage.TwoStageDetector.aug_test_mask", "two_stage.TwoStageDetector.extract_feats"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.RPNTestMixin.aug_test_rpn", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.BBoxTestMixin.aug_test_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2result", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.extract_feats", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.extract_feats", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.MaskTestMixin.aug_test_mask", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.extract_feats"], ["", "", "def", "aug_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\"Test with augmentations.\n\n        If rescale is False, then returned bboxes and masks will fit the scale\n        of imgs[0].\n        \"\"\"", "\n", "# recompute feats to save memory", "\n", "proposal_list", "=", "self", ".", "aug_test_rpn", "(", "\n", "self", ".", "extract_feats", "(", "imgs", ")", ",", "img_metas", ",", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "det_bboxes", ",", "det_labels", "=", "self", ".", "aug_test_bboxes", "(", "\n", "self", ".", "extract_feats", "(", "imgs", ")", ",", "img_metas", ",", "proposal_list", ",", "\n", "self", ".", "test_cfg", ".", "rcnn", ")", "\n", "\n", "if", "rescale", ":", "\n", "            ", "_det_bboxes", "=", "det_bboxes", "\n", "", "else", ":", "\n", "            ", "_det_bboxes", "=", "det_bboxes", ".", "clone", "(", ")", "\n", "_det_bboxes", "[", ":", ",", ":", "4", "]", "*=", "img_metas", "[", "0", "]", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "", "bbox_results", "=", "bbox2result", "(", "_det_bboxes", ",", "det_labels", ",", "\n", "self", ".", "bbox_head", ".", "num_classes", ")", "\n", "\n", "# det_bboxes always keep the original scale", "\n", "if", "self", ".", "with_mask", ":", "\n", "            ", "segm_results", "=", "self", ".", "aug_test_mask", "(", "\n", "self", ".", "extract_feats", "(", "imgs", ")", ",", "img_metas", ",", "det_bboxes", ",", "det_labels", ")", "\n", "return", "bbox_results", ",", "segm_results", "\n", "", "else", ":", "\n", "            ", "return", "bbox_results", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.single_stage.SingleStageDetector.__init__": [[17, 32], ["base.BaseDetector.__init__", "builder.build_backbone", "builder.build_head", "single_stage.SingleStageDetector.init_weights", "builder.build_neck"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_backbone", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_head", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_neck"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "neck", "=", "None", ",", "\n", "bbox_head", "=", "None", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "SingleStageDetector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "builder", ".", "build_backbone", "(", "backbone", ")", "\n", "if", "neck", "is", "not", "None", ":", "\n", "            ", "self", ".", "neck", "=", "builder", ".", "build_neck", "(", "neck", ")", "\n", "", "self", ".", "bbox_head", "=", "builder", ".", "build_head", "(", "bbox_head", ")", "\n", "self", ".", "train_cfg", "=", "train_cfg", "\n", "self", ".", "test_cfg", "=", "test_cfg", "\n", "self", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.single_stage.SingleStageDetector.init_weights": [[33, 43], ["super().init_weights", "single_stage.SingleStageDetector.backbone.init_weights", "single_stage.SingleStageDetector.bbox_head.init_weights", "isinstance", "single_stage.SingleStageDetector.neck.init_weights", "m.init_weights"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "SingleStageDetector", ",", "self", ")", ".", "init_weights", "(", "pretrained", ")", "\n", "self", ".", "backbone", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "neck", ",", "nn", ".", "Sequential", ")", ":", "\n", "                ", "for", "m", "in", "self", ".", "neck", ":", "\n", "                    ", "m", ".", "init_weights", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "neck", ".", "init_weights", "(", ")", "\n", "", "", "self", ".", "bbox_head", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.single_stage.SingleStageDetector.extract_feat": [[44, 51], ["single_stage.SingleStageDetector.backbone", "single_stage.SingleStageDetector.neck"], "methods", ["None"], ["", "def", "extract_feat", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Directly extract features from the backbone+neck\n        \"\"\"", "\n", "x", "=", "self", ".", "backbone", "(", "img", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "x", "=", "self", ".", "neck", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.single_stage.SingleStageDetector.forward_dummy": [[52, 60], ["single_stage.SingleStageDetector.extract_feat", "single_stage.SingleStageDetector.bbox_head"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat"], ["", "def", "forward_dummy", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Used for computing network flops.\n\n        See `mmdetection/tools/get_flops.py`\n        \"\"\"", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "outs", "=", "self", ".", "bbox_head", "(", "x", ")", "\n", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.single_stage.SingleStageDetector.forward_train": [[61, 73], ["single_stage.SingleStageDetector.extract_feat", "single_stage.SingleStageDetector.bbox_head", "single_stage.SingleStageDetector.bbox_head.loss"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss"], ["", "def", "forward_train", "(", "self", ",", "\n", "img", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_bboxes_ignore", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "outs", "=", "self", ".", "bbox_head", "(", "x", ")", "\n", "loss_inputs", "=", "outs", "+", "(", "gt_bboxes", ",", "gt_labels", ",", "img_metas", ",", "self", ".", "train_cfg", ")", "\n", "losses", "=", "self", ".", "bbox_head", ".", "loss", "(", "\n", "*", "loss_inputs", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.single_stage.SingleStageDetector.simple_test": [[74, 84], ["single_stage.SingleStageDetector.extract_feat", "single_stage.SingleStageDetector.bbox_head", "single_stage.SingleStageDetector.bbox_head.get_bboxes", "mmdet.core.bbox2result"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2result"], ["", "def", "simple_test", "(", "self", ",", "img", ",", "img_metas", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "outs", "=", "self", ".", "bbox_head", "(", "x", ")", "\n", "bbox_inputs", "=", "outs", "+", "(", "img_metas", ",", "self", ".", "test_cfg", ",", "rescale", ")", "\n", "bbox_list", "=", "self", ".", "bbox_head", ".", "get_bboxes", "(", "*", "bbox_inputs", ")", "\n", "bbox_results", "=", "[", "\n", "bbox2result", "(", "det_bboxes", ",", "det_labels", ",", "self", ".", "bbox_head", ".", "num_classes", ")", "\n", "for", "det_bboxes", ",", "det_labels", "in", "bbox_list", "\n", "]", "\n", "return", "bbox_results", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.single_stage.SingleStageDetector.aug_test": [[85, 87], ["None"], "methods", ["None"], ["", "def", "aug_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.reppoints_detector.RepPointsDetector.__init__": [[16, 26], ["single_stage.SingleStageDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "neck", ",", "\n", "bbox_head", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "RepPointsDetector", ",", "\n", "self", ")", ".", "__init__", "(", "backbone", ",", "neck", ",", "bbox_head", ",", "train_cfg", ",", "test_cfg", ",", "\n", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.reppoints_detector.RepPointsDetector.merge_aug_results": [[27, 51], ["zip", "torch.cat", "mmdet.core.bbox_mapping_back", "recovered_bboxes.append", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox_mapping_back"], ["", "def", "merge_aug_results", "(", "self", ",", "aug_bboxes", ",", "aug_scores", ",", "img_metas", ")", ":", "\n", "        ", "\"\"\"Merge augmented detection bboxes and scores.\n\n        Args:\n            aug_bboxes (list[Tensor]): shape (n, 4*#class)\n            aug_scores (list[Tensor] or None): shape (n, #class)\n            img_shapes (list[Tensor]): shape (3, ).\n\n        Returns:\n            tuple: (bboxes, scores)\n        \"\"\"", "\n", "recovered_bboxes", "=", "[", "]", "\n", "for", "bboxes", ",", "img_info", "in", "zip", "(", "aug_bboxes", ",", "img_metas", ")", ":", "\n", "            ", "img_shape", "=", "img_info", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_info", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_info", "[", "0", "]", "[", "'flip'", "]", "\n", "bboxes", "=", "bbox_mapping_back", "(", "bboxes", ",", "img_shape", ",", "scale_factor", ",", "flip", ")", "\n", "recovered_bboxes", ".", "append", "(", "bboxes", ")", "\n", "", "bboxes", "=", "torch", ".", "cat", "(", "recovered_bboxes", ",", "dim", "=", "0", ")", "\n", "if", "aug_scores", "is", "None", ":", "\n", "            ", "return", "bboxes", "\n", "", "else", ":", "\n", "            ", "scores", "=", "torch", ".", "cat", "(", "aug_scores", ",", "dim", "=", "0", ")", "\n", "return", "bboxes", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.reppoints_detector.RepPointsDetector.aug_test": [[52, 82], ["reppoints_detector.RepPointsDetector.extract_feats", "zip", "reppoints_detector.RepPointsDetector.merge_aug_results", "mmdet.core.multiclass_nms", "mmdet.core.bbox2result", "reppoints_detector.RepPointsDetector.bbox_head", "aug_bboxes.append", "aug_scores.append", "det_bboxes.clone", "reppoints_detector.RepPointsDetector.bbox_head.get_bboxes"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.extract_feats", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.reppoints_detector.RepPointsDetector.merge_aug_results", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.bbox_nms.multiclass_nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2result", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_bboxes"], ["", "", "def", "aug_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "rescale", "=", "False", ")", ":", "\n", "# recompute feats to save memory", "\n", "        ", "feats", "=", "self", ".", "extract_feats", "(", "imgs", ")", "\n", "\n", "aug_bboxes", "=", "[", "]", "\n", "aug_scores", "=", "[", "]", "\n", "for", "x", ",", "img_meta", "in", "zip", "(", "feats", ",", "img_metas", ")", ":", "\n", "# only one image in the batch", "\n", "            ", "outs", "=", "self", ".", "bbox_head", "(", "x", ")", "\n", "bbox_inputs", "=", "outs", "+", "(", "img_metas", ",", "self", ".", "test_cfg", ",", "False", ",", "False", ")", "\n", "det_bboxes", ",", "det_scores", "=", "self", ".", "bbox_head", ".", "get_bboxes", "(", "*", "bbox_inputs", ")", "[", "0", "]", "\n", "aug_bboxes", ".", "append", "(", "det_bboxes", ")", "\n", "aug_scores", ".", "append", "(", "det_scores", ")", "\n", "\n", "# after merging, bboxes will be rescaled to the original image size", "\n", "", "merged_bboxes", ",", "merged_scores", "=", "self", ".", "merge_aug_results", "(", "\n", "aug_bboxes", ",", "aug_scores", ",", "img_metas", ")", "\n", "det_bboxes", ",", "det_labels", "=", "multiclass_nms", "(", "merged_bboxes", ",", "merged_scores", ",", "\n", "self", ".", "test_cfg", ".", "score_thr", ",", "\n", "self", ".", "test_cfg", ".", "nms", ",", "\n", "self", ".", "test_cfg", ".", "max_per_img", ")", "\n", "\n", "if", "rescale", ":", "\n", "            ", "_det_bboxes", "=", "det_bboxes", "\n", "", "else", ":", "\n", "            ", "_det_bboxes", "=", "det_bboxes", ".", "clone", "(", ")", "\n", "_det_bboxes", "[", ":", ",", ":", "4", "]", "*=", "img_metas", "[", "0", "]", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "", "bbox_results", "=", "bbox2result", "(", "_det_bboxes", ",", "det_labels", ",", "\n", "self", ".", "bbox_head", ".", "num_classes", ")", "\n", "return", "bbox_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.faster_rcnn.FasterRCNN.__init__": [[8, 28], ["two_stage.TwoStageDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "rpn_head", ",", "\n", "bbox_roi_extractor", ",", "\n", "bbox_head", ",", "\n", "train_cfg", ",", "\n", "test_cfg", ",", "\n", "neck", "=", "None", ",", "\n", "shared_head", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "FasterRCNN", ",", "self", ")", ".", "__init__", "(", "\n", "backbone", "=", "backbone", ",", "\n", "neck", "=", "neck", ",", "\n", "shared_head", "=", "shared_head", ",", "\n", "rpn_head", "=", "rpn_head", ",", "\n", "bbox_roi_extractor", "=", "bbox_roi_extractor", ",", "\n", "bbox_head", "=", "bbox_head", ",", "\n", "train_cfg", "=", "train_cfg", ",", "\n", "test_cfg", "=", "test_cfg", ",", "\n", "pretrained", "=", "pretrained", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.fcos.FCOS.__init__": [[8, 17], ["single_stage.SingleStageDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "neck", ",", "\n", "bbox_head", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "FCOS", ",", "self", ")", ".", "__init__", "(", "backbone", ",", "neck", ",", "bbox_head", ",", "train_cfg", ",", "\n", "test_cfg", ",", "pretrained", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.mask_scoring_rcnn.MaskScoringRCNN.__init__": [[16, 44], ["two_stage.TwoStageDetector.__init__", "builder.build_head", "mask_scoring_rcnn.MaskScoringRCNN.mask_iou_head.init_weights"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_head", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "rpn_head", ",", "\n", "bbox_roi_extractor", ",", "\n", "bbox_head", ",", "\n", "mask_roi_extractor", ",", "\n", "mask_head", ",", "\n", "train_cfg", ",", "\n", "test_cfg", ",", "\n", "neck", "=", "None", ",", "\n", "shared_head", "=", "None", ",", "\n", "mask_iou_head", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "MaskScoringRCNN", ",", "self", ")", ".", "__init__", "(", "\n", "backbone", "=", "backbone", ",", "\n", "neck", "=", "neck", ",", "\n", "shared_head", "=", "shared_head", ",", "\n", "rpn_head", "=", "rpn_head", ",", "\n", "bbox_roi_extractor", "=", "bbox_roi_extractor", ",", "\n", "bbox_head", "=", "bbox_head", ",", "\n", "mask_roi_extractor", "=", "mask_roi_extractor", ",", "\n", "mask_head", "=", "mask_head", ",", "\n", "train_cfg", "=", "train_cfg", ",", "\n", "test_cfg", "=", "test_cfg", ",", "\n", "pretrained", "=", "pretrained", ")", "\n", "\n", "self", ".", "mask_iou_head", "=", "builder", ".", "build_head", "(", "mask_iou_head", ")", "\n", "self", ".", "mask_iou_head", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.mask_scoring_rcnn.MaskScoringRCNN.forward_dummy": [[45, 47], ["None"], "methods", ["None"], ["", "def", "forward_dummy", "(", "self", ",", "img", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.mask_scoring_rcnn.MaskScoringRCNN.forward_train": [[49, 164], ["mask_scoring_rcnn.MaskScoringRCNN.extract_feat", "dict", "mask_scoring_rcnn.MaskScoringRCNN.rpn_head", "mask_scoring_rcnn.MaskScoringRCNN.rpn_head.loss", "dict.update", "mask_scoring_rcnn.MaskScoringRCNN.train_cfg.get", "mask_scoring_rcnn.MaskScoringRCNN.rpn_head.get_bboxes", "mmdet.core.build_assigner", "mmdet.core.build_sampler", "img.size", "range", "mmdet.core.bbox2roi", "mask_scoring_rcnn.MaskScoringRCNN.bbox_roi_extractor", "mask_scoring_rcnn.MaskScoringRCNN.bbox_head", "mask_scoring_rcnn.MaskScoringRCNN.bbox_head.get_target", "mask_scoring_rcnn.MaskScoringRCNN.bbox_head.loss", "dict.update", "mask_scoring_rcnn.MaskScoringRCNN.mask_head", "mask_scoring_rcnn.MaskScoringRCNN.mask_head.get_target", "torch.cat", "mask_scoring_rcnn.MaskScoringRCNN.mask_head.loss", "dict.update", "mask_scoring_rcnn.MaskScoringRCNN.mask_iou_head", "mask_scoring_rcnn.MaskScoringRCNN.mask_iou_head.get_target", "mask_scoring_rcnn.MaskScoringRCNN.mask_iou_head.loss", "dict.update", "mmdet.core.build_assigner.assign", "mmdet.core.build_sampler.sample", "sampling_results.append", "mask_scoring_rcnn.MaskScoringRCNN.shared_head", "mmdet.core.bbox2roi", "mask_scoring_rcnn.MaskScoringRCNN.mask_roi_extractor", "torch.cat", "mask_scoring_rcnn.MaskScoringRCNN.shared_head", "torch.cat.append", "torch.cat.append", "range", "torch.ones", "torch.zeros", "range", "range", "mask_scoring_rcnn.MaskScoringRCNN.size", "mask_scoring_rcnn.MaskScoringRCNN.size"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_sampler", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi"], ["", "def", "forward_train", "(", "self", ",", "\n", "img", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "gt_masks", "=", "None", ",", "\n", "proposals", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "# RPN forward and loss", "\n", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "rpn_loss_inputs", "=", "rpn_outs", "+", "(", "gt_bboxes", ",", "img_metas", ",", "\n", "self", ".", "train_cfg", ".", "rpn", ")", "\n", "rpn_losses", "=", "self", ".", "rpn_head", ".", "loss", "(", "\n", "*", "rpn_loss_inputs", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "losses", ".", "update", "(", "rpn_losses", ")", "\n", "\n", "proposal_cfg", "=", "self", ".", "train_cfg", ".", "get", "(", "'rpn_proposal'", ",", "\n", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "proposal_inputs", "=", "rpn_outs", "+", "(", "img_metas", ",", "proposal_cfg", ")", "\n", "proposal_list", "=", "self", ".", "rpn_head", ".", "get_bboxes", "(", "*", "proposal_inputs", ")", "\n", "", "else", ":", "\n", "            ", "proposal_list", "=", "proposals", "\n", "\n", "# assign gts and sample proposals", "\n", "", "if", "self", ".", "with_bbox", "or", "self", ".", "with_mask", ":", "\n", "            ", "bbox_assigner", "=", "build_assigner", "(", "self", ".", "train_cfg", ".", "rcnn", ".", "assigner", ")", "\n", "bbox_sampler", "=", "build_sampler", "(", "\n", "self", ".", "train_cfg", ".", "rcnn", ".", "sampler", ",", "context", "=", "self", ")", "\n", "num_imgs", "=", "img", ".", "size", "(", "0", ")", "\n", "if", "gt_bboxes_ignore", "is", "None", ":", "\n", "                ", "gt_bboxes_ignore", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "", "sampling_results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "                ", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_bboxes_ignore", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "\n", "assign_result", ",", "\n", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ",", "\n", "feats", "=", "[", "lvl_feat", "[", "i", "]", "[", "None", "]", "for", "lvl_feat", "in", "x", "]", ")", "\n", "sampling_results", ".", "append", "(", "sampling_result", ")", "\n", "\n", "# bbox head forward and loss", "\n", "", "", "if", "self", ".", "with_bbox", ":", "\n", "            ", "rois", "=", "bbox2roi", "(", "[", "res", ".", "bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "# TODO: a more flexible way to decide which feature maps to use", "\n", "bbox_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "bbox_feats", "=", "self", ".", "shared_head", "(", "bbox_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "bbox_feats", ")", "\n", "\n", "bbox_targets", "=", "self", ".", "bbox_head", ".", "get_target", "(", "sampling_results", ",", "\n", "gt_bboxes", ",", "gt_labels", ",", "\n", "self", ".", "train_cfg", ".", "rcnn", ")", "\n", "loss_bbox", "=", "self", ".", "bbox_head", ".", "loss", "(", "cls_score", ",", "bbox_pred", ",", "\n", "*", "bbox_targets", ")", "\n", "losses", ".", "update", "(", "loss_bbox", ")", "\n", "\n", "# mask head forward and loss", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "if", "not", "self", ".", "share_roi_extractor", ":", "\n", "                ", "pos_rois", "=", "bbox2roi", "(", "\n", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "mask_feats", "=", "self", ".", "mask_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "mask_roi_extractor", ".", "num_inputs", "]", ",", "pos_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                    ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ")", "\n", "", "", "else", ":", "\n", "                ", "pos_inds", "=", "[", "]", "\n", "device", "=", "bbox_feats", ".", "device", "\n", "for", "res", "in", "sampling_results", ":", "\n", "                    ", "pos_inds", ".", "append", "(", "\n", "torch", ".", "ones", "(", "\n", "res", ".", "pos_bboxes", ".", "shape", "[", "0", "]", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "torch", ".", "uint8", ")", ")", "\n", "pos_inds", ".", "append", "(", "\n", "torch", ".", "zeros", "(", "\n", "res", ".", "neg_bboxes", ".", "shape", "[", "0", "]", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "torch", ".", "uint8", ")", ")", "\n", "", "pos_inds", "=", "torch", ".", "cat", "(", "pos_inds", ")", "\n", "mask_feats", "=", "bbox_feats", "[", "pos_inds", "]", "\n", "", "mask_pred", "=", "self", ".", "mask_head", "(", "mask_feats", ")", "\n", "\n", "mask_targets", "=", "self", ".", "mask_head", ".", "get_target", "(", "sampling_results", ",", "\n", "gt_masks", ",", "\n", "self", ".", "train_cfg", ".", "rcnn", ")", "\n", "pos_labels", "=", "torch", ".", "cat", "(", "\n", "[", "res", ".", "pos_gt_labels", "for", "res", "in", "sampling_results", "]", ")", "\n", "loss_mask", "=", "self", ".", "mask_head", ".", "loss", "(", "mask_pred", ",", "mask_targets", ",", "\n", "pos_labels", ")", "\n", "losses", ".", "update", "(", "loss_mask", ")", "\n", "\n", "# mask iou head forward and loss", "\n", "pos_mask_pred", "=", "mask_pred", "[", "range", "(", "mask_pred", ".", "size", "(", "0", ")", ")", ",", "pos_labels", "]", "\n", "mask_iou_pred", "=", "self", ".", "mask_iou_head", "(", "mask_feats", ",", "pos_mask_pred", ")", "\n", "pos_mask_iou_pred", "=", "mask_iou_pred", "[", "range", "(", "mask_iou_pred", ".", "size", "(", "0", ")", ")", ",", "\n", "pos_labels", "]", "\n", "mask_iou_targets", "=", "self", ".", "mask_iou_head", ".", "get_target", "(", "\n", "sampling_results", ",", "gt_masks", ",", "pos_mask_pred", ",", "mask_targets", ",", "\n", "self", ".", "train_cfg", ".", "rcnn", ")", "\n", "loss_mask_iou", "=", "self", ".", "mask_iou_head", ".", "loss", "(", "pos_mask_iou_pred", ",", "\n", "mask_iou_targets", ")", "\n", "losses", ".", "update", "(", "loss_mask_iou", ")", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.mask_scoring_rcnn.MaskScoringRCNN.simple_test_mask": [[165, 201], ["mmdet.core.bbox2roi", "mask_scoring_rcnn.MaskScoringRCNN.mask_roi_extractor", "mask_scoring_rcnn.MaskScoringRCNN.mask_head", "mask_scoring_rcnn.MaskScoringRCNN.mask_head.get_seg_masks", "mask_scoring_rcnn.MaskScoringRCNN.mask_iou_head", "mask_scoring_rcnn.MaskScoringRCNN.mask_iou_head.get_mask_scores", "mask_scoring_rcnn.MaskScoringRCNN.shared_head", "range", "range", "len", "range", "det_labels.size"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.fcn_mask_head.FCNMaskHead.get_seg_masks", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.maskiou_head.MaskIoUHead.get_mask_scores"], ["", "def", "simple_test_mask", "(", "self", ",", "\n", "x", ",", "\n", "img_metas", ",", "\n", "det_bboxes", ",", "\n", "det_labels", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "# image shape of the first image in the batch (only one)", "\n", "        ", "ori_shape", "=", "img_metas", "[", "0", "]", "[", "'ori_shape'", "]", "\n", "scale_factor", "=", "img_metas", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "\n", "if", "det_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "segm_result", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "mask_head", ".", "num_classes", "-", "1", ")", "]", "\n", "mask_scores", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "mask_head", ".", "num_classes", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "# if det_bboxes is rescaled to the original image size, we need to", "\n", "# rescale it back to the testing scale to obtain RoIs.", "\n", "            ", "_bboxes", "=", "(", "\n", "det_bboxes", "[", ":", ",", ":", "4", "]", "*", "scale_factor", "if", "rescale", "else", "det_bboxes", ")", "\n", "mask_rois", "=", "bbox2roi", "(", "[", "_bboxes", "]", ")", "\n", "mask_feats", "=", "self", ".", "mask_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "self", ".", "mask_roi_extractor", ".", "featmap_strides", ")", "]", ",", "mask_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ")", "\n", "", "mask_pred", "=", "self", ".", "mask_head", "(", "mask_feats", ")", "\n", "segm_result", "=", "self", ".", "mask_head", ".", "get_seg_masks", "(", "mask_pred", ",", "_bboxes", ",", "\n", "det_labels", ",", "\n", "self", ".", "test_cfg", ".", "rcnn", ",", "\n", "ori_shape", ",", "scale_factor", ",", "\n", "rescale", ")", "\n", "# get mask scores with mask iou head", "\n", "mask_iou_pred", "=", "self", ".", "mask_iou_head", "(", "\n", "mask_feats", ",", "mask_pred", "[", "range", "(", "det_labels", ".", "size", "(", "0", ")", ")", ",", "\n", "det_labels", "+", "1", "]", ")", "\n", "mask_scores", "=", "self", ".", "mask_iou_head", ".", "get_mask_scores", "(", "\n", "mask_iou_pred", ",", "det_bboxes", ",", "det_labels", ")", "\n", "", "return", "segm_result", ",", "mask_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.mask_rcnn.MaskRCNN.__init__": [[8, 32], ["two_stage.TwoStageDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "rpn_head", ",", "\n", "bbox_roi_extractor", ",", "\n", "bbox_head", ",", "\n", "mask_roi_extractor", ",", "\n", "mask_head", ",", "\n", "train_cfg", ",", "\n", "test_cfg", ",", "\n", "neck", "=", "None", ",", "\n", "shared_head", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "MaskRCNN", ",", "self", ")", ".", "__init__", "(", "\n", "backbone", "=", "backbone", ",", "\n", "neck", "=", "neck", ",", "\n", "shared_head", "=", "shared_head", ",", "\n", "rpn_head", "=", "rpn_head", ",", "\n", "bbox_roi_extractor", "=", "bbox_roi_extractor", ",", "\n", "bbox_head", "=", "bbox_head", ",", "\n", "mask_roi_extractor", "=", "mask_roi_extractor", ",", "\n", "mask_head", "=", "mask_head", ",", "\n", "train_cfg", "=", "train_cfg", ",", "\n", "test_cfg", "=", "test_cfg", ",", "\n", "pretrained", "=", "pretrained", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.grid_rcnn.GridRCNN.__init__": [[18, 52], ["two_stage.TwoStageDetector.__init__", "builder.build_head", "grid_rcnn.GridRCNN.init_extra_weights", "builder.build_roi_extractor"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_head", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.grid_rcnn.GridRCNN.init_extra_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_roi_extractor"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "rpn_head", ",", "\n", "bbox_roi_extractor", ",", "\n", "bbox_head", ",", "\n", "grid_roi_extractor", ",", "\n", "grid_head", ",", "\n", "train_cfg", ",", "\n", "test_cfg", ",", "\n", "neck", "=", "None", ",", "\n", "shared_head", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "assert", "grid_head", "is", "not", "None", "\n", "super", "(", "GridRCNN", ",", "self", ")", ".", "__init__", "(", "\n", "backbone", "=", "backbone", ",", "\n", "neck", "=", "neck", ",", "\n", "shared_head", "=", "shared_head", ",", "\n", "rpn_head", "=", "rpn_head", ",", "\n", "bbox_roi_extractor", "=", "bbox_roi_extractor", ",", "\n", "bbox_head", "=", "bbox_head", ",", "\n", "train_cfg", "=", "train_cfg", ",", "\n", "test_cfg", "=", "test_cfg", ",", "\n", "pretrained", "=", "pretrained", ")", "\n", "\n", "if", "grid_roi_extractor", "is", "not", "None", ":", "\n", "            ", "self", ".", "grid_roi_extractor", "=", "builder", ".", "build_roi_extractor", "(", "\n", "grid_roi_extractor", ")", "\n", "self", ".", "share_roi_extractor", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "share_roi_extractor", "=", "True", "\n", "self", ".", "grid_roi_extractor", "=", "self", ".", "bbox_roi_extractor", "\n", "", "self", ".", "grid_head", "=", "builder", ".", "build_head", "(", "grid_head", ")", "\n", "\n", "self", ".", "init_extra_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.grid_rcnn.GridRCNN.init_extra_weights": [[53, 57], ["grid_rcnn.GridRCNN.grid_head.init_weights", "grid_rcnn.GridRCNN.grid_roi_extractor.init_weights"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["", "def", "init_extra_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "grid_head", ".", "init_weights", "(", ")", "\n", "if", "not", "self", ".", "share_roi_extractor", ":", "\n", "            ", "self", ".", "grid_roi_extractor", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.grid_rcnn.GridRCNN._random_jitter": [[58, 82], ["zip", "bboxes.new_empty().uniform_", "torch.cat", "new_bboxes[].clamp_", "new_bboxes[].clamp_", "bboxes.new_empty"], "methods", ["None"], ["", "", "def", "_random_jitter", "(", "self", ",", "sampling_results", ",", "img_metas", ",", "amplitude", "=", "0.15", ")", ":", "\n", "        ", "\"\"\"Ramdom jitter positive proposals for training.\"\"\"", "\n", "for", "sampling_result", ",", "img_meta", "in", "zip", "(", "sampling_results", ",", "img_metas", ")", ":", "\n", "            ", "bboxes", "=", "sampling_result", ".", "pos_bboxes", "\n", "random_offsets", "=", "bboxes", ".", "new_empty", "(", "bboxes", ".", "shape", "[", "0", "]", ",", "4", ")", ".", "uniform_", "(", "\n", "-", "amplitude", ",", "amplitude", ")", "\n", "# before jittering", "\n", "cxcy", "=", "(", "bboxes", "[", ":", ",", "2", ":", "4", "]", "+", "bboxes", "[", ":", ",", ":", "2", "]", ")", "/", "2", "\n", "wh", "=", "(", "bboxes", "[", ":", ",", "2", ":", "4", "]", "-", "bboxes", "[", ":", ",", ":", "2", "]", ")", ".", "abs", "(", ")", "\n", "# after jittering", "\n", "new_cxcy", "=", "cxcy", "+", "wh", "*", "random_offsets", "[", ":", ",", ":", "2", "]", "\n", "new_wh", "=", "wh", "*", "(", "1", "+", "random_offsets", "[", ":", ",", "2", ":", "]", ")", "\n", "# xywh to xyxy", "\n", "new_x1y1", "=", "(", "new_cxcy", "-", "new_wh", "/", "2", ")", "\n", "new_x2y2", "=", "(", "new_cxcy", "+", "new_wh", "/", "2", ")", "\n", "new_bboxes", "=", "torch", ".", "cat", "(", "[", "new_x1y1", ",", "new_x2y2", "]", ",", "dim", "=", "1", ")", "\n", "# clip bboxes", "\n", "max_shape", "=", "img_meta", "[", "'img_shape'", "]", "\n", "if", "max_shape", "is", "not", "None", ":", "\n", "                ", "new_bboxes", "[", ":", ",", "0", ":", ":", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "max_shape", "[", "1", "]", "-", "1", ")", "\n", "new_bboxes", "[", ":", ",", "1", ":", ":", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "max_shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "", "sampling_result", ".", "pos_bboxes", "=", "new_bboxes", "\n", "", "return", "sampling_results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.grid_rcnn.GridRCNN.forward_dummy": [[83, 107], ["grid_rcnn.GridRCNN.extract_feat", "torch.randn().to", "mmdet.core.bbox2roi", "grid_rcnn.GridRCNN.bbox_roi_extractor", "grid_rcnn.GridRCNN.bbox_head", "grid_rcnn.GridRCNN.grid_roi_extractor", "grid_rcnn.GridRCNN.grid_head", "grid_rcnn.GridRCNN.rpn_head", "grid_rcnn.GridRCNN.shared_head", "grid_rcnn.GridRCNN.shared_head", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi"], ["", "def", "forward_dummy", "(", "self", ",", "img", ")", ":", "\n", "        ", "outs", "=", "(", ")", "\n", "# backbone", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "# rpn", "\n", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "outs", "=", "outs", "+", "(", "rpn_outs", ",", ")", "\n", "", "proposals", "=", "torch", ".", "randn", "(", "1000", ",", "4", ")", ".", "to", "(", "device", "=", "img", ".", "device", ")", "\n", "# bbox head", "\n", "rois", "=", "bbox2roi", "(", "[", "proposals", "]", ")", "\n", "bbox_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "            ", "bbox_feats", "=", "self", ".", "shared_head", "(", "bbox_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "bbox_feats", ")", "\n", "# grid head", "\n", "grid_rois", "=", "rois", "[", ":", "100", "]", "\n", "grid_feats", "=", "self", ".", "grid_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "grid_roi_extractor", ".", "num_inputs", "]", ",", "grid_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "            ", "grid_feats", "=", "self", ".", "shared_head", "(", "grid_feats", ")", "\n", "", "grid_pred", "=", "self", ".", "grid_head", "(", "grid_feats", ")", "\n", "return", "rpn_outs", ",", "cls_score", ",", "bbox_pred", ",", "grid_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.grid_rcnn.GridRCNN.forward_train": [[108, 198], ["grid_rcnn.GridRCNN.extract_feat", "dict", "grid_rcnn.GridRCNN.rpn_head", "grid_rcnn.GridRCNN.rpn_head.loss", "dict.update", "grid_rcnn.GridRCNN.train_cfg.get", "grid_rcnn.GridRCNN.rpn_head.get_bboxes", "mmdet.core.build_assigner", "mmdet.core.build_sampler", "img.size", "range", "mmdet.core.bbox2roi", "grid_rcnn.GridRCNN.bbox_roi_extractor", "grid_rcnn.GridRCNN.bbox_head", "grid_rcnn.GridRCNN.bbox_head.get_target", "grid_rcnn.GridRCNN.bbox_head.loss", "dict.update", "grid_rcnn.GridRCNN._random_jitter", "mmdet.core.bbox2roi", "grid_rcnn.GridRCNN.grid_roi_extractor", "grid_rcnn.GridRCNN.train_cfg.rcnn.get", "grid_rcnn.GridRCNN.grid_head", "grid_rcnn.GridRCNN.grid_head.get_target", "grid_rcnn.GridRCNN.grid_head.loss", "dict.update", "mmdet.core.build_assigner.assign", "mmdet.core.build_sampler.sample", "grid_rcnn.GridRCNN.append", "grid_rcnn.GridRCNN.shared_head", "grid_rcnn.GridRCNN.shared_head", "torch.randperm", "min", "range"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_sampler", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.grid_rcnn.GridRCNN._random_jitter", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "def", "forward_train", "(", "self", ",", "\n", "img", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "gt_masks", "=", "None", ",", "\n", "proposals", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "# RPN forward and loss", "\n", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "rpn_loss_inputs", "=", "rpn_outs", "+", "(", "gt_bboxes", ",", "img_metas", ",", "\n", "self", ".", "train_cfg", ".", "rpn", ")", "\n", "rpn_losses", "=", "self", ".", "rpn_head", ".", "loss", "(", "\n", "*", "rpn_loss_inputs", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "losses", ".", "update", "(", "rpn_losses", ")", "\n", "\n", "proposal_cfg", "=", "self", ".", "train_cfg", ".", "get", "(", "'rpn_proposal'", ",", "\n", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "proposal_inputs", "=", "rpn_outs", "+", "(", "img_metas", ",", "proposal_cfg", ")", "\n", "proposal_list", "=", "self", ".", "rpn_head", ".", "get_bboxes", "(", "*", "proposal_inputs", ")", "\n", "", "else", ":", "\n", "            ", "proposal_list", "=", "proposals", "\n", "\n", "", "if", "self", ".", "with_bbox", ":", "\n", "# assign gts and sample proposals", "\n", "            ", "bbox_assigner", "=", "build_assigner", "(", "self", ".", "train_cfg", ".", "rcnn", ".", "assigner", ")", "\n", "bbox_sampler", "=", "build_sampler", "(", "\n", "self", ".", "train_cfg", ".", "rcnn", ".", "sampler", ",", "context", "=", "self", ")", "\n", "num_imgs", "=", "img", ".", "size", "(", "0", ")", "\n", "if", "gt_bboxes_ignore", "is", "None", ":", "\n", "                ", "gt_bboxes_ignore", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "", "sampling_results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "                ", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_bboxes_ignore", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "\n", "assign_result", ",", "\n", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ",", "\n", "feats", "=", "[", "lvl_feat", "[", "i", "]", "[", "None", "]", "for", "lvl_feat", "in", "x", "]", ")", "\n", "sampling_results", ".", "append", "(", "sampling_result", ")", "\n", "\n", "# bbox head forward and loss", "\n", "", "rois", "=", "bbox2roi", "(", "[", "res", ".", "bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "# TODO: a more flexible way to decide which feature maps to use", "\n", "bbox_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "bbox_feats", "=", "self", ".", "shared_head", "(", "bbox_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "bbox_feats", ")", "\n", "\n", "bbox_targets", "=", "self", ".", "bbox_head", ".", "get_target", "(", "sampling_results", ",", "\n", "gt_bboxes", ",", "gt_labels", ",", "\n", "self", ".", "train_cfg", ".", "rcnn", ")", "\n", "loss_bbox", "=", "self", ".", "bbox_head", ".", "loss", "(", "cls_score", ",", "bbox_pred", ",", "\n", "*", "bbox_targets", ")", "\n", "losses", ".", "update", "(", "loss_bbox", ")", "\n", "\n", "# Grid head forward and loss", "\n", "sampling_results", "=", "self", ".", "_random_jitter", "(", "sampling_results", ",", "img_metas", ")", "\n", "pos_rois", "=", "bbox2roi", "(", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "grid_feats", "=", "self", ".", "grid_roi_extractor", "(", "\n", "x", "[", ":", "self", ".", "grid_roi_extractor", ".", "num_inputs", "]", ",", "pos_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "grid_feats", "=", "self", ".", "shared_head", "(", "grid_feats", ")", "\n", "# Accelerate training", "\n", "", "max_sample_num_grid", "=", "self", ".", "train_cfg", ".", "rcnn", ".", "get", "(", "'max_num_grid'", ",", "192", ")", "\n", "sample_idx", "=", "torch", ".", "randperm", "(", "\n", "grid_feats", ".", "shape", "[", "0", "]", ")", "[", ":", "min", "(", "grid_feats", ".", "\n", "shape", "[", "0", "]", ",", "max_sample_num_grid", ")", "]", "\n", "grid_feats", "=", "grid_feats", "[", "sample_idx", "]", "\n", "\n", "grid_pred", "=", "self", ".", "grid_head", "(", "grid_feats", ")", "\n", "\n", "grid_targets", "=", "self", ".", "grid_head", ".", "get_target", "(", "sampling_results", ",", "\n", "self", ".", "train_cfg", ".", "rcnn", ")", "\n", "grid_targets", "=", "grid_targets", "[", "sample_idx", "]", "\n", "\n", "loss_grid", "=", "self", ".", "grid_head", ".", "loss", "(", "grid_pred", ",", "grid_targets", ")", "\n", "losses", ".", "update", "(", "loss_grid", ")", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.grid_rcnn.GridRCNN.simple_test": [[199, 231], ["grid_rcnn.GridRCNN.extract_feat", "grid_rcnn.GridRCNN.simple_test_bboxes", "mmdet.core.bbox2roi", "grid_rcnn.GridRCNN.grid_roi_extractor", "mmdet.core.bbox2result", "grid_rcnn.GridRCNN.simple_test_rpn", "grid_rcnn.GridRCNN.grid_head", "grid_rcnn.GridRCNN.grid_head.get_bboxes", "torch.Tensor", "len"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.BBoxTestMixin.simple_test_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2result", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.RPNTestMixin.simple_test_rpn", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_bboxes"], ["", "def", "simple_test", "(", "self", ",", "img", ",", "img_metas", ",", "proposals", "=", "None", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\"Test without augmentation.\"\"\"", "\n", "assert", "self", ".", "with_bbox", ",", "'Bbox head must be implemented.'", "\n", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "proposal_list", "=", "self", ".", "simple_test_rpn", "(", "\n", "x", ",", "img_metas", ",", "\n", "self", ".", "test_cfg", ".", "rpn", ")", "if", "proposals", "is", "None", "else", "proposals", "\n", "\n", "det_bboxes", ",", "det_labels", "=", "self", ".", "simple_test_bboxes", "(", "\n", "x", ",", "img_metas", ",", "proposal_list", ",", "self", ".", "test_cfg", ".", "rcnn", ",", "rescale", "=", "False", ")", "\n", "\n", "# pack rois into bboxes", "\n", "grid_rois", "=", "bbox2roi", "(", "[", "det_bboxes", "[", ":", ",", ":", "4", "]", "]", ")", "\n", "grid_feats", "=", "self", ".", "grid_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "self", ".", "grid_roi_extractor", ".", "featmap_strides", ")", "]", ",", "grid_rois", ")", "\n", "if", "grid_rois", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "self", ".", "grid_head", ".", "test_mode", "=", "True", "\n", "grid_pred", "=", "self", ".", "grid_head", "(", "grid_feats", ")", "\n", "det_bboxes", "=", "self", ".", "grid_head", ".", "get_bboxes", "(", "det_bboxes", ",", "\n", "grid_pred", "[", "'fused'", "]", ",", "\n", "img_metas", ")", "\n", "if", "rescale", ":", "\n", "                ", "det_bboxes", "[", ":", ",", ":", "4", "]", "/=", "img_metas", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "", "", "else", ":", "\n", "            ", "det_bboxes", "=", "torch", ".", "Tensor", "(", "[", "]", ")", "\n", "\n", "", "bbox_results", "=", "bbox2result", "(", "det_bboxes", ",", "det_labels", ",", "\n", "self", ".", "bbox_head", ".", "num_classes", ")", "\n", "\n", "return", "bbox_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.RPNTestMixin.simple_test_rpn": [[31, 36], ["test_mixins.RPNTestMixin.rpn_head", "test_mixins.RPNTestMixin.rpn_head.get_bboxes"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_bboxes"], ["", "", "def", "simple_test_rpn", "(", "self", ",", "x", ",", "img_metas", ",", "rpn_test_cfg", ")", ":", "\n", "        ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "proposal_inputs", "=", "rpn_outs", "+", "(", "img_metas", ",", "rpn_test_cfg", ")", "\n", "proposal_list", "=", "self", ".", "rpn_head", ".", "get_bboxes", "(", "*", "proposal_inputs", ")", "\n", "return", "proposal_list", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.RPNTestMixin.aug_test_rpn": [[37, 58], ["len", "zip", "range", "test_mixins.RPNTestMixin.simple_test_rpn", "enumerate", "range", "aug_img_metas.append", "mmdet.core.merge_aug_proposals", "range", "aug_proposals[].append", "len", "aug_img_meta.append", "zip"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.RPNTestMixin.simple_test_rpn", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.merge_augs.merge_aug_proposals"], ["", "def", "aug_test_rpn", "(", "self", ",", "feats", ",", "img_metas", ",", "rpn_test_cfg", ")", ":", "\n", "        ", "imgs_per_gpu", "=", "len", "(", "img_metas", "[", "0", "]", ")", "\n", "aug_proposals", "=", "[", "[", "]", "for", "_", "in", "range", "(", "imgs_per_gpu", ")", "]", "\n", "for", "x", ",", "img_meta", "in", "zip", "(", "feats", ",", "img_metas", ")", ":", "\n", "            ", "proposal_list", "=", "self", ".", "simple_test_rpn", "(", "x", ",", "img_meta", ",", "rpn_test_cfg", ")", "\n", "for", "i", ",", "proposals", "in", "enumerate", "(", "proposal_list", ")", ":", "\n", "                ", "aug_proposals", "[", "i", "]", ".", "append", "(", "proposals", ")", "\n", "# reorganize the order of 'img_metas' to match the dimensions", "\n", "# of 'aug_proposals'", "\n", "", "", "aug_img_metas", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "imgs_per_gpu", ")", ":", "\n", "            ", "aug_img_meta", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "img_metas", ")", ")", ":", "\n", "                ", "aug_img_meta", ".", "append", "(", "img_metas", "[", "j", "]", "[", "i", "]", ")", "\n", "", "aug_img_metas", ".", "append", "(", "aug_img_meta", ")", "\n", "# after merging, proposals will be rescaled to the original image size", "\n", "", "merged_proposals", "=", "[", "\n", "merge_aug_proposals", "(", "proposals", ",", "aug_img_meta", ",", "rpn_test_cfg", ")", "\n", "for", "proposals", ",", "aug_img_meta", "in", "zip", "(", "aug_proposals", ",", "aug_img_metas", ")", "\n", "]", "\n", "return", "merged_proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.BBoxTestMixin.simple_test_bboxes": [[97, 121], ["mmdet.core.bbox2roi", "test_mixins.BBoxTestMixin.bbox_roi_extractor", "test_mixins.BBoxTestMixin.bbox_head", "test_mixins.BBoxTestMixin.bbox_head.get_det_bboxes", "test_mixins.BBoxTestMixin.shared_head", "len"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_det_bboxes"], ["", "", "def", "simple_test_bboxes", "(", "self", ",", "\n", "x", ",", "\n", "img_metas", ",", "\n", "proposals", ",", "\n", "rcnn_test_cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\"Test only det bboxes without augmentation.\"\"\"", "\n", "rois", "=", "bbox2roi", "(", "proposals", ")", "\n", "roi_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "self", ".", "bbox_roi_extractor", ".", "featmap_strides", ")", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "            ", "roi_feats", "=", "self", ".", "shared_head", "(", "roi_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "roi_feats", ")", "\n", "img_shape", "=", "img_metas", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_metas", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "det_bboxes", ",", "det_labels", "=", "self", ".", "bbox_head", ".", "get_det_bboxes", "(", "\n", "rois", ",", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "rescale", "=", "rescale", ",", "\n", "cfg", "=", "rcnn_test_cfg", ")", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.BBoxTestMixin.aug_test_bboxes": [[122, 158], ["zip", "mmdet.core.merge_aug_bboxes", "mmdet.core.multiclass_nms", "mmdet.core.bbox_mapping", "mmdet.core.bbox2roi", "test_mixins.BBoxTestMixin.bbox_roi_extractor", "test_mixins.BBoxTestMixin.bbox_head", "test_mixins.BBoxTestMixin.bbox_head.get_det_bboxes", "aug_bboxes.append", "aug_scores.append", "test_mixins.BBoxTestMixin.shared_head", "len"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.merge_augs.merge_aug_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.bbox_nms.multiclass_nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox_mapping", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_det_bboxes"], ["", "def", "aug_test_bboxes", "(", "self", ",", "feats", ",", "img_metas", ",", "proposal_list", ",", "rcnn_test_cfg", ")", ":", "\n", "        ", "aug_bboxes", "=", "[", "]", "\n", "aug_scores", "=", "[", "]", "\n", "for", "x", ",", "img_meta", "in", "zip", "(", "feats", ",", "img_metas", ")", ":", "\n", "# only one image in the batch", "\n", "            ", "img_shape", "=", "img_meta", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_meta", "[", "0", "]", "[", "'flip'", "]", "\n", "# TODO more flexible", "\n", "proposals", "=", "bbox_mapping", "(", "proposal_list", "[", "0", "]", "[", ":", ",", ":", "4", "]", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "rois", "=", "bbox2roi", "(", "[", "proposals", "]", ")", "\n", "# recompute feature maps to save GPU memory", "\n", "roi_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "self", ".", "bbox_roi_extractor", ".", "featmap_strides", ")", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "roi_feats", "=", "self", ".", "shared_head", "(", "roi_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "roi_feats", ")", "\n", "bboxes", ",", "scores", "=", "self", ".", "bbox_head", ".", "get_det_bboxes", "(", "\n", "rois", ",", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "rescale", "=", "False", ",", "\n", "cfg", "=", "None", ")", "\n", "aug_bboxes", ".", "append", "(", "bboxes", ")", "\n", "aug_scores", ".", "append", "(", "scores", ")", "\n", "# after merging, bboxes will be rescaled to the original image size", "\n", "", "merged_bboxes", ",", "merged_scores", "=", "merge_aug_bboxes", "(", "\n", "aug_bboxes", ",", "aug_scores", ",", "img_metas", ",", "rcnn_test_cfg", ")", "\n", "det_bboxes", ",", "det_labels", "=", "multiclass_nms", "(", "merged_bboxes", ",", "merged_scores", ",", "\n", "rcnn_test_cfg", ".", "score_thr", ",", "\n", "rcnn_test_cfg", ".", "nms", ",", "\n", "rcnn_test_cfg", ".", "max_per_img", ")", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.MaskTestMixin.simple_test_mask": [[202, 233], ["mmdet.core.bbox2roi", "test_mixins.MaskTestMixin.mask_roi_extractor", "test_mixins.MaskTestMixin.mask_head", "test_mixins.MaskTestMixin.mask_head.get_seg_masks", "torch.from_numpy().to", "test_mixins.MaskTestMixin.shared_head", "range", "isinstance", "torch.from_numpy", "len"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.fcn_mask_head.FCNMaskHead.get_seg_masks", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to"], ["", "", "def", "simple_test_mask", "(", "self", ",", "\n", "x", ",", "\n", "img_metas", ",", "\n", "det_bboxes", ",", "\n", "det_labels", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "# image shape of the first image in the batch (only one)", "\n", "        ", "ori_shape", "=", "img_metas", "[", "0", "]", "[", "'ori_shape'", "]", "\n", "scale_factor", "=", "img_metas", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "if", "det_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "segm_result", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "mask_head", ".", "num_classes", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "# if det_bboxes is rescaled to the original image size, we need to", "\n", "# rescale it back to the testing scale to obtain RoIs.", "\n", "            ", "if", "rescale", "and", "not", "isinstance", "(", "scale_factor", ",", "float", ")", ":", "\n", "                ", "scale_factor", "=", "torch", ".", "from_numpy", "(", "scale_factor", ")", ".", "to", "(", "\n", "det_bboxes", ".", "device", ")", "\n", "", "_bboxes", "=", "(", "\n", "det_bboxes", "[", ":", ",", ":", "4", "]", "*", "scale_factor", "if", "rescale", "else", "det_bboxes", ")", "\n", "mask_rois", "=", "bbox2roi", "(", "[", "_bboxes", "]", ")", "\n", "mask_feats", "=", "self", ".", "mask_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "self", ".", "mask_roi_extractor", ".", "featmap_strides", ")", "]", ",", "mask_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ")", "\n", "", "mask_pred", "=", "self", ".", "mask_head", "(", "mask_feats", ")", "\n", "segm_result", "=", "self", ".", "mask_head", ".", "get_seg_masks", "(", "mask_pred", ",", "_bboxes", ",", "\n", "det_labels", ",", "\n", "self", ".", "test_cfg", ".", "rcnn", ",", "\n", "ori_shape", ",", "scale_factor", ",", "\n", "rescale", ")", "\n", "", "return", "segm_result", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.MaskTestMixin.aug_test_mask": [[234, 267], ["zip", "mmdet.core.merge_aug_masks", "test_mixins.MaskTestMixin.mask_head.get_seg_masks", "mmdet.core.bbox_mapping", "mmdet.core.bbox2roi", "test_mixins.MaskTestMixin.mask_roi_extractor", "test_mixins.MaskTestMixin.mask_head", "aug_masks.append", "range", "test_mixins.MaskTestMixin.shared_head", "test_mixins.MaskTestMixin.sigmoid().cpu().numpy", "len", "test_mixins.MaskTestMixin.sigmoid().cpu", "test_mixins.MaskTestMixin.sigmoid"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.merge_augs.merge_aug_masks", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.fcn_mask_head.FCNMaskHead.get_seg_masks", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox_mapping", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi"], ["", "def", "aug_test_mask", "(", "self", ",", "feats", ",", "img_metas", ",", "det_bboxes", ",", "det_labels", ")", ":", "\n", "        ", "if", "det_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "segm_result", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "mask_head", ".", "num_classes", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "aug_masks", "=", "[", "]", "\n", "for", "x", ",", "img_meta", "in", "zip", "(", "feats", ",", "img_metas", ")", ":", "\n", "                ", "img_shape", "=", "img_meta", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_meta", "[", "0", "]", "[", "'flip'", "]", "\n", "_bboxes", "=", "bbox_mapping", "(", "det_bboxes", "[", ":", ",", ":", "4", "]", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "mask_rois", "=", "bbox2roi", "(", "[", "_bboxes", "]", ")", "\n", "mask_feats", "=", "self", ".", "mask_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "self", ".", "mask_roi_extractor", ".", "featmap_strides", ")", "]", ",", "\n", "mask_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                    ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ")", "\n", "", "mask_pred", "=", "self", ".", "mask_head", "(", "mask_feats", ")", "\n", "# convert to numpy array to save memory", "\n", "aug_masks", ".", "append", "(", "mask_pred", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "merged_masks", "=", "merge_aug_masks", "(", "aug_masks", ",", "img_metas", ",", "\n", "self", ".", "test_cfg", ".", "rcnn", ")", "\n", "\n", "ori_shape", "=", "img_metas", "[", "0", "]", "[", "0", "]", "[", "'ori_shape'", "]", "\n", "segm_result", "=", "self", ".", "mask_head", ".", "get_seg_masks", "(", "\n", "merged_masks", ",", "\n", "det_bboxes", ",", "\n", "det_labels", ",", "\n", "self", ".", "test_cfg", ".", "rcnn", ",", "\n", "ori_shape", ",", "\n", "scale_factor", "=", "1.0", ",", "\n", "rescale", "=", "False", ")", "\n", "", "return", "segm_result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.rfp.ASPP.__init__": [[12, 35], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "len", "rfp.ASPP.modules", "len", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "rfp.ASPP.aspp.append", "isinstance", "m.weight.data.normal_", "m.bias.data.fill_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "kernel_sizes", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", "\n", "dilations", "=", "[", "1", ",", "3", ",", "6", ",", "1", "]", "\n", "paddings", "=", "[", "0", ",", "3", ",", "6", ",", "0", "]", "\n", "self", ".", "aspp", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "aspp_idx", "in", "range", "(", "len", "(", "kernel_sizes", ")", ")", ":", "\n", "            ", "conv", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_sizes", "[", "aspp_idx", "]", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "dilations", "[", "aspp_idx", "]", ",", "\n", "padding", "=", "paddings", "[", "aspp_idx", "]", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "aspp", ".", "append", "(", "conv", ")", "\n", "", "self", ".", "gap", "=", "torch", ".", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "aspp_num", "=", "len", "(", "kernel_sizes", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.rfp.ASPP.forward": [[36, 45], ["rfp.ASPP.gap", "range", "out[].expand_as", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.relu_", "torch.relu_"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "avg_x", "=", "self", ".", "gap", "(", "x", ")", "\n", "out", "=", "[", "]", "\n", "for", "aspp_idx", "in", "range", "(", "self", ".", "aspp_num", ")", ":", "\n", "            ", "inp", "=", "avg_x", "if", "(", "aspp_idx", "==", "self", ".", "aspp_num", "-", "1", ")", "else", "x", "\n", "out", ".", "append", "(", "F", ".", "relu_", "(", "self", ".", "aspp", "[", "aspp_idx", "]", "(", "inp", ")", ")", ")", "\n", "", "out", "[", "-", "1", "]", "=", "out", "[", "-", "1", "]", ".", "expand_as", "(", "out", "[", "-", "2", "]", ")", "\n", "out", "=", "torch", ".", "cat", "(", "out", ",", "dim", "=", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.rfp.RecursiveFeaturePyramid.__init__": [[50, 96], ["htc.HybridTaskCascade.__init__", "rfp.ASPP", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "rfp.RecursiveFeaturePyramid.rfp_weight.weight.data.fill_", "rfp.RecursiveFeaturePyramid.rfp_weight.bias.data.fill_", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "builder.build_backbone", "builder.build_backbone.init_weights", "rfp.RecursiveFeaturePyramid.rfp_modules.append"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_backbone", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_stages", ",", "\n", "backbone", ",", "\n", "semantic_roi_extractor", "=", "None", ",", "\n", "semantic_head", "=", "None", ",", "\n", "semantic_fusion", "=", "(", "'bbox'", ",", "'mask'", ")", ",", "\n", "interleaved", "=", "True", ",", "\n", "mask_info_flow", "=", "True", ",", "\n", "rfp_steps", "=", "2", ",", "\n", "rfp_sharing", "=", "False", ",", "\n", "stage_with_rfp", "=", "(", "False", ",", "True", ",", "True", ",", "True", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "rfp_steps", "=", "rfp_steps", "\n", "self", ".", "rfp_sharing", "=", "rfp_sharing", "\n", "self", ".", "stage_with_rfp", "=", "stage_with_rfp", "\n", "backbone", "[", "\"rfp\"", "]", "=", "None", "\n", "backbone", "[", "\"stage_with_rfp\"", "]", "=", "stage_with_rfp", "\n", "neck_out_channels", "=", "kwargs", "[", "\"neck\"", "]", "[", "\"out_channels\"", "]", "\n", "if", "rfp_sharing", ":", "\n", "            ", "backbone", "[", "\"rfp\"", "]", "=", "neck_out_channels", "\n", "", "super", "(", ")", ".", "__init__", "(", "\n", "num_stages", ",", "\n", "backbone", ",", "\n", "semantic_roi_extractor", ",", "\n", "semantic_head", ",", "\n", "semantic_fusion", ",", "\n", "interleaved", ",", "\n", "mask_info_flow", ",", "\n", "**", "kwargs", ")", "\n", "if", "not", "self", ".", "rfp_sharing", ":", "\n", "            ", "backbone", "[", "\"rfp\"", "]", "=", "neck_out_channels", "\n", "self", ".", "rfp_modules", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "rfp_idx", "in", "range", "(", "1", ",", "rfp_steps", ")", ":", "\n", "                ", "rfp_module", "=", "builder", ".", "build_backbone", "(", "backbone", ")", "\n", "rfp_module", ".", "init_weights", "(", "kwargs", "[", "\"pretrained\"", "]", ")", "\n", "self", ".", "rfp_modules", ".", "append", "(", "rfp_module", ")", "\n", "", "", "self", ".", "rfp_aspp", "=", "ASPP", "(", "neck_out_channels", ",", "neck_out_channels", "//", "4", ")", "\n", "self", ".", "rfp_weight", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "neck_out_channels", ",", "\n", "1", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "rfp_weight", ".", "weight", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "rfp_weight", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.rfp.RecursiveFeaturePyramid.extract_feat": [[97, 114], ["rfp.RecursiveFeaturePyramid.backbone", "rfp.RecursiveFeaturePyramid.neck", "range", "tuple", "rfp.RecursiveFeaturePyramid.neck", "range", "rfp.RecursiveFeaturePyramid.backbone.rfp_forward", "rfp.RecursiveFeaturePyramid.rfp_modules[].rfp_forward", "len", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "x_new.append", "rfp.RecursiveFeaturePyramid.rfp_weight", "rfp.RecursiveFeaturePyramid.rfp_aspp", "range", "len"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.rfp_forward", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.rfp_forward"], ["", "def", "extract_feat", "(", "self", ",", "img", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "img", ")", "\n", "x", "=", "self", ".", "neck", "(", "x", ")", "\n", "for", "rfp_idx", "in", "range", "(", "self", ".", "rfp_steps", "-", "1", ")", ":", "\n", "            ", "rfp_feats", "=", "tuple", "(", "self", ".", "rfp_aspp", "(", "x", "[", "i", "]", ")", "if", "self", ".", "stage_with_rfp", "[", "i", "]", "else", "x", "[", "i", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "stage_with_rfp", ")", ")", ")", "\n", "if", "self", ".", "rfp_sharing", ":", "\n", "                ", "x_idx", "=", "self", ".", "backbone", ".", "rfp_forward", "(", "img", ",", "rfp_feats", ")", "\n", "", "else", ":", "\n", "                ", "x_idx", "=", "self", ".", "rfp_modules", "[", "rfp_idx", "]", ".", "rfp_forward", "(", "img", ",", "rfp_feats", ")", "\n", "", "x_idx", "=", "self", ".", "neck", "(", "x_idx", ")", "\n", "x_new", "=", "[", "]", "\n", "for", "ft_idx", "in", "range", "(", "len", "(", "x_idx", ")", ")", ":", "\n", "                ", "add_weight", "=", "torch", ".", "sigmoid", "(", "self", ".", "rfp_weight", "(", "x_idx", "[", "ft_idx", "]", ")", ")", "\n", "x_new", ".", "append", "(", "add_weight", "*", "x_idx", "[", "ft_idx", "]", "+", "(", "1", "-", "add_weight", ")", "*", "x", "[", "ft_idx", "]", ")", "\n", "", "x", "=", "x_new", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.__init__": [[18, 88], ["base.BaseDetector.__init__", "builder.build_backbone", "cascade_rcnn.CascadeRCNN.init_weights", "builder.build_neck", "builder.build_head", "builder.build_shared_head", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "zip", "torch.ModuleList", "torch.ModuleList", "isinstance", "isinstance", "len", "len", "cascade_rcnn.CascadeRCNN.bbox_roi_extractor.append", "cascade_rcnn.CascadeRCNN.bbox_head.append", "isinstance", "len", "cascade_rcnn.CascadeRCNN.mask_head.append", "torch.ModuleList", "torch.ModuleList", "builder.build_roi_extractor", "builder.build_head", "builder.build_head", "isinstance", "len", "cascade_rcnn.CascadeRCNN.mask_roi_extractor.append", "range", "range", "range", "builder.build_roi_extractor", "range"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_backbone", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_neck", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_head", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_shared_head", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_roi_extractor", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_head", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_head", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_roi_extractor"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_stages", ",", "\n", "backbone", ",", "\n", "neck", "=", "None", ",", "\n", "shared_head", "=", "None", ",", "\n", "rpn_head", "=", "None", ",", "\n", "bbox_roi_extractor", "=", "None", ",", "\n", "bbox_head", "=", "None", ",", "\n", "mask_roi_extractor", "=", "None", ",", "\n", "mask_head", "=", "None", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "assert", "bbox_roi_extractor", "is", "not", "None", "\n", "assert", "bbox_head", "is", "not", "None", "\n", "super", "(", "CascadeRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "self", ".", "backbone", "=", "builder", ".", "build_backbone", "(", "backbone", ")", "\n", "\n", "if", "neck", "is", "not", "None", ":", "\n", "            ", "self", ".", "neck", "=", "builder", ".", "build_neck", "(", "neck", ")", "\n", "\n", "", "if", "rpn_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "rpn_head", "=", "builder", ".", "build_head", "(", "rpn_head", ")", "\n", "\n", "", "if", "shared_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "shared_head", "=", "builder", ".", "build_shared_head", "(", "shared_head", ")", "\n", "\n", "", "if", "bbox_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "bbox_roi_extractor", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "bbox_head", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "not", "isinstance", "(", "bbox_roi_extractor", ",", "list", ")", ":", "\n", "                ", "bbox_roi_extractor", "=", "[", "\n", "bbox_roi_extractor", "for", "_", "in", "range", "(", "num_stages", ")", "\n", "]", "\n", "", "if", "not", "isinstance", "(", "bbox_head", ",", "list", ")", ":", "\n", "                ", "bbox_head", "=", "[", "bbox_head", "for", "_", "in", "range", "(", "num_stages", ")", "]", "\n", "", "assert", "len", "(", "bbox_roi_extractor", ")", "==", "len", "(", "bbox_head", ")", "==", "self", ".", "num_stages", "\n", "for", "roi_extractor", ",", "head", "in", "zip", "(", "bbox_roi_extractor", ",", "bbox_head", ")", ":", "\n", "                ", "self", ".", "bbox_roi_extractor", ".", "append", "(", "\n", "builder", ".", "build_roi_extractor", "(", "roi_extractor", ")", ")", "\n", "self", ".", "bbox_head", ".", "append", "(", "builder", ".", "build_head", "(", "head", ")", ")", "\n", "\n", "", "", "if", "mask_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "mask_head", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "not", "isinstance", "(", "mask_head", ",", "list", ")", ":", "\n", "                ", "mask_head", "=", "[", "mask_head", "for", "_", "in", "range", "(", "num_stages", ")", "]", "\n", "", "assert", "len", "(", "mask_head", ")", "==", "self", ".", "num_stages", "\n", "for", "head", "in", "mask_head", ":", "\n", "                ", "self", ".", "mask_head", ".", "append", "(", "builder", ".", "build_head", "(", "head", ")", ")", "\n", "", "if", "mask_roi_extractor", "is", "not", "None", ":", "\n", "                ", "self", ".", "share_roi_extractor", "=", "False", "\n", "self", ".", "mask_roi_extractor", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "not", "isinstance", "(", "mask_roi_extractor", ",", "list", ")", ":", "\n", "                    ", "mask_roi_extractor", "=", "[", "\n", "mask_roi_extractor", "for", "_", "in", "range", "(", "num_stages", ")", "\n", "]", "\n", "", "assert", "len", "(", "mask_roi_extractor", ")", "==", "self", ".", "num_stages", "\n", "for", "roi_extractor", "in", "mask_roi_extractor", ":", "\n", "                    ", "self", ".", "mask_roi_extractor", ".", "append", "(", "\n", "builder", ".", "build_roi_extractor", "(", "roi_extractor", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "share_roi_extractor", "=", "True", "\n", "self", ".", "mask_roi_extractor", "=", "self", ".", "bbox_roi_extractor", "\n", "\n", "", "", "self", ".", "train_cfg", "=", "train_cfg", "\n", "self", ".", "test_cfg", "=", "test_cfg", "\n", "\n", "self", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.with_rpn": [[89, 92], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_rpn", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'rpn_head'", ")", "and", "self", ".", "rpn_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.init_weights": [[93, 114], ["super().init_weights", "cascade_rcnn.CascadeRCNN.backbone.init_weights", "range", "isinstance", "cascade_rcnn.CascadeRCNN.rpn_head.init_weights", "cascade_rcnn.CascadeRCNN.shared_head.init_weights", "cascade_rcnn.CascadeRCNN.neck.init_weights", "cascade_rcnn.CascadeRCNN.bbox_roi_extractor[].init_weights", "cascade_rcnn.CascadeRCNN.bbox_head[].init_weights", "cascade_rcnn.CascadeRCNN.mask_head[].init_weights", "m.init_weights", "cascade_rcnn.CascadeRCNN.mask_roi_extractor[].init_weights"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "CascadeRCNN", ",", "self", ")", ".", "init_weights", "(", "pretrained", ")", "\n", "self", ".", "backbone", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "neck", ",", "nn", ".", "Sequential", ")", ":", "\n", "                ", "for", "m", "in", "self", ".", "neck", ":", "\n", "                    ", "m", ".", "init_weights", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "neck", ".", "init_weights", "(", ")", "\n", "", "", "if", "self", ".", "with_rpn", ":", "\n", "            ", "self", ".", "rpn_head", ".", "init_weights", "(", ")", "\n", "", "if", "self", ".", "with_shared_head", ":", "\n", "            ", "self", ".", "shared_head", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "if", "self", ".", "with_bbox", ":", "\n", "                ", "self", ".", "bbox_roi_extractor", "[", "i", "]", ".", "init_weights", "(", ")", "\n", "self", ".", "bbox_head", "[", "i", "]", ".", "init_weights", "(", ")", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "                ", "if", "not", "self", ".", "share_roi_extractor", ":", "\n", "                    ", "self", ".", "mask_roi_extractor", "[", "i", "]", ".", "init_weights", "(", ")", "\n", "", "self", ".", "mask_head", "[", "i", "]", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat": [[115, 120], ["cascade_rcnn.CascadeRCNN.backbone", "cascade_rcnn.CascadeRCNN.neck"], "methods", ["None"], ["", "", "", "def", "extract_feat", "(", "self", ",", "img", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "img", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "x", "=", "self", ".", "neck", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.forward_dummy": [[121, 151], ["cascade_rcnn.CascadeRCNN.extract_feat", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "mmdet.core.bbox2roi", "cascade_rcnn.CascadeRCNN.rpn_head", "range", "range", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "cascade_rcnn.CascadeRCNN.shared_head", "cascade_rcnn.CascadeRCNN.shared_head"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi"], ["", "def", "forward_dummy", "(", "self", ",", "img", ")", ":", "\n", "        ", "outs", "=", "(", ")", "\n", "# backbone", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "# rpn", "\n", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "outs", "=", "outs", "+", "(", "rpn_outs", ",", ")", "\n", "", "proposals", "=", "torch", ".", "randn", "(", "1000", ",", "4", ")", ".", "to", "(", "device", "=", "img", ".", "device", ")", "\n", "# bbox heads", "\n", "rois", "=", "bbox2roi", "(", "[", "proposals", "]", ")", "\n", "if", "self", ".", "with_bbox", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "                ", "bbox_feats", "=", "self", ".", "bbox_roi_extractor", "[", "i", "]", "(", "\n", "x", "[", ":", "self", ".", "bbox_roi_extractor", "[", "i", "]", ".", "num_inputs", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                    ", "bbox_feats", "=", "self", ".", "shared_head", "(", "bbox_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "[", "i", "]", "(", "bbox_feats", ")", "\n", "outs", "=", "outs", "+", "(", "cls_score", ",", "bbox_pred", ")", "\n", "# mask heads", "\n", "", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "mask_rois", "=", "rois", "[", ":", "100", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "                ", "mask_feats", "=", "self", ".", "mask_roi_extractor", "[", "i", "]", "(", "\n", "x", "[", ":", "self", ".", "mask_roi_extractor", "[", "i", "]", ".", "num_inputs", "]", ",", "mask_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                    ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ")", "\n", "", "mask_pred", "=", "self", ".", "mask_head", "[", "i", "]", "(", "mask_feats", ")", "\n", "outs", "=", "outs", "+", "(", "mask_pred", ",", ")", "\n", "", "", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.forward_train": [[152, 305], ["cascade_rcnn.CascadeRCNN.extract_feat", "dict", "range", "cascade_rcnn.CascadeRCNN.rpn_head", "cascade_rcnn.CascadeRCNN.rpn_head.loss", "dict.update", "cascade_rcnn.CascadeRCNN.train_cfg.get", "cascade_rcnn.CascadeRCNN.rpn_head.get_bboxes", "mmdet.core.bbox2roi", "bbox_roi_extractor", "bbox_head", "bbox_head.get_target", "bbox_head.loss", "bbox_head.loss.items", "mmdet.core.build_assigner", "mmdet.core.build_sampler", "img.size", "range", "len", "cascade_rcnn.CascadeRCNN.shared_head", "mask_head", "mask_head.get_target", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mask_head.loss", "mask_head.loss.items", "mmdet.core.build_assigner.assign", "mmdet.core.build_sampler.sample", "sampling_results.append", "mmdet.core.bbox2roi", "mask_roi_extractor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bbox_head.refine_bboxes", "cascade_rcnn.CascadeRCNN.shared_head", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "range", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.type", "torch.cat.type"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor_heads.reppoints_head.RepPointsHead.get_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_sampler", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_target", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.refine_bboxes"], ["", "def", "forward_train", "(", "self", ",", "\n", "img", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "gt_masks", "=", "None", ",", "\n", "proposals", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (Tensor): of shape (N, C, H, W) encoding input images.\n                Typically these should be mean centered and std scaled.\n\n            img_metas (list[dict]): list of image info dict where each dict\n                has: 'img_shape', 'scale_factor', 'flip', and my also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                `mmdet/datasets/pipelines/formatting.py:Collect`.\n\n            gt_bboxes (list[Tensor]): each item are the truth boxes for each\n                image in [tl_x, tl_y, br_x, br_y] format.\n\n            gt_labels (list[Tensor]): class indices corresponding to each box\n\n            gt_bboxes_ignore (None | list[Tensor]): specify which bounding\n                boxes can be ignored when computing the loss.\n\n            gt_masks (None | Tensor) : true segmentation masks for each box\n                used if the architecture supports a segmentation task.\n\n            proposals : override rpn proposals with custom proposals. Use when\n                `with_rpn` is False.\n\n        Returns:\n            dict[str, Tensor]: a dictionary of loss components\n        \"\"\"", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "rpn_loss_inputs", "=", "rpn_outs", "+", "(", "gt_bboxes", ",", "img_metas", ",", "\n", "self", ".", "train_cfg", ".", "rpn", ")", "\n", "rpn_losses", "=", "self", ".", "rpn_head", ".", "loss", "(", "\n", "*", "rpn_loss_inputs", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "losses", ".", "update", "(", "rpn_losses", ")", "\n", "\n", "proposal_cfg", "=", "self", ".", "train_cfg", ".", "get", "(", "'rpn_proposal'", ",", "\n", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "proposal_inputs", "=", "rpn_outs", "+", "(", "img_metas", ",", "proposal_cfg", ")", "\n", "proposal_list", "=", "self", ".", "rpn_head", ".", "get_bboxes", "(", "*", "proposal_inputs", ")", "\n", "", "else", ":", "\n", "            ", "proposal_list", "=", "proposals", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "self", ".", "current_stage", "=", "i", "\n", "rcnn_train_cfg", "=", "self", ".", "train_cfg", ".", "rcnn", "[", "i", "]", "\n", "lw", "=", "self", ".", "train_cfg", ".", "stage_loss_weights", "[", "i", "]", "\n", "\n", "# assign gts and sample proposals", "\n", "sampling_results", "=", "[", "]", "\n", "if", "self", ".", "with_bbox", "or", "self", ".", "with_mask", ":", "\n", "                ", "bbox_assigner", "=", "build_assigner", "(", "rcnn_train_cfg", ".", "assigner", ")", "\n", "bbox_sampler", "=", "build_sampler", "(", "\n", "rcnn_train_cfg", ".", "sampler", ",", "context", "=", "self", ")", "\n", "num_imgs", "=", "img", ".", "size", "(", "0", ")", "\n", "if", "gt_bboxes_ignore", "is", "None", ":", "\n", "                    ", "gt_bboxes_ignore", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "\n", "", "for", "j", "in", "range", "(", "num_imgs", ")", ":", "\n", "                    ", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "\n", "proposal_list", "[", "j", "]", ",", "gt_bboxes", "[", "j", "]", ",", "gt_bboxes_ignore", "[", "j", "]", ",", "\n", "gt_labels", "[", "j", "]", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "\n", "assign_result", ",", "\n", "proposal_list", "[", "j", "]", ",", "\n", "gt_bboxes", "[", "j", "]", ",", "\n", "gt_labels", "[", "j", "]", ",", "\n", "feats", "=", "[", "lvl_feat", "[", "j", "]", "[", "None", "]", "for", "lvl_feat", "in", "x", "]", ")", "\n", "sampling_results", ".", "append", "(", "sampling_result", ")", "\n", "\n", "# bbox head forward and loss", "\n", "", "", "bbox_roi_extractor", "=", "self", ".", "bbox_roi_extractor", "[", "i", "]", "\n", "bbox_head", "=", "self", ".", "bbox_head", "[", "i", "]", "\n", "\n", "rois", "=", "bbox2roi", "(", "[", "res", ".", "bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "\n", "if", "len", "(", "rois", ")", "==", "0", ":", "\n", "# If there are no predicted and/or truth boxes, then we cannot", "\n", "# compute head / mask losses", "\n", "                ", "continue", "\n", "\n", "", "bbox_feats", "=", "bbox_roi_extractor", "(", "x", "[", ":", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "\n", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "bbox_feats", "=", "self", ".", "shared_head", "(", "bbox_feats", ")", "\n", "", "cls_score", ",", "bbox_pred", "=", "bbox_head", "(", "bbox_feats", ")", "\n", "\n", "bbox_targets", "=", "bbox_head", ".", "get_target", "(", "sampling_results", ",", "gt_bboxes", ",", "\n", "gt_labels", ",", "rcnn_train_cfg", ")", "\n", "loss_bbox", "=", "bbox_head", ".", "loss", "(", "cls_score", ",", "bbox_pred", ",", "*", "bbox_targets", ")", "\n", "for", "name", ",", "value", "in", "loss_bbox", ".", "items", "(", ")", ":", "\n", "                ", "losses", "[", "'s{}.{}'", ".", "format", "(", "i", ",", "name", ")", "]", "=", "(", "\n", "value", "*", "lw", "if", "'loss'", "in", "name", "else", "value", ")", "\n", "\n", "# mask head forward and loss", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "                ", "if", "not", "self", ".", "share_roi_extractor", ":", "\n", "                    ", "mask_roi_extractor", "=", "self", ".", "mask_roi_extractor", "[", "i", "]", "\n", "pos_rois", "=", "bbox2roi", "(", "\n", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "mask_feats", "=", "mask_roi_extractor", "(", "\n", "x", "[", ":", "mask_roi_extractor", ".", "num_inputs", "]", ",", "pos_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                        ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ")", "\n", "", "", "else", ":", "\n", "# reuse positive bbox feats", "\n", "                    ", "pos_inds", "=", "[", "]", "\n", "device", "=", "bbox_feats", ".", "device", "\n", "for", "res", "in", "sampling_results", ":", "\n", "                        ", "pos_inds", ".", "append", "(", "\n", "torch", ".", "ones", "(", "\n", "res", ".", "pos_bboxes", ".", "shape", "[", "0", "]", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "torch", ".", "uint8", ")", ")", "\n", "pos_inds", ".", "append", "(", "\n", "torch", ".", "zeros", "(", "\n", "res", ".", "neg_bboxes", ".", "shape", "[", "0", "]", ",", "\n", "device", "=", "device", ",", "\n", "dtype", "=", "torch", ".", "uint8", ")", ")", "\n", "", "pos_inds", "=", "torch", ".", "cat", "(", "pos_inds", ")", "\n", "mask_feats", "=", "bbox_feats", "[", "pos_inds", ".", "type", "(", "torch", ".", "bool", ")", "]", "\n", "", "mask_head", "=", "self", ".", "mask_head", "[", "i", "]", "\n", "mask_pred", "=", "mask_head", "(", "mask_feats", ")", "\n", "mask_targets", "=", "mask_head", ".", "get_target", "(", "sampling_results", ",", "gt_masks", ",", "\n", "rcnn_train_cfg", ")", "\n", "pos_labels", "=", "torch", ".", "cat", "(", "\n", "[", "res", ".", "pos_gt_labels", "for", "res", "in", "sampling_results", "]", ")", "\n", "loss_mask", "=", "mask_head", ".", "loss", "(", "mask_pred", ",", "mask_targets", ",", "pos_labels", ")", "\n", "for", "name", ",", "value", "in", "loss_mask", ".", "items", "(", ")", ":", "\n", "                    ", "losses", "[", "'s{}.{}'", ".", "format", "(", "i", ",", "name", ")", "]", "=", "(", "\n", "value", "*", "lw", "if", "'loss'", "in", "name", "else", "value", ")", "\n", "\n", "# refine bboxes", "\n", "", "", "if", "i", "<", "self", ".", "num_stages", "-", "1", ":", "\n", "                ", "pos_is_gts", "=", "[", "res", ".", "pos_is_gt", "for", "res", "in", "sampling_results", "]", "\n", "roi_labels", "=", "bbox_targets", "[", "0", "]", "# bbox_targets is a tuple", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "proposal_list", "=", "bbox_head", ".", "refine_bboxes", "(", "\n", "rois", ",", "roi_labels", ",", "bbox_pred", ",", "pos_is_gts", ",", "img_metas", ")", "\n", "\n", "", "", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.simple_test": [[306, 406], ["cascade_rcnn.CascadeRCNN.extract_feat", "mmdet.core.bbox2roi", "range", "cascade_rcnn.CascadeRCNN.bbox_head[].get_det_bboxes", "mmdet.core.bbox2result", "cascade_rcnn.CascadeRCNN.simple_test_rpn", "bbox_roi_extractor", "bbox_head", "ms_scores.append", "sum", "cascade_rcnn.CascadeRCNN.shared_head", "cls_score.argmax", "bbox_head.regress_by_class", "isinstance", "mmdet.core.bbox2roi", "range", "mmdet.core.merge_aug_masks", "cascade_rcnn.CascadeRCNN.mask_head[].get_seg_masks", "mask_roi_extractor", "aug_masks.append", "len", "range", "cascade_rcnn.CascadeRCNN.shared_head", "mask_pred.sigmoid().cpu().numpy", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "len", "mask_pred.sigmoid().cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "mask_pred.sigmoid"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.extract_feat", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_det_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2result", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.RPNTestMixin.simple_test_rpn", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.regress_by_class", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.merge_augs.merge_aug_masks", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.fcn_mask_head.FCNMaskHead.get_seg_masks", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to"], ["", "def", "simple_test", "(", "self", ",", "img", ",", "img_metas", ",", "proposals", "=", "None", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\"Run inference on a single image.\n\n        Args:\n            img (Tensor): must be in shape (N, C, H, W)\n            img_metas (list[dict]): a list with one dictionary element.\n                See `mmdet/datasets/pipelines/formatting.py:Collect` for\n                details of meta dicts.\n            proposals : if specified overrides rpn proposals\n            rescale (bool): if True returns boxes in original image space\n\n        Returns:\n            dict: results\n        \"\"\"", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "proposal_list", "=", "self", ".", "simple_test_rpn", "(", "\n", "x", ",", "img_metas", ",", "\n", "self", ".", "test_cfg", ".", "rpn", ")", "if", "proposals", "is", "None", "else", "proposals", "\n", "\n", "img_shape", "=", "img_metas", "[", "0", "]", "[", "'img_shape'", "]", "\n", "ori_shape", "=", "img_metas", "[", "0", "]", "[", "'ori_shape'", "]", "\n", "scale_factor", "=", "img_metas", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "\n", "# \"ms\" in variable names means multi-stage", "\n", "ms_bbox_result", "=", "{", "}", "\n", "ms_segm_result", "=", "{", "}", "\n", "ms_scores", "=", "[", "]", "\n", "rcnn_test_cfg", "=", "self", ".", "test_cfg", ".", "rcnn", "\n", "\n", "rois", "=", "bbox2roi", "(", "proposal_list", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "bbox_roi_extractor", "=", "self", ".", "bbox_roi_extractor", "[", "i", "]", "\n", "bbox_head", "=", "self", ".", "bbox_head", "[", "i", "]", "\n", "\n", "bbox_feats", "=", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "bbox_roi_extractor", ".", "featmap_strides", ")", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "bbox_feats", "=", "self", ".", "shared_head", "(", "bbox_feats", ")", "\n", "\n", "", "cls_score", ",", "bbox_pred", "=", "bbox_head", "(", "bbox_feats", ")", "\n", "ms_scores", ".", "append", "(", "cls_score", ")", "\n", "\n", "if", "i", "<", "self", ".", "num_stages", "-", "1", ":", "\n", "                ", "bbox_label", "=", "cls_score", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "rois", "=", "bbox_head", ".", "regress_by_class", "(", "rois", ",", "bbox_label", ",", "bbox_pred", ",", "\n", "img_metas", "[", "0", "]", ")", "\n", "\n", "", "", "cls_score", "=", "sum", "(", "ms_scores", ")", "/", "self", ".", "num_stages", "\n", "det_bboxes", ",", "det_labels", "=", "self", ".", "bbox_head", "[", "-", "1", "]", ".", "get_det_bboxes", "(", "\n", "rois", ",", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "rescale", "=", "rescale", ",", "\n", "cfg", "=", "rcnn_test_cfg", ")", "\n", "bbox_result", "=", "bbox2result", "(", "det_bboxes", ",", "det_labels", ",", "\n", "self", ".", "bbox_head", "[", "-", "1", "]", ".", "num_classes", ")", "\n", "ms_bbox_result", "[", "'ensemble'", "]", "=", "bbox_result", "\n", "\n", "if", "self", ".", "with_mask", ":", "\n", "            ", "if", "det_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "mask_classes", "=", "self", ".", "mask_head", "[", "-", "1", "]", ".", "num_classes", "-", "1", "\n", "segm_result", "=", "[", "[", "]", "for", "_", "in", "range", "(", "mask_classes", ")", "]", "\n", "", "else", ":", "\n", "                ", "if", "isinstance", "(", "scale_factor", ",", "float", ")", ":", "# aspect ratio fixed", "\n", "                    ", "_bboxes", "=", "(", "\n", "det_bboxes", "[", ":", ",", ":", "4", "]", "*", "\n", "scale_factor", "if", "rescale", "else", "det_bboxes", ")", "\n", "", "else", ":", "\n", "                    ", "_bboxes", "=", "(", "\n", "det_bboxes", "[", ":", ",", ":", "4", "]", "*", "\n", "torch", ".", "from_numpy", "(", "scale_factor", ")", ".", "to", "(", "det_bboxes", ".", "device", ")", "\n", "if", "rescale", "else", "det_bboxes", ")", "\n", "\n", "", "mask_rois", "=", "bbox2roi", "(", "[", "_bboxes", "]", ")", "\n", "aug_masks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "                    ", "mask_roi_extractor", "=", "self", ".", "mask_roi_extractor", "[", "i", "]", "\n", "mask_feats", "=", "mask_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "mask_roi_extractor", ".", "featmap_strides", ")", "]", ",", "mask_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                        ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ")", "\n", "", "mask_pred", "=", "self", ".", "mask_head", "[", "i", "]", "(", "mask_feats", ")", "\n", "aug_masks", ".", "append", "(", "mask_pred", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "merged_masks", "=", "merge_aug_masks", "(", "aug_masks", ",", "\n", "[", "img_metas", "]", "*", "self", ".", "num_stages", ",", "\n", "self", ".", "test_cfg", ".", "rcnn", ")", "\n", "segm_result", "=", "self", ".", "mask_head", "[", "-", "1", "]", ".", "get_seg_masks", "(", "\n", "merged_masks", ",", "_bboxes", ",", "det_labels", ",", "rcnn_test_cfg", ",", "\n", "ori_shape", ",", "scale_factor", ",", "rescale", ")", "\n", "", "ms_segm_result", "[", "'ensemble'", "]", "=", "segm_result", "\n", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "results", "=", "(", "ms_bbox_result", "[", "'ensemble'", "]", ",", "ms_segm_result", "[", "'ensemble'", "]", ")", "\n", "", "else", ":", "\n", "            ", "results", "=", "ms_bbox_result", "[", "'ensemble'", "]", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.aug_test": [[407, 511], ["cascade_rcnn.CascadeRCNN.aug_test_rpn", "zip", "mmdet.core.merge_aug_bboxes", "mmdet.core.multiclass_nms", "mmdet.core.bbox2result", "cascade_rcnn.CascadeRCNN.extract_feats", "cascade_rcnn.CascadeRCNN.extract_feats", "mmdet.core.bbox_mapping", "mmdet.core.bbox2roi", "range", "cascade_rcnn.CascadeRCNN.bbox_head[].get_det_bboxes", "aug_bboxes.append", "aug_scores.append", "bbox_roi_extractor", "bbox_head", "ms_scores.append", "sum", "float", "zip", "mmdet.core.merge_aug_masks", "cascade_rcnn.CascadeRCNN.mask_head[].get_seg_masks", "cascade_rcnn.CascadeRCNN.shared_head", "cls_score.argmax", "bbox_head.regress_by_class", "len", "cascade_rcnn.CascadeRCNN.extract_feats", "mmdet.core.bbox_mapping", "mmdet.core.bbox2roi", "range", "range", "aug_masks.append", "aug_img_metas.append", "len", "cascade_rcnn.CascadeRCNN.shared_head", "mask_pred.sigmoid().cpu().numpy", "len", "mask_pred.sigmoid().cpu", "mask_pred.sigmoid"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.test_mixins.RPNTestMixin.aug_test_rpn", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.merge_augs.merge_aug_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.bbox_nms.multiclass_nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2result", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.extract_feats", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.extract_feats", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox_mapping", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_det_bboxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.merge_augs.merge_aug_masks", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask_heads.fcn_mask_head.FCNMaskHead.get_seg_masks", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.regress_by_class", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.base.BaseDetector.extract_feats", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox_mapping", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi"], ["", "def", "aug_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "proposals", "=", "None", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\"Test with augmentations.\n\n        If rescale is False, then returned bboxes and masks will fit the scale\n        of imgs[0].\n        \"\"\"", "\n", "# recompute feats to save memory", "\n", "proposal_list", "=", "self", ".", "aug_test_rpn", "(", "\n", "self", ".", "extract_feats", "(", "imgs", ")", ",", "img_metas", ",", "self", ".", "test_cfg", ".", "rpn", ")", "\n", "\n", "rcnn_test_cfg", "=", "self", ".", "test_cfg", ".", "rcnn", "\n", "aug_bboxes", "=", "[", "]", "\n", "aug_scores", "=", "[", "]", "\n", "for", "x", ",", "img_meta", "in", "zip", "(", "self", ".", "extract_feats", "(", "imgs", ")", ",", "img_metas", ")", ":", "\n", "# only one image in the batch", "\n", "            ", "img_shape", "=", "img_meta", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_meta", "[", "0", "]", "[", "'flip'", "]", "\n", "\n", "proposals", "=", "bbox_mapping", "(", "proposal_list", "[", "0", "]", "[", ":", ",", ":", "4", "]", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "# \"ms\" in variable names means multi-stage", "\n", "ms_scores", "=", "[", "]", "\n", "\n", "rois", "=", "bbox2roi", "(", "[", "proposals", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "                ", "bbox_roi_extractor", "=", "self", ".", "bbox_roi_extractor", "[", "i", "]", "\n", "bbox_head", "=", "self", ".", "bbox_head", "[", "i", "]", "\n", "\n", "bbox_feats", "=", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "bbox_roi_extractor", ".", "featmap_strides", ")", "]", ",", "rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                    ", "bbox_feats", "=", "self", ".", "shared_head", "(", "bbox_feats", ")", "\n", "\n", "", "cls_score", ",", "bbox_pred", "=", "bbox_head", "(", "bbox_feats", ")", "\n", "ms_scores", ".", "append", "(", "cls_score", ")", "\n", "\n", "if", "i", "<", "self", ".", "num_stages", "-", "1", ":", "\n", "                    ", "bbox_label", "=", "cls_score", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "rois", "=", "bbox_head", ".", "regress_by_class", "(", "rois", ",", "bbox_label", ",", "\n", "bbox_pred", ",", "img_meta", "[", "0", "]", ")", "\n", "\n", "", "", "cls_score", "=", "sum", "(", "ms_scores", ")", "/", "float", "(", "len", "(", "ms_scores", ")", ")", "\n", "bboxes", ",", "scores", "=", "self", ".", "bbox_head", "[", "-", "1", "]", ".", "get_det_bboxes", "(", "\n", "rois", ",", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "rescale", "=", "False", ",", "\n", "cfg", "=", "None", ")", "\n", "aug_bboxes", ".", "append", "(", "bboxes", ")", "\n", "aug_scores", ".", "append", "(", "scores", ")", "\n", "\n", "# after merging, bboxes will be rescaled to the original image size", "\n", "", "merged_bboxes", ",", "merged_scores", "=", "merge_aug_bboxes", "(", "\n", "aug_bboxes", ",", "aug_scores", ",", "img_metas", ",", "rcnn_test_cfg", ")", "\n", "det_bboxes", ",", "det_labels", "=", "multiclass_nms", "(", "merged_bboxes", ",", "merged_scores", ",", "\n", "rcnn_test_cfg", ".", "score_thr", ",", "\n", "rcnn_test_cfg", ".", "nms", ",", "\n", "rcnn_test_cfg", ".", "max_per_img", ")", "\n", "\n", "bbox_result", "=", "bbox2result", "(", "det_bboxes", ",", "det_labels", ",", "\n", "self", ".", "bbox_head", "[", "-", "1", "]", ".", "num_classes", ")", "\n", "\n", "if", "self", ".", "with_mask", ":", "\n", "            ", "if", "det_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "segm_result", "=", "[", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "mask_head", "[", "-", "1", "]", ".", "num_classes", "-", "\n", "1", ")", "]", "\n", "", "else", ":", "\n", "                ", "aug_masks", "=", "[", "]", "\n", "aug_img_metas", "=", "[", "]", "\n", "for", "x", ",", "img_meta", "in", "zip", "(", "self", ".", "extract_feats", "(", "imgs", ")", ",", "img_metas", ")", ":", "\n", "                    ", "img_shape", "=", "img_meta", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_meta", "[", "0", "]", "[", "'flip'", "]", "\n", "_bboxes", "=", "bbox_mapping", "(", "det_bboxes", "[", ":", ",", ":", "4", "]", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "mask_rois", "=", "bbox2roi", "(", "[", "_bboxes", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "                        ", "mask_feats", "=", "self", ".", "mask_roi_extractor", "[", "i", "]", "(", "\n", "x", "[", ":", "len", "(", "self", ".", "mask_roi_extractor", "[", "i", "]", ".", "featmap_strides", "\n", ")", "]", ",", "mask_rois", ")", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                            ", "mask_feats", "=", "self", ".", "shared_head", "(", "mask_feats", ")", "\n", "", "mask_pred", "=", "self", ".", "mask_head", "[", "i", "]", "(", "mask_feats", ")", "\n", "aug_masks", ".", "append", "(", "mask_pred", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "aug_img_metas", ".", "append", "(", "img_meta", ")", "\n", "", "", "merged_masks", "=", "merge_aug_masks", "(", "aug_masks", ",", "aug_img_metas", ",", "\n", "self", ".", "test_cfg", ".", "rcnn", ")", "\n", "\n", "ori_shape", "=", "img_metas", "[", "0", "]", "[", "0", "]", "[", "'ori_shape'", "]", "\n", "segm_result", "=", "self", ".", "mask_head", "[", "-", "1", "]", ".", "get_seg_masks", "(", "\n", "merged_masks", ",", "\n", "det_bboxes", ",", "\n", "det_labels", ",", "\n", "rcnn_test_cfg", ",", "\n", "ori_shape", ",", "\n", "scale_factor", "=", "1.0", ",", "\n", "rescale", "=", "False", ")", "\n", "", "return", "bbox_result", ",", "segm_result", "\n", "", "else", ":", "\n", "            ", "return", "bbox_result", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.show_result": [[512, 522], ["super().show_result", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.show_result"], ["", "", "def", "show_result", "(", "self", ",", "data", ",", "result", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "with_mask", ":", "\n", "            ", "ms_bbox_result", ",", "ms_segm_result", "=", "result", "\n", "if", "isinstance", "(", "ms_bbox_result", ",", "dict", ")", ":", "\n", "                ", "result", "=", "(", "ms_bbox_result", "[", "'ensemble'", "]", ",", "\n", "ms_segm_result", "[", "'ensemble'", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "result", ",", "dict", ")", ":", "\n", "                ", "result", "=", "result", "[", "'ensemble'", "]", "\n", "", "", "super", "(", "CascadeRCNN", ",", "self", ")", ".", "show_result", "(", "data", ",", "result", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.ssd_vgg.SSDVGG.__init__": [[38, 74], ["mmcv.cnn.VGG.__init__", "ssd_vgg.SSDVGG.features.add_module", "ssd_vgg.SSDVGG.features.add_module", "ssd_vgg.SSDVGG.features.add_module", "ssd_vgg.SSDVGG.features.add_module", "ssd_vgg.SSDVGG.features.add_module", "ssd_vgg.SSDVGG._make_extra_layers", "ssd_vgg.L2Norm", "str", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "str", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "str", "torch.ReLU", "torch.ReLU", "torch.ReLU", "str", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "str", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.ssd_vgg.SSDVGG._make_extra_layers"], ["def", "__init__", "(", "self", ",", "\n", "input_size", ",", "\n", "depth", ",", "\n", "with_last_pool", "=", "False", ",", "\n", "ceil_mode", "=", "True", ",", "\n", "out_indices", "=", "(", "3", ",", "4", ")", ",", "\n", "out_feature_indices", "=", "(", "22", ",", "34", ")", ",", "\n", "l2_norm_scale", "=", "20.", ")", ":", "\n", "# TODO: in_channels for mmcv.VGG", "\n", "        ", "super", "(", "SSDVGG", ",", "self", ")", ".", "__init__", "(", "\n", "depth", ",", "\n", "with_last_pool", "=", "with_last_pool", ",", "\n", "ceil_mode", "=", "ceil_mode", ",", "\n", "out_indices", "=", "out_indices", ")", "\n", "assert", "input_size", "in", "(", "300", ",", "512", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "\n", "self", ".", "features", ".", "add_module", "(", "\n", "str", "(", "len", "(", "self", ".", "features", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "features", ".", "add_module", "(", "\n", "str", "(", "len", "(", "self", ".", "features", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "6", ",", "dilation", "=", "6", ")", ")", "\n", "self", ".", "features", ".", "add_module", "(", "\n", "str", "(", "len", "(", "self", ".", "features", ")", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "features", ".", "add_module", "(", "\n", "str", "(", "len", "(", "self", ".", "features", ")", ")", ",", "nn", ".", "Conv2d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "1", ")", ")", "\n", "self", ".", "features", ".", "add_module", "(", "\n", "str", "(", "len", "(", "self", ".", "features", ")", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "out_feature_indices", "=", "out_feature_indices", "\n", "\n", "self", ".", "inplanes", "=", "1024", "\n", "self", ".", "extra", "=", "self", ".", "_make_extra_layers", "(", "self", ".", "extra_setting", "[", "input_size", "]", ")", "\n", "self", ".", "l2_norm", "=", "L2Norm", "(", "\n", "self", ".", "features", "[", "out_feature_indices", "[", "0", "]", "-", "1", "]", ".", "out_channels", ",", "\n", "l2_norm_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.ssd_vgg.SSDVGG.init_weights": [[75, 95], ["isinstance", "ssd_vgg.SSDVGG.extra.modules", "mmcv.cnn.constant_init", "mmdet.utils.get_root_logger", "mmcv.runner.load_checkpoint", "isinstance", "ssd_vgg.SSDVGG.features.modules", "TypeError", "mmcv.cnn.xavier_init", "isinstance", "mmcv.cnn.kaiming_init", "isinstance", "mmcv.cnn.constant_init", "isinstance", "mmcv.cnn.normal_init"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.get_root_logger"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "features", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                    ", "normal_init", "(", "m", ",", "std", "=", "0.01", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "extra", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "xavier_init", "(", "m", ",", "distribution", "=", "'uniform'", ")", "\n", "\n", "", "", "constant_init", "(", "self", ".", "l2_norm", ",", "self", ".", "l2_norm", ".", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.ssd_vgg.SSDVGG.forward": [[96, 111], ["enumerate", "enumerate", "ssd_vgg.SSDVGG.l2_norm", "layer", "torch.relu", "torch.relu", "torch.relu", "len", "tuple", "outs.append", "layer", "outs.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "features", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "out_feature_indices", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "", "", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "extra", ")", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "layer", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "if", "i", "%", "2", "==", "1", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "", "", "outs", "[", "0", "]", "=", "self", ".", "l2_norm", "(", "outs", "[", "0", "]", ")", "\n", "if", "len", "(", "outs", ")", "==", "1", ":", "\n", "            ", "return", "outs", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.ssd_vgg.SSDVGG._make_extra_layers": [[112, 137], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "len", "layers.append", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "", "def", "_make_extra_layers", "(", "self", ",", "outplanes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "kernel_sizes", "=", "(", "1", ",", "3", ")", "\n", "num_layers", "=", "0", "\n", "outplane", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "outplanes", ")", ")", ":", "\n", "            ", "if", "self", ".", "inplanes", "==", "'S'", ":", "\n", "                ", "self", ".", "inplanes", "=", "outplane", "\n", "continue", "\n", "", "k", "=", "kernel_sizes", "[", "num_layers", "%", "2", "]", "\n", "if", "outplanes", "[", "i", "]", "==", "'S'", ":", "\n", "                ", "outplane", "=", "outplanes", "[", "i", "+", "1", "]", "\n", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "outplane", ",", "k", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "outplane", "=", "outplanes", "[", "i", "]", "\n", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "inplanes", ",", "outplane", ",", "k", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "layers", ".", "append", "(", "conv", ")", "\n", "self", ".", "inplanes", "=", "outplanes", "[", "i", "]", "\n", "num_layers", "+=", "1", "\n", "", "if", "self", ".", "input_size", "==", "512", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "256", ",", "4", ",", "padding", "=", "1", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.ssd_vgg.L2Norm.__init__": [[141, 147], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_dims", ",", "scale", "=", "20.", ",", "eps", "=", "1e-10", ")", ":", "\n", "        ", "super", "(", "L2Norm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_dims", "=", "n_dims", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "n_dims", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.ssd_vgg.L2Norm.forward": [[148, 154], ["x.float", "x.float.pow().sum().sqrt", "x.float.pow().sum", "ssd_vgg.L2Norm.weight[].float().expand_as", "x.float.pow", "ssd_vgg.L2Norm.weight[].float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# normalization layer convert to FP32 in FP16 training", "\n", "        ", "x_float", "=", "x", ".", "float", "(", ")", "\n", "norm", "=", "x_float", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "self", ".", "eps", "\n", "return", "(", "self", ".", "weight", "[", "None", ",", ":", ",", "None", ",", "None", "]", ".", "float", "(", ")", ".", "expand_as", "(", "x_float", ")", "*", "\n", "x_float", "/", "norm", ")", ".", "type_as", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRModule.__init__": [[17, 42], ["dict", "torch.Module.__init__", "hrnet.HRModule._check_branches", "hrnet.HRModule._make_branches", "hrnet.HRModule._make_fuse_layers", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRModule._check_branches", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRModule._make_branches", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRModule._make_fuse_layers"], ["def", "__init__", "(", "self", ",", "\n", "num_branches", ",", "\n", "blocks", ",", "\n", "num_blocks", ",", "\n", "in_channels", ",", "\n", "num_channels", ",", "\n", "multiscale_output", "=", "True", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ")", ":", "\n", "        ", "super", "(", "HRModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "num_branches", ",", "num_blocks", ",", "in_channels", ",", "\n", "num_channels", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multiscale_output", "=", "multiscale_output", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_channels", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRModule._check_branches": [[43, 59], ["len", "ValueError", "len", "ValueError", "len", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "num_blocks", ",", "in_channels", ",", "\n", "num_channels", ")", ":", "\n", "        ", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_BLOCKS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_blocks", ")", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_CHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_channels", ")", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "in_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_INCHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "in_channels", ")", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRModule._make_one_branch": [[60, 103], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "mmdet.ops.build_conv_layer", "block", "mmdet.ops.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer"], ["", "", "def", "_make_one_branch", "(", "self", ",", "\n", "branch_index", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "in_channels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "self", ".", "in_channels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "num_channels", "[", "branch_index", "]", "*", "\n", "block", ".", "expansion", ")", "[", "1", "]", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "in_channels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "\n", "stride", ",", "\n", "downsample", "=", "downsample", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ")", ")", "\n", "self", ".", "in_channels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "in_channels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRModule._make_branches": [[104, 112], ["range", "torch.ModuleList", "branches.append", "hrnet.HRModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRModule._make_fuse_layers": [[113, 174], ["range", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "mmdet.ops.build_conv_layer", "torch.Upsample", "torch.Sequential", "mmdet.ops.build_norm_layer", "conv_downsamples.append", "conv_downsamples.append", "torch.Sequential", "torch.Sequential", "mmdet.ops.build_conv_layer", "mmdet.ops.build_conv_layer", "torch.ReLU", "mmdet.ops.build_norm_layer", "mmdet.ops.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "in_channels", "=", "self", ".", "in_channels", "\n", "fuse_layers", "=", "[", "]", "\n", "num_out_branches", "=", "num_branches", "if", "self", ".", "multiscale_output", "else", "1", "\n", "for", "i", "in", "range", "(", "num_out_branches", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "in_channels", "[", "j", "]", ",", "\n", "in_channels", "[", "i", "]", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "in_channels", "[", "i", "]", ")", "[", "1", "]", ",", "\n", "nn", ".", "Upsample", "(", "\n", "scale_factor", "=", "2", "**", "(", "j", "-", "i", ")", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv_downsamples", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "conv_downsamples", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "in_channels", "[", "j", "]", ",", "\n", "in_channels", "[", "i", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "\n", "in_channels", "[", "i", "]", ")", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                            ", "conv_downsamples", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "in_channels", "[", "j", "]", ",", "\n", "in_channels", "[", "j", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "\n", "in_channels", "[", "j", "]", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ")", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv_downsamples", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRModule.forward": [[175, 192], ["range", "range", "len", "range", "x_fuse.append", "hrnet.HRModule.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "y", "=", "0", "\n", "for", "j", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "+=", "x", "[", "j", "]", "\n", "", "else", ":", "\n", "                    ", "y", "+=", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRNet.__init__": [[256, 343], ["dict", "torch.Module.__init__", "mmdet.ops.build_norm_layer", "mmdet.ops.build_norm_layer", "mmdet.ops.build_conv_layer", "hrnet.HRNet.add_module", "mmdet.ops.build_conv_layer", "hrnet.HRNet.add_module", "torch.ReLU", "hrnet.HRNet._make_layer", "hrnet.HRNet._make_transition_layer", "hrnet.HRNet._make_stage", "hrnet.HRNet._make_transition_layer", "hrnet.HRNet._make_stage", "hrnet.HRNet._make_transition_layer", "hrnet.HRNet._make_stage"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRNet._make_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRNet._make_transition_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRNet._make_stage", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRNet._make_transition_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRNet._make_stage", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRNet._make_transition_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRNet._make_stage"], ["def", "__init__", "(", "self", ",", "\n", "extra", ",", "\n", "in_channels", "=", "3", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "norm_eval", "=", "True", ",", "\n", "with_cp", "=", "False", ",", "\n", "zero_init_residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "HRNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "extra", "=", "extra", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "zero_init_residual", "=", "zero_init_residual", "\n", "\n", "# stem net", "\n", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "64", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "64", ",", "postfix", "=", "2", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "64", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "64", ",", "\n", "64", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# stage 1", "\n", "self", ".", "stage1_cfg", "=", "self", ".", "extra", "[", "'stage1'", "]", "\n", "num_channels", "=", "self", ".", "stage1_cfg", "[", "'num_channels'", "]", "[", "0", "]", "\n", "block_type", "=", "self", ".", "stage1_cfg", "[", "'block'", "]", "\n", "num_blocks", "=", "self", ".", "stage1_cfg", "[", "'num_blocks'", "]", "[", "0", "]", "\n", "\n", "block", "=", "self", ".", "blocks_dict", "[", "block_type", "]", "\n", "stage1_out_channels", "=", "num_channels", "*", "block", ".", "expansion", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_channels", ",", "num_blocks", ")", "\n", "\n", "# stage 2", "\n", "self", ".", "stage2_cfg", "=", "self", ".", "extra", "[", "'stage2'", "]", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'num_channels'", "]", "\n", "block_type", "=", "self", ".", "stage2_cfg", "[", "'block'", "]", "\n", "\n", "block", "=", "self", ".", "blocks_dict", "[", "block_type", "]", "\n", "num_channels", "=", "[", "channel", "*", "block", ".", "expansion", "for", "channel", "in", "num_channels", "]", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "[", "stage1_out_channels", "]", ",", "\n", "num_channels", ")", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage2_cfg", ",", "num_channels", ")", "\n", "\n", "# stage 3", "\n", "self", ".", "stage3_cfg", "=", "self", ".", "extra", "[", "'stage3'", "]", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'num_channels'", "]", "\n", "block_type", "=", "self", ".", "stage3_cfg", "[", "'block'", "]", "\n", "\n", "block", "=", "self", ".", "blocks_dict", "[", "block_type", "]", "\n", "num_channels", "=", "[", "channel", "*", "block", ".", "expansion", "for", "channel", "in", "num_channels", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "pre_stage_channels", ",", "\n", "num_channels", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage3_cfg", ",", "num_channels", ")", "\n", "\n", "# stage 4", "\n", "self", ".", "stage4_cfg", "=", "self", ".", "extra", "[", "'stage4'", "]", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'num_channels'", "]", "\n", "block_type", "=", "self", ".", "stage4_cfg", "[", "'block'", "]", "\n", "\n", "block", "=", "self", ".", "blocks_dict", "[", "block_type", "]", "\n", "num_channels", "=", "[", "channel", "*", "block", ".", "expansion", "for", "channel", "in", "num_channels", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "pre_stage_channels", ",", "\n", "num_channels", ")", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "\n", "self", ".", "stage4_cfg", ",", "num_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRNet.norm1": [[344, 347], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRNet.norm2": [[348, 351], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm2", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRNet._make_transition_layer": [[352, 397], ["len", "len", "range", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv_downsamples.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mmdet.ops.build_conv_layer", "torch.ReLU", "mmdet.ops.build_conv_layer", "torch.ReLU", "mmdet.ops.build_norm_layer", "mmdet.ops.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer"], ["", "def", "_make_transition_layer", "(", "self", ",", "num_channels_pre_layer", ",", "\n", "num_channels_cur_layer", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv_downsamples", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "in_channels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "out_channels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "in_channels", "\n", "conv_downsamples", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "out_channels", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv_downsamples", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRNet._make_layer": [[398, 432], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "mmdet.ops.build_conv_layer", "block", "mmdet.ops.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "planes", "*", "block", ".", "expansion", ")", "[", "1", "]", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", ",", "\n", "downsample", "=", "downsample", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRNet._make_stage": [[433, 461], ["range", "hr_modules.append", "torch.Sequential", "hrnet.HRModule"], "methods", ["None"], ["", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "in_channels", ",", "multiscale_output", "=", "True", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'num_modules'", "]", "\n", "num_branches", "=", "layer_config", "[", "'num_branches'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'num_blocks'", "]", "\n", "num_channels", "=", "layer_config", "[", "'num_channels'", "]", "\n", "block", "=", "self", ".", "blocks_dict", "[", "layer_config", "[", "'block'", "]", "]", "\n", "\n", "hr_modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used for the last module", "\n", "            ", "if", "not", "multiscale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multiscale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multiscale_output", "=", "True", "\n", "\n", "", "hr_modules", ".", "append", "(", "\n", "HRModule", "(", "\n", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "in_channels", ",", "\n", "num_channels", ",", "\n", "reset_multiscale_output", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "hr_modules", ")", ",", "in_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRNet.init_weights": [[462, 481], ["isinstance", "mmdet.utils.get_root_logger", "mmcv.runner.load_checkpoint", "hrnet.HRNet.modules", "TypeError", "isinstance", "hrnet.HRNet.modules", "mmcv.cnn.kaiming_init", "isinstance", "isinstance", "mmcv.cnn.constant_init", "mmcv.cnn.constant_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.get_root_logger"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "_BatchNorm", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "\n", "", "", "if", "self", ".", "zero_init_residual", ":", "\n", "                ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                        ", "constant_init", "(", "m", ".", "norm3", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                        ", "constant_init", "(", "m", ".", "norm2", ",", "0", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRNet.forward": [[482, 517], ["hrnet.HRNet.conv1", "hrnet.HRNet.norm1", "hrnet.HRNet.relu", "hrnet.HRNet.conv2", "hrnet.HRNet.norm2", "hrnet.HRNet.relu", "hrnet.HRNet.layer1", "range", "hrnet.HRNet.stage2", "range", "hrnet.HRNet.stage3", "range", "hrnet.HRNet.stage4", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.Bottleneck.norm2"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'num_branches'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'num_branches'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'num_branches'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "return", "y_list", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.hrnet.HRNet.train": [[518, 525], ["super().train", "hrnet.HRNet.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "HRNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "if", "mode", "and", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# trick: eval have effect on BatchNorm only", "\n", "                ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.BasicBlock.__init__": [[17, 57], ["dict", "torch.Module.__init__", "mmdet.ops.build_norm_layer", "mmdet.ops.build_norm_layer", "mmdet.ops.build_conv_layer", "resnet.BasicBlock.add_module", "mmdet.ops.build_conv_layer", "resnet.BasicBlock.add_module", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "dcn", "=", "None", ",", "\n", "gcb", "=", "None", ",", "\n", "gen_attention", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "dcn", "is", "None", ",", "'Not implemented yet.'", "\n", "assert", "gen_attention", "is", "None", ",", "'Not implemented yet.'", "\n", "assert", "gcb", "is", "None", ",", "'Not implemented yet.'", "\n", "\n", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "2", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "planes", ",", "planes", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "assert", "not", "with_cp", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.BasicBlock.norm1": [[58, 61], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.BasicBlock.norm2": [[62, 65], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm2", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.BasicBlock.forward": [[66, 83], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.norm1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.norm2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.Bottleneck.norm2"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.Bottleneck.__init__": [[88, 218], ["dict", "torch.Module.__init__", "mmdet.ops.build_norm_layer", "mmdet.ops.build_norm_layer", "mmdet.ops.build_norm_layer", "mmdet.ops.build_conv_layer", "resnet.Bottleneck.add_module", "resnet.Bottleneck.add_module", "mmdet.ops.build_conv_layer", "resnet.Bottleneck.add_module", "torch.ReLU", "torch.ReLU", "torch.ReLU", "isinstance", "isinstance", "isinstance", "isinstance", "dcn.pop", "mmdet.ops.build_conv_layer", "mmdet.ops.ContextBlock", "mmdet.ops.GeneralizedAttention", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "resnet.Bottleneck.rfp_conv.weight.data.fill_", "resnet.Bottleneck.rfp_conv.bias.data.fill_", "mmdet.ops.build_conv_layer", "mmdet.ops.build_conv_layer"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "dcn", "=", "None", ",", "\n", "gcb", "=", "None", ",", "\n", "sac", "=", "None", ",", "\n", "rfp", "=", "None", ",", "\n", "gen_attention", "=", "None", ")", ":", "\n", "        ", "\"\"\"Bottleneck block for ResNet.\n        If style is \"pytorch\", the stride-two layer is the 3x3 conv layer,\n        if it is \"caffe\", the stride-two layer is the first 1x1 conv layer.\n        \"\"\"", "\n", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "style", "in", "[", "'pytorch'", ",", "'caffe'", "]", "\n", "assert", "dcn", "is", "None", "or", "isinstance", "(", "dcn", ",", "dict", ")", "\n", "assert", "gcb", "is", "None", "or", "isinstance", "(", "gcb", ",", "dict", ")", "\n", "assert", "sac", "is", "None", "or", "isinstance", "(", "sac", ",", "dict", ")", "\n", "assert", "gen_attention", "is", "None", "or", "isinstance", "(", "gen_attention", ",", "dict", ")", "\n", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "style", "=", "style", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "dcn", "=", "dcn", "\n", "self", ".", "with_dcn", "=", "dcn", "is", "not", "None", "\n", "self", ".", "gcb", "=", "gcb", "\n", "self", ".", "with_gcb", "=", "gcb", "is", "not", "None", "\n", "self", ".", "sac", "=", "sac", "\n", "self", ".", "with_sac", "=", "sac", "is", "not", "None", "\n", "self", ".", "gen_attention", "=", "gen_attention", "\n", "self", ".", "with_gen_attention", "=", "gen_attention", "is", "not", "None", "\n", "\n", "if", "self", ".", "style", "==", "'pytorch'", ":", "\n", "            ", "self", ".", "conv1_stride", "=", "1", "\n", "self", ".", "conv2_stride", "=", "stride", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1_stride", "=", "stride", "\n", "self", ".", "conv2_stride", "=", "1", "\n", "\n", "", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "2", ")", "\n", "self", ".", "norm3_name", ",", "norm3", "=", "build_norm_layer", "(", "\n", "norm_cfg", ",", "planes", "*", "self", ".", "expansion", ",", "postfix", "=", "3", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "self", ".", "conv1_stride", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "fallback_on_stride", "=", "False", "\n", "if", "self", ".", "with_dcn", ":", "\n", "            ", "fallback_on_stride", "=", "dcn", ".", "pop", "(", "'fallback_on_stride'", ",", "False", ")", "\n", "", "if", "self", ".", "with_sac", ":", "\n", "            ", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "sac", ",", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "", "elif", "not", "self", ".", "with_dcn", "or", "fallback_on_stride", ":", "\n", "            ", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "conv_cfg", "is", "None", ",", "'conv_cfg cannot be None for DCN'", "\n", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "dcn", ",", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "self", ".", "conv3", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "planes", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm3_name", ",", "norm3", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "if", "self", ".", "with_gcb", ":", "\n", "            ", "gcb_inplanes", "=", "planes", "*", "self", ".", "expansion", "\n", "self", ".", "context_block", "=", "ContextBlock", "(", "inplanes", "=", "gcb_inplanes", ",", "**", "gcb", ")", "\n", "\n", "# gen_attention", "\n", "", "if", "self", ".", "with_gen_attention", ":", "\n", "            ", "self", ".", "gen_attention_block", "=", "GeneralizedAttention", "(", "\n", "planes", ",", "**", "gen_attention", ")", "\n", "\n", "# recursive feature pyramid", "\n", "", "self", ".", "rfp", "=", "rfp", "\n", "if", "self", ".", "rfp", ":", "\n", "            ", "self", ".", "rfp_conv", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "self", ".", "rfp", ",", "\n", "planes", "*", "self", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "rfp_conv", ".", "weight", ".", "data", ".", "fill_", "(", "0", ")", "\n", "self", ".", "rfp_conv", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.Bottleneck.norm1": [[219, 222], ["getattr"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.Bottleneck.norm2": [[223, 226], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm2", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.Bottleneck.norm3": [[227, 230], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm3", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm3_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.Bottleneck.forward": [[231, 268], ["resnet.Bottleneck.relu", "resnet.Bottleneck.conv1", "resnet.Bottleneck.norm1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.norm2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.norm3", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "resnet.Bottleneck.forward._inner_forward"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.Bottleneck.norm2", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.Bottleneck.norm3"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "with_gen_attention", ":", "\n", "                ", "out", "=", "self", ".", "gen_attention_block", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "norm3", "(", "out", ")", "\n", "\n", "if", "self", ".", "with_gcb", ":", "\n", "                ", "out", "=", "self", ".", "context_block", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "\n", "return", "out", "\n", "\n", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.Bottleneck.rfp_forward": [[269, 310], ["resnet.Bottleneck.relu", "resnet.Bottleneck.conv1", "resnet.Bottleneck.norm1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.norm2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.norm3", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "resnet.Bottleneck.forward._inner_forward"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.Bottleneck.norm2", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.Bottleneck.norm3"], ["", "def", "rfp_forward", "(", "self", ",", "x", ",", "rfp_feat", ")", ":", "\n", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "with_gen_attention", ":", "\n", "                ", "out", "=", "self", ".", "gen_attention_block", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "norm3", "(", "out", ")", "\n", "\n", "if", "self", ".", "with_gcb", ":", "\n", "                ", "out", "=", "self", ".", "context_block", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "\n", "return", "out", "\n", "\n", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "rfp", ":", "\n", "            ", "rfp_feat", "=", "self", ".", "rfp_conv", "(", "rfp_feat", ")", "\n", "out", "=", "out", "+", "rfp_feat", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.__init__": [[428, 524], ["dict", "torch.Module.__init__", "resnet.ResNet._make_stem_layer", "enumerate", "resnet.ResNet._freeze_stages", "KeyError", "len", "len", "max", "resnet.make_res_layer", "resnet.ResNet.add_module", "resnet.ResNet.res_layers.append", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet._make_stem_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet._freeze_stages", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnext.make_res_layer"], ["def", "__init__", "(", "self", ",", "\n", "depth", ",", "\n", "in_channels", "=", "3", ",", "\n", "num_stages", "=", "4", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ")", ",", "\n", "norm_eval", "=", "True", ",", "\n", "dcn", "=", "None", ",", "\n", "stage_with_dcn", "=", "(", "False", ",", "False", ",", "False", ",", "False", ")", ",", "\n", "gcb", "=", "None", ",", "\n", "stage_with_gcb", "=", "(", "False", ",", "False", ",", "False", ",", "False", ")", ",", "\n", "sac", "=", "None", ",", "\n", "stage_with_sac", "=", "(", "False", ",", "False", ",", "False", ",", "False", ")", ",", "\n", "rfp", "=", "None", ",", "\n", "stage_with_rfp", "=", "(", "False", ",", "True", ",", "True", ",", "True", ")", ",", "\n", "gen_attention", "=", "None", ",", "\n", "stage_with_gen_attention", "=", "(", "(", ")", ",", "(", ")", ",", "(", ")", ",", "(", ")", ")", ",", "\n", "with_cp", "=", "False", ",", "\n", "zero_init_residual", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "depth", "not", "in", "self", ".", "arch_settings", ":", "\n", "            ", "raise", "KeyError", "(", "'invalid depth {} for resnet'", ".", "format", "(", "depth", ")", ")", "\n", "", "self", ".", "depth", "=", "depth", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "assert", "num_stages", ">=", "1", "and", "num_stages", "<=", "4", "\n", "self", ".", "strides", "=", "strides", "\n", "self", ".", "dilations", "=", "dilations", "\n", "assert", "len", "(", "strides", ")", "==", "len", "(", "dilations", ")", "==", "num_stages", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "assert", "max", "(", "out_indices", ")", "<", "num_stages", "\n", "self", ".", "style", "=", "style", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "dcn", "=", "dcn", "\n", "self", ".", "stage_with_dcn", "=", "stage_with_dcn", "\n", "if", "dcn", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "stage_with_dcn", ")", "==", "num_stages", "\n", "", "self", ".", "gen_attention", "=", "gen_attention", "\n", "self", ".", "gcb", "=", "gcb", "\n", "self", ".", "stage_with_gcb", "=", "stage_with_gcb", "\n", "if", "gcb", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "stage_with_gcb", ")", "==", "num_stages", "\n", "", "self", ".", "sac", "=", "sac", "\n", "self", ".", "stage_with_sac", "=", "stage_with_sac", "\n", "self", ".", "rfp", "=", "rfp", "\n", "self", ".", "stage_with_rfp", "=", "stage_with_rfp", "\n", "self", ".", "zero_init_residual", "=", "zero_init_residual", "\n", "self", ".", "block", ",", "stage_blocks", "=", "self", ".", "arch_settings", "[", "depth", "]", "\n", "self", ".", "stage_blocks", "=", "stage_blocks", "[", ":", "num_stages", "]", "\n", "self", ".", "inplanes", "=", "64", "\n", "\n", "self", ".", "_make_stem_layer", "(", "in_channels", ")", "\n", "\n", "self", ".", "res_layers", "=", "[", "]", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "self", ".", "stage_blocks", ")", ":", "\n", "            ", "stride", "=", "strides", "[", "i", "]", "\n", "dilation", "=", "dilations", "[", "i", "]", "\n", "dcn", "=", "self", ".", "dcn", "if", "self", ".", "stage_with_dcn", "[", "i", "]", "else", "None", "\n", "gcb", "=", "self", ".", "gcb", "if", "self", ".", "stage_with_gcb", "[", "i", "]", "else", "None", "\n", "sac", "=", "self", ".", "sac", "if", "self", ".", "stage_with_sac", "[", "i", "]", "else", "None", "\n", "rfp", "=", "self", ".", "rfp", "if", "self", ".", "stage_with_rfp", "[", "i", "]", "else", "None", "\n", "planes", "=", "64", "*", "2", "**", "i", "\n", "res_layer", "=", "make_res_layer", "(", "\n", "self", ".", "block", ",", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "num_blocks", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "style", "=", "self", ".", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "dcn", "=", "dcn", ",", "\n", "gcb", "=", "gcb", ",", "\n", "sac", "=", "sac", ",", "\n", "rfp", "=", "rfp", ",", "\n", "gen_attention", "=", "gen_attention", ",", "\n", "gen_attention_blocks", "=", "stage_with_gen_attention", "[", "i", "]", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "self", ".", "block", ".", "expansion", "\n", "layer_name", "=", "'layer{}'", ".", "format", "(", "i", "+", "1", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "res_layer", ")", "\n", "self", ".", "res_layers", ".", "append", "(", "layer_name", ")", "\n", "\n", "", "self", ".", "_freeze_stages", "(", ")", "\n", "\n", "self", ".", "feat_dim", "=", "self", ".", "block", ".", "expansion", "*", "64", "*", "2", "**", "(", "\n", "len", "(", "self", ".", "stage_blocks", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.norm1": [[525, 528], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet._make_stem_layer": [[529, 542], ["mmdet.ops.build_conv_layer", "mmdet.ops.build_norm_layer", "resnet.ResNet.add_module", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer"], ["", "def", "_make_stem_layer", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "64", ",", "postfix", "=", "1", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet._freeze_stages": [[543, 555], ["range", "resnet.ResNet.norm1.eval", "getattr", "getattr.eval", "getattr.parameters", "getattr.parameters"], "methods", ["None"], ["", "def", "_freeze_stages", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "self", ".", "norm1", ".", "eval", "(", ")", "\n", "for", "m", "in", "[", "self", ".", "conv1", ",", "self", ".", "norm1", "]", ":", "\n", "                ", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "            ", "m", "=", "getattr", "(", "self", ",", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "m", ".", "eval", "(", ")", "\n", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.init_weights": [[556, 581], ["isinstance", "mmdet.utils.get_root_logger", "mmcv.runner.load_checkpoint", "resnet.ResNet.modules", "TypeError", "isinstance", "resnet.ResNet.modules", "resnet.ResNet.modules", "mmcv.cnn.kaiming_init", "isinstance", "isinstance", "mmcv.cnn.constant_init", "isinstance", "hasattr", "mmcv.cnn.constant_init", "mmcv.cnn.constant_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.get_root_logger"], ["", "", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "_BatchNorm", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "\n", "", "", "if", "self", ".", "dcn", "is", "not", "None", ":", "\n", "                ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", "and", "hasattr", "(", "\n", "m", ".", "conv2", ",", "'conv_offset'", ")", ":", "\n", "                        ", "constant_init", "(", "m", ".", "conv2", ".", "conv_offset", ",", "0", ")", "\n", "\n", "", "", "", "if", "self", ".", "zero_init_residual", ":", "\n", "                ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                        ", "constant_init", "(", "m", ".", "norm3", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                        ", "constant_init", "(", "m", ".", "norm2", ",", "0", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.forward": [[582, 594], ["resnet.ResNet.conv1", "resnet.ResNet.norm1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "enumerate", "tuple", "getattr", "getattr.", "outs.append"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.norm1"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "layer_name", "in", "enumerate", "(", "self", ".", "res_layers", ")", ":", "\n", "            ", "res_layer", "=", "getattr", "(", "self", ",", "layer_name", ")", "\n", "x", "=", "res_layer", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "", "", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.rfp_forward": [[595, 611], ["resnet.ResNet.conv1", "resnet.ResNet.norm1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "enumerate", "tuple", "getattr", "layer.rfp_forward", "outs.append"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.rfp_forward"], ["", "def", "rfp_forward", "(", "self", ",", "x", ",", "rfp_feats", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "layer_name", "in", "enumerate", "(", "self", ".", "res_layers", ")", ":", "\n", "            ", "res_layer", "=", "getattr", "(", "self", ",", "layer_name", ")", "\n", "rfp_feat", "=", "None", "\n", "if", "self", ".", "stage_with_rfp", "[", "i", "]", ":", "\n", "                ", "rfp_feat", "=", "rfp_feats", "[", "i", "]", "\n", "", "for", "layer", "in", "res_layer", ":", "\n", "                ", "x", "=", "layer", ".", "rfp_forward", "(", "x", ",", "rfp_feat", ")", "\n", "", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "", "", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.train": [[612, 620], ["super().train", "resnet.ResNet._freeze_stages", "resnet.ResNet.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet.train", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet._freeze_stages"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "_freeze_stages", "(", ")", "\n", "if", "mode", "and", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# trick: eval have effect on BatchNorm only", "\n", "                ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.make_res_layer": [[312, 378], ["dict", "layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "mmdet.ops.build_conv_layer", "block", "mmdet.ops.build_norm_layer"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer"], ["", "", "def", "make_res_layer", "(", "block", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "dcn", "=", "None", ",", "\n", "gcb", "=", "None", ",", "\n", "sac", "=", "None", ",", "\n", "rfp", "=", "None", ",", "\n", "gen_attention", "=", "None", ",", "\n", "gen_attention_blocks", "=", "[", "]", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "        ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "norm_cfg", ",", "planes", "*", "block", ".", "expansion", ")", "[", "1", "]", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", "=", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "downsample", "=", "downsample", ",", "\n", "style", "=", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "dcn", "=", "dcn", ",", "\n", "gcb", "=", "gcb", ",", "\n", "sac", "=", "sac", ",", "\n", "rfp", "=", "rfp", ",", "\n", "gen_attention", "=", "gen_attention", "if", "\n", "(", "0", "in", "gen_attention_blocks", ")", "else", "None", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "        ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", "=", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "dilation", ",", "\n", "style", "=", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "dcn", "=", "dcn", ",", "\n", "gcb", "=", "gcb", ",", "\n", "sac", "=", "sac", ",", "\n", "gen_attention", "=", "gen_attention", "if", "\n", "(", "i", "in", "gen_attention_blocks", ")", "else", "None", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnext.Bottleneck.__init__": [[14, 88], ["resnet.Bottleneck.__init__", "mmdet.ops.build_norm_layer", "mmdet.ops.build_norm_layer", "mmdet.ops.build_norm_layer", "mmdet.ops.build_conv_layer", "resnext.Bottleneck.add_module", "resnext.Bottleneck.add_module", "mmdet.ops.build_conv_layer", "resnext.Bottleneck.add_module", "resnext.Bottleneck.dcn.pop", "mmdet.ops.build_conv_layer", "math.floor", "mmdet.ops.build_conv_layer", "mmdet.ops.build_conv_layer"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "groups", "=", "1", ",", "base_width", "=", "4", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Bottleneck block for ResNeXt.\n        If style is \"pytorch\", the stride-two layer is the 3x3 conv layer,\n        if it is \"caffe\", the stride-two layer is the first 1x1 conv layer.\n        \"\"\"", "\n", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", "inplanes", ",", "planes", ",", "**", "kwargs", ")", "\n", "\n", "if", "groups", "==", "1", ":", "\n", "            ", "width", "=", "self", ".", "planes", "\n", "", "else", ":", "\n", "            ", "width", "=", "math", ".", "floor", "(", "self", ".", "planes", "*", "(", "base_width", "/", "64", ")", ")", "*", "groups", "\n", "\n", "", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "\n", "self", ".", "norm_cfg", ",", "width", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "\n", "self", ".", "norm_cfg", ",", "width", ",", "postfix", "=", "2", ")", "\n", "self", ".", "norm3_name", ",", "norm3", "=", "build_norm_layer", "(", "\n", "self", ".", "norm_cfg", ",", "self", ".", "planes", "*", "self", ".", "expansion", ",", "postfix", "=", "3", ")", "\n", "\n", "self", ".", "conv1", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "self", ".", "inplanes", ",", "\n", "width", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "self", ".", "conv1_stride", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "fallback_on_stride", "=", "False", "\n", "self", ".", "with_modulated_dcn", "=", "False", "\n", "if", "self", ".", "with_dcn", ":", "\n", "            ", "fallback_on_stride", "=", "self", ".", "dcn", ".", "pop", "(", "'fallback_on_stride'", ",", "False", ")", "\n", "", "if", "self", ".", "with_sac", ":", "\n", "            ", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "self", ".", "sac", ",", "\n", "width", ",", "\n", "width", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "self", ".", "dilation", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ")", "\n", "", "elif", "not", "self", ".", "with_dcn", "or", "fallback_on_stride", ":", "\n", "            ", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "width", ",", "\n", "width", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "self", ".", "dilation", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "conv_cfg", "is", "None", ",", "'conv_cfg must be None for DCN'", "\n", "self", ".", "conv2", "=", "build_conv_layer", "(", "\n", "self", ".", "dcn", ",", "\n", "width", ",", "\n", "width", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "self", ".", "dilation", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "self", ".", "conv3", "=", "build_conv_layer", "(", "\n", "self", ".", "conv_cfg", ",", "\n", "width", ",", "\n", "self", ".", "planes", "*", "self", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm3_name", ",", "norm3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnext.ResNeXt.__init__": [[206, 244], ["resnet.ResNet.__init__", "enumerate", "resnext.ResNeXt._freeze_stages", "resnext.make_res_layer", "resnext.ResNeXt.add_module", "resnext.ResNeXt.res_layers.append"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnet.ResNet._freeze_stages", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnext.make_res_layer"], ["def", "__init__", "(", "self", ",", "groups", "=", "1", ",", "base_width", "=", "4", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "base_width", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "res_layers", "=", "[", "]", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "self", ".", "stage_blocks", ")", ":", "\n", "            ", "stride", "=", "self", ".", "strides", "[", "i", "]", "\n", "dilation", "=", "self", ".", "dilations", "[", "i", "]", "\n", "dcn", "=", "self", ".", "dcn", "if", "self", ".", "stage_with_dcn", "[", "i", "]", "else", "None", "\n", "gcb", "=", "self", ".", "gcb", "if", "self", ".", "stage_with_gcb", "[", "i", "]", "else", "None", "\n", "sac", "=", "self", ".", "sac", "if", "self", ".", "stage_with_sac", "[", "i", "]", "else", "None", "\n", "rfp", "=", "self", ".", "rfp", "if", "self", ".", "stage_with_rfp", "[", "i", "]", "else", "None", "\n", "planes", "=", "64", "*", "2", "**", "i", "\n", "res_layer", "=", "make_res_layer", "(", "\n", "self", ".", "block", ",", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "num_blocks", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "\n", "style", "=", "self", ".", "style", ",", "\n", "with_cp", "=", "self", ".", "with_cp", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "dcn", "=", "dcn", ",", "\n", "gcb", "=", "gcb", ",", "\n", "sac", "=", "sac", ",", "\n", "rfp", "=", "rfp", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "self", ".", "block", ".", "expansion", "\n", "layer_name", "=", "'layer{}'", ".", "format", "(", "i", "+", "1", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "res_layer", ")", "\n", "self", ".", "res_layers", ".", "append", "(", "layer_name", ")", "\n", "\n", "", "self", ".", "_freeze_stages", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.backbones.resnext.make_res_layer": [[90, 156], ["dict", "layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "mmdet.ops.build_conv_layer", "block", "mmdet.ops.build_norm_layer"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.conv.build_conv_layer", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.ops.norm.build_norm_layer"], ["", "", "def", "make_res_layer", "(", "block", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "base_width", "=", "4", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "dcn", "=", "None", ",", "\n", "gcb", "=", "None", ",", "\n", "sac", "=", "None", ",", "\n", "rfp", "=", "None", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "        ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "norm_cfg", ",", "planes", "*", "block", ".", "expansion", ")", "[", "1", "]", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", "=", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "downsample", "=", "downsample", ",", "\n", "groups", "=", "groups", ",", "\n", "base_width", "=", "base_width", ",", "\n", "style", "=", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "dcn", "=", "dcn", ",", "\n", "gcb", "=", "gcb", ",", "\n", "sac", "=", "sac", ",", "\n", "rfp", "=", "rfp", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "        ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", "=", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "base_width", "=", "base_width", ",", "\n", "style", "=", "style", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "dcn", "=", "dcn", ",", "\n", "gcb", "=", "gcb", ",", "\n", "sac", "=", "sac", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.convfc_bbox_head.ConvFCBBoxHead.__init__": [[18, 82], ["bbox_head.BBoxHead.__init__", "convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch", "convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch", "convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch"], ["def", "__init__", "(", "self", ",", "\n", "num_shared_convs", "=", "0", ",", "\n", "num_shared_fcs", "=", "0", ",", "\n", "num_cls_convs", "=", "0", ",", "\n", "num_cls_fcs", "=", "0", ",", "\n", "num_reg_convs", "=", "0", ",", "\n", "num_reg_fcs", "=", "0", ",", "\n", "conv_out_channels", "=", "256", ",", "\n", "fc_out_channels", "=", "1024", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ConvFCBBoxHead", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "assert", "(", "num_shared_convs", "+", "num_shared_fcs", "+", "num_cls_convs", "+", "\n", "num_cls_fcs", "+", "num_reg_convs", "+", "num_reg_fcs", ">", "0", ")", "\n", "if", "num_cls_convs", ">", "0", "or", "num_reg_convs", ">", "0", ":", "\n", "            ", "assert", "num_shared_fcs", "==", "0", "\n", "", "if", "not", "self", ".", "with_cls", ":", "\n", "            ", "assert", "num_cls_convs", "==", "0", "and", "num_cls_fcs", "==", "0", "\n", "", "if", "not", "self", ".", "with_reg", ":", "\n", "            ", "assert", "num_reg_convs", "==", "0", "and", "num_reg_fcs", "==", "0", "\n", "", "self", ".", "num_shared_convs", "=", "num_shared_convs", "\n", "self", ".", "num_shared_fcs", "=", "num_shared_fcs", "\n", "self", ".", "num_cls_convs", "=", "num_cls_convs", "\n", "self", ".", "num_cls_fcs", "=", "num_cls_fcs", "\n", "self", ".", "num_reg_convs", "=", "num_reg_convs", "\n", "self", ".", "num_reg_fcs", "=", "num_reg_fcs", "\n", "self", ".", "conv_out_channels", "=", "conv_out_channels", "\n", "self", ".", "fc_out_channels", "=", "fc_out_channels", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "\n", "# add shared convs and fcs", "\n", "self", ".", "shared_convs", ",", "self", ".", "shared_fcs", ",", "last_layer_dim", "=", "self", ".", "_add_conv_fc_branch", "(", "\n", "self", ".", "num_shared_convs", ",", "self", ".", "num_shared_fcs", ",", "self", ".", "in_channels", ",", "\n", "True", ")", "\n", "self", ".", "shared_out_channels", "=", "last_layer_dim", "\n", "\n", "# add cls specific branch", "\n", "self", ".", "cls_convs", ",", "self", ".", "cls_fcs", ",", "self", ".", "cls_last_dim", "=", "self", ".", "_add_conv_fc_branch", "(", "\n", "self", ".", "num_cls_convs", ",", "self", ".", "num_cls_fcs", ",", "self", ".", "shared_out_channels", ")", "\n", "\n", "# add reg specific branch", "\n", "self", ".", "reg_convs", ",", "self", ".", "reg_fcs", ",", "self", ".", "reg_last_dim", "=", "self", ".", "_add_conv_fc_branch", "(", "\n", "self", ".", "num_reg_convs", ",", "self", ".", "num_reg_fcs", ",", "self", ".", "shared_out_channels", ")", "\n", "\n", "if", "self", ".", "num_shared_fcs", "==", "0", "and", "not", "self", ".", "with_avg_pool", ":", "\n", "            ", "if", "self", ".", "num_cls_fcs", "==", "0", ":", "\n", "                ", "self", ".", "cls_last_dim", "*=", "self", ".", "roi_feat_area", "\n", "", "if", "self", ".", "num_reg_fcs", "==", "0", ":", "\n", "                ", "self", ".", "reg_last_dim", "*=", "self", ".", "roi_feat_area", "\n", "\n", "", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# reconstruct fc_cls and fc_reg since input channels are changed", "\n", "if", "self", ".", "with_cls", ":", "\n", "            ", "self", ".", "fc_cls", "=", "nn", ".", "Linear", "(", "self", ".", "cls_last_dim", ",", "self", ".", "num_classes", ")", "\n", "", "if", "self", ".", "with_reg", ":", "\n", "            ", "out_dim_reg", "=", "(", "4", "if", "self", ".", "reg_class_agnostic", "else", "4", "*", "\n", "self", ".", "num_classes", ")", "\n", "self", ".", "fc_reg", "=", "nn", ".", "Linear", "(", "self", ".", "reg_last_dim", ",", "out_dim_reg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch": [[83, 123], ["torch.ModuleList", "torch.ModuleList", "range", "range", "torch.ModuleList.append", "torch.ModuleList.append", "mmdet.ops.ConvModule", "torch.Linear"], "methods", ["None"], ["", "", "def", "_add_conv_fc_branch", "(", "self", ",", "\n", "num_branch_convs", ",", "\n", "num_branch_fcs", ",", "\n", "in_channels", ",", "\n", "is_shared", "=", "False", ")", ":", "\n", "        ", "\"\"\"Add shared or separable branch\n\n        convs -> avg pool (optional) -> fcs\n        \"\"\"", "\n", "last_layer_dim", "=", "in_channels", "\n", "# add branch specific conv layers", "\n", "branch_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "num_branch_convs", ">", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_branch_convs", ")", ":", "\n", "                ", "conv_in_channels", "=", "(", "\n", "last_layer_dim", "if", "i", "==", "0", "else", "self", ".", "conv_out_channels", ")", "\n", "branch_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "conv_in_channels", ",", "\n", "self", ".", "conv_out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "", "last_layer_dim", "=", "self", ".", "conv_out_channels", "\n", "# add branch specific fc layers", "\n", "", "branch_fcs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "num_branch_fcs", ">", "0", ":", "\n", "# for shared branch, only consider self.with_avg_pool", "\n", "# for separated branches, also consider self.num_shared_fcs", "\n", "            ", "if", "(", "is_shared", "\n", "or", "self", ".", "num_shared_fcs", "==", "0", ")", "and", "not", "self", ".", "with_avg_pool", ":", "\n", "                ", "last_layer_dim", "*=", "self", ".", "roi_feat_area", "\n", "", "for", "i", "in", "range", "(", "num_branch_fcs", ")", ":", "\n", "                ", "fc_in_channels", "=", "(", "\n", "last_layer_dim", "if", "i", "==", "0", "else", "self", ".", "fc_out_channels", ")", "\n", "branch_fcs", ".", "append", "(", "\n", "nn", ".", "Linear", "(", "fc_in_channels", ",", "self", ".", "fc_out_channels", ")", ")", "\n", "", "last_layer_dim", "=", "self", ".", "fc_out_channels", "\n", "", "return", "branch_convs", ",", "branch_fcs", ",", "last_layer_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.convfc_bbox_head.ConvFCBBoxHead.init_weights": [[124, 132], ["super().init_weights", "module_list.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "super", "(", "ConvFCBBoxHead", ",", "self", ")", ".", "init_weights", "(", ")", "\n", "# conv layers are already initialized by ConvModule", "\n", "for", "module_list", "in", "[", "self", ".", "shared_fcs", ",", "self", ".", "cls_fcs", ",", "self", ".", "reg_fcs", "]", ":", "\n", "            ", "for", "m", "in", "module_list", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.convfc_bbox_head.ConvFCBBoxHead.forward": [[133, 172], ["convfc_bbox_head.ConvFCBBoxHead.flatten", "conv", "convfc_bbox_head.ConvFCBBoxHead.dim", "convfc_bbox_head.ConvFCBBoxHead.flatten", "convfc_bbox_head.ConvFCBBoxHead.relu", "conv", "convfc_bbox_head.ConvFCBBoxHead.dim", "convfc_bbox_head.ConvFCBBoxHead.flatten", "convfc_bbox_head.ConvFCBBoxHead.relu", "convfc_bbox_head.ConvFCBBoxHead.fc_cls", "convfc_bbox_head.ConvFCBBoxHead.fc_reg", "conv", "convfc_bbox_head.ConvFCBBoxHead.avg_pool", "convfc_bbox_head.ConvFCBBoxHead.relu", "convfc_bbox_head.ConvFCBBoxHead.avg_pool", "fc", "convfc_bbox_head.ConvFCBBoxHead.avg_pool", "fc", "fc"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# shared part", "\n", "        ", "if", "self", ".", "num_shared_convs", ">", "0", ":", "\n", "            ", "for", "conv", "in", "self", ".", "shared_convs", ":", "\n", "                ", "x", "=", "conv", "(", "x", ")", "\n", "\n", "", "", "if", "self", ".", "num_shared_fcs", ">", "0", ":", "\n", "            ", "if", "self", ".", "with_avg_pool", ":", "\n", "                ", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "\n", "", "x", "=", "x", ".", "flatten", "(", "1", ")", "\n", "\n", "for", "fc", "in", "self", ".", "shared_fcs", ":", "\n", "                ", "x", "=", "self", ".", "relu", "(", "fc", "(", "x", ")", ")", "\n", "# separate branches", "\n", "", "", "x_cls", "=", "x", "\n", "x_reg", "=", "x", "\n", "\n", "for", "conv", "in", "self", ".", "cls_convs", ":", "\n", "            ", "x_cls", "=", "conv", "(", "x_cls", ")", "\n", "", "if", "x_cls", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "if", "self", ".", "with_avg_pool", ":", "\n", "                ", "x_cls", "=", "self", ".", "avg_pool", "(", "x_cls", ")", "\n", "", "x_cls", "=", "x_cls", ".", "flatten", "(", "1", ")", "\n", "", "for", "fc", "in", "self", ".", "cls_fcs", ":", "\n", "            ", "x_cls", "=", "self", ".", "relu", "(", "fc", "(", "x_cls", ")", ")", "\n", "\n", "", "for", "conv", "in", "self", ".", "reg_convs", ":", "\n", "            ", "x_reg", "=", "conv", "(", "x_reg", ")", "\n", "", "if", "x_reg", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "if", "self", ".", "with_avg_pool", ":", "\n", "                ", "x_reg", "=", "self", ".", "avg_pool", "(", "x_reg", ")", "\n", "", "x_reg", "=", "x_reg", ".", "flatten", "(", "1", ")", "\n", "", "for", "fc", "in", "self", ".", "reg_fcs", ":", "\n", "            ", "x_reg", "=", "self", ".", "relu", "(", "fc", "(", "x_reg", ")", ")", "\n", "\n", "", "cls_score", "=", "self", ".", "fc_cls", "(", "x_cls", ")", "if", "self", ".", "with_cls", "else", "None", "\n", "bbox_pred", "=", "self", ".", "fc_reg", "(", "x_reg", ")", "if", "self", ".", "with_reg", "else", "None", "\n", "return", "cls_score", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.convfc_bbox_head.SharedFCBBoxHead.__init__": [[177, 189], ["convfc_bbox_head.ConvFCBBoxHead.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_fcs", "=", "2", ",", "fc_out_channels", "=", "1024", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "num_fcs", ">=", "1", "\n", "super", "(", "SharedFCBBoxHead", ",", "self", ")", ".", "__init__", "(", "\n", "num_shared_convs", "=", "0", ",", "\n", "num_shared_fcs", "=", "num_fcs", ",", "\n", "num_cls_convs", "=", "0", ",", "\n", "num_cls_fcs", "=", "0", ",", "\n", "num_reg_convs", "=", "0", ",", "\n", "num_reg_fcs", "=", "0", ",", "\n", "fc_out_channels", "=", "fc_out_channels", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.__init__": [[18, 62], ["dict", "dict", "torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "builder.build_loss", "builder.build_loss", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_loss"], ["def", "__init__", "(", "self", ",", "\n", "with_avg_pool", "=", "False", ",", "\n", "with_cls", "=", "True", ",", "\n", "with_reg", "=", "True", ",", "\n", "roi_feat_size", "=", "7", ",", "\n", "in_channels", "=", "256", ",", "\n", "num_classes", "=", "81", ",", "\n", "target_means", "=", "[", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "target_stds", "=", "[", "0.1", ",", "0.1", ",", "0.2", ",", "0.2", "]", ",", "\n", "reg_class_agnostic", "=", "False", ",", "\n", "loss_cls", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "\n", "use_sigmoid", "=", "False", ",", "\n", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_bbox", "=", "dict", "(", "\n", "type", "=", "'SmoothL1Loss'", ",", "beta", "=", "1.0", ",", "loss_weight", "=", "1.0", ")", ")", ":", "\n", "        ", "super", "(", "BBoxHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "with_cls", "or", "with_reg", "\n", "self", ".", "with_avg_pool", "=", "with_avg_pool", "\n", "self", ".", "with_cls", "=", "with_cls", "\n", "self", ".", "with_reg", "=", "with_reg", "\n", "self", ".", "roi_feat_size", "=", "_pair", "(", "roi_feat_size", ")", "\n", "self", ".", "roi_feat_area", "=", "self", ".", "roi_feat_size", "[", "0", "]", "*", "self", ".", "roi_feat_size", "[", "1", "]", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "target_means", "=", "target_means", "\n", "self", ".", "target_stds", "=", "target_stds", "\n", "self", ".", "reg_class_agnostic", "=", "reg_class_agnostic", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n", "self", ".", "loss_cls", "=", "build_loss", "(", "loss_cls", ")", "\n", "self", ".", "loss_bbox", "=", "build_loss", "(", "loss_bbox", ")", "\n", "\n", "in_channels", "=", "self", ".", "in_channels", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "self", ".", "roi_feat_size", ")", "\n", "", "else", ":", "\n", "            ", "in_channels", "*=", "self", ".", "roi_feat_area", "\n", "", "if", "self", ".", "with_cls", ":", "\n", "            ", "self", ".", "fc_cls", "=", "nn", ".", "Linear", "(", "in_channels", ",", "num_classes", ")", "\n", "", "if", "self", ".", "with_reg", ":", "\n", "            ", "out_dim_reg", "=", "4", "if", "reg_class_agnostic", "else", "4", "*", "num_classes", "\n", "self", ".", "fc_reg", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_dim_reg", ")", "\n", "", "self", ".", "debug_imgs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.init_weights": [[63, 71], ["torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "# conv layers are already initialized by ConvModule", "\n", "        ", "if", "self", ".", "with_cls", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "fc_cls", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc_cls", ".", "bias", ",", "0", ")", "\n", "", "if", "self", ".", "with_reg", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "fc_reg", ".", "weight", ",", "0", ",", "0.001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc_reg", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.forward": [[72, 80], ["mmdet.core.auto_fp16", "bbox_head.BBoxHead.view", "bbox_head.BBoxHead.avg_pool", "bbox_head.BBoxHead.size", "bbox_head.BBoxHead.fc_cls", "bbox_head.BBoxHead.fc_reg"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.auto_fp16"], ["", "", "@", "auto_fp16", "(", ")", "\n", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "cls_score", "=", "self", ".", "fc_cls", "(", "x", ")", "if", "self", ".", "with_cls", "else", "None", "\n", "bbox_pred", "=", "self", ".", "fc_reg", "(", "x", ")", "if", "self", ".", "with_reg", "else", "None", "\n", "return", "cls_score", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_target": [[81, 98], ["mmdet.core.bbox_target"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.bbox_target.bbox_target"], ["", "def", "get_target", "(", "self", ",", "sampling_results", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "rcnn_train_cfg", ")", ":", "\n", "        ", "pos_proposals", "=", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", "\n", "neg_proposals", "=", "[", "res", ".", "neg_bboxes", "for", "res", "in", "sampling_results", "]", "\n", "pos_gt_bboxes", "=", "[", "res", ".", "pos_gt_bboxes", "for", "res", "in", "sampling_results", "]", "\n", "pos_gt_labels", "=", "[", "res", ".", "pos_gt_labels", "for", "res", "in", "sampling_results", "]", "\n", "reg_classes", "=", "1", "if", "self", ".", "reg_class_agnostic", "else", "self", ".", "num_classes", "\n", "cls_reg_targets", "=", "bbox_target", "(", "\n", "pos_proposals", ",", "\n", "neg_proposals", ",", "\n", "pos_gt_bboxes", ",", "\n", "pos_gt_labels", ",", "\n", "rcnn_train_cfg", ",", "\n", "reg_classes", ",", "\n", "target_means", "=", "self", ".", "target_means", ",", "\n", "target_stds", "=", "self", ".", "target_stds", ")", "\n", "return", "cls_reg_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss": [[99, 137], ["mmdet.core.force_fp32", "dict", "max", "pos_inds.any", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float().item", "cls_score.numel", "bbox_head.BBoxHead.loss_cls", "dict.accuracy", "bbox_head.BBoxHead.loss_bbox", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "bbox_pred.view", "bbox_pred.view", "bbox_targets.size", "bbox_pred.size", "pos_inds.type", "bbox_pred.size", "pos_inds.type", "pos_inds.type", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pos_inds.type", "pos_inds.type"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.accuracy.accuracy"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'cls_score'", ",", "'bbox_pred'", ")", ")", "\n", "def", "loss", "(", "self", ",", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "labels", ",", "\n", "label_weights", ",", "\n", "bbox_targets", ",", "\n", "bbox_weights", ",", "\n", "reduction_override", "=", "None", ")", ":", "\n", "        ", "losses", "=", "dict", "(", ")", "\n", "if", "cls_score", "is", "not", "None", ":", "\n", "            ", "avg_factor", "=", "max", "(", "torch", ".", "sum", "(", "label_weights", ">", "0", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "1.", ")", "\n", "if", "cls_score", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "losses", "[", "'loss_cls'", "]", "=", "self", ".", "loss_cls", "(", "\n", "cls_score", ",", "\n", "labels", ",", "\n", "label_weights", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", "reduction_override", "=", "reduction_override", ")", "\n", "losses", "[", "'acc'", "]", "=", "accuracy", "(", "cls_score", ",", "labels", ")", "\n", "", "", "if", "bbox_pred", "is", "not", "None", ":", "\n", "            ", "pos_inds", "=", "labels", ">", "0", "\n", "if", "pos_inds", ".", "any", "(", ")", ":", "\n", "                ", "if", "self", ".", "reg_class_agnostic", ":", "\n", "                    ", "pos_bbox_pred", "=", "bbox_pred", ".", "view", "(", "\n", "bbox_pred", ".", "size", "(", "0", ")", ",", "4", ")", "[", "pos_inds", ".", "type", "(", "torch", ".", "bool", ")", "]", "\n", "", "else", ":", "\n", "                    ", "pos_bbox_pred", "=", "bbox_pred", ".", "view", "(", "\n", "bbox_pred", ".", "size", "(", "0", ")", ",", "-", "1", ",", "\n", "4", ")", "[", "pos_inds", ".", "type", "(", "torch", ".", "bool", ")", ",", "\n", "labels", "[", "pos_inds", ".", "type", "(", "torch", ".", "bool", ")", "]", "]", "\n", "", "losses", "[", "'loss_bbox'", "]", "=", "self", ".", "loss_bbox", "(", "\n", "pos_bbox_pred", ",", "\n", "bbox_targets", "[", "pos_inds", ".", "type", "(", "torch", ".", "bool", ")", "]", ",", "\n", "bbox_weights", "[", "pos_inds", ".", "type", "(", "torch", ".", "bool", ")", "]", ",", "\n", "avg_factor", "=", "bbox_targets", ".", "size", "(", "0", ")", ",", "\n", "reduction_override", "=", "reduction_override", ")", "\n", "", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.get_det_bboxes": [[138, 176], ["mmdet.core.force_fp32", "isinstance", "torch.softmax", "torch.softmax", "torch.softmax", "mmdet.core.delta2bbox", "rois[].clone", "isinstance", "mmdet.core.multiclass_nms", "sum", "float", "bboxes[].clamp_", "bboxes[].clamp_", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "rois[].clone.size", "rois[].clone.view", "rois[].clone.size"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.delta2bbox", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.bbox_nms.multiclass_nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'cls_score'", ",", "'bbox_pred'", ")", ")", "\n", "def", "get_det_bboxes", "(", "self", ",", "\n", "rois", ",", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "rescale", "=", "False", ",", "\n", "cfg", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "cls_score", ",", "list", ")", ":", "\n", "            ", "cls_score", "=", "sum", "(", "cls_score", ")", "/", "float", "(", "len", "(", "cls_score", ")", ")", "\n", "", "scores", "=", "F", ".", "softmax", "(", "cls_score", ",", "dim", "=", "1", ")", "if", "cls_score", "is", "not", "None", "else", "None", "\n", "\n", "if", "bbox_pred", "is", "not", "None", ":", "\n", "            ", "bboxes", "=", "delta2bbox", "(", "rois", "[", ":", ",", "1", ":", "]", ",", "bbox_pred", ",", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "img_shape", ")", "\n", "", "else", ":", "\n", "            ", "bboxes", "=", "rois", "[", ":", ",", "1", ":", "]", ".", "clone", "(", ")", "\n", "if", "img_shape", "is", "not", "None", ":", "\n", "                ", "bboxes", "[", ":", ",", "[", "0", ",", "2", "]", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "img_shape", "[", "1", "]", "-", "1", ")", "\n", "bboxes", "[", ":", ",", "[", "1", ",", "3", "]", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "img_shape", "[", "0", "]", "-", "1", ")", "\n", "\n", "", "", "if", "rescale", ":", "\n", "            ", "if", "isinstance", "(", "scale_factor", ",", "float", ")", ":", "\n", "                ", "bboxes", "/=", "scale_factor", "\n", "", "else", ":", "\n", "                ", "scale_factor", "=", "torch", ".", "from_numpy", "(", "scale_factor", ")", ".", "to", "(", "bboxes", ".", "device", ")", "\n", "bboxes", "=", "(", "bboxes", ".", "view", "(", "bboxes", ".", "size", "(", "0", ")", ",", "-", "1", ",", "4", ")", "/", "\n", "scale_factor", ")", ".", "view", "(", "bboxes", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "", "", "if", "cfg", "is", "None", ":", "\n", "            ", "return", "bboxes", ",", "scores", "\n", "", "else", ":", "\n", "            ", "det_bboxes", ",", "det_labels", "=", "multiclass_nms", "(", "bboxes", ",", "scores", ",", "\n", "cfg", ".", "score_thr", ",", "cfg", ".", "nms", ",", "\n", "cfg", ".", "max_per_img", ")", "\n", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.refine_bboxes": [[177, 254], ["mmdet.core.force_fp32", "rois[].long().unique", "range", "rois[].long().unique.numel", "len", "len", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.numel", "bbox_head.BBoxHead.regress_by_class", "pos_is_gts_.new_ones", "bboxes_list.append", "rois[].long", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "len", "pos_is_gts_.new_ones.type"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.regress_by_class"], ["", "", "@", "force_fp32", "(", "apply_to", "=", "(", "'bbox_preds'", ",", ")", ")", "\n", "def", "refine_bboxes", "(", "self", ",", "rois", ",", "labels", ",", "bbox_preds", ",", "pos_is_gts", ",", "img_metas", ")", ":", "\n", "        ", "\"\"\"Refine bboxes during training.\n\n        Args:\n            rois (Tensor): Shape (n*bs, 5), where n is image number per GPU,\n                and bs is the sampled RoIs per image. The first column is\n                the image id and the next 4 columns are x1, y1, x2, y2.\n            labels (Tensor): Shape (n*bs, ).\n            bbox_preds (Tensor): Shape (n*bs, 4) or (n*bs, 4*#class).\n            pos_is_gts (list[Tensor]): Flags indicating if each positive bbox\n                is a gt bbox.\n            img_metas (list[dict]): Meta info of each image.\n\n        Returns:\n            list[Tensor]: Refined bboxes of each image in a mini-batch.\n\n        Example:\n            >>> # xdoctest: +REQUIRES(module:kwarray)\n            >>> import kwarray\n            >>> import numpy as np\n            >>> from mmdet.core.bbox.demodata import random_boxes\n            >>> self = BBoxHead(reg_class_agnostic=True)\n            >>> n_roi = 2\n            >>> n_img = 4\n            >>> scale = 512\n            >>> rng = np.random.RandomState(0)\n            >>> img_metas = [{'img_shape': (scale, scale)}\n            ...              for _ in range(n_img)]\n            >>> # Create rois in the expected format\n            >>> roi_boxes = random_boxes(n_roi, scale=scale, rng=rng)\n            >>> img_ids = torch.randint(0, n_img, (n_roi,))\n            >>> img_ids = img_ids.float()\n            >>> rois = torch.cat([img_ids[:, None], roi_boxes], dim=1)\n            >>> # Create other args\n            >>> labels = torch.randint(0, 2, (n_roi,)).long()\n            >>> bbox_preds = random_boxes(n_roi, scale=scale, rng=rng)\n            >>> # For each image, pretend random positive boxes are gts\n            >>> is_label_pos = (labels.numpy() > 0).astype(np.int)\n            >>> lbl_per_img = kwarray.group_items(is_label_pos,\n            ...                                   img_ids.numpy())\n            >>> pos_per_img = [sum(lbl_per_img.get(gid, []))\n            ...                for gid in range(n_img)]\n            >>> pos_is_gts = [\n            >>>     torch.randint(0, 2, (npos,)).byte().sort(\n            >>>         descending=True)[0]\n            >>>     for npos in pos_per_img\n            >>> ]\n            >>> bboxes_list = self.refine_bboxes(rois, labels, bbox_preds,\n            >>>                    pos_is_gts, img_metas)\n            >>> print(bboxes_list)\n        \"\"\"", "\n", "img_ids", "=", "rois", "[", ":", ",", "0", "]", ".", "long", "(", ")", ".", "unique", "(", "sorted", "=", "True", ")", "\n", "assert", "img_ids", ".", "numel", "(", ")", "<=", "len", "(", "img_metas", ")", "\n", "\n", "bboxes_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "img_metas", ")", ")", ":", "\n", "            ", "inds", "=", "torch", ".", "nonzero", "(", "rois", "[", ":", ",", "0", "]", "==", "i", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "num_rois", "=", "inds", ".", "numel", "(", ")", "\n", "\n", "bboxes_", "=", "rois", "[", "inds", ",", "1", ":", "]", "\n", "label_", "=", "labels", "[", "inds", "]", "\n", "bbox_pred_", "=", "bbox_preds", "[", "inds", "]", "\n", "img_meta_", "=", "img_metas", "[", "i", "]", "\n", "pos_is_gts_", "=", "pos_is_gts", "[", "i", "]", "\n", "\n", "bboxes", "=", "self", ".", "regress_by_class", "(", "bboxes_", ",", "label_", ",", "bbox_pred_", ",", "\n", "img_meta_", ")", "\n", "\n", "# filter gt bboxes", "\n", "pos_keep", "=", "1", "-", "pos_is_gts_", "\n", "keep_inds", "=", "pos_is_gts_", ".", "new_ones", "(", "num_rois", ")", "\n", "keep_inds", "[", ":", "len", "(", "pos_is_gts_", ")", "]", "=", "pos_keep", "\n", "\n", "bboxes_list", ".", "append", "(", "bboxes", "[", "keep_inds", ".", "type", "(", "torch", ".", "bool", ")", "]", ")", "\n", "\n", "", "return", "bboxes_list", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.regress_by_class": [[255, 285], ["mmdet.core.force_fp32", "repr", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.size", "torch.gather.size", "torch.gather.size", "rois.size", "mmdet.core.delta2bbox", "mmdet.core.delta2bbox", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rois.size", "rois.size"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.delta2bbox", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.delta2bbox"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'bbox_pred'", ",", ")", ")", "\n", "def", "regress_by_class", "(", "self", ",", "rois", ",", "label", ",", "bbox_pred", ",", "img_meta", ")", ":", "\n", "        ", "\"\"\"Regress the bbox for the predicted class. Used in Cascade R-CNN.\n\n        Args:\n            rois (Tensor): shape (n, 4) or (n, 5)\n            label (Tensor): shape (n, )\n            bbox_pred (Tensor): shape (n, 4*(#class+1)) or (n, 4)\n            img_meta (dict): Image meta info.\n\n        Returns:\n            Tensor: Regressed bboxes, the same shape as input rois.\n        \"\"\"", "\n", "assert", "rois", ".", "size", "(", "1", ")", "==", "4", "or", "rois", ".", "size", "(", "1", ")", "==", "5", ",", "repr", "(", "rois", ".", "shape", ")", "\n", "\n", "if", "not", "self", ".", "reg_class_agnostic", ":", "\n", "            ", "label", "=", "label", "*", "4", "\n", "inds", "=", "torch", ".", "stack", "(", "(", "label", ",", "label", "+", "1", ",", "label", "+", "2", ",", "label", "+", "3", ")", ",", "1", ")", "\n", "bbox_pred", "=", "torch", ".", "gather", "(", "bbox_pred", ",", "1", ",", "inds", ")", "\n", "", "assert", "bbox_pred", ".", "size", "(", "1", ")", "==", "4", "\n", "\n", "if", "rois", ".", "size", "(", "1", ")", "==", "4", ":", "\n", "            ", "new_rois", "=", "delta2bbox", "(", "rois", ",", "bbox_pred", ",", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "img_meta", "[", "'img_shape'", "]", ")", "\n", "", "else", ":", "\n", "            ", "bboxes", "=", "delta2bbox", "(", "rois", "[", ":", ",", "1", ":", "]", ",", "bbox_pred", ",", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "img_meta", "[", "'img_shape'", "]", ")", "\n", "new_rois", "=", "torch", ".", "cat", "(", "(", "rois", "[", ":", ",", "[", "0", "]", "]", ",", "bboxes", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "new_rois", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.double_bbox_head.BasicResBlock.__init__": [[23, 58], ["dict", "torch.Module.__init__", "mmdet.ops.ConvModule", "mmdet.ops.ConvModule", "mmdet.ops.ConvModule", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ")", ":", "\n", "        ", "super", "(", "BasicResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# main path", "\n", "self", ".", "conv1", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ")", "\n", "self", ".", "conv2", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n", "# identity path", "\n", "self", ".", "conv_identity", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.double_bbox_head.BasicResBlock.forward": [[59, 70], ["double_bbox_head.BasicResBlock.conv1", "double_bbox_head.BasicResBlock.conv2", "double_bbox_head.BasicResBlock.conv_identity", "double_bbox_head.BasicResBlock.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "identity", "=", "self", ".", "conv_identity", "(", "identity", ")", "\n", "out", "=", "x", "+", "identity", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.double_bbox_head.DoubleConvFCBBoxHead.__init__": [[85, 119], ["dict", "kwargs.setdefault", "bbox_head.BBoxHead.__init__", "double_bbox_head.BasicResBlock", "double_bbox_head.DoubleConvFCBBoxHead._add_conv_branch", "double_bbox_head.DoubleConvFCBBoxHead._add_fc_branch", "torch.Linear", "torch.Linear", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.double_bbox_head.DoubleConvFCBBoxHead._add_conv_branch", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.double_bbox_head.DoubleConvFCBBoxHead._add_fc_branch"], ["def", "__init__", "(", "self", ",", "\n", "num_convs", "=", "0", ",", "\n", "num_fcs", "=", "0", ",", "\n", "conv_out_channels", "=", "1024", ",", "\n", "fc_out_channels", "=", "1024", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "setdefault", "(", "'with_avg_pool'", ",", "True", ")", "\n", "super", "(", "DoubleConvFCBBoxHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "self", ".", "with_avg_pool", "\n", "assert", "num_convs", ">", "0", "\n", "assert", "num_fcs", ">", "0", "\n", "self", ".", "num_convs", "=", "num_convs", "\n", "self", ".", "num_fcs", "=", "num_fcs", "\n", "self", ".", "conv_out_channels", "=", "conv_out_channels", "\n", "self", ".", "fc_out_channels", "=", "fc_out_channels", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "\n", "# increase the channel of input features", "\n", "self", ".", "res_block", "=", "BasicResBlock", "(", "self", ".", "in_channels", ",", "\n", "self", ".", "conv_out_channels", ")", "\n", "\n", "# add conv heads", "\n", "self", ".", "conv_branch", "=", "self", ".", "_add_conv_branch", "(", ")", "\n", "# add fc heads", "\n", "self", ".", "fc_branch", "=", "self", ".", "_add_fc_branch", "(", ")", "\n", "\n", "out_dim_reg", "=", "4", "if", "self", ".", "reg_class_agnostic", "else", "4", "*", "self", ".", "num_classes", "\n", "self", ".", "fc_reg", "=", "nn", ".", "Linear", "(", "self", ".", "conv_out_channels", ",", "out_dim_reg", ")", "\n", "\n", "self", ".", "fc_cls", "=", "nn", ".", "Linear", "(", "self", ".", "fc_out_channels", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.double_bbox_head.DoubleConvFCBBoxHead._add_conv_branch": [[120, 131], ["torch.ModuleList", "range", "torch.ModuleList.append", "backbones.resnet.Bottleneck"], "methods", ["None"], ["", "def", "_add_conv_branch", "(", "self", ")", ":", "\n", "        ", "\"\"\"Add the fc branch which consists of a sequential of conv layers\"\"\"", "\n", "branch_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_convs", ")", ":", "\n", "            ", "branch_convs", ".", "append", "(", "\n", "Bottleneck", "(", "\n", "inplanes", "=", "self", ".", "conv_out_channels", ",", "\n", "planes", "=", "self", ".", "conv_out_channels", "//", "4", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", ")", "\n", "", "return", "branch_convs", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.double_bbox_head.DoubleConvFCBBoxHead._add_fc_branch": [[132, 141], ["torch.ModuleList", "range", "torch.ModuleList.append", "torch.Linear"], "methods", ["None"], ["", "def", "_add_fc_branch", "(", "self", ")", ":", "\n", "        ", "\"\"\"Add the fc branch which consists of a sequential of fc layers\"\"\"", "\n", "branch_fcs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_fcs", ")", ":", "\n", "            ", "fc_in_channels", "=", "(", "\n", "self", ".", "in_channels", "*", "\n", "self", ".", "roi_feat_area", "if", "i", "==", "0", "else", "self", ".", "fc_out_channels", ")", "\n", "branch_fcs", ".", "append", "(", "nn", ".", "Linear", "(", "fc_in_channels", ",", "self", ".", "fc_out_channels", ")", ")", "\n", "", "return", "branch_fcs", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.double_bbox_head.DoubleConvFCBBoxHead.init_weights": [[142, 150], ["mmcv.cnn.weight_init.normal_init", "mmcv.cnn.weight_init.normal_init", "double_bbox_head.DoubleConvFCBBoxHead.fc_branch.modules", "isinstance", "mmcv.cnn.weight_init.xavier_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "# conv layers are already initialized by ConvModule", "\n", "        ", "normal_init", "(", "self", ".", "fc_cls", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "fc_reg", ",", "std", "=", "0.001", ")", "\n", "\n", "for", "m", "in", "self", ".", "fc_branch", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "xavier_init", "(", "m", ",", "distribution", "=", "'uniform'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.double_bbox_head.DoubleConvFCBBoxHead.forward": [[151, 172], ["double_bbox_head.DoubleConvFCBBoxHead.res_block", "double_bbox_head.DoubleConvFCBBoxHead.view", "double_bbox_head.DoubleConvFCBBoxHead.fc_reg", "x_cls.view", "double_bbox_head.DoubleConvFCBBoxHead.fc_cls", "conv", "double_bbox_head.DoubleConvFCBBoxHead.avg_pool", "double_bbox_head.DoubleConvFCBBoxHead.size", "x_cls.size", "double_bbox_head.DoubleConvFCBBoxHead.relu", "fc"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x_cls", ",", "x_reg", ")", ":", "\n", "# conv head", "\n", "        ", "x_conv", "=", "self", ".", "res_block", "(", "x_reg", ")", "\n", "\n", "for", "conv", "in", "self", ".", "conv_branch", ":", "\n", "            ", "x_conv", "=", "conv", "(", "x_conv", ")", "\n", "\n", "", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "x_conv", "=", "self", ".", "avg_pool", "(", "x_conv", ")", "\n", "\n", "", "x_conv", "=", "x_conv", ".", "view", "(", "x_conv", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "bbox_pred", "=", "self", ".", "fc_reg", "(", "x_conv", ")", "\n", "\n", "# fc head", "\n", "x_fc", "=", "x_cls", ".", "view", "(", "x_cls", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "for", "fc", "in", "self", ".", "fc_branch", ":", "\n", "            ", "x_fc", "=", "self", ".", "relu", "(", "fc", "(", "x_fc", ")", ")", "\n", "\n", "", "cls_score", "=", "self", ".", "fc_cls", "(", "x_fc", ")", "\n", "\n", "return", "cls_score", ",", "bbox_pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.__init__": [[25, 36], ["torch.Module.__init__", "single_level.SingleRoIExtractor.build_roi_layers"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.build_roi_layers"], ["def", "__init__", "(", "self", ",", "\n", "roi_layer", ",", "\n", "out_channels", ",", "\n", "featmap_strides", ",", "\n", "finest_scale", "=", "56", ")", ":", "\n", "        ", "super", "(", "SingleRoIExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "roi_layers", "=", "self", ".", "build_roi_layers", "(", "roi_layer", ",", "featmap_strides", ")", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "featmap_strides", "=", "featmap_strides", "\n", "self", ".", "finest_scale", "=", "finest_scale", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.num_inputs": [[37, 41], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_inputs", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: Input feature map levels.\"\"\"", "\n", "return", "len", "(", "self", ".", "featmap_strides", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.init_weights": [[42, 44], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.build_roi_layers": [[45, 53], ["layer_cfg.copy", "layer_cfg.copy.pop", "hasattr", "getattr", "torch.ModuleList", "torch.ModuleList", "getattr."], "methods", ["None"], ["", "def", "build_roi_layers", "(", "self", ",", "layer_cfg", ",", "featmap_strides", ")", ":", "\n", "        ", "cfg", "=", "layer_cfg", ".", "copy", "(", ")", "\n", "layer_type", "=", "cfg", ".", "pop", "(", "'type'", ")", "\n", "assert", "hasattr", "(", "ops", ",", "layer_type", ")", "\n", "layer_cls", "=", "getattr", "(", "ops", ",", "layer_type", ")", "\n", "roi_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "layer_cls", "(", "spatial_scale", "=", "1", "/", "s", ",", "**", "cfg", ")", "for", "s", "in", "featmap_strides", "]", ")", "\n", "return", "roi_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.map_roi_levels": [[54, 74], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "target_lvls.clamp().long.clamp().long.clamp().long", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "target_lvls.clamp().long.clamp().long.clamp"], "methods", ["None"], ["", "def", "map_roi_levels", "(", "self", ",", "rois", ",", "num_levels", ")", ":", "\n", "        ", "\"\"\"Map rois to corresponding feature levels by scales.\n\n        - scale < finest_scale * 2: level 0\n        - finest_scale * 2 <= scale < finest_scale * 4: level 1\n        - finest_scale * 4 <= scale < finest_scale * 8: level 2\n        - scale >= finest_scale * 8: level 3\n\n        Args:\n            rois (Tensor): Input RoIs, shape (k, 5).\n            num_levels (int): Total level number.\n\n        Returns:\n            Tensor: Level index (0-based) of each RoI, shape (k, )\n        \"\"\"", "\n", "scale", "=", "torch", ".", "sqrt", "(", "\n", "(", "rois", "[", ":", ",", "3", "]", "-", "rois", "[", ":", ",", "1", "]", "+", "1", ")", "*", "(", "rois", "[", ":", ",", "4", "]", "-", "rois", "[", ":", ",", "2", "]", "+", "1", ")", ")", "\n", "target_lvls", "=", "torch", ".", "floor", "(", "torch", ".", "log2", "(", "scale", "/", "self", ".", "finest_scale", "+", "1e-6", ")", ")", "\n", "target_lvls", "=", "target_lvls", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "num_levels", "-", "1", ")", ".", "long", "(", ")", "\n", "return", "target_lvls", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.roi_rescale": [[75, 88], ["torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "roi_rescale", "(", "self", ",", "rois", ",", "scale_factor", ")", ":", "\n", "        ", "cx", "=", "(", "rois", "[", ":", ",", "1", "]", "+", "rois", "[", ":", ",", "3", "]", ")", "*", "0.5", "\n", "cy", "=", "(", "rois", "[", ":", ",", "2", "]", "+", "rois", "[", ":", ",", "4", "]", ")", "*", "0.5", "\n", "w", "=", "rois", "[", ":", ",", "3", "]", "-", "rois", "[", ":", ",", "1", "]", "+", "1", "\n", "h", "=", "rois", "[", ":", ",", "4", "]", "-", "rois", "[", ":", ",", "2", "]", "+", "1", "\n", "new_w", "=", "w", "*", "scale_factor", "\n", "new_h", "=", "h", "*", "scale_factor", "\n", "x1", "=", "cx", "-", "new_w", "*", "0.5", "+", "0.5", "\n", "x2", "=", "cx", "+", "new_w", "*", "0.5", "-", "0.5", "\n", "y1", "=", "cy", "-", "new_h", "*", "0.5", "+", "0.5", "\n", "y2", "=", "cy", "+", "new_h", "*", "0.5", "-", "0.5", "\n", "new_rois", "=", "torch", ".", "stack", "(", "(", "rois", "[", ":", ",", "0", "]", ",", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "new_rois", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.forward": [[89, 108], ["mmdet.core.force_fp32", "len", "single_level.SingleRoIExtractor.map_roi_levels", "feats[].new_zeros", "range", "len", "single_level.SingleRoIExtractor.size", "single_level.SingleRoIExtractor.roi_rescale", "inds.any"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.force_fp32", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.map_roi_levels", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.roi_extractors.single_level.SingleRoIExtractor.roi_rescale"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'feats'", ",", ")", ",", "out_fp16", "=", "True", ")", "\n", "def", "forward", "(", "self", ",", "feats", ",", "rois", ",", "roi_scale_factor", "=", "None", ")", ":", "\n", "        ", "if", "len", "(", "feats", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "roi_layers", "[", "0", "]", "(", "feats", "[", "0", "]", ",", "rois", ")", "\n", "\n", "", "out_size", "=", "self", ".", "roi_layers", "[", "0", "]", ".", "out_size", "\n", "num_levels", "=", "len", "(", "feats", ")", "\n", "target_lvls", "=", "self", ".", "map_roi_levels", "(", "rois", ",", "num_levels", ")", "\n", "roi_feats", "=", "feats", "[", "0", "]", ".", "new_zeros", "(", "\n", "rois", ".", "size", "(", "0", ")", ",", "self", ".", "out_channels", ",", "*", "out_size", ")", "\n", "if", "roi_scale_factor", "is", "not", "None", ":", "\n", "            ", "rois", "=", "self", ".", "roi_rescale", "(", "rois", ",", "roi_scale_factor", ")", "\n", "", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "inds", "=", "target_lvls", "==", "i", "\n", "if", "inds", ".", "any", "(", ")", ":", "\n", "                ", "rois_", "=", "rois", "[", "inds", ",", ":", "]", "\n", "roi_feats_t", "=", "self", ".", "roi_layers", "[", "i", "]", "(", "feats", "[", "i", "]", ",", "rois_", ")", "\n", "roi_feats", "[", "inds", "]", "=", "roi_feats_t", "\n", "", "", "return", "roi_feats", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.balanced_l1_loss.BalancedL1Loss.__init__": [[36, 48], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "\n", "alpha", "=", "0.5", ",", "\n", "gamma", "=", "1.5", ",", "\n", "beta", "=", "1.0", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "BalancedL1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.balanced_l1_loss.BalancedL1Loss.forward": [[49, 70], ["balanced_l1_loss.balanced_l1_loss"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.balanced_l1_loss.balanced_l1_loss"], ["", "def", "forward", "(", "self", ",", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", "=", "None", ",", "\n", "avg_factor", "=", "None", ",", "\n", "reduction_override", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "assert", "reduction_override", "in", "(", "None", ",", "'none'", ",", "'mean'", ",", "'sum'", ")", "\n", "reduction", "=", "(", "\n", "reduction_override", "if", "reduction_override", "else", "self", ".", "reduction", ")", "\n", "loss_bbox", "=", "self", ".", "loss_weight", "*", "balanced_l1_loss", "(", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", ",", "\n", "alpha", "=", "self", ".", "alpha", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "beta", "=", "self", ".", "beta", ",", "\n", "reduction", "=", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", "**", "kwargs", ")", "\n", "return", "loss_bbox", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.balanced_l1_loss.balanced_l1_loss": [[9, 27], ["torch.abs", "torch.abs", "torch.where", "torch.where", "pred.size", "target.size", "target.numel", "torch.log", "torch.log"], "function", ["None"], ["@", "weighted_loss", "\n", "def", "balanced_l1_loss", "(", "pred", ",", "\n", "target", ",", "\n", "beta", "=", "1.0", ",", "\n", "alpha", "=", "0.5", ",", "\n", "gamma", "=", "1.5", ",", "\n", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "assert", "beta", ">", "0", "\n", "assert", "pred", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", "and", "target", ".", "numel", "(", ")", ">", "0", "\n", "\n", "diff", "=", "torch", ".", "abs", "(", "pred", "-", "target", ")", "\n", "b", "=", "np", ".", "e", "**", "(", "gamma", "/", "alpha", ")", "-", "1", "\n", "loss", "=", "torch", ".", "where", "(", "\n", "diff", "<", "beta", ",", "alpha", "/", "b", "*", "\n", "(", "b", "*", "diff", "+", "1", ")", "*", "torch", ".", "log", "(", "b", "*", "diff", "/", "beta", "+", "1", ")", "-", "alpha", "*", "diff", ",", "\n", "gamma", "*", "diff", "+", "gamma", "/", "b", "-", "alpha", "*", "beta", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.mse_loss.MSELoss.__init__": [[16, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reduction", "=", "'mean'", ",", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.mse_loss.MSELoss.forward": [[21, 29], ["mse_loss.mse_loss"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.mse_loss.mse_loss"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "weight", "=", "None", ",", "avg_factor", "=", "None", ")", ":", "\n", "        ", "loss", "=", "self", ".", "loss_weight", "*", "mse_loss", "(", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", ",", "\n", "reduction", "=", "self", ".", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.mse_loss.mse_loss": [[8, 11], ["torch.mse_loss"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.mse_loss.mse_loss"], ["@", "weighted_loss", "\n", "def", "mse_loss", "(", "pred", ",", "target", ")", ":", "\n", "    ", "return", "F", ".", "mse_loss", "(", "pred", ",", "target", ",", "reduction", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.iou_loss.IoULoss.__init__": [[120, 125], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "eps", "=", "1e-6", ",", "reduction", "=", "'mean'", ",", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "IoULoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.iou_loss.IoULoss.forward": [[126, 147], ["iou_loss.iou_loss", "torch.any", "torch.any", "torch.any", "torch.any"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.iou_loss.iou_loss"], ["", "def", "forward", "(", "self", ",", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", "=", "None", ",", "\n", "avg_factor", "=", "None", ",", "\n", "reduction_override", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "weight", "is", "not", "None", "and", "not", "torch", ".", "any", "(", "weight", ">", "0", ")", ":", "\n", "            ", "return", "(", "pred", "*", "weight", ")", ".", "sum", "(", ")", "# 0", "\n", "", "assert", "reduction_override", "in", "(", "None", ",", "'none'", ",", "'mean'", ",", "'sum'", ")", "\n", "reduction", "=", "(", "\n", "reduction_override", "if", "reduction_override", "else", "self", ".", "reduction", ")", "\n", "loss", "=", "self", ".", "loss_weight", "*", "iou_loss", "(", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", ",", "\n", "eps", "=", "self", ".", "eps", ",", "\n", "reduction", "=", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", "**", "kwargs", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.iou_loss.BoundedIoULoss.__init__": [[152, 158], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "beta", "=", "0.2", ",", "eps", "=", "1e-3", ",", "reduction", "=", "'mean'", ",", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "BoundedIoULoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.iou_loss.BoundedIoULoss.forward": [[159, 181], ["iou_loss.bounded_iou_loss", "torch.any", "torch.any", "torch.any", "torch.any"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.iou_loss.bounded_iou_loss"], ["", "def", "forward", "(", "self", ",", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", "=", "None", ",", "\n", "avg_factor", "=", "None", ",", "\n", "reduction_override", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "weight", "is", "not", "None", "and", "not", "torch", ".", "any", "(", "weight", ">", "0", ")", ":", "\n", "            ", "return", "(", "pred", "*", "weight", ")", ".", "sum", "(", ")", "# 0", "\n", "", "assert", "reduction_override", "in", "(", "None", ",", "'none'", ",", "'mean'", ",", "'sum'", ")", "\n", "reduction", "=", "(", "\n", "reduction_override", "if", "reduction_override", "else", "self", ".", "reduction", ")", "\n", "loss", "=", "self", ".", "loss_weight", "*", "bounded_iou_loss", "(", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", ",", "\n", "beta", "=", "self", ".", "beta", ",", "\n", "eps", "=", "self", ".", "eps", ",", "\n", "reduction", "=", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", "**", "kwargs", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.iou_loss.GIoULoss.__init__": [[186, 191], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "eps", "=", "1e-6", ",", "reduction", "=", "'mean'", ",", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "GIoULoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.iou_loss.GIoULoss.forward": [[192, 213], ["iou_loss.giou_loss", "torch.any", "torch.any", "torch.any", "torch.any"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.iou_loss.giou_loss"], ["", "def", "forward", "(", "self", ",", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", "=", "None", ",", "\n", "avg_factor", "=", "None", ",", "\n", "reduction_override", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "weight", "is", "not", "None", "and", "not", "torch", ".", "any", "(", "weight", ">", "0", ")", ":", "\n", "            ", "return", "(", "pred", "*", "weight", ")", ".", "sum", "(", ")", "# 0", "\n", "", "assert", "reduction_override", "in", "(", "None", ",", "'none'", ",", "'mean'", ",", "'sum'", ")", "\n", "reduction", "=", "(", "\n", "reduction_override", "if", "reduction_override", "else", "self", ".", "reduction", ")", "\n", "loss", "=", "self", ".", "loss_weight", "*", "giou_loss", "(", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", ",", "\n", "eps", "=", "self", ".", "eps", ",", "\n", "reduction", "=", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", "**", "kwargs", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.iou_loss.iou_loss": [[9, 28], ["mmdet.core.bbox_overlaps().clamp", "bbox_overlaps().clamp.log", "mmdet.core.bbox_overlaps"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.geometry.bbox_overlaps"], ["@", "weighted_loss", "\n", "def", "iou_loss", "(", "pred", ",", "target", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"IoU loss.\n\n    Computing the IoU loss between a set of predicted bboxes and target bboxes.\n    The loss is calculated as negative log of IoU.\n\n    Args:\n        pred (Tensor): Predicted bboxes of format (x1, y1, x2, y2),\n            shape (n, 4).\n        target (Tensor): Corresponding gt bboxes, shape (n, 4).\n        eps (float): Eps to avoid log(0).\n\n    Return:\n        Tensor: Loss tensor.\n    \"\"\"", "\n", "ious", "=", "bbox_overlaps", "(", "pred", ",", "target", ",", "is_aligned", "=", "True", ")", ".", "clamp", "(", "min", "=", "eps", ")", "\n", "loss", "=", "-", "ious", ".", "log", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.iou_loss.bounded_iou_loss": [[30, 70], ["torch.stack().view", "torch.stack().view", "torch.where", "torch.where", "torch.no_grad", "torch.no_grad", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "loss_dx.size", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.stack", "torch.stack", "dx.abs", "dy.abs", "dx.abs", "dy.abs"], "function", ["None"], ["", "@", "weighted_loss", "\n", "def", "bounded_iou_loss", "(", "pred", ",", "target", ",", "beta", "=", "0.2", ",", "eps", "=", "1e-3", ")", ":", "\n", "    ", "\"\"\"Improving Object Localization with Fitness NMS and Bounded IoU Loss,\n    https://arxiv.org/abs/1711.00164.\n\n    Args:\n        pred (tensor): Predicted bboxes.\n        target (tensor): Target bboxes.\n        beta (float): beta parameter in smoothl1.\n        eps (float): eps to avoid NaN.\n    \"\"\"", "\n", "pred_ctrx", "=", "(", "pred", "[", ":", ",", "0", "]", "+", "pred", "[", ":", ",", "2", "]", ")", "*", "0.5", "\n", "pred_ctry", "=", "(", "pred", "[", ":", ",", "1", "]", "+", "pred", "[", ":", ",", "3", "]", ")", "*", "0.5", "\n", "pred_w", "=", "pred", "[", ":", ",", "2", "]", "-", "pred", "[", ":", ",", "0", "]", "+", "1", "\n", "pred_h", "=", "pred", "[", ":", ",", "3", "]", "-", "pred", "[", ":", ",", "1", "]", "+", "1", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "target_ctrx", "=", "(", "target", "[", ":", ",", "0", "]", "+", "target", "[", ":", ",", "2", "]", ")", "*", "0.5", "\n", "target_ctry", "=", "(", "target", "[", ":", ",", "1", "]", "+", "target", "[", ":", ",", "3", "]", ")", "*", "0.5", "\n", "target_w", "=", "target", "[", ":", ",", "2", "]", "-", "target", "[", ":", ",", "0", "]", "+", "1", "\n", "target_h", "=", "target", "[", ":", ",", "3", "]", "-", "target", "[", ":", ",", "1", "]", "+", "1", "\n", "\n", "", "dx", "=", "target_ctrx", "-", "pred_ctrx", "\n", "dy", "=", "target_ctry", "-", "pred_ctry", "\n", "\n", "loss_dx", "=", "1", "-", "torch", ".", "max", "(", "\n", "(", "target_w", "-", "2", "*", "dx", ".", "abs", "(", ")", ")", "/", "\n", "(", "target_w", "+", "2", "*", "dx", ".", "abs", "(", ")", "+", "eps", ")", ",", "torch", ".", "zeros_like", "(", "dx", ")", ")", "\n", "loss_dy", "=", "1", "-", "torch", ".", "max", "(", "\n", "(", "target_h", "-", "2", "*", "dy", ".", "abs", "(", ")", ")", "/", "\n", "(", "target_h", "+", "2", "*", "dy", ".", "abs", "(", ")", "+", "eps", ")", ",", "torch", ".", "zeros_like", "(", "dy", ")", ")", "\n", "loss_dw", "=", "1", "-", "torch", ".", "min", "(", "target_w", "/", "(", "pred_w", "+", "eps", ")", ",", "pred_w", "/", "\n", "(", "target_w", "+", "eps", ")", ")", "\n", "loss_dh", "=", "1", "-", "torch", ".", "min", "(", "target_h", "/", "(", "pred_h", "+", "eps", ")", ",", "pred_h", "/", "\n", "(", "target_h", "+", "eps", ")", ")", "\n", "loss_comb", "=", "torch", ".", "stack", "(", "[", "loss_dx", ",", "loss_dy", ",", "loss_dw", ",", "loss_dh", "]", ",", "\n", "dim", "=", "-", "1", ")", ".", "view", "(", "loss_dx", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "loss", "=", "torch", ".", "where", "(", "loss_comb", "<", "beta", ",", "0.5", "*", "loss_comb", "*", "loss_comb", "/", "beta", ",", "\n", "loss_comb", "-", "0.5", "*", "beta", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.iou_loss.giou_loss": [[72, 115], ["torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max"], "function", ["None"], ["", "@", "weighted_loss", "\n", "def", "giou_loss", "(", "pred", ",", "target", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "\"\"\"\n    Generalized Intersection over Union: A Metric and A Loss for\n    Bounding Box Regression\n    https://arxiv.org/abs/1902.09630\n\n    code refer to:\n    https://github.com/sfzhang15/ATSS/blob/master/atss_core/modeling/rpn/atss/loss.py#L36\n\n    Args:\n        pred (Tensor): Predicted bboxes of format (x1, y1, x2, y2),\n            shape (n, 4).\n        target (Tensor): Corresponding gt bboxes, shape (n, 4).\n        eps (float): Eps to avoid log(0).\n\n    Return:\n        Tensor: Loss tensor.\n    \"\"\"", "\n", "# overlap", "\n", "lt", "=", "torch", ".", "max", "(", "pred", "[", ":", ",", ":", "2", "]", ",", "target", "[", ":", ",", ":", "2", "]", ")", "\n", "rb", "=", "torch", ".", "min", "(", "pred", "[", ":", ",", "2", ":", "]", ",", "target", "[", ":", ",", "2", ":", "]", ")", "\n", "wh", "=", "(", "rb", "-", "lt", "+", "1", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "overlap", "=", "wh", "[", ":", ",", "0", "]", "*", "wh", "[", ":", ",", "1", "]", "\n", "\n", "# union", "\n", "ap", "=", "(", "pred", "[", ":", ",", "2", "]", "-", "pred", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "pred", "[", ":", ",", "3", "]", "-", "pred", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "ag", "=", "(", "target", "[", ":", ",", "2", "]", "-", "target", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "target", "[", ":", ",", "3", "]", "-", "target", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "union", "=", "ap", "+", "ag", "-", "overlap", "+", "eps", "\n", "\n", "# IoU", "\n", "ious", "=", "overlap", "/", "union", "\n", "\n", "# enclose area", "\n", "enclose_x1y1", "=", "torch", ".", "min", "(", "pred", "[", ":", ",", ":", "2", "]", ",", "target", "[", ":", ",", ":", "2", "]", ")", "\n", "enclose_x2y2", "=", "torch", ".", "max", "(", "pred", "[", ":", ",", "2", ":", "]", ",", "target", "[", ":", ",", "2", ":", "]", ")", "\n", "enclose_wh", "=", "(", "enclose_x2y2", "-", "enclose_x1y1", "+", "1", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "enclose_area", "=", "enclose_wh", "[", ":", ",", "0", "]", "*", "enclose_wh", "[", ":", ",", "1", "]", "+", "eps", "\n", "\n", "# GIoU", "\n", "gious", "=", "ious", "-", "(", "enclose_area", "-", "union", ")", "/", "enclose_area", "\n", "loss", "=", "1", "-", "gious", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.focal_loss.FocalLoss.__init__": [[48, 61], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "gamma", "=", "2.0", ",", "\n", "alpha", "=", "0.25", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "use_sigmoid", "is", "True", ",", "'Only sigmoid focal loss supported now.'", "\n", "self", ".", "use_sigmoid", "=", "use_sigmoid", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.focal_loss.FocalLoss.forward": [[62, 83], ["mmdet.ops.sigmoid_focal_loss"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.focal_loss.sigmoid_focal_loss"], ["", "def", "forward", "(", "self", ",", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", "=", "None", ",", "\n", "avg_factor", "=", "None", ",", "\n", "reduction_override", "=", "None", ")", ":", "\n", "        ", "assert", "reduction_override", "in", "(", "None", ",", "'none'", ",", "'mean'", ",", "'sum'", ")", "\n", "reduction", "=", "(", "\n", "reduction_override", "if", "reduction_override", "else", "self", ".", "reduction", ")", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "loss_cls", "=", "self", ".", "loss_weight", "*", "sigmoid_focal_loss", "(", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", ",", "\n", "gamma", "=", "self", ".", "gamma", ",", "\n", "alpha", "=", "self", ".", "alpha", ",", "\n", "reduction", "=", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "loss_cls", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.focal_loss.py_sigmoid_focal_loss": [[10, 26], ["pred.sigmoid", "target.type_as.type_as", "utils.weight_reduce_loss", "pt.pow", "torch.binary_cross_entropy_with_logits"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.utils.weight_reduce_loss"], ["def", "py_sigmoid_focal_loss", "(", "pred", ",", "\n", "target", ",", "\n", "weight", "=", "None", ",", "\n", "gamma", "=", "2.0", ",", "\n", "alpha", "=", "0.25", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ")", ":", "\n", "    ", "pred_sigmoid", "=", "pred", ".", "sigmoid", "(", ")", "\n", "target", "=", "target", ".", "type_as", "(", "pred", ")", "\n", "pt", "=", "(", "1", "-", "pred_sigmoid", ")", "*", "target", "+", "pred_sigmoid", "*", "(", "1", "-", "target", ")", "\n", "focal_weight", "=", "(", "alpha", "*", "target", "+", "(", "1", "-", "alpha", ")", "*", "\n", "(", "1", "-", "target", ")", ")", "*", "pt", ".", "pow", "(", "gamma", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred", ",", "target", ",", "reduction", "=", "'none'", ")", "*", "focal_weight", "\n", "loss", "=", "weight_reduce_loss", "(", "loss", ",", "weight", ",", "reduction", ",", "avg_factor", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.focal_loss.sigmoid_focal_loss": [[28, 43], ["mmdet.ops.sigmoid_focal_loss", "utils.weight_reduce_loss", "weight.view.view"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.focal_loss.sigmoid_focal_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.utils.weight_reduce_loss"], ["", "def", "sigmoid_focal_loss", "(", "pred", ",", "\n", "target", ",", "\n", "weight", "=", "None", ",", "\n", "gamma", "=", "2.0", ",", "\n", "alpha", "=", "0.25", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ")", ":", "\n", "# Function.apply does not accept keyword arguments, so the decorator", "\n", "# \"weighted_loss\" is not applicable", "\n", "    ", "loss", "=", "_sigmoid_focal_loss", "(", "pred", ",", "target", ",", "gamma", ",", "alpha", ")", "\n", "# TODO: find a proper way to handle the shape of weight", "\n", "if", "weight", "is", "not", "None", ":", "\n", "        ", "weight", "=", "weight", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "loss", "=", "weight_reduce_loss", "(", "loss", ",", "weight", ",", "reduction", ",", "avg_factor", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.ghm_loss.GHMC.__init__": [[34, 48], ["torch.Module.__init__", "ghm_loss.GHMC.register_buffer", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ghm_loss.GHMC.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "bins", "=", "10", ",", "momentum", "=", "0", ",", "use_sigmoid", "=", "True", ",", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "GHMC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bins", "=", "bins", "\n", "self", ".", "momentum", "=", "momentum", "\n", "edges", "=", "torch", ".", "arange", "(", "bins", "+", "1", ")", ".", "float", "(", ")", "/", "bins", "\n", "self", ".", "register_buffer", "(", "'edges'", ",", "edges", ")", "\n", "self", ".", "edges", "[", "-", "1", "]", "+=", "1e-6", "\n", "if", "momentum", ">", "0", ":", "\n", "            ", "acc_sum", "=", "torch", ".", "zeros", "(", "bins", ")", "\n", "self", ".", "register_buffer", "(", "'acc_sum'", ",", "acc_sum", ")", "\n", "", "self", ".", "use_sigmoid", "=", "use_sigmoid", "\n", "if", "not", "self", ".", "use_sigmoid", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.ghm_loss.GHMC.forward": [[49, 94], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "max", "range", "pred.dim", "target.dim", "ghm_loss._expand_binary_labels", "target.float", "label_weight.float", "valid.float().sum().item", "inds.sum().item", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "pred.size", "pred.sigmoid().detach", "valid.float().sum", "inds.sum", "pred.sigmoid", "valid.float"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.cross_entropy_loss._expand_binary_labels"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "label_weight", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Calculate the GHM-C loss.\n\n        Args:\n            pred (float tensor of size [batch_num, class_num]):\n                The direct prediction of classification fc layer.\n            target (float tensor of size [batch_num, class_num]):\n                Binary class target for each sample.\n            label_weight (float tensor of size [batch_num, class_num]):\n                the value is 1 if the sample is valid and 0 if ignored.\n        Returns:\n            The gradient harmonized loss.\n        \"\"\"", "\n", "# the target should be binary class label", "\n", "if", "pred", ".", "dim", "(", ")", "!=", "target", ".", "dim", "(", ")", ":", "\n", "            ", "target", ",", "label_weight", "=", "_expand_binary_labels", "(", "\n", "target", ",", "label_weight", ",", "pred", ".", "size", "(", "-", "1", ")", ")", "\n", "", "target", ",", "label_weight", "=", "target", ".", "float", "(", ")", ",", "label_weight", ".", "float", "(", ")", "\n", "edges", "=", "self", ".", "edges", "\n", "mmt", "=", "self", ".", "momentum", "\n", "weights", "=", "torch", ".", "zeros_like", "(", "pred", ")", "\n", "\n", "# gradient length", "\n", "g", "=", "torch", ".", "abs", "(", "pred", ".", "sigmoid", "(", ")", ".", "detach", "(", ")", "-", "target", ")", "\n", "\n", "valid", "=", "label_weight", ">", "0", "\n", "tot", "=", "max", "(", "valid", ".", "float", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "1.0", ")", "\n", "n", "=", "0", "# n valid bins", "\n", "for", "i", "in", "range", "(", "self", ".", "bins", ")", ":", "\n", "            ", "inds", "=", "(", "g", ">=", "edges", "[", "i", "]", ")", "&", "(", "g", "<", "edges", "[", "i", "+", "1", "]", ")", "&", "valid", "\n", "num_in_bin", "=", "inds", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "num_in_bin", ">", "0", ":", "\n", "                ", "if", "mmt", ">", "0", ":", "\n", "                    ", "self", ".", "acc_sum", "[", "i", "]", "=", "mmt", "*", "self", ".", "acc_sum", "[", "i", "]", "+", "(", "1", "-", "mmt", ")", "*", "num_in_bin", "\n", "weights", "[", "inds", "]", "=", "tot", "/", "self", ".", "acc_sum", "[", "i", "]", "\n", "", "else", ":", "\n", "                    ", "weights", "[", "inds", "]", "=", "tot", "/", "num_in_bin", "\n", "", "n", "+=", "1", "\n", "", "", "if", "n", ">", "0", ":", "\n", "            ", "weights", "=", "weights", "/", "n", "\n", "\n", "", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred", ",", "target", ",", "weights", ",", "reduction", "=", "'sum'", ")", "/", "tot", "\n", "return", "loss", "*", "self", ".", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.ghm_loss.GHMR.__init__": [[112, 124], ["torch.Module.__init__", "ghm_loss.GHMR.register_buffer", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ghm_loss.GHMR.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "mu", "=", "0.02", ",", "bins", "=", "10", ",", "momentum", "=", "0", ",", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "GHMR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mu", "=", "mu", "\n", "self", ".", "bins", "=", "bins", "\n", "edges", "=", "torch", ".", "arange", "(", "bins", "+", "1", ")", ".", "float", "(", ")", "/", "bins", "\n", "self", ".", "register_buffer", "(", "'edges'", ",", "edges", ")", "\n", "self", ".", "edges", "[", "-", "1", "]", "=", "1e3", "\n", "self", ".", "momentum", "=", "momentum", "\n", "if", "momentum", ">", "0", ":", "\n", "            ", "acc_sum", "=", "torch", ".", "zeros", "(", "bins", ")", "\n", "self", ".", "register_buffer", "(", "'acc_sum'", ",", "acc_sum", ")", "\n", "", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.ghm_loss.GHMR.forward": [[126, 172], ["torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.abs().detach", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "max", "range", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "label_weight.float().sum().item", "inds.sum().item", "loss.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "label_weight.float().sum", "inds.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "label_weight.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ",", "label_weight", ",", "avg_factor", "=", "None", ")", ":", "\n", "        ", "\"\"\"Calculate the GHM-R loss.\n\n        Args:\n            pred (float tensor of size [batch_num, 4 (* class_num)]):\n                The prediction of box regression layer. Channel number can be 4\n                or 4 * class_num depending on whether it is class-agnostic.\n            target (float tensor of size [batch_num, 4 (* class_num)]):\n                The target regression values with the same size of pred.\n            label_weight (float tensor of size [batch_num, 4 (* class_num)]):\n                The weight of each sample, 0 if ignored.\n        Returns:\n            The gradient harmonized loss.\n        \"\"\"", "\n", "mu", "=", "self", ".", "mu", "\n", "edges", "=", "self", ".", "edges", "\n", "mmt", "=", "self", ".", "momentum", "\n", "\n", "# ASL1 loss", "\n", "diff", "=", "pred", "-", "target", "\n", "loss", "=", "torch", ".", "sqrt", "(", "diff", "*", "diff", "+", "mu", "*", "mu", ")", "-", "mu", "\n", "\n", "# gradient length", "\n", "g", "=", "torch", ".", "abs", "(", "diff", "/", "torch", ".", "sqrt", "(", "mu", "*", "mu", "+", "diff", "*", "diff", ")", ")", ".", "detach", "(", ")", "\n", "weights", "=", "torch", ".", "zeros_like", "(", "g", ")", "\n", "\n", "valid", "=", "label_weight", ">", "0", "\n", "tot", "=", "max", "(", "label_weight", ".", "float", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "1.0", ")", "\n", "n", "=", "0", "# n: valid bins", "\n", "for", "i", "in", "range", "(", "self", ".", "bins", ")", ":", "\n", "            ", "inds", "=", "(", "g", ">=", "edges", "[", "i", "]", ")", "&", "(", "g", "<", "edges", "[", "i", "+", "1", "]", ")", "&", "valid", "\n", "num_in_bin", "=", "inds", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "num_in_bin", ">", "0", ":", "\n", "                ", "n", "+=", "1", "\n", "if", "mmt", ">", "0", ":", "\n", "                    ", "self", ".", "acc_sum", "[", "i", "]", "=", "mmt", "*", "self", ".", "acc_sum", "[", "i", "]", "+", "(", "1", "-", "mmt", ")", "*", "num_in_bin", "\n", "weights", "[", "inds", "]", "=", "tot", "/", "self", ".", "acc_sum", "[", "i", "]", "\n", "", "else", ":", "\n", "                    ", "weights", "[", "inds", "]", "=", "tot", "/", "num_in_bin", "\n", "", "", "", "if", "n", ">", "0", ":", "\n", "            ", "weights", "/=", "n", "\n", "\n", "", "loss", "=", "loss", "*", "weights", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "/", "tot", "\n", "return", "loss", "*", "self", ".", "loss_weight", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.ghm_loss._expand_binary_labels": [[8, 16], ["labels.new_full", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "label_weights.view().expand", "torch.nonzero().squeeze.numel", "label_weights.size", "labels.size", "torch.nonzero", "torch.nonzero", "torch.nonzero", "label_weights.view"], "function", ["None"], ["def", "_expand_binary_labels", "(", "labels", ",", "label_weights", ",", "label_channels", ")", ":", "\n", "    ", "bin_labels", "=", "labels", ".", "new_full", "(", "(", "labels", ".", "size", "(", "0", ")", ",", "label_channels", ")", ",", "0", ")", "\n", "inds", "=", "torch", ".", "nonzero", "(", "labels", ">=", "1", ")", ".", "squeeze", "(", ")", "\n", "if", "inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "        ", "bin_labels", "[", "inds", ",", "labels", "[", "inds", "]", "-", "1", "]", "=", "1", "\n", "", "bin_label_weights", "=", "label_weights", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "\n", "label_weights", ".", "size", "(", "0", ")", ",", "label_channels", ")", "\n", "return", "bin_labels", ",", "bin_label_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.accuracy.Accuracy.__init__": [[26, 29], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "topk", "=", "topk", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.accuracy.Accuracy.forward": [[30, 32], ["accuracy.accuracy"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.accuracy.accuracy"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "return", "accuracy", "(", "pred", ",", "target", ",", "self", ".", "topk", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.accuracy.accuracy": [[4, 22], ["isinstance", "isinstance", "max", "pred.topk", "pred_label.t.t", "pred_label.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "pred.size", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "pred", ",", "target", ",", "topk", "=", "1", ")", ":", "\n", "    ", "assert", "isinstance", "(", "topk", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "topk", ",", "int", ")", ":", "\n", "        ", "topk", "=", "(", "topk", ",", ")", "\n", "return_single", "=", "True", "\n", "", "else", ":", "\n", "        ", "return_single", "=", "False", "\n", "\n", "", "maxk", "=", "max", "(", "topk", ")", "\n", "_", ",", "pred_label", "=", "pred", ".", "topk", "(", "maxk", ",", "dim", "=", "1", ")", "\n", "pred_label", "=", "pred_label", ".", "t", "(", ")", "\n", "correct", "=", "pred_label", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred_label", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "pred", ".", "size", "(", "0", ")", ")", ")", "\n", "", "return", "res", "[", "0", "]", "if", "return_single", "else", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.utils.reduce_loss": [[6, 24], ["torch._Reduction.get_enum", "loss.mean", "loss.sum"], "function", ["None"], ["def", "reduce_loss", "(", "loss", ",", "reduction", ")", ":", "\n", "    ", "\"\"\"Reduce loss as specified.\n\n    Args:\n        loss (Tensor): Elementwise loss tensor.\n        reduction (str): Options are \"none\", \"mean\" and \"sum\".\n\n    Return:\n        Tensor: Reduced loss tensor.\n    \"\"\"", "\n", "reduction_enum", "=", "F", ".", "_Reduction", ".", "get_enum", "(", "reduction", ")", "\n", "# none: 0, elementwise_mean:1, sum: 2", "\n", "if", "reduction_enum", "==", "0", ":", "\n", "        ", "return", "loss", "\n", "", "elif", "reduction_enum", "==", "1", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "reduction_enum", "==", "2", ":", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.utils.weight_reduce_loss": [[26, 53], ["utils.reduce_loss", "reduce_loss.sum", "ValueError"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.utils.reduce_loss"], ["", "", "def", "weight_reduce_loss", "(", "loss", ",", "weight", "=", "None", ",", "reduction", "=", "'mean'", ",", "avg_factor", "=", "None", ")", ":", "\n", "    ", "\"\"\"Apply element-wise weight and reduce loss.\n\n    Args:\n        loss (Tensor): Element-wise loss.\n        weight (Tensor): Element-wise weights.\n        reduction (str): Same as built-in losses of PyTorch.\n        avg_factor (float): Avarage factor when computing the mean of losses.\n\n    Returns:\n        Tensor: Processed loss values.\n    \"\"\"", "\n", "# if weight is specified, apply element-wise weight", "\n", "if", "weight", "is", "not", "None", ":", "\n", "        ", "loss", "=", "loss", "*", "weight", "\n", "\n", "# if avg_factor is not specified, just reduce the loss", "\n", "", "if", "avg_factor", "is", "None", ":", "\n", "        ", "loss", "=", "reduce_loss", "(", "loss", ",", "reduction", ")", "\n", "", "else", ":", "\n", "# if reduction is mean, then average the loss by avg_factor", "\n", "        ", "if", "reduction", "==", "'mean'", ":", "\n", "            ", "loss", "=", "loss", ".", "sum", "(", ")", "/", "avg_factor", "\n", "# if reduction is 'none', then do nothing, otherwise raise an error", "\n", "", "elif", "reduction", "!=", "'none'", ":", "\n", "            ", "raise", "ValueError", "(", "'avg_factor can not be used with reduction=\"sum\"'", ")", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.utils.weighted_loss": [[55, 99], ["functools.wraps", "loss_func", "utils.weight_reduce_loss"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.utils.weight_reduce_loss"], ["", "def", "weighted_loss", "(", "loss_func", ")", ":", "\n", "    ", "\"\"\"Create a weighted version of a given loss function.\n\n    To use this decorator, the loss function must have the signature like\n    `loss_func(pred, target, **kwargs)`. The function only needs to compute\n    element-wise loss without any reduction. This decorator will add weight\n    and reduction arguments to the function. The decorated function will have\n    the signature like `loss_func(pred, target, weight=None, reduction='mean',\n    avg_factor=None, **kwargs)`.\n\n    :Example:\n\n    >>> import torch\n    >>> @weighted_loss\n    >>> def l1_loss(pred, target):\n    >>>     return (pred - target).abs()\n\n    >>> pred = torch.Tensor([0, 2, 3])\n    >>> target = torch.Tensor([1, 1, 1])\n    >>> weight = torch.Tensor([1, 0, 1])\n\n    >>> l1_loss(pred, target)\n    tensor(1.3333)\n    >>> l1_loss(pred, target, weight)\n    tensor(1.)\n    >>> l1_loss(pred, target, reduction='none')\n    tensor([1., 1., 2.])\n    >>> l1_loss(pred, target, weight, avg_factor=2)\n    tensor(1.5000)\n    \"\"\"", "\n", "\n", "@", "functools", ".", "wraps", "(", "loss_func", ")", "\n", "def", "wrapper", "(", "pred", ",", "\n", "target", ",", "\n", "weight", "=", "None", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "# get element-wise loss", "\n", "        ", "loss", "=", "loss_func", "(", "pred", ",", "target", ",", "**", "kwargs", ")", "\n", "loss", "=", "weight_reduce_loss", "(", "loss", ",", "weight", ",", "reduction", ",", "avg_factor", ")", "\n", "return", "loss", "\n", "\n", "", "return", "wrapper", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.cross_entropy_loss.CrossEntropyLoss.__init__": [[67, 85], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "use_sigmoid", "=", "False", ",", "\n", "use_mask", "=", "False", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "use_sigmoid", "is", "False", ")", "or", "(", "use_mask", "is", "False", ")", "\n", "self", ".", "use_sigmoid", "=", "use_sigmoid", "\n", "self", ".", "use_mask", "=", "use_mask", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "self", ".", "cls_criterion", "=", "binary_cross_entropy", "\n", "", "elif", "self", ".", "use_mask", ":", "\n", "            ", "self", ".", "cls_criterion", "=", "mask_cross_entropy", "\n", "", "else", ":", "\n", "            ", "self", ".", "cls_criterion", "=", "cross_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.cross_entropy_loss.CrossEntropyLoss.forward": [[86, 104], ["cross_entropy_loss.CrossEntropyLoss.cls_criterion"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "\n", "cls_score", ",", "\n", "label", ",", "\n", "weight", "=", "None", ",", "\n", "avg_factor", "=", "None", ",", "\n", "reduction_override", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "assert", "reduction_override", "in", "(", "None", ",", "'none'", ",", "'mean'", ",", "'sum'", ")", "\n", "reduction", "=", "(", "\n", "reduction_override", "if", "reduction_override", "else", "self", ".", "reduction", ")", "\n", "loss_cls", "=", "self", ".", "loss_weight", "*", "self", ".", "cls_criterion", "(", "\n", "cls_score", ",", "\n", "label", ",", "\n", "weight", ",", "\n", "reduction", "=", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", "**", "kwargs", ")", "\n", "return", "loss_cls", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.cross_entropy_loss.cross_entropy": [[9, 20], ["torch.cross_entropy", "utils.weight_reduce_loss", "weight.float.float"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.cross_entropy_loss.cross_entropy", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.utils.weight_reduce_loss"], ["def", "cross_entropy", "(", "pred", ",", "label", ",", "weight", "=", "None", ",", "reduction", "=", "'mean'", ",", "avg_factor", "=", "None", ")", ":", "\n", "# element-wise losses", "\n", "    ", "loss", "=", "F", ".", "cross_entropy", "(", "pred", ",", "label", ",", "reduction", "=", "'none'", ")", "\n", "\n", "# apply weights and do the reduction", "\n", "if", "weight", "is", "not", "None", ":", "\n", "        ", "weight", "=", "weight", ".", "float", "(", ")", "\n", "", "loss", "=", "weight_reduce_loss", "(", "\n", "loss", ",", "weight", "=", "weight", ",", "reduction", "=", "reduction", ",", "avg_factor", "=", "avg_factor", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.cross_entropy_loss._expand_binary_labels": [[22, 33], ["labels.new_full", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze.numel", "label_weights.view().expand", "labels.size", "torch.nonzero", "torch.nonzero", "torch.nonzero", "label_weights.size", "label_weights.view"], "function", ["None"], ["", "def", "_expand_binary_labels", "(", "labels", ",", "label_weights", ",", "label_channels", ")", ":", "\n", "    ", "bin_labels", "=", "labels", ".", "new_full", "(", "(", "labels", ".", "size", "(", "0", ")", ",", "label_channels", ")", ",", "0", ")", "\n", "inds", "=", "torch", ".", "nonzero", "(", "labels", ">=", "1", ")", ".", "squeeze", "(", ")", "\n", "if", "inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "        ", "bin_labels", "[", "inds", ",", "labels", "[", "inds", "]", "-", "1", "]", "=", "1", "\n", "", "if", "label_weights", "is", "None", ":", "\n", "        ", "bin_label_weights", "=", "None", "\n", "", "else", ":", "\n", "        ", "bin_label_weights", "=", "label_weights", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "\n", "label_weights", ".", "size", "(", "0", ")", ",", "label_channels", ")", "\n", "", "return", "bin_labels", ",", "bin_label_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.cross_entropy_loss.binary_cross_entropy": [[35, 52], ["torch.binary_cross_entropy_with_logits", "utils.weight_reduce_loss", "pred.dim", "label.dim", "cross_entropy_loss._expand_binary_labels", "weight.float.float", "label.float", "pred.size"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.utils.weight_reduce_loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.cross_entropy_loss._expand_binary_labels"], ["", "def", "binary_cross_entropy", "(", "pred", ",", "\n", "label", ",", "\n", "weight", "=", "None", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ")", ":", "\n", "    ", "if", "pred", ".", "dim", "(", ")", "!=", "label", ".", "dim", "(", ")", ":", "\n", "        ", "label", ",", "weight", "=", "_expand_binary_labels", "(", "label", ",", "weight", ",", "pred", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "# weighted element-wise losses", "\n", "", "if", "weight", "is", "not", "None", ":", "\n", "        ", "weight", "=", "weight", ".", "float", "(", ")", "\n", "", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred", ",", "label", ".", "float", "(", ")", ",", "weight", ",", "reduction", "=", "'none'", ")", "\n", "# do the reduction for the weighted loss", "\n", "loss", "=", "weight_reduce_loss", "(", "loss", ",", "reduction", "=", "reduction", ",", "avg_factor", "=", "avg_factor", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.cross_entropy_loss.mask_cross_entropy": [[54, 62], ["torch.arange", "torch.arange", "torch.arange", "pred[].squeeze", "pred.size", "torch.binary_cross_entropy_with_logits"], "function", ["None"], ["", "def", "mask_cross_entropy", "(", "pred", ",", "target", ",", "label", ",", "reduction", "=", "'mean'", ",", "avg_factor", "=", "None", ")", ":", "\n", "# TODO: handle these two reserved arguments", "\n", "    ", "assert", "reduction", "==", "'mean'", "and", "avg_factor", "is", "None", "\n", "num_rois", "=", "pred", ".", "size", "(", ")", "[", "0", "]", "\n", "inds", "=", "torch", ".", "arange", "(", "0", ",", "num_rois", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "pred", ".", "device", ")", "\n", "pred_slice", "=", "pred", "[", "inds", ",", "label", "]", ".", "squeeze", "(", "1", ")", "\n", "return", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred_slice", ",", "target", ",", "reduction", "=", "'mean'", ")", "[", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.__init__": [[21, 26], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["    ", "def", "__init__", "(", "self", ",", "beta", "=", "1.0", ",", "reduction", "=", "'mean'", ",", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "SmoothL1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward": [[27, 46], ["smooth_l1_loss.smooth_l1_loss"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.smooth_l1_loss"], ["", "def", "forward", "(", "self", ",", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", "=", "None", ",", "\n", "avg_factor", "=", "None", ",", "\n", "reduction_override", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "assert", "reduction_override", "in", "(", "None", ",", "'none'", ",", "'mean'", ",", "'sum'", ")", "\n", "reduction", "=", "(", "\n", "reduction_override", "if", "reduction_override", "else", "self", ".", "reduction", ")", "\n", "loss_bbox", "=", "self", ".", "loss_weight", "*", "smooth_l1_loss", "(", "\n", "pred", ",", "\n", "target", ",", "\n", "weight", ",", "\n", "beta", "=", "self", ".", "beta", ",", "\n", "reduction", "=", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", "**", "kwargs", ")", "\n", "return", "loss_bbox", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.smooth_l1_loss": [[8, 16], ["torch.abs", "torch.abs", "torch.where", "torch.where", "pred.size", "target.size", "target.numel"], "function", ["None"], ["@", "weighted_loss", "\n", "def", "smooth_l1_loss", "(", "pred", ",", "target", ",", "beta", "=", "1.0", ")", ":", "\n", "    ", "assert", "beta", ">", "0", "\n", "assert", "pred", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", "and", "target", ".", "numel", "(", ")", ">", "0", "\n", "diff", "=", "torch", ".", "abs", "(", "pred", "-", "target", ")", "\n", "loss", "=", "torch", ".", "where", "(", "diff", "<", "beta", ",", "0.5", "*", "diff", "*", "diff", "/", "beta", ",", "\n", "diff", "-", "0.5", "*", "beta", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.auto_fp16": [[9, 84], ["functools.wraps", "inspect.getfullargspec", "old_func", "isinstance", "TypeError", "old_func", "enumerate", "kwargs.items", "utils.cast_tensor_type", "hasattr", "len", "new_args.append", "new_args.append", "utils.cast_tensor_type", "utils.cast_tensor_type"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.utils.cast_tensor_type"], ["def", "auto_fp16", "(", "apply_to", "=", "None", ",", "out_fp32", "=", "False", ")", ":", "\n", "    ", "\"\"\"Decorator to enable fp16 training automatically.\n\n    This decorator is useful when you write custom modules and want to support\n    mixed precision training. If inputs arguments are fp32 tensors, they will\n    be converted to fp16 automatically. Arguments other than fp32 tensors are\n    ignored.\n\n    Args:\n        apply_to (Iterable, optional): The argument names to be converted.\n            `None` indicates all arguments.\n        out_fp32 (bool): Whether to convert the output back to fp32.\n\n    :Example:\n\n        class MyModule1(nn.Module)\n\n            # Convert x and y to fp16\n            @auto_fp16()\n            def forward(self, x, y):\n                pass\n\n        class MyModule2(nn.Module):\n\n            # convert pred to fp16\n            @auto_fp16(apply_to=('pred', ))\n            def do_something(self, pred, others):\n                pass\n    \"\"\"", "\n", "\n", "def", "auto_fp16_wrapper", "(", "old_func", ")", ":", "\n", "\n", "        ", "@", "functools", ".", "wraps", "(", "old_func", ")", "\n", "def", "new_func", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# check if the module has set the attribute `fp16_enabled`, if not,", "\n", "# just fallback to the original method.", "\n", "            ", "if", "not", "isinstance", "(", "args", "[", "0", "]", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'@auto_fp16 can only be used to decorate the '", "\n", "'method of nn.Module'", ")", "\n", "", "if", "not", "(", "hasattr", "(", "args", "[", "0", "]", ",", "'fp16_enabled'", ")", "and", "args", "[", "0", "]", ".", "fp16_enabled", ")", ":", "\n", "                ", "return", "old_func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# get the arg spec of the decorated method", "\n", "", "args_info", "=", "getfullargspec", "(", "old_func", ")", "\n", "# get the argument names to be casted", "\n", "args_to_cast", "=", "args_info", ".", "args", "if", "apply_to", "is", "None", "else", "apply_to", "\n", "# convert the args that need to be processed", "\n", "new_args", "=", "[", "]", "\n", "# NOTE: default args are not taken into consideration", "\n", "if", "args", ":", "\n", "                ", "arg_names", "=", "args_info", ".", "args", "[", ":", "len", "(", "args", ")", "]", "\n", "for", "i", ",", "arg_name", "in", "enumerate", "(", "arg_names", ")", ":", "\n", "                    ", "if", "arg_name", "in", "args_to_cast", ":", "\n", "                        ", "new_args", ".", "append", "(", "\n", "cast_tensor_type", "(", "args", "[", "i", "]", ",", "torch", ".", "float", ",", "torch", ".", "half", ")", ")", "\n", "", "else", ":", "\n", "                        ", "new_args", ".", "append", "(", "args", "[", "i", "]", ")", "\n", "# convert the kwargs that need to be processed", "\n", "", "", "", "new_kwargs", "=", "{", "}", "\n", "if", "kwargs", ":", "\n", "                ", "for", "arg_name", ",", "arg_value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "arg_name", "in", "args_to_cast", ":", "\n", "                        ", "new_kwargs", "[", "arg_name", "]", "=", "cast_tensor_type", "(", "\n", "arg_value", ",", "torch", ".", "float", ",", "torch", ".", "half", ")", "\n", "", "else", ":", "\n", "                        ", "new_kwargs", "[", "arg_name", "]", "=", "arg_value", "\n", "# apply converted arguments to the decorated method", "\n", "", "", "", "output", "=", "old_func", "(", "*", "new_args", ",", "**", "new_kwargs", ")", "\n", "# cast the results back to fp32 if necessary", "\n", "if", "out_fp32", ":", "\n", "                ", "output", "=", "cast_tensor_type", "(", "output", ",", "torch", ".", "half", ",", "torch", ".", "float", ")", "\n", "", "return", "output", "\n", "\n", "", "return", "new_func", "\n", "\n", "", "return", "auto_fp16_wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.decorators.force_fp32": [[86, 161], ["functools.wraps", "inspect.getfullargspec", "dict", "old_func", "isinstance", "TypeError", "old_func", "enumerate", "kwargs.items", "utils.cast_tensor_type", "hasattr", "len", "new_args.append", "new_args.append", "utils.cast_tensor_type", "utils.cast_tensor_type"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.utils.cast_tensor_type"], ["", "def", "force_fp32", "(", "apply_to", "=", "None", ",", "out_fp16", "=", "False", ")", ":", "\n", "    ", "\"\"\"Decorator to convert input arguments to fp32 in force.\n\n    This decorator is useful when you write custom modules and want to support\n    mixed precision training. If there are some inputs that must be processed\n    in fp32 mode, then this decorator can handle it. If inputs arguments are\n    fp16 tensors, they will be converted to fp32 automatically. Arguments other\n    than fp16 tensors are ignored.\n\n    Args:\n        apply_to (Iterable, optional): The argument names to be converted.\n            `None` indicates all arguments.\n        out_fp16 (bool): Whether to convert the output back to fp16.\n\n    :Example:\n\n        class MyModule1(nn.Module)\n\n            # Convert x and y to fp32\n            @force_fp32()\n            def loss(self, x, y):\n                pass\n\n        class MyModule2(nn.Module):\n\n            # convert pred to fp32\n            @force_fp32(apply_to=('pred', ))\n            def post_process(self, pred, others):\n                pass\n    \"\"\"", "\n", "\n", "def", "force_fp32_wrapper", "(", "old_func", ")", ":", "\n", "\n", "        ", "@", "functools", ".", "wraps", "(", "old_func", ")", "\n", "def", "new_func", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# check if the module has set the attribute `fp16_enabled`, if not,", "\n", "# just fallback to the original method.", "\n", "            ", "if", "not", "isinstance", "(", "args", "[", "0", "]", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'@force_fp32 can only be used to decorate the '", "\n", "'method of nn.Module'", ")", "\n", "", "if", "not", "(", "hasattr", "(", "args", "[", "0", "]", ",", "'fp16_enabled'", ")", "and", "args", "[", "0", "]", ".", "fp16_enabled", ")", ":", "\n", "                ", "return", "old_func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# get the arg spec of the decorated method", "\n", "", "args_info", "=", "getfullargspec", "(", "old_func", ")", "\n", "# get the argument names to be casted", "\n", "args_to_cast", "=", "args_info", ".", "args", "if", "apply_to", "is", "None", "else", "apply_to", "\n", "# convert the args that need to be processed", "\n", "new_args", "=", "[", "]", "\n", "if", "args", ":", "\n", "                ", "arg_names", "=", "args_info", ".", "args", "[", ":", "len", "(", "args", ")", "]", "\n", "for", "i", ",", "arg_name", "in", "enumerate", "(", "arg_names", ")", ":", "\n", "                    ", "if", "arg_name", "in", "args_to_cast", ":", "\n", "                        ", "new_args", ".", "append", "(", "\n", "cast_tensor_type", "(", "args", "[", "i", "]", ",", "torch", ".", "half", ",", "torch", ".", "float", ")", ")", "\n", "", "else", ":", "\n", "                        ", "new_args", ".", "append", "(", "args", "[", "i", "]", ")", "\n", "# convert the kwargs that need to be processed", "\n", "", "", "", "new_kwargs", "=", "dict", "(", ")", "\n", "if", "kwargs", ":", "\n", "                ", "for", "arg_name", ",", "arg_value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "arg_name", "in", "args_to_cast", ":", "\n", "                        ", "new_kwargs", "[", "arg_name", "]", "=", "cast_tensor_type", "(", "\n", "arg_value", ",", "torch", ".", "half", ",", "torch", ".", "float", ")", "\n", "", "else", ":", "\n", "                        ", "new_kwargs", "[", "arg_name", "]", "=", "arg_value", "\n", "# apply converted arguments to the decorated method", "\n", "", "", "", "output", "=", "old_func", "(", "*", "new_args", ",", "**", "new_kwargs", ")", "\n", "# cast the results back to fp32 if necessary", "\n", "if", "out_fp16", ":", "\n", "                ", "output", "=", "cast_tensor_type", "(", "output", ",", "torch", ".", "float", ",", "torch", ".", "half", ")", "\n", "", "return", "output", "\n", "\n", "", "return", "new_func", "\n", "\n", "", "return", "force_fp32_wrapper", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.hooks.Fp16OptimizerHook.__init__": [[27, 38], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "grad_clip", "=", "None", ",", "\n", "coalesce", "=", "True", ",", "\n", "bucket_size_mb", "=", "-", "1", ",", "\n", "loss_scale", "=", "512.", ",", "\n", "distributed", "=", "True", ")", ":", "\n", "        ", "self", ".", "grad_clip", "=", "grad_clip", "\n", "self", ".", "coalesce", "=", "coalesce", "\n", "self", ".", "bucket_size_mb", "=", "bucket_size_mb", "\n", "self", ".", "loss_scale", "=", "loss_scale", "\n", "self", ".", "distributed", "=", "distributed", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.hooks.Fp16OptimizerHook.before_run": [[39, 45], ["copy.deepcopy", "hooks.wrap_fp16_model"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.hooks.wrap_fp16_model"], ["", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "# keep a copy of fp32 weights", "\n", "        ", "runner", ".", "optimizer", ".", "param_groups", "=", "copy", ".", "deepcopy", "(", "\n", "runner", ".", "optimizer", ".", "param_groups", ")", "\n", "# convert model to fp16", "\n", "wrap_fp16_model", "(", "runner", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.hooks.Fp16OptimizerHook.copy_grads_to_fp32": [[46, 53], ["zip", "fp16_net.parameters", "fp32_param.grad.copy_", "fp32_param.data.new", "fp32_param.size"], "methods", ["None"], ["", "def", "copy_grads_to_fp32", "(", "self", ",", "fp16_net", ",", "fp32_weights", ")", ":", "\n", "        ", "\"\"\"Copy gradients from fp16 model to fp32 weight copy.\"\"\"", "\n", "for", "fp32_param", ",", "fp16_param", "in", "zip", "(", "fp32_weights", ",", "fp16_net", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "fp16_param", ".", "grad", "is", "not", "None", ":", "\n", "                ", "if", "fp32_param", ".", "grad", "is", "None", ":", "\n", "                    ", "fp32_param", ".", "grad", "=", "fp32_param", ".", "data", ".", "new", "(", "fp32_param", ".", "size", "(", ")", ")", "\n", "", "fp32_param", ".", "grad", ".", "copy_", "(", "fp16_param", ".", "grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.hooks.Fp16OptimizerHook.copy_params_to_fp16": [[54, 58], ["zip", "fp16_net.parameters", "fp16_param.data.copy_"], "methods", ["None"], ["", "", "", "def", "copy_params_to_fp16", "(", "self", ",", "fp16_net", ",", "fp32_weights", ")", ":", "\n", "        ", "\"\"\"Copy updated params from fp32 weight copy to fp16 model.\"\"\"", "\n", "for", "fp16_param", ",", "fp32_param", "in", "zip", "(", "fp16_net", ".", "parameters", "(", ")", ",", "fp32_weights", ")", ":", "\n", "            ", "fp16_param", ".", "data", ".", "copy_", "(", "fp32_param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.hooks.Fp16OptimizerHook.after_train_iter": [[59, 84], ["runner.model.zero_grad", "runner.optimizer.zero_grad", "scaled_loss.backward", "hooks.Fp16OptimizerHook.copy_grads_to_fp32", "runner.optimizer.step", "hooks.Fp16OptimizerHook.copy_params_to_fp16", "utils.dist_utils.allreduce_grads", "hooks.Fp16OptimizerHook.clip_grads", "param.grad.div_"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.carafe.carafe.CARAFEFunction.backward", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.hooks.Fp16OptimizerHook.copy_grads_to_fp32", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.hooks.Fp16OptimizerHook.copy_params_to_fp16", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.dist_utils.allreduce_grads"], ["", "", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "# clear grads of last iteration", "\n", "        ", "runner", ".", "model", ".", "zero_grad", "(", ")", "\n", "runner", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "# scale the loss value", "\n", "scaled_loss", "=", "runner", ".", "outputs", "[", "'loss'", "]", "*", "self", ".", "loss_scale", "\n", "scaled_loss", ".", "backward", "(", ")", "\n", "# copy fp16 grads in the model to fp32 params in the optimizer", "\n", "fp32_weights", "=", "[", "]", "\n", "for", "param_group", "in", "runner", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "fp32_weights", "+=", "param_group", "[", "'params'", "]", "\n", "", "self", ".", "copy_grads_to_fp32", "(", "runner", ".", "model", ",", "fp32_weights", ")", "\n", "# allreduce grads", "\n", "if", "self", ".", "distributed", ":", "\n", "            ", "allreduce_grads", "(", "fp32_weights", ",", "self", ".", "coalesce", ",", "self", ".", "bucket_size_mb", ")", "\n", "# scale the gradients back", "\n", "", "for", "param", "in", "fp32_weights", ":", "\n", "            ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "                ", "param", ".", "grad", ".", "div_", "(", "self", ".", "loss_scale", ")", "\n", "", "", "if", "self", ".", "grad_clip", "is", "not", "None", ":", "\n", "            ", "self", ".", "clip_grads", "(", "fp32_weights", ")", "\n", "# update fp32 params", "\n", "", "runner", ".", "optimizer", ".", "step", "(", ")", "\n", "# copy fp32 params to the fp16 model", "\n", "self", ".", "copy_params_to_fp16", "(", "runner", ".", "model", ",", "fp32_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.hooks.wrap_fp16_model": [[86, 95], ["model.half", "hooks.patch_norm_fp32", "model.modules", "hasattr"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.hooks.patch_norm_fp32"], ["", "", "def", "wrap_fp16_model", "(", "model", ")", ":", "\n", "# convert model to fp16", "\n", "    ", "model", ".", "half", "(", ")", "\n", "# patch the normalization layers to make it work in fp32 mode", "\n", "patch_norm_fp32", "(", "model", ")", "\n", "# set `fp16_enabled` flag", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "'fp16_enabled'", ")", ":", "\n", "            ", "m", ".", "fp16_enabled", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.hooks.patch_norm_fp32": [[97, 106], ["isinstance", "module.children", "module.float", "hooks.patch_norm_fp32", "isinstance", "hooks.patch_forward_method"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.hooks.patch_norm_fp32", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.hooks.patch_forward_method"], ["", "", "", "def", "patch_norm_fp32", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "        ", "module", ".", "float", "(", ")", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "GroupNorm", ")", "or", "torch", ".", "__version__", "<", "'1.3'", ":", "\n", "            ", "module", ".", "forward", "=", "patch_forward_method", "(", "module", ".", "forward", ",", "torch", ".", "half", ",", "\n", "torch", ".", "float", ")", "\n", "", "", "for", "child", "in", "module", ".", "children", "(", ")", ":", "\n", "        ", "patch_norm_fp32", "(", "child", ")", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.hooks.patch_forward_method": [[108, 129], ["func", "utils.cast_tensor_type", "utils.cast_tensor_type", "utils.cast_tensor_type", "torch.half", "torch.half", "torch.float", "torch.float"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.utils.cast_tensor_type"], ["", "def", "patch_forward_method", "(", "func", ",", "src_type", ",", "dst_type", ",", "convert_output", "=", "True", ")", ":", "\n", "    ", "\"\"\"Patch the forward method of a module.\n\n    Args:\n        func (callable): The original forward method.\n        src_type (torch.dtype): Type of input arguments to be converted from.\n        dst_type (torch.dtype): Type of input arguments to be converted to.\n        convert_output (bool): Whether to convert the output back to src_type.\n\n    Returns:\n        callable: The patched forward method.\n    \"\"\"", "\n", "\n", "def", "new_forward", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "output", "=", "func", "(", "*", "cast_tensor_type", "(", "args", ",", "src_type", ",", "dst_type", ")", ",", "\n", "**", "cast_tensor_type", "(", "kwargs", ",", "src_type", ",", "dst_type", ")", ")", "\n", "if", "convert_output", ":", "\n", "            ", "output", "=", "cast_tensor_type", "(", "output", ",", "dst_type", ",", "src_type", ")", "\n", "", "return", "output", "\n", "\n", "", "return", "new_forward", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.utils.cast_tensor_type": [[7, 24], ["isinstance", "inputs.to", "isinstance", "isinstance", "isinstance", "isinstance", "type", "utils.cast_tensor_type", "type", "inputs.items", "utils.cast_tensor_type"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.utils.cast_tensor_type"], ["    ", "\"\"\"Reduce loss as specified.\n\n    Args:\n        loss (Tensor): Elementwise loss tensor.\n        reduction (str): Options are \"none\", \"mean\" and \"sum\".\n\n    Return:\n        Tensor: Reduced loss tensor.\n    \"\"\"", "\n", "reduction_enum", "=", "F", ".", "_Reduction", ".", "get_enum", "(", "reduction", ")", "\n", "# none: 0, elementwise_mean:1, sum: 2", "\n", "if", "reduction_enum", "==", "0", ":", "\n", "        ", "return", "loss", "\n", "", "elif", "reduction_enum", "==", "1", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "reduction_enum", "==", "2", ":", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.merge_augs.merge_aug_proposals": [[8, 44], ["zip", "torch.cat", "mmdet.ops.nms", "scores.sort", "min", "proposals.clone", "bbox.bbox_mapping_back", "recovered_proposals.append"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox_mapping_back"], ["def", "merge_aug_proposals", "(", "aug_proposals", ",", "img_metas", ",", "rpn_test_cfg", ")", ":", "\n", "    ", "\"\"\"Merge augmented proposals (multiscale, flip, etc.)\n\n    Args:\n        aug_proposals (list[Tensor]): proposals from different testing\n            schemes, shape (n, 5). Note that they are not rescaled to the\n            original image size.\n\n        img_metas (list[dict]): list of image info dict where each dict has:\n            'img_shape', 'scale_factor', 'flip', and my also contain\n            'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n            For details on the values of these keys see\n            `mmdet/datasets/pipelines/formatting.py:Collect`.\n\n        rpn_test_cfg (dict): rpn test config.\n\n    Returns:\n        Tensor: shape (n, 4), proposals corresponding to original image scale.\n    \"\"\"", "\n", "recovered_proposals", "=", "[", "]", "\n", "for", "proposals", ",", "img_info", "in", "zip", "(", "aug_proposals", ",", "img_metas", ")", ":", "\n", "        ", "img_shape", "=", "img_info", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_info", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_info", "[", "'flip'", "]", "\n", "_proposals", "=", "proposals", ".", "clone", "(", ")", "\n", "_proposals", "[", ":", ",", ":", "4", "]", "=", "bbox_mapping_back", "(", "_proposals", "[", ":", ",", ":", "4", "]", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "recovered_proposals", ".", "append", "(", "_proposals", ")", "\n", "", "aug_proposals", "=", "torch", ".", "cat", "(", "recovered_proposals", ",", "dim", "=", "0", ")", "\n", "merged_proposals", ",", "_", "=", "nms", "(", "aug_proposals", ",", "rpn_test_cfg", ".", "nms_thr", ")", "\n", "scores", "=", "merged_proposals", "[", ":", ",", "4", "]", "\n", "_", ",", "order", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "num", "=", "min", "(", "rpn_test_cfg", ".", "max_num", ",", "merged_proposals", ".", "shape", "[", "0", "]", ")", "\n", "order", "=", "order", "[", ":", "num", "]", "\n", "merged_proposals", "=", "merged_proposals", "[", "order", ",", ":", "]", "\n", "return", "merged_proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.merge_augs.merge_aug_bboxes": [[46, 71], ["zip", "torch.stack().mean", "bbox.bbox_mapping_back", "recovered_bboxes.append", "torch.stack().mean", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox_mapping_back"], ["", "def", "merge_aug_bboxes", "(", "aug_bboxes", ",", "aug_scores", ",", "img_metas", ",", "rcnn_test_cfg", ")", ":", "\n", "    ", "\"\"\"Merge augmented detection bboxes and scores.\n\n    Args:\n        aug_bboxes (list[Tensor]): shape (n, 4*#class)\n        aug_scores (list[Tensor] or None): shape (n, #class)\n        img_shapes (list[Tensor]): shape (3, ).\n        rcnn_test_cfg (dict): rcnn test config.\n\n    Returns:\n        tuple: (bboxes, scores)\n    \"\"\"", "\n", "recovered_bboxes", "=", "[", "]", "\n", "for", "bboxes", ",", "img_info", "in", "zip", "(", "aug_bboxes", ",", "img_metas", ")", ":", "\n", "        ", "img_shape", "=", "img_info", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_info", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_info", "[", "0", "]", "[", "'flip'", "]", "\n", "bboxes", "=", "bbox_mapping_back", "(", "bboxes", ",", "img_shape", ",", "scale_factor", ",", "flip", ")", "\n", "recovered_bboxes", ".", "append", "(", "bboxes", ")", "\n", "", "bboxes", "=", "torch", ".", "stack", "(", "recovered_bboxes", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "if", "aug_scores", "is", "None", ":", "\n", "        ", "return", "bboxes", "\n", "", "else", ":", "\n", "        ", "scores", "=", "torch", ".", "stack", "(", "aug_scores", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "return", "bboxes", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.merge_augs.merge_aug_scores": [[73, 79], ["isinstance", "torch.mean", "numpy.mean", "torch.stack"], "function", ["None"], ["", "", "def", "merge_aug_scores", "(", "aug_scores", ")", ":", "\n", "    ", "\"\"\"Merge augmented bbox scores.\"\"\"", "\n", "if", "isinstance", "(", "aug_scores", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "aug_scores", ")", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "mean", "(", "aug_scores", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.merge_augs.merge_aug_masks": [[81, 102], ["numpy.mean", "numpy.average", "zip", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "merge_aug_masks", "(", "aug_masks", ",", "img_metas", ",", "rcnn_test_cfg", ",", "weights", "=", "None", ")", ":", "\n", "    ", "\"\"\"Merge augmented mask prediction.\n\n    Args:\n        aug_masks (list[ndarray]): shape (n, #class, h, w)\n        img_shapes (list[ndarray]): shape (3, ).\n        rcnn_test_cfg (dict): rcnn test config.\n\n    Returns:\n        tuple: (bboxes, scores)\n    \"\"\"", "\n", "recovered_masks", "=", "[", "\n", "mask", "if", "not", "img_info", "[", "0", "]", "[", "'flip'", "]", "else", "mask", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "for", "mask", ",", "img_info", "in", "zip", "(", "aug_masks", ",", "img_metas", ")", "\n", "]", "\n", "if", "weights", "is", "None", ":", "\n", "        ", "merged_masks", "=", "np", ".", "mean", "(", "recovered_masks", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "merged_masks", "=", "np", ".", "average", "(", "\n", "np", ".", "array", "(", "recovered_masks", ")", ",", "axis", "=", "0", ",", "weights", "=", "np", ".", "array", "(", "weights", ")", ")", "\n", "", "return", "merged_masks", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.post_processing.bbox_nms.multiclass_nms": [[6, 77], ["multi_bboxes.new_zeros.max", "nms_cfg.copy", "nms_cfg.copy.pop", "getattr", "getattr.", "multi_scores.size", "multi_bboxes[].expand", "valid_mask.nonzero", "multi_bboxes.new_zeros.numel", "multi_bboxes.new_zeros", "multi_bboxes.new_zeros", "multi_bboxes.new_zeros.to", "torch.cat", "keep.size", "scores.sort", "torch.cat", "multi_bboxes.view", "multi_scores.size"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to"], ["def", "multiclass_nms", "(", "multi_bboxes", ",", "\n", "multi_scores", ",", "\n", "score_thr", ",", "\n", "nms_cfg", ",", "\n", "max_num", "=", "-", "1", ",", "\n", "score_factors", "=", "None", ")", ":", "\n", "    ", "\"\"\"NMS for multi-class bboxes.\n\n    Args:\n        multi_bboxes (Tensor): shape (n, #class*4) or (n, 4)\n        multi_scores (Tensor): shape (n, #class), where the 0th column\n            contains scores of the background class, but this will be ignored.\n        score_thr (float): bbox threshold, bboxes with scores lower than it\n            will not be considered.\n        nms_thr (float): NMS IoU threshold\n        max_num (int): if there are more than max_num bboxes after NMS,\n            only top max_num will be kept.\n        score_factors (Tensor): The factors multiplied to scores before\n            applying NMS\n\n    Returns:\n        tuple: (bboxes, labels), tensors of shape (k, 5) and (k, 1). Labels\n            are 0-based.\n    \"\"\"", "\n", "num_classes", "=", "multi_scores", ".", "size", "(", "1", ")", "-", "1", "\n", "# exclude background category", "\n", "if", "multi_bboxes", ".", "shape", "[", "1", "]", ">", "4", ":", "\n", "        ", "bboxes", "=", "multi_bboxes", ".", "view", "(", "multi_scores", ".", "size", "(", "0", ")", ",", "-", "1", ",", "4", ")", "[", ":", ",", "1", ":", "]", "\n", "", "else", ":", "\n", "        ", "bboxes", "=", "multi_bboxes", "[", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "num_classes", ",", "4", ")", "\n", "", "scores", "=", "multi_scores", "[", ":", ",", "1", ":", "]", "\n", "\n", "# filter out boxes with low scores", "\n", "valid_mask", "=", "scores", ">", "score_thr", "\n", "bboxes", "=", "bboxes", "[", "valid_mask", "]", "\n", "if", "score_factors", "is", "not", "None", ":", "\n", "        ", "scores", "=", "scores", "*", "score_factors", "[", ":", ",", "None", "]", "\n", "", "scores", "=", "scores", "[", "valid_mask", "]", "\n", "labels", "=", "valid_mask", ".", "nonzero", "(", ")", "[", ":", ",", "1", "]", "\n", "\n", "if", "bboxes", ".", "numel", "(", ")", "==", "0", ":", "\n", "        ", "bboxes", "=", "multi_bboxes", ".", "new_zeros", "(", "(", "0", ",", "5", ")", ")", "\n", "labels", "=", "multi_bboxes", ".", "new_zeros", "(", "(", "0", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "return", "bboxes", ",", "labels", "\n", "\n", "# Modified from https://github.com/pytorch/vision/blob", "\n", "# /505cd6957711af790211896d32b40291bea1bc21/torchvision/ops/boxes.py#L39.", "\n", "# strategy: in order to perform NMS independently per class.", "\n", "# we add an offset to all the boxes. The offset is dependent", "\n", "# only on the class idx, and is large enough so that boxes", "\n", "# from different classes do not overlap", "\n", "", "max_coordinate", "=", "bboxes", ".", "max", "(", ")", "\n", "offsets", "=", "labels", ".", "to", "(", "bboxes", ")", "*", "(", "max_coordinate", "+", "1", ")", "\n", "bboxes_for_nms", "=", "bboxes", "+", "offsets", "[", ":", ",", "None", "]", "\n", "nms_cfg_", "=", "nms_cfg", ".", "copy", "(", ")", "\n", "nms_type", "=", "nms_cfg_", ".", "pop", "(", "'type'", ",", "'nms'", ")", "\n", "nms_op", "=", "getattr", "(", "nms_wrapper", ",", "nms_type", ")", "\n", "dets", ",", "keep", "=", "nms_op", "(", "\n", "torch", ".", "cat", "(", "[", "bboxes_for_nms", ",", "scores", "[", ":", ",", "None", "]", "]", ",", "1", ")", ",", "**", "nms_cfg_", ")", "\n", "bboxes", "=", "bboxes", "[", "keep", "]", "\n", "scores", "=", "dets", "[", ":", ",", "-", "1", "]", "# soft_nms will modify scores", "\n", "labels", "=", "labels", "[", "keep", "]", "\n", "\n", "if", "keep", ".", "size", "(", "0", ")", ">", "max_num", ":", "\n", "        ", "_", ",", "inds", "=", "scores", ".", "sort", "(", "descending", "=", "True", ")", "\n", "inds", "=", "inds", "[", ":", "max_num", "]", "\n", "bboxes", "=", "bboxes", "[", "inds", "]", "\n", "scores", "=", "scores", "[", "inds", "]", "\n", "labels", "=", "labels", "[", "inds", "]", "\n", "\n", "", "return", "torch", ".", "cat", "(", "[", "bboxes", ",", "scores", "[", ":", ",", "None", "]", "]", ",", "1", ")", ",", "labels", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask.mask_target.mask_target": [[7, 14], ["map", "torch.cat", "list", "range", "len"], "function", ["None"], ["def", "mask_target", "(", "pos_proposals_list", ",", "pos_assigned_gt_inds_list", ",", "gt_masks_list", ",", "\n", "cfg", ")", ":", "\n", "    ", "cfg_list", "=", "[", "cfg", "for", "_", "in", "range", "(", "len", "(", "pos_proposals_list", ")", ")", "]", "\n", "mask_targets", "=", "map", "(", "mask_target_single", ",", "pos_proposals_list", ",", "\n", "pos_assigned_gt_inds_list", ",", "gt_masks_list", ",", "cfg_list", ")", "\n", "mask_targets", "=", "torch", ".", "cat", "(", "list", "(", "mask_targets", ")", ")", "\n", "return", "mask_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask.mask_target.mask_target_single": [[16, 42], ["torch.nn.modules.utils._pair", "pos_proposals.size", "pos_proposals.cpu().numpy", "numpy.clip", "numpy.clip", "pos_assigned_gt_inds.cpu().numpy.cpu().numpy", "range", "torch.from_numpy().float().to", "pos_proposals.new_zeros", "proposals_np[].astype", "numpy.maximum", "numpy.maximum", "mmcv.imresize", "pos_proposals.new_zeros.append", "pos_proposals.cpu", "pos_assigned_gt_inds.cpu().numpy.cpu", "torch.from_numpy().float", "torch.from_numpy", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to"], ["", "def", "mask_target_single", "(", "pos_proposals", ",", "pos_assigned_gt_inds", ",", "gt_masks", ",", "cfg", ")", ":", "\n", "    ", "mask_size", "=", "_pair", "(", "cfg", ".", "mask_size", ")", "\n", "num_pos", "=", "pos_proposals", ".", "size", "(", "0", ")", "\n", "mask_targets", "=", "[", "]", "\n", "if", "num_pos", ">", "0", ":", "\n", "        ", "proposals_np", "=", "pos_proposals", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "_", ",", "maxh", ",", "maxw", "=", "gt_masks", ".", "shape", "\n", "proposals_np", "[", ":", ",", "[", "0", ",", "2", "]", "]", "=", "np", ".", "clip", "(", "proposals_np", "[", ":", ",", "[", "0", ",", "2", "]", "]", ",", "0", ",", "maxw", "-", "1", ")", "\n", "proposals_np", "[", ":", ",", "[", "1", ",", "3", "]", "]", "=", "np", ".", "clip", "(", "proposals_np", "[", ":", ",", "[", "1", ",", "3", "]", "]", ",", "0", ",", "maxh", "-", "1", ")", "\n", "pos_assigned_gt_inds", "=", "pos_assigned_gt_inds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "num_pos", ")", ":", "\n", "            ", "gt_mask", "=", "gt_masks", "[", "pos_assigned_gt_inds", "[", "i", "]", "]", "\n", "bbox", "=", "proposals_np", "[", "i", ",", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bbox", "\n", "w", "=", "np", ".", "maximum", "(", "x2", "-", "x1", "+", "1", ",", "1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "y2", "-", "y1", "+", "1", ",", "1", ")", "\n", "# mask is uint8 both before and after resizing", "\n", "# mask_size (h, w) to (w, h)", "\n", "target", "=", "mmcv", ".", "imresize", "(", "gt_mask", "[", "y1", ":", "y1", "+", "h", ",", "x1", ":", "x1", "+", "w", "]", ",", "\n", "mask_size", "[", ":", ":", "-", "1", "]", ")", "\n", "mask_targets", ".", "append", "(", "target", ")", "\n", "", "mask_targets", "=", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "mask_targets", ")", ")", ".", "float", "(", ")", ".", "to", "(", "\n", "pos_proposals", ".", "device", ")", "\n", "", "else", ":", "\n", "        ", "mask_targets", "=", "pos_proposals", ".", "new_zeros", "(", "(", "0", ",", ")", "+", "mask_size", ")", "\n", "", "return", "mask_targets", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.mask.utils.split_combined_polys": [[4, 31], ["range", "len", "poly_lens[].tolist", "polys_per_mask[].tolist", "mmcv.slice_list", "mmcv.slice_list", "mask_polys_list.append"], "function", ["None"], ["\n", "\n", "def", "reduce_loss", "(", "loss", ",", "reduction", ")", ":", "\n", "    ", "\"\"\"Reduce loss as specified.\n\n    Args:\n        loss (Tensor): Elementwise loss tensor.\n        reduction (str): Options are \"none\", \"mean\" and \"sum\".\n\n    Return:\n        Tensor: Reduced loss tensor.\n    \"\"\"", "\n", "reduction_enum", "=", "F", ".", "_Reduction", ".", "get_enum", "(", "reduction", ")", "\n", "# none: 0, elementwise_mean:1, sum: 2", "\n", "if", "reduction_enum", "==", "0", ":", "\n", "        ", "return", "loss", "\n", "", "elif", "reduction_enum", "==", "1", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "reduction_enum", "==", "2", ":", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "\n", "\n", "\n", "", "", "def", "weight_reduce_loss", "(", "loss", ",", "weight", "=", "None", ",", "reduction", "=", "'mean'", ",", "avg_factor", "=", "None", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_generator.AnchorGenerator.__init__": [[17, 24], ["torch.Tensor", "torch.Tensor", "anchor_generator.AnchorGenerator.gen_base_anchors"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_generator.AnchorGenerator.gen_base_anchors"], ["def", "__init__", "(", "self", ",", "base_size", ",", "scales", ",", "ratios", ",", "scale_major", "=", "True", ",", "ctr", "=", "None", ")", ":", "\n", "        ", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "scales", "=", "torch", ".", "Tensor", "(", "scales", ")", "\n", "self", ".", "ratios", "=", "torch", ".", "Tensor", "(", "ratios", ")", "\n", "self", ".", "scale_major", "=", "scale_major", "\n", "self", ".", "ctr", "=", "ctr", "\n", "self", ".", "base_anchors", "=", "self", ".", "gen_base_anchors", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_generator.AnchorGenerator.num_base_anchors": [[25, 28], ["anchor_generator.AnchorGenerator.base_anchors.size"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_base_anchors", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base_anchors", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_generator.AnchorGenerator.gen_base_anchors": [[29, 57], ["torch.sqrt", "torch.stack().round", "torch.stack"], "methods", ["None"], ["", "def", "gen_base_anchors", "(", "self", ")", ":", "\n", "        ", "w", "=", "self", ".", "base_size", "\n", "h", "=", "self", ".", "base_size", "\n", "if", "self", ".", "ctr", "is", "None", ":", "\n", "            ", "x_ctr", "=", "0.5", "*", "(", "w", "-", "1", ")", "\n", "y_ctr", "=", "0.5", "*", "(", "h", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x_ctr", ",", "y_ctr", "=", "self", ".", "ctr", "\n", "\n", "", "h_ratios", "=", "torch", ".", "sqrt", "(", "self", ".", "ratios", ")", "\n", "w_ratios", "=", "1", "/", "h_ratios", "\n", "if", "self", ".", "scale_major", ":", "\n", "            ", "ws", "=", "(", "w", "*", "w_ratios", "[", ":", ",", "None", "]", "*", "self", ".", "scales", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "hs", "=", "(", "h", "*", "h_ratios", "[", ":", ",", "None", "]", "*", "self", ".", "scales", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "ws", "=", "(", "w", "*", "self", ".", "scales", "[", ":", ",", "None", "]", "*", "w_ratios", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "hs", "=", "(", "h", "*", "self", ".", "scales", "[", ":", ",", "None", "]", "*", "h_ratios", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "# yapf: disable", "\n", "", "base_anchors", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "x_ctr", "-", "0.5", "*", "(", "ws", "-", "1", ")", ",", "y_ctr", "-", "0.5", "*", "(", "hs", "-", "1", ")", ",", "\n", "x_ctr", "+", "0.5", "*", "(", "ws", "-", "1", ")", ",", "y_ctr", "+", "0.5", "*", "(", "hs", "-", "1", ")", "\n", "]", ",", "\n", "dim", "=", "-", "1", ")", ".", "round", "(", ")", "\n", "# yapf: enable", "\n", "\n", "return", "base_anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_generator.AnchorGenerator._meshgrid": [[58, 65], ["x.repeat", "y.view().repeat().view", "len", "y.view().repeat", "len", "y.view"], "methods", ["None"], ["", "def", "_meshgrid", "(", "self", ",", "x", ",", "y", ",", "row_major", "=", "True", ")", ":", "\n", "        ", "xx", "=", "x", ".", "repeat", "(", "len", "(", "y", ")", ")", "\n", "yy", "=", "y", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "len", "(", "x", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "row_major", ":", "\n", "            ", "return", "xx", ",", "yy", "\n", "", "else", ":", "\n", "            ", "return", "yy", ",", "xx", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_generator.AnchorGenerator.grid_anchors": [[66, 84], ["anchor_generator.AnchorGenerator.base_anchors.to", "anchor_generator.AnchorGenerator._meshgrid", "torch.stack", "shifts.type_as.type_as.type_as", "all_anchors.view.view.view", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_generator.PointGenerator._meshgrid"], ["", "", "def", "grid_anchors", "(", "self", ",", "featmap_size", ",", "stride", "=", "16", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "base_anchors", "=", "self", ".", "base_anchors", ".", "to", "(", "device", ")", "\n", "\n", "feat_h", ",", "feat_w", "=", "featmap_size", "\n", "shift_x", "=", "torch", ".", "arange", "(", "0", ",", "feat_w", ",", "device", "=", "device", ")", "*", "stride", "\n", "shift_y", "=", "torch", ".", "arange", "(", "0", ",", "feat_h", ",", "device", "=", "device", ")", "*", "stride", "\n", "shift_xx", ",", "shift_yy", "=", "self", ".", "_meshgrid", "(", "shift_x", ",", "shift_y", ")", "\n", "shifts", "=", "torch", ".", "stack", "(", "[", "shift_xx", ",", "shift_yy", ",", "shift_xx", ",", "shift_yy", "]", ",", "dim", "=", "-", "1", ")", "\n", "shifts", "=", "shifts", ".", "type_as", "(", "base_anchors", ")", "\n", "# first feat_w elements correspond to the first row of shifts", "\n", "# add A anchors (1, A, 4) to K shifts (K, 1, 4) to get", "\n", "# shifted anchors (K, A, 4), reshape to (K*A, 4)", "\n", "\n", "all_anchors", "=", "base_anchors", "[", "None", ",", ":", ",", ":", "]", "+", "shifts", "[", ":", ",", "None", ",", ":", "]", "\n", "all_anchors", "=", "all_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "# first A rows correspond to A anchors of (0, 0) in feature map,", "\n", "# then (0, 1), (0, 2), ...", "\n", "return", "all_anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_generator.AnchorGenerator.valid_flags": [[85, 99], ["torch.zeros", "torch.zeros", "anchor_generator.AnchorGenerator._meshgrid", "valid[].expand().contiguous().view", "valid[].expand().contiguous", "valid[].expand", "valid[].expand().contiguous().view.size"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_generator.PointGenerator._meshgrid"], ["", "def", "valid_flags", "(", "self", ",", "featmap_size", ",", "valid_size", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "feat_h", ",", "feat_w", "=", "featmap_size", "\n", "valid_h", ",", "valid_w", "=", "valid_size", "\n", "assert", "valid_h", "<=", "feat_h", "and", "valid_w", "<=", "feat_w", "\n", "valid_x", "=", "torch", ".", "zeros", "(", "feat_w", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "device", ")", "\n", "valid_y", "=", "torch", ".", "zeros", "(", "feat_h", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "device", ")", "\n", "valid_x", "[", ":", "valid_w", "]", "=", "1", "\n", "valid_y", "[", ":", "valid_h", "]", "=", "1", "\n", "valid_xx", ",", "valid_yy", "=", "self", ".", "_meshgrid", "(", "valid_x", ",", "valid_y", ")", "\n", "valid", "=", "valid_xx", "&", "valid_yy", "\n", "valid", "=", "valid", "[", ":", ",", "\n", "None", "]", ".", "expand", "(", "valid", ".", "size", "(", "0", ")", ",", "\n", "self", ".", "num_base_anchors", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "return", "valid", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_target.anchor_target": [[7, 77], ["len", "range", "utils.multi_apply", "any", "sum", "sum", "anchor_target.images_to_levels", "anchor_target.images_to_levels", "anchor_target.images_to_levels", "anchor_target.images_to_levels", "len", "len", "anchors.size", "torch.cat", "torch.cat", "len", "len", "max", "max", "range", "range", "inds.numel", "inds.numel"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.multi_apply", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.images_to_levels", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.images_to_levels", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.images_to_levels", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.images_to_levels"], ["def", "anchor_target", "(", "anchor_list", ",", "\n", "valid_flag_list", ",", "\n", "gt_bboxes_list", ",", "\n", "img_metas", ",", "\n", "target_means", ",", "\n", "target_stds", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore_list", "=", "None", ",", "\n", "gt_labels_list", "=", "None", ",", "\n", "label_channels", "=", "1", ",", "\n", "sampling", "=", "True", ",", "\n", "unmap_outputs", "=", "True", ")", ":", "\n", "    ", "\"\"\"Compute regression and classification targets for anchors.\n\n    Args:\n        anchor_list (list[list]): Multi level anchors of each image.\n        valid_flag_list (list[list]): Multi level valid flags of each image.\n        gt_bboxes_list (list[Tensor]): Ground truth bboxes of each image.\n        img_metas (list[dict]): Meta info of each image.\n        target_means (Iterable): Mean value of regression targets.\n        target_stds (Iterable): Std value of regression targets.\n        cfg (dict): RPN train configs.\n\n    Returns:\n        tuple\n    \"\"\"", "\n", "num_imgs", "=", "len", "(", "img_metas", ")", "\n", "assert", "len", "(", "anchor_list", ")", "==", "len", "(", "valid_flag_list", ")", "==", "num_imgs", "\n", "\n", "# anchor number of multi levels", "\n", "num_level_anchors", "=", "[", "anchors", ".", "size", "(", "0", ")", "for", "anchors", "in", "anchor_list", "[", "0", "]", "]", "\n", "# concat all level anchors and flags to a single tensor", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "        ", "assert", "len", "(", "anchor_list", "[", "i", "]", ")", "==", "len", "(", "valid_flag_list", "[", "i", "]", ")", "\n", "anchor_list", "[", "i", "]", "=", "torch", ".", "cat", "(", "anchor_list", "[", "i", "]", ")", "\n", "valid_flag_list", "[", "i", "]", "=", "torch", ".", "cat", "(", "valid_flag_list", "[", "i", "]", ")", "\n", "\n", "# compute targets for each image", "\n", "", "if", "gt_bboxes_ignore_list", "is", "None", ":", "\n", "        ", "gt_bboxes_ignore_list", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "", "if", "gt_labels_list", "is", "None", ":", "\n", "        ", "gt_labels_list", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "", "(", "all_labels", ",", "all_label_weights", ",", "all_bbox_targets", ",", "all_bbox_weights", ",", "\n", "pos_inds_list", ",", "neg_inds_list", ")", "=", "multi_apply", "(", "\n", "anchor_target_single", ",", "\n", "anchor_list", ",", "\n", "valid_flag_list", ",", "\n", "gt_bboxes_list", ",", "\n", "gt_bboxes_ignore_list", ",", "\n", "gt_labels_list", ",", "\n", "img_metas", ",", "\n", "target_means", "=", "target_means", ",", "\n", "target_stds", "=", "target_stds", ",", "\n", "cfg", "=", "cfg", ",", "\n", "label_channels", "=", "label_channels", ",", "\n", "sampling", "=", "sampling", ",", "\n", "unmap_outputs", "=", "unmap_outputs", ")", "\n", "# no valid anchors", "\n", "if", "any", "(", "[", "labels", "is", "None", "for", "labels", "in", "all_labels", "]", ")", ":", "\n", "        ", "return", "None", "\n", "# sampled anchors of all images", "\n", "", "num_total_pos", "=", "sum", "(", "[", "max", "(", "inds", ".", "numel", "(", ")", ",", "1", ")", "for", "inds", "in", "pos_inds_list", "]", ")", "\n", "num_total_neg", "=", "sum", "(", "[", "max", "(", "inds", ".", "numel", "(", ")", ",", "1", ")", "for", "inds", "in", "neg_inds_list", "]", ")", "\n", "# split targets to a list w.r.t. multiple levels", "\n", "labels_list", "=", "images_to_levels", "(", "all_labels", ",", "num_level_anchors", ")", "\n", "label_weights_list", "=", "images_to_levels", "(", "all_label_weights", ",", "num_level_anchors", ")", "\n", "bbox_targets_list", "=", "images_to_levels", "(", "all_bbox_targets", ",", "num_level_anchors", ")", "\n", "bbox_weights_list", "=", "images_to_levels", "(", "all_bbox_weights", ",", "num_level_anchors", ")", "\n", "return", "(", "labels_list", ",", "label_weights_list", ",", "bbox_targets_list", ",", "\n", "bbox_weights_list", ",", "num_total_pos", ",", "num_total_neg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_target.images_to_levels": [[79, 92], ["torch.stack", "level_targets.append", "target[].squeeze"], "function", ["None"], ["", "def", "images_to_levels", "(", "target", ",", "num_level_anchors", ")", ":", "\n", "    ", "\"\"\"Convert targets by image to targets by feature level.\n\n    [target_img0, target_img1] -> [target_level0, target_level1, ...]\n    \"\"\"", "\n", "target", "=", "torch", ".", "stack", "(", "target", ",", "0", ")", "\n", "level_targets", "=", "[", "]", "\n", "start", "=", "0", "\n", "for", "n", "in", "num_level_anchors", ":", "\n", "        ", "end", "=", "start", "+", "n", "\n", "level_targets", ".", "append", "(", "target", "[", ":", ",", "start", ":", "end", "]", ".", "squeeze", "(", "0", ")", ")", "\n", "start", "=", "end", "\n", "", "return", "level_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_target.anchor_target_single": [[94, 160], ["anchor_target.anchor_inside_flags", "torch.zeros_like", "torch.zeros_like", "anchors.new_zeros", "anchors.new_zeros", "anchor_inside_flags.any", "bbox.assign_and_sample", "bbox.build_assigner", "bbox.build_assigner.assign", "bbox.PseudoSampler", "bbox.PseudoSampler.sample", "len", "bbox.bbox2delta", "len", "flat_anchors.size", "anchor_target.unmap", "anchor_target.unmap", "anchor_target.unmap", "anchor_target.unmap", "anchor_inside_flags.type"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_target.anchor_inside_flags", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.assign_and_sample", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2delta", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.unmap", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.unmap", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.unmap", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.unmap"], ["", "def", "anchor_target_single", "(", "flat_anchors", ",", "\n", "valid_flags", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", ",", "\n", "gt_labels", ",", "\n", "img_meta", ",", "\n", "target_means", ",", "\n", "target_stds", ",", "\n", "cfg", ",", "\n", "label_channels", "=", "1", ",", "\n", "sampling", "=", "True", ",", "\n", "unmap_outputs", "=", "True", ")", ":", "\n", "    ", "inside_flags", "=", "anchor_inside_flags", "(", "flat_anchors", ",", "valid_flags", ",", "\n", "img_meta", "[", "'img_shape'", "]", "[", ":", "2", "]", ",", "\n", "cfg", ".", "allowed_border", ")", "\n", "if", "not", "inside_flags", ".", "any", "(", ")", ":", "\n", "        ", "return", "(", "None", ",", ")", "*", "6", "\n", "# assign gt and sample anchors", "\n", "", "anchors", "=", "flat_anchors", "[", "inside_flags", ".", "type", "(", "torch", ".", "bool", ")", ",", ":", "]", "\n", "\n", "if", "sampling", ":", "\n", "        ", "assign_result", ",", "sampling_result", "=", "assign_and_sample", "(", "\n", "anchors", ",", "gt_bboxes", ",", "gt_bboxes_ignore", ",", "None", ",", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "bbox_assigner", "=", "build_assigner", "(", "cfg", ".", "assigner", ")", "\n", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "anchors", ",", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", ",", "gt_labels", ")", "\n", "bbox_sampler", "=", "PseudoSampler", "(", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "assign_result", ",", "anchors", ",", "\n", "gt_bboxes", ")", "\n", "\n", "", "num_valid_anchors", "=", "anchors", ".", "shape", "[", "0", "]", "\n", "bbox_targets", "=", "torch", ".", "zeros_like", "(", "anchors", ")", "\n", "bbox_weights", "=", "torch", ".", "zeros_like", "(", "anchors", ")", "\n", "labels", "=", "anchors", ".", "new_zeros", "(", "num_valid_anchors", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "label_weights", "=", "anchors", ".", "new_zeros", "(", "num_valid_anchors", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "pos_inds", "=", "sampling_result", ".", "pos_inds", "\n", "neg_inds", "=", "sampling_result", ".", "neg_inds", "\n", "if", "len", "(", "pos_inds", ")", ">", "0", ":", "\n", "        ", "pos_bbox_targets", "=", "bbox2delta", "(", "sampling_result", ".", "pos_bboxes", ",", "\n", "sampling_result", ".", "pos_gt_bboxes", ",", "\n", "target_means", ",", "target_stds", ")", "\n", "bbox_targets", "[", "pos_inds", ",", ":", "]", "=", "pos_bbox_targets", "\n", "bbox_weights", "[", "pos_inds", ",", ":", "]", "=", "1.0", "\n", "if", "gt_labels", "is", "None", ":", "\n", "            ", "labels", "[", "pos_inds", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "labels", "[", "pos_inds", "]", "=", "gt_labels", "[", "sampling_result", ".", "pos_assigned_gt_inds", "]", "\n", "", "if", "cfg", ".", "pos_weight", "<=", "0", ":", "\n", "            ", "label_weights", "[", "pos_inds", "]", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "label_weights", "[", "pos_inds", "]", "=", "cfg", ".", "pos_weight", "\n", "", "", "if", "len", "(", "neg_inds", ")", ">", "0", ":", "\n", "        ", "label_weights", "[", "neg_inds", "]", "=", "1.0", "\n", "\n", "# map up to original set of anchors", "\n", "", "if", "unmap_outputs", ":", "\n", "        ", "num_total_anchors", "=", "flat_anchors", ".", "size", "(", "0", ")", "\n", "labels", "=", "unmap", "(", "labels", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "label_weights", "=", "unmap", "(", "label_weights", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "bbox_targets", "=", "unmap", "(", "bbox_targets", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "bbox_weights", "=", "unmap", "(", "bbox_weights", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "\n", "", "return", "(", "labels", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", ",", "pos_inds", ",", "\n", "neg_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_target.anchor_inside_flags": [[162, 176], ["torch.bool"], "function", ["None"], ["", "def", "anchor_inside_flags", "(", "flat_anchors", ",", "\n", "valid_flags", ",", "\n", "img_shape", ",", "\n", "allowed_border", "=", "0", ")", ":", "\n", "    ", "img_h", ",", "img_w", "=", "img_shape", "[", ":", "2", "]", "\n", "if", "allowed_border", ">=", "0", ":", "\n", "        ", "inside_flags", "=", "valid_flags", "&", "(", "flat_anchors", "[", ":", ",", "0", "]", ">=", "-", "allowed_border", ")", ".", "type", "(", "torch", ".", "uint8", ")", "&", "(", "flat_anchors", "[", ":", ",", "1", "]", ">=", "-", "allowed_border", ")", ".", "type", "(", "torch", ".", "uint8", ")", "&", "(", "flat_anchors", "[", ":", ",", "2", "]", "<", "img_w", "+", "allowed_border", ")", ".", "type", "(", "torch", ".", "uint8", ")", "&", "(", "flat_anchors", "[", ":", ",", "3", "]", "<", "img_h", "+", "allowed_border", ")", ".", "type", "(", "torch", ".", "uint8", ")", "\n", "", "else", ":", "\n", "        ", "inside_flags", "=", "valid_flags", "\n", "", "return", "inside_flags", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.anchor_target.unmap": [[178, 189], ["data.dim", "data.new_full", "data.new_full", "inds.type", "data.size", "inds.type"], "function", ["None"], ["", "def", "unmap", "(", "data", ",", "count", ",", "inds", ",", "fill", "=", "0", ")", ":", "\n", "    ", "\"\"\" Unmap a subset of item (data) back to the original set of items (of\n    size count) \"\"\"", "\n", "if", "data", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "ret", "=", "data", ".", "new_full", "(", "(", "count", ",", ")", ",", "fill", ")", "\n", "ret", "[", "inds", ".", "type", "(", "torch", ".", "bool", ")", "]", "=", "data", "\n", "", "else", ":", "\n", "        ", "new_size", "=", "(", "count", ",", ")", "+", "data", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "ret", "=", "data", ".", "new_full", "(", "new_size", ",", "fill", ")", "\n", "ret", "[", "inds", ".", "type", "(", "torch", ".", "bool", ")", ",", ":", "]", "=", "data", "\n", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.guided_anchor_target.calc_region": [[7, 30], ["torch.round().long", "torch.round().long", "torch.round().long", "torch.round().long", "x1.clamp.clamp", "y1.clamp.clamp", "x2.clamp.clamp", "y2.clamp.clamp", "torch.round", "torch.round", "torch.round", "torch.round"], "function", ["None"], ["def", "calc_region", "(", "bbox", ",", "ratio", ",", "featmap_size", "=", "None", ")", ":", "\n", "    ", "\"\"\"Calculate a proportional bbox region.\n\n    The bbox center are fixed and the new h' and w' is h * ratio and w * ratio.\n\n    Args:\n        bbox (Tensor): Bboxes to calculate regions, shape (n, 4)\n        ratio (float): Ratio of the output region.\n        featmap_size (tuple): Feature map size used for clipping the boundary.\n\n    Returns:\n        tuple: x1, y1, x2, y2\n    \"\"\"", "\n", "x1", "=", "torch", ".", "round", "(", "(", "1", "-", "ratio", ")", "*", "bbox", "[", "0", "]", "+", "ratio", "*", "bbox", "[", "2", "]", ")", ".", "long", "(", ")", "\n", "y1", "=", "torch", ".", "round", "(", "(", "1", "-", "ratio", ")", "*", "bbox", "[", "1", "]", "+", "ratio", "*", "bbox", "[", "3", "]", ")", ".", "long", "(", ")", "\n", "x2", "=", "torch", ".", "round", "(", "ratio", "*", "bbox", "[", "0", "]", "+", "(", "1", "-", "ratio", ")", "*", "bbox", "[", "2", "]", ")", ".", "long", "(", ")", "\n", "y2", "=", "torch", ".", "round", "(", "ratio", "*", "bbox", "[", "1", "]", "+", "(", "1", "-", "ratio", ")", "*", "bbox", "[", "3", "]", ")", ".", "long", "(", ")", "\n", "if", "featmap_size", "is", "not", "None", ":", "\n", "        ", "x1", "=", "x1", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "featmap_size", "[", "1", "]", "-", "1", ")", "\n", "y1", "=", "y1", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "featmap_size", "[", "0", "]", "-", "1", ")", "\n", "x2", "=", "x2", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "featmap_size", "[", "1", "]", "-", "1", ")", "\n", "y2", "=", "y2", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "featmap_size", "[", "0", "]", "-", "1", ")", "\n", "", "return", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.guided_anchor_target.ga_loc_target": [[32, 131], ["len", "len", "range", "range", "range", "torch.zeros", "torch.full_like", "torch.zeros_like", "all_loc_targets.append", "all_loc_weights.append", "all_ignore_map.append", "torch.sqrt", "torch.sqrt.new_full", "torch.floor", "target_lvls.clamp().long.clamp().long", "range", "sum", "float", "gt_bboxes.size", "target_lvls[].item", "guided_anchor_target.calc_region", "guided_anchor_target.calc_region", "target_lvls.clamp().long.clamp", "guided_anchor_target.calc_region", "guided_anchor_target.calc_region", "torch.log2", "torch.log2", "t.size", "t.size", "t.size"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.guided_anchor_target.calc_region", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.guided_anchor_target.calc_region", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.guided_anchor_target.calc_region", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.guided_anchor_target.calc_region"], ["", "def", "ga_loc_target", "(", "gt_bboxes_list", ",", "\n", "featmap_sizes", ",", "\n", "anchor_scale", ",", "\n", "anchor_strides", ",", "\n", "center_ratio", "=", "0.2", ",", "\n", "ignore_ratio", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"Compute location targets for guided anchoring.\n\n    Each feature map is divided into positive, negative and ignore regions.\n    - positive regions: target 1, weight 1\n    - ignore regions: target 0, weight 0\n    - negative regions: target 0, weight 0.1\n\n    Args:\n        gt_bboxes_list (list[Tensor]): Gt bboxes of each image.\n        featmap_sizes (list[tuple]): Multi level sizes of each feature maps.\n        anchor_scale (int): Anchor scale.\n        anchor_strides ([list[int]]): Multi level anchor strides.\n        center_ratio (float): Ratio of center region.\n        ignore_ratio (float): Ratio of ignore region.\n\n    Returns:\n        tuple\n    \"\"\"", "\n", "img_per_gpu", "=", "len", "(", "gt_bboxes_list", ")", "\n", "num_lvls", "=", "len", "(", "featmap_sizes", ")", "\n", "r1", "=", "(", "1", "-", "center_ratio", ")", "/", "2", "\n", "r2", "=", "(", "1", "-", "ignore_ratio", ")", "/", "2", "\n", "all_loc_targets", "=", "[", "]", "\n", "all_loc_weights", "=", "[", "]", "\n", "all_ignore_map", "=", "[", "]", "\n", "for", "lvl_id", "in", "range", "(", "num_lvls", ")", ":", "\n", "        ", "h", ",", "w", "=", "featmap_sizes", "[", "lvl_id", "]", "\n", "loc_targets", "=", "torch", ".", "zeros", "(", "\n", "img_per_gpu", ",", "\n", "1", ",", "\n", "h", ",", "\n", "w", ",", "\n", "device", "=", "gt_bboxes_list", "[", "0", "]", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", "\n", "loc_weights", "=", "torch", ".", "full_like", "(", "loc_targets", ",", "-", "1", ")", "\n", "ignore_map", "=", "torch", ".", "zeros_like", "(", "loc_targets", ")", "\n", "all_loc_targets", ".", "append", "(", "loc_targets", ")", "\n", "all_loc_weights", ".", "append", "(", "loc_weights", ")", "\n", "all_ignore_map", ".", "append", "(", "ignore_map", ")", "\n", "", "for", "img_id", "in", "range", "(", "img_per_gpu", ")", ":", "\n", "        ", "gt_bboxes", "=", "gt_bboxes_list", "[", "img_id", "]", "\n", "scale", "=", "torch", ".", "sqrt", "(", "(", "gt_bboxes", "[", ":", ",", "2", "]", "-", "gt_bboxes", "[", ":", ",", "0", "]", "+", "1", ")", "*", "\n", "(", "gt_bboxes", "[", ":", ",", "3", "]", "-", "gt_bboxes", "[", ":", ",", "1", "]", "+", "1", ")", ")", "\n", "min_anchor_size", "=", "scale", ".", "new_full", "(", "\n", "(", "1", ",", ")", ",", "float", "(", "anchor_scale", "*", "anchor_strides", "[", "0", "]", ")", ")", "\n", "# assign gt bboxes to different feature levels w.r.t. their scales", "\n", "target_lvls", "=", "torch", ".", "floor", "(", "\n", "torch", ".", "log2", "(", "scale", ")", "-", "torch", ".", "log2", "(", "min_anchor_size", ")", "+", "0.5", ")", "\n", "target_lvls", "=", "target_lvls", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "num_lvls", "-", "1", ")", ".", "long", "(", ")", "\n", "for", "gt_id", "in", "range", "(", "gt_bboxes", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "lvl", "=", "target_lvls", "[", "gt_id", "]", ".", "item", "(", ")", "\n", "# rescaled to corresponding feature map", "\n", "gt_", "=", "gt_bboxes", "[", "gt_id", ",", ":", "4", "]", "/", "anchor_strides", "[", "lvl", "]", "\n", "# calculate ignore regions", "\n", "ignore_x1", ",", "ignore_y1", ",", "ignore_x2", ",", "ignore_y2", "=", "calc_region", "(", "\n", "gt_", ",", "r2", ",", "featmap_sizes", "[", "lvl", "]", ")", "\n", "# calculate positive (center) regions", "\n", "ctr_x1", ",", "ctr_y1", ",", "ctr_x2", ",", "ctr_y2", "=", "calc_region", "(", "\n", "gt_", ",", "r1", ",", "featmap_sizes", "[", "lvl", "]", ")", "\n", "all_loc_targets", "[", "lvl", "]", "[", "img_id", ",", "0", ",", "ctr_y1", ":", "ctr_y2", "+", "1", ",", "\n", "ctr_x1", ":", "ctr_x2", "+", "1", "]", "=", "1", "\n", "all_loc_weights", "[", "lvl", "]", "[", "img_id", ",", "0", ",", "ignore_y1", ":", "ignore_y2", "+", "1", ",", "\n", "ignore_x1", ":", "ignore_x2", "+", "1", "]", "=", "0", "\n", "all_loc_weights", "[", "lvl", "]", "[", "img_id", ",", "0", ",", "ctr_y1", ":", "ctr_y2", "+", "1", ",", "\n", "ctr_x1", ":", "ctr_x2", "+", "1", "]", "=", "1", "\n", "# calculate ignore map on nearby low level feature", "\n", "if", "lvl", ">", "0", ":", "\n", "                ", "d_lvl", "=", "lvl", "-", "1", "\n", "# rescaled to corresponding feature map", "\n", "gt_", "=", "gt_bboxes", "[", "gt_id", ",", ":", "4", "]", "/", "anchor_strides", "[", "d_lvl", "]", "\n", "ignore_x1", ",", "ignore_y1", ",", "ignore_x2", ",", "ignore_y2", "=", "calc_region", "(", "\n", "gt_", ",", "r2", ",", "featmap_sizes", "[", "d_lvl", "]", ")", "\n", "all_ignore_map", "[", "d_lvl", "]", "[", "img_id", ",", "0", ",", "ignore_y1", ":", "ignore_y2", "+", "1", ",", "\n", "ignore_x1", ":", "ignore_x2", "+", "1", "]", "=", "1", "\n", "# calculate ignore map on nearby high level feature", "\n", "", "if", "lvl", "<", "num_lvls", "-", "1", ":", "\n", "                ", "u_lvl", "=", "lvl", "+", "1", "\n", "# rescaled to corresponding feature map", "\n", "gt_", "=", "gt_bboxes", "[", "gt_id", ",", ":", "4", "]", "/", "anchor_strides", "[", "u_lvl", "]", "\n", "ignore_x1", ",", "ignore_y1", ",", "ignore_x2", ",", "ignore_y2", "=", "calc_region", "(", "\n", "gt_", ",", "r2", ",", "featmap_sizes", "[", "u_lvl", "]", ")", "\n", "all_ignore_map", "[", "u_lvl", "]", "[", "img_id", ",", "0", ",", "ignore_y1", ":", "ignore_y2", "+", "1", ",", "\n", "ignore_x1", ":", "ignore_x2", "+", "1", "]", "=", "1", "\n", "", "", "", "for", "lvl_id", "in", "range", "(", "num_lvls", ")", ":", "\n", "# ignore negative regions w.r.t. ignore map", "\n", "        ", "all_loc_weights", "[", "lvl_id", "]", "[", "(", "all_loc_weights", "[", "lvl_id", "]", "<", "0", ")", "\n", "&", "(", "all_ignore_map", "[", "lvl_id", "]", ">", "0", ")", "]", "=", "0", "\n", "# set negative regions with weight 0.1", "\n", "all_loc_weights", "[", "lvl_id", "]", "[", "all_loc_weights", "[", "lvl_id", "]", "<", "0", "]", "=", "0.1", "\n", "# loc average factor to balance loss", "\n", "", "loc_avg_factor", "=", "sum", "(", "\n", "[", "t", ".", "size", "(", "0", ")", "*", "t", ".", "size", "(", "-", "1", ")", "*", "t", ".", "size", "(", "-", "2", ")", "for", "t", "in", "all_loc_targets", "]", ")", "/", "200", "\n", "return", "all_loc_targets", ",", "all_loc_weights", ",", "loc_avg_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.guided_anchor_target.ga_shape_target": [[133, 203], ["len", "range", "utils.multi_apply", "any", "sum", "sum", "guided_anchor_target.images_to_levels", "guided_anchor_target.images_to_levels", "guided_anchor_target.images_to_levels", "len", "len", "len", "squares.size", "inside_flag_flat_list.append", "approx_flat_list.append", "square_flat_list.append", "len", "len", "torch.cat", "torch.cat", "torch.cat", "max", "max", "range", "inds.numel", "inds.numel"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.multi_apply", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.images_to_levels", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.images_to_levels", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.images_to_levels"], ["", "def", "ga_shape_target", "(", "approx_list", ",", "\n", "inside_flag_list", ",", "\n", "square_list", ",", "\n", "gt_bboxes_list", ",", "\n", "img_metas", ",", "\n", "approxs_per_octave", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore_list", "=", "None", ",", "\n", "sampling", "=", "True", ",", "\n", "unmap_outputs", "=", "True", ")", ":", "\n", "    ", "\"\"\"Compute guided anchoring targets.\n\n    Args:\n        approx_list (list[list]): Multi level approxs of each image.\n        inside_flag_list (list[list]): Multi level inside flags of each image.\n        square_list (list[list]): Multi level squares of each image.\n        gt_bboxes_list (list[Tensor]): Ground truth bboxes of each image.\n        img_metas (list[dict]): Meta info of each image.\n        approxs_per_octave (int): number of approxs per octave\n        cfg (dict): RPN train configs.\n        gt_bboxes_ignore_list (list[Tensor]): ignore list of gt bboxes.\n        sampling (bool): sampling or not.\n        unmap_outputs (bool): unmap outputs or not.\n\n    Returns:\n        tuple\n    \"\"\"", "\n", "num_imgs", "=", "len", "(", "img_metas", ")", "\n", "assert", "len", "(", "approx_list", ")", "==", "len", "(", "inside_flag_list", ")", "==", "len", "(", "\n", "square_list", ")", "==", "num_imgs", "\n", "# anchor number of multi levels", "\n", "num_level_squares", "=", "[", "squares", ".", "size", "(", "0", ")", "for", "squares", "in", "square_list", "[", "0", "]", "]", "\n", "# concat all level anchors and flags to a single tensor", "\n", "inside_flag_flat_list", "=", "[", "]", "\n", "approx_flat_list", "=", "[", "]", "\n", "square_flat_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "        ", "assert", "len", "(", "square_list", "[", "i", "]", ")", "==", "len", "(", "inside_flag_list", "[", "i", "]", ")", "\n", "inside_flag_flat_list", ".", "append", "(", "torch", ".", "cat", "(", "inside_flag_list", "[", "i", "]", ")", ")", "\n", "approx_flat_list", ".", "append", "(", "torch", ".", "cat", "(", "approx_list", "[", "i", "]", ")", ")", "\n", "square_flat_list", ".", "append", "(", "torch", ".", "cat", "(", "square_list", "[", "i", "]", ")", ")", "\n", "\n", "# compute targets for each image", "\n", "", "if", "gt_bboxes_ignore_list", "is", "None", ":", "\n", "        ", "gt_bboxes_ignore_list", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "", "(", "all_bbox_anchors", ",", "all_bbox_gts", ",", "all_bbox_weights", ",", "pos_inds_list", ",", "\n", "neg_inds_list", ")", "=", "multi_apply", "(", "\n", "ga_shape_target_single", ",", "\n", "approx_flat_list", ",", "\n", "inside_flag_flat_list", ",", "\n", "square_flat_list", ",", "\n", "gt_bboxes_list", ",", "\n", "gt_bboxes_ignore_list", ",", "\n", "img_metas", ",", "\n", "approxs_per_octave", "=", "approxs_per_octave", ",", "\n", "cfg", "=", "cfg", ",", "\n", "sampling", "=", "sampling", ",", "\n", "unmap_outputs", "=", "unmap_outputs", ")", "\n", "# no valid anchors", "\n", "if", "any", "(", "[", "bbox_anchors", "is", "None", "for", "bbox_anchors", "in", "all_bbox_anchors", "]", ")", ":", "\n", "        ", "return", "None", "\n", "# sampled anchors of all images", "\n", "", "num_total_pos", "=", "sum", "(", "[", "max", "(", "inds", ".", "numel", "(", ")", ",", "1", ")", "for", "inds", "in", "pos_inds_list", "]", ")", "\n", "num_total_neg", "=", "sum", "(", "[", "max", "(", "inds", ".", "numel", "(", ")", ",", "1", ")", "for", "inds", "in", "neg_inds_list", "]", ")", "\n", "# split targets to a list w.r.t. multiple levels", "\n", "bbox_anchors_list", "=", "images_to_levels", "(", "all_bbox_anchors", ",", "num_level_squares", ")", "\n", "bbox_gts_list", "=", "images_to_levels", "(", "all_bbox_gts", ",", "num_level_squares", ")", "\n", "bbox_weights_list", "=", "images_to_levels", "(", "all_bbox_weights", ",", "num_level_squares", ")", "\n", "return", "(", "bbox_anchors_list", ",", "bbox_gts_list", ",", "bbox_weights_list", ",", "num_total_pos", ",", "\n", "num_total_neg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.guided_anchor_target.images_to_levels": [[205, 218], ["torch.stack", "level_targets.append", "target[].squeeze"], "function", ["None"], ["", "def", "images_to_levels", "(", "target", ",", "num_level_anchors", ")", ":", "\n", "    ", "\"\"\"Convert targets by image to targets by feature level.\n\n    [target_img0, target_img1] -> [target_level0, target_level1, ...]\n    \"\"\"", "\n", "target", "=", "torch", ".", "stack", "(", "target", ",", "0", ")", "\n", "level_targets", "=", "[", "]", "\n", "start", "=", "0", "\n", "for", "n", "in", "num_level_anchors", ":", "\n", "        ", "end", "=", "start", "+", "n", "\n", "level_targets", ".", "append", "(", "target", "[", ":", ",", "start", ":", "end", "]", ".", "squeeze", "(", "0", ")", ")", "\n", "start", "=", "end", "\n", "", "return", "level_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.guided_anchor_target.ga_shape_target_single": [[220, 288], ["inside_flags[].expand().reshape", "bbox.build_assigner", "bbox.build_assigner.assign", "bbox.PseudoSampler.sample", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "inside_flags.any", "bbox.build_sampler", "bbox.PseudoSampler", "len", "flat_squares.size", "utils.unmap", "utils.unmap", "utils.unmap", "inside_flags[].expand"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_sampler", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.unmap", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.unmap", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.unmap"], ["", "def", "ga_shape_target_single", "(", "flat_approxs", ",", "\n", "inside_flags", ",", "\n", "flat_squares", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", ",", "\n", "img_meta", ",", "\n", "approxs_per_octave", ",", "\n", "cfg", ",", "\n", "sampling", "=", "True", ",", "\n", "unmap_outputs", "=", "True", ")", ":", "\n", "    ", "\"\"\"Compute guided anchoring targets.\n\n    This function returns sampled anchors and gt bboxes directly\n    rather than calculates regression targets.\n\n    Args:\n        flat_approxs (Tensor): flat approxs of a single image,\n            shape (n, 4)\n        inside_flags (Tensor): inside flags of a single image,\n            shape (n, ).\n        flat_squares (Tensor): flat squares of a single image,\n            shape (approxs_per_octave * n, 4)\n        gt_bboxes (Tensor): Ground truth bboxes of a single image.\n        img_meta (dict): Meta info of a single image.\n        approxs_per_octave (int): number of approxs per octave\n        cfg (dict): RPN train configs.\n        sampling (bool): sampling or not.\n        unmap_outputs (bool): unmap outputs or not.\n\n    Returns:\n        tuple\n    \"\"\"", "\n", "if", "not", "inside_flags", ".", "any", "(", ")", ":", "\n", "        ", "return", "(", "None", ",", ")", "*", "5", "\n", "# assign gt and sample anchors", "\n", "", "expand_inside_flags", "=", "inside_flags", "[", ":", ",", "None", "]", ".", "expand", "(", "\n", "-", "1", ",", "approxs_per_octave", ")", ".", "reshape", "(", "-", "1", ")", "\n", "approxs", "=", "flat_approxs", "[", "expand_inside_flags", ",", ":", "]", "\n", "squares", "=", "flat_squares", "[", "inside_flags", ",", ":", "]", "\n", "\n", "bbox_assigner", "=", "build_assigner", "(", "cfg", ".", "ga_assigner", ")", "\n", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "approxs", ",", "squares", ",", "approxs_per_octave", ",", "\n", "gt_bboxes", ",", "gt_bboxes_ignore", ")", "\n", "if", "sampling", ":", "\n", "        ", "bbox_sampler", "=", "build_sampler", "(", "cfg", ".", "ga_sampler", ")", "\n", "", "else", ":", "\n", "        ", "bbox_sampler", "=", "PseudoSampler", "(", ")", "\n", "", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "assign_result", ",", "squares", ",", "gt_bboxes", ")", "\n", "\n", "bbox_anchors", "=", "torch", ".", "zeros_like", "(", "squares", ")", "\n", "bbox_gts", "=", "torch", ".", "zeros_like", "(", "squares", ")", "\n", "bbox_weights", "=", "torch", ".", "zeros_like", "(", "squares", ")", "\n", "\n", "pos_inds", "=", "sampling_result", ".", "pos_inds", "\n", "neg_inds", "=", "sampling_result", ".", "neg_inds", "\n", "if", "len", "(", "pos_inds", ")", ">", "0", ":", "\n", "        ", "bbox_anchors", "[", "pos_inds", ",", ":", "]", "=", "sampling_result", ".", "pos_bboxes", "\n", "bbox_gts", "[", "pos_inds", ",", ":", "]", "=", "sampling_result", ".", "pos_gt_bboxes", "\n", "bbox_weights", "[", "pos_inds", ",", ":", "]", "=", "1.0", "\n", "\n", "# map up to original set of anchors", "\n", "", "if", "unmap_outputs", ":", "\n", "        ", "num_total_anchors", "=", "flat_squares", ".", "size", "(", "0", ")", "\n", "bbox_anchors", "=", "unmap", "(", "bbox_anchors", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "bbox_gts", "=", "unmap", "(", "bbox_gts", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "bbox_weights", "=", "unmap", "(", "bbox_weights", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "\n", "", "return", "(", "bbox_anchors", ",", "bbox_gts", ",", "bbox_weights", ",", "pos_inds", ",", "neg_inds", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_generator.PointGenerator._meshgrid": [[6, 13], ["x.repeat", "y.view().repeat().view", "len", "y.view().repeat", "len", "y.view"], "methods", ["None"], ["    ", "def", "_meshgrid", "(", "self", ",", "x", ",", "y", ",", "row_major", "=", "True", ")", ":", "\n", "        ", "xx", "=", "x", ".", "repeat", "(", "len", "(", "y", ")", ")", "\n", "yy", "=", "y", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "len", "(", "x", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "row_major", ":", "\n", "            ", "return", "xx", ",", "yy", "\n", "", "else", ":", "\n", "            ", "return", "yy", ",", "xx", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_generator.PointGenerator.grid_points": [[14, 23], ["point_generator.PointGenerator._meshgrid", "shift_x.new_full", "torch.stack", "torch.stack.to", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_generator.PointGenerator._meshgrid", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to"], ["", "", "def", "grid_points", "(", "self", ",", "featmap_size", ",", "stride", "=", "16", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "feat_h", ",", "feat_w", "=", "featmap_size", "\n", "shift_x", "=", "torch", ".", "arange", "(", "0.", ",", "feat_w", ",", "device", "=", "device", ")", "*", "stride", "\n", "shift_y", "=", "torch", ".", "arange", "(", "0.", ",", "feat_h", ",", "device", "=", "device", ")", "*", "stride", "\n", "shift_xx", ",", "shift_yy", "=", "self", ".", "_meshgrid", "(", "shift_x", ",", "shift_y", ")", "\n", "stride", "=", "shift_x", ".", "new_full", "(", "(", "shift_xx", ".", "shape", "[", "0", "]", ",", ")", ",", "stride", ")", "\n", "shifts", "=", "torch", ".", "stack", "(", "[", "shift_xx", ",", "shift_yy", ",", "stride", "]", ",", "dim", "=", "-", "1", ")", "\n", "all_points", "=", "shifts", ".", "to", "(", "device", ")", "\n", "return", "all_points", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_generator.PointGenerator.valid_flags": [[24, 35], ["torch.zeros", "torch.zeros", "point_generator.PointGenerator._meshgrid"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_generator.PointGenerator._meshgrid"], ["", "def", "valid_flags", "(", "self", ",", "featmap_size", ",", "valid_size", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "feat_h", ",", "feat_w", "=", "featmap_size", "\n", "valid_h", ",", "valid_w", "=", "valid_size", "\n", "assert", "valid_h", "<=", "feat_h", "and", "valid_w", "<=", "feat_w", "\n", "valid_x", "=", "torch", ".", "zeros", "(", "feat_w", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "device", ")", "\n", "valid_y", "=", "torch", ".", "zeros", "(", "feat_h", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "device", ")", "\n", "valid_x", "[", ":", "valid_w", "]", "=", "1", "\n", "valid_y", "[", ":", "valid_h", "]", "=", "1", "\n", "valid_xx", ",", "valid_yy", "=", "self", ".", "_meshgrid", "(", "valid_x", ",", "valid_y", ")", "\n", "valid", "=", "valid_xx", "&", "valid_yy", "\n", "return", "valid", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.point_target": [[7, 73], ["len", "range", "utils.multi_apply", "any", "sum", "sum", "point_target.images_to_levels", "point_target.images_to_levels", "point_target.images_to_levels", "point_target.images_to_levels", "point_target.images_to_levels", "len", "len", "points.size", "torch.cat", "torch.cat", "len", "len", "max", "max", "range", "range", "inds.numel", "inds.numel"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.multi_apply", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.images_to_levels", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.images_to_levels", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.images_to_levels", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.images_to_levels", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.images_to_levels"], ["def", "point_target", "(", "proposals_list", ",", "\n", "valid_flag_list", ",", "\n", "gt_bboxes_list", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "gt_bboxes_ignore_list", "=", "None", ",", "\n", "gt_labels_list", "=", "None", ",", "\n", "label_channels", "=", "1", ",", "\n", "sampling", "=", "True", ",", "\n", "unmap_outputs", "=", "True", ")", ":", "\n", "    ", "\"\"\"Compute corresponding GT box and classification targets for proposals.\n\n    Args:\n        points_list (list[list]): Multi level points of each image.\n        valid_flag_list (list[list]): Multi level valid flags of each image.\n        gt_bboxes_list (list[Tensor]): Ground truth bboxes of each image.\n        img_metas (list[dict]): Meta info of each image.\n        cfg (dict): train sample configs.\n\n    Returns:\n        tuple\n    \"\"\"", "\n", "num_imgs", "=", "len", "(", "img_metas", ")", "\n", "assert", "len", "(", "proposals_list", ")", "==", "len", "(", "valid_flag_list", ")", "==", "num_imgs", "\n", "\n", "# points number of multi levels", "\n", "num_level_proposals", "=", "[", "points", ".", "size", "(", "0", ")", "for", "points", "in", "proposals_list", "[", "0", "]", "]", "\n", "\n", "# concat all level points and flags to a single tensor", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "        ", "assert", "len", "(", "proposals_list", "[", "i", "]", ")", "==", "len", "(", "valid_flag_list", "[", "i", "]", ")", "\n", "proposals_list", "[", "i", "]", "=", "torch", ".", "cat", "(", "proposals_list", "[", "i", "]", ")", "\n", "valid_flag_list", "[", "i", "]", "=", "torch", ".", "cat", "(", "valid_flag_list", "[", "i", "]", ")", "\n", "\n", "# compute targets for each image", "\n", "", "if", "gt_bboxes_ignore_list", "is", "None", ":", "\n", "        ", "gt_bboxes_ignore_list", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "", "if", "gt_labels_list", "is", "None", ":", "\n", "        ", "gt_labels_list", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "", "(", "all_labels", ",", "all_label_weights", ",", "all_bbox_gt", ",", "all_proposals", ",", "\n", "all_proposal_weights", ",", "pos_inds_list", ",", "neg_inds_list", ")", "=", "multi_apply", "(", "\n", "point_target_single", ",", "\n", "proposals_list", ",", "\n", "valid_flag_list", ",", "\n", "gt_bboxes_list", ",", "\n", "gt_bboxes_ignore_list", ",", "\n", "gt_labels_list", ",", "\n", "cfg", "=", "cfg", ",", "\n", "label_channels", "=", "label_channels", ",", "\n", "sampling", "=", "sampling", ",", "\n", "unmap_outputs", "=", "unmap_outputs", ")", "\n", "# no valid points", "\n", "if", "any", "(", "[", "labels", "is", "None", "for", "labels", "in", "all_labels", "]", ")", ":", "\n", "        ", "return", "None", "\n", "# sampled points of all images", "\n", "", "num_total_pos", "=", "sum", "(", "[", "max", "(", "inds", ".", "numel", "(", ")", ",", "1", ")", "for", "inds", "in", "pos_inds_list", "]", ")", "\n", "num_total_neg", "=", "sum", "(", "[", "max", "(", "inds", ".", "numel", "(", ")", ",", "1", ")", "for", "inds", "in", "neg_inds_list", "]", ")", "\n", "labels_list", "=", "images_to_levels", "(", "all_labels", ",", "num_level_proposals", ")", "\n", "label_weights_list", "=", "images_to_levels", "(", "all_label_weights", ",", "\n", "num_level_proposals", ")", "\n", "bbox_gt_list", "=", "images_to_levels", "(", "all_bbox_gt", ",", "num_level_proposals", ")", "\n", "proposals_list", "=", "images_to_levels", "(", "all_proposals", ",", "num_level_proposals", ")", "\n", "proposal_weights_list", "=", "images_to_levels", "(", "all_proposal_weights", ",", "\n", "num_level_proposals", ")", "\n", "return", "(", "labels_list", ",", "label_weights_list", ",", "bbox_gt_list", ",", "proposals_list", ",", "\n", "proposal_weights_list", ",", "num_total_pos", ",", "num_total_neg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.images_to_levels": [[75, 88], ["torch.stack", "level_targets.append", "target[].squeeze"], "function", ["None"], ["", "def", "images_to_levels", "(", "target", ",", "num_level_grids", ")", ":", "\n", "    ", "\"\"\"Convert targets by image to targets by feature level.\n\n    [target_img0, target_img1] -> [target_level0, target_level1, ...]\n    \"\"\"", "\n", "target", "=", "torch", ".", "stack", "(", "target", ",", "0", ")", "\n", "level_targets", "=", "[", "]", "\n", "start", "=", "0", "\n", "for", "n", "in", "num_level_grids", ":", "\n", "        ", "end", "=", "start", "+", "n", "\n", "level_targets", ".", "append", "(", "target", "[", ":", ",", "start", ":", "end", "]", ".", "squeeze", "(", "0", ")", ")", "\n", "start", "=", "end", "\n", "", "return", "level_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.point_target_single": [[90, 153], ["proposals.new_zeros", "torch.zeros_like", "proposals.new_zeros", "proposals.new_zeros", "proposals.new_zeros", "inside_flags.any", "bbox.assign_and_sample", "bbox.build_assigner", "bbox.build_assigner.assign", "bbox.PseudoSampler", "bbox.PseudoSampler.sample", "len", "len", "flat_proposals.size", "point_target.unmap", "point_target.unmap", "point_target.unmap", "point_target.unmap", "point_target.unmap"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.assign_and_sample", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.unmap", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.unmap", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.unmap", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.unmap", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.unmap"], ["", "def", "point_target_single", "(", "flat_proposals", ",", "\n", "valid_flags", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", ",", "\n", "gt_labels", ",", "\n", "cfg", ",", "\n", "label_channels", "=", "1", ",", "\n", "sampling", "=", "True", ",", "\n", "unmap_outputs", "=", "True", ")", ":", "\n", "    ", "inside_flags", "=", "valid_flags", "\n", "if", "not", "inside_flags", ".", "any", "(", ")", ":", "\n", "        ", "return", "(", "None", ",", ")", "*", "7", "\n", "# assign gt and sample proposals", "\n", "", "proposals", "=", "flat_proposals", "[", "inside_flags", ",", ":", "]", "\n", "\n", "if", "sampling", ":", "\n", "        ", "assign_result", ",", "sampling_result", "=", "assign_and_sample", "(", "\n", "proposals", ",", "gt_bboxes", ",", "gt_bboxes_ignore", ",", "None", ",", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "bbox_assigner", "=", "build_assigner", "(", "cfg", ".", "assigner", ")", "\n", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "proposals", ",", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", ",", "gt_labels", ")", "\n", "bbox_sampler", "=", "PseudoSampler", "(", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "assign_result", ",", "proposals", ",", "\n", "gt_bboxes", ")", "\n", "\n", "", "num_valid_proposals", "=", "proposals", ".", "shape", "[", "0", "]", "\n", "bbox_gt", "=", "proposals", ".", "new_zeros", "(", "[", "num_valid_proposals", ",", "4", "]", ")", "\n", "pos_proposals", "=", "torch", ".", "zeros_like", "(", "proposals", ")", "\n", "proposals_weights", "=", "proposals", ".", "new_zeros", "(", "[", "num_valid_proposals", ",", "4", "]", ")", "\n", "labels", "=", "proposals", ".", "new_zeros", "(", "num_valid_proposals", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "label_weights", "=", "proposals", ".", "new_zeros", "(", "num_valid_proposals", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "pos_inds", "=", "sampling_result", ".", "pos_inds", "\n", "neg_inds", "=", "sampling_result", ".", "neg_inds", "\n", "if", "len", "(", "pos_inds", ")", ">", "0", ":", "\n", "        ", "pos_gt_bboxes", "=", "sampling_result", ".", "pos_gt_bboxes", "\n", "bbox_gt", "[", "pos_inds", ",", ":", "]", "=", "pos_gt_bboxes", "\n", "pos_proposals", "[", "pos_inds", ",", ":", "]", "=", "proposals", "[", "pos_inds", ",", ":", "]", "\n", "proposals_weights", "[", "pos_inds", ",", ":", "]", "=", "1.0", "\n", "if", "gt_labels", "is", "None", ":", "\n", "            ", "labels", "[", "pos_inds", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "labels", "[", "pos_inds", "]", "=", "gt_labels", "[", "sampling_result", ".", "pos_assigned_gt_inds", "]", "\n", "", "if", "cfg", ".", "pos_weight", "<=", "0", ":", "\n", "            ", "label_weights", "[", "pos_inds", "]", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "label_weights", "[", "pos_inds", "]", "=", "cfg", ".", "pos_weight", "\n", "", "", "if", "len", "(", "neg_inds", ")", ">", "0", ":", "\n", "        ", "label_weights", "[", "neg_inds", "]", "=", "1.0", "\n", "\n", "# map up to original set of proposals", "\n", "", "if", "unmap_outputs", ":", "\n", "        ", "num_total_proposals", "=", "flat_proposals", ".", "size", "(", "0", ")", "\n", "labels", "=", "unmap", "(", "labels", ",", "num_total_proposals", ",", "inside_flags", ")", "\n", "label_weights", "=", "unmap", "(", "label_weights", ",", "num_total_proposals", ",", "inside_flags", ")", "\n", "bbox_gt", "=", "unmap", "(", "bbox_gt", ",", "num_total_proposals", ",", "inside_flags", ")", "\n", "pos_proposals", "=", "unmap", "(", "pos_proposals", ",", "num_total_proposals", ",", "inside_flags", ")", "\n", "proposals_weights", "=", "unmap", "(", "proposals_weights", ",", "num_total_proposals", ",", "\n", "inside_flags", ")", "\n", "\n", "", "return", "(", "labels", ",", "label_weights", ",", "bbox_gt", ",", "pos_proposals", ",", "proposals_weights", ",", "\n", "pos_inds", ",", "neg_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.anchor.point_target.unmap": [[155, 166], ["data.dim", "data.new_full", "data.new_full", "data.size"], "function", ["None"], ["", "def", "unmap", "(", "data", ",", "count", ",", "inds", ",", "fill", "=", "0", ")", ":", "\n", "    ", "\"\"\" Unmap a subset of item (data) back to the original set of items (of\n    size count) \"\"\"", "\n", "if", "data", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "ret", "=", "data", ".", "new_full", "(", "(", "count", ",", ")", ",", "fill", ")", "\n", "ret", "[", "inds", "]", "=", "data", "\n", "", "else", ":", "\n", "        ", "new_size", "=", "(", "count", ",", ")", "+", "data", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "ret", "=", "data", ".", "new_full", "(", "new_size", ",", "fill", ")", "\n", "ret", "[", "inds", ",", ":", "]", "=", "data", "\n", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.mean_ap.average_precision": [[12, 57], ["numpy.zeros", "numpy.zeros", "numpy.ones", "numpy.hstack", "numpy.hstack", "range", "range", "numpy.maximum", "numpy.sum", "range", "ValueError", "numpy.where", "numpy.arange", "precs.max"], "function", ["None"], ["def", "average_precision", "(", "recalls", ",", "precisions", ",", "mode", "=", "'area'", ")", ":", "\n", "    ", "\"\"\"Calculate average precision (for single or multiple scales).\n\n    Args:\n        recalls (ndarray): shape (num_scales, num_dets) or (num_dets, )\n        precisions (ndarray): shape (num_scales, num_dets) or (num_dets, )\n        mode (str): 'area' or '11points', 'area' means calculating the area\n            under precision-recall curve, '11points' means calculating\n            the average precision of recalls at [0, 0.1, ..., 1]\n\n    Returns:\n        float or ndarray: calculated average precision\n    \"\"\"", "\n", "no_scale", "=", "False", "\n", "if", "recalls", ".", "ndim", "==", "1", ":", "\n", "        ", "no_scale", "=", "True", "\n", "recalls", "=", "recalls", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "precisions", "=", "precisions", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "", "assert", "recalls", ".", "shape", "==", "precisions", ".", "shape", "and", "recalls", ".", "ndim", "==", "2", "\n", "num_scales", "=", "recalls", ".", "shape", "[", "0", "]", "\n", "ap", "=", "np", ".", "zeros", "(", "num_scales", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "mode", "==", "'area'", ":", "\n", "        ", "zeros", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "1", ")", ",", "dtype", "=", "recalls", ".", "dtype", ")", "\n", "ones", "=", "np", ".", "ones", "(", "(", "num_scales", ",", "1", ")", ",", "dtype", "=", "recalls", ".", "dtype", ")", "\n", "mrec", "=", "np", ".", "hstack", "(", "(", "zeros", ",", "recalls", ",", "ones", ")", ")", "\n", "mpre", "=", "np", ".", "hstack", "(", "(", "zeros", ",", "precisions", ",", "zeros", ")", ")", "\n", "for", "i", "in", "range", "(", "mpre", ".", "shape", "[", "1", "]", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", ":", ",", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", ":", ",", "i", "-", "1", "]", ",", "mpre", "[", ":", ",", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "num_scales", ")", ":", "\n", "            ", "ind", "=", "np", ".", "where", "(", "mrec", "[", "i", ",", "1", ":", "]", "!=", "mrec", "[", "i", ",", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "ap", "[", "i", "]", "=", "np", ".", "sum", "(", "\n", "(", "mrec", "[", "i", ",", "ind", "+", "1", "]", "-", "mrec", "[", "i", ",", "ind", "]", ")", "*", "mpre", "[", "i", ",", "ind", "+", "1", "]", ")", "\n", "", "", "elif", "mode", "==", "'11points'", ":", "\n", "        ", "for", "i", "in", "range", "(", "num_scales", ")", ":", "\n", "            ", "for", "thr", "in", "np", ".", "arange", "(", "0", ",", "1", "+", "1e-3", ",", "0.1", ")", ":", "\n", "                ", "precs", "=", "precisions", "[", "i", ",", "recalls", "[", "i", ",", ":", "]", ">=", "thr", "]", "\n", "prec", "=", "precs", ".", "max", "(", ")", "if", "precs", ".", "size", ">", "0", "else", "0", "\n", "ap", "[", "i", "]", "+=", "prec", "\n", "", "ap", "/=", "11", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'Unrecognized mode, only \"area\" and \"11points\" are supported'", ")", "\n", "", "if", "no_scale", ":", "\n", "        ", "ap", "=", "ap", "[", "0", "]", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.mean_ap.tpfp_imagenet": [[59, 151], ["numpy.concatenate", "numpy.vstack", "len", "numpy.zeros", "numpy.zeros", "bbox_overlaps.bbox_overlaps", "numpy.minimum", "numpy.argsort", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.ones", "enumerate", "numpy.zeros_like", "range"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.geometry.bbox_overlaps"], ["", "def", "tpfp_imagenet", "(", "det_bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "default_iou_thr", "=", "0.5", ",", "\n", "area_ranges", "=", "None", ")", ":", "\n", "    ", "\"\"\"Check if detected bboxes are true positive or false positive.\n\n    Args:\n        det_bbox (ndarray): Detected bboxes of this image, of shape (m, 5).\n        gt_bboxes (ndarray): GT bboxes of this image, of shape (n, 4).\n        gt_bboxes_ignore (ndarray): Ignored gt bboxes of this image,\n            of shape (k, 4). Default: None\n        default_iou_thr (float): IoU threshold to be considered as matched for\n            medium and large bboxes (small ones have special rules).\n            Default: 0.5.\n        area_ranges (list[tuple] | None): Range of bbox areas to be evaluated,\n            in the format [(min1, max1), (min2, max2), ...]. Default: None.\n\n    Returns:\n        tuple[np.ndarray]: (tp, fp) whose elements are 0 and 1. The shape of\n            each array is (num_scales, m).\n    \"\"\"", "\n", "# an indicator of ignored gts", "\n", "gt_ignore_inds", "=", "np", ".", "concatenate", "(", "\n", "(", "np", ".", "zeros", "(", "gt_bboxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", ",", "\n", "np", ".", "ones", "(", "gt_bboxes_ignore", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", ")", ")", "\n", "# stack gt_bboxes and gt_bboxes_ignore for convenience", "\n", "gt_bboxes", "=", "np", ".", "vstack", "(", "(", "gt_bboxes", ",", "gt_bboxes_ignore", ")", ")", "\n", "\n", "num_dets", "=", "det_bboxes", ".", "shape", "[", "0", "]", "\n", "num_gts", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "if", "area_ranges", "is", "None", ":", "\n", "        ", "area_ranges", "=", "[", "(", "None", ",", "None", ")", "]", "\n", "", "num_scales", "=", "len", "(", "area_ranges", ")", "\n", "# tp and fp are of shape (num_scales, num_gts), each row is tp or fp", "\n", "# of a certain scale.", "\n", "tp", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_dets", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_dets", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "gt_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "if", "area_ranges", "==", "[", "(", "None", ",", "None", ")", "]", ":", "\n", "            ", "fp", "[", "...", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "det_areas", "=", "(", "det_bboxes", "[", ":", ",", "2", "]", "-", "det_bboxes", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "det_bboxes", "[", ":", ",", "3", "]", "-", "det_bboxes", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "for", "i", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "                ", "fp", "[", "i", ",", "(", "det_areas", ">=", "min_area", ")", "&", "(", "det_areas", "<", "max_area", ")", "]", "=", "1", "\n", "", "", "return", "tp", ",", "fp", "\n", "", "ious", "=", "bbox_overlaps", "(", "det_bboxes", ",", "gt_bboxes", "-", "1", ")", "\n", "gt_w", "=", "gt_bboxes", "[", ":", ",", "2", "]", "-", "gt_bboxes", "[", ":", ",", "0", "]", "+", "1", "\n", "gt_h", "=", "gt_bboxes", "[", ":", ",", "3", "]", "-", "gt_bboxes", "[", ":", ",", "1", "]", "+", "1", "\n", "iou_thrs", "=", "np", ".", "minimum", "(", "(", "gt_w", "*", "gt_h", ")", "/", "(", "(", "gt_w", "+", "10.0", ")", "*", "(", "gt_h", "+", "10.0", ")", ")", ",", "\n", "default_iou_thr", ")", "\n", "# sort all detections by scores in descending order", "\n", "sort_inds", "=", "np", ".", "argsort", "(", "-", "det_bboxes", "[", ":", ",", "-", "1", "]", ")", "\n", "for", "k", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "        ", "gt_covered", "=", "np", ".", "zeros", "(", "num_gts", ",", "dtype", "=", "bool", ")", "\n", "# if no area range is specified, gt_area_ignore is all False", "\n", "if", "min_area", "is", "None", ":", "\n", "            ", "gt_area_ignore", "=", "np", ".", "zeros_like", "(", "gt_ignore_inds", ",", "dtype", "=", "bool", ")", "\n", "", "else", ":", "\n", "            ", "gt_areas", "=", "gt_w", "*", "gt_h", "\n", "gt_area_ignore", "=", "(", "gt_areas", "<", "min_area", ")", "|", "(", "gt_areas", ">=", "max_area", ")", "\n", "", "for", "i", "in", "sort_inds", ":", "\n", "            ", "max_iou", "=", "-", "1", "\n", "matched_gt", "=", "-", "1", "\n", "# find best overlapped available gt", "\n", "for", "j", "in", "range", "(", "num_gts", ")", ":", "\n", "# different from PASCAL VOC: allow finding other gts if the", "\n", "# best overlaped ones are already matched by other det bboxes", "\n", "                ", "if", "gt_covered", "[", "j", "]", ":", "\n", "                    ", "continue", "\n", "", "elif", "ious", "[", "i", ",", "j", "]", ">=", "iou_thrs", "[", "j", "]", "and", "ious", "[", "i", ",", "j", "]", ">", "max_iou", ":", "\n", "                    ", "max_iou", "=", "ious", "[", "i", ",", "j", "]", "\n", "matched_gt", "=", "j", "\n", "# there are 4 cases for a det bbox:", "\n", "# 1. it matches a gt, tp = 1, fp = 0", "\n", "# 2. it matches an ignored gt, tp = 0, fp = 0", "\n", "# 3. it matches no gt and within area range, tp = 0, fp = 1", "\n", "# 4. it matches no gt but is beyond area range, tp = 0, fp = 0", "\n", "", "", "if", "matched_gt", ">=", "0", ":", "\n", "                ", "gt_covered", "[", "matched_gt", "]", "=", "1", "\n", "if", "not", "(", "gt_ignore_inds", "[", "matched_gt", "]", "\n", "or", "gt_area_ignore", "[", "matched_gt", "]", ")", ":", "\n", "                    ", "tp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "", "elif", "min_area", "is", "None", ":", "\n", "                ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "bbox", "=", "det_bboxes", "[", "i", ",", ":", "4", "]", "\n", "area", "=", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "+", "1", ")", "*", "(", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "+", "1", ")", "\n", "if", "area", ">=", "min_area", "and", "area", "<", "max_area", ":", "\n", "                    ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "", "", "", "return", "tp", ",", "fp", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.mean_ap.tpfp_default": [[153, 238], ["numpy.concatenate", "numpy.vstack", "len", "numpy.zeros", "numpy.zeros", "bbox_overlaps.bbox_overlaps", "bbox_overlaps.bbox_overlaps.max", "bbox_overlaps.bbox_overlaps.argmax", "numpy.argsort", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.ones", "enumerate", "numpy.zeros_like"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.geometry.bbox_overlaps"], ["", "def", "tpfp_default", "(", "det_bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "iou_thr", "=", "0.5", ",", "\n", "area_ranges", "=", "None", ")", ":", "\n", "    ", "\"\"\"Check if detected bboxes are true positive or false positive.\n\n    Args:\n        det_bbox (ndarray): Detected bboxes of this image, of shape (m, 5).\n        gt_bboxes (ndarray): GT bboxes of this image, of shape (n, 4).\n        gt_bboxes_ignore (ndarray): Ignored gt bboxes of this image,\n            of shape (k, 4). Default: None\n        iou_thr (float): IoU threshold to be considered as matched.\n            Default: 0.5.\n        area_ranges (list[tuple] | None): Range of bbox areas to be evaluated,\n            in the format [(min1, max1), (min2, max2), ...]. Default: None.\n\n    Returns:\n        tuple[np.ndarray]: (tp, fp) whose elements are 0 and 1. The shape of\n            each array is (num_scales, m).\n    \"\"\"", "\n", "# an indicator of ignored gts", "\n", "gt_ignore_inds", "=", "np", ".", "concatenate", "(", "\n", "(", "np", ".", "zeros", "(", "gt_bboxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", ",", "\n", "np", ".", "ones", "(", "gt_bboxes_ignore", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", ")", ")", "\n", "# stack gt_bboxes and gt_bboxes_ignore for convenience", "\n", "gt_bboxes", "=", "np", ".", "vstack", "(", "(", "gt_bboxes", ",", "gt_bboxes_ignore", ")", ")", "\n", "\n", "num_dets", "=", "det_bboxes", ".", "shape", "[", "0", "]", "\n", "num_gts", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "if", "area_ranges", "is", "None", ":", "\n", "        ", "area_ranges", "=", "[", "(", "None", ",", "None", ")", "]", "\n", "", "num_scales", "=", "len", "(", "area_ranges", ")", "\n", "# tp and fp are of shape (num_scales, num_gts), each row is tp or fp of", "\n", "# a certain scale", "\n", "tp", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_dets", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_dets", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# if there is no gt bboxes in this image, then all det bboxes", "\n", "# within area range are false positives", "\n", "if", "gt_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "if", "area_ranges", "==", "[", "(", "None", ",", "None", ")", "]", ":", "\n", "            ", "fp", "[", "...", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "det_areas", "=", "(", "det_bboxes", "[", ":", ",", "2", "]", "-", "det_bboxes", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "det_bboxes", "[", ":", ",", "3", "]", "-", "det_bboxes", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "for", "i", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "                ", "fp", "[", "i", ",", "(", "det_areas", ">=", "min_area", ")", "&", "(", "det_areas", "<", "max_area", ")", "]", "=", "1", "\n", "", "", "return", "tp", ",", "fp", "\n", "\n", "", "ious", "=", "bbox_overlaps", "(", "det_bboxes", ",", "gt_bboxes", ")", "\n", "# for each det, the max iou with all gts", "\n", "ious_max", "=", "ious", ".", "max", "(", "axis", "=", "1", ")", "\n", "# for each det, which gt overlaps most with it", "\n", "ious_argmax", "=", "ious", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "# sort all dets in descending order by scores", "\n", "sort_inds", "=", "np", ".", "argsort", "(", "-", "det_bboxes", "[", ":", ",", "-", "1", "]", ")", "\n", "for", "k", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "        ", "gt_covered", "=", "np", ".", "zeros", "(", "num_gts", ",", "dtype", "=", "bool", ")", "\n", "# if no area range is specified, gt_area_ignore is all False", "\n", "if", "min_area", "is", "None", ":", "\n", "            ", "gt_area_ignore", "=", "np", ".", "zeros_like", "(", "gt_ignore_inds", ",", "dtype", "=", "bool", ")", "\n", "", "else", ":", "\n", "            ", "gt_areas", "=", "(", "gt_bboxes", "[", ":", ",", "2", "]", "-", "gt_bboxes", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "gt_bboxes", "[", ":", ",", "3", "]", "-", "gt_bboxes", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "gt_area_ignore", "=", "(", "gt_areas", "<", "min_area", ")", "|", "(", "gt_areas", ">=", "max_area", ")", "\n", "", "for", "i", "in", "sort_inds", ":", "\n", "            ", "if", "ious_max", "[", "i", "]", ">=", "iou_thr", ":", "\n", "                ", "matched_gt", "=", "ious_argmax", "[", "i", "]", "\n", "if", "not", "(", "gt_ignore_inds", "[", "matched_gt", "]", "\n", "or", "gt_area_ignore", "[", "matched_gt", "]", ")", ":", "\n", "                    ", "if", "not", "gt_covered", "[", "matched_gt", "]", ":", "\n", "                        ", "gt_covered", "[", "matched_gt", "]", "=", "True", "\n", "tp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "# otherwise ignore this detected bbox, tp = 0, fp = 0", "\n", "", "", "", "elif", "min_area", "is", "None", ":", "\n", "                ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "bbox", "=", "det_bboxes", "[", "i", ",", ":", "4", "]", "\n", "area", "=", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "+", "1", ")", "*", "(", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "+", "1", ")", "\n", "if", "area", ">=", "min_area", "and", "area", "<", "max_area", ":", "\n", "                    ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "", "", "", "return", "tp", ",", "fp", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.mean_ap.get_cls_results": [[240, 264], ["cls_gts.append", "ann.get", "cls_gts_ignore.append", "cls_gts_ignore.append", "numpy.empty"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "def", "get_cls_results", "(", "det_results", ",", "annotations", ",", "class_id", ")", ":", "\n", "    ", "\"\"\"Get det results and gt information of a certain class.\n\n    Args:\n        det_results (list[list]): Same as `eval_map()`.\n        annotations (list[dict]): Same as `eval_map()`.\n\n    Returns:\n        tuple[list[np.ndarray]]: detected bboxes, gt bboxes, ignored gt bboxes\n    \"\"\"", "\n", "cls_dets", "=", "[", "img_res", "[", "class_id", "]", "for", "img_res", "in", "det_results", "]", "\n", "cls_gts", "=", "[", "]", "\n", "cls_gts_ignore", "=", "[", "]", "\n", "for", "ann", "in", "annotations", ":", "\n", "        ", "gt_inds", "=", "ann", "[", "'labels'", "]", "==", "(", "class_id", "+", "1", ")", "\n", "cls_gts", ".", "append", "(", "ann", "[", "'bboxes'", "]", "[", "gt_inds", ",", ":", "]", ")", "\n", "\n", "if", "ann", ".", "get", "(", "'labels_ignore'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "ignore_inds", "=", "ann", "[", "'labels_ignore'", "]", "==", "(", "class_id", "+", "1", ")", "\n", "cls_gts_ignore", ".", "append", "(", "ann", "[", "'bboxes_ignore'", "]", "[", "ignore_inds", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "cls_gts_ignore", ".", "append", "(", "np", ".", "empty", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "\n", "", "", "return", "cls_dets", ",", "cls_gts", ",", "cls_gts_ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.mean_ap.eval_map": [[266, 388], ["len", "len", "multiprocessing.Pool", "range", "mean_ap.print_map_summary", "len", "len", "len", "mean_ap.get_cls_results", "multiprocessing.Pool.starmap", "tuple", "numpy.zeros", "enumerate", "numpy.vstack", "numpy.argsort", "numpy.cumsum", "numpy.cumsum", "mean_ap.average_precision", "eval_results.append", "numpy.vstack", "numpy.vstack", "range", "zip", "zip", "numpy.hstack", "numpy.hstack", "numpy.finfo", "numpy.maximum", "numpy.maximum", "num_gts.item.item", "numpy.any", "numpy.array().mean().item", "enumerate", "mean_ap.append", "mean_ap.append", "aps.append", "numpy.sum", "all_ap[].mean", "numpy.array().mean", "range", "range", "numpy.array"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.mean_ap.print_map_summary", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.mean_ap.get_cls_results", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.mean_ap.average_precision"], ["", "def", "eval_map", "(", "det_results", ",", "\n", "annotations", ",", "\n", "scale_ranges", "=", "None", ",", "\n", "iou_thr", "=", "0.5", ",", "\n", "dataset", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "nproc", "=", "4", ")", ":", "\n", "    ", "\"\"\"Evaluate mAP of a dataset.\n\n    Args:\n        det_results (list[list]): [[cls1_det, cls2_det, ...], ...].\n            The outer list indicates images, and the inner list indicates\n            per-class detected bboxes.\n        annotations (list[dict]): Ground truth annotations where each item of\n            the list indicates an image. Keys of annotations are:\n                - \"bboxes\": numpy array of shape (n, 4)\n                - \"labels\": numpy array of shape (n, )\n                - \"bboxes_ignore\" (optional): numpy array of shape (k, 4)\n                - \"labels_ignore\" (optional): numpy array of shape (k, )\n        scale_ranges (list[tuple] | None): Range of scales to be evaluated,\n            in the format [(min1, max1), (min2, max2), ...]. A range of\n            (32, 64) means the area range between (32**2, 64**2).\n            Default: None.\n        iou_thr (float): IoU threshold to be considered as matched.\n            Default: 0.5.\n        dataset (list[str] | str | None): Dataset name or dataset classes,\n            there are minor differences in metrics for different datsets, e.g.\n            \"voc07\", \"imagenet_det\", etc. Default: None.\n        logger (logging.Logger | str | None): The way to print the mAP\n            summary. See `mmdet.utils.print_log()` for details. Default: None.\n        nproc (int): Processes used for computing TP and FP.\n            Default: 4.\n\n    Returns:\n        tuple: (mAP, [dict, dict, ...])\n    \"\"\"", "\n", "assert", "len", "(", "det_results", ")", "==", "len", "(", "annotations", ")", "\n", "\n", "num_imgs", "=", "len", "(", "det_results", ")", "\n", "num_scales", "=", "len", "(", "scale_ranges", ")", "if", "scale_ranges", "is", "not", "None", "else", "1", "\n", "num_classes", "=", "len", "(", "det_results", "[", "0", "]", ")", "# positive class num", "\n", "area_ranges", "=", "(", "[", "(", "rg", "[", "0", "]", "**", "2", ",", "rg", "[", "1", "]", "**", "2", ")", "for", "rg", "in", "scale_ranges", "]", "\n", "if", "scale_ranges", "is", "not", "None", "else", "None", ")", "\n", "\n", "pool", "=", "Pool", "(", "nproc", ")", "\n", "eval_results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "# get gt and det bboxes of this class", "\n", "        ", "cls_dets", ",", "cls_gts", ",", "cls_gts_ignore", "=", "get_cls_results", "(", "\n", "det_results", ",", "annotations", ",", "i", ")", "\n", "# choose proper function according to datasets to compute tp and fp", "\n", "if", "dataset", "in", "[", "'det'", ",", "'vid'", "]", ":", "\n", "            ", "tpfp_func", "=", "tpfp_imagenet", "\n", "", "else", ":", "\n", "            ", "tpfp_func", "=", "tpfp_default", "\n", "# compute tp and fp for each image with multiple processes", "\n", "", "tpfp", "=", "pool", ".", "starmap", "(", "\n", "tpfp_func", ",", "\n", "zip", "(", "cls_dets", ",", "cls_gts", ",", "cls_gts_ignore", ",", "\n", "[", "iou_thr", "for", "_", "in", "range", "(", "num_imgs", ")", "]", ",", "\n", "[", "area_ranges", "for", "_", "in", "range", "(", "num_imgs", ")", "]", ")", ")", "\n", "tp", ",", "fp", "=", "tuple", "(", "zip", "(", "*", "tpfp", ")", ")", "\n", "# calculate gt number of each scale", "\n", "# ignored gts or gts beyond the specific scale are not counted", "\n", "num_gts", "=", "np", ".", "zeros", "(", "num_scales", ",", "dtype", "=", "int", ")", "\n", "for", "j", ",", "bbox", "in", "enumerate", "(", "cls_gts", ")", ":", "\n", "            ", "if", "area_ranges", "is", "None", ":", "\n", "                ", "num_gts", "[", "0", "]", "+=", "bbox", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "gt_areas", "=", "(", "bbox", "[", ":", ",", "2", "]", "-", "bbox", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "bbox", "[", ":", ",", "3", "]", "-", "bbox", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "for", "k", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "                    ", "num_gts", "[", "k", "]", "+=", "np", ".", "sum", "(", "(", "gt_areas", ">=", "min_area", ")", "\n", "&", "(", "gt_areas", "<", "max_area", ")", ")", "\n", "# sort all det bboxes by score, also sort tp and fp", "\n", "", "", "", "cls_dets", "=", "np", ".", "vstack", "(", "cls_dets", ")", "\n", "num_dets", "=", "cls_dets", ".", "shape", "[", "0", "]", "\n", "sort_inds", "=", "np", ".", "argsort", "(", "-", "cls_dets", "[", ":", ",", "-", "1", "]", ")", "\n", "tp", "=", "np", ".", "hstack", "(", "tp", ")", "[", ":", ",", "sort_inds", "]", "\n", "fp", "=", "np", ".", "hstack", "(", "fp", ")", "[", ":", ",", "sort_inds", "]", "\n", "# calculate recall and precision with tp and fp", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ",", "axis", "=", "1", ")", "\n", "fp", "=", "np", ".", "cumsum", "(", "fp", ",", "axis", "=", "1", ")", "\n", "eps", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", "\n", "recalls", "=", "tp", "/", "np", ".", "maximum", "(", "num_gts", "[", ":", ",", "np", ".", "newaxis", "]", ",", "eps", ")", "\n", "precisions", "=", "tp", "/", "np", ".", "maximum", "(", "(", "tp", "+", "fp", ")", ",", "eps", ")", "\n", "# calculate AP", "\n", "if", "scale_ranges", "is", "None", ":", "\n", "            ", "recalls", "=", "recalls", "[", "0", ",", ":", "]", "\n", "precisions", "=", "precisions", "[", "0", ",", ":", "]", "\n", "num_gts", "=", "num_gts", ".", "item", "(", ")", "\n", "", "mode", "=", "'area'", "if", "dataset", "!=", "'voc07'", "else", "'11points'", "\n", "ap", "=", "average_precision", "(", "recalls", ",", "precisions", ",", "mode", ")", "\n", "eval_results", ".", "append", "(", "{", "\n", "'num_gts'", ":", "num_gts", ",", "\n", "'num_dets'", ":", "num_dets", ",", "\n", "'recall'", ":", "recalls", ",", "\n", "'precision'", ":", "precisions", ",", "\n", "'ap'", ":", "ap", "\n", "}", ")", "\n", "", "if", "scale_ranges", "is", "not", "None", ":", "\n", "# shape (num_classes, num_scales)", "\n", "        ", "all_ap", "=", "np", ".", "vstack", "(", "[", "cls_result", "[", "'ap'", "]", "for", "cls_result", "in", "eval_results", "]", ")", "\n", "all_num_gts", "=", "np", ".", "vstack", "(", "\n", "[", "cls_result", "[", "'num_gts'", "]", "for", "cls_result", "in", "eval_results", "]", ")", "\n", "mean_ap", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_scales", ")", ":", "\n", "            ", "if", "np", ".", "any", "(", "all_num_gts", "[", ":", ",", "i", "]", ">", "0", ")", ":", "\n", "                ", "mean_ap", ".", "append", "(", "all_ap", "[", "all_num_gts", "[", ":", ",", "i", "]", ">", "0", ",", "i", "]", ".", "mean", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "mean_ap", ".", "append", "(", "0.0", ")", "\n", "", "", "", "else", ":", "\n", "        ", "aps", "=", "[", "]", "\n", "for", "cls_result", "in", "eval_results", ":", "\n", "            ", "if", "cls_result", "[", "'num_gts'", "]", ">", "0", ":", "\n", "                ", "aps", ".", "append", "(", "cls_result", "[", "'ap'", "]", ")", "\n", "", "", "mean_ap", "=", "np", ".", "array", "(", "aps", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "if", "aps", "else", "0.0", "\n", "\n", "", "print_map_summary", "(", "\n", "mean_ap", ",", "eval_results", ",", "dataset", ",", "area_ranges", ",", "logger", "=", "logger", ")", "\n", "\n", "return", "mean_ap", ",", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.mean_ap.print_map_summary": [[390, 456], ["isinstance", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "range", "len", "mmcv.is_str", "isinstance", "range", "table_data.append", "terminaltables.AsciiTable", "mmdet.utils.print_log", "len", "str", "class_names.get_classes", "mmdet.utils.print_log", "table_data.append", "numpy.array", "range"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.print_log", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.class_names.get_classes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.print_log"], ["", "def", "print_map_summary", "(", "mean_ap", ",", "\n", "results", ",", "\n", "dataset", "=", "None", ",", "\n", "scale_ranges", "=", "None", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"Print mAP and results of each class.\n\n    A table will be printed to show the gts/dets/recall/AP of each class and\n    the mAP.\n\n    Args:\n        mean_ap (float): Calculated from `eval_map()`.\n        results (list[dict]): Calculated from `eval_map()`.\n        dataset (list[str] | str | None): Dataset name or dataset classes.\n        scale_ranges (list[tuple] | None): Range of scales to be evaluated.\n        logger (logging.Logger | str | None): The way to print the mAP\n            summary. See `mmdet.utils.print_log()` for details. Default: None.\n    \"\"\"", "\n", "\n", "if", "logger", "==", "'silent'", ":", "\n", "        ", "return", "\n", "\n", "", "if", "isinstance", "(", "results", "[", "0", "]", "[", "'ap'", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "num_scales", "=", "len", "(", "results", "[", "0", "]", "[", "'ap'", "]", ")", "\n", "", "else", ":", "\n", "        ", "num_scales", "=", "1", "\n", "\n", "", "if", "scale_ranges", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "scale_ranges", ")", "==", "num_scales", "\n", "\n", "", "num_classes", "=", "len", "(", "results", ")", "\n", "\n", "recalls", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "aps", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "num_gts", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_classes", ")", ",", "dtype", "=", "int", ")", "\n", "for", "i", ",", "cls_result", "in", "enumerate", "(", "results", ")", ":", "\n", "        ", "if", "cls_result", "[", "'recall'", "]", ".", "size", ">", "0", ":", "\n", "            ", "recalls", "[", ":", ",", "i", "]", "=", "np", ".", "array", "(", "cls_result", "[", "'recall'", "]", ",", "ndmin", "=", "2", ")", "[", ":", ",", "-", "1", "]", "\n", "", "aps", "[", ":", ",", "i", "]", "=", "cls_result", "[", "'ap'", "]", "\n", "num_gts", "[", ":", ",", "i", "]", "=", "cls_result", "[", "'num_gts'", "]", "\n", "\n", "", "if", "dataset", "is", "None", ":", "\n", "        ", "label_names", "=", "[", "str", "(", "i", ")", "for", "i", "in", "range", "(", "1", ",", "num_classes", "+", "1", ")", "]", "\n", "", "elif", "mmcv", ".", "is_str", "(", "dataset", ")", ":", "\n", "        ", "label_names", "=", "get_classes", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "label_names", "=", "dataset", "\n", "\n", "", "if", "not", "isinstance", "(", "mean_ap", ",", "list", ")", ":", "\n", "        ", "mean_ap", "=", "[", "mean_ap", "]", "\n", "\n", "", "header", "=", "[", "'class'", ",", "'gts'", ",", "'dets'", ",", "'recall'", ",", "'ap'", "]", "\n", "for", "i", "in", "range", "(", "num_scales", ")", ":", "\n", "        ", "if", "scale_ranges", "is", "not", "None", ":", "\n", "            ", "print_log", "(", "'Scale range {}'", ".", "format", "(", "scale_ranges", "[", "i", "]", ")", ",", "logger", "=", "logger", ")", "\n", "", "table_data", "=", "[", "header", "]", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "row_data", "=", "[", "\n", "label_names", "[", "j", "]", ",", "num_gts", "[", "i", ",", "j", "]", ",", "results", "[", "j", "]", "[", "'num_dets'", "]", ",", "\n", "'{:.3f}'", ".", "format", "(", "recalls", "[", "i", ",", "j", "]", ")", ",", "'{:.3f}'", ".", "format", "(", "aps", "[", "i", ",", "j", "]", ")", "\n", "]", "\n", "table_data", ".", "append", "(", "row_data", ")", "\n", "", "table_data", ".", "append", "(", "[", "'mAP'", ",", "''", ",", "''", ",", "''", ",", "'{:.3f}'", ".", "format", "(", "mean_ap", "[", "i", "]", ")", "]", ")", "\n", "table", "=", "AsciiTable", "(", "table_data", ")", "\n", "table", ".", "inner_footing_row_border", "=", "True", "\n", "print_log", "(", "'\\n'", "+", "table", ".", "table", ",", "logger", "=", "logger", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.recall._recalls": [[10, 41], ["sum", "numpy.zeros", "enumerate", "numpy.fliplr", "numpy.zeros", "enumerate", "numpy.zeros", "range", "numpy.sort", "[].copy", "numpy.zeros", "range", "numpy.hstack", "float", "numpy.hstack", "[].copy.argmax", "max_ious.argmax", "numpy.arange"], "function", ["None"], ["def", "_recalls", "(", "all_ious", ",", "proposal_nums", ",", "thrs", ")", ":", "\n", "\n", "    ", "img_num", "=", "all_ious", ".", "shape", "[", "0", "]", "\n", "total_gt_num", "=", "sum", "(", "[", "ious", ".", "shape", "[", "0", "]", "for", "ious", "in", "all_ious", "]", ")", "\n", "\n", "_ious", "=", "np", ".", "zeros", "(", "(", "proposal_nums", ".", "size", ",", "total_gt_num", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "proposal_num", "in", "enumerate", "(", "proposal_nums", ")", ":", "\n", "        ", "tmp_ious", "=", "np", ".", "zeros", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "img_num", ")", ":", "\n", "            ", "ious", "=", "all_ious", "[", "i", "]", "[", ":", ",", ":", "proposal_num", "]", ".", "copy", "(", ")", "\n", "gt_ious", "=", "np", ".", "zeros", "(", "(", "ious", ".", "shape", "[", "0", "]", ")", ")", "\n", "if", "ious", ".", "size", "==", "0", ":", "\n", "                ", "tmp_ious", "=", "np", ".", "hstack", "(", "(", "tmp_ious", ",", "gt_ious", ")", ")", "\n", "continue", "\n", "", "for", "j", "in", "range", "(", "ious", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "gt_max_overlaps", "=", "ious", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "max_ious", "=", "ious", "[", "np", ".", "arange", "(", "0", ",", "ious", ".", "shape", "[", "0", "]", ")", ",", "gt_max_overlaps", "]", "\n", "gt_idx", "=", "max_ious", ".", "argmax", "(", ")", "\n", "gt_ious", "[", "j", "]", "=", "max_ious", "[", "gt_idx", "]", "\n", "box_idx", "=", "gt_max_overlaps", "[", "gt_idx", "]", "\n", "ious", "[", "gt_idx", ",", ":", "]", "=", "-", "1", "\n", "ious", "[", ":", ",", "box_idx", "]", "=", "-", "1", "\n", "", "tmp_ious", "=", "np", ".", "hstack", "(", "(", "tmp_ious", ",", "gt_ious", ")", ")", "\n", "", "_ious", "[", "k", ",", ":", "]", "=", "tmp_ious", "\n", "\n", "", "_ious", "=", "np", ".", "fliplr", "(", "np", ".", "sort", "(", "_ious", ",", "axis", "=", "1", ")", ")", "\n", "recalls", "=", "np", ".", "zeros", "(", "(", "proposal_nums", ".", "size", ",", "thrs", ".", "size", ")", ")", "\n", "for", "i", ",", "thr", "in", "enumerate", "(", "thrs", ")", ":", "\n", "        ", "recalls", "[", ":", ",", "i", "]", "=", "(", "_ious", ">=", "thr", ")", ".", "sum", "(", "axis", "=", "1", ")", "/", "float", "(", "total_gt_num", ")", "\n", "\n", "", "return", "recalls", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.recall.set_recall_param": [[43, 63], ["isinstance", "numpy.array", "isinstance", "numpy.array", "isinstance", "numpy.array", "numpy.array", "isinstance", "numpy.array"], "function", ["None"], ["", "def", "set_recall_param", "(", "proposal_nums", ",", "iou_thrs", ")", ":", "\n", "    ", "\"\"\"Check proposal_nums and iou_thrs and set correct format.\n    \"\"\"", "\n", "if", "isinstance", "(", "proposal_nums", ",", "Sequence", ")", ":", "\n", "        ", "_proposal_nums", "=", "np", ".", "array", "(", "proposal_nums", ")", "\n", "", "elif", "isinstance", "(", "proposal_nums", ",", "int", ")", ":", "\n", "        ", "_proposal_nums", "=", "np", ".", "array", "(", "[", "proposal_nums", "]", ")", "\n", "", "else", ":", "\n", "        ", "_proposal_nums", "=", "proposal_nums", "\n", "\n", "", "if", "iou_thrs", "is", "None", ":", "\n", "        ", "_iou_thrs", "=", "np", ".", "array", "(", "[", "0.5", "]", ")", "\n", "", "elif", "isinstance", "(", "iou_thrs", ",", "Sequence", ")", ":", "\n", "        ", "_iou_thrs", "=", "np", ".", "array", "(", "iou_thrs", ")", "\n", "", "elif", "isinstance", "(", "iou_thrs", ",", "float", ")", ":", "\n", "        ", "_iou_thrs", "=", "np", ".", "array", "(", "[", "iou_thrs", "]", ")", "\n", "", "else", ":", "\n", "        ", "_iou_thrs", "=", "iou_thrs", "\n", "\n", "", "return", "_proposal_nums", ",", "_iou_thrs", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.recall.eval_recalls": [[65, 108], ["len", "recall.set_recall_param", "range", "numpy.array", "recall._recalls", "recall.print_recall_summary", "len", "min", "np.array.append", "numpy.zeros", "bbox_overlaps.bbox_overlaps", "numpy.argsort"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.recall.set_recall_param", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.recall._recalls", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.recall.print_recall_summary", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.geometry.bbox_overlaps"], ["", "def", "eval_recalls", "(", "gts", ",", "\n", "proposals", ",", "\n", "proposal_nums", "=", "None", ",", "\n", "iou_thrs", "=", "0.5", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"Calculate recalls.\n\n    Args:\n        gts (list[ndarray]): a list of arrays of shape (n, 4)\n        proposals (list[ndarray]): a list of arrays of shape (k, 4) or (k, 5)\n        proposal_nums (int | Sequence[int]): Top N proposals to be evaluated.\n        iou_thrs (float | Sequence[float]): IoU thresholds. Default: 0.5.\n        logger (logging.Logger | str | None): The way to print the recall\n            summary. See `mmdet.utils.print_log()` for details. Default: None.\n\n    Returns:\n        ndarray: recalls of different ious and proposal nums\n    \"\"\"", "\n", "\n", "img_num", "=", "len", "(", "gts", ")", "\n", "assert", "img_num", "==", "len", "(", "proposals", ")", "\n", "\n", "proposal_nums", ",", "iou_thrs", "=", "set_recall_param", "(", "proposal_nums", ",", "iou_thrs", ")", "\n", "\n", "all_ious", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "img_num", ")", ":", "\n", "        ", "if", "proposals", "[", "i", "]", ".", "ndim", "==", "2", "and", "proposals", "[", "i", "]", ".", "shape", "[", "1", "]", "==", "5", ":", "\n", "            ", "scores", "=", "proposals", "[", "i", "]", "[", ":", ",", "4", "]", "\n", "sort_idx", "=", "np", ".", "argsort", "(", "scores", ")", "[", ":", ":", "-", "1", "]", "\n", "img_proposal", "=", "proposals", "[", "i", "]", "[", "sort_idx", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "img_proposal", "=", "proposals", "[", "i", "]", "\n", "", "prop_num", "=", "min", "(", "img_proposal", ".", "shape", "[", "0", "]", ",", "proposal_nums", "[", "-", "1", "]", ")", "\n", "if", "gts", "[", "i", "]", "is", "None", "or", "gts", "[", "i", "]", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "ious", "=", "np", ".", "zeros", "(", "(", "0", ",", "img_proposal", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "ious", "=", "bbox_overlaps", "(", "gts", "[", "i", "]", ",", "img_proposal", "[", ":", "prop_num", ",", ":", "4", "]", ")", "\n", "", "all_ious", ".", "append", "(", "ious", ")", "\n", "", "all_ious", "=", "np", ".", "array", "(", "all_ious", ")", "\n", "recalls", "=", "_recalls", "(", "all_ious", ",", "proposal_nums", ",", "iou_thrs", ")", "\n", "\n", "print_recall_summary", "(", "recalls", ",", "proposal_nums", ",", "iou_thrs", ",", "logger", "=", "logger", ")", "\n", "return", "recalls", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.recall.print_recall_summary": [[110, 144], ["numpy.array", "numpy.array", "enumerate", "terminaltables.AsciiTable", "mmdet.utils.print_log", "numpy.arange", "numpy.arange", "iou_thrs[].tolist", "row.insert", "table_data.append", "recalls[].tolist"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.print_log"], ["", "def", "print_recall_summary", "(", "recalls", ",", "\n", "proposal_nums", ",", "\n", "iou_thrs", ",", "\n", "row_idxs", "=", "None", ",", "\n", "col_idxs", "=", "None", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"Print recalls in a table.\n\n    Args:\n        recalls (ndarray): calculated from `bbox_recalls`\n        proposal_nums (ndarray or list): top N proposals\n        iou_thrs (ndarray or list): iou thresholds\n        row_idxs (ndarray): which rows(proposal nums) to print\n        col_idxs (ndarray): which cols(iou thresholds) to print\n        logger (logging.Logger | str | None): The way to print the recall\n            summary. See `mmdet.utils.print_log()` for details. Default: None.\n    \"\"\"", "\n", "proposal_nums", "=", "np", ".", "array", "(", "proposal_nums", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "iou_thrs", "=", "np", ".", "array", "(", "iou_thrs", ")", "\n", "if", "row_idxs", "is", "None", ":", "\n", "        ", "row_idxs", "=", "np", ".", "arange", "(", "proposal_nums", ".", "size", ")", "\n", "", "if", "col_idxs", "is", "None", ":", "\n", "        ", "col_idxs", "=", "np", ".", "arange", "(", "iou_thrs", ".", "size", ")", "\n", "", "row_header", "=", "[", "''", "]", "+", "iou_thrs", "[", "col_idxs", "]", ".", "tolist", "(", ")", "\n", "table_data", "=", "[", "row_header", "]", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "proposal_nums", "[", "row_idxs", "]", ")", ":", "\n", "        ", "row", "=", "[", "\n", "'{:.3f}'", ".", "format", "(", "val", ")", "\n", "for", "val", "in", "recalls", "[", "row_idxs", "[", "i", "]", ",", "col_idxs", "]", ".", "tolist", "(", ")", "\n", "]", "\n", "row", ".", "insert", "(", "0", ",", "num", ")", "\n", "table_data", ".", "append", "(", "row", ")", "\n", "", "table", "=", "AsciiTable", "(", "table_data", ")", "\n", "print_log", "(", "'\\n'", "+", "table", ".", "table", ",", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.recall.plot_num_recall": [[146, 169], ["isinstance", "isinstance", "plt.figure", "plt.plot", "plt.xlabel", "plt.ylabel", "plt.axis", "plt.figure.show", "proposal_nums.tolist", "recalls.tolist", "proposal_nums.max"], "function", ["None"], ["", "def", "plot_num_recall", "(", "recalls", ",", "proposal_nums", ")", ":", "\n", "    ", "\"\"\"Plot Proposal_num-Recalls curve.\n\n    Args:\n        recalls(ndarray or list): shape (k,)\n        proposal_nums(ndarray or list): same shape as `recalls`\n    \"\"\"", "\n", "if", "isinstance", "(", "proposal_nums", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_proposal_nums", "=", "proposal_nums", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "_proposal_nums", "=", "proposal_nums", "\n", "", "if", "isinstance", "(", "recalls", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_recalls", "=", "recalls", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "_recalls", "=", "recalls", "\n", "\n", "", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "[", "0", "]", "+", "_proposal_nums", ",", "[", "0", "]", "+", "_recalls", ")", "\n", "plt", ".", "xlabel", "(", "'Proposal num'", ")", "\n", "plt", ".", "ylabel", "(", "'Recall'", ")", "\n", "plt", ".", "axis", "(", "[", "0", ",", "proposal_nums", ".", "max", "(", ")", ",", "0", ",", "1", "]", ")", "\n", "f", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.recall.plot_iou_recall": [[171, 194], ["isinstance", "isinstance", "plt.figure", "plt.plot", "plt.xlabel", "plt.ylabel", "plt.axis", "plt.figure.show", "iou_thrs.tolist", "recalls.tolist", "iou_thrs.min"], "function", ["None"], ["", "def", "plot_iou_recall", "(", "recalls", ",", "iou_thrs", ")", ":", "\n", "    ", "\"\"\"Plot IoU-Recalls curve.\n\n    Args:\n        recalls(ndarray or list): shape (k,)\n        iou_thrs(ndarray or list): same shape as `recalls`\n    \"\"\"", "\n", "if", "isinstance", "(", "iou_thrs", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_iou_thrs", "=", "iou_thrs", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "_iou_thrs", "=", "iou_thrs", "\n", "", "if", "isinstance", "(", "recalls", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_recalls", "=", "recalls", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "_recalls", "=", "recalls", "\n", "\n", "", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "_iou_thrs", "+", "[", "1.0", "]", ",", "_recalls", "+", "[", "0.", "]", ")", "\n", "plt", ".", "xlabel", "(", "'IoU'", ")", "\n", "plt", ".", "ylabel", "(", "'Recall'", ")", "\n", "plt", ".", "axis", "(", "[", "iou_thrs", ".", "min", "(", ")", ",", "1", ",", "0", ",", "1", "]", ")", "\n", "f", ".", "show", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.bbox_overlaps.bbox_overlaps": [[4, 50], ["bboxes1.astype.astype", "bboxes2.astype.astype", "numpy.zeros", "range", "numpy.zeros", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["def", "bbox_overlaps", "(", "bboxes1", ",", "bboxes2", ",", "mode", "=", "'iou'", ")", ":", "\n", "    ", "\"\"\"Calculate the ious between each bbox of bboxes1 and bboxes2.\n\n    Args:\n        bboxes1(ndarray): shape (n, 4)\n        bboxes2(ndarray): shape (k, 4)\n        mode(str): iou (intersection over union) or iof (intersection\n            over foreground)\n\n    Returns:\n        ious(ndarray): shape (n, k)\n    \"\"\"", "\n", "\n", "assert", "mode", "in", "[", "'iou'", ",", "'iof'", "]", "\n", "\n", "bboxes1", "=", "bboxes1", ".", "astype", "(", "np", ".", "float32", ")", "\n", "bboxes2", "=", "bboxes2", ".", "astype", "(", "np", ".", "float32", ")", "\n", "rows", "=", "bboxes1", ".", "shape", "[", "0", "]", "\n", "cols", "=", "bboxes2", ".", "shape", "[", "0", "]", "\n", "ious", "=", "np", ".", "zeros", "(", "(", "rows", ",", "cols", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "rows", "*", "cols", "==", "0", ":", "\n", "        ", "return", "ious", "\n", "", "exchange", "=", "False", "\n", "if", "bboxes1", ".", "shape", "[", "0", "]", ">", "bboxes2", ".", "shape", "[", "0", "]", ":", "\n", "        ", "bboxes1", ",", "bboxes2", "=", "bboxes2", ",", "bboxes1", "\n", "ious", "=", "np", ".", "zeros", "(", "(", "cols", ",", "rows", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "exchange", "=", "True", "\n", "", "area1", "=", "(", "bboxes1", "[", ":", ",", "2", "]", "-", "bboxes1", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "bboxes1", "[", ":", ",", "3", "]", "-", "bboxes1", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "area2", "=", "(", "bboxes2", "[", ":", ",", "2", "]", "-", "bboxes2", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "bboxes2", "[", ":", ",", "3", "]", "-", "bboxes2", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "bboxes1", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "x_start", "=", "np", ".", "maximum", "(", "bboxes1", "[", "i", ",", "0", "]", ",", "bboxes2", "[", ":", ",", "0", "]", ")", "\n", "y_start", "=", "np", ".", "maximum", "(", "bboxes1", "[", "i", ",", "1", "]", ",", "bboxes2", "[", ":", ",", "1", "]", ")", "\n", "x_end", "=", "np", ".", "minimum", "(", "bboxes1", "[", "i", ",", "2", "]", ",", "bboxes2", "[", ":", ",", "2", "]", ")", "\n", "y_end", "=", "np", ".", "minimum", "(", "bboxes1", "[", "i", ",", "3", "]", ",", "bboxes2", "[", ":", ",", "3", "]", ")", "\n", "overlap", "=", "np", ".", "maximum", "(", "x_end", "-", "x_start", "+", "1", ",", "0", ")", "*", "np", ".", "maximum", "(", "\n", "y_end", "-", "y_start", "+", "1", ",", "0", ")", "\n", "if", "mode", "==", "'iou'", ":", "\n", "            ", "union", "=", "area1", "[", "i", "]", "+", "area2", "-", "overlap", "\n", "", "else", ":", "\n", "            ", "union", "=", "area1", "[", "i", "]", "if", "not", "exchange", "else", "area2", "\n", "", "ious", "[", "i", ",", ":", "]", "=", "overlap", "/", "union", "\n", "", "if", "exchange", ":", "\n", "        ", "ious", "=", "ious", ".", "T", "\n", "", "return", "ious", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.class_names.wider_face_classes": [[4, 6], ["None"], "function", ["None"], ["def", "wider_face_classes", "(", ")", ":", "\n", "    ", "return", "[", "'face'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.class_names.voc_classes": [[8, 13], ["None"], "function", ["None"], ["", "def", "voc_classes", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "\n", "'chair'", ",", "'cow'", ",", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "'motorbike'", ",", "'person'", ",", "\n", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "'tvmonitor'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.class_names.imagenet_det_classes": [[16, 54], ["None"], "function", ["None"], ["", "def", "imagenet_det_classes", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'accordion'", ",", "'airplane'", ",", "'ant'", ",", "'antelope'", ",", "'apple'", ",", "'armadillo'", ",", "\n", "'artichoke'", ",", "'axe'", ",", "'baby_bed'", ",", "'backpack'", ",", "'bagel'", ",", "'balance_beam'", ",", "\n", "'banana'", ",", "'band_aid'", ",", "'banjo'", ",", "'baseball'", ",", "'basketball'", ",", "'bathing_cap'", ",", "\n", "'beaker'", ",", "'bear'", ",", "'bee'", ",", "'bell_pepper'", ",", "'bench'", ",", "'bicycle'", ",", "'binder'", ",", "\n", "'bird'", ",", "'bookshelf'", ",", "'bow_tie'", ",", "'bow'", ",", "'bowl'", ",", "'brassiere'", ",", "'burrito'", ",", "\n", "'bus'", ",", "'butterfly'", ",", "'camel'", ",", "'can_opener'", ",", "'car'", ",", "'cart'", ",", "'cattle'", ",", "\n", "'cello'", ",", "'centipede'", ",", "'chain_saw'", ",", "'chair'", ",", "'chime'", ",", "'cocktail_shaker'", ",", "\n", "'coffee_maker'", ",", "'computer_keyboard'", ",", "'computer_mouse'", ",", "'corkscrew'", ",", "\n", "'cream'", ",", "'croquet_ball'", ",", "'crutch'", ",", "'cucumber'", ",", "'cup_or_mug'", ",", "'diaper'", ",", "\n", "'digital_clock'", ",", "'dishwasher'", ",", "'dog'", ",", "'domestic_cat'", ",", "'dragonfly'", ",", "\n", "'drum'", ",", "'dumbbell'", ",", "'electric_fan'", ",", "'elephant'", ",", "'face_powder'", ",", "'fig'", ",", "\n", "'filing_cabinet'", ",", "'flower_pot'", ",", "'flute'", ",", "'fox'", ",", "'french_horn'", ",", "'frog'", ",", "\n", "'frying_pan'", ",", "'giant_panda'", ",", "'goldfish'", ",", "'golf_ball'", ",", "'golfcart'", ",", "\n", "'guacamole'", ",", "'guitar'", ",", "'hair_dryer'", ",", "'hair_spray'", ",", "'hamburger'", ",", "\n", "'hammer'", ",", "'hamster'", ",", "'harmonica'", ",", "'harp'", ",", "'hat_with_a_wide_brim'", ",", "\n", "'head_cabbage'", ",", "'helmet'", ",", "'hippopotamus'", ",", "'horizontal_bar'", ",", "'horse'", ",", "\n", "'hotdog'", ",", "'iPod'", ",", "'isopod'", ",", "'jellyfish'", ",", "'koala_bear'", ",", "'ladle'", ",", "\n", "'ladybug'", ",", "'lamp'", ",", "'laptop'", ",", "'lemon'", ",", "'lion'", ",", "'lipstick'", ",", "'lizard'", ",", "\n", "'lobster'", ",", "'maillot'", ",", "'maraca'", ",", "'microphone'", ",", "'microwave'", ",", "'milk_can'", ",", "\n", "'miniskirt'", ",", "'monkey'", ",", "'motorcycle'", ",", "'mushroom'", ",", "'nail'", ",", "'neck_brace'", ",", "\n", "'oboe'", ",", "'orange'", ",", "'otter'", ",", "'pencil_box'", ",", "'pencil_sharpener'", ",", "'perfume'", ",", "\n", "'person'", ",", "'piano'", ",", "'pineapple'", ",", "'ping-pong_ball'", ",", "'pitcher'", ",", "'pizza'", ",", "\n", "'plastic_bag'", ",", "'plate_rack'", ",", "'pomegranate'", ",", "'popsicle'", ",", "'porcupine'", ",", "\n", "'power_drill'", ",", "'pretzel'", ",", "'printer'", ",", "'puck'", ",", "'punching_bag'", ",", "'purse'", ",", "\n", "'rabbit'", ",", "'racket'", ",", "'ray'", ",", "'red_panda'", ",", "'refrigerator'", ",", "\n", "'remote_control'", ",", "'rubber_eraser'", ",", "'rugby_ball'", ",", "'ruler'", ",", "\n", "'salt_or_pepper_shaker'", ",", "'saxophone'", ",", "'scorpion'", ",", "'screwdriver'", ",", "\n", "'seal'", ",", "'sheep'", ",", "'ski'", ",", "'skunk'", ",", "'snail'", ",", "'snake'", ",", "'snowmobile'", ",", "\n", "'snowplow'", ",", "'soap_dispenser'", ",", "'soccer_ball'", ",", "'sofa'", ",", "'spatula'", ",", "\n", "'squirrel'", ",", "'starfish'", ",", "'stethoscope'", ",", "'stove'", ",", "'strainer'", ",", "\n", "'strawberry'", ",", "'stretcher'", ",", "'sunglasses'", ",", "'swimming_trunks'", ",", "'swine'", ",", "\n", "'syringe'", ",", "'table'", ",", "'tape_player'", ",", "'tennis_ball'", ",", "'tick'", ",", "'tie'", ",", "\n", "'tiger'", ",", "'toaster'", ",", "'traffic_light'", ",", "'train'", ",", "'trombone'", ",", "'trumpet'", ",", "\n", "'turtle'", ",", "'tv_or_monitor'", ",", "'unicycle'", ",", "'vacuum'", ",", "'violin'", ",", "\n", "'volleyball'", ",", "'waffle_iron'", ",", "'washer'", ",", "'water_bottle'", ",", "'watercraft'", ",", "\n", "'whale'", ",", "'wine_bottle'", ",", "'zebra'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.class_names.imagenet_vid_classes": [[57, 64], ["None"], "function", ["None"], ["", "def", "imagenet_vid_classes", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'airplane'", ",", "'antelope'", ",", "'bear'", ",", "'bicycle'", ",", "'bird'", ",", "'bus'", ",", "'car'", ",", "\n", "'cattle'", ",", "'dog'", ",", "'domestic_cat'", ",", "'elephant'", ",", "'fox'", ",", "'giant_panda'", ",", "\n", "'hamster'", ",", "'horse'", ",", "'lion'", ",", "'lizard'", ",", "'monkey'", ",", "'motorcycle'", ",", "'rabbit'", ",", "\n", "'red_panda'", ",", "'sheep'", ",", "'snake'", ",", "'squirrel'", ",", "'tiger'", ",", "'train'", ",", "'turtle'", ",", "\n", "'watercraft'", ",", "'whale'", ",", "'zebra'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.class_names.coco_classes": [[67, 82], ["None"], "function", ["None"], ["", "def", "coco_classes", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'person'", ",", "'bicycle'", ",", "'car'", ",", "'motorcycle'", ",", "'airplane'", ",", "'bus'", ",", "'train'", ",", "\n", "'truck'", ",", "'boat'", ",", "'traffic_light'", ",", "'fire_hydrant'", ",", "'stop_sign'", ",", "\n", "'parking_meter'", ",", "'bench'", ",", "'bird'", ",", "'cat'", ",", "'dog'", ",", "'horse'", ",", "'sheep'", ",", "\n", "'cow'", ",", "'elephant'", ",", "'bear'", ",", "'zebra'", ",", "'giraffe'", ",", "'backpack'", ",", "'umbrella'", ",", "\n", "'handbag'", ",", "'tie'", ",", "'suitcase'", ",", "'frisbee'", ",", "'skis'", ",", "'snowboard'", ",", "\n", "'sports_ball'", ",", "'kite'", ",", "'baseball_bat'", ",", "'baseball_glove'", ",", "'skateboard'", ",", "\n", "'surfboard'", ",", "'tennis_racket'", ",", "'bottle'", ",", "'wine_glass'", ",", "'cup'", ",", "'fork'", ",", "\n", "'knife'", ",", "'spoon'", ",", "'bowl'", ",", "'banana'", ",", "'apple'", ",", "'sandwich'", ",", "'orange'", ",", "\n", "'broccoli'", ",", "'carrot'", ",", "'hot_dog'", ",", "'pizza'", ",", "'donut'", ",", "'cake'", ",", "'chair'", ",", "\n", "'couch'", ",", "'potted_plant'", ",", "'bed'", ",", "'dining_table'", ",", "'toilet'", ",", "'tv'", ",", "\n", "'laptop'", ",", "'mouse'", ",", "'remote'", ",", "'keyboard'", ",", "'cell_phone'", ",", "'microwave'", ",", "\n", "'oven'", ",", "'toaster'", ",", "'sink'", ",", "'refrigerator'", ",", "'book'", ",", "'clock'", ",", "'vase'", ",", "\n", "'scissors'", ",", "'teddy_bear'", ",", "'hair_drier'", ",", "'toothbrush'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.class_names.cityscapes_classes": [[85, 89], ["None"], "function", ["None"], ["", "def", "cityscapes_classes", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'person'", ",", "'rider'", ",", "'car'", ",", "'truck'", ",", "'bus'", ",", "'train'", ",", "'motorcycle'", ",", "\n", "'bicycle'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.class_names.get_classes": [[102, 117], ["dataset_aliases.items", "mmcv.is_str", "TypeError", "eval", "ValueError", "type"], "function", ["None"], ["def", "get_classes", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Get class names of a dataset.\"\"\"", "\n", "alias2name", "=", "{", "}", "\n", "for", "name", ",", "aliases", "in", "dataset_aliases", ".", "items", "(", ")", ":", "\n", "        ", "for", "alias", "in", "aliases", ":", "\n", "            ", "alias2name", "[", "alias", "]", "=", "name", "\n", "\n", "", "", "if", "mmcv", ".", "is_str", "(", "dataset", ")", ":", "\n", "        ", "if", "dataset", "in", "alias2name", ":", "\n", "            ", "labels", "=", "eval", "(", "alias2name", "[", "dataset", "]", "+", "'_classes()'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unrecognized dataset: {}'", ".", "format", "(", "dataset", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'dataset must a str, but got {}'", ".", "format", "(", "type", "(", "dataset", ")", ")", ")", "\n", "", "return", "labels", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.eval_hooks.EvalHook.__init__": [[15, 23], ["isinstance", "TypeError", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataloader", ",", "interval", "=", "1", ",", "**", "eval_kwargs", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "dataloader", ",", "DataLoader", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'dataloader must be a pytorch DataLoader, but got {}'", ".", "format", "(", "\n", "type", "(", "dataloader", ")", ")", ")", "\n", "", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "eval_kwargs", "=", "eval_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.eval_hooks.EvalHook.after_train_epoch": [[24, 30], ["single_gpu_test", "eval_hooks.EvalHook.evaluate", "eval_hooks.EvalHook.every_n_epochs"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test_robustness.single_gpu_test", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.eval_hooks.EvalHook.evaluate"], ["", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "from", "mmdet", ".", "apis", "import", "single_gpu_test", "\n", "results", "=", "single_gpu_test", "(", "runner", ".", "model", ",", "self", ".", "dataloader", ",", "show", "=", "False", ")", "\n", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.eval_hooks.EvalHook.evaluate": [[31, 37], ["eval_hooks.EvalHook.dataloader.dataset.evaluate", "eval_hooks.EvalHook.items"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.eval_hooks.EvalHook.evaluate"], ["", "def", "evaluate", "(", "self", ",", "runner", ",", "results", ")", ":", "\n", "        ", "eval_res", "=", "self", ".", "dataloader", ".", "dataset", ".", "evaluate", "(", "\n", "results", ",", "logger", "=", "runner", ".", "logger", ",", "**", "self", ".", "eval_kwargs", ")", "\n", "for", "name", ",", "val", "in", "eval_res", ".", "items", "(", ")", ":", "\n", "            ", "runner", ".", "log_buffer", ".", "output", "[", "name", "]", "=", "val", "\n", "", "runner", ".", "log_buffer", ".", "ready", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.eval_hooks.DistEvalHook.__init__": [[51, 64], ["isinstance", "TypeError", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "dataloader", ",", "\n", "interval", "=", "1", ",", "\n", "gpu_collect", "=", "False", ",", "\n", "**", "eval_kwargs", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "dataloader", ",", "DataLoader", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'dataloader must be a pytorch DataLoader, but got {}'", ".", "format", "(", "\n", "type", "(", "dataloader", ")", ")", ")", "\n", "", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "gpu_collect", "=", "gpu_collect", "\n", "self", ".", "eval_kwargs", "=", "eval_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.eval_hooks.DistEvalHook.after_train_epoch": [[65, 77], ["multi_gpu_test", "eval_hooks.DistEvalHook.every_n_epochs", "print", "eval_hooks.DistEvalHook.evaluate", "os.join"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test_robustness.multi_gpu_test", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.eval_hooks.EvalHook.evaluate"], ["", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "from", "mmdet", ".", "apis", "import", "multi_gpu_test", "\n", "results", "=", "multi_gpu_test", "(", "\n", "runner", ".", "model", ",", "\n", "self", ".", "dataloader", ",", "\n", "tmpdir", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'.eval_hook'", ")", ",", "\n", "gpu_collect", "=", "self", ".", "gpu_collect", ")", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "'\\n'", ")", "\n", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.optimizer.registry.register_torch_optimizers": [[10, 21], ["dir", "module_name.startswith", "getattr", "inspect.isclass", "issubclass", "OPTIMIZERS.register_module", "torch_optimizers.append"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.register_module"], ["        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_module_dict", "=", "dict", "(", ")", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_str", "=", "self", ".", "__class__", ".", "__name__", "+", "'(name={}, items={})'", ".", "format", "(", "\n", "self", ".", "_name", ",", "list", "(", "self", ".", "_module_dict", ".", "keys", "(", ")", ")", ")", "\n", "return", "format_str", "\n", "\n", "", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.optimizer.builder.build_optimizer": [[9, 102], ["hasattr", "optimizer_cfg.copy.copy", "optimizer_cfg.copy.pop", "mmdet.utils.build_from_cfg", "model.parameters", "isinstance", "optimizer_cfg.copy.get", "optimizer_cfg.pop.get", "optimizer_cfg.pop.get", "optimizer_cfg.pop.get", "optimizer_cfg.pop.get", "dict", "model.named_parameters", "model.named_modules", "re.search", "name.replace().replace", "model.parameters.append", "model.parameters.append", "name.endswith", "name.replace", "isinstance"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.build_from_cfg", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["    ", "ann_files", "=", "cfg", "[", "'ann_file'", "]", "\n", "img_prefixes", "=", "cfg", ".", "get", "(", "'img_prefix'", ",", "None", ")", "\n", "seg_prefixes", "=", "cfg", ".", "get", "(", "'seg_prefix'", ",", "None", ")", "\n", "proposal_files", "=", "cfg", ".", "get", "(", "'proposal_file'", ",", "None", ")", "\n", "\n", "datasets", "=", "[", "]", "\n", "num_dset", "=", "len", "(", "ann_files", ")", "\n", "for", "i", "in", "range", "(", "num_dset", ")", ":", "\n", "        ", "data_cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n", "data_cfg", "[", "'ann_file'", "]", "=", "ann_files", "[", "i", "]", "\n", "if", "isinstance", "(", "img_prefixes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'img_prefix'", "]", "=", "img_prefixes", "[", "i", "]", "\n", "", "if", "isinstance", "(", "seg_prefixes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'seg_prefix'", "]", "=", "seg_prefixes", "[", "i", "]", "\n", "", "if", "isinstance", "(", "proposal_files", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'proposal_file'", "]", "=", "proposal_files", "[", "i", "]", "\n", "", "datasets", ".", "append", "(", "build_dataset", "(", "data_cfg", ",", "default_args", ")", ")", "\n", "\n", "", "return", "ConcatDataset", "(", "datasets", ")", "\n", "\n", "\n", "", "def", "build_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "if", "isinstance", "(", "cfg", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "dataset", "=", "ConcatDataset", "(", "[", "build_dataset", "(", "c", ",", "default_args", ")", "for", "c", "in", "cfg", "]", ")", "\n", "", "elif", "cfg", "[", "'type'", "]", "==", "'RepeatDataset'", ":", "\n", "        ", "dataset", "=", "RepeatDataset", "(", "\n", "build_dataset", "(", "cfg", "[", "'dataset'", "]", ",", "default_args", ")", ",", "cfg", "[", "'times'", "]", ")", "\n", "", "elif", "isinstance", "(", "cfg", ".", "get", "(", "'ann_file'", ")", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "dataset", "=", "_concat_dataset", "(", "cfg", ",", "default_args", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "build_from_cfg", "(", "cfg", ",", "DATASETS", ",", "default_args", ")", "\n", "\n", "", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2delta": [[6, 32], ["proposals.float.float", "gt.float.float", "torch.log", "torch.log", "torch.stack", "deltas.sub_().div_.new_tensor().unsqueeze", "deltas.sub_().div_.new_tensor().unsqueeze", "deltas.sub_().div_.sub_().div_", "proposals.float.size", "gt.float.size", "deltas.sub_().div_.new_tensor", "deltas.sub_().div_.new_tensor", "deltas.sub_().div_.sub_"], "function", ["None"], ["\n", "from", "mmdet", ".", "core", ".", "evaluation", ".", "bbox_overlaps", "import", "bbox_overlaps", "\n", "from", ".", ".", "registry", "import", "PIPELINES", "\n", "\n", "try", ":", "\n", "    ", "from", "imagecorruptions", "import", "corrupt", "\n", "", "except", "ImportError", ":", "\n", "    ", "corrupt", "=", "None", "\n", "\n", "", "try", ":", "\n", "    ", "import", "albumentations", "\n", "from", "albumentations", "import", "Compose", "\n", "", "except", "ImportError", ":", "\n", "    ", "albumentations", "=", "None", "\n", "Compose", "=", "None", "\n", "\n", "\n", "", "@", "PIPELINES", ".", "register_module", "\n", "class", "Resize", "(", "object", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.delta2bbox": [[34, 112], ["deltas.new_tensor().repeat", "deltas.new_tensor().repeat", "numpy.abs", "dw.clamp.clamp", "dh.clamp.clamp", "torch.addcmul", "torch.addcmul", "torch.stack().view_as", "numpy.log", "dw.clamp.exp", "dh.clamp.exp", "x1.clamp.clamp", "y1.clamp.clamp", "x2.clamp.clamp", "y2.clamp.clamp", "deltas.new_tensor", "deltas.size", "deltas.new_tensor", "deltas.size", "torch.stack"], "function", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "\n", "img_scale", "=", "None", ",", "\n", "multiscale_mode", "=", "'range'", ",", "\n", "ratio_range", "=", "None", ",", "\n", "keep_ratio", "=", "True", ")", ":", "\n", "        ", "if", "img_scale", "is", "None", ":", "\n", "            ", "self", ".", "img_scale", "=", "None", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "img_scale", ",", "list", ")", ":", "\n", "                ", "self", ".", "img_scale", "=", "img_scale", "\n", "", "else", ":", "\n", "                ", "self", ".", "img_scale", "=", "[", "img_scale", "]", "\n", "", "assert", "mmcv", ".", "is_list_of", "(", "self", ".", "img_scale", ",", "tuple", ")", "\n", "\n", "", "if", "ratio_range", "is", "not", "None", ":", "\n", "# mode 1: given a scale and a range of image ratio", "\n", "            ", "assert", "len", "(", "self", ".", "img_scale", ")", "==", "1", "\n", "", "else", ":", "\n", "# mode 2: given multiple scales or a range of scales", "\n", "            ", "assert", "multiscale_mode", "in", "[", "'value'", ",", "'range'", "]", "\n", "\n", "", "self", ".", "multiscale_mode", "=", "multiscale_mode", "\n", "self", ".", "ratio_range", "=", "ratio_range", "\n", "self", ".", "keep_ratio", "=", "keep_ratio", "\n", "\n", "", "@", "staticmethod", "\n", "def", "random_select", "(", "img_scales", ")", ":", "\n", "        ", "assert", "mmcv", ".", "is_list_of", "(", "img_scales", ",", "tuple", ")", "\n", "scale_idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "img_scales", ")", ")", "\n", "img_scale", "=", "img_scales", "[", "scale_idx", "]", "\n", "return", "img_scale", ",", "scale_idx", "\n", "\n", "", "@", "staticmethod", "\n", "def", "random_sample", "(", "img_scales", ")", ":", "\n", "        ", "assert", "mmcv", ".", "is_list_of", "(", "img_scales", ",", "tuple", ")", "and", "len", "(", "img_scales", ")", "==", "2", "\n", "img_scale_long", "=", "[", "max", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "img_scale_short", "=", "[", "min", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "long_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_long", ")", ",", "\n", "max", "(", "img_scale_long", ")", "+", "1", ")", "\n", "short_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_short", ")", ",", "\n", "max", "(", "img_scale_short", ")", "+", "1", ")", "\n", "img_scale", "=", "(", "long_edge", ",", "short_edge", ")", "\n", "return", "img_scale", ",", "None", "\n", "\n", "", "@", "staticmethod", "\n", "def", "random_sample_ratio", "(", "img_scale", ",", "ratio_range", ")", ":", "\n", "        ", "assert", "isinstance", "(", "img_scale", ",", "tuple", ")", "and", "len", "(", "img_scale", ")", "==", "2", "\n", "min_ratio", ",", "max_ratio", "=", "ratio_range", "\n", "assert", "min_ratio", "<=", "max_ratio", "\n", "ratio", "=", "np", ".", "random", ".", "random_sample", "(", ")", "*", "(", "max_ratio", "-", "min_ratio", ")", "+", "min_ratio", "\n", "scale", "=", "int", "(", "img_scale", "[", "0", "]", "*", "ratio", ")", ",", "int", "(", "img_scale", "[", "1", "]", "*", "ratio", ")", "\n", "return", "scale", ",", "None", "\n", "\n", "", "def", "_random_scale", "(", "self", ",", "results", ")", ":", "\n", "        ", "if", "self", ".", "ratio_range", "is", "not", "None", ":", "\n", "            ", "scale", ",", "scale_idx", "=", "self", ".", "random_sample_ratio", "(", "\n", "self", ".", "img_scale", "[", "0", "]", ",", "self", ".", "ratio_range", ")", "\n", "", "elif", "len", "(", "self", ".", "img_scale", ")", "==", "1", ":", "\n", "            ", "scale", ",", "scale_idx", "=", "self", ".", "img_scale", "[", "0", "]", ",", "0", "\n", "", "elif", "self", ".", "multiscale_mode", "==", "'range'", ":", "\n", "            ", "scale", ",", "scale_idx", "=", "self", ".", "random_sample", "(", "self", ".", "img_scale", ")", "\n", "", "elif", "self", ".", "multiscale_mode", "==", "'value'", ":", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox_flip": [[114, 132], ["isinstance", "bboxes.clone", "isinstance", "mmcv.bbox_flip"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox_flip"], ["", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "results", "[", "'scale'", "]", "=", "scale", "\n", "results", "[", "'scale_idx'", "]", "=", "scale_idx", "\n", "\n", "", "def", "_resize_img", "(", "self", ",", "results", ")", ":", "\n", "        ", "if", "self", ".", "keep_ratio", ":", "\n", "            ", "img", ",", "scale_factor", "=", "mmcv", ".", "imrescale", "(", "\n", "results", "[", "'img'", "]", ",", "results", "[", "'scale'", "]", ",", "return_scale", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "img", ",", "w_scale", ",", "h_scale", "=", "mmcv", ".", "imresize", "(", "\n", "results", "[", "'img'", "]", ",", "results", "[", "'scale'", "]", ",", "return_scale", "=", "True", ")", "\n", "scale_factor", "=", "np", ".", "array", "(", "[", "w_scale", ",", "h_scale", ",", "w_scale", ",", "h_scale", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "# in case that there is no padding", "\n", "results", "[", "'scale_factor'", "]", "=", "scale_factor", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox_mapping": [[134, 140], ["transforms.bbox_flip"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox_flip"], ["\n", "", "def", "_resize_bboxes", "(", "self", ",", "results", ")", ":", "\n", "        ", "img_shape", "=", "results", "[", "'img_shape'", "]", "\n", "for", "key", "in", "results", ".", "get", "(", "'bbox_fields'", ",", "[", "]", ")", ":", "\n", "            ", "bboxes", "=", "results", "[", "key", "]", "*", "results", "[", "'scale_factor'", "]", "\n", "bboxes", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "bboxes", "[", ":", ",", "0", ":", ":", "2", "]", ",", "0", ",", "img_shape", "[", "1", "]", "-", "1", ")", "\n", "bboxes", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "bboxes", "[", ":", ",", "1", ":", ":", "2", "]", ",", "0", ",", "img_shape", "[", "0", "]", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox_mapping_back": [[142, 147], ["transforms.bbox_flip"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox_flip"], ["\n", "", "", "def", "_resize_masks", "(", "self", ",", "results", ")", ":", "\n", "        ", "for", "key", "in", "results", ".", "get", "(", "'mask_fields'", ",", "[", "]", ")", ":", "\n", "            ", "if", "results", "[", "key", "]", "is", "None", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "keep_ratio", ":", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi": [[149, 169], ["enumerate", "torch.cat", "rois_list.append", "bboxes.size", "bboxes.new_full", "torch.cat", "bboxes.new_zeros", "bboxes.size"], "function", ["None"], ["mmcv", ".", "imrescale", "(", "\n", "mask", ",", "results", "[", "'scale_factor'", "]", ",", "interpolation", "=", "'nearest'", ")", "\n", "for", "mask", "in", "results", "[", "key", "]", "\n", "]", "\n", "", "else", ":", "\n", "                ", "mask_size", "=", "(", "results", "[", "'img_shape'", "]", "[", "1", "]", ",", "results", "[", "'img_shape'", "]", "[", "0", "]", ")", "\n", "masks", "=", "[", "\n", "mmcv", ".", "imresize", "(", "mask", ",", "mask_size", ",", "interpolation", "=", "'nearest'", ")", "\n", "for", "mask", "in", "results", "[", "key", "]", "\n", "]", "\n", "", "if", "masks", ":", "\n", "                ", "results", "[", "key", "]", "=", "np", ".", "stack", "(", "masks", ")", "\n", "", "else", ":", "\n", "                ", "results", "[", "key", "]", "=", "np", ".", "empty", "(", "\n", "(", "0", ",", ")", "+", "results", "[", "'img_shape'", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "", "", "def", "_resize_seg", "(", "self", ",", "results", ")", ":", "\n", "        ", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "            ", "if", "self", ".", "keep_ratio", ":", "\n", "                ", "gt_seg", "=", "mmcv", ".", "imrescale", "(", "\n", "results", "[", "key", "]", ",", "results", "[", "'scale'", "]", ",", "interpolation", "=", "'nearest'", ")", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.roi2bbox": [[171, 179], ["torch.unique", "rois[].cpu", "bbox_list.append", "img_id.item"], "function", ["None"], ["                ", "gt_seg", "=", "mmcv", ".", "imresize", "(", "\n", "results", "[", "key", "]", ",", "results", "[", "'scale'", "]", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "results", "[", "'gt_semantic_seg'", "]", "=", "gt_seg", "\n", "\n", "", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "if", "'scale'", "not", "in", "results", ":", "\n", "            ", "self", ".", "_random_scale", "(", "results", ")", "\n", "", "self", ".", "_resize_img", "(", "results", ")", "\n", "self", ".", "_resize_bboxes", "(", "results", ")", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2result": [[181, 200], ["bboxes.cpu().numpy.cpu().numpy", "labels.cpu().numpy.cpu().numpy", "numpy.zeros", "range", "bboxes.cpu().numpy.cpu", "labels.cpu().numpy.cpu", "range"], "function", ["None"], ["self", ".", "_resize_seg", "(", "results", ")", "\n", "return", "results", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "(", "'(img_scale={}, multiscale_mode={}, ratio_range={}, '", "\n", "'keep_ratio={})'", ")", ".", "format", "(", "self", ".", "img_scale", ",", "\n", "self", ".", "multiscale_mode", ",", "\n", "self", ".", "ratio_range", ",", "\n", "self", ".", "keep_ratio", ")", "\n", "return", "repr_str", "\n", "\n", "\n", "", "", "@", "PIPELINES", ".", "register_module", "\n", "class", "RandomFlip", "(", "object", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.distance2bbox": [[202, 224], ["torch.stack", "x1.clamp.clamp", "y1.clamp.clamp", "x2.clamp.clamp", "y2.clamp.clamp"], "function", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "flip_ratio", "=", "None", ",", "direction", "=", "'horizontal'", ")", ":", "\n", "        ", "self", ".", "flip_ratio", "=", "flip_ratio", "\n", "self", ".", "direction", "=", "direction", "\n", "if", "flip_ratio", "is", "not", "None", ":", "\n", "            ", "assert", "flip_ratio", ">=", "0", "and", "flip_ratio", "<=", "1", "\n", "", "assert", "direction", "in", "[", "'horizontal'", ",", "'vertical'", "]", "\n", "\n", "", "def", "bbox_flip", "(", "self", ",", "bboxes", ",", "img_shape", ",", "direction", ")", ":", "\n", "        ", "\"\"\"Flip bboxes horizontally.\n\n        Args:\n            bboxes(ndarray): shape (..., 4*k)\n            img_shape(tuple): (height, width)\n        \"\"\"", "\n", "assert", "bboxes", ".", "shape", "[", "-", "1", "]", "%", "4", "==", "0", "\n", "flipped", "=", "bboxes", ".", "copy", "(", ")", "\n", "if", "direction", "==", "'horizontal'", ":", "\n", "            ", "w", "=", "img_shape", "[", "1", "]", "\n", "flipped", "[", "...", ",", "0", ":", ":", "4", "]", "=", "w", "-", "bboxes", "[", "...", ",", "2", ":", ":", "4", "]", "-", "1", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_assigner": [[6, 14], ["isinstance", "isinstance", "mmcv.runner.obj_from_dict", "TypeError", "type"], "function", ["None"], ["def", "build_assigner", "(", "cfg", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "isinstance", "(", "cfg", ",", "assigners", ".", "BaseAssigner", ")", ":", "\n", "        ", "return", "cfg", "\n", "", "elif", "isinstance", "(", "cfg", ",", "dict", ")", ":", "\n", "        ", "return", "mmcv", ".", "runner", ".", "obj_from_dict", "(", "cfg", ",", "assigners", ",", "default_args", "=", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Invalid type {} for building a sampler'", ".", "format", "(", "\n", "type", "(", "cfg", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_sampler": [[16, 24], ["isinstance", "isinstance", "mmcv.runner.obj_from_dict", "TypeError", "type"], "function", ["None"], ["", "", "def", "build_sampler", "(", "cfg", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "isinstance", "(", "cfg", ",", "samplers", ".", "BaseSampler", ")", ":", "\n", "        ", "return", "cfg", "\n", "", "elif", "isinstance", "(", "cfg", ",", "dict", ")", ":", "\n", "        ", "return", "mmcv", ".", "runner", ".", "obj_from_dict", "(", "cfg", ",", "samplers", ",", "default_args", "=", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Invalid type {} for building a sampler'", ".", "format", "(", "\n", "type", "(", "cfg", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.assign_and_sample": [[26, 34], ["assign_sampling.build_assigner", "assign_sampling.build_sampler", "build_assigner.assign", "build_sampler.sample"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_assigner", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_sampler", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "", "def", "assign_and_sample", "(", "bboxes", ",", "gt_bboxes", ",", "gt_bboxes_ignore", ",", "gt_labels", ",", "cfg", ")", ":", "\n", "    ", "bbox_assigner", "=", "build_assigner", "(", "cfg", ".", "assigner", ")", "\n", "bbox_sampler", "=", "build_sampler", "(", "cfg", ".", "sampler", ")", "\n", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ",", "gt_bboxes_ignore", ",", "\n", "gt_labels", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "\n", "gt_labels", ")", "\n", "return", "assign_result", ",", "sampling_result", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.demodata.ensure_rng": [[5, 28], ["isinstance", "numpy.random.RandomState", "numpy.np.float32"], "function", ["None"], ["def", "ensure_rng", "(", "rng", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Simple version of the ``kwarray.ensure_rng``\n\n    Args:\n        rng (int | numpy.random.RandomState | None):\n            if None, then defaults to the global rng. Otherwise this can be an\n            integer or a RandomState class\n    Returns:\n        (numpy.random.RandomState) : rng -\n            a numpy random number generator\n\n    References:\n        https://gitlab.kitware.com/computer-vision/kwarray/blob/master/kwarray/util_random.py#L270\n    \"\"\"", "\n", "\n", "if", "rng", "is", "None", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "mtrand", ".", "_rand", "\n", "", "elif", "isinstance", "(", "rng", ",", "int", ")", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "rng", ")", "\n", "", "else", ":", "\n", "        ", "rng", "=", "rng", "\n", "", "return", "rng", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.demodata.random_boxes": [[30, 66], ["demodata.ensure_rng", "ensure_rng.rand().astype", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "torch.from_numpy", "ensure_rng.rand"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.demodata.ensure_rng"], ["", "def", "random_boxes", "(", "num", "=", "1", ",", "scale", "=", "1", ",", "rng", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Simple version of ``kwimage.Boxes.random``\n\n    Returns:\n        Tensor: shape (n, 4) in x1, y1, x2, y2 format.\n\n    References:\n        https://gitlab.kitware.com/computer-vision/kwimage/blob/master/kwimage/structs/boxes.py#L1390\n\n    Example:\n        >>> num = 3\n        >>> scale = 512\n        >>> rng = 0\n        >>> boxes = random_boxes(num, scale, rng)\n        >>> print(boxes)\n        tensor([[280.9925, 278.9802, 308.6148, 366.1769],\n                [216.9113, 330.6978, 224.0446, 456.5878],\n                [405.3632, 196.3221, 493.3953, 270.7942]])\n    \"\"\"", "\n", "rng", "=", "ensure_rng", "(", "rng", ")", "\n", "\n", "tlbr", "=", "rng", ".", "rand", "(", "num", ",", "4", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "tl_x", "=", "np", ".", "minimum", "(", "tlbr", "[", ":", ",", "0", "]", ",", "tlbr", "[", ":", ",", "2", "]", ")", "\n", "tl_y", "=", "np", ".", "minimum", "(", "tlbr", "[", ":", ",", "1", "]", ",", "tlbr", "[", ":", ",", "3", "]", ")", "\n", "br_x", "=", "np", ".", "maximum", "(", "tlbr", "[", ":", ",", "0", "]", ",", "tlbr", "[", ":", ",", "2", "]", ")", "\n", "br_y", "=", "np", ".", "maximum", "(", "tlbr", "[", ":", ",", "1", "]", ",", "tlbr", "[", ":", ",", "3", "]", ")", "\n", "\n", "tlbr", "[", ":", ",", "0", "]", "=", "tl_x", "*", "scale", "\n", "tlbr", "[", ":", ",", "1", "]", "=", "tl_y", "*", "scale", "\n", "tlbr", "[", ":", ",", "2", "]", "=", "br_x", "*", "scale", "\n", "tlbr", "[", ":", ",", "3", "]", "=", "br_y", "*", "scale", "\n", "\n", "boxes", "=", "torch", ".", "from_numpy", "(", "tlbr", ")", "\n", "return", "boxes", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.geometry.bbox_overlaps": [[4, 89], ["bboxes1.size", "bboxes2.size", "torch.max", "torch.min", "torch.max", "torch.min", "bboxes1.new", "bboxes1.new"], "function", ["None"], ["def", "bbox_overlaps", "(", "bboxes1", ",", "bboxes2", ",", "mode", "=", "'iou'", ",", "is_aligned", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculate overlap between two set of bboxes.\n\n    If ``is_aligned`` is ``False``, then calculate the ious between each bbox\n    of bboxes1 and bboxes2, otherwise the ious between each aligned pair of\n    bboxes1 and bboxes2.\n\n    Args:\n        bboxes1 (Tensor): shape (m, 4) in <x1, y1, x2, y2> format.\n        bboxes2 (Tensor): shape (n, 4) in <x1, y1, x2, y2> format.\n            If is_aligned is ``True``, then m and n must be equal.\n        mode (str): \"iou\" (intersection over union) or iof (intersection over\n            foreground).\n\n    Returns:\n        ious(Tensor): shape (m, n) if is_aligned == False else shape (m, 1)\n\n    Example:\n        >>> bboxes1 = torch.FloatTensor([\n        >>>     [0, 0, 10, 10],\n        >>>     [10, 10, 20, 20],\n        >>>     [32, 32, 38, 42],\n        >>> ])\n        >>> bboxes2 = torch.FloatTensor([\n        >>>     [0, 0, 10, 20],\n        >>>     [0, 10, 10, 19],\n        >>>     [10, 10, 20, 20],\n        >>> ])\n        >>> bbox_overlaps(bboxes1, bboxes2)\n        tensor([[0.5238, 0.0500, 0.0041],\n                [0.0323, 0.0452, 1.0000],\n                [0.0000, 0.0000, 0.0000]])\n\n    Example:\n        >>> empty = torch.FloatTensor([])\n        >>> nonempty = torch.FloatTensor([\n        >>>     [0, 0, 10, 9],\n        >>> ])\n        >>> assert tuple(bbox_overlaps(empty, nonempty).shape) == (0, 1)\n        >>> assert tuple(bbox_overlaps(nonempty, empty).shape) == (1, 0)\n        >>> assert tuple(bbox_overlaps(empty, empty).shape) == (0, 0)\n    \"\"\"", "\n", "\n", "assert", "mode", "in", "[", "'iou'", ",", "'iof'", "]", "\n", "\n", "rows", "=", "bboxes1", ".", "size", "(", "0", ")", "\n", "cols", "=", "bboxes2", ".", "size", "(", "0", ")", "\n", "if", "is_aligned", ":", "\n", "        ", "assert", "rows", "==", "cols", "\n", "\n", "", "if", "rows", "*", "cols", "==", "0", ":", "\n", "        ", "return", "bboxes1", ".", "new", "(", "rows", ",", "1", ")", "if", "is_aligned", "else", "bboxes1", ".", "new", "(", "rows", ",", "cols", ")", "\n", "\n", "", "if", "is_aligned", ":", "\n", "        ", "lt", "=", "torch", ".", "max", "(", "bboxes1", "[", ":", ",", ":", "2", "]", ",", "bboxes2", "[", ":", ",", ":", "2", "]", ")", "# [rows, 2]", "\n", "rb", "=", "torch", ".", "min", "(", "bboxes1", "[", ":", ",", "2", ":", "]", ",", "bboxes2", "[", ":", ",", "2", ":", "]", ")", "# [rows, 2]", "\n", "\n", "wh", "=", "(", "rb", "-", "lt", "+", "1", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [rows, 2]", "\n", "overlap", "=", "wh", "[", ":", ",", "0", "]", "*", "wh", "[", ":", ",", "1", "]", "\n", "area1", "=", "(", "bboxes1", "[", ":", ",", "2", "]", "-", "bboxes1", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "bboxes1", "[", ":", ",", "3", "]", "-", "bboxes1", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "\n", "if", "mode", "==", "'iou'", ":", "\n", "            ", "area2", "=", "(", "bboxes2", "[", ":", ",", "2", "]", "-", "bboxes2", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "bboxes2", "[", ":", ",", "3", "]", "-", "bboxes2", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "ious", "=", "overlap", "/", "(", "area1", "+", "area2", "-", "overlap", ")", "\n", "", "else", ":", "\n", "            ", "ious", "=", "overlap", "/", "area1", "\n", "", "", "else", ":", "\n", "        ", "lt", "=", "torch", ".", "max", "(", "bboxes1", "[", ":", ",", "None", ",", ":", "2", "]", ",", "bboxes2", "[", ":", ",", ":", "2", "]", ")", "# [rows, cols, 2]", "\n", "rb", "=", "torch", ".", "min", "(", "bboxes1", "[", ":", ",", "None", ",", "2", ":", "]", ",", "bboxes2", "[", ":", ",", "2", ":", "]", ")", "# [rows, cols, 2]", "\n", "\n", "wh", "=", "(", "rb", "-", "lt", "+", "1", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [rows, cols, 2]", "\n", "overlap", "=", "wh", "[", ":", ",", ":", ",", "0", "]", "*", "wh", "[", ":", ",", ":", ",", "1", "]", "\n", "area1", "=", "(", "bboxes1", "[", ":", ",", "2", "]", "-", "bboxes1", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "bboxes1", "[", ":", ",", "3", "]", "-", "bboxes1", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "\n", "if", "mode", "==", "'iou'", ":", "\n", "            ", "area2", "=", "(", "bboxes2", "[", ":", ",", "2", "]", "-", "bboxes2", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "bboxes2", "[", ":", ",", "3", "]", "-", "bboxes2", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "ious", "=", "overlap", "/", "(", "area1", "[", ":", ",", "None", "]", "+", "area2", "-", "overlap", ")", "\n", "", "else", ":", "\n", "            ", "ious", "=", "overlap", "/", "(", "area1", "[", ":", ",", "None", "]", ")", "\n", "\n", "", "", "return", "ious", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.bbox_target.bbox_target": [[7, 33], ["utils.multi_apply", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.misc.multi_apply"], ["def", "bbox_target", "(", "pos_bboxes_list", ",", "\n", "neg_bboxes_list", ",", "\n", "pos_gt_bboxes_list", ",", "\n", "pos_gt_labels_list", ",", "\n", "cfg", ",", "\n", "reg_classes", "=", "1", ",", "\n", "target_means", "=", "[", ".0", ",", ".0", ",", ".0", ",", ".0", "]", ",", "\n", "target_stds", "=", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", ",", "\n", "concat", "=", "True", ")", ":", "\n", "    ", "labels", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", "=", "multi_apply", "(", "\n", "bbox_target_single", ",", "\n", "pos_bboxes_list", ",", "\n", "neg_bboxes_list", ",", "\n", "pos_gt_bboxes_list", ",", "\n", "pos_gt_labels_list", ",", "\n", "cfg", "=", "cfg", ",", "\n", "reg_classes", "=", "reg_classes", ",", "\n", "target_means", "=", "target_means", ",", "\n", "target_stds", "=", "target_stds", ")", "\n", "\n", "if", "concat", ":", "\n", "        ", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "0", ")", "\n", "label_weights", "=", "torch", ".", "cat", "(", "label_weights", ",", "0", ")", "\n", "bbox_targets", "=", "torch", ".", "cat", "(", "bbox_targets", ",", "0", ")", "\n", "bbox_weights", "=", "torch", ".", "cat", "(", "bbox_weights", ",", "0", ")", "\n", "", "return", "labels", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.bbox_target.bbox_target_single": [[35, 62], ["pos_bboxes.size", "neg_bboxes.size", "pos_bboxes.new_zeros", "pos_bboxes.new_zeros", "pos_bboxes.new_zeros", "pos_bboxes.new_zeros", "transforms.bbox2delta"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2delta"], ["", "def", "bbox_target_single", "(", "pos_bboxes", ",", "\n", "neg_bboxes", ",", "\n", "pos_gt_bboxes", ",", "\n", "pos_gt_labels", ",", "\n", "cfg", ",", "\n", "reg_classes", "=", "1", ",", "\n", "target_means", "=", "[", ".0", ",", ".0", ",", ".0", ",", ".0", "]", ",", "\n", "target_stds", "=", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", ")", ":", "\n", "    ", "num_pos", "=", "pos_bboxes", ".", "size", "(", "0", ")", "\n", "num_neg", "=", "neg_bboxes", ".", "size", "(", "0", ")", "\n", "num_samples", "=", "num_pos", "+", "num_neg", "\n", "labels", "=", "pos_bboxes", ".", "new_zeros", "(", "num_samples", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "label_weights", "=", "pos_bboxes", ".", "new_zeros", "(", "num_samples", ")", "\n", "bbox_targets", "=", "pos_bboxes", ".", "new_zeros", "(", "num_samples", ",", "4", ")", "\n", "bbox_weights", "=", "pos_bboxes", ".", "new_zeros", "(", "num_samples", ",", "4", ")", "\n", "if", "num_pos", ">", "0", ":", "\n", "        ", "labels", "[", ":", "num_pos", "]", "=", "pos_gt_labels", "\n", "pos_weight", "=", "1.0", "if", "cfg", ".", "pos_weight", "<=", "0", "else", "cfg", ".", "pos_weight", "\n", "label_weights", "[", ":", "num_pos", "]", "=", "pos_weight", "\n", "pos_bbox_targets", "=", "bbox2delta", "(", "pos_bboxes", ",", "pos_gt_bboxes", ",", "target_means", ",", "\n", "target_stds", ")", "\n", "bbox_targets", "[", ":", "num_pos", ",", ":", "]", "=", "pos_bbox_targets", "\n", "bbox_weights", "[", ":", "num_pos", ",", ":", "]", "=", "1", "\n", "", "if", "num_neg", ">", "0", ":", "\n", "        ", "label_weights", "[", "-", "num_neg", ":", "]", "=", "1.0", "\n", "\n", "", "return", "labels", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.bbox_target.expand_target": [[64, 74], ["bbox_targets.new_zeros", "bbox_weights.new_zeros", "torch.nonzero().squeeze", "bbox_targets.size", "bbox_weights.size", "torch.nonzero"], "function", ["None"], ["", "def", "expand_target", "(", "bbox_targets", ",", "bbox_weights", ",", "labels", ",", "num_classes", ")", ":", "\n", "    ", "bbox_targets_expand", "=", "bbox_targets", ".", "new_zeros", "(", "\n", "(", "bbox_targets", ".", "size", "(", "0", ")", ",", "4", "*", "num_classes", ")", ")", "\n", "bbox_weights_expand", "=", "bbox_weights", ".", "new_zeros", "(", "\n", "(", "bbox_weights", ".", "size", "(", "0", ")", ",", "4", "*", "num_classes", ")", ")", "\n", "for", "i", "in", "torch", ".", "nonzero", "(", "labels", ">", "0", ")", ".", "squeeze", "(", "-", "1", ")", ":", "\n", "        ", "start", ",", "end", "=", "labels", "[", "i", "]", "*", "4", ",", "(", "labels", "[", "i", "]", "+", "1", ")", "*", "4", "\n", "bbox_targets_expand", "[", "i", ",", "start", ":", "end", "]", "=", "bbox_targets", "[", "i", ",", ":", "]", "\n", "bbox_weights_expand", "[", "i", ",", "start", ":", "end", "]", "=", "bbox_weights", "[", "i", ",", ":", "]", "\n", "", "return", "bbox_targets_expand", ",", "bbox_weights_expand", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.base_sampler.BaseSampler.__init__": [[10, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num", ",", "\n", "pos_fraction", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "num", "=", "num", "\n", "self", ".", "pos_fraction", "=", "pos_fraction", "\n", "self", ".", "neg_pos_ub", "=", "neg_pos_ub", "\n", "self", ".", "add_gt_as_proposals", "=", "add_gt_as_proposals", "\n", "self", ".", "pos_sampler", "=", "self", "\n", "self", ".", "neg_sampler", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.base_sampler.BaseSampler._sample_pos": [[23, 26], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_sample_pos", "(", "self", ",", "assign_result", ",", "num_expected", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.base_sampler.BaseSampler._sample_neg": [[27, 30], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_sample_neg", "(", "self", ",", "assign_result", ",", "num_expected", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.base_sampler.BaseSampler.sample": [[31, 99], ["torch.cat.new_zeros", "int", "base_sampler.BaseSampler.pos_sampler._sample_pos", "pos_inds.unique.unique.unique", "pos_inds.unique.unique.numel", "base_sampler.BaseSampler.neg_sampler._sample_neg", "neg_inds.unique.unique.unique", "sampling_result.SamplingResult.SamplingResult", "len", "torch.cat", "assign_result.add_gt_", "torch.cat.new_ones", "torch.cat", "max", "int", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler._sample_pos", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler._sample_neg", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.add_gt_"], ["", "def", "sample", "(", "self", ",", "\n", "assign_result", ",", "\n", "bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Sample positive and negative bboxes.\n\n        This is a simple implementation of bbox sampling given candidates,\n        assigning results and ground truth bboxes.\n\n        Args:\n            assign_result (:obj:`AssignResult`): Bbox assigning results.\n            bboxes (Tensor): Boxes to be sampled from.\n            gt_bboxes (Tensor): Ground truth bboxes.\n            gt_labels (Tensor, optional): Class labels of ground truth bboxes.\n\n        Returns:\n            :obj:`SamplingResult`: Sampling result.\n\n        Example:\n            >>> from mmdet.core.bbox import RandomSampler\n            >>> from mmdet.core.bbox import AssignResult\n            >>> from mmdet.core.bbox.demodata import ensure_rng, random_boxes\n            >>> rng = ensure_rng(None)\n            >>> assign_result = AssignResult.random(rng=rng)\n            >>> bboxes = random_boxes(assign_result.num_preds, rng=rng)\n            >>> gt_bboxes = random_boxes(assign_result.num_gts, rng=rng)\n            >>> gt_labels = None\n            >>> self = RandomSampler(num=32, pos_fraction=0.5, neg_pos_ub=-1,\n            >>>                      add_gt_as_proposals=False)\n            >>> self = self.sample(assign_result, bboxes, gt_bboxes, gt_labels)\n        \"\"\"", "\n", "if", "len", "(", "bboxes", ".", "shape", ")", "<", "2", ":", "\n", "            ", "bboxes", "=", "bboxes", "[", "None", ",", ":", "]", "\n", "\n", "", "bboxes", "=", "bboxes", "[", ":", ",", ":", "4", "]", "\n", "\n", "gt_flags", "=", "bboxes", ".", "new_zeros", "(", "(", "bboxes", ".", "shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "if", "self", ".", "add_gt_as_proposals", "and", "len", "(", "gt_bboxes", ")", ">", "0", ":", "\n", "            ", "if", "gt_labels", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'gt_labels must be given when add_gt_as_proposals is True'", ")", "\n", "", "bboxes", "=", "torch", ".", "cat", "(", "[", "gt_bboxes", ",", "bboxes", "]", ",", "dim", "=", "0", ")", "\n", "assign_result", ".", "add_gt_", "(", "gt_labels", ")", "\n", "gt_ones", "=", "bboxes", ".", "new_ones", "(", "gt_bboxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "gt_flags", "=", "torch", ".", "cat", "(", "[", "gt_ones", ",", "gt_flags", "]", ")", "\n", "\n", "", "num_expected_pos", "=", "int", "(", "self", ".", "num", "*", "self", ".", "pos_fraction", ")", "\n", "pos_inds", "=", "self", ".", "pos_sampler", ".", "_sample_pos", "(", "\n", "assign_result", ",", "num_expected_pos", ",", "bboxes", "=", "bboxes", ",", "**", "kwargs", ")", "\n", "# We found that sampled indices have duplicated items occasionally.", "\n", "# (may be a bug of PyTorch)", "\n", "pos_inds", "=", "pos_inds", ".", "unique", "(", ")", "\n", "num_sampled_pos", "=", "pos_inds", ".", "numel", "(", ")", "\n", "num_expected_neg", "=", "self", ".", "num", "-", "num_sampled_pos", "\n", "if", "self", ".", "neg_pos_ub", ">=", "0", ":", "\n", "            ", "_pos", "=", "max", "(", "1", ",", "num_sampled_pos", ")", "\n", "neg_upper_bound", "=", "int", "(", "self", ".", "neg_pos_ub", "*", "_pos", ")", "\n", "if", "num_expected_neg", ">", "neg_upper_bound", ":", "\n", "                ", "num_expected_neg", "=", "neg_upper_bound", "\n", "", "", "neg_inds", "=", "self", ".", "neg_sampler", ".", "_sample_neg", "(", "\n", "assign_result", ",", "num_expected_neg", ",", "bboxes", "=", "bboxes", ",", "**", "kwargs", ")", "\n", "neg_inds", "=", "neg_inds", ".", "unique", "(", ")", "\n", "\n", "sampling_result", "=", "SamplingResult", "(", "pos_inds", ",", "neg_inds", ",", "bboxes", ",", "gt_bboxes", ",", "\n", "assign_result", ",", "gt_flags", ")", "\n", "return", "sampling_result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.random_sampler.RandomSampler.__init__": [[8, 18], ["base_sampler.BaseSampler.__init__", "demodata.ensure_rng", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.demodata.ensure_rng", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num", ",", "\n", "pos_fraction", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "from", "mmdet", ".", "core", ".", "bbox", "import", "demodata", "\n", "super", "(", "RandomSampler", ",", "self", ")", ".", "__init__", "(", "num", ",", "pos_fraction", ",", "neg_pos_ub", ",", "\n", "add_gt_as_proposals", ")", "\n", "self", ".", "rng", "=", "demodata", ".", "ensure_rng", "(", "kwargs", ".", "get", "(", "'rng'", ",", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.random_sampler.RandomSampler.random_choice": [[19, 44], ["isinstance", "len", "torch.tensor", "torch.randperm", "rand_inds.cpu().numpy.cpu().numpy.cpu().numpy", "torch.tensor.numel", "torch.cuda.current_device", "rand_inds.cpu().numpy.cpu().numpy.cpu"], "methods", ["None"], ["", "def", "random_choice", "(", "self", ",", "gallery", ",", "num", ")", ":", "\n", "        ", "\"\"\"Random select some elements from the gallery.\n\n        If `gallery` is a Tensor, the returned indices will be a Tensor;\n        If `gallery` is a ndarray or list, the returned indices will be a\n        ndarray.\n\n        Args:\n            gallery (Tensor | ndarray | list): indices pool.\n            num (int): expected sample num.\n\n        Returns:\n            Tensor or ndarray: sampled indices.\n        \"\"\"", "\n", "assert", "len", "(", "gallery", ")", ">=", "num", "\n", "\n", "is_tensor", "=", "isinstance", "(", "gallery", ",", "torch", ".", "Tensor", ")", "\n", "if", "not", "is_tensor", ":", "\n", "            ", "gallery", "=", "torch", ".", "tensor", "(", "\n", "gallery", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", ")", "\n", "", "perm", "=", "torch", ".", "randperm", "(", "gallery", ".", "numel", "(", ")", ",", "device", "=", "gallery", ".", "device", ")", "[", ":", "num", "]", "\n", "rand_inds", "=", "gallery", "[", "perm", "]", "\n", "if", "not", "is_tensor", ":", "\n", "            ", "rand_inds", "=", "rand_inds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "rand_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.random_sampler.RandomSampler._sample_pos": [[45, 54], ["torch.nonzero", "pos_inds.squeeze.squeeze.numel", "pos_inds.squeeze.squeeze.squeeze", "pos_inds.squeeze.squeeze.numel", "random_sampler.RandomSampler.random_choice"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.random_sampler.RandomSampler.random_choice"], ["", "def", "_sample_pos", "(", "self", ",", "assign_result", ",", "num_expected", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Randomly sample some positive samples.\"\"\"", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", ">", "0", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "pos_inds", "=", "pos_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "pos_inds", ".", "numel", "(", ")", "<=", "num_expected", ":", "\n", "            ", "return", "pos_inds", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "random_choice", "(", "pos_inds", ",", "num_expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.random_sampler.RandomSampler._sample_neg": [[55, 64], ["torch.nonzero", "neg_inds.squeeze.squeeze.numel", "neg_inds.squeeze.squeeze.squeeze", "len", "random_sampler.RandomSampler.random_choice"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.random_sampler.RandomSampler.random_choice"], ["", "", "def", "_sample_neg", "(", "self", ",", "assign_result", ",", "num_expected", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Randomly sample some negative samples.\"\"\"", "\n", "neg_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", "==", "0", ")", "\n", "if", "neg_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "neg_inds", "=", "neg_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "len", "(", "neg_inds", ")", "<=", "num_expected", ":", "\n", "            ", "return", "neg_inds", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "random_choice", "(", "neg_inds", ",", "num_expected", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.ohem_sampler.OHEMSampler.__init__": [[15, 31], ["base_sampler.BaseSampler.__init__", "hasattr"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num", ",", "\n", "pos_fraction", ",", "\n", "context", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "OHEMSampler", ",", "self", ")", ".", "__init__", "(", "num", ",", "pos_fraction", ",", "neg_pos_ub", ",", "\n", "add_gt_as_proposals", ")", "\n", "if", "not", "hasattr", "(", "context", ",", "'num_stages'", ")", ":", "\n", "            ", "self", ".", "bbox_roi_extractor", "=", "context", ".", "bbox_roi_extractor", "\n", "self", ".", "bbox_head", "=", "context", ".", "bbox_head", "\n", "", "else", ":", "\n", "            ", "self", ".", "bbox_roi_extractor", "=", "context", ".", "bbox_roi_extractor", "[", "\n", "context", ".", "current_stage", "]", "\n", "self", ".", "bbox_head", "=", "context", ".", "bbox_head", "[", "context", ".", "current_stage", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.ohem_sampler.OHEMSampler.hard_mining": [[32, 48], ["torch.no_grad", "transforms.bbox2roi", "ohem_sampler.OHEMSampler.bbox_roi_extractor", "ohem_sampler.OHEMSampler.bbox_head", "loss.topk", "ohem_sampler.OHEMSampler.bbox_head.loss", "cls_score.new_ones", "cls_score.size"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss"], ["", "", "def", "hard_mining", "(", "self", ",", "inds", ",", "num_expected", ",", "bboxes", ",", "labels", ",", "feats", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rois", "=", "bbox2roi", "(", "[", "bboxes", "]", ")", "\n", "bbox_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "feats", "[", ":", "self", ".", "bbox_roi_extractor", ".", "num_inputs", "]", ",", "rois", ")", "\n", "cls_score", ",", "_", "=", "self", ".", "bbox_head", "(", "bbox_feats", ")", "\n", "loss", "=", "self", ".", "bbox_head", ".", "loss", "(", "\n", "cls_score", "=", "cls_score", ",", "\n", "bbox_pred", "=", "None", ",", "\n", "labels", "=", "labels", ",", "\n", "label_weights", "=", "cls_score", ".", "new_ones", "(", "cls_score", ".", "size", "(", "0", ")", ")", ",", "\n", "bbox_targets", "=", "None", ",", "\n", "bbox_weights", "=", "None", ",", "\n", "reduction_override", "=", "'none'", ")", "[", "'loss_cls'", "]", "\n", "_", ",", "topk_loss_inds", "=", "loss", ".", "topk", "(", "num_expected", ")", "\n", "", "return", "inds", "[", "topk_loss_inds", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.ohem_sampler.OHEMSampler._sample_pos": [[49, 64], ["torch.nonzero", "pos_inds.squeeze.squeeze.numel", "pos_inds.squeeze.squeeze.squeeze", "pos_inds.squeeze.squeeze.numel", "ohem_sampler.OHEMSampler.hard_mining"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.ohem_sampler.OHEMSampler.hard_mining"], ["", "def", "_sample_pos", "(", "self", ",", "\n", "assign_result", ",", "\n", "num_expected", ",", "\n", "bboxes", "=", "None", ",", "\n", "feats", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "# Sample some hard positive samples", "\n", "        ", "pos_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", ">", "0", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "pos_inds", "=", "pos_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "pos_inds", ".", "numel", "(", ")", "<=", "num_expected", ":", "\n", "            ", "return", "pos_inds", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "hard_mining", "(", "pos_inds", ",", "num_expected", ",", "bboxes", "[", "pos_inds", "]", ",", "\n", "assign_result", ".", "labels", "[", "pos_inds", "]", ",", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.ohem_sampler.OHEMSampler._sample_neg": [[65, 80], ["torch.nonzero", "neg_inds.squeeze.squeeze.numel", "neg_inds.squeeze.squeeze.squeeze", "len", "ohem_sampler.OHEMSampler.hard_mining"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.ohem_sampler.OHEMSampler.hard_mining"], ["", "", "def", "_sample_neg", "(", "self", ",", "\n", "assign_result", ",", "\n", "num_expected", ",", "\n", "bboxes", "=", "None", ",", "\n", "feats", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "# Sample some hard negative samples", "\n", "        ", "neg_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", "==", "0", ")", "\n", "if", "neg_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "neg_inds", "=", "neg_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "len", "(", "neg_inds", ")", "<=", "num_expected", ":", "\n", "            ", "return", "neg_inds", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "hard_mining", "(", "neg_inds", ",", "num_expected", ",", "bboxes", "[", "neg_inds", "]", ",", "\n", "assign_result", ".", "labels", "[", "neg_inds", "]", ",", "feats", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.instance_balanced_pos_sampler.InstanceBalancedPosSampler._sample_pos": [[9, 42], ["torch.nonzero", "pos_inds.squeeze.squeeze.numel", "pos_inds.squeeze.squeeze.squeeze", "pos_inds.squeeze.squeeze.numel", "assign_result.gt_inds[].unique", "len", "int", "torch.cat", "torch.nonzero", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.append", "len", "numpy.array", "torch.from_numpy().to().long", "torch.cat", "round", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.numel", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.squeeze", "len", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.random_choice", "len", "list", "len", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.random_choice", "len", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.random_choice", "i.item", "torch.from_numpy().to", "float", "set", "set", "pos_inds.squeeze.squeeze.cpu", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.cpu", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.random_sampler.RandomSampler.random_choice", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.random_sampler.RandomSampler.random_choice", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.random_sampler.RandomSampler.random_choice", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to"], ["    ", "def", "_sample_pos", "(", "self", ",", "assign_result", ",", "num_expected", ",", "**", "kwargs", ")", ":", "\n", "        ", "pos_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", ">", "0", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "pos_inds", "=", "pos_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "pos_inds", ".", "numel", "(", ")", "<=", "num_expected", ":", "\n", "            ", "return", "pos_inds", "\n", "", "else", ":", "\n", "            ", "unique_gt_inds", "=", "assign_result", ".", "gt_inds", "[", "pos_inds", "]", ".", "unique", "(", ")", "\n", "num_gts", "=", "len", "(", "unique_gt_inds", ")", "\n", "num_per_gt", "=", "int", "(", "round", "(", "num_expected", "/", "float", "(", "num_gts", ")", ")", "+", "1", ")", "\n", "sampled_inds", "=", "[", "]", "\n", "for", "i", "in", "unique_gt_inds", ":", "\n", "                ", "inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", "==", "i", ".", "item", "(", ")", ")", "\n", "if", "inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "                    ", "inds", "=", "inds", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "inds", ")", ">", "num_per_gt", ":", "\n", "                    ", "inds", "=", "self", ".", "random_choice", "(", "inds", ",", "num_per_gt", ")", "\n", "", "sampled_inds", ".", "append", "(", "inds", ")", "\n", "", "sampled_inds", "=", "torch", ".", "cat", "(", "sampled_inds", ")", "\n", "if", "len", "(", "sampled_inds", ")", "<", "num_expected", ":", "\n", "                ", "num_extra", "=", "num_expected", "-", "len", "(", "sampled_inds", ")", "\n", "extra_inds", "=", "np", ".", "array", "(", "\n", "list", "(", "set", "(", "pos_inds", ".", "cpu", "(", ")", ")", "-", "set", "(", "sampled_inds", ".", "cpu", "(", ")", ")", ")", ")", "\n", "if", "len", "(", "extra_inds", ")", ">", "num_extra", ":", "\n", "                    ", "extra_inds", "=", "self", ".", "random_choice", "(", "extra_inds", ",", "num_extra", ")", "\n", "", "extra_inds", "=", "torch", ".", "from_numpy", "(", "extra_inds", ")", ".", "to", "(", "\n", "assign_result", ".", "gt_inds", ".", "device", ")", ".", "long", "(", ")", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_inds", ",", "extra_inds", "]", ")", "\n", "", "elif", "len", "(", "sampled_inds", ")", ">", "num_expected", ":", "\n", "                ", "sampled_inds", "=", "self", ".", "random_choice", "(", "sampled_inds", ",", "num_expected", ")", "\n", "", "return", "sampled_inds", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.iou_balanced_neg_sampler.IoUBalancedNegSampler.__init__": [[27, 43], ["random_sampler.RandomSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num", ",", "\n", "pos_fraction", ",", "\n", "floor_thr", "=", "-", "1", ",", "\n", "floor_fraction", "=", "0", ",", "\n", "num_bins", "=", "3", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "IoUBalancedNegSampler", ",", "self", ")", ".", "__init__", "(", "num", ",", "pos_fraction", ",", "\n", "**", "kwargs", ")", "\n", "assert", "floor_thr", ">=", "0", "or", "floor_thr", "==", "-", "1", "\n", "assert", "0", "<=", "floor_fraction", "<=", "1", "\n", "assert", "num_bins", ">=", "1", "\n", "\n", "self", ".", "floor_thr", "=", "floor_thr", "\n", "self", ".", "floor_fraction", "=", "floor_fraction", "\n", "self", ".", "num_bins", "=", "num_bins", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.iou_balanced_neg_sampler.IoUBalancedNegSampler.sample_via_interval": [[44, 74], ["max_overlaps.max", "int", "range", "numpy.concatenate", "set", "list", "numpy.concatenate.append", "len", "numpy.array", "numpy.concatenate", "len", "iou_balanced_neg_sampler.IoUBalancedNegSampler.random_choice", "numpy.array", "len", "list", "len", "iou_balanced_neg_sampler.IoUBalancedNegSampler.random_choice", "numpy.where", "numpy.logical_and", "set"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.random_sampler.RandomSampler.random_choice", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.random_sampler.RandomSampler.random_choice"], ["", "def", "sample_via_interval", "(", "self", ",", "max_overlaps", ",", "full_set", ",", "num_expected", ")", ":", "\n", "        ", "max_iou", "=", "max_overlaps", ".", "max", "(", ")", "\n", "iou_interval", "=", "(", "max_iou", "-", "self", ".", "floor_thr", ")", "/", "self", ".", "num_bins", "\n", "per_num_expected", "=", "int", "(", "num_expected", "/", "self", ".", "num_bins", ")", "\n", "\n", "sampled_inds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_bins", ")", ":", "\n", "            ", "start_iou", "=", "self", ".", "floor_thr", "+", "i", "*", "iou_interval", "\n", "end_iou", "=", "self", ".", "floor_thr", "+", "(", "i", "+", "1", ")", "*", "iou_interval", "\n", "tmp_set", "=", "set", "(", "\n", "np", ".", "where", "(", "\n", "np", ".", "logical_and", "(", "max_overlaps", ">=", "start_iou", ",", "\n", "max_overlaps", "<", "end_iou", ")", ")", "[", "0", "]", ")", "\n", "tmp_inds", "=", "list", "(", "tmp_set", "&", "full_set", ")", "\n", "if", "len", "(", "tmp_inds", ")", ">", "per_num_expected", ":", "\n", "                ", "tmp_sampled_set", "=", "self", ".", "random_choice", "(", "tmp_inds", ",", "\n", "per_num_expected", ")", "\n", "", "else", ":", "\n", "                ", "tmp_sampled_set", "=", "np", ".", "array", "(", "tmp_inds", ",", "dtype", "=", "np", ".", "int", ")", "\n", "", "sampled_inds", ".", "append", "(", "tmp_sampled_set", ")", "\n", "\n", "", "sampled_inds", "=", "np", ".", "concatenate", "(", "sampled_inds", ")", "\n", "if", "len", "(", "sampled_inds", ")", "<", "num_expected", ":", "\n", "            ", "num_extra", "=", "num_expected", "-", "len", "(", "sampled_inds", ")", "\n", "extra_inds", "=", "np", ".", "array", "(", "list", "(", "full_set", "-", "set", "(", "sampled_inds", ")", ")", ")", "\n", "if", "len", "(", "extra_inds", ")", ">", "num_extra", ":", "\n", "                ", "extra_inds", "=", "self", ".", "random_choice", "(", "extra_inds", ",", "num_extra", ")", "\n", "", "sampled_inds", "=", "np", ".", "concatenate", "(", "[", "sampled_inds", ",", "extra_inds", "]", ")", "\n", "\n", "", "return", "sampled_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.iou_balanced_neg_sampler.IoUBalancedNegSampler._sample_neg": [[75, 136], ["torch.nonzero", "neg_inds.squeeze.squeeze.numel", "neg_inds.squeeze.squeeze.squeeze", "len", "assign_result.max_overlaps.cpu().numpy", "set", "list", "list", "int", "numpy.concatenate", "torch.from_numpy().long().to", "neg_inds.squeeze.squeeze.cpu().numpy", "set", "set", "len", "numpy.array", "len", "len", "iou_balanced_neg_sampler.IoUBalancedNegSampler.random_choice", "numpy.array", "len", "numpy.array", "numpy.concatenate", "assign_result.max_overlaps.cpu", "set", "set", "set", "set", "iou_balanced_neg_sampler.IoUBalancedNegSampler.sample_via_interval", "iou_balanced_neg_sampler.IoUBalancedNegSampler.random_choice", "len", "list", "len", "iou_balanced_neg_sampler.IoUBalancedNegSampler.random_choice", "torch.from_numpy().long", "neg_inds.squeeze.squeeze.cpu", "numpy.where", "numpy.where", "set", "numpy.logical_and", "numpy.where", "numpy.where", "numpy.where", "set", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.random_sampler.RandomSampler.random_choice", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.iou_balanced_neg_sampler.IoUBalancedNegSampler.sample_via_interval", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.random_sampler.RandomSampler.random_choice", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.random_sampler.RandomSampler.random_choice"], ["", "def", "_sample_neg", "(", "self", ",", "assign_result", ",", "num_expected", ",", "**", "kwargs", ")", ":", "\n", "        ", "neg_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", "==", "0", ")", "\n", "if", "neg_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "neg_inds", "=", "neg_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "len", "(", "neg_inds", ")", "<=", "num_expected", ":", "\n", "            ", "return", "neg_inds", "\n", "", "else", ":", "\n", "            ", "max_overlaps", "=", "assign_result", ".", "max_overlaps", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# balance sampling for negative samples", "\n", "neg_set", "=", "set", "(", "neg_inds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "if", "self", ".", "floor_thr", ">", "0", ":", "\n", "                ", "floor_set", "=", "set", "(", "\n", "np", ".", "where", "(", "\n", "np", ".", "logical_and", "(", "max_overlaps", ">=", "0", ",", "\n", "max_overlaps", "<", "self", ".", "floor_thr", ")", ")", "[", "0", "]", ")", "\n", "iou_sampling_set", "=", "set", "(", "\n", "np", ".", "where", "(", "max_overlaps", ">=", "self", ".", "floor_thr", ")", "[", "0", "]", ")", "\n", "", "elif", "self", ".", "floor_thr", "==", "0", ":", "\n", "                ", "floor_set", "=", "set", "(", "np", ".", "where", "(", "max_overlaps", "==", "0", ")", "[", "0", "]", ")", "\n", "iou_sampling_set", "=", "set", "(", "\n", "np", ".", "where", "(", "max_overlaps", ">", "self", ".", "floor_thr", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "floor_set", "=", "set", "(", ")", "\n", "iou_sampling_set", "=", "set", "(", "\n", "np", ".", "where", "(", "max_overlaps", ">", "self", ".", "floor_thr", ")", "[", "0", "]", ")", "\n", "# for sampling interval calculation", "\n", "self", ".", "floor_thr", "=", "0", "\n", "\n", "", "floor_neg_inds", "=", "list", "(", "floor_set", "&", "neg_set", ")", "\n", "iou_sampling_neg_inds", "=", "list", "(", "iou_sampling_set", "&", "neg_set", ")", "\n", "num_expected_iou_sampling", "=", "int", "(", "num_expected", "*", "\n", "(", "1", "-", "self", ".", "floor_fraction", ")", ")", "\n", "if", "len", "(", "iou_sampling_neg_inds", ")", ">", "num_expected_iou_sampling", ":", "\n", "                ", "if", "self", ".", "num_bins", ">=", "2", ":", "\n", "                    ", "iou_sampled_inds", "=", "self", ".", "sample_via_interval", "(", "\n", "max_overlaps", ",", "set", "(", "iou_sampling_neg_inds", ")", ",", "\n", "num_expected_iou_sampling", ")", "\n", "", "else", ":", "\n", "                    ", "iou_sampled_inds", "=", "self", ".", "random_choice", "(", "\n", "iou_sampling_neg_inds", ",", "num_expected_iou_sampling", ")", "\n", "", "", "else", ":", "\n", "                ", "iou_sampled_inds", "=", "np", ".", "array", "(", "\n", "iou_sampling_neg_inds", ",", "dtype", "=", "np", ".", "int", ")", "\n", "", "num_expected_floor", "=", "num_expected", "-", "len", "(", "iou_sampled_inds", ")", "\n", "if", "len", "(", "floor_neg_inds", ")", ">", "num_expected_floor", ":", "\n", "                ", "sampled_floor_inds", "=", "self", ".", "random_choice", "(", "\n", "floor_neg_inds", ",", "num_expected_floor", ")", "\n", "", "else", ":", "\n", "                ", "sampled_floor_inds", "=", "np", ".", "array", "(", "floor_neg_inds", ",", "dtype", "=", "np", ".", "int", ")", "\n", "", "sampled_inds", "=", "np", ".", "concatenate", "(", "\n", "(", "sampled_floor_inds", ",", "iou_sampled_inds", ")", ")", "\n", "if", "len", "(", "sampled_inds", ")", "<", "num_expected", ":", "\n", "                ", "num_extra", "=", "num_expected", "-", "len", "(", "sampled_inds", ")", "\n", "extra_inds", "=", "np", ".", "array", "(", "list", "(", "neg_set", "-", "set", "(", "sampled_inds", ")", ")", ")", "\n", "if", "len", "(", "extra_inds", ")", ">", "num_extra", ":", "\n", "                    ", "extra_inds", "=", "self", ".", "random_choice", "(", "extra_inds", ",", "num_extra", ")", "\n", "", "sampled_inds", "=", "np", ".", "concatenate", "(", "(", "sampled_inds", ",", "extra_inds", ")", ")", "\n", "", "sampled_inds", "=", "torch", ".", "from_numpy", "(", "sampled_inds", ")", ".", "long", "(", ")", ".", "to", "(", "\n", "assign_result", ".", "gt_inds", ".", "device", ")", "\n", "return", "sampled_inds", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.combined_sampler.CombinedSampler.__init__": [[7, 11], ["base_sampler.BaseSampler.__init__", "assign_sampling.build_sampler", "assign_sampling.build_sampler"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_sampler", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.assign_sampling.build_sampler"], ["    ", "def", "__init__", "(", "self", ",", "pos_sampler", ",", "neg_sampler", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CombinedSampler", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "pos_sampler", "=", "build_sampler", "(", "pos_sampler", ",", "**", "kwargs", ")", "\n", "self", ".", "neg_sampler", "=", "build_sampler", "(", "neg_sampler", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.combined_sampler.CombinedSampler._sample_pos": [[12, 14], ["None"], "methods", ["None"], ["", "def", "_sample_pos", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.combined_sampler.CombinedSampler._sample_neg": [[15, 17], ["None"], "methods", ["None"], ["", "def", "_sample_neg", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.__init__": [[24, 49], ["gt_bboxes.view.view.numel", "torch.empty_like().view", "sampling_result.SamplingResult.pos_assigned_gt_inds.numel", "len", "gt_bboxes.view.view.view", "torch.empty_like"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "pos_inds", ",", "neg_inds", ",", "bboxes", ",", "gt_bboxes", ",", "assign_result", ",", "\n", "gt_flags", ")", ":", "\n", "        ", "self", ".", "pos_inds", "=", "pos_inds", "\n", "self", ".", "neg_inds", "=", "neg_inds", "\n", "self", ".", "pos_bboxes", "=", "bboxes", "[", "pos_inds", "]", "\n", "self", ".", "neg_bboxes", "=", "bboxes", "[", "neg_inds", "]", "\n", "self", ".", "pos_is_gt", "=", "gt_flags", "[", "pos_inds", "]", "\n", "\n", "self", ".", "num_gts", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "self", ".", "pos_assigned_gt_inds", "=", "assign_result", ".", "gt_inds", "[", "pos_inds", "]", "-", "1", "\n", "\n", "if", "gt_bboxes", ".", "numel", "(", ")", "==", "0", ":", "\n", "# hack for index error case", "\n", "            ", "assert", "self", ".", "pos_assigned_gt_inds", ".", "numel", "(", ")", "==", "0", "\n", "self", ".", "pos_gt_bboxes", "=", "torch", ".", "empty_like", "(", "gt_bboxes", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "gt_bboxes", ".", "shape", ")", "<", "2", ":", "\n", "                ", "gt_bboxes", "=", "gt_bboxes", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "\n", "", "self", ".", "pos_gt_bboxes", "=", "gt_bboxes", "[", "self", ".", "pos_assigned_gt_inds", ",", ":", "]", "\n", "\n", "", "if", "assign_result", ".", "labels", "is", "not", "None", ":", "\n", "            ", "self", ".", "pos_gt_labels", "=", "assign_result", ".", "labels", "[", "pos_inds", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "pos_gt_labels", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.bboxes": [[50, 53], ["torch.cat"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "bboxes", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "self", ".", "pos_bboxes", ",", "self", ".", "neg_bboxes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to": [[54, 69], ["_dict.items", "isinstance", "value.to"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "\"\"\"\n        Change the device of the data inplace.\n\n        Example:\n            >>> self = SamplingResult.random()\n            >>> print('self = {}'.format(self.to(None)))\n            >>> # xdoctest: +REQUIRES(--gpu)\n            >>> print('self = {}'.format(self.to(0)))\n        \"\"\"", "\n", "_dict", "=", "self", ".", "__dict__", "\n", "for", "key", ",", "value", "in", "_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "_dict", "[", "key", "]", "=", "value", ".", "to", "(", "device", ")", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.__nice__": [[70, 77], ["sampling_result.SamplingResult.info.copy", "sampling_result.SamplingResult.pop", "sampling_result.SamplingResult.pop", "sorted", "sampling_result.SamplingResult.items"], "methods", ["None"], ["", "def", "__nice__", "(", "self", ")", ":", "\n", "        ", "data", "=", "self", ".", "info", ".", "copy", "(", ")", "\n", "data", "[", "'pos_bboxes'", "]", "=", "data", ".", "pop", "(", "'pos_bboxes'", ")", ".", "shape", "\n", "data", "[", "'neg_bboxes'", "]", "=", "data", ".", "pop", "(", "'neg_bboxes'", ")", ".", "shape", "\n", "parts", "=", "[", "'\\'{}\\': {!r}'", ".", "format", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "sorted", "(", "data", ".", "items", "(", ")", ")", "]", "\n", "body", "=", "'    '", "+", "',\\n    '", ".", "join", "(", "parts", ")", "\n", "return", "'{\\n'", "+", "body", "+", "'\\n}'", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.info": [[78, 91], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "info", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary of info about the object\n        \"\"\"", "\n", "return", "{", "\n", "'pos_inds'", ":", "self", ".", "pos_inds", ",", "\n", "'neg_inds'", ":", "self", ".", "neg_inds", ",", "\n", "'pos_bboxes'", ":", "self", ".", "pos_bboxes", ",", "\n", "'neg_bboxes'", ":", "self", ".", "neg_bboxes", ",", "\n", "'pos_is_gt'", ":", "self", ".", "pos_is_gt", ",", "\n", "'num_gts'", ":", "self", ".", "num_gts", ",", "\n", "'pos_assigned_gt_inds'", ":", "self", ".", "pos_assigned_gt_inds", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.random": [[93, 155], ["demodata.ensure_rng", "AssignResult.random", "demodata.random_boxes", "demodata.random_boxes", "RandomSampler", "RandomSampler.sample", "demodata.ensure_rng.rand", "gt_bboxes.squeeze.squeeze.squeeze", "bboxes.squeeze.squeeze.squeeze"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.demodata.ensure_rng", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.demodata.random_boxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.demodata.random_boxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "@", "classmethod", "\n", "def", "random", "(", "cls", ",", "rng", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            rng (None | int | numpy.random.RandomState): seed or state\n\n        Kwargs:\n            num_preds: number of predicted boxes\n            num_gts: number of true boxes\n            p_ignore (float): probability of a predicted box assinged to an\n                ignored truth\n            p_assigned (float): probability of a predicted box not being\n                assigned\n            p_use_label (float | bool): with labels or not\n\n        Returns:\n            AssignResult :\n\n        Example:\n            >>> from mmdet.core.bbox.samplers.sampling_result import *  # NOQA\n            >>> self = SamplingResult.random()\n            >>> print(self.__dict__)\n        \"\"\"", "\n", "from", "mmdet", ".", "core", ".", "bbox", ".", "samplers", ".", "random_sampler", "import", "RandomSampler", "\n", "from", "mmdet", ".", "core", ".", "bbox", ".", "assigners", ".", "assign_result", "import", "AssignResult", "\n", "from", "mmdet", ".", "core", ".", "bbox", "import", "demodata", "\n", "rng", "=", "demodata", ".", "ensure_rng", "(", "rng", ")", "\n", "\n", "# make probabalistic?", "\n", "num", "=", "32", "\n", "pos_fraction", "=", "0.5", "\n", "neg_pos_ub", "=", "-", "1", "\n", "\n", "assign_result", "=", "AssignResult", ".", "random", "(", "rng", "=", "rng", ",", "**", "kwargs", ")", "\n", "\n", "# Note we could just compute an assignment", "\n", "bboxes", "=", "demodata", ".", "random_boxes", "(", "assign_result", ".", "num_preds", ",", "rng", "=", "rng", ")", "\n", "gt_bboxes", "=", "demodata", ".", "random_boxes", "(", "assign_result", ".", "num_gts", ",", "rng", "=", "rng", ")", "\n", "\n", "if", "rng", ".", "rand", "(", ")", ">", "0.2", ":", "\n", "# sometimes algorithms squeeze their data, be robust to that", "\n", "            ", "gt_bboxes", "=", "gt_bboxes", ".", "squeeze", "(", ")", "\n", "bboxes", "=", "bboxes", ".", "squeeze", "(", ")", "\n", "\n", "", "if", "assign_result", ".", "labels", "is", "None", ":", "\n", "            ", "gt_labels", "=", "None", "\n", "", "else", ":", "\n", "            ", "gt_labels", "=", "None", "# todo", "\n", "\n", "", "if", "gt_labels", "is", "None", ":", "\n", "            ", "add_gt_as_proposals", "=", "False", "\n", "", "else", ":", "\n", "            ", "add_gt_as_proposals", "=", "True", "# make probabalistic?", "\n", "\n", "", "sampler", "=", "RandomSampler", "(", "\n", "num", ",", "\n", "pos_fraction", ",", "\n", "neg_pos_ubo", "=", "neg_pos_ub", ",", "\n", "add_gt_as_proposals", "=", "add_gt_as_proposals", ",", "\n", "rng", "=", "rng", ")", "\n", "self", "=", "sampler", ".", "sample", "(", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "gt_labels", ")", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler._sample_pos": [[12, 14], ["None"], "methods", ["None"], ["", "def", "_sample_pos", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler._sample_neg": [[15, 17], ["None"], "methods", ["None"], ["", "def", "_sample_neg", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample": [[18, 27], ["torch.nonzero().squeeze().unique", "torch.nonzero().squeeze().unique", "bboxes.new_zeros", "sampling_result.SamplingResult.SamplingResult", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero", "torch.nonzero"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "**", "kwargs", ")", ":", "\n", "        ", "pos_inds", "=", "torch", ".", "nonzero", "(", "\n", "assign_result", ".", "gt_inds", ">", "0", ")", ".", "squeeze", "(", "-", "1", ")", ".", "unique", "(", ")", "\n", "neg_inds", "=", "torch", ".", "nonzero", "(", "\n", "assign_result", ".", "gt_inds", "==", "0", ")", ".", "squeeze", "(", "-", "1", ")", ".", "unique", "(", ")", "\n", "gt_flags", "=", "bboxes", ".", "new_zeros", "(", "bboxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "sampling_result", "=", "SamplingResult", "(", "pos_inds", ",", "neg_inds", ",", "bboxes", ",", "gt_bboxes", ",", "\n", "assign_result", ",", "gt_flags", ")", "\n", "return", "sampling_result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.approx_max_iou_assigner.ApproxMaxIoUAssigner.__init__": [[35, 50], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "pos_iou_thr", ",", "\n", "neg_iou_thr", ",", "\n", "min_pos_iou", "=", ".0", ",", "\n", "gt_max_assign_all", "=", "True", ",", "\n", "ignore_iof_thr", "=", "-", "1", ",", "\n", "ignore_wrt_candidates", "=", "True", ",", "\n", "gpu_assign_thr", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "pos_iou_thr", "=", "pos_iou_thr", "\n", "self", ".", "neg_iou_thr", "=", "neg_iou_thr", "\n", "self", ".", "min_pos_iou", "=", "min_pos_iou", "\n", "self", ".", "gt_max_assign_all", "=", "gt_max_assign_all", "\n", "self", ".", "ignore_iof_thr", "=", "ignore_iof_thr", "\n", "self", ".", "ignore_wrt_candidates", "=", "ignore_wrt_candidates", "\n", "self", ".", "gpu_assign_thr", "=", "gpu_assign_thr", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.approx_max_iou_assigner.ApproxMaxIoUAssigner.assign": [[51, 140], ["squares.size", "gt_bboxes.cpu.cpu.size", "torch.transpose().contiguous().view", "geometry.bbox_overlaps", "geometry.bbox_overlaps.view().max", "torch.transpose", "approx_max_iou_assigner.ApproxMaxIoUAssigner.assign_wrt_overlaps", "approxs.cpu.cpu.new", "approx_max_iou_assigner.ApproxMaxIoUAssigner.assign_wrt_overlaps", "approxs.cpu.cpu.cpu", "gt_bboxes.cpu.cpu.cpu", "approx_max_iou_assigner.ApproxMaxIoUAssigner.gt_inds.to", "approx_max_iou_assigner.ApproxMaxIoUAssigner.max_overlaps.to", "torch.transpose().contiguous", "gt_bboxes_ignore.cpu.cpu.cpu", "gt_labels.cpu.cpu.cpu", "geometry.bbox_overlaps.view", "gt_bboxes_ignore.cpu.cpu.numel", "bboxes.numel", "geometry.bbox_overlaps", "geometry.bbox_overlaps.max", "geometry.bbox_overlaps", "geometry.bbox_overlaps.max", "approx_max_iou_assigner.ApproxMaxIoUAssigner.labels.to", "torch.transpose", "approxs.cpu.cpu.view"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.geometry.bbox_overlaps", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.max_iou_assigner.MaxIoUAssigner.assign_wrt_overlaps", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.max_iou_assigner.MaxIoUAssigner.assign_wrt_overlaps", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.geometry.bbox_overlaps", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.geometry.bbox_overlaps", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to"], ["", "def", "assign", "(", "self", ",", "\n", "approxs", ",", "\n", "squares", ",", "\n", "approxs_per_octave", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "gt_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"Assign gt to approxs.\n\n        This method assign a gt bbox to each group of approxs (bboxes),\n        each group of approxs is represent by a base approx (bbox) and\n        will be assigned with -1, 0, or a positive number.\n        -1 means don't care, 0 means negative sample,\n        positive number is the index (1-based) of assigned gt.\n        The assignment is done in following steps, the order matters.\n\n        1. assign every bbox to -1\n        2. use the max IoU of each group of approxs to assign\n        2. assign proposals whose iou with all gts < neg_iou_thr to 0\n        3. for each bbox, if the iou with its nearest gt >= pos_iou_thr,\n           assign it to that bbox\n        4. for each gt bbox, assign its nearest proposals (may be more than\n           one) to itself\n\n        Args:\n            approxs (Tensor): Bounding boxes to be assigned,\n                shape(approxs_per_octave*n, 4).\n            squares (Tensor): Base Bounding boxes to be assigned,\n                shape(n, 4).\n            approxs_per_octave (int): number of approxs per octave\n            gt_bboxes (Tensor): Groundtruth boxes, shape (k, 4).\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\n                labelled as `ignored`, e.g., crowd boxes in COCO.\n            gt_labels (Tensor, optional): Label of gt_bboxes, shape (k, ).\n\n        Returns:\n            :obj:`AssignResult`: The assign result.\n        \"\"\"", "\n", "num_squares", "=", "squares", ".", "size", "(", "0", ")", "\n", "num_gts", "=", "gt_bboxes", ".", "size", "(", "0", ")", "\n", "\n", "if", "num_squares", "==", "0", "or", "num_gts", "==", "0", ":", "\n", "# No predictions and/or truth, return empty assignment", "\n", "            ", "overlaps", "=", "approxs", ".", "new", "(", "num_gts", ",", "num_squares", ")", "\n", "assign_result", "=", "self", ".", "assign_wrt_overlaps", "(", "overlaps", ",", "gt_labels", ")", "\n", "return", "assign_result", "\n", "\n", "# re-organize anchors by approxs_per_octave x num_squares", "\n", "", "approxs", "=", "torch", ".", "transpose", "(", "\n", "approxs", ".", "view", "(", "num_squares", ",", "approxs_per_octave", ",", "4", ")", ",", "0", ",", "\n", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "assign_on_cpu", "=", "True", "if", "(", "self", ".", "gpu_assign_thr", ">", "0", ")", "and", "(", "\n", "num_gts", ">", "self", ".", "gpu_assign_thr", ")", "else", "False", "\n", "# compute overlap and assign gt on CPU when number of GT is large", "\n", "if", "assign_on_cpu", ":", "\n", "            ", "device", "=", "approxs", ".", "device", "\n", "approxs", "=", "approxs", ".", "cpu", "(", ")", "\n", "gt_bboxes", "=", "gt_bboxes", ".", "cpu", "(", ")", "\n", "if", "gt_bboxes_ignore", "is", "not", "None", ":", "\n", "                ", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ".", "cpu", "(", ")", "\n", "", "if", "gt_labels", "is", "not", "None", ":", "\n", "                ", "gt_labels", "=", "gt_labels", ".", "cpu", "(", ")", "\n", "", "", "all_overlaps", "=", "bbox_overlaps", "(", "approxs", ",", "gt_bboxes", ")", "\n", "\n", "overlaps", ",", "_", "=", "all_overlaps", ".", "view", "(", "approxs_per_octave", ",", "num_squares", ",", "\n", "num_gts", ")", ".", "max", "(", "dim", "=", "0", ")", "\n", "overlaps", "=", "torch", ".", "transpose", "(", "overlaps", ",", "0", ",", "1", ")", "\n", "\n", "bboxes", "=", "squares", "[", ":", ",", ":", "4", "]", "\n", "\n", "if", "(", "self", ".", "ignore_iof_thr", ">", "0", "and", "gt_bboxes_ignore", "is", "not", "None", "\n", "and", "gt_bboxes_ignore", ".", "numel", "(", ")", ">", "0", "and", "bboxes", ".", "numel", "(", ")", ">", "0", ")", ":", "\n", "            ", "if", "self", ".", "ignore_wrt_candidates", ":", "\n", "                ", "ignore_overlaps", "=", "bbox_overlaps", "(", "\n", "bboxes", ",", "gt_bboxes_ignore", ",", "mode", "=", "'iof'", ")", "\n", "ignore_max_overlaps", ",", "_", "=", "ignore_overlaps", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "ignore_overlaps", "=", "bbox_overlaps", "(", "\n", "gt_bboxes_ignore", ",", "bboxes", ",", "mode", "=", "'iof'", ")", "\n", "ignore_max_overlaps", ",", "_", "=", "ignore_overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "", "overlaps", "[", ":", ",", "ignore_max_overlaps", ">", "self", ".", "ignore_iof_thr", "]", "=", "-", "1", "\n", "\n", "", "assign_result", "=", "self", ".", "assign_wrt_overlaps", "(", "overlaps", ",", "gt_labels", ")", "\n", "if", "assign_on_cpu", ":", "\n", "            ", "assign_result", ".", "gt_inds", "=", "assign_result", ".", "gt_inds", ".", "to", "(", "device", ")", "\n", "assign_result", ".", "max_overlaps", "=", "assign_result", ".", "max_overlaps", ".", "to", "(", "device", ")", "\n", "if", "assign_result", ".", "labels", "is", "not", "None", ":", "\n", "                ", "assign_result", ".", "labels", "=", "assign_result", ".", "labels", ".", "to", "(", "device", ")", "\n", "", "", "return", "assign_result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.base_assigner.BaseAssigner.assign": [[6, 9], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "assign", "(", "self", ",", "bboxes", ",", "gt_bboxes", ",", "gt_bboxes_ignore", "=", "None", ",", "gt_labels", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.max_iou_assigner.MaxIoUAssigner.__init__": [[36, 51], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "pos_iou_thr", ",", "\n", "neg_iou_thr", ",", "\n", "min_pos_iou", "=", ".0", ",", "\n", "gt_max_assign_all", "=", "True", ",", "\n", "ignore_iof_thr", "=", "-", "1", ",", "\n", "ignore_wrt_candidates", "=", "True", ",", "\n", "gpu_assign_thr", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "pos_iou_thr", "=", "pos_iou_thr", "\n", "self", ".", "neg_iou_thr", "=", "neg_iou_thr", "\n", "self", ".", "min_pos_iou", "=", "min_pos_iou", "\n", "self", ".", "gt_max_assign_all", "=", "gt_max_assign_all", "\n", "self", ".", "ignore_iof_thr", "=", "ignore_iof_thr", "\n", "self", ".", "ignore_wrt_candidates", "=", "ignore_wrt_candidates", "\n", "self", ".", "gpu_assign_thr", "=", "gpu_assign_thr", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.max_iou_assigner.MaxIoUAssigner.assign": [[52, 120], ["geometry.bbox_overlaps", "max_iou_assigner.MaxIoUAssigner.assign_wrt_overlaps", "bboxes.cpu.cpu.cpu", "gt_bboxes.cpu.cpu.cpu", "max_iou_assigner.MaxIoUAssigner.gt_inds.to", "max_iou_assigner.MaxIoUAssigner.max_overlaps.to", "gt_bboxes_ignore.cpu.cpu.cpu", "gt_labels.cpu.cpu.cpu", "gt_bboxes_ignore.cpu.cpu.numel", "bboxes.cpu.cpu.numel", "geometry.bbox_overlaps", "geometry.bbox_overlaps.max", "geometry.bbox_overlaps", "geometry.bbox_overlaps.max", "max_iou_assigner.MaxIoUAssigner.labels.to"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.geometry.bbox_overlaps", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.max_iou_assigner.MaxIoUAssigner.assign_wrt_overlaps", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.geometry.bbox_overlaps", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.geometry.bbox_overlaps", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to"], ["", "def", "assign", "(", "self", ",", "bboxes", ",", "gt_bboxes", ",", "gt_bboxes_ignore", "=", "None", ",", "gt_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"Assign gt to bboxes.\n\n        This method assign a gt bbox to every bbox (proposal/anchor), each bbox\n        will be assigned with -1, 0, or a positive number. -1 means don't care,\n        0 means negative sample, positive number is the index (1-based) of\n        assigned gt.\n        The assignment is done in following steps, the order matters.\n\n        1. assign every bbox to -1\n        2. assign proposals whose iou with all gts < neg_iou_thr to 0\n        3. for each bbox, if the iou with its nearest gt >= pos_iou_thr,\n           assign it to that bbox\n        4. for each gt bbox, assign its nearest proposals (may be more than\n           one) to itself\n\n        Args:\n            bboxes (Tensor): Bounding boxes to be assigned, shape(n, 4).\n            gt_bboxes (Tensor): Groundtruth boxes, shape (k, 4).\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\n                labelled as `ignored`, e.g., crowd boxes in COCO.\n            gt_labels (Tensor, optional): Label of gt_bboxes, shape (k, ).\n\n        Returns:\n            :obj:`AssignResult`: The assign result.\n\n        Example:\n            >>> self = MaxIoUAssigner(0.5, 0.5)\n            >>> bboxes = torch.Tensor([[0, 0, 10, 10], [10, 10, 20, 20]])\n            >>> gt_bboxes = torch.Tensor([[0, 0, 10, 9]])\n            >>> assign_result = self.assign(bboxes, gt_bboxes)\n            >>> expected_gt_inds = torch.LongTensor([1, 0])\n            >>> assert torch.all(assign_result.gt_inds == expected_gt_inds)\n        \"\"\"", "\n", "assign_on_cpu", "=", "True", "if", "(", "self", ".", "gpu_assign_thr", ">", "0", ")", "and", "(", "\n", "gt_bboxes", ".", "shape", "[", "0", "]", ">", "self", ".", "gpu_assign_thr", ")", "else", "False", "\n", "# compute overlap and assign gt on CPU when number of GT is large", "\n", "if", "assign_on_cpu", ":", "\n", "            ", "device", "=", "bboxes", ".", "device", "\n", "bboxes", "=", "bboxes", ".", "cpu", "(", ")", "\n", "gt_bboxes", "=", "gt_bboxes", ".", "cpu", "(", ")", "\n", "if", "gt_bboxes_ignore", "is", "not", "None", ":", "\n", "                ", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ".", "cpu", "(", ")", "\n", "", "if", "gt_labels", "is", "not", "None", ":", "\n", "                ", "gt_labels", "=", "gt_labels", ".", "cpu", "(", ")", "\n", "\n", "", "", "bboxes", "=", "bboxes", "[", ":", ",", ":", "4", "]", "\n", "overlaps", "=", "bbox_overlaps", "(", "gt_bboxes", ",", "bboxes", ")", "\n", "\n", "if", "(", "self", ".", "ignore_iof_thr", ">", "0", "and", "gt_bboxes_ignore", "is", "not", "None", "\n", "and", "gt_bboxes_ignore", ".", "numel", "(", ")", ">", "0", "and", "bboxes", ".", "numel", "(", ")", ">", "0", ")", ":", "\n", "            ", "if", "self", ".", "ignore_wrt_candidates", ":", "\n", "                ", "ignore_overlaps", "=", "bbox_overlaps", "(", "\n", "bboxes", ",", "gt_bboxes_ignore", ",", "mode", "=", "'iof'", ")", "\n", "ignore_max_overlaps", ",", "_", "=", "ignore_overlaps", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "ignore_overlaps", "=", "bbox_overlaps", "(", "\n", "gt_bboxes_ignore", ",", "bboxes", ",", "mode", "=", "'iof'", ")", "\n", "ignore_max_overlaps", ",", "_", "=", "ignore_overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "", "overlaps", "[", ":", ",", "ignore_max_overlaps", ">", "self", ".", "ignore_iof_thr", "]", "=", "-", "1", "\n", "\n", "", "assign_result", "=", "self", ".", "assign_wrt_overlaps", "(", "overlaps", ",", "gt_labels", ")", "\n", "if", "assign_on_cpu", ":", "\n", "            ", "assign_result", ".", "gt_inds", "=", "assign_result", ".", "gt_inds", ".", "to", "(", "device", ")", "\n", "assign_result", ".", "max_overlaps", "=", "assign_result", ".", "max_overlaps", ".", "to", "(", "device", ")", "\n", "if", "assign_result", ".", "labels", "is", "not", "None", ":", "\n", "                ", "assign_result", ".", "labels", "=", "assign_result", ".", "labels", ".", "to", "(", "device", ")", "\n", "", "", "return", "assign_result", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.max_iou_assigner.MaxIoUAssigner.assign_wrt_overlaps": [[121, 196], ["overlaps.new_full", "overlaps.max", "overlaps.max", "isinstance", "range", "assign_result.AssignResult", "overlaps.size", "overlaps.size", "overlaps.new_zeros", "assign_result.AssignResult", "isinstance", "overlaps.new_full.new_zeros", "torch.nonzero().squeeze", "overlaps.new_zeros", "torch.nonzero().squeeze.numel", "len", "torch.nonzero"], "methods", ["None"], ["", "def", "assign_wrt_overlaps", "(", "self", ",", "overlaps", ",", "gt_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"Assign w.r.t. the overlaps of bboxes with gts.\n\n        Args:\n            overlaps (Tensor): Overlaps between k gt_bboxes and n bboxes,\n                shape(k, n).\n            gt_labels (Tensor, optional): Labels of k gt_bboxes, shape (k, ).\n\n        Returns:\n            :obj:`AssignResult`: The assign result.\n        \"\"\"", "\n", "num_gts", ",", "num_bboxes", "=", "overlaps", ".", "size", "(", "0", ")", ",", "overlaps", ".", "size", "(", "1", ")", "\n", "\n", "# 1. assign -1 by default", "\n", "assigned_gt_inds", "=", "overlaps", ".", "new_full", "(", "(", "num_bboxes", ",", ")", ",", "\n", "-", "1", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "if", "num_gts", "==", "0", "or", "num_bboxes", "==", "0", ":", "\n", "# No ground truth or boxes, return empty assignment", "\n", "            ", "max_overlaps", "=", "overlaps", ".", "new_zeros", "(", "(", "num_bboxes", ",", ")", ")", "\n", "if", "num_gts", "==", "0", ":", "\n", "# No truth, assign everything to background", "\n", "                ", "assigned_gt_inds", "[", ":", "]", "=", "0", "\n", "", "if", "gt_labels", "is", "None", ":", "\n", "                ", "assigned_labels", "=", "None", "\n", "", "else", ":", "\n", "                ", "assigned_labels", "=", "overlaps", ".", "new_zeros", "(", "(", "num_bboxes", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "", "return", "AssignResult", "(", "\n", "num_gts", ",", "\n", "assigned_gt_inds", ",", "\n", "max_overlaps", ",", "\n", "labels", "=", "assigned_labels", ")", "\n", "\n", "# for each anchor, which gt best overlaps with it", "\n", "# for each anchor, the max iou of all gts", "\n", "", "max_overlaps", ",", "argmax_overlaps", "=", "overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "# for each gt, which anchor best overlaps with it", "\n", "# for each gt, the max iou of all proposals", "\n", "gt_max_overlaps", ",", "gt_argmax_overlaps", "=", "overlaps", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "# 2. assign negative: below", "\n", "if", "isinstance", "(", "self", ".", "neg_iou_thr", ",", "float", ")", ":", "\n", "            ", "assigned_gt_inds", "[", "(", "max_overlaps", ">=", "0", ")", "\n", "&", "(", "max_overlaps", "<", "self", ".", "neg_iou_thr", ")", "]", "=", "0", "\n", "", "elif", "isinstance", "(", "self", ".", "neg_iou_thr", ",", "tuple", ")", ":", "\n", "            ", "assert", "len", "(", "self", ".", "neg_iou_thr", ")", "==", "2", "\n", "assigned_gt_inds", "[", "(", "max_overlaps", ">=", "self", ".", "neg_iou_thr", "[", "0", "]", ")", "\n", "&", "(", "max_overlaps", "<", "self", ".", "neg_iou_thr", "[", "1", "]", ")", "]", "=", "0", "\n", "\n", "# 3. assign positive: above positive IoU threshold", "\n", "", "pos_inds", "=", "max_overlaps", ">=", "self", ".", "pos_iou_thr", "\n", "assigned_gt_inds", "[", "pos_inds", "]", "=", "argmax_overlaps", "[", "pos_inds", "]", "+", "1", "\n", "\n", "# 4. assign fg: for each gt, proposals with highest IoU", "\n", "for", "i", "in", "range", "(", "num_gts", ")", ":", "\n", "            ", "if", "gt_max_overlaps", "[", "i", "]", ">=", "self", ".", "min_pos_iou", ":", "\n", "                ", "if", "self", ".", "gt_max_assign_all", ":", "\n", "                    ", "max_iou_inds", "=", "overlaps", "[", "i", ",", ":", "]", "==", "gt_max_overlaps", "[", "i", "]", "\n", "assigned_gt_inds", "[", "max_iou_inds", "]", "=", "i", "+", "1", "\n", "", "else", ":", "\n", "                    ", "assigned_gt_inds", "[", "gt_argmax_overlaps", "[", "i", "]", "]", "=", "i", "+", "1", "\n", "\n", "", "", "", "if", "gt_labels", "is", "not", "None", ":", "\n", "            ", "assigned_labels", "=", "assigned_gt_inds", ".", "new_zeros", "(", "(", "num_bboxes", ",", ")", ")", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "assigned_gt_inds", ">", "0", ")", ".", "squeeze", "(", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "assigned_labels", "[", "pos_inds", "]", "=", "gt_labels", "[", "\n", "assigned_gt_inds", "[", "pos_inds", "]", "-", "1", "]", "\n", "", "", "else", ":", "\n", "            ", "assigned_labels", "=", "None", "\n", "\n", "", "return", "AssignResult", "(", "\n", "num_gts", ",", "assigned_gt_inds", ",", "max_overlaps", ",", "labels", "=", "assigned_labels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.point_assigner.PointAssigner.__init__": [[18, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale", "=", "4", ",", "pos_num", "=", "3", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "self", ".", "pos_num", "=", "pos_num", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.point_assigner.PointAssigner.assign": [[22, 131], ["torch.log2().int", "torch.clamp", "points.new_zeros", "points.new_full", "torch.arange", "range", "assign_result.AssignResult", "points.new_full", "assign_result.AssignResult", "torch.log2().int.min", "torch.log2().int.max", "float", "torch.topk", "points.new_full.new_zeros", "torch.nonzero().squeeze", "points.new_zeros", "torch.log2", "torch.nonzero().squeeze.numel", "torch.nonzero", "torch.log2", "torch.log2"], "methods", ["None"], ["", "def", "assign", "(", "self", ",", "points", ",", "gt_bboxes", ",", "gt_bboxes_ignore", "=", "None", ",", "gt_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"Assign gt to points.\n\n        This method assign a gt bbox to every points set, each points set\n        will be assigned with  0, or a positive number.\n        0 means negative sample, positive number is the index (1-based) of\n        assigned gt.\n        The assignment is done in following steps, the order matters.\n\n        1. assign every points to 0\n        2. A point is assigned to some gt bbox if\n            (i) the point is within the k closest points to the gt bbox\n            (ii) the distance between this point and the gt is smaller than\n                other gt bboxes\n\n        Args:\n            points (Tensor): points to be assigned, shape(n, 3) while last\n                dimension stands for (x, y, stride).\n            gt_bboxes (Tensor): Groundtruth boxes, shape (k, 4).\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\n                labelled as `ignored`, e.g., crowd boxes in COCO.\n                NOTE: currently unused.\n            gt_labels (Tensor, optional): Label of gt_bboxes, shape (k, ).\n\n        Returns:\n            :obj:`AssignResult`: The assign result.\n        \"\"\"", "\n", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "num_gts", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "\n", "if", "num_gts", "==", "0", "or", "num_points", "==", "0", ":", "\n", "# If no truth assign everything to the background", "\n", "            ", "assigned_gt_inds", "=", "points", ".", "new_full", "(", "(", "num_points", ",", ")", ",", "\n", "0", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "if", "gt_labels", "is", "None", ":", "\n", "                ", "assigned_labels", "=", "None", "\n", "", "else", ":", "\n", "                ", "assigned_labels", "=", "points", ".", "new_zeros", "(", "(", "num_points", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "", "return", "AssignResult", "(", "\n", "num_gts", ",", "assigned_gt_inds", ",", "None", ",", "labels", "=", "assigned_labels", ")", "\n", "\n", "", "points_xy", "=", "points", "[", ":", ",", ":", "2", "]", "\n", "points_stride", "=", "points", "[", ":", ",", "2", "]", "\n", "points_lvl", "=", "torch", ".", "log2", "(", "\n", "points_stride", ")", ".", "int", "(", ")", "# [3...,4...,5...,6...,7...]", "\n", "lvl_min", ",", "lvl_max", "=", "points_lvl", ".", "min", "(", ")", ",", "points_lvl", ".", "max", "(", ")", "\n", "\n", "# assign gt box", "\n", "gt_bboxes_xy", "=", "(", "gt_bboxes", "[", ":", ",", ":", "2", "]", "+", "gt_bboxes", "[", ":", ",", "2", ":", "]", ")", "/", "2", "\n", "gt_bboxes_wh", "=", "(", "gt_bboxes", "[", ":", ",", "2", ":", "]", "-", "gt_bboxes", "[", ":", ",", ":", "2", "]", ")", ".", "clamp", "(", "min", "=", "1e-6", ")", "\n", "scale", "=", "self", ".", "scale", "\n", "gt_bboxes_lvl", "=", "(", "(", "torch", ".", "log2", "(", "gt_bboxes_wh", "[", ":", ",", "0", "]", "/", "scale", ")", "+", "\n", "torch", ".", "log2", "(", "gt_bboxes_wh", "[", ":", ",", "1", "]", "/", "scale", ")", ")", "/", "2", ")", ".", "int", "(", ")", "\n", "gt_bboxes_lvl", "=", "torch", ".", "clamp", "(", "gt_bboxes_lvl", ",", "min", "=", "lvl_min", ",", "max", "=", "lvl_max", ")", "\n", "\n", "# stores the assigned gt index of each point", "\n", "assigned_gt_inds", "=", "points", ".", "new_zeros", "(", "(", "num_points", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "# stores the assigned gt dist (to this point) of each point", "\n", "assigned_gt_dist", "=", "points", ".", "new_full", "(", "(", "num_points", ",", ")", ",", "float", "(", "'inf'", ")", ")", "\n", "points_range", "=", "torch", ".", "arange", "(", "points", ".", "shape", "[", "0", "]", ")", "\n", "\n", "for", "idx", "in", "range", "(", "num_gts", ")", ":", "\n", "            ", "gt_lvl", "=", "gt_bboxes_lvl", "[", "idx", "]", "\n", "# get the index of points in this level", "\n", "lvl_idx", "=", "gt_lvl", "==", "points_lvl", "\n", "points_index", "=", "points_range", "[", "lvl_idx", "]", "\n", "# get the points in this level", "\n", "lvl_points", "=", "points_xy", "[", "lvl_idx", ",", ":", "]", "\n", "# get the center point of gt", "\n", "gt_point", "=", "gt_bboxes_xy", "[", "[", "idx", "]", ",", ":", "]", "\n", "# get width and height of gt", "\n", "gt_wh", "=", "gt_bboxes_wh", "[", "[", "idx", "]", ",", ":", "]", "\n", "# compute the distance between gt center and", "\n", "#   all points in this level", "\n", "points_gt_dist", "=", "(", "(", "lvl_points", "-", "gt_point", ")", "/", "gt_wh", ")", ".", "norm", "(", "dim", "=", "1", ")", "\n", "# find the nearest k points to gt center in this level", "\n", "min_dist", ",", "min_dist_index", "=", "torch", ".", "topk", "(", "\n", "points_gt_dist", ",", "self", ".", "pos_num", ",", "largest", "=", "False", ")", "\n", "# the index of nearest k points to gt center in this level", "\n", "min_dist_points_index", "=", "points_index", "[", "min_dist_index", "]", "\n", "# The less_than_recorded_index stores the index", "\n", "#   of min_dist that is less then the assigned_gt_dist. Where", "\n", "#   assigned_gt_dist stores the dist from previous assigned gt", "\n", "#   (if exist) to each point.", "\n", "less_than_recorded_index", "=", "min_dist", "<", "assigned_gt_dist", "[", "\n", "min_dist_points_index", "]", "\n", "# The min_dist_points_index stores the index of points satisfy:", "\n", "#   (1) it is k nearest to current gt center in this level.", "\n", "#   (2) it is closer to current gt center than other gt center.", "\n", "min_dist_points_index", "=", "min_dist_points_index", "[", "\n", "less_than_recorded_index", "]", "\n", "# assign the result", "\n", "assigned_gt_inds", "[", "min_dist_points_index", "]", "=", "idx", "+", "1", "\n", "assigned_gt_dist", "[", "min_dist_points_index", "]", "=", "min_dist", "[", "\n", "less_than_recorded_index", "]", "\n", "\n", "", "if", "gt_labels", "is", "not", "None", ":", "\n", "            ", "assigned_labels", "=", "assigned_gt_inds", ".", "new_zeros", "(", "(", "num_points", ",", ")", ")", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "assigned_gt_inds", ">", "0", ")", ".", "squeeze", "(", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "assigned_labels", "[", "pos_inds", "]", "=", "gt_labels", "[", "\n", "assigned_gt_inds", "[", "pos_inds", "]", "-", "1", "]", "\n", "", "", "else", ":", "\n", "            ", "assigned_labels", "=", "None", "\n", "\n", "", "return", "AssignResult", "(", "\n", "num_gts", ",", "assigned_gt_inds", ",", "None", ",", "labels", "=", "assigned_labels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.__init__": [[43, 48], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_gts", ",", "gt_inds", ",", "max_overlaps", ",", "labels", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_gts", "=", "num_gts", "\n", "self", ".", "gt_inds", "=", "gt_inds", "\n", "self", ".", "max_overlaps", "=", "max_overlaps", "\n", "self", ".", "labels", "=", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.num_preds": [[49, 55], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_preds", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the number of predictions in this assignment\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "gt_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.info": [[56, 67], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "info", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary of info about the object\n        \"\"\"", "\n", "return", "{", "\n", "'num_gts'", ":", "self", ".", "num_gts", ",", "\n", "'num_preds'", ":", "self", ".", "num_preds", ",", "\n", "'gt_inds'", ":", "self", ".", "gt_inds", ",", "\n", "'max_overlaps'", ":", "self", ".", "max_overlaps", ",", "\n", "'labels'", ":", "self", ".", "labels", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.__nice__": [[69, 90], ["parts.append", "parts.append", "parts.append", "parts.append", "parts.append", "parts.append", "parts.append", "tuple", "tuple", "tuple"], "methods", ["None"], ["", "def", "__nice__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Create a \"nice\" summary string describing this assign result\n        \"\"\"", "\n", "parts", "=", "[", "]", "\n", "parts", ".", "append", "(", "'num_gts={!r}'", ".", "format", "(", "self", ".", "num_gts", ")", ")", "\n", "if", "self", ".", "gt_inds", "is", "None", ":", "\n", "            ", "parts", ".", "append", "(", "'gt_inds={!r}'", ".", "format", "(", "self", ".", "gt_inds", ")", ")", "\n", "", "else", ":", "\n", "            ", "parts", ".", "append", "(", "'gt_inds.shape={!r}'", ".", "format", "(", "\n", "tuple", "(", "self", ".", "gt_inds", ".", "shape", ")", ")", ")", "\n", "", "if", "self", ".", "max_overlaps", "is", "None", ":", "\n", "            ", "parts", ".", "append", "(", "'max_overlaps={!r}'", ".", "format", "(", "self", ".", "max_overlaps", ")", ")", "\n", "", "else", ":", "\n", "            ", "parts", ".", "append", "(", "'max_overlaps.shape={!r}'", ".", "format", "(", "\n", "tuple", "(", "self", ".", "max_overlaps", ".", "shape", ")", ")", ")", "\n", "", "if", "self", ".", "labels", "is", "None", ":", "\n", "            ", "parts", ".", "append", "(", "'labels={!r}'", ".", "format", "(", "self", ".", "labels", ")", ")", "\n", "", "else", ":", "\n", "            ", "parts", ".", "append", "(", "'labels.shape={!r}'", ".", "format", "(", "tuple", "(", "self", ".", "labels", ".", "shape", ")", ")", ")", "\n", "", "return", "', '", ".", "join", "(", "parts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.random": [[91, 182], ["demodata.ensure_rng", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "cls", "kwargs.get", "demodata.ensure_rng.randint", "demodata.ensure_rng.randint", "torch.zeros", "torch.zeros", "torch.from_numpy", "torch.from_numpy", "min", "demodata.ensure_rng.shuffle", "assigned_idxs.sort", "torch.zeros", "np.arange", "demodata.ensure_rng.shuffle", "torch.from_numpy", "torch.from_numpy", "torch.zeros", "demodata.ensure_rng.rand", "min", "np.where", "torch.from_numpy", "demodata.ensure_rng.randint", "demodata.ensure_rng.rand", "demodata.ensure_rng.rand", "torch.from_numpy.sum", "demodata.ensure_rng.rand", "torch.zeros", "torch.from_numpy", "demodata.ensure_rng.rand", "demodata.ensure_rng.randint"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.demodata.ensure_rng", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "@", "classmethod", "\n", "def", "random", "(", "cls", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Create random AssignResult for tests or debugging.\n\n        Kwargs:\n            num_preds: number of predicted boxes\n            num_gts: number of true boxes\n            p_ignore (float): probability of a predicted box assinged to an\n                ignored truth\n            p_assigned (float): probability of a predicted box not being\n                assigned\n            p_use_label (float | bool): with labels or not\n            rng (None | int | numpy.random.RandomState): seed or state\n\n        Returns:\n            AssignResult :\n\n        Example:\n            >>> from mmdet.core.bbox.assigners.assign_result import *  # NOQA\n            >>> self = AssignResult.random()\n            >>> print(self.info)\n        \"\"\"", "\n", "from", "mmdet", ".", "core", ".", "bbox", "import", "demodata", "\n", "rng", "=", "demodata", ".", "ensure_rng", "(", "kwargs", ".", "get", "(", "'rng'", ",", "None", ")", ")", "\n", "\n", "num_gts", "=", "kwargs", ".", "get", "(", "'num_gts'", ",", "None", ")", "\n", "num_preds", "=", "kwargs", ".", "get", "(", "'num_preds'", ",", "None", ")", "\n", "p_ignore", "=", "kwargs", ".", "get", "(", "'p_ignore'", ",", "0.3", ")", "\n", "p_assigned", "=", "kwargs", ".", "get", "(", "'p_assigned'", ",", "0.7", ")", "\n", "p_use_label", "=", "kwargs", ".", "get", "(", "'p_use_label'", ",", "0.5", ")", "\n", "num_classes", "=", "kwargs", ".", "get", "(", "'p_use_label'", ",", "3", ")", "\n", "\n", "if", "num_gts", "is", "None", ":", "\n", "            ", "num_gts", "=", "rng", ".", "randint", "(", "0", ",", "8", ")", "\n", "", "if", "num_preds", "is", "None", ":", "\n", "            ", "num_preds", "=", "rng", ".", "randint", "(", "0", ",", "16", ")", "\n", "\n", "", "if", "num_gts", "==", "0", ":", "\n", "            ", "max_overlaps", "=", "torch", ".", "zeros", "(", "num_preds", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "gt_inds", "=", "torch", ".", "zeros", "(", "num_preds", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "if", "p_use_label", "is", "True", "or", "p_use_label", "<", "rng", ".", "rand", "(", ")", ":", "\n", "                ", "labels", "=", "torch", ".", "zeros", "(", "num_preds", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "", "else", ":", "\n", "                ", "labels", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "import", "numpy", "as", "np", "\n", "# Create an overlap for each predicted box", "\n", "max_overlaps", "=", "torch", ".", "from_numpy", "(", "rng", ".", "rand", "(", "num_preds", ")", ")", "\n", "\n", "# Construct gt_inds for each predicted box", "\n", "is_assigned", "=", "torch", ".", "from_numpy", "(", "rng", ".", "rand", "(", "num_preds", ")", "<", "p_assigned", ")", "\n", "# maximum number of assignments constraints", "\n", "n_assigned", "=", "min", "(", "num_preds", ",", "min", "(", "num_gts", ",", "is_assigned", ".", "sum", "(", ")", ")", ")", "\n", "\n", "assigned_idxs", "=", "np", ".", "where", "(", "is_assigned", ")", "[", "0", "]", "\n", "rng", ".", "shuffle", "(", "assigned_idxs", ")", "\n", "assigned_idxs", "=", "assigned_idxs", "[", "0", ":", "n_assigned", "]", "\n", "assigned_idxs", ".", "sort", "(", ")", "\n", "\n", "is_assigned", "[", ":", "]", "=", "0", "\n", "is_assigned", "[", "assigned_idxs", "]", "=", "True", "\n", "\n", "is_ignore", "=", "torch", ".", "from_numpy", "(", "\n", "rng", ".", "rand", "(", "num_preds", ")", "<", "p_ignore", ")", "&", "is_assigned", "\n", "\n", "gt_inds", "=", "torch", ".", "zeros", "(", "num_preds", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "true_idxs", "=", "np", ".", "arange", "(", "num_gts", ")", "\n", "rng", ".", "shuffle", "(", "true_idxs", ")", "\n", "true_idxs", "=", "torch", ".", "from_numpy", "(", "true_idxs", ")", "\n", "gt_inds", "[", "is_assigned", "]", "=", "true_idxs", "[", ":", "n_assigned", "]", "\n", "\n", "gt_inds", "=", "torch", ".", "from_numpy", "(", "\n", "rng", ".", "randint", "(", "1", ",", "num_gts", "+", "1", ",", "size", "=", "num_preds", ")", ")", "\n", "gt_inds", "[", "is_ignore", "]", "=", "-", "1", "\n", "gt_inds", "[", "~", "is_assigned", "]", "=", "0", "\n", "max_overlaps", "[", "~", "is_assigned", "]", "=", "0", "\n", "\n", "if", "p_use_label", "is", "True", "or", "p_use_label", "<", "rng", ".", "rand", "(", ")", ":", "\n", "                ", "if", "num_classes", "==", "0", ":", "\n", "                    ", "labels", "=", "torch", ".", "zeros", "(", "num_preds", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "", "else", ":", "\n", "                    ", "labels", "=", "torch", ".", "from_numpy", "(", "\n", "rng", ".", "randint", "(", "1", ",", "num_classes", "+", "1", ",", "size", "=", "num_preds", ")", ")", "\n", "labels", "[", "~", "is_assigned", "]", "=", "0", "\n", "", "", "else", ":", "\n", "                ", "labels", "=", "None", "\n", "\n", "", "", "self", "=", "cls", "(", "num_gts", ",", "gt_inds", ",", "max_overlaps", ",", "labels", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.add_gt_": [[183, 193], ["torch.arange", "torch.cat", "torch.cat", "torch.cat", "len", "assign_result.AssignResult.max_overlaps.new_ones", "len"], "methods", ["None"], ["", "def", "add_gt_", "(", "self", ",", "gt_labels", ")", ":", "\n", "        ", "self_inds", "=", "torch", ".", "arange", "(", "\n", "1", ",", "len", "(", "gt_labels", ")", "+", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "gt_labels", ".", "device", ")", "\n", "self", ".", "gt_inds", "=", "torch", ".", "cat", "(", "[", "self_inds", ",", "self", ".", "gt_inds", "]", ")", "\n", "\n", "self", ".", "max_overlaps", "=", "torch", ".", "cat", "(", "\n", "[", "self", ".", "max_overlaps", ".", "new_ones", "(", "len", "(", "gt_labels", ")", ")", ",", "self", ".", "max_overlaps", "]", ")", "\n", "\n", "if", "self", ".", "labels", "is", "not", "None", ":", "\n", "            ", "self", ".", "labels", "=", "torch", ".", "cat", "(", "[", "gt_labels", ",", "self", ".", "labels", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.__init__": [[21, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "topk", ")", ":", "\n", "        ", "self", ".", "topk", "=", "topk", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign": [[26, 160], ["geometry.bbox_overlaps", "geometry.bbox_overlaps.new_full", "torch.stack", "torch.stack", "enumerate", "torch.cat", "candidate_overlaps.mean", "candidate_overlaps.std", "range", "bboxes_cx.view().expand().contiguous().view", "bboxes_cy.view().expand().contiguous().view", "candidate_idxs.view.view.view", "torch.full_like().t().contiguous().view", "overlaps_inf.view().t.view().t.view().t", "overlaps_inf.view().t.view().t.max", "assign_result.AssignResult", "gt_bboxes.size", "bboxes.size", "geometry.bbox_overlaps.new_zeros", "assign_result.AssignResult", "distances_per_level.topk", "candidate_idxs.view.view.append", "ep_bboxes_cx[].view", "ep_bboxes_cy[].view", "ep_bboxes_cx[].view", "ep_bboxes_cy[].view", "candidate_idxs.view.view.view", "geometry.bbox_overlaps.t().contiguous().view", "geometry.bbox_overlaps.new_full.new_zeros", "torch.nonzero().squeeze", "geometry.bbox_overlaps.new_zeros", "bboxes_cx.view().expand().contiguous", "bboxes_cy.view().expand().contiguous", "torch.stack().min", "torch.full_like().t().contiguous", "is_pos.view", "overlaps_inf.view().t.view().t.view", "torch.nonzero().squeeze.numel", "torch.arange", "geometry.bbox_overlaps.t().contiguous", "torch.nonzero", "bboxes_cx.view().expand", "bboxes_cy.view().expand", "torch.stack", "torch.full_like().t", "geometry.bbox_overlaps.t", "bboxes_cx.view", "bboxes_cy.view", "torch.full_like"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.geometry.bbox_overlaps"], ["", "def", "assign", "(", "self", ",", "\n", "bboxes", ",", "\n", "num_level_bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "gt_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"Assign gt to bboxes.\n\n        The assignment is done in following steps\n\n        1. compute iou between all bbox (bbox of all pyramid levels) and gt\n        2. compute center distance between all bbox and gt\n        3. on each pyramid level, for each gt, select k bbox whose center\n           are closest to the gt center, so we total select k*l bbox as\n           candidates for each gt\n        4. get corresponding iou for the these candidates, and compute the\n           mean and std, set mean + std as the iou threshold\n        5. select these candidates whose iou are greater than or equal to\n           the threshold as postive\n        6. limit the positive sample's center in gt\n\n\n        Args:\n            bboxes (Tensor): Bounding boxes to be assigned, shape(n, 4).\n            num_level_bboxes (List): num of bboxes in each level\n            gt_bboxes (Tensor): Groundtruth boxes, shape (k, 4).\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\n                labelled as `ignored`, e.g., crowd boxes in COCO.\n            gt_labels (Tensor, optional): Label of gt_bboxes, shape (k, ).\n\n        Returns:\n            :obj:`AssignResult`: The assign result.\n        \"\"\"", "\n", "INF", "=", "100000000", "\n", "bboxes", "=", "bboxes", "[", ":", ",", ":", "4", "]", "\n", "num_gt", ",", "num_bboxes", "=", "gt_bboxes", ".", "size", "(", "0", ")", ",", "bboxes", ".", "size", "(", "0", ")", "\n", "\n", "# compute iou between all bbox and gt", "\n", "overlaps", "=", "bbox_overlaps", "(", "bboxes", ",", "gt_bboxes", ")", "\n", "\n", "# assign 0 by default", "\n", "assigned_gt_inds", "=", "overlaps", ".", "new_full", "(", "(", "num_bboxes", ",", ")", ",", "\n", "0", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "if", "num_gt", "==", "0", "or", "num_bboxes", "==", "0", ":", "\n", "# No ground truth or boxes, return empty assignment", "\n", "            ", "max_overlaps", "=", "overlaps", ".", "new_zeros", "(", "(", "num_bboxes", ",", ")", ")", "\n", "if", "num_gt", "==", "0", ":", "\n", "# No truth, assign everything to background", "\n", "                ", "assigned_gt_inds", "[", ":", "]", "=", "0", "\n", "", "if", "gt_labels", "is", "None", ":", "\n", "                ", "assigned_labels", "=", "None", "\n", "", "else", ":", "\n", "                ", "assigned_labels", "=", "overlaps", ".", "new_zeros", "(", "(", "num_bboxes", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "", "return", "AssignResult", "(", "\n", "num_gt", ",", "assigned_gt_inds", ",", "max_overlaps", ",", "labels", "=", "assigned_labels", ")", "\n", "\n", "# compute center distance between all bbox and gt", "\n", "", "gt_cx", "=", "(", "gt_bboxes", "[", ":", ",", "0", "]", "+", "gt_bboxes", "[", ":", ",", "2", "]", ")", "/", "2.0", "\n", "gt_cy", "=", "(", "gt_bboxes", "[", ":", ",", "1", "]", "+", "gt_bboxes", "[", ":", ",", "3", "]", ")", "/", "2.0", "\n", "gt_points", "=", "torch", ".", "stack", "(", "(", "gt_cx", ",", "gt_cy", ")", ",", "dim", "=", "1", ")", "\n", "\n", "bboxes_cx", "=", "(", "bboxes", "[", ":", ",", "0", "]", "+", "bboxes", "[", ":", ",", "2", "]", ")", "/", "2.0", "\n", "bboxes_cy", "=", "(", "bboxes", "[", ":", ",", "1", "]", "+", "bboxes", "[", ":", ",", "3", "]", ")", "/", "2.0", "\n", "bboxes_points", "=", "torch", ".", "stack", "(", "(", "bboxes_cx", ",", "bboxes_cy", ")", ",", "dim", "=", "1", ")", "\n", "\n", "distances", "=", "(", "bboxes_points", "[", ":", ",", "None", ",", ":", "]", "-", "\n", "gt_points", "[", "None", ",", ":", ",", ":", "]", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "\n", "# Selecting candidates based on the center distance", "\n", "candidate_idxs", "=", "[", "]", "\n", "start_idx", "=", "0", "\n", "for", "level", ",", "bboxes_per_level", "in", "enumerate", "(", "num_level_bboxes", ")", ":", "\n", "# on each pyramid level, for each gt,", "\n", "# select k bbox whose center are closest to the gt center", "\n", "            ", "end_idx", "=", "start_idx", "+", "bboxes_per_level", "\n", "distances_per_level", "=", "distances", "[", "start_idx", ":", "end_idx", ",", ":", "]", "\n", "_", ",", "topk_idxs_per_level", "=", "distances_per_level", ".", "topk", "(", "\n", "self", ".", "topk", ",", "dim", "=", "0", ",", "largest", "=", "False", ")", "\n", "candidate_idxs", ".", "append", "(", "topk_idxs_per_level", "+", "start_idx", ")", "\n", "start_idx", "=", "end_idx", "\n", "", "candidate_idxs", "=", "torch", ".", "cat", "(", "candidate_idxs", ",", "dim", "=", "0", ")", "\n", "\n", "# get corresponding iou for the these candidates, and compute the", "\n", "# mean and std, set mean + std as the iou threshold", "\n", "candidate_overlaps", "=", "overlaps", "[", "candidate_idxs", ",", "torch", ".", "arange", "(", "num_gt", ")", "]", "\n", "overlaps_mean_per_gt", "=", "candidate_overlaps", ".", "mean", "(", "0", ")", "\n", "overlaps_std_per_gt", "=", "candidate_overlaps", ".", "std", "(", "0", ")", "\n", "overlaps_thr_per_gt", "=", "overlaps_mean_per_gt", "+", "overlaps_std_per_gt", "\n", "\n", "is_pos", "=", "candidate_overlaps", ">=", "overlaps_thr_per_gt", "[", "None", ",", ":", "]", "\n", "\n", "# limit the positive sample's center in gt", "\n", "for", "gt_idx", "in", "range", "(", "num_gt", ")", ":", "\n", "            ", "candidate_idxs", "[", ":", ",", "gt_idx", "]", "+=", "gt_idx", "*", "num_bboxes", "\n", "", "ep_bboxes_cx", "=", "bboxes_cx", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand", "(", "\n", "num_gt", ",", "num_bboxes", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "ep_bboxes_cy", "=", "bboxes_cy", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand", "(", "\n", "num_gt", ",", "num_bboxes", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "candidate_idxs", "=", "candidate_idxs", ".", "view", "(", "-", "1", ")", "\n", "\n", "# calculate the left, top, right, bottom distance between positive", "\n", "# bbox center and gt side", "\n", "l_", "=", "ep_bboxes_cx", "[", "candidate_idxs", "]", ".", "view", "(", "-", "1", ",", "num_gt", ")", "-", "gt_bboxes", "[", ":", ",", "0", "]", "\n", "t_", "=", "ep_bboxes_cy", "[", "candidate_idxs", "]", ".", "view", "(", "-", "1", ",", "num_gt", ")", "-", "gt_bboxes", "[", ":", ",", "1", "]", "\n", "r_", "=", "gt_bboxes", "[", ":", ",", "2", "]", "-", "ep_bboxes_cx", "[", "candidate_idxs", "]", ".", "view", "(", "-", "1", ",", "num_gt", ")", "\n", "b_", "=", "gt_bboxes", "[", ":", ",", "3", "]", "-", "ep_bboxes_cy", "[", "candidate_idxs", "]", ".", "view", "(", "-", "1", ",", "num_gt", ")", "\n", "is_in_gts", "=", "torch", ".", "stack", "(", "[", "l_", ",", "t_", ",", "r_", ",", "b_", "]", ",", "dim", "=", "1", ")", ".", "min", "(", "dim", "=", "1", ")", "[", "0", "]", ">", "0.01", "\n", "is_pos", "=", "is_pos", "&", "is_in_gts", "\n", "\n", "# if an anchor box is assigned to multiple gts,", "\n", "# the one with the highest IoU will be selected.", "\n", "overlaps_inf", "=", "torch", ".", "full_like", "(", "overlaps", ",", "\n", "-", "INF", ")", ".", "t", "(", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "index", "=", "candidate_idxs", ".", "view", "(", "-", "1", ")", "[", "is_pos", ".", "view", "(", "-", "1", ")", "]", "\n", "overlaps_inf", "[", "index", "]", "=", "overlaps", ".", "t", "(", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "[", "index", "]", "\n", "overlaps_inf", "=", "overlaps_inf", ".", "view", "(", "num_gt", ",", "-", "1", ")", ".", "t", "(", ")", "\n", "\n", "max_overlaps", ",", "argmax_overlaps", "=", "overlaps_inf", ".", "max", "(", "dim", "=", "1", ")", "\n", "assigned_gt_inds", "[", "\n", "max_overlaps", "!=", "-", "INF", "]", "=", "argmax_overlaps", "[", "max_overlaps", "!=", "-", "INF", "]", "+", "1", "\n", "\n", "if", "gt_labels", "is", "not", "None", ":", "\n", "            ", "assigned_labels", "=", "assigned_gt_inds", ".", "new_zeros", "(", "(", "num_bboxes", ",", ")", ")", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "assigned_gt_inds", ">", "0", ")", ".", "squeeze", "(", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "assigned_labels", "[", "pos_inds", "]", "=", "gt_labels", "[", "\n", "assigned_gt_inds", "[", "pos_inds", "]", "-", "1", "]", "\n", "", "", "else", ":", "\n", "            ", "assigned_labels", "=", "None", "\n", "", "return", "AssignResult", "(", "\n", "num_gt", ",", "assigned_gt_inds", ",", "max_overlaps", ",", "labels", "=", "assigned_labels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.demo.webcam_demo.parse_args": [[9, 20], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MMDetection webcam demo'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'CUDA device id'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--camera-id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'camera device id'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--score-thr'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'bbox score threshold'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.demo.webcam_demo.main": [[22, 41], ["webcam_demo.parse_args", "mmdet.apis.init_detector", "cv2.VideoCapture", "print", "cv2.VideoCapture.read", "mmdet.apis.inference_detector", "cv2.waitKey", "mmdet.apis.show_result", "torch.device", "ord", "ord"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.inference.init_detector", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.inference.inference_detector", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.show_result"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "model", "=", "init_detector", "(", "\n", "args", ".", "config", ",", "args", ".", "checkpoint", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ",", "args", ".", "device", ")", ")", "\n", "\n", "camera", "=", "cv2", ".", "VideoCapture", "(", "args", ".", "camera_id", ")", "\n", "\n", "print", "(", "'Press \"Esc\", \"q\" or \"Q\" to exit.'", ")", "\n", "while", "True", ":", "\n", "        ", "ret_val", ",", "img", "=", "camera", ".", "read", "(", ")", "\n", "result", "=", "inference_detector", "(", "model", ",", "img", ")", "\n", "\n", "ch", "=", "cv2", ".", "waitKey", "(", "1", ")", "\n", "if", "ch", "==", "27", "or", "ch", "==", "ord", "(", "'q'", ")", "or", "ch", "==", "ord", "(", "'Q'", ")", ":", "\n", "            ", "break", "\n", "\n", "", "show_result", "(", "\n", "img", ",", "result", ",", "model", ".", "CLASSES", ",", "score_thr", "=", "args", ".", "score_thr", ",", "wait_time", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.pytorch2onnx.export_onnx_model": [[15, 57], ["isinstance", "model.apply", "onnx.optimizer.optimize", "torch.no_grad", "onnx.optimizer.get_available_passes", "all", "io.BytesIO", "torch.onnx.export", "onnx.load_from_string", "f.getvalue"], "function", ["None"], ["def", "export_onnx_model", "(", "model", ",", "inputs", ",", "passes", ")", ":", "\n", "    ", "\"\"\"\n    Trace and export a model to onnx format.\n    Modified from https://github.com/facebookresearch/detectron2/\n\n    Args:\n        model (nn.Module):\n        inputs (tuple[args]): the model will be called by `model(*inputs)`\n        passes (None or list[str]): the optimization passed for ONNX model\n\n    Returns:\n        an onnx model\n    \"\"\"", "\n", "assert", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "\n", "# make sure all modules are in eval mode, onnx may change the training", "\n", "# state of the module if the states are not consistent", "\n", "def", "_check_eval", "(", "module", ")", ":", "\n", "        ", "assert", "not", "module", ".", "training", "\n", "\n", "", "model", ".", "apply", "(", "_check_eval", ")", "\n", "\n", "# Export the model to ONNX", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "with", "io", ".", "BytesIO", "(", ")", "as", "f", ":", "\n", "            ", "torch", ".", "onnx", ".", "export", "(", "\n", "model", ",", "\n", "inputs", ",", "\n", "f", ",", "\n", "operator_export_type", "=", "OperatorExportTypes", ".", "ONNX_ATEN_FALLBACK", ",", "\n", "# verbose=True,  # NOTE: uncomment this for debugging", "\n", "# export_params=True,", "\n", ")", "\n", "onnx_model", "=", "onnx", ".", "load_from_string", "(", "f", ".", "getvalue", "(", ")", ")", "\n", "\n", "# Apply ONNX's Optimization", "\n", "", "", "if", "passes", "is", "not", "None", ":", "\n", "        ", "all_passes", "=", "optimizer", ".", "get_available_passes", "(", ")", "\n", "assert", "all", "(", "p", "in", "all_passes", "for", "p", "in", "passes", ")", ",", "'Only {} are supported'", ".", "format", "(", "all_passes", ")", "\n", "", "onnx_model", "=", "optimizer", ".", "optimize", "(", "onnx_model", ",", "passes", ")", "\n", "return", "onnx_model", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.pytorch2onnx.parse_args": [[59, 76], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'MMDet pytorch model conversion to ONNX'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--out'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'output ONNX filename'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--shape'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "1280", ",", "800", "]", ",", "\n", "help", "=", "'input image size'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--passes'", ",", "type", "=", "str", ",", "nargs", "=", "'+'", ",", "help", "=", "'ONNX optimization passes'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.pytorch2onnx.main": [[78, 122], ["pytorch2onnx.parse_args", "mmcv.Config.fromfile", "mmdet.models.build_detector", "mmcv.runner.load_checkpoint", "mmdet.models.build_detector.cpu().eval", "mmdet.models.build_detector.modules", "hasattr", "torch.empty", "pytorch2onnx.export_onnx_model", "onnx.helper.printable_graph", "print", "onnx.save", "parse_args.out.endswith", "ValueError", "len", "isinstance", "NotImplementedError", "len", "ValueError", "mmdet.models.build_detector.cpu", "tuple", "next", "next", "mmdet.models.build_detector.parameters", "mmdet.models.build_detector.parameters"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_detector", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.pytorch2onnx.export_onnx_model"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "if", "not", "args", ".", "out", ".", "endswith", "(", "'.onnx'", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a onnx file.'", ")", "\n", "\n", "", "if", "len", "(", "args", ".", "shape", ")", "==", "1", ":", "\n", "        ", "input_shape", "=", "(", "3", ",", "args", ".", "shape", "[", "0", "]", ",", "args", ".", "shape", "[", "0", "]", ")", "\n", "", "elif", "len", "(", "args", ".", "shape", ")", "==", "2", ":", "\n", "        ", "input_shape", "=", "(", "3", ",", ")", "+", "tuple", "(", "args", ".", "shape", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid input shape'", ")", "\n", "\n", "", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "\n", "# build the model and load checkpoint", "\n", "model", "=", "build_detector", "(", "cfg", ".", "model", ",", "train_cfg", "=", "None", ",", "test_cfg", "=", "cfg", ".", "test_cfg", ")", "\n", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "# Only support CPU mode for now", "\n", "model", ".", "cpu", "(", ")", ".", "eval", "(", ")", "\n", "# Customized ops are not supported, use torchvision ops instead.", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "RoIPool", ",", "RoIAlign", ")", ")", ":", "\n", "# set use_torchvision on-the-fly", "\n", "            ", "m", ".", "use_torchvision", "=", "True", "\n", "\n", "# TODO: a better way to override forward function", "\n", "", "", "if", "hasattr", "(", "model", ",", "'forward_dummy'", ")", ":", "\n", "        ", "model", ".", "forward", "=", "model", ".", "forward_dummy", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'ONNX conversion is currently not currently supported with '", "\n", "'{}'", ".", "format", "(", "model", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "", "input_data", "=", "torch", ".", "empty", "(", "(", "1", ",", "*", "input_shape", ")", ",", "\n", "dtype", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "dtype", ",", "\n", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", ")", "\n", "\n", "onnx_model", "=", "export_onnx_model", "(", "model", ",", "(", "input_data", ",", ")", ",", "args", ".", "passes", ")", "\n", "# Print a human readable representation of the graph", "\n", "onnx", ".", "helper", ".", "printable_graph", "(", "onnx_model", ".", "graph", ")", "\n", "print", "(", "'saving model in {}'", ".", "format", "(", "args", ".", "out", ")", ")", "\n", "onnx", ".", "save", "(", "onnx_model", ",", "args", ".", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.publish_model.parse_args": [[7, 14], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Process a checkpoint to be published'", ")", "\n", "parser", ".", "add_argument", "(", "'in_file'", ",", "help", "=", "'input checkpoint filename'", ")", "\n", "parser", ".", "add_argument", "(", "'out_file'", ",", "help", "=", "'output checkpoint filename'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.publish_model.process_checkpoint": [[16, 27], ["torch.load", "torch.save", "subprocess.check_output().decode", "subprocess.Popen", "out_file.rstrip", "subprocess.check_output"], "function", ["None"], ["", "def", "process_checkpoint", "(", "in_file", ",", "out_file", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "in_file", ",", "map_location", "=", "'cpu'", ")", "\n", "# remove optimizer for smaller file size", "\n", "if", "'optimizer'", "in", "checkpoint", ":", "\n", "        ", "del", "checkpoint", "[", "'optimizer'", "]", "\n", "# if it is necessary to remove some sensitive data in checkpoint['meta'],", "\n", "# add the code here.", "\n", "", "torch", ".", "save", "(", "checkpoint", ",", "out_file", ")", "\n", "sha", "=", "subprocess", ".", "check_output", "(", "[", "'sha256sum'", ",", "out_file", "]", ")", ".", "decode", "(", ")", "\n", "final_file", "=", "out_file", ".", "rstrip", "(", "'.pth'", ")", "+", "'-{}.pth'", ".", "format", "(", "sha", "[", ":", "8", "]", ")", "\n", "subprocess", ".", "Popen", "(", "[", "'mv'", ",", "out_file", ",", "final_file", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.publish_model.main": [[29, 32], ["publish_model.parse_args", "publish_model.process_checkpoint"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.publish_model.process_checkpoint"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "process_checkpoint", "(", "args", ".", "in_file", ",", "args", ".", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.coco_error_analysis.makeplot": [[12, 50], ["numpy.vstack", "range", "len", "ps_curve.insert", "matplotlib.figure", "matplotlib.subplot", "range", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.title", "matplotlib.legend", "plt.figure.savefig", "matplotlib.close", "numpy.ones", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "ps_.mean", "numpy.zeros", "len", "plt.subplot.plot", "plt.subplot.fill_between", "ps_.mean", "str"], "function", ["None"], ["def", "makeplot", "(", "rs", ",", "ps", ",", "outDir", ",", "class_name", ",", "iou_type", ")", ":", "\n", "    ", "cs", "=", "np", ".", "vstack", "(", "[", "\n", "np", ".", "ones", "(", "(", "2", ",", "3", ")", ")", ",", "\n", "np", ".", "array", "(", "[", ".31", ",", ".51", ",", ".74", "]", ")", ",", "\n", "np", ".", "array", "(", "[", ".75", ",", ".31", ",", ".30", "]", ")", ",", "\n", "np", ".", "array", "(", "[", ".36", ",", ".90", ",", ".38", "]", ")", ",", "\n", "np", ".", "array", "(", "[", ".50", ",", ".39", ",", ".64", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "1", ",", ".6", ",", "0", "]", ")", "\n", "]", ")", "\n", "areaNames", "=", "[", "'allarea'", ",", "'small'", ",", "'medium'", ",", "'large'", "]", "\n", "types", "=", "[", "'C75'", ",", "'C50'", ",", "'Loc'", ",", "'Sim'", ",", "'Oth'", ",", "'BG'", ",", "'FN'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "areaNames", ")", ")", ":", "\n", "        ", "area_ps", "=", "ps", "[", "...", ",", "i", ",", "0", "]", "\n", "figure_tile", "=", "iou_type", "+", "'-'", "+", "class_name", "+", "'-'", "+", "areaNames", "[", "i", "]", "\n", "aps", "=", "[", "ps_", ".", "mean", "(", ")", "for", "ps_", "in", "area_ps", "]", "\n", "ps_curve", "=", "[", "\n", "ps_", ".", "mean", "(", "axis", "=", "1", ")", "if", "ps_", ".", "ndim", ">", "1", "else", "ps_", "for", "ps_", "in", "area_ps", "\n", "]", "\n", "ps_curve", ".", "insert", "(", "0", ",", "np", ".", "zeros", "(", "ps_curve", "[", "0", "]", ".", "shape", ")", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "111", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "types", ")", ")", ":", "\n", "            ", "ax", ".", "plot", "(", "rs", ",", "ps_curve", "[", "k", "+", "1", "]", ",", "color", "=", "[", "0", ",", "0", ",", "0", "]", ",", "linewidth", "=", "0.5", ")", "\n", "ax", ".", "fill_between", "(", "\n", "rs", ",", "\n", "ps_curve", "[", "k", "]", ",", "\n", "ps_curve", "[", "k", "+", "1", "]", ",", "\n", "color", "=", "cs", "[", "k", "]", ",", "\n", "label", "=", "str", "(", "'[{:.3f}'", ".", "format", "(", "aps", "[", "k", "]", ")", "+", "']'", "+", "types", "[", "k", "]", ")", ")", "\n", "", "plt", ".", "xlabel", "(", "'recall'", ")", "\n", "plt", ".", "ylabel", "(", "'precision'", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "1.", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "1.", ")", "\n", "plt", ".", "title", "(", "figure_tile", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "# plt.show()", "\n", "fig", ".", "savefig", "(", "outDir", "+", "'/{}.png'", ".", "format", "(", "figure_tile", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.coco_error_analysis.analyze_individual_category": [[52, 102], ["print", "copy.deepcopy", "cocoGt.getImgIds", "copy.deepcopy.createIndex", "copy.deepcopy", "copy.deepcopy.getCatIds", "enumerate", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "copy.deepcopy", "enumerate", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "cocoGt.loadCats", "cocoGt.loadCats", "copy.deepcopy", "copy.deepcopy", "select_dt_anns.append"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.eval_hooks.EvalHook.evaluate", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.eval_hooks.EvalHook.evaluate"], ["", "", "def", "analyze_individual_category", "(", "k", ",", "cocoDt", ",", "cocoGt", ",", "catId", ",", "iou_type", ")", ":", "\n", "    ", "nm", "=", "cocoGt", ".", "loadCats", "(", "catId", ")", "[", "0", "]", "\n", "print", "(", "'--------------analyzing {}-{}---------------'", ".", "format", "(", "\n", "k", "+", "1", ",", "nm", "[", "'name'", "]", ")", ")", "\n", "ps_", "=", "{", "}", "\n", "dt", "=", "copy", ".", "deepcopy", "(", "cocoDt", ")", "\n", "nm", "=", "cocoGt", ".", "loadCats", "(", "catId", ")", "[", "0", "]", "\n", "imgIds", "=", "cocoGt", ".", "getImgIds", "(", ")", "\n", "dt_anns", "=", "dt", ".", "dataset", "[", "'annotations'", "]", "\n", "select_dt_anns", "=", "[", "]", "\n", "for", "ann", "in", "dt_anns", ":", "\n", "        ", "if", "ann", "[", "'category_id'", "]", "==", "catId", ":", "\n", "            ", "select_dt_anns", ".", "append", "(", "ann", ")", "\n", "", "", "dt", ".", "dataset", "[", "'annotations'", "]", "=", "select_dt_anns", "\n", "dt", ".", "createIndex", "(", ")", "\n", "# compute precision but ignore superclass confusion", "\n", "gt", "=", "copy", ".", "deepcopy", "(", "cocoGt", ")", "\n", "child_catIds", "=", "gt", ".", "getCatIds", "(", "supNms", "=", "[", "nm", "[", "'supercategory'", "]", "]", ")", "\n", "for", "idx", ",", "ann", "in", "enumerate", "(", "gt", ".", "dataset", "[", "'annotations'", "]", ")", ":", "\n", "        ", "if", "(", "ann", "[", "'category_id'", "]", "in", "child_catIds", "\n", "and", "ann", "[", "'category_id'", "]", "!=", "catId", ")", ":", "\n", "            ", "gt", ".", "dataset", "[", "'annotations'", "]", "[", "idx", "]", "[", "'ignore'", "]", "=", "1", "\n", "gt", ".", "dataset", "[", "'annotations'", "]", "[", "idx", "]", "[", "'iscrowd'", "]", "=", "1", "\n", "gt", ".", "dataset", "[", "'annotations'", "]", "[", "idx", "]", "[", "'category_id'", "]", "=", "catId", "\n", "", "", "cocoEval", "=", "COCOeval", "(", "gt", ",", "copy", ".", "deepcopy", "(", "dt", ")", ",", "iou_type", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "imgIds", "\n", "cocoEval", ".", "params", ".", "maxDets", "=", "[", "100", "]", "\n", "cocoEval", ".", "params", ".", "iouThrs", "=", "[", ".1", "]", "\n", "cocoEval", ".", "params", ".", "useCats", "=", "1", "\n", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "ps_supercategory", "=", "cocoEval", ".", "eval", "[", "'precision'", "]", "[", "0", ",", ":", ",", "k", ",", ":", ",", ":", "]", "\n", "ps_", "[", "'ps_supercategory'", "]", "=", "ps_supercategory", "\n", "# compute precision but ignore any class confusion", "\n", "gt", "=", "copy", ".", "deepcopy", "(", "cocoGt", ")", "\n", "for", "idx", ",", "ann", "in", "enumerate", "(", "gt", ".", "dataset", "[", "'annotations'", "]", ")", ":", "\n", "        ", "if", "ann", "[", "'category_id'", "]", "!=", "catId", ":", "\n", "            ", "gt", ".", "dataset", "[", "'annotations'", "]", "[", "idx", "]", "[", "'ignore'", "]", "=", "1", "\n", "gt", ".", "dataset", "[", "'annotations'", "]", "[", "idx", "]", "[", "'iscrowd'", "]", "=", "1", "\n", "gt", ".", "dataset", "[", "'annotations'", "]", "[", "idx", "]", "[", "'category_id'", "]", "=", "catId", "\n", "", "", "cocoEval", "=", "COCOeval", "(", "gt", ",", "copy", ".", "deepcopy", "(", "dt", ")", ",", "iou_type", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "imgIds", "\n", "cocoEval", ".", "params", ".", "maxDets", "=", "[", "100", "]", "\n", "cocoEval", ".", "params", ".", "iouThrs", "=", "[", ".1", "]", "\n", "cocoEval", ".", "params", ".", "useCats", "=", "1", "\n", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "ps_allcategory", "=", "cocoEval", ".", "eval", "[", "'precision'", "]", "[", "0", ",", ":", ",", "k", ",", ":", ",", ":", "]", "\n", "ps_", "[", "'ps_allcategory'", "]", "=", "ps_allcategory", "\n", "return", "k", ",", "ps_", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.coco_error_analysis.analyze_results": [[104, 157], ["os.path.dirname", "pycocotools.coco.COCO", "pycocotools.coco.COCO.loadRes", "pycocotools.coco.COCO.getImgIds", "os.path.exists", "print", "os.makedirs", "os.path.dirname", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "numpy.vstack", "pycocotools.coco.COCO.getCatIds", "enumerate", "coco_error_analysis.makeplot", "os.path.exists", "print", "os.makedirs", "copy.deepcopy", "copy.deepcopy", "multiprocessing.Pool", "pool.starmap", "print", "coco_error_analysis.makeplot", "numpy.zeros", "pycocotools.coco.COCO.loadCats", "enumerate"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.eval_hooks.EvalHook.evaluate", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.coco_error_analysis.makeplot", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.coco_error_analysis.makeplot"], ["", "def", "analyze_results", "(", "res_file", ",", "ann_file", ",", "res_types", ",", "out_dir", ")", ":", "\n", "    ", "for", "res_type", "in", "res_types", ":", "\n", "        ", "assert", "res_type", "in", "[", "'bbox'", ",", "'segm'", "]", "\n", "\n", "", "directory", "=", "os", ".", "path", ".", "dirname", "(", "out_dir", "+", "'/'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "        ", "print", "(", "'-------------create {}-----------------'", ".", "format", "(", "out_dir", ")", ")", "\n", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "cocoGt", "=", "COCO", "(", "ann_file", ")", "\n", "cocoDt", "=", "cocoGt", ".", "loadRes", "(", "res_file", ")", "\n", "imgIds", "=", "cocoGt", ".", "getImgIds", "(", ")", "\n", "for", "res_type", "in", "res_types", ":", "\n", "        ", "res_out_dir", "=", "out_dir", "+", "'/'", "+", "res_type", "+", "'/'", "\n", "res_directory", "=", "os", ".", "path", ".", "dirname", "(", "res_out_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "res_directory", ")", ":", "\n", "            ", "print", "(", "\n", "'-------------create {}-----------------'", ".", "format", "(", "res_out_dir", ")", ")", "\n", "os", ".", "makedirs", "(", "res_directory", ")", "\n", "", "iou_type", "=", "res_type", "\n", "cocoEval", "=", "COCOeval", "(", "\n", "copy", ".", "deepcopy", "(", "cocoGt", ")", ",", "copy", ".", "deepcopy", "(", "cocoDt", ")", ",", "iou_type", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "imgIds", "\n", "cocoEval", ".", "params", ".", "iouThrs", "=", "[", ".75", ",", ".5", ",", ".1", "]", "\n", "cocoEval", ".", "params", ".", "maxDets", "=", "[", "100", "]", "\n", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "ps", "=", "cocoEval", ".", "eval", "[", "'precision'", "]", "\n", "ps", "=", "np", ".", "vstack", "(", "[", "ps", ",", "np", ".", "zeros", "(", "(", "4", ",", "*", "ps", ".", "shape", "[", "1", ":", "]", ")", ")", "]", ")", "\n", "catIds", "=", "cocoGt", ".", "getCatIds", "(", ")", "\n", "recThrs", "=", "cocoEval", ".", "params", ".", "recThrs", "\n", "with", "Pool", "(", "processes", "=", "48", ")", "as", "pool", ":", "\n", "            ", "args", "=", "[", "(", "k", ",", "cocoDt", ",", "cocoGt", ",", "catId", ",", "iou_type", ")", "\n", "for", "k", ",", "catId", "in", "enumerate", "(", "catIds", ")", "]", "\n", "analyze_results", "=", "pool", ".", "starmap", "(", "analyze_individual_category", ",", "args", ")", "\n", "", "for", "k", ",", "catId", "in", "enumerate", "(", "catIds", ")", ":", "\n", "            ", "nm", "=", "cocoGt", ".", "loadCats", "(", "catId", ")", "[", "0", "]", "\n", "print", "(", "'--------------saving {}-{}---------------'", ".", "format", "(", "\n", "k", "+", "1", ",", "nm", "[", "'name'", "]", ")", ")", "\n", "analyze_result", "=", "analyze_results", "[", "k", "]", "\n", "assert", "k", "==", "analyze_result", "[", "0", "]", "\n", "ps_supercategory", "=", "analyze_result", "[", "1", "]", "[", "'ps_supercategory'", "]", "\n", "ps_allcategory", "=", "analyze_result", "[", "1", "]", "[", "'ps_allcategory'", "]", "\n", "# compute precision but ignore superclass confusion", "\n", "ps", "[", "3", ",", ":", ",", "k", ",", ":", ",", ":", "]", "=", "ps_supercategory", "\n", "# compute precision but ignore any class confusion", "\n", "ps", "[", "4", ",", ":", ",", "k", ",", ":", ",", ":", "]", "=", "ps_allcategory", "\n", "# fill in background and false negative errors and plot", "\n", "ps", "[", "ps", "==", "-", "1", "]", "=", "0", "\n", "ps", "[", "5", ",", ":", ",", "k", ",", ":", ",", ":", "]", "=", "(", "ps", "[", "4", ",", ":", ",", "k", ",", ":", ",", ":", "]", ">", "0", ")", "\n", "ps", "[", "6", ",", ":", ",", "k", ",", ":", ",", ":", "]", "=", "1.0", "\n", "makeplot", "(", "recThrs", ",", "ps", "[", ":", ",", ":", ",", "k", "]", ",", "res_out_dir", ",", "nm", "[", "'name'", "]", ",", "iou_type", ")", "\n", "", "makeplot", "(", "recThrs", ",", "ps", ",", "res_out_dir", ",", "'allclass'", ",", "iou_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.coco_error_analysis.main": [[159, 171], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "coco_error_analysis.analyze_results"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.coco_error_analysis.analyze_results"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "'COCO Error Analysis Tool'", ")", "\n", "parser", ".", "add_argument", "(", "'result'", ",", "help", "=", "'result file (json format) path'", ")", "\n", "parser", ".", "add_argument", "(", "'out_dir'", ",", "help", "=", "'dir to save analyze result images'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--ann'", ",", "\n", "default", "=", "'data/coco/annotations/instances_val2017.json'", ",", "\n", "help", "=", "'annotation file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--types'", ",", "type", "=", "str", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "'bbox'", "]", ",", "help", "=", "'result types'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "analyze_results", "(", "args", ".", "result", ",", "args", ".", "ann", ",", "args", ".", "types", ",", "out_dir", "=", "args", ".", "out_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.get_flops.parse_args": [[9, 20], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--shape'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "1280", ",", "800", "]", ",", "\n", "help", "=", "'input image size'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.get_flops.main": [[22, 50], ["get_flops.parse_args", "mmcv.Config.fromfile", "mmdet.models.build_detector().cuda", "build_detector().cuda.eval", "hasattr", "mmdet.utils.get_model_complexity_info", "print", "print", "len", "NotImplementedError", "len", "ValueError", "mmdet.models.build_detector", "tuple"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.get_model_complexity_info", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_detector"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "if", "len", "(", "args", ".", "shape", ")", "==", "1", ":", "\n", "        ", "input_shape", "=", "(", "3", ",", "args", ".", "shape", "[", "0", "]", ",", "args", ".", "shape", "[", "0", "]", ")", "\n", "", "elif", "len", "(", "args", ".", "shape", ")", "==", "2", ":", "\n", "        ", "input_shape", "=", "(", "3", ",", ")", "+", "tuple", "(", "args", ".", "shape", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid input shape'", ")", "\n", "\n", "", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "model", "=", "build_detector", "(", "\n", "cfg", ".", "model", ",", "train_cfg", "=", "cfg", ".", "train_cfg", ",", "test_cfg", "=", "cfg", ".", "test_cfg", ")", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "'forward_dummy'", ")", ":", "\n", "        ", "model", ".", "forward", "=", "model", ".", "forward_dummy", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'FLOPs counter is currently not currently supported with {}'", ".", "\n", "format", "(", "model", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "", "flops", ",", "params", "=", "get_model_complexity_info", "(", "model", ",", "input_shape", ")", "\n", "split_line", "=", "'='", "*", "30", "\n", "print", "(", "'{0}\\nInput shape: {1}\\nFlops: {2}\\nParams: {3}\\n{0}'", ".", "format", "(", "\n", "split_line", ",", "input_shape", ",", "flops", ",", "params", ")", ")", "\n", "print", "(", "'!!!Please be cautious if you use the results in papers. '", "\n", "'You may need to check if all ops are supported and verify that the '", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.analyze_logs.cal_train_time": [[10, 32], ["enumerate", "print", "log_dict.keys", "numpy.array", "np.array.mean", "all_times.mean.argmax", "all_times.mean.argmin", "all_times.mean.std", "print", "print", "print", "print", "print", "np.array.append", "np.array.append", "numpy.mean"], "function", ["None"], ["def", "cal_train_time", "(", "log_dicts", ",", "args", ")", ":", "\n", "    ", "for", "i", ",", "log_dict", "in", "enumerate", "(", "log_dicts", ")", ":", "\n", "        ", "print", "(", "'{}Analyze train time of {}{}'", ".", "format", "(", "'-'", "*", "5", ",", "args", ".", "json_logs", "[", "i", "]", ",", "\n", "'-'", "*", "5", ")", ")", "\n", "all_times", "=", "[", "]", "\n", "for", "epoch", "in", "log_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "args", ".", "include_outliers", ":", "\n", "                ", "all_times", ".", "append", "(", "log_dict", "[", "epoch", "]", "[", "'time'", "]", ")", "\n", "", "else", ":", "\n", "                ", "all_times", ".", "append", "(", "log_dict", "[", "epoch", "]", "[", "'time'", "]", "[", "1", ":", "]", ")", "\n", "", "", "all_times", "=", "np", ".", "array", "(", "all_times", ")", "\n", "epoch_ave_time", "=", "all_times", ".", "mean", "(", "-", "1", ")", "\n", "slowest_epoch", "=", "epoch_ave_time", ".", "argmax", "(", ")", "\n", "fastest_epoch", "=", "epoch_ave_time", ".", "argmin", "(", ")", "\n", "std_over_epoch", "=", "epoch_ave_time", ".", "std", "(", ")", "\n", "print", "(", "'slowest epoch {}, average time is {:.4f}'", ".", "format", "(", "\n", "slowest_epoch", "+", "1", ",", "epoch_ave_time", "[", "slowest_epoch", "]", ")", ")", "\n", "print", "(", "'fastest epoch {}, average time is {:.4f}'", ".", "format", "(", "\n", "fastest_epoch", "+", "1", ",", "epoch_ave_time", "[", "fastest_epoch", "]", ")", ")", "\n", "print", "(", "'time std over epochs is {:.4f}'", ".", "format", "(", "std_over_epoch", ")", ")", "\n", "print", "(", "'average iter time: {:.4f} s/iter'", ".", "format", "(", "np", ".", "mean", "(", "all_times", ")", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.analyze_logs.plot_curve": [[34, 92], ["seaborn.set_style", "len", "enumerate", "matplotlib.switch_backend", "len", "list", "enumerate", "matplotlib.show", "print", "matplotlib.savefig", "matplotlib.cla", "len", "len", "log_dict.keys", "print", "matplotlib.legend", "matplotlib.title", "legend.append", "KeyError", "numpy.arange", "matplotlib.gca", "plt.gca.set_xticks", "matplotlib.xlabel", "matplotlib.plot", "numpy.concatenate", "numpy.concatenate", "matplotlib.xlabel", "matplotlib.plot", "np.concatenate.append", "np.concatenate.append", "max", "numpy.array", "numpy.array", "len"], "function", ["None"], ["", "", "def", "plot_curve", "(", "log_dicts", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "backend", "is", "not", "None", ":", "\n", "        ", "plt", ".", "switch_backend", "(", "args", ".", "backend", ")", "\n", "", "sns", ".", "set_style", "(", "args", ".", "style", ")", "\n", "# if legend is None, use {filename}_{key} as legend", "\n", "legend", "=", "args", ".", "legend", "\n", "if", "legend", "is", "None", ":", "\n", "        ", "legend", "=", "[", "]", "\n", "for", "json_log", "in", "args", ".", "json_logs", ":", "\n", "            ", "for", "metric", "in", "args", ".", "keys", ":", "\n", "                ", "legend", ".", "append", "(", "'{}_{}'", ".", "format", "(", "json_log", ",", "metric", ")", ")", "\n", "", "", "", "assert", "len", "(", "legend", ")", "==", "(", "len", "(", "args", ".", "json_logs", ")", "*", "len", "(", "args", ".", "keys", ")", ")", "\n", "metrics", "=", "args", ".", "keys", "\n", "\n", "num_metrics", "=", "len", "(", "metrics", ")", "\n", "for", "i", ",", "log_dict", "in", "enumerate", "(", "log_dicts", ")", ":", "\n", "        ", "epochs", "=", "list", "(", "log_dict", ".", "keys", "(", ")", ")", "\n", "for", "j", ",", "metric", "in", "enumerate", "(", "metrics", ")", ":", "\n", "            ", "print", "(", "'plot curve of {}, metric is {}'", ".", "format", "(", "\n", "args", ".", "json_logs", "[", "i", "]", ",", "metric", ")", ")", "\n", "if", "metric", "not", "in", "log_dict", "[", "epochs", "[", "0", "]", "]", ":", "\n", "                ", "raise", "KeyError", "(", "'{} does not contain metric {}'", ".", "format", "(", "\n", "args", ".", "json_logs", "[", "i", "]", ",", "metric", ")", ")", "\n", "\n", "", "if", "'mAP'", "in", "metric", ":", "\n", "                ", "xs", "=", "np", ".", "arange", "(", "1", ",", "max", "(", "epochs", ")", "+", "1", ")", "\n", "ys", "=", "[", "]", "\n", "for", "epoch", "in", "epochs", ":", "\n", "                    ", "ys", "+=", "log_dict", "[", "epoch", "]", "[", "metric", "]", "\n", "", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "set_xticks", "(", "xs", ")", "\n", "plt", ".", "xlabel", "(", "'epoch'", ")", "\n", "plt", ".", "plot", "(", "xs", ",", "ys", ",", "label", "=", "legend", "[", "i", "*", "num_metrics", "+", "j", "]", ",", "marker", "=", "'o'", ")", "\n", "", "else", ":", "\n", "                ", "xs", "=", "[", "]", "\n", "ys", "=", "[", "]", "\n", "num_iters_per_epoch", "=", "log_dict", "[", "epochs", "[", "0", "]", "]", "[", "'iter'", "]", "[", "-", "1", "]", "\n", "for", "epoch", "in", "epochs", ":", "\n", "                    ", "iters", "=", "log_dict", "[", "epoch", "]", "[", "'iter'", "]", "\n", "if", "log_dict", "[", "epoch", "]", "[", "'mode'", "]", "[", "-", "1", "]", "==", "'val'", ":", "\n", "                        ", "iters", "=", "iters", "[", ":", "-", "1", "]", "\n", "", "xs", ".", "append", "(", "\n", "np", ".", "array", "(", "iters", ")", "+", "(", "epoch", "-", "1", ")", "*", "num_iters_per_epoch", ")", "\n", "ys", ".", "append", "(", "np", ".", "array", "(", "log_dict", "[", "epoch", "]", "[", "metric", "]", "[", ":", "len", "(", "iters", ")", "]", ")", ")", "\n", "", "xs", "=", "np", ".", "concatenate", "(", "xs", ")", "\n", "ys", "=", "np", ".", "concatenate", "(", "ys", ")", "\n", "plt", ".", "xlabel", "(", "'iter'", ")", "\n", "plt", ".", "plot", "(", "\n", "xs", ",", "ys", ",", "label", "=", "legend", "[", "i", "*", "num_metrics", "+", "j", "]", ",", "linewidth", "=", "0.5", ")", "\n", "", "plt", ".", "legend", "(", ")", "\n", "", "if", "args", ".", "title", "is", "not", "None", ":", "\n", "            ", "plt", ".", "title", "(", "args", ".", "title", ")", "\n", "", "", "if", "args", ".", "out", "is", "None", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'save curve to: {}'", ".", "format", "(", "args", ".", "out", ")", ")", "\n", "plt", ".", "savefig", "(", "args", ".", "out", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.analyze_logs.add_plot_parser": [[94, 120], ["subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument"], "function", ["None"], ["", "", "def", "add_plot_parser", "(", "subparsers", ")", ":", "\n", "    ", "parser_plt", "=", "subparsers", ".", "add_parser", "(", "\n", "'plot_curve'", ",", "help", "=", "'parser for plotting curves'", ")", "\n", "parser_plt", ".", "add_argument", "(", "\n", "'json_logs'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'path of train log in json format'", ")", "\n", "parser_plt", ".", "add_argument", "(", "\n", "'--keys'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "'bbox_mAP'", "]", ",", "\n", "help", "=", "'the metric that you want to plot'", ")", "\n", "parser_plt", ".", "add_argument", "(", "'--title'", ",", "type", "=", "str", ",", "help", "=", "'title of figure'", ")", "\n", "parser_plt", ".", "add_argument", "(", "\n", "'--legend'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'legend of each plot'", ")", "\n", "parser_plt", ".", "add_argument", "(", "\n", "'--backend'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'backend of plt'", ")", "\n", "parser_plt", ".", "add_argument", "(", "\n", "'--style'", ",", "type", "=", "str", ",", "default", "=", "'dark'", ",", "help", "=", "'style of plt'", ")", "\n", "parser_plt", ".", "add_argument", "(", "'--out'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.analyze_logs.add_time_parser": [[122, 135], ["subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument"], "function", ["None"], ["", "def", "add_time_parser", "(", "subparsers", ")", ":", "\n", "    ", "parser_time", "=", "subparsers", ".", "add_parser", "(", "\n", "'cal_train_time'", ",", "\n", "help", "=", "'parser for computing the average time per training iteration'", ")", "\n", "parser_time", ".", "add_argument", "(", "\n", "'json_logs'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'path of train log in json format'", ")", "\n", "parser_time", ".", "add_argument", "(", "\n", "'--include-outliers'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'include the first value of every epoch when computing '", "\n", "'the average time'", ")", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.analyze_logs.parse_args": [[138, 146], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_subparsers", "analyze_logs.add_plot_parser", "analyze_logs.add_time_parser", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.analyze_logs.add_plot_parser", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.analyze_logs.add_time_parser", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Analyze Json Log'", ")", "\n", "# currently only support plot curve and calculate average train time", "\n", "subparsers", "=", "parser", ".", "add_subparsers", "(", "dest", "=", "'task'", ",", "help", "=", "'task parser'", ")", "\n", "add_plot_parser", "(", "subparsers", ")", "\n", "add_time_parser", "(", "subparsers", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.analyze_logs.load_json_logs": [[148, 166], ["zip", "dict", "open", "json.loads", "json.loads.pop", "json.loads.items", "l.strip", "collections.defaultdict", "[].append"], "function", ["None"], ["", "def", "load_json_logs", "(", "json_logs", ")", ":", "\n", "# load and convert json_logs to log_dict, key is epoch, value is a sub dict", "\n", "# keys of sub dict is different metrics, e.g. memory, bbox_mAP", "\n", "# value of sub dict is a list of corresponding values of all iterations", "\n", "    ", "log_dicts", "=", "[", "dict", "(", ")", "for", "_", "in", "json_logs", "]", "\n", "for", "json_log", ",", "log_dict", "in", "zip", "(", "json_logs", ",", "log_dicts", ")", ":", "\n", "        ", "with", "open", "(", "json_log", ",", "'r'", ")", "as", "log_file", ":", "\n", "            ", "for", "l", "in", "log_file", ":", "\n", "                ", "log", "=", "json", ".", "loads", "(", "l", ".", "strip", "(", ")", ")", "\n", "# skip lines without `epoch` field", "\n", "if", "'epoch'", "not", "in", "log", ":", "\n", "                    ", "continue", "\n", "", "epoch", "=", "log", ".", "pop", "(", "'epoch'", ")", "\n", "if", "epoch", "not", "in", "log_dict", ":", "\n", "                    ", "log_dict", "[", "epoch", "]", "=", "defaultdict", "(", "list", ")", "\n", "", "for", "k", ",", "v", "in", "log", ".", "items", "(", ")", ":", "\n", "                    ", "log_dict", "[", "epoch", "]", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "", "", "", "return", "log_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.analyze_logs.main": [[168, 178], ["analyze_logs.parse_args", "analyze_logs.load_json_logs", "json_log.endswith", "eval"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.analyze_logs.load_json_logs"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "json_logs", "=", "args", ".", "json_logs", "\n", "for", "json_log", "in", "json_logs", ":", "\n", "        ", "assert", "json_log", ".", "endswith", "(", "'.json'", ")", "\n", "\n", "", "log_dicts", "=", "load_json_logs", "(", "json_logs", ")", "\n", "\n", "eval", "(", "args", ".", "task", ")", "(", "log_dicts", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.robustness_eval.print_coco_results": [[8, 33], ["numpy.zeros", "robustness_eval.print_coco_results._print"], "function", ["None"], ["def", "print_coco_results", "(", "results", ")", ":", "\n", "\n", "    ", "def", "_print", "(", "result", ",", "ap", "=", "1", ",", "iouThr", "=", "None", ",", "areaRng", "=", "'all'", ",", "maxDets", "=", "100", ")", ":", "\n", "        ", "iStr", "=", "' {:<18} {} @[ IoU={:<9} | \\\n        area={:>6s} | maxDets={:>3d} ] = {:0.3f}'", "\n", "\n", "titleStr", "=", "'Average Precision'", "if", "ap", "==", "1", "else", "'Average Recall'", "\n", "typeStr", "=", "'(AP)'", "if", "ap", "==", "1", "else", "'(AR)'", "\n", "iouStr", "=", "'{:0.2f}:{:0.2f}'", ".", "format", "(", ".5", ",", ".95", ")", "if", "iouThr", "is", "None", "else", "'{:0.2f}'", ".", "format", "(", "iouThr", ")", "\n", "print", "(", "iStr", ".", "format", "(", "titleStr", ",", "typeStr", ",", "iouStr", ",", "areaRng", ",", "maxDets", ",", "result", ")", ")", "\n", "\n", "", "stats", "=", "np", ".", "zeros", "(", "(", "12", ",", ")", ")", "\n", "stats", "[", "0", "]", "=", "_print", "(", "results", "[", "0", "]", ",", "1", ")", "\n", "stats", "[", "1", "]", "=", "_print", "(", "results", "[", "1", "]", ",", "1", ",", "iouThr", "=", ".5", ")", "\n", "stats", "[", "2", "]", "=", "_print", "(", "results", "[", "2", "]", ",", "1", ",", "iouThr", "=", ".75", ")", "\n", "stats", "[", "3", "]", "=", "_print", "(", "results", "[", "3", "]", ",", "1", ",", "areaRng", "=", "'small'", ")", "\n", "stats", "[", "4", "]", "=", "_print", "(", "results", "[", "4", "]", ",", "1", ",", "areaRng", "=", "'medium'", ")", "\n", "stats", "[", "5", "]", "=", "_print", "(", "results", "[", "5", "]", ",", "1", ",", "areaRng", "=", "'large'", ")", "\n", "stats", "[", "6", "]", "=", "_print", "(", "results", "[", "6", "]", ",", "0", ",", "maxDets", "=", "1", ")", "\n", "stats", "[", "7", "]", "=", "_print", "(", "results", "[", "7", "]", ",", "0", ",", "maxDets", "=", "10", ")", "\n", "stats", "[", "8", "]", "=", "_print", "(", "results", "[", "8", "]", ",", "0", ")", "\n", "stats", "[", "9", "]", "=", "_print", "(", "results", "[", "9", "]", ",", "0", ",", "areaRng", "=", "'small'", ")", "\n", "stats", "[", "10", "]", "=", "_print", "(", "results", "[", "10", "]", ",", "0", ",", "areaRng", "=", "'medium'", ")", "\n", "stats", "[", "11", "]", "=", "_print", "(", "results", "[", "11", "]", ",", "0", ",", "areaRng", "=", "'large'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.robustness_eval.get_coco_style_results": [[35, 113], ["mmcv.load", "len", "numpy.zeros", "enumerate", "print", "isinstance", "isinstance", "list", "numpy.mean", "numpy.mean", "mmcv.load.keys", "len", "enumerate", "os.basename", "print", "robustness_eval.print_coco_results", "print", "robustness_eval.print_coco_results", "print", "robustness_eval.print_coco_results", "print", "enumerate", "print", "enumerate", "print", "enumerate", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.robustness_eval.print_coco_results", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.robustness_eval.print_coco_results", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.robustness_eval.print_coco_results"], ["", "def", "get_coco_style_results", "(", "filename", ",", "\n", "task", "=", "'bbox'", ",", "\n", "metric", "=", "None", ",", "\n", "prints", "=", "'mPC'", ",", "\n", "aggregate", "=", "'benchmark'", ")", ":", "\n", "\n", "    ", "assert", "aggregate", "in", "[", "'benchmark'", ",", "'all'", "]", "\n", "\n", "if", "prints", "==", "'all'", ":", "\n", "        ", "prints", "=", "[", "'P'", ",", "'mPC'", ",", "'rPC'", "]", "\n", "", "elif", "isinstance", "(", "prints", ",", "str", ")", ":", "\n", "        ", "prints", "=", "[", "prints", "]", "\n", "", "for", "p", "in", "prints", ":", "\n", "        ", "assert", "p", "in", "[", "'P'", ",", "'mPC'", ",", "'rPC'", "]", "\n", "\n", "", "if", "metric", "is", "None", ":", "\n", "        ", "metrics", "=", "[", "\n", "'AP'", ",", "'AP50'", ",", "'AP75'", ",", "'APs'", ",", "'APm'", ",", "'APl'", ",", "'AR1'", ",", "'AR10'", ",", "'AR100'", ",", "\n", "'ARs'", ",", "'ARm'", ",", "'ARl'", "\n", "]", "\n", "", "elif", "isinstance", "(", "metric", ",", "list", ")", ":", "\n", "        ", "metrics", "=", "metric", "\n", "", "else", ":", "\n", "        ", "metrics", "=", "[", "metric", "]", "\n", "\n", "", "for", "metric_name", "in", "metrics", ":", "\n", "        ", "assert", "metric_name", "in", "[", "\n", "'AP'", ",", "'AP50'", ",", "'AP75'", ",", "'APs'", ",", "'APm'", ",", "'APl'", ",", "'AR1'", ",", "'AR10'", ",", "'AR100'", ",", "\n", "'ARs'", ",", "'ARm'", ",", "'ARl'", "\n", "]", "\n", "\n", "", "eval_output", "=", "mmcv", ".", "load", "(", "filename", ")", "\n", "\n", "num_distortions", "=", "len", "(", "list", "(", "eval_output", ".", "keys", "(", ")", ")", ")", "\n", "results", "=", "np", ".", "zeros", "(", "(", "num_distortions", ",", "6", ",", "len", "(", "metrics", ")", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "for", "corr_i", ",", "distortion", "in", "enumerate", "(", "eval_output", ")", ":", "\n", "        ", "for", "severity", "in", "eval_output", "[", "distortion", "]", ":", "\n", "            ", "for", "metric_j", ",", "metric_name", "in", "enumerate", "(", "metrics", ")", ":", "\n", "                ", "mAP", "=", "eval_output", "[", "distortion", "]", "[", "severity", "]", "[", "task", "]", "[", "metric_name", "]", "\n", "results", "[", "corr_i", ",", "severity", ",", "metric_j", "]", "=", "mAP", "\n", "\n", "", "", "", "P", "=", "results", "[", "0", ",", "0", ",", ":", "]", "\n", "if", "aggregate", "==", "'benchmark'", ":", "\n", "        ", "mPC", "=", "np", ".", "mean", "(", "results", "[", ":", "15", ",", "1", ":", ",", ":", "]", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "mPC", "=", "np", ".", "mean", "(", "results", "[", ":", ",", "1", ":", ",", ":", "]", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "", "rPC", "=", "mPC", "/", "P", "\n", "\n", "print", "(", "'\\nmodel: {}'", ".", "format", "(", "osp", ".", "basename", "(", "filename", ")", ")", ")", "\n", "if", "metric", "is", "None", ":", "\n", "        ", "if", "'P'", "in", "prints", ":", "\n", "            ", "print", "(", "'Performance on Clean Data [P] ({})'", ".", "format", "(", "task", ")", ")", "\n", "print_coco_results", "(", "P", ")", "\n", "", "if", "'mPC'", "in", "prints", ":", "\n", "            ", "print", "(", "'Mean Performance under Corruption [mPC] ({})'", ".", "format", "(", "task", ")", ")", "\n", "print_coco_results", "(", "mPC", ")", "\n", "", "if", "'rPC'", "in", "prints", ":", "\n", "            ", "print", "(", "'Realtive Performance under Corruption [rPC] ({})'", ".", "format", "(", "\n", "task", ")", ")", "\n", "print_coco_results", "(", "rPC", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "'P'", "in", "prints", ":", "\n", "            ", "print", "(", "'Performance on Clean Data [P] ({})'", ".", "format", "(", "task", ")", ")", "\n", "for", "metric_i", ",", "metric_name", "in", "enumerate", "(", "metrics", ")", ":", "\n", "                ", "print", "(", "'{:5} =  {:0.3f}'", ".", "format", "(", "metric_name", ",", "P", "[", "metric_i", "]", ")", ")", "\n", "", "", "if", "'mPC'", "in", "prints", ":", "\n", "            ", "print", "(", "'Mean Performance under Corruption [mPC] ({})'", ".", "format", "(", "task", ")", ")", "\n", "for", "metric_i", ",", "metric_name", "in", "enumerate", "(", "metrics", ")", ":", "\n", "                ", "print", "(", "'{:5} =  {:0.3f}'", ".", "format", "(", "metric_name", ",", "mPC", "[", "metric_i", "]", ")", ")", "\n", "", "", "if", "'rPC'", "in", "prints", ":", "\n", "            ", "print", "(", "'Relative Performance under Corruption [rPC] ({})'", ".", "format", "(", "\n", "task", ")", ")", "\n", "for", "metric_i", ",", "metric_name", "in", "enumerate", "(", "metrics", ")", ":", "\n", "                ", "print", "(", "'{:5} => {:0.1f} %'", ".", "format", "(", "metric_name", ",", "\n", "rPC", "[", "metric_i", "]", "*", "100", ")", ")", "\n", "\n", "", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.robustness_eval.get_voc_style_results": [[115, 159], ["mmcv.load", "len", "numpy.zeros", "enumerate", "print", "numpy.mean", "isinstance", "list", "numpy.mean", "numpy.mean", "print", "print", "print", "mmcv.load.keys", "os.basename", "numpy.mean", "numpy.mean", "range", "numpy.mean", "len"], "function", ["None"], ["", "def", "get_voc_style_results", "(", "filename", ",", "prints", "=", "'mPC'", ",", "aggregate", "=", "'benchmark'", ")", ":", "\n", "\n", "    ", "assert", "aggregate", "in", "[", "'benchmark'", ",", "'all'", "]", "\n", "\n", "if", "prints", "==", "'all'", ":", "\n", "        ", "prints", "=", "[", "'P'", ",", "'mPC'", ",", "'rPC'", "]", "\n", "", "elif", "isinstance", "(", "prints", ",", "str", ")", ":", "\n", "        ", "prints", "=", "[", "prints", "]", "\n", "", "for", "p", "in", "prints", ":", "\n", "        ", "assert", "p", "in", "[", "'P'", ",", "'mPC'", ",", "'rPC'", "]", "\n", "\n", "", "eval_output", "=", "mmcv", ".", "load", "(", "filename", ")", "\n", "\n", "num_distortions", "=", "len", "(", "list", "(", "eval_output", ".", "keys", "(", ")", ")", ")", "\n", "results", "=", "np", ".", "zeros", "(", "(", "num_distortions", ",", "6", ",", "20", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "for", "i", ",", "distortion", "in", "enumerate", "(", "eval_output", ")", ":", "\n", "        ", "for", "severity", "in", "eval_output", "[", "distortion", "]", ":", "\n", "            ", "mAP", "=", "[", "\n", "eval_output", "[", "distortion", "]", "[", "severity", "]", "[", "j", "]", "[", "'ap'", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "eval_output", "[", "distortion", "]", "[", "severity", "]", ")", ")", "\n", "]", "\n", "results", "[", "i", ",", "severity", ",", ":", "]", "=", "mAP", "\n", "\n", "", "", "P", "=", "results", "[", "0", ",", "0", ",", ":", "]", "\n", "if", "aggregate", "==", "'benchmark'", ":", "\n", "        ", "mPC", "=", "np", ".", "mean", "(", "results", "[", ":", "15", ",", "1", ":", ",", ":", "]", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "mPC", "=", "np", ".", "mean", "(", "results", "[", ":", ",", "1", ":", ",", ":", "]", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "", "rPC", "=", "mPC", "/", "P", "\n", "\n", "print", "(", "'\\nmodel: {}'", ".", "format", "(", "osp", ".", "basename", "(", "filename", ")", ")", ")", "\n", "if", "'P'", "in", "prints", ":", "\n", "        ", "print", "(", "'{:48} = {:0.3f}'", ".", "format", "(", "'Performance on Clean Data [P] in AP50'", ",", "\n", "np", ".", "mean", "(", "P", ")", ")", ")", "\n", "", "if", "'mPC'", "in", "prints", ":", "\n", "        ", "print", "(", "'{:48} = {:0.3f}'", ".", "format", "(", "\n", "'Mean Performance under Corruption [mPC] in AP50'", ",", "np", ".", "mean", "(", "mPC", ")", ")", ")", "\n", "", "if", "'rPC'", "in", "prints", ":", "\n", "        ", "print", "(", "'{:48} = {:0.1f}'", ".", "format", "(", "\n", "'Realtive Performance under Corruption [rPC] in %'", ",", "\n", "np", ".", "mean", "(", "rPC", ")", "*", "100", ")", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "results", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.robustness_eval.get_results": [[161, 187], ["robustness_eval.get_coco_style_results", "robustness_eval.get_voc_style_results", "print", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.robustness_eval.get_coco_style_results", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.robustness_eval.get_voc_style_results"], ["", "def", "get_results", "(", "filename", ",", "\n", "dataset", "=", "'coco'", ",", "\n", "task", "=", "'bbox'", ",", "\n", "metric", "=", "None", ",", "\n", "prints", "=", "'mPC'", ",", "\n", "aggregate", "=", "'benchmark'", ")", ":", "\n", "    ", "assert", "dataset", "in", "[", "'coco'", ",", "'voc'", ",", "'cityscapes'", "]", "\n", "\n", "if", "dataset", "in", "[", "'coco'", ",", "'cityscapes'", "]", ":", "\n", "        ", "results", "=", "get_coco_style_results", "(", "\n", "filename", ",", "\n", "task", "=", "task", ",", "\n", "metric", "=", "metric", ",", "\n", "prints", "=", "prints", ",", "\n", "aggregate", "=", "aggregate", ")", "\n", "", "elif", "dataset", "==", "'voc'", ":", "\n", "        ", "if", "task", "!=", "'bbox'", ":", "\n", "            ", "print", "(", "'Only bbox analysis is supported for Pascal VOC'", ")", "\n", "print", "(", "'Will report bbox results\\n'", ")", "\n", "", "if", "metric", "not", "in", "[", "None", ",", "[", "'AP'", "]", ",", "[", "'AP50'", "]", "]", ":", "\n", "            ", "print", "(", "'Only the AP50 metric is supported for Pascal VOC'", ")", "\n", "print", "(", "'Will report AP50 metric\\n'", ")", "\n", "", "results", "=", "get_voc_style_results", "(", "\n", "filename", ",", "prints", "=", "prints", ",", "aggregate", "=", "aggregate", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.robustness_eval.get_distortions_from_file": [[189, 194], ["mmcv.load", "robustness_eval.get_distortions_from_results"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.robustness_eval.get_distortions_from_results"], ["", "def", "get_distortions_from_file", "(", "filename", ")", ":", "\n", "\n", "    ", "eval_output", "=", "mmcv", ".", "load", "(", "filename", ")", "\n", "\n", "return", "get_distortions_from_results", "(", "eval_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.robustness_eval.get_distortions_from_results": [[196, 201], ["enumerate", "distortions.append", "distortion.replace"], "function", ["None"], ["", "def", "get_distortions_from_results", "(", "eval_output", ")", ":", "\n", "    ", "distortions", "=", "[", "]", "\n", "for", "i", ",", "distortion", "in", "enumerate", "(", "eval_output", ")", ":", "\n", "        ", "distortions", ".", "append", "(", "distortion", ".", "replace", "(", "'_'", ",", "' '", ")", ")", "\n", "", "return", "distortions", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.robustness_eval.main": [[203, 253], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "robustness_eval.get_results"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.robustness_eval.get_results"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "'Corruption Result Analysis'", ")", "\n", "parser", ".", "add_argument", "(", "'filename'", ",", "help", "=", "'result file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "'coco'", ",", "'voc'", ",", "'cityscapes'", "]", ",", "\n", "default", "=", "'coco'", ",", "\n", "help", "=", "'dataset type'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--task'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'bbox'", ",", "'segm'", "]", ",", "\n", "default", "=", "[", "'bbox'", "]", ",", "\n", "help", "=", "'task to report'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--metric'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "\n", "None", ",", "'AP'", ",", "'AP50'", ",", "'AP75'", ",", "'APs'", ",", "'APm'", ",", "'APl'", ",", "'AR1'", ",", "'AR10'", ",", "\n", "'AR100'", ",", "'ARs'", ",", "'ARm'", ",", "'ARl'", "\n", "]", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'metric to report'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--prints'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'P'", ",", "'mPC'", ",", "'rPC'", "]", ",", "\n", "default", "=", "'mPC'", ",", "\n", "help", "=", "'corruption benchmark metric to print'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--aggregate'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "'all'", ",", "'benchmark'", "]", ",", "\n", "default", "=", "'benchmark'", ",", "\n", "help", "=", "'aggregate all results or only those \\\n        for benchmark corruptions'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "for", "task", "in", "args", ".", "task", ":", "\n", "        ", "get_results", "(", "\n", "args", ".", "filename", ",", "\n", "dataset", "=", "args", ".", "dataset", ",", "\n", "task", "=", "task", ",", "\n", "metric", "=", "args", ".", "metric", ",", "\n", "prints", "=", "args", ".", "prints", ",", "\n", "aggregate", "=", "args", ".", "aggregate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.train.parse_args": [[20, 56], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args"], ["\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "if", "deterministic", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "\n", "", "", "def", "parse_losses", "(", "losses", ")", ":", "\n", "    ", "log_vars", "=", "OrderedDict", "(", ")", "\n", "for", "loss_name", ",", "loss_value", "in", "losses", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "loss_value", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "log_vars", "[", "loss_name", "]", "=", "loss_value", ".", "mean", "(", ")", "\n", "", "elif", "isinstance", "(", "loss_value", ",", "list", ")", ":", "\n", "            ", "log_vars", "[", "loss_name", "]", "=", "sum", "(", "_loss", ".", "mean", "(", ")", "for", "_loss", "in", "loss_value", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'{} is not a tensor or list of tensors'", ".", "format", "(", "loss_name", ")", ")", "\n", "\n", "", "", "loss", "=", "sum", "(", "_value", "for", "_key", ",", "_value", "in", "log_vars", ".", "items", "(", ")", "if", "'loss'", "in", "_key", ")", "\n", "\n", "log_vars", "[", "'loss'", "]", "=", "loss", "\n", "for", "loss_name", ",", "loss_value", "in", "log_vars", ".", "items", "(", ")", ":", "\n", "# reduce loss when distributed training", "\n", "        ", "if", "dist", ".", "is_available", "(", ")", "and", "dist", ".", "is_initialized", "(", ")", ":", "\n", "            ", "loss_value", "=", "loss_value", ".", "data", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "loss_value", ".", "div_", "(", "dist", ".", "get_world_size", "(", ")", ")", ")", "\n", "", "log_vars", "[", "loss_name", "]", "=", "loss_value", ".", "item", "(", ")", "\n", "\n", "", "return", "loss", ",", "log_vars", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.train.main": [[58, 139], ["train.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "mmcv.mkdir_or_exist", "time.strftime", "os.join", "mmdet.utils.get_root_logger", "dict", "mmdet.utils.collect_env", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "mmdet.models.build_detector", "mmdet.apis.train_detector", "mmcv.runner.init_dist", "os.abspath", "time.localtime", "mmdet.utils.get_root_logger.info", "mmdet.apis.set_random_seed", "mmdet.datasets.build_dataset", "len", "copy.deepcopy", "datasets.append", "dict", "mmdet.datasets.build_dataset", "mmdet.utils.collect_env.items"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.collect_env.collect_env", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.info", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.info", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.info", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_detector", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.train.train_detector", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.info", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.train.set_random_seed", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.builder.build_dataset"], ["\n", "", "def", "batch_processor", "(", "model", ",", "data", ",", "train_mode", ")", ":", "\n", "    ", "\"\"\"Process a data batch.\n\n    This method is required as an argument of Runner, which defines how to\n    process a data batch and obtain proper outputs. The first 3 arguments of\n    batch_processor are fixed.\n\n    Args:\n        model (nn.Module): A PyTorch model.\n        data (dict): The data batch in a dict.\n        train_mode (bool): Training mode or not. It may be useless for some\n            models.\n\n    Returns:\n        dict: A dict containing losses and log vars.\n    \"\"\"", "\n", "losses", "=", "model", "(", "**", "data", ")", "\n", "loss", ",", "log_vars", "=", "parse_losses", "(", "losses", ")", "\n", "\n", "outputs", "=", "dict", "(", "\n", "loss", "=", "loss", ",", "log_vars", "=", "log_vars", ",", "num_samples", "=", "len", "(", "data", "[", "'img'", "]", ".", "data", ")", ")", "\n", "\n", "return", "outputs", "\n", "\n", "\n", "", "def", "train_detector", "(", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "distributed", "=", "False", ",", "\n", "validate", "=", "False", ",", "\n", "timestamp", "=", "None", ",", "\n", "meta", "=", "None", ")", ":", "\n", "    ", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "\n", "# start training", "\n", "if", "distributed", ":", "\n", "        ", "_dist_train", "(", "\n", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "validate", "=", "validate", ",", "\n", "logger", "=", "logger", ",", "\n", "timestamp", "=", "timestamp", ",", "\n", "meta", "=", "meta", ")", "\n", "", "else", ":", "\n", "        ", "_non_dist_train", "(", "\n", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "validate", "=", "validate", ",", "\n", "logger", "=", "logger", ",", "\n", "timestamp", "=", "timestamp", ",", "\n", "meta", "=", "meta", ")", "\n", "\n", "\n", "", "", "def", "_dist_train", "(", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "validate", "=", "False", ",", "\n", "logger", "=", "None", ",", "\n", "timestamp", "=", "None", ",", "\n", "meta", "=", "None", ")", ":", "\n", "# prepare data loaders", "\n", "    ", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "\n", "ds", ",", "\n", "cfg", ".", "data", ".", "imgs_per_gpu", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "True", ",", "\n", "seed", "=", "cfg", ".", "seed", ")", "for", "ds", "in", "dataset", "\n", "]", "\n", "# put model on gpus", "\n", "find_unused_parameters", "=", "cfg", ".", "get", "(", "'find_unused_parameters'", ",", "False", ")", "\n", "# Sets the `find_unused_parameters` parameter in", "\n", "# torch.nn.parallel.DistributedDataParallel", "\n", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "find_unused_parameters", "=", "find_unused_parameters", ")", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.detectron2pytorch.convert_bn": [[10, 21], ["torch.from_numpy", "torch.from_numpy", "state_dict[].size", "torch.zeros", "torch.ones", "converted_names.add", "converted_names.add"], "function", ["None"], ["def", "convert_bn", "(", "blobs", ",", "state_dict", ",", "caffe_name", ",", "torch_name", ",", "converted_names", ")", ":", "\n", "# detectron replace bn with affine channel layer", "\n", "    ", "state_dict", "[", "torch_name", "+", "'.bias'", "]", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "caffe_name", "+", "\n", "'_b'", "]", ")", "\n", "state_dict", "[", "torch_name", "+", "'.weight'", "]", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "caffe_name", "+", "\n", "'_s'", "]", ")", "\n", "bn_size", "=", "state_dict", "[", "torch_name", "+", "'.weight'", "]", ".", "size", "(", ")", "\n", "state_dict", "[", "torch_name", "+", "'.running_mean'", "]", "=", "torch", ".", "zeros", "(", "bn_size", ")", "\n", "state_dict", "[", "torch_name", "+", "'.running_var'", "]", "=", "torch", ".", "ones", "(", "bn_size", ")", "\n", "converted_names", ".", "add", "(", "caffe_name", "+", "'_b'", ")", "\n", "converted_names", ".", "add", "(", "caffe_name", "+", "'_s'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.detectron2pytorch.convert_conv_fc": [[23, 32], ["torch.from_numpy", "converted_names.add", "torch.from_numpy", "converted_names.add"], "function", ["None"], ["", "def", "convert_conv_fc", "(", "blobs", ",", "state_dict", ",", "caffe_name", ",", "torch_name", ",", "\n", "converted_names", ")", ":", "\n", "    ", "state_dict", "[", "torch_name", "+", "'.weight'", "]", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "caffe_name", "+", "\n", "'_w'", "]", ")", "\n", "converted_names", ".", "add", "(", "caffe_name", "+", "'_w'", ")", "\n", "if", "caffe_name", "+", "'_b'", "in", "blobs", ":", "\n", "        ", "state_dict", "[", "torch_name", "+", "'.bias'", "]", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "caffe_name", "+", "\n", "'_b'", "]", ")", "\n", "converted_names", ".", "add", "(", "caffe_name", "+", "'_b'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.detectron2pytorch.convert": [[34, 76], ["mmcv.load", "collections.OrderedDict", "set", "detectron2pytorch.convert_conv_fc", "detectron2pytorch.convert_bn", "range", "dict", "torch.save", "ValueError", "range", "len", "enumerate", "print", "detectron2pytorch.convert_conv_fc", "detectron2pytorch.convert_bn", "detectron2pytorch.convert_conv_fc", "detectron2pytorch.convert_bn"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.detectron2pytorch.convert_conv_fc", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.detectron2pytorch.convert_bn", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.detectron2pytorch.convert_conv_fc", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.detectron2pytorch.convert_bn", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.detectron2pytorch.convert_conv_fc", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.detectron2pytorch.convert_bn"], ["", "", "def", "convert", "(", "src", ",", "dst", ",", "depth", ")", ":", "\n", "    ", "\"\"\"Convert keys in detectron pretrained ResNet models to pytorch style.\"\"\"", "\n", "# load arch_settings", "\n", "if", "depth", "not", "in", "arch_settings", ":", "\n", "        ", "raise", "ValueError", "(", "'Only support ResNet-50 and ResNet-101 currently'", ")", "\n", "", "block_nums", "=", "arch_settings", "[", "depth", "]", "\n", "# load caffe model", "\n", "caffe_model", "=", "mmcv", ".", "load", "(", "src", ",", "encoding", "=", "'latin1'", ")", "\n", "blobs", "=", "caffe_model", "[", "'blobs'", "]", "if", "'blobs'", "in", "caffe_model", "else", "caffe_model", "\n", "# convert to pytorch style", "\n", "state_dict", "=", "OrderedDict", "(", ")", "\n", "converted_names", "=", "set", "(", ")", "\n", "convert_conv_fc", "(", "blobs", ",", "state_dict", ",", "'conv1'", ",", "'conv1'", ",", "converted_names", ")", "\n", "convert_bn", "(", "blobs", ",", "state_dict", ",", "'res_conv1_bn'", ",", "'bn1'", ",", "converted_names", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "block_nums", ")", "+", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "block_nums", "[", "i", "-", "1", "]", ")", ":", "\n", "            ", "if", "j", "==", "0", ":", "\n", "                ", "convert_conv_fc", "(", "blobs", ",", "state_dict", ",", "\n", "'res{}_{}_branch1'", ".", "format", "(", "i", "+", "1", ",", "j", ")", ",", "\n", "'layer{}.{}.downsample.0'", ".", "format", "(", "i", ",", "j", ")", ",", "\n", "converted_names", ")", "\n", "convert_bn", "(", "blobs", ",", "state_dict", ",", "\n", "'res{}_{}_branch1_bn'", ".", "format", "(", "i", "+", "1", ",", "j", ")", ",", "\n", "'layer{}.{}.downsample.1'", ".", "format", "(", "i", ",", "j", ")", ",", "\n", "converted_names", ")", "\n", "", "for", "k", ",", "letter", "in", "enumerate", "(", "[", "'a'", ",", "'b'", ",", "'c'", "]", ")", ":", "\n", "                ", "convert_conv_fc", "(", "blobs", ",", "state_dict", ",", "\n", "'res{}_{}_branch2{}'", ".", "format", "(", "i", "+", "1", ",", "j", ",", "letter", ")", ",", "\n", "'layer{}.{}.conv{}'", ".", "format", "(", "i", ",", "j", ",", "k", "+", "1", ")", ",", "\n", "converted_names", ")", "\n", "convert_bn", "(", "blobs", ",", "state_dict", ",", "\n", "'res{}_{}_branch2{}_bn'", ".", "format", "(", "i", "+", "1", ",", "j", ",", "letter", ")", ",", "\n", "'layer{}.{}.bn{}'", ".", "format", "(", "i", ",", "j", ",", "\n", "k", "+", "1", ")", ",", "converted_names", ")", "\n", "# check if all layers are converted", "\n", "", "", "", "for", "key", "in", "blobs", ":", "\n", "        ", "if", "key", "not", "in", "converted_names", ":", "\n", "            ", "print", "(", "'Not Convert: {}'", ".", "format", "(", "key", ")", ")", "\n", "# save checkpoint", "\n", "", "", "checkpoint", "=", "dict", "(", ")", "\n", "checkpoint", "[", "'state_dict'", "]", "=", "state_dict", "\n", "torch", ".", "save", "(", "checkpoint", ",", "dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.detectron2pytorch.main": [[78, 85], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "detectron2pytorch.convert"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.upgrade_model_version.convert"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Convert model keys'", ")", "\n", "parser", ".", "add_argument", "(", "'src'", ",", "help", "=", "'src detectron model path'", ")", "\n", "parser", ".", "add_argument", "(", "'dst'", ",", "help", "=", "'save path'", ")", "\n", "parser", ".", "add_argument", "(", "'depth'", ",", "type", "=", "int", ",", "help", "=", "'ResNet model depth'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "convert", "(", "args", ".", "src", ",", "args", ".", "dst", ",", "args", ".", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test.MultipleKVAction._parse_int_float_bool": [[23, 35], ["int", "float", "val.lower", "val.lower"], "methods", ["None"], ["            ", "model", ".", "module", ".", "show_result", "(", "data", ",", "result", ")", "\n", "\n", "", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "", "", "return", "results", "\n", "\n", "\n", "", "def", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "tmpdir", "=", "None", ",", "gpu_collect", "=", "False", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test.MultipleKVAction.__call__": [[36, 45], ["setattr", "kv.split", "test.MultipleKVAction._parse_int_float_bool", "len", "val.split"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test.MultipleKVAction._parse_int_float_bool"], []], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test.parse_args": [[47, 91], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args"], ["\n", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", "*", "world_size", ")", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "# collect results from all ranks", "\n", "", "", "", "if", "gpu_collect", ":", "\n", "        ", "results", "=", "collect_results_gpu", "(", "results", ",", "len", "(", "dataset", ")", ")", "\n", "", "else", ":", "\n", "        ", "results", "=", "collect_results_cpu", "(", "results", ",", "len", "(", "dataset", ")", ",", "tmpdir", ")", "\n", "", "return", "results", "\n", "\n", "\n", "", "def", "collect_results_cpu", "(", "result_part", ",", "size", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# create a tmp dir if it is not specified", "\n", "if", "tmpdir", "is", "None", ":", "\n", "        ", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "\n", "32", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "'cuda'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "tmpdir", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "dir_tensor", "[", ":", "len", "(", "tmpdir", ")", "]", "=", "tmpdir", "\n", "", "dist", ".", "broadcast", "(", "dir_tensor", ",", "0", ")", "\n", "tmpdir", "=", "dir_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test.main": [[93, 167], ["test.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmdet.models.build_detector", "mmcv.Config.fromfile.get", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "ValueError", "ValueError", "mmcv.runner.init_dist", "mmdet.core.wrap_fp16_model", "tools.fuse_conv_bn.fuse_module", "mmcv.parallel.MMDataParallel", "mmdet.apis.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "mmdet.apis.multi_gpu_test", "parse_args.out.endswith", "mmcv.parallel.MMDistributedDataParallel.cuda", "print", "mmcv.dump", "mmdet.datasets.build_dataset.format_results", "mmdet.datasets.build_dataset.evaluate", "torch.cuda.current_device"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_detector", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.hooks.wrap_fp16_model", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.fuse_conv_bn.fuse_module", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test_robustness.single_gpu_test", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test_robustness.multi_gpu_test", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.cityscapes.CityscapesDataset.format_results", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.eval_hooks.EvalHook.evaluate"], ["# dump the part result to the dir", "\n", "", "mmcv", ".", "dump", "(", "result_part", ",", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "rank", ")", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "# collect all parts", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "# load results of all parts from tmp dir", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "part_file", "=", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "part_list", ".", "append", "(", "mmcv", ".", "load", "(", "part_file", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "# remove tmp dir", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "return", "ordered_results", "\n", "\n", "\n", "", "", "def", "collect_results_gpu", "(", "result_part", ",", "size", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# dump result part to tensor with pickle", "\n", "part_tensor", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "pickle", ".", "dumps", "(", "result_part", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "# gather all result part tensor shape", "\n", "shape_tensor", "=", "torch", ".", "tensor", "(", "part_tensor", ".", "shape", ",", "device", "=", "'cuda'", ")", "\n", "shape_list", "=", "[", "shape_tensor", ".", "clone", "(", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "shape_list", ",", "shape_tensor", ")", "\n", "# padding result part tensor to max length", "\n", "shape_max", "=", "torch", ".", "tensor", "(", "shape_list", ")", ".", "max", "(", ")", "\n", "part_send", "=", "torch", ".", "zeros", "(", "shape_max", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "part_send", "[", ":", "shape_tensor", "[", "0", "]", "]", "=", "part_tensor", "\n", "part_recv_list", "=", "[", "\n", "part_tensor", ".", "new_zeros", "(", "shape_max", ")", "for", "_", "in", "range", "(", "world_size", ")", "\n", "]", "\n", "# gather all result part", "\n", "dist", ".", "all_gather", "(", "part_recv_list", ",", "part_send", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "recv", ",", "shape", "in", "zip", "(", "part_recv_list", ",", "shape_list", ")", ":", "\n", "            ", "part_list", ".", "append", "(", "\n", "pickle", ".", "loads", "(", "recv", "[", ":", "shape", "[", "0", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "return", "ordered_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.browse_dataset.parse_args": [[11, 33], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Browse a dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--skip-type'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "'DefaultFormatBundle'", ",", "'Normalize'", ",", "'Collect'", "]", ",", "\n", "help", "=", "'skip some useless pipeline'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output-dir'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'If there is no display interface, you can save it'", ")", "\n", "parser", ".", "add_argument", "(", "'--not-show'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-interval'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "999", ",", "\n", "help", "=", "'the interval of show (ms)'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.browse_dataset.retrieve_data_cfg": [[35, 43], ["mmcv.Config.fromfile"], "function", ["None"], ["", "def", "retrieve_data_cfg", "(", "config_path", ",", "skip_type", ")", ":", "\n", "    ", "cfg", "=", "Config", ".", "fromfile", "(", "config_path", ")", "\n", "train_data_cfg", "=", "cfg", ".", "data", ".", "train", "\n", "train_data_cfg", "[", "'pipeline'", "]", "=", "[", "\n", "x", "for", "x", "in", "train_data_cfg", ".", "pipeline", "if", "x", "[", "'type'", "]", "not", "in", "skip_type", "\n", "]", "\n", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.browse_dataset.main": [[45, 65], ["browse_dataset.parse_args", "browse_dataset.retrieve_data_cfg", "mmdet.datasets.builder.build_dataset", "mmcv.ProgressBar", "len", "mmcv.imshow_det_bboxes", "mmcv.ProgressBar.update", "os.path.join", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.browse_dataset.retrieve_data_cfg", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.builder.build_dataset"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "cfg", "=", "retrieve_data_cfg", "(", "args", ".", "config", ",", "args", ".", "skip_type", ")", "\n", "\n", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "\n", "\n", "progress_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "for", "item", "in", "dataset", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\n", "Path", "(", "item", "[", "'filename'", "]", ")", ".", "name", "\n", ")", "if", "args", ".", "output_dir", "is", "not", "None", "else", "None", "\n", "mmcv", ".", "imshow_det_bboxes", "(", "\n", "item", "[", "'img'", "]", ",", "\n", "item", "[", "'gt_bboxes'", "]", ",", "\n", "item", "[", "'gt_labels'", "]", "-", "1", ",", "\n", "class_names", "=", "dataset", ".", "CLASSES", ",", "\n", "show", "=", "not", "args", ".", "not_show", ",", "\n", "out_file", "=", "filename", ",", "\n", "wait_time", "=", "args", ".", "show_interval", ")", "\n", "progress_bar", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.upgrade_model_version.convert": [[8, 31], ["torch.load", "torch.load.pop", "collections.OrderedDict", "checkpoint.pop.items", "torch.save", "re.search", "key.replace", "re.search.groups"], "function", ["None"], ["def", "convert", "(", "in_file", ",", "out_file", ")", ":", "\n", "    ", "\"\"\"Convert keys in checkpoints.\n\n    There can be some breaking changes during the development of mmdetection,\n    and this tool is used for upgrading checkpoints trained with old versions\n    to the latest one.\n    \"\"\"", "\n", "checkpoint", "=", "torch", ".", "load", "(", "in_file", ")", "\n", "in_state_dict", "=", "checkpoint", ".", "pop", "(", "'state_dict'", ")", "\n", "out_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "val", "in", "in_state_dict", ".", "items", "(", ")", ":", "\n", "# Use ConvModule instead of nn.Conv2d in RetinaNet", "\n", "# cls_convs.0.weight -> cls_convs.0.conv.weight", "\n", "        ", "m", "=", "re", ".", "search", "(", "r'(cls_convs|reg_convs).\\d.(weight|bias)'", ",", "key", ")", "\n", "if", "m", "is", "not", "None", ":", "\n", "            ", "param", "=", "m", ".", "groups", "(", ")", "[", "1", "]", "\n", "new_key", "=", "key", ".", "replace", "(", "param", ",", "'conv.{}'", ".", "format", "(", "param", ")", ")", "\n", "out_state_dict", "[", "new_key", "]", "=", "val", "\n", "continue", "\n", "\n", "", "out_state_dict", "[", "key", "]", "=", "val", "\n", "", "checkpoint", "[", "'state_dict'", "]", "=", "out_state_dict", "\n", "torch", ".", "save", "(", "checkpoint", ",", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.upgrade_model_version.main": [[33, 39], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "upgrade_model_version.convert"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.upgrade_model_version.convert"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Upgrade model version'", ")", "\n", "parser", ".", "add_argument", "(", "'in_file'", ",", "help", "=", "'input checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "'out_file'", ",", "help", "=", "'output checkpoint file'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "convert", "(", "args", ".", "in_file", ",", "args", ".", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.fuse_conv_bn.fuse_conv_bn": [[10, 25], ["torch.Parameter", "torch.Parameter", "torch.zeros_like", "torch.zeros_like", "torch.sqrt", "torch.sqrt", "factor.reshape"], "function", ["None"], ["def", "fuse_conv_bn", "(", "conv", ",", "bn", ")", ":", "\n", "    ", "\"\"\" During inference, the functionary of batch norm layers is turned off\n    but only the mean and var alone channels are used, which exposes the\n    chance to fuse it with the preceding conv layers to save computations and\n    simplify network structures.\n    \"\"\"", "\n", "conv_w", "=", "conv", ".", "weight", "\n", "conv_b", "=", "conv", ".", "bias", "if", "conv", ".", "bias", "is", "not", "None", "else", "torch", ".", "zeros_like", "(", "\n", "bn", ".", "running_mean", ")", "\n", "\n", "factor", "=", "bn", ".", "weight", "/", "torch", ".", "sqrt", "(", "bn", ".", "running_var", "+", "bn", ".", "eps", ")", "\n", "conv", ".", "weight", "=", "nn", ".", "Parameter", "(", "conv_w", "*", "\n", "factor", ".", "reshape", "(", "[", "conv", ".", "out_channels", ",", "1", ",", "1", ",", "1", "]", ")", ")", "\n", "conv", ".", "bias", "=", "nn", ".", "Parameter", "(", "(", "conv_b", "-", "bn", ".", "running_mean", ")", "*", "factor", "+", "bn", ".", "bias", ")", "\n", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.fuse_conv_bn.fuse_module": [[27, 46], ["m.named_children", "isinstance", "fuse_conv_bn.fuse_conv_bn", "torch.Identity", "isinstance", "fuse_conv_bn.fuse_module"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.fuse_conv_bn.fuse_conv_bn", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.fuse_conv_bn.fuse_module"], ["", "def", "fuse_module", "(", "m", ")", ":", "\n", "    ", "last_conv", "=", "None", "\n", "last_conv_name", "=", "None", "\n", "\n", "for", "name", ",", "child", "in", "m", ".", "named_children", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "child", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "SyncBatchNorm", ")", ")", ":", "\n", "            ", "if", "last_conv", "is", "None", ":", "# only fuse BN that is after Conv", "\n", "                ", "continue", "\n", "", "fused_conv", "=", "fuse_conv_bn", "(", "last_conv", ",", "child", ")", "\n", "m", ".", "_modules", "[", "last_conv_name", "]", "=", "fused_conv", "\n", "# To reduce changes, set BN as Identity instead of deleting it.", "\n", "m", ".", "_modules", "[", "name", "]", "=", "nn", ".", "Identity", "(", ")", "\n", "last_conv", "=", "None", "\n", "", "elif", "isinstance", "(", "child", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "last_conv", "=", "child", "\n", "last_conv_name", "=", "name", "\n", "", "else", ":", "\n", "            ", "fuse_module", "(", "child", ")", "\n", "", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.fuse_conv_bn.parse_args": [[48, 56], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'fuse Conv and BN layers in a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file path'", ")", "\n", "parser", ".", "add_argument", "(", "'out'", ",", "help", "=", "'output path of the converted model'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.fuse_conv_bn.main": [[58, 65], ["fuse_conv_bn.parse_args", "mmdet.apis.init_detector", "fuse_conv_bn.fuse_module", "mmcv.runner.save_checkpoint"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.inference.init_detector", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.fuse_conv_bn.fuse_module"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "# build the model from a config file and a checkpoint file", "\n", "model", "=", "init_detector", "(", "args", ".", "config", ",", "args", ".", "checkpoint", ")", "\n", "# fuse conv and bn layers of the model", "\n", "fused_model", "=", "fuse_module", "(", "model", ")", "\n", "save_checkpoint", "(", "fused_model", ",", "args", ".", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test_robustness.coco_eval_with_return": [[24, 64], ["mmcv.is_str", "isinstance", "pycocotools.coco.COCO", "result_file.endswith", "pycocotools.coco.COCO.loadRes", "pycocotools.coco.COCO.getImgIds", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "pycocotools.cocoeval.COCOeval.summarize", "list", "range", "len"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.eval_hooks.EvalHook.evaluate"], ["def", "coco_eval_with_return", "(", "result_files", ",", "\n", "result_types", ",", "\n", "coco", ",", "\n", "max_dets", "=", "(", "100", ",", "300", ",", "1000", ")", ")", ":", "\n", "    ", "for", "res_type", "in", "result_types", ":", "\n", "        ", "assert", "res_type", "in", "[", "'proposal'", ",", "'bbox'", ",", "'segm'", ",", "'keypoints'", "]", "\n", "\n", "", "if", "mmcv", ".", "is_str", "(", "coco", ")", ":", "\n", "        ", "coco", "=", "COCO", "(", "coco", ")", "\n", "", "assert", "isinstance", "(", "coco", ",", "COCO", ")", "\n", "\n", "eval_results", "=", "{", "}", "\n", "for", "res_type", "in", "result_types", ":", "\n", "        ", "result_file", "=", "result_files", "[", "res_type", "]", "\n", "assert", "result_file", ".", "endswith", "(", "'.json'", ")", "\n", "\n", "coco_dets", "=", "coco", ".", "loadRes", "(", "result_file", ")", "\n", "img_ids", "=", "coco", ".", "getImgIds", "(", ")", "\n", "iou_type", "=", "'bbox'", "if", "res_type", "==", "'proposal'", "else", "res_type", "\n", "cocoEval", "=", "COCOeval", "(", "coco", ",", "coco_dets", ",", "iou_type", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "img_ids", "\n", "if", "res_type", "==", "'proposal'", ":", "\n", "            ", "cocoEval", ".", "params", ".", "useCats", "=", "0", "\n", "cocoEval", ".", "params", ".", "maxDets", "=", "list", "(", "max_dets", ")", "\n", "", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "cocoEval", ".", "summarize", "(", ")", "\n", "if", "res_type", "==", "'segm'", "or", "res_type", "==", "'bbox'", ":", "\n", "            ", "metric_names", "=", "[", "\n", "'AP'", ",", "'AP50'", ",", "'AP75'", ",", "'APs'", ",", "'APm'", ",", "'APl'", ",", "'AR1'", ",", "'AR10'", ",", "\n", "'AR100'", ",", "'ARs'", ",", "'ARm'", ",", "'ARl'", "\n", "]", "\n", "eval_results", "[", "res_type", "]", "=", "{", "\n", "metric_names", "[", "i", "]", ":", "cocoEval", ".", "stats", "[", "i", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "metric_names", ")", ")", "\n", "}", "\n", "", "else", ":", "\n", "            ", "eval_results", "[", "res_type", "]", "=", "cocoEval", ".", "stats", "\n", "\n", "", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test_robustness.voc_eval_with_return": [[66, 91], ["mmcv.load", "mmdet.core.eval_map", "dataset.get_ann_info", "hasattr", "range", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.evaluation.mean_ap.eval_map", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.xml_style.XMLDataset.get_ann_info"], ["", "def", "voc_eval_with_return", "(", "result_file", ",", "\n", "dataset", ",", "\n", "iou_thr", "=", "0.5", ",", "\n", "logger", "=", "'print'", ",", "\n", "only_ap", "=", "True", ")", ":", "\n", "    ", "det_results", "=", "mmcv", ".", "load", "(", "result_file", ")", "\n", "annotations", "=", "[", "dataset", ".", "get_ann_info", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "if", "hasattr", "(", "dataset", ",", "'year'", ")", "and", "dataset", ".", "year", "==", "2007", ":", "\n", "        ", "dataset_name", "=", "'voc07'", "\n", "", "else", ":", "\n", "        ", "dataset_name", "=", "dataset", ".", "CLASSES", "\n", "", "mean_ap", ",", "eval_results", "=", "eval_map", "(", "\n", "det_results", ",", "\n", "annotations", ",", "\n", "scale_ranges", "=", "None", ",", "\n", "iou_thr", "=", "iou_thr", ",", "\n", "dataset", "=", "dataset_name", ",", "\n", "logger", "=", "logger", ")", "\n", "\n", "if", "only_ap", ":", "\n", "        ", "eval_results", "=", "[", "{", "\n", "'ap'", ":", "eval_results", "[", "i", "]", "[", "'ap'", "]", "\n", "}", "for", "i", "in", "range", "(", "len", "(", "eval_results", ")", ")", "]", "\n", "\n", "", "return", "mean_ap", ",", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test_robustness.single_gpu_test": [[93, 110], ["model.eval", "mmcv.ProgressBar", "enumerate", "len", "results.append", "[].size", "range", "torch.no_grad", "torch.no_grad", "model", "model.module.show_result", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.detectors.cascade_rcnn.CascadeRCNN.show_result"], ["", "def", "single_gpu_test", "(", "model", ",", "data_loader", ",", "show", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "not", "show", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "show", ":", "\n", "            ", "model", ".", "module", ".", "show_result", "(", "data", ",", "result", ",", "dataset", ".", "img_norm_cfg", ")", "\n", "\n", "", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test_robustness.multi_gpu_test": [[112, 133], ["model.eval", "mmcv.runner.get_dist_info", "enumerate", "test_robustness.collect_results", "mmcv.ProgressBar", "collect_results.append", "len", "len", "torch.no_grad", "torch.no_grad", "model", "[].size", "range", "mmcv.ProgressBar.update"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test_robustness.collect_results"], ["", "def", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", "*", "world_size", ")", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "# collect results from all ranks", "\n", "", "", "", "results", "=", "collect_results", "(", "results", ",", "len", "(", "dataset", ")", ",", "tmpdir", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test_robustness.collect_results": [[135, 175], ["mmcv.runner.get_dist_info", "mmcv.dump", "torch.barrier", "torch.full", "torch.full", "torch.broadcast", "torch.full.cpu().numpy().tobytes().decode().rstrip", "mmcv.mkdir_or_exist", "os.join", "range", "zip", "shutil.rmtree", "tempfile.mkdtemp", "torch.tensor", "torch.tensor", "os.join", "part_list.append", "ordered_results.extend", "bytearray", "torch.full.cpu().numpy().tobytes().decode", "mmcv.load", "list", "torch.tensor.encode", "len", "torch.full.cpu().numpy().tobytes", "torch.full.cpu().numpy", "torch.full.cpu"], "function", ["None"], ["", "def", "collect_results", "(", "result_part", ",", "size", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# create a tmp dir if it is not specified", "\n", "if", "tmpdir", "is", "None", ":", "\n", "        ", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "\n", "32", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "'cuda'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "tmpdir", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "dir_tensor", "[", ":", "len", "(", "tmpdir", ")", "]", "=", "tmpdir", "\n", "", "dist", ".", "broadcast", "(", "dir_tensor", ",", "0", ")", "\n", "tmpdir", "=", "dir_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "", "else", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "tmpdir", ")", "\n", "# dump the part result to the dir", "\n", "", "mmcv", ".", "dump", "(", "result_part", ",", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "rank", ")", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "# collect all parts", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "# load results of all parts from tmp dir", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "part_file", "=", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "part_list", ".", "append", "(", "mmcv", ".", "load", "(", "part_file", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "# remove tmp dir", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "return", "ordered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test_robustness.parse_args": [[177, 246], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MMDet test detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--corruptions'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "'benchmark'", ",", "\n", "choices", "=", "[", "\n", "'all'", ",", "'benchmark'", ",", "'noise'", ",", "'blur'", ",", "'weather'", ",", "'digital'", ",", "\n", "'holdout'", ",", "'None'", ",", "'gaussian_noise'", ",", "'shot_noise'", ",", "'impulse_noise'", ",", "\n", "'defocus_blur'", ",", "'glass_blur'", ",", "'motion_blur'", ",", "'zoom_blur'", ",", "'snow'", ",", "\n", "'frost'", ",", "'fog'", ",", "'brightness'", ",", "'contrast'", ",", "'elastic_transform'", ",", "\n", "'pixelate'", ",", "'jpeg_compression'", ",", "'speckle_noise'", ",", "'gaussian_blur'", ",", "\n", "'spatter'", ",", "'saturate'", "\n", "]", ",", "\n", "help", "=", "'corruptions'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--severities'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ",", "\n", "help", "=", "'corruption severity levels'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'proposal'", ",", "'proposal_fast'", ",", "'bbox'", ",", "'segm'", ",", "'keypoints'", "]", ",", "\n", "help", "=", "'eval types'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--iou-thr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.5", ",", "\n", "help", "=", "'IoU threshold for pascal voc evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--summaries'", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'Print summaries for every corruption and severity'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'workers per gpu'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "'--tmpdir'", ",", "help", "=", "'tmp dir for writing some results'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--final-prints'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'P'", ",", "'mPC'", ",", "'rPC'", "]", ",", "\n", "default", "=", "'mPC'", ",", "\n", "help", "=", "'corruption benchmark metric to print at the end'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--final-prints-aggregate'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "'all'", ",", "'benchmark'", "]", ",", "\n", "default", "=", "'benchmark'", ",", "\n", "help", "=", "'aggregate all results or only those for benchmark corruptions'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test_robustness.main": [[248, 444], ["test_robustness.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmcv.runner.get_dist_info", "enumerate", "ValueError", "mmcv.runner.init_dist", "mmdet.apis.set_random_seed", "enumerate", "print", "parse_args.out.endswith", "copy.deepcopy", "print", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmdet.models.build_detector", "mmcv.Config.fromfile.get", "mmcv.runner.load_checkpoint", "robustness_eval.get_results", "robustness_eval.get_results", "dict", "test_data_cfg[].insert", "mmdet.core.wrap_fp16_model", "mmcv.parallel.MMDataParallel", "test_robustness.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "test_robustness.multi_gpu_test", "mmcv.dump", "mmcv.dump", "mmcv.parallel.MMDistributedDataParallel.cuda", "os.splitext", "print", "test_robustness.coco_eval_with_return", "print", "torch.cuda.current_device", "torch.cuda.current_device", "os.splitext", "mmcv.runner.obj_from_dict", "test_robustness.voc_eval_with_return", "print", "isinstance", "mmdet.datasets.build_dataset.results2json", "print", "mmdet.datasets.build_dataset.results2json"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.train.set_random_seed", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_detector", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.robustness_eval.get_results", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.robustness_eval.get_results", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.fp16.hooks.wrap_fp16_model", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test_robustness.single_gpu_test", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test_robustness.multi_gpu_test", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test_robustness.coco_eval_with_return", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tools.test_robustness.voc_eval_with_return", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset.results2json", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.datasets.coco.CocoDataset.results2json"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "out", "or", "args", ".", "show", ",", "(", "'Please specify at least one operation (save or show the results) '", "\n", "'with the argument \"--out\" or \"--show\"'", ")", "\n", "\n", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "if", "args", ".", "workers", "==", "0", ":", "\n", "        ", "args", ".", "workers", "=", "cfg", ".", "data", ".", "workers_per_gpu", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# set random seeds", "\n", "", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "if", "'all'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "\n", "'gaussian_noise'", ",", "'shot_noise'", ",", "'impulse_noise'", ",", "'defocus_blur'", ",", "\n", "'glass_blur'", ",", "'motion_blur'", ",", "'zoom_blur'", ",", "'snow'", ",", "'frost'", ",", "'fog'", ",", "\n", "'brightness'", ",", "'contrast'", ",", "'elastic_transform'", ",", "'pixelate'", ",", "\n", "'jpeg_compression'", ",", "'speckle_noise'", ",", "'gaussian_blur'", ",", "'spatter'", ",", "\n", "'saturate'", "\n", "]", "\n", "", "elif", "'benchmark'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "\n", "'gaussian_noise'", ",", "'shot_noise'", ",", "'impulse_noise'", ",", "'defocus_blur'", ",", "\n", "'glass_blur'", ",", "'motion_blur'", ",", "'zoom_blur'", ",", "'snow'", ",", "'frost'", ",", "'fog'", ",", "\n", "'brightness'", ",", "'contrast'", ",", "'elastic_transform'", ",", "'pixelate'", ",", "\n", "'jpeg_compression'", "\n", "]", "\n", "", "elif", "'noise'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "'gaussian_noise'", ",", "'shot_noise'", ",", "'impulse_noise'", "]", "\n", "", "elif", "'blur'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "\n", "'defocus_blur'", ",", "'glass_blur'", ",", "'motion_blur'", ",", "'zoom_blur'", "\n", "]", "\n", "", "elif", "'weather'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "'snow'", ",", "'frost'", ",", "'fog'", ",", "'brightness'", "]", "\n", "", "elif", "'digital'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "\n", "'contrast'", ",", "'elastic_transform'", ",", "'pixelate'", ",", "'jpeg_compression'", "\n", "]", "\n", "", "elif", "'holdout'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "'speckle_noise'", ",", "'gaussian_blur'", ",", "'spatter'", ",", "'saturate'", "]", "\n", "", "elif", "'None'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "'None'", "]", "\n", "args", ".", "severities", "=", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "corruptions", "=", "args", ".", "corruptions", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "aggregated_results", "=", "{", "}", "\n", "for", "corr_i", ",", "corruption", "in", "enumerate", "(", "corruptions", ")", ":", "\n", "        ", "aggregated_results", "[", "corruption", "]", "=", "{", "}", "\n", "for", "sev_i", ",", "corruption_severity", "in", "enumerate", "(", "args", ".", "severities", ")", ":", "\n", "# evaluate severity 0 (= no corruption) only once", "\n", "            ", "if", "corr_i", ">", "0", "and", "corruption_severity", "==", "0", ":", "\n", "                ", "aggregated_results", "[", "corruption", "]", "[", "0", "]", "=", "aggregated_results", "[", "corruptions", "[", "0", "]", "]", "[", "0", "]", "\n", "continue", "\n", "\n", "", "test_data_cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ".", "data", ".", "test", ")", "\n", "# assign corruption and severity", "\n", "if", "corruption_severity", ">", "0", ":", "\n", "                ", "corruption_trans", "=", "dict", "(", "\n", "type", "=", "'Corrupt'", ",", "\n", "corruption", "=", "corruption", ",", "\n", "severity", "=", "corruption_severity", ")", "\n", "# TODO: hard coded \"1\", we assume that the first step is", "\n", "# loading images, which needs to be fixed in the future", "\n", "test_data_cfg", "[", "'pipeline'", "]", ".", "insert", "(", "1", ",", "corruption_trans", ")", "\n", "\n", "# print info", "\n", "", "print", "(", "'\\nTesting {} at severity {}'", ".", "format", "(", "corruption", ",", "\n", "corruption_severity", ")", ")", "\n", "\n", "# build the dataloader", "\n", "# TODO: support multiple images per gpu", "\n", "#       (only minor changes are needed)", "\n", "dataset", "=", "build_dataset", "(", "test_data_cfg", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "imgs_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "args", ".", "workers", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "model", "=", "build_detector", "(", "\n", "cfg", ".", "model", ",", "train_cfg", "=", "None", ",", "test_cfg", "=", "cfg", ".", "test_cfg", ")", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "                ", "wrap_fp16_model", "(", "model", ")", "\n", "", "checkpoint", "=", "load_checkpoint", "(", "\n", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "# old versions did not save class info in checkpoints,", "\n", "# this walkaround is for backward compatibility", "\n", "if", "'CLASSES'", "in", "checkpoint", "[", "'meta'", "]", ":", "\n", "                ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "                ", "model", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "                ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "show", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "tmpdir", ")", "\n", "\n", "", "if", "args", ".", "out", "and", "rank", "==", "0", ":", "\n", "                ", "eval_results_filename", "=", "(", "\n", "osp", ".", "splitext", "(", "args", ".", "out", ")", "[", "0", "]", "+", "'_results'", "+", "\n", "osp", ".", "splitext", "(", "args", ".", "out", ")", "[", "1", "]", ")", "\n", "mmcv", ".", "dump", "(", "outputs", ",", "args", ".", "out", ")", "\n", "eval_types", "=", "args", ".", "eval", "\n", "if", "cfg", ".", "dataset_type", "==", "'VOCDataset'", ":", "\n", "                    ", "if", "eval_types", ":", "\n", "                        ", "for", "eval_type", "in", "eval_types", ":", "\n", "                            ", "if", "eval_type", "==", "'bbox'", ":", "\n", "                                ", "test_dataset", "=", "mmcv", ".", "runner", ".", "obj_from_dict", "(", "\n", "cfg", ".", "data", ".", "test", ",", "datasets", ")", "\n", "logger", "=", "'print'", "if", "args", ".", "summaries", "else", "None", "\n", "mean_ap", ",", "eval_results", "=", "voc_eval_with_return", "(", "\n", "args", ".", "out", ",", "test_dataset", ",", "\n", "args", ".", "iou_thr", ",", "logger", ")", "\n", "aggregated_results", "[", "corruption", "]", "[", "\n", "corruption_severity", "]", "=", "eval_results", "\n", "", "else", ":", "\n", "                                ", "print", "(", "'\\nOnly \"bbox\" evaluation \\\n                                is supported for pascal voc'", ")", "\n", "", "", "", "", "else", ":", "\n", "                    ", "if", "eval_types", ":", "\n", "                        ", "print", "(", "'Starting evaluate {}'", ".", "format", "(", "\n", "' and '", ".", "join", "(", "eval_types", ")", ")", ")", "\n", "if", "eval_types", "==", "[", "'proposal_fast'", "]", ":", "\n", "                            ", "result_file", "=", "args", ".", "out", "\n", "", "else", ":", "\n", "                            ", "if", "not", "isinstance", "(", "outputs", "[", "0", "]", ",", "dict", ")", ":", "\n", "                                ", "result_files", "=", "dataset", ".", "results2json", "(", "\n", "outputs", ",", "args", ".", "out", ")", "\n", "", "else", ":", "\n", "                                ", "for", "name", "in", "outputs", "[", "0", "]", ":", "\n", "                                    ", "print", "(", "'\\nEvaluating {}'", ".", "format", "(", "name", ")", ")", "\n", "outputs_", "=", "[", "out", "[", "name", "]", "for", "out", "in", "outputs", "]", "\n", "result_file", "=", "args", ".", "out", "\n", "+", "'.{}'", ".", "format", "(", "name", ")", "\n", "result_files", "=", "dataset", ".", "results2json", "(", "\n", "outputs_", ",", "result_file", ")", "\n", "", "", "", "eval_results", "=", "coco_eval_with_return", "(", "\n", "result_files", ",", "eval_types", ",", "dataset", ".", "coco", ")", "\n", "aggregated_results", "[", "corruption", "]", "[", "\n", "corruption_severity", "]", "=", "eval_results", "\n", "", "else", ":", "\n", "                        ", "print", "(", "'\\nNo task was selected for evaluation;'", "\n", "'\\nUse --eval to select a task'", ")", "\n", "\n", "# save results after each evaluation", "\n", "", "", "mmcv", ".", "dump", "(", "aggregated_results", ",", "eval_results_filename", ")", "\n", "\n", "", "", "", "if", "rank", "==", "0", ":", "\n", "# print filan results", "\n", "        ", "print", "(", "'\\nAggregated results:'", ")", "\n", "prints", "=", "args", ".", "final_prints", "\n", "aggregate", "=", "args", ".", "final_prints_aggregate", "\n", "\n", "if", "cfg", ".", "dataset_type", "==", "'VOCDataset'", ":", "\n", "            ", "get_results", "(", "\n", "eval_results_filename", ",", "\n", "dataset", "=", "'voc'", ",", "\n", "prints", "=", "prints", ",", "\n", "aggregate", "=", "aggregate", ")", "\n", "", "else", ":", "\n", "            ", "get_results", "(", "\n", "eval_results_filename", ",", "\n", "dataset", "=", "'coco'", ",", "\n", "prints", "=", "prints", ",", "\n", "aggregate", "=", "aggregate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.cityscapes.collect_files": [[11, 26], ["glob.glob", "len", "print", "os.join", "img_file.endswith", "files.append", "len", "len", "len", "len", "len"], "function", ["None"], ["import", "pycocotools", ".", "mask", "as", "maskUtils", "\n", "\n", "from", "mmdet", ".", "utils", "import", "print_log", "\n", "from", ".", "coco", "import", "CocoDataset", "\n", "from", ".", "registry", "import", "DATASETS", "\n", "\n", "\n", "@", "DATASETS", ".", "register_module", "\n", "class", "CityscapesDataset", "(", "CocoDataset", ")", ":", "\n", "\n", "    ", "CLASSES", "=", "(", "'person'", ",", "'rider'", ",", "'car'", ",", "'truck'", ",", "'bus'", ",", "'train'", ",", "'motorcycle'", ",", "\n", "'bicycle'", ")", "\n", "\n", "def", "_filter_imgs", "(", "self", ",", "min_size", "=", "32", ")", ":", "\n", "        ", "\"\"\"Filter images too small or without ground truths.\"\"\"", "\n", "valid_inds", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.cityscapes.collect_annotations": [[28, 37], ["print", "mmcv.track_parallel_progress", "mmcv.track_progress"], "function", ["None"], ["for", "i", ",", "img_info", "in", "enumerate", "(", "self", ".", "img_infos", ")", ":", "\n", "            ", "img_id", "=", "img_info", "[", "'id'", "]", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "ann_info", "=", "self", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "all_iscrowd", "=", "all", "(", "[", "_", "[", "'iscrowd'", "]", "for", "_", "in", "ann_info", "]", ")", "\n", "if", "self", ".", "filter_empty_gt", "and", "(", "self", ".", "img_ids", "[", "i", "]", "not", "in", "ids_with_ann", "\n", "or", "all_iscrowd", ")", ":", "\n", "                ", "continue", "\n", "", "if", "min", "(", "img_info", "[", "'width'", "]", ",", "img_info", "[", "'height'", "]", ")", ">=", "min_size", ":", "\n", "                ", "valid_inds", ".", "append", "(", "i", ")", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.cityscapes.load_img_info": [[39, 82], ["mmcv.imread", "numpy.unique", "os.basename", "dict", "int", "numpy.asarray", "pycocotools.area", "pycocotools.toBbox", "mask_rle[].decode", "dict", "anno_info.append", "os.dirname", "pycocotools.encode", "os.join", "os.join", "maskUtils.toBbox.tolist", "maskUtils.area.tolist", "os.basename", "os.basename"], "function", ["None"], ["\n", "", "def", "_parse_ann_info", "(", "self", ",", "img_info", ",", "ann_info", ")", ":", "\n", "        ", "\"\"\"Parse bbox and mask annotation.\n\n        Args:\n            img_info (dict): Image info of an image.\n            ann_info (list[dict]): Annotation info of an image.\n\n        Returns:\n            dict: A dict containing the following keys: bboxes, bboxes_ignore,\n                labels, masks, seg_map.\n                \"masks\" are already decoded into binary masks.\n        \"\"\"", "\n", "gt_bboxes", "=", "[", "]", "\n", "gt_labels", "=", "[", "]", "\n", "gt_bboxes_ignore", "=", "[", "]", "\n", "gt_masks_ann", "=", "[", "]", "\n", "\n", "for", "i", ",", "ann", "in", "enumerate", "(", "ann_info", ")", ":", "\n", "            ", "if", "ann", ".", "get", "(", "'ignore'", ",", "False", ")", ":", "\n", "                ", "continue", "\n", "", "x1", ",", "y1", ",", "w", ",", "h", "=", "ann", "[", "'bbox'", "]", "\n", "if", "ann", "[", "'area'", "]", "<=", "0", "or", "w", "<", "1", "or", "h", "<", "1", ":", "\n", "                ", "continue", "\n", "", "bbox", "=", "[", "x1", ",", "y1", ",", "x1", "+", "w", "-", "1", ",", "y1", "+", "h", "-", "1", "]", "\n", "if", "ann", ".", "get", "(", "'iscrowd'", ",", "False", ")", ":", "\n", "                ", "gt_bboxes_ignore", ".", "append", "(", "bbox", ")", "\n", "", "else", ":", "\n", "                ", "gt_bboxes", ".", "append", "(", "bbox", ")", "\n", "gt_labels", ".", "append", "(", "self", ".", "cat2label", "[", "ann", "[", "'category_id'", "]", "]", ")", "\n", "gt_masks_ann", ".", "append", "(", "ann", "[", "'segmentation'", "]", ")", "\n", "\n", "", "", "if", "gt_bboxes", ":", "\n", "            ", "gt_bboxes", "=", "np", ".", "array", "(", "gt_bboxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_labels", "=", "np", ".", "array", "(", "gt_labels", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "else", ":", "\n", "            ", "gt_bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_labels", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "", "if", "gt_bboxes_ignore", ":", "\n", "            ", "gt_bboxes_ignore", "=", "np", ".", "array", "(", "gt_bboxes_ignore", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "gt_bboxes_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.cityscapes.cvt_annotations": [[84, 111], ["dict", "mmcv.dump", "image_info.pop", "out_json[].append", "len", "dict.pop", "out_json[].append", "dict", "out_json[].append"], "function", ["None"], ["bboxes", "=", "gt_bboxes", ",", "\n", "labels", "=", "gt_labels", ",", "\n", "bboxes_ignore", "=", "gt_bboxes_ignore", ",", "\n", "masks", "=", "gt_masks_ann", ",", "\n", "seg_map", "=", "img_info", "[", "'segm_file'", "]", ")", "\n", "\n", "return", "ann", "\n", "\n", "", "def", "results2txt", "(", "self", ",", "results", ",", "outfile_prefix", ")", ":", "\n", "        ", "\"\"\"Dump the detection results to a txt file.\n\n        Args:\n            results (list[list | tuple | ndarray]): Testing results of the\n                dataset.\n            outfile_prefix (str): The filename prefix of the json files.\n                If the prefix is \"somepath/xxx\",\n                the txt files will be named \"somepath/xxx.txt\".\n\n        Returns:\n            list[str: str]: result txt files which contains corresponding\n            instance segmentation images.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "import", "cityscapesscripts", ".", "helpers", ".", "labels", "as", "CSLabels", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Please run \"pip install citscapesscripts\" to '", "\n", "'install cityscapesscripts first.'", ")", "\n", "", "result_files", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.cityscapes.parse_args": [[113, 124], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args"], ["prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "self", ")", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "result", "=", "results", "[", "idx", "]", "\n", "filename", "=", "self", ".", "img_infos", "[", "idx", "]", "[", "'filename'", "]", "\n", "basename", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "filename", ")", ")", "[", "0", "]", "\n", "pred_txt", "=", "osp", ".", "join", "(", "outfile_prefix", ",", "basename", "+", "'_pred.txt'", ")", "\n", "\n", "bbox_result", ",", "segm_result", "=", "result", "\n", "bboxes", "=", "np", ".", "vstack", "(", "bbox_result", ")", "\n", "segms", "=", "mmcv", ".", "concat_list", "(", "segm_result", ")", "\n", "labels", "=", "[", "\n", "np", ".", "full", "(", "bbox", ".", "shape", "[", "0", "]", ",", "i", ",", "dtype", "=", "np", ".", "int32", ")", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.cityscapes.main": [[126, 148], ["cityscapes.parse_args", "mmcv.mkdir_or_exist", "os.join", "os.join", "dict", "dict.items", "print", "mmcv.Timer", "cityscapes.collect_files", "cityscapes.collect_annotations", "cityscapes.cvt_annotations", "os.join", "os.join", "os.join"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.cityscapes.collect_files", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.cityscapes.collect_annotations", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.cvt_annotations"], ["]", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "\n", "assert", "len", "(", "bboxes", ")", "==", "len", "(", "segms", ")", "==", "len", "(", "labels", ")", "\n", "num_instances", "=", "len", "(", "bboxes", ")", "\n", "prog_bar", ".", "update", "(", ")", "\n", "with", "open", "(", "pred_txt", ",", "'w'", ")", "as", "fout", ":", "\n", "                ", "for", "i", "in", "range", "(", "num_instances", ")", ":", "\n", "                    ", "pred_class", "=", "labels", "[", "i", "]", "\n", "classes", "=", "self", ".", "CLASSES", "[", "pred_class", "]", "\n", "class_id", "=", "CSLabels", ".", "name2label", "[", "classes", "]", ".", "id", "\n", "score", "=", "bboxes", "[", "i", ",", "-", "1", "]", "\n", "mask", "=", "maskUtils", ".", "decode", "(", "segms", "[", "i", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "png_filename", "=", "osp", ".", "join", "(", "\n", "outfile_prefix", ",", "\n", "basename", "+", "'_{}_{}.png'", ".", "format", "(", "i", ",", "classes", ")", ")", "\n", "mmcv", ".", "imwrite", "(", "mask", ",", "png_filename", ")", "\n", "fout", ".", "write", "(", "'{} {} {}\\n'", ".", "format", "(", "\n", "osp", ".", "basename", "(", "png_filename", ")", ",", "class_id", ",", "score", ")", ")", "\n", "", "", "result_files", ".", "append", "(", "pred_txt", ")", "\n", "\n", "", "return", "result_files", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_xml": [[13, 65], ["xml.parse", "ET.parse.getroot", "tree.getroot.find", "int", "int", "tree.getroot.findall", "int", "obj.find", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.array", "root.find.find", "root.find.find", "obj.find", "int", "int", "int", "int", "np.zeros.append", "np.array.append", "np.zeros.append", "np.array.append", "numpy.array", "numpy.array", "np.zeros.astype", "np.array.astype", "np.zeros.astype", "np.array.astype", "obj.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find"], "function", ["None"], ["def", "parse_xml", "(", "args", ")", ":", "\n", "    ", "xml_path", ",", "img_path", "=", "args", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_path", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "size", "=", "root", ".", "find", "(", "'size'", ")", "\n", "w", "=", "int", "(", "size", ".", "find", "(", "'width'", ")", ".", "text", ")", "\n", "h", "=", "int", "(", "size", ".", "find", "(", "'height'", ")", ".", "text", ")", "\n", "bboxes", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "bboxes_ignore", "=", "[", "]", "\n", "labels_ignore", "=", "[", "]", "\n", "for", "obj", "in", "root", ".", "findall", "(", "'object'", ")", ":", "\n", "        ", "name", "=", "obj", ".", "find", "(", "'name'", ")", ".", "text", "\n", "label", "=", "label_ids", "[", "name", "]", "\n", "difficult", "=", "int", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", ")", "\n", "bnd_box", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "bbox", "=", "[", "\n", "int", "(", "bnd_box", ".", "find", "(", "'xmin'", ")", ".", "text", ")", ",", "\n", "int", "(", "bnd_box", ".", "find", "(", "'ymin'", ")", ".", "text", ")", ",", "\n", "int", "(", "bnd_box", ".", "find", "(", "'xmax'", ")", ".", "text", ")", ",", "\n", "int", "(", "bnd_box", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "\n", "]", "\n", "if", "difficult", ":", "\n", "            ", "bboxes_ignore", ".", "append", "(", "bbox", ")", "\n", "labels_ignore", ".", "append", "(", "label", ")", "\n", "", "else", ":", "\n", "            ", "bboxes", ".", "append", "(", "bbox", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "", "", "if", "not", "bboxes", ":", "\n", "        ", "bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "0", ",", ")", ")", "\n", "", "else", ":", "\n", "        ", "bboxes", "=", "np", ".", "array", "(", "bboxes", ",", "ndmin", "=", "2", ")", "-", "1", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "", "if", "not", "bboxes_ignore", ":", "\n", "        ", "bboxes_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "labels_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", ")", ")", "\n", "", "else", ":", "\n", "        ", "bboxes_ignore", "=", "np", ".", "array", "(", "bboxes_ignore", ",", "ndmin", "=", "2", ")", "-", "1", "\n", "labels_ignore", "=", "np", ".", "array", "(", "labels_ignore", ")", "\n", "", "annotation", "=", "{", "\n", "'filename'", ":", "img_path", ",", "\n", "'width'", ":", "w", ",", "\n", "'height'", ":", "h", ",", "\n", "'ann'", ":", "{", "\n", "'bboxes'", ":", "bboxes", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'labels'", ":", "labels", ".", "astype", "(", "np", ".", "int64", ")", ",", "\n", "'bboxes_ignore'", ":", "bboxes_ignore", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'labels_ignore'", ":", "labels_ignore", ".", "astype", "(", "np", ".", "int64", ")", "\n", "}", "\n", "}", "\n", "return", "annotation", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.cvt_annotations": [[67, 93], ["mmcv.dump", "isinstance", "os.join", "mmcv.list_from_file", "mmcv.track_progress", "annotations.extend", "os.isfile", "print", "os.join", "list", "zip"], "function", ["None"], ["", "def", "cvt_annotations", "(", "devkit_path", ",", "years", ",", "split", ",", "out_file", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "years", ",", "list", ")", ":", "\n", "        ", "years", "=", "[", "years", "]", "\n", "", "annotations", "=", "[", "]", "\n", "for", "year", "in", "years", ":", "\n", "        ", "filelist", "=", "osp", ".", "join", "(", "devkit_path", ",", "\n", "'VOC{}/ImageSets/Main/{}.txt'", ".", "format", "(", "year", ",", "split", ")", ")", "\n", "if", "not", "osp", ".", "isfile", "(", "filelist", ")", ":", "\n", "            ", "print", "(", "'filelist does not exist: {}, skip voc{} {}'", ".", "format", "(", "\n", "filelist", ",", "year", ",", "split", ")", ")", "\n", "return", "\n", "", "img_names", "=", "mmcv", ".", "list_from_file", "(", "filelist", ")", "\n", "xml_paths", "=", "[", "\n", "osp", ".", "join", "(", "devkit_path", ",", "\n", "'VOC{}/Annotations/{}.xml'", ".", "format", "(", "year", ",", "img_name", ")", ")", "\n", "for", "img_name", "in", "img_names", "\n", "]", "\n", "img_paths", "=", "[", "\n", "'VOC{}/JPEGImages/{}.jpg'", ".", "format", "(", "year", ",", "img_name", ")", "\n", "for", "img_name", "in", "img_names", "\n", "]", "\n", "part_annotations", "=", "mmcv", ".", "track_progress", "(", "parse_xml", ",", "\n", "list", "(", "zip", "(", "xml_paths", ",", "img_paths", ")", ")", ")", "\n", "annotations", ".", "extend", "(", "part_annotations", ")", "\n", "", "mmcv", ".", "dump", "(", "annotations", ",", "out_file", ")", "\n", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args": [[95, 102], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Convert PASCAL VOC annotations to mmdetection format'", ")", "\n", "parser", ".", "add_argument", "(", "'devkit_path'", ",", "help", "=", "'pascal voc devkit path'", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--out-dir'", ",", "help", "=", "'output path'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.main": [[104, 138], ["pascal_voc.parse_args", "mmcv.mkdir_or_exist", "os.isdir", "os.isdir", "print", "os.join", "years.append", "os.join", "years.append", "years.append", "IOError", "print", "pascal_voc.cvt_annotations", "isinstance", "print", "pascal_voc.cvt_annotations", "os.join", "os.join"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.parse_args", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.cvt_annotations", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.convert_datasets.pascal_voc.cvt_annotations"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "devkit_path", "=", "args", ".", "devkit_path", "\n", "out_dir", "=", "args", ".", "out_dir", "if", "args", ".", "out_dir", "else", "devkit_path", "\n", "mmcv", ".", "mkdir_or_exist", "(", "out_dir", ")", "\n", "\n", "years", "=", "[", "]", "\n", "if", "osp", ".", "isdir", "(", "osp", ".", "join", "(", "devkit_path", ",", "'VOC2007'", ")", ")", ":", "\n", "        ", "years", ".", "append", "(", "'2007'", ")", "\n", "", "if", "osp", ".", "isdir", "(", "osp", ".", "join", "(", "devkit_path", ",", "'VOC2012'", ")", ")", ":", "\n", "        ", "years", ".", "append", "(", "'2012'", ")", "\n", "", "if", "'2007'", "in", "years", "and", "'2012'", "in", "years", ":", "\n", "        ", "years", ".", "append", "(", "[", "'2007'", ",", "'2012'", "]", ")", "\n", "", "if", "not", "years", ":", "\n", "        ", "raise", "IOError", "(", "'The devkit path {} contains neither \"VOC2007\" nor '", "\n", "'\"VOC2012\" subfolder'", ".", "format", "(", "devkit_path", ")", ")", "\n", "", "for", "year", "in", "years", ":", "\n", "        ", "if", "year", "==", "'2007'", ":", "\n", "            ", "prefix", "=", "'voc07'", "\n", "", "elif", "year", "==", "'2012'", ":", "\n", "            ", "prefix", "=", "'voc12'", "\n", "", "elif", "year", "==", "[", "'2007'", ",", "'2012'", "]", ":", "\n", "            ", "prefix", "=", "'voc0712'", "\n", "", "for", "split", "in", "[", "'train'", ",", "'val'", ",", "'trainval'", "]", ":", "\n", "            ", "dataset_name", "=", "prefix", "+", "'_'", "+", "split", "\n", "print", "(", "'processing {} ...'", ".", "format", "(", "dataset_name", ")", ")", "\n", "cvt_annotations", "(", "devkit_path", ",", "year", ",", "split", ",", "\n", "osp", ".", "join", "(", "out_dir", ",", "dataset_name", "+", "'.pkl'", ")", ")", "\n", "", "if", "not", "isinstance", "(", "year", ",", "list", ")", ":", "\n", "            ", "dataset_name", "=", "prefix", "+", "'_test'", "\n", "print", "(", "'processing {} ...'", ".", "format", "(", "dataset_name", ")", ")", "\n", "cvt_annotations", "(", "devkit_path", ",", "year", ",", "'test'", ",", "\n", "osp", ".", "join", "(", "out_dir", ",", "dataset_name", "+", "'.pkl'", ")", ")", "\n", "", "", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_heads.test_anchor_head_loss": [[9, 75], ["mmdet.models.anchor_heads.AnchorHead", "mmcv.Config", "mmdet.models.anchor_heads.AnchorHead.forward", "mmdet.models.anchor_heads.AnchorHead.loss", "sum", "sum", "mmdet.models.anchor_heads.AnchorHead.loss", "sum", "sum", "torch.rand", "torch.empty", "torch.LongTensor", "sum.item", "sum.item", "torch.Tensor", "torch.LongTensor", "sum.item", "sum.item", "range", "len"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.loss"], ["def", "test_anchor_head_loss", "(", ")", ":", "\n", "    ", "\"\"\"\n    Tests anchor head loss when truth is empty and non-empty\n    \"\"\"", "\n", "self", "=", "AnchorHead", "(", "num_classes", "=", "4", ",", "in_channels", "=", "1", ")", "\n", "s", "=", "256", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'scale_factor'", ":", "1", ",", "\n", "'pad_shape'", ":", "(", "s", ",", "s", ",", "3", ")", "\n", "}", "]", "\n", "\n", "cfg", "=", "mmcv", ".", "Config", "(", "{", "\n", "'assigner'", ":", "{", "\n", "'type'", ":", "'MaxIoUAssigner'", ",", "\n", "'pos_iou_thr'", ":", "0.7", ",", "\n", "'neg_iou_thr'", ":", "0.3", ",", "\n", "'min_pos_iou'", ":", "0.3", ",", "\n", "'ignore_iof_thr'", ":", "-", "1", "\n", "}", ",", "\n", "'sampler'", ":", "{", "\n", "'type'", ":", "'RandomSampler'", ",", "\n", "'num'", ":", "256", ",", "\n", "'pos_fraction'", ":", "0.5", ",", "\n", "'neg_pos_ub'", ":", "-", "1", ",", "\n", "'add_gt_as_proposals'", ":", "False", "\n", "}", ",", "\n", "'allowed_border'", ":", "0", ",", "\n", "'pos_weight'", ":", "-", "1", ",", "\n", "'debug'", ":", "False", "\n", "}", ")", "\n", "\n", "# Anchor head expects a multiple levels of features per image", "\n", "feat", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "1", ",", "s", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ",", "s", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "anchor_generators", ")", ")", "\n", "]", "\n", "cls_scores", ",", "bbox_preds", "=", "self", ".", "forward", "(", "feat", ")", "\n", "\n", "# Test that empty ground truth encourages the network to predict background", "\n", "gt_bboxes", "=", "[", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", "]", "\n", "\n", "gt_bboxes_ignore", "=", "None", "\n", "empty_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "img_metas", ",", "cfg", ",", "gt_bboxes_ignore", ")", "\n", "# When there is no truth, the cls loss should be nonzero but there should", "\n", "# be no box loss.", "\n", "empty_cls_loss", "=", "sum", "(", "empty_gt_losses", "[", "'loss_cls'", "]", ")", "\n", "empty_box_loss", "=", "sum", "(", "empty_gt_losses", "[", "'loss_bbox'", "]", ")", "\n", "assert", "empty_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "empty_box_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no box loss when there are no true boxes'", ")", "\n", "\n", "# When truth is non-empty then both cls and box loss should be nonzero for", "\n", "# random inputs", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", "]", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", "]", "\n", "one_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "img_metas", ",", "cfg", ",", "gt_bboxes_ignore", ")", "\n", "onegt_cls_loss", "=", "sum", "(", "one_gt_losses", "[", "'loss_cls'", "]", ")", "\n", "onegt_box_loss", "=", "sum", "(", "one_gt_losses", "[", "'loss_bbox'", "]", ")", "\n", "assert", "onegt_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "onegt_box_loss", ".", "item", "(", ")", ">", "0", ",", "'box loss should be non-zero'", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_heads.test_bbox_head_loss": [[77, 172], ["mmdet.models.bbox_heads.BBoxHead", "torch.rand", "mmcv.Config", "test_heads.test_bbox_head_loss._dummy_bbox_sampling"], "function", ["None"], ["", "def", "test_bbox_head_loss", "(", ")", ":", "\n", "    ", "\"\"\"\n    Tests bbox head loss when truth is empty and non-empty\n    \"\"\"", "\n", "self", "=", "BBoxHead", "(", "in_channels", "=", "8", ",", "roi_feat_size", "=", "3", ")", "\n", "\n", "num_imgs", "=", "1", "\n", "feat", "=", "torch", ".", "rand", "(", "1", ",", "1", ",", "3", ",", "3", ")", "\n", "\n", "# Dummy proposals", "\n", "proposal_list", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "228.6326", ",", "153.8874", "]", "]", ")", ",", "\n", "]", "\n", "\n", "target_cfg", "=", "mmcv", ".", "Config", "(", "{", "'pos_weight'", ":", "1", "}", ")", "\n", "\n", "def", "_dummy_bbox_sampling", "(", "proposal_list", ",", "gt_bboxes", ",", "gt_labels", ")", ":", "\n", "        ", "\"\"\"\n        Create sample results that can be passed to BBoxHead.get_target\n        \"\"\"", "\n", "assign_config", "=", "{", "\n", "'type'", ":", "'MaxIoUAssigner'", ",", "\n", "'pos_iou_thr'", ":", "0.5", ",", "\n", "'neg_iou_thr'", ":", "0.5", ",", "\n", "'min_pos_iou'", ":", "0.5", ",", "\n", "'ignore_iof_thr'", ":", "-", "1", "\n", "}", "\n", "sampler_config", "=", "{", "\n", "'type'", ":", "'RandomSampler'", ",", "\n", "'num'", ":", "512", ",", "\n", "'pos_fraction'", ":", "0.25", ",", "\n", "'neg_pos_ub'", ":", "-", "1", ",", "\n", "'add_gt_as_proposals'", ":", "True", "\n", "}", "\n", "bbox_assigner", "=", "build_assigner", "(", "assign_config", ")", "\n", "bbox_sampler", "=", "build_sampler", "(", "sampler_config", ")", "\n", "gt_bboxes_ignore", "=", "[", "None", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "sampling_results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "            ", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_bboxes_ignore", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "\n", "assign_result", ",", "\n", "proposal_list", "[", "i", "]", ",", "\n", "gt_bboxes", "[", "i", "]", ",", "\n", "gt_labels", "[", "i", "]", ",", "\n", "feats", "=", "feat", ")", "\n", "sampling_results", ".", "append", "(", "sampling_result", ")", "\n", "", "return", "sampling_results", "\n", "\n", "# Test bbox loss when truth is empty", "\n", "", "gt_bboxes", "=", "[", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", "]", "\n", "\n", "sampling_results", "=", "_dummy_bbox_sampling", "(", "proposal_list", ",", "gt_bboxes", ",", "\n", "gt_labels", ")", "\n", "\n", "bbox_targets", "=", "self", ".", "get_target", "(", "sampling_results", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "target_cfg", ")", "\n", "labels", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", "=", "bbox_targets", "\n", "\n", "# Create dummy features \"extracted\" for each sampled bbox", "\n", "num_sampled", "=", "sum", "(", "len", "(", "res", ".", "bboxes", ")", "for", "res", "in", "sampling_results", ")", "\n", "dummy_feats", "=", "torch", ".", "rand", "(", "num_sampled", ",", "8", "*", "3", "*", "3", ")", "\n", "cls_scores", ",", "bbox_preds", "=", "self", ".", "forward", "(", "dummy_feats", ")", "\n", "\n", "losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "labels", ",", "label_weights", ",", "\n", "bbox_targets", ",", "bbox_weights", ")", "\n", "assert", "losses", ".", "get", "(", "'loss_cls'", ",", "0", ")", ">", "0", ",", "'cls-loss should be non-zero'", "\n", "assert", "losses", ".", "get", "(", "'loss_bbox'", ",", "0", ")", "==", "0", ",", "'empty gt loss should be zero'", "\n", "\n", "# Test bbox loss when truth is non-empty", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", "]", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", "]", "\n", "\n", "sampling_results", "=", "_dummy_bbox_sampling", "(", "proposal_list", ",", "gt_bboxes", ",", "\n", "gt_labels", ")", "\n", "\n", "bbox_targets", "=", "self", ".", "get_target", "(", "sampling_results", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "target_cfg", ")", "\n", "labels", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", "=", "bbox_targets", "\n", "\n", "# Create dummy features \"extracted\" for each sampled bbox", "\n", "num_sampled", "=", "sum", "(", "len", "(", "res", ".", "bboxes", ")", "for", "res", "in", "sampling_results", ")", "\n", "dummy_feats", "=", "torch", ".", "rand", "(", "num_sampled", ",", "8", "*", "3", "*", "3", ")", "\n", "cls_scores", ",", "bbox_preds", "=", "self", ".", "forward", "(", "dummy_feats", ")", "\n", "\n", "losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "labels", ",", "label_weights", ",", "\n", "bbox_targets", ",", "bbox_weights", ")", "\n", "assert", "losses", ".", "get", "(", "'loss_cls'", ",", "0", ")", ">", "0", ",", "'cls-loss should be non-zero'", "\n", "assert", "losses", ".", "get", "(", "'loss_bbox'", ",", "0", ")", ">", "0", ",", "'box-loss should be non-zero'", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_heads.test_refine_boxes": [[174, 297], ["mmdet.models.bbox_heads.BBoxHead", "print", "test_heads._demodata_refine_boxes", "mmdet.models.bbox_heads.BBoxHead.refine_bboxes", "all", "len", "sum", "print", "map"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_heads._demodata_refine_boxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox_heads.bbox_head.BBoxHead.refine_bboxes"], ["", "def", "test_refine_boxes", "(", ")", ":", "\n", "    ", "\"\"\"\n    Mirrors the doctest in\n    ``mmdet.models.bbox_heads.bbox_head.BBoxHead.refine_boxes`` but checks for\n    multiple values of n_roi / n_img.\n    \"\"\"", "\n", "self", "=", "BBoxHead", "(", "reg_class_agnostic", "=", "True", ")", "\n", "\n", "test_settings", "=", "[", "\n", "\n", "# Corner case: less rois than images", "\n", "{", "\n", "'n_roi'", ":", "2", ",", "\n", "'n_img'", ":", "4", ",", "\n", "'rng'", ":", "34285940", "\n", "}", ",", "\n", "\n", "# Corner case: no images", "\n", "{", "\n", "'n_roi'", ":", "0", ",", "\n", "'n_img'", ":", "0", ",", "\n", "'rng'", ":", "52925222", "\n", "}", ",", "\n", "\n", "# Corner cases: few images / rois", "\n", "{", "\n", "'n_roi'", ":", "1", ",", "\n", "'n_img'", ":", "1", ",", "\n", "'rng'", ":", "1200281", "\n", "}", ",", "\n", "{", "\n", "'n_roi'", ":", "2", ",", "\n", "'n_img'", ":", "1", ",", "\n", "'rng'", ":", "1200282", "\n", "}", ",", "\n", "{", "\n", "'n_roi'", ":", "2", ",", "\n", "'n_img'", ":", "2", ",", "\n", "'rng'", ":", "1200283", "\n", "}", ",", "\n", "{", "\n", "'n_roi'", ":", "1", ",", "\n", "'n_img'", ":", "2", ",", "\n", "'rng'", ":", "1200284", "\n", "}", ",", "\n", "\n", "# Corner case: no rois few images", "\n", "{", "\n", "'n_roi'", ":", "0", ",", "\n", "'n_img'", ":", "1", ",", "\n", "'rng'", ":", "23955860", "\n", "}", ",", "\n", "{", "\n", "'n_roi'", ":", "0", ",", "\n", "'n_img'", ":", "2", ",", "\n", "'rng'", ":", "25830516", "\n", "}", ",", "\n", "\n", "# Corner case: no rois many images", "\n", "{", "\n", "'n_roi'", ":", "0", ",", "\n", "'n_img'", ":", "10", ",", "\n", "'rng'", ":", "671346", "\n", "}", ",", "\n", "{", "\n", "'n_roi'", ":", "0", ",", "\n", "'n_img'", ":", "20", ",", "\n", "'rng'", ":", "699807", "\n", "}", ",", "\n", "\n", "# Corner case: similar num rois and images", "\n", "{", "\n", "'n_roi'", ":", "20", ",", "\n", "'n_img'", ":", "20", ",", "\n", "'rng'", ":", "1200238", "\n", "}", ",", "\n", "{", "\n", "'n_roi'", ":", "10", ",", "\n", "'n_img'", ":", "20", ",", "\n", "'rng'", ":", "1200238", "\n", "}", ",", "\n", "{", "\n", "'n_roi'", ":", "5", ",", "\n", "'n_img'", ":", "5", ",", "\n", "'rng'", ":", "1200238", "\n", "}", ",", "\n", "\n", "# ----------------------------------", "\n", "# Common case: more rois than images", "\n", "{", "\n", "'n_roi'", ":", "100", ",", "\n", "'n_img'", ":", "1", ",", "\n", "'rng'", ":", "337156", "\n", "}", ",", "\n", "{", "\n", "'n_roi'", ":", "150", ",", "\n", "'n_img'", ":", "2", ",", "\n", "'rng'", ":", "275898", "\n", "}", ",", "\n", "{", "\n", "'n_roi'", ":", "500", ",", "\n", "'n_img'", ":", "5", ",", "\n", "'rng'", ":", "4903221", "\n", "}", ",", "\n", "]", "\n", "\n", "for", "demokw", "in", "test_settings", ":", "\n", "        ", "try", ":", "\n", "            ", "n_roi", "=", "demokw", "[", "'n_roi'", "]", "\n", "n_img", "=", "demokw", "[", "'n_img'", "]", "\n", "rng", "=", "demokw", "[", "'rng'", "]", "\n", "\n", "print", "(", "'Test refine_boxes case: {!r}'", ".", "format", "(", "demokw", ")", ")", "\n", "tup", "=", "_demodata_refine_boxes", "(", "n_roi", ",", "n_img", ",", "rng", "=", "rng", ")", "\n", "rois", ",", "labels", ",", "bbox_preds", ",", "pos_is_gts", ",", "img_metas", "=", "tup", "\n", "bboxes_list", "=", "self", ".", "refine_bboxes", "(", "rois", ",", "labels", ",", "bbox_preds", ",", "\n", "pos_is_gts", ",", "img_metas", ")", "\n", "assert", "len", "(", "bboxes_list", ")", "==", "n_img", "\n", "assert", "sum", "(", "map", "(", "len", ",", "bboxes_list", ")", ")", "<=", "n_roi", "\n", "assert", "all", "(", "b", ".", "shape", "[", "1", "]", "==", "4", "for", "b", "in", "bboxes_list", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "print", "(", "'Test failed with demokw={!r}'", ".", "format", "(", "demokw", ")", ")", "\n", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_heads._demodata_refine_boxes": [[299, 341], ["ensure_rng", "random_boxes", "torch.cat", "ensure_rng.randint", "torch.from_numpy().long", "random_boxes", "kwarray.group_items", "torch.empty", "torch.empty", "ensure_rng.randint", "torch.from_numpy", "torch.from_numpy.numpy", "sum", "ensure_rng.randint().astype", "pytest.skip", "range", "img_ids[].float", "torch.from_numpy", "kwarray.group_items.get", "range", "torch.from_numpy().sort", "torch.from_numpy().long.numpy", "ensure_rng.randint", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.demodata.ensure_rng", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.demodata.random_boxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.bbox.demodata.random_boxes", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "", "", "def", "_demodata_refine_boxes", "(", "n_roi", ",", "n_img", ",", "rng", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Create random test data for the\n    ``mmdet.models.bbox_heads.bbox_head.BBoxHead.refine_boxes`` method\n    \"\"\"", "\n", "import", "numpy", "as", "np", "\n", "from", "mmdet", ".", "core", ".", "bbox", ".", "demodata", "import", "random_boxes", "\n", "from", "mmdet", ".", "core", ".", "bbox", ".", "demodata", "import", "ensure_rng", "\n", "try", ":", "\n", "        ", "import", "kwarray", "\n", "", "except", "ImportError", ":", "\n", "        ", "import", "pytest", "\n", "pytest", ".", "skip", "(", "'kwarray is required for this test'", ")", "\n", "", "scale", "=", "512", "\n", "rng", "=", "ensure_rng", "(", "rng", ")", "\n", "img_metas", "=", "[", "{", "'img_shape'", ":", "(", "scale", ",", "scale", ")", "}", "for", "_", "in", "range", "(", "n_img", ")", "]", "\n", "# Create rois in the expected format", "\n", "roi_boxes", "=", "random_boxes", "(", "n_roi", ",", "scale", "=", "scale", ",", "rng", "=", "rng", ")", "\n", "if", "n_img", "==", "0", ":", "\n", "        ", "assert", "n_roi", "==", "0", ",", "'cannot have any rois if there are no images'", "\n", "img_ids", "=", "torch", ".", "empty", "(", "(", "0", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "roi_boxes", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "img_ids", "=", "rng", ".", "randint", "(", "0", ",", "n_img", ",", "(", "n_roi", ",", ")", ")", "\n", "img_ids", "=", "torch", ".", "from_numpy", "(", "img_ids", ")", "\n", "", "rois", "=", "torch", ".", "cat", "(", "[", "img_ids", "[", ":", ",", "None", "]", ".", "float", "(", ")", ",", "roi_boxes", "]", ",", "dim", "=", "1", ")", "\n", "# Create other args", "\n", "labels", "=", "rng", ".", "randint", "(", "0", ",", "2", ",", "(", "n_roi", ",", ")", ")", "\n", "labels", "=", "torch", ".", "from_numpy", "(", "labels", ")", ".", "long", "(", ")", "\n", "bbox_preds", "=", "random_boxes", "(", "n_roi", ",", "scale", "=", "scale", ",", "rng", "=", "rng", ")", "\n", "# For each image, pretend random positive boxes are gts", "\n", "is_label_pos", "=", "(", "labels", ".", "numpy", "(", ")", ">", "0", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "lbl_per_img", "=", "kwarray", ".", "group_items", "(", "is_label_pos", ",", "img_ids", ".", "numpy", "(", ")", ")", "\n", "pos_per_img", "=", "[", "sum", "(", "lbl_per_img", ".", "get", "(", "gid", ",", "[", "]", ")", ")", "for", "gid", "in", "range", "(", "n_img", ")", "]", "\n", "# randomly generate with numpy then sort with torch", "\n", "_pos_is_gts", "=", "[", "\n", "rng", ".", "randint", "(", "0", ",", "2", ",", "(", "npos", ",", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "for", "npos", "in", "pos_per_img", "\n", "]", "\n", "pos_is_gts", "=", "[", "\n", "torch", ".", "from_numpy", "(", "p", ")", ".", "sort", "(", "descending", "=", "True", ")", "[", "0", "]", "for", "p", "in", "_pos_is_gts", "\n", "]", "\n", "return", "rois", ",", "labels", ",", "bbox_preds", ",", "pos_is_gts", ",", "img_metas", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_soft_nms.test_soft_nms_device_and_dtypes_cpu": [[11, 42], ["numpy.array", "np.array.astype", "mmdet.ops.nms.nms_wrapper.soft_nms", "torch.FloatTensor", "mmdet.ops.nms.nms_wrapper.soft_nms", "np.array.astype", "mmdet.ops.nms.nms_wrapper.soft_nms", "torch.DoubleTensor", "mmdet.ops.nms.nms_wrapper.soft_nms", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.soft_nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.soft_nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.soft_nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.soft_nms"], ["def", "test_soft_nms_device_and_dtypes_cpu", "(", ")", ":", "\n", "    ", "\"\"\"\n    CommandLine:\n        xdoctest -m tests/test_soft_nms.py test_soft_nms_device_and_dtypes_cpu\n    \"\"\"", "\n", "iou_thr", "=", "0.7", "\n", "base_dets", "=", "np", ".", "array", "(", "[", "[", "49.1", ",", "32.4", ",", "51.0", ",", "35.9", ",", "0.9", "]", ",", "\n", "[", "49.3", ",", "32.9", ",", "51.0", ",", "35.3", ",", "0.9", "]", ",", "\n", "[", "35.3", ",", "11.5", ",", "39.9", ",", "14.5", ",", "0.4", "]", ",", "\n", "[", "35.2", ",", "11.7", ",", "39.7", ",", "15.7", ",", "0.3", "]", "]", ")", "\n", "\n", "# CPU can handle float32 and float64", "\n", "dets", "=", "base_dets", ".", "astype", "(", "np", ".", "float32", ")", "\n", "new_dets", ",", "inds", "=", "soft_nms", "(", "dets", ",", "iou_thr", ")", "\n", "assert", "dets", ".", "dtype", "==", "new_dets", ".", "dtype", "\n", "assert", "len", "(", "inds", ")", "==", "len", "(", "new_dets", ")", "==", "4", "\n", "\n", "dets", "=", "torch", ".", "FloatTensor", "(", "base_dets", ")", "\n", "new_dets", ",", "inds", "=", "soft_nms", "(", "dets", ",", "iou_thr", ")", "\n", "assert", "dets", ".", "dtype", "==", "new_dets", ".", "dtype", "\n", "assert", "len", "(", "inds", ")", "==", "len", "(", "new_dets", ")", "==", "4", "\n", "\n", "dets", "=", "base_dets", ".", "astype", "(", "np", ".", "float64", ")", "\n", "new_dets", ",", "inds", "=", "soft_nms", "(", "dets", ",", "iou_thr", ")", "\n", "assert", "dets", ".", "dtype", "==", "new_dets", ".", "dtype", "\n", "assert", "len", "(", "inds", ")", "==", "len", "(", "new_dets", ")", "==", "4", "\n", "\n", "dets", "=", "torch", ".", "DoubleTensor", "(", "base_dets", ")", "\n", "new_dets", ",", "inds", "=", "soft_nms", "(", "dets", ",", "iou_thr", ")", "\n", "assert", "dets", ".", "dtype", "==", "new_dets", ".", "dtype", "\n", "assert", "len", "(", "inds", ")", "==", "len", "(", "new_dets", ")", "==", "4", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.AsyncTestCase._run_test_method": [[23, 28], ["method", "asyncio.iscoroutine", "test_async.AsyncTestCase.loop.run_until_complete", "asyncio.wait_for"], "methods", ["None"], ["def", "_run_test_method", "(", "self", ",", "method", ")", ":", "\n", "        ", "result", "=", "method", "(", ")", "\n", "if", "asyncio", ".", "iscoroutine", "(", "result", ")", ":", "\n", "            ", "self", ".", "loop", ".", "run_until_complete", "(", "\n", "asyncio", ".", "wait_for", "(", "result", ",", "timeout", "=", "self", ".", "TEST_TIMEOUT", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_async.MaskRCNNDetector.__init__": [[32, 44], ["mmdet.apis.init_detector"], "methods", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.inference.init_detector"], ["    ", "def", "__init__", "(", "self", ",", "\n", "model_config", ",", "\n", "checkpoint", "=", "None", ",", "\n", "streamqueue_size", "=", "3", ",", "\n", "device", "=", "'cuda:0'", ")", ":", "\n", "\n", "        ", "self", ".", "streamqueue_size", "=", "streamqueue_size", "\n", "self", ".", "device", "=", "device", "\n", "# build the model and load checkpoint", "\n", "self", ".", "model", "=", "init_detector", "(", "\n", "model_config", ",", "checkpoint", "=", "None", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "streamqueue", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_assigner.test_max_iou_assigner": [[17, 39], ["mmdet.core.MaxIoUAssigner", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "mmdet.core.MaxIoUAssigner.assign", "torch.LongTensor", "torch.all", "len", "len"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign"], ["def", "test_max_iou_assigner", "(", ")", ":", "\n", "    ", "self", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "2", ",", "3", "]", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ",", "gt_labels", "=", "gt_labels", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "4", "\n", "assert", "len", "(", "assign_result", ".", "labels", ")", "==", "4", "\n", "\n", "expected_gt_inds", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "0", ",", "2", ",", "0", "]", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", "==", "expected_gt_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_assigner.test_max_iou_assigner_with_ignore": [[41, 66], ["mmdet.core.MaxIoUAssigner", "torch.FloatTensor", "torch.FloatTensor", "torch.Tensor", "mmdet.core.MaxIoUAssigner.assign", "torch.LongTensor", "torch.all"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_max_iou_assigner_with_ignore", "(", ")", ":", "\n", "    ", "self", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", "ignore_iof_thr", "=", "0.5", ",", "\n", "ignore_wrt_candidates", "=", "False", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "gt_bboxes_ignore", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "30", ",", "30", ",", "40", ",", "40", "]", ",", "\n", "]", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "\n", "bboxes", ",", "gt_bboxes", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "\n", "expected_gt_inds", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "0", ",", "2", ",", "-", "1", "]", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", "==", "expected_gt_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_assigner.test_max_iou_assigner_with_empty_gt": [[68, 87], ["mmdet.core.MaxIoUAssigner", "torch.FloatTensor", "torch.FloatTensor", "mmdet.core.MaxIoUAssigner.assign", "torch.LongTensor", "torch.all"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_max_iou_assigner_with_empty_gt", "(", ")", ":", "\n", "    ", "\"\"\"\n    Test corner case where an image might have no true detections\n    \"\"\"", "\n", "self", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "]", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ")", "\n", "\n", "expected_gt_inds", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", "==", "expected_gt_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_assigner.test_max_iou_assigner_with_empty_boxes": [[89, 113], ["mmdet.core.MaxIoUAssigner", "torch.empty", "torch.FloatTensor", "torch.LongTensor", "mmdet.core.MaxIoUAssigner.assign", "mmdet.core.MaxIoUAssigner.assign", "len", "tuple", "len"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_max_iou_assigner_with_empty_boxes", "(", ")", ":", "\n", "    ", "\"\"\"\n    Test corner case where an network might predict no boxes\n    \"\"\"", "\n", "self", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "2", ",", "3", "]", ")", "\n", "\n", "# Test with gt_labels", "\n", "assign_result", "=", "self", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ",", "gt_labels", "=", "gt_labels", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "0", "\n", "assert", "tuple", "(", "assign_result", ".", "labels", ".", "shape", ")", "==", "(", "0", ",", ")", "\n", "\n", "# Test without gt_labels", "\n", "assign_result", "=", "self", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ",", "gt_labels", "=", "None", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "0", "\n", "assert", "assign_result", ".", "labels", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_assigner.test_max_iou_assigner_with_empty_boxes_and_ignore": [[115, 149], ["mmdet.core.MaxIoUAssigner", "torch.empty", "torch.FloatTensor", "torch.Tensor", "torch.LongTensor", "mmdet.core.MaxIoUAssigner.assign", "mmdet.core.MaxIoUAssigner.assign", "len", "tuple", "len"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_max_iou_assigner_with_empty_boxes_and_ignore", "(", ")", ":", "\n", "    ", "\"\"\"\n    Test corner case where an network might predict no boxes and ignore_iof_thr\n    is on\n    \"\"\"", "\n", "self", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", "ignore_iof_thr", "=", "0.5", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "gt_bboxes_ignore", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "30", ",", "30", ",", "40", ",", "40", "]", ",", "\n", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "2", ",", "3", "]", ")", "\n", "\n", "# Test with gt_labels", "\n", "assign_result", "=", "self", ".", "assign", "(", "\n", "bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "0", "\n", "assert", "tuple", "(", "assign_result", ".", "labels", ".", "shape", ")", "==", "(", "0", ",", ")", "\n", "\n", "# Test without gt_labels", "\n", "assign_result", "=", "self", ".", "assign", "(", "\n", "bboxes", ",", "gt_bboxes", ",", "gt_labels", "=", "None", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "0", "\n", "assert", "assign_result", ".", "labels", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_assigner.test_max_iou_assigner_with_empty_boxes_and_gt": [[151, 163], ["mmdet.core.MaxIoUAssigner", "torch.empty", "torch.empty", "mmdet.core.MaxIoUAssigner.assign", "len"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_max_iou_assigner_with_empty_boxes_and_gt", "(", ")", ":", "\n", "    ", "\"\"\"\n    Test corner case where an network might predict no boxes and no gt\n    \"\"\"", "\n", "self", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "\n", "gt_bboxes", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_assigner.test_point_assigner": [[165, 180], ["mmdet.core.bbox.assigners.PointAssigner", "torch.FloatTensor", "torch.FloatTensor", "mmdet.core.bbox.assigners.PointAssigner.assign", "torch.LongTensor", "torch.all"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_point_assigner", "(", ")", ":", "\n", "    ", "self", "=", "PointAssigner", "(", ")", "\n", "points", "=", "torch", ".", "FloatTensor", "(", "[", "# [x, y, stride]", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "10", ",", "10", ",", "1", "]", ",", "\n", "[", "5", ",", "5", ",", "1", "]", ",", "\n", "[", "32", ",", "32", ",", "1", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "points", ",", "gt_bboxes", ")", "\n", "expected_gt_inds", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "2", ",", "1", ",", "0", "]", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", "==", "expected_gt_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_assigner.test_point_assigner_with_empty_gt": [[182, 198], ["mmdet.core.bbox.assigners.PointAssigner", "torch.FloatTensor", "torch.FloatTensor", "mmdet.core.bbox.assigners.PointAssigner.assign", "torch.LongTensor", "torch.all"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_point_assigner_with_empty_gt", "(", ")", ":", "\n", "    ", "\"\"\"\n    Test corner case where an image might have no true detections\n    \"\"\"", "\n", "self", "=", "PointAssigner", "(", ")", "\n", "points", "=", "torch", ".", "FloatTensor", "(", "[", "# [x, y, stride]", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "10", ",", "10", ",", "1", "]", ",", "\n", "[", "5", ",", "5", ",", "1", "]", ",", "\n", "[", "32", ",", "32", ",", "1", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "]", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "points", ",", "gt_bboxes", ")", "\n", "\n", "expected_gt_inds", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", "==", "expected_gt_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_assigner.test_point_assigner_with_empty_boxes_and_gt": [[200, 209], ["mmdet.core.bbox.assigners.PointAssigner", "torch.FloatTensor", "torch.FloatTensor", "mmdet.core.bbox.assigners.PointAssigner.assign", "len"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_point_assigner_with_empty_boxes_and_gt", "(", ")", ":", "\n", "    ", "\"\"\"\n    Test corner case where an image might predict no points and no gt\n    \"\"\"", "\n", "self", "=", "PointAssigner", "(", ")", "\n", "points", "=", "torch", ".", "FloatTensor", "(", "[", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "]", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "points", ",", "gt_bboxes", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_assigner.test_approx_iou_assigner": [[211, 234], ["mmdet.core.bbox.assigners.ApproxMaxIoUAssigner", "torch.FloatTensor", "torch.FloatTensor", "mmdet.core.bbox.assigners.ApproxMaxIoUAssigner.assign", "torch.LongTensor", "torch.all"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_approx_iou_assigner", "(", ")", ":", "\n", "    ", "self", "=", "ApproxMaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "approxs_per_octave", "=", "1", "\n", "approxs", "=", "bboxes", "\n", "squares", "=", "bboxes", "\n", "assign_result", "=", "self", ".", "assign", "(", "approxs", ",", "squares", ",", "approxs_per_octave", ",", "\n", "gt_bboxes", ")", "\n", "\n", "expected_gt_inds", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "0", ",", "2", ",", "0", "]", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", "==", "expected_gt_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_assigner.test_approx_iou_assigner_with_empty_gt": [[236, 259], ["mmdet.core.bbox.assigners.ApproxMaxIoUAssigner", "torch.FloatTensor", "torch.FloatTensor", "mmdet.core.bbox.assigners.ApproxMaxIoUAssigner.assign", "torch.LongTensor", "torch.all"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_approx_iou_assigner_with_empty_gt", "(", ")", ":", "\n", "    ", "\"\"\"\n    Test corner case where an image might have no true detections\n    \"\"\"", "\n", "self", "=", "ApproxMaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "]", ")", "\n", "approxs_per_octave", "=", "1", "\n", "approxs", "=", "bboxes", "\n", "squares", "=", "bboxes", "\n", "assign_result", "=", "self", ".", "assign", "(", "approxs", ",", "squares", ",", "approxs_per_octave", ",", "\n", "gt_bboxes", ")", "\n", "\n", "expected_gt_inds", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", "==", "expected_gt_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_assigner.test_approx_iou_assigner_with_empty_boxes": [[261, 280], ["mmdet.core.bbox.assigners.ApproxMaxIoUAssigner", "torch.empty", "torch.FloatTensor", "mmdet.core.bbox.assigners.ApproxMaxIoUAssigner.assign", "len"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_approx_iou_assigner_with_empty_boxes", "(", ")", ":", "\n", "    ", "\"\"\"\n    Test corner case where an network might predict no boxes\n    \"\"\"", "\n", "self", "=", "ApproxMaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "approxs_per_octave", "=", "1", "\n", "approxs", "=", "bboxes", "\n", "squares", "=", "bboxes", "\n", "assign_result", "=", "self", ".", "assign", "(", "approxs", ",", "squares", ",", "approxs_per_octave", ",", "\n", "gt_bboxes", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_assigner.test_approx_iou_assigner_with_empty_boxes_and_gt": [[282, 298], ["mmdet.core.bbox.assigners.ApproxMaxIoUAssigner", "torch.empty", "torch.empty", "mmdet.core.bbox.assigners.ApproxMaxIoUAssigner.assign", "len"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_approx_iou_assigner_with_empty_boxes_and_gt", "(", ")", ":", "\n", "    ", "\"\"\"\n    Test corner case where an network might predict no boxes and no gt\n    \"\"\"", "\n", "self", "=", "ApproxMaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "\n", "gt_bboxes", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "\n", "approxs_per_octave", "=", "1", "\n", "approxs", "=", "bboxes", "\n", "squares", "=", "bboxes", "\n", "assign_result", "=", "self", ".", "assign", "(", "approxs", ",", "squares", ",", "approxs_per_octave", ",", "\n", "gt_bboxes", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_assigner.test_random_assign_result": [[300, 314], ["AssignResult.random", "AssignResult.random", "AssignResult.random", "AssignResult.random", "AssignResult.random", "AssignResult.random", "AssignResult.random", "AssignResult.random"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.random"], ["", "def", "test_random_assign_result", "(", ")", ":", "\n", "    ", "\"\"\"\n    Test random instantiation of assign result to catch corner cases\n    \"\"\"", "\n", "from", "mmdet", ".", "core", ".", "bbox", ".", "assigners", ".", "assign_result", "import", "AssignResult", "\n", "AssignResult", ".", "random", "(", ")", "\n", "\n", "AssignResult", ".", "random", "(", "num_gts", "=", "0", ",", "num_preds", "=", "0", ")", "\n", "AssignResult", ".", "random", "(", "num_gts", "=", "0", ",", "num_preds", "=", "3", ")", "\n", "AssignResult", ".", "random", "(", "num_gts", "=", "3", ",", "num_preds", "=", "3", ")", "\n", "AssignResult", ".", "random", "(", "num_gts", "=", "0", ",", "num_preds", "=", "3", ")", "\n", "AssignResult", ".", "random", "(", "num_gts", "=", "7", ",", "num_preds", "=", "7", ")", "\n", "AssignResult", ".", "random", "(", "num_gts", "=", "7", ",", "num_preds", "=", "64", ")", "\n", "AssignResult", ".", "random", "(", "num_gts", "=", "24", ",", "num_preds", "=", "3", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_sampler.test_random_sampler": [[7, 41], ["mmdet.core.MaxIoUAssigner", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.Tensor", "mmdet.core.MaxIoUAssigner.assign", "mmdet.core.bbox.samplers.RandomSampler", "mmdet.core.bbox.samplers.RandomSampler.sample", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample"], ["def", "test_random_sampler", "(", ")", ":", "\n", "    ", "assigner", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", "ignore_iof_thr", "=", "0.5", ",", "\n", "ignore_wrt_candidates", "=", "False", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "2", "]", ")", "\n", "gt_bboxes_ignore", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "30", ",", "30", ",", "40", ",", "40", "]", ",", "\n", "]", ")", "\n", "assign_result", "=", "assigner", ".", "assign", "(", "\n", "bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels", "=", "gt_labels", ")", "\n", "\n", "sampler", "=", "RandomSampler", "(", "\n", "num", "=", "10", ",", "pos_fraction", "=", "0.5", ",", "neg_pos_ub", "=", "-", "1", ",", "add_gt_as_proposals", "=", "True", ")", "\n", "\n", "sample_result", "=", "sampler", ".", "sample", "(", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "gt_labels", ")", "\n", "\n", "assert", "len", "(", "sample_result", ".", "pos_bboxes", ")", "==", "len", "(", "sample_result", ".", "pos_inds", ")", "\n", "assert", "len", "(", "sample_result", ".", "neg_bboxes", ")", "==", "len", "(", "sample_result", ".", "neg_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_sampler.test_random_sampler_empty_gt": [[43, 67], ["mmdet.core.MaxIoUAssigner", "torch.FloatTensor", "torch.empty", "torch.empty().long", "mmdet.core.MaxIoUAssigner.assign", "mmdet.core.bbox.samplers.RandomSampler", "mmdet.core.bbox.samplers.RandomSampler.sample", "len", "len", "len", "len", "torch.empty"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "def", "test_random_sampler_empty_gt", "(", ")", ":", "\n", "    ", "assigner", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", "ignore_iof_thr", "=", "0.5", ",", "\n", "ignore_wrt_candidates", "=", "False", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "empty", "(", "0", ",", "4", ")", "\n", "gt_labels", "=", "torch", ".", "empty", "(", "0", ",", ")", ".", "long", "(", ")", "\n", "assign_result", "=", "assigner", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ",", "gt_labels", "=", "gt_labels", ")", "\n", "\n", "sampler", "=", "RandomSampler", "(", "\n", "num", "=", "10", ",", "pos_fraction", "=", "0.5", ",", "neg_pos_ub", "=", "-", "1", ",", "add_gt_as_proposals", "=", "True", ")", "\n", "\n", "sample_result", "=", "sampler", ".", "sample", "(", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "gt_labels", ")", "\n", "\n", "assert", "len", "(", "sample_result", ".", "pos_bboxes", ")", "==", "len", "(", "sample_result", ".", "pos_inds", ")", "\n", "assert", "len", "(", "sample_result", ".", "neg_bboxes", ")", "==", "len", "(", "sample_result", ".", "neg_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_sampler.test_random_sampler_empty_pred": [[69, 91], ["mmdet.core.MaxIoUAssigner", "torch.empty", "torch.FloatTensor", "torch.LongTensor", "mmdet.core.MaxIoUAssigner.assign", "mmdet.core.bbox.samplers.RandomSampler", "mmdet.core.bbox.samplers.RandomSampler.sample", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "def", "test_random_sampler_empty_pred", "(", ")", ":", "\n", "    ", "assigner", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", "ignore_iof_thr", "=", "0.5", ",", "\n", "ignore_wrt_candidates", "=", "False", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "empty", "(", "0", ",", "4", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "2", "]", ")", "\n", "assign_result", "=", "assigner", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ",", "gt_labels", "=", "gt_labels", ")", "\n", "\n", "sampler", "=", "RandomSampler", "(", "\n", "num", "=", "10", ",", "pos_fraction", "=", "0.5", ",", "neg_pos_ub", "=", "-", "1", ",", "add_gt_as_proposals", "=", "True", ")", "\n", "\n", "sample_result", "=", "sampler", ".", "sample", "(", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "gt_labels", ")", "\n", "\n", "assert", "len", "(", "sample_result", ".", "pos_bboxes", ")", "==", "len", "(", "sample_result", ".", "pos_inds", ")", "\n", "assert", "len", "(", "sample_result", ".", "neg_bboxes", ")", "==", "len", "(", "sample_result", ".", "neg_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_sampler._context_for_ohem": [[93, 110], ["_get_detector_cfg", "build_detector", "sys.path.insert", "dirname"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._get_detector_cfg", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_detector"], ["", "def", "_context_for_ohem", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "from", "test_forward", "import", "_get_detector_cfg", "\n", "", "except", "ImportError", ":", "\n", "# Hack: grab testing utils from test_forward to make a context for ohem", "\n", "        ", "import", "sys", "\n", "from", "os", ".", "path", "import", "dirname", "\n", "sys", ".", "path", ".", "insert", "(", "0", ",", "dirname", "(", "__file__", ")", ")", "\n", "from", "test_forward", "import", "_get_detector_cfg", "\n", "", "model", ",", "train_cfg", ",", "test_cfg", "=", "_get_detector_cfg", "(", "\n", "'faster_rcnn_ohem_r50_fpn_1x.py'", ")", "\n", "model", "[", "'pretrained'", "]", "=", "None", "\n", "# torchvision roi align supports CPU", "\n", "model", "[", "'bbox_roi_extractor'", "]", "[", "'roi_layer'", "]", "[", "'use_torchvision'", "]", "=", "True", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "context", "=", "build_detector", "(", "model", ",", "train_cfg", "=", "train_cfg", ",", "test_cfg", "=", "test_cfg", ")", "\n", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_sampler.test_ohem_sampler": [[112, 155], ["mmdet.core.MaxIoUAssigner", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.Tensor", "mmdet.core.MaxIoUAssigner.assign", "test_sampler._context_for_ohem", "mmdet.core.bbox.samplers.OHEMSampler", "mmdet.core.bbox.samplers.OHEMSampler.sample", "torch.rand", "len", "len", "len", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_sampler._context_for_ohem", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "def", "test_ohem_sampler", "(", ")", ":", "\n", "\n", "    ", "assigner", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", "ignore_iof_thr", "=", "0.5", ",", "\n", "ignore_wrt_candidates", "=", "False", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "2", "]", ")", "\n", "gt_bboxes_ignore", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "30", ",", "30", ",", "40", ",", "40", "]", ",", "\n", "]", ")", "\n", "assign_result", "=", "assigner", ".", "assign", "(", "\n", "bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels", "=", "gt_labels", ")", "\n", "\n", "context", "=", "_context_for_ohem", "(", ")", "\n", "\n", "sampler", "=", "OHEMSampler", "(", "\n", "num", "=", "10", ",", "\n", "pos_fraction", "=", "0.5", ",", "\n", "context", "=", "context", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "True", ")", "\n", "\n", "feats", "=", "[", "torch", ".", "rand", "(", "1", ",", "256", ",", "int", "(", "2", "**", "i", ")", ",", "int", "(", "2", "**", "i", ")", ")", "for", "i", "in", "[", "6", ",", "5", ",", "4", ",", "3", ",", "2", "]", "]", "\n", "sample_result", "=", "sampler", ".", "sample", "(", "\n", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "gt_labels", ",", "feats", "=", "feats", ")", "\n", "\n", "assert", "len", "(", "sample_result", ".", "pos_bboxes", ")", "==", "len", "(", "sample_result", ".", "pos_inds", ")", "\n", "assert", "len", "(", "sample_result", ".", "neg_bboxes", ")", "==", "len", "(", "sample_result", ".", "neg_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_sampler.test_ohem_sampler_empty_gt": [[157, 196], ["mmdet.core.MaxIoUAssigner", "torch.FloatTensor", "torch.empty", "torch.LongTensor", "torch.Tensor", "mmdet.core.MaxIoUAssigner.assign", "test_sampler._context_for_ohem", "mmdet.core.bbox.samplers.OHEMSampler", "mmdet.core.bbox.samplers.OHEMSampler.sample", "torch.rand", "len", "len", "len", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_sampler._context_for_ohem", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "def", "test_ohem_sampler_empty_gt", "(", ")", ":", "\n", "\n", "    ", "assigner", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", "ignore_iof_thr", "=", "0.5", ",", "\n", "ignore_wrt_candidates", "=", "False", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "empty", "(", "0", ",", "4", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "]", ")", "\n", "gt_bboxes_ignore", "=", "torch", ".", "Tensor", "(", "[", "]", ")", "\n", "assign_result", "=", "assigner", ".", "assign", "(", "\n", "bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels", "=", "gt_labels", ")", "\n", "\n", "context", "=", "_context_for_ohem", "(", ")", "\n", "\n", "sampler", "=", "OHEMSampler", "(", "\n", "num", "=", "10", ",", "\n", "pos_fraction", "=", "0.5", ",", "\n", "context", "=", "context", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "True", ")", "\n", "\n", "feats", "=", "[", "torch", ".", "rand", "(", "1", ",", "256", ",", "int", "(", "2", "**", "i", ")", ",", "int", "(", "2", "**", "i", ")", ")", "for", "i", "in", "[", "6", ",", "5", ",", "4", ",", "3", ",", "2", "]", "]", "\n", "\n", "sample_result", "=", "sampler", ".", "sample", "(", "\n", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "gt_labels", ",", "feats", "=", "feats", ")", "\n", "\n", "assert", "len", "(", "sample_result", ".", "pos_bboxes", ")", "==", "len", "(", "sample_result", ".", "pos_inds", ")", "\n", "assert", "len", "(", "sample_result", ".", "neg_bboxes", ")", "==", "len", "(", "sample_result", ".", "neg_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_sampler.test_ohem_sampler_empty_pred": [[198, 236], ["mmdet.core.MaxIoUAssigner", "torch.empty", "torch.FloatTensor", "torch.LongTensor", "torch.Tensor", "mmdet.core.MaxIoUAssigner.assign", "test_sampler._context_for_ohem", "mmdet.core.bbox.samplers.OHEMSampler", "mmdet.core.bbox.samplers.OHEMSampler.sample", "torch.rand", "len", "len", "len", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_sampler._context_for_ohem", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "def", "test_ohem_sampler_empty_pred", "(", ")", ":", "\n", "    ", "assigner", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", "ignore_iof_thr", "=", "0.5", ",", "\n", "ignore_wrt_candidates", "=", "False", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "empty", "(", "0", ",", "4", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "2", ",", "2", ",", "3", "]", ")", "\n", "gt_bboxes_ignore", "=", "torch", ".", "Tensor", "(", "[", "]", ")", "\n", "assign_result", "=", "assigner", ".", "assign", "(", "\n", "bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels", "=", "gt_labels", ")", "\n", "\n", "context", "=", "_context_for_ohem", "(", ")", "\n", "\n", "sampler", "=", "OHEMSampler", "(", "\n", "num", "=", "10", ",", "\n", "pos_fraction", "=", "0.5", ",", "\n", "context", "=", "context", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "True", ")", "\n", "\n", "feats", "=", "[", "torch", ".", "rand", "(", "1", ",", "256", ",", "int", "(", "2", "**", "i", ")", ",", "int", "(", "2", "**", "i", ")", ")", "for", "i", "in", "[", "6", ",", "5", ",", "4", ",", "3", ",", "2", "]", "]", "\n", "\n", "sample_result", "=", "sampler", ".", "sample", "(", "\n", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "gt_labels", ",", "feats", "=", "feats", ")", "\n", "\n", "assert", "len", "(", "sample_result", ".", "pos_bboxes", ")", "==", "len", "(", "sample_result", ".", "pos_inds", ")", "\n", "assert", "len", "(", "sample_result", ".", "neg_bboxes", ")", "==", "len", "(", "sample_result", ".", "neg_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_sampler.test_random_sample_result": [[238, 250], ["SamplingResult.random", "SamplingResult.random", "SamplingResult.random", "SamplingResult.random", "SamplingResult.random", "SamplingResult.random", "SamplingResult.random", "range", "SamplingResult.random"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.assigners.assign_result.AssignResult.random"], ["", "def", "test_random_sample_result", "(", ")", ":", "\n", "    ", "from", "mmdet", ".", "core", ".", "bbox", ".", "samplers", ".", "sampling_result", "import", "SamplingResult", "\n", "SamplingResult", ".", "random", "(", "num_gts", "=", "0", ",", "num_preds", "=", "0", ")", "\n", "SamplingResult", ".", "random", "(", "num_gts", "=", "0", ",", "num_preds", "=", "3", ")", "\n", "SamplingResult", ".", "random", "(", "num_gts", "=", "3", ",", "num_preds", "=", "3", ")", "\n", "SamplingResult", ".", "random", "(", "num_gts", "=", "0", ",", "num_preds", "=", "3", ")", "\n", "SamplingResult", ".", "random", "(", "num_gts", "=", "7", ",", "num_preds", "=", "7", ")", "\n", "SamplingResult", ".", "random", "(", "num_gts", "=", "7", ",", "num_preds", "=", "64", ")", "\n", "SamplingResult", ".", "random", "(", "num_gts", "=", "24", ",", "num_preds", "=", "3", ")", "\n", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "SamplingResult", ".", "random", "(", "rng", "=", "i", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_config._get_config_directory": [[4, 17], ["os.path.join", "os.path.dirname", "os.path.exists", "Exception", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["def", "_get_config_directory", "(", ")", ":", "\n", "    ", "\"\"\" Find the predefined detector config directory \"\"\"", "\n", "try", ":", "\n", "# Assume we are running in the source mmdetection repo", "\n", "        ", "repo_dpath", "=", "dirname", "(", "dirname", "(", "__file__", ")", ")", "\n", "", "except", "NameError", ":", "\n", "# For IPython development when this __file__ is not defined", "\n", "        ", "import", "mmdet", "\n", "repo_dpath", "=", "dirname", "(", "dirname", "(", "mmdet", ".", "__file__", ")", ")", "\n", "", "config_dpath", "=", "join", "(", "repo_dpath", ",", "'configs'", ")", "\n", "if", "not", "exists", "(", "config_dpath", ")", ":", "\n", "        ", "raise", "Exception", "(", "'Cannot find config path'", ")", "\n", "", "return", "config_dpath", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_config.test_config_build_detector": [[19, 173], ["test_config._get_config_directory", "print", "print", "os.path.join", "import_module_from_path", "print", "build_detector", "len"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._get_config_directory", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_detector"], ["", "def", "test_config_build_detector", "(", ")", ":", "\n", "    ", "\"\"\"\n    Test that all detection models defined in the configs can be initialized.\n    \"\"\"", "\n", "from", "xdoctest", ".", "utils", "import", "import_module_from_path", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "\n", "config_dpath", "=", "_get_config_directory", "(", ")", "\n", "print", "(", "'Found config_dpath = {!r}'", ".", "format", "(", "config_dpath", ")", ")", "\n", "\n", "# import glob", "\n", "# config_fpaths = list(glob.glob(join(config_dpath, '**', '*.py')))", "\n", "# config_names = [relpath(p, config_dpath) for p in config_fpaths]", "\n", "\n", "# Only tests a representative subset of configurations", "\n", "\n", "config_names", "=", "[", "\n", "# 'dcn/faster_rcnn_dconv_c3-c5_r50_fpn_1x.py',", "\n", "# 'dcn/cascade_mask_rcnn_dconv_c3-c5_r50_fpn_1x.py',", "\n", "# 'dcn/faster_rcnn_dpool_r50_fpn_1x.py',", "\n", "'dcn/mask_rcnn_dconv_c3-c5_r50_fpn_1x.py'", ",", "\n", "# 'dcn/faster_rcnn_dconv_c3-c5_x101_32x4d_fpn_1x.py',", "\n", "# 'dcn/cascade_rcnn_dconv_c3-c5_r50_fpn_1x.py',", "\n", "# 'dcn/faster_rcnn_mdpool_r50_fpn_1x.py',", "\n", "# 'dcn/faster_rcnn_mdconv_c3-c5_group4_r50_fpn_1x.py',", "\n", "# 'dcn/faster_rcnn_mdconv_c3-c5_r50_fpn_1x.py',", "\n", "# ---", "\n", "# 'htc/htc_x101_32x4d_fpn_20e_16gpu.py',", "\n", "'htc/htc_without_semantic_r50_fpn_1x.py'", ",", "\n", "# 'htc/htc_dconv_c3-c5_mstrain_400_1400_x101_64x4d_fpn_20e.py',", "\n", "# 'htc/htc_x101_64x4d_fpn_20e_16gpu.py',", "\n", "# 'htc/htc_r50_fpn_1x.py',", "\n", "# 'htc/htc_r101_fpn_20e.py',", "\n", "# 'htc/htc_r50_fpn_20e.py',", "\n", "# ---", "\n", "'cityscapes/mask_rcnn_r50_fpn_1x_cityscapes.py'", ",", "\n", "# 'cityscapes/faster_rcnn_r50_fpn_1x_cityscapes.py',", "\n", "# ---", "\n", "# 'scratch/scratch_faster_rcnn_r50_fpn_gn_6x.py',", "\n", "# 'scratch/scratch_mask_rcnn_r50_fpn_gn_6x.py',", "\n", "# ---", "\n", "# 'grid_rcnn/grid_rcnn_gn_head_x101_32x4d_fpn_2x.py',", "\n", "'grid_rcnn/grid_rcnn_gn_head_r50_fpn_2x.py'", ",", "\n", "# ---", "\n", "'double_heads/dh_faster_rcnn_r50_fpn_1x.py'", ",", "\n", "# ---", "\n", "'empirical_attention/faster_rcnn_r50_fpn_attention_0010_dcn_1x.py'", ",", "\n", "# 'empirical_attention/faster_rcnn_r50_fpn_attention_1111_1x.py',", "\n", "# 'empirical_attention/faster_rcnn_r50_fpn_attention_0010_1x.py',", "\n", "# 'empirical_attention/faster_rcnn_r50_fpn_attention_1111_dcn_1x.py',", "\n", "# ---", "\n", "# 'ms_rcnn/ms_rcnn_r101_caffe_fpn_1x.py',", "\n", "# 'ms_rcnn/ms_rcnn_x101_64x4d_fpn_1x.py',", "\n", "# 'ms_rcnn/ms_rcnn_r50_caffe_fpn_1x.py',", "\n", "# ---", "\n", "# 'guided_anchoring/ga_faster_x101_32x4d_fpn_1x.py',", "\n", "# 'guided_anchoring/ga_rpn_x101_32x4d_fpn_1x.py',", "\n", "# 'guided_anchoring/ga_retinanet_r50_caffe_fpn_1x.py',", "\n", "# 'guided_anchoring/ga_fast_r50_caffe_fpn_1x.py',", "\n", "# 'guided_anchoring/ga_retinanet_x101_32x4d_fpn_1x.py',", "\n", "# 'guided_anchoring/ga_rpn_r101_caffe_rpn_1x.py',", "\n", "# 'guided_anchoring/ga_faster_r50_caffe_fpn_1x.py',", "\n", "'guided_anchoring/ga_rpn_r50_caffe_fpn_1x.py'", ",", "\n", "# ---", "\n", "'foveabox/fovea_r50_fpn_4gpu_1x.py'", ",", "\n", "# 'foveabox/fovea_align_gn_ms_r101_fpn_4gpu_2x.py',", "\n", "# 'foveabox/fovea_align_gn_r50_fpn_4gpu_2x.py',", "\n", "# 'foveabox/fovea_align_gn_r101_fpn_4gpu_2x.py',", "\n", "'foveabox/fovea_align_gn_ms_r50_fpn_4gpu_2x.py'", ",", "\n", "# ---", "\n", "# 'hrnet/cascade_rcnn_hrnetv2p_w32_20e.py',", "\n", "# 'hrnet/mask_rcnn_hrnetv2p_w32_1x.py',", "\n", "# 'hrnet/cascade_mask_rcnn_hrnetv2p_w32_20e.py',", "\n", "# 'hrnet/htc_hrnetv2p_w32_20e.py',", "\n", "# 'hrnet/faster_rcnn_hrnetv2p_w18_1x.py',", "\n", "# 'hrnet/mask_rcnn_hrnetv2p_w18_1x.py',", "\n", "# 'hrnet/faster_rcnn_hrnetv2p_w32_1x.py',", "\n", "# 'hrnet/faster_rcnn_hrnetv2p_w40_1x.py',", "\n", "'hrnet/fcos_hrnetv2p_w32_gn_1x_4gpu.py'", ",", "\n", "# ---", "\n", "# 'gn+ws/faster_rcnn_r50_fpn_gn_ws_1x.py',", "\n", "# 'gn+ws/mask_rcnn_x101_32x4d_fpn_gn_ws_2x.py',", "\n", "'gn+ws/mask_rcnn_r50_fpn_gn_ws_2x.py'", ",", "\n", "# 'gn+ws/mask_rcnn_r50_fpn_gn_ws_20_23_24e.py',", "\n", "# ---", "\n", "# 'wider_face/ssd300_wider_face.py',", "\n", "# ---", "\n", "'pascal_voc/ssd300_voc.py'", ",", "\n", "'pascal_voc/faster_rcnn_r50_fpn_1x_voc0712.py'", ",", "\n", "'pascal_voc/ssd512_voc.py'", ",", "\n", "# ---", "\n", "# 'gcnet/mask_rcnn_r4_gcb_c3-c5_r50_fpn_syncbn_1x.py',", "\n", "# 'gcnet/mask_rcnn_r16_gcb_c3-c5_r50_fpn_syncbn_1x.py',", "\n", "# 'gcnet/mask_rcnn_r4_gcb_c3-c5_r50_fpn_1x.py',", "\n", "# 'gcnet/mask_rcnn_r16_gcb_c3-c5_r50_fpn_1x.py',", "\n", "'gcnet/mask_rcnn_r50_fpn_sbn_1x.py'", ",", "\n", "# ---", "\n", "'gn/mask_rcnn_r50_fpn_gn_contrib_2x.py'", ",", "\n", "# 'gn/mask_rcnn_r50_fpn_gn_2x.py',", "\n", "# 'gn/mask_rcnn_r101_fpn_gn_2x.py',", "\n", "# ---", "\n", "# 'reppoints/reppoints_moment_x101_dcn_fpn_2x.py',", "\n", "'reppoints/reppoints_moment_r50_fpn_2x.py'", ",", "\n", "# 'reppoints/reppoints_moment_x101_dcn_fpn_2x_mt.py',", "\n", "'reppoints/reppoints_partial_minmax_r50_fpn_1x.py'", ",", "\n", "'reppoints/bbox_r50_grid_center_fpn_1x.py'", ",", "\n", "# 'reppoints/reppoints_moment_r101_dcn_fpn_2x.py',", "\n", "# 'reppoints/reppoints_moment_r101_fpn_2x_mt.py',", "\n", "# 'reppoints/reppoints_moment_r50_fpn_2x_mt.py',", "\n", "'reppoints/reppoints_minmax_r50_fpn_1x.py'", ",", "\n", "# 'reppoints/reppoints_moment_r50_fpn_1x.py',", "\n", "# 'reppoints/reppoints_moment_r101_fpn_2x.py',", "\n", "# 'reppoints/reppoints_moment_r101_dcn_fpn_2x_mt.py',", "\n", "'reppoints/bbox_r50_grid_fpn_1x.py'", ",", "\n", "# ---", "\n", "# 'fcos/fcos_mstrain_640_800_x101_64x4d_fpn_gn_2x.py',", "\n", "# 'fcos/fcos_mstrain_640_800_r101_caffe_fpn_gn_2x_4gpu.py',", "\n", "'fcos/fcos_r50_caffe_fpn_gn_1x_4gpu.py'", ",", "\n", "# ---", "\n", "'albu_example/mask_rcnn_r50_fpn_1x.py'", ",", "\n", "# ---", "\n", "'libra_rcnn/libra_faster_rcnn_r50_fpn_1x.py'", ",", "\n", "# 'libra_rcnn/libra_retinanet_r50_fpn_1x.py',", "\n", "# 'libra_rcnn/libra_faster_rcnn_r101_fpn_1x.py',", "\n", "# 'libra_rcnn/libra_faster_rcnn_x101_64x4d_fpn_1x.py',", "\n", "# 'libra_rcnn/libra_fast_rcnn_r50_fpn_1x.py',", "\n", "# ---", "\n", "# 'ghm/retinanet_ghm_r50_fpn_1x.py',", "\n", "# ---", "\n", "# 'fp16/retinanet_r50_fpn_fp16_1x.py',", "\n", "'fp16/mask_rcnn_r50_fpn_fp16_1x.py'", ",", "\n", "'fp16/faster_rcnn_r50_fpn_fp16_1x.py'", "\n", "]", "\n", "\n", "print", "(", "'Using {} config files'", ".", "format", "(", "len", "(", "config_names", ")", ")", ")", "\n", "\n", "for", "config_fname", "in", "config_names", ":", "\n", "        ", "config_fpath", "=", "join", "(", "config_dpath", ",", "config_fname", ")", "\n", "config_mod", "=", "import_module_from_path", "(", "config_fpath", ")", "\n", "\n", "config_mod", ".", "model", "\n", "config_mod", ".", "train_cfg", "\n", "config_mod", ".", "test_cfg", "\n", "print", "(", "'Building detector, config_fpath = {!r}'", ".", "format", "(", "config_fpath", ")", ")", "\n", "\n", "# Remove pretrained keys to allow for testing in an offline environment", "\n", "if", "'pretrained'", "in", "config_mod", ".", "model", ":", "\n", "            ", "config_mod", ".", "model", "[", "'pretrained'", "]", "=", "None", "\n", "\n", "", "detector", "=", "build_detector", "(", "\n", "config_mod", ".", "model", ",", "\n", "train_cfg", "=", "config_mod", ".", "train_cfg", ",", "\n", "test_cfg", "=", "config_mod", ".", "test_cfg", ")", "\n", "assert", "detector", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_config.test_config_data_pipeline": [[175, 280], ["test_config._get_config_directory", "print", "print", "os.path.join", "import_module_from_path", "import_module_from_path.train_pipeline.pop", "import_module_from_path.train_pipeline.pop", "import_module_from_path.test_pipeline.pop", "Compose", "Compose", "print", "print", "np.random.randint", "config_mod.train_pipeline.pop.get", "dict", "Compose.", "print", "dict", "Compose.", "print", "dict", "Compose.", "print", "dict", "Compose.", "len", "img.astype.astype", "np.array", "np.array", "np.array", "np.array", "np.zeros", "np.array", "np.zeros", "np.array"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._get_config_directory", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.registry.Registry.get"], ["", "", "def", "test_config_data_pipeline", "(", ")", ":", "\n", "    ", "\"\"\"\n    Test whether the data pipeline is valid and can process corner cases.\n    CommandLine:\n        xdoctest -m tests/test_config.py test_config_build_data_pipeline\n    \"\"\"", "\n", "from", "xdoctest", ".", "utils", "import", "import_module_from_path", "\n", "from", "mmdet", ".", "datasets", ".", "pipelines", "import", "Compose", "\n", "import", "numpy", "as", "np", "\n", "\n", "config_dpath", "=", "_get_config_directory", "(", ")", "\n", "print", "(", "'Found config_dpath = {!r}'", ".", "format", "(", "config_dpath", ")", ")", "\n", "\n", "# Only tests a representative subset of configurations", "\n", "# TODO: test pipelines using Albu, current Albu throw None given empty GT", "\n", "config_names", "=", "[", "\n", "'wider_face/ssd300_wider_face.py'", ",", "\n", "'pascal_voc/ssd300_voc.py'", ",", "\n", "'pascal_voc/ssd512_voc.py'", ",", "\n", "# 'albu_example/mask_rcnn_r50_fpn_1x.py',", "\n", "'fp16/mask_rcnn_r50_fpn_fp16_1x.py'", ",", "\n", "]", "\n", "\n", "print", "(", "'Using {} config files'", ".", "format", "(", "len", "(", "config_names", ")", ")", ")", "\n", "\n", "for", "config_fname", "in", "config_names", ":", "\n", "        ", "config_fpath", "=", "join", "(", "config_dpath", ",", "config_fname", ")", "\n", "config_mod", "=", "import_module_from_path", "(", "config_fpath", ")", "\n", "\n", "# remove loading pipeline", "\n", "loading_pipeline", "=", "config_mod", ".", "train_pipeline", ".", "pop", "(", "0", ")", "\n", "config_mod", ".", "train_pipeline", ".", "pop", "(", "0", ")", "\n", "config_mod", ".", "test_pipeline", ".", "pop", "(", "0", ")", "\n", "\n", "train_pipeline", "=", "Compose", "(", "config_mod", ".", "train_pipeline", ")", "\n", "test_pipeline", "=", "Compose", "(", "config_mod", ".", "test_pipeline", ")", "\n", "\n", "print", "(", "\n", "'Building data pipeline, config_fpath = {!r}'", ".", "format", "(", "config_fpath", ")", ")", "\n", "\n", "print", "(", "'Test training data pipeline: \\n{!r}'", ".", "format", "(", "train_pipeline", ")", ")", "\n", "img", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "255", ",", "size", "=", "(", "888", ",", "666", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "loading_pipeline", ".", "get", "(", "'to_float32'", ",", "False", ")", ":", "\n", "            ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "results", "=", "dict", "(", "\n", "filename", "=", "'test_img.png'", ",", "\n", "img", "=", "img", ",", "\n", "img_shape", "=", "img", ".", "shape", ",", "\n", "ori_shape", "=", "img", ".", "shape", ",", "\n", "gt_bboxes", "=", "np", ".", "array", "(", "[", "[", "35.2", ",", "11.7", ",", "39.7", ",", "15.7", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "gt_labels", "=", "np", ".", "array", "(", "[", "1", "]", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "gt_masks", "=", "[", "(", "img", "[", "...", ",", "0", "]", "==", "233", ")", ".", "astype", "(", "np", ".", "uint8", ")", "]", ",", "\n", ")", "\n", "results", "[", "'bbox_fields'", "]", "=", "[", "'gt_bboxes'", "]", "\n", "results", "[", "'mask_fields'", "]", "=", "[", "'gt_masks'", "]", "\n", "output_results", "=", "train_pipeline", "(", "results", ")", "\n", "assert", "output_results", "is", "not", "None", "\n", "\n", "print", "(", "'Test testing data pipeline: \\n{!r}'", ".", "format", "(", "test_pipeline", ")", ")", "\n", "results", "=", "dict", "(", "\n", "filename", "=", "'test_img.png'", ",", "\n", "img", "=", "img", ",", "\n", "img_shape", "=", "img", ".", "shape", ",", "\n", "ori_shape", "=", "img", ".", "shape", ",", "\n", "gt_bboxes", "=", "np", ".", "array", "(", "[", "[", "35.2", ",", "11.7", ",", "39.7", ",", "15.7", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "gt_labels", "=", "np", ".", "array", "(", "[", "1", "]", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "gt_masks", "=", "[", "(", "img", "[", "...", ",", "0", "]", "==", "233", ")", ".", "astype", "(", "np", ".", "uint8", ")", "]", ",", "\n", ")", "\n", "results", "[", "'bbox_fields'", "]", "=", "[", "'gt_bboxes'", "]", "\n", "results", "[", "'mask_fields'", "]", "=", "[", "'gt_masks'", "]", "\n", "output_results", "=", "test_pipeline", "(", "results", ")", "\n", "assert", "output_results", "is", "not", "None", "\n", "\n", "# test empty GT", "\n", "print", "(", "'Test empty GT with training data pipeline: \\n{!r}'", ".", "format", "(", "\n", "train_pipeline", ")", ")", "\n", "results", "=", "dict", "(", "\n", "filename", "=", "'test_img.png'", ",", "\n", "img", "=", "img", ",", "\n", "img_shape", "=", "img", ".", "shape", ",", "\n", "ori_shape", "=", "img", ".", "shape", ",", "\n", "gt_bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "gt_labels", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "gt_masks", "=", "[", "]", ",", "\n", ")", "\n", "results", "[", "'bbox_fields'", "]", "=", "[", "'gt_bboxes'", "]", "\n", "results", "[", "'mask_fields'", "]", "=", "[", "'gt_masks'", "]", "\n", "output_results", "=", "train_pipeline", "(", "results", ")", "\n", "assert", "output_results", "is", "not", "None", "\n", "\n", "print", "(", "'Test empty GT with testing data pipeline: \\n{!r}'", ".", "format", "(", "\n", "test_pipeline", ")", ")", "\n", "results", "=", "dict", "(", "\n", "filename", "=", "'test_img.png'", ",", "\n", "img", "=", "img", ",", "\n", "img_shape", "=", "img", ".", "shape", ",", "\n", "ori_shape", "=", "img", ".", "shape", ",", "\n", "gt_bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "gt_labels", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "gt_masks", "=", "[", "]", ",", "\n", ")", "\n", "results", "[", "'bbox_fields'", "]", "=", "[", "'gt_bboxes'", "]", "\n", "results", "[", "'mask_fields'", "]", "=", "[", "'gt_masks'", "]", "\n", "output_results", "=", "test_pipeline", "(", "results", ")", "\n", "assert", "output_results", "is", "not", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_nms.test_nms_device_and_dtypes_cpu": [[11, 42], ["numpy.array", "np.array.astype", "mmdet.ops.nms.nms_wrapper.nms", "torch.FloatTensor", "mmdet.ops.nms.nms_wrapper.nms", "np.array.astype", "mmdet.ops.nms.nms_wrapper.nms", "torch.DoubleTensor", "mmdet.ops.nms.nms_wrapper.nms", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.nms"], ["def", "test_nms_device_and_dtypes_cpu", "(", ")", ":", "\n", "    ", "\"\"\"\n    CommandLine:\n        xdoctest -m tests/test_nms.py test_nms_device_and_dtypes_cpu\n    \"\"\"", "\n", "iou_thr", "=", "0.7", "\n", "base_dets", "=", "np", ".", "array", "(", "[", "[", "49.1", ",", "32.4", ",", "51.0", ",", "35.9", ",", "0.9", "]", ",", "\n", "[", "49.3", ",", "32.9", ",", "51.0", ",", "35.3", ",", "0.9", "]", ",", "\n", "[", "35.3", ",", "11.5", ",", "39.9", ",", "14.5", ",", "0.4", "]", ",", "\n", "[", "35.2", ",", "11.7", ",", "39.7", ",", "15.7", ",", "0.3", "]", "]", ")", "\n", "\n", "# CPU can handle float32 and float64", "\n", "dets", "=", "base_dets", ".", "astype", "(", "np", ".", "float32", ")", "\n", "supressed", ",", "inds", "=", "nms", "(", "dets", ",", "iou_thr", ")", "\n", "assert", "dets", ".", "dtype", "==", "supressed", ".", "dtype", "\n", "assert", "len", "(", "inds", ")", "==", "len", "(", "supressed", ")", "==", "3", "\n", "\n", "dets", "=", "torch", ".", "FloatTensor", "(", "base_dets", ")", "\n", "surpressed", ",", "inds", "=", "nms", "(", "dets", ",", "iou_thr", ")", "\n", "assert", "dets", ".", "dtype", "==", "surpressed", ".", "dtype", "\n", "assert", "len", "(", "inds", ")", "==", "len", "(", "surpressed", ")", "==", "3", "\n", "\n", "dets", "=", "base_dets", ".", "astype", "(", "np", ".", "float64", ")", "\n", "supressed", ",", "inds", "=", "nms", "(", "dets", ",", "iou_thr", ")", "\n", "assert", "dets", ".", "dtype", "==", "supressed", ".", "dtype", "\n", "assert", "len", "(", "inds", ")", "==", "len", "(", "supressed", ")", "==", "3", "\n", "\n", "dets", "=", "torch", ".", "DoubleTensor", "(", "base_dets", ")", "\n", "surpressed", ",", "inds", "=", "nms", "(", "dets", ",", "iou_thr", ")", "\n", "assert", "dets", ".", "dtype", "==", "surpressed", ".", "dtype", "\n", "assert", "len", "(", "inds", ")", "==", "len", "(", "surpressed", ")", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_nms.test_nms_device_and_dtypes_gpu": [[44, 71], ["numpy.array", "range", "torch.cuda.is_available", "pytest.skip", "torch.cuda.device_count", "print", "np.array.astype", "mmdet.ops.nms.nms_wrapper.nms", "torch.FloatTensor().to", "mmdet.ops.nms.nms_wrapper.nms", "len", "len", "len", "len", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.nms", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.nms.nms_wrapper.nms"], ["", "def", "test_nms_device_and_dtypes_gpu", "(", ")", ":", "\n", "    ", "\"\"\"\n    CommandLine:\n        xdoctest -m tests/test_nms.py test_nms_device_and_dtypes_gpu\n    \"\"\"", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "import", "pytest", "\n", "pytest", ".", "skip", "(", "'test requires GPU and torch+cuda'", ")", "\n", "\n", "", "iou_thr", "=", "0.7", "\n", "base_dets", "=", "np", ".", "array", "(", "[", "[", "49.1", ",", "32.4", ",", "51.0", ",", "35.9", ",", "0.9", "]", ",", "\n", "[", "49.3", ",", "32.9", ",", "51.0", ",", "35.3", ",", "0.9", "]", ",", "\n", "[", "35.3", ",", "11.5", ",", "39.9", ",", "14.5", ",", "0.4", "]", ",", "\n", "[", "35.2", ",", "11.7", ",", "39.7", ",", "15.7", ",", "0.3", "]", "]", ")", "\n", "\n", "for", "device_id", "in", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ":", "\n", "        ", "print", "(", "'Run NMS on device_id = {!r}'", ".", "format", "(", "device_id", ")", ")", "\n", "# GPU can handle float32 but not float64", "\n", "dets", "=", "base_dets", ".", "astype", "(", "np", ".", "float32", ")", "\n", "supressed", ",", "inds", "=", "nms", "(", "dets", ",", "iou_thr", ",", "device_id", ")", "\n", "assert", "dets", ".", "dtype", "==", "supressed", ".", "dtype", "\n", "assert", "len", "(", "inds", ")", "==", "len", "(", "supressed", ")", "==", "3", "\n", "\n", "dets", "=", "torch", ".", "FloatTensor", "(", "base_dets", ")", ".", "to", "(", "device_id", ")", "\n", "surpressed", ",", "inds", "=", "nms", "(", "dets", ",", "iou_thr", ")", "\n", "assert", "dets", ".", "dtype", "==", "surpressed", ".", "dtype", "\n", "assert", "len", "(", "inds", ")", "==", "len", "(", "surpressed", ")", "==", "3", "\n", "", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_utils.test_params_to_string": [[6, 10], ["numpy.assert_equal", "numpy.assert_equal", "numpy.assert_equal", "mmdet.utils.flops_counter.params_to_string", "mmdet.utils.flops_counter.params_to_string", "mmdet.utils.flops_counter.params_to_string"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.params_to_string", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.params_to_string", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.utils.flops_counter.params_to_string"], ["def", "test_params_to_string", "(", ")", ":", "\n", "    ", "npt", ".", "assert_equal", "(", "params_to_string", "(", "1e9", ")", ",", "'1000.0 M'", ")", "\n", "npt", ".", "assert_equal", "(", "params_to_string", "(", "2e5", ")", ",", "'200.0 k'", ")", "\n", "npt", ".", "assert_equal", "(", "params_to_string", "(", "3e-9", ")", ",", "'3e-09'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._get_config_directory": [[11, 24], ["os.path.join", "os.path.dirname", "os.path.exists", "Exception", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["def", "_get_config_directory", "(", ")", ":", "\n", "    ", "\"\"\" Find the predefined detector config directory \"\"\"", "\n", "try", ":", "\n", "# Assume we are running in the source mmdetection repo", "\n", "        ", "repo_dpath", "=", "dirname", "(", "dirname", "(", "__file__", ")", ")", "\n", "", "except", "NameError", ":", "\n", "# For IPython development when this __file__ is not defined", "\n", "        ", "import", "mmdet", "\n", "repo_dpath", "=", "dirname", "(", "dirname", "(", "mmdet", ".", "__file__", ")", ")", "\n", "", "config_dpath", "=", "join", "(", "repo_dpath", ",", "'configs'", ")", "\n", "if", "not", "exists", "(", "config_dpath", ")", ":", "\n", "        ", "raise", "Exception", "(", "'Cannot find config path'", ")", "\n", "", "return", "config_dpath", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._get_config_module": [[26, 35], ["test_forward._get_config_directory", "os.path.join", "import_module_from_path"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._get_config_directory"], ["", "def", "_get_config_module", "(", "fname", ")", ":", "\n", "    ", "\"\"\"\n    Load a configuration as a python module\n    \"\"\"", "\n", "from", "xdoctest", ".", "utils", "import", "import_module_from_path", "\n", "config_dpath", "=", "_get_config_directory", "(", ")", "\n", "config_fpath", "=", "join", "(", "config_dpath", ",", "fname", ")", "\n", "config_mod", "=", "import_module_from_path", "(", "config_fpath", ")", "\n", "return", "config_mod", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._get_detector_cfg": [[37, 48], ["test_forward._get_config_module", "copy.deepcopy", "mmcv.Config", "mmcv.Config", "copy.deepcopy", "copy.deepcopy"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._get_config_module"], ["", "def", "_get_detector_cfg", "(", "fname", ")", ":", "\n", "    ", "\"\"\"\n    Grab configs necessary to create a detector. These are deep copied to allow\n    for safe modification of parameters without influencing other tests.\n    \"\"\"", "\n", "import", "mmcv", "\n", "config", "=", "_get_config_module", "(", "fname", ")", "\n", "model", "=", "copy", ".", "deepcopy", "(", "config", ".", "model", ")", "\n", "train_cfg", "=", "mmcv", ".", "Config", "(", "copy", ".", "deepcopy", "(", "config", ".", "train_cfg", ")", ")", "\n", "test_cfg", "=", "mmcv", ".", "Config", "(", "copy", ".", "deepcopy", "(", "config", ".", "test_cfg", ")", ")", "\n", "return", "model", ",", "train_cfg", ",", "test_cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward.test_ssd300_forward": [[50, 82], ["test_forward._get_detector_cfg", "build_detector", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.forward", "isinstance", "torch.no_grad", "zip", "build_detector.forward", "batch_results.append"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._get_detector_cfg", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_detector", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward"], ["", "def", "test_ssd300_forward", "(", ")", ":", "\n", "    ", "model", ",", "train_cfg", ",", "test_cfg", "=", "_get_detector_cfg", "(", "'ssd300_coco.py'", ")", "\n", "model", "[", "'pretrained'", "]", "=", "None", "\n", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "detector", "=", "build_detector", "(", "model", ",", "train_cfg", "=", "train_cfg", ",", "test_cfg", "=", "test_cfg", ")", "\n", "\n", "input_shape", "=", "(", "1", ",", "3", ",", "300", ",", "300", ")", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ")", "\n", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "\n", "# Test forward train", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "gt_labels", "=", "mm_inputs", "[", "'gt_labels'", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "\n", "# Test forward test", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img_list", "=", "[", "g", "[", "None", ",", ":", "]", "for", "g", "in", "imgs", "]", "\n", "batch_results", "=", "[", "]", "\n", "for", "one_img", ",", "one_meta", "in", "zip", "(", "img_list", ",", "img_metas", ")", ":", "\n", "            ", "result", "=", "detector", ".", "forward", "(", "[", "one_img", "]", ",", "[", "[", "one_meta", "]", "]", ",", "\n", "return_loss", "=", "False", ")", "\n", "batch_results", ".", "append", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward.test_rpn_forward": [[84, 111], ["test_forward._get_detector_cfg", "build_detector", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.forward", "isinstance", "torch.no_grad", "zip", "build_detector.forward", "batch_results.append"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._get_detector_cfg", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_detector", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward"], ["", "", "", "def", "test_rpn_forward", "(", ")", ":", "\n", "    ", "model", ",", "train_cfg", ",", "test_cfg", "=", "_get_detector_cfg", "(", "'rpn_r50_fpn_1x.py'", ")", "\n", "model", "[", "'pretrained'", "]", "=", "None", "\n", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "detector", "=", "build_detector", "(", "model", ",", "train_cfg", "=", "train_cfg", ",", "test_cfg", "=", "test_cfg", ")", "\n", "\n", "input_shape", "=", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ")", "\n", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "\n", "# Test forward train", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "img_metas", ",", "gt_bboxes", "=", "gt_bboxes", ",", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "\n", "# Test forward test", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img_list", "=", "[", "g", "[", "None", ",", ":", "]", "for", "g", "in", "imgs", "]", "\n", "batch_results", "=", "[", "]", "\n", "for", "one_img", ",", "one_meta", "in", "zip", "(", "img_list", ",", "img_metas", ")", ":", "\n", "            ", "result", "=", "detector", ".", "forward", "(", "[", "one_img", "]", ",", "[", "[", "one_meta", "]", "]", ",", "\n", "return_loss", "=", "False", ")", "\n", "batch_results", ".", "append", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward.test_retina_ghm_forward": [[113, 169], ["test_forward._get_detector_cfg", "build_detector", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "detector.cuda.forward", "isinstance", "torch.cuda.is_available", "torch.no_grad", "zip", "detector.cuda.cuda", "imgs.cuda.cuda", "detector.cuda.forward", "isinstance", "detector.cuda.forward", "batch_results.append", "b.cuda", "g.cuda", "torch.no_grad", "zip", "detector.cuda.forward", "batch_results.append"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._get_detector_cfg", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_detector", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward"], ["", "", "", "def", "test_retina_ghm_forward", "(", ")", ":", "\n", "    ", "model", ",", "train_cfg", ",", "test_cfg", "=", "_get_detector_cfg", "(", "\n", "'ghm/retinanet_ghm_r50_fpn_1x.py'", ")", "\n", "model", "[", "'pretrained'", "]", "=", "None", "\n", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "detector", "=", "build_detector", "(", "model", ",", "train_cfg", "=", "train_cfg", ",", "test_cfg", "=", "test_cfg", ")", "\n", "\n", "input_shape", "=", "(", "3", ",", "3", ",", "224", ",", "224", ")", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ")", "\n", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "\n", "# Test forward train", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "gt_labels", "=", "mm_inputs", "[", "'gt_labels'", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "\n", "# Test forward test", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img_list", "=", "[", "g", "[", "None", ",", ":", "]", "for", "g", "in", "imgs", "]", "\n", "batch_results", "=", "[", "]", "\n", "for", "one_img", ",", "one_meta", "in", "zip", "(", "img_list", ",", "img_metas", ")", ":", "\n", "            ", "result", "=", "detector", ".", "forward", "(", "[", "one_img", "]", ",", "[", "[", "one_meta", "]", "]", ",", "\n", "return_loss", "=", "False", ")", "\n", "batch_results", ".", "append", "(", "result", ")", "\n", "\n", "", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "detector", "=", "detector", ".", "cuda", "(", ")", "\n", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "# Test forward train", "\n", "gt_bboxes", "=", "[", "b", ".", "cuda", "(", ")", "for", "b", "in", "mm_inputs", "[", "'gt_bboxes'", "]", "]", "\n", "gt_labels", "=", "[", "g", ".", "cuda", "(", ")", "for", "g", "in", "mm_inputs", "[", "'gt_labels'", "]", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "\n", "# Test forward test", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "img_list", "=", "[", "g", "[", "None", ",", ":", "]", "for", "g", "in", "imgs", "]", "\n", "batch_results", "=", "[", "]", "\n", "for", "one_img", ",", "one_meta", "in", "zip", "(", "img_list", ",", "img_metas", ")", ":", "\n", "                ", "result", "=", "detector", ".", "forward", "(", "[", "one_img", "]", ",", "[", "[", "one_meta", "]", "]", ",", "\n", "return_loss", "=", "False", ")", "\n", "batch_results", ".", "append", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward.test_cascade_forward": [[171, 222], ["test_forward._get_detector_cfg", "build_detector", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.forward", "isinstance", "float", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.forward", "isinstance", "float", "[].item", "[].item", "pytest.skip", "parse_losses", "parse_losses"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._get_detector_cfg", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_detector", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.train.parse_losses", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.train.parse_losses"], ["", "", "", "", "def", "test_cascade_forward", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "from", "torchvision", "import", "_C", "as", "C", "# NOQA", "\n", "", "except", "ImportError", ":", "\n", "        ", "import", "pytest", "\n", "raise", "pytest", ".", "skip", "(", "'requires torchvision on cpu'", ")", "\n", "\n", "", "model", ",", "train_cfg", ",", "test_cfg", "=", "_get_detector_cfg", "(", "\n", "'cascade_rcnn_r50_fpn_1x.py'", ")", "\n", "model", "[", "'pretrained'", "]", "=", "None", "\n", "# torchvision roi align supports CPU", "\n", "model", "[", "'bbox_roi_extractor'", "]", "[", "'roi_layer'", "]", "[", "'use_torchvision'", "]", "=", "True", "\n", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "detector", "=", "build_detector", "(", "model", ",", "train_cfg", "=", "train_cfg", ",", "test_cfg", "=", "test_cfg", ")", "\n", "\n", "input_shape", "=", "(", "1", ",", "3", ",", "256", ",", "256", ")", "\n", "\n", "# Test forward train with a non-empty truth batch", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ",", "num_items", "=", "[", "10", "]", ")", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "gt_labels", "=", "mm_inputs", "[", "'gt_labels'", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "from", "mmdet", ".", "apis", ".", "train", "import", "parse_losses", "\n", "total_loss", "=", "float", "(", "parse_losses", "(", "losses", ")", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "assert", "total_loss", ">", "0", "\n", "\n", "# Test forward train with an empty truth batch", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ",", "num_items", "=", "[", "0", "]", ")", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "gt_labels", "=", "mm_inputs", "[", "'gt_labels'", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "from", "mmdet", ".", "apis", ".", "train", "import", "parse_losses", "\n", "total_loss", "=", "float", "(", "parse_losses", "(", "losses", ")", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "assert", "total_loss", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward.test_faster_rcnn_forward": [[224, 274], ["test_forward._get_detector_cfg", "build_detector", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.forward", "isinstance", "float", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.forward", "isinstance", "float", "[].item", "[].item", "pytest.skip", "parse_losses", "parse_losses"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._get_detector_cfg", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_detector", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.train.parse_losses", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.train.parse_losses"], ["", "def", "test_faster_rcnn_forward", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "from", "torchvision", "import", "_C", "as", "C", "# NOQA", "\n", "", "except", "ImportError", ":", "\n", "        ", "import", "pytest", "\n", "raise", "pytest", ".", "skip", "(", "'requires torchvision on cpu'", ")", "\n", "\n", "", "model", ",", "train_cfg", ",", "test_cfg", "=", "_get_detector_cfg", "(", "'faster_rcnn_r50_fpn_1x.py'", ")", "\n", "model", "[", "'pretrained'", "]", "=", "None", "\n", "# torchvision roi align supports CPU", "\n", "model", "[", "'bbox_roi_extractor'", "]", "[", "'roi_layer'", "]", "[", "'use_torchvision'", "]", "=", "True", "\n", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "detector", "=", "build_detector", "(", "model", ",", "train_cfg", "=", "train_cfg", ",", "test_cfg", "=", "test_cfg", ")", "\n", "\n", "input_shape", "=", "(", "1", ",", "3", ",", "256", ",", "256", ")", "\n", "\n", "# Test forward train with a non-empty truth batch", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ",", "num_items", "=", "[", "10", "]", ")", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "gt_labels", "=", "mm_inputs", "[", "'gt_labels'", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "from", "mmdet", ".", "apis", ".", "train", "import", "parse_losses", "\n", "total_loss", "=", "float", "(", "parse_losses", "(", "losses", ")", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "assert", "total_loss", ">", "0", "\n", "\n", "# Test forward train with an empty truth batch", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ",", "num_items", "=", "[", "0", "]", ")", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "gt_labels", "=", "mm_inputs", "[", "'gt_labels'", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "from", "mmdet", ".", "apis", ".", "train", "import", "parse_losses", "\n", "total_loss", "=", "float", "(", "parse_losses", "(", "losses", ")", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "assert", "total_loss", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward.test_faster_rcnn_ohem_forward": [[276, 327], ["test_forward._get_detector_cfg", "build_detector", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.forward", "isinstance", "float", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.forward", "isinstance", "float", "[].item", "[].item", "pytest.skip", "parse_losses", "parse_losses"], "function", ["home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._get_detector_cfg", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.models.builder.build_detector", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.losses.smooth_l1_loss.SmoothL1Loss.forward", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.train.parse_losses", "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.apis.train.parse_losses"], ["", "def", "test_faster_rcnn_ohem_forward", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "from", "torchvision", "import", "_C", "as", "C", "# NOQA", "\n", "", "except", "ImportError", ":", "\n", "        ", "import", "pytest", "\n", "raise", "pytest", ".", "skip", "(", "'requires torchvision on cpu'", ")", "\n", "\n", "", "model", ",", "train_cfg", ",", "test_cfg", "=", "_get_detector_cfg", "(", "\n", "'faster_rcnn_ohem_r50_fpn_1x.py'", ")", "\n", "model", "[", "'pretrained'", "]", "=", "None", "\n", "# torchvision roi align supports CPU", "\n", "model", "[", "'bbox_roi_extractor'", "]", "[", "'roi_layer'", "]", "[", "'use_torchvision'", "]", "=", "True", "\n", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "detector", "=", "build_detector", "(", "model", ",", "train_cfg", "=", "train_cfg", ",", "test_cfg", "=", "test_cfg", ")", "\n", "\n", "input_shape", "=", "(", "1", ",", "3", ",", "256", ",", "256", ")", "\n", "\n", "# Test forward train with a non-empty truth batch", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ",", "num_items", "=", "[", "10", "]", ")", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "gt_labels", "=", "mm_inputs", "[", "'gt_labels'", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "from", "mmdet", ".", "apis", ".", "train", "import", "parse_losses", "\n", "total_loss", "=", "float", "(", "parse_losses", "(", "losses", ")", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "assert", "total_loss", ">", "0", "\n", "\n", "# Test forward train with an empty truth batch", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ",", "num_items", "=", "[", "0", "]", ")", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "gt_labels", "=", "mm_inputs", "[", "'gt_labels'", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "from", "mmdet", ".", "apis", ".", "train", "import", "parse_losses", "\n", "total_loss", "=", "float", "(", "parse_losses", "(", "losses", ")", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "assert", "total_loss", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.joe-siyuan-qiao_DetectoRS.tests.test_forward._demo_mm_inputs": [[329, 389], ["numpy.random.RandomState", "np.random.RandomState.rand", "range", "np.random.RandomState.randint", "gt_bboxes.append", "gt_labels.append", "torch.FloatTensor", "range", "np.random.RandomState.randint", "np.random.RandomState.rand", "numpy.vstack", "torch.FloatTensor", "torch.LongTensor"], "function", ["None"], ["", "def", "_demo_mm_inputs", "(", "input_shape", "=", "(", "1", ",", "3", ",", "300", ",", "300", ")", ",", "\n", "num_items", "=", "None", ",", "num_classes", "=", "10", ")", ":", "# yapf: disable", "\n", "    ", "\"\"\"\n    Create a superset of inputs needed to run test or train batches.\n\n    Args:\n        input_shape (tuple):\n            input batch dimensions\n\n        num_items (None | List[int]):\n            specifies the number of boxes in each batch item\n\n        num_classes (int):\n            number of different labels a box might have\n    \"\"\"", "\n", "(", "N", ",", "C", ",", "H", ",", "W", ")", "=", "input_shape", "\n", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "0", ")", "\n", "\n", "imgs", "=", "rng", ".", "rand", "(", "*", "input_shape", ")", "\n", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "H", ",", "W", ",", "C", ")", ",", "\n", "'ori_shape'", ":", "(", "H", ",", "W", ",", "C", ")", ",", "\n", "'pad_shape'", ":", "(", "H", ",", "W", ",", "C", ")", ",", "\n", "'filename'", ":", "'<demo>.png'", ",", "\n", "'scale_factor'", ":", "1.0", ",", "\n", "'flip'", ":", "False", ",", "\n", "}", "for", "_", "in", "range", "(", "N", ")", "]", "\n", "\n", "gt_bboxes", "=", "[", "]", "\n", "gt_labels", "=", "[", "]", "\n", "\n", "for", "batch_idx", "in", "range", "(", "N", ")", ":", "\n", "        ", "if", "num_items", "is", "None", ":", "\n", "            ", "num_boxes", "=", "rng", ".", "randint", "(", "1", ",", "10", ")", "\n", "", "else", ":", "\n", "            ", "num_boxes", "=", "num_items", "[", "batch_idx", "]", "\n", "\n", "", "cx", ",", "cy", ",", "bw", ",", "bh", "=", "rng", ".", "rand", "(", "num_boxes", ",", "4", ")", ".", "T", "\n", "\n", "tl_x", "=", "(", "(", "cx", "*", "W", ")", "-", "(", "W", "*", "bw", "/", "2", ")", ")", ".", "clip", "(", "0", ",", "W", ")", "\n", "tl_y", "=", "(", "(", "cy", "*", "H", ")", "-", "(", "H", "*", "bh", "/", "2", ")", ")", ".", "clip", "(", "0", ",", "H", ")", "\n", "br_x", "=", "(", "(", "cx", "*", "W", ")", "+", "(", "W", "*", "bw", "/", "2", ")", ")", ".", "clip", "(", "0", ",", "W", ")", "\n", "br_y", "=", "(", "(", "cy", "*", "H", ")", "+", "(", "H", "*", "bh", "/", "2", ")", ")", ".", "clip", "(", "0", ",", "H", ")", "\n", "\n", "boxes", "=", "np", ".", "vstack", "(", "[", "tl_x", ",", "tl_y", ",", "br_x", ",", "br_y", "]", ")", ".", "T", "\n", "class_idxs", "=", "rng", ".", "randint", "(", "1", ",", "num_classes", ",", "size", "=", "num_boxes", ")", "\n", "\n", "gt_bboxes", ".", "append", "(", "torch", ".", "FloatTensor", "(", "boxes", ")", ")", "\n", "gt_labels", ".", "append", "(", "torch", ".", "LongTensor", "(", "class_idxs", ")", ")", "\n", "\n", "", "mm_inputs", "=", "{", "\n", "'imgs'", ":", "torch", ".", "FloatTensor", "(", "imgs", ")", ",", "\n", "'img_metas'", ":", "img_metas", ",", "\n", "'gt_bboxes'", ":", "gt_bboxes", ",", "\n", "'gt_labels'", ":", "gt_labels", ",", "\n", "'gt_bboxes_ignore'", ":", "None", ",", "\n", "}", "\n", "return", "mm_inputs", "\n", "", ""]]}