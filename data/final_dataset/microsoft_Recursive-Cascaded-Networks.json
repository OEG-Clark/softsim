{"home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.main": [[39, 108], ["demo.preprocess_dcm", "demo.show_image", "demo.save_dcm", "demo.preprocess_dcm", "demo.show_image", "demo.save_dcm", "demo.find_checkpoint_step", "print", "os.path.dirname", "Framework.net_args.update", "Framework", "print", "tf.Session", "tf.train.Saver", "tf.train.Saver.restore", "tflearn.is_training", "sum", "Framework.validate", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "args.checkpoint.split", "int", "print", "eval", "Framework.net_args.update", "len", "tf.get_collection", "open", "json.load", "print", "eval", "args.gpu.split", "numpy.ones", "numpy.ones", "numpy.reshape", "numpy.reshape", "demo.RenderFlow", "skimage.io.imsave", "skimage.io.imsave", "numpy.squeeze().astype", "demo.show_image", "demo.save_dcm", "os.path.join", "range", "os.path.join", "os.path.join", "os.path.join", "len", "numpy.squeeze", "key.replace"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.preprocess_dcm", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.show_image", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.save_dcm", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.preprocess_dcm", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.show_image", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.save_dcm", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.eval.find_checkpoint_step", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.FileRestorer.restore", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.framework.FrameworkUnsupervised.validate", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.RenderFlow", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.show_image", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.save_dcm"], ["def", "main", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n", "", "img_fixed", ",", "reader_fixed", "=", "preprocess_dcm", "(", "args", ".", "fixed", ")", "\n", "show_image", "(", "img_fixed", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output", ",", "'fixed.png'", ")", ")", "\n", "save_dcm", "(", "img_fixed", ",", "reader_fixed", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output", ",", "'fixed'", ")", ")", "\n", "\n", "img_moving", ",", "reader_moving", "=", "preprocess_dcm", "(", "args", ".", "moving", ")", "\n", "show_image", "(", "img_moving", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output", ",", "'moving.png'", ")", ")", "\n", "save_dcm", "(", "img_moving", ",", "reader_moving", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output", ",", "'moving'", ")", ")", "\n", "\n", "import", "tensorflow", "as", "tf", "\n", "import", "tflearn", "\n", "\n", "import", "network", "\n", "\n", "assert", "args", ".", "checkpoint", "is", "not", "None", ",", "'Checkpoint must be specified!'", "\n", "if", "':'", "in", "args", ".", "checkpoint", ":", "\n", "        ", "args", ".", "checkpoint", ",", "steps", "=", "args", ".", "checkpoint", ".", "split", "(", "':'", ")", "\n", "steps", "=", "int", "(", "steps", ")", "\n", "", "else", ":", "\n", "        ", "steps", "=", "None", "\n", "", "args", ".", "checkpoint", "=", "find_checkpoint_step", "(", "args", ".", "checkpoint", ",", "steps", ")", "\n", "print", "(", "args", ".", "checkpoint", ")", "\n", "model_dir", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "checkpoint", ")", "\n", "try", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'args.json'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "model_args", "=", "json", ".", "load", "(", "f", ")", "\n", "", "print", "(", "model_args", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "model_args", "=", "{", "}", "\n", "\n", "", "Framework", "=", "network", ".", "FrameworkUnsupervised", "\n", "Framework", ".", "net_args", "[", "'base_network'", "]", "=", "model_args", "[", "'base_network'", "]", "\n", "Framework", ".", "net_args", "[", "'n_cascades'", "]", "=", "model_args", "[", "'n_cascades'", "]", "\n", "Framework", ".", "net_args", "[", "'rep'", "]", "=", "args", ".", "rep", "\n", "Framework", ".", "net_args", ".", "update", "(", "eval", "(", "'dict({})'", ".", "format", "(", "model_args", "[", "'net_args'", "]", ")", ")", ")", "\n", "if", "args", ".", "net_args", "is", "not", "None", ":", "\n", "        ", "Framework", ".", "net_args", ".", "update", "(", "eval", "(", "'dict({})'", ".", "format", "(", "args", ".", "net_args", ")", ")", ")", "\n", "", "gpus", "=", "0", "if", "args", ".", "gpu", "==", "'-1'", "else", "len", "(", "args", ".", "gpu", ".", "split", "(", "','", ")", ")", "\n", "framework", "=", "Framework", "(", "devices", "=", "gpus", ",", "image_size", "=", "[", "128", ",", "128", ",", "128", "]", ",", "segmentation_class_value", "=", "None", ",", "\n", "fast_reconstruction", "=", "args", ".", "fast_reconstruction", ",", "validation", "=", "True", ")", "\n", "print", "(", "'Graph built'", ")", "\n", "\n", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ")", ")", "\n", "checkpoint", "=", "args", ".", "checkpoint", "\n", "saver", ".", "restore", "(", "sess", ",", "checkpoint", ")", "\n", "tflearn", ".", "is_training", "(", "False", ",", "session", "=", "sess", ")", "\n", "\n", "keys", "=", "sum", "(", "[", "[", "'real_flow_{}'", ".", "format", "(", "i", ")", ",", "'warped_moving_{}'", ".", "format", "(", "i", ")", "]", "for", "i", "in", "range", "(", "len", "(", "framework", ".", "network", ".", "stems", ")", ")", "]", ",", "[", "]", ")", "\n", "gen", "=", "[", "{", "'id1'", ":", "np", ".", "ones", "(", "(", "1", ",", ")", ")", ",", "'id2'", ":", "np", ".", "ones", "(", "(", "1", ",", ")", ")", ",", "\n", "'voxel1'", ":", "np", ".", "reshape", "(", "img_fixed", ",", "[", "1", ",", "128", ",", "128", ",", "128", ",", "1", "]", ")", ",", "'voxel2'", ":", "np", ".", "reshape", "(", "img_moving", ",", "[", "1", ",", "128", ",", "128", ",", "128", ",", "1", "]", ")", "}", "]", "\n", "results", "=", "framework", ".", "validate", "(", "sess", ",", "gen", ",", "keys", "=", "keys", ",", "summary", "=", "False", ")", "\n", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "if", "'flow'", "in", "key", ":", "\n", "            ", "im_flow", "=", "RenderFlow", "(", "results", "[", "key", "]", "[", "0", "]", ")", "\n", "skimage", ".", "io", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output", ",", "key", ".", "replace", "(", "'real_flow'", ",", "'flow'", ")", "+", "'.png'", ")", ",", "im_flow", ")", "\n", "", "else", ":", "\n", "            ", "warped_img", "=", "np", ".", "squeeze", "(", "results", "[", "key", "]", "[", "0", "]", "*", "255", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "show_image", "(", "warped_img", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output", ",", "key", "+", "'.png'", ")", ")", "\n", "save_dcm", "(", "warped_img", ",", "reader_moving", ",", "os", ".", "path", ".", "join", "(", "args", ".", "output", ",", "key", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.find_checkpoint_step": [[110, 120], ["re.compile", "os.listdir", "re.compile.match", "min", "int", "checkpoints.append", "pattern.match.group", "os.path.join", "abs", "f.replace"], "function", ["None"], ["", "", "", "def", "find_checkpoint_step", "(", "checkpoint_path", ",", "target_steps", "=", "None", ")", ":", "\n", "    ", "pattern", "=", "re", ".", "compile", "(", "r'model-(\\d+).index'", ")", "\n", "checkpoints", "=", "[", "]", "\n", "for", "f", "in", "os", ".", "listdir", "(", "checkpoint_path", ")", ":", "\n", "        ", "m", "=", "pattern", ".", "match", "(", "f", ")", "\n", "if", "m", ":", "\n", "            ", "steps", "=", "int", "(", "m", ".", "group", "(", "1", ")", ")", "\n", "checkpoints", ".", "append", "(", "(", "-", "steps", "if", "target_steps", "is", "None", "else", "abs", "(", "\n", "target_steps", "-", "steps", ")", ",", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "f", ".", "replace", "(", "'.index'", ",", "''", ")", ")", ")", ")", "\n", "", "", "return", "min", "(", "checkpoints", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.RenderFlow": [[122, 131], ["numpy.stack", "numpy.abs", "numpy.exp"], "function", ["None"], ["", "def", "RenderFlow", "(", "flow", ",", "coef", "=", "15", ",", "channel", "=", "(", "0", ",", "1", ",", "2", ")", ",", "thresh", "=", "1", ")", ":", "\n", "    ", "flow", "=", "flow", "[", ":", ",", ":", ",", "64", "]", "\n", "im_flow", "=", "np", ".", "stack", "(", "[", "flow", "[", ":", ",", ":", ",", "c", "]", "for", "c", "in", "channel", "]", ",", "axis", "=", "-", "1", ")", "\n", "#im_flow = 0.5 + im_flow / coef", "\n", "im_flow", "=", "np", ".", "abs", "(", "im_flow", ")", "\n", "im_flow", "=", "np", ".", "exp", "(", "-", "im_flow", "/", "coef", ")", "\n", "im_flow", "=", "im_flow", "*", "thresh", "\n", "#im_flow = 1 - im_flow / 20", "\n", "return", "im_flow", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.save_dcm": [[132, 188], ["numpy.transpose", "SimpleITK.GetImageFromArray", "SimpleITK.ImageFileWriter", "sitk.ImageFileWriter.KeepOriginalImageUIDOn", "time.strftime", "time.strftime", "sitk.GetImageFromArray.GetDirection", "range", "os.makedirs", "sitk.GetImageFromArray.GetDepth", "image_slice.SetMetaData", "image_slice.SetMetaData", "image_slice.SetMetaData", "image_slice.SetMetaData", "sitk.ImageFileWriter.SetFileName", "sitk.ImageFileWriter.Execute", "image_slice.SetMetaData", "time.strftime", "time.strftime", "str", "os.path.join", "series_reader.GetMetaData", "series_reader.HasMetaDataKey", "map", "map", "series_reader.GetMetaData", "sitk.GetImageFromArray.TransformIndexToPhysicalPoint", "str"], "function", ["None"], ["", "def", "save_dcm", "(", "img", ",", "series_reader", ",", "fpath", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "fpath", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "filtered_image", "=", "sitk", ".", "GetImageFromArray", "(", "img", ")", "\n", "\n", "writer", "=", "sitk", ".", "ImageFileWriter", "(", ")", "\n", "# Use the study/series/frame of reference information given in the meta-data", "\n", "# dictionary and not the automatically generated information from the file IO", "\n", "writer", ".", "KeepOriginalImageUIDOn", "(", ")", "\n", "\n", "tags_to_copy", "=", "[", "\"0010|0010\"", ",", "# Patient Name", "\n", "\"0010|0020\"", ",", "# Patient ID", "\n", "\"0010|0030\"", ",", "# Patient Birth Date", "\n", "\"0020|000D\"", ",", "# Study Instance UID, for machine consumption", "\n", "\"0020|0010\"", ",", "# Study ID, for human consumption", "\n", "\"0008|0020\"", ",", "# Study Date", "\n", "\"0008|0030\"", ",", "# Study Time", "\n", "\"0008|0050\"", ",", "# Accession Number", "\n", "\"0008|0060\"", "# Modality", "\n", "]", "\n", "\n", "modification_time", "=", "time", ".", "strftime", "(", "\"%H%M%S\"", ")", "\n", "modification_date", "=", "time", ".", "strftime", "(", "\"%Y%m%d\"", ")", "\n", "\n", "# Copy some of the tags and add the relevant tags indicating the change.", "\n", "# For the series instance UID (0020|000e), each of the components is a number, cannot start", "\n", "# with zero, and separated by a '.' We create a unique series ID using the date and time.", "\n", "# tags of interest:", "\n", "direction", "=", "filtered_image", ".", "GetDirection", "(", ")", "\n", "series_tag_values", "=", "[", "(", "k", ",", "series_reader", ".", "GetMetaData", "(", "0", ",", "k", ")", ")", "for", "k", "in", "tags_to_copy", "if", "series_reader", ".", "HasMetaDataKey", "(", "0", ",", "k", ")", "]", "+", "[", "(", "\"0008|0031\"", ",", "modification_time", ")", ",", "# Series Time", "\n", "(", "\"0008|0021\"", ",", "modification_date", ")", ",", "# Series Date", "\n", "(", "\"0008|0008\"", ",", "\"DERIVED\\\\SECONDARY\"", ")", ",", "# Image Type", "\n", "(", "\"0020|000e\"", ",", "\"1.2.826.0.1.3680043.2.1125.\"", "+", "modification_date", "+", "\".1\"", "+", "modification_time", ")", ",", "# Series Instance UID", "\n", "(", "\"0020|0037\"", ",", "'\\\\'", ".", "join", "(", "map", "(", "str", ",", "(", "direction", "[", "0", "]", ",", "direction", "[", "3", "]", ",", "direction", "[", "6", "]", ",", "# Image Orientation (Patient)", "\n", "direction", "[", "1", "]", ",", "direction", "[", "4", "]", ",", "direction", "[", "7", "]", ")", ")", ")", ")", ",", "\n", "(", "\"0008|103e\"", ",", "series_reader", ".", "GetMetaData", "(", "0", ",", "\"0008|103e\"", ")", "+", "\" Processed-SimpleITK\"", ")", "]", "# Series Description", "\n", "\n", "for", "i", "in", "range", "(", "filtered_image", ".", "GetDepth", "(", ")", ")", ":", "\n", "        ", "image_slice", "=", "filtered_image", "[", ":", ",", ":", ",", "i", "]", "\n", "# Tags shared by the series.", "\n", "for", "tag", ",", "value", "in", "series_tag_values", ":", "\n", "            ", "image_slice", ".", "SetMetaData", "(", "tag", ",", "value", ")", "\n", "# Slice specific tags.", "\n", "", "image_slice", ".", "SetMetaData", "(", "\"0008|0012\"", ",", "time", ".", "strftime", "(", "\"%Y%m%d\"", ")", ")", "# Instance Creation Date", "\n", "image_slice", ".", "SetMetaData", "(", "\"0008|0013\"", ",", "time", ".", "strftime", "(", "\"%H%M%S\"", ")", ")", "# Instance Creation Time", "\n", "image_slice", ".", "SetMetaData", "(", "\"0020|0032\"", ",", "'\\\\'", ".", "join", "(", "map", "(", "str", ",", "filtered_image", ".", "TransformIndexToPhysicalPoint", "(", "(", "0", ",", "0", ",", "i", ")", ")", ")", ")", ")", "# Image Position (Patient)", "\n", "image_slice", ".", "SetMetaData", "(", "\"0020|0013\"", ",", "str", "(", "i", ")", ")", "# Instance Number", "\n", "\n", "# Write to the output directory and add the extension dcm, to force writing in DICOM format.", "\n", "writer", ".", "SetFileName", "(", "os", ".", "path", ".", "join", "(", "fpath", ",", "str", "(", "i", ")", "+", "'.dcm'", ")", ")", "\n", "writer", ".", "Execute", "(", "image_slice", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.preprocess_dcm": [[189, 196], ["demo.load_dcm", "numpy.transpose", "demo.auto_liver_mask", "demo.crop_mask"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.load_dcm", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.auto_liver_mask", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.crop_mask"], ["", "", "def", "preprocess_dcm", "(", "fpath", ")", ":", "\n", "    ", "img", ",", "reader", "=", "load_dcm", "(", "fpath", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "img", "=", "img", "[", ":", ":", "-", "1", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "liver_mask", "=", "auto_liver_mask", "(", "img", ")", "\n", "img", "=", "crop_mask", "(", "img", ",", "liver_mask", ")", "\n", "return", "img", ",", "reader", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.load_dcm": [[197, 206], ["SimpleITK.ImageSeriesReader", "sitk.ImageSeriesReader.GetGDCMSeriesFileNames", "sitk.ImageSeriesReader.SetFileNames", "sitk.ImageSeriesReader.MetaDataDictionaryArrayUpdateOn", "sitk.ImageSeriesReader.LoadPrivateTagsOn", "sitk.ImageSeriesReader.Execute", "SimpleITK.GetArrayFromImage"], "function", ["None"], ["", "def", "load_dcm", "(", "fpath", ")", ":", "\n", "    ", "reader", "=", "sitk", ".", "ImageSeriesReader", "(", ")", "\n", "dicom_names", "=", "reader", ".", "GetGDCMSeriesFileNames", "(", "fpath", ")", "\n", "reader", ".", "SetFileNames", "(", "dicom_names", ")", "\n", "reader", ".", "MetaDataDictionaryArrayUpdateOn", "(", ")", "\n", "reader", ".", "LoadPrivateTagsOn", "(", ")", "\n", "image", "=", "reader", ".", "Execute", "(", ")", "\n", "image_array", "=", "sitk", ".", "GetArrayFromImage", "(", "image", ")", "# z, y, x", "\n", "return", "image_array", ",", "reader", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.auto_liver_mask": [[207, 237], ["skimage.filters.gaussian", "numpy.zeros_like", "print", "numpy.ones_like", "skimage.measure.label", "skimage.measure.regionprops", "max", "numpy.sum", "concurrent.futures.ProcessPoolExecutor", "list", "tqdm.tqdm", "numpy.sum", "range", "skimage.morphology.disk", "zip", "executor.map", "len"], "function", ["None"], ["", "def", "auto_liver_mask", "(", "vol", ",", "ths", "=", "[", "(", "80", ",", "140", ")", ",", "(", "110", ",", "160", ")", ",", "(", "70", ",", "90", ")", ",", "(", "60", ",", "80", ")", ",", "(", "50", ",", "70", ")", ",", "(", "40", ",", "60", ")", ",", "(", "30", ",", "50", ")", ",", "(", "20", ",", "40", ")", ",", "(", "10", ",", "30", ")", ",", "(", "140", ",", "180", ")", ",", "(", "160", ",", "200", ")", "]", ")", ":", "\n", "    ", "vol", "=", "filters", ".", "gaussian", "(", "vol", ",", "sigma", "=", "2", ",", "preserve_range", "=", "True", ")", "\n", "mask", "=", "np", ".", "zeros_like", "(", "vol", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "max_area", "=", "0", "\n", "for", "th_lo", ",", "th_hi", "in", "ths", ":", "\n", "        ", "print", "(", "th_lo", ",", "th_hi", ")", "\n", "bw", "=", "np", ".", "ones_like", "(", "vol", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "bw", "[", "vol", "<", "th_lo", "]", "=", "0", "\n", "bw", "[", "vol", ">", "th_hi", "]", "=", "0", "\n", "if", "np", ".", "sum", "(", "bw", ")", "<=", "max_area", ":", "\n", "            ", "continue", "\n", "", "with", "concurrent", ".", "futures", ".", "ProcessPoolExecutor", "(", "8", ")", "as", "executor", ":", "\n", "            ", "jobs", "=", "list", "(", "range", "(", "bw", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "args1", "=", "[", "bw", "[", ":", ",", ":", ",", "z", "]", "for", "z", "in", "jobs", "]", "\n", "args2", "=", "[", "morphology", ".", "disk", "(", "35", ")", "for", "z", "in", "jobs", "]", "\n", "for", "idx", ",", "ret", "in", "tqdm", ".", "tqdm", "(", "zip", "(", "jobs", ",", "executor", ".", "map", "(", "filters", ".", "median", ",", "args1", ",", "args2", ")", ")", ",", "total", "=", "len", "(", "jobs", ")", ")", ":", "\n", "                ", "bw", "[", ":", ",", ":", ",", "jobs", "[", "idx", "]", "]", "=", "ret", "\n", "# for z in range(bw.shape[-1]):", "\n", "#     bw[:, :, z] = filters.median(bw[:, :, z], morphology.disk(35))", "\n", "", "", "if", "np", ".", "sum", "(", "bw", ")", "<=", "max_area", ":", "\n", "            ", "continue", "\n", "", "labeled_seg", "=", "measure", ".", "label", "(", "bw", ",", "connectivity", "=", "1", ")", "\n", "regions", "=", "measure", ".", "regionprops", "(", "labeled_seg", ")", "\n", "max_region", "=", "max", "(", "regions", ",", "key", "=", "lambda", "x", ":", "x", ".", "area", ")", "\n", "if", "max_region", ".", "area", "<=", "max_area", ":", "\n", "            ", "continue", "\n", "", "max_area", "=", "max_region", ".", "area", "\n", "mask", "=", "labeled_seg", "==", "max_region", ".", "label", "\n", "", "assert", "max_area", ">", "0", ",", "'Failed to find the liver area!'", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.crop": [[238, 241], ["scipy.ndimage.zoom", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "crop", "(", "arr", ",", "bound_l", ",", "bound_r", ",", "target_shape", ",", "order", "=", "1", ")", ":", "\n", "    ", "cropped", "=", "arr", "[", "bound_l", "[", "0", "]", ":", "bound_r", "[", "0", "]", ",", "bound_l", "[", "1", "]", ":", "bound_r", "[", "1", "]", ",", "bound_l", "[", "2", "]", ":", "bound_r", "[", "2", "]", "]", "\n", "return", "scipy", ".", "ndimage", ".", "zoom", "(", "cropped", ",", "np", ".", "array", "(", "target_shape", ")", "/", "np", ".", "array", "(", "cropped", ".", "shape", ")", ",", "order", "=", "order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.wl_normalization": [[242, 245], ["skimage.exposure.rescale_intensity", "skimage.exposure.rescale_intensity", "skimage.exposure.rescale_intensity.astype"], "function", ["None"], ["", "def", "wl_normalization", "(", "img", ",", "w", "=", "290", ",", "l", "=", "120", ")", ":", "\n", "    ", "img", "=", "skimage", ".", "exposure", ".", "rescale_intensity", "(", "img", ",", "in_range", "=", "(", "l", "-", "w", "/", "2", ",", "l", "+", "w", "/", "2", ")", ",", "out_range", "=", "(", "0", ",", "255", ")", ")", "\n", "return", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.crop_mask": [[246, 255], ["numpy.array", "numpy.max", "numpy.min", "numpy.maximum", "numpy.maximum", "numpy.minimum", "wl_normalization().astype", "numpy.nonzero", "demo.wl_normalization", "demo.crop"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.wl_normalization", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.crop"], ["", "def", "crop_mask", "(", "volume", ",", "segmentation", ",", "target_shape", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "    ", "indices", "=", "np", ".", "array", "(", "np", ".", "nonzero", "(", "segmentation", ")", ")", "\n", "bound_r", "=", "np", ".", "max", "(", "indices", ",", "axis", "=", "-", "1", ")", "\n", "bound_l", "=", "np", ".", "min", "(", "indices", ",", "axis", "=", "-", "1", ")", "\n", "box_size", "=", "bound_r", "-", "bound_l", "+", "1", "\n", "padding", "=", "np", ".", "maximum", "(", "(", "box_size", "*", "0.1", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "5", ")", "\n", "bound_l", "=", "np", ".", "maximum", "(", "bound_l", "-", "padding", ",", "0", ")", "\n", "bound_r", "=", "np", ".", "minimum", "(", "bound_r", "+", "padding", "+", "1", ",", "segmentation", ".", "shape", ")", "\n", "return", "wl_normalization", "(", "crop", "(", "volume", ",", "bound_l", ",", "bound_r", ",", "target_shape", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.demo.show_image": [[256, 281], ["matplotlib.subplots", "axes.flatten.flatten", "zip", "len", "range", "fig.savefig", "matplotlib.close", "numpy.array", "len", "numpy.transpose", "numpy.transpose", "len", "ax.imshow", "numpy.max", "ax.imshow", "ax.imshow", "matplotlib.get_cmap", "matplotlib.get_cmap", "matplotlib.colors.NoNorm", "matplotlib.colors.NoNorm"], "function", ["None"], ["", "def", "show_image", "(", "imgs", ",", "fname", "=", "None", ",", "cmap", "=", "'gray'", ",", "norm", "=", "False", ",", "vmin", "=", "0", ",", "vmax", "=", "1", ",", "transpose", "=", "'z'", ",", "origin", "=", "'lower'", ")", ":", "\n", "    ", "if", "len", "(", "imgs", ".", "shape", ")", "==", "3", ":", "\n", "        ", "if", "not", "norm", ":", "\n", "            ", "if", "np", ".", "max", "(", "imgs", ")", "<", "5", ":", "\n", "                ", "imgs", "=", "imgs", "*", "255.0", "\n", "", "imgs", "=", "np", ".", "array", "(", "imgs", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "", "if", "transpose", "==", "'z'", ":", "\n", "        ", "if", "len", "(", "imgs", ".", "shape", ")", "==", "3", ":", "\n", "            ", "imgs", "=", "np", ".", "transpose", "(", "imgs", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "imgs", "=", "np", ".", "transpose", "(", "imgs", ",", "(", "2", ",", "0", ",", "1", ",", "3", ")", ")", "\n", "", "", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "4", ",", "4", ",", "figsize", "=", "(", "16", ",", "16", ")", ")", "\n", "axes", "=", "axes", ".", "flatten", "(", ")", "\n", "for", "i", ",", "ax", "in", "zip", "(", "range", "(", "0", ",", "imgs", ".", "shape", "[", "0", "]", ",", "imgs", ".", "shape", "[", "0", "]", "//", "16", ")", ",", "axes", ")", ":", "\n", "        ", "if", "len", "(", "imgs", ".", "shape", ")", "==", "4", ":", "\n", "            ", "ax", ".", "imshow", "(", "imgs", "[", "i", "]", ",", "aspect", "=", "'equal'", ",", "origin", "=", "origin", ")", "\n", "", "elif", "norm", ":", "\n", "            ", "ax", ".", "imshow", "(", "imgs", "[", "i", "]", ",", "cmap", "=", "plt", ".", "get_cmap", "(", "cmap", ")", ",", "vmin", "=", "vmin", ",", "vmax", "=", "vmax", ",", "aspect", "=", "'equal'", ",", "origin", "=", "origin", ")", "\n", "", "else", ":", "\n", "            ", "ax", ".", "imshow", "(", "imgs", "[", "i", "]", ",", "cmap", "=", "plt", ".", "get_cmap", "(", "cmap", ")", ",", "norm", "=", "matplotlib", ".", "colors", ".", "NoNorm", "(", ")", ",", "aspect", "=", "'equal'", ",", "origin", "=", "origin", ")", "\n", "", "", "if", "fname", ":", "\n", "        ", "fig", ".", "savefig", "(", "fname", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "", "else", ":", "\n", "        ", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.eval.main": [[36, 126], ["eval.find_checkpoint_step", "print", "os.path.dirname", "Framework.net_args.update", "Framework", "print", "eval", "eval.", "tensorflow.Session", "tensorflow.global_variables_initializer().run", "tensorflow.train.Saver", "tf.train.Saver.restore", "tflearn.is_training", "tflearn.is_training", "os.path.join", "print", "args.checkpoint.split", "int", "print", "eval", "Framework.net_args.update", "open", "json.load", "json.load.get", "json.load.get", "len", "tensorflow.get_collection", "args.val_subset.split", "os.path.exists", "os.mkdir", "eval.short_name", "open", "json.load", "print", "eval", "os.path.join", "args.gpu.split", "json.load.get", "eval", "tensorflow.global_variables_initializer", "str", "open", "print", "Dataset.generator", "Framework.validate", "range", "print", "print", "print", "print", "print", "os.path.join", "len", "print", "str", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.eval.find_checkpoint_step", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.FileRestorer.restore", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.eval.short_name", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.brain.Dataset.generator", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.framework.FrameworkUnsupervised.validate"], ["def", "main", "(", ")", ":", "\n", "    ", "if", "args", ".", "checkpoint", "is", "None", ":", "\n", "        ", "print", "(", "'Checkpoint must be specified!'", ")", "\n", "return", "\n", "", "if", "':'", "in", "args", ".", "checkpoint", ":", "\n", "        ", "args", ".", "checkpoint", ",", "steps", "=", "args", ".", "checkpoint", ".", "split", "(", "':'", ")", "\n", "steps", "=", "int", "(", "steps", ")", "\n", "", "else", ":", "\n", "        ", "steps", "=", "None", "\n", "", "args", ".", "checkpoint", "=", "find_checkpoint_step", "(", "args", ".", "checkpoint", ",", "steps", ")", "\n", "print", "(", "args", ".", "checkpoint", ")", "\n", "model_dir", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "checkpoint", ")", "\n", "try", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'args.json'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "model_args", "=", "json", ".", "load", "(", "f", ")", "\n", "", "print", "(", "model_args", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "e", ")", "\n", "model_args", "=", "{", "}", "\n", "\n", "", "if", "args", ".", "dataset", "is", "None", ":", "\n", "        ", "args", ".", "dataset", "=", "model_args", "[", "'dataset'", "]", "\n", "", "if", "args", ".", "data_args", "is", "None", ":", "\n", "        ", "args", ".", "data_args", "=", "model_args", "[", "'data_args'", "]", "\n", "\n", "", "Framework", "=", "network", ".", "FrameworkUnsupervised", "\n", "Framework", ".", "net_args", "[", "'base_network'", "]", "=", "model_args", "[", "'base_network'", "]", "\n", "Framework", ".", "net_args", "[", "'n_cascades'", "]", "=", "model_args", "[", "'n_cascades'", "]", "\n", "Framework", ".", "net_args", "[", "'rep'", "]", "=", "args", ".", "rep", "\n", "Framework", ".", "net_args", ".", "update", "(", "eval", "(", "'dict({})'", ".", "format", "(", "model_args", "[", "'net_args'", "]", ")", ")", ")", "\n", "if", "args", ".", "net_args", "is", "not", "None", ":", "\n", "        ", "Framework", ".", "net_args", ".", "update", "(", "eval", "(", "'dict({})'", ".", "format", "(", "args", ".", "net_args", ")", ")", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dataset", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "cfg", "=", "json", ".", "load", "(", "f", ")", "\n", "image_size", "=", "cfg", ".", "get", "(", "'image_size'", ",", "[", "128", ",", "128", ",", "128", "]", ")", "\n", "image_type", "=", "cfg", ".", "get", "(", "'image_type'", ")", "\n", "", "gpus", "=", "0", "if", "args", ".", "gpu", "==", "'-1'", "else", "len", "(", "args", ".", "gpu", ".", "split", "(", "','", ")", ")", "\n", "framework", "=", "Framework", "(", "devices", "=", "gpus", ",", "image_size", "=", "image_size", ",", "segmentation_class_value", "=", "cfg", ".", "get", "(", "\n", "'segmentation_class_value'", ",", "None", ")", ",", "fast_reconstruction", "=", "args", ".", "fast_reconstruction", ",", "validation", "=", "True", ")", "\n", "print", "(", "'Graph built'", ")", "\n", "\n", "Dataset", "=", "eval", "(", "'data_util.{}.Dataset'", ".", "format", "(", "image_type", ")", ")", "\n", "ds", "=", "Dataset", "(", "args", ".", "dataset", ",", "batch_size", "=", "args", ".", "batch", ",", "paired", "=", "args", ".", "paired", ",", "**", "\n", "eval", "(", "'dict({})'", ".", "format", "(", "args", ".", "data_args", ")", ")", ")", "\n", "\n", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", ")", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ")", ")", "\n", "checkpoint", "=", "args", ".", "checkpoint", "\n", "saver", ".", "restore", "(", "sess", ",", "checkpoint", ")", "\n", "tflearn", ".", "is_training", "(", "False", ",", "session", "=", "sess", ")", "\n", "\n", "val_subsets", "=", "[", "data_util", ".", "liver", ".", "Split", ".", "VALID", "]", "\n", "if", "args", ".", "val_subset", "is", "not", "None", ":", "\n", "        ", "val_subsets", "=", "args", ".", "val_subset", ".", "split", "(", "','", ")", "\n", "\n", "", "tflearn", ".", "is_training", "(", "False", ",", "session", "=", "sess", ")", "\n", "keys", "=", "[", "'pt_mask'", ",", "'landmark_dists'", ",", "'jaccs'", ",", "'dices'", ",", "'jacobian_det'", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'evaluate'", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "'evaluate'", ")", "\n", "", "path_prefix", "=", "os", ".", "path", ".", "join", "(", "'evaluate'", ",", "short_name", "(", "checkpoint", ")", ")", "\n", "if", "args", ".", "rep", ">", "1", ":", "\n", "        ", "path_prefix", "=", "path_prefix", "+", "'-rep'", "+", "str", "(", "args", ".", "rep", ")", "\n", "", "if", "args", ".", "name", "is", "not", "None", ":", "\n", "        ", "path_prefix", "=", "path_prefix", "+", "'-'", "+", "args", ".", "name", "\n", "", "for", "val_subset", "in", "val_subsets", ":", "\n", "        ", "if", "args", ".", "val_subset", "is", "not", "None", ":", "\n", "            ", "output_fname", "=", "path_prefix", "+", "'-'", "+", "str", "(", "val_subset", ")", "+", "'.txt'", "\n", "", "else", ":", "\n", "            ", "output_fname", "=", "path_prefix", "+", "'.txt'", "\n", "", "with", "open", "(", "output_fname", ",", "'w'", ")", "as", "fo", ":", "\n", "            ", "print", "(", "\"Validation subset {}\"", ".", "format", "(", "val_subset", ")", ")", "\n", "gen", "=", "ds", ".", "generator", "(", "val_subset", ",", "loop", "=", "False", ")", "\n", "results", "=", "framework", ".", "validate", "(", "sess", ",", "gen", ",", "keys", "=", "keys", ",", "summary", "=", "False", ",", "show_tqdm", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "results", "[", "'jaccs'", "]", ")", ")", ":", "\n", "                ", "print", "(", "results", "[", "'id1'", "]", "[", "i", "]", ",", "results", "[", "'id2'", "]", "[", "i", "]", ",", "np", ".", "mean", "(", "results", "[", "'dices'", "]", "[", "i", "]", ")", ",", "np", ".", "mean", "(", "results", "[", "'jaccs'", "]", "[", "i", "]", ")", ",", "np", ".", "mean", "(", "\n", "results", "[", "'landmark_dists'", "]", "[", "i", "]", ")", ",", "results", "[", "'jacobian_det'", "]", "[", "i", "]", ",", "file", "=", "fo", ")", "\n", "", "print", "(", "'Summary'", ",", "file", "=", "fo", ")", "\n", "jaccs", ",", "dices", ",", "landmarks", "=", "results", "[", "'jaccs'", "]", ",", "results", "[", "'dices'", "]", ",", "results", "[", "'landmark_dists'", "]", "\n", "jacobian_det", "=", "results", "[", "'jacobian_det'", "]", "\n", "print", "(", "\"Dice score: {} ({})\"", ".", "format", "(", "np", ".", "mean", "(", "dices", ")", ",", "np", ".", "std", "(", "\n", "np", ".", "mean", "(", "dices", ",", "axis", "=", "-", "1", ")", ")", ")", ",", "file", "=", "fo", ")", "\n", "print", "(", "\"Jacc score: {} ({})\"", ".", "format", "(", "np", ".", "mean", "(", "jaccs", ")", ",", "np", ".", "std", "(", "\n", "np", ".", "mean", "(", "jaccs", ",", "axis", "=", "-", "1", ")", ")", ")", ",", "file", "=", "fo", ")", "\n", "print", "(", "\"Landmark distance: {} ({})\"", ".", "format", "(", "np", ".", "mean", "(", "landmarks", ")", ",", "np", ".", "std", "(", "\n", "np", ".", "mean", "(", "landmarks", ",", "axis", "=", "-", "1", ")", ")", ")", ",", "file", "=", "fo", ")", "\n", "print", "(", "\"Jacobian determinant: {} ({})\"", ".", "format", "(", "np", ".", "mean", "(", "\n", "jacobian_det", ")", ",", "np", ".", "std", "(", "jacobian_det", ")", ")", ",", "file", "=", "fo", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.eval.short_name": [[128, 132], ["os.path.split", "os.path.split"], "function", ["None"], ["", "", "", "def", "short_name", "(", "checkpoint", ")", ":", "\n", "    ", "cpath", ",", "steps", "=", "os", ".", "path", ".", "split", "(", "checkpoint", ")", "\n", "_", ",", "exp", "=", "os", ".", "path", ".", "split", "(", "cpath", ")", "\n", "return", "exp", "+", "'-'", "+", "steps", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.eval.find_checkpoint_step": [[134, 144], ["re.compile", "os.listdir", "re.compile.match", "min", "int", "checkpoints.append", "pattern.match.group", "os.path.join", "abs", "f.replace"], "function", ["None"], ["", "def", "find_checkpoint_step", "(", "checkpoint_path", ",", "target_steps", "=", "None", ")", ":", "\n", "    ", "pattern", "=", "re", ".", "compile", "(", "r'model-(\\d+).index'", ")", "\n", "checkpoints", "=", "[", "]", "\n", "for", "f", "in", "os", ".", "listdir", "(", "checkpoint_path", ")", ":", "\n", "        ", "m", "=", "pattern", ".", "match", "(", "f", ")", "\n", "if", "m", ":", "\n", "            ", "steps", "=", "int", "(", "m", ".", "group", "(", "1", ")", ")", "\n", "checkpoints", ".", "append", "(", "(", "-", "steps", "if", "target_steps", "is", "None", "else", "abs", "(", "\n", "target_steps", "-", "steps", ")", ",", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "f", ".", "replace", "(", "'.index'", ",", "''", ")", ")", ")", ")", "\n", "", "", "return", "min", "(", "checkpoints", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.None.train.main": [[56, 239], ["os.path.dirname", "Framework.net_args.update", "Framework", "eval", "print", "print", "os.path.realpath", "len", "eval", "open", "json.load", "json.load.get", "json.load.get", "dict", "dict.update", "tensorflow.Session", "tensorflow.train.Saver", "eval", "eval.update", "print", "eval.", "Dataset.generator", "time.time", "args.gpu.split", "os.path.join", "json.load.get", "tensorflow.get_collection", "tensorflow.global_variables_initializer().run", "os.path.isdir", "tensorflow.global_variables_initializer().run", "args.checkpoint.split", "print", "print", "os.path.join", "os.path.join", "tensorflow.summary.FileWriter", "hasattr", "timeit.default_timer", "next", "next.pop", "next.pop", "next.pop", "timeit.default_timer", "tflearn.is_training", "sess.run", "tensorflow.ConfigProto", "os.path.join", "tensorflow.train.latest_checkpoint", "int", "tensorflow.train.Saver", "tf.train.Saver.restore", "os.path.basename", "os.path.exists", "os.makedirs", "os.path.join", "os.path.exists", "os.makedirs", "open", "json.dump", "Framework.get_lr", "train.main.get_lr"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.brain.Dataset.generator", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.FileRestorer.restore"], ["def", "main", "(", ")", ":", "\n", "    ", "repoRoot", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "\n", "if", "args", ".", "finetune", "is", "not", "None", ":", "\n", "        ", "args", ".", "clear_steps", "=", "True", "\n", "\n", "", "batchSize", "=", "args", ".", "batch", "\n", "iterationSize", "=", "args", ".", "round", "\n", "\n", "gpus", "=", "0", "if", "args", ".", "gpu", "==", "'-1'", "else", "len", "(", "args", ".", "gpu", ".", "split", "(", "','", ")", ")", "\n", "\n", "Framework", "=", "network", ".", "FrameworkUnsupervised", "\n", "Framework", ".", "net_args", "[", "'base_network'", "]", "=", "args", ".", "base_network", "\n", "Framework", ".", "net_args", "[", "'n_cascades'", "]", "=", "args", ".", "n_cascades", "\n", "Framework", ".", "net_args", "[", "'rep'", "]", "=", "args", ".", "rep", "\n", "Framework", ".", "net_args", ".", "update", "(", "eval", "(", "'dict({})'", ".", "format", "(", "args", ".", "net_args", ")", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dataset", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "cfg", "=", "json", ".", "load", "(", "f", ")", "\n", "image_size", "=", "cfg", ".", "get", "(", "'image_size'", ",", "[", "128", ",", "128", ",", "128", "]", ")", "\n", "image_type", "=", "cfg", ".", "get", "(", "'image_type'", ")", "\n", "", "framework", "=", "Framework", "(", "devices", "=", "gpus", ",", "image_size", "=", "image_size", ",", "segmentation_class_value", "=", "cfg", ".", "get", "(", "'segmentation_class_value'", ",", "None", ")", ",", "fast_reconstruction", "=", "args", ".", "fast_reconstruction", ")", "\n", "Dataset", "=", "eval", "(", "'data_util.{}.Dataset'", ".", "format", "(", "image_type", ")", ")", "\n", "print", "(", "'Graph built.'", ")", "\n", "\n", "# load training set and validation set", "\n", "\n", "def", "set_tf_keys", "(", "feed_dict", ",", "**", "kwargs", ")", ":", "\n", "        ", "ret", "=", "dict", "(", "[", "(", "k", "+", "':0'", ",", "v", ")", "for", "k", ",", "v", "in", "feed_dict", ".", "items", "(", ")", "]", ")", "\n", "ret", ".", "update", "(", "[", "(", "k", "+", "':0'", ",", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "]", ")", "\n", "return", "ret", "\n", "\n", "", "with", "tf", ".", "Session", "(", "config", "=", "tf", ".", "ConfigProto", "(", ")", ")", "as", "sess", ":", "\n", "        ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ")", ",", "max_to_keep", "=", "5", ",", "keep_checkpoint_every_n_hours", "=", "5", ")", "\n", "if", "args", ".", "checkpoint", "is", "None", ":", "\n", "            ", "steps", "=", "0", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "'\\\\'", "not", "in", "args", ".", "checkpoint", "and", "'/'", "not", "in", "args", ".", "checkpoint", ":", "\n", "                ", "args", ".", "checkpoint", "=", "os", ".", "path", ".", "join", "(", "\n", "repoRoot", ",", "'weights'", ",", "args", ".", "checkpoint", ")", "\n", "", "if", "os", ".", "path", ".", "isdir", "(", "args", ".", "checkpoint", ")", ":", "\n", "                ", "args", ".", "checkpoint", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "args", ".", "checkpoint", ")", "\n", "\n", "", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", ")", "\n", "checkpoints", "=", "args", ".", "checkpoint", ".", "split", "(", "';'", ")", "\n", "if", "args", ".", "clear_steps", ":", "\n", "                ", "steps", "=", "0", "\n", "", "else", ":", "\n", "                ", "steps", "=", "int", "(", "re", ".", "search", "(", "'model-(\\d+)'", ",", "checkpoints", "[", "0", "]", ")", ".", "group", "(", "1", ")", ")", "\n", "", "for", "cp", "in", "checkpoints", ":", "\n", "                ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "cp", ")", "\n", "\n", "", "", "data_args", "=", "eval", "(", "'dict({})'", ".", "format", "(", "args", ".", "data_args", ")", ")", "\n", "data_args", ".", "update", "(", "framework", ".", "data_args", ")", "\n", "print", "(", "'data_args'", ",", "data_args", ")", "\n", "dataset", "=", "Dataset", "(", "args", ".", "dataset", ",", "**", "data_args", ")", "\n", "if", "args", ".", "finetune", "is", "not", "None", ":", "\n", "            ", "if", "'finetune-train-%s'", "%", "args", ".", "finetune", "in", "dataset", ".", "schemes", ":", "\n", "                ", "dataset", ".", "schemes", "[", "Split", ".", "TRAIN", "]", "=", "dataset", ".", "schemes", "[", "'finetune-train-%s'", "%", "\n", "args", ".", "finetune", "]", "\n", "", "if", "'finetune-val-%s'", "%", "args", ".", "finetune", "in", "dataset", ".", "schemes", ":", "\n", "                ", "dataset", ".", "schemes", "[", "Split", ".", "VALID", "]", "=", "dataset", ".", "schemes", "[", "'finetune-val-%s'", "%", "\n", "args", ".", "finetune", "]", "\n", "", "print", "(", "'train'", ",", "dataset", ".", "schemes", "[", "Split", ".", "TRAIN", "]", ")", "\n", "print", "(", "'val'", ",", "dataset", ".", "schemes", "[", "Split", ".", "VALID", "]", ")", "\n", "", "generator", "=", "dataset", ".", "generator", "(", "Split", ".", "TRAIN", ",", "batch_size", "=", "batchSize", ",", "loop", "=", "True", ")", "\n", "\n", "if", "not", "args", ".", "debug", ":", "\n", "            ", "if", "args", ".", "finetune", "is", "not", "None", ":", "\n", "                ", "run_id", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "checkpoint", ")", ")", "\n", "if", "not", "run_id", ".", "endswith", "(", "'_ft'", "+", "args", ".", "finetune", ")", ":", "\n", "                    ", "run_id", "=", "run_id", "+", "'_ft'", "+", "args", ".", "finetune", "\n", "", "", "else", ":", "\n", "                ", "pad", "=", "''", "\n", "retry", "=", "1", "\n", "while", "True", ":", "\n", "                    ", "dt", "=", "datetime", ".", "datetime", ".", "now", "(", "\n", "tz", "=", "datetime", ".", "timezone", "(", "datetime", ".", "timedelta", "(", "hours", "=", "8", ")", ")", ")", "\n", "run_id", "=", "dt", ".", "strftime", "(", "'%b%d-%H%M'", ")", "+", "pad", "\n", "modelPrefix", "=", "os", ".", "path", ".", "join", "(", "repoRoot", ",", "'weights'", ",", "run_id", ")", "\n", "try", ":", "\n", "                        ", "os", ".", "makedirs", "(", "modelPrefix", ")", "\n", "break", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "print", "(", "'Conflict with {}! Retry...'", ".", "format", "(", "run_id", ")", ")", "\n", "pad", "=", "'_{}'", ".", "format", "(", "retry", ")", "\n", "retry", "+=", "1", "\n", "", "", "", "modelPrefix", "=", "os", ".", "path", ".", "join", "(", "repoRoot", ",", "'weights'", ",", "run_id", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "modelPrefix", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "modelPrefix", ")", "\n", "", "if", "args", ".", "name", "is", "not", "None", ":", "\n", "                ", "run_id", "+=", "'_'", "+", "args", ".", "name", "\n", "", "if", "args", ".", "logs", "is", "None", ":", "\n", "                ", "log_dir", "=", "'logs'", "\n", "", "else", ":", "\n", "                ", "log_dir", "=", "os", ".", "path", ".", "join", "(", "'logs'", ",", "args", ".", "logs", ")", "\n", "", "summary_path", "=", "os", ".", "path", ".", "join", "(", "repoRoot", ",", "log_dir", ",", "run_id", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "summary_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "summary_path", ")", "\n", "", "summaryWriter", "=", "tf", ".", "summary", ".", "FileWriter", "(", "summary_path", ",", "sess", ".", "graph", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "modelPrefix", ",", "'args.json'", ")", ",", "'w'", ")", "as", "fo", ":", "\n", "                ", "json", ".", "dump", "(", "vars", "(", "args", ")", ",", "fo", ")", "\n", "\n", "", "", "if", "args", ".", "finetune", "is", "not", "None", ":", "\n", "            ", "learningRates", "=", "[", "1e-5", "/", "2", ",", "1e-5", "/", "2", ",", "1e-5", "/", "2", ",", "1e-5", "/", "4", ",", "1e-5", "/", "8", "]", "\n", "#args.epochs = 1", "\n", "", "else", ":", "\n", "            ", "learningRates", "=", "[", "1e-4", ",", "1e-4", ",", "1e-4", ",", "1e-4", "/", "2", ",", "1e-4", "/", "4", ",", "\n", "1e-4", "/", "8", ",", "1e-4", "/", "16", ",", "1e-4", "/", "32", ",", "1e-4", "/", "64", "]", "\n", "\n", "# Training", "\n", "\n", "", "def", "get_lr", "(", "steps", ")", ":", "\n", "            ", "m", "=", "args", ".", "lr", "/", "learningRates", "[", "0", "]", "\n", "return", "m", "*", "learningRates", "[", "steps", "//", "iterationSize", "]", "\n", "\n", "", "last_save_stamp", "=", "time", ".", "time", "(", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "if", "hasattr", "(", "framework", ",", "'get_lr'", ")", ":", "\n", "                ", "lr", "=", "framework", ".", "get_lr", "(", "steps", ",", "batchSize", ")", "\n", "", "else", ":", "\n", "                ", "lr", "=", "get_lr", "(", "steps", ")", "\n", "", "t0", "=", "default_timer", "(", ")", "\n", "fd", "=", "next", "(", "generator", ")", "\n", "fd", ".", "pop", "(", "'mask'", ",", "[", "]", ")", "\n", "fd", ".", "pop", "(", "'id1'", ",", "[", "]", ")", "\n", "fd", ".", "pop", "(", "'id2'", ",", "[", "]", ")", "\n", "t1", "=", "default_timer", "(", ")", "\n", "tflearn", ".", "is_training", "(", "True", ",", "session", "=", "sess", ")", "\n", "summ", ",", "_", "=", "sess", ".", "run", "(", "[", "framework", ".", "summaryExtra", ",", "framework", ".", "adamOpt", "]", ",", "\n", "set_tf_keys", "(", "fd", ",", "learningRate", "=", "lr", ")", ")", "\n", "\n", "for", "v", "in", "tf", ".", "Summary", "(", ")", ".", "FromString", "(", "summ", ")", ".", "value", ":", "\n", "                ", "if", "v", ".", "tag", "==", "'loss'", ":", "\n", "                    ", "loss", "=", "v", ".", "simple_value", "\n", "\n", "", "", "steps", "+=", "1", "\n", "if", "args", ".", "debug", "or", "steps", "%", "10", "==", "0", ":", "\n", "                ", "if", "steps", ">=", "args", ".", "epochs", "*", "iterationSize", ":", "\n", "                    ", "break", "\n", "\n", "", "if", "not", "args", ".", "debug", ":", "\n", "                    ", "summaryWriter", ".", "add_summary", "(", "summ", ",", "steps", ")", "\n", "\n", "", "if", "steps", "%", "1000", "==", "0", ":", "\n", "                    ", "if", "hasattr", "(", "framework", ",", "'summaryImages'", ")", ":", "\n", "                        ", "summ", ",", "=", "sess", ".", "run", "(", "[", "framework", ".", "summaryImages", "]", ",", "\n", "set_tf_keys", "(", "fd", ")", ")", "\n", "summaryWriter", ".", "add_summary", "(", "summ", ",", "steps", ")", "\n", "\n", "", "", "if", "steps", "<", "500", "or", "steps", "%", "500", "==", "0", ":", "\n", "                    ", "print", "(", "'*%s* '", "%", "run_id", ",", "\n", "time", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ",", "time", ".", "localtime", "(", ")", ")", ",", "\n", "'Steps %d, Total time %.2f, data %.2f%%. Loss %.3e lr %.3e'", "%", "(", "steps", ",", "\n", "default_timer", "(", ")", "-", "t0", ",", "\n", "(", "t1", "-", "t0", ")", "/", "(", "\n", "default_timer", "(", ")", "-", "t0", ")", ",", "\n", "loss", ",", "\n", "lr", ")", ",", "\n", "end", "=", "'\\n'", ")", "\n", "\n", "", "if", "time", ".", "time", "(", ")", "-", "last_save_stamp", ">", "3600", "or", "steps", "%", "iterationSize", "==", "iterationSize", "-", "500", ":", "\n", "                    ", "last_save_stamp", "=", "time", ".", "time", "(", ")", "\n", "saver", ".", "save", "(", "sess", ",", "os", ".", "path", ".", "join", "(", "modelPrefix", ",", "'model'", ")", ",", "\n", "global_step", "=", "steps", ",", "write_meta_graph", "=", "False", ")", "\n", "\n", "", "if", "args", ".", "debug", "or", "steps", "%", "args", ".", "val_steps", "==", "0", ":", "\n", "                    ", "try", ":", "\n", "                        ", "val_gen", "=", "dataset", ".", "generator", "(", "\n", "Split", ".", "VALID", ",", "loop", "=", "False", ",", "batch_size", "=", "batchSize", ")", "\n", "metrics", "=", "framework", ".", "validate", "(", "\n", "sess", ",", "val_gen", ",", "summary", "=", "True", ")", "\n", "val_summ", "=", "tf", ".", "Summary", "(", "value", "=", "[", "\n", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'val_'", "+", "k", ",", "simple_value", "=", "v", ")", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", "\n", "]", ")", "\n", "summaryWriter", ".", "add_summary", "(", "val_summ", ",", "steps", ")", "\n", "", "except", ":", "\n", "                        ", "if", "steps", "==", "args", ".", "val_steps", ":", "\n", "                            ", "print", "(", "'Step {}, validation failed!'", ".", "format", "(", "steps", ")", ")", "\n", "", "", "", "", "", "", "print", "(", "'Finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.__init__.Path.__init__": [[4, 8], ["os.path.exists", "os.mkdir"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "", "def", "__call__", "(", "self", ",", "*", "names", ")", ":", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.__init__.Path.__call__": [[8, 10], ["os.path.join"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "*", "names", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "*", "(", "(", "self", ".", "path", ",", ")", "+", "names", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.liver.Hdf5Reader.__init__": [[15, 21], ["h5py.File", "print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "file", "=", "h5py", ".", "File", "(", "path", ",", "\"r\"", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "print", "(", "'{} not found!'", ".", "format", "(", "path", ")", ")", "\n", "self", ".", "file", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.liver.Hdf5Reader.__getitem__": [[22, 30], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "data", "=", "{", "'id'", ":", "key", "}", "\n", "if", "self", ".", "file", "is", "None", ":", "\n", "            ", "return", "data", "\n", "", "group", "=", "self", ".", "file", "[", "key", "]", "\n", "for", "k", "in", "group", ":", "\n", "            ", "data", "[", "k", "]", "=", "group", "[", "k", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.liver.FileManager.__init__": [[33, 37], ["files.items", "liver.Hdf5Reader"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "files", ")", ":", "\n", "        ", "self", ".", "files", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "files", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "files", "[", "k", "]", "=", "Hdf5Reader", "(", "v", "[", "\"path\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.liver.FileManager.__getitem__": [[38, 50], ["key.find", "key.replace", "key.replace", "KeyError"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "p", "=", "key", ".", "find", "(", "'/'", ")", "\n", "if", "key", "[", ":", "p", "]", "in", "self", ".", "files", ":", "\n", "            ", "ret", "=", "self", ".", "files", "[", "key", "[", ":", "p", "]", "]", "[", "key", "[", "p", "+", "1", ":", "]", "]", "\n", "ret", "[", "'id'", "]", "=", "key", ".", "replace", "(", "'/'", ",", "'_'", ")", "\n", "return", "ret", "\n", "", "elif", "'/'", "in", "self", ".", "files", ":", "\n", "            ", "ret", "=", "self", ".", "files", "[", "'/'", "]", "[", "key", "]", "\n", "ret", "[", "'id'", "]", "=", "key", ".", "replace", "(", "'/'", ",", "'_'", ")", "\n", "return", "ret", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "'{} not found'", ".", "format", "(", "key", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.liver.Dataset.__init__": [[53, 84], ["liver.FileManager", "config[].items", "dict", "liver.Dataset.subset.items", "open", "json.load", "print", "json.load.get", "isinstance", "int", "liver.Dataset.__init__.convert_int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "split_path", ",", "affine", "=", "False", ",", "mask", "=", "False", ",", "paired", "=", "False", ",", "task", "=", "None", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "with", "open", "(", "split_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "files", "=", "FileManager", "(", "config", "[", "'files'", "]", ")", "\n", "self", ".", "subset", "=", "{", "}", "\n", "\n", "for", "k", ",", "v", "in", "config", "[", "'subsets'", "]", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "subset", "[", "k", "]", "=", "{", "}", "\n", "for", "entry", "in", "v", ":", "\n", "                ", "self", ".", "subset", "[", "k", "]", "[", "entry", "]", "=", "self", ".", "files", "[", "entry", "]", "\n", "\n", "", "", "self", ".", "paired", "=", "paired", "\n", "\n", "def", "convert_int", "(", "key", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "return", "int", "(", "key", ")", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "                ", "return", "key", "\n", "", "", "self", ".", "schemes", "=", "dict", "(", "[", "(", "convert_int", "(", "k", ")", ",", "v", ")", "\n", "for", "k", ",", "v", "in", "config", "[", "'schemes'", "]", ".", "items", "(", ")", "]", ")", "\n", "\n", "for", "k", ",", "v", "in", "self", ".", "subset", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'Number of data in {} is {}'", ".", "format", "(", "k", ",", "len", "(", "v", ")", ")", ")", "\n", "\n", "", "self", ".", "task", "=", "task", "\n", "if", "self", ".", "task", "is", "None", ":", "\n", "            ", "self", ".", "task", "=", "config", ".", "get", "(", "\"task\"", ",", "\"registration\"", ")", "\n", "", "if", "not", "isinstance", "(", "self", ".", "task", ",", "list", ")", ":", "\n", "            ", "self", ".", "task", "=", "[", "self", ".", "task", "]", "\n", "\n", "", "self", ".", "batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.liver.Dataset.get_pairs_adj": [[85, 96], ["pairs.append", "pairs.append"], "methods", ["None"], ["", "def", "get_pairs_adj", "(", "self", ",", "data", ")", ":", "\n", "        ", "pairs", "=", "[", "]", "\n", "d1", "=", "None", "\n", "for", "d2", "in", "data", ":", "\n", "            ", "if", "d1", "is", "None", ":", "\n", "                ", "d1", "=", "d2", "\n", "", "else", ":", "\n", "                ", "pairs", ".", "append", "(", "(", "d1", ",", "d2", ")", ")", "\n", "pairs", ".", "append", "(", "(", "d2", ",", "d1", ")", ")", "\n", "d1", "=", "None", "\n", "", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.liver.Dataset.get_pairs": [[97, 105], ["enumerate", "enumerate", "pairs.append"], "methods", ["None"], ["", "def", "get_pairs", "(", "self", ",", "data", ",", "ordered", "=", "True", ")", ":", "\n", "        ", "pairs", "=", "[", "]", "\n", "for", "i", ",", "d1", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "for", "j", ",", "d2", "in", "enumerate", "(", "data", ")", ":", "\n", "                ", "if", "i", "!=", "j", ":", "\n", "                    ", "if", "ordered", "or", "i", "<", "j", ":", "\n", "                        ", "pairs", ".", "append", "(", "(", "d1", ",", "d2", ")", ")", "\n", "", "", "", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.liver.Dataset.generate_pairs": [[106, 119], ["liver.Dataset.get_pairs_adj", "liver.Dataset.get_pairs", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.liver.Dataset.get_pairs_adj", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.liver.Dataset.get_pairs"], ["", "def", "generate_pairs", "(", "self", ",", "arr", ",", "loop", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "paired", ":", "\n", "            ", "sets", "=", "self", ".", "get_pairs_adj", "(", "arr", ")", "\n", "", "else", ":", "\n", "            ", "sets", "=", "self", ".", "get_pairs", "(", "arr", ",", "ordered", "=", "True", ")", "\n", "\n", "", "while", "True", ":", "\n", "            ", "if", "loop", ":", "\n", "                ", "np", ".", "random", ".", "shuffle", "(", "sets", ")", "\n", "", "for", "d1", ",", "d2", "in", "sets", ":", "\n", "                ", "yield", "(", "d1", ",", "d2", ")", "\n", "", "if", "not", "loop", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.liver.Dataset.generator": [[120, 185], ["numpy.ones", "liver.Dataset.generate_pairs", "int", "dict", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.empty", "numpy.empty", "zip", "list", "scheme.items", "numpy.round", "scheme.items", "numpy.ones", "numpy.ones", "range", "liver.Dataset.subset[].values", "numpy.sum", "numpy.sum", "next"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.liver.Dataset.generate_pairs"], ["", "", "", "def", "generator", "(", "self", ",", "subset", ",", "batch_size", "=", "None", ",", "loop", "=", "False", ")", ":", "\n", "        ", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "self", ".", "batch_size", "\n", "", "valid_mask", "=", "np", ".", "ones", "(", "[", "6", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "scheme", "=", "self", ".", "schemes", "[", "subset", "]", "\n", "if", "'registration'", "in", "self", ".", "task", ":", "\n", "            ", "generators", "=", "[", "(", "self", ".", "generate_pairs", "(", "list", "(", "self", ".", "subset", "[", "k", "]", ".", "values", "(", ")", ")", ",", "loop", ")", ")", "\n", "for", "k", ",", "fraction", "in", "scheme", ".", "items", "(", ")", "]", "\n", "fractions", "=", "[", "int", "(", "np", ".", "round", "(", "fraction", "*", "batch_size", ")", ")", "\n", "for", "k", ",", "fraction", "in", "scheme", ".", "items", "(", ")", "]", "\n", "\n", "while", "True", ":", "\n", "                ", "ret", "=", "dict", "(", ")", "\n", "ret", "[", "'voxel1'", "]", "=", "np", ".", "zeros", "(", "\n", "(", "batch_size", ",", "128", ",", "128", ",", "128", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ret", "[", "'voxel2'", "]", "=", "np", ".", "zeros", "(", "\n", "(", "batch_size", ",", "128", ",", "128", ",", "128", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ret", "[", "'seg1'", "]", "=", "np", ".", "zeros", "(", "\n", "(", "batch_size", ",", "128", ",", "128", ",", "128", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ret", "[", "'seg2'", "]", "=", "np", ".", "zeros", "(", "\n", "(", "batch_size", ",", "128", ",", "128", ",", "128", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ret", "[", "'point1'", "]", "=", "np", ".", "ones", "(", "\n", "(", "batch_size", ",", "np", ".", "sum", "(", "valid_mask", ")", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "(", "-", "1", ")", "\n", "ret", "[", "'point2'", "]", "=", "np", ".", "ones", "(", "\n", "(", "batch_size", ",", "np", ".", "sum", "(", "valid_mask", ")", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "(", "-", "1", ")", "\n", "ret", "[", "'id1'", "]", "=", "np", ".", "empty", "(", "(", "batch_size", ")", ",", "dtype", "=", "'<U40'", ")", "\n", "ret", "[", "'id2'", "]", "=", "np", ".", "empty", "(", "(", "batch_size", ")", ",", "dtype", "=", "'<U40'", ")", "\n", "\n", "i", "=", "0", "\n", "flag", "=", "True", "\n", "nums", "=", "fractions", "\n", "for", "gen", ",", "num", "in", "zip", "(", "generators", ",", "nums", ")", ":", "\n", "                    ", "assert", "not", "self", ".", "paired", "or", "num", "%", "2", "==", "0", "\n", "for", "t", "in", "range", "(", "num", ")", ":", "\n", "                        ", "try", ":", "\n", "                            ", "while", "True", ":", "\n", "                                ", "d1", ",", "d2", "=", "next", "(", "gen", ")", "\n", "break", "\n", "", "", "except", "StopIteration", ":", "\n", "                            ", "flag", "=", "False", "\n", "break", "\n", "\n", "", "ret", "[", "'voxel1'", "]", "[", "i", ",", "...", ",", "0", "]", ",", "ret", "[", "'voxel2'", "]", "[", "i", ",", "...", ",", "\n", "0", "]", "=", "d1", "[", "'volume'", "]", ",", "d2", "[", "'volume'", "]", "\n", "\n", "if", "'segmentation'", "in", "d1", ":", "\n", "                            ", "ret", "[", "'seg1'", "]", "[", "i", ",", "...", ",", "0", "]", "=", "d1", "[", "'segmentation'", "]", "\n", "", "if", "'segmentation'", "in", "d2", ":", "\n", "                            ", "ret", "[", "'seg2'", "]", "[", "i", ",", "...", ",", "0", "]", "=", "d2", "[", "'segmentation'", "]", "\n", "\n", "", "if", "'point'", "in", "d1", ":", "\n", "                            ", "ret", "[", "'point1'", "]", "[", "i", "]", "=", "d1", "[", "'point'", "]", "[", "...", "]", "[", "valid_mask", "]", "\n", "", "if", "'point'", "in", "d2", ":", "\n", "                            ", "ret", "[", "'point2'", "]", "[", "i", "]", "=", "d2", "[", "'point'", "]", "[", "...", "]", "[", "valid_mask", "]", "\n", "\n", "", "ret", "[", "'id1'", "]", "[", "i", "]", "=", "d1", "[", "'id'", "]", "\n", "ret", "[", "'id2'", "]", "[", "i", "]", "=", "d2", "[", "'id'", "]", "\n", "i", "+=", "1", "\n", "\n", "", "", "if", "flag", ":", "\n", "                    ", "assert", "i", "==", "batch_size", "\n", "yield", "ret", "\n", "", "else", ":", "\n", "                    ", "yield", "ret", "\n", "break", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.liver.get_range": [[9, 12], ["numpy.any().nonzero", "numpy.min", "numpy.max", "numpy.any", "imgs.reshape"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape"], ["def", "get_range", "(", "imgs", ")", ":", "\n", "    ", "r", "=", "np", ".", "any", "(", "imgs", ".", "reshape", "(", "imgs", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ",", "axis", "=", "-", "1", ")", ".", "nonzero", "(", ")", "\n", "return", "np", ".", "min", "(", "r", ")", ",", "np", ".", "max", "(", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.brain.Dataset.__init__": [[12, 52], ["liver.FileManager", "config[].items", "dict", "brain.Dataset.subset.items", "json.load.get", "json.load.get", "open", "json.load", "print", "json.load.get", "isinstance", "int", "brain.Dataset.__init__.convert_int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "split_path", ",", "paired", "=", "False", ",", "task", "=", "None", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "with", "open", "(", "split_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "files", "=", "FileManager", "(", "config", "[", "'files'", "]", ")", "\n", "self", ".", "subset", "=", "{", "}", "\n", "\n", "for", "k", ",", "v", "in", "config", "[", "'subsets'", "]", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "subset", "[", "k", "]", "=", "{", "}", "\n", "for", "entry", "in", "v", ":", "\n", "                ", "self", ".", "subset", "[", "k", "]", "[", "entry", "]", "=", "self", ".", "files", "[", "entry", "]", "\n", "\n", "", "", "self", ".", "paired", "=", "paired", "\n", "\n", "def", "convert_int", "(", "key", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "return", "int", "(", "key", ")", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "                ", "return", "key", "\n", "", "", "self", ".", "schemes", "=", "dict", "(", "[", "(", "convert_int", "(", "k", ")", ",", "v", ")", "\n", "for", "k", ",", "v", "in", "config", "[", "'schemes'", "]", ".", "items", "(", ")", "]", ")", "\n", "\n", "for", "k", ",", "v", "in", "self", ".", "subset", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'Number of data in {} is {}'", ".", "format", "(", "k", ",", "len", "(", "v", ")", ")", ")", "\n", "\n", "", "self", ".", "task", "=", "task", "\n", "if", "self", ".", "task", "is", "None", ":", "\n", "            ", "self", ".", "task", "=", "config", ".", "get", "(", "\"task\"", ",", "\"registration\"", ")", "\n", "", "if", "not", "isinstance", "(", "self", ".", "task", ",", "list", ")", ":", "\n", "            ", "self", ".", "task", "=", "[", "self", ".", "task", "]", "\n", "\n", "", "self", ".", "image_size", "=", "config", ".", "get", "(", "\"image_size\"", ",", "[", "128", ",", "128", ",", "128", "]", ")", "\n", "self", ".", "segmentation_class_value", "=", "config", ".", "get", "(", "\n", "'segmentation_class_value'", ",", "None", ")", "\n", "\n", "if", "'atlas'", "in", "config", ":", "\n", "            ", "self", ".", "atlas", "=", "self", ".", "files", "[", "config", "[", "'atlas'", "]", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "atlas", "=", "None", "\n", "\n", "", "self", ".", "batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.brain.Dataset.center_crop": [[53, 64], ["numpy.zeros", "slice", "slice", "zip", "slice", "slice", "zip"], "methods", ["None"], ["", "def", "center_crop", "(", "self", ",", "volume", ")", ":", "\n", "        ", "slices", "=", "[", "slice", "(", "(", "os", "-", "ts", ")", "//", "2", ",", "(", "os", "-", "ts", ")", "//", "2", "+", "ts", ")", "if", "ts", "<", "os", "else", "slice", "(", "None", ",", "None", ")", "\n", "for", "ts", ",", "os", "in", "zip", "(", "self", ".", "image_size", ",", "volume", ".", "shape", ")", "]", "\n", "volume", "=", "volume", "[", "slices", "]", "\n", "\n", "ret", "=", "np", ".", "zeros", "(", "self", ".", "image_size", ",", "dtype", "=", "volume", ".", "dtype", ")", "\n", "slices", "=", "[", "slice", "(", "(", "ts", "-", "os", ")", "//", "2", ",", "(", "ts", "-", "os", ")", "//", "2", "+", "os", ")", "if", "ts", ">", "os", "else", "slice", "(", "None", ",", "None", ")", "\n", "for", "ts", ",", "os", "in", "zip", "(", "self", ".", "image_size", ",", "volume", ".", "shape", ")", "]", "\n", "ret", "[", "slices", "]", "=", "volume", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.brain.Dataset.generate_atlas": [[65, 75], ["copy.copy", "numpy.random.shuffle"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "generate_atlas", "(", "atlas", ",", "sets", ",", "loop", "=", "False", ")", ":", "\n", "        ", "sets", "=", "copy", ".", "copy", "(", "sets", ")", "\n", "while", "True", ":", "\n", "            ", "if", "loop", ":", "\n", "                ", "np", ".", "random", ".", "shuffle", "(", "sets", ")", "\n", "", "for", "d", "in", "sets", ":", "\n", "                ", "yield", "atlas", ",", "d", "\n", "", "if", "not", "loop", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.brain.Dataset.generator": [[76, 135], ["zip", "zip", "dict", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.empty", "numpy.empty", "collections.Counter", "zip", "numpy.ones", "numpy.ones", "numpy.random.choice", "range", "range", "range", "len", "len", "brain.Dataset.generate_atlas", "scheme.items", "brain.Dataset.generate_pairs", "scheme.items", "next", "list", "list", "brain.Dataset.subset[].values", "brain.Dataset.subset[].values"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.brain.Dataset.generate_atlas", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.data_util.liver.Dataset.generate_pairs"], ["", "", "", "def", "generator", "(", "self", ",", "subset", ",", "batch_size", "=", "None", ",", "loop", "=", "False", ")", ":", "\n", "        ", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "self", ".", "batch_size", "\n", "", "scheme", "=", "self", ".", "schemes", "[", "subset", "]", "\n", "if", "'registration'", "in", "self", ".", "task", ":", "\n", "            ", "if", "self", ".", "atlas", "is", "not", "None", ":", "\n", "                ", "generators", ",", "fractions", "=", "zip", "(", "*", "[", "(", "self", ".", "generate_atlas", "(", "self", ".", "atlas", ",", "list", "(", "\n", "self", ".", "subset", "[", "k", "]", ".", "values", "(", ")", ")", ",", "loop", ")", ",", "fraction", ")", "for", "k", ",", "fraction", "in", "scheme", ".", "items", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "generators", ",", "fractions", "=", "zip", "(", "\n", "*", "[", "(", "self", ".", "generate_pairs", "(", "list", "(", "self", ".", "subset", "[", "k", "]", ".", "values", "(", ")", ")", ",", "loop", ")", ",", "fraction", ")", "for", "k", ",", "fraction", "in", "scheme", ".", "items", "(", ")", "]", ")", "\n", "\n", "", "while", "True", ":", "\n", "                ", "imgs", "=", "[", "batch_size", "]", "+", "self", ".", "image_size", "+", "[", "1", "]", "\n", "ret", "=", "dict", "(", ")", "\n", "ret", "[", "'voxel1'", "]", "=", "np", ".", "zeros", "(", "imgs", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ret", "[", "'voxel2'", "]", "=", "np", ".", "zeros", "(", "imgs", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ret", "[", "'seg1'", "]", "=", "np", ".", "zeros", "(", "imgs", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ret", "[", "'seg2'", "]", "=", "np", ".", "zeros", "(", "imgs", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ret", "[", "'point1'", "]", "=", "np", ".", "ones", "(", "\n", "(", "batch_size", ",", "6", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "(", "-", "1", ")", "\n", "ret", "[", "'point2'", "]", "=", "np", ".", "ones", "(", "\n", "(", "batch_size", ",", "6", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "(", "-", "1", ")", "\n", "ret", "[", "'id1'", "]", "=", "np", ".", "empty", "(", "(", "batch_size", ")", ",", "dtype", "=", "'<U30'", ")", "\n", "ret", "[", "'id2'", "]", "=", "np", ".", "empty", "(", "(", "batch_size", ")", ",", "dtype", "=", "'<U30'", ")", "\n", "\n", "i", "=", "0", "\n", "flag", "=", "True", "\n", "cc", "=", "collections", ".", "Counter", "(", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "fractions", ")", ")", ",", "size", "=", "[", "\n", "batch_size", ",", "]", ",", "replace", "=", "True", ",", "p", "=", "fractions", ")", ")", "\n", "nums", "=", "[", "cc", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "fractions", ")", ")", "]", "\n", "for", "gen", ",", "num", "in", "zip", "(", "generators", ",", "nums", ")", ":", "\n", "                    ", "assert", "not", "self", ".", "paired", "or", "num", "%", "2", "==", "0", "\n", "for", "t", "in", "range", "(", "num", ")", ":", "\n", "                        ", "try", ":", "\n", "                            ", "while", "True", ":", "\n", "                                ", "d1", ",", "d2", "=", "next", "(", "gen", ")", "\n", "break", "\n", "", "", "except", "StopIteration", ":", "\n", "                            ", "flag", "=", "False", "\n", "break", "\n", "\n", "", "if", "'segmentation'", "in", "d1", ":", "\n", "                            ", "ret", "[", "'seg1'", "]", "[", "i", ",", "...", ",", "0", "]", "=", "d1", "[", "'segmentation'", "]", "\n", "", "if", "'segmentation'", "in", "d2", ":", "\n", "                            ", "ret", "[", "'seg2'", "]", "[", "i", ",", "...", ",", "0", "]", "=", "d2", "[", "'segmentation'", "]", "\n", "\n", "", "ret", "[", "'voxel1'", "]", "[", "i", ",", "...", ",", "0", "]", ",", "ret", "[", "'voxel2'", "]", "[", "i", ",", "...", ",", "\n", "0", "]", "=", "d1", "[", "'volume'", "]", ",", "d2", "[", "'volume'", "]", "\n", "ret", "[", "'id1'", "]", "[", "i", "]", "=", "d1", "[", "'id'", "]", "\n", "ret", "[", "'id2'", "]", "[", "i", "]", "=", "d2", "[", "'id'", "]", "\n", "i", "+=", "1", "\n", "\n", "", "", "if", "flag", ":", "\n", "                    ", "assert", "i", "==", "batch_size", "\n", "yield", "ret", "\n", "", "else", ":", "\n", "                    ", "yield", "ret", "\n", "break", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.framework.FrameworkUnsupervised.__init__": [[26, 103], ["framework.FrameworkUnsupervised.net_args.get", "framework.FrameworkUnsupervised.net_args.pop", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "framework.FrameworkUnsupervised.net_args.pop", "tensorflow.placeholder", "framework.FrameworkUnsupervised.", "framework.FrameworkUnsupervised.build_summary", "spatial_transformer.Fast3DTransformer", "spatial_transformer.Dense3DSpatialTransformer", "tensorflow.shape", "transform.free_form_fields", "framework.FrameworkUnsupervised.__init__.augmentation"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.framework.FrameworkUnsupervised.build_summary", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.transform.free_form_fields"], ["def", "__init__", "(", "self", ",", "devices", ",", "image_size", ",", "segmentation_class_value", ",", "validation", "=", "False", ",", "fast_reconstruction", "=", "False", ")", ":", "\n", "        ", "network_class", "=", "self", ".", "net_args", ".", "get", "(", "'class'", ",", "RecursiveCascadedNetworks", ")", "\n", "self", ".", "summaryType", "=", "self", ".", "net_args", ".", "pop", "(", "'summary'", ",", "'basic'", ")", "\n", "\n", "self", ".", "reconstruction", "=", "Fast3DTransformer", "(", ")", "if", "fast_reconstruction", "else", "Dense3DSpatialTransformer", "(", ")", "\n", "\n", "# input place holder", "\n", "img1", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "\n", "None", ",", "128", ",", "128", ",", "128", ",", "1", "]", ",", "name", "=", "'voxel1'", ")", "\n", "img2", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "\n", "None", ",", "128", ",", "128", ",", "128", ",", "1", "]", ",", "name", "=", "'voxel2'", ")", "\n", "seg1", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "\n", "None", ",", "128", ",", "128", ",", "128", ",", "1", "]", ",", "name", "=", "'seg1'", ")", "\n", "seg2", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "\n", "None", ",", "128", ",", "128", ",", "128", ",", "1", "]", ",", "name", "=", "'seg2'", ")", "\n", "point1", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "\n", "None", ",", "6", ",", "3", "]", ",", "name", "=", "'point1'", ")", "\n", "point2", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "\n", "None", ",", "6", ",", "3", "]", ",", "name", "=", "'point2'", ")", "\n", "\n", "bs", "=", "tf", ".", "shape", "(", "img1", ")", "[", "0", "]", "\n", "augImg1", ",", "preprocessedImg2", "=", "img1", "/", "255.0", ",", "img2", "/", "255.0", "\n", "\n", "aug", "=", "self", ".", "net_args", ".", "pop", "(", "'augmentation'", ",", "None", ")", "\n", "if", "aug", "is", "None", ":", "\n", "            ", "imgs", "=", "img1", ".", "shape", ".", "as_list", "(", ")", "[", "1", ":", "4", "]", "\n", "control_fields", "=", "transform", ".", "sample_power", "(", "\n", "-", "0.4", ",", "0.4", ",", "3", ",", "tf", ".", "stack", "(", "[", "bs", ",", "5", ",", "5", ",", "5", ",", "3", "]", ")", ")", "*", "(", "np", ".", "array", "(", "imgs", ")", "//", "4", ")", "\n", "augFlow", "=", "transform", ".", "free_form_fields", "(", "imgs", ",", "control_fields", ")", "\n", "\n", "def", "augmentation", "(", "x", ")", ":", "\n", "                ", "return", "tf", ".", "cond", "(", "tflearn", ".", "get_training_mode", "(", ")", ",", "lambda", ":", "self", ".", "reconstruction", "(", "[", "x", ",", "augFlow", "]", ")", ",", "\n", "lambda", ":", "x", ")", "\n", "\n", "", "def", "augmenetation_pts", "(", "incoming", ")", ":", "\n", "                ", "def", "aug", "(", "incoming", ")", ":", "\n", "                    ", "aug_pt", "=", "tf", ".", "cast", "(", "transform", ".", "warp_points", "(", "\n", "augFlow", ",", "incoming", ")", ",", "tf", ".", "float32", ")", "\n", "pt_mask", "=", "tf", ".", "cast", "(", "tf", ".", "reduce_all", "(", "\n", "incoming", ">=", "0", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", ",", "tf", ".", "float32", ")", "\n", "return", "aug_pt", "*", "pt_mask", "-", "(", "1", "-", "pt_mask", ")", "\n", "", "return", "tf", ".", "cond", "(", "tflearn", ".", "get_training_mode", "(", ")", ",", "lambda", ":", "aug", "(", "incoming", ")", ",", "lambda", ":", "incoming", ")", "\n", "\n", "", "augImg2", "=", "augmentation", "(", "preprocessedImg2", ")", "\n", "augSeg2", "=", "augmentation", "(", "seg2", ")", "\n", "augPt2", "=", "augmenetation_pts", "(", "point2", ")", "\n", "", "elif", "aug", "==", "'identity'", ":", "\n", "            ", "augFlow", "=", "tf", ".", "zeros", "(", "\n", "tf", ".", "stack", "(", "[", "tf", ".", "shape", "(", "img1", ")", "[", "0", "]", ",", "128", ",", "128", ",", "128", ",", "3", "]", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "augImg2", "=", "preprocessedImg2", "\n", "augSeg2", "=", "seg2", "\n", "augPt2", "=", "point2", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Augmentation {}'", ".", "format", "(", "aug", ")", ")", "\n", "\n", "", "learningRate", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ",", "'learningRate'", ")", "\n", "if", "not", "validation", ":", "\n", "            ", "adamOptimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learningRate", ")", "\n", "\n", "", "self", ".", "segmentation_class_value", "=", "segmentation_class_value", "\n", "self", ".", "network", "=", "network_class", "(", "\n", "self", ".", "framework_name", ",", "framework", "=", "self", ",", "fast_reconstruction", "=", "fast_reconstruction", ",", "**", "self", ".", "net_args", ")", "\n", "net_pls", "=", "[", "augImg1", ",", "augImg2", ",", "seg1", ",", "augSeg2", ",", "point1", ",", "augPt2", "]", "\n", "if", "devices", "==", "0", ":", "\n", "            ", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                ", "self", ".", "predictions", "=", "self", ".", "network", "(", "*", "net_pls", ")", "\n", "if", "not", "validation", ":", "\n", "                    ", "self", ".", "adamOpt", "=", "adamOptimizer", ".", "minimize", "(", "\n", "self", ".", "predictions", "[", "\"loss\"", "]", ")", "\n", "", "", "", "else", ":", "\n", "            ", "gpus", "=", "MultiGPUs", "(", "devices", ")", "\n", "if", "validation", ":", "\n", "                ", "self", ".", "predictions", "=", "gpus", "(", "self", ".", "network", ",", "net_pls", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "predictions", ",", "self", ".", "adamOpt", "=", "gpus", "(", "\n", "self", ".", "network", ",", "net_pls", ",", "opt", "=", "adamOptimizer", ")", "\n", "", "", "self", ".", "build_summary", "(", "self", ".", "predictions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.framework.FrameworkUnsupervised.data_args": [[104, 107], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_args", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "network", ".", "data_args", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.framework.FrameworkUnsupervised.build_summary": [[108, 127], ["tensorflow.reduce_mean", "tensorflow.summary.merge_all", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.reduce_sum", "tensorflow.summary.scalar", "tensorflow.summary.merge_all", "k.find", "tensorflow.summary.scalar", "tensorflow.reduce_mean", "framework.masked_mean", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.framework.masked_mean"], ["", "def", "build_summary", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "predictions", "[", "'loss'", "]", ")", "\n", "for", "k", "in", "predictions", ":", "\n", "            ", "if", "k", ".", "find", "(", "'loss'", ")", "!=", "-", "1", ":", "\n", "                ", "tf", ".", "summary", ".", "scalar", "(", "k", ",", "tf", ".", "reduce_mean", "(", "predictions", "[", "k", "]", ")", ")", "\n", "", "", "self", ".", "summaryOp", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n", "if", "self", ".", "summaryType", "==", "'full'", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "'dice_score'", ",", "tf", ".", "reduce_mean", "(", "\n", "self", ".", "predictions", "[", "'dice_score'", "]", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'landmark_dist'", ",", "masked_mean", "(", "\n", "self", ".", "predictions", "[", "'landmark_dist'", "]", ",", "self", ".", "predictions", "[", "'pt_mask'", "]", ")", ")", "\n", "preds", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "cast", "(", "self", ".", "predictions", "[", "'jacc_score'", "]", ">", "0", ",", "tf", ".", "float32", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'jacc_score'", ",", "tf", ".", "reduce_sum", "(", "\n", "self", ".", "predictions", "[", "'jacc_score'", "]", ")", "/", "(", "preds", "+", "1e-8", ")", ")", "\n", "self", ".", "summaryExtra", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "summaryExtra", "=", "self", ".", "summaryOp", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.framework.FrameworkUnsupervised.get_predictions": [[128, 130], ["dict"], "methods", ["None"], ["", "", "def", "get_predictions", "(", "self", ",", "*", "keys", ")", ":", "\n", "        ", "return", "dict", "(", "[", "(", "k", ",", "self", ".", "predictions", "[", "k", "]", ")", "for", "k", "in", "keys", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.framework.FrameworkUnsupervised.validate_clean": [[131, 137], ["fd.pop", "fd.pop", "sess.run", "framework.FrameworkUnsupervised.get_predictions", "framework.set_tf_keys"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.framework.FrameworkUnsupervised.get_predictions", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.set_tf_keys"], ["", "def", "validate_clean", "(", "self", ",", "sess", ",", "generator", ",", "keys", "=", "None", ")", ":", "\n", "        ", "for", "fd", "in", "generator", ":", "\n", "            ", "_", "=", "fd", ".", "pop", "(", "'id1'", ")", "\n", "_", "=", "fd", ".", "pop", "(", "'id2'", ")", "\n", "_", "=", "sess", ".", "run", "(", "self", ".", "get_predictions", "(", "*", "keys", ")", ",", "\n", "feed_dict", "=", "set_tf_keys", "(", "fd", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.framework.FrameworkUnsupervised.validate": [[138, 182], ["dict", "tflearn.is_training", "tqdm.tqdm.tqdm", "fd.pop", "fd.pop", "sess.run", "numpy.where", "sess.run.items", "dict.pop", "numpy.concatenate", "framework.FrameworkUnsupervised.get_predictions", "full_results[].append", "full_results[].mean", "list", "framework.set_tf_keys", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.framework.FrameworkUnsupervised.get_predictions", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.set_tf_keys"], ["", "", "def", "validate", "(", "self", ",", "sess", ",", "generator", ",", "keys", "=", "None", ",", "summary", "=", "False", ",", "predict", "=", "False", ",", "show_tqdm", "=", "False", ")", ":", "\n", "        ", "if", "keys", "is", "None", ":", "\n", "            ", "keys", "=", "[", "'dice_score'", ",", "'landmark_dist'", ",", "'pt_mask'", ",", "'jacc_score'", "]", "\n", "# if self.segmentation_class_value is not None:", "\n", "#     for k in self.segmentation_class_value:", "\n", "#         keys.append('jacc_{}'.format(k))", "\n", "", "full_results", "=", "dict", "(", "[", "(", "k", ",", "list", "(", ")", ")", "for", "k", "in", "keys", "]", ")", "\n", "if", "not", "summary", ":", "\n", "            ", "full_results", "[", "'id1'", "]", "=", "[", "]", "\n", "full_results", "[", "'id2'", "]", "=", "[", "]", "\n", "if", "predict", ":", "\n", "                ", "full_results", "[", "'seg1'", "]", "=", "[", "]", "\n", "full_results", "[", "'seg2'", "]", "=", "[", "]", "\n", "full_results", "[", "'img1'", "]", "=", "[", "]", "\n", "full_results", "[", "'img2'", "]", "=", "[", "]", "\n", "", "", "tflearn", ".", "is_training", "(", "False", ",", "sess", ")", "\n", "if", "show_tqdm", ":", "\n", "            ", "generator", "=", "tqdm", "(", "generator", ")", "\n", "", "for", "fd", "in", "generator", ":", "\n", "            ", "id1", "=", "fd", ".", "pop", "(", "'id1'", ")", "\n", "id2", "=", "fd", ".", "pop", "(", "'id2'", ")", "\n", "results", "=", "sess", ".", "run", "(", "self", ".", "get_predictions", "(", "\n", "*", "keys", ")", ",", "feed_dict", "=", "set_tf_keys", "(", "fd", ")", ")", "\n", "if", "not", "summary", ":", "\n", "                ", "results", "[", "'id1'", "]", "=", "id1", "\n", "results", "[", "'id2'", "]", "=", "id2", "\n", "if", "predict", ":", "\n", "                    ", "results", "[", "'seg1'", "]", "=", "fd", "[", "'seg1'", "]", "\n", "results", "[", "'seg2'", "]", "=", "fd", "[", "'seg2'", "]", "\n", "results", "[", "'img1'", "]", "=", "fd", "[", "'voxel1'", "]", "\n", "results", "[", "'img2'", "]", "=", "fd", "[", "'voxel2'", "]", "\n", "", "", "mask", "=", "np", ".", "where", "(", "[", "i", "and", "j", "for", "i", ",", "j", "in", "zip", "(", "id1", ",", "id2", ")", "]", ")", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "                ", "full_results", "[", "k", "]", ".", "append", "(", "v", "[", "mask", "]", ")", "\n", "", "", "if", "'landmark_dist'", "in", "full_results", "and", "'pt_mask'", "in", "full_results", ":", "\n", "            ", "pt_mask", "=", "full_results", ".", "pop", "(", "'pt_mask'", ")", "\n", "full_results", "[", "'landmark_dist'", "]", "=", "[", "arr", "*", "mask", "for", "arr", ",", "\n", "mask", "in", "zip", "(", "full_results", "[", "'landmark_dist'", "]", ",", "pt_mask", ")", "]", "\n", "", "for", "k", "in", "full_results", ":", "\n", "            ", "full_results", "[", "k", "]", "=", "np", ".", "concatenate", "(", "full_results", "[", "k", "]", ",", "axis", "=", "0", ")", "\n", "if", "summary", ":", "\n", "                ", "full_results", "[", "k", "]", "=", "full_results", "[", "k", "]", ".", "mean", "(", ")", "\n", "\n", "", "", "return", "full_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.framework.set_tf_keys": [[12, 16], ["dict", "dict.update", "feed_dict.items", "kwargs.items"], "function", ["None"], ["def", "set_tf_keys", "(", "feed_dict", ",", "**", "kwargs", ")", ":", "\n", "    ", "ret", "=", "dict", "(", "[", "(", "k", "+", "':0'", ",", "v", ")", "for", "k", ",", "v", "in", "feed_dict", ".", "items", "(", ")", "]", ")", "\n", "ret", ".", "update", "(", "[", "(", "k", "+", "':0'", ",", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "]", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.framework.masked_mean": [[18, 20], ["tensorflow.reduce_sum", "tensorflow.reduce_sum"], "function", ["None"], ["", "def", "masked_mean", "(", "arr", ",", "mask", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_sum", "(", "arr", "*", "mask", ")", "/", "(", "tf", ".", "reduce_sum", "(", "mask", ")", "+", "1e-9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.trilinear_sampler.TrilinearSampler.__init__": [[8, 10], ["keras.layers.core.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.FileRestorer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TrilinearSampler", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.trilinear_sampler.TrilinearSampler.build": [[11, 21], ["len", "Exception", "Exception", "len", "str"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "if", "len", "(", "input_shape", ")", ">", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Spatial Transformer must be called on a list of length 2 or 3. '", "\n", "'First argument is the image, second is the offset field.'", ")", "\n", "\n", "", "if", "len", "(", "input_shape", "[", "1", "]", ")", "!=", "3", "or", "input_shape", "[", "1", "]", "[", "2", "]", "!=", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Offset field must be one 3D tensor with 3 channels. '", "\n", "'Got: '", "+", "str", "(", "input_shape", "[", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.trilinear_sampler.TrilinearSampler.call": [[22, 24], ["trilinear_sampler.TrilinearSampler._interpolate"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.spatial_transformer.Dense3DSpatialTransformer._interpolate"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "_interpolate", "(", "inputs", "[", "0", "]", ",", "inputs", "[", "1", "]", "[", ":", ",", ":", ",", "1", "]", ",", "inputs", "[", "1", "]", "[", ":", ",", ":", ",", "0", "]", ",", "inputs", "[", "1", "]", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.trilinear_sampler.TrilinearSampler.compute_output_shape": [[25, 27], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", "[", "0", "]", ",", "input_shape", "[", "1", "]", "[", "1", "]", ",", "input_shape", "[", "0", "]", "[", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.trilinear_sampler.TrilinearSampler._repeat": [[28, 34], ["tensorflow.transpose", "tensorflow.cast", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.ones", "tensorflow.stack"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape"], ["", "def", "_repeat", "(", "self", ",", "x", ",", "n_repeats", ")", ":", "\n", "        ", "rep", "=", "tf", ".", "transpose", "(", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "ones", "(", "shape", "=", "tf", ".", "stack", "(", "[", "n_repeats", ",", "]", ")", ")", ",", "1", ")", ",", "[", "1", ",", "0", "]", ")", "\n", "rep", "=", "tf", ".", "cast", "(", "rep", ",", "dtype", "=", "'int32'", ")", "\n", "x", "=", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", "1", ")", ")", ",", "rep", ")", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.trilinear_sampler.TrilinearSampler._interpolate": [[35, 127], ["tensorflow.pad", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "trilinear_sampler.TrilinearSampler._repeat", "tensorflow.reshape", "tensorflow.cast", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.add_n", "tensorflow.reshape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.floor", "tensorflow.floor", "tensorflow.floor", "tensorflow.stack", "tensorflow.stack", "tensorflow.range"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.spatial_transformer.Dense3DSpatialTransformer._repeat", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape"], ["", "def", "_interpolate", "(", "self", ",", "im", ",", "x", ",", "y", ",", "z", ")", ":", "\n", "\n", "        ", "im", "=", "tf", ".", "pad", "(", "im", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", "]", ",", "\"CONSTANT\"", ")", "\n", "\n", "num_batch", "=", "tf", ".", "shape", "(", "im", ")", "[", "0", "]", "\n", "height", "=", "tf", ".", "shape", "(", "im", ")", "[", "1", "]", "\n", "width", "=", "tf", ".", "shape", "(", "im", ")", "[", "2", "]", "\n", "depth", "=", "tf", ".", "shape", "(", "im", ")", "[", "3", "]", "\n", "channels", "=", "tf", ".", "shape", "(", "im", ")", "[", "4", "]", "\n", "\n", "out_size", "=", "tf", ".", "shape", "(", "x", ")", "[", "1", "]", "\n", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", "\n", "y", "=", "tf", ".", "reshape", "(", "y", ",", "[", "-", "1", "]", ")", "\n", "z", "=", "tf", ".", "reshape", "(", "z", ",", "[", "-", "1", "]", ")", "\n", "\n", "x", "=", "tf", ".", "cast", "(", "x", ",", "'float32'", ")", "+", "1", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "'float32'", ")", "+", "1", "\n", "z", "=", "tf", ".", "cast", "(", "z", ",", "'float32'", ")", "+", "1", "\n", "\n", "max_x", "=", "tf", ".", "cast", "(", "width", "-", "1", ",", "'int32'", ")", "\n", "max_y", "=", "tf", ".", "cast", "(", "height", "-", "1", ",", "'int32'", ")", "\n", "max_z", "=", "tf", ".", "cast", "(", "depth", "-", "1", ",", "'int32'", ")", "\n", "\n", "x0", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "x", ")", ",", "'int32'", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "y0", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "y", ")", ",", "'int32'", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "z0", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "z", ")", ",", "'int32'", ")", "\n", "z1", "=", "z0", "+", "1", "\n", "\n", "x0", "=", "tf", ".", "clip_by_value", "(", "x0", ",", "0", ",", "max_x", ")", "\n", "x1", "=", "tf", ".", "clip_by_value", "(", "x1", ",", "0", ",", "max_x", ")", "\n", "y0", "=", "tf", ".", "clip_by_value", "(", "y0", ",", "0", ",", "max_y", ")", "\n", "y1", "=", "tf", ".", "clip_by_value", "(", "y1", ",", "0", ",", "max_y", ")", "\n", "z0", "=", "tf", ".", "clip_by_value", "(", "z0", ",", "0", ",", "max_z", ")", "\n", "z1", "=", "tf", ".", "clip_by_value", "(", "z1", ",", "0", ",", "max_z", ")", "\n", "\n", "dim3", "=", "depth", "\n", "dim2", "=", "depth", "*", "width", "\n", "dim1", "=", "depth", "*", "width", "*", "height", "\n", "base", "=", "self", ".", "_repeat", "(", "tf", ".", "range", "(", "num_batch", ")", "*", "dim1", ",", "out_size", ")", "\n", "\n", "base_y0", "=", "base", "+", "y0", "*", "dim2", "\n", "base_y1", "=", "base", "+", "y1", "*", "dim2", "\n", "\n", "idx_a", "=", "base_y0", "+", "x0", "*", "dim3", "+", "z0", "\n", "idx_b", "=", "base_y1", "+", "x0", "*", "dim3", "+", "z0", "\n", "idx_c", "=", "base_y0", "+", "x1", "*", "dim3", "+", "z0", "\n", "idx_d", "=", "base_y1", "+", "x1", "*", "dim3", "+", "z0", "\n", "idx_e", "=", "base_y0", "+", "x0", "*", "dim3", "+", "z1", "\n", "idx_f", "=", "base_y1", "+", "x0", "*", "dim3", "+", "z1", "\n", "idx_g", "=", "base_y0", "+", "x1", "*", "dim3", "+", "z1", "\n", "idx_h", "=", "base_y1", "+", "x1", "*", "dim3", "+", "z1", "\n", "\n", "# use indices to lookup pixels in the flat image and restore", "\n", "# channels dim", "\n", "im_flat", "=", "tf", ".", "reshape", "(", "im", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "channels", "]", ")", ")", "\n", "im_flat", "=", "tf", ".", "cast", "(", "im_flat", ",", "'float32'", ")", "\n", "\n", "Ia", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_a", ")", "\n", "Ib", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_b", ")", "\n", "Ic", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_c", ")", "\n", "Id", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_d", ")", "\n", "Ie", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_e", ")", "\n", "If", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_f", ")", "\n", "Ig", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_g", ")", "\n", "Ih", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_h", ")", "\n", "\n", "# and finally calculate interpolated values", "\n", "x1_f", "=", "tf", ".", "cast", "(", "x1", ",", "'float32'", ")", "\n", "y1_f", "=", "tf", ".", "cast", "(", "y1", ",", "'float32'", ")", "\n", "z1_f", "=", "tf", ".", "cast", "(", "z1", ",", "'float32'", ")", "\n", "\n", "dx", "=", "x1_f", "-", "x", "\n", "dy", "=", "y1_f", "-", "y", "\n", "dz", "=", "z1_f", "-", "z", "\n", "\n", "wa", "=", "tf", ".", "expand_dims", "(", "(", "dz", "*", "dx", "*", "dy", ")", ",", "1", ")", "\n", "wb", "=", "tf", ".", "expand_dims", "(", "(", "dz", "*", "dx", "*", "(", "1", "-", "dy", ")", ")", ",", "1", ")", "\n", "wc", "=", "tf", ".", "expand_dims", "(", "(", "dz", "*", "(", "1", "-", "dx", ")", "*", "dy", ")", ",", "1", ")", "\n", "wd", "=", "tf", ".", "expand_dims", "(", "(", "dz", "*", "(", "1", "-", "dx", ")", "*", "(", "1", "-", "dy", ")", ")", ",", "1", ")", "\n", "we", "=", "tf", ".", "expand_dims", "(", "(", "(", "1", "-", "dz", ")", "*", "dx", "*", "dy", ")", ",", "1", ")", "\n", "wf", "=", "tf", ".", "expand_dims", "(", "(", "(", "1", "-", "dz", ")", "*", "dx", "*", "(", "1", "-", "dy", ")", ")", ",", "1", ")", "\n", "wg", "=", "tf", ".", "expand_dims", "(", "(", "(", "1", "-", "dz", ")", "*", "(", "1", "-", "dx", ")", "*", "dy", ")", ",", "1", ")", "\n", "wh", "=", "tf", ".", "expand_dims", "(", "(", "(", "1", "-", "dz", ")", "*", "(", "1", "-", "dx", ")", "*", "(", "1", "-", "dy", ")", ")", ",", "1", ")", "\n", "\n", "output", "=", "tf", ".", "add_n", "(", "[", "wa", "*", "Ia", ",", "wb", "*", "Ib", ",", "wc", "*", "Ic", ",", "wd", "*", "Id", ",", "\n", "we", "*", "Ie", ",", "wf", "*", "If", ",", "wg", "*", "Ig", ",", "wh", "*", "Ih", "]", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "tf", ".", "stack", "(", "\n", "[", "-", "1", ",", "out_size", ",", "channels", "]", ")", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.base_networks.VTN.__init__": [[50, 54], ["utils.Network.__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.FileRestorer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "flow_multiplier", "=", "1.", ",", "channels", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", ",", "**", "kwargs", ")", "\n", "self", ".", "flow_multiplier", "=", "flow_multiplier", "\n", "self", ".", "channels", "=", "channels", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.base_networks.VTN.build": [[55, 123], ["tensorflow.concat", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "tensorflow.concat.shape.as_list", "convolveLeakyReLU.shape.as_list", "convolveLeakyReLU.shape.as_list", "convolveLeakyReLU.shape.as_list", "convolveLeakyReLU.shape.as_list", "convolveLeakyReLU.shape.as_list", "convolveLeakyReLU.shape.as_list", "base_networks.convolve", "base_networks.upconvolve", "base_networks.upconvolveLeakyReLU", "tensorflow.concat", "base_networks.convolve", "base_networks.upconvolve", "base_networks.upconvolveLeakyReLU", "tensorflow.concat", "base_networks.convolve", "base_networks.upconvolve", "base_networks.upconvolveLeakyReLU", "tensorflow.concat", "base_networks.convolve", "base_networks.upconvolve", "base_networks.upconvolveLeakyReLU", "tensorflow.concat", "base_networks.convolve", "base_networks.upconvolve", "base_networks.upconvolveLeakyReLU", "tensorflow.concat", "base_networks.upconvolve"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolve", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.upconvolve", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.upconvolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolve", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.upconvolve", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.upconvolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolve", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.upconvolve", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.upconvolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolve", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.upconvolve", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.upconvolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolve", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.upconvolve", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.upconvolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.upconvolve"], ["", "def", "build", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "'''\n            img1, img2, flow : tensor of shape [batch, X, Y, Z, C]\n        '''", "\n", "concatImgs", "=", "tf", ".", "concat", "(", "[", "img1", ",", "img2", "]", ",", "4", ",", "'concatImgs'", ")", "\n", "\n", "dims", "=", "3", "\n", "c", "=", "self", ".", "channels", "\n", "conv1", "=", "convolveLeakyReLU", "(", "\n", "'conv1'", ",", "concatImgs", ",", "c", ",", "3", ",", "2", ")", "# 64 * 64 * 64", "\n", "conv2", "=", "convolveLeakyReLU", "(", "\n", "'conv2'", ",", "conv1", ",", "c", "*", "2", ",", "3", ",", "2", ")", "# 32 * 32 * 32", "\n", "conv3", "=", "convolveLeakyReLU", "(", "'conv3'", ",", "conv2", ",", "c", "*", "4", ",", "3", ",", "2", ")", "\n", "conv3_1", "=", "convolveLeakyReLU", "(", "'conv3_1'", ",", "conv3", ",", "c", "*", "4", ",", "3", ",", "1", ")", "\n", "conv4", "=", "convolveLeakyReLU", "(", "\n", "'conv4'", ",", "conv3_1", ",", "c", "*", "8", ",", "3", ",", "2", ")", "# 16 * 16 * 16", "\n", "conv4_1", "=", "convolveLeakyReLU", "(", "'conv4_1'", ",", "conv4", ",", "c", "*", "8", ",", "3", ",", "1", ")", "\n", "conv5", "=", "convolveLeakyReLU", "(", "\n", "'conv5'", ",", "conv4_1", ",", "c", "*", "16", ",", "3", ",", "2", ")", "# 8 * 8 * 8", "\n", "conv5_1", "=", "convolveLeakyReLU", "(", "'conv5_1'", ",", "conv5", ",", "c", "*", "16", ",", "3", ",", "1", ")", "\n", "conv6", "=", "convolveLeakyReLU", "(", "\n", "'conv6'", ",", "conv5_1", ",", "c", "*", "32", ",", "3", ",", "2", ")", "# 4 * 4 * 4", "\n", "conv6_1", "=", "convolveLeakyReLU", "(", "'conv6_1'", ",", "conv6", ",", "c", "*", "32", ",", "3", ",", "1", ")", "\n", "# 16 * 32 = 512 channels", "\n", "\n", "shape0", "=", "concatImgs", ".", "shape", ".", "as_list", "(", ")", "\n", "shape1", "=", "conv1", ".", "shape", ".", "as_list", "(", ")", "\n", "shape2", "=", "conv2", ".", "shape", ".", "as_list", "(", ")", "\n", "shape3", "=", "conv3", ".", "shape", ".", "as_list", "(", ")", "\n", "shape4", "=", "conv4", ".", "shape", ".", "as_list", "(", ")", "\n", "shape5", "=", "conv5", ".", "shape", ".", "as_list", "(", ")", "\n", "shape6", "=", "conv6", ".", "shape", ".", "as_list", "(", ")", "\n", "\n", "pred6", "=", "convolve", "(", "'pred6'", ",", "conv6_1", ",", "dims", ",", "3", ",", "1", ")", "\n", "upsamp6to5", "=", "upconvolve", "(", "'upsamp6to5'", ",", "pred6", ",", "dims", ",", "4", ",", "2", ",", "shape5", "[", "1", ":", "4", "]", ")", "\n", "deconv5", "=", "upconvolveLeakyReLU", "(", "\n", "'deconv5'", ",", "conv6_1", ",", "shape5", "[", "4", "]", ",", "4", ",", "2", ",", "shape5", "[", "1", ":", "4", "]", ")", "\n", "concat5", "=", "tf", ".", "concat", "(", "[", "conv5_1", ",", "deconv5", ",", "upsamp6to5", "]", ",", "4", ",", "'concat5'", ")", "\n", "\n", "pred5", "=", "convolve", "(", "'pred5'", ",", "concat5", ",", "dims", ",", "3", ",", "1", ")", "\n", "upsamp5to4", "=", "upconvolve", "(", "'upsamp5to4'", ",", "pred5", ",", "dims", ",", "4", ",", "2", ",", "shape4", "[", "1", ":", "4", "]", ")", "\n", "deconv4", "=", "upconvolveLeakyReLU", "(", "\n", "'deconv4'", ",", "concat5", ",", "shape4", "[", "4", "]", ",", "4", ",", "2", ",", "shape4", "[", "1", ":", "4", "]", ")", "\n", "concat4", "=", "tf", ".", "concat", "(", "[", "conv4_1", ",", "deconv4", ",", "upsamp5to4", "]", ",", "\n", "4", ",", "'concat4'", ")", "# channel = 512+256+2", "\n", "\n", "pred4", "=", "convolve", "(", "'pred4'", ",", "concat4", ",", "dims", ",", "3", ",", "1", ")", "\n", "upsamp4to3", "=", "upconvolve", "(", "'upsamp4to3'", ",", "pred4", ",", "dims", ",", "4", ",", "2", ",", "shape3", "[", "1", ":", "4", "]", ")", "\n", "deconv3", "=", "upconvolveLeakyReLU", "(", "\n", "'deconv3'", ",", "concat4", ",", "shape3", "[", "4", "]", ",", "4", ",", "2", ",", "shape3", "[", "1", ":", "4", "]", ")", "\n", "concat3", "=", "tf", ".", "concat", "(", "[", "conv3_1", ",", "deconv3", ",", "upsamp4to3", "]", ",", "\n", "4", ",", "'concat3'", ")", "# channel = 256+128+2", "\n", "\n", "pred3", "=", "convolve", "(", "'pred3'", ",", "concat3", ",", "dims", ",", "3", ",", "1", ")", "\n", "upsamp3to2", "=", "upconvolve", "(", "'upsamp3to2'", ",", "pred3", ",", "dims", ",", "4", ",", "2", ",", "shape2", "[", "1", ":", "4", "]", ")", "\n", "deconv2", "=", "upconvolveLeakyReLU", "(", "\n", "'deconv2'", ",", "concat3", ",", "shape2", "[", "4", "]", ",", "4", ",", "2", ",", "shape2", "[", "1", ":", "4", "]", ")", "\n", "concat2", "=", "tf", ".", "concat", "(", "[", "conv2", ",", "deconv2", ",", "upsamp3to2", "]", ",", "\n", "4", ",", "'concat2'", ")", "# channel = 128+64+2", "\n", "\n", "pred2", "=", "convolve", "(", "'pred2'", ",", "concat2", ",", "dims", ",", "3", ",", "1", ")", "\n", "upsamp2to1", "=", "upconvolve", "(", "'upsamp2to1'", ",", "pred2", ",", "dims", ",", "4", ",", "2", ",", "shape1", "[", "1", ":", "4", "]", ")", "\n", "deconv1", "=", "upconvolveLeakyReLU", "(", "\n", "'deconv1'", ",", "concat2", ",", "shape1", "[", "4", "]", ",", "4", ",", "2", ",", "shape1", "[", "1", ":", "4", "]", ")", "\n", "concat1", "=", "tf", ".", "concat", "(", "[", "conv1", ",", "deconv1", ",", "upsamp2to1", "]", ",", "4", ",", "'concat1'", ")", "\n", "pred0", "=", "upconvolve", "(", "'upsamp1to0'", ",", "concat1", ",", "dims", ",", "4", ",", "2", ",", "shape0", "[", "1", ":", "4", "]", ")", "\n", "\n", "return", "{", "'flow'", ":", "pred0", "*", "20", "*", "self", ".", "flow_multiplier", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.base_networks.VoxelMorph.__init__": [[126, 131], ["utils.Network.__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.FileRestorer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "flow_multiplier", "=", "1.", ",", "channels", "=", "16", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", ",", "**", "kwargs", ")", "\n", "self", ".", "flow_multiplier", "=", "flow_multiplier", "\n", "self", ".", "encoders", "=", "[", "m", "*", "channels", "for", "m", "in", "[", "1", ",", "2", ",", "2", ",", "2", "]", "]", "\n", "self", ".", "decoders", "=", "[", "m", "*", "channels", "for", "m", "in", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "1", ",", "1", "]", "]", "+", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.base_networks.VoxelMorph.build": [[132, 163], ["tensorflow.concat", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "tensorflow.concat", "base_networks.convolveLeakyReLU", "tensorflow.concat", "base_networks.convolveLeakyReLU", "tensorflow.concat", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "tensorflow.concat", "base_networks.convolveLeakyReLU", "base_networks.convolve", "len", "base_networks.convolveLeakyReLU", "tflearn.initializations.normal", "keras.layers.convolutional.UpSampling3D", "keras.layers.convolutional.UpSampling3D", "keras.layers.convolutional.UpSampling3D", "keras.layers.convolutional.UpSampling3D"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolve", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU"], ["", "def", "build", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "'''\n            img1, img2, flow : tensor of shape [batch, X, Y, Z, C]\n        '''", "\n", "concatImgs", "=", "tf", ".", "concat", "(", "[", "img1", ",", "img2", "]", ",", "4", ",", "'concatImgs'", ")", "\n", "\n", "conv1", "=", "convolveLeakyReLU", "(", "\n", "'conv1'", ",", "concatImgs", ",", "self", ".", "encoders", "[", "0", "]", ",", "3", ",", "2", ")", "# 64 * 64 * 64", "\n", "conv2", "=", "convolveLeakyReLU", "(", "\n", "'conv2'", ",", "conv1", ",", "self", ".", "encoders", "[", "1", "]", ",", "3", ",", "2", ")", "# 32 * 32 * 32", "\n", "conv3", "=", "convolveLeakyReLU", "(", "\n", "'conv3'", ",", "conv2", ",", "self", ".", "encoders", "[", "2", "]", ",", "3", ",", "2", ")", "# 16 * 16 * 16", "\n", "conv4", "=", "convolveLeakyReLU", "(", "\n", "'conv4'", ",", "conv3", ",", "self", ".", "encoders", "[", "3", "]", ",", "3", ",", "2", ")", "# 8 * 8 * 8", "\n", "\n", "net", "=", "convolveLeakyReLU", "(", "'decode4'", ",", "conv4", ",", "self", ".", "decoders", "[", "0", "]", ",", "3", ",", "1", ")", "\n", "net", "=", "tf", ".", "concat", "(", "[", "UpSampling3D", "(", ")", "(", "net", ")", ",", "conv3", "]", ",", "axis", "=", "-", "1", ")", "\n", "net", "=", "convolveLeakyReLU", "(", "'decode3'", ",", "net", ",", "self", ".", "decoders", "[", "1", "]", ",", "3", ",", "1", ")", "\n", "net", "=", "tf", ".", "concat", "(", "[", "UpSampling3D", "(", ")", "(", "net", ")", ",", "conv2", "]", ",", "axis", "=", "-", "1", ")", "\n", "net", "=", "convolveLeakyReLU", "(", "'decode2'", ",", "net", ",", "self", ".", "decoders", "[", "2", "]", ",", "3", ",", "1", ")", "\n", "net", "=", "tf", ".", "concat", "(", "[", "UpSampling3D", "(", ")", "(", "net", ")", ",", "conv1", "]", ",", "axis", "=", "-", "1", ")", "\n", "net", "=", "convolveLeakyReLU", "(", "'decode1'", ",", "net", ",", "self", ".", "decoders", "[", "3", "]", ",", "3", ",", "1", ")", "\n", "net", "=", "convolveLeakyReLU", "(", "'decode1_1'", ",", "net", ",", "self", ".", "decoders", "[", "4", "]", ",", "3", ",", "1", ")", "\n", "net", "=", "tf", ".", "concat", "(", "[", "UpSampling3D", "(", ")", "(", "net", ")", ",", "concatImgs", "]", ",", "axis", "=", "-", "1", ")", "\n", "net", "=", "convolveLeakyReLU", "(", "'decode0'", ",", "net", ",", "self", ".", "decoders", "[", "5", "]", ",", "3", ",", "1", ")", "\n", "if", "len", "(", "self", ".", "decoders", ")", "==", "8", ":", "\n", "            ", "net", "=", "convolveLeakyReLU", "(", "'decode0_1'", ",", "net", ",", "self", ".", "decoders", "[", "6", "]", ",", "3", ",", "1", ")", "\n", "", "net", "=", "convolve", "(", "\n", "'flow'", ",", "net", ",", "self", ".", "decoders", "[", "-", "1", "]", ",", "3", ",", "1", ",", "weights_init", "=", "normal", "(", "stddev", "=", "1e-5", ")", ")", "\n", "return", "{", "\n", "'flow'", ":", "net", "*", "self", ".", "flow_multiplier", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.base_networks.VTNAffineStem.__init__": [[194, 197], ["utils.Network.__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.FileRestorer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "flow_multiplier", "=", "1.", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", ",", "**", "kwargs", ")", "\n", "self", ".", "flow_multiplier", "=", "flow_multiplier", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.base_networks.VTNAffineStem.build": [[198, 285], ["tensorflow.concat", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "base_networks.convolveLeakyReLU", "tflearn.layers.conv_3d", "tflearn.layers.conv_3d", "base_networks.affine_flow", "base_networks.det3x3", "tensorflow.nn.l2_loss", "base_networks.VTNAffineStem.build.elem_sym_polys_of_eigen_values"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.base_networks.affine_flow", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.base_networks.det3x3"], ["", "def", "build", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "'''\n            img1, img2, flow : tensor of shape [batch, X, Y, Z, C]\n        '''", "\n", "concatImgs", "=", "tf", ".", "concat", "(", "[", "img1", ",", "img2", "]", ",", "4", ",", "'coloncatImgs'", ")", "\n", "\n", "dims", "=", "3", "\n", "conv1", "=", "convolveLeakyReLU", "(", "\n", "'conv1'", ",", "concatImgs", ",", "16", ",", "3", ",", "2", ")", "# 64 * 64 * 64", "\n", "conv2", "=", "convolveLeakyReLU", "(", "\n", "'conv2'", ",", "conv1", ",", "32", ",", "3", ",", "2", ")", "# 32 * 32 * 32", "\n", "conv3", "=", "convolveLeakyReLU", "(", "'conv3'", ",", "conv2", ",", "64", ",", "3", ",", "2", ")", "\n", "conv3_1", "=", "convolveLeakyReLU", "(", "\n", "'conv3_1'", ",", "conv3", ",", "64", ",", "3", ",", "1", ")", "\n", "conv4", "=", "convolveLeakyReLU", "(", "\n", "'conv4'", ",", "conv3_1", ",", "128", ",", "3", ",", "2", ")", "# 16 * 16 * 16", "\n", "conv4_1", "=", "convolveLeakyReLU", "(", "\n", "'conv4_1'", ",", "conv4", ",", "128", ",", "3", ",", "1", ")", "\n", "conv5", "=", "convolveLeakyReLU", "(", "\n", "'conv5'", ",", "conv4_1", ",", "256", ",", "3", ",", "2", ")", "# 8 * 8 * 8", "\n", "conv5_1", "=", "convolveLeakyReLU", "(", "\n", "'conv5_1'", ",", "conv5", ",", "256", ",", "3", ",", "1", ")", "\n", "conv6", "=", "convolveLeakyReLU", "(", "\n", "'conv6'", ",", "conv5_1", ",", "512", ",", "3", ",", "2", ")", "# 4 * 4 * 4", "\n", "conv6_1", "=", "convolveLeakyReLU", "(", "\n", "'conv6_1'", ",", "conv6", ",", "512", ",", "3", ",", "1", ")", "\n", "ks", "=", "conv6_1", ".", "shape", ".", "as_list", "(", ")", "[", "1", ":", "4", "]", "\n", "conv7_W", "=", "tflearn", ".", "layers", ".", "conv_3d", "(", "\n", "conv6_1", ",", "9", ",", "ks", ",", "strides", "=", "1", ",", "padding", "=", "'valid'", ",", "activation", "=", "'linear'", ",", "bias", "=", "False", ",", "scope", "=", "'conv7_W'", ")", "\n", "conv7_b", "=", "tflearn", ".", "layers", ".", "conv_3d", "(", "\n", "conv6_1", ",", "3", ",", "ks", ",", "strides", "=", "1", ",", "padding", "=", "'valid'", ",", "activation", "=", "'linear'", ",", "bias", "=", "False", ",", "scope", "=", "'conv7_b'", ")", "\n", "\n", "I", "=", "[", "[", "[", "1.0", ",", "0.0", ",", "0.0", "]", ",", "[", "0.0", ",", "1.0", ",", "0.0", "]", ",", "[", "0.0", ",", "0.0", ",", "1.0", "]", "]", "]", "\n", "W", "=", "tf", ".", "reshape", "(", "conv7_W", ",", "[", "-", "1", ",", "3", ",", "3", "]", ")", "*", "self", ".", "flow_multiplier", "\n", "b", "=", "tf", ".", "reshape", "(", "conv7_b", ",", "[", "-", "1", ",", "3", "]", ")", "*", "self", ".", "flow_multiplier", "\n", "A", "=", "W", "+", "I", "\n", "# the flow is displacement(x) = place(x) - x = (Ax + b) - x", "\n", "# the model learns W = A - I.", "\n", "\n", "sx", ",", "sy", ",", "sz", "=", "img1", ".", "shape", ".", "as_list", "(", ")", "[", "1", ":", "4", "]", "\n", "flow", "=", "affine_flow", "(", "W", ",", "b", ",", "sx", ",", "sy", ",", "sz", ")", "\n", "# determinant should be close to 1", "\n", "det", "=", "det3x3", "(", "A", ")", "\n", "det_loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "det", "-", "1.0", ")", "\n", "# should be close to being orthogonal", "\n", "# C=A'A, a positive semi-definite matrix", "\n", "# should be close to I. For this, we require C", "\n", "# has eigen values close to 1 by minimizing", "\n", "# k1+1/k1+k2+1/k2+k3+1/k3.", "\n", "# to prevent NaN, minimize", "\n", "# k1+eps + (1+eps)^2/(k1+eps) + ...", "\n", "eps", "=", "1e-5", "\n", "epsI", "=", "[", "[", "[", "eps", "*", "elem", "for", "elem", "in", "row", "]", "for", "row", "in", "Mat", "]", "for", "Mat", "in", "I", "]", "\n", "C", "=", "tf", ".", "matmul", "(", "A", ",", "A", ",", "True", ")", "+", "epsI", "\n", "\n", "def", "elem_sym_polys_of_eigen_values", "(", "M", ")", ":", "\n", "            ", "M", "=", "[", "[", "M", "[", ":", ",", "i", ",", "j", "]", "for", "j", "in", "range", "(", "3", ")", "]", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "sigma1", "=", "tf", ".", "add_n", "(", "[", "M", "[", "0", "]", "[", "0", "]", ",", "M", "[", "1", "]", "[", "1", "]", ",", "M", "[", "2", "]", "[", "2", "]", "]", ")", "\n", "sigma2", "=", "tf", ".", "add_n", "(", "[", "\n", "M", "[", "0", "]", "[", "0", "]", "*", "M", "[", "1", "]", "[", "1", "]", ",", "\n", "M", "[", "1", "]", "[", "1", "]", "*", "M", "[", "2", "]", "[", "2", "]", ",", "\n", "M", "[", "2", "]", "[", "2", "]", "*", "M", "[", "0", "]", "[", "0", "]", "\n", "]", ")", "-", "tf", ".", "add_n", "(", "[", "\n", "M", "[", "0", "]", "[", "1", "]", "*", "M", "[", "1", "]", "[", "0", "]", ",", "\n", "M", "[", "1", "]", "[", "2", "]", "*", "M", "[", "2", "]", "[", "1", "]", ",", "\n", "M", "[", "2", "]", "[", "0", "]", "*", "M", "[", "0", "]", "[", "2", "]", "\n", "]", ")", "\n", "sigma3", "=", "tf", ".", "add_n", "(", "[", "\n", "M", "[", "0", "]", "[", "0", "]", "*", "M", "[", "1", "]", "[", "1", "]", "*", "M", "[", "2", "]", "[", "2", "]", ",", "\n", "M", "[", "0", "]", "[", "1", "]", "*", "M", "[", "1", "]", "[", "2", "]", "*", "M", "[", "2", "]", "[", "0", "]", ",", "\n", "M", "[", "0", "]", "[", "2", "]", "*", "M", "[", "1", "]", "[", "0", "]", "*", "M", "[", "2", "]", "[", "1", "]", "\n", "]", ")", "-", "tf", ".", "add_n", "(", "[", "\n", "M", "[", "0", "]", "[", "0", "]", "*", "M", "[", "1", "]", "[", "2", "]", "*", "M", "[", "2", "]", "[", "1", "]", ",", "\n", "M", "[", "0", "]", "[", "1", "]", "*", "M", "[", "1", "]", "[", "0", "]", "*", "M", "[", "2", "]", "[", "2", "]", ",", "\n", "M", "[", "0", "]", "[", "2", "]", "*", "M", "[", "1", "]", "[", "1", "]", "*", "M", "[", "2", "]", "[", "0", "]", "\n", "]", ")", "\n", "return", "sigma1", ",", "sigma2", ",", "sigma3", "\n", "", "s1", ",", "s2", ",", "s3", "=", "elem_sym_polys_of_eigen_values", "(", "C", ")", "\n", "ortho_loss", "=", "s1", "+", "(", "1", "+", "eps", ")", "*", "(", "1", "+", "eps", ")", "*", "s2", "/", "s3", "-", "3", "*", "2", "*", "(", "1", "+", "eps", ")", "\n", "ortho_loss", "=", "tf", ".", "reduce_sum", "(", "ortho_loss", ")", "\n", "\n", "return", "{", "\n", "'flow'", ":", "flow", ",", "\n", "'W'", ":", "W", ",", "\n", "'b'", ":", "b", ",", "\n", "'det_loss'", ":", "det_loss", ",", "\n", "'ortho_loss'", ":", "ortho_loss", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.base_networks.convolve": [[9, 12], ["tflearn.layers.conv_3d"], "function", ["None"], ["def", "convolve", "(", "opName", ",", "inputLayer", ",", "outputChannel", ",", "kernelSize", ",", "stride", ",", "stddev", "=", "1e-2", ",", "reuse", "=", "False", ",", "weights_init", "=", "'uniform_scaling'", ")", ":", "\n", "    ", "return", "tflearn", ".", "layers", ".", "conv_3d", "(", "inputLayer", ",", "outputChannel", ",", "kernelSize", ",", "strides", "=", "stride", ",", "\n", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ",", "bias", "=", "True", ",", "scope", "=", "opName", ",", "reuse", "=", "reuse", ",", "weights_init", "=", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.base_networks.convolveReLU": [[14, 19], ["utils.ReLU", "base_networks.convolve"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.ReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolve"], ["", "def", "convolveReLU", "(", "opName", ",", "inputLayer", ",", "outputChannel", ",", "kernelSize", ",", "stride", ",", "stddev", "=", "1e-2", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "return", "ReLU", "(", "convolve", "(", "opName", ",", "inputLayer", ",", "\n", "outputChannel", ",", "\n", "kernelSize", ",", "stride", ",", "stddev", "=", "stddev", ",", "reuse", "=", "reuse", ")", ",", "\n", "opName", "+", "'_rectified'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.base_networks.convolveLeakyReLU": [[21, 26], ["utils.LeakyReLU", "base_networks.convolve"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.LeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolve"], ["", "def", "convolveLeakyReLU", "(", "opName", ",", "inputLayer", ",", "outputChannel", ",", "kernelSize", ",", "stride", ",", "alpha", "=", "0.1", ",", "stddev", "=", "1e-2", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "return", "LeakyReLU", "(", "convolve", "(", "opName", ",", "inputLayer", ",", "\n", "outputChannel", ",", "\n", "kernelSize", ",", "stride", ",", "stddev", ",", "reuse", ")", ",", "\n", "alpha", ",", "opName", "+", "'_leakilyrectified'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.base_networks.upconvolve": [[28, 31], ["tflearn.layers.conv.conv_3d_transpose"], "function", ["None"], ["", "def", "upconvolve", "(", "opName", ",", "inputLayer", ",", "outputChannel", ",", "kernelSize", ",", "stride", ",", "targetShape", ",", "stddev", "=", "1e-2", ",", "reuse", "=", "False", ",", "weights_init", "=", "'uniform_scaling'", ")", ":", "\n", "    ", "return", "tflearn", ".", "layers", ".", "conv", ".", "conv_3d_transpose", "(", "inputLayer", ",", "outputChannel", ",", "kernelSize", ",", "targetShape", ",", "strides", "=", "stride", ",", "\n", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ",", "bias", "=", "False", ",", "scope", "=", "opName", ",", "reuse", "=", "reuse", ",", "weights_init", "=", "weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.base_networks.upconvolveReLU": [[33, 39], ["utils.ReLU", "base_networks.upconvolve"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.ReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.upconvolve"], ["", "def", "upconvolveReLU", "(", "opName", ",", "inputLayer", ",", "outputChannel", ",", "kernelSize", ",", "stride", ",", "targetShape", ",", "stddev", "=", "1e-2", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "return", "ReLU", "(", "upconvolve", "(", "opName", ",", "inputLayer", ",", "\n", "outputChannel", ",", "\n", "kernelSize", ",", "stride", ",", "\n", "targetShape", ",", "stddev", ",", "reuse", ")", ",", "\n", "opName", "+", "'_rectified'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.base_networks.upconvolveLeakyReLU": [[41, 47], ["utils.LeakyReLU", "base_networks.upconvolve"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.LeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.upconvolve"], ["", "def", "upconvolveLeakyReLU", "(", "opName", ",", "inputLayer", ",", "outputChannel", ",", "kernelSize", ",", "stride", ",", "targetShape", ",", "alpha", "=", "0.1", ",", "stddev", "=", "1e-2", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "return", "LeakyReLU", "(", "upconvolve", "(", "opName", ",", "inputLayer", ",", "\n", "outputChannel", ",", "\n", "kernelSize", ",", "stride", ",", "\n", "targetShape", ",", "stddev", ",", "reuse", ")", ",", "\n", "alpha", ",", "opName", "+", "'_rectified'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.base_networks.affine_flow": [[165, 180], ["tensorflow.reshape", "tensorflow.range", "tensorflow.reshape", "tensorflow.range", "tensorflow.reshape", "tensorflow.range", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape"], ["", "", "def", "affine_flow", "(", "W", ",", "b", ",", "len1", ",", "len2", ",", "len3", ")", ":", "\n", "    ", "b", "=", "tf", ".", "reshape", "(", "b", ",", "[", "-", "1", ",", "1", ",", "1", ",", "1", ",", "3", "]", ")", "\n", "xr", "=", "tf", ".", "range", "(", "-", "(", "len1", "-", "1", ")", "/", "2.0", ",", "len1", "/", "2.0", ",", "1.0", ",", "tf", ".", "float32", ")", "\n", "xr", "=", "tf", ".", "reshape", "(", "xr", ",", "[", "1", ",", "-", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "yr", "=", "tf", ".", "range", "(", "-", "(", "len2", "-", "1", ")", "/", "2.0", ",", "len2", "/", "2.0", ",", "1.0", ",", "tf", ".", "float32", ")", "\n", "yr", "=", "tf", ".", "reshape", "(", "yr", ",", "[", "1", ",", "1", ",", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "zr", "=", "tf", ".", "range", "(", "-", "(", "len3", "-", "1", ")", "/", "2.0", ",", "len3", "/", "2.0", ",", "1.0", ",", "tf", ".", "float32", ")", "\n", "zr", "=", "tf", ".", "reshape", "(", "zr", ",", "[", "1", ",", "1", ",", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "wx", "=", "W", "[", ":", ",", ":", ",", "0", "]", "\n", "wx", "=", "tf", ".", "reshape", "(", "wx", ",", "[", "-", "1", ",", "1", ",", "1", ",", "1", ",", "3", "]", ")", "\n", "wy", "=", "W", "[", ":", ",", ":", ",", "1", "]", "\n", "wy", "=", "tf", ".", "reshape", "(", "wy", ",", "[", "-", "1", ",", "1", ",", "1", ",", "1", ",", "3", "]", ")", "\n", "wz", "=", "W", "[", ":", ",", ":", ",", "2", "]", "\n", "wz", "=", "tf", ".", "reshape", "(", "wz", ",", "[", "-", "1", ",", "1", ",", "1", ",", "1", ",", "3", "]", ")", "\n", "return", "(", "xr", "*", "wx", "+", "yr", "*", "wy", ")", "+", "(", "zr", "*", "wz", "+", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.base_networks.det3x3": [[181, 191], ["tensorflow.add_n", "tensorflow.add_n", "range", "range"], "function", ["None"], ["", "def", "det3x3", "(", "M", ")", ":", "\n", "    ", "M", "=", "[", "[", "M", "[", ":", ",", "i", ",", "j", "]", "for", "j", "in", "range", "(", "3", ")", "]", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "return", "tf", ".", "add_n", "(", "[", "\n", "M", "[", "0", "]", "[", "0", "]", "*", "M", "[", "1", "]", "[", "1", "]", "*", "M", "[", "2", "]", "[", "2", "]", ",", "\n", "M", "[", "0", "]", "[", "1", "]", "*", "M", "[", "1", "]", "[", "2", "]", "*", "M", "[", "2", "]", "[", "0", "]", ",", "\n", "M", "[", "0", "]", "[", "2", "]", "*", "M", "[", "1", "]", "[", "0", "]", "*", "M", "[", "2", "]", "[", "1", "]", "\n", "]", ")", "-", "tf", ".", "add_n", "(", "[", "\n", "M", "[", "0", "]", "[", "0", "]", "*", "M", "[", "1", "]", "[", "2", "]", "*", "M", "[", "2", "]", "[", "1", "]", ",", "\n", "M", "[", "0", "]", "[", "1", "]", "*", "M", "[", "1", "]", "[", "0", "]", "*", "M", "[", "2", "]", "[", "2", "]", ",", "\n", "M", "[", "0", "]", "[", "2", "]", "*", "M", "[", "1", "]", "[", "1", "]", "*", "M", "[", "2", "]", "[", "0", "]", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.transform.get_coef": [[7, 10], ["tensorflow.stack"], "function", ["None"], ["def", "get_coef", "(", "u", ")", ":", "\n", "    ", "return", "tf", ".", "stack", "(", "[", "(", "(", "1", "-", "u", ")", "**", "3", ")", "/", "6", ",", "(", "3", "*", "(", "u", "**", "3", ")", "-", "6", "*", "(", "u", "**", "2", ")", "+", "4", ")", "/", "6", ",", "\n", "(", "-", "3", "*", "(", "u", "**", "3", ")", "+", "3", "*", "(", "u", "**", "2", ")", "+", "3", "*", "u", "+", "1", ")", "/", "6", ",", "(", "u", "**", "3", ")", "/", "6", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.transform.sample_power": [[12, 19], ["tensorflow.sign", "tensorflow.abs", "tensorflow.random_uniform"], "function", ["None"], ["", "def", "sample_power", "(", "lo", ",", "hi", ",", "k", ",", "size", "=", "None", ")", ":", "\n", "    ", "r", "=", "(", "hi", "-", "lo", ")", "/", "2", "\n", "center", "=", "(", "hi", "+", "lo", ")", "/", "2", "\n", "r", "=", "r", "**", "(", "1", "/", "k", ")", "\n", "points", "=", "(", "tf", ".", "random_uniform", "(", "size", ",", "dtype", "=", "tf", ".", "float32", ")", "-", "0.5", ")", "*", "2", "*", "r", "\n", "points", "=", "(", "tf", ".", "abs", "(", "points", ")", "**", "k", ")", "*", "tf", ".", "sign", "(", "points", ")", "\n", "return", "points", "+", "center", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.transform.pad_3d": [[21, 23], ["tensorflow.pad"], "function", ["None"], ["", "def", "pad_3d", "(", "mat", ",", "pad", ")", ":", "\n", "    ", "return", "tf", ".", "pad", "(", "mat", ",", "[", "[", "0", ",", "0", "]", ",", "[", "pad", ",", "pad", "]", ",", "[", "pad", ",", "pad", "]", ",", "[", "pad", ",", "pad", "]", ",", "[", "0", ",", "0", "]", "]", ",", "\"CONSTANT\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.transform.resize_linear": [[25, 58], ["control_fields.shape.as_list", "transform.resize_linear.interpolate_axis"], "function", ["None"], ["", "def", "resize_linear", "(", "target_shape", ",", "control_fields", ")", ":", "\n", "    ", "_", ",", "n", ",", "m", ",", "t", ",", "_", "=", "control_fields", ".", "shape", ".", "as_list", "(", ")", "\n", "assert", "n", "==", "m", "and", "m", "==", "t", "\n", "assert", "target_shape", "%", "n", "==", "0", "\n", "factor", "=", "target_shape", "//", "n", "\n", "ret_n", "=", "target_shape", "\n", "\n", "def", "interpolate_axis", "(", "arr", ")", ":", "\n", "        ", "ret", "=", "arr", "\n", "expand_shape", "=", "ret", ".", "shape", ".", "as_list", "(", ")", "\n", "expand_shape", "[", "3", "]", "=", "(", "expand_shape", "[", "3", "]", "+", "1", ")", "*", "factor", "\n", "expand_points_l", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "\n", "tf", ".", "concat", "(", "[", "ret", "[", ":", ",", ":", ",", ":", ",", "0", ":", "1", ",", ":", "]", ",", "ret", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ",", "ret", "[", ":", ",", ":", ",", ":", ",", "-", "2", ":", "-", "1", ",", ":", "]", "]", ",", "axis", "=", "3", ")", ",", "4", ")", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "factor", ",", "1", "]", ")", ",", "[", "-", "1", "]", "+", "list", "(", "expand_shape", "[", "1", ":", "]", ")", ")", "\n", "expand_points_r", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "\n", "tf", ".", "concat", "(", "[", "ret", "[", ":", ",", ":", ",", ":", ",", "1", ":", "2", ",", ":", "]", ",", "ret", "[", ":", ",", ":", ",", ":", ",", "1", ":", ",", ":", "]", ",", "ret", "[", ":", ",", ":", ",", ":", ",", "-", "1", ":", ",", ":", "]", "]", ",", "axis", "=", "3", ")", ",", "4", ")", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "factor", ",", "1", "]", ")", ",", "[", "-", "1", "]", "+", "list", "(", "expand_shape", "[", "1", ":", "]", ")", ")", "\n", "d", "=", "factor", "//", "2", "\n", "u", "=", "np", ".", "zeros", "(", "ret_n", ")", "\n", "for", "i", "in", "range", "(", "ret_n", ")", ":", "\n", "            ", "p", "=", "min", "(", "max", "(", "0", ",", "(", "i", "-", "d", ")", "//", "factor", ")", ",", "n", "-", "2", ")", "\n", "u", "[", "i", "]", "=", "(", "p", "+", "1.5", ")", "-", "(", "i", "+", "0.5", ")", "/", "factor", "\n", "", "u", "=", "u", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", "ret_n", ",", "1", ")", ")", "\n", "ret", "=", "u", "*", "expand_points_l", "[", ":", ",", ":", ",", ":", ",", "d", ":", "d", "+", "ret_n", "]", "+", "(", "1", "-", "u", ")", "*", "expand_points_r", "[", ":", ",", ":", ",", ":", ",", "d", ":", "d", "+", "ret_n", "]", "\n", "return", "ret", "\n", "\n", "", "ret", "=", "interpolate_axis", "(", "tf", ".", "transpose", "(", "control_fields", ",", "[", "0", ",", "1", ",", "3", ",", "2", ",", "4", "]", ")", ")", "\n", "ret", "=", "interpolate_axis", "(", "tf", ".", "transpose", "(", "ret", ",", "[", "0", ",", "3", ",", "2", ",", "1", ",", "4", "]", ")", ")", "\n", "ret", "=", "interpolate_axis", "(", "tf", ".", "transpose", "(", "ret", ",", "[", "0", ",", "3", ",", "1", ",", "2", ",", "4", "]", ")", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.transform.meshgrids": [[60, 74], ["tensorflow.name_scope", "tensorflow.range", "tensorflow.range", "tensorflow.range", "tensorflow.stack", "tensorflow.tile", "tensorflow.cast", "tensorflow.meshgrid", "tensorflow.expand_dims", "tensorflow.stack", "tensorflow.reshape", "tensorflow.stack"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape"], ["", "def", "meshgrids", "(", "shape", ",", "flatten", "=", "True", ",", "name", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "name", ",", "\"meshgrid\"", ",", "[", "shape", "]", ")", ":", "\n", "        ", "indices_x", "=", "tf", ".", "range", "(", "0", ",", "shape", "[", "1", "]", ")", "\n", "indices_y", "=", "tf", ".", "range", "(", "0", ",", "shape", "[", "2", "]", ")", "\n", "indices_z", "=", "tf", ".", "range", "(", "0", ",", "shape", "[", "3", "]", ")", "\n", "indices", "=", "tf", ".", "stack", "(", "tf", ".", "meshgrid", "(", "indices_x", ",", "indices_y", ",", "\n", "indices_z", ",", "indexing", "=", "'ij'", ")", ",", "axis", "=", "-", "1", ")", "\n", "indices", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "indices", ",", "axis", "=", "0", ")", ",", "\n", "tf", ".", "stack", "(", "[", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", ")", "\n", "indices", "=", "tf", ".", "cast", "(", "indices", ",", "tf", ".", "float32", ")", "\n", "if", "flatten", ":", "\n", "            ", "return", "tf", ".", "reshape", "(", "indices", ",", "tf", ".", "stack", "(", "[", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", "*", "shape", "[", "2", "]", "*", "shape", "[", "3", "]", ",", "3", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.transform.meshgrids_like": [[76, 78], ["transform.meshgrids", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.transform.meshgrids"], ["", "", "", "def", "meshgrids_like", "(", "tensor", ",", "flatten", "=", "True", ",", "name", "=", "None", ")", ":", "\n", "    ", "return", "meshgrids", "(", "tf", ".", "shape", "(", "tensor", ")", ",", "flatten", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.transform.warp_points": [[80, 97], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.sqrt", "tensorflow.cast", "tensorflow.stack", "transform.meshgrids_like", "tensorflow.stack", "tensorflow.reduce_sum", "tensorflow.argmin", "tensorflow.div", "tensorflow.mod", "tensorflow.mod", "tensorflow.div", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.transform.meshgrids_like"], ["", "def", "warp_points", "(", "flow_fields", ",", "pts", ")", ":", "\n", "    ", "'''\n    Arguments\n    ----------------\n    flow_fields : [batch, X, Y, Z, 3]\n    pts: [batch, 6, 3] \n    '''", "\n", "moving_pts", "=", "meshgrids_like", "(", "flow_fields", ",", "flatten", "=", "False", ")", "+", "flow_fields", "\n", "shape", "=", "tf", ".", "shape", "(", "flow_fields", ")", "\n", "moving_pts", "=", "tf", ".", "reshape", "(", "moving_pts", ",", "tf", ".", "stack", "(", "\n", "[", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", "*", "shape", "[", "2", "]", "*", "shape", "[", "3", "]", ",", "1", ",", "3", "]", ")", ")", "\n", "distance", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "\n", "(", "moving_pts", "-", "tf", ".", "expand_dims", "(", "pts", ",", "axis", "=", "1", ")", ")", "**", "2", ",", "axis", "=", "-", "1", ")", ")", "\n", "closest", "=", "tf", ".", "cast", "(", "tf", ".", "argmin", "(", "distance", ",", "axis", "=", "1", ")", ",", "tf", ".", "int32", ")", "\n", "fixed_pts", "=", "tf", ".", "stack", "(", "[", "tf", ".", "div", "(", "closest", ",", "shape", "[", "2", "]", "*", "shape", "[", "3", "]", ")", ",", "tf", ".", "mod", "(", "\n", "tf", ".", "div", "(", "closest", ",", "shape", "[", "3", "]", ")", ",", "shape", "[", "2", "]", ")", ",", "tf", ".", "mod", "(", "closest", ",", "shape", "[", "3", "]", ")", "]", ",", "axis", "=", "2", ")", "\n", "return", "fixed_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.transform.free_form_fields": [[99, 160], ["tensorflow.convert_to_tensor", "pad_3d.shape.as_list", "tensorflow.reshape", "transform.get_coef", "pad_3d.shape.as_list", "tensorflow.concat", "transform.get_coef", "tensorflow.reshape", "tensorflow.concat", "transform.get_coef", "tensorflow.reshape", "tensorflow.concat", "tensorflow.reshape", "tensorflow.transpose", "transform.pad_3d", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.range", "tensorflow.matmul", "tensorflow.range", "tensorflow.matmul", "tensorflow.range", "tensorflow.matmul", "tensorflow.reshape", "range", "tensorflow.reshape", "range", "tensorflow.reshape", "range"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.transform.get_coef", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.transform.get_coef", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.transform.get_coef", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.transform.pad_3d", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape"], ["", "def", "free_form_fields", "(", "shape", ",", "control_fields", ",", "padding", "=", "'same'", ")", ":", "\n", "    ", "'''Calculate a flow fields based on 3-order B-Spline interpolation of control points.\n\n    Arguments\n    --------------\n    shape : list of 3 integers, flow field shape `(x, y, z)`\n    control_fields : 5d tensor with 3 channels `(batch_size, n, m, t, 3)`\n\n    Output\n    --------------\n    5d tensor with 3 channels `(batch_size, x, y, z, 3)`\n    '''", "\n", "interpolate_range", "=", "4", "\n", "\n", "control_fields", "=", "tf", ".", "convert_to_tensor", "(", "control_fields", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "_", ",", "n", ",", "m", ",", "t", ",", "_", "=", "control_fields", ".", "shape", ".", "as_list", "(", ")", "\n", "if", "padding", "==", "'same'", ":", "\n", "        ", "control_fields", "=", "pad_3d", "(", "control_fields", ",", "1", ")", "\n", "", "elif", "padding", "==", "'valid'", ":", "\n", "        ", "n", "-=", "2", "\n", "m", "-=", "2", "\n", "t", "-=", "2", "\n", "", "control_fields", "=", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "\n", "control_fields", ",", "(", "1", ",", "2", ",", "3", ",", "0", ",", "4", ")", ")", ",", "[", "n", "+", "2", ",", "m", "+", "2", ",", "t", "+", "2", ",", "-", "1", "]", ")", "\n", "\n", "assert", "shape", "[", "0", "]", "%", "(", "n", "-", "1", ")", "==", "0", "\n", "s_x", "=", "shape", "[", "0", "]", "//", "(", "n", "-", "1", ")", "\n", "u_x", "=", "(", "tf", ".", "range", "(", "0", ",", "s_x", ",", "dtype", "=", "tf", ".", "float32", ")", "+", "0.5", ")", "/", "s_x", "# s_x", "\n", "coef_x", "=", "get_coef", "(", "u_x", ")", "# (s_x, 4)", "\n", "\n", "shape_cf", "=", "control_fields", ".", "shape", ".", "as_list", "(", ")", "\n", "flow", "=", "tf", ".", "concat", "(", "[", "tf", ".", "matmul", "(", "coef_x", ",", "\n", "tf", ".", "reshape", "(", "control_fields", "[", "i", ":", "i", "+", "interpolate_range", "]", ",", "[", "interpolate_range", ",", "-", "1", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n", "-", "1", ")", "]", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "assert", "shape", "[", "1", "]", "%", "(", "m", "-", "1", ")", "==", "0", "\n", "s_y", "=", "shape", "[", "1", "]", "//", "(", "m", "-", "1", ")", "\n", "u_y", "=", "(", "tf", ".", "range", "(", "0", ",", "s_y", ",", "dtype", "=", "tf", ".", "float32", ")", "+", "0.5", ")", "/", "s_y", "# s_y", "\n", "coef_y", "=", "get_coef", "(", "u_y", ")", "# (s_y, 4)", "\n", "\n", "flow", "=", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "flow", ")", ",", "[", "shape_cf", "[", "1", "]", ",", "-", "1", "]", ")", "\n", "flow", "=", "tf", ".", "concat", "(", "[", "tf", ".", "matmul", "(", "coef_y", ",", "\n", "tf", ".", "reshape", "(", "flow", "[", "i", ":", "i", "+", "interpolate_range", "]", ",", "[", "interpolate_range", ",", "-", "1", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "m", "-", "1", ")", "]", ",", "\n", "axis", "=", "0", ")", "\n", "# print(flow.shape)", "\n", "assert", "shape", "[", "2", "]", "%", "(", "t", "-", "1", ")", "==", "0", "\n", "s_z", "=", "shape", "[", "2", "]", "//", "(", "t", "-", "1", ")", "\n", "u_z", "=", "(", "tf", ".", "range", "(", "0", ",", "s_z", ",", "dtype", "=", "tf", ".", "float32", ")", "+", "0.5", ")", "/", "s_z", "# s_y", "\n", "coef_z", "=", "get_coef", "(", "u_z", ")", "# (s_y, 4)", "\n", "\n", "flow", "=", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "flow", ")", ",", "[", "shape_cf", "[", "2", "]", ",", "-", "1", "]", ")", "\n", "flow", "=", "tf", ".", "concat", "(", "[", "tf", ".", "matmul", "(", "coef_z", ",", "\n", "tf", ".", "reshape", "(", "flow", "[", "i", ":", "i", "+", "interpolate_range", "]", ",", "[", "interpolate_range", ",", "-", "1", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "t", "-", "1", ")", "]", ",", "\n", "axis", "=", "0", ")", "\n", "# print(flow.shape)", "\n", "flow", "=", "tf", ".", "reshape", "(", "flow", ",", "[", "shape", "[", "2", "]", ",", "-", "1", ",", "3", ",", "shape", "[", "1", "]", ",", "shape", "[", "0", "]", "]", ")", "\n", "flow", "=", "tf", ".", "transpose", "(", "flow", ",", "[", "1", ",", "4", ",", "3", ",", "0", ",", "2", "]", ")", "\n", "return", "flow", "\n", "", ""]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.recursive_cascaded_networks.RecursiveCascadedNetworks.__init__": [[36, 67], ["utils.Network.__init__", "eval", "print", "trilinear_sampler.TrilinearSampler", "sum", "recursive_cascaded_networks.RecursiveCascadedNetworks.default_params.items", "spatial_transformer.Fast3DTransformer", "spatial_transformer.Dense3DSpatialTransformer", "base_networks.VTNAffineStem", "range", "recursive_cascaded_networks.RecursiveCascadedNetworks.base_network", "str"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.FileRestorer.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "framework", ",", "\n", "base_network", ",", "n_cascades", ",", "rep", "=", "1", ",", "\n", "det_factor", "=", "0.1", ",", "ortho_factor", "=", "0.1", ",", "reg_factor", "=", "1.0", ",", "\n", "extra_losses", "=", "{", "}", ",", "warp_gradient", "=", "True", ",", "\n", "fast_reconstruction", "=", "False", ",", "warp_padding", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", ")", "\n", "self", ".", "det_factor", "=", "det_factor", "\n", "self", ".", "ortho_factor", "=", "ortho_factor", "\n", "self", ".", "reg_factor", "=", "reg_factor", "\n", "\n", "self", ".", "base_network", "=", "eval", "(", "base_network", ")", "\n", "self", ".", "stems", "=", "[", "(", "VTNAffineStem", "(", "'affine_stem'", ",", "trainable", "=", "True", ")", ",", "{", "'raw_weight'", ":", "0", ",", "'reg_weight'", ":", "0", "}", ")", "]", "+", "sum", "(", "[", "\n", "[", "(", "self", ".", "base_network", "(", "\"deform_stem_\"", "+", "str", "(", "i", ")", ",", "\n", "flow_multiplier", "=", "1.0", "/", "n_cascades", ")", ",", "{", "'raw_weight'", ":", "0", "}", ")", "]", "*", "rep", "\n", "for", "i", "in", "range", "(", "n_cascades", ")", "]", ",", "[", "]", ")", "\n", "self", ".", "stems", "[", "-", "1", "]", "[", "1", "]", "[", "'raw_weight'", "]", "=", "1", "\n", "\n", "for", "_", ",", "param", "in", "self", ".", "stems", ":", "\n", "            ", "for", "k", ",", "v", "in", "self", ".", "default_params", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", "not", "in", "param", ":", "\n", "                    ", "param", "[", "k", "]", "=", "v", "\n", "", "", "", "print", "(", "self", ".", "stems", ")", "\n", "\n", "self", ".", "framework", "=", "framework", "\n", "self", ".", "warp_gradient", "=", "warp_gradient", "\n", "self", ".", "fast_reconstruction", "=", "fast_reconstruction", "\n", "\n", "self", ".", "reconstruction", "=", "Fast3DTransformer", "(", "\n", "warp_padding", ")", "if", "fast_reconstruction", "else", "Dense3DSpatialTransformer", "(", "warp_padding", ")", "\n", "self", ".", "trilinear_sampler", "=", "TrilinearSampler", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.recursive_cascaded_networks.RecursiveCascadedNetworks.trainable_variables": [[68, 71], ["list", "set", "sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "trainable_variables", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "set", "(", "sum", "(", "[", "stem", ".", "trainable_variables", "for", "stem", ",", "params", "in", "self", ".", "stems", "]", ",", "[", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.recursive_cascaded_networks.RecursiveCascadedNetworks.data_args": [[72, 75], ["dict"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_args", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.recursive_cascaded_networks.RecursiveCascadedNetworks.build": [[76, 205], ["recursive_cascaded_networks.RecursiveCascadedNetworks.reconstruction", "stem_results.append", "zip", "recursive_cascaded_networks.RecursiveCascadedNetworks.jacobian_det", "sum", "tensorflow.reduce_any", "tensorflow.reduce_any", "tensorflow.maximum", "tensorflow.reduce_mean", "ret.update", "enumerate", "recursive_cascaded_networks.RecursiveCascadedNetworks.reconstruction", "stem_results.append", "tensorflow.reduce_any", "tensorflow.reduce_any", "recursive_cascaded_networks.RecursiveCascadedNetworks.trilinear_sampler", "tensorflow.cast", "tensorflow.cast", "tensorflow.sqrt", "tensorflow.expand_dims", "recursive_cascaded_networks.RecursiveCascadedNetworks.reconstruction", "recursive_cascaded_networks.mask_metrics", "recursive_cascaded_networks.RecursiveCascadedNetworks.framework.segmentation_class_value.items", "tensorflow.stack", "tensorflow.stack", "recursive_cascaded_networks.RecursiveCascadedNetworks.reconstruction", "stem", "stem", "tensorflow.constant", "sum", "tensorflow.reduce_sum", "recursive_cascaded_networks.RecursiveCascadedNetworks.build.mask_class"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.recursive_cascaded_networks.RecursiveCascadedNetworks.jacobian_det", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.recursive_cascaded_networks.mask_metrics"], ["", "def", "build", "(", "self", ",", "img1", ",", "img2", ",", "seg1", ",", "seg2", ",", "pt1", ",", "pt2", ")", ":", "\n", "        ", "stem_results", "=", "[", "]", "\n", "\n", "stem_result", "=", "self", ".", "stems", "[", "0", "]", "[", "0", "]", "(", "img1", ",", "img2", ")", "\n", "stem_result", "[", "'warped'", "]", "=", "self", ".", "reconstruction", "(", "\n", "[", "img2", ",", "stem_result", "[", "'flow'", "]", "]", ")", "\n", "stem_result", "[", "'agg_flow'", "]", "=", "stem_result", "[", "'flow'", "]", "\n", "stem_results", ".", "append", "(", "stem_result", ")", "\n", "\n", "for", "stem", ",", "params", "in", "self", ".", "stems", "[", "1", ":", "]", ":", "\n", "            ", "if", "self", ".", "warp_gradient", ":", "\n", "                ", "stem_result", "=", "stem", "(", "img1", ",", "stem_results", "[", "-", "1", "]", "[", "'warped'", "]", ")", "\n", "", "else", ":", "\n", "                ", "stem_result", "=", "stem", "(", "img1", ",", "tf", ".", "stop_gradient", "(", "\n", "stem_results", "[", "-", "1", "]", "[", "'warped'", "]", ")", ")", "\n", "\n", "", "if", "len", "(", "stem_results", ")", "==", "1", "and", "'W'", "in", "stem_results", "[", "-", "1", "]", ":", "\n", "                ", "I", "=", "tf", ".", "constant", "(", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "tf", ".", "float32", ",", "[", "1", ",", "3", ",", "3", "]", ")", "\n", "stem_result", "[", "'agg_flow'", "]", "=", "tf", ".", "einsum", "(", "\n", "'bij,bxyzj->bxyzi'", ",", "stem_results", "[", "-", "1", "]", "[", "'W'", "]", "+", "I", ",", "stem_result", "[", "'flow'", "]", ")", "+", "stem_results", "[", "-", "1", "]", "[", "'flow'", "]", "\n", "", "else", ":", "\n", "                ", "stem_result", "[", "'agg_flow'", "]", "=", "self", ".", "reconstruction", "(", "\n", "[", "stem_results", "[", "-", "1", "]", "[", "'agg_flow'", "]", ",", "stem_result", "[", "'flow'", "]", "]", ")", "+", "stem_result", "[", "'flow'", "]", "\n", "", "stem_result", "[", "'warped'", "]", "=", "self", ".", "reconstruction", "(", "\n", "[", "img2", ",", "stem_result", "[", "'agg_flow'", "]", "]", ")", "\n", "stem_results", ".", "append", "(", "stem_result", ")", "\n", "\n", "# unsupervised learning with simlarity loss and regularization loss", "\n", "", "for", "stem_result", ",", "(", "stem", ",", "params", ")", "in", "zip", "(", "stem_results", ",", "self", ".", "stems", ")", ":", "\n", "            ", "if", "'W'", "in", "stem_result", ":", "\n", "                ", "stem_result", "[", "'loss'", "]", "=", "stem_result", "[", "'det_loss'", "]", "*", "self", ".", "det_factor", "+", "stem_result", "[", "'ortho_loss'", "]", "*", "self", ".", "ortho_factor", "\n", "if", "params", "[", "'raw_weight'", "]", ">", "0", ":", "\n", "                    ", "stem_result", "[", "'raw_loss'", "]", "=", "self", ".", "similarity_loss", "(", "\n", "img1", ",", "stem_result", "[", "'warped'", "]", ")", "\n", "stem_result", "[", "'loss'", "]", "=", "stem_result", "[", "'loss'", "]", "+", "stem_result", "[", "'raw_loss'", "]", "*", "params", "[", "'raw_weight'", "]", "\n", "", "", "else", ":", "\n", "                ", "if", "params", "[", "'raw_weight'", "]", ">", "0", ":", "\n", "                    ", "stem_result", "[", "'raw_loss'", "]", "=", "self", ".", "similarity_loss", "(", "\n", "img1", ",", "stem_result", "[", "'warped'", "]", ")", "\n", "", "if", "params", "[", "'reg_weight'", "]", ">", "0", ":", "\n", "                    ", "stem_result", "[", "'reg_loss'", "]", "=", "self", ".", "regularize_loss", "(", "\n", "stem_result", "[", "'flow'", "]", ")", "*", "self", ".", "reg_factor", "\n", "", "stem_result", "[", "'loss'", "]", "=", "sum", "(", "\n", "[", "stem_result", "[", "k", "]", "*", "params", "[", "k", ".", "replace", "(", "'loss'", ",", "'weight'", ")", "]", "for", "k", "in", "stem_result", "if", "k", ".", "endswith", "(", "'loss'", ")", "]", ")", "\n", "\n", "", "", "ret", "=", "{", "}", "\n", "\n", "flow", "=", "stem_results", "[", "-", "1", "]", "[", "'agg_flow'", "]", "\n", "warped", "=", "stem_results", "[", "-", "1", "]", "[", "'warped'", "]", "\n", "\n", "jacobian_det", "=", "self", ".", "jacobian_det", "(", "flow", ")", "\n", "\n", "loss", "=", "sum", "(", "[", "r", "[", "'loss'", "]", "*", "params", "[", "'weight'", "]", "\n", "for", "r", ",", "(", "stem", ",", "params", ")", "in", "zip", "(", "stem_results", ",", "self", ".", "stems", ")", "]", ")", "\n", "\n", "pt_mask1", "=", "tf", ".", "reduce_any", "(", "tf", ".", "reduce_any", "(", "pt1", ">=", "0", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "pt_mask2", "=", "tf", ".", "reduce_any", "(", "tf", ".", "reduce_any", "(", "pt2", ">=", "0", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "pt1", "=", "tf", ".", "maximum", "(", "pt1", ",", "0.0", ")", "\n", "\n", "moving_pt1", "=", "pt1", "+", "self", ".", "trilinear_sampler", "(", "[", "flow", ",", "pt1", "]", ")", "\n", "\n", "pt_mask", "=", "tf", ".", "cast", "(", "pt_mask1", ",", "tf", ".", "float32", ")", "*", "tf", ".", "cast", "(", "pt_mask2", ",", "tf", ".", "float32", ")", "\n", "landmark_dists", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "\n", "(", "moving_pt1", "-", "pt2", ")", "**", "2", ",", "axis", "=", "-", "1", ")", ")", "*", "tf", ".", "expand_dims", "(", "pt_mask", ",", "axis", "=", "-", "1", ")", "\n", "landmark_dist", "=", "tf", ".", "reduce_mean", "(", "landmark_dists", ",", "axis", "=", "-", "1", ")", "\n", "\n", "if", "self", ".", "framework", ".", "segmentation_class_value", "is", "None", ":", "\n", "            ", "seg_fixed", "=", "seg1", "\n", "warped_seg_moving", "=", "self", ".", "reconstruction", "(", "[", "seg2", ",", "flow", "]", ")", "\n", "dice_score", ",", "jacc_score", "=", "mask_metrics", "(", "seg_fixed", ",", "warped_seg_moving", ")", "\n", "jaccs", "=", "[", "jacc_score", "]", "\n", "dices", "=", "[", "dice_score", "]", "\n", "", "else", ":", "\n", "            ", "def", "mask_class", "(", "seg", ",", "value", ")", ":", "\n", "                ", "return", "tf", ".", "cast", "(", "tf", ".", "abs", "(", "seg", "-", "value", ")", "<", "0.5", ",", "tf", ".", "float32", ")", "*", "255", "\n", "", "jaccs", "=", "[", "]", "\n", "dices", "=", "[", "]", "\n", "fixed_segs", "=", "[", "]", "\n", "warped_segs", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "self", ".", "framework", ".", "segmentation_class_value", ".", "items", "(", ")", ":", "\n", "#print('Segmentation {}, {}'.format(k, v))", "\n", "                ", "fixed_seg_class", "=", "mask_class", "(", "seg1", ",", "v", ")", "\n", "warped_seg_class", "=", "self", ".", "reconstruction", "(", "\n", "[", "mask_class", "(", "seg2", ",", "v", ")", ",", "flow", "]", ")", "\n", "class_dice", ",", "class_jacc", "=", "mask_metrics", "(", "\n", "fixed_seg_class", ",", "warped_seg_class", ")", "\n", "ret", "[", "'jacc_{}'", ".", "format", "(", "k", ")", "]", "=", "class_jacc", "\n", "jaccs", ".", "append", "(", "class_jacc", ")", "\n", "dices", ".", "append", "(", "class_dice", ")", "\n", "fixed_segs", ".", "append", "(", "fixed_seg_class", ")", "\n", "warped_segs", ".", "append", "(", "warped_seg_class", ")", "\n", "", "seg_fixed", "=", "tf", ".", "stack", "(", "fixed_segs", ",", "axis", "=", "-", "1", ")", "\n", "warped_seg_moving", "=", "tf", ".", "stack", "(", "warped_segs", ",", "axis", "=", "-", "1", ")", "\n", "dice_score", ",", "jacc_score", "=", "tf", ".", "add_n", "(", "\n", "dices", ")", "/", "len", "(", "dices", ")", ",", "tf", ".", "add_n", "(", "jaccs", ")", "/", "len", "(", "jaccs", ")", "\n", "\n", "", "ret", ".", "update", "(", "{", "'loss'", ":", "tf", ".", "reshape", "(", "loss", ",", "(", "1", ",", ")", ")", ",", "\n", "'dice_score'", ":", "dice_score", ",", "\n", "'jacc_score'", ":", "jacc_score", ",", "\n", "'dices'", ":", "tf", ".", "stack", "(", "dices", ",", "axis", "=", "-", "1", ")", ",", "\n", "'jaccs'", ":", "tf", ".", "stack", "(", "jaccs", ",", "axis", "=", "-", "1", ")", ",", "\n", "'landmark_dist'", ":", "landmark_dist", ",", "\n", "'landmark_dists'", ":", "landmark_dists", ",", "\n", "'real_flow'", ":", "flow", ",", "\n", "'pt_mask'", ":", "pt_mask", ",", "\n", "'reconstruction'", ":", "warped", "*", "255.0", ",", "\n", "'image_reconstruct'", ":", "warped", ",", "\n", "'warped_moving'", ":", "warped", "*", "255.0", ",", "\n", "'seg_fixed'", ":", "seg_fixed", ",", "\n", "'warped_seg_moving'", ":", "warped_seg_moving", ",", "\n", "'image_fixed'", ":", "img1", ",", "\n", "'moving_pt'", ":", "moving_pt1", ",", "\n", "'jacobian_det'", ":", "jacobian_det", "}", ")", "\n", "\n", "for", "i", ",", "r", "in", "enumerate", "(", "stem_results", ")", ":", "\n", "            ", "for", "k", "in", "r", ":", "\n", "                ", "if", "k", ".", "endswith", "(", "'loss'", ")", ":", "\n", "                    ", "ret", "[", "'{}_{}'", ".", "format", "(", "i", ",", "k", ")", "]", "=", "r", "[", "k", "]", "\n", "", "", "ret", "[", "'warped_seg_moving_%d'", "%", "\n", "i", "]", "=", "self", ".", "reconstruction", "(", "[", "seg2", ",", "r", "[", "'agg_flow'", "]", "]", ")", "\n", "ret", "[", "'warped_moving_%d'", "%", "i", "]", "=", "r", "[", "'warped'", "]", "\n", "ret", "[", "'flow_%d'", "%", "i", "]", "=", "r", "[", "'flow'", "]", "\n", "ret", "[", "'real_flow_%d'", "%", "i", "]", "=", "r", "[", "'agg_flow'", "]", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.recursive_cascaded_networks.RecursiveCascadedNetworks.similarity_loss": [[206, 225], ["numpy.prod", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.user_ops.linear_similarity", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "img1.shape.as_list", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.square", "tensorflow.sqrt"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape"], ["", "def", "similarity_loss", "(", "self", ",", "img1", ",", "warped_img2", ")", ":", "\n", "        ", "sizes", "=", "np", ".", "prod", "(", "img1", ".", "shape", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", "\n", "flatten1", "=", "tf", ".", "reshape", "(", "img1", ",", "[", "-", "1", ",", "sizes", "]", ")", "\n", "flatten2", "=", "tf", ".", "reshape", "(", "warped_img2", ",", "[", "-", "1", ",", "sizes", "]", ")", "\n", "\n", "if", "self", ".", "fast_reconstruction", ":", "\n", "            ", "_", ",", "pearson_r", ",", "_", "=", "tf", ".", "user_ops", ".", "linear_similarity", "(", "flatten1", ",", "flatten2", ")", "\n", "", "else", ":", "\n", "            ", "mean1", "=", "tf", ".", "reshape", "(", "tf", ".", "reduce_mean", "(", "flatten1", ",", "axis", "=", "-", "1", ")", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "mean2", "=", "tf", ".", "reshape", "(", "tf", ".", "reduce_mean", "(", "flatten2", ",", "axis", "=", "-", "1", ")", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "var1", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "flatten1", "-", "mean1", ")", ",", "axis", "=", "-", "1", ")", "\n", "var2", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "flatten2", "-", "mean2", ")", ",", "axis", "=", "-", "1", ")", "\n", "cov12", "=", "tf", ".", "reduce_mean", "(", "\n", "(", "flatten1", "-", "mean1", ")", "*", "(", "flatten2", "-", "mean2", ")", ",", "axis", "=", "-", "1", ")", "\n", "pearson_r", "=", "cov12", "/", "tf", ".", "sqrt", "(", "(", "var1", "+", "1e-6", ")", "*", "(", "var2", "+", "1e-6", ")", ")", "\n", "\n", "", "raw_loss", "=", "1", "-", "pearson_r", "\n", "raw_loss", "=", "tf", ".", "reduce_sum", "(", "raw_loss", ")", "\n", "return", "raw_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.recursive_cascaded_networks.RecursiveCascadedNetworks.regularize_loss": [[226, 231], ["numpy.prod", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "flow.shape.as_list"], "methods", ["None"], ["", "def", "regularize_loss", "(", "self", ",", "flow", ")", ":", "\n", "        ", "ret", "=", "(", "(", "tf", ".", "nn", ".", "l2_loss", "(", "flow", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "-", "flow", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", ")", "+", "\n", "tf", ".", "nn", ".", "l2_loss", "(", "flow", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "flow", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "+", "\n", "tf", ".", "nn", ".", "l2_loss", "(", "flow", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "flow", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ")", ")", "/", "np", ".", "prod", "(", "flow", ".", "shape", ".", "as_list", "(", ")", "[", "1", ":", "5", "]", ")", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.recursive_cascaded_networks.RecursiveCascadedNetworks.jacobian_det": [[232, 242], ["tensorflow.nn.moments", "tensorflow.sqrt", "tensorflow.linalg.det", "tensorflow.stack", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant"], "methods", ["None"], ["", "def", "jacobian_det", "(", "self", ",", "flow", ")", ":", "\n", "        ", "_", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "tf", ".", "linalg", ".", "det", "(", "tf", ".", "stack", "(", "[", "\n", "flow", "[", ":", ",", "1", ":", ",", ":", "-", "1", ",", ":", "-", "1", "]", "-", "flow", "[", ":", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "-", "1", "]", "+", "\n", "tf", ".", "constant", "(", "[", "1", ",", "0", ",", "0", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "flow", "[", ":", ",", ":", "-", "1", ",", "1", ":", ",", ":", "-", "1", "]", "-", "flow", "[", ":", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "-", "1", "]", "+", "\n", "tf", ".", "constant", "(", "[", "0", ",", "1", ",", "0", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "flow", "[", ":", ",", ":", "-", "1", ",", ":", "-", "1", ",", "1", ":", "]", "-", "flow", "[", ":", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "-", "1", "]", "+", "\n", "tf", ".", "constant", "(", "[", "0", ",", "0", ",", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "]", ",", "axis", "=", "-", "1", ")", ")", ",", "axes", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "return", "tf", ".", "sqrt", "(", "var", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.recursive_cascaded_networks.mask_metrics": [[11, 27], ["numpy.prod", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.maximum", "tf.cast.shape.as_list", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.minimum"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape"], ["def", "mask_metrics", "(", "seg1", ",", "seg2", ")", ":", "\n", "    ", "''' Given two segmentation seg1, seg2, 0 for background 255 for foreground.\n    Calculate the Dice score \n    $ 2 * | seg1 \\cap seg2 | / (|seg1| + |seg2|) $\n    and the Jacc score\n    $ | seg1 \\cap seg2 | / (|seg1 \\cup seg2|) $\n    '''", "\n", "sizes", "=", "np", ".", "prod", "(", "seg1", ".", "shape", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", "\n", "seg1", "=", "tf", ".", "reshape", "(", "seg1", ",", "[", "-", "1", ",", "sizes", "]", ")", "\n", "seg2", "=", "tf", ".", "reshape", "(", "seg2", ",", "[", "-", "1", ",", "sizes", "]", ")", "\n", "seg1", "=", "tf", ".", "cast", "(", "seg1", ">", "128", ",", "tf", ".", "float32", ")", "\n", "seg2", "=", "tf", ".", "cast", "(", "seg2", ">", "128", ",", "tf", ".", "float32", ")", "\n", "dice_score", "=", "2.0", "*", "tf", ".", "reduce_sum", "(", "seg1", "*", "seg2", ",", "axis", "=", "-", "1", ")", "/", "(", "\n", "tf", ".", "reduce_sum", "(", "seg1", ",", "axis", "=", "-", "1", ")", "+", "tf", ".", "reduce_sum", "(", "seg2", ",", "axis", "=", "-", "1", ")", ")", "\n", "union", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "maximum", "(", "seg1", ",", "seg2", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "(", "dice_score", ",", "tf", ".", "reduce_sum", "(", "tf", ".", "minimum", "(", "seg1", ",", "seg2", ")", ",", "axis", "=", "-", "1", ")", "/", "tf", ".", "maximum", "(", "0.01", ",", "union", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.spatial_transformer.Fast3DTransformer.__init__": [[6, 9], ["keras.layers.core.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.FileRestorer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "padding", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.spatial_transformer.Fast3DTransformer.build": [[10, 20], ["len", "Exception", "Exception", "len", "str"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "if", "len", "(", "input_shape", ")", ">", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Spatial Transformer must be called on a list of length 2 or 3. '", "\n", "'First argument is the image, second is the offset field.'", ")", "\n", "\n", "", "if", "len", "(", "input_shape", "[", "1", "]", ")", "!=", "5", "or", "input_shape", "[", "1", "]", "[", "4", "]", "!=", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Offset field must be one 5D tensor with 3 channels. '", "\n", "'Got: '", "+", "str", "(", "input_shape", "[", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.spatial_transformer.Fast3DTransformer.call": [[21, 30], ["tensorflow.user_ops.reconstruction", "tensorflow.pad", "tensorflow.pad"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "im", ",", "flow", "=", "inputs", "\n", "if", "self", ".", "padding", ":", "\n", "            ", "im", "=", "tf", ".", "pad", "(", "im", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", "]", ",", "\"CONSTANT\"", ")", "\n", "flow", "=", "tf", ".", "pad", "(", "flow", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", "]", ",", "\"CONSTANT\"", ")", "\n", "", "warped", "=", "tf", ".", "user_ops", ".", "reconstruction", "(", "im", ",", "flow", ")", "\n", "if", "self", ".", "padding", ":", "\n", "            ", "warped", "=", "warped", "[", ":", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", ",", "1", ":", "-", "1", ",", ":", "]", "\n", "", "return", "warped", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.spatial_transformer.Fast3DTransformer.compute_output_shape": [[31, 33], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.spatial_transformer.Dense3DSpatialTransformer.__init__": [[39, 42], ["keras.layers.core.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.FileRestorer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "padding", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "padding", "=", "padding", "\n", "super", "(", "Dense3DSpatialTransformer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.spatial_transformer.Dense3DSpatialTransformer.build": [[43, 53], ["len", "Exception", "Exception", "len", "str"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "if", "len", "(", "input_shape", ")", ">", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Spatial Transformer must be called on a list of length 2 or 3. '", "\n", "'First argument is the image, second is the offset field.'", ")", "\n", "\n", "", "if", "len", "(", "input_shape", "[", "1", "]", ")", "!=", "5", "or", "input_shape", "[", "1", "]", "[", "4", "]", "!=", "3", ":", "\n", "            ", "raise", "Exception", "(", "'Offset field must be one 5D tensor with 3 channels. '", "\n", "'Got: '", "+", "str", "(", "input_shape", "[", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.spatial_transformer.Dense3DSpatialTransformer.call": [[54, 57], ["spatial_transformer.Dense3DSpatialTransformer._transform"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.spatial_transformer.Dense3DSpatialTransformer._transform"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "_transform", "(", "inputs", "[", "0", "]", ",", "inputs", "[", "1", "]", "[", ":", ",", ":", ",", ":", ",", ":", ",", "1", "]", ",", "\n", "inputs", "[", "1", "]", "[", ":", ",", ":", ",", ":", ",", ":", ",", "0", "]", ",", "inputs", "[", "1", "]", "[", ":", ",", ":", ",", ":", ",", ":", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.spatial_transformer.Dense3DSpatialTransformer.compute_output_shape": [[58, 60], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.spatial_transformer.Dense3DSpatialTransformer._transform": [[61, 82], ["spatial_transformer.Dense3DSpatialTransformer._meshgrid", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "spatial_transformer.Dense3DSpatialTransformer._interpolate", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.spatial_transformer.Dense3DSpatialTransformer._meshgrid", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.spatial_transformer.Dense3DSpatialTransformer._interpolate"], ["", "def", "_transform", "(", "self", ",", "I", ",", "dx", ",", "dy", ",", "dz", ")", ":", "\n", "\n", "        ", "batch_size", "=", "tf", ".", "shape", "(", "dx", ")", "[", "0", "]", "\n", "height", "=", "tf", ".", "shape", "(", "dx", ")", "[", "1", "]", "\n", "width", "=", "tf", ".", "shape", "(", "dx", ")", "[", "2", "]", "\n", "depth", "=", "tf", ".", "shape", "(", "dx", ")", "[", "3", "]", "\n", "\n", "# Convert dx and dy to absolute locations", "\n", "x_mesh", ",", "y_mesh", ",", "z_mesh", "=", "self", ".", "_meshgrid", "(", "height", ",", "width", ",", "depth", ")", "\n", "x_mesh", "=", "tf", ".", "expand_dims", "(", "x_mesh", ",", "0", ")", "\n", "y_mesh", "=", "tf", ".", "expand_dims", "(", "y_mesh", ",", "0", ")", "\n", "z_mesh", "=", "tf", ".", "expand_dims", "(", "z_mesh", ",", "0", ")", "\n", "\n", "x_mesh", "=", "tf", ".", "tile", "(", "x_mesh", ",", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "y_mesh", "=", "tf", ".", "tile", "(", "y_mesh", ",", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "z_mesh", "=", "tf", ".", "tile", "(", "z_mesh", ",", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "x_new", "=", "dx", "+", "x_mesh", "\n", "y_new", "=", "dy", "+", "y_mesh", "\n", "z_new", "=", "dz", "+", "z_mesh", "\n", "\n", "return", "self", ".", "_interpolate", "(", "I", ",", "x_new", ",", "y_new", ",", "z_new", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.spatial_transformer.Dense3DSpatialTransformer._repeat": [[83, 89], ["tensorflow.transpose", "tensorflow.cast", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.ones", "tensorflow.stack"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape"], ["", "def", "_repeat", "(", "self", ",", "x", ",", "n_repeats", ")", ":", "\n", "        ", "rep", "=", "tf", ".", "transpose", "(", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "ones", "(", "shape", "=", "tf", ".", "stack", "(", "[", "n_repeats", ",", "]", ")", ")", ",", "1", ")", ",", "[", "1", ",", "0", "]", ")", "\n", "rep", "=", "tf", ".", "cast", "(", "rep", ",", "dtype", "=", "'int32'", ")", "\n", "x", "=", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", "1", ")", ")", ",", "rep", ")", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.spatial_transformer.Dense3DSpatialTransformer._meshgrid": [[90, 106], ["tensorflow.matmul", "tensorflow.matmul", "tensorflow.tile", "tensorflow.tile", "tensorflow.linspace", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.ones", "tensorflow.transpose", "tensorflow.expand_dims", "tensorflow.ones", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.linspace", "tensorflow.cast", "tensorflow.stack", "tensorflow.linspace", "tensorflow.stack", "tensorflow.cast", "tensorflow.cast"], "methods", ["None"], ["", "def", "_meshgrid", "(", "self", ",", "height", ",", "width", ",", "depth", ")", ":", "\n", "        ", "x_t", "=", "tf", ".", "matmul", "(", "tf", ".", "ones", "(", "shape", "=", "tf", ".", "stack", "(", "[", "height", ",", "1", "]", ")", ")", ",", "\n", "tf", ".", "transpose", "(", "tf", ".", "expand_dims", "(", "tf", ".", "linspace", "(", "0.0", ",", "\n", "tf", ".", "cast", "(", "width", ",", "tf", ".", "float32", ")", "-", "1.0", ",", "width", ")", ",", "1", ")", ",", "[", "1", ",", "0", "]", ")", ")", "\n", "y_t", "=", "tf", ".", "matmul", "(", "tf", ".", "expand_dims", "(", "tf", ".", "linspace", "(", "0.0", ",", "\n", "tf", ".", "cast", "(", "height", ",", "tf", ".", "float32", ")", "-", "1.0", ",", "height", ")", ",", "1", ")", ",", "\n", "tf", ".", "ones", "(", "shape", "=", "tf", ".", "stack", "(", "[", "1", ",", "width", "]", ")", ")", ")", "\n", "\n", "x_t", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "x_t", ",", "2", ")", ",", "[", "1", ",", "1", ",", "depth", "]", ")", "\n", "y_t", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "y_t", ",", "2", ")", ",", "[", "1", ",", "1", ",", "depth", "]", ")", "\n", "\n", "z_t", "=", "tf", ".", "linspace", "(", "0.0", ",", "tf", ".", "cast", "(", "depth", ",", "tf", ".", "float32", ")", "-", "1.0", ",", "depth", ")", "\n", "z_t", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "z_t", ",", "0", ")", ",", "0", ")", "\n", "z_t", "=", "tf", ".", "tile", "(", "z_t", ",", "[", "height", ",", "width", ",", "1", "]", ")", "\n", "\n", "return", "x_t", ",", "y_t", ",", "z_t", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.spatial_transformer.Dense3DSpatialTransformer._interpolate": [[107, 203], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "spatial_transformer.Dense3DSpatialTransformer._repeat", "tensorflow.reshape", "tensorflow.cast", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.add_n", "tensorflow.reshape", "tensorflow.pad", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.pad.get_shape().as_list", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.floor", "tensorflow.floor", "tensorflow.floor", "tensorflow.stack", "tensorflow.stack", "tensorflow.range", "tensorflow.pad.get_shape"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.spatial_transformer.Dense3DSpatialTransformer._repeat", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape"], ["", "def", "_interpolate", "(", "self", ",", "im", ",", "x", ",", "y", ",", "z", ")", ":", "\n", "        ", "if", "self", ".", "padding", ":", "\n", "            ", "im", "=", "tf", ".", "pad", "(", "im", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", "]", ",", "\"CONSTANT\"", ")", "\n", "\n", "", "num_batch", "=", "tf", ".", "shape", "(", "im", ")", "[", "0", "]", "\n", "height", "=", "tf", ".", "shape", "(", "im", ")", "[", "1", "]", "\n", "width", "=", "tf", ".", "shape", "(", "im", ")", "[", "2", "]", "\n", "depth", "=", "tf", ".", "shape", "(", "im", ")", "[", "3", "]", "\n", "channels", "=", "im", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "4", "]", "\n", "\n", "out_height", "=", "tf", ".", "shape", "(", "x", ")", "[", "1", "]", "\n", "out_width", "=", "tf", ".", "shape", "(", "x", ")", "[", "2", "]", "\n", "out_depth", "=", "tf", ".", "shape", "(", "x", ")", "[", "3", "]", "\n", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", "\n", "y", "=", "tf", ".", "reshape", "(", "y", ",", "[", "-", "1", "]", ")", "\n", "z", "=", "tf", ".", "reshape", "(", "z", ",", "[", "-", "1", "]", ")", "\n", "\n", "padding_constant", "=", "1", "if", "self", ".", "padding", "else", "0", "\n", "x", "=", "tf", ".", "cast", "(", "x", ",", "'float32'", ")", "+", "padding_constant", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "'float32'", ")", "+", "padding_constant", "\n", "z", "=", "tf", ".", "cast", "(", "z", ",", "'float32'", ")", "+", "padding_constant", "\n", "\n", "max_x", "=", "tf", ".", "cast", "(", "width", "-", "1", ",", "'int32'", ")", "\n", "max_y", "=", "tf", ".", "cast", "(", "height", "-", "1", ",", "'int32'", ")", "\n", "max_z", "=", "tf", ".", "cast", "(", "depth", "-", "1", ",", "'int32'", ")", "\n", "\n", "x0", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "x", ")", ",", "'int32'", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "y0", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "y", ")", ",", "'int32'", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "z0", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "z", ")", ",", "'int32'", ")", "\n", "z1", "=", "z0", "+", "1", "\n", "\n", "x0", "=", "tf", ".", "clip_by_value", "(", "x0", ",", "0", ",", "max_x", ")", "\n", "x1", "=", "tf", ".", "clip_by_value", "(", "x1", ",", "0", ",", "max_x", ")", "\n", "y0", "=", "tf", ".", "clip_by_value", "(", "y0", ",", "0", ",", "max_y", ")", "\n", "y1", "=", "tf", ".", "clip_by_value", "(", "y1", ",", "0", ",", "max_y", ")", "\n", "z0", "=", "tf", ".", "clip_by_value", "(", "z0", ",", "0", ",", "max_z", ")", "\n", "z1", "=", "tf", ".", "clip_by_value", "(", "z1", ",", "0", ",", "max_z", ")", "\n", "\n", "dim3", "=", "depth", "\n", "dim2", "=", "depth", "*", "width", "\n", "dim1", "=", "depth", "*", "width", "*", "height", "\n", "base", "=", "self", ".", "_repeat", "(", "tf", ".", "range", "(", "num_batch", ")", "*", "dim1", ",", "\n", "out_height", "*", "out_width", "*", "out_depth", ")", "\n", "\n", "base_y0", "=", "base", "+", "y0", "*", "dim2", "\n", "base_y1", "=", "base", "+", "y1", "*", "dim2", "\n", "\n", "idx_a", "=", "base_y0", "+", "x0", "*", "dim3", "+", "z0", "\n", "idx_b", "=", "base_y1", "+", "x0", "*", "dim3", "+", "z0", "\n", "idx_c", "=", "base_y0", "+", "x1", "*", "dim3", "+", "z0", "\n", "idx_d", "=", "base_y1", "+", "x1", "*", "dim3", "+", "z0", "\n", "idx_e", "=", "base_y0", "+", "x0", "*", "dim3", "+", "z1", "\n", "idx_f", "=", "base_y1", "+", "x0", "*", "dim3", "+", "z1", "\n", "idx_g", "=", "base_y0", "+", "x1", "*", "dim3", "+", "z1", "\n", "idx_h", "=", "base_y1", "+", "x1", "*", "dim3", "+", "z1", "\n", "\n", "# use indices to lookup pixels in the flat image and restore", "\n", "# channels dim", "\n", "im_flat", "=", "tf", ".", "reshape", "(", "im", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "channels", "]", ")", ")", "\n", "im_flat", "=", "tf", ".", "cast", "(", "im_flat", ",", "'float32'", ")", "\n", "\n", "Ia", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_a", ")", "\n", "Ib", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_b", ")", "\n", "Ic", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_c", ")", "\n", "Id", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_d", ")", "\n", "Ie", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_e", ")", "\n", "If", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_f", ")", "\n", "Ig", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_g", ")", "\n", "Ih", "=", "tf", ".", "gather", "(", "im_flat", ",", "idx_h", ")", "\n", "\n", "# and finally calculate interpolated values", "\n", "x1_f", "=", "tf", ".", "cast", "(", "x1", ",", "'float32'", ")", "\n", "y1_f", "=", "tf", ".", "cast", "(", "y1", ",", "'float32'", ")", "\n", "z1_f", "=", "tf", ".", "cast", "(", "z1", ",", "'float32'", ")", "\n", "\n", "dx", "=", "x1_f", "-", "x", "\n", "dy", "=", "y1_f", "-", "y", "\n", "dz", "=", "z1_f", "-", "z", "\n", "\n", "wa", "=", "tf", ".", "expand_dims", "(", "(", "dz", "*", "dx", "*", "dy", ")", ",", "1", ")", "\n", "wb", "=", "tf", ".", "expand_dims", "(", "(", "dz", "*", "dx", "*", "(", "1", "-", "dy", ")", ")", ",", "1", ")", "\n", "wc", "=", "tf", ".", "expand_dims", "(", "(", "dz", "*", "(", "1", "-", "dx", ")", "*", "dy", ")", ",", "1", ")", "\n", "wd", "=", "tf", ".", "expand_dims", "(", "(", "dz", "*", "(", "1", "-", "dx", ")", "*", "(", "1", "-", "dy", ")", ")", ",", "1", ")", "\n", "we", "=", "tf", ".", "expand_dims", "(", "(", "(", "1", "-", "dz", ")", "*", "dx", "*", "dy", ")", ",", "1", ")", "\n", "wf", "=", "tf", ".", "expand_dims", "(", "(", "(", "1", "-", "dz", ")", "*", "dx", "*", "(", "1", "-", "dy", ")", ")", ",", "1", ")", "\n", "wg", "=", "tf", ".", "expand_dims", "(", "(", "(", "1", "-", "dz", ")", "*", "(", "1", "-", "dx", ")", "*", "dy", ")", ",", "1", ")", "\n", "wh", "=", "tf", ".", "expand_dims", "(", "(", "(", "1", "-", "dz", ")", "*", "(", "1", "-", "dx", ")", "*", "(", "1", "-", "dy", ")", ")", ",", "1", ")", "\n", "\n", "output", "=", "tf", ".", "add_n", "(", "[", "wa", "*", "Ia", ",", "wb", "*", "Ib", ",", "wc", "*", "Ic", ",", "wd", "*", "Id", ",", "\n", "we", "*", "Ie", ",", "wf", "*", "If", ",", "wg", "*", "Ig", ",", "wh", "*", "Ih", "]", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "tf", ".", "stack", "(", "\n", "[", "-", "1", ",", "out_height", ",", "out_width", ",", "out_depth", ",", "channels", "]", ")", ")", "\n", "return", "output", "", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.Network.__init__": [[96, 100], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "trainable", "=", "True", ",", "reuse", "=", "None", ")", ":", "\n", "        ", "self", ".", "_built", "=", "reuse", "\n", "self", ".", "_name", "=", "name", "\n", "self", ".", "trainable", "=", "trainable", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.Network.name": [[101, 104], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.Network.__call__": [[105, 109], ["tensorflow.variable_scope", "utils.Network.build"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.spatial_transformer.Dense3DSpatialTransformer.build"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ",", "reuse", "=", "self", ".", "_built", ")", "as", "self", ".", "scope", ":", "\n", "            ", "self", ".", "_built", "=", "True", "\n", "return", "self", ".", "build", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.Network.trainable_variables": [[110, 120], ["isinstance", "tensorflow.get_collection", "tensorflow.get_collection", "re.fullmatch"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "trainable_variables", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "trainable", ",", "str", ")", ":", "\n", "            ", "var_list", "=", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "self", ".", "scope", ".", "name", ")", "\n", "return", "[", "var", "for", "var", "in", "var_list", "if", "re", ".", "fullmatch", "(", "self", ".", "trainable", ",", "var", ".", "name", ")", "]", "\n", "", "elif", "self", ".", "trainable", ":", "\n", "            ", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "self", ".", "scope", ".", "name", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.Network.data_args": [[121, 124], ["dict"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "data_args", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.__init__": [[132, 134], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num", ")", ":", "\n", "        ", "self", ".", "num", "=", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.__call__": [[135, 172], ["range", "utils.MultiGPUs.reshape", "tensorflow.device", "tensorflow.device", "net", "results.append", "opt.apply_gradients", "opr.type.startswith", "grads.append", "len", "tensorflow.stack", "tensorflow.concat", "utils.MultiGPUs.average_gradients", "opt.compute_gradients"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.average_gradients"], ["", "def", "__call__", "(", "self", ",", "net", ",", "args", ",", "opt", "=", "None", ")", ":", "\n", "        ", "args", "=", "[", "self", ".", "reshape", "(", "arg", ")", "for", "arg", "in", "args", "]", "\n", "results", "=", "[", "]", "\n", "grads", "=", "[", "]", "\n", "self", ".", "current_device", "=", "None", "\n", "for", "i", "in", "range", "(", "self", ".", "num", ")", ":", "\n", "            ", "def", "auto_gpu", "(", "opr", ")", ":", "\n", "# if opr.name.find('stack') != -1:", "\n", "#     print(opr)", "\n", "                ", "if", "opr", ".", "type", ".", "startswith", "(", "'Gather'", ")", "or", "opr", ".", "type", "in", "(", "'L2Loss'", ",", "'Pack'", ",", "'Gather'", ",", "'Tile'", ",", "'ReconstructionWrtImageGradient'", ",", "'Softmax'", ",", "'FloorMod'", ",", "'MatMul'", ")", ":", "\n", "                    ", "return", "'/cpu:0'", "\n", "", "else", ":", "\n", "                    ", "return", "'/gpu:%d'", "%", "i", "\n", "", "", "with", "tf", ".", "device", "(", "auto_gpu", ")", ":", "\n", "                ", "self", ".", "current_device", "=", "i", "\n", "net", ".", "controller", "=", "self", "\n", "result", "=", "net", "(", "*", "[", "arg", "[", "i", "]", "for", "arg", "in", "args", "]", ")", "\n", "results", ".", "append", "(", "result", ")", "\n", "if", "opt", "is", "not", "None", ":", "\n", "                    ", "grads", ".", "append", "(", "opt", ".", "compute_gradients", "(", "\n", "result", "[", "'loss'", "]", ",", "var_list", "=", "net", ".", "trainable_variables", ")", ")", "\n", "\n", "", "", "", "with", "tf", ".", "device", "(", "'/gpu:0'", ")", ":", "\n", "            ", "concat_result", "=", "{", "}", "\n", "for", "k", "in", "results", "[", "0", "]", ":", "\n", "                ", "if", "len", "(", "results", "[", "0", "]", "[", "k", "]", ".", "shape", ")", "==", "0", ":", "\n", "                    ", "concat_result", "[", "k", "]", "=", "tf", ".", "stack", "(", "\n", "[", "result", "[", "k", "]", "for", "result", "in", "results", "]", ")", "\n", "", "else", ":", "\n", "                    ", "concat_result", "[", "k", "]", "=", "tf", ".", "concat", "(", "\n", "[", "result", "[", "k", "]", "for", "result", "in", "results", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "if", "grads", ":", "\n", "                ", "op", "=", "opt", ".", "apply_gradients", "(", "self", ".", "average_gradients", "(", "grads", ")", ")", "\n", "return", "concat_result", ",", "op", "\n", "", "else", ":", "\n", "                ", "return", "concat_result", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.call": [[173, 181], ["net.replicated_inputs.items", "net", "tensorflow.device", "dict", "utils.MultiGPUs.reshape", "net.inputs.items"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape"], ["", "", "", "def", "call", "(", "self", ",", "net", ",", "kwargs", ")", ":", "\n", "        ", "if", "net", ".", "replicated_inputs", "is", "None", ":", "\n", "            ", "with", "tf", ".", "device", "(", "'/gpu:0'", ")", ":", "\n", "                ", "net", ".", "replicated_inputs", "=", "dict", "(", "\n", "[", "(", "k", ",", "self", ".", "reshape", "(", "v", ")", ")", "for", "k", ",", "v", "in", "net", ".", "inputs", ".", "items", "(", ")", "]", ")", "\n", "", "", "for", "k", ",", "v", "in", "net", ".", "replicated_inputs", ".", "items", "(", ")", ":", "\n", "            ", "kwargs", "[", "k", "]", "=", "v", "[", "self", ".", "current_device", "]", "\n", "", "return", "net", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.average_gradients": [[182, 194], ["zip", "ret.append", "print", "ret.append", "tensorflow.add_n", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "average_gradients", "(", "grads", ")", ":", "\n", "        ", "ret", "=", "[", "]", "\n", "for", "grad_list", "in", "zip", "(", "*", "grads", ")", ":", "\n", "            ", "grad", ",", "var", "=", "grad_list", "[", "0", "]", "\n", "if", "grad", "is", "None", ":", "\n", "                ", "ret", ".", "append", "(", "(", "None", ",", "var", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "var", ",", "var", ".", "device", ")", "\n", "ret", ".", "append", "(", "\n", "(", "tf", ".", "add_n", "(", "[", "grad", "for", "grad", ",", "_", "in", "grad_list", "]", ")", "/", "len", "(", "grad_list", ")", ",", "var", ")", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape": [[195, 197], ["tensorflow.reshape", "tensorflow.concat", "tensorflow.stack", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.MultiGPUs.reshape"], ["", "def", "reshape", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "tf", ".", "reshape", "(", "tensor", ",", "tf", ".", "concat", "(", "[", "tf", ".", "stack", "(", "[", "self", ".", "num", ",", "-", "1", "]", ")", ",", "tf", ".", "shape", "(", "tensor", ")", "[", "1", ":", "]", "]", ",", "axis", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.FileRestorer.__init__": [[200, 202], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rules", "=", "[", "(", "r'(.*)'", ",", "r'\\1'", ")", "]", ")", ":", "\n", "        ", "self", ".", "rules", "=", "rules", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.FileRestorer.get_targets": [[203, 209], ["re.match", "targets.append", "re.sub"], "methods", ["None"], ["", "def", "get_targets", "(", "self", ",", "key", ")", ":", "\n", "        ", "targets", "=", "[", "]", "\n", "for", "r", "in", "self", ".", "rules", ":", "\n", "            ", "if", "re", ".", "match", "(", "r", "[", "0", "]", ",", "key", ")", ":", "\n", "                ", "targets", ".", "append", "(", "re", ".", "sub", "(", "r", "[", "0", "]", ",", "r", "[", "1", "]", ",", "key", ")", ")", "\n", "", "", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.FileRestorer.restore": [[210, 242], ["tensorflow.python.pywrap_tensorflow.NewCheckpointReader", "tensorflow.python.pywrap_tensorflow.NewCheckpointReader.get_variable_to_shape_map", "sorted", "sess.run", "utils.FileRestorer.get_targets", "print", "str", "str", "print", "any", "print", "g.get_tensor_by_name", "print", "assign_ops.append", "str", "v2_file_error_template.format", "print", "tensorflow.assign", "file_name.split", "tensorflow.python.pywrap_tensorflow.NewCheckpointReader.get_tensor"], "methods", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.FileRestorer.get_targets"], ["", "def", "restore", "(", "self", ",", "sess", ",", "file_name", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "reader", "=", "pywrap_tensorflow", ".", "NewCheckpointReader", "(", "file_name", ")", "\n", "var_to_shape_map", "=", "reader", ".", "get_variable_to_shape_map", "(", ")", "\n", "assign_ops", "=", "[", "]", "\n", "g", "=", "sess", ".", "graph", "\n", "for", "key", "in", "sorted", "(", "var_to_shape_map", ")", ":", "\n", "                ", "for", "target", "in", "self", ".", "get_targets", "(", "key", ")", ":", "\n", "                    ", "var", "=", "None", "\n", "try", ":", "\n", "                        ", "var", "=", "g", ".", "get_tensor_by_name", "(", "target", "+", "':0'", ")", "\n", "print", "(", "\"restoring: {} ---> {}\"", ".", "format", "(", "key", ",", "target", ")", ")", "\n", "", "except", "KeyError", "as", "e", ":", "\n", "                        ", "print", "(", "\"Ignoring: {} ---> {}\"", ".", "format", "(", "key", ",", "target", ")", ")", "\n", "", "if", "var", "is", "not", "None", ":", "\n", "                        ", "assign_ops", ".", "append", "(", "\n", "tf", ".", "assign", "(", "var", ",", "reader", ".", "get_tensor", "(", "key", ")", ")", ")", "\n", "", "", "", "sess", ".", "run", "(", "assign_ops", ")", "\n", "", "except", "Exception", "as", "e", ":", "# pylint: disable=broad-except", "\n", "            ", "raise", "(", "e", ")", "\n", "print", "(", "str", "(", "e", ")", ")", "\n", "if", "\"corrupted compressed block contents\"", "in", "str", "(", "e", ")", ":", "\n", "                ", "print", "(", "\"It's likely that your checkpoint file has been compressed \"", "\n", "\"with SNAPPY.\"", ")", "\n", "", "if", "(", "\"Data loss\"", "in", "str", "(", "e", ")", "and", "\n", "(", "any", "(", "[", "e", "in", "file_name", "for", "e", "in", "[", "\".index\"", ",", "\".meta\"", ",", "\".data\"", "]", "]", ")", ")", ")", ":", "\n", "                ", "proposed_file", "=", "\".\"", ".", "join", "(", "file_name", ".", "split", "(", "\".\"", ")", "[", "0", ":", "-", "1", "]", ")", "\n", "v2_file_error_template", "=", "\"\"\"\n        It's likely that this is a V2 checkpoint and you need to provide the filename\n        *prefix*.  Try removing the '.' and extension.  Try:\n        inspect checkpoint --file_name = {}\"\"\"", "\n", "print", "(", "v2_file_error_template", ".", "format", "(", "proposed_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.ReLU": [[14, 16], ["tflearn.activations.relu"], "function", ["None"], ["def", "ReLU", "(", "target", ",", "name", "=", "None", ")", ":", "\n", "    ", "return", "tflearn", ".", "activations", ".", "relu", "(", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.LeakyReLU": [[18, 20], ["tflearn.activations.leaky_relu"], "function", ["None"], ["", "def", "LeakyReLU", "(", "target", ",", "alpha", "=", "0.1", ",", "name", "=", "None", ")", ":", "\n", "    ", "return", "tflearn", ".", "activations", ".", "leaky_relu", "(", "target", ",", "alpha", "=", "alpha", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolve": [[22, 25], ["tflearn.layers.conv_2d"], "function", ["None"], ["", "def", "convolve", "(", "opName", ",", "inputLayer", ",", "inputChannel", ",", "outputChannel", ",", "kernelSize", ",", "stride", ",", "stddev", "=", "1e-2", ")", ":", "\n", "    ", "return", "tflearn", ".", "layers", ".", "conv_2d", "(", "inputLayer", ",", "outputChannel", ",", "kernelSize", ",", "strides", "=", "stride", ",", "\n", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ",", "bias", "=", "True", ",", "scope", "=", "opName", ")", "\n", "# kernelVariables = tf.Variable(", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveReLU": [[39, 44], ["utils.ReLU", "utils.convolve"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.ReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolve"], ["", "def", "convolveReLU", "(", "opName", ",", "inputLayer", ",", "inputChannel", ",", "outputChannel", ",", "kernelSize", ",", "stride", ",", "stddev", "=", "1e-2", ")", ":", "\n", "    ", "return", "ReLU", "(", "convolve", "(", "opName", ",", "inputLayer", ",", "\n", "inputChannel", ",", "outputChannel", ",", "\n", "kernelSize", ",", "stride", ",", "stddev", ")", ",", "\n", "opName", "+", "'_rectified'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolveLeakyReLU": [[46, 51], ["utils.LeakyReLU", "utils.convolve"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.LeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.convolve"], ["", "def", "convolveLeakyReLU", "(", "opName", ",", "inputLayer", ",", "inputChannel", ",", "outputChannel", ",", "kernelSize", ",", "stride", ",", "alpha", "=", "0.1", ",", "stddev", "=", "1e-2", ")", ":", "\n", "    ", "return", "LeakyReLU", "(", "convolve", "(", "opName", ",", "inputLayer", ",", "\n", "inputChannel", ",", "outputChannel", ",", "\n", "kernelSize", ",", "stride", ",", "stddev", ")", ",", "\n", "alpha", ",", "opName", "+", "'_leakilyrectified'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.upconvolve": [[53, 56], ["tflearn.layers.conv.conv_2d_transpose"], "function", ["None"], ["", "def", "upconvolve", "(", "opName", ",", "inputLayer", ",", "inputChannel", ",", "outputChannel", ",", "kernelSize", ",", "stride", ",", "targetH", ",", "targetW", ",", "stddev", "=", "1e-2", ")", ":", "\n", "    ", "return", "tflearn", ".", "layers", ".", "conv", ".", "conv_2d_transpose", "(", "inputLayer", ",", "outputChannel", ",", "kernelSize", ",", "[", "targetH", ",", "targetW", "]", ",", "strides", "=", "stride", ",", "\n", "padding", "=", "'same'", ",", "activation", "=", "'linear'", ",", "bias", "=", "False", ",", "scope", "=", "opName", ")", "\n", "# kernelVariables = tf.Variable(", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.upconvolveReLU": [[73, 79], ["utils.ReLU", "utils.upconvolve"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.ReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.upconvolve"], ["", "def", "upconvolveReLU", "(", "opName", ",", "inputLayer", ",", "inputChannel", ",", "outputChannel", ",", "kernelSize", ",", "stride", ",", "targetH", ",", "targetW", ",", "stddev", "=", "1e-2", ")", ":", "\n", "    ", "return", "ReLU", "(", "upconvolve", "(", "opName", ",", "inputLayer", ",", "\n", "inputChannel", ",", "outputChannel", ",", "\n", "kernelSize", ",", "stride", ",", "\n", "targetH", ",", "targetW", ",", "stddev", ")", ",", "\n", "opName", "+", "'_rectified'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.upconvolveLeakyReLU": [[81, 87], ["utils.LeakyReLU", "utils.upconvolve"], "function", ["home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.LeakyReLU", "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.upconvolve"], ["", "def", "upconvolveLeakyReLU", "(", "opName", ",", "inputLayer", ",", "inputChannel", ",", "outputChannel", ",", "kernelSize", ",", "stride", ",", "targetH", ",", "targetW", ",", "alpha", "=", "0.1", ",", "stddev", "=", "1e-2", ")", ":", "\n", "    ", "return", "LeakyReLU", "(", "upconvolve", "(", "opName", ",", "inputLayer", ",", "\n", "inputChannel", ",", "outputChannel", ",", "\n", "kernelSize", ",", "stride", ",", "\n", "targetH", ",", "targetW", ",", "stddev", ")", ",", "\n", "alpha", ",", "opName", "+", "'_rectified'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.set_tf_keys": [[89, 93], ["dict", "dict.update", "feed_dict.items", "kwargs.items"], "function", ["None"], ["", "def", "set_tf_keys", "(", "feed_dict", ",", "**", "kwargs", ")", ":", "\n", "    ", "ret", "=", "dict", "(", "[", "(", "k", "+", "':0'", ",", "v", ")", "for", "k", ",", "v", "in", "feed_dict", ".", "items", "(", ")", "]", ")", "\n", "ret", ".", "update", "(", "[", "(", "k", "+", "':0'", ",", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "]", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_Recursive-Cascaded-Networks.network.utils.restore_exists": [[244, 287], ["tensorflow.python.pywrap_tensorflow.NewCheckpointReader", "pywrap_tensorflow.NewCheckpointReader.get_variable_to_shape_map", "sorted", "sorted", "sess.run", "print", "pywrap_tensorflow.NewCheckpointReader.get_tensor", "print", "str", "str", "print", "any", "print", "g.get_tensor_by_name", "print", "assign_ops.append", "str", "v2_file_error_template.format", "print", "tensorflow.assign", "file_name.split", "pywrap_tensorflow.NewCheckpointReader.get_tensor"], "function", ["None"], ["", "", "", "", "def", "restore_exists", "(", "sess", ",", "file_name", ",", "show", "=", "False", ")", ":", "\n", "    ", "\"\"\"Prints tensors in a checkpoint file.\n    If no `tensor_name` is provided, prints the tensor names and shapes\n    in the checkpoint file.\n    If `tensor_name` is provided, prints the content of the tensor.\n    Args:\n      file_name: Name of the checkpoint file.\n      tensor_name: Name of the tensor in the checkpoint file to print.\n      all_tensors: Boolean indicating whether to print all tensors.\n      all_tensor_names: Boolean indicating whether to print all tensor names.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "reader", "=", "pywrap_tensorflow", ".", "NewCheckpointReader", "(", "file_name", ")", "\n", "var_to_shape_map", "=", "reader", ".", "get_variable_to_shape_map", "(", ")", "\n", "assign_ops", "=", "[", "]", "\n", "if", "show", ":", "\n", "            ", "for", "key", "in", "sorted", "(", "var_to_shape_map", ")", ":", "\n", "                ", "w", "=", "reader", ".", "get_tensor", "(", "key", ")", "\n", "print", "(", "key", ",", "w", ".", "dtype", ",", "w", ".", "shape", ")", "\n", "", "", "else", ":", "\n", "            ", "g", "=", "sess", ".", "graph", "\n", "for", "key", "in", "sorted", "(", "var_to_shape_map", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "var", "=", "g", ".", "get_tensor_by_name", "(", "key", "+", "':0'", ")", "\n", "print", "(", "\"restoring: \"", ",", "key", ")", "\n", "", "except", "KeyError", "as", "e", ":", "\n", "                    ", "print", "(", "\"Ignoring: \"", "+", "key", ")", "\n", "", "if", "var", "is", "not", "None", ":", "\n", "                    ", "assign_ops", ".", "append", "(", "tf", ".", "assign", "(", "var", ",", "reader", ".", "get_tensor", "(", "key", ")", ")", ")", "\n", "", "", "sess", ".", "run", "(", "assign_ops", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "# pylint: disable=broad-except", "\n", "        ", "print", "(", "str", "(", "e", ")", ")", "\n", "if", "\"corrupted compressed block contents\"", "in", "str", "(", "e", ")", ":", "\n", "            ", "print", "(", "\"It's likely that your checkpoint file has been compressed \"", "\n", "\"with SNAPPY.\"", ")", "\n", "", "if", "(", "\"Data loss\"", "in", "str", "(", "e", ")", "and", "\n", "(", "any", "(", "[", "e", "in", "file_name", "for", "e", "in", "[", "\".index\"", ",", "\".meta\"", ",", "\".data\"", "]", "]", ")", ")", ")", ":", "\n", "            ", "proposed_file", "=", "\".\"", ".", "join", "(", "file_name", ".", "split", "(", "\".\"", ")", "[", "0", ":", "-", "1", "]", ")", "\n", "v2_file_error_template", "=", "\"\"\"\nIt's likely that this is a V2 checkpoint and you need to provide the filename\n*prefix*.  Try removing the '.' and extension.  Try:\ninspect checkpoint --file_name = {}\"\"\"", "\n", "print", "(", "v2_file_error_template", ".", "format", "(", "proposed_file", ")", ")", "\n", "", "", "", ""]]}