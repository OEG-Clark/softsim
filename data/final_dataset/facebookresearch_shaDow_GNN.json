{"home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.models.DeepGNN.__init__": [[27, 154], ["torch.nn.Module.__init__", "int", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "arch_gnn[].lower", "[].lower", "shaDow.ResPool", "models.DeepGNN.res_pool_layers.append", "len", "torch.nn.ModuleList", "torch.nn.ModuleList", "shaDow.EnsembleDummy", "shaDow.EnsembleAggregator", "_kwargs.update", "models.DeepGNN.classifier.append", "models.DeepGNN.parameters", "len", "models.DeepGNN.aug_layers.append", "range", "models.DeepGNN.conv_layers.append", "models.DeepGNN.conv_layers.append", "int", "torch.nn.ModuleList", "torch.nn.ModuleList", "convs.append", "torch.nn.Sequential", "torch.nn.Sequential", "arch_gnn[].split", "arch_gnn[].split", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dim_feat_raw", ":", "int", ",", "\n", "dim_feat_smooth", ":", "int", ",", "\n", "dim_label_raw", ":", "int", ",", "\n", "dim_label_smooth", ":", "int", ",", "\n", "arch_gnn", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", "aug_feat", ",", "\n", "num_ensemble", ":", "int", ",", "\n", "train_params", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", "prediction_task", ":", "str", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Build the multi-layer GNN architecture.\n\n        Inputs:\n            num_classes         int, number of classes a node can belong to\n            arch_gnn            dict, config for each GNN layer\n            train_params        dict, training hyperparameters (e.g., learning rate)\n            num_ensemble        int, number of parallel branches to perform subgraph ensemble\n\n        Outputs:\n            None\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "prediction_task", "in", "{", "'link'", ",", "'node'", "}", ",", "\"Only supports node classification and link prediction! \"", "\n", "self", ".", "prediction_task", "=", "prediction_task", "\n", "self", ".", "mulhead", "=", "1", "\n", "self", ".", "num_gnn_layers", "=", "arch_gnn", "[", "\"num_layers\"", "]", "\n", "self", ".", "num_cls_layers", "=", "arch_gnn", "[", "\"num_cls_layers\"", "]", "\n", "self", ".", "dropout", ",", "self", ".", "dropedge", "=", "train_params", "[", "\"dropout\"", "]", ",", "train_params", "[", "'dropedge'", "]", "\n", "self", ".", "mulhead", "=", "int", "(", "arch_gnn", "[", "\"heads\"", "]", ")", "# only useful for GAT", "\n", "\n", "self", ".", "branch_sharing", "=", "arch_gnn", "[", "'branch_sharing'", "]", "# only for ensemble", "\n", "\n", "self", ".", "type_feature_augment", "=", "aug_feat", "\n", "assert", "dim_feat_raw", "<=", "dim_feat_smooth", ",", "\"smoothened feature cannot have smaller shape than the original one\"", "\n", "# NOTE: dim_label_raw may be larger than dim_label_smooth ==> label is not used as input", "\n", "self", ".", "num_classes", "=", "dim_label_raw", "\n", "self", ".", "dim_label_in", "=", "dim_label_smooth", "\n", "self", ".", "dim_feat_in", "=", "dim_feat_smooth", "\n", "self", ".", "dim_hid", "=", "arch_gnn", "[", "'dim'", "]", "\n", "# build the model below", "\n", "act", ",", "layer_norm", "=", "arch_gnn", "[", "'act'", "]", ",", "arch_gnn", "[", "'layer_norm'", "]", "\n", "self", ".", "feat_aug_ops", "=", "arch_gnn", "[", "'feature_augment_ops'", "]", "\n", "self", ".", "aug_layers", ",", "self", ".", "conv_layers", ",", "self", ".", "res_pool_layers", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "num_ensemble", ")", ":", "\n", "# feat aug", "\n", "            ", "dim_aug_add", "=", "0", "\n", "if", "len", "(", "self", ".", "type_feature_augment", ")", ">", "0", ":", "\n", "                ", "_dim_aug_out", "=", "self", ".", "dim_feat_in", "if", "self", ".", "feat_aug_ops", "==", "'sum'", "else", "self", ".", "dim_hid", "\n", "dim_aug_add", "+=", "0", "if", "self", ".", "feat_aug_ops", "==", "'sum'", "else", "_dim_aug_out", "\n", "self", ".", "aug_layers", ".", "append", "(", "\n", "nn", ".", "ModuleList", "(", "\n", "nn", ".", "Linear", "(", "_dim", ",", "_dim_aug_out", ")", "for", "_", ",", "_dim", "in", "self", ".", "type_feature_augment", "\n", ")", "\n", ")", "\n", "# graph convs", "\n", "", "convs", "=", "[", "]", "\n", "if", "i", "==", "0", "or", "not", "self", ".", "branch_sharing", ":", "\n", "                ", "for", "j", "in", "range", "(", "self", ".", "num_gnn_layers", ")", ":", "\n", "                    ", "dim_in", "=", "(", "self", ".", "dim_feat_in", "+", "self", ".", "dim_label_in", "+", "dim_aug_add", ")", "if", "j", "==", "0", "else", "self", ".", "dim_hid", "\n", "layer_gconv", "=", "DeepGNN", ".", "NAME2CLS", "[", "arch_gnn", "[", "'aggr'", "]", "]", "(", "\n", "dim_in", ",", "\n", "self", ".", "dim_hid", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "act", "=", "act", ",", "\n", "norm", "=", "layer_norm", ",", "\n", "mulhead", "=", "self", ".", "mulhead", "\n", ")", "\n", "convs", ".", "append", "(", "layer_gconv", ")", "\n", "", "self", ".", "conv_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "convs", ")", ")", "\n", "", "else", ":", "# i > 0 and branch_sharing", "\n", "                ", "self", ".", "conv_layers", ".", "append", "(", "self", ".", "conv_layers", "[", "-", "1", "]", ")", "\n", "# skip-pooling layer", "\n", "", "type_res", "=", "arch_gnn", "[", "'residue'", "]", ".", "lower", "(", ")", "\n", "# TODO re-structure yaml config so that pooling params become a dict", "\n", "type_pool", "=", "arch_gnn", "[", "'pooling'", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", ".", "lower", "(", ")", "\n", "args_pool", "=", "{", "}", "\n", "if", "type_pool", "==", "'sort'", ":", "\n", "                ", "args_pool", "[", "'k'", "]", "=", "int", "(", "arch_gnn", "[", "'pooling'", "]", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "", "layer_res_pool", "=", "layers", ".", "ResPool", "(", "\n", "self", ".", "dim_hid", ",", "\n", "self", ".", "dim_hid", ",", "\n", "self", ".", "num_gnn_layers", ",", "\n", "type_res", ",", "\n", "type_pool", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "act", "=", "act", ",", "\n", "args_pool", "=", "args_pool", ",", "\n", "prediction_task", "=", "self", ".", "prediction_task", "\n", ")", "\n", "self", ".", "res_pool_layers", ".", "append", "(", "layer_res_pool", ")", "\n", "", "if", "len", "(", "self", ".", "aug_layers", ")", ">", "0", ":", "\n", "            ", "self", ".", "aug_layers", "=", "nn", ".", "ModuleList", "(", "self", ".", "aug_layers", ")", "\n", "", "self", ".", "conv_layers", "=", "nn", ".", "ModuleList", "(", "self", ".", "conv_layers", ")", "\n", "self", ".", "res_pool_layers", "=", "nn", ".", "ModuleList", "(", "self", ".", "res_pool_layers", ")", "\n", "# ------- ensembler + classifier -------", "\n", "if", "num_ensemble", "==", "1", ":", "\n", "            ", "self", ".", "ensembler", "=", "layers", ".", "EnsembleDummy", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ensembler", "=", "layers", ".", "EnsembleAggregator", "(", "\n", "self", ".", "dim_hid", ",", "\n", "self", ".", "dim_hid", ",", "\n", "num_ensemble", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "type_dropout", "=", "train_params", "[", "\"ensemble_dropout\"", "]", ",", "\n", "act", "=", "arch_gnn", "[", "\"ensemble_act\"", "]", "\n", ")", "\n", "", "_norm_type", "=", "'norm_feat'", "if", "self", ".", "prediction_task", "==", "'node'", "else", "'none'", "\n", "# (multi-layer) classifier: by default, we set number of MLP classifier layers to be 1", "\n", "self", ".", "classifier", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_cls_layers", ")", ":", "\n", "            ", "if", "i", "<", "self", ".", "num_cls_layers", "-", "1", ":", "\n", "                ", "_kwargs", "=", "{", "'dim_out'", ":", "self", ".", "dim_hid", ",", "'act'", ":", "act", ",", "'dropout'", ":", "self", ".", "dropout", "}", "\n", "", "else", ":", "\n", "                ", "_kwargs", "=", "{", "'dim_out'", ":", "self", ".", "num_classes", ",", "'act'", ":", "'I'", ",", "'dropout'", ":", "0.", "}", "\n", "", "_kwargs", ".", "update", "(", "{", "'dim_in'", ":", "self", ".", "dim_hid", ",", "'norm'", ":", "_norm_type", "}", ")", "\n", "self", ".", "classifier", ".", "append", "(", "DeepGNN", ".", "NAME2CLS", "[", "'mlp'", "]", "(", "**", "_kwargs", ")", ")", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "classifier", ")", "\n", "# ---- optimizer, etc. ----", "\n", "self", ".", "lr", "=", "train_params", "[", "\"lr\"", "]", "\n", "self", ".", "sigmoid_loss", "=", "arch_gnn", "[", "\"loss\"", "]", "==", "\"sigmoid\"", "\n", "self", ".", "loss", ",", "self", ".", "opt_op", "=", "0", ",", "None", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", "\n", "\n", "self", ".", "num_ensemble", "=", "num_ensemble", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.models.DeepGNN._loss": [[156, 167], ["len", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "labels.type", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "_loss", "(", "self", ",", "preds", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        The predictor performs sigmoid (for multi-class) or softmax (for single-class)\n        \"\"\"", "\n", "if", "self", ".", "sigmoid_loss", ":", "\n", "            ", "assert", "preds", ".", "shape", "==", "labels", ".", "shape", "\n", "return", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "(", "preds", ",", "labels", ".", "type", "(", "preds", ".", "dtype", ")", ")", "*", "preds", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "labels", ".", "shape", ")", "==", "2", ":", "# flatten to 1D", "\n", "                ", "labels", "=", "torch", ".", "max", "(", "labels", ",", "axis", "=", "1", ")", "[", "1", "]", "# this can handle both bool and float types", "\n", "", "return", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "preds", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.models.DeepGNN.forward": [[169, 205], ["len", "range", "models.DeepGNN.ensembler", "models.DeepGNN.classifier", "torch.normalize", "torch.normalize", "emb_subg_ens.append", "len", "enumerate", "md", "xjk.append", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to"], ["", "", "def", "forward", "(", "\n", "self", ",", "\n", "mode", ",", "\n", "feat_ens", ",", "\n", "adj_ens", ",", "\n", "target_ens", ",", "\n", "size_subg_ens", ",", "\n", "feat_aug_ens", ",", "\n", "dropedge", "\n", ")", ":", "\n", "        ", "num_ensemble", "=", "len", "(", "feat_ens", ")", "\n", "emb_subg_ens", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_ensemble", ")", ":", "\n", "            ", "if", "self", ".", "dim_label_in", ">", "0", "and", "mode", "==", "TRAIN", ":", "\n", "                ", "feat_ens", "[", "i", "]", "[", "target_ens", "[", "i", "]", ",", "-", "self", ".", "dim_label_in", ":", "]", "=", "0", "\n", "# feature augment", "\n", "", "if", "len", "(", "self", ".", "type_feature_augment", ")", ">", "0", ":", "\n", "                ", "for", "ia", ",", "(", "ta", ",", "_dim", ")", "in", "enumerate", "(", "self", ".", "type_feature_augment", ")", ":", "\n", "                    ", "feat_aug_emb", "=", "self", ".", "aug_layers", "[", "i", "]", "[", "ia", "]", "(", "feat_aug_ens", "[", "i", "]", "[", "ta", "]", ")", "\n", "if", "self", ".", "feat_aug_ops", "==", "'sum'", ":", "\n", "                        ", "feat_ens", "[", "i", "]", "[", ":", ",", ":", "self", ".", "dim_feat_in", "]", "+=", "feat_aug_emb", "\n", "", "else", ":", "\n", "                        ", "feat_ens", "[", "i", "]", "=", "torch", ".", "cat", "(", "[", "feat_ens", "[", "i", "]", ",", "feat_aug_emb", "]", ",", "dim", "=", "1", ")", ".", "to", "(", "feat_ens", "[", "i", "]", ".", "device", ")", "\n", "# main propagation", "\n", "", "", "", "xjk", "=", "[", "]", "\n", "xmd", "=", "(", "feat_ens", "[", "i", "]", ",", "adj_ens", "[", "i", "]", ",", "False", ",", "dropedge", ")", "\n", "for", "md", "in", "self", ".", "conv_layers", "[", "i", "]", ":", "\n", "                ", "xmd", "=", "md", "(", "xmd", ",", "sizes_subg", "=", "size_subg_ens", "[", "i", "]", ")", "\n", "xjk", ".", "append", "(", "xmd", "[", "0", "]", ")", "\n", "# residue and pooling", "\n", "", "emb_subg_i", "=", "self", ".", "res_pool_layers", "[", "i", "]", "(", "xjk", ",", "target_ens", "[", "i", "]", ",", "size_subg_ens", "[", "i", "]", ")", "\n", "emb_subg_i", "=", "F", ".", "normalize", "(", "emb_subg_i", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "emb_subg_ens", ".", "append", "(", "emb_subg_i", ")", "\n", "", "emb_ensemble", "=", "self", ".", "ensembler", "(", "emb_subg_ens", ")", "\n", "pred_subg", "=", "self", ".", "classifier", "(", "emb_ensemble", ")", "\n", "return", "pred_subg", ",", "emb_subg_ens", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.models.DeepGNN.predict": [[206, 208], ["torch.softmax", "torch.softmax", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "preds", ")", ":", "\n", "        ", "return", "nn", ".", "Sigmoid", "(", ")", "(", "preds", ")", "if", "self", ".", "sigmoid_loss", "else", "F", ".", "softmax", "(", "preds", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.models.DeepGNN.step": [[209, 237], ["batch_data.to_dict", "torch.one_hot", "torch.one_hot", "models.DeepGNN.train", "models.DeepGNN.optimizer.zero_grad", "models.DeepGNN.", "models.DeepGNN._loss", "models.DeepGNN.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "models.DeepGNN.optimizer.step", "models.DeepGNN.eval", "models.DeepGNN.predict", "len", "torch.one_hot.to", "models.DeepGNN.parameters", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "models.DeepGNN.", "models.DeepGNN._loss"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.OneBatchSubgraph.to_dict", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.main.train", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ModelPostEns._loss", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ModelPostEns.step", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ModelPostEns.predict", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ModelPostEns._loss"], ["", "def", "step", "(", "self", ",", "mode", ",", "status", ",", "batch_data", ":", "OneBatchSubgraph", ")", ":", "\n", "        ", "assert", "status", "in", "[", "'running'", ",", "'final'", "]", "\n", "args_forward_common", "=", "batch_data", ".", "to_dict", "(", "\n", "{", "\"feat_ens\"", ",", "\"adj_ens\"", ",", "\"target_ens\"", ",", "\"size_subg_ens\"", ",", "\"feat_aug_ens\"", "}", "\n", ")", "\n", "label_targets", "=", "batch_data", ".", "label", "\n", "if", "len", "(", "label_targets", ".", "shape", ")", "==", "1", "and", "self", ".", "num_classes", ">", "1", ":", "\n", "            ", "label_targets", "=", "F", ".", "one_hot", "(", "label_targets", ".", "to", "(", "torch", ".", "int64", ")", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "", "if", "mode", "==", "TRAIN", "and", "status", "==", "'running'", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "preds", ",", "emb_ens", "=", "self", "(", "mode", ",", "dropedge", "=", "self", ".", "dropedge", ",", "**", "args_forward_common", ")", "\n", "loss", "=", "self", ".", "_loss", "(", "preds", ",", "label_targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "parameters", "(", ")", ",", "5", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "preds", ",", "emb_ens", "=", "self", "(", "mode", ",", "dropedge", "=", "0.", ",", "**", "args_forward_common", ")", "\n", "loss", "=", "self", ".", "_loss", "(", "preds", ",", "label_targets", ")", "\n", "", "", "assert", "preds", ".", "shape", "[", "0", "]", "==", "label_targets", ".", "shape", "[", "0", "]", "\n", "return", "{", "\n", "'batch_size'", ":", "preds", ".", "shape", "[", "0", "]", ",", "\n", "'loss'", ":", "loss", ",", "\n", "'labels'", ":", "label_targets", ",", "\n", "'preds'", ":", "self", ".", "predict", "(", "preds", ")", ",", "\n", "'emb_ens'", ":", "emb_ens", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.models.DeepGNN.calc_complexity_step": [[239, 267], ["len", "range", "models.DeepGNN.ensembler.complexity", "models.DeepGNN.classifier.complexity", "models.DeepGNN.res_pool_layers[].complexity", "dims_ens.append", "len", "enumerate", "shaDow.Dims_X", "shaDow.Dims_adj", "md.complexity", "dims_respool.append", "numpy.prod", "list"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GAT.complexity", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GAT.complexity", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GAT.complexity", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GAT.complexity"], ["", "def", "calc_complexity_step", "(", "self", ",", "adj_ens", ",", "feat_ens", ",", "sizes_subg_ens", ")", ":", "\n", "        ", "\"\"\"\n        The complexity of generating the prediction. \n        \"\"\"", "\n", "num_ensemble", "=", "len", "(", "feat_ens", ")", "\n", "dims_ens", "=", "[", "]", "\n", "ops", "=", "0", "\n", "for", "i", "in", "range", "(", "num_ensemble", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "type_feature_augment", ")", ">", "0", ":", "\n", "                ", "for", "ia", ",", "_", "in", "enumerate", "(", "self", ".", "type_feature_augment", ")", ":", "# this does not change feat dim", "\n", "                    ", "ops", "+=", "np", ".", "prod", "(", "list", "(", "self", ".", "aug_layers", "[", "i", "]", "[", "ia", "]", ".", "weight", ".", "shape", ")", ")", "*", "feat_ens", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "", "", "dims_respool", "=", "[", "]", "\n", "dims_conv", "=", "(", "\n", "layers", ".", "Dims_X", "(", "*", "(", "feat_ens", "[", "i", "]", ".", "shape", ")", ")", ",", "\n", "layers", ".", "Dims_adj", "(", "adj_ens", "[", "i", "]", ".", "shape", "[", "0", "]", ",", "adj_ens", "[", "i", "]", ".", "size", ")", "\n", ")", "\n", "for", "md", "in", "self", ".", "conv_layers", "[", "i", "]", ":", "\n", "                ", "dims_conv", ",", "_ops", "=", "md", ".", "complexity", "(", "*", "dims_conv", ")", "\n", "dims_respool", ".", "append", "(", "dims_conv", "[", "0", "]", ")", "\n", "ops", "+=", "_ops", "\n", "", "dims_emb", ",", "_ops", "=", "self", ".", "res_pool_layers", "[", "i", "]", ".", "complexity", "(", "dims_respool", ",", "sizes_subg_ens", ")", "\n", "ops", "+=", "_ops", "\n", "dims_ens", ".", "append", "(", "dims_emb", ")", "\n", "", "dims_cls", ",", "_ops", "=", "self", ".", "ensembler", ".", "complexity", "(", "dims_ens", ")", "\n", "ops", "+=", "_ops", "\n", "_dims_final", ",", "_ops", "=", "self", ".", "classifier", ".", "complexity", "(", "dims_cls", ")", "\n", "ops", "+=", "_ops", "\n", "return", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.models.DeepGNN.__str__": [[268, 271], ["type"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "instance_info", "=", "f\"model name: {type(self).__name__}\"", "\n", "return", "instance_info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.main.instantiate": [[33, 134], ["getattr", "data_train.deinit", "shaDow.minibatch.MinibatchShallowExtractor", "shaDow.models.DeepGNN().to", "all", "all", "len", "shaDow.minibatch.MinibatchShallowExtractor", "shaDow.preproc.PreprocessGraph().preprocess", "DeepGNN().to.load_state_dict", "DeepGNN().to.optimizer.load_state_dict", "graph_engine.find_all_backends", "len", "shaDow.minibatch.MinibatchShallowExtractor.get_aug_dim", "shaDow.models.DeepGNN", "glob.glob", "glob.glob", "torch.load", "torch.load", "label_full[].max().item", "shaDow.preproc.PreprocessGraph", "bin_adj_files.values", "label_full[].max"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.RawGraph.deinit", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_CnS.preprocess", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.find_all_backends", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.get_aug_dim"], ["def", "instantiate", "(", "\n", "name_data", ":", "str", ",", "\n", "dir_data", ":", "dict", ",", "\n", "data_train", ":", "RawGraph", ",", "\n", "params_train", ":", "dict", ",", "\n", "arch_gnn", ":", "dict", ",", "\n", "config_sampler_preproc", ":", "dict", ",", "\n", "config_sampler_train", ":", "dict", ",", "\n", "parallelism", ":", "int", ",", "\n", "full_tensor_on_gpu", ":", "bool", ",", "\n", "no_pbar", ":", "bool", ",", "\n", "seed_cpp", ":", "int", "=", "-", "1", "# if -1, then NOT fixing random seed", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Prepare some data structure and initialize model / minibatch handler before\n    the actual iterative training taking place.\n    \"\"\"", "\n", "adj_full", ",", "adj_train", "=", "data_train", ".", "adj_full", ",", "data_train", ".", "adj_train", "\n", "feat_full", "=", "data_train", ".", "feat_full", "\n", "bin_adj_files", "=", "data_train", ".", "bin_adj_files", "\n", "label_full", "=", "getattr", "(", "data_train", ",", "'label_full'", ",", "None", ")", "\n", "entity_set", "=", "data_train", ".", "entity_set", "\n", "is_transductive", "=", "(", "adj_full", ".", "size", "==", "adj_train", ".", "size", ")", "\n", "data_train", ".", "deinit", "(", ")", "# dereference everything to help with memory free later on. ", "\n", "_all_sampler_configs", "=", "config_sampler_preproc", "[", "'configs'", "]", "+", "config_sampler_train", "[", "'configs'", "]", "\n", "if", "(", "\n", "all", "(", "b", "is", "not", "None", "for", "b", "in", "bin_adj_files", ".", "values", "(", ")", ")", "\n", "and", "all", "(", "cf", "[", "'method'", "]", "!=", "'full'", "for", "cf", "in", "_all_sampler_configs", ")", "\n", "and", "'python'", "not", "in", "Ens", ".", "find_all_backends", "(", "_all_sampler_configs", ")", "\n", ")", ":", "# full sampler skips the C++ layers", "\n", "        ", "adj_full", "=", "adj_train", "=", "None", "\n", "", "adjs", "=", "{", "TRAIN", ":", "adj_train", ",", "VALID", ":", "adj_full", ",", "TEST", ":", "adj_full", "}", "\n", "# preprocess", "\n", "dir_data", "[", "'is_adj_changed'", "]", "=", "dir_data", "[", "'is_feat_changed'", "]", "=", "False", "\n", "dim_feat_raw", "=", "feat_full", ".", "shape", "[", "1", "]", "\n", "if", "label_full", "is", "not", "None", ":", "\n", "        ", "if", "len", "(", "label_full", ".", "shape", ")", "==", "1", ":", "\n", "            ", "dim_label_raw", "=", "label_full", "[", "label_full", "==", "label_full", "]", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "dim_label_raw", "=", "label_full", ".", "shape", "[", "1", "]", "\n", "", "", "else", ":", "\n", "        ", "dim_label_raw", "=", "1", "# link prediction: just 0/1 for (non-)existence of the link", "\n", "", "args_minibatch_common", "=", "{", "# common args shared by Minibatch instances of preproc and training", "\n", "\"name_data\"", ":", "name_data", ",", "\n", "\"dir_data\"", ":", "dir_data", ",", "\n", "\"entity_set\"", ":", "entity_set", ",", "\n", "\"aug_feats\"", ":", "arch_gnn", "[", "\"feature_augment\"", "]", ",", "\n", "\"label_full\"", ":", "label_full", ",", "\n", "\"is_transductive\"", ":", "is_transductive", ",", "\n", "\"parallelism\"", ":", "parallelism", ",", "\n", "\"full_tensor_on_gpu\"", ":", "full_tensor_on_gpu", ",", "\n", "\"bin_adj_files\"", ":", "bin_adj_files", ",", "\n", "\"seed_cpp\"", ":", "seed_cpp", "\n", "}", "\n", "if", "len", "(", "config_sampler_preproc", "[", "'configs'", "]", ")", ">", "0", ":", "\n", "        ", "minibatch_preproc", "=", "MinibatchShallowExtractor", "(", "\n", "adjs", "=", "adjs", ",", "\n", "sampler_config_ensemble", "=", "config_sampler_preproc", ",", "\n", "feat_full", "=", "feat_full", ",", "\n", "dim_feat_raw", "=", "dim_feat_raw", ",", "\n", "percent_per_epoch", "=", "None", ",", "\n", "**", "args_minibatch_common", "\n", ")", "\n", "(", "# feat_full now also contains label if using label propagation", "\n", "adjs", ",", "feat_full", ",", "\n", "is_adj_changed", ",", "is_feat_changed", ",", "\n", "dim_feat_smooth", ",", "dim_label_smooth", "\n", ")", "=", "PreprocessGraph", "(", "arch_gnn", ",", "minibatch_preproc", ",", "no_pbar", ")", ".", "preprocess", "(", ")", "\n", "dir_data", "[", "'is_adj_changed'", "]", "=", "is_adj_changed", "\n", "dir_data", "[", "'is_feat_changed'", "]", "=", "is_feat_changed", "\n", "", "else", ":", "\n", "        ", "dim_feat_smooth", "=", "dim_feat_raw", "\n", "dim_label_smooth", "=", "0", "\n", "# instantiate minibatch and model for main training loop", "\n", "", "minibatch", "=", "MinibatchShallowExtractor", "(", "\n", "adjs", "=", "adjs", ",", "\n", "sampler_config_ensemble", "=", "config_sampler_train", ",", "\n", "feat_full", "=", "feat_full", ",", "\n", "dim_feat_raw", "=", "dim_feat_raw", ",", "\n", "percent_per_epoch", "=", "params_train", "[", "\"percent_per_epoch\"", "]", ",", "\n", "**", "args_minibatch_common", "\n", ")", "\n", "aug_feat", "=", "[", "(", "k", ",", "minibatch", ".", "get_aug_dim", "(", "k", ")", ")", "for", "k", "in", "arch_gnn", "[", "'feature_augment'", "]", "]", "\n", "model", "=", "DeepGNN", "(", "\n", "dim_feat_raw", ",", "\n", "dim_feat_smooth", ",", "\n", "dim_label_raw", ",", "\n", "dim_label_smooth", ",", "\n", "arch_gnn", ",", "\n", "aug_feat", ",", "\n", "minibatch", ".", "num_ensemble", ",", "\n", "params_train", ",", "\n", "minibatch", ".", "prediction_task", "\n", ")", ".", "to", "(", "device", ")", "\n", "# reload model, if the previous checkpoint is provided as hyperparams", "\n", "if", "'retrain_dir'", "in", "params_train", ":", "\n", "        ", "f_model", "=", "glob", ".", "glob", "(", "f\"{params_train['retrain_dir']}/saved_model_*\"", ")", "[", "0", "]", "\n", "f_optm", "=", "glob", ".", "glob", "(", "f\"{params_train['retrain_dir']}/saved_optimizer_*\"", ")", "[", "0", "]", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "f_model", ")", ")", "\n", "model", ".", "optimizer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "f_optm", ")", ")", "\n", "", "return", "model", ",", "minibatch", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.main.one_epoch": [[136, 170], ["minibatch.epoch_start_reset", "minibatch.shuffle_entity", "logger.epoch_start_reset", "time.time", "minibatch.profiler.print_summary", "time.time", "minibatch.epoch_end_reset", "logger.update_epoch", "logger.log_key_step", "minibatch.is_end_epoch", "minibatch.one_batch", "model.step", "logger.update_batch", "enumerate", "len", "len", "minibatch.one_batch.pop_idx_raw", "graph_engine.frontend.TRAIN", "graph_engine.frontend.VALID", "graph_engine.frontend.TEST"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.epoch_start_reset", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.shuffle_entity", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.epoch_start_reset", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.profiler.SubgraphProfiler.print_summary", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.epoch_end_reset", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.update_epoch", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.log_key_step", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.is_end_epoch", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.one_batch", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ModelPostEns.step", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.update_batch", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.OneBatchSubgraph.pop_idx_raw"], ["", "def", "one_epoch", "(", "ep", ",", "mode", ",", "model", ",", "minibatch", ",", "logger", ",", "status", "=", "'running'", ",", "pred_mat", "=", "None", ",", "emb_ens", "=", "None", ")", ":", "\n", "    ", "\"\"\"    \n    NOTE that pred_mat and emb_ens are ONLY used for post-processing. \n    For all experiments in our main paper, we have pred_mat = emb_ens = None\n    Also, for ensemble, we implement two algorithms. \n    1. ensemble during training: so no post-processing is needed. \n    2. ensemble during post-processing: so train a few models first, and then \n        launch another trainer just to train the ensembler during post-proc\n    The algorithm described in our paper (and appendix) follow algorithm 1. \n    \"\"\"", "\n", "assert", "status", "in", "[", "'running'", ",", "'final'", "]", "and", "mode", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", "\n", "minibatch", ".", "epoch_start_reset", "(", "ep", ",", "mode", ")", "\n", "minibatch", ".", "shuffle_entity", "(", "mode", ")", "\n", "logger", ".", "epoch_start_reset", "(", "ep", ",", "mode", ",", "minibatch", ".", "entity_epoch", "[", "mode", "]", ".", "shape", "[", "0", "]", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "while", "not", "minibatch", ".", "is_end_epoch", "(", "mode", ")", ":", "\n", "        ", "input_batch", "=", "minibatch", ".", "one_batch", "(", "\n", "mode", "=", "mode", ",", "ret_raw_idx", "=", "(", "pred_mat", "is", "not", "None", "or", "emb_ens", "is", "not", "None", ")", "\n", ")", "\n", "if", "pred_mat", "is", "not", "None", "or", "emb_ens", "is", "not", "None", ":", "\n", "            ", "idx_pred_raw", "=", "input_batch", ".", "pop_idx_raw", "(", ")", "[", "0", "]", "[", "input_batch", ".", "target_ens", "[", "0", "]", "]", "\n", "", "output_batch", "=", "model", ".", "step", "(", "mode", ",", "status", ",", "input_batch", ")", "\n", "if", "pred_mat", "is", "not", "None", ":", "# prepare for C&S", "\n", "            ", "pred_mat", "[", "idx_pred_raw", "]", "=", "output_batch", "[", "'preds'", "]", "\n", "", "if", "emb_ens", "is", "not", "None", ":", "# prepare for subgraph ensemble", "\n", "            ", "assert", "len", "(", "emb_ens", ")", "==", "len", "(", "output_batch", "[", "'emb_ens'", "]", ")", "\n", "for", "ie", ",", "e", "in", "enumerate", "(", "emb_ens", ")", ":", "\n", "                ", "e", "[", "idx_pred_raw", "]", "=", "output_batch", "[", "'emb_ens'", "]", "[", "ie", "]", "\n", "", "", "logger", ".", "update_batch", "(", "mode", ",", "minibatch", ".", "batch_num", ",", "output_batch", ")", "\n", "", "minibatch", ".", "profiler", ".", "print_summary", "(", ")", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "minibatch", ".", "epoch_end_reset", "(", "mode", ")", "\n", "logger", ".", "update_epoch", "(", "ep", ",", "mode", ")", "\n", "return", "logger", ".", "log_key_step", "(", "mode", ",", "status", "=", "status", ",", "time", "=", "t2", "-", "t1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.main.train": [[172, 202], ["logger.init_log2file", "logger.init_log2file", "range", "logger.printf", "logger.restore_model", "main.one_epoch", "main.one_epoch", "logger.update_best_model", "minibatch.profiler.clear_metrics", "main.one_epoch", "type", "len", "minibatch.disable_cache", "main.one_epoch", "int", "int"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.init_log2file", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.init_log2file", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.restore_model", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.main.one_epoch", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.main.one_epoch", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.update_best_model", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.profiler.SubgraphProfiler.clear_metrics", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.main.one_epoch", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.disable_cache", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.main.one_epoch"], ["", "def", "train", "(", "model", ",", "minibatch", ",", "max_epoch", ",", "logger", ",", "nocache", "=", "None", ")", ":", "\n", "# log running info into CSV file, which has 8 columns for each epoch", "\n", "    ", "logger", ".", "init_log2file", "(", "status", "=", "'running'", ")", "\n", "logger", ".", "init_log2file", "(", "status", "=", "'final'", ")", "\n", "if", "type", "(", "nocache", ")", "==", "str", "and", "len", "(", "nocache", ")", ">", "0", ":", "\n", "# don't cache the sampled subgraphs. So later epochs will compute the sampling again", "\n", "        ", "modes", "=", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", "if", "nocache", "==", "'all'", "else", "[", "STR2MODE", "[", "nocache", "]", "]", "\n", "for", "mode", "in", "modes", ":", "\n", "            ", "minibatch", ".", "disable_cache", "(", "mode", ")", "\n", "# ---- main training loop ----", "\n", "", "", "for", "e", "in", "range", "(", "max_epoch", ")", ":", "\n", "        ", "one_epoch", "(", "e", ",", "TRAIN", ",", "model", ",", "minibatch", ",", "logger", ")", "\n", "one_epoch", "(", "e", ",", "VALID", ",", "model", ",", "minibatch", ",", "logger", ")", "\n", "if", "logger", ".", "log_test_convergence", ">", "0", "and", "e", "%", "logger", ".", "log_test_convergence", "==", "0", ":", "\n", "            ", "one_epoch", "(", "int", "(", "e", "/", "logger", ".", "log_test_convergence", ")", ",", "TEST", ",", "model", ",", "minibatch", ",", "logger", ")", "\n", "", "logger", ".", "update_best_model", "(", "e", ",", "model", ",", "model", ".", "optimizer", ")", "\n", "minibatch", ".", "profiler", ".", "clear_metrics", "(", ")", "\n", "# ---- final testing ----", "\n", "", "logger", ".", "printf", "(", "\n", "(", "\n", "\"======================\\n\"", "\n", "\"Optimization Finished!\\n\"", "\n", "\"======================\\n\"", "\n", ")", ",", "style", "=", "\"red\"", "\n", ")", "\n", "logger", ".", "restore_model", "(", "model", ",", "optimizer", "=", "None", ")", "\n", "ep_final_test", "=", "0", "if", "logger", ".", "log_test_convergence", "<=", "0", "else", "int", "(", "e", "/", "logger", ".", "log_test_convergence", ")", "+", "1", "\n", "ep_final", "=", "{", "TRAIN", ":", "e", "+", "1", ",", "VALID", ":", "e", "+", "1", ",", "TEST", ":", "ep_final_test", "}", "\n", "for", "md", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", ":", "\n", "        ", "one_epoch", "(", "ep_final", "[", "md", "]", ",", "md", ",", "model", ",", "minibatch", ",", "logger", ",", "status", "=", "'final'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.main.inference": [[204, 212], ["logger.init_log2file", "logger.load_model", "minibatch.disable_cache", "main.one_epoch", "minibatch.drop_full_graph_info"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.init_log2file", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.load_model", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.disable_cache", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.main.one_epoch", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.drop_full_graph_info"], ["", "", "def", "inference", "(", "model", ",", "minibatch", ",", "logger", ",", "device", "=", "None", ",", "inf_train", "=", "False", ")", ":", "\n", "    ", "logger", ".", "init_log2file", "(", "status", "=", "'final'", ")", "\n", "logger", ".", "load_model", "(", "model", ",", "optimizer", "=", "None", ",", "copy", "=", "False", ",", "device", "=", "device", ")", "# no need to restore optimizer for pure inference", "\n", "modes", "=", "[", "VALID", ",", "TEST", "]", "if", "not", "inf_train", "else", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", "\n", "for", "mode", "in", "modes", ":", "\n", "        ", "minibatch", ".", "disable_cache", "(", "mode", ")", "# no need to cache subgraphs since we only make one pass", "\n", "one_epoch", "(", "0", ",", "mode", ",", "model", ",", "minibatch", ",", "logger", ",", "status", "=", "'final'", ")", "\n", "minibatch", ".", "drop_full_graph_info", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.main.postprocessing": [[214, 296], ["logger.init_log2file", "logger.print_table_postproc", "logger.set_loader_path", "logger.load_model", "config[].lower", "enumerate", "correct_smooth", "minibatch.disable_cache", "merge_stat_record", "config[].lower", "config[].items", "ensemble_multirun", "main.postprocessing._common_setup"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.init_log2file", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.print_table_postproc", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.set_loader_path", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.load_model", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_CnS.correct_smooth", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.disable_cache", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.merge_stat_record", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ensemble_multirun"], ["", "", "def", "postprocessing", "(", "data_post", ",", "model", ",", "minibatch", ",", "logger", ",", "config", ",", "acc_record", ")", ":", "\n", "    ", "\"\"\"\n    Detailed instructions to run post-processing to be added soon. \n    Post-processing is not described in our paper. So this part of code is WIP and\n    only meant for experimentation. \n    If acc_record is None, then we don't check accuracy. This enables CS for still running jobs. \n    \"\"\"", "\n", "from", "shaDow", ".", "utils", "import", "merge_stat_record", "\n", "logger", ".", "init_log2file", "(", "status", "=", "'final'", ")", "\n", "def", "_common_setup", "(", "dmodel", ")", ":", "\n", "        ", "logger", ".", "set_loader_path", "(", "dmodel", ")", "\n", "logger", ".", "load_model", "(", "model", ",", "optimizer", "=", "None", ",", "copy", "=", "False", ")", "\n", "logger", ".", "info_batch", "[", "TRAIN", "]", ".", "PERIOD_LOG", "=", "1", "\n", "for", "md", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", ":", "\n", "            ", "minibatch", ".", "disable_cache", "(", "md", ")", "\n", "", "", "if", "config", "[", "'method'", "]", ".", "lower", "(", ")", "==", "'cs'", ":", "\n", "        ", "from", "shaDow", ".", "postproc_CnS", "import", "correct_smooth", "\n", "# NOTE: setting the TRAIN evaluation period to > 1 will only make the ", "\n", "#   log / print message \"appear\" to be nondeterministic. However, the ", "\n", "#   full prediction matrix `pred_mat` is always deterministic regardless", "\n", "#   of the evaluation frequency. So PERIOD_LOG has no effect on the C&S output. ", "\n", "assert", "acc_record", "is", "None", "or", "(", "type", "(", "acc_record", ")", "==", "list", "and", "len", "(", "acc_record", ")", "==", "len", "(", "config", "[", "'dir_pred_mat'", "]", ")", ")", "\n", "# generate and store prediction matrix if not yet available from external file", "\n", "for", "i", ",", "dmodel", "in", "enumerate", "(", "config", "[", "'dir_pred_mat'", "]", ")", ":", "\n", "            ", "if", "config", "[", "'pred_mat'", "]", "[", "i", "]", "is", "None", ":", "\n", "                ", "_common_setup", "(", "dmodel", ")", "\n", "if", "minibatch", ".", "name_data", "not", "in", "[", "'arxiv'", ",", "'products'", "]", ":", "\n", "                    ", "logger", ".", "printf", "(", "f\"POSTPROC OF CS ONLY DOES NOT SUPPORT {minibatch.name_data} YET\"", ")", "\n", "raise", "NotImplementedError", "\n", "", "pred_mat", "=", "torch", ".", "zeros", "(", "minibatch", ".", "label_full", ".", "shape", ")", ".", "to", "(", "config", "[", "'dev_torch'", "]", ")", "\n", "for", "md", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", ":", "\n", "                    ", "one_epoch", "(", "0", ",", "md", ",", "model", ",", "minibatch", ",", "logger", ",", "status", "=", "'final'", ",", "pred_mat", "=", "pred_mat", ")", "\n", "", "fname_pred", "=", "'pred_mat_{}.cs'", "if", "acc_record", "is", "not", "None", "else", "'__pred_mat_{}.cs'", "\n", "logger", ".", "save_tensor", "(", "pred_mat", ",", "fname_pred", ",", "use_path_loader", "=", "True", ")", "\n", "config", "[", "'pred_mat'", "]", "[", "i", "]", "=", "pred_mat", "\n", "logger", ".", "reset", "(", ")", "\n", "", "", "if", "acc_record", "is", "not", "None", ":", "\n", "            ", "acc_record", "=", "merge_stat_record", "(", "acc_record", ")", "\n", "", "acc_orig", ",", "acc_post", "=", "correct_smooth", "(", "\n", "config", "[", "'name_data'", "]", ",", "\n", "config", "[", "'dev_torch'", "]", ",", "\n", "config", "[", "'pred_mat'", "]", ",", "\n", "config", "[", "'hyperparameter'", "]", "[", "'norm_sym'", "]", ",", "\n", "config", "[", "'hyperparameter'", "]", "[", "'alpha'", "]", "\n", ")", "\n", "# double check if acc calulated by C&S matches with the record (i.e., acc_orig & acc_record)", "\n", "if", "acc_record", "is", "not", "None", ":", "\n", "            ", "for", "md", "in", "[", "VALID", ",", "TEST", "]", ":", "\n", "                ", "acc_orig_m", "=", "[", "round", "(", "a", ",", "4", ")", "for", "a", "in", "acc_orig", "[", "md", "]", "]", "\n", "acc_recd_m", "=", "[", "round", "(", "a", ",", "4", ")", "for", "a", "in", "acc_record", "[", "'accuracy'", "]", "[", "md", "]", "]", "\n", "assert", "all", "(", "abs", "(", "acc_orig_m", "[", "i", "]", "-", "acc_recd_m", "[", "i", "]", ")", "<=", "0.0001", "for", "i", "in", "range", "(", "len", "(", "acc_orig_m", ")", ")", ")", ",", "\"[ACC MISMATCH] MAYBE YOU WANT TO REMOVE THE STORED IN THIS RUN. \"", "\n", "", "", "", "elif", "config", "[", "'method'", "]", ".", "lower", "(", ")", "==", "'ensemble'", ":", "\n", "        ", "from", "shaDow", ".", "postproc_ens", "import", "ensemble_multirun", "\n", "assert", "acc_record", "is", "None", "or", "(", "type", "(", "acc_record", ")", "==", "dict", "and", "len", "(", "acc_record", ")", "==", "len", "(", "config", "[", "'dir_emb_mat'", "]", ")", ")", "\n", "# the below 'for' loop is eval / inference only (no need to reset model)", "\n", "for", "sname", ",", "dirs_l", "in", "config", "[", "'dir_emb_mat'", "]", ".", "items", "(", ")", ":", "# ppr: [,,], khop: [,,]", "\n", "            ", "for", "i", ",", "dmodel", "in", "enumerate", "(", "dirs_l", ")", ":", "# [,,]", "\n", "                ", "if", "config", "[", "'emb_mat'", "]", "[", "sname", "]", "[", "i", "]", "is", "None", ":", "# single model", "\n", "# inference", "\n", "                    ", "_common_setup", "(", "dmodel", ")", "\n", "N", ",", "F", "=", "minibatch", ".", "feat_full", ".", "shape", "[", "0", "]", ",", "model", ".", "dim_hidden", "\n", "emb_mat", "=", "[", "torch", ".", "zeros", "(", "(", "N", ",", "F", ")", ")", ".", "to", "(", "config", "[", "'dev_torch'", "]", ")", "for", "i", "in", "range", "(", "model", ".", "num_ensemble", ")", "]", "\n", "for", "md", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", ":", "\n", "                        ", "one_epoch", "(", "0", ",", "md", ",", "model", ",", "minibatch", ",", "logger", ",", "status", "=", "'final'", ",", "emb_ens", "=", "emb_mat", ")", "\n", "", "fname_emb", "=", "'emb_mat_{}.ens'", "if", "acc_record", "is", "not", "None", "else", "'__emb_mat_{}.ens'", "\n", "_fname", "=", "logger", ".", "save_tensor", "(", "emb_mat", ",", "fname_emb", ",", "use_path_loader", "=", "True", ")", "\n", "config", "[", "'emb_mat'", "]", "[", "sname", "]", "[", "i", "]", "=", "emb_mat", "\n", "logger", ".", "reset", "(", ")", "\n", "# ensemble and train", "\n", "", "", "", "acc_orig", ",", "acc_post", "=", "ensemble_multirun", "(", "\n", "data_post", "[", "'node_set'", "]", ",", "\n", "config", "[", "'emb_mat'", "]", ",", "\n", "data_post", "[", "'label'", "]", ",", "\n", "config", "[", "'architecture'", "]", ",", "\n", "config", "[", "'hyperparameter'", "]", ",", "\n", "logger", ",", "\n", "config", "[", "'dev_torch'", "]", ",", "\n", "acc_record", "\n", ")", "\n", "# wrap up", "\n", "", "logger", ".", "print_table_postproc", "(", "acc_orig", ",", "acc_post", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.main.compute_complexity": [[299, 332], ["logger.printf", "logger.printf", "minibatch.disable_cache", "minibatch.epoch_start_reset", "minibatch.shuffle_entity", "tqdm", "tqdm.close", "minibatch.epoch_end_reset", "logger.printf", "minibatch.one_batch", "ops.append", "tqdm.update", "numpy.array().sum", "model.calc_complexity_step", "numpy.array"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.disable_cache", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.epoch_start_reset", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.shuffle_entity", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.epoch_end_reset", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.one_batch", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.models.DeepGNN.calc_complexity_step"], ["", "def", "compute_complexity", "(", "model", ",", "minibatch", ",", "num_roots_budget", ",", "logger", ",", "modes", "=", "[", "VALID", "]", ",", "unit", "=", "'G'", ")", ":", "\n", "    ", "from", "tqdm", "import", "tqdm", "\n", "logger", ".", "printf", "(", "\n", "(", "\n", "f\"-.-.-.-.-.-.-.-.-.-.-.\\n\"", "\n", "f\"COMPUTE INFERENCE COST\\n\"", "\n", "f\".-.-.-.-.-.-.-.-.-.-.-\\n\"", "\n", ")", ",", "style", "=", "'blue'", "\n", ")", "\n", "ops_mode", "=", "{", "}", "\n", "assert", "minibatch", ".", "prediction_task", "==", "'node'", "\n", "for", "md", "in", "modes", ":", "\n", "        ", "if", "num_roots_budget", "is", "None", "or", "num_roots_budget", "<=", "0", ":", "\n", "            ", "num_roots_budget", "=", "minibatch", ".", "entity_epoch", "[", "md", "]", ".", "shape", "[", "0", "]", "\n", "", "minibatch", ".", "disable_cache", "(", "md", ")", "\n", "minibatch", ".", "epoch_start_reset", "(", "0", ",", "md", ")", "\n", "minibatch", ".", "shuffle_entity", "(", "md", ")", "\n", "num_roots_eval", "=", "0", "\n", "ops", "=", "[", "]", "\n", "pbar", "=", "tqdm", "(", "total", "=", "num_roots_budget", ")", "\n", "while", "num_roots_eval", "<", "num_roots_budget", ":", "# TODO: replace with budget check", "\n", "            ", "batch", "=", "minibatch", ".", "one_batch", "(", "mode", "=", "md", ",", "ret_raw_idx", "=", "False", ")", "\n", "cur_batch_size", "=", "batch", ".", "batch_size", "\n", "num_roots_eval", "+=", "cur_batch_size", "\n", "ops", ".", "append", "(", "model", ".", "calc_complexity_step", "(", "batch", ".", "adj_ens", ",", "batch", ".", "feat_ens", ",", "batch", ".", "size_subg_ens", ")", ")", "\n", "pbar", ".", "update", "(", "cur_batch_size", ")", "\n", "", "pbar", ".", "close", "(", ")", "\n", "minibatch", ".", "epoch_end_reset", "(", "md", ")", "\n", "ops_mode", "[", "md", "]", "=", "np", ".", "array", "(", "ops", ")", ".", "sum", "(", ")", "/", "num_roots_eval", "\n", "", "logger", ".", "printf", "(", "f\"Average inference cost per node: \"", ",", "style", "=", "'blue'", ")", "\n", "norm_factor", "=", "{", "\"G\"", ":", "1e9", ",", "\"M\"", ":", "1e6", "}", "\n", "for", "md", "in", "modes", ":", "\n", "        ", "logger", ".", "printf", "(", "f\"[{MODE2STR[md]:^8s}]    {ops_mode[md] / norm_factor[unit]:.3f}{unit}\"", ",", "style", "=", "'blue'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.main.main": [[344, 450], ["shaDow.utils.parse_n_prepare", "shaDow.metric.Metrics", "shaDow.globals.Logger", "shaDow.utils.parse_n_prepare_postproc", "graph_engine.frontend.loader.load_data", "main.instantiate", "shaDow.globals.Logger.printf", "main.train", "shaDow.globals.Logger.end_training", "main.postprocessing", "args.nocache.lower", "shaDow.globals.Logger.set_loader_path", "shaDow.globals.Logger.load_model", "print", "traceback.print_tb", "shaDow.globals.Logger.set_loader_path", "main.inference", "main.compute_complexity", "sum", "type", "p.numel", "model.parameters"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.parse_n_prepare", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.parse_n_prepare_postproc", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_CnS.load_data", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.main.instantiate", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.main.train", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.end_training", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.main.postprocessing", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.set_loader_path", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.load_model", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.set_loader_path", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.main.inference", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.main.compute_complexity"], ["def", "main", "(", "task", ",", "args", ",", "args_logger", ")", ":", "\n", "    ", "assert", "task", "in", "[", "'train'", ",", "'inference'", ",", "'postproc'", "]", "\n", "dataset", "=", "args", ".", "dataset", "\n", "dir_log", "=", "meta_config", "[", "'logging'", "]", "[", "'dir'", "]", "[", "'local'", "]", "\n", "os_", "=", "meta_config", "[", "'device'", "]", "[", "'software'", "]", "[", "'os'", "]", "\n", "(", "\n", "params_train", ",", "\n", "config_sampler_preproc", ",", "\n", "config_sampler_train", ",", "\n", "config_data", ",", "\n", "arch_gnn", ",", "\n", "dir_log_full", "\n", ")", "=", "parse_n_prepare", "(", "task", ",", "args", ",", "dataset", ",", "dir_log", ",", "os_", "=", "os_", ")", "\n", "metrics", "=", "Metrics", "(", "dataset", ",", "(", "arch_gnn", "[", "'loss'", "]", "==", "'sigmoid'", ")", ",", "DATA_METRIC", "[", "dataset", "]", ",", "params_train", "[", "'term_window_size'", "]", ")", "\n", "config_term", "=", "{", "'window_size'", ":", "params_train", "[", "'term_window_size'", "]", ",", "'window_aggr'", ":", "params_train", "[", "'term_window_aggr'", "]", "}", "\n", "logger", "=", "Logger", "(", "\n", "task", ",", "\n", "{", "\n", "\"args\"", ":", "args", ",", "\n", "\"arch_gnn\"", ":", "arch_gnn", ",", "\n", "\"data\"", ":", "config_data", ",", "\n", "\"hyperparams\"", ":", "params_train", ",", "\n", "\"sampler_preproc\"", ":", "config_sampler_preproc", ",", "\n", "\"sampler_train\"", ":", "config_sampler_train", "\n", "}", ",", "\n", "dir_log_full", ",", "\n", "metrics", ",", "\n", "config_term", ",", "\n", "no_log", "=", "args", ".", "no_log", ",", "\n", "timestamp", "=", "timestamp", ",", "\n", "log_test_convergence", "=", "args", ".", "log_test_convergence", ",", "\n", "period_batch_train", "=", "args", ".", "eval_train_every", ",", "\n", "no_pbar", "=", "args", ".", "no_pbar", ",", "\n", "**", "args_logger", "\n", ")", "\n", "if", "task", "==", "'postproc'", ":", "\n", "        ", "config_postproc", ",", "acc_record", ",", "skip_instantiate", "=", "parse_n_prepare_postproc", "(", "\n", "args", ".", "postproc_dir", ",", "\n", "args", ".", "postproc_configs", ",", "\n", "dataset", ",", "dir_log", ",", "\n", "arch_gnn", ",", "\n", "logger", "\n", ")", "\n", "", "else", ":", "\n", "        ", "skip_instantiate", "=", "[", "]", "\n", "\n", "# skip_instantiate specifies if we want to skip certain steps in instantiating the model:", "\n", "# e.g., For C&S postproc, don't need to load the model if we have already stored the generated embeddings. ", "\n", "", "dir_data", "=", "meta_config", "[", "'data'", "]", "[", "'dir'", "]", "\n", "if", "'data'", "not", "in", "skip_instantiate", ":", "\n", "        ", "data_train", "=", "load_data", "(", "dir_data", ",", "dataset", ",", "config_data", ",", "printf", "=", "logger", ".", "printf", ")", "\n", "", "else", ":", "\n", "        ", "data_train", "=", "None", "\n", "", "if", "'model'", "not", "in", "skip_instantiate", ":", "\n", "        ", "assert", "'data'", "not", "in", "skip_instantiate", "\n", "model", ",", "minibatch", "=", "instantiate", "(", "\n", "dataset", ",", "\n", "dir_data", ",", "\n", "data_train", ",", "\n", "params_train", ",", "arch_gnn", ",", "\n", "config_sampler_preproc", ",", "config_sampler_train", ",", "\n", "meta_config", "[", "'device'", "]", "[", "'cpu'", "]", "[", "'max_threads'", "]", ",", "\n", "args", ".", "full_tensor_on_gpu", ",", "\n", "args", ".", "no_pbar", ",", "\n", "args", ".", "seed", "\n", ")", "\n", "logger", ".", "printf", "(", "f\"TOTAL NUM OF PARAMS = {sum(p.numel() for p in model.parameters())}\"", ",", "style", "=", "\"yellow\"", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "minibatch", "=", "None", "\n", "\n", "# Now handle the specific tasks", "\n", "", "if", "task", "==", "'train'", ":", "\n", "        ", "try", ":", "\n", "            ", "nocache", "=", "args", ".", "nocache", "if", "type", "(", "args", ".", "nocache", ")", "!=", "str", "else", "args", ".", "nocache", ".", "lower", "(", ")", "\n", "if", "args", ".", "reload_model_dir", "is", "not", "None", ":", "\n", "                ", "logger", ".", "set_loader_path", "(", "args", ".", "reload_model_dir", ")", "\n", "logger", ".", "load_model", "(", "model", ",", "optimizer", "=", "model", ".", "optimizer", ",", "copy", "=", "False", ",", "device", "=", "device", ")", "\n", "", "train", "(", "model", ",", "minibatch", ",", "params_train", "[", "\"end\"", "]", ",", "logger", ",", "nocache", "=", "nocache", ")", "\n", "status", "=", "'finished'", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "            ", "status", "=", "'killed'", "\n", "print", "(", "\"Pressed CTRL-C! Stopping. \"", ")", "\n", "", "except", "Exception", "as", "err", ":", "\n", "            ", "status", "=", "'crashed'", "\n", "import", "traceback", "\n", "traceback", ".", "print_tb", "(", "err", ".", "__traceback__", ")", "\n", "", "finally", ":", "\n", "# logger will only remove file when you are running the test *.yml", "\n", "            ", "logger", ".", "end_training", "(", "status", ")", "# cleanup the unwanted log files", "\n", "", "", "elif", "task", "==", "'inference'", ":", "\n", "        ", "if", "not", "args", ".", "compute_complexity_only", ":", "\n", "            ", "logger", ".", "set_loader_path", "(", "args", ".", "inference_dir", ")", "\n", "inference", "(", "model", ",", "minibatch", ",", "logger", ",", "device", "=", "device", ",", "inf_train", "=", "args", ".", "is_inf_train", ")", "\n", "", "else", ":", "\n", "            ", "compute_complexity", "(", "model", ",", "minibatch", ",", "args", ".", "inference_budget", ",", "logger", ")", "\n", "", "", "else", ":", "# postprocessing", "\n", "        ", "config_postproc", "[", "'dev_torch'", "]", "=", "device", "\n", "config_postproc", "[", "'name_data'", "]", "=", "dataset", "\n", "if", "minibatch", "is", "not", "None", ":", "\n", "            ", "assert", "minibatch", ".", "prediction_task", "==", "'node'", "\n", "data_postproc", "=", "{", "\"label\"", ":", "minibatch", ".", "label_full", ",", "\"node_set\"", ":", "minibatch", ".", "entity_epoch", "}", "\n", "", "elif", "data_train", "is", "not", "None", ":", "\n", "            ", "data_postproc", "=", "{", "\"label\"", ":", "data_train", "[", "'label_full'", "]", ",", "\"node_set\"", ":", "data_train", "[", "'node_set'", "]", "}", "\n", "", "else", ":", "\n", "            ", "data_postproc", "=", "None", "\n", "", "postprocessing", "(", "data_postproc", ",", "model", ",", "minibatch", ",", "logger", ",", "config_postproc", ",", "acc_record", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.preproc.PreprocessGraph.__init__": [[14, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "arch_gnn", ",", "minibatch_preproc", ",", "no_pbar", ")", ":", "\n", "        ", "self", ".", "minibatch", "=", "minibatch_preproc", "\n", "self", ".", "arch_gnn", "=", "arch_gnn", "\n", "self", ".", "is_transductive", "=", "minibatch_preproc", ".", "is_transductive", "\n", "self", ".", "no_pbar", "=", "no_pbar", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.preproc.PreprocessGraph._ppr": [[20, 43], ["range", "torch.linalg.norm", "pbar.update", "print", "torch.sparse.mm"], "methods", ["None"], ["", "def", "_ppr", "(", "self", ",", "adj", ",", "signal", ",", "pbar", ",", "num_target", ",", "alpha", ",", "thres", ",", "itr_max", ")", ":", "\n", "        ", "\"\"\"\n        Reference to APPNP method\n        Here to be consistent with the C++ PPR sampler, our alpha is actually 1-alpha in APPNP\n        \n        In our C++ sampler, we compute PPR by local push style of algorithm. \n        Here, we compute PPR by multiplication on the full adj matrix. \n        \"\"\"", "\n", "alpha", "=", "1", "-", "alpha", "\n", "# initialize", "\n", "H", "=", "signal", "\n", "Z", "=", "H", "\n", "for", "k", "in", "range", "(", "itr_max", ")", ":", "\n", "            ", "Zk", "=", "(", "1", "-", "alpha", ")", "*", "torch", ".", "sparse", ".", "mm", "(", "adj", ",", "Z", ")", "+", "alpha", "*", "H", "\n", "delta_change", "=", "torch", ".", "linalg", ".", "norm", "(", "Z", "-", "Zk", ",", "ord", "=", "'fro'", ")", "\n", "Z", "=", "Zk", "\n", "if", "pbar", "is", "not", "None", ":", "\n", "                ", "pbar", ".", "update", "(", "num_target", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "f\"Smooth full grpah signal for ITR {k}\"", ")", "\n", "", "if", "delta_change", "<", "thres", ":", "\n", "                ", "break", "\n", "", "", "return", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.preproc.PreprocessGraph._smooth_signals_subg": [[44, 121], ["graph_engine.frontend.graph_utils.coo_scipy2torch().to", "args.pop", "graph_engine.frontend.graph_utils.adj_norm_sym", "preproc.PreprocessGraph._ppr", "torch.cat().to", "graph_engine.frontend.graph_utils.adj_norm_rw", "graph_engine.frontend.graph_utils.coo_scipy2torch", "torch.zeros().to", "range", "args.pop", "graph_engine.frontend.graph_utils.adj_norm_rw.tocoo", "torch.clamp", "signal_converged.max", "torch.cat", "torch.sparse.mm", "signal_order[].copy", "range", "graph_engine.frontend.graph_utils.adj_norm_sym", "signal_converged.abs().sum", "torch.zeros", "pbar.update", "torch.sparse.mm", "range", "graph_engine.frontend.graph_utils.adj_norm_rw", "pbar.update", "torch.sparse.mm", "signal_converged.abs", "pbar.update"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.adj_norm_sym", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.preproc.PreprocessGraph._ppr", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.adj_norm_rw", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.coo_scipy2torch", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.adj_norm_sym", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.adj_norm_rw"], ["", "def", "_smooth_signals_subg", "(", "\n", "self", ",", "\n", "adj", ",", "\n", "signal", ",", "\n", "target", ",", "\n", "order", ":", "int", ",", "\n", "pbar", ",", "\n", "type_norm", ":", "str", ",", "\n", "reduction_orders", ":", "str", ",", "\n", "args", ":", "dict", ",", "\n", "add_self_edge", ":", "bool", "=", "True", ",", "\n", "is_normed", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "if", "not", "is_normed", ":", "\n", "            ", "if", "type_norm", "==", "'sym'", ":", "\n", "                ", "adj_norm", "=", "adj_norm_sym", "(", "adj", ",", "add_self_edge", "=", "add_self_edge", ")", "\n", "", "elif", "type_norm", "==", "'rw'", ":", "# NOTE: we haven't supported add_self_edge for rw norm yet.", "\n", "                ", "adj_norm", "=", "adj_norm_rw", "(", "adj", ")", "\n", "", "elif", "type_norm", "==", "'ppr'", ":", "\n", "                ", "assert", "order", "==", "1", "\n", "_norm_adj", "=", "args", ".", "pop", "(", "'norm_adj'", ")", "\n", "if", "_norm_adj", "==", "'sym'", ":", "\n", "                    ", "adj_norm", "=", "adj_norm_sym", "(", "adj", ",", "add_self_edge", "=", "True", ")", "# see APPNP", "\n", "", "elif", "_norm_adj", "==", "'rw'", ":", "\n", "                    ", "adj_norm", "=", "adj_norm_rw", "(", "adj", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "adj_norm", "=", "coo_scipy2torch", "(", "adj_norm", ".", "tocoo", "(", ")", ")", ".", "to", "(", "signal", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "adj_norm", "=", "adj", "\n", "", "if", "type_norm", "==", "'ppr'", ":", "\n", "            ", "_norm_feat", "=", "args", ".", "pop", "(", "'norm_feat'", ")", "\n", "signal_converged", "=", "self", ".", "_ppr", "(", "adj_norm", ",", "signal", ",", "pbar", ",", "target", ".", "size", ",", "**", "args", ")", "[", "target", "]", "\n", "if", "_norm_feat", "==", "'none'", ":", "\n", "                ", "pass", "\n", "", "elif", "_norm_feat", "==", "'l1'", ":", "\n", "                ", "signal_converged", "/=", "torch", ".", "clamp", "(", "signal_converged", ".", "abs", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", ",", "min", "=", "1e-5", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "", "elif", "_norm_feat", "==", "'max'", ":", "\n", "                ", "signal_converged", "/=", "signal_converged", ".", "max", "(", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "signal_orig", "=", "signal", "[", "target", "]", "\n", "if", "reduction_orders", "in", "[", "'cat'", ",", "'concat'", "]", ":", "\n", "                ", "signal_out", "=", "torch", ".", "cat", "(", "[", "signal_orig", ",", "signal_converged", "]", ",", "dim", "=", "1", ")", ".", "to", "(", "signal", ".", "device", ")", "\n", "", "elif", "reduction_orders", "==", "'sum'", ":", "\n", "                ", "signal_out", "=", "signal_orig", "+", "signal_converged", "\n", "", "elif", "reduction_orders", "==", "'last'", ":", "\n", "                ", "signal_out", "=", "signal_converged", "\n", "", "", "elif", "type_norm", "in", "[", "'sym'", ",", "'rw'", "]", ":", "\n", "            ", "signal_order", "=", "signal", "\n", "if", "reduction_orders", "in", "[", "'cat'", ",", "'concat'", "]", ":", "\n", "                ", "F", "=", "signal_order", ".", "shape", "[", "1", "]", "\n", "F_new", "=", "F", "+", "order", "*", "F", "\n", "signal_out", "=", "torch", ".", "zeros", "(", "target", ".", "size", ",", "F_new", ")", ".", "to", "(", "signal_order", ".", "device", ")", "\n", "signal_out", "[", ":", ",", ":", "F", "]", "=", "signal_order", "[", "target", "]", "\n", "for", "_k", "in", "range", "(", "order", ")", ":", "\n", "                    ", "signal_order", "=", "torch", ".", "sparse", ".", "mm", "(", "adj_norm", ",", "signal_order", ")", "\n", "signal_out", "[", ":", ",", "(", "_k", "+", "1", ")", "*", "F", ":", "(", "_k", "+", "2", ")", "*", "F", "]", "=", "signal_order", "[", "target", "]", "\n", "if", "pbar", "is", "not", "None", ":", "\n", "                        ", "pbar", ".", "update", "(", "target", ".", "size", ")", "\n", "", "", "", "elif", "reduction_orders", "==", "'sum'", ":", "\n", "                ", "F_new", "=", "signal_order", ".", "shape", "[", "1", "]", "\n", "signal_out", "=", "signal_order", "[", "target", "]", ".", "copy", "(", ")", "\n", "for", "_k", "in", "range", "(", "order", ")", ":", "\n", "                    ", "signal_order", "=", "torch", ".", "sparse", ".", "mm", "(", "adj_norm", ",", "signal_order", ")", "\n", "signal_out", "+=", "signal_order", "[", "target", "]", "\n", "if", "pbar", "is", "not", "None", ":", "\n", "                        ", "pbar", ".", "update", "(", "target", ".", "size", ")", "\n", "", "", "", "elif", "reduction_orders", "==", "'last'", ":", "\n", "                ", "for", "_k", "in", "range", "(", "order", ")", ":", "\n", "                    ", "signal_order", "=", "torch", ".", "sparse", ".", "mm", "(", "adj_norm", ",", "signal_order", ")", "\n", "if", "pbar", "is", "not", "None", ":", "\n", "                        ", "pbar", ".", "update", "(", "target", ".", "size", ")", "\n", "", "", "signal_out", "=", "signal_order", "[", "target", "]", "\n", "", "", "return", "signal_out", ",", "adj_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.preproc.PreprocessGraph.smooth_signals_fullg": [[122, 205], ["torch.zeros().to", "print", "numpy.arange", "preproc.PreprocessGraph._smooth_signals_subg", "signal_smoothed.to", "print", "torch.zeros", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.set_description", "tqdm.tqdm.tqdm.close", "preproc.PreprocessGraph.minibatch.disable_cache", "preproc.PreprocessGraph.minibatch.epoch_start_reset", "preproc.PreprocessGraph.minibatch.epoch_end_reset", "print", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.set_description", "preproc.PreprocessGraph.minibatch.is_end_epoch", "preproc.PreprocessGraph.minibatch.one_batch", "preproc.PreprocessGraph._smooth_signals_subg", "signal_smoothed.to", "tqdm.tqdm.tqdm.close", "signal.var", "torch.zeros().to.var", "signal.var", "torch.zeros().to.var", "MODE2STR[].upper", "signal[].var", "signal_new[].var", "MODE2STR[].upper"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.preproc.PreprocessGraph._smooth_signals_subg", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.disable_cache", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.epoch_start_reset", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.epoch_end_reset", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.is_end_epoch", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.one_batch", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.preproc.PreprocessGraph._smooth_signals_subg", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to"], ["", "def", "smooth_signals_fullg", "(", "\n", "self", ",", "\n", "tag", ":", "str", ",", "\n", "signal", ",", "\n", "order", ":", "int", ",", "\n", "type_norm", ":", "str", ",", "\n", "reduction_orders", ":", "str", ",", "\n", "args", ":", "dict", ",", "\n", "add_self_edge", ":", "bool", "=", "True", "\n", ")", ":", "\n", "        ", "\"\"\" SGC / SIGN / APPNP \n        Smooth the node features for all target nodes in the full graph\n        \"\"\"", "\n", "N", ",", "F", "=", "signal", ".", "shape", "\n", "assert", "reduction_orders", "in", "{", "'cat'", ",", "'concat'", ",", "'last'", ",", "'sum'", "}", "\n", "if", "reduction_orders", "in", "[", "'cat'", ",", "'concat'", "]", ":", "\n", "            ", "F_new", "=", "F", "+", "order", "*", "F", "\n", "", "else", ":", "\n", "            ", "F_new", "=", "F", "\n", "", "signal_new", "=", "torch", ".", "zeros", "(", "N", ",", "F_new", ")", ".", "to", "(", "self", ".", "minibatch", ".", "feat_full", ".", "device", ")", "\n", "pbar", "=", "None", "\n", "if", "self", ".", "minibatch", ".", "mode_sample", "==", "self", ".", "minibatch", ".", "FULL", "and", "self", ".", "minibatch", ".", "is_transductive", ":", "\n", "            ", "num_nodes_tqdm", "=", "self", ".", "minibatch", ".", "adj", "[", "TEST", "]", ".", "shape", "[", "0", "]", "*", "(", "order", "if", "type_norm", "!=", "'ppr'", "else", "args", "[", "'itr_max'", "]", ")", "\n", "if", "not", "self", ".", "no_pbar", ":", "\n", "                ", "pbar", "=", "tqdm", "(", "total", "=", "num_nodes_tqdm", ",", "leave", "=", "True", ",", "file", "=", "sys", ".", "stdout", ")", "\n", "pbar", ".", "set_description", "(", "f\"Smoothing {tag} for full graph\"", ")", "\n", "", "adj_", "=", "self", ".", "minibatch", ".", "adj", "[", "TEST", "]", "\n", "# hardcode every node as target so that this can apply to link task as well", "\n", "target_", "=", "np", ".", "arange", "(", "adj_", ".", "indptr", ".", "size", "-", "1", ")", "\n", "signal_smoothed", ",", "_", "=", "self", ".", "_smooth_signals_subg", "(", "\n", "adj_", ",", "\n", "signal", ",", "\n", "target_", ",", "\n", "order", ",", "\n", "pbar", ",", "\n", "type_norm", ",", "\n", "reduction_orders", ",", "\n", "args", ",", "\n", "add_self_edge", "=", "False", "\n", ")", "\n", "signal_new", "[", "target_", "]", "=", "signal_smoothed", ".", "to", "(", "signal_new", ".", "device", ")", "\n", "if", "pbar", "is", "not", "None", ":", "\n", "                ", "pbar", ".", "close", "(", ")", "\n", "", "print", "(", "f\"Finished smoothing {tag}\\tvariance: {signal.var():.4f} to {signal_new.var():.4f}\"", ")", "\n", "", "else", ":", "\n", "            ", "for", "m", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", ":", "# for full SGC, return the full graph as subgraph", "\n", "                ", "self", ".", "minibatch", ".", "disable_cache", "(", "m", ")", "\n", "self", ".", "minibatch", ".", "epoch_start_reset", "(", "0", ",", "m", ")", "\n", "assert", "self", ".", "minibatch", ".", "prediction_task", "==", "'node'", ",", "'For LINK task training, its preproc should still be NODE'", "\n", "num_nodes_tqdm", "=", "self", ".", "minibatch", ".", "raw_entity_set", "[", "m", "]", ".", "size", "*", "(", "order", "if", "type_norm", "!=", "'ppr'", "else", "args", "[", "'itr_max'", "]", ")", "\n", "if", "not", "self", ".", "no_pbar", ":", "\n", "                    ", "pbar", "=", "tqdm", "(", "total", "=", "num_nodes_tqdm", ",", "leave", "=", "True", ",", "file", "=", "sys", ".", "stdout", ")", "\n", "pbar", ".", "set_description", "(", "f\"Smoothing {tag} {MODE2STR[m].upper()}\"", ")", "\n", "", "while", "not", "self", ".", "minibatch", ".", "is_end_epoch", "(", "m", ")", ":", "\n", "                    ", "ret", "=", "self", ".", "minibatch", ".", "one_batch", "(", "mode", "=", "m", ",", "ret_raw_idx", "=", "True", ")", "\n", "assert", "ret", ".", "num_ens", "==", "1", ",", "\"not yet supporting subgraph ensemble in preproc\"", "\n", "_adj_sub", ",", "_target_sub", ",", "_idx_raw_sub", "=", "ret", ".", "adj_ens", "[", "0", "]", ",", "ret", ".", "target_ens", "[", "0", "]", ",", "ret", ".", "idx_raw", "[", "0", "]", "\n", "_signal_sub", "=", "signal", "[", "_idx_raw_sub", "]", "\n", "_idx_writeback", "=", "_idx_raw_sub", "[", "_target_sub", "]", "\n", "signal_smoothed", ",", "_", "=", "self", ".", "_smooth_signals_subg", "(", "\n", "_adj_sub", ",", "\n", "_signal_sub", ",", "\n", "_target_sub", ",", "\n", "order", ",", "\n", "pbar", ",", "\n", "type_norm", ",", "\n", "reduction_orders", ",", "\n", "args", ",", "\n", "add_self_edge", "=", "False", "\n", ")", "\n", "signal_new", "[", "_idx_writeback", "]", "=", "signal_smoothed", ".", "to", "(", "signal_new", ".", "device", ")", "\n", "", "if", "pbar", "is", "not", "None", ":", "\n", "                    ", "pbar", ".", "close", "(", ")", "\n", "", "nodes_updated", "=", "self", ".", "minibatch", ".", "raw_entity_set", "[", "m", "]", "\n", "self", ".", "minibatch", ".", "epoch_end_reset", "(", "m", ")", "\n", "print", "(", "\n", "(", "\n", "f\"Finished smoothing {tag} of {MODE2STR[m].upper()}\\t\"", "\n", "f\"variance: {signal[nodes_updated].var():.4f} to {signal_new[nodes_updated].var():.4f}\"", "\n", ")", "\n", ")", "\n", "", "", "print", "(", "f\"(Order {order}) Full {tag} matrix variance changes from {signal.var():.4f} to {signal_new.var():.4f}\"", ")", "\n", "return", "signal_new", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.preproc.PreprocessGraph.prepare_raw_label": [[206, 226], ["torch.zeros().to", "type_label.lower", "len", "_label[].max().item", "_label[].min().item", "torch.zeros", "type_label.lower", "type", "torch.from_numpy().to", "len", "preproc.PreprocessGraph.minibatch.label_full[].float().to", "_label[].max", "_label[].min", "torch.from_numpy", "preproc.PreprocessGraph.minibatch.label_full[].float", "preproc.PreprocessGraph.minibatch.label_full[].to"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to"], ["", "def", "prepare_raw_label", "(", "self", ",", "type_label", ":", "str", ")", ":", "\n", "        ", "assert", "type_label", ".", "lower", "(", ")", "!=", "'none'", "\n", "num_nodes", "=", "self", ".", "minibatch", ".", "label_full", ".", "shape", "[", "0", "]", "\n", "if", "len", "(", "self", ".", "minibatch", ".", "label_full", ".", "shape", ")", "==", "1", ":", "\n", "            ", "_label", "=", "self", ".", "minibatch", ".", "label_full", "\n", "num_cls", "=", "_label", "[", "_label", "==", "_label", "]", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "\n", "assert", "_label", "[", "_label", "==", "_label", "]", ".", "min", "(", ")", ".", "item", "(", ")", "==", "0", "\n", "", "else", ":", "\n", "            ", "num_cls", "=", "self", ".", "minibatch", ".", "label_full", ".", "shape", "[", "1", "]", "\n", "", "feat_label", "=", "torch", ".", "zeros", "(", "num_nodes", ",", "num_cls", ")", ".", "to", "(", "self", ".", "minibatch", ".", "feat_full", ".", "device", ")", "\n", "mode_node_set", "=", "[", "TRAIN", "]", "if", "type_label", ".", "lower", "(", ")", "!=", "'all'", "else", "[", "TRAIN", ",", "VALID", "]", "\n", "for", "md", "in", "mode_node_set", ":", "\n", "            ", "idx_fill", "=", "self", ".", "minibatch", ".", "raw_entity_set", "[", "md", "]", "\n", "if", "type", "(", "idx_fill", ")", "==", "np", ".", "ndarray", ":", "\n", "                ", "idx_fill", "=", "torch", ".", "from_numpy", "(", "idx_fill", ")", ".", "to", "(", "feat_label", ".", "device", ")", "\n", "", "if", "len", "(", "self", ".", "minibatch", ".", "label_full", ".", "shape", ")", "==", "1", ":", "\n", "                ", "feat_label", "[", "idx_fill", ",", "self", ".", "minibatch", ".", "label_full", "[", "idx_fill", "]", ".", "to", "(", "torch", ".", "int64", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "feat_label", "[", "idx_fill", "]", "=", "self", ".", "minibatch", ".", "label_full", "[", "idx_fill", "]", ".", "float", "(", ")", ".", "to", "(", "feat_label", ".", "device", ")", "\n", "", "", "return", "feat_label", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.preproc.PreprocessGraph.diffusion": [[227, 232], ["None"], "methods", ["None"], ["", "def", "diffusion", "(", "self", ")", ":", "\n", "        ", "\"\"\" GDC\n\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.preproc.PreprocessGraph.preprocess": [[233, 270], ["print", "preproc.PreprocessGraph.arch_gnn[].lower", "preproc.PreprocessGraph.f_decode_smoothen_config", "preproc.PreprocessGraph.smooth_signals_fullg", "preproc.PreprocessGraph.arch_gnn[].lower", "preproc.PreprocessGraph.prepare_raw_label", "torch.cat", "preproc.PreprocessGraph.arch_gnn[].lower", "preproc.PreprocessGraph.f_decode_smoothen_config", "preproc.PreprocessGraph.smooth_signals_fullg"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.preproc.PreprocessGraph.f_decode_smoothen_config", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.preproc.PreprocessGraph.smooth_signals_fullg", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.preproc.PreprocessGraph.prepare_raw_label", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.preproc.PreprocessGraph.f_decode_smoothen_config", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.preproc.PreprocessGraph.smooth_signals_fullg"], ["", "def", "preprocess", "(", "self", ")", ":", "\n", "        ", "is_adj_changed", "=", "is_feat_changed", "=", "False", "\n", "# smooth features", "\n", "if", "self", ".", "arch_gnn", "[", "'feature_smoothen'", "]", ".", "lower", "(", ")", "!=", "\"none\"", ":", "\n", "            ", "type_norm", ",", "order", ",", "reduction_orders", ",", "args", "=", "self", ".", "f_decode_smoothen_config", "(", "self", ".", "arch_gnn", "[", "'feature_smoothen'", "]", ")", "\n", "feat_orig", "=", "self", ".", "minibatch", ".", "feat_full", "\n", "feat_full_new", "=", "self", ".", "smooth_signals_fullg", "(", "\"feats\"", ",", "feat_orig", ",", "order", ",", "type_norm", ",", "reduction_orders", ",", "args", ")", "\n", "is_feat_changed", "=", "True", "\n", "", "else", ":", "\n", "            ", "feat_full_new", "=", "self", ".", "minibatch", ".", "feat_full", "\n", "", "dim_feat_smooth", "=", "feat_full_new", ".", "shape", "[", "1", "]", "\n", "# smooth labels", "\n", "if", "self", ".", "arch_gnn", "[", "'use_label'", "]", ".", "lower", "(", ")", "!=", "'none'", ":", "\n", "            ", "assert", "self", ".", "is_transductive", "and", "self", ".", "minibatch", ".", "prediction_task", "==", "'node'", "\n", "label_orig", "=", "self", ".", "prepare_raw_label", "(", "self", ".", "arch_gnn", "[", "'use_label'", "]", ")", "# we only utilize train labels", "\n", "if", "self", ".", "arch_gnn", "[", "'label_smoothen'", "]", ".", "lower", "(", ")", "!=", "'none'", ":", "\n", "                ", "type_norm", ",", "order", ",", "reduction_orders", ",", "args", "=", "self", ".", "f_decode_smoothen_config", "(", "self", ".", "arch_gnn", "[", "'label_smoothen'", "]", ")", "\n", "label_smooth", "=", "self", ".", "smooth_signals_fullg", "(", "\"labels\"", ",", "label_orig", ",", "order", ",", "type_norm", ",", "reduction_orders", ",", "args", ")", "\n", "", "else", ":", "# i.e., use original TRAIN label as input", "\n", "                ", "label_smooth", "=", "label_orig", "\n", "", "dim_label_smooth", "=", "label_smooth", ".", "shape", "[", "1", "]", "\n", "is_feat_changed", "=", "True", "\n", "", "else", ":", "\n", "            ", "label_smooth", "=", "None", "\n", "dim_label_smooth", "=", "0", "\n", "", "if", "label_smooth", "is", "not", "None", ":", "\n", "            ", "feat_full_new", "=", "torch", ".", "cat", "(", "[", "feat_full_new", ",", "label_smooth", "]", ",", "dim", "=", "1", ")", "\n", "# update adj", "\n", "", "if", "self", ".", "arch_gnn", "[", "'aggr'", "]", "==", "'gdc'", ":", "\n", "            ", "is_adj_changed", "=", "True", "\n", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "adjs_new", "=", "self", ".", "minibatch", ".", "adj", "\n", "", "print", "(", "f\"DIMENSION: SMOOTHED FEAT = {dim_feat_smooth}, SMOOTHED LABEL = {dim_label_smooth}\"", ")", "\n", "assert", "dim_feat_smooth", "+", "dim_label_smooth", "==", "feat_full_new", ".", "shape", "[", "1", "]", "\n", "return", "adjs_new", ",", "feat_full_new", ",", "is_adj_changed", ",", "is_feat_changed", ",", "dim_feat_smooth", ",", "dim_label_smooth", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.preproc.PreprocessGraph.f_decode_smoothen_config": [[271, 298], ["[].lower", "len", "config_str.split", "len", "config_str.split", "float", "len", "len", "len", "float", "len", "int", "int", "config_str.split", "config_str.split", "config_str.split", "config_str.split", "config_str.split", "config_str.split", "config_str.split", "config_str.split", "len", "config_str.split", "config_str.split", "config_str.split", "config_str.split"], "methods", ["None"], ["", "def", "f_decode_smoothen_config", "(", "self", ",", "config_str", ")", ":", "\n", "        ", "assert", "len", "(", "config_str", ".", "split", "(", "'-'", ")", ")", ">=", "3", ",", "\"[YML]: format of *_smoothen mismatch\"", "\n", "type_norm", "=", "config_str", ".", "split", "(", "'-'", ")", "[", "0", "]", ".", "lower", "(", ")", "\n", "if", "type_norm", "==", "'ppr'", ":", "\n", "            ", "order", "=", "1", "# we regard the 2 orders as the original feat and the converged feat", "\n", "# ppr--concat-0.8-sym-none-0.015-100", "\n", "#                  ^    ^    ^    ^", "\n", "#                 adj-feat-thres-itr", "\n", "assert", "8", ">=", "len", "(", "config_str", ".", "split", "(", "'-'", ")", ")", ">=", "4", "\n", "reduction_orders", ",", "k", "=", "config_str", ".", "split", "(", "'-'", ")", "[", "2", ":", "4", "]", "\n", "args", "=", "{", "'alpha'", ":", "float", "(", "k", ")", ",", "'norm_adj'", ":", "'sym'", ",", "'norm_feat'", ":", "'none'", ",", "'thres'", ":", "0.015", ",", "'itr_max'", ":", "100", "}", "# default value", "\n", "if", "len", "(", "config_str", ".", "split", "(", "'-'", ")", ")", ">=", "5", ":", "\n", "                ", "args", "[", "'norm_adj'", "]", "=", "config_str", ".", "split", "(", "'-'", ")", "[", "4", "]", "\n", "", "if", "len", "(", "config_str", ".", "split", "(", "'-'", ")", ")", ">=", "6", ":", "\n", "                ", "args", "[", "'norm_feat'", "]", "=", "config_str", ".", "split", "(", "'-'", ")", "[", "5", "]", "\n", "", "if", "len", "(", "config_str", ".", "split", "(", "'-'", ")", ")", "==", "7", ":", "\n", "                ", "args", "[", "'thres'", "]", "=", "float", "(", "config_str", ".", "split", "(", "'-'", ")", "[", "6", "]", ")", "\n", "", "if", "len", "(", "config_str", ".", "split", "(", "'-'", ")", ")", "==", "8", ":", "\n", "                ", "args", "[", "'itr_max'", "]", "=", "int", "(", "config_str", ".", "split", "(", "'-'", ")", "[", "7", "]", ")", "\n", "", "", "elif", "type_norm", "in", "[", "'sym'", ",", "'rw'", "]", ":", "\n", "            ", "assert", "len", "(", "config_str", ".", "split", "(", "'-'", ")", ")", "==", "3", "\n", "order", ",", "reduction_orders", "=", "config_str", ".", "split", "(", "'-'", ")", "[", "1", ":", "]", "\n", "order", "=", "int", "(", "order", ")", "\n", "args", "=", "{", "}", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "type_norm", ",", "order", ",", "reduction_orders", ",", "args", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.profiler.SubgraphProfiler.__init__": [[15, 33], ["collections.deque", "set", "set().issubset", "set().issubset", "len", "metrics.keys", "len", "len", "len", "set", "set", "range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set"], ["def", "__init__", "(", "self", ",", "num_ens", ",", "metrics", ":", "Dict", "[", "str", ",", "Set", "[", "str", "]", "]", ")", ":", "\n", "        ", "self", ".", "num_ens", "=", "num_ens", "\n", "self", ".", "subgraph_batch", "=", "deque", "(", ")", "\n", "assert", "set", "(", "metrics", ".", "keys", "(", ")", ")", "==", "self", ".", "MODES", "\n", "assert", "len", "(", "metrics", "[", "'running'", "]", ")", "==", "0", "or", "set", "(", "metrics", "[", "'running'", "]", ")", ".", "issubset", "(", "self", ".", "KNOWN_METRICS", ")", "\n", "assert", "len", "(", "metrics", "[", "'global'", "]", ")", "==", "0", "or", "set", "(", "metrics", "[", "'global'", "]", ")", ".", "issubset", "(", "self", ".", "KNOWN_METRICS", ")", "\n", "self", ".", "metrics", "=", "metrics", "\n", "self", ".", "value_metrics", "=", "{", "\n", "md", ":", "[", "{", "m", ":", "[", "]", "for", "m", "in", "self", ".", "metrics", "[", "md", "]", "}", "for", "_", "in", "range", "(", "num_ens", ")", "]", "\n", "for", "md", "in", "self", ".", "MODES", "\n", "}", "\n", "if", "len", "(", "metrics", "[", "'running'", "]", ")", "==", "0", ":", "\n", "            ", "if", "len", "(", "metrics", "[", "'global'", "]", ")", "==", "0", ":", "\n", "                ", "self", ".", "queue_size", "=", "0", "\n", "", "else", ":", "\n", "                ", "self", ".", "queue_size", "=", "1", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "queue_size", "=", "self", ".", "QUEUE_SIZE", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.profiler.SubgraphProfiler.update_subgraph_batch": [[34, 41], ["profiler.SubgraphProfiler.subgraph_batch.append", "len", "profiler.SubgraphProfiler.subgraph_batch.popleft"], "methods", ["None"], ["", "", "def", "update_subgraph_batch", "(", "self", ",", "subgraph_batch", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "queue_size", "==", "0", ":", "\n", "            ", "return", "\n", "", "assert", "subgraph_batch", ".", "num_ens", "==", "self", ".", "num_ens", "\n", "if", "len", "(", "self", ".", "subgraph_batch", ")", ">=", "self", ".", "queue_size", ":", "\n", "            ", "self", ".", "subgraph_batch", ".", "popleft", "(", ")", "\n", "", "self", ".", "subgraph_batch", ".", "append", "(", "subgraph_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.profiler.SubgraphProfiler._profile_hops": [[42, 52], ["torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.embedding_bag", "torch.embedding_bag", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum"], "methods", ["None"], ["", "def", "_profile_hops", "(", "\n", "self", ",", "hops", ":", "torch", ".", "Tensor", ",", "sizes_subg", ":", "torch", ".", "Tensor", ",", "mode", ":", "str", "\n", ")", ":", "\n", "        ", "if", "mode", "==", "'global'", ":", "\n", "            ", "offsets", "=", "torch", ".", "roll", "(", "torch", ".", "cumsum", "(", "sizes_subg", ",", "dim", "=", "0", ")", ",", "1", ")", "\n", "offsets", "[", "0", "]", "=", "0", "\n", "idx", "=", "torch", ".", "arange", "(", "hops", ".", "shape", "[", "0", "]", ",", "device", "=", "hops", ".", "device", ")", "\n", "return", "F", ".", "embedding_bag", "(", "idx", ",", "hops", ",", "offsets", ",", "mode", "=", "'sum'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "# return hops.sum(axis=0) / sizes_subg.shape(0)", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.profiler.SubgraphProfiler._profile_sizes": [[54, 69], ["type", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.cumsum().cpu", "torch.cumsum().cpu", "torch.cumsum().cpu", "torch.cumsum().cpu", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.vstack().t", "torch.vstack().t", "torch.vstack().t", "torch.vstack().t", "sizes_subg.sum().item", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.vstack", "torch.vstack", "torch.vstack", "torch.vstack", "sizes_subg.sum"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to"], ["", "", "def", "_profile_sizes", "(", "\n", "self", ",", "indptr", ",", "sizes_subg", ":", "torch", ".", "Tensor", ",", "mode", ":", "str", "\n", ")", ":", "\n", "        ", "if", "type", "(", "indptr", ")", "==", "np", ".", "ndarray", ":", "\n", "            ", "indptr", "=", "torch", ".", "from_numpy", "(", "indptr", ")", ".", "to", "(", "sizes_subg", ".", "device", ")", "\n", "", "if", "mode", "==", "'global'", ":", "\n", "            ", "assert", "sizes_subg", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "indptr", ".", "shape", "[", "0", "]", "-", "1", "\n", "idx_end", "=", "torch", ".", "cumsum", "(", "sizes_subg", ",", "0", ")", ".", "cpu", "(", ")", "\n", "num_edges_cum", "=", "indptr", "[", "idx_end", "]", "\n", "num_edges_roll", "=", "torch", ".", "roll", "(", "num_edges_cum", ",", "1", ")", "\n", "num_edges_roll", "[", "0", "]", "=", "0", "\n", "num_edges", "=", "num_edges_cum", "-", "num_edges_roll", "\n", "return", "torch", ".", "vstack", "(", "(", "sizes_subg", ",", "num_edges", ")", ")", ".", "t", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.profiler.SubgraphProfiler._summarize_hops": [[70, 79], ["len", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat().mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "_summarize_hops", "(", "self", ",", "vals", ",", "mode", ":", "str", ")", ":", "\n", "        ", "if", "mode", "==", "'global'", ":", "\n", "            ", "if", "len", "(", "vals", ")", "==", "0", ":", "\n", "                ", "return", "[", "]", "\n", "", "else", ":", "\n", "                ", "return", "torch", ".", "cat", "(", "vals", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "# No need to profile the running value of subgraph hops (global is more accurate)", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.profiler.SubgraphProfiler._summarize_sizes": [[80, 91], ["len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.hstack", "torch.hstack", "torch.hstack", "torch.hstack", "torch.hstack.mean", "torch.hstack.mean"], "methods", ["None"], ["", "", "def", "_summarize_sizes", "(", "self", ",", "vals", ",", "mode", ":", "str", ")", ":", "\n", "        ", "if", "mode", "==", "'global'", ":", "\n", "            ", "if", "len", "(", "vals", ")", "==", "0", ":", "\n", "                ", "return", "[", "]", "\n", "", "else", ":", "\n", "                ", "nm_all", "=", "torch", ".", "cat", "(", "vals", ")", "\n", "deg", "=", "nm_all", "[", ":", ",", "1", "]", "/", "nm_all", "[", ":", ",", "0", "]", "\n", "nm_deg_all", "=", "torch", ".", "hstack", "(", "(", "nm_all", ",", "deg", "[", ":", ",", "np", ".", "newaxis", "]", ")", ")", "\n", "return", "nm_deg_all", ".", "mean", "(", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.profiler.SubgraphProfiler.profile": [[92, 107], ["range", "[].append", "getattr"], "methods", ["None"], ["", "", "def", "profile", "(", "self", ")", "->", "None", ":", "\n", "        ", "sb", "=", "self", ".", "subgraph_batch", "[", "-", "1", "]", "\n", "for", "e", "in", "range", "(", "self", ".", "num_ens", ")", ":", "\n", "            ", "for", "mg", "in", "self", ".", "metrics", "[", "'global'", "]", ":", "\n", "                ", "args", "=", "None", "\n", "subg_sizes", "=", "sb", ".", "size_subg_ens", "[", "e", "]", "\n", "if", "mg", "==", "'hops'", "and", "mg", "in", "sb", ".", "feat_aug_ens", "[", "e", "]", ":", "\n", "                    ", "hops", "=", "sb", ".", "feat_aug_ens", "[", "e", "]", "[", "'hops'", "]", "\n", "args", "=", "[", "hops", ",", "subg_sizes", ",", "'global'", "]", "\n", "", "elif", "mg", "==", "'sizes'", ":", "\n", "                    ", "adj", "=", "sb", ".", "adj_ens", "[", "e", "]", "\n", "args", "=", "[", "adj", ".", "indptr", ",", "subg_sizes", ",", "'global'", "]", "\n", "", "if", "args", "is", "not", "None", ":", "\n", "                    ", "self", ".", "value_metrics", "[", "'global'", "]", "[", "e", "]", "[", "mg", "]", ".", "append", "(", "\n", "getattr", "(", "self", ",", "f\"_profile_{mg}\"", ")", "(", "*", "args", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.profiler.SubgraphProfiler.summarize": [[110, 119], ["collections.deque", "range", "range", "getattr"], "methods", ["None"], ["", "", "", "", "def", "summarize", "(", "self", ")", ":", "\n", "        ", "ret", "=", "{", "md", ":", "[", "{", "}", "for", "_", "in", "range", "(", "self", ".", "num_ens", ")", "]", "for", "md", "in", "self", ".", "MODES", "}", "\n", "for", "md", "in", "self", ".", "MODES", ":", "\n", "            ", "for", "e", "in", "range", "(", "self", ".", "num_ens", ")", ":", "\n", "                ", "for", "m", "in", "self", ".", "metrics", "[", "md", "]", ":", "\n", "                    ", "ret", "[", "md", "]", "[", "e", "]", "[", "m", "]", "=", "getattr", "(", "self", ",", "f'_summarize_{m}'", ")", "(", "self", ".", "value_metrics", "[", "md", "]", "[", "e", "]", "[", "m", "]", ",", "md", ")", "\n", "self", ".", "value_metrics", "[", "md", "]", "[", "e", "]", "[", "m", "]", "=", "[", "]", "# clear after summarizing", "\n", "", "", "", "self", ".", "subgraph_batch", "=", "deque", "(", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.profiler.SubgraphProfiler._print_summary_hops": [[120, 142], ["print", "print", "print", "print", "print", "print", "len", "print", "sep_str.join", "sep_str.join", "sep_str.join", "len", "len", "len", "hop_stat[].item", "hop_stat[].sum", "range", "hop_stat[].item", "hop_stat.size"], "methods", ["None"], ["", "def", "_print_summary_hops", "(", "self", ",", "hop_stat", ":", "torch", ".", "Tensor", ",", "mode", ":", "str", ")", ":", "\n", "        ", "if", "len", "(", "hop_stat", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"NO HOP STAT COLLECTED\"", ")", "\n", "return", "\n", "", "sep_str", "=", "\"    \"", "\n", "title", "=", "f\"{'hops':>6s}{sep_str}\"", "+", "sep_str", ".", "join", "(", "f\"{k:>6d}\"", "for", "k", "in", "range", "(", "hop_stat", ".", "size", "(", "0", ")", "-", "1", ")", ")", "+", "f\"{sep_str}{'inf':>6s}\"", "\n", "raw_vals", "=", "f\"{'vals':>6s}{sep_str}\"", "+", "sep_str", ".", "join", "(", "f\"{v:>6.2f}\"", "for", "v", "in", "hop_stat", "[", "1", ":", "]", ")", "+", "f\"{sep_str}{hop_stat[0].item():>6.2f}\"", "\n", "denorm", "=", "(", "hop_stat", "[", "2", ":", "]", ".", "sum", "(", ")", "+", "hop_stat", "[", "0", "]", ")", ".", "item", "(", ")", "\n", "norm_vals", "=", "f\"{'ratio':>6s}{sep_str}\"", "+", "f\"{'--':>6s}{sep_str}\"", "+", "sep_str", ".", "join", "(", "f\"{v/denorm*100:>6.2f}\"", "for", "v", "in", "hop_stat", "[", "2", ":", "]", ")", "+", "f\"{sep_str}{hop_stat[0].item()/denorm*100:>6.2f}\"", "\n", "print", "(", "\"=\"", "*", "len", "(", "title", ")", ")", "\n", "print", "(", "title", ")", "\n", "print", "(", "\"-\"", "*", "len", "(", "title", ")", ")", "\n", "print", "(", "raw_vals", ")", "\n", "print", "(", "norm_vals", ")", "\n", "print", "(", "\"=\"", "*", "len", "(", "title", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.profiler.SubgraphProfiler._print_summary_sizes": [[143, 154], ["print", "print", "print", "print", "print", "len", "print", "size_stats[].item", "size_stats[].item", "size_stats[].item", "len", "len", "len"], "methods", ["None"], ["", "def", "_print_summary_sizes", "(", "self", ",", "size_stats", ":", "torch", ".", "Tensor", ",", "mode", ":", "str", ")", ":", "\n", "        ", "if", "len", "(", "size_stats", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"NO SIZES STAT COLLECTED\"", ")", "\n", "return", "\n", "", "title", "=", "\"avg # nodes    avg # edges    avg deg\"", "\n", "value", "=", "f\"{size_stats[0].item():>11.2f}    {size_stats[1].item():>11.2f}    {size_stats[2].item():>7.2f}\"", "\n", "print", "(", "\"=\"", "*", "len", "(", "title", ")", ")", "\n", "print", "(", "title", ")", "\n", "print", "(", "'-'", "*", "len", "(", "title", ")", ")", "\n", "print", "(", "value", ")", "\n", "print", "(", "\"=\"", "*", "len", "(", "title", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.profiler.SubgraphProfiler.print_summary": [[155, 165], ["profiler.SubgraphProfiler.summarize", "print", "print", "range", "len", "len", "[].items", "len", "getattr"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.profiler.SubgraphProfiler.summarize"], ["", "def", "print_summary", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "metrics", "[", "'running'", "]", ")", ">", "0", "or", "len", "(", "self", ".", "metrics", "[", "'global'", "]", ")", ">", "0", ":", "\n", "            ", "str_title", "=", "\"SUMMARY OF SUBG PROFILES\"", "\n", "print", "(", "\"=\"", "*", "len", "(", "str_title", ")", ")", "\n", "print", "(", "str_title", ")", "\n", "", "ret", "=", "self", ".", "summarize", "(", ")", "\n", "for", "md", "in", "self", ".", "MODES", ":", "\n", "            ", "for", "e", "in", "range", "(", "self", ".", "num_ens", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "ret", "[", "md", "]", "[", "e", "]", ".", "items", "(", ")", ":", "\n", "                    ", "getattr", "(", "self", ",", "f\"_print_summary_{k}\"", ")", "(", "v", ",", "md", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.profiler.SubgraphProfiler.clear_metrics": [[166, 168], ["None"], "methods", ["None"], ["", "", "", "", "def", "clear_metrics", "(", "self", ")", ":", "\n", "        ", "self", ".", "metrics", "=", "{", "md", ":", "[", "]", "for", "md", "in", "self", ".", "MODES", "}", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.InfoBatch.reset": [[47, 52], ["setattr"], "methods", ["None"], ["def", "reset", "(", "self", ",", "total_entity", ")", ":", "\n", "        ", "self", ".", "idx_batch", "=", "-", "1", "\n", "self", ".", "total_entity", "=", "total_entity", "\n", "for", "n", "in", "self", ".", "names_data_fields", ":", "\n", "            ", "setattr", "(", "self", ",", "n", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.InfoBatch._to_numpy": [[53, 61], ["isinstance", "x.detach().cpu().numpy", "x.detach().numpy", "x.detach().cpu", "x.detach", "x.detach"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_to_numpy", "(", "x", ")", ":", "\n", "        ", "\"\"\"\n        Convert a PyTorch tensor to numpy array.\n        \"\"\"", "\n", "if", "isinstance", "(", "x", ",", "Variable", ")", ":", "\n", "            ", "x", "=", "x", ".", "data", "\n", "", "return", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "if", "x", ".", "is_cuda", "else", "x", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.InfoBatch.add_one_batch": [[62, 72], ["isinstance", "getattr().append", "logging_base.InfoBatch._to_numpy", "getattr"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.InfoBatch._to_numpy"], ["", "def", "add_one_batch", "(", "self", ",", "idx_batch", ",", "info_dict", ")", ":", "\n", "        ", "self", ".", "idx_batch", "+=", "1", "\n", "assert", "self", ".", "idx_batch", "==", "idx_batch", "\n", "if", "idx_batch", "%", "self", ".", "PERIOD_LOG", "==", "0", ":", "\n", "            ", "for", "n", "in", "self", ".", "names_data_fields", ":", "\n", "                ", "if", "isinstance", "(", "info_dict", "[", "n", "]", ",", "Variable", ")", ":", "\n", "                    ", "val", "=", "self", ".", "_to_numpy", "(", "info_dict", "[", "n", "]", ")", "\n", "", "else", ":", "\n", "                    ", "val", "=", "info_dict", "[", "n", "]", "\n", "", "getattr", "(", "self", ",", "n", ")", ".", "append", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.InfoEpoch.__post_init__": [[100, 107], ["setattr"], "methods", ["None"], ["def", "__post_init__", "(", "self", ",", "_metric_acc", ")", ":", "\n", "        ", "assert", "_metric_acc", "is", "not", "None", "\n", "self", ".", "names_acc_fields", "=", "METRICS", "[", "_metric_acc", "]", "\n", "for", "n", "in", "self", ".", "names_acc_fields", ":", "\n", "            ", "setattr", "(", "self", ",", "n", ",", "[", "]", ")", "\n", "", "self", ".", "idx_epoch", "=", "-", "1", "\n", "self", ".", "epoch_best", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.InfoEpoch.summarize_batches": [[108, 118], ["numpy.array", "logging_base.InfoEpoch.loss.append", "numpy.concatenate", "numpy.concatenate", "f_metric", "numpy.array.sum", "getattr().append", "getattr", "numpy.array"], "methods", ["None"], ["", "def", "summarize_batches", "(", "self", ",", "ep", ",", "info_batch", ",", "f_metric", ")", ":", "\n", "        ", "assert", "ep", "==", "self", ".", "idx_epoch", ",", "\"Out of sync between minibatch and logger!!\"", "\n", "batch_np", "=", "np", ".", "array", "(", "info_batch", ".", "batch_size", ")", "\n", "_loss", "=", "(", "np", ".", "array", "(", "info_batch", ".", "loss", ")", "*", "batch_np", ")", ".", "sum", "(", ")", "/", "batch_np", ".", "sum", "(", ")", "\n", "self", ".", "loss", ".", "append", "(", "_loss", ")", "\n", "y_true", "=", "np", ".", "concatenate", "(", "info_batch", ".", "labels", ")", "\n", "y_pred", "=", "np", ".", "concatenate", "(", "info_batch", ".", "preds", ")", "\n", "info_metrics", "=", "f_metric", "(", "y_true", ",", "y_pred", ")", "\n", "for", "k", "in", "self", ".", "names_acc_fields", ":", "\n", "            ", "getattr", "(", "self", ",", "k", ")", ".", "append", "(", "info_metrics", "[", "k", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.InfoEpoch.update_best_metrics": [[119, 125], ["enumerate", "len", "setattr", "len"], "methods", ["None"], ["", "", "def", "update_best_metrics", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"args should be the best metric values returned from Metrics class\"\"\"", "\n", "assert", "len", "(", "args", ")", "==", "len", "(", "self", ".", "names_acc_fields", ")", "+", "1", "# +1 for loss", "\n", "self", ".", "loss_min_hist", "=", "args", "[", "0", "]", "# loss and acc are all averaged over the window", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "self", ".", "names_acc_fields", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "f'{k}_max_hist'", ",", "args", "[", "i", "+", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.InfoEpoch.assert_valid": [[126, 160], ["len", "logging_base.InfoEpoch.assert_valid.construct_win"], "methods", ["None"], ["", "", "def", "assert_valid", "(", "self", ",", "mode", ",", "metric_term", "=", "None", ",", "window_size", "=", "None", ",", "stochastic_sampler", "=", "False", ")", ":", "\n", "        ", "l", "=", "len", "(", "self", ".", "loss", ")", "\n", "assert", "l", "==", "self", ".", "idx_epoch", "+", "1", "\n", "for", "n", "in", "self", ".", "names_acc_fields", ":", "\n", "            ", "assert", "l", "==", "len", "(", "getattr", "(", "self", ",", "n", ")", ")", "\n", "", "assert", "self", ".", "idx_epoch", ">=", "0", "and", "self", ".", "epoch_best", "<=", "self", ".", "idx_epoch", "\n", "if", "stochastic_sampler", ":", "\n", "            ", "return", "\n", "", "if", "l", ">", "1", "and", "window_size", "is", "not", "None", "and", "mode", "==", "VALID", "and", "type", "(", "metric_term", ")", "==", "tuple", ":", "\n", "            ", "str_err", "=", "\"{}_{}_hist from Metrics returns {}, while from manual sliding window returns {}\"", "\n", "def", "construct_win", "(", "name", ")", ":", "\n", "                ", "_unfold", "=", "np", ".", "zeros", "(", "(", "window_size", ",", "l", ")", ")", "\n", "for", "w", "in", "range", "(", "window_size", ")", ":", "\n", "                    ", "_unfold", "[", "w", ",", "w", ":", "]", "=", "getattr", "(", "self", ",", "name", ")", "[", "w", ":", "]", "\n", "", "return", "_unfold", "\n", "", "assert", "metric_term", "[", "0", "]", "in", "self", ".", "names_acc_fields", "\n", "n_unfold", "=", "construct_win", "(", "metric_term", "[", "0", "]", ")", "\n", "ep_best_manual", "=", "eval", "(", "f\"n_unfold.mean(axis=0).arg{metric_term[1]}()\"", ")", "\n", "n_best_manual", "=", "n_unfold", ".", "mean", "(", "axis", "=", "0", ")", "[", "ep_best_manual", "]", "\n", "assert", "n_best_manual", "==", "getattr", "(", "self", ",", "f'{metric_term[0]}_{metric_term[1]}_hist'", ")", ",", "str_err", ".", "format", "(", "\n", "metric_term", "[", "0", "]", ",", "\n", "metric_term", "[", "1", "]", ",", "\n", "getattr", "(", "self", ",", "f'{metric_term[0]}_{metric_term[1]}_hist'", ")", ",", "n_best_manual", "\n", ")", "\n", "# check the rest of metrics by ep_best_manual", "\n", "loss_min_manual", "=", "construct_win", "(", "'loss'", ")", ".", "mean", "(", "axis", "=", "0", ")", "[", "ep_best_manual", "]", "\n", "assert", "loss_min_manual", "==", "self", ".", "loss_min_hist", ",", "str_err", ".", "format", "(", "\n", "'loss'", ",", "'min'", ",", "self", ".", "loss_min_hist", ",", "loss_min_manual", "\n", ")", "\n", "for", "n", "in", "self", ".", "names_acc_fields", ":", "\n", "                ", "n_max_manual", "=", "construct_win", "(", "n", ")", ".", "mean", "(", "axis", "=", "0", ")", "[", "ep_best_manual", "]", "\n", "assert", "n_max_manual", "==", "getattr", "(", "self", ",", "f'{n}_max_hist'", ")", ",", "str_err", ".", "format", "(", "\n", "n", ",", "'max'", ",", "getattr", "(", "self", ",", "f'{n}_max_hist'", ")", ",", "n_max_manual", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.__init__": [[180, 225], ["logging_base.InfoBatch", "logging_base.InfoBatch", "logging_base.InfoBatch", "logging_base.InfoEpoch"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "task", ":", "str", ",", "\n", "config_dict", ":", "dict", ",", "\n", "dir_log", ":", "str", ",", "\n", "metric", ":", "Metrics", ",", "\n", "config_term", ":", "dict", ",", "\n", "no_log", ":", "bool", "=", "False", ",", "\n", "log_test_convergence", ":", "int", "=", "-", "1", ",", "\n", "timestamp", ":", "str", "=", "\"\"", ",", "\n", "period_batch_train", ":", "int", "=", "1", ",", "\n", "no_pbar", ":", "bool", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "task", "=", "task", "\n", "self", ".", "term_window_size", "=", "config_term", "[", "'window_size'", "]", "\n", "self", ".", "term_window_aggr", "=", "config_term", "[", "'window_aggr'", "]", "\n", "self", ".", "no_pbar", ",", "self", ".", "no_log", "=", "no_pbar", ",", "no_log", "\n", "self", ".", "dir_log", "=", "dir_log", "\n", "self", ".", "timestamp", "=", "timestamp", "\n", "self", ".", "model_candy", "=", "{", "}", "# {ep: model} store the candidate models within the current window", "\n", "self", ".", "optim_candy", "=", "{", "}", "# {ep: optim} store the candidate optimizers within the current window", "\n", "self", ".", "path_saver", "=", "{", "\n", "k", ":", "f\"{dir_log}/saved_{k}_{timestamp}.pkl\"", "for", "k", "in", "[", "'model'", ",", "'optimizer'", "]", "\n", "}", "\n", "self", ".", "path_loader", "=", "{", "'model'", ":", "None", ",", "\"optimizer\"", ":", "None", "}", "\n", "self", ".", "metric", "=", "metric", "\n", "self", ".", "log_test_convergence", "=", "log_test_convergence", "\n", "assert", "self", ".", "metric", ".", "name", "in", "[", "\n", "\"f1\"", ",", "\"auc\"", ",", "\"accuracy\"", ",", "\"accuracy_ogb\"", ",", "'hits20'", ",", "'hits50'", ",", "'hits100'", "\n", "]", "\n", "self", ".", "config_dict", "=", "config_dict", "\n", "self", ".", "file_ep", "=", "{", "m", ":", "f\"{dir_log}/epoch_{MODE2STR[m]}.csv\"", "for", "m", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", "}", "\n", "self", ".", "file_final", "=", "f\"{dir_log}/final.csv\"", "\n", "\n", "self", ".", "info_batch", "=", "{", "\n", "TRAIN", ":", "InfoBatch", "(", "PERIOD_LOG", "=", "period_batch_train", ")", ",", "\n", "VALID", ":", "InfoBatch", "(", "PERIOD_LOG", "=", "1", ")", ",", "\n", "TEST", ":", "InfoBatch", "(", "PERIOD_LOG", "=", "1", ")", "\n", "}", "\n", "self", ".", "info_epoch", "=", "{", "\n", "m", ":", "InfoEpoch", "(", "_metric_acc", "=", "self", ".", "metric", ".", "name", ")", "for", "m", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", "\n", "}", "\n", "self", ".", "acc_final", "=", "{", "}", "\n", "self", ".", "pbar", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.reset": [[226, 231], ["logging_base.InfoBatch", "logging_base.InfoBatch", "logging_base.InfoBatch", "logging_base.InfoEpoch"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "info_batch", "=", "{", "TRAIN", ":", "InfoBatch", "(", "PERIOD_LOG", "=", "self", ".", "info_batch", "[", "TRAIN", "]", ".", "PERIOD_LOG", ")", ",", "\n", "VALID", ":", "InfoBatch", "(", "PERIOD_LOG", "=", "1", ")", ",", "\n", "TEST", ":", "InfoBatch", "(", "PERIOD_LOG", "=", "1", ")", "}", "\n", "self", ".", "info_epoch", "=", "{", "m", ":", "InfoEpoch", "(", "_metric_acc", "=", "self", ".", "metric", ".", "name", ")", "for", "m", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.set_loader_path": [[232, 246], ["os.path.isdir", "len", "os.listdir", "f.split"], "methods", ["None"], ["", "def", "set_loader_path", "(", "self", ",", "dir_loader", ")", ":", "\n", "        ", "\"\"\"\n        Used for inference / re-training. Set the path to load the pre-trained model. \n        \"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir_loader", ")", ",", "\"please provide the dir containing the checkpoints\"", "\n", "f_pt", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "dir_loader", ")", "if", "f", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "in", "[", "'pkl'", ",", "'pt'", "]", "]", "\n", "assert", "1", "<=", "len", "(", "f_pt", ")", "<=", "2", "\n", "for", "f", "in", "f_pt", ":", "\n", "            ", "if", "'model'", "in", "f", ":", "\n", "                ", "self", ".", "path_loader", "[", "'model'", "]", "=", "f\"{dir_loader}/{f}\"", "\n", "", "elif", "'optimizer'", "in", "f", ":", "\n", "                ", "self", ".", "path_loader", "[", "'optimizer'", "]", "=", "f\"{dir_loader}/{f}\"", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.add_logger_args": [[247, 250], ["None"], "methods", ["None"], ["", "", "", "@", "staticmethod", "\n", "def", "add_logger_args", "(", "parser", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.stringf": [[251, 269], ["type", "type", "type"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "stringf", "(", "msg", ":", "Union", "[", "str", ",", "list", "]", ",", "style", "=", "None", ",", "ending", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        Returns formated string so that you can highlight certain text with colors, bold phase etc. \n        \"\"\"", "\n", "if", "type", "(", "style", ")", "not", "in", "[", "list", ",", "tuple", "]", ":", "\n", "            ", "style", "=", "[", "style", "]", "\n", "", "_str_style", "=", "''", ".", "join", "(", "_bcolors", "[", "s", "]", "for", "s", "in", "style", ")", "\n", "if", "type", "(", "msg", ")", "==", "str", ":", "\n", "            ", "subs", "=", "f\"{_str_style}{msg}{_bcolors['']}\"", "\n", "", "elif", "type", "(", "msg", ")", "==", "list", ":", "# list of tuple in the form of [(msg1, style1), (msg2, style2)]", "\n", "            ", "subs", "=", "''", ".", "join", "(", "\n", "f\"{_bcolors[se]}{_str_style}{m}{_bcolors['']}\"", "\n", "for", "m", ",", "se", "in", "msg", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "f\"{subs}{ending}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf": [[270, 273], ["print", "logging_base.LoggerBase.stringf"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.stringf"], ["", "@", "staticmethod", "\n", "def", "printf", "(", "msg", ",", "style", "=", "None", ")", ":", "\n", "        ", "print", "(", "LoggerBase", ".", "stringf", "(", "msg", ",", "style", "=", "style", ",", "ending", "=", "''", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.update_best_model": [[274, 310], ["copy.deepcopy().cpu", "logging_base.LoggerBase.metric.is_better", "len", "len", "min", "getattr", "getattr", "_info_epoch.update_best_metrics", "logging_base.LoggerBase.save_model", "logging_base.LoggerBase.model_candy.keys", "copy.deepcopy", "max", "logging_base.LoggerBase.term_window_aggr.startswith", "getattr", "window.index", "max", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.InfoEpoch.update_best_metrics", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.save_model"], ["", "def", "update_best_model", "(", "self", ",", "ep", ",", "model", ",", "optimizer", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Save the best model so far, flexibly based on the termination criteria. \n        \"\"\"", "\n", "assert", "len", "(", "self", ".", "model_candy", ")", "<=", "self", ".", "term_window_size", "\n", "if", "len", "(", "self", ".", "model_candy", ")", "==", "self", ".", "term_window_size", ":", "\n", "# cleanup old model first, then store the most recent model", "\n", "            ", "ep2pop", "=", "min", "(", "self", ".", "model_candy", ".", "keys", "(", ")", ")", "\n", "assert", "ep2pop", "==", "ep", "-", "self", ".", "term_window_size", "\n", "del", "self", ".", "model_candy", "[", "ep2pop", "]", "\n", "del", "self", ".", "optim_candy", "[", "ep2pop", "]", "\n", "", "self", ".", "model_candy", "[", "ep", "]", "=", "copy", ".", "deepcopy", "(", "model", ")", ".", "cpu", "(", ")", "\n", "self", ".", "optim_candy", "[", "ep", "]", "=", "None", "if", "optimizer", "is", "None", "else", "self", ".", "model_candy", "[", "ep", "]", ".", "optimizer", "\n", "_info_epoch", "=", "self", ".", "info_epoch", "[", "VALID", "]", "\n", "assert", "_info_epoch", ".", "idx_epoch", "==", "ep", "\n", "_args", "=", "{", "\"loss_all\"", ":", "_info_epoch", ".", "loss", ",", "\"loss_min_hist\"", ":", "_info_epoch", ".", "loss_min_hist", "}", "\n", "for", "n", "in", "_info_epoch", ".", "names_acc_fields", ":", "\n", "            ", "_args", "[", "f\"{n}_all\"", "]", "=", "getattr", "(", "_info_epoch", ",", "f\"{n}\"", ")", "\n", "_args", "[", "f\"{n}_max_hist\"", "]", "=", "getattr", "(", "_info_epoch", ",", "f\"{n}_max_hist\"", ")", "\n", "", "ret_is_better", "=", "self", ".", "metric", ".", "is_better", "(", "**", "_args", ")", "\n", "if", "ret_is_better", "[", "0", "]", ":", "# flag checking if metric improves", "\n", "            ", "best_metrics", "=", "ret_is_better", "[", "1", ":", "]", "\n", "_info_epoch", ".", "update_best_metrics", "(", "*", "best_metrics", ")", "\n", "if", "self", ".", "term_window_aggr", "==", "'center'", ":", "\n", "                ", "_info_epoch", ".", "epoch_best", "=", "max", "(", "0", ",", "ep", "-", "self", ".", "term_window_size", "+", "1", "+", "self", ".", "term_window_size", "//", "2", ")", "\n", "", "elif", "self", ".", "term_window_aggr", ".", "startswith", "(", "'best_'", ")", ":", "\n", "                ", "_mtr_name", "=", "self", ".", "term_window_aggr", "[", "5", ":", "]", "\n", "window", "=", "getattr", "(", "_info_epoch", ",", "_mtr_name", ")", "[", "-", "self", ".", "term_window_size", ":", "]", "\n", "_info_epoch", ".", "epoch_best", "=", "ep", "-", "len", "(", "window", ")", "+", "1", "+", "window", ".", "index", "(", "max", "(", "window", ")", ")", "\n", "", "elif", "self", ".", "term_window_size", "==", "'last'", ":", "\n", "                ", "_info_epoch", ".", "epoch_best", "=", "ep", "\n", "", "assert", "_info_epoch", ".", "epoch_best", ">=", "0", ",", "\"error in extracting epoch idx from sliding window\"", "\n", "self", ".", "save_model", "(", "\n", "self", ".", "model_candy", "[", "_info_epoch", ".", "epoch_best", "]", ",", "\n", "optimizer", "=", "self", ".", "optim_candy", "[", "_info_epoch", ".", "epoch_best", "]", ",", "\n", "ep", "=", "_info_epoch", ".", "epoch_best", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.save_model": [[312, 317], ["logging_base.LoggerBase.printf", "torch.save", "model.state_dict", "torch.save", "optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf"], ["", "", "def", "save_model", "(", "self", ",", "model", ",", "optimizer", "=", "None", ",", "ep", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "printf", "(", "f\"  Saving model {'' if ep is None else ep}...\"", ",", "style", "=", "\"yellow\"", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "self", ".", "path_saver", "[", "'model'", "]", ")", "\n", "if", "optimizer", "is", "not", "None", ":", "\n", "            ", "torch", ".", "save", "(", "optimizer", ".", "state_dict", "(", ")", ",", "self", ".", "path_saver", "[", "'optimizer'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.save_tensor": [[318, 326], ["logging_base.LoggerBase.printf", "fname.format.format.format", "torch.save", "_path.split"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf"], ["", "", "def", "save_tensor", "(", "self", ",", "pytensor", ",", "fname", ":", "str", ",", "use_path_loader", ":", "bool", ")", "->", "str", ":", "\n", "        ", "self", ".", "printf", "(", "\"  Saving tensor ...\"", ",", "style", "=", "'yellow'", ")", "\n", "_path", "=", "self", ".", "path_saver", "[", "'model'", "]", "if", "not", "use_path_loader", "else", "self", ".", "path_loader", "[", "'model'", "]", "\n", "dir_save", "=", "'/'", ".", "join", "(", "_path", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", "\n", "fname", "=", "fname", ".", "format", "(", "self", ".", "timestamp", ")", "\n", "fname_full", "=", "f\"{dir_save}/{fname}\"", "\n", "torch", ".", "save", "(", "pytensor", ",", "fname_full", ")", "\n", "return", "fname_full", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.restore_model": [[327, 339], ["logging_base.LoggerBase.printf", "model.load_state_dict", "logging_base.LoggerBase.printf", "torch.load", "optimizer.load_state_dict", "torch.load"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf"], ["", "def", "restore_model", "(", "self", ",", "model", ",", "optimizer", "=", "None", ",", "force_reload", "=", "False", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        NOTE: \"restore\" refers to the loading of model checkpoint of previous epochs.\n            To load a model saved in the previous run, call `load_model()` instead. \n        \"\"\"", "\n", "if", "force_reload", "or", "self", ".", "info_epoch", "[", "VALID", "]", ".", "epoch_best", ">=", "0", ":", "\n", "            ", "self", ".", "printf", "(", "\"  Restoring model ...\"", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "path_saver", "[", "'model'", "]", ")", ")", "\n", "if", "optimizer", "is", "not", "None", ":", "\n", "                ", "optimizer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "path_saver", "[", "'optimizer'", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "printf", "(", "\"  NOT restoring model ... PLS CHECK!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.load_model": [[340, 362], ["logging_base.LoggerBase.printf", "model.load_state_dict", "logging_base.LoggerBase.load_model.gen_new_pt_name"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf"], ["", "", "def", "load_model", "(", "self", ",", "model", ",", "optimizer", "=", "None", ",", "copy", "=", "False", ",", "device", "=", "None", ")", "->", "None", ":", "\n", "        ", "def", "gen_new_pt_name", "(", "dir_save_new", ",", "name", ")", ":", "\n", "            ", "file_loaded", "=", "self", ".", "path_loader", "[", "name", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "return", "f\"{dir_save_new}/{file_loaded.replace('saved', 'loaded')}\"", "\n", "", "self", ".", "printf", "(", "\"  Loading model ...\"", ")", "\n", "dir_save_new", "=", "'/'", ".", "join", "(", "self", ".", "path_saver", "[", "'model'", "]", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "path_loader", "[", "'model'", "]", ",", "map_location", "=", "device", ")", ")", "\n", "file_loaded_model", "=", "gen_new_pt_name", "(", "dir_save_new", ",", "'model'", ")", "\n", "if", "copy", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "self", ".", "path_loader", "[", "'model'", "]", ",", "file_loaded_model", ")", "\n", "", "else", ":", "\n", "# generate symbol link", "\n", "            ", "path_rel_model", "=", "os", ".", "path", ".", "relpath", "(", "self", ".", "path_loader", "[", "'model'", "]", ",", "dir_save_new", ")", "\n", "os", ".", "symlink", "(", "path_rel_model", ",", "file_loaded_model", ")", "\n", "", "if", "optimizer", "is", "not", "None", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "path_loader", "[", "'optimizer'", "]", ",", "map_location", "=", "device", ")", ")", "\n", "file_loaded_optm", "=", "gen_new_pt_name", "(", "dir_save_new", ",", "'optimizer'", ")", "\n", "if", "copy", ":", "\n", "                ", "shutil", ".", "copyfile", "(", "self", ".", "path_loader", "[", "'optimizer'", "]", ",", "file_loaded_optm", ")", "\n", "", "else", ":", "\n", "                ", "path_rel_optm", "=", "os", ".", "path", ".", "relpath", "(", "self", ".", "path_loader", "[", "'optimizer'", "]", ",", "dir_save_new", ")", "\n", "os", ".", "symlink", "(", "path_rel_optm", ",", "file_loaded_optm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.epoch_start_reset": [[364, 372], ["logging_base.LoggerBase.info_batch[].reset", "tqdm.tqdm.tqdm", "logging_base.LoggerBase.pbar.set_description", "logging_base.LoggerBase.stringf", "MODE2STR[].upper"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.reset", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.stringf"], ["", "", "", "def", "epoch_start_reset", "(", "self", ",", "ep", ",", "mode", ",", "total_entity", ")", ":", "\n", "        ", "self", ".", "info_epoch", "[", "mode", "]", ".", "idx_epoch", "+=", "1", "\n", "assert", "self", ".", "info_epoch", "[", "mode", "]", ".", "idx_epoch", "==", "ep", ",", "\"Out of sync of epoch idx between trainer and logger!\"", "\n", "self", ".", "info_batch", "[", "mode", "]", ".", "reset", "(", "total_entity", ")", "\n", "if", "not", "self", ".", "no_pbar", ":", "\n", "            ", "self", ".", "pbar", "=", "tqdm", "(", "total", "=", "total_entity", ",", "leave", "=", "False", ",", "file", "=", "sys", ".", "stdout", ")", "\n", "self", ".", "pbar", ".", "set_description", "(", "\n", "self", ".", "stringf", "(", "f\"computing {MODE2STR[mode].upper()}\"", ",", "style", "=", "self", ".", "style_mode", "[", "mode", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.init_log2file": [[375, 389], ["os.path.exists", "os.makedirs", "logging_base.LoggerBase.log2file", "logging_base.LoggerBase.log2file", "logging_base.LoggerBase.log2file", "logging_base.LoggerBase.log2file"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.log2file", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.log2file", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.log2file", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.log2file"], ["", "", "def", "init_log2file", "(", "self", ",", "status", "=", "'running'", ",", "meta_info", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "no_log", ":", "\n", "            ", "return", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "dir_log", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "dir_log", ")", "\n", "", "if", "status", "==", "'running'", ":", "\n", "            ", "self", ".", "log2file", "(", "TRAIN", ",", "\"header\"", ",", "meta_info", "=", "meta_info", ",", "status", "=", "status", ")", "\n", "self", ".", "log2file", "(", "VALID", ",", "\"header\"", ",", "meta_info", "=", "meta_info", ",", "status", "=", "status", ")", "\n", "if", "self", ".", "log_test_convergence", ">", "0", ":", "\n", "                ", "self", ".", "log2file", "(", "TEST", ",", "\"header\"", ",", "meta_info", "=", "meta_info", ",", "status", "=", "status", ")", "\n", "", "", "elif", "status", "==", "'final'", ":", "\n", "            ", "self", ".", "log2file", "(", "\"\"", ",", "\"header\"", ",", "meta_info", "=", "meta_info", ",", "status", "=", "status", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.log2file": [[390, 424], ["logging_base.LoggerBase._write2file", "f_log2file_header", "f_log2file_header", "f_log2file_header", "f_log2file_header"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase._write2file"], ["", "", "def", "log2file", "(", "self", ",", "mode", ",", "row_type", ",", "msg", "=", "None", ",", "meta_info", "=", "None", ",", "status", "=", "'running'", ")", ":", "\n", "        ", "\"\"\"\n        mode: train / val / test\n        status: running / final\n        row_type: header / values\n        \"\"\"", "\n", "if", "row_type", "==", "\"header\"", ":", "\n", "            ", "assert", "msg", "is", "None", "\n", "f_log2file_header", "=", "lambda", "_mode", ":", "', '", ".", "join", "(", "f\"{MODE2STR[_mode]}_{n}\"", "for", "n", "in", "self", ".", "info_epoch", "[", "_mode", "]", ".", "names_acc_fields", ")", "\n", "if", "status", "==", "'running'", ":", "\n", "                ", "assert", "mode", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", "\n", "_fname", "=", "self", ".", "file_ep", "[", "mode", "]", "\n", "msg", "=", "f\"epoch, {MODE2STR[mode]}_loss, {f_log2file_header(mode)}\\n\"", "\n", "", "elif", "status", "==", "\"final\"", ":", "\n", "                ", "_fname", "=", "self", ".", "file_final", "\n", "msg", "=", "(", "f\"{MODE2STR[TRAIN]}_loss, {f_log2file_header(TRAIN)}, \"", "\n", "f\"{MODE2STR[VALID]}_loss, {f_log2file_header(VALID)}, \"", "\n", "f\"{MODE2STR[TEST]}_loss, {f_log2file_header(TEST)}\\n\"", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "elif", "row_type", "==", "\"values\"", ":", "\n", "            ", "assert", "meta_info", "is", "None", "or", "meta_info", "!=", "''", "\n", "if", "status", "==", "'running'", ":", "\n", "                ", "_fname", "=", "self", ".", "file_ep", "[", "mode", "]", "\n", "", "elif", "status", "==", "'final'", ":", "\n", "                ", "_fname", "=", "self", ".", "file_final", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "meta_info", "is", "not", "None", "and", "meta_info", "!=", "''", ":", "\n", "            ", "msg", "=", "f'{meta_info}\\n{msg}'", "\n", "", "self", ".", "_write2file", "(", "_fname", ",", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.log_key_step": [[425, 467], ["logging_base.LoggerBase.printf", "msg_print.append", "logging_base.LoggerBase.log2file", "msg_print.append", "getattr", "msg_print.append", "getattr", "MODE2STR[].upper", "MODE2STR[].upper", "n.upper", "getattr"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.log2file"], ["", "def", "log_key_step", "(", "self", ",", "mode", ",", "time", "=", "-", "1", ",", "status", "=", "'running'", ")", ":", "\n", "        ", "assert", "mode", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", "and", "status", "in", "[", "'running'", ",", "'final'", "]", "\n", "acc_ret", "=", "{", "}", "\n", "if", "status", "==", "'running'", ":", "\n", "            ", "_info_epoch", "=", "self", ".", "info_epoch", "[", "mode", "]", "\n", "acc_ret", "[", "'epoch'", "]", "=", "_info_epoch", ".", "idx_epoch", "\n", "acc_ret", "[", "'loss'", "]", "=", "_info_epoch", ".", "loss", "[", "-", "1", "]", "\n", "epstr", "=", "f\"Ep {_info_epoch.idx_epoch:4d}\"", "if", "mode", "==", "TRAIN", "else", "\" \"", "*", "7", "\n", "msg_print", "=", "[", "(", "f\"{epstr} [{MODE2STR[mode].upper():>6s}]\\t\"", ",", "None", ")", ",", "\n", "(", "f\"loss = {_info_epoch.loss[-1]:.5f}\\t\"", ",", "self", ".", "style_metric", "[", "'loss'", "]", ")", "]", "\n", "for", "n", "in", "_info_epoch", ".", "names_acc_fields", ":", "\n", "                ", "acc_ret", "[", "n", "]", "=", "getattr", "(", "_info_epoch", ",", "n", ")", "[", "-", "1", "]", "\n", "msg_print", ".", "append", "(", "(", "f\"{n} = {acc_ret[n]:.5f}\\t\"", ",", "self", ".", "style_metric", "[", "'acc'", "]", ")", ")", "\n", "", "if", "mode", "==", "TRAIN", ":", "\n", "                ", "msg_file_header", "=", "f'{_info_epoch.idx_epoch:4d}, '", "\n", "", "else", ":", "# reference training epochs", "\n", "                ", "msg_file_header", "=", "f'{_info_epoch.idx_epoch:4d} ({self.info_epoch[TRAIN].idx_epoch:4d}), '", "\n", "", "msg_file_ending", "=", "'\\n'", "\n", "", "elif", "status", "==", "'final'", ":", "\n", "            ", "_info_epoch", "=", "self", ".", "info_epoch", "[", "mode", "]", "\n", "acc_ret", "[", "'epoch'", "]", "=", "self", ".", "info_epoch", "[", "VALID", "]", ".", "epoch_best", "\n", "acc_ret", "[", "'loss'", "]", "=", "_info_epoch", ".", "loss", "[", "-", "1", "]", "\n", "msg_print", "=", "[", "(", "(", "f\"FINAL {MODE2STR[mode].upper()} \"", "\n", "f\"(Epoch {self.info_epoch[VALID].epoch_best:4d}): \\n\\t\"", ")", ",", "None", ")", "]", "\n", "for", "n", "in", "_info_epoch", ".", "names_acc_fields", ":", "\n", "                ", "acc_ret", "[", "n", "]", "=", "getattr", "(", "_info_epoch", ",", "n", ")", "[", "-", "1", "]", "\n", "msg_print", ".", "append", "(", "(", "f\"{n.upper()} = {acc_ret[n]:.5f}\\t\"", ",", "self", ".", "style_metric", "[", "'acc'", "]", ")", ")", "\n", "", "msg_file_header", "=", "''", "\n", "msg_file_ending", "=", "', '", "if", "mode", "!=", "TEST", "else", "'\\n'", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "time", ">", "0", ":", "\n", "            ", "msg_print", ".", "append", "(", "(", "f\"time = {time:.2f} s\"", ",", "None", ")", ")", "\n", "", "self", ".", "printf", "(", "msg_print", ",", "style", "=", "[", "self", ".", "style_mode", "[", "mode", "]", ",", "self", ".", "style_status", "[", "status", "]", "]", ")", "\n", "msg_file", "=", "msg_file_header", "+", "f\"{_info_epoch.loss[-1]:.5f}, \"", "+", "', '", ".", "join", "(", "f\"{getattr(_info_epoch, n)[-1]:.5f}\"", "for", "n", "in", "_info_epoch", ".", "names_acc_fields", ")", "+", "msg_file_ending", "\n", "if", "not", "self", ".", "no_log", ":", "\n", "            ", "self", ".", "log2file", "(", "mode", ",", "\"values\"", ",", "msg", "=", "msg_file", ",", "status", "=", "status", ")", "\n", "", "self", ".", "acc_final", "[", "mode", "]", "=", "acc_ret", "\n", "return", "acc_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase._write2file": [[468, 472], ["open", "f.write"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_write2file", "(", "filename", ",", "logstr", ",", "write_mode", "=", "\"a\"", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "write_mode", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "logstr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.update_batch": [[473, 478], ["logging_base.LoggerBase.info_batch[].add_one_batch", "logging_base.LoggerBase.pbar.update"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.InfoBatch.add_one_batch"], ["", "", "def", "update_batch", "(", "self", ",", "mode", ":", "str", ",", "idx_batch", ":", "int", ",", "info_batch", ":", "dict", ")", ":", "\n", "        ", "size_batch", "=", "info_batch", "[", "'batch_size'", "]", "# used by tqdm update", "\n", "self", ".", "info_batch", "[", "mode", "]", ".", "add_one_batch", "(", "idx_batch", ",", "info_batch", ")", "\n", "if", "self", ".", "pbar", "is", "not", "None", ":", "\n", "            ", "self", ".", "pbar", ".", "update", "(", "size_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.update_epoch": [[479, 484], ["logging_base.LoggerBase.info_epoch[].summarize_batches", "logging_base.LoggerBase.info_batch[].reset", "logging_base.LoggerBase.pbar.close"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.InfoEpoch.summarize_batches", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.reset"], ["", "", "def", "update_epoch", "(", "self", ",", "ep", ",", "mode", ")", ":", "\n", "        ", "self", ".", "info_epoch", "[", "mode", "]", ".", "summarize_batches", "(", "ep", ",", "self", ".", "info_batch", "[", "mode", "]", ",", "self", ".", "metric", ".", "calc", ")", "\n", "self", ".", "info_batch", "[", "mode", "]", ".", "reset", "(", "-", "1", ")", "\n", "if", "self", ".", "pbar", "is", "not", "None", ":", "\n", "            ", "self", ".", "pbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.validate_result": [[485, 492], ["logging_base.LoggerBase.info_epoch[].assert_valid"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.InfoEpoch.assert_valid"], ["", "", "def", "validate_result", "(", "self", ",", "stochastic_sampler", ":", "dict", ")", ":", "\n", "        ", "for", "m", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", ":", "\n", "            ", "self", ".", "info_epoch", "[", "m", "]", ".", "assert_valid", "(", "\n", "m", ",", "\n", "metric_term", "=", "self", ".", "metric", ".", "metric_term", ",", "\n", "window_size", "=", "self", ".", "term_window_size", ",", "\n", "stochastic_sampler", "=", "stochastic_sampler", "[", "m", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.end_training": [[494, 534], ["logging_base.LoggerBase.acc_final.items", "print", "os.path.exists", "logging_base.LoggerBase.dir_log.split", "os.listdir", "all", "shutil.move", "logging_base.LoggerBase.printf", "v.items", "os.path.isdir", "os.listdir", "shutil.rmtree", "logging_base.LoggerBase.printf", "os.path.exists", "os.makedirs", "os.path.isdir", "os.path.isdir", "len", "all", "os.path.isfile", "len", "set", "f_ymlpt[].split", "os.path.isfile", "set", "product", "f.split"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set"], ["", "", "def", "end_training", "(", "self", ",", "status", ")", ":", "\n", "        ", "assert", "status", "in", "[", "'crashed'", ",", "'finished'", ",", "'killed'", "]", "\n", "if", "status", "==", "'finished'", ":", "# print plain summary: used by wrapper script of ./script/train_multiple_runs.py", "\n", "            ", "str_summary", "=", "\"FINAL SUMMARY: \"", "\n", "for", "k", ",", "v", "in", "self", ".", "acc_final", ".", "items", "(", ")", ":", "\n", "                ", "for", "kk", ",", "vv", "in", "v", ".", "items", "(", ")", ":", "\n", "                    ", "str_summary", "+=", "f'{MODE2STR[k]} {kk} {vv} '", "\n", "", "", "print", "(", "str_summary", ")", "\n", "", "if", "self", ".", "no_log", ":", "\n", "            ", "from", "itertools", "import", "product", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "dir_log", ")", ":", "\n", "                ", "assert", "os", ".", "path", ".", "isdir", "(", "self", ".", "dir_log", ")", "\n", "# assert dir_log only contains one *.yml file and one *.pkl / pt file", "\n", "f_ymlpt", "=", "os", ".", "listdir", "(", "self", ".", "dir_log", ")", "\n", "if", "len", "(", "f_ymlpt", ")", "==", "1", ":", "\n", "                    ", "assert", "f_ymlpt", "[", "0", "]", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "in", "[", "'yml'", ",", "'yaml'", "]", ",", "f\"DIR {self.dir_log} CONTAINS UNKNOWN TYPE OF FILE. ABORTING!\"", "\n", "", "else", ":", "\n", "                    ", "assert", "len", "(", "f_ymlpt", ")", "<=", "3", "\n", "assert", "all", "(", "os", ".", "path", ".", "isfile", "(", "f\"{self.dir_log}/{f}\"", ")", "for", "f", "in", "f_ymlpt", ")", "\n", "ext1", "=", "[", "'yml'", ",", "'yaml'", "]", "\n", "ext2", "=", "[", "'pkl'", ",", "'pt'", "]", "\n", "assert", "set", "(", "f", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "for", "f", "in", "f_ymlpt", ")", "in", "[", "set", "(", "p", ")", "for", "p", "in", "product", "(", "ext1", ",", "ext2", ")", "]", ",", "f\"DIR {self.dir_log} CONTAINS UNKNOWN TYPE OF FILE. ABORTING!\"", "\n", "", "shutil", ".", "rmtree", "(", "self", ".", "dir_log", ")", "\n", "self", ".", "printf", "(", "f\"Successfully removed log dir {self.dir_log}!\"", ",", "style", "=", "'red'", ")", "\n", "", "", "else", ":", "\n", "# move all files from 'running' to the subdir corresponding to status", "\n", "            ", "dir_split", "=", "self", ".", "dir_log", ".", "split", "(", "'/'", ")", "\n", "dir_split", "=", "dir_split", "if", "dir_split", "[", "-", "1", "]", "!=", "''", "else", "dir_split", "[", ":", "-", "1", "]", "\n", "assert", "dir_split", "[", "-", "2", "]", "==", "'running'", "\n", "dir_split", "[", "-", "2", "]", "=", "status", "\n", "dir_new_parent", "=", "'/'", ".", "join", "(", "dir_split", "[", ":", "-", "1", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_new_parent", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "dir_new_parent", ")", "\n", "", "assert", "os", ".", "path", ".", "isdir", "(", "self", ".", "dir_log", ")", "and", "os", ".", "path", ".", "isdir", "(", "dir_new_parent", ")", "\n", "f_logfiles", "=", "os", ".", "listdir", "(", "self", ".", "dir_log", ")", "\n", "assert", "all", "(", "os", ".", "path", ".", "isfile", "(", "f\"{self.dir_log}/{f}\"", ")", "for", "f", "in", "f_logfiles", ")", "\n", "shutil", ".", "move", "(", "self", ".", "dir_log", ",", "dir_new_parent", ")", "\n", "self", ".", "printf", "(", "f\"Successfully moved {self.dir_log} to {dir_new_parent}\"", ",", "style", "=", "'red'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.decode_csv": [[535, 554], ["zip", "open", "f.readlines", "l.strip", "len", "k.strip", "float", "keys.split", "v.strip", "values.split", "k.split", "k.split"], "methods", ["None"], ["", "", "def", "decode_csv", "(", "self", ",", "status", ",", "dir_log", ")", ":", "\n", "        ", "\"\"\"\n        Used in postproc when we want to match the previously finished runs. \n        \"\"\"", "\n", "assert", "status", "==", "'final'", ",", "\"Not supporting decoding per epoch files\"", "\n", "f_csv", "=", "f\"{dir_log}/final.csv\"", "\n", "with", "open", "(", "f_csv", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines_record", "=", "f", ".", "readlines", "(", ")", "\n", "", "lines_record", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "lines_record", "]", "\n", "assert", "len", "(", "lines_record", ")", "==", "2", "\n", "keys", ",", "values", "=", "lines_record", "\n", "keys", "=", "[", "k", ".", "strip", "(", ")", "for", "k", "in", "keys", ".", "split", "(", "','", ")", "]", "\n", "values", "=", "[", "float", "(", "v", ".", "strip", "(", ")", ")", "for", "v", "in", "values", ".", "split", "(", "','", ")", "]", "\n", "kv", "=", "zip", "(", "keys", ",", "values", ")", "\n", "ret", "=", "{", "TRAIN", ":", "{", "}", ",", "VALID", ":", "{", "}", ",", "TEST", ":", "{", "}", "}", "\n", "for", "k", ",", "v", "in", "kv", ":", "\n", "            ", "m", "=", "STR2MODE", "[", "k", ".", "split", "(", "'_'", ")", "[", "0", "]", "]", "\n", "ret", "[", "m", "]", "[", "'_'", ".", "join", "(", "k", ".", "split", "(", "'_'", ")", "[", "1", ":", "]", ")", "]", "=", "v", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.print_table_postproc": [[555, 584], ["zip", "logging_base.LoggerBase.printf", "logging_base.LoggerBase.printf", "logging_base.LoggerBase.printf", "logging_base.LoggerBase.printf", "logging_base.LoggerBase.printf", "logging_base.LoggerBase.printf", "logging_base.LoggerBase.printf", "logging_base.LoggerBase.printf", "numpy.asarray", "numpy.asarray", "acc_orig_copy[].mean", "acc_post_copy[].mean", "acc_orig_copy[].mean", "acc_post_copy[].mean", "acc_orig_copy[].mean", "acc_post_copy[].mean", "acc_orig_copy[].std", "acc_post_copy[].std", "acc_orig_copy[].std", "acc_post_copy[].std", "acc_orig_copy[].std", "acc_post_copy[].std"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf"], ["", "def", "print_table_postproc", "(", "self", ",", "acc_orig", ",", "acc_post", ")", ":", "\n", "        ", "\"\"\"\n        Summarize the acc change in a table after postprocessing. \n        \"\"\"", "\n", "data_line", "=", "zip", "(", "acc_orig", "[", "TRAIN", "]", ",", "acc_post", "[", "TRAIN", "]", ",", "acc_orig", "[", "VALID", "]", ",", "acc_post", "[", "VALID", "]", ",", "acc_orig", "[", "TEST", "]", ",", "acc_post", "[", "TEST", "]", ")", "\n", "self", ".", "printf", "(", "f\"==============================================================================\"", ",", "style", "=", "'bold'", ")", "\n", "self", ".", "printf", "(", "f\"TRAIN ORIG -> TRAIN POST    VALID ORIG -> VALID POST    TEST ORIG -> TEST POST\"", ",", "style", "=", "'bold'", ")", "\n", "self", ".", "printf", "(", "f\"------------------------------------------------------------------------------\"", ",", "style", "=", "None", ")", "\n", "for", "dl", "in", "data_line", ":", "\n", "            ", "self", ".", "printf", "(", "[", "\n", "(", "f\"{dl[0]:^10.5f} -> {dl[1]:^10.5f}    \"", ",", "self", ".", "style_mode", "[", "TRAIN", "]", ")", ",", "\n", "(", "f\"{dl[2]:^10.5f} -> {dl[3]:^10.5f}    \"", ",", "self", ".", "style_mode", "[", "VALID", "]", ")", ",", "\n", "(", "f\"{dl[4]:^9.5f} -> {dl[5]:^9.5f}\"", ",", "self", ".", "style_mode", "[", "TEST", "]", ")", "]", ")", "\n", "", "self", ".", "printf", "(", "f\"==============================================================================\"", ",", "style", "=", "None", ")", "\n", "acc_orig_copy", ",", "acc_post_copy", "=", "{", "}", ",", "{", "}", "\n", "for", "md", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", ":", "\n", "            ", "acc_orig_copy", "[", "md", "]", "=", "np", ".", "asarray", "(", "acc_orig", "[", "md", "]", ")", "\n", "acc_post_copy", "[", "md", "]", "=", "np", ".", "asarray", "(", "acc_post", "[", "md", "]", ")", "\n", "", "self", ".", "printf", "(", "[", "\n", "(", "f\"{acc_orig_copy[TRAIN].mean():^10.5f} -> {acc_post_copy[TRAIN].mean():^10.5f}    \"", ",", "self", ".", "style_mode", "[", "TRAIN", "]", ")", ",", "\n", "(", "f\"{acc_orig_copy[VALID].mean():^10.5f} -> {acc_post_copy[VALID].mean():^10.5f}    \"", ",", "self", ".", "style_mode", "[", "VALID", "]", ")", ",", "\n", "(", "f\"{acc_orig_copy[TEST].mean():^9.5f} -> {acc_post_copy[TEST].mean():^9.5f}\"", ",", "self", ".", "style_mode", "[", "TEST", "]", ")", "\n", "]", ",", "style", "=", "'bold'", ")", "\n", "self", ".", "printf", "(", "[", "\n", "(", "f\"{acc_orig_copy[TRAIN].std():^10.5f} -> {acc_post_copy[TRAIN].std():^10.5f}    \"", ",", "self", ".", "style_mode", "[", "TRAIN", "]", ")", ",", "\n", "(", "f\"{acc_orig_copy[VALID].std():^10.5f} -> {acc_post_copy[VALID].std():^10.5f}    \"", ",", "self", ".", "style_mode", "[", "VALID", "]", ")", ",", "\n", "(", "f\"{acc_orig_copy[TEST].std():^9.5f} -> {acc_post_copy[TEST].std():^9.5f}\"", ",", "self", ".", "style_mode", "[", "TEST", "]", ")", "\n", "]", ",", "style", "=", "None", ")", "\n", "self", ".", "printf", "(", "f\"==============================================================================\"", ",", "style", "=", "'bold'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.EnsembleDummy.__init__": [[44, 46], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__"], ["def", "__init__", "(", "self", ",", "dim_in", "=", "0", ",", "dim_out", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.EnsembleDummy.forward": [[47, 50], ["len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "Xi", ")", ":", "\n", "        ", "assert", "len", "(", "Xi", ")", "==", "1", ",", "\"ONLY USE DUMMY ENSEMBLER WITH ONE BRANCH!\"", "\n", "return", "Xi", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.EnsembleDummy.complexity": [[51, 54], ["len"], "methods", ["None"], ["", "def", "complexity", "(", "self", ",", "dims", ")", ":", "\n", "        ", "assert", "len", "(", "dims", ")", "==", "1", ",", "\"ONLY USE DUMMY ENSEMBLER WITH ONE BRANCH!\"", "\n", "return", "dims", "[", "0", "]", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.ResPool.__init__": [[58, 113], ["torch.nn.Module.__init__", "layers.get_torch_act", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "layers.get_torch_act", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "locals", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "int", "locals", "int"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.get_torch_act", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.get_torch_act"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dim_in", ":", "int", ",", "\n", "dim_out", ":", "int", ",", "\n", "num_layers", ":", "int", ",", "\n", "type_res", ":", "str", ",", "\n", "type_pool", ":", "str", ",", "\n", "dropout", ":", "float", ",", "\n", "act", ":", "str", ",", "\n", "args_pool", ":", "dict", "=", "None", ",", "\n", "prediction_task", ":", "str", "=", "'node'", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_out", "=", "dim_out", "\n", "self", ".", "type_pool", "=", "type_pool", "\n", "self", ".", "type_res", "=", "type_res", "\n", "self", ".", "prediction_task", "=", "prediction_task", "\n", "if", "type_pool", "==", "'center'", ":", "\n", "            ", "if", "type_res", "==", "'none'", ":", "\n", "                ", "if", "self", ".", "prediction_task", "==", "'node'", ":", "\n", "                    ", "self", ".", "dim_in", "=", "self", ".", "dim_out", "=", "0", "\n", "", "else", ":", "\n", "                    ", "self", ".", "dim_in", "=", "dim_in", "\n", "", "", "elif", "type_res", "in", "[", "'cat'", ",", "'concat'", "]", ":", "\n", "# This is equivalent to regular JK", "\n", "# 1. take center node for each feat-\\ell", "\n", "# 2. concatenate multi-scale feat of center nodes", "\n", "# 3. MLP", "\n", "                ", "self", ".", "dim_in", "=", "num_layers", "*", "dim_in", "\n", "", "else", ":", "# replace step 2 with max / mean", "\n", "                ", "self", ".", "dim_in", "=", "dim_in", "\n", "", "", "else", ":", "# e.g., sort / max / mean / sum", "\n", "# 1. pool all # layer feats", "\n", "# 2. cat center node for each layer", "\n", "# 3. cat outputs of 1. and 2., feed to MLP", "\n", "            ", "if", "type_res", "in", "[", "'cat'", ",", "'concat'", "]", ":", "\n", "                ", "self", ".", "dim_in", "=", "2", "*", "dim_in", "*", "num_layers", "# MLP dimension after pooling", "\n", "", "else", ":", "\n", "                ", "self", ".", "dim_in", "=", "2", "*", "dim_in", "\n", "", "if", "type_pool", "==", "'sort'", ":", "\n", "# [pool input]        -> [pool MLP input]    -> [pool MLP output]", "\n", "# N * self.dim_in / 2 -> k * self.dim_in / 2 -> self.dim_in / 2", "\n", "                ", "assert", "'k'", "in", "args_pool", ",", "\"Sort pooling needs the budget k as input!\"", "\n", "self", ".", "k", "=", "args_pool", "[", "'k'", "]", "\n", "_f_lin_pool", "=", "nn", ".", "Linear", "(", "self", ".", "k", "*", "int", "(", "self", ".", "dim_in", "/", "2", ")", ",", "int", "(", "self", ".", "dim_in", "/", "2", ")", ")", "\n", "_f_dropout_pool", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "_act_pool", "=", "get_torch_act", "(", "act", ",", "locals", "(", ")", ")", "\n", "self", ".", "nn_pool", "=", "nn", ".", "Sequential", "(", "_f_dropout_pool", ",", "_f_lin_pool", ",", "_act_pool", ")", "\n", "", "", "if", "self", ".", "dim_in", ">", "0", "and", "self", ".", "dim_out", ">", "0", ":", "\n", "            ", "_act", "=", "get_torch_act", "(", "act", ",", "locals", "(", ")", ")", "\n", "_f_lin", "=", "nn", ".", "Linear", "(", "self", ".", "dim_in", ",", "self", ".", "dim_out", ",", "bias", "=", "True", ")", "\n", "_f_dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "nn", "=", "nn", ".", "Sequential", "(", "_f_dropout", ",", "_f_lin", ",", "_act", ")", "\n", "self", ".", "offset", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "dim_out", ")", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "dim_out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.ResPool.f_norm": [[114, 119], ["_feat.mean().view", "_feat.var().view", "_feat.mean", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "_feat.var"], "methods", ["None"], ["", "", "def", "f_norm", "(", "self", ",", "_feat", ")", ":", "\n", "        ", "mean", "=", "_feat", ".", "mean", "(", "dim", "=", "1", ")", ".", "view", "(", "_feat", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "var", "=", "_feat", ".", "var", "(", "dim", "=", "1", ",", "unbiased", "=", "False", ")", ".", "view", "(", "_feat", ".", "shape", "[", "0", "]", ",", "1", ")", "+", "1e-9", "\n", "feat_out", "=", "(", "_feat", "-", "mean", ")", "*", "self", ".", "scale", "*", "torch", ".", "rsqrt", "(", "var", ")", "+", "self", ".", "offset", "\n", "return", "feat_out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.ResPool.f_residue": [[120, 131], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "f_residue", "(", "self", ",", "feat_l", ")", ":", "\n", "# 'none' residue is handled separately in forward()", "\n", "        ", "if", "self", ".", "type_res", "in", "[", "'cat'", ",", "'concat'", "]", ":", "\n", "            ", "feat_ret", "=", "torch", ".", "cat", "(", "feat_l", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "type_res", "==", "'sum'", ":", "\n", "            ", "feat_ret", "=", "torch", ".", "stack", "(", "feat_l", ",", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "", "elif", "self", ".", "type_res", "==", "'max'", ":", "\n", "            ", "feat_ret", "=", "torch", ".", "max", "(", "torch", ".", "stack", "(", "feat_l", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", ".", "values", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "feat_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.ResPool.f_res_complexity": [[132, 144], ["sum", "len", "len"], "methods", ["None"], ["", "def", "f_res_complexity", "(", "self", ",", "dim_x_l", ")", ":", "\n", "        ", "\"\"\"\n        returns feature dim after residue, ops due to residue aggregation\n        \"\"\"", "\n", "if", "self", ".", "type_res", "in", "[", "'cat'", ",", "'concat'", "]", ":", "\n", "            ", "return", "sum", "(", "[", "d", ".", "num_feats", "for", "d", "in", "dim_x_l", "]", ")", ",", "0", "\n", "", "elif", "self", ".", "type_res", "==", "'sum'", ":", "\n", "            ", "return", "dim_x_l", "[", "-", "1", "]", ".", "num_feats", ",", "(", "len", "(", "dim_x_l", ")", "-", "1", ")", "*", "(", "dim_x_l", "[", "-", "1", "]", ".", "num_nodes", "*", "dim_x_l", "[", "-", "1", "]", ".", "num_feats", ")", "\n", "", "elif", "self", ".", "type_res", "==", "'max'", ":", "\n", "            ", "return", "dim_x_l", "[", "-", "1", "]", ".", "num_feats", ",", "(", "len", "(", "dim_x_l", ")", "-", "1", ")", "*", "(", "dim_x_l", "[", "-", "1", "]", ".", "num_nodes", "*", "dim_x_l", "[", "-", "1", "]", ".", "num_feats", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.ResPool.aggr_target_emb": [[145, 153], ["feat_src_dst.reshape", "len"], "methods", ["None"], ["", "", "def", "aggr_target_emb", "(", "self", ",", "feat_src_dst", ")", ":", "\n", "        ", "if", "self", ".", "prediction_task", "==", "'node'", ":", "\n", "            ", "return", "feat_src_dst", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "feat_src_dst", ".", "shape", ")", "==", "2", "\n", "b", ",", "f", "=", "feat_src_dst", ".", "shape", "\n", "feat_ret", "=", "feat_src_dst", ".", "reshape", "(", "b", "//", "2", ",", "2", ",", "f", ")", "\n", "return", "feat_ret", "[", ":", ",", "0", "]", "*", "feat_ret", "[", ":", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.ResPool.forward": [[154, 200], ["layers.ResPool.f_norm", "layers.ResPool.aggr_target_emb", "layers.ResPool.nn", "layers.ResPool.f_residue", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.embedding_bag", "torch.embedding_bag", "torch.embedding_bag", "layers.ResPool.f_residue", "layers.ResPool.f_residue", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch_geometric.nn.global_sort_pool", "layers.ResPool.nn_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.embedding_bag", "torch.embedding_bag", "torch.embedding_bag", "feat_pool_l.append", "layers.ResPool.aggr_target_emb", "layers.ResPool.f_residue", "layers.ResPool.f_residue", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "layers.ResPool.aggr_target_emb", "sizes_subg.size"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.shaDowLayer.f_norm", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.ResPool.aggr_target_emb", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.ResPool.f_residue", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.ResPool.f_residue", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.ResPool.f_residue", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.ResPool.aggr_target_emb", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.ResPool.f_residue", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.ResPool.f_residue", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.ResPool.aggr_target_emb"], ["", "", "def", "forward", "(", "self", ",", "feats_in_l", ",", "idx_targets", ",", "sizes_subg", ")", ":", "\n", "        ", "if", "self", ".", "prediction_task", "==", "'link'", ":", "\n", "            ", "assert", "idx_targets", ".", "shape", "[", "0", "]", "==", "2", "*", "sizes_subg", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "assert", "idx_targets", ".", "shape", "[", "0", "]", "==", "sizes_subg", ".", "shape", "[", "0", "]", "\n", "", "if", "self", ".", "type_pool", "==", "'center'", ":", "\n", "            ", "if", "self", ".", "type_res", "==", "'none'", ":", "\n", "                ", "feat_in", "=", "feats_in_l", "[", "-", "1", "]", "[", "idx_targets", "]", "\n", "if", "self", ".", "prediction_task", "==", "'node'", ":", "\n", "                    ", "return", "feat_in", "\n", "", "", "else", ":", "# regular JK", "\n", "                ", "feats_root_l", "=", "[", "f", "[", "idx_targets", "]", "for", "f", "in", "feats_in_l", "]", "\n", "feat_in", "=", "self", ".", "f_residue", "(", "feats_root_l", ")", "\n", "", "feat_in", "=", "self", ".", "aggr_target_emb", "(", "feat_in", ")", "\n", "", "elif", "self", ".", "type_pool", "in", "[", "'max'", ",", "'mean'", ",", "'sum'", "]", ":", "\n", "# first pool subgraph at each layer, then residue", "\n", "            ", "offsets", "=", "torch", ".", "cumsum", "(", "sizes_subg", ",", "dim", "=", "0", ")", "\n", "offsets", "=", "torch", ".", "roll", "(", "offsets", ",", "1", ")", "\n", "offsets", "[", "0", "]", "=", "0", "\n", "idx", "=", "torch", ".", "arange", "(", "feats_in_l", "[", "-", "1", "]", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "feats_in_l", "[", "-", "1", "]", ".", "device", ")", "\n", "if", "self", ".", "type_res", "==", "'none'", ":", "\n", "                ", "feat_pool", "=", "F", ".", "embedding_bag", "(", "idx", ",", "feats_in_l", "[", "-", "1", "]", ",", "offsets", ",", "mode", "=", "self", ".", "type_pool", ")", "\n", "feat_root", "=", "feats_in_l", "[", "-", "1", "]", "[", "idx_targets", "]", "\n", "", "else", ":", "\n", "                ", "feat_pool_l", "=", "[", "]", "\n", "for", "feat", "in", "feats_in_l", ":", "\n", "                    ", "feat_pool", "=", "F", ".", "embedding_bag", "(", "idx", ",", "feat", ",", "offsets", ",", "mode", "=", "self", ".", "type_pool", ")", "\n", "feat_pool_l", ".", "append", "(", "feat_pool", ")", "\n", "", "feat_pool", "=", "self", ".", "f_residue", "(", "feat_pool_l", ")", "\n", "feat_root", "=", "self", ".", "f_residue", "(", "[", "f", "[", "idx_targets", "]", "for", "f", "in", "feats_in_l", "]", ")", "\n", "", "feat_in", "=", "torch", ".", "cat", "(", "[", "self", ".", "aggr_target_emb", "(", "feat_root", ")", ",", "feat_pool", "]", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "type_pool", "==", "'sort'", ":", "\n", "            ", "if", "self", ".", "type_res", "==", "'none'", ":", "\n", "                ", "feat_pool_in", "=", "feats_in_l", "[", "-", "1", "]", "\n", "feat_root", "=", "feats_in_l", "[", "-", "1", "]", "[", "idx_targets", "]", "\n", "", "else", ":", "\n", "                ", "feat_pool_in", "=", "self", ".", "f_residue", "(", "feats_in_l", ")", "\n", "feat_root", "=", "self", ".", "f_residue", "(", "[", "f", "[", "idx_targets", "]", "for", "f", "in", "feats_in_l", "]", ")", "\n", "", "arange", "=", "torch", ".", "arange", "(", "sizes_subg", ".", "size", "(", "0", ")", ")", ".", "to", "(", "sizes_subg", ".", "device", ")", "\n", "idx_batch", "=", "torch", ".", "repeat_interleave", "(", "arange", ",", "sizes_subg", ")", "\n", "feat_pool_k", "=", "global_sort_pool", "(", "feat_pool_in", ",", "idx_batch", ",", "self", ".", "k", ")", "# #subg x (k * F)", "\n", "feat_pool", "=", "self", ".", "nn_pool", "(", "feat_pool_k", ")", "\n", "feat_in", "=", "torch", ".", "cat", "(", "[", "self", ".", "aggr_target_emb", "(", "feat_root", ")", ",", "feat_pool", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "self", ".", "f_norm", "(", "self", ".", "nn", "(", "feat_in", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.ResPool.complexity": [[201, 234], ["len", "sizes_subg.sum", "Dims_X", "layers.ResPool.f_res_complexity", "layers.ResPool.f_res_complexity", "type", "Dims_X", "Dims_X", "Dims_X", "len", "Dims_X", "numpy.prod", "layers.ResPool.f_res_complexity", "list", "type", "numpy.prod", "numpy.pool", "list", "list"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.ResPool.f_res_complexity", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.ResPool.f_res_complexity", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.ResPool.f_res_complexity"], ["", "def", "complexity", "(", "self", ",", "dims_x_l", ",", "sizes_subg", ")", ":", "\n", "        ", "num_nodes", "=", "len", "(", "sizes_subg", ")", "\n", "num_neigh", "=", "dims_x_l", "[", "-", "1", "]", ".", "num_nodes", "\n", "assert", "num_neigh", "==", "sizes_subg", ".", "sum", "(", ")", "\n", "if", "self", ".", "type_pool", "==", "'center'", ":", "\n", "            ", "if", "self", ".", "type_res", "==", "'none'", ":", "\n", "                ", "return", "Dims_X", "(", "num_nodes", ",", "dims_x_l", "[", "-", "1", "]", ".", "num_feats", ")", ",", "0", "\n", "", "else", ":", "# regular JK", "\n", "                ", "dims_root_l", "=", "[", "Dims_X", "(", "num_nodes", ",", "d", ".", "num_feats", ")", "for", "d", "in", "dims_x_l", "]", "\n", "dim_f", ",", "ops", "=", "self", ".", "f_res_complexity", "(", "dims_root_l", ")", "# pool first, then residue", "\n", "return", "Dims_X", "(", "num_nodes", ",", "dim_f", ")", ",", "ops", "\n", "", "", "elif", "self", ".", "type_pool", "in", "[", "'max'", ",", "'mean'", ",", "'sum'", "]", ":", "\n", "            ", "ops", "=", "dims_x_l", "[", "-", "1", "]", ".", "num_nodes", "*", "dims_x_l", "[", "-", "1", "]", ".", "num_feats", "\n", "mult", "=", "1", "if", "self", ".", "type_res", "==", "'none'", "else", "len", "(", "dims_x_l", ")", "\n", "ops", "*=", "mult", "# we first pool graph", "\n", "dims_root_l", "=", "[", "Dims_X", "(", "num_nodes", ",", "d", ".", "num_feats", ")", "for", "d", "in", "dims_x_l", "]", "\n", "_dim_f", ",", "ops_res", "=", "self", ".", "f_res_complexity", "(", "dims_root_l", ")", "\n", "ops", "+=", "2", "*", "ops_res", "# \"2\" since one for neighs, and the other for root", "\n", "", "elif", "self", ".", "type_pool", "==", "'sort'", ":", "\n", "            ", "if", "self", ".", "type_res", "==", "'none'", ":", "\n", "                ", "ops", "=", "0", "\n", "", "else", ":", "\n", "                ", "_dim", ",", "ops", "=", "self", ".", "f_res_complexity", "(", "dims_x_l", ")", "\n", "# global_sort_pool: sort is only alone last channel, therefore neglect its complexity", "\n", "", "for", "n", "in", "self", ".", "nn_pool", ":", "\n", "                ", "if", "type", "(", "n", ")", "==", "nn", ".", "Linear", ":", "\n", "                    ", "ops", "+=", "np", ".", "pool", "(", "list", "(", "n", ".", "weight", ".", "shape", ")", ")", "*", "num_nodes", "\n", "", "", "ops", "+=", "np", ".", "prod", "(", "list", "(", "self", ".", "nn_pool", ".", "weight", ".", "shape", ")", ")", "*", "self", ".", "k", "*", "num_nodes", "\n", "", "for", "n", "in", "self", ".", "nn", ":", "\n", "            ", "if", "type", "(", "n", ")", "==", "nn", ".", "Linear", ":", "\n", "                ", "ops", "+=", "np", ".", "prod", "(", "list", "(", "n", ".", "weight", ".", "shape", ")", ")", "*", "num_nodes", "\n", "dim_f", "=", "n", ".", "weight", ".", "shape", "[", "0", "]", "# dim 0 is output dim", "\n", "", "", "return", "Dims_X", "(", "num_nodes", ",", "dim_f", ")", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.EnsembleAggregator.__init__": [[237, 270], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "layers.get_torch_act", "locals", "range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.get_torch_act"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dim_in", ":", "int", ",", "\n", "dim_out", ":", "int", ",", "\n", "num_ensemble", ":", "int", ",", "\n", "dropout", ":", "float", "=", "0.0", ",", "\n", "act", ":", "str", "=", "\"leakyrelu\"", ",", "\n", "type_dropout", ":", "str", "=", "\"none\"", "\n", ")", ":", "\n", "        ", "r\"\"\"\n        Embedding matrix from branches: X_i\n        Output matrix after ensemble: Y\n\n        Learnable parameters (shared across branches): \n        * W \\in R^{dim_in x dim_out}\n        * b \\in R^{dim_out}\n        * q \\in R^{dim_out}\n\n        Operations:\n        1. w_i = act(X_i W + b) q\n        2. softmax along the i dimension\n        3. Y = \\sum w_i X_i\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_in", "=", "dim_in", "\n", "self", ".", "dim_out", "=", "dim_out", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "act", "=", "nn", ".", "ModuleList", "(", "get_torch_act", "(", "act", ",", "locals", "(", ")", ")", "for", "_", "in", "range", "(", "num_ensemble", ")", ")", "\n", "self", ".", "f_lin", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ",", "bias", "=", "True", ")", "\n", "self", ".", "f_dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", "\n", "self", ".", "q", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "dim_out", ")", ")", "\n", "assert", "type_dropout", "in", "[", "\"none\"", ",", "\"feat\"", ",", "\"coef\"", "]", "\n", "self", ".", "type_dropout", "=", "type_dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.EnsembleAggregator.forward": [[271, 288], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "enumerate", "torch.cat.append", "torch.cat.append", "torch.cat.append", "omega_norm[].view", "layers.EnsembleAggregator.f_dropout", "layers.EnsembleAggregator.f_dropout", "layers.EnsembleAggregator.q.view", "layers.EnsembleAggregator.f_lin"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "Xi", ")", ":", "\n", "        ", "omega_ensemble", "=", "[", "]", "\n", "for", "i", ",", "X", "in", "enumerate", "(", "Xi", ")", ":", "\n", "            ", "if", "self", ".", "type_dropout", "==", "\"none\"", ":", "\n", "                ", "X_", "=", "X", "\n", "", "elif", "self", ".", "type_dropout", "==", "\"coef\"", ":", "\n", "                ", "X_", "=", "self", ".", "f_dropout", "(", "X", ")", "\n", "", "else", ":", "\n", "                ", "Xi", "[", "i", "]", "=", "self", ".", "f_dropout", "(", "X", ")", "\n", "X_", "=", "Xi", "[", "i", "]", "\n", "", "omega_ensemble", ".", "append", "(", "self", ".", "act", "[", "i", "]", "(", "self", ".", "f_lin", "(", "X_", ")", ")", ".", "mm", "(", "self", ".", "q", ".", "view", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "", "omega_ensemble", "=", "torch", ".", "cat", "(", "omega_ensemble", ",", "1", ")", "\n", "omega_norm", "=", "F", ".", "softmax", "(", "omega_ensemble", ",", "dim", "=", "1", ")", "\n", "Y", "=", "0", "\n", "for", "i", ",", "X", "in", "enumerate", "(", "Xi", ")", ":", "\n", "            ", "Y", "+=", "omega_norm", "[", ":", ",", "i", "]", ".", "view", "(", "-", "1", ",", "1", ")", "*", "X", "\n", "", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.EnsembleAggregator.complexity": [[289, 297], ["Dims_X"], "methods", ["None"], ["", "def", "complexity", "(", "self", ",", "dims_x_l", ")", ":", "\n", "        ", "ops", "=", "0", "\n", "for", "dx", "in", "dims_x_l", ":", "\n", "            ", "assert", "dx", ".", "num_feats", "==", "self", ".", "f_lin", ".", "weight", ".", "shape", "[", "1", "]", "\n", "ops", "+=", "dx", ".", "num_nodes", "*", "dx", ".", "num_feats", "*", "self", ".", "f_lin", ".", "weight", ".", "shape", "[", "0", "]", "# X W", "\n", "ops", "+=", "dx", ".", "num_nodes", "*", "dx", ".", "num_feats", "# X q", "\n", "ops", "+=", "dx", ".", "num_nodes", "*", "dx", ".", "num_feats", "# sum X[i]", "\n", "", "return", "Dims_X", "(", "dx", ".", "num_nodes", ",", "self", ".", "f_lin", ".", "weight", ".", "shape", "[", "0", "]", ")", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.shaDowLayer.__init__": [[304, 325], ["torch.nn.Module.__init__", "layers.get_torch_act", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "locals", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.get_torch_act"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dim_in", ":", "int", ",", "\n", "dim_out", ":", "int", ",", "\n", "dropout", ":", "float", "=", "0.0", ",", "\n", "act", ":", "str", "=", "'relu'", ",", "\n", "norm", ":", "str", "=", "'norm_feat'", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dim_in", ",", "self", ".", "dim_out", "=", "dim_in", ",", "dim_out", "\n", "self", ".", "act", "=", "get_torch_act", "(", "act", ",", "locals", "(", ")", ")", "\n", "self", ".", "f_dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "norm_dim", "=", "(", "1", ",", "dim_out", ")", "if", "'norm_dim'", "not", "in", "kwargs", "else", "kwargs", "[", "'norm_dim'", "]", "\n", "if", "norm", "==", "'norm_feat'", ":", "# we always use this type of norm in our paper", "\n", "            ", "self", ".", "offset", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "norm_dim", ")", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "norm_dim", ")", ")", "\n", "", "elif", "norm", "==", "'pairnorm'", ":", "\n", "            ", "self", ".", "pairnorm_s", "=", "1", "if", "'pairnorm_s'", "not", "in", "kwargs", "else", "kwargs", "[", "'pairnorm_s'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.shaDowLayer.spmm": [[326, 328], ["torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm"], "methods", ["None"], ["", "", "def", "spmm", "(", "self", ",", "adj", ",", "X", ")", ":", "\n", "        ", "return", "torch", ".", "sparse", ".", "mm", "(", "adj", ",", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.shaDowLayer._f_norm_feat": [[329, 339], ["tuple", "shaDow.utils.idx_nD_list", "shaDow.utils.idx_nD_list.mean", "shaDow.utils.set_nD_list", "shaDow.utils.idx_nD_list.var().view", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "shaDow.utils.idx_nD_list.var"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.idx_nD_list", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.set_nD_list"], ["", "def", "_f_norm_feat", "(", "self", ",", "feat_in", ",", "feat_out", ",", "loop_idx", ")", ":", "\n", "# iterate the nested indices with a single for loop", "\n", "        ", "for", "inp", "in", "loop_idx", ":", "\n", "            ", "i", "=", "tuple", "(", "inp", ")", "# need to index numpy array with tuple", "\n", "_feat", "=", "idx_nD_list", "(", "feat_in", ",", "i", ")", "\n", "mean", "=", "_feat", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "var", "=", "_feat", ".", "var", "(", "dim", "=", "1", ",", "unbiased", "=", "False", ")", ".", "view", "(", "_feat", ".", "shape", "[", "0", "]", ",", "1", ")", "+", "1e-9", "\n", "feat_norm", "=", "(", "_feat", "-", "mean", ")", "*", "self", ".", "scale", "[", "i", "]", "*", "torch", ".", "rsqrt", "(", "var", ")", "+", "self", ".", "offset", "[", "i", "]", "\n", "set_nD_list", "(", "feat_out", ",", "i", ",", "feat_norm", ")", "\n", "", "return", "feat_out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.shaDowLayer._f_pairnorm": [[340, 362], ["torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "tuple", "shaDow.utils.idx_nD_list", "torch.embedding_bag", "torch.embedding_bag", "torch.embedding_bag", "feat_mean.repeat_interleave.repeat_interleave.repeat_interleave", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "breakpoint", "shaDow.utils.set_nD_list", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to.size", "torch.arange().to.size", "torch.arange().to.size", "feat_centered.sum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.idx_nD_list", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.set_nD_list", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to"], ["", "def", "_f_pairnorm", "(", "self", ",", "feat_in", ",", "feat_out", ",", "loop_idx", ",", "sizes_subg", ")", ":", "\n", "        ", "subg_size_offsets", "=", "torch", ".", "cumsum", "(", "sizes_subg", ",", "dim", "=", "0", ")", "\n", "subg_size_offsets", "=", "torch", ".", "roll", "(", "subg_size_offsets", ",", "1", ")", "\n", "subg_size_offsets", "[", "0", "]", "=", "0", "\n", "idx_bag", "=", "None", "\n", "for", "inp", "in", "loop_idx", ":", "\n", "            ", "i", "=", "tuple", "(", "inp", ")", "\n", "# the first dim of feat_in should all be the same", "\n", "feat", "=", "idx_nD_list", "(", "feat_in", ",", "i", ")", "\n", "if", "idx_bag", "is", "None", ":", "\n", "                ", "idx_bag", "=", "torch", ".", "arange", "(", "feat", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "feat", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "assert", "idx_bag", ".", "size", "(", "0", ")", "==", "feat", ".", "shape", "[", "0", "]", "\n", "", "feat_mean", "=", "F", ".", "embedding_bag", "(", "idx_bag", ",", "feat", ",", "subg_size_offsets", ",", "mode", "=", "'mean'", ")", "\n", "feat_mean", "=", "feat_mean", ".", "repeat_interleave", "(", "sizes_subg", ",", "dim", "=", "0", ")", "\n", "feat_centered", "=", "feat", "-", "feat_mean", "\n", "idx_null", "=", "torch", ".", "where", "(", "feat_centered", ".", "sum", "(", "dim", "=", "1", ")", "==", "0", ")", "\n", "feat_centered", "[", "idx_null", "]", "=", "feat", "[", "idx_null", "]", "\n", "breakpoint", "(", ")", "# TODO: bug here. should have 1/n = 1/|V_sub| factor", "\n", "feat_norm", "=", "feat_centered", "/", "(", "(", "feat_centered", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "**", "0.5", "\n", "set_nD_list", "(", "feat_out", ",", "i", ",", "feat_norm", ")", "\n", "", "return", "feat_out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.shaDowLayer.f_norm": [[363, 374], ["shaDow.utils.cartesian_product", "shaDow.utils.construct_nD_list", "layers.shaDowLayer._f_norm_feat", "layers.shaDowLayer._f_pairnorm", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.cartesian_product", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.construct_nD_list", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.shaDowLayer._f_norm_feat", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.shaDowLayer._f_pairnorm"], ["", "def", "f_norm", "(", "self", ",", "feat_l", ",", "sizes_subg", ")", ":", "\n", "        ", "if", "self", ".", "norm", "==", "'none'", ":", "\n", "            ", "return", "feat_l", "\n", "", "loop_idx", "=", "cartesian_product", "(", "*", "[", "np", ".", "arange", "(", "d", ")", "for", "d", "in", "self", ".", "norm_dim", "[", ":", "-", "1", "]", "]", ")", "# last dim is feature dim", "\n", "feat_in", "=", "feat_l", "\n", "# init empty feat_out", "\n", "feat_out", "=", "construct_nD_list", "(", "self", ".", "norm_dim", "[", ":", "-", "1", "]", ")", "\n", "if", "self", ".", "norm", "==", "'norm_feat'", ":", "\n", "            ", "return", "self", ".", "_f_norm_feat", "(", "feat_in", ",", "feat_out", ",", "loop_idx", ")", "\n", "", "elif", "self", ".", "norm", "==", "'pairnorm'", ":", "\n", "            ", "return", "self", ".", "_f_pairnorm", "(", "feat_in", ",", "feat_out", ",", "loop_idx", ",", "sizes_subg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.MLP.__init__": [[377, 382], ["layers.shaDowLayer.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dropout", "=", "0.0", ",", "act", "=", "\"relu\"", ",", "norm", "=", "'norm_feat'", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "norm", "in", "[", "'norm_feat'", ",", "'none'", "]", "# assert MLP norm is not pairnorm", "\n", "kwargs", "[", "'norm_dim'", "]", "=", "(", "1", ",", "dim_out", ")", "\n", "super", "(", ")", ".", "__init__", "(", "dim_in", ",", "dim_out", ",", "dropout", "=", "dropout", ",", "act", "=", "act", ",", "norm", "=", "norm", ",", "**", "kwargs", ")", "\n", "self", ".", "f_lin", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.MLP.forward": [[383, 396], ["layers.MLP.f_dropout", "layers.MLP.act", "layers.MLP.f_lin", "layers.MLP.f_norm"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.shaDowLayer.f_norm"], ["", "def", "forward", "(", "self", ",", "feat_in", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            feat_in         2D matrix of input node features\n\n        Outputs:\n            feat_out        2D matrix of output node features\n        \"\"\"", "\n", "# dropout-act-norm", "\n", "feat_in", "=", "self", ".", "f_dropout", "(", "feat_in", ")", "\n", "feat_out", "=", "self", ".", "act", "(", "self", ".", "f_lin", "(", "feat_in", ")", ")", "\n", "feat_out", "=", "self", ".", "f_norm", "(", "[", "feat_out", "]", ",", "None", ")", "[", "0", "]", "\n", "return", "feat_out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.MLP.complexity": [[397, 401], ["numpy.product", "Dims_X"], "methods", ["None"], ["", "def", "complexity", "(", "self", ",", "dims_x", ")", ":", "\n", "        ", "assert", "dims_x", ".", "num_feats", "==", "self", ".", "f_lin", ".", "weight", ".", "shape", "[", "1", "]", "\n", "ops", "=", "dims_x", ".", "num_nodes", "*", "np", ".", "product", "(", "self", ".", "f_lin", ".", "weight", ".", "shape", ")", "\n", "return", "Dims_X", "(", "dims_x", ".", "num_nodes", ",", "self", ".", "f_lin", ".", "weight", ".", "shape", "[", "0", "]", ")", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.MLPSGC.__init__": [[407, 409], ["layers.MLP.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__"], ["def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dropout", "=", "0.0", ",", "act", "=", "\"relu\"", ",", "norm", "=", "'norm_feat'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dim_in", ",", "dim_out", ",", "dropout", "=", "dropout", ",", "act", "=", "act", ",", "norm", "=", "norm", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.MLPSGC.forward": [[410, 415], ["layers.MLP.forward", "type", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ModelPostEns.forward"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "type", "(", "inputs", ")", "in", "[", "list", ",", "tuple", "]", "and", "len", "(", "inputs", ")", "==", "4", "# feat_in, adj, is_normed, dropedge", "\n", "feat_in", "=", "inputs", "[", "0", "]", "\n", "feat_out", "=", "super", "(", ")", ".", "forward", "(", "feat_in", ")", "\n", "return", "feat_out", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GCN.__init__": [[418, 422], ["layers.shaDowLayer.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dropout", "=", "0.0", ",", "act", "=", "\"relu\"", ",", "norm", "=", "'norm_feat'", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "[", "'norm_dim'", "]", "=", "(", "1", ",", "dim_out", ")", "\n", "super", "(", ")", ".", "__init__", "(", "dim_in", ",", "dim_out", ",", "dropout", "=", "dropout", ",", "act", "=", "act", ",", "norm", "=", "norm", ",", "**", "kwargs", ")", "\n", "self", ".", "f_lin", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GCN.forward": [[423, 437], ["layers.GCN.f_dropout", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "layers.GCN.f_lin", "graph_engine.frontend.graph_utils.adj_norm_sym", "graph_engine.frontend.graph_utils.coo_scipy2torch().to", "layers.GCN.f_norm", "type", "graph_engine.frontend.graph_utils.coo_scipy2torch", "type", "layers.GCN.act", "graph_engine.frontend.graph_utils.coo_scipy2torch().to.tocoo"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.adj_norm_sym", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.shaDowLayer.f_norm", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.coo_scipy2torch"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "sizes_subg", ")", ":", "\n", "        ", "feat_in", ",", "adj", ",", "is_normed", ",", "dropedge", "=", "inputs", "\n", "feat_in", "=", "self", ".", "f_dropout", "(", "feat_in", ")", "\n", "if", "not", "is_normed", "and", "adj", "is", "not", "None", ":", "\n", "            ", "assert", "type", "(", "adj", ")", "==", "sp", ".", "csr_matrix", "\n", "adj_norm", "=", "adj_norm_sym", "(", "adj", ",", "dropedge", "=", "dropedge", ")", "# self-edges are already added by C++ sampler", "\n", "adj_norm", "=", "coo_scipy2torch", "(", "adj_norm", ".", "tocoo", "(", ")", ")", ".", "to", "(", "feat_in", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "assert", "adj", "is", "None", "or", "type", "(", "adj", ")", "==", "torch", ".", "Tensor", "\n", "adj_norm", "=", "adj", "\n", "", "feat_aggr", "=", "torch", ".", "sparse", ".", "mm", "(", "adj_norm", ",", "feat_in", ")", "\n", "feat_trans", "=", "self", ".", "f_lin", "(", "feat_aggr", ")", "\n", "feat_out", "=", "self", ".", "f_norm", "(", "[", "self", ".", "act", "(", "feat_trans", ")", "]", ",", "sizes_subg", ")", "[", "0", "]", "\n", "return", "feat_out", ",", "adj_norm", ",", "True", ",", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GCN.complexity": [[438, 445], ["numpy.product", "Dims_X", "Dims_adj"], "methods", ["None"], ["", "def", "complexity", "(", "self", ",", "dims_x", ",", "dims_adj", ")", ":", "\n", "        ", "ops", "=", "dims_adj", ".", "num_edges", "*", "dims_x", ".", "num_feats", "+", "dims_x", ".", "num_nodes", "*", "np", ".", "product", "(", "self", ".", "f_lin", ".", "weight", ".", "shape", ")", "\n", "return", "(", "\n", "Dims_X", "(", "dims_x", ".", "num_nodes", ",", "self", ".", "f_lin", ".", "weight", ".", "shape", "[", "0", "]", ")", ",", "\n", "Dims_adj", "(", "dims_adj", ".", "num_nodes", ",", "dims_adj", ".", "num_edges", ")", "\n", ")", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GraphSAGE.__init__": [[448, 453], ["layers.shaDowLayer.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dropout", "=", "0.0", ",", "act", "=", "\"relu\"", ",", "norm", "=", "'norm_feat'", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "[", "'norm_dim'", "]", "=", "(", "2", ",", "dim_out", ")", "# 2 for self + neigh", "\n", "super", "(", ")", ".", "__init__", "(", "dim_in", ",", "dim_out", ",", "dropout", "=", "dropout", ",", "act", "=", "act", ",", "norm", "=", "norm", ",", "**", "kwargs", ")", "\n", "self", ".", "f_lin_self", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", "\n", "self", ".", "f_lin_neigh", "=", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GraphSAGE.forward": [[454, 485], ["layers.GraphSAGE.f_dropout", "layers.GraphSAGE.spmm", "layers.GraphSAGE.f_norm", "graph_engine.frontend.graph_utils.coo_scipy2torch().to", "graph_engine.frontend.graph_utils.adj_norm_rw", "type", "layers.GraphSAGE.act", "layers.GraphSAGE.act", "graph_engine.frontend.graph_utils.coo_scipy2torch", "type", "type", "layers.GraphSAGE.f_lin_self", "layers.GraphSAGE.f_lin_neigh", "graph_engine.frontend.graph_utils.coo_scipy2torch().to.tocoo"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.shaDowLayer.spmm", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.shaDowLayer.f_norm", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.adj_norm_rw", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.coo_scipy2torch"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "sizes_subg", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            adj_norm        normalized adj matrix of the subgraph\n            feat_in         2D matrix of input node features\n\n        Outputs:\n            adj_norm        same as input (to facilitate nn.Sequential)\n            feat_out        2D matrix of output node features\n        \"\"\"", "\n", "# dropout-act-norm", "\n", "feat_in", ",", "adj", ",", "is_normed", ",", "dropedge", "=", "inputs", "\n", "if", "not", "is_normed", "and", "adj", "is", "not", "None", ":", "\n", "            ", "assert", "type", "(", "adj", ")", "==", "sp", ".", "csr_matrix", "\n", "adj", "=", "coo_scipy2torch", "(", "adj", ".", "tocoo", "(", ")", ")", ".", "to", "(", "feat_in", ".", "device", ")", "\n", "adj_norm", "=", "adj_norm_rw", "(", "adj", ",", "dropedge", "=", "dropedge", ")", "\n", "", "else", ":", "\n", "            ", "assert", "adj", "is", "None", "or", "type", "(", "adj", ")", "==", "torch", ".", "Tensor", "or", "type", "(", "adj", ")", "==", "tuple", "\n", "adj_norm", "=", "adj", "\n", "", "feat_in", "=", "self", ".", "f_dropout", "(", "feat_in", ")", "\n", "feat_self", "=", "feat_in", "\n", "feat_neigh", "=", "self", ".", "spmm", "(", "adj_norm", ",", "feat_in", ")", "\n", "feat_self_trans", ",", "feat_neigh_trans", "=", "self", ".", "f_norm", "(", "\n", "[", "\n", "self", ".", "act", "(", "self", ".", "f_lin_self", "(", "feat_self", ")", ")", ",", "\n", "self", ".", "act", "(", "self", ".", "f_lin_neigh", "(", "feat_neigh", ")", ")", "\n", "]", ",", "\n", "sizes_subg", "\n", ")", "\n", "feat_out", "=", "feat_self_trans", "+", "feat_neigh_trans", "\n", "return", "feat_out", ",", "adj_norm", ",", "True", ",", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GraphSAGE.complexity": [[486, 495], ["numpy.product", "Dims_X", "Dims_adj", "numpy.product"], "methods", ["None"], ["", "def", "complexity", "(", "self", ",", "dims_x", ",", "dims_adj", ")", ":", "\n", "        ", "assert", "dims_x", ".", "num_nodes", "==", "dims_adj", ".", "num_nodes", "\n", "ops", "=", "dims_x", ".", "num_nodes", "*", "np", ".", "product", "(", "self", ".", "f_lin_self", ".", "weight", ".", "shape", ")", "+", "dims_adj", ".", "num_edges", "*", "dims_x", ".", "num_feats", "+", "dims_x", ".", "num_nodes", "*", "np", ".", "product", "(", "self", ".", "f_lin_neigh", ".", "weight", ".", "shape", ")", "\n", "return", "(", "\n", "Dims_X", "(", "dims_x", ".", "num_nodes", ",", "self", ".", "f_lin_self", ".", "weight", ".", "shape", "[", "0", "]", ")", ",", "\n", "Dims_adj", "(", "dims_adj", ".", "num_nodes", ",", "dims_adj", ".", "num_edges", ")", "\n", ")", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GIN.__init__": [[498, 507], ["layers.shaDowLayer.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "dropout", "=", "0.0", ",", "act", "=", "\"relu\"", ",", "norm", "=", "'norm_feat'", ",", "eps", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "[", "'norm_dim'", "]", "=", "(", "1", ",", "dim_out", ")", "\n", "super", "(", ")", ".", "__init__", "(", "dim_in", ",", "dim_out", ",", "dropout", "=", "dropout", ",", "act", "=", "act", ",", "norm", "=", "norm", ",", "**", "kwargs", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "dim_out", ",", "dim_out", ",", "bias", "=", "True", ")", "\n", ")", "\n", "self", ".", "eps", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "eps", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GIN.forward": [[508, 528], ["layers.GIN.f_dropout", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "layers.GIN.mlp", "type", "graph_engine.frontend.graph_utils.coo_scipy2torch().to", "graph_engine.frontend.graph_utils.get_deg_torch_sparse", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "layers.GIN.f_norm", "graph_engine.frontend.graph_utils.coo_scipy2torch().to._values", "graph_engine.frontend.graph_utils.get_deg_torch_sparse", "graph_engine.frontend.graph_utils.get_deg_torch_sparse.long", "graph_engine.frontend.graph_utils.coo_scipy2torch().to._values", "graph_engine.frontend.graph_utils.coo_scipy2torch().to._values", "graph_engine.frontend.graph_utils.coo_scipy2torch", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "layers.GIN.act", "graph_engine.frontend.graph_utils.coo_scipy2torch().to.tocoo", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "int", "graph_engine.frontend.graph_utils.coo_scipy2torch().to._values().size", "graph_engine.frontend.graph_utils.coo_scipy2torch().to._values", "graph_engine.frontend.graph_utils.coo_scipy2torch().to._values().size", "graph_engine.frontend.graph_utils.coo_scipy2torch().to._values"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.get_deg_torch_sparse", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.shaDowLayer.f_norm", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.get_deg_torch_sparse", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.coo_scipy2torch"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "sizes_subg", ")", ":", "\n", "        ", "feat_in", ",", "adj", ",", "is_normed", ",", "dropedge", "=", "inputs", "\n", "assert", "not", "is_normed", "\n", "feat_in", "=", "self", ".", "f_dropout", "(", "feat_in", ")", "\n", "if", "type", "(", "adj", ")", "==", "sp", ".", "csr_matrix", ":", "\n", "            ", "adj", "=", "coo_scipy2torch", "(", "adj", ".", "tocoo", "(", ")", ")", ".", "to", "(", "feat_in", ".", "device", ")", "\n", "deg_orig", "=", "get_deg_torch_sparse", "(", "adj", ")", "\n", "# dropedge", "\n", "masked_indices", "=", "torch", ".", "floor", "(", "\n", "torch", ".", "rand", "(", "int", "(", "adj", ".", "_values", "(", ")", ".", "size", "(", ")", "[", "0", "]", "*", "dropedge", ")", ")", "*", "adj", ".", "_values", "(", ")", ".", "size", "(", ")", "[", "0", "]", "\n", ")", ".", "long", "(", ")", "\n", "adj", ".", "_values", "(", ")", "[", "masked_indices", "]", "=", "0", "\n", "deg_dropped", "=", "torch", ".", "clamp", "(", "get_deg_torch_sparse", "(", "adj", ")", ",", "min", "=", "1", ")", "\n", "rescale", "=", "torch", ".", "repeat_interleave", "(", "deg_orig", "/", "deg_dropped", ",", "deg_orig", ".", "long", "(", ")", ")", "\n", "adj", ".", "_values", "(", ")", "[", ":", "]", "=", "adj", ".", "_values", "(", ")", "*", "rescale", "\n", "", "feat_aggr", "=", "torch", ".", "sparse", ".", "mm", "(", "adj", ",", "feat_in", ")", "\n", "feat_aggr", "+=", "(", "1", "+", "self", ".", "eps", ")", "*", "feat_in", "\n", "feat_out", "=", "self", ".", "mlp", "(", "feat_aggr", ")", "\n", "feat_out", "=", "self", ".", "f_norm", "(", "[", "self", ".", "act", "(", "feat_out", ")", "]", ",", "sizes_subg", ")", "[", "0", "]", "\n", "return", "feat_out", ",", "adj", ",", "False", ",", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GIN.complexity": [[529, 537], ["breakpoint"], "methods", ["None"], ["", "def", "complexity", "(", "self", ",", "dims_x", ",", "dims_adj", ")", ":", "\n", "        ", "assert", "dims_x", ".", "num_nodes", "==", "dims_adj", ".", "num_nodes", "\n", "ops", "=", "dims_adj", ".", "num_edges", "*", "dims_x", ".", "num_feats", "\n", "# TODO", "\n", "ops", "+=", "dims_x", ".", "num_nodes", "*", "dims_x", ".", "num_feats", "# (1 + eps) * X", "\n", "for", "m", "in", "self", ".", "mlp", ":", "\n", "            ", "breakpoint", "(", ")", "# TODO compute complexity in MLP", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GAT.__init__": [[540, 559], ["int", "layers.shaDowLayer.__init__", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dim_in", ":", "int", ",", "\n", "dim_out", ":", "int", ",", "\n", "dropout", ":", "float", "=", "0.0", ",", "\n", "act", ":", "str", "=", "\"relu\"", ",", "\n", "norm", ":", "str", "=", "'norm_feat'", ",", "\n", "mulhead", ":", "int", "=", "1", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "mulhead", "=", "mulhead", "\n", "assert", "dim_out", "%", "self", ".", "mulhead", "==", "0", ",", "\"invalid output dimension: need to be divisible by mulhead\"", "\n", "self", ".", "dim_slice", "=", "int", "(", "dim_out", "/", "self", ".", "mulhead", ")", "\n", "kwargs", "[", "'norm_dim'", "]", "=", "(", "2", ",", "self", ".", "mulhead", ",", "self", ".", "dim_slice", ")", "\n", "super", "(", ")", ".", "__init__", "(", "dim_in", ",", "dim_out", ",", "dropout", "=", "dropout", ",", "act", "=", "act", ",", "norm", "=", "norm", ",", "**", "kwargs", ")", "\n", "self", ".", "att_act", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", "# See original GAT paper", "\n", "self", ".", "f_lin", "=", "nn", ".", "ModuleList", "(", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ",", "bias", "=", "True", ")", "for", "i", "in", "range", "(", "2", ")", ")", "# neigh + self", "\n", "self", ".", "attention", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "2", ",", "self", ".", "mulhead", ",", "self", ".", "dim_slice", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "attention", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GAT._aggregate_attention": [[560, 583], ["layers.GAT.att_act().squeeze", "layers.GAT.att_act().squeeze", "torch_scatter.scatter", "torch_scatter.scatter", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "layers.GAT.spmm", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "adj._values", "adj._indices", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch_scatter.scatter", "torch.clamp.view", "torch.clamp.view", "torch.clamp.view", "layers.GAT.att_act", "layers.GAT.att_act", "adj._indices", "adj._indices", "torch_scatter.scatter.long", "layers.GAT.mm", "layers.GAT.mm", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "adj._indices", "layers.GAT.t", "feat_neigh.t", "adj._indices", "adj._indices", "val_adj.size"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.shaDowLayer.spmm", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to"], ["", "def", "_aggregate_attention", "(", "self", ",", "adj", ",", "feat_neigh", ",", "feat_self", ",", "attention_self", ",", "attention_neigh", ")", ":", "\n", "        ", "\"\"\"\n        Here we manually implement the numerically stable version of softmax, \n        supporting variable length neighbors. \n        \n        The torch version of softmax only support fixed length neighbors, and\n        thus cannot be directly used here. \n        \"\"\"", "\n", "attention_self", "=", "self", ".", "att_act", "(", "attention_self", ".", "mm", "(", "feat_self", ".", "t", "(", ")", ")", ")", ".", "squeeze", "(", ")", "# num_nodes", "\n", "attention_neigh", "=", "self", ".", "att_act", "(", "attention_neigh", ".", "mm", "(", "feat_neigh", ".", "t", "(", ")", ")", ")", ".", "squeeze", "(", ")", "# num_nodes", "\n", "val_adj", "=", "(", "attention_self", "[", "adj", ".", "_indices", "(", ")", "[", "0", "]", "]", "+", "attention_neigh", "[", "adj", ".", "_indices", "(", ")", "[", "1", "]", "]", ")", "# * adj._values()", "\n", "# Compute softmax per neighborhood: substract max for stability in softmax computation", "\n", "max_per_row", "=", "scatter", "(", "val_adj", ",", "adj", ".", "_indices", "(", ")", "[", "0", "]", ",", "reduce", "=", "\"max\"", ")", "# here we may select some entry that will eventually be dropedged. But this is ok. ", "\n", "deg", "=", "scatter", "(", "torch", ".", "ones", "(", "val_adj", ".", "size", "(", ")", ")", ".", "to", "(", "feat_neigh", ".", "device", ")", ",", "adj", ".", "_indices", "(", ")", "[", "0", "]", ",", "reduce", "=", "\"sum\"", ")", "\n", "val_adj_norm", "=", "val_adj", "-", "torch", ".", "repeat_interleave", "(", "max_per_row", ",", "deg", ".", "long", "(", ")", ")", "\n", "val_adj_exp", "=", "torch", ".", "exp", "(", "val_adj_norm", ")", "*", "adj", ".", "_values", "(", ")", "\n", "# put coefficient alpha into the adj values", "\n", "att_adj", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "adj", ".", "_indices", "(", ")", ",", "val_adj_exp", ",", "torch", ".", "Size", "(", "adj", ".", "shape", ")", ")", "\n", "denom", "=", "torch", ".", "clamp", "(", "scatter", "(", "val_adj_exp", ",", "adj", ".", "_indices", "(", ")", "[", "0", "]", ",", "reduce", "=", "\"sum\"", ")", ",", "min", "=", "1e-10", ")", "\n", "# aggregate", "\n", "ret", "=", "self", ".", "spmm", "(", "att_adj", ",", "feat_neigh", ")", "\n", "ret", "*=", "1", "/", "denom", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GAT._adj_norm": [[584, 601], ["type", "graph_engine.frontend.graph_utils.coo_scipy2torch().to", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "graph_engine.frontend.graph_utils.coo_scipy2torch", "graph_engine.frontend.graph_utils.coo_scipy2torch().to._values", "type", "adj.tocoo", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "int", "graph_engine.frontend.graph_utils.coo_scipy2torch().to._values().size", "graph_engine.frontend.graph_utils.coo_scipy2torch().to._values", "graph_engine.frontend.graph_utils.coo_scipy2torch().to._values().size", "graph_engine.frontend.graph_utils.coo_scipy2torch().to._values"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.coo_scipy2torch"], ["", "def", "_adj_norm", "(", "self", ",", "adj", ",", "is_normed", ",", "device", ",", "dropedge", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        Will perform edge dropout only when is_normed == False\n        \"\"\"", "\n", "if", "type", "(", "adj", ")", "==", "sp", ".", "csr_matrix", ":", "\n", "            ", "assert", "not", "is_normed", "\n", "adj_norm", "=", "coo_scipy2torch", "(", "adj", ".", "tocoo", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "# here we don't normalize adj (data = 1,1,1...). In DGL, it is sym normed", "\n", "if", "dropedge", ">", "0", ":", "\n", "                ", "masked_indices", "=", "torch", ".", "floor", "(", "\n", "torch", ".", "rand", "(", "int", "(", "adj_norm", ".", "_values", "(", ")", ".", "size", "(", ")", "[", "0", "]", "*", "dropedge", ")", ")", "*", "adj_norm", ".", "_values", "(", ")", ".", "size", "(", ")", "[", "0", "]", "\n", ")", ".", "long", "(", ")", "\n", "adj_norm", ".", "_values", "(", ")", "[", "masked_indices", "]", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "assert", "type", "(", "adj", ")", "==", "torch", ".", "Tensor", "and", "is_normed", "\n", "adj_norm", "=", "adj", "\n", "", "return", "adj_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GAT.forward": [[602, 627], ["layers.GAT._adj_norm", "layers.GAT.f_dropout", "layers.GAT.act().view", "layers.GAT.act().view", "range", "layers.GAT.f_norm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers.GAT._aggregate_attention", "tuple", "tuple", "layers.GAT.act", "layers.GAT.act", "range", "range", "layers.GAT.attention[].unsqueeze", "layers.GAT.attention[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GAT._adj_norm", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.shaDowLayer.f_norm", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GATScatter._aggregate_attention"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "sizes_subg", ")", ":", "\n", "        ", "feat_in", ",", "adj", ",", "is_normed", ",", "dropedge", "=", "inputs", "\n", "adj_norm", "=", "self", ".", "_adj_norm", "(", "adj", ",", "is_normed", ",", "feat_in", ".", "device", ",", "dropedge", "=", "dropedge", ")", "\n", "feat_in", "=", "self", ".", "f_dropout", "(", "feat_in", ")", "\n", "# generate A^i X", "\n", "N", "=", "feat_in", ".", "shape", "[", "0", "]", "\n", "feat_partial_self", "=", "self", ".", "act", "(", "self", ".", "f_lin", "[", "0", "]", "(", "feat_in", ")", ")", ".", "view", "(", "N", ",", "self", ".", "mulhead", ",", "-", "1", ")", "\n", "feat_partial_neigh", "=", "self", ".", "act", "(", "self", ".", "f_lin", "[", "1", "]", "(", "feat_in", ")", ")", ".", "view", "(", "N", ",", "self", ".", "mulhead", ",", "-", "1", ")", "\n", "feat_partial_self", "=", "[", "feat_partial_self", "[", ":", ",", "t", "]", "for", "t", "in", "range", "(", "self", ".", "mulhead", ")", "]", "\n", "feat_partial_neigh", "=", "[", "feat_partial_neigh", "[", ":", ",", "t", "]", "for", "t", "in", "range", "(", "self", ".", "mulhead", ")", "]", "\n", "for", "k", "in", "range", "(", "self", ".", "mulhead", ")", ":", "\n", "            ", "feat_partial_neigh", "[", "k", "]", "=", "self", ".", "_aggregate_attention", "(", "\n", "adj_norm", ",", "\n", "feat_partial_neigh", "[", "k", "]", ",", "\n", "feat_partial_self", "[", "k", "]", ",", "\n", "self", ".", "attention", "[", "0", ",", "k", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "self", ".", "attention", "[", "1", ",", "k", "]", ".", "unsqueeze", "(", "0", ")", "\n", ")", "\n", "", "feat_partial_neigh", ",", "feat_partial_self", "=", "self", ".", "f_norm", "(", "\n", "[", "feat_partial_neigh", ",", "feat_partial_self", "]", ",", "sizes_subg", "\n", ")", "\n", "feat_partial_self", "=", "torch", ".", "cat", "(", "tuple", "(", "feat_partial_self", ")", ",", "dim", "=", "1", ")", "\n", "feat_partial_neigh", "=", "torch", ".", "cat", "(", "tuple", "(", "feat_partial_neigh", ")", ",", "dim", "=", "1", ")", "\n", "feat_out", "=", "(", "feat_partial_self", "+", "feat_partial_neigh", ")", "/", "2", "\n", "return", "feat_out", ",", "adj_norm", ",", "True", ",", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GAT.complexity": [[628, 646], ["range", "numpy.product", "numpy.product", "Dims_X", "Dims_adj"], "methods", ["None"], ["", "def", "complexity", "(", "self", ",", "dims_X", ",", "dims_adj", ")", ":", "\n", "        ", "assert", "dims_X", ".", "num_nodes", "==", "dims_adj", ".", "num_nodes", "\n", "ops", "=", "0", "\n", "# ops for X W", "\n", "ops", "+=", "dims_X", ".", "num_nodes", "*", "np", ".", "product", "(", "self", ".", "f_lin", "[", "0", "]", ".", "weight", ".", "shape", ")", "\n", "ops", "+=", "dims_X", ".", "num_nodes", "*", "np", ".", "product", "(", "self", ".", "f_lin", "[", "1", "]", ".", "weight", ".", "shape", ")", "\n", "# ops for atten vector times (X W)", "\n", "ops", "+=", "dims_X", ".", "num_nodes", "*", "self", ".", "f_lin", "[", "0", "]", ".", "weight", ".", "shape", "[", "0", "]", "\n", "ops", "+=", "dims_X", ".", "num_nodes", "*", "self", ".", "f_lin", "[", "1", "]", ".", "weight", ".", "shape", "[", "0", "]", "\n", "for", "_h", "in", "range", "(", "self", ".", "mulhead", ")", ":", "\n", "            ", "ops", "+=", "dims_adj", ".", "num_edges", "*", "2", "\n", "# ops for softmax (assume calculating softmax is of cost 20 -- ", "\n", "# exp and division are much more expensive)", "\n", "ops", "+=", "dims_adj", ".", "num_edges", "*", "20", "\n", "# ops for weighted aggregation", "\n", "", "ops", "+=", "dims_adj", ".", "num_edges", "*", "self", ".", "f_lin", "[", "1", "]", ".", "weight", ".", "shape", "[", "0", "]", "\n", "return", "(", "Dims_X", "(", "dims_X", ".", "num_nodes", ",", "self", ".", "f_lin", "[", "1", "]", ".", "weight", ".", "shape", "[", "0", "]", ")", ",", "\n", "Dims_adj", "(", "dims_adj", ".", "num_nodes", ",", "dims_adj", ".", "num_edges", ")", ")", ",", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GATScatter.__init__": [[654, 673], ["layers.shaDowLayer.__init__", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "int", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "layers.GATScatter.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GATScatter.reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dim_in", ":", "int", ",", "\n", "dim_out", ":", "int", ",", "\n", "dropout", ":", "float", "=", "0.0", ",", "\n", "act", ":", "str", "=", "\"relu\"", ",", "\n", "norm", ":", "str", "=", "'norm_feat'", ",", "\n", "mulhead", ":", "int", "=", "1", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "kwargs", "[", "'norm_dim'", "]", "=", "(", "1", ",", "dim_out", ")", "\n", "super", "(", ")", ".", "__init__", "(", "dim_in", ",", "dim_out", ",", "dropout", "=", "dropout", ",", "act", "=", "act", ",", "norm", "=", "norm", ",", "**", "kwargs", ")", "\n", "self", ".", "mulhead", "=", "mulhead", "\n", "self", ".", "att_act", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", "# See original GAT paper", "\n", "assert", "dim_out", "%", "self", ".", "mulhead", "==", "0", ",", "\"invalid output dimension: need to be divisible by mulhead\"", "\n", "self", ".", "dim_slice", "=", "int", "(", "dim_out", "/", "self", ".", "mulhead", ")", "# bias = False??", "\n", "self", ".", "f_lin", "=", "nn", ".", "ModuleList", "(", "nn", ".", "Linear", "(", "dim_in", ",", "dim_out", ",", "bias", "=", "True", ")", "for", "i", "in", "range", "(", "2", ")", ")", "# neigh + self", "\n", "self", ".", "attention", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "size", "=", "(", "1", ",", "self", ".", "mulhead", ",", "self", ".", "dim_slice", ")", ")", ")", "\n", "self", ".", "reset_parameters", "(", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GATScatter.reset_parameters": [[674, 679], ["torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ",", "act", ")", ":", "\n", "        ", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "act", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "f_lin", "[", "0", "]", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "f_lin", "[", "1", "]", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "attention", ",", "gain", "=", "gain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GATScatter._adj_drop": [[680, 695], ["type", "graph_engine.frontend.graph_utils.coo_scipy2torch().to", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "torch.floor().long", "graph_engine.frontend.graph_utils.coo_scipy2torch", "graph_engine.frontend.graph_utils.coo_scipy2torch().to._values", "type", "adj.tocoo", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "int", "graph_engine.frontend.graph_utils.coo_scipy2torch().to._values().size", "graph_engine.frontend.graph_utils.coo_scipy2torch().to._values", "graph_engine.frontend.graph_utils.coo_scipy2torch().to._values().size", "graph_engine.frontend.graph_utils.coo_scipy2torch().to._values"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.coo_scipy2torch"], ["", "def", "_adj_drop", "(", "self", ",", "adj", ",", "is_normed", ",", "device", ",", "dropedge", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        Will perform edge dropout only when is_normed == False\n        \"\"\"", "\n", "if", "type", "(", "adj", ")", "==", "sp", ".", "csr_matrix", ":", "\n", "            ", "assert", "not", "is_normed", "\n", "adj_norm", "=", "coo_scipy2torch", "(", "adj", ".", "tocoo", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "# here we don't normalize adj (data = 1,1,1...). In DGL, it is sym normed", "\n", "if", "dropedge", ">", "0", ":", "\n", "                ", "masked_indices", "=", "torch", ".", "floor", "(", "torch", ".", "rand", "(", "int", "(", "adj_norm", ".", "_values", "(", ")", ".", "size", "(", ")", "[", "0", "]", "*", "dropedge", ")", ")", "*", "adj_norm", ".", "_values", "(", ")", ".", "size", "(", ")", "[", "0", "]", ")", ".", "long", "(", ")", "\n", "adj_norm", ".", "_values", "(", ")", "[", "masked_indices", "]", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "assert", "type", "(", "adj", ")", "==", "torch", ".", "Tensor", "and", "is_normed", "\n", "adj_norm", "=", "adj", "\n", "", "return", "adj_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GATScatter._aggregate_attention": [[696, 710], ["torch_scatter.scatter", "torch_scatter.scatter", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "layers.GATScatter.spmm", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "adj._values", "adj._indices", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch_scatter.scatter", "torch.clamp.view", "torch.clamp.view", "torch.clamp.view", "adj._indices", "adj._indices", "torch_scatter.scatter.long", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "adj._indices", "val_adj.size"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.shaDowLayer.spmm", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to"], ["", "def", "_aggregate_attention", "(", "self", ",", "adj", ",", "feat_neigh", ",", "el_edges", ")", ":", "\n", "        ", "val_adj", "=", "el_edges", "# * adj._values()", "\n", "# Compute softmax per neighborhood: substract max for stability in softmax computation", "\n", "max_per_row", "=", "scatter", "(", "val_adj", ",", "adj", ".", "_indices", "(", ")", "[", "0", "]", ",", "reduce", "=", "\"max\"", ")", "\n", "deg", "=", "scatter", "(", "torch", ".", "ones", "(", "val_adj", ".", "size", "(", ")", ")", ".", "to", "(", "feat_neigh", ".", "device", ")", ",", "adj", ".", "_indices", "(", ")", "[", "0", "]", ",", "reduce", "=", "\"sum\"", ")", "\n", "val_adj_norm", "=", "val_adj", "-", "torch", ".", "repeat_interleave", "(", "max_per_row", ",", "deg", ".", "long", "(", ")", ")", "\n", "val_adj_exp", "=", "torch", ".", "exp", "(", "val_adj_norm", ")", "*", "adj", ".", "_values", "(", ")", "\n", "# put coefficient alpha into the adj values", "\n", "att_adj", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "adj", ".", "_indices", "(", ")", ",", "val_adj_exp", ",", "torch", ".", "Size", "(", "adj", ".", "shape", ")", ")", "\n", "denom", "=", "torch", ".", "clamp", "(", "scatter", "(", "val_adj_exp", ",", "adj", ".", "_indices", "(", ")", "[", "0", "]", ",", "reduce", "=", "\"sum\"", ")", ",", "min", "=", "1e-10", ")", "\n", "# aggregate", "\n", "ret", "=", "self", ".", "spmm", "(", "att_adj", ",", "feat_neigh", ")", "\n", "ret", "*=", "1", "/", "denom", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GATScatter.forward": [[711, 744], ["layers.GATScatter.f_dropout", "layers.GATScatter._adj_drop", "layers.GATScatter.att_act", "el[].squeeze", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "layers.GATScatter.f_norm", "layers.GATScatter._aggregate_attention", "layers.GATScatter.act", "layers.GATScatter._indices"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GATScatter._adj_drop", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.shaDowLayer.f_norm", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.GATScatter._aggregate_attention"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "sizes_subg", ")", ":", "\n", "        ", "feat_in", ",", "adj", ",", "is_dropped", ",", "dropedge", "=", "inputs", "\n", "\n", "# generate A^i X", "\n", "N", "=", "feat_in", ".", "shape", "[", "0", "]", "\n", "h_dst", "=", "h_src", "=", "self", ".", "f_dropout", "(", "feat_in", ")", "\n", "feat_src", "=", "self", ".", "f_lin", "[", "0", "]", "(", "h_src", ")", ".", "view", "(", "N", ",", "self", ".", "mulhead", ",", "-", "1", ")", "\n", "adj_drop", "=", "self", ".", "_adj_drop", "(", "adj", ",", "is_dropped", ",", "feat_in", ".", "device", ",", "dropedge", "=", "dropedge", ")", "\n", "\n", "# sym-norm: part 1", "\n", "# degs = torch.bincount(adj_drop._indices()[0])           # ignore the dropped edges: since softmax will normalize anyways", "\n", "# norm = torch.pow(degs, -0.5)", "\n", "# shp = norm.shape + (1,) * (feat_src.dim() - 1)", "\n", "# norm = torch.reshape(norm, shp)", "\n", "# feat_src = feat_src * norm                              # num_nodes x mulhead x dim_slice", "\n", "\n", "el", "=", "(", "feat_src", "*", "self", ".", "attention", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "el", "=", "self", ".", "att_act", "(", "el", ")", "\n", "el_edges", "=", "el", "[", "adj_drop", ".", "_indices", "(", ")", "[", "1", "]", "]", ".", "squeeze", "(", "-", "1", ")", "# num_edges x mulhead x 1", "\n", "\n", "feat_aggr", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "self", ".", "mulhead", ")", ":", "\n", "            ", "feat_aggr", ".", "append", "(", "self", ".", "_aggregate_attention", "(", "adj_drop", ",", "feat_src", "[", ":", ",", "k", "]", ",", "el_edges", "[", ":", ",", "k", "]", ")", ")", "\n", "", "feat_aggr", "=", "torch", ".", "cat", "(", "feat_aggr", ",", "dim", "=", "1", ")", "\n", "\n", "# sym-norm: part 2", "\n", "# feat_aggr = feat_aggr * norm.squeeze(-1)", "\n", "\n", "# residue", "\n", "feat_self", "=", "self", ".", "f_lin", "[", "1", "]", "(", "h_dst", ")", "\n", "feat_out", "=", "self", ".", "f_norm", "(", "[", "self", ".", "act", "(", "feat_aggr", "+", "feat_self", ")", "]", ",", "sizes_subg", ")", "[", "0", "]", "\n", "# TODO: there seems to be one more dropout here?", "\n", "return", "feat_out", ",", "adj_drop", ",", "True", ",", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.layers.get_torch_act": [[37, 40], ["v", "[].items"], "function", ["None"], ["def", "get_torch_act", "(", "act", ",", "args", ")", ":", "\n", "    ", "_torch_args", "=", "{", "k", ":", "v", "(", "args", ")", "for", "k", ",", "v", "in", "F_ACT", "[", "act", "]", "[", "1", "]", ".", "items", "(", ")", "}", "\n", "return", "F_ACT", "[", "act", "]", "[", "0", "]", "(", "**", "_torch_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.PoolSubgraph.__post_init__": [[31, 34], ["collections.deque", "range"], "methods", ["None"], ["def", "__post_init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "data", "=", "[", "deque", "(", ")", "for", "i", "in", "range", "(", "self", ".", "num_ensemble", ")", "]", "\n", "self", ".", "num_subg", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.PoolSubgraph.add": [[35, 41], ["len", "minibatch.PoolSubgraph.data[].append", "len", "type"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "i_ens", ":", "int", ",", "subgs", ":", "list", ")", ":", "\n", "        ", "for", "s", "in", "subgs", ":", "\n", "            ", "assert", "type", "(", "s", ")", "==", "Subgraph", "\n", "self", ".", "data", "[", "i_ens", "]", ".", "append", "(", "s", ")", "\n", "", "assert", "self", ".", "num_subg", "<=", "len", "(", "self", ".", "data", "[", "i_ens", "]", ")", "\n", "self", ".", "num_subg", "=", "len", "(", "self", ".", "data", "[", "i_ens", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.PoolSubgraph.collate": [[42, 67], ["range", "range", "subg_cat.append", "size_cat.append", "subg_to_cat.append", "graph_engine.frontend.samplers_base.Subgraph.cat_to_block_diagonal", "sum", "minibatch.PoolSubgraph.data[].popleft"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.Subgraph.cat_to_block_diagonal"], ["", "def", "collate", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"\n        Concatenate batch_size number of subgraphs in the pool, into a single adj matrix (block diagonal form)\n        e.g., ensemble = 1, batch_size = 3, and the 3 subgraphs are of size 2, 1, 3. Then the output will be:\n        * subg_cat:\n            x x 0 0 0 0\n            x x 0 0 0 0\n            0 0 x 0 0 0\n            0 0 0 x x x\n            0 0 0 x x x\n            0 0 0 x x x\n        * size_cat:\n            [2, 1, 3]\n        NOTE works for both node and link tasks, where there can be 1 or 2 targets per subgraph.\n        \"\"\"", "\n", "subg_cat", ",", "size_cat", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_ensemble", ")", ":", "\n", "            ", "subg_to_cat", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "subg_to_cat", ".", "append", "(", "self", ".", "data", "[", "i", "]", ".", "popleft", "(", ")", ")", "\n", "", "subg_cat", ".", "append", "(", "Subgraph", ".", "cat_to_block_diagonal", "(", "subg_to_cat", ")", ")", "\n", "size_cat", ".", "append", "(", "[", "sc", ".", "indptr", ".", "size", "-", "1", "for", "sc", "in", "subg_to_cat", "]", ")", "\n", "assert", "sum", "(", "size_cat", "[", "-", "1", "]", ")", "==", "subg_cat", "[", "-", "1", "]", ".", "indptr", ".", "size", "-", "1", "\n", "", "self", ".", "num_subg", "-=", "batch_size", "\n", "return", "subg_cat", ",", "size_cat", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.__post_init__": [[79, 82], ["range", "range"], "methods", ["None"], ["def", "__post_init__", "(", "self", ",", "_num_ens", ":", "int", ")", ":", "\n", "        ", "self", ".", "data", "=", "[", "{", "}", "for", "_", "in", "range", "(", "_num_ens", ")", "]", "\n", "self", ".", "num_recorded", "=", "[", "0", "for", "_", "in", "range", "(", "_num_ens", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.get": [[83, 85], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "i_ens", ":", "int", ",", "i_subg", ":", "int", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "i_ens", "]", "[", "i_subg", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set": [[86, 89], ["None"], "methods", ["None"], ["", "def", "set", "(", "self", ",", "i_ens", ":", "int", ",", "i_subg", ":", "int", ",", "subg", ":", "Subgraph", ")", ":", "\n", "        ", "self", ".", "data", "[", "i_ens", "]", "[", "i_subg", "]", "=", "subg", "\n", "self", ".", "num_recorded", "[", "i_ens", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.is_empty": [[90, 92], ["len"], "methods", ["None"], ["", "def", "is_empty", "(", "self", ",", "i_ens", ":", "int", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", "[", "i_ens", "]", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.OneBatchSubgraph.num_ens": [[108, 111], ["len"], "methods", ["None"], ["@", "property", "\n", "def", "num_ens", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "adj_ens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.OneBatchSubgraph.batch_size": [[112, 115], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "batch_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "target_ens", "[", "0", "]", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.OneBatchSubgraph.__post_init__": [[116, 118], ["minibatch.OneBatchSubgraph._validate"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.RawGraph._validate"], ["", "def", "__post_init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_validate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.OneBatchSubgraph._validate": [[119, 129], ["len", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "_validate", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "adj_ens", ")", "==", "self", ".", "num_ens", "\n", "assert", "len", "(", "self", ".", "feat_ens", ")", "==", "self", ".", "num_ens", "\n", "if", "self", ".", "size_subg_ens", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "size_subg_ens", ".", "shape", "[", "0", "]", "==", "self", ".", "num_ens", "\n", "", "assert", "len", "(", "self", ".", "target_ens", ")", "==", "self", ".", "num_ens", "\n", "if", "self", ".", "feat_aug_ens", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "self", ".", "feat_aug_ens", ")", "==", "self", ".", "num_ens", "\n", "", "if", "self", ".", "idx_raw", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "self", ".", "idx_raw", ")", "==", "self", ".", "num_ens", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.OneBatchSubgraph.pop_idx_raw": [[130, 134], ["None"], "methods", ["None"], ["", "", "def", "pop_idx_raw", "(", "self", ")", ":", "\n", "        ", "ret", "=", "self", ".", "idx_raw", "\n", "self", ".", "idx_raw", "=", "None", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.OneBatchSubgraph.to_dict": [[135, 140], ["getattr"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ",", "keys", "=", "None", ")", ":", "\n", "        ", "if", "keys", "is", "None", ":", "\n", "            ", "keys", "=", "self", ".", "__dataclass_fields__", "\n", "", "return", "{", "\n", "k", ":", "getattr", "(", "self", ",", "k", ")", "for", "k", "in", "keys", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.__init__": [[154, 250], ["set().issubset", "copy.deepcopy", "torch.get_default_dtype", "shaDow.profiler.SubgraphProfiler", "set", "type", "minibatch.MinibatchShallowExtractor.raw_entity_set.items", "set", "set", "minibatch.MinibatchShallowExtractor.feat_full.to", "percent_per_epoch.items", "set", "minibatch.MinibatchShallowExtractor.raw_entity_set.keys", "set().issubset", "adjs.keys", "type", "minibatch.MinibatchShallowExtractor.label_full.to", "float", "len", "len", "minibatch.CachedSubgraph", "minibatch.PoolSubgraph", "set", "type", "sc.items", "max", "min", "set", "_v.keys"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set"], ["def", "__init__", "(", "\n", "self", ",", "\n", "name_data", ",", "\n", "dir_data", ",", "\n", "adjs", ",", "\n", "entity_set", ",", "\n", "sampler_config_ensemble", ",", "\n", "aug_feats", ",", "\n", "percent_per_epoch", ",", "# downsample nodes / edges per epoch", "\n", "feat_full", ",", "\n", "label_full", ",", "\n", "dim_feat_raw", ":", "int", ",", "\n", "is_transductive", ":", "bool", ",", "\n", "parallelism", ":", "int", ",", "\n", "full_tensor_on_gpu", ":", "bool", "=", "True", ",", "\n", "bin_adj_files", "=", "None", ",", "\n", "nocache_modes", ":", "set", "=", "{", "*", "(", ")", "}", ",", "\n", "optm_level", "=", "'high'", ",", "\n", "seed_cpp", "=", "-", "1", ",", "\n", "metrics_profile", "=", "{", "'running'", ":", "{", "}", ",", "'global'", ":", "{", "'hops'", ",", "'sizes'", "}", "}", ",", "\n", ")", ":", "\n", "        ", "self", ".", "optm_level", "=", "optm_level", "\n", "self", ".", "aug_feats", "=", "aug_feats", "\n", "self", ".", "dev_torch", "=", "device", "\n", "self", ".", "dir_data", ",", "self", ".", "name_data", "=", "dir_data", ",", "name_data", "\n", "self", ".", "batch_num", "=", "-", "1", "\n", "self", ".", "batch_size", "=", "{", "TRAIN", ":", "0", ",", "VALID", ":", "0", ",", "TEST", ":", "0", "}", "\n", "self", ".", "raw_entity_set", "=", "entity_set", "\n", "assert", "set", "(", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", ")", ".", "issubset", "(", "set", "(", "self", ".", "raw_entity_set", ".", "keys", "(", ")", ")", ")", "\n", "if", "type", "(", "self", ".", "raw_entity_set", "[", "TRAIN", "]", ")", "==", "dict", ":", "\n", "            ", "for", "_k", ",", "_v", "in", "self", ".", "raw_entity_set", ".", "items", "(", ")", ":", "\n", "                ", "assert", "set", "(", "_v", ".", "keys", "(", ")", ")", ".", "issubset", "(", "set", "(", "[", "'pos'", ",", "'neg'", "]", ")", ")", "\n", "", "assert", "label_full", "is", "None", "\n", "self", ".", "prediction_task", "=", "'link'", "\n", "", "else", ":", "\n", "            ", "self", ".", "prediction_task", "=", "'node'", "\n", "", "self", ".", "entity_epoch", "=", "{", "m", ":", "None", "for", "m", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", "}", "\n", "self", ".", "label_epoch", "=", "{", "m", ":", "None", "for", "m", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", "}", "# to be set each epoch", "\n", "self", ".", "is_transductive", "=", "is_transductive", "\n", "assert", "set", "(", "adjs", ".", "keys", "(", ")", ")", "==", "set", "(", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", ")", "\n", "self", ".", "adj", "=", "adjs", "\n", "\n", "self", ".", "feat_full", ",", "self", ".", "label_full", "=", "feat_full", ",", "label_full", "\n", "self", ".", "dim_feat_raw", "=", "dim_feat_raw", "\n", "assert", "(", "label_full", "is", "None", "or", "type", "(", "label_full", ")", "==", "torch", ".", "Tensor", ")", "and", "type", "(", "feat_full", ")", "==", "torch", ".", "Tensor", "\n", "if", "full_tensor_on_gpu", ":", "\n", "            ", "self", ".", "feat_full", "=", "self", ".", "feat_full", ".", "to", "(", "self", ".", "dev_torch", ")", "\n", "if", "self", ".", "label_full", "is", "not", "None", ":", "\n", "                ", "self", ".", "label_full", "=", "self", ".", "label_full", ".", "to", "(", "self", ".", "dev_torch", ")", "\n", "\n", "# for keeping track if evaluation minibatches has sweeped the whole val/test sets", "\n", "", "", "self", ".", "idx_entity_evaluated", "=", "{", "VALID", ":", "0", ",", "TEST", ":", "0", ",", "TRAIN", ":", "0", "}", "\n", "self", ".", "end_epoch", "=", "{", "VALID", ":", "False", ",", "TEST", ":", "False", ",", "TRAIN", ":", "False", "}", "\n", "if", "percent_per_epoch", "is", "None", ":", "\n", "            ", "self", ".", "percent_per_epoch", "=", "{", "TRAIN", ":", "1.", ",", "VALID", ":", "1.", ",", "TEST", ":", "1.", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "percent_per_epoch", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "percent_per_epoch", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "percent_per_epoch", "[", "STR2MODE", "[", "k", "]", "]", "=", "float", "(", "v", ")", "\n", "", "", "self", ".", "nocache_modes", "=", "nocache_modes", "if", "self", ".", "prediction_task", "==", "'node'", "else", "{", "TRAIN", ",", "VALID", ",", "TEST", "}", "\n", "self", ".", "graph_sampler", "=", "{", "TRAIN", ":", "None", ",", "VALID", ":", "None", ",", "TEST", ":", "None", "}", "\n", "sampler_config_ensemble", "=", "deepcopy", "(", "sampler_config_ensemble", ")", "\n", "self", ".", "num_ensemble", "=", "0", "\n", "self", ".", "seed_cpp", "=", "seed_cpp", "\n", "for", "sc", "in", "sampler_config_ensemble", "[", "'configs'", "]", ":", "\n", "            ", "num_ens_cur", "=", "[", "len", "(", "v", ")", "for", "k", ",", "v", "in", "sc", ".", "items", "(", ")", "if", "k", "!=", "'method'", "]", "\n", "if", "len", "(", "num_ens_cur", ")", "==", "0", ":", "\n", "                ", "self", ".", "num_ensemble", "+=", "1", "\n", "", "else", ":", "\n", "                ", "assert", "max", "(", "num_ens_cur", ")", "==", "min", "(", "num_ens_cur", ")", "\n", "self", ".", "num_ensemble", "+=", "num_ens_cur", "[", "0", "]", "\n", "", "", "self", ".", "is_stochastic_sampler", "=", "{", "}", "\n", "if", "\"full\"", "in", "[", "c", "[", "'method'", "]", "for", "c", "in", "sampler_config_ensemble", "[", "'configs'", "]", "]", ":", "\n", "# treat FULL sampler as no sampling. Also no ensemble under FULL sampler", "\n", "            ", "assert", "self", ".", "prediction_task", "==", "'node'", "and", "self", ".", "num_ensemble", "==", "1", "\n", "for", "m", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", ":", "\n", "                ", "self", ".", "batch_size", "[", "m", "]", "=", "self", ".", "raw_entity_set", "[", "m", "]", ".", "shape", "[", "0", "]", "\n", "self", ".", "is_stochastic_sampler", "[", "m", "]", "=", "False", "\n", "", "self", ".", "mode_sample", "=", "self", ".", "FULL", "\n", "", "else", ":", "\n", "            ", "self", ".", "record_subgraphs", "=", "{", "}", "\n", "self", ".", "args_sampler_init", "=", "[", "sampler_config_ensemble", ",", "parallelism", ",", "bin_adj_files", "]", "\n", "# -------- storing the subgraph samples -------", "\n", "# only for deterministic samplers: e.g., PPR", "\n", "self", ".", "cache_subg", ",", "self", ".", "pool_subg", "=", "{", "}", ",", "{", "}", "\n", "for", "m", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", ":", "\n", "                ", "self", ".", "cache_subg", "[", "m", "]", "=", "CachedSubgraph", "(", "_num_ens", "=", "self", ".", "num_ensemble", ")", "\n", "self", ".", "pool_subg", "[", "m", "]", "=", "PoolSubgraph", "(", "num_ensemble", "=", "self", ".", "num_ensemble", ")", "\n", "", "self", ".", "mode_sample", "=", "self", ".", "SUBG", "\n", "\n", "", "self", ".", "dtype", "=", "torch", ".", "get_default_dtype", "(", ")", "\n", "# --------- LOGGING ---------", "\n", "self", ".", "dim_1hot_hop", ":", "int", "=", "5", "+", "2", "# profile up to 5-hops (plus self, plus unreachable)", "\n", "self", ".", "dim_1hot_ppr", ":", "int", "=", "1", "\n", "self", ".", "dim_1hot_drnl", ":", "int", "=", "25", "+", "1", "# profile up to 25 = 5*5 different hop combinations (plus unreachable)", "\n", "self", ".", "profiler", "=", "SubgraphProfiler", "(", "self", ".", "num_ensemble", ",", "metrics", "=", "metrics_profile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor._get_cur_batch_size": [[252, 255], ["min"], "methods", ["None"], ["", "def", "_get_cur_batch_size", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "end_epoch", "[", "mode", "]", "=", "False", "\n", "return", "min", "(", "self", ".", "entity_epoch", "[", "mode", "]", ".", "shape", "[", "0", "]", "-", "self", ".", "idx_entity_evaluated", "[", "mode", "]", ",", "self", ".", "batch_size", "[", "mode", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor._update_batch_stat": [[256, 268], ["all", "len"], "methods", ["None"], ["", "def", "_update_batch_stat", "(", "self", ",", "mode", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "batch_num", "+=", "1", "\n", "self", ".", "idx_entity_evaluated", "[", "mode", "]", "+=", "batch_size", "\n", "# TODO: may move this to epoch_start reset. ", "\n", "# --> Then you don't need end_epoch. Just check from idx_entity_evaluated", "\n", "if", "self", ".", "idx_entity_evaluated", "[", "mode", "]", ">=", "self", ".", "entity_epoch", "[", "mode", "]", ".", "shape", "[", "0", "]", ":", "\n", "            ", "assert", "self", ".", "idx_entity_evaluated", "[", "mode", "]", "==", "self", ".", "entity_epoch", "[", "mode", "]", ".", "shape", "[", "0", "]", "\n", "self", ".", "idx_entity_evaluated", "[", "mode", "]", "=", "0", "\n", "self", ".", "end_epoch", "[", "mode", "]", "=", "True", "\n", "if", "self", ".", "graph_sampler", "[", "mode", "]", "is", "not", "None", ":", "\n", "                ", "assert", "self", ".", "pool_subg", "[", "mode", "]", ".", "num_subg", "==", "0", "\n", "assert", "all", "(", "len", "(", "d", ")", "==", "0", "for", "d", "in", "self", ".", "pool_subg", "[", "mode", "]", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.shuffle_entity": [[269, 305], ["numpy.concatenate", "numpy.random.permutation", "torch.from_numpy().to", "minibatch.MinibatchShallowExtractor.graph_sampler[].shuffle_targets", "numpy.random.permutation", "minibatch.MinibatchShallowExtractor.graph_sampler[].shuffle_targets", "torch_geometric.utils.negative_sampling", "neg_edge.t().numpy.t().numpy.t().numpy", "numpy.repeat", "minibatch.MinibatchShallowExtractor.", "torch.from_numpy", "torch_geometric.utils.to_undirected", "neg_edge.t().numpy.t().numpy.t", "int", "int", "torch.from_numpy().t", "numpy.ceil", "numpy.ceil", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.shuffle_targets", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.shuffle_targets"], ["", "", "", "def", "shuffle_entity", "(", "self", ",", "mode", ")", ":", "\n", "        ", "\"\"\"\n        YOU MUST CALL THIS FUNCTION BEFORE STARTING ANY EPOCH. \n        \"\"\"", "\n", "if", "self", ".", "prediction_task", "==", "'node'", ":", "\n", "            ", "if", "self", ".", "graph_sampler", "[", "mode", "]", "is", "not", "None", ":", "# no need to shuffle for full batch mode", "\n", "                ", "perm", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "raw_entity_set", "[", "mode", "]", ".", "size", ")", "\n", "if", "self", ".", "percent_per_epoch", "[", "mode", "]", "<", "1.0", ":", "\n", "                    ", "perm", "=", "perm", "[", ":", "int", "(", "np", ".", "ceil", "(", "self", ".", "percent_per_epoch", "[", "mode", "]", "*", "perm", ".", "size", ")", ")", "]", "\n", "", "self", ".", "entity_epoch", "[", "mode", "]", "=", "self", ".", "raw_entity_set", "[", "mode", "]", "[", "perm", "]", "\n", "self", ".", "label_epoch", "[", "mode", "]", "=", "self", ".", "label_full", "[", "self", ".", "entity_epoch", "[", "mode", "]", "]", "# entity = node", "\n", "self", ".", "graph_sampler", "[", "mode", "]", ".", "shuffle_targets", "(", "self", ".", "entity_epoch", "[", "mode", "]", ")", "\n", "", "", "else", ":", "# link prediction", "\n", "            ", "es", "=", "self", ".", "raw_entity_set", "[", "mode", "]", "\n", "if", "'pos'", "in", "es", "and", "'neg'", "in", "es", ":", "\n", "                ", "pos_edge", ",", "neg_edge", "=", "es", "[", "'pos'", "]", ",", "es", "[", "'neg'", "]", "\n", "", "else", ":", "\n", "                ", "assert", "'pos'", "in", "es", "\n", "# TODO use valedge as input, then concat undirected valedges to be excluded in neg sample", "\n", "pos_edge", "=", "self", ".", "raw_entity_set", "[", "mode", "]", "[", "'pos'", "]", "\n", "all_train_edges", "=", "add_self_loops", "(", "to_undirected", "(", "torch", ".", "from_numpy", "(", "pos_edge", ")", ".", "t", "(", ")", ")", ")", "[", "0", "]", "\n", "neg_edge", "=", "negative_sampling", "(", "\n", "all_train_edges", ",", "num_nodes", "=", "self", ".", "adj", "[", "mode", "]", ".", "indptr", ".", "size", "-", "1", ",", "num_neg_samples", "=", "pos_edge", ".", "shape", "[", "0", "]", "\n", ")", "\n", "neg_edge", "=", "neg_edge", ".", "t", "(", ")", ".", "numpy", "(", ")", "\n", "", "edge_set", "=", "np", ".", "concatenate", "(", "[", "pos_edge", ",", "neg_edge", "]", ",", "axis", "=", "0", ")", "\n", "label_epoch", "=", "np", ".", "repeat", "(", "[", "1", ",", "0", "]", ",", "[", "pos_edge", ".", "shape", "[", "0", "]", ",", "neg_edge", ".", "shape", "[", "0", "]", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "perm", "=", "np", ".", "random", ".", "permutation", "(", "edge_set", ".", "shape", "[", "0", "]", ")", "\n", "if", "self", ".", "percent_per_epoch", "[", "mode", "]", "<", "1.0", ":", "\n", "                ", "perm", "=", "perm", "[", ":", "int", "(", "np", ".", "ceil", "(", "self", ".", "percent_per_epoch", "[", "mode", "]", "*", "perm", ".", "size", ")", ")", "]", "\n", "", "self", ".", "entity_epoch", "[", "mode", "]", "=", "edge_set", "[", "perm", "]", "\n", "self", ".", "label_epoch", "[", "mode", "]", "=", "torch", ".", "from_numpy", "(", "label_epoch", "[", "perm", "]", ")", ".", "to", "(", "self", ".", "dev_torch", ")", "\n", "# now the sampler (c++ / py) will traverse all end-points of the pos and neg edges", "\n", "# NOTE: keep entity_epoch as unflattened. let sampler flatten internally", "\n", "# TODO: set label_epoch for node task as well. ", "\n", "self", ".", "graph_sampler", "[", "mode", "]", ".", "shuffle_targets", "(", "self", ".", "entity_epoch", "[", "mode", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.epoch_start_reset": [[306, 323], ["minibatch.MinibatchShallowExtractor.graph_sampler[].set_return_target_only", "minibatch.MinibatchShallowExtractor.instantiate_sampler"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.set_return_target_only", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.instantiate_sampler"], ["", "", "def", "epoch_start_reset", "(", "self", ",", "epoch", ",", "mode", ")", ":", "\n", "        ", "\"\"\"\n        Reset structs so that sampled subgraphs can be properly reused later on.  \n        \"\"\"", "\n", "self", ".", "batch_num", "=", "-", "1", "\n", "if", "self", ".", "graph_sampler", "[", "mode", "]", "is", "None", "and", "self", ".", "mode_sample", "==", "self", ".", "SUBG", ":", "\n", "            ", "self", ".", "instantiate_sampler", "(", "*", "self", ".", "args_sampler_init", ",", "modes", "=", "[", "mode", "]", ")", "\n", "if", "mode", "not", "in", "self", ".", "nocache_modes", ":", "\n", "                ", "self", ".", "record_subgraphs", "[", "mode", "]", "=", "[", "\n", "\"record\"", "if", "g", ".", "name", "in", "REUSABLE_SAMPLER", "else", "\"none\"", "\n", "for", "g", "in", "self", ".", "graph_sampler", "[", "mode", "]", ".", "sampler_list", "\n", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "record_subgraphs", "[", "mode", "]", "=", "[", "'noncache'", "]", "*", "self", ".", "num_ensemble", "\n", "", "", "elif", "self", ".", "mode_sample", "==", "self", ".", "FULL", ":", "\n", "            ", "return", "\n", "", "self", ".", "graph_sampler", "[", "mode", "]", ".", "set_return_target_only", "(", "[", "rs", "==", "'reuse'", "for", "rs", "in", "self", ".", "record_subgraphs", "[", "mode", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.is_end_epoch": [[324, 326], ["None"], "methods", ["None"], ["", "def", "is_end_epoch", "(", "self", ",", "mode", ")", ":", "\n", "        ", "return", "self", ".", "end_epoch", "[", "mode", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.epoch_end_reset": [[327, 340], ["range", "len", "all", "minibatch.MinibatchShallowExtractor.drop_full_graph_info", "minibatch.MinibatchShallowExtractor.cache_subg[].is_empty"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.drop_full_graph_info", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.is_empty"], ["", "def", "epoch_end_reset", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "end_epoch", "[", "mode", "]", "=", "False", "\n", "if", "self", ".", "mode_sample", "==", "self", ".", "FULL", ":", "\n", "            ", "return", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "record_subgraphs", "[", "mode", "]", ")", ")", ":", "\n", "            ", "if", "self", ".", "record_subgraphs", "[", "mode", "]", "[", "i", "]", "==", "\"record\"", "and", "not", "self", ".", "cache_subg", "[", "mode", "]", ".", "is_empty", "(", "i", ")", ":", "\n", "                ", "self", ".", "record_subgraphs", "[", "mode", "]", "[", "i", "]", "=", "\"reuse\"", "\n", "", "", "if", "(", "\n", "self", ".", "optm_level", "==", "'high'", "\n", "and", "self", ".", "mode_sample", "!=", "self", ".", "FULL", "\n", "and", "all", "(", "r", "==", "'reuse'", "for", "r", "in", "self", ".", "record_subgraphs", "[", "mode", "]", ")", "\n", ")", ":", "\n", "            ", "self", ".", "drop_full_graph_info", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.drop_full_graph_info": [[341, 343], ["minibatch.MinibatchShallowExtractor.graph_sampler[].drop_full_graph_info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.drop_full_graph_info"], ["", "", "def", "drop_full_graph_info", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "graph_sampler", "[", "mode", "]", ".", "drop_full_graph_info", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.instantiate_sampler": [[344, 402], ["copy.deepcopy", "len", "config_ensemble_mode.items", "config_ensemble_mode.items", "cfg.pop", "config_ensemble.extend", "copy.deepcopy", "graph_engine.frontend.samplers_ensemble.GraphSamplerEnsemble", "len", "len", "cfg.items", "len", "max", "min", "len", "range", "cfg.items", "numpy.arange"], "methods", ["None"], ["", "def", "instantiate_sampler", "(", "self", ",", "sampler_config_ensemble", ",", "parallelism", ",", "bin_adj_files", ",", "modes", "=", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", ")", ":", "\n", "        ", "sampler_config_ensemble_", "=", "deepcopy", "(", "sampler_config_ensemble", ")", "\n", "config_ensemble", "=", "[", "]", "\n", "# e.g., input: [{\"method\": \"ppr\", \"k\": [50, 10]}, {\"method\": \"khop\", \"depth\": [2], \"budget\": [10]}]", "\n", "#       output: [{\"method\": \"ppr\", \"k\": 50}, {\"method\": \"ppr\", \"k\": 10}, {\"method\": \"khop\", \"depth\": 2, \"budget\": 10}]", "\n", "for", "cfg", "in", "sampler_config_ensemble_", "[", "\"configs\"", "]", ":", "# different TYPEs of samplers", "\n", "            ", "method", "=", "cfg", ".", "pop", "(", "'method'", ")", "\n", "cnt_cur_sampler", "=", "[", "len", "(", "v", ")", "for", "k", ",", "v", "in", "cfg", ".", "items", "(", ")", "]", "\n", "assert", "len", "(", "cnt_cur_sampler", ")", "==", "0", "or", "max", "(", "cnt_cur_sampler", ")", "==", "min", "(", "cnt_cur_sampler", ")", "\n", "cnt_cur_sampler", "=", "1", "if", "len", "(", "cnt_cur_sampler", ")", "==", "0", "else", "cnt_cur_sampler", "[", "0", "]", "\n", "cfg", "[", "'method'", "]", "=", "[", "method", "]", "*", "cnt_cur_sampler", "\n", "cfg_decoupled", "=", "[", "{", "k", ":", "v", "[", "i", "]", "for", "k", ",", "v", "in", "cfg", ".", "items", "(", ")", "}", "for", "i", "in", "range", "(", "cnt_cur_sampler", ")", "]", "\n", "config_ensemble", ".", "extend", "(", "cfg_decoupled", ")", "\n", "", "self", ".", "num_ensemble", "=", "len", "(", "config_ensemble", ")", "\n", "for", "cfg", "in", "config_ensemble", ":", "\n", "            ", "assert", "\"method\"", "in", "cfg", "\n", "assert", "\"size_root\"", "not", "in", "cfg", "or", "cfg", "[", "\"size_root\"", "]", "==", "1", "\n", "", "config_ensemble_mode", "=", "{", "}", "\n", "for", "m", "in", "modes", ":", "\n", "            ", "self", ".", "batch_size", "[", "m", "]", "=", "sampler_config_ensemble_", "[", "\"batch_size\"", "]", "\n", "config_ensemble_mode", "[", "m", "]", "=", "deepcopy", "(", "config_ensemble", ")", "\n", "# TODO: support different sampler config in val and test", "\n", "", "for", "m", ",", "cfg_l", "in", "config_ensemble_mode", ".", "items", "(", ")", ":", "\n", "            ", "if", "m", "in", "[", "VALID", ",", "TEST", "]", ":", "\n", "                ", "for", "cfg", "in", "cfg_l", ":", "\n", "                    ", "if", "cfg", "[", "'method'", "]", "==", "'ppr_st'", ":", "\n", "                        ", "cfg", "[", "'method'", "]", "=", "'ppr'", "\n", "", "", "", "", "for", "cfg_mode", ",", "cfg_ensemble", "in", "config_ensemble_mode", ".", "items", "(", ")", ":", "\n", "            ", "for", "cfg", "in", "cfg_ensemble", ":", "\n", "                ", "cfg", "[", "\"size_root\"", "]", "=", "1", "+", "(", "self", ".", "prediction_task", "==", "'link'", ")", "# we want each target to have its own subgraph", "\n", "cfg", "[", "\"fix_target\"", "]", "=", "True", "# i.e., we differentiate root node from the neighbor nodes (compare with GraphSAINT)", "\n", "cfg", "[", "\"sequential_traversal\"", "]", "=", "True", "# (mode != \"train\")", "\n", "if", "self", ".", "prediction_task", "==", "'link'", ":", "\n", "                    ", "cfg", "[", "'include_target_conn'", "]", "=", "False", "\n", "", "if", "cfg", "[", "\"method\"", "]", "in", "[", "\"ppr\"", ",", "'ppr_st'", "]", ":", "\n", "                    ", "cfg", "[", "\"type_\"", "]", "=", "cfg_mode", "\n", "cfg", "[", "'name_data'", "]", "=", "self", ".", "name_data", "\n", "cfg", "[", "\"dir_data\"", "]", "=", "self", ".", "dir_data", "\n", "cfg", "[", "'is_transductive'", "]", "=", "self", ".", "is_transductive", "\n", "if", "self", ".", "prediction_task", "==", "'node'", ":", "\n", "                        ", "_prep_target", "=", "self", ".", "raw_entity_set", "[", "cfg_mode", "]", "\n", "_dup_modes", "=", "None", "\n", "", "else", ":", "\n", "                        ", "_prep_target", "=", "np", ".", "arange", "(", "self", ".", "adj", "[", "TEST", "]", ".", "indptr", ".", "size", "-", "1", ")", "\n", "_dup_modes", "=", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", "\n", "", "cfg", "[", "'args_preproc'", "]", "=", "{", "'preproc_targets'", ":", "_prep_target", ",", "'duplicate_modes'", ":", "_dup_modes", "}", "\n", "", "", "aug_feat_ens", "=", "[", "self", ".", "aug_feats", "]", "*", "len", "(", "cfg_ensemble", ")", "\n", "self", ".", "graph_sampler", "[", "cfg_mode", "]", "=", "GraphSamplerEnsemble", "(", "\n", "self", ".", "adj", "[", "cfg_mode", "]", ",", "\n", "self", ".", "feat_full", "[", ":", ",", ":", "self", ".", "dim_feat_raw", "]", ",", "\n", "cfg_ensemble", ",", "\n", "aug_feat_ens", ",", "\n", "max_num_threads", "=", "parallelism", ",", "\n", "num_subg_per_batch", "=", "500", ",", "\n", "bin_adj_files", "=", "bin_adj_files", "[", "cfg_mode", "]", ",", "\n", "seed_cpp", "=", "self", ".", "seed_cpp", "\n", ")", "\n", "self", ".", "is_stochastic_sampler", "[", "cfg_mode", "]", "=", "self", ".", "graph_sampler", "[", "cfg_mode", "]", ".", "is_stochastic", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.par_graph_sample": [[403, 427], ["minibatch.MinibatchShallowExtractor.graph_sampler[].par_sample_ensemble", "enumerate", "minibatch.MinibatchShallowExtractor.pool_subg[].add", "minibatch.MinibatchShallowExtractor.cache_subg[].set", "subg_ens_l.append", "minibatch.MinibatchShallowExtractor.cache_subg[].get"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.par_sample_ensemble", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.PoolSubgraph.add", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.get"], ["", "", "def", "par_graph_sample", "(", "self", ",", "mode", ")", ":", "\n", "        ", "\"\"\"\n        Perform graph sampling in parallel. A wrapper function for graph_samplers.py\n        \"\"\"", "\n", "subg_ens_l_raw", "=", "self", ".", "graph_sampler", "[", "mode", "]", ".", "par_sample_ensemble", "(", "self", ".", "prediction_task", ")", "\n", "for", "i", ",", "subg_l_raw", "in", "enumerate", "(", "subg_ens_l_raw", ")", ":", "\n", "            ", "subg_ens_l", "=", "None", "\n", "if", "self", ".", "record_subgraphs", "[", "mode", "]", "[", "i", "]", "==", "\"record\"", ":", "\n", "                ", "for", "subg", "in", "subg_l_raw", ":", "\n", "                    ", "assert", "subg", ".", "target", ".", "size", "==", "1", "\n", "id_root", "=", "subg", ".", "node", "[", "subg", ".", "target", "]", "[", "0", "]", "\n", "self", ".", "cache_subg", "[", "mode", "]", ".", "set", "(", "i", ",", "id_root", ",", "subg", ")", "\n", "", "subg_ens_l", "=", "subg_l_raw", "\n", "", "elif", "self", ".", "record_subgraphs", "[", "mode", "]", "[", "i", "]", "==", "\"reuse\"", ":", "\n", "                ", "subg_ens_l", "=", "[", "]", "\n", "for", "subg", "in", "subg_l_raw", ":", "\n", "                    ", "assert", "subg", ".", "node", ".", "size", "==", "1", "\n", "id_root", "=", "subg", ".", "node", "[", "0", "]", "\n", "subg_ens_l", ".", "append", "(", "self", ".", "cache_subg", "[", "mode", "]", ".", "get", "(", "i", ",", "id_root", ")", ")", "\n", "", "", "elif", "self", ".", "record_subgraphs", "[", "mode", "]", "[", "i", "]", "in", "[", "'noncache'", ",", "'none'", "]", ":", "\n", "                ", "subg_ens_l", "=", "subg_l_raw", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "self", ".", "pool_subg", "[", "mode", "]", ".", "add", "(", "i", ",", "subg_ens_l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.one_batch": [[428, 488], ["minibatch.MinibatchShallowExtractor._get_cur_batch_size", "minibatch.MinibatchShallowExtractor.pool_subg[].collate", "torch.tensor().to", "minibatch.MinibatchShallowExtractor._update_batch_stat", "minibatch.OneBatchSubgraph", "minibatch.MinibatchShallowExtractor.profiler.update_subgraph_batch", "minibatch.MinibatchShallowExtractor.profiler.profile", "minibatch.MinibatchShallowExtractor._update_batch_stat", "minibatch.OneBatchSubgraph", "minibatch.MinibatchShallowExtractor.par_graph_sample", "minibatch.MinibatchShallowExtractor.graph_sampler[].validate_epoch_end", "adj_ens.append", "feat_ens.append", "target_ens.append", "[].to", "feat_aug_ens.append", "torch.tensor", "numpy.all", "subgs.to_csr_sp", "minibatch.MinibatchShallowExtractor.feat_full[].to", "numpy.arange", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor._get_cur_batch_size", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.PoolSubgraph.collate", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor._update_batch_stat", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.profiler.SubgraphProfiler.update_subgraph_batch", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.profiler.SubgraphProfiler.profile", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor._update_batch_stat", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.par_graph_sample", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.validate_epoch_end", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.Subgraph.to_csr_sp", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to"], ["", "", "def", "one_batch", "(", "self", ",", "mode", "=", "TRAIN", ",", "ret_raw_idx", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Prepare one batch of training subgraph. For each root, the sampler returns the subgraph adj separatedly. \n        To improve the computation efficiency, we concatenate the batch number of individual adj into a single big adj. \n        i.e., the resulting adj is of the block-diagnol form. \n        \n        Such concatenation does not increase computation complexity (since adj is in CSR) but facilitates parallelism. \n        \"\"\"", "\n", "if", "self", ".", "graph_sampler", "[", "mode", "]", "is", "None", ":", "# [node pred only] no sampling, return the full graph. ", "\n", "            ", "self", ".", "_update_batch_stat", "(", "mode", ",", "self", ".", "batch_size", "[", "mode", "]", ")", "\n", "targets", "=", "self", ".", "raw_entity_set", "[", "mode", "]", "\n", "assert", "ret_raw_idx", ",", "\"None subg mode should only be used in preproc!\"", "\n", "return", "OneBatchSubgraph", "(", "\n", "[", "self", ".", "adj", "[", "mode", "]", "]", ",", "\n", "[", "self", ".", "feat_full", "]", ",", "\n", "self", ".", "label_full", "[", "targets", "]", ",", "\n", "None", ",", "\n", "[", "targets", "]", ",", "\n", "None", ",", "\n", "[", "np", ".", "arange", "(", "self", ".", "adj", "[", "mode", "]", ".", "shape", "[", "0", "]", ")", "]", "\n", ")", "\n", "", "batch_size_", "=", "self", ".", "_get_cur_batch_size", "(", "mode", ")", "\n", "while", "self", ".", "pool_subg", "[", "mode", "]", ".", "num_subg", "<", "batch_size_", ":", "\n", "            ", "self", ".", "par_graph_sample", "(", "mode", ")", "\n", "", "if", "batch_size_", "!=", "self", ".", "batch_size", "[", "mode", "]", ":", "# end of epoch", "\n", "            ", "assert", "batch_size_", "<", "self", ".", "batch_size", "[", "mode", "]", "and", "self", ".", "pool_subg", "[", "mode", "]", ".", "num_subg", "==", "batch_size_", "\n", "self", ".", "graph_sampler", "[", "mode", "]", ".", "validate_epoch_end", "(", ")", "\n", "", "adj_ens", ",", "feat_ens", ",", "target_ens", ",", "feat_aug_ens", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "label_idx", "=", "None", "\n", "subgs_ens", ",", "size_subg_ens", "=", "self", ".", "pool_subg", "[", "mode", "]", ".", "collate", "(", "batch_size_", ")", "\n", "size_subg_ens", "=", "torch", ".", "tensor", "(", "size_subg_ens", ")", ".", "to", "(", "self", ".", "dev_torch", ")", "\n", "feat_aug_ens", "=", "[", "]", "\n", "idx_b_start", "=", "self", ".", "idx_entity_evaluated", "[", "mode", "]", "\n", "idx_b_end", "=", "idx_b_start", "+", "batch_size_", "\n", "for", "subgs", "in", "subgs_ens", ":", "\n", "            ", "assert", "subgs", ".", "target", ".", "size", "==", "batch_size_", "*", "(", "1", "+", "(", "self", ".", "prediction_task", "==", "'link'", ")", ")", "\n", "if", "label_idx", "is", "None", ":", "\n", "                ", "label_idx", "=", "subgs", ".", "node", "[", "subgs", ".", "target", "]", "\n", "", "else", ":", "\n", "                ", "assert", "np", ".", "all", "(", "label_idx", "==", "subgs", ".", "node", "[", "subgs", ".", "target", "]", ")", "\n", "", "adj_ens", ".", "append", "(", "subgs", ".", "to_csr_sp", "(", ")", ")", "\n", "feat_ens", ".", "append", "(", "self", ".", "feat_full", "[", "subgs", ".", "node", "]", ".", "to", "(", "self", ".", "dev_torch", ")", ")", "\n", "target_ens", ".", "append", "(", "subgs", ".", "target", ")", "\n", "label_batch", "=", "self", ".", "label_epoch", "[", "mode", "]", "[", "idx_b_start", ":", "idx_b_end", "]", ".", "to", "(", "self", ".", "dev_torch", ")", "\n", "feat_aug_ens", ".", "append", "(", "{", "}", ")", "\n", "for", "candy_augs", "in", "{", "'hops'", ",", "'pprs'", ",", "'drnls'", "}", ".", "intersection", "(", "self", ".", "aug_feats", ")", ":", "\n", "                ", "candy_aug", "=", "candy_augs", "[", ":", "-", "1", "]", "# remove 's'", "\n", "feat_aug_ens", "[", "-", "1", "]", "[", "candy_augs", "]", "=", "getattr", "(", "subgs", ".", "entity_enc", ",", "f'{candy_aug}2onehot_vec'", ")", "(", "\n", "getattr", "(", "self", ",", "f'dim_1hot_{candy_aug}'", ")", ",", "return_type", "=", "'tensor'", "\n", ")", ".", "type", "(", "self", ".", "dtype", ")", ".", "to", "(", "self", ".", "dev_torch", ")", "\n", "", "", "self", ".", "_update_batch_stat", "(", "mode", ",", "batch_size_", ")", "\n", "ret", "=", "OneBatchSubgraph", "(", "\n", "adj_ens", ",", "feat_ens", ",", "label_batch", ",", "size_subg_ens", ",", "target_ens", ",", "feat_aug_ens", "\n", ")", "\n", "self", ".", "profiler", ".", "update_subgraph_batch", "(", "ret", ")", "\n", "self", ".", "profiler", ".", "profile", "(", ")", "\n", "if", "ret_raw_idx", ":", "# TODO: this should support ens as well. multiple subg should have the same raw target idx", "\n", "            ", "assert", "ret", ".", "num_ens", "==", "1", "\n", "ret", ".", "idx_raw", "=", "[", "subgs", ".", "node", "for", "subgs", "in", "subgs_ens", "]", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.disable_cache": [[489, 493], ["minibatch.MinibatchShallowExtractor.nocache_modes.add"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.PoolSubgraph.add"], ["", "def", "disable_cache", "(", "self", ",", "mode", ")", ":", "\n", "        ", "if", "self", ".", "mode_sample", "is", "not", "self", ".", "FULL", ":", "\n", "            ", "self", ".", "record_subgraphs", "[", "mode", "]", "=", "[", "'noncache'", "]", "*", "self", ".", "num_ensemble", "\n", "self", ".", "nocache_modes", ".", "add", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.MinibatchShallowExtractor.get_aug_dim": [[494, 496], ["getattr"], "methods", ["None"], ["", "", "def", "get_aug_dim", "(", "self", ",", "aug_type", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "f'dim_1hot_{aug_type[:-1]}'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ModelPostEns.__init__": [[19, 48], ["torch.nn.Module.__init__", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "shaDow.EnsembleDummy", "shaDow.EnsembleAggregator", "postproc_ens.ModelPostEns.parameters"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dim_in", ",", "\n", "num_classes", ",", "\n", "arch_gnn", ",", "\n", "num_ensemble", ",", "\n", "config_param", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_in", "=", "dim_in", "\n", "self", ".", "dim_hid", "=", "arch_gnn", "[", "'dim'", "]", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_layers", "=", "1", "if", "'num_layers'", "not", "in", "arch_gnn", "else", "arch_gnn", "[", "'num_layers'", "]", "\n", "self", ".", "num_ensemble", "=", "num_ensemble", "\n", "act", "=", "arch_gnn", "[", "'act'", "]", "\n", "if", "num_ensemble", "==", "1", ":", "\n", "            ", "self", ".", "ensembler", "=", "layers", ".", "EnsembleDummy", "(", ")", "\n", "", "else", ":", "# you may also support other types", "\n", "            ", "self", ".", "ensembler", "=", "layers", ".", "EnsembleAggregator", "(", "\n", "self", ".", "dim_in", ",", "\n", "self", ".", "dim_hid", ",", "\n", "num_ensemble", ",", "\n", "act", "=", "act", ",", "\n", "dropout", "=", "config_param", "[", "'dropout'", "]", ",", "\n", "type_dropout", "=", "config_param", "[", "'ensemble_dropout'", "]", "\n", ")", "# NOTE the output dim is dim_in, not dim_hid", "\n", "", "self", ".", "classifier", "=", "DeepGNN", ".", "NAME2CLS", "[", "'mlp'", "]", "(", "self", ".", "dim_in", ",", "self", ".", "num_classes", ",", "act", "=", "'I'", ",", "dropout", "=", "0.", ")", "\n", "self", ".", "sigmoid_loss", "=", "arch_gnn", "[", "'loss'", "]", "==", "'sigmoid'", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "config_param", "[", "'lr'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ModelPostEns._loss": [[49, 57], ["len", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "_loss", "(", "self", ",", "preds", ",", "labels", ")", ":", "\n", "        ", "if", "self", ".", "sigmoid_loss", ":", "\n", "            ", "assert", "preds", ".", "shape", "==", "labels", ".", "shape", "\n", "return", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "(", "preds", ",", "labels", ")", "*", "preds", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "labels", ".", "shape", ")", "==", "2", ":", "# flatten to 1D", "\n", "                ", "labels", "=", "torch", ".", "max", "(", "labels", ",", "axis", "=", "1", ")", "[", "1", "]", "# this can handle both bool and float types", "\n", "", "return", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "preds", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ModelPostEns.forward": [[58, 61], ["postproc_ens.ModelPostEns.ensembler", "postproc_ens.ModelPostEns.classifier"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "emb_in", ")", ":", "\n", "        ", "emb_ens", "=", "self", ".", "ensembler", "(", "emb_in", ")", "\n", "return", "self", ".", "classifier", "(", "emb_ens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ModelPostEns.step": [[62, 86], ["all", "len", "torch.one_hot", "torch.one_hot", "postproc_ens.ModelPostEns.train", "postproc_ens.ModelPostEns.optimizer.zero_grad", "postproc_ens.ModelPostEns.", "postproc_ens.ModelPostEns._loss", "postproc_ens.ModelPostEns.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "postproc_ens.ModelPostEns.optimizer.step", "postproc_ens.ModelPostEns.eval", "postproc_ens.ModelPostEns.predict", "torch.one_hot.to", "postproc_ens.ModelPostEns.parameters", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "postproc_ens.ModelPostEns.", "postproc_ens.ModelPostEns._loss"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.main.train", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ModelPostEns._loss", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ModelPostEns.step", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ModelPostEns.predict", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ModelPostEns._loss"], ["", "def", "step", "(", "self", ",", "mode", ",", "status", ",", "emb_in", ",", "labels", ")", ":", "\n", "        ", "assert", "status", "in", "[", "'running'", ",", "'final'", "]", "\n", "assert", "all", "(", "[", "e", ".", "shape", "[", "0", "]", "==", "labels", ".", "shape", "[", "0", "]", "for", "e", "in", "emb_in", "]", ")", "\n", "if", "len", "(", "labels", ".", "shape", ")", "==", "1", ":", "\n", "            ", "labels", "=", "F", ".", "one_hot", "(", "labels", ".", "to", "(", "torch", ".", "int64", ")", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "", "if", "mode", "==", "TRAIN", "and", "status", "==", "'running'", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "preds", "=", "self", "(", "emb_in", ")", "\n", "loss", "=", "self", ".", "_loss", "(", "preds", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "parameters", "(", ")", ",", "5", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "preds", "=", "self", "(", "emb_in", ")", "\n", "loss", "=", "self", ".", "_loss", "(", "preds", ",", "labels", ")", "\n", "", "", "assert", "preds", ".", "shape", "[", "0", "]", "==", "labels", ".", "shape", "[", "0", "]", "\n", "return", "{", "\n", "'batch_size'", ":", "preds", ".", "shape", "[", "0", "]", ",", "\n", "'loss'", ":", "loss", ",", "\n", "'labels'", ":", "labels", ",", "\n", "'preds'", ":", "self", ".", "predict", "(", "preds", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ModelPostEns.predict": [[88, 90], ["torch.softmax", "torch.softmax", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "preds", ")", ":", "\n", "        ", "return", "nn", ".", "Sigmoid", "(", ")", "(", "preds", ")", "if", "self", ".", "sigmoid_loss", "else", "F", ".", "softmax", "(", "preds", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.__init__": [[93, 100], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "node_set", ",", "batch_size", ",", "emb_l", ",", "label", ")", ":", "\n", "        ", "self", ".", "node_set", "=", "node_set", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "emb_l", "=", "emb_l", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "num_targets_evaluated", "=", "{", "TRAIN", ":", "0", ",", "VALID", ":", "0", ",", "TEST", ":", "0", "}", "\n", "self", ".", "batch_num", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to": [[101, 118], ["range", "postproc_ens.MinibatchPostEns.node_set.items", "postproc_ens.MinibatchPostEns.label.to", "len", "type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "e.to", "v.to", "type", "type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "postproc_ens.MinibatchPostEns.node_set.items", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "\"\"\"\n        Mimic the .to() function of torch.nn.Module\n        \"\"\"", "\n", "# TODO: set tensor dtype by torch.get_default_dtype", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "emb_l", ")", ")", ":", "\n", "            ", "if", "type", "(", "self", ".", "emb_l", "[", "i", "]", ")", "==", "np", ".", "ndarray", ":", "\n", "                ", "self", ".", "emb_l", "[", "i", "]", "-", "torch", ".", "from_numpy", "(", "self", ".", "emb_l", "[", "i", "]", ")", "\n", "", "", "if", "type", "(", "self", ".", "label", ")", "==", "np", ".", "ndarray", ":", "\n", "            ", "self", ".", "label", "=", "torch", ".", "from_numpy", "(", "self", ".", "label", ")", "\n", "", "for", "k", ",", "v", "in", "self", ".", "node_set", ".", "items", "(", ")", ":", "\n", "            ", "if", "type", "(", "v", ")", "==", "np", ".", "ndarray", ":", "\n", "                ", "self", ".", "node_set", "[", "k", "]", "=", "torch", ".", "from_numpy", "(", "v", ")", "\n", "", "", "self", ".", "emb_l", "=", "[", "e", ".", "to", "(", "device", ")", "for", "e", "in", "self", ".", "emb_l", "]", "\n", "self", ".", "label", "=", "self", ".", "label", ".", "to", "(", "device", ")", "\n", "self", ".", "node_set", "=", "{", "k", ":", "v", ".", "to", "(", "device", ")", "for", "k", ",", "v", "in", "self", ".", "node_set", ".", "items", "(", ")", "}", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.shuffle": [[119, 122], ["torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "postproc_ens.MinibatchPostEns.node_set[].size"], "methods", ["None"], ["", "def", "shuffle", "(", "self", ",", "mode", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "randperm", "(", "self", ".", "node_set", "[", "mode", "]", ".", "size", "(", "0", ")", ")", "\n", "self", ".", "node_set", "[", "mode", "]", "=", "self", ".", "node_set", "[", "mode", "]", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.epoch_start_reset": [[123, 126], ["None"], "methods", ["None"], ["", "def", "epoch_start_reset", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "num_targets_evaluated", "[", "mode", "]", "=", "0", "\n", "self", ".", "batch_num", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.is_end_epoch": [[127, 129], ["postproc_ens.MinibatchPostEns.node_set[].size"], "methods", ["None"], ["", "def", "is_end_epoch", "(", "self", ",", "mode", ")", ":", "\n", "        ", "return", "self", ".", "num_targets_evaluated", "[", "mode", "]", ">=", "self", ".", "node_set", "[", "mode", "]", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.one_batch": [[130, 139], ["min", "postproc_ens.MinibatchPostEns.node_set[].size"], "methods", ["None"], ["", "def", "one_batch", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "batch_num", "+=", "1", "\n", "idx_start", "=", "self", ".", "num_targets_evaluated", "[", "mode", "]", "\n", "idx_end", "=", "min", "(", "idx_start", "+", "self", ".", "batch_size", ",", "self", ".", "node_set", "[", "mode", "]", ".", "size", "(", "0", ")", ")", "\n", "nodes_batch", "=", "self", ".", "node_set", "[", "mode", "]", "[", "idx_start", ":", "idx_end", "]", "\n", "emb_batch", "=", "[", "e", "[", "nodes_batch", "]", "for", "e", "in", "self", ".", "emb_l", "]", "\n", "label_batch", "=", "self", ".", "label", "[", "nodes_batch", "]", "\n", "self", ".", "num_targets_evaluated", "[", "mode", "]", "=", "idx_end", "\n", "return", "emb_batch", ",", "label_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ensemble": [[142, 163], ["len", "logger.reset", "all", "ModelPostEns().to", "postproc_ens.MinibatchPostEns.to", "range", "logger.printf", "logger.restore_model", "logger.validate_result", "logger.update_best_model", "postproc_ens.one_epoch_ens", "len", "label.max", "postproc_ens.ModelPostEns", "postproc_ens.MinibatchPostEns", "postproc_ens.one_epoch_ens", "acc_ret.items"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.reset", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.restore_model", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.validate_result", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.update_best_model", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.one_epoch_ens", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.one_epoch_ens"], ["", "", "def", "ensemble", "(", "node_set", ",", "emb_l", ",", "label", ",", "config_arch", ",", "config_param", ",", "logger", ",", "device", ")", ":", "\n", "    ", "num_ensemble", "=", "len", "(", "emb_l", ")", "\n", "logger", ".", "reset", "(", ")", "\n", "assert", "all", "(", "e", ".", "shape", "==", "emb_l", "[", "0", "]", ".", "shape", "for", "e", "in", "emb_l", ")", "\n", "dim_in", "=", "emb_l", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "num_classes", "=", "label", ".", "max", "(", ")", "+", "1", "if", "len", "(", "label", ".", "shape", ")", "==", "1", "else", "label", ".", "shape", "[", "1", "]", "\n", "model", "=", "ModelPostEns", "(", "dim_in", ",", "num_classes", ",", "config_arch", ",", "num_ensemble", ",", "config_param", ")", ".", "to", "(", "device", ")", "\n", "minibatch", "=", "MinibatchPostEns", "(", "node_set", ",", "config_param", "[", "'batch_size'", "]", ",", "emb_l", ",", "label", ")", ".", "to", "(", "device", ")", "\n", "for", "ep", "in", "range", "(", "config_param", "[", "'end'", "]", ")", ":", "\n", "        ", "for", "md", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", ":", "\n", "            ", "one_epoch_ens", "(", "ep", ",", "md", ",", "model", ",", "minibatch", ",", "logger", ",", "'running'", ")", "\n", "", "logger", ".", "update_best_model", "(", "ep", ",", "model", ",", "model", ".", "optimizer", ")", "\n", "", "logger", ".", "printf", "(", "(", "\"= = = = = = = = = = = = = = = = = = =\\n\"", "\n", "\"Optimization on [Ensembler] Finished!\\n\"", "\n", "\"= = = = = = = = = = = = = = = = = = =\\n\"", ")", ",", "style", "=", "\"red\"", ")", "\n", "logger", ".", "restore_model", "(", "model", ",", "optimizer", "=", "None", ")", "\n", "acc_ret", "=", "{", "}", "\n", "for", "md", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", ":", "\n", "        ", "acc_ret", "[", "md", "]", "=", "one_epoch_ens", "(", "ep", "+", "1", ",", "md", ",", "model", ",", "minibatch", ",", "logger", ",", "'final'", ")", "\n", "", "logger", ".", "validate_result", "(", "stochastic_sampler", "=", "{", "md", ":", "False", "for", "md", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", "}", ")", "\n", "return", "{", "md", ":", "a", "[", "'accuracy'", "]", "for", "md", ",", "a", "in", "acc_ret", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ensemble_multirun": [[165, 176], ["zip", "list", "logger.printf", "range", "postproc_ens._merge_stat", "list", "itertools.chain.from_iterable", "logger.printf", "acc_ens.append", "postproc_ens._decode_orig_acc", "zip.values", "postproc_ens.ensemble"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_CnS._merge_stat", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.printf", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens._decode_orig_acc", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ensemble"], ["", "def", "ensemble_multirun", "(", "node_set", ",", "emb_pipeline", ",", "label", ",", "config_arch", ",", "config_param", ",", "logger", ",", "device", ",", "acc_record", ")", ":", "\n", "    ", "REPEAT_SINGLE_PAIR", "=", "2", "if", "'repeat_per_emb'", "not", "in", "config_param", "else", "config_param", "[", "'repeat_per_emb'", "]", "\n", "emb_pipeline", "=", "zip", "(", "*", "list", "(", "emb_pipeline", ".", "values", "(", ")", ")", ")", "\n", "acc_ens", "=", "[", "]", "\n", "for", "es", "in", "emb_pipeline", ":", "\n", "        ", "es_flatten", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "es", ")", ")", "\n", "logger", ".", "printf", "(", "\">>>>>>>>>>>>>>>>>>>\"", ",", "style", "=", "'red'", ")", "\n", "for", "ir", "in", "range", "(", "REPEAT_SINGLE_PAIR", ")", ":", "\n", "            ", "logger", ".", "printf", "(", "\">>>>>>>>>>>>>>>>>>>\"", ",", "style", "=", "'red'", ")", "\n", "acc_ens", ".", "append", "(", "ensemble", "(", "node_set", ",", "es_flatten", ",", "label", ",", "config_arch", ",", "config_param", ",", "logger", ",", "device", ")", ")", "\n", "", "", "return", "_decode_orig_acc", "(", "acc_record", ")", "[", "'accuracy'", "]", ",", "_merge_stat", "(", "acc_ens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.one_epoch_ens": [[178, 191], ["minibatch.epoch_start_reset", "minibatch.shuffle", "logger.epoch_start_reset", "time.time", "time.time", "logger.update_epoch", "logger.log_key_step", "minibatch.node_set[].size", "minibatch.is_end_epoch", "model.step", "logger.update_batch", "minibatch.one_batch"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.epoch_start_reset", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.shuffle", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.epoch_start_reset", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.update_epoch", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.log_key_step", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.is_end_epoch", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.ModelPostEns.step", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.update_batch", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.one_batch"], ["", "def", "one_epoch_ens", "(", "ep", ",", "mode", ",", "model", ",", "minibatch", ",", "logger", ",", "status", "=", "'running'", ")", ":", "\n", "    ", "assert", "status", "in", "[", "'running'", ",", "'final'", "]", "\n", "assert", "mode", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", "\n", "minibatch", ".", "epoch_start_reset", "(", "mode", ")", "\n", "minibatch", ".", "shuffle", "(", "mode", ")", "\n", "logger", ".", "epoch_start_reset", "(", "ep", ",", "mode", ",", "minibatch", ".", "node_set", "[", "mode", "]", ".", "size", "(", "0", ")", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "while", "not", "minibatch", ".", "is_end_epoch", "(", "mode", ")", ":", "\n", "        ", "output_batch", "=", "model", ".", "step", "(", "mode", ",", "status", ",", "*", "minibatch", ".", "one_batch", "(", "mode", ")", ")", "\n", "logger", ".", "update_batch", "(", "mode", ",", "minibatch", ".", "batch_num", ",", "output_batch", ")", "\n", "", "t2", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "update_epoch", "(", "ep", ",", "mode", ")", "\n", "return", "logger", ".", "log_key_step", "(", "mode", ",", "status", "=", "status", ",", "time", "=", "t2", "-", "t1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens._merge_stat": [[193, 201], ["all", "set", "d.items", "d.keys", "ret[].append"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set"], ["", "def", "_merge_stat", "(", "dict_l", ":", "List", "[", "dict", "]", ")", ":", "\n", "    ", "key_l", "=", "[", "set", "(", "d", ".", "keys", "(", ")", ")", "for", "d", "in", "dict_l", "]", "\n", "assert", "all", "(", "k", "==", "key_l", "[", "0", "]", "for", "k", "in", "key_l", ")", "\n", "ret", "=", "{", "k", ":", "[", "]", "for", "k", "in", "key_l", "[", "0", "]", "}", "\n", "for", "d", "in", "dict_l", ":", "\n", "        ", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "            ", "ret", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens._decode_orig_acc": [[202, 215], ["list", "zip", "[].keys", "dict_sampler.values", "[].append", "[].append", "min", "max"], "function", ["None"], ["", "def", "_decode_orig_acc", "(", "dict_sampler", ":", "dict", ")", ":", "\n", "    ", "acc_to_merge", "=", "list", "(", "zip", "(", "*", "dict_sampler", ".", "values", "(", ")", ")", ")", "\n", "acc_ret", "=", "{", "k", ":", "{", "TRAIN", ":", "[", "]", ",", "VALID", ":", "[", "]", ",", "TEST", ":", "[", "]", "}", "for", "k", "in", "acc_to_merge", "[", "0", "]", "[", "0", "]", "[", "TRAIN", "]", ".", "keys", "(", ")", "}", "\n", "for", "acc_pair", "in", "acc_to_merge", ":", "\n", "        ", "for", "md", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", ":", "\n", "            ", "acc_metric", "=", "[", "p", "[", "md", "]", "for", "p", "in", "acc_pair", "]", "\n", "for", "k", "in", "acc_ret", ":", "\n", "                ", "candy", "=", "[", "a", "[", "k", "]", "for", "a", "in", "acc_metric", "]", "\n", "if", "k", "==", "'loss'", ":", "\n", "                    ", "acc_ret", "[", "k", "]", "[", "md", "]", ".", "append", "(", "min", "(", "candy", ")", ")", "\n", "", "else", ":", "\n", "                    ", "acc_ret", "[", "k", "]", "[", "md", "]", ".", "append", "(", "max", "(", "candy", ")", ")", "\n", "", "", "", "", "return", "acc_ret", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.metric.Metrics.__init__": [[31, 56], ["ogb.nodeproppred.Evaluator", "metric.startswith", "ogb.linkproppred.Evaluator", "eval"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name_data", ":", "str", ",", "is_sigmoid", ":", "bool", ",", "metric", ":", "str", ",", "metric_win_size", ":", "int", ")", ":", "\n", "        ", "self", ".", "window_size", "=", "metric_win_size", "\n", "self", ".", "name_data", "=", "name_data", "\n", "self", ".", "is_sigmoid", "=", "is_sigmoid", "\n", "self", ".", "name", "=", "metric", "\n", "if", "metric", "==", "'f1'", ":", "\n", "            ", "self", ".", "calc", "=", "self", ".", "_calc_f1", "\n", "self", ".", "is_better", "=", "self", ".", "_is_better_f1", "\n", "self", ".", "metric_term", "=", "(", "'f1mic'", ",", "'max'", ")", "# if terminate by multiple metrics, then [('f1mic', 'max'), ('f1mac', 'max')]", "\n", "", "elif", "metric", "==", "'accuracy'", ":", "\n", "            ", "self", ".", "calc", "=", "self", ".", "_calc_accuracy", "\n", "self", ".", "is_better", "=", "self", ".", "_is_better_accuracy", "\n", "self", ".", "metric_term", "=", "(", "'accuracy'", ",", "'max'", ")", "\n", "", "elif", "metric", "==", "'accuracy_ogb'", ":", "\n", "            ", "self", ".", "evaluator", "=", "Evaluator_n", "(", "name", "=", "self", ".", "full_graph_name", "[", "name_data", "]", ")", "\n", "self", ".", "calc", "=", "self", ".", "_calc_accuracy_ogb", "\n", "self", ".", "is_better", "=", "self", ".", "_is_better_accuracy", "\n", "self", ".", "metric_term", "=", "(", "'accuracy'", ",", "'max'", ")", "\n", "", "elif", "metric", ".", "startswith", "(", "'hits'", ")", ":", "\n", "            ", "self", ".", "evaluator", "=", "Evaluator_l", "(", "name", "=", "self", ".", "full_graph_name", "[", "name_data", "]", ")", "\n", "self", ".", "calc", "=", "self", ".", "_calc_hits", "\n", "self", ".", "is_better", "=", "eval", "(", "f\"self._is_better_{metric}\"", ")", "\n", "self", ".", "metric_term", "=", "(", "metric", ",", "'max'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.metric.Metrics._calc_f1": [[58, 74], ["numpy.argmax", "numpy.argmax", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score"], "methods", ["None"], ["", "", "def", "_calc_f1", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "\"\"\"\n        Compute F1-score (micro- and macro averaged for multiple classes).\n\n        NOTE: for the case of each node having a single label (e.g., ogbn-arxiv),\n            F1-micro score is equivalent to accuracy. \n        \"\"\"", "\n", "if", "not", "self", ".", "is_sigmoid", ":", "\n", "            ", "y_true", "=", "np", ".", "argmax", "(", "y_true", ",", "axis", "=", "1", ")", "\n", "y_pred", "=", "np", ".", "argmax", "(", "y_pred", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "y_pred", "[", "y_pred", ">", "0.5", "]", "=", "1", "\n", "y_pred", "[", "y_pred", "<=", "0.5", "]", "=", "0", "\n", "", "return", "{", "\n", "'f1mic'", ":", "metrics", ".", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "\"micro\"", ")", ",", "\n", "'f1mac'", ":", "metrics", ".", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "\"macro\"", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.metric.Metrics._calc_accuracy": [[76, 82], ["numpy.argmax", "numpy.argmax", "sklearn.metrics.f1_score"], "methods", ["None"], ["", "def", "_calc_accuracy", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "y_true", "=", "np", ".", "argmax", "(", "y_true", ",", "axis", "=", "1", ")", "\n", "y_pred", "=", "np", ".", "argmax", "(", "y_pred", ",", "axis", "=", "1", ")", "\n", "# if each node has only 1 ground truth label, accuracy is equivalent to f1-micro", "\n", "return", "{", "\n", "'accuracy'", ":", "metrics", ".", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "\"micro\"", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.metric.Metrics._calc_accuracy_ogb": [[84, 93], ["numpy.argmax", "numpy.argmax", "metric.Metrics.evaluator.eval"], "methods", ["None"], ["", "def", "_calc_accuracy_ogb", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "\"\"\"\n        This function is equivalent to _calc_accuracy. We just do this to conform to the leaderboard requirement\n        \"\"\"", "\n", "y_true", "=", "np", ".", "argmax", "(", "y_true", ",", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "y_pred", "=", "np", ".", "argmax", "(", "y_pred", ",", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "acc", "=", "self", ".", "evaluator", ".", "eval", "(", "{", "'y_true'", ":", "y_true", ",", "'y_pred'", ":", "y_pred", "}", ")", "[", "'acc'", "]", "\n", "return", "{", "\n", "'accuracy'", ":", "acc", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.metric.Metrics._calc_hits": [[95, 105], ["metric.Metrics.evaluator.eval"], "methods", ["None"], ["", "def", "_calc_hits", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "pos_pred", "=", "y_pred", "[", "y_true", "==", "1", "]", "\n", "neg_pred", "=", "y_pred", "[", "y_true", "==", "0", "]", "\n", "ret", "=", "{", "}", "\n", "for", "K", "in", "[", "50", "]", ":", "\n", "            ", "hits_val", "=", "self", ".", "evaluator", ".", "eval", "(", "\n", "{", "'y_pred_pos'", ":", "pos_pred", ",", "'y_pred_neg'", ":", "neg_pred", "}", "\n", ")", "[", "f'hits@{K}'", "]", "\n", "ret", "[", "f'hits{K}'", "]", "=", "hits_val", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.metric.Metrics._is_better_accuracy": [[106, 116], ["len", "len", "sum", "len", "sum", "len"], "methods", ["None"], ["", "def", "_is_better_accuracy", "(", "self", ",", "loss_all", ",", "loss_min_hist", ",", "accuracy_all", ",", "accuracy_max_hist", ")", ":", "\n", "        ", "assert", "len", "(", "loss_all", ")", "==", "len", "(", "accuracy_all", ")", "\n", "window_acc", "=", "accuracy_all", "[", "-", "self", ".", "window_size", ":", "]", "\n", "window_loss", "=", "loss_all", "[", "-", "self", ".", "window_size", ":", "]", "\n", "acc_avg", "=", "sum", "(", "window_acc", ")", "/", "len", "(", "window_acc", ")", "\n", "loss_avg", "=", "sum", "(", "window_loss", ")", "/", "len", "(", "window_loss", ")", "\n", "if", "acc_avg", ">", "accuracy_max_hist", ":", "\n", "            ", "return", "True", ",", "loss_avg", ",", "acc_avg", "\n", "", "else", ":", "\n", "            ", "return", "False", ",", "loss_min_hist", ",", "accuracy_max_hist", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.metric.Metrics._is_better_f1": [[117, 129], ["len", "len", "len", "sum", "len", "sum", "len", "sum", "len"], "methods", ["None"], ["", "", "def", "_is_better_f1", "(", "self", ",", "loss_all", ",", "loss_min_hist", ",", "f1mic_all", ",", "f1mic_max_hist", ",", "f1mac_all", ",", "f1mac_max_hist", ")", ":", "\n", "        ", "assert", "len", "(", "loss_all", ")", "==", "len", "(", "f1mic_all", ")", "==", "len", "(", "f1mac_all", ")", "\n", "window_mic", "=", "f1mic_all", "[", "-", "self", ".", "window_size", ":", "]", "\n", "window_mac", "=", "f1mac_all", "[", "-", "self", ".", "window_size", ":", "]", "\n", "window_loss", "=", "loss_all", "[", "-", "self", ".", "window_size", ":", "]", "\n", "mic_avg", "=", "sum", "(", "window_mic", ")", "/", "len", "(", "window_mic", ")", "\n", "mac_avg", "=", "sum", "(", "window_mac", ")", "/", "len", "(", "window_mac", ")", "\n", "loss_avg", "=", "sum", "(", "window_loss", ")", "/", "len", "(", "window_loss", ")", "\n", "if", "mic_avg", ">", "f1mic_max_hist", ":", "\n", "            ", "return", "True", ",", "loss_avg", ",", "mic_avg", ",", "mac_avg", "\n", "", "else", ":", "\n", "            ", "return", "False", ",", "loss_min_hist", ",", "f1mic_max_hist", ",", "f1mac_max_hist", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.metric.Metrics.__is_better_hits": [[130, 140], ["len", "len", "sum", "len", "sum", "len"], "methods", ["None"], ["", "", "def", "__is_better_hits", "(", "self", ",", "loss_all", ",", "loss_min_hist", ",", "hits_all", ",", "hits_max_hist", ")", ":", "\n", "        ", "assert", "len", "(", "loss_all", ")", "==", "len", "(", "hits_all", ")", "\n", "window_hits", "=", "hits_all", "[", "-", "self", ".", "window_size", ":", "]", "\n", "window_loss", "=", "loss_all", "[", "-", "self", ".", "window_size", ":", "]", "\n", "hits_avg", "=", "sum", "(", "window_hits", ")", "/", "len", "(", "window_hits", ")", "\n", "loss_avg", "=", "sum", "(", "window_loss", ")", "/", "len", "(", "window_loss", ")", "\n", "if", "hits_avg", ">", "hits_max_hist", ":", "\n", "            ", "return", "True", ",", "loss_avg", ",", "hits_avg", "\n", "", "else", ":", "\n", "            ", "return", "False", ",", "loss_min_hist", ",", "hits_max_hist", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.metric.Metrics._is_better_hits20": [[141, 143], ["metric.Metrics.__is_better_hits"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.metric.Metrics.__is_better_hits"], ["", "", "def", "_is_better_hits20", "(", "self", ",", "loss_all", ",", "loss_min_hist", ",", "hits20_all", ",", "hits20_max_hist", ")", ":", "\n", "        ", "return", "self", ".", "__is_better_hits", "(", "loss_all", ",", "loss_min_hist", ",", "hits20_all", ",", "hits20_max_hist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.metric.Metrics._is_better_hits50": [[144, 146], ["metric.Metrics.__is_better_hits"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.metric.Metrics.__is_better_hits"], ["", "def", "_is_better_hits50", "(", "self", ",", "loss_all", ",", "loss_min_hist", ",", "hits50_all", ",", "hits50_max_hist", ")", ":", "\n", "        ", "return", "self", ".", "__is_better_hits", "(", "loss_all", ",", "loss_min_hist", ",", "hits50_all", ",", "hits50_max_hist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.metric.Metrics._is_better_hits100": [[147, 149], ["metric.Metrics.__is_better_hits"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.metric.Metrics.__is_better_hits"], ["", "def", "_is_better_hits100", "(", "self", ",", "loss_all", ",", "loss_min_hist", ",", "hits100_all", ",", "hits100_max_hist", ")", ":", "\n", "        ", "return", "self", ".", "__is_better_hits", "(", "loss_all", ",", "loss_min_hist", ",", "hits100_all", ",", "hits100_max_hist", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_CnS.load_data": [[17, 31], ["ogb.nodeproppred.DglNodePropPredDataset", "ogb.nodeproppred.Evaluator", "ogb.nodeproppred.DglNodePropPredDataset.get_idx_split", "labels.max"], "function", ["None"], ["def", "load_data", "(", "dataset", ")", ":", "\n", "    ", "global", "n_node_feats", ",", "n_classes", "\n", "\n", "data", "=", "DglNodePropPredDataset", "(", "name", "=", "dataset", ")", "\n", "evaluator", "=", "Evaluator", "(", "name", "=", "dataset", ")", "\n", "\n", "splitted_idx", "=", "data", ".", "get_idx_split", "(", ")", "\n", "train_idx", ",", "val_idx", ",", "test_idx", "=", "splitted_idx", "[", "\"train\"", "]", ",", "splitted_idx", "[", "\"valid\"", "]", ",", "splitted_idx", "[", "\"test\"", "]", "\n", "graph", ",", "labels", "=", "data", "[", "0", "]", "\n", "\n", "n_node_feats", "=", "graph", ".", "ndata", "[", "\"feat\"", "]", ".", "shape", "[", "1", "]", "\n", "n_classes", "=", "(", "labels", ".", "max", "(", ")", "+", "1", ")", ".", "item", "(", ")", "\n", "\n", "return", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_CnS.preprocess": [[33, 48], ["postproc_CnS..all_edges", "postproc_CnS..add_edges", "print", "postproc_CnS..remove_self_loop().add_self_loop", "print", "postproc_CnS..create_formats_", "postproc_CnS..remove_self_loop", "postproc_CnS..number_of_edges", "postproc_CnS..number_of_edges"], "function", ["None"], ["", "def", "preprocess", "(", "graph", ")", ":", "\n", "    ", "global", "n_node_feats", "\n", "\n", "# add reverse edges", "\n", "srcs", ",", "dsts", "=", "graph", ".", "all_edges", "(", ")", "\n", "graph", ".", "add_edges", "(", "dsts", ",", "srcs", ")", "\n", "\n", "# add self-loop", "\n", "print", "(", "f\"Total edges before adding self-loop {graph.number_of_edges()}\"", ")", "\n", "graph", "=", "graph", ".", "remove_self_loop", "(", ")", ".", "add_self_loop", "(", ")", "\n", "print", "(", "f\"Total edges after adding self-loop {graph.number_of_edges()}\"", ")", "\n", "\n", "graph", ".", "create_formats_", "(", ")", "\n", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_CnS.general_outcome_correlation": [[50, 78], ["graph.local_scope", "range", "graph.srcdata.update", "graph.update_all", "graph.in_degrees().float().clamp", "torch.pow", "torch.pow", "torch.reshape", "torch.reshape", "dgl.function.copy_u", "dgl.function.mean", "graph.in_degrees().float().clamp", "torch.pow", "torch.pow", "torch.reshape", "torch.reshape", "post_step", "graph.in_degrees().float", "graph.in_degrees().float", "post_step.dim", "post_step.dim", "graph.in_degrees", "graph.in_degrees"], "function", ["None"], ["", "def", "general_outcome_correlation", "(", "graph", ",", "y0", ",", "n_prop", "=", "50", ",", "alpha", "=", "0.8", ",", "use_norm", "=", "False", ",", "post_step", "=", "None", ")", ":", "\n", "    ", "with", "graph", ".", "local_scope", "(", ")", ":", "\n", "        ", "y", "=", "y0", "\n", "for", "_", "in", "range", "(", "n_prop", ")", ":", "\n", "            ", "if", "use_norm", ":", "\n", "                ", "degs", "=", "graph", ".", "in_degrees", "(", ")", ".", "float", "(", ")", ".", "clamp", "(", "min", "=", "1", ")", "\n", "norm", "=", "torch", ".", "pow", "(", "degs", ",", "-", "0.5", ")", "\n", "shp", "=", "norm", ".", "shape", "+", "(", "1", ",", ")", "*", "(", "y", ".", "dim", "(", ")", "-", "1", ")", "\n", "norm", "=", "torch", ".", "reshape", "(", "norm", ",", "shp", ")", "\n", "y", "=", "y", "*", "norm", "\n", "\n", "", "graph", ".", "srcdata", ".", "update", "(", "{", "\"y\"", ":", "y", "}", ")", "\n", "graph", ".", "update_all", "(", "fn", ".", "copy_u", "(", "\"y\"", ",", "\"m\"", ")", ",", "fn", ".", "mean", "(", "\"m\"", ",", "\"y\"", ")", ")", "\n", "y", "=", "graph", ".", "dstdata", "[", "\"y\"", "]", "\n", "\n", "if", "use_norm", ":", "\n", "                ", "degs", "=", "graph", ".", "in_degrees", "(", ")", ".", "float", "(", ")", ".", "clamp", "(", "min", "=", "1", ")", "\n", "norm", "=", "torch", ".", "pow", "(", "degs", ",", "0.5", ")", "\n", "shp", "=", "norm", ".", "shape", "+", "(", "1", ",", ")", "*", "(", "y", ".", "dim", "(", ")", "-", "1", ")", "\n", "norm", "=", "torch", ".", "reshape", "(", "norm", ",", "shp", ")", "\n", "y", "=", "y", "*", "norm", "\n", "\n", "", "y", "=", "alpha", "*", "y", "+", "(", "1", "-", "alpha", ")", "*", "y0", "\n", "\n", "if", "post_step", "is", "not", "None", ":", "\n", "                ", "y", "=", "post_step", "(", "y", ")", "\n", "\n", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_CnS.evaluate": [[80, 85], ["evaluator", "evaluator", "evaluator"], "function", ["None"], ["", "", "def", "evaluate", "(", "labels", ",", "pred", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", ")", ":", "\n", "    ", "return", "(", "\n", "evaluator", "(", "pred", "[", "train_idx", "]", ",", "labels", "[", "train_idx", "]", ")", ",", "\n", "evaluator", "(", "pred", "[", "val_idx", "]", ",", "labels", "[", "val_idx", "]", ")", ",", "\n", "evaluator", "(", "pred", "[", "test_idx", "]", ",", "labels", "[", "test_idx", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_CnS.run": [[88, 125], ["pred.clone", "torch.one_hot().float().squeeze", "postproc_CnS.evaluate", "print", "print", "postproc_CnS.general_outcome_correlation", "postproc_CnS.evaluate", "print", "print", "evaluator.eval", "torch.one_hot().float", "x.clamp", "pred.argmax", "torch.one_hot"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_CnS.evaluate", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_CnS.general_outcome_correlation", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_CnS.evaluate"], ["", "def", "run", "(", "use_norm", ",", "alpha", ",", "graph", ",", "labels", ",", "pred", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", ")", ":", "\n", "    ", "evaluator_wrapper", "=", "lambda", "pred", ",", "labels", ":", "evaluator", ".", "eval", "(", "\n", "{", "\"y_pred\"", ":", "pred", ".", "argmax", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ",", "\"y_true\"", ":", "labels", "}", "\n", ")", "[", "\"acc\"", "]", "\n", "\n", "y", "=", "pred", ".", "clone", "(", ")", "\n", "y", "[", "train_idx", "]", "=", "F", ".", "one_hot", "(", "labels", "[", "train_idx", "]", ",", "n_classes", ")", ".", "float", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "# dy = torch.zeros(graph.number_of_nodes(), n_classes, device=device)", "\n", "# dy[train_idx] = F.one_hot(labels[train_idx], n_classes).float().squeeze(1) - pred[train_idx]", "\n", "\n", "train_acc", ",", "val_acc", ",", "test_acc", "=", "evaluate", "(", "labels", ",", "y", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator_wrapper", ")", "\n", "acc_orig", "=", "{", "TRAIN", ":", "train_acc", ",", "VALID", ":", "val_acc", ",", "TEST", ":", "test_acc", "}", "\n", "# print(\"train acc:\", _train_acc)", "\n", "print", "(", "\"original val acc:\"", ",", "val_acc", ")", "\n", "print", "(", "\"original test acc:\"", ",", "test_acc", ")", "\n", "\n", "# NOTE: Only \"smooth\" is performed here.", "\n", "# smoothed_dy = general_outcome_correlation(", "\n", "#     graph, dy, alpha=args.alpha1, use_norm=args.use_norm, post_step=lambda x: x.clamp(-1, 1)", "\n", "# )", "\n", "\n", "# y[train_idx] = F.one_hot(labels[train_idx], n_classes).float().squeeze(1)", "\n", "# smoothed_dy = smoothed_dy", "\n", "# y = y + args.alpha2 * smoothed_dy  # .clamp(0, 1)", "\n", "\n", "smoothed_y", "=", "general_outcome_correlation", "(", "\n", "graph", ",", "y", ",", "alpha", "=", "alpha", ",", "use_norm", "=", "use_norm", ",", "post_step", "=", "lambda", "x", ":", "x", ".", "clamp", "(", "0", ",", "1", ")", "\n", ")", "\n", "\n", "train_acc", ",", "val_acc", ",", "test_acc", "=", "evaluate", "(", "labels", ",", "smoothed_y", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator_wrapper", ")", "\n", "acc_cs", "=", "{", "TRAIN", ":", "train_acc", ",", "VALID", ":", "val_acc", ",", "TEST", ":", "test_acc", "}", "\n", "\n", "# print(\"train acc:\", _train_acc)", "\n", "print", "(", "\"val acc:\"", ",", "val_acc", ")", "\n", "print", "(", "\"test acc:\"", ",", "test_acc", ")", "\n", "\n", "return", "acc_orig", ",", "acc_cs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_CnS.correct_smooth": [[127, 149], ["postproc_CnS.load_data", "postproc_CnS.preprocess", "map", "postproc_CnS.run", "acc_orig_l.append", "acc_cs_l.append", "postproc_CnS._merge_stat", "postproc_CnS._merge_stat", "x.to"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_CnS.load_data", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_CnS.preprocess", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.scripts.train_multiple_runs.run", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_CnS._merge_stat", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_CnS._merge_stat", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_ens.MinibatchPostEns.to"], ["", "def", "correct_smooth", "(", "dataset", ",", "dev_torch", ",", "pred_l", ":", "list", ",", "use_norm", ",", "alpha", ")", ":", "\n", "\n", "    ", "if", "dataset", "==", "'arxiv'", ":", "\n", "        ", "dataset", "=", "'ogbn-arxiv'", "\n", "", "elif", "dataset", "==", "'products'", ":", "\n", "        ", "dataset", "=", "'ogbn-products'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "# load data & preprocess", "\n", "", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", "=", "load_data", "(", "dataset", ")", "\n", "graph", "=", "preprocess", "(", "graph", ")", "\n", "\n", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", "=", "map", "(", "\n", "lambda", "x", ":", "x", ".", "to", "(", "dev_torch", ")", ",", "(", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ")", "\n", ")", "\n", "\n", "acc_orig_l", ",", "acc_cs_l", "=", "[", "]", ",", "[", "]", "\n", "for", "pred", "in", "pred_l", ":", "\n", "        ", "acc_orig", ",", "acc_cs", "=", "run", "(", "use_norm", ",", "alpha", ",", "graph", ",", "labels", ",", "pred", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", ")", "\n", "acc_orig_l", ".", "append", "(", "acc_orig", ")", "\n", "acc_cs_l", ".", "append", "(", "acc_cs", ")", "\n", "", "return", "_merge_stat", "(", "acc_orig_l", ")", ",", "_merge_stat", "(", "acc_cs_l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.postproc_CnS._merge_stat": [[150, 158], ["all", "set", "d.items", "d.keys", "ret[].append"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set"], ["", "def", "_merge_stat", "(", "dict_l", ":", "List", "[", "dict", "]", ")", ":", "\n", "    ", "key_l", "=", "[", "set", "(", "d", ".", "keys", "(", ")", ")", "for", "d", "in", "dict_l", "]", "\n", "assert", "all", "(", "k", "==", "key_l", "[", "0", "]", "for", "k", "in", "key_l", ")", "\n", "ret", "=", "{", "k", ":", "[", "]", "for", "k", "in", "key_l", "[", "0", "]", "}", "\n", "for", "d", "in", "dict_l", ":", "\n", "        ", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "            ", "ret", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.parse_n_prepare": [[20, 138], ["copy.deepcopy", "config_data.update", "arch_gnn.update", "arch_gnn.items", "params_train.update", "float", "utils.log_dir", "open", "yaml.load", "set", "set", "s.pop", "os.path.isdir", "type", "v.lower", "arch_gnn[].split", "arch_gnn[].lower", "sampler_preproc.append", "len", "sampler_train.append", "len", "max", "min", "open", "yaml.load", "os.listdir", "arch_gnn[].split", "sc.items", "next", "f.split", "iter", "config_temp[].values"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.log_dir", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set"], ["def", "parse_n_prepare", "(", "task", ",", "args", ",", "name_graph", ",", "dir_log", ",", "os_", "=", "'linux'", ")", ":", "\n", "# [config]", "\n", "    ", "if", "args", ".", "configs", "is", "not", "None", ":", "\n", "        ", "config_train", "=", "args", ".", "configs", "\n", "", "else", ":", "\n", "        ", "assert", "task", "in", "[", "'inference'", ",", "'postproc'", "]", "\n", "if", "task", "==", "'inference'", ":", "\n", "            ", "if", "args", ".", "inference_configs", "is", "None", ":", "\n", "                ", "assert", "not", "args", ".", "compute_complexity_only", "\n", "dir_candy", "=", "args", ".", "inference_dir", "\n", "", "else", ":", "\n", "                ", "assert", "args", ".", "inference_dir", "is", "None", "and", "args", ".", "compute_complexity_only", "\n", "dir_candy", "=", "None", "\n", "config_train", "=", "args", ".", "inference_configs", "\n", "", "", "else", ":", "\n", "            ", "if", "args", ".", "postproc_dir", "is", "not", "None", ":", "\n", "                ", "dir_candy", "=", "args", ".", "postproc_dir", "\n", "", "else", ":", "\n", "                ", "with", "open", "(", "args", ".", "postproc_configs", ")", "as", "f", ":", "\n", "                    ", "config_temp", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "if", "'dir_pred_mat'", "in", "config_temp", ":", "# all such dirs MUST contain the same yaml", "\n", "                    ", "dir_candy", "=", "config_temp", "[", "'dir_pred_mat'", "]", "[", "0", "]", "\n", "", "elif", "'dir_emb_mat'", "in", "config_temp", ":", "# all ens models should have the same arch (only differs in sampler)", "\n", "                    ", "dir_candy", "=", "next", "(", "iter", "(", "config_temp", "[", "'dir_emb_mat'", "]", ".", "values", "(", ")", ")", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "", "", "if", "dir_candy", "is", "not", "None", ":", "\n", "            ", "assert", "os", ".", "path", ".", "isdir", "(", "dir_candy", ")", "\n", "f_yml", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "dir_candy", ")", "if", "f", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "in", "[", "'yml'", ",", "'yaml'", "]", "]", "\n", "assert", "len", "(", "f_yml", ")", "==", "1", "\n", "config_train", "=", "f\"{dir_candy}/{f_yml[0]}\"", "\n", "", "", "with", "open", "(", "config_train", ")", "as", "f_config_train", ":", "\n", "        ", "config_train", "=", "yaml", ".", "load", "(", "f_config_train", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "config_train_copy", "=", "deepcopy", "(", "config_train", ")", "\n", "# [data]", "\n", "config_data", "=", "{", "\n", "\"to_undirected\"", ":", "False", ",", "\n", "\"transductive\"", ":", "False", ",", "\n", "\"norm_feat\"", ":", "True", ",", "\n", "\"valedges_as_input\"", ":", "False", "\n", "}", "\n", "config_data", ".", "update", "(", "config_train", "[", "'data'", "]", ")", "\n", "# [arch]", "\n", "arch_gnn", "=", "{", "# default values", "\n", "\"dim\"", ":", "-", "1", ",", "\n", "\"aggr\"", ":", "\"sage\"", ",", "\n", "\"residue\"", ":", "\"none\"", ",", "\n", "\"pooling\"", ":", "\"center\"", ",", "\n", "\"loss\"", ":", "\"softmax\"", ",", "\n", "\"num_layers\"", ":", "-", "1", ",", "\n", "\"num_cls_layers\"", ":", "1", ",", "# 1 MLP layer for classifier on the node representation", "\n", "\"act\"", ":", "\"I\"", ",", "\n", "\"layer_norm\"", ":", "'norm_feat'", ",", "\n", "\"heads\"", ":", "-", "1", ",", "\n", "\"feature_augment\"", ":", "\"hops\"", ",", "\n", "\"feature_augment_ops\"", ":", "'sum'", ",", "\n", "\"feature_smoothen\"", ":", "\"none\"", ",", "\n", "\"label_smoothen\"", ":", "\"none\"", ",", "# label_smoothen is only considered if use_label != none", "\n", "\"ensemble_act\"", ":", "\"leakyrelu\"", ",", "\n", "\"branch_sharing\"", ":", "False", ",", "\n", "\"use_label\"", ":", "\"none\"", "\n", "}", "\n", "arch_gnn", ".", "update", "(", "config_train", "[", "\"architecture\"", "]", ")", "\n", "for", "k", ",", "v", "in", "arch_gnn", ".", "items", "(", ")", ":", "\n", "        ", "if", "type", "(", "v", ")", "==", "str", ":", "\n", "            ", "arch_gnn", "[", "k", "]", "=", "v", ".", "lower", "(", ")", "\n", "", "", "assert", "arch_gnn", "[", "'aggr'", "]", "in", "[", "'sage'", ",", "'gat'", ",", "'gatscat'", ",", "'gcn'", ",", "'mlp'", ",", "'gin'", ",", "'sgc'", ",", "'sign'", "]", "\n", "assert", "arch_gnn", "[", "'use_label'", "]", "in", "[", "'all'", ",", "'none'", ",", "'no_valid'", "]", "\n", "assert", "arch_gnn", "[", "'pooling'", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", "in", "[", "'mean'", ",", "'max'", ",", "'sum'", ",", "'center'", ",", "'sort'", "]", "\n", "assert", "arch_gnn", "[", "'residue'", "]", "in", "[", "'sum'", ",", "'concat'", ",", "'max'", ",", "'none'", "]", "\n", "assert", "arch_gnn", "[", "'feature_augment'", "]", "in", "[", "'hops'", ",", "'pprs'", ",", "'none'", ",", "'hops-pprs'", ",", "'drnls'", "]", "\n", "assert", "arch_gnn", "[", "'feature_augment_ops'", "]", "in", "[", "'concat'", ",", "'sum'", "]", "\n", "assert", "arch_gnn", "[", "'layer_norm'", "]", "in", "[", "'norm_feat'", ",", "'pairnorm'", "]", "\n", "if", "arch_gnn", "[", "\"feature_augment\"", "]", "and", "arch_gnn", "[", "\"feature_augment\"", "]", ".", "lower", "(", ")", "!=", "\"none\"", ":", "\n", "        ", "arch_gnn", "[", "\"feature_augment\"", "]", "=", "set", "(", "k", "for", "k", "in", "arch_gnn", "[", "\"feature_augment\"", "]", ".", "split", "(", "\"-\"", ")", ")", "\n", "", "else", ":", "\n", "        ", "arch_gnn", "[", "'feature_augment'", "]", "=", "set", "(", ")", "\n", "# [params]", "\n", "", "params_train", "=", "{", "\n", "\"lr\"", ":", "0.01", ",", "\n", "\"dropedge\"", ":", "0.0", ",", "\n", "\"ensemble_dropout\"", ":", "\"none\"", ",", "\n", "\"term_window_size\"", ":", "1", ",", "\n", "\"term_window_aggr\"", ":", "'center'", ",", "\n", "\"percent_per_epoch\"", ":", "{", "'train'", ":", "1.", ",", "'valid'", ":", "1.", ",", "'test'", ":", "1.", "}", "\n", "}", "\n", "params_train", ".", "update", "(", "config_train", "[", "\"hyperparameter\"", "]", ")", "\n", "params_train", "[", "\"lr\"", "]", "=", "float", "(", "params_train", "[", "\"lr\"", "]", ")", "\n", "for", "m", "in", "[", "'train'", ",", "'valid'", ",", "'test'", "]", ":", "\n", "        ", "if", "m", "not", "in", "params_train", "[", "'percent_per_epoch'", "]", ":", "\n", "            ", "params_train", "[", "'percent_per_epoch'", "]", "[", "v", "]", "=", "1.", "\n", "", "", "for", "m", "in", "[", "'train'", ",", "'valid'", ",", "'test'", "]", ":", "\n", "        ", "assert", "0", "<=", "params_train", "[", "'percent_per_epoch'", "]", "[", "m", "]", "<=", "1.", "\n", "# [sampler]", "\n", "", "sampler_preproc", ",", "sampler_train", "=", "[", "]", ",", "[", "]", "\n", "for", "s", "in", "config_train", "[", "'sampler'", "]", ":", "\n", "        ", "phase", "=", "s", ".", "pop", "(", "'phase'", ")", "\n", "if", "phase", "==", "'preprocess'", ":", "\n", "            ", "sampler_preproc", ".", "append", "(", "s", ")", "\n", "", "elif", "phase", "==", "'train'", ":", "\n", "            ", "sampler_train", ".", "append", "(", "s", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "batch_size", "=", "config_train", "[", "\"hyperparameter\"", "]", "[", "\"batch_size\"", "]", "\n", "config_sampler_preproc", "=", "{", "\"batch_size\"", ":", "batch_size", ",", "\"configs\"", ":", "sampler_preproc", "}", "\n", "config_sampler_train", "=", "{", "\"batch_size\"", ":", "batch_size", ",", "\"configs\"", ":", "sampler_train", "}", "\n", "# add self-edges for certain arch. e.g., for GAT, will be divide-by-0 error in grad without self-edges", "\n", "if", "arch_gnn", "[", "\"aggr\"", "]", "in", "[", "\"gcn\"", ",", "\"gat\"", ",", "\"gatscat\"", "]", ":", "\n", "        ", "for", "sc", "in", "config_sampler_train", "[", "\"configs\"", "]", ":", "\n", "            ", "num_ens", "=", "[", "len", "(", "v", ")", "for", "k", ",", "v", "in", "sc", ".", "items", "(", ")", "if", "k", "!=", "'method'", "]", "\n", "assert", "max", "(", "num_ens", ")", "==", "min", "(", "num_ens", ")", "\n", "sc", "[", "\"add_self_edge\"", "]", "=", "[", "True", "]", "*", "num_ens", "[", "0", "]", "\n", "# [copy yml]", "\n", "", "", "name_key", "=", "f\"{arch_gnn['aggr']}_{arch_gnn['num_layers']}\"", "\n", "if", "arch_gnn", "[", "'num_cls_layers'", "]", ">", "1", ":", "\n", "        ", "name_key", "+=", "f\"_{arch_gnn['num_cls_layers']}\"", "\n", "", "dir_log_full", "=", "log_dir", "(", "task", ",", "config_train_copy", ",", "name_key", ",", "dir_log", ",", "name_graph", ",", "git_rev", ",", "timestamp", ")", "\n", "return", "params_train", ",", "config_sampler_preproc", ",", "config_sampler_train", ",", "config_data", ",", "arch_gnn", ",", "dir_log_full", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.parse_n_prepare_postproc": [[140, 183], ["utils.log_dir", "enumerate", "all", "open", "yaml.load", "len", "os.listdir", "config_postproc[].items", "all", "acc_record.append", "enumerate", "os.path.realpath", "config_postproc[].append", "logger.decode_csv", "f.startswith", "torch.load", "len", "config_postproc[].items", "os.listdir", "os.path.realpath", "acc_record[].append", "config_postproc[].items", "f.split", "logger.decode_csv", "f.startswith", "torch.load", "f.split"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.log_dir", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.decode_csv", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.logging_base.LoggerBase.decode_csv"], ["", "def", "parse_n_prepare_postproc", "(", "dir_load", ",", "f_config", ",", "name_graph", ",", "dir_log", ",", "arch_gnn", ",", "logger", ")", ":", "\n", "    ", "if", "f_config", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "f_config", ")", "as", "f", ":", "\n", "            ", "config_postproc", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "name_key", "=", "f\"postproc-{arch_gnn['aggr']}_{arch_gnn['num_layers']}\"", "\n", "log_dir", "(", "'postproc'", ",", "config_postproc", ",", "name_key", ",", "dir_log", ",", "name_graph", ",", "git_rev", ",", "timestamp", ")", "\n", "", "skip_instantiate", "=", "[", "]", "\n", "if", "'check_record'", "in", "config_postproc", ":", "\n", "        ", "load_acc_record", "=", "config_postproc", "[", "'check_record'", "]", "\n", "", "else", ":", "\n", "        ", "load_acc_record", "=", "True", "\n", "", "if", "config_postproc", "[", "'method'", "]", "==", "'cs'", ":", "# C&S", "\n", "        ", "acc_record", "=", "[", "]", "if", "load_acc_record", "else", "None", "\n", "if", "dir_load", "is", "not", "None", ":", "\n", "            ", "if", "'dir_pred_mat'", "not", "in", "config_postproc", ":", "\n", "                ", "config_postproc", "[", "'dir_pred_mat'", "]", "=", "[", "dir_load", "]", "\n", "", "elif", "os", ".", "path", ".", "realpath", "(", "dir_load", ")", "not", "in", "[", "os", ".", "path", ".", "realpath", "(", "pc", ")", "for", "pc", "in", "config_postproc", "[", "'dir_pred_mat'", "]", "]", ":", "\n", "                ", "config_postproc", "[", "'dir_pred_mat'", "]", ".", "append", "(", "dir_load", ")", "\n", "", "", "config_postproc", "[", "'pred_mat'", "]", "=", "[", "None", "]", "*", "len", "(", "config_postproc", "[", "'dir_pred_mat'", "]", ")", "\n", "for", "i", ",", "di", "in", "enumerate", "(", "config_postproc", "[", "'dir_pred_mat'", "]", ")", ":", "\n", "            ", "if", "load_acc_record", ":", "\n", "                ", "acc_record", ".", "append", "(", "logger", ".", "decode_csv", "(", "'final'", ",", "di", ")", ")", "\n", "", "for", "f", "in", "os", ".", "listdir", "(", "di", ")", ":", "\n", "                ", "if", "'cs'", "==", "f", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "and", "f", ".", "startswith", "(", "'pred_mat'", ")", ":", "\n", "                    ", "config_postproc", "[", "'pred_mat'", "]", "[", "i", "]", "=", "torch", ".", "load", "(", "f\"{di}/{f}\"", ")", "\n", "break", "\n", "", "", "", "if", "all", "(", "m", "is", "not", "None", "for", "m", "in", "config_postproc", "[", "'pred_mat'", "]", ")", ":", "\n", "            ", "skip_instantiate", "=", "[", "'data'", ",", "'model'", "]", "\n", "", "", "elif", "config_postproc", "[", "'method'", "]", "==", "'ensemble'", ":", "# Variant of subgraph ensemble as postproc", "\n", "        ", "acc_record", "=", "{", "s", ":", "[", "]", "for", "s", "in", "config_postproc", "[", "'dir_emb_mat'", "]", "}", "if", "load_acc_record", "else", "None", "\n", "assert", "dir_load", "is", "None", "\n", "config_postproc", "[", "'emb_mat'", "]", "=", "{", "k", ":", "[", "None", "]", "*", "len", "(", "v", ")", "for", "k", ",", "v", "in", "config_postproc", "[", "'dir_emb_mat'", "]", ".", "items", "(", ")", "}", "\n", "for", "sname", ",", "dirs_l", "in", "config_postproc", "[", "'dir_emb_mat'", "]", ".", "items", "(", ")", ":", "\n", "            ", "for", "i", ",", "di", "in", "enumerate", "(", "dirs_l", ")", ":", "\n", "                ", "if", "load_acc_record", ":", "\n", "                    ", "acc_record", "[", "sname", "]", ".", "append", "(", "logger", ".", "decode_csv", "(", "'final'", ",", "di", ")", ")", "\n", "", "for", "f", "in", "os", ".", "listdir", "(", "di", ")", ":", "\n", "                    ", "if", "'ens'", "==", "f", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "and", "f", ".", "startswith", "(", "'emb_mat'", ")", ":", "\n", "                        ", "config_postproc", "[", "'emb_mat'", "]", "[", "sname", "]", "[", "i", "]", "=", "torch", ".", "load", "(", "f\"{di}/{f}\"", ")", "\n", "break", "\n", "", "", "", "", "if", "all", "(", "m", "is", "not", "None", "for", "s", ",", "mat_l", "in", "config_postproc", "[", "'emb_mat'", "]", ".", "items", "(", ")", "for", "m", "in", "mat_l", ")", ":", "\n", "            ", "skip_instantiate", "=", "[", "'model'", "]", "# you have to load data (role, labels) anyways", "\n", "", "", "return", "config_postproc", ",", "acc_record", ",", "skip_instantiate", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.log_dir": [[185, 202], ["random.sample", "os.path.exists", "os.makedirs", "open", "yaml.dump", "shaDow.globals.git_rev.strip", "shaDow.globals.git_rev", "shaDow.globals.timestamp", "shaDow.globals.git_rev", "shaDow.globals.timestamp"], "function", ["None"], ["", "def", "log_dir", "(", "task", ",", "config_new", ",", "yml_name_key", ",", "dir_log", ",", "name_graph", ",", "git_rev", ",", "timestamp", ")", ":", "\n", "    ", "if", "task", "==", "'train'", ":", "\n", "        ", "prefix", "=", "'running'", "\n", "", "elif", "task", "==", "'inference'", ":", "\n", "        ", "prefix", "=", "'INF'", "\n", "", "elif", "task", "==", "'postproc'", ":", "\n", "        ", "prefix", "=", "'POST'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "_rand_tie_breaker", "=", "''", ".", "join", "(", "random", ".", "sample", "(", "string", ".", "ascii_letters", "+", "string", ".", "digits", ",", "4", ")", ")", "\n", "log_dir", "=", "f\"{dir_log}/{name_graph}/{prefix}/{timestamp}-{git_rev.strip():s}_RAND{_rand_tie_breaker}/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "yml_file", "=", "f\"{log_dir}/{yml_name_key}.yml\"", "\n", "with", "open", "(", "yml_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "dump", "(", "config_new", ",", "f", ",", "default_flow_style", "=", "False", ",", "sort_keys", "=", "False", ")", "\n", "", "return", "log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.merge_stat_record": [[204, 215], ["all", "set", "set", "[].keys", "d.keys", "d[].items", "set", "set", "[].append", "d[].keys"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set"], ["", "def", "merge_stat_record", "(", "dict_l", ":", "List", "[", "dict", "]", ")", ":", "\n", "    ", "key_l", "=", "[", "set", "(", "d", ".", "keys", "(", ")", ")", "for", "d", "in", "dict_l", "]", "\n", "assert", "all", "(", "k", "==", "key_l", "[", "0", "]", "==", "set", "(", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", ")", "for", "k", "in", "key_l", ")", "\n", "names_stat", "=", "set", "(", "dict_l", "[", "0", "]", "[", "TRAIN", "]", ".", "keys", "(", ")", ")", "\n", "ret", "=", "{", "n", ":", "{", "TRAIN", ":", "[", "]", ",", "VALID", ":", "[", "]", ",", "TEST", ":", "[", "]", "}", "for", "n", "in", "names_stat", "}", "\n", "for", "d", "in", "dict_l", ":", "\n", "        ", "for", "m", "in", "[", "TRAIN", ",", "VALID", ",", "TEST", "]", ":", "\n", "            ", "assert", "set", "(", "d", "[", "m", "]", ".", "keys", "(", ")", ")", "==", "names_stat", "\n", "for", "k", ",", "v", "in", "d", "[", "m", "]", ".", "items", "(", ")", ":", "\n", "                ", "ret", "[", "k", "]", "[", "m", "]", ".", "append", "(", "v", ")", "\n", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.cartesian_product": [[219, 226], ["len", "numpy.result_type", "numpy.empty", "enumerate", "np.empty.reshape", "numpy.ix_", "len"], "function", ["None"], ["", "def", "cartesian_product", "(", "*", "arrays", ")", ":", "\n", "    ", "la", "=", "len", "(", "arrays", ")", "\n", "dtype", "=", "np", ".", "result_type", "(", "*", "arrays", ")", "\n", "arr", "=", "np", ".", "empty", "(", "[", "len", "(", "a", ")", "for", "a", "in", "arrays", "]", "+", "[", "la", "]", ",", "dtype", "=", "dtype", ")", "\n", "for", "i", ",", "a", "in", "enumerate", "(", "np", ".", "ix_", "(", "*", "arrays", ")", ")", ":", "\n", "        ", "arr", "[", "...", ",", "i", "]", "=", "a", "\n", "", "return", "arr", ".", "reshape", "(", "-", "1", ",", "la", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.idx_nD_list": [[227, 238], ["list", "list.pop", "utils.idx_nD_list", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.idx_nD_list"], ["", "def", "idx_nD_list", "(", "l", ",", "idx", ")", ":", "\n", "    ", "\"\"\"\n    l is a multi-dimensional list. idx is a tuple indexing into l. \n    Since a python list cannot be indexed by a tuple directly,\n    we use this function for indexing an arbitrary dim list.\n    \"\"\"", "\n", "if", "len", "(", "idx", ")", "==", "0", ":", "\n", "        ", "return", "l", "\n", "", "idx", "=", "list", "(", "idx", ")", "\n", "i", "=", "idx", ".", "pop", "(", "0", ")", "\n", "return", "idx_nD_list", "(", "l", "[", "i", "]", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.set_nD_list": [[239, 246], ["list", "list.pop", "utils.set_nD_list", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.set_nD_list"], ["", "def", "set_nD_list", "(", "l", ",", "idx", ",", "val", ")", ":", "\n", "    ", "if", "len", "(", "idx", ")", "==", "1", ":", "\n", "        ", "l", "[", "idx", "[", "0", "]", "]", "=", "val", "\n", "return", "\n", "", "idx", "=", "list", "(", "idx", ")", "\n", "i", "=", "idx", ".", "pop", "(", "0", ")", "\n", "return", "set_nD_list", "(", "l", "[", "i", "]", ",", "idx", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.utils.construct_nD_list": [[247, 257], ["isinstance", "type", "ret[].copy", "range", "range"], "function", ["None"], ["", "def", "construct_nD_list", "(", "shape", ",", "init_val", "=", "None", ")", ":", "\n", "    ", "assert", "init_val", "is", "None", "or", "isinstance", "(", "init_val", ",", "numbers", ".", "Number", ")", "\n", "ret", "=", "[", "init_val", "]", "\n", "for", "d", "in", "shape", "[", ":", ":", "-", "1", "]", ":", "\n", "        ", "if", "type", "(", "ret", "[", "0", "]", ")", "==", "list", ":", "\n", "            ", "ret", "=", "[", "ret", "[", "0", "]", ".", "copy", "(", ")", "for", "_", "in", "range", "(", "d", ")", "]", "\n", "", "else", ":", "\n", "            ", "ret", "=", "[", "ret", "[", "0", "]", "for", "_", "in", "range", "(", "d", ")", "]", "\n", "", "ret", "=", "[", "ret", "]", "\n", "", "return", "ret", "[", "0", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.backend.setup.CMakeExtension.__init__": [[26, 29], ["setuptools.Extension.__init__", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__"], ["python_requires", "=", "\">=3.8\"", ",", "\n", ")", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.backend.setup.CMakeBuild.build_extension": [[32, 103], ["os.path.abspath", "os.environ.get", "subprocess.check_call", "subprocess.check_call", "os.path.dirname", "os.path.abspath.endswith", "any", "any", "os.path.exists", "os.makedirs", "setuptools.setup.CMakeBuild.get_ext_fullpath", "setuptools.setup.CMakeBuild.distribution.get_version", "hasattr", "cfg.upper"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.get"], []], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.data_converter.ShaDowFiles.have_all_files": [[33, 39], ["all", "glob.glob"], "methods", ["None"], ["def", "have_all_files", "(", "self", ",", "prefix", ":", "str", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Check if all files required by shaDow training are present in the data dir\n        \"\"\"", "\n", "return", "all", "(", "\n", "glob", ".", "glob", "(", "f\"{prefix}/{self.name}/{f}\"", ")", "for", "f", "in", "self", ".", "required_files", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.data_converter._convert_saint2shadow": [[164, 225], ["print", "scipy.load_npz", "graph_engine.frontend.graph_utils.get_adj_dtype", "scipy.csr_matrix", "sp.csr_matrix.indptr.astype", "sp.csr_matrix.indices.astype", "scipy.save_npz", "scipy.load_npz", "scipy.csr_matrix", "sp.csr_matrix.indptr.astype", "sp.csr_matrix.indices.astype", "scipy.save_npz", "numpy.save", "next", "isinstance", "numpy.save", "numpy.load", "numpy.save", "print", "dir_saint.format", "sp.load_npz.data.min", "sp.load_npz.data.max", "numpy.broadcast_to", "sp.load_npz.data.astype", "dir_shadow.format", "dir_saint.format", "sp.load_npz.data.min", "sp.load_npz.data.max", "numpy.broadcast_to", "sp.load_npz.data.astype", "dir_shadow.format", "open", "json.load", "dir_shadow.format", "open", "json.load", "int", "iter", "len", "numpy.zeros", "json.load.items", "numpy.zeros", "min", "numpy.asarray", "dir_shadow.format", "dir_saint.format", "dir_shadow.format", "np.load.astype", "numpy.ones", "numpy.ones", "dir_saint.format", "numpy.asarray", "numpy.asarray", "numpy.asarray", "dir_saint.format", "json.load.items", "json.load.values", "json.load.values", "list", "numpy.asarray", "max", "min", "json.load.keys", "list", "json.load.values", "json.load.values", "json.load.values", "dir_shadow.split"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.get_adj_dtype"], ["def", "_convert_saint2shadow", "(", "data_meta", ",", "dir_shadow", ":", "str", ",", "dir_saint", ":", "str", ")", "->", "None", ":", "\n", "    ", "print", "(", "f\"Preparing shaDow-GNN dataset from GraphSAINT format\"", ")", "\n", "adj_full", "=", "sp", ".", "load_npz", "(", "dir_saint", ".", "format", "(", "'adj_full.npz'", ")", ")", "\n", "dtype", "=", "get_adj_dtype", "(", "adj", "=", "adj_full", ")", "\n", "# adj_full.npz -> adj_full_raw.npz", "\n", "if", "adj_full", ".", "data", ".", "min", "(", ")", "==", "adj_full", ".", "data", ".", "max", "(", ")", "==", "1.", ":", "\n", "        ", "adj_f_data", "=", "np", ".", "broadcast_to", "(", "np", ".", "ones", "(", "1", ",", "dtype", "=", "np", ".", "bool", ")", ",", "adj_full", ".", "data", ".", "size", ")", "\n", "", "else", ":", "\n", "        ", "adj_f_data", "=", "adj_full", ".", "data", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "", "adj_f_indptr", "=", "adj_full", ".", "indptr", "\n", "adj_f_indices", "=", "adj_full", ".", "indices", "\n", "adj_", "=", "sp", ".", "csr_matrix", "(", "(", "adj_f_data", ",", "adj_f_indices", ",", "adj_f_indptr", ")", ",", "shape", "=", "adj_full", ".", "shape", ")", "\n", "adj_", ".", "indptr", "=", "adj_", ".", "indptr", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "\n", "adj_", ".", "indices", "=", "adj_", ".", "indices", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "\n", "sp", ".", "save_npz", "(", "dir_shadow", ".", "format", "(", "'adj_full_raw.npz'", ")", ",", "adj_", ")", "\n", "# adj_train.npz -> adj_train_raw.npz", "\n", "adj_train", "=", "sp", ".", "load_npz", "(", "dir_saint", ".", "format", "(", "'adj_train.npz'", ")", ")", "\n", "if", "adj_train", ".", "data", ".", "min", "(", ")", "==", "adj_train", ".", "data", ".", "max", "(", ")", "==", "1", ":", "\n", "        ", "adj_t_data", "=", "np", ".", "broadcast_to", "(", "np", ".", "ones", "(", "1", ",", "dtype", "=", "np", ".", "bool", ")", ",", "adj_train", ".", "data", ".", "size", ")", "\n", "", "else", ":", "\n", "        ", "adj_t_data", "=", "adj_train", ".", "data", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", "\n", "", "adj_t_indptr", "=", "adj_train", ".", "indptr", "\n", "adj_t_indices", "=", "adj_train", ".", "indices", "\n", "adj_", "=", "sp", ".", "csr_matrix", "(", "(", "adj_t_data", ",", "adj_t_indices", ",", "adj_t_indptr", ")", ",", "shape", "=", "adj_train", ".", "shape", ")", "\n", "adj_", ".", "indptr", "=", "adj_", ".", "indptr", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "\n", "adj_", ".", "indices", "=", "adj_", ".", "indices", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "\n", "sp", ".", "save_npz", "(", "dir_shadow", ".", "format", "(", "'adj_train_raw.npz'", ")", ",", "adj_", ")", "\n", "# role.json -> split.npy", "\n", "with", "open", "(", "dir_saint", ".", "format", "(", "'role.json'", ")", ")", "as", "fr", ":", "\n", "        ", "role", "=", "json", ".", "load", "(", "fr", ")", "\n", "", "np", ".", "save", "(", "\n", "dir_shadow", ".", "format", "(", "'split.npy'", ")", ",", "\n", "{", "\n", "TRAIN", ":", "np", ".", "asarray", "(", "role", "[", "'tr'", "]", ",", "dtype", "=", "dtype", ")", ",", "\n", "VALID", ":", "np", ".", "asarray", "(", "role", "[", "'va'", "]", ",", "dtype", "=", "dtype", ")", ",", "\n", "TEST", ":", "np", ".", "asarray", "(", "role", "[", "'te'", "]", ",", "dtype", "=", "dtype", ")", "\n", "}", "\n", ")", "\n", "# class_map.json -> label_full.npy", "\n", "with", "open", "(", "dir_saint", ".", "format", "(", "'class_map.json'", ")", ")", "as", "fc", ":", "\n", "        ", "class_map", "=", "json", ".", "load", "(", "fc", ")", "\n", "", "class_map", "=", "{", "int", "(", "k", ")", ":", "v", "for", "k", ",", "v", "in", "class_map", ".", "items", "(", ")", "}", "\n", "num_nodes", "=", "adj_full", ".", "shape", "[", "0", "]", "\n", "class_val_0", "=", "next", "(", "iter", "(", "class_map", ".", "values", "(", ")", ")", ")", "\n", "if", "isinstance", "(", "class_val_0", ",", "list", ")", ":", "\n", "        ", "num_classes", "=", "len", "(", "class_val_0", ")", "\n", "label_full", "=", "np", ".", "zeros", "(", "(", "num_nodes", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "k", ",", "v", "in", "class_map", ".", "items", "(", ")", ":", "\n", "            ", "label_full", "[", "k", "]", "=", "v", "\n", "", "", "else", ":", "# class label is represented as an int", "\n", "        ", "num_classes", "=", "max", "(", "class_map", ".", "values", "(", ")", ")", "-", "min", "(", "class_map", ".", "values", "(", ")", ")", "+", "1", "\n", "label_full", "=", "np", ".", "zeros", "(", "(", "num_nodes", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "offset", "=", "min", "(", "class_map", ".", "values", "(", ")", ")", "\n", "idx0", "=", "np", ".", "asarray", "(", "list", "(", "class_map", ".", "keys", "(", ")", ")", ")", "\n", "idx1", "=", "np", ".", "asarray", "(", "list", "(", "class_map", ".", "values", "(", ")", ")", ")", "-", "offset", "\n", "label_full", "[", "idx0", ",", "idx1", "]", "=", "1", "\n", "", "np", ".", "save", "(", "dir_shadow", ".", "format", "(", "'label_full.npy'", ")", ",", "label_full", ")", "\n", "# feats.npy -> feat_full.npy", "\n", "feats", "=", "np", ".", "load", "(", "dir_saint", ".", "format", "(", "'feats.npy'", ")", ")", "\n", "np", ".", "save", "(", "dir_shadow", ".", "format", "(", "'feat_full.npy'", ")", ",", "feats", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", ")", "\n", "print", "(", "f\"Successfully saved shaDow-GNN dataset into {'/'.join(dir_shadow.split('/')[:-1])}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.data_converter._convert_ogb2shadow_node": [[227, 304], ["print", "PygNodePropPredDataset", "PygNodePropPredDataset.get_idx_split", "numpy.save", "dataset.get_idx_split.items", "numpy.save", "graph.edge_index.numpy", "scipy.coo_matrix().tocsr", "graph_engine.frontend.graph_utils.get_adj_dtype", "sp.coo_matrix().tocsr.indptr.astype", "sp.coo_matrix().tocsr.indices.astype", "scipy.save_npz", "set", "set", "print", "tqdm.tqdm", "scipy.coo_matrix().tocsr", "sp.coo_matrix().tocsr.indptr.astype", "sp.coo_matrix().tocsr.indices.astype", "scipy.save_npz", "numpy.save", "print", "os.path.exists", "os.makedirs", "dir_shadow.format", "graph.x.numpy().astype", "y_non_nan.min().item", "y_non_nan.max().item", "dir_shadow.format", "graph.y.numpy().flatten().astype", "dir_shadow.format", "split_idx[].numpy().tolist", "split_idx[].numpy().tolist", "range", "dir_shadow.format", "dir_shadow.format", "dir_ogb.split", "y_non_nan.max().item", "graph.y[].isnan().any().item", "scipy.coo_matrix", "row_train.append", "col_train.append", "scipy.coo_matrix", "split_idx[].numpy().astype", "split_idx[].numpy().astype", "split_idx[].numpy().astype", "graph.x.numpy", "y_non_nan.min", "y_non_nan.max", "y_non_nan.max().item", "graph.y.numpy().flatten", "split_idx[].numpy", "split_idx[].numpy", "y_non_nan.max", "graph.y[].isnan().any", "numpy.broadcast_to", "numpy.broadcast_to", "split_idx[].numpy", "split_idx[].numpy", "split_idx[].numpy", "y_non_nan.max", "graph.y.numpy", "numpy.ones", "numpy.ones", "len", "numpy.asarray", "numpy.asarray", "dir_shadow.split", "graph.y[].isnan"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.get_adj_dtype", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set"], ["", "def", "_convert_ogb2shadow_node", "(", "data_meta", ",", "dir_shadow", ":", "str", ",", "dir_ogb", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    For node classification tasks: convert from OGB format to shaDow-GNN format\n    \"\"\"", "\n", "from", "ogb", ".", "nodeproppred", "import", "PygNodePropPredDataset", "\n", "print", "(", "f\"Preparing shaDow-GNN 'node' dataset from OGB format\"", ")", "\n", "dir_ogb_parent", "=", "'/'", ".", "join", "(", "dir_ogb", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_ogb_parent", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_ogb_parent", ")", "\n", "", "dataset", "=", "PygNodePropPredDataset", "(", "data_meta", ".", "original_name", ",", "root", "=", "dir_ogb_parent", ")", "\n", "split_idx", "=", "dataset", ".", "get_idx_split", "(", ")", "\n", "graph", "=", "dataset", "[", "0", "]", "\n", "num_node", "=", "graph", ".", "y", ".", "shape", "[", "0", "]", "\n", "num_edge", "=", "graph", ".", "edge_index", ".", "shape", "[", "1", "]", "\n", "# feat_full.npy", "\n", "np", ".", "save", "(", "dir_shadow", ".", "format", "(", "'feat_full.npy'", ")", ",", "graph", ".", "x", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", ")", "\n", "graph", ".", "x", "=", "None", "# done with x, so dereference the pointer to save some memory", "\n", "# label_full.npy        NOTE only for single class classification. Otherwise, cannot use 1D label arr", "\n", "y_non_nan", "=", "graph", ".", "y", "[", "graph", ".", "y", "==", "graph", ".", "y", "]", "\n", "assert", "y_non_nan", ".", "min", "(", ")", ".", "item", "(", ")", "==", "0", "\n", "if", "y_non_nan", ".", "max", "(", ")", ".", "item", "(", ")", "<", "2", "**", "8", ":", "\n", "        ", "dtype_l", "=", "np", ".", "uint8", "\n", "", "elif", "y_non_nan", ".", "max", "(", ")", ".", "item", "(", ")", "<", "2", "**", "16", ":", "\n", "        ", "dtype_l", "=", "np", ".", "uint16", "\n", "", "elif", "y_non_nan", ".", "max", "(", ")", ".", "item", "(", ")", "<", "2", "**", "32", ":", "# Almost impossible to have so many classes", "\n", "        ", "dtype_l", "=", "np", ".", "uint32", "\n", "", "else", ":", "\n", "        ", "dtype_l", "=", "np", ".", "int64", "\n", "# assert all train / valid / test nodes are not nan", "\n", "", "for", "_k", ",", "v", "in", "split_idx", ".", "items", "(", ")", ":", "\n", "        ", "assert", "not", "graph", ".", "y", "[", "v", "]", ".", "isnan", "(", ")", ".", "any", "(", ")", ".", "item", "(", ")", "\n", "", "np", ".", "save", "(", "dir_shadow", ".", "format", "(", "'label_full.npy'", ")", ",", "graph", ".", "y", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ".", "astype", "(", "dtype_l", ",", "copy", "=", "False", ")", ")", "\n", "# adj_full_raw.npz", "\n", "row_full", ",", "col_full", "=", "graph", ".", "edge_index", ".", "numpy", "(", ")", "\n", "adj_full", "=", "sp", ".", "coo_matrix", "(", "\n", "(", "\n", "np", ".", "broadcast_to", "(", "np", ".", "ones", "(", "1", ",", "dtype", "=", "np", ".", "bool", ")", ",", "row_full", ".", "size", ")", ",", "\n", "(", "row_full", ",", "col_full", ")", ",", "\n", ")", ",", "\n", "shape", "=", "(", "num_node", ",", "num_node", ")", "\n", ")", ".", "tocsr", "(", ")", "\n", "dtype", "=", "get_adj_dtype", "(", "adj", "=", "adj_full", ")", "\n", "adj_full", ".", "indptr", "=", "adj_full", ".", "indptr", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "\n", "adj_full", ".", "indices", "=", "adj_full", ".", "indices", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "\n", "sp", ".", "save_npz", "(", "dir_shadow", ".", "format", "(", "'adj_full_raw.npz'", ")", ",", "adj_full", ")", "\n", "adj_full", "=", "graph", "=", "None", "\n", "# adj_train_raw.npz", "\n", "idx_train_set", "=", "set", "(", "split_idx", "[", "'train'", "]", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "idx_test_set", "=", "set", "(", "split_idx", "[", "'test'", "]", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "row_train", ",", "col_train", "=", "[", "]", ",", "[", "]", "\n", "print", "(", "\"Converting adj into the shaDow format\"", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "row_full", ".", "size", ")", ")", ":", "\n", "        ", "if", "row_full", "[", "i", "]", "in", "idx_train_set", "and", "col_full", "[", "i", "]", "in", "idx_train_set", ":", "\n", "            ", "row_train", ".", "append", "(", "row_full", "[", "i", "]", ")", "\n", "col_train", ".", "append", "(", "col_full", "[", "i", "]", ")", "\n", "", "", "adj_train", "=", "sp", ".", "coo_matrix", "(", "\n", "(", "\n", "np", ".", "broadcast_to", "(", "np", ".", "ones", "(", "1", ",", "dtype", "=", "np", ".", "bool", ")", ",", "len", "(", "row_train", ")", ")", ",", "\n", "(", "np", ".", "asarray", "(", "row_train", ")", ",", "np", ".", "asarray", "(", "col_train", ")", ")", ",", "\n", ")", ",", "\n", "shape", "=", "(", "num_node", ",", "num_node", ")", "\n", ")", ".", "tocsr", "(", ")", "\n", "row_train", "=", "col_train", "=", "None", "\n", "adj_train", ".", "indptr", "=", "adj_train", ".", "indptr", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "\n", "adj_train", ".", "indices", "=", "adj_train", ".", "indices", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "\n", "sp", ".", "save_npz", "(", "dir_shadow", ".", "format", "(", "'adj_train_raw.npz'", ")", ",", "adj_train", ")", "\n", "adj_train", "=", "None", "\n", "# split.npy (need to do as the last step, since dtype should be determined by adj_full)", "\n", "np", ".", "save", "(", "\n", "dir_shadow", ".", "format", "(", "'split.npy'", ")", ",", "\n", "{", "\n", "TRAIN", ":", "split_idx", "[", "'train'", "]", ".", "numpy", "(", ")", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", ",", "\n", "VALID", ":", "split_idx", "[", "'valid'", "]", ".", "numpy", "(", ")", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", ",", "\n", "TEST", ":", "split_idx", "[", "'test'", "]", ".", "numpy", "(", ")", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "\n", "}", "\n", ")", "\n", "print", "(", "f\"Successfully saved shaDow-GNN dataset into {'/'.join(dir_shadow.split('/')[:-1])}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.data_converter._convert_ogb2shadow_link": [[306, 417], ["print", "PygLinkPropPredDataset", "PygLinkPropPredDataset.get_edge_split", "numpy.save", "print", "os.path.exists", "os.makedirs", "dir_shadow.format", "graph.x.numpy().astype", "coalesce", "edge_index.numpy", "scipy.coo_matrix().tocsr", "graph_engine.frontend.graph_utils.get_adj_dtype", "sp.coo_matrix().tocsr.indptr.astype", "sp.coo_matrix().tocsr.indices.astype", "scipy.save_npz", "torch_geometric.utils.to_undirected().numpy", "numpy.concatenate", "numpy.concatenate", "scipy.coo_matrix().tocsr", "graph_engine.frontend.graph_utils.get_adj_dtype", "sp.coo_matrix().tocsr.indptr.astype", "sp.coo_matrix().tocsr.indices.astype", "scipy.save_npz", "numpy.save", "dir_ogb.split", "dir_shadow.format", "dir_shadow.format", "dir_shadow.format", "scipy.coo_matrix().tocsr", "graph_engine.frontend.graph_utils.get_adj_dtype", "sp.coo_matrix().tocsr.indptr.astype", "sp.coo_matrix().tocsr.indices.astype", "scipy.save_npz", "numpy.save", "graph.x.numpy", "scipy.coo_matrix", "torch_geometric.utils.to_undirected", "graph.edge_index.numpy", "graph.edge_weight.numpy().flatten", "numpy.ones", "scipy.coo_matrix", "dir_shadow.format", "dir_shadow.format", "[].t", "[].numpy().astype", "[].numpy().astype", "[].numpy().astype", "[].numpy().astype", "[].numpy().astype", "scipy.coo_matrix", "edge_weight.numpy().flatten", "graph.edge_weight.numpy", "[].numpy().astype", "[].numpy().astype", "[].numpy().astype", "[].numpy().astype", "[].numpy().astype", "dir_shadow.split", "[].numpy", "[].numpy", "[].numpy", "[].numpy", "[].numpy", "numpy.ones", "edge_weight.numpy", "row.numpy", "col.numpy", "[].numpy", "[].numpy", "[].numpy", "[].numpy", "[].numpy"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.get_adj_dtype", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.get_adj_dtype", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.get_adj_dtype"], ["", "def", "_convert_ogb2shadow_link", "(", "data_meta", ",", "dir_shadow", ":", "str", ",", "dir_ogb", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    For link prediction tasks: convert from OGB format to shaDow-GNN format\n    \"\"\"", "\n", "name_data", "=", "data_meta", ".", "name", "\n", "from", "ogb", ".", "linkproppred", "import", "PygLinkPropPredDataset", "\n", "print", "(", "f\"Preparing shaDow-GNN 'link' dataset from OGB format\"", ")", "\n", "dir_ogb_parent", "=", "'/'", ".", "join", "(", "dir_ogb", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_ogb_parent", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_ogb_parent", ")", "\n", "", "dataset", "=", "PygLinkPropPredDataset", "(", "data_meta", ".", "original_name", ",", "root", "=", "dir_ogb_parent", ")", "\n", "split_edge", "=", "dataset", ".", "get_edge_split", "(", ")", "\n", "graph", "=", "dataset", "[", "0", "]", "\n", "num_node", "=", "graph", ".", "x", ".", "shape", "[", "0", "]", "\n", "assert", "num_node", "==", "graph", ".", "num_nodes", "\n", "# feat_full.npy", "\n", "np", ".", "save", "(", "dir_shadow", ".", "format", "(", "'feat_full.npy'", ")", ",", "graph", ".", "x", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float32", ",", "copy", "=", "False", ")", ")", "\n", "graph", ".", "x", "=", "None", "\n", "if", "name_data", "==", "'collab'", ":", "\n", "        ", "\"\"\"\n        split_edge: \n            train   edge/weight/year\n            valid   edge/weight/year/edge_neg\n            test    edge/weight/year/edge_neg\n        where edge & edge_neg are 2D: m x 2; and weight & year are 1D: m\n            leading dim of edge & weight & year are the same\n        split_edge['train']['edge'].shape[0] + split_edge['valid']['edge'].shape[0] + split_edge['test']['edge'][0]\n            matches the edge number in ogb paper\n        \"\"\"", "\n", "assert", "graph", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "graph", ".", "edge_weight", ".", "shape", "[", "0", "]", "==", "graph", ".", "edge_year", ".", "shape", "[", "0", "]", "\n", "\"\"\"\n        adj -- prepare two versions\n            in the vanilla setting, adj_full only contains edges in the training set\n            in the alternative setting, adj_full contains validation edges as well (i.e., use_valedges_as_input)\n        row_full, col_full = graph.edge_index.numpy()\n        By default we perform coalescing and store in adj_full_raw. \n            without coalescing, there will be multiple edges between nodes, and thus csr is invalid\n        \"\"\"", "\n", "from", "torch_sparse", "import", "coalesce", "\n", "edge_index", ",", "edge_weight", "=", "coalesce", "(", "graph", ".", "edge_index", ",", "graph", ".", "edge_weight", ",", "num_node", ",", "num_node", ")", "\n", "row_full", ",", "col_full", "=", "edge_index", ".", "numpy", "(", ")", "\n", "adj_full", "=", "sp", ".", "coo_matrix", "(", "\n", "(", "\n", "edge_weight", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ",", "\n", "(", "row_full", ",", "col_full", ")", ",", "\n", ")", ",", "shape", "=", "(", "num_node", ",", "num_node", ")", "\n", ")", ".", "tocsr", "(", ")", "\n", "dtype", "=", "get_adj_dtype", "(", "adj", "=", "adj_full", ")", "\n", "adj_full", ".", "indptr", "=", "adj_full", ".", "indptr", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "\n", "adj_full", ".", "indices", "=", "adj_full", ".", "indices", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "\n", "sp", ".", "save_npz", "(", "dir_shadow", ".", "format", "(", "'adj_full_raw.npz'", ")", ",", "adj_full", ")", "\n", "adj_full", "=", "None", "\n", "# valedge as input", "\n", "valedges_und", "=", "to_undirected", "(", "split_edge", "[", "'valid'", "]", "[", "'edge'", "]", ".", "t", "(", ")", ")", ".", "numpy", "(", ")", "\n", "row_train_val", ",", "col_train_val", "=", "np", ".", "concatenate", "(", "[", "graph", ".", "edge_index", ".", "numpy", "(", ")", ",", "valedges_und", "]", ",", "axis", "=", "1", ")", "\n", "edge_weight_train_val", "=", "np", ".", "concatenate", "(", "\n", "[", "graph", ".", "edge_weight", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ",", "np", ".", "ones", "(", "valedges_und", ".", "shape", "[", "1", "]", ")", "]", "\n", ")", "\n", "adj_full_train_val", "=", "sp", ".", "coo_matrix", "(", "\n", "(", "\n", "edge_weight_train_val", ",", "\n", "(", "row_train_val", ",", "col_train_val", ")", ",", "\n", ")", ",", "shape", "=", "(", "num_node", ",", "num_node", ")", "\n", ")", ".", "tocsr", "(", ")", "\n", "dtype", "=", "get_adj_dtype", "(", "adj", "=", "adj_full_train_val", ")", "\n", "adj_full_train_val", ".", "indptr", "=", "adj_full_train_val", ".", "indptr", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "\n", "adj_full_train_val", ".", "indices", "=", "adj_full_train_val", ".", "indices", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "\n", "sp", ".", "save_npz", "(", "dir_shadow", ".", "format", "(", "'adj_full_raw_with_val.npz'", ")", ",", "adj_full_train_val", ")", "\n", "adj_full_train_val", "=", "None", "\n", "graph", "=", "None", "\n", "# skip adj_train for link task --> current don't consider inductive link prediction", "\n", "# split.npy     --> positive and negative sample of edges", "\n", "np", ".", "save", "(", "\n", "dir_shadow", ".", "format", "(", "'split.npy'", ")", ",", "\n", "{", "\n", "TRAIN", ":", "{", "'pos'", ":", "split_edge", "[", "'train'", "]", "[", "'edge'", "]", ".", "numpy", "(", ")", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "}", ",", "\n", "VALID", ":", "{", "'pos'", ":", "split_edge", "[", "'valid'", "]", "[", "'edge'", "]", ".", "numpy", "(", ")", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", ",", "\n", "'neg'", ":", "split_edge", "[", "'valid'", "]", "[", "'edge_neg'", "]", ".", "numpy", "(", ")", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "}", ",", "\n", "TEST", ":", "{", "'pos'", ":", "split_edge", "[", "'test'", "]", "[", "'edge'", "]", ".", "numpy", "(", ")", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", ",", "\n", "'neg'", ":", "split_edge", "[", "'test'", "]", "[", "'edge_neg'", "]", ".", "numpy", "(", ")", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "}", "\n", "# 'ALL': {'pos': graph.edge_index.numpy().astype(dtype, copy=False)}", "\n", "}", "\n", ")", "\n", "", "elif", "name_data", "==", "'ppa'", ":", "\n", "        ", "row", ",", "col", "=", "graph", ".", "edge_index", "\n", "adj_full", "=", "sp", ".", "coo_matrix", "(", "\n", "(", "\n", "np", ".", "ones", "(", "graph", ".", "num_edges", ")", ",", "\n", "(", "row", ".", "numpy", "(", ")", ",", "col", ".", "numpy", "(", ")", ")", ",", "\n", ")", ",", "shape", "=", "(", "num_node", ",", "num_node", ")", "\n", ")", ".", "tocsr", "(", ")", "\n", "dtype", "=", "get_adj_dtype", "(", "adj", "=", "adj_full", ")", "\n", "adj_full", ".", "indptr", "=", "adj_full", ".", "indptr", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "\n", "adj_full", ".", "indices", "=", "adj_full", ".", "indices", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "\n", "sp", ".", "save_npz", "(", "dir_shadow", ".", "format", "(", "'adj_full_raw.npz'", ")", ",", "adj_full", ")", "\n", "adj_full", "=", "graph", "=", "None", "\n", "# same as collab", "\n", "np", ".", "save", "(", "\n", "dir_shadow", ".", "format", "(", "'split.npy'", ")", ",", "\n", "{", "\n", "TRAIN", ":", "{", "'pos'", ":", "split_edge", "[", "'train'", "]", "[", "'edge'", "]", ".", "numpy", "(", ")", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "}", ",", "\n", "VALID", ":", "{", "'pos'", ":", "split_edge", "[", "'valid'", "]", "[", "'edge'", "]", ".", "numpy", "(", ")", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", ",", "\n", "'neg'", ":", "split_edge", "[", "'valid'", "]", "[", "'edge_neg'", "]", ".", "numpy", "(", ")", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "}", ",", "\n", "TEST", ":", "{", "'pos'", ":", "split_edge", "[", "'test'", "]", "[", "'edge'", "]", ".", "numpy", "(", ")", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", ",", "\n", "'neg'", ":", "split_edge", "[", "'test'", "]", "[", "'edge_neg'", "]", ".", "numpy", "(", ")", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "}", "\n", "# 'ALL': {'pos': graph.edge_index.numpy().astype(dtype, copy=False)}", "\n", "}", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "print", "(", "f\"Successfully saved shaDow-GNN dataset into {'/'.join(dir_shadow.split('/')[:-1])}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.data_converter.convert2shaDow": [[419, 446], ["_DATA_META.have_all_files", "data_converter._precompute_data", "os.path.exists", "os.makedirs", "data_converter._convert_ogb2shadow_node", "data_converter._convert_ogb2shadow_link", "all", "data_converter._convert_saint2shadow", "glob.glob", "dir_saint.format"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.data_converter.ShaDowFiles.have_all_files", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.data_converter._precompute_data", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.data_converter._convert_ogb2shadow_node", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.data_converter._convert_ogb2shadow_link", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.data_converter._convert_saint2shadow"], ["", "def", "convert2shaDow", "(", "\n", "name_data", ":", "str", ",", "\n", "prefix", ":", "str", ",", "\n", "specification_task", ":", "str", "=", "\"ALL\"", "\n", ")", "->", "None", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "f\"{prefix}/{name_data}\"", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "f\"{prefix}/{name_data}\"", ")", "\n", "", "dir_shadow", "=", "f\"{prefix}/{name_data}/\"", "+", "\"{}\"", "\n", "dir_saint", "=", "f\"{prefix}/saint/{name_data}/\"", "+", "\"{}\"", "\n", "dir_ogb", "=", "f\"{prefix}/ogb/{name_data}/\"", "+", "\"{}\"", "\n", "_DATA_META", "=", "DATA_ZOO", "[", "name_data", "]", "[", "specification_task", "]", "\n", "prediction_task", "=", "_DATA_META", ".", "prediction_task", "\n", "source", "=", "_DATA_META", ".", "source", "\n", "if", "_DATA_META", ".", "have_all_files", "(", "prefix", ")", ":", "\n", "        ", "pass", "\n", "", "elif", "source", "==", "\"OGB\"", ":", "\n", "        ", "if", "prediction_task", "==", "\"node\"", ":", "\n", "            ", "_convert_ogb2shadow_node", "(", "_DATA_META", ",", "dir_shadow", ",", "dir_ogb", ")", "\n", "", "else", ":", "\n", "            ", "_convert_ogb2shadow_link", "(", "_DATA_META", ",", "dir_shadow", ",", "dir_ogb", ")", "\n", "", "", "elif", "source", "==", "\"SAINT\"", ":", "\n", "        ", "assert", "all", "(", "glob", ".", "glob", "(", "dir_saint", ".", "format", "(", "f", ")", ")", "for", "f", "in", "FILES_SAINT", ")", "\n", "_convert_saint2shadow", "(", "_DATA_META", ",", "dir_shadow", ",", "dir_saint", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "_precompute_data", "(", "name_data", ",", "dir_shadow", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.data_converter._precompute_data": [[448, 483], ["scipy.load_npz", "scipy.load_npz", "graph_engine.frontend.graph_utils.to_undirected_csr", "graph_engine.frontend.graph_utils.to_undirected_csr", "graph_engine.frontend.graph_utils.to_undirected_csr.indptr.tofile", "graph_engine.frontend.graph_utils.to_undirected_csr.indices.tofile", "graph_engine.frontend.graph_utils.to_undirected_csr.indptr.tofile", "graph_engine.frontend.graph_utils.to_undirected_csr.indices.tofile", "dir_shadow.format", "dir_shadow.format", "open", "pickle.dump", "open", "pickle.dump", "os.path.exists", "os.makedirs", "dir_shadow.format", "fm_cpp_bin.format", "fm_cpp_bin.format", "fm_cpp_bin.format", "fm_cpp_bin.format", "scipy.load_npz", "scipy.load_npz", "graph_engine.frontend.graph_utils.to_undirected_csr", "graph_engine.frontend.graph_utils.to_undirected_csr", "dir_shadow.format", "dir_shadow.format", "dir_shadow.format", "dir_shadow.format", "dir_shadow.format", "dir_shadow.format", "open", "pickle.dump", "open", "pickle.dump", "scipy.load_npz", "graph_engine.frontend.graph_utils.to_undirected_csr", "dir_shadow.format", "dir_shadow.format", "dir_shadow.format", "open", "pickle.dump", "dir_shadow.format"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.to_undirected_csr", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.to_undirected_csr", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.to_undirected_csr", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.to_undirected_csr", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.to_undirected_csr"], ["", "def", "_precompute_data", "(", "name_data", ":", "str", ",", "dir_shadow", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Save the undirected version of the adj on disk. This saves some time for \n    large datasets such as papers100M.\n    \"\"\"", "\n", "if", "name_data", "in", "[", "'papers100M'", ",", "'arxiv'", "]", ":", "\n", "        ", "adj_full", "=", "sp", ".", "load_npz", "(", "dir_shadow", ".", "format", "(", "'adj_full_raw.npz'", ")", ")", "\n", "adj_train", "=", "sp", ".", "load_npz", "(", "dir_shadow", ".", "format", "(", "'adj_train_raw.npz'", ")", ")", "\n", "adj_full_und", "=", "to_undirected_csr", "(", "adj_full", ")", "\n", "adj_train_und", "=", "to_undirected_csr", "(", "adj_train", ")", "\n", "with", "open", "(", "dir_shadow", ".", "format", "(", "'adj_full_undirected.npy'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "{", "'indptr'", ":", "adj_full_und", ".", "indptr", ",", "'indices'", ":", "adj_full_und", ".", "indices", "}", ",", "f", ",", "protocol", "=", "4", ")", "\n", "", "with", "open", "(", "dir_shadow", ".", "format", "(", "'adj_train_undirected.npy'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "{", "'indptr'", ":", "adj_train_und", ".", "indptr", ",", "'indices'", ":", "adj_train_und", ".", "indices", "}", ",", "f", ",", "protocol", "=", "4", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_shadow", ".", "format", "(", "'cpp'", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dir_shadow", ".", "format", "(", "'cpp'", ")", ")", "\n", "", "fm_cpp_bin", "=", "dir_shadow", ".", "format", "(", "'cpp'", ")", "+", "'/adj_{}_{}_{}.bin'", "\n", "adj_full_und", ".", "indptr", ".", "tofile", "(", "fm_cpp_bin", ".", "format", "(", "'full'", ",", "'undirected'", ",", "'indptr'", ")", ")", "\n", "adj_full_und", ".", "indices", ".", "tofile", "(", "fm_cpp_bin", ".", "format", "(", "'full'", ",", "'undirected'", ",", "'indices'", ")", ")", "\n", "adj_train_und", ".", "indptr", ".", "tofile", "(", "fm_cpp_bin", ".", "format", "(", "'train'", ",", "'undirected'", ",", "'indptr'", ")", ")", "\n", "adj_train_und", ".", "indices", ".", "tofile", "(", "fm_cpp_bin", ".", "format", "(", "'train'", ",", "'undirected'", ",", "'indices'", ")", ")", "\n", "", "elif", "name_data", "==", "'collab'", ":", "\n", "        ", "adj_full", "=", "sp", ".", "load_npz", "(", "dir_shadow", ".", "format", "(", "'adj_full_raw.npz'", ")", ")", "\n", "adj_full_valedges", "=", "sp", ".", "load_npz", "(", "dir_shadow", ".", "format", "(", "'adj_full_raw_with_val.npz'", ")", ")", "\n", "adj_full_und", "=", "to_undirected_csr", "(", "adj_full", ")", "\n", "adj_full_und_valedges", "=", "to_undirected_csr", "(", "adj_full_valedges", ")", "\n", "with", "open", "(", "dir_shadow", ".", "format", "(", "'adj_full_undirected.npy'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "{", "'indptr'", ":", "adj_full_und", ".", "indptr", ",", "'indices'", ":", "adj_full_und", ".", "indices", "}", ",", "f", ",", "protocol", "=", "4", ")", "\n", "", "with", "open", "(", "dir_shadow", ".", "format", "(", "'adj_full_undirected_with_val.npy'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "{", "'indptr'", ":", "adj_full_und_valedges", ".", "indptr", ",", "'indices'", ":", "adj_full_und_valedges", ".", "indices", "}", ",", "f", ",", "protocol", "=", "4", ")", "\n", "", "", "elif", "name_data", "==", "'ppa'", ":", "\n", "        ", "adj_full", "=", "sp", ".", "load_npz", "(", "dir_shadow", ".", "format", "(", "'adj_full_raw.npz'", ")", ")", "\n", "adj_full_und", "=", "to_undirected_csr", "(", "adj_full", ")", "\n", "with", "open", "(", "dir_shadow", ".", "format", "(", "'adj_full_undirected.npy'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "{", "'indptr'", ":", "adj_full_und", ".", "indptr", ",", "'indices'", ":", "adj_full_und", ".", "indices", "}", ",", "f", ",", "protocol", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.data_converter.cleanup_shaDow": [[485, 516], ["set", "itertools.chain", "set", "RuntimeError", "len", "len", "RuntimeError", "set", "os.path.isfile", "os.remove", "print", "next", "os.path.isdir", "RuntimeError", "RuntimeError", "os.walk", "glob.glob", "f.split", "next", "os.walk"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set"], ["", "", "", "def", "cleanup_shaDow", "(", "name_data", ":", "str", ",", "prefix", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"delete the converted shaDow dataset. \n    Policy: safe deletion\n        Only delete shaDow files when \n        1. the raw data (e.g., in SAINT format) exists. \n        2. the files in the folder are exactly the set of shaDow files\n    \"\"\"", "\n", "if", "name_data", "not", "in", "DATA_ZOO", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"data {name_data} is not supported\"", ")", "\n", "", "dir_shadow", "=", "f\"{prefix}/{name_data}/\"", "\n", "candy_files", "=", "set", "(", "next", "(", "os", ".", "walk", "(", "dir_shadow", ")", ")", "[", "-", "1", "]", ")", "\n", "_DATA_META", "=", "DATA_ZOO", "[", "name_data", "]", "[", "'ALL'", "]", "\n", "all_allowed_files", "=", "itertools", ".", "chain", "(", "\n", "*", "[", "glob", ".", "glob", "(", "f'{dir_shadow}/{f}'", ")", "for", "f", "in", "_DATA_META", ".", "required_files", "]", "\n", ")", "\n", "all_allowed_files", "=", "set", "(", "f", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "for", "f", "in", "all_allowed_files", ")", "\n", "if", "len", "(", "all_allowed_files", ")", "<", "len", "(", "candy_files", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"shaDow data dir possibly corrupted: contains extra files not belonging to shaDow data\\nAborting!\"", "\n", ")", "\n", "", "if", "_DATA_META", ".", "source", "==", "'SAINT'", ":", "\n", "        ", "dir_saint", "=", "f\"{prefix}/saint/{name_data}\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dir_saint", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"raw data in SAINT format does not exist. \\nAborting!\"", ")", "\n", "", "raw_candy_files", "=", "set", "(", "next", "(", "os", ".", "walk", "(", "dir_saint", ")", ")", "[", "-", "1", "]", ")", "\n", "if", "FILES_SAINT", "!=", "raw_candy_files", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"raw data in saint/ dir does not match the SAINT format\\nAborting!\"", ")", "\n", "", "", "for", "f", "in", "candy_files", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isfile", "(", "f\"{dir_shadow}/{f}\"", ")", ",", "f\"shaDow data file {dir_shadow}/{f} does not exist!\"", "\n", "os", ".", "remove", "(", "f\"{dir_shadow}/{f}\"", ")", "\n", "print", "(", "f\"Successfully removed file {dir_shadow}/{f}\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.RawGraph.__post_init__": [[30, 32], ["graph.RawGraph._validate"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.RawGraph._validate"], ["def", "__post_init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_validate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.RawGraph.entity_set": [[33, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "entity_set", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "node_set", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_set", "\n", "", "return", "self", ".", "node_set", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.RawGraph.num_nodes": [[39, 42], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_nodes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "adj_full", ".", "indptr", ".", "size", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.RawGraph.num_edges": [[43, 46], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_edges", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "adj_full", ".", "indices", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.RawGraph._validate": [[47, 58], ["None"], "methods", ["None"], ["", "def", "_validate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        TODO: now only based on homogeneous graph, and thus we have a simple csr. \n        To be extended to heterogeneous setting in the near future. \n        \"\"\"", "\n", "if", "self", ".", "feat_full", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "feat_full", ".", "shape", "[", "0", "]", "==", "self", ".", "num_nodes", ",", "f\"[RawGraph]: unmatched feature size ({self.feat_full.shape[0]}) and graph size ({self.num_nodes})\"", "\n", "", "if", "self", ".", "label_full", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "label_full", ".", "shape", "[", "0", "]", "==", "self", ".", "num_nodes", ",", "f\"[RawGraph]: unmatched label size ({self.label_full.shape[0]}) and graph size ({self.num_nodes})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.RawGraph.deinit": [[59, 65], ["setattr"], "methods", ["None"], ["", "", "def", "deinit", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        de-reference everything (e.g., tensors, numpy), so that the memory can be freed by GC\n        \"\"\"", "\n", "for", "field", "in", "self", ".", "__dataclass_fields__", ":", "\n", "            ", "setattr", "(", "self", ",", "field", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.EntityEncoding.__post_init__": [[79, 93], ["graph.EntityEncoding.check_valid", "f_dtype", "f_dtype"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.Subgraph.check_valid"], ["def", "__post_init__", "(", "self", ",", "cap_node_subg", ",", "cap_edge_subg", ",", "validate", ":", "bool", ")", ":", "\n", "        ", "if", "cap_node_subg", "is", "not", "None", "and", "cap_edge_subg", "is", "not", "None", ":", "\n", "            ", "dtype", "=", "{", "\n", "'hop'", ":", "np", ".", "int64", ",", "\n", "'ppr'", ":", "np", ".", "float32", ",", "\n", "'drnl'", ":", "np", ".", "int64", "\n", "}", "\n", "f_dtype", "=", "lambda", "n", ":", "np", ".", "uint16", "if", "n", "<", "2", "**", "16", "else", "np", ".", "uint32", "\n", "if", "cap_node_subg", "<", "2", "**", "32", ":", "\n", "                ", "dtype", "[", "'hop'", "]", "=", "f_dtype", "(", "cap_node_subg", ")", "\n", "dtype", "[", "'drnl'", "]", "=", "f_dtype", "(", "cap_node_subg", "**", "2", ")", "\n", "\n", "", "", "if", "validate", ":", "\n", "            ", "self", ".", "check_valid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.EntityEncoding.check_valid": [[94, 99], ["enc_len.remove", "len", "getattr"], "methods", ["None"], ["", "", "def", "check_valid", "(", "self", ")", ":", "\n", "        ", "enc_len", "=", "{", "getattr", "(", "self", ",", "n", ")", ".", "size", "for", "n", "in", "self", ".", "names_data_fields", "}", "\n", "if", "0", "in", "enc_len", ":", "\n", "            ", "enc_len", ".", "remove", "(", "0", ")", "\n", "", "assert", "len", "(", "enc_len", ")", "<=", "1", ",", "'all entity enc should have the same length (num subg nodes)'", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.EntityEncoding.check_valid_": [[100, 104], ["None"], "methods", ["None"], ["", "def", "check_valid_", "(", "self", ",", "subg", ")", ":", "\n", "        ", "assert", "self", ".", "hop", ".", "size", "==", "0", "or", "self", ".", "hop", ".", "size", "==", "subg", ".", "num_nodes", "\n", "assert", "self", ".", "ppr", ".", "size", "==", "0", "or", "self", ".", "ppr", ".", "size", "==", "subg", ".", "num_nodes", "\n", "assert", "self", ".", "drnl", ".", "size", "==", "0", "or", "self", ".", "drnl", ".", "size", "==", "subg", ".", "num_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.EntityEncoding.fill_hops": [[105, 130], ["set", "set", "numpy.fromiter", "len", "set", "node2hop.values", "range", "set.add"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.PoolSubgraph.add"], ["", "def", "fill_hops", "(", "self", ",", "subg", ")", ":", "\n", "        ", "\"\"\"\n        Only used by python sampler. For C++ sampler, the backend will take care of the \"hops\" annotation. \n        Set the hop number for all subgraph nodes\n        \n        Update the values of self.hop\n        \"\"\"", "\n", "assert", "subg", ".", "target", ".", "size", "==", "1", ",", "'use drnl or other de for feat augmentation'", "\n", "node2hop", "=", "{", "n", ":", "None", "for", "n", "in", "range", "(", "subg", ".", "indptr", ".", "size", "-", "1", ")", "}", "\n", "node2hop", "[", "subg", ".", "target", "[", "0", "]", "]", "=", "0", "\n", "cur_level", "=", "set", "(", "subg", ".", "target", ")", "\n", "num_level", "=", "0", "\n", "next_level", "=", "set", "(", ")", "\n", "while", "len", "(", "cur_level", ")", ">", "0", ":", "\n", "            ", "next_level", "=", "set", "(", ")", "\n", "num_level", "+=", "1", "\n", "for", "n", "in", "cur_level", ":", "\n", "                ", "for", "u", "in", "subg", ".", "indices", "[", "subg", ".", "indptr", "[", "n", "]", ":", "subg", ".", "indptr", "[", "n", "+", "1", "]", "]", ":", "\n", "                    ", "if", "node2hop", "[", "u", "]", "is", "not", "None", ":", "\n", "                        ", "continue", "\n", "", "node2hop", "[", "u", "]", "=", "num_level", "\n", "next_level", ".", "add", "(", "u", ")", "\n", "", "", "cur_level", "=", "next_level", "\n", "", "assert", "node2hop", "[", "subg", ".", "target", "[", "0", "]", "]", "==", "0", "\n", "self", ".", "hop", "=", "np", ".", "fromiter", "(", "node2hop", ".", "values", "(", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.EntityEncoding.fill_drnl": [[131, 133], ["None"], "methods", ["None"], ["", "def", "fill_drnl", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.EntityEncoding.hop2onehot_vec": [[134, 148], ["numpy.zeros", "len", "torch.tensor", "range", "numpy.where", "numpy.where"], "methods", ["None"], ["", "def", "hop2onehot_vec", "(", "self", ",", "dim_1hot_vec", ":", "int", ",", "return_type", ":", "str", "=", "\"tensor\"", ")", ":", "\n", "        ", "\"\"\"\n        1-hot encoding to facilitate NN input\n        \n        dim_1hot_vec = max hop to keep + 0-hop (self) + infty-hop (unreachable)\n        \"\"\"", "\n", "assert", "len", "(", "self", ".", "hop", ".", "shape", ")", "==", "1", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "self", ".", "hop", ".", "size", ",", "dim_1hot_vec", ")", ")", "\n", "valid_h", "=", "[", "-", "1", ",", "0", "]", "+", "[", "i", "for", "i", "in", "range", "(", "1", ",", "dim_1hot_vec", "-", "1", ")", "]", "\n", "for", "i", "in", "valid_h", ":", "\n", "            ", "ret", "[", "np", ".", "where", "(", "self", ".", "hop", "==", "i", ")", "[", "0", "]", ",", "i", "+", "1", "]", "=", "1", "\n", "# handle overflow separately", "\n", "", "ret", "[", "np", ".", "where", "(", "self", ".", "hop", ">=", "255", ")", "[", "0", "]", ",", "0", "]", "=", "1", "\n", "return", "torch", ".", "tensor", "(", "ret", ")", "if", "return_type", "==", "'tensor'", "else", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.EntityEncoding.ppr2onehot_vec": [[149, 159], ["numpy.zeros", "range", "len", "torch.tensor", "range", "numpy.where", "numpy.logical_and"], "methods", ["None"], ["", "def", "ppr2onehot_vec", "(", "self", ",", "dim_1hot_vec", ":", "int", ",", "return_type", ":", "str", "=", "\"tensor\"", ")", ":", "\n", "        ", "\"\"\"1-hot encoding to facilitate NN input\"\"\"", "\n", "assert", "len", "(", "self", ".", "ppr", ".", "shape", ")", "==", "1", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "self", ".", "ppr", ".", "size", ",", "dim_1hot_vec", ")", ")", "\n", "# below just a very rough heuristic...", "\n", "cond_filter", "=", "[", "0.25", "**", "i", "for", "i", "in", "range", "(", "dim_1hot_vec", ")", "]", "\n", "cond_filter", "+=", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "dim_1hot_vec", ")", ":", "\n", "            ", "ret", "[", "np", ".", "where", "(", "np", ".", "logical_and", "(", "self", ".", "ppr", "<=", "cond_filter", "[", "i", "]", ",", "self", ".", "ppr", ">=", "cond_filter", "[", "i", "+", "1", "]", ")", ")", ",", "i", "]", "=", "1", "\n", "", "return", "torch", ".", "tensor", "(", "ret", ")", "if", "return_type", "==", "'tensor'", "else", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.EntityEncoding.drnl2onehot_vec": [[160, 173], ["numpy.zeros", "len", "torch.tensor", "numpy.arange"], "methods", ["None"], ["", "def", "drnl2onehot_vec", "(", "self", ",", "dim_1hot_vec", ":", "int", ",", "return_type", ":", "str", "=", "\"tensor\"", ")", ":", "\n", "        ", "\"\"\"\n        1-hot encoding to facilitate NN input\n        \n        dim_1hot_vec = max drnl to keep + infty-hop (unreachable)\n        \"\"\"", "\n", "assert", "len", "(", "self", ".", "drnl", ".", "shape", ")", "==", "1", "\n", "self", ".", "drnl", "[", "self", ".", "drnl", ">=", "255", "]", "=", "0", "\n", "self", ".", "drnl", "[", "self", ".", "drnl", ">", "dim_1hot_vec", "-", "1", "]", "=", "0", "\n", "self", ".", "drnl", "[", "self", ".", "drnl", "<", "0", "]", "=", "0", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "self", ".", "drnl", ".", "size", ",", "dim_1hot_vec", ")", ")", "# idx 0 = unreachable by one of the targets. i.e., infty drnl", "\n", "ret", "[", "np", ".", "arange", "(", "self", ".", "drnl", ".", "size", ")", ",", "self", ".", "drnl", "]", "=", "1", "\n", "return", "torch", ".", "tensor", "(", "ret", ")", "if", "return_type", "==", "'tensor'", "else", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.EntityEncoding.cat_batch": [[174, 183], ["numpy.concatenate", "numpy.concatenate", "cls", "numpy.array", "numpy.concatenate"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "cat_batch", "(", "cls", ",", "subgs_batch", ")", ":", "\n", "        ", "if", "subgs_batch", "[", "0", "]", ".", "entity_enc", ".", "ppr", ".", "size", "==", "0", ":", "\n", "            ", "ppr_batch", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "            ", "ppr_batch", "=", "np", ".", "concatenate", "(", "[", "s", ".", "entity_enc", ".", "ppr", "for", "s", "in", "subgs_batch", "]", ")", "\n", "", "hop_batch", "=", "np", ".", "concatenate", "(", "[", "s", ".", "entity_enc", ".", "hop", "for", "s", "in", "subgs_batch", "]", ")", "\n", "drnl_batch", "=", "np", ".", "concatenate", "(", "[", "s", ".", "entity_enc", ".", "drnl", "for", "s", "in", "subgs_batch", "]", ")", "\n", "return", "cls", "(", "hop", "=", "hop_batch", ",", "ppr", "=", "ppr_batch", ",", "drnl", "=", "drnl_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.ProfileSubgraph.get_neighbor_hop_composition": [[190, 192], ["None"], "methods", ["None"], ["def", "get_neighbor_hop_composition", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.Subgraph.__post_init__": [[223, 258], ["numpy.all", "graph.Subgraph.check_valid", "f_dtype", "f_dtype", "f_dtype", "f_dtype", "f_dtype", "set", "set", "getattr", "numpy.broadcast_to", "dtype.keys", "setattr", "numpy.array", "getattr.astype"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.Subgraph.check_valid", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set"], ["def", "__post_init__", "(", "self", ",", "cap_node_full", ",", "cap_edge_full", ",", "cap_node_subg", ",", "cap_edge_subg", ",", "validate", ":", "bool", ")", ":", "\n", "        ", "\"\"\"\n        All subgraphs sampled by the same sampler should have the same dtype, since cap_*_subg are an upper bound\n        for all subgraphs under that sampler. \n        \"\"\"", "\n", "if", "cap_node_full", "is", "not", "None", "and", "cap_edge_full", "is", "not", "None", "and", "cap_node_subg", "is", "not", "None", "and", "cap_edge_subg", "is", "not", "None", ":", "\n", "            ", "dtype", "=", "{", "\n", "'indptr'", ":", "np", ".", "int64", ",", "\n", "'indices'", ":", "np", ".", "int64", ",", "\n", "'data'", ":", "np", ".", "float32", ",", "\n", "'node'", ":", "np", ".", "int64", ",", "\n", "'edge_index'", ":", "np", ".", "int64", ",", "\n", "'target'", ":", "np", ".", "int64", "\n", "}", "\n", "f_dtype", "=", "lambda", "n", ":", "np", ".", "uint16", "if", "n", "<", "2", "**", "16", "else", "np", ".", "uint32", "\n", "if", "cap_node_full", "<", "2", "**", "32", ":", "\n", "                ", "dtype", "[", "'node'", "]", "=", "f_dtype", "(", "cap_node_full", ")", "\n", "", "if", "cap_edge_full", "<", "2", "**", "32", ":", "\n", "                ", "dtype", "[", "'edge_index'", "]", "=", "f_dtype", "(", "cap_edge_full", ")", "\n", "", "if", "cap_node_subg", "<", "2", "**", "32", ":", "\n", "                ", "dtype", "[", "'indices'", "]", "=", "f_dtype", "(", "cap_node_subg", ")", "\n", "dtype", "[", "'target'", "]", "=", "f_dtype", "(", "cap_node_subg", ")", "\n", "", "if", "cap_edge_subg", "<", "2", "**", "32", ":", "\n", "                ", "dtype", "[", "'indptr'", "]", "=", "f_dtype", "(", "cap_edge_subg", ")", "\n", "", "assert", "set", "(", "dtype", ".", "keys", "(", ")", ")", "==", "set", "(", "self", ".", "names_data_fields", ")", "\n", "for", "n", "in", "self", ".", "names_data_fields", ":", "\n", "                ", "v", "=", "getattr", "(", "self", ",", "n", ")", "\n", "if", "v", "is", "not", "None", ":", "\n", "                    ", "setattr", "(", "self", ",", "n", ",", "v", ".", "astype", "(", "dtype", "[", "n", "]", ",", "copy", "=", "False", ")", ")", "\n", "# explicitly handle data -- if it is all 1.", "\n", "", "", "if", "np", ".", "all", "(", "self", ".", "data", "==", "1.", ")", ":", "\n", "                ", "self", ".", "data", "=", "np", ".", "broadcast_to", "(", "np", ".", "array", "(", "[", "1.", "]", ")", ",", "self", ".", "data", ".", "size", ")", "\n", "", "", "if", "validate", ":", "\n", "            ", "self", ".", "check_valid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.Subgraph._copy": [[259, 264], ["graph.Subgraph.__class__", "getattr().copy", "getattr"], "methods", ["None"], ["", "", "def", "_copy", "(", "self", ")", ":", "\n", "        ", "datacopy", "=", "{", "}", "\n", "for", "n", "in", "self", ".", "names_data_fields", ":", "\n", "            ", "datacopy", "[", "n", "]", "=", "getattr", "(", "self", ",", "n", ")", ".", "copy", "(", ")", "\n", "", "return", "self", ".", "__class__", "(", "**", "datacopy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.Subgraph.check_valid": [[265, 271], ["graph.Subgraph.entity_enc.check_valid_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.EntityEncoding.check_valid_"], ["", "def", "check_valid", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "node", ".", "size", "==", "0", "or", "self", ".", "node", ".", "size", "==", "self", ".", "indptr", ".", "size", "-", "1", "\n", "assert", "self", ".", "indices", ".", "size", "==", "self", ".", "data", ".", "size", "==", "self", ".", "indptr", "[", "-", "1", "]", "\n", "assert", "self", ".", "edge_index", ".", "size", "==", "0", "or", "self", ".", "edge_index", ".", "size", "==", "self", ".", "indices", ".", "size", "\n", "self", ".", "entity_enc", ".", "check_valid_", "(", "self", ")", "\n", "assert", "self", ".", "indptr", ".", "size", ">=", "2", ",", "\"Subgraph must contain at least 1 node!\"", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.Subgraph.num_nodes": [[272, 275], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_nodes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "node", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.Subgraph.num_edges": [[276, 279], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_edges", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "indices", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.Subgraph.cat_to_block_diagonal": [[280, 321], ["numpy.cumsum", "numpy.cumsum", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "range", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "graph.EntityEncoding.cat_batch", "cls", "s.target.astype", "s.indptr.astype", "s.indices.astype", "len", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.EntityEncoding.cat_batch"], ["", "@", "classmethod", "\n", "def", "cat_to_block_diagonal", "(", "cls", ",", "subgs", ":", "list", ")", ":", "\n", "        ", "\"\"\" Concatenate subgraphs into a full adj matrix (i.e., into the block diagonal form) \"\"\"", "\n", "offset_indices", "=", "np", ".", "cumsum", "(", "[", "s", ".", "node", ".", "size", "for", "s", "in", "subgs", "]", ")", "# always int64", "\n", "offset_indptr", "=", "np", ".", "cumsum", "(", "[", "s", ".", "edge_index", ".", "size", "for", "s", "in", "subgs", "]", ")", "# ^", "\n", "offset_indices", "[", "1", ":", "]", "=", "offset_indices", "[", ":", "-", "1", "]", "\n", "offset_indices", "[", "0", "]", "=", "0", "\n", "offset_indptr", "[", "1", ":", "]", "=", "offset_indptr", "[", ":", "-", "1", "]", "\n", "offset_indptr", "[", "0", "]", "=", "0", "\n", "node_batch", "=", "np", ".", "concatenate", "(", "[", "s", ".", "node", "for", "s", "in", "subgs", "]", ")", "# keep original dtype", "\n", "edge_index_batch", "=", "np", ".", "concatenate", "(", "[", "s", ".", "edge_index", "for", "s", "in", "subgs", "]", ")", "# ^", "\n", "data_batch", "=", "np", ".", "concatenate", "(", "[", "s", ".", "data", "for", "s", "in", "subgs", "]", ")", "# ^", "\n", "target_batch_itr", "=", "[", "s", ".", "target", ".", "astype", "(", "np", ".", "int64", ")", "for", "s", "in", "subgs", "]", "\n", "indptr_batch_itr", "=", "[", "s", ".", "indptr", ".", "astype", "(", "np", ".", "int64", ")", "for", "s", "in", "subgs", "]", "\n", "indices_batch_itr", "=", "[", "s", ".", "indices", ".", "astype", "(", "np", ".", "int64", ")", "for", "s", "in", "subgs", "]", "\n", "target_batch", ",", "indptr_batch", ",", "indices_batch", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "subgs", ")", ")", ":", "\n", "            ", "target_batch", ".", "append", "(", "target_batch_itr", "[", "i", "]", "+", "offset_indices", "[", "i", "]", ")", "\n", "if", "i", ">", "0", ":", "# end of indptr1 equals beginning of indptr2. So remove one duplicate to ensure correctness. ", "\n", "                ", "indptr_batch_itr", "[", "i", "]", "=", "indptr_batch_itr", "[", "i", "]", "[", "1", ":", "]", "\n", "", "indptr_batch", ".", "append", "(", "indptr_batch_itr", "[", "i", "]", "+", "offset_indptr", "[", "i", "]", ")", "\n", "indices_batch", ".", "append", "(", "indices_batch_itr", "[", "i", "]", "+", "offset_indices", "[", "i", "]", ")", "\n", "", "target_batch", "=", "np", ".", "concatenate", "(", "target_batch", ")", "\n", "indptr_batch", "=", "np", ".", "concatenate", "(", "indptr_batch", ")", "\n", "indices_batch", "=", "np", ".", "concatenate", "(", "indices_batch", ")", "\n", "entity_enc_batch", "=", "EntityEncoding", ".", "cat_batch", "(", "subgs", ")", "\n", "ret_subg", "=", "cls", "(", "\n", "indptr", "=", "indptr_batch", ",", "\n", "indices", "=", "indices_batch", ",", "\n", "data", "=", "data_batch", ",", "\n", "node", "=", "node_batch", ",", "\n", "edge_index", "=", "edge_index_batch", ",", "\n", "target", "=", "target_batch", ",", "\n", "entity_enc", "=", "entity_enc_batch", ",", "\n", "cap_node_full", "=", "2", "**", "63", ",", "# just be safe. Note that concated subgraphs are only used for one batch. ", "\n", "cap_edge_full", "=", "2", "**", "63", ",", "\n", "cap_node_subg", "=", "2", "**", "63", ",", "\n", "cap_edge_subg", "=", "2", "**", "63", ",", "\n", "validate", "=", "True", "\n", ")", "\n", "return", "ret_subg", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.Subgraph.to_csr_sp": [[322, 331], ["scipy.csr_matrix", "scipy.csr_matrix.indices.astype", "scipy.csr_matrix.indptr.astype"], "methods", ["None"], ["", "def", "to_csr_sp", "(", "self", ")", ":", "\n", "        ", "num_nodes", "=", "self", ".", "indptr", ".", "size", "-", "1", "\n", "adj", "=", "sp", ".", "csr_matrix", "(", "\n", "(", "self", ".", "data", ",", "self", ".", "indices", ",", "self", ".", "indptr", ")", ",", "shape", "=", "(", "num_nodes", ",", "num_nodes", ")", "\n", ")", "\n", "if", "self", ".", "indices", ".", "dtype", "!=", "np", ".", "int64", ":", "\n", "            ", "adj", ".", "indices", "=", "adj", ".", "indices", ".", "astype", "(", "self", ".", "indices", ".", "dtype", ",", "copy", "=", "False", ")", "\n", "adj", ".", "indptr", "=", "adj", ".", "indptr", ".", "astype", "(", "self", ".", "indptr", ".", "dtype", ",", "copy", "=", "False", ")", "\n", "", "return", "adj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.GraphSampler.__init__": [[29, 48], ["samplers_base.GraphSampler.preproc"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_python.KHopSamplingPy.preproc"], ["def", "__init__", "(", "self", ",", "adj", ",", "aug_feat", ",", "args_preproc", ",", "num_subg_per_batch", "=", "200", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            adj             scipy sparse CSR matrix of the training graph\n            args_preproc    dict, addition arguments needed for pre-processing\n\n        Outputs:\n            None\n        \"\"\"", "\n", "self", ".", "adj", "=", "adj", "\n", "self", ".", "node_target", "=", "None", "\n", "self", ".", "aug_feat", "=", "aug_feat", "\n", "# size in terms of number of vertices in subgraph", "\n", "self", ".", "name_sampler", "=", "\"None\"", "\n", "self", ".", "node_subgraph", "=", "None", "\n", "self", ".", "preproc", "(", "**", "args_preproc", ")", "\n", "self", ".", "backend", "=", "None", "\n", "self", ".", "num_subg_per_batch", "=", "num_subg_per_batch", "\n", "self", ".", "idx_root_traversed", "=", "0", "# use this idx to sequentially traverse the node_target. ", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.GraphSampler.num_nodes": [[49, 52], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_nodes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "adj", ".", "indptr", ".", "size", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.GraphSampler.num_edges": [[53, 56], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_edges", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "adj", ".", "indices", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.GraphSampler.preproc": [[57, 59], ["None"], "methods", ["None"], ["", "def", "preproc", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.GraphSampler.parallel_sample": [[60, 75], ["samplers_base.GraphSampler.pre_batch_select_roots", "samplers_base.GraphSampler.post_batch_update_idx", "numpy.array", "range", "samplers_base.GraphSampler._parallel_sample", "samplers_base.GraphSampler.append", "graph_engine.frontend.graph.Subgraph"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.GraphSampler.pre_batch_select_roots", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.GraphSampler.post_batch_update_idx", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_python.KHopSamplingPy._parallel_sample"], ["", "def", "parallel_sample", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        This is a wrapper of _parallel_sample\n        \"\"\"", "\n", "roots_batch", "=", "self", ".", "pre_batch_select_roots", "(", ")", "\n", "if", "'return_target_only'", "in", "kwargs", "and", "kwargs", "[", "'return_target_only'", "]", ":", "\n", "            ", "ret", "=", "[", "]", "\n", "arr_dummy", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "roots_batch", ".", "size", ",", "self", ".", "size_root", ")", ":", "\n", "                ", "args", "=", "[", "arr_dummy", "]", "*", "3", "+", "[", "roots_batch", "[", "i", ":", "i", "+", "self", ".", "size_root", "]", "]", "+", "[", "arr_dummy", "]", "*", "5", "\n", "ret", ".", "append", "(", "Subgraph", "(", "*", "args", ",", "validate", "=", "False", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "ret", "=", "self", ".", "_parallel_sample", "(", "roots_batch", ",", "**", "kwargs", ")", "\n", "", "self", ".", "post_batch_update_idx", "(", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.GraphSampler._parallel_sample": [[76, 78], ["None"], "methods", ["None"], ["", "def", "_parallel_sample", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.GraphSampler.post_batch_update_idx": [[79, 83], ["None"], "methods", ["None"], ["", "def", "post_batch_update_idx", "(", "self", ")", ":", "\n", "        ", "self", ".", "idx_root_traversed", "+=", "self", ".", "num_subg_per_batch", "\n", "if", "self", ".", "idx_root_traversed", ">=", "self", ".", "node_target", ".", "size", ":", "\n", "            ", "self", ".", "idx_root_traversed", "=", "0", "# reset for next epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.GraphSampler.pre_batch_select_roots": [[84, 86], ["None"], "methods", ["None"], ["", "", "def", "pre_batch_select_roots", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "node_target", "[", "self", ".", "idx_root_traversed", ":", "self", ".", "idx_root_traversed", "+", "self", ".", "num_subg_per_batch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.GraphSampler.shuffle_targets": [[87, 92], ["numpy.random.permutation"], "methods", ["None"], ["", "def", "shuffle_targets", "(", "self", ",", "targets_shuffled", "=", "None", ")", ":", "\n", "        ", "if", "targets_shuffled", "is", "not", "None", "and", "targets_shuffled", ".", "size", ">", "0", ":", "\n", "            ", "self", ".", "node_target", "=", "targets_shuffled", "\n", "", "else", ":", "\n", "            ", "self", ".", "node_target", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "node_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.GraphSampler.helper_extract_subgraph": [[93, 177], ["numpy.unique", "numpy.unique.sort", "numpy.zeros", "indptr.cumsum().astype.cumsum().astype.cumsum().astype", "numpy.array", "numpy.array", "numpy.ones", "min", "min", "graph_engine.frontend.graph.EntityEncoding", "graph_engine.frontend.graph.Subgraph", "numpy.array", "enumerate", "numpy.array", "numpy.array", "numpy.array", "graph_engine.frontend.graph.Subgraph.entity_enc.fill_hops", "graph_engine.frontend.graph.Subgraph.entity_enc.fill_drnl", "enumerate", "type", "set", "numpy.array", "isinstance", "indptr.cumsum().astype.cumsum().astype.cumsum", "numpy.array", "numpy.array.append", "numpy.array.append"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.EntityEncoding.fill_hops", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph.EntityEncoding.fill_drnl", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set"], ["", "", "def", "helper_extract_subgraph", "(", "\n", "self", ",", "\n", "node_ids", ",", "\n", "target_ids", "=", "None", ",", "\n", "type_aug", "=", "{", "'hop'", "}", ",", "\n", "cap_node_subg", "=", "None", ",", "\n", "cap_edge_subg", "=", "None", ",", "\n", "remove_target_links", "=", "True", "\n", ")", ":", "\n", "        ", "\"\"\" NOTE this func is not used by exp in our paper. Just provided for your reference. \n        Used for serial Python sampler (not for the parallel C++ sampler).\n        Return adj of node-induced subgraph and other corresponding data struct.\n\n        Inputs:\n            node_ids        1D np array, each element is the ID in the original\n                            training graph.\n            type_aug        types of feature augmentation. currently only support hop\n            remove_target_links     if true, will not include the edges among target nodes\n        Outputs: --> Subgraph\n        \"\"\"", "\n", "# Let n = num subg nodes; m = num subg edges", "\n", "node_ids", "=", "np", ".", "unique", "(", "node_ids", ")", "\n", "node_ids", ".", "sort", "(", ")", "\n", "orig2subg", "=", "{", "n", ":", "i", "for", "i", ",", "n", "in", "enumerate", "(", "node_ids", ")", "}", "\n", "n", "=", "node_ids", ".", "size", "\n", "indptr", "=", "np", ".", "zeros", "(", "node_ids", ".", "size", "+", "1", ")", "\n", "indices", "=", "[", "]", "\n", "subg_edge_index", "=", "[", "]", "\n", "subg_nodes", "=", "node_ids", "\n", "if", "target_ids", "is", "None", ":", "\n", "            ", "target_set", "=", "{", "}", "\n", "target", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "", "elif", "type", "(", "target_ids", ")", "==", "np", ".", "ndarray", ":", "\n", "            ", "target_set", "=", "set", "(", "target_ids", ")", "\n", "target", "=", "np", ".", "array", "(", "[", "orig2subg", "[", "t", "]", "for", "t", "in", "target_ids", "]", ")", "\n", "", "elif", "isinstance", "(", "target_ids", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "target_set", "=", "{", "target_ids", "}", "\n", "target", "=", "np", ".", "array", "(", "[", "orig2subg", "[", "target_ids", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "for", "nid", "in", "node_ids", ":", "\n", "            ", "idx_s", ",", "idx_e", "=", "self", ".", "adj", ".", "indptr", "[", "nid", "]", ",", "self", ".", "adj", ".", "indptr", "[", "nid", "+", "1", "]", "\n", "neighs", "=", "self", ".", "adj", ".", "indices", "[", "idx_s", ":", "idx_e", "]", "\n", "for", "i_n", ",", "n", "in", "enumerate", "(", "neighs", ")", ":", "\n", "                ", "if", "n", "in", "orig2subg", "and", "(", "not", "remove_target_links", "or", "n", "==", "nid", "or", "\n", "n", "not", "in", "target_set", "or", "nid", "not", "in", "target_set", ")", ":", "\n", "                    ", "indices", ".", "append", "(", "orig2subg", "[", "n", "]", ")", "\n", "indptr", "[", "orig2subg", "[", "nid", "]", "+", "1", "]", "+=", "1", "\n", "subg_edge_index", ".", "append", "(", "idx_s", "+", "i_n", ")", "\n", "", "", "", "indptr", "=", "indptr", ".", "cumsum", "(", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "indices", "=", "np", ".", "array", "(", "indices", ")", "\n", "subg_edge_index", "=", "np", ".", "array", "(", "subg_edge_index", ")", "\n", "data", "=", "np", ".", "ones", "(", "indices", ".", "size", ")", "\n", "assert", "indptr", "[", "-", "1", "]", "==", "indices", ".", "size", "==", "subg_edge_index", ".", "size", "\n", "if", "cap_node_subg", "is", "None", "or", "cap_node_subg", "<", "1", ":", "\n", "            ", "cap_node_subg", "=", "self", ".", "adj", ".", "indptr", ".", "size", "-", "1", "\n", "", "cap_node_subg", "=", "min", "(", "cap_node_subg", ",", "self", ".", "adj", ".", "indptr", ".", "size", "-", "1", ")", "\n", "if", "cap_edge_subg", "is", "None", "or", "cap_edge_subg", "<", "1", ":", "\n", "            ", "cap_edge_subg", "=", "self", ".", "adj", ".", "indices", ".", "size", "\n", "", "cap_edge_subg", "=", "min", "(", "cap_edge_subg", ",", "self", ".", "adj", ".", "indices", ".", "size", ")", "\n", "ret_subg_enc", "=", "EntityEncoding", "(", "np", ".", "array", "(", "[", "]", ")", ",", "np", ".", "array", "(", "[", "]", ")", ",", "np", ".", "array", "(", "[", "]", ")", ")", "\n", "ret_subg", "=", "Subgraph", "(", "\n", "indptr", ",", "\n", "indices", ",", "\n", "data", ",", "\n", "subg_nodes", ",", "\n", "subg_edge_index", ",", "\n", "target", ",", "\n", "ret_subg_enc", ",", "\n", "cap_node_full", "=", "self", ".", "adj", ".", "indptr", ".", "size", "-", "1", ",", "\n", "cap_edge_full", "=", "self", ".", "adj", ".", "indices", ".", "size", ",", "\n", "cap_node_subg", "=", "cap_node_subg", ",", "\n", "cap_edge_subg", "=", "cap_edge_subg", ",", "\n", "validate", "=", "True", "\n", ")", "\n", "if", "type_aug", "is", "None", ":", "\n", "            ", "type_aug", "=", "{", "}", "\n", "", "if", "'hop'", "in", "type_aug", ":", "\n", "            ", "assert", "target", ".", "size", "==", "1", ",", "'only node classification task can be augmented with hops'", "\n", "ret_subg", ".", "entity_enc", ".", "fill_hops", "(", ")", "\n", "", "if", "'drnl'", "in", "type_aug", ":", "\n", "            ", "assert", "target", ".", "size", "==", "2", ",", "'only link prediction task can be augmented with drnl'", "\n", "ret_subg", ".", "entity_enc", ".", "fill_drnl", "(", ")", "\n", "", "return", "ret_subg", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.NodeIIDBase.__init__": [[180, 183], ["samplers_base.GraphSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__"], ["    ", "def", "__init__", "(", "self", ",", "adj", ",", "aug_feat", ",", "num_subg_per_batch", "=", "200", ")", ":", "\n", "        ", "self", ".", "name", "=", "'nodeIID'", "\n", "super", "(", ")", ".", "__init__", "(", "adj", ",", "aug_feat", ",", "{", "}", ",", "num_subg_per_batch", "=", "num_subg_per_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.NodeIIDBase.preproc": [[184, 186], ["None"], "methods", ["None"], ["", "def", "preproc", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.KHopSamplingBase.__init__": [[197, 214], ["samplers_base.GraphSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__"], ["def", "__init__", "(", "self", ",", "adj", ",", "aug_feat", ",", "size_root", ",", "depth", ",", "budget", ",", "num_subg_per_batch", "=", "200", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            adj             see super-class\n            node_target     see super-class\n            size_root       int, number of root nodes randomly picked\n            depth           int, number of hops to expand\n            budget          int, number of hop-(i+1) neighbors to expand\n\n        Outputs:\n            None\n        \"\"\"", "\n", "self", ".", "size_root", "=", "size_root", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "budget", "=", "budget", "\n", "self", ".", "name", "=", "\"khop\"", "\n", "super", "(", ")", ".", "__init__", "(", "adj", ",", "aug_feat", ",", "{", "}", ",", "num_subg_per_batch", "=", "num_subg_per_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.KHopSamplingBase.preproc": [[215, 217], ["None"], "methods", ["None"], ["", "def", "preproc", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.PPRSamplingBase.__init__": [[223, 252], ["samplers_base.GraphSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "adj", ",", "\n", "aug_feat", ",", "\n", "size_root", ",", "\n", "k", ",", "\n", "alpha", "=", "0.85", ",", "\n", "epsilon", "=", "1e-5", ",", "\n", "threshold", "=", "0", ",", "\n", "num_subg_per_batch", "=", "200", ",", "\n", "args_preproc", "=", "{", "}", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Inputs:\n            adj             see super-class\n            size_root       int, number of root nodes randomly picked\n            k               int, number of hops to expand\n            budget          int, number of hop-(i+1) neighbors to expand\n\n        Outputs:\n            None\n        \"\"\"", "\n", "self", ".", "size_root", "=", "size_root", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "name", "=", "\"ppr\"", "\n", "super", "(", ")", ".", "__init__", "(", "adj", ",", "aug_feat", ",", "args_preproc", ",", "num_subg_per_batch", "=", "num_subg_per_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.PPRSamplingBase.preproc": [[253, 255], ["None"], "methods", ["None"], ["", "def", "preproc", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.get_adj_dtype": [[11, 17], ["max"], "function", ["None"], ["def", "get_adj_dtype", "(", "adj", "=", "None", ",", "num_nodes", "=", "-", "1", ",", "num_edges", "=", "-", "1", ")", ":", "\n", "    ", "if", "adj", "is", "not", "None", ":", "\n", "        ", "num_nodes", ",", "num_edges", "=", "adj", ".", "shape", "[", "0", "]", ",", "adj", ".", "size", "\n", "", "else", ":", "\n", "        ", "assert", "num_edges", ">", "0", "and", "num_nodes", ">", "0", "\n", "", "return", "np", ".", "uint32", "if", "max", "(", "num_nodes", ",", "num_edges", ")", "<", "2", "**", "32", "else", "np", ".", "int64", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.to_undirected_csr": [[19, 46], ["print", "adj.tocoo", "scipy.coo_matrix", "adj_trans.tocsr.tocsr", "numpy.zeros", "range", "numpy.concatenate", "numpy.broadcast_to", "scipy.csr_matrix", "graph_utils.get_adj_dtype", "sp.csr_matrix.indptr.astype", "sp.csr_matrix.indices.astype", "print", "numpy.union1d", "np.concatenate.append", "numpy.ones", "adj.data.max", "adj.data.min"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.get_adj_dtype"], ["", "def", "to_undirected_csr", "(", "adj", ")", ":", "\n", "    ", "\"\"\"\n    input adj is in csr format\n    returned adj is in csr format\n    \"\"\"", "\n", "print", "(", "\"Converting graph to undirected. This may take a while for large graphs ...\"", ")", "\n", "if", "not", "(", "adj", ".", "data", ".", "max", "(", ")", "==", "adj", ".", "data", ".", "min", "(", ")", "==", "1", ")", ":", "\n", "        ", "adj", ".", "data", "[", ":", "]", "=", "1", "\n", "print", "(", "\"[WARNING]: DISCARDING ALL EDGE VALUES WHEN TRANSFORMING TO UNDIRECTED GRAPH!!\"", ")", "\n", "", "adj_coo", "=", "adj", ".", "tocoo", "(", ")", "\n", "adj_trans", "=", "sp", ".", "coo_matrix", "(", "(", "adj_coo", ".", "data", ",", "(", "adj_coo", ".", "col", ",", "adj_coo", ".", "row", ")", ")", ",", "shape", "=", "adj_coo", ".", "shape", ")", "\n", "adj_trans", "=", "adj_trans", ".", "tocsr", "(", ")", "\n", "indptr_new", "=", "np", ".", "zeros", "(", "adj", ".", "indptr", ".", "size", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "indices_new", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "adj", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "neigh1", "=", "adj", ".", "indices", "[", "adj", ".", "indptr", "[", "i", "]", ":", "adj", ".", "indptr", "[", "i", "+", "1", "]", "]", "\n", "neigh2", "=", "adj_trans", ".", "indices", "[", "adj_trans", ".", "indptr", "[", "i", "]", ":", "adj_trans", ".", "indptr", "[", "i", "+", "1", "]", "]", "\n", "neigh_merged", "=", "np", ".", "union1d", "(", "neigh1", ",", "neigh2", ")", "\n", "indptr_new", "[", "i", "+", "1", "]", "=", "indptr_new", "[", "i", "]", "+", "neigh_merged", ".", "size", "\n", "indices_new", ".", "append", "(", "neigh_merged", ")", "\n", "", "indices_new", "=", "np", ".", "concatenate", "(", "indices_new", ")", "\n", "data_new", "=", "np", ".", "broadcast_to", "(", "np", ".", "ones", "(", "1", ",", "dtype", "=", "np", ".", "bool", ")", ",", "indices_new", ".", "size", ")", "\n", "adj_und", "=", "sp", ".", "csr_matrix", "(", "(", "data_new", ",", "indices_new", ",", "indptr_new", ")", ",", "shape", "=", "adj", ".", "shape", ")", "\n", "dtype", "=", "get_adj_dtype", "(", "adj", "=", "adj_und", ")", "\n", "adj_und", ".", "indptr", "=", "adj_und", ".", "indptr", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "\n", "adj_und", ".", "indices", "=", "adj_und", ".", "indices", ".", "astype", "(", "dtype", ",", "copy", "=", "False", ")", "\n", "return", "adj_und", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.coo_scipy2torch": [[48, 57], ["numpy.vstack", "torch.LongTensor", "torch.FloatTensor().type", "torch.sparse.FloatTensor", "torch.get_default_dtype", "torch.Size", "torch.FloatTensor"], "function", ["None"], ["", "def", "coo_scipy2torch", "(", "adj", ")", ":", "\n", "    ", "\"\"\"\n    convert a scipy sparse COO matrix to torch\n    \"\"\"", "\n", "values", "=", "adj", ".", "data", "\n", "indices", "=", "np", ".", "vstack", "(", "(", "adj", ".", "row", ",", "adj", ".", "col", ")", ")", "\n", "i", "=", "torch", ".", "LongTensor", "(", "indices", ")", "\n", "v", "=", "torch", ".", "FloatTensor", "(", "values", ")", ".", "type", "(", "torch", ".", "get_default_dtype", "(", ")", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "i", ",", "v", ",", "torch", ".", "Size", "(", "adj", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.get_deg_torch_sparse": [[63, 65], ["torch_scatter.scatter", "adj._values", "adj._indices"], "function", ["None"], ["", "def", "get_deg_torch_sparse", "(", "adj", ")", ":", "\n", "    ", "return", "scatter", "(", "adj", ".", "_values", "(", ")", ",", "adj", ".", "_indices", "(", ")", "[", "0", "]", ",", "reduce", "=", "\"sum\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.adj_norm_rw": [[67, 107], ["type", "graph_utils.get_deg_torch_sparse", "torch.repeat_interleave", "adj._values", "torch.clamp", "numpy.clip", "scipy.dia_matrix", "sp.dia_matrix.dot", "torch.sum().cpu().long().item", "int", "torch.floor().long", "graph_utils.get_deg_torch_sparse", "get_deg_torch_sparse.long", "adj.sum().flatten", "norm_diag.dot.sort_indices", "adj._values().size", "adj._values", "torch.sum().cpu().long", "torch.floor", "adj.sum", "adj._values", "adj._values().size", "torch.sum().cpu", "torch.rand", "adj._values", "adj._values().size", "torch.sum", "adj._values", "adj._values"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.get_deg_torch_sparse", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.get_deg_torch_sparse"], ["", "def", "adj_norm_rw", "(", "adj", ",", "deg", "=", "None", ",", "dropedge", "=", "0.", ",", "sort_indices", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Normalize adj according to the method of rw normalization.\n    Note that sym norm is used in the original GCN paper (kipf),\n    while rw norm is used in GraphSAGE and some other variants.\n    \n    # Procedure:\n    #       1. adj add self-connection --> adj'\n    #       2. D' deg matrix from adj'\n    #       3. norm by D^{-1} x adj'\n    if sort_indices is True, we re-sort the indices of the returned adj\n    Note that after 'dot' the indices of a node would be in descending order\n    rather than ascending order\n    \"\"\"", "\n", "if", "type", "(", "adj", ")", "==", "torch", ".", "Tensor", ":", "\n", "        ", "assert", "deg", "is", "None", "\n", "assert", "torch", ".", "sum", "(", "adj", ".", "_values", "(", ")", ")", ".", "cpu", "(", ")", ".", "long", "(", ")", ".", "item", "(", ")", "==", "adj", ".", "_values", "(", ")", ".", "size", "(", ")", "[", "0", "]", "\n", "_deg_orig", "=", "get_deg_torch_sparse", "(", "adj", ")", "\n", "if", "dropedge", ">", "0", ":", "\n", "            ", "num_dropped_edges", "=", "int", "(", "adj", ".", "_values", "(", ")", ".", "size", "(", ")", "[", "0", "]", "*", "dropedge", ")", "\n", "masked_indices", "=", "torch", ".", "floor", "(", "torch", ".", "rand", "(", "num_dropped_edges", ")", "*", "adj", ".", "_values", "(", ")", ".", "size", "(", ")", "[", "0", "]", ")", ".", "long", "(", ")", "\n", "adj", ".", "_values", "(", ")", "[", "masked_indices", "]", "=", "0", "\n", "_deg_dropped", "=", "get_deg_torch_sparse", "(", "adj", ")", "\n", "", "else", ":", "\n", "            ", "_deg_dropped", "=", "_deg_orig", "\n", "", "_deg", "=", "torch", ".", "repeat_interleave", "(", "_deg_dropped", ",", "_deg_orig", ".", "long", "(", ")", ")", "\n", "_val", "=", "adj", ".", "_values", "(", ")", "\n", "_val", "/=", "torch", ".", "clamp", "(", "_deg", ",", "min", "=", "1", ")", "\n", "adj_norm", "=", "adj", "\n", "", "else", ":", "\n", "        ", "assert", "dropedge", "==", "0.", ",", "\"not supporting dropedge for scipy csr matrices\"", "\n", "assert", "adj", ".", "shape", "[", "0", "]", "==", "adj", ".", "shape", "[", "1", "]", "\n", "diag_shape", "=", "(", "adj", ".", "shape", "[", "0", "]", ",", "adj", ".", "shape", "[", "1", "]", ")", "\n", "D", "=", "adj", ".", "sum", "(", "1", ")", ".", "flatten", "(", ")", "if", "deg", "is", "None", "else", "deg", "\n", "D", "=", "np", ".", "clip", "(", "D", ",", "1", ",", "None", ")", "# if deg_v == 0, it doesn't matter what value we clip it to. ", "\n", "norm_diag", "=", "sp", ".", "dia_matrix", "(", "(", "1", "/", "D", ",", "0", ")", ",", "shape", "=", "diag_shape", ")", "\n", "adj_norm", "=", "norm_diag", ".", "dot", "(", "adj", ")", "\n", "if", "sort_indices", ":", "\n", "            ", "adj_norm", ".", "sort_indices", "(", ")", "\n", "", "", "return", "adj_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.graph_utils.adj_norm_sym": [[109, 146], ["numpy.clip", "scipy.dia_matrix", "sp.dia_matrix.dot().dot", "sp.csr_matrix.data.sum", "numpy.random.choice", "sp.csr_matrix.data.copy", "scipy.csr_matrix", "scipy.csr_matrix", "numpy.zeros", "range", "indptr_new.cumsum.cumsum", "numpy.concatenate", "numpy.broadcast_to", "scipy.csr_matrix", "sp.csr_matrix.sum().flatten", "norm_diag.dot().dot.sort_indices", "int", "numpy.where", "set", "len", "neigh_list[].add", "numpy.sort", "numpy.ones", "numpy.power", "sp.dia_matrix.dot", "sp.csr_matrix.tocsc", "range", "numpy.fromiter", "sp.csr_matrix.sum", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.PoolSubgraph.add"], ["", "def", "adj_norm_sym", "(", "adj", ",", "sort_indices", "=", "True", ",", "add_self_edge", "=", "False", ",", "dropedge", "=", "0.", ")", ":", "\n", "    ", "assert", "adj", ".", "shape", "[", "0", "]", "==", "adj", ".", "shape", "[", "1", "]", "\n", "assert", "adj", ".", "data", ".", "sum", "(", ")", "==", "adj", ".", "size", ",", "\"symmetric normalization only supports binary input adj\"", "\n", "N", "=", "adj", ".", "shape", "[", "0", "]", "\n", "# drop edges symmetrically", "\n", "if", "dropedge", ">", "0", ":", "\n", "        ", "masked_indices", "=", "np", ".", "random", ".", "choice", "(", "adj", ".", "size", ",", "int", "(", "adj", ".", "size", "*", "dropedge", ")", ")", "\n", "data_m", "=", "adj", ".", "data", ".", "copy", "(", ")", "\n", "data_m", "[", "masked_indices", "]", "=", "0", "\n", "adj_m", "=", "sp", ".", "csr_matrix", "(", "(", "data_m", ",", "adj", ".", "indices", ",", "adj", ".", "indptr", ")", ",", "shape", "=", "adj", ".", "shape", ")", "\n", "data_add", "=", "adj_m", ".", "data", "+", "adj_m", ".", "tocsc", "(", ")", ".", "data", "\n", "survived_indices", "=", "np", ".", "where", "(", "data_add", "==", "2", ")", "[", "0", "]", "\n", "data_m", "[", ":", "]", "=", "0", "\n", "data_m", "[", "survived_indices", "]", "=", "1", "\n", "adj", "=", "sp", ".", "csr_matrix", "(", "(", "data_m", ",", "adj", ".", "indices", ",", "adj", ".", "indptr", ")", ",", "shape", "=", "adj", ".", "shape", ")", "\n", "# augment adj with self-connection", "\n", "", "if", "add_self_edge", ":", "\n", "        ", "indptr_new", "=", "np", ".", "zeros", "(", "N", "+", "1", ")", "\n", "neigh_list", "=", "[", "set", "(", "adj", ".", "indices", "[", "adj", ".", "indptr", "[", "v", "]", ":", "adj", ".", "indptr", "[", "v", "+", "1", "]", "]", ")", "for", "v", "in", "range", "(", "N", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "neigh_list", ")", ")", ":", "\n", "            ", "neigh_list", "[", "i", "]", ".", "add", "(", "i", ")", "\n", "neigh_list", "[", "i", "]", "=", "np", ".", "sort", "(", "np", ".", "fromiter", "(", "neigh_list", "[", "i", "]", ",", "int", ",", "len", "(", "neigh_list", "[", "i", "]", ")", ")", ")", "\n", "indptr_new", "[", "i", "+", "1", "]", "=", "neigh_list", "[", "i", "]", ".", "size", "\n", "", "indptr_new", "=", "indptr_new", ".", "cumsum", "(", ")", "\n", "indices_new", "=", "np", ".", "concatenate", "(", "neigh_list", ")", "\n", "data_new", "=", "np", ".", "broadcast_to", "(", "np", ".", "ones", "(", "1", ")", ",", "indices_new", ".", "size", ")", "\n", "adj_aug", "=", "sp", ".", "csr_matrix", "(", "(", "data_new", ",", "indices_new", ",", "indptr_new", ")", ",", "shape", "=", "adj", ".", "shape", ")", "\n", "# NOTE: no need to explicitly convert dtype, since adj_norm_sym is used for subg only", "\n", "", "else", ":", "\n", "        ", "adj_aug", "=", "adj", "\n", "# normalize", "\n", "", "D", "=", "np", ".", "clip", "(", "adj_aug", ".", "sum", "(", "1", ")", ".", "flatten", "(", ")", ",", "1", ",", "None", ")", "\n", "norm_diag", "=", "sp", ".", "dia_matrix", "(", "(", "np", ".", "power", "(", "D", ",", "-", "0.5", ")", ",", "0", ")", ",", "shape", "=", "adj_aug", ".", "shape", ")", "\n", "adj_norm", "=", "norm_diag", ".", "dot", "(", "adj_aug", ")", ".", "dot", "(", "norm_diag", ")", "\n", "if", "sort_indices", ":", "\n", "        ", "adj_norm", ".", "sort_indices", "(", ")", "\n", "", "return", "adj_norm", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_cpp.NodeIIDCpp.__init__": [[23, 48], ["graph_engine.frontend.samplers_base.NodeIIDBase.__init__", "ParallelSampler.ParallelSampler"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "adj", ",", "\n", "aug_feat", ",", "\n", "common_config", ",", "\n", "num_subg_per_batch", "=", "200", ",", "\n", "para_sampler", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "adj", ",", "aug_feat", ",", "num_subg_per_batch", "=", "num_subg_per_batch", ")", "\n", "if", "not", "para_sampler", ":", "\n", "            ", "self", ".", "para_sampler", "=", "cpp_para_sampler", ".", "ParallelSampler", "(", "\n", "adj", ".", "indptr", ",", "adj", ".", "indices", ",", "adj", ".", "data", ",", "num_subg_per_batch", ",", "\n", "common_config", ".", "fix_target", ",", "common_config", ".", "sequential_traversal", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "para_sampler", "=", "para_sampler", "\n", "", "self", ".", "cpp_config", "=", "{", "\n", "\"method\"", ":", "\"nodeIID\"", ",", "\n", "\"num_roots\"", ":", "\"1\"", ",", "\n", "\"add_self_edge\"", ":", "\"false\"", ",", "\n", "\"include_target_conn\"", ":", "\"false\"", "\n", "}", "\n", "self", ".", "cpp_aug", "=", "aug_feat", "\n", "self", ".", "backend", "=", "'cpp'", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_cpp.KHopSamplingCpp.__init__": [[51, 83], ["graph_engine.frontend.samplers_base.KHopSamplingBase.__init__", "ParallelSampler.ParallelSampler", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "adj", ",", "\n", "aug_feat", ",", "\n", "size_root", ",", "\n", "depth", ",", "\n", "budget", ",", "\n", "common_config", ",", "\n", "num_subg_per_batch", "=", "200", ",", "\n", "para_sampler", "=", "None", ",", "\n", "is_preproc", "=", "False", ",", "\n", "add_self_edge", "=", "False", ",", "\n", "include_target_conn", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "adj", ",", "aug_feat", ",", "size_root", ",", "depth", ",", "budget", ",", "num_subg_per_batch", "=", "num_subg_per_batch", ")", "\n", "if", "not", "para_sampler", ":", "\n", "            ", "self", ".", "para_sampler", "=", "cpp_para_sampler", ".", "ParallelSampler", "(", "\n", "adj", ".", "indptr", ",", "adj", ".", "indices", ",", "adj", ".", "data", ",", "num_subg_per_batch", ",", "\n", "common_config", ".", "fix_target", ",", "common_config", ".", "sequential_traversal", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "para_sampler", "=", "para_sampler", "\n", "", "self", ".", "cpp_config", "=", "{", "\n", "\"method\"", ":", "\"khop\"", ",", "\n", "\"depth\"", ":", "str", "(", "depth", ")", ",", "\n", "\"budget\"", ":", "str", "(", "budget", ")", ",", "\n", "\"num_roots\"", ":", "str", "(", "size_root", ")", ",", "\n", "\"add_self_edge\"", ":", "\"true\"", "if", "add_self_edge", "else", "\"false\"", ",", "\n", "\"include_target_conn\"", ":", "\"true\"", "if", "include_target_conn", "else", "\"false\"", ",", "\n", "}", "\n", "self", ".", "cpp_aug", "=", "aug_feat", "\n", "self", ".", "backend", "=", "'cpp'", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_cpp.PPRSamplingCpp.__init__": [[86, 134], ["float", "float", "graph_engine.frontend.samplers_base.PPRSamplingBase.__init__", "ParallelSampler.ParallelSampler", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "adj", ",", "\n", "aug_feat", ",", "\n", "size_root", ",", "\n", "k", ",", "\n", "common_config", ",", "\n", "num_subg_per_batch", ":", "int", "=", "200", ",", "\n", "alpha", ":", "float", "=", "0.85", ",", "\n", "epsilon", ":", "float", "=", "1e-5", ",", "\n", "threshold", ":", "float", "=", "0", ",", "\n", "type_", ":", "int", "=", "0", ",", "\n", "name_data", ":", "str", "=", "None", ",", "# used to identify stored preproc data", "\n", "dir_data", ":", "dict", "=", "None", ",", "# 'local': xxx, 'remote': [yyy, zzz]", "\n", "is_transductive", ":", "bool", "=", "False", ",", "\n", "para_sampler", "=", "None", ",", "# C++ backend", "\n", "is_preproc", ":", "bool", "=", "True", ",", "\n", "add_self_edge", ":", "bool", "=", "False", ",", "\n", "include_target_conn", ":", "bool", "=", "False", ",", "\n", "args_preproc", ":", "dict", "=", "{", "}", ",", "\n", ")", ":", "\n", "        ", "if", "not", "para_sampler", ":", "\n", "            ", "self", ".", "para_sampler", "=", "cpp_para_sampler", ".", "ParallelSampler", "(", "\n", "adj", ".", "indptr", ",", "adj", ".", "indices", ",", "adj", ".", "data", ",", "num_subg_per_batch", ",", "\n", "common_config", ".", "fix_target", ",", "common_config", ".", "sequential_traversal", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "para_sampler", "=", "para_sampler", "\n", "", "self", ".", "type", "=", "type_", "\n", "self", ".", "name_data", "=", "name_data", "\n", "self", ".", "dir_data", "=", "dir_data", "\n", "self", ".", "is_transductive", "=", "is_transductive", "\n", "self", ".", "is_preproc", "=", "is_preproc", "\n", "self", ".", "mode2str", "=", "common_config", ".", "MODE2STR", "\n", "epsilon", "=", "float", "(", "epsilon", ")", "\n", "alpha", "=", "float", "(", "alpha", ")", "\n", "super", "(", ")", ".", "__init__", "(", "adj", ",", "aug_feat", ",", "size_root", ",", "k", ",", "alpha", "=", "alpha", ",", "epsilon", "=", "epsilon", ",", "\n", "threshold", "=", "threshold", ",", "args_preproc", "=", "args_preproc", ")", "\n", "self", ".", "cpp_config", "=", "{", "\n", "\"method\"", ":", "\"ppr\"", ",", "\n", "\"k\"", ":", "str", "(", "k", ")", ",", "\n", "\"num_roots\"", ":", "str", "(", "size_root", ")", ",", "\n", "\"threshold\"", ":", "str", "(", "threshold", ")", ",", "\n", "\"add_self_edge\"", ":", "\"true\"", "if", "add_self_edge", "else", "\"false\"", ",", "\n", "\"include_target_conn\"", ":", "\"true\"", "if", "include_target_conn", "else", "\"false\"", ",", "\n", "}", "\n", "self", ".", "cpp_aug", "=", "aug_feat", "\n", "self", ".", "backend", "=", "'cpp'", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_cpp.PPRSamplingCpp.is_PPR_file_exists": [[135, 171], ["sorted", "sorted", "samplers_cpp.PPRSamplingCpp.mode2str.keys", "glob.glob", "glob.glob", "os.path.exists", "os.makedirs", "hasattr", "[].split", "int", "fname_neighs_pattern.format", "fname_scores_pattern.format", "[].split", "cn.split"], "methods", ["None"], ["", "def", "is_PPR_file_exists", "(", "self", ",", "file_mode", ")", ":", "\n", "        ", "\"\"\"\n        Check if there exist files for previously computed PPR values. \n        \"\"\"", "\n", "assert", "file_mode", "in", "self", ".", "mode2str", ".", "keys", "(", ")", "\n", "if", "self", ".", "dir_data", "is", "None", "or", "self", ".", "dir_data", "[", "'is_adj_changed'", "]", ":", "\n", "            ", "return", "False", ",", "\"\"", ",", "\"\"", "# This will make C++ to compute PPR without storing it in file", "\n", "", "str_trans", "=", "\"transductive\"", "if", "self", ".", "is_transductive", "else", "\"inductive\"", "\n", "dir_data_local", "=", "self", ".", "dir_data", "[", "'local'", "]", "\n", "folder", "=", "dir_data_local", "\n", "dir_prefix", "=", "f\"{self.name_data}/ppr_float\"", "\n", "dir_suffix", "=", "f\"{str_trans}_{self.mode2str[file_mode]}_{self.alpha}_{self.epsilon}\"", "\n", "# ==", "\n", "fname_neighs_all", "=", "f\"{folder}/{dir_prefix}/neighs_{dir_suffix}_*\"", "\n", "fname_scores_all", "=", "f\"{folder}/{dir_prefix}/scores_{dir_suffix}_*\"", "\n", "fname_neighs_pattern", "=", "f\"{folder}/{dir_prefix}/neighs_{dir_suffix}\"", "+", "\"_{}.bin\"", "\n", "fname_scores_pattern", "=", "f\"{folder}/{dir_prefix}/scores_{dir_suffix}\"", "+", "\"_{}.bin\"", "\n", "k_required", "=", "self", ".", "k", "if", "not", "hasattr", "(", "self", ",", "'k_required'", ")", "else", "self", ".", "k_required", "\n", "fname_neighs", "=", "f\"{folder}/{dir_prefix}/neighs_{dir_suffix}_{k_required}.bin\"", "\n", "fname_scores", "=", "f\"{folder}/{dir_prefix}/scores_{dir_suffix}_{k_required}.bin\"", "\n", "# check if meet the condition", "\n", "candy_neighs", "=", "sorted", "(", "glob", ".", "glob", "(", "fname_neighs_all", ")", ")", "# will return [] if dir `ppr` doesn't exist", "\n", "candy_scores", "=", "sorted", "(", "glob", ".", "glob", "(", "fname_scores_all", ")", ")", "\n", "is_found", "=", "False", "\n", "for", "cn", "in", "candy_neighs", ":", "\n", "            ", "_", ",", "__", ",", "k_meta", "=", "cn", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".bin\"", ")", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "3", ":", "]", "\n", "if", "k_required", "<=", "int", "(", "k_meta", ")", ":", "\n", "                ", "fname_neighs", "=", "fname_neighs_pattern", ".", "format", "(", "k_meta", ")", "\n", "fname_scores", "=", "fname_scores_pattern", ".", "format", "(", "k_meta", ")", "\n", "if", "fname_scores", "in", "candy_scores", ":", "\n", "                    ", "is_found", "=", "True", "\n", "break", "\n", "", "", "", "dir_target", "=", "f\"{dir_data_local}/{self.name_data}/ppr_float\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_target", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dir_target", ")", "\n", "", "return", "is_found", ",", "fname_neighs", ",", "fname_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_cpp.PPRSamplingCpp.preproc": [[172, 186], ["samplers_cpp.PPRSamplingCpp.is_PPR_file_exists", "samplers_cpp.PPRSamplingCpp.para_sampler.preproc_ppr_approximate", "len", "samplers_cpp.PPRSamplingCpp.is_PPR_file_exists"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_cpp.PPRSamplingCpp.is_PPR_file_exists", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_cpp.PPRSamplingCpp.is_PPR_file_exists"], ["", "def", "preproc", "(", "self", ",", "preproc_targets", ",", "duplicate_modes", "=", "None", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_preproc", ":", "\n", "            ", "return", "\n", "", "is_found_self_type", ",", "fname_neighs", ",", "fname_scores", "=", "self", ".", "is_PPR_file_exists", "(", "self", ".", "type", ")", "\n", "if", "not", "is_found_self_type", "and", "duplicate_modes", "is", "not", "None", "and", "len", "(", "duplicate_modes", ")", ">", "0", ":", "\n", "            ", "for", "m", "in", "duplicate_modes", ":", "\n", "                ", "if", "m", "==", "self", ".", "type", ":", "\n", "                    ", "continue", "\n", "", "is_found_m", ",", "fname_neighs", ",", "fname_scores", "=", "self", ".", "is_PPR_file_exists", "(", "m", ")", "\n", "if", "is_found_m", ":", "# TODO: symb link to calculated ppr files, check fname_*", "\n", "# breakpoint()", "\n", "                    ", "break", "\n", "", "", "", "self", ".", "para_sampler", ".", "preproc_ppr_approximate", "(", "\n", "preproc_targets", ",", "self", ".", "k", ",", "self", ".", "alpha", ",", "self", ".", "epsilon", ",", "fname_neighs", ",", "fname_scores", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_cpp.PPRSTSamplingCpp.__init__": [[190, 242], ["samplers_cpp.PPRSamplingCpp.__init__", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "adj", ",", "\n", "aug_feat", ",", "\n", "size_root", ",", "\n", "k", ",", "\n", "k_required", ",", "\n", "common_config", ",", "\n", "num_subg_per_batch", ":", "int", "=", "200", ",", "\n", "alpha", ":", "float", "=", "0.85", ",", "\n", "epsilon", ":", "float", "=", "1e-5", ",", "\n", "threshold", ":", "float", "=", "0", ",", "\n", "type_", ":", "int", "=", "0", ",", "\n", "name_data", ":", "str", "=", "None", ",", "# used to identify stored preproc data", "\n", "dir_data", ":", "dict", "=", "None", ",", "# 'local': xxx, 'remote': [yyy, zzz]", "\n", "is_transductive", ":", "bool", "=", "False", ",", "\n", "para_sampler", "=", "None", ",", "# C++ backend", "\n", "is_preproc", ":", "bool", "=", "True", ",", "\n", "add_self_edge", ":", "bool", "=", "False", ",", "\n", "include_target_conn", ":", "bool", "=", "False", ",", "\n", "args_preproc", ":", "dict", "=", "{", "}", "\n", ")", ":", "\n", "        ", "self", ".", "k_required", "=", "k_required", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "adj", ",", "\n", "aug_feat", ",", "\n", "size_root", ",", "\n", "k", ",", "\n", "common_config", ",", "\n", "num_subg_per_batch", "=", "num_subg_per_batch", ",", "\n", "alpha", "=", "alpha", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "threshold", "=", "threshold", ",", "\n", "type_", "=", "type_", ",", "\n", "name_data", "=", "name_data", ",", "\n", "dir_data", "=", "dir_data", ",", "\n", "is_transductive", "=", "is_transductive", ",", "\n", "para_sampler", "=", "para_sampler", ",", "\n", "is_preproc", "=", "is_preproc", ",", "\n", "add_self_edge", "=", "add_self_edge", ",", "\n", "args_preproc", "=", "args_preproc", "\n", ")", "\n", "self", ".", "cpp_config", "=", "{", "\n", "\"method\"", ":", "\"ppr_st\"", ",", "\n", "\"k\"", ":", "str", "(", "k", ")", ",", "\n", "\"num_roots\"", ":", "str", "(", "size_root", ")", ",", "\n", "\"threshold\"", ":", "str", "(", "threshold", ")", ",", "\n", "\"add_self_edge\"", ":", "\"true\"", "if", "add_self_edge", "else", "\"false\"", ",", "\n", "\"include_target_conn\"", ":", "\"true\"", "if", "include_target_conn", "else", "\"false\"", ",", "\n", "}", "\n", "self", ".", "name", "=", "'ppr_st'", "\n", "self", ".", "backend", "=", "'cpp'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_python.NodeSamplingVanillaPython.__init__": [[22, 25], ["graph_engine.frontend.samplers_base.GraphSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__"], ["def", "__init__", "(", "self", ",", "adj_train", ",", "node_train", ",", "size_subgraph", ",", "num_subg_per_batch", "=", "200", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "adj_train", ",", "node_train", ",", "size_subgraph", ",", "{", "}", ",", "num_subg_per_batch", "=", "num_subg_per_batch", ")", "\n", "self", ".", "backend", "=", "'python'", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_python.NodeSamplingVanillaPython.parallel_sample": [[26, 33], ["numpy.random.choice", "samplers_python.NodeSamplingVanillaPython.helper_extract_subgraph", "list", "range", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.GraphSampler.helper_extract_subgraph"], ["", "def", "parallel_sample", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "node_ids", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "node_train", ",", "self", ".", "size_subgraph", ")", "\n", "ret", "=", "self", ".", "helper_extract_subgraph", "(", "node_ids", ")", "\n", "ret", "=", "list", "(", "ret", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "ret", ")", ")", ":", "\n", "            ", "ret", "[", "i", "]", "=", "[", "ret", "[", "i", "]", "]", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_python.NodeSamplingVanillaPython.preproc": [[34, 36], ["None"], "methods", ["None"], ["", "def", "preproc", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_python.KHopSamplingPy.__init__": [[39, 48], ["graph_engine.frontend.samplers_base.GraphSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__"], ["    ", "def", "__init__", "(", "self", ",", "adj", ",", "size_subgraph", ",", "size_root", ",", "depth", ",", "budget", ",", "\n", "num_cpu_core", "=", "1", ",", "fix_target", "=", "False", ",", "num_subg_per_batch", "=", "200", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "adj", ",", "size_subgraph", ",", "{", "}", ",", "num_subg_per_batch", "=", "num_subg_per_batch", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "budget", "=", "budget", "\n", "self", ".", "size_root", "=", "size_root", "\n", "self", ".", "fix_target", "=", "fix_target", "\n", "self", ".", "backend", "=", "'python'", "\n", "self", ".", "name", "=", "'khop'", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_python.KHopSamplingPy._parallel_sample": [[49, 71], ["range", "node_lvl.append", "range", "numpy.unique", "ret.append", "numpy.concatenate", "node_lvl.append", "numpy.concatenate", "samplers_python.KHopSamplingPy.helper_extract_subgraph", "numpy.concatenate.append", "numpy.unique", "numpy.random.choice", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.GraphSampler.helper_extract_subgraph"], ["", "def", "_parallel_sample", "(", "self", ",", "roots_batch", ",", "**", "kwargs", ")", ":", "\n", "        ", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "roots_batch", ".", "size", ",", "self", ".", "size_root", ")", ":", "\n", "            ", "root_ids", "=", "roots_batch", "[", "i", ":", "i", "+", "self", ".", "size_root", "]", "\n", "node_lvl", "=", "[", "]", "\n", "node_lvl", ".", "append", "(", "root_ids", ")", "\n", "for", "_i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "                ", "node_cur", "=", "[", "]", "\n", "for", "n", "in", "node_lvl", "[", "-", "1", "]", ":", "\n", "                    ", "_idx_start", "=", "self", ".", "adj", ".", "indptr", "[", "n", "]", "\n", "_idx_end", "=", "self", ".", "adj", ".", "indptr", "[", "n", "+", "1", "]", "\n", "if", "_idx_start", "==", "_idx_end", ":", "\n", "                        ", "continue", "\n", "", "candidates", "=", "self", ".", "adj", ".", "indices", "[", "_idx_start", ":", "_idx_end", "]", "\n", "selection", "=", "candidates", "if", "self", ".", "budget", "==", "-", "1", "else", "np", ".", "random", ".", "choice", "(", "candidates", ",", "self", ".", "budget", ")", "\n", "node_cur", ".", "append", "(", "np", ".", "unique", "(", "selection", ")", ")", "\n", "", "node_cur", "=", "np", ".", "concatenate", "(", "node_cur", ")", "\n", "node_lvl", ".", "append", "(", "np", ".", "unique", "(", "node_cur", ")", ")", "\n", "", "node_ids", "=", "np", ".", "unique", "(", "np", ".", "concatenate", "(", "node_lvl", ")", ")", "\n", "target_ids", "=", "root_ids", "if", "self", ".", "fix_target", "else", "None", "\n", "ret", ".", "append", "(", "self", ".", "helper_extract_subgraph", "(", "node_ids", ",", "target_ids", ")", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_python.KHopSamplingPy.preproc": [[72, 74], ["None"], "methods", ["None"], ["", "def", "preproc", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.__init__": [[44, 154], ["samplers_ensemble.ConfigSampler", "samplers_ensemble.GraphSamplerEnsemble._reweight_graph_edges", "samplers_ensemble.find_all_backends", "enumerate", "num_nodes_full.pop", "num_edges_full.pop", "samplers_ensemble.GraphSamplerEnsemble._merge_backend_lists", "set().issubset", "any", "config.pop", "config.pop", "int", "cfg_backends[].append", "aug_backends[].append", "ParallelSampler.ParallelSampler", "samplers_ensemble.GraphSamplerEnsemble._sort_sampler_order", "enumerate", "enumerate", "set", "len", "len", "aug_feat_list[].intersection", "len", "config.pop", "samplers_ensemble.GraphSamplerEnsemble.sampler_backends[].append", "config.pop", "samplers_ensemble.GraphSamplerEnsemble.sampler_backends[].append", "samplers_ensemble.GraphSamplerEnsemble.para_sampler[].append", "type", "num_nodes_full.extend", "num_edges_full.extend", "num_nodes_full.append", "num_edges_full.append", "len", "len", "set", "NAME2SAMPLER.keys", "set", "set", "samplers_ensemble.GraphSamplerEnsemble.para_sampler[].num_nodes", "samplers_ensemble.GraphSamplerEnsemble.para_sampler[].num_edges", "set", "set", "range", "p.num_nodes", "p.num_edges", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble._reweight_graph_edges", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.find_all_backends", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble._merge_backend_lists", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble._sort_sampler_order", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.GraphSampler.num_nodes", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.GraphSampler.num_edges", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.GraphSampler.num_nodes", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_base.GraphSampler.num_edges"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "adj", ",", "\n", "feats", ",", "\n", "sampler_config_list", ":", "List", "[", "dict", "]", ",", "\n", "aug_feat_list", ":", "List", "[", "set", "]", ",", "\n", "max_num_threads", ":", "int", ",", "# C++ / python MP", "\n", "num_subg_per_batch", ":", "int", "=", "-", "1", ",", "\n", "bin_adj_files", ":", "dict", "=", "None", ",", "# C++", "\n", "seed_cpp", ":", "int", "=", "-", "1", ",", "# C++", "\n", "mode2str", ":", "Dict", "[", "int", ",", "str", "]", "=", "{", "0", ":", "\"train\"", ",", "1", ":", "\"valid\"", ",", "2", ":", "\"test\"", "}", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Supported backends: \n            C++, python\n        We can have a mixure of backends. For example, if we are ensembling the\n            PPR sampler with feature based sampler, then we can have PPR executed\n            in C++ and feature based sampler executed in python. \n        \"\"\"", "\n", "self", ".", "node_target", "=", "None", "\n", "# TODO: may not need the fix_target and sequential_traversal arguments", "\n", "_fix_target", "=", "[", "config", ".", "pop", "(", "'fix_target'", ")", "for", "config", "in", "sampler_config_list", "]", "\n", "_sequential_traversal", "=", "[", "config", ".", "pop", "(", "'sequential_traversal'", ")", "for", "config", "in", "sampler_config_list", "]", "\n", "assert", "len", "(", "set", "(", "_fix_target", ")", ")", "==", "1", "and", "len", "(", "set", "(", "_sequential_traversal", ")", ")", "==", "1", "\n", "common_config", "=", "ConfigSampler", "(", "\n", "MODE2STR", "=", "mode2str", ",", "fix_target", "=", "_fix_target", "[", "0", "]", ",", "sequential_traversal", "=", "_sequential_traversal", "[", "0", "]", "\n", ")", "\n", "for", "sc", "in", "sampler_config_list", ":", "\n", "            ", "sc", "[", "\"common_config\"", "]", "=", "common_config", "\n", "", "assert", "num_subg_per_batch", ">", "0", "or", "max_num_threads", ">", "0", ",", "\"You need to specify either sampler per batch OR num threads. \"", "\n", "if", "num_subg_per_batch", "<=", "0", ":", "\n", "            ", "num_subg_per_batch", "=", "int", "(", "max_num_threads", "*", "10", ")", "\n", "", "edge_weights", "=", "self", ".", "_reweight_graph_edges", "(", "sampler_config_list", ",", "adj", ",", "feats", ")", "\n", "all_backends", "=", "find_all_backends", "(", "sampler_config_list", ")", "\n", "cfg_backends", "=", "{", "b", ":", "[", "]", "for", "b", "in", "all_backends", "}", "\n", "aug_backends", "=", "{", "b", ":", "[", "]", "for", "b", "in", "all_backends", "}", "\n", "self", ".", "sampler_backends", "=", "{", "b", ":", "[", "]", "for", "b", "in", "all_backends", "}", "\n", "self", ".", "para_sampler", "=", "{", "b", ":", "None", "for", "b", "in", "all_backends", "}", "\n", "self", ".", "aug_feat", "=", "None", "\n", "for", "i_s", ",", "s", "in", "enumerate", "(", "sampler_config_list", ")", ":", "# split configs based on backend", "\n", "            ", "cfg_backends", "[", "NAME2SAMPLER", "[", "s", "[", "'method'", "]", "]", "[", "0", "]", "]", ".", "append", "(", "s", ")", "\n", "aug_backends", "[", "NAME2SAMPLER", "[", "s", "[", "'method'", "]", "]", "[", "0", "]", "]", ".", "append", "(", "\n", "aug_feat_list", "[", "i_s", "]", ".", "intersection", "(", "BACKEND_SUPPORTED_FEAT_AUG", ")", "\n", ")", "\n", "if", "self", ".", "aug_feat", "is", "None", ":", "\n", "                ", "self", ".", "aug_feat", "=", "aug_feat_list", "[", "i_s", "]", "\n", "", "else", ":", "# for now, assume all samplers perform the same set of feat aug", "\n", "                ", "assert", "self", ".", "aug_feat", "==", "aug_feat_list", "[", "i_s", "]", "\n", "", "", "assert", "common_config", ".", "sequential_traversal", ",", "\"non-sequential traversal does not support link prediction task and ensemble!\"", "\n", "assert", "num_subg_per_batch", "%", "2", "==", "0", ",", "\"link task requires even number of subg per batch. \"", "\n", "###########################", "\n", "# instantiate C++ sampler #", "\n", "###########################", "\n", "if", "'cpp'", "in", "all_backends", ":", "\n", "            ", "args_Cpp_sampler", "=", "[", "\n", "num_subg_per_batch", ",", "\n", "max_num_threads", ",", "\n", "common_config", ".", "fix_target", ",", "\n", "common_config", ".", "sequential_traversal", ",", "\n", "edge_weights", ",", "\n", "len", "(", "cfg_backends", "[", "'cpp'", "]", ")", "\n", "]", "\n", "if", "bin_adj_files", "is", "None", ":", "\n", "                ", "args_Cpp_sampler", "=", "[", "adj", ".", "indptr", ",", "adj", ".", "indices", ",", "adj", ".", "data", "]", "+", "args_Cpp_sampler", "+", "[", "\"\"", ",", "\"\"", ",", "\"\"", "]", "\n", "", "else", ":", "\n", "                ", "args_Cpp_sampler", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "+", "args_Cpp_sampler", "+", "[", "bin_adj_files", "[", "k", "]", "for", "k", "in", "[", "'indptr'", ",", "'indices'", ",", "'data'", "]", "]", "\n", "", "args_Cpp_sampler", "+=", "[", "seed_cpp", "]", "\n", "self", ".", "para_sampler", "[", "'cpp'", "]", "=", "cpp_para_sampler", ".", "ParallelSampler", "(", "*", "args_Cpp_sampler", ")", "\n", "# adjust the order of creating the sampling instances. e.g., for PPR, ", "\n", "# since we are sharing the same C++ sampler, we need to load the pre-computed file with the largest k. ", "\n", "cfg_backends", "[", "'cpp'", "]", ",", "aug_backends", "[", "'cpp'", "]", "=", "self", ".", "_sort_sampler_order", "(", "cfg_backends", "[", "'cpp'", "]", ",", "aug_backends", "[", "'cpp'", "]", ")", "\n", "for", "ic", ",", "config", "in", "enumerate", "(", "cfg_backends", "[", "'cpp'", "]", ")", ":", "\n", "                ", "_name", "=", "config", ".", "pop", "(", "\"method\"", ")", "\n", "config", "[", "\"para_sampler\"", "]", "=", "self", ".", "para_sampler", "[", "'cpp'", "]", "# share a common one", "\n", "self", ".", "sampler_backends", "[", "'cpp'", "]", ".", "append", "(", "NAME2SAMPLER", "[", "_name", "]", "[", "1", "]", "(", "adj", ",", "aug_backends", "[", "'cpp'", "]", "[", "ic", "]", ",", "**", "config", ")", ")", "\n", "##############################", "\n", "# instantiate Python sampler #", "\n", "##############################", "\n", "", "", "self", ".", "para_sampler", "[", "'python'", "]", "=", "[", "]", "\n", "if", "'python'", "in", "all_backends", ":", "\n", "            ", "for", "ic", ",", "config", "in", "enumerate", "(", "cfg_backends", "[", "'python'", "]", ")", ":", "\n", "                ", "_name", "=", "config", ".", "pop", "(", "'method'", ")", "\n", "if", "_name", "==", "'feat_max_var'", ":", "\n", "                    ", "config", "[", "'feat_node'", "]", "=", "feats", "\n", "config", "[", "'num_proc'", "]", "=", "max_num_threads", "\n", "# TODO: unify config and common_config", "\n", "", "_sampler_inst", "=", "NAME2SAMPLER", "[", "_name", "]", "[", "1", "]", "(", "\n", "adj", ",", "aug_backends", "[", "'python'", "]", "[", "ic", "]", ",", "num_subg_per_batch", "=", "num_subg_per_batch", ",", "**", "config", ")", "\n", "self", ".", "sampler_backends", "[", "'python'", "]", ".", "append", "(", "_sampler_inst", ")", "\n", "self", ".", "para_sampler", "[", "'python'", "]", ".", "append", "(", "_sampler_inst", ")", "\n", "# check consistency among adj", "\n", "", "", "num_nodes_full", ",", "num_edges_full", "=", "[", "]", ",", "[", "]", "\n", "for", "b", "in", "all_backends", ":", "\n", "            ", "if", "type", "(", "self", ".", "para_sampler", "[", "b", "]", ")", "==", "list", ":", "\n", "                ", "num_nodes_full", ".", "extend", "(", "p", ".", "num_nodes", "(", ")", "for", "p", "in", "self", ".", "para_sampler", "[", "b", "]", ")", "\n", "num_edges_full", ".", "extend", "(", "p", ".", "num_edges", "(", ")", "for", "p", "in", "self", ".", "para_sampler", "[", "b", "]", ")", "\n", "", "else", ":", "\n", "                ", "num_nodes_full", ".", "append", "(", "self", ".", "para_sampler", "[", "b", "]", ".", "num_nodes", "(", ")", ")", "\n", "num_edges_full", ".", "append", "(", "self", ".", "para_sampler", "[", "b", "]", ".", "num_edges", "(", ")", ")", "\n", "", "", "assert", "len", "(", "set", "(", "num_nodes_full", ")", ")", "==", "1", "and", "len", "(", "set", "(", "num_edges_full", ")", ")", "==", "1", "\n", "self", ".", "num_nodes_full", "=", "num_nodes_full", ".", "pop", "(", ")", "\n", "self", ".", "num_edges_full", "=", "num_edges_full", ".", "pop", "(", ")", "\n", "# It is up to the Minibatch class to determine if they only want targets", "\n", "self", ".", "return_target_only", "=", "{", "b", ":", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "sampler_backends", "[", "b", "]", ")", ")", "]", "for", "b", "in", "all_backends", "}", "\n", "# setup sampler list (frontend)", "\n", "self", ".", "sampler_list", "=", "self", ".", "_merge_backend_lists", "(", "self", ".", "sampler_backends", ")", "\n", "assert", "set", "(", "[", "s", ".", "name", "for", "s", "in", "self", ".", "sampler_list", "]", ")", ".", "issubset", "(", "set", "(", "NAME2SAMPLER", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "is_stochastic", "=", "any", "(", "s", ".", "name", "in", "STOCHASTIC_SAMPLER", "for", "s", "in", "self", ".", "sampler_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble._merge_backend_lists": [[155, 157], ["dict_backends.items"], "methods", ["None"], ["", "def", "_merge_backend_lists", "(", "self", ",", "dict_backends", ")", ":", "\n", "        ", "return", "[", "vv", "for", "_k", ",", "v", "in", "dict_backends", ".", "items", "(", ")", "for", "vv", "in", "v", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.set_return_target_only": [[158, 166], ["enumerate", "sum", "len", "len", "set", "cnt_backend.values"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set"], ["", "def", "set_return_target_only", "(", "self", ",", "val", ")", ":", "\n", "# TODO: handle python sampler", "\n", "        ", "cnt_backend", "=", "{", "b", ":", "0", "for", "b", "in", "set", "(", "[", "s", ".", "backend", "for", "s", "in", "self", ".", "sampler_list", "]", ")", "}", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "self", ".", "sampler_list", ")", ":", "\n", "            ", "b", "=", "s", ".", "backend", "\n", "self", ".", "return_target_only", "[", "b", "]", "[", "cnt_backend", "[", "b", "]", "]", "=", "val", "[", "i", "]", "\n", "cnt_backend", "[", "b", "]", "+=", "1", "\n", "", "assert", "sum", "(", "cnt_backend", ".", "values", "(", ")", ")", "==", "len", "(", "val", ")", "==", "len", "(", "self", ".", "sampler_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble._reweight_graph_edges": [[167, 173], ["None"], "methods", ["None"], ["", "def", "_reweight_graph_edges", "(", "self", ",", "config_list", ",", "adj", ",", "feats", ")", ":", "\n", "        ", "\"\"\"      configs for all backends\n        Generate edge weights for sampling. \n        Assume we only generate one set of weights. \n        \"\"\"", "\n", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.shuffle_targets": [[174, 183], ["node_target_new.flatten", "samplers_ensemble.GraphSamplerEnsemble.para_sampler.items", "type", "p.shuffle_targets", "pi.shuffle_targets"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.shuffle_targets", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.shuffle_targets"], ["", "def", "shuffle_targets", "(", "self", ",", "node_target_new", ")", ":", "\n", "        ", "self", ".", "node_target", "=", "node_target_new", ".", "flatten", "(", ")", "\n", "for", "_", ",", "p", "in", "self", ".", "para_sampler", ".", "items", "(", ")", ":", "\n", "            ", "if", "type", "(", "p", ")", "!=", "list", ":", "\n", "# NOTE for C++ sampler, the py wrapper does not update the node_target here. ", "\n", "                ", "p", ".", "shuffle_targets", "(", "self", ".", "node_target", ")", "\n", "", "else", ":", "\n", "                ", "for", "pi", "in", "p", ":", "# for python sampler", "\n", "                    ", "pi", ".", "shuffle_targets", "(", "self", ".", "node_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.par_sample_ensemble": [[184, 211], ["samplers_ensemble.GraphSamplerEnsemble._merge_backend_lists", "zip", "enumerate", "samplers_ensemble.GraphSamplerEnsemble.para_sampler[].parallel_sampler_ensemble", "enumerate", "enumerate", "set", "samplers_ensemble.GraphSamplerEnsemble.para_sampler.keys", "samplers_ensemble.GraphSamplerEnsemble._extract_subgraph_return", "len", "len", "min", "max", "ret[].append", "len", "psam.parallel_sample", "len", "set.pop", "set", "len", "len"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble._merge_backend_lists", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble._extract_subgraph_return", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_python.NodeSamplingVanillaPython.parallel_sample", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set"], ["", "", "", "", "def", "par_sample_ensemble", "(", "self", ",", "prediction_task", ")", ":", "\n", "        ", "ret", "=", "{", "k", ":", "None", "for", "k", "in", "self", ".", "para_sampler", ".", "keys", "(", ")", "}", "\n", "# handle C++ sampler first", "\n", "if", "'cpp'", "in", "self", ".", "para_sampler", ":", "\n", "            ", "for", "i", ",", "cfg", "in", "enumerate", "(", "self", ".", "sampler_backends", "[", "'cpp'", "]", ")", ":", "\n", "                ", "cfg", ".", "cpp_config", "[", "'return_target_only'", "]", "=", "'true'", "if", "self", ".", "return_target_only", "[", "'cpp'", "]", "[", "i", "]", "else", "'false'", "\n", "", "_args", "=", "[", "cfg", ".", "cpp_config", "for", "cfg", "in", "self", ".", "sampler_backends", "[", "'cpp'", "]", "]", "\n", "_augs", "=", "[", "cfg", ".", "cpp_aug", "for", "cfg", "in", "self", ".", "sampler_backends", "[", "'cpp'", "]", "]", "\n", "ret", "[", "'cpp'", "]", "=", "self", ".", "para_sampler", "[", "'cpp'", "]", ".", "parallel_sampler_ensemble", "(", "_args", ",", "_augs", ")", "\n", "for", "i", ",", "r", "in", "enumerate", "(", "ret", "[", "'cpp'", "]", ")", ":", "\n", "                ", "ret", "[", "'cpp'", "]", "[", "i", "]", "=", "self", ".", "_extract_subgraph_return", "(", "r", ",", "_args", "[", "i", "]", ",", "_augs", "[", "i", "]", ",", "not", "self", ".", "return_target_only", "[", "'cpp'", "]", "[", "i", "]", ")", "\n", "", "assert", "len", "(", "ret", "[", "'cpp'", "]", ")", "==", "len", "(", "self", ".", "sampler_backends", "[", "'cpp'", "]", ")", "\n", "assert", "min", "(", "[", "len", "(", "r", ")", "for", "r", "in", "ret", "[", "'cpp'", "]", "]", ")", "==", "max", "(", "[", "len", "(", "r", ")", "for", "r", "in", "ret", "[", "'cpp'", "]", "]", ")", "\n", "# handle python sampler", "\n", "", "if", "'python'", "in", "self", ".", "para_sampler", ":", "\n", "            ", "ret", "[", "'python'", "]", "=", "[", "]", "\n", "for", "i", ",", "psam", "in", "enumerate", "(", "self", ".", "para_sampler", "[", "'python'", "]", ")", ":", "\n", "                ", "ret", "[", "'python'", "]", ".", "append", "(", "psam", ".", "parallel_sample", "(", "return_target_only", "=", "self", ".", "return_target_only", "[", "'python'", "]", "[", "i", "]", ")", ")", "\n", "", "", "ret_ens", "=", "self", ".", "_merge_backend_lists", "(", "ret", ")", "\n", "ret_ens_merge", "=", "ret_ens", "\n", "# check consistency among samplers (regardless of backends)", "\n", "for", "s", "in", "zip", "(", "*", "ret_ens_merge", ")", ":", "\n", "            ", "_root_idxs", "=", "[", "ss", ".", "node", "if", "ss", ".", "target", ".", "size", "==", "0", "else", "ss", ".", "node", "[", "ss", ".", "target", "]", "for", "ss", "in", "s", "]", "\n", "_num_roots", "=", "set", "(", "[", "r", ".", "size", "for", "r", "in", "_root_idxs", "]", ")", "\n", "assert", "len", "(", "_num_roots", ")", "==", "1", "and", "_num_roots", ".", "pop", "(", ")", "==", "1", "+", "(", "prediction_task", "==", "'link'", ")", "\n", "assert", "len", "(", "set", "(", "[", "r", "[", "0", "]", "for", "r", "in", "_root_idxs", "]", ")", ")", "==", "1", "\n", "", "return", "ret_ens_merge", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble._sort_sampler_order": [[212, 249], ["set", "enumerate", "set", "f_ppr_k_factor", "sampler_config_list.pop", "aug_feat_list.pop", "set.add", "f_ppr_k_factor", "int", "int"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set", "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.PoolSubgraph.add"], ["", "def", "_sort_sampler_order", "(", "self", ",", "sampler_config_list", ",", "aug_feat_list", ")", ":", "\n", "        ", "\"\"\" Call this func for each backend. \n        While subgraph ensemble does not enforce an order of the samplers, \n            we \"reorder\" the samplers here so that C++ sampler knows which\n            pre-computed PPR file to load from. \n        e.g., with a PPR of k=300 and a PPR of k=200, the C++ sampler would\n            need to load the precomputed file of k=300. \n        \"\"\"", "\n", "i_ppr_largest_k", "=", "None", "# idx of the PPR sampler with largets k (idx in the original config_list)", "\n", "ppr_largest_k", "=", "None", "\n", "# assert ppr and ppr_stochastic do not coexist", "\n", "names_samplers", "=", "set", "(", "cfg", "[", "'method'", "]", "for", "cfg", "in", "sampler_config_list", ")", "\n", "assert", "not", "(", "'ppr'", "in", "names_samplers", "and", "'ppr_st'", "in", "names_samplers", ")", ",", "'pls check if you want both the determinstic and stochastic version of PPR?'", "\n", "f_ppr_k_factor", "=", "lambda", "is_ppr_st", ":", "1", "+", "is_ppr_st", "# if stochastic PPR, then we sample k nodes from a pool of 2k candidates", "\n", "for", "i", ",", "cfg", "in", "enumerate", "(", "sampler_config_list", ")", ":", "\n", "            ", "ppr_k_factor", "=", "f_ppr_k_factor", "(", "cfg", "[", "'method'", "]", "==", "'ppr_st'", ")", "\n", "if", "cfg", "[", "\"method\"", "]", "in", "[", "'ppr'", ",", "'ppr_st'", "]", ":", "\n", "                ", "if", "i_ppr_largest_k", "is", "None", "or", "int", "(", "cfg", "[", "\"k\"", "]", ")", "*", "ppr_k_factor", ">", "ppr_largest_k", ":", "\n", "                    ", "ppr_largest_k", "=", "int", "(", "cfg", "[", "\"k\"", "]", ")", "*", "ppr_k_factor", "\n", "i_ppr_largest_k", "=", "i", "\n", "", "", "cfg", "[", "\"is_preproc\"", "]", "=", "False", "\n", "# re-order PPR", "\n", "", "if", "i_ppr_largest_k", "is", "not", "None", ":", "\n", "            ", "top1_ppr_sampler", "=", "sampler_config_list", ".", "pop", "(", "i_ppr_largest_k", ")", "\n", "if", "top1_ppr_sampler", "[", "'method'", "]", "==", "'ppr_st'", ":", "\n", "                ", "top1_ppr_sampler", "[", "'k_required'", "]", "=", "top1_ppr_sampler", "[", "'k'", "]", "*", "f_ppr_k_factor", "(", "True", ")", "\n", "", "sampler_config_list", "=", "[", "top1_ppr_sampler", "]", "+", "sampler_config_list", "\n", "top1_aug_feat", "=", "aug_feat_list", ".", "pop", "(", "i_ppr_largest_k", ")", "\n", "aug_feat_list", "=", "[", "top1_aug_feat", "]", "+", "aug_feat_list", "\n", "# only preproc the first occurance of one type of sampler", "\n", "", "sampler_set", "=", "set", "(", ")", "\n", "for", "cfg", "in", "sampler_config_list", ":", "\n", "            ", "if", "cfg", "[", "\"method\"", "]", "not", "in", "sampler_set", ":", "\n", "                ", "sampler_set", ".", "add", "(", "cfg", "[", "\"method\"", "]", ")", "\n", "cfg", "[", "\"is_preproc\"", "]", "=", "True", "\n", "", "", "return", "sampler_config_list", ",", "aug_feat_list", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble._extract_subgraph_return": [[250, 292], ["ret_subg_struct.get_num_valid_subg", "min", "info.append", "int", "set", "set.pop", "graph_engine.frontend.graph.EntityEncoding", "graph_engine.frontend.graph.Subgraph", "getattr", "getattr", "info_enc.append", "info_enc.append", "len", "zip", "enumerate", "numpy.asarray", "dict", "dict", "zip", "numpy.array", "numpy.asarray", "zip", "zip", "range", "graph_engine.frontend.graph.Subgraph.names_data_fields.index"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set"], ["", "def", "_extract_subgraph_return", "(", "self", ",", "ret_subg_struct", ",", "config_sampler", ",", "config_aug", ",", "validate_subg", ")", ":", "\n", "        ", "\"\"\"\n        only for C++ backend\n        \"\"\"", "\n", "clip", "=", "ret_subg_struct", ".", "get_num_valid_subg", "(", ")", "\n", "info", "=", "[", "]", "\n", "for", "n", "in", "Subgraph", ".", "names_data_fields", ":", "\n", "            ", "r", "=", "getattr", "(", "ret_subg_struct", ",", "f'get_subgraph_{n}'", ")", "(", ")", "\n", "info", ".", "append", "(", "[", "np", ".", "asarray", "(", "d", ")", "for", "d", "in", "r", "[", ":", "clip", "]", "]", ")", "\n", "", "info_enc", "=", "[", "]", "\n", "for", "n", "in", "EntityEncoding", ".", "names_data_fields", ":", "\n", "            ", "r", "=", "getattr", "(", "ret_subg_struct", ",", "f'get_subgraph_{n}'", ")", "(", ")", "\n", "if", "f\"{n}s\"", "not", "in", "config_aug", ":", "\n", "                ", "info_enc", ".", "append", "(", "[", "np", ".", "array", "(", "[", "]", ")", "for", "_", "in", "range", "(", "clip", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "info_enc", ".", "append", "(", "[", "np", ".", "asarray", "(", "d", ")", "for", "d", "in", "r", "[", ":", "clip", "]", "]", ")", "\n", "", "", "if", "config_sampler", "[", "'method'", "]", "==", "'ppr'", "and", "'k'", "in", "config_sampler", ":", "\n", "            ", "cap_node_subg", "=", "int", "(", "config_sampler", "[", "'k'", "]", ")", "\n", "num_targets", "=", "set", "(", "[", "tnp", ".", "size", "for", "tnp", "in", "info", "[", "Subgraph", ".", "names_data_fields", ".", "index", "(", "'target'", ")", "]", "]", ")", "\n", "assert", "len", "(", "num_targets", ")", "==", "1", "\n", "cap_node_subg", "*=", "num_targets", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "            ", "cap_node_subg", "=", "self", ".", "num_nodes_full", "\n", "", "cap_edge_subg", "=", "min", "(", "self", ".", "num_edges_full", ",", "cap_node_subg", "**", "2", ")", "\n", "enc_batch", "=", "[", "\n", "EntityEncoding", "(", "\n", "cap_node_subg", "=", "cap_node_subg", ",", "\n", "cap_edge_subg", "=", "cap_edge_subg", ",", "\n", "validate", "=", "validate_subg", ",", "\n", "**", "dict", "(", "zip", "(", "EntityEncoding", ".", "names_data_fields", ",", "sie", ")", ")", "\n", ")", "for", "sie", "in", "zip", "(", "*", "info_enc", ")", "\n", "]", "\n", "return", "[", "\n", "Subgraph", "(", "\n", "cap_node_full", "=", "self", ".", "num_nodes_full", ",", "\n", "cap_edge_full", "=", "self", ".", "num_edges_full", ",", "\n", "cap_node_subg", "=", "cap_node_subg", ",", "\n", "cap_edge_subg", "=", "cap_edge_subg", ",", "\n", "validate", "=", "validate_subg", ",", "\n", "entity_enc", "=", "enc_batch", "[", "i", "]", ",", "\n", "**", "dict", "(", "zip", "(", "Subgraph", ".", "names_data_fields", ",", "si", ")", ")", "\n", ")", "for", "i", ",", "si", "in", "enumerate", "(", "zip", "(", "*", "info", ")", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.drop_full_graph_info": [[294, 297], ["samplers_ensemble.GraphSamplerEnsemble.para_sampler[].drop_full_graph_info"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.drop_full_graph_info"], ["", "def", "drop_full_graph_info", "(", "self", ")", ":", "\n", "        ", "if", "'cpp'", "in", "self", ".", "para_sampler", ":", "\n", "            ", "self", ".", "para_sampler", "[", "'cpp'", "]", ".", "drop_full_graph_info", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.GraphSamplerEnsemble.validate_epoch_end": [[298, 302], ["samplers_ensemble.GraphSamplerEnsemble.para_sampler[].is_seq_root_traversal", "samplers_ensemble.GraphSamplerEnsemble.para_sampler[].get_idx_root"], "methods", ["None"], ["", "", "def", "validate_epoch_end", "(", "self", ")", ":", "\n", "        ", "if", "'cpp'", "in", "self", ".", "para_sampler", ":", "\n", "            ", "assert", "self", ".", "para_sampler", "[", "'cpp'", "]", ".", "get_idx_root", "(", ")", "==", "0", "\n", "assert", "self", ".", "para_sampler", "[", "'cpp'", "]", ".", "is_seq_root_traversal", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.frontend.samplers_ensemble.find_all_backends": [[32, 34], ["set"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.shaDow.minibatch.CachedSubgraph.set"], ["def", "find_all_backends", "(", "configs", ")", ":", "\n", "    ", "return", "set", "(", "[", "NAME2SAMPLER", "[", "c", "[", "'method'", "]", "]", "[", "0", "]", "for", "c", "in", "configs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.scripts.train_multiple_runs.parse_args": [[15, 26], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.scripts.train_multiple_runs.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"repeat the same shaDow configuration multiple times\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "\"name of data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--configs\"", ",", "required", "=", "True", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"path to the configuration of training (*.yml)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--log_test_convergence\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"how often to show the test accuracy during training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "default", "=", "None", ",", "type", "=", "int", ",", "help", "=", "\"which GPU to use\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--nocache\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "choices", "=", "[", "'train'", ",", "'valid'", ",", "'test'", ",", "'all'", "]", ",", "help", "=", "\"don't caching the subgraph samples during for phase train / val / test\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--full_tensor_on_gpu\"", ",", "action", "=", "'store_true'", ",", "required", "=", "False", ",", "help", "=", "'if true, will leave the full graph node feat on gpu'", ")", "\n", "# ===", "\n", "parser", ".", "add_argument", "(", "\"--repetition\"", ",", "required", "=", "True", ",", "type", "=", "int", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_shaDow_GNN.scripts.train_multiple_runs.run": [[39, 50], ["range", "print", "print", "print", "print", "print", "subprocess.Popen", "iter", "subprocess.Popen.stdout.close", "cmd.split"], "function", ["None"], ["def", "run", "(", "args", ",", "cmd", ")", ":", "\n", "    ", "for", "r", "in", "range", "(", "args", ".", "repetition", ")", ":", "\n", "        ", "print", "(", "f\"%%%%%%%%%%%%%%%%%%%%%\"", ")", "\n", "print", "(", "f\"%  STARTING RUN {r:>2d}  %\"", ")", "\n", "print", "(", "f\"%%%%%%%%%%%%%%%%%%%%%\"", ")", "\n", "print", "(", "\"Executing command: \"", ")", "\n", "print", "(", "cmd", ")", "\n", "popen", "=", "subprocess", ".", "Popen", "(", "cmd", ".", "split", "(", ")", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "universal_newlines", "=", "True", ")", "\n", "for", "stdout_lines", "in", "iter", "(", "popen", ".", "stdout", ".", "readline", ",", "\"\"", ")", ":", "\n", "            ", "yield", "stdout_lines", "\n", "", "popen", ".", "stdout", ".", "close", "(", ")", "\n", "\n"]]}