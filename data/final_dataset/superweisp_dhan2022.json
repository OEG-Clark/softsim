{"home.repos.pwc.inspect_result.superweisp_dhan2022.None.PV.RenameUnpickler.find_class": [[79, 84], ["super().find_class"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf.RenameUnpickler.find_class"], ["    ", "def", "find_class", "(", "self", ",", "module", ",", "name", ")", ":", "\n", "        ", "renamed_module", "=", "module", "\n", "if", "module", "==", "\"GPT_GNN.data\"", "or", "module", "==", "'data'", ":", "\n", "            ", "renamed_module", "=", "\"HRGAT.data\"", "\n", "", "return", "super", "(", "RenameUnpickler", ",", "self", ")", ".", "find_class", "(", "renamed_module", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.PV.Data.__init__": [[128, 134], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HRGATConv.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Data", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "train_data", "=", "[", "]", "\n", "self", ".", "valid_data", "=", "[", "]", "\n", "self", ".", "test_data", "=", "[", "]", "\n", "self", ".", "in_hid", "=", "0", "\n", "", "", "pin", "=", "1", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.PV.renamed_load": [[86, 88], ["RenameUnpickler().load", "PV.RenameUnpickler"], "function", ["None"], ["", "", "def", "renamed_load", "(", "file_obj", ")", ":", "\n", "    ", "return", "RenameUnpickler", "(", "file_obj", ")", ".", "load", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf2.RenameUnpickler.find_class": [[86, 91], ["super().find_class"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf.RenameUnpickler.find_class"], ["    ", "def", "find_class", "(", "self", ",", "module", ",", "name", ")", ":", "\n", "        ", "renamed_module", "=", "module", "\n", "if", "module", "==", "\"GPT_GNN.data\"", "or", "module", "==", "'data'", ":", "\n", "            ", "renamed_module", "=", "\"HRGAT.data\"", "\n", "", "return", "super", "(", "RenameUnpickler", ",", "self", ")", ".", "find_class", "(", "renamed_module", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf2.Data.__init__": [[241, 247], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HRGATConv.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Data", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "train_data", "=", "[", "]", "\n", "self", ".", "valid_data", "=", "[", "]", "\n", "self", ".", "test_data", "=", "[", "]", "\n", "self", ".", "in_hid", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf2.renamed_load": [[93, 95], ["RenameUnpickler().load", "sampling_pf2.RenameUnpickler"], "function", ["None"], ["", "", "def", "renamed_load", "(", "file_obj", ")", ":", "\n", "    ", "return", "RenameUnpickler", "(", "file_obj", ")", ".", "load", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf2.node_classification_sample": [[112, 185], ["np.random.seed", "np.random.choice", "HRGAT.data.sample_subgraph", "HRGAT.data.meta_subgraph", "HRGAT.data.direct_subgraph", "HRGAT.data.indirect_subgraph", "HRGAT.data.indirect_subgraph", "HRGAT.data.meta_subgraph", "HRGAT.data.direct_subgraph", "HRGAT.data.to_torch", "HRGAT.data.to_torch", "HRGAT.data.hgt_to_torch", "np.zeros", "enumerate", "sparse.csr_matrix.sum().reshape", "list", "scipy.sparse.csr_matrix", "list", "pairs.keys", "len", "sparse.csr_matrix.sum", "np.array", "cand_list.index"], "function", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.sample_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.meta_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.direct_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.indirect_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.indirect_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.meta_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.direct_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.to_torch", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.to_torch", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.hgt_to_torch"], ["def", "node_classification_sample", "(", "seed", ",", "pairs", ",", "time_range", ")", ":", "\n", "    ", "'''\n        sub-graph sampling and label preparation for node classification:\n        (1) Sample batch_size number of output nodes (papers), get their time.\n    '''", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "target_ids", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "pairs", ".", "keys", "(", ")", ")", ",", "args", ".", "batch_size", ",", "replace", "=", "False", ")", "\n", "target_info", "=", "[", "]", "\n", "for", "target_id", "in", "target_ids", ":", "\n", "        ", "_", ",", "_time", "=", "pairs", "[", "target_id", "]", "\n", "target_info", "+=", "[", "[", "target_id", ",", "_time", "]", "]", "\n", "\n", "", "'''\n        (2) Based on the seed nodes, sample a subgraph with 'sampled_depth' and 'sampled_number'\n    '''", "\n", "feature", ",", "times", ",", "edge_list", ",", "indxs", ",", "pids", "=", "sample_subgraph", "(", "graph", ",", "time_range", ",", "inp", "=", "{", "'paper'", ":", "np", ".", "array", "(", "target_info", ")", "}", ",", "sampled_depth", "=", "args", ".", "sample_depth", ",", "\n", "sampled_number", "=", "args", ".", "sample_number", ")", "\n", "\n", "'''\n        (3) Mask out the edge between the output target nodes (paper) with output source nodes (L2 field)\n    '''", "\n", "masked_edge_list", "=", "[", "]", "\n", "for", "i", "in", "edge_list", "[", "'paper'", "]", "[", "'field'", "]", "[", "'PFL2'", "]", ":", "\n", "        ", "if", "i", "[", "0", "]", "not", "in", "target_ids", ":", "\n", "            ", "masked_edge_list", "+=", "[", "i", "]", "\n", "", "", "edge_list", "[", "'paper'", "]", "[", "'field'", "]", "[", "'PFL2'", "]", "=", "masked_edge_list", "\n", "\n", "masked_edge_list", "=", "[", "]", "\n", "for", "i", "in", "edge_list", "[", "'field'", "]", "[", "'paper'", "]", "[", "'PFL2'", "]", ":", "\n", "        ", "if", "i", "[", "1", "]", "not", "in", "target_ids", ":", "\n", "            ", "masked_edge_list", "+=", "[", "i", "]", "\n", "", "", "edge_list", "[", "'field'", "]", "[", "'paper'", "]", "[", "'PFL2'", "]", "=", "masked_edge_list", "\n", "\n", "'''\n        (4) Transform the subgraph into torch Tensor (edge_index is in format of pytorch_geometric)\n    '''", "\n", "\n", "api_sg", "=", "meta_subgraph", "(", "'author'", ",", "'paper'", ",", "edge_list", ",", "random_edge", "=", "True", ")", "\n", "ad_sg", "=", "direct_subgraph", "(", "edge_list", ",", "'author'", ",", "random_edge", "=", "False", ")", "\n", "\n", "pvi_sg", "=", "indirect_subgraph", "(", "'paper'", ",", "'venue'", ",", "edge_list", ",", "random_edge", "=", "True", ")", "\n", "pfi_sg", "=", "indirect_subgraph", "(", "'paper'", ",", "'field'", ",", "edge_list", ",", "random_edge", "=", "True", ",", "random_loop", "=", "1", ",", "pids", "=", "pids", ")", "\n", "pai_sg", "=", "meta_subgraph", "(", "'paper'", ",", "'author'", ",", "edge_list", ",", "random_edge", "=", "True", ")", "\n", "pd_sg", "=", "direct_subgraph", "(", "edge_list", ",", "'paper'", ",", "random_edge", "=", "True", ")", "#two directed graphs", "\n", "############################", "\n", "au_gh", "=", "{", "'colleague'", ":", "ad_sg", ",", "'apa1'", ":", "api_sg", "[", "'AP_important'", "]", ",", "'apa2'", ":", "api_sg", "[", "'AP_ordinary'", "]", ",", "}", "\n", "pa_gh", "=", "{", "'venue'", ":", "pvi_sg", ",", "'field'", ":", "pfi_sg", ",", "'pap1'", ":", "pai_sg", "[", "'AP_important'", "]", ",", "'pap2'", ":", "pai_sg", "[", "'AP_ordinary'", "]", ",", "'cite'", ":", "pd_sg", "[", "0", "]", ",", "'rev_cite'", ":", "pd_sg", "[", "1", "]", "}", "\n", "\n", "AP_sg", "=", "{", "'AP1'", ":", "edge_list", "[", "'author'", "]", "[", "'paper'", "]", "[", "'AP_important'", "]", ",", "'AP2'", ":", "edge_list", "[", "'author'", "]", "[", "'paper'", "]", "[", "'AP_ordinary'", "]", "}", "\n", "PA_sg", "=", "{", "'PA1'", ":", "edge_list", "[", "'paper'", "]", "[", "'author'", "]", "[", "'AP_important'", "]", ",", "'PA2'", ":", "edge_list", "[", "'paper'", "]", "[", "'author'", "]", "[", "'AP_ordinary'", "]", "}", "\n", "\n", "# paper_gh=to_torch(feature['paper'], indxs['paper'], pa_gh)", "\n", "# author_gh=to_torch(feature['author'], indxs['author'], au_gh)", "\n", "paper_gh", "=", "to_torch", "(", "pa_gh", ")", "\n", "author_gh", "=", "to_torch", "(", "au_gh", ")", "\n", "\n", "total_gh", "=", "{", "'colleague'", ":", "ad_sg", ",", "'venue'", ":", "pvi_sg", ",", "'field'", ":", "pfi_sg", ",", "'cite'", ":", "pd_sg", "[", "0", "]", ",", "'rev_cite'", ":", "pd_sg", "[", "1", "]", ",", "**", "AP_sg", ",", "**", "PA_sg", "}", "\n", "\n", "total_gh", "=", "hgt_to_torch", "(", "(", "indxs", "[", "'paper'", "]", ",", "indxs", "[", "'author'", "]", ")", ",", "total_gh", ")", "\n", "'''\n        (5) Prepare the labels for each output target node (paper), and their index in sampled graph.\n            (node_dict[type][0] stores the start index of a specific type of nodes)\n    '''", "\n", "ylabel", "=", "np", ".", "zeros", "(", "[", "args", ".", "batch_size", ",", "len", "(", "cand_list", ")", "]", ")", "\n", "for", "x_id", ",", "target_id", "in", "enumerate", "(", "target_ids", ")", ":", "\n", "        ", "for", "source_id", "in", "pairs", "[", "target_id", "]", "[", "0", "]", ":", "\n", "            ", "ylabel", "[", "x_id", "]", "[", "cand_list", ".", "index", "(", "source_id", ")", "]", "=", "1", "\n", "", "", "ylabel", "/=", "ylabel", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "x_ids", "=", "list", "(", "target_ids", ")", "\n", "ylabel", "=", "sparse", ".", "csr_matrix", "(", "ylabel", ")", "\n", "return", "[", "paper_gh", ",", "author_gh", ",", "total_gh", ",", "edge_list", ",", "x_ids", ",", "ylabel", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf2.prepare_data": [[187, 198], ["np.arange", "sampling_pf2.node_classification_sample", "jobs.append", "sampling_pf2.node_classification_sample", "jobs.append", "randint", "randint"], "function", ["home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf.node_classification_sample", "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf.node_classification_sample", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.randint", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.randint"], ["", "def", "prepare_data", "(", ")", ":", "\n", "    ", "'''\n        Sampled and prepare training and validation data using multi-process parallization.\n    '''", "\n", "jobs", "=", "[", "]", "\n", "for", "batch_id", "in", "np", ".", "arange", "(", "args", ".", "n_batch", ")", ":", "\n", "        ", "p", "=", "node_classification_sample", "(", "randint", "(", ")", ",", "sel_train_pairs", ",", "train_range", ")", "\n", "jobs", ".", "append", "(", "p", ")", "\n", "", "p", "=", "node_classification_sample", "(", "randint", "(", ")", ",", "sel_valid_pairs", ",", "valid_range", ")", "\n", "jobs", ".", "append", "(", "p", ")", "\n", "return", "jobs", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_ad.RenameUnpickler.find_class": [[86, 91], ["super().find_class"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf.RenameUnpickler.find_class"], ["    ", "def", "find_class", "(", "self", ",", "module", ",", "name", ")", ":", "\n", "        ", "renamed_module", "=", "module", "\n", "if", "module", "==", "\"GPT_GNN.data\"", "or", "module", "==", "'data'", ":", "\n", "            ", "renamed_module", "=", "\"HRGAT.data\"", "\n", "", "return", "super", "(", "RenameUnpickler", ",", "self", ")", ".", "find_class", "(", "renamed_module", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_ad.Data.__init__": [[362, 368], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HRGATConv.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Data", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "train_data", "=", "[", "]", "\n", "self", ".", "valid_data", "=", "[", "]", "\n", "self", ".", "test_data", "=", "[", "]", "\n", "self", ".", "in_hid", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_ad.renamed_load": [[93, 95], ["RenameUnpickler().load", "sampling_ad.RenameUnpickler"], "function", ["None"], ["", "", "def", "renamed_load", "(", "file_obj", ")", ":", "\n", "    ", "return", "RenameUnpickler", "(", "file_obj", ")", ".", "load", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_ad.mask_softmax": [[142, 149], ["np.log", "torch.log_softmax"], "function", ["None"], ["def", "mask_softmax", "(", "pred", ",", "size", ")", ":", "\n", "    ", "loss", "=", "0", "\n", "stx", "=", "0", "\n", "for", "l", "in", "size", ":", "\n", "        ", "loss", "+=", "torch", ".", "log_softmax", "(", "pred", "[", "stx", ":", "stx", "+", "l", "]", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "/", "np", ".", "log", "(", "l", ")", "\n", "stx", "+=", "l", "\n", "", "return", "-", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_ad.author_disambiguation_sample": [[158, 293], ["np.random.seed", "np.random.choice", "np.max", "HRGAT.data.sample_subgraph", "collections.defaultdict", "HRGAT.data.meta_subgraph", "HRGAT.data.direct_subgraph", "HRGAT.data.indirect_subgraph", "HRGAT.data.indirect_subgraph", "HRGAT.data.meta_subgraph", "HRGAT.data.direct_subgraph", "list", "HRGAT.data.to_torch", "HRGAT.data.to_torch", "HRGAT.data.hgt_to_torch", "dill.dumps", "dill.dumps", "list", "min", "list", "len", "set", "pairs.keys", "len", "time_range.keys", "set", "list", "len", "np.array", "np.array", "pairs.keys"], "function", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.sample_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.meta_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.direct_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.indirect_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.indirect_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.meta_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.direct_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.to_torch", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.to_torch", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.hgt_to_torch"], ["def", "author_disambiguation_sample", "(", "seed", ",", "pairs", ",", "time_range", ",", "batch_size", ")", ":", "\n", "    ", "'''\n        sub-graph sampling and label preparation for author disambiguation:\n        (1) Sample batch_size // 4 number of names\n    '''", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "\n", "names", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "pairs", ".", "keys", "(", ")", ")", ",", "min", "(", "batch_size", "//", "4", ",", "len", "(", "list", "(", "pairs", ".", "keys", "(", ")", ")", ")", ")", ",", "replace", "=", "False", ")", "\n", "\n", "'''\n        (2) Get all the papers written by these same-name authors, and then prepare the label\n    '''", "\n", "\n", "author_dict", "=", "{", "}", "\n", "author_info", "=", "[", "]", "\n", "paper_info", "=", "[", "]", "\n", "name_label", "=", "{", "}", "\n", "max_time", "=", "np", ".", "max", "(", "list", "(", "time_range", ".", "keys", "(", ")", ")", ")", "\n", "\n", "\n", "pl", "=", "[", "]", "\n", "al", "=", "[", "]", "\n", "gl", "=", "[", "]", "\n", "\n", "for", "name", "in", "names", ":", "\n", "        ", "author_list", "=", "name_count", "[", "name", "]", "\n", "for", "a_id", "in", "author_list", ":", "\n", "            ", "if", "a_id", "not", "in", "author_dict", ":", "\n", "                ", "author_dict", "[", "a_id", "]", "=", "len", "(", "author_dict", ")", "\n", "author_info", "+=", "[", "[", "a_id", ",", "max_time", "]", "]", "\n", "al", "+=", "[", "a_id", "]", "\n", "", "", "for", "p_id", ",", "author_id", ",", "_time", "in", "pairs", "[", "name", "]", ":", "\n", "            ", "paper_info", "+=", "[", "[", "p_id", ",", "_time", "]", "]", "\n", "pl", "+=", "[", "p_id", "]", "\n", "gl", "+=", "[", "author_id", "]", "\n", "'''\n                For each paper, create a list: the first entry is the true author's id,\n                while the others are negative samples (id of authors with same name)\n            '''", "\n", "name_label", "[", "p_id", "]", "=", "[", "author_id", "]", "+", "[", "a_id", "for", "a_id", "in", "author_list", "if", "a_id", "!=", "author_id", "]", "\n", "\n", "", "", "global", "step", "\n", "global", "fre_list", "\n", "global", "node_sta", "\n", "global", "step_list", "\n", "global", "total_sta", "\n", "step", "+=", "1", "\n", "for", "ai", "in", "al", ":", "\n", "        ", "fre_list", "[", "'author'", "]", "[", "ai", "]", "+=", "1", "\n", "", "for", "pi", "in", "pl", ":", "\n", "        ", "fre_list", "[", "'paper'", "]", "[", "pi", "]", "+=", "1", "\n", "", "step_list", "[", "step", "]", "=", "fre_list", "\n", "total_sta", "+=", "[", "step_list", "]", "\n", "\n", "'''\n        (3) Based on the seed nodes, sample a subgraph with 'sampled_depth' and 'sampled_number'\n    '''", "\n", "feature", ",", "times", ",", "edge_list", ",", "indxs", ",", "pids", "=", "sample_subgraph", "(", "graph", ",", "time_range", ",", "inp", "=", "{", "'paper'", ":", "np", ".", "array", "(", "paper_info", ")", ",", "\n", "'author'", ":", "np", ".", "array", "(", "author_info", ")", "}", ",", "sampled_depth", "=", "args", ".", "sample_depth", ",", "sampled_number", "=", "args", ".", "sample_number", ")", "\n", "'''\n        (4) Mask out the edge between the output target nodes (paper) with output source nodes (author)\n    '''", "\n", "true_pair", "=", "[", "]", "\n", "for", "name", "in", "names", ":", "\n", "        ", "for", "p", "in", "pairs", "[", "name", "]", ":", "\n", "            ", "true_pair", "+=", "[", "[", "p", "[", "0", "]", ",", "p", "[", "1", "]", "]", "]", "\n", "true_pair", "+=", "[", "[", "p", "[", "1", "]", ",", "p", "[", "0", "]", "]", "]", "\n", "\n", "\n", "\n", "", "", "node_list", "=", "defaultdict", "(", "lambda", ":", "[", "]", ")", "\n", "for", "t", "in", "edge_list", ":", "\n", "        ", "for", "s", "in", "edge_list", "[", "t", "]", ":", "\n", "            ", "for", "r", "in", "edge_list", "[", "t", "]", "[", "s", "]", ":", "\n", "                ", "for", "e", "in", "edge_list", "[", "t", "]", "[", "s", "]", "[", "r", "]", ":", "\n", "                    ", "node_list", "[", "t", "]", "+=", "[", "e", "[", "0", "]", "]", "\n", "", "", "", "", "node_num", "=", "{", "}", "\n", "for", "nd", "in", "node_list", ":", "\n", "        ", "node_num", "[", "nd", "]", "=", "len", "(", "set", "(", "node_list", "[", "nd", "]", ")", ")", "\n", "", "node_sta", "[", "step", "]", "=", "node_num", "\n", "\n", "\n", "masked_edge_list", "=", "[", "]", "\n", "\n", "\n", "\n", "for", "i", "in", "edge_list", "[", "'paper'", "]", "[", "'author'", "]", "[", "'AP_important'", "]", ":", "\n", "        ", "if", "i", "not", "in", "true_pair", ":", "\n", "            ", "masked_edge_list", "+=", "[", "i", "]", "\n", "", "", "edge_list", "[", "'paper'", "]", "[", "'author'", "]", "[", "'AP_important'", "]", "=", "masked_edge_list", "\n", "\n", "masked_edge_list", "=", "[", "]", "\n", "for", "i", "in", "edge_list", "[", "'author'", "]", "[", "'paper'", "]", "[", "'AP_important'", "]", ":", "\n", "        ", "if", "i", "not", "in", "true_pair", ":", "\n", "            ", "masked_edge_list", "+=", "[", "i", "]", "\n", "", "", "edge_list", "[", "'author'", "]", "[", "'paper'", "]", "[", "'AP_important'", "]", "=", "masked_edge_list", "\n", "\n", "\n", "api_sg", "=", "meta_subgraph", "(", "'author'", ",", "'paper'", ",", "edge_list", ",", "random_edge", "=", "True", ")", "\n", "ad_sg", "=", "direct_subgraph", "(", "edge_list", ",", "'author'", ",", "random_edge", "=", "True", ")", "\n", "\n", "pvi_sg", "=", "indirect_subgraph", "(", "'paper'", ",", "'venue'", ",", "edge_list", ",", "random_edge", "=", "True", ")", "\n", "pfi_sg", "=", "indirect_subgraph", "(", "'paper'", ",", "'field'", ",", "edge_list", ",", "random_edge", "=", "True", ",", "random_loop", "=", "1", ",", "pids", "=", "pids", ")", "\n", "pai_sg", "=", "meta_subgraph", "(", "'paper'", ",", "'author'", ",", "edge_list", ",", "random_edge", "=", "True", ")", "\n", "pd_sg", "=", "direct_subgraph", "(", "edge_list", ",", "'paper'", ",", "random_edge", "=", "True", ")", "#two directed graphs", "\n", "############################", "\n", "au_gh", "=", "{", "'colleague'", ":", "ad_sg", ",", "'apa1'", ":", "api_sg", "[", "'AP_important'", "]", ",", "'apa2'", ":", "api_sg", "[", "'AP_ordinary'", "]", ",", "}", "\n", "pa_gh", "=", "{", "'venue'", ":", "pvi_sg", ",", "'field'", ":", "pfi_sg", ",", "'pap1'", ":", "pai_sg", "[", "'AP_important'", "]", ",", "'pap2'", ":", "pai_sg", "[", "'AP_ordinary'", "]", ",", "'cite'", ":", "pd_sg", "[", "0", "]", ",", "'rev_cite'", ":", "pd_sg", "[", "1", "]", "}", "\n", "\n", "AP_sg", "=", "{", "'AP1'", ":", "edge_list", "[", "'author'", "]", "[", "'paper'", "]", "[", "'AP_important'", "]", ",", "'AP2'", ":", "edge_list", "[", "'author'", "]", "[", "'paper'", "]", "[", "'AP_ordinary'", "]", "}", "\n", "PA_sg", "=", "{", "'PA1'", ":", "edge_list", "[", "'paper'", "]", "[", "'author'", "]", "[", "'AP_important'", "]", ",", "'PA2'", ":", "edge_list", "[", "'paper'", "]", "[", "'author'", "]", "[", "'AP_ordinary'", "]", "}", "\n", "\n", "'''\n        (5) Transform the subgraph into torch Tensor (edge_index is in format of pytorch_geometric)\n    '''", "\n", "# (node_feature, edge_index, edge_type, id_list)", "\n", "author_key", "=", "[", "]", "\n", "for", "paper_id", "in", "name_label", ":", "\n", "        ", "author_ids", "=", "name_label", "[", "paper_id", "]", "\n", "author_key", "+=", "author_ids", "\n", "", "author_key", "=", "list", "(", "set", "(", "author_key", ")", ")", "\n", "\n", "paper_gh", "=", "to_torch", "(", "pa_gh", ")", "\n", "author_gh", "=", "to_torch", "(", "au_gh", ",", "idla", "=", "author_key", ")", "\n", "\n", "\n", "\n", "total_gh", "=", "{", "'colleague'", ":", "ad_sg", ",", "'venue'", ":", "pvi_sg", ",", "'field'", ":", "pfi_sg", ",", "'cite'", ":", "pd_sg", "[", "0", "]", ",", "'rev_cite'", ":", "pd_sg", "[", "1", "]", ",", "**", "AP_sg", ",", "**", "PA_sg", "}", "\n", "total_gh", "=", "hgt_to_torch", "(", "(", "indxs", "[", "'paper'", "]", ",", "indxs", "[", "'author'", "]", ")", ",", "total_gh", ",", "idla", "=", "author_key", ")", "\n", "\n", "\n", "return", "dill", ".", "dumps", "(", "[", "paper_gh", ",", "author_gh", ",", "total_gh", ",", "edge_list", ",", "name_label", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_ad.prepare_data": [[295, 308], ["np.arange", "pool.apply_async", "jobs.append", "pool.apply_async", "jobs.append", "randint", "randint"], "function", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.randint", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.randint"], ["", "def", "prepare_data", "(", "pool", ")", ":", "\n", "    ", "'''\n        Sampled and prepare training and validation data using multi-process parallization.\n    '''", "\n", "jobs", "=", "[", "]", "\n", "for", "batch_id", "in", "np", ".", "arange", "(", "args", ".", "n_batch", ")", ":", "\n", "        ", "p", "=", "pool", ".", "apply_async", "(", "author_disambiguation_sample", ",", "args", "=", "(", "randint", "(", ")", ",", "sel_train_pairs", ",", "train_range", ",", "args", ".", "batch_size", ")", ")", "\n", "jobs", ".", "append", "(", "p", ")", "\n", "", "p", "=", "pool", ".", "apply_async", "(", "author_disambiguation_sample", ",", "args", "=", "(", "randint", "(", ")", ",", "sel_valid_pairs", ",", "valid_range", ",", "args", ".", "batch_size", ")", ")", "\n", "jobs", ".", "append", "(", "p", ")", "\n", "return", "jobs", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.PF2.RenameUnpickler.find_class": [[90, 95], ["super().find_class"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf.RenameUnpickler.find_class"], ["    ", "def", "find_class", "(", "self", ",", "module", ",", "name", ")", ":", "\n", "        ", "renamed_module", "=", "module", "\n", "if", "module", "==", "\"GPT_GNN.data\"", "or", "module", "==", "'data'", ":", "\n", "            ", "renamed_module", "=", "\"HRGAT.data\"", "\n", "", "return", "super", "(", "RenameUnpickler", ",", "self", ")", ".", "find_class", "(", "renamed_module", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.PF2.Data.__init__": [[146, 152], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HRGATConv.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Data", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "train_data", "=", "[", "]", "\n", "self", ".", "valid_data", "=", "[", "]", "\n", "self", ".", "test_data", "=", "[", "]", "\n", "self", ".", "in_hid", "=", "0", "\n", "", "", "pin", "=", "1", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.PF2.renamed_load": [[97, 99], ["RenameUnpickler().load", "PF2.RenameUnpickler"], "function", ["None"], ["", "", "def", "renamed_load", "(", "file_obj", ")", ":", "\n", "    ", "return", "RenameUnpickler", "(", "file_obj", ")", ".", "load", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.PF.RenameUnpickler.find_class": [[86, 91], ["super().find_class"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf.RenameUnpickler.find_class"], ["    ", "def", "find_class", "(", "self", ",", "module", ",", "name", ")", ":", "\n", "        ", "renamed_module", "=", "module", "\n", "if", "module", "==", "\"GPT_GNN.data\"", "or", "module", "==", "'data'", ":", "\n", "            ", "renamed_module", "=", "\"HRGAT.data\"", "\n", "", "return", "super", "(", "RenameUnpickler", ",", "self", ")", ".", "find_class", "(", "renamed_module", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.PF.Data.__init__": [[142, 148], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HRGATConv.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Data", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "train_data", "=", "[", "]", "\n", "self", ".", "valid_data", "=", "[", "]", "\n", "self", ".", "test_data", "=", "[", "]", "\n", "self", ".", "in_hid", "=", "0", "\n", "", "", "pin", "=", "1", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.PF.renamed_load": [[93, 95], ["RenameUnpickler().load", "PF.RenameUnpickler"], "function", ["None"], ["", "", "def", "renamed_load", "(", "file_obj", ")", ":", "\n", "    ", "return", "RenameUnpickler", "(", "file_obj", ")", ".", "load", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.AD.RenameUnpickler.find_class": [[87, 92], ["super().find_class"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf.RenameUnpickler.find_class"], ["    ", "def", "find_class", "(", "self", ",", "module", ",", "name", ")", ":", "\n", "        ", "renamed_module", "=", "module", "\n", "if", "module", "==", "\"GPT_GNN.data\"", "or", "module", "==", "'data'", ":", "\n", "            ", "renamed_module", "=", "\"HRGAT.data\"", "\n", "", "return", "super", "(", "RenameUnpickler", ",", "self", ")", ".", "find_class", "(", "renamed_module", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.AD.Data.__init__": [[118, 123], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HRGATConv.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Data", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "train_data", "=", "[", "]", "\n", "self", ".", "valid_data", "=", "[", "]", "\n", "self", ".", "test_data", "=", "[", "]", "\n", "", "", "pin", "=", "1", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.AD.renamed_load": [[94, 96], ["RenameUnpickler().load", "AD.RenameUnpickler"], "function", ["None"], ["", "", "def", "renamed_load", "(", "file_obj", ")", ":", "\n", "    ", "return", "RenameUnpickler", "(", "file_obj", ")", ".", "load", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.AD.mask_softmax": [[101, 115], ["enumerate", "torch.LongTensor", "torch.LongTensor().to", "torch.log", "torch_geometric.utils.softmax", "torch.log", "len", "torch.LongTensor", "torch.FloatTensor().to", "torch.log.sum", "torch.ones", "torch.cat().tolist", "torch.FloatTensor", "torch.cat"], "function", ["None"], ["def", "mask_softmax", "(", "pred", ",", "size", ")", ":", "\n", "    ", "sz", "=", "[", "]", "\n", "ix", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "idx", ",", "i", "in", "enumerate", "(", "size", ")", ":", "\n", "        ", "sz", "+=", "[", "torch", ".", "ones", "(", "i", ")", "*", "idx", "]", "\n", "ix", "+=", "[", "count", "]", "\n", "count", "+=", "i", "\n", "", "ix", "=", "torch", ".", "LongTensor", "(", "ix", ")", "\n", "sz", "=", "torch", ".", "LongTensor", "(", "torch", ".", "cat", "(", "sz", ")", ".", "tolist", "(", ")", ")", ".", "to", "(", "pred", ".", "device", ")", "\n", "\n", "loss", "=", "torch", ".", "log", "(", "softmax", "(", "pred", "/", "0.05", ",", "sz", ")", ")", "\n", "loss", "=", "loss", "[", "ix", "]", "/", "torch", ".", "log", "(", "torch", ".", "FloatTensor", "(", "size", ")", ".", "to", "(", "pred", ".", "device", ")", ")", "\n", "return", "-", "loss", ".", "sum", "(", ")", "/", "len", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.AD.rand_mrr": [[161, 164], ["np.average", "np.average", "range"], "function", ["None"], ["def", "rand_mrr", "(", "key_size", ")", ":", "\n", "    ", "rt", "=", "np", ".", "average", "(", "[", "np", ".", "average", "(", "[", "1", "/", "i", "for", "i", "in", "range", "(", "1", ",", "k", "+", "1", ")", "]", ")", "for", "k", "in", "key_size", "]", ")", "\n", "return", "rt", "\n", "", "def", "rand_ndcg", "(", "key_size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.AD.rand_ndcg": [[164, 167], ["np.average", "np.average", "np.log2", "range"], "function", ["None"], ["", "def", "rand_ndcg", "(", "key_size", ")", ":", "\n", "    ", "rt", "=", "np", ".", "average", "(", "[", "np", ".", "average", "(", "1", "/", "np", ".", "log2", "(", "range", "(", "2", ",", "i", "+", "2", ")", ")", ")", "for", "i", "in", "key_size", "]", ")", "\n", "return", "rt", "\n", "", "round", "=", "0", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pv.RenameUnpickler.find_class": [[85, 90], ["super().find_class"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf.RenameUnpickler.find_class"], ["    ", "def", "find_class", "(", "self", ",", "module", ",", "name", ")", ":", "\n", "        ", "renamed_module", "=", "module", "\n", "if", "module", "==", "\"GPT_GNN.data\"", "or", "module", "==", "'data'", ":", "\n", "            ", "renamed_module", "=", "\"HRGAT.data\"", "\n", "", "return", "super", "(", "RenameUnpickler", ",", "self", ")", ".", "find_class", "(", "renamed_module", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pv.Data.__init__": [[235, 241], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HRGATConv.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Data", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "train_data", "=", "[", "]", "\n", "self", ".", "valid_data", "=", "[", "]", "\n", "self", ".", "test_data", "=", "[", "]", "\n", "self", ".", "in_hid", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pv.renamed_load": [[92, 94], ["RenameUnpickler().load", "sampling_pv.RenameUnpickler"], "function", ["None"], ["", "", "def", "renamed_load", "(", "file_obj", ")", ":", "\n", "    ", "return", "RenameUnpickler", "(", "file_obj", ")", ".", "load", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pv.node_classification_sample": [[109, 180], ["np.random.seed", "np.random.choice", "HRGAT.data.sample_subgraph", "HRGAT.data.meta_subgraph", "HRGAT.data.direct_subgraph", "HRGAT.data.indirect_subgraph", "HRGAT.data.indirect_subgraph", "HRGAT.data.meta_subgraph", "HRGAT.data.direct_subgraph", "HRGAT.data.to_torch", "HRGAT.data.to_torch", "HRGAT.data.hgt_to_torch", "torch.zeros", "enumerate", "list", "list", "cand_list.index", "pairs.keys", "np.array"], "function", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.sample_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.meta_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.direct_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.indirect_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.indirect_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.meta_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.direct_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.to_torch", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.to_torch", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.hgt_to_torch"], ["def", "node_classification_sample", "(", "seed", ",", "pairs", ",", "time_range", ")", ":", "\n", "    ", "'''\n        sub-graph sampling and label preparation for node classification:\n        (1) Sample batch_size number of output nodes (papers), get their time.\n    '''", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "target_ids", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "pairs", ".", "keys", "(", ")", ")", ",", "args", ".", "batch_size", ",", "replace", "=", "False", ")", "\n", "target_info", "=", "[", "]", "\n", "for", "target_id", "in", "target_ids", ":", "\n", "        ", "_", ",", "_time", "=", "pairs", "[", "target_id", "]", "\n", "target_info", "+=", "[", "[", "target_id", ",", "_time", "]", "]", "\n", "\n", "", "'''\n        (2) Based on the seed nodes, sample a subgraph with 'sampled_depth' and 'sampled_number'\n    '''", "\n", "feature", ",", "times", ",", "edge_list", ",", "indxs", ",", "pids", "=", "sample_subgraph", "(", "graph", ",", "time_range", ",", "inp", "=", "{", "'paper'", ":", "np", ".", "array", "(", "target_info", ")", "}", ",", "sampled_depth", "=", "args", ".", "sample_depth", ",", "\n", "sampled_number", "=", "args", ".", "sample_number", ")", "\n", "\n", "'''\n        (3) Mask out the edge between the output target nodes (paper) with output source nodes (L2 field)\n    '''", "\n", "masked_edge_list", "=", "[", "]", "\n", "for", "i", "in", "edge_list", "[", "'paper'", "]", "[", "'venue'", "]", "[", "'PVJournal'", "]", ":", "\n", "        ", "if", "i", "[", "0", "]", "not", "in", "target_ids", ":", "\n", "            ", "masked_edge_list", "+=", "[", "i", "]", "\n", "", "", "edge_list", "[", "'paper'", "]", "[", "'venue'", "]", "[", "'PVJournal'", "]", "=", "masked_edge_list", "\n", "\n", "masked_edge_list", "=", "[", "]", "\n", "for", "i", "in", "edge_list", "[", "'venue'", "]", "[", "'paper'", "]", "[", "'PVJournal'", "]", ":", "\n", "        ", "if", "i", "[", "1", "]", "not", "in", "target_ids", ":", "\n", "            ", "masked_edge_list", "+=", "[", "i", "]", "\n", "", "", "edge_list", "[", "'venue'", "]", "[", "'paper'", "]", "[", "'PVJournal'", "]", "=", "masked_edge_list", "\n", "\n", "'''\n        (4) Transform the subgraph into torch Tensor (edge_index is in format of pytorch_geometric)\n    '''", "\n", "\n", "api_sg", "=", "meta_subgraph", "(", "'author'", ",", "'paper'", ",", "edge_list", ",", "random_edge", "=", "True", ")", "\n", "ad_sg", "=", "direct_subgraph", "(", "edge_list", ",", "'author'", ",", "random_edge", "=", "True", ")", "\n", "\n", "pvi_sg", "=", "indirect_subgraph", "(", "'paper'", ",", "'venue'", ",", "edge_list", ",", "random_edge", "=", "True", ")", "\n", "pfi_sg", "=", "indirect_subgraph", "(", "'paper'", ",", "'field'", ",", "edge_list", ",", "random_edge", "=", "True", ",", "random_loop", "=", "1", ",", "pids", "=", "pids", ")", "\n", "pai_sg", "=", "meta_subgraph", "(", "'paper'", ",", "'author'", ",", "edge_list", ",", "random_edge", "=", "True", ")", "\n", "pd_sg", "=", "direct_subgraph", "(", "edge_list", ",", "'paper'", ",", "random_edge", "=", "True", ")", "#two directed graphs", "\n", "############################", "\n", "au_gh", "=", "{", "'colleague'", ":", "ad_sg", ",", "'apa1'", ":", "api_sg", "[", "'AP_important'", "]", ",", "'apa2'", ":", "api_sg", "[", "'AP_ordinary'", "]", ",", "}", "\n", "pa_gh", "=", "{", "'venue'", ":", "pvi_sg", ",", "'field'", ":", "pfi_sg", ",", "'pap1'", ":", "pai_sg", "[", "'AP_important'", "]", ",", "'pap2'", ":", "pai_sg", "[", "'AP_ordinary'", "]", ",", "'cite'", ":", "pd_sg", "[", "0", "]", ",", "'rev_cite'", ":", "pd_sg", "[", "1", "]", "}", "\n", "\n", "AP_sg", "=", "{", "'AP1'", ":", "edge_list", "[", "'author'", "]", "[", "'paper'", "]", "[", "'AP_important'", "]", ",", "'AP2'", ":", "edge_list", "[", "'author'", "]", "[", "'paper'", "]", "[", "'AP_ordinary'", "]", "}", "\n", "PA_sg", "=", "{", "'PA1'", ":", "edge_list", "[", "'paper'", "]", "[", "'author'", "]", "[", "'AP_important'", "]", ",", "'PA2'", ":", "edge_list", "[", "'paper'", "]", "[", "'author'", "]", "[", "'AP_ordinary'", "]", "}", "\n", "\n", "# paper_gh=to_torch(feature['paper'], indxs['paper'], pa_gh)", "\n", "# author_gh=to_torch(feature['author'], indxs['author'], au_gh)", "\n", "paper_gh", "=", "to_torch", "(", "pa_gh", ")", "\n", "author_gh", "=", "to_torch", "(", "au_gh", ")", "\n", "\n", "total_gh", "=", "{", "'colleague'", ":", "ad_sg", ",", "'venue'", ":", "pvi_sg", ",", "'field'", ":", "pfi_sg", ",", "'cite'", ":", "pd_sg", "[", "0", "]", ",", "'rev_cite'", ":", "pd_sg", "[", "1", "]", ",", "**", "AP_sg", ",", "**", "PA_sg", "}", "\n", "# total_gh=hgt_to_torch((feature['paper'],feature['author']),(indxs['paper'],indxs['author']),total_gh)", "\n", "total_gh", "=", "hgt_to_torch", "(", "(", "indxs", "[", "'paper'", "]", ",", "indxs", "[", "'author'", "]", ")", ",", "total_gh", ")", "\n", "'''\n        (5) Prepare the labels for each output target node (paper), and their index in sampled graph.\n            (node_dict[type][0] stores the start index of a specific type of nodes)\n    '''", "\n", "ylabel", "=", "torch", ".", "zeros", "(", "args", ".", "batch_size", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "for", "x_id", ",", "target_id", "in", "enumerate", "(", "target_ids", ")", ":", "\n", "        ", "ylabel", "[", "x_id", "]", "=", "cand_list", ".", "index", "(", "pairs", "[", "target_id", "]", "[", "0", "]", ")", "\n", "", "x_ids", "=", "list", "(", "target_ids", ")", "\n", "\n", "return", "[", "paper_gh", ",", "author_gh", ",", "total_gh", ",", "edge_list", ",", "x_ids", ",", "ylabel", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pv.prepare_data": [[182, 193], ["np.arange", "sampling_pv.node_classification_sample", "jobs.append", "sampling_pv.node_classification_sample", "jobs.append", "randint", "randint"], "function", ["home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf.node_classification_sample", "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf.node_classification_sample", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.randint", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.randint"], ["", "def", "prepare_data", "(", ")", ":", "\n", "    ", "'''\n        Sampled and prepare training and validation data using multi-process parallization.\n    '''", "\n", "jobs", "=", "[", "]", "\n", "for", "batch_id", "in", "np", ".", "arange", "(", "args", ".", "n_batch", ")", ":", "\n", "        ", "p", "=", "node_classification_sample", "(", "randint", "(", ")", ",", "sel_train_pairs", ",", "train_range", ")", "\n", "jobs", ".", "append", "(", "p", ")", "\n", "", "p", "=", "node_classification_sample", "(", "randint", "(", ")", ",", "sel_valid_pairs", ",", "valid_range", ")", "\n", "jobs", ".", "append", "(", "p", ")", "\n", "return", "jobs", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf.RenameUnpickler.find_class": [[80, 85], ["super().find_class"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf.RenameUnpickler.find_class"], ["    ", "def", "find_class", "(", "self", ",", "module", ",", "name", ")", ":", "\n", "        ", "renamed_module", "=", "module", "\n", "if", "module", "==", "\"GPT_GNN.data\"", "or", "module", "==", "'data'", ":", "\n", "            ", "renamed_module", "=", "\"HRGAT.data\"", "\n", "", "return", "super", "(", "RenameUnpickler", ",", "self", ")", ".", "find_class", "(", "renamed_module", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf.Data.__init__": [[233, 239], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HRGATConv.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Data", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "train_data", "=", "[", "]", "\n", "self", ".", "valid_data", "=", "[", "]", "\n", "self", ".", "test_data", "=", "[", "]", "\n", "self", ".", "in_hid", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf.renamed_load": [[87, 89], ["RenameUnpickler().load", "sampling_pf.RenameUnpickler"], "function", ["None"], ["", "", "def", "renamed_load", "(", "file_obj", ")", ":", "\n", "    ", "return", "RenameUnpickler", "(", "file_obj", ")", ".", "load", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf.node_classification_sample": [[106, 179], ["np.random.seed", "np.random.choice", "HRGAT.data.sample_subgraph", "HRGAT.data.meta_subgraph", "HRGAT.data.direct_subgraph", "HRGAT.data.indirect_subgraph", "HRGAT.data.indirect_subgraph", "HRGAT.data.meta_subgraph", "HRGAT.data.direct_subgraph", "HRGAT.data.to_torch", "HRGAT.data.to_torch", "HRGAT.data.hgt_to_torch", "np.zeros", "enumerate", "np.zeros.sum().reshape", "list", "list", "pairs.keys", "len", "np.zeros.sum", "np.array", "cand_list.index"], "function", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.sample_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.meta_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.direct_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.indirect_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.indirect_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.meta_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.direct_subgraph", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.to_torch", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.to_torch", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.hgt_to_torch"], ["def", "node_classification_sample", "(", "seed", ",", "pairs", ",", "time_range", ")", ":", "\n", "    ", "'''\n        sub-graph sampling and label preparation for node classification:\n        (1) Sample batch_size number of output nodes (papers), get their time.\n    '''", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "target_ids", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "pairs", ".", "keys", "(", ")", ")", ",", "args", ".", "batch_size", ",", "replace", "=", "False", ")", "\n", "target_info", "=", "[", "]", "\n", "for", "target_id", "in", "target_ids", ":", "\n", "        ", "_", ",", "_time", "=", "pairs", "[", "target_id", "]", "\n", "target_info", "+=", "[", "[", "target_id", ",", "_time", "]", "]", "\n", "\n", "", "'''\n        (2) Based on the seed nodes, sample a subgraph with 'sampled_depth' and 'sampled_number'\n    '''", "\n", "feature", ",", "times", ",", "edge_list", ",", "indxs", ",", "pids", "=", "sample_subgraph", "(", "graph", ",", "time_range", ",", "inp", "=", "{", "'paper'", ":", "np", ".", "array", "(", "target_info", ")", "}", ",", "sampled_depth", "=", "args", ".", "sample_depth", ",", "\n", "sampled_number", "=", "args", ".", "sample_number", ")", "\n", "\n", "'''\n        (3) Mask out the edge between the output target nodes (paper) with output source nodes (L2 field)\n    '''", "\n", "masked_edge_list", "=", "[", "]", "\n", "for", "i", "in", "edge_list", "[", "'paper'", "]", "[", "'field'", "]", "[", "'PFL1'", "]", ":", "\n", "        ", "if", "i", "[", "0", "]", "not", "in", "target_ids", ":", "\n", "            ", "masked_edge_list", "+=", "[", "i", "]", "\n", "", "", "edge_list", "[", "'paper'", "]", "[", "'field'", "]", "[", "'PFL1'", "]", "=", "masked_edge_list", "\n", "\n", "masked_edge_list", "=", "[", "]", "\n", "for", "i", "in", "edge_list", "[", "'field'", "]", "[", "'paper'", "]", "[", "'PFL1'", "]", ":", "\n", "        ", "if", "i", "[", "1", "]", "not", "in", "target_ids", ":", "\n", "            ", "masked_edge_list", "+=", "[", "i", "]", "\n", "", "", "edge_list", "[", "'field'", "]", "[", "'paper'", "]", "[", "'PFL1'", "]", "=", "masked_edge_list", "\n", "\n", "'''\n        (4) Transform the subgraph into torch Tensor (edge_index is in format of pytorch_geometric)\n    '''", "\n", "\n", "api_sg", "=", "meta_subgraph", "(", "'author'", ",", "'paper'", ",", "edge_list", ",", "random_edge", "=", "True", ")", "\n", "ad_sg", "=", "direct_subgraph", "(", "edge_list", ",", "'author'", ",", "random_edge", "=", "True", ")", "\n", "\n", "pvi_sg", "=", "indirect_subgraph", "(", "'paper'", ",", "'venue'", ",", "edge_list", ",", "random_edge", "=", "True", ")", "\n", "pfi_sg", "=", "indirect_subgraph", "(", "'paper'", ",", "'field'", ",", "edge_list", ",", "random_edge", "=", "True", ",", "random_loop", "=", "1", ",", "pids", "=", "pids", ")", "\n", "pai_sg", "=", "meta_subgraph", "(", "'paper'", ",", "'author'", ",", "edge_list", ",", "random_edge", "=", "True", ")", "\n", "pd_sg", "=", "direct_subgraph", "(", "edge_list", ",", "'paper'", ",", "random_edge", "=", "True", ")", "#two directed graphs", "\n", "############################", "\n", "au_gh", "=", "{", "'colleague'", ":", "ad_sg", ",", "'apa1'", ":", "api_sg", "[", "'AP_important'", "]", ",", "'apa2'", ":", "api_sg", "[", "'AP_ordinary'", "]", ",", "}", "\n", "pa_gh", "=", "{", "'venue'", ":", "pvi_sg", ",", "'field'", ":", "pfi_sg", ",", "'pap1'", ":", "pai_sg", "[", "'AP_important'", "]", ",", "'pap2'", ":", "pai_sg", "[", "'AP_ordinary'", "]", ",", "'cite'", ":", "pd_sg", "[", "0", "]", ",", "'rev_cite'", ":", "pd_sg", "[", "1", "]", "}", "\n", "\n", "AP_sg", "=", "{", "'AP1'", ":", "edge_list", "[", "'author'", "]", "[", "'paper'", "]", "[", "'AP_important'", "]", ",", "'AP2'", ":", "edge_list", "[", "'author'", "]", "[", "'paper'", "]", "[", "'AP_ordinary'", "]", "}", "\n", "PA_sg", "=", "{", "'PA1'", ":", "edge_list", "[", "'paper'", "]", "[", "'author'", "]", "[", "'AP_important'", "]", ",", "'PA2'", ":", "edge_list", "[", "'paper'", "]", "[", "'author'", "]", "[", "'AP_ordinary'", "]", "}", "\n", "\n", "# paper_gh=to_torch(feature['paper'], indxs['paper'], pa_gh)", "\n", "# author_gh=to_torch(feature['author'], indxs['author'], au_gh)", "\n", "paper_gh", "=", "to_torch", "(", "pa_gh", ")", "\n", "author_gh", "=", "to_torch", "(", "au_gh", ")", "\n", "\n", "total_gh", "=", "{", "'colleague'", ":", "ad_sg", ",", "'venue'", ":", "pvi_sg", ",", "'field'", ":", "pfi_sg", ",", "'cite'", ":", "pd_sg", "[", "0", "]", ",", "'rev_cite'", ":", "pd_sg", "[", "1", "]", ",", "**", "AP_sg", ",", "**", "PA_sg", "}", "\n", "# total_gh=hgt_to_torch((feature['paper'],feature['author']),(indxs['paper'],indxs['author']),total_gh)", "\n", "total_gh", "=", "hgt_to_torch", "(", "(", "indxs", "[", "'paper'", "]", ",", "indxs", "[", "'author'", "]", ")", ",", "total_gh", ")", "\n", "'''\n        (5) Prepare the labels for each output target node (paper), and their index in sampled graph.\n            (node_dict[type][0] stores the start index of a specific type of nodes)\n    '''", "\n", "ylabel", "=", "np", ".", "zeros", "(", "[", "args", ".", "batch_size", ",", "len", "(", "cand_list", ")", "]", ")", "\n", "for", "x_id", ",", "target_id", "in", "enumerate", "(", "target_ids", ")", ":", "\n", "        ", "for", "source_id", "in", "pairs", "[", "target_id", "]", "[", "0", "]", ":", "\n", "            ", "ylabel", "[", "x_id", "]", "[", "cand_list", ".", "index", "(", "source_id", ")", "]", "=", "1", "\n", "", "", "ylabel", "/=", "ylabel", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "x_ids", "=", "list", "(", "target_ids", ")", "\n", "\n", "return", "[", "paper_gh", ",", "author_gh", ",", "total_gh", ",", "edge_list", ",", "x_ids", ",", "ylabel", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf.prepare_data": [[181, 192], ["np.arange", "sampling_pf.node_classification_sample", "jobs.append", "sampling_pf.node_classification_sample", "jobs.append", "randint", "randint"], "function", ["home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf.node_classification_sample", "home.repos.pwc.inspect_result.superweisp_dhan2022.None.sampling_pf.node_classification_sample", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.randint", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.randint"], ["", "def", "prepare_data", "(", ")", ":", "\n", "    ", "'''\n        Sampled and prepare training and validation data using multi-process parallization.\n    '''", "\n", "jobs", "=", "[", "]", "\n", "for", "batch_id", "in", "np", ".", "arange", "(", "args", ".", "n_batch", ")", ":", "\n", "        ", "p", "=", "node_classification_sample", "(", "randint", "(", ")", ",", "sel_train_pairs", ",", "train_range", ")", "\n", "jobs", ".", "append", "(", "p", ")", "\n", "", "p", "=", "node_classification_sample", "(", "randint", "(", ")", ",", "sel_valid_pairs", ",", "valid_range", ")", "\n", "jobs", ".", "append", "(", "p", ")", "\n", "return", "jobs", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.Graph.__init__": [[23, 48], ["super().__init__", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HRGATConv.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "'''\n            node_forward and bacward are only used when building the data.\n            Afterwards will be transformed into node_feature by DataFrame\n\n            node_forward: name -> node_id\n            node_bacward: node_id -> feature_dict\n            node_feature: a DataFrame containing all features\n        '''", "\n", "super", "(", "Graph", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "node_forward", "=", "defaultdict", "(", "lambda", ":", "{", "}", ")", "\n", "self", ".", "node_bacward", "=", "defaultdict", "(", "lambda", ":", "[", "]", ")", "\n", "self", ".", "node_feature", "=", "defaultdict", "(", "lambda", ":", "[", "]", ")", "\n", "'''\n            edge_list: index the adjacancy matrix (time) by\n            <target_type, source_type, relation_type, target_id, source_id>\n        '''", "\n", "self", ".", "edge_list", "=", "defaultdict", "(", "# target_type", "\n", "lambda", ":", "defaultdict", "(", "# source_type", "\n", "lambda", ":", "defaultdict", "(", "# relation_type", "\n", "lambda", ":", "defaultdict", "(", "# target_id", "\n", "lambda", ":", "defaultdict", "(", "# source_id(", "\n", "lambda", ":", "int", "# time", "\n", ")", ")", ")", ")", ")", "\n", "self", ".", "times", "=", "{", "}", "\n", "", "def", "add_node", "(", "self", ",", "node", ")", ":", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.Graph.add_node": [[48, 59], ["len"], "methods", ["None"], ["", "def", "add_node", "(", "self", ",", "node", ")", ":", "\n", "        ", "'''\n        node is stored as dict: {\"type\":,\"id\":,(\"attr\":)}\n        '''", "\n", "\n", "nfl", "=", "self", ".", "node_forward", "[", "node", "[", "'type'", "]", "]", "\n", "if", "node", "[", "'id'", "]", "not", "in", "nfl", ":", "\n", "            ", "self", ".", "node_bacward", "[", "node", "[", "'type'", "]", "]", "+=", "[", "node", "]", "\n", "self", ".", "node_forward", "[", "node", "[", "'type'", "]", "]", "[", "node", "[", "'id'", "]", "]", "=", "len", "(", "nfl", ")", "\n", "return", "node", "[", "'id'", "]", "\n", "", "return", "node", "[", "'id'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.Graph.add_edge": [[60, 71], ["data.Graph.add_node", "data.Graph.add_node"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.Graph.add_node", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.Graph.add_node"], ["", "def", "add_edge", "(", "self", ",", "target_node", ",", "source_node", ",", "time", "=", "None", ",", "relation_type", "=", "None", ",", "directed", "=", "False", ")", ":", "\n", "        ", "edge", "=", "[", "self", ".", "add_node", "(", "source_node", ")", ",", "self", ".", "add_node", "(", "target_node", ")", "]", "\n", "'''\n            Add bi-directional edges with different relation type\n        '''", "\n", "self", ".", "edge_list", "[", "target_node", "[", "'type'", "]", "]", "[", "source_node", "[", "'type'", "]", "]", "[", "relation_type", "]", "[", "edge", "[", "1", "]", "]", "[", "edge", "[", "0", "]", "]", "=", "time", "\n", "if", "directed", ":", "\n", "            ", "self", ".", "edge_list", "[", "source_node", "[", "'type'", "]", "]", "[", "target_node", "[", "'type'", "]", "]", "[", "'rev_'", "+", "relation_type", "]", "[", "edge", "[", "0", "]", "]", "[", "edge", "[", "1", "]", "]", "=", "time", "\n", "", "else", ":", "\n", "            ", "self", ".", "edge_list", "[", "source_node", "[", "'type'", "]", "]", "[", "target_node", "[", "'type'", "]", "]", "[", "relation_type", "]", "[", "edge", "[", "0", "]", "]", "[", "edge", "[", "1", "]", "]", "=", "time", "\n", "", "self", ".", "times", "[", "time", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.Graph.get_meta_graph": [[73, 81], ["data.Graph.get_types"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.Graph.get_types"], ["", "def", "get_meta_graph", "(", "self", ")", ":", "\n", "        ", "types", "=", "self", ".", "get_types", "(", ")", "\n", "metas", "=", "[", "]", "\n", "for", "target_type", "in", "self", ".", "edge_list", ":", "\n", "            ", "for", "source_type", "in", "self", ".", "edge_list", "[", "target_type", "]", ":", "\n", "                ", "for", "r_type", "in", "self", ".", "edge_list", "[", "target_type", "]", "[", "source_type", "]", ":", "\n", "                    ", "metas", "+=", "[", "(", "target_type", ",", "source_type", ",", "r_type", ")", "]", "\n", "", "", "", "return", "metas", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.Graph.get_types": [[82, 84], ["list", "data.Graph.node_feature.keys"], "methods", ["None"], ["", "def", "get_types", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "node_feature", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.sample_subgraph": [[86, 245], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "range", "layer_data[].keys", "list", "list", "list", "list", "list", "feature_extractor", "list", "layer_data[].keys", "collections.defaultdict", "collections.defaultdict", "data.sample_subgraph.add_budget"], "function", ["None"], ["", "", "def", "sample_subgraph", "(", "graph", ",", "time_range", ",", "sampled_depth", "=", "2", ",", "sampled_number", "=", "8", ",", "inp", "=", "None", ",", "feature_extractor", "=", "feature_OAG", ")", ":", "\n", "    ", "layer_data", "=", "defaultdict", "(", "# target_type", "\n", "lambda", ":", "{", "}", "# {target_id: time}", "\n", ")", "\n", "budget", "=", "defaultdict", "(", "#source_type", "\n", "lambda", ":", "defaultdict", "(", "#source_id", "\n", "lambda", ":", "[", "0.", ",", "0", "]", "#[sampled_score, time]", "\n", ")", ")", "\n", "\n", "edge_list", "=", "defaultdict", "(", "# target_type", "\n", "lambda", ":", "defaultdict", "(", "# source_type", "\n", "lambda", ":", "defaultdict", "(", "# relation_type", "\n", "lambda", ":", "[", "]", "# [target_id, source_id]", "\n", ")", ")", ")", "\n", "\n", "def", "add_budget", "(", "te", ",", "target_id", ",", "target_time", ",", "layer_data", ",", "budget", ")", ":", "\n", "        ", "for", "source_type", "in", "te", ":", "\n", "            ", "tes", "=", "te", "[", "source_type", "]", "\n", "for", "relation_type", "in", "tes", ":", "\n", "                ", "if", "relation_type", "==", "'self'", "or", "target_id", "not", "in", "tes", "[", "relation_type", "]", ":", "\n", "                    ", "continue", "\n", "", "adl", "=", "tes", "[", "relation_type", "]", "[", "target_id", "]", "\n", "if", "source_type", "in", "(", "'author'", ")", "or", "len", "(", "adl", ")", "<", "sampled_number", ":", "\n", "                    ", "sampled_ids", "=", "list", "(", "adl", ".", "keys", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "sampled_ids", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "adl", ".", "keys", "(", ")", ")", ",", "sampled_number", ",", "replace", "=", "False", ")", "\n", "", "for", "source_id", "in", "sampled_ids", ":", "\n", "                    ", "source_time", "=", "adl", "[", "source_id", "]", "\n", "if", "source_time", "==", "None", ":", "\n", "                        ", "source_time", "=", "target_time", "\n", "", "if", "int", "(", "source_time", ")", ">", "np", ".", "max", "(", "list", "(", "time_range", ".", "keys", "(", ")", ")", ")", "or", "source_id", "in", "layer_data", "[", "source_type", "]", ":", "\n", "                        ", "continue", "\n", "", "budget", "[", "source_type", "]", "[", "source_id", "]", "[", "0", "]", "+=", "1.", "/", "len", "(", "sampled_ids", ")", "\n", "budget", "[", "source_type", "]", "[", "source_id", "]", "[", "1", "]", "=", "source_time", "\n", "\n", "", "", "", "", "'''\n        First adding the sampled nodes then updating budget.\n    '''", "\n", "# inp = {'type': [id,time],}", "\n", "for", "_type", "in", "inp", ":", "\n", "        ", "for", "_id", ",", "_time", "in", "inp", "[", "_type", "]", ":", "\n", "            ", "layer_data", "[", "_type", "]", "[", "_id", "]", "=", "_time", "\n", "", "", "pids", "=", "[", "]", "\n", "aids", "=", "[", "]", "\n", "for", "_type", "in", "inp", ":", "\n", "        ", "te", "=", "graph", ".", "edge_list", "[", "_type", "]", "\n", "for", "_id", ",", "_time", "in", "inp", "[", "_type", "]", ":", "\n", "            ", "add_budget", "(", "te", ",", "_id", ",", "_time", ",", "layer_data", ",", "budget", ")", "\n", "if", "_type", "==", "'paper'", ":", "\n", "                ", "pids", "+=", "[", "_id", "]", "\n", "", "if", "_type", "==", "'author'", ":", "\n", "                ", "aids", "+=", "[", "_id", "]", "\n", "", "", "", "for", "layer", "in", "range", "(", "sampled_depth", ")", ":", "\n", "        ", "sts", "=", "list", "(", "budget", ".", "keys", "(", ")", ")", "\n", "for", "source_type", "in", "sts", ":", "\n", "            ", "te", "=", "graph", ".", "edge_list", "[", "source_type", "]", "\n", "keys", "=", "np", ".", "array", "(", "list", "(", "budget", "[", "source_type", "]", ".", "keys", "(", ")", ")", ")", "\n", "if", "sampled_number", ">", "len", "(", "keys", ")", ":", "\n", "                ", "'''\n                    Directly sample all the nodes\n                '''", "\n", "sampled_ids", "=", "np", ".", "arange", "(", "len", "(", "keys", ")", ")", "\n", "", "elif", "source_type", "==", "'author'", ":", "\n", "# score = np.array(list(budget[target_type][source_type].values()))[:, 0] ** 2", "\n", "                ", "temp", "=", "np", ".", "array", "(", "list", "(", "budget", "[", "source_type", "]", ".", "values", "(", ")", ")", ")", "[", ":", ",", "0", "]", ".", "tolist", "(", ")", "\n", "temp", "=", "[", "float", "(", "i", ")", "for", "i", "in", "temp", "]", "\n", "score", "=", "np", ".", "array", "(", "temp", ")", "**", "2", "\n", "score", "=", "score", "/", "np", ".", "sum", "(", "score", ")", "\n", "sampled_ids", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "score", ")", ",", "max", "(", "sampled_number", ",", "int", "(", "len", "(", "keys", ")", "*", "0.005", ")", ")", ",", "p", "=", "score", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "'''\n                    Sample based on accumulated degree\n                '''", "\n", "temp", "=", "np", ".", "array", "(", "list", "(", "budget", "[", "source_type", "]", ".", "values", "(", ")", ")", ")", "[", ":", ",", "0", "]", ".", "tolist", "(", ")", "\n", "temp", "=", "[", "float", "(", "i", ")", "for", "i", "in", "temp", "]", "\n", "score", "=", "np", ".", "array", "(", "temp", ")", "**", "2", "\n", "score", "=", "score", "/", "np", ".", "sum", "(", "score", ")", "\n", "sampled_ids", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "score", ")", ",", "sampled_number", ",", "p", "=", "score", ",", "replace", "=", "False", ")", "\n", "", "sampled_keys", "=", "keys", "[", "sampled_ids", "]", "\n", "'''\n                First adding the sampled nodes then updating budget.\n            '''", "\n", "for", "k", "in", "sampled_keys", ":", "\n", "                ", "layer_data", "[", "source_type", "]", "[", "k", "]", "=", "[", "len", "(", "layer_data", "[", "source_type", "]", ")", ",", "budget", "[", "source_type", "]", "[", "k", "]", "[", "1", "]", "]", "\n", "", "for", "k", "in", "sampled_keys", ":", "\n", "                ", "add_budget", "(", "te", ",", "k", ",", "budget", "[", "source_type", "]", "[", "k", "]", "[", "1", "]", ",", "layer_data", ",", "budget", ")", "\n", "budget", "[", "source_type", "]", ".", "pop", "(", "k", ")", "\n", "\n", "", "", "", "for", "_type", "in", "layer_data", ":", "\n", "        ", "for", "_id", "in", "layer_data", "[", "_type", "]", ":", "\n", "            ", "edge_list", "[", "_type", "]", "[", "_type", "]", "[", "'self'", "]", "+=", "[", "[", "_id", ",", "_id", "]", "]", "\n", "\n", "\n", "", "", "'''\n        Reconstruct sampled adjacancy matrix by checking whether each\n        link exist in the original graph\n    '''", "\n", "for", "target_type", "in", "graph", ".", "edge_list", ":", "\n", "        ", "te", "=", "graph", ".", "edge_list", "[", "target_type", "]", "\n", "tld", "=", "layer_data", "[", "target_type", "]", "\n", "for", "source_type", "in", "te", ":", "\n", "            ", "tes", "=", "te", "[", "source_type", "]", "\n", "sld", "=", "layer_data", "[", "source_type", "]", "\n", "for", "relation_type", "in", "tes", ":", "\n", "                ", "tesr", "=", "tes", "[", "relation_type", "]", "\n", "for", "target_id", "in", "tld", ":", "\n", "                    ", "if", "target_id", "not", "in", "tesr", ":", "\n", "                        ", "continue", "\n", "", "target_key", "=", "target_id", "\n", "for", "source_key", "in", "tesr", "[", "target_key", "]", ":", "\n", "                        ", "'''\n                            Check whether each link (target_id, source_id) exist in original adjacancy matrix\n                        '''", "\n", "if", "source_key", "in", "sld", ":", "\n", "                            ", "source_id", "=", "source_key", "\n", "edge_list", "[", "target_type", "]", "[", "source_type", "]", "[", "relation_type", "]", "+=", "[", "[", "target_id", ",", "source_id", "]", "]", "\n", "", "", "", "", "", "", "for", "tid", "in", "layer_data", "[", "'author'", "]", ".", "keys", "(", ")", ":", "\n", "        ", "for", "sid", "in", "layer_data", "[", "'author'", "]", ".", "keys", "(", ")", ":", "\n", "            ", "if", "set", "(", "graph", ".", "edge_list", "[", "'author'", "]", "[", "'affiliation'", "]", "[", "'AAf'", "]", "[", "sid", "]", ".", "keys", "(", ")", ")", "&", "set", "(", "graph", ".", "edge_list", "[", "'author'", "]", "[", "'affiliation'", "]", "[", "'AAf'", "]", "[", "tid", "]", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "tid", "!=", "sid", ":", "\n", "                    ", "edge_list", "[", "'author'", "]", "[", "'author'", "]", "[", "'colleague'", "]", "+=", "[", "[", "tid", ",", "sid", "]", "]", "\n", "edge_list", "[", "'author'", "]", "[", "'author'", "]", "[", "'colleague'", "]", "+=", "[", "[", "sid", ",", "tid", "]", "]", "\n", "", "", "", "", "colleague_rel", "=", "list", "(", "edge_list", "[", "'author'", "]", "[", "'author'", "]", "[", "'colleague'", "]", ")", "\n", "edge_list", "[", "'author'", "]", "[", "'author'", "]", "[", "'colleague'", "]", "=", "[", "colleague_rel", "[", "i", "]", "for", "i", "in", "np", ".", "random", ".", "choice", "(", "len", "(", "colleague_rel", ")", ",", "int", "(", "len", "(", "colleague_rel", ")", "/", "15", ")", ",", "replace", "=", "False", ")", "]", "\n", "\n", "\n", "important_paper", "=", "list", "(", "set", "(", "layer_data", "[", "'paper'", "]", ".", "keys", "(", ")", ")", "&", "set", "(", "graph", ".", "edge_list", "[", "'paper'", "]", "[", "'author'", "]", "[", "'AP_important'", "]", ".", "keys", "(", ")", ")", ")", "\n", "ordinary_paper", "=", "list", "(", "set", "(", "layer_data", "[", "'paper'", "]", ".", "keys", "(", ")", ")", "&", "set", "(", "graph", ".", "edge_list", "[", "'paper'", "]", "[", "'author'", "]", "[", "'AP_ordinary'", "]", ".", "keys", "(", ")", ")", ")", "\n", "for", "tid", "in", "important_paper", ":", "\n", "        ", "for", "sid", "in", "important_paper", ":", "\n", "            ", "if", "set", "(", "graph", ".", "edge_list", "[", "'paper'", "]", "[", "'author'", "]", "[", "'AP_important'", "]", "[", "tid", "]", ".", "keys", "(", ")", ")", "&", "set", "(", "graph", ".", "edge_list", "[", "'paper'", "]", "[", "'author'", "]", "[", "'AP_important'", "]", "[", "sid", "]", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "tid", "!=", "sid", ":", "\n", "                    ", "edge_list", "[", "'paper'", "]", "[", "'paper'", "]", "[", "'pap1'", "]", "+=", "[", "[", "tid", ",", "sid", "]", "]", "\n", "edge_list", "[", "'paper'", "]", "[", "'paper'", "]", "[", "'pap1'", "]", "+=", "[", "[", "sid", ",", "tid", "]", "]", "\n", "", "", "", "", "for", "tid", "in", "ordinary_paper", ":", "\n", "        ", "for", "sid", "in", "ordinary_paper", ":", "\n", "            ", "if", "set", "(", "graph", ".", "edge_list", "[", "'paper'", "]", "[", "'author'", "]", "[", "'AP_ordinary'", "]", "[", "tid", "]", ".", "keys", "(", ")", ")", "&", "set", "(", "graph", ".", "edge_list", "[", "'paper'", "]", "[", "'author'", "]", "[", "'AP_ordinary'", "]", "[", "sid", "]", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "tid", "!=", "sid", ":", "\n", "                    ", "edge_list", "[", "'paper'", "]", "[", "'paper'", "]", "[", "'pap2'", "]", "+=", "[", "[", "tid", ",", "sid", "]", "]", "\n", "edge_list", "[", "'paper'", "]", "[", "'paper'", "]", "[", "'pap2'", "]", "+=", "[", "[", "sid", ",", "tid", "]", "]", "\n", "\n", "", "", "", "", "important_author", "=", "list", "(", "set", "(", "layer_data", "[", "'author'", "]", ".", "keys", "(", ")", ")", "&", "set", "(", "graph", ".", "edge_list", "[", "'author'", "]", "[", "'paper'", "]", "[", "'AP_important'", "]", ".", "keys", "(", ")", ")", ")", "\n", "ordinary_author", "=", "list", "(", "set", "(", "layer_data", "[", "'author'", "]", ".", "keys", "(", ")", ")", "&", "set", "(", "graph", ".", "edge_list", "[", "'author'", "]", "[", "'paper'", "]", "[", "'AP_ordinary'", "]", ".", "keys", "(", ")", ")", ")", "\n", "for", "tid", "in", "important_author", ":", "\n", "        ", "for", "sid", "in", "important_author", ":", "\n", "            ", "if", "set", "(", "graph", ".", "edge_list", "[", "'author'", "]", "[", "'paper'", "]", "[", "'AP_important'", "]", "[", "tid", "]", ".", "keys", "(", ")", ")", "&", "set", "(", "graph", ".", "edge_list", "[", "'author'", "]", "[", "'paper'", "]", "[", "'AP_important'", "]", "[", "sid", "]", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "tid", "!=", "sid", ":", "\n", "                    ", "edge_list", "[", "'author'", "]", "[", "'author'", "]", "[", "'apa1'", "]", "+=", "[", "[", "tid", ",", "sid", "]", "]", "\n", "edge_list", "[", "'author'", "]", "[", "'author'", "]", "[", "'apa1'", "]", "+=", "[", "[", "sid", ",", "tid", "]", "]", "\n", "", "", "", "", "for", "tid", "in", "ordinary_author", ":", "\n", "        ", "for", "sid", "in", "ordinary_author", ":", "\n", "            ", "if", "set", "(", "graph", ".", "edge_list", "[", "'author'", "]", "[", "'paper'", "]", "[", "'AP_ordinary'", "]", "[", "tid", "]", ".", "keys", "(", ")", ")", "&", "set", "(", "graph", ".", "edge_list", "[", "'author'", "]", "[", "'paper'", "]", "[", "'AP_ordinary'", "]", "[", "sid", "]", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "tid", "!=", "sid", ":", "\n", "                    ", "edge_list", "[", "'author'", "]", "[", "'author'", "]", "[", "'apa2'", "]", "+=", "[", "[", "tid", ",", "sid", "]", "]", "\n", "edge_list", "[", "'author'", "]", "[", "'author'", "]", "[", "'apa2'", "]", "+=", "[", "[", "sid", ",", "tid", "]", "]", "\n", "\n", "", "", "", "", "feature", ",", "times", ",", "indxs", ",", "texts", "=", "feature_extractor", "(", "layer_data", ",", "graph", ")", "\n", "\n", "return", "[", "]", ",", "[", "]", ",", "edge_list", ",", "indxs", ",", "pids", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.meta_subgraph": [[250, 259], ["None"], "function", ["None"], ["def", "meta_subgraph", "(", "graph_type", ",", "path_type", ",", "edge_list", ",", "random_edge", "=", "False", ",", "random_loop", "=", "3", ")", ":", "\n", "    ", "sub_edge_list", "=", "{", "}", "\n", "if", "graph_type", "==", "'author'", "and", "path_type", "==", "'paper'", ":", "\n", "        ", "sub_edge_list", "[", "'AP_important'", "]", "=", "edge_list", "[", "'author'", "]", "[", "'author'", "]", "[", "'apa1'", "]", "\n", "sub_edge_list", "[", "'AP_ordinary'", "]", "=", "edge_list", "[", "'author'", "]", "[", "'author'", "]", "[", "'apa2'", "]", "\n", "", "elif", "graph_type", "==", "'paper'", "and", "path_type", "==", "'author'", ":", "\n", "        ", "sub_edge_list", "[", "'AP_important'", "]", "=", "edge_list", "[", "'paper'", "]", "[", "'paper'", "]", "[", "'pap1'", "]", "\n", "sub_edge_list", "[", "'AP_ordinary'", "]", "=", "edge_list", "[", "'paper'", "]", "[", "'paper'", "]", "[", "'pap2'", "]", "\n", "", "return", "sub_edge_list", "\n", "", "def", "indirect_subgraph", "(", "graph_type", ",", "path_type", ",", "edge_list", ",", "random_edge", "=", "False", ",", "random_loop", "=", "3", ",", "pids", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.indirect_subgraph": [[259, 319], ["collections.defaultdict", "list", "range", "range", "set", "random.shuffle", "random.shuffle", "len", "range", "len", "sp_pid.pop", "sp_pid.index", "sp_pid.pop", "sp_pid.index"], "function", ["None"], ["", "def", "indirect_subgraph", "(", "graph_type", ",", "path_type", ",", "edge_list", ",", "random_edge", "=", "False", ",", "random_loop", "=", "3", ",", "pids", "=", "None", ")", ":", "\n", "# if graph_type=='author':", "\n", "    ", "sub_edge_list", "=", "[", "]", "\n", "if", "random_edge", ":", "\n", "        ", "candidate_edge", "=", "defaultdict", "(", "lambda", ":", "[", "]", ")", "\n", "for", "r_type1", "in", "edge_list", "[", "graph_type", "]", "[", "path_type", "]", ":", "\n", "            ", "for", "edge_tp", "in", "edge_list", "[", "graph_type", "]", "[", "path_type", "]", "[", "r_type1", "]", ":", "\n", "                ", "candidate_edge", "[", "edge_tp", "[", "1", "]", "]", "+=", "[", "edge_tp", "[", "0", "]", "]", "\n", "", "", "for", "r_type2", "in", "edge_list", "[", "path_type", "]", "[", "graph_type", "]", ":", "\n", "            ", "for", "edge_pt", "in", "edge_list", "[", "path_type", "]", "[", "graph_type", "]", "[", "r_type2", "]", ":", "\n", "                ", "candidate_edge", "[", "edge_pt", "[", "0", "]", "]", "+=", "[", "edge_pt", "[", "1", "]", "]", "\n", "\n", "\n", "\n", "", "", "subsub_edge", "=", "[", "]", "\n", "for", "ce", "in", "candidate_edge", ":", "\n", "            ", "candidate_edge", "[", "ce", "]", "=", "list", "(", "set", "(", "candidate_edge", "[", "ce", "]", ")", ")", "\n", "for", "loop", "in", "range", "(", "random_loop", ")", ":", "\n", "                ", "random", ".", "shuffle", "(", "candidate_edge", "[", "ce", "]", ")", "\n", "if", "len", "(", "candidate_edge", "[", "ce", "]", ")", "==", "1", ":", "\n", "                    ", "subsub_edge", "+=", "[", "[", "candidate_edge", "[", "ce", "]", "[", "0", "]", ",", "candidate_edge", "[", "ce", "]", "[", "0", "]", "]", "]", "\n", "", "else", ":", "\n", "                    ", "for", "i", "in", "range", "(", "len", "(", "candidate_edge", "[", "ce", "]", ")", "-", "1", ")", ":", "\n", "                        ", "subsub_edge", "+=", "[", "[", "candidate_edge", "[", "ce", "]", "[", "i", "]", ",", "candidate_edge", "[", "ce", "]", "[", "i", "+", "1", "]", "]", "]", "\n", "subsub_edge", "+=", "[", "[", "candidate_edge", "[", "ce", "]", "[", "i", "+", "1", "]", ",", "candidate_edge", "[", "ce", "]", "[", "i", "]", "]", "]", "\n", "", "", "", "", "for", "e", "in", "subsub_edge", ":", "\n", "            ", "if", "e", "not", "in", "sub_edge_list", ":", "\n", "                ", "sub_edge_list", "+=", "[", "e", "]", "\n", "\n", "", "", "if", "path_type", "==", "'field'", ":", "\n", "\n", "            ", "new_edge_list", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "3", ")", ":", "\n", "                ", "sp_pid", "=", "pids", "\n", "random", ".", "shuffle", "(", "sub_edge_list", ")", "\n", "for", "eg", "in", "sub_edge_list", ":", "\n", "                    ", "if", "sp_pid", ":", "\n", "                        ", "if", "eg", "[", "0", "]", "in", "sp_pid", ":", "\n", "                            ", "new_edge_list", "+=", "[", "eg", "]", "\n", "# sp_pid+=[eg[0]]", "\n", "sp_pid", ".", "pop", "(", "sp_pid", ".", "index", "(", "eg", "[", "0", "]", ")", ")", "\n", "", "elif", "eg", "[", "1", "]", "in", "sp_pid", ":", "\n", "                            ", "new_edge_list", "+=", "[", "eg", "]", "\n", "sp_pid", ".", "pop", "(", "sp_pid", ".", "index", "(", "eg", "[", "1", "]", ")", ")", "\n", "\n", "", "", "", "", "sub_edge_list", "=", "[", "]", "\n", "for", "e", "in", "new_edge_list", ":", "\n", "                ", "if", "e", "not", "in", "sub_edge_list", ":", "\n", "                    ", "sub_edge_list", "+=", "[", "e", "]", "\n", "\n", "", "", "", "", "else", ":", "\n", "        ", "for", "r1_type", "in", "edge_list", "[", "graph_type", "]", "[", "path_type", "]", ":", "\n", "            ", "for", "edge_tp", "in", "edge_list", "[", "graph_type", "]", "[", "path_type", "]", "[", "r1_type", "]", ":", "\n", "                ", "for", "r2_type", "in", "edge_list", "[", "path_type", "]", "[", "graph_type", "]", ":", "\n", "                    ", "for", "edge_pt", "in", "edge_list", "[", "path_type", "]", "[", "graph_type", "]", "[", "r2_type", "]", ":", "\n", "                        ", "if", "edge_tp", "[", "1", "]", "==", "edge_pt", "[", "0", "]", ":", "\n", "                            ", "sub_edge_list", "+=", "[", "[", "edge_tp", "[", "0", "]", ",", "edge_pt", "[", "1", "]", "]", "]", "\n", "sub_edge_list", "+=", "[", "[", "edge_pt", "[", "1", "]", ",", "edge_tp", "[", "0", "]", "]", "]", "\n", "\n", "", "", "", "", "", "", "return", "sub_edge_list", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.direct_subgraph": [[320, 359], ["collections.defaultdict", "list", "range", "set", "random.shuffle", "len", "range", "len"], "function", ["None"], ["", "def", "direct_subgraph", "(", "edge_list", ",", "graph_type", ",", "random_edge", "=", "False", ",", "random_loop", "=", "3", ")", ":", "\n", "    ", "sub_edge_list", "=", "[", "]", "\n", "if", "graph_type", "==", "'paper'", ":", "\n", "        ", "sub_edge_list_PP", "=", "[", "]", "\n", "for", "_edge", "in", "edge_list", "[", "graph_type", "]", "[", "graph_type", "]", "[", "'PP_cite'", "]", ":", "\n", "            ", "sub_edge_list_PP", "+=", "[", "_edge", "]", "\n", "", "sub_edge_list_revPP", "=", "[", "]", "\n", "for", "_edge", "in", "edge_list", "[", "graph_type", "]", "[", "graph_type", "]", "[", "'rev_PP_cite'", "]", ":", "\n", "            ", "sub_edge_list_revPP", "+=", "[", "_edge", "]", "\n", "", "sub_edge_list", "+=", "[", "sub_edge_list_PP", "]", "\n", "sub_edge_list", "+=", "[", "sub_edge_list_revPP", "]", "\n", "", "else", ":", "\n", "        ", "if", "random_edge", ":", "\n", "            ", "candidate_edge", "=", "defaultdict", "(", "lambda", ":", "[", "]", ")", "\n", "for", "edge_af", "in", "edge_list", "[", "'author'", "]", "[", "'affiliation'", "]", "[", "'AAf'", "]", ":", "\n", "                ", "candidate_edge", "[", "edge_af", "[", "1", "]", "]", "+=", "[", "edge_af", "[", "0", "]", "]", "\n", "", "for", "edge_fa", "in", "edge_list", "[", "'affiliation'", "]", "[", "'author'", "]", "[", "'AAf'", "]", ":", "\n", "                ", "candidate_edge", "[", "edge_fa", "[", "0", "]", "]", "+=", "[", "edge_fa", "[", "1", "]", "]", "\n", "\n", "", "subsub_edge", "=", "[", "]", "\n", "for", "af", "in", "candidate_edge", ":", "\n", "                ", "candidate_edge", "[", "af", "]", "=", "list", "(", "set", "(", "candidate_edge", "[", "af", "]", ")", ")", "\n", "for", "loop", "in", "range", "(", "random_loop", ")", ":", "\n", "                    ", "random", ".", "shuffle", "(", "candidate_edge", "[", "af", "]", ")", "\n", "if", "len", "(", "candidate_edge", "[", "af", "]", ")", "==", "1", ":", "\n", "                        ", "subsub_edge", "+=", "[", "[", "candidate_edge", "[", "af", "]", "[", "0", "]", ",", "candidate_edge", "[", "af", "]", "[", "0", "]", "]", "]", "\n", "", "else", ":", "\n", "                        ", "for", "i", "in", "range", "(", "len", "(", "candidate_edge", "[", "af", "]", ")", "-", "1", ")", ":", "\n", "                            ", "subsub_edge", "+=", "[", "[", "candidate_edge", "[", "af", "]", "[", "i", "]", ",", "candidate_edge", "[", "af", "]", "[", "i", "+", "1", "]", "]", "]", "\n", "subsub_edge", "+=", "[", "[", "candidate_edge", "[", "af", "]", "[", "i", "+", "1", "]", ",", "candidate_edge", "[", "af", "]", "[", "i", "]", "]", "]", "\n", "", "", "", "", "for", "e", "in", "subsub_edge", ":", "\n", "                ", "if", "e", "not", "in", "sub_edge_list", ":", "\n", "                    ", "sub_edge_list", "+=", "[", "e", "]", "\n", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "sub_edge_list", "=", "edge_list", "[", "'author'", "]", "[", "'author'", "]", "[", "'colleague'", "]", "\n", "\n", "", "", "return", "sub_edge_list", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.to_torch": [[361, 397], ["torch.LongTensor().t", "torch.LongTensor", "edge_d.keys", "len", "torch.LongTensor", "id_index.keys", "len", "id_index.keys", "len", "id_index.keys", "len"], "function", ["None"], ["", "def", "to_torch", "(", "edge_list", ",", "idla", "=", "None", ")", ":", "\n", "    ", "'''\n        Transform a sampled sub-graph into pytorch Tensor\n        node_dict: {node_type: <node_number, node_type_ID>} node_number is used to trace back the nodes in original graph.\n        edge_dict: {edge_type: edge_type_ID}\n    '''", "\n", "\n", "edge_index", "=", "[", "]", "\n", "edge_type", "=", "[", "]", "\n", "id_list", "=", "[", "]", "\n", "edge_d", "=", "{", "}", "\n", "\n", "id_index", "=", "{", "}", "\n", "for", "_rel", "in", "edge_list", ":", "\n", "        ", "if", "_rel", "not", "in", "edge_d", ".", "keys", "(", ")", ":", "\n", "            ", "edge_d", "[", "_rel", "]", "=", "len", "(", "edge_d", ")", "\n", "", "for", "_edge", "in", "edge_list", "[", "_rel", "]", ":", "\n", "            ", "if", "_edge", "[", "0", "]", "not", "in", "id_index", ".", "keys", "(", ")", ":", "\n", "                ", "id_index", "[", "_edge", "[", "0", "]", "]", "=", "len", "(", "id_index", ")", "\n", "id_list", "+=", "[", "_edge", "[", "0", "]", "]", "\n", "", "if", "_edge", "[", "1", "]", "not", "in", "id_index", ".", "keys", "(", ")", ":", "\n", "                ", "id_index", "[", "_edge", "[", "1", "]", "]", "=", "len", "(", "id_index", ")", "\n", "id_list", "+=", "[", "_edge", "[", "1", "]", "]", "\n", "", "edge_index", "+=", "[", "[", "id_index", "[", "_edge", "[", "0", "]", "]", ",", "id_index", "[", "_edge", "[", "1", "]", "]", "]", "]", "\n", "edge_type", "+=", "[", "edge_d", "[", "_rel", "]", "]", "\n", "", "", "if", "idla", ":", "\n", "        ", "for", "au", "in", "idla", ":", "\n", "            ", "if", "au", "not", "in", "id_index", ".", "keys", "(", ")", ":", "\n", "                ", "edge_d", "[", "au", "]", "=", "len", "(", "id_index", ")", "\n", "id_list", "+=", "[", "au", "]", "\n", "\n", "", "", "", "edge_index", "=", "torch", ".", "LongTensor", "(", "edge_index", ")", ".", "t", "(", ")", "\n", "edge_type", "=", "torch", ".", "LongTensor", "(", "edge_type", ")", "\n", "\n", "\n", "return", "[", "[", "]", ",", "edge_index", ",", "edge_type", ",", "id_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.data.hgt_to_torch": [[399, 437], ["numpy.hstack", "torch.cat", "torch.LongTensor", "list", "idx_set.tolist.tolist", "enumerate", "torch.LongTensor().transpose", "torch.LongTensor", "list", "list", "torch.zeros", "torch.ones", "enumerate", "enumerate", "set", "enumerate", "torch.LongTensor", "set", "len", "len", "total_gh.keys", "numpy.array", "indxs[].tolist"], "function", ["None"], ["def", "hgt_to_torch", "(", "indxs", ",", "total_gh", ",", "idla", "=", "None", ")", ":", "\n", "    ", "if", "idla", ":", "\n", "        ", "idx", "=", "[", "indxs", "[", "0", "]", ",", "list", "(", "set", "(", "indxs", "[", "1", "]", ".", "tolist", "(", ")", "+", "idla", ")", ")", "]", "\n", "indxs", "=", "idx", "\n", "", "id_list", "=", "np", ".", "hstack", "(", "(", "indxs", "[", "0", "]", ",", "indxs", "[", "1", "]", ")", ")", "\n", "node_type", "=", "torch", ".", "cat", "(", "(", "torch", ".", "zeros", "(", "len", "(", "indxs", "[", "0", "]", ")", ")", ",", "torch", ".", "ones", "(", "len", "(", "indxs", "[", "1", "]", ")", ")", ")", ")", "\n", "idd", "=", "{", "id", ":", "idx", "for", "idx", ",", "id", "in", "enumerate", "(", "id_list", ")", "}", "\n", "\n", "edge_index", "=", "[", "]", "\n", "edge_dict", "=", "{", "et", ":", "idx", "for", "idx", ",", "et", "in", "enumerate", "(", "total_gh", ".", "keys", "(", ")", ")", "}", "\n", "edge_type", "=", "[", "]", "\n", "idx_set", "=", "[", "]", "\n", "for", "gtype", "in", "total_gh", ":", "\n", "        ", "for", "eg", "in", "total_gh", "[", "gtype", "]", ":", "\n", "            ", "edge_index", "+=", "[", "[", "idd", "[", "eg", "[", "0", "]", "]", ",", "idd", "[", "eg", "[", "1", "]", "]", "]", "]", "\n", "edge_type", "+=", "[", "edge_dict", "[", "gtype", "]", "]", "\n", "idx_set", "+=", "[", "idd", "[", "eg", "[", "0", "]", "]", "]", "\n", "idx_set", "+=", "[", "idd", "[", "eg", "[", "1", "]", "]", "]", "\n", "", "", "if", "idla", ":", "\n", "        ", "for", "aid", "in", "idla", ":", "\n", "            ", "if", "aid", "not", "in", "idx_set", ":", "\n", "                ", "idx_set", "+=", "[", "idd", "[", "aid", "]", "]", "\n", "\n", "", "", "", "idx_set", "=", "torch", ".", "LongTensor", "(", "list", "(", "set", "(", "idx_set", ")", ")", ")", "\n", "id_list", "=", "list", "(", "id_list", "[", "np", ".", "array", "(", "idx_set", ")", "]", ")", "\n", "node_type", "=", "node_type", "[", "idx_set", "]", "\n", "\n", "idx_set", "=", "idx_set", ".", "tolist", "(", ")", "\n", "id_dict", "=", "{", "idx", ":", "src", "for", "src", ",", "idx", "in", "enumerate", "(", "idx_set", ")", "}", "\n", "edge_idx", "=", "[", "]", "\n", "edge_tp", "=", "[", "]", "\n", "for", "idx", ",", "eg", "in", "enumerate", "(", "edge_index", ")", ":", "\n", "        ", "edge_idx", "+=", "[", "[", "id_dict", "[", "eg", "[", "0", "]", "]", ",", "id_dict", "[", "eg", "[", "1", "]", "]", "]", "]", "\n", "edge_tp", "+=", "[", "edge_type", "[", "idx", "]", "]", "\n", "", "edge_idx", "=", "torch", ".", "LongTensor", "(", "edge_idx", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "edge_tp", "=", "torch", ".", "LongTensor", "(", "edge_tp", ")", "\n", "\n", "return", "[", "[", "]", ",", "edge_idx", ",", "edge_tp", ",", "id_list", ",", "node_type", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.model.Classifier.__init__": [[5, 10], ["nn.Module.__init__", "nn.Linear"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HRGATConv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_hid", ",", "n_out", ")", ":", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_hid", "=", "n_hid", "\n", "self", ".", "n_out", "=", "n_out", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "n_hid", ",", "n_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.model.Classifier.forward": [[11, 14], ["model.Classifier.linear", "torch.log_softmax", "model.Classifier.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "tx", "=", "self", ".", "linear", "(", "x", ")", "\n", "return", "torch", ".", "log_softmax", "(", "tx", ".", "squeeze", "(", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.model.Classifier.__repr__": [[15, 18], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}(n_hid={}, n_out={})'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "n_hid", ",", "self", ".", "n_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.model.ClassifierT.__init__": [[20, 26], ["nn.Module.__init__", "nn.Linear"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HRGATConv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_hid", ",", "n_out", ",", "T", "=", "1.5", ")", ":", "\n", "        ", "super", "(", "ClassifierT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_hid", "=", "n_hid", "\n", "self", ".", "n_out", "=", "n_out", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "n_hid", ",", "n_out", ")", "\n", "self", ".", "T", "=", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.model.ClassifierT.forward": [[27, 30], ["model.ClassifierT.linear", "torch.log_softmax", "model.ClassifierT.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "tx", "=", "self", ".", "linear", "(", "x", ")", "\n", "return", "torch", ".", "log_softmax", "(", "tx", ".", "squeeze", "(", ")", "/", "self", ".", "T", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.model.ClassifierT.__repr__": [[31, 34], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}(n_hid={}, n_out={})'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "n_hid", ",", "self", ".", "n_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.model.Matcher.__init__": [[41, 47], ["nn.Module.__init__", "nn.Linear", "nn.Linear", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HRGATConv.__init__"], ["def", "__init__", "(", "self", ",", "n_hid", ")", ":", "\n", "        ", "super", "(", "Matcher", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "left_linear", "=", "nn", ".", "Linear", "(", "n_hid", ",", "n_hid", ")", "\n", "self", ".", "right_linear", "=", "nn", ".", "Linear", "(", "n_hid", ",", "n_hid", ")", "\n", "self", ".", "sqrt_hd", "=", "math", ".", "sqrt", "(", "n_hid", ")", "\n", "self", ".", "cache", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.model.Matcher.forward": [[48, 68], ["model.Matcher.right_linear", "model.Matcher.left_linear", "torch.matmul", "model.Matcher.left_linear", "model.Matcher.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "infer", "=", "False", ",", "pair", "=", "False", ")", ":", "\n", "        ", "ty", "=", "self", ".", "right_linear", "(", "y", ")", "\n", "if", "infer", ":", "\n", "            ", "'''\n                During testing, we will consider millions or even billions of nodes as candidates (x).\n                It's not possible to calculate them again for different query (y)\n                Since the model is fixed, we propose to cache them, and dirrectly use the results.\n            '''", "\n", "if", "self", ".", "cache", "!=", "None", ":", "\n", "                ", "tx", "=", "self", ".", "cache", "\n", "", "else", ":", "\n", "                ", "tx", "=", "self", ".", "left_linear", "(", "x", ")", "\n", "self", ".", "cache", "=", "tx", "\n", "", "", "else", ":", "\n", "            ", "tx", "=", "self", ".", "left_linear", "(", "x", ")", "\n", "", "if", "pair", ":", "\n", "            ", "res", "=", "(", "tx", "*", "ty", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "res", "=", "torch", ".", "matmul", "(", "tx", ",", "ty", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "", "return", "res", "/", "self", ".", "sqrt_hd", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.model.Matcher.__repr__": [[69, 72], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}(n_hid={})'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "n_hid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.dcg_at_k": [[13, 18], ["numpy.asfarray", "numpy.sum", "numpy.log2", "numpy.arange"], "function", ["None"], ["def", "dcg_at_k", "(", "r", ",", "k", ")", ":", "\n", "    ", "r", "=", "np", ".", "asfarray", "(", "r", ")", "[", ":", "k", "]", "\n", "if", "r", ".", "size", ":", "\n", "        ", "return", "np", ".", "sum", "(", "r", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "r", ".", "size", "+", "2", ")", ")", ")", "\n", "", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.ndcg_at_k": [[22, 27], ["utils.dcg_at_k", "sorted", "utils.dcg_at_k"], "function", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.dcg_at_k", "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.dcg_at_k"], ["", "def", "ndcg_at_k", "(", "r", ",", "k", ")", ":", "\n", "    ", "dcg_max", "=", "dcg_at_k", "(", "sorted", "(", "r", ",", "reverse", "=", "True", ")", ",", "k", ")", "\n", "if", "not", "dcg_max", ":", "\n", "        ", "return", "0.", "\n", "", "return", "dcg_at_k", "(", "r", ",", "k", ")", "/", "dcg_max", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.mean_reciprocal_rank": [[29, 32], ["numpy.asarray().nonzero", "numpy.asarray"], "function", ["None"], ["", "def", "mean_reciprocal_rank", "(", "rs", ")", ":", "\n", "    ", "rs", "=", "(", "np", ".", "asarray", "(", "r", ")", ".", "nonzero", "(", ")", "[", "0", "]", "for", "r", "in", "rs", ")", "\n", "return", "[", "1.", "/", "(", "r", "[", "0", "]", "+", "1", ")", "if", "r", ".", "size", "else", "0.", "for", "r", "in", "rs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.acc": [[35, 43], ["None"], "function", ["None"], ["", "def", "acc", "(", "rs", ")", ":", "\n", "    ", "total", "=", "0", "\n", "correct", "=", "0", "\n", "for", "r", "in", "rs", ":", "\n", "        ", "if", "r", "[", "0", "]", "==", "1", ":", "\n", "            ", "correct", "+=", "1", "\n", "", "total", "+=", "1", "\n", "", "return", "correct", "/", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.normalize": [[45, 53], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["", "def", "normalize", "(", "mx", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.sparse_mx_to_torch_sparse_tensor": [[55, 64], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.sparse.FloatTensor", "numpy.vstack().astype", "sparse_mx.tocoo().astype.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert a scipy sparse matrix to a torch sparse tensor.\"\"\"", "\n", "# \"input:mxn,output:indicees-->2xMax(m,n),values-->t(number of items that is not 0),shape-->mxn\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.feature_OAG": [[71, 83], ["numpy.array", "len", "list", "layer_data[].keys"], "function", ["None"], ["", "def", "feature_OAG", "(", "layer_data", ",", "graph", ")", ":", "\n", "    ", "feature", "=", "{", "}", "\n", "times", "=", "{", "}", "\n", "indxs", "=", "{", "}", "\n", "texts", "=", "[", "]", "\n", "for", "_type", "in", "layer_data", ":", "\n", "        ", "if", "len", "(", "layer_data", "[", "_type", "]", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "idxs", "=", "np", ".", "array", "(", "list", "(", "layer_data", "[", "_type", "]", ".", "keys", "(", ")", ")", ")", "\n", "\n", "indxs", "[", "_type", "]", "=", "idxs", "\n", "", "return", "feature", ",", "times", ",", "indxs", ",", "texts", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.feature_cal": [[84, 102], ["numpy.concatenate", "enumerate", "numpy.array", "numpy.zeros", "list", "list", "numpy.log10", "len", "numpy.array().reshape", "numpy.array", "list"], "function", ["None"], ["", "def", "feature_cal", "(", "graph", ")", ":", "\n", "    ", "feature", "=", "{", "}", "\n", "idl", "=", "{", "}", "\n", "for", "_type", "in", "[", "'paper'", ",", "'author'", "]", ":", "\n", "        ", "if", "'node_emb'", "in", "graph", ".", "node_feature", "[", "_type", "]", ":", "\n", "            ", "feature", "[", "_type", "]", "=", "np", ".", "array", "(", "list", "(", "graph", ".", "node_feature", "[", "_type", "]", "[", "'node_emb'", "]", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "", "else", ":", "\n", "            ", "feature", "[", "_type", "]", "=", "np", ".", "zeros", "(", "[", "len", "(", "graph", ".", "node_feature", "[", "_type", "]", ")", ",", "400", "]", ")", "\n", "\n", "", "feature", "[", "_type", "]", "=", "np", ".", "concatenate", "(", "(", "feature", "[", "_type", "]", ",", "list", "(", "graph", ".", "node_feature", "[", "_type", "]", "[", "'emb'", "]", ")", ",", "np", ".", "log10", "(", "np", ".", "array", "(", "list", "(", "graph", ".", "node_feature", "[", "_type", "]", "[", "'citation'", "]", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "0.01", ")", ")", ",", "\n", "axis", "=", "1", ")", "\n", "# idl[_type]=graph.node_feature[_type]['id']", "\n", "idx_dict", "=", "{", "}", "\n", "for", "idx", ",", "id", "in", "enumerate", "(", "graph", ".", "node_feature", "[", "_type", "]", "[", "'id'", "]", ")", ":", "\n", "            ", "idx_dict", "[", "id", "]", "=", "idx", "\n", "", "idl", "[", "_type", "]", "=", "idx_dict", "\n", "", "return", "feature", ",", "idl", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.feature_extract": [[104, 113], ["numpy.array", "torch.FloatTensor", "[].tolist"], "function", ["None"], ["", "def", "feature_extract", "(", "gh", ",", "type", ",", "feature", ",", "idl", ")", ":", "\n", "    ", "id_list", "=", "gh", "[", "3", "]", "\n", "idx", "=", "[", "]", "\n", "for", "i", "in", "id_list", ":", "\n", "        ", "idx", "+=", "[", "idl", "[", "type", "]", "[", "i", "]", "]", "\n", "", "idx", "=", "np", ".", "array", "(", "idx", ")", "\n", "node_feature", "=", "torch", ".", "FloatTensor", "(", "feature", "[", "type", "]", "[", "idx", "]", ".", "tolist", "(", ")", ")", "\n", "# gh[0]=node_feature", "\n", "return", "(", "node_feature", ",", "gh", "[", "1", "]", ",", "gh", "[", "2", "]", ",", "gh", "[", "3", "]", ")", "\n", "#gh:([], edge_idx, edge_tp, id_list,node_type)", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.hgt_extract": [[115, 131], ["numpy.array", "numpy.array", "numpy.concatenate", "torch.FloatTensor"], "function", ["None"], ["", "def", "hgt_extract", "(", "gh", ",", "feature", ",", "idl", ")", ":", "\n", "    ", "paper_num", "=", "(", "gh", "[", "4", "]", "==", "0", ")", ".", "sum", "(", ")", "\n", "paper_idl", "=", "gh", "[", "3", "]", "[", ":", "paper_num", "]", "\n", "author_idl", "=", "gh", "[", "3", "]", "[", "paper_num", ":", "]", "\n", "p_idx", "=", "[", "]", "\n", "for", "i", "in", "paper_idl", ":", "\n", "        ", "p_idx", "+=", "[", "idl", "[", "'paper'", "]", "[", "i", "]", "]", "\n", "", "a_idx", "=", "[", "]", "\n", "for", "i", "in", "author_idl", ":", "\n", "        ", "a_idx", "+=", "[", "idl", "[", "'author'", "]", "[", "i", "]", "]", "\n", "", "p_idx", "=", "np", ".", "array", "(", "p_idx", ")", "\n", "a_idx", "=", "np", ".", "array", "(", "a_idx", ")", "\n", "node_feature", "=", "np", ".", "concatenate", "(", "(", "feature", "[", "'paper'", "]", "[", "p_idx", "]", ",", "feature", "[", "'author'", "]", "[", "a_idx", "]", ")", ",", "axis", "=", "0", ")", "\n", "node_feature", "=", "torch", ".", "FloatTensor", "(", "node_feature", ")", "\n", "# gh[0]=node_feature", "\n", "return", "(", "node_feature", ",", "gh", "[", "1", "]", ",", "gh", "[", "2", "]", ",", "gh", "[", "3", "]", ",", "gh", "[", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.rel_graph": [[138, 159], ["enumerate", "enumerate", "torch.LongTensor", "torch.LongTensor().t", "ed.keys", "len", "torch.LongTensor"], "function", ["None"], ["", "def", "rel_graph", "(", "idl_a", ",", "idl_p", ",", "subgraph", ")", ":", "\n", "    ", "ad", "=", "{", "}", "\n", "pd", "=", "{", "}", "\n", "ed", "=", "{", "}", "\n", "edge_indx", "=", "[", "]", "\n", "edge_type", "=", "[", "]", "\n", "for", "idx", ",", "an", "in", "enumerate", "(", "idl_a", ")", ":", "\n", "        ", "ad", "[", "an", "]", "=", "idx", "\n", "", "for", "idx", ",", "an", "in", "enumerate", "(", "idl_p", ")", ":", "\n", "        ", "pd", "[", "an", "]", "=", "idx", "\n", "\n", "", "for", "rel", "in", "subgraph", "[", "\"author\"", "]", "[", "\"paper\"", "]", ":", "\n", "        ", "if", "rel", "not", "in", "ed", ".", "keys", "(", ")", ":", "\n", "            ", "ed", "[", "rel", "]", "=", "len", "(", "ed", ")", "\n", "", "for", "_edge", "in", "subgraph", "[", "\"author\"", "]", "[", "\"paper\"", "]", "[", "rel", "]", ":", "\n", "            ", "if", "_edge", "[", "0", "]", "in", "idl_a", "and", "_edge", "[", "1", "]", "in", "idl_p", ":", "\n", "                ", "edge_indx", "+=", "[", "[", "ad", "[", "_edge", "[", "0", "]", "]", ",", "pd", "[", "_edge", "[", "1", "]", "]", "]", "]", "\n", "edge_type", "+=", "[", "ed", "[", "rel", "]", "]", "\n", "\n", "", "", "", "edge_type", "=", "torch", ".", "LongTensor", "(", "edge_type", ")", "\n", "return", "torch", ".", "LongTensor", "(", "edge_indx", ")", ".", "t", "(", ")", ",", "edge_type", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.randint": [[161, 163], ["numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.randint"], ["", "def", "randint", "(", ")", ":", "\n", "    ", "return", "np", ".", "random", ".", "randint", "(", "2", "**", "32", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.set_random_seed": [[166, 182], ["random.seed", "str", "numpy.random.seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.manual_seed"], "function", ["None"], ["def", "set_random_seed", "(", "seed", "=", "0", ")", ":", "\n", "    ", "\"\"\"Set random seed.\n    Parameters\n    ----------\n    seed : int\n        Random seed to use\n    \"\"\"", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.DGATConv.__init__": [[21, 56], ["torch_geometric.nn.conv.MessagePassing.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.glorot", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "gats.DGATConv.norm_list.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HRGATConv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_hid", ",", "out_hid", ",", "\n", "num_edge_types", ",", "negative_slope", "=", "0.2", ",", "dual", "=", "True", ",", "heads", "=", "1", ",", "mask", "=", "None", ",", "global_weight", "=", "True", ")", ":", "\n", "        ", "super", "(", "DGATConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ")", "\n", "\n", "self", ".", "in_hid", "=", "in_hid", "\n", "self", ".", "out_hid", "=", "out_hid", "\n", "self", ".", "num_edge_types", "=", "num_edge_types", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "dual", "=", "dual", "\n", "self", ".", "mask", "=", "mask", "\n", "self", ".", "global_weight", "=", "global_weight", "\n", "\n", "self", ".", "rel_wi", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_edge_types", ",", "out_hid", "*", "2", ",", "1", ")", ")", "\n", "\n", "self", ".", "rel_bt", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_hid", "*", "2", ",", "1", ")", ")", "\n", "self", ".", "w_wi", "=", "nn", ".", "Linear", "(", "in_hid", ",", "out_hid", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_bt", "=", "nn", ".", "Linear", "(", "out_hid", ",", "out_hid", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "w_out", "=", "nn", ".", "Linear", "(", "out_hid", ",", "out_hid", ",", "bias", "=", "False", ")", "\n", "self", ".", "q_trans", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_hid", ",", "1", ")", ")", "\n", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "out_hid", ")", "\n", "self", ".", "norm_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_edge_types", ")", ":", "\n", "            ", "self", ".", "norm_list", ".", "append", "(", "nn", ".", "LayerNorm", "(", "out_hid", ")", ")", "\n", "\n", "\n", "", "self", ".", "skip", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", ")", "\n", "self", ".", "beta_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", ")", "\n", "self", ".", "overall_beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "num_edge_types", ")", ")", "\n", "# self.drop=Dropout(0.2)", "\n", "\n", "glorot", "(", "self", ".", "rel_wi", ")", "\n", "glorot", "(", "self", ".", "rel_bt", ")", "\n", "glorot", "(", "self", ".", "q_trans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.DGATConv.forward": [[59, 104], ["gats.DGATConv.w_wi", "range", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "gats.DGATConv.norm", "torch.softmax", "torch.softmax", "torch.softmax", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "range", "range", "mask.sum", "gats.DGATConv.w_bt", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "len", "len", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.gelu", "torch.gelu", "torch.gelu", "gats.DGATConv.propagate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_idx", ",", "edge_type", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "w_wi", "(", "x", ")", "\n", "out_list", "=", "[", "]", "\n", "edg_list", "=", "[", "]", "\n", "overall_rel", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_edge_types", ")", ":", "\n", "            ", "mask", "=", "(", "edge_type", "==", "i", ")", "\n", "edge_index", "=", "edge_idx", "[", ":", ",", "mask", "]", "\n", "if", "mask", ".", "sum", "(", ")", "!=", "0", ":", "\n", "                ", "rs", "=", "self", ".", "w_bt", "(", "F", ".", "leaky_relu", "(", "self", ".", "norm_list", "[", "i", "]", "(", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "edge_type", "=", "i", ")", ")", ",", "self", ".", "negative_slope", ")", ")", "#Nxd", "\n", "out_list", "+=", "[", "rs", "]", "\n", "edg_list", "+=", "[", "i", "]", "\n", "\n", "\n", "", "", "if", "self", ".", "dual", ":", "\n", "            ", "overall_beta", "=", "F", ".", "softmax", "(", "self", ".", "overall_beta", ",", "dim", "=", "0", ")", "\n", "\n", "rs_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "edg_list", ")", ")", ":", "\n", "                ", "conc", "=", "torch", ".", "cat", "(", "(", "x", ",", "out_list", "[", "i", "]", ")", ",", "dim", "=", "1", ")", "#Nx2d", "\n", "rs", "=", "torch", ".", "matmul", "(", "conc", ",", "self", ".", "rel_bt", ")", "#Nx1", "\n", "rs_list", "+=", "[", "rs", "]", "\n", "\n", "", "rs", "=", "torch", ".", "stack", "(", "rs_list", ")", "#rxNx1", "\n", "beta", "=", "F", ".", "softmax", "(", "rs", ",", "dim", "=", "0", ")", "#rxNx1", "\n", "res", "=", "0", "\n", "if", "self", ".", "mask", ":", "\n", "                ", "for", "i", "in", "self", ".", "mask", ":", "\n", "                    ", "out_list", "[", "i", "]", "=", "torch", ".", "zeros_like", "(", "out_list", "[", "i", "]", ")", "\n", "", "", "beta_weight", "=", "torch", ".", "sigmoid", "(", "self", ".", "beta_weight", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "edg_list", ")", ")", ":", "\n", "                ", "if", "self", ".", "global_weight", ":", "\n", "                    ", "res", "+=", "out_list", "[", "i", "]", "*", "(", "(", "1", "-", "beta_weight", ")", "*", "beta", "[", "i", "]", "+", "beta_weight", "*", "overall_beta", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                    ", "res", "+=", "out_list", "[", "i", "]", "*", "beta", "[", "i", "]", "\n", "", "", "", "else", ":", "\n", "            ", "res", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "edg_list", ")", ")", ":", "\n", "                ", "res", "+=", "out_list", "[", "i", "]", "\n", "\n", "", "", "final_weight", "=", "torch", ".", "sigmoid", "(", "self", ".", "skip", ")", "\n", "res", "=", "self", ".", "norm", "(", "F", ".", "gelu", "(", "res", ")", "*", "(", "final_weight", ")", "+", "x", "*", "(", "1", "-", "final_weight", ")", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.DGATConv.message": [[106, 116], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul().to", "torch.matmul().to", "torch.matmul().to", "torch.matmul().to", "torch.matmul().to", "torch.matmul().to", "torch.matmul().to", "torch.matmul().to", "torch.matmul().to", "torch_geometric.utils.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "edge_index", ",", "x_i", ",", "x_j", ",", "edge_type", ")", ":", "\n", "\n", "        ", "node_f", "=", "torch", ".", "cat", "(", "(", "x_i", ",", "x_j", ")", ",", "1", ")", "#nx2d", "\n", "\n", "temp", "=", "torch", ".", "matmul", "(", "node_f", ",", "self", ".", "rel_wi", "[", "edge_type", "]", ")", ".", "to", "(", "x_i", ".", "device", ")", "#nx1", "\n", "\n", "alpha", "=", "softmax", "(", "temp", ",", "edge_index", "[", "1", "]", ")", "\n", "\n", "rs", "=", "x_j", "*", "alpha", "#nxd", "\n", "return", "rs", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HetGATConv.__init__": [[122, 144], ["torch_geometric.nn.conv.MessagePassing.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.glorot", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HRGATConv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_hid", ",", "out_hid", ",", "negative_slope", "=", "0.2", ",", "norm", "=", "True", ",", "dual", "=", "True", ",", "global_weight", "=", "True", ")", ":", "\n", "        ", "super", "(", "HetGATConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ")", "\n", "\n", "self", ".", "in_hid", "=", "in_hid", "\n", "self", ".", "out_hid", "=", "out_hid", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "dual", "=", "dual", "\n", "self", ".", "global_weight", "=", "global_weight", "\n", "\n", "\n", "self", ".", "rel_wi", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "2", ",", "out_hid", "*", "2", ",", "1", ")", ")", "\n", "self", ".", "rel_bt", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_hid", "*", "2", ",", "1", ")", ")", "\n", "self", ".", "w_bt", "=", "nn", ".", "Linear", "(", "out_hid", ",", "out_hid", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_out", "=", "nn", ".", "Linear", "(", "out_hid", ",", "out_hid", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "out_norm", "=", "nn", ".", "LayerNorm", "(", "out_hid", ")", "\n", "\n", "self", ".", "skip", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", ")", "\n", "\n", "glorot", "(", "self", ".", "rel_wi", ")", "\n", "glorot", "(", "self", ".", "rel_bt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HetGATConv.forward": [[146, 180], ["range", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "gats.HetGATConv.out_norm", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.softmax", "torch.softmax", "torch.softmax", "range", "range", "mask.sum", "gats.HetGATConv.w_bt", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "len", "len", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.gelu", "torch.gelu", "torch.gelu", "gats.HetGATConv.propagate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "a_hid", ",", "p_hid", ",", "edge_idx", ",", "edge_type", ")", ":", "\n", "\n", "        ", "xi", "=", "p_hid", "[", "edge_idx", "[", "1", "]", "]", "\n", "out_list", "=", "[", "]", "\n", "num_edge_types", "=", "2", "\n", "edg_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_edge_types", ")", ":", "\n", "            ", "mask", "=", "(", "edge_type", "==", "i", ")", "\n", "edge_index", "=", "edge_idx", "[", ":", ",", "mask", "]", "\n", "if", "mask", ".", "sum", "(", ")", "!=", "0", ":", "\n", "                ", "rs", "=", "self", ".", "w_bt", "(", "F", ".", "leaky_relu", "(", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "(", "a_hid", ",", "p_hid", ")", ",", "edge_type", "=", "i", ")", ",", "self", ".", "negative_slope", ")", ")", "#Nxd", "\n", "out_list", "+=", "[", "rs", "]", "\n", "edg_list", "+=", "[", "i", "]", "\n", "\n", "", "", "if", "self", ".", "dual", ":", "\n", "            ", "rs_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "edg_list", ")", ")", ":", "\n", "                ", "conc", "=", "torch", ".", "cat", "(", "(", "p_hid", ",", "out_list", "[", "i", "]", ")", ",", "dim", "=", "1", ")", "#Nx2d", "\n", "rs", "=", "torch", ".", "matmul", "(", "conc", ",", "self", ".", "rel_bt", ")", "#Nx1", "\n", "rs_list", "+=", "[", "rs", "]", "\n", "\n", "", "rs", "=", "torch", ".", "stack", "(", "rs_list", ")", "#Nxr", "\n", "beta", "=", "F", ".", "softmax", "(", "rs", ",", "dim", "=", "0", ")", "#Nxr", "\n", "res", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "edg_list", ")", ")", ":", "\n", "                ", "res", "+=", "out_list", "[", "i", "]", "*", "beta", "[", "i", "]", "\n", "", "", "else", ":", "\n", "            ", "res", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "edg_list", ")", ")", ":", "\n", "                ", "res", "+=", "out_list", "[", "i", "]", "\n", "", "", "final_weight", "=", "torch", ".", "sigmoid", "(", "self", ".", "skip", ")", "\n", "res", "=", "self", ".", "out_norm", "(", "F", ".", "gelu", "(", "res", ")", "*", "(", "final_weight", ")", "+", "p_hid", "*", "(", "1", "-", "final_weight", ")", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HetGATConv.message": [[182, 192], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul().to", "torch.matmul().to", "torch.matmul().to", "torch.matmul().to", "torch.matmul().to", "torch.matmul().to", "torch.matmul().to", "torch.matmul().to", "torch.matmul().to", "torch_geometric.utils.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "edge_index", ",", "x_i", ",", "x_j", ",", "edge_type", ")", ":", "\n", "\n", "        ", "node_f", "=", "torch", ".", "cat", "(", "(", "x_i", ",", "x_j", ")", ",", "1", ")", "#nx2d", "\n", "\n", "temp", "=", "torch", ".", "matmul", "(", "node_f", ",", "self", ".", "rel_wi", "[", "edge_type", "]", ")", ".", "to", "(", "x_i", ".", "device", ")", "#nx1", "\n", "\n", "alpha", "=", "softmax", "(", "temp", ",", "edge_index", "[", "1", "]", ")", "\n", "\n", "rs", "=", "x_j", "*", "alpha", "#nxd", "\n", "return", "rs", "\n", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HRGATConv.__init__": [[197, 233], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "range", "range", "gats.HRGATConv.hetgat.append", "gats.HRGATConv.hetgat.append", "gats.HRGATConv.hetgat.append", "gats.HRGATConv.hetgat.append", "gats.HRGATConv.hgt.append", "gats.HRGATConv.hgt.append", "gats.HRGATConv.hgt.append", "gats.HRGATConv.hgt.append", "gats.HetGATConv", "gats.HetGATConv", "gats.HetGATConv", "gats.HetGATConv", "RGSNConv", "RGSNConv", "gats.HRGATConv.hgt.append", "gats.HRGATConv.hgt.append", "RGSNConv", "RGSNConv", "gats.HRGATConv.hgt.append", "gats.HRGATConv.hgt.append", "gats.DGATConv", "gats.DGATConv", "gats.DGATConv", "gats.DGATConv"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HRGATConv.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_hid", ",", "out_hid", ",", "num_m1", ",", "num_m2", ",", "conv_name", "=", "\"hrgat\"", ",", "n_heads", "=", "8", ",", "n_layers", "=", "2", ",", "dropout", "=", "0.2", ",", "norm", "=", "True", ",", "hgt_layer", "=", "2", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "HRGATConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_name", "=", "conv_name", "\n", "self", ".", "hetgat", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "layer", "=", "n_layers", "\n", "\n", "self", ".", "hgt", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "out_hid", ")", "\n", "self", ".", "drop", "=", "Dropout", "(", "dropout", ")", "\n", "self", ".", "proj_a", "=", "nn", ".", "Linear", "(", "in_hid", ",", "out_hid", ",", "bias", "=", "False", ")", "\n", "self", ".", "proj_p", "=", "nn", ".", "Linear", "(", "in_hid", ",", "out_hid", ",", "bias", "=", "False", ")", "\n", "\n", "for", "_", "in", "range", "(", "hgt_layer", ")", ":", "\n", "            ", "if", "_", "==", "0", ":", "\n", "                ", "if", "self", ".", "conv_name", "==", "\"rgsn\"", ":", "\n", "                    ", "self", ".", "hgt", ".", "append", "(", "RGSNConv", "(", "in_hid", ",", "out_hid", ",", "1", ",", "num_m1", ")", ")", "\n", "self", ".", "hgt", ".", "append", "(", "RGSNConv", "(", "in_hid", ",", "out_hid", ",", "1", ",", "num_m2", ")", ")", "\n", "", "elif", "self", ".", "conv_name", "==", "\"dgat\"", ":", "\n", "                    ", "self", ".", "hgt", ".", "append", "(", "DGATConv", "(", "in_hid", ",", "out_hid", ",", "num_m1", ",", "heads", "=", "n_heads", ")", ")", "\n", "self", ".", "hgt", ".", "append", "(", "DGATConv", "(", "in_hid", ",", "out_hid", ",", "num_m2", ",", "heads", "=", "n_heads", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "conv_name", "==", "\"rgsn\"", ":", "\n", "                    ", "self", ".", "hgt", ".", "append", "(", "RGSNConv", "(", "in_hid", ",", "out_hid", ",", "1", ",", "num_m1", ")", ")", "\n", "self", ".", "hgt", ".", "append", "(", "RGSNConv", "(", "in_hid", ",", "out_hid", ",", "1", ",", "num_m2", ")", ")", "\n", "", "elif", "self", ".", "conv_name", "==", "\"dgat\"", ":", "\n", "                    ", "self", ".", "hgt", ".", "append", "(", "DGATConv", "(", "out_hid", ",", "out_hid", ",", "num_m1", ",", "heads", "=", "n_heads", ")", ")", "\n", "self", ".", "hgt", ".", "append", "(", "DGATConv", "(", "out_hid", ",", "out_hid", ",", "num_m2", ",", "heads", "=", "n_heads", ")", ")", "\n", "\n", "", "", "", "if", "self", ".", "conv_name", "==", "\"dhan1\"", ":", "\n", "            ", "for", "n", "in", "range", "(", "n_layers", ")", ":", "\n", "                ", "self", ".", "hetgat", ".", "append", "(", "HetGATConv", "(", "out_hid", ",", "out_hid", ",", "dual", "=", "False", ")", ")", "\n", "self", ".", "hetgat", ".", "append", "(", "HetGATConv", "(", "out_hid", ",", "out_hid", ",", "dual", "=", "False", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "n", "in", "range", "(", "n_layers", ")", ":", "\n", "                ", "self", ".", "hetgat", ".", "append", "(", "HetGATConv", "(", "out_hid", ",", "out_hid", ")", ")", "\n", "self", ".", "hetgat", ".", "append", "(", "HetGATConv", "(", "out_hid", ",", "out_hid", ")", ")", "\n", "# _gh=(node_feature, edge_index, edge_type, id_list)", "\n"]], "home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.gats.HRGATConv.forward": [[234, 264], ["paper_gh[].to", "author_gh[].to", "range", "utils.rel_graph", "range", "gats.HRGATConv.drop", "gats.HRGATConv.drop", "int", "int", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "gats.HRGATConv.norm", "gats.HRGATConv.norm", "torch.stack.to", "torch.stack.to", "torch.stack.to", "edge_type.to", "torch.stack.to", "torch.stack.to", "torch.stack.to", "edge_type.to", "len", "paper_gh[].to", "paper_gh[].to", "author_gh[].to", "author_gh[].to", "gats.HRGATConv.to", "paper_gh[].to", "paper_gh[].to", "gats.HRGATConv.to", "author_gh[].to", "author_gh[].to", "len"], "methods", ["home.repos.pwc.inspect_result.superweisp_dhan2022.HRGAT.utils.rel_graph"], ["", "", "", "def", "forward", "(", "self", ",", "paper_gh", ",", "author_gh", ",", "sub_graph", ",", "device", ")", ":", "\n", "\n", "        ", "h_p", "=", "paper_gh", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "h_a", "=", "author_gh", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "for", "hl", "in", "range", "(", "int", "(", "(", "len", "(", "self", ".", "hgt", ")", "/", "2", ")", ")", ")", ":", "\n", "            ", "if", "hl", "==", "0", ":", "\n", "                ", "h_p", "=", "self", ".", "hgt", "[", "2", "*", "hl", "]", "(", "h_p", ",", "paper_gh", "[", "1", "]", ".", "to", "(", "device", ")", ",", "paper_gh", "[", "2", "]", ".", "to", "(", "device", ")", ")", "\n", "h_a", "=", "self", ".", "hgt", "[", "2", "*", "hl", "+", "1", "]", "(", "h_a", ",", "author_gh", "[", "1", "]", ".", "to", "(", "device", ")", ",", "author_gh", "[", "2", "]", ".", "to", "(", "device", ")", ")", "\n", "", "else", ":", "\n", "                ", "h_p", "=", "self", ".", "hgt", "[", "2", "*", "hl", "]", "(", "h_p", ".", "to", "(", "device", ")", ",", "paper_gh", "[", "1", "]", ".", "to", "(", "device", ")", ",", "paper_gh", "[", "2", "]", ".", "to", "(", "device", ")", ")", "\n", "h_a", "=", "self", ".", "hgt", "[", "2", "*", "hl", "+", "1", "]", "(", "h_a", ".", "to", "(", "device", ")", ",", "author_gh", "[", "1", "]", ".", "to", "(", "device", ")", ",", "author_gh", "[", "2", "]", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "", "idl_a", "=", "author_gh", "[", "3", "]", "\n", "idl_p", "=", "paper_gh", "[", "3", "]", "\n", "edge_indx", ",", "edge_type", "=", "rel_graph", "(", "idl_a", ",", "idl_p", ",", "sub_graph", ")", "\n", "\n", "for", "ly", "in", "range", "(", "int", "(", "len", "(", "self", ".", "hetgat", ")", "/", "2", ")", ")", ":", "\n", "            ", "p_hid", "=", "self", ".", "hetgat", "[", "2", "*", "ly", "]", "(", "h_a", ",", "h_p", ",", "edge_indx", ".", "to", "(", "device", ")", ",", "edge_type", ".", "to", "(", "device", ")", ")", "\n", "\n", "edge_indx", "=", "torch", ".", "stack", "(", "(", "edge_indx", "[", "1", "]", ",", "edge_indx", "[", "0", "]", ")", ")", "\n", "a_hid", "=", "self", ".", "hetgat", "[", "2", "*", "ly", "+", "1", "]", "(", "h_p", ",", "h_a", ",", "edge_indx", ".", "to", "(", "device", ")", ",", "edge_type", ".", "to", "(", "device", ")", ")", "\n", "\n", "edge_indx", "=", "torch", ".", "stack", "(", "(", "edge_indx", "[", "1", "]", ",", "edge_indx", "[", "0", "]", ")", ")", "\n", "h_a", "=", "a_hid", "\n", "h_p", "=", "p_hid", "\n", "", "h_a", "=", "self", ".", "drop", "(", "self", ".", "norm", "(", "h_a", ")", ")", "\n", "h_p", "=", "self", ".", "drop", "(", "self", ".", "norm", "(", "h_p", ")", ")", "\n", "\n", "\n", "return", "h_a", ",", "idl_a", ",", "h_p", ",", "idl_p", "", "", "", ""]]}