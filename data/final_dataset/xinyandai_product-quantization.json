{"home.repos.pwc.inspect_result.xinyandai_product-quantization.None.run_pq.chunk_compress": [[6, 13], ["np.empty", "tqdm.tqdm", "range", "pq.compress", "math.ceil", "vecs[].astype", "len"], "function", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.compress"], ["def", "chunk_compress", "(", "pq", ",", "vecs", ")", ":", "\n", "    ", "chunk_size", "=", "1000000", "\n", "compressed_vecs", "=", "np", ".", "empty", "(", "shape", "=", "vecs", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "tqdm", ".", "tqdm", "(", "range", "(", "math", ".", "ceil", "(", "len", "(", "vecs", ")", "/", "chunk_size", ")", ")", ")", ":", "\n", "        ", "compressed_vecs", "[", "i", "*", "chunk_size", ":", "(", "i", "+", "1", ")", "*", "chunk_size", ",", ":", "]", "=", "pq", ".", "compress", "(", "vecs", "[", "i", "*", "chunk_size", ":", "(", "i", "+", "1", ")", "*", "chunk_size", ",", ":", "]", ".", "astype", "(", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "", "return", "compressed_vecs", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.run_pq.execute": [[15, 35], ["np.random.seed", "print", "print", "print", "run_pq.chunk_compress", "print", "sorter.BatchSorter().recall", "print", "print", "enumerate", "pq.fit", "pq.fit", "zip", "print", "pq.class_message", "X[].astype", "T.astype", "range", "sorter.BatchSorter", "int", "math.log2", "len", "len"], "function", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.run_pq.chunk_compress", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.BatchSorter.recall", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.fit", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.fit", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.class_message"], ["", "def", "execute", "(", "pq", ",", "X", ",", "T", ",", "Q", ",", "G", ",", "metric", ",", "train_size", "=", "100000", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "123", ")", "\n", "print", "(", "\"# ranking metric {}\"", ".", "format", "(", "metric", ")", ")", "\n", "print", "(", "\"# \"", "+", "pq", ".", "class_message", "(", ")", ")", "\n", "if", "T", "is", "None", ":", "\n", "        ", "pq", ".", "fit", "(", "X", "[", ":", "train_size", "]", ".", "astype", "(", "dtype", "=", "np", ".", "float32", ")", ",", "iter", "=", "20", ")", "\n", "", "else", ":", "\n", "        ", "pq", ".", "fit", "(", "T", ".", "astype", "(", "dtype", "=", "np", ".", "float32", ")", ",", "iter", "=", "20", ")", "\n", "\n", "", "print", "(", "'# compress items'", ")", "\n", "compressed", "=", "chunk_compress", "(", "pq", ",", "X", ")", "\n", "print", "(", "\"# sorting items\"", ")", "\n", "Ts", "=", "[", "2", "**", "i", "for", "i", "in", "range", "(", "2", "+", "int", "(", "math", ".", "log2", "(", "len", "(", "X", ")", ")", ")", ")", "]", "\n", "recalls", "=", "BatchSorter", "(", "compressed", ",", "Q", ",", "X", ",", "G", ",", "Ts", ",", "metric", "=", "metric", ",", "batch_size", "=", "200", ")", ".", "recall", "(", ")", "\n", "print", "(", "\"# searching!\"", ")", "\n", "\n", "print", "(", "\"expected items, overall time, avg recall, avg precision, avg error, avg items\"", ")", "\n", "for", "i", ",", "(", "t", ",", "recall", ")", "in", "enumerate", "(", "zip", "(", "Ts", ",", "recalls", ")", ")", ":", "\n", "        ", "print", "(", "\"{}, {}, {}, {}, {}, {}\"", ".", "format", "(", "\n", "2", "**", "i", ",", "0", ",", "recall", ",", "recall", "*", "len", "(", "G", "[", "0", "]", ")", "/", "t", ",", "0", ",", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.run_pq.parse_args": [[37, 48], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.run_ground_truth.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "# override default parameters with command line parameters", "\n", "    ", "import", "argparse", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Process input method and parameters.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "help", "=", "'choose data set name'", ")", "\n", "parser", ".", "add_argument", "(", "'--topk'", ",", "type", "=", "int", ",", "help", "=", "'required topk of ground truth'", ")", "\n", "parser", ".", "add_argument", "(", "'--metric'", ",", "type", "=", "str", ",", "help", "=", "'metric of ground truth'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_codebook'", ",", "type", "=", "int", ",", "help", "=", "'number of codebooks'", ")", "\n", "parser", ".", "add_argument", "(", "'--Ks'", ",", "type", "=", "int", ",", "help", "=", "'number of centroids in each quantizer'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", ".", "dataset", ",", "args", ".", "topk", ",", "args", ".", "num_codebook", ",", "args", ".", "Ks", ",", "args", ".", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq.PQ.__init__": [[8, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "M", ",", "Ks", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "assert", "0", "<", "Ks", "<=", "2", "**", "32", "\n", "self", ".", "M", ",", "self", ".", "Ks", ",", "self", ".", "verbose", "=", "M", ",", "Ks", ",", "verbose", "\n", "self", ".", "code_dtype", "=", "np", ".", "uint8", "if", "Ks", "<=", "2", "**", "8", "else", "(", "np", ".", "uint16", "if", "Ks", "<=", "2", "**", "16", "else", "np", ".", "uint32", ")", "\n", "self", ".", "codewords", "=", "None", "\n", "self", ".", "Ds", "=", "None", "\n", "self", ".", "Dim", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq.PQ.class_message": [[16, 18], ["None"], "methods", ["None"], ["", "def", "class_message", "(", "self", ")", ":", "\n", "        ", "return", "\"Subspace PQ, M: {}, Ks : {}, code_dtype: {}\"", ".", "format", "(", "self", ".", "M", ",", "self", ".", "Ks", ",", "self", ".", "code_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq.PQ.fit": [[19, 42], ["int", "numpy.cumsum", "numpy.insert", "numpy.zeros", "range", "scipy.cluster.vq.kmeans2", "range", "numpy.max", "print"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "vecs", ",", "iter", ")", ":", "\n", "        ", "assert", "vecs", ".", "dtype", "==", "np", ".", "float32", "\n", "assert", "vecs", ".", "ndim", "==", "2", "\n", "N", ",", "D", "=", "vecs", ".", "shape", "\n", "assert", "self", ".", "Ks", "<", "N", ",", "\"the number of training vector should be more than Ks\"", "\n", "self", ".", "Dim", "=", "D", "\n", "\n", "reminder", "=", "D", "%", "self", ".", "M", "\n", "quotient", "=", "int", "(", "D", "/", "self", ".", "M", ")", "\n", "dims_width", "=", "[", "quotient", "+", "1", "if", "i", "<", "reminder", "else", "quotient", "for", "i", "in", "range", "(", "self", ".", "M", ")", "]", "\n", "self", ".", "Ds", "=", "np", ".", "cumsum", "(", "dims_width", ")", "# prefix sum", "\n", "self", ".", "Ds", "=", "np", ".", "insert", "(", "self", ".", "Ds", ",", "0", ",", "0", ")", "# insert zero at beginning", "\n", "\n", "# [m][ks][ds]: m-th subspace, ks-the codeword, ds-th dim", "\n", "self", ".", "codewords", "=", "np", ".", "zeros", "(", "(", "self", ".", "M", ",", "self", ".", "Ks", ",", "np", ".", "max", "(", "dims_width", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "m", "in", "range", "(", "self", ".", "M", ")", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "\"#    Training the subspace: {} / {}, {} -> {}\"", ".", "format", "(", "m", ",", "self", ".", "M", ",", "self", ".", "Ds", "[", "m", "]", ",", "self", ".", "Ds", "[", "m", "+", "1", "]", ")", ")", "\n", "", "vecs_sub", "=", "vecs", "[", ":", ",", "self", ".", "Ds", "[", "m", "]", ":", "self", ".", "Ds", "[", "m", "+", "1", "]", "]", "\n", "self", ".", "codewords", "[", "m", ",", ":", ",", ":", "self", ".", "Ds", "[", "m", "+", "1", "]", "-", "self", ".", "Ds", "[", "m", "]", "]", ",", "_", "=", "kmeans2", "(", "\n", "vecs_sub", ",", "self", ".", "Ks", ",", "iter", "=", "iter", ",", "minit", "=", "'points'", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq.PQ.encode": [[43, 56], ["numpy.empty", "range", "scipy.cluster.vq.vq"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "vecs", ")", ":", "\n", "        ", "assert", "vecs", ".", "dtype", "==", "np", ".", "float32", "\n", "assert", "vecs", ".", "ndim", "==", "2", "\n", "N", ",", "D", "=", "vecs", ".", "shape", "\n", "\n", "# codes[n][m] : code of n-th vec, m-th subspace", "\n", "codes", "=", "np", ".", "empty", "(", "(", "N", ",", "self", ".", "M", ")", ",", "dtype", "=", "self", ".", "code_dtype", ")", "\n", "for", "m", "in", "range", "(", "self", ".", "M", ")", ":", "\n", "            ", "vecs_sub", "=", "vecs", "[", ":", ",", "self", ".", "Ds", "[", "m", "]", ":", "self", ".", "Ds", "[", "m", "+", "1", "]", "]", "\n", "codes", "[", ":", ",", "m", "]", ",", "_", "=", "vq", "(", "vecs_sub", ",", "\n", "self", ".", "codewords", "[", "m", ",", ":", ",", ":", "self", ".", "Ds", "[", "m", "+", "1", "]", "-", "self", ".", "Ds", "[", "m", "]", "]", ")", "\n", "\n", "", "return", "codes", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq.PQ.decode": [[57, 68], ["numpy.empty", "range"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "codes", ")", ":", "\n", "        ", "assert", "codes", ".", "ndim", "==", "2", "\n", "N", ",", "M", "=", "codes", ".", "shape", "\n", "assert", "M", "==", "self", ".", "M", "\n", "assert", "codes", ".", "dtype", "==", "self", ".", "code_dtype", "\n", "\n", "vecs", "=", "np", ".", "empty", "(", "(", "N", ",", "self", ".", "Dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "m", "in", "range", "(", "self", ".", "M", ")", ":", "\n", "            ", "vecs", "[", ":", ",", "self", ".", "Ds", "[", "m", "]", ":", "self", ".", "Ds", "[", "m", "+", "1", "]", "]", "=", "self", ".", "codewords", "[", "m", ",", "codes", "[", ":", ",", "m", "]", ",", ":", "self", ".", "Ds", "[", "m", "+", "1", "]", "-", "self", ".", "Ds", "[", "m", "]", "]", "\n", "\n", "", "return", "vecs", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq.PQ.compress": [[69, 71], ["pq.PQ.decode", "pq.PQ.encode"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.decode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.encode"], ["", "def", "compress", "(", "self", ",", "vecs", ")", ":", "\n", "        ", "return", "self", ".", "decode", "(", "self", ".", "encode", "(", "vecs", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.aq.AQ.__init__": [[166, 172], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "M", ",", "Ks", "=", "256", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "assert", "0", "<", "Ks", "<=", "2", "**", "32", "\n", "self", ".", "M", ",", "self", ".", "Ks", ",", "self", ".", "verbose", "=", "M", ",", "Ks", ",", "verbose", "\n", "self", ".", "code_dtype", "=", "np", ".", "int32", "\n", "self", ".", "codewords", "=", "None", "\n", "self", ".", "branch", "=", "64", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.aq.AQ.class_message": [[173, 175], ["None"], "methods", ["None"], ["", "def", "class_message", "(", "self", ")", ":", "\n", "        ", "return", "\"AQ, M: {}, Ks : {}, code_dtype: {}\"", ".", "format", "(", "self", ".", "M", ",", "self", ".", "Ks", ",", "self", ".", "code_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.aq.AQ.fit": [[176, 184], ["numpy.zeros", "aq.learnCodebooksAQ", "multiprocessing.cpu_count"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.aq.learnCodebooksAQ"], ["", "def", "fit", "(", "self", ",", "points", ",", "iter", ")", ":", "\n", "        ", "assert", "points", ".", "dtype", "==", "np", ".", "float32", "\n", "assert", "points", ".", "ndim", "==", "2", "\n", "pointsCount", ",", "dim", "=", "points", ".", "shape", "\n", "assert", "self", ".", "Ks", "<", "pointsCount", ",", "\"the number of training vector should be more than Ks\"", "\n", "self", ".", "codewords", "=", "np", ".", "zeros", "(", "(", "self", ".", "M", ",", "self", ".", "Ks", ",", "dim", ")", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "codewords", ",", "codes", "=", "learnCodebooksAQ", "(", "\n", "points", ",", "dim", ",", "self", ".", "M", ",", "self", ".", "Ks", ",", "pointsCount", ",", "self", ".", "branch", ",", "cpu_count", "(", ")", ",", "iter", ",", "self", ".", "codewords", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.aq.AQ.encode": [[185, 194], ["aq.encodePointsAQ", "print", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.aq.encodePointsAQ"], ["", "def", "encode", "(", "self", ",", "vecs", ")", ":", "\n", "        ", "assert", "vecs", ".", "dtype", "==", "np", ".", "float32", "\n", "assert", "vecs", ".", "ndim", "==", "2", "\n", "N", ",", "D", "=", "vecs", ".", "shape", "\n", "assert", "self", ".", "codewords", ".", "shape", "==", "(", "self", ".", "M", ",", "self", ".", "Ks", ",", "D", ")", "\n", "\n", "(", "codes", ",", "errors", ")", "=", "encodePointsAQ", "(", "vecs", ",", "self", ".", "codewords", ",", "self", ".", "branch", ")", "\n", "print", "(", "\"# Mean AQ quantization error: %f\"", "%", "(", "np", ".", "mean", "(", "errors", ")", ")", ")", "\n", "return", "codes", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.aq.AQ.decode": [[195, 206], ["numpy.empty", "range", "numpy.sum"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "codes", ")", ":", "\n", "        ", "assert", "codes", ".", "ndim", "==", "2", "\n", "_", ",", "Ks", ",", "D", "=", "self", ".", "codewords", ".", "shape", "\n", "N", ",", "M", "=", "codes", ".", "shape", "\n", "assert", "M", "==", "self", ".", "M", "\n", "assert", "codes", ".", "dtype", "==", "self", ".", "code_dtype", "\n", "\n", "vecs", "=", "np", ".", "empty", "(", "(", "N", ",", "D", ",", "self", ".", "M", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "m", "in", "range", "(", "self", ".", "M", ")", ":", "\n", "            ", "vecs", "[", ":", ",", ":", ",", "m", "]", "=", "self", ".", "codewords", "[", "m", "]", "[", "codes", "[", ":", ",", "m", "]", ",", ":", "]", "\n", "", "return", "np", ".", "sum", "(", "vecs", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.aq.AQ.compress": [[207, 209], ["aq.AQ.decode", "aq.AQ.encode"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.decode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.encode"], ["", "def", "compress", "(", "self", ",", "vecs", ")", ":", "\n", "        ", "return", "self", ".", "decode", "(", "self", ".", "encode", "(", "vecs", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.aq.solveDimensionLeastSquares": [[10, 21], ["scipy.sparse.csr_matrix", "min", "numpy.zeros", "range", "trainPoints[].flatten", "scipy.sparse.linalg.lsmr", "numpy.reshape"], "function", ["None"], ["def", "solveDimensionLeastSquares", "(", "startDim", ",", "dimCount", ",", "data", ",", "indices", ",", "indptr", ",", "trainPoints", ",", "codebookSize", ",", "M", ")", ":", "\n", "    ", "A", "=", "sparse", ".", "csr_matrix", "(", "(", "data", ",", "indices", ",", "indptr", ")", ",", "shape", "=", "(", "trainPoints", ".", "shape", "[", "0", "]", ",", "M", "*", "codebookSize", ")", ",", "copy", "=", "False", ")", "\n", "discrepancy", "=", "0", "\n", "dimCount", "=", "min", "(", "dimCount", ",", "trainPoints", ".", "shape", "[", "1", "]", "-", "startDim", ")", "\n", "codebooksComponents", "=", "np", ".", "zeros", "(", "(", "M", ",", "codebookSize", ",", "dimCount", ")", ",", "dtype", "=", "'float32'", ")", "\n", "for", "dim", "in", "range", "(", "startDim", ",", "startDim", "+", "dimCount", ")", ":", "\n", "        ", "b", "=", "trainPoints", "[", ":", ",", "dim", "]", ".", "flatten", "(", ")", "\n", "solution", "=", "lsmr", "(", "A", ",", "b", ",", "show", "=", "False", ",", "maxiter", "=", "250", ")", "\n", "codebooksComponents", "[", ":", ",", ":", ",", "dim", "-", "startDim", "]", "=", "np", ".", "reshape", "(", "solution", "[", "0", "]", ",", "(", "M", ",", "codebookSize", ")", ")", "\n", "discrepancy", "+=", "solution", "[", "3", "]", "**", "2", "\n", "", "return", "(", "codebooksComponents", ",", "discrepancy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.aq.encodePointsBeamSearch": [[23, 79], ["numpy.array", "min", "numpy.zeros", "numpy.zeros", "range", "range", "range", "distances.argsort", "numpy.ones", "numpy.array().flatten", "numpy.tile", "numpy.zeros", "range", "np.array().flatten.argsort", "newBestSums.copy", "newBestSumsScores.copy", "range", "range", "numpy.ones", "numpy.ones", "numpy.array", "numpy.dot", "bestSumScores[].repeat", "range"], "function", ["None"], ["", "def", "encodePointsBeamSearch", "(", "startPid", ",", "pointsCount", ",", "pointCodebookProducts", ",", "codebooksProducts", ",", "codebooksNorms", ",", "branch", ")", ":", "\n", "    ", "M", "=", "codebooksProducts", ".", "shape", "[", "0", "]", "\n", "K", "=", "codebooksProducts", ".", "shape", "[", "1", "]", "\n", "hashArray", "=", "np", ".", "array", "(", "[", "13", "**", "i", "for", "i", "in", "range", "(", "M", ")", "]", ")", "\n", "pointsCount", "=", "min", "(", "pointsCount", ",", "pointCodebookProducts", ".", "shape", "[", "0", "]", "-", "startPid", ")", "\n", "assigns", "=", "np", ".", "zeros", "(", "(", "pointsCount", ",", "M", ")", ",", "dtype", "=", "'int32'", ")", "\n", "errors", "=", "np", ".", "zeros", "(", "(", "pointsCount", ")", ",", "dtype", "=", "'float32'", ")", "\n", "for", "pid", "in", "range", "(", "startPid", ",", "startPid", "+", "pointsCount", ")", ":", "\n", "        ", "distances", "=", "-", "pointCodebookProducts", "[", "pid", ",", ":", "]", "+", "codebooksNorms", "\n", "bestIdx", "=", "distances", ".", "argsort", "(", ")", "[", "0", ":", "branch", "]", "\n", "vocIds", "=", "bestIdx", "//", "K", "\n", "wordIds", "=", "bestIdx", "%", "K", "\n", "bestSums", "=", "-", "1", "*", "np", ".", "ones", "(", "(", "branch", ",", "M", ")", ",", "dtype", "=", "'int32'", ")", "\n", "for", "candidateIdx", "in", "range", "(", "branch", ")", ":", "\n", "            ", "bestSums", "[", "candidateIdx", ",", "vocIds", "[", "candidateIdx", "]", "]", "=", "wordIds", "[", "candidateIdx", "]", "\n", "", "bestSumScores", "=", "distances", "[", "bestIdx", "]", "\n", "for", "m", "in", "range", "(", "1", ",", "M", ")", ":", "\n", "            ", "candidatesScores", "=", "np", ".", "array", "(", "[", "bestSumScores", "[", "i", "]", ".", "repeat", "(", "M", "*", "K", ")", "for", "i", "in", "range", "(", "branch", ")", "]", ")", ".", "flatten", "(", ")", "\n", "candidatesScores", "+=", "np", ".", "tile", "(", "distances", ",", "branch", ")", "\n", "globalHashTable", "=", "np", ".", "zeros", "(", "115249", ",", "dtype", "=", "'int8'", ")", "\n", "for", "candidateIdx", "in", "range", "(", "branch", ")", ":", "\n", "                ", "for", "m", "in", "range", "(", "M", ")", ":", "\n", "                      ", "if", "bestSums", "[", "candidateIdx", ",", "m", "]", "<", "0", ":", "\n", "                          ", "continue", "\n", "", "candidatesScores", "[", "candidateIdx", "*", "M", "*", "K", ":", "(", "candidateIdx", "+", "1", ")", "*", "M", "*", "K", "]", "+=", "codebooksProducts", "[", "m", ",", "bestSums", "[", "candidateIdx", ",", "m", "]", ",", ":", "]", "\n", "candidatesScores", "[", "candidateIdx", "*", "M", "*", "K", "+", "m", "*", "K", ":", "candidateIdx", "*", "M", "*", "K", "+", "(", "m", "+", "1", ")", "*", "K", "]", "+=", "999999", "\n", "", "", "bestIndices", "=", "candidatesScores", ".", "argsort", "(", ")", "\n", "found", "=", "0", "\n", "currentBestIndex", "=", "0", "\n", "newBestSums", "=", "-", "1", "*", "np", ".", "ones", "(", "(", "branch", ",", "M", ")", ",", "dtype", "=", "'int32'", ")", "\n", "newBestSumsScores", "=", "-", "1", "*", "np", ".", "ones", "(", "(", "branch", ")", ",", "dtype", "=", "'float32'", ")", "\n", "while", "found", "<", "branch", ":", "\n", "                ", "bestIndex", "=", "bestIndices", "[", "currentBestIndex", "]", "\n", "candidateId", "=", "bestIndex", "//", "(", "M", "*", "K", ")", "\n", "codebookId", "=", "(", "bestIndex", "%", "(", "M", "*", "K", ")", ")", "//", "K", "\n", "wordId", "=", "(", "bestIndex", "%", "(", "M", "*", "K", ")", ")", "%", "K", "\n", "bestSums", "[", "candidateId", ",", "codebookId", "]", "=", "wordId", "\n", "hashIdx", "=", "np", ".", "dot", "(", "bestSums", "[", "candidateId", ",", ":", "]", ",", "hashArray", ")", "%", "115249", "\n", "if", "globalHashTable", "[", "hashIdx", "]", "==", "1", ":", "\n", "                    ", "bestSums", "[", "candidateId", ",", "codebookId", "]", "=", "-", "1", "\n", "currentBestIndex", "+=", "1", "\n", "continue", "\n", "", "else", ":", "\n", "                    ", "bestSums", "[", "candidateId", ",", "codebookId", "]", "=", "-", "1", "\n", "globalHashTable", "[", "hashIdx", "]", "=", "1", "\n", "newBestSums", "[", "found", ",", ":", "]", "=", "bestSums", "[", "candidateId", ",", ":", "]", "\n", "newBestSums", "[", "found", ",", "codebookId", "]", "=", "wordId", "\n", "newBestSumsScores", "[", "found", "]", "=", "candidatesScores", "[", "bestIndex", "]", "\n", "found", "+=", "1", "\n", "currentBestIndex", "+=", "1", "\n", "", "", "bestSums", "=", "newBestSums", ".", "copy", "(", ")", "\n", "bestSumScores", "=", "newBestSumsScores", ".", "copy", "(", ")", "\n", "", "assigns", "[", "pid", "-", "startPid", ",", ":", "]", "=", "bestSums", "[", "0", ",", ":", "]", "\n", "errors", "[", "pid", "-", "startPid", "]", "=", "bestSumScores", "[", "0", "]", "\n", "", "return", "(", "assigns", ",", "errors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.aq.encodePointsAQ": [[81, 121], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.zeros", "min", "numpy.zeros", "range", "range", "numpy.reshape", "min", "numpy.zeros", "range", "range", "multiprocessing.Pool", "multiprocessing.Pool.map_async().get", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "range", "fullProducts[].diagonal", "numpy.dot", "min", "numpy.dot", "numpy.dot", "multiprocessing.Pool.map_async", "functools.partial", "range"], "function", ["None"], ["", "def", "encodePointsAQ", "(", "points", ",", "codebooks", ",", "branch", ")", ":", "\n", "    ", "pointsCount", "=", "points", ".", "shape", "[", "0", "]", "\n", "M", "=", "codebooks", ".", "shape", "[", "0", "]", "\n", "K", "=", "codebooks", ".", "shape", "[", "1", "]", "\n", "codebooksProducts", "=", "np", ".", "zeros", "(", "(", "M", ",", "K", ",", "M", "*", "K", ")", ",", "dtype", "=", "'float32'", ")", "\n", "fullProducts", "=", "np", ".", "zeros", "(", "(", "M", ",", "K", ",", "M", ",", "K", ")", ",", "dtype", "=", "'float32'", ")", "\n", "codebooksNorms", "=", "np", ".", "zeros", "(", "(", "M", "*", "K", ")", ",", "dtype", "=", "'float32'", ")", "\n", "for", "m1", "in", "range", "(", "M", ")", ":", "\n", "        ", "for", "m2", "in", "range", "(", "M", ")", ":", "\n", "            ", "fullProducts", "[", "m1", ",", ":", ",", "m2", ",", ":", "]", "=", "2", "*", "np", ".", "dot", "(", "codebooks", "[", "m1", ",", ":", ",", ":", "]", ",", "codebooks", "[", "m2", ",", ":", ",", ":", "]", ".", "T", ")", "\n", "", "codebooksNorms", "[", "m1", "*", "K", ":", "(", "m1", "+", "1", ")", "*", "K", "]", "=", "fullProducts", "[", "m1", ",", ":", ",", "m1", ",", ":", "]", ".", "diagonal", "(", ")", "/", "2", "\n", "codebooksProducts", "[", "m1", ",", ":", ",", ":", "]", "=", "np", ".", "reshape", "(", "fullProducts", "[", "m1", ",", ":", ",", ":", ",", ":", "]", ",", "(", "K", ",", "M", "*", "K", ")", ")", "\n", "", "assigns", "=", "np", ".", "zeros", "(", "(", "pointsCount", ",", "M", ")", ",", "dtype", "=", "'int32'", ")", "\n", "pidChunkSize", "=", "min", "(", "pointsCount", ",", "5030", ")", "\n", "errors", "=", "np", ".", "zeros", "(", "pointsCount", ",", "dtype", "=", "'float32'", ")", "\n", "for", "startPid", "in", "range", "(", "0", ",", "pointsCount", ",", "pidChunkSize", ")", ":", "\n", "        ", "realChunkSize", "=", "min", "(", "pidChunkSize", ",", "pointsCount", "-", "startPid", ")", "\n", "chunkPoints", "=", "points", "[", "startPid", ":", "startPid", "+", "realChunkSize", ",", ":", "]", "\n", "queryProducts", "=", "np", ".", "zeros", "(", "(", "realChunkSize", ",", "M", "*", "K", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "pid", "in", "range", "(", "realChunkSize", ")", ":", "\n", "            ", "errors", "[", "pid", "+", "startPid", "]", "+=", "np", ".", "dot", "(", "chunkPoints", "[", "pid", ",", ":", "]", ",", "chunkPoints", "[", "pid", ",", ":", "]", ".", "T", ")", "\n", "", "for", "m", "in", "range", "(", "M", ")", ":", "\n", "            ", "queryProducts", "[", ":", ",", "m", "*", "K", ":", "(", "m", "+", "1", ")", "*", "K", "]", "=", "2", "*", "np", ".", "dot", "(", "chunkPoints", ",", "codebooks", "[", "m", ",", ":", ",", ":", "]", ".", "T", ")", "\n", "", "poolSize", "=", "8", "\n", "chunkSize", "=", "realChunkSize", "//", "poolSize", "\n", "\n", "pool", "=", "Pool", "(", "processes", "=", "poolSize", "+", "1", ")", "\n", "ans", "=", "pool", ".", "map_async", "(", "partial", "(", "encodePointsBeamSearch", ",", "pointsCount", "=", "chunkSize", ",", "pointCodebookProducts", "=", "queryProducts", ",", "codebooksProducts", "=", "codebooksProducts", ",", "codebooksNorms", "=", "codebooksNorms", ",", "branch", "=", "branch", ")", ",", "range", "(", "0", ",", "realChunkSize", ",", "chunkSize", ")", ")", ".", "get", "(", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "for", "startChunkPid", "in", "range", "(", "0", ",", "realChunkSize", ",", "chunkSize", ")", ":", "\n", "            ", "pidsCount", "=", "min", "(", "chunkSize", ",", "realChunkSize", "-", "startChunkPid", ")", "\n", "assigns", "[", "startPid", "+", "startChunkPid", ":", "startPid", "+", "startChunkPid", "+", "pidsCount", ",", ":", "]", "=", "ans", "[", "startChunkPid", "//", "chunkSize", "]", "[", "0", "]", "\n", "errors", "[", "startPid", "+", "startChunkPid", ":", "startPid", "+", "startChunkPid", "+", "pidsCount", "]", "+=", "ans", "[", "startChunkPid", "//", "chunkSize", "]", "[", "1", "]", "\n", "", "", "return", "(", "assigns", ",", "errors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.aq.learnCodebooksAQ": [[123, 163], ["numpy.zeros", "range", "numpy.ones", "numpy.zeros", "tqdm", "Exception", "numpy.random.randint", "numpy.array", "range", "range", "range", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "range", "aq.encodePointsAQ", "range", "range", "functools.partial", "range", "min"], "function", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.aq.encodePointsAQ"], ["", "def", "learnCodebooksAQ", "(", "points", ",", "dim", ",", "M", ",", "K", ",", "pointsCount", ",", "branch", ",", "threadsCount", "=", "8", ",", "itsCount", "=", "10", ",", "codebooks", "=", "None", ")", ":", "\n", "    ", "if", "M", "<", "1", ":", "\n", "        ", "raise", "Exception", "(", "'M is not positive!'", ")", "\n", "", "threadsCount", "=", "threadsCount", "if", "threadsCount", "<=", "dim", "else", "dim", "\n", "\n", "assigns", "=", "np", ".", "zeros", "(", "(", "pointsCount", ",", "M", ")", ",", "dtype", "=", "'int32'", ")", "\n", "\n", "# random initialization of assignment variables", "\n", "# (initializations from (O)PQ should be used for better results)", "\n", "for", "m", "in", "range", "(", "M", ")", ":", "\n", "        ", "assigns", "[", ":", ",", "m", "]", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "K", ",", "pointsCount", ")", "\n", "\n", "", "data", "=", "np", ".", "ones", "(", "M", "*", "pointsCount", ",", "dtype", "=", "'float32'", ")", "\n", "indices", "=", "np", ".", "zeros", "(", "M", "*", "pointsCount", ",", "dtype", "=", "'int32'", ")", "\n", "indptr", "=", "np", ".", "array", "(", "range", "(", "0", ",", "pointsCount", "+", "1", ")", ")", "*", "M", "\n", "from", "tqdm", "import", "tqdm", "\n", "for", "it", "in", "tqdm", "(", "range", "(", "itsCount", ")", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "pointsCount", "*", "M", ")", ":", "\n", "            ", "indices", "[", "i", "]", "=", "0", "\n", "", "for", "pid", "in", "range", "(", "pointsCount", ")", ":", "\n", "            ", "for", "m", "in", "range", "(", "M", ")", ":", "\n", "                ", "indices", "[", "pid", "*", "M", "+", "m", "]", "=", "m", "*", "K", "+", "assigns", "[", "pid", ",", "m", "]", "\n", "", "", "dimChunkSize", "=", "dim", "//", "threadsCount", "\n", "pool", "=", "Pool", "(", "threadsCount", ")", "\n", "ans", "=", "pool", ".", "map", "(", "partial", "(", "solveDimensionLeastSquares", ",", "dimCount", "=", "dimChunkSize", ",", "data", "=", "data", ",", "indices", "=", "indices", ",", "indptr", "=", "indptr", ",", "trainPoints", "=", "points", ",", "codebookSize", "=", "K", ",", "M", "=", "M", ")", ",", "range", "(", "0", ",", "dim", ",", "dimChunkSize", ")", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "for", "d", "in", "range", "(", "0", ",", "dim", ",", "dimChunkSize", ")", ":", "\n", "            ", "dimCount", "=", "min", "(", "dimChunkSize", ",", "dim", "-", "d", ")", "\n", "codebooks", "[", ":", ",", ":", ",", "d", ":", "d", "+", "dimCount", "]", "=", "ans", "[", "d", "//", "dimChunkSize", "]", "[", "0", "]", "\n", "\n", "", "(", "assigns", ",", "errors", ")", "=", "encodePointsAQ", "(", "points", ",", "codebooks", ",", "branch", ")", "\n", "\n", "", "return", "codebooks", ",", "assigns", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.opq.OPQ.__init__": [[27, 37], ["pq_residual.ResidualPQ", "pq.PQ", "range"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "M", ",", "Ks", ",", "verbose", "=", "True", ",", "layer", "=", "1", ")", ":", "\n", "\n", "        ", "self", ".", "pq", "=", "ResidualPQ", "(", "[", "PQ", "(", "M", ",", "Ks", ",", "verbose", ")", "for", "_", "in", "range", "(", "layer", ")", "]", ")", "\n", "self", ".", "layer", "=", "layer", "\n", "self", ".", "M", "=", "M", "\n", "self", ".", "Ks", "=", "Ks", "\n", "self", ".", "code_dtype", "=", "self", ".", "pq", ".", "code_dtype", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "self", ".", "R", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.opq.OPQ.class_message": [[38, 41], ["opq.OPQ.pq.class_message"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.class_message"], ["", "def", "class_message", "(", "self", ")", ":", "\n", "        ", "return", "\"ORQ, RQ : [{}],  M: {}, Ks : {}, code_dtype: {}\"", ".", "format", "(", "\n", "self", ".", "pq", ".", "class_message", "(", ")", ",", "self", ".", "M", ",", "self", ".", "Ks", ",", "self", ".", "code_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.opq.OPQ.fit": [[42, 82], ["numpy.eye", "tqdm", "range", "pq_residual.ResidualPQ.compress", "numpy.linalg.svd", "range", "pq_residual.ResidualPQ", "pq_residual.ResidualPQ.fit", "pq_residual.ResidualPQ", "pq_residual.ResidualPQ.fit", "type", "iterator.close", "pq.PQ", "pq.PQ", "range", "range"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.compress", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.fit", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.fit"], ["", "def", "fit", "(", "self", ",", "vecs", ",", "iter", ")", ":", "\n", "\n", "        ", "assert", "vecs", ".", "dtype", "==", "np", ".", "float32", "\n", "assert", "vecs", ".", "ndim", "==", "2", "\n", "_", ",", "D", "=", "vecs", ".", "shape", "\n", "self", ".", "R", "=", "np", ".", "eye", "(", "D", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "rotation_iter", "=", "iter", "\n", "pq_iter", "=", "iter", "\n", "\n", "from", "tqdm", "import", "tqdm", "\n", "iterator", "=", "tqdm", "(", "range", "(", "rotation_iter", ")", ")", "if", "self", ".", "verbose", "else", "range", "(", "rotation_iter", ")", "\n", "for", "i", "in", "iterator", ":", "\n", "            ", "X", "=", "vecs", "@", "self", ".", "R", "\n", "\n", "# (a) Train codewords", "\n", "\n", "if", "i", "==", "rotation_iter", "-", "1", ":", "\n", "# stop iterator display; show the pq process bar", "\n", "                ", "if", "type", "(", "iterator", ")", "is", "tqdm", ":", "\n", "                    ", "iterator", ".", "close", "(", ")", "\n", "# In the final loop, run the full training", "\n", "", "pq_tmp", "=", "ResidualPQ", "(", "[", "PQ", "(", "self", ".", "M", ",", "self", ".", "Ks", ",", "self", ".", "verbose", ")", "for", "_", "in", "range", "(", "self", ".", "layer", ")", "]", ",", "verbose", "=", "self", ".", "verbose", ")", "\n", "pq_tmp", ".", "fit", "(", "X", ",", "iter", "=", "pq_iter", ")", "\n", "", "else", ":", "\n", "# During the training for OPQ, just run one-pass (iter=1) PQ training", "\n", "                ", "pq_tmp", "=", "ResidualPQ", "(", "[", "PQ", "(", "self", ".", "M", ",", "self", ".", "Ks", ",", "False", ")", "for", "_", "in", "range", "(", "self", ".", "layer", ")", "]", ",", "verbose", "=", "False", ")", "\n", "pq_tmp", ".", "fit", "(", "X", ",", "iter", "=", "1", ")", "\n", "\n", "# (b) Update a rotation matrix R", "\n", "", "X_", "=", "pq_tmp", ".", "compress", "(", "X", ")", "\n", "U", ",", "s", ",", "V", "=", "np", ".", "linalg", ".", "svd", "(", "vecs", ".", "T", "@", "X_", ")", "\n", "\n", "if", "i", "==", "rotation_iter", "-", "1", ":", "\n", "                ", "self", ".", "pq", "=", "pq_tmp", "\n", "break", "\n", "", "else", ":", "\n", "                ", "self", ".", "R", "=", "U", "@", "V", "\n", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.opq.OPQ.rotate": [[83, 92], ["vecs.reshape"], "methods", ["None"], ["", "def", "rotate", "(", "self", ",", "vecs", ")", ":", "\n", "\n", "        ", "assert", "vecs", ".", "dtype", "==", "np", ".", "float32", "\n", "assert", "vecs", ".", "ndim", "in", "[", "1", ",", "2", "]", "\n", "\n", "if", "vecs", ".", "ndim", "==", "2", ":", "\n", "            ", "return", "vecs", "@", "self", ".", "R", "\n", "", "elif", "vecs", ".", "ndim", "==", "1", ":", "\n", "            ", "return", "(", "vecs", ".", "reshape", "(", "1", ",", "-", "1", ")", "@", "self", ".", "R", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.opq.OPQ.encode": [[93, 96], ["opq.OPQ.pq.encode", "opq.OPQ.rotate"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.encode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.opq.OPQ.rotate"], ["", "", "def", "encode", "(", "self", ",", "vecs", ")", ":", "\n", "\n", "        ", "return", "self", ".", "pq", ".", "encode", "(", "self", ".", "rotate", "(", "vecs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.opq.OPQ.decode": [[97, 100], ["opq.OPQ.pq.decode"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.decode"], ["", "def", "decode", "(", "self", ",", "codes", ")", ":", "\n", "# Because R is a rotation matrix (R^t * R = I), R^-1 should be R^t", "\n", "        ", "return", "self", ".", "pq", ".", "decode", "(", "codes", ")", "@", "self", ".", "R", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.opq.OPQ.compress": [[101, 103], ["opq.OPQ.decode", "opq.OPQ.encode"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.decode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.encode"], ["", "def", "compress", "(", "self", ",", "vecs", ")", ":", "\n", "        ", "return", "self", ".", "decode", "(", "self", ".", "encode", "(", "vecs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pqx.PQX.__init__": [[8, 18], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "xpqs", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param M: how many sub-Quantizer\n        :param xpqs: sub-Quantizer\n        :param verbose:\n        \"\"\"", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "xpqs", "=", "xpqs", "\n", "self", ".", "M", "=", "len", "(", "xpqs", ")", "\n", "self", ".", "Ds", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pqx.PQX.class_message": [[19, 21], ["None"], "methods", ["None"], ["", "def", "class_message", "(", "self", ")", ":", "\n", "        ", "return", "\"XPQ PQ, M: {}, quantizer : {}\"", ".", "format", "(", "self", ".", "M", ",", "self", ".", "xpqs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pqx.PQX.fit": [[22, 41], ["int", "numpy.cumsum", "numpy.insert", "range", "pqx.PQX.xpqs[].fit", "range", "print"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.fit"], ["", "def", "fit", "(", "self", ",", "vecs", ",", "iter", ")", ":", "\n", "        ", "assert", "vecs", ".", "dtype", "==", "np", ".", "float32", "\n", "assert", "vecs", ".", "ndim", "==", "2", "\n", "N", ",", "D", "=", "vecs", ".", "shape", "\n", "\n", "reminder", "=", "D", "%", "self", ".", "M", "\n", "quotient", "=", "int", "(", "D", "/", "self", ".", "M", ")", "\n", "dims_width", "=", "[", "quotient", "+", "1", "if", "i", "<", "reminder", "else", "quotient", "for", "i", "in", "range", "(", "self", ".", "M", ")", "]", "\n", "self", ".", "Ds", "=", "np", ".", "cumsum", "(", "dims_width", ")", "# prefix sum", "\n", "self", ".", "Ds", "=", "np", ".", "insert", "(", "self", ".", "Ds", ",", "0", ",", "0", ")", "# insert zero at beginning", "\n", "\n", "for", "m", "in", "range", "(", "self", ".", "M", ")", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "\"#    Training the XPQ subspace: {} / {}, {} -> {}\"", ".", "format", "(", "\n", "m", ",", "self", ".", "M", ",", "self", ".", "Ds", "[", "m", "]", ",", "self", ".", "Ds", "[", "m", "+", "1", "]", ")", ")", "\n", "", "vecs_sub", "=", "vecs", "[", ":", ",", "self", ".", "Ds", "[", "m", "]", ":", "self", ".", "Ds", "[", "m", "+", "1", "]", "]", "\n", "self", ".", "xpqs", "[", "m", "]", ".", "fit", "(", "vecs_sub", ",", "iter", "=", "iter", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pqx.PQX.compress": [[42, 48], ["numpy.zeros", "range", "pqx.PQX.xpqs[].compress"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.compress"], ["", "def", "compress", "(", "self", ",", "vecs", ")", ":", "\n", "        ", "compressed", "=", "np", ".", "zeros", "(", "vecs", ".", "shape", ",", "np", ".", "float32", ")", "\n", "for", "m", "in", "range", "(", "self", ".", "M", ")", ":", "\n", "            ", "vecs_sub", "=", "vecs", "[", ":", ",", "self", ".", "Ds", "[", "m", "]", ":", "self", ".", "Ds", "[", "m", "+", "1", "]", "]", "\n", "compressed", "[", ":", ",", "self", ".", "Ds", "[", "m", "]", ":", "self", ".", "Ds", "[", "m", "+", "1", "]", "]", "=", "self", ".", "xpqs", "[", "m", "]", ".", "compress", "(", "vecs_sub", ")", "\n", "", "return", "compressed", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.ivecs_read": [[5, 9], ["numpy.fromfile", "[].copy", "np.fromfile.reshape"], "function", ["None"], ["def", "ivecs_read", "(", "fname", ")", ":", "\n", "    ", "a", "=", "np", ".", "fromfile", "(", "fname", ",", "dtype", "=", "'int32'", ")", "\n", "d", "=", "a", "[", "0", "]", "\n", "return", "a", ".", "reshape", "(", "-", "1", ",", "d", "+", "1", ")", "[", ":", ",", "1", ":", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.fvecs_read": [[11, 13], ["ivecs_read().view", "vecs_io.ivecs_read"], "function", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.ivecs_read"], ["", "def", "fvecs_read", "(", "fname", ")", ":", "\n", "    ", "return", "ivecs_read", "(", "fname", ")", ".", "view", "(", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.bvecs_read": [[35, 37], ["vecs_io.mmap_bvecs"], "function", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.mmap_bvecs"], ["", "def", "bvecs_read", "(", "filename", ")", ":", "\n", "    ", "return", "mmap_bvecs", "(", "fname", "=", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.mmap_fvecs": [[23, 27], ["numpy.memmap", "np.memmap.view().reshape", "np.memmap.view"], "function", ["None"], ["", "def", "mmap_fvecs", "(", "fname", ")", ":", "\n", "    ", "x", "=", "np", ".", "memmap", "(", "fname", ",", "dtype", "=", "'int32'", ",", "mode", "=", "'r'", ")", "\n", "d", "=", "x", "[", "0", "]", "\n", "return", "x", ".", "view", "(", "'float32'", ")", ".", "reshape", "(", "-", "1", ",", "d", "+", "1", ")", "[", ":", ",", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.mmap_bvecs": [[29, 33], ["numpy.memmap", "x[].view", "np.memmap.reshape"], "function", ["None"], ["", "def", "mmap_bvecs", "(", "fname", ")", ":", "\n", "    ", "x", "=", "np", ".", "memmap", "(", "fname", ",", "dtype", "=", "'uint8'", ",", "mode", "=", "'r'", ")", "\n", "d", "=", "x", "[", ":", "4", "]", ".", "view", "(", "'int32'", ")", "[", "0", "]", "\n", "return", "x", ".", "reshape", "(", "-", "1", ",", "d", "+", "4", ")", "[", ":", ",", "4", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.fvecs_writer": [[39, 48], ["open", "open.close", "len", "open.write", "open.write", "struct.pack", "struct.pack", "len", "len"], "function", ["None"], ["", "def", "fvecs_writer", "(", "filename", ",", "vecs", ")", ":", "\n", "    ", "f", "=", "open", "(", "filename", ",", "\"ab\"", ")", "\n", "dimension", "=", "[", "len", "(", "vecs", "[", "0", "]", ")", "]", "\n", "\n", "for", "x", "in", "vecs", ":", "\n", "        ", "f", ".", "write", "(", "struct", ".", "pack", "(", "'i'", "*", "len", "(", "dimension", ")", ",", "*", "dimension", ")", ")", "\n", "f", ".", "write", "(", "struct", ".", "pack", "(", "'f'", "*", "len", "(", "x", ")", ",", "*", "x", ")", ")", "\n", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.ivecs_writer": [[50, 59], ["open", "open.close", "len", "open.write", "open.write", "struct.pack", "struct.pack", "len", "len"], "function", ["None"], ["", "def", "ivecs_writer", "(", "filename", ",", "vecs", ")", ":", "\n", "    ", "f", "=", "open", "(", "filename", ",", "\"ab\"", ")", "\n", "dimension", "=", "[", "len", "(", "vecs", "[", "0", "]", ")", "]", "\n", "\n", "for", "x", "in", "vecs", ":", "\n", "        ", "f", ".", "write", "(", "struct", ".", "pack", "(", "'i'", "*", "len", "(", "dimension", ")", ",", "*", "dimension", ")", ")", "\n", "f", ".", "write", "(", "struct", ".", "pack", "(", "'i'", "*", "len", "(", "x", ")", ",", "*", "x", ")", ")", "\n", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.loader": [[61, 99], ["print", "vecs_io.fvecs_read", "vecs_io.fvecs_read", "vecs_io.ivecs_read", "vecs_io.fvecs_read", "bvecs_read().astype", "bvecs_read().astype", "vecs_io.bvecs_read", "vecs_io.bvecs_read", "vecs_io.bvecs_read"], "function", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.fvecs_read", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.fvecs_read", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.ivecs_read", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.fvecs_read", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.bvecs_read", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.bvecs_read", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.bvecs_read"], ["", "def", "loader", "(", "data_set", "=", "'audio'", ",", "top_k", "=", "20", ",", "ground_metric", "=", "'euclid'", ",", "folder", "=", "'../data/'", ",", "data_type", "=", "'fvecs'", ")", ":", "\n", "    ", "\"\"\"\n    :param data_set: data set you wanna load , audio, sift1m, ..\n    :param top_k: how many nearest neighbor in ground truth file\n    :param ground_metric:\n    :param folder:\n    :return: X, T, Q, G\n    \"\"\"", "\n", "folder_path", "=", "folder", "+", "data_set", "\n", "base_file", "=", "folder_path", "+", "'/%s_base.%s'", "%", "(", "data_set", ",", "data_type", ")", "\n", "train_file", "=", "folder_path", "+", "'/%s_learn.%s'", "%", "(", "data_set", ",", "data_type", ")", "\n", "query_file", "=", "folder_path", "+", "'/%s_query.%s'", "%", "(", "data_set", ",", "data_type", ")", "\n", "ground_truth", "=", "folder_path", "+", "'/%s_%s_%s_groundtruth.ivecs'", "%", "(", "top_k", ",", "data_set", ",", "ground_metric", ")", "\n", "\n", "print", "(", "\"# load the base data {}, \\n# load the queries {}, \\n# load the ground truth {}\"", ".", "format", "(", "base_file", ",", "query_file", ",", "\n", "ground_truth", ")", ")", "\n", "if", "data_type", "==", "'fvecs'", ":", "\n", "        ", "X", "=", "fvecs_read", "(", "base_file", ")", "\n", "Q", "=", "fvecs_read", "(", "query_file", ")", "\n", "try", ":", "\n", "            ", "T", "=", "fvecs_read", "(", "train_file", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "T", "=", "None", "\n", "", "", "elif", "data_type", "==", "'bvecs'", ":", "\n", "        ", "X", "=", "bvecs_read", "(", "base_file", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "Q", "=", "bvecs_read", "(", "query_file", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "try", ":", "\n", "            ", "T", "=", "bvecs_read", "(", "train_file", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "T", "=", "None", "\n", "", "", "else", ":", "\n", "        ", "assert", "False", "\n", "", "try", ":", "\n", "        ", "G", "=", "ivecs_read", "(", "ground_truth", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "        ", "G", "=", "None", "\n", "", "return", "X", ",", "T", ",", "Q", ",", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq_residual.ResidualPQ.__init__": [[7, 18], ["len", "max", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pqs", "=", "None", ",", "verbose", "=", "True", ")", ":", "\n", "\n", "        ", "assert", "len", "(", "pqs", ")", ">", "0", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "deep", "=", "len", "(", "pqs", ")", "\n", "self", ".", "code_dtype", "=", "pqs", "[", "0", "]", ".", "code_dtype", "\n", "self", ".", "M", "=", "max", "(", "[", "pq", ".", "M", "for", "pq", "in", "pqs", "]", ")", "\n", "self", ".", "pqs", "=", "pqs", "\n", "\n", "for", "pq", "in", "self", ".", "pqs", ":", "\n", "            ", "assert", "pq", ".", "code_dtype", "==", "self", ".", "code_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq_residual.ResidualPQ.class_message": [[19, 24], ["enumerate", "pq.class_message"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.class_message"], ["", "", "def", "class_message", "(", "self", ")", ":", "\n", "        ", "messages", "=", "\"\"", "\n", "for", "i", ",", "pq", "in", "enumerate", "(", "self", ".", "pqs", ")", ":", "\n", "            ", "messages", "+=", "pq", ".", "class_message", "(", ")", "\n", "", "return", "messages", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq_residual.ResidualPQ.fit": [[25, 77], ["np.empty", "enumerate", "np.empty", "open", "pq.fit", "pq.compress", "open.close", "pq.compress", "np.linalg.norm", "print", "pq.codewords.tofile", "open.flush", "open", "open", "str", "np.mean", "np.max", "np.min", "np.linalg.norm().tofile", "np.linalg.norm().tofile", "str", "str", "np.linalg.norm", "np.linalg.norm", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.fit", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.compress", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.compress"], ["", "def", "fit", "(", "self", ",", "T", ",", "iter", ",", "save_codebook", "=", "False", ",", "save_decoded", "=", "[", "]", ",", "save_residue_norms", "=", "[", "]", ",", "save_results_T", "=", "False", ",", "dataset_name", "=", "None", ",", "save_dir", "=", "None", ",", "D", "=", "None", ")", ":", "\n", "        ", "assert", "T", ".", "dtype", "==", "np", ".", "float32", "\n", "assert", "T", ".", "ndim", "==", "2", "\n", "\n", "if", "save_dir", "is", "None", ":", "\n", "            ", "save_dir", "=", "'./results'", "\n", "\n", "", "vecs", "=", "np", ".", "empty", "(", "shape", "=", "T", ".", "shape", ",", "dtype", "=", "T", ".", "dtype", ")", "\n", "vecs", "[", ":", ",", ":", "]", "=", "T", "[", ":", ",", ":", "]", "\n", "if", "D", "is", "not", "None", ":", "\n", "            ", "vecs_d", "=", "np", ".", "empty", "(", "shape", "=", "D", ".", "shape", ",", "dtype", "=", "D", ".", "dtype", ")", "\n", "vecs_d", "[", ":", ",", ":", "]", "=", "D", "[", ":", ",", ":", "]", "\n", "", "if", "save_codebook", ":", "\n", "            ", "codebook_f", "=", "open", "(", "save_dir", "+", "'/'", "+", "dataset_name", "+", "'_rq_'", "+", "str", "(", "self", ".", "deep", ")", "+", "'_'", "+", "str", "(", "self", ".", "pqs", "[", "0", "]", ".", "Ks", ")", "+", "'_codebook'", ",", "'wb'", ")", "\n", "\n", "", "for", "layer", ",", "pq", "in", "enumerate", "(", "self", ".", "pqs", ")", ":", "\n", "            ", "pq", ".", "fit", "(", "vecs", ",", "iter", ")", "\n", "compressed", "=", "pq", ".", "compress", "(", "vecs", ")", "\n", "vecs", "=", "vecs", "-", "compressed", "\n", "del", "compressed", "\n", "\n", "if", "D", "is", "not", "None", ":", "\n", "                ", "compressed_d", "=", "pq", ".", "compress", "(", "vecs_d", ")", "\n", "vecs_d", "-=", "compressed_d", "\n", "\n", "", "if", "self", ".", "verbose", ":", "\n", "                ", "norms", "=", "np", ".", "linalg", ".", "norm", "(", "vecs", ",", "axis", "=", "1", ")", "\n", "print", "(", "\"# layer: {},  residual average norm : {} max norm: {} min norm: {}\"", "\n", ".", "format", "(", "layer", ",", "np", ".", "mean", "(", "norms", ")", ",", "np", ".", "max", "(", "norms", ")", ",", "np", ".", "min", "(", "norms", ")", ")", ")", "\n", "\n", "", "if", "(", "layer", "+", "1", ")", "in", "save_residue_norms", ":", "\n", "                ", "with", "open", "(", "save_dir", "+", "'/'", "+", "dataset_name", "+", "'_rq_'", "+", "str", "(", "layer", "+", "1", ")", "+", "'_'", "+", "str", "(", "self", ".", "pqs", "[", "0", "]", ".", "Ks", ")", "+", "'_residue_norms'", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "if", "save_results_T", ":", "\n", "                        ", "np", ".", "linalg", ".", "norm", "(", "vecs", ",", "axis", "=", "1", ")", ".", "tofile", "(", "f", ")", "\n", "", "if", "D", "is", "not", "None", ":", "\n", "                        ", "np", ".", "linalg", ".", "norm", "(", "vecs_d", ",", "axis", "=", "1", ")", ".", "tofile", "(", "f", ")", "\n", "\n", "", "", "", "if", "(", "layer", "+", "1", ")", "in", "save_decoded", ":", "\n", "                ", "with", "open", "(", "save_dir", "+", "'/'", "+", "dataset_name", "+", "'_rq_'", "+", "str", "(", "layer", "+", "1", ")", "+", "'_'", "+", "str", "(", "self", ".", "pqs", "[", "0", "]", ".", "Ks", ")", "+", "'_decoded'", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "if", "save_results_T", ":", "\n", "                        ", "(", "T", "-", "vecs", ")", ".", "tofile", "(", "f", ")", "\n", "", "if", "D", "is", "not", "None", ":", "\n", "                        ", "(", "D", "-", "vecs_d", ")", ".", "tofile", "(", "f", ")", "\n", "\n", "", "", "", "if", "save_codebook", ":", "\n", "                ", "pq", ".", "codewords", ".", "tofile", "(", "codebook_f", ")", "\n", "codebook_f", ".", "flush", "(", ")", "\n", "\n", "", "", "if", "save_codebook", ":", "\n", "            ", "codebook_f", ".", "close", "(", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq_residual.ResidualPQ.encode": [[78, 88], ["np.zeros", "enumerate", "pq.encode", "len", "pq.decode"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.encode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.decode"], ["", "def", "encode", "(", "self", ",", "vecs", ")", ":", "\n", "        ", "\"\"\"\n        :param vecs:\n        :return: (N * deep * M)\n        \"\"\"", "\n", "codes", "=", "np", ".", "zeros", "(", "(", "len", "(", "vecs", ")", ",", "self", ".", "deep", ",", "self", ".", "M", ")", ",", "dtype", "=", "self", ".", "code_dtype", ")", "# N * deep * M", "\n", "for", "i", ",", "pq", "in", "enumerate", "(", "self", ".", "pqs", ")", ":", "\n", "            ", "codes", "[", ":", ",", "i", ",", ":", "pq", ".", "M", "]", "=", "pq", ".", "encode", "(", "vecs", ")", "\n", "vecs", "=", "vecs", "-", "pq", ".", "decode", "(", "codes", "[", ":", ",", "i", ",", ":", "pq", ".", "M", "]", ")", "\n", "", "return", "codes", "# N * deep * M", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq_residual.ResidualPQ.decode": [[89, 92], ["np.sum", "pq.decode", "enumerate"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.decode"], ["", "def", "decode", "(", "self", ",", "codes", ")", ":", "\n", "        ", "vecss", "=", "[", "pq", ".", "decode", "(", "codes", "[", ":", ",", "i", ",", ":", "pq", ".", "M", "]", ")", "for", "i", ",", "pq", "in", "enumerate", "(", "self", ".", "pqs", ")", "]", "\n", "return", "np", ".", "sum", "(", "vecss", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq_residual.ResidualPQ.compress": [[93, 108], ["np.shape", "np.zeros", "np.zeros", "enumerate", "pq.compress"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.compress"], ["", "def", "compress", "(", "self", ",", "X", ")", ":", "\n", "        ", "N", ",", "D", "=", "np", ".", "shape", "(", "X", ")", "\n", "\n", "sum_residual", "=", "np", ".", "zeros", "(", "(", "N", ",", "D", ")", ",", "dtype", "=", "X", ".", "dtype", ")", "\n", "\n", "vecs", "=", "np", ".", "zeros", "(", "(", "N", ",", "D", ")", ",", "dtype", "=", "X", ".", "dtype", ")", "\n", "vecs", "[", ":", ",", ":", "]", "=", "X", "[", ":", ",", ":", "]", "\n", "\n", "for", "i", ",", "pq", "in", "enumerate", "(", "self", ".", "pqs", ")", ":", "\n", "            ", "compressed", "=", "pq", ".", "compress", "(", "vecs", ")", "\n", "vecs", "[", ":", ",", ":", "]", "=", "vecs", "-", "compressed", "\n", "sum_residual", "[", ":", ",", ":", "]", "=", "sum_residual", "+", "compressed", "\n", "del", "compressed", "\n", "\n", "", "return", "sum_residual", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq_norm.NormPQ.__init__": [[8, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_percentile", ",", "quantize", ",", "true_norm", "=", "False", ",", "verbose", "=", "True", ",", "method", "=", "'kmeans'", ",", "recover", "=", "'quantize'", ")", ":", "\n", "\n", "        ", "self", ".", "M", "=", "2", "\n", "self", ".", "n_percentile", ",", "self", ".", "true_norm", ",", "self", ".", "verbose", "=", "n_percentile", ",", "true_norm", ",", "verbose", "\n", "self", ".", "method", "=", "method", "\n", "self", ".", "recover", "=", "recover", "\n", "self", ".", "code_dtype", "=", "np", ".", "uint8", "if", "n_percentile", "<=", "2", "**", "8", "else", "(", "np", ".", "uint16", "if", "n_percentile", "<=", "2", "**", "16", "else", "np", ".", "uint32", ")", "\n", "\n", "self", ".", "percentiles", "=", "None", "\n", "self", ".", "quantize", "=", "quantize", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq_norm.NormPQ.class_message": [[20, 22], ["pq_norm.NormPQ.quantize.class_message"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.class_message"], ["", "def", "class_message", "(", "self", ")", ":", "\n", "        ", "return", "\"NormPQ, percentiles: {}, quantize: {}\"", ".", "format", "(", "self", ".", "n_percentile", ",", "self", ".", "quantize", ".", "class_message", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq_norm.NormPQ.fit": [[23, 71], ["transformer.normalize", "pq_norm.NormPQ.quantize.fit", "pq_norm.NormPQ.quantize.compress", "kmeans2", "np.linalg.norm", "warnings.warn", "warnings.warn", "np.argsort", "int", "kmeans2", "kmeans2", "np.concatenate", "np.percentile", "np.array", "len", "np.linspace", "np.array", "np.linspace", "np.min", "np.max", "np.array", "np.min", "range", "np.min", "np.max", "np.min"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.transformer.normalize", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.fit", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.compress"], ["", "def", "fit", "(", "self", ",", "vecs", ",", "iter", ")", ":", "\n", "        ", "assert", "vecs", ".", "dtype", "==", "np", ".", "float32", "\n", "assert", "vecs", ".", "ndim", "==", "2", "\n", "N", ",", "D", "=", "vecs", ".", "shape", "\n", "assert", "self", ".", "n_percentile", "<", "N", ",", "\"the number of norm intervals should be more than Ks\"", "\n", "\n", "norms", ",", "normalized_vecs", "=", "normalize", "(", "vecs", ")", "\n", "self", ".", "quantize", ".", "fit", "(", "normalized_vecs", ",", "iter", ")", "\n", "\n", "if", "self", ".", "recover", "==", "'quantize'", ":", "\n", "            ", "compressed_vecs", "=", "self", ".", "quantize", ".", "compress", "(", "normalized_vecs", ")", "\n", "norms", "=", "norms", "/", "np", ".", "linalg", ".", "norm", "(", "compressed_vecs", ",", "axis", "=", "1", ")", "\n", "", "elif", "self", ".", "recover", "==", "'normalization'", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"Recover norm by normalization.\"", ")", "\n", "assert", "False", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"No normalization guarantee.\"", ")", "\n", "assert", "False", "\n", "\n", "", "if", "self", ".", "method", "==", "'kmeans'", ":", "\n", "            ", "self", ".", "percentiles", ",", "_", "=", "kmeans2", "(", "norms", "[", ":", "]", ",", "self", ".", "n_percentile", ",", "iter", "=", "iter", ",", "minit", "=", "'points'", ")", "\n", "", "elif", "self", ".", "method", "==", "'kmeans_partial'", ":", "\n", "            ", "indexes", "=", "np", ".", "argsort", "(", "norms", ")", "\n", "count", "=", "int", "(", "len", "(", "norms", ")", "*", "0.7", ")", "\n", "centers_small_norms", ",", "_", "=", "kmeans2", "(", "norms", "[", "indexes", "[", ":", "count", "]", "]", ",", "self", ".", "n_percentile", "//", "2", ",", "iter", "=", "iter", ",", "minit", "=", "'points'", ")", "\n", "centers_big_norms", ",", "_", "=", "kmeans2", "(", "norms", "[", "indexes", "[", "count", ":", "]", "]", ",", "self", ".", "n_percentile", "//", "2", ",", "iter", "=", "iter", ",", "minit", "=", "'points'", ")", "\n", "self", ".", "percentiles", "=", "np", ".", "concatenate", "(", "(", "centers_small_norms", ",", "centers_big_norms", ")", ")", "\n", "\n", "", "elif", "self", ".", "method", "==", "'percentile'", ":", "\n", "            ", "self", ".", "percentiles", "=", "np", ".", "percentile", "(", "norms", ",", "np", ".", "linspace", "(", "0", ",", "100", ",", "self", ".", "n_percentile", "+", "1", ")", "[", ":", "]", ")", "\n", "self", ".", "percentiles", "=", "np", ".", "array", "(", "self", ".", "percentiles", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "elif", "self", ".", "method", "==", "'uniform'", ":", "\n", "            ", "self", ".", "percentiles", "=", "np", ".", "linspace", "(", "np", ".", "min", "(", "norms", ")", ",", "np", ".", "max", "(", "norms", ")", ",", "self", ".", "n_percentile", "+", "1", ")", "\n", "self", ".", "percentiles", "=", "np", ".", "array", "(", "self", ".", "percentiles", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "elif", "self", ".", "method", "==", "'exponential'", ":", "\n", "            ", "q", "=", "0.98", "\n", "a", "=", "(", "1", "-", "q", ")", "/", "(", "1", "-", "q", "**", "self", ".", "n_percentile", ")", "# make sure that sum of a*q**i is 1", "\n", "self", ".", "percentiles", "=", "[", "\n", "np", ".", "min", "(", "norms", ")", "if", "i", "==", "0", "else", "\n", "np", ".", "min", "(", "norms", ")", "+", "a", "*", "(", "1", "-", "q", "**", "i", ")", "/", "(", "1", "-", "q", ")", "*", "(", "np", ".", "max", "(", "norms", ")", "-", "np", ".", "min", "(", "norms", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_percentile", "+", "1", ")", "\n", "]", "\n", "\n", "self", ".", "percentiles", "=", "np", ".", "array", "(", "self", ".", "percentiles", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq_norm.NormPQ.encode_norm": [[72, 80], ["vq", "np.clip", "np.argmax"], "methods", ["None"], ["", "def", "encode_norm", "(", "self", ",", "norms", ")", ":", "\n", "\n", "        ", "if", "self", ".", "method", "==", "'kmeans'", "or", "self", ".", "method", "==", "'kmeans_partial'", ":", "\n", "            ", "norm_index", ",", "_", "=", "vq", "(", "norms", "[", ":", "]", ",", "self", ".", "percentiles", ")", "\n", "", "else", ":", "\n", "            ", "norm_index", "=", "[", "np", ".", "argmax", "(", "self", ".", "percentiles", "[", "1", ":", "]", ">", "n", ")", "for", "n", "in", "norms", "]", "\n", "norm_index", "=", "np", ".", "clip", "(", "norm_index", ",", "1", ",", "self", ".", "n_percentile", ")", "\n", "", "return", "norm_index", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq_norm.NormPQ.decode_norm": [[81, 86], ["None"], "methods", ["None"], ["", "def", "decode_norm", "(", "self", ",", "norm_index", ")", ":", "\n", "        ", "if", "self", ".", "method", "==", "'kmeans'", "or", "self", ".", "method", "==", "'kmeans_partial'", ":", "\n", "            ", "return", "self", ".", "percentiles", "[", "norm_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "(", "self", ".", "percentiles", "[", "norm_index", "]", "+", "self", ".", "percentiles", "[", "norm_index", "-", "1", "]", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq_norm.NormPQ.compress": [[87, 110], ["transformer.normalize", "pq_norm.NormPQ.quantize.compress", "pq_norm.NormPQ.decode_norm", "warnings.warn", "np.linalg.norm", "warnings.warn", "transformer.normalize", "warnings.warn", "pq_norm.NormPQ.encode_norm", "pq_norm.NormPQ.transpose"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.transformer.normalize", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.compress", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq_norm.NormPQ.decode_norm", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.transformer.normalize", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.pq_norm.NormPQ.encode_norm"], ["", "", "def", "compress", "(", "self", ",", "vecs", ")", ":", "\n", "        ", "norms", ",", "normalized_vecs", "=", "normalize", "(", "vecs", ")", "\n", "\n", "compressed_vecs", "=", "self", ".", "quantize", ".", "compress", "(", "normalized_vecs", ")", "\n", "del", "normalized_vecs", "\n", "\n", "if", "self", ".", "recover", "==", "'quantize'", ":", "\n", "            ", "norms", "=", "norms", "/", "np", ".", "linalg", ".", "norm", "(", "compressed_vecs", ",", "axis", "=", "1", ")", "\n", "", "elif", "self", ".", "recover", "==", "'normalization'", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"Recover norm by normalization.\"", ")", "\n", "_", ",", "compressed_vecs", "=", "normalize", "(", "compressed_vecs", ")", "\n", "assert", "False", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"No normalization guarantee.\"", ")", "\n", "assert", "False", "\n", "\n", "", "if", "not", "self", ".", "true_norm", ":", "\n", "            ", "norms", "=", "self", ".", "decode_norm", "(", "self", ".", "encode_norm", "(", "norms", ")", ")", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"Using true norm to compress vector.\"", ")", "\n", "assert", "False", "\n", "\n", "", "return", "(", "compressed_vecs", ".", "transpose", "(", ")", "*", "norms", ")", ".", "transpose", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.run_ground_truth.parse_args": [[5, 14], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.run_ground_truth.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "# override default parameters with command line parameters", "\n", "    ", "import", "argparse", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Process input method and parameters.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "help", "=", "'choose data set name'", ")", "\n", "parser", ".", "add_argument", "(", "'--topk'", ",", "type", "=", "int", ",", "help", "=", "'required topk of ground truth'", ")", "\n", "parser", ".", "add_argument", "(", "'--metric'", ",", "type", "=", "str", ",", "help", "=", "'metric of ground truth'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", ".", "dataset", ",", "args", ".", "topk", ",", "args", ".", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.run_ground_truth.topk": [[16, 33], ["print", "vecs_io.fvecs_read", "print", "vecs_io.fvecs_read", "print", "sorter.Sorter", "vecs_io.ivecs_writer", "np.array"], "function", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.fvecs_read", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.fvecs_read", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.vecs_io.ivecs_writer"], ["", "def", "topk", "(", "data_set", ",", "top_ks", ",", "ground_metric", ")", ":", "\n", "    ", "folder", "=", "'data/'", "\n", "folder_path", "=", "folder", "+", "data_set", "\n", "base_file", "=", "folder_path", "+", "'/%s_base.fvecs'", "%", "data_set", "\n", "query_file", "=", "folder_path", "+", "'/%s_query.fvecs'", "%", "data_set", "\n", "\n", "print", "(", "\"# loading the base data {}, \\n\"", ".", "format", "(", "base_file", ")", ")", "\n", "X", "=", "fvecs_read", "(", "base_file", ")", "\n", "print", "(", "\"# loading the queries data {}, \\n\"", ".", "format", "(", "query_file", ")", ")", "\n", "Q", "=", "fvecs_read", "(", "query_file", ")", "\n", "print", "(", "\"# sorting\"", ")", "\n", "knn", "=", "Sorter", "(", "compressed", "=", "X", ",", "Q", "=", "Q", "[", "0", ":", "1000", "]", ",", "X", "=", "X", ",", "metric", "=", "ground_metric", ")", ".", "topK", "\n", "\n", "for", "top_k", "in", "top_ks", ":", "\n", "        ", "ground_truth", "=", "folder_path", "+", "'/%s_%s_%s_groundtruth.ivecs'", "%", "(", "top_k", ",", "data_set", ",", "ground_metric", ")", "\n", "ivecs_writer", "(", "ground_truth", ",", "np", ".", "array", "(", "knn", "[", ":", ",", ":", "top_k", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.__init__": [[7, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "bit", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "self", ".", "projector", "=", "None", "\n", "self", ".", "L", "=", "bit", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.class_message": [[11, 13], ["None"], "methods", ["None"], ["", "def", "class_message", "(", "self", ")", ":", "\n", "        ", "return", "\"RandomProjection , bit length: {}\"", ".", "format", "(", "self", ".", "L", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.fit": [[14, 23], ["numpy.random.normal", "range", "numpy.random.normal"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "vecs", ",", "niter", ",", "seed", ")", ":", "\n", "        ", "assert", "vecs", ".", "dtype", "==", "np", ".", "float32", "\n", "assert", "vecs", ".", "ndim", "==", "2", "\n", "N", ",", "D", "=", "vecs", ".", "shape", "\n", "\n", "self", ".", "projector", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "D", ",", "self", ".", "L", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "L", ")", ":", "\n", "            ", "self", ".", "projector", "[", ":", ",", "i", "]", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "D", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.encode": [[24, 33], ["None"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "vecs", ")", ":", "\n", "        ", "assert", "vecs", ".", "dtype", "==", "np", ".", "float32", "\n", "assert", "vecs", ".", "ndim", "==", "2", "\n", "N", ",", "D", "=", "vecs", ".", "shape", "\n", "\n", "codes", "=", "vecs", "@", "self", ".", "projector", "# (N, D) (D, L) -> (N, L)", "\n", "assert", "codes", ".", "shape", "==", "(", "N", ",", "self", ".", "L", ")", "\n", "\n", "return", "codes", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.decode": [[34, 36], ["None"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "codes", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.compress": [[37, 39], ["hash.RandomProjection.encode"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.encode"], ["", "def", "compress", "(", "self", ",", "vecs", ")", ":", "\n", "        ", "return", "self", ".", "encode", "(", "vecs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.transformer.normalize": [[7, 12], ["numpy.linalg.norm", "numpy.divide", "numpy.zeros_like"], "function", ["None"], ["def", "normalize", "(", "vecs", ")", ":", "\n", "    ", "norms", "=", "np", ".", "linalg", ".", "norm", "(", "vecs", ",", "axis", "=", "1", ")", "\n", "norms_matrix", "=", "norms", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "normalized_vecs", "=", "np", ".", "divide", "(", "vecs", ",", "norms_matrix", ",", "out", "=", "np", ".", "zeros_like", "(", "vecs", ")", ",", "where", "=", "norms_matrix", "!=", "0", ")", "# divide by zero problem", "\n", "return", "norms", ",", "normalized_vecs", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.transformer.zero_mean": [[14, 19], ["X.mean"], "function", ["None"], ["", "def", "zero_mean", "(", "X", ",", "Q", ")", ":", "\n", "    ", "mean", "=", "X", ".", "mean", "(", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "X", "=", "X", "-", "mean", "\n", "Q", "=", "Q", "-", "mean", "\n", "return", "X", ",", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.transformer.random_rotate": [[21, 27], ["scipy.stats.ortho_group.rvs", "numpy.array", "np.array.dot().transpose", "np.array.dot().transpose", "len", "np.array.dot", "np.array.dot", "R.dot().transpose.transpose", "R.dot().transpose.transpose"], "function", ["None"], ["", "def", "random_rotate", "(", "X", ",", "Q", ")", ":", "\n", "    ", "R", "=", "ortho_group", ".", "rvs", "(", "dim", "=", "len", "(", "X", "[", "0", "]", ")", ")", "\n", "R", "=", "np", ".", "array", "(", "R", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "X", "=", "R", ".", "dot", "(", "X", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "Q", "=", "R", ".", "dot", "(", "Q", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "return", "X", ",", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.transformer.scale": [[29, 34], ["numpy.max", "numpy.linalg.norm"], "function", ["None"], ["", "def", "scale", "(", "X", ",", "Q", ")", ":", "\n", "    ", "scale", "=", "np", ".", "max", "(", "np", ".", "linalg", ".", "norm", "(", "X", ",", "axis", "=", "1", ")", ")", "\n", "X", "/=", "scale", "\n", "Q", "/=", "scale", "\n", "return", "X", ",", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.transformer.one_half_coeff_scale": [[36, 41], ["numpy.mean", "numpy.absolute"], "function", ["None"], ["", "def", "one_half_coeff_scale", "(", "X", ",", "Q", ")", ":", "\n", "    ", "mean", "=", "np", ".", "mean", "(", "np", ".", "absolute", "(", "X", ")", ")", "\n", "X", "/=", "(", "mean", "*", "2", ")", ";", "\n", "Q", "/=", "(", "mean", "*", "2", ")", ";", "\n", "return", "X", ",", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.transformer.coeff_scale": [[42, 47], ["numpy.mean", "numpy.absolute"], "function", ["None"], ["", "def", "coeff_scale", "(", "X", ",", "Q", ",", "scale", ")", ":", "\n", "    ", "mean", "=", "np", ".", "mean", "(", "np", ".", "absolute", "(", "X", ")", ")", "\n", "X", "/=", "(", "mean", "/", "scale", ")", ";", "\n", "Q", "/=", "(", "mean", "/", "scale", ")", ";", "\n", "return", "X", ",", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.transformer.inverse_d_coeff_scale": [[48, 53], ["numpy.mean", "numpy.absolute"], "function", ["None"], ["", "def", "inverse_d_coeff_scale", "(", "X", ",", "Q", ")", ":", "\n", "    ", "mean", "=", "np", ".", "mean", "(", "np", ".", "absolute", "(", "X", ")", ")", "\n", "X", "/=", "(", "mean", "*", "X", ".", "shape", "[", "1", "]", ")", ";", "\n", "Q", "/=", "(", "mean", "*", "X", ".", "shape", "[", "1", "]", ")", "\n", "return", "X", ",", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.transformer.norm_range": [[54, 72], ["numba.jit", "float", "numpy.amax", "numpy.amin", "numpy.empty", "range", "int"], "function", ["None"], ["", "@", "nb", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "norm_range", "(", "norm_sqrs", ",", "num_intervals", ")", ":", "\n", "    ", "num_intervals_minus_1", "=", "float", "(", "num_intervals", "-", "1", ")", "\n", "\n", "norm_sqr_max", "=", "np", ".", "amax", "(", "norm_sqrs", ")", "\n", "norm_sqr_min", "=", "np", ".", "amin", "(", "norm_sqrs", ")", "\n", "\n", "means", "=", "np", ".", "empty", "(", "(", "norm_sqrs", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "norm_sqrs", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "bucket", "=", "int", "(", "(", "norm_sqrs", "[", "i", "]", "-", "norm_sqr_min", ")", "/", "(", "norm_sqr_max", "-", "norm_sqr_min", ")", "*", "num_intervals_minus_1", ")", "\n", "left", "=", "bucket", "/", "num_intervals_minus_1", "*", "(", "norm_sqr_max", "-", "norm_sqr_min", ")", "+", "norm_sqr_min", "\n", "right", "=", "(", "bucket", "+", "1", ")", "/", "num_intervals_minus_1", "*", "(", "norm_sqr_max", "-", "norm_sqr_min", ")", "+", "norm_sqr_min", "\n", "mean", "=", "(", "left", "+", "right", ")", "/", "2.0", "\n", "\n", "means", "[", "i", "]", "=", "mean", "\n", "\n", "", "return", "means", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.transformer.norm_range_non_uniform": [[73, 76], ["scipy.cluster.vq.kmeans2"], "function", ["None"], ["", "def", "norm_range_non_uniform", "(", "norm_sqrs", ")", ":", "\n", "    ", "code_book", ",", "code", "=", "kmeans2", "(", "norm_sqrs", "[", ":", ",", "np", ".", "newaxis", "]", ",", "256", ",", "iter", "=", "20", ",", "minit", "=", "'points'", ")", "\n", "return", "code_book", "[", "code", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.transformer.e2m_transform": [[77, 87], ["numpy.max", "numpy.zeros", "numpy.zeros", "numpy.append", "numpy.append", "numpy.linalg.norm", "len", "len", "numpy.linalg.norm"], "function", ["None"], ["", "def", "e2m_transform", "(", "X", ",", "Q", ")", ":", "\n", "    ", "M", "=", "np", ".", "max", "(", "np", ".", "linalg", ".", "norm", "(", "X", ",", "axis", "=", "1", ")", ")", "\n", "X_plus", "=", "np", ".", "zeros", "(", "(", "len", "(", "X", ")", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "Q_plus", "=", "np", ".", "zeros", "(", "(", "len", "(", "Q", ")", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "X_plus", "[", ":", ",", "0", "]", "=", "M", "-", "np", ".", "linalg", ".", "norm", "(", "X", ",", "axis", "=", "1", ")", "**", "2", "\n", "Q_plus", "[", ":", ",", "0", "]", "=", "0.5", "\n", "X", "=", "np", ".", "append", "(", "X", ",", "X_plus", ",", "axis", "=", "1", ")", "\n", "Q", "=", "np", ".", "append", "(", "Q", ",", "Q_plus", ",", "axis", "=", "1", ")", "\n", "return", "X", ",", "Q", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.transformer.e2m_mahalanobis": [[89, 93], ["numpy.full", "numpy.append", "numpy.dot", "float", "len", "np.append.transpose", "len"], "function", ["None"], ["", "def", "e2m_mahalanobis", "(", "X", ")", ":", "\n", "    ", "X_plus", "=", "np", ".", "full", "(", "(", "len", "(", "X", ")", ",", "1", ")", ",", "fill_value", "=", "-", "0.5", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "X", "=", "np", ".", "append", "(", "X", ",", "X_plus", ",", "axis", "=", "1", ")", "\n", "return", "np", ".", "dot", "(", "X", ".", "transpose", "(", ")", ",", "X", ")", "/", "float", "(", "len", "(", "X", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.Sorter.__init__": [[91, 96], ["sorter.parallel_sort"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.parallel_sort"], ["    ", "def", "__init__", "(", "self", ",", "compressed", ",", "Q", ",", "X", ",", "metric", ",", "norms_sqr", "=", "None", ")", ":", "\n", "        ", "self", ".", "Q", "=", "Q", "\n", "self", ".", "X", "=", "X", "\n", "\n", "self", ".", "topK", "=", "parallel_sort", "(", "metric", ",", "compressed", ",", "Q", ",", "X", ",", "norms_sqr", "=", "norms_sqr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.Sorter.recall": [[97, 100], ["min", "len", "sorter.Sorter.sum_recall", "len"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.Sorter.sum_recall"], ["", "def", "recall", "(", "self", ",", "G", ",", "T", ")", ":", "\n", "        ", "t", "=", "min", "(", "T", ",", "len", "(", "self", ".", "topK", "[", "0", "]", ")", ")", "\n", "return", "t", ",", "self", ".", "sum_recall", "(", "G", ",", "T", ")", "/", "len", "(", "self", ".", "Q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.Sorter.sum_recall": [[101, 106], ["sorter.true_positives", "len", "len", "len", "len", "np.sum", "len"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.true_positives"], ["", "def", "sum_recall", "(", "self", ",", "G", ",", "T", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "Q", ")", "==", "len", "(", "self", ".", "topK", ")", ",", "\"number of query not equals\"", "\n", "assert", "len", "(", "self", ".", "topK", ")", "<=", "len", "(", "G", ")", ",", "\"number of queries should not exceed the number of queries in ground truth\"", "\n", "true_positive", "=", "true_positives", "(", "self", ".", "topK", ",", "self", ".", "Q", ",", "G", ",", "T", ")", "\n", "return", "np", ".", "sum", "(", "true_positive", ")", "/", "len", "(", "G", "[", "0", "]", ")", "# TP / K", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.BatchSorter.__init__": [[109, 119], ["np.zeros", "range", "math.ceil", "Sorter.Sorter", "len", "len", "len", "float", "Sorter.Sorter.sum_recall"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.Sorter.sum_recall"], ["    ", "def", "__init__", "(", "self", ",", "compressed", ",", "Q", ",", "X", ",", "G", ",", "Ts", ",", "metric", ",", "batch_size", ",", "norms_sqr", "=", "None", ")", ":", "\n", "        ", "self", ".", "Q", "=", "Q", "\n", "self", ".", "X", "=", "X", "\n", "self", ".", "recalls", "=", "np", ".", "zeros", "(", "shape", "=", "(", "len", "(", "Ts", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "math", ".", "ceil", "(", "len", "(", "Q", ")", "/", "float", "(", "batch_size", ")", ")", ")", ":", "\n", "            ", "q", "=", "Q", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", ",", ":", "]", "\n", "g", "=", "G", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", ",", ":", "]", "\n", "sorter", "=", "Sorter", "(", "compressed", ",", "q", ",", "X", ",", "metric", "=", "metric", ",", "norms_sqr", "=", "norms_sqr", ")", "\n", "self", ".", "recalls", "[", ":", "]", "=", "self", ".", "recalls", "[", ":", "]", "+", "[", "sorter", ".", "sum_recall", "(", "g", ",", "t", ")", "for", "t", "in", "Ts", "]", "\n", "", "self", ".", "recalls", "=", "self", ".", "recalls", "/", "len", "(", "self", ".", "Q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.BatchSorter.recall": [[120, 122], ["None"], "methods", ["None"], ["", "def", "recall", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "recalls", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.arg_sort": [[7, 12], ["min", "np.argpartition", "len", "np.argsort"], "function", ["None"], ["@", "nb", ".", "jit", "\n", "def", "arg_sort", "(", "distances", ")", ":", "\n", "    ", "top_k", "=", "min", "(", "131072", ",", "len", "(", "distances", ")", "-", "1", ")", "\n", "indices", "=", "np", ".", "argpartition", "(", "distances", ",", "top_k", ")", "[", ":", "top_k", "]", "\n", "return", "indices", "[", "np", ".", "argsort", "(", "distances", "[", "indices", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.product_arg_sort": [[14, 18], ["np.dot", "sorter.arg_sort"], "function", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.arg_sort"], ["", "@", "nb", ".", "jit", "\n", "def", "product_arg_sort", "(", "q", ",", "compressed", ")", ":", "\n", "    ", "distances", "=", "np", ".", "dot", "(", "compressed", ",", "-", "q", ")", "\n", "return", "arg_sort", "(", "distances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.angular_arg_sort": [[20, 25], ["np.linalg.norm", "sorter.arg_sort", "np.dot"], "function", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.arg_sort"], ["", "@", "nb", ".", "jit", "\n", "def", "angular_arg_sort", "(", "q", ",", "compressed", ",", "norms_sqr", ")", ":", "\n", "    ", "norm_q", "=", "np", ".", "linalg", ".", "norm", "(", "q", ")", "\n", "distances", "=", "np", ".", "dot", "(", "compressed", ",", "q", ")", "/", "(", "norm_q", "*", "norms_sqr", ")", "\n", "return", "arg_sort", "(", "distances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.euclidean_arg_sort": [[27, 31], ["np.linalg.norm", "sorter.arg_sort"], "function", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.arg_sort"], ["", "@", "nb", ".", "jit", "\n", "def", "euclidean_arg_sort", "(", "q", ",", "compressed", ")", ":", "\n", "    ", "distances", "=", "np", ".", "linalg", ".", "norm", "(", "q", "-", "compressed", ",", "axis", "=", "1", ")", "\n", "return", "arg_sort", "(", "distances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.sign_arg_sort": [[33, 39], ["np.empty", "range", "sorter.arg_sort", "len", "len", "np.count_nonzero"], "function", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.arg_sort"], ["", "@", "nb", ".", "jit", "\n", "def", "sign_arg_sort", "(", "q", ",", "compressed", ")", ":", "\n", "    ", "distances", "=", "np", ".", "empty", "(", "len", "(", "compressed", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "compressed", ")", ")", ":", "\n", "        ", "distances", "[", "i", "]", "=", "np", ".", "count_nonzero", "(", "(", "q", ">", "0", ")", "!=", "(", "compressed", "[", "i", "]", ">", "0", ")", ")", "\n", "", "return", "arg_sort", "(", "distances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.euclidean_norm_arg_sort": [[41, 45], ["sorter.arg_sort", "np.dot"], "function", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.arg_sort"], ["", "@", "nb", ".", "jit", "\n", "def", "euclidean_norm_arg_sort", "(", "q", ",", "compressed", ",", "norms_sqr", ")", ":", "\n", "    ", "distances", "=", "norms_sqr", "-", "2.0", "*", "np", ".", "dot", "(", "compressed", ",", "q", ")", "\n", "return", "arg_sort", "(", "distances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.parallel_sort": [[47, 80], ["np.empty", "tqdm.tqdm", "numba.prange", "min", "sorter.product_arg_sort", "sorter.angular_arg_sort", "np.linalg.norm", "sorter.euclidean_norm_arg_sort", "sorter.euclidean_arg_sort", "np.linalg.norm"], "function", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.product_arg_sort", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.angular_arg_sort", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.euclidean_norm_arg_sort", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.euclidean_arg_sort"], ["", "@", "nb", ".", "jit", "\n", "def", "parallel_sort", "(", "metric", ",", "compressed", ",", "Q", ",", "X", ",", "norms_sqr", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    for each q in 'Q', sort the compressed items in 'compressed' by their distance,\n    where distance is determined by 'metric'\n    :param metric: euclid product\n    :param compressed: compressed items, same dimension as origin data, shape(N * D)\n    :param Q: queries, shape(len(Q) * D)\n    :return:\n    \"\"\"", "\n", "\n", "rank", "=", "np", ".", "empty", "(", "(", "Q", ".", "shape", "[", "0", "]", ",", "min", "(", "131072", ",", "compressed", ".", "shape", "[", "0", "]", "-", "1", ")", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "p_range", "=", "tqdm", ".", "tqdm", "(", "nb", ".", "prange", "(", "Q", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "if", "metric", "==", "'product'", ":", "\n", "        ", "for", "i", "in", "p_range", ":", "\n", "            ", "rank", "[", "i", ",", ":", "]", "=", "product_arg_sort", "(", "Q", "[", "i", "]", ",", "compressed", ")", "\n", "", "", "elif", "metric", "==", "'angular'", ":", "\n", "        ", "if", "norms_sqr", "is", "None", ":", "\n", "            ", "norms_sqr", "=", "np", ".", "linalg", ".", "norm", "(", "compressed", ",", "axis", "=", "1", ")", "**", "2", "\n", "", "for", "i", "in", "p_range", ":", "\n", "            ", "rank", "[", "i", ",", ":", "]", "=", "angular_arg_sort", "(", "Q", "[", "i", "]", ",", "compressed", ",", "norms_sqr", ")", "\n", "", "", "elif", "metric", "==", "'euclid_norm'", ":", "\n", "        ", "if", "norms_sqr", "is", "None", ":", "\n", "            ", "norms_sqr", "=", "np", ".", "linalg", ".", "norm", "(", "compressed", ",", "axis", "=", "1", ")", "**", "2", "\n", "", "for", "i", "in", "p_range", ":", "\n", "            ", "rank", "[", "i", ",", ":", "]", "=", "euclidean_norm_arg_sort", "(", "Q", "[", "i", "]", ",", "compressed", ",", "norms_sqr", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "i", "in", "p_range", ":", "\n", "            ", "rank", "[", "i", ",", ":", "]", "=", "euclidean_arg_sort", "(", "Q", "[", "i", "]", ",", "compressed", ")", "\n", "\n", "", "", "return", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.sorter.true_positives": [[82, 88], ["np.empty", "numba.prange", "len", "len", "len", "np.intersect1d"], "function", ["None"], ["", "@", "nb", ".", "jit", "\n", "def", "true_positives", "(", "topK", ",", "Q", ",", "G", ",", "T", ")", ":", "\n", "    ", "result", "=", "np", ".", "empty", "(", "shape", "=", "(", "len", "(", "Q", ")", ")", ")", "\n", "for", "i", "in", "nb", ".", "prange", "(", "len", "(", "Q", ")", ")", ":", "\n", "        ", "result", "[", "i", "]", "=", "len", "(", "np", ".", "intersect1d", "(", "G", "[", "i", "]", ",", "topK", "[", "i", "]", "[", ":", "T", "]", ")", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.__init__": [[6, 11], ["pq.PQ", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "Ks", "=", "256", ",", "depth", "=", "2", ")", ":", "\n", "        ", "self", ".", "Ks", "=", "Ks", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "pqs", "=", "[", "PQ", "(", "1", ",", "Ks", ")", "for", "i", "in", "range", "(", "(", "1", "+", "self", ".", "Ks", ")", "*", "(", "depth", "//", "2", ")", "+", "depth", "%", "2", ")", "]", "\n", "self", ".", "code_dtype", "=", "np", ".", "uint8", "if", "Ks", "<=", "2", "**", "8", "else", "(", "np", ".", "uint16", "if", "Ks", "<=", "2", "**", "16", "else", "np", ".", "uint32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.class_message": [[12, 14], ["None"], "methods", ["None"], ["", "def", "class_message", "(", "self", ")", ":", "\n", "        ", "return", "\"RQGraph, depth: {}, Ks : {}, code_dtype: {}\"", ".", "format", "(", "self", ".", "depth", ",", "self", ".", "Ks", ",", "self", ".", "code_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.fit": [[15, 141], ["numpy.empty", "numpy.empty", "range", "numpy.empty", "numpy.empty", "open", "pq.fit", "pq.encode().reshape", "pq.decode", "enumerate", "pq.fit", "pq.encode().reshape", "pq.decode", "open.close", "codes[].reshape", "pq.encode().reshape", "pq.decode", "pq.codewords.tofile", "open.flush", "numpy.count_nonzero", "sub_pq.fit", "sub_pq.encode().reshape", "sub_pq.decode", "codes[].reshape", "pq.encode().reshape", "pq.decode", "pq.codewords.tofile", "open.flush", "pq.encode", "codes_d[].reshape", "open", "open", "codes[].reshape", "sub_pq.encode().reshape", "sub_pq.decode", "sub_pq.codewords.tofile", "open.flush", "open", "open", "pq.encode", "codes_d[].reshape", "open", "open", "str", "pq.encode", "numpy.linalg.norm().tofile", "numpy.linalg.norm().tofile", "range", "sub_pq.encode", "codes_d[].reshape", "numpy.linalg.norm().tofile", "numpy.linalg.norm().tofile", "pq.encode", "numpy.linalg.norm().tofile", "numpy.linalg.norm().tofile", "sub_pq.encode", "str", "str", "numpy.linalg.norm", "numpy.linalg.norm", "str", "str", "numpy.linalg.norm", "numpy.linalg.norm", "str", "str", "numpy.linalg.norm", "numpy.linalg.norm", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.fit", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.decode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.fit", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.decode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.decode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.fit", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.decode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.decode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.encode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.decode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.encode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.encode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.encode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.encode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.encode"], ["", "def", "fit", "(", "self", ",", "T", ",", "iter", "=", "20", ",", "save_codebook", "=", "False", ",", "save_decoded", "=", "[", "]", ",", "save_residue_norms", "=", "[", "]", ",", "save_results_T", "=", "False", ",", "dataset_name", "=", "None", ",", "save_dir", "=", "None", ",", "D", "=", "None", ")", ":", "\n", "        ", "if", "save_dir", "is", "None", ":", "\n", "            ", "save_dir", "=", "'./results'", "\n", "\n", "", "N", ",", "_", "=", "T", ".", "shape", "\n", "\n", "vecs", "=", "np", ".", "empty", "(", "shape", "=", "T", ".", "shape", ",", "dtype", "=", "T", ".", "dtype", ")", "\n", "vecs", "[", ":", ",", ":", "]", "=", "T", "[", ":", ",", ":", "]", "\n", "\n", "codes", "=", "np", ".", "empty", "(", "(", "N", ",", "self", ".", "depth", ")", ",", "dtype", "=", "self", ".", "code_dtype", ")", "\n", "\n", "if", "D", "is", "not", "None", ":", "\n", "            ", "vecs_d", "=", "np", ".", "empty", "(", "shape", "=", "D", ".", "shape", ",", "dtype", "=", "D", ".", "dtype", ")", "\n", "vecs_d", "[", ":", ",", ":", "]", "=", "D", "[", ":", ",", ":", "]", "\n", "\n", "codes_d", "=", "np", ".", "empty", "(", "(", "vecs_d", ".", "shape", "[", "0", "]", ",", "self", ".", "depth", ")", ",", "dtype", "=", "self", ".", "code_dtype", ")", "\n", "\n", "", "if", "save_codebook", ":", "\n", "            ", "codebook_f", "=", "open", "(", "save_dir", "+", "'/'", "+", "dataset_name", "+", "'_rqgraph_'", "+", "str", "(", "self", ".", "depth", ")", "+", "'_'", "+", "str", "(", "self", ".", "Ks", ")", "+", "'_codebook'", ",", "'wb'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "depth", "//", "2", ")", ":", "\n", "            ", "pq", "=", "self", ".", "pqs", "[", "i", "*", "(", "1", "+", "self", ".", "Ks", ")", "]", "\n", "pq", ".", "fit", "(", "vecs", ",", "iter", ")", "\n", "\n", "codes", "[", ":", ",", "i", "*", "2", "]", "=", "pq", ".", "encode", "(", "vecs", ")", ".", "reshape", "(", "-", "1", ")", "\n", "vecs", "-=", "pq", ".", "decode", "(", "codes", "[", ":", ",", "i", "*", "2", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "\n", "if", "D", "is", "not", "None", ":", "\n", "                ", "codes_d", "[", ":", ",", "i", "*", "2", "]", "=", "pq", ".", "encode", "(", "vecs_d", ")", ".", "reshape", "(", "-", "1", ")", "\n", "vecs_d", "-=", "pq", ".", "decode", "(", "codes_d", "[", ":", ",", "i", "*", "2", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "\n", "", "if", "(", "i", "+", "1", ")", "in", "save_residue_norms", ":", "\n", "                ", "with", "open", "(", "save_dir", "+", "'/'", "+", "dataset_name", "+", "'_rqgraph_'", "+", "str", "(", "i", "+", "1", ")", "+", "'_'", "+", "str", "(", "self", ".", "Ks", ")", "+", "'_residue_norms'", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "if", "save_results_T", ":", "\n", "                        ", "np", ".", "linalg", ".", "norm", "(", "vecs", ",", "axis", "=", "1", ")", ".", "tofile", "(", "f", ")", "\n", "", "if", "D", "is", "not", "None", ":", "\n", "                        ", "np", ".", "linalg", ".", "norm", "(", "vecs_d", ",", "axis", "=", "1", ")", ".", "tofile", "(", "f", ")", "\n", "\n", "", "", "", "if", "(", "i", "+", "1", ")", "in", "save_decoded", ":", "\n", "                ", "with", "open", "(", "save_dir", "+", "'/'", "+", "dataset_name", "+", "'_rqgraph_'", "+", "str", "(", "i", "+", "1", ")", "+", "'_'", "+", "str", "(", "self", ".", "Ks", ")", "+", "'_decoded'", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "if", "save_results_T", ":", "\n", "                        ", "(", "T", "-", "vecs", ")", ".", "tofile", "(", "f", ")", "\n", "", "if", "D", "is", "not", "None", ":", "\n", "                        ", "(", "D", "-", "vecs_d", ")", ".", "tofile", "(", "f", ")", "\n", "\n", "", "", "", "if", "save_codebook", ":", "\n", "                ", "pq", ".", "codewords", ".", "tofile", "(", "codebook_f", ")", "\n", "codebook_f", ".", "flush", "(", ")", "\n", "\n", "", "sub_pqs", "=", "self", ".", "pqs", "[", "i", "*", "(", "1", "+", "self", ".", "Ks", ")", "+", "1", ":", "(", "i", "+", "1", ")", "*", "(", "1", "+", "self", ".", "Ks", ")", "]", "\n", "for", "k", ",", "sub_pq", "in", "enumerate", "(", "sub_pqs", ")", ":", "\n", "                ", "sub_mask", "=", "(", "codes", "[", ":", ",", "i", "*", "2", "]", "==", "k", ")", "\n", "sub_num", "=", "np", ".", "count_nonzero", "(", "sub_mask", ")", "\n", "if", "sub_num", "==", "0", ":", "\n", "# TODO: Handle this case correctly. This may cause problem if the training set is not the same as the set used for encoding", "\n", "                    ", "continue", "\n", "", "elif", "sub_num", "<=", "self", ".", "Ks", ":", "\n", "                    ", "sub_pq", ".", "codewords", "=", "vecs", "[", "sub_mask", "]", "\n", "codes", "[", "sub_mask", ",", "i", "*", "2", "+", "1", "]", "=", "range", "(", "sub_num", ")", "\n", "vecs", "[", "sub_mask", "]", "=", "0", "\n", "continue", "\n", "\n", "", "sub_pq", ".", "fit", "(", "vecs", "[", "sub_mask", "]", ",", "iter", ")", "\n", "\n", "codes", "[", "sub_mask", ",", "i", "*", "2", "+", "1", "]", "=", "sub_pq", ".", "encode", "(", "vecs", "[", "sub_mask", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "vecs", "[", "sub_mask", "]", "-=", "sub_pq", ".", "decode", "(", "codes", "[", "sub_mask", ",", "i", "*", "2", "+", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "\n", "if", "D", "is", "not", "None", ":", "\n", "                    ", "sub_mask_d", "=", "(", "codes_d", "[", ":", ",", "i", "*", "2", "]", "==", "k", ")", "\n", "codes_d", "[", "sub_mask_d", ",", "i", "*", "2", "+", "1", "]", "=", "sub_pq", ".", "encode", "(", "vecs_d", "[", "sub_mask_d", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "vecs_d", "[", "sub_mask_d", "]", "-=", "sub_pq", ".", "decode", "(", "codes_d", "[", "sub_mask_d", ",", "i", "*", "2", "+", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "\n", "", "if", "save_codebook", ":", "\n", "                    ", "sub_pq", ".", "codewords", ".", "tofile", "(", "codebook_f", ")", "\n", "codebook_f", ".", "flush", "(", ")", "\n", "\n", "", "", "if", "(", "i", "+", "2", ")", "in", "save_residue_norms", ":", "\n", "                ", "with", "open", "(", "save_dir", "+", "'/'", "+", "dataset_name", "+", "'_rqgraph_'", "+", "str", "(", "i", "+", "2", ")", "+", "'_'", "+", "str", "(", "self", ".", "Ks", ")", "+", "'_residue_norms'", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "if", "save_results_T", ":", "\n", "                        ", "np", ".", "linalg", ".", "norm", "(", "vecs", ",", "axis", "=", "1", ")", ".", "tofile", "(", "f", ")", "\n", "", "if", "D", "is", "not", "None", ":", "\n", "                        ", "np", ".", "linalg", ".", "norm", "(", "vecs_d", ",", "axis", "=", "1", ")", ".", "tofile", "(", "f", ")", "\n", "\n", "", "", "", "if", "(", "i", "+", "2", ")", "in", "save_decoded", ":", "\n", "                ", "with", "open", "(", "save_dir", "+", "'/'", "+", "dataset_name", "+", "'_rqgraph_'", "+", "str", "(", "i", "+", "2", ")", "+", "'_'", "+", "str", "(", "self", ".", "Ks", ")", "+", "'_decoded'", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "if", "save_results_T", ":", "\n", "                        ", "(", "T", "-", "vecs", ")", ".", "tofile", "(", "f", ")", "\n", "", "if", "D", "is", "not", "None", ":", "\n", "                        ", "(", "D", "-", "vecs_d", ")", ".", "tofile", "(", "f", ")", "\n", "\n", "", "", "", "", "if", "self", ".", "depth", "%", "2", "==", "1", ":", "\n", "            ", "pq", "=", "self", ".", "pqs", "[", "-", "1", "]", "\n", "pq", ".", "fit", "(", "vecs", ",", "iter", ")", "\n", "\n", "codes", "[", ":", ",", "-", "1", "]", "=", "pq", ".", "encode", "(", "vecs", ")", ".", "reshape", "(", "-", "1", ")", "\n", "vecs", "-=", "pq", ".", "decode", "(", "codes", "[", ":", ",", "-", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "\n", "if", "D", "is", "not", "None", ":", "\n", "                ", "codes_d", "[", ":", ",", "-", "1", "]", "=", "pq", ".", "encode", "(", "vecs_d", ")", ".", "reshape", "(", "-", "1", ")", "\n", "vecs_d", "-=", "pq", ".", "decode", "(", "codes_d", "[", ":", ",", "-", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "depth", "in", "save_residue_norms", ":", "\n", "                ", "with", "open", "(", "save_dir", "+", "'/'", "+", "dataset_name", "+", "'_rqgraph_'", "+", "str", "(", "self", ".", "depth", ")", "+", "'_'", "+", "str", "(", "self", ".", "Ks", ")", "+", "'_residue_norms'", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "if", "save_results_T", ":", "\n", "                        ", "np", ".", "linalg", ".", "norm", "(", "vecs", ",", "axis", "=", "1", ")", ".", "tofile", "(", "save_dir", "+", "'/'", "+", "dataset_name", "+", "'_rqgraph_'", "+", "str", "(", "self", ".", "depth", ")", "+", "'_'", "+", "str", "(", "self", ".", "Ks", ")", "+", "'_residue_norms'", ")", "\n", "", "if", "D", "is", "not", "None", ":", "\n", "                        ", "np", ".", "linalg", ".", "norm", "(", "vecs_d", ",", "axis", "=", "1", ")", ".", "tofile", "(", "save_dir", "+", "'/'", "+", "dataset_name", "+", "'_rqgraph_'", "+", "str", "(", "self", ".", "depth", ")", "+", "'_'", "+", "str", "(", "self", ".", "Ks", ")", "+", "'_residue_norms'", ")", "\n", "\n", "", "", "", "if", "self", ".", "depth", "in", "save_decoded", ":", "\n", "                ", "with", "open", "(", "save_dir", "+", "'/'", "+", "dataset_name", "+", "'_rqgraph_'", "+", "str", "(", "self", ".", "depth", ")", "+", "'_'", "+", "str", "(", "self", ".", "Ks", ")", "+", "'_decoded'", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "if", "save_results_T", ":", "\n", "                        ", "(", "T", "-", "vecs", ")", ".", "tofile", "(", "f", ")", "\n", "", "if", "D", "is", "not", "None", ":", "\n", "                        ", "(", "D", "-", "vecs_d", ")", ".", "tofile", "(", "f", ")", "\n", "\n", "", "", "", "if", "save_codebook", ":", "\n", "                ", "pq", ".", "codewords", ".", "tofile", "(", "codebook_f", ")", "\n", "codebook_f", ".", "flush", "(", ")", "\n", "\n", "", "", "if", "save_codebook", ":", "\n", "            ", "codebook_f", ".", "close", "(", ")", "\n", "\n", "", "if", "D", "is", "not", "None", ":", "\n", "            ", "return", "codes", ",", "vecs", ",", "codes_d", ",", "vecs_d", "\n", "", "else", ":", "\n", "            ", "return", "codes", ",", "vecs", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.encode": [[142, 172], ["numpy.empty", "numpy.empty", "range", "pq.encode().reshape", "pq.decode", "enumerate", "pq.encode().reshape", "pq.decode", "codes[].reshape", "sub_pq.encode().reshape", "sub_pq.decode", "codes[].reshape", "pq.encode", "numpy.count_nonzero", "codes[].reshape", "pq.encode", "sub_pq.encode"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.decode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.decode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.hash.RandomProjection.decode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.encode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.encode", "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.encode"], ["", "", "def", "encode", "(", "self", ",", "X", ")", ":", "\n", "        ", "N", ",", "D", "=", "X", ".", "shape", "\n", "\n", "vecs", "=", "np", ".", "empty", "(", "shape", "=", "X", ".", "shape", ",", "dtype", "=", "X", ".", "dtype", ")", "\n", "vecs", "[", ":", ",", ":", "]", "=", "X", "[", ":", ",", ":", "]", "\n", "\n", "codes", "=", "np", ".", "empty", "(", "(", "N", ",", "self", ".", "depth", ")", ",", "dtype", "=", "self", ".", "code_dtype", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", "//", "2", ")", ":", "\n", "            ", "pq", "=", "self", ".", "pqs", "[", "i", "*", "(", "1", "+", "self", ".", "Ks", ")", "]", "\n", "\n", "codes", "[", ":", ",", "i", "*", "2", "]", "=", "pq", ".", "encode", "(", "vecs", ")", ".", "reshape", "(", "N", ")", "\n", "vecs", "-=", "pq", ".", "decode", "(", "codes", "[", ":", ",", "i", "*", "2", "]", ".", "reshape", "(", "(", "N", ",", "1", ")", ")", ")", "\n", "\n", "sub_pqs", "=", "self", ".", "pqs", "[", "i", "*", "(", "1", "+", "self", ".", "Ks", ")", "+", "1", ":", "(", "i", "+", "1", ")", "*", "(", "1", "+", "self", ".", "Ks", ")", "]", "\n", "for", "k", ",", "sub_pq", "in", "enumerate", "(", "sub_pqs", ")", ":", "\n", "                ", "sub_mask", "=", "(", "codes", "[", ":", ",", "i", "*", "2", "]", "==", "k", ")", "\n", "if", "np", ".", "count_nonzero", "(", "sub_mask", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "codes", "[", "sub_mask", ",", "i", "*", "2", "+", "1", "]", "=", "sub_pq", ".", "encode", "(", "vecs", "[", "sub_mask", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "vecs", "[", "sub_mask", "]", "-=", "sub_pq", ".", "decode", "(", "codes", "[", "sub_mask", ",", "i", "*", "2", "+", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "\n", "", "", "if", "self", ".", "depth", "%", "2", "==", "1", ":", "\n", "            ", "pq", "=", "self", ".", "pqs", "[", "-", "1", "]", "\n", "\n", "codes", "[", ":", ",", "-", "1", "]", "=", "pq", ".", "encode", "(", "vecs", ")", ".", "reshape", "(", "-", "1", ")", "\n", "vecs", "-=", "pq", ".", "decode", "(", "codes", "[", ":", ",", "-", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "\n", "", "return", "codes", ",", "vecs", "\n", "\n"]], "home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.compress": [[174, 177], ["rq_graph.RQGraph.encode"], "methods", ["home.repos.pwc.inspect_result.xinyandai_product-quantization.None.rq_graph.RQGraph.encode"], ["", "def", "compress", "(", "self", ",", "X", ")", ":", "\n", "        ", "_", ",", "vecs", "=", "self", ".", "encode", "(", "X", ")", "\n", "return", "X", "-", "vecs", "\n", "\n"]]}