{"home.repos.pwc.inspect_result.micmic123_qmapcompression.None.eval_compressai.parse_args": [[16, 43], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "compressai.zoo.models.keys", "list", "list", "range", "compressai.zoo.models.keys"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.parse_args"], ["def", "parse_args", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Pixelwise Variable Rate Compression Evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "'--testset'", ",", "help", "=", "'testset path'", ",", "type", "=", "str", ",", "default", "=", "'./data/kodak.csv'", ")", "\n", "parser", ".", "add_argument", "(", "'--level'", ",", "help", "=", "''", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model\"", ",", "\n", "choices", "=", "models", ".", "keys", "(", ")", ",", "\n", "default", "=", "list", "(", "models", ".", "keys", "(", ")", ")", "[", "0", "]", ",", "\n", "help", "=", "\"NN model to use (default: %(default)s)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-q\"", ",", "\n", "\"--quality\"", ",", "\n", "choices", "=", "list", "(", "range", "(", "1", ",", "9", ")", ")", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "3", ",", "\n", "help", "=", "\"Quality setting (default: %(default)s)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-m\"", ",", "\n", "\"--metric\"", ",", "\n", "choices", "=", "[", "\"mse\"", "]", ",", "\n", "default", "=", "\"mse\"", ",", "\n", "help", "=", "\"metric trained against (default: %(default)s\"", ",", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.eval_compressai.test": [[45, 75], ["next", "torch.no_grad", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "tqdm.tqdm", "print", "model.parameters", "x.to.to", "model", "utils._encode", "utils._decode", "metric", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "bpp.item", "psnr.item", "ms_ssim.item"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.CompressionModel.parameters", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils._encode", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils._decode", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update"], ["", "def", "test", "(", "test_dataloader", ",", "model", ",", "metric", ")", ":", "\n", "    ", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "bpp_avg", "=", "AverageMeter", "(", ")", "\n", "bpp_real_avg", "=", "AverageMeter", "(", ")", "\n", "psnr_avg", "=", "AverageMeter", "(", ")", "\n", "ms_ssim_avg", "=", "AverageMeter", "(", ")", "\n", "enc_time_avg", "=", "AverageMeter", "(", ")", "\n", "dec_time_avg", "=", "AverageMeter", "(", ")", "\n", "\n", "for", "x", ",", "_", "in", "tqdm", "(", "test_dataloader", ")", ":", "\n", "            ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "out_net", "=", "model", "(", "x", ")", "\n", "\n", "bpp_real", ",", "out", ",", "enc_time", "=", "_encode", "(", "model", ",", "x", ",", "'/tmp/comp'", ")", "\n", "\n", "x_hat_decoded", ",", "dec_time", "=", "_decode", "(", "model", ",", "'/tmp/comp'", ",", "coder", "=", "'ans'", ",", "verbose", "=", "False", ")", "\n", "out_net", "[", "'x_hat'", "]", "=", "x_hat_decoded", "\n", "bpp", ",", "psnr", ",", "ms_ssim", "=", "metric", "(", "out_net", ",", "x", ")", "\n", "\n", "bpp_avg", ".", "update", "(", "bpp", ".", "item", "(", ")", ")", "\n", "bpp_real_avg", ".", "update", "(", "bpp_real", ")", "\n", "psnr_avg", ".", "update", "(", "psnr", ".", "item", "(", ")", ")", "\n", "ms_ssim_avg", ".", "update", "(", "ms_ssim", ".", "item", "(", ")", ")", "\n", "enc_time_avg", ".", "update", "(", "enc_time", ")", "\n", "dec_time_avg", ".", "update", "(", "dec_time", ")", "\n", "\n", "", "print", "(", "\n", "f'[ Test ]'", "\n", "f' Real Bpp: {bpp_real_avg.avg:.4f} |'", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.eval_compressai.main": [[84, 100], ["eval_compressai.parse_args", "losses.losses.Metrics", "dataset.get_test_dataloader_compressai", "model.to.to", "model.to.eval", "model.to.update", "eval_compressai.test", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.parse_args", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.dataset.get_test_dataloader_compressai", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.train.test"], ["", "", "def", "main", "(", "argv", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", "argv", ")", "\n", "config", "=", "{", "\n", "'batchsize_test'", ":", "1", ",", "\n", "'testset'", ":", "args", ".", "testset", "\n", "}", "\n", "\n", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "metric", "=", "Metrics", "(", ")", "\n", "test_dataloader", "=", "get_test_dataloader_compressai", "(", "config", ")", "\n", "\n", "model", "=", "models", "[", "args", ".", "model", "]", "(", "quality", "=", "args", ".", "quality", ",", "metric", "=", "args", ".", "metric", ",", "pretrained", "=", "True", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "update", "(", ")", "\n", "test", "(", "test_dataloader", ",", "model", ",", "metric", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.eval.parse_args": [[14, 27], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "parser.parse_args.snapshot.startswith", "os.path.join", "parser.parse_args.snapshot.split"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.parse_args"], ["def", "parse_args", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Pixelwise Variable Rate Compression Evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "'--snapshot'", ",", "help", "=", "'snapshot path'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--testset'", ",", "help", "=", "'testset path'", ",", "type", "=", "str", ",", "default", "=", "'./data/kodak.csv'", ")", "\n", "parser", ".", "add_argument", "(", "'--tqdm'", ",", "help", "=", "'use tqdm'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--level'", ",", "help", "=", "'number of levels (real - 1)'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n", "assert", "args", ".", "snapshot", ".", "startswith", "(", "'./'", ")", "\n", "dir_path", "=", "'/'", ".", "join", "(", "args", ".", "snapshot", ".", "split", "(", "'/'", ")", "[", ":", "-", "2", "]", ")", "\n", "args", ".", "config", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'config.yaml'", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.eval.test": [[29, 88], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "next", "torch.no_grad", "enumerate", "print", "model.parameters", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "print", "utils.AverageMeter.update", "utils.AverageMeter.update", "x.to.to", "qmap.to.to", "train.quality2lambda", "model", "utils._encode", "utils._decode", "criterion", "metric", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "out_criterion[].item", "model.aux_loss().item", "out_criterion[].item", "psnr.item", "ms_ssim.item", "model.aux_loss"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.CompressionModel.parameters", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.train.quality2lambda", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils._encode", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils._decode", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.CompressionModel.aux_loss"], ["", "def", "test", "(", "test_dataloaders", ",", "model", ",", "criterion", ",", "metric", ")", ":", "\n", "    ", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "loss_all_avg", "=", "AverageMeter", "(", ")", "\n", "enc_time_all_avg", "=", "AverageMeter", "(", ")", "\n", "dec_time_all_avg", "=", "AverageMeter", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "test_dataloader", "in", "enumerate", "(", "test_dataloaders", ")", ":", "\n", "            ", "loss_avg", "=", "AverageMeter", "(", ")", "\n", "aux_loss_avg", "=", "AverageMeter", "(", ")", "\n", "bpp_avg", "=", "AverageMeter", "(", ")", "\n", "bpp_real_avg", "=", "AverageMeter", "(", ")", "\n", "psnr_avg", "=", "AverageMeter", "(", ")", "\n", "ms_ssim_avg", "=", "AverageMeter", "(", ")", "\n", "enc_time_avg", "=", "AverageMeter", "(", ")", "\n", "dec_time_avg", "=", "AverageMeter", "(", ")", "\n", "\n", "for", "x", ",", "qmap", "in", "test_dataloader", ":", "\n", "                ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "qmap", "=", "qmap", ".", "to", "(", "device", ")", "\n", "lmbdamap", "=", "quality2lambda", "(", "qmap", ")", "\n", "out_net", "=", "model", "(", "x", ",", "qmap", ")", "\n", "\n", "bpp_real", ",", "out", ",", "enc_time", "=", "_encode", "(", "model", ",", "x", ",", "'/tmp/comp'", ",", "qmap", ")", "\n", "\n", "x_hat_decoded", ",", "dec_time", "=", "_decode", "(", "model", ",", "'/tmp/comp'", ",", "coder", "=", "'ans'", ",", "verbose", "=", "False", ")", "\n", "out_net", "[", "'x_hat'", "]", "=", "x_hat_decoded", "\n", "out_criterion", "=", "criterion", "(", "out_net", ",", "x", ",", "lmbdamap", ")", "\n", "bpp", ",", "psnr", ",", "ms_ssim", "=", "metric", "(", "out_net", ",", "x", ")", "\n", "\n", "loss_avg", ".", "update", "(", "out_criterion", "[", "'loss'", "]", ".", "item", "(", ")", ")", "\n", "aux_loss_avg", ".", "update", "(", "model", ".", "aux_loss", "(", ")", ".", "item", "(", ")", ")", "\n", "bpp_avg", ".", "update", "(", "out_criterion", "[", "'bpp_loss'", "]", ".", "item", "(", ")", ")", "\n", "bpp_real_avg", ".", "update", "(", "bpp_real", ")", "\n", "psnr_avg", ".", "update", "(", "psnr", ".", "item", "(", ")", ")", "\n", "ms_ssim_avg", ".", "update", "(", "ms_ssim", ".", "item", "(", ")", ")", "\n", "enc_time_avg", ".", "update", "(", "enc_time", ")", "\n", "dec_time_avg", ".", "update", "(", "dec_time", ")", "\n", "\n", "", "level", "=", "i", "-", "1", "\n", "print", "(", "\n", "f'[ Test{level:>2} ]'", "\n", "f' Total: {loss_avg.avg:.4f} |'", "\n", "f' Real BPP: {bpp_real_avg.avg:.4f} |'", "\n", "f' BPP: {bpp_avg.avg:.4f} |'", "\n", "f' PSNR: {psnr_avg.avg:.4f} |'", "\n", "f' MS-SSIM: {ms_ssim_avg.avg:.4f} |'", "\n", "f' Aux: {aux_loss_avg.avg:.4f} |'", "\n", "f' Enc Time: {enc_time_avg.avg:.4f}s |'", "\n", "f' Dec Time: {dec_time_avg.avg:.4f}s'", "\n", ")", "\n", "\n", "# uniform qmap", "\n", "if", "level", "!=", "-", "1", ":", "\n", "                ", "loss_all_avg", ".", "update", "(", "loss_avg", ".", "avg", ")", "\n", "", "enc_time_all_avg", ".", "update", "(", "enc_time_avg", ".", "avg", ")", "\n", "dec_time_all_avg", ".", "update", "(", "dec_time_avg", ".", "avg", ")", "\n", "\n", "", "print", "(", "f'[ Test ] Total mean: {loss_all_avg.avg:.4f} |'", "\n", "f' Enc Time: {enc_time_all_avg.avg:.4f}s |'", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.eval.main": [[92, 120], ["eval.parse_args", "utils.get_config", "print", "print", "utils.get_config.items", "print", "print", "losses.losses.Metrics", "losses.losses.PixelwiseRateDistortionLoss", "dataset.get_dataloader", "models.models.SpatiallyAdaptiveCompression", "model.to.to", "utils.load_checkpoint", "model.to.eval", "model.to.update", "eval.test", "torch.cuda.is_available", "print", "print", "len"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.parse_args", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.get_config", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.dataset.get_dataloader", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.load_checkpoint", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.train.test", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print"], ["", "", "def", "main", "(", "argv", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", "argv", ")", "\n", "config", "=", "get_config", "(", "args", ".", "config", ")", "\n", "config", "[", "'batchsize_test'", "]", "=", "1", "\n", "config", "[", "'testset'", "]", "=", "args", ".", "testset", "\n", "\n", "print", "(", "'[config]'", ",", "args", ".", "config", ")", "\n", "msg", "=", "f'======================= {args.snapshot} ======================='", "\n", "print", "(", "msg", ")", "\n", "for", "k", ",", "v", "in", "config", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "in", "{", "'lr'", ",", "'set_lr'", ",", "'p'", ",", "'testset'", "}", ":", "\n", "            ", "print", "(", "f' *{k}: '", ",", "v", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'  {k}: '", ",", "v", ")", "\n", "", "", "print", "(", "'='", "*", "len", "(", "msg", ")", ")", "\n", "print", "(", ")", "\n", "\n", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "metric", "=", "Metrics", "(", ")", "\n", "criterion", "=", "PixelwiseRateDistortionLoss", "(", ")", "\n", "train_dataloader", ",", "test_dataloaders", "=", "get_dataloader", "(", "config", ",", "L", "=", "args", ".", "level", ")", "\n", "\n", "model", "=", "SpatiallyAdaptiveCompression", "(", "N", "=", "config", "[", "'N'", "]", ",", "M", "=", "config", "[", "'M'", "]", ",", "sft_ks", "=", "config", "[", "'sft_ks'", "]", ",", "prior_nc", "=", "64", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "itr", ",", "model", "=", "load_checkpoint", "(", "args", ".", "snapshot", ",", "model", ",", "only_net", "=", "True", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "update", "(", ")", "\n", "test", "(", "test_dataloaders", ",", "model", ",", "criterion", ",", "metric", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.train.parse_args": [[17, 34], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "datetime.datetime.now().strftime", "parser.parse_args.resume.startswith", "os.path.join", "datetime.datetime.now", "parser.parse_args.resume.split"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.parse_args"], ["def", "parse_args", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Spatially-Adaptive Variable Rate Compression'", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "help", "=", "'config file path'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "help", "=", "'result dir name'", ",", "default", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d_%H_%M_%S'", ")", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "help", "=", "'snapshot path'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "'seed number'", ",", "default", "=", "None", ",", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n", "if", "not", "args", ".", "config", ":", "\n", "        ", "if", "args", ".", "resume", ":", "\n", "            ", "assert", "args", ".", "resume", ".", "startswith", "(", "'./'", ")", "\n", "dir_path", "=", "'/'", ".", "join", "(", "args", ".", "resume", ".", "split", "(", "'/'", ")", "[", ":", "-", "2", "]", ")", "\n", "args", ".", "config", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'config.yaml'", ")", "\n", "", "else", ":", "\n", "            ", "args", ".", "config", "=", "'./configs/config.yaml'", "\n", "\n", "", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.train.quality2lambda": [[37, 39], ["torch.exp", "torch.exp"], "function", ["None"], ["", "def", "quality2lambda", "(", "qmap", ")", ":", "\n", "    ", "return", "1e-3", "*", "torch", ".", "exp", "(", "4.382", "*", "qmap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.train.test": [[41, 75], ["model.eval", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "logger.init", "model.train", "next", "torch.no_grad", "torch.no_grad", "enumerate", "print", "model.parameters", "logger.init", "logger.print_test", "logger.write_test", "x.to.to", "qmap.to.to", "train.quality2lambda", "model", "out_net[].clamp_", "criterion", "metric", "logger.update_test", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "model.aux_loss"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.parametrizers.NonNegativeParametrizer.init", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.train.train", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.CompressionModel.parameters", "home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.parametrizers.NonNegativeParametrizer.init", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print_test", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.write_test", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.train.quality2lambda", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.update_test", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.CompressionModel.aux_loss"], ["", "def", "test", "(", "logger", ",", "test_dataloaders", ",", "model", ",", "criterion", ",", "metric", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "loss", "=", "AverageMeter", "(", ")", "\n", "bpp_loss", "=", "AverageMeter", "(", ")", "\n", "mse_loss", "=", "AverageMeter", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "test_dataloader", "in", "enumerate", "(", "test_dataloaders", ")", ":", "\n", "            ", "logger", ".", "init", "(", ")", "\n", "for", "x", ",", "qmap", "in", "test_dataloader", ":", "\n", "                ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "qmap", "=", "qmap", ".", "to", "(", "device", ")", "\n", "lmbdamap", "=", "quality2lambda", "(", "qmap", ")", "\n", "out_net", "=", "model", "(", "x", ",", "qmap", ")", "\n", "out_net", "[", "'x_hat'", "]", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "\n", "out_criterion", "=", "criterion", "(", "out_net", ",", "x", ",", "lmbdamap", ")", "\n", "bpp", ",", "psnr", ",", "ms_ssim", "=", "metric", "(", "out_net", ",", "x", ")", "\n", "\n", "logger", ".", "update_test", "(", "bpp", ",", "psnr", ",", "ms_ssim", ",", "out_criterion", ",", "model", ".", "aux_loss", "(", ")", ")", "\n", "", "level", "=", "i", "-", "1", "\n", "logger", ".", "print_test", "(", "level", ")", "\n", "logger", ".", "write_test", "(", "level", ")", "\n", "if", "level", "!=", "-", "1", ":", "\n", "# uniform qmap", "\n", "                ", "loss", ".", "update", "(", "logger", ".", "loss", ".", "avg", ")", "\n", "bpp_loss", ".", "update", "(", "logger", ".", "bpp_loss", ".", "avg", ")", "\n", "mse_loss", ".", "update", "(", "logger", ".", "mse_loss", ".", "avg", ")", "\n", "", "", "print", "(", "f'[ Test ] Total mean: {loss.avg:.4f}'", ")", "\n", "", "logger", ".", "init", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "return", "loss", ".", "avg", ",", "bpp_loss", ".", "avg", ",", "mse_loss", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.train.train": [[77, 151], ["losses.losses.PixelwiseRateDistortionLoss", "losses.losses.Metrics", "dataset.get_dataloader", "utils.Logger", "models.models.SpatiallyAdaptiveCompression", "model.to.to", "torch.Adam", "torch.Adam", "model.to.train", "torch.cuda.is_available", "torch.cuda.is_available", "model.to.parameters", "model.to.aux_parameters", "utils.load_checkpoint", "utils.Logger.load_itr", "print", "float", "optim.Adam.zero_grad", "optim.Adam.zero_grad", "x.to.to", "qmap.to.to", "train.quality2lambda", "model.to.", "losses.losses.PixelwiseRateDistortionLoss.", "out_criterion[].backward", "model.to.aux_loss", "model.aux_loss.backward", "optim.Adam.step", "optim.Adam.step", "utils.Logger.update", "out_criterion[].isnan().any", "out_criterion[].isinf().any", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "utils.Logger.print", "utils.Logger.write", "utils.Logger.init", "model.to.update", "train.test", "print", "model.to.parameters", "print", "utils.save_checkpoint", "utils.save_checkpoint", "out_criterion[].isnan", "out_criterion[].isinf", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.dataset.get_dataloader", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.train.train", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.CompressionModel.parameters", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.CompressionModel.aux_parameters", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.load_checkpoint", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.load_itr", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.train.quality2lambda", "home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.bound_ops.LowerBoundFunction.backward", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.CompressionModel.aux_loss", "home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.bound_ops.LowerBoundFunction.backward", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.write", "home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.parametrizers.NonNegativeParametrizer.init", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.train.test", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.CompressionModel.parameters", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.save_checkpoint", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.save_checkpoint"], ["", "def", "train", "(", "args", ",", "config", ",", "base_dir", ",", "snapshot_dir", ",", "output_dir", ",", "log_dir", ")", ":", "\n", "    ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "criterion", "=", "PixelwiseRateDistortionLoss", "(", ")", "\n", "metric", "=", "Metrics", "(", ")", "\n", "train_dataloader", ",", "test_dataloaders", "=", "get_dataloader", "(", "config", ")", "\n", "logger", "=", "Logger", "(", "config", ",", "base_dir", ",", "snapshot_dir", ",", "output_dir", ",", "log_dir", ")", "\n", "\n", "model", "=", "SpatiallyAdaptiveCompression", "(", "N", "=", "config", "[", "'N'", "]", ",", "M", "=", "config", "[", "'M'", "]", ",", "sft_ks", "=", "config", "[", "'sft_ks'", "]", ",", "prior_nc", "=", "64", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "config", "[", "'lr'", "]", ")", "\n", "aux_optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "aux_parameters", "(", ")", ",", "lr", "=", "config", "[", "'lr_aux'", "]", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "itr", ",", "model", "=", "load_checkpoint", "(", "args", ".", "resume", ",", "model", ",", "optimizer", ",", "aux_optimizer", ")", "\n", "logger", ".", "load_itr", "(", "itr", ")", "\n", "\n", "", "if", "config", "[", "'set_lr'", "]", ":", "\n", "        ", "lr_prior", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "for", "g", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "g", "[", "'lr'", "]", "=", "float", "(", "config", "[", "'set_lr'", "]", ")", "\n", "", "print", "(", "f'[set lr] {lr_prior} -> {optimizer.param_groups[0][\"lr\"]}'", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "loss_best", "=", "1e10", "\n", "while", "logger", ".", "itr", "<", "config", "[", "'max_itr'", "]", ":", "\n", "        ", "for", "x", ",", "qmap", "in", "train_dataloader", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "aux_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "qmap", "=", "qmap", ".", "to", "(", "device", ")", "\n", "lmbdamap", "=", "quality2lambda", "(", "qmap", ")", "\n", "\n", "out_net", "=", "model", "(", "x", ",", "qmap", ")", "\n", "out_criterion", "=", "criterion", "(", "out_net", ",", "x", ",", "lmbdamap", ")", "\n", "\n", "out_criterion", "[", "'loss'", "]", ".", "backward", "(", ")", "\n", "aux_loss", "=", "model", ".", "aux_loss", "(", ")", "\n", "aux_loss", ".", "backward", "(", ")", "\n", "\n", "# for stability", "\n", "if", "out_criterion", "[", "'loss'", "]", ".", "isnan", "(", ")", ".", "any", "(", ")", "or", "out_criterion", "[", "'loss'", "]", ".", "isinf", "(", ")", ".", "any", "(", ")", "or", "out_criterion", "[", "'loss'", "]", ">", "10000", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "config", "[", "'clip_max_norm'", "]", ">", "0", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "config", "[", "'clip_max_norm'", "]", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "aux_optimizer", ".", "step", "(", ")", "# update quantiles of entropy bottleneck modules", "\n", "\n", "# logging", "\n", "logger", ".", "update", "(", "out_criterion", ",", "aux_loss", ")", "\n", "if", "logger", ".", "itr", "%", "config", "[", "'log_itr'", "]", "==", "0", ":", "\n", "                ", "logger", ".", "print", "(", ")", "\n", "logger", ".", "write", "(", ")", "\n", "logger", ".", "init", "(", ")", "\n", "\n", "# test and save model snapshot", "\n", "", "if", "logger", ".", "itr", "%", "config", "[", "'test_itr'", "]", "==", "0", "or", "logger", ".", "itr", "%", "config", "[", "'snapshot_save_itr'", "]", "==", "0", ":", "\n", "                ", "model", ".", "update", "(", ")", "\n", "loss", ",", "bpp_loss", ",", "mse_loss", "=", "test", "(", "logger", ",", "test_dataloaders", ",", "model", ",", "criterion", ",", "metric", ")", "\n", "if", "loss", "<", "loss_best", ":", "\n", "                    ", "print", "(", "'Best!'", ")", "\n", "save_checkpoint", "(", "os", ".", "path", ".", "join", "(", "snapshot_dir", ",", "'best.pt'", ")", ",", "logger", ".", "itr", ",", "model", ",", "optimizer", ",", "aux_optimizer", ")", "\n", "loss_best", "=", "loss", "\n", "", "if", "logger", ".", "itr", "%", "config", "[", "'snapshot_save_itr'", "]", "==", "0", ":", "\n", "                    ", "save_checkpoint", "(", "os", ".", "path", ".", "join", "(", "snapshot_dir", ",", "f'{logger.itr:07}_{bpp_loss:.4f}_{mse_loss:.8f}.pt'", ")", ",", "\n", "logger", ".", "itr", ",", "model", ",", "optimizer", ",", "aux_optimizer", ")", "\n", "\n", "# lr scheduling", "\n", "", "", "if", "logger", ".", "itr", "%", "config", "[", "'lr_shedule_step'", "]", "==", "0", ":", "\n", "                ", "lr_prior", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "for", "g", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "g", "[", "'lr'", "]", "*=", "config", "[", "'lr_shedule_scale'", "]", "\n", "", "print", "(", "f'[lr scheduling] {lr_prior} -> {optimizer.param_groups[0][\"lr\"]}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.train.main": [[153, 179], ["train.parse_args", "utils.init", "print", "print", "print", "config.items", "print", "print", "train.train", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "os.getpid", "print", "print", "len"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.parse_args", "home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.parametrizers.NonNegativeParametrizer.init", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.train.train", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print"], ["", "", "", "", "def", "main", "(", "argv", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", "argv", ")", "\n", "config", ",", "base_dir", ",", "snapshot_dir", ",", "output_dir", ",", "log_dir", "=", "init", "(", "args", ")", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "seed", "=", "args", ".", "seed", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "# if use multi-GPU", "\n", "# torch.backends.cudnn.deterministic = True  # slow", "\n", "# torch.backends.cudnn.benchmark = False", "\n", "\n", "", "print", "(", "'[PID]'", ",", "os", ".", "getpid", "(", ")", ")", "\n", "print", "(", "'[config]'", ",", "args", ".", "config", ")", "\n", "msg", "=", "f'======================= {args.name} ======================='", "\n", "print", "(", "msg", ")", "\n", "for", "k", ",", "v", "in", "config", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "in", "{", "'lr'", ",", "'set_lr'", ",", "'p'", "}", ":", "\n", "            ", "print", "(", "f' *{k}: '", ",", "v", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'  {k}: '", ",", "v", ")", "\n", "", "", "print", "(", "'='", "*", "len", "(", "msg", ")", ")", "\n", "print", "(", ")", "\n", "\n", "train", "(", "args", ",", "config", ",", "base_dir", ",", "snapshot_dir", ",", "output_dir", ",", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.dataset.QualityMapDataset.__init__": [[15, 33], ["pandas.read_csv", "df[].tolist", "dataset.QualityMapDataset._get_grid", "df[].tolist", "print", "len", "len", "print", "dataset.QualityMapDataset.paths.sort", "len", "len"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.dataset.QualityMapDataset._get_grid", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "cropsize", "=", "256", ",", "mode", "=", "'train'", ",", "level_range", "=", "(", "0", ",", "100", ")", ",", "level", "=", "0", ",", "p", "=", "0.2", ")", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "path", ")", "\n", "self", ".", "paths", "=", "df", "[", "'path'", "]", ".", "tolist", "(", ")", "\n", "self", ".", "map_paths", "=", "df", "[", "'seg_path'", "]", ".", "tolist", "(", ")", "if", "'seg_path'", "in", "df", "else", "None", "\n", "self", ".", "cropsize", "=", "cropsize", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "level_range", "=", "level_range", "\n", "self", ".", "level", "=", "level", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "grid", "=", "self", ".", "_get_grid", "(", "(", "self", ".", "cropsize", ",", "cropsize", ")", ")", "\n", "\n", "assert", "self", ".", "map_paths", "is", "None", "or", "len", "(", "self", ".", "paths", ")", "==", "len", "(", "self", ".", "map_paths", ")", "\n", "assert", "level_range", "[", "0", "]", "==", "0", "and", "level_range", "[", "1", "]", "==", "100", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "print", "(", "f'[{mode}set] {len(self.paths)} images'", ")", "\n", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "print", "(", "f'[{mode}set] {len(self.paths)} images for quality {level/100}'", ")", "\n", "self", ".", "paths", ".", "sort", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.dataset.QualityMapDataset.__len__": [[34, 36], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.dataset.QualityMapDataset._get_crop_params": [[37, 50], ["random.randint", "random.randint", "int", "int", "round", "round"], "methods", ["None"], ["", "def", "_get_crop_params", "(", "self", ",", "img", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "w", "==", "self", ".", "cropsize", "and", "h", "==", "self", ".", "cropsize", ":", "\n", "            ", "return", "0", ",", "0", ",", "h", ",", "w", "\n", "\n", "", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "top", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "self", ".", "cropsize", ")", "\n", "left", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "self", ".", "cropsize", ")", "\n", "", "else", ":", "\n", "# center", "\n", "            ", "top", "=", "int", "(", "round", "(", "(", "h", "-", "self", ".", "cropsize", ")", "/", "2.", ")", ")", "\n", "left", "=", "int", "(", "round", "(", "(", "w", "-", "self", ".", "cropsize", ")", "/", "2.", ")", ")", "\n", "", "return", "top", ",", "left", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.dataset.QualityMapDataset._get_grid": [[51, 60], ["torch.tensor", "torch.tensor", "torch.meshgrid", "grid_x1.view", "grid_x2.view", "torch.cat", "range", "range"], "methods", ["None"], ["", "def", "_get_grid", "(", "self", ",", "size", ")", ":", "\n", "        ", "x1", "=", "torch", ".", "tensor", "(", "range", "(", "size", "[", "0", "]", ")", ")", "\n", "x2", "=", "torch", ".", "tensor", "(", "range", "(", "size", "[", "1", "]", ")", ")", "\n", "grid_x1", ",", "grid_x2", "=", "torch", ".", "meshgrid", "(", "x1", ",", "x2", ")", "\n", "\n", "grid1", "=", "grid_x1", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "1", ")", "\n", "grid2", "=", "grid_x2", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "1", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "[", "grid1", ",", "grid2", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.dataset.QualityMapDataset.__getitem__": [[61, 153], ["PIL.Image.open().convert", "torchvision.transforms.functional.hflip.filter", "numpy.array", "numpy.zeros_like", "numpy.unique", "torchvision.transforms.functional.to_tensor", "torch.FloatTensor().unsqueeze", "PIL.Image.open", "PIL.Image.fromarray", "dataset.QualityMapDataset._get_crop_params", "torchvision.transforms.functional.hflip.crop", "torchvision.transforms.functional.hflip.crop", "torchvision.transforms.functional.hflip", "torchvision.transforms.functional.hflip", "PIL.ImageFilter.MedianFilter", "random.random", "numpy.unique.sort", "PIL.Image.open", "numpy.zeros", "random.random", "torch.FloatTensor", "random.random", "numpy.tile().astype", "range", "random.random", "numpy.tile().astype", "int", "range", "torch.distributions.multivariate_normal.MultivariateNormal", "dataset.QualityMapDataset._get_grid", "torch.distributions.multivariate_normal.MultivariateNormal.log_prob", "torch.exp().numpy", "random.random", "random.random", "random.random", "random.random", "torch.distributions.multivariate_normal.MultivariateNormal", "torch.distributions.multivariate_normal.MultivariateNormal.log_prob", "torch.exp().numpy", "len", "numpy.tile", "torch.tensor", "torch.tensor", "numpy.tile().astype.max", "numpy.tile", "random.random", "random.random", "torch.tensor", "torch.tensor", "numpy.tile().astype.max", "len", "numpy.linspace", "len", "len", "torch.exp", "len", "numpy.linspace", "random.random", "random.random", "random.random", "torch.exp", "random.random", "len", "len"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.dataset.QualityMapDataset._get_crop_params", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.crop", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.crop", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.dataset.QualityMapDataset._get_grid"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "paths", "[", "idx", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "segmap", "=", "Image", ".", "open", "(", "self", ".", "map_paths", "[", "idx", "]", ")", "if", "self", ".", "map_paths", "else", "Image", ".", "fromarray", "(", "\n", "np", ".", "zeros", "(", "img", ".", "size", "[", ":", ":", "-", "1", "]", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "\n", "# crop if training", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "top", ",", "left", "=", "self", ".", "_get_crop_params", "(", "img", ")", "\n", "region", "=", "(", "left", ",", "top", ",", "left", "+", "self", ".", "cropsize", ",", "top", "+", "self", ".", "cropsize", ")", "\n", "img", "=", "img", ".", "crop", "(", "region", ")", "\n", "segmap", "=", "segmap", ".", "crop", "(", "region", ")", "\n", "\n", "# horizontal flip", "\n", "", "if", "random", ".", "random", "(", ")", "<", "0.5", "and", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "img", "=", "hflip", "(", "img", ")", "\n", "segmap", "=", "hflip", "(", "segmap", ")", "\n", "\n", "# filter segmap to remove some artifacts", "\n", "", "segmap", "=", "segmap", ".", "filter", "(", "ImageFilter", ".", "MedianFilter", "(", "7", ")", ")", "\n", "\n", "# random rate for each class", "\n", "segmap", "=", "np", ".", "array", "(", "segmap", ")", "\n", "qmap", "=", "np", ".", "zeros_like", "(", "segmap", ",", "dtype", "=", "float", ")", "\n", "uniques", "=", "np", ".", "unique", "(", "segmap", ")", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "sample", "=", "random", ".", "random", "(", ")", "\n", "if", "sample", "<", "self", ".", "p", ":", "\n", "# uniform", "\n", "                ", "if", "random", ".", "random", "(", ")", "<", "0.01", ":", "\n", "                    ", "qmap", "[", ":", "]", "=", "0", "\n", "", "else", ":", "\n", "                    ", "qmap", "[", ":", "]", "=", "(", "self", ".", "level_range", "[", "1", "]", "+", "1", ")", "*", "random", ".", "random", "(", ")", "\n", "", "", "elif", "sample", "<", "2", "*", "self", ".", "p", ":", "\n", "# uniform for each class", "\n", "                ", "for", "v", "in", "uniques", ":", "\n", "                    ", "level", "=", "(", "self", ".", "level_range", "[", "1", "]", "+", "1", ")", "*", "random", ".", "random", "(", ")", "\n", "qmap", "[", "segmap", "==", "v", "]", "=", "level", "\n", "", "", "elif", "sample", "<", "3", "*", "self", ".", "p", ":", "\n", "# gradation between two levels", "\n", "                ", "v1", "=", "random", ".", "random", "(", ")", "*", "self", ".", "level_range", "[", "1", "]", "\n", "v2", "=", "random", ".", "random", "(", ")", "*", "self", ".", "level_range", "[", "1", "]", "\n", "qmap", "=", "np", ".", "tile", "(", "np", ".", "linspace", "(", "v1", ",", "v2", ",", "self", ".", "cropsize", ")", ",", "(", "self", ".", "cropsize", ",", "1", ")", ")", ".", "astype", "(", "float", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                    ", "qmap", "=", "qmap", ".", "T", "\n", "", "", "else", ":", "\n", "# gaussian kernel", "\n", "                ", "gaussian_num", "=", "int", "(", "1", "+", "random", ".", "random", "(", ")", "*", "20", ")", "\n", "for", "i", "in", "range", "(", "gaussian_num", ")", ":", "\n", "                    ", "mu_x", "=", "self", ".", "cropsize", "*", "random", ".", "random", "(", ")", "\n", "mu_y", "=", "self", ".", "cropsize", "*", "random", ".", "random", "(", ")", "\n", "var_x", "=", "2000", "*", "random", ".", "random", "(", ")", "+", "1000", "\n", "var_y", "=", "2000", "*", "random", ".", "random", "(", ")", "+", "1000", "\n", "\n", "m", "=", "MultivariateNormal", "(", "torch", ".", "tensor", "(", "[", "mu_x", ",", "mu_y", "]", ")", ",", "torch", ".", "tensor", "(", "[", "[", "var_x", ",", "0", "]", ",", "[", "0", ",", "var_y", "]", "]", ")", ")", "\n", "p", "=", "m", ".", "log_prob", "(", "self", ".", "grid", ")", "\n", "kernel", "=", "torch", ".", "exp", "(", "p", ")", ".", "numpy", "(", ")", "\n", "qmap", "+=", "kernel", "\n", "", "qmap", "*=", "100", "/", "qmap", ".", "max", "(", ")", "*", "(", "0.5", "*", "random", ".", "random", "(", ")", "+", "0.5", ")", "\n", "", "", "else", ":", "\n", "            ", "uniques", ".", "sort", "(", ")", "\n", "if", "self", ".", "level", "==", "-", "100", ":", "\n", "                ", "w", ",", "h", "=", "img", ".", "size", "\n", "# gradation", "\n", "if", "idx", "%", "3", "==", "0", ":", "\n", "                    ", "v1", "=", "idx", "/", "len", "(", "self", ".", "paths", ")", "*", "self", ".", "level_range", "[", "1", "]", "\n", "v2", "=", "(", "1", "-", "idx", "/", "len", "(", "self", ".", "paths", ")", ")", "*", "self", ".", "level_range", "[", "1", "]", "\n", "qmap", "=", "np", ".", "tile", "(", "np", ".", "linspace", "(", "v1", ",", "v2", ",", "w", ")", ",", "(", "h", ",", "1", ")", ")", ".", "astype", "(", "float", ")", "\n", "# gaussian kernel", "\n", "", "else", ":", "\n", "                    ", "gaussian_num", "=", "1", "\n", "for", "i", "in", "range", "(", "gaussian_num", ")", ":", "\n", "                        ", "mu_x", "=", "h", "/", "4", "+", "(", "h", "/", "2", ")", "*", "idx", "/", "len", "(", "self", ".", "paths", ")", "\n", "mu_y", "=", "w", "/", "4", "+", "(", "w", "/", "2", ")", "*", "(", "1", "-", "idx", "/", "len", "(", "self", ".", "paths", ")", ")", "\n", "var_x", "=", "20000", "*", "(", "1", "-", "idx", "/", "len", "(", "self", ".", "paths", ")", ")", "+", "5000", "\n", "var_y", "=", "20000", "*", "idx", "/", "len", "(", "self", ".", "paths", ")", "+", "5000", "\n", "\n", "m", "=", "MultivariateNormal", "(", "torch", ".", "tensor", "(", "[", "mu_x", ",", "mu_y", "]", ")", ",", "torch", ".", "tensor", "(", "[", "[", "var_x", ",", "0", "]", ",", "[", "0", ",", "var_y", "]", "]", ")", ")", "\n", "grid", "=", "self", ".", "_get_grid", "(", "(", "h", ",", "w", ")", ")", "\n", "p", "=", "m", ".", "log_prob", "(", "grid", ")", "\n", "kernel", "=", "torch", ".", "exp", "(", "p", ")", ".", "numpy", "(", ")", "\n", "qmap", "+=", "kernel", "\n", "", "qmap", "*=", "100", "/", "qmap", ".", "max", "(", ")", "*", "(", "0.4", "*", "idx", "/", "len", "(", "self", ".", "paths", ")", "+", "0.6", ")", "\n", "", "", "else", ":", "\n", "# uniform level", "\n", "                ", "qmap", "[", ":", "]", "=", "self", ".", "level", "\n", "\n", "# to tensor", "\n", "", "", "img", "=", "to_tensor", "(", "img", ")", "\n", "qmap", "=", "torch", ".", "FloatTensor", "(", "qmap", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "qmap", "*=", "1", "/", "self", ".", "level_range", "[", "1", "]", "# 0~100 -> 0~1", "\n", "\n", "return", "img", ",", "qmap", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.dataset.ImagenetDataset.__init__": [[156, 163], ["pandas.read_csv", "df[].tolist", "df[].tolist", "print", "len"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "transform", "=", "None", ")", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "path", ")", "\n", "self", ".", "paths", "=", "df", "[", "'path'", "]", ".", "tolist", "(", ")", "\n", "self", ".", "labels", "=", "df", "[", "'label'", "]", ".", "tolist", "(", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "print", "(", "f'[dataset] {len(self.paths)} images.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.dataset.ImagenetDataset.__len__": [[164, 166], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.dataset.ImagenetDataset.__getitem__": [[167, 173], ["PIL.Image.open().convert", "torch.FloatTensor", "dataset.ImagenetDataset.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "paths", "[", "idx", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "label", "=", "torch", ".", "FloatTensor", "(", "[", "self", ".", "labels", "[", "idx", "]", "]", ")", "\n", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.dataset.get_dataloader": [[175, 188], ["dataset.QualityMapDataset", "torch.utils.data.DataLoader", "dataset.QualityMapDataset", "torch.utils.data.DataLoader", "test_dataloaders.append", "int", "range"], "function", ["None"], ["", "", "def", "get_dataloader", "(", "config", ",", "L", "=", "10", ")", ":", "\n", "    ", "train_dataset", "=", "QualityMapDataset", "(", "config", "[", "'trainset'", "]", ",", "config", "[", "'patchsize'", "]", ",", "mode", "=", "'train'", ",", "p", "=", "config", "[", "'p'", "]", ")", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "config", "[", "'batchsize'", "]", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "config", "[", "'worker_num'", "]", ",", "pin_memory", "=", "True", ")", "\n", "levels", "=", "[", "-", "100", "]", "+", "[", "int", "(", "100", "*", "(", "i", "/", "L", ")", ")", "for", "i", "in", "range", "(", "L", "+", "1", ")", "]", "\n", "test_dataloaders", "=", "[", "]", "\n", "for", "level", "in", "levels", ":", "\n", "        ", "test_dataset", "=", "QualityMapDataset", "(", "config", "[", "'testset'", "]", ",", "config", "[", "'patchsize'", "]", ",", "mode", "=", "'test'", ",", "p", "=", "config", "[", "'p'", "]", ",", "level", "=", "level", ")", "\n", "test_dataloader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "config", "[", "'batchsize_test'", "]", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "config", "[", "'worker_num'", "]", ",", "pin_memory", "=", "True", ")", "\n", "test_dataloaders", ".", "append", "(", "test_dataloader", ")", "\n", "\n", "", "return", "train_dataloader", ",", "test_dataloaders", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.dataset.get_test_dataloader_compressai": [[190, 196], ["dataset.QualityMapDataset", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_test_dataloader_compressai", "(", "config", ")", ":", "\n", "    ", "test_dataset", "=", "QualityMapDataset", "(", "config", "[", "'testset'", "]", ",", "mode", "=", "'test'", ")", "\n", "test_dataloader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "config", "[", "'batchsize_test'", "]", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "2", ")", "\n", "\n", "return", "test_dataloader", "\n", "", ""]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.parse_args": [[17, 31], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "parser.parse_args.snapshot.startswith", "os.path.join", "parser.parse_args.snapshot.split"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.parse_args"], ["def", "parse_args", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Classification-aware compression'", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "help", "=", "'config file path'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "help", "=", "'file name for result plot'", ",", "default", "=", "'classification_result'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--imagenet'", ",", "help", "=", "'imagenet subset path'", ",", "type", "=", "str", ",", "default", "=", "'./data/imagenet_subset.csv'", ")", "\n", "parser", ".", "add_argument", "(", "'--cuda'", ",", "help", "=", "'use cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--snapshot'", ",", "help", "=", "'snapshot path'", ",", "type", "=", "str", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n", "assert", "args", ".", "snapshot", ".", "startswith", "(", "'./'", ")", "\n", "dir_path", "=", "'/'", ".", "join", "(", "args", ".", "snapshot", ".", "split", "(", "'/'", ")", "[", ":", "-", "2", "]", ")", "\n", "args", ".", "config", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'config.yaml'", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.init": [[33, 56], ["[].normal_", "qmap.clone().detach().to.clone().detach().to", "qmap.clone().detach().to.requires_grad_", "torch.optim.LBFGS", "float", "float", "float", "qmap.clone().detach().to.clone().detach", "torch.empty_like", "qmap.clone().detach().to.clone"], "function", ["None"], ["", "def", "init", "(", "x", ",", "label", ",", "lmbda", "=", "0.1", ")", ":", "\n", "    ", "qmap", "=", "torch", ".", "empty_like", "(", "x", ")", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ".", "normal_", "(", "mean", "=", "-", "2", ",", "std", "=", "1", ")", "\n", "qmap", "=", "qmap", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "to", "(", "device", ")", "\n", "qmap", ".", "requires_grad_", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "LBFGS", "(", "[", "qmap", "]", ",", "max_iter", "=", "1", ")", "\n", "train_param", "=", "{", "\n", "'x'", ":", "x", ",", "\n", "'label'", ":", "label", ",", "\n", "'i'", ":", "0", ",", "\n", "'loss_best'", ":", "float", "(", "'inf'", ")", ",", "\n", "'score_best'", ":", "0", ",", "\n", "'ce_best'", ":", "float", "(", "'inf'", ")", ",", "\n", "'qmap_mean_best'", ":", "0", ",", "\n", "'qmap'", ":", "qmap", ",", "\n", "'qmap_best'", ":", "qmap", ",", "\n", "'i_best'", ":", "0", ",", "\n", "'optimizer'", ":", "optimizer", ",", "\n", "'bpp_best'", ":", "float", "(", "'inf'", ")", ",", "\n", "'topk_indices_best'", ":", "[", "]", ",", "\n", "'topk_score_best'", ":", "[", "]", ",", "\n", "'lmbda'", ":", "lmbda", "\n", "}", "\n", "return", "train_param", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.closure_": [[58, 98], ["classification_aware.normalize_qmap", "model", "torch.clamp", "classification_aware.compute_loss_bpp_", "vgg16", "criterion", "train_param[].zero_grad", "loss.backward", "torch.mean", "torch.topk", "topk[].cpu().tolist", "topk[].cpu().tolist", "torch.nn.utils.clip_grad_norm_", "normalize", "vgg16.flatten", "vgg16", "qmap.clone().detach", "compute_loss_bpp_.clone().cpu().detach", "normalize", "topk[].cpu", "topk[].cpu", "qmap.clone", "compute_loss_bpp_.clone().cpu", "compute_loss_bpp_.clone"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.normalize_qmap", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.compute_loss_bpp_", "home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.bound_ops.LowerBoundFunction.backward"], ["", "def", "closure_", "(", ")", ":", "\n", "    ", "global", "train_param", ",", "w", "\n", "x", "=", "train_param", "[", "'x'", "]", "\n", "label", "=", "train_param", "[", "'label'", "]", "\n", "qmap", "=", "train_param", "[", "'qmap'", "]", "\n", "\n", "qmap_norm", "=", "normalize_qmap", "(", "qmap", ")", "\n", "out_net", "=", "model", "(", "x", ",", "qmap_norm", ")", "\n", "x_recon", "=", "torch", ".", "clamp", "(", "out_net", "[", "'x_hat'", "]", ",", "0", ",", "1", ")", "\n", "\n", "bpp", "=", "compute_loss_bpp_", "(", "out_net", ")", "\n", "pred", "=", "vgg16", "(", "normalize", "(", "x_recon", ")", ")", "\n", "ce", "=", "criterion", "(", "pred", ",", "label", ")", "\n", "score", "=", "pred", ".", "flatten", "(", ")", "[", "label", "]", "\n", "\n", "loss", "=", "w", "*", "(", "train_param", "[", "'lmbda'", "]", "*", "ce", "+", "bpp", ")", "\n", "\n", "train_param", "[", "'optimizer'", "]", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "train_param", "[", "'i'", "]", "+=", "1", "\n", "\n", "qmap_mean", "=", "torch", ".", "mean", "(", "qmap_norm", ")", "\n", "topk", "=", "torch", ".", "topk", "(", "vgg16", "(", "normalize", "(", "x_recon", ")", ")", ",", "5", ")", "\n", "topk_indices", "=", "topk", "[", "1", "]", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "topk_score", "=", "topk", "[", "0", "]", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "if", "train_param", "[", "'loss_best'", "]", ">", "loss", "or", "train_param", "[", "'i'", "]", "==", "1", ":", "\n", "        ", "train_param", "[", "'loss_best'", "]", "=", "loss", "\n", "train_param", "[", "'ce_best'", "]", "=", "ce", "\n", "train_param", "[", "'score_best'", "]", "=", "score", "\n", "train_param", "[", "'qmap_best'", "]", "=", "qmap", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "train_param", "[", "'qmap_mean_best'", "]", "=", "qmap_mean", "\n", "train_param", "[", "'i_best'", "]", "=", "train_param", "[", "'i'", "]", "\n", "train_param", "[", "'bpp_best'", "]", "=", "bpp", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "train_param", "[", "'topk_indices_best'", "]", "=", "topk_indices", "\n", "train_param", "[", "'topk_score_best'", "]", "=", "topk_score", "\n", "\n", "", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "qmap", ",", "grad_clip", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.optimize": [[100, 103], ["train_param[].step"], "function", ["None"], ["", "def", "optimize", "(", "train_param", ",", "total_itr", "=", "200", ")", ":", "\n", "    ", "while", "train_param", "[", "'i'", "]", "<", "total_itr", ":", "\n", "        ", "train_param", "[", "'optimizer'", "]", ".", "step", "(", "closure_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.compute_loss_bpp_": [[105, 110], ["out_net[].size", "sum", "out_net[].values", "torch.log2().sum", "torch.log2"], "function", ["None"], ["", "", "def", "compute_loss_bpp_", "(", "out_net", ")", ":", "\n", "    ", "N", ",", "_", ",", "H", ",", "W", "=", "out_net", "[", "'x_hat'", "]", ".", "size", "(", ")", "\n", "num_pixels", "=", "N", "*", "H", "*", "W", "\n", "return", "sum", "(", "(", "-", "torch", ".", "log2", "(", "likelihoods", ")", ".", "sum", "(", ")", "/", "num_pixels", ")", "\n", "for", "likelihoods", "in", "out_net", "[", "'likelihoods'", "]", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.recon_uniform": [[112, 119], ["qmap.to.to", "utils._encode", "utils._decode", "torch.ones_like"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils._encode", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils._decode"], ["", "def", "recon_uniform", "(", "model", ",", "img", ",", "q", "=", "0.1", ")", ":", "\n", "    ", "qmap", "=", "q", "*", "torch", ".", "ones_like", "(", "img", ")", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "qmap", "=", "qmap", ".", "to", "(", "device", ")", "\n", "bpp", ",", "out", ",", "enc_time", "=", "_encode", "(", "model", ",", "img", ",", "tmp_path", ",", "qmap", ")", "\n", "x_hat", ",", "dec_time", "=", "_decode", "(", "model", ",", "tmp_path", ",", "coder", "=", "'ans'", ",", "verbose", "=", "False", ")", "\n", "\n", "return", "x_hat", ",", "bpp", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.recon_with_qmap": [[121, 126], ["utils._encode", "utils._decode"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils._encode", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils._decode"], ["", "def", "recon_with_qmap", "(", "model", ",", "img", ",", "qmap", ")", ":", "\n", "    ", "bpp", ",", "out", ",", "enc_time", "=", "_encode", "(", "model", ",", "img", ",", "tmp_path", ",", "qmap", ")", "\n", "x_hat", ",", "dec_time", "=", "_decode", "(", "model", ",", "tmp_path", ",", "coder", "=", "'ans'", ",", "verbose", "=", "False", ")", "\n", "\n", "return", "x_hat", ",", "bpp", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.eval_classification": [[128, 137], ["classifier", "torch.topk", "normalize", "topk[].cpu().tolist", "label.item", "label.item", "topk[].cpu"], "function", ["None"], ["", "def", "eval_classification", "(", "classifier", ",", "img", ",", "label", ")", ":", "\n", "    ", "pred", "=", "classifier", "(", "normalize", "(", "img", ")", ")", "\n", "topk", "=", "torch", ".", "topk", "(", "pred", ",", "5", ")", "\n", "topk_indices", "=", "topk", "[", "1", "]", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "\n", "top1", "=", "(", "topk_indices", "[", "0", "]", "==", "label", ".", "item", "(", ")", ")", "\n", "top5", "=", "(", "label", ".", "item", "(", ")", "in", "topk_indices", "[", ":", "5", "]", ")", "\n", "\n", "return", "top1", ",", "top5", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.get_grad_cam": [[139, 142], ["camera", "normalize"], "function", ["None"], ["", "def", "get_grad_cam", "(", "x", ")", ":", "\n", "    ", "mask", ",", "_", "=", "camera", "(", "normalize", "(", "x", ")", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.normalize_qmap": [[144, 146], ["torch.sigmoid"], "function", ["None"], ["", "def", "normalize_qmap", "(", "qmap", ")", ":", "\n", "    ", "return", "torch", ".", "sigmoid", "(", "qmap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.plot": [[148, 206], ["plt.style.use", "plt.style.use", "plt.plot", "plt.plot", "plt.plot", "plt.plot", "plt.plot", "plt.plot", "plt.plot", "plt.plot", "plt.plot", "plt.plot", "plt.xticks", "plt.yticks", "plt.grid", "plt.legend", "plt.xlabel", "plt.ylabel", "plt.savefig", "range", "range"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.plot", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.plot", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.plot", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.plot", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.plot", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.plot", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.plot", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.plot", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.plot", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.plot"], ["", "def", "plot", "(", "result", ")", ":", "\n", "    ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "plt", ".", "style", ".", "use", "(", "'default'", ")", "\n", "plt", ".", "style", ".", "use", "(", "'seaborn-white'", ")", "\n", "plt", ".", "rcParams", "[", "'axes.titlesize'", "]", "=", "45", "\n", "plt", ".", "rcParams", "[", "'axes.titleweight'", "]", "=", "'bold'", "\n", "plt", ".", "rcParams", "[", "'axes.titlepad'", "]", "=", "20", "\n", "plt", ".", "rcParams", "[", "'axes.labelsize'", "]", "=", "48", "\n", "plt", ".", "rcParams", "[", "'axes.labelweight'", "]", "=", "'bold'", "\n", "plt", ".", "rcParams", "[", "'axes.labelpad'", "]", "=", "14", "\n", "plt", ".", "rcParams", "[", "'axes.edgecolor'", "]", "=", "'lightgrey'", "\n", "plt", ".", "rcParams", "[", "'grid.color'", "]", "=", "'whitesmoke'", "\n", "plt", ".", "rcParams", "[", "'xtick.labelsize'", "]", "=", "32", "\n", "plt", ".", "rcParams", "[", "'xtick.major.pad'", "]", "=", "20", "\n", "plt", ".", "rcParams", "[", "'xtick.minor.visible'", "]", "=", "False", "\n", "plt", ".", "rcParams", "[", "'ytick.labelsize'", "]", "=", "32", "\n", "plt", ".", "rcParams", "[", "'ytick.major.pad'", "]", "=", "15", "\n", "plt", ".", "rcParams", "[", "'figure.subplot.wspace'", "]", "=", "0.32", "\n", "plt", ".", "rcParams", "[", "'figure.subplot.hspace'", "]", "=", "0.30", "\n", "plt", ".", "rcParams", "[", "'legend.loc'", "]", "=", "'lower right'", "\n", "plt", ".", "rcParams", "[", "'legend.framealpha'", "]", "=", "1", "\n", "plt", ".", "rcParams", "[", "'legend.frameon'", "]", "=", "True", "\n", "plt", ".", "rcParams", "[", "'legend.fontsize'", "]", "=", "22", "\n", "plt", ".", "rcParams", "[", "'legend.fancybox'", "]", "=", "False", "\n", "plt", ".", "rcParams", "[", "'legend.edgecolor'", "]", "=", "'gainsboro'", "\n", "plt", ".", "rcParams", "[", "'lines.linewidth'", "]", "=", "3", "\n", "plt", ".", "rcParams", "[", "'lines.marker'", "]", "=", "'d'", "\n", "plt", ".", "rcParams", "[", "'lines.markersize'", "]", "=", "8", "\n", "plt", ".", "rcParams", "[", "'figure.figsize'", "]", "=", "(", "10", ",", "9", ")", "\n", "\n", "plt", ".", "plot", "(", "result", "[", "5", "]", "[", "'bpp'", "]", ",", "result", "[", "5", "]", "[", "'acc1'", "]", ",", "'-o'", ",", "label", "=", "'Optimized in 0.65s@1'", ",", "color", "=", "'#ff0000'", ")", "\n", "\n", "plt", ".", "plot", "(", "result", "[", "5", "]", "[", "'bpp'", "]", ",", "result", "[", "5", "]", "[", "'acc5'", "]", ",", "'--o'", ",", "label", "=", "'Optimized in 0.65s@5'", ",", "color", "=", "'#ff0000'", ")", "\n", "\n", "plt", ".", "plot", "(", "result", "[", "3", "]", "[", "'bpp'", "]", ",", "result", "[", "3", "]", "[", "'acc1'", "]", ",", "'-^'", ",", "label", "=", "'Optimized in 0.37s@1'", ",", "color", "=", "'#ffc010'", ")", "\n", "\n", "plt", ".", "plot", "(", "result", "[", "3", "]", "[", "'bpp'", "]", ",", "result", "[", "3", "]", "[", "'acc5'", "]", ",", "'--^'", ",", "label", "=", "'Optimized in 0.37s@5'", ",", "color", "=", "'#ffc010'", ")", "\n", "\n", "plt", ".", "plot", "(", "result", "[", "'cam'", "]", "[", "'bpp'", "]", ",", "result", "[", "'cam'", "]", "[", "'acc1'", "]", ",", "'-s'", ",", "label", "=", "'Grad-CAM@1'", ",", "color", "=", "'#00ff00'", ")", "\n", "\n", "plt", ".", "plot", "(", "result", "[", "'cam'", "]", "[", "'bpp'", "]", ",", "result", "[", "'cam'", "]", "[", "'acc5'", "]", ",", "'--s'", ",", "label", "=", "'Grad-CAM@5'", ",", "color", "=", "'#00ff00'", ")", "\n", "\n", "plt", ".", "plot", "(", "result", "[", "'uniform'", "]", "[", "'bpp'", "]", ",", "result", "[", "'uniform'", "]", "[", "'acc1'", "]", ",", "''", ",", "label", "=", "'Uniform@1'", ",", "color", "=", "'#0000ff'", ")", "\n", "\n", "plt", ".", "plot", "(", "result", "[", "'uniform'", "]", "[", "'bpp'", "]", ",", "result", "[", "'uniform'", "]", "[", "'acc5'", "]", ",", "'--'", ",", "label", "=", "'Uniform@5'", ",", "color", "=", "'#0000ff'", ")", "\n", "\n", "plt", ".", "plot", "(", "[", "0", ",", "1.14", "]", ",", "[", "x", "for", "x", "in", "result", "[", "'original'", "]", "[", "'acc1'", "]", "for", "i", "in", "range", "(", "2", ")", "]", ",", "'-'", ",", "color", "=", "'#555555'", ")", "\n", "\n", "plt", ".", "plot", "(", "[", "0", ",", "1.14", "]", ",", "[", "x", "for", "x", "in", "result", "[", "'original'", "]", "[", "'acc5'", "]", "for", "i", "in", "range", "(", "2", ")", "]", ",", "'--'", ",", "color", "=", "'#555555'", ")", "\n", "\n", "plt", ".", "xticks", "(", "[", "0", ",", "0.2", ",", "0.4", ",", "0.6", ",", "0.8", ",", "1.0", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "0.2", ",", "0.4", ",", "0.6", ",", "0.8", ",", "1.0", "]", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "xlabel", "(", "'Bits per pixel (BPP)'", ",", "fontsize", "=", "32", ")", "\n", "plt", ".", "ylabel", "(", "'Accuaracy'", ",", "fontsize", "=", "32", ")", "\n", "plt", ".", "savefig", "(", "f'./{args.name}.png'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.classification_aware.result_init": [[208, 210], ["None"], "function", ["None"], ["", "def", "result_init", "(", "result", ",", "name", ")", ":", "\n", "    ", "result", "[", "name", "]", "=", "{", "'bpp'", ":", "[", "]", ",", "'acc1'", ":", "[", "]", ",", "'acc5'", ":", "[", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.AverageMeter.__init__": [[41, 46], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.AverageMeter.update": [[47, 52], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.__init__": [[55, 67], ["utils.Logger.init", "utils.Logger._init_summary_writers"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.parametrizers.NonNegativeParametrizer.init", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger._init_summary_writers"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "base_dir", ",", "snapshot_dir", ",", "output_dir", ",", "log_dir", ",", "level_num", "=", "11", ",", "only_print", "=", "False", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "base_dir", "=", "base_dir", "\n", "self", ".", "snapshot_dir", "=", "snapshot_dir", "\n", "self", ".", "output_dir", "=", "output_dir", "\n", "self", ".", "log_dir", "=", "log_dir", "\n", "self", ".", "level_num", "=", "level_num", "\n", "self", ".", "itr", "=", "0", "\n", "self", ".", "init", "(", ")", "\n", "\n", "if", "not", "only_print", ":", "\n", "            ", "self", ".", "_init_summary_writers", "(", "level_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger._init_summary_writers": [[68, 71], ["torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "os.path.join", "range"], "methods", ["None"], ["", "", "def", "_init_summary_writers", "(", "self", ",", "level_num", ")", ":", "\n", "        ", "self", ".", "writer", "=", "SummaryWriter", "(", "self", ".", "log_dir", ")", "\n", "self", ".", "test_writers", "=", "[", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "self", ".", "log_dir", ",", "f'level_{i}'", ")", ")", "for", "i", "in", "range", "(", "level_num", "+", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.init": [[72, 79], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter"], "methods", ["None"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss", "=", "AverageMeter", "(", ")", "\n", "self", ".", "bpp_loss", "=", "AverageMeter", "(", ")", "\n", "self", ".", "mse_loss", "=", "AverageMeter", "(", ")", "\n", "self", ".", "psnr", "=", "AverageMeter", "(", ")", "\n", "self", ".", "ms_ssim", "=", "AverageMeter", "(", ")", "\n", "self", ".", "aux_loss", "=", "AverageMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.load_itr": [[80, 82], ["None"], "methods", ["None"], ["", "def", "load_itr", "(", "self", ",", "itr", ")", ":", "\n", "        ", "self", ".", "itr", "=", "itr", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.update": [[83, 89], ["utils.Logger.loss.update", "utils.Logger.bpp_loss.update", "utils.Logger.mse_loss.update", "utils.Logger.aux_loss.update", "out_criterion[].item", "out_criterion[].item", "out_criterion[].item", "aux_loss.item"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update"], ["", "def", "update", "(", "self", ",", "out_criterion", ",", "aux_loss", ")", ":", "\n", "        ", "self", ".", "loss", ".", "update", "(", "out_criterion", "[", "'loss'", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "bpp_loss", ".", "update", "(", "out_criterion", "[", "'bpp_loss'", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "mse_loss", ".", "update", "(", "out_criterion", "[", "'mse_loss'", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "aux_loss", ".", "update", "(", "aux_loss", ".", "item", "(", ")", ")", "\n", "self", ".", "itr", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.update_test": [[90, 97], ["utils.Logger.loss.update", "utils.Logger.bpp_loss.update", "utils.Logger.mse_loss.update", "utils.Logger.psnr.update", "utils.Logger.ms_ssim.update", "utils.Logger.aux_loss.update", "out_criterion[].item", "bpp.item", "out_criterion[].item", "psnr.item", "ms_ssim.item", "aux_loss.item"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update"], ["", "def", "update_test", "(", "self", ",", "bpp", ",", "psnr", ",", "ms_ssim", ",", "out_criterion", ",", "aux_loss", ")", ":", "\n", "        ", "self", ".", "loss", ".", "update", "(", "out_criterion", "[", "'loss'", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "bpp_loss", ".", "update", "(", "bpp", ".", "item", "(", ")", ")", "\n", "self", ".", "mse_loss", ".", "update", "(", "out_criterion", "[", "'mse_loss'", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "psnr", ".", "update", "(", "psnr", ".", "item", "(", ")", ")", "\n", "self", ".", "ms_ssim", ".", "update", "(", "ms_ssim", ".", "item", "(", ")", ")", "\n", "self", ".", "aux_loss", ".", "update", "(", "aux_loss", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print": [[98, 101], ["utils.Logger.print"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print"], ["", "def", "print", "(", "self", ")", ":", "\n", "        ", "print", "(", "\n", "f'[{self.itr:>7}]'", "\n", "f' Total: {self.loss.avg:.4f} |'", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print_test": [[107, 110], ["utils.Logger.print"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print"], ["", "def", "print_test", "(", "self", ",", "case", "=", "-", "1", ")", ":", "\n", "        ", "print", "(", "\n", "f'[ Test{case:>2} ]'", "\n", "f' Total: {self.loss.avg:.4f} |'", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.write": [[117, 122], ["utils.Logger.writer.add_scalar", "utils.Logger.writer.add_scalar", "utils.Logger.writer.add_scalar", "utils.Logger.writer.add_scalar"], "methods", ["None"], ["", "def", "write", "(", "self", ")", ":", "\n", "        ", "self", ".", "writer", ".", "add_scalar", "(", "'Total loss'", ",", "self", ".", "loss", ".", "avg", ",", "self", ".", "itr", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'BPP loss'", ",", "self", ".", "bpp_loss", ".", "avg", ",", "self", ".", "itr", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'MSE loss'", ",", "self", ".", "mse_loss", ".", "avg", ",", "self", ".", "itr", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'Aux loss'", ",", "self", ".", "aux_loss", ".", "avg", ",", "self", ".", "itr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.write_test": [[123, 134], ["writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar"], "methods", ["None"], ["", "def", "write_test", "(", "self", ",", "level", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "level_num", "==", "1", ":", "\n", "            ", "writer", "=", "self", ".", "writer", "\n", "", "else", ":", "\n", "            ", "writer", "=", "self", ".", "test_writers", "[", "level", "]", "\n", "", "writer", ".", "add_scalar", "(", "'[Test] Total loss'", ",", "self", ".", "loss", ".", "avg", ",", "self", ".", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "'[Test] BPP'", ",", "self", ".", "bpp_loss", ".", "avg", ",", "self", ".", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "'[Test] MSE loss'", ",", "self", ".", "mse_loss", ".", "avg", ",", "self", ".", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "'[Test] PSNR'", ",", "self", ".", "psnr", ".", "avg", ",", "self", ".", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "'[Test] MS-SSIM'", ",", "self", ".", "ms_ssim", ".", "avg", ",", "self", ".", "itr", ")", "\n", "writer", ".", "add_scalar", "(", "'[Test] Aux loss'", ",", "self", ".", "aux_loss", ".", "avg", ",", "self", ".", "itr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.get_config": [[16, 20], ["open", "yaml.load"], "function", ["None"], ["def", "get_config", "(", "config_path", ")", ":", "\n", "    ", "with", "open", "(", "config_path", ",", "'r'", ")", "as", "stream", ":", "\n", "        ", "config", "=", "yaml", ".", "load", "(", "stream", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.init": [[22, 37], ["os.path.join", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "os.makedirs", "utils.get_config", "shutil.copy2", "os.path.join"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.get_config"], ["", "", "def", "init", "(", "args", ")", ":", "\n", "    ", "base_dir", "=", "f'./results/{args.name}'", "\n", "snapshot_dir", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "'snapshots'", ")", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "'outputs'", ")", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "'logs'", ")", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "snapshot_dir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "config", "=", "get_config", "(", "args", ".", "config", ")", "\n", "try", ":", "\n", "        ", "copy2", "(", "args", ".", "config", ",", "os", ".", "path", ".", "join", "(", "base_dir", ",", "'config.yaml'", ")", ")", "\n", "", "except", "shutil", ".", "SameFileError", ":", "\n", "        ", "pass", "\n", "\n", "", "return", "config", ",", "base_dir", ",", "snapshot_dir", ",", "output_dir", ",", "log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.save_checkpoint": [[136, 146], ["torch.save", "torch.save", "model.state_dict", "optimizer.state_dict", "aux_optimizer.state_dict", "scaler.state_dict"], "function", ["None"], ["", "", "def", "save_checkpoint", "(", "filename", ",", "itr", ",", "model", ",", "optimizer", ",", "aux_optimizer", ",", "scaler", "=", "None", ")", ":", "\n", "    ", "snapshot", "=", "{", "\n", "'itr'", ":", "itr", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'aux_optimizer'", ":", "aux_optimizer", ".", "state_dict", "(", ")", "\n", "}", "\n", "if", "scaler", "is", "not", "None", ":", "\n", "        ", "snapshot", "[", "'scaler'", "]", "=", "scaler", ".", "state_dict", "(", ")", "\n", "", "torch", ".", "save", "(", "snapshot", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.load_checkpoint": [[148, 162], ["torch.load", "torch.load", "print", "model.load_state_dict", "optimizer.load_state_dict", "aux_optimizer.load_state_dict", "scaler.load_state_dict"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.load_state_dict", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.load_state_dict", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.load_state_dict", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.load_state_dict"], ["", "def", "load_checkpoint", "(", "path", ",", "model", ",", "optimizer", "=", "None", ",", "aux_optimizer", "=", "None", ",", "scaler", "=", "None", ",", "only_net", "=", "False", ")", ":", "\n", "    ", "snapshot", "=", "torch", ".", "load", "(", "path", ")", "\n", "itr", "=", "snapshot", "[", "'itr'", "]", "\n", "print", "(", "f'Loaded from {itr} iterations'", ")", "\n", "model", ".", "load_state_dict", "(", "snapshot", "[", "'model'", "]", ")", "\n", "if", "not", "only_net", ":", "\n", "        ", "if", "'optimizer'", "in", "snapshot", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "snapshot", "[", "'optimizer'", "]", ")", "\n", "", "if", "'aux_optimizer'", "in", "snapshot", ":", "\n", "            ", "aux_optimizer", ".", "load_state_dict", "(", "snapshot", "[", "'aux_optimizer'", "]", ")", "\n", "", "if", "scaler", "is", "not", "None", "and", "'scaler'", "in", "snapshot", ":", "\n", "            ", "scaler", ".", "load_state_dict", "(", "snapshot", "[", "'scaler'", "]", ")", "\n", "\n", "", "", "return", "itr", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.inverse_dict": [[172, 176], ["len", "len", "d.keys", "set", "d.items", "d.keys"], "function", ["None"], ["def", "inverse_dict", "(", "d", ")", ":", "\n", "# We assume dict values are unique...", "\n", "    ", "assert", "len", "(", "d", ".", "keys", "(", ")", ")", "==", "len", "(", "set", "(", "d", ".", "keys", "(", ")", ")", ")", "\n", "return", "{", "v", ":", "k", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.filesize": [[178, 182], ["pathlib.Path().is_file", "ValueError", "pathlib.Path().stat", "pathlib.Path", "pathlib.Path"], "function", ["None"], ["", "def", "filesize", "(", "filepath", ":", "str", ")", "->", "int", ":", "\n", "    ", "if", "not", "Path", "(", "filepath", ")", ".", "is_file", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'Invalid file \"{filepath}\".'", ")", "\n", "", "return", "Path", "(", "filepath", ")", ".", "stat", "(", ")", ".", "st_size", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.load_image": [[184, 186], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "load_image", "(", "filepath", ":", "str", ")", "->", "Image", ".", "Image", ":", "\n", "    ", "return", "Image", ".", "open", "(", "filepath", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.img2torch": [[188, 190], ["torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "img2torch", "(", "img", ":", "Image", ".", "Image", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "return", "ToTensor", "(", ")", "(", "img", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.torch2img": [[192, 194], ["torchvision.transforms.ToPILImage", "x.clamp_().squeeze", "x.clamp_"], "function", ["None"], ["", "def", "torch2img", "(", "x", ":", "torch", ".", "Tensor", ")", "->", "Image", ".", "Image", ":", "\n", "    ", "return", "ToPILImage", "(", ")", "(", "x", ".", "clamp_", "(", "0", ",", "1", ")", ".", "squeeze", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.write_uints": [[196, 198], ["fd.write", "struct.pack", "fmt.format", "len"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.write"], ["", "def", "write_uints", "(", "fd", ",", "values", ",", "fmt", "=", "\">{:d}I\"", ")", ":", "\n", "    ", "fd", ".", "write", "(", "struct", ".", "pack", "(", "fmt", ".", "format", "(", "len", "(", "values", ")", ")", ",", "*", "values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.write_uchars": [[200, 202], ["fd.write", "struct.pack", "fmt.format", "len"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.write"], ["", "def", "write_uchars", "(", "fd", ",", "values", ",", "fmt", "=", "\">{:d}B\"", ")", ":", "\n", "    ", "fd", ".", "write", "(", "struct", ".", "pack", "(", "fmt", ".", "format", "(", "len", "(", "values", ")", ")", ",", "*", "values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.read_uints": [[204, 207], ["struct.calcsize", "struct.unpack", "fmt.format", "fd.read"], "function", ["None"], ["", "def", "read_uints", "(", "fd", ",", "n", ",", "fmt", "=", "\">{:d}I\"", ")", ":", "\n", "    ", "sz", "=", "struct", ".", "calcsize", "(", "\"I\"", ")", "\n", "return", "struct", ".", "unpack", "(", "fmt", ".", "format", "(", "n", ")", ",", "fd", ".", "read", "(", "n", "*", "sz", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.read_uchars": [[209, 212], ["struct.calcsize", "struct.unpack", "fmt.format", "fd.read"], "function", ["None"], ["", "def", "read_uchars", "(", "fd", ",", "n", ",", "fmt", "=", "\">{:d}B\"", ")", ":", "\n", "    ", "sz", "=", "struct", ".", "calcsize", "(", "\"B\"", ")", "\n", "return", "struct", ".", "unpack", "(", "fmt", ".", "format", "(", "n", ")", ",", "fd", ".", "read", "(", "n", "*", "sz", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.write_bytes": [[214, 218], ["fd.write", "len", "struct.pack", "fmt.format", "len"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.write"], ["", "def", "write_bytes", "(", "fd", ",", "values", ",", "fmt", "=", "\">{:d}s\"", ")", ":", "\n", "    ", "if", "len", "(", "values", ")", "==", "0", ":", "\n", "        ", "return", "\n", "", "fd", ".", "write", "(", "struct", ".", "pack", "(", "fmt", ".", "format", "(", "len", "(", "values", ")", ")", ",", "values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.read_bytes": [[220, 223], ["struct.calcsize", "struct.unpack", "fmt.format", "fd.read"], "function", ["None"], ["", "def", "read_bytes", "(", "fd", ",", "n", ",", "fmt", "=", "\">{:d}s\"", ")", ":", "\n", "    ", "sz", "=", "struct", ".", "calcsize", "(", "\"s\"", ")", "\n", "return", "struct", ".", "unpack", "(", "fmt", ".", "format", "(", "n", ")", ",", "fd", ".", "read", "(", "n", "*", "sz", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.get_header": [[225, 234], ["None"], "function", ["None"], ["", "def", "get_header", "(", "model_name", ",", "metric", ",", "quality", ")", ":", "\n", "    ", "\"\"\"Format header information:\n    - 1 byte for model id\n    - 4 bits for metric\n    - 4 bits for quality param\n    \"\"\"", "\n", "metric", "=", "metric_ids", "[", "metric", "]", "\n", "code", "=", "(", "metric", "<<", "4", ")", "|", "(", "quality", "-", "1", "&", "0x0F", ")", "\n", "return", "0", ",", "0", "# model_ids[model_name], code", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.parse_header": [[236, 249], ["None"], "function", ["None"], ["", "def", "parse_header", "(", "header", ")", ":", "\n", "    ", "\"\"\"Read header information from 2 bytes:\n    - 1 byte for model id\n    - 4 bits for metric\n    - 4 bits for quality param\n    \"\"\"", "\n", "model_id", ",", "code", "=", "header", "\n", "quality", "=", "(", "code", "&", "0x0F", ")", "+", "1", "\n", "metric", "=", "code", ">>", "4", "\n", "return", "(", "\n", "model_id", ",", "# inverse_dict(model_ids)[model_id],", "\n", "metric", ",", "# inverse_dict(metric_ids)[metric],", "\n", "quality", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.pad": [[252, 265], ["torch.pad", "x.size", "x.size"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.pad"], ["", "def", "pad", "(", "x", ",", "p", "=", "2", "**", "6", ")", ":", "\n", "    ", "h", ",", "w", "=", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", "\n", "H", "=", "(", "h", "+", "p", "-", "1", ")", "//", "p", "*", "p", "\n", "W", "=", "(", "w", "+", "p", "-", "1", ")", "//", "p", "*", "p", "\n", "padding_left", "=", "(", "W", "-", "w", ")", "//", "2", "\n", "padding_right", "=", "W", "-", "w", "-", "padding_left", "\n", "padding_top", "=", "(", "H", "-", "h", ")", "//", "2", "\n", "padding_bottom", "=", "H", "-", "h", "-", "padding_top", "\n", "return", "F", ".", "pad", "(", "\n", "x", ",", "\n", "(", "padding_left", ",", "padding_right", ",", "padding_top", ",", "padding_bottom", ")", ",", "\n", "mode", "=", "\"constant\"", ",", "\n", "value", "=", "0", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.crop": [[268, 280], ["torch.pad", "x.size", "x.size"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.pad"], ["", "def", "crop", "(", "x", ",", "size", ")", ":", "\n", "    ", "H", ",", "W", "=", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", "\n", "h", ",", "w", "=", "size", "\n", "padding_left", "=", "(", "W", "-", "w", ")", "//", "2", "\n", "padding_right", "=", "W", "-", "w", "-", "padding_left", "\n", "padding_top", "=", "(", "H", "-", "h", ")", "//", "2", "\n", "padding_bottom", "=", "H", "-", "h", "-", "padding_top", "\n", "return", "F", ".", "pad", "(", "\n", "x", ",", "\n", "(", "-", "padding_left", ",", "-", "padding_right", ",", "-", "padding_top", ",", "-", "padding_bottom", ")", ",", "\n", "mode", "=", "\"constant\"", ",", "\n", "value", "=", "0", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils._encode": [[283, 323], ["compressai.set_entropy_coder", "time.time", "time.time", "utils.pad", "utils.get_header", "utils.filesize", "time.time", "torch.no_grad", "torch.no_grad", "pathlib.Path().open", "utils.write_uchars", "utils.write_uints", "utils.write_uints", "time.time", "print", "net.compress", "net.compress", "utils.write_uints", "utils.write_bytes", "float", "pathlib.Path", "len", "len"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.pad", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.get_header", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.filesize", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.write_uchars", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.write_uints", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.write_uints", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.compress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.compress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.write_uints", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.write_bytes"], ["", "def", "_encode", "(", "model", ",", "x", ":", "torch", ".", "Tensor", ",", "output", ":", "str", ",", "qmap", "=", "None", ",", "metric", "=", "'mse'", ",", "coder", "=", "'ans'", ",", "quality", "=", "1", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "compressai", ".", "set_entropy_coder", "(", "coder", ")", "\n", "enc_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "net", "=", "model", "\n", "load_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "\n", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "p", "=", "64", "\n", "x", "=", "pad", "(", "x", ",", "p", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "qmap", "is", "None", ":", "\n", "            ", "out", "=", "net", ".", "compress", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "net", ".", "compress", "(", "x", ",", "qmap", ")", "\n", "\n", "", "", "shape", "=", "out", "[", "\"shape\"", "]", "\n", "header", "=", "get_header", "(", "model", ",", "metric", ",", "quality", ")", "\n", "\n", "with", "Path", "(", "output", ")", ".", "open", "(", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "write_uchars", "(", "f", ",", "header", ")", "\n", "# write original image size", "\n", "write_uints", "(", "f", ",", "(", "h", ",", "w", ")", ")", "\n", "# write shape and number of encoded latents", "\n", "write_uints", "(", "f", ",", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "len", "(", "out", "[", "\"strings\"", "]", ")", ")", ")", "\n", "for", "s", "in", "out", "[", "\"strings\"", "]", ":", "\n", "            ", "write_uints", "(", "f", ",", "(", "len", "(", "s", "[", "0", "]", ")", ",", ")", ")", "\n", "write_bytes", "(", "f", ",", "s", "[", "0", "]", ")", "\n", "\n", "", "", "enc_time", "=", "time", ".", "time", "(", ")", "-", "enc_start", "\n", "size", "=", "filesize", "(", "output", ")", "\n", "bpp", "=", "float", "(", "size", ")", "*", "8", "/", "(", "h", "*", "w", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\n", "f\"{bpp:.4f} bpp |\"", "\n", "f\" Encoded in {enc_time:.4f}s (model loading: {load_time:.4f}s)\"", "\n", ")", "\n", "", "return", "bpp", ",", "out", ",", "enc_time", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils._decode": [[325, 353], ["compressai.set_entropy_coder", "time.time", "time.time", "utils.crop", "crop.clamp_", "pathlib.Path().open", "utils.parse_header", "utils.read_uints", "utils.read_uints", "range", "time.time", "torch.no_grad", "torch.no_grad", "net.decompress", "time.time", "print", "utils.read_uchars", "utils.read_uints", "utils.read_bytes", "strings.append", "pathlib.Path", "utils.read_uints"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.crop", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.parse_header", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.read_uints", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.read_uints", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.Logger.print", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.read_uchars", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.read_uints", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.read_bytes", "home.repos.pwc.inspect_result.micmic123_qmapcompression.None.utils.read_uints"], ["", "def", "_decode", "(", "model", ",", "inputpath", ",", "coder", "=", "'ans'", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "compressai", ".", "set_entropy_coder", "(", "coder", ")", "\n", "\n", "dec_start", "=", "time", ".", "time", "(", ")", "\n", "with", "Path", "(", "inputpath", ")", ".", "open", "(", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "model_", ",", "metric", ",", "quality", "=", "parse_header", "(", "read_uchars", "(", "f", ",", "2", ")", ")", "\n", "original_size", "=", "read_uints", "(", "f", ",", "2", ")", "\n", "shape", "=", "read_uints", "(", "f", ",", "2", ")", "\n", "strings", "=", "[", "]", "\n", "n_strings", "=", "read_uints", "(", "f", ",", "1", ")", "[", "0", "]", "\n", "for", "_", "in", "range", "(", "n_strings", ")", ":", "\n", "            ", "s", "=", "read_bytes", "(", "f", ",", "read_uints", "(", "f", ",", "1", ")", "[", "0", "]", ")", "\n", "strings", ".", "append", "(", "[", "s", "]", ")", "\n", "\n", "", "", "start", "=", "time", ".", "time", "(", ")", "\n", "net", "=", "model", "\n", "load_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "out", "=", "net", ".", "decompress", "(", "strings", ",", "shape", ")", "\n", "\n", "", "x_hat", "=", "crop", "(", "out", "[", "\"x_hat\"", "]", ",", "original_size", ")", "\n", "x_hat", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "dec_time", "=", "time", ".", "time", "(", ")", "-", "dec_start", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "f\"Decoded in {dec_time:.4f}s (model loading: {load_time:.4f}s)\"", ")", "\n", "\n", "", "return", "x_hat", ",", "dec_time", "\n", "", ""]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.ops.ste_round": [[4, 6], ["torch.round", "x.detach"], "function", ["None"], ["def", "ste_round", "(", "x", ")", ":", "\n", "    ", "return", "torch", ".", "round", "(", "x", ")", "-", "x", ".", "detach", "(", ")", "+", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.parametrizers.NonNegativeParametrizer.__init__": [[14, 24], ["torch.Module.__init__", "float", "float", "parametrizers.NonNegativeParametrizer.register_buffer", "bound_ops.LowerBound", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.__init__"], ["def", "__init__", "(", "self", ",", "minimum", "=", "0", ",", "reparam_offset", "=", "2", "**", "-", "18", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "minimum", "=", "float", "(", "minimum", ")", "\n", "self", ".", "reparam_offset", "=", "float", "(", "reparam_offset", ")", "\n", "\n", "pedestal", "=", "self", ".", "reparam_offset", "**", "2", "\n", "self", ".", "register_buffer", "(", "\"pedestal\"", ",", "torch", ".", "Tensor", "(", "[", "pedestal", "]", ")", ")", "\n", "bound", "=", "(", "self", ".", "minimum", "+", "self", ".", "reparam_offset", "**", "2", ")", "**", "0.5", "\n", "self", ".", "lower_bound", "=", "LowerBound", "(", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.parametrizers.NonNegativeParametrizer.init": [[25, 27], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "init", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "sqrt", "(", "torch", ".", "max", "(", "x", "+", "self", ".", "pedestal", ",", "self", ".", "pedestal", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.parametrizers.NonNegativeParametrizer.forward": [[28, 32], ["parametrizers.NonNegativeParametrizer.lower_bound"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.bound_ops.LowerBound.lower_bound"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "lower_bound", "(", "x", ")", "\n", "out", "=", "out", "**", "2", "-", "self", ".", "pedestal", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.bound_ops.LowerBoundFunction.forward": [[8, 12], ["ctx.save_for_backward", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input_", ",", "bound", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "input_", ",", "bound", ")", "\n", "return", "torch", ".", "max", "(", "input_", ",", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.bound_ops.LowerBoundFunction.backward": [[13, 18], ["pass_through_if.type"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "input_", ",", "bound", "=", "ctx", ".", "saved_tensors", "\n", "pass_through_if", "=", "(", "input_", ">=", "bound", ")", "|", "(", "grad_output", "<", "0", ")", "\n", "return", "pass_through_if", ".", "type", "(", "grad_output", ".", "dtype", ")", "*", "grad_output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.bound_ops.LowerBound.__init__": [[28, 31], ["torch.Module.__init__", "bound_ops.LowerBound.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "float"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.__init__"], ["def", "__init__", "(", "self", ",", "bound", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "\"bound\"", ",", "torch", ".", "Tensor", "(", "[", "float", "(", "bound", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.bound_ops.LowerBound.lower_bound": [[32, 35], ["LowerBoundFunction.apply"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "lower_bound", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "LowerBoundFunction", ".", "apply", "(", "x", ",", "self", ".", "bound", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.bound_ops.LowerBound.forward": [[36, 40], ["torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "bound_ops.LowerBound.lower_bound", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.bound_ops.LowerBound.lower_bound"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "torch", ".", "jit", ".", "is_scripting", "(", ")", ":", "\n", "            ", "return", "torch", ".", "max", "(", "x", ",", "self", ".", "bound", ")", "\n", "", "return", "self", ".", "lower_bound", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.models.SpatiallyAdaptiveCompression.__init__": [[13, 169], ["hyperpriors.ScaleHyperprior.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.Conv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "layers.SFTResblk", "layers.SFTResblk", "layers.Conv2d", "layers.SFT", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.Conv2d", "layers.SFT", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.Conv2d", "layers.SFTResblk", "layers.SFTResblk", "layers.SFTResblk", "layers.SFTResblk", "layers.UpConv2d", "layers.GDN1", "layers.SFT", "layers.UpConv2d", "layers.GDN1", "layers.SFT", "layers.UpConv2d", "layers.GDN1", "layers.SFT", "layers.UpConv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.__init__", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv"], ["    ", "def", "__init__", "(", "self", ",", "N", "=", "192", ",", "M", "=", "192", ",", "sft_ks", "=", "3", ",", "prior_nc", "=", "64", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "N", ",", "M", ",", "**", "kwargs", ")", "\n", "### condition networks ###", "\n", "# g_a,c", "\n", "self", ".", "qmap_feature_g1", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "4", ",", "prior_nc", "*", "4", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "4", ",", "prior_nc", "*", "2", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "2", ",", "prior_nc", ",", "3", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_g2", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_g3", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_g4", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_g5", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "\n", "# h_a,c", "\n", "self", ".", "qmap_feature_h1", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "M", "+", "1", ",", "prior_nc", "*", "4", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "4", ",", "prior_nc", "*", "2", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "2", ",", "prior_nc", ",", "3", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_h2", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_h3", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "\n", "# f_c", "\n", "self", ".", "qmap_feature_gs0", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "N", ",", "N", "//", "2", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "UpConv2d", "(", "N", "//", "2", ",", "N", "//", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "N", "//", "4", ",", "N", "//", "4", ",", "3", ",", "1", ")", "\n", ")", "\n", "\n", "# g_s,c", "\n", "self", ".", "qmap_feature_gs1", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "N", "+", "N", "//", "4", ",", "prior_nc", "*", "4", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "4", ",", "prior_nc", "*", "2", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "2", ",", "prior_nc", ",", "3", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_gs2", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_gs3", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_gs4", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_gs5", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "\n", "### compression networks ###", "\n", "# g_a, encoder", "\n", "self", ".", "g_a", "=", "None", "\n", "self", ".", "g_a0", "=", "Conv2d", "(", "3", ",", "N", "//", "4", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ")", "\n", "self", ".", "g_a1", "=", "GDN1", "(", "N", "//", "4", ")", "\n", "self", ".", "g_a2", "=", "SFT", "(", "N", "//", "4", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_a3", "=", "Conv2d", "(", "N", "//", "4", ",", "N", "//", "2", ")", "\n", "self", ".", "g_a4", "=", "GDN1", "(", "N", "//", "2", ")", "\n", "self", ".", "g_a5", "=", "SFT", "(", "N", "//", "2", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_a6", "=", "Conv2d", "(", "N", "//", "2", ",", "N", ")", "\n", "self", ".", "g_a7", "=", "GDN1", "(", "N", ")", "\n", "self", ".", "g_a8", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_a9", "=", "Conv2d", "(", "N", ",", "N", ")", "\n", "self", ".", "g_a10", "=", "GDN1", "(", "N", ")", "\n", "self", ".", "g_a11", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_a12", "=", "Conv2d", "(", "N", ",", "M", ")", "\n", "self", ".", "g_a13", "=", "SFTResblk", "(", "M", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "g_a14", "=", "SFTResblk", "(", "M", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "# h_a, hyper encoder", "\n", "self", ".", "h_a", "=", "None", "\n", "self", ".", "h_a0", "=", "Conv2d", "(", "M", ",", "N", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", "self", ".", "h_a1", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "h_a2", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "h_a3", "=", "Conv2d", "(", "N", ",", "N", ")", "\n", "self", ".", "h_a4", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "h_a5", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "h_a6", "=", "Conv2d", "(", "N", ",", "N", ")", "\n", "self", ".", "h_a7", "=", "SFTResblk", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "h_a8", "=", "SFTResblk", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "# g_s, decoder", "\n", "self", ".", "g_s", "=", "None", "\n", "self", ".", "g_s0", "=", "SFTResblk", "(", "M", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "g_s1", "=", "SFTResblk", "(", "M", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s2", "=", "UpConv2d", "(", "M", ",", "N", ")", "\n", "self", ".", "g_s3", "=", "GDN1", "(", "N", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s4", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s5", "=", "UpConv2d", "(", "N", ",", "N", ")", "\n", "self", ".", "g_s6", "=", "GDN1", "(", "N", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s7", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s8", "=", "UpConv2d", "(", "N", ",", "N", "//", "2", ")", "\n", "self", ".", "g_s9", "=", "GDN1", "(", "N", "//", "2", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s10", "=", "SFT", "(", "N", "//", "2", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s11", "=", "UpConv2d", "(", "N", "//", "2", ",", "N", "//", "4", ")", "\n", "self", ".", "g_s12", "=", "GDN1", "(", "N", "//", "4", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s13", "=", "SFT", "(", "N", "//", "4", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s14", "=", "Conv2d", "(", "N", "//", "4", ",", "3", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ")", "\n", "\n", "# h_s, hyper decoder", "\n", "self", ".", "h_s", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "N", ",", "M", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "UpConv2d", "(", "M", ",", "M", "*", "3", "//", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv", "(", "M", "*", "3", "//", "2", ",", "M", "*", "2", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.models.SpatiallyAdaptiveCompression.g_a": [[171, 197], ["models.SpatiallyAdaptiveCompression.qmap_feature_g1", "models.SpatiallyAdaptiveCompression.g_a0", "models.SpatiallyAdaptiveCompression.g_a1", "models.SpatiallyAdaptiveCompression.g_a2", "models.SpatiallyAdaptiveCompression.qmap_feature_g2", "models.SpatiallyAdaptiveCompression.g_a3", "models.SpatiallyAdaptiveCompression.g_a4", "models.SpatiallyAdaptiveCompression.g_a5", "models.SpatiallyAdaptiveCompression.qmap_feature_g3", "models.SpatiallyAdaptiveCompression.g_a6", "models.SpatiallyAdaptiveCompression.g_a7", "models.SpatiallyAdaptiveCompression.g_a8", "models.SpatiallyAdaptiveCompression.qmap_feature_g4", "models.SpatiallyAdaptiveCompression.g_a9", "models.SpatiallyAdaptiveCompression.g_a10", "models.SpatiallyAdaptiveCompression.g_a11", "models.SpatiallyAdaptiveCompression.qmap_feature_g5", "models.SpatiallyAdaptiveCompression.g_a12", "models.SpatiallyAdaptiveCompression.g_a13", "models.SpatiallyAdaptiveCompression.g_a14", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "g_a", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "qmap", "=", "self", ".", "qmap_feature_g1", "(", "torch", ".", "cat", "(", "[", "qmap", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "g_a0", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a1", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a2", "(", "x", ",", "qmap", ")", "\n", "\n", "qmap", "=", "self", ".", "qmap_feature_g2", "(", "qmap", ")", "\n", "x", "=", "self", ".", "g_a3", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a4", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a5", "(", "x", ",", "qmap", ")", "\n", "\n", "qmap", "=", "self", ".", "qmap_feature_g3", "(", "qmap", ")", "\n", "x", "=", "self", ".", "g_a6", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a7", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a8", "(", "x", ",", "qmap", ")", "\n", "\n", "qmap", "=", "self", ".", "qmap_feature_g4", "(", "qmap", ")", "\n", "x", "=", "self", ".", "g_a9", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a10", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a11", "(", "x", ",", "qmap", ")", "\n", "\n", "qmap", "=", "self", ".", "qmap_feature_g5", "(", "qmap", ")", "\n", "x", "=", "self", ".", "g_a12", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a13", "(", "x", ",", "qmap", ")", "\n", "x", "=", "self", ".", "g_a14", "(", "x", ",", "qmap", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.models.SpatiallyAdaptiveCompression.h_a": [[198, 215], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "models.SpatiallyAdaptiveCompression.qmap_feature_h1", "models.SpatiallyAdaptiveCompression.h_a0", "models.SpatiallyAdaptiveCompression.h_a1", "models.SpatiallyAdaptiveCompression.h_a2", "models.SpatiallyAdaptiveCompression.qmap_feature_h2", "models.SpatiallyAdaptiveCompression.h_a3", "models.SpatiallyAdaptiveCompression.h_a4", "models.SpatiallyAdaptiveCompression.h_a5", "models.SpatiallyAdaptiveCompression.qmap_feature_h3", "models.SpatiallyAdaptiveCompression.h_a6", "models.SpatiallyAdaptiveCompression.h_a7", "models.SpatiallyAdaptiveCompression.h_a8", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.SpatiallyAdaptiveCompression.size"], "methods", ["None"], ["", "def", "h_a", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "qmap", "=", "F", ".", "adaptive_avg_pool2d", "(", "qmap", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "qmap", "=", "self", ".", "qmap_feature_h1", "(", "torch", ".", "cat", "(", "[", "qmap", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "h_a0", "(", "x", ")", "\n", "x", "=", "self", ".", "h_a1", "(", "x", ",", "qmap", ")", "\n", "x", "=", "self", ".", "h_a2", "(", "x", ")", "\n", "\n", "qmap", "=", "self", ".", "qmap_feature_h2", "(", "qmap", ")", "\n", "x", "=", "self", ".", "h_a3", "(", "x", ")", "\n", "x", "=", "self", ".", "h_a4", "(", "x", ",", "qmap", ")", "\n", "x", "=", "self", ".", "h_a5", "(", "x", ")", "\n", "\n", "qmap", "=", "self", ".", "qmap_feature_h3", "(", "qmap", ")", "\n", "x", "=", "self", ".", "h_a6", "(", "x", ")", "\n", "x", "=", "self", ".", "h_a7", "(", "x", ",", "qmap", ")", "\n", "x", "=", "self", ".", "h_a8", "(", "x", ",", "qmap", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.models.SpatiallyAdaptiveCompression.g_s": [[216, 244], ["models.SpatiallyAdaptiveCompression.qmap_feature_gs0", "models.SpatiallyAdaptiveCompression.qmap_feature_gs1", "models.SpatiallyAdaptiveCompression.g_s0", "models.SpatiallyAdaptiveCompression.g_s1", "models.SpatiallyAdaptiveCompression.qmap_feature_gs2", "models.SpatiallyAdaptiveCompression.g_s2", "models.SpatiallyAdaptiveCompression.g_s3", "models.SpatiallyAdaptiveCompression.g_s4", "models.SpatiallyAdaptiveCompression.qmap_feature_gs3", "models.SpatiallyAdaptiveCompression.g_s5", "models.SpatiallyAdaptiveCompression.g_s6", "models.SpatiallyAdaptiveCompression.g_s7", "models.SpatiallyAdaptiveCompression.qmap_feature_gs4", "models.SpatiallyAdaptiveCompression.g_s8", "models.SpatiallyAdaptiveCompression.g_s9", "models.SpatiallyAdaptiveCompression.g_s10", "models.SpatiallyAdaptiveCompression.qmap_feature_gs5", "models.SpatiallyAdaptiveCompression.g_s11", "models.SpatiallyAdaptiveCompression.g_s12", "models.SpatiallyAdaptiveCompression.g_s13", "models.SpatiallyAdaptiveCompression.g_s14", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "g_s", "(", "self", ",", "x", ",", "z", ")", ":", "\n", "        ", "w", "=", "self", ".", "qmap_feature_gs0", "(", "z", ")", "\n", "w", "=", "self", ".", "qmap_feature_gs1", "(", "torch", ".", "cat", "(", "[", "w", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "g_s0", "(", "x", ",", "w", ")", "\n", "x", "=", "self", ".", "g_s1", "(", "x", ",", "w", ")", "\n", "\n", "w", "=", "self", ".", "qmap_feature_gs2", "(", "w", ")", "\n", "x", "=", "self", ".", "g_s2", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s3", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s4", "(", "x", ",", "w", ")", "\n", "\n", "w", "=", "self", ".", "qmap_feature_gs3", "(", "w", ")", "\n", "x", "=", "self", ".", "g_s5", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s6", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s7", "(", "x", ",", "w", ")", "\n", "\n", "w", "=", "self", ".", "qmap_feature_gs4", "(", "w", ")", "\n", "x", "=", "self", ".", "g_s8", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s9", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s10", "(", "x", ",", "w", ")", "\n", "\n", "w", "=", "self", ".", "qmap_feature_gs5", "(", "w", ")", "\n", "x", "=", "self", ".", "g_s11", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s12", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s13", "(", "x", ",", "w", ")", "\n", "\n", "x", "=", "self", ".", "g_s14", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.models.SpatiallyAdaptiveCompression.forward": [[245, 258], ["models.SpatiallyAdaptiveCompression.g_a", "models.SpatiallyAdaptiveCompression.h_a", "models.SpatiallyAdaptiveCompression.entropy_bottleneck", "models.SpatiallyAdaptiveCompression.h_s", "models.SpatiallyAdaptiveCompression.chunk", "models.SpatiallyAdaptiveCompression.gaussian_conditional", "models.SpatiallyAdaptiveCompression.g_s"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.h_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_s"], ["", "def", "forward", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "y", "=", "self", ".", "g_a", "(", "x", ",", "qmap", ")", "\n", "z", "=", "self", ".", "h_a", "(", "y", ",", "qmap", ")", "\n", "z_hat", ",", "z_likelihoods", "=", "self", ".", "entropy_bottleneck", "(", "z", ")", "\n", "\n", "gaussian_params", "=", "self", ".", "h_s", "(", "z_hat", ")", "\n", "scales_hat", ",", "means_hat", "=", "gaussian_params", ".", "chunk", "(", "2", ",", "1", ")", "\n", "y_hat", ",", "y_likelihoods", "=", "self", ".", "gaussian_conditional", "(", "y", ",", "scales_hat", ",", "means", "=", "means_hat", ")", "\n", "x_hat", "=", "self", ".", "g_s", "(", "y_hat", ",", "z_hat", ")", "\n", "\n", "return", "{", "\n", "\"x_hat\"", ":", "x_hat", ",", "\n", "\"likelihoods\"", ":", "{", "\"y\"", ":", "y_likelihoods", ",", "\"z\"", ":", "z_likelihoods", "}", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.models.SpatiallyAdaptiveCompression.compress": [[260, 272], ["models.SpatiallyAdaptiveCompression.g_a", "models.SpatiallyAdaptiveCompression.h_a", "models.SpatiallyAdaptiveCompression.entropy_bottleneck.compress", "models.SpatiallyAdaptiveCompression.entropy_bottleneck.decompress", "models.SpatiallyAdaptiveCompression.h_s", "models.SpatiallyAdaptiveCompression.chunk", "models.SpatiallyAdaptiveCompression.gaussian_conditional.build_indexes", "models.SpatiallyAdaptiveCompression.gaussian_conditional.compress", "models.SpatiallyAdaptiveCompression.size", "models.SpatiallyAdaptiveCompression.size"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.h_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.compress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional.build_indexes", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.compress"], ["", "def", "compress", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "y", "=", "self", ".", "g_a", "(", "x", ",", "qmap", ")", "\n", "z", "=", "self", ".", "h_a", "(", "y", ",", "qmap", ")", "\n", "\n", "z_strings", "=", "self", ".", "entropy_bottleneck", ".", "compress", "(", "z", ")", "\n", "z_hat", "=", "self", ".", "entropy_bottleneck", ".", "decompress", "(", "z_strings", ",", "z", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", "\n", "\n", "gaussian_params", "=", "self", ".", "h_s", "(", "z_hat", ")", "\n", "scales_hat", ",", "means_hat", "=", "gaussian_params", ".", "chunk", "(", "2", ",", "1", ")", "\n", "indexes", "=", "self", ".", "gaussian_conditional", ".", "build_indexes", "(", "scales_hat", ")", "\n", "y_strings", "=", "self", ".", "gaussian_conditional", ".", "compress", "(", "y", ",", "indexes", ",", "means", "=", "means_hat", ")", "\n", "return", "{", "\"strings\"", ":", "[", "y_strings", ",", "z_strings", "]", ",", "\"shape\"", ":", "z", ".", "size", "(", ")", "[", "-", "2", ":", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.models.SpatiallyAdaptiveCompression.decompress": [[273, 284], ["models.SpatiallyAdaptiveCompression.entropy_bottleneck.decompress", "models.SpatiallyAdaptiveCompression.h_s", "models.SpatiallyAdaptiveCompression.chunk", "models.SpatiallyAdaptiveCompression.gaussian_conditional.build_indexes", "models.SpatiallyAdaptiveCompression.gaussian_conditional.decompress", "models.SpatiallyAdaptiveCompression.g_s().clamp_", "isinstance", "len", "models.SpatiallyAdaptiveCompression.g_s"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional.build_indexes", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_s"], ["", "def", "decompress", "(", "self", ",", "strings", ",", "shape", ")", ":", "\n", "        ", "assert", "isinstance", "(", "strings", ",", "list", ")", "and", "len", "(", "strings", ")", "==", "2", "\n", "z_hat", "=", "self", ".", "entropy_bottleneck", ".", "decompress", "(", "strings", "[", "1", "]", ",", "shape", ")", "\n", "gaussian_params", "=", "self", ".", "h_s", "(", "z_hat", ")", "\n", "scales_hat", ",", "means_hat", "=", "gaussian_params", ".", "chunk", "(", "2", ",", "1", ")", "\n", "indexes", "=", "self", ".", "gaussian_conditional", ".", "build_indexes", "(", "scales_hat", ")", "\n", "y_hat", "=", "self", ".", "gaussian_conditional", ".", "decompress", "(", "\n", "strings", "[", "0", "]", ",", "indexes", ",", "means", "=", "means_hat", "\n", ")", "\n", "x_hat", "=", "self", ".", "g_s", "(", "y_hat", ",", "z_hat", ")", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "return", "{", "\"x_hat\"", ":", "x_hat", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_SFT.__init__": [[13, 133], ["hyperpriors.ScaleHyperprior.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.Conv2d", "layers.GDN1", "layers.Conv2d", "layers.GDN1", "layers.Conv2d", "layers.GDN1", "layers.Conv2d", "layers.GDN1", "layers.Conv2d", "layers.UpConv2d", "layers.GDN1", "layers.UpConv2d", "layers.GDN1", "layers.UpConv2d", "layers.GDN1", "layers.UpConv2d", "layers.GDN1", "layers.Conv2d", "layers.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.__init__", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv"], ["    ", "def", "__init__", "(", "self", ",", "N", "=", "192", ",", "M", "=", "192", ",", "prior_nc", "=", "64", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "N", ",", "M", ",", "**", "kwargs", ")", "\n", "# featured qmap", "\n", "self", ".", "qmap_feature_g1", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "4", ",", "prior_nc", "*", "4", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "4", ",", "prior_nc", "*", "2", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "2", ",", "prior_nc", ",", "3", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_g2", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_g3", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_g4", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_g5", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_h1", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "M", "+", "1", ",", "prior_nc", "*", "4", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "4", ",", "prior_nc", "*", "2", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "2", ",", "prior_nc", ",", "3", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_h2", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_h3", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "\n", "# for decoder", "\n", "self", ".", "qmap_feature_gs0", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "N", ",", "N", "//", "2", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "UpConv2d", "(", "N", "//", "2", ",", "N", "//", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "N", "//", "4", ",", "N", "//", "4", ",", "3", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_gs1", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "N", "+", "N", "//", "4", ",", "prior_nc", "*", "4", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "4", ",", "prior_nc", "*", "2", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "2", ",", "prior_nc", ",", "3", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_gs2", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_gs3", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_gs4", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_gs5", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "\n", "self", ".", "g_a", "=", "None", "\n", "self", ".", "g_a0", "=", "Conv2d", "(", "3", "+", "prior_nc", ",", "N", "//", "4", ",", "stride", "=", "1", ",", "kernel_size", "=", "5", ")", "\n", "self", ".", "g_a1", "=", "GDN1", "(", "N", "//", "4", ")", "\n", "self", ".", "g_a2", "=", "Conv2d", "(", "N", "//", "4", "+", "prior_nc", ",", "N", "//", "2", ")", "\n", "self", ".", "g_a3", "=", "GDN1", "(", "N", "//", "2", ")", "\n", "self", ".", "g_a4", "=", "Conv2d", "(", "N", "//", "2", "+", "prior_nc", ",", "N", ")", "\n", "self", ".", "g_a5", "=", "GDN1", "(", "N", ")", "\n", "self", ".", "g_a6", "=", "Conv2d", "(", "N", "+", "prior_nc", ",", "N", ")", "\n", "self", ".", "g_a7", "=", "GDN1", "(", "N", ")", "\n", "self", ".", "g_a8", "=", "Conv2d", "(", "N", "+", "prior_nc", ",", "M", ")", "\n", "\n", "self", ".", "g_s", "=", "None", "\n", "self", ".", "g_s0", "=", "UpConv2d", "(", "M", "+", "prior_nc", ",", "N", ")", "\n", "self", ".", "g_s1", "=", "GDN1", "(", "N", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s2", "=", "UpConv2d", "(", "N", "+", "prior_nc", ",", "N", ")", "\n", "self", ".", "g_s3", "=", "GDN1", "(", "N", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s4", "=", "UpConv2d", "(", "N", "+", "prior_nc", ",", "N", "//", "2", ")", "\n", "self", ".", "g_s5", "=", "GDN1", "(", "N", "//", "2", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s6", "=", "UpConv2d", "(", "N", "//", "2", "+", "prior_nc", ",", "N", "//", "4", ")", "\n", "self", ".", "g_s7", "=", "GDN1", "(", "N", "//", "4", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s8", "=", "Conv2d", "(", "N", "//", "4", "+", "prior_nc", ",", "3", ",", "stride", "=", "1", ",", "kernel_size", "=", "5", ")", "\n", "\n", "self", ".", "h_a", "=", "None", "\n", "self", ".", "h_a0", "=", "Conv2d", "(", "M", "+", "prior_nc", ",", "N", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "h_a1", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "h_a2", "=", "Conv2d", "(", "N", "+", "prior_nc", ",", "N", ")", "\n", "self", ".", "h_a3", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "h_a4", "=", "Conv2d", "(", "N", "+", "prior_nc", ",", "N", ")", "\n", "\n", "# hyperprior decoder", "\n", "self", ".", "h_s", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "N", ",", "M", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "UpConv2d", "(", "M", ",", "M", "*", "3", "//", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv", "(", "M", "*", "3", "//", "2", ",", "M", "*", "2", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_SFT._down_like": [[135, 137], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "target.size"], "methods", ["None"], ["", "def", "_down_like", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "return", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "target", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_SFT._down": [[138, 140], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "x.size", "x.size"], "methods", ["None"], ["", "def", "_down", "(", "self", ",", "x", ",", "scale", "=", "16", ")", ":", "\n", "        ", "return", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", "//", "scale", ",", "x", ".", "size", "(", "3", ")", "//", "scale", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_SFT.g_a": [[141, 162], ["ablations.Ablation_wo_SFT.qmap_feature_g1", "ablations.Ablation_wo_SFT.g_a0", "ablations.Ablation_wo_SFT.g_a1", "ablations.Ablation_wo_SFT.qmap_feature_g2", "ablations.Ablation_wo_SFT.g_a2", "ablations.Ablation_wo_SFT.g_a3", "ablations.Ablation_wo_SFT.qmap_feature_g3", "ablations.Ablation_wo_SFT.g_a4", "ablations.Ablation_wo_SFT.g_a5", "ablations.Ablation_wo_SFT.qmap_feature_g4", "ablations.Ablation_wo_SFT.g_a6", "ablations.Ablation_wo_SFT.g_a7", "ablations.Ablation_wo_SFT.qmap_feature_g5", "ablations.Ablation_wo_SFT.g_a8", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "g_a", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "qmap", "=", "self", ".", "qmap_feature_g1", "(", "torch", ".", "cat", "(", "[", "qmap", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "g_a0", "(", "torch", ".", "cat", "(", "[", "qmap", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "g_a1", "(", "x", ")", "\n", "\n", "qmap", "=", "self", ".", "qmap_feature_g2", "(", "qmap", ")", "\n", "x", "=", "self", ".", "g_a2", "(", "torch", ".", "cat", "(", "[", "qmap", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "g_a3", "(", "x", ")", "\n", "\n", "qmap", "=", "self", ".", "qmap_feature_g3", "(", "qmap", ")", "\n", "x", "=", "self", ".", "g_a4", "(", "torch", ".", "cat", "(", "[", "qmap", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "g_a5", "(", "x", ")", "\n", "\n", "qmap", "=", "self", ".", "qmap_feature_g4", "(", "qmap", ")", "\n", "x", "=", "self", ".", "g_a6", "(", "torch", ".", "cat", "(", "[", "qmap", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "g_a7", "(", "x", ")", "\n", "\n", "qmap", "=", "self", ".", "qmap_feature_g5", "(", "qmap", ")", "\n", "x", "=", "self", ".", "g_a8", "(", "torch", ".", "cat", "(", "[", "qmap", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_SFT.g_s": [[163, 185], ["ablations.Ablation_wo_SFT.qmap_feature_gs0", "ablations.Ablation_wo_SFT.qmap_feature_gs1", "ablations.Ablation_wo_SFT.g_s0", "ablations.Ablation_wo_SFT.g_s1", "ablations.Ablation_wo_SFT.qmap_feature_gs2", "ablations.Ablation_wo_SFT.g_s2", "ablations.Ablation_wo_SFT.g_s3", "ablations.Ablation_wo_SFT.qmap_feature_gs3", "ablations.Ablation_wo_SFT.g_s4", "ablations.Ablation_wo_SFT.g_s5", "ablations.Ablation_wo_SFT.qmap_feature_gs4", "ablations.Ablation_wo_SFT.g_s6", "ablations.Ablation_wo_SFT.g_s7", "ablations.Ablation_wo_SFT.qmap_feature_gs5", "ablations.Ablation_wo_SFT.g_s8", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "g_s", "(", "self", ",", "x", ",", "z", ")", ":", "\n", "        ", "w", "=", "self", ".", "qmap_feature_gs0", "(", "z", ")", "\n", "w", "=", "self", ".", "qmap_feature_gs1", "(", "torch", ".", "cat", "(", "[", "w", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "g_s0", "(", "torch", ".", "cat", "(", "[", "w", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "g_s1", "(", "x", ")", "\n", "\n", "w", "=", "self", ".", "qmap_feature_gs2", "(", "w", ")", "\n", "x", "=", "self", ".", "g_s2", "(", "torch", ".", "cat", "(", "[", "w", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "g_s3", "(", "x", ")", "\n", "\n", "w", "=", "self", ".", "qmap_feature_gs3", "(", "w", ")", "\n", "x", "=", "self", ".", "g_s4", "(", "torch", ".", "cat", "(", "[", "w", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "g_s5", "(", "x", ")", "\n", "\n", "w", "=", "self", ".", "qmap_feature_gs4", "(", "w", ")", "\n", "x", "=", "self", ".", "g_s6", "(", "torch", ".", "cat", "(", "[", "w", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "g_s7", "(", "x", ")", "\n", "\n", "w", "=", "self", ".", "qmap_feature_gs5", "(", "w", ")", "\n", "x", "=", "self", ".", "g_s8", "(", "torch", ".", "cat", "(", "[", "w", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_SFT.h_a": [[186, 199], ["ablations.Ablation_wo_SFT.qmap_feature_h1", "ablations.Ablation_wo_SFT.h_a0", "ablations.Ablation_wo_SFT.h_a1", "ablations.Ablation_wo_SFT.qmap_feature_h2", "ablations.Ablation_wo_SFT.h_a2", "ablations.Ablation_wo_SFT.h_a3", "ablations.Ablation_wo_SFT.qmap_feature_h3", "ablations.Ablation_wo_SFT.h_a4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ablations.Ablation_wo_SFT._down_like"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC._down_like"], ["", "def", "h_a", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "qmap", "=", "self", ".", "qmap_feature_h1", "(", "torch", ".", "cat", "(", "[", "self", ".", "_down_like", "(", "qmap", ",", "x", ")", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "h_a0", "(", "torch", ".", "cat", "(", "[", "qmap", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "h_a1", "(", "x", ")", "\n", "\n", "qmap", "=", "self", ".", "qmap_feature_h2", "(", "qmap", ")", "\n", "x", "=", "self", ".", "h_a2", "(", "torch", ".", "cat", "(", "[", "qmap", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "h_a3", "(", "x", ")", "\n", "\n", "qmap", "=", "self", ".", "qmap_feature_h3", "(", "qmap", ")", "\n", "x", "=", "self", ".", "h_a4", "(", "torch", ".", "cat", "(", "[", "qmap", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_SFT.forward": [[201, 214], ["ablations.Ablation_wo_SFT.g_a", "ablations.Ablation_wo_SFT.h_a", "ablations.Ablation_wo_SFT.entropy_bottleneck", "ablations.Ablation_wo_SFT.h_s", "ablations.Ablation_wo_SFT.chunk", "ablations.Ablation_wo_SFT.gaussian_conditional", "ablations.Ablation_wo_SFT.g_s"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.h_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_s"], ["", "def", "forward", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "y", "=", "self", ".", "g_a", "(", "x", ",", "qmap", ")", "\n", "z", "=", "self", ".", "h_a", "(", "y", ",", "qmap", ")", "\n", "z_hat", ",", "z_likelihoods", "=", "self", ".", "entropy_bottleneck", "(", "z", ")", "\n", "\n", "gaussian_params", "=", "self", ".", "h_s", "(", "z_hat", ")", "\n", "scales_hat", ",", "means_hat", "=", "gaussian_params", ".", "chunk", "(", "2", ",", "1", ")", "\n", "y_hat", ",", "y_likelihoods", "=", "self", ".", "gaussian_conditional", "(", "y", ",", "scales_hat", ",", "means", "=", "means_hat", ")", "\n", "x_hat", "=", "self", ".", "g_s", "(", "y_hat", ",", "z_hat", ")", "\n", "\n", "return", "{", "\n", "\"x_hat\"", ":", "x_hat", ",", "\n", "\"likelihoods\"", ":", "{", "\"y\"", ":", "y_likelihoods", ",", "\"z\"", ":", "z_likelihoods", "}", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_SFT.compress": [[216, 228], ["ablations.Ablation_wo_SFT.g_a", "ablations.Ablation_wo_SFT.h_a", "ablations.Ablation_wo_SFT.entropy_bottleneck.compress", "ablations.Ablation_wo_SFT.entropy_bottleneck.decompress", "ablations.Ablation_wo_SFT.h_s", "ablations.Ablation_wo_SFT.chunk", "ablations.Ablation_wo_SFT.gaussian_conditional.build_indexes", "ablations.Ablation_wo_SFT.gaussian_conditional.compress", "ablations.Ablation_wo_SFT.size", "ablations.Ablation_wo_SFT.size"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.h_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.compress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional.build_indexes", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.compress"], ["", "def", "compress", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "y", "=", "self", ".", "g_a", "(", "x", ",", "qmap", ")", "\n", "z", "=", "self", ".", "h_a", "(", "y", ",", "qmap", ")", "\n", "\n", "z_strings", "=", "self", ".", "entropy_bottleneck", ".", "compress", "(", "z", ")", "\n", "z_hat", "=", "self", ".", "entropy_bottleneck", ".", "decompress", "(", "z_strings", ",", "z", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", "\n", "\n", "gaussian_params", "=", "self", ".", "h_s", "(", "z_hat", ")", "\n", "scales_hat", ",", "means_hat", "=", "gaussian_params", ".", "chunk", "(", "2", ",", "1", ")", "\n", "indexes", "=", "self", ".", "gaussian_conditional", ".", "build_indexes", "(", "scales_hat", ")", "\n", "y_strings", "=", "self", ".", "gaussian_conditional", ".", "compress", "(", "y", ",", "indexes", ",", "means", "=", "means_hat", ")", "\n", "return", "{", "\"strings\"", ":", "[", "y_strings", ",", "z_strings", "]", ",", "\"shape\"", ":", "z", ".", "size", "(", ")", "[", "-", "2", ":", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_SFT.decompress": [[229, 240], ["ablations.Ablation_wo_SFT.entropy_bottleneck.decompress", "ablations.Ablation_wo_SFT.h_s", "ablations.Ablation_wo_SFT.chunk", "ablations.Ablation_wo_SFT.gaussian_conditional.build_indexes", "ablations.Ablation_wo_SFT.gaussian_conditional.decompress", "ablations.Ablation_wo_SFT.g_s().clamp_", "isinstance", "len", "ablations.Ablation_wo_SFT.g_s"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional.build_indexes", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_s"], ["", "def", "decompress", "(", "self", ",", "strings", ",", "shape", ")", ":", "\n", "        ", "assert", "isinstance", "(", "strings", ",", "list", ")", "and", "len", "(", "strings", ")", "==", "2", "\n", "z_hat", "=", "self", ".", "entropy_bottleneck", ".", "decompress", "(", "strings", "[", "1", "]", ",", "shape", ")", "\n", "gaussian_params", "=", "self", ".", "h_s", "(", "z_hat", ")", "\n", "scales_hat", ",", "means_hat", "=", "gaussian_params", ".", "chunk", "(", "2", ",", "1", ")", "\n", "indexes", "=", "self", ".", "gaussian_conditional", ".", "build_indexes", "(", "scales_hat", ")", "\n", "y_hat", "=", "self", ".", "gaussian_conditional", ".", "decompress", "(", "\n", "strings", "[", "0", "]", ",", "indexes", ",", "means", "=", "means_hat", "\n", ")", "\n", "x_hat", "=", "self", ".", "g_s", "(", "y_hat", ",", "z_hat", ")", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "return", "{", "\"x_hat\"", ":", "x_hat", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_SC.__init__": [[243, 393], ["hyperpriors.ScaleHyperprior.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.Conv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "layers.SFTResblk", "layers.SFTResblk", "layers.Conv2d", "layers.SFT", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.Conv2d", "layers.SFT", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.Conv2d", "layers.SFTResblk", "layers.SFTResblk", "layers.SFTResblk", "layers.SFTResblk", "layers.UpConv2d", "layers.GDN1", "layers.SFT", "layers.UpConv2d", "layers.GDN1", "layers.SFT", "layers.UpConv2d", "layers.GDN1", "layers.SFT", "layers.UpConv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.__init__", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv"], ["    ", "def", "__init__", "(", "self", ",", "N", "=", "192", ",", "M", "=", "192", ",", "sft_ks", "=", "3", ",", "prior_nc", "=", "64", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "N", ",", "M", ",", "**", "kwargs", ")", "\n", "# featured qmap", "\n", "self", ".", "qmap_feature_g1", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "1", ",", "prior_nc", "*", "4", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "4", ",", "prior_nc", "*", "2", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "2", ",", "prior_nc", ",", "3", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_g2", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_g3", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_g4", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_g5", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_h1", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "1", ",", "prior_nc", "*", "4", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "4", ",", "prior_nc", "*", "2", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "2", ",", "prior_nc", ",", "3", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_h2", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_h3", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "\n", "# for decoder", "\n", "self", ".", "qmap_feature_gs0", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "N", ",", "N", "//", "2", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "UpConv2d", "(", "N", "//", "2", ",", "N", "//", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "N", "//", "4", ",", "N", "//", "4", ",", "3", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_gs1", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "N", "//", "4", ",", "prior_nc", "*", "4", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "4", ",", "prior_nc", "*", "2", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "2", ",", "prior_nc", ",", "3", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_gs2", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_gs3", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_gs4", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_gs5", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "prior_nc", ",", "prior_nc", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", ",", "prior_nc", ",", "1", ",", "1", ")", "\n", ")", "\n", "\n", "# main encoder", "\n", "self", ".", "g_a", "=", "None", "\n", "self", ".", "g_a0", "=", "Conv2d", "(", "3", ",", "N", "//", "4", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ")", "\n", "self", ".", "g_a1", "=", "GDN1", "(", "N", "//", "4", ")", "\n", "self", ".", "g_a2", "=", "SFT", "(", "N", "//", "4", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_a3", "=", "Conv2d", "(", "N", "//", "4", ",", "N", "//", "2", ")", "\n", "self", ".", "g_a4", "=", "GDN1", "(", "N", "//", "2", ")", "\n", "self", ".", "g_a5", "=", "SFT", "(", "N", "//", "2", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_a6", "=", "Conv2d", "(", "N", "//", "2", ",", "N", ")", "\n", "self", ".", "g_a7", "=", "GDN1", "(", "N", ")", "\n", "self", ".", "g_a8", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_a9", "=", "Conv2d", "(", "N", ",", "N", ")", "\n", "self", ".", "g_a10", "=", "GDN1", "(", "N", ")", "\n", "self", ".", "g_a11", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_a12", "=", "Conv2d", "(", "N", ",", "M", ")", "\n", "self", ".", "g_a13", "=", "SFTResblk", "(", "M", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "g_a14", "=", "SFTResblk", "(", "M", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "# hyperprior encoder", "\n", "self", ".", "h_a", "=", "None", "\n", "self", ".", "h_a0", "=", "Conv2d", "(", "M", ",", "N", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", "self", ".", "h_a1", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "h_a2", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "h_a3", "=", "Conv2d", "(", "N", ",", "N", ")", "\n", "self", ".", "h_a4", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "h_a5", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "h_a6", "=", "Conv2d", "(", "N", ",", "N", ")", "\n", "self", ".", "h_a7", "=", "SFTResblk", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "h_a8", "=", "SFTResblk", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "# main decoder", "\n", "self", ".", "g_s", "=", "None", "\n", "self", ".", "g_s0", "=", "SFTResblk", "(", "M", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "g_s1", "=", "SFTResblk", "(", "M", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s2", "=", "UpConv2d", "(", "M", ",", "N", ")", "\n", "self", ".", "g_s3", "=", "GDN1", "(", "N", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s4", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s5", "=", "UpConv2d", "(", "N", ",", "N", ")", "\n", "self", ".", "g_s6", "=", "GDN1", "(", "N", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s7", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s8", "=", "UpConv2d", "(", "N", ",", "N", "//", "2", ")", "\n", "self", ".", "g_s9", "=", "GDN1", "(", "N", "//", "2", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s10", "=", "SFT", "(", "N", "//", "2", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s11", "=", "UpConv2d", "(", "N", "//", "2", ",", "N", "//", "4", ")", "\n", "self", ".", "g_s12", "=", "GDN1", "(", "N", "//", "4", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s13", "=", "SFT", "(", "N", "//", "4", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s14", "=", "Conv2d", "(", "N", "//", "4", ",", "3", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ")", "\n", "\n", "# hyperprior decoder", "\n", "self", ".", "h_s", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "N", ",", "M", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "UpConv2d", "(", "M", ",", "M", "*", "3", "//", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv", "(", "M", "*", "3", "//", "2", ",", "M", "*", "2", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_SC._down_like": [[396, 398], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "target.size"], "methods", ["None"], ["", "def", "_down_like", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "return", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "target", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_SC.g_a": [[399, 425], ["ablations.Ablation_wo_SC.qmap_feature_g1", "ablations.Ablation_wo_SC.g_a0", "ablations.Ablation_wo_SC.g_a1", "ablations.Ablation_wo_SC.g_a2", "ablations.Ablation_wo_SC.qmap_feature_g2", "ablations.Ablation_wo_SC.g_a3", "ablations.Ablation_wo_SC.g_a4", "ablations.Ablation_wo_SC.g_a5", "ablations.Ablation_wo_SC.qmap_feature_g3", "ablations.Ablation_wo_SC.g_a6", "ablations.Ablation_wo_SC.g_a7", "ablations.Ablation_wo_SC.g_a8", "ablations.Ablation_wo_SC.qmap_feature_g4", "ablations.Ablation_wo_SC.g_a9", "ablations.Ablation_wo_SC.g_a10", "ablations.Ablation_wo_SC.g_a11", "ablations.Ablation_wo_SC.qmap_feature_g5", "ablations.Ablation_wo_SC.g_a12", "ablations.Ablation_wo_SC.g_a13", "ablations.Ablation_wo_SC.g_a14"], "methods", ["None"], ["", "def", "g_a", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "qmap", "=", "self", ".", "qmap_feature_g1", "(", "qmap", ")", "\n", "x", "=", "self", ".", "g_a0", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a1", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a2", "(", "x", ",", "qmap", ")", "\n", "\n", "qmap", "=", "self", ".", "qmap_feature_g2", "(", "qmap", ")", "\n", "x", "=", "self", ".", "g_a3", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a4", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a5", "(", "x", ",", "qmap", ")", "\n", "\n", "qmap", "=", "self", ".", "qmap_feature_g3", "(", "qmap", ")", "\n", "x", "=", "self", ".", "g_a6", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a7", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a8", "(", "x", ",", "qmap", ")", "\n", "\n", "qmap", "=", "self", ".", "qmap_feature_g4", "(", "qmap", ")", "\n", "x", "=", "self", ".", "g_a9", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a10", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a11", "(", "x", ",", "qmap", ")", "\n", "\n", "qmap", "=", "self", ".", "qmap_feature_g5", "(", "qmap", ")", "\n", "x", "=", "self", ".", "g_a12", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a13", "(", "x", ",", "qmap", ")", "\n", "x", "=", "self", ".", "g_a14", "(", "x", ",", "qmap", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_SC.h_a": [[426, 442], ["ablations.Ablation_wo_SC.qmap_feature_h1", "ablations.Ablation_wo_SC.h_a0", "ablations.Ablation_wo_SC.h_a1", "ablations.Ablation_wo_SC.h_a2", "ablations.Ablation_wo_SC.qmap_feature_h2", "ablations.Ablation_wo_SC.h_a3", "ablations.Ablation_wo_SC.h_a4", "ablations.Ablation_wo_SC.h_a5", "ablations.Ablation_wo_SC.qmap_feature_h3", "ablations.Ablation_wo_SC.h_a6", "ablations.Ablation_wo_SC.h_a7", "ablations.Ablation_wo_SC.h_a8", "ablations.Ablation_wo_SC._down_like"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC._down_like"], ["", "def", "h_a", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "qmap", "=", "self", ".", "qmap_feature_h1", "(", "self", ".", "_down_like", "(", "qmap", ",", "x", ")", ")", "\n", "x", "=", "self", ".", "h_a0", "(", "x", ")", "\n", "x", "=", "self", ".", "h_a1", "(", "x", ",", "qmap", ")", "\n", "x", "=", "self", ".", "h_a2", "(", "x", ")", "\n", "\n", "qmap", "=", "self", ".", "qmap_feature_h2", "(", "qmap", ")", "\n", "x", "=", "self", ".", "h_a3", "(", "x", ")", "\n", "x", "=", "self", ".", "h_a4", "(", "x", ",", "qmap", ")", "\n", "x", "=", "self", ".", "h_a5", "(", "x", ")", "\n", "\n", "qmap", "=", "self", ".", "qmap_feature_h3", "(", "qmap", ")", "\n", "x", "=", "self", ".", "h_a6", "(", "x", ")", "\n", "x", "=", "self", ".", "h_a7", "(", "x", ",", "qmap", ")", "\n", "x", "=", "self", ".", "h_a8", "(", "x", ",", "qmap", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_SC.g_s": [[443, 471], ["ablations.Ablation_wo_SC.qmap_feature_gs0", "ablations.Ablation_wo_SC.qmap_feature_gs1", "ablations.Ablation_wo_SC.g_s0", "ablations.Ablation_wo_SC.g_s1", "ablations.Ablation_wo_SC.qmap_feature_gs2", "ablations.Ablation_wo_SC.g_s2", "ablations.Ablation_wo_SC.g_s3", "ablations.Ablation_wo_SC.g_s4", "ablations.Ablation_wo_SC.qmap_feature_gs3", "ablations.Ablation_wo_SC.g_s5", "ablations.Ablation_wo_SC.g_s6", "ablations.Ablation_wo_SC.g_s7", "ablations.Ablation_wo_SC.qmap_feature_gs4", "ablations.Ablation_wo_SC.g_s8", "ablations.Ablation_wo_SC.g_s9", "ablations.Ablation_wo_SC.g_s10", "ablations.Ablation_wo_SC.qmap_feature_gs5", "ablations.Ablation_wo_SC.g_s11", "ablations.Ablation_wo_SC.g_s12", "ablations.Ablation_wo_SC.g_s13", "ablations.Ablation_wo_SC.g_s14"], "methods", ["None"], ["", "def", "g_s", "(", "self", ",", "x", ",", "z", ")", ":", "\n", "        ", "w", "=", "self", ".", "qmap_feature_gs0", "(", "z", ")", "\n", "w", "=", "self", ".", "qmap_feature_gs1", "(", "w", ")", "\n", "x", "=", "self", ".", "g_s0", "(", "x", ",", "w", ")", "\n", "x", "=", "self", ".", "g_s1", "(", "x", ",", "w", ")", "\n", "\n", "w", "=", "self", ".", "qmap_feature_gs2", "(", "w", ")", "\n", "x", "=", "self", ".", "g_s2", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s3", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s4", "(", "x", ",", "w", ")", "\n", "\n", "w", "=", "self", ".", "qmap_feature_gs3", "(", "w", ")", "\n", "x", "=", "self", ".", "g_s5", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s6", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s7", "(", "x", ",", "w", ")", "\n", "\n", "w", "=", "self", ".", "qmap_feature_gs4", "(", "w", ")", "\n", "x", "=", "self", ".", "g_s8", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s9", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s10", "(", "x", ",", "w", ")", "\n", "\n", "w", "=", "self", ".", "qmap_feature_gs5", "(", "w", ")", "\n", "x", "=", "self", ".", "g_s11", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s12", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s13", "(", "x", ",", "w", ")", "\n", "\n", "x", "=", "self", ".", "g_s14", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_SC.forward": [[472, 484], ["ablations.Ablation_wo_SC.g_a", "ablations.Ablation_wo_SC.h_a", "ablations.Ablation_wo_SC.entropy_bottleneck", "ablations.Ablation_wo_SC.h_s", "ablations.Ablation_wo_SC.chunk", "ablations.Ablation_wo_SC.gaussian_conditional", "ablations.Ablation_wo_SC.g_s"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.h_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_s"], ["", "def", "forward", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "y", "=", "self", ".", "g_a", "(", "x", ",", "qmap", ")", "\n", "z", "=", "self", ".", "h_a", "(", "y", ",", "qmap", ")", "\n", "z_hat", ",", "z_likelihoods", "=", "self", ".", "entropy_bottleneck", "(", "z", ")", "\n", "gaussian_params", "=", "self", ".", "h_s", "(", "z_hat", ")", "\n", "scales_hat", ",", "means_hat", "=", "gaussian_params", ".", "chunk", "(", "2", ",", "1", ")", "\n", "y_hat", ",", "y_likelihoods", "=", "self", ".", "gaussian_conditional", "(", "y", ",", "scales_hat", ",", "means", "=", "means_hat", ")", "\n", "x_hat", "=", "self", ".", "g_s", "(", "y_hat", ",", "z_hat", ")", "\n", "\n", "return", "{", "\n", "\"x_hat\"", ":", "x_hat", ",", "\n", "\"likelihoods\"", ":", "{", "\"y\"", ":", "y_likelihoods", ",", "\"z\"", ":", "z_likelihoods", "}", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_SC.compress": [[486, 498], ["ablations.Ablation_wo_SC.g_a", "ablations.Ablation_wo_SC.h_a", "ablations.Ablation_wo_SC.entropy_bottleneck.compress", "ablations.Ablation_wo_SC.entropy_bottleneck.decompress", "ablations.Ablation_wo_SC.h_s", "ablations.Ablation_wo_SC.chunk", "ablations.Ablation_wo_SC.gaussian_conditional.build_indexes", "ablations.Ablation_wo_SC.gaussian_conditional.compress", "ablations.Ablation_wo_SC.size", "ablations.Ablation_wo_SC.size"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.h_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.compress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional.build_indexes", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.compress"], ["", "def", "compress", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "y", "=", "self", ".", "g_a", "(", "x", ",", "qmap", ")", "\n", "z", "=", "self", ".", "h_a", "(", "y", ",", "qmap", ")", "\n", "\n", "z_strings", "=", "self", ".", "entropy_bottleneck", ".", "compress", "(", "z", ")", "\n", "z_hat", "=", "self", ".", "entropy_bottleneck", ".", "decompress", "(", "z_strings", ",", "z", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", "\n", "\n", "gaussian_params", "=", "self", ".", "h_s", "(", "z_hat", ")", "\n", "scales_hat", ",", "means_hat", "=", "gaussian_params", ".", "chunk", "(", "2", ",", "1", ")", "\n", "indexes", "=", "self", ".", "gaussian_conditional", ".", "build_indexes", "(", "scales_hat", ")", "\n", "y_strings", "=", "self", ".", "gaussian_conditional", ".", "compress", "(", "y", ",", "indexes", ",", "means", "=", "means_hat", ")", "\n", "return", "{", "\"strings\"", ":", "[", "y_strings", ",", "z_strings", "]", ",", "\"shape\"", ":", "z", ".", "size", "(", ")", "[", "-", "2", ":", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_SC.decompress": [[499, 510], ["ablations.Ablation_wo_SC.entropy_bottleneck.decompress", "ablations.Ablation_wo_SC.h_s", "ablations.Ablation_wo_SC.chunk", "ablations.Ablation_wo_SC.gaussian_conditional.build_indexes", "ablations.Ablation_wo_SC.gaussian_conditional.decompress", "ablations.Ablation_wo_SC.g_s().clamp_", "isinstance", "len", "ablations.Ablation_wo_SC.g_s"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional.build_indexes", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_s"], ["", "def", "decompress", "(", "self", ",", "strings", ",", "shape", ")", ":", "\n", "        ", "assert", "isinstance", "(", "strings", ",", "list", ")", "and", "len", "(", "strings", ")", "==", "2", "\n", "z_hat", "=", "self", ".", "entropy_bottleneck", ".", "decompress", "(", "strings", "[", "1", "]", ",", "shape", ")", "\n", "gaussian_params", "=", "self", ".", "h_s", "(", "z_hat", ")", "\n", "scales_hat", ",", "means_hat", "=", "gaussian_params", ".", "chunk", "(", "2", ",", "1", ")", "\n", "indexes", "=", "self", ".", "gaussian_conditional", ".", "build_indexes", "(", "scales_hat", ")", "\n", "y_hat", "=", "self", ".", "gaussian_conditional", ".", "decompress", "(", "\n", "strings", "[", "0", "]", ",", "indexes", ",", "means", "=", "means_hat", "\n", ")", "\n", "x_hat", "=", "self", ".", "g_s", "(", "y_hat", ",", "z_hat", ")", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "return", "{", "\"x_hat\"", ":", "x_hat", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS.__init__": [[513, 612], ["hyperpriors.ScaleHyperprior.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.Conv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "layers.SFTResblk", "layers.SFTResblk", "layers.Conv2d", "layers.SFT", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.Conv2d", "layers.SFT", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.Conv2d", "layers.SFTResblk", "layers.SFTResblk", "layers.SFTResblk", "layers.SFTResblk", "layers.UpConv2d", "layers.GDN1", "layers.SFT", "layers.UpConv2d", "layers.GDN1", "layers.SFT", "layers.UpConv2d", "layers.GDN1", "layers.SFT", "layers.UpConv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.__init__", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv"], ["    ", "def", "__init__", "(", "self", ",", "N", "=", "192", ",", "M", "=", "192", ",", "sft_ks", "=", "3", ",", "prior_nc", "=", "64", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "N", ",", "M", ",", "**", "kwargs", ")", "\n", "# featured qmap", "\n", "self", ".", "qmap_feature_g1", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "4", ",", "prior_nc", "*", "4", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "4", ",", "prior_nc", "*", "2", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "2", ",", "prior_nc", ",", "3", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_h1", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "M", "+", "1", ",", "prior_nc", "*", "4", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "4", ",", "prior_nc", "*", "2", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "2", ",", "prior_nc", ",", "3", ",", "1", ")", "\n", ")", "\n", "# for decoder", "\n", "self", ".", "qmap_feature_gs0", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "N", ",", "N", "//", "2", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "UpConv2d", "(", "N", "//", "2", ",", "N", "//", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "N", "//", "4", ",", "N", "//", "4", ",", "3", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_gs1", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "N", "+", "N", "//", "4", ",", "prior_nc", "*", "4", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "4", ",", "prior_nc", "*", "2", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "2", ",", "prior_nc", ",", "3", ",", "1", ")", "\n", ")", "\n", "\n", "# main encoder", "\n", "self", ".", "g_a", "=", "None", "\n", "self", ".", "g_a0", "=", "Conv2d", "(", "3", ",", "N", "//", "4", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ")", "\n", "self", ".", "g_a1", "=", "GDN1", "(", "N", "//", "4", ")", "\n", "self", ".", "g_a2", "=", "SFT", "(", "N", "//", "4", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_a3", "=", "Conv2d", "(", "N", "//", "4", ",", "N", "//", "2", ")", "\n", "self", ".", "g_a4", "=", "GDN1", "(", "N", "//", "2", ")", "\n", "self", ".", "g_a5", "=", "SFT", "(", "N", "//", "2", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_a6", "=", "Conv2d", "(", "N", "//", "2", ",", "N", ")", "\n", "self", ".", "g_a7", "=", "GDN1", "(", "N", ")", "\n", "self", ".", "g_a8", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_a9", "=", "Conv2d", "(", "N", ",", "N", ")", "\n", "self", ".", "g_a10", "=", "GDN1", "(", "N", ")", "\n", "self", ".", "g_a11", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_a12", "=", "Conv2d", "(", "N", ",", "M", ")", "\n", "self", ".", "g_a13", "=", "SFTResblk", "(", "M", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "g_a14", "=", "SFTResblk", "(", "M", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "# hyperprior encoder", "\n", "self", ".", "h_a", "=", "None", "\n", "self", ".", "h_a0", "=", "Conv2d", "(", "M", ",", "N", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", "self", ".", "h_a1", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "h_a2", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "h_a3", "=", "Conv2d", "(", "N", ",", "N", ")", "\n", "self", ".", "h_a4", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "h_a5", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "h_a6", "=", "Conv2d", "(", "N", ",", "N", ")", "\n", "self", ".", "h_a7", "=", "SFTResblk", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "h_a8", "=", "SFTResblk", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "# main decoder", "\n", "self", ".", "g_s", "=", "None", "\n", "self", ".", "g_s0", "=", "SFTResblk", "(", "M", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "g_s1", "=", "SFTResblk", "(", "M", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s2", "=", "UpConv2d", "(", "M", ",", "N", ")", "\n", "self", ".", "g_s3", "=", "GDN1", "(", "N", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s4", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s5", "=", "UpConv2d", "(", "N", ",", "N", ")", "\n", "self", ".", "g_s6", "=", "GDN1", "(", "N", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s7", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s8", "=", "UpConv2d", "(", "N", ",", "N", "//", "2", ")", "\n", "self", ".", "g_s9", "=", "GDN1", "(", "N", "//", "2", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s10", "=", "SFT", "(", "N", "//", "2", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s11", "=", "UpConv2d", "(", "N", "//", "2", ",", "N", "//", "4", ")", "\n", "self", ".", "g_s12", "=", "GDN1", "(", "N", "//", "4", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s13", "=", "SFT", "(", "N", "//", "4", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s14", "=", "Conv2d", "(", "N", "//", "4", ",", "3", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ")", "\n", "\n", "# hyperprior decoder", "\n", "self", ".", "h_s", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "N", ",", "M", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "UpConv2d", "(", "M", ",", "M", "*", "3", "//", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv", "(", "M", "*", "3", "//", "2", ",", "M", "*", "2", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS._down_like": [[615, 617], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "target.size"], "methods", ["None"], ["", "def", "_down_like", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "return", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "target", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS.g_a": [[618, 640], ["ablations.Ablation_wo_CS.qmap_feature_g1", "ablations.Ablation_wo_CS.g_a0", "ablations.Ablation_wo_CS.g_a1", "ablations.Ablation_wo_CS.g_a2", "ablations.Ablation_wo_CS.g_a3", "ablations.Ablation_wo_CS.g_a4", "ablations.Ablation_wo_CS.g_a5", "ablations.Ablation_wo_CS.g_a6", "ablations.Ablation_wo_CS.g_a7", "ablations.Ablation_wo_CS.g_a8", "ablations.Ablation_wo_CS.g_a9", "ablations.Ablation_wo_CS.g_a10", "ablations.Ablation_wo_CS.g_a11", "ablations.Ablation_wo_CS.g_a12", "ablations.Ablation_wo_CS.g_a13", "ablations.Ablation_wo_CS.g_a14", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "g_a", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "qmap", "=", "self", ".", "qmap_feature_g1", "(", "torch", ".", "cat", "(", "[", "qmap", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "g_a0", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a1", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a2", "(", "x", ",", "qmap", ")", "\n", "\n", "x", "=", "self", ".", "g_a3", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a4", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a5", "(", "x", ",", "qmap", ")", "\n", "\n", "x", "=", "self", ".", "g_a6", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a7", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a8", "(", "x", ",", "qmap", ")", "\n", "\n", "x", "=", "self", ".", "g_a9", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a10", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a11", "(", "x", ",", "qmap", ")", "\n", "\n", "x", "=", "self", ".", "g_a12", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a13", "(", "x", ",", "qmap", ")", "\n", "x", "=", "self", ".", "g_a14", "(", "x", ",", "qmap", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS.h_a": [[641, 655], ["ablations.Ablation_wo_CS.qmap_feature_h1", "ablations.Ablation_wo_CS.h_a0", "ablations.Ablation_wo_CS.h_a1", "ablations.Ablation_wo_CS.h_a2", "ablations.Ablation_wo_CS.h_a3", "ablations.Ablation_wo_CS.h_a4", "ablations.Ablation_wo_CS.h_a5", "ablations.Ablation_wo_CS.h_a6", "ablations.Ablation_wo_CS.h_a7", "ablations.Ablation_wo_CS.h_a8", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ablations.Ablation_wo_CS._down_like"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC._down_like"], ["", "def", "h_a", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "qmap", "=", "self", ".", "qmap_feature_h1", "(", "torch", ".", "cat", "(", "[", "self", ".", "_down_like", "(", "qmap", ",", "x", ")", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "h_a0", "(", "x", ")", "\n", "x", "=", "self", ".", "h_a1", "(", "x", ",", "qmap", ")", "\n", "x", "=", "self", ".", "h_a2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "h_a3", "(", "x", ")", "\n", "x", "=", "self", ".", "h_a4", "(", "x", ",", "qmap", ")", "\n", "x", "=", "self", ".", "h_a5", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "h_a6", "(", "x", ")", "\n", "x", "=", "self", ".", "h_a7", "(", "x", ",", "qmap", ")", "\n", "x", "=", "self", ".", "h_a8", "(", "x", ",", "qmap", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS.g_s": [[656, 680], ["ablations.Ablation_wo_CS.qmap_feature_gs0", "ablations.Ablation_wo_CS.qmap_feature_gs1", "ablations.Ablation_wo_CS.g_s0", "ablations.Ablation_wo_CS.g_s1", "ablations.Ablation_wo_CS.g_s2", "ablations.Ablation_wo_CS.g_s3", "ablations.Ablation_wo_CS.g_s4", "ablations.Ablation_wo_CS.g_s5", "ablations.Ablation_wo_CS.g_s6", "ablations.Ablation_wo_CS.g_s7", "ablations.Ablation_wo_CS.g_s8", "ablations.Ablation_wo_CS.g_s9", "ablations.Ablation_wo_CS.g_s10", "ablations.Ablation_wo_CS.g_s11", "ablations.Ablation_wo_CS.g_s12", "ablations.Ablation_wo_CS.g_s13", "ablations.Ablation_wo_CS.g_s14", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "g_s", "(", "self", ",", "x", ",", "z", ")", ":", "\n", "        ", "w", "=", "self", ".", "qmap_feature_gs0", "(", "z", ")", "\n", "w", "=", "self", ".", "qmap_feature_gs1", "(", "torch", ".", "cat", "(", "[", "w", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "g_s0", "(", "x", ",", "w", ")", "\n", "x", "=", "self", ".", "g_s1", "(", "x", ",", "w", ")", "\n", "\n", "x", "=", "self", ".", "g_s2", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s3", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s4", "(", "x", ",", "w", ")", "\n", "\n", "x", "=", "self", ".", "g_s5", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s6", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s7", "(", "x", ",", "w", ")", "\n", "\n", "x", "=", "self", ".", "g_s8", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s9", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s10", "(", "x", ",", "w", ")", "\n", "\n", "x", "=", "self", ".", "g_s11", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s12", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s13", "(", "x", ",", "w", ")", "\n", "\n", "x", "=", "self", ".", "g_s14", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS.forward": [[681, 694], ["ablations.Ablation_wo_CS.g_a", "ablations.Ablation_wo_CS.h_a", "ablations.Ablation_wo_CS.entropy_bottleneck", "ablations.Ablation_wo_CS.h_s", "ablations.Ablation_wo_CS.chunk", "ablations.Ablation_wo_CS.gaussian_conditional", "ablations.Ablation_wo_CS.g_s"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.h_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_s"], ["", "def", "forward", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "y", "=", "self", ".", "g_a", "(", "x", ",", "qmap", ")", "\n", "z", "=", "self", ".", "h_a", "(", "y", ",", "qmap", ")", "\n", "z_hat", ",", "z_likelihoods", "=", "self", ".", "entropy_bottleneck", "(", "z", ")", "\n", "\n", "gaussian_params", "=", "self", ".", "h_s", "(", "z_hat", ")", "\n", "scales_hat", ",", "means_hat", "=", "gaussian_params", ".", "chunk", "(", "2", ",", "1", ")", "\n", "y_hat", ",", "y_likelihoods", "=", "self", ".", "gaussian_conditional", "(", "y", ",", "scales_hat", ",", "means", "=", "means_hat", ")", "\n", "x_hat", "=", "self", ".", "g_s", "(", "y_hat", ",", "z_hat", ")", "\n", "\n", "return", "{", "\n", "\"x_hat\"", ":", "x_hat", ",", "\n", "\"likelihoods\"", ":", "{", "\"y\"", ":", "y_likelihoods", ",", "\"z\"", ":", "z_likelihoods", "}", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS.compress": [[696, 708], ["ablations.Ablation_wo_CS.g_a", "ablations.Ablation_wo_CS.h_a", "ablations.Ablation_wo_CS.entropy_bottleneck.compress", "ablations.Ablation_wo_CS.entropy_bottleneck.decompress", "ablations.Ablation_wo_CS.h_s", "ablations.Ablation_wo_CS.chunk", "ablations.Ablation_wo_CS.gaussian_conditional.build_indexes", "ablations.Ablation_wo_CS.gaussian_conditional.compress", "ablations.Ablation_wo_CS.size", "ablations.Ablation_wo_CS.size"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.h_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.compress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional.build_indexes", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.compress"], ["", "def", "compress", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "y", "=", "self", ".", "g_a", "(", "x", ",", "qmap", ")", "\n", "z", "=", "self", ".", "h_a", "(", "y", ",", "qmap", ")", "\n", "\n", "z_strings", "=", "self", ".", "entropy_bottleneck", ".", "compress", "(", "z", ")", "\n", "z_hat", "=", "self", ".", "entropy_bottleneck", ".", "decompress", "(", "z_strings", ",", "z", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", "\n", "\n", "gaussian_params", "=", "self", ".", "h_s", "(", "z_hat", ")", "\n", "scales_hat", ",", "means_hat", "=", "gaussian_params", ".", "chunk", "(", "2", ",", "1", ")", "\n", "indexes", "=", "self", ".", "gaussian_conditional", ".", "build_indexes", "(", "scales_hat", ")", "\n", "y_strings", "=", "self", ".", "gaussian_conditional", ".", "compress", "(", "y", ",", "indexes", ",", "means", "=", "means_hat", ")", "\n", "return", "{", "\"strings\"", ":", "[", "y_strings", ",", "z_strings", "]", ",", "\"shape\"", ":", "z", ".", "size", "(", ")", "[", "-", "2", ":", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS.decompress": [[709, 720], ["ablations.Ablation_wo_CS.entropy_bottleneck.decompress", "ablations.Ablation_wo_CS.h_s", "ablations.Ablation_wo_CS.chunk", "ablations.Ablation_wo_CS.gaussian_conditional.build_indexes", "ablations.Ablation_wo_CS.gaussian_conditional.decompress", "ablations.Ablation_wo_CS.g_s().clamp_", "isinstance", "len", "ablations.Ablation_wo_CS.g_s"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional.build_indexes", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_s"], ["", "def", "decompress", "(", "self", ",", "strings", ",", "shape", ")", ":", "\n", "        ", "assert", "isinstance", "(", "strings", ",", "list", ")", "and", "len", "(", "strings", ")", "==", "2", "\n", "z_hat", "=", "self", ".", "entropy_bottleneck", ".", "decompress", "(", "strings", "[", "1", "]", ",", "shape", ")", "\n", "gaussian_params", "=", "self", ".", "h_s", "(", "z_hat", ")", "\n", "scales_hat", ",", "means_hat", "=", "gaussian_params", ".", "chunk", "(", "2", ",", "1", ")", "\n", "indexes", "=", "self", ".", "gaussian_conditional", ".", "build_indexes", "(", "scales_hat", ")", "\n", "y_hat", "=", "self", ".", "gaussian_conditional", ".", "decompress", "(", "\n", "strings", "[", "0", "]", ",", "indexes", ",", "means", "=", "means_hat", "\n", ")", "\n", "x_hat", "=", "self", ".", "g_s", "(", "y_hat", ",", "z_hat", ")", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "return", "{", "\"x_hat\"", ":", "x_hat", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.__init__": [[723, 821], ["hyperpriors.ScaleHyperprior.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.Conv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "layers.SFTResblk", "layers.SFTResblk", "layers.Conv2d", "layers.SFT", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.Conv2d", "layers.SFT", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.Conv2d", "layers.SFTResblk", "layers.SFTResblk", "layers.SFTResblk", "layers.SFTResblk", "layers.UpConv2d", "layers.GDN1", "layers.SFT", "layers.UpConv2d", "layers.GDN1", "layers.SFT", "layers.UpConv2d", "layers.GDN1", "layers.SFT", "layers.UpConv2d", "layers.GDN1", "layers.SFT", "layers.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.UpConv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "utils.conv"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.__init__", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv"], ["    ", "def", "__init__", "(", "self", ",", "N", "=", "192", ",", "M", "=", "192", ",", "sft_ks", "=", "3", ",", "prior_nc", "=", "64", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "N", ",", "M", ",", "**", "kwargs", ")", "\n", "# featured qmap", "\n", "self", ".", "qmap_feature_g1", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "1", ",", "prior_nc", "*", "4", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "4", ",", "prior_nc", "*", "2", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "2", ",", "prior_nc", ",", "3", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_h1", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "1", ",", "prior_nc", "*", "4", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "4", ",", "prior_nc", "*", "2", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "2", ",", "prior_nc", ",", "3", ",", "1", ")", "\n", ")", "\n", "# for decoder", "\n", "self", ".", "qmap_feature_gs0", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "N", ",", "N", "//", "2", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "UpConv2d", "(", "N", "//", "2", ",", "N", "//", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "N", "//", "4", ",", "N", "//", "4", ",", "3", ",", "1", ")", "\n", ")", "\n", "self", ".", "qmap_feature_gs1", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "N", "//", "4", ",", "prior_nc", "*", "4", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "4", ",", "prior_nc", "*", "2", ",", "3", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "conv", "(", "prior_nc", "*", "2", ",", "prior_nc", ",", "3", ",", "1", ")", "\n", ")", "\n", "\n", "# main encoder", "\n", "self", ".", "g_a", "=", "None", "\n", "self", ".", "g_a0", "=", "Conv2d", "(", "3", ",", "N", "//", "4", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ")", "\n", "self", ".", "g_a1", "=", "GDN1", "(", "N", "//", "4", ")", "\n", "self", ".", "g_a2", "=", "SFT", "(", "N", "//", "4", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_a3", "=", "Conv2d", "(", "N", "//", "4", ",", "N", "//", "2", ")", "\n", "self", ".", "g_a4", "=", "GDN1", "(", "N", "//", "2", ")", "\n", "self", ".", "g_a5", "=", "SFT", "(", "N", "//", "2", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "g_a6", "=", "Conv2d", "(", "N", "//", "2", ",", "N", ")", "\n", "self", ".", "g_a7", "=", "GDN1", "(", "N", ")", "\n", "self", ".", "g_a8", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_a9", "=", "Conv2d", "(", "N", ",", "N", ")", "\n", "self", ".", "g_a10", "=", "GDN1", "(", "N", ")", "\n", "self", ".", "g_a11", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_a12", "=", "Conv2d", "(", "N", ",", "M", ")", "\n", "self", ".", "g_a13", "=", "SFTResblk", "(", "M", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "g_a14", "=", "SFTResblk", "(", "M", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "# hyperprior encoder", "\n", "self", ".", "h_a", "=", "None", "\n", "self", ".", "h_a0", "=", "Conv2d", "(", "M", ",", "N", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", "\n", "self", ".", "h_a1", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "h_a2", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "h_a3", "=", "Conv2d", "(", "N", ",", "N", ")", "\n", "self", ".", "h_a4", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "h_a5", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "h_a6", "=", "Conv2d", "(", "N", ",", "N", ")", "\n", "self", ".", "h_a7", "=", "SFTResblk", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "h_a8", "=", "SFTResblk", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "# main decoder", "\n", "self", ".", "g_s", "=", "None", "\n", "self", ".", "g_s0", "=", "SFTResblk", "(", "M", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "self", ".", "g_s1", "=", "SFTResblk", "(", "M", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s2", "=", "UpConv2d", "(", "M", ",", "N", ")", "\n", "self", ".", "g_s3", "=", "GDN1", "(", "N", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s4", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s5", "=", "UpConv2d", "(", "N", ",", "N", ")", "\n", "self", ".", "g_s6", "=", "GDN1", "(", "N", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s7", "=", "SFT", "(", "N", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s8", "=", "UpConv2d", "(", "N", ",", "N", "//", "2", ")", "\n", "self", ".", "g_s9", "=", "GDN1", "(", "N", "//", "2", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s10", "=", "SFT", "(", "N", "//", "2", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s11", "=", "UpConv2d", "(", "N", "//", "2", ",", "N", "//", "4", ")", "\n", "self", ".", "g_s12", "=", "GDN1", "(", "N", "//", "4", ",", "inverse", "=", "True", ")", "\n", "self", ".", "g_s13", "=", "SFT", "(", "N", "//", "4", ",", "prior_nc", ",", "ks", "=", "sft_ks", ")", "\n", "\n", "self", ".", "g_s14", "=", "Conv2d", "(", "N", "//", "4", ",", "3", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ")", "\n", "\n", "# hyperprior decoder", "\n", "self", ".", "h_s", "=", "nn", ".", "Sequential", "(", "\n", "UpConv2d", "(", "N", ",", "M", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "UpConv2d", "(", "M", ",", "M", "*", "3", "//", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv", "(", "M", "*", "3", "//", "2", ",", "M", "*", "2", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC._down_like": [[824, 826], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "target.size"], "methods", ["None"], ["", "def", "_down_like", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "return", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "target", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_a": [[827, 849], ["ablations.Ablation_wo_CS_SC.qmap_feature_g1", "ablations.Ablation_wo_CS_SC.g_a0", "ablations.Ablation_wo_CS_SC.g_a1", "ablations.Ablation_wo_CS_SC.g_a2", "ablations.Ablation_wo_CS_SC.g_a3", "ablations.Ablation_wo_CS_SC.g_a4", "ablations.Ablation_wo_CS_SC.g_a5", "ablations.Ablation_wo_CS_SC.g_a6", "ablations.Ablation_wo_CS_SC.g_a7", "ablations.Ablation_wo_CS_SC.g_a8", "ablations.Ablation_wo_CS_SC.g_a9", "ablations.Ablation_wo_CS_SC.g_a10", "ablations.Ablation_wo_CS_SC.g_a11", "ablations.Ablation_wo_CS_SC.g_a12", "ablations.Ablation_wo_CS_SC.g_a13", "ablations.Ablation_wo_CS_SC.g_a14"], "methods", ["None"], ["", "def", "g_a", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "qmap", "=", "self", ".", "qmap_feature_g1", "(", "qmap", ")", "\n", "x", "=", "self", ".", "g_a0", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a1", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a2", "(", "x", ",", "qmap", ")", "\n", "\n", "x", "=", "self", ".", "g_a3", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a4", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a5", "(", "x", ",", "qmap", ")", "\n", "\n", "x", "=", "self", ".", "g_a6", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a7", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a8", "(", "x", ",", "qmap", ")", "\n", "\n", "x", "=", "self", ".", "g_a9", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a10", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a11", "(", "x", ",", "qmap", ")", "\n", "\n", "x", "=", "self", ".", "g_a12", "(", "x", ")", "\n", "x", "=", "self", ".", "g_a13", "(", "x", ",", "qmap", ")", "\n", "x", "=", "self", ".", "g_a14", "(", "x", ",", "qmap", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.h_a": [[850, 864], ["ablations.Ablation_wo_CS_SC.qmap_feature_h1", "ablations.Ablation_wo_CS_SC.h_a0", "ablations.Ablation_wo_CS_SC.h_a1", "ablations.Ablation_wo_CS_SC.h_a2", "ablations.Ablation_wo_CS_SC.h_a3", "ablations.Ablation_wo_CS_SC.h_a4", "ablations.Ablation_wo_CS_SC.h_a5", "ablations.Ablation_wo_CS_SC.h_a6", "ablations.Ablation_wo_CS_SC.h_a7", "ablations.Ablation_wo_CS_SC.h_a8", "ablations.Ablation_wo_CS_SC._down_like"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC._down_like"], ["", "def", "h_a", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "qmap", "=", "self", ".", "qmap_feature_h1", "(", "self", ".", "_down_like", "(", "qmap", ",", "x", ")", ")", "\n", "x", "=", "self", ".", "h_a0", "(", "x", ")", "\n", "x", "=", "self", ".", "h_a1", "(", "x", ",", "qmap", ")", "\n", "x", "=", "self", ".", "h_a2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "h_a3", "(", "x", ")", "\n", "x", "=", "self", ".", "h_a4", "(", "x", ",", "qmap", ")", "\n", "x", "=", "self", ".", "h_a5", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "h_a6", "(", "x", ")", "\n", "x", "=", "self", ".", "h_a7", "(", "x", ",", "qmap", ")", "\n", "x", "=", "self", ".", "h_a8", "(", "x", ",", "qmap", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_s": [[865, 889], ["ablations.Ablation_wo_CS_SC.qmap_feature_gs0", "ablations.Ablation_wo_CS_SC.qmap_feature_gs1", "ablations.Ablation_wo_CS_SC.g_s0", "ablations.Ablation_wo_CS_SC.g_s1", "ablations.Ablation_wo_CS_SC.g_s2", "ablations.Ablation_wo_CS_SC.g_s3", "ablations.Ablation_wo_CS_SC.g_s4", "ablations.Ablation_wo_CS_SC.g_s5", "ablations.Ablation_wo_CS_SC.g_s6", "ablations.Ablation_wo_CS_SC.g_s7", "ablations.Ablation_wo_CS_SC.g_s8", "ablations.Ablation_wo_CS_SC.g_s9", "ablations.Ablation_wo_CS_SC.g_s10", "ablations.Ablation_wo_CS_SC.g_s11", "ablations.Ablation_wo_CS_SC.g_s12", "ablations.Ablation_wo_CS_SC.g_s13", "ablations.Ablation_wo_CS_SC.g_s14"], "methods", ["None"], ["", "def", "g_s", "(", "self", ",", "x", ",", "z", ")", ":", "\n", "        ", "w", "=", "self", ".", "qmap_feature_gs0", "(", "z", ")", "\n", "w", "=", "self", ".", "qmap_feature_gs1", "(", "w", ")", "\n", "x", "=", "self", ".", "g_s0", "(", "x", ",", "w", ")", "\n", "x", "=", "self", ".", "g_s1", "(", "x", ",", "w", ")", "\n", "\n", "x", "=", "self", ".", "g_s2", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s3", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s4", "(", "x", ",", "w", ")", "\n", "\n", "x", "=", "self", ".", "g_s5", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s6", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s7", "(", "x", ",", "w", ")", "\n", "\n", "x", "=", "self", ".", "g_s8", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s9", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s10", "(", "x", ",", "w", ")", "\n", "\n", "x", "=", "self", ".", "g_s11", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s12", "(", "x", ")", "\n", "x", "=", "self", ".", "g_s13", "(", "x", ",", "w", ")", "\n", "\n", "x", "=", "self", ".", "g_s14", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.forward": [[890, 902], ["ablations.Ablation_wo_CS_SC.g_a", "ablations.Ablation_wo_CS_SC.h_a", "ablations.Ablation_wo_CS_SC.entropy_bottleneck", "ablations.Ablation_wo_CS_SC.h_s", "ablations.Ablation_wo_CS_SC.chunk", "ablations.Ablation_wo_CS_SC.gaussian_conditional", "ablations.Ablation_wo_CS_SC.g_s"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.h_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_s"], ["", "def", "forward", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "y", "=", "self", ".", "g_a", "(", "x", ",", "qmap", ")", "\n", "z", "=", "self", ".", "h_a", "(", "y", ",", "qmap", ")", "\n", "z_hat", ",", "z_likelihoods", "=", "self", ".", "entropy_bottleneck", "(", "z", ")", "\n", "gaussian_params", "=", "self", ".", "h_s", "(", "z_hat", ")", "\n", "scales_hat", ",", "means_hat", "=", "gaussian_params", ".", "chunk", "(", "2", ",", "1", ")", "\n", "y_hat", ",", "y_likelihoods", "=", "self", ".", "gaussian_conditional", "(", "y", ",", "scales_hat", ",", "means", "=", "means_hat", ")", "\n", "x_hat", "=", "self", ".", "g_s", "(", "y_hat", ",", "z_hat", ")", "\n", "\n", "return", "{", "\n", "\"x_hat\"", ":", "x_hat", ",", "\n", "\"likelihoods\"", ":", "{", "\"y\"", ":", "y_likelihoods", ",", "\"z\"", ":", "z_likelihoods", "}", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.compress": [[904, 916], ["ablations.Ablation_wo_CS_SC.g_a", "ablations.Ablation_wo_CS_SC.h_a", "ablations.Ablation_wo_CS_SC.entropy_bottleneck.compress", "ablations.Ablation_wo_CS_SC.entropy_bottleneck.decompress", "ablations.Ablation_wo_CS_SC.h_s", "ablations.Ablation_wo_CS_SC.chunk", "ablations.Ablation_wo_CS_SC.gaussian_conditional.build_indexes", "ablations.Ablation_wo_CS_SC.gaussian_conditional.compress", "ablations.Ablation_wo_CS_SC.size", "ablations.Ablation_wo_CS_SC.size"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.h_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.compress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional.build_indexes", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.compress"], ["", "def", "compress", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "y", "=", "self", ".", "g_a", "(", "x", ",", "qmap", ")", "\n", "z", "=", "self", ".", "h_a", "(", "y", ",", "qmap", ")", "\n", "\n", "z_strings", "=", "self", ".", "entropy_bottleneck", ".", "compress", "(", "z", ")", "\n", "z_hat", "=", "self", ".", "entropy_bottleneck", ".", "decompress", "(", "z_strings", ",", "z", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", "\n", "\n", "gaussian_params", "=", "self", ".", "h_s", "(", "z_hat", ")", "\n", "scales_hat", ",", "means_hat", "=", "gaussian_params", ".", "chunk", "(", "2", ",", "1", ")", "\n", "indexes", "=", "self", ".", "gaussian_conditional", ".", "build_indexes", "(", "scales_hat", ")", "\n", "y_strings", "=", "self", ".", "gaussian_conditional", ".", "compress", "(", "y", ",", "indexes", ",", "means", "=", "means_hat", ")", "\n", "return", "{", "\"strings\"", ":", "[", "y_strings", ",", "z_strings", "]", ",", "\"shape\"", ":", "z", ".", "size", "(", ")", "[", "-", "2", ":", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.decompress": [[917, 928], ["ablations.Ablation_wo_CS_SC.entropy_bottleneck.decompress", "ablations.Ablation_wo_CS_SC.h_s", "ablations.Ablation_wo_CS_SC.chunk", "ablations.Ablation_wo_CS_SC.gaussian_conditional.build_indexes", "ablations.Ablation_wo_CS_SC.gaussian_conditional.decompress", "ablations.Ablation_wo_CS_SC.g_s().clamp_", "isinstance", "len", "ablations.Ablation_wo_CS_SC.g_s"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional.build_indexes", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_s"], ["", "def", "decompress", "(", "self", ",", "strings", ",", "shape", ")", ":", "\n", "        ", "assert", "isinstance", "(", "strings", ",", "list", ")", "and", "len", "(", "strings", ")", "==", "2", "\n", "z_hat", "=", "self", ".", "entropy_bottleneck", ".", "decompress", "(", "strings", "[", "1", "]", ",", "shape", ")", "\n", "gaussian_params", "=", "self", ".", "h_s", "(", "z_hat", ")", "\n", "scales_hat", ",", "means_hat", "=", "gaussian_params", ".", "chunk", "(", "2", ",", "1", ")", "\n", "indexes", "=", "self", ".", "gaussian_conditional", ".", "build_indexes", "(", "scales_hat", ")", "\n", "y_hat", "=", "self", ".", "gaussian_conditional", ".", "decompress", "(", "\n", "strings", "[", "0", "]", ",", "indexes", ",", "means", "=", "means_hat", "\n", ")", "\n", "x_hat", "=", "self", ".", "g_s", "(", "y_hat", ",", "z_hat", ")", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "return", "{", "\"x_hat\"", ":", "x_hat", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models._EntropyCoder.__init__": [[21, 46], ["isinstance", "ValueError", "available_entropy_coders", "ValueError", "ans.RansEncoder", "ans.RansDecoder", "available_entropy_coders", "range_coder.RangeEncoder", "range_coder.RangeDecoder", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "method", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "method", ",", "str", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid method type \"{type(method)}\"'", ")", "\n", "\n", "", "from", "compressai", "import", "available_entropy_coders", "\n", "\n", "if", "method", "not", "in", "available_entropy_coders", "(", ")", ":", "\n", "            ", "methods", "=", "\", \"", ".", "join", "(", "available_entropy_coders", "(", ")", ")", "\n", "raise", "ValueError", "(", "\n", "f'Unknown entropy coder \"{method}\"'", "f\" (available: {methods})\"", "\n", ")", "\n", "\n", "", "if", "method", "==", "\"ans\"", ":", "\n", "            ", "from", "compressai", "import", "ans", "# pylint: disable=E0611", "\n", "\n", "encoder", "=", "ans", ".", "RansEncoder", "(", ")", "\n", "decoder", "=", "ans", ".", "RansDecoder", "(", ")", "\n", "", "elif", "method", "==", "\"rangecoder\"", ":", "\n", "            ", "import", "range_coder", "# pylint: disable=E0401", "\n", "\n", "encoder", "=", "range_coder", ".", "RangeEncoder", "(", ")", "\n", "decoder", "=", "range_coder", ".", "RangeDecoder", "(", ")", "\n", "\n", "", "self", ".", "_encoder", "=", "encoder", "\n", "self", ".", "_decoder", "=", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models._EntropyCoder.encode_with_indexes": [[47, 49], ["entropy_models._EntropyCoder._encoder.encode_with_indexes"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models._EntropyCoder.encode_with_indexes"], ["", "def", "encode_with_indexes", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_encoder", ".", "encode_with_indexes", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models._EntropyCoder.decode_with_indexes": [[50, 52], ["entropy_models._EntropyCoder._decoder.decode_with_indexes"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models._EntropyCoder.decode_with_indexes"], ["", "def", "decode_with_indexes", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "_decoder", ".", "decode_with_indexes", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel.__init__": [[76, 94], ["torch.Module.__init__", "entropy_models._EntropyCoder", "int", "entropy_models.EntropyModel.register_buffer", "entropy_models.EntropyModel.register_buffer", "entropy_models.EntropyModel.register_buffer", "entropy_models.default_entropy_coder", "ops.parametrizers.LowerBound", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.__init__", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.default_entropy_coder"], ["def", "__init__", "(", "\n", "self", ",", "likelihood_bound", "=", "1e-9", ",", "entropy_coder", "=", "None", ",", "entropy_coder_precision", "=", "16", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "entropy_coder", "is", "None", ":", "\n", "            ", "entropy_coder", "=", "default_entropy_coder", "(", ")", "\n", "", "self", ".", "entropy_coder", "=", "_EntropyCoder", "(", "entropy_coder", ")", "\n", "self", ".", "entropy_coder_precision", "=", "int", "(", "entropy_coder_precision", ")", "\n", "\n", "self", ".", "use_likelihood_bound", "=", "likelihood_bound", ">", "0", "\n", "if", "self", ".", "use_likelihood_bound", ":", "\n", "            ", "self", ".", "likelihood_lower_bound", "=", "LowerBound", "(", "likelihood_bound", ")", "\n", "\n", "# to be filled on update()", "\n", "", "self", ".", "register_buffer", "(", "\"_offset\"", ",", "torch", ".", "IntTensor", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"_quantized_cdf\"", ",", "torch", ".", "IntTensor", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"_cdf_length\"", ",", "torch", ".", "IntTensor", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel.offset": [[95, 98], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "offset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel.quantized_cdf": [[99, 102], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "quantized_cdf", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_quantized_cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel.cdf_length": [[103, 106], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "cdf_length", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cdf_length", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel.forward": [[107, 109], ["NotImplementedError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel._get_noise_cached": [[110, 119], ["float", "entropy_models.EntropyModel._noise.resize_", "entropy_models.EntropyModel._noise.uniform_", "hasattr", "setattr", "x.size", "x.new", "x.size"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "_get_noise_cached", "(", "self", ",", "x", ")", ":", "\n", "# use simple caching method to avoid creating a new tensor every call", "\n", "        ", "half", "=", "float", "(", "0.5", ")", "\n", "if", "not", "hasattr", "(", "self", ",", "\"_noise\"", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "\"_noise\"", ",", "x", ".", "new", "(", "x", ".", "size", "(", ")", ")", ")", "\n", "", "self", ".", "_noise", ".", "resize_", "(", "x", ".", "size", "(", ")", ")", "\n", "self", ".", "_noise", ".", "uniform_", "(", "-", "half", ",", "half", ")", "\n", "return", "self", ".", "_noise", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel.quantize": [[120, 153], ["inputs.clone", "outputs.int.int.int", "ValueError", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "float", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "torch.empty_like().uniform_", "entropy_models.EntropyModel._get_noise_cached", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel._get_noise_cached"], ["", "def", "quantize", "(", "\n", "self", ",", "inputs", ":", "Tensor", ",", "mode", ":", "str", ",", "means", ":", "Optional", "[", "Tensor", "]", "=", "None", "\n", ")", "->", "Tensor", ":", "\n", "        ", "if", "mode", "not", "in", "(", "\"noise\"", ",", "\"dequantize\"", ",", "\"symbols\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid quantization mode: \"{mode}\"'", ")", "\n", "\n", "", "if", "mode", "==", "\"noise\"", ":", "\n", "            ", "if", "torch", ".", "jit", ".", "is_scripting", "(", ")", ":", "\n", "                ", "half", "=", "float", "(", "0.5", ")", "\n", "noise", "=", "torch", ".", "empty_like", "(", "inputs", ")", ".", "uniform_", "(", "-", "half", ",", "half", ")", "# (C, 1, HWB)", "\n", "", "else", ":", "\n", "                ", "noise", "=", "self", ".", "_get_noise_cached", "(", "inputs", ")", "\n", "", "inputs", "=", "inputs", "+", "noise", "\n", "return", "inputs", "\n", "\n", "", "outputs", "=", "inputs", ".", "clone", "(", ")", "\n", "if", "means", "is", "not", "None", ":", "\n", "            ", "outputs", "-=", "means", "\n", "\n", "# outputs = torch.round(outputs)  # gradient becomes 0", "\n", "# preserve the gradient", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "tmp", "=", "torch", ".", "round", "(", "outputs", ")", "-", "outputs", "\n", "", "outputs", "=", "tmp", "+", "outputs", "\n", "\n", "if", "mode", "==", "\"dequantize\"", ":", "\n", "            ", "if", "means", "is", "not", "None", ":", "\n", "                ", "outputs", "+=", "means", "\n", "", "return", "outputs", "\n", "\n", "", "assert", "mode", "==", "\"symbols\"", ",", "mode", "\n", "outputs", "=", "outputs", ".", "int", "(", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel._quantize": [[154, 157], ["warnings.warn", "entropy_models.EntropyModel.quantize"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel.quantize"], ["", "def", "_quantize", "(", "self", ",", "inputs", ",", "mode", ",", "means", "=", "None", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"_quantize is deprecated. Use quantize instead.\"", ")", "\n", "return", "self", ".", "quantize", "(", "inputs", ",", "mode", ",", "means", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel.dequantize": [[158, 166], ["inputs.type_as", "inputs.float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "dequantize", "(", "inputs", ",", "means", "=", "None", ")", ":", "\n", "        ", "if", "means", "is", "not", "None", ":", "\n", "            ", "outputs", "=", "inputs", ".", "type_as", "(", "means", ")", "\n", "outputs", "+=", "means", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "inputs", ".", "float", "(", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel._dequantize": [[167, 171], ["warnings.warn", "cls.dequantize"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel.dequantize"], ["", "@", "classmethod", "\n", "def", "_dequantize", "(", "cls", ",", "inputs", ",", "means", "=", "None", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"_dequantize. Use dequantize instead.\"", ")", "\n", "return", "cls", ".", "dequantize", "(", "inputs", ",", "means", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel._pmf_to_cdf": [[172, 179], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "compressai._CXX.pmf_to_quantized_cdf", "len", "compressai._CXX.pmf_to_quantized_cdf.size"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.pmf_to_quantized_cdf"], ["", "def", "_pmf_to_cdf", "(", "self", ",", "pmf", ",", "tail_mass", ",", "pmf_length", ",", "max_length", ")", ":", "\n", "        ", "cdf", "=", "torch", ".", "zeros", "(", "(", "len", "(", "pmf_length", ")", ",", "max_length", "+", "2", ")", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "pmf", ".", "device", ")", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "pmf", ")", ":", "\n", "            ", "prob", "=", "torch", ".", "cat", "(", "(", "p", "[", ":", "pmf_length", "[", "i", "]", "]", ",", "tail_mass", "[", "i", "]", ")", ",", "dim", "=", "0", ")", "\n", "_cdf", "=", "pmf_to_quantized_cdf", "(", "prob", ",", "self", ".", "entropy_coder_precision", ")", "\n", "cdf", "[", "i", ",", ":", "_cdf", ".", "size", "(", "0", ")", "]", "=", "_cdf", "\n", "", "return", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel._check_cdf_size": [[180, 186], ["entropy_models.EntropyModel._quantized_cdf.numel", "ValueError", "len", "ValueError", "entropy_models.EntropyModel._quantized_cdf.size", "entropy_models.EntropyModel._quantized_cdf.size"], "methods", ["None"], ["", "def", "_check_cdf_size", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_quantized_cdf", ".", "numel", "(", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Uninitialized CDFs. Run update() first\"", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "_quantized_cdf", ".", "size", "(", ")", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid CDF size {self._quantized_cdf.size()}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel._check_offsets_size": [[187, 193], ["entropy_models.EntropyModel._offset.numel", "ValueError", "len", "ValueError", "entropy_models.EntropyModel._offset.size", "entropy_models.EntropyModel._offset.size"], "methods", ["None"], ["", "", "def", "_check_offsets_size", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_offset", ".", "numel", "(", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Uninitialized offsets. Run update() first\"", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "_offset", ".", "size", "(", ")", ")", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid offsets size {self._offset.size()}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel._check_cdf_length": [[194, 200], ["entropy_models.EntropyModel._cdf_length.numel", "ValueError", "len", "ValueError", "entropy_models.EntropyModel._cdf_length.size", "entropy_models.EntropyModel._cdf_length.size"], "methods", ["None"], ["", "", "def", "_check_cdf_length", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_cdf_length", ".", "numel", "(", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Uninitialized CDF lengths. Run update() first\"", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "_cdf_length", ".", "size", "(", ")", ")", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid offsets size {self._cdf_length.size()}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel.compress": [[201, 233], ["entropy_models.EntropyModel.quantize", "entropy_models.EntropyModel._check_cdf_size", "entropy_models.EntropyModel._check_cdf_length", "entropy_models.EntropyModel._check_offsets_size", "range", "len", "ValueError", "inputs.size", "indexes.size", "ValueError", "entropy_models.EntropyModel.size", "entropy_models.EntropyModel.entropy_coder.encode_with_indexes", "strings.append", "inputs.size", "symbols[].reshape().int().tolist", "indexes[].reshape().int().tolist", "entropy_models.EntropyModel._quantized_cdf.tolist", "entropy_models.EntropyModel._cdf_length.reshape().int().tolist", "entropy_models.EntropyModel._offset.reshape().int().tolist", "symbols[].reshape().int", "indexes[].reshape().int", "entropy_models.EntropyModel._cdf_length.reshape().int", "entropy_models.EntropyModel._offset.reshape().int", "symbols[].reshape", "indexes[].reshape", "entropy_models.EntropyModel._cdf_length.reshape", "entropy_models.EntropyModel._offset.reshape"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel.quantize", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel._check_cdf_size", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel._check_cdf_length", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel._check_offsets_size", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models._EntropyCoder.encode_with_indexes"], ["", "", "def", "compress", "(", "self", ",", "inputs", ",", "indexes", ",", "means", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Compress input tensors to char strings.\n\n        Args:\n            inputs (torch.Tensor): input tensors (B, M, H, W)\n            indexes (torch.IntTensor): tensors CDF indexes (B, M, H, W)\n            means (torch.Tensor, optional): optional tensor means\n        \"\"\"", "\n", "symbols", "=", "self", ".", "quantize", "(", "inputs", ",", "\"symbols\"", ",", "means", ")", "\n", "\n", "if", "len", "(", "inputs", ".", "size", "(", ")", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid `inputs` size. Expected a 4-D tensor.\"", ")", "\n", "\n", "", "if", "inputs", ".", "size", "(", ")", "!=", "indexes", ".", "size", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"`inputs` and `indexes` should have the same size.\"", ")", "\n", "\n", "", "self", ".", "_check_cdf_size", "(", ")", "\n", "self", ".", "_check_cdf_length", "(", ")", "\n", "self", ".", "_check_offsets_size", "(", ")", "\n", "\n", "strings", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "symbols", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "rv", "=", "self", ".", "entropy_coder", ".", "encode_with_indexes", "(", "\n", "symbols", "[", "i", "]", ".", "reshape", "(", "-", "1", ")", ".", "int", "(", ")", ".", "tolist", "(", ")", ",", "\n", "indexes", "[", "i", "]", ".", "reshape", "(", "-", "1", ")", ".", "int", "(", ")", ".", "tolist", "(", ")", ",", "\n", "self", ".", "_quantized_cdf", ".", "tolist", "(", ")", ",", "\n", "self", ".", "_cdf_length", ".", "reshape", "(", "-", "1", ")", ".", "int", "(", ")", ".", "tolist", "(", ")", ",", "\n", "self", ".", "_offset", ".", "reshape", "(", "-", "1", ")", ".", "int", "(", ")", ".", "tolist", "(", ")", ",", "\n", ")", "\n", "strings", ".", "append", "(", "rv", ")", "\n", "", "return", "strings", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel.decompress": [[234, 279], ["entropy_models.EntropyModel._check_cdf_size", "entropy_models.EntropyModel._check_cdf_length", "entropy_models.EntropyModel._check_offsets_size", "cdf.new", "enumerate", "entropy_models.EntropyModel.dequantize", "isinstance", "ValueError", "ValueError", "len", "ValueError", "indexes.size", "entropy_models.EntropyModel.entropy_coder.decode_with_indexes", "torch.Tensor().reshape", "torch.Tensor().reshape", "torch.Tensor().reshape", "torch.Tensor().reshape", "torch.Tensor().reshape", "torch.Tensor().reshape", "torch.Tensor().reshape", "torch.Tensor().reshape", "torch.Tensor().reshape", "len", "indexes.size", "indexes.size", "ValueError", "ValueError", "indexes[].reshape().int().tolist", "cdf.tolist", "entropy_models.EntropyModel._cdf_length.reshape().int().tolist", "entropy_models.EntropyModel._offset.reshape().int().tolist", "outputs[].size", "means.size", "indexes.size", "means.size", "indexes.size", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "means.size", "means.size", "indexes[].reshape().int", "entropy_models.EntropyModel._cdf_length.reshape().int", "entropy_models.EntropyModel._offset.reshape().int", "indexes[].reshape", "entropy_models.EntropyModel._cdf_length.reshape", "entropy_models.EntropyModel._offset.reshape"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel._check_cdf_size", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel._check_cdf_length", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel._check_offsets_size", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel.dequantize", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models._EntropyCoder.decode_with_indexes"], ["", "def", "decompress", "(", "self", ",", "strings", ",", "indexes", ",", "means", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Decompress char strings to tensors.\n\n        Args:\n            strings (str): compressed tensors\n            indexes (torch.IntTensor): tensors CDF indexes\n            means (torch.Tensor, optional): optional tensor means\n        \"\"\"", "\n", "\n", "if", "not", "isinstance", "(", "strings", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid `strings` parameter type.\"", ")", "\n", "\n", "", "if", "not", "len", "(", "strings", ")", "==", "indexes", ".", "size", "(", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid strings or indexes parameters\"", ")", "\n", "\n", "", "if", "len", "(", "indexes", ".", "size", "(", ")", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid `indexes` size. Expected a 4-D tensor.\"", ")", "\n", "\n", "", "self", ".", "_check_cdf_size", "(", ")", "\n", "self", ".", "_check_cdf_length", "(", ")", "\n", "self", ".", "_check_offsets_size", "(", ")", "\n", "\n", "if", "means", "is", "not", "None", ":", "\n", "            ", "if", "means", ".", "size", "(", ")", "[", ":", "-", "2", "]", "!=", "indexes", ".", "size", "(", ")", "[", ":", "-", "2", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid means or indexes parameters\"", ")", "\n", "", "if", "means", ".", "size", "(", ")", "!=", "indexes", ".", "size", "(", ")", "and", "(", "\n", "means", ".", "size", "(", "2", ")", "!=", "1", "or", "means", ".", "size", "(", "3", ")", "!=", "1", "\n", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid means parameters\"", ")", "\n", "\n", "", "", "cdf", "=", "self", ".", "_quantized_cdf", "\n", "outputs", "=", "cdf", ".", "new", "(", "indexes", ".", "size", "(", ")", ")", "\n", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "strings", ")", ":", "\n", "            ", "values", "=", "self", ".", "entropy_coder", ".", "decode_with_indexes", "(", "\n", "s", ",", "\n", "indexes", "[", "i", "]", ".", "reshape", "(", "-", "1", ")", ".", "int", "(", ")", ".", "tolist", "(", ")", ",", "\n", "cdf", ".", "tolist", "(", ")", ",", "\n", "self", ".", "_cdf_length", ".", "reshape", "(", "-", "1", ")", ".", "int", "(", ")", ".", "tolist", "(", ")", ",", "\n", "self", ".", "_offset", ".", "reshape", "(", "-", "1", ")", ".", "int", "(", ")", ".", "tolist", "(", ")", ",", "\n", ")", "\n", "outputs", "[", "i", "]", "=", "torch", ".", "Tensor", "(", "values", ")", ".", "reshape", "(", "outputs", "[", "i", "]", ".", "size", "(", ")", ")", "\n", "", "outputs", "=", "self", ".", "dequantize", "(", "outputs", ",", "means", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck.__init__": [[315, 395], ["entropy_models.EntropyModel.__init__", "int", "tuple", "float", "float", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "range", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.log.repeat", "numpy.log", "entropy_models.EntropyBottleneck.register_buffer", "numpy.log", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor.data.fill_", "torch.Tensor.data.fill_", "torch.Tensor.data.fill_", "entropy_models.EntropyBottleneck._matrices.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "entropy_models.EntropyBottleneck._biases.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "entropy_models.EntropyBottleneck.quantiles.size", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "int", "len", "numpy.expm1", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "entropy_models.EntropyBottleneck._factors.append", "len", "torch.Parameter", "torch.Parameter", "torch.Parameter"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "channels", ",", "\n", "*", "args", ",", "\n", "tail_mass", "=", "1e-9", ",", "\n", "init_scale", "=", "10", ",", "\n", "filters", "=", "(", "3", ",", "3", ",", "3", ",", "3", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Initializer.\n\n        Arguments:\n          init_scale: Float. A scaling factor determining the initial width of the\n            probability densities. This should be chosen big enough so that the\n            range of values of the layer inputs roughly falls within the interval\n            [`-init_scale`, `init_scale`] at the beginning of training.\n\n          filters: An iterable of ints, giving the number of filters at each layer\n            of the density model. Generally, the more filters and layers, the more\n            expressive is the density model in terms of modeling more complicated\n            distributions of the layer inputs. For details, refer to the paper\n            referenced above. The default is `[3, 3, 3]`, which should be sufficient\n            for most practical purposes.\n          data_format: Either `'channels_first'` or `'channels_last'` (default).\n          **kwargs: Other keyword arguments passed to superclass (`EntropyModel`).\n\n        Creates the variables for the network modeling the densities, creates the\n        auxiliary loss estimating the median and tail quantiles of the densities,\n        and then uses that to create the probability mass functions and the discrete\n        cumulative density functions used by the range coder.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "channels", "=", "int", "(", "channels", ")", "\n", "self", ".", "filters", "=", "tuple", "(", "int", "(", "f", ")", "for", "f", "in", "filters", ")", "\n", "self", ".", "init_scale", "=", "float", "(", "init_scale", ")", "\n", "self", ".", "tail_mass", "=", "float", "(", "tail_mass", ")", "\n", "\n", "# Create parameters", "\n", "self", ".", "_biases", "=", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "_factors", "=", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "_matrices", "=", "nn", ".", "ParameterList", "(", ")", "\n", "\n", "filters", "=", "(", "1", ",", ")", "+", "self", ".", "filters", "+", "(", "1", ",", ")", "\n", "scale", "=", "self", ".", "init_scale", "**", "(", "1", "/", "(", "len", "(", "self", ".", "filters", ")", "+", "1", ")", ")", "\n", "channels", "=", "self", ".", "channels", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "filters", ")", "+", "1", ")", ":", "# 5", "\n", "            ", "init", "=", "np", ".", "log", "(", "np", ".", "expm1", "(", "1", "/", "scale", "/", "filters", "[", "i", "+", "1", "]", ")", ")", "\n", "\n", "matrix", "=", "torch", ".", "Tensor", "(", "channels", ",", "filters", "[", "i", "+", "1", "]", ",", "filters", "[", "i", "]", ")", "\n", "matrix", ".", "data", ".", "fill_", "(", "init", ")", "\n", "self", ".", "_matrices", ".", "append", "(", "nn", ".", "Parameter", "(", "matrix", ")", ")", "\n", "\n", "bias", "=", "torch", ".", "Tensor", "(", "channels", ",", "filters", "[", "i", "+", "1", "]", ",", "1", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "bias", ",", "-", "0.5", ",", "0.5", ")", "\n", "self", ".", "_biases", ".", "append", "(", "nn", ".", "Parameter", "(", "bias", ")", ")", "\n", "\n", "if", "i", "<", "len", "(", "self", ".", "filters", ")", ":", "\n", "                ", "factor", "=", "torch", ".", "Tensor", "(", "channels", ",", "filters", "[", "i", "+", "1", "]", ",", "1", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "factor", ")", "\n", "self", ".", "_factors", ".", "append", "(", "nn", ".", "Parameter", "(", "factor", ")", ")", "\n", "\n", "# To figure out what range of the densities to sample, we need to compute", "\n", "# the quantiles given by `tail_mass / 2` and `1 - tail_mass / 2`. Since we", "\n", "# can't take inverses of the cumulative directly, we make it an optimization", "\n", "# problem:", "\n", "# `quantiles = argmin(|logit(cumulative) - target|)`", "\n", "# where `target` is `logit(tail_mass / 2)` or `logit(1 - tail_mass / 2)`.", "\n", "# Taking the logit (inverse of sigmoid) of the cumulative makes the", "\n", "# representation of the right target more numerically stable.", "\n", "\n", "", "", "self", ".", "quantiles", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "channels", ",", "1", ",", "3", ")", ")", "\n", "init", "=", "torch", ".", "Tensor", "(", "[", "-", "self", ".", "init_scale", ",", "0", ",", "self", ".", "init_scale", "]", ")", "\n", "self", ".", "quantiles", ".", "data", "=", "init", ".", "repeat", "(", "self", ".", "quantiles", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "\n", "# Numerically stable way of computing logits of `tail_mass / 2` and `1 - tail_mass / 2`.", "\n", "target", "=", "np", ".", "log", "(", "2", "/", "self", ".", "tail_mass", "-", "1", ")", "\n", "# Compute lower and upper tail quantile as well as median.", "\n", "self", ".", "register_buffer", "(", "\"target\"", ",", "torch", ".", "Tensor", "(", "[", "-", "target", ",", "0", ",", "target", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck._medians": [[396, 399], ["None"], "methods", ["None"], ["", "def", "_medians", "(", "self", ")", ":", "\n", "        ", "medians", "=", "self", ".", "quantiles", "[", ":", ",", ":", ",", "1", ":", "2", "]", "\n", "return", "medians", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck.update": [[400, 442], ["torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "pmf_length.max", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "float", "entropy_models.EntropyBottleneck._logits_cumulative", "entropy_models.EntropyBottleneck._logits_cumulative", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "entropy_models.EntropyBottleneck._pmf_to_cdf", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "entropy_models.EntropyBottleneck._offset.numel", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck._logits_cumulative", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck._logits_cumulative", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel._pmf_to_cdf"], ["", "def", "update", "(", "self", ",", "force", "=", "False", ")", ":", "\n", "# Check if we need to update the bottleneck parameters, the offsets are", "\n", "# only computed and stored when the conditonal model is update()'d.", "\n", "        ", "if", "self", ".", "_offset", ".", "numel", "(", ")", ">", "0", "and", "not", "force", ":", "# pylint: disable=E0203", "\n", "            ", "return", "False", "\n", "\n", "", "medians", "=", "self", ".", "quantiles", "[", ":", ",", "0", ",", "1", "]", "\n", "\n", "minima", "=", "medians", "-", "self", ".", "quantiles", "[", ":", ",", "0", ",", "0", "]", "\n", "minima", "=", "torch", ".", "ceil", "(", "minima", ")", ".", "int", "(", ")", "\n", "minima", "=", "torch", ".", "clamp", "(", "minima", ",", "min", "=", "0", ")", "\n", "\n", "maxima", "=", "self", ".", "quantiles", "[", ":", ",", "0", ",", "2", "]", "-", "medians", "\n", "maxima", "=", "torch", ".", "ceil", "(", "maxima", ")", ".", "int", "(", ")", "\n", "maxima", "=", "torch", ".", "clamp", "(", "maxima", ",", "min", "=", "0", ")", "\n", "\n", "self", ".", "_offset", "=", "-", "minima", "\n", "\n", "pmf_start", "=", "medians", "-", "minima", "\n", "pmf_length", "=", "maxima", "+", "minima", "+", "1", "\n", "\n", "max_length", "=", "pmf_length", ".", "max", "(", ")", "\n", "device", "=", "pmf_start", ".", "device", "\n", "samples", "=", "torch", ".", "arange", "(", "max_length", ",", "device", "=", "device", ")", "\n", "\n", "samples", "=", "samples", "[", "None", ",", ":", "]", "+", "pmf_start", "[", ":", ",", "None", ",", "None", "]", "\n", "\n", "half", "=", "float", "(", "0.5", ")", "\n", "\n", "lower", "=", "self", ".", "_logits_cumulative", "(", "samples", "-", "half", ",", "stop_gradient", "=", "True", ")", "\n", "upper", "=", "self", ".", "_logits_cumulative", "(", "samples", "+", "half", ",", "stop_gradient", "=", "True", ")", "\n", "sign", "=", "-", "torch", ".", "sign", "(", "lower", "+", "upper", ")", "\n", "pmf", "=", "torch", ".", "abs", "(", "torch", ".", "sigmoid", "(", "sign", "*", "upper", ")", "-", "torch", ".", "sigmoid", "(", "sign", "*", "lower", ")", ")", "\n", "\n", "# Compute out-of-range (tail) masses.", "\n", "pmf", "=", "pmf", "[", ":", ",", "0", ",", ":", "]", "\n", "tail_mass", "=", "torch", ".", "sigmoid", "(", "lower", "[", ":", ",", "0", ",", ":", "1", "]", ")", "+", "torch", ".", "sigmoid", "(", "-", "upper", "[", ":", ",", "0", ",", "-", "1", ":", "]", ")", "\n", "\n", "quantized_cdf", "=", "self", ".", "_pmf_to_cdf", "(", "pmf", ",", "tail_mass", ",", "pmf_length", ",", "max_length", ")", "\n", "self", ".", "_quantized_cdf", "=", "quantized_cdf", "\n", "self", ".", "_cdf_length", "=", "pmf_length", "+", "2", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck.loss": [[443, 448], ["entropy_models.EntropyBottleneck._logits_cumulative", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck._logits_cumulative"], ["", "def", "loss", "(", "self", ")", ":", "\n", "# update quantiles", "\n", "        ", "logits", "=", "self", ".", "_logits_cumulative", "(", "self", ".", "quantiles", ",", "stop_gradient", "=", "True", ")", "\n", "loss", "=", "torch", ".", "abs", "(", "logits", "-", "self", ".", "target", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck._logits_cumulative": [[449, 484], ["range", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "len", "matrix.detach.detach.detach", "torch.softplus", "torch.softplus", "torch.softplus", "bias.detach.detach.detach", "len", "factor.detach.detach.detach", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "_logits_cumulative", "(", "self", ",", "inputs", ",", "stop_gradient", ")", ":", "\n", "# TorchScript not yet working (nn.Mmodule indexing not supported)", "\n", "        ", "\"\"\"Evaluate logits of the cumulative densities.\n        Arguments:\n          inputs: The values at which to evaluate the cumulative densities, expected\n            to be a `Tensor` of shape `(channels, 1, batch)`.\n\n          stop_gradient: Boolean. Whether to add `tf.stop_gradient` calls so\n            that the gradient of the output with respect to the density model\n            parameters is disconnected (the gradient with respect to `inputs` is\n            left untouched).\n\n        Returns:\n          A `Tensor` of the same shape as `inputs`, containing the logits of the\n          cumulative densities evaluated at the given inputs.\n        \"\"\"", "\n", "\n", "logits", "=", "inputs", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "filters", ")", "+", "1", ")", ":", "\n", "            ", "matrix", "=", "self", ".", "_matrices", "[", "i", "]", "\n", "if", "stop_gradient", ":", "\n", "                ", "matrix", "=", "matrix", ".", "detach", "(", ")", "\n", "", "logits", "=", "torch", ".", "matmul", "(", "F", ".", "softplus", "(", "matrix", ")", ",", "logits", ")", "\n", "\n", "bias", "=", "self", ".", "_biases", "[", "i", "]", "\n", "if", "stop_gradient", ":", "\n", "                ", "bias", "=", "bias", ".", "detach", "(", ")", "\n", "", "logits", "+=", "bias", "\n", "\n", "if", "i", "<", "len", "(", "self", ".", "_factors", ")", ":", "\n", "                ", "factor", "=", "self", ".", "_factors", "[", "i", "]", "\n", "if", "stop_gradient", ":", "\n", "                    ", "factor", "=", "factor", ".", "detach", "(", ")", "\n", "", "logits", "+=", "torch", ".", "tanh", "(", "factor", ")", "*", "torch", ".", "tanh", "(", "logits", ")", "\n", "", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck._likelihood": [[485, 502], ["float", "entropy_models.EntropyBottleneck._logits_cumulative", "entropy_models.EntropyBottleneck._logits_cumulative", "sign.detach.detach.detach", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck._logits_cumulative", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck._logits_cumulative"], ["", "@", "torch", ".", "jit", ".", "unused", "\n", "def", "_likelihood", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "half", "=", "float", "(", "0.5", ")", "\n", "# Evaluate densities.", "\n", "# We can use the special rule below to only compute differences in the left", "\n", "# tail of the sigmoid. This increases numerical stability: sigmoid(x) is 1", "\n", "# for large x, 0 for small x. Subtracting two numbers close to 0 can be done", "\n", "# with much higher precision than subtracting two numbers close to 1.", "\n", "lower", "=", "self", ".", "_logits_cumulative", "(", "inputs", "-", "half", ",", "stop_gradient", "=", "False", ")", "# stop_gradient: False", "\n", "upper", "=", "self", ".", "_logits_cumulative", "(", "inputs", "+", "half", ",", "stop_gradient", "=", "False", ")", "# stop_gradient: False", "\n", "# Flip signs if we can move more towards the left tail of the sigmoid.", "\n", "sign", "=", "-", "torch", ".", "sign", "(", "lower", "+", "upper", ")", "\n", "sign", "=", "sign", ".", "detach", "(", ")", "\n", "likelihood", "=", "torch", ".", "abs", "(", "\n", "torch", ".", "sigmoid", "(", "sign", "*", "upper", ")", "-", "torch", ".", "sigmoid", "(", "sign", "*", "lower", ")", "\n", ")", "\n", "return", "likelihood", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck.forward": [[503, 530], ["x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.reshape", "entropy_models.EntropyBottleneck.quantize", "outputs.permute().contiguous.permute().contiguous.reshape", "outputs.permute().contiguous.permute().contiguous.permute().contiguous", "entropy_models.EntropyBottleneck.reshape", "entropy_models.EntropyBottleneck.permute().contiguous", "x.permute().contiguous.permute().contiguous.size", "entropy_models.EntropyBottleneck._medians", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "entropy_models.EntropyBottleneck._likelihood", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "x.permute().contiguous.permute().contiguous.permute", "entropy_models.EntropyBottleneck.likelihood_lower_bound", "outputs.permute().contiguous.permute().contiguous.permute", "entropy_models.EntropyBottleneck.permute"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel.quantize", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck._medians", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional._likelihood"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Convert to (channels, ... , batch) format", "\n", "        ", "x", "=", "x", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "shape", "=", "x", ".", "size", "(", ")", "\n", "values", "=", "x", ".", "reshape", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "-", "1", ")", "\n", "\n", "# Add noise or quantize", "\n", "outputs", "=", "self", ".", "quantize", "(", "\n", "values", ",", "\"noise\"", "if", "self", ".", "training", "else", "\"dequantize\"", ",", "self", ".", "_medians", "(", ")", "\n", ")", "\n", "\n", "if", "not", "torch", ".", "jit", ".", "is_scripting", "(", ")", ":", "\n", "            ", "likelihood", "=", "self", ".", "_likelihood", "(", "outputs", ")", "\n", "if", "self", ".", "use_likelihood_bound", ":", "\n", "                ", "likelihood", "=", "self", ".", "likelihood_lower_bound", "(", "likelihood", ")", "\n", "", "", "else", ":", "\n", "# TorchScript not yet supported", "\n", "            ", "likelihood", "=", "torch", ".", "zeros_like", "(", "outputs", ")", "\n", "\n", "# Convert back to input tensor shape", "\n", "", "outputs", "=", "outputs", ".", "reshape", "(", "shape", ")", "\n", "outputs", "=", "outputs", ".", "permute", "(", "3", ",", "0", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "likelihood", "=", "likelihood", ".", "reshape", "(", "shape", ")", "\n", "likelihood", "=", "likelihood", ".", "permute", "(", "3", ",", "0", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "outputs", ",", "likelihood", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck._build_indexes": [[531, 537], ["torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "indexes.int.int.int", "indexes.int.int.repeat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_build_indexes", "(", "size", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "size", "\n", "indexes", "=", "torch", ".", "arange", "(", "C", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "indexes", "=", "indexes", ".", "int", "(", ")", "\n", "return", "indexes", ".", "repeat", "(", "N", ",", "1", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck.compress": [[538, 543], ["entropy_models.EntropyBottleneck._build_indexes", "entropy_models.EntropyBottleneck._medians().detach().expand", "entropy_models.EntropyModel.compress", "x.size", "x.size", "entropy_models.EntropyBottleneck._medians().detach", "entropy_models.EntropyBottleneck._medians"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck._build_indexes", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.compress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck._medians"], ["", "def", "compress", "(", "self", ",", "x", ")", ":", "\n", "# x: (B, M, H, W)", "\n", "        ", "indexes", "=", "self", ".", "_build_indexes", "(", "x", ".", "size", "(", ")", ")", "\n", "medians", "=", "self", ".", "_medians", "(", ")", ".", "detach", "(", ")", ".", "expand", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "return", "super", "(", ")", ".", "compress", "(", "x", ",", "indexes", ",", "medians", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck.decompress": [[544, 549], ["entropy_models.EntropyBottleneck._build_indexes().to", "entropy_models.EntropyBottleneck._medians().detach().expand", "entropy_models.EntropyModel.decompress", "len", "entropy_models.EntropyBottleneck._quantized_cdf.size", "len", "entropy_models.EntropyBottleneck._build_indexes", "entropy_models.EntropyBottleneck._medians().detach", "entropy_models.EntropyBottleneck._medians"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck._build_indexes", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck._medians"], ["", "def", "decompress", "(", "self", ",", "strings", ",", "size", ")", ":", "\n", "        ", "output_size", "=", "(", "len", "(", "strings", ")", ",", "self", ".", "_quantized_cdf", ".", "size", "(", "0", ")", ",", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", "\n", "indexes", "=", "self", ".", "_build_indexes", "(", "output_size", ")", ".", "to", "(", "self", ".", "_quantized_cdf", ".", "device", ")", "\n", "medians", "=", "self", ".", "_medians", "(", ")", ".", "detach", "(", ")", ".", "expand", "(", "len", "(", "strings", ")", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "return", "super", "(", ")", ".", "decompress", "(", "strings", ",", "indexes", ",", "medians", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional.__init__": [[562, 592], ["entropy_models.EntropyModel.__init__", "float", "entropy_models.GaussianConditional.register_buffer", "entropy_models.GaussianConditional.register_buffer", "isinstance", "ValueError", "isinstance", "ValueError", "ValueError", "ops.parametrizers.LowerBound", "len", "any", "ops.parametrizers.LowerBound", "ValueError", "entropy_models.GaussianConditional._prepare_scale_table", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "type", "sorted", "type", "len", "float"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.__init__", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional._prepare_scale_table"], ["def", "__init__", "(", "self", ",", "scale_table", ",", "*", "args", ",", "scale_bound", "=", "0.11", ",", "tail_mass", "=", "1e-9", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "not", "isinstance", "(", "scale_table", ",", "(", "type", "(", "None", ")", ",", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid type for scale_table \"{type(scale_table)}\"'", ")", "\n", "\n", "", "if", "isinstance", "(", "scale_table", ",", "(", "list", ",", "tuple", ")", ")", "and", "len", "(", "scale_table", ")", "<", "1", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid scale_table length \"{len(scale_table)}\"'", ")", "\n", "\n", "", "if", "scale_table", "and", "(", "\n", "scale_table", "!=", "sorted", "(", "scale_table", ")", "or", "any", "(", "s", "<=", "0", "for", "s", "in", "scale_table", ")", "\n", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid scale_table \"({scale_table})\"'", ")", "\n", "\n", "", "self", ".", "tail_mass", "=", "float", "(", "tail_mass", ")", "\n", "if", "scale_bound", "is", "None", "and", "scale_table", ":", "\n", "            ", "self", ".", "lower_bound_scale", "=", "LowerBound", "(", "self", ".", "scale_table", "[", "0", "]", ")", "\n", "", "elif", "scale_bound", ">", "0", ":", "\n", "            ", "self", ".", "lower_bound_scale", "=", "LowerBound", "(", "scale_bound", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid parameters\"", ")", "\n", "\n", "", "self", ".", "register_buffer", "(", "\n", "\"scale_table\"", ",", "\n", "self", ".", "_prepare_scale_table", "(", "scale_table", ")", "if", "scale_table", "else", "torch", ".", "Tensor", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\n", "\"scale_bound\"", ",", "\n", "torch", ".", "Tensor", "(", "[", "float", "(", "scale_bound", ")", "]", ")", "if", "scale_bound", "is", "not", "None", "else", "None", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional._prepare_scale_table": [[594, 597], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "tuple", "float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_prepare_scale_table", "(", "scale_table", ")", ":", "\n", "        ", "return", "torch", ".", "Tensor", "(", "tuple", "(", "float", "(", "s", ")", "for", "s", "in", "scale_table", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional._standardized_cumulative": [[598, 604], ["float", "float", "torch.erfc", "torch.erfc", "torch.erfc", "torch.erfc", "torch.erfc", "torch.erfc", "torch.erfc", "torch.erfc", "torch.erfc"], "methods", ["None"], ["", "def", "_standardized_cumulative", "(", "self", ",", "inputs", ")", ":", "\n", "# type: (Tensor) -> Tensor", "\n", "        ", "half", "=", "float", "(", "0.5", ")", "\n", "const", "=", "float", "(", "-", "(", "2", "**", "-", "0.5", ")", ")", "# - 1/sqrt(2)", "\n", "# Using the complementary error function maximizes numerical precision.", "\n", "return", "half", "*", "torch", ".", "erfc", "(", "const", "*", "inputs", ")", "# cdf of gaussian", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional._standardized_quantile": [[605, 608], ["scipy.stats.norm.ppf"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_standardized_quantile", "(", "quantile", ")", ":", "\n", "        ", "return", "scipy", ".", "stats", ".", "norm", ".", "ppf", "(", "quantile", ")", "# ppf: inverse of cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional.update_scale_table": [[609, 619], ["entropy_models.GaussianConditional._prepare_scale_table().to", "entropy_models.GaussianConditional.update", "entropy_models.GaussianConditional._offset.numel", "entropy_models.GaussianConditional._prepare_scale_table"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional._prepare_scale_table"], ["", "def", "update_scale_table", "(", "self", ",", "scale_table", ",", "force", "=", "False", ")", ":", "\n", "# Check if we need to update the gaussian conditional parameters, the", "\n", "# offsets are only computed and stored when the conditonal model is", "\n", "# updated.", "\n", "        ", "if", "self", ".", "_offset", ".", "numel", "(", ")", ">", "0", "and", "not", "force", ":", "\n", "            ", "return", "False", "\n", "", "device", "=", "self", ".", "scale_table", ".", "device", "\n", "self", ".", "scale_table", "=", "self", ".", "_prepare_scale_table", "(", "scale_table", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "update", "(", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional.update": [[620, 644], ["torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.ceil().int", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "entropy_models.GaussianConditional.scale_table.unsqueeze", "samples.float.float.float", "samples_scale.float.float.float", "entropy_models.GaussianConditional._standardized_cumulative", "entropy_models.GaussianConditional._standardized_cumulative", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "entropy_models.GaussianConditional._pmf_to_cdf", "entropy_models.GaussianConditional._standardized_quantile", "len", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.arange().int", "torch.arange().int", "torch.arange().int", "torch.arange().int", "torch.arange().int", "torch.arange().int", "torch.arange().int", "torch.arange().int", "torch.arange().int", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional._standardized_cumulative", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional._standardized_cumulative", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel._pmf_to_cdf", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional._standardized_quantile"], ["", "def", "update", "(", "self", ")", ":", "\n", "        ", "multiplier", "=", "-", "self", ".", "_standardized_quantile", "(", "self", ".", "tail_mass", "/", "2", ")", "\n", "pmf_center", "=", "torch", ".", "ceil", "(", "self", ".", "scale_table", "*", "multiplier", ")", ".", "int", "(", ")", "\n", "pmf_length", "=", "2", "*", "pmf_center", "+", "1", "\n", "max_length", "=", "torch", ".", "max", "(", "pmf_length", ")", ".", "item", "(", ")", "\n", "\n", "device", "=", "pmf_center", ".", "device", "\n", "samples", "=", "torch", ".", "abs", "(", "\n", "torch", ".", "arange", "(", "max_length", ",", "device", "=", "device", ")", ".", "int", "(", ")", "-", "pmf_center", "[", ":", ",", "None", "]", "\n", ")", "\n", "samples_scale", "=", "self", ".", "scale_table", ".", "unsqueeze", "(", "1", ")", "\n", "samples", "=", "samples", ".", "float", "(", ")", "\n", "samples_scale", "=", "samples_scale", ".", "float", "(", ")", "\n", "upper", "=", "self", ".", "_standardized_cumulative", "(", "(", "0.5", "-", "samples", ")", "/", "samples_scale", ")", "\n", "lower", "=", "self", ".", "_standardized_cumulative", "(", "(", "-", "0.5", "-", "samples", ")", "/", "samples_scale", ")", "\n", "pmf", "=", "upper", "-", "lower", "\n", "\n", "tail_mass", "=", "2", "*", "lower", "[", ":", ",", ":", "1", "]", "\n", "\n", "quantized_cdf", "=", "torch", ".", "Tensor", "(", "len", "(", "pmf_length", ")", ",", "max_length", "+", "2", ")", "\n", "quantized_cdf", "=", "self", ".", "_pmf_to_cdf", "(", "pmf", ",", "tail_mass", ",", "pmf_length", ",", "max_length", ")", "\n", "self", ".", "_quantized_cdf", "=", "quantized_cdf", "\n", "self", ".", "_offset", "=", "-", "pmf_center", "\n", "self", ".", "_cdf_length", "=", "pmf_length", "+", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional._likelihood": [[645, 662], ["float", "entropy_models.GaussianConditional.lower_bound_scale", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "entropy_models.GaussianConditional._standardized_cumulative", "entropy_models.GaussianConditional._standardized_cumulative"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional._standardized_cumulative", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional._standardized_cumulative"], ["", "def", "_likelihood", "(", "self", ",", "inputs", ",", "scales", ",", "means", "=", "None", ")", ":", "\n", "# type: (Tensor, Tensor, Optional[Tensor]) -> Tensor", "\n", "        ", "half", "=", "float", "(", "0.5", ")", "\n", "\n", "if", "means", "is", "not", "None", ":", "\n", "            ", "values", "=", "inputs", "-", "means", "\n", "", "else", ":", "\n", "            ", "values", "=", "inputs", "\n", "\n", "", "scales", "=", "self", ".", "lower_bound_scale", "(", "scales", ")", "\n", "\n", "values", "=", "torch", ".", "abs", "(", "values", ")", "\n", "upper", "=", "self", ".", "_standardized_cumulative", "(", "(", "half", "-", "values", ")", "/", "scales", ")", "\n", "lower", "=", "self", ".", "_standardized_cumulative", "(", "(", "-", "half", "-", "values", ")", "/", "scales", ")", "\n", "likelihood", "=", "upper", "-", "lower", "\n", "\n", "return", "likelihood", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional.forward": [[663, 672], ["entropy_models.GaussianConditional.quantize", "entropy_models.GaussianConditional._likelihood", "entropy_models.GaussianConditional.likelihood_lower_bound"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyModel.quantize", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional._likelihood"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "scales", ",", "means", "=", "None", ")", ":", "\n", "# type: (Tensor, Tensor, Optional[Tensor]) -> Tuple[Tensor, Tensor]", "\n", "        ", "outputs", "=", "self", ".", "quantize", "(", "\n", "inputs", ",", "\"noise\"", "if", "self", ".", "training", "else", "\"dequantize\"", ",", "means", "\n", ")", "\n", "likelihood", "=", "self", ".", "_likelihood", "(", "outputs", ",", "scales", ",", "means", ")", "\n", "if", "self", ".", "use_likelihood_bound", ":", "\n", "            ", "likelihood", "=", "self", ".", "likelihood_lower_bound", "(", "likelihood", ")", "\n", "", "return", "outputs", ",", "likelihood", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional.build_indexes": [[673, 679], ["entropy_models.GaussianConditional.lower_bound_scale", "entropy_models.GaussianConditional.new_full().int", "entropy_models.GaussianConditional.new_full", "entropy_models.GaussianConditional.size", "len"], "methods", ["None"], ["", "def", "build_indexes", "(", "self", ",", "scales", ")", ":", "\n", "        ", "scales", "=", "self", ".", "lower_bound_scale", "(", "scales", ")", "\n", "indexes", "=", "scales", ".", "new_full", "(", "scales", ".", "size", "(", ")", ",", "len", "(", "self", ".", "scale_table", ")", "-", "1", ")", ".", "int", "(", ")", "\n", "for", "s", "in", "self", ".", "scale_table", "[", ":", "-", "1", "]", ":", "\n", "            ", "indexes", "-=", "(", "scales", "<=", "s", ")", ".", "int", "(", ")", "\n", "", "return", "indexes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.default_entropy_coder": [[54, 58], ["get_entropy_coder"], "function", ["None"], ["", "", "def", "default_entropy_coder", "(", ")", ":", "\n", "    ", "from", "compressai", "import", "get_entropy_coder", "\n", "\n", "return", "get_entropy_coder", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.pmf_to_quantized_cdf": [[60, 64], ["compressai._CXX.pmf_to_quantized_cdf", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "pmf.tolist"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.pmf_to_quantized_cdf"], ["", "def", "pmf_to_quantized_cdf", "(", "pmf", ",", "precision", "=", "16", ")", ":", "\n", "    ", "cdf", "=", "_pmf_to_quantized_cdf", "(", "pmf", ".", "tolist", "(", ")", ",", "precision", ")", "\n", "cdf", "=", "torch", ".", "IntTensor", "(", "cdf", ")", "\n", "return", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.CompressionModel.__init__": [[33, 39], ["torch.Module.__init__", "entropy_models.EntropyBottleneck", "hyperpriors.CompressionModel._initialize_weights"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.__init__", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.CompressionModel._initialize_weights"], ["def", "__init__", "(", "self", ",", "entropy_bottleneck_channels", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "entropy_bottleneck", "=", "EntropyBottleneck", "(", "entropy_bottleneck_channels", ")", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.CompressionModel.aux_loss": [[40, 48], ["sum", "m.loss", "hyperpriors.CompressionModel.modules", "isinstance"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.EntropyBottleneck.loss"], ["", "", "def", "aux_loss", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the aggregated loss over the auxiliary entropy bottleneck\n        module(s).\n        \"\"\"", "\n", "aux_loss", "=", "sum", "(", "\n", "m", ".", "loss", "(", ")", "for", "m", "in", "self", ".", "modules", "(", ")", "if", "isinstance", "(", "m", ",", "EntropyBottleneck", ")", "\n", ")", "\n", "return", "aux_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.CompressionModel._initialize_weights": [[49, 55], ["hyperpriors.CompressionModel.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "ConvTranspose2d", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.CompressionModel.forward": [[56, 58], ["NotImplementedError"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.CompressionModel.parameters": [[59, 66], ["hyperpriors.CompressionModel.children", "isinstance", "m.parameters"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.CompressionModel.parameters"], ["", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns an iterator over the model parameters.\"\"\"", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "EntropyBottleneck", ")", ":", "\n", "                ", "continue", "\n", "", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "yield", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.CompressionModel.aux_parameters": [[67, 77], ["hyperpriors.CompressionModel.children", "m.parameters", "isinstance"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.CompressionModel.parameters"], ["", "", "", "def", "aux_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns an iterator over the entropy bottleneck(s) parameters for\n        the auxiliary loss.\n        \"\"\"", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "m", ",", "EntropyBottleneck", ")", ":", "\n", "                ", "continue", "\n", "", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                ", "yield", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.CompressionModel.update": [[78, 98], ["hyperpriors.CompressionModel.children", "m.update", "isinstance"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update"], ["", "", "", "def", "update", "(", "self", ",", "force", "=", "False", ")", ":", "\n", "        ", "\"\"\"Updates the entropy bottleneck(s) CDF values.\n\n        Needs to be called once after training to be able to later perform the\n        evaluation with an actual entropy coder.\n\n        Args:\n            force (bool): overwrite previous values (default: False)\n\n        Returns:\n            updated (bool): True if one of the EntropyBottlenecks was updated.\n\n        \"\"\"", "\n", "updated", "=", "False", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "m", ",", "EntropyBottleneck", ")", ":", "\n", "                ", "continue", "\n", "", "rv", "=", "m", ".", "update", "(", "force", "=", "force", ")", "\n", "updated", "|=", "rv", "\n", "", "return", "updated", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.__init__": [[112, 155], ["hyperpriors.CompressionModel.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "entropy_models.GaussianConditional", "int", "int", "utils.conv", "layers.GDN", "utils.conv", "layers.GDN", "utils.conv", "layers.GDN", "utils.conv", "utils.deconv", "layers.GDN", "utils.deconv", "layers.GDN", "utils.deconv", "layers.GDN", "utils.deconv", "utils.conv", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.conv", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.conv", "utils.deconv", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.deconv", "torch.ReLU", "torch.ReLU", "torch.ReLU", "utils.conv", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.__init__", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.deconv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.deconv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.deconv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.deconv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.deconv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.deconv", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv"], ["def", "__init__", "(", "self", ",", "N", ",", "M", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "entropy_bottleneck_channels", "=", "N", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "g_a", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "3", ",", "N", ")", ",", "\n", "GDN", "(", "N", ")", ",", "\n", "conv", "(", "N", ",", "N", ")", ",", "\n", "GDN", "(", "N", ")", ",", "\n", "conv", "(", "N", ",", "N", ")", ",", "\n", "GDN", "(", "N", ")", ",", "\n", "conv", "(", "N", ",", "M", ")", ",", "\n", ")", "\n", "\n", "self", ".", "g_s", "=", "nn", ".", "Sequential", "(", "\n", "deconv", "(", "M", ",", "N", ")", ",", "\n", "GDN", "(", "N", ",", "inverse", "=", "True", ")", ",", "\n", "deconv", "(", "N", ",", "N", ")", ",", "\n", "GDN", "(", "N", ",", "inverse", "=", "True", ")", ",", "\n", "deconv", "(", "N", ",", "N", ")", ",", "\n", "GDN", "(", "N", ",", "inverse", "=", "True", ")", ",", "\n", "deconv", "(", "N", ",", "3", ")", ",", "\n", ")", "\n", "\n", "self", ".", "h_a", "=", "nn", ".", "Sequential", "(", "\n", "conv", "(", "M", ",", "N", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv", "(", "N", ",", "N", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv", "(", "N", ",", "N", ")", ",", "\n", ")", "\n", "\n", "self", ".", "h_s", "=", "nn", ".", "Sequential", "(", "\n", "deconv", "(", "N", ",", "N", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "deconv", "(", "N", ",", "N", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "conv", "(", "N", ",", "M", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "gaussian_conditional", "=", "GaussianConditional", "(", "None", ")", "\n", "self", ".", "N", "=", "int", "(", "N", ")", "\n", "self", ".", "M", "=", "int", "(", "M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.downsampling_factor": [[156, 159], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "downsampling_factor", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "2", "**", "(", "4", "+", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.forward": [[160, 171], ["hyperpriors.ScaleHyperprior.g_a", "hyperpriors.ScaleHyperprior.h_a", "hyperpriors.ScaleHyperprior.entropy_bottleneck", "hyperpriors.ScaleHyperprior.h_s", "hyperpriors.ScaleHyperprior.gaussian_conditional", "hyperpriors.ScaleHyperprior.g_s", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.h_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_s"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "g_a", "(", "x", ")", "\n", "z", "=", "self", ".", "h_a", "(", "torch", ".", "abs", "(", "y", ")", ")", "\n", "z_hat", ",", "z_likelihoods", "=", "self", ".", "entropy_bottleneck", "(", "z", ")", "\n", "scales_hat", "=", "self", ".", "h_s", "(", "z_hat", ")", "\n", "y_hat", ",", "y_likelihoods", "=", "self", ".", "gaussian_conditional", "(", "y", ",", "scales_hat", ")", "\n", "x_hat", "=", "self", ".", "g_s", "(", "y_hat", ")", "\n", "\n", "return", "{", "\n", "\"x_hat\"", ":", "x_hat", ",", "\n", "\"likelihoods\"", ":", "{", "\"y\"", ":", "y_likelihoods", ",", "\"z\"", ":", "z_likelihoods", "}", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.load_state_dict": [[173, 188], ["utils.update_registered_buffers", "utils.update_registered_buffers", "super().load_state_dict"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.update_registered_buffers", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.update_registered_buffers", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "strict", "=", "True", ")", ":", "\n", "# Dynamically update the entropy bottleneck buffers related to the CDFs", "\n", "        ", "update_registered_buffers", "(", "\n", "self", ".", "entropy_bottleneck", ",", "\n", "\"entropy_bottleneck\"", ",", "\n", "[", "\"_quantized_cdf\"", ",", "\"_offset\"", ",", "\"_cdf_length\"", "]", ",", "\n", "state_dict", ",", "\n", ")", "\n", "update_registered_buffers", "(", "\n", "self", ".", "gaussian_conditional", ",", "\n", "\"gaussian_conditional\"", ",", "\n", "[", "\"_quantized_cdf\"", ",", "\"_offset\"", ",", "\"_cdf_length\"", ",", "\"scale_table\"", "]", ",", "\n", "state_dict", ",", "\n", ")", "\n", "super", "(", ")", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.from_state_dict": [[189, 197], ["state_dict[].size", "state_dict[].size", "cls", "cls.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.load_state_dict"], ["", "@", "classmethod", "\n", "def", "from_state_dict", "(", "cls", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Return a new model instance from `state_dict`.\"\"\"", "\n", "N", "=", "state_dict", "[", "\"g_a.0.weight\"", "]", ".", "size", "(", "0", ")", "\n", "M", "=", "state_dict", "[", "\"g_a.6.weight\"", "]", ".", "size", "(", "0", ")", "\n", "net", "=", "cls", "(", "N", ",", "M", ")", "\n", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update": [[198, 204], ["hyperpriors.ScaleHyperprior.gaussian_conditional.update_scale_table", "hyperpriors.CompressionModel.update", "hyperpriors.get_scale_table"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional.update_scale_table", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.update", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.get_scale_table"], ["", "def", "update", "(", "self", ",", "scale_table", "=", "None", ",", "force", "=", "False", ")", ":", "\n", "        ", "if", "scale_table", "is", "None", ":", "\n", "            ", "scale_table", "=", "get_scale_table", "(", ")", "\n", "", "updated", "=", "self", ".", "gaussian_conditional", ".", "update_scale_table", "(", "scale_table", ",", "force", "=", "force", ")", "\n", "updated", "|=", "super", "(", ")", ".", "update", "(", "force", "=", "force", ")", "\n", "return", "updated", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.compress": [[205, 216], ["hyperpriors.ScaleHyperprior.g_a", "hyperpriors.ScaleHyperprior.h_a", "hyperpriors.ScaleHyperprior.entropy_bottleneck.compress", "hyperpriors.ScaleHyperprior.entropy_bottleneck.decompress", "hyperpriors.ScaleHyperprior.h_s", "hyperpriors.ScaleHyperprior.gaussian_conditional.build_indexes", "hyperpriors.ScaleHyperprior.gaussian_conditional.compress", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "hyperpriors.ScaleHyperprior.size", "hyperpriors.ScaleHyperprior.size"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.h_a", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.compress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional.build_indexes", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.compress"], ["", "def", "compress", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "g_a", "(", "x", ")", "\n", "z", "=", "self", ".", "h_a", "(", "torch", ".", "abs", "(", "y", ")", ")", "\n", "\n", "z_strings", "=", "self", ".", "entropy_bottleneck", ".", "compress", "(", "z", ")", "\n", "z_hat", "=", "self", ".", "entropy_bottleneck", ".", "decompress", "(", "z_strings", ",", "z", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", "\n", "\n", "scales_hat", "=", "self", ".", "h_s", "(", "z_hat", ")", "\n", "indexes", "=", "self", ".", "gaussian_conditional", ".", "build_indexes", "(", "scales_hat", ")", "\n", "y_strings", "=", "self", ".", "gaussian_conditional", ".", "compress", "(", "y", ",", "indexes", ")", "\n", "return", "{", "\"strings\"", ":", "[", "y_strings", ",", "z_strings", "]", ",", "\"shape\"", ":", "z", ".", "size", "(", ")", "[", "-", "2", ":", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress": [[217, 225], ["hyperpriors.ScaleHyperprior.entropy_bottleneck.decompress", "hyperpriors.ScaleHyperprior.h_s", "hyperpriors.ScaleHyperprior.gaussian_conditional.build_indexes", "hyperpriors.ScaleHyperprior.gaussian_conditional.decompress", "hyperpriors.ScaleHyperprior.g_s().clamp_", "isinstance", "len", "hyperpriors.ScaleHyperprior.g_s"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.entropy_models.GaussianConditional.build_indexes", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.ScaleHyperprior.decompress", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.ablations.Ablation_wo_CS_SC.g_s"], ["", "def", "decompress", "(", "self", ",", "strings", ",", "shape", ")", ":", "\n", "        ", "assert", "isinstance", "(", "strings", ",", "list", ")", "and", "len", "(", "strings", ")", "==", "2", "\n", "z_hat", "=", "self", ".", "entropy_bottleneck", ".", "decompress", "(", "strings", "[", "1", "]", ",", "shape", ")", "\n", "scales_hat", "=", "self", ".", "h_s", "(", "z_hat", ")", "\n", "indexes", "=", "self", ".", "gaussian_conditional", ".", "build_indexes", "(", "scales_hat", ")", "\n", "y_hat", "=", "self", ".", "gaussian_conditional", ".", "decompress", "(", "strings", "[", "0", "]", ",", "indexes", ")", "\n", "x_hat", "=", "self", ".", "g_s", "(", "y_hat", ")", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "return", "{", "\"x_hat\"", ":", "x_hat", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.hyperpriors.get_scale_table": [[18, 22], ["torch.exp", "torch.exp", "torch.exp", "torch.linspace", "torch.linspace", "torch.linspace", "math.log", "math.log"], "function", ["None"], ["def", "get_scale_table", "(", "\n", "min", "=", "SCALES_MIN", ",", "max", "=", "SCALES_MAX", ",", "levels", "=", "SCALES_LEVELS", "\n", ")", ":", "# pylint: disable=W0622", "\n", "    ", "return", "torch", ".", "exp", "(", "torch", ".", "linspace", "(", "math", ".", "log", "(", "min", ")", ",", "math", ".", "log", "(", "max", ")", ",", "levels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.SFT.__init__": [[25, 35], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.__init__", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d"], ["    ", "def", "__init__", "(", "self", ",", "x_nc", ",", "prior_nc", "=", "1", ",", "ks", "=", "3", ",", "nhidden", "=", "128", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "pw", "=", "ks", "//", "2", "\n", "\n", "self", ".", "mlp_shared", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "prior_nc", ",", "nhidden", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "mlp_gamma", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "x_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "self", ".", "mlp_beta", "=", "nn", ".", "Conv2d", "(", "nhidden", ",", "x_nc", ",", "kernel_size", "=", "ks", ",", "padding", "=", "pw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.SFT.forward": [[36, 44], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "layers.SFT.mlp_shared", "layers.SFT.mlp_gamma", "layers.SFT.mlp_beta", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "qmap", "=", "F", ".", "adaptive_avg_pool2d", "(", "qmap", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "actv", "=", "self", ".", "mlp_shared", "(", "qmap", ")", "\n", "gamma", "=", "self", ".", "mlp_gamma", "(", "actv", ")", "\n", "beta", "=", "self", ".", "mlp_beta", "(", "actv", ")", "\n", "out", "=", "x", "*", "(", "1", "+", "gamma", ")", "+", "beta", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.SFTResblk.__init__": [[47, 54], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "layers.SFT", "layers.SFT"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.__init__", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d"], ["    ", "def", "__init__", "(", "self", ",", "x_nc", ",", "prior_nc", ",", "ks", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_0", "=", "nn", ".", "Conv2d", "(", "x_nc", ",", "x_nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "x_nc", ",", "x_nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "norm_0", "=", "SFT", "(", "x_nc", ",", "prior_nc", ",", "ks", "=", "ks", ")", "\n", "self", ".", "norm_1", "=", "SFT", "(", "x_nc", ",", "prior_nc", ",", "ks", "=", "ks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.SFTResblk.forward": [[55, 61], ["layers.SFTResblk.conv_0", "layers.SFTResblk.conv_1", "layers.SFTResblk.actvn", "layers.SFTResblk.actvn", "layers.SFTResblk.norm_0", "layers.SFTResblk.norm_1"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.SFTResblk.actvn", "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.SFTResblk.actvn"], ["", "def", "forward", "(", "self", ",", "x", ",", "qmap", ")", ":", "\n", "        ", "dx", "=", "self", ".", "conv_0", "(", "self", ".", "actvn", "(", "self", ".", "norm_0", "(", "x", ",", "qmap", ")", ")", ")", "\n", "dx", "=", "self", ".", "conv_1", "(", "self", ".", "actvn", "(", "self", ".", "norm_1", "(", "dx", ",", "qmap", ")", ")", ")", "\n", "out", "=", "x", "+", "dx", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.SFTResblk.actvn": [[62, 64], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu"], "methods", ["None"], ["", "def", "actvn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "leaky_relu", "(", "x", ",", "2e-1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.GDN.__init__": [[67, 83], ["torch.Module.__init__", "float", "float", "bool", "ops.parametrizers.NonNegativeParametrizer", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "layers.GDN.beta_reparam.init", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ops.parametrizers.NonNegativeParametrizer", "layers.GDN.gamma_reparam.init", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.__init__", "home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.parametrizers.NonNegativeParametrizer.init", "home.repos.pwc.inspect_result.micmic123_qmapcompression.ops.parametrizers.NonNegativeParametrizer.init"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inverse", "=", "False", ",", "beta_min", "=", "1e-6", ",", "gamma_init", "=", "0.1", ")", ":", "# beta_min=1e-6", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "beta_min", "=", "float", "(", "beta_min", ")", "\n", "gamma_init", "=", "float", "(", "gamma_init", ")", "\n", "self", ".", "inverse", "=", "bool", "(", "inverse", ")", "\n", "\n", "self", ".", "beta_reparam", "=", "NonNegativeParametrizer", "(", "minimum", "=", "beta_min", ")", "\n", "beta", "=", "torch", ".", "ones", "(", "in_channels", ")", "\n", "beta", "=", "self", ".", "beta_reparam", ".", "init", "(", "beta", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "beta", ")", "\n", "\n", "self", ".", "gamma_reparam", "=", "NonNegativeParametrizer", "(", ")", "\n", "gamma", "=", "gamma_init", "*", "torch", ".", "eye", "(", "in_channels", ")", "\n", "gamma", "=", "self", ".", "gamma_reparam", ".", "init", "(", "gamma", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "gamma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.GDN.forward": [[84, 101], ["x.size", "layers.GDN.beta_reparam", "layers.GDN.gamma_reparam", "gamma.reshape.reshape.reshape", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "C", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "\n", "beta", "=", "self", ".", "beta_reparam", "(", "self", ".", "beta", ")", "\n", "gamma", "=", "self", ".", "gamma_reparam", "(", "self", ".", "gamma", ")", "\n", "gamma", "=", "gamma", ".", "reshape", "(", "C", ",", "C", ",", "1", ",", "1", ")", "\n", "norm", "=", "F", ".", "conv2d", "(", "x", "**", "2", ",", "gamma", ",", "beta", ")", "\n", "\n", "if", "self", ".", "inverse", ":", "\n", "            ", "norm", "=", "torch", ".", "sqrt", "(", "norm", ")", "# may cause nan.", "\n", "# norm = torch.sqrt(torch.relu(norm))", "\n", "", "else", ":", "\n", "            ", "norm", "=", "torch", ".", "rsqrt", "(", "norm", ")", "\n", "\n", "", "out", "=", "x", "*", "norm", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.GDN1.forward": [[104, 118], ["x.size", "layers.GDN1.beta_reparam", "layers.GDN1.gamma_reparam", "gamma.reshape.reshape.reshape", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "C", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "\n", "beta", "=", "self", ".", "beta_reparam", "(", "self", ".", "beta", ")", "\n", "gamma", "=", "self", ".", "gamma_reparam", "(", "self", ".", "gamma", ")", "\n", "gamma", "=", "gamma", ".", "reshape", "(", "C", ",", "C", ",", "1", ",", "1", ")", "\n", "norm", "=", "F", ".", "conv2d", "(", "torch", ".", "abs", "(", "x", ")", ",", "gamma", ",", "beta", ")", "\n", "\n", "if", "not", "self", ".", "inverse", ":", "\n", "            ", "norm", "=", "1.0", "/", "(", "norm", "+", "1e-4", ")", "\n", "\n", "", "out", "=", "x", "*", "norm", "\n", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d": [[7, 11], ["torch.Conv2d"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d"], ["def", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ",", "padding_mode", "=", "'reflect'", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "kernel_size", "//", "2", ",", "padding_mode", "=", "padding_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.UpConv2d": [[13, 21], ["torch.ConvTranspose2d"], "function", ["None"], ["", "def", "UpConv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ")", ":", "\n", "    ", "return", "nn", ".", "ConvTranspose2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "output_padding", "=", "stride", "-", "1", ",", "\n", "padding", "=", "kernel_size", "//", "2", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.find_named_module": [[5, 17], ["next", "module.named_modules"], "function", ["None"], ["import", "shutil", "\n", "from", "shutil", "import", "copy2", "\n", "from", "pathlib", "import", "Path", "\n", "\n", "import", "torch", "\n", "import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "from", "torchvision", ".", "transforms", "import", "ToPILImage", ",", "ToTensor", "\n", "from", "torch", ".", "utils", ".", "tensorboard", "import", "SummaryWriter", "\n", "from", "PIL", "import", "Image", "\n", "\n", "\n", "def", "get_config", "(", "config_path", ")", ":", "\n", "    ", "with", "open", "(", "config_path", ",", "'r'", ")", "as", "stream", ":", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.find_named_buffer": [[19, 30], ["next", "module.named_buffers"], "function", ["None"], ["return", "config", "\n", "\n", "\n", "", "", "def", "init", "(", "args", ")", ":", "\n", "    ", "base_dir", "=", "f'./results/{args.name}'", "\n", "snapshot_dir", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "'snapshots'", ")", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "'outputs'", ")", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "'logs'", ")", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "snapshot_dir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "config", "=", "get_config", "(", "args", ".", "config", ")", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils._update_registered_buffer": [[32, 58], ["state_dict[].size", "utils.find_named_buffer", "RuntimeError", "find_named_buffer.resize_", "module.register_buffer", "ValueError", "find_named_buffer.numel", "RuntimeError", "torch.empty().fill_", "torch.empty().fill_", "torch.empty", "torch.empty"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.find_named_buffer"], ["        ", "copy2", "(", "args", ".", "config", ",", "os", ".", "path", ".", "join", "(", "base_dir", ",", "'config.yaml'", ")", ")", "\n", "", "except", "shutil", ".", "SameFileError", ":", "\n", "        ", "pass", "\n", "\n", "", "return", "config", ",", "base_dir", ",", "snapshot_dir", ",", "output_dir", ",", "log_dir", "\n", "\n", "\n", "", "class", "AverageMeter", ":", "\n", "    ", "\"\"\"Compute running average.\"\"\"", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n", "\n", "", "", "class", "Logger", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "config", ",", "base_dir", ",", "snapshot_dir", ",", "output_dir", ",", "log_dir", ",", "level_num", "=", "11", ",", "only_print", "=", "False", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "base_dir", "=", "base_dir", "\n", "self", ".", "snapshot_dir", "=", "snapshot_dir", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.update_registered_buffers": [[60, 95], ["utils._update_registered_buffer", "module.named_buffers", "ValueError"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils._update_registered_buffer"], ["self", ".", "log_dir", "=", "log_dir", "\n", "self", ".", "level_num", "=", "level_num", "\n", "self", ".", "itr", "=", "0", "\n", "self", ".", "init", "(", ")", "\n", "\n", "if", "not", "only_print", ":", "\n", "            ", "self", ".", "_init_summary_writers", "(", "level_num", ")", "\n", "\n", "", "", "def", "_init_summary_writers", "(", "self", ",", "level_num", ")", ":", "\n", "        ", "self", ".", "writer", "=", "SummaryWriter", "(", "self", ".", "log_dir", ")", "\n", "self", ".", "test_writers", "=", "[", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "self", ".", "log_dir", ",", "f'level_{i}'", ")", ")", "for", "i", "in", "range", "(", "level_num", "+", "1", ")", "]", "\n", "\n", "", "def", "init", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss", "=", "AverageMeter", "(", ")", "\n", "self", ".", "bpp_loss", "=", "AverageMeter", "(", ")", "\n", "self", ".", "mse_loss", "=", "AverageMeter", "(", ")", "\n", "self", ".", "psnr", "=", "AverageMeter", "(", ")", "\n", "self", ".", "ms_ssim", "=", "AverageMeter", "(", ")", "\n", "self", ".", "aux_loss", "=", "AverageMeter", "(", ")", "\n", "\n", "", "def", "load_itr", "(", "self", ",", "itr", ")", ":", "\n", "        ", "self", ".", "itr", "=", "itr", "\n", "\n", "", "def", "update", "(", "self", ",", "out_criterion", ",", "aux_loss", ")", ":", "\n", "        ", "self", ".", "loss", ".", "update", "(", "out_criterion", "[", "'loss'", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "bpp_loss", ".", "update", "(", "out_criterion", "[", "'bpp_loss'", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "mse_loss", ".", "update", "(", "out_criterion", "[", "'mse_loss'", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "aux_loss", ".", "update", "(", "aux_loss", ".", "item", "(", ")", ")", "\n", "self", ".", "itr", "+=", "1", "\n", "\n", "", "def", "update_test", "(", "self", ",", "bpp", ",", "psnr", ",", "ms_ssim", ",", "out_criterion", ",", "aux_loss", ")", ":", "\n", "        ", "self", ".", "loss", ".", "update", "(", "out_criterion", "[", "'loss'", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "bpp_loss", ".", "update", "(", "bpp", ".", "item", "(", ")", ")", "\n", "self", ".", "mse_loss", ".", "update", "(", "out_criterion", "[", "'mse_loss'", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "psnr", ".", "update", "(", "psnr", ".", "item", "(", ")", ")", "\n", "self", ".", "ms_ssim", ".", "update", "(", "ms_ssim", ".", "item", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.conv": [[98, 105], ["torch.Conv2d"], "function", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.models.layers.Conv2d"], ["", "def", "print", "(", "self", ")", ":", "\n", "        ", "print", "(", "\n", "f'[{self.itr:>7}]'", "\n", "f' Total: {self.loss.avg:.4f} |'", "\n", "f' BPP: {self.bpp_loss.avg:.4f} |'", "\n", "f' MSE: {self.mse_loss.avg:.6f} |'", "\n", "f' Aux: {self.aux_loss.avg:.0f}'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.models.utils.deconv": [[108, 116], ["torch.ConvTranspose2d"], "function", ["None"], ["        ", "print", "(", "\n", "f'[ Test{case:>2} ]'", "\n", "f' Total: {self.loss.avg:.4f} |'", "\n", "f' BPP: {self.bpp_loss.avg:.4f} |'", "\n", "f' PSNR: {self.psnr.avg:.4f} |'", "\n", "f' MS-SSIM: {self.ms_ssim.avg:.4f} |'", "\n", "f' Aux: {self.aux_loss.avg:.0f}'", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.PixelwiseRateDistortionLoss.__init__": [[9, 12], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mse", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.PixelwiseRateDistortionLoss.forward": [[13, 30], ["target.size", "sum", "losses.PixelwiseRateDistortionLoss.mse", "lmbdamap.expand_as.expand_as.expand_as", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "output[].values", "torch.log2().sum", "torch.log2().sum", "torch.log2().sum", "torch.log2().sum", "torch.log2", "torch.log2", "torch.log2", "torch.log2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output", ",", "target", ",", "lmbdamap", ")", ":", "\n", "# lmbdamap: (B, 1, H, W)", "\n", "        ", "N", ",", "_", ",", "H", ",", "W", "=", "target", ".", "size", "(", ")", "\n", "out", "=", "{", "}", "\n", "num_pixels", "=", "N", "*", "H", "*", "W", "\n", "\n", "out", "[", "'bpp_loss'", "]", "=", "sum", "(", "\n", "(", "-", "torch", ".", "log2", "(", "likelihoods", ")", ".", "sum", "(", ")", "/", "num_pixels", ")", "\n", "for", "likelihoods", "in", "output", "[", "'likelihoods'", "]", ".", "values", "(", ")", "\n", ")", "\n", "\n", "mse", "=", "self", ".", "mse", "(", "output", "[", "'x_hat'", "]", ",", "target", ")", "\n", "lmbdamap", "=", "lmbdamap", ".", "expand_as", "(", "mse", ")", "\n", "out", "[", "'mse_loss'", "]", "=", "torch", ".", "mean", "(", "lmbdamap", "*", "mse", ")", "\n", "out", "[", "'loss'", "]", "=", "255", "**", "2", "*", "out", "[", "'mse_loss'", "]", "+", "out", "[", "'bpp_loss'", "]", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.__init__": [[33, 35], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.MSE": [[36, 39], ["torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "MSE", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x, y: 4D [0, 1]", "\n", "        ", "return", "torch", ".", "mean", "(", "(", "x", "-", "y", ")", "**", "2", ",", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.PSNR": [[40, 45], ["losses.Metrics.MSE", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.log10", "torch.log10", "torch.log10", "torch.log10"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.MSE"], ["", "def", "PSNR", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x, y: 4D [0, 1]", "\n", "        ", "mse", "=", "self", ".", "MSE", "(", "x", ",", "y", ")", "\n", "psnr", "=", "10", "*", "torch", ".", "log10", "(", "1.", "/", "mse", ")", "# (B,)", "\n", "return", "torch", ".", "mean", "(", "psnr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.MS_SSIM": [[46, 50], ["pytorch_msssim.ms_ssim", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "MS_SSIM", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x, y: 4D [0, 1]", "\n", "        ", "ms_ssim", "=", "MS_SSIM", "(", "x", ",", "y", ",", "data_range", "=", "1.", ",", "size_average", "=", "True", ")", "# (B,)", "\n", "return", "torch", ".", "mean", "(", "ms_ssim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.accuracy": [[51, 65], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t.t", "pred.t.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.view", "correct[].reshape().float", "correct[].reshape"], "methods", ["None"], ["", "def", "accuracy", "(", "self", ",", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "                ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.forward": [[66, 78], ["target.size", "sum", "losses.Metrics.PSNR", "losses.Metrics.MS_SSIM", "output[].values", "torch.log2().sum", "torch.log2().sum", "torch.log2().sum", "torch.log2().sum", "torch.log2", "torch.log2", "torch.log2", "torch.log2"], "methods", ["home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.PSNR", "home.repos.pwc.inspect_result.micmic123_qmapcompression.losses.losses.Metrics.MS_SSIM"], ["", "", "def", "forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "N", ",", "_", ",", "H", ",", "W", "=", "target", ".", "size", "(", ")", "\n", "num_pixels", "=", "N", "*", "H", "*", "W", "\n", "\n", "bpp", "=", "sum", "(", "\n", "(", "-", "torch", ".", "log2", "(", "likelihoods", ")", ".", "sum", "(", ")", "/", "num_pixels", ")", "\n", "for", "likelihoods", "in", "output", "[", "'likelihoods'", "]", ".", "values", "(", ")", "\n", ")", "\n", "psnr", "=", "self", ".", "PSNR", "(", "output", "[", "'x_hat'", "]", ",", "target", ")", "\n", "ms_ssim", "=", "self", ".", "MS_SSIM", "(", "output", "[", "'x_hat'", "]", ",", "target", ")", "\n", "\n", "return", "bpp", ",", "psnr", ",", "ms_ssim", "\n", "", "", ""]]}